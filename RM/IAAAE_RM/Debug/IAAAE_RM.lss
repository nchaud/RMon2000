
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  0000641e  000064b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000641e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000517  008002a2  008002a2  00006654  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000066b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000760  00000000  00000000  000066f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ab4f  00000000  00000000  00006e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cb0  00000000  00000000  0002199f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000072c2  00000000  00000000  0002564f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028ac  00000000  00000000  0002c914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011465  00000000  00000000  0002f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b2eb  00000000  00000000  00040625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0004b910  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005ed7  00000000  00000000  0004bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__dtors_end>
       4:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
       8:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
       c:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__vector_3>
      10:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__vector_3>
      14:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__vector_3>
      18:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      1c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      20:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      24:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      28:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      2c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      30:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      34:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      38:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      3c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      40:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__vector_16>
      44:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      48:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__vector_18>
      4c:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__vector_19>
      50:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      54:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      58:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      5c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      60:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_24>
      64:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      68:	b2 14       	cp	r11, r2
      6a:	b8 14       	cp	r11, r8
      6c:	b8 14       	cp	r11, r8
      6e:	b8 14       	cp	r11, r8
      70:	b8 14       	cp	r11, r8
      72:	b8 14       	cp	r11, r8
      74:	b8 14       	cp	r11, r8
      76:	b8 14       	cp	r11, r8
      78:	a6 13       	cpse	r26, r22
      7a:	b8 14       	cp	r11, r8
      7c:	b8 14       	cp	r11, r8
      7e:	b8 14       	cp	r11, r8
      80:	b8 14       	cp	r11, r8
      82:	b8 14       	cp	r11, r8
      84:	b8 14       	cp	r11, r8
      86:	b8 14       	cp	r11, r8
      88:	a6 13       	cpse	r26, r22
      8a:	b8 14       	cp	r11, r8
      8c:	b8 14       	cp	r11, r8
      8e:	b8 14       	cp	r11, r8
      90:	b8 14       	cp	r11, r8
      92:	b8 14       	cp	r11, r8
      94:	b8 14       	cp	r11, r8
      96:	b8 14       	cp	r11, r8
      98:	b0 13       	cpse	r27, r16
      9a:	b8 14       	cp	r11, r8
      9c:	b8 14       	cp	r11, r8
      9e:	b8 14       	cp	r11, r8
      a0:	b8 14       	cp	r11, r8
      a2:	b8 14       	cp	r11, r8
      a4:	b8 14       	cp	r11, r8
      a6:	b8 14       	cp	r11, r8
      a8:	dc 13       	cpse	r29, r28
      aa:	b8 14       	cp	r11, r8
      ac:	b8 14       	cp	r11, r8
      ae:	b8 14       	cp	r11, r8
      b0:	b8 14       	cp	r11, r8
      b2:	b8 14       	cp	r11, r8
      b4:	b8 14       	cp	r11, r8
      b6:	b8 14       	cp	r11, r8
      b8:	b0 13       	cpse	r27, r16
      ba:	b8 14       	cp	r11, r8
      bc:	b8 14       	cp	r11, r8
      be:	b8 14       	cp	r11, r8
      c0:	b8 14       	cp	r11, r8
      c2:	b8 14       	cp	r11, r8
      c4:	b8 14       	cp	r11, r8
      c6:	b8 14       	cp	r11, r8
      c8:	e2 13       	cpse	r30, r18
      ca:	b8 14       	cp	r11, r8
      cc:	b8 14       	cp	r11, r8
      ce:	b8 14       	cp	r11, r8
      d0:	b8 14       	cp	r11, r8
      d2:	b8 14       	cp	r11, r8
      d4:	b8 14       	cp	r11, r8
      d6:	b8 14       	cp	r11, r8
      d8:	e8 13       	cpse	r30, r24
      da:	b8 14       	cp	r11, r8
      dc:	b8 14       	cp	r11, r8
      de:	b8 14       	cp	r11, r8
      e0:	b8 14       	cp	r11, r8
      e2:	b8 14       	cp	r11, r8
      e4:	b8 14       	cp	r11, r8
      e6:	b8 14       	cp	r11, r8
      e8:	fe 13       	cpse	r31, r30
      ea:	b8 14       	cp	r11, r8
      ec:	b8 14       	cp	r11, r8
      ee:	b8 14       	cp	r11, r8
      f0:	b8 14       	cp	r11, r8
      f2:	b8 14       	cp	r11, r8
      f4:	b8 14       	cp	r11, r8
      f6:	b8 14       	cp	r11, r8
      f8:	2e 14       	cp	r2, r14
      fa:	b8 14       	cp	r11, r8
      fc:	b8 14       	cp	r11, r8
      fe:	b8 14       	cp	r11, r8
     100:	b8 14       	cp	r11, r8
     102:	b8 14       	cp	r11, r8
     104:	b8 14       	cp	r11, r8
     106:	b8 14       	cp	r11, r8
     108:	ee 13       	cpse	r30, r30
     10a:	b8 14       	cp	r11, r8
     10c:	b8 14       	cp	r11, r8
     10e:	b8 14       	cp	r11, r8
     110:	b8 14       	cp	r11, r8
     112:	b8 14       	cp	r11, r8
     114:	b8 14       	cp	r11, r8
     116:	b8 14       	cp	r11, r8
     118:	0c 14       	cp	r0, r12
     11a:	b8 14       	cp	r11, r8
     11c:	b8 14       	cp	r11, r8
     11e:	b8 14       	cp	r11, r8
     120:	b8 14       	cp	r11, r8
     122:	b8 14       	cp	r11, r8
     124:	b8 14       	cp	r11, r8
     126:	b8 14       	cp	r11, r8
     128:	31 14       	cp	r3, r1
     12a:	b8 14       	cp	r11, r8
     12c:	b8 14       	cp	r11, r8
     12e:	b8 14       	cp	r11, r8
     130:	b8 14       	cp	r11, r8
     132:	b8 14       	cp	r11, r8
     134:	b8 14       	cp	r11, r8
     136:	b8 14       	cp	r11, r8
     138:	31 14       	cp	r3, r1
     13a:	b8 14       	cp	r11, r8
     13c:	b8 14       	cp	r11, r8
     13e:	b8 14       	cp	r11, r8
     140:	b8 14       	cp	r11, r8
     142:	b8 14       	cp	r11, r8
     144:	b8 14       	cp	r11, r8
     146:	b8 14       	cp	r11, r8
     148:	31 14       	cp	r3, r1
     14a:	b8 14       	cp	r11, r8
     14c:	b8 14       	cp	r11, r8
     14e:	b8 14       	cp	r11, r8
     150:	b8 14       	cp	r11, r8
     152:	b8 14       	cp	r11, r8
     154:	b8 14       	cp	r11, r8
     156:	b8 14       	cp	r11, r8
     158:	31 14       	cp	r3, r1
     15a:	b8 14       	cp	r11, r8
     15c:	b8 14       	cp	r11, r8
     15e:	b8 14       	cp	r11, r8
     160:	b8 14       	cp	r11, r8
     162:	b8 14       	cp	r11, r8
     164:	b8 14       	cp	r11, r8
     166:	b8 14       	cp	r11, r8
     168:	3a 14       	cp	r3, r10
     16a:	b8 14       	cp	r11, r8
     16c:	b8 14       	cp	r11, r8
     16e:	b8 14       	cp	r11, r8
     170:	b8 14       	cp	r11, r8
     172:	b8 14       	cp	r11, r8
     174:	b8 14       	cp	r11, r8
     176:	b8 14       	cp	r11, r8
     178:	74 14       	cp	r7, r4
     17a:	b8 14       	cp	r11, r8
     17c:	b8 14       	cp	r11, r8
     17e:	b8 14       	cp	r11, r8
     180:	b8 14       	cp	r11, r8
     182:	b8 14       	cp	r11, r8
     184:	b8 14       	cp	r11, r8
     186:	b8 14       	cp	r11, r8
     188:	3a 14       	cp	r3, r10
     18a:	b8 14       	cp	r11, r8
     18c:	b8 14       	cp	r11, r8
     18e:	b8 14       	cp	r11, r8
     190:	b8 14       	cp	r11, r8
     192:	b8 14       	cp	r11, r8
     194:	b8 14       	cp	r11, r8
     196:	b8 14       	cp	r11, r8
     198:	74 14       	cp	r7, r4
     19a:	b8 14       	cp	r11, r8
     19c:	b8 14       	cp	r11, r8
     19e:	b8 14       	cp	r11, r8
     1a0:	b8 14       	cp	r11, r8
     1a2:	b8 14       	cp	r11, r8
     1a4:	b8 14       	cp	r11, r8
     1a6:	b8 14       	cp	r11, r8
     1a8:	56 14       	cp	r5, r6
     1aa:	b8 14       	cp	r11, r8
     1ac:	b8 14       	cp	r11, r8
     1ae:	b8 14       	cp	r11, r8
     1b0:	b8 14       	cp	r11, r8
     1b2:	b8 14       	cp	r11, r8
     1b4:	b8 14       	cp	r11, r8
     1b6:	b8 14       	cp	r11, r8
     1b8:	78 14       	cp	r7, r8
     1ba:	b8 14       	cp	r11, r8
     1bc:	b8 14       	cp	r11, r8
     1be:	b8 14       	cp	r11, r8
     1c0:	b8 14       	cp	r11, r8
     1c2:	b8 14       	cp	r11, r8
     1c4:	b8 14       	cp	r11, r8
     1c6:	b8 14       	cp	r11, r8
     1c8:	78 14       	cp	r7, r8
     1ca:	b8 14       	cp	r11, r8
     1cc:	b8 14       	cp	r11, r8
     1ce:	b8 14       	cp	r11, r8
     1d0:	b8 14       	cp	r11, r8
     1d2:	b8 14       	cp	r11, r8
     1d4:	b8 14       	cp	r11, r8
     1d6:	b8 14       	cp	r11, r8
     1d8:	8e 14       	cp	r8, r14
     1da:	b8 14       	cp	r11, r8
     1dc:	b8 14       	cp	r11, r8
     1de:	b8 14       	cp	r11, r8
     1e0:	b8 14       	cp	r11, r8
     1e2:	b8 14       	cp	r11, r8
     1e4:	b8 14       	cp	r11, r8
     1e6:	b8 14       	cp	r11, r8
     1e8:	ac 14       	cp	r10, r12
     1ea:	b8 14       	cp	r11, r8
     1ec:	b8 14       	cp	r11, r8
     1ee:	b8 14       	cp	r11, r8
     1f0:	b8 14       	cp	r11, r8
     1f2:	b8 14       	cp	r11, r8
     1f4:	b8 14       	cp	r11, r8
     1f6:	b8 14       	cp	r11, r8
     1f8:	ac 14       	cp	r10, r12
     1fa:	b8 14       	cp	r11, r8
     1fc:	b8 14       	cp	r11, r8
     1fe:	b8 14       	cp	r11, r8
     200:	b8 14       	cp	r11, r8
     202:	b8 14       	cp	r11, r8
     204:	b8 14       	cp	r11, r8
     206:	b8 14       	cp	r11, r8
     208:	b8 14       	cp	r11, r8
     20a:	b8 14       	cp	r11, r8
     20c:	b8 14       	cp	r11, r8
     20e:	b8 14       	cp	r11, r8
     210:	b8 14       	cp	r11, r8
     212:	b8 14       	cp	r11, r8
     214:	b8 14       	cp	r11, r8
     216:	b8 14       	cp	r11, r8
     218:	b8 14       	cp	r11, r8
     21a:	b8 14       	cp	r11, r8
     21c:	b8 14       	cp	r11, r8
     21e:	b8 14       	cp	r11, r8
     220:	b8 14       	cp	r11, r8
     222:	b8 14       	cp	r11, r8
     224:	b8 14       	cp	r11, r8
     226:	b8 14       	cp	r11, r8
     228:	b8 14       	cp	r11, r8
     22a:	b8 14       	cp	r11, r8
     22c:	b8 14       	cp	r11, r8
     22e:	b8 14       	cp	r11, r8
     230:	b8 14       	cp	r11, r8
     232:	b8 14       	cp	r11, r8
     234:	b8 14       	cp	r11, r8
     236:	b8 14       	cp	r11, r8
     238:	b8 14       	cp	r11, r8
     23a:	b8 14       	cp	r11, r8
     23c:	b8 14       	cp	r11, r8
     23e:	b8 14       	cp	r11, r8
     240:	b8 14       	cp	r11, r8
     242:	b8 14       	cp	r11, r8
     244:	b8 14       	cp	r11, r8
     246:	b8 14       	cp	r11, r8
     248:	b8 14       	cp	r11, r8
     24a:	b8 14       	cp	r11, r8
     24c:	b8 14       	cp	r11, r8
     24e:	b8 14       	cp	r11, r8
     250:	b8 14       	cp	r11, r8
     252:	b8 14       	cp	r11, r8
     254:	b8 14       	cp	r11, r8
     256:	b8 14       	cp	r11, r8
     258:	b7 14       	cp	r11, r7

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000295 <_ZZN10GsmManager11sendViaGprsEPKcE3__c>:
     295:	4d 6f 63 6b 69 6e 67 20 47 50 52 53 2d 53 65 6e     Mocking GPRS-Sen
     2a5:	64 00                                               d.

000002a7 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     2a7:	53 65 6e 64 69 6e 67 20 41 63 74 75 61 6c 20 64     Sending Actual d
     2b7:	61 74 61 20 76 69 61 20 47 50 52 53 00              ata via GPRS.

000002c4 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
     2c4:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002cf <_ZZN10GsmManager11sendViaGprsEPKcE3__c_4>:
	...

000002d0 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
	...

000002d1 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
     2d1:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

000002dc <_ZZN10GsmManager11sendViaGprsEPKcE3__c_5>:
     2dc:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002e7 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_6>:
     2e7:	47 50 52 53 20 53 74 61 74 75 73 3a 00              GPRS Status:.

000002f4 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     2f4:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000002fc <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     2fc:	20 7c 20 00                                          | .

00000300 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     300:	50 56 2d 56 3d 00                                   PV-V=.

00000306 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     306:	20 7c 20 00                                          | .

0000030a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     30a:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000313 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     313:	20 7c 20 00                                          | .

00000317 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     317:	54 65 6d 70 3d 00                                   Temp=.

0000031d <_ZZ5setupE3__c>:
     31d:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000329 <_ZZ5setupE3__c_0>:
     329:	42 6f 6f 74 20 43 6f 75 6e 74 00                    Boot Count.

00000334 <_ZZ8sendDatavE3__c>:
     334:	53 65 6e 64 69 6e 67 20 64 61 74 61 2e 2e 2e 00     Sending data....

00000344 <_ZZ4loopE3__c>:
     344:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000034e <_ZZN12RmMemManager16initialiseModuleEhE3__c>:
     34e:	49 6e 69 74 20 4d 6f 64 75 6c 65 00                 Init Module.

0000035a <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c>:
     35a:	42 61 73 69 63 20 45 45 50 52 4f 4d 20 54 65 73     Basic EEPROM Tes
     36a:	74 00                                               t.

0000036c <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_0>:
     36c:	46 41 49 4c 45 44 20 4c 4f 4e 47 00                 FAILED LONG.

00000378 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_1>:
     378:	46 41 49 4c 45 44 20 49 4e 54 00                    FAILED INT.

00000383 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_2>:
     383:	46 41 49 4c 45 44 20 53 48 4f 52 54 00              FAILED SHORT.

00000390 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_3>:
     390:	46 41 49 4c 45 44 20 43 48 41 52 00                 FAILED CHAR.

0000039c <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_4>:
     39c:	45 45 50 52 4f 4d 20 54 65 73 74 3a 20 4c 6f 6e     EEPROM Test: Lon
     3ac:	67 3d 00                                            g=.

000003af <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_5>:
     3af:	2c 20 49 6e 74 3d 00                                , Int=.

000003b6 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_6>:
     3b6:	2c 20 53 68 6f 72 74 3d 00                          , Short=.

000003bf <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_7>:
     3bf:	2c 20 43 68 61 72 3d 00                             , Char=.

000003c7 <_ZZN12RmMemManager23runExtendedShow100BytesEvE3__c>:
     3c7:	2a 2a 2a 20 46 41 49 4c 20 53 48 4f 57 20 31 30     *** FAIL SHOW 10
     3d7:	30 20 2a 2a 2a 00                                   0 ***.

000003dd <_ZZN12RmMemManager21runExtendedDumpOutputEvE3__c>:
     3dd:	2a 2a 2a 20 46 41 49 4c 20 50 52 49 4e 54 20 2a     *** FAIL PRINT *
     3ed:	2a 2a 00                                            **.

000003f0 <_ZZN12RmMemManager17appendSensorEntryEP10SensorDataE3__c>:
     3f0:	57 72 69 74 69 6e 67 20 54 6f 20 41 64 64 72 00     Writing To Addr.

00000400 <_ZZN12RmMemManager17appendSensorEntryEP10SensorDataE3__c_0>:
     400:	46 72 65 65 20 41 64 64 72 20 4e 6f 77 20 49 73     Free Addr Now Is
	...

00000411 <_ZZN13SensorManager8readDataEP10SensorDataE3__c>:
     411:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     421:	2e 2e 00                                            ...

00000424 <digital_pin_to_timer_PGM>:
     424:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     434:	00 00 00 00                                         ....

00000438 <digital_pin_to_bit_mask_PGM>:
     438:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     448:	04 08 10 20                                         ... 

0000044c <digital_pin_to_port_PGM>:
     44c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     45c:	03 03 03 03                                         ....

00000460 <port_to_input_PGM>:
     460:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000046a <port_to_output_PGM>:
     46a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000474 <port_to_mode_PGM>:
     474:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000047e <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     47e:	09 3c 2d 2d 2d 20 00                                .<--- .

00000485 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     485:	09 2d 2d 2d 3e 20 00                                .---> .

0000048c <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     48c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000493 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     493:	09 2d 2d 2d 3e 20 00                                .---> .

0000049a <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     49a:	09 3c 2d 2d 2d 20 00                                .<--- .

000004a1 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     4a1:	09 2d 2d 2d 3e 20 00                                .---> .

000004a8 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     4a8:	09 3c 2d 2d 2d 20 00                                .<--- .

000004af <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     4af:	09 2d 2d 2d 3e 20 00                                .---> .

000004b6 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     4b6:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000004be <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     4be:	53 50 41 43 45 00                                   SPACE.

000004c4 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     4c4:	09 3c 2d 2d 2d 20 00                                .<--- .

000004cb <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     4cb:	52 45 44 49 52 00                                   REDIR.

000004d1 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     4d1:	55 52 4c 00                                         URL.

000004d5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     4d5:	55 41 00                                            UA.

000004d8 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     4d8:	43 49 44 00                                         CID.

000004dc <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     4dc:	4c 65 6e 3a 20 00                                   Len: .

000004e2 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     4e2:	53 74 61 74 75 73 3a 20 00                          Status: .

000004eb <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     4eb:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000004f3 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     4f3:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

000004ff <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     4ff:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000050a <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     50a:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000516 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     516:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000523 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     523:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000530 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     530:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

0000053f <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     53f:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

00000548 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     548:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000555 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     555:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000562 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     562:	09 2d 2d 2d 3e 20 00                                .---> .

00000569 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     569:	22 2c 00                                            ",.

0000056c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     56c:	22 2c 22 00                                         ",".

00000570 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     570:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000057e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     57e:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000058c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     58c:	09 2d 2d 2d 3e 20 00                                .---> .

00000593 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     593:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

0000059f <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     59f:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000005ab <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     5ab:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000005b6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     5b6:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000005c3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     5c3:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000005ce <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     5ce:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005d6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     5d6:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000005df <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     5df:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000005ec <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     5ec:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     5fc:	44 22 2c 00                                         D",.

00000600 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     600:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     610:	45 52 22 2c 00                                      ER",.

00000615 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     615:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000061f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     61f:	09 2d 2d 2d 3e 20 00                                .---> .

00000626 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     626:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000630 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     630:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     640:	4e 22 2c 00                                         N",.

00000644 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     644:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     654:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000662 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     662:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000066d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     66d:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000678 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     678:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000680 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c_0>:
     680:	53 49 4e 46 00                                      SINF.

00000685 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c>:
     685:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

00000690 <_ZZN13Adafruit_FONA9GPSstatusEvE3__c_0>:
     690:	2b 43 47 4e 53 49 4e 46 3a 20 00                    +CGNSINF: .

0000069b <_ZZN13Adafruit_FONA9GPSstatusEvE3__c>:
     69b:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

000006a6 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     6a6:	3e 20 00                                            > .

000006a9 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     6a9:	3e 20 00                                            > .

000006ac <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     6ac:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000006b6 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     6b6:	41 54 2b 43 53 51 00                                AT+CSQ.

000006bd <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     6bd:	2b 43 53 51 3a 20 00                                +CSQ: .

000006c4 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     6c4:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000006cd <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     6cd:	2b 43 52 45 47 3a 20 00                             +CREG: .

000006d5 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     6d5:	41 54 2b 43 42 43 00                                AT+CBC.

000006dc <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     6dc:	2b 43 42 43 3a 20 00                                +CBC: .

000006e3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     6e3:	53 49 4d 38 30 30 48 00                             SIM800H.

000006eb <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     6eb:	09 3c 2d 2d 2d 20 00                                .<--- .

000006f2 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     6f2:	09 2d 2d 2d 3e 20 00                                .---> .

000006f9 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     6f9:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000709 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     709:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000719 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     719:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

00000724 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     724:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

0000072f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     72f:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000073a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     73a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000741 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     741:	09 2d 2d 2d 3e 20 00                                .---> .

00000748 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     748:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

00000752 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     752:	41 54 45 30 00                                      ATE0.

00000757 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     757:	41 54 45 30 00                                      ATE0.

0000075c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     75c:	41 54 00                                            AT.

0000075f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     75f:	41 54 00                                            AT.

00000762 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     762:	41 54 00                                            AT.

00000765 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     765:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     775:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     785:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     795:	2e 00                                               ..

00000797 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     797:	41 54 00                                            AT.

0000079a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     79a:	41 54 00                                            AT.

0000079d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     79d:	41 54 00                                            AT.

000007a0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     7a0:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     7b0:	61 62 6c 65 00                                      able.

000007b5 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     7b5:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     7c5:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000007d6 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     7d6:	4f 4b 00                                            OK.

000007d9 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     7d9:	46 4f 4e 41 00                                      FONA.

000007de <_ZZN13Adafruit_FONAC4EaE3__c>:
     7de:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000007e6 <__ctors_start>:
     7e6:	7f 09       	sbc	r23, r15
     7e8:	70 18       	sub	r7, r0
     7ea:	e8 1b       	sub	r30, r24

000007ec <__ctors_end>:
     7ec:	8c 09       	sbc	r24, r12

000007ee <__dtors_end>:
     7ee:	11 24       	eor	r1, r1
     7f0:	1f be       	out	0x3f, r1	; 63
     7f2:	cf ef       	ldi	r28, 0xFF	; 255
     7f4:	d8 e0       	ldi	r29, 0x08	; 8
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	cd bf       	out	0x3d, r28	; 61

000007fa <__do_copy_data>:
     7fa:	12 e0       	ldi	r17, 0x02	; 2
     7fc:	a0 e0       	ldi	r26, 0x00	; 0
     7fe:	b1 e0       	ldi	r27, 0x01	; 1
     800:	ee e1       	ldi	r30, 0x1E	; 30
     802:	f4 e6       	ldi	r31, 0x64	; 100
     804:	02 c0       	rjmp	.+4      	; 0x80a <__do_copy_data+0x10>
     806:	05 90       	lpm	r0, Z+
     808:	0d 92       	st	X+, r0
     80a:	a2 3a       	cpi	r26, 0xA2	; 162
     80c:	b1 07       	cpc	r27, r17
     80e:	d9 f7       	brne	.-10     	; 0x806 <__do_copy_data+0xc>

00000810 <__do_clear_bss>:
     810:	27 e0       	ldi	r18, 0x07	; 7
     812:	a2 ea       	ldi	r26, 0xA2	; 162
     814:	b2 e0       	ldi	r27, 0x02	; 2
     816:	01 c0       	rjmp	.+2      	; 0x81a <.do_clear_bss_start>

00000818 <.do_clear_bss_loop>:
     818:	1d 92       	st	X+, r1

0000081a <.do_clear_bss_start>:
     81a:	a9 3b       	cpi	r26, 0xB9	; 185
     81c:	b2 07       	cpc	r27, r18
     81e:	e1 f7       	brne	.-8      	; 0x818 <.do_clear_bss_loop>

00000820 <__do_global_ctors>:
     820:	13 e0       	ldi	r17, 0x03	; 3
     822:	c6 ef       	ldi	r28, 0xF6	; 246
     824:	d3 e0       	ldi	r29, 0x03	; 3
     826:	04 c0       	rjmp	.+8      	; 0x830 <__do_global_ctors+0x10>
     828:	21 97       	sbiw	r28, 0x01	; 1
     82a:	fe 01       	movw	r30, r28
     82c:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__tablejump2__>
     830:	c3 3f       	cpi	r28, 0xF3	; 243
     832:	d1 07       	cpc	r29, r17
     834:	c9 f7       	brne	.-14     	; 0x828 <__do_global_ctors+0x8>
     836:	0e 94 16 1c 	call	0x382c	; 0x382c <main>
     83a:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__do_global_dtors>

0000083e <__bad_interrupt>:
     83e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000842 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
//#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <_ZN10GpsManagerC1Eh+0x6>
     848:	1f 92       	push	r1
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <_ZN13Adafruit_FONAC1Ea>
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	9a 81       	ldd	r25, Y+2	; 0x02
     862:	86 5e       	subi	r24, 0xE6	; 230
     864:	9e 4f       	sbci	r25, 0xFE	; 254
     866:	2b 81       	ldd	r18, Y+3	; 0x03
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
{
}
     86c:	00 00       	nop
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <_ZN10GpsManagerD1Ev+0x6>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	00 00       	nop
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     89a:	00 d0       	rcall	.+0      	; 0x89c <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	7c 83       	std	Y+4, r23	; 0x04
     8a6:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	2b 81       	ldd	r18, Y+3	; 0x03
     8ae:	3c 81       	ldd	r19, Y+4	; 0x04
     8b0:	b9 01       	movw	r22, r18
     8b2:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_ZN13Adafruit_FONAaSERKS_>
}
     8b6:	00 00       	nop
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <_ZN10GpsManager9toggleGpsEb+0x6>
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <_ZN10GpsManager9toggleGpsEb+0x8>
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	9c 83       	std	Y+4, r25	; 0x04
     8d6:	8b 83       	std	Y+3, r24	; 0x03
     8d8:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	86 5e       	subi	r24, 0xE6	; 230
     8e0:	9e 4f       	sbci	r25, 0xFE	; 254
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	88 23       	and	r24, r24
     8e8:	11 f0       	breq	.+4      	; 0x8ee <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     8ee:	8f e9       	ldi	r24, 0x9F	; 159
     8f0:	96 e8       	ldi	r25, 0x86	; 134
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <_ZN10GpsManager9gpsStatusEv+0x6>
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     914:	00 00       	nop
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	00 d0       	rcall	.+0      	; 0x932 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x12>
     932:	00 d0       	rcall	.+0      	; 0x934 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x14>
     934:	00 d0       	rcall	.+0      	; 0x936 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x16>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
     93e:	7e 83       	std	Y+6, r23	; 0x06
     940:	6d 83       	std	Y+5, r22	; 0x05

	if (_isMock)
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	86 5e       	subi	r24, 0xE6	; 230
     948:	9e 4f       	sbci	r25, 0xFE	; 254
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x34>
     952:	48 c0       	rjmp	.+144    	; 0x9e4 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xc4>
	{
		info.altitude = 10;
     954:	2d 81       	ldd	r18, Y+5	; 0x05
     956:	3e 81       	ldd	r19, Y+6	; 0x06
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	a0 e2       	ldi	r26, 0x20	; 32
     95e:	b1 e4       	ldi	r27, 0x41	; 65
     960:	f9 01       	movw	r30, r18
     962:	82 8b       	std	Z+18, r24	; 0x12
     964:	93 8b       	std	Z+19, r25	; 0x13
     966:	a4 8b       	std	Z+20, r26	; 0x14
     968:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     96a:	8d 81       	ldd	r24, Y+5	; 0x05
     96c:	9e 81       	ldd	r25, Y+6	; 0x06
     96e:	46 96       	adiw	r24, 0x16	; 22
     970:	2f e0       	ldi	r18, 0x0F	; 15
     972:	e7 e1       	ldi	r30, 0x17	; 23
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	dc 01       	movw	r26, r24
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	2a 95       	dec	r18
     97e:	e1 f7       	brne	.-8      	; 0x978 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x58>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	2e e1       	ldi	r18, 0x1E	; 30
     986:	fc 01       	movw	r30, r24
     988:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	3e 81       	ldd	r19, Y+6	; 0x06
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e2       	ldi	r26, 0x20	; 32
     994:	b2 e4       	ldi	r27, 0x42	; 66
     996:	f9 01       	movw	r30, r18
     998:	86 87       	std	Z+14, r24	; 0x0e
     99a:	97 87       	std	Z+15, r25	; 0x0f
     99c:	a0 8b       	std	Z+16, r26	; 0x10
     99e:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     9a0:	2d 81       	ldd	r18, Y+5	; 0x05
     9a2:	3e 81       	ldd	r19, Y+6	; 0x06
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	a8 e4       	ldi	r26, 0x48	; 72
     9aa:	b2 e4       	ldi	r27, 0x42	; 66
     9ac:	f9 01       	movw	r30, r18
     9ae:	82 83       	std	Z+2, r24	; 0x02
     9b0:	93 83       	std	Z+3, r25	; 0x03
     9b2:	a4 83       	std	Z+4, r26	; 0x04
     9b4:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     9b6:	2d 81       	ldd	r18, Y+5	; 0x05
     9b8:	3e 81       	ldd	r19, Y+6	; 0x06
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e7       	ldi	r26, 0x70	; 112
     9c0:	b2 e4       	ldi	r27, 0x42	; 66
     9c2:	f9 01       	movw	r30, r18
     9c4:	86 83       	std	Z+6, r24	; 0x06
     9c6:	97 83       	std	Z+7, r25	; 0x07
     9c8:	a0 87       	std	Z+8, r26	; 0x08
     9ca:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     9cc:	2d 81       	ldd	r18, Y+5	; 0x05
     9ce:	3e 81       	ldd	r19, Y+6	; 0x06
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	ac e8       	ldi	r26, 0x8C	; 140
     9d6:	b2 e4       	ldi	r27, 0x42	; 66
     9d8:	f9 01       	movw	r30, r18
     9da:	82 87       	std	Z+10, r24	; 0x0a
     9dc:	93 87       	std	Z+11, r25	; 0x0b
     9de:	a4 87       	std	Z+12, r26	; 0x0c
     9e0:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     9e2:	42 c0       	rjmp	.+132    	; 0xa68 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x148>
	}

	int8_t gpsStatus = fona.GPSstatus();
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA9GPSstatusEv>
     9ec:	89 83       	std	Y+1, r24	; 0x01
	
	//Store the status regardless
	info.gpsStatus = gpsStatus;
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	9e 81       	ldd	r25, Y+6	; 0x06
     9f2:	29 81       	ldd	r18, Y+1	; 0x01
     9f4:	fc 01       	movw	r30, r24
     9f6:	21 83       	std	Z+1, r18	; 0x01
	
	// we need at least a 2D fix
	if (gpsStatus < 2) {
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	34 f4       	brge	.+12     	; 0xa0a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xea>
		info.errorCode = ERR_GPS_NO_FIX;
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
		return;
     a08:	2f c0       	rjmp	.+94     	; 0xa68 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x148>
	}

	//We know the date won't be >20 from it's format
	boolean success = fona.getGPS(&info.lat, &info.lon, 
     a0a:	8d 81       	ldd	r24, Y+5	; 0x05
     a0c:	9e 81       	ldd	r25, Y+6	; 0x06
     a0e:	8c 01       	movw	r16, r24
     a10:	0a 5e       	subi	r16, 0xEA	; 234
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	dc 01       	movw	r26, r24
     a1a:	52 96       	adiw	r26, 0x12	; 18
     a1c:	8d 81       	ldd	r24, Y+5	; 0x05
     a1e:	9e 81       	ldd	r25, Y+6	; 0x06
     a20:	fc 01       	movw	r30, r24
     a22:	3e 96       	adiw	r30, 0x0e	; 14
     a24:	8d 81       	ldd	r24, Y+5	; 0x05
     a26:	9e 81       	ldd	r25, Y+6	; 0x06
     a28:	9c 01       	movw	r18, r24
     a2a:	26 5f       	subi	r18, 0xF6	; 246
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	ac 01       	movw	r20, r24
     a34:	4a 5f       	subi	r20, 0xFA	; 250
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	bc 01       	movw	r22, r24
     a3e:	6e 5f       	subi	r22, 0xFE	; 254
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
		&info.speed_kph, &info.heading, &info.altitude, (char*)info.date);
     a46:	68 01       	movw	r12, r16
     a48:	7d 01       	movw	r14, r26
     a4a:	8f 01       	movw	r16, r30
     a4c:	0e 94 a4 22 	call	0x4548	; 0x4548 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>
     a50:	8a 83       	std	Y+2, r24	; 0x02

	// make sure we have a response
	if (!success){
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	89 27       	eor	r24, r25
     a58:	88 23       	and	r24, r24
     a5a:	31 f0       	breq	.+12     	; 0xa68 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x148>
		info.errorCode = ERR_GPS_BAD_FIELD;
     a5c:	8d 81       	ldd	r24, Y+5	; 0x05
     a5e:	9e 81       	ldd	r25, Y+6	; 0x06
     a60:	2c e0       	ldi	r18, 0x0C	; 12
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
		return;
     a66:	00 00       	nop
	}
}
     a68:	26 96       	adiw	r28, 0x06	; 6
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
//#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <_ZN10GsmManagerC1Eh+0x6>
     a8c:	1f 92       	push	r1
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	2b 81       	ldd	r18, Y+3	; 0x03
     a9e:	fc 01       	movw	r30, r24
     aa0:	24 83       	std	Z+4, r18	; 0x04
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	05 96       	adiw	r24, 0x05	; 5
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <_ZN13Adafruit_FONAC1Ea>
{
}
     aae:	00 00       	nop
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <_ZN10GsmManagerD1Ev+0x6>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	00 00       	nop
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     adc:	00 d0       	rcall	.+0      	; 0xade <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	7c 83       	std	Y+4, r23	; 0x04
     ae8:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	05 96       	adiw	r24, 0x05	; 5
     af0:	2b 81       	ldd	r18, Y+3	; 0x03
     af2:	3c 81       	ldd	r19, Y+4	; 0x04
     af4:	b9 01       	movw	r22, r18
     af6:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_ZN13Adafruit_FONAaSERKS_>
}
     afa:	00 00       	nop
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <_ZN10GsmManager5resetEv+0x6>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	fc 01       	movw	r30, r24
     b1e:	11 82       	std	Z+1, r1	; 0x01
     b20:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	fc 01       	movw	r30, r24
     b28:	13 82       	std	Z+3, r1	; 0x03
     b2a:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     b2c:	00 00       	nop
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	00 d0       	rcall	.+0      	; 0xb42 <_ZN10GsmManager5beginEv+0xa>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	fc 01       	movw	r30, r24
     b50:	94 81       	ldd	r25, Z+4	; 0x04
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	99 23       	and	r25, r25
     b56:	09 f4       	brne	.+2      	; 0xb5a <_ZN10GsmManager5beginEv+0x22>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	88 23       	and	r24, r24
     b5c:	11 f0       	breq	.+4      	; 0xb62 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	2d c0       	rjmp	.+90     	; 0xbbc <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     b62:	8f e1       	ldi	r24, 0x1F	; 31
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 25 1c 	call	0x384a	; 0x384a <_Znwj>
     b6a:	8c 01       	movw	r16, r24
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	42 e0       	ldi	r20, 0x02	; 2
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 1c 2c 	call	0x5838	; 0x5838 <_ZN14SoftwareSerialC1Ehhb>
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	81 5e       	subi	r24, 0xE1	; 225
     b7e:	9e 4f       	sbci	r25, 0xFE	; 254
     b80:	fc 01       	movw	r30, r24
     b82:	11 83       	std	Z+1, r17	; 0x01
     b84:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	81 5e       	subi	r24, 0xE1	; 225
     b8c:	9e 4f       	sbci	r25, 0xFE	; 254
     b8e:	fc 01       	movw	r30, r24
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	40 ec       	ldi	r20, 0xC0	; 192
     b96:	52 e1       	ldi	r21, 0x12	; 18
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	81 5e       	subi	r24, 0xE1	; 225
     ba6:	9e 4f       	sbci	r25, 0xFE	; 254
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	9c 01       	movw	r18, r24
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	05 96       	adiw	r24, 0x05	; 5
     bb6:	b9 01       	movw	r22, r18
     bb8:	0e 94 49 24 	call	0x4892	; 0x4892 <_ZN13Adafruit_FONA5beginER6Stream>
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <_ZN10GsmManager14getBattPercentEPj+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <_ZN10GsmManager14getBattPercentEPj+0x8>
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	7c 83       	std	Y+4, r23	; 0x04
     bdc:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	fc 01       	movw	r30, r24
     be4:	94 81       	ldd	r25, Z+4	; 0x04
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	99 23       	and	r25, r25
     bea:	09 f4       	brne	.+2      	; 0xbee <_ZN10GsmManager14getBattPercentEPj+0x24>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	88 23       	and	r24, r24
     bf0:	49 f0       	breq	.+18     	; 0xc04 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	23 e6       	ldi	r18, 0x63	; 99
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	fc 01       	movw	r30, r24
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	20 83       	st	Z, r18
		return true;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	05 96       	adiw	r24, 0x05	; 5
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	b9 01       	movw	r22, r18
     c10:	0e 94 23 2a 	call	0x5446	; 0x5446 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	69 97       	sbiw	r28, 0x19	; 25
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	9f 8b       	std	Y+23, r25	; 0x17
     c38:	8e 8b       	std	Y+22, r24	; 0x16
     c3a:	79 8f       	std	Y+25, r23	; 0x19
     c3c:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     c3e:	8e 89       	ldd	r24, Y+22	; 0x16
     c40:	9f 89       	ldd	r25, Y+23	; 0x17
     c42:	fc 01       	movw	r30, r24
     c44:	94 81       	ldd	r25, Z+4	; 0x04
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	99 23       	and	r25, r25
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	88 23       	and	r24, r24
     c50:	11 f0       	breq	.+4      	; 0xc56 <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	26 c0       	rjmp	.+76     	; 0xca2 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     c56:	2e e0       	ldi	r18, 0x0E	; 14
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	dc 01       	movw	r26, r24
     c62:	01 90       	ld	r0, Z+
     c64:	0d 92       	st	X+, r0
     c66:	2a 95       	dec	r18
     c68:	e1 f7       	brne	.-8      	; 0xc62 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     c6a:	27 e0       	ldi	r18, 0x07	; 7
     c6c:	ce 01       	movw	r24, r28
     c6e:	0f 96       	adiw	r24, 0x0f	; 15
     c70:	fc 01       	movw	r30, r24
     c72:	32 2f       	mov	r19, r18
     c74:	11 92       	st	Z+, r1
     c76:	3a 95       	dec	r19
     c78:	e9 f7       	brne	.-6      	; 0xc74 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     c7a:	8e 89       	ldd	r24, Y+22	; 0x16
     c7c:	9f 89       	ldd	r25, Y+23	; 0x17
     c7e:	05 96       	adiw	r24, 0x05	; 5
     c80:	28 8d       	ldd	r18, Y+24	; 0x18
     c82:	39 8d       	ldd	r19, Y+25	; 0x19
     c84:	a9 01       	movw	r20, r18
     c86:	9e 01       	movw	r18, r28
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	b9 01       	movw	r22, r18
     c8e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     c92:	98 2f       	mov	r25, r24
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	89 27       	eor	r24, r25
     c98:	88 23       	and	r24, r24
     c9a:	11 f0       	breq	.+4      	; 0xca0 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	00 d0       	rcall	.+0      	; 0xcba <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	7c 83       	std	Y+4, r23	; 0x04
     cc6:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus();
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN10GsmManager16getNetworkStatusEv>
     cd0:	28 2f       	mov	r18, r24
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	fc 01       	movw	r30, r24
     cd8:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN10GsmManager7getRSSIEv>
     ce2:	28 2f       	mov	r18, r24
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	fc 01       	movw	r30, r24
     cea:	21 83       	std	Z+1, r18	; 0x01
}
     cec:	00 00       	nop
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	00 d0       	rcall	.+0      	; 0xd02 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	fc 01       	movw	r30, r24
     d10:	94 81       	ldd	r25, Z+4	; 0x04
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	99 23       	and	r25, r25
     d16:	09 f4       	brne	.+2      	; 0xd1a <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	88 23       	and	r24, r24
     d1c:	11 f0       	breq	.+4      	; 0xd22 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	05 96       	adiw	r24, 0x05	; 5
     d28:	0e 94 32 2a 	call	0x5464	; 0x5464 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <_ZN10GsmManager7getRSSIEv+0x6>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	fc 01       	movw	r30, r24
     d4a:	94 81       	ldd	r25, Z+4	; 0x04
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	99 23       	and	r25, r25
     d50:	09 f4       	brne	.+2      	; 0xd54 <_ZN10GsmManager7getRSSIEv+0x1e>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	88 23       	and	r24, r24
     d56:	11 f0       	breq	.+4      	; 0xd5c <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     d58:	85 e1       	ldi	r24, 0x15	; 21
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	05 96       	adiw	r24, 0x05	; 5
     d62:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <_ZN13Adafruit_FONA7getRSSIEv>
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	00 d0       	rcall	.+0      	; 0xd76 <_ZN10GsmManager10enableGPRSEb+0x6>
     d76:	1f 92       	push	r1
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	05 96       	adiw	r24, 0x05	; 5
     d88:	6b 81       	ldd	r22, Y+3	; 0x03
     d8a:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <_ZN13Adafruit_FONA10enableGPRSEb>
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	2e 97       	sbiw	r28, 0x0e	; 14
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	9c 87       	std	Y+12, r25	; 0x0c
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	7e 87       	std	Y+14, r23	; 0x0e
     dc0:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc6:	fc 01       	movw	r30, r24
     dc8:	94 81       	ldd	r25, Z+4	; 0x04
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	99 23       	and	r25, r25
     dce:	09 f4       	brne	.+2      	; 0xdd2 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	b9 f0       	breq	.+46     	; 0xe04 <_ZN10GsmManager11sendViaGprsEPKc+0x6a>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
     dd6:	85 e9       	ldi	r24, 0x95	; 149
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	bc 01       	movw	r22, r24
     ddc:	89 ec       	ldi	r24, 0xC9	; 201
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
     de4:	69 e4       	ldi	r22, 0x49	; 73
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	89 ec       	ldi	r24, 0xC9	; 201
     dea:	96 e0       	ldi	r25, 0x06	; 6
     dec:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	bc 01       	movw	r22, r24
     df6:	89 ec       	ldi	r24, 0xC9	; 201
     df8:	96 e0       	ldi	r25, 0x06	; 6
     dfa:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	c3 c0       	rjmp	.+390    	; 0xf8a <_ZN10GsmManager11sendViaGprsEPKc+0x1f0>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);
     e04:	87 ea       	ldi	r24, 0xA7	; 167
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	bc 01       	movw	r22, r24
     e0a:	89 ec       	ldi	r24, 0xC9	; 201
     e0c:	96 e0       	ldi	r25, 0x06	; 6
     e0e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
     e12:	69 e4       	ldi	r22, 0x49	; 73
     e14:	71 e0       	ldi	r23, 0x01	; 1
     e16:	89 ec       	ldi	r24, 0xC9	; 201
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	bc 01       	movw	r22, r24
     e24:	89 ec       	ldi	r24, 0xC9	; 201
     e26:	96 e0       	ldi	r25, 0x06	; 6
     e28:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>

	uint16_t ret = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/r.php"; //TODO: check should not require https!
     e34:	8b e4       	ldi	r24, 0x4B	; 75
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	9d 83       	std	Y+5, r25	; 0x05
     e3a:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <strlen>
     e44:	8c 01       	movw	r16, r24
     e46:	44 ec       	ldi	r20, 0xC4	; 196
     e48:	52 e0       	ldi	r21, 0x02	; 2
     e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4e:	05 96       	adiw	r24, 0x05	; 5
     e50:	de 01       	movw	r26, r28
     e52:	19 96       	adiw	r26, 0x09	; 9
     e54:	fe 01       	movw	r30, r28
     e56:	37 96       	adiw	r30, 0x07	; 7
     e58:	2d 85       	ldd	r18, Y+13	; 0x0d
     e5a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e5c:	6c 81       	ldd	r22, Y+4	; 0x04
     e5e:	7d 81       	ldd	r23, Y+5	; 0x05
     e60:	6d 01       	movw	r12, r26
     e62:	7f 01       	movw	r14, r30
     e64:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     e68:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     e6a:	9b 81       	ldd	r25, Y+3	; 0x03
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	89 27       	eor	r24, r25
     e70:	88 23       	and	r24, r24
     e72:	11 f1       	breq	.+68     	; 0xeb8 <_ZN10GsmManager11sendViaGprsEPKc+0x11e>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     e74:	2f ec       	ldi	r18, 0xCF	; 207
     e76:	32 e0       	ldi	r19, 0x02	; 2
     e78:	40 ed       	ldi	r20, 0xD0	; 208
     e7a:	52 e0       	ldi	r21, 0x02	; 2
     e7c:	61 ed       	ldi	r22, 0xD1	; 209
     e7e:	72 e0       	ldi	r23, 0x02	; 2
     e80:	8b 85       	ldd	r24, Y+11	; 0x0b
     e82:	9c 85       	ldd	r25, Y+12	; 0x0c
     e84:	05 96       	adiw	r24, 0x05	; 5
     e86:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <strlen>
     e92:	8c 01       	movw	r16, r24
     e94:	4c ed       	ldi	r20, 0xDC	; 220
     e96:	52 e0       	ldi	r21, 0x02	; 2
     e98:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e9c:	05 96       	adiw	r24, 0x05	; 5
     e9e:	de 01       	movw	r26, r28
     ea0:	19 96       	adiw	r26, 0x09	; 9
     ea2:	fe 01       	movw	r30, r28
     ea4:	37 96       	adiw	r30, 0x07	; 7
     ea6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ea8:	3e 85       	ldd	r19, Y+14	; 0x0e
     eaa:	6c 81       	ldd	r22, Y+4	; 0x04
     eac:	7d 81       	ldd	r23, Y+5	; 0x05
     eae:	6d 01       	movw	r12, r26
     eb0:	7f 01       	movw	r14, r30
     eb2:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     eb6:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 27       	eor	r24, r25
     ebe:	88 23       	and	r24, r24
     ec0:	29 f0       	breq	.+10     	; 0xecc <_ZN10GsmManager11sendViaGprsEPKc+0x132>
	{
		ret = 999;
     ec2:	87 ee       	ldi	r24, 0xE7	; 231
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	5d c0       	rjmp	.+186    	; 0xf86 <_ZN10GsmManager11sendViaGprsEPKc+0x1ec>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
     ecc:	87 ee       	ldi	r24, 0xE7	; 231
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	bc 01       	movw	r22, r24
     ed2:	89 ec       	ldi	r24, 0xC9	; 201
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
     eda:	69 e4       	ldi	r22, 0x49	; 73
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	89 ec       	ldi	r24, 0xC9	; 201
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	4a e0       	ldi	r20, 0x0A	; 10
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	bc 01       	movw	r22, r24
     ef0:	89 ec       	ldi	r24, 0xC9	; 201
     ef2:	96 e0       	ldi	r25, 0x06	; 6
     ef4:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN5Print7printlnEji>
			                                                      
		while (length > 0) {
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	18 16       	cp	r1, r24
     efe:	19 06       	cpc	r1, r25
     f00:	8c f5       	brge	.+98     	; 0xf64 <_ZN10GsmManager11sendViaGprsEPKc+0x1ca>
			while (fona.available()) {
     f02:	8b 85       	ldd	r24, Y+11	; 0x0b
     f04:	9c 85       	ldd	r25, Y+12	; 0x0c
     f06:	05 96       	adiw	r24, 0x05	; 5
     f08:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <_ZN13Adafruit_FONA9availableEv>
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	89 2b       	or	r24, r25
     f10:	09 f4       	brne	.+2      	; 0xf14 <_ZN10GsmManager11sendViaGprsEPKc+0x17a>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	22 23       	and	r18, r18
     f16:	81 f3       	breq	.-32     	; 0xef8 <_ZN10GsmManager11sendViaGprsEPKc+0x15e>
				char c = fona.read();
     f18:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f1c:	05 96       	adiw	r24, 0x05	; 5
     f1e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA4readEv>
     f22:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     f24:	80 ec       	ldi	r24, 0xC0	; 192
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	80 81       	ld	r24, Z
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	80 72       	andi	r24, 0x20	; 32
     f32:	99 27       	eor	r25, r25
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	89 2b       	or	r24, r25
     f38:	09 f0       	breq	.+2      	; 0xf3c <_ZN10GsmManager11sendViaGprsEPKc+0x1a2>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	22 23       	and	r18, r18
     f3e:	09 f0       	breq	.+2      	; 0xf42 <_ZN10GsmManager11sendViaGprsEPKc+0x1a8>
     f40:	f1 cf       	rjmp	.-30     	; 0xf24 <_ZN10GsmManager11sendViaGprsEPKc+0x18a>
				UDR0 = c;
     f42:	86 ec       	ldi	r24, 0xC6	; 198
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
					                                                      
				length--;
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f0       	breq	.+2      	; 0xf60 <_ZN10GsmManager11sendViaGprsEPKc+0x1c6>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     f5e:	d1 cf       	rjmp	.-94     	; 0xf02 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     f60:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     f62:	ca cf       	rjmp	.-108    	; 0xef8 <_ZN10GsmManager11sendViaGprsEPKc+0x15e>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     f64:	8b 85       	ldd	r24, Y+11	; 0x0b
     f66:	9c 85       	ldd	r25, Y+12	; 0x0c
     f68:	05 96       	adiw	r24, 0x05	; 5
     f6a:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     f6e:	8f 81       	ldd	r24, Y+7	; 0x07
     f70:	98 85       	ldd	r25, Y+8	; 0x08
     f72:	88 3c       	cpi	r24, 0xC8	; 200
     f74:	91 05       	cpc	r25, r1
     f76:	19 f0       	breq	.+6      	; 0xf7e <_ZN10GsmManager11sendViaGprsEPKc+0x1e4>
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <_ZN10GsmManager11sendViaGprsEPKc+0x1e8>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f8a:	2e 96       	adiw	r28, 0x0e	; 14
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <_ZN7Helpers15printSensorDataEP10SensorData>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"

void Helpers::printSensorData(SensorData* sd) {
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <_ZN7Helpers15printSensorDataEP10SensorData+0x6>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01

	RM_LOG(F("Batt-V="));
     fb6:	84 ef       	ldi	r24, 0xF4	; 244
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	bc 01       	movw	r22, r24
     fbc:	89 ec       	ldi	r24, 0xC9	; 201
     fbe:	96 e0       	ldi	r25, 0x06	; 6
     fc0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	fc 01       	movw	r30, r24
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	92 81       	ldd	r25, Z+2	; 0x02
     fce:	4a e0       	ldi	r20, 0x0A	; 10
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	bc 01       	movw	r22, r24
     fd4:	89 ec       	ldi	r24, 0xC9	; 201
     fd6:	96 e0       	ldi	r25, 0x06	; 6
     fd8:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     fdc:	8c ef       	ldi	r24, 0xFC	; 252
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	bc 01       	movw	r22, r24
     fe2:	89 ec       	ldi	r24, 0xC9	; 201
     fe4:	96 e0       	ldi	r25, 0x06	; 6
     fe6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	bc 01       	movw	r22, r24
     ff0:	89 ec       	ldi	r24, 0xC9	; 201
     ff2:	96 e0       	ldi	r25, 0x06	; 6
     ff4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	fc 01       	movw	r30, r24
     ffe:	85 81       	ldd	r24, Z+5	; 0x05
    1000:	96 81       	ldd	r25, Z+6	; 0x06
    1002:	4a e0       	ldi	r20, 0x0A	; 10
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	bc 01       	movw	r22, r24
    1008:	89 ec       	ldi	r24, 0xC9	; 201
    100a:	96 e0       	ldi	r25, 0x06	; 6
    100c:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	bc 01       	movw	r22, r24
    1016:	89 ec       	ldi	r24, 0xC9	; 201
    1018:	96 e0       	ldi	r25, 0x06	; 6
    101a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	bc 01       	movw	r22, r24
    1024:	89 ec       	ldi	r24, 0xC9	; 201
    1026:	96 e0       	ldi	r25, 0x06	; 6
    1028:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	fc 01       	movw	r30, r24
    1032:	83 81       	ldd	r24, Z+3	; 0x03
    1034:	94 81       	ldd	r25, Z+4	; 0x04
    1036:	4a e0       	ldi	r20, 0x0A	; 10
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	bc 01       	movw	r22, r24
    103c:	89 ec       	ldi	r24, 0xC9	; 201
    103e:	96 e0       	ldi	r25, 0x06	; 6
    1040:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1044:	83 e1       	ldi	r24, 0x13	; 19
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	bc 01       	movw	r22, r24
    104a:	89 ec       	ldi	r24, 0xC9	; 201
    104c:	96 e0       	ldi	r25, 0x06	; 6
    104e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    1052:	87 e1       	ldi	r24, 0x17	; 23
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	bc 01       	movw	r22, r24
    1058:	89 ec       	ldi	r24, 0xC9	; 201
    105a:	96 e0       	ldi	r25, 0x06	; 6
    105c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->temperature);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	fc 01       	movw	r30, r24
    1066:	87 81       	ldd	r24, Z+7	; 0x07
    1068:	90 85       	ldd	r25, Z+8	; 0x08
    106a:	4a e0       	ldi	r20, 0x0A	; 10
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	bc 01       	movw	r22, r24
    1070:	89 ec       	ldi	r24, 0xC9	; 201
    1072:	96 e0       	ldi	r25, 0x06	; 6
    1074:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN5Print7printlnEji>
}
    1078:	00 00       	nop
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <setup>:
void printData();
void initSubsystems();

uint8_t _behaviour = SYS_BEHAVIOUR::DoNothing;

void setup() {
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);


	//Must immediately run as this pin in LOW switches off the system
	pinMode(PIN_SHUTDOWN, OUTPUT);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <pinMode>
	digitalWrite(PIN_SHUTDOWN, HIGH);
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>



	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
    109c:	68 eb       	ldi	r22, 0xB8	; 184
    109e:	7b e0       	ldi	r23, 0x0B	; 11
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
	
	
	
	//Turn off redundant Arduino board notification LED controlled by pin 13
	pinMode(13, OUTPUT);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	8d e0       	ldi	r24, 0x0D	; 13
    10ac:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <pinMode>
	
	#ifdef OUTPUT_DEBUG
		Serial.begin(9600); //Writes to Serial output
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	55 e2       	ldi	r21, 0x25	; 37
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	89 ec       	ldi	r24, 0xC9	; 201
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN14HardwareSerial5beginEm>
	#endif
	
	RM_LOGLN(F("Starting..."));
    10c0:	8d e1       	ldi	r24, 0x1D	; 29
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	bc 01       	movw	r22, r24
    10c6:	89 ec       	ldi	r24, 0xC9	; 201
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	initSubsystems();
    10ce:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z14initSubsystemsv>
	
	if (IS_BASIC_MEM_TEST) {
		
		mem.verifyBasicEepRom();
    10d2:	8c eb       	ldi	r24, 0xBC	; 188
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN12RmMemManager17verifyBasicEepRomEv>
		
		switchOffSystem();
    10da:	0e 94 96 08 	call	0x112c	; 0x112c <_Z15switchOffSystemv>
		return;
    10de:	00 00       	nop
	//Send to HQ every 20 hours
	if (currBootCount > 0 && currBootCount%4 == 0) { //TODO: Overflow?
		
		_behaviour |= SYS_BEHAVIOUR::SendData;
	}
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <_Z14initSubsystemsv>:

void initSubsystems() {
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62

	gps.setFona(fona);
    10ee:	62 ea       	ldi	r22, 0xA2	; 162
    10f0:	72 e0       	ldi	r23, 0x02	; 2
    10f2:	8d eb       	ldi	r24, 0xBD	; 189
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
    10fa:	62 ea       	ldi	r22, 0xA2	; 162
    10fc:	72 e0       	ldi	r23, 0x02	; 2
    10fe:	88 ed       	ldi	r24, 0xD8	; 216
    1100:	94 e0       	ldi	r25, 0x04	; 4
    1102:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (!gsm.begin()) {
    1106:	88 ed       	ldi	r24, 0xD8	; 216
    1108:	94 e0       	ldi	r25, 0x04	; 4
    110a:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN10GsmManager5beginEv>
    110e:	98 2f       	mov	r25, r24
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	89 27       	eor	r24, r25
    1114:	88 23       	and	r24, r24
    1116:	31 f4       	brne	.+12     	; 0x1124 <_Z14initSubsystemsv+0x3e>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)) {
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	8d eb       	ldi	r24, 0xBD	; 189
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN10GpsManager9toggleGpsEb>
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <_Z14initSubsystemsv+0x40>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
    1124:	00 00       	nop
	if (!gps.toggleGps(true)) {
	
		//TODO: store in ROM
		return;
	}
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <_Z15switchOffSystemv>:


void switchOffSystem() {
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN("Switching off...");
    1134:	6a e7       	ldi	r22, 0x7A	; 122
    1136:	71 e0       	ldi	r23, 0x01	; 1
    1138:	89 ec       	ldi	r24, 0xC9	; 201
    113a:	96 e0       	ldi	r25, 0x06	; 6
    113c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
	
	digitalWrite(PIN_SHUTDOWN, LOW);
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	85 e0       	ldi	r24, 0x05	; 5
    1144:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
	
	delay(3000); //To allow serial to purge the shutdown message
    1148:	68 eb       	ldi	r22, 0xB8	; 184
    114a:	7b e0       	ldi	r23, 0x0B	; 11
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
}
    1154:	00 00       	nop
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite) {
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	1f 92       	push	r1
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
	//
	////gsm.sendViaSms(sm.c_str()); //TO: local number !
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
    1168:	00 00       	nop
    116a:	0f 90       	pop	r0
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <_Z12takeReadingsv>:

boolean takeReadings() {
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	2a 97       	sbiw	r28, 0x0a	; 10
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
	
	SensorData sd;
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN10SensorDataC1Ev>
	sensorMgr.readData(&sd);
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	bc 01       	movw	r22, r24
    1194:	89 ef       	ldi	r24, 0xF9	; 249
    1196:	95 e0       	ldi	r25, 0x05	; 5
    1198:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
    119c:	81 e0       	ldi	r24, 0x01	; 1
}
    119e:	2a 96       	adiw	r28, 0x0a	; 10
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <_Z8sendDatav>:

boolean sendData() {
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN(F("Sending data..."));
    11b8:	84 e3       	ldi	r24, 0x34	; 52
    11ba:	93 e0       	ldi	r25, 0x03	; 3
    11bc:	bc 01       	movw	r22, r24
    11be:	89 ec       	ldi	r24, 0xC9	; 201
    11c0:	96 e0       	ldi	r25, 0x06	; 6
    11c2:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	return false;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62

	delay(1000);
    11d6:	68 ee       	ldi	r22, 0xE8	; 232
    11d8:	73 e0       	ldi	r23, 0x03	; 3
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
	++_timerCounter;
    11e2:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <_timerCounter>
    11e6:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <_timerCounter+0x1>
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	90 93 fc 05 	sts	0x05FC, r25	; 0x8005fc <_timerCounter+0x1>
    11f0:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <_timerCounter>

	RM_LOG2(F("Behaviour"), _behaviour);
    11f4:	84 e4       	ldi	r24, 0x44	; 68
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	bc 01       	movw	r22, r24
    11fa:	89 ec       	ldi	r24, 0xC9	; 201
    11fc:	96 e0       	ldi	r25, 0x06	; 6
    11fe:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    1202:	6b e8       	ldi	r22, 0x8B	; 139
    1204:	71 e0       	ldi	r23, 0x01	; 1
    1206:	89 ec       	ldi	r24, 0xC9	; 201
    1208:	96 e0       	ldi	r25, 0x06	; 6
    120a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    120e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_behaviour>
    1212:	4a e0       	ldi	r20, 0x0A	; 10
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	68 2f       	mov	r22, r24
    1218:	89 ec       	ldi	r24, 0xC9	; 201
    121a:	96 e0       	ldi	r25, 0x06	; 6
    121c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1220:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_behaviour>
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	99 27       	eor	r25, r25
    122c:	89 2b       	or	r24, r25
    122e:	49 f0       	breq	.+18     	; 0x1242 <loop+0x74>
		
		if (takeReadings())
    1230:	0e 94 b9 08 	call	0x1172	; 0x1172 <_Z12takeReadingsv>
    1234:	88 23       	and	r24, r24
    1236:	29 f0       	breq	.+10     	; 0x1242 <loop+0x74>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    1238:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_behaviour>
    123c:	8e 7f       	andi	r24, 0xFE	; 254
    123e:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1242:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_behaviour>
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	82 70       	andi	r24, 0x02	; 2
    124c:	99 27       	eor	r25, r25
    124e:	89 2b       	or	r24, r25
    1250:	49 f0       	breq	.+18     	; 0x1264 <loop+0x96>
		
		if (sendData())
    1252:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_Z8sendDatav>
    1256:	88 23       	and	r24, r24
    1258:	29 f0       	breq	.+10     	; 0x1264 <loop+0x96>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    125a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_behaviour>
    125e:	8d 7f       	andi	r24, 0xFD	; 253
    1260:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1264:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_behaviour>
    1268:	88 23       	and	r24, r24
    126a:	11 f4       	brne	.+4      	; 0x1270 <loop+0xa2>
		
		switchOffSystem();
    126c:	0e 94 96 08 	call	0x112c	; 0x112c <_Z15switchOffSystemv>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    1270:	00 00       	nop
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <_Z41__static_initialization_and_destruction_0ii>:
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	00 d0       	rcall	.+0      	; 0x127e <_Z41__static_initialization_and_destruction_0ii+0x6>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	7c 83       	std	Y+4, r23	; 0x04
    128a:	6b 83       	std	Y+3, r22	; 0x03
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	e9 f4       	brne	.+58     	; 0x12ce <_Z41__static_initialization_and_destruction_0ii+0x56>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	c9 f4       	brne	.+50     	; 0x12ce <_Z41__static_initialization_and_destruction_0ii+0x56>
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    129c:	64 e0       	ldi	r22, 0x04	; 4
    129e:	82 ea       	ldi	r24, 0xA2	; 162
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <_ZN13Adafruit_FONAC1Ea>
RmMemManager mem = RmMemManager(false);
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	8c eb       	ldi	r24, 0xBC	; 188
    12aa:	93 e0       	ldi	r25, 0x03	; 3
    12ac:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN12RmMemManagerC1Eb>
GpsManager gps = GpsManager(IS_GPS_MOCK);
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	8d eb       	ldi	r24, 0xBD	; 189
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	0e 94 21 04 	call	0x842	; 0x842 <_ZN10GpsManagerC1Eh>
GsmManager gsm = GsmManager(IS_GSM_MOCK);
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	88 ed       	ldi	r24, 0xD8	; 216
    12be:	94 e0       	ldi	r25, 0x04	; 4
    12c0:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN10GsmManagerC1Eh>
SensorManager sensorMgr = SensorManager(true);
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	89 ef       	ldi	r24, 0xF9	; 249
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN13SensorManagerC1Eb>
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	89 2b       	or	r24, r25
    12d4:	61 f4       	brne	.+24     	; 0x12ee <_Z41__static_initialization_and_destruction_0ii+0x76>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	41 f4       	brne	.+16     	; 0x12ee <_Z41__static_initialization_and_destruction_0ii+0x76>

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem = RmMemManager(false);
GpsManager gps = GpsManager(IS_GPS_MOCK);
GsmManager gsm = GsmManager(IS_GSM_MOCK);
    12de:	88 ed       	ldi	r24, 0xD8	; 216
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN10GsmManagerD1Ev>


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem = RmMemManager(false);
GpsManager gps = GpsManager(IS_GPS_MOCK);
    12e6:	8d eb       	ldi	r24, 0xBD	; 189
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN10GpsManagerD1Ev>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    12ee:	00 00       	nop
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <_GLOBAL__sub_I_fona>:
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	6f ef       	ldi	r22, 0xFF	; 255
    1308:	7f ef       	ldi	r23, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 3c 09 	call	0x1278	; 0x1278 <_Z41__static_initialization_and_destruction_0ii>
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <_GLOBAL__sub_D_fona>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	6f ef       	ldi	r22, 0xFF	; 255
    1322:	7f ef       	ldi	r23, 0xFF	; 255
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 3c 09 	call	0x1278	; 0x1278 <_Z41__static_initialization_and_destruction_0ii>
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <_ZN12RmMemManagerC1Eb>:
boolean _ledTopPinGreen=false;
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock) {
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	00 d0       	rcall	.+0      	; 0x1338 <_ZN12RmMemManagerC1Eb+0x6>
    1338:	1f 92       	push	r1
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	fc 01       	movw	r30, r24
    134c:	20 83       	st	Z, r18
	
	if (!_isMock)
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	fc 01       	movw	r30, r24
    1354:	90 81       	ld	r25, Z
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 27       	eor	r24, r25
    135a:	88 23       	and	r24, r24
    135c:	21 f0       	breq	.+8      	; 0x1366 <_ZN12RmMemManagerC1Eb+0x34>
		Wire.begin();
    135e:	8b eb       	ldi	r24, 0xBB	; 187
    1360:	96 e0       	ldi	r25, 0x06	; 6
    1362:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN7TwoWire5beginEv>
}
    1366:	00 00       	nop
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <_Z13internalWritejPhh>:

void internalWrite(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	28 97       	sbiw	r28, 0x08	; 8
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	9d 83       	std	Y+5, r25	; 0x05
    138a:	8c 83       	std	Y+4, r24	; 0x04
    138c:	7f 83       	std	Y+7, r23	; 0x07
    138e:	6e 83       	std	Y+6, r22	; 0x06
    1390:	48 87       	std	Y+8, r20	; 0x08
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1392:	19 82       	std	Y+1, r1	; 0x01
    1394:	99 81       	ldd	r25, Y+1	; 0x01
    1396:	88 85       	ldd	r24, Y+8	; 0x08
    1398:	98 17       	cp	r25, r24
    139a:	e0 f5       	brcc	.+120    	; 0x1414 <_Z13internalWritejPhh+0xa0>
	
		uint16_t thisByteAddr = address+i;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	82 0f       	add	r24, r18
    13a8:	93 1f       	adc	r25, r19
    13aa:	9b 83       	std	Y+3, r25	; 0x03
    13ac:	8a 83       	std	Y+2, r24	; 0x02
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		RM_LOGMEMLN(*(data+i));
	
		Wire.beginTransmission(0x50);
    13ae:	60 e5       	ldi	r22, 0x50	; 80
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	8b eb       	ldi	r24, 0xBB	; 187
    13b4:	96 e0       	ldi	r25, 0x06	; 6
    13b6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	89 2f       	mov	r24, r25
    13c0:	99 27       	eor	r25, r25
    13c2:	bc 01       	movw	r22, r24
    13c4:	8b eb       	ldi	r24, 0xBB	; 187
    13c6:	96 e0       	ldi	r25, 0x06	; 6
    13c8:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	99 27       	eor	r25, r25
    13d2:	bc 01       	movw	r22, r24
    13d4:	8b eb       	ldi	r24, 0xBB	; 187
    13d6:	96 e0       	ldi	r25, 0x06	; 6
    13d8:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	2e 81       	ldd	r18, Y+6	; 0x06
    13e4:	3f 81       	ldd	r19, Y+7	; 0x07
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	fc 01       	movw	r30, r24
    13ec:	80 81       	ld	r24, Z
    13ee:	68 2f       	mov	r22, r24
    13f0:	8b eb       	ldi	r24, 0xBB	; 187
    13f2:	96 e0       	ldi	r25, 0x06	; 6
    13f4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    13f8:	8b eb       	ldi	r24, 0xBB	; 187
    13fa:	96 e0       	ldi	r25, 0x06	; 6
    13fc:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN7TwoWire15endTransmissionEv>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
    1400:	6f e0       	ldi	r22, 0x0F	; 15
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	c0 cf       	rjmp	.-128    	; 0x1394 <_Z13internalWritejPhh+0x20>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    1414:	00 00       	nop
    1416:	28 96       	adiw	r28, 0x08	; 8
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <_Z12internalReadjPhh>:

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	29 97       	sbiw	r28, 0x09	; 9
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	78 87       	std	Y+8, r23	; 0x08
    1442:	6f 83       	std	Y+7, r22	; 0x07
    1444:	49 87       	std	Y+9, r20	; 0x09
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	98 17       	cp	r25, r24
    144e:	08 f0       	brcs	.+2      	; 0x1452 <_Z12internalReadjPhh+0x2a>
    1450:	4b c0       	rjmp	.+150    	; 0x14e8 <_Z12internalReadjPhh+0xc0>
		
		uint16_t thisByteAddr = address+i;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1464:	60 e5       	ldi	r22, 0x50	; 80
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	8b eb       	ldi	r24, 0xBB	; 187
    146a:	96 e0       	ldi	r25, 0x06	; 6
    146c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	89 2f       	mov	r24, r25
    1476:	99 27       	eor	r25, r25
    1478:	bc 01       	movw	r22, r24
    147a:	8b eb       	ldi	r24, 0xBB	; 187
    147c:	96 e0       	ldi	r25, 0x06	; 6
    147e:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	99 27       	eor	r25, r25
    1488:	bc 01       	movw	r22, r24
    148a:	8b eb       	ldi	r24, 0xBB	; 187
    148c:	96 e0       	ldi	r25, 0x06	; 6
    148e:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1492:	8b eb       	ldi	r24, 0xBB	; 187
    1494:	96 e0       	ldi	r25, 0x06	; 6
    1496:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	60 e5       	ldi	r22, 0x50	; 80
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	8b eb       	ldi	r24, 0xBB	; 187
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
    14ae:	8b eb       	ldi	r24, 0xBB	; 187
    14b0:	96 e0       	ldi	r25, 0x06	; 6
    14b2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <_ZN7TwoWire9availableEv>
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	89 2b       	or	r24, r25
    14ba:	09 f4       	brne	.+2      	; 0x14be <_Z12internalReadjPhh+0x96>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	22 23       	and	r18, r18
    14c0:	29 f0       	breq	.+10     	; 0x14cc <_Z12internalReadjPhh+0xa4>
			readByte = Wire.read();
    14c2:	8b eb       	ldi	r24, 0xBB	; 187
    14c4:	96 e0       	ldi	r25, 0x06	; 6
    14c6:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire4readEv>
    14ca:	8a 83       	std	Y+2, r24	; 0x02
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	2f 81       	ldd	r18, Y+7	; 0x07
    14d4:	38 85       	ldd	r19, Y+8	; 0x08
    14d6:	82 0f       	add	r24, r18
    14d8:	93 1f       	adc	r25, r19
    14da:	2a 81       	ldd	r18, Y+2	; 0x02
    14dc:	fc 01       	movw	r30, r24
    14de:	20 83       	st	Z, r18
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	b0 cf       	rjmp	.-160    	; 0x1448 <_Z12internalReadjPhh+0x20>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    14e8:	00 00       	nop
    14ea:	29 96       	adiw	r28, 0x09	; 9
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	00 d0       	rcall	.+0      	; 0x1502 <_ZN12RmMemManager18getUCharFromMemoryEj+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <_ZN12RmMemManager18getUCharFromMemoryEj+0x8>
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	9b 83       	std	Y+3, r25	; 0x03
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	7d 83       	std	Y+5, r23	; 0x05
    1510:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	42 2f       	mov	r20, r18
    151a:	9e 01       	movw	r18, r28
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	b9 01       	movw	r22, r18
    1522:	0e 94 14 0a 	call	0x1428	; 0x1428 <_Z12internalReadjPhh>
	return value;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <_ZN12RmMemManager19getUShortFromMemoryEj>:

uint16_t RmMemManager::getUShortFromMemory(uint16_t address) {
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <_ZN12RmMemManager19getUShortFromMemoryEj+0x8>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <_ZN12RmMemManager19getUShortFromMemoryEj+0xa>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	9c 83       	std	Y+4, r25	; 0x04
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	7e 83       	std	Y+6, r23	; 0x06
    154c:	6d 83       	std	Y+5, r22	; 0x05
	
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    154e:	22 e0       	ldi	r18, 0x02	; 2
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	42 2f       	mov	r20, r18
    1556:	9e 01       	movw	r18, r28
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	b9 01       	movw	r22, r18
    155e:	0e 94 14 0a 	call	0x1428	; 0x1428 <_Z12internalReadjPhh>
	return value;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1566:	26 96       	adiw	r28, 0x06	; 6
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <_ZN12RmMemManager17getUIntFromMemoryEj>:

uint32_t RmMemManager::getUIntFromMemory(uint16_t address) {
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	28 97       	sbiw	r28, 0x08	; 8
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	78 87       	std	Y+8, r23	; 0x08
    1592:	6f 83       	std	Y+7, r22	; 0x07
	
	uint32_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1594:	24 e0       	ldi	r18, 0x04	; 4
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	98 85       	ldd	r25, Y+8	; 0x08
    159a:	42 2f       	mov	r20, r18
    159c:	9e 01       	movw	r18, r28
    159e:	2f 5f       	subi	r18, 0xFF	; 255
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	b9 01       	movw	r22, r18
    15a4:	0e 94 14 0a 	call	0x1428	; 0x1428 <_Z12internalReadjPhh>
	return value;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	ab 81       	ldd	r26, Y+3	; 0x03
    15ae:	bc 81       	ldd	r27, Y+4	; 0x04
}
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	28 96       	adiw	r28, 0x08	; 8
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <_ZN12RmMemManager18getULongFromMemoryEj>:

uint64_t RmMemManager::getULongFromMemory(uint16_t address) {
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	2c 97       	sbiw	r28, 0x0c	; 12
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	9a 87       	std	Y+10, r25	; 0x0a
    15ec:	89 87       	std	Y+9, r24	; 0x09
    15ee:	7c 87       	std	Y+12, r23	; 0x0c
    15f0:	6b 87       	std	Y+11, r22	; 0x0b
	
	uint64_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    15f2:	28 e0       	ldi	r18, 0x08	; 8
    15f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f8:	42 2f       	mov	r20, r18
    15fa:	9e 01       	movw	r18, r28
    15fc:	2f 5f       	subi	r18, 0xFF	; 255
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	b9 01       	movw	r22, r18
    1602:	0e 94 14 0a 	call	0x1428	; 0x1428 <_Z12internalReadjPhh>
	return value;
    1606:	29 81       	ldd	r18, Y+1	; 0x01
    1608:	3a 81       	ldd	r19, Y+2	; 0x02
    160a:	4b 81       	ldd	r20, Y+3	; 0x03
    160c:	5c 81       	ldd	r21, Y+4	; 0x04
    160e:	6d 81       	ldd	r22, Y+5	; 0x05
    1610:	7e 81       	ldd	r23, Y+6	; 0x06
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	98 85       	ldd	r25, Y+8	; 0x08
    1616:	a2 2e       	mov	r10, r18
    1618:	b3 2e       	mov	r11, r19
    161a:	c4 2e       	mov	r12, r20
    161c:	d5 2e       	mov	r13, r21
    161e:	e6 2e       	mov	r14, r22
    1620:	f7 2e       	mov	r15, r23
    1622:	08 2f       	mov	r16, r24
    1624:	19 2f       	mov	r17, r25
}
    1626:	2a 2d       	mov	r18, r10
    1628:	3b 2d       	mov	r19, r11
    162a:	4c 2d       	mov	r20, r12
    162c:	5d 2d       	mov	r21, r13
    162e:	6e 2d       	mov	r22, r14
    1630:	7f 2d       	mov	r23, r15
    1632:	80 2f       	mov	r24, r16
    1634:	91 2f       	mov	r25, r17
    1636:	2c 96       	adiw	r28, 0x0c	; 12
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	08 95       	ret

00001658 <_ZN12RmMemManager16setUCharToMemoryEjh>:

void RmMemManager::setUCharToMemory(uint16_t address, uint8_t value) {
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <_ZN12RmMemManager16setUCharToMemoryEjh+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <_ZN12RmMemManager16setUCharToMemoryEjh+0x8>
    1660:	1f 92       	push	r1
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	7c 83       	std	Y+4, r23	; 0x04
    166c:	6b 83       	std	Y+3, r22	; 0x03
    166e:	4d 83       	std	Y+5, r20	; 0x05
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	9e 01       	movw	r18, r28
    1674:	2b 5f       	subi	r18, 0xFB	; 251
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	b9 01       	movw	r22, r18
    167e:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z13internalWritejPhh>
}
    1682:	00 00       	nop
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <_ZN12RmMemManager17setUShortToMemoryEjj>:

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value) {
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <_ZN12RmMemManager17setUShortToMemoryEjj+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <_ZN12RmMemManager17setUShortToMemoryEjj+0x8>
    169c:	00 d0       	rcall	.+0      	; 0x169e <_ZN12RmMemManager17setUShortToMemoryEjj+0xa>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	7c 83       	std	Y+4, r23	; 0x04
    16a8:	6b 83       	std	Y+3, r22	; 0x03
    16aa:	5e 83       	std	Y+6, r21	; 0x06
    16ac:	4d 83       	std	Y+5, r20	; 0x05
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    16ae:	42 e0       	ldi	r20, 0x02	; 2
    16b0:	9e 01       	movw	r18, r28
    16b2:	2b 5f       	subi	r18, 0xFB	; 251
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	b9 01       	movw	r22, r18
    16bc:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z13internalWritejPhh>
}
    16c0:	00 00       	nop
    16c2:	26 96       	adiw	r28, 0x06	; 6
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <_ZN12RmMemManager15setUIntToMemoryEjm>:

void RmMemManager::setUIntToMemory(uint16_t address, uint32_t value) {
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	28 97       	sbiw	r28, 0x08	; 8
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	7c 83       	std	Y+4, r23	; 0x04
    16ee:	6b 83       	std	Y+3, r22	; 0x03
    16f0:	2d 83       	std	Y+5, r18	; 0x05
    16f2:	3e 83       	std	Y+6, r19	; 0x06
    16f4:	4f 83       	std	Y+7, r20	; 0x07
    16f6:	58 87       	std	Y+8, r21	; 0x08
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    16f8:	44 e0       	ldi	r20, 0x04	; 4
    16fa:	9e 01       	movw	r18, r28
    16fc:	2b 5f       	subi	r18, 0xFB	; 251
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z13internalWritejPhh>
}
    170a:	00 00       	nop
    170c:	28 96       	adiw	r28, 0x08	; 8
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <_ZN12RmMemManager16setULongToMemoryEjy>:

void RmMemManager::setULongToMemory(uint16_t address, uint64_t value) {
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	2c 97       	sbiw	r28, 0x0c	; 12
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	7c 83       	std	Y+4, r23	; 0x04
    1740:	6b 83       	std	Y+3, r22	; 0x03
    1742:	ed 82       	std	Y+5, r14	; 0x05
    1744:	fe 82       	std	Y+6, r15	; 0x06
    1746:	0f 83       	std	Y+7, r16	; 0x07
    1748:	18 87       	std	Y+8, r17	; 0x08
    174a:	29 87       	std	Y+9, r18	; 0x09
    174c:	3a 87       	std	Y+10, r19	; 0x0a
    174e:	4b 87       	std	Y+11, r20	; 0x0b
    1750:	5c 87       	std	Y+12, r21	; 0x0c
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1752:	48 e0       	ldi	r20, 0x08	; 8
    1754:	9e 01       	movw	r18, r28
    1756:	2b 5f       	subi	r18, 0xFB	; 251
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	b9 01       	movw	r22, r18
    1760:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z13internalWritejPhh>
}
    1764:	00 00       	nop
    1766:	2c 96       	adiw	r28, 0x0c	; 12
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	08 95       	ret

00001780 <_ZN12RmMemManager16initialiseModuleEh>:

void RmMemManager::initialiseModule(uint8_t moduleId) {
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	a0 97       	sbiw	r28, 0x20	; 32
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	9f 8f       	std	Y+31, r25	; 0x1f
    1796:	8e 8f       	std	Y+30, r24	; 0x1e
    1798:	68 a3       	std	Y+32, r22	; 0x20

	RM_LOG2(F("Init Module"), moduleId);
    179a:	8e e4       	ldi	r24, 0x4E	; 78
    179c:	93 e0       	ldi	r25, 0x03	; 3
    179e:	bc 01       	movw	r22, r24
    17a0:	89 ec       	ldi	r24, 0xC9	; 201
    17a2:	96 e0       	ldi	r25, 0x06	; 6
    17a4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    17a8:	6b e9       	ldi	r22, 0x9B	; 155
    17aa:	71 e0       	ldi	r23, 0x01	; 1
    17ac:	89 ec       	ldi	r24, 0xC9	; 201
    17ae:	96 e0       	ldi	r25, 0x06	; 6
    17b0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    17b4:	4a e0       	ldi	r20, 0x0A	; 10
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	68 a1       	ldd	r22, Y+32	; 0x20
    17ba:	89 ec       	ldi	r24, 0xC9	; 201
    17bc:	96 e0       	ldi	r25, 0x06	; 6
    17be:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_ZN5Print7printlnEhi>

	ModuleMeta meta;
	meta.moduleId = moduleId;
    17c2:	88 a1       	ldd	r24, Y+32	; 0x20
    17c4:	89 83       	std	Y+1, r24	; 0x01
	meta.bootCount = 0;
    17c6:	1b 82       	std	Y+3, r1	; 0x03
    17c8:	1a 82       	std	Y+2, r1	; 0x02
	meta.eepromTestArea = 0;
    17ca:	1e 82       	std	Y+6, r1	; 0x06
    17cc:	1f 82       	std	Y+7, r1	; 0x07
    17ce:	18 86       	std	Y+8, r1	; 0x08
    17d0:	19 86       	std	Y+9, r1	; 0x09
    17d2:	1a 86       	std	Y+10, r1	; 0x0a
    17d4:	1b 86       	std	Y+11, r1	; 0x0b
    17d6:	1c 86       	std	Y+12, r1	; 0x0c
    17d8:	1d 86       	std	Y+13, r1	; 0x0d
	meta.nextFreeWriteAddr = MEMLOC_START + sizeof(ModuleMeta);
    17da:	8d e1       	ldi	r24, 0x1D	; 29
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9d 83       	std	Y+5, r25	; 0x05
    17e0:	8c 83       	std	Y+4, r24	; 0x04
	memset(meta.spareBuffer, 0, sizeof(meta.spareBuffer));
    17e2:	ce 01       	movw	r24, r28
    17e4:	0e 96       	adiw	r24, 0x0e	; 14
    17e6:	40 e1       	ldi	r20, 0x10	; 16
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <memset>
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    17f2:	8d e1       	ldi	r24, 0x1D	; 29
    17f4:	48 2f       	mov	r20, r24
    17f6:	ce 01       	movw	r24, r28
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	bc 01       	movw	r22, r24
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z13internalWritejPhh>
}
    1804:	00 00       	nop
    1806:	a0 96       	adiw	r28, 0x20	; 32
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <_ZN12RmMemManager18incrementBootCountEv>:

uint16_t RmMemManager::incrementBootCount() {
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	00 d0       	rcall	.+0      	; 0x181e <_ZN12RmMemManager18incrementBootCountEv+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <_ZN12RmMemManager18incrementBootCountEv+0x8>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <_ZN12RmMemManager18incrementBootCountEv+0xa>
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
	
	//TODO: Somehow verify Wire is working?
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
	uint16_t currVal = getUShortFromMemory(addr);
    1832:	29 81       	ldd	r18, Y+1	; 0x01
    1834:	3a 81       	ldd	r19, Y+2	; 0x02
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	b9 01       	movw	r22, r18
    183c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN12RmMemManager19getUShortFromMemoryEj>
    1840:	9c 83       	std	Y+4, r25	; 0x04
    1842:	8b 83       	std	Y+3, r24	; 0x03
	++currVal;
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
	setUShortToMemory(addr, currVal);
    184e:	4b 81       	ldd	r20, Y+3	; 0x03
    1850:	5c 81       	ldd	r21, Y+4	; 0x04
    1852:	29 81       	ldd	r18, Y+1	; 0x01
    1854:	3a 81       	ldd	r19, Y+2	; 0x02
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	b9 01       	movw	r22, r18
    185c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN12RmMemManager17setUShortToMemoryEjj>
	return currVal;
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1864:	26 96       	adiw	r28, 0x06	; 6
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <_ZN12RmMemManager17verifyBasicEepRomEv>:

uint16_t RmMemManager::verifyBasicEepRom() {
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	6e 97       	sbiw	r28, 0x1e	; 30
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	9e 8f       	std	Y+30, r25	; 0x1e
    189c:	8d 8f       	std	Y+29, r24	; 0x1d
	
	//TODO: Verify of spill over 64-bit boundary what to do
	//TODO: Roll-over verification
	//TODO: Don't have strings of messages, return code which translate in a #if NOT_ENCODED_ON_DEVICE block
	
	RM_LOG(F("Basic EEPROM Test"));
    189e:	8a e5       	ldi	r24, 0x5A	; 90
    18a0:	93 e0       	ldi	r25, 0x03	; 3
    18a2:	bc 01       	movw	r22, r24
    18a4:	89 ec       	ldi	r24, 0xC9	; 201
    18a6:	96 e0       	ldi	r25, 0x06	; 6
    18a8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
	
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
    18ac:	85 e0       	ldi	r24, 0x05	; 5
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9d 83       	std	Y+5, r25	; 0x05
    18b2:	8c 83       	std	Y+4, r24	; 0x04
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++) {
    18b4:	1b 82       	std	Y+3, r1	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	8e 31       	cpi	r24, 0x1E	; 30
    18ba:	08 f0       	brcs	.+2      	; 0x18be <_ZN12RmMemManager17verifyBasicEepRomEv+0x48>
    18bc:	2d c1       	rjmp	.+602    	; 0x1b18 <_ZN12RmMemManager17verifyBasicEepRomEv+0x2a2>
		
		//No intersection of values so we'll know straight away if wrong bits picked
		this->setULongToMemory(MEM_TEST_LOC, 0xA946F7D8C941F9A8);
    18be:	6c 81       	ldd	r22, Y+4	; 0x04
    18c0:	7d 81       	ldd	r23, Y+5	; 0x05
    18c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c6:	0f 2e       	mov	r0, r31
    18c8:	f8 ea       	ldi	r31, 0xA8	; 168
    18ca:	ef 2e       	mov	r14, r31
    18cc:	f0 2d       	mov	r31, r0
    18ce:	0f 2e       	mov	r0, r31
    18d0:	f9 ef       	ldi	r31, 0xF9	; 249
    18d2:	ff 2e       	mov	r15, r31
    18d4:	f0 2d       	mov	r31, r0
    18d6:	01 e4       	ldi	r16, 0x41	; 65
    18d8:	19 ec       	ldi	r17, 0xC9	; 201
    18da:	28 ed       	ldi	r18, 0xD8	; 216
    18dc:	37 ef       	ldi	r19, 0xF7	; 247
    18de:	46 e4       	ldi	r20, 0x46	; 70
    18e0:	59 ea       	ldi	r21, 0xA9	; 169
    18e2:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN12RmMemManager16setULongToMemoryEjy>
		uint64_t val8 = this->getULongFromMemory(MEM_TEST_LOC);
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ee:	b9 01       	movw	r22, r18
    18f0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12RmMemManager18getULongFromMemoryEj>
    18f4:	a2 2e       	mov	r10, r18
    18f6:	b3 2e       	mov	r11, r19
    18f8:	c4 2e       	mov	r12, r20
    18fa:	d5 2e       	mov	r13, r21
    18fc:	e6 2e       	mov	r14, r22
    18fe:	f7 2e       	mov	r15, r23
    1900:	08 2f       	mov	r16, r24
    1902:	19 2f       	mov	r17, r25
    1904:	ae 82       	std	Y+6, r10	; 0x06
    1906:	bf 82       	std	Y+7, r11	; 0x07
    1908:	c8 86       	std	Y+8, r12	; 0x08
    190a:	d9 86       	std	Y+9, r13	; 0x09
    190c:	ea 86       	std	Y+10, r14	; 0x0a
    190e:	fb 86       	std	Y+11, r15	; 0x0b
    1910:	0c 87       	std	Y+12, r16	; 0x0c
    1912:	1d 87       	std	Y+13, r17	; 0x0d
		if (val8 != 0xA946F7D8C941F9A8) {
    1914:	ae 80       	ldd	r10, Y+6	; 0x06
    1916:	bf 80       	ldd	r11, Y+7	; 0x07
    1918:	c8 84       	ldd	r12, Y+8	; 0x08
    191a:	d9 84       	ldd	r13, Y+9	; 0x09
    191c:	ea 84       	ldd	r14, Y+10	; 0x0a
    191e:	fb 84       	ldd	r15, Y+11	; 0x0b
    1920:	0c 85       	ldd	r16, Y+12	; 0x0c
    1922:	1d 85       	ldd	r17, Y+13	; 0x0d
    1924:	2a 2d       	mov	r18, r10
    1926:	3b 2d       	mov	r19, r11
    1928:	4c 2d       	mov	r20, r12
    192a:	5d 2d       	mov	r21, r13
    192c:	6e 2d       	mov	r22, r14
    192e:	7f 2d       	mov	r23, r15
    1930:	80 2f       	mov	r24, r16
    1932:	91 2f       	mov	r25, r17
    1934:	28 3a       	cpi	r18, 0xA8	; 168
    1936:	39 4f       	sbci	r19, 0xF9	; 249
    1938:	41 44       	sbci	r20, 0x41	; 65
    193a:	59 4c       	sbci	r21, 0xC9	; 201
    193c:	68 4d       	sbci	r22, 0xD8	; 216
    193e:	77 4f       	sbci	r23, 0xF7	; 247
    1940:	86 44       	sbci	r24, 0x46	; 70
    1942:	99 4a       	sbci	r25, 0xA9	; 169
    1944:	61 f0       	breq	.+24     	; 0x195e <_ZN12RmMemManager17verifyBasicEepRomEv+0xe8>
			RM_LOGLN(F("FAILED LONG"));
    1946:	8c e6       	ldi	r24, 0x6C	; 108
    1948:	93 e0       	ldi	r25, 0x03	; 3
    194a:	bc 01       	movw	r22, r24
    194c:	89 ec       	ldi	r24, 0xC9	; 201
    194e:	96 e0       	ldi	r25, 0x06	; 6
    1950:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUIntToMemory(MEM_TEST_LOC, 0xC911F948);
    195e:	6c 81       	ldd	r22, Y+4	; 0x04
    1960:	7d 81       	ldd	r23, Y+5	; 0x05
    1962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1966:	28 e4       	ldi	r18, 0x48	; 72
    1968:	39 ef       	ldi	r19, 0xF9	; 249
    196a:	41 e1       	ldi	r20, 0x11	; 17
    196c:	59 ec       	ldi	r21, 0xC9	; 201
    196e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN12RmMemManager15setUIntToMemoryEjm>
		uint32_t val4 = this->getUIntFromMemory(MEM_TEST_LOC);
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1978:	9e 8d       	ldd	r25, Y+30	; 0x1e
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN12RmMemManager17getUIntFromMemoryEj>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8e 87       	std	Y+14, r24	; 0x0e
    1986:	9f 87       	std	Y+15, r25	; 0x0f
    1988:	a8 8b       	std	Y+16, r26	; 0x10
    198a:	b9 8b       	std	Y+17, r27	; 0x11
		if (val4 != 0xC911F948) {
    198c:	8e 85       	ldd	r24, Y+14	; 0x0e
    198e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1990:	a8 89       	ldd	r26, Y+16	; 0x10
    1992:	b9 89       	ldd	r27, Y+17	; 0x11
    1994:	88 34       	cpi	r24, 0x48	; 72
    1996:	99 4f       	sbci	r25, 0xF9	; 249
    1998:	a1 41       	sbci	r26, 0x11	; 17
    199a:	b9 4c       	sbci	r27, 0xC9	; 201
    199c:	61 f0       	breq	.+24     	; 0x19b6 <_ZN12RmMemManager17verifyBasicEepRomEv+0x140>
			RM_LOGLN(F("FAILED INT"));
    199e:	88 e7       	ldi	r24, 0x78	; 120
    19a0:	93 e0       	ldi	r25, 0x03	; 3
    19a2:	bc 01       	movw	r22, r24
    19a4:	89 ec       	ldi	r24, 0xC9	; 201
    19a6:	96 e0       	ldi	r25, 0x06	; 6
    19a8:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUShortToMemory(MEM_TEST_LOC, 0x5C3A);
    19b6:	2c 81       	ldd	r18, Y+4	; 0x04
    19b8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19be:	4a e3       	ldi	r20, 0x3A	; 58
    19c0:	5c e5       	ldi	r21, 0x5C	; 92
    19c2:	b9 01       	movw	r22, r18
    19c4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN12RmMemManager17setUShortToMemoryEjj>
		uint16_t val2 = this->getUShortFromMemory(MEM_TEST_LOC);
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19d0:	b9 01       	movw	r22, r18
    19d2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN12RmMemManager19getUShortFromMemoryEj>
    19d6:	9b 8b       	std	Y+19, r25	; 0x13
    19d8:	8a 8b       	std	Y+18, r24	; 0x12
		if (val2 != 0x5C3A) {
    19da:	8a 89       	ldd	r24, Y+18	; 0x12
    19dc:	9b 89       	ldd	r25, Y+19	; 0x13
    19de:	8a 33       	cpi	r24, 0x3A	; 58
    19e0:	9c 45       	sbci	r25, 0x5C	; 92
    19e2:	61 f0       	breq	.+24     	; 0x19fc <_ZN12RmMemManager17verifyBasicEepRomEv+0x186>
			RM_LOGLN(F("FAILED SHORT"));
    19e4:	83 e8       	ldi	r24, 0x83	; 131
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    19e8:	bc 01       	movw	r22, r24
    19ea:	89 ec       	ldi	r24, 0xC9	; 201
    19ec:	96 e0       	ldi	r25, 0x06	; 6
    19ee:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUCharToMemory(MEM_TEST_LOC, 0xE1);
    19fc:	2c 81       	ldd	r18, Y+4	; 0x04
    19fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a04:	41 ee       	ldi	r20, 0xE1	; 225
    1a06:	b9 01       	movw	r22, r18
    1a08:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN12RmMemManager16setUCharToMemoryEjh>
		uint8_t val1 = this->getUCharFromMemory(MEM_TEST_LOC);
    1a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a14:	b9 01       	movw	r22, r18
    1a16:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN12RmMemManager18getUCharFromMemoryEj>
    1a1a:	8c 8b       	std	Y+20, r24	; 0x14
		if (val1 != 0xE1) {
    1a1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a1e:	81 3e       	cpi	r24, 0xE1	; 225
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <_ZN12RmMemManager17verifyBasicEepRomEv+0x1c4>
			RM_LOGLN(F("FAILED CHAR"));
    1a22:	80 e9       	ldi	r24, 0x90	; 144
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	bc 01       	movw	r22, r24
    1a28:	89 ec       	ldi	r24, 0xC9	; 201
    1a2a:	96 e0       	ldi	r25, 0x06	; 6
    1a2c:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
		}
		
		RM_LOG(F("EEPROM Test: Long="));
    1a3a:	8c e9       	ldi	r24, 0x9C	; 156
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	bc 01       	movw	r22, r24
    1a40:	89 ec       	ldi	r24, 0xC9	; 201
    1a42:	96 e0       	ldi	r25, 0x06	; 6
    1a44:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLONG(val8, HEX);
    1a48:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4c:	48 85       	ldd	r20, Y+8	; 0x08
    1a4e:	59 85       	ldd	r21, Y+9	; 0x09
    1a50:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a52:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a54:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a56:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a58:	00 e2       	ldi	r16, 0x20	; 32
    1a5a:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__lshrdi3>
    1a5e:	a2 2e       	mov	r10, r18
    1a60:	b3 2e       	mov	r11, r19
    1a62:	c4 2e       	mov	r12, r20
    1a64:	d5 2e       	mov	r13, r21
    1a66:	e6 2e       	mov	r14, r22
    1a68:	f7 2e       	mov	r15, r23
    1a6a:	08 2f       	mov	r16, r24
    1a6c:	19 2f       	mov	r17, r25
    1a6e:	ad 8a       	std	Y+21, r10	; 0x15
    1a70:	be 8a       	std	Y+22, r11	; 0x16
    1a72:	cf 8a       	std	Y+23, r12	; 0x17
    1a74:	d8 8e       	std	Y+24, r13	; 0x18
    1a76:	e9 8e       	std	Y+25, r14	; 0x19
    1a78:	fa 8e       	std	Y+26, r15	; 0x1a
    1a7a:	0b 8f       	std	Y+27, r16	; 0x1b
    1a7c:	1c 8f       	std	Y+28, r17	; 0x1c
    1a7e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a80:	9e 89       	ldd	r25, Y+22	; 0x16
    1a82:	af 89       	ldd	r26, Y+23	; 0x17
    1a84:	b8 8d       	ldd	r27, Y+24	; 0x18
    1a86:	20 e1       	ldi	r18, 0x10	; 16
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	bd 01       	movw	r22, r26
    1a8e:	89 ec       	ldi	r24, 0xC9	; 201
    1a90:	96 e0       	ldi	r25, 0x06	; 6
    1a92:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>
    1a96:	8e 81       	ldd	r24, Y+6	; 0x06
    1a98:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9a:	a8 85       	ldd	r26, Y+8	; 0x08
    1a9c:	b9 85       	ldd	r27, Y+9	; 0x09
    1a9e:	20 e1       	ldi	r18, 0x10	; 16
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	bd 01       	movw	r22, r26
    1aa6:	89 ec       	ldi	r24, 0xC9	; 201
    1aa8:	96 e0       	ldi	r25, 0x06	; 6
    1aaa:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>
		RM_LOG(F(", Int="));
    1aae:	8f ea       	ldi	r24, 0xAF	; 175
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	89 ec       	ldi	r24, 0xC9	; 201
    1ab6:	96 e0       	ldi	r25, 0x06	; 6
    1ab8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val4, HEX);
    1abc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1abe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ac2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ac4:	20 e1       	ldi	r18, 0x10	; 16
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	ac 01       	movw	r20, r24
    1aca:	bd 01       	movw	r22, r26
    1acc:	89 ec       	ldi	r24, 0xC9	; 201
    1ace:	96 e0       	ldi	r25, 0x06	; 6
    1ad0:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>
		RM_LOG(F(", Short="));
    1ad4:	86 eb       	ldi	r24, 0xB6	; 182
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	bc 01       	movw	r22, r24
    1ada:	89 ec       	ldi	r24, 0xC9	; 201
    1adc:	96 e0       	ldi	r25, 0x06	; 6
    1ade:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val2, HEX);
    1ae2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ae6:	40 e1       	ldi	r20, 0x10	; 16
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	bc 01       	movw	r22, r24
    1aec:	89 ec       	ldi	r24, 0xC9	; 201
    1aee:	96 e0       	ldi	r25, 0x06	; 6
    1af0:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN5Print5printEji>
		RM_LOG(F(", Char="));
    1af4:	8f eb       	ldi	r24, 0xBF	; 191
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	bc 01       	movw	r22, r24
    1afa:	89 ec       	ldi	r24, 0xC9	; 201
    1afc:	96 e0       	ldi	r25, 0x06	; 6
    1afe:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLNFMT(val1, HEX);
    1b02:	40 e1       	ldi	r20, 0x10	; 16
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	6c 89       	ldd	r22, Y+20	; 0x14
    1b08:	89 ec       	ldi	r24, 0xC9	; 201
    1b0a:	96 e0       	ldi	r25, 0x06	; 6
    1b0c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_ZN5Print7printlnEhi>
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++) {
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
    1b14:	8b 83       	std	Y+3, r24	; 0x03
    1b16:	cf ce       	rjmp	.-610    	; 0x18b6 <_ZN12RmMemManager17verifyBasicEepRomEv+0x40>
		RM_LOGFMT(val2, HEX);
		RM_LOG(F(", Char="));
		RM_LOGLNFMT(val1, HEX);
	}
	
	return numFailures;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b1c:	6e 96       	adiw	r28, 0x1e	; 30
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	af 90       	pop	r10
    1b3c:	08 95       	ret

00001b3e <_ZN12RmMemManager23runExtendedShow100BytesEv>:

void RmMemManager::runExtendedShow100Bytes() {
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <_ZN12RmMemManager23runExtendedShow100BytesEv+0x6>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	for(uint8_t i=0 ; i<sizeof(raw100)/sizeof(uint8_t) ; i++){
		RM_LOGLN(raw100[i]);
	}
	
#else
	RM_LOG(F("*** FAIL SHOW 100 ***")); //Sync Broken - inclusion of code should be sync'd with flag
    1b4c:	87 ec       	ldi	r24, 0xC7	; 199
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	bc 01       	movw	r22, r24
    1b52:	89 ec       	ldi	r24, 0xC9	; 201
    1b54:	96 e0       	ldi	r25, 0x06	; 6
    1b56:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
#endif
}
    1b5a:	00 00       	nop
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <_ZN12RmMemManager21runExtendedDumpOutputEv>:

void RmMemManager::runExtendedDumpOutput() {
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <_ZN12RmMemManager21runExtendedDumpOutputEv+0x6>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
	//RM_LOG(session.gpsInfo.heading);
	//RM_LOG(F(", Gps-Speed: "));
	//RM_LOGLN(session.gpsInfo.speed_kph);
	//}
#else
	RM_LOG(F("*** FAIL PRINT ***")); //Sync Broken - inclusion of code should be sync'd with flag
    1b74:	8d ed       	ldi	r24, 0xDD	; 221
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	bc 01       	movw	r22, r24
    1b7a:	89 ec       	ldi	r24, 0xC9	; 201
    1b7c:	96 e0       	ldi	r25, 0x06	; 6
    1b7e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
#endif
}
    1b82:	00 00       	nop
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo) {
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	28 97       	sbiw	r28, 0x08	; 8
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	7c 83       	std	Y+4, r23	; 0x04
    1ba8:	6b 83       	std	Y+3, r22	; 0x03
    1baa:	5e 83       	std	Y+6, r21	; 0x06
    1bac:	4d 83       	std	Y+5, r20	; 0x05
    1bae:	38 87       	std	Y+8, r19	; 0x08
    1bb0:	2f 83       	std	Y+7, r18	; 0x07

	return 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
		//}
	//
	//
	//*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
	//return numOfLastReadings;
}
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	28 96       	adiw	r28, 0x08	; 8
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret

00001bd0 <_ZN12RmMemManager12markDataSentEy>:

void RmMemManager::markDataSent(uint64_t sentUpTo) {
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	2a 97       	sbiw	r28, 0x0a	; 10
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	0b 83       	std	Y+3, r16	; 0x03
    1bee:	1c 83       	std	Y+4, r17	; 0x04
    1bf0:	2d 83       	std	Y+5, r18	; 0x05
    1bf2:	3e 83       	std	Y+6, r19	; 0x06
    1bf4:	4f 83       	std	Y+7, r20	; 0x07
    1bf6:	58 87       	std	Y+8, r21	; 0x08
    1bf8:	69 87       	std	Y+9, r22	; 0x09
    1bfa:	7a 87       	std	Y+10, r23	; 0x0a

	//this->setULongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
}
    1bfc:	00 00       	nop
    1bfe:	2a 96       	adiw	r28, 0x0a	; 10
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	08 95       	ret

00001c14 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:

void RmMemManager::appendDailyEntry(DailyCycleData* r) {
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x8>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	7c 83       	std	Y+4, r23	; 0x04
    1c26:	6b 83       	std	Y+3, r22	; 0x03

	//TODO
}
    1c28:	00 00       	nop
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <_Z27internalWriteEntryAtAddressP10SensorDatam>:

void internalWriteEntryAtAddress(SensorData* r, unsigned long address) {
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <_Z27internalWriteEntryAtAddressP10SensorDatam+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x8>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <_Z27internalWriteEntryAtAddressP10SensorDatam+0xa>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	4b 83       	std	Y+3, r20	; 0x03
    1c4c:	5c 83       	std	Y+4, r21	; 0x04
    1c4e:	6d 83       	std	Y+5, r22	; 0x05
    1c50:	7e 83       	std	Y+6, r23	; 0x06
	
	//byte* rPtr = (byte*)r;
//
	//for(int i=0;i<sizeof(SensorData);i++)
		//EEPROM.write(address+i, *(rPtr+i));
}
    1c52:	00 00       	nop
    1c54:	26 96       	adiw	r28, 0x06	; 6
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>:

void RmMemManager::replaceLastSensorEntry(SensorData* r) {
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	7c 83       	std	Y+4, r23	; 0x04
    1c78:	6b 83       	std	Y+3, r22	; 0x03
	//volatile unsigned long entryCount = this->getULongFromMemory(MEMLOC_READING_ENTRY_COUNT);
	//volatile unsigned long lastEntryOffset = max(0,entryCount-1) * sizeof(SensorData);
	//volatile unsigned long lastEntryAddress = MEMADDR_READING_DATA_START + lastEntryOffset;
	//
	//internalWriteEntryAtAddress(r, lastEntryAddress);
}
    1c7a:	00 00       	nop
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:

void RmMemManager::appendSensorEntry(SensorData* r) {
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	2a 97       	sbiw	r28, 0x0a	; 10
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	98 87       	std	Y+8, r25	; 0x08
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	7a 87       	std	Y+10, r23	; 0x0a
    1ca4:	69 87       	std	Y+9, r22	; 0x09
	
	uint16_t freeMemAddress = MEMLOC_START + offsetof(ModuleMeta, nextFreeWriteAddr);
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
	
	uint16_t currFreeAddr = getUShortFromMemory(freeMemAddress);
    1cae:	29 81       	ldd	r18, Y+1	; 0x01
    1cb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb4:	98 85       	ldd	r25, Y+8	; 0x08
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN12RmMemManager19getUShortFromMemoryEj>
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
	
	RM_LOG2(F("Writing To Addr"), currFreeAddr);
    1cc0:	80 ef       	ldi	r24, 0xF0	; 240
    1cc2:	93 e0       	ldi	r25, 0x03	; 3
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	89 ec       	ldi	r24, 0xC9	; 201
    1cc8:	96 e0       	ldi	r25, 0x06	; 6
    1cca:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    1cce:	6b e9       	ldi	r22, 0x9B	; 155
    1cd0:	71 e0       	ldi	r23, 0x01	; 1
    1cd2:	89 ec       	ldi	r24, 0xC9	; 201
    1cd4:	96 e0       	ldi	r25, 0x06	; 6
    1cd6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	4a e0       	ldi	r20, 0x0A	; 10
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	89 ec       	ldi	r24, 0xC9	; 201
    1ce6:	96 e0       	ldi	r25, 0x06	; 6
    1ce8:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN5Print7printlnEji>
	internalWrite(currFreeAddr, (uint8_t*)r, sizeof(SensorData));
    1cec:	4a e0       	ldi	r20, 0x0A	; 10
    1cee:	29 85       	ldd	r18, Y+9	; 0x09
    1cf0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	b9 01       	movw	r22, r18
    1cf8:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z13internalWritejPhh>
	
	uint16_t nextFreeAddr = currFreeAddr + sizeof(SensorData);
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	0a 96       	adiw	r24, 0x0a	; 10
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
	RM_LOG2(F("Free Addr Now Is"), nextFreeAddr);
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	94 e0       	ldi	r25, 0x04	; 4
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	89 ec       	ldi	r24, 0xC9	; 201
    1d0e:	96 e0       	ldi	r25, 0x06	; 6
    1d10:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    1d14:	6b e9       	ldi	r22, 0x9B	; 155
    1d16:	71 e0       	ldi	r23, 0x01	; 1
    1d18:	89 ec       	ldi	r24, 0xC9	; 201
    1d1a:	96 e0       	ldi	r25, 0x06	; 6
    1d1c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	4a e0       	ldi	r20, 0x0A	; 10
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	bc 01       	movw	r22, r24
    1d2a:	89 ec       	ldi	r24, 0xC9	; 201
    1d2c:	96 e0       	ldi	r25, 0x06	; 6
    1d2e:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN5Print7printlnEji>
	
	setUShortToMemory(freeMemAddress, nextFreeAddr);
    1d32:	4d 81       	ldd	r20, Y+5	; 0x05
    1d34:	5e 81       	ldd	r21, Y+6	; 0x06
    1d36:	29 81       	ldd	r18, Y+1	; 0x01
    1d38:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	98 85       	ldd	r25, Y+8	; 0x08
    1d3e:	b9 01       	movw	r22, r18
    1d40:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN12RmMemManager17setUShortToMemoryEjj>
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
    1d44:	00 00       	nop
    1d46:	2a 96       	adiw	r28, 0x0a	; 10
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <_ZN12RmMemManager5resetEv>:



/* LED mgmt - Not strictly memory related */

void RmMemManager::reset() {
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <_ZN12RmMemManager5resetEv+0x6>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	
	_flashCallCount=0;
    1d66:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <_flashCallCount>
	toggleLED(Bottom, All_Clear);
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    1d82:	00 00       	nop
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <_Z13internalFlashRbS_9LED_STATEb>:

/* Flashes for a single LED */
void internalFlash(
	boolean& greenPinVal, boolean& redPinVal,
	LED_STATE currLedState, boolean atSlowInterval
	) {
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <_Z13internalFlashRbS_9LED_STATEb+0x6>
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <_Z13internalFlashRbS_9LED_STATEb+0x8>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <_Z13internalFlashRbS_9LED_STATEb+0xa>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	7c 83       	std	Y+4, r23	; 0x04
    1da2:	6b 83       	std	Y+3, r22	; 0x03
    1da4:	4d 83       	std	Y+5, r20	; 0x05
    1da6:	2e 83       	std	Y+6, r18	; 0x06

	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	80 32       	cpi	r24, 0x20	; 32
    1dac:	61 f4       	brne	.+24     	; 0x1dc6 <_Z13internalFlashRbS_9LED_STATEb+0x38>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	fc 01       	movw	r30, r24
    1db4:	90 81       	ld	r25, Z
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	29 2f       	mov	r18, r25
    1dba:	28 27       	eor	r18, r24
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 83       	st	Z, r18
    1dc4:	19 c0       	rjmp	.+50     	; 0x1df8 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Slow) {
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	80 34       	cpi	r24, 0x40	; 64
    1dca:	31 f4       	brne	.+12     	; 0x1dd8 <_Z13internalFlashRbS_9LED_STATEb+0x4a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
    1dd6:	10 c0       	rjmp	.+32     	; 0x1df8 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Solid) {
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	80 31       	cpi	r24, 0x10	; 16
    1ddc:	31 f4       	brne	.+12     	; 0x1dea <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	21 e0       	ldi	r18, 0x01	; 1
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == All_Clear) {
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	80 38       	cpi	r24, 0x80	; 128
    1dee:	21 f4       	brne	.+8      	; 0x1df8 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	fc 01       	movw	r30, r24
    1df6:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	61 f4       	brne	.+24     	; 0x1e16 <_Z13internalFlashRbS_9LED_STATEb+0x88>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	fc 01       	movw	r30, r24
    1e04:	90 81       	ld	r25, Z
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	29 2f       	mov	r18, r25
    1e0a:	28 27       	eor	r18, r24
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	fc 01       	movw	r30, r24
    1e12:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e14:	19 c0       	rjmp	.+50     	; 0x1e48 <_Z13internalFlashRbS_9LED_STATEb+0xba>
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	31 f4       	brne	.+12     	; 0x1e28 <_Z13internalFlashRbS_9LED_STATEb+0x9a>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	2e 81       	ldd	r18, Y+6	; 0x06
    1e22:	fc 01       	movw	r30, r24
    1e24:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e26:	10 c0       	rjmp	.+32     	; 0x1e48 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <_Z13internalFlashRbS_9LED_STATEb+0xac>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
	}
	else if (currLedState == All_Clear) {
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	80 38       	cpi	r24, 0x80	; 128
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	fc 01       	movw	r30, r24
    1e46:	10 82       	st	Z, r1
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e48:	00 00       	nop
    1e4a:	26 96       	adiw	r28, 0x06	; 6
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <_ZN12RmMemManager8flashLEDEv>:


//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED() {
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <_ZN12RmMemManager8flashLEDEv+0x6>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01

	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
    1e6a:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <_flashCallCount>
    1e6e:	8f 5f       	subi	r24, 0xFF	; 255
    1e70:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <_flashCallCount>
    1e74:	20 91 01 06 	lds	r18, 0x0601	; 0x800601 <_flashCallCount>
    1e78:	8b ea       	ldi	r24, 0xAB	; 171
    1e7a:	28 9f       	mul	r18, r24
    1e7c:	81 2d       	mov	r24, r1
    1e7e:	11 24       	eor	r1, r1
    1e80:	98 2f       	mov	r25, r24
    1e82:	96 95       	lsr	r25
    1e84:	89 2f       	mov	r24, r25
    1e86:	88 0f       	add	r24, r24
    1e88:	89 0f       	add	r24, r25
    1e8a:	92 2f       	mov	r25, r18
    1e8c:	98 1b       	sub	r25, r24
    1e8e:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <_flashCallCount>

	//Flash Bottom LED	
	internalFlash(
    1e92:	90 91 01 06 	lds	r25, 0x0601	; 0x800601 <_flashCallCount>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	99 23       	and	r25, r25
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <_ZN12RmMemManager8flashLEDEv+0x42>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1e9e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	49 2f       	mov	r20, r25
    1ea6:	6e ef       	ldi	r22, 0xFE	; 254
    1ea8:	75 e0       	ldi	r23, 0x05	; 5
    1eaa:	8d ef       	ldi	r24, 0xFD	; 253
    1eac:	95 e0       	ldi	r25, 0x05	; 5
    1eae:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1eb2:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <_ledBottomPinGreen>
    1eb6:	68 2f       	mov	r22, r24
    1eb8:	89 e0       	ldi	r24, 0x09	; 9
    1eba:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    1ebe:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <_ledBottomPinRed>
    1ec2:	68 2f       	mov	r22, r24
    1ec4:	88 e0       	ldi	r24, 0x08	; 8
    1ec6:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    1eca:	90 91 01 06 	lds	r25, 0x0601	; 0x800601 <_flashCallCount>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	99 23       	and	r25, r25
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <_ZN12RmMemManager8flashLEDEv+0x7a>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    1ed6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_ledTopState>
    1eda:	28 2f       	mov	r18, r24
    1edc:	49 2f       	mov	r20, r25
    1ede:	6f ef       	ldi	r22, 0xFF	; 255
    1ee0:	75 e0       	ldi	r23, 0x05	; 5
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	96 e0       	ldi	r25, 0x06	; 6
    1ee6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    1eea:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <_ledTopPinGreen>
    1eee:	68 2f       	mov	r22, r24
    1ef0:	8b e0       	ldi	r24, 0x0B	; 11
    1ef2:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    1ef6:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <_ledTopPinRed>
    1efa:	68 2f       	mov	r22, r24
    1efc:	8a e0       	ldi	r24, 0x0A	; 10
    1efe:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
}
    1f02:	00 00       	nop
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state) {
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x8>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6b 83       	std	Y+3, r22	; 0x03
    1f20:	4c 83       	std	Y+4, r20	; 0x04

	if (led_num == Bottom)
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	21 f4       	brne	.+8      	; 0x1f30 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x22>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		_ledTopState = state;

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state) {

	if (led_num == Bottom)
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
	else if (led_num == Top)
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	88 23       	and	r24, r24
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
		_ledTopState = state;
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ledTopState>

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1f3c:	00 00       	nop
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	08 95       	ret

00001f4c <_ZN13SensorManagerC1Eb>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"
#include "SensorManager.h"

SensorManager::SensorManager(boolean isMock) {
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <_ZN13SensorManagerC1Eb+0x6>
    1f52:	1f 92       	push	r1
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	2b 81       	ldd	r18, Y+3	; 0x03
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 83       	st	Z, r18
}
    1f68:	00 00       	nop
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	08 95       	ret

00001f76 <_ZN13SensorManager7readVccEv>:

float SensorManager::readVcc() {
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <_ZN13SensorManager7readVccEv+0x6>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <_ZN13SensorManager7readVccEv+0x8>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <_ZN13SensorManager7readVccEv+0xa>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
	long result;
	// Read 1.1V reference against AVcc - TODO: does this even work ?!
	ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1f88:	8c e7       	ldi	r24, 0x7C	; 124
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	2e e4       	ldi	r18, 0x4E	; 78
    1f8e:	fc 01       	movw	r30, r24
    1f90:	20 83       	st	Z, r18
	delay(2); // Wait for Vref to settle
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
	ADCSRA |= _BV(ADSC); // Convert
    1f9e:	8a e7       	ldi	r24, 0x7A	; 122
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	2a e7       	ldi	r18, 0x7A	; 122
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	20 81       	ld	r18, Z
    1faa:	20 64       	ori	r18, 0x40	; 64
    1fac:	fc 01       	movw	r30, r24
    1fae:	20 83       	st	Z, r18
	while (bit_is_set(ADCSRA,ADSC));
    1fb0:	8a e7       	ldi	r24, 0x7A	; 122
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	80 74       	andi	r24, 0x40	; 64
    1fbe:	99 27       	eor	r25, r25
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	89 2b       	or	r24, r25
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <_ZN13SensorManager7readVccEv+0x52>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	22 23       	and	r18, r18
    1fca:	09 f0       	breq	.+2      	; 0x1fce <_ZN13SensorManager7readVccEv+0x58>
    1fcc:	f1 cf       	rjmp	.-30     	; 0x1fb0 <_ZN13SensorManager7readVccEv+0x3a>
	result = ADCL;
    1fce:	88 e7       	ldi	r24, 0x78	; 120
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	ab 83       	std	Y+3, r26	; 0x03
    1fe4:	bc 83       	std	Y+4, r27	; 0x04
	result |= ADCH<<8;
    1fe6:	89 e7       	ldi	r24, 0x79	; 121
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	fc 01       	movw	r30, r24
    1fec:	80 81       	ld	r24, Z
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	88 27       	eor	r24, r24
    1ff6:	09 2e       	mov	r0, r25
    1ff8:	00 0c       	add	r0, r0
    1ffa:	aa 0b       	sbc	r26, r26
    1ffc:	bb 0b       	sbc	r27, r27
    1ffe:	29 81       	ldd	r18, Y+1	; 0x01
    2000:	3a 81       	ldd	r19, Y+2	; 0x02
    2002:	4b 81       	ldd	r20, Y+3	; 0x03
    2004:	5c 81       	ldd	r21, Y+4	; 0x04
    2006:	82 2b       	or	r24, r18
    2008:	93 2b       	or	r25, r19
    200a:	a4 2b       	or	r26, r20
    200c:	b5 2b       	or	r27, r21
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	ab 83       	std	Y+3, r26	; 0x03
    2014:	bc 83       	std	Y+4, r27	; 0x04
	result = 1125300L / result; // Back-calculate AVcc in mV
    2016:	84 eb       	ldi	r24, 0xB4	; 180
    2018:	9b e2       	ldi	r25, 0x2B	; 43
    201a:	a1 e1       	ldi	r26, 0x11	; 17
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	29 81       	ldd	r18, Y+1	; 0x01
    2020:	3a 81       	ldd	r19, Y+2	; 0x02
    2022:	4b 81       	ldd	r20, Y+3	; 0x03
    2024:	5c 81       	ldd	r21, Y+4	; 0x04
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <__divmodsi4>
    202e:	da 01       	movw	r26, r20
    2030:	c9 01       	movw	r24, r18
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	ab 83       	std	Y+3, r26	; 0x03
    2038:	bc 83       	std	Y+4, r27	; 0x04
	return result / 1000;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	ab 81       	ldd	r26, Y+3	; 0x03
    2040:	bc 81       	ldd	r27, Y+4	; 0x04
    2042:	28 ee       	ldi	r18, 0xE8	; 232
    2044:	33 e0       	ldi	r19, 0x03	; 3
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <__divmodsi4>
    2052:	da 01       	movw	r26, r20
    2054:	c9 01       	movw	r24, r18
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 1e 1a 	call	0x343c	; 0x343c <__floatsisf>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
}
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	26 96       	adiw	r28, 0x06	; 6
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	08 95       	ret

00002078 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	00 d0       	rcall	.+0      	; 0x207e <_ZN13SensorManager16takeSampleAnalogEh+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <_ZN13SensorManager16takeSampleAnalogEh+0x8>
    2080:	1f 92       	push	r1
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	80 81       	ld	r24, Z
    2094:	88 23       	and	r24, r24
    2096:	19 f0       	breq	.+6      	; 0x209e <_ZN13SensorManager16takeSampleAnalogEh+0x26>
		return 5;
    2098:	85 e0       	ldi	r24, 0x05	; 5
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <_ZN13SensorManager16takeSampleAnalogEh+0x34>
	
	uint16_t batt = analogRead(pinNo);
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <analogRead>
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
	//TODO: Look into !
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	08 95       	ret

000020bc <_Z11getMockDataP10SensorData>:

uint8_t __mockDataCounter;
void getMockData(SensorData* ret) {
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <_Z11getMockDataP10SensorData+0x6>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    20ca:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__mockDataCounter>
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__mockDataCounter>
	
	ret->battVoltage = __mockDataCounter;
    20d4:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__mockDataCounter>
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	fc 01       	movw	r30, r24
    20e2:	32 83       	std	Z+2, r19	; 0x02
    20e4:	21 83       	std	Z+1, r18	; 0x01
	ret->pVVoltage = __mockDataCounter*10;
    20e6:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__mockDataCounter>
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	9c 01       	movw	r18, r24
    20f4:	22 0f       	add	r18, r18
    20f6:	33 1f       	adc	r19, r19
    20f8:	22 0f       	add	r18, r18
    20fa:	33 1f       	adc	r19, r19
    20fc:	82 0f       	add	r24, r18
    20fe:	93 1f       	adc	r25, r19
    2100:	9c 01       	movw	r18, r24
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	fc 01       	movw	r30, r24
    2108:	36 83       	std	Z+6, r19	; 0x06
    210a:	25 83       	std	Z+5, r18	; 0x05
	ret->current = __mockDataCounter%7;
    210c:	20 91 02 06 	lds	r18, 0x0602	; 0x800602 <__mockDataCounter>
    2110:	85 e2       	ldi	r24, 0x25	; 37
    2112:	28 9f       	mul	r18, r24
    2114:	81 2d       	mov	r24, r1
    2116:	11 24       	eor	r1, r1
    2118:	92 2f       	mov	r25, r18
    211a:	98 1b       	sub	r25, r24
    211c:	96 95       	lsr	r25
    211e:	89 0f       	add	r24, r25
    2120:	98 2f       	mov	r25, r24
    2122:	96 95       	lsr	r25
    2124:	96 95       	lsr	r25
    2126:	89 2f       	mov	r24, r25
    2128:	88 0f       	add	r24, r24
    212a:	88 0f       	add	r24, r24
    212c:	88 0f       	add	r24, r24
    212e:	89 1b       	sub	r24, r25
    2130:	92 2f       	mov	r25, r18
    2132:	98 1b       	sub	r25, r24
    2134:	29 2f       	mov	r18, r25
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	fc 01       	movw	r30, r24
    213e:	34 83       	std	Z+4, r19	; 0x04
    2140:	23 83       	std	Z+3, r18	; 0x03
	ret->temperature = __mockDataCounter*100;
    2142:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__mockDataCounter>
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	44 e6       	ldi	r20, 0x64	; 100
    214c:	48 9f       	mul	r20, r24
    214e:	90 01       	movw	r18, r0
    2150:	49 9f       	mul	r20, r25
    2152:	30 0d       	add	r19, r0
    2154:	11 24       	eor	r1, r1
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	fc 01       	movw	r30, r24
    215c:	30 87       	std	Z+8, r19	; 0x08
    215e:	27 83       	std	Z+7, r18	; 0x07
	
	//return ret;
}
    2160:	00 00       	nop
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <_ZN13SensorManager8readDataEP10SensorData>:

void SensorManager::readData(SensorData* ret) {
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	2c 97       	sbiw	r28, 0x0c	; 12
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	9a 87       	std	Y+10, r25	; 0x0a
    2182:	89 87       	std	Y+9, r24	; 0x09
    2184:	7c 87       	std	Y+12, r23	; 0x0c
    2186:	6b 87       	std	Y+11, r22	; 0x0b
	
	RM_LOGLN(F("Reading sensors..."));
    2188:	81 e1       	ldi	r24, 0x11	; 17
    218a:	94 e0       	ldi	r25, 0x04	; 4
    218c:	bc 01       	movw	r22, r24
    218e:	89 ec       	ldi	r24, 0xC9	; 201
    2190:	96 e0       	ldi	r25, 0x06	; 6
    2192:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (_isMock) {
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	fc 01       	movw	r30, r24
    219c:	80 81       	ld	r24, Z
    219e:	88 23       	and	r24, r24
    21a0:	29 f0       	breq	.+10     	; 0x21ac <_ZN13SensorManager8readDataEP10SensorData+0x40>
		getMockData(ret);
    21a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_Z11getMockDataP10SensorData>
    21aa:	38 c0       	rjmp	.+112    	; 0x221c <_ZN13SensorManager8readDataEP10SensorData+0xb0>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	6e e0       	ldi	r22, 0x0E	; 14
    21b2:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN13SensorManager16takeSampleAnalogEh>
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	6f e0       	ldi	r22, 0x0F	; 15
    21c0:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN13SensorManager16takeSampleAnalogEh>
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	61 e1       	ldi	r22, 0x11	; 17
    21ce:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN13SensorManager16takeSampleAnalogEh>
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	60 e1       	ldi	r22, 0x10	; 16
    21dc:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN13SensorManager16takeSampleAnalogEh>
    21e0:	98 87       	std	Y+8, r25	; 0x08
    21e2:	8f 83       	std	Y+7, r24	; 0x07

		ret->battVoltage = battRaw;
    21e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	3c 81       	ldd	r19, Y+4	; 0x04
    21ec:	fc 01       	movw	r30, r24
    21ee:	32 83       	std	Z+2, r19	; 0x02
    21f0:	21 83       	std	Z+1, r18	; 0x01
		ret->pVVoltage = pvRaw;
    21f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f6:	29 81       	ldd	r18, Y+1	; 0x01
    21f8:	3a 81       	ldd	r19, Y+2	; 0x02
    21fa:	fc 01       	movw	r30, r24
    21fc:	36 83       	std	Z+6, r19	; 0x06
    21fe:	25 83       	std	Z+5, r18	; 0x05
		ret->current = currentRaw;
    2200:	8b 85       	ldd	r24, Y+11	; 0x0b
    2202:	9c 85       	ldd	r25, Y+12	; 0x0c
    2204:	2d 81       	ldd	r18, Y+5	; 0x05
    2206:	3e 81       	ldd	r19, Y+6	; 0x06
    2208:	fc 01       	movw	r30, r24
    220a:	34 83       	std	Z+4, r19	; 0x04
    220c:	23 83       	std	Z+3, r18	; 0x03
		ret->temperature = tempRaw;
    220e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2210:	9c 85       	ldd	r25, Y+12	; 0x0c
    2212:	2f 81       	ldd	r18, Y+7	; 0x07
    2214:	38 85       	ldd	r19, Y+8	; 0x08
    2216:	fc 01       	movw	r30, r24
    2218:	30 87       	std	Z+8, r19	; 0x08
    221a:	27 83       	std	Z+7, r18	; 0x07
	}
	
	Helpers::printSensorData(ret);
    221c:	8b 85       	ldd	r24, Y+11	; 0x0b
    221e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2220:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	//return ret;
}
    2224:	00 00       	nop
    2226:	2c 96       	adiw	r28, 0x0c	; 12
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

00002238 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    2240:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <twi_state>
  twi_sendStop = true;		// default value
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <twi_sendStop>
  twi_inRepStart = false;
    224a:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    224e:	82 e1       	ldi	r24, 0x12	; 18
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
  digitalWrite(SCL, 1);
    2256:	83 e1       	ldi	r24, 0x13	; 19
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    225e:	89 eb       	ldi	r24, 0xB9	; 185
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	29 eb       	ldi	r18, 0xB9	; 185
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	f9 01       	movw	r30, r18
    2268:	20 81       	ld	r18, Z
    226a:	2e 7f       	andi	r18, 0xFE	; 254
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    2270:	89 eb       	ldi	r24, 0xB9	; 185
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	29 eb       	ldi	r18, 0xB9	; 185
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	f9 01       	movw	r30, r18
    227a:	20 81       	ld	r18, Z
    227c:	2d 7f       	andi	r18, 0xFD	; 253
    227e:	fc 01       	movw	r30, r24
    2280:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    2282:	88 eb       	ldi	r24, 0xB8	; 184
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	28 e4       	ldi	r18, 0x48	; 72
    2288:	fc 01       	movw	r30, r24
    228a:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    228c:	8c eb       	ldi	r24, 0xBC	; 188
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	25 e4       	ldi	r18, 0x45	; 69
    2292:	fc 01       	movw	r30, r24
    2294:	20 83       	st	Z, r18
}
    2296:	00 00       	nop
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	08 95       	ret

0000229e <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    22a6:	8c eb       	ldi	r24, 0xBC	; 188
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	2c eb       	ldi	r18, 0xBC	; 188
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	f9 01       	movw	r30, r18
    22b0:	20 81       	ld	r18, Z
    22b2:	2a 7b       	andi	r18, 0xBA	; 186
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    22b8:	82 e1       	ldi	r24, 0x12	; 18
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
  digitalWrite(SCL, 0);
    22c0:	83 e1       	ldi	r24, 0x13	; 19
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
}
    22c8:	00 00       	nop
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	1f 92       	push	r1
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    22dc:	8a eb       	ldi	r24, 0xBA	; 186
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	29 81       	ldd	r18, Y+1	; 0x01
    22e2:	22 0f       	add	r18, r18
    22e4:	fc 01       	movw	r30, r24
    22e6:	20 83       	st	Z, r18
}
    22e8:	00 00       	nop
    22ea:	0f 90       	pop	r0
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	08 95       	ret

000022f2 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <twi_setFrequency+0xa>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <twi_setFrequency+0xc>
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	69 83       	std	Y+1, r22	; 0x01
    2304:	7a 83       	std	Y+2, r23	; 0x02
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    230a:	08 eb       	ldi	r16, 0xB8	; 184
    230c:	10 e0       	ldi	r17, 0x00	; 0
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	94 e2       	ldi	r25, 0x24	; 36
    2312:	a4 ef       	ldi	r26, 0xF4	; 244
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	29 81       	ldd	r18, Y+1	; 0x01
    2318:	3a 81       	ldd	r19, Y+2	; 0x02
    231a:	4b 81       	ldd	r20, Y+3	; 0x03
    231c:	5c 81       	ldd	r21, Y+4	; 0x04
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <__udivmodsi4>
    2326:	da 01       	movw	r26, r20
    2328:	c9 01       	movw	r24, r18
    232a:	40 97       	sbiw	r24, 0x10	; 16
    232c:	a1 09       	sbc	r26, r1
    232e:	b1 09       	sbc	r27, r1
    2330:	b6 95       	lsr	r27
    2332:	a7 95       	ror	r26
    2334:	97 95       	ror	r25
    2336:	87 95       	ror	r24
    2338:	f8 01       	movw	r30, r16
    233a:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    233c:	00 00       	nop
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	08 95       	ret

00002350 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	00 d0       	rcall	.+0      	; 0x2356 <twi_readFrom+0x6>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <twi_readFrom+0x8>
    2358:	00 d0       	rcall	.+0      	; 0x235a <twi_readFrom+0xa>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	7c 83       	std	Y+4, r23	; 0x04
    2362:	6b 83       	std	Y+3, r22	; 0x03
    2364:	4d 83       	std	Y+5, r20	; 0x05
    2366:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	81 32       	cpi	r24, 0x21	; 33
    236c:	18 f0       	brcs	.+6      	; 0x2374 <twi_readFrom+0x24>
    return 0;
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	6b c0       	rjmp	.+214    	; 0x2448 <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    2372:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2374:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <twi_state>
    2378:	88 23       	and	r24, r24
    237a:	d9 f7       	brne	.-10     	; 0x2372 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <twi_state>
  twi_sendStop = sendStop;
    2382:	8e 81       	ldd	r24, Y+6	; 0x06
    2384:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2388:	8f ef       	ldi	r24, 0xFF	; 255
    238a:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    238e:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	81 50       	subi	r24, 0x01	; 1
    2396:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <twi_slarw>
  twi_slarw |= address << 1;
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	98 2f       	mov	r25, r24
    23ac:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <twi_slarw>
    23b0:	89 2b       	or	r24, r25
    23b2:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <twi_slarw>

  if (true == twi_inRepStart) {
    23b6:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <twi_inRepStart>
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	c1 f4       	brne	.+48     	; 0x23ee <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    23be:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    23c2:	8b eb       	ldi	r24, 0xBB	; 187
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	20 91 04 06 	lds	r18, 0x0604	; 0x800604 <twi_slarw>
    23ca:	fc 01       	movw	r30, r24
    23cc:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    23ce:	8c eb       	ldi	r24, 0xBC	; 188
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	80 81       	ld	r24, Z
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	88 70       	andi	r24, 0x08	; 8
    23dc:	99 27       	eor	r25, r25
    23de:	89 2b       	or	r24, r25
    23e0:	81 f7       	brne	.-32     	; 0x23c2 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    23e2:	8c eb       	ldi	r24, 0xBC	; 188
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	25 ec       	ldi	r18, 0xC5	; 197
    23e8:	fc 01       	movw	r30, r24
    23ea:	20 83       	st	Z, r18
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    23ee:	8c eb       	ldi	r24, 0xBC	; 188
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	25 ee       	ldi	r18, 0xE5	; 229
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <twi_readFrom+0xac>
    continue;
    23fa:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    23fc:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <twi_state>
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	d9 f3       	breq	.-10     	; 0x23fa <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    2404:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <twi_masterBufferIndex>
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	98 17       	cp	r25, r24
    240c:	18 f4       	brcc	.+6      	; 0x2414 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    240e:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <twi_masterBufferIndex>
    2412:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2414:	19 82       	std	Y+1, r1	; 0x01
    2416:	13 c0       	rjmp	.+38     	; 0x243e <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	29 81       	ldd	r18, Y+1	; 0x01
    2428:	22 2f       	mov	r18, r18
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	25 5f       	subi	r18, 0xF5	; 245
    242e:	39 4f       	sbci	r19, 0xF9	; 249
    2430:	f9 01       	movw	r30, r18
    2432:	20 81       	ld	r18, Z
    2434:	fc 01       	movw	r30, r24
    2436:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	99 81       	ldd	r25, Y+1	; 0x01
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	98 17       	cp	r25, r24
    2444:	48 f3       	brcs	.-46     	; 0x2418 <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2448:	26 96       	adiw	r28, 0x06	; 6
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    245a:	0f 93       	push	r16
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	27 97       	sbiw	r28, 0x07	; 7
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	8a 83       	std	Y+2, r24	; 0x02
    2472:	7c 83       	std	Y+4, r23	; 0x04
    2474:	6b 83       	std	Y+3, r22	; 0x03
    2476:	4d 83       	std	Y+5, r20	; 0x05
    2478:	2e 83       	std	Y+6, r18	; 0x06
    247a:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	81 32       	cpi	r24, 0x21	; 33
    2480:	18 f0       	brcs	.+6      	; 0x2488 <twi_writeTo+0x2e>
    return 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	76 c0       	rjmp	.+236    	; 0x2572 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    2486:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2488:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <twi_state>
    248c:	88 23       	and	r24, r24
    248e:	d9 f7       	brne	.-10     	; 0x2486 <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <twi_state>
  twi_sendStop = sendStop;
    2496:	8f 81       	ldd	r24, Y+7	; 0x07
    2498:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    24a2:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	13 c0       	rjmp	.+38     	; 0x24d6 <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	29 81       	ldd	r18, Y+1	; 0x01
    24b8:	22 2f       	mov	r18, r18
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4b 81       	ldd	r20, Y+3	; 0x03
    24be:	5c 81       	ldd	r21, Y+4	; 0x04
    24c0:	24 0f       	add	r18, r20
    24c2:	35 1f       	adc	r19, r21
    24c4:	f9 01       	movw	r30, r18
    24c6:	20 81       	ld	r18, Z
    24c8:	85 5f       	subi	r24, 0xF5	; 245
    24ca:	99 4f       	sbci	r25, 0xF9	; 249
    24cc:	fc 01       	movw	r30, r24
    24ce:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	99 81       	ldd	r25, Y+1	; 0x01
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	98 17       	cp	r25, r24
    24dc:	48 f3       	brcs	.-46     	; 0x24b0 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    24de:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <twi_slarw>
  twi_slarw |= address << 1;
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	98 2f       	mov	r25, r24
    24ee:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <twi_slarw>
    24f2:	89 2b       	or	r24, r25
    24f4:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    24f8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <twi_inRepStart>
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	c1 f4       	brne	.+48     	; 0x2530 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2500:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    2504:	8b eb       	ldi	r24, 0xBB	; 187
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	20 91 04 06 	lds	r18, 0x0604	; 0x800604 <twi_slarw>
    250c:	fc 01       	movw	r30, r24
    250e:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    2510:	8c eb       	ldi	r24, 0xBC	; 188
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	fc 01       	movw	r30, r24
    2516:	80 81       	ld	r24, Z
    2518:	88 2f       	mov	r24, r24
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	88 70       	andi	r24, 0x08	; 8
    251e:	99 27       	eor	r25, r25
    2520:	89 2b       	or	r24, r25
    2522:	81 f7       	brne	.-32     	; 0x2504 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2524:	8c eb       	ldi	r24, 0xBC	; 188
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	25 ec       	ldi	r18, 0xC5	; 197
    252a:	fc 01       	movw	r30, r24
    252c:	20 83       	st	Z, r18
    252e:	07 c0       	rjmp	.+14     	; 0x253e <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2530:	8c eb       	ldi	r24, 0xBC	; 188
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	25 ee       	ldi	r18, 0xE5	; 229
    2536:	fc 01       	movw	r30, r24
    2538:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    253a:	01 c0       	rjmp	.+2      	; 0x253e <twi_writeTo+0xe4>
    continue;
    253c:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    253e:	8e 81       	ldd	r24, Y+6	; 0x06
    2540:	88 23       	and	r24, r24
    2542:	21 f0       	breq	.+8      	; 0x254c <twi_writeTo+0xf2>
    2544:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <twi_state>
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c1 f3       	breq	.-16     	; 0x253c <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    254c:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <twi_error>
    2550:	8f 3f       	cpi	r24, 0xFF	; 255
    2552:	11 f4       	brne	.+4      	; 0x2558 <twi_writeTo+0xfe>
    return 0;	// success
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	0d c0       	rjmp	.+26     	; 0x2572 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    2558:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <twi_error>
    255c:	80 32       	cpi	r24, 0x20	; 32
    255e:	11 f4       	brne	.+4      	; 0x2564 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	07 c0       	rjmp	.+14     	; 0x2572 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    2564:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <twi_error>
    2568:	80 33       	cpi	r24, 0x30	; 48
    256a:	11 f4       	brne	.+4      	; 0x2570 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    2570:	84 e0       	ldi	r24, 0x04	; 4
}
    2572:	27 96       	adiw	r28, 0x07	; 7
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	00 d0       	rcall	.+0      	; 0x258c <twi_transmit+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <twi_transmit+0x8>
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	9b 83       	std	Y+3, r25	; 0x03
    2594:	8a 83       	std	Y+2, r24	; 0x02
    2596:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    2598:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <twi_txBufferLength>
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	82 0f       	add	r24, r18
    25a8:	93 1f       	adc	r25, r19
    25aa:	81 97       	sbiw	r24, 0x21	; 33
    25ac:	14 f0       	brlt	.+4      	; 0x25b2 <twi_transmit+0x2c>
    return 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	2c c0       	rjmp	.+88     	; 0x260a <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    25b2:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <twi_state>
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	11 f0       	breq	.+4      	; 0x25be <twi_transmit+0x38>
    return 2;
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	26 c0       	rjmp	.+76     	; 0x260a <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    25be:	19 82       	std	Y+1, r1	; 0x01
    25c0:	19 c0       	rjmp	.+50     	; 0x25f4 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    25c2:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <twi_txBufferLength>
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	82 0f       	add	r24, r18
    25d2:	93 1f       	adc	r25, r19
    25d4:	29 81       	ldd	r18, Y+1	; 0x01
    25d6:	22 2f       	mov	r18, r18
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a 81       	ldd	r20, Y+2	; 0x02
    25dc:	5b 81       	ldd	r21, Y+3	; 0x03
    25de:	24 0f       	add	r18, r20
    25e0:	35 1f       	adc	r19, r21
    25e2:	f9 01       	movw	r30, r18
    25e4:	20 81       	ld	r18, Z
    25e6:	83 5d       	subi	r24, 0xD3	; 211
    25e8:	99 4f       	sbci	r25, 0xF9	; 249
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	98 17       	cp	r25, r24
    25fa:	18 f3       	brcs	.-58     	; 0x25c2 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    25fc:	90 91 4e 06 	lds	r25, 0x064E	; 0x80064e <twi_txBufferLength>
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	89 0f       	add	r24, r25
    2604:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <twi_txBufferLength>
  
  return 0;
    2608:	80 e0       	ldi	r24, 0x00	; 0
}
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	08 95       	ret

00002618 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	00 d0       	rcall	.+0      	; 0x261e <twi_attachSlaveRxEvent+0x6>
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <twi_onSlaveReceive+0x1>
    262e:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <twi_onSlaveReceive>
}
    2632:	00 00       	nop
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	08 95       	ret

0000263e <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	00 d0       	rcall	.+0      	; 0x2644 <twi_attachSlaveTxEvent+0x6>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <twi_onSlaveTransmit+0x1>
    2654:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <twi_onSlaveTransmit>
}
    2658:	00 00       	nop
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	1f 92       	push	r1
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	88 23       	and	r24, r24
    2674:	31 f0       	breq	.+12     	; 0x2682 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2676:	8c eb       	ldi	r24, 0xBC	; 188
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	25 ec       	ldi	r18, 0xC5	; 197
    267c:	fc 01       	movw	r30, r24
    267e:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    2680:	05 c0       	rjmp	.+10     	; 0x268c <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2682:	8c eb       	ldi	r24, 0xBC	; 188
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	25 e8       	ldi	r18, 0x85	; 133
    2688:	fc 01       	movw	r30, r24
    268a:	20 83       	st	Z, r18
  }
}
    268c:	00 00       	nop
    268e:	0f 90       	pop	r0
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	08 95       	ret

00002696 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    269e:	8c eb       	ldi	r24, 0xBC	; 188
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	25 ed       	ldi	r18, 0xD5	; 213
    26a4:	fc 01       	movw	r30, r24
    26a6:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    26a8:	01 c0       	rjmp	.+2      	; 0x26ac <twi_stop+0x16>
    continue;
    26aa:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    26ac:	8c eb       	ldi	r24, 0xBC	; 188
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	fc 01       	movw	r30, r24
    26b2:	80 81       	ld	r24, Z
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	80 71       	andi	r24, 0x10	; 16
    26ba:	99 27       	eor	r25, r25
    26bc:	89 2b       	or	r24, r25
    26be:	a9 f7       	brne	.-22     	; 0x26aa <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    26c0:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <twi_state>
}
    26c4:	00 00       	nop
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	08 95       	ret

000026cc <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    26d4:	8c eb       	ldi	r24, 0xBC	; 188
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	25 ec       	ldi	r18, 0xC5	; 197
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    26de:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <twi_state>
}
    26e2:	00 00       	nop
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <__vector_24>:

ISR(TWI_vect)
{
    26ea:	1f 92       	push	r1
    26ec:	0f 92       	push	r0
    26ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    26f2:	0f 92       	push	r0
    26f4:	11 24       	eor	r1, r1
    26f6:	2f 93       	push	r18
    26f8:	3f 93       	push	r19
    26fa:	4f 93       	push	r20
    26fc:	5f 93       	push	r21
    26fe:	6f 93       	push	r22
    2700:	7f 93       	push	r23
    2702:	8f 93       	push	r24
    2704:	9f 93       	push	r25
    2706:	af 93       	push	r26
    2708:	bf 93       	push	r27
    270a:	ef 93       	push	r30
    270c:	ff 93       	push	r31
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    2716:	89 eb       	ldi	r24, 0xB9	; 185
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	fc 01       	movw	r30, r24
    271c:	80 81       	ld	r24, Z
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	88 7f       	andi	r24, 0xF8	; 248
    2724:	99 27       	eor	r25, r25
    2726:	09 2e       	mov	r0, r25
    2728:	00 0c       	add	r0, r0
    272a:	aa 0b       	sbc	r26, r26
    272c:	bb 0b       	sbc	r27, r27
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	28 ef       	ldi	r18, 0xF8	; 248
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	84 1b       	sub	r24, r20
    2738:	95 0b       	sbc	r25, r21
    273a:	28 17       	cp	r18, r24
    273c:	39 07       	cpc	r19, r25
    273e:	08 f4       	brcc	.+2      	; 0x2742 <__vector_24+0x58>
    2740:	17 c1       	rjmp	.+558    	; 0x2970 <__vector_24+0x286>
    2742:	8c 5c       	subi	r24, 0xCC	; 204
    2744:	9f 4f       	sbci	r25, 0xFF	; 255
    2746:	fc 01       	movw	r30, r24
    2748:	0c 94 12 2e 	jmp	0x5c24	; 0x5c24 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    274c:	8b eb       	ldi	r24, 0xBB	; 187
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	20 91 04 06 	lds	r18, 0x0604	; 0x800604 <twi_slarw>
    2754:	fc 01       	movw	r30, r24
    2756:	20 83       	st	Z, r18
      twi_reply(1);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      break;
    275e:	08 c1       	rjmp	.+528    	; 0x2970 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2760:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <twi_masterBufferIndex>
    2764:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <twi_masterBufferLength>
    2768:	98 17       	cp	r25, r24
    276a:	a0 f4       	brcc	.+40     	; 0x2794 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    276c:	8b eb       	ldi	r24, 0xBB	; 187
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	20 91 2b 06 	lds	r18, 0x062B	; 0x80062b <twi_masterBufferIndex>
    2774:	31 e0       	ldi	r19, 0x01	; 1
    2776:	32 0f       	add	r19, r18
    2778:	30 93 2b 06 	sts	0x062B, r19	; 0x80062b <twi_masterBufferIndex>
    277c:	22 2f       	mov	r18, r18
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	25 5f       	subi	r18, 0xF5	; 245
    2782:	39 4f       	sbci	r19, 0xF9	; 249
    2784:	f9 01       	movw	r30, r18
    2786:	20 81       	ld	r18, Z
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18
        twi_reply(1);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    2792:	ee c0       	rjmp	.+476    	; 0x2970 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2794:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <twi_sendStop>
    2798:	88 23       	and	r24, r24
    279a:	19 f0       	breq	.+6      	; 0x27a2 <__vector_24+0xb8>
          twi_stop();
    279c:	0e 94 4b 13 	call	0x2696	; 0x2696 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    27a0:	e7 c0       	rjmp	.+462    	; 0x2970 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    27a8:	8c eb       	ldi	r24, 0xBC	; 188
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	24 ea       	ldi	r18, 0xA4	; 164
    27ae:	fc 01       	movw	r30, r24
    27b0:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    27b2:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <twi_state>
	}
      }
      break;
    27b6:	dc c0       	rjmp	.+440    	; 0x2970 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    27b8:	80 e2       	ldi	r24, 0x20	; 32
    27ba:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_error>
      twi_stop();
    27be:	0e 94 4b 13 	call	0x2696	; 0x2696 <twi_stop>
      break;
    27c2:	d6 c0       	rjmp	.+428    	; 0x2970 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    27c4:	80 e3       	ldi	r24, 0x30	; 48
    27c6:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_error>
      twi_stop();
    27ca:	0e 94 4b 13 	call	0x2696	; 0x2696 <twi_stop>
      break;
    27ce:	d0 c0       	rjmp	.+416    	; 0x2970 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    27d0:	88 e3       	ldi	r24, 0x38	; 56
    27d2:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_error>
      twi_releaseBus();
    27d6:	0e 94 66 13 	call	0x26cc	; 0x26cc <twi_releaseBus>
      break;
    27da:	ca c0       	rjmp	.+404    	; 0x2970 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    27dc:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <twi_masterBufferIndex>
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	98 0f       	add	r25, r24
    27e4:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <twi_masterBufferIndex>
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	2b eb       	ldi	r18, 0xBB	; 187
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	f9 01       	movw	r30, r18
    27f2:	20 81       	ld	r18, Z
    27f4:	85 5f       	subi	r24, 0xF5	; 245
    27f6:	99 4f       	sbci	r25, 0xF9	; 249
    27f8:	fc 01       	movw	r30, r24
    27fa:	20 83       	st	Z, r18
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    27fc:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <twi_masterBufferIndex>
    2800:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <twi_masterBufferLength>
    2804:	98 17       	cp	r25, r24
    2806:	20 f4       	brcc	.+8      	; 0x2810 <__vector_24+0x126>
        twi_reply(1);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    280e:	b0 c0       	rjmp	.+352    	; 0x2970 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      }
      break;
    2816:	ac c0       	rjmp	.+344    	; 0x2970 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2818:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <twi_masterBufferIndex>
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	98 0f       	add	r25, r24
    2820:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <twi_masterBufferIndex>
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	2b eb       	ldi	r18, 0xBB	; 187
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	f9 01       	movw	r30, r18
    282e:	20 81       	ld	r18, Z
    2830:	85 5f       	subi	r24, 0xF5	; 245
    2832:	99 4f       	sbci	r25, 0xF9	; 249
    2834:	fc 01       	movw	r30, r24
    2836:	20 83       	st	Z, r18
	if (twi_sendStop)
    2838:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <twi_sendStop>
    283c:	88 23       	and	r24, r24
    283e:	19 f0       	breq	.+6      	; 0x2846 <__vector_24+0x15c>
          twi_stop();
    2840:	0e 94 4b 13 	call	0x2696	; 0x2696 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    2844:	95 c0       	rjmp	.+298    	; 0x2970 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    284c:	8c eb       	ldi	r24, 0xBC	; 188
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	24 ea       	ldi	r18, 0xA4	; 164
    2852:	fc 01       	movw	r30, r24
    2854:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    2856:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <twi_state>
	}    
	break;
    285a:	8a c0       	rjmp	.+276    	; 0x2970 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    285c:	0e 94 4b 13 	call	0x2696	; 0x2696 <twi_stop>
      break;
    2860:	87 c0       	rjmp	.+270    	; 0x2970 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2868:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <twi_rxBufferIndex>
      twi_reply(1);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      break;
    2872:	7e c0       	rjmp	.+252    	; 0x2970 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2874:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <twi_rxBufferIndex>
    2878:	80 32       	cpi	r24, 0x20	; 32
    287a:	a0 f4       	brcc	.+40     	; 0x28a4 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    287c:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <twi_rxBufferIndex>
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	98 0f       	add	r25, r24
    2884:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <twi_rxBufferIndex>
    2888:	88 2f       	mov	r24, r24
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	2b eb       	ldi	r18, 0xBB	; 187
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	f9 01       	movw	r30, r18
    2892:	20 81       	ld	r18, Z
    2894:	81 5b       	subi	r24, 0xB1	; 177
    2896:	99 4f       	sbci	r25, 0xF9	; 249
    2898:	fc 01       	movw	r30, r24
    289a:	20 83       	st	Z, r18
        twi_reply(1);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    28a2:	66 c0       	rjmp	.+204    	; 0x2970 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      }
      break;
    28aa:	62 c0       	rjmp	.+196    	; 0x2970 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    28ac:	0e 94 66 13 	call	0x26cc	; 0x26cc <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    28b0:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <twi_rxBufferIndex>
    28b4:	80 32       	cpi	r24, 0x20	; 32
    28b6:	40 f4       	brcc	.+16     	; 0x28c8 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    28b8:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <twi_rxBufferIndex>
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	81 5b       	subi	r24, 0xB1	; 177
    28c2:	99 4f       	sbci	r25, 0xF9	; 249
    28c4:	fc 01       	movw	r30, r24
    28c6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    28c8:	20 91 09 06 	lds	r18, 0x0609	; 0x800609 <twi_onSlaveReceive>
    28cc:	30 91 0a 06 	lds	r19, 0x060A	; 0x80060a <twi_onSlaveReceive+0x1>
    28d0:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <twi_rxBufferIndex>
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	bc 01       	movw	r22, r24
    28da:	8f e4       	ldi	r24, 0x4F	; 79
    28dc:	96 e0       	ldi	r25, 0x06	; 6
    28de:	f9 01       	movw	r30, r18
    28e0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    28e2:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <twi_rxBufferIndex>
      break;
    28e6:	44 c0       	rjmp	.+136    	; 0x2970 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      break;
    28ee:	40 c0       	rjmp	.+128    	; 0x2970 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    28f0:	84 e0       	ldi	r24, 0x04	; 4
    28f2:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    28f6:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    28fa:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    28fe:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <twi_onSlaveTransmit>
    2902:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <twi_onSlaveTransmit+0x1>
    2906:	fc 01       	movw	r30, r24
    2908:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    290a:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <twi_txBufferLength>
    290e:	88 23       	and	r24, r24
    2910:	29 f4       	brne	.+10     	; 0x291c <__vector_24+0x232>
        twi_txBufferLength = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2918:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    291c:	8b eb       	ldi	r24, 0xBB	; 187
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <twi_txBufferIndex>
    2924:	31 e0       	ldi	r19, 0x01	; 1
    2926:	32 0f       	add	r19, r18
    2928:	30 93 4d 06 	sts	0x064D, r19	; 0x80064d <twi_txBufferIndex>
    292c:	22 2f       	mov	r18, r18
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	23 5d       	subi	r18, 0xD3	; 211
    2932:	39 4f       	sbci	r19, 0xF9	; 249
    2934:	f9 01       	movw	r30, r18
    2936:	20 81       	ld	r18, Z
    2938:	fc 01       	movw	r30, r24
    293a:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    293c:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <twi_txBufferIndex>
    2940:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <twi_txBufferLength>
    2944:	98 17       	cp	r25, r24
    2946:	20 f4       	brcc	.+8      	; 0x2950 <__vector_24+0x266>
        twi_reply(1);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    294e:	10 c0       	rjmp	.+32     	; 0x2970 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      }
      break;
    2956:	0c c0       	rjmp	.+24     	; 0x2970 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	0e 94 32 13 	call	0x2664	; 0x2664 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    295e:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <twi_state>
      break;
    2962:	06 c0       	rjmp	.+12     	; 0x2970 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2964:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <twi_error>
      twi_stop();
    2968:	0e 94 4b 13 	call	0x2696	; 0x2696 <twi_stop>
      break;
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    296e:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2970:	00 00       	nop
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	bf 91       	pop	r27
    297c:	af 91       	pop	r26
    297e:	9f 91       	pop	r25
    2980:	8f 91       	pop	r24
    2982:	7f 91       	pop	r23
    2984:	6f 91       	pop	r22
    2986:	5f 91       	pop	r21
    2988:	4f 91       	pop	r20
    298a:	3f 91       	pop	r19
    298c:	2f 91       	pop	r18
    298e:	0f 90       	pop	r0
    2990:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2994:	0f 90       	pop	r0
    2996:	1f 90       	pop	r1
    2998:	18 95       	reti

0000299a <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <_ZN7TwoWireC1Ev+0x6>
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_ZN6StreamC1Ev>
    29b0:	2b ee       	ldi	r18, 0xEB	; 235
    29b2:	31 e0       	ldi	r19, 0x01	; 1
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	fc 01       	movw	r30, r24
    29ba:	31 83       	std	Z+1, r19	; 0x01
    29bc:	20 83       	st	Z, r18
{
}
    29be:	00 00       	nop
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <_ZN7TwoWire5beginEv+0x6>
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    29d8:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    29dc:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    29e0:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    29e4:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    29e8:	0e 94 1c 11 	call	0x2238	; 0x2238 <twi_init>
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
    29ec:	89 e0       	ldi	r24, 0x09	; 9
    29ee:	98 e1       	ldi	r25, 0x18	; 24
    29f0:	0e 94 1f 13 	call	0x263e	; 0x263e <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
    29f4:	8c eb       	ldi	r24, 0xBC	; 188
    29f6:	97 e1       	ldi	r25, 0x17	; 23
    29f8:	0e 94 0c 13 	call	0x2618	; 0x2618 <twi_attachSlaveRxEvent>
}
    29fc:	00 00       	nop
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	08 95       	ret

00002a08 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <_ZN7TwoWire5beginEh+0x6>
    2a0e:	1f 92       	push	r1
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
    2a18:	6b 83       	std	Y+3, r22	; 0x03
  begin();
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN7TwoWire5beginEv>
  twi_setAddress(address);
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	0e 94 68 11 	call	0x22d0	; 0x22d0 <twi_setAddress>
}
    2a28:	00 00       	nop
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <_ZN7TwoWire5beginEi+0x6>
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <_ZN7TwoWire5beginEi+0x8>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	7c 83       	std	Y+4, r23	; 0x04
    2a48:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    2a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	62 2f       	mov	r22, r18
    2a52:	0e 94 04 15 	call	0x2a08	; 0x2a08 <_ZN7TwoWire5beginEh>
}
    2a56:	00 00       	nop
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	08 95       	ret

00002a66 <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <_ZN7TwoWire3endEv+0x6>
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    2a74:	0e 94 4f 11 	call	0x229e	; 0x229e <twi_disable>
}
    2a78:	00 00       	nop
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	08 95       	ret

00002a84 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <_ZN7TwoWire8setClockEm+0x6>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <_ZN7TwoWire8setClockEm+0x8>
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <_ZN7TwoWire8setClockEm+0xa>
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	4b 83       	std	Y+3, r20	; 0x03
    2a98:	5c 83       	std	Y+4, r21	; 0x04
    2a9a:	6d 83       	std	Y+5, r22	; 0x05
    2a9c:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	ad 81       	ldd	r26, Y+5	; 0x05
    2aa4:	be 81       	ldd	r27, Y+6	; 0x06
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 79 11 	call	0x22f2	; 0x22f2 <twi_setFrequency>
}
    2aae:	00 00       	nop
    2ab0:	26 96       	adiw	r28, 0x06	; 6
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	08 95       	ret

00002ac2 <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    2ac2:	cf 92       	push	r12
    2ac4:	ef 92       	push	r14
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	2b 97       	sbiw	r28, 0x0b	; 11
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	9b 83       	std	Y+3, r25	; 0x03
    2ae0:	8a 83       	std	Y+2, r24	; 0x02
    2ae2:	6c 83       	std	Y+4, r22	; 0x04
    2ae4:	4d 83       	std	Y+5, r20	; 0x05
    2ae6:	0e 83       	std	Y+6, r16	; 0x06
    2ae8:	1f 83       	std	Y+7, r17	; 0x07
    2aea:	28 87       	std	Y+8, r18	; 0x08
    2aec:	39 87       	std	Y+9, r19	; 0x09
    2aee:	ea 86       	std	Y+10, r14	; 0x0a
    2af0:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    2af2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af4:	88 23       	and	r24, r24
    2af6:	e9 f1       	breq	.+122    	; 0x2b72 <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	6c 81       	ldd	r22, Y+4	; 0x04
    2afe:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    2b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b04:	84 30       	cpi	r24, 0x04	; 4
    2b06:	10 f0       	brcs	.+4      	; 0x2b0c <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0e:	9f ef       	ldi	r25, 0xFF	; 255
    2b10:	98 0f       	add	r25, r24
    2b12:	9a 87       	std	Y+10, r25	; 0x0a
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	88 23       	and	r24, r24
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	99 23       	and	r25, r25
    2b1e:	21 f1       	breq	.+72     	; 0x2b68 <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	9b 81       	ldd	r25, Y+3	; 0x03
    2b24:	fc 01       	movw	r30, r24
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	20 81       	ld	r18, Z
    2b2e:	31 81       	ldd	r19, Z+1	; 0x01
    2b30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	ac 01       	movw	r20, r24
    2b38:	44 0f       	add	r20, r20
    2b3a:	55 1f       	adc	r21, r21
    2b3c:	44 0f       	add	r20, r20
    2b3e:	55 1f       	adc	r21, r21
    2b40:	44 0f       	add	r20, r20
    2b42:	55 1f       	adc	r21, r21
    2b44:	8e 81       	ldd	r24, Y+6	; 0x06
    2b46:	9f 81       	ldd	r25, Y+7	; 0x07
    2b48:	a8 85       	ldd	r26, Y+8	; 0x08
    2b4a:	b9 85       	ldd	r27, Y+9	; 0x09
    2b4c:	04 c0       	rjmp	.+8      	; 0x2b56 <_ZN7TwoWire11requestFromEhhmhh+0x94>
    2b4e:	b6 95       	lsr	r27
    2b50:	a7 95       	ror	r26
    2b52:	97 95       	ror	r25
    2b54:	87 95       	ror	r24
    2b56:	4a 95       	dec	r20
    2b58:	d2 f7       	brpl	.-12     	; 0x2b4e <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    2b5a:	48 2f       	mov	r20, r24
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	64 2f       	mov	r22, r20
    2b62:	f9 01       	movw	r30, r18
    2b64:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2b66:	d2 cf       	rjmp	.-92     	; 0x2b0c <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	81 32       	cpi	r24, 0x21	; 33
    2b76:	10 f0       	brcs	.+4      	; 0x2b7c <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    2b78:	80 e2       	ldi	r24, 0x20	; 32
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2b7c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b7e:	4d 81       	ldd	r20, Y+5	; 0x05
    2b80:	61 e7       	ldi	r22, 0x71	; 113
    2b82:	76 e0       	ldi	r23, 0x06	; 6
    2b84:	8c 81       	ldd	r24, Y+4	; 0x04
    2b86:	0e 94 a8 11 	call	0x2350	; 0x2350 <twi_readFrom>
    2b8a:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2b8c:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>

  return read;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b98:	2b 96       	adiw	r28, 0x0b	; 11
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ef 90       	pop	r14
    2bae:	cf 90       	pop	r12
    2bb0:	08 95       	ret

00002bb2 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    2bb2:	cf 92       	push	r12
    2bb4:	ef 92       	push	r14
    2bb6:	0f 93       	push	r16
    2bb8:	1f 93       	push	r17
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <_ZN7TwoWire11requestFromEhhh+0xe>
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <_ZN7TwoWire11requestFromEhhh+0x10>
    2bc2:	1f 92       	push	r1
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	9a 83       	std	Y+2, r25	; 0x02
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	6b 83       	std	Y+3, r22	; 0x03
    2bce:	4c 83       	std	Y+4, r20	; 0x04
    2bd0:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	cd 80       	ldd	r12, Y+5	; 0x05
    2bd8:	e1 2c       	mov	r14, r1
    2bda:	00 e0       	ldi	r16, 0x00	; 0
    2bdc:	10 e0       	ldi	r17, 0x00	; 0
    2bde:	98 01       	movw	r18, r16
    2be0:	4c 81       	ldd	r20, Y+4	; 0x04
    2be2:	6b 81       	ldd	r22, Y+3	; 0x03
    2be4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZN7TwoWire11requestFromEhhmhh>
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	ef 90       	pop	r14
    2bfc:	cf 90       	pop	r12
    2bfe:	08 95       	ret

00002c00 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <_ZN7TwoWire11requestFromEhh+0x6>
    2c06:	00 d0       	rcall	.+0      	; 0x2c08 <_ZN7TwoWire11requestFromEhh+0x8>
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	9a 83       	std	Y+2, r25	; 0x02
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	6b 83       	std	Y+3, r22	; 0x03
    2c12:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	9a 81       	ldd	r25, Y+2	; 0x02
    2c18:	21 e0       	ldi	r18, 0x01	; 1
    2c1a:	4c 81       	ldd	r20, Y+4	; 0x04
    2c1c:	6b 81       	ldd	r22, Y+3	; 0x03
    2c1e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_ZN7TwoWire11requestFromEhhh>
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	08 95       	ret

00002c30 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <_ZN7TwoWire11requestFromEii+0x6>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <_ZN7TwoWire11requestFromEii+0x8>
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <_ZN7TwoWire11requestFromEii+0xa>
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	7c 83       	std	Y+4, r23	; 0x04
    2c44:	6b 83       	std	Y+3, r22	; 0x03
    2c46:	5e 83       	std	Y+6, r21	; 0x06
    2c48:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2c4a:	4d 81       	ldd	r20, Y+5	; 0x05
    2c4c:	3b 81       	ldd	r19, Y+3	; 0x03
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	21 e0       	ldi	r18, 0x01	; 1
    2c54:	63 2f       	mov	r22, r19
    2c56:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_ZN7TwoWire11requestFromEhhh>
}
    2c5a:	26 96       	adiw	r28, 0x06	; 6
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	08 95       	ret

00002c6c <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	28 97       	sbiw	r28, 0x08	; 8
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	7c 83       	std	Y+4, r23	; 0x04
    2c86:	6b 83       	std	Y+3, r22	; 0x03
    2c88:	5e 83       	std	Y+6, r21	; 0x06
    2c8a:	4d 83       	std	Y+5, r20	; 0x05
    2c8c:	38 87       	std	Y+8, r19	; 0x08
    2c8e:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    2c90:	2f 81       	ldd	r18, Y+7	; 0x07
    2c92:	4d 81       	ldd	r20, Y+5	; 0x05
    2c94:	3b 81       	ldd	r19, Y+3	; 0x03
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	63 2f       	mov	r22, r19
    2c9c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_ZN7TwoWire11requestFromEhhh>
}
    2ca0:	28 96       	adiw	r28, 0x08	; 8
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	08 95       	ret

00002cb2 <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <_ZN7TwoWire17beginTransmissionEh+0x6>
    2cb8:	1f 92       	push	r1
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2cd0:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2cd4:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>
}
    2cd8:	00 00       	nop
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	08 95       	ret

00002ce6 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <_ZN7TwoWire17beginTransmissionEi+0x6>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <_ZN7TwoWire17beginTransmissionEi+0x8>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	7c 83       	std	Y+4, r23	; 0x04
    2cf8:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    2cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	62 2f       	mov	r22, r18
    2d02:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN7TwoWire17beginTransmissionEh>
}
    2d06:	00 00       	nop
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2d16:	0f 93       	push	r16
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <_ZN7TwoWire15endTransmissionEh+0x8>
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <_ZN7TwoWire15endTransmissionEh+0xa>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	9b 83       	std	Y+3, r25	; 0x03
    2d26:	8a 83       	std	Y+2, r24	; 0x02
    2d28:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2d2a:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>
    2d2e:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <_ZN7TwoWire9txAddressE>
    2d32:	0c 81       	ldd	r16, Y+4	; 0x04
    2d34:	21 e0       	ldi	r18, 0x01	; 1
    2d36:	49 2f       	mov	r20, r25
    2d38:	64 e9       	ldi	r22, 0x94	; 148
    2d3a:	76 e0       	ldi	r23, 0x06	; 6
    2d3c:	0e 94 2d 12 	call	0x245a	; 0x245a <twi_writeTo>
    2d40:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2d42:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2d46:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    2d4a:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <_ZN7TwoWire12transmittingE>
  return ret;
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <_ZN7TwoWire15endTransmissionEv+0x6>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	9a 83       	std	Y+2, r25	; 0x02
    2d6c:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN7TwoWire15endTransmissionEh>
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <_ZN7TwoWire5writeEh+0x6>
    2d88:	1f 92       	push	r1
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2d94:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <_ZN7TwoWire12transmittingE>
    2d98:	88 23       	and	r24, r24
    2d9a:	01 f1       	breq	.+64     	; 0x2ddc <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2d9c:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>
    2da0:	80 32       	cpi	r24, 0x20	; 32
    2da2:	48 f0       	brcs	.+18     	; 0x2db6 <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	9a 81       	ldd	r25, Y+2	; 0x02
    2da8:	61 e0       	ldi	r22, 0x01	; 1
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN5Print13setWriteErrorEi>
      return 0;
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	1a c0       	rjmp	.+52     	; 0x2dea <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2db6:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc0:	8c 56       	subi	r24, 0x6C	; 108
    2dc2:	99 4f       	sbci	r25, 0xF9	; 249
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	20 83       	st	Z, r18
    ++txBufferIndex;
    2dc8:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2dd2:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
    2dd6:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2ddc:	ce 01       	movw	r24, r28
    2dde:	03 96       	adiw	r24, 0x03	; 3
    2de0:	61 e0       	ldi	r22, 0x01	; 1
    2de2:	0e 94 c3 12 	call	0x2586	; 0x2586 <twi_transmit>
  }
  return 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	08 95       	ret

00002df6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	28 97       	sbiw	r28, 0x08	; 8
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
    2e0e:	7e 83       	std	Y+6, r23	; 0x06
    2e10:	6d 83       	std	Y+5, r22	; 0x05
    2e12:	58 87       	std	Y+8, r21	; 0x08
    2e14:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    2e16:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <_ZN7TwoWire12transmittingE>
    2e1a:	88 23       	and	r24, r24
    2e1c:	21 f1       	breq	.+72     	; 0x2e66 <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e1e:	1a 82       	std	Y+2, r1	; 0x02
    2e20:	19 82       	std	Y+1, r1	; 0x01
    2e22:	29 81       	ldd	r18, Y+1	; 0x01
    2e24:	3a 81       	ldd	r19, Y+2	; 0x02
    2e26:	8f 81       	ldd	r24, Y+7	; 0x07
    2e28:	98 85       	ldd	r25, Y+8	; 0x08
    2e2a:	28 17       	cp	r18, r24
    2e2c:	39 07       	cpc	r19, r25
    2e2e:	08 f5       	brcc	.+66     	; 0x2e72 <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	20 81       	ld	r18, Z
    2e3e:	31 81       	ldd	r19, Z+1	; 0x01
    2e40:	4d 81       	ldd	r20, Y+5	; 0x05
    2e42:	5e 81       	ldd	r21, Y+6	; 0x06
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	84 0f       	add	r24, r20
    2e4a:	95 1f       	adc	r25, r21
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	40 81       	ld	r20, Z
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	64 2f       	mov	r22, r20
    2e56:	f9 01       	movw	r30, r18
    2e58:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	de cf       	rjmp	.-68     	; 0x2e22 <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2e66:	2f 81       	ldd	r18, Y+7	; 0x07
    2e68:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6c:	62 2f       	mov	r22, r18
    2e6e:	0e 94 c3 12 	call	0x2586	; 0x2586 <twi_transmit>
  }
  return quantity;
    2e72:	8f 81       	ldd	r24, Y+7	; 0x07
    2e74:	98 85       	ldd	r25, Y+8	; 0x08
}
    2e76:	28 96       	adiw	r28, 0x08	; 8
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	08 95       	ret

00002e88 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <_ZN7TwoWire9availableEv+0x6>
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2e96:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	a9 01       	movw	r20, r18
    2ea8:	48 1b       	sub	r20, r24
    2eaa:	59 0b       	sbc	r21, r25
    2eac:	ca 01       	movw	r24, r20
}
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <_ZN7TwoWire4readEv+0x6>
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <_ZN7TwoWire4readEv+0x8>
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	9c 83       	std	Y+4, r25	; 0x04
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2ec8:	8f ef       	ldi	r24, 0xFF	; 255
    2eca:	9f ef       	ldi	r25, 0xFF	; 255
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2ed0:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2ed4:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>
    2ed8:	98 17       	cp	r25, r24
    2eda:	88 f4       	brcc	.+34     	; 0x2efe <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    2edc:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	8f 58       	subi	r24, 0x8F	; 143
    2ee6:	99 4f       	sbci	r25, 0xF9	; 249
    2ee8:	fc 01       	movw	r30, r24
    2eea:	80 81       	ld	r24, Z
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    2ef4:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <_ZN7TwoWire4peekEv+0x6>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <_ZN7TwoWire4peekEv+0x8>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2f20:	8f ef       	ldi	r24, 0xFF	; 255
    2f22:	9f ef       	ldi	r25, 0xFF	; 255
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    2f28:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2f2c:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>
    2f30:	98 17       	cp	r25, r24
    2f32:	60 f4       	brcc	.+24     	; 0x2f4c <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    2f34:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	8f 58       	subi	r24, 0x8F	; 143
    2f3e:	99 4f       	sbci	r25, 0xF9	; 249
    2f40:	fc 01       	movw	r30, r24
    2f42:	80 81       	ld	r24, Z
    2f44:	88 2f       	mov	r24, r24
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	08 95       	ret

00002f5e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <_ZN7TwoWire5flushEv+0x6>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    2f6c:	00 00       	nop
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	df 91       	pop	r29
    2f74:	cf 91       	pop	r28
    2f76:	08 95       	ret

00002f78 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2f80:	1f 92       	push	r1
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	9b 83       	std	Y+3, r25	; 0x03
    2f88:	8a 83       	std	Y+2, r24	; 0x02
    2f8a:	7d 83       	std	Y+5, r23	; 0x05
    2f8c:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2f8e:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_ZN7TwoWire14user_onReceiveE>
    2f92:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <_ZN7TwoWire14user_onReceiveE+0x1>
    2f96:	89 2b       	or	r24, r25
    2f98:	89 f1       	breq	.+98     	; 0x2ffc <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2f9a:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
    2f9e:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>
    2fa2:	98 17       	cp	r25, r24
    2fa4:	68 f1       	brcs	.+90     	; 0x3000 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2fa6:	19 82       	std	Y+1, r1	; 0x01
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb2:	28 17       	cp	r18, r24
    2fb4:	39 07       	cpc	r19, r25
    2fb6:	a4 f4       	brge	.+40     	; 0x2fe0 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	29 81       	ldd	r18, Y+1	; 0x01
    2fc0:	22 2f       	mov	r18, r18
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	4a 81       	ldd	r20, Y+2	; 0x02
    2fc6:	5b 81       	ldd	r21, Y+3	; 0x03
    2fc8:	24 0f       	add	r18, r20
    2fca:	35 1f       	adc	r19, r21
    2fcc:	f9 01       	movw	r30, r18
    2fce:	20 81       	ld	r18, Z
    2fd0:	8f 58       	subi	r24, 0x8F	; 143
    2fd2:	99 4f       	sbci	r25, 0xF9	; 249
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	8f 5f       	subi	r24, 0xFF	; 255
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	e4 cf       	rjmp	.-56     	; 0x2fa8 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2fe0:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe6:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    2fea:	20 91 b9 06 	lds	r18, 0x06B9	; 0x8006b9 <_ZN7TwoWire14user_onReceiveE>
    2fee:	30 91 ba 06 	lds	r19, 0x06BA	; 0x8006ba <_ZN7TwoWire14user_onReceiveE+0x1>
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff6:	f9 01       	movw	r30, r18
    2ff8:	09 95       	icall
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    2ffc:	00 00       	nop
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    3000:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret

00003012 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    301a:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <_ZN7TwoWire14user_onRequestE>
    301e:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <_ZN7TwoWire14user_onRequestE+0x1>
    3022:	89 2b       	or	r24, r25
    3024:	59 f0       	breq	.+22     	; 0x303c <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    3026:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    302a:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    302e:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <_ZN7TwoWire14user_onRequestE>
    3032:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <_ZN7TwoWire14user_onRequestE+0x1>
    3036:	fc 01       	movw	r30, r24
    3038:	09 95       	icall
    303a:	01 c0       	rjmp	.+2      	; 0x303e <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    303c:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	08 95       	ret

00003044 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	00 d0       	rcall	.+0      	; 0x304a <_ZN7TwoWire9onReceiveEPFviE+0x6>
    304a:	00 d0       	rcall	.+0      	; 0x304c <_ZN7TwoWire9onReceiveEPFviE+0x8>
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	7c 83       	std	Y+4, r23	; 0x04
    3056:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	9c 81       	ldd	r25, Y+4	; 0x04
    305c:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <_ZN7TwoWire14user_onReceiveE+0x1>
    3060:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <_ZN7TwoWire14user_onReceiveE>
}
    3064:	00 00       	nop
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	08 95       	ret

00003074 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	00 d0       	rcall	.+0      	; 0x307a <_ZN7TwoWire9onRequestEPFvvE+0x6>
    307a:	00 d0       	rcall	.+0      	; 0x307c <_ZN7TwoWire9onRequestEPFvvE+0x8>
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	9a 83       	std	Y+2, r25	; 0x02
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	7c 83       	std	Y+4, r23	; 0x04
    3086:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	9c 81       	ldd	r25, Y+4	; 0x04
    308c:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <_ZN7TwoWire14user_onRequestE+0x1>
    3090:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <_ZN7TwoWire14user_onRequestE>
}
    3094:	00 00       	nop
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	df 91       	pop	r29
    30a0:	cf 91       	pop	r28
    30a2:	08 95       	ret

000030a4 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <_Z41__static_initialization_and_destruction_0ii+0x6>
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <_Z41__static_initialization_and_destruction_0ii+0x8>
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	7c 83       	std	Y+4, r23	; 0x04
    30b6:	6b 83       	std	Y+3, r22	; 0x03
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	41 f4       	brne	.+16     	; 0x30d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	21 f4       	brne	.+8      	; 0x30d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    30c8:	8b eb       	ldi	r24, 0xBB	; 187
    30ca:	96 e0       	ldi	r25, 0x06	; 6
    30cc:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN7TwoWireC1Ev>
    30d0:	00 00       	nop
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	08 95       	ret

000030e0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	6f ef       	ldi	r22, 0xFF	; 255
    30ea:	7f ef       	ldi	r23, 0xFF	; 255
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 52 18 	call	0x30a4	; 0x30a4 <_Z41__static_initialization_and_destruction_0ii>
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	08 95       	ret

000030fa <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <_ZN5PrintaSERKS_+0x6>
    3100:	00 d0       	rcall	.+0      	; 0x3102 <_ZN5PrintaSERKS_+0x8>
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	7c 83       	std	Y+4, r23	; 0x04
    310c:	6b 83       	std	Y+3, r22	; 0x03
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	fc 01       	movw	r30, r24
    3114:	22 81       	ldd	r18, Z+2	; 0x02
    3116:	33 81       	ldd	r19, Z+3	; 0x03
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	fc 01       	movw	r30, r24
    311e:	33 83       	std	Z+3, r19	; 0x03
    3120:	22 83       	std	Z+2, r18	; 0x02
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	9a 81       	ldd	r25, Y+2	; 0x02
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	08 95       	ret

00003134 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	00 d0       	rcall	.+0      	; 0x313a <_ZN6StreamaSERKS_+0x6>
    313a:	00 d0       	rcall	.+0      	; 0x313c <_ZN6StreamaSERKS_+0x8>
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	7c 83       	std	Y+4, r23	; 0x04
    3146:	6b 83       	std	Y+3, r22	; 0x03
    3148:	2b 81       	ldd	r18, Y+3	; 0x03
    314a:	3c 81       	ldd	r19, Y+4	; 0x04
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	b9 01       	movw	r22, r18
    3152:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_ZN5PrintaSERKS_>
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	9c 81       	ldd	r25, Y+4	; 0x04
    315a:	fc 01       	movw	r30, r24
    315c:	84 81       	ldd	r24, Z+4	; 0x04
    315e:	95 81       	ldd	r25, Z+5	; 0x05
    3160:	a6 81       	ldd	r26, Z+6	; 0x06
    3162:	b7 81       	ldd	r27, Z+7	; 0x07
    3164:	29 81       	ldd	r18, Y+1	; 0x01
    3166:	3a 81       	ldd	r19, Y+2	; 0x02
    3168:	f9 01       	movw	r30, r18
    316a:	84 83       	std	Z+4, r24	; 0x04
    316c:	95 83       	std	Z+5, r25	; 0x05
    316e:	a6 83       	std	Z+6, r26	; 0x06
    3170:	b7 83       	std	Z+7, r27	; 0x07
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	fc 01       	movw	r30, r24
    3178:	80 85       	ldd	r24, Z+8	; 0x08
    317a:	91 85       	ldd	r25, Z+9	; 0x09
    317c:	a2 85       	ldd	r26, Z+10	; 0x0a
    317e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3180:	29 81       	ldd	r18, Y+1	; 0x01
    3182:	3a 81       	ldd	r19, Y+2	; 0x02
    3184:	f9 01       	movw	r30, r18
    3186:	80 87       	std	Z+8, r24	; 0x08
    3188:	91 87       	std	Z+9, r25	; 0x09
    318a:	a2 87       	std	Z+10, r26	; 0x0a
    318c:	b3 87       	std	Z+11, r27	; 0x0b
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	08 95       	ret

000031a0 <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <_ZN13Adafruit_FONAaSERKS_+0x6>
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <_ZN13Adafruit_FONAaSERKS_+0x8>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	7c 83       	std	Y+4, r23	; 0x04
    31b2:	6b 83       	std	Y+3, r22	; 0x03
    31b4:	2b 81       	ldd	r18, Y+3	; 0x03
    31b6:	3c 81       	ldd	r19, Y+4	; 0x04
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	b9 01       	movw	r22, r18
    31be:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN6StreamaSERKS_>
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	fc 01       	movw	r30, r24
    31c8:	24 85       	ldd	r18, Z+12	; 0x0c
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9a 81       	ldd	r25, Y+2	; 0x02
    31ce:	fc 01       	movw	r30, r24
    31d0:	24 87       	std	Z+12, r18	; 0x0c
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	fc 01       	movw	r30, r24
    31d8:	25 85       	ldd	r18, Z+13	; 0x0d
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	fc 01       	movw	r30, r24
    31e0:	25 87       	std	Z+13, r18	; 0x0d
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	ac 01       	movw	r20, r24
    31e8:	42 5f       	subi	r20, 0xF2	; 242
    31ea:	5f 4f       	sbci	r21, 0xFF	; 255
    31ec:	8e ef       	ldi	r24, 0xFE	; 254
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	2b 81       	ldd	r18, Y+3	; 0x03
    31f2:	3c 81       	ldd	r19, Y+4	; 0x04
    31f4:	22 5f       	subi	r18, 0xF2	; 242
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	8f 3f       	cpi	r24, 0xFF	; 255
    31fa:	ff ef       	ldi	r31, 0xFF	; 255
    31fc:	9f 07       	cpc	r25, r31
    31fe:	51 f0       	breq	.+20     	; 0x3214 <_ZN13Adafruit_FONAaSERKS_+0x74>
    3200:	f9 01       	movw	r30, r18
    3202:	60 81       	ld	r22, Z
    3204:	fa 01       	movw	r30, r20
    3206:	60 83       	st	Z, r22
    3208:	4f 5f       	subi	r20, 0xFF	; 255
    320a:	5f 4f       	sbci	r21, 0xFF	; 255
    320c:	2f 5f       	subi	r18, 0xFF	; 255
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f2 cf       	rjmp	.-28     	; 0x31f8 <_ZN13Adafruit_FONAaSERKS_+0x58>
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	9c 81       	ldd	r25, Y+4	; 0x04
    3218:	83 5f       	subi	r24, 0xF3	; 243
    321a:	9e 4f       	sbci	r25, 0xFE	; 254
    321c:	fc 01       	movw	r30, r24
    321e:	20 81       	ld	r18, Z
    3220:	31 81       	ldd	r19, Z+1	; 0x01
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	83 5f       	subi	r24, 0xF3	; 243
    3228:	9e 4f       	sbci	r25, 0xFE	; 254
    322a:	fc 01       	movw	r30, r24
    322c:	31 83       	std	Z+1, r19	; 0x01
    322e:	20 83       	st	Z, r18
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	81 5f       	subi	r24, 0xF1	; 241
    3236:	9e 4f       	sbci	r25, 0xFE	; 254
    3238:	fc 01       	movw	r30, r24
    323a:	20 81       	ld	r18, Z
    323c:	31 81       	ldd	r19, Z+1	; 0x01
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	9a 81       	ldd	r25, Y+2	; 0x02
    3242:	81 5f       	subi	r24, 0xF1	; 241
    3244:	9e 4f       	sbci	r25, 0xFE	; 254
    3246:	fc 01       	movw	r30, r24
    3248:	31 83       	std	Z+1, r19	; 0x01
    324a:	20 83       	st	Z, r18
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	8f 5e       	subi	r24, 0xEF	; 239
    3252:	9e 4f       	sbci	r25, 0xFE	; 254
    3254:	fc 01       	movw	r30, r24
    3256:	20 81       	ld	r18, Z
    3258:	31 81       	ldd	r19, Z+1	; 0x01
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	8f 5e       	subi	r24, 0xEF	; 239
    3260:	9e 4f       	sbci	r25, 0xFE	; 254
    3262:	fc 01       	movw	r30, r24
    3264:	31 83       	std	Z+1, r19	; 0x01
    3266:	20 83       	st	Z, r18
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	8d 5e       	subi	r24, 0xED	; 237
    326e:	9e 4f       	sbci	r25, 0xFE	; 254
    3270:	fc 01       	movw	r30, r24
    3272:	20 81       	ld	r18, Z
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	9a 81       	ldd	r25, Y+2	; 0x02
    3278:	8d 5e       	subi	r24, 0xED	; 237
    327a:	9e 4f       	sbci	r25, 0xFE	; 254
    327c:	fc 01       	movw	r30, r24
    327e:	20 83       	st	Z, r18
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	8c 5e       	subi	r24, 0xEC	; 236
    3286:	9e 4f       	sbci	r25, 0xFE	; 254
    3288:	fc 01       	movw	r30, r24
    328a:	20 81       	ld	r18, Z
    328c:	31 81       	ldd	r19, Z+1	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	8c 5e       	subi	r24, 0xEC	; 236
    3294:	9e 4f       	sbci	r25, 0xFE	; 254
    3296:	fc 01       	movw	r30, r24
    3298:	31 83       	std	Z+1, r19	; 0x01
    329a:	20 83       	st	Z, r18
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	9c 81       	ldd	r25, Y+4	; 0x04
    32a0:	8a 5e       	subi	r24, 0xEA	; 234
    32a2:	9e 4f       	sbci	r25, 0xFE	; 254
    32a4:	fc 01       	movw	r30, r24
    32a6:	20 81       	ld	r18, Z
    32a8:	31 81       	ldd	r19, Z+1	; 0x01
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	9a 81       	ldd	r25, Y+2	; 0x02
    32ae:	8a 5e       	subi	r24, 0xEA	; 234
    32b0:	9e 4f       	sbci	r25, 0xFE	; 254
    32b2:	fc 01       	movw	r30, r24
    32b4:	31 83       	std	Z+1, r19	; 0x01
    32b6:	20 83       	st	Z, r18
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	88 5e       	subi	r24, 0xE8	; 232
    32be:	9e 4f       	sbci	r25, 0xFE	; 254
    32c0:	fc 01       	movw	r30, r24
    32c2:	20 81       	ld	r18, Z
    32c4:	31 81       	ldd	r19, Z+1	; 0x01
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	88 5e       	subi	r24, 0xE8	; 232
    32cc:	9e 4f       	sbci	r25, 0xFE	; 254
    32ce:	fc 01       	movw	r30, r24
    32d0:	31 83       	std	Z+1, r19	; 0x01
    32d2:	20 83       	st	Z, r18
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	08 95       	ret

000032e6 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <_ZN14HardwareSerial5beginEm+0x6>
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <_ZN14HardwareSerial5beginEm+0x8>
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <_ZN14HardwareSerial5beginEm+0xa>
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	4b 83       	std	Y+3, r20	; 0x03
    32fa:	5c 83       	std	Y+4, r21	; 0x04
    32fc:	6d 83       	std	Y+5, r22	; 0x05
    32fe:	7e 83       	std	Y+6, r23	; 0x06
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	9c 81       	ldd	r25, Y+4	; 0x04
    3304:	ad 81       	ldd	r26, Y+5	; 0x05
    3306:	be 81       	ldd	r27, Y+6	; 0x06
    3308:	e9 81       	ldd	r30, Y+1	; 0x01
    330a:	fa 81       	ldd	r31, Y+2	; 0x02
    330c:	26 e0       	ldi	r18, 0x06	; 6
    330e:	ac 01       	movw	r20, r24
    3310:	bd 01       	movw	r22, r26
    3312:	cf 01       	movw	r24, r30
    3314:	0e 94 21 1b 	call	0x3642	; 0x3642 <_ZN14HardwareSerial5beginEmh>
    3318:	00 00       	nop
    331a:	26 96       	adiw	r28, 0x06	; 6
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	08 95       	ret

0000332c <_ZN10SensorDataC1Ev>:
//};


//TODO: All these to be uint16_t ?

struct SensorData {
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	00 d0       	rcall	.+0      	; 0x3332 <_ZN10SensorDataC1Ev+0x6>
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	21 e0       	ldi	r18, 0x01	; 1
    3340:	fc 01       	movw	r30, r24
    3342:	20 83       	st	Z, r18
    3344:	00 00       	nop
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	08 95       	ret

00003350 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	00 d0       	rcall	.+0      	; 0x3356 <_ZN7TwoWire5writeEi+0x6>
    3356:	00 d0       	rcall	.+0      	; 0x3358 <_ZN7TwoWire5writeEi+0x8>
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	7c 83       	std	Y+4, r23	; 0x04
    3362:	6b 83       	std	Y+3, r22	; 0x03
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	fc 01       	movw	r30, r24
    336a:	80 81       	ld	r24, Z
    336c:	91 81       	ldd	r25, Z+1	; 0x01
    336e:	fc 01       	movw	r30, r24
    3370:	20 81       	ld	r18, Z
    3372:	31 81       	ldd	r19, Z+1	; 0x01
    3374:	4b 81       	ldd	r20, Y+3	; 0x03
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	9a 81       	ldd	r25, Y+2	; 0x02
    337a:	64 2f       	mov	r22, r20
    337c:	f9 01       	movw	r30, r18
    337e:	09 95       	icall
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	08 95       	ret

0000338e <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    3392:	00 d0       	rcall	.+0      	; 0x3394 <_ZN5Print13setWriteErrorEi+0x6>
    3394:	00 d0       	rcall	.+0      	; 0x3396 <_ZN5Print13setWriteErrorEi+0x8>
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	7c 83       	std	Y+4, r23	; 0x04
    33a0:	6b 83       	std	Y+3, r22	; 0x03
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	9a 81       	ldd	r25, Y+2	; 0x02
    33a6:	2b 81       	ldd	r18, Y+3	; 0x03
    33a8:	3c 81       	ldd	r19, Y+4	; 0x04
    33aa:	fc 01       	movw	r30, r24
    33ac:	33 83       	std	Z+3, r19	; 0x03
    33ae:	22 83       	std	Z+2, r18	; 0x02
    33b0:	00 00       	nop
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	08 95       	ret

000033c0 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <_ZN5PrintC1Ev+0x6>
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	2c e2       	ldi	r18, 0x2C	; 44
    33d0:	32 e0       	ldi	r19, 0x02	; 2
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	9a 81       	ldd	r25, Y+2	; 0x02
    33d6:	fc 01       	movw	r30, r24
    33d8:	31 83       	std	Z+1, r19	; 0x01
    33da:	20 83       	st	Z, r18
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	9a 81       	ldd	r25, Y+2	; 0x02
    33e0:	fc 01       	movw	r30, r24
    33e2:	13 82       	std	Z+3, r1	; 0x03
    33e4:	12 82       	std	Z+2, r1	; 0x02
    33e6:	00 00       	nop
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	08 95       	ret

000033f2 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <_ZN6StreamC1Ev+0x6>
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN5PrintC1Ev>
    3408:	2b ef       	ldi	r18, 0xFB	; 251
    340a:	31 e0       	ldi	r19, 0x01	; 1
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	fc 01       	movw	r30, r24
    3412:	31 83       	std	Z+1, r19	; 0x01
    3414:	20 83       	st	Z, r18
    3416:	29 81       	ldd	r18, Y+1	; 0x01
    3418:	3a 81       	ldd	r19, Y+2	; 0x02
    341a:	88 ee       	ldi	r24, 0xE8	; 232
    341c:	93 e0       	ldi	r25, 0x03	; 3
    341e:	a0 e0       	ldi	r26, 0x00	; 0
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	f9 01       	movw	r30, r18
    3424:	84 83       	std	Z+4, r24	; 0x04
    3426:	95 83       	std	Z+5, r25	; 0x05
    3428:	a6 83       	std	Z+6, r26	; 0x06
    342a:	b7 83       	std	Z+7, r27	; 0x07
    342c:	00 00       	nop
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	08 95       	ret

00003438 <__floatunsisf>:
    3438:	e8 94       	clt
    343a:	09 c0       	rjmp	.+18     	; 0x344e <__floatsisf+0x12>

0000343c <__floatsisf>:
    343c:	97 fb       	bst	r25, 7
    343e:	3e f4       	brtc	.+14     	; 0x344e <__floatsisf+0x12>
    3440:	90 95       	com	r25
    3442:	80 95       	com	r24
    3444:	70 95       	com	r23
    3446:	61 95       	neg	r22
    3448:	7f 4f       	sbci	r23, 0xFF	; 255
    344a:	8f 4f       	sbci	r24, 0xFF	; 255
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	99 23       	and	r25, r25
    3450:	a9 f0       	breq	.+42     	; 0x347c <__floatsisf+0x40>
    3452:	f9 2f       	mov	r31, r25
    3454:	96 e9       	ldi	r25, 0x96	; 150
    3456:	bb 27       	eor	r27, r27
    3458:	93 95       	inc	r25
    345a:	f6 95       	lsr	r31
    345c:	87 95       	ror	r24
    345e:	77 95       	ror	r23
    3460:	67 95       	ror	r22
    3462:	b7 95       	ror	r27
    3464:	f1 11       	cpse	r31, r1
    3466:	f8 cf       	rjmp	.-16     	; 0x3458 <__floatsisf+0x1c>
    3468:	fa f4       	brpl	.+62     	; 0x34a8 <__floatsisf+0x6c>
    346a:	bb 0f       	add	r27, r27
    346c:	11 f4       	brne	.+4      	; 0x3472 <__floatsisf+0x36>
    346e:	60 ff       	sbrs	r22, 0
    3470:	1b c0       	rjmp	.+54     	; 0x34a8 <__floatsisf+0x6c>
    3472:	6f 5f       	subi	r22, 0xFF	; 255
    3474:	7f 4f       	sbci	r23, 0xFF	; 255
    3476:	8f 4f       	sbci	r24, 0xFF	; 255
    3478:	9f 4f       	sbci	r25, 0xFF	; 255
    347a:	16 c0       	rjmp	.+44     	; 0x34a8 <__floatsisf+0x6c>
    347c:	88 23       	and	r24, r24
    347e:	11 f0       	breq	.+4      	; 0x3484 <__floatsisf+0x48>
    3480:	96 e9       	ldi	r25, 0x96	; 150
    3482:	11 c0       	rjmp	.+34     	; 0x34a6 <__floatsisf+0x6a>
    3484:	77 23       	and	r23, r23
    3486:	21 f0       	breq	.+8      	; 0x3490 <__floatsisf+0x54>
    3488:	9e e8       	ldi	r25, 0x8E	; 142
    348a:	87 2f       	mov	r24, r23
    348c:	76 2f       	mov	r23, r22
    348e:	05 c0       	rjmp	.+10     	; 0x349a <__floatsisf+0x5e>
    3490:	66 23       	and	r22, r22
    3492:	71 f0       	breq	.+28     	; 0x34b0 <__floatsisf+0x74>
    3494:	96 e8       	ldi	r25, 0x86	; 134
    3496:	86 2f       	mov	r24, r22
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	2a f0       	brmi	.+10     	; 0x34a8 <__floatsisf+0x6c>
    349e:	9a 95       	dec	r25
    34a0:	66 0f       	add	r22, r22
    34a2:	77 1f       	adc	r23, r23
    34a4:	88 1f       	adc	r24, r24
    34a6:	da f7       	brpl	.-10     	; 0x349e <__floatsisf+0x62>
    34a8:	88 0f       	add	r24, r24
    34aa:	96 95       	lsr	r25
    34ac:	87 95       	ror	r24
    34ae:	97 f9       	bld	r25, 7
    34b0:	08 95       	ret

000034b2 <__cxa_pure_virtual>:
    34b2:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <abort>

000034b6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    34b6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    34b8:	91 8d       	ldd	r25, Z+25	; 0x19
    34ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    34bc:	89 2f       	mov	r24, r25
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	80 5c       	subi	r24, 0xC0	; 192
    34c2:	9f 4f       	sbci	r25, 0xFF	; 255
    34c4:	82 1b       	sub	r24, r18
    34c6:	91 09       	sbc	r25, r1
}
    34c8:	8f 73       	andi	r24, 0x3F	; 63
    34ca:	99 27       	eor	r25, r25
    34cc:	08 95       	ret

000034ce <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    34ce:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    34d0:	91 8d       	ldd	r25, Z+25	; 0x19
    34d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34d4:	98 17       	cp	r25, r24
    34d6:	31 f0       	breq	.+12     	; 0x34e4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    34d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    34da:	e8 0f       	add	r30, r24
    34dc:	f1 1d       	adc	r31, r1
    34de:	85 8d       	ldd	r24, Z+29	; 0x1d
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    34e4:	8f ef       	ldi	r24, 0xFF	; 255
    34e6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    34e8:	08 95       	ret

000034ea <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    34ea:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    34ec:	91 8d       	ldd	r25, Z+25	; 0x19
    34ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    34f0:	98 17       	cp	r25, r24
    34f2:	61 f0       	breq	.+24     	; 0x350c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    34f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34f6:	df 01       	movw	r26, r30
    34f8:	a8 0f       	add	r26, r24
    34fa:	b1 1d       	adc	r27, r1
    34fc:	5d 96       	adiw	r26, 0x1d	; 29
    34fe:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3500:	92 8d       	ldd	r25, Z+26	; 0x1a
    3502:	9f 5f       	subi	r25, 0xFF	; 255
    3504:	9f 73       	andi	r25, 0x3F	; 63
    3506:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    350c:	8f ef       	ldi	r24, 0xFF	; 255
    350e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3510:	08 95       	ret

00003512 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3512:	8e ed       	ldi	r24, 0xDE	; 222
    3514:	9b e1       	ldi	r25, 0x1B	; 27
    3516:	89 2b       	or	r24, r25
    3518:	49 f0       	breq	.+18     	; 0x352c <_Z14serialEventRunv+0x1a>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	89 2b       	or	r24, r25
    3520:	29 f0       	breq	.+10     	; 0x352c <_Z14serialEventRunv+0x1a>
    3522:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_Z17Serial0_availablev>
    3526:	81 11       	cpse	r24, r1
    3528:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    352c:	08 95       	ret

0000352e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    352e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3530:	84 8d       	ldd	r24, Z+28	; 0x1c
    3532:	df 01       	movw	r26, r30
    3534:	a8 0f       	add	r26, r24
    3536:	b1 1d       	adc	r27, r1
    3538:	a3 5a       	subi	r26, 0xA3	; 163
    353a:	bf 4f       	sbci	r27, 0xFF	; 255
    353c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    353e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	8f 73       	andi	r24, 0x3F	; 63
    3546:	99 27       	eor	r25, r25
    3548:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    354a:	a6 89       	ldd	r26, Z+22	; 0x16
    354c:	b7 89       	ldd	r27, Z+23	; 0x17
    354e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3550:	a0 89       	ldd	r26, Z+16	; 0x10
    3552:	b1 89       	ldd	r27, Z+17	; 0x11
    3554:	8c 91       	ld	r24, X
    3556:	80 64       	ori	r24, 0x40	; 64
    3558:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    355a:	93 8d       	ldd	r25, Z+27	; 0x1b
    355c:	84 8d       	ldd	r24, Z+28	; 0x1c
    355e:	98 13       	cpse	r25, r24
    3560:	06 c0       	rjmp	.+12     	; 0x356e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3562:	02 88       	ldd	r0, Z+18	; 0x12
    3564:	f3 89       	ldd	r31, Z+19	; 0x13
    3566:	e0 2d       	mov	r30, r0
    3568:	80 81       	ld	r24, Z
    356a:	8f 7d       	andi	r24, 0xDF	; 223
    356c:	80 83       	st	Z, r24
    356e:	08 95       	ret

00003570 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	ec 01       	movw	r28, r24
  _written = true;
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3582:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3584:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3586:	98 13       	cpse	r25, r24
    3588:	05 c0       	rjmp	.+10     	; 0x3594 <_ZN14HardwareSerial5writeEh+0x24>
    358a:	e8 89       	ldd	r30, Y+16	; 0x10
    358c:	f9 89       	ldd	r31, Y+17	; 0x11
    358e:	80 81       	ld	r24, Z
    3590:	85 fd       	sbrc	r24, 5
    3592:	24 c0       	rjmp	.+72     	; 0x35dc <_ZN14HardwareSerial5writeEh+0x6c>
    3594:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3596:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3598:	10 e0       	ldi	r17, 0x00	; 0
    359a:	0f 5f       	subi	r16, 0xFF	; 255
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
    359e:	0f 73       	andi	r16, 0x3F	; 63
    35a0:	11 27       	eor	r17, r17
    35a2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    35a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35a6:	e8 12       	cpse	r14, r24
    35a8:	0c c0       	rjmp	.+24     	; 0x35c2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	07 fc       	sbrc	r0, 7
    35ae:	fa cf       	rjmp	.-12     	; 0x35a4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    35b0:	e8 89       	ldd	r30, Y+16	; 0x10
    35b2:	f9 89       	ldd	r31, Y+17	; 0x11
    35b4:	80 81       	ld	r24, Z
    35b6:	85 ff       	sbrs	r24, 5
    35b8:	f5 cf       	rjmp	.-22     	; 0x35a4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    35ba:	ce 01       	movw	r24, r28
    35bc:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    35c0:	f1 cf       	rjmp	.-30     	; 0x35a4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    35c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35c4:	fe 01       	movw	r30, r28
    35c6:	e8 0f       	add	r30, r24
    35c8:	f1 1d       	adc	r31, r1
    35ca:	e3 5a       	subi	r30, 0xA3	; 163
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    35d0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    35d2:	ea 89       	ldd	r30, Y+18	; 0x12
    35d4:	fb 89       	ldd	r31, Y+19	; 0x13
    35d6:	80 81       	ld	r24, Z
    35d8:	80 62       	ori	r24, 0x20	; 32
    35da:	07 c0       	rjmp	.+14     	; 0x35ea <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    35dc:	ee 89       	ldd	r30, Y+22	; 0x16
    35de:	ff 89       	ldd	r31, Y+23	; 0x17
    35e0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    35e2:	e8 89       	ldd	r30, Y+16	; 0x10
    35e4:	f9 89       	ldd	r31, Y+17	; 0x11
    35e6:	80 81       	ld	r24, Z
    35e8:	80 64       	ori	r24, 0x40	; 64
    35ea:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	ff 90       	pop	r15
    35fa:	ef 90       	pop	r14
    35fc:	08 95       	ret

000035fe <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3604:	88 8d       	ldd	r24, Y+24	; 0x18
    3606:	88 23       	and	r24, r24
    3608:	c9 f0       	breq	.+50     	; 0x363c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    360a:	ea 89       	ldd	r30, Y+18	; 0x12
    360c:	fb 89       	ldd	r31, Y+19	; 0x13
    360e:	80 81       	ld	r24, Z
    3610:	85 fd       	sbrc	r24, 5
    3612:	05 c0       	rjmp	.+10     	; 0x361e <_ZN14HardwareSerial5flushEv+0x20>
    3614:	a8 89       	ldd	r26, Y+16	; 0x10
    3616:	b9 89       	ldd	r27, Y+17	; 0x11
    3618:	8c 91       	ld	r24, X
    361a:	86 fd       	sbrc	r24, 6
    361c:	0f c0       	rjmp	.+30     	; 0x363c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	07 fc       	sbrc	r0, 7
    3622:	f5 cf       	rjmp	.-22     	; 0x360e <_ZN14HardwareSerial5flushEv+0x10>
    3624:	80 81       	ld	r24, Z
    3626:	85 ff       	sbrs	r24, 5
    3628:	f2 cf       	rjmp	.-28     	; 0x360e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    362a:	a8 89       	ldd	r26, Y+16	; 0x10
    362c:	b9 89       	ldd	r27, Y+17	; 0x11
    362e:	8c 91       	ld	r24, X
    3630:	85 ff       	sbrs	r24, 5
    3632:	ed cf       	rjmp	.-38     	; 0x360e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3634:	ce 01       	movw	r24, r28
    3636:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    363a:	e7 cf       	rjmp	.-50     	; 0x360a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    363c:	df 91       	pop	r29
    363e:	cf 91       	pop	r28
    3640:	08 95       	ret

00003642 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3642:	cf 92       	push	r12
    3644:	df 92       	push	r13
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	1f 93       	push	r17
    364c:	cf 93       	push	r28
    364e:	df 93       	push	r29
    3650:	ec 01       	movw	r28, r24
    3652:	6a 01       	movw	r12, r20
    3654:	7b 01       	movw	r14, r22
    3656:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3658:	e8 89       	ldd	r30, Y+16	; 0x10
    365a:	f9 89       	ldd	r31, Y+17	; 0x11
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3660:	41 15       	cp	r20, r1
    3662:	51 4e       	sbci	r21, 0xE1	; 225
    3664:	61 05       	cpc	r22, r1
    3666:	71 05       	cpc	r23, r1
    3668:	b1 f0       	breq	.+44     	; 0x3696 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	79 e0       	ldi	r23, 0x09	; 9
    366e:	8d e3       	ldi	r24, 0x3D	; 61
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	a7 01       	movw	r20, r14
    3674:	96 01       	movw	r18, r12
    3676:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <__udivmodsi4>
    367a:	da 01       	movw	r26, r20
    367c:	c9 01       	movw	r24, r18
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	a1 09       	sbc	r26, r1
    3682:	b1 09       	sbc	r27, r1
    3684:	b6 95       	lsr	r27
    3686:	a7 95       	ror	r26
    3688:	97 95       	ror	r25
    368a:	87 95       	ror	r24
    368c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    368e:	21 15       	cp	r18, r1
    3690:	80 e1       	ldi	r24, 0x10	; 16
    3692:	38 07       	cpc	r19, r24
    3694:	a8 f0       	brcs	.+42     	; 0x36c0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3696:	e8 89       	ldd	r30, Y+16	; 0x10
    3698:	f9 89       	ldd	r31, Y+17	; 0x11
    369a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    369c:	60 e8       	ldi	r22, 0x80	; 128
    369e:	74 e8       	ldi	r23, 0x84	; 132
    36a0:	8e e1       	ldi	r24, 0x1E	; 30
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a7 01       	movw	r20, r14
    36a6:	96 01       	movw	r18, r12
    36a8:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <__udivmodsi4>
    36ac:	da 01       	movw	r26, r20
    36ae:	c9 01       	movw	r24, r18
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	a1 09       	sbc	r26, r1
    36b4:	b1 09       	sbc	r27, r1
    36b6:	b6 95       	lsr	r27
    36b8:	a7 95       	ror	r26
    36ba:	97 95       	ror	r25
    36bc:	87 95       	ror	r24
    36be:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    36c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    36c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    36c4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    36c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    36c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    36ca:	20 83       	st	Z, r18

  _written = false;
    36cc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    36ce:	ec 89       	ldd	r30, Y+20	; 0x14
    36d0:	fd 89       	ldd	r31, Y+21	; 0x15
    36d2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    36d4:	ea 89       	ldd	r30, Y+18	; 0x12
    36d6:	fb 89       	ldd	r31, Y+19	; 0x13
    36d8:	80 81       	ld	r24, Z
    36da:	80 61       	ori	r24, 0x10	; 16
    36dc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    36de:	ea 89       	ldd	r30, Y+18	; 0x12
    36e0:	fb 89       	ldd	r31, Y+19	; 0x13
    36e2:	80 81       	ld	r24, Z
    36e4:	88 60       	ori	r24, 0x08	; 8
    36e6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    36e8:	ea 89       	ldd	r30, Y+18	; 0x12
    36ea:	fb 89       	ldd	r31, Y+19	; 0x13
    36ec:	80 81       	ld	r24, Z
    36ee:	80 68       	ori	r24, 0x80	; 128
    36f0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    36f2:	ea 89       	ldd	r30, Y+18	; 0x12
    36f4:	fb 89       	ldd	r31, Y+19	; 0x13
    36f6:	80 81       	ld	r24, Z
    36f8:	8f 7d       	andi	r24, 0xDF	; 223
    36fa:	80 83       	st	Z, r24
}
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	ff 90       	pop	r15
    3704:	ef 90       	pop	r14
    3706:	df 90       	pop	r13
    3708:	cf 90       	pop	r12
    370a:	08 95       	ret

0000370c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    370c:	1f 92       	push	r1
    370e:	0f 92       	push	r0
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	0f 92       	push	r0
    3714:	11 24       	eor	r1, r1
    3716:	2f 93       	push	r18
    3718:	8f 93       	push	r24
    371a:	9f 93       	push	r25
    371c:	ef 93       	push	r30
    371e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3720:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <Serial+0x10>
    3724:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <Serial+0x11>
    3728:	80 81       	ld	r24, Z
    372a:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <Serial+0x16>
    372e:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <Serial+0x17>
    3732:	82 fd       	sbrc	r24, 2
    3734:	12 c0       	rjmp	.+36     	; 0x375a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3736:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3738:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Serial+0x19>
    373c:	8f 5f       	subi	r24, 0xFF	; 255
    373e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3740:	20 91 e3 06 	lds	r18, 0x06E3	; 0x8006e3 <Serial+0x1a>
    3744:	82 17       	cp	r24, r18
    3746:	51 f0       	breq	.+20     	; 0x375c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3748:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <Serial+0x19>
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	e7 53       	subi	r30, 0x37	; 55
    3750:	f9 4f       	sbci	r31, 0xF9	; 249
    3752:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3754:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <Serial+0x19>
    3758:	01 c0       	rjmp	.+2      	; 0x375c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    375a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    375c:	ff 91       	pop	r31
    375e:	ef 91       	pop	r30
    3760:	9f 91       	pop	r25
    3762:	8f 91       	pop	r24
    3764:	2f 91       	pop	r18
    3766:	0f 90       	pop	r0
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	0f 90       	pop	r0
    376c:	1f 90       	pop	r1
    376e:	18 95       	reti

00003770 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3770:	1f 92       	push	r1
    3772:	0f 92       	push	r0
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	0f 92       	push	r0
    3778:	11 24       	eor	r1, r1
    377a:	2f 93       	push	r18
    377c:	3f 93       	push	r19
    377e:	4f 93       	push	r20
    3780:	5f 93       	push	r21
    3782:	6f 93       	push	r22
    3784:	7f 93       	push	r23
    3786:	8f 93       	push	r24
    3788:	9f 93       	push	r25
    378a:	af 93       	push	r26
    378c:	bf 93       	push	r27
    378e:	ef 93       	push	r30
    3790:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3792:	89 ec       	ldi	r24, 0xC9	; 201
    3794:	96 e0       	ldi	r25, 0x06	; 6
    3796:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    379a:	ff 91       	pop	r31
    379c:	ef 91       	pop	r30
    379e:	bf 91       	pop	r27
    37a0:	af 91       	pop	r26
    37a2:	9f 91       	pop	r25
    37a4:	8f 91       	pop	r24
    37a6:	7f 91       	pop	r23
    37a8:	6f 91       	pop	r22
    37aa:	5f 91       	pop	r21
    37ac:	4f 91       	pop	r20
    37ae:	3f 91       	pop	r19
    37b0:	2f 91       	pop	r18
    37b2:	0f 90       	pop	r0
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	0f 90       	pop	r0
    37b8:	1f 90       	pop	r1
    37ba:	18 95       	reti

000037bc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    37bc:	89 ec       	ldi	r24, 0xC9	; 201
    37be:	96 e0       	ldi	r25, 0x06	; 6
    37c0:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN14HardwareSerial9availableEv>
    37c4:	21 e0       	ldi	r18, 0x01	; 1
    37c6:	89 2b       	or	r24, r25
    37c8:	09 f4       	brne	.+2      	; 0x37cc <_Z17Serial0_availablev+0x10>
    37ca:	20 e0       	ldi	r18, 0x00	; 0
}
    37cc:	82 2f       	mov	r24, r18
    37ce:	08 95       	ret

000037d0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    37d0:	e9 ec       	ldi	r30, 0xC9	; 201
    37d2:	f6 e0       	ldi	r31, 0x06	; 6
    37d4:	13 82       	std	Z+3, r1	; 0x03
    37d6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    37d8:	88 ee       	ldi	r24, 0xE8	; 232
    37da:	93 e0       	ldi	r25, 0x03	; 3
    37dc:	a0 e0       	ldi	r26, 0x00	; 0
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	84 83       	std	Z+4, r24	; 0x04
    37e2:	95 83       	std	Z+5, r25	; 0x05
    37e4:	a6 83       	std	Z+6, r26	; 0x06
    37e6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    37e8:	8b e0       	ldi	r24, 0x0B	; 11
    37ea:	92 e0       	ldi	r25, 0x02	; 2
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	80 83       	st	Z, r24
    37f0:	85 ec       	ldi	r24, 0xC5	; 197
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	95 87       	std	Z+13, r25	; 0x0d
    37f6:	84 87       	std	Z+12, r24	; 0x0c
    37f8:	84 ec       	ldi	r24, 0xC4	; 196
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	97 87       	std	Z+15, r25	; 0x0f
    37fe:	86 87       	std	Z+14, r24	; 0x0e
    3800:	80 ec       	ldi	r24, 0xC0	; 192
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	91 8b       	std	Z+17, r25	; 0x11
    3806:	80 8b       	std	Z+16, r24	; 0x10
    3808:	81 ec       	ldi	r24, 0xC1	; 193
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	93 8b       	std	Z+19, r25	; 0x13
    380e:	82 8b       	std	Z+18, r24	; 0x12
    3810:	82 ec       	ldi	r24, 0xC2	; 194
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	95 8b       	std	Z+21, r25	; 0x15
    3816:	84 8b       	std	Z+20, r24	; 0x14
    3818:	86 ec       	ldi	r24, 0xC6	; 198
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	97 8b       	std	Z+23, r25	; 0x17
    381e:	86 8b       	std	Z+22, r24	; 0x16
    3820:	11 8e       	std	Z+25, r1	; 0x19
    3822:	12 8e       	std	Z+26, r1	; 0x1a
    3824:	13 8e       	std	Z+27, r1	; 0x1b
    3826:	14 8e       	std	Z+28, r1	; 0x1c
    3828:	08 95       	ret

0000382a <initVariant>:
    382a:	08 95       	ret

0000382c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    382c:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <init>

	initVariant();
    3830:	0e 94 15 1c 	call	0x382a	; 0x382a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3834:	0e 94 42 08 	call	0x1084	; 0x1084 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3838:	c9 e8       	ldi	r28, 0x89	; 137
    383a:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
    383c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <loop>
		if (serialEventRun) serialEventRun();
    3840:	20 97       	sbiw	r28, 0x00	; 0
    3842:	e1 f3       	breq	.-8      	; 0x383c <main+0x10>
    3844:	0e 94 89 1a 	call	0x3512	; 0x3512 <_Z14serialEventRunv>
    3848:	f9 cf       	rjmp	.-14     	; 0x383c <main+0x10>

0000384a <_Znwj>:
    384a:	0c 94 4a 2e 	jmp	0x5c94	; 0x5c94 <malloc>

0000384e <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    384e:	cf 92       	push	r12
    3850:	df 92       	push	r13
    3852:	ef 92       	push	r14
    3854:	ff 92       	push	r15
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	6c 01       	movw	r12, r24
    3860:	7a 01       	movw	r14, r20
    3862:	8b 01       	movw	r16, r22
    3864:	c0 e0       	ldi	r28, 0x00	; 0
    3866:	d0 e0       	ldi	r29, 0x00	; 0
    3868:	ce 15       	cp	r28, r14
    386a:	df 05       	cpc	r29, r15
    386c:	81 f0       	breq	.+32     	; 0x388e <_ZN5Print5writeEPKhj+0x40>
    386e:	d8 01       	movw	r26, r16
    3870:	6d 91       	ld	r22, X+
    3872:	8d 01       	movw	r16, r26
    3874:	d6 01       	movw	r26, r12
    3876:	ed 91       	ld	r30, X+
    3878:	fc 91       	ld	r31, X
    387a:	01 90       	ld	r0, Z+
    387c:	f0 81       	ld	r31, Z
    387e:	e0 2d       	mov	r30, r0
    3880:	c6 01       	movw	r24, r12
    3882:	09 95       	icall
    3884:	89 2b       	or	r24, r25
    3886:	11 f0       	breq	.+4      	; 0x388c <_ZN5Print5writeEPKhj+0x3e>
    3888:	21 96       	adiw	r28, 0x01	; 1
    388a:	ee cf       	rjmp	.-36     	; 0x3868 <_ZN5Print5writeEPKhj+0x1a>
    388c:	7e 01       	movw	r14, r28
    388e:	c7 01       	movw	r24, r14
    3890:	df 91       	pop	r29
    3892:	cf 91       	pop	r28
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	ff 90       	pop	r15
    389a:	ef 90       	pop	r14
    389c:	df 90       	pop	r13
    389e:	cf 90       	pop	r12
    38a0:	08 95       	ret

000038a2 <_ZN5Print5writeEPKc>:
    38a2:	61 15       	cp	r22, r1
    38a4:	71 05       	cpc	r23, r1
    38a6:	79 f0       	breq	.+30     	; 0x38c6 <_ZN5Print5writeEPKc+0x24>
    38a8:	fb 01       	movw	r30, r22
    38aa:	01 90       	ld	r0, Z+
    38ac:	00 20       	and	r0, r0
    38ae:	e9 f7       	brne	.-6      	; 0x38aa <_ZN5Print5writeEPKc+0x8>
    38b0:	31 97       	sbiw	r30, 0x01	; 1
    38b2:	af 01       	movw	r20, r30
    38b4:	46 1b       	sub	r20, r22
    38b6:	57 0b       	sbc	r21, r23
    38b8:	dc 01       	movw	r26, r24
    38ba:	ed 91       	ld	r30, X+
    38bc:	fc 91       	ld	r31, X
    38be:	02 80       	ldd	r0, Z+2	; 0x02
    38c0:	f3 81       	ldd	r31, Z+3	; 0x03
    38c2:	e0 2d       	mov	r30, r0
    38c4:	09 94       	ijmp
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	08 95       	ret

000038cc <_ZN5Print5printEPK19__FlashStringHelper>:
    38cc:	ef 92       	push	r14
    38ce:	ff 92       	push	r15
    38d0:	0f 93       	push	r16
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	8c 01       	movw	r16, r24
    38da:	7b 01       	movw	r14, r22
    38dc:	c0 e0       	ldi	r28, 0x00	; 0
    38de:	d0 e0       	ldi	r29, 0x00	; 0
    38e0:	f7 01       	movw	r30, r14
    38e2:	ec 0f       	add	r30, r28
    38e4:	fd 1f       	adc	r31, r29
    38e6:	64 91       	lpm	r22, Z
    38e8:	66 23       	and	r22, r22
    38ea:	61 f0       	breq	.+24     	; 0x3904 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    38ec:	d8 01       	movw	r26, r16
    38ee:	ed 91       	ld	r30, X+
    38f0:	fc 91       	ld	r31, X
    38f2:	01 90       	ld	r0, Z+
    38f4:	f0 81       	ld	r31, Z
    38f6:	e0 2d       	mov	r30, r0
    38f8:	c8 01       	movw	r24, r16
    38fa:	09 95       	icall
    38fc:	89 2b       	or	r24, r25
    38fe:	11 f0       	breq	.+4      	; 0x3904 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3900:	21 96       	adiw	r28, 0x01	; 1
    3902:	ee cf       	rjmp	.-36     	; 0x38e0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3904:	ce 01       	movw	r24, r28
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	08 95       	ret

00003914 <_ZN5Print5printEPKc>:
    3914:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <_ZN5Print5writeEPKc>

00003918 <_ZN5Print5printEc>:
    3918:	dc 01       	movw	r26, r24
    391a:	ed 91       	ld	r30, X+
    391c:	fc 91       	ld	r31, X
    391e:	01 90       	ld	r0, Z+
    3920:	f0 81       	ld	r31, Z
    3922:	e0 2d       	mov	r30, r0
    3924:	09 94       	ijmp

00003926 <_ZN5Print7printlnEv>:
    3926:	67 e1       	ldi	r22, 0x17	; 23
    3928:	72 e0       	ldi	r23, 0x02	; 2
    392a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <_ZN5Print5writeEPKc>

0000392e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	ec 01       	movw	r28, r24
    3938:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    393c:	8c 01       	movw	r16, r24
    393e:	ce 01       	movw	r24, r28
    3940:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    3944:	80 0f       	add	r24, r16
    3946:	91 1f       	adc	r25, r17
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	08 95       	ret

00003952 <_ZN5Print7printlnEPKc>:
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	ec 01       	movw	r28, r24
    395c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <_ZN5Print5writeEPKc>
    3960:	8c 01       	movw	r16, r24
    3962:	ce 01       	movw	r24, r28
    3964:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    3968:	80 0f       	add	r24, r16
    396a:	91 1f       	adc	r25, r17
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	08 95       	ret

00003976 <_ZN5Print7printlnEc>:
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	ec 01       	movw	r28, r24
    3980:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZN5Print5printEc>
    3984:	8c 01       	movw	r16, r24
    3986:	ce 01       	movw	r24, r28
    3988:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    398c:	80 0f       	add	r24, r16
    398e:	91 1f       	adc	r25, r17
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	1f 91       	pop	r17
    3996:	0f 91       	pop	r16
    3998:	08 95       	ret

0000399a <_ZN5Print11printNumberEmh>:
    399a:	8f 92       	push	r8
    399c:	9f 92       	push	r9
    399e:	af 92       	push	r10
    39a0:	bf 92       	push	r11
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	a1 97       	sbiw	r28, 0x21	; 33
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	7c 01       	movw	r14, r24
    39c0:	fa 01       	movw	r30, r20
    39c2:	cb 01       	movw	r24, r22
    39c4:	19 a2       	std	Y+33, r1	; 0x21
    39c6:	22 30       	cpi	r18, 0x02	; 2
    39c8:	08 f4       	brcc	.+2      	; 0x39cc <_ZN5Print11printNumberEmh+0x32>
    39ca:	2a e0       	ldi	r18, 0x0A	; 10
    39cc:	8e 01       	movw	r16, r28
    39ce:	0f 5d       	subi	r16, 0xDF	; 223
    39d0:	1f 4f       	sbci	r17, 0xFF	; 255
    39d2:	82 2e       	mov	r8, r18
    39d4:	91 2c       	mov	r9, r1
    39d6:	a1 2c       	mov	r10, r1
    39d8:	b1 2c       	mov	r11, r1
    39da:	bf 01       	movw	r22, r30
    39dc:	a5 01       	movw	r20, r10
    39de:	94 01       	movw	r18, r8
    39e0:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <__udivmodsi4>
    39e4:	f9 01       	movw	r30, r18
    39e6:	ca 01       	movw	r24, r20
    39e8:	01 50       	subi	r16, 0x01	; 1
    39ea:	11 09       	sbc	r17, r1
    39ec:	6a 30       	cpi	r22, 0x0A	; 10
    39ee:	10 f4       	brcc	.+4      	; 0x39f4 <_ZN5Print11printNumberEmh+0x5a>
    39f0:	60 5d       	subi	r22, 0xD0	; 208
    39f2:	01 c0       	rjmp	.+2      	; 0x39f6 <_ZN5Print11printNumberEmh+0x5c>
    39f4:	69 5c       	subi	r22, 0xC9	; 201
    39f6:	d8 01       	movw	r26, r16
    39f8:	6c 93       	st	X, r22
    39fa:	23 2b       	or	r18, r19
    39fc:	24 2b       	or	r18, r20
    39fe:	25 2b       	or	r18, r21
    3a00:	61 f7       	brne	.-40     	; 0x39da <_ZN5Print11printNumberEmh+0x40>
    3a02:	b8 01       	movw	r22, r16
    3a04:	c7 01       	movw	r24, r14
    3a06:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <_ZN5Print5writeEPKc>
    3a0a:	a1 96       	adiw	r28, 0x21	; 33
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	bf 90       	pop	r11
    3a24:	af 90       	pop	r10
    3a26:	9f 90       	pop	r9
    3a28:	8f 90       	pop	r8
    3a2a:	08 95       	ret

00003a2c <_ZN5Print5printEmi>:
    3a2c:	21 15       	cp	r18, r1
    3a2e:	31 05       	cpc	r19, r1
    3a30:	41 f4       	brne	.+16     	; 0x3a42 <_ZN5Print5printEmi+0x16>
    3a32:	dc 01       	movw	r26, r24
    3a34:	ed 91       	ld	r30, X+
    3a36:	fc 91       	ld	r31, X
    3a38:	01 90       	ld	r0, Z+
    3a3a:	f0 81       	ld	r31, Z
    3a3c:	e0 2d       	mov	r30, r0
    3a3e:	64 2f       	mov	r22, r20
    3a40:	09 94       	ijmp
    3a42:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <_ZN5Print11printNumberEmh>

00003a46 <_ZN5Print5printEhi>:
    3a46:	9a 01       	movw	r18, r20
    3a48:	46 2f       	mov	r20, r22
    3a4a:	50 e0       	ldi	r21, 0x00	; 0
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>

00003a54 <_ZN5Print7printlnEhi>:
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	ec 01       	movw	r28, r24
    3a5e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_ZN5Print5printEhi>
    3a62:	8c 01       	movw	r16, r24
    3a64:	ce 01       	movw	r24, r28
    3a66:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    3a6a:	80 0f       	add	r24, r16
    3a6c:	91 1f       	adc	r25, r17
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	08 95       	ret

00003a78 <_ZN5Print5printEji>:
    3a78:	9a 01       	movw	r18, r20
    3a7a:	ab 01       	movw	r20, r22
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>

00003a84 <_ZN5Print7printlnEji>:
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	ec 01       	movw	r28, r24
    3a8e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN5Print5printEji>
    3a92:	8c 01       	movw	r16, r24
    3a94:	ce 01       	movw	r24, r28
    3a96:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    3a9a:	80 0f       	add	r24, r16
    3a9c:	91 1f       	adc	r25, r17
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	1f 91       	pop	r17
    3aa4:	0f 91       	pop	r16
    3aa6:	08 95       	ret

00003aa8 <_ZN5Print7printlnEmi>:
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	ec 01       	movw	r28, r24
    3ab2:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>
    3ab6:	8c 01       	movw	r16, r24
    3ab8:	ce 01       	movw	r24, r28
    3aba:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    3abe:	80 0f       	add	r24, r16
    3ac0:	91 1f       	adc	r25, r17
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	08 95       	ret

00003acc <_ZN5Print5printEli>:
    3acc:	cf 92       	push	r12
    3ace:	df 92       	push	r13
    3ad0:	ef 92       	push	r14
    3ad2:	ff 92       	push	r15
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	21 15       	cp	r18, r1
    3ade:	31 05       	cpc	r19, r1
    3ae0:	81 f4       	brne	.+32     	; 0x3b02 <_ZN5Print5printEli+0x36>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	ed 91       	ld	r30, X+
    3ae6:	fc 91       	ld	r31, X
    3ae8:	01 90       	ld	r0, Z+
    3aea:	f0 81       	ld	r31, Z
    3aec:	e0 2d       	mov	r30, r0
    3aee:	64 2f       	mov	r22, r20
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	df 90       	pop	r13
    3afe:	cf 90       	pop	r12
    3b00:	09 94       	ijmp
    3b02:	2a 30       	cpi	r18, 0x0A	; 10
    3b04:	31 05       	cpc	r19, r1
    3b06:	01 f5       	brne	.+64     	; 0x3b48 <_ZN5Print5printEli+0x7c>
    3b08:	77 ff       	sbrs	r23, 7
    3b0a:	1d c0       	rjmp	.+58     	; 0x3b46 <_ZN5Print5printEli+0x7a>
    3b0c:	6a 01       	movw	r12, r20
    3b0e:	7b 01       	movw	r14, r22
    3b10:	ec 01       	movw	r28, r24
    3b12:	6d e2       	ldi	r22, 0x2D	; 45
    3b14:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZN5Print5printEc>
    3b18:	8c 01       	movw	r16, r24
    3b1a:	44 27       	eor	r20, r20
    3b1c:	55 27       	eor	r21, r21
    3b1e:	ba 01       	movw	r22, r20
    3b20:	4c 19       	sub	r20, r12
    3b22:	5d 09       	sbc	r21, r13
    3b24:	6e 09       	sbc	r22, r14
    3b26:	7f 09       	sbc	r23, r15
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	0e 94 cd 1c 	call	0x399a	; 0x399a <_ZN5Print11printNumberEmh>
    3b30:	80 0f       	add	r24, r16
    3b32:	91 1f       	adc	r25, r17
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	df 90       	pop	r13
    3b42:	cf 90       	pop	r12
    3b44:	08 95       	ret
    3b46:	2a e0       	ldi	r18, 0x0A	; 10
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	1f 91       	pop	r17
    3b4e:	0f 91       	pop	r16
    3b50:	ff 90       	pop	r15
    3b52:	ef 90       	pop	r14
    3b54:	df 90       	pop	r13
    3b56:	cf 90       	pop	r12
    3b58:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <_ZN5Print11printNumberEmh>

00003b5c <_ZN5Print5printEii>:
    3b5c:	9a 01       	movw	r18, r20
    3b5e:	ab 01       	movw	r20, r22
    3b60:	77 0f       	add	r23, r23
    3b62:	66 0b       	sbc	r22, r22
    3b64:	77 0b       	sbc	r23, r23
    3b66:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <_ZN5Print5printEli>

00003b6a <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	cf 93       	push	r28
    3b70:	df 93       	push	r29
    3b72:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3b74:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_ZN5Print5printEli>
    3b78:	8c 01       	movw	r16, r24
  n += println();
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
  return n;
}
    3b80:	80 0f       	add	r24, r16
    3b82:	91 1f       	adc	r25, r17
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	08 95       	ret

00003b8e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3b8e:	1f 92       	push	r1
    3b90:	0f 92       	push	r0
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	0f 92       	push	r0
    3b96:	11 24       	eor	r1, r1
    3b98:	2f 93       	push	r18
    3b9a:	3f 93       	push	r19
    3b9c:	8f 93       	push	r24
    3b9e:	9f 93       	push	r25
    3ba0:	af 93       	push	r26
    3ba2:	bf 93       	push	r27
    3ba4:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <timer0_millis>
    3ba8:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <timer0_millis+0x1>
    3bac:	a0 91 69 07 	lds	r26, 0x0769	; 0x800769 <timer0_millis+0x2>
    3bb0:	b0 91 6a 07 	lds	r27, 0x076A	; 0x80076a <timer0_millis+0x3>
    3bb4:	30 91 66 07 	lds	r19, 0x0766	; 0x800766 <timer0_fract>
    3bb8:	23 e0       	ldi	r18, 0x03	; 3
    3bba:	23 0f       	add	r18, r19
    3bbc:	2d 37       	cpi	r18, 0x7D	; 125
    3bbe:	20 f4       	brcc	.+8      	; 0x3bc8 <__vector_16+0x3a>
    3bc0:	01 96       	adiw	r24, 0x01	; 1
    3bc2:	a1 1d       	adc	r26, r1
    3bc4:	b1 1d       	adc	r27, r1
    3bc6:	05 c0       	rjmp	.+10     	; 0x3bd2 <__vector_16+0x44>
    3bc8:	26 e8       	ldi	r18, 0x86	; 134
    3bca:	23 0f       	add	r18, r19
    3bcc:	02 96       	adiw	r24, 0x02	; 2
    3bce:	a1 1d       	adc	r26, r1
    3bd0:	b1 1d       	adc	r27, r1
    3bd2:	20 93 66 07 	sts	0x0766, r18	; 0x800766 <timer0_fract>
    3bd6:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <timer0_millis>
    3bda:	90 93 68 07 	sts	0x0768, r25	; 0x800768 <timer0_millis+0x1>
    3bde:	a0 93 69 07 	sts	0x0769, r26	; 0x800769 <timer0_millis+0x2>
    3be2:	b0 93 6a 07 	sts	0x076A, r27	; 0x80076a <timer0_millis+0x3>
    3be6:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <timer0_overflow_count>
    3bea:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <timer0_overflow_count+0x1>
    3bee:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <timer0_overflow_count+0x2>
    3bf2:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <timer0_overflow_count+0x3>
    3bf6:	01 96       	adiw	r24, 0x01	; 1
    3bf8:	a1 1d       	adc	r26, r1
    3bfa:	b1 1d       	adc	r27, r1
    3bfc:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <timer0_overflow_count>
    3c00:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <timer0_overflow_count+0x1>
    3c04:	a0 93 6d 07 	sts	0x076D, r26	; 0x80076d <timer0_overflow_count+0x2>
    3c08:	b0 93 6e 07 	sts	0x076E, r27	; 0x80076e <timer0_overflow_count+0x3>
    3c0c:	bf 91       	pop	r27
    3c0e:	af 91       	pop	r26
    3c10:	9f 91       	pop	r25
    3c12:	8f 91       	pop	r24
    3c14:	3f 91       	pop	r19
    3c16:	2f 91       	pop	r18
    3c18:	0f 90       	pop	r0
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	0f 90       	pop	r0
    3c1e:	1f 90       	pop	r1
    3c20:	18 95       	reti

00003c22 <micros>:
    3c22:	3f b7       	in	r19, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <timer0_overflow_count>
    3c2a:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <timer0_overflow_count+0x1>
    3c2e:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <timer0_overflow_count+0x2>
    3c32:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <timer0_overflow_count+0x3>
    3c36:	26 b5       	in	r18, 0x26	; 38
    3c38:	a8 9b       	sbis	0x15, 0	; 21
    3c3a:	05 c0       	rjmp	.+10     	; 0x3c46 <micros+0x24>
    3c3c:	2f 3f       	cpi	r18, 0xFF	; 255
    3c3e:	19 f0       	breq	.+6      	; 0x3c46 <micros+0x24>
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	a1 1d       	adc	r26, r1
    3c44:	b1 1d       	adc	r27, r1
    3c46:	3f bf       	out	0x3f, r19	; 63
    3c48:	ba 2f       	mov	r27, r26
    3c4a:	a9 2f       	mov	r26, r25
    3c4c:	98 2f       	mov	r25, r24
    3c4e:	88 27       	eor	r24, r24
    3c50:	82 0f       	add	r24, r18
    3c52:	91 1d       	adc	r25, r1
    3c54:	a1 1d       	adc	r26, r1
    3c56:	b1 1d       	adc	r27, r1
    3c58:	bc 01       	movw	r22, r24
    3c5a:	cd 01       	movw	r24, r26
    3c5c:	42 e0       	ldi	r20, 0x02	; 2
    3c5e:	66 0f       	add	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	4a 95       	dec	r20
    3c68:	d1 f7       	brne	.-12     	; 0x3c5e <micros+0x3c>
    3c6a:	08 95       	ret

00003c6c <delay>:
    3c6c:	8f 92       	push	r8
    3c6e:	9f 92       	push	r9
    3c70:	af 92       	push	r10
    3c72:	bf 92       	push	r11
    3c74:	cf 92       	push	r12
    3c76:	df 92       	push	r13
    3c78:	ef 92       	push	r14
    3c7a:	ff 92       	push	r15
    3c7c:	6b 01       	movw	r12, r22
    3c7e:	7c 01       	movw	r14, r24
    3c80:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <micros>
    3c84:	4b 01       	movw	r8, r22
    3c86:	5c 01       	movw	r10, r24
    3c88:	c1 14       	cp	r12, r1
    3c8a:	d1 04       	cpc	r13, r1
    3c8c:	e1 04       	cpc	r14, r1
    3c8e:	f1 04       	cpc	r15, r1
    3c90:	01 f1       	breq	.+64     	; 0x3cd2 <delay+0x66>
    3c92:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <yield>
    3c96:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <micros>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	88 19       	sub	r24, r8
    3ca0:	99 09       	sbc	r25, r9
    3ca2:	aa 09       	sbc	r26, r10
    3ca4:	bb 09       	sbc	r27, r11
    3ca6:	88 3e       	cpi	r24, 0xE8	; 232
    3ca8:	93 40       	sbci	r25, 0x03	; 3
    3caa:	a1 05       	cpc	r26, r1
    3cac:	b1 05       	cpc	r27, r1
    3cae:	60 f3       	brcs	.-40     	; 0x3c88 <delay+0x1c>
    3cb0:	21 e0       	ldi	r18, 0x01	; 1
    3cb2:	c2 1a       	sub	r12, r18
    3cb4:	d1 08       	sbc	r13, r1
    3cb6:	e1 08       	sbc	r14, r1
    3cb8:	f1 08       	sbc	r15, r1
    3cba:	88 ee       	ldi	r24, 0xE8	; 232
    3cbc:	88 0e       	add	r8, r24
    3cbe:	83 e0       	ldi	r24, 0x03	; 3
    3cc0:	98 1e       	adc	r9, r24
    3cc2:	a1 1c       	adc	r10, r1
    3cc4:	b1 1c       	adc	r11, r1
    3cc6:	c1 14       	cp	r12, r1
    3cc8:	d1 04       	cpc	r13, r1
    3cca:	e1 04       	cpc	r14, r1
    3ccc:	f1 04       	cpc	r15, r1
    3cce:	19 f7       	brne	.-58     	; 0x3c96 <delay+0x2a>
    3cd0:	db cf       	rjmp	.-74     	; 0x3c88 <delay+0x1c>
    3cd2:	ff 90       	pop	r15
    3cd4:	ef 90       	pop	r14
    3cd6:	df 90       	pop	r13
    3cd8:	cf 90       	pop	r12
    3cda:	bf 90       	pop	r11
    3cdc:	af 90       	pop	r10
    3cde:	9f 90       	pop	r9
    3ce0:	8f 90       	pop	r8
    3ce2:	08 95       	ret

00003ce4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3ce4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3ce6:	84 b5       	in	r24, 0x24	; 36
    3ce8:	82 60       	ori	r24, 0x02	; 2
    3cea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3cec:	84 b5       	in	r24, 0x24	; 36
    3cee:	81 60       	ori	r24, 0x01	; 1
    3cf0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3cf2:	85 b5       	in	r24, 0x25	; 37
    3cf4:	82 60       	ori	r24, 0x02	; 2
    3cf6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3cf8:	85 b5       	in	r24, 0x25	; 37
    3cfa:	81 60       	ori	r24, 0x01	; 1
    3cfc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3cfe:	ee e6       	ldi	r30, 0x6E	; 110
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	81 60       	ori	r24, 0x01	; 1
    3d06:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3d08:	e1 e8       	ldi	r30, 0x81	; 129
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3d0e:	80 81       	ld	r24, Z
    3d10:	82 60       	ori	r24, 0x02	; 2
    3d12:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3d14:	80 81       	ld	r24, Z
    3d16:	81 60       	ori	r24, 0x01	; 1
    3d18:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3d1a:	e0 e8       	ldi	r30, 0x80	; 128
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	80 81       	ld	r24, Z
    3d20:	81 60       	ori	r24, 0x01	; 1
    3d22:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3d24:	e1 eb       	ldi	r30, 0xB1	; 177
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	84 60       	ori	r24, 0x04	; 4
    3d2c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3d2e:	e0 eb       	ldi	r30, 0xB0	; 176
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	81 60       	ori	r24, 0x01	; 1
    3d36:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3d38:	ea e7       	ldi	r30, 0x7A	; 122
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	80 81       	ld	r24, Z
    3d3e:	84 60       	ori	r24, 0x04	; 4
    3d40:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3d42:	80 81       	ld	r24, Z
    3d44:	82 60       	ori	r24, 0x02	; 2
    3d46:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3d48:	80 81       	ld	r24, Z
    3d4a:	81 60       	ori	r24, 0x01	; 1
    3d4c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3d4e:	80 81       	ld	r24, Z
    3d50:	80 68       	ori	r24, 0x80	; 128
    3d52:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3d54:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3d58:	08 95       	ret

00003d5a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3d5a:	8e 30       	cpi	r24, 0x0E	; 14
    3d5c:	08 f0       	brcs	.+2      	; 0x3d60 <analogRead+0x6>
    3d5e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3d60:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    3d64:	90 e4       	ldi	r25, 0x40	; 64
    3d66:	29 9f       	mul	r18, r25
    3d68:	90 01       	movw	r18, r0
    3d6a:	11 24       	eor	r1, r1
    3d6c:	87 70       	andi	r24, 0x07	; 7
    3d6e:	82 2b       	or	r24, r18
    3d70:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3d74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3d78:	80 64       	ori	r24, 0x40	; 64
    3d7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3d7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3d82:	86 fd       	sbrc	r24, 6
    3d84:	fc cf       	rjmp	.-8      	; 0x3d7e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3d86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3d8a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
}
    3d90:	92 2b       	or	r25, r18
    3d92:	08 95       	ret

00003d94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3d94:	83 30       	cpi	r24, 0x03	; 3
    3d96:	81 f0       	breq	.+32     	; 0x3db8 <turnOffPWM+0x24>
    3d98:	28 f4       	brcc	.+10     	; 0x3da4 <turnOffPWM+0x10>
    3d9a:	81 30       	cpi	r24, 0x01	; 1
    3d9c:	99 f0       	breq	.+38     	; 0x3dc4 <turnOffPWM+0x30>
    3d9e:	82 30       	cpi	r24, 0x02	; 2
    3da0:	a1 f0       	breq	.+40     	; 0x3dca <turnOffPWM+0x36>
    3da2:	08 95       	ret
    3da4:	87 30       	cpi	r24, 0x07	; 7
    3da6:	a9 f0       	breq	.+42     	; 0x3dd2 <turnOffPWM+0x3e>
    3da8:	88 30       	cpi	r24, 0x08	; 8
    3daa:	b9 f0       	breq	.+46     	; 0x3dda <turnOffPWM+0x46>
    3dac:	84 30       	cpi	r24, 0x04	; 4
    3dae:	d1 f4       	brne	.+52     	; 0x3de4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3db0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3db4:	8f 7d       	andi	r24, 0xDF	; 223
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3db8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3dbc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3dbe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3dc2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3dc4:	84 b5       	in	r24, 0x24	; 36
    3dc6:	8f 77       	andi	r24, 0x7F	; 127
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3dca:	84 b5       	in	r24, 0x24	; 36
    3dcc:	8f 7d       	andi	r24, 0xDF	; 223
    3dce:	84 bd       	out	0x24, r24	; 36
    3dd0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3dd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3dd6:	8f 77       	andi	r24, 0x7F	; 127
    3dd8:	03 c0       	rjmp	.+6      	; 0x3de0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3dda:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3dde:	8f 7d       	andi	r24, 0xDF	; 223
    3de0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3de4:	08 95       	ret

00003de6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	fc 01       	movw	r30, r24
    3dee:	e8 5c       	subi	r30, 0xC8	; 200
    3df0:	fb 4f       	sbci	r31, 0xFB	; 251
    3df2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3df4:	fc 01       	movw	r30, r24
    3df6:	e4 5b       	subi	r30, 0xB4	; 180
    3df8:	fb 4f       	sbci	r31, 0xFB	; 251
    3dfa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3dfc:	88 23       	and	r24, r24
    3dfe:	61 f1       	breq	.+88     	; 0x3e58 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	fc 01       	movw	r30, r24
    3e08:	ec 58       	subi	r30, 0x8C	; 140
    3e0a:	fb 4f       	sbci	r31, 0xFB	; 251
    3e0c:	c5 91       	lpm	r28, Z+
    3e0e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3e10:	fc 01       	movw	r30, r24
    3e12:	e6 59       	subi	r30, 0x96	; 150
    3e14:	fb 4f       	sbci	r31, 0xFB	; 251
    3e16:	a5 91       	lpm	r26, Z+
    3e18:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3e1a:	61 11       	cpse	r22, r1
    3e1c:	09 c0       	rjmp	.+18     	; 0x3e30 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3e1e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3e20:	f8 94       	cli
		*reg &= ~bit;
    3e22:	88 81       	ld	r24, Y
    3e24:	20 95       	com	r18
    3e26:	82 23       	and	r24, r18
    3e28:	88 83       	st	Y, r24
		*out &= ~bit;
    3e2a:	ec 91       	ld	r30, X
    3e2c:	2e 23       	and	r18, r30
    3e2e:	0b c0       	rjmp	.+22     	; 0x3e46 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3e30:	62 30       	cpi	r22, 0x02	; 2
    3e32:	61 f4       	brne	.+24     	; 0x3e4c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3e34:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3e36:	f8 94       	cli
		*reg &= ~bit;
    3e38:	88 81       	ld	r24, Y
    3e3a:	32 2f       	mov	r19, r18
    3e3c:	30 95       	com	r19
    3e3e:	83 23       	and	r24, r19
    3e40:	88 83       	st	Y, r24
		*out |= bit;
    3e42:	ec 91       	ld	r30, X
    3e44:	2e 2b       	or	r18, r30
    3e46:	2c 93       	st	X, r18
		SREG = oldSREG;
    3e48:	9f bf       	out	0x3f, r25	; 63
    3e4a:	06 c0       	rjmp	.+12     	; 0x3e58 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3e4c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3e4e:	f8 94       	cli
		*reg |= bit;
    3e50:	e8 81       	ld	r30, Y
    3e52:	2e 2b       	or	r18, r30
    3e54:	28 83       	st	Y, r18
		SREG = oldSREG;
    3e56:	8f bf       	out	0x3f, r24	; 63
	}
}
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	08 95       	ret

00003e5e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3e5e:	1f 93       	push	r17
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3e64:	28 2f       	mov	r18, r24
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	f9 01       	movw	r30, r18
    3e6a:	ec 5d       	subi	r30, 0xDC	; 220
    3e6c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e6e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3e70:	f9 01       	movw	r30, r18
    3e72:	e8 5c       	subi	r30, 0xC8	; 200
    3e74:	fb 4f       	sbci	r31, 0xFB	; 251
    3e76:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3e78:	f9 01       	movw	r30, r18
    3e7a:	e4 5b       	subi	r30, 0xB4	; 180
    3e7c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e7e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3e80:	cc 23       	and	r28, r28
    3e82:	c1 f0       	breq	.+48     	; 0x3eb4 <digitalWrite+0x56>
    3e84:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3e86:	81 11       	cpse	r24, r1
    3e88:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <turnOffPWM>

	out = portOutputRegister(port);
    3e8c:	ec 2f       	mov	r30, r28
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	ee 0f       	add	r30, r30
    3e92:	ff 1f       	adc	r31, r31
    3e94:	e6 59       	subi	r30, 0x96	; 150
    3e96:	fb 4f       	sbci	r31, 0xFB	; 251
    3e98:	a5 91       	lpm	r26, Z+
    3e9a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3e9c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3e9e:	f8 94       	cli

	if (val == LOW) {
    3ea0:	11 11       	cpse	r17, r1
    3ea2:	04 c0       	rjmp	.+8      	; 0x3eac <digitalWrite+0x4e>
		*out &= ~bit;
    3ea4:	8c 91       	ld	r24, X
    3ea6:	d0 95       	com	r29
    3ea8:	d8 23       	and	r29, r24
    3eaa:	02 c0       	rjmp	.+4      	; 0x3eb0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3eac:	ec 91       	ld	r30, X
    3eae:	de 2b       	or	r29, r30
    3eb0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3eb2:	9f bf       	out	0x3f, r25	; 63
}
    3eb4:	df 91       	pop	r29
    3eb6:	cf 91       	pop	r28
    3eb8:	1f 91       	pop	r17
    3eba:	08 95       	ret

00003ebc <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3ebc:	88 5e       	subi	r24, 0xE8	; 232
    3ebe:	9e 4f       	sbci	r25, 0xFE	; 254
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	8d 91       	ld	r24, X+
    3ec4:	9c 91       	ld	r25, X
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	ed 91       	ld	r30, X+
    3eca:	fc 91       	ld	r31, X
    3ecc:	04 80       	ldd	r0, Z+4	; 0x04
    3ece:	f5 81       	ldd	r31, Z+5	; 0x05
    3ed0:	e0 2d       	mov	r30, r0
    3ed2:	09 94       	ijmp

00003ed4 <_ZN13Adafruit_FONA5writeEh>:
    3ed4:	88 5e       	subi	r24, 0xE8	; 232
    3ed6:	9e 4f       	sbci	r25, 0xFE	; 254
    3ed8:	dc 01       	movw	r26, r24
    3eda:	8d 91       	ld	r24, X+
    3edc:	9c 91       	ld	r25, X
    3ede:	dc 01       	movw	r26, r24
    3ee0:	ed 91       	ld	r30, X+
    3ee2:	fc 91       	ld	r31, X
    3ee4:	01 90       	ld	r0, Z+
    3ee6:	f0 81       	ld	r31, Z
    3ee8:	e0 2d       	mov	r30, r0
    3eea:	09 94       	ijmp

00003eec <_ZN13Adafruit_FONA4readEv>:
    3eec:	88 5e       	subi	r24, 0xE8	; 232
    3eee:	9e 4f       	sbci	r25, 0xFE	; 254
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	8d 91       	ld	r24, X+
    3ef4:	9c 91       	ld	r25, X
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	ed 91       	ld	r30, X+
    3efa:	fc 91       	ld	r31, X
    3efc:	06 80       	ldd	r0, Z+6	; 0x06
    3efe:	f7 81       	ldd	r31, Z+7	; 0x07
    3f00:	e0 2d       	mov	r30, r0
    3f02:	09 94       	ijmp

00003f04 <_ZN13Adafruit_FONA4peekEv>:
    3f04:	88 5e       	subi	r24, 0xE8	; 232
    3f06:	9e 4f       	sbci	r25, 0xFE	; 254
    3f08:	dc 01       	movw	r26, r24
    3f0a:	8d 91       	ld	r24, X+
    3f0c:	9c 91       	ld	r25, X
    3f0e:	dc 01       	movw	r26, r24
    3f10:	ed 91       	ld	r30, X+
    3f12:	fc 91       	ld	r31, X
    3f14:	00 84       	ldd	r0, Z+8	; 0x08
    3f16:	f1 85       	ldd	r31, Z+9	; 0x09
    3f18:	e0 2d       	mov	r30, r0
    3f1a:	09 94       	ijmp

00003f1c <_ZN13Adafruit_FONA5flushEv>:
    3f1c:	88 5e       	subi	r24, 0xE8	; 232
    3f1e:	9e 4f       	sbci	r25, 0xFE	; 254
    3f20:	dc 01       	movw	r26, r24
    3f22:	8d 91       	ld	r24, X+
    3f24:	9c 91       	ld	r25, X
    3f26:	dc 01       	movw	r26, r24
    3f28:	ed 91       	ld	r30, X+
    3f2a:	fc 91       	ld	r31, X
    3f2c:	02 84       	ldd	r0, Z+10	; 0x0a
    3f2e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3f30:	e0 2d       	mov	r30, r0
    3f32:	09 94       	ijmp

00003f34 <_ZN13Adafruit_FONAC1Ea>:
    3f34:	fc 01       	movw	r30, r24
    3f36:	13 82       	std	Z+3, r1	; 0x03
    3f38:	12 82       	std	Z+2, r1	; 0x02
    3f3a:	88 ee       	ldi	r24, 0xE8	; 232
    3f3c:	93 e0       	ldi	r25, 0x03	; 3
    3f3e:	a0 e0       	ldi	r26, 0x00	; 0
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	84 83       	std	Z+4, r24	; 0x04
    3f44:	95 83       	std	Z+5, r25	; 0x05
    3f46:	a6 83       	std	Z+6, r26	; 0x06
    3f48:	b7 83       	std	Z+7, r27	; 0x07
    3f4a:	85 e8       	ldi	r24, 0x85	; 133
    3f4c:	92 e0       	ldi	r25, 0x02	; 2
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	80 83       	st	Z, r24
    3f52:	64 87       	std	Z+12, r22	; 0x0c
    3f54:	df 01       	movw	r26, r30
    3f56:	a3 5f       	subi	r26, 0xF3	; 243
    3f58:	be 4f       	sbci	r27, 0xFE	; 254
    3f5a:	8e ed       	ldi	r24, 0xDE	; 222
    3f5c:	97 e0       	ldi	r25, 0x07	; 7
    3f5e:	11 96       	adiw	r26, 0x01	; 1
    3f60:	9c 93       	st	X, r25
    3f62:	8e 93       	st	-X, r24
    3f64:	12 96       	adiw	r26, 0x02	; 2
    3f66:	11 96       	adiw	r26, 0x01	; 1
    3f68:	1c 92       	st	X, r1
    3f6a:	1e 92       	st	-X, r1
    3f6c:	12 96       	adiw	r26, 0x02	; 2
    3f6e:	11 96       	adiw	r26, 0x01	; 1
    3f70:	1c 92       	st	X, r1
    3f72:	1e 92       	st	-X, r1
    3f74:	17 96       	adiw	r26, 0x07	; 7
    3f76:	11 96       	adiw	r26, 0x01	; 1
    3f78:	1c 92       	st	X, r1
    3f7a:	1e 92       	st	-X, r1
    3f7c:	15 97       	sbiw	r26, 0x05	; 5
    3f7e:	1c 92       	st	X, r1
    3f80:	11 96       	adiw	r26, 0x01	; 1
    3f82:	89 ed       	ldi	r24, 0xD9	; 217
    3f84:	97 e0       	ldi	r25, 0x07	; 7
    3f86:	8d 93       	st	X+, r24
    3f88:	9c 93       	st	X, r25
    3f8a:	ea 5e       	subi	r30, 0xEA	; 234
    3f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8e:	86 ed       	ldi	r24, 0xD6	; 214
    3f90:	97 e0       	ldi	r25, 0x07	; 7
    3f92:	91 83       	std	Z+1, r25	; 0x01
    3f94:	80 83       	st	Z, r24
    3f96:	08 95       	ret

00003f98 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    3f98:	fc 01       	movw	r30, r24
    3f9a:	e3 5f       	subi	r30, 0xF3	; 243
    3f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9e:	71 83       	std	Z+1, r23	; 0x01
    3fa0:	60 83       	st	Z, r22
    3fa2:	32 96       	adiw	r30, 0x02	; 2
    3fa4:	51 83       	std	Z+1, r21	; 0x01
    3fa6:	40 83       	st	Z, r20
    3fa8:	32 96       	adiw	r30, 0x02	; 2
    3faa:	31 83       	std	Z+1, r19	; 0x01
    3fac:	20 83       	st	Z, r18
    3fae:	08 95       	ret

00003fb0 <_ZN13Adafruit_FONA10flushInputEv>:
    3fb0:	0f 93       	push	r16
    3fb2:	1f 93       	push	r17
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	ec 01       	movw	r28, r24
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	8c 01       	movw	r16, r24
    3fc0:	0f 5f       	subi	r16, 0xFF	; 255
    3fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc4:	88 97       	sbiw	r24, 0x28	; 40
    3fc6:	d8 f4       	brcc	.+54     	; 0x3ffe <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    3fc8:	e8 81       	ld	r30, Y
    3fca:	f9 81       	ldd	r31, Y+1	; 0x01
    3fcc:	04 80       	ldd	r0, Z+4	; 0x04
    3fce:	f5 81       	ldd	r31, Z+5	; 0x05
    3fd0:	e0 2d       	mov	r30, r0
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	09 95       	icall
    3fd6:	89 2b       	or	r24, r25
    3fd8:	51 f0       	breq	.+20     	; 0x3fee <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    3fda:	e8 81       	ld	r30, Y
    3fdc:	f9 81       	ldd	r31, Y+1	; 0x01
    3fde:	06 80       	ldd	r0, Z+6	; 0x06
    3fe0:	f7 81       	ldd	r31, Z+7	; 0x07
    3fe2:	e0 2d       	mov	r30, r0
    3fe4:	ce 01       	movw	r24, r28
    3fe6:	09 95       	icall
    3fe8:	00 e0       	ldi	r16, 0x00	; 0
    3fea:	10 e0       	ldi	r17, 0x00	; 0
    3fec:	ed cf       	rjmp	.-38     	; 0x3fc8 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    3fee:	61 e0       	ldi	r22, 0x01	; 1
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    3ffa:	c8 01       	movw	r24, r16
    3ffc:	e0 cf       	rjmp	.-64     	; 0x3fbe <_ZN13Adafruit_FONA10flushInputEv+0xe>
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	08 95       	ret

00004008 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    4008:	ff 92       	push	r15
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	ec 01       	movw	r28, r24
    4014:	8b 01       	movw	r16, r22
    4016:	f4 2e       	mov	r15, r20
    4018:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    401c:	6c e8       	ldi	r22, 0x8C	; 140
    401e:	75 e0       	ldi	r23, 0x05	; 5
    4020:	89 ec       	ldi	r24, 0xC9	; 201
    4022:	96 e0       	ldi	r25, 0x06	; 6
    4024:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4028:	6e e7       	ldi	r22, 0x7E	; 126
    402a:	75 e0       	ldi	r23, 0x05	; 5
    402c:	89 ec       	ldi	r24, 0xC9	; 201
    402e:	96 e0       	ldi	r25, 0x06	; 6
    4030:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4034:	b8 01       	movw	r22, r16
    4036:	89 ec       	ldi	r24, 0xC9	; 201
    4038:	96 e0       	ldi	r25, 0x06	; 6
    403a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    403e:	62 e2       	ldi	r22, 0x22	; 34
    4040:	89 ec       	ldi	r24, 0xC9	; 201
    4042:	96 e0       	ldi	r25, 0x06	; 6
    4044:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN5Print7printlnEc>
    4048:	c8 5e       	subi	r28, 0xE8	; 232
    404a:	de 4f       	sbci	r29, 0xFE	; 254
    404c:	60 e7       	ldi	r22, 0x70	; 112
    404e:	75 e0       	ldi	r23, 0x05	; 5
    4050:	88 81       	ld	r24, Y
    4052:	99 81       	ldd	r25, Y+1	; 0x01
    4054:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4058:	b8 01       	movw	r22, r16
    405a:	88 81       	ld	r24, Y
    405c:	99 81       	ldd	r25, Y+1	; 0x01
    405e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4062:	88 81       	ld	r24, Y
    4064:	99 81       	ldd	r25, Y+1	; 0x01
    4066:	ff 20       	and	r15, r15
    4068:	19 f0       	breq	.+6      	; 0x4070 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    406a:	6c e6       	ldi	r22, 0x6C	; 108
    406c:	75 e0       	ldi	r23, 0x05	; 5
    406e:	02 c0       	rjmp	.+4      	; 0x4074 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    4070:	69 e6       	ldi	r22, 0x69	; 105
    4072:	75 e0       	ldi	r23, 0x05	; 5
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	ff 90       	pop	r15
    407e:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>

00004082 <_ZN13Adafruit_FONA8readlineEjb>:
    4082:	9f 92       	push	r9
    4084:	af 92       	push	r10
    4086:	bf 92       	push	r11
    4088:	cf 92       	push	r12
    408a:	df 92       	push	r13
    408c:	ef 92       	push	r14
    408e:	ff 92       	push	r15
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	7c 01       	movw	r14, r24
    409a:	94 2e       	mov	r9, r20
    409c:	8b 01       	movw	r16, r22
    409e:	00 0f       	add	r16, r16
    40a0:	11 1f       	adc	r17, r17
    40a2:	00 0f       	add	r16, r16
    40a4:	11 1f       	adc	r17, r17
    40a6:	c0 e0       	ldi	r28, 0x00	; 0
    40a8:	d0 e0       	ldi	r29, 0x00	; 0
    40aa:	57 01       	movw	r10, r14
    40ac:	88 ee       	ldi	r24, 0xE8	; 232
    40ae:	a8 1a       	sub	r10, r24
    40b0:	8e ef       	ldi	r24, 0xFE	; 254
    40b2:	b8 0a       	sbc	r11, r24
    40b4:	01 15       	cp	r16, r1
    40b6:	11 05       	cpc	r17, r1
    40b8:	09 f4       	brne	.+2      	; 0x40bc <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    40ba:	50 c0       	rjmp	.+160    	; 0x415c <_ZN13Adafruit_FONA8readlineEjb+0xda>
    40bc:	ce 3f       	cpi	r28, 0xFE	; 254
    40be:	d1 05       	cpc	r29, r1
    40c0:	80 f0       	brcs	.+32     	; 0x40e2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    40c2:	6e eb       	ldi	r22, 0xBE	; 190
    40c4:	74 e0       	ldi	r23, 0x04	; 4
    40c6:	22 c0       	rjmp	.+68     	; 0x410c <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    40c8:	f5 01       	movw	r30, r10
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	dc 01       	movw	r26, r24
    40d0:	ed 91       	ld	r30, X+
    40d2:	fc 91       	ld	r31, X
    40d4:	06 80       	ldd	r0, Z+6	; 0x06
    40d6:	f7 81       	ldd	r31, Z+7	; 0x07
    40d8:	e0 2d       	mov	r30, r0
    40da:	09 95       	icall
    40dc:	6c 01       	movw	r12, r24
    40de:	8d 30       	cpi	r24, 0x0D	; 13
    40e0:	69 f4       	brne	.+26     	; 0x40fc <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    40e2:	d5 01       	movw	r26, r10
    40e4:	8d 91       	ld	r24, X+
    40e6:	9c 91       	ld	r25, X
    40e8:	dc 01       	movw	r26, r24
    40ea:	ed 91       	ld	r30, X+
    40ec:	fc 91       	ld	r31, X
    40ee:	04 80       	ldd	r0, Z+4	; 0x04
    40f0:	f5 81       	ldd	r31, Z+5	; 0x05
    40f2:	e0 2d       	mov	r30, r0
    40f4:	09 95       	icall
    40f6:	89 2b       	or	r24, r25
    40f8:	39 f7       	brne	.-50     	; 0x40c8 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    40fa:	26 c0       	rjmp	.+76     	; 0x4148 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    40fc:	8a 30       	cpi	r24, 0x0A	; 10
    40fe:	59 f4       	brne	.+22     	; 0x4116 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4100:	20 97       	sbiw	r28, 0x00	; 0
    4102:	79 f3       	breq	.-34     	; 0x40e2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4104:	91 10       	cpse	r9, r1
    4106:	07 c0       	rjmp	.+14     	; 0x4116 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4108:	66 eb       	ldi	r22, 0xB6	; 182
    410a:	74 e0       	ldi	r23, 0x04	; 4
    410c:	89 ec       	ldi	r24, 0xC9	; 201
    410e:	96 e0       	ldi	r25, 0x06	; 6
    4110:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4114:	23 c0       	rjmp	.+70     	; 0x415c <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4116:	f7 01       	movw	r30, r14
    4118:	ec 0f       	add	r30, r28
    411a:	fd 1f       	adc	r31, r29
    411c:	c6 86       	std	Z+14, r12	; 0x0e
    411e:	b6 01       	movw	r22, r12
    4120:	77 27       	eor	r23, r23
    4122:	40 e1       	ldi	r20, 0x10	; 16
    4124:	50 e0       	ldi	r21, 0x00	; 0
    4126:	89 ec       	ldi	r24, 0xC9	; 201
    4128:	96 e0       	ldi	r25, 0x06	; 6
    412a:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <_ZN5Print5printEii>
    412e:	60 e3       	ldi	r22, 0x30	; 48
    4130:	72 e0       	ldi	r23, 0x02	; 2
    4132:	89 ec       	ldi	r24, 0xC9	; 201
    4134:	96 e0       	ldi	r25, 0x06	; 6
    4136:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    413a:	6c 2d       	mov	r22, r12
    413c:	89 ec       	ldi	r24, 0xC9	; 201
    413e:	96 e0       	ldi	r25, 0x06	; 6
    4140:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN5Print7printlnEc>
    4144:	21 96       	adiw	r28, 0x01	; 1
    4146:	cd cf       	rjmp	.-102    	; 0x40e2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4148:	01 50       	subi	r16, 0x01	; 1
    414a:	11 09       	sbc	r17, r1
    414c:	e9 f2       	breq	.-70     	; 0x4108 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    414e:	61 e0       	ldi	r22, 0x01	; 1
    4150:	70 e0       	ldi	r23, 0x00	; 0
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    415a:	ac cf       	rjmp	.-168    	; 0x40b4 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    415c:	f7 01       	movw	r30, r14
    415e:	ec 0f       	add	r30, r28
    4160:	fd 1f       	adc	r31, r29
    4162:	16 86       	std	Z+14, r1	; 0x0e
    4164:	8c 2f       	mov	r24, r28
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	0f 91       	pop	r16
    416e:	ff 90       	pop	r15
    4170:	ef 90       	pop	r14
    4172:	df 90       	pop	r13
    4174:	cf 90       	pop	r12
    4176:	bf 90       	pop	r11
    4178:	af 90       	pop	r10
    417a:	9f 90       	pop	r9
    417c:	08 95       	ret

0000417e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	ec 01       	movw	r28, r24
    4188:	8b 01       	movw	r16, r22
    418a:	ba 01       	movw	r22, r20
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4192:	64 ec       	ldi	r22, 0xC4	; 196
    4194:	74 e0       	ldi	r23, 0x04	; 4
    4196:	89 ec       	ldi	r24, 0xC9	; 201
    4198:	96 e0       	ldi	r25, 0x06	; 6
    419a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    419e:	2e 96       	adiw	r28, 0x0e	; 14
    41a0:	be 01       	movw	r22, r28
    41a2:	89 ec       	ldi	r24, 0xC9	; 201
    41a4:	96 e0       	ldi	r25, 0x06	; 6
    41a6:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    41aa:	b8 01       	movw	r22, r16
    41ac:	ce 01       	movw	r24, r28
    41ae:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcmp_P>
    41b2:	21 e0       	ldi	r18, 0x01	; 1
    41b4:	89 2b       	or	r24, r25
    41b6:	09 f0       	breq	.+2      	; 0x41ba <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	82 2f       	mov	r24, r18
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	08 95       	ret

000041c6 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	ec 01       	movw	r28, r24
    41cc:	fc 01       	movw	r30, r24
    41ce:	e8 5e       	subi	r30, 0xE8	; 232
    41d0:	fe 4f       	sbci	r31, 0xFE	; 254
    41d2:	66 23       	and	r22, r22
    41d4:	31 f0       	breq	.+12     	; 0x41e2 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    41d6:	62 e2       	ldi	r22, 0x22	; 34
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN5Print7printlnEc>
    41e0:	04 c0       	rjmp	.+8      	; 0x41ea <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    41e2:	80 81       	ld	r24, Z
    41e4:	91 81       	ldd	r25, Z+1	; 0x01
    41e6:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    41ea:	fe 01       	movw	r30, r28
    41ec:	ea 5e       	subi	r30, 0xEA	; 234
    41ee:	fe 4f       	sbci	r31, 0xFE	; 254
    41f0:	60 81       	ld	r22, Z
    41f2:	71 81       	ldd	r23, Z+1	; 0x01
    41f4:	40 e1       	ldi	r20, 0x10	; 16
    41f6:	57 e2       	ldi	r21, 0x27	; 39
    41f8:	ce 01       	movw	r24, r28
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	0c 94 bf 20 	jmp	0x417e	; 0x417e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004202 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	ec 01       	movw	r28, r24
    420c:	8a 01       	movw	r16, r20
    420e:	41 e0       	ldi	r20, 0x01	; 1
    4210:	0e 94 04 20 	call	0x4008	; 0x4008 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4214:	fe 01       	movw	r30, r28
    4216:	e8 5e       	subi	r30, 0xE8	; 232
    4218:	fe 4f       	sbci	r31, 0xFE	; 254
    421a:	b8 01       	movw	r22, r16
    421c:	80 81       	ld	r24, Z
    421e:	91 81       	ldd	r25, Z+1	; 0x01
    4220:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    4224:	61 e0       	ldi	r22, 0x01	; 1
    4226:	ce 01       	movw	r24, r28
    4228:	df 91       	pop	r29
    422a:	cf 91       	pop	r28
    422c:	1f 91       	pop	r17
    422e:	0f 91       	pop	r16
    4230:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004234 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    4234:	0f 93       	push	r16
    4236:	1f 93       	push	r17
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	ec 01       	movw	r28, r24
    423e:	8a 01       	movw	r16, r20
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	0e 94 04 20 	call	0x4008	; 0x4008 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4246:	fe 01       	movw	r30, r28
    4248:	e8 5e       	subi	r30, 0xE8	; 232
    424a:	fe 4f       	sbci	r31, 0xFE	; 254
    424c:	b8 01       	movw	r22, r16
    424e:	80 81       	ld	r24, Z
    4250:	91 81       	ldd	r25, Z+1	; 0x01
    4252:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	ce 01       	movw	r24, r28
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	1f 91       	pop	r17
    4260:	0f 91       	pop	r16
    4262:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004266 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    4266:	cf 92       	push	r12
    4268:	df 92       	push	r13
    426a:	ef 92       	push	r14
    426c:	ff 92       	push	r15
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	ec 01       	movw	r28, r24
    4274:	69 01       	movw	r12, r18
    4276:	7a 01       	movw	r14, r20
    4278:	40 e0       	ldi	r20, 0x00	; 0
    427a:	0e 94 04 20 	call	0x4008	; 0x4008 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    427e:	fe 01       	movw	r30, r28
    4280:	e8 5e       	subi	r30, 0xE8	; 232
    4282:	fe 4f       	sbci	r31, 0xFE	; 254
    4284:	2a e0       	ldi	r18, 0x0A	; 10
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	b7 01       	movw	r22, r14
    428a:	a6 01       	movw	r20, r12
    428c:	80 81       	ld	r24, Z
    428e:	91 81       	ldd	r25, Z+1	; 0x01
    4290:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_ZN5Print5printEli>
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	ce 01       	movw	r24, r28
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	ff 90       	pop	r15
    429e:	ef 90       	pop	r14
    42a0:	df 90       	pop	r13
    42a2:	cf 90       	pop	r12
    42a4:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000042a8 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    42a8:	4f 92       	push	r4
    42aa:	5f 92       	push	r5
    42ac:	6f 92       	push	r6
    42ae:	7f 92       	push	r7
    42b0:	8f 92       	push	r8
    42b2:	9f 92       	push	r9
    42b4:	af 92       	push	r10
    42b6:	bf 92       	push	r11
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	7c 01       	movw	r14, r24
    42c6:	2a 01       	movw	r4, r20
    42c8:	3b 01       	movw	r6, r22
    42ca:	48 01       	movw	r8, r16
    42cc:	59 01       	movw	r10, r18
    42ce:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    42d2:	62 e6       	ldi	r22, 0x62	; 98
    42d4:	75 e0       	ldi	r23, 0x05	; 5
    42d6:	89 ec       	ldi	r24, 0xC9	; 201
    42d8:	96 e0       	ldi	r25, 0x06	; 6
    42da:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    42de:	65 e5       	ldi	r22, 0x55	; 85
    42e0:	75 e0       	ldi	r23, 0x05	; 5
    42e2:	89 ec       	ldi	r24, 0xC9	; 201
    42e4:	96 e0       	ldi	r25, 0x06	; 6
    42e6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    42ea:	2a e0       	ldi	r18, 0x0A	; 10
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	b3 01       	movw	r22, r6
    42f0:	a2 01       	movw	r20, r4
    42f2:	89 ec       	ldi	r24, 0xC9	; 201
    42f4:	96 e0       	ldi	r25, 0x06	; 6
    42f6:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>
    42fa:	6c e2       	ldi	r22, 0x2C	; 44
    42fc:	89 ec       	ldi	r24, 0xC9	; 201
    42fe:	96 e0       	ldi	r25, 0x06	; 6
    4300:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZN5Print5printEc>
    4304:	2a e0       	ldi	r18, 0x0A	; 10
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	b5 01       	movw	r22, r10
    430a:	a4 01       	movw	r20, r8
    430c:	89 ec       	ldi	r24, 0xC9	; 201
    430e:	96 e0       	ldi	r25, 0x06	; 6
    4310:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN5Print7printlnEmi>
    4314:	e7 01       	movw	r28, r14
    4316:	c8 5e       	subi	r28, 0xE8	; 232
    4318:	de 4f       	sbci	r29, 0xFE	; 254
    431a:	68 e4       	ldi	r22, 0x48	; 72
    431c:	75 e0       	ldi	r23, 0x05	; 5
    431e:	88 81       	ld	r24, Y
    4320:	99 81       	ldd	r25, Y+1	; 0x01
    4322:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4326:	2a e0       	ldi	r18, 0x0A	; 10
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	b3 01       	movw	r22, r6
    432c:	a2 01       	movw	r20, r4
    432e:	88 81       	ld	r24, Y
    4330:	99 81       	ldd	r25, Y+1	; 0x01
    4332:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print5printEmi>
    4336:	6a e3       	ldi	r22, 0x3A	; 58
    4338:	72 e0       	ldi	r23, 0x02	; 2
    433a:	88 81       	ld	r24, Y
    433c:	99 81       	ldd	r25, Y+1	; 0x01
    433e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    4342:	2a e0       	ldi	r18, 0x0A	; 10
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	b5 01       	movw	r22, r10
    4348:	a4 01       	movw	r20, r8
    434a:	88 81       	ld	r24, Y
    434c:	99 81       	ldd	r25, Y+1	; 0x01
    434e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN5Print7printlnEmi>
    4352:	40 e1       	ldi	r20, 0x10	; 16
    4354:	57 e2       	ldi	r21, 0x27	; 39
    4356:	6f e3       	ldi	r22, 0x3F	; 63
    4358:	75 e0       	ldi	r23, 0x05	; 5
    435a:	c7 01       	movw	r24, r14
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	ff 90       	pop	r15
    4366:	ef 90       	pop	r14
    4368:	bf 90       	pop	r11
    436a:	af 90       	pop	r10
    436c:	9f 90       	pop	r9
    436e:	8f 90       	pop	r8
    4370:	7f 90       	pop	r7
    4372:	6f 90       	pop	r6
    4374:	5f 90       	pop	r5
    4376:	4f 90       	pop	r4
    4378:	0c 94 bf 20 	jmp	0x417e	; 0x417e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

0000437c <_ZN13Adafruit_FONA8getReplyEPcj>:
    437c:	ef 92       	push	r14
    437e:	ff 92       	push	r15
    4380:	0f 93       	push	r16
    4382:	1f 93       	push	r17
    4384:	cf 93       	push	r28
    4386:	df 93       	push	r29
    4388:	ec 01       	movw	r28, r24
    438a:	8b 01       	movw	r16, r22
    438c:	7a 01       	movw	r14, r20
    438e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    4392:	6f ea       	ldi	r22, 0xAF	; 175
    4394:	74 e0       	ldi	r23, 0x04	; 4
    4396:	89 ec       	ldi	r24, 0xC9	; 201
    4398:	96 e0       	ldi	r25, 0x06	; 6
    439a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    439e:	b8 01       	movw	r22, r16
    43a0:	89 ec       	ldi	r24, 0xC9	; 201
    43a2:	96 e0       	ldi	r25, 0x06	; 6
    43a4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    43a8:	fe 01       	movw	r30, r28
    43aa:	e8 5e       	subi	r30, 0xE8	; 232
    43ac:	fe 4f       	sbci	r31, 0xFE	; 254
    43ae:	b8 01       	movw	r22, r16
    43b0:	80 81       	ld	r24, Z
    43b2:	91 81       	ldd	r25, Z+1	; 0x01
    43b4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	b7 01       	movw	r22, r14
    43bc:	ce 01       	movw	r24, r28
    43be:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    43c2:	18 2f       	mov	r17, r24
    43c4:	68 ea       	ldi	r22, 0xA8	; 168
    43c6:	74 e0       	ldi	r23, 0x04	; 4
    43c8:	89 ec       	ldi	r24, 0xC9	; 201
    43ca:	96 e0       	ldi	r25, 0x06	; 6
    43cc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    43d0:	be 01       	movw	r22, r28
    43d2:	62 5f       	subi	r22, 0xF2	; 242
    43d4:	7f 4f       	sbci	r23, 0xFF	; 255
    43d6:	89 ec       	ldi	r24, 0xC9	; 201
    43d8:	96 e0       	ldi	r25, 0x06	; 6
    43da:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    43de:	81 2f       	mov	r24, r17
    43e0:	df 91       	pop	r29
    43e2:	cf 91       	pop	r28
    43e4:	1f 91       	pop	r17
    43e6:	0f 91       	pop	r16
    43e8:	ff 90       	pop	r15
    43ea:	ef 90       	pop	r14
    43ec:	08 95       	ret

000043ee <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    43ee:	ef 92       	push	r14
    43f0:	ff 92       	push	r15
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	ec 01       	movw	r28, r24
    43fc:	8b 01       	movw	r16, r22
    43fe:	7a 01       	movw	r14, r20
    4400:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    4404:	61 ea       	ldi	r22, 0xA1	; 161
    4406:	74 e0       	ldi	r23, 0x04	; 4
    4408:	89 ec       	ldi	r24, 0xC9	; 201
    440a:	96 e0       	ldi	r25, 0x06	; 6
    440c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4410:	b8 01       	movw	r22, r16
    4412:	89 ec       	ldi	r24, 0xC9	; 201
    4414:	96 e0       	ldi	r25, 0x06	; 6
    4416:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
    441a:	fe 01       	movw	r30, r28
    441c:	e8 5e       	subi	r30, 0xE8	; 232
    441e:	fe 4f       	sbci	r31, 0xFE	; 254
    4420:	b8 01       	movw	r22, r16
    4422:	80 81       	ld	r24, Z
    4424:	91 81       	ldd	r25, Z+1	; 0x01
    4426:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	b7 01       	movw	r22, r14
    442e:	ce 01       	movw	r24, r28
    4430:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4434:	18 2f       	mov	r17, r24
    4436:	6a e9       	ldi	r22, 0x9A	; 154
    4438:	74 e0       	ldi	r23, 0x04	; 4
    443a:	89 ec       	ldi	r24, 0xC9	; 201
    443c:	96 e0       	ldi	r25, 0x06	; 6
    443e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4442:	be 01       	movw	r22, r28
    4444:	62 5f       	subi	r22, 0xF2	; 242
    4446:	7f 4f       	sbci	r23, 0xFF	; 255
    4448:	89 ec       	ldi	r24, 0xC9	; 201
    444a:	96 e0       	ldi	r25, 0x06	; 6
    444c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4450:	81 2f       	mov	r24, r17
    4452:	df 91       	pop	r29
    4454:	cf 91       	pop	r28
    4456:	1f 91       	pop	r17
    4458:	0f 91       	pop	r16
    445a:	ff 90       	pop	r15
    445c:	ef 90       	pop	r14
    445e:	08 95       	ret

00004460 <_ZN13Adafruit_FONA9GPSstatusEv>:
    4460:	0f 93       	push	r16
    4462:	1f 93       	push	r17
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	8c 01       	movw	r16, r24
    446a:	44 ef       	ldi	r20, 0xF4	; 244
    446c:	51 e0       	ldi	r21, 0x01	; 1
    446e:	6b e9       	ldi	r22, 0x9B	; 155
    4470:	76 e0       	ldi	r23, 0x06	; 6
    4472:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4476:	60 e9       	ldi	r22, 0x90	; 144
    4478:	76 e0       	ldi	r23, 0x06	; 6
    447a:	c8 01       	movw	r24, r16
    447c:	0e 96       	adiw	r24, 0x0e	; 14
    447e:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4482:	ec 01       	movw	r28, r24
    4484:	89 2b       	or	r24, r25
    4486:	71 f0       	breq	.+28     	; 0x44a4 <_ZN13Adafruit_FONA9GPSstatusEv+0x44>
    4488:	40 e0       	ldi	r20, 0x00	; 0
    448a:	64 ef       	ldi	r22, 0xF4	; 244
    448c:	71 e0       	ldi	r23, 0x01	; 1
    448e:	c8 01       	movw	r24, r16
    4490:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4494:	8a 85       	ldd	r24, Y+10	; 0x0a
    4496:	80 33       	cpi	r24, 0x30	; 48
    4498:	39 f0       	breq	.+14     	; 0x44a8 <_ZN13Adafruit_FONA9GPSstatusEv+0x48>
    449a:	8c 85       	ldd	r24, Y+12	; 0x0c
    449c:	81 33       	cpi	r24, 0x31	; 49
    449e:	31 f0       	breq	.+12     	; 0x44ac <_ZN13Adafruit_FONA9GPSstatusEv+0x4c>
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	05 c0       	rjmp	.+10     	; 0x44ae <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    44a4:	8f ef       	ldi	r24, 0xFF	; 255
    44a6:	03 c0       	rjmp	.+6      	; 0x44ae <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	01 c0       	rjmp	.+2      	; 0x44ae <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    44ac:	83 e0       	ldi	r24, 0x03	; 3
    44ae:	df 91       	pop	r29
    44b0:	cf 91       	pop	r28
    44b2:	1f 91       	pop	r17
    44b4:	0f 91       	pop	r16
    44b6:	08 95       	ret

000044b8 <_ZN13Adafruit_FONA6getGPSEhPch>:
    44b8:	cf 92       	push	r12
    44ba:	df 92       	push	r13
    44bc:	ef 92       	push	r14
    44be:	ff 92       	push	r15
    44c0:	0f 93       	push	r16
    44c2:	1f 93       	push	r17
    44c4:	cf 93       	push	r28
    44c6:	8c 01       	movw	r16, r24
    44c8:	7a 01       	movw	r14, r20
    44ca:	c2 2f       	mov	r28, r18
    44cc:	44 ef       	ldi	r20, 0xF4	; 244
    44ce:	51 e0       	ldi	r21, 0x01	; 1
    44d0:	65 e8       	ldi	r22, 0x85	; 133
    44d2:	76 e0       	ldi	r23, 0x06	; 6
    44d4:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    44d8:	60 e8       	ldi	r22, 0x80	; 128
    44da:	76 e0       	ldi	r23, 0x06	; 6
    44dc:	c8 01       	movw	r24, r16
    44de:	0e 96       	adiw	r24, 0x0e	; 14
    44e0:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    44e4:	00 97       	sbiw	r24, 0x00	; 0
    44e6:	21 f4       	brne	.+8      	; 0x44f0 <_ZN13Adafruit_FONA6getGPSEhPch+0x38>
    44e8:	f7 01       	movw	r30, r14
    44ea:	10 82       	st	Z, r1
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	24 c0       	rjmp	.+72     	; 0x4538 <_ZN13Adafruit_FONA6getGPSEhPch+0x80>
    44f0:	bc 01       	movw	r22, r24
    44f2:	6a 5f       	subi	r22, 0xFA	; 250
    44f4:	7f 4f       	sbci	r23, 0xFF	; 255
    44f6:	fb 01       	movw	r30, r22
    44f8:	01 90       	ld	r0, Z+
    44fa:	00 20       	and	r0, r0
    44fc:	e9 f7       	brne	.-6      	; 0x44f8 <_ZN13Adafruit_FONA6getGPSEhPch+0x40>
    44fe:	31 97       	sbiw	r30, 0x01	; 1
    4500:	e6 1b       	sub	r30, r22
    4502:	f7 0b       	sbc	r31, r23
    4504:	8c 2f       	mov	r24, r28
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	e8 17       	cp	r30, r24
    450c:	f9 07       	cpc	r31, r25
    450e:	10 f4       	brcc	.+4      	; 0x4514 <_ZN13Adafruit_FONA6getGPSEhPch+0x5c>
    4510:	c1 50       	subi	r28, 0x01	; 1
    4512:	01 c0       	rjmp	.+2      	; 0x4516 <_ZN13Adafruit_FONA6getGPSEhPch+0x5e>
    4514:	ce 2f       	mov	r28, r30
    4516:	cc 2e       	mov	r12, r28
    4518:	d1 2c       	mov	r13, r1
    451a:	a6 01       	movw	r20, r12
    451c:	c7 01       	movw	r24, r14
    451e:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <strncpy>
    4522:	f7 01       	movw	r30, r14
    4524:	ec 0d       	add	r30, r12
    4526:	fd 1d       	adc	r31, r13
    4528:	10 82       	st	Z, r1
    452a:	40 e0       	ldi	r20, 0x00	; 0
    452c:	64 ef       	ldi	r22, 0xF4	; 244
    452e:	71 e0       	ldi	r23, 0x01	; 1
    4530:	c8 01       	movw	r24, r16
    4532:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4536:	8c 2f       	mov	r24, r28
    4538:	cf 91       	pop	r28
    453a:	1f 91       	pop	r17
    453c:	0f 91       	pop	r16
    453e:	ff 90       	pop	r15
    4540:	ef 90       	pop	r14
    4542:	df 90       	pop	r13
    4544:	cf 90       	pop	r12
    4546:	08 95       	ret

00004548 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>:
    4548:	2f 92       	push	r2
    454a:	3f 92       	push	r3
    454c:	4f 92       	push	r4
    454e:	5f 92       	push	r5
    4550:	6f 92       	push	r6
    4552:	7f 92       	push	r7
    4554:	8f 92       	push	r8
    4556:	9f 92       	push	r9
    4558:	af 92       	push	r10
    455a:	bf 92       	push	r11
    455c:	cf 92       	push	r12
    455e:	df 92       	push	r13
    4560:	ef 92       	push	r14
    4562:	ff 92       	push	r15
    4564:	0f 93       	push	r16
    4566:	1f 93       	push	r17
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	cd b7       	in	r28, 0x3d	; 61
    456e:	de b7       	in	r29, 0x3e	; 62
    4570:	ca 57       	subi	r28, 0x7A	; 122
    4572:	d1 09       	sbc	r29, r1
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	5c 01       	movw	r10, r24
    4580:	1b 01       	movw	r2, r22
    4582:	eb 96       	adiw	r28, 0x3b	; 59
    4584:	5f af       	std	Y+63, r21	; 0x3f
    4586:	4e af       	std	Y+62, r20	; 0x3e
    4588:	eb 97       	sbiw	r28, 0x3b	; 59
    458a:	39 01       	movw	r6, r18
    458c:	28 01       	movw	r4, r16
    458e:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA9GPSstatusEv>
    4592:	82 30       	cpi	r24, 0x02	; 2
    4594:	14 f4       	brge	.+4      	; 0x459a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x52>
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	8a c0       	rjmp	.+276    	; 0x46ae <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x166>
    459a:	28 e7       	ldi	r18, 0x78	; 120
    459c:	ae 01       	movw	r20, r28
    459e:	4f 5f       	subi	r20, 0xFF	; 255
    45a0:	5f 4f       	sbci	r21, 0xFF	; 255
    45a2:	60 e2       	ldi	r22, 0x20	; 32
    45a4:	c5 01       	movw	r24, r10
    45a6:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <_ZN13Adafruit_FONA6getGPSEhPch>
    45aa:	88 23       	and	r24, r24
    45ac:	a1 f3       	breq	.-24     	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45ae:	6a e3       	ldi	r22, 0x3A	; 58
    45b0:	72 e0       	ldi	r23, 0x02	; 2
    45b2:	ce 01       	movw	r24, r28
    45b4:	01 96       	adiw	r24, 0x01	; 1
    45b6:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    45ba:	89 2b       	or	r24, r25
    45bc:	61 f3       	breq	.-40     	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45be:	6a e3       	ldi	r22, 0x3A	; 58
    45c0:	72 e0       	ldi	r23, 0x02	; 2
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    45ca:	89 2b       	or	r24, r25
    45cc:	21 f3       	breq	.-56     	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45ce:	6a e3       	ldi	r22, 0x3A	; 58
    45d0:	72 e0       	ldi	r23, 0x02	; 2
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    45da:	4c 01       	movw	r8, r24
    45dc:	89 2b       	or	r24, r25
    45de:	d9 f2       	breq	.-74     	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45e0:	6a e3       	ldi	r22, 0x3A	; 58
    45e2:	72 e0       	ldi	r23, 0x02	; 2
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    45ec:	5c 01       	movw	r10, r24
    45ee:	89 2b       	or	r24, r25
    45f0:	91 f2       	breq	.-92     	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45f2:	6a e3       	ldi	r22, 0x3A	; 58
    45f4:	72 e0       	ldi	r23, 0x02	; 2
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    45fe:	8c 01       	movw	r16, r24
    4600:	89 2b       	or	r24, r25
    4602:	49 f2       	breq	.-110    	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4604:	4e e0       	ldi	r20, 0x0E	; 14
    4606:	50 e0       	ldi	r21, 0x00	; 0
    4608:	b4 01       	movw	r22, r8
    460a:	c6 01       	movw	r24, r12
    460c:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <strncpy>
    4610:	f6 01       	movw	r30, r12
    4612:	16 86       	std	Z+14, r1	; 0x0e
    4614:	c5 01       	movw	r24, r10
    4616:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <atof>
    461a:	f1 01       	movw	r30, r2
    461c:	60 83       	st	Z, r22
    461e:	71 83       	std	Z+1, r23	; 0x01
    4620:	82 83       	std	Z+2, r24	; 0x02
    4622:	93 83       	std	Z+3, r25	; 0x03
    4624:	c8 01       	movw	r24, r16
    4626:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <atof>
    462a:	eb 96       	adiw	r28, 0x3b	; 59
    462c:	ee ad       	ldd	r30, Y+62	; 0x3e
    462e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4630:	eb 97       	sbiw	r28, 0x3b	; 59
    4632:	60 83       	st	Z, r22
    4634:	71 83       	std	Z+1, r23	; 0x01
    4636:	82 83       	std	Z+2, r24	; 0x02
    4638:	93 83       	std	Z+3, r25	; 0x03
    463a:	e1 14       	cp	r14, r1
    463c:	f1 04       	cpc	r15, r1
    463e:	81 f0       	breq	.+32     	; 0x4660 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x118>
    4640:	6a e3       	ldi	r22, 0x3A	; 58
    4642:	72 e0       	ldi	r23, 0x02	; 2
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	09 f4       	brne	.+2      	; 0x4652 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x10a>
    4650:	a2 cf       	rjmp	.-188    	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4652:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <atof>
    4656:	f7 01       	movw	r30, r14
    4658:	60 83       	st	Z, r22
    465a:	71 83       	std	Z+1, r23	; 0x01
    465c:	82 83       	std	Z+2, r24	; 0x02
    465e:	93 83       	std	Z+3, r25	; 0x03
    4660:	61 14       	cp	r6, r1
    4662:	71 04       	cpc	r7, r1
    4664:	81 f0       	breq	.+32     	; 0x4686 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x13e>
    4666:	6a e3       	ldi	r22, 0x3A	; 58
    4668:	72 e0       	ldi	r23, 0x02	; 2
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	09 f4       	brne	.+2      	; 0x4678 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x130>
    4676:	8f cf       	rjmp	.-226    	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4678:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <atof>
    467c:	f3 01       	movw	r30, r6
    467e:	60 83       	st	Z, r22
    4680:	71 83       	std	Z+1, r23	; 0x01
    4682:	82 83       	std	Z+2, r24	; 0x02
    4684:	93 83       	std	Z+3, r25	; 0x03
    4686:	41 14       	cp	r4, r1
    4688:	51 04       	cpc	r5, r1
    468a:	81 f0       	breq	.+32     	; 0x46ac <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x164>
    468c:	6a e3       	ldi	r22, 0x3A	; 58
    468e:	72 e0       	ldi	r23, 0x02	; 2
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strtok>
    4698:	00 97       	sbiw	r24, 0x00	; 0
    469a:	09 f4       	brne	.+2      	; 0x469e <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x156>
    469c:	7c cf       	rjmp	.-264    	; 0x4596 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    469e:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <atof>
    46a2:	f2 01       	movw	r30, r4
    46a4:	60 83       	st	Z, r22
    46a6:	71 83       	std	Z+1, r23	; 0x01
    46a8:	82 83       	std	Z+2, r24	; 0x02
    46aa:	93 83       	std	Z+3, r25	; 0x03
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	c6 58       	subi	r28, 0x86	; 134
    46b0:	df 4f       	sbci	r29, 0xFF	; 255
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	1f 91       	pop	r17
    46c2:	0f 91       	pop	r16
    46c4:	ff 90       	pop	r15
    46c6:	ef 90       	pop	r14
    46c8:	df 90       	pop	r13
    46ca:	cf 90       	pop	r12
    46cc:	bf 90       	pop	r11
    46ce:	af 90       	pop	r10
    46d0:	9f 90       	pop	r9
    46d2:	8f 90       	pop	r8
    46d4:	7f 90       	pop	r7
    46d6:	6f 90       	pop	r6
    46d8:	5f 90       	pop	r5
    46da:	4f 90       	pop	r4
    46dc:	3f 90       	pop	r3
    46de:	2f 90       	pop	r2
    46e0:	08 95       	ret

000046e2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    46e2:	8f 92       	push	r8
    46e4:	9f 92       	push	r9
    46e6:	af 92       	push	r10
    46e8:	bf 92       	push	r11
    46ea:	cf 92       	push	r12
    46ec:	df 92       	push	r13
    46ee:	ef 92       	push	r14
    46f0:	ff 92       	push	r15
    46f2:	0f 93       	push	r16
    46f4:	1f 93       	push	r17
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	ec 01       	movw	r28, r24
    46fc:	6b 01       	movw	r12, r22
    46fe:	49 01       	movw	r8, r18
    4700:	5a 01       	movw	r10, r20
    4702:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    4706:	63 e9       	ldi	r22, 0x93	; 147
    4708:	74 e0       	ldi	r23, 0x04	; 4
    470a:	89 ec       	ldi	r24, 0xC9	; 201
    470c:	96 e0       	ldi	r25, 0x06	; 6
    470e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4712:	b6 01       	movw	r22, r12
    4714:	89 ec       	ldi	r24, 0xC9	; 201
    4716:	96 e0       	ldi	r25, 0x06	; 6
    4718:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    471c:	2a e0       	ldi	r18, 0x0A	; 10
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	b5 01       	movw	r22, r10
    4722:	a4 01       	movw	r20, r8
    4724:	89 ec       	ldi	r24, 0xC9	; 201
    4726:	96 e0       	ldi	r25, 0x06	; 6
    4728:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <_ZN5Print7printlnEli>
    472c:	7e 01       	movw	r14, r28
    472e:	88 ee       	ldi	r24, 0xE8	; 232
    4730:	e8 1a       	sub	r14, r24
    4732:	8e ef       	ldi	r24, 0xFE	; 254
    4734:	f8 0a       	sbc	r15, r24
    4736:	b6 01       	movw	r22, r12
    4738:	f7 01       	movw	r30, r14
    473a:	80 81       	ld	r24, Z
    473c:	91 81       	ldd	r25, Z+1	; 0x01
    473e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4742:	2a e0       	ldi	r18, 0x0A	; 10
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	b5 01       	movw	r22, r10
    4748:	a4 01       	movw	r20, r8
    474a:	f7 01       	movw	r30, r14
    474c:	80 81       	ld	r24, Z
    474e:	91 81       	ldd	r25, Z+1	; 0x01
    4750:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <_ZN5Print7printlnEli>
    4754:	40 e0       	ldi	r20, 0x00	; 0
    4756:	b8 01       	movw	r22, r16
    4758:	ce 01       	movw	r24, r28
    475a:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    475e:	18 2f       	mov	r17, r24
    4760:	6c e8       	ldi	r22, 0x8C	; 140
    4762:	74 e0       	ldi	r23, 0x04	; 4
    4764:	89 ec       	ldi	r24, 0xC9	; 201
    4766:	96 e0       	ldi	r25, 0x06	; 6
    4768:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    476c:	be 01       	movw	r22, r28
    476e:	62 5f       	subi	r22, 0xF2	; 242
    4770:	7f 4f       	sbci	r23, 0xFF	; 255
    4772:	89 ec       	ldi	r24, 0xC9	; 201
    4774:	96 e0       	ldi	r25, 0x06	; 6
    4776:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    477a:	81 2f       	mov	r24, r17
    477c:	df 91       	pop	r29
    477e:	cf 91       	pop	r28
    4780:	1f 91       	pop	r17
    4782:	0f 91       	pop	r16
    4784:	ff 90       	pop	r15
    4786:	ef 90       	pop	r14
    4788:	df 90       	pop	r13
    478a:	cf 90       	pop	r12
    478c:	bf 90       	pop	r11
    478e:	af 90       	pop	r10
    4790:	9f 90       	pop	r9
    4792:	8f 90       	pop	r8
    4794:	08 95       	ret

00004796 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    4796:	af 92       	push	r10
    4798:	bf 92       	push	r11
    479a:	cf 92       	push	r12
    479c:	df 92       	push	r13
    479e:	ef 92       	push	r14
    47a0:	ff 92       	push	r15
    47a2:	0f 93       	push	r16
    47a4:	1f 93       	push	r17
    47a6:	cf 93       	push	r28
    47a8:	df 93       	push	r29
    47aa:	ec 01       	movw	r28, r24
    47ac:	6b 01       	movw	r12, r22
    47ae:	7a 01       	movw	r14, r20
    47b0:	59 01       	movw	r10, r18
    47b2:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    47b6:	65 e8       	ldi	r22, 0x85	; 133
    47b8:	74 e0       	ldi	r23, 0x04	; 4
    47ba:	89 ec       	ldi	r24, 0xC9	; 201
    47bc:	96 e0       	ldi	r25, 0x06	; 6
    47be:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    47c2:	b6 01       	movw	r22, r12
    47c4:	89 ec       	ldi	r24, 0xC9	; 201
    47c6:	96 e0       	ldi	r25, 0x06	; 6
    47c8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    47cc:	62 e2       	ldi	r22, 0x22	; 34
    47ce:	89 ec       	ldi	r24, 0xC9	; 201
    47d0:	96 e0       	ldi	r25, 0x06	; 6
    47d2:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZN5Print5printEc>
    47d6:	b7 01       	movw	r22, r14
    47d8:	89 ec       	ldi	r24, 0xC9	; 201
    47da:	96 e0       	ldi	r25, 0x06	; 6
    47dc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    47e0:	62 e2       	ldi	r22, 0x22	; 34
    47e2:	89 ec       	ldi	r24, 0xC9	; 201
    47e4:	96 e0       	ldi	r25, 0x06	; 6
    47e6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN5Print7printlnEc>
    47ea:	8e 01       	movw	r16, r28
    47ec:	08 5e       	subi	r16, 0xE8	; 232
    47ee:	1e 4f       	sbci	r17, 0xFE	; 254
    47f0:	b6 01       	movw	r22, r12
    47f2:	f8 01       	movw	r30, r16
    47f4:	80 81       	ld	r24, Z
    47f6:	91 81       	ldd	r25, Z+1	; 0x01
    47f8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    47fc:	62 e2       	ldi	r22, 0x22	; 34
    47fe:	f8 01       	movw	r30, r16
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZN5Print5printEc>
    4808:	b7 01       	movw	r22, r14
    480a:	f8 01       	movw	r30, r16
    480c:	80 81       	ld	r24, Z
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4814:	62 e2       	ldi	r22, 0x22	; 34
    4816:	f8 01       	movw	r30, r16
    4818:	80 81       	ld	r24, Z
    481a:	91 81       	ldd	r25, Z+1	; 0x01
    481c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN5Print7printlnEc>
    4820:	40 e0       	ldi	r20, 0x00	; 0
    4822:	b5 01       	movw	r22, r10
    4824:	ce 01       	movw	r24, r28
    4826:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    482a:	18 2f       	mov	r17, r24
    482c:	6e e7       	ldi	r22, 0x7E	; 126
    482e:	74 e0       	ldi	r23, 0x04	; 4
    4830:	89 ec       	ldi	r24, 0xC9	; 201
    4832:	96 e0       	ldi	r25, 0x06	; 6
    4834:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4838:	be 01       	movw	r22, r28
    483a:	62 5f       	subi	r22, 0xF2	; 242
    483c:	7f 4f       	sbci	r23, 0xFF	; 255
    483e:	89 ec       	ldi	r24, 0xC9	; 201
    4840:	96 e0       	ldi	r25, 0x06	; 6
    4842:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4846:	81 2f       	mov	r24, r17
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	1f 91       	pop	r17
    484e:	0f 91       	pop	r16
    4850:	ff 90       	pop	r15
    4852:	ef 90       	pop	r14
    4854:	df 90       	pop	r13
    4856:	cf 90       	pop	r12
    4858:	bf 90       	pop	r11
    485a:	af 90       	pop	r10
    485c:	08 95       	ret

0000485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    485e:	0f 93       	push	r16
    4860:	1f 93       	push	r17
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    4866:	ec 01       	movw	r28, r24
    4868:	8a 01       	movw	r16, r20
    486a:	a9 01       	movw	r20, r18
    486c:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4870:	88 23       	and	r24, r24
    4872:	41 f0       	breq	.+16     	; 0x4884 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    4874:	b8 01       	movw	r22, r16
    4876:	ce 01       	movw	r24, r28
    4878:	0e 96       	adiw	r24, 0x0e	; 14
    487a:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcmp_P>
    487e:	21 e0       	ldi	r18, 0x01	; 1
    4880:	89 2b       	or	r24, r25
    4882:	09 f0       	breq	.+2      	; 0x4886 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	82 2f       	mov	r24, r18
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	1f 91       	pop	r17
    488e:	0f 91       	pop	r16
    4890:	08 95       	ret

00004892 <_ZN13Adafruit_FONA5beginER6Stream>:
    4892:	cf 92       	push	r12
    4894:	df 92       	push	r13
    4896:	ef 92       	push	r14
    4898:	ff 92       	push	r15
    489a:	0f 93       	push	r16
    489c:	1f 93       	push	r17
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	ec 01       	movw	r28, r24
    48a4:	7c 01       	movw	r14, r24
    48a6:	88 ee       	ldi	r24, 0xE8	; 232
    48a8:	e8 1a       	sub	r14, r24
    48aa:	8e ef       	ldi	r24, 0xFE	; 254
    48ac:	f8 0a       	sbc	r15, r24
    48ae:	d7 01       	movw	r26, r14
    48b0:	6d 93       	st	X+, r22
    48b2:	7c 93       	st	X, r23
    48b4:	61 e0       	ldi	r22, 0x01	; 1
    48b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b8:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <pinMode>
    48bc:	61 e0       	ldi	r22, 0x01	; 1
    48be:	8c 85       	ldd	r24, Y+12	; 0x0c
    48c0:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
    48c4:	6a e0       	ldi	r22, 0x0A	; 10
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    48d0:	60 e0       	ldi	r22, 0x00	; 0
    48d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    48d4:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
    48d8:	64 e6       	ldi	r22, 0x64	; 100
    48da:	70 e0       	ldi	r23, 0x00	; 0
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    48e8:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
    48ec:	65 eb       	ldi	r22, 0xB5	; 181
    48ee:	77 e0       	ldi	r23, 0x07	; 7
    48f0:	89 ec       	ldi	r24, 0xC9	; 201
    48f2:	96 e0       	ldi	r25, 0x06	; 6
    48f4:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
    48f8:	8e e0       	ldi	r24, 0x0E	; 14
    48fa:	c8 2e       	mov	r12, r24
    48fc:	d1 2c       	mov	r13, r1
    48fe:	8e 01       	movw	r16, r28
    4900:	0a 5e       	subi	r16, 0xEA	; 234
    4902:	1e 4f       	sbci	r17, 0xFE	; 254
    4904:	f7 01       	movw	r30, r14
    4906:	80 81       	ld	r24, Z
    4908:	91 81       	ldd	r25, Z+1	; 0x01
    490a:	dc 01       	movw	r26, r24
    490c:	ed 91       	ld	r30, X+
    490e:	fc 91       	ld	r31, X
    4910:	04 80       	ldd	r0, Z+4	; 0x04
    4912:	f5 81       	ldd	r31, Z+5	; 0x05
    4914:	e0 2d       	mov	r30, r0
    4916:	09 95       	icall
    4918:	89 2b       	or	r24, r25
    491a:	89 f0       	breq	.+34     	; 0x493e <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    491c:	60 ea       	ldi	r22, 0xA0	; 160
    491e:	77 e0       	ldi	r23, 0x07	; 7
    4920:	89 ec       	ldi	r24, 0xC9	; 201
    4922:	96 e0       	ldi	r25, 0x06	; 6
    4924:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4928:	f7 01       	movw	r30, r14
    492a:	80 81       	ld	r24, Z
    492c:	91 81       	ldd	r25, Z+1	; 0x01
    492e:	dc 01       	movw	r26, r24
    4930:	ed 91       	ld	r30, X+
    4932:	fc 91       	ld	r31, X
    4934:	06 80       	ldd	r0, Z+6	; 0x06
    4936:	f7 81       	ldd	r31, Z+7	; 0x07
    4938:	e0 2d       	mov	r30, r0
    493a:	09 95       	icall
    493c:	e3 cf       	rjmp	.-58     	; 0x4904 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    493e:	f8 01       	movw	r30, r16
    4940:	40 81       	ld	r20, Z
    4942:	51 81       	ldd	r21, Z+1	; 0x01
    4944:	24 ef       	ldi	r18, 0xF4	; 244
    4946:	31 e0       	ldi	r19, 0x01	; 1
    4948:	6d e9       	ldi	r22, 0x9D	; 157
    494a:	77 e0       	ldi	r23, 0x07	; 7
    494c:	ce 01       	movw	r24, r28
    494e:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4952:	81 11       	cpse	r24, r1
    4954:	63 c0       	rjmp	.+198    	; 0x4a1c <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    4956:	d7 01       	movw	r26, r14
    4958:	8d 91       	ld	r24, X+
    495a:	9c 91       	ld	r25, X
    495c:	dc 01       	movw	r26, r24
    495e:	ed 91       	ld	r30, X+
    4960:	fc 91       	ld	r31, X
    4962:	04 80       	ldd	r0, Z+4	; 0x04
    4964:	f5 81       	ldd	r31, Z+5	; 0x05
    4966:	e0 2d       	mov	r30, r0
    4968:	09 95       	icall
    496a:	89 2b       	or	r24, r25
    496c:	59 f0       	breq	.+22     	; 0x4984 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    496e:	f7 01       	movw	r30, r14
    4970:	80 81       	ld	r24, Z
    4972:	91 81       	ldd	r25, Z+1	; 0x01
    4974:	dc 01       	movw	r26, r24
    4976:	ed 91       	ld	r30, X+
    4978:	fc 91       	ld	r31, X
    497a:	06 80       	ldd	r0, Z+6	; 0x06
    497c:	f7 81       	ldd	r31, Z+7	; 0x07
    497e:	e0 2d       	mov	r30, r0
    4980:	09 95       	icall
    4982:	e9 cf       	rjmp	.-46     	; 0x4956 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    4984:	24 ef       	ldi	r18, 0xF4	; 244
    4986:	31 e0       	ldi	r19, 0x01	; 1
    4988:	4a e9       	ldi	r20, 0x9A	; 154
    498a:	57 e0       	ldi	r21, 0x07	; 7
    498c:	67 e9       	ldi	r22, 0x97	; 151
    498e:	77 e0       	ldi	r23, 0x07	; 7
    4990:	ce 01       	movw	r24, r28
    4992:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4996:	81 11       	cpse	r24, r1
    4998:	41 c0       	rjmp	.+130    	; 0x4a1c <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    499a:	64 ef       	ldi	r22, 0xF4	; 244
    499c:	71 e0       	ldi	r23, 0x01	; 1
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    49a6:	b1 e0       	ldi	r27, 0x01	; 1
    49a8:	cb 1a       	sub	r12, r27
    49aa:	d1 08       	sbc	r13, r1
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    49ae:	aa cf       	rjmp	.-172    	; 0x4904 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    49b0:	65 e6       	ldi	r22, 0x65	; 101
    49b2:	77 e0       	ldi	r23, 0x07	; 7
    49b4:	89 ec       	ldi	r24, 0xC9	; 201
    49b6:	96 e0       	ldi	r25, 0x06	; 6
    49b8:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print7printlnEPK19__FlashStringHelper>
    49bc:	d8 01       	movw	r26, r16
    49be:	4d 91       	ld	r20, X+
    49c0:	5c 91       	ld	r21, X
    49c2:	24 ef       	ldi	r18, 0xF4	; 244
    49c4:	31 e0       	ldi	r19, 0x01	; 1
    49c6:	62 e6       	ldi	r22, 0x62	; 98
    49c8:	77 e0       	ldi	r23, 0x07	; 7
    49ca:	ce 01       	movw	r24, r28
    49cc:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49d0:	64 e6       	ldi	r22, 0x64	; 100
    49d2:	70 e0       	ldi	r23, 0x00	; 0
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    49dc:	f8 01       	movw	r30, r16
    49de:	40 81       	ld	r20, Z
    49e0:	51 81       	ldd	r21, Z+1	; 0x01
    49e2:	24 ef       	ldi	r18, 0xF4	; 244
    49e4:	31 e0       	ldi	r19, 0x01	; 1
    49e6:	6f e5       	ldi	r22, 0x5F	; 95
    49e8:	77 e0       	ldi	r23, 0x07	; 7
    49ea:	ce 01       	movw	r24, r28
    49ec:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49f0:	64 e6       	ldi	r22, 0x64	; 100
    49f2:	70 e0       	ldi	r23, 0x00	; 0
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    49fc:	d8 01       	movw	r26, r16
    49fe:	4d 91       	ld	r20, X+
    4a00:	5c 91       	ld	r21, X
    4a02:	24 ef       	ldi	r18, 0xF4	; 244
    4a04:	31 e0       	ldi	r19, 0x01	; 1
    4a06:	6c e5       	ldi	r22, 0x5C	; 92
    4a08:	77 e0       	ldi	r23, 0x07	; 7
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a10:	64 e6       	ldi	r22, 0x64	; 100
    4a12:	70 e0       	ldi	r23, 0x00	; 0
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    4a1c:	f8 01       	movw	r30, r16
    4a1e:	40 81       	ld	r20, Z
    4a20:	51 81       	ldd	r21, Z+1	; 0x01
    4a22:	24 ef       	ldi	r18, 0xF4	; 244
    4a24:	31 e0       	ldi	r19, 0x01	; 1
    4a26:	67 e5       	ldi	r22, 0x57	; 87
    4a28:	77 e0       	ldi	r23, 0x07	; 7
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a30:	64 e6       	ldi	r22, 0x64	; 100
    4a32:	70 e0       	ldi	r23, 0x00	; 0
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    4a3c:	d8 01       	movw	r26, r16
    4a3e:	4d 91       	ld	r20, X+
    4a40:	5c 91       	ld	r21, X
    4a42:	24 ef       	ldi	r18, 0xF4	; 244
    4a44:	31 e0       	ldi	r19, 0x01	; 1
    4a46:	62 e5       	ldi	r22, 0x52	; 82
    4a48:	77 e0       	ldi	r23, 0x07	; 7
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a50:	d8 2e       	mov	r13, r24
    4a52:	88 23       	and	r24, r24
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    4a56:	97 c0       	rjmp	.+302    	; 0x4b86 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4a58:	f8 01       	movw	r30, r16
    4a5a:	40 81       	ld	r20, Z
    4a5c:	51 81       	ldd	r21, Z+1	; 0x01
    4a5e:	24 ef       	ldi	r18, 0xF4	; 244
    4a60:	31 e0       	ldi	r19, 0x01	; 1
    4a62:	68 e4       	ldi	r22, 0x48	; 72
    4a64:	77 e0       	ldi	r23, 0x07	; 7
    4a66:	ce 01       	movw	r24, r28
    4a68:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a6c:	64 e6       	ldi	r22, 0x64	; 100
    4a6e:	70 e0       	ldi	r23, 0x00	; 0
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <delay>
    4a78:	ce 01       	movw	r24, r28
    4a7a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    4a7e:	61 e4       	ldi	r22, 0x41	; 65
    4a80:	77 e0       	ldi	r23, 0x07	; 7
    4a82:	89 ec       	ldi	r24, 0xC9	; 201
    4a84:	96 e0       	ldi	r25, 0x06	; 6
    4a86:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4a8a:	6c e3       	ldi	r22, 0x3C	; 60
    4a8c:	72 e0       	ldi	r23, 0x02	; 2
    4a8e:	89 ec       	ldi	r24, 0xC9	; 201
    4a90:	96 e0       	ldi	r25, 0x06	; 6
    4a92:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4a96:	6c e3       	ldi	r22, 0x3C	; 60
    4a98:	72 e0       	ldi	r23, 0x02	; 2
    4a9a:	d7 01       	movw	r26, r14
    4a9c:	8d 91       	ld	r24, X+
    4a9e:	9c 91       	ld	r25, X
    4aa0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4aa4:	41 e0       	ldi	r20, 0x01	; 1
    4aa6:	64 ef       	ldi	r22, 0xF4	; 244
    4aa8:	71 e0       	ldi	r23, 0x01	; 1
    4aaa:	ce 01       	movw	r24, r28
    4aac:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4ab0:	6a e3       	ldi	r22, 0x3A	; 58
    4ab2:	77 e0       	ldi	r23, 0x07	; 7
    4ab4:	89 ec       	ldi	r24, 0xC9	; 201
    4ab6:	96 e0       	ldi	r25, 0x06	; 6
    4ab8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4abc:	8e 01       	movw	r16, r28
    4abe:	02 5f       	subi	r16, 0xF2	; 242
    4ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac2:	b8 01       	movw	r22, r16
    4ac4:	89 ec       	ldi	r24, 0xC9	; 201
    4ac6:	96 e0       	ldi	r25, 0x06	; 6
    4ac8:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4acc:	6f e2       	ldi	r22, 0x2F	; 47
    4ace:	77 e0       	ldi	r23, 0x07	; 7
    4ad0:	c8 01       	movw	r24, r16
    4ad2:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4ad6:	89 2b       	or	r24, r25
    4ad8:	11 f0       	breq	.+4      	; 0x4ade <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    4ada:	83 e0       	ldi	r24, 0x03	; 3
    4adc:	23 c0       	rjmp	.+70     	; 0x4b24 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4ade:	64 e2       	ldi	r22, 0x24	; 36
    4ae0:	77 e0       	ldi	r23, 0x07	; 7
    4ae2:	c8 01       	movw	r24, r16
    4ae4:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4ae8:	89 2b       	or	r24, r25
    4aea:	11 f0       	breq	.+4      	; 0x4af0 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	1a c0       	rjmp	.+52     	; 0x4b24 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4af0:	69 e1       	ldi	r22, 0x19	; 25
    4af2:	77 e0       	ldi	r23, 0x07	; 7
    4af4:	c8 01       	movw	r24, r16
    4af6:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4afa:	89 2b       	or	r24, r25
    4afc:	11 f0       	breq	.+4      	; 0x4b02 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	11 c0       	rjmp	.+34     	; 0x4b24 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4b02:	69 e0       	ldi	r22, 0x09	; 9
    4b04:	77 e0       	ldi	r23, 0x07	; 7
    4b06:	c8 01       	movw	r24, r16
    4b08:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4b0c:	89 2b       	or	r24, r25
    4b0e:	11 f0       	breq	.+4      	; 0x4b14 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    4b10:	84 e0       	ldi	r24, 0x04	; 4
    4b12:	08 c0       	rjmp	.+16     	; 0x4b24 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4b14:	69 ef       	ldi	r22, 0xF9	; 249
    4b16:	76 e0       	ldi	r23, 0x06	; 6
    4b18:	c8 01       	movw	r24, r16
    4b1a:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4b1e:	89 2b       	or	r24, r25
    4b20:	11 f0       	breq	.+4      	; 0x4b26 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    4b22:	85 e0       	ldi	r24, 0x05	; 5
    4b24:	8d 87       	std	Y+13, r24	; 0x0d
    4b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b28:	81 30       	cpi	r24, 0x01	; 1
    4b2a:	69 f5       	brne	.+90     	; 0x4b86 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4b2c:	62 ef       	ldi	r22, 0xF2	; 242
    4b2e:	76 e0       	ldi	r23, 0x06	; 6
    4b30:	89 ec       	ldi	r24, 0xC9	; 201
    4b32:	96 e0       	ldi	r25, 0x06	; 6
    4b34:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4b38:	60 e4       	ldi	r22, 0x40	; 64
    4b3a:	72 e0       	ldi	r23, 0x02	; 2
    4b3c:	89 ec       	ldi	r24, 0xC9	; 201
    4b3e:	96 e0       	ldi	r25, 0x06	; 6
    4b40:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4b44:	60 e4       	ldi	r22, 0x40	; 64
    4b46:	72 e0       	ldi	r23, 0x02	; 2
    4b48:	f7 01       	movw	r30, r14
    4b4a:	80 81       	ld	r24, Z
    4b4c:	91 81       	ldd	r25, Z+1	; 0x01
    4b4e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4b52:	41 e0       	ldi	r20, 0x01	; 1
    4b54:	64 ef       	ldi	r22, 0xF4	; 244
    4b56:	71 e0       	ldi	r23, 0x01	; 1
    4b58:	ce 01       	movw	r24, r28
    4b5a:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4b5e:	6b ee       	ldi	r22, 0xEB	; 235
    4b60:	76 e0       	ldi	r23, 0x06	; 6
    4b62:	89 ec       	ldi	r24, 0xC9	; 201
    4b64:	96 e0       	ldi	r25, 0x06	; 6
    4b66:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4b6a:	b8 01       	movw	r22, r16
    4b6c:	89 ec       	ldi	r24, 0xC9	; 201
    4b6e:	96 e0       	ldi	r25, 0x06	; 6
    4b70:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4b74:	63 ee       	ldi	r22, 0xE3	; 227
    4b76:	76 e0       	ldi	r23, 0x06	; 6
    4b78:	c8 01       	movw	r24, r16
    4b7a:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    4b7e:	89 2b       	or	r24, r25
    4b80:	11 f0       	breq	.+4      	; 0x4b86 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4b82:	86 e0       	ldi	r24, 0x06	; 6
    4b84:	8d 87       	std	Y+13, r24	; 0x0d
    4b86:	8d 2d       	mov	r24, r13
    4b88:	df 91       	pop	r29
    4b8a:	cf 91       	pop	r28
    4b8c:	1f 91       	pop	r17
    4b8e:	0f 91       	pop	r16
    4b90:	ff 90       	pop	r15
    4b92:	ef 90       	pop	r14
    4b94:	df 90       	pop	r13
    4b96:	cf 90       	pop	r12
    4b98:	08 95       	ret

00004b9a <_ZN13Adafruit_FONA9HTTP_initEv>:
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	ea 5e       	subi	r30, 0xEA	; 234
    4b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba0:	40 81       	ld	r20, Z
    4ba2:	51 81       	ldd	r21, Z+1	; 0x01
    4ba4:	24 ef       	ldi	r18, 0xF4	; 244
    4ba6:	31 e0       	ldi	r19, 0x01	; 1
    4ba8:	6f e9       	ldi	r22, 0x9F	; 159
    4baa:	75 e0       	ldi	r23, 0x05	; 5
    4bac:	0c 94 2f 24 	jmp	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004bb0 <_ZN13Adafruit_FONA9HTTP_termEv>:
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	ea 5e       	subi	r30, 0xEA	; 234
    4bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    4bb6:	40 81       	ld	r20, Z
    4bb8:	51 81       	ldd	r21, Z+1	; 0x01
    4bba:	24 ef       	ldi	r18, 0xF4	; 244
    4bbc:	31 e0       	ldi	r19, 0x01	; 1
    4bbe:	63 e9       	ldi	r22, 0x93	; 147
    4bc0:	75 e0       	ldi	r23, 0x05	; 5
    4bc2:	0c 94 2f 24 	jmp	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004bc6 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    4bc6:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <_ZN13Adafruit_FONA9HTTP_termEv>

00004bca <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    4bca:	0f 93       	push	r16
    4bcc:	1f 93       	push	r17
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	ec 01       	movw	r28, r24
    4bd4:	8a 01       	movw	r16, r20
    4bd6:	a9 01       	movw	r20, r18
    4bd8:	0e 94 be 21 	call	0x437c	; 0x437c <_ZN13Adafruit_FONA8getReplyEPcj>
    4bdc:	88 23       	and	r24, r24
    4bde:	41 f0       	breq	.+16     	; 0x4bf0 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    4be0:	b8 01       	movw	r22, r16
    4be2:	ce 01       	movw	r24, r28
    4be4:	0e 96       	adiw	r24, 0x0e	; 14
    4be6:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcmp_P>
    4bea:	21 e0       	ldi	r18, 0x01	; 1
    4bec:	89 2b       	or	r24, r25
    4bee:	09 f0       	breq	.+2      	; 0x4bf2 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	82 2f       	mov	r24, r18
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	08 95       	ret

00004bfe <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    4bfe:	af 92       	push	r10
    4c00:	bf 92       	push	r11
    4c02:	cf 92       	push	r12
    4c04:	df 92       	push	r13
    4c06:	ef 92       	push	r14
    4c08:	ff 92       	push	r15
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	cd b7       	in	r28, 0x3d	; 61
    4c14:	de b7       	in	r29, 0x3e	; 62
    4c16:	6e 97       	sbiw	r28, 0x1e	; 30
    4c18:	0f b6       	in	r0, 0x3f	; 63
    4c1a:	f8 94       	cli
    4c1c:	de bf       	out	0x3e, r29	; 62
    4c1e:	0f be       	out	0x3f, r0	; 63
    4c20:	cd bf       	out	0x3d, r28	; 61
    4c22:	8c 01       	movw	r16, r24
    4c24:	5b 01       	movw	r10, r22
    4c26:	6a 01       	movw	r12, r20
    4c28:	fc 01       	movw	r30, r24
    4c2a:	ea 5e       	subi	r30, 0xEA	; 234
    4c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2e:	40 81       	ld	r20, Z
    4c30:	51 81       	ldd	r21, Z+1	; 0x01
    4c32:	24 ef       	ldi	r18, 0xF4	; 244
    4c34:	31 e0       	ldi	r19, 0x01	; 1
    4c36:	6c ea       	ldi	r22, 0xAC	; 172
    4c38:	76 e0       	ldi	r23, 0x06	; 6
    4c3a:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4c3e:	88 23       	and	r24, r24
    4c40:	09 f4       	brne	.+2      	; 0x4c44 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4c42:	88 c0       	rjmp	.+272    	; 0x4d54 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4c44:	8a e0       	ldi	r24, 0x0A	; 10
    4c46:	eb ea       	ldi	r30, 0xAB	; 171
    4c48:	f1 e0       	ldi	r31, 0x01	; 1
    4c4a:	9e 01       	movw	r18, r28
    4c4c:	2f 5f       	subi	r18, 0xFF	; 255
    4c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c50:	79 01       	movw	r14, r18
    4c52:	d9 01       	movw	r26, r18
    4c54:	01 90       	ld	r0, Z+
    4c56:	0d 92       	st	X+, r0
    4c58:	8a 95       	dec	r24
    4c5a:	e1 f7       	brne	.-8      	; 0x4c54 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	3b 96       	adiw	r30, 0x0b	; 11
    4c60:	84 e1       	ldi	r24, 0x14	; 20
    4c62:	df 01       	movw	r26, r30
    4c64:	1d 92       	st	X+, r1
    4c66:	8a 95       	dec	r24
    4c68:	e9 f7       	brne	.-6      	; 0x4c64 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    4c6a:	43 e1       	ldi	r20, 0x13	; 19
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	b5 01       	movw	r22, r10
    4c70:	ce 01       	movw	r24, r28
    4c72:	0a 96       	adiw	r24, 0x0a	; 10
    4c74:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <strncpy>
    4c78:	f7 01       	movw	r30, r14
    4c7a:	01 90       	ld	r0, Z+
    4c7c:	00 20       	and	r0, r0
    4c7e:	e9 f7       	brne	.-6      	; 0x4c7a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    4c80:	31 97       	sbiw	r30, 0x01	; 1
    4c82:	82 e2       	ldi	r24, 0x22	; 34
    4c84:	80 83       	st	Z, r24
    4c86:	24 ef       	ldi	r18, 0xF4	; 244
    4c88:	31 e0       	ldi	r19, 0x01	; 1
    4c8a:	49 ea       	ldi	r20, 0xA9	; 169
    4c8c:	56 e0       	ldi	r21, 0x06	; 6
    4c8e:	b7 01       	movw	r22, r14
    4c90:	c8 01       	movw	r24, r16
    4c92:	0e 94 e5 25 	call	0x4bca	; 0x4bca <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    4c96:	88 23       	and	r24, r24
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    4c9a:	5c c0       	rjmp	.+184    	; 0x4d54 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4c9c:	66 ea       	ldi	r22, 0xA6	; 166
    4c9e:	76 e0       	ldi	r23, 0x06	; 6
    4ca0:	89 ec       	ldi	r24, 0xC9	; 201
    4ca2:	96 e0       	ldi	r25, 0x06	; 6
    4ca4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4ca8:	b6 01       	movw	r22, r12
    4caa:	89 ec       	ldi	r24, 0xC9	; 201
    4cac:	96 e0       	ldi	r25, 0x06	; 6
    4cae:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4cb2:	b6 01       	movw	r22, r12
    4cb4:	78 01       	movw	r14, r16
    4cb6:	b8 ee       	ldi	r27, 0xE8	; 232
    4cb8:	eb 1a       	sub	r14, r27
    4cba:	be ef       	ldi	r27, 0xFE	; 254
    4cbc:	fb 0a       	sbc	r15, r27
    4cbe:	f7 01       	movw	r30, r14
    4cc0:	80 81       	ld	r24, Z
    4cc2:	91 81       	ldd	r25, Z+1	; 0x01
    4cc4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4cc8:	d7 01       	movw	r26, r14
    4cca:	8d 91       	ld	r24, X+
    4ccc:	9c 91       	ld	r25, X
    4cce:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN5Print7printlnEv>
    4cd2:	f7 01       	movw	r30, r14
    4cd4:	80 81       	ld	r24, Z
    4cd6:	91 81       	ldd	r25, Z+1	; 0x01
    4cd8:	dc 01       	movw	r26, r24
    4cda:	ed 91       	ld	r30, X+
    4cdc:	fc 91       	ld	r31, X
    4cde:	01 90       	ld	r0, Z+
    4ce0:	f0 81       	ld	r31, Z
    4ce2:	e0 2d       	mov	r30, r0
    4ce4:	6a e1       	ldi	r22, 0x1A	; 26
    4ce6:	09 95       	icall
    4ce8:	69 e5       	ldi	r22, 0x59	; 89
    4cea:	72 e0       	ldi	r23, 0x02	; 2
    4cec:	89 ec       	ldi	r24, 0xC9	; 201
    4cee:	96 e0       	ldi	r25, 0x06	; 6
    4cf0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	85 85       	ldd	r24, Z+13	; 0x0d
    4cf8:	84 50       	subi	r24, 0x04	; 4
    4cfa:	82 30       	cpi	r24, 0x02	; 2
    4cfc:	60 f4       	brcc	.+24     	; 0x4d16 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	68 ec       	ldi	r22, 0xC8	; 200
    4d02:	70 e0       	ldi	r23, 0x00	; 0
    4d04:	c8 01       	movw	r24, r16
    4d06:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4d0a:	40 e0       	ldi	r20, 0x00	; 0
    4d0c:	68 ec       	ldi	r22, 0xC8	; 200
    4d0e:	70 e0       	ldi	r23, 0x00	; 0
    4d10:	c8 01       	movw	r24, r16
    4d12:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	60 e1       	ldi	r22, 0x10	; 16
    4d1a:	77 e2       	ldi	r23, 0x27	; 39
    4d1c:	c8 01       	movw	r24, r16
    4d1e:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4d22:	78 01       	movw	r14, r16
    4d24:	fe e0       	ldi	r31, 0x0E	; 14
    4d26:	ef 0e       	add	r14, r31
    4d28:	f1 1c       	adc	r15, r1
    4d2a:	6c e5       	ldi	r22, 0x5C	; 92
    4d2c:	72 e0       	ldi	r23, 0x02	; 2
    4d2e:	c7 01       	movw	r24, r14
    4d30:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <strstr>
    4d34:	89 2b       	or	r24, r25
    4d36:	71 f0       	breq	.+28     	; 0x4d54 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4d38:	40 e0       	ldi	r20, 0x00	; 0
    4d3a:	68 ee       	ldi	r22, 0xE8	; 232
    4d3c:	73 e0       	ldi	r23, 0x03	; 3
    4d3e:	c8 01       	movw	r24, r16
    4d40:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    4d44:	67 e3       	ldi	r22, 0x37	; 55
    4d46:	72 e0       	ldi	r23, 0x02	; 2
    4d48:	c7 01       	movw	r24, r14
    4d4a:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <strcmp>
    4d4e:	21 e0       	ldi	r18, 0x01	; 1
    4d50:	89 2b       	or	r24, r25
    4d52:	09 f0       	breq	.+2      	; 0x4d56 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	82 2f       	mov	r24, r18
    4d58:	6e 96       	adiw	r28, 0x1e	; 30
    4d5a:	0f b6       	in	r0, 0x3f	; 63
    4d5c:	f8 94       	cli
    4d5e:	de bf       	out	0x3e, r29	; 62
    4d60:	0f be       	out	0x3f, r0	; 63
    4d62:	cd bf       	out	0x3d, r28	; 61
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	0f 91       	pop	r16
    4d6c:	ff 90       	pop	r15
    4d6e:	ef 90       	pop	r14
    4d70:	df 90       	pop	r13
    4d72:	cf 90       	pop	r12
    4d74:	bf 90       	pop	r11
    4d76:	af 90       	pop	r10
    4d78:	08 95       	ret

00004d7a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    4d7a:	cf 92       	push	r12
    4d7c:	df 92       	push	r13
    4d7e:	ef 92       	push	r14
    4d80:	ff 92       	push	r15
    4d82:	0f 93       	push	r16
    4d84:	1f 93       	push	r17
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	ec 01       	movw	r28, r24
    4d8c:	68 01       	movw	r12, r16
    4d8e:	87 01       	movw	r16, r14
    4d90:	0e 94 71 23 	call	0x46e2	; 0x46e2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4d94:	b6 01       	movw	r22, r12
    4d96:	ce 01       	movw	r24, r28
    4d98:	0e 96       	adiw	r24, 0x0e	; 14
    4d9a:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcmp_P>
    4d9e:	21 e0       	ldi	r18, 0x01	; 1
    4da0:	89 2b       	or	r24, r25
    4da2:	09 f0       	breq	.+2      	; 0x4da6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	82 2f       	mov	r24, r18
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	1f 91       	pop	r17
    4dae:	0f 91       	pop	r16
    4db0:	ff 90       	pop	r15
    4db2:	ef 90       	pop	r14
    4db4:	df 90       	pop	r13
    4db6:	cf 90       	pop	r12
    4db8:	08 95       	ret

00004dba <_ZN13Adafruit_FONA8HTTP_sslEb>:
    4dba:	ef 92       	push	r14
    4dbc:	ff 92       	push	r15
    4dbe:	0f 93       	push	r16
    4dc0:	1f 93       	push	r17
    4dc2:	fc 01       	movw	r30, r24
    4dc4:	ea 5e       	subi	r30, 0xEA	; 234
    4dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc8:	00 81       	ld	r16, Z
    4dca:	11 81       	ldd	r17, Z+1	; 0x01
    4dcc:	26 2f       	mov	r18, r22
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	40 e0       	ldi	r20, 0x00	; 0
    4dd2:	50 e0       	ldi	r21, 0x00	; 0
    4dd4:	64 ef       	ldi	r22, 0xF4	; 244
    4dd6:	e6 2e       	mov	r14, r22
    4dd8:	ff 24       	eor	r15, r15
    4dda:	f3 94       	inc	r15
    4ddc:	63 ef       	ldi	r22, 0xF3	; 243
    4dde:	74 e0       	ldi	r23, 0x04	; 4
    4de0:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4de4:	1f 91       	pop	r17
    4de6:	0f 91       	pop	r16
    4de8:	ff 90       	pop	r15
    4dea:	ef 90       	pop	r14
    4dec:	08 95       	ret

00004dee <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    4dee:	0f 93       	push	r16
    4df0:	1f 93       	push	r17
    4df2:	cf 93       	push	r28
    4df4:	df 93       	push	r29
    4df6:	ec 01       	movw	r28, r24
    4df8:	8b 01       	movw	r16, r22
    4dfa:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <_ZN13Adafruit_FONA9HTTP_termEv>
    4dfe:	ce 01       	movw	r24, r28
    4e00:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <_ZN13Adafruit_FONA9HTTP_initEv>
    4e04:	81 11       	cpse	r24, r1
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	38 c0       	rjmp	.+112    	; 0x4e7c <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4e0c:	21 e0       	ldi	r18, 0x01	; 1
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e0       	ldi	r20, 0x00	; 0
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	68 ed       	ldi	r22, 0xD8	; 216
    4e16:	74 e0       	ldi	r23, 0x04	; 4
    4e18:	ce 01       	movw	r24, r28
    4e1a:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4e1e:	88 23       	and	r24, r24
    4e20:	99 f3       	breq	.-26     	; 0x4e08 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e22:	fe 01       	movw	r30, r28
    4e24:	ec 5e       	subi	r30, 0xEC	; 236
    4e26:	fe 4f       	sbci	r31, 0xFE	; 254
    4e28:	40 81       	ld	r20, Z
    4e2a:	51 81       	ldd	r21, Z+1	; 0x01
    4e2c:	65 ed       	ldi	r22, 0xD5	; 213
    4e2e:	74 e0       	ldi	r23, 0x04	; 4
    4e30:	ce 01       	movw	r24, r28
    4e32:	0e 94 1a 21 	call	0x4234	; 0x4234 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4e36:	88 23       	and	r24, r24
    4e38:	39 f3       	breq	.-50     	; 0x4e08 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e3a:	a8 01       	movw	r20, r16
    4e3c:	61 ed       	ldi	r22, 0xD1	; 209
    4e3e:	74 e0       	ldi	r23, 0x04	; 4
    4e40:	ce 01       	movw	r24, r28
    4e42:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    4e46:	88 23       	and	r24, r24
    4e48:	f9 f2       	breq	.-66     	; 0x4e08 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	ed 5e       	subi	r30, 0xED	; 237
    4e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e50:	90 81       	ld	r25, Z
    4e52:	99 23       	and	r25, r25
    4e54:	99 f0       	breq	.+38     	; 0x4e7c <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4e56:	21 e0       	ldi	r18, 0x01	; 1
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	40 e0       	ldi	r20, 0x00	; 0
    4e5c:	50 e0       	ldi	r21, 0x00	; 0
    4e5e:	6b ec       	ldi	r22, 0xCB	; 203
    4e60:	74 e0       	ldi	r23, 0x04	; 4
    4e62:	ce 01       	movw	r24, r28
    4e64:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4e68:	88 23       	and	r24, r24
    4e6a:	71 f2       	breq	.-100    	; 0x4e08 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e6c:	61 e0       	ldi	r22, 0x01	; 1
    4e6e:	ce 01       	movw	r24, r28
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <_ZN13Adafruit_FONA8HTTP_sslEb>
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	0f 91       	pop	r16
    4e84:	08 95       	ret

00004e86 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4e86:	ef 92       	push	r14
    4e88:	ff 92       	push	r15
    4e8a:	0f 93       	push	r16
    4e8c:	1f 93       	push	r17
    4e8e:	cf 93       	push	r28
    4e90:	df 93       	push	r29
    4e92:	ec 01       	movw	r28, r24
    4e94:	79 01       	movw	r14, r18
    4e96:	98 01       	movw	r18, r16
    4e98:	0e 94 cb 23 	call	0x4796	; 0x4796 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    4e9c:	b7 01       	movw	r22, r14
    4e9e:	ce 01       	movw	r24, r28
    4ea0:	0e 96       	adiw	r24, 0x0e	; 14
    4ea2:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcmp_P>
    4ea6:	21 e0       	ldi	r18, 0x01	; 1
    4ea8:	89 2b       	or	r24, r25
    4eaa:	09 f0       	breq	.+2      	; 0x4eae <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	82 2f       	mov	r24, r18
    4eb0:	df 91       	pop	r29
    4eb2:	cf 91       	pop	r28
    4eb4:	1f 91       	pop	r17
    4eb6:	0f 91       	pop	r16
    4eb8:	ff 90       	pop	r15
    4eba:	ef 90       	pop	r14
    4ebc:	08 95       	ret

00004ebe <_ZN13Adafruit_FONA10enableGPRSEb>:
    4ebe:	8f 92       	push	r8
    4ec0:	9f 92       	push	r9
    4ec2:	af 92       	push	r10
    4ec4:	bf 92       	push	r11
    4ec6:	cf 92       	push	r12
    4ec8:	df 92       	push	r13
    4eca:	ef 92       	push	r14
    4ecc:	ff 92       	push	r15
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
    4ed2:	cf 93       	push	r28
    4ed4:	df 93       	push	r29
    4ed6:	ec 01       	movw	r28, r24
    4ed8:	20 e2       	ldi	r18, 0x20	; 32
    4eda:	3e e4       	ldi	r19, 0x4E	; 78
    4edc:	66 23       	and	r22, r22
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    4ee0:	0f c1       	rjmp	.+542    	; 0x5100 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    4ee2:	48 e7       	ldi	r20, 0x78	; 120
    4ee4:	56 e0       	ldi	r21, 0x06	; 6
    4ee6:	6d e6       	ldi	r22, 0x6D	; 109
    4ee8:	76 e0       	ldi	r23, 0x06	; 6
    4eea:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4eee:	7e 01       	movw	r14, r28
    4ef0:	8a ee       	ldi	r24, 0xEA	; 234
    4ef2:	e8 1a       	sub	r14, r24
    4ef4:	8e ef       	ldi	r24, 0xFE	; 254
    4ef6:	f8 0a       	sbc	r15, r24
    4ef8:	f7 01       	movw	r30, r14
    4efa:	40 81       	ld	r20, Z
    4efc:	51 81       	ldd	r21, Z+1	; 0x01
    4efe:	20 e1       	ldi	r18, 0x10	; 16
    4f00:	37 e2       	ldi	r19, 0x27	; 39
    4f02:	62 e6       	ldi	r22, 0x62	; 98
    4f04:	76 e0       	ldi	r23, 0x06	; 6
    4f06:	ce 01       	movw	r24, r28
    4f08:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f0c:	88 23       	and	r24, r24
    4f0e:	09 f4       	brne	.+2      	; 0x4f12 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    4f10:	24 c1       	rjmp	.+584    	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f12:	f7 01       	movw	r30, r14
    4f14:	40 81       	ld	r20, Z
    4f16:	51 81       	ldd	r21, Z+1	; 0x01
    4f18:	20 e1       	ldi	r18, 0x10	; 16
    4f1a:	37 e2       	ldi	r19, 0x27	; 39
    4f1c:	64 e4       	ldi	r22, 0x44	; 68
    4f1e:	76 e0       	ldi	r23, 0x06	; 6
    4f20:	ce 01       	movw	r24, r28
    4f22:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f26:	88 23       	and	r24, r24
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    4f2a:	17 c1       	rjmp	.+558    	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f2c:	4e 01       	movw	r8, r28
    4f2e:	f3 ef       	ldi	r31, 0xF3	; 243
    4f30:	8f 1a       	sub	r8, r31
    4f32:	fe ef       	ldi	r31, 0xFE	; 254
    4f34:	9f 0a       	sbc	r9, r31
    4f36:	f4 01       	movw	r30, r8
    4f38:	40 81       	ld	r20, Z
    4f3a:	51 81       	ldd	r21, Z+1	; 0x01
    4f3c:	41 15       	cp	r20, r1
    4f3e:	51 05       	cpc	r21, r1
    4f40:	a9 f4       	brne	.+42     	; 0x4f6c <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4f42:	f7 01       	movw	r30, r14
    4f44:	40 81       	ld	r20, Z
    4f46:	51 81       	ldd	r21, Z+1	; 0x01
    4f48:	2f ef       	ldi	r18, 0xFF	; 255
    4f4a:	3f ef       	ldi	r19, 0xFF	; 255
    4f4c:	6f ed       	ldi	r22, 0xDF	; 223
    4f4e:	75 e0       	ldi	r23, 0x05	; 5
    4f50:	ce 01       	movw	r24, r28
    4f52:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f56:	88 23       	and	r24, r24
    4f58:	09 f4       	brne	.+2      	; 0x4f5c <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    4f5a:	ff c0       	rjmp	.+510    	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f5c:	f7 01       	movw	r30, r14
    4f5e:	40 81       	ld	r20, Z
    4f60:	51 81       	ldd	r21, Z+1	; 0x01
    4f62:	2f ef       	ldi	r18, 0xFF	; 255
    4f64:	3f ef       	ldi	r19, 0xFF	; 255
    4f66:	66 ed       	ldi	r22, 0xD6	; 214
    4f68:	75 e0       	ldi	r23, 0x05	; 5
    4f6a:	e8 c0       	rjmp	.+464    	; 0x513c <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    4f6c:	f7 01       	movw	r30, r14
    4f6e:	20 81       	ld	r18, Z
    4f70:	31 81       	ldd	r19, Z+1	; 0x01
    4f72:	00 e1       	ldi	r16, 0x10	; 16
    4f74:	17 e2       	ldi	r17, 0x27	; 39
    4f76:	60 e3       	ldi	r22, 0x30	; 48
    4f78:	76 e0       	ldi	r23, 0x06	; 6
    4f7a:	ce 01       	movw	r24, r28
    4f7c:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4f80:	88 23       	and	r24, r24
    4f82:	09 f4       	brne	.+2      	; 0x4f86 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4f84:	ea c0       	rjmp	.+468    	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f86:	ce 01       	movw	r24, r28
    4f88:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN13Adafruit_FONA10flushInputEv>
    4f8c:	8e 01       	movw	r16, r28
    4f8e:	08 5e       	subi	r16, 0xE8	; 232
    4f90:	1e 4f       	sbci	r17, 0xFE	; 254
    4f92:	66 e2       	ldi	r22, 0x26	; 38
    4f94:	76 e0       	ldi	r23, 0x06	; 6
    4f96:	f8 01       	movw	r30, r16
    4f98:	80 81       	ld	r24, Z
    4f9a:	91 81       	ldd	r25, Z+1	; 0x01
    4f9c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4fa0:	f4 01       	movw	r30, r8
    4fa2:	60 81       	ld	r22, Z
    4fa4:	71 81       	ldd	r23, Z+1	; 0x01
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4fb0:	5e 01       	movw	r10, r28
    4fb2:	f1 ef       	ldi	r31, 0xF1	; 241
    4fb4:	af 1a       	sub	r10, r31
    4fb6:	fe ef       	ldi	r31, 0xFE	; 254
    4fb8:	bf 0a       	sbc	r11, r31
    4fba:	f5 01       	movw	r30, r10
    4fbc:	80 81       	ld	r24, Z
    4fbe:	91 81       	ldd	r25, Z+1	; 0x01
    4fc0:	89 2b       	or	r24, r25
    4fc2:	79 f0       	breq	.+30     	; 0x4fe2 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    4fc4:	6d e7       	ldi	r22, 0x7D	; 125
    4fc6:	72 e0       	ldi	r23, 0x02	; 2
    4fc8:	f8 01       	movw	r30, r16
    4fca:	80 81       	ld	r24, Z
    4fcc:	91 81       	ldd	r25, Z+1	; 0x01
    4fce:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    4fd2:	f5 01       	movw	r30, r10
    4fd4:	60 81       	ld	r22, Z
    4fd6:	71 81       	ldd	r23, Z+1	; 0x01
    4fd8:	f8 01       	movw	r30, r16
    4fda:	80 81       	ld	r24, Z
    4fdc:	91 81       	ldd	r25, Z+1	; 0x01
    4fde:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    4fe2:	6e 01       	movw	r12, r28
    4fe4:	ff ee       	ldi	r31, 0xEF	; 239
    4fe6:	cf 1a       	sub	r12, r31
    4fe8:	fe ef       	ldi	r31, 0xFE	; 254
    4fea:	df 0a       	sbc	r13, r31
    4fec:	f6 01       	movw	r30, r12
    4fee:	80 81       	ld	r24, Z
    4ff0:	91 81       	ldd	r25, Z+1	; 0x01
    4ff2:	89 2b       	or	r24, r25
    4ff4:	79 f0       	breq	.+30     	; 0x5014 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    4ff6:	6d e7       	ldi	r22, 0x7D	; 125
    4ff8:	72 e0       	ldi	r23, 0x02	; 2
    4ffa:	f8 01       	movw	r30, r16
    4ffc:	80 81       	ld	r24, Z
    4ffe:	91 81       	ldd	r25, Z+1	; 0x01
    5000:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    5004:	f6 01       	movw	r30, r12
    5006:	60 81       	ld	r22, Z
    5008:	71 81       	ldd	r23, Z+1	; 0x01
    500a:	f8 01       	movw	r30, r16
    500c:	80 81       	ld	r24, Z
    500e:	91 81       	ldd	r25, Z+1	; 0x01
    5010:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    5014:	6f e7       	ldi	r22, 0x7F	; 127
    5016:	72 e0       	ldi	r23, 0x02	; 2
    5018:	f8 01       	movw	r30, r16
    501a:	80 81       	ld	r24, Z
    501c:	91 81       	ldd	r25, Z+1	; 0x01
    501e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    5022:	6f e1       	ldi	r22, 0x1F	; 31
    5024:	76 e0       	ldi	r23, 0x06	; 6
    5026:	89 ec       	ldi	r24, 0xC9	; 201
    5028:	96 e0       	ldi	r25, 0x06	; 6
    502a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    502e:	65 e1       	ldi	r22, 0x15	; 21
    5030:	76 e0       	ldi	r23, 0x06	; 6
    5032:	89 ec       	ldi	r24, 0xC9	; 201
    5034:	96 e0       	ldi	r25, 0x06	; 6
    5036:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    503a:	f4 01       	movw	r30, r8
    503c:	60 81       	ld	r22, Z
    503e:	71 81       	ldd	r23, Z+1	; 0x01
    5040:	89 ec       	ldi	r24, 0xC9	; 201
    5042:	96 e0       	ldi	r25, 0x06	; 6
    5044:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    5048:	f5 01       	movw	r30, r10
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	89 2b       	or	r24, r25
    5050:	69 f0       	breq	.+26     	; 0x506c <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    5052:	6d e7       	ldi	r22, 0x7D	; 125
    5054:	72 e0       	ldi	r23, 0x02	; 2
    5056:	89 ec       	ldi	r24, 0xC9	; 201
    5058:	96 e0       	ldi	r25, 0x06	; 6
    505a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    505e:	f5 01       	movw	r30, r10
    5060:	60 81       	ld	r22, Z
    5062:	71 81       	ldd	r23, Z+1	; 0x01
    5064:	89 ec       	ldi	r24, 0xC9	; 201
    5066:	96 e0       	ldi	r25, 0x06	; 6
    5068:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    506c:	f6 01       	movw	r30, r12
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	89 2b       	or	r24, r25
    5074:	69 f0       	breq	.+26     	; 0x5090 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    5076:	6d e7       	ldi	r22, 0x7D	; 125
    5078:	72 e0       	ldi	r23, 0x02	; 2
    507a:	89 ec       	ldi	r24, 0xC9	; 201
    507c:	96 e0       	ldi	r25, 0x06	; 6
    507e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5printEPKc>
    5082:	f6 01       	movw	r30, r12
    5084:	60 81       	ld	r22, Z
    5086:	71 81       	ldd	r23, Z+1	; 0x01
    5088:	89 ec       	ldi	r24, 0xC9	; 201
    508a:	96 e0       	ldi	r25, 0x06	; 6
    508c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    5090:	6f e7       	ldi	r22, 0x7F	; 127
    5092:	72 e0       	ldi	r23, 0x02	; 2
    5094:	89 ec       	ldi	r24, 0xC9	; 201
    5096:	96 e0       	ldi	r25, 0x06	; 6
    5098:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_ZN5Print7printlnEPKc>
    509c:	f7 01       	movw	r30, r14
    509e:	60 81       	ld	r22, Z
    50a0:	71 81       	ldd	r23, Z+1	; 0x01
    50a2:	40 e1       	ldi	r20, 0x10	; 16
    50a4:	57 e2       	ldi	r21, 0x27	; 39
    50a6:	ce 01       	movw	r24, r28
    50a8:	0e 94 bf 20 	call	0x417e	; 0x417e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    50ac:	88 23       	and	r24, r24
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    50b0:	54 c0       	rjmp	.+168    	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    50b2:	f5 01       	movw	r30, r10
    50b4:	40 81       	ld	r20, Z
    50b6:	51 81       	ldd	r21, Z+1	; 0x01
    50b8:	41 15       	cp	r20, r1
    50ba:	51 05       	cpc	r21, r1
    50bc:	39 f4       	brne	.+14     	; 0x50cc <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    50be:	f6 01       	movw	r30, r12
    50c0:	40 81       	ld	r20, Z
    50c2:	51 81       	ldd	r21, Z+1	; 0x01
    50c4:	41 15       	cp	r20, r1
    50c6:	51 05       	cpc	r21, r1
    50c8:	71 f4       	brne	.+28     	; 0x50e6 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    50ca:	3b cf       	rjmp	.-394    	; 0x4f42 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    50cc:	f7 01       	movw	r30, r14
    50ce:	20 81       	ld	r18, Z
    50d0:	31 81       	ldd	r19, Z+1	; 0x01
    50d2:	00 e1       	ldi	r16, 0x10	; 16
    50d4:	17 e2       	ldi	r17, 0x27	; 39
    50d6:	60 e0       	ldi	r22, 0x00	; 0
    50d8:	76 e0       	ldi	r23, 0x06	; 6
    50da:	ce 01       	movw	r24, r28
    50dc:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    50e0:	81 11       	cpse	r24, r1
    50e2:	ed cf       	rjmp	.-38     	; 0x50be <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    50e4:	3a c0       	rjmp	.+116    	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    50e6:	f7 01       	movw	r30, r14
    50e8:	20 81       	ld	r18, Z
    50ea:	31 81       	ldd	r19, Z+1	; 0x01
    50ec:	00 e1       	ldi	r16, 0x10	; 16
    50ee:	17 e2       	ldi	r17, 0x27	; 39
    50f0:	6c ee       	ldi	r22, 0xEC	; 236
    50f2:	75 e0       	ldi	r23, 0x05	; 5
    50f4:	ce 01       	movw	r24, r28
    50f6:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    50fa:	81 11       	cpse	r24, r1
    50fc:	22 cf       	rjmp	.-444    	; 0x4f42 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    50fe:	2d c0       	rjmp	.+90     	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5100:	4e ec       	ldi	r20, 0xCE	; 206
    5102:	55 e0       	ldi	r21, 0x05	; 5
    5104:	63 ec       	ldi	r22, 0xC3	; 195
    5106:	75 e0       	ldi	r23, 0x05	; 5
    5108:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    510c:	88 23       	and	r24, r24
    510e:	29 f1       	breq	.+74     	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5110:	8e 01       	movw	r16, r28
    5112:	0a 5e       	subi	r16, 0xEA	; 234
    5114:	1e 4f       	sbci	r17, 0xFE	; 254
    5116:	f8 01       	movw	r30, r16
    5118:	40 81       	ld	r20, Z
    511a:	51 81       	ldd	r21, Z+1	; 0x01
    511c:	20 e1       	ldi	r18, 0x10	; 16
    511e:	37 e2       	ldi	r19, 0x27	; 39
    5120:	66 eb       	ldi	r22, 0xB6	; 182
    5122:	75 e0       	ldi	r23, 0x05	; 5
    5124:	ce 01       	movw	r24, r28
    5126:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    512a:	88 23       	and	r24, r24
    512c:	b1 f0       	breq	.+44     	; 0x515a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    512e:	f8 01       	movw	r30, r16
    5130:	40 81       	ld	r20, Z
    5132:	51 81       	ldd	r21, Z+1	; 0x01
    5134:	20 e1       	ldi	r18, 0x10	; 16
    5136:	37 e2       	ldi	r19, 0x27	; 39
    5138:	6b ea       	ldi	r22, 0xAB	; 171
    513a:	75 e0       	ldi	r23, 0x05	; 5
    513c:	ce 01       	movw	r24, r28
    513e:	df 91       	pop	r29
    5140:	cf 91       	pop	r28
    5142:	1f 91       	pop	r17
    5144:	0f 91       	pop	r16
    5146:	ff 90       	pop	r15
    5148:	ef 90       	pop	r14
    514a:	df 90       	pop	r13
    514c:	cf 90       	pop	r12
    514e:	bf 90       	pop	r11
    5150:	af 90       	pop	r10
    5152:	9f 90       	pop	r9
    5154:	8f 90       	pop	r8
    5156:	0c 94 2f 24 	jmp	0x485e	; 0x485e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	1f 91       	pop	r17
    5162:	0f 91       	pop	r16
    5164:	ff 90       	pop	r15
    5166:	ef 90       	pop	r14
    5168:	df 90       	pop	r13
    516a:	cf 90       	pop	r12
    516c:	bf 90       	pop	r11
    516e:	af 90       	pop	r10
    5170:	9f 90       	pop	r9
    5172:	8f 90       	pop	r8
    5174:	08 95       	ret

00005176 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    5176:	af 92       	push	r10
    5178:	bf 92       	push	r11
    517a:	cf 92       	push	r12
    517c:	df 92       	push	r13
    517e:	ef 92       	push	r14
    5180:	ff 92       	push	r15
    5182:	0f 93       	push	r16
    5184:	cf 93       	push	r28
    5186:	df 93       	push	r29
    5188:	5b 01       	movw	r10, r22
    518a:	6a 01       	movw	r12, r20
    518c:	e2 2e       	mov	r14, r18
    518e:	0e 96       	adiw	r24, 0x0e	; 14
    5190:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strstr_P>
    5194:	ec 01       	movw	r28, r24
    5196:	89 2b       	or	r24, r25
    5198:	c1 f0       	breq	.+48     	; 0x51ca <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    519a:	c5 01       	movw	r24, r10
    519c:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__strlen_P>
    51a0:	8c 0f       	add	r24, r28
    51a2:	9d 1f       	adc	r25, r29
    51a4:	c0 e0       	ldi	r28, 0x00	; 0
    51a6:	f1 2c       	mov	r15, r1
    51a8:	c0 17       	cp	r28, r16
    51aa:	41 f0       	breq	.+16     	; 0x51bc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    51ac:	b7 01       	movw	r22, r14
    51ae:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <strchr>
    51b2:	00 97       	sbiw	r24, 0x00	; 0
    51b4:	51 f0       	breq	.+20     	; 0x51ca <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    51b6:	01 96       	adiw	r24, 0x01	; 1
    51b8:	cf 5f       	subi	r28, 0xFF	; 255
    51ba:	f6 cf       	rjmp	.-20     	; 0x51a8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    51bc:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <atoi>
    51c0:	f6 01       	movw	r30, r12
    51c2:	91 83       	std	Z+1, r25	; 0x01
    51c4:	80 83       	st	Z, r24
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	01 c0       	rjmp	.+2      	; 0x51cc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	df 91       	pop	r29
    51ce:	cf 91       	pop	r28
    51d0:	0f 91       	pop	r16
    51d2:	ff 90       	pop	r15
    51d4:	ef 90       	pop	r14
    51d6:	df 90       	pop	r13
    51d8:	cf 90       	pop	r12
    51da:	bf 90       	pop	r11
    51dc:	af 90       	pop	r10
    51de:	08 95       	ret

000051e0 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    51e0:	ef 92       	push	r14
    51e2:	ff 92       	push	r15
    51e4:	0f 93       	push	r16
    51e6:	cf 93       	push	r28
    51e8:	df 93       	push	r29
    51ea:	ec 01       	movw	r28, r24
    51ec:	7b 01       	movw	r14, r22
    51ee:	44 ef       	ldi	r20, 0xF4	; 244
    51f0:	51 e0       	ldi	r21, 0x01	; 1
    51f2:	6a e0       	ldi	r22, 0x0A	; 10
    51f4:	75 e0       	ldi	r23, 0x05	; 5
    51f6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    51fa:	00 e0       	ldi	r16, 0x00	; 0
    51fc:	2c e2       	ldi	r18, 0x2C	; 44
    51fe:	a7 01       	movw	r20, r14
    5200:	6f ef       	ldi	r22, 0xFF	; 255
    5202:	74 e0       	ldi	r23, 0x04	; 4
    5204:	ce 01       	movw	r24, r28
    5206:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    520a:	df 91       	pop	r29
    520c:	cf 91       	pop	r28
    520e:	0f 91       	pop	r16
    5210:	ff 90       	pop	r15
    5212:	ef 90       	pop	r14
    5214:	08 95       	ret

00005216 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    5216:	4f 92       	push	r4
    5218:	5f 92       	push	r5
    521a:	6f 92       	push	r6
    521c:	7f 92       	push	r7
    521e:	af 92       	push	r10
    5220:	bf 92       	push	r11
    5222:	cf 92       	push	r12
    5224:	df 92       	push	r13
    5226:	ef 92       	push	r14
    5228:	ff 92       	push	r15
    522a:	0f 93       	push	r16
    522c:	1f 93       	push	r17
    522e:	cf 93       	push	r28
    5230:	df 93       	push	r29
    5232:	ec 01       	movw	r28, r24
    5234:	5a 01       	movw	r10, r20
    5236:	69 01       	movw	r12, r18
    5238:	27 01       	movw	r4, r14
    523a:	38 01       	movw	r6, r16
    523c:	fc 01       	movw	r30, r24
    523e:	ea 5e       	subi	r30, 0xEA	; 234
    5240:	fe 4f       	sbci	r31, 0xFE	; 254
    5242:	00 81       	ld	r16, Z
    5244:	11 81       	ldd	r17, Z+1	; 0x01
    5246:	26 2f       	mov	r18, r22
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	40 e0       	ldi	r20, 0x00	; 0
    524c:	50 e0       	ldi	r21, 0x00	; 0
    524e:	84 ef       	ldi	r24, 0xF4	; 244
    5250:	e8 2e       	mov	r14, r24
    5252:	ff 24       	eor	r15, r15
    5254:	f3 94       	inc	r15
    5256:	60 e3       	ldi	r22, 0x30	; 48
    5258:	75 e0       	ldi	r23, 0x05	; 5
    525a:	ce 01       	movw	r24, r28
    525c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    5260:	81 11       	cpse	r24, r1
    5262:	02 c0       	rjmp	.+4      	; 0x5268 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	17 c0       	rjmp	.+46     	; 0x5296 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    5268:	40 e0       	ldi	r20, 0x00	; 0
    526a:	b2 01       	movw	r22, r4
    526c:	ce 01       	movw	r24, r28
    526e:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    5272:	01 e0       	ldi	r16, 0x01	; 1
    5274:	2c e2       	ldi	r18, 0x2C	; 44
    5276:	a5 01       	movw	r20, r10
    5278:	63 e2       	ldi	r22, 0x23	; 35
    527a:	75 e0       	ldi	r23, 0x05	; 5
    527c:	ce 01       	movw	r24, r28
    527e:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5282:	88 23       	and	r24, r24
    5284:	79 f3       	breq	.-34     	; 0x5264 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    5286:	02 e0       	ldi	r16, 0x02	; 2
    5288:	2c e2       	ldi	r18, 0x2C	; 44
    528a:	a6 01       	movw	r20, r12
    528c:	66 e1       	ldi	r22, 0x16	; 22
    528e:	75 e0       	ldi	r23, 0x05	; 5
    5290:	ce 01       	movw	r24, r28
    5292:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	1f 91       	pop	r17
    529c:	0f 91       	pop	r16
    529e:	ff 90       	pop	r15
    52a0:	ef 90       	pop	r14
    52a2:	df 90       	pop	r13
    52a4:	cf 90       	pop	r12
    52a6:	bf 90       	pop	r11
    52a8:	af 90       	pop	r10
    52aa:	7f 90       	pop	r7
    52ac:	6f 90       	pop	r6
    52ae:	5f 90       	pop	r5
    52b0:	4f 90       	pop	r4
    52b2:	08 95       	ret

000052b4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    52b4:	4f 92       	push	r4
    52b6:	5f 92       	push	r5
    52b8:	6f 92       	push	r6
    52ba:	7f 92       	push	r7
    52bc:	8f 92       	push	r8
    52be:	9f 92       	push	r9
    52c0:	af 92       	push	r10
    52c2:	bf 92       	push	r11
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ef 92       	push	r14
    52ca:	ff 92       	push	r15
    52cc:	0f 93       	push	r16
    52ce:	1f 93       	push	r17
    52d0:	cf 93       	push	r28
    52d2:	df 93       	push	r29
    52d4:	ec 01       	movw	r28, r24
    52d6:	2a 01       	movw	r4, r20
    52d8:	39 01       	movw	r6, r18
    52da:	48 01       	movw	r8, r16
    52dc:	57 01       	movw	r10, r14
    52de:	0e 94 f7 26 	call	0x4dee	; 0x4dee <_ZN13Adafruit_FONA10HTTP_setupEPc>
    52e2:	88 23       	and	r24, r24
    52e4:	09 f4       	brne	.+2      	; 0x52e8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    52e6:	71 c0       	rjmp	.+226    	; 0x53ca <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    52e8:	a2 01       	movw	r20, r4
    52ea:	6b ee       	ldi	r22, 0xEB	; 235
    52ec:	74 e0       	ldi	r23, 0x04	; 4
    52ee:	ce 01       	movw	r24, r28
    52f0:	0e 94 1a 21 	call	0x4234	; 0x4234 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    52f4:	88 23       	and	r24, r24
    52f6:	09 f4       	brne	.+2      	; 0x52fa <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    52f8:	68 c0       	rjmp	.+208    	; 0x53ca <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    52fa:	a8 01       	movw	r20, r16
    52fc:	60 e0       	ldi	r22, 0x00	; 0
    52fe:	70 e0       	ldi	r23, 0x00	; 0
    5300:	00 e1       	ldi	r16, 0x10	; 16
    5302:	17 e2       	ldi	r17, 0x27	; 39
    5304:	20 e0       	ldi	r18, 0x00	; 0
    5306:	30 e0       	ldi	r19, 0x00	; 0
    5308:	ce 01       	movw	r24, r28
    530a:	0e 94 54 21 	call	0x42a8	; 0x42a8 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    530e:	88 23       	and	r24, r24
    5310:	09 f4       	brne	.+2      	; 0x5314 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    5312:	5b c0       	rjmp	.+182    	; 0x53ca <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5314:	fe 01       	movw	r30, r28
    5316:	e8 5e       	subi	r30, 0xE8	; 232
    5318:	fe 4f       	sbci	r31, 0xFE	; 254
    531a:	80 81       	ld	r24, Z
    531c:	91 81       	ldd	r25, Z+1	; 0x01
    531e:	dc 01       	movw	r26, r24
    5320:	ed 91       	ld	r30, X+
    5322:	fc 91       	ld	r31, X
    5324:	02 80       	ldd	r0, Z+2	; 0x02
    5326:	f3 81       	ldd	r31, Z+3	; 0x03
    5328:	e0 2d       	mov	r30, r0
    532a:	a4 01       	movw	r20, r8
    532c:	b3 01       	movw	r22, r6
    532e:	09 95       	icall
    5330:	fe 01       	movw	r30, r28
    5332:	ea 5e       	subi	r30, 0xEA	; 234
    5334:	fe 4f       	sbci	r31, 0xFE	; 254
    5336:	60 81       	ld	r22, Z
    5338:	71 81       	ldd	r23, Z+1	; 0x01
    533a:	40 e1       	ldi	r20, 0x10	; 16
    533c:	57 e2       	ldi	r21, 0x27	; 39
    533e:	ce 01       	movw	r24, r28
    5340:	0e 94 bf 20 	call	0x417e	; 0x417e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5344:	88 23       	and	r24, r24
    5346:	09 f4       	brne	.+2      	; 0x534a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    5348:	40 c0       	rjmp	.+128    	; 0x53ca <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    534a:	10 e1       	ldi	r17, 0x10	; 16
    534c:	e1 2e       	mov	r14, r17
    534e:	17 e2       	ldi	r17, 0x27	; 39
    5350:	f1 2e       	mov	r15, r17
    5352:	00 e0       	ldi	r16, 0x00	; 0
    5354:	10 e0       	ldi	r17, 0x00	; 0
    5356:	96 01       	movw	r18, r12
    5358:	a5 01       	movw	r20, r10
    535a:	61 e0       	ldi	r22, 0x01	; 1
    535c:	ce 01       	movw	r24, r28
    535e:	0e 94 0b 29 	call	0x5216	; 0x5216 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    5362:	88 23       	and	r24, r24
    5364:	91 f1       	breq	.+100    	; 0x53ca <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5366:	62 ee       	ldi	r22, 0xE2	; 226
    5368:	74 e0       	ldi	r23, 0x04	; 4
    536a:	89 ec       	ldi	r24, 0xC9	; 201
    536c:	96 e0       	ldi	r25, 0x06	; 6
    536e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    5372:	f5 01       	movw	r30, r10
    5374:	60 81       	ld	r22, Z
    5376:	71 81       	ldd	r23, Z+1	; 0x01
    5378:	4a e0       	ldi	r20, 0x0A	; 10
    537a:	50 e0       	ldi	r21, 0x00	; 0
    537c:	89 ec       	ldi	r24, 0xC9	; 201
    537e:	96 e0       	ldi	r25, 0x06	; 6
    5380:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN5Print7printlnEji>
    5384:	6c ed       	ldi	r22, 0xDC	; 220
    5386:	74 e0       	ldi	r23, 0x04	; 4
    5388:	89 ec       	ldi	r24, 0xC9	; 201
    538a:	96 e0       	ldi	r25, 0x06	; 6
    538c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_ZN5Print5printEPK19__FlashStringHelper>
    5390:	d6 01       	movw	r26, r12
    5392:	6d 91       	ld	r22, X+
    5394:	7c 91       	ld	r23, X
    5396:	4a e0       	ldi	r20, 0x0A	; 10
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	89 ec       	ldi	r24, 0xC9	; 201
    539c:	96 e0       	ldi	r25, 0x06	; 6
    539e:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <_ZN5Print7printlnEji>
    53a2:	b6 01       	movw	r22, r12
    53a4:	ce 01       	movw	r24, r28
    53a6:	df 91       	pop	r29
    53a8:	cf 91       	pop	r28
    53aa:	1f 91       	pop	r17
    53ac:	0f 91       	pop	r16
    53ae:	ff 90       	pop	r15
    53b0:	ef 90       	pop	r14
    53b2:	df 90       	pop	r13
    53b4:	cf 90       	pop	r12
    53b6:	bf 90       	pop	r11
    53b8:	af 90       	pop	r10
    53ba:	9f 90       	pop	r9
    53bc:	8f 90       	pop	r8
    53be:	7f 90       	pop	r7
    53c0:	6f 90       	pop	r6
    53c2:	5f 90       	pop	r5
    53c4:	4f 90       	pop	r4
    53c6:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	df 91       	pop	r29
    53ce:	cf 91       	pop	r28
    53d0:	1f 91       	pop	r17
    53d2:	0f 91       	pop	r16
    53d4:	ff 90       	pop	r15
    53d6:	ef 90       	pop	r14
    53d8:	df 90       	pop	r13
    53da:	cf 90       	pop	r12
    53dc:	bf 90       	pop	r11
    53de:	af 90       	pop	r10
    53e0:	9f 90       	pop	r9
    53e2:	8f 90       	pop	r8
    53e4:	7f 90       	pop	r7
    53e6:	6f 90       	pop	r6
    53e8:	5f 90       	pop	r5
    53ea:	4f 90       	pop	r4
    53ec:	08 95       	ret

000053ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    53ee:	af 92       	push	r10
    53f0:	bf 92       	push	r11
    53f2:	cf 92       	push	r12
    53f4:	df 92       	push	r13
    53f6:	ef 92       	push	r14
    53f8:	0f 93       	push	r16
    53fa:	1f 93       	push	r17
    53fc:	cf 93       	push	r28
    53fe:	df 93       	push	r29
    5400:	ec 01       	movw	r28, r24
    5402:	6a 01       	movw	r12, r20
    5404:	59 01       	movw	r10, r18
    5406:	10 2f       	mov	r17, r16
    5408:	0e 2d       	mov	r16, r14
    540a:	44 ef       	ldi	r20, 0xF4	; 244
    540c:	51 e0       	ldi	r21, 0x01	; 1
    540e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5412:	21 2f       	mov	r18, r17
    5414:	a5 01       	movw	r20, r10
    5416:	b6 01       	movw	r22, r12
    5418:	ce 01       	movw	r24, r28
    541a:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    541e:	18 2f       	mov	r17, r24
    5420:	88 23       	and	r24, r24
    5422:	31 f0       	breq	.+12     	; 0x5430 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5424:	40 e0       	ldi	r20, 0x00	; 0
    5426:	64 ef       	ldi	r22, 0xF4	; 244
    5428:	71 e0       	ldi	r23, 0x01	; 1
    542a:	ce 01       	movw	r24, r28
    542c:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN13Adafruit_FONA8readlineEjb>
    5430:	81 2f       	mov	r24, r17
    5432:	df 91       	pop	r29
    5434:	cf 91       	pop	r28
    5436:	1f 91       	pop	r17
    5438:	0f 91       	pop	r16
    543a:	ef 90       	pop	r14
    543c:	df 90       	pop	r13
    543e:	cf 90       	pop	r12
    5440:	bf 90       	pop	r11
    5442:	af 90       	pop	r10
    5444:	08 95       	ret

00005446 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    5446:	ef 92       	push	r14
    5448:	0f 93       	push	r16
    544a:	9b 01       	movw	r18, r22
    544c:	ee 24       	eor	r14, r14
    544e:	e3 94       	inc	r14
    5450:	0c e2       	ldi	r16, 0x2C	; 44
    5452:	4c ed       	ldi	r20, 0xDC	; 220
    5454:	56 e0       	ldi	r21, 0x06	; 6
    5456:	65 ed       	ldi	r22, 0xD5	; 213
    5458:	76 e0       	ldi	r23, 0x06	; 6
    545a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    545e:	0f 91       	pop	r16
    5460:	ef 90       	pop	r14
    5462:	08 95       	ret

00005464 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    5464:	ef 92       	push	r14
    5466:	0f 93       	push	r16
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	00 d0       	rcall	.+0      	; 0x546e <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    546e:	cd b7       	in	r28, 0x3d	; 61
    5470:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5472:	ee 24       	eor	r14, r14
    5474:	e3 94       	inc	r14
    5476:	0c e2       	ldi	r16, 0x2C	; 44
    5478:	9e 01       	movw	r18, r28
    547a:	2f 5f       	subi	r18, 0xFF	; 255
    547c:	3f 4f       	sbci	r19, 0xFF	; 255
    547e:	4d ec       	ldi	r20, 0xCD	; 205
    5480:	56 e0       	ldi	r21, 0x06	; 6
    5482:	64 ec       	ldi	r22, 0xC4	; 196
    5484:	76 e0       	ldi	r23, 0x06	; 6
    5486:	0e 94 f7 29 	call	0x53ee	; 0x53ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    548a:	88 23       	and	r24, r24
    548c:	11 f0       	breq	.+4      	; 0x5492 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    548e:	89 81       	ldd	r24, Y+1	; 0x01
    5490:	01 c0       	rjmp	.+2      	; 0x5494 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5492:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    5494:	0f 90       	pop	r0
    5496:	0f 90       	pop	r0
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
    549c:	0f 91       	pop	r16
    549e:	ef 90       	pop	r14
    54a0:	08 95       	ret

000054a2 <_ZN13Adafruit_FONA7getRSSIEv>:
//check #ifdef fona_debug works wrt memory




uint8_t Adafruit_FONA::getRSSI(void) {
    54a2:	ef 92       	push	r14
    54a4:	0f 93       	push	r16
    54a6:	cf 93       	push	r28
    54a8:	df 93       	push	r29
    54aa:	00 d0       	rcall	.+0      	; 0x54ac <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    54ac:	cd b7       	in	r28, 0x3d	; 61
    54ae:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    54b0:	e1 2c       	mov	r14, r1
    54b2:	0c e2       	ldi	r16, 0x2C	; 44
    54b4:	9e 01       	movw	r18, r28
    54b6:	2f 5f       	subi	r18, 0xFF	; 255
    54b8:	3f 4f       	sbci	r19, 0xFF	; 255
    54ba:	4d eb       	ldi	r20, 0xBD	; 189
    54bc:	56 e0       	ldi	r21, 0x06	; 6
    54be:	66 eb       	ldi	r22, 0xB6	; 182
    54c0:	76 e0       	ldi	r23, 0x06	; 6
    54c2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    54c6:	88 23       	and	r24, r24
    54c8:	11 f0       	breq	.+4      	; 0x54ce <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    54ca:	89 81       	ldd	r24, Y+1	; 0x01
    54cc:	01 c0       	rjmp	.+2      	; 0x54d0 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    54ce:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    54d0:	0f 90       	pop	r0
    54d2:	0f 90       	pop	r0
    54d4:	df 91       	pop	r29
    54d6:	cf 91       	pop	r28
    54d8:	0f 91       	pop	r16
    54da:	ef 90       	pop	r14
    54dc:	08 95       	ret

000054de <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    54de:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    54e2:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    54e6:	28 17       	cp	r18, r24
    54e8:	39 07       	cpc	r19, r25
    54ea:	b9 f4       	brne	.+46     	; 0x551a <_ZN14SoftwareSerial4readEv+0x3c>
    54ec:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    54f0:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    54f4:	98 17       	cp	r25, r24
    54f6:	89 f0       	breq	.+34     	; 0x551a <_ZN14SoftwareSerial4readEv+0x3c>
    54f8:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	ef 58       	subi	r30, 0x8F	; 143
    5500:	f8 4f       	sbci	r31, 0xF8	; 248
    5502:	80 81       	ld	r24, Z
    5504:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	2f 5f       	subi	r18, 0xFF	; 255
    550c:	3f 4f       	sbci	r19, 0xFF	; 255
    550e:	2f 73       	andi	r18, 0x3F	; 63
    5510:	33 27       	eor	r19, r19
    5512:	20 93 6f 07 	sts	0x076F, r18	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	08 95       	ret
    551a:	8f ef       	ldi	r24, 0xFF	; 255
    551c:	9f ef       	ldi	r25, 0xFF	; 255
    551e:	08 95       	ret

00005520 <_ZN14SoftwareSerial5writeEh>:
    5520:	1f 93       	push	r17
    5522:	cf 93       	push	r28
    5524:	df 93       	push	r29
    5526:	dc 01       	movw	r26, r24
    5528:	5c 96       	adiw	r26, 0x1c	; 28
    552a:	8d 91       	ld	r24, X+
    552c:	9c 91       	ld	r25, X
    552e:	5d 97       	sbiw	r26, 0x1d	; 29
    5530:	00 97       	sbiw	r24, 0x00	; 0
    5532:	39 f4       	brne	.+14     	; 0x5542 <_ZN14SoftwareSerial5writeEh+0x22>
    5534:	21 e0       	ldi	r18, 0x01	; 1
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	13 96       	adiw	r26, 0x03	; 3
    553a:	3c 93       	st	X, r19
    553c:	2e 93       	st	-X, r18
    553e:	12 97       	sbiw	r26, 0x02	; 2
    5540:	3b c0       	rjmp	.+118    	; 0x55b8 <_ZN14SoftwareSerial5writeEh+0x98>
    5542:	51 96       	adiw	r26, 0x11	; 17
    5544:	ed 91       	ld	r30, X+
    5546:	fc 91       	ld	r31, X
    5548:	52 97       	sbiw	r26, 0x12	; 18
    554a:	50 96       	adiw	r26, 0x10	; 16
    554c:	2c 91       	ld	r18, X
    554e:	50 97       	sbiw	r26, 0x10	; 16
    5550:	32 2f       	mov	r19, r18
    5552:	30 95       	com	r19
    5554:	1f b7       	in	r17, 0x3f	; 63
    5556:	5e 96       	adiw	r26, 0x1e	; 30
    5558:	4c 91       	ld	r20, X
    555a:	5e 97       	sbiw	r26, 0x1e	; 30
    555c:	74 2f       	mov	r23, r20
    555e:	72 70       	andi	r23, 0x02	; 2
    5560:	41 fd       	sbrc	r20, 1
    5562:	60 95       	com	r22
    5564:	f8 94       	cli
    5566:	40 81       	ld	r20, Z
    5568:	77 23       	and	r23, r23
    556a:	11 f0       	breq	.+4      	; 0x5570 <_ZN14SoftwareSerial5writeEh+0x50>
    556c:	42 2b       	or	r20, r18
    556e:	01 c0       	rjmp	.+2      	; 0x5572 <_ZN14SoftwareSerial5writeEh+0x52>
    5570:	43 23       	and	r20, r19
    5572:	40 83       	st	Z, r20
    5574:	ec 01       	movw	r28, r24
    5576:	21 97       	sbiw	r28, 0x01	; 1
    5578:	f1 f7       	brne	.-4      	; 0x5576 <_ZN14SoftwareSerial5writeEh+0x56>
    557a:	48 e0       	ldi	r20, 0x08	; 8
    557c:	50 81       	ld	r21, Z
    557e:	60 ff       	sbrs	r22, 0
    5580:	02 c0       	rjmp	.+4      	; 0x5586 <_ZN14SoftwareSerial5writeEh+0x66>
    5582:	52 2b       	or	r21, r18
    5584:	01 c0       	rjmp	.+2      	; 0x5588 <_ZN14SoftwareSerial5writeEh+0x68>
    5586:	53 23       	and	r21, r19
    5588:	50 83       	st	Z, r21
    558a:	ec 01       	movw	r28, r24
    558c:	21 97       	sbiw	r28, 0x01	; 1
    558e:	f1 f7       	brne	.-4      	; 0x558c <_ZN14SoftwareSerial5writeEh+0x6c>
    5590:	66 95       	lsr	r22
    5592:	41 50       	subi	r20, 0x01	; 1
    5594:	99 f7       	brne	.-26     	; 0x557c <_ZN14SoftwareSerial5writeEh+0x5c>
    5596:	80 81       	ld	r24, Z
    5598:	77 23       	and	r23, r23
    559a:	19 f0       	breq	.+6      	; 0x55a2 <_ZN14SoftwareSerial5writeEh+0x82>
    559c:	83 23       	and	r24, r19
    559e:	80 83       	st	Z, r24
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <_ZN14SoftwareSerial5writeEh+0x86>
    55a2:	28 2b       	or	r18, r24
    55a4:	20 83       	st	Z, r18
    55a6:	1f bf       	out	0x3f, r17	; 63
    55a8:	5c 96       	adiw	r26, 0x1c	; 28
    55aa:	8d 91       	ld	r24, X+
    55ac:	9c 91       	ld	r25, X
    55ae:	5d 97       	sbiw	r26, 0x1d	; 29
    55b0:	01 97       	sbiw	r24, 0x01	; 1
    55b2:	f1 f7       	brne	.-4      	; 0x55b0 <_ZN14SoftwareSerial5writeEh+0x90>
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	1f 91       	pop	r17
    55be:	08 95       	ret

000055c0 <_ZN14SoftwareSerial5flushEv>:
    55c0:	08 95       	ret

000055c2 <_ZN14SoftwareSerial4peekEv>:
    55c2:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    55c6:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    55ca:	28 17       	cp	r18, r24
    55cc:	39 07       	cpc	r19, r25
    55ce:	71 f4       	brne	.+28     	; 0x55ec <_ZN14SoftwareSerial4peekEv+0x2a>
    55d0:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    55d4:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    55d8:	98 17       	cp	r25, r24
    55da:	41 f0       	breq	.+16     	; 0x55ec <_ZN14SoftwareSerial4peekEv+0x2a>
    55dc:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    55e0:	f0 e0       	ldi	r31, 0x00	; 0
    55e2:	ef 58       	subi	r30, 0x8F	; 143
    55e4:	f8 4f       	sbci	r31, 0xF8	; 248
    55e6:	80 81       	ld	r24, Z
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	08 95       	ret
    55ec:	8f ef       	ldi	r24, 0xFF	; 255
    55ee:	9f ef       	ldi	r25, 0xFF	; 255
    55f0:	08 95       	ret

000055f2 <_ZN14SoftwareSerial9availableEv>:
    55f2:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    55f6:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    55fa:	28 17       	cp	r18, r24
    55fc:	39 07       	cpc	r19, r25
    55fe:	71 f4       	brne	.+28     	; 0x561c <_ZN14SoftwareSerial9availableEv+0x2a>
    5600:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5604:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	80 5c       	subi	r24, 0xC0	; 192
    560c:	9f 4f       	sbci	r25, 0xFF	; 255
    560e:	82 1b       	sub	r24, r18
    5610:	91 09       	sbc	r25, r1
    5612:	60 e4       	ldi	r22, 0x40	; 64
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <__divmodhi4>
    561a:	08 95       	ret
    561c:	80 e0       	ldi	r24, 0x00	; 0
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	08 95       	ret

00005622 <_ZN14SoftwareSerial13stopListeningEv>:
    5622:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    5626:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    562a:	e8 17       	cp	r30, r24
    562c:	f9 07       	cpc	r31, r25
    562e:	69 f4       	brne	.+26     	; 0x564a <_ZN14SoftwareSerial13stopListeningEv+0x28>
    5630:	a3 89       	ldd	r26, Z+19	; 0x13
    5632:	b4 89       	ldd	r27, Z+20	; 0x14
    5634:	9c 91       	ld	r25, X
    5636:	85 89       	ldd	r24, Z+21	; 0x15
    5638:	80 95       	com	r24
    563a:	89 23       	and	r24, r25
    563c:	8c 93       	st	X, r24
    563e:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    5642:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	08 95       	ret
    564a:	80 e0       	ldi	r24, 0x00	; 0
    564c:	08 95       	ret

0000564e <_ZN14SoftwareSerial6listenEv>:
    564e:	cf 93       	push	r28
    5650:	df 93       	push	r29
    5652:	ec 01       	movw	r28, r24
    5654:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5656:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5658:	89 2b       	or	r24, r25
    565a:	f1 f0       	breq	.+60     	; 0x5698 <_ZN14SoftwareSerial6listenEv+0x4a>
    565c:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    5660:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    5664:	c8 17       	cp	r28, r24
    5666:	d9 07       	cpc	r29, r25
    5668:	b9 f0       	breq	.+46     	; 0x5698 <_ZN14SoftwareSerial6listenEv+0x4a>
    566a:	00 97       	sbiw	r24, 0x00	; 0
    566c:	11 f0       	breq	.+4      	; 0x5672 <_ZN14SoftwareSerial6listenEv+0x24>
    566e:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN14SoftwareSerial13stopListeningEv>
    5672:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5674:	8e 7f       	andi	r24, 0xFE	; 254
    5676:	8e 8f       	std	Y+30, r24	; 0x1e
    5678:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    567c:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    5680:	d0 93 b2 07 	sts	0x07B2, r29	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    5684:	c0 93 b1 07 	sts	0x07B1, r28	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    5688:	eb 89       	ldd	r30, Y+19	; 0x13
    568a:	fc 89       	ldd	r31, Y+20	; 0x14
    568c:	90 81       	ld	r25, Z
    568e:	8d 89       	ldd	r24, Y+21	; 0x15
    5690:	89 2b       	or	r24, r25
    5692:	80 83       	st	Z, r24
    5694:	81 e0       	ldi	r24, 0x01	; 1
    5696:	01 c0       	rjmp	.+2      	; 0x569a <_ZN14SoftwareSerial6listenEv+0x4c>
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	df 91       	pop	r29
    569c:	cf 91       	pop	r28
    569e:	08 95       	ret

000056a0 <__vector_3>:
    56a0:	1f 92       	push	r1
    56a2:	0f 92       	push	r0
    56a4:	0f b6       	in	r0, 0x3f	; 63
    56a6:	0f 92       	push	r0
    56a8:	11 24       	eor	r1, r1
    56aa:	2f 93       	push	r18
    56ac:	3f 93       	push	r19
    56ae:	4f 93       	push	r20
    56b0:	5f 93       	push	r21
    56b2:	6f 93       	push	r22
    56b4:	7f 93       	push	r23
    56b6:	8f 93       	push	r24
    56b8:	9f 93       	push	r25
    56ba:	af 93       	push	r26
    56bc:	bf 93       	push	r27
    56be:	ef 93       	push	r30
    56c0:	ff 93       	push	r31
    56c2:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <_ZN14SoftwareSerial13active_objectE>
    56c6:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <_ZN14SoftwareSerial13active_objectE+0x1>
    56ca:	30 97       	sbiw	r30, 0x00	; 0
    56cc:	09 f4       	brne	.+2      	; 0x56d0 <__vector_3+0x30>
    56ce:	51 c0       	rjmp	.+162    	; 0x5772 <__vector_3+0xd2>
    56d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    56d2:	a6 85       	ldd	r26, Z+14	; 0x0e
    56d4:	b7 85       	ldd	r27, Z+15	; 0x0f
    56d6:	85 85       	ldd	r24, Z+13	; 0x0d
    56d8:	91 ff       	sbrs	r25, 1
    56da:	04 c0       	rjmp	.+8      	; 0x56e4 <__vector_3+0x44>
    56dc:	9c 91       	ld	r25, X
    56de:	89 23       	and	r24, r25
    56e0:	29 f4       	brne	.+10     	; 0x56ec <__vector_3+0x4c>
    56e2:	47 c0       	rjmp	.+142    	; 0x5772 <__vector_3+0xd2>
    56e4:	9c 91       	ld	r25, X
    56e6:	89 23       	and	r24, r25
    56e8:	09 f0       	breq	.+2      	; 0x56ec <__vector_3+0x4c>
    56ea:	43 c0       	rjmp	.+134    	; 0x5772 <__vector_3+0xd2>
    56ec:	a3 89       	ldd	r26, Z+19	; 0x13
    56ee:	b4 89       	ldd	r27, Z+20	; 0x14
    56f0:	9c 91       	ld	r25, X
    56f2:	85 89       	ldd	r24, Z+21	; 0x15
    56f4:	80 95       	com	r24
    56f6:	89 23       	and	r24, r25
    56f8:	8c 93       	st	X, r24
    56fa:	86 89       	ldd	r24, Z+22	; 0x16
    56fc:	97 89       	ldd	r25, Z+23	; 0x17
    56fe:	01 97       	sbiw	r24, 0x01	; 1
    5700:	f1 f7       	brne	.-4      	; 0x56fe <__vector_3+0x5e>
    5702:	60 8d       	ldd	r22, Z+24	; 0x18
    5704:	71 8d       	ldd	r23, Z+25	; 0x19
    5706:	a6 85       	ldd	r26, Z+14	; 0x0e
    5708:	b7 85       	ldd	r27, Z+15	; 0x0f
    570a:	55 85       	ldd	r21, Z+13	; 0x0d
    570c:	38 e0       	ldi	r19, 0x08	; 8
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	cb 01       	movw	r24, r22
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	f1 f7       	brne	.-4      	; 0x5712 <__vector_3+0x72>
    5716:	82 2f       	mov	r24, r18
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	95 95       	asr	r25
    571c:	87 95       	ror	r24
    571e:	28 2f       	mov	r18, r24
    5720:	4c 91       	ld	r20, X
    5722:	45 23       	and	r20, r21
    5724:	09 f0       	breq	.+2      	; 0x5728 <__vector_3+0x88>
    5726:	20 68       	ori	r18, 0x80	; 128
    5728:	31 50       	subi	r19, 0x01	; 1
    572a:	91 f7       	brne	.-28     	; 0x5710 <__vector_3+0x70>
    572c:	86 8d       	ldd	r24, Z+30	; 0x1e
    572e:	81 fd       	sbrc	r24, 1
    5730:	20 95       	com	r18
    5732:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	01 96       	adiw	r24, 0x01	; 1
    573a:	8f 73       	andi	r24, 0x3F	; 63
    573c:	99 27       	eor	r25, r25
    573e:	30 91 6f 07 	lds	r19, 0x076F	; 0x80076f <_ZN14SoftwareSerial20_receive_buffer_headE>
    5742:	38 17       	cp	r19, r24
    5744:	49 f0       	breq	.+18     	; 0x5758 <__vector_3+0xb8>
    5746:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    574a:	b0 e0       	ldi	r27, 0x00	; 0
    574c:	af 58       	subi	r26, 0x8F	; 143
    574e:	b8 4f       	sbci	r27, 0xF8	; 248
    5750:	2c 93       	st	X, r18
    5752:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5756:	03 c0       	rjmp	.+6      	; 0x575e <__vector_3+0xbe>
    5758:	86 8d       	ldd	r24, Z+30	; 0x1e
    575a:	81 60       	ori	r24, 0x01	; 1
    575c:	86 8f       	std	Z+30, r24	; 0x1e
    575e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5760:	93 8d       	ldd	r25, Z+27	; 0x1b
    5762:	01 97       	sbiw	r24, 0x01	; 1
    5764:	f1 f7       	brne	.-4      	; 0x5762 <__vector_3+0xc2>
    5766:	a3 89       	ldd	r26, Z+19	; 0x13
    5768:	b4 89       	ldd	r27, Z+20	; 0x14
    576a:	9c 91       	ld	r25, X
    576c:	85 89       	ldd	r24, Z+21	; 0x15
    576e:	89 2b       	or	r24, r25
    5770:	8c 93       	st	X, r24
    5772:	ff 91       	pop	r31
    5774:	ef 91       	pop	r30
    5776:	bf 91       	pop	r27
    5778:	af 91       	pop	r26
    577a:	9f 91       	pop	r25
    577c:	8f 91       	pop	r24
    577e:	7f 91       	pop	r23
    5780:	6f 91       	pop	r22
    5782:	5f 91       	pop	r21
    5784:	4f 91       	pop	r20
    5786:	3f 91       	pop	r19
    5788:	2f 91       	pop	r18
    578a:	0f 90       	pop	r0
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	0f 90       	pop	r0
    5790:	1f 90       	pop	r1
    5792:	18 95       	reti

00005794 <_ZN14SoftwareSerial5setTXEh>:
    5794:	1f 93       	push	r17
    5796:	cf 93       	push	r28
    5798:	df 93       	push	r29
    579a:	ec 01       	movw	r28, r24
    579c:	16 2f       	mov	r17, r22
    579e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    57a0:	66 95       	lsr	r22
    57a2:	61 70       	andi	r22, 0x01	; 1
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	68 27       	eor	r22, r24
    57a8:	81 2f       	mov	r24, r17
    57aa:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
    57ae:	61 e0       	ldi	r22, 0x01	; 1
    57b0:	81 2f       	mov	r24, r17
    57b2:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <pinMode>
    57b6:	81 2f       	mov	r24, r17
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	fc 01       	movw	r30, r24
    57bc:	e8 5c       	subi	r30, 0xC8	; 200
    57be:	fb 4f       	sbci	r31, 0xFB	; 251
    57c0:	e4 91       	lpm	r30, Z
    57c2:	e8 8b       	std	Y+16, r30	; 0x10
    57c4:	fc 01       	movw	r30, r24
    57c6:	e4 5b       	subi	r30, 0xB4	; 180
    57c8:	fb 4f       	sbci	r31, 0xFB	; 251
    57ca:	e4 91       	lpm	r30, Z
    57cc:	f0 e0       	ldi	r31, 0x00	; 0
    57ce:	ee 0f       	add	r30, r30
    57d0:	ff 1f       	adc	r31, r31
    57d2:	e6 59       	subi	r30, 0x96	; 150
    57d4:	fb 4f       	sbci	r31, 0xFB	; 251
    57d6:	85 91       	lpm	r24, Z+
    57d8:	94 91       	lpm	r25, Z
    57da:	9a 8b       	std	Y+18, r25	; 0x12
    57dc:	89 8b       	std	Y+17, r24	; 0x11
    57de:	df 91       	pop	r29
    57e0:	cf 91       	pop	r28
    57e2:	1f 91       	pop	r17
    57e4:	08 95       	ret

000057e6 <_ZN14SoftwareSerial5setRXEh>:
    57e6:	1f 93       	push	r17
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	ec 01       	movw	r28, r24
    57ee:	16 2f       	mov	r17, r22
    57f0:	60 e0       	ldi	r22, 0x00	; 0
    57f2:	81 2f       	mov	r24, r17
    57f4:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <pinMode>
    57f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    57fa:	81 fd       	sbrc	r24, 1
    57fc:	04 c0       	rjmp	.+8      	; 0x5806 <_ZN14SoftwareSerial5setRXEh+0x20>
    57fe:	61 e0       	ldi	r22, 0x01	; 1
    5800:	81 2f       	mov	r24, r17
    5802:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <digitalWrite>
    5806:	1c 87       	std	Y+12, r17	; 0x0c
    5808:	81 2f       	mov	r24, r17
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	fc 01       	movw	r30, r24
    580e:	e8 5c       	subi	r30, 0xC8	; 200
    5810:	fb 4f       	sbci	r31, 0xFB	; 251
    5812:	e4 91       	lpm	r30, Z
    5814:	ed 87       	std	Y+13, r30	; 0x0d
    5816:	fc 01       	movw	r30, r24
    5818:	e4 5b       	subi	r30, 0xB4	; 180
    581a:	fb 4f       	sbci	r31, 0xFB	; 251
    581c:	e4 91       	lpm	r30, Z
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	ee 0f       	add	r30, r30
    5822:	ff 1f       	adc	r31, r31
    5824:	e0 5a       	subi	r30, 0xA0	; 160
    5826:	fb 4f       	sbci	r31, 0xFB	; 251
    5828:	85 91       	lpm	r24, Z+
    582a:	94 91       	lpm	r25, Z
    582c:	9f 87       	std	Y+15, r25	; 0x0f
    582e:	8e 87       	std	Y+14, r24	; 0x0e
    5830:	df 91       	pop	r29
    5832:	cf 91       	pop	r28
    5834:	1f 91       	pop	r17
    5836:	08 95       	ret

00005838 <_ZN14SoftwareSerialC1Ehhb>:
    5838:	1f 93       	push	r17
    583a:	cf 93       	push	r28
    583c:	df 93       	push	r29
    583e:	ec 01       	movw	r28, r24
    5840:	16 2f       	mov	r17, r22
    5842:	1b 82       	std	Y+3, r1	; 0x03
    5844:	1a 82       	std	Y+2, r1	; 0x02
    5846:	88 ee       	ldi	r24, 0xE8	; 232
    5848:	93 e0       	ldi	r25, 0x03	; 3
    584a:	a0 e0       	ldi	r26, 0x00	; 0
    584c:	b0 e0       	ldi	r27, 0x00	; 0
    584e:	8c 83       	std	Y+4, r24	; 0x04
    5850:	9d 83       	std	Y+5, r25	; 0x05
    5852:	ae 83       	std	Y+6, r26	; 0x06
    5854:	bf 83       	std	Y+7, r27	; 0x07
    5856:	85 e9       	ldi	r24, 0x95	; 149
    5858:	92 e0       	ldi	r25, 0x02	; 2
    585a:	99 83       	std	Y+1, r25	; 0x01
    585c:	88 83       	st	Y, r24
    585e:	1f 8a       	std	Y+23, r1	; 0x17
    5860:	1e 8a       	std	Y+22, r1	; 0x16
    5862:	19 8e       	std	Y+25, r1	; 0x19
    5864:	18 8e       	std	Y+24, r1	; 0x18
    5866:	1b 8e       	std	Y+27, r1	; 0x1b
    5868:	1a 8e       	std	Y+26, r1	; 0x1a
    586a:	1d 8e       	std	Y+29, r1	; 0x1d
    586c:	1c 8e       	std	Y+28, r1	; 0x1c
    586e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5870:	8e 7f       	andi	r24, 0xFE	; 254
    5872:	20 fb       	bst	r18, 0
    5874:	81 f9       	bld	r24, 1
    5876:	8e 8f       	std	Y+30, r24	; 0x1e
    5878:	64 2f       	mov	r22, r20
    587a:	ce 01       	movw	r24, r28
    587c:	0e 94 ca 2b 	call	0x5794	; 0x5794 <_ZN14SoftwareSerial5setTXEh>
    5880:	61 2f       	mov	r22, r17
    5882:	ce 01       	movw	r24, r28
    5884:	df 91       	pop	r29
    5886:	cf 91       	pop	r28
    5888:	1f 91       	pop	r17
    588a:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <_ZN14SoftwareSerial5setRXEh>

0000588e <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    588e:	cf 93       	push	r28
    5890:	df 93       	push	r29
    5892:	ec 01       	movw	r28, r24
    5894:	9a 01       	movw	r18, r20
    5896:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    5898:	1b 8e       	std	Y+27, r1	; 0x1b
    589a:	1a 8e       	std	Y+26, r1	; 0x1a
    589c:	19 8e       	std	Y+25, r1	; 0x19
    589e:	18 8e       	std	Y+24, r1	; 0x18
    58a0:	1f 8a       	std	Y+23, r1	; 0x17
    58a2:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    58a4:	60 e0       	ldi	r22, 0x00	; 0
    58a6:	79 e0       	ldi	r23, 0x09	; 9
    58a8:	8d e3       	ldi	r24, 0x3D	; 61
    58aa:	90 e0       	ldi	r25, 0x00	; 0
    58ac:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <__divmodsi4>
    58b0:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    58b2:	24 30       	cpi	r18, 0x04	; 4
    58b4:	31 05       	cpc	r19, r1
    58b6:	18 f0       	brcs	.+6      	; 0x58be <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    58b8:	c9 01       	movw	r24, r18
    58ba:	03 97       	sbiw	r24, 0x03	; 3
    58bc:	02 c0       	rjmp	.+4      	; 0x58c2 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    58be:	81 e0       	ldi	r24, 0x01	; 1
    58c0:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    58c2:	9d 8f       	std	Y+29, r25	; 0x1d
    58c4:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    58c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    58c8:	66 31       	cpi	r22, 0x16	; 22
    58ca:	08 f0       	brcs	.+2      	; 0x58ce <_ZN14SoftwareSerial5beginEl+0x40>
    58cc:	69 c0       	rjmp	.+210    	; 0x59a0 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    58ce:	c9 01       	movw	r24, r18
    58d0:	96 95       	lsr	r25
    58d2:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    58d4:	84 31       	cpi	r24, 0x14	; 20
    58d6:	91 05       	cpc	r25, r1
    58d8:	10 f0       	brcs	.+4      	; 0x58de <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    58da:	43 97       	sbiw	r24, 0x13	; 19
    58dc:	02 c0       	rjmp	.+4      	; 0x58e2 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    58e2:	9f 8b       	std	Y+23, r25	; 0x17
    58e4:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    58e6:	36 97       	sbiw	r30, 0x06	; 6
    58e8:	18 f0       	brcs	.+6      	; 0x58f0 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    58ea:	c9 01       	movw	r24, r18
    58ec:	05 97       	sbiw	r24, 0x05	; 5
    58ee:	02 c0       	rjmp	.+4      	; 0x58f4 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    58f0:	81 e0       	ldi	r24, 0x01	; 1
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    58f4:	99 8f       	std	Y+25, r25	; 0x19
    58f6:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    58f8:	c9 01       	movw	r24, r18
    58fa:	88 0f       	add	r24, r24
    58fc:	99 1f       	adc	r25, r25
    58fe:	28 0f       	add	r18, r24
    5900:	39 1f       	adc	r19, r25
    5902:	36 95       	lsr	r19
    5904:	27 95       	ror	r18
    5906:	36 95       	lsr	r19
    5908:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    590a:	2d 30       	cpi	r18, 0x0D	; 13
    590c:	31 05       	cpc	r19, r1
    590e:	18 f0       	brcs	.+6      	; 0x5916 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    5910:	2c 50       	subi	r18, 0x0C	; 12
    5912:	31 09       	sbc	r19, r1
    5914:	02 c0       	rjmp	.+4      	; 0x591a <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    5916:	21 e0       	ldi	r18, 0x01	; 1
    5918:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    591a:	3b 8f       	std	Y+27, r19	; 0x1b
    591c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    591e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    5922:	68 30       	cpi	r22, 0x08	; 8
    5924:	50 f0       	brcs	.+20     	; 0x593a <_ZN14SoftwareSerial5beginEl+0xac>
    5926:	21 e0       	ldi	r18, 0x01	; 1
    5928:	6e 30       	cpi	r22, 0x0E	; 14
    592a:	08 f4       	brcc	.+2      	; 0x592e <_ZN14SoftwareSerial5beginEl+0xa0>
    592c:	20 e0       	ldi	r18, 0x00	; 0
    592e:	81 e0       	ldi	r24, 0x01	; 1
    5930:	01 c0       	rjmp	.+2      	; 0x5934 <_ZN14SoftwareSerial5beginEl+0xa6>
    5932:	88 0f       	add	r24, r24
    5934:	2a 95       	dec	r18
    5936:	ea f7       	brpl	.-6      	; 0x5932 <_ZN14SoftwareSerial5beginEl+0xa4>
    5938:	01 c0       	rjmp	.+2      	; 0x593c <_ZN14SoftwareSerial5beginEl+0xae>
    593a:	84 e0       	ldi	r24, 0x04	; 4
    593c:	89 2b       	or	r24, r25
    593e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    5942:	9c 85       	ldd	r25, Y+12	; 0x0c
    5944:	98 30       	cpi	r25, 0x08	; 8
    5946:	38 f0       	brcs	.+14     	; 0x5956 <_ZN14SoftwareSerial5beginEl+0xc8>
    5948:	9e 30       	cpi	r25, 0x0E	; 14
    594a:	40 f0       	brcs	.+16     	; 0x595c <_ZN14SoftwareSerial5beginEl+0xce>
    594c:	96 31       	cpi	r25, 0x16	; 22
    594e:	48 f0       	brcs	.+18     	; 0x5962 <_ZN14SoftwareSerial5beginEl+0xd4>
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	08 c0       	rjmp	.+16     	; 0x5966 <_ZN14SoftwareSerial5beginEl+0xd8>
    5956:	2d e6       	ldi	r18, 0x6D	; 109
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	05 c0       	rjmp	.+10     	; 0x5966 <_ZN14SoftwareSerial5beginEl+0xd8>
    595c:	2b e6       	ldi	r18, 0x6B	; 107
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	02 c0       	rjmp	.+4      	; 0x5966 <_ZN14SoftwareSerial5beginEl+0xd8>
    5962:	2c e6       	ldi	r18, 0x6C	; 108
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	3c 8b       	std	Y+20, r19	; 0x14
    5968:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    596a:	98 30       	cpi	r25, 0x08	; 8
    596c:	30 f4       	brcc	.+12     	; 0x597a <_ZN14SoftwareSerial5beginEl+0xec>
    596e:	81 e0       	ldi	r24, 0x01	; 1
    5970:	01 c0       	rjmp	.+2      	; 0x5974 <_ZN14SoftwareSerial5beginEl+0xe6>
    5972:	88 0f       	add	r24, r24
    5974:	9a 95       	dec	r25
    5976:	ea f7       	brpl	.-6      	; 0x5972 <_ZN14SoftwareSerial5beginEl+0xe4>
    5978:	0e c0       	rjmp	.+28     	; 0x5996 <_ZN14SoftwareSerial5beginEl+0x108>
    597a:	29 2f       	mov	r18, r25
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	9e 30       	cpi	r25, 0x0E	; 14
    5980:	18 f4       	brcc	.+6      	; 0x5988 <_ZN14SoftwareSerial5beginEl+0xfa>
    5982:	28 50       	subi	r18, 0x08	; 8
    5984:	31 09       	sbc	r19, r1
    5986:	02 c0       	rjmp	.+4      	; 0x598c <_ZN14SoftwareSerial5beginEl+0xfe>
    5988:	2e 50       	subi	r18, 0x0E	; 14
    598a:	31 09       	sbc	r19, r1
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	01 c0       	rjmp	.+2      	; 0x5992 <_ZN14SoftwareSerial5beginEl+0x104>
    5990:	88 0f       	add	r24, r24
    5992:	2a 95       	dec	r18
    5994:	ea f7       	brpl	.-6      	; 0x5990 <_ZN14SoftwareSerial5beginEl+0x102>
    5996:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    5998:	8c 8d       	ldd	r24, Y+28	; 0x1c
    599a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    599c:	01 97       	sbiw	r24, 0x01	; 1
    599e:	f1 f7       	brne	.-4      	; 0x599c <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    59a0:	ce 01       	movw	r24, r28
}
    59a2:	df 91       	pop	r29
    59a4:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    59a6:	0c 94 27 2b 	jmp	0x564e	; 0x564e <_ZN14SoftwareSerial6listenEv>

000059aa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    59aa:	08 95       	ret

000059ac <__cmpsf2>:
    59ac:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__fp_cmp>
    59b0:	08 f4       	brcc	.+2      	; 0x59b4 <__cmpsf2+0x8>
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	08 95       	ret

000059b6 <__fp_cmp>:
    59b6:	99 0f       	add	r25, r25
    59b8:	00 08       	sbc	r0, r0
    59ba:	55 0f       	add	r21, r21
    59bc:	aa 0b       	sbc	r26, r26
    59be:	e0 e8       	ldi	r30, 0x80	; 128
    59c0:	fe ef       	ldi	r31, 0xFE	; 254
    59c2:	16 16       	cp	r1, r22
    59c4:	17 06       	cpc	r1, r23
    59c6:	e8 07       	cpc	r30, r24
    59c8:	f9 07       	cpc	r31, r25
    59ca:	c0 f0       	brcs	.+48     	; 0x59fc <__fp_cmp+0x46>
    59cc:	12 16       	cp	r1, r18
    59ce:	13 06       	cpc	r1, r19
    59d0:	e4 07       	cpc	r30, r20
    59d2:	f5 07       	cpc	r31, r21
    59d4:	98 f0       	brcs	.+38     	; 0x59fc <__fp_cmp+0x46>
    59d6:	62 1b       	sub	r22, r18
    59d8:	73 0b       	sbc	r23, r19
    59da:	84 0b       	sbc	r24, r20
    59dc:	95 0b       	sbc	r25, r21
    59de:	39 f4       	brne	.+14     	; 0x59ee <__fp_cmp+0x38>
    59e0:	0a 26       	eor	r0, r26
    59e2:	61 f0       	breq	.+24     	; 0x59fc <__fp_cmp+0x46>
    59e4:	23 2b       	or	r18, r19
    59e6:	24 2b       	or	r18, r20
    59e8:	25 2b       	or	r18, r21
    59ea:	21 f4       	brne	.+8      	; 0x59f4 <__fp_cmp+0x3e>
    59ec:	08 95       	ret
    59ee:	0a 26       	eor	r0, r26
    59f0:	09 f4       	brne	.+2      	; 0x59f4 <__fp_cmp+0x3e>
    59f2:	a1 40       	sbci	r26, 0x01	; 1
    59f4:	a6 95       	lsr	r26
    59f6:	8f ef       	ldi	r24, 0xFF	; 255
    59f8:	81 1d       	adc	r24, r1
    59fa:	81 1d       	adc	r24, r1
    59fc:	08 95       	ret

000059fe <__fp_inf>:
    59fe:	97 f9       	bld	r25, 7
    5a00:	9f 67       	ori	r25, 0x7F	; 127
    5a02:	80 e8       	ldi	r24, 0x80	; 128
    5a04:	70 e0       	ldi	r23, 0x00	; 0
    5a06:	60 e0       	ldi	r22, 0x00	; 0
    5a08:	08 95       	ret

00005a0a <__fp_nan>:
    5a0a:	9f ef       	ldi	r25, 0xFF	; 255
    5a0c:	80 ec       	ldi	r24, 0xC0	; 192
    5a0e:	08 95       	ret

00005a10 <__fp_pscA>:
    5a10:	00 24       	eor	r0, r0
    5a12:	0a 94       	dec	r0
    5a14:	16 16       	cp	r1, r22
    5a16:	17 06       	cpc	r1, r23
    5a18:	18 06       	cpc	r1, r24
    5a1a:	09 06       	cpc	r0, r25
    5a1c:	08 95       	ret

00005a1e <__fp_pscB>:
    5a1e:	00 24       	eor	r0, r0
    5a20:	0a 94       	dec	r0
    5a22:	12 16       	cp	r1, r18
    5a24:	13 06       	cpc	r1, r19
    5a26:	14 06       	cpc	r1, r20
    5a28:	05 06       	cpc	r0, r21
    5a2a:	08 95       	ret

00005a2c <__fp_round>:
    5a2c:	09 2e       	mov	r0, r25
    5a2e:	03 94       	inc	r0
    5a30:	00 0c       	add	r0, r0
    5a32:	11 f4       	brne	.+4      	; 0x5a38 <__fp_round+0xc>
    5a34:	88 23       	and	r24, r24
    5a36:	52 f0       	brmi	.+20     	; 0x5a4c <__fp_round+0x20>
    5a38:	bb 0f       	add	r27, r27
    5a3a:	40 f4       	brcc	.+16     	; 0x5a4c <__fp_round+0x20>
    5a3c:	bf 2b       	or	r27, r31
    5a3e:	11 f4       	brne	.+4      	; 0x5a44 <__fp_round+0x18>
    5a40:	60 ff       	sbrs	r22, 0
    5a42:	04 c0       	rjmp	.+8      	; 0x5a4c <__fp_round+0x20>
    5a44:	6f 5f       	subi	r22, 0xFF	; 255
    5a46:	7f 4f       	sbci	r23, 0xFF	; 255
    5a48:	8f 4f       	sbci	r24, 0xFF	; 255
    5a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4c:	08 95       	ret

00005a4e <__fp_split3>:
    5a4e:	57 fd       	sbrc	r21, 7
    5a50:	90 58       	subi	r25, 0x80	; 128
    5a52:	44 0f       	add	r20, r20
    5a54:	55 1f       	adc	r21, r21
    5a56:	59 f0       	breq	.+22     	; 0x5a6e <__fp_splitA+0x10>
    5a58:	5f 3f       	cpi	r21, 0xFF	; 255
    5a5a:	71 f0       	breq	.+28     	; 0x5a78 <__fp_splitA+0x1a>
    5a5c:	47 95       	ror	r20

00005a5e <__fp_splitA>:
    5a5e:	88 0f       	add	r24, r24
    5a60:	97 fb       	bst	r25, 7
    5a62:	99 1f       	adc	r25, r25
    5a64:	61 f0       	breq	.+24     	; 0x5a7e <__fp_splitA+0x20>
    5a66:	9f 3f       	cpi	r25, 0xFF	; 255
    5a68:	79 f0       	breq	.+30     	; 0x5a88 <__fp_splitA+0x2a>
    5a6a:	87 95       	ror	r24
    5a6c:	08 95       	ret
    5a6e:	12 16       	cp	r1, r18
    5a70:	13 06       	cpc	r1, r19
    5a72:	14 06       	cpc	r1, r20
    5a74:	55 1f       	adc	r21, r21
    5a76:	f2 cf       	rjmp	.-28     	; 0x5a5c <__fp_split3+0xe>
    5a78:	46 95       	lsr	r20
    5a7a:	f1 df       	rcall	.-30     	; 0x5a5e <__fp_splitA>
    5a7c:	08 c0       	rjmp	.+16     	; 0x5a8e <__fp_splitA+0x30>
    5a7e:	16 16       	cp	r1, r22
    5a80:	17 06       	cpc	r1, r23
    5a82:	18 06       	cpc	r1, r24
    5a84:	99 1f       	adc	r25, r25
    5a86:	f1 cf       	rjmp	.-30     	; 0x5a6a <__fp_splitA+0xc>
    5a88:	86 95       	lsr	r24
    5a8a:	71 05       	cpc	r23, r1
    5a8c:	61 05       	cpc	r22, r1
    5a8e:	08 94       	sec
    5a90:	08 95       	ret

00005a92 <__fp_zero>:
    5a92:	e8 94       	clt

00005a94 <__fp_szero>:
    5a94:	bb 27       	eor	r27, r27
    5a96:	66 27       	eor	r22, r22
    5a98:	77 27       	eor	r23, r23
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	97 f9       	bld	r25, 7
    5a9e:	08 95       	ret

00005aa0 <__mulsf3>:
    5aa0:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__mulsf3x>
    5aa4:	0c 94 16 2d 	jmp	0x5a2c	; 0x5a2c <__fp_round>
    5aa8:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <__fp_pscA>
    5aac:	38 f0       	brcs	.+14     	; 0x5abc <__mulsf3+0x1c>
    5aae:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__fp_pscB>
    5ab2:	20 f0       	brcs	.+8      	; 0x5abc <__mulsf3+0x1c>
    5ab4:	95 23       	and	r25, r21
    5ab6:	11 f0       	breq	.+4      	; 0x5abc <__mulsf3+0x1c>
    5ab8:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__fp_inf>
    5abc:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_nan>
    5ac0:	11 24       	eor	r1, r1
    5ac2:	0c 94 4a 2d 	jmp	0x5a94	; 0x5a94 <__fp_szero>

00005ac6 <__mulsf3x>:
    5ac6:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__fp_split3>
    5aca:	70 f3       	brcs	.-36     	; 0x5aa8 <__mulsf3+0x8>

00005acc <__mulsf3_pse>:
    5acc:	95 9f       	mul	r25, r21
    5ace:	c1 f3       	breq	.-16     	; 0x5ac0 <__mulsf3+0x20>
    5ad0:	95 0f       	add	r25, r21
    5ad2:	50 e0       	ldi	r21, 0x00	; 0
    5ad4:	55 1f       	adc	r21, r21
    5ad6:	62 9f       	mul	r22, r18
    5ad8:	f0 01       	movw	r30, r0
    5ada:	72 9f       	mul	r23, r18
    5adc:	bb 27       	eor	r27, r27
    5ade:	f0 0d       	add	r31, r0
    5ae0:	b1 1d       	adc	r27, r1
    5ae2:	63 9f       	mul	r22, r19
    5ae4:	aa 27       	eor	r26, r26
    5ae6:	f0 0d       	add	r31, r0
    5ae8:	b1 1d       	adc	r27, r1
    5aea:	aa 1f       	adc	r26, r26
    5aec:	64 9f       	mul	r22, r20
    5aee:	66 27       	eor	r22, r22
    5af0:	b0 0d       	add	r27, r0
    5af2:	a1 1d       	adc	r26, r1
    5af4:	66 1f       	adc	r22, r22
    5af6:	82 9f       	mul	r24, r18
    5af8:	22 27       	eor	r18, r18
    5afa:	b0 0d       	add	r27, r0
    5afc:	a1 1d       	adc	r26, r1
    5afe:	62 1f       	adc	r22, r18
    5b00:	73 9f       	mul	r23, r19
    5b02:	b0 0d       	add	r27, r0
    5b04:	a1 1d       	adc	r26, r1
    5b06:	62 1f       	adc	r22, r18
    5b08:	83 9f       	mul	r24, r19
    5b0a:	a0 0d       	add	r26, r0
    5b0c:	61 1d       	adc	r22, r1
    5b0e:	22 1f       	adc	r18, r18
    5b10:	74 9f       	mul	r23, r20
    5b12:	33 27       	eor	r19, r19
    5b14:	a0 0d       	add	r26, r0
    5b16:	61 1d       	adc	r22, r1
    5b18:	23 1f       	adc	r18, r19
    5b1a:	84 9f       	mul	r24, r20
    5b1c:	60 0d       	add	r22, r0
    5b1e:	21 1d       	adc	r18, r1
    5b20:	82 2f       	mov	r24, r18
    5b22:	76 2f       	mov	r23, r22
    5b24:	6a 2f       	mov	r22, r26
    5b26:	11 24       	eor	r1, r1
    5b28:	9f 57       	subi	r25, 0x7F	; 127
    5b2a:	50 40       	sbci	r21, 0x00	; 0
    5b2c:	9a f0       	brmi	.+38     	; 0x5b54 <__mulsf3_pse+0x88>
    5b2e:	f1 f0       	breq	.+60     	; 0x5b6c <__mulsf3_pse+0xa0>
    5b30:	88 23       	and	r24, r24
    5b32:	4a f0       	brmi	.+18     	; 0x5b46 <__mulsf3_pse+0x7a>
    5b34:	ee 0f       	add	r30, r30
    5b36:	ff 1f       	adc	r31, r31
    5b38:	bb 1f       	adc	r27, r27
    5b3a:	66 1f       	adc	r22, r22
    5b3c:	77 1f       	adc	r23, r23
    5b3e:	88 1f       	adc	r24, r24
    5b40:	91 50       	subi	r25, 0x01	; 1
    5b42:	50 40       	sbci	r21, 0x00	; 0
    5b44:	a9 f7       	brne	.-22     	; 0x5b30 <__mulsf3_pse+0x64>
    5b46:	9e 3f       	cpi	r25, 0xFE	; 254
    5b48:	51 05       	cpc	r21, r1
    5b4a:	80 f0       	brcs	.+32     	; 0x5b6c <__mulsf3_pse+0xa0>
    5b4c:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__fp_inf>
    5b50:	0c 94 4a 2d 	jmp	0x5a94	; 0x5a94 <__fp_szero>
    5b54:	5f 3f       	cpi	r21, 0xFF	; 255
    5b56:	e4 f3       	brlt	.-8      	; 0x5b50 <__mulsf3_pse+0x84>
    5b58:	98 3e       	cpi	r25, 0xE8	; 232
    5b5a:	d4 f3       	brlt	.-12     	; 0x5b50 <__mulsf3_pse+0x84>
    5b5c:	86 95       	lsr	r24
    5b5e:	77 95       	ror	r23
    5b60:	67 95       	ror	r22
    5b62:	b7 95       	ror	r27
    5b64:	f7 95       	ror	r31
    5b66:	e7 95       	ror	r30
    5b68:	9f 5f       	subi	r25, 0xFF	; 255
    5b6a:	c1 f7       	brne	.-16     	; 0x5b5c <__mulsf3_pse+0x90>
    5b6c:	fe 2b       	or	r31, r30
    5b6e:	88 0f       	add	r24, r24
    5b70:	91 1d       	adc	r25, r1
    5b72:	96 95       	lsr	r25
    5b74:	87 95       	ror	r24
    5b76:	97 f9       	bld	r25, 7
    5b78:	08 95       	ret

00005b7a <__divmodhi4>:
    5b7a:	97 fb       	bst	r25, 7
    5b7c:	07 2e       	mov	r0, r23
    5b7e:	16 f4       	brtc	.+4      	; 0x5b84 <__divmodhi4+0xa>
    5b80:	00 94       	com	r0
    5b82:	07 d0       	rcall	.+14     	; 0x5b92 <__divmodhi4_neg1>
    5b84:	77 fd       	sbrc	r23, 7
    5b86:	09 d0       	rcall	.+18     	; 0x5b9a <__divmodhi4_neg2>
    5b88:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <__udivmodhi4>
    5b8c:	07 fc       	sbrc	r0, 7
    5b8e:	05 d0       	rcall	.+10     	; 0x5b9a <__divmodhi4_neg2>
    5b90:	3e f4       	brtc	.+14     	; 0x5ba0 <__divmodhi4_exit>

00005b92 <__divmodhi4_neg1>:
    5b92:	90 95       	com	r25
    5b94:	81 95       	neg	r24
    5b96:	9f 4f       	sbci	r25, 0xFF	; 255
    5b98:	08 95       	ret

00005b9a <__divmodhi4_neg2>:
    5b9a:	70 95       	com	r23
    5b9c:	61 95       	neg	r22
    5b9e:	7f 4f       	sbci	r23, 0xFF	; 255

00005ba0 <__divmodhi4_exit>:
    5ba0:	08 95       	ret

00005ba2 <__udivmodsi4>:
    5ba2:	a1 e2       	ldi	r26, 0x21	; 33
    5ba4:	1a 2e       	mov	r1, r26
    5ba6:	aa 1b       	sub	r26, r26
    5ba8:	bb 1b       	sub	r27, r27
    5baa:	fd 01       	movw	r30, r26
    5bac:	0d c0       	rjmp	.+26     	; 0x5bc8 <__udivmodsi4_ep>

00005bae <__udivmodsi4_loop>:
    5bae:	aa 1f       	adc	r26, r26
    5bb0:	bb 1f       	adc	r27, r27
    5bb2:	ee 1f       	adc	r30, r30
    5bb4:	ff 1f       	adc	r31, r31
    5bb6:	a2 17       	cp	r26, r18
    5bb8:	b3 07       	cpc	r27, r19
    5bba:	e4 07       	cpc	r30, r20
    5bbc:	f5 07       	cpc	r31, r21
    5bbe:	20 f0       	brcs	.+8      	; 0x5bc8 <__udivmodsi4_ep>
    5bc0:	a2 1b       	sub	r26, r18
    5bc2:	b3 0b       	sbc	r27, r19
    5bc4:	e4 0b       	sbc	r30, r20
    5bc6:	f5 0b       	sbc	r31, r21

00005bc8 <__udivmodsi4_ep>:
    5bc8:	66 1f       	adc	r22, r22
    5bca:	77 1f       	adc	r23, r23
    5bcc:	88 1f       	adc	r24, r24
    5bce:	99 1f       	adc	r25, r25
    5bd0:	1a 94       	dec	r1
    5bd2:	69 f7       	brne	.-38     	; 0x5bae <__udivmodsi4_loop>
    5bd4:	60 95       	com	r22
    5bd6:	70 95       	com	r23
    5bd8:	80 95       	com	r24
    5bda:	90 95       	com	r25
    5bdc:	9b 01       	movw	r18, r22
    5bde:	ac 01       	movw	r20, r24
    5be0:	bd 01       	movw	r22, r26
    5be2:	cf 01       	movw	r24, r30
    5be4:	08 95       	ret

00005be6 <__divmodsi4>:
    5be6:	05 2e       	mov	r0, r21
    5be8:	97 fb       	bst	r25, 7
    5bea:	1e f4       	brtc	.+6      	; 0x5bf2 <__divmodsi4+0xc>
    5bec:	00 94       	com	r0
    5bee:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__negsi2>
    5bf2:	57 fd       	sbrc	r21, 7
    5bf4:	07 d0       	rcall	.+14     	; 0x5c04 <__divmodsi4_neg2>
    5bf6:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <__udivmodsi4>
    5bfa:	07 fc       	sbrc	r0, 7
    5bfc:	03 d0       	rcall	.+6      	; 0x5c04 <__divmodsi4_neg2>
    5bfe:	4e f4       	brtc	.+18     	; 0x5c12 <__divmodsi4_exit>
    5c00:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__negsi2>

00005c04 <__divmodsi4_neg2>:
    5c04:	50 95       	com	r21
    5c06:	40 95       	com	r20
    5c08:	30 95       	com	r19
    5c0a:	21 95       	neg	r18
    5c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0e:	4f 4f       	sbci	r20, 0xFF	; 255
    5c10:	5f 4f       	sbci	r21, 0xFF	; 255

00005c12 <__divmodsi4_exit>:
    5c12:	08 95       	ret

00005c14 <__negsi2>:
    5c14:	90 95       	com	r25
    5c16:	80 95       	com	r24
    5c18:	70 95       	com	r23
    5c1a:	61 95       	neg	r22
    5c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c20:	9f 4f       	sbci	r25, 0xFF	; 255
    5c22:	08 95       	ret

00005c24 <__tablejump2__>:
    5c24:	ee 0f       	add	r30, r30
    5c26:	ff 1f       	adc	r31, r31
    5c28:	05 90       	lpm	r0, Z+
    5c2a:	f4 91       	lpm	r31, Z
    5c2c:	e0 2d       	mov	r30, r0
    5c2e:	09 94       	ijmp

00005c30 <__ashrdi3>:
    5c30:	97 fb       	bst	r25, 7
    5c32:	10 f8       	bld	r1, 0

00005c34 <__lshrdi3>:
    5c34:	16 94       	lsr	r1
    5c36:	00 08       	sbc	r0, r0
    5c38:	0f 93       	push	r16
    5c3a:	08 30       	cpi	r16, 0x08	; 8
    5c3c:	98 f0       	brcs	.+38     	; 0x5c64 <__lshrdi3+0x30>
    5c3e:	08 50       	subi	r16, 0x08	; 8
    5c40:	23 2f       	mov	r18, r19
    5c42:	34 2f       	mov	r19, r20
    5c44:	45 2f       	mov	r20, r21
    5c46:	56 2f       	mov	r21, r22
    5c48:	67 2f       	mov	r22, r23
    5c4a:	78 2f       	mov	r23, r24
    5c4c:	89 2f       	mov	r24, r25
    5c4e:	90 2d       	mov	r25, r0
    5c50:	f4 cf       	rjmp	.-24     	; 0x5c3a <__lshrdi3+0x6>
    5c52:	05 94       	asr	r0
    5c54:	97 95       	ror	r25
    5c56:	87 95       	ror	r24
    5c58:	77 95       	ror	r23
    5c5a:	67 95       	ror	r22
    5c5c:	57 95       	ror	r21
    5c5e:	47 95       	ror	r20
    5c60:	37 95       	ror	r19
    5c62:	27 95       	ror	r18
    5c64:	0a 95       	dec	r16
    5c66:	aa f7       	brpl	.-22     	; 0x5c52 <__lshrdi3+0x1e>
    5c68:	0f 91       	pop	r16
    5c6a:	08 95       	ret

00005c6c <__udivmodhi4>:
    5c6c:	aa 1b       	sub	r26, r26
    5c6e:	bb 1b       	sub	r27, r27
    5c70:	51 e1       	ldi	r21, 0x11	; 17
    5c72:	07 c0       	rjmp	.+14     	; 0x5c82 <__udivmodhi4_ep>

00005c74 <__udivmodhi4_loop>:
    5c74:	aa 1f       	adc	r26, r26
    5c76:	bb 1f       	adc	r27, r27
    5c78:	a6 17       	cp	r26, r22
    5c7a:	b7 07       	cpc	r27, r23
    5c7c:	10 f0       	brcs	.+4      	; 0x5c82 <__udivmodhi4_ep>
    5c7e:	a6 1b       	sub	r26, r22
    5c80:	b7 0b       	sbc	r27, r23

00005c82 <__udivmodhi4_ep>:
    5c82:	88 1f       	adc	r24, r24
    5c84:	99 1f       	adc	r25, r25
    5c86:	5a 95       	dec	r21
    5c88:	a9 f7       	brne	.-22     	; 0x5c74 <__udivmodhi4_loop>
    5c8a:	80 95       	com	r24
    5c8c:	90 95       	com	r25
    5c8e:	bc 01       	movw	r22, r24
    5c90:	cd 01       	movw	r24, r26
    5c92:	08 95       	ret

00005c94 <malloc>:
    5c94:	0f 93       	push	r16
    5c96:	1f 93       	push	r17
    5c98:	cf 93       	push	r28
    5c9a:	df 93       	push	r29
    5c9c:	82 30       	cpi	r24, 0x02	; 2
    5c9e:	91 05       	cpc	r25, r1
    5ca0:	10 f4       	brcc	.+4      	; 0x5ca6 <malloc+0x12>
    5ca2:	82 e0       	ldi	r24, 0x02	; 2
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <__flp>
    5caa:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <__flp+0x1>
    5cae:	20 e0       	ldi	r18, 0x00	; 0
    5cb0:	30 e0       	ldi	r19, 0x00	; 0
    5cb2:	a0 e0       	ldi	r26, 0x00	; 0
    5cb4:	b0 e0       	ldi	r27, 0x00	; 0
    5cb6:	30 97       	sbiw	r30, 0x00	; 0
    5cb8:	19 f1       	breq	.+70     	; 0x5d00 <malloc+0x6c>
    5cba:	40 81       	ld	r20, Z
    5cbc:	51 81       	ldd	r21, Z+1	; 0x01
    5cbe:	02 81       	ldd	r16, Z+2	; 0x02
    5cc0:	13 81       	ldd	r17, Z+3	; 0x03
    5cc2:	48 17       	cp	r20, r24
    5cc4:	59 07       	cpc	r21, r25
    5cc6:	c8 f0       	brcs	.+50     	; 0x5cfa <malloc+0x66>
    5cc8:	84 17       	cp	r24, r20
    5cca:	95 07       	cpc	r25, r21
    5ccc:	69 f4       	brne	.+26     	; 0x5ce8 <malloc+0x54>
    5cce:	10 97       	sbiw	r26, 0x00	; 0
    5cd0:	31 f0       	breq	.+12     	; 0x5cde <malloc+0x4a>
    5cd2:	12 96       	adiw	r26, 0x02	; 2
    5cd4:	0c 93       	st	X, r16
    5cd6:	12 97       	sbiw	r26, 0x02	; 2
    5cd8:	13 96       	adiw	r26, 0x03	; 3
    5cda:	1c 93       	st	X, r17
    5cdc:	27 c0       	rjmp	.+78     	; 0x5d2c <malloc+0x98>
    5cde:	00 93 b5 07 	sts	0x07B5, r16	; 0x8007b5 <__flp>
    5ce2:	10 93 b6 07 	sts	0x07B6, r17	; 0x8007b6 <__flp+0x1>
    5ce6:	22 c0       	rjmp	.+68     	; 0x5d2c <malloc+0x98>
    5ce8:	21 15       	cp	r18, r1
    5cea:	31 05       	cpc	r19, r1
    5cec:	19 f0       	breq	.+6      	; 0x5cf4 <malloc+0x60>
    5cee:	42 17       	cp	r20, r18
    5cf0:	53 07       	cpc	r21, r19
    5cf2:	18 f4       	brcc	.+6      	; 0x5cfa <malloc+0x66>
    5cf4:	9a 01       	movw	r18, r20
    5cf6:	bd 01       	movw	r22, r26
    5cf8:	ef 01       	movw	r28, r30
    5cfa:	df 01       	movw	r26, r30
    5cfc:	f8 01       	movw	r30, r16
    5cfe:	db cf       	rjmp	.-74     	; 0x5cb6 <malloc+0x22>
    5d00:	21 15       	cp	r18, r1
    5d02:	31 05       	cpc	r19, r1
    5d04:	f9 f0       	breq	.+62     	; 0x5d44 <malloc+0xb0>
    5d06:	28 1b       	sub	r18, r24
    5d08:	39 0b       	sbc	r19, r25
    5d0a:	24 30       	cpi	r18, 0x04	; 4
    5d0c:	31 05       	cpc	r19, r1
    5d0e:	80 f4       	brcc	.+32     	; 0x5d30 <malloc+0x9c>
    5d10:	8a 81       	ldd	r24, Y+2	; 0x02
    5d12:	9b 81       	ldd	r25, Y+3	; 0x03
    5d14:	61 15       	cp	r22, r1
    5d16:	71 05       	cpc	r23, r1
    5d18:	21 f0       	breq	.+8      	; 0x5d22 <malloc+0x8e>
    5d1a:	fb 01       	movw	r30, r22
    5d1c:	93 83       	std	Z+3, r25	; 0x03
    5d1e:	82 83       	std	Z+2, r24	; 0x02
    5d20:	04 c0       	rjmp	.+8      	; 0x5d2a <malloc+0x96>
    5d22:	90 93 b6 07 	sts	0x07B6, r25	; 0x8007b6 <__flp+0x1>
    5d26:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <__flp>
    5d2a:	fe 01       	movw	r30, r28
    5d2c:	32 96       	adiw	r30, 0x02	; 2
    5d2e:	44 c0       	rjmp	.+136    	; 0x5db8 <malloc+0x124>
    5d30:	fe 01       	movw	r30, r28
    5d32:	e2 0f       	add	r30, r18
    5d34:	f3 1f       	adc	r31, r19
    5d36:	81 93       	st	Z+, r24
    5d38:	91 93       	st	Z+, r25
    5d3a:	22 50       	subi	r18, 0x02	; 2
    5d3c:	31 09       	sbc	r19, r1
    5d3e:	39 83       	std	Y+1, r19	; 0x01
    5d40:	28 83       	st	Y, r18
    5d42:	3a c0       	rjmp	.+116    	; 0x5db8 <malloc+0x124>
    5d44:	20 91 b3 07 	lds	r18, 0x07B3	; 0x8007b3 <__brkval>
    5d48:	30 91 b4 07 	lds	r19, 0x07B4	; 0x8007b4 <__brkval+0x1>
    5d4c:	23 2b       	or	r18, r19
    5d4e:	41 f4       	brne	.+16     	; 0x5d60 <malloc+0xcc>
    5d50:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    5d54:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    5d58:	30 93 b4 07 	sts	0x07B4, r19	; 0x8007b4 <__brkval+0x1>
    5d5c:	20 93 b3 07 	sts	0x07B3, r18	; 0x8007b3 <__brkval>
    5d60:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    5d64:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    5d68:	21 15       	cp	r18, r1
    5d6a:	31 05       	cpc	r19, r1
    5d6c:	41 f4       	brne	.+16     	; 0x5d7e <malloc+0xea>
    5d6e:	2d b7       	in	r18, 0x3d	; 61
    5d70:	3e b7       	in	r19, 0x3e	; 62
    5d72:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    5d76:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    5d7a:	24 1b       	sub	r18, r20
    5d7c:	35 0b       	sbc	r19, r21
    5d7e:	e0 91 b3 07 	lds	r30, 0x07B3	; 0x8007b3 <__brkval>
    5d82:	f0 91 b4 07 	lds	r31, 0x07B4	; 0x8007b4 <__brkval+0x1>
    5d86:	e2 17       	cp	r30, r18
    5d88:	f3 07       	cpc	r31, r19
    5d8a:	a0 f4       	brcc	.+40     	; 0x5db4 <malloc+0x120>
    5d8c:	2e 1b       	sub	r18, r30
    5d8e:	3f 0b       	sbc	r19, r31
    5d90:	28 17       	cp	r18, r24
    5d92:	39 07       	cpc	r19, r25
    5d94:	78 f0       	brcs	.+30     	; 0x5db4 <malloc+0x120>
    5d96:	ac 01       	movw	r20, r24
    5d98:	4e 5f       	subi	r20, 0xFE	; 254
    5d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d9c:	24 17       	cp	r18, r20
    5d9e:	35 07       	cpc	r19, r21
    5da0:	48 f0       	brcs	.+18     	; 0x5db4 <malloc+0x120>
    5da2:	4e 0f       	add	r20, r30
    5da4:	5f 1f       	adc	r21, r31
    5da6:	50 93 b4 07 	sts	0x07B4, r21	; 0x8007b4 <__brkval+0x1>
    5daa:	40 93 b3 07 	sts	0x07B3, r20	; 0x8007b3 <__brkval>
    5dae:	81 93       	st	Z+, r24
    5db0:	91 93       	st	Z+, r25
    5db2:	02 c0       	rjmp	.+4      	; 0x5db8 <malloc+0x124>
    5db4:	e0 e0       	ldi	r30, 0x00	; 0
    5db6:	f0 e0       	ldi	r31, 0x00	; 0
    5db8:	cf 01       	movw	r24, r30
    5dba:	df 91       	pop	r29
    5dbc:	cf 91       	pop	r28
    5dbe:	1f 91       	pop	r17
    5dc0:	0f 91       	pop	r16
    5dc2:	08 95       	ret

00005dc4 <free>:
    5dc4:	cf 93       	push	r28
    5dc6:	df 93       	push	r29
    5dc8:	00 97       	sbiw	r24, 0x00	; 0
    5dca:	09 f4       	brne	.+2      	; 0x5dce <free+0xa>
    5dcc:	81 c0       	rjmp	.+258    	; 0x5ed0 <free+0x10c>
    5dce:	fc 01       	movw	r30, r24
    5dd0:	32 97       	sbiw	r30, 0x02	; 2
    5dd2:	13 82       	std	Z+3, r1	; 0x03
    5dd4:	12 82       	std	Z+2, r1	; 0x02
    5dd6:	a0 91 b5 07 	lds	r26, 0x07B5	; 0x8007b5 <__flp>
    5dda:	b0 91 b6 07 	lds	r27, 0x07B6	; 0x8007b6 <__flp+0x1>
    5dde:	10 97       	sbiw	r26, 0x00	; 0
    5de0:	81 f4       	brne	.+32     	; 0x5e02 <free+0x3e>
    5de2:	20 81       	ld	r18, Z
    5de4:	31 81       	ldd	r19, Z+1	; 0x01
    5de6:	82 0f       	add	r24, r18
    5de8:	93 1f       	adc	r25, r19
    5dea:	20 91 b3 07 	lds	r18, 0x07B3	; 0x8007b3 <__brkval>
    5dee:	30 91 b4 07 	lds	r19, 0x07B4	; 0x8007b4 <__brkval+0x1>
    5df2:	28 17       	cp	r18, r24
    5df4:	39 07       	cpc	r19, r25
    5df6:	51 f5       	brne	.+84     	; 0x5e4c <free+0x88>
    5df8:	f0 93 b4 07 	sts	0x07B4, r31	; 0x8007b4 <__brkval+0x1>
    5dfc:	e0 93 b3 07 	sts	0x07B3, r30	; 0x8007b3 <__brkval>
    5e00:	67 c0       	rjmp	.+206    	; 0x5ed0 <free+0x10c>
    5e02:	ed 01       	movw	r28, r26
    5e04:	20 e0       	ldi	r18, 0x00	; 0
    5e06:	30 e0       	ldi	r19, 0x00	; 0
    5e08:	ce 17       	cp	r28, r30
    5e0a:	df 07       	cpc	r29, r31
    5e0c:	40 f4       	brcc	.+16     	; 0x5e1e <free+0x5a>
    5e0e:	4a 81       	ldd	r20, Y+2	; 0x02
    5e10:	5b 81       	ldd	r21, Y+3	; 0x03
    5e12:	9e 01       	movw	r18, r28
    5e14:	41 15       	cp	r20, r1
    5e16:	51 05       	cpc	r21, r1
    5e18:	f1 f0       	breq	.+60     	; 0x5e56 <free+0x92>
    5e1a:	ea 01       	movw	r28, r20
    5e1c:	f5 cf       	rjmp	.-22     	; 0x5e08 <free+0x44>
    5e1e:	d3 83       	std	Z+3, r29	; 0x03
    5e20:	c2 83       	std	Z+2, r28	; 0x02
    5e22:	40 81       	ld	r20, Z
    5e24:	51 81       	ldd	r21, Z+1	; 0x01
    5e26:	84 0f       	add	r24, r20
    5e28:	95 1f       	adc	r25, r21
    5e2a:	c8 17       	cp	r28, r24
    5e2c:	d9 07       	cpc	r29, r25
    5e2e:	59 f4       	brne	.+22     	; 0x5e46 <free+0x82>
    5e30:	88 81       	ld	r24, Y
    5e32:	99 81       	ldd	r25, Y+1	; 0x01
    5e34:	84 0f       	add	r24, r20
    5e36:	95 1f       	adc	r25, r21
    5e38:	02 96       	adiw	r24, 0x02	; 2
    5e3a:	91 83       	std	Z+1, r25	; 0x01
    5e3c:	80 83       	st	Z, r24
    5e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e40:	9b 81       	ldd	r25, Y+3	; 0x03
    5e42:	93 83       	std	Z+3, r25	; 0x03
    5e44:	82 83       	std	Z+2, r24	; 0x02
    5e46:	21 15       	cp	r18, r1
    5e48:	31 05       	cpc	r19, r1
    5e4a:	29 f4       	brne	.+10     	; 0x5e56 <free+0x92>
    5e4c:	f0 93 b6 07 	sts	0x07B6, r31	; 0x8007b6 <__flp+0x1>
    5e50:	e0 93 b5 07 	sts	0x07B5, r30	; 0x8007b5 <__flp>
    5e54:	3d c0       	rjmp	.+122    	; 0x5ed0 <free+0x10c>
    5e56:	e9 01       	movw	r28, r18
    5e58:	fb 83       	std	Y+3, r31	; 0x03
    5e5a:	ea 83       	std	Y+2, r30	; 0x02
    5e5c:	49 91       	ld	r20, Y+
    5e5e:	59 91       	ld	r21, Y+
    5e60:	c4 0f       	add	r28, r20
    5e62:	d5 1f       	adc	r29, r21
    5e64:	ec 17       	cp	r30, r28
    5e66:	fd 07       	cpc	r31, r29
    5e68:	61 f4       	brne	.+24     	; 0x5e82 <free+0xbe>
    5e6a:	80 81       	ld	r24, Z
    5e6c:	91 81       	ldd	r25, Z+1	; 0x01
    5e6e:	84 0f       	add	r24, r20
    5e70:	95 1f       	adc	r25, r21
    5e72:	02 96       	adiw	r24, 0x02	; 2
    5e74:	e9 01       	movw	r28, r18
    5e76:	99 83       	std	Y+1, r25	; 0x01
    5e78:	88 83       	st	Y, r24
    5e7a:	82 81       	ldd	r24, Z+2	; 0x02
    5e7c:	93 81       	ldd	r25, Z+3	; 0x03
    5e7e:	9b 83       	std	Y+3, r25	; 0x03
    5e80:	8a 83       	std	Y+2, r24	; 0x02
    5e82:	e0 e0       	ldi	r30, 0x00	; 0
    5e84:	f0 e0       	ldi	r31, 0x00	; 0
    5e86:	12 96       	adiw	r26, 0x02	; 2
    5e88:	8d 91       	ld	r24, X+
    5e8a:	9c 91       	ld	r25, X
    5e8c:	13 97       	sbiw	r26, 0x03	; 3
    5e8e:	00 97       	sbiw	r24, 0x00	; 0
    5e90:	19 f0       	breq	.+6      	; 0x5e98 <free+0xd4>
    5e92:	fd 01       	movw	r30, r26
    5e94:	dc 01       	movw	r26, r24
    5e96:	f7 cf       	rjmp	.-18     	; 0x5e86 <free+0xc2>
    5e98:	8d 91       	ld	r24, X+
    5e9a:	9c 91       	ld	r25, X
    5e9c:	11 97       	sbiw	r26, 0x01	; 1
    5e9e:	9d 01       	movw	r18, r26
    5ea0:	2e 5f       	subi	r18, 0xFE	; 254
    5ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea4:	82 0f       	add	r24, r18
    5ea6:	93 1f       	adc	r25, r19
    5ea8:	20 91 b3 07 	lds	r18, 0x07B3	; 0x8007b3 <__brkval>
    5eac:	30 91 b4 07 	lds	r19, 0x07B4	; 0x8007b4 <__brkval+0x1>
    5eb0:	28 17       	cp	r18, r24
    5eb2:	39 07       	cpc	r19, r25
    5eb4:	69 f4       	brne	.+26     	; 0x5ed0 <free+0x10c>
    5eb6:	30 97       	sbiw	r30, 0x00	; 0
    5eb8:	29 f4       	brne	.+10     	; 0x5ec4 <free+0x100>
    5eba:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <__flp+0x1>
    5ebe:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <__flp>
    5ec2:	02 c0       	rjmp	.+4      	; 0x5ec8 <free+0x104>
    5ec4:	13 82       	std	Z+3, r1	; 0x03
    5ec6:	12 82       	std	Z+2, r1	; 0x02
    5ec8:	b0 93 b4 07 	sts	0x07B4, r27	; 0x8007b4 <__brkval+0x1>
    5ecc:	a0 93 b3 07 	sts	0x07B3, r26	; 0x8007b3 <__brkval>
    5ed0:	df 91       	pop	r29
    5ed2:	cf 91       	pop	r28
    5ed4:	08 95       	ret

00005ed6 <abort>:
    5ed6:	81 e0       	ldi	r24, 0x01	; 1
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	f8 94       	cli
    5edc:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__do_global_dtors>

00005ee0 <atof>:
    5ee0:	66 27       	eor	r22, r22
    5ee2:	77 27       	eor	r23, r23
    5ee4:	0c 94 3f 30 	jmp	0x607e	; 0x607e <strtod>

00005ee8 <atoi>:
    5ee8:	fc 01       	movw	r30, r24
    5eea:	88 27       	eor	r24, r24
    5eec:	99 27       	eor	r25, r25
    5eee:	e8 94       	clt
    5ef0:	21 91       	ld	r18, Z+
    5ef2:	20 32       	cpi	r18, 0x20	; 32
    5ef4:	e9 f3       	breq	.-6      	; 0x5ef0 <atoi+0x8>
    5ef6:	29 30       	cpi	r18, 0x09	; 9
    5ef8:	10 f0       	brcs	.+4      	; 0x5efe <atoi+0x16>
    5efa:	2e 30       	cpi	r18, 0x0E	; 14
    5efc:	c8 f3       	brcs	.-14     	; 0x5ef0 <atoi+0x8>
    5efe:	2b 32       	cpi	r18, 0x2B	; 43
    5f00:	41 f0       	breq	.+16     	; 0x5f12 <atoi+0x2a>
    5f02:	2d 32       	cpi	r18, 0x2D	; 45
    5f04:	39 f4       	brne	.+14     	; 0x5f14 <atoi+0x2c>
    5f06:	68 94       	set
    5f08:	04 c0       	rjmp	.+8      	; 0x5f12 <atoi+0x2a>
    5f0a:	0e 94 37 30 	call	0x606e	; 0x606e <__mulhi_const_10>
    5f0e:	82 0f       	add	r24, r18
    5f10:	91 1d       	adc	r25, r1
    5f12:	21 91       	ld	r18, Z+
    5f14:	20 53       	subi	r18, 0x30	; 48
    5f16:	2a 30       	cpi	r18, 0x0A	; 10
    5f18:	c0 f3       	brcs	.-16     	; 0x5f0a <atoi+0x22>
    5f1a:	1e f4       	brtc	.+6      	; 0x5f22 <atoi+0x3a>
    5f1c:	90 95       	com	r25
    5f1e:	81 95       	neg	r24
    5f20:	9f 4f       	sbci	r25, 0xFF	; 255
    5f22:	08 95       	ret

00005f24 <strcmp_P>:
    5f24:	fb 01       	movw	r30, r22
    5f26:	dc 01       	movw	r26, r24
    5f28:	8d 91       	ld	r24, X+
    5f2a:	05 90       	lpm	r0, Z+
    5f2c:	80 19       	sub	r24, r0
    5f2e:	01 10       	cpse	r0, r1
    5f30:	d9 f3       	breq	.-10     	; 0x5f28 <strcmp_P+0x4>
    5f32:	99 0b       	sbc	r25, r25
    5f34:	08 95       	ret

00005f36 <__strlen_P>:
    5f36:	fc 01       	movw	r30, r24
    5f38:	05 90       	lpm	r0, Z+
    5f3a:	00 20       	and	r0, r0
    5f3c:	e9 f7       	brne	.-6      	; 0x5f38 <__strlen_P+0x2>
    5f3e:	80 95       	com	r24
    5f40:	90 95       	com	r25
    5f42:	8e 0f       	add	r24, r30
    5f44:	9f 1f       	adc	r25, r31
    5f46:	08 95       	ret

00005f48 <strstr_P>:
    5f48:	fb 01       	movw	r30, r22
    5f4a:	55 91       	lpm	r21, Z+
    5f4c:	55 23       	and	r21, r21
    5f4e:	a9 f0       	breq	.+42     	; 0x5f7a <strstr_P+0x32>
    5f50:	bf 01       	movw	r22, r30
    5f52:	dc 01       	movw	r26, r24
    5f54:	4d 91       	ld	r20, X+
    5f56:	45 17       	cp	r20, r21
    5f58:	41 11       	cpse	r20, r1
    5f5a:	e1 f7       	brne	.-8      	; 0x5f54 <strstr_P+0xc>
    5f5c:	59 f4       	brne	.+22     	; 0x5f74 <strstr_P+0x2c>
    5f5e:	cd 01       	movw	r24, r26
    5f60:	05 90       	lpm	r0, Z+
    5f62:	00 20       	and	r0, r0
    5f64:	49 f0       	breq	.+18     	; 0x5f78 <strstr_P+0x30>
    5f66:	4d 91       	ld	r20, X+
    5f68:	40 15       	cp	r20, r0
    5f6a:	41 11       	cpse	r20, r1
    5f6c:	c9 f3       	breq	.-14     	; 0x5f60 <strstr_P+0x18>
    5f6e:	fb 01       	movw	r30, r22
    5f70:	41 11       	cpse	r20, r1
    5f72:	ef cf       	rjmp	.-34     	; 0x5f52 <strstr_P+0xa>
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	01 97       	sbiw	r24, 0x01	; 1
    5f7a:	08 95       	ret

00005f7c <strtok>:
    5f7c:	47 ec       	ldi	r20, 0xC7	; 199
    5f7e:	56 e0       	ldi	r21, 0x06	; 6
    5f80:	0e 94 10 30 	call	0x6020	; 0x6020 <strtok_r>
    5f84:	08 95       	ret

00005f86 <memset>:
    5f86:	dc 01       	movw	r26, r24
    5f88:	01 c0       	rjmp	.+2      	; 0x5f8c <memset+0x6>
    5f8a:	6d 93       	st	X+, r22
    5f8c:	41 50       	subi	r20, 0x01	; 1
    5f8e:	50 40       	sbci	r21, 0x00	; 0
    5f90:	e0 f7       	brcc	.-8      	; 0x5f8a <memset+0x4>
    5f92:	08 95       	ret

00005f94 <strchr>:
    5f94:	fc 01       	movw	r30, r24
    5f96:	81 91       	ld	r24, Z+
    5f98:	86 17       	cp	r24, r22
    5f9a:	21 f0       	breq	.+8      	; 0x5fa4 <strchr+0x10>
    5f9c:	88 23       	and	r24, r24
    5f9e:	d9 f7       	brne	.-10     	; 0x5f96 <strchr+0x2>
    5fa0:	99 27       	eor	r25, r25
    5fa2:	08 95       	ret
    5fa4:	31 97       	sbiw	r30, 0x01	; 1
    5fa6:	cf 01       	movw	r24, r30
    5fa8:	08 95       	ret

00005faa <strcmp>:
    5faa:	fb 01       	movw	r30, r22
    5fac:	dc 01       	movw	r26, r24
    5fae:	8d 91       	ld	r24, X+
    5fb0:	01 90       	ld	r0, Z+
    5fb2:	80 19       	sub	r24, r0
    5fb4:	01 10       	cpse	r0, r1
    5fb6:	d9 f3       	breq	.-10     	; 0x5fae <strcmp+0x4>
    5fb8:	99 0b       	sbc	r25, r25
    5fba:	08 95       	ret

00005fbc <strlen>:
    5fbc:	fc 01       	movw	r30, r24
    5fbe:	01 90       	ld	r0, Z+
    5fc0:	00 20       	and	r0, r0
    5fc2:	e9 f7       	brne	.-6      	; 0x5fbe <strlen+0x2>
    5fc4:	80 95       	com	r24
    5fc6:	90 95       	com	r25
    5fc8:	8e 0f       	add	r24, r30
    5fca:	9f 1f       	adc	r25, r31
    5fcc:	08 95       	ret

00005fce <strncpy>:
    5fce:	fb 01       	movw	r30, r22
    5fd0:	dc 01       	movw	r26, r24
    5fd2:	41 50       	subi	r20, 0x01	; 1
    5fd4:	50 40       	sbci	r21, 0x00	; 0
    5fd6:	48 f0       	brcs	.+18     	; 0x5fea <strncpy+0x1c>
    5fd8:	01 90       	ld	r0, Z+
    5fda:	0d 92       	st	X+, r0
    5fdc:	00 20       	and	r0, r0
    5fde:	c9 f7       	brne	.-14     	; 0x5fd2 <strncpy+0x4>
    5fe0:	01 c0       	rjmp	.+2      	; 0x5fe4 <strncpy+0x16>
    5fe2:	1d 92       	st	X+, r1
    5fe4:	41 50       	subi	r20, 0x01	; 1
    5fe6:	50 40       	sbci	r21, 0x00	; 0
    5fe8:	e0 f7       	brcc	.-8      	; 0x5fe2 <strncpy+0x14>
    5fea:	08 95       	ret

00005fec <strstr>:
    5fec:	fb 01       	movw	r30, r22
    5fee:	51 91       	ld	r21, Z+
    5ff0:	55 23       	and	r21, r21
    5ff2:	a9 f0       	breq	.+42     	; 0x601e <strstr+0x32>
    5ff4:	bf 01       	movw	r22, r30
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	4d 91       	ld	r20, X+
    5ffa:	45 17       	cp	r20, r21
    5ffc:	41 11       	cpse	r20, r1
    5ffe:	e1 f7       	brne	.-8      	; 0x5ff8 <strstr+0xc>
    6000:	59 f4       	brne	.+22     	; 0x6018 <strstr+0x2c>
    6002:	cd 01       	movw	r24, r26
    6004:	01 90       	ld	r0, Z+
    6006:	00 20       	and	r0, r0
    6008:	49 f0       	breq	.+18     	; 0x601c <strstr+0x30>
    600a:	4d 91       	ld	r20, X+
    600c:	40 15       	cp	r20, r0
    600e:	41 11       	cpse	r20, r1
    6010:	c9 f3       	breq	.-14     	; 0x6004 <strstr+0x18>
    6012:	fb 01       	movw	r30, r22
    6014:	41 11       	cpse	r20, r1
    6016:	ef cf       	rjmp	.-34     	; 0x5ff6 <strstr+0xa>
    6018:	81 e0       	ldi	r24, 0x01	; 1
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	01 97       	sbiw	r24, 0x01	; 1
    601e:	08 95       	ret

00006020 <strtok_r>:
    6020:	fa 01       	movw	r30, r20
    6022:	a1 91       	ld	r26, Z+
    6024:	b0 81       	ld	r27, Z
    6026:	00 97       	sbiw	r24, 0x00	; 0
    6028:	19 f4       	brne	.+6      	; 0x6030 <strtok_r+0x10>
    602a:	10 97       	sbiw	r26, 0x00	; 0
    602c:	e1 f0       	breq	.+56     	; 0x6066 <strtok_r+0x46>
    602e:	cd 01       	movw	r24, r26
    6030:	dc 01       	movw	r26, r24
    6032:	cd 01       	movw	r24, r26
    6034:	0d 90       	ld	r0, X+
    6036:	00 20       	and	r0, r0
    6038:	11 f4       	brne	.+4      	; 0x603e <strtok_r+0x1e>
    603a:	c0 01       	movw	r24, r0
    603c:	13 c0       	rjmp	.+38     	; 0x6064 <strtok_r+0x44>
    603e:	fb 01       	movw	r30, r22
    6040:	21 91       	ld	r18, Z+
    6042:	22 23       	and	r18, r18
    6044:	19 f0       	breq	.+6      	; 0x604c <strtok_r+0x2c>
    6046:	20 15       	cp	r18, r0
    6048:	d9 f7       	brne	.-10     	; 0x6040 <strtok_r+0x20>
    604a:	f3 cf       	rjmp	.-26     	; 0x6032 <strtok_r+0x12>
    604c:	fb 01       	movw	r30, r22
    604e:	21 91       	ld	r18, Z+
    6050:	20 15       	cp	r18, r0
    6052:	19 f4       	brne	.+6      	; 0x605a <strtok_r+0x3a>
    6054:	1e 92       	st	-X, r1
    6056:	11 96       	adiw	r26, 0x01	; 1
    6058:	06 c0       	rjmp	.+12     	; 0x6066 <strtok_r+0x46>
    605a:	22 23       	and	r18, r18
    605c:	c1 f7       	brne	.-16     	; 0x604e <strtok_r+0x2e>
    605e:	0d 90       	ld	r0, X+
    6060:	00 20       	and	r0, r0
    6062:	a1 f7       	brne	.-24     	; 0x604c <strtok_r+0x2c>
    6064:	d0 01       	movw	r26, r0
    6066:	fa 01       	movw	r30, r20
    6068:	a1 93       	st	Z+, r26
    606a:	b0 83       	st	Z, r27
    606c:	08 95       	ret

0000606e <__mulhi_const_10>:
    606e:	7a e0       	ldi	r23, 0x0A	; 10
    6070:	97 9f       	mul	r25, r23
    6072:	90 2d       	mov	r25, r0
    6074:	87 9f       	mul	r24, r23
    6076:	80 2d       	mov	r24, r0
    6078:	91 0d       	add	r25, r1
    607a:	11 24       	eor	r1, r1
    607c:	08 95       	ret

0000607e <strtod>:
    607e:	a0 e0       	ldi	r26, 0x00	; 0
    6080:	b0 e0       	ldi	r27, 0x00	; 0
    6082:	e5 e4       	ldi	r30, 0x45	; 69
    6084:	f0 e3       	ldi	r31, 0x30	; 48
    6086:	0c 94 c2 31 	jmp	0x6384	; 0x6384 <__prologue_saves__+0xc>
    608a:	ec 01       	movw	r28, r24
    608c:	6b 01       	movw	r12, r22
    608e:	61 15       	cp	r22, r1
    6090:	71 05       	cpc	r23, r1
    6092:	19 f0       	breq	.+6      	; 0x609a <strtod+0x1c>
    6094:	fb 01       	movw	r30, r22
    6096:	91 83       	std	Z+1, r25	; 0x01
    6098:	80 83       	st	Z, r24
    609a:	7e 01       	movw	r14, r28
    609c:	ff ef       	ldi	r31, 0xFF	; 255
    609e:	ef 1a       	sub	r14, r31
    60a0:	ff 0a       	sbc	r15, r31
    60a2:	08 81       	ld	r16, Y
    60a4:	80 2f       	mov	r24, r16
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	0e 94 8d 31 	call	0x631a	; 0x631a <isspace>
    60ac:	89 2b       	or	r24, r25
    60ae:	11 f0       	breq	.+4      	; 0x60b4 <strtod+0x36>
    60b0:	e7 01       	movw	r28, r14
    60b2:	f3 cf       	rjmp	.-26     	; 0x609a <strtod+0x1c>
    60b4:	0d 32       	cpi	r16, 0x2D	; 45
    60b6:	39 f4       	brne	.+14     	; 0x60c6 <strtod+0x48>
    60b8:	7e 01       	movw	r14, r28
    60ba:	82 e0       	ldi	r24, 0x02	; 2
    60bc:	e8 0e       	add	r14, r24
    60be:	f1 1c       	adc	r15, r1
    60c0:	09 81       	ldd	r16, Y+1	; 0x01
    60c2:	11 e0       	ldi	r17, 0x01	; 1
    60c4:	08 c0       	rjmp	.+16     	; 0x60d6 <strtod+0x58>
    60c6:	0b 32       	cpi	r16, 0x2B	; 43
    60c8:	29 f4       	brne	.+10     	; 0x60d4 <strtod+0x56>
    60ca:	7e 01       	movw	r14, r28
    60cc:	92 e0       	ldi	r25, 0x02	; 2
    60ce:	e9 0e       	add	r14, r25
    60d0:	f1 1c       	adc	r15, r1
    60d2:	09 81       	ldd	r16, Y+1	; 0x01
    60d4:	10 e0       	ldi	r17, 0x00	; 0
    60d6:	e7 01       	movw	r28, r14
    60d8:	21 97       	sbiw	r28, 0x01	; 1
    60da:	43 e0       	ldi	r20, 0x03	; 3
    60dc:	50 e0       	ldi	r21, 0x00	; 0
    60de:	62 e6       	ldi	r22, 0x62	; 98
    60e0:	72 e0       	ldi	r23, 0x02	; 2
    60e2:	ce 01       	movw	r24, r28
    60e4:	0e 94 96 31 	call	0x632c	; 0x632c <strncasecmp_P>
    60e8:	89 2b       	or	r24, r25
    60ea:	c1 f4       	brne	.+48     	; 0x611c <strtod+0x9e>
    60ec:	23 96       	adiw	r28, 0x03	; 3
    60ee:	45 e0       	ldi	r20, 0x05	; 5
    60f0:	50 e0       	ldi	r21, 0x00	; 0
    60f2:	6d e5       	ldi	r22, 0x5D	; 93
    60f4:	72 e0       	ldi	r23, 0x02	; 2
    60f6:	ce 01       	movw	r24, r28
    60f8:	0e 94 96 31 	call	0x632c	; 0x632c <strncasecmp_P>
    60fc:	89 2b       	or	r24, r25
    60fe:	09 f4       	brne	.+2      	; 0x6102 <strtod+0x84>
    6100:	25 96       	adiw	r28, 0x05	; 5
    6102:	c1 14       	cp	r12, r1
    6104:	d1 04       	cpc	r13, r1
    6106:	19 f0       	breq	.+6      	; 0x610e <strtod+0x90>
    6108:	f6 01       	movw	r30, r12
    610a:	d1 83       	std	Z+1, r29	; 0x01
    610c:	c0 83       	st	Z, r28
    610e:	11 11       	cpse	r17, r1
    6110:	f6 c0       	rjmp	.+492    	; 0x62fe <strtod+0x280>
    6112:	60 e0       	ldi	r22, 0x00	; 0
    6114:	70 e0       	ldi	r23, 0x00	; 0
    6116:	80 e8       	ldi	r24, 0x80	; 128
    6118:	9f e7       	ldi	r25, 0x7F	; 127
    611a:	fa c0       	rjmp	.+500    	; 0x6310 <strtod+0x292>
    611c:	43 e0       	ldi	r20, 0x03	; 3
    611e:	50 e0       	ldi	r21, 0x00	; 0
    6120:	6a e5       	ldi	r22, 0x5A	; 90
    6122:	72 e0       	ldi	r23, 0x02	; 2
    6124:	ce 01       	movw	r24, r28
    6126:	0e 94 96 31 	call	0x632c	; 0x632c <strncasecmp_P>
    612a:	89 2b       	or	r24, r25
    612c:	59 f4       	brne	.+22     	; 0x6144 <strtod+0xc6>
    612e:	c1 14       	cp	r12, r1
    6130:	d1 04       	cpc	r13, r1
    6132:	09 f4       	brne	.+2      	; 0x6136 <strtod+0xb8>
    6134:	e9 c0       	rjmp	.+466    	; 0x6308 <strtod+0x28a>
    6136:	f2 e0       	ldi	r31, 0x02	; 2
    6138:	ef 0e       	add	r14, r31
    613a:	f1 1c       	adc	r15, r1
    613c:	f6 01       	movw	r30, r12
    613e:	f1 82       	std	Z+1, r15	; 0x01
    6140:	e0 82       	st	Z, r14
    6142:	e2 c0       	rjmp	.+452    	; 0x6308 <strtod+0x28a>
    6144:	20 e0       	ldi	r18, 0x00	; 0
    6146:	30 e0       	ldi	r19, 0x00	; 0
    6148:	a9 01       	movw	r20, r18
    614a:	c0 e0       	ldi	r28, 0x00	; 0
    614c:	d0 e0       	ldi	r29, 0x00	; 0
    614e:	f7 01       	movw	r30, r14
    6150:	80 ed       	ldi	r24, 0xD0	; 208
    6152:	a8 2e       	mov	r10, r24
    6154:	a0 0e       	add	r10, r16
    6156:	89 e0       	ldi	r24, 0x09	; 9
    6158:	8a 15       	cp	r24, r10
    615a:	30 f1       	brcs	.+76     	; 0x61a8 <strtod+0x12a>
    615c:	91 2f       	mov	r25, r17
    615e:	92 60       	ori	r25, 0x02	; 2
    6160:	b9 2e       	mov	r11, r25
    6162:	81 2f       	mov	r24, r17
    6164:	88 70       	andi	r24, 0x08	; 8
    6166:	12 ff       	sbrs	r17, 2
    6168:	04 c0       	rjmp	.+8      	; 0x6172 <strtod+0xf4>
    616a:	81 11       	cpse	r24, r1
    616c:	24 c0       	rjmp	.+72     	; 0x61b6 <strtod+0x138>
    616e:	21 96       	adiw	r28, 0x01	; 1
    6170:	22 c0       	rjmp	.+68     	; 0x61b6 <strtod+0x138>
    6172:	81 11       	cpse	r24, r1
    6174:	21 97       	sbiw	r28, 0x01	; 1
    6176:	a5 e0       	ldi	r26, 0x05	; 5
    6178:	b0 e0       	ldi	r27, 0x00	; 0
    617a:	0e 94 b1 31 	call	0x6362	; 0x6362 <__muluhisi3>
    617e:	dc 01       	movw	r26, r24
    6180:	cb 01       	movw	r24, r22
    6182:	88 0f       	add	r24, r24
    6184:	99 1f       	adc	r25, r25
    6186:	aa 1f       	adc	r26, r26
    6188:	bb 1f       	adc	r27, r27
    618a:	9c 01       	movw	r18, r24
    618c:	ad 01       	movw	r20, r26
    618e:	2a 0d       	add	r18, r10
    6190:	31 1d       	adc	r19, r1
    6192:	41 1d       	adc	r20, r1
    6194:	51 1d       	adc	r21, r1
    6196:	28 39       	cpi	r18, 0x98	; 152
    6198:	89 e9       	ldi	r24, 0x99	; 153
    619a:	38 07       	cpc	r19, r24
    619c:	48 07       	cpc	r20, r24
    619e:	89 e1       	ldi	r24, 0x19	; 25
    61a0:	58 07       	cpc	r21, r24
    61a2:	48 f0       	brcs	.+18     	; 0x61b6 <strtod+0x138>
    61a4:	16 60       	ori	r17, 0x06	; 6
    61a6:	06 c0       	rjmp	.+12     	; 0x61b4 <strtod+0x136>
    61a8:	9e ef       	ldi	r25, 0xFE	; 254
    61aa:	a9 12       	cpse	r10, r25
    61ac:	0a c0       	rjmp	.+20     	; 0x61c2 <strtod+0x144>
    61ae:	13 fd       	sbrc	r17, 3
    61b0:	40 c0       	rjmp	.+128    	; 0x6232 <strtod+0x1b4>
    61b2:	18 60       	ori	r17, 0x08	; 8
    61b4:	b1 2e       	mov	r11, r17
    61b6:	8f ef       	ldi	r24, 0xFF	; 255
    61b8:	e8 1a       	sub	r14, r24
    61ba:	f8 0a       	sbc	r15, r24
    61bc:	00 81       	ld	r16, Z
    61be:	1b 2d       	mov	r17, r11
    61c0:	c6 cf       	rjmp	.-116    	; 0x614e <strtod+0xd0>
    61c2:	80 2f       	mov	r24, r16
    61c4:	8f 7d       	andi	r24, 0xDF	; 223
    61c6:	85 34       	cpi	r24, 0x45	; 69
    61c8:	a1 f5       	brne	.+104    	; 0x6232 <strtod+0x1b4>
    61ca:	80 81       	ld	r24, Z
    61cc:	8d 32       	cpi	r24, 0x2D	; 45
    61ce:	11 f4       	brne	.+4      	; 0x61d4 <strtod+0x156>
    61d0:	10 61       	ori	r17, 0x10	; 16
    61d2:	06 c0       	rjmp	.+12     	; 0x61e0 <strtod+0x162>
    61d4:	8b 32       	cpi	r24, 0x2B	; 43
    61d6:	21 f0       	breq	.+8      	; 0x61e0 <strtod+0x162>
    61d8:	31 96       	adiw	r30, 0x01	; 1
    61da:	61 e0       	ldi	r22, 0x01	; 1
    61dc:	70 e0       	ldi	r23, 0x00	; 0
    61de:	04 c0       	rjmp	.+8      	; 0x61e8 <strtod+0x16a>
    61e0:	81 81       	ldd	r24, Z+1	; 0x01
    61e2:	32 96       	adiw	r30, 0x02	; 2
    61e4:	62 e0       	ldi	r22, 0x02	; 2
    61e6:	70 e0       	ldi	r23, 0x00	; 0
    61e8:	80 53       	subi	r24, 0x30	; 48
    61ea:	8a 30       	cpi	r24, 0x0A	; 10
    61ec:	18 f0       	brcs	.+6      	; 0x61f4 <strtod+0x176>
    61ee:	e6 1b       	sub	r30, r22
    61f0:	f7 0b       	sbc	r31, r23
    61f2:	1f c0       	rjmp	.+62     	; 0x6232 <strtod+0x1b4>
    61f4:	60 e0       	ldi	r22, 0x00	; 0
    61f6:	70 e0       	ldi	r23, 0x00	; 0
    61f8:	60 38       	cpi	r22, 0x80	; 128
    61fa:	9c e0       	ldi	r25, 0x0C	; 12
    61fc:	79 07       	cpc	r23, r25
    61fe:	5c f4       	brge	.+22     	; 0x6216 <strtod+0x198>
    6200:	db 01       	movw	r26, r22
    6202:	aa 0f       	add	r26, r26
    6204:	bb 1f       	adc	r27, r27
    6206:	aa 0f       	add	r26, r26
    6208:	bb 1f       	adc	r27, r27
    620a:	6a 0f       	add	r22, r26
    620c:	7b 1f       	adc	r23, r27
    620e:	66 0f       	add	r22, r22
    6210:	77 1f       	adc	r23, r23
    6212:	68 0f       	add	r22, r24
    6214:	71 1d       	adc	r23, r1
    6216:	31 96       	adiw	r30, 0x01	; 1
    6218:	df 01       	movw	r26, r30
    621a:	11 97       	sbiw	r26, 0x01	; 1
    621c:	8c 91       	ld	r24, X
    621e:	80 53       	subi	r24, 0x30	; 48
    6220:	8a 30       	cpi	r24, 0x0A	; 10
    6222:	50 f3       	brcs	.-44     	; 0x61f8 <strtod+0x17a>
    6224:	14 ff       	sbrs	r17, 4
    6226:	03 c0       	rjmp	.+6      	; 0x622e <strtod+0x1b0>
    6228:	71 95       	neg	r23
    622a:	61 95       	neg	r22
    622c:	71 09       	sbc	r23, r1
    622e:	c6 0f       	add	r28, r22
    6230:	d7 1f       	adc	r29, r23
    6232:	11 ff       	sbrs	r17, 1
    6234:	08 c0       	rjmp	.+16     	; 0x6246 <strtod+0x1c8>
    6236:	c1 14       	cp	r12, r1
    6238:	d1 04       	cpc	r13, r1
    623a:	29 f0       	breq	.+10     	; 0x6246 <strtod+0x1c8>
    623c:	cf 01       	movw	r24, r30
    623e:	01 97       	sbiw	r24, 0x01	; 1
    6240:	f6 01       	movw	r30, r12
    6242:	91 83       	std	Z+1, r25	; 0x01
    6244:	80 83       	st	Z, r24
    6246:	ca 01       	movw	r24, r20
    6248:	b9 01       	movw	r22, r18
    624a:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatunsisf>
    624e:	21 2f       	mov	r18, r17
    6250:	23 70       	andi	r18, 0x03	; 3
    6252:	23 30       	cpi	r18, 0x03	; 3
    6254:	19 f0       	breq	.+6      	; 0x625c <strtod+0x1de>
    6256:	4b 01       	movw	r8, r22
    6258:	5c 01       	movw	r10, r24
    625a:	06 c0       	rjmp	.+12     	; 0x6268 <strtod+0x1ea>
    625c:	4b 01       	movw	r8, r22
    625e:	5c 01       	movw	r10, r24
    6260:	b7 fa       	bst	r11, 7
    6262:	b0 94       	com	r11
    6264:	b7 f8       	bld	r11, 7
    6266:	b0 94       	com	r11
    6268:	20 e0       	ldi	r18, 0x00	; 0
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	a9 01       	movw	r20, r18
    626e:	c5 01       	movw	r24, r10
    6270:	b4 01       	movw	r22, r8
    6272:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__cmpsf2>
    6276:	88 23       	and	r24, r24
    6278:	09 f4       	brne	.+2      	; 0x627c <strtod+0x1fe>
    627a:	3e c0       	rjmp	.+124    	; 0x62f8 <strtod+0x27a>
    627c:	d7 ff       	sbrs	r29, 7
    627e:	06 c0       	rjmp	.+12     	; 0x628c <strtod+0x20e>
    6280:	d1 95       	neg	r29
    6282:	c1 95       	neg	r28
    6284:	d1 09       	sbc	r29, r1
    6286:	09 e7       	ldi	r16, 0x79	; 121
    6288:	12 e0       	ldi	r17, 0x02	; 2
    628a:	02 c0       	rjmp	.+4      	; 0x6290 <strtod+0x212>
    628c:	01 e9       	ldi	r16, 0x91	; 145
    628e:	12 e0       	ldi	r17, 0x02	; 2
    6290:	68 01       	movw	r12, r16
    6292:	f8 e1       	ldi	r31, 0x18	; 24
    6294:	cf 1a       	sub	r12, r31
    6296:	d1 08       	sbc	r13, r1
    6298:	90 e2       	ldi	r25, 0x20	; 32
    629a:	e9 2e       	mov	r14, r25
    629c:	f1 2c       	mov	r15, r1
    629e:	ce 15       	cp	r28, r14
    62a0:	df 05       	cpc	r29, r15
    62a2:	74 f0       	brlt	.+28     	; 0x62c0 <strtod+0x242>
    62a4:	f8 01       	movw	r30, r16
    62a6:	25 91       	lpm	r18, Z+
    62a8:	35 91       	lpm	r19, Z+
    62aa:	45 91       	lpm	r20, Z+
    62ac:	54 91       	lpm	r21, Z
    62ae:	c5 01       	movw	r24, r10
    62b0:	b4 01       	movw	r22, r8
    62b2:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <__mulsf3>
    62b6:	4b 01       	movw	r8, r22
    62b8:	5c 01       	movw	r10, r24
    62ba:	ce 19       	sub	r28, r14
    62bc:	df 09       	sbc	r29, r15
    62be:	ef cf       	rjmp	.-34     	; 0x629e <strtod+0x220>
    62c0:	04 50       	subi	r16, 0x04	; 4
    62c2:	11 09       	sbc	r17, r1
    62c4:	f5 94       	asr	r15
    62c6:	e7 94       	ror	r14
    62c8:	0c 15       	cp	r16, r12
    62ca:	1d 05       	cpc	r17, r13
    62cc:	41 f7       	brne	.-48     	; 0x629e <strtod+0x220>
    62ce:	8a 2d       	mov	r24, r10
    62d0:	88 0f       	add	r24, r24
    62d2:	8b 2d       	mov	r24, r11
    62d4:	88 1f       	adc	r24, r24
    62d6:	8f 3f       	cpi	r24, 0xFF	; 255
    62d8:	49 f0       	breq	.+18     	; 0x62ec <strtod+0x26e>
    62da:	20 e0       	ldi	r18, 0x00	; 0
    62dc:	30 e0       	ldi	r19, 0x00	; 0
    62de:	a9 01       	movw	r20, r18
    62e0:	c5 01       	movw	r24, r10
    62e2:	b4 01       	movw	r22, r8
    62e4:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__cmpsf2>
    62e8:	81 11       	cpse	r24, r1
    62ea:	06 c0       	rjmp	.+12     	; 0x62f8 <strtod+0x27a>
    62ec:	82 e2       	ldi	r24, 0x22	; 34
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <errno+0x1>
    62f4:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <errno>
    62f8:	c5 01       	movw	r24, r10
    62fa:	b4 01       	movw	r22, r8
    62fc:	09 c0       	rjmp	.+18     	; 0x6310 <strtod+0x292>
    62fe:	60 e0       	ldi	r22, 0x00	; 0
    6300:	70 e0       	ldi	r23, 0x00	; 0
    6302:	80 e8       	ldi	r24, 0x80	; 128
    6304:	9f ef       	ldi	r25, 0xFF	; 255
    6306:	04 c0       	rjmp	.+8      	; 0x6310 <strtod+0x292>
    6308:	60 e0       	ldi	r22, 0x00	; 0
    630a:	70 e0       	ldi	r23, 0x00	; 0
    630c:	80 ec       	ldi	r24, 0xC0	; 192
    630e:	9f e7       	ldi	r25, 0x7F	; 127
    6310:	cd b7       	in	r28, 0x3d	; 61
    6312:	de b7       	in	r29, 0x3e	; 62
    6314:	ec e0       	ldi	r30, 0x0C	; 12
    6316:	0c 94 de 31 	jmp	0x63bc	; 0x63bc <__epilogue_restores__+0xc>

0000631a <isspace>:
    631a:	91 11       	cpse	r25, r1
    631c:	0c 94 ae 31 	jmp	0x635c	; 0x635c <__ctype_isfalse>
    6320:	80 32       	cpi	r24, 0x20	; 32
    6322:	19 f0       	breq	.+6      	; 0x632a <isspace+0x10>
    6324:	89 50       	subi	r24, 0x09	; 9
    6326:	85 50       	subi	r24, 0x05	; 5
    6328:	c8 f7       	brcc	.-14     	; 0x631c <isspace+0x2>
    632a:	08 95       	ret

0000632c <strncasecmp_P>:
    632c:	fb 01       	movw	r30, r22
    632e:	dc 01       	movw	r26, r24
    6330:	41 50       	subi	r20, 0x01	; 1
    6332:	50 40       	sbci	r21, 0x00	; 0
    6334:	88 f0       	brcs	.+34     	; 0x6358 <strncasecmp_P+0x2c>
    6336:	8d 91       	ld	r24, X+
    6338:	81 34       	cpi	r24, 0x41	; 65
    633a:	1c f0       	brlt	.+6      	; 0x6342 <strncasecmp_P+0x16>
    633c:	8b 35       	cpi	r24, 0x5B	; 91
    633e:	0c f4       	brge	.+2      	; 0x6342 <strncasecmp_P+0x16>
    6340:	80 5e       	subi	r24, 0xE0	; 224
    6342:	65 91       	lpm	r22, Z+
    6344:	61 34       	cpi	r22, 0x41	; 65
    6346:	1c f0       	brlt	.+6      	; 0x634e <strncasecmp_P+0x22>
    6348:	6b 35       	cpi	r22, 0x5B	; 91
    634a:	0c f4       	brge	.+2      	; 0x634e <strncasecmp_P+0x22>
    634c:	60 5e       	subi	r22, 0xE0	; 224
    634e:	86 1b       	sub	r24, r22
    6350:	61 11       	cpse	r22, r1
    6352:	71 f3       	breq	.-36     	; 0x6330 <strncasecmp_P+0x4>
    6354:	99 0b       	sbc	r25, r25
    6356:	08 95       	ret
    6358:	88 1b       	sub	r24, r24
    635a:	fc cf       	rjmp	.-8      	; 0x6354 <strncasecmp_P+0x28>

0000635c <__ctype_isfalse>:
    635c:	99 27       	eor	r25, r25
    635e:	88 27       	eor	r24, r24

00006360 <__ctype_istrue>:
    6360:	08 95       	ret

00006362 <__muluhisi3>:
    6362:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__umulhisi3>
    6366:	a5 9f       	mul	r26, r21
    6368:	90 0d       	add	r25, r0
    636a:	b4 9f       	mul	r27, r20
    636c:	90 0d       	add	r25, r0
    636e:	a4 9f       	mul	r26, r20
    6370:	80 0d       	add	r24, r0
    6372:	91 1d       	adc	r25, r1
    6374:	11 24       	eor	r1, r1
    6376:	08 95       	ret

00006378 <__prologue_saves__>:
    6378:	2f 92       	push	r2
    637a:	3f 92       	push	r3
    637c:	4f 92       	push	r4
    637e:	5f 92       	push	r5
    6380:	6f 92       	push	r6
    6382:	7f 92       	push	r7
    6384:	8f 92       	push	r8
    6386:	9f 92       	push	r9
    6388:	af 92       	push	r10
    638a:	bf 92       	push	r11
    638c:	cf 92       	push	r12
    638e:	df 92       	push	r13
    6390:	ef 92       	push	r14
    6392:	ff 92       	push	r15
    6394:	0f 93       	push	r16
    6396:	1f 93       	push	r17
    6398:	cf 93       	push	r28
    639a:	df 93       	push	r29
    639c:	cd b7       	in	r28, 0x3d	; 61
    639e:	de b7       	in	r29, 0x3e	; 62
    63a0:	ca 1b       	sub	r28, r26
    63a2:	db 0b       	sbc	r29, r27
    63a4:	0f b6       	in	r0, 0x3f	; 63
    63a6:	f8 94       	cli
    63a8:	de bf       	out	0x3e, r29	; 62
    63aa:	0f be       	out	0x3f, r0	; 63
    63ac:	cd bf       	out	0x3d, r28	; 61
    63ae:	09 94       	ijmp

000063b0 <__epilogue_restores__>:
    63b0:	2a 88       	ldd	r2, Y+18	; 0x12
    63b2:	39 88       	ldd	r3, Y+17	; 0x11
    63b4:	48 88       	ldd	r4, Y+16	; 0x10
    63b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    63b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    63ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    63bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    63be:	9b 84       	ldd	r9, Y+11	; 0x0b
    63c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    63c2:	b9 84       	ldd	r11, Y+9	; 0x09
    63c4:	c8 84       	ldd	r12, Y+8	; 0x08
    63c6:	df 80       	ldd	r13, Y+7	; 0x07
    63c8:	ee 80       	ldd	r14, Y+6	; 0x06
    63ca:	fd 80       	ldd	r15, Y+5	; 0x05
    63cc:	0c 81       	ldd	r16, Y+4	; 0x04
    63ce:	1b 81       	ldd	r17, Y+3	; 0x03
    63d0:	aa 81       	ldd	r26, Y+2	; 0x02
    63d2:	b9 81       	ldd	r27, Y+1	; 0x01
    63d4:	ce 0f       	add	r28, r30
    63d6:	d1 1d       	adc	r29, r1
    63d8:	0f b6       	in	r0, 0x3f	; 63
    63da:	f8 94       	cli
    63dc:	de bf       	out	0x3e, r29	; 62
    63de:	0f be       	out	0x3f, r0	; 63
    63e0:	cd bf       	out	0x3d, r28	; 61
    63e2:	ed 01       	movw	r28, r26
    63e4:	08 95       	ret

000063e6 <__umulhisi3>:
    63e6:	a2 9f       	mul	r26, r18
    63e8:	b0 01       	movw	r22, r0
    63ea:	b3 9f       	mul	r27, r19
    63ec:	c0 01       	movw	r24, r0
    63ee:	a3 9f       	mul	r26, r19
    63f0:	70 0d       	add	r23, r0
    63f2:	81 1d       	adc	r24, r1
    63f4:	11 24       	eor	r1, r1
    63f6:	91 1d       	adc	r25, r1
    63f8:	b2 9f       	mul	r27, r18
    63fa:	70 0d       	add	r23, r0
    63fc:	81 1d       	adc	r24, r1
    63fe:	11 24       	eor	r1, r1
    6400:	91 1d       	adc	r25, r1
    6402:	08 95       	ret

00006404 <__do_global_dtors>:
    6404:	13 e0       	ldi	r17, 0x03	; 3
    6406:	c6 ef       	ldi	r28, 0xF6	; 246
    6408:	d3 e0       	ldi	r29, 0x03	; 3
    640a:	04 c0       	rjmp	.+8      	; 0x6414 <__do_global_dtors+0x10>
    640c:	fe 01       	movw	r30, r28
    640e:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__tablejump2__>
    6412:	21 96       	adiw	r28, 0x01	; 1
    6414:	c7 3f       	cpi	r28, 0xF7	; 247
    6416:	d1 07       	cpc	r29, r17
    6418:	c9 f7       	brne	.-14     	; 0x640c <__do_global_dtors+0x8>
    641a:	f8 94       	cli

0000641c <__stop_program>:
    641c:	ff cf       	rjmp	.-2      	; 0x641c <__stop_program>
