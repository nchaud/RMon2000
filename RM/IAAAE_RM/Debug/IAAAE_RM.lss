
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028a  00800100  000064a0  00006534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000517  0080038a  0080038a  000067be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000067be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000681c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c603  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ca4  00000000  00000000  000236ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007767  00000000  00000000  00027393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fa8  00000000  00000000  0002eafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011c21  00000000  00000000  00031aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d4ae  00000000  00000000  000436c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000820  00000000  00000000  00050b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005d40  00000000  00000000  00051393  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__dtors_end>
       4:	0c 94 c9 2c 	jmp	0x5992	; 0x5992 <__vector_1>
       8:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__vector_2>
       c:	0c 94 42 2b 	jmp	0x5684	; 0x5684 <__vector_3>
      10:	0c 94 42 2b 	jmp	0x5684	; 0x5684 <__vector_3>
      14:	0c 94 42 2b 	jmp	0x5684	; 0x5684 <__vector_3>
      18:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      1c:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      20:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      24:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      28:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      2c:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      30:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      34:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      38:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      3c:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      40:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__vector_16>
      44:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      48:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__vector_18>
      4c:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__vector_19>
      50:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      54:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      58:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      5c:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      60:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__vector_24>
      64:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__bad_interrupt>
      68:	a4 14       	cp	r10, r4
      6a:	aa 14       	cp	r10, r10
      6c:	aa 14       	cp	r10, r10
      6e:	aa 14       	cp	r10, r10
      70:	aa 14       	cp	r10, r10
      72:	aa 14       	cp	r10, r10
      74:	aa 14       	cp	r10, r10
      76:	aa 14       	cp	r10, r10
      78:	98 13       	cpse	r25, r24
      7a:	aa 14       	cp	r10, r10
      7c:	aa 14       	cp	r10, r10
      7e:	aa 14       	cp	r10, r10
      80:	aa 14       	cp	r10, r10
      82:	aa 14       	cp	r10, r10
      84:	aa 14       	cp	r10, r10
      86:	aa 14       	cp	r10, r10
      88:	98 13       	cpse	r25, r24
      8a:	aa 14       	cp	r10, r10
      8c:	aa 14       	cp	r10, r10
      8e:	aa 14       	cp	r10, r10
      90:	aa 14       	cp	r10, r10
      92:	aa 14       	cp	r10, r10
      94:	aa 14       	cp	r10, r10
      96:	aa 14       	cp	r10, r10
      98:	a2 13       	cpse	r26, r18
      9a:	aa 14       	cp	r10, r10
      9c:	aa 14       	cp	r10, r10
      9e:	aa 14       	cp	r10, r10
      a0:	aa 14       	cp	r10, r10
      a2:	aa 14       	cp	r10, r10
      a4:	aa 14       	cp	r10, r10
      a6:	aa 14       	cp	r10, r10
      a8:	ce 13       	cpse	r28, r30
      aa:	aa 14       	cp	r10, r10
      ac:	aa 14       	cp	r10, r10
      ae:	aa 14       	cp	r10, r10
      b0:	aa 14       	cp	r10, r10
      b2:	aa 14       	cp	r10, r10
      b4:	aa 14       	cp	r10, r10
      b6:	aa 14       	cp	r10, r10
      b8:	a2 13       	cpse	r26, r18
      ba:	aa 14       	cp	r10, r10
      bc:	aa 14       	cp	r10, r10
      be:	aa 14       	cp	r10, r10
      c0:	aa 14       	cp	r10, r10
      c2:	aa 14       	cp	r10, r10
      c4:	aa 14       	cp	r10, r10
      c6:	aa 14       	cp	r10, r10
      c8:	d4 13       	cpse	r29, r20
      ca:	aa 14       	cp	r10, r10
      cc:	aa 14       	cp	r10, r10
      ce:	aa 14       	cp	r10, r10
      d0:	aa 14       	cp	r10, r10
      d2:	aa 14       	cp	r10, r10
      d4:	aa 14       	cp	r10, r10
      d6:	aa 14       	cp	r10, r10
      d8:	da 13       	cpse	r29, r26
      da:	aa 14       	cp	r10, r10
      dc:	aa 14       	cp	r10, r10
      de:	aa 14       	cp	r10, r10
      e0:	aa 14       	cp	r10, r10
      e2:	aa 14       	cp	r10, r10
      e4:	aa 14       	cp	r10, r10
      e6:	aa 14       	cp	r10, r10
      e8:	f0 13       	cpse	r31, r16
      ea:	aa 14       	cp	r10, r10
      ec:	aa 14       	cp	r10, r10
      ee:	aa 14       	cp	r10, r10
      f0:	aa 14       	cp	r10, r10
      f2:	aa 14       	cp	r10, r10
      f4:	aa 14       	cp	r10, r10
      f6:	aa 14       	cp	r10, r10
      f8:	20 14       	cp	r2, r0
      fa:	aa 14       	cp	r10, r10
      fc:	aa 14       	cp	r10, r10
      fe:	aa 14       	cp	r10, r10
     100:	aa 14       	cp	r10, r10
     102:	aa 14       	cp	r10, r10
     104:	aa 14       	cp	r10, r10
     106:	aa 14       	cp	r10, r10
     108:	e0 13       	cpse	r30, r16
     10a:	aa 14       	cp	r10, r10
     10c:	aa 14       	cp	r10, r10
     10e:	aa 14       	cp	r10, r10
     110:	aa 14       	cp	r10, r10
     112:	aa 14       	cp	r10, r10
     114:	aa 14       	cp	r10, r10
     116:	aa 14       	cp	r10, r10
     118:	fe 13       	cpse	r31, r30
     11a:	aa 14       	cp	r10, r10
     11c:	aa 14       	cp	r10, r10
     11e:	aa 14       	cp	r10, r10
     120:	aa 14       	cp	r10, r10
     122:	aa 14       	cp	r10, r10
     124:	aa 14       	cp	r10, r10
     126:	aa 14       	cp	r10, r10
     128:	23 14       	cp	r2, r3
     12a:	aa 14       	cp	r10, r10
     12c:	aa 14       	cp	r10, r10
     12e:	aa 14       	cp	r10, r10
     130:	aa 14       	cp	r10, r10
     132:	aa 14       	cp	r10, r10
     134:	aa 14       	cp	r10, r10
     136:	aa 14       	cp	r10, r10
     138:	23 14       	cp	r2, r3
     13a:	aa 14       	cp	r10, r10
     13c:	aa 14       	cp	r10, r10
     13e:	aa 14       	cp	r10, r10
     140:	aa 14       	cp	r10, r10
     142:	aa 14       	cp	r10, r10
     144:	aa 14       	cp	r10, r10
     146:	aa 14       	cp	r10, r10
     148:	23 14       	cp	r2, r3
     14a:	aa 14       	cp	r10, r10
     14c:	aa 14       	cp	r10, r10
     14e:	aa 14       	cp	r10, r10
     150:	aa 14       	cp	r10, r10
     152:	aa 14       	cp	r10, r10
     154:	aa 14       	cp	r10, r10
     156:	aa 14       	cp	r10, r10
     158:	23 14       	cp	r2, r3
     15a:	aa 14       	cp	r10, r10
     15c:	aa 14       	cp	r10, r10
     15e:	aa 14       	cp	r10, r10
     160:	aa 14       	cp	r10, r10
     162:	aa 14       	cp	r10, r10
     164:	aa 14       	cp	r10, r10
     166:	aa 14       	cp	r10, r10
     168:	2c 14       	cp	r2, r12
     16a:	aa 14       	cp	r10, r10
     16c:	aa 14       	cp	r10, r10
     16e:	aa 14       	cp	r10, r10
     170:	aa 14       	cp	r10, r10
     172:	aa 14       	cp	r10, r10
     174:	aa 14       	cp	r10, r10
     176:	aa 14       	cp	r10, r10
     178:	66 14       	cp	r6, r6
     17a:	aa 14       	cp	r10, r10
     17c:	aa 14       	cp	r10, r10
     17e:	aa 14       	cp	r10, r10
     180:	aa 14       	cp	r10, r10
     182:	aa 14       	cp	r10, r10
     184:	aa 14       	cp	r10, r10
     186:	aa 14       	cp	r10, r10
     188:	2c 14       	cp	r2, r12
     18a:	aa 14       	cp	r10, r10
     18c:	aa 14       	cp	r10, r10
     18e:	aa 14       	cp	r10, r10
     190:	aa 14       	cp	r10, r10
     192:	aa 14       	cp	r10, r10
     194:	aa 14       	cp	r10, r10
     196:	aa 14       	cp	r10, r10
     198:	66 14       	cp	r6, r6
     19a:	aa 14       	cp	r10, r10
     19c:	aa 14       	cp	r10, r10
     19e:	aa 14       	cp	r10, r10
     1a0:	aa 14       	cp	r10, r10
     1a2:	aa 14       	cp	r10, r10
     1a4:	aa 14       	cp	r10, r10
     1a6:	aa 14       	cp	r10, r10
     1a8:	48 14       	cp	r4, r8
     1aa:	aa 14       	cp	r10, r10
     1ac:	aa 14       	cp	r10, r10
     1ae:	aa 14       	cp	r10, r10
     1b0:	aa 14       	cp	r10, r10
     1b2:	aa 14       	cp	r10, r10
     1b4:	aa 14       	cp	r10, r10
     1b6:	aa 14       	cp	r10, r10
     1b8:	6a 14       	cp	r6, r10
     1ba:	aa 14       	cp	r10, r10
     1bc:	aa 14       	cp	r10, r10
     1be:	aa 14       	cp	r10, r10
     1c0:	aa 14       	cp	r10, r10
     1c2:	aa 14       	cp	r10, r10
     1c4:	aa 14       	cp	r10, r10
     1c6:	aa 14       	cp	r10, r10
     1c8:	6a 14       	cp	r6, r10
     1ca:	aa 14       	cp	r10, r10
     1cc:	aa 14       	cp	r10, r10
     1ce:	aa 14       	cp	r10, r10
     1d0:	aa 14       	cp	r10, r10
     1d2:	aa 14       	cp	r10, r10
     1d4:	aa 14       	cp	r10, r10
     1d6:	aa 14       	cp	r10, r10
     1d8:	80 14       	cp	r8, r0
     1da:	aa 14       	cp	r10, r10
     1dc:	aa 14       	cp	r10, r10
     1de:	aa 14       	cp	r10, r10
     1e0:	aa 14       	cp	r10, r10
     1e2:	aa 14       	cp	r10, r10
     1e4:	aa 14       	cp	r10, r10
     1e6:	aa 14       	cp	r10, r10
     1e8:	9e 14       	cp	r9, r14
     1ea:	aa 14       	cp	r10, r10
     1ec:	aa 14       	cp	r10, r10
     1ee:	aa 14       	cp	r10, r10
     1f0:	aa 14       	cp	r10, r10
     1f2:	aa 14       	cp	r10, r10
     1f4:	aa 14       	cp	r10, r10
     1f6:	aa 14       	cp	r10, r10
     1f8:	9e 14       	cp	r9, r14
     1fa:	aa 14       	cp	r10, r10
     1fc:	aa 14       	cp	r10, r10
     1fe:	aa 14       	cp	r10, r10
     200:	aa 14       	cp	r10, r10
     202:	aa 14       	cp	r10, r10
     204:	aa 14       	cp	r10, r10
     206:	aa 14       	cp	r10, r10
     208:	aa 14       	cp	r10, r10
     20a:	aa 14       	cp	r10, r10
     20c:	aa 14       	cp	r10, r10
     20e:	aa 14       	cp	r10, r10
     210:	aa 14       	cp	r10, r10
     212:	aa 14       	cp	r10, r10
     214:	aa 14       	cp	r10, r10
     216:	aa 14       	cp	r10, r10
     218:	aa 14       	cp	r10, r10
     21a:	aa 14       	cp	r10, r10
     21c:	aa 14       	cp	r10, r10
     21e:	aa 14       	cp	r10, r10
     220:	aa 14       	cp	r10, r10
     222:	aa 14       	cp	r10, r10
     224:	aa 14       	cp	r10, r10
     226:	aa 14       	cp	r10, r10
     228:	aa 14       	cp	r10, r10
     22a:	aa 14       	cp	r10, r10
     22c:	aa 14       	cp	r10, r10
     22e:	aa 14       	cp	r10, r10
     230:	aa 14       	cp	r10, r10
     232:	aa 14       	cp	r10, r10
     234:	aa 14       	cp	r10, r10
     236:	aa 14       	cp	r10, r10
     238:	aa 14       	cp	r10, r10
     23a:	aa 14       	cp	r10, r10
     23c:	aa 14       	cp	r10, r10
     23e:	aa 14       	cp	r10, r10
     240:	aa 14       	cp	r10, r10
     242:	aa 14       	cp	r10, r10
     244:	aa 14       	cp	r10, r10
     246:	aa 14       	cp	r10, r10
     248:	aa 14       	cp	r10, r10
     24a:	aa 14       	cp	r10, r10
     24c:	aa 14       	cp	r10, r10
     24e:	aa 14       	cp	r10, r10
     250:	aa 14       	cp	r10, r10
     252:	aa 14       	cp	r10, r10
     254:	aa 14       	cp	r10, r10
     256:	aa 14       	cp	r10, r10
     258:	a9 14       	cp	r10, r9

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000295 <_ZZN10GsmManager11sendViaGprsEPKcE3__c>:
     295:	4d 6f 63 6b 69 6e 67 20 47 50 52 53 2d 53 65 6e     Mocking GPRS-Sen
     2a5:	64 00                                               d.

000002a7 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     2a7:	53 65 6e 64 69 6e 67 20 41 63 74 75 61 6c 20 64     Sending Actual d
     2b7:	61 74 61 20 76 69 61 20 47 50 52 53 00              ata via GPRS.

000002c4 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
     2c4:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002cf <_ZZN10GsmManager11sendViaGprsEPKcE3__c_4>:
	...

000002d0 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
	...

000002d1 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
     2d1:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

000002dc <_ZZN10GsmManager11sendViaGprsEPKcE3__c_5>:
     2dc:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002e7 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_6>:
     2e7:	47 50 52 53 20 53 74 61 74 75 73 3a 00              GPRS Status:.

000002f4 <_ZZ5setupE3__c>:
     2f4:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000300 <_ZZ5setupE3__c_0>:
     300:	42 6f 6f 74 20 43 6f 75 6e 74 20 49 73 20 4e 6f     Boot Count Is No
     310:	77 00                                               w.

00000312 <_ZZ12takeReadingsvE3__c>:
     312:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     322:	2e 2e 00                                            ...

00000325 <_ZZ8sendDatavE3__c>:
     325:	53 65 6e 64 69 6e 67 20 64 61 74 61 2e 2e 2e 00     Sending data....

00000335 <_ZZ4loopE3__c>:
     335:	42 65 68 61 76 69 6f 75 72 20 69 73 20 00           Behaviour is .

00000343 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c>:
     343:	45 45 50 52 4f 4d 20 54 65 73 74 3a 20 4c 6f 6e     EEPROM Test: Lon
     353:	67 3d 00                                            g=.

00000356 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_0>:
     356:	2c 20 49 6e 74 3d 00                                , Int=.

0000035d <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_1>:
     35d:	2c 20 53 68 6f 72 74 3d 00                          , Short=.

00000366 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_2>:
     366:	2c 20 43 68 61 72 3d 00                             , Char=.

0000036e <_ZZN12RmMemManager9printDataEvE3__c>:
     36e:	4d 6f 64 75 6c 65 20 23 00                          Module #.

00000377 <_ZZN12RmMemManager9printDataEvE3__c_0>:
     377:	23 20 42 6f 6f 74 73 00                             # Boots.

0000037f <_ZZN12RmMemManager9printDataEvE3__c_1>:
     37f:	4e 65 78 74 20 41 64 64 72 00                       Next Addr.

00000389 <_ZZ9printDataP10SensorDataE3__c>:
     389:	42 61 74 74 2d 56 00                                Batt-V.

00000390 <_ZZ9printDataP10SensorDataE3__c_0>:
     390:	50 56 2d 56 00                                      PV-V.

00000395 <_ZZ9printDataP10SensorDataE3__c_1>:
     395:	43 75 72 72 65 6e 74 00                             Current.

0000039d <_ZZ9printDataP10SensorDataE3__c_2>:
     39d:	54 65 6d 70 00                                      Temp.

000003a2 <digital_pin_to_timer_PGM>:
     3a2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3b2:	00 00 00 00                                         ....

000003b6 <digital_pin_to_bit_mask_PGM>:
     3b6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3c6:	04 08 10 20                                         ... 

000003ca <digital_pin_to_port_PGM>:
     3ca:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3da:	03 03 03 03                                         ....

000003de <port_to_input_PGM>:
     3de:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003e8 <port_to_output_PGM>:
     3e8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003f2 <port_to_mode_PGM>:
     3f2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003fc <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     3fc:	09 3c 2d 2d 2d 20 00                                .<--- .

00000403 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     403:	09 2d 2d 2d 3e 20 00                                .---> .

0000040a <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     40a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000411 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     411:	09 2d 2d 2d 3e 20 00                                .---> .

00000418 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     418:	09 3c 2d 2d 2d 20 00                                .<--- .

0000041f <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     41f:	09 2d 2d 2d 3e 20 00                                .---> .

00000426 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     426:	09 3c 2d 2d 2d 20 00                                .<--- .

0000042d <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     42d:	09 2d 2d 2d 3e 20 00                                .---> .

00000434 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     434:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

0000043c <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     43c:	53 50 41 43 45 00                                   SPACE.

00000442 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     442:	09 3c 2d 2d 2d 20 00                                .<--- .

00000449 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     449:	52 45 44 49 52 00                                   REDIR.

0000044f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     44f:	55 52 4c 00                                         URL.

00000453 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     453:	55 41 00                                            UA.

00000456 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     456:	43 49 44 00                                         CID.

0000045a <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     45a:	4c 65 6e 3a 20 00                                   Len: .

00000460 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     460:	53 74 61 74 75 73 3a 20 00                          Status: .

00000469 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     469:	43 4f 4e 54 45 4e 54 00                             CONTENT.

00000471 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     471:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

0000047d <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     47d:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

00000488 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     488:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000494 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     494:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000004a1 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     4a1:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000004ae <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     4ae:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000004bd <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     4bd:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000004c6 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     4c6:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004d3 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     4d3:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004e0 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     4e0:	09 2d 2d 2d 3e 20 00                                .---> .

000004e7 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     4e7:	22 2c 00                                            ",.

000004ea <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     4ea:	22 2c 22 00                                         ",".

000004ee <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     4ee:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004fc <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     4fc:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000050a <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     50a:	09 2d 2d 2d 3e 20 00                                .---> .

00000511 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     511:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

0000051d <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     51d:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000529 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     529:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000534 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     534:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000541 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     541:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000054c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     54c:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000554 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     554:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000055d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     55d:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

0000056a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     56a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     57a:	44 22 2c 00                                         D",.

0000057e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     57e:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     58e:	45 52 22 2c 00                                      ER",.

00000593 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     593:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000059d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     59d:	09 2d 2d 2d 3e 20 00                                .---> .

000005a4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     5a4:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000005ae <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     5ae:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     5be:	4e 22 2c 00                                         N",.

000005c2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     5c2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     5d2:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000005e0 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     5e0:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000005eb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     5eb:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000005f6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     5f6:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005fe <_ZZN13Adafruit_FONA6getGPSEhPchE3__c_0>:
     5fe:	53 49 4e 46 00                                      SINF.

00000603 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c>:
     603:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

0000060e <_ZZN13Adafruit_FONA9GPSstatusEvE3__c_0>:
     60e:	2b 43 47 4e 53 49 4e 46 3a 20 00                    +CGNSINF: .

00000619 <_ZZN13Adafruit_FONA9GPSstatusEvE3__c>:
     619:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

00000624 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     624:	3e 20 00                                            > .

00000627 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     627:	3e 20 00                                            > .

0000062a <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     62a:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

00000634 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     634:	41 54 2b 43 53 51 00                                AT+CSQ.

0000063b <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     63b:	2b 43 53 51 3a 20 00                                +CSQ: .

00000642 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     642:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000064b <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     64b:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000653 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     653:	41 54 2b 43 42 43 00                                AT+CBC.

0000065a <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     65a:	2b 43 42 43 3a 20 00                                +CBC: .

00000661 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     661:	53 49 4d 38 30 30 48 00                             SIM800H.

00000669 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     669:	09 3c 2d 2d 2d 20 00                                .<--- .

00000670 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     670:	09 2d 2d 2d 3e 20 00                                .---> .

00000677 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     677:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000687 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     687:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000697 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     697:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

000006a2 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     6a2:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

000006ad <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     6ad:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000006b8 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     6b8:	09 3c 2d 2d 2d 20 00                                .<--- .

000006bf <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     6bf:	09 2d 2d 2d 3e 20 00                                .---> .

000006c6 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     6c6:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

000006d0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     6d0:	41 54 45 30 00                                      ATE0.

000006d5 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     6d5:	41 54 45 30 00                                      ATE0.

000006da <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     6da:	41 54 00                                            AT.

000006dd <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     6dd:	41 54 00                                            AT.

000006e0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     6e0:	41 54 00                                            AT.

000006e3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     6e3:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     6f3:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     703:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     713:	2e 00                                               ..

00000715 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     715:	41 54 00                                            AT.

00000718 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     718:	41 54 00                                            AT.

0000071b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     71b:	41 54 00                                            AT.

0000071e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     71e:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     72e:	61 62 6c 65 00                                      able.

00000733 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     733:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     743:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000754 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     754:	4f 4b 00                                            OK.

00000757 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     757:	46 4f 4e 41 00                                      FONA.

0000075c <_ZZN13Adafruit_FONAC4EaE3__c>:
     75c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000764 <__ctors_start>:
     764:	29 09       	sbc	r18, r9
     766:	62 18       	sub	r6, r2
     768:	da 1b       	sub	r29, r26

0000076a <__ctors_end>:
     76a:	36 09       	sbc	r19, r6

0000076c <__dtors_end>:
     76c:	11 24       	eor	r1, r1
     76e:	1f be       	out	0x3f, r1	; 63
     770:	cf ef       	ldi	r28, 0xFF	; 255
     772:	d8 e0       	ldi	r29, 0x08	; 8
     774:	de bf       	out	0x3e, r29	; 62
     776:	cd bf       	out	0x3d, r28	; 61

00000778 <__do_copy_data>:
     778:	13 e0       	ldi	r17, 0x03	; 3
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b1 e0       	ldi	r27, 0x01	; 1
     77e:	e0 ea       	ldi	r30, 0xA0	; 160
     780:	f4 e6       	ldi	r31, 0x64	; 100
     782:	02 c0       	rjmp	.+4      	; 0x788 <__do_copy_data+0x10>
     784:	05 90       	lpm	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	aa 38       	cpi	r26, 0x8A	; 138
     78a:	b1 07       	cpc	r27, r17
     78c:	d9 f7       	brne	.-10     	; 0x784 <__do_copy_data+0xc>

0000078e <__do_clear_bss>:
     78e:	28 e0       	ldi	r18, 0x08	; 8
     790:	aa e8       	ldi	r26, 0x8A	; 138
     792:	b3 e0       	ldi	r27, 0x03	; 3
     794:	01 c0       	rjmp	.+2      	; 0x798 <.do_clear_bss_start>

00000796 <.do_clear_bss_loop>:
     796:	1d 92       	st	X+, r1

00000798 <.do_clear_bss_start>:
     798:	a1 3a       	cpi	r26, 0xA1	; 161
     79a:	b2 07       	cpc	r27, r18
     79c:	e1 f7       	brne	.-8      	; 0x796 <.do_clear_bss_loop>

0000079e <__do_global_ctors>:
     79e:	13 e0       	ldi	r17, 0x03	; 3
     7a0:	c5 eb       	ldi	r28, 0xB5	; 181
     7a2:	d3 e0       	ldi	r29, 0x03	; 3
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__do_global_ctors+0x10>
     7a6:	21 97       	sbiw	r28, 0x01	; 1
     7a8:	fe 01       	movw	r30, r28
     7aa:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <__tablejump2__>
     7ae:	c2 3b       	cpi	r28, 0xB2	; 178
     7b0:	d1 07       	cpc	r29, r17
     7b2:	c9 f7       	brne	.-14     	; 0x7a6 <__do_global_ctors+0x8>
     7b4:	0e 94 08 1c 	call	0x3810	; 0x3810 <main>
     7b8:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__do_global_dtors>

000007bc <__bad_interrupt>:
     7bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007c0 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <_ZN10GpsManagerC1Eh+0x6>
     7c6:	1f 92       	push	r1
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN13Adafruit_FONAC1Ea>
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	86 5e       	subi	r24, 0xE6	; 230
     7e2:	9e 4f       	sbci	r25, 0xFE	; 254
     7e4:	2b 81       	ldd	r18, Y+3	; 0x03
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
{
}
     7ea:	00 00       	nop
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <_ZN10GpsManagerD1Ev+0x6>
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	00 00       	nop
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     818:	00 d0       	rcall	.+0      	; 0x81a <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	7c 83       	std	Y+4, r23	; 0x04
     824:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	2b 81       	ldd	r18, Y+3	; 0x03
     82c:	3c 81       	ldd	r19, Y+4	; 0x04
     82e:	b9 01       	movw	r22, r18
     830:	0e 94 c2 18 	call	0x3184	; 0x3184 <_ZN13Adafruit_FONAaSERKS_>
}
     834:	00 00       	nop
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <_ZN10GpsManager9toggleGpsEb+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <_ZN10GpsManager9toggleGpsEb+0x8>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	9c 83       	std	Y+4, r25	; 0x04
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	9c 81       	ldd	r25, Y+4	; 0x04
     85c:	86 5e       	subi	r24, 0xE6	; 230
     85e:	9e 4f       	sbci	r25, 0xFE	; 254
     860:	fc 01       	movw	r30, r24
     862:	80 81       	ld	r24, Z
     864:	88 23       	and	r24, r24
     866:	11 f0       	breq	.+4      	; 0x86c <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	04 c0       	rjmp	.+8      	; 0x874 <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     86c:	8f e9       	ldi	r24, 0x9F	; 159
     86e:	96 e8       	ldi	r25, 0x86	; 134
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	00 d0       	rcall	.+0      	; 0x88a <_ZN10GpsManager9gpsStatusEv+0x6>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	9a 83       	std	Y+2, r25	; 0x02
     890:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     892:	00 00       	nop
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x12>
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x14>
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x16>
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	7e 83       	std	Y+6, r23	; 0x06
     8be:	6d 83       	std	Y+5, r22	; 0x05

	if (_isMock)
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	86 5e       	subi	r24, 0xE6	; 230
     8c6:	9e 4f       	sbci	r25, 0xFE	; 254
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	88 23       	and	r24, r24
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x34>
     8d0:	48 c0       	rjmp	.+144    	; 0x962 <__stack+0x63>
	{
		info.altitude = 10;
     8d2:	2d 81       	ldd	r18, Y+5	; 0x05
     8d4:	3e 81       	ldd	r19, Y+6	; 0x06
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a0 e2       	ldi	r26, 0x20	; 32
     8dc:	b1 e4       	ldi	r27, 0x41	; 65
     8de:	f9 01       	movw	r30, r18
     8e0:	82 8b       	std	Z+18, r24	; 0x12
     8e2:	93 8b       	std	Z+19, r25	; 0x13
     8e4:	a4 8b       	std	Z+20, r26	; 0x14
     8e6:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     8e8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ea:	9e 81       	ldd	r25, Y+6	; 0x06
     8ec:	46 96       	adiw	r24, 0x16	; 22
     8ee:	2f e0       	ldi	r18, 0x0F	; 15
     8f0:	eb e1       	ldi	r30, 0x1B	; 27
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	dc 01       	movw	r26, r24
     8f6:	01 90       	ld	r0, Z+
     8f8:	0d 92       	st	X+, r0
     8fa:	2a 95       	dec	r18
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x58>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     8fe:	8d 81       	ldd	r24, Y+5	; 0x05
     900:	9e 81       	ldd	r25, Y+6	; 0x06
     902:	2e e1       	ldi	r18, 0x1E	; 30
     904:	fc 01       	movw	r30, r24
     906:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     908:	2d 81       	ldd	r18, Y+5	; 0x05
     90a:	3e 81       	ldd	r19, Y+6	; 0x06
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a0 e2       	ldi	r26, 0x20	; 32
     912:	b2 e4       	ldi	r27, 0x42	; 66
     914:	f9 01       	movw	r30, r18
     916:	86 87       	std	Z+14, r24	; 0x0e
     918:	97 87       	std	Z+15, r25	; 0x0f
     91a:	a0 8b       	std	Z+16, r26	; 0x10
     91c:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     91e:	2d 81       	ldd	r18, Y+5	; 0x05
     920:	3e 81       	ldd	r19, Y+6	; 0x06
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a8 e4       	ldi	r26, 0x48	; 72
     928:	b2 e4       	ldi	r27, 0x42	; 66
     92a:	f9 01       	movw	r30, r18
     92c:	82 83       	std	Z+2, r24	; 0x02
     92e:	93 83       	std	Z+3, r25	; 0x03
     930:	a4 83       	std	Z+4, r26	; 0x04
     932:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     934:	2d 81       	ldd	r18, Y+5	; 0x05
     936:	3e 81       	ldd	r19, Y+6	; 0x06
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e7       	ldi	r26, 0x70	; 112
     93e:	b2 e4       	ldi	r27, 0x42	; 66
     940:	f9 01       	movw	r30, r18
     942:	86 83       	std	Z+6, r24	; 0x06
     944:	97 83       	std	Z+7, r25	; 0x07
     946:	a0 87       	std	Z+8, r26	; 0x08
     948:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     94a:	2d 81       	ldd	r18, Y+5	; 0x05
     94c:	3e 81       	ldd	r19, Y+6	; 0x06
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	ac e8       	ldi	r26, 0x8C	; 140
     954:	b2 e4       	ldi	r27, 0x42	; 66
     956:	f9 01       	movw	r30, r18
     958:	82 87       	std	Z+10, r24	; 0x0a
     95a:	93 87       	std	Z+11, r25	; 0x0b
     95c:	a4 87       	std	Z+12, r26	; 0x0c
     95e:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     960:	42 c0       	rjmp	.+132    	; 0x9e6 <__stack+0xe7>
	}

	int8_t gpsStatus = fona.GPSstatus();
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	0e 94 22 22 	call	0x4444	; 0x4444 <_ZN13Adafruit_FONA9GPSstatusEv>
     96a:	89 83       	std	Y+1, r24	; 0x01
	
	//Store the status regardless
	info.gpsStatus = gpsStatus;
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	9e 81       	ldd	r25, Y+6	; 0x06
     970:	29 81       	ldd	r18, Y+1	; 0x01
     972:	fc 01       	movw	r30, r24
     974:	21 83       	std	Z+1, r18	; 0x01
	
	// we need at least a 2D fix
	if (gpsStatus < 2) {
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	34 f4       	brge	.+12     	; 0x988 <__stack+0x89>
		info.errorCode = ERR_GPS_NO_FIX;
     97c:	8d 81       	ldd	r24, Y+5	; 0x05
     97e:	9e 81       	ldd	r25, Y+6	; 0x06
     980:	2a e0       	ldi	r18, 0x0A	; 10
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
		return;
     986:	2f c0       	rjmp	.+94     	; 0x9e6 <__stack+0xe7>
	}

	//We know the date won't be >20 from it's format
	boolean success = fona.getGPS(&info.lat, &info.lon, 
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	9e 81       	ldd	r25, Y+6	; 0x06
     98c:	8c 01       	movw	r16, r24
     98e:	0a 5e       	subi	r16, 0xEA	; 234
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	8d 81       	ldd	r24, Y+5	; 0x05
     994:	9e 81       	ldd	r25, Y+6	; 0x06
     996:	dc 01       	movw	r26, r24
     998:	52 96       	adiw	r26, 0x12	; 18
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	9e 81       	ldd	r25, Y+6	; 0x06
     99e:	fc 01       	movw	r30, r24
     9a0:	3e 96       	adiw	r30, 0x0e	; 14
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	9c 01       	movw	r18, r24
     9a8:	26 5f       	subi	r18, 0xF6	; 246
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	9e 81       	ldd	r25, Y+6	; 0x06
     9b0:	ac 01       	movw	r20, r24
     9b2:	4a 5f       	subi	r20, 0xFA	; 250
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	8d 81       	ldd	r24, Y+5	; 0x05
     9b8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ba:	bc 01       	movw	r22, r24
     9bc:	6e 5f       	subi	r22, 0xFE	; 254
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
		&info.speed_kph, &info.heading, &info.altitude, (char*)info.date);
     9c4:	68 01       	movw	r12, r16
     9c6:	7d 01       	movw	r14, r26
     9c8:	8f 01       	movw	r16, r30
     9ca:	0e 94 96 22 	call	0x452c	; 0x452c <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>
     9ce:	8a 83       	std	Y+2, r24	; 0x02

	// make sure we have a response
	if (!success){
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	89 27       	eor	r24, r25
     9d6:	88 23       	and	r24, r24
     9d8:	31 f0       	breq	.+12     	; 0x9e6 <__stack+0xe7>
		info.errorCode = ERR_GPS_BAD_FIELD;
     9da:	8d 81       	ldd	r24, Y+5	; 0x05
     9dc:	9e 81       	ldd	r25, Y+6	; 0x06
     9de:	2c e0       	ldi	r18, 0x0C	; 12
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
		return;
     9e4:	00 00       	nop
	}
}
     9e6:	26 96       	adiw	r28, 0x06	; 6
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	08 95       	ret

00000a04 <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	00 d0       	rcall	.+0      	; 0xa0a <_ZN10GsmManagerC1Eh+0x6>
     a0a:	1f 92       	push	r1
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	9a 83       	std	Y+2, r25	; 0x02
     a12:	89 83       	std	Y+1, r24	; 0x01
     a14:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	2b 81       	ldd	r18, Y+3	; 0x03
     a1c:	fc 01       	movw	r30, r24
     a1e:	24 83       	std	Z+4, r18	; 0x04
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	05 96       	adiw	r24, 0x05	; 5
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN13Adafruit_FONAC1Ea>
{
}
     a2c:	00 00       	nop
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <_ZN10GsmManagerD1Ev+0x6>
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	9a 83       	std	Y+2, r25	; 0x02
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	00 00       	nop
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	00 d0       	rcall	.+0      	; 0xa5a <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	7c 83       	std	Y+4, r23	; 0x04
     a66:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	9a 81       	ldd	r25, Y+2	; 0x02
     a6c:	05 96       	adiw	r24, 0x05	; 5
     a6e:	2b 81       	ldd	r18, Y+3	; 0x03
     a70:	3c 81       	ldd	r19, Y+4	; 0x04
     a72:	b9 01       	movw	r22, r18
     a74:	0e 94 c2 18 	call	0x3184	; 0x3184 <_ZN13Adafruit_FONAaSERKS_>
}
     a78:	00 00       	nop
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <_ZN10GsmManager5resetEv+0x6>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	fc 01       	movw	r30, r24
     a9c:	11 82       	std	Z+1, r1	; 0x01
     a9e:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	fc 01       	movw	r30, r24
     aa6:	13 82       	std	Z+3, r1	; 0x03
     aa8:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     aaa:	00 00       	nop
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <_ZN10GsmManager5beginEv+0xa>
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	fc 01       	movw	r30, r24
     ace:	94 81       	ldd	r25, Z+4	; 0x04
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	99 23       	and	r25, r25
     ad4:	09 f4       	brne	.+2      	; 0xad8 <_ZN10GsmManager5beginEv+0x22>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	88 23       	and	r24, r24
     ada:	11 f0       	breq	.+4      	; 0xae0 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	2d c0       	rjmp	.+90     	; 0xb3a <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     ae0:	8f e1       	ldi	r24, 0x1F	; 31
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 17 1c 	call	0x382e	; 0x382e <_Znwj>
     ae8:	8c 01       	movw	r16, r24
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	42 e0       	ldi	r20, 0x02	; 2
     aee:	63 e0       	ldi	r22, 0x03	; 3
     af0:	c8 01       	movw	r24, r16
     af2:	0e 94 0e 2c 	call	0x581c	; 0x581c <_ZN14SoftwareSerialC1Ehhb>
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	81 5e       	subi	r24, 0xE1	; 225
     afc:	9e 4f       	sbci	r25, 0xFE	; 254
     afe:	fc 01       	movw	r30, r24
     b00:	11 83       	std	Z+1, r17	; 0x01
     b02:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	81 5e       	subi	r24, 0xE1	; 225
     b0a:	9e 4f       	sbci	r25, 0xFE	; 254
     b0c:	fc 01       	movw	r30, r24
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	40 ec       	ldi	r20, 0xC0	; 192
     b14:	52 e1       	ldi	r21, 0x12	; 18
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	0e 94 39 2c 	call	0x5872	; 0x5872 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	81 5e       	subi	r24, 0xE1	; 225
     b24:	9e 4f       	sbci	r25, 0xFE	; 254
     b26:	fc 01       	movw	r30, r24
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	9c 01       	movw	r18, r24
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	05 96       	adiw	r24, 0x05	; 5
     b34:	b9 01       	movw	r22, r18
     b36:	0e 94 3b 24 	call	0x4876	; 0x4876 <_ZN13Adafruit_FONA5beginER6Stream>
}
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <_ZN10GsmManager14getBattPercentEPj+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <_ZN10GsmManager14getBattPercentEPj+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	7c 83       	std	Y+4, r23	; 0x04
     b5a:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	fc 01       	movw	r30, r24
     b62:	94 81       	ldd	r25, Z+4	; 0x04
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	99 23       	and	r25, r25
     b68:	09 f4       	brne	.+2      	; 0xb6c <_ZN10GsmManager14getBattPercentEPj+0x24>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	88 23       	and	r24, r24
     b6e:	49 f0       	breq	.+18     	; 0xb82 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	23 e6       	ldi	r18, 0x63	; 99
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	fc 01       	movw	r30, r24
     b7a:	31 83       	std	Z+1, r19	; 0x01
     b7c:	20 83       	st	Z, r18
		return true;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	05 96       	adiw	r24, 0x05	; 5
     b88:	2b 81       	ldd	r18, Y+3	; 0x03
     b8a:	3c 81       	ldd	r19, Y+4	; 0x04
     b8c:	b9 01       	movw	r22, r18
     b8e:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	69 97       	sbiw	r28, 0x19	; 25
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	9f 8b       	std	Y+23, r25	; 0x17
     bb6:	8e 8b       	std	Y+22, r24	; 0x16
     bb8:	79 8f       	std	Y+25, r23	; 0x19
     bba:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     bbc:	8e 89       	ldd	r24, Y+22	; 0x16
     bbe:	9f 89       	ldd	r25, Y+23	; 0x17
     bc0:	fc 01       	movw	r30, r24
     bc2:	94 81       	ldd	r25, Z+4	; 0x04
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	99 23       	and	r25, r25
     bc8:	09 f4       	brne	.+2      	; 0xbcc <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	88 23       	and	r24, r24
     bce:	11 f0       	breq	.+4      	; 0xbd4 <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	26 c0       	rjmp	.+76     	; 0xc20 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     bd4:	2e e0       	ldi	r18, 0x0E	; 14
     bd6:	e8 e3       	ldi	r30, 0x38	; 56
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	dc 01       	movw	r26, r24
     be0:	01 90       	ld	r0, Z+
     be2:	0d 92       	st	X+, r0
     be4:	2a 95       	dec	r18
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     be8:	27 e0       	ldi	r18, 0x07	; 7
     bea:	ce 01       	movw	r24, r28
     bec:	0f 96       	adiw	r24, 0x0f	; 15
     bee:	fc 01       	movw	r30, r24
     bf0:	32 2f       	mov	r19, r18
     bf2:	11 92       	st	Z+, r1
     bf4:	3a 95       	dec	r19
     bf6:	e9 f7       	brne	.-6      	; 0xbf2 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     bf8:	8e 89       	ldd	r24, Y+22	; 0x16
     bfa:	9f 89       	ldd	r25, Y+23	; 0x17
     bfc:	05 96       	adiw	r24, 0x05	; 5
     bfe:	28 8d       	ldd	r18, Y+24	; 0x18
     c00:	39 8d       	ldd	r19, Y+25	; 0x19
     c02:	a9 01       	movw	r20, r18
     c04:	9e 01       	movw	r18, r28
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	b9 01       	movw	r22, r18
     c0c:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     c10:	98 2f       	mov	r25, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	89 27       	eor	r24, r25
     c16:	88 23       	and	r24, r24
     c18:	11 f0       	breq	.+4      	; 0xc1e <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c20:	69 96       	adiw	r28, 0x19	; 25
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	7c 83       	std	Y+4, r23	; 0x04
     c44:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus();
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN10GsmManager16getNetworkStatusEv>
     c4e:	28 2f       	mov	r18, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	fc 01       	movw	r30, r24
     c56:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN10GsmManager7getRSSIEv>
     c60:	28 2f       	mov	r18, r24
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	fc 01       	movw	r30, r24
     c68:	21 83       	std	Z+1, r18	; 0x01
}
     c6a:	00 00       	nop
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	fc 01       	movw	r30, r24
     c8e:	94 81       	ldd	r25, Z+4	; 0x04
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	99 23       	and	r25, r25
     c94:	09 f4       	brne	.+2      	; 0xc98 <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	88 23       	and	r24, r24
     c9a:	11 f0       	breq	.+4      	; 0xca0 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	05 96       	adiw	r24, 0x05	; 5
     ca6:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	00 d0       	rcall	.+0      	; 0xcba <_ZN10GsmManager7getRSSIEv+0x6>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	fc 01       	movw	r30, r24
     cc8:	94 81       	ldd	r25, Z+4	; 0x04
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	99 23       	and	r25, r25
     cce:	09 f4       	brne	.+2      	; 0xcd2 <_ZN10GsmManager7getRSSIEv+0x1e>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	88 23       	and	r24, r24
     cd4:	11 f0       	breq	.+4      	; 0xcda <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     cd6:	85 e1       	ldi	r24, 0x15	; 21
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	05 96       	adiw	r24, 0x05	; 5
     ce0:	0e 94 43 2a 	call	0x5486	; 0x5486 <_ZN13Adafruit_FONA7getRSSIEv>
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <_ZN10GsmManager10enableGPRSEb+0x6>
     cf4:	1f 92       	push	r1
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	05 96       	adiw	r24, 0x05	; 5
     d06:	6b 81       	ldd	r22, Y+3	; 0x03
     d08:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	2e 97       	sbiw	r28, 0x0e	; 14
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	9c 87       	std	Y+12, r25	; 0x0c
     d3a:	8b 87       	std	Y+11, r24	; 0x0b
     d3c:	7e 87       	std	Y+14, r23	; 0x0e
     d3e:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     d40:	8b 85       	ldd	r24, Y+11	; 0x0b
     d42:	9c 85       	ldd	r25, Y+12	; 0x0c
     d44:	fc 01       	movw	r30, r24
     d46:	94 81       	ldd	r25, Z+4	; 0x04
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	99 23       	and	r25, r25
     d4c:	09 f4       	brne	.+2      	; 0xd50 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	88 23       	and	r24, r24
     d52:	b9 f0       	breq	.+46     	; 0xd82 <_ZN10GsmManager11sendViaGprsEPKc+0x6a>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
     d54:	85 e9       	ldi	r24, 0x95	; 149
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	bc 01       	movw	r22, r24
     d5a:	81 eb       	ldi	r24, 0xB1	; 177
     d5c:	97 e0       	ldi	r25, 0x07	; 7
     d5e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
     d62:	6d e4       	ldi	r22, 0x4D	; 77
     d64:	71 e0       	ldi	r23, 0x01	; 1
     d66:	81 eb       	ldi	r24, 0xB1	; 177
     d68:	97 e0       	ldi	r25, 0x07	; 7
     d6a:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
     d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d70:	9e 85       	ldd	r25, Y+14	; 0x0e
     d72:	bc 01       	movw	r22, r24
     d74:	81 eb       	ldi	r24, 0xB1	; 177
     d76:	97 e0       	ldi	r25, 0x07	; 7
     d78:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	c3 c0       	rjmp	.+390    	; 0xf08 <_ZN10GsmManager11sendViaGprsEPKc+0x1f0>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);
     d82:	87 ea       	ldi	r24, 0xA7	; 167
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	bc 01       	movw	r22, r24
     d88:	81 eb       	ldi	r24, 0xB1	; 177
     d8a:	97 e0       	ldi	r25, 0x07	; 7
     d8c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
     d90:	6d e4       	ldi	r22, 0x4D	; 77
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	81 eb       	ldi	r24, 0xB1	; 177
     d96:	97 e0       	ldi	r25, 0x07	; 7
     d98:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
     d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     da0:	bc 01       	movw	r22, r24
     da2:	81 eb       	ldi	r24, 0xB1	; 177
     da4:	97 e0       	ldi	r25, 0x07	; 7
     da6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>

	uint16_t ret = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/r.php"; //TODO: check should not require https!
     db2:	8f e4       	ldi	r24, 0x4F	; 79
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	9d 83       	std	Y+5, r25	; 0x05
     db8:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     dba:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	0e 94 1f 30 	call	0x603e	; 0x603e <strlen>
     dc2:	8c 01       	movw	r16, r24
     dc4:	44 ec       	ldi	r20, 0xC4	; 196
     dc6:	52 e0       	ldi	r21, 0x02	; 2
     dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dca:	9c 85       	ldd	r25, Y+12	; 0x0c
     dcc:	05 96       	adiw	r24, 0x05	; 5
     dce:	de 01       	movw	r26, r28
     dd0:	19 96       	adiw	r26, 0x09	; 9
     dd2:	fe 01       	movw	r30, r28
     dd4:	37 96       	adiw	r30, 0x07	; 7
     dd6:	2d 85       	ldd	r18, Y+13	; 0x0d
     dd8:	3e 85       	ldd	r19, Y+14	; 0x0e
     dda:	6c 81       	ldd	r22, Y+4	; 0x04
     ddc:	7d 81       	ldd	r23, Y+5	; 0x05
     dde:	6d 01       	movw	r12, r26
     de0:	7f 01       	movw	r14, r30
     de2:	0e 94 4c 29 	call	0x5298	; 0x5298 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     de6:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 27       	eor	r24, r25
     dee:	88 23       	and	r24, r24
     df0:	11 f1       	breq	.+68     	; 0xe36 <_ZN10GsmManager11sendViaGprsEPKc+0x11e>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     df2:	2f ec       	ldi	r18, 0xCF	; 207
     df4:	32 e0       	ldi	r19, 0x02	; 2
     df6:	40 ed       	ldi	r20, 0xD0	; 208
     df8:	52 e0       	ldi	r21, 0x02	; 2
     dfa:	61 ed       	ldi	r22, 0xD1	; 209
     dfc:	72 e0       	ldi	r23, 0x02	; 2
     dfe:	8b 85       	ldd	r24, Y+11	; 0x0b
     e00:	9c 85       	ldd	r25, Y+12	; 0x0c
     e02:	05 96       	adiw	r24, 0x05	; 5
     e04:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     e08:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0c:	0e 94 1f 30 	call	0x603e	; 0x603e <strlen>
     e10:	8c 01       	movw	r16, r24
     e12:	4c ed       	ldi	r20, 0xDC	; 220
     e14:	52 e0       	ldi	r21, 0x02	; 2
     e16:	8b 85       	ldd	r24, Y+11	; 0x0b
     e18:	9c 85       	ldd	r25, Y+12	; 0x0c
     e1a:	05 96       	adiw	r24, 0x05	; 5
     e1c:	de 01       	movw	r26, r28
     e1e:	19 96       	adiw	r26, 0x09	; 9
     e20:	fe 01       	movw	r30, r28
     e22:	37 96       	adiw	r30, 0x07	; 7
     e24:	2d 85       	ldd	r18, Y+13	; 0x0d
     e26:	3e 85       	ldd	r19, Y+14	; 0x0e
     e28:	6c 81       	ldd	r22, Y+4	; 0x04
     e2a:	7d 81       	ldd	r23, Y+5	; 0x05
     e2c:	6d 01       	movw	r12, r26
     e2e:	7f 01       	movw	r14, r30
     e30:	0e 94 4c 29 	call	0x5298	; 0x5298 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     e34:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 27       	eor	r24, r25
     e3c:	88 23       	and	r24, r24
     e3e:	29 f0       	breq	.+10     	; 0xe4a <_ZN10GsmManager11sendViaGprsEPKc+0x132>
	{
		ret = 999;
     e40:	87 ee       	ldi	r24, 0xE7	; 231
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	5d c0       	rjmp	.+186    	; 0xf04 <_ZN10GsmManager11sendViaGprsEPKc+0x1ec>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
     e4a:	87 ee       	ldi	r24, 0xE7	; 231
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	bc 01       	movw	r22, r24
     e50:	81 eb       	ldi	r24, 0xB1	; 177
     e52:	97 e0       	ldi	r25, 0x07	; 7
     e54:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
     e58:	6d e4       	ldi	r22, 0x4D	; 77
     e5a:	71 e0       	ldi	r23, 0x01	; 1
     e5c:	81 eb       	ldi	r24, 0xB1	; 177
     e5e:	97 e0       	ldi	r25, 0x07	; 7
     e60:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
     e64:	8f 81       	ldd	r24, Y+7	; 0x07
     e66:	98 85       	ldd	r25, Y+8	; 0x08
     e68:	4a e0       	ldi	r20, 0x0A	; 10
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	bc 01       	movw	r22, r24
     e6e:	81 eb       	ldi	r24, 0xB1	; 177
     e70:	97 e0       	ldi	r25, 0x07	; 7
     e72:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
			                                                      
		while (length > 0) {
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	18 16       	cp	r1, r24
     e7c:	19 06       	cpc	r1, r25
     e7e:	8c f5       	brge	.+98     	; 0xee2 <_ZN10GsmManager11sendViaGprsEPKc+0x1ca>
			while (fona.available()) {
     e80:	8b 85       	ldd	r24, Y+11	; 0x0b
     e82:	9c 85       	ldd	r25, Y+12	; 0x0c
     e84:	05 96       	adiw	r24, 0x05	; 5
     e86:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <_ZN13Adafruit_FONA9availableEv>
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	89 2b       	or	r24, r25
     e8e:	09 f4       	brne	.+2      	; 0xe92 <_ZN10GsmManager11sendViaGprsEPKc+0x17a>
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	22 23       	and	r18, r18
     e94:	81 f3       	breq	.-32     	; 0xe76 <_ZN10GsmManager11sendViaGprsEPKc+0x15e>
				char c = fona.read();
     e96:	8b 85       	ldd	r24, Y+11	; 0x0b
     e98:	9c 85       	ldd	r25, Y+12	; 0x0c
     e9a:	05 96       	adiw	r24, 0x05	; 5
     e9c:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_ZN13Adafruit_FONA4readEv>
     ea0:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     ea2:	80 ec       	ldi	r24, 0xC0	; 192
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	80 72       	andi	r24, 0x20	; 32
     eb0:	99 27       	eor	r25, r25
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	89 2b       	or	r24, r25
     eb6:	09 f0       	breq	.+2      	; 0xeba <_ZN10GsmManager11sendViaGprsEPKc+0x1a2>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	22 23       	and	r18, r18
     ebc:	09 f0       	breq	.+2      	; 0xec0 <_ZN10GsmManager11sendViaGprsEPKc+0x1a8>
     ebe:	f1 cf       	rjmp	.-30     	; 0xea2 <_ZN10GsmManager11sendViaGprsEPKc+0x18a>
				UDR0 = c;
     ec0:	86 ec       	ldi	r24, 0xC6	; 198
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	2e 81       	ldd	r18, Y+6	; 0x06
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
					                                                      
				length--;
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	9a 87       	std	Y+10, r25	; 0x0a
     ed2:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	89 2b       	or	r24, r25
     eda:	09 f0       	breq	.+2      	; 0xede <_ZN10GsmManager11sendViaGprsEPKc+0x1c6>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     edc:	d1 cf       	rjmp	.-94     	; 0xe80 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     ede:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     ee0:	ca cf       	rjmp	.-108    	; 0xe76 <_ZN10GsmManager11sendViaGprsEPKc+0x15e>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ee6:	05 96       	adiw	r24, 0x05	; 5
     ee8:	0e 94 d5 25 	call	0x4baa	; 0x4baa <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	98 85       	ldd	r25, Y+8	; 0x08
     ef0:	88 3c       	cpi	r24, 0xC8	; 200
     ef2:	91 05       	cpc	r25, r1
     ef4:	19 f0       	breq	.+6      	; 0xefc <_ZN10GsmManager11sendViaGprsEPKc+0x1e4>
     ef6:	8f 81       	ldd	r24, Y+7	; 0x07
     ef8:	98 85       	ldd	r25, Y+8	; 0x08
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <_ZN10GsmManager11sendViaGprsEPKc+0x1e8>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f08:	2e 96       	adiw	r28, 0x0e	; 14
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret

00000f26 <setup>:
void printData();
void initSubsystems();

uint8_t _behaviour = SYS_BEHAVIOUR::DoNothing;

void setup() {
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <setup+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);


	//Must immediately run as this pin in LOW switches off the system
	pinMode(PIN_SHUTDOWN, OUTPUT);
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <pinMode>
	digitalWrite(PIN_SHUTDOWN, HIGH);
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	85 e0       	ldi	r24, 0x05	; 5
     f3c:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>

	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
     f40:	68 eb       	ldi	r22, 0xB8	; 184
     f42:	7b e0       	ldi	r23, 0x0B	; 11
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
	
	//Turn off redundant Arduino board notification LED controlled by pin 13
	pinMode(13, OUTPUT);
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <pinMode>
	
	#ifdef OUTPUT_DEBUG
		Serial.begin(9600); //Writes to Serial output
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	55 e2       	ldi	r21, 0x25	; 37
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	81 eb       	ldi	r24, 0xB1	; 177
     f5e:	97 e0       	ldi	r25, 0x07	; 7
     f60:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN14HardwareSerial5beginEm>
	#endif
	
	RM_LOGLN(F("Starting..."));
     f64:	84 ef       	ldi	r24, 0xF4	; 244
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	bc 01       	movw	r22, r24
     f6a:	81 eb       	ldi	r24, 0xB1	; 177
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	initSubsystems();
     f72:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_Z14initSubsystemsv>
	uint16_t currBootCount;
	if (INITIALISE_MODULE_ID) {
		initModule(INITIALISE_MODULE_ID);
		currBootCount = 0;
	} else {
		currBootCount = mem.incrementBootCount();
     f76:	84 ea       	ldi	r24, 0xA4	; 164
     f78:	94 e0       	ldi	r25, 0x04	; 4
     f7a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN12RmMemManager18incrementBootCountEv>
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
	}
	
	RM_LOG2(F("Boot Count Is Now"), currBootCount);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	bc 01       	movw	r22, r24
     f88:	81 eb       	ldi	r24, 0xB1	; 177
     f8a:	97 e0       	ldi	r25, 0x07	; 7
     f8c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
     f90:	6e e7       	ldi	r22, 0x7E	; 126
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	81 eb       	ldi	r24, 0xB1	; 177
     f96:	97 e0       	ldi	r25, 0x07	; 7
     f98:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	4a e0       	ldi	r20, 0x0A	; 10
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	bc 01       	movw	r22, r24
     fa6:	81 eb       	ldi	r24, 0xB1	; 177
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
		mem.printData();
		return;
	}
	
	//Take reading every 5 hours so it's a scattered time reading throughout the week
	_behaviour |= SYS_BEHAVIOUR::TakeReadings;
     fae:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <_behaviour>
	
	//Send to HQ every 20 hours
	if (currBootCount > 0 && currBootCount%4 == 0) { //TODO: Overflow?
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	89 2b       	or	r24, r25
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <setup+0xb0>
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	83 70       	andi	r24, 0x03	; 3
     fc6:	99 27       	eor	r25, r25
     fc8:	89 2b       	or	r24, r25
     fca:	29 f4       	brne	.+10     	; 0xfd6 <setup+0xb0>
		
		_behaviour |= SYS_BEHAVIOUR::SendData;
     fcc:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
     fd0:	82 60       	ori	r24, 0x02	; 2
     fd2:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <_behaviour>
	}
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <_Z14initSubsystemsv>:

void initSubsystems() {
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62

	gps.setFona(fona);
     fe8:	6a e8       	ldi	r22, 0x8A	; 138
     fea:	73 e0       	ldi	r23, 0x03	; 3
     fec:	85 ea       	ldi	r24, 0xA5	; 165
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	0e 94 09 04 	call	0x812	; 0x812 <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
     ff4:	6a e8       	ldi	r22, 0x8A	; 138
     ff6:	73 e0       	ldi	r23, 0x03	; 3
     ff8:	80 ec       	ldi	r24, 0xC0	; 192
     ffa:	95 e0       	ldi	r25, 0x05	; 5
     ffc:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (!gsm.begin()) {
    1000:	80 ec       	ldi	r24, 0xC0	; 192
    1002:	95 e0       	ldi	r25, 0x05	; 5
    1004:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10GsmManager5beginEv>
    1008:	98 2f       	mov	r25, r24
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 27       	eor	r24, r25
    100e:	88 23       	and	r24, r24
    1010:	31 f4       	brne	.+12     	; 0x101e <_Z14initSubsystemsv+0x3e>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)){
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	85 ea       	ldi	r24, 0xA5	; 165
    1016:	94 e0       	ldi	r25, 0x04	; 4
    1018:	0e 94 22 04 	call	0x844	; 0x844 <_ZN10GpsManager9toggleGpsEb>
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <_Z14initSubsystemsv+0x40>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
    101e:	00 00       	nop
	if (!gps.toggleGps(true)){
	
		//TODO: store in ROM
		return;
	}
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_Z10initModuleh>:

void initModule(uint8_t moduleId) {
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	1f 92       	push	r1
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
	
	mem.initialiseModule(moduleId);
    1032:	69 81       	ldd	r22, Y+1	; 0x01
    1034:	84 ea       	ldi	r24, 0xA4	; 164
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN12RmMemManager16initialiseModuleEh>

	RM_LOG2("Initialised with id ", moduleId);
    103c:	60 e8       	ldi	r22, 0x80	; 128
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	81 eb       	ldi	r24, 0xB1	; 177
    1042:	97 e0       	ldi	r25, 0x07	; 7
    1044:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1048:	6e e7       	ldi	r22, 0x7E	; 126
    104a:	71 e0       	ldi	r23, 0x01	; 1
    104c:	81 eb       	ldi	r24, 0xB1	; 177
    104e:	97 e0       	ldi	r25, 0x07	; 7
    1050:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1054:	4a e0       	ldi	r20, 0x0A	; 10
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	69 81       	ldd	r22, Y+1	; 0x01
    105a:	81 eb       	ldi	r24, 0xB1	; 177
    105c:	97 e0       	ldi	r25, 0x07	; 7
    105e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <_ZN5Print7printlnEhi>
}
    1062:	00 00       	nop
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <_Z15switchOffSystemv>:

void switchOffSystem() {
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN("Switching off...");
    1074:	65 e9       	ldi	r22, 0x95	; 149
    1076:	71 e0       	ldi	r23, 0x01	; 1
    1078:	81 eb       	ldi	r24, 0xB1	; 177
    107a:	97 e0       	ldi	r25, 0x07	; 7
    107c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
	
	digitalWrite(PIN_SHUTDOWN, LOW);
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	85 e0       	ldi	r24, 0x05	; 5
    1084:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
	
	delay(3000); //To allow serial to purge the shutdown message
    1088:	68 eb       	ldi	r22, 0xB8	; 184
    108a:	7b e0       	ldi	r23, 0x0B	; 11
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
}
    1094:	00 00       	nop
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite) {
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	1f 92       	push	r1
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
	//
	////gsm.sendViaSms(sm.c_str()); //TO: local number !
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
    10a8:	00 00       	nop
    10aa:	0f 90       	pop	r0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <_Z12takeReadingsv>:

boolean takeReadings() {
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	2a 97       	sbiw	r28, 0x0a	; 10
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    10c6:	82 e1       	ldi	r24, 0x12	; 18
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	bc 01       	movw	r22, r24
    10cc:	81 eb       	ldi	r24, 0xB1	; 177
    10ce:	97 e0       	ldi	r25, 0x07	; 7
    10d0:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd = sensorMgr.readData();
    10d4:	61 ee       	ldi	r22, 0xE1	; 225
    10d6:	76 e0       	ldi	r23, 0x06	; 6
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN13SensorManager8readDataEv>
	
	return true;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
}
    10e2:	2a 96       	adiw	r28, 0x0a	; 10
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <_Z8sendDatav>:

boolean sendData() {
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN(F("Sending data..."));
    10fc:	85 e2       	ldi	r24, 0x25	; 37
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	bc 01       	movw	r22, r24
    1102:	81 eb       	ldi	r24, 0xB1	; 177
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	return false;
    110a:	80 e0       	ldi	r24, 0x00	; 0
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62

	delay(1000);
    111a:	68 ee       	ldi	r22, 0xE8	; 232
    111c:	73 e0       	ldi	r23, 0x03	; 3
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
	++_timerCounter;
    1126:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <_timerCounter>
    112a:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <_timerCounter+0x1>
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <_timerCounter+0x1>
    1134:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <_timerCounter>

	RM_LOG2(F("Behaviour is "), _behaviour);
    1138:	85 e3       	ldi	r24, 0x35	; 53
    113a:	93 e0       	ldi	r25, 0x03	; 3
    113c:	bc 01       	movw	r22, r24
    113e:	81 eb       	ldi	r24, 0xB1	; 177
    1140:	97 e0       	ldi	r25, 0x07	; 7
    1142:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    1146:	6e e7       	ldi	r22, 0x7E	; 126
    1148:	71 e0       	ldi	r23, 0x01	; 1
    114a:	81 eb       	ldi	r24, 0xB1	; 177
    114c:	97 e0       	ldi	r25, 0x07	; 7
    114e:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1152:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
    1156:	4a e0       	ldi	r20, 0x0A	; 10
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	68 2f       	mov	r22, r24
    115c:	81 eb       	ldi	r24, 0xB1	; 177
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1164:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	99 27       	eor	r25, r25
    1170:	89 2b       	or	r24, r25
    1172:	49 f0       	breq	.+18     	; 0x1186 <loop+0x74>
		
		if (takeReadings())
    1174:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_Z12takeReadingsv>
    1178:	88 23       	and	r24, r24
    117a:	29 f0       	breq	.+10     	; 0x1186 <loop+0x74>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    117c:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
    1180:	8e 7f       	andi	r24, 0xFE	; 254
    1182:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1186:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	82 70       	andi	r24, 0x02	; 2
    1190:	99 27       	eor	r25, r25
    1192:	89 2b       	or	r24, r25
    1194:	49 f0       	breq	.+18     	; 0x11a8 <loop+0x96>
		
		if (sendData())
    1196:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_Z8sendDatav>
    119a:	88 23       	and	r24, r24
    119c:	29 f0       	breq	.+10     	; 0x11a8 <loop+0x96>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    119e:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
    11a2:	8d 7f       	andi	r24, 0xFD	; 253
    11a4:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    11a8:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_behaviour>
    11ac:	88 23       	and	r24, r24
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <loop+0xa2>
		
		switchOffSystem();
    11b0:	0e 94 36 08 	call	0x106c	; 0x106c <_Z15switchOffSystemv>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    11b4:	00 00       	nop
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <_Z16readWriteSignalsv>:

/************************************************************************/
/*                    Bulk read/write signals test                      */
/************************************************************************/

void readWriteSignals(){
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	
	
}
    11c4:	00 00       	nop
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <_Z41__static_initialization_and_destruction_0ii>:
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	7c 83       	std	Y+4, r23	; 0x04
    11de:	6b 83       	std	Y+3, r22	; 0x03
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	e9 f4       	brne	.+58     	; 0x1222 <_Z41__static_initialization_and_destruction_0ii+0x56>
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	c9 f4       	brne	.+50     	; 0x1222 <_Z41__static_initialization_and_destruction_0ii+0x56>
#include "RmMemManager.h"
#include "SensorManager.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    11f0:	64 e0       	ldi	r22, 0x04	; 4
    11f2:	8a e8       	ldi	r24, 0x8A	; 138
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN13Adafruit_FONAC1Ea>
RmMemManager mem(false);
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	84 ea       	ldi	r24, 0xA4	; 164
    11fe:	94 e0       	ldi	r25, 0x04	; 4
    1200:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN12RmMemManagerC1Eb>
GpsManager gps(IS_GPS_MOCK);
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	85 ea       	ldi	r24, 0xA5	; 165
    1208:	94 e0       	ldi	r25, 0x04	; 4
    120a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN10GpsManagerC1Eh>
GsmManager gsm(IS_GSM_MOCK);
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	80 ec       	ldi	r24, 0xC0	; 192
    1212:	95 e0       	ldi	r25, 0x05	; 5
    1214:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN10GsmManagerC1Eh>
SensorManager sensorMgr(true);
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	81 ee       	ldi	r24, 0xE1	; 225
    121c:	96 e0       	ldi	r25, 0x06	; 6
    121e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN13SensorManagerC1Eb>
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	89 2b       	or	r24, r25
    1228:	61 f4       	brne	.+24     	; 0x1242 <_Z41__static_initialization_and_destruction_0ii+0x76>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	41 f4       	brne	.+16     	; 0x1242 <_Z41__static_initialization_and_destruction_0ii+0x76>

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem(false);
GpsManager gps(IS_GPS_MOCK);
GsmManager gsm(IS_GSM_MOCK);
    1232:	80 ec       	ldi	r24, 0xC0	; 192
    1234:	95 e0       	ldi	r25, 0x05	; 5
    1236:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZN10GsmManagerD1Ev>


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem(false);
GpsManager gps(IS_GPS_MOCK);
    123a:	85 ea       	ldi	r24, 0xA5	; 165
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN10GpsManagerD1Ev>
/************************************************************************/

void readWriteSignals(){
	
	
}
    1242:	00 00       	nop
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <_GLOBAL__sub_I_fona>:
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	6f ef       	ldi	r22, 0xFF	; 255
    125c:	7f ef       	ldi	r23, 0xFF	; 255
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_Z41__static_initialization_and_destruction_0ii>
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <_GLOBAL__sub_D_fona>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	6f ef       	ldi	r22, 0xFF	; 255
    1276:	7f ef       	ldi	r23, 0xFF	; 255
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_Z41__static_initialization_and_destruction_0ii>
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <_ZN12RmMemManagerC1Eb>:
boolean _ledTopPinGreen=false;
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock){
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	00 d0       	rcall	.+0      	; 0x128c <_ZN12RmMemManagerC1Eb+0x6>
    128c:	1f 92       	push	r1
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	2b 81       	ldd	r18, Y+3	; 0x03
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
	
	if (!_isMock)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	fc 01       	movw	r30, r24
    12a8:	90 81       	ld	r25, Z
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 27       	eor	r24, r25
    12ae:	88 23       	and	r24, r24
    12b0:	21 f0       	breq	.+8      	; 0x12ba <_ZN12RmMemManagerC1Eb+0x34>
		Wire.begin();
    12b2:	83 ea       	ldi	r24, 0xA3	; 163
    12b4:	97 e0       	ldi	r25, 0x07	; 7
    12b6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN7TwoWire5beginEv>
}
    12ba:	00 00       	nop
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <_Z13internalWriteiPhh>:

void internalWrite(int16_t address, uint8_t* data, uint8_t numBytes){
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	28 97       	sbiw	r28, 0x08	; 8
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	9d 83       	std	Y+5, r25	; 0x05
    12de:	8c 83       	std	Y+4, r24	; 0x04
    12e0:	7f 83       	std	Y+7, r23	; 0x07
    12e2:	6e 83       	std	Y+6, r22	; 0x06
    12e4:	48 87       	std	Y+8, r20	; 0x08
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	99 81       	ldd	r25, Y+1	; 0x01
    12ea:	88 85       	ldd	r24, Y+8	; 0x08
    12ec:	98 17       	cp	r25, r24
    12ee:	e0 f5       	brcc	.+120    	; 0x1368 <_Z13internalWriteiPhh+0xa0>
	
		uint16_t thisByteAddr = address+i;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	82 0f       	add	r24, r18
    12fc:	93 1f       	adc	r25, r19
    12fe:	9b 83       	std	Y+3, r25	; 0x03
    1300:	8a 83       	std	Y+2, r24	; 0x02
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		RM_LOGMEMLN(*(data+i));
	
		Wire.beginTransmission(0x50);
    1302:	60 e5       	ldi	r22, 0x50	; 80
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	83 ea       	ldi	r24, 0xA3	; 163
    1308:	97 e0       	ldi	r25, 0x07	; 7
    130a:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	9b 81       	ldd	r25, Y+3	; 0x03
    1312:	89 2f       	mov	r24, r25
    1314:	99 27       	eor	r25, r25
    1316:	bc 01       	movw	r22, r24
    1318:	83 ea       	ldi	r24, 0xA3	; 163
    131a:	97 e0       	ldi	r25, 0x07	; 7
    131c:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	99 27       	eor	r25, r25
    1326:	bc 01       	movw	r22, r24
    1328:	83 ea       	ldi	r24, 0xA3	; 163
    132a:	97 e0       	ldi	r25, 0x07	; 7
    132c:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	2e 81       	ldd	r18, Y+6	; 0x06
    1338:	3f 81       	ldd	r19, Y+7	; 0x07
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	fc 01       	movw	r30, r24
    1340:	80 81       	ld	r24, Z
    1342:	68 2f       	mov	r22, r24
    1344:	83 ea       	ldi	r24, 0xA3	; 163
    1346:	97 e0       	ldi	r25, 0x07	; 7
    1348:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    134c:	83 ea       	ldi	r24, 0xA3	; 163
    134e:	97 e0       	ldi	r25, 0x07	; 7
    1350:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <_ZN7TwoWire15endTransmissionEv>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
    1354:	6f e0       	ldi	r22, 0x0F	; 15
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	8f 5f       	subi	r24, 0xFF	; 255
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	c0 cf       	rjmp	.-128    	; 0x12e8 <_Z13internalWriteiPhh+0x20>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    1368:	00 00       	nop
    136a:	28 96       	adiw	r28, 0x08	; 8
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <_Z12internalReadiPhh>:

void internalRead(int16_t address, uint8_t* data, uint8_t numBytes){
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	29 97       	sbiw	r28, 0x09	; 9
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
    1394:	78 87       	std	Y+8, r23	; 0x08
    1396:	6f 83       	std	Y+7, r22	; 0x07
    1398:	49 87       	std	Y+9, r20	; 0x09
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	99 81       	ldd	r25, Y+1	; 0x01
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	98 17       	cp	r25, r24
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <_Z12internalReadiPhh+0x2a>
    13a4:	4b c0       	rjmp	.+150    	; 0x143c <_Z12internalReadiPhh+0xc0>
		
		uint16_t thisByteAddr = address+i;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	82 0f       	add	r24, r18
    13b2:	93 1f       	adc	r25, r19
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    13b8:	60 e5       	ldi	r22, 0x50	; 80
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	83 ea       	ldi	r24, 0xA3	; 163
    13be:	97 e0       	ldi	r25, 0x07	; 7
    13c0:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	89 2f       	mov	r24, r25
    13ca:	99 27       	eor	r25, r25
    13cc:	bc 01       	movw	r22, r24
    13ce:	83 ea       	ldi	r24, 0xA3	; 163
    13d0:	97 e0       	ldi	r25, 0x07	; 7
    13d2:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	99 27       	eor	r25, r25
    13dc:	bc 01       	movw	r22, r24
    13de:	83 ea       	ldi	r24, 0xA3	; 163
    13e0:	97 e0       	ldi	r25, 0x07	; 7
    13e2:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    13e6:	83 ea       	ldi	r24, 0xA3	; 163
    13e8:	97 e0       	ldi	r25, 0x07	; 7
    13ea:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	60 e5       	ldi	r22, 0x50	; 80
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	83 ea       	ldi	r24, 0xA3	; 163
    13f8:	97 e0       	ldi	r25, 0x07	; 7
    13fa:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
    1402:	83 ea       	ldi	r24, 0xA3	; 163
    1404:	97 e0       	ldi	r25, 0x07	; 7
    1406:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire9availableEv>
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	89 2b       	or	r24, r25
    140e:	09 f4       	brne	.+2      	; 0x1412 <_Z12internalReadiPhh+0x96>
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	22 23       	and	r18, r18
    1414:	29 f0       	breq	.+10     	; 0x1420 <_Z12internalReadiPhh+0xa4>
			readByte = Wire.read();
    1416:	83 ea       	ldi	r24, 0xA3	; 163
    1418:	97 e0       	ldi	r25, 0x07	; 7
    141a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <_ZN7TwoWire4readEv>
    141e:	8a 83       	std	Y+2, r24	; 0x02
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	2f 81       	ldd	r18, Y+7	; 0x07
    1428:	38 85       	ldd	r19, Y+8	; 0x08
    142a:	82 0f       	add	r24, r18
    142c:	93 1f       	adc	r25, r19
    142e:	2a 81       	ldd	r18, Y+2	; 0x02
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	b0 cf       	rjmp	.-160    	; 0x139c <_Z12internalReadiPhh+0x20>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    143c:	00 00       	nop
    143e:	29 96       	adiw	r28, 0x09	; 9
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address)
{
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <_ZN12RmMemManager18getUCharFromMemoryEj+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <_ZN12RmMemManager18getUCharFromMemoryEj+0x8>
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	7d 83       	std	Y+5, r23	; 0x05
    1464:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	42 2f       	mov	r20, r18
    146e:	9e 01       	movw	r18, r28
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	b9 01       	movw	r22, r18
    1476:	0e 94 be 09 	call	0x137c	; 0x137c <_Z12internalReadiPhh>
	return value;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <_ZN12RmMemManager19getUShortFromMemoryEj>:

uint16_t RmMemManager::getUShortFromMemory(uint16_t address)
{
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	00 d0       	rcall	.+0      	; 0x1492 <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <_ZN12RmMemManager19getUShortFromMemoryEj+0x8>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <_ZN12RmMemManager19getUShortFromMemoryEj+0xa>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
    149e:	7e 83       	std	Y+6, r23	; 0x06
    14a0:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    14a2:	22 e0       	ldi	r18, 0x02	; 2
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	42 2f       	mov	r20, r18
    14aa:	9e 01       	movw	r18, r28
    14ac:	2f 5f       	subi	r18, 0xFF	; 255
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 be 09 	call	0x137c	; 0x137c <_Z12internalReadiPhh>
	return value;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    14ba:	26 96       	adiw	r28, 0x06	; 6
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <_ZN12RmMemManager17getUIntFromMemoryEj>:

uint32_t RmMemManager::getUIntFromMemory(uint16_t address)
{
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	28 97       	sbiw	r28, 0x08	; 8
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	78 87       	std	Y+8, r23	; 0x08
    14e6:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    14e8:	24 e0       	ldi	r18, 0x04	; 4
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	98 85       	ldd	r25, Y+8	; 0x08
    14ee:	42 2f       	mov	r20, r18
    14f0:	9e 01       	movw	r18, r28
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	b9 01       	movw	r22, r18
    14f8:	0e 94 be 09 	call	0x137c	; 0x137c <_Z12internalReadiPhh>
	return value;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	ab 81       	ldd	r26, Y+3	; 0x03
    1502:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	28 96       	adiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <_ZN12RmMemManager18getULongFromMemoryEj>:

uint64_t RmMemManager::getULongFromMemory(uint16_t address)
{
    151a:	af 92       	push	r10
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	2c 97       	sbiw	r28, 0x0c	; 12
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	9a 87       	std	Y+10, r25	; 0x0a
    1540:	89 87       	std	Y+9, r24	; 0x09
    1542:	7c 87       	std	Y+12, r23	; 0x0c
    1544:	6b 87       	std	Y+11, r22	; 0x0b
	uint64_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1546:	28 e0       	ldi	r18, 0x08	; 8
    1548:	8b 85       	ldd	r24, Y+11	; 0x0b
    154a:	9c 85       	ldd	r25, Y+12	; 0x0c
    154c:	42 2f       	mov	r20, r18
    154e:	9e 01       	movw	r18, r28
    1550:	2f 5f       	subi	r18, 0xFF	; 255
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	b9 01       	movw	r22, r18
    1556:	0e 94 be 09 	call	0x137c	; 0x137c <_Z12internalReadiPhh>
	return value;
    155a:	29 81       	ldd	r18, Y+1	; 0x01
    155c:	3a 81       	ldd	r19, Y+2	; 0x02
    155e:	4b 81       	ldd	r20, Y+3	; 0x03
    1560:	5c 81       	ldd	r21, Y+4	; 0x04
    1562:	6d 81       	ldd	r22, Y+5	; 0x05
    1564:	7e 81       	ldd	r23, Y+6	; 0x06
    1566:	8f 81       	ldd	r24, Y+7	; 0x07
    1568:	98 85       	ldd	r25, Y+8	; 0x08
    156a:	a2 2e       	mov	r10, r18
    156c:	b3 2e       	mov	r11, r19
    156e:	c4 2e       	mov	r12, r20
    1570:	d5 2e       	mov	r13, r21
    1572:	e6 2e       	mov	r14, r22
    1574:	f7 2e       	mov	r15, r23
    1576:	08 2f       	mov	r16, r24
    1578:	19 2f       	mov	r17, r25
}
    157a:	2a 2d       	mov	r18, r10
    157c:	3b 2d       	mov	r19, r11
    157e:	4c 2d       	mov	r20, r12
    1580:	5d 2d       	mov	r21, r13
    1582:	6e 2d       	mov	r22, r14
    1584:	7f 2d       	mov	r23, r15
    1586:	80 2f       	mov	r24, r16
    1588:	91 2f       	mov	r25, r17
    158a:	2c 96       	adiw	r28, 0x0c	; 12
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	bf 90       	pop	r11
    15a8:	af 90       	pop	r10
    15aa:	08 95       	ret

000015ac <_ZN12RmMemManager16setUCharToMemoryEjh>:

void RmMemManager::setUCharToMemory(uint16_t address, uint8_t value)
{
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <_ZN12RmMemManager16setUCharToMemoryEjh+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <_ZN12RmMemManager16setUCharToMemoryEjh+0x8>
    15b4:	1f 92       	push	r1
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	7c 83       	std	Y+4, r23	; 0x04
    15c0:	6b 83       	std	Y+3, r22	; 0x03
    15c2:	4d 83       	std	Y+5, r20	; 0x05
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    15c4:	41 e0       	ldi	r20, 0x01	; 1
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	9e 01       	movw	r18, r28
    15cc:	2b 5f       	subi	r18, 0xFB	; 251
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	b9 01       	movw	r22, r18
    15d2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z13internalWriteiPhh>
}
    15d6:	00 00       	nop
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <_ZN12RmMemManager17setUShortToMemoryEjj>:

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value)
{
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <_ZN12RmMemManager17setUShortToMemoryEjj+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <_ZN12RmMemManager17setUShortToMemoryEjj+0x8>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <_ZN12RmMemManager17setUShortToMemoryEjj+0xa>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	7c 83       	std	Y+4, r23	; 0x04
    15fc:	6b 83       	std	Y+3, r22	; 0x03
    15fe:	5e 83       	std	Y+6, r21	; 0x06
    1600:	4d 83       	std	Y+5, r20	; 0x05
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1602:	42 e0       	ldi	r20, 0x02	; 2
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	9e 01       	movw	r18, r28
    160a:	2b 5f       	subi	r18, 0xFB	; 251
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	b9 01       	movw	r22, r18
    1610:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z13internalWriteiPhh>
}
    1614:	00 00       	nop
    1616:	26 96       	adiw	r28, 0x06	; 6
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <_ZN12RmMemManager15setUIntToMemoryEjm>:

void RmMemManager::setUIntToMemory(uint16_t address, uint32_t value)
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	28 97       	sbiw	r28, 0x08	; 8
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	7c 83       	std	Y+4, r23	; 0x04
    1642:	6b 83       	std	Y+3, r22	; 0x03
    1644:	2d 83       	std	Y+5, r18	; 0x05
    1646:	3e 83       	std	Y+6, r19	; 0x06
    1648:	4f 83       	std	Y+7, r20	; 0x07
    164a:	58 87       	std	Y+8, r21	; 0x08
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    164c:	44 e0       	ldi	r20, 0x04	; 4
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	9e 01       	movw	r18, r28
    1654:	2b 5f       	subi	r18, 0xFB	; 251
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	b9 01       	movw	r22, r18
    165a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z13internalWriteiPhh>
}
    165e:	00 00       	nop
    1660:	28 96       	adiw	r28, 0x08	; 8
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <_ZN12RmMemManager16setULongToMemoryEjy>:

void RmMemManager::setULongToMemory(uint16_t address, uint64_t value)
{
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	2c 97       	sbiw	r28, 0x0c	; 12
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	7c 83       	std	Y+4, r23	; 0x04
    1694:	6b 83       	std	Y+3, r22	; 0x03
    1696:	ed 82       	std	Y+5, r14	; 0x05
    1698:	fe 82       	std	Y+6, r15	; 0x06
    169a:	0f 83       	std	Y+7, r16	; 0x07
    169c:	18 87       	std	Y+8, r17	; 0x08
    169e:	29 87       	std	Y+9, r18	; 0x09
    16a0:	3a 87       	std	Y+10, r19	; 0x0a
    16a2:	4b 87       	std	Y+11, r20	; 0x0b
    16a4:	5c 87       	std	Y+12, r21	; 0x0c
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    16a6:	48 e0       	ldi	r20, 0x08	; 8
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	9e 01       	movw	r18, r28
    16ae:	2b 5f       	subi	r18, 0xFB	; 251
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	b9 01       	movw	r22, r18
    16b4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z13internalWriteiPhh>
}
    16b8:	00 00       	nop
    16ba:	2c 96       	adiw	r28, 0x0c	; 12
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	08 95       	ret

000016d4 <_ZN12RmMemManager16initialiseModuleEh>:

void RmMemManager::initialiseModule(uint8_t moduleId){
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	a0 97       	sbiw	r28, 0x20	; 32
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	9f 8f       	std	Y+31, r25	; 0x1f
    16ea:	8e 8f       	std	Y+30, r24	; 0x1e
    16ec:	68 a3       	std	Y+32, r22	; 0x20

	ModuleMeta meta;
	meta.moduleId = moduleId;
    16ee:	88 a1       	ldd	r24, Y+32	; 0x20
    16f0:	89 83       	std	Y+1, r24	; 0x01
	meta.bootCount = 0;
    16f2:	1b 82       	std	Y+3, r1	; 0x03
    16f4:	1a 82       	std	Y+2, r1	; 0x02
	meta.eepromTestArea = 0;
    16f6:	1e 82       	std	Y+6, r1	; 0x06
    16f8:	1f 82       	std	Y+7, r1	; 0x07
    16fa:	18 86       	std	Y+8, r1	; 0x08
    16fc:	19 86       	std	Y+9, r1	; 0x09
    16fe:	1a 86       	std	Y+10, r1	; 0x0a
    1700:	1b 86       	std	Y+11, r1	; 0x0b
    1702:	1c 86       	std	Y+12, r1	; 0x0c
    1704:	1d 86       	std	Y+13, r1	; 0x0d
	meta.nextFreeWriteAddr = MEMLOC_START + sizeof(ModuleMeta);
    1706:	8d e1       	ldi	r24, 0x1D	; 29
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9d 83       	std	Y+5, r25	; 0x05
    170c:	8c 83       	std	Y+4, r24	; 0x04
	memset(meta.spareBuffer, 0, sizeof(meta.spareBuffer));
    170e:	ce 01       	movw	r24, r28
    1710:	0e 96       	adiw	r24, 0x0e	; 14
    1712:	40 e1       	ldi	r20, 0x10	; 16
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	0e 94 04 30 	call	0x6008	; 0x6008 <memset>
	
	//TODO: Blank out rest of eeprom too?
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    171e:	8d e1       	ldi	r24, 0x1D	; 29
    1720:	48 2f       	mov	r20, r24
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	bc 01       	movw	r22, r24
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z13internalWriteiPhh>
}
    1730:	00 00       	nop
    1732:	a0 96       	adiw	r28, 0x20	; 32
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_ZN12RmMemManager18incrementBootCountEv>:

uint16_t RmMemManager::incrementBootCount(){
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	00 d0       	rcall	.+0      	; 0x174a <_ZN12RmMemManager18incrementBootCountEv+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <_ZN12RmMemManager18incrementBootCountEv+0x8>
    174c:	00 d0       	rcall	.+0      	; 0x174e <_ZN12RmMemManager18incrementBootCountEv+0xa>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
	
	//TODO: Somehow verify Wire is working?
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
	uint16_t currVal = getUShortFromMemory(addr);
    175e:	29 81       	ldd	r18, Y+1	; 0x01
    1760:	3a 81       	ldd	r19, Y+2	; 0x02
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	b9 01       	movw	r22, r18
    1768:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN12RmMemManager19getUShortFromMemoryEj>
    176c:	9c 83       	std	Y+4, r25	; 0x04
    176e:	8b 83       	std	Y+3, r24	; 0x03
	++currVal;
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
	setUShortToMemory(addr, currVal);
    177a:	4b 81       	ldd	r20, Y+3	; 0x03
    177c:	5c 81       	ldd	r21, Y+4	; 0x04
    177e:	29 81       	ldd	r18, Y+1	; 0x01
    1780:	3a 81       	ldd	r19, Y+2	; 0x02
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	b9 01       	movw	r22, r18
    1788:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN12RmMemManager17setUShortToMemoryEjj>
	return currVal;
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1790:	26 96       	adiw	r28, 0x06	; 6
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <_ZN12RmMemManager17verifyBasicEepRomEv>:

uint16_t RmMemManager::verifyBasicEepRom(){
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	6e 97       	sbiw	r28, 0x1e	; 30
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	9e 8f       	std	Y+30, r25	; 0x1e
    17c8:	8d 8f       	std	Y+29, r24	; 0x1d
	
	//TODO: Verify of spill over 64-bit boundary what to do
	//TODO: Roll-over verification
	//TODO: Don't have strings of messages, return code which translate in a #if NOT_ENCODED_ON_DEVICE block
	
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9d 83       	std	Y+5, r25	; 0x05
    17d0:	8c 83       	std	Y+4, r24	; 0x04
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++)
    17d2:	1b 82       	std	Y+3, r1	; 0x03
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	8e 31       	cpi	r24, 0x1E	; 30
    17d8:	08 f0       	brcs	.+2      	; 0x17dc <_ZN12RmMemManager17verifyBasicEepRomEv+0x3a>
    17da:	29 c1       	rjmp	.+594    	; 0x1a2e <_ZN12RmMemManager17verifyBasicEepRomEv+0x28c>
	{
		//No intersection of values so we'll know straight away if wrong bits picked
		this->setULongToMemory(MEM_TEST_LOC, 0xA946F7D8C941F9A8);
    17dc:	6c 81       	ldd	r22, Y+4	; 0x04
    17de:	7d 81       	ldd	r23, Y+5	; 0x05
    17e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17e4:	0f 2e       	mov	r0, r31
    17e6:	f8 ea       	ldi	r31, 0xA8	; 168
    17e8:	ef 2e       	mov	r14, r31
    17ea:	f0 2d       	mov	r31, r0
    17ec:	0f 2e       	mov	r0, r31
    17ee:	f9 ef       	ldi	r31, 0xF9	; 249
    17f0:	ff 2e       	mov	r15, r31
    17f2:	f0 2d       	mov	r31, r0
    17f4:	01 e4       	ldi	r16, 0x41	; 65
    17f6:	19 ec       	ldi	r17, 0xC9	; 201
    17f8:	28 ed       	ldi	r18, 0xD8	; 216
    17fa:	37 ef       	ldi	r19, 0xF7	; 247
    17fc:	46 e4       	ldi	r20, 0x46	; 70
    17fe:	59 ea       	ldi	r21, 0xA9	; 169
    1800:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZN12RmMemManager16setULongToMemoryEjy>
		uint64_t val8 = this->getULongFromMemory(MEM_TEST_LOC);
    1804:	2c 81       	ldd	r18, Y+4	; 0x04
    1806:	3d 81       	ldd	r19, Y+5	; 0x05
    1808:	8d 8d       	ldd	r24, Y+29	; 0x1d
    180a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    180c:	b9 01       	movw	r22, r18
    180e:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN12RmMemManager18getULongFromMemoryEj>
    1812:	a2 2e       	mov	r10, r18
    1814:	b3 2e       	mov	r11, r19
    1816:	c4 2e       	mov	r12, r20
    1818:	d5 2e       	mov	r13, r21
    181a:	e6 2e       	mov	r14, r22
    181c:	f7 2e       	mov	r15, r23
    181e:	08 2f       	mov	r16, r24
    1820:	19 2f       	mov	r17, r25
    1822:	ae 82       	std	Y+6, r10	; 0x06
    1824:	bf 82       	std	Y+7, r11	; 0x07
    1826:	c8 86       	std	Y+8, r12	; 0x08
    1828:	d9 86       	std	Y+9, r13	; 0x09
    182a:	ea 86       	std	Y+10, r14	; 0x0a
    182c:	fb 86       	std	Y+11, r15	; 0x0b
    182e:	0c 87       	std	Y+12, r16	; 0x0c
    1830:	1d 87       	std	Y+13, r17	; 0x0d
		if (val8 != 0xA946F7D8C941F9A8)
    1832:	ae 80       	ldd	r10, Y+6	; 0x06
    1834:	bf 80       	ldd	r11, Y+7	; 0x07
    1836:	c8 84       	ldd	r12, Y+8	; 0x08
    1838:	d9 84       	ldd	r13, Y+9	; 0x09
    183a:	ea 84       	ldd	r14, Y+10	; 0x0a
    183c:	fb 84       	ldd	r15, Y+11	; 0x0b
    183e:	0c 85       	ldd	r16, Y+12	; 0x0c
    1840:	1d 85       	ldd	r17, Y+13	; 0x0d
    1842:	2a 2d       	mov	r18, r10
    1844:	3b 2d       	mov	r19, r11
    1846:	4c 2d       	mov	r20, r12
    1848:	5d 2d       	mov	r21, r13
    184a:	6e 2d       	mov	r22, r14
    184c:	7f 2d       	mov	r23, r15
    184e:	80 2f       	mov	r24, r16
    1850:	91 2f       	mov	r25, r17
    1852:	28 3a       	cpi	r18, 0xA8	; 168
    1854:	39 4f       	sbci	r19, 0xF9	; 249
    1856:	41 44       	sbci	r20, 0x41	; 65
    1858:	59 4c       	sbci	r21, 0xC9	; 201
    185a:	68 4d       	sbci	r22, 0xD8	; 216
    185c:	77 4f       	sbci	r23, 0xF7	; 247
    185e:	86 44       	sbci	r24, 0x46	; 70
    1860:	99 4a       	sbci	r25, 0xA9	; 169
    1862:	59 f0       	breq	.+22     	; 0x187a <_ZN12RmMemManager17verifyBasicEepRomEv+0xd8>
		{
			RM_LOGLN("FAILED LONG");
    1864:	64 eb       	ldi	r22, 0xB4	; 180
    1866:	71 e0       	ldi	r23, 0x01	; 1
    1868:	81 eb       	ldi	r24, 0xB1	; 177
    186a:	97 e0       	ldi	r25, 0x07	; 7
    186c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
			++numFailures;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUIntToMemory(MEM_TEST_LOC, 0xC911F948);
    187a:	6c 81       	ldd	r22, Y+4	; 0x04
    187c:	7d 81       	ldd	r23, Y+5	; 0x05
    187e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1880:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1882:	28 e4       	ldi	r18, 0x48	; 72
    1884:	39 ef       	ldi	r19, 0xF9	; 249
    1886:	41 e1       	ldi	r20, 0x11	; 17
    1888:	59 ec       	ldi	r21, 0xC9	; 201
    188a:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12RmMemManager15setUIntToMemoryEjm>
		uint32_t val4 = this->getUIntFromMemory(MEM_TEST_LOC);
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	3d 81       	ldd	r19, Y+5	; 0x05
    1892:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1894:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1896:	b9 01       	movw	r22, r18
    1898:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN12RmMemManager17getUIntFromMemoryEj>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8e 87       	std	Y+14, r24	; 0x0e
    18a2:	9f 87       	std	Y+15, r25	; 0x0f
    18a4:	a8 8b       	std	Y+16, r26	; 0x10
    18a6:	b9 8b       	std	Y+17, r27	; 0x11
		if (val4 != 0xC911F948)
    18a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ac:	a8 89       	ldd	r26, Y+16	; 0x10
    18ae:	b9 89       	ldd	r27, Y+17	; 0x11
    18b0:	88 34       	cpi	r24, 0x48	; 72
    18b2:	99 4f       	sbci	r25, 0xF9	; 249
    18b4:	a1 41       	sbci	r26, 0x11	; 17
    18b6:	b9 4c       	sbci	r27, 0xC9	; 201
    18b8:	59 f0       	breq	.+22     	; 0x18d0 <_ZN12RmMemManager17verifyBasicEepRomEv+0x12e>
		{
			RM_LOGLN("FAILED INT");
    18ba:	60 ec       	ldi	r22, 0xC0	; 192
    18bc:	71 e0       	ldi	r23, 0x01	; 1
    18be:	81 eb       	ldi	r24, 0xB1	; 177
    18c0:	97 e0       	ldi	r25, 0x07	; 7
    18c2:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
			++numFailures;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUShortToMemory(MEM_TEST_LOC, 0x5C3A);
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d8:	4a e3       	ldi	r20, 0x3A	; 58
    18da:	5c e5       	ldi	r21, 0x5C	; 92
    18dc:	b9 01       	movw	r22, r18
    18de:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN12RmMemManager17setUShortToMemoryEjj>
		uint16_t val2 = this->getUShortFromMemory(MEM_TEST_LOC);
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ea:	b9 01       	movw	r22, r18
    18ec:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN12RmMemManager19getUShortFromMemoryEj>
    18f0:	9b 8b       	std	Y+19, r25	; 0x13
    18f2:	8a 8b       	std	Y+18, r24	; 0x12
		if (val2 != 0x5C3A)
    18f4:	8a 89       	ldd	r24, Y+18	; 0x12
    18f6:	9b 89       	ldd	r25, Y+19	; 0x13
    18f8:	8a 33       	cpi	r24, 0x3A	; 58
    18fa:	9c 45       	sbci	r25, 0x5C	; 92
    18fc:	59 f0       	breq	.+22     	; 0x1914 <_ZN12RmMemManager17verifyBasicEepRomEv+0x172>
		{
			RM_LOGLN("FAILED SHORT");
    18fe:	6b ec       	ldi	r22, 0xCB	; 203
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	81 eb       	ldi	r24, 0xB1	; 177
    1904:	97 e0       	ldi	r25, 0x07	; 7
    1906:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
			++numFailures;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUCharToMemory(MEM_TEST_LOC, 0xE1);
    1914:	2c 81       	ldd	r18, Y+4	; 0x04
    1916:	3d 81       	ldd	r19, Y+5	; 0x05
    1918:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    191c:	41 ee       	ldi	r20, 0xE1	; 225
    191e:	b9 01       	movw	r22, r18
    1920:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN12RmMemManager16setUCharToMemoryEjh>
		uint8_t val1 = this->getUCharFromMemory(MEM_TEST_LOC);
    1924:	2c 81       	ldd	r18, Y+4	; 0x04
    1926:	3d 81       	ldd	r19, Y+5	; 0x05
    1928:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192c:	b9 01       	movw	r22, r18
    192e:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN12RmMemManager18getUCharFromMemoryEj>
    1932:	8c 8b       	std	Y+20, r24	; 0x14
		if (val1 != 0xE1)
    1934:	8c 89       	ldd	r24, Y+20	; 0x14
    1936:	81 3e       	cpi	r24, 0xE1	; 225
    1938:	59 f0       	breq	.+22     	; 0x1950 <_ZN12RmMemManager17verifyBasicEepRomEv+0x1ae>
		{
			RM_LOGLN("FAILED CHAR");
    193a:	68 ed       	ldi	r22, 0xD8	; 216
    193c:	71 e0       	ldi	r23, 0x01	; 1
    193e:	81 eb       	ldi	r24, 0xB1	; 177
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
			++numFailures;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		RM_LOG(F("EEPROM Test: Long="));
    1950:	83 e4       	ldi	r24, 0x43	; 67
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	bc 01       	movw	r22, r24
    1956:	81 eb       	ldi	r24, 0xB1	; 177
    1958:	97 e0       	ldi	r25, 0x07	; 7
    195a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLONG(val8, HEX);
    195e:	2e 81       	ldd	r18, Y+6	; 0x06
    1960:	3f 81       	ldd	r19, Y+7	; 0x07
    1962:	48 85       	ldd	r20, Y+8	; 0x08
    1964:	59 85       	ldd	r21, Y+9	; 0x09
    1966:	6a 85       	ldd	r22, Y+10	; 0x0a
    1968:	7b 85       	ldd	r23, Y+11	; 0x0b
    196a:	8c 85       	ldd	r24, Y+12	; 0x0c
    196c:	9d 85       	ldd	r25, Y+13	; 0x0d
    196e:	00 e2       	ldi	r16, 0x20	; 32
    1970:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <__lshrdi3>
    1974:	a2 2e       	mov	r10, r18
    1976:	b3 2e       	mov	r11, r19
    1978:	c4 2e       	mov	r12, r20
    197a:	d5 2e       	mov	r13, r21
    197c:	e6 2e       	mov	r14, r22
    197e:	f7 2e       	mov	r15, r23
    1980:	08 2f       	mov	r16, r24
    1982:	19 2f       	mov	r17, r25
    1984:	ad 8a       	std	Y+21, r10	; 0x15
    1986:	be 8a       	std	Y+22, r11	; 0x16
    1988:	cf 8a       	std	Y+23, r12	; 0x17
    198a:	d8 8e       	std	Y+24, r13	; 0x18
    198c:	e9 8e       	std	Y+25, r14	; 0x19
    198e:	fa 8e       	std	Y+26, r15	; 0x1a
    1990:	0b 8f       	std	Y+27, r16	; 0x1b
    1992:	1c 8f       	std	Y+28, r17	; 0x1c
    1994:	8d 89       	ldd	r24, Y+21	; 0x15
    1996:	9e 89       	ldd	r25, Y+22	; 0x16
    1998:	af 89       	ldd	r26, Y+23	; 0x17
    199a:	b8 8d       	ldd	r27, Y+24	; 0x18
    199c:	20 e1       	ldi	r18, 0x10	; 16
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	ac 01       	movw	r20, r24
    19a2:	bd 01       	movw	r22, r26
    19a4:	81 eb       	ldi	r24, 0xB1	; 177
    19a6:	97 e0       	ldi	r25, 0x07	; 7
    19a8:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <_ZN5Print5printEmi>
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	a8 85       	ldd	r26, Y+8	; 0x08
    19b2:	b9 85       	ldd	r27, Y+9	; 0x09
    19b4:	20 e1       	ldi	r18, 0x10	; 16
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	ac 01       	movw	r20, r24
    19ba:	bd 01       	movw	r22, r26
    19bc:	81 eb       	ldi	r24, 0xB1	; 177
    19be:	97 e0       	ldi	r25, 0x07	; 7
    19c0:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <_ZN5Print5printEmi>
		RM_LOG(F(", Int="));
    19c4:	86 e5       	ldi	r24, 0x56	; 86
    19c6:	93 e0       	ldi	r25, 0x03	; 3
    19c8:	bc 01       	movw	r22, r24
    19ca:	81 eb       	ldi	r24, 0xB1	; 177
    19cc:	97 e0       	ldi	r25, 0x07	; 7
    19ce:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val4, HEX);
    19d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    19d6:	a8 89       	ldd	r26, Y+16	; 0x10
    19d8:	b9 89       	ldd	r27, Y+17	; 0x11
    19da:	20 e1       	ldi	r18, 0x10	; 16
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	ac 01       	movw	r20, r24
    19e0:	bd 01       	movw	r22, r26
    19e2:	81 eb       	ldi	r24, 0xB1	; 177
    19e4:	97 e0       	ldi	r25, 0x07	; 7
    19e6:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <_ZN5Print5printEmi>
		RM_LOG(F(", Short="));
    19ea:	8d e5       	ldi	r24, 0x5D	; 93
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	bc 01       	movw	r22, r24
    19f0:	81 eb       	ldi	r24, 0xB1	; 177
    19f2:	97 e0       	ldi	r25, 0x07	; 7
    19f4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val2, HEX);
    19f8:	8a 89       	ldd	r24, Y+18	; 0x12
    19fa:	9b 89       	ldd	r25, Y+19	; 0x13
    19fc:	40 e1       	ldi	r20, 0x10	; 16
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	bc 01       	movw	r22, r24
    1a02:	81 eb       	ldi	r24, 0xB1	; 177
    1a04:	97 e0       	ldi	r25, 0x07	; 7
    1a06:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN5Print5printEji>
		RM_LOG(F(", Char="));
    1a0a:	86 e6       	ldi	r24, 0x66	; 102
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	bc 01       	movw	r22, r24
    1a10:	81 eb       	ldi	r24, 0xB1	; 177
    1a12:	97 e0       	ldi	r25, 0x07	; 7
    1a14:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLNFMT(val1, HEX);
    1a18:	40 e1       	ldi	r20, 0x10	; 16
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	6c 89       	ldd	r22, Y+20	; 0x14
    1a1e:	81 eb       	ldi	r24, 0xB1	; 177
    1a20:	97 e0       	ldi	r25, 0x07	; 7
    1a22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <_ZN5Print7printlnEhi>
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++)
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
    1a2c:	d3 ce       	rjmp	.-602    	; 0x17d4 <_ZN12RmMemManager17verifyBasicEepRomEv+0x32>
		RM_LOGFMT(val2, HEX);
		RM_LOG(F(", Char="));
		RM_LOGLNFMT(val1, HEX);
	}
	
	return numFailures;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a32:	6e 96       	adiw	r28, 0x1e	; 30
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	08 95       	ret

00001a54 <_ZN12RmMemManager9printDataEv>:

//TODO: Only in PC_BEHAVIOUR 
void RmMemManager::printData(){
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	6f 97       	sbiw	r28, 0x1f	; 31
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	9f 8f       	std	Y+31, r25	; 0x1f
    1a6a:	8e 8f       	std	Y+30, r24	; 0x1e

	//Get last reading
	ModuleMeta meta;
	internalRead(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    1a6c:	8d e1       	ldi	r24, 0x1D	; 29
    1a6e:	48 2f       	mov	r20, r24
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	bc 01       	movw	r22, r24
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 be 09 	call	0x137c	; 0x137c <_Z12internalReadiPhh>
	
	RM_LOG2(F("Module #"), meta.moduleId);
    1a7e:	8e e6       	ldi	r24, 0x6E	; 110
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	bc 01       	movw	r22, r24
    1a84:	81 eb       	ldi	r24, 0xB1	; 177
    1a86:	97 e0       	ldi	r25, 0x07	; 7
    1a88:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    1a8c:	64 ee       	ldi	r22, 0xE4	; 228
    1a8e:	71 e0       	ldi	r23, 0x01	; 1
    1a90:	81 eb       	ldi	r24, 0xB1	; 177
    1a92:	97 e0       	ldi	r25, 0x07	; 7
    1a94:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	4a e0       	ldi	r20, 0x0A	; 10
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	68 2f       	mov	r22, r24
    1aa0:	81 eb       	ldi	r24, 0xB1	; 177
    1aa2:	97 e0       	ldi	r25, 0x07	; 7
    1aa4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <_ZN5Print7printlnEhi>
	RM_LOG2(F("# Boots"), meta.bootCount);
    1aa8:	87 e7       	ldi	r24, 0x77	; 119
    1aaa:	93 e0       	ldi	r25, 0x03	; 3
    1aac:	bc 01       	movw	r22, r24
    1aae:	81 eb       	ldi	r24, 0xB1	; 177
    1ab0:	97 e0       	ldi	r25, 0x07	; 7
    1ab2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    1ab6:	64 ee       	ldi	r22, 0xE4	; 228
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	81 eb       	ldi	r24, 0xB1	; 177
    1abc:	97 e0       	ldi	r25, 0x07	; 7
    1abe:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	4a e0       	ldi	r20, 0x0A	; 10
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	bc 01       	movw	r22, r24
    1acc:	81 eb       	ldi	r24, 0xB1	; 177
    1ace:	97 e0       	ldi	r25, 0x07	; 7
    1ad0:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
	RM_LOG2(F("Next Addr"), meta.nextFreeWriteAddr);
    1ad4:	8f e7       	ldi	r24, 0x7F	; 127
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	bc 01       	movw	r22, r24
    1ada:	81 eb       	ldi	r24, 0xB1	; 177
    1adc:	97 e0       	ldi	r25, 0x07	; 7
    1ade:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    1ae2:	64 ee       	ldi	r22, 0xE4	; 228
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	81 eb       	ldi	r24, 0xB1	; 177
    1ae8:	97 e0       	ldi	r25, 0x07	; 7
    1aea:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	4a e0       	ldi	r20, 0x0A	; 10
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	bc 01       	movw	r22, r24
    1af8:	81 eb       	ldi	r24, 0xB1	; 177
    1afa:	97 e0       	ldi	r25, 0x07	; 7
    1afc:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
	//RM_LOG(F(", Gps-Heading: "));
	//RM_LOG(session.gpsInfo.heading);
	//RM_LOG(F(", Gps-Speed: "));
	//RM_LOGLN(session.gpsInfo.speed_kph);
	//}
}
    1b00:	00 00       	nop
    1b02:	6f 96       	adiw	r28, 0x1f	; 31
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	28 97       	sbiw	r28, 0x08	; 8
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	7c 83       	std	Y+4, r23	; 0x04
    1b2e:	6b 83       	std	Y+3, r22	; 0x03
    1b30:	5e 83       	std	Y+6, r21	; 0x06
    1b32:	4d 83       	std	Y+5, r20	; 0x05
    1b34:	38 87       	std	Y+8, r19	; 0x08
    1b36:	2f 83       	std	Y+7, r18	; 0x07
	return 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e0       	ldi	r26, 0x00	; 0
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
		//}
	//
	//
	//*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
	//return numOfLastReadings;
}
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	28 96       	adiw	r28, 0x08	; 8
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret

00001b56 <_ZN12RmMemManager12markDataSentEy>:

void RmMemManager::markDataSent(uint64_t sentUpTo)
{
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	2a 97       	sbiw	r28, 0x0a	; 10
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	0b 83       	std	Y+3, r16	; 0x03
    1b74:	1c 83       	std	Y+4, r17	; 0x04
    1b76:	2d 83       	std	Y+5, r18	; 0x05
    1b78:	3e 83       	std	Y+6, r19	; 0x06
    1b7a:	4f 83       	std	Y+7, r20	; 0x07
    1b7c:	58 87       	std	Y+8, r21	; 0x08
    1b7e:	69 87       	std	Y+9, r22	; 0x09
    1b80:	7a 87       	std	Y+10, r23	; 0x0a
	//this->setULongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
}
    1b82:	00 00       	nop
    1b84:	2a 96       	adiw	r28, 0x0a	; 10
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x6>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x8>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	7c 83       	std	Y+4, r23	; 0x04
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	//TODO
}
    1bae:	00 00       	nop
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <_Z27internalWriteEntryAtAddressP10SensorDatam>:

void internalWriteEntryAtAddress(SensorData* r, unsigned long address){
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x6>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x8>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <_Z27internalWriteEntryAtAddressP10SensorDatam+0xa>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	4b 83       	std	Y+3, r20	; 0x03
    1bd2:	5c 83       	std	Y+4, r21	; 0x04
    1bd4:	6d 83       	std	Y+5, r22	; 0x05
    1bd6:	7e 83       	std	Y+6, r23	; 0x06
	
	//byte* rPtr = (byte*)r;
//
	//for(int i=0;i<sizeof(SensorData);i++)
		//EEPROM.write(address+i, *(rPtr+i));
}
    1bd8:	00 00       	nop
    1bda:	26 96       	adiw	r28, 0x06	; 6
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>:

void RmMemManager::replaceLastSensorEntry(SensorData* r)
{
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x6>
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x8>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	7c 83       	std	Y+4, r23	; 0x04
    1bfe:	6b 83       	std	Y+3, r22	; 0x03
	//volatile unsigned long entryCount = this->getULongFromMemory(MEMLOC_READING_ENTRY_COUNT);
	//volatile unsigned long lastEntryOffset = max(0,entryCount-1) * sizeof(SensorData);
	//volatile unsigned long lastEntryAddress = MEMADDR_READING_DATA_START + lastEntryOffset;
	//
	//internalWriteEntryAtAddress(r, lastEntryAddress);
}
    1c00:	00 00       	nop
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:

void RmMemManager::appendSensorEntry(SensorData* r)
{
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x8>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	7c 83       	std	Y+4, r23	; 0x04
    1c22:	6b 83       	std	Y+3, r22	; 0x03
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
    1c24:	00 00       	nop
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <_ZN12RmMemManager5resetEv>:



/* LED mgmt - Not strictly memory related */

void RmMemManager::reset(){
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <_ZN12RmMemManager5resetEv+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
	_flashCallCount=0;
    1c42:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <_flashCallCount>
	toggleLED(Bottom, All_Clear);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    1c5e:	00 00       	nop
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <_Z13internalFlashRbS_9LED_STATEb>:
/* Flashes for a single LED */
void internalFlash(
	boolean& greenPinVal, boolean& redPinVal,
	LED_STATE currLedState, boolean atSlowInterval
	)
{
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <_Z13internalFlashRbS_9LED_STATEb+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <_Z13internalFlashRbS_9LED_STATEb+0x8>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <_Z13internalFlashRbS_9LED_STATEb+0xa>
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	7c 83       	std	Y+4, r23	; 0x04
    1c7e:	6b 83       	std	Y+3, r22	; 0x03
    1c80:	4d 83       	std	Y+5, r20	; 0x05
    1c82:	2e 83       	std	Y+6, r18	; 0x06
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	80 32       	cpi	r24, 0x20	; 32
    1c88:	61 f4       	brne	.+24     	; 0x1ca2 <_Z13internalFlashRbS_9LED_STATEb+0x38>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	fc 01       	movw	r30, r24
    1c90:	90 81       	ld	r25, Z
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	29 2f       	mov	r18, r25
    1c96:	28 27       	eor	r18, r24
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	19 c0       	rjmp	.+50     	; 0x1cd4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Slow) {
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	80 34       	cpi	r24, 0x40	; 64
    1ca6:	31 f4       	brne	.+12     	; 0x1cb4 <_Z13internalFlashRbS_9LED_STATEb+0x4a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	2e 81       	ldd	r18, Y+6	; 0x06
    1cae:	fc 01       	movw	r30, r24
    1cb0:	20 83       	st	Z, r18
    1cb2:	10 c0       	rjmp	.+32     	; 0x1cd4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Solid) {
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	80 31       	cpi	r24, 0x10	; 16
    1cb8:	31 f4       	brne	.+12     	; 0x1cc6 <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	21 e0       	ldi	r18, 0x01	; 1
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	07 c0       	rjmp	.+14     	; 0x1cd4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == All_Clear) {
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	80 38       	cpi	r24, 0x80	; 128
    1cca:	21 f4       	brne	.+8      	; 0x1cd4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	61 f4       	brne	.+24     	; 0x1cf2 <_Z13internalFlashRbS_9LED_STATEb+0x88>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	fc 01       	movw	r30, r24
    1ce0:	90 81       	ld	r25, Z
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	29 2f       	mov	r18, r25
    1ce6:	28 27       	eor	r18, r24
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1cf0:	19 c0       	rjmp	.+50     	; 0x1d24 <_Z13internalFlashRbS_9LED_STATEb+0xba>
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	31 f4       	brne	.+12     	; 0x1d04 <_Z13internalFlashRbS_9LED_STATEb+0x9a>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfe:	fc 01       	movw	r30, r24
    1d00:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1d02:	10 c0       	rjmp	.+32     	; 0x1d24 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	31 f4       	brne	.+12     	; 0x1d16 <_Z13internalFlashRbS_9LED_STATEb+0xac>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	21 e0       	ldi	r18, 0x01	; 1
    1d10:	fc 01       	movw	r30, r24
    1d12:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
	}
	else if (currLedState == All_Clear) {
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	80 38       	cpi	r24, 0x80	; 128
    1d1a:	21 f4       	brne	.+8      	; 0x1d24 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	fc 01       	movw	r30, r24
    1d22:	10 82       	st	Z, r1
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1d24:	00 00       	nop
    1d26:	26 96       	adiw	r28, 0x06	; 6
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <_ZN12RmMemManager8flashLEDEv>:


//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <_ZN12RmMemManager8flashLEDEv+0x6>
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
    1d46:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <_flashCallCount>
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <_flashCallCount>
    1d50:	20 91 e9 06 	lds	r18, 0x06E9	; 0x8006e9 <_flashCallCount>
    1d54:	8b ea       	ldi	r24, 0xAB	; 171
    1d56:	28 9f       	mul	r18, r24
    1d58:	81 2d       	mov	r24, r1
    1d5a:	11 24       	eor	r1, r1
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	96 95       	lsr	r25
    1d60:	89 2f       	mov	r24, r25
    1d62:	88 0f       	add	r24, r24
    1d64:	89 0f       	add	r24, r25
    1d66:	92 2f       	mov	r25, r18
    1d68:	98 1b       	sub	r25, r24
    1d6a:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <_flashCallCount>

	//Flash Bottom LED	
	internalFlash(
    1d6e:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <_flashCallCount>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	99 23       	and	r25, r25
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <_ZN12RmMemManager8flashLEDEv+0x42>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1d7a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1d7e:	28 2f       	mov	r18, r24
    1d80:	49 2f       	mov	r20, r25
    1d82:	66 ee       	ldi	r22, 0xE6	; 230
    1d84:	76 e0       	ldi	r23, 0x06	; 6
    1d86:	85 ee       	ldi	r24, 0xE5	; 229
    1d88:	96 e0       	ldi	r25, 0x06	; 6
    1d8a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1d8e:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <_ledBottomPinGreen>
    1d92:	68 2f       	mov	r22, r24
    1d94:	89 e0       	ldi	r24, 0x09	; 9
    1d96:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    1d9a:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_ledBottomPinRed>
    1d9e:	68 2f       	mov	r22, r24
    1da0:	88 e0       	ldi	r24, 0x08	; 8
    1da2:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    1da6:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <_flashCallCount>
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	99 23       	and	r25, r25
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <_ZN12RmMemManager8flashLEDEv+0x7a>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    1db2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_ledTopState>
    1db6:	28 2f       	mov	r18, r24
    1db8:	49 2f       	mov	r20, r25
    1dba:	67 ee       	ldi	r22, 0xE7	; 231
    1dbc:	76 e0       	ldi	r23, 0x06	; 6
    1dbe:	88 ee       	ldi	r24, 0xE8	; 232
    1dc0:	96 e0       	ldi	r25, 0x06	; 6
    1dc2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    1dc6:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <_ledTopPinGreen>
    1dca:	68 2f       	mov	r22, r24
    1dcc:	8b e0       	ldi	r24, 0x0B	; 11
    1dce:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    1dd2:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <_ledTopPinRed>
    1dd6:	68 2f       	mov	r22, r24
    1dd8:	8a e0       	ldi	r24, 0x0A	; 10
    1dda:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
}
    1dde:	00 00       	nop
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x8>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
    1dfc:	4c 83       	std	Y+4, r20	; 0x04
	if (led_num == Bottom)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x22>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		_ledTopState = state;

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1e0a:	06 c0       	rjmp	.+12     	; 0x1e18 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
	if (led_num == Bottom)
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
	else if (led_num == Top)
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	88 23       	and	r24, r24
    1e10:	19 f4       	brne	.+6      	; 0x1e18 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
		_ledTopState = state;
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ledTopState>

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1e18:	00 00       	nop
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <_ZN13SensorManagerC1Eb>:
#include <Arduino.h>
#include "DataTypes.h"
#include "SensorManager.h"

SensorManager::SensorManager(boolean isMock) {
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <_ZN13SensorManagerC1Eb+0x6>
    1e2e:	1f 92       	push	r1
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18
}
    1e44:	00 00       	nop
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	08 95       	ret

00001e52 <_ZN13SensorManager7readVccEv>:

float SensorManager::readVcc() {
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <_ZN13SensorManager7readVccEv+0x6>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <_ZN13SensorManager7readVccEv+0x8>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <_ZN13SensorManager7readVccEv+0xa>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
	long result;
	// Read 1.1V reference against AVcc - TODO: does this even work ?!
	ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1e64:	8c e7       	ldi	r24, 0x7C	; 124
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	2e e4       	ldi	r18, 0x4E	; 78
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	20 83       	st	Z, r18
	delay(2); // Wait for Vref to settle
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
	ADCSRA |= _BV(ADSC); // Convert
    1e7a:	8a e7       	ldi	r24, 0x7A	; 122
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	2a e7       	ldi	r18, 0x7A	; 122
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	20 81       	ld	r18, Z
    1e86:	20 64       	ori	r18, 0x40	; 64
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
	while (bit_is_set(ADCSRA,ADSC));
    1e8c:	8a e7       	ldi	r24, 0x7A	; 122
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	fc 01       	movw	r30, r24
    1e92:	80 81       	ld	r24, Z
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	80 74       	andi	r24, 0x40	; 64
    1e9a:	99 27       	eor	r25, r25
    1e9c:	21 e0       	ldi	r18, 0x01	; 1
    1e9e:	89 2b       	or	r24, r25
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <_ZN13SensorManager7readVccEv+0x52>
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	22 23       	and	r18, r18
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <_ZN13SensorManager7readVccEv+0x58>
    1ea8:	f1 cf       	rjmp	.-30     	; 0x1e8c <_ZN13SensorManager7readVccEv+0x3a>
	result = ADCL;
    1eaa:	88 e7       	ldi	r24, 0x78	; 120
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e0       	ldi	r26, 0x00	; 0
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	ab 83       	std	Y+3, r26	; 0x03
    1ec0:	bc 83       	std	Y+4, r27	; 0x04
	result |= ADCH<<8;
    1ec2:	89 e7       	ldi	r24, 0x79	; 121
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	98 2f       	mov	r25, r24
    1ed0:	88 27       	eor	r24, r24
    1ed2:	09 2e       	mov	r0, r25
    1ed4:	00 0c       	add	r0, r0
    1ed6:	aa 0b       	sbc	r26, r26
    1ed8:	bb 0b       	sbc	r27, r27
    1eda:	29 81       	ldd	r18, Y+1	; 0x01
    1edc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ede:	4b 81       	ldd	r20, Y+3	; 0x03
    1ee0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ee2:	82 2b       	or	r24, r18
    1ee4:	93 2b       	or	r25, r19
    1ee6:	a4 2b       	or	r26, r20
    1ee8:	b5 2b       	or	r27, r21
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	ab 83       	std	Y+3, r26	; 0x03
    1ef0:	bc 83       	std	Y+4, r27	; 0x04
	result = 1125300L / result; // Back-calculate AVcc in mV
    1ef2:	84 eb       	ldi	r24, 0xB4	; 180
    1ef4:	9b e2       	ldi	r25, 0x2B	; 43
    1ef6:	a1 e1       	ldi	r26, 0x11	; 17
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	29 81       	ldd	r18, Y+1	; 0x01
    1efc:	3a 81       	ldd	r19, Y+2	; 0x02
    1efe:	4b 81       	ldd	r20, Y+3	; 0x03
    1f00:	5c 81       	ldd	r21, Y+4	; 0x04
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <__divmodsi4>
    1f0a:	da 01       	movw	r26, r20
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	ab 83       	std	Y+3, r26	; 0x03
    1f14:	bc 83       	std	Y+4, r27	; 0x04
	return result / 1000;
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f1c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f1e:	28 ee       	ldi	r18, 0xE8	; 232
    1f20:	33 e0       	ldi	r19, 0x03	; 3
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <__divmodsi4>
    1f2e:	da 01       	movw	r26, r20
    1f30:	c9 01       	movw	r24, r18
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatsisf>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
}
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	26 96       	adiw	r28, 0x06	; 6
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <_ZN13SensorManager16takeSampleAnalogEh+0x6>
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <_ZN13SensorManager16takeSampleAnalogEh+0x8>
    1f5c:	1f 92       	push	r1
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	80 81       	ld	r24, Z
    1f70:	88 23       	and	r24, r24
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <_ZN13SensorManager16takeSampleAnalogEh+0x26>
		return 5;
    1f74:	85 e0       	ldi	r24, 0x05	; 5
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	07 c0       	rjmp	.+14     	; 0x1f88 <_ZN13SensorManager16takeSampleAnalogEh+0x34>
	
	uint16_t batt = analogRead(pinNo);
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <analogRead>
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
	//TODO: Look into !
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <_Z9printDataP10SensorData>:

void printData(SensorData* sd){
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <_Z9printDataP10SensorData+0x6>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01

	RM_LOG2(F("Batt-V"), sd->battVoltage);
    1fa6:	89 e8       	ldi	r24, 0x89	; 137
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	bc 01       	movw	r22, r24
    1fac:	81 eb       	ldi	r24, 0xB1	; 177
    1fae:	97 e0       	ldi	r25, 0x07	; 7
    1fb0:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    1fb4:	64 ef       	ldi	r22, 0xF4	; 244
    1fb6:	71 e0       	ldi	r23, 0x01	; 1
    1fb8:	81 eb       	ldi	r24, 0xB1	; 177
    1fba:	97 e0       	ldi	r25, 0x07	; 7
    1fbc:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	81 81       	ldd	r24, Z+1	; 0x01
    1fc8:	92 81       	ldd	r25, Z+2	; 0x02
    1fca:	4a e0       	ldi	r20, 0x0A	; 10
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	bc 01       	movw	r22, r24
    1fd0:	81 eb       	ldi	r24, 0xB1	; 177
    1fd2:	97 e0       	ldi	r25, 0x07	; 7
    1fd4:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
	RM_LOG2(F("PV-V"), sd->pVVoltage);
    1fd8:	80 e9       	ldi	r24, 0x90	; 144
    1fda:	93 e0       	ldi	r25, 0x03	; 3
    1fdc:	bc 01       	movw	r22, r24
    1fde:	81 eb       	ldi	r24, 0xB1	; 177
    1fe0:	97 e0       	ldi	r25, 0x07	; 7
    1fe2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    1fe6:	64 ef       	ldi	r22, 0xF4	; 244
    1fe8:	71 e0       	ldi	r23, 0x01	; 1
    1fea:	81 eb       	ldi	r24, 0xB1	; 177
    1fec:	97 e0       	ldi	r25, 0x07	; 7
    1fee:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	85 81       	ldd	r24, Z+5	; 0x05
    1ffa:	96 81       	ldd	r25, Z+6	; 0x06
    1ffc:	4a e0       	ldi	r20, 0x0A	; 10
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	bc 01       	movw	r22, r24
    2002:	81 eb       	ldi	r24, 0xB1	; 177
    2004:	97 e0       	ldi	r25, 0x07	; 7
    2006:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
	RM_LOG2(F("Current"), sd->current);
    200a:	85 e9       	ldi	r24, 0x95	; 149
    200c:	93 e0       	ldi	r25, 0x03	; 3
    200e:	bc 01       	movw	r22, r24
    2010:	81 eb       	ldi	r24, 0xB1	; 177
    2012:	97 e0       	ldi	r25, 0x07	; 7
    2014:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    2018:	64 ef       	ldi	r22, 0xF4	; 244
    201a:	71 e0       	ldi	r23, 0x01	; 1
    201c:	81 eb       	ldi	r24, 0xB1	; 177
    201e:	97 e0       	ldi	r25, 0x07	; 7
    2020:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	fc 01       	movw	r30, r24
    202a:	83 81       	ldd	r24, Z+3	; 0x03
    202c:	94 81       	ldd	r25, Z+4	; 0x04
    202e:	4a e0       	ldi	r20, 0x0A	; 10
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	bc 01       	movw	r22, r24
    2034:	81 eb       	ldi	r24, 0xB1	; 177
    2036:	97 e0       	ldi	r25, 0x07	; 7
    2038:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
	RM_LOG2(F("Temp"), sd->temperature);
    203c:	8d e9       	ldi	r24, 0x9D	; 157
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	bc 01       	movw	r22, r24
    2042:	81 eb       	ldi	r24, 0xB1	; 177
    2044:	97 e0       	ldi	r25, 0x07	; 7
    2046:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    204a:	64 ef       	ldi	r22, 0xF4	; 244
    204c:	71 e0       	ldi	r23, 0x01	; 1
    204e:	81 eb       	ldi	r24, 0xB1	; 177
    2050:	97 e0       	ldi	r25, 0x07	; 7
    2052:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	fc 01       	movw	r30, r24
    205c:	87 81       	ldd	r24, Z+7	; 0x07
    205e:	90 85       	ldd	r25, Z+8	; 0x08
    2060:	4a e0       	ldi	r20, 0x0A	; 10
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	bc 01       	movw	r22, r24
    2066:	81 eb       	ldi	r24, 0xB1	; 177
    2068:	97 e0       	ldi	r25, 0x07	; 7
    206a:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
}
    206e:	00 00       	nop
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <_Z11getMockDatav>:

uint8_t __mockDataCounter;
SensorData getMockData(){
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	00 d0       	rcall	.+0      	; 0x2080 <_Z11getMockDatav+0x6>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    2088:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <__mockDataCounter>
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <__mockDataCounter>
	
	SensorData ret;
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN10SensorDataC1Ev>
	ret.battVoltage = __mockDataCounter;
    209a:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <__mockDataCounter>
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	fc 01       	movw	r30, r24
    20a8:	32 83       	std	Z+2, r19	; 0x02
    20aa:	21 83       	std	Z+1, r18	; 0x01
	ret.pVVoltage = __mockDataCounter*10;
    20ac:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <__mockDataCounter>
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	9c 01       	movw	r18, r24
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	22 0f       	add	r18, r18
    20c0:	33 1f       	adc	r19, r19
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	9c 01       	movw	r18, r24
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	fc 01       	movw	r30, r24
    20ce:	36 83       	std	Z+6, r19	; 0x06
    20d0:	25 83       	std	Z+5, r18	; 0x05
	ret.current = __mockDataCounter%7;
    20d2:	20 91 ea 06 	lds	r18, 0x06EA	; 0x8006ea <__mockDataCounter>
    20d6:	85 e2       	ldi	r24, 0x25	; 37
    20d8:	28 9f       	mul	r18, r24
    20da:	81 2d       	mov	r24, r1
    20dc:	11 24       	eor	r1, r1
    20de:	92 2f       	mov	r25, r18
    20e0:	98 1b       	sub	r25, r24
    20e2:	96 95       	lsr	r25
    20e4:	89 0f       	add	r24, r25
    20e6:	98 2f       	mov	r25, r24
    20e8:	96 95       	lsr	r25
    20ea:	96 95       	lsr	r25
    20ec:	89 2f       	mov	r24, r25
    20ee:	88 0f       	add	r24, r24
    20f0:	88 0f       	add	r24, r24
    20f2:	88 0f       	add	r24, r24
    20f4:	89 1b       	sub	r24, r25
    20f6:	92 2f       	mov	r25, r18
    20f8:	98 1b       	sub	r25, r24
    20fa:	29 2f       	mov	r18, r25
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	fc 01       	movw	r30, r24
    2104:	34 83       	std	Z+4, r19	; 0x04
    2106:	23 83       	std	Z+3, r18	; 0x03
	ret.temperature = __mockDataCounter*100;
    2108:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <__mockDataCounter>
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	44 e6       	ldi	r20, 0x64	; 100
    2112:	48 9f       	mul	r20, r24
    2114:	90 01       	movw	r18, r0
    2116:	49 9f       	mul	r20, r25
    2118:	30 0d       	add	r19, r0
    211a:	11 24       	eor	r1, r1
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	30 87       	std	Z+8, r19	; 0x08
    2124:	27 83       	std	Z+7, r18	; 0x07
	
	return ret;
    2126:	00 00       	nop
}
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	08 95       	ret

00002136 <_ZN13SensorManager8readDataEv>:

SensorData SensorManager::readData() {
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	66 97       	sbiw	r28, 0x16	; 22
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	9a 87       	std	Y+10, r25	; 0x0a
    2150:	89 87       	std	Y+9, r24	; 0x09
    2152:	7c 87       	std	Y+12, r23	; 0x0c
    2154:	6b 87       	std	Y+11, r22	; 0x0b
	
	SensorData ret;
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN10SensorDataC1Ev>
	
	if (_isMock) {
    215e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2160:	9c 85       	ldd	r25, Y+12	; 0x0c
    2162:	fc 01       	movw	r30, r24
    2164:	80 81       	ld	r24, Z
    2166:	88 23       	and	r24, r24
    2168:	79 f0       	breq	.+30     	; 0x2188 <_ZN13SensorManager8readDataEv+0x52>
		ret = getMockData();
    216a:	09 85       	ldd	r16, Y+9	; 0x09
    216c:	1a 85       	ldd	r17, Y+10	; 0x0a
    216e:	ce 01       	movw	r24, r28
    2170:	0d 96       	adiw	r24, 0x0d	; 13
    2172:	0e 94 3d 10 	call	0x207a	; 0x207a <_Z11getMockDatav>
    2176:	8a e0       	ldi	r24, 0x0A	; 10
    2178:	fe 01       	movw	r30, r28
    217a:	3d 96       	adiw	r30, 0x0d	; 13
    217c:	d8 01       	movw	r26, r16
    217e:	01 90       	ld	r0, Z+
    2180:	0d 92       	st	X+, r0
    2182:	8a 95       	dec	r24
    2184:	e1 f7       	brne	.-8      	; 0x217e <_ZN13SensorManager8readDataEv+0x48>
    2186:	38 c0       	rjmp	.+112    	; 0x21f8 <_ZN13SensorManager8readDataEv+0xc2>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2188:	8b 85       	ldd	r24, Y+11	; 0x0b
    218a:	9c 85       	ldd	r25, Y+12	; 0x0c
    218c:	6e e0       	ldi	r22, 0x0E	; 14
    218e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN13SensorManager16takeSampleAnalogEh>
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    2196:	8b 85       	ldd	r24, Y+11	; 0x0b
    2198:	9c 85       	ldd	r25, Y+12	; 0x0c
    219a:	6f e0       	ldi	r22, 0x0F	; 15
    219c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN13SensorManager16takeSampleAnalogEh>
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    21a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a8:	61 e1       	ldi	r22, 0x11	; 17
    21aa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN13SensorManager16takeSampleAnalogEh>
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    21b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21b6:	60 e1       	ldi	r22, 0x10	; 16
    21b8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN13SensorManager16takeSampleAnalogEh>
    21bc:	98 87       	std	Y+8, r25	; 0x08
    21be:	8f 83       	std	Y+7, r24	; 0x07

		ret.battVoltage = battRaw;
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	fc 01       	movw	r30, r24
    21ca:	32 83       	std	Z+2, r19	; 0x02
    21cc:	21 83       	std	Z+1, r18	; 0x01
		ret.pVVoltage = pvRaw;
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	29 81       	ldd	r18, Y+1	; 0x01
    21d4:	3a 81       	ldd	r19, Y+2	; 0x02
    21d6:	fc 01       	movw	r30, r24
    21d8:	36 83       	std	Z+6, r19	; 0x06
    21da:	25 83       	std	Z+5, r18	; 0x05
		ret.current = currentRaw;
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	2d 81       	ldd	r18, Y+5	; 0x05
    21e2:	3e 81       	ldd	r19, Y+6	; 0x06
    21e4:	fc 01       	movw	r30, r24
    21e6:	34 83       	std	Z+4, r19	; 0x04
    21e8:	23 83       	std	Z+3, r18	; 0x03
		ret.temperature = tempRaw;
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	2f 81       	ldd	r18, Y+7	; 0x07
    21f0:	38 85       	ldd	r19, Y+8	; 0x08
    21f2:	fc 01       	movw	r30, r24
    21f4:	30 87       	std	Z+8, r19	; 0x08
    21f6:	27 83       	std	Z+7, r18	; 0x07
	}
	
	printData(&ret);
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_Z9printDataP10SensorData>
	
	return ret;
    2200:	00 00       	nop
}
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	66 96       	adiw	r28, 0x16	; 22
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret

0000221c <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    2224:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_state>
  twi_sendStop = true;		// default value
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <twi_sendStop>
  twi_inRepStart = false;
    222e:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    2232:	82 e1       	ldi	r24, 0x12	; 18
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
  digitalWrite(SCL, 1);
    223a:	83 e1       	ldi	r24, 0x13	; 19
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    2242:	89 eb       	ldi	r24, 0xB9	; 185
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	29 eb       	ldi	r18, 0xB9	; 185
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	f9 01       	movw	r30, r18
    224c:	20 81       	ld	r18, Z
    224e:	2e 7f       	andi	r18, 0xFE	; 254
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    2254:	89 eb       	ldi	r24, 0xB9	; 185
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	29 eb       	ldi	r18, 0xB9	; 185
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	f9 01       	movw	r30, r18
    225e:	20 81       	ld	r18, Z
    2260:	2d 7f       	andi	r18, 0xFD	; 253
    2262:	fc 01       	movw	r30, r24
    2264:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    2266:	88 eb       	ldi	r24, 0xB8	; 184
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	28 e4       	ldi	r18, 0x48	; 72
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2270:	8c eb       	ldi	r24, 0xBC	; 188
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	25 e4       	ldi	r18, 0x45	; 69
    2276:	fc 01       	movw	r30, r24
    2278:	20 83       	st	Z, r18
}
    227a:	00 00       	nop
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    228a:	8c eb       	ldi	r24, 0xBC	; 188
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	2c eb       	ldi	r18, 0xBC	; 188
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	f9 01       	movw	r30, r18
    2294:	20 81       	ld	r18, Z
    2296:	2a 7b       	andi	r18, 0xBA	; 186
    2298:	fc 01       	movw	r30, r24
    229a:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    229c:	82 e1       	ldi	r24, 0x12	; 18
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
  digitalWrite(SCL, 0);
    22a4:	83 e1       	ldi	r24, 0x13	; 19
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
}
    22ac:	00 00       	nop
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	1f 92       	push	r1
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    22c0:	8a eb       	ldi	r24, 0xBA	; 186
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	29 81       	ldd	r18, Y+1	; 0x01
    22c6:	22 0f       	add	r18, r18
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
}
    22cc:	00 00       	nop
    22ce:	0f 90       	pop	r0
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret

000022d6 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <twi_setFrequency+0xa>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <twi_setFrequency+0xc>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	69 83       	std	Y+1, r22	; 0x01
    22e8:	7a 83       	std	Y+2, r23	; 0x02
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    22ec:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    22ee:	08 eb       	ldi	r16, 0xB8	; 184
    22f0:	10 e0       	ldi	r17, 0x00	; 0
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	94 e2       	ldi	r25, 0x24	; 36
    22f6:	a4 ef       	ldi	r26, 0xF4	; 244
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	29 81       	ldd	r18, Y+1	; 0x01
    22fc:	3a 81       	ldd	r19, Y+2	; 0x02
    22fe:	4b 81       	ldd	r20, Y+3	; 0x03
    2300:	5c 81       	ldd	r21, Y+4	; 0x04
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    230a:	da 01       	movw	r26, r20
    230c:	c9 01       	movw	r24, r18
    230e:	40 97       	sbiw	r24, 0x10	; 16
    2310:	a1 09       	sbc	r26, r1
    2312:	b1 09       	sbc	r27, r1
    2314:	b6 95       	lsr	r27
    2316:	a7 95       	ror	r26
    2318:	97 95       	ror	r25
    231a:	87 95       	ror	r24
    231c:	f8 01       	movw	r30, r16
    231e:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    2320:	00 00       	nop
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	08 95       	ret

00002334 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	00 d0       	rcall	.+0      	; 0x233a <twi_readFrom+0x6>
    233a:	00 d0       	rcall	.+0      	; 0x233c <twi_readFrom+0x8>
    233c:	00 d0       	rcall	.+0      	; 0x233e <twi_readFrom+0xa>
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	7c 83       	std	Y+4, r23	; 0x04
    2346:	6b 83       	std	Y+3, r22	; 0x03
    2348:	4d 83       	std	Y+5, r20	; 0x05
    234a:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	81 32       	cpi	r24, 0x21	; 33
    2350:	18 f0       	brcs	.+6      	; 0x2358 <twi_readFrom+0x24>
    return 0;
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	6b c0       	rjmp	.+214    	; 0x242c <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    2356:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2358:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <twi_state>
    235c:	88 23       	and	r24, r24
    235e:	d9 f7       	brne	.-10     	; 0x2356 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <twi_state>
  twi_sendStop = sendStop;
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    236c:	8f ef       	ldi	r24, 0xFF	; 255
    236e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2372:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	81 50       	subi	r24, 0x01	; 1
    237a:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_slarw>
  twi_slarw |= address << 1;
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	98 2f       	mov	r25, r24
    2390:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_slarw>
    2394:	89 2b       	or	r24, r25
    2396:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_slarw>

  if (true == twi_inRepStart) {
    239a:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <twi_inRepStart>
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	c1 f4       	brne	.+48     	; 0x23d2 <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    23a2:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    23a6:	8b eb       	ldi	r24, 0xBB	; 187
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <twi_slarw>
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    23b2:	8c eb       	ldi	r24, 0xBC	; 188
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	fc 01       	movw	r30, r24
    23b8:	80 81       	ld	r24, Z
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	88 70       	andi	r24, 0x08	; 8
    23c0:	99 27       	eor	r25, r25
    23c2:	89 2b       	or	r24, r25
    23c4:	81 f7       	brne	.-32     	; 0x23a6 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    23c6:	8c eb       	ldi	r24, 0xBC	; 188
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	25 ec       	ldi	r18, 0xC5	; 197
    23cc:	fc 01       	movw	r30, r24
    23ce:	20 83       	st	Z, r18
    23d0:	07 c0       	rjmp	.+14     	; 0x23e0 <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    23d2:	8c eb       	ldi	r24, 0xBC	; 188
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	25 ee       	ldi	r18, 0xE5	; 229
    23d8:	fc 01       	movw	r30, r24
    23da:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <twi_readFrom+0xac>
    continue;
    23de:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    23e0:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <twi_state>
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	d9 f3       	breq	.-10     	; 0x23de <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    23e8:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <twi_masterBufferIndex>
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	98 17       	cp	r25, r24
    23f0:	18 f4       	brcc	.+6      	; 0x23f8 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    23f2:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <twi_masterBufferIndex>
    23f6:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    23f8:	19 82       	std	Y+1, r1	; 0x01
    23fa:	13 c0       	rjmp	.+38     	; 0x2422 <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	2b 81       	ldd	r18, Y+3	; 0x03
    2404:	3c 81       	ldd	r19, Y+4	; 0x04
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	29 81       	ldd	r18, Y+1	; 0x01
    240c:	22 2f       	mov	r18, r18
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	2d 50       	subi	r18, 0x0D	; 13
    2412:	39 4f       	sbci	r19, 0xF9	; 249
    2414:	f9 01       	movw	r30, r18
    2416:	20 81       	ld	r18, Z
    2418:	fc 01       	movw	r30, r24
    241a:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	99 81       	ldd	r25, Y+1	; 0x01
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	98 17       	cp	r25, r24
    2428:	48 f3       	brcs	.-46     	; 0x23fc <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    242c:	26 96       	adiw	r28, 0x06	; 6
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    243e:	0f 93       	push	r16
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	27 97       	sbiw	r28, 0x07	; 7
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	8a 83       	std	Y+2, r24	; 0x02
    2456:	7c 83       	std	Y+4, r23	; 0x04
    2458:	6b 83       	std	Y+3, r22	; 0x03
    245a:	4d 83       	std	Y+5, r20	; 0x05
    245c:	2e 83       	std	Y+6, r18	; 0x06
    245e:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	81 32       	cpi	r24, 0x21	; 33
    2464:	18 f0       	brcs	.+6      	; 0x246c <twi_writeTo+0x2e>
    return 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	76 c0       	rjmp	.+236    	; 0x2556 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    246a:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    246c:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <twi_state>
    2470:	88 23       	and	r24, r24
    2472:	d9 f7       	brne	.-10     	; 0x246a <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <twi_state>
  twi_sendStop = sendStop;
    247a:	8f 81       	ldd	r24, Y+7	; 0x07
    247c:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2486:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2490:	19 82       	std	Y+1, r1	; 0x01
    2492:	13 c0       	rjmp	.+38     	; 0x24ba <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	29 81       	ldd	r18, Y+1	; 0x01
    249c:	22 2f       	mov	r18, r18
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4b 81       	ldd	r20, Y+3	; 0x03
    24a2:	5c 81       	ldd	r21, Y+4	; 0x04
    24a4:	24 0f       	add	r18, r20
    24a6:	35 1f       	adc	r19, r21
    24a8:	f9 01       	movw	r30, r18
    24aa:	20 81       	ld	r18, Z
    24ac:	8d 50       	subi	r24, 0x0D	; 13
    24ae:	99 4f       	sbci	r25, 0xF9	; 249
    24b0:	fc 01       	movw	r30, r24
    24b2:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	99 81       	ldd	r25, Y+1	; 0x01
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	98 17       	cp	r25, r24
    24c0:	48 f3       	brcs	.-46     	; 0x2494 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    24c2:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <twi_slarw>
  twi_slarw |= address << 1;
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	98 2f       	mov	r25, r24
    24d2:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_slarw>
    24d6:	89 2b       	or	r24, r25
    24d8:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    24dc:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <twi_inRepStart>
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	c1 f4       	brne	.+48     	; 0x2514 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    24e4:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    24e8:	8b eb       	ldi	r24, 0xBB	; 187
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <twi_slarw>
    24f0:	fc 01       	movw	r30, r24
    24f2:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    24f4:	8c eb       	ldi	r24, 0xBC	; 188
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	fc 01       	movw	r30, r24
    24fa:	80 81       	ld	r24, Z
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	88 70       	andi	r24, 0x08	; 8
    2502:	99 27       	eor	r25, r25
    2504:	89 2b       	or	r24, r25
    2506:	81 f7       	brne	.-32     	; 0x24e8 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2508:	8c eb       	ldi	r24, 0xBC	; 188
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	25 ec       	ldi	r18, 0xC5	; 197
    250e:	fc 01       	movw	r30, r24
    2510:	20 83       	st	Z, r18
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2514:	8c eb       	ldi	r24, 0xBC	; 188
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	25 ee       	ldi	r18, 0xE5	; 229
    251a:	fc 01       	movw	r30, r24
    251c:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <twi_writeTo+0xe4>
    continue;
    2520:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2522:	8e 81       	ldd	r24, Y+6	; 0x06
    2524:	88 23       	and	r24, r24
    2526:	21 f0       	breq	.+8      	; 0x2530 <twi_writeTo+0xf2>
    2528:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <twi_state>
    252c:	82 30       	cpi	r24, 0x02	; 2
    252e:	c1 f3       	breq	.-16     	; 0x2520 <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    2530:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <twi_error>
    2534:	8f 3f       	cpi	r24, 0xFF	; 255
    2536:	11 f4       	brne	.+4      	; 0x253c <twi_writeTo+0xfe>
    return 0;	// success
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0d c0       	rjmp	.+26     	; 0x2556 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    253c:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <twi_error>
    2540:	80 32       	cpi	r24, 0x20	; 32
    2542:	11 f4       	brne	.+4      	; 0x2548 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    2544:	82 e0       	ldi	r24, 0x02	; 2
    2546:	07 c0       	rjmp	.+14     	; 0x2556 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    2548:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <twi_error>
    254c:	80 33       	cpi	r24, 0x30	; 48
    254e:	11 f4       	brne	.+4      	; 0x2554 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	01 c0       	rjmp	.+2      	; 0x2556 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    2554:	84 e0       	ldi	r24, 0x04	; 4
}
    2556:	27 96       	adiw	r28, 0x07	; 7
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	00 d0       	rcall	.+0      	; 0x2570 <twi_transmit+0x6>
    2570:	00 d0       	rcall	.+0      	; 0x2572 <twi_transmit+0x8>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	9b 83       	std	Y+3, r25	; 0x03
    2578:	8a 83       	std	Y+2, r24	; 0x02
    257a:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    257c:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <twi_txBufferLength>
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	8c 81       	ldd	r24, Y+4	; 0x04
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	81 97       	sbiw	r24, 0x21	; 33
    2590:	14 f0       	brlt	.+4      	; 0x2596 <twi_transmit+0x2c>
    return 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	2c c0       	rjmp	.+88     	; 0x25ee <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    2596:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <twi_state>
    259a:	84 30       	cpi	r24, 0x04	; 4
    259c:	11 f0       	breq	.+4      	; 0x25a2 <twi_transmit+0x38>
    return 2;
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	26 c0       	rjmp	.+76     	; 0x25ee <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    25a2:	19 82       	std	Y+1, r1	; 0x01
    25a4:	19 c0       	rjmp	.+50     	; 0x25d8 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    25a6:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <twi_txBufferLength>
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	82 0f       	add	r24, r18
    25b6:	93 1f       	adc	r25, r19
    25b8:	29 81       	ldd	r18, Y+1	; 0x01
    25ba:	22 2f       	mov	r18, r18
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a 81       	ldd	r20, Y+2	; 0x02
    25c0:	5b 81       	ldd	r21, Y+3	; 0x03
    25c2:	24 0f       	add	r18, r20
    25c4:	35 1f       	adc	r19, r21
    25c6:	f9 01       	movw	r30, r18
    25c8:	20 81       	ld	r18, Z
    25ca:	8b 5e       	subi	r24, 0xEB	; 235
    25cc:	98 4f       	sbci	r25, 0xF8	; 248
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	99 81       	ldd	r25, Y+1	; 0x01
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	98 17       	cp	r25, r24
    25de:	18 f3       	brcs	.-58     	; 0x25a6 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    25e0:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <twi_txBufferLength>
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	89 0f       	add	r24, r25
    25e8:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <twi_txBufferLength>
  
  return 0;
    25ec:	80 e0       	ldi	r24, 0x00	; 0
}
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	00 d0       	rcall	.+0      	; 0x2602 <twi_attachSlaveRxEvent+0x6>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <twi_onSlaveReceive+0x1>
    2612:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <twi_onSlaveReceive>
}
    2616:	00 00       	nop
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	00 d0       	rcall	.+0      	; 0x2628 <twi_attachSlaveTxEvent+0x6>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <twi_onSlaveTransmit+0x1>
    2638:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <twi_onSlaveTransmit>
}
    263c:	00 00       	nop
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	1f 92       	push	r1
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	88 23       	and	r24, r24
    2658:	31 f0       	breq	.+12     	; 0x2666 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    265a:	8c eb       	ldi	r24, 0xBC	; 188
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	25 ec       	ldi	r18, 0xC5	; 197
    2660:	fc 01       	movw	r30, r24
    2662:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2666:	8c eb       	ldi	r24, 0xBC	; 188
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	25 e8       	ldi	r18, 0x85	; 133
    266c:	fc 01       	movw	r30, r24
    266e:	20 83       	st	Z, r18
  }
}
    2670:	00 00       	nop
    2672:	0f 90       	pop	r0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2682:	8c eb       	ldi	r24, 0xBC	; 188
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	25 ed       	ldi	r18, 0xD5	; 213
    2688:	fc 01       	movw	r30, r24
    268a:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <twi_stop+0x16>
    continue;
    268e:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2690:	8c eb       	ldi	r24, 0xBC	; 188
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	fc 01       	movw	r30, r24
    2696:	80 81       	ld	r24, Z
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	80 71       	andi	r24, 0x10	; 16
    269e:	99 27       	eor	r25, r25
    26a0:	89 2b       	or	r24, r25
    26a2:	a9 f7       	brne	.-22     	; 0x268e <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    26a4:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_state>
}
    26a8:	00 00       	nop
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    26b8:	8c eb       	ldi	r24, 0xBC	; 188
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	25 ec       	ldi	r18, 0xC5	; 197
    26be:	fc 01       	movw	r30, r24
    26c0:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    26c2:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_state>
}
    26c6:	00 00       	nop
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	08 95       	ret

000026ce <__vector_24>:

ISR(TWI_vect)
{
    26ce:	1f 92       	push	r1
    26d0:	0f 92       	push	r0
    26d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    26d6:	0f 92       	push	r0
    26d8:	11 24       	eor	r1, r1
    26da:	2f 93       	push	r18
    26dc:	3f 93       	push	r19
    26de:	4f 93       	push	r20
    26e0:	5f 93       	push	r21
    26e2:	6f 93       	push	r22
    26e4:	7f 93       	push	r23
    26e6:	8f 93       	push	r24
    26e8:	9f 93       	push	r25
    26ea:	af 93       	push	r26
    26ec:	bf 93       	push	r27
    26ee:	ef 93       	push	r30
    26f0:	ff 93       	push	r31
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    26fa:	89 eb       	ldi	r24, 0xB9	; 185
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	80 81       	ld	r24, Z
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	88 7f       	andi	r24, 0xF8	; 248
    2708:	99 27       	eor	r25, r25
    270a:	09 2e       	mov	r0, r25
    270c:	00 0c       	add	r0, r0
    270e:	aa 0b       	sbc	r26, r26
    2710:	bb 0b       	sbc	r27, r27
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	28 ef       	ldi	r18, 0xF8	; 248
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	84 1b       	sub	r24, r20
    271c:	95 0b       	sbc	r25, r21
    271e:	28 17       	cp	r18, r24
    2720:	39 07       	cpc	r19, r25
    2722:	08 f4       	brcc	.+2      	; 0x2726 <__vector_24+0x58>
    2724:	17 c1       	rjmp	.+558    	; 0x2954 <__vector_24+0x286>
    2726:	8c 5c       	subi	r24, 0xCC	; 204
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	fc 01       	movw	r30, r24
    272c:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2730:	8b eb       	ldi	r24, 0xBB	; 187
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <twi_slarw>
    2738:	fc 01       	movw	r30, r24
    273a:	20 83       	st	Z, r18
      twi_reply(1);
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      break;
    2742:	08 c1       	rjmp	.+528    	; 0x2954 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2744:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <twi_masterBufferIndex>
    2748:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <twi_masterBufferLength>
    274c:	98 17       	cp	r25, r24
    274e:	a0 f4       	brcc	.+40     	; 0x2778 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2750:	8b eb       	ldi	r24, 0xBB	; 187
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <twi_masterBufferIndex>
    2758:	31 e0       	ldi	r19, 0x01	; 1
    275a:	32 0f       	add	r19, r18
    275c:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <twi_masterBufferIndex>
    2760:	22 2f       	mov	r18, r18
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	2d 50       	subi	r18, 0x0D	; 13
    2766:	39 4f       	sbci	r19, 0xF9	; 249
    2768:	f9 01       	movw	r30, r18
    276a:	20 81       	ld	r18, Z
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
        twi_reply(1);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    2776:	ee c0       	rjmp	.+476    	; 0x2954 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2778:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <twi_sendStop>
    277c:	88 23       	and	r24, r24
    277e:	19 f0       	breq	.+6      	; 0x2786 <__vector_24+0xb8>
          twi_stop();
    2780:	0e 94 3d 13 	call	0x267a	; 0x267a <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    2784:	e7 c0       	rjmp	.+462    	; 0x2954 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    278c:	8c eb       	ldi	r24, 0xBC	; 188
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	24 ea       	ldi	r18, 0xA4	; 164
    2792:	fc 01       	movw	r30, r24
    2794:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    2796:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_state>
	}
      }
      break;
    279a:	dc c0       	rjmp	.+440    	; 0x2954 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    279c:	80 e2       	ldi	r24, 0x20	; 32
    279e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>
      twi_stop();
    27a2:	0e 94 3d 13 	call	0x267a	; 0x267a <twi_stop>
      break;
    27a6:	d6 c0       	rjmp	.+428    	; 0x2954 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    27a8:	80 e3       	ldi	r24, 0x30	; 48
    27aa:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>
      twi_stop();
    27ae:	0e 94 3d 13 	call	0x267a	; 0x267a <twi_stop>
      break;
    27b2:	d0 c0       	rjmp	.+416    	; 0x2954 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    27b4:	88 e3       	ldi	r24, 0x38	; 56
    27b6:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>
      twi_releaseBus();
    27ba:	0e 94 58 13 	call	0x26b0	; 0x26b0 <twi_releaseBus>
      break;
    27be:	ca c0       	rjmp	.+404    	; 0x2954 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    27c0:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <twi_masterBufferIndex>
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	98 0f       	add	r25, r24
    27c8:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <twi_masterBufferIndex>
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	2b eb       	ldi	r18, 0xBB	; 187
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	f9 01       	movw	r30, r18
    27d6:	20 81       	ld	r18, Z
    27d8:	8d 50       	subi	r24, 0x0D	; 13
    27da:	99 4f       	sbci	r25, 0xF9	; 249
    27dc:	fc 01       	movw	r30, r24
    27de:	20 83       	st	Z, r18
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    27e0:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <twi_masterBufferIndex>
    27e4:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <twi_masterBufferLength>
    27e8:	98 17       	cp	r25, r24
    27ea:	20 f4       	brcc	.+8      	; 0x27f4 <__vector_24+0x126>
        twi_reply(1);
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    27f2:	b0 c0       	rjmp	.+352    	; 0x2954 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      }
      break;
    27fa:	ac c0       	rjmp	.+344    	; 0x2954 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    27fc:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <twi_masterBufferIndex>
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	98 0f       	add	r25, r24
    2804:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <twi_masterBufferIndex>
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	2b eb       	ldi	r18, 0xBB	; 187
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	f9 01       	movw	r30, r18
    2812:	20 81       	ld	r18, Z
    2814:	8d 50       	subi	r24, 0x0D	; 13
    2816:	99 4f       	sbci	r25, 0xF9	; 249
    2818:	fc 01       	movw	r30, r24
    281a:	20 83       	st	Z, r18
	if (twi_sendStop)
    281c:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <twi_sendStop>
    2820:	88 23       	and	r24, r24
    2822:	19 f0       	breq	.+6      	; 0x282a <__vector_24+0x15c>
          twi_stop();
    2824:	0e 94 3d 13 	call	0x267a	; 0x267a <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    2828:	95 c0       	rjmp	.+298    	; 0x2954 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2830:	8c eb       	ldi	r24, 0xBC	; 188
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	24 ea       	ldi	r18, 0xA4	; 164
    2836:	fc 01       	movw	r30, r24
    2838:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    283a:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_state>
	}    
	break;
    283e:	8a c0       	rjmp	.+276    	; 0x2954 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2840:	0e 94 3d 13 	call	0x267a	; 0x267a <twi_stop>
      break;
    2844:	87 c0       	rjmp	.+270    	; 0x2954 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    284c:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <twi_rxBufferIndex>
      twi_reply(1);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      break;
    2856:	7e c0       	rjmp	.+252    	; 0x2954 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2858:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <twi_rxBufferIndex>
    285c:	80 32       	cpi	r24, 0x20	; 32
    285e:	a0 f4       	brcc	.+40     	; 0x2888 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2860:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <twi_rxBufferIndex>
    2864:	91 e0       	ldi	r25, 0x01	; 1
    2866:	98 0f       	add	r25, r24
    2868:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <twi_rxBufferIndex>
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	2b eb       	ldi	r18, 0xBB	; 187
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	f9 01       	movw	r30, r18
    2876:	20 81       	ld	r18, Z
    2878:	89 5c       	subi	r24, 0xC9	; 201
    287a:	98 4f       	sbci	r25, 0xF8	; 248
    287c:	fc 01       	movw	r30, r24
    287e:	20 83       	st	Z, r18
        twi_reply(1);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    2886:	66 c0       	rjmp	.+204    	; 0x2954 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      }
      break;
    288e:	62 c0       	rjmp	.+196    	; 0x2954 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2890:	0e 94 58 13 	call	0x26b0	; 0x26b0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2894:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <twi_rxBufferIndex>
    2898:	80 32       	cpi	r24, 0x20	; 32
    289a:	40 f4       	brcc	.+16     	; 0x28ac <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    289c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <twi_rxBufferIndex>
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	89 5c       	subi	r24, 0xC9	; 201
    28a6:	98 4f       	sbci	r25, 0xF8	; 248
    28a8:	fc 01       	movw	r30, r24
    28aa:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    28ac:	20 91 f1 06 	lds	r18, 0x06F1	; 0x8006f1 <twi_onSlaveReceive>
    28b0:	30 91 f2 06 	lds	r19, 0x06F2	; 0x8006f2 <twi_onSlaveReceive+0x1>
    28b4:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <twi_rxBufferIndex>
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	bc 01       	movw	r22, r24
    28be:	87 e3       	ldi	r24, 0x37	; 55
    28c0:	97 e0       	ldi	r25, 0x07	; 7
    28c2:	f9 01       	movw	r30, r18
    28c4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    28c6:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <twi_rxBufferIndex>
      break;
    28ca:	44 c0       	rjmp	.+136    	; 0x2954 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      break;
    28d2:	40 c0       	rjmp	.+128    	; 0x2954 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    28da:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    28de:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    28e2:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <twi_onSlaveTransmit>
    28e6:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <twi_onSlaveTransmit+0x1>
    28ea:	fc 01       	movw	r30, r24
    28ec:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    28ee:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <twi_txBufferLength>
    28f2:	88 23       	and	r24, r24
    28f4:	29 f4       	brne	.+10     	; 0x2900 <__vector_24+0x232>
        twi_txBufferLength = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    28fc:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2900:	8b eb       	ldi	r24, 0xBB	; 187
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <twi_txBufferIndex>
    2908:	31 e0       	ldi	r19, 0x01	; 1
    290a:	32 0f       	add	r19, r18
    290c:	30 93 35 07 	sts	0x0735, r19	; 0x800735 <twi_txBufferIndex>
    2910:	22 2f       	mov	r18, r18
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	2b 5e       	subi	r18, 0xEB	; 235
    2916:	38 4f       	sbci	r19, 0xF8	; 248
    2918:	f9 01       	movw	r30, r18
    291a:	20 81       	ld	r18, Z
    291c:	fc 01       	movw	r30, r24
    291e:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2920:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <twi_txBufferIndex>
    2924:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <twi_txBufferLength>
    2928:	98 17       	cp	r25, r24
    292a:	20 f4       	brcc	.+8      	; 0x2934 <__vector_24+0x266>
        twi_reply(1);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    2932:	10 c0       	rjmp	.+32     	; 0x2954 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      }
      break;
    293a:	0c c0       	rjmp	.+24     	; 0x2954 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    2942:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_state>
      break;
    2946:	06 c0       	rjmp	.+12     	; 0x2954 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2948:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <twi_error>
      twi_stop();
    294c:	0e 94 3d 13 	call	0x267a	; 0x267a <twi_stop>
      break;
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    2952:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2954:	00 00       	nop
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	ff 91       	pop	r31
    295c:	ef 91       	pop	r30
    295e:	bf 91       	pop	r27
    2960:	af 91       	pop	r26
    2962:	9f 91       	pop	r25
    2964:	8f 91       	pop	r24
    2966:	7f 91       	pop	r23
    2968:	6f 91       	pop	r22
    296a:	5f 91       	pop	r21
    296c:	4f 91       	pop	r20
    296e:	3f 91       	pop	r19
    2970:	2f 91       	pop	r18
    2972:	0f 90       	pop	r0
    2974:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2978:	0f 90       	pop	r0
    297a:	1f 90       	pop	r1
    297c:	18 95       	reti

0000297e <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	00 d0       	rcall	.+0      	; 0x2984 <_ZN7TwoWireC1Ev+0x6>
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN6StreamC1Ev>
    2994:	2b ec       	ldi	r18, 0xCB	; 203
    2996:	32 e0       	ldi	r19, 0x02	; 2
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	fc 01       	movw	r30, r24
    299e:	31 83       	std	Z+1, r19	; 0x01
    29a0:	20 83       	st	Z, r18
{
}
    29a2:	00 00       	nop
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <_ZN7TwoWire5beginEv+0x6>
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    29bc:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    29c0:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    29c4:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    29c8:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    29cc:	0e 94 0e 11 	call	0x221c	; 0x221c <twi_init>
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
    29d0:	8b ef       	ldi	r24, 0xFB	; 251
    29d2:	97 e1       	ldi	r25, 0x17	; 23
    29d4:	0e 94 11 13 	call	0x2622	; 0x2622 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
    29d8:	8e ea       	ldi	r24, 0xAE	; 174
    29da:	97 e1       	ldi	r25, 0x17	; 23
    29dc:	0e 94 fe 12 	call	0x25fc	; 0x25fc <twi_attachSlaveRxEvent>
}
    29e0:	00 00       	nop
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	08 95       	ret

000029ec <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <_ZN7TwoWire5beginEh+0x6>
    29f2:	1f 92       	push	r1
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	6b 83       	std	Y+3, r22	; 0x03
  begin();
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN7TwoWire5beginEv>
  twi_setAddress(address);
    2a06:	8b 81       	ldd	r24, Y+3	; 0x03
    2a08:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <twi_setAddress>
}
    2a0c:	00 00       	nop
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	08 95       	ret

00002a1a <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <_ZN7TwoWire5beginEi+0x6>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <_ZN7TwoWire5beginEi+0x8>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	9a 83       	std	Y+2, r25	; 0x02
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	7c 83       	std	Y+4, r23	; 0x04
    2a2c:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    2a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	9a 81       	ldd	r25, Y+2	; 0x02
    2a34:	62 2f       	mov	r22, r18
    2a36:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7TwoWire5beginEh>
}
    2a3a:	00 00       	nop
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	08 95       	ret

00002a4a <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <_ZN7TwoWire3endEv+0x6>
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    2a58:	0e 94 41 11 	call	0x2282	; 0x2282 <twi_disable>
}
    2a5c:	00 00       	nop
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <_ZN7TwoWire8setClockEm+0x6>
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <_ZN7TwoWire8setClockEm+0x8>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <_ZN7TwoWire8setClockEm+0xa>
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	4b 83       	std	Y+3, r20	; 0x03
    2a7c:	5c 83       	std	Y+4, r21	; 0x04
    2a7e:	6d 83       	std	Y+5, r22	; 0x05
    2a80:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	ad 81       	ldd	r26, Y+5	; 0x05
    2a88:	be 81       	ldd	r27, Y+6	; 0x06
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <twi_setFrequency>
}
    2a92:	00 00       	nop
    2a94:	26 96       	adiw	r28, 0x06	; 6
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	08 95       	ret

00002aa6 <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    2aa6:	cf 92       	push	r12
    2aa8:	ef 92       	push	r14
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	2b 97       	sbiw	r28, 0x0b	; 11
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	9b 83       	std	Y+3, r25	; 0x03
    2ac4:	8a 83       	std	Y+2, r24	; 0x02
    2ac6:	6c 83       	std	Y+4, r22	; 0x04
    2ac8:	4d 83       	std	Y+5, r20	; 0x05
    2aca:	0e 83       	std	Y+6, r16	; 0x06
    2acc:	1f 83       	std	Y+7, r17	; 0x07
    2ace:	28 87       	std	Y+8, r18	; 0x08
    2ad0:	39 87       	std	Y+9, r19	; 0x09
    2ad2:	ea 86       	std	Y+10, r14	; 0x0a
    2ad4:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    2ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad8:	88 23       	and	r24, r24
    2ada:	e9 f1       	breq	.+122    	; 0x2b56 <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae0:	6c 81       	ldd	r22, Y+4	; 0x04
    2ae2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    2ae6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae8:	84 30       	cpi	r24, 0x04	; 4
    2aea:	10 f0       	brcs	.+4      	; 0x2af0 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2af0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af2:	9f ef       	ldi	r25, 0xFF	; 255
    2af4:	98 0f       	add	r25, r24
    2af6:	9a 87       	std	Y+10, r25	; 0x0a
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	88 23       	and	r24, r24
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	99 23       	and	r25, r25
    2b02:	21 f1       	breq	.+72     	; 0x2b4c <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	fc 01       	movw	r30, r24
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 81       	ld	r18, Z
    2b12:	31 81       	ldd	r19, Z+1	; 0x01
    2b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	44 0f       	add	r20, r20
    2b1e:	55 1f       	adc	r21, r21
    2b20:	44 0f       	add	r20, r20
    2b22:	55 1f       	adc	r21, r21
    2b24:	44 0f       	add	r20, r20
    2b26:	55 1f       	adc	r21, r21
    2b28:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2c:	a8 85       	ldd	r26, Y+8	; 0x08
    2b2e:	b9 85       	ldd	r27, Y+9	; 0x09
    2b30:	04 c0       	rjmp	.+8      	; 0x2b3a <_ZN7TwoWire11requestFromEhhmhh+0x94>
    2b32:	b6 95       	lsr	r27
    2b34:	a7 95       	ror	r26
    2b36:	97 95       	ror	r25
    2b38:	87 95       	ror	r24
    2b3a:	4a 95       	dec	r20
    2b3c:	d2 f7       	brpl	.-12     	; 0x2b32 <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    2b3e:	48 2f       	mov	r20, r24
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	64 2f       	mov	r22, r20
    2b46:	f9 01       	movw	r30, r18
    2b48:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2b4a:	d2 cf       	rjmp	.-92     	; 0x2af0 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	81 32       	cpi	r24, 0x21	; 33
    2b5a:	10 f0       	brcs	.+4      	; 0x2b60 <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    2b5c:	80 e2       	ldi	r24, 0x20	; 32
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2b60:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b62:	4d 81       	ldd	r20, Y+5	; 0x05
    2b64:	69 e5       	ldi	r22, 0x59	; 89
    2b66:	77 e0       	ldi	r23, 0x07	; 7
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	0e 94 9a 11 	call	0x2334	; 0x2334 <twi_readFrom>
    2b6e:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2b70:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>

  return read;
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b7c:	2b 96       	adiw	r28, 0x0b	; 11
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ef 90       	pop	r14
    2b92:	cf 90       	pop	r12
    2b94:	08 95       	ret

00002b96 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    2b96:	cf 92       	push	r12
    2b98:	ef 92       	push	r14
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <_ZN7TwoWire11requestFromEhhh+0xe>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <_ZN7TwoWire11requestFromEhhh+0x10>
    2ba6:	1f 92       	push	r1
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	6b 83       	std	Y+3, r22	; 0x03
    2bb2:	4c 83       	std	Y+4, r20	; 0x04
    2bb4:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	cd 80       	ldd	r12, Y+5	; 0x05
    2bbc:	e1 2c       	mov	r14, r1
    2bbe:	00 e0       	ldi	r16, 0x00	; 0
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
    2bc2:	98 01       	movw	r18, r16
    2bc4:	4c 81       	ldd	r20, Y+4	; 0x04
    2bc6:	6b 81       	ldd	r22, Y+3	; 0x03
    2bc8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <_ZN7TwoWire11requestFromEhhmhh>
}
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ef 90       	pop	r14
    2be0:	cf 90       	pop	r12
    2be2:	08 95       	ret

00002be4 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <_ZN7TwoWire11requestFromEhh+0x6>
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <_ZN7TwoWire11requestFromEhh+0x8>
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	6b 83       	std	Y+3, r22	; 0x03
    2bf6:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	21 e0       	ldi	r18, 0x01	; 1
    2bfe:	4c 81       	ldd	r20, Y+4	; 0x04
    2c00:	6b 81       	ldd	r22, Y+3	; 0x03
    2c02:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire11requestFromEhhh>
}
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	08 95       	ret

00002c14 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <_ZN7TwoWire11requestFromEii+0x6>
    2c1a:	00 d0       	rcall	.+0      	; 0x2c1c <_ZN7TwoWire11requestFromEii+0x8>
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <_ZN7TwoWire11requestFromEii+0xa>
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	7c 83       	std	Y+4, r23	; 0x04
    2c28:	6b 83       	std	Y+3, r22	; 0x03
    2c2a:	5e 83       	std	Y+6, r21	; 0x06
    2c2c:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2c2e:	4d 81       	ldd	r20, Y+5	; 0x05
    2c30:	3b 81       	ldd	r19, Y+3	; 0x03
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	21 e0       	ldi	r18, 0x01	; 1
    2c38:	63 2f       	mov	r22, r19
    2c3a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire11requestFromEhhh>
}
    2c3e:	26 96       	adiw	r28, 0x06	; 6
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	08 95       	ret

00002c50 <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	28 97       	sbiw	r28, 0x08	; 8
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	7c 83       	std	Y+4, r23	; 0x04
    2c6a:	6b 83       	std	Y+3, r22	; 0x03
    2c6c:	5e 83       	std	Y+6, r21	; 0x06
    2c6e:	4d 83       	std	Y+5, r20	; 0x05
    2c70:	38 87       	std	Y+8, r19	; 0x08
    2c72:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    2c74:	2f 81       	ldd	r18, Y+7	; 0x07
    2c76:	4d 81       	ldd	r20, Y+5	; 0x05
    2c78:	3b 81       	ldd	r19, Y+3	; 0x03
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	63 2f       	mov	r22, r19
    2c80:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire11requestFromEhhh>
}
    2c84:	28 96       	adiw	r28, 0x08	; 8
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <_ZN7TwoWire17beginTransmissionEh+0x6>
    2c9c:	1f 92       	push	r1
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2cb4:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2cb8:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
}
    2cbc:	00 00       	nop
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <_ZN7TwoWire17beginTransmissionEi+0x6>
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <_ZN7TwoWire17beginTransmissionEi+0x8>
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	7c 83       	std	Y+4, r23	; 0x04
    2cdc:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    2cde:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	62 2f       	mov	r22, r18
    2ce6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN7TwoWire17beginTransmissionEh>
}
    2cea:	00 00       	nop
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2cfa:	0f 93       	push	r16
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <_ZN7TwoWire15endTransmissionEh+0x8>
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <_ZN7TwoWire15endTransmissionEh+0xa>
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	9b 83       	std	Y+3, r25	; 0x03
    2d0a:	8a 83       	std	Y+2, r24	; 0x02
    2d0c:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2d0e:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    2d12:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <_ZN7TwoWire9txAddressE>
    2d16:	0c 81       	ldd	r16, Y+4	; 0x04
    2d18:	21 e0       	ldi	r18, 0x01	; 1
    2d1a:	49 2f       	mov	r20, r25
    2d1c:	6c e7       	ldi	r22, 0x7C	; 124
    2d1e:	77 e0       	ldi	r23, 0x07	; 7
    2d20:	0e 94 1f 12 	call	0x243e	; 0x243e <twi_writeTo>
    2d24:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2d26:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2d2a:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    2d2e:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire12transmittingE>
  return ret;
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	0f 91       	pop	r16
    2d42:	08 95       	ret

00002d44 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <_ZN7TwoWire15endTransmissionEv+0x6>
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEh>
}
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	08 95       	ret

00002d66 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2d66:	cf 93       	push	r28
    2d68:	df 93       	push	r29
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <_ZN7TwoWire5writeEh+0x6>
    2d6c:	1f 92       	push	r1
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2d78:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire12transmittingE>
    2d7c:	88 23       	and	r24, r24
    2d7e:	01 f1       	breq	.+64     	; 0x2dc0 <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2d80:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    2d84:	80 32       	cpi	r24, 0x20	; 32
    2d86:	48 f0       	brcs	.+18     	; 0x2d9a <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8c:	61 e0       	ldi	r22, 0x01	; 1
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN5Print13setWriteErrorEi>
      return 0;
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	1a c0       	rjmp	.+52     	; 0x2dce <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2d9a:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	2b 81       	ldd	r18, Y+3	; 0x03
    2da4:	84 58       	subi	r24, 0x84	; 132
    2da6:	98 4f       	sbci	r25, 0xF8	; 248
    2da8:	fc 01       	movw	r30, r24
    2daa:	20 83       	st	Z, r18
    ++txBufferIndex;
    2dac:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2db6:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
    2dba:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	03 96       	adiw	r24, 0x03	; 3
    2dc4:	61 e0       	ldi	r22, 0x01	; 1
    2dc6:	0e 94 b5 12 	call	0x256a	; 0x256a <twi_transmit>
  }
  return 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	08 95       	ret

00002dda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	28 97       	sbiw	r28, 0x08	; 8
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	7e 83       	std	Y+6, r23	; 0x06
    2df4:	6d 83       	std	Y+5, r22	; 0x05
    2df6:	58 87       	std	Y+8, r21	; 0x08
    2df8:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    2dfa:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire12transmittingE>
    2dfe:	88 23       	and	r24, r24
    2e00:	21 f1       	breq	.+72     	; 0x2e4a <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e02:	1a 82       	std	Y+2, r1	; 0x02
    2e04:	19 82       	std	Y+1, r1	; 0x01
    2e06:	29 81       	ldd	r18, Y+1	; 0x01
    2e08:	3a 81       	ldd	r19, Y+2	; 0x02
    2e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e0c:	98 85       	ldd	r25, Y+8	; 0x08
    2e0e:	28 17       	cp	r18, r24
    2e10:	39 07       	cpc	r19, r25
    2e12:	08 f5       	brcc	.+66     	; 0x2e56 <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	9c 81       	ldd	r25, Y+4	; 0x04
    2e18:	fc 01       	movw	r30, r24
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 81       	ld	r18, Z
    2e22:	31 81       	ldd	r19, Z+1	; 0x01
    2e24:	4d 81       	ldd	r20, Y+5	; 0x05
    2e26:	5e 81       	ldd	r21, Y+6	; 0x06
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	84 0f       	add	r24, r20
    2e2e:	95 1f       	adc	r25, r21
    2e30:	fc 01       	movw	r30, r24
    2e32:	40 81       	ld	r20, Z
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	64 2f       	mov	r22, r20
    2e3a:	f9 01       	movw	r30, r18
    2e3c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	de cf       	rjmp	.-68     	; 0x2e06 <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2e4a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	62 2f       	mov	r22, r18
    2e52:	0e 94 b5 12 	call	0x256a	; 0x256a <twi_transmit>
  }
  return quantity;
    2e56:	8f 81       	ldd	r24, Y+7	; 0x07
    2e58:	98 85       	ldd	r25, Y+8	; 0x08
}
    2e5a:	28 96       	adiw	r28, 0x08	; 8
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <_ZN7TwoWire9availableEv+0x6>
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2e7a:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	a9 01       	movw	r20, r18
    2e8c:	48 1b       	sub	r20, r24
    2e8e:	59 0b       	sbc	r21, r25
    2e90:	ca 01       	movw	r24, r20
}
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	08 95       	ret

00002e9c <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <_ZN7TwoWire4readEv+0x6>
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <_ZN7TwoWire4readEv+0x8>
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	9c 83       	std	Y+4, r25	; 0x04
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2eac:	8f ef       	ldi	r24, 0xFF	; 255
    2eae:	9f ef       	ldi	r25, 0xFF	; 255
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2eb4:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2eb8:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>
    2ebc:	98 17       	cp	r25, r24
    2ebe:	88 f4       	brcc	.+34     	; 0x2ee2 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    2ec0:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	87 5a       	subi	r24, 0xA7	; 167
    2eca:	98 4f       	sbci	r25, 0xF8	; 248
    2ecc:	fc 01       	movw	r30, r24
    2ece:	80 81       	ld	r24, Z
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    2ed8:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	08 95       	ret

00002ef4 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <_ZN7TwoWire4peekEv+0x6>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <_ZN7TwoWire4peekEv+0x8>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2f04:	8f ef       	ldi	r24, 0xFF	; 255
    2f06:	9f ef       	ldi	r25, 0xFF	; 255
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    2f0c:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2f10:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>
    2f14:	98 17       	cp	r25, r24
    2f16:	60 f4       	brcc	.+24     	; 0x2f30 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    2f18:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	87 5a       	subi	r24, 0xA7	; 167
    2f22:	98 4f       	sbci	r25, 0xF8	; 248
    2f24:	fc 01       	movw	r30, r24
    2f26:	80 81       	ld	r24, Z
    2f28:	88 2f       	mov	r24, r24
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	08 95       	ret

00002f42 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <_ZN7TwoWire5flushEv+0x6>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    2f50:	00 00       	nop
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2f64:	1f 92       	push	r1
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	9b 83       	std	Y+3, r25	; 0x03
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
    2f6e:	7d 83       	std	Y+5, r23	; 0x05
    2f70:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2f72:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <_ZN7TwoWire14user_onReceiveE>
    2f76:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <_ZN7TwoWire14user_onReceiveE+0x1>
    2f7a:	89 2b       	or	r24, r25
    2f7c:	89 f1       	breq	.+98     	; 0x2fe0 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2f7e:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
    2f82:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>
    2f86:	98 17       	cp	r25, r24
    2f88:	68 f1       	brcs	.+90     	; 0x2fe4 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2f8a:	19 82       	std	Y+1, r1	; 0x01
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	8c 81       	ldd	r24, Y+4	; 0x04
    2f94:	9d 81       	ldd	r25, Y+5	; 0x05
    2f96:	28 17       	cp	r18, r24
    2f98:	39 07       	cpc	r19, r25
    2f9a:	a4 f4       	brge	.+40     	; 0x2fc4 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	29 81       	ldd	r18, Y+1	; 0x01
    2fa4:	22 2f       	mov	r18, r18
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	4a 81       	ldd	r20, Y+2	; 0x02
    2faa:	5b 81       	ldd	r21, Y+3	; 0x03
    2fac:	24 0f       	add	r18, r20
    2fae:	35 1f       	adc	r19, r21
    2fb0:	f9 01       	movw	r30, r18
    2fb2:	20 81       	ld	r18, Z
    2fb4:	87 5a       	subi	r24, 0xA7	; 167
    2fb6:	98 4f       	sbci	r25, 0xF8	; 248
    2fb8:	fc 01       	movw	r30, r24
    2fba:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	e4 cf       	rjmp	.-56     	; 0x2f8c <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2fc4:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fca:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    2fce:	20 91 a1 07 	lds	r18, 0x07A1	; 0x8007a1 <_ZN7TwoWire14user_onReceiveE>
    2fd2:	30 91 a2 07 	lds	r19, 0x07A2	; 0x8007a2 <_ZN7TwoWire14user_onReceiveE+0x1>
    2fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fda:	f9 01       	movw	r30, r18
    2fdc:	09 95       	icall
    2fde:	03 c0       	rjmp	.+6      	; 0x2fe6 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    2fe0:	00 00       	nop
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    2fe4:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	08 95       	ret

00002ff6 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    2ffe:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <_ZN7TwoWire14user_onRequestE>
    3002:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <_ZN7TwoWire14user_onRequestE+0x1>
    3006:	89 2b       	or	r24, r25
    3008:	59 f0       	breq	.+22     	; 0x3020 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    300a:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    300e:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    3012:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <_ZN7TwoWire14user_onRequestE>
    3016:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <_ZN7TwoWire14user_onRequestE+0x1>
    301a:	fc 01       	movw	r30, r24
    301c:	09 95       	icall
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    3020:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	08 95       	ret

00003028 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	00 d0       	rcall	.+0      	; 0x302e <_ZN7TwoWire9onReceiveEPFviE+0x6>
    302e:	00 d0       	rcall	.+0      	; 0x3030 <_ZN7TwoWire9onReceiveEPFviE+0x8>
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	7c 83       	std	Y+4, r23	; 0x04
    303a:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	9c 81       	ldd	r25, Y+4	; 0x04
    3040:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <_ZN7TwoWire14user_onReceiveE+0x1>
    3044:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <_ZN7TwoWire14user_onReceiveE>
}
    3048:	00 00       	nop
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	08 95       	ret

00003058 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	00 d0       	rcall	.+0      	; 0x305e <_ZN7TwoWire9onRequestEPFvvE+0x6>
    305e:	00 d0       	rcall	.+0      	; 0x3060 <_ZN7TwoWire9onRequestEPFvvE+0x8>
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	7c 83       	std	Y+4, r23	; 0x04
    306a:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	9c 81       	ldd	r25, Y+4	; 0x04
    3070:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <_ZN7TwoWire14user_onRequestE+0x1>
    3074:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <_ZN7TwoWire14user_onRequestE>
}
    3078:	00 00       	nop
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	08 95       	ret

00003088 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	00 d0       	rcall	.+0      	; 0x308e <_Z41__static_initialization_and_destruction_0ii+0x6>
    308e:	00 d0       	rcall	.+0      	; 0x3090 <_Z41__static_initialization_and_destruction_0ii+0x8>
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	7c 83       	std	Y+4, r23	; 0x04
    309a:	6b 83       	std	Y+3, r22	; 0x03
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	41 f4       	brne	.+16     	; 0x30b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	21 f4       	brne	.+8      	; 0x30b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    30ac:	83 ea       	ldi	r24, 0xA3	; 163
    30ae:	97 e0       	ldi	r25, 0x07	; 7
    30b0:	0e 94 bf 14 	call	0x297e	; 0x297e <_ZN7TwoWireC1Ev>
    30b4:	00 00       	nop
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	6f ef       	ldi	r22, 0xFF	; 255
    30ce:	7f ef       	ldi	r23, 0xFF	; 255
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 44 18 	call	0x3088	; 0x3088 <_Z41__static_initialization_and_destruction_0ii>
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	08 95       	ret

000030de <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <_ZN5PrintaSERKS_+0x6>
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <_ZN5PrintaSERKS_+0x8>
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	7c 83       	std	Y+4, r23	; 0x04
    30f0:	6b 83       	std	Y+3, r22	; 0x03
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	fc 01       	movw	r30, r24
    30f8:	22 81       	ldd	r18, Z+2	; 0x02
    30fa:	33 81       	ldd	r19, Z+3	; 0x03
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	fc 01       	movw	r30, r24
    3102:	33 83       	std	Z+3, r19	; 0x03
    3104:	22 83       	std	Z+2, r18	; 0x02
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	08 95       	ret

00003118 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	00 d0       	rcall	.+0      	; 0x311e <_ZN6StreamaSERKS_+0x6>
    311e:	00 d0       	rcall	.+0      	; 0x3120 <_ZN6StreamaSERKS_+0x8>
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	7c 83       	std	Y+4, r23	; 0x04
    312a:	6b 83       	std	Y+3, r22	; 0x03
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	b9 01       	movw	r22, r18
    3136:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN5PrintaSERKS_>
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	fc 01       	movw	r30, r24
    3140:	84 81       	ldd	r24, Z+4	; 0x04
    3142:	95 81       	ldd	r25, Z+5	; 0x05
    3144:	a6 81       	ldd	r26, Z+6	; 0x06
    3146:	b7 81       	ldd	r27, Z+7	; 0x07
    3148:	29 81       	ldd	r18, Y+1	; 0x01
    314a:	3a 81       	ldd	r19, Y+2	; 0x02
    314c:	f9 01       	movw	r30, r18
    314e:	84 83       	std	Z+4, r24	; 0x04
    3150:	95 83       	std	Z+5, r25	; 0x05
    3152:	a6 83       	std	Z+6, r26	; 0x06
    3154:	b7 83       	std	Z+7, r27	; 0x07
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	9c 81       	ldd	r25, Y+4	; 0x04
    315a:	fc 01       	movw	r30, r24
    315c:	80 85       	ldd	r24, Z+8	; 0x08
    315e:	91 85       	ldd	r25, Z+9	; 0x09
    3160:	a2 85       	ldd	r26, Z+10	; 0x0a
    3162:	b3 85       	ldd	r27, Z+11	; 0x0b
    3164:	29 81       	ldd	r18, Y+1	; 0x01
    3166:	3a 81       	ldd	r19, Y+2	; 0x02
    3168:	f9 01       	movw	r30, r18
    316a:	80 87       	std	Z+8, r24	; 0x08
    316c:	91 87       	std	Z+9, r25	; 0x09
    316e:	a2 87       	std	Z+10, r26	; 0x0a
    3170:	b3 87       	std	Z+11, r27	; 0x0b
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	08 95       	ret

00003184 <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	00 d0       	rcall	.+0      	; 0x318a <_ZN13Adafruit_FONAaSERKS_+0x6>
    318a:	00 d0       	rcall	.+0      	; 0x318c <_ZN13Adafruit_FONAaSERKS_+0x8>
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	7c 83       	std	Y+4, r23	; 0x04
    3196:	6b 83       	std	Y+3, r22	; 0x03
    3198:	2b 81       	ldd	r18, Y+3	; 0x03
    319a:	3c 81       	ldd	r19, Y+4	; 0x04
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	b9 01       	movw	r22, r18
    31a2:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN6StreamaSERKS_>
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	fc 01       	movw	r30, r24
    31ac:	24 85       	ldd	r18, Z+12	; 0x0c
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	fc 01       	movw	r30, r24
    31b4:	24 87       	std	Z+12, r18	; 0x0c
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ba:	fc 01       	movw	r30, r24
    31bc:	25 85       	ldd	r18, Z+13	; 0x0d
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	9a 81       	ldd	r25, Y+2	; 0x02
    31c2:	fc 01       	movw	r30, r24
    31c4:	25 87       	std	Z+13, r18	; 0x0d
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	ac 01       	movw	r20, r24
    31cc:	42 5f       	subi	r20, 0xF2	; 242
    31ce:	5f 4f       	sbci	r21, 0xFF	; 255
    31d0:	8e ef       	ldi	r24, 0xFE	; 254
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	2b 81       	ldd	r18, Y+3	; 0x03
    31d6:	3c 81       	ldd	r19, Y+4	; 0x04
    31d8:	22 5f       	subi	r18, 0xF2	; 242
    31da:	3f 4f       	sbci	r19, 0xFF	; 255
    31dc:	8f 3f       	cpi	r24, 0xFF	; 255
    31de:	ff ef       	ldi	r31, 0xFF	; 255
    31e0:	9f 07       	cpc	r25, r31
    31e2:	51 f0       	breq	.+20     	; 0x31f8 <_ZN13Adafruit_FONAaSERKS_+0x74>
    31e4:	f9 01       	movw	r30, r18
    31e6:	60 81       	ld	r22, Z
    31e8:	fa 01       	movw	r30, r20
    31ea:	60 83       	st	Z, r22
    31ec:	4f 5f       	subi	r20, 0xFF	; 255
    31ee:	5f 4f       	sbci	r21, 0xFF	; 255
    31f0:	2f 5f       	subi	r18, 0xFF	; 255
    31f2:	3f 4f       	sbci	r19, 0xFF	; 255
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f2 cf       	rjmp	.-28     	; 0x31dc <_ZN13Adafruit_FONAaSERKS_+0x58>
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	9c 81       	ldd	r25, Y+4	; 0x04
    31fc:	83 5f       	subi	r24, 0xF3	; 243
    31fe:	9e 4f       	sbci	r25, 0xFE	; 254
    3200:	fc 01       	movw	r30, r24
    3202:	20 81       	ld	r18, Z
    3204:	31 81       	ldd	r19, Z+1	; 0x01
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	83 5f       	subi	r24, 0xF3	; 243
    320c:	9e 4f       	sbci	r25, 0xFE	; 254
    320e:	fc 01       	movw	r30, r24
    3210:	31 83       	std	Z+1, r19	; 0x01
    3212:	20 83       	st	Z, r18
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	9c 81       	ldd	r25, Y+4	; 0x04
    3218:	81 5f       	subi	r24, 0xF1	; 241
    321a:	9e 4f       	sbci	r25, 0xFE	; 254
    321c:	fc 01       	movw	r30, r24
    321e:	20 81       	ld	r18, Z
    3220:	31 81       	ldd	r19, Z+1	; 0x01
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	81 5f       	subi	r24, 0xF1	; 241
    3228:	9e 4f       	sbci	r25, 0xFE	; 254
    322a:	fc 01       	movw	r30, r24
    322c:	31 83       	std	Z+1, r19	; 0x01
    322e:	20 83       	st	Z, r18
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	8f 5e       	subi	r24, 0xEF	; 239
    3236:	9e 4f       	sbci	r25, 0xFE	; 254
    3238:	fc 01       	movw	r30, r24
    323a:	20 81       	ld	r18, Z
    323c:	31 81       	ldd	r19, Z+1	; 0x01
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	9a 81       	ldd	r25, Y+2	; 0x02
    3242:	8f 5e       	subi	r24, 0xEF	; 239
    3244:	9e 4f       	sbci	r25, 0xFE	; 254
    3246:	fc 01       	movw	r30, r24
    3248:	31 83       	std	Z+1, r19	; 0x01
    324a:	20 83       	st	Z, r18
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	8d 5e       	subi	r24, 0xED	; 237
    3252:	9e 4f       	sbci	r25, 0xFE	; 254
    3254:	fc 01       	movw	r30, r24
    3256:	20 81       	ld	r18, Z
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	9a 81       	ldd	r25, Y+2	; 0x02
    325c:	8d 5e       	subi	r24, 0xED	; 237
    325e:	9e 4f       	sbci	r25, 0xFE	; 254
    3260:	fc 01       	movw	r30, r24
    3262:	20 83       	st	Z, r18
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	8c 5e       	subi	r24, 0xEC	; 236
    326a:	9e 4f       	sbci	r25, 0xFE	; 254
    326c:	fc 01       	movw	r30, r24
    326e:	20 81       	ld	r18, Z
    3270:	31 81       	ldd	r19, Z+1	; 0x01
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	9a 81       	ldd	r25, Y+2	; 0x02
    3276:	8c 5e       	subi	r24, 0xEC	; 236
    3278:	9e 4f       	sbci	r25, 0xFE	; 254
    327a:	fc 01       	movw	r30, r24
    327c:	31 83       	std	Z+1, r19	; 0x01
    327e:	20 83       	st	Z, r18
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	8a 5e       	subi	r24, 0xEA	; 234
    3286:	9e 4f       	sbci	r25, 0xFE	; 254
    3288:	fc 01       	movw	r30, r24
    328a:	20 81       	ld	r18, Z
    328c:	31 81       	ldd	r19, Z+1	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	8a 5e       	subi	r24, 0xEA	; 234
    3294:	9e 4f       	sbci	r25, 0xFE	; 254
    3296:	fc 01       	movw	r30, r24
    3298:	31 83       	std	Z+1, r19	; 0x01
    329a:	20 83       	st	Z, r18
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	9c 81       	ldd	r25, Y+4	; 0x04
    32a0:	88 5e       	subi	r24, 0xE8	; 232
    32a2:	9e 4f       	sbci	r25, 0xFE	; 254
    32a4:	fc 01       	movw	r30, r24
    32a6:	20 81       	ld	r18, Z
    32a8:	31 81       	ldd	r19, Z+1	; 0x01
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	9a 81       	ldd	r25, Y+2	; 0x02
    32ae:	88 5e       	subi	r24, 0xE8	; 232
    32b0:	9e 4f       	sbci	r25, 0xFE	; 254
    32b2:	fc 01       	movw	r30, r24
    32b4:	31 83       	std	Z+1, r19	; 0x01
    32b6:	20 83       	st	Z, r18
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	08 95       	ret

000032ca <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <_ZN14HardwareSerial5beginEm+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <_ZN14HardwareSerial5beginEm+0x8>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <_ZN14HardwareSerial5beginEm+0xa>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	9a 83       	std	Y+2, r25	; 0x02
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	4b 83       	std	Y+3, r20	; 0x03
    32de:	5c 83       	std	Y+4, r21	; 0x04
    32e0:	6d 83       	std	Y+5, r22	; 0x05
    32e2:	7e 83       	std	Y+6, r23	; 0x06
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	9c 81       	ldd	r25, Y+4	; 0x04
    32e8:	ad 81       	ldd	r26, Y+5	; 0x05
    32ea:	be 81       	ldd	r27, Y+6	; 0x06
    32ec:	e9 81       	ldd	r30, Y+1	; 0x01
    32ee:	fa 81       	ldd	r31, Y+2	; 0x02
    32f0:	26 e0       	ldi	r18, 0x06	; 6
    32f2:	ac 01       	movw	r20, r24
    32f4:	bd 01       	movw	r22, r26
    32f6:	cf 01       	movw	r24, r30
    32f8:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN14HardwareSerial5beginEmh>
    32fc:	00 00       	nop
    32fe:	26 96       	adiw	r28, 0x06	; 6
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	08 95       	ret

00003310 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	00 d0       	rcall	.+0      	; 0x3316 <_ZN7TwoWire5writeEi+0x6>
    3316:	00 d0       	rcall	.+0      	; 0x3318 <_ZN7TwoWire5writeEi+0x8>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	7c 83       	std	Y+4, r23	; 0x04
    3322:	6b 83       	std	Y+3, r22	; 0x03
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	fc 01       	movw	r30, r24
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	fc 01       	movw	r30, r24
    3330:	20 81       	ld	r18, Z
    3332:	31 81       	ldd	r19, Z+1	; 0x01
    3334:	4b 81       	ldd	r20, Y+3	; 0x03
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	64 2f       	mov	r22, r20
    333c:	f9 01       	movw	r30, r18
    333e:	09 95       	icall
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	08 95       	ret

0000334e <_ZN10SensorDataC1Ev>:
//};


//TODO: All these to be uint16_t ?

struct SensorData{
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	00 d0       	rcall	.+0      	; 0x3354 <_ZN10SensorDataC1Ev+0x6>
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	9a 83       	std	Y+2, r25	; 0x02
    335a:	89 83       	std	Y+1, r24	; 0x01
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	9a 81       	ldd	r25, Y+2	; 0x02
    3360:	21 e0       	ldi	r18, 0x01	; 1
    3362:	fc 01       	movw	r30, r24
    3364:	20 83       	st	Z, r18
    3366:	00 00       	nop
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	00 d0       	rcall	.+0      	; 0x3378 <_ZN5Print13setWriteErrorEi+0x6>
    3378:	00 d0       	rcall	.+0      	; 0x337a <_ZN5Print13setWriteErrorEi+0x8>
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	9a 83       	std	Y+2, r25	; 0x02
    3380:	89 83       	std	Y+1, r24	; 0x01
    3382:	7c 83       	std	Y+4, r23	; 0x04
    3384:	6b 83       	std	Y+3, r22	; 0x03
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	9a 81       	ldd	r25, Y+2	; 0x02
    338a:	2b 81       	ldd	r18, Y+3	; 0x03
    338c:	3c 81       	ldd	r19, Y+4	; 0x04
    338e:	fc 01       	movw	r30, r24
    3390:	33 83       	std	Z+3, r19	; 0x03
    3392:	22 83       	std	Z+2, r18	; 0x02
    3394:	00 00       	nop
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	08 95       	ret

000033a4 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <_ZN5PrintC1Ev+0x6>
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	2c e0       	ldi	r18, 0x0C	; 12
    33b4:	33 e0       	ldi	r19, 0x03	; 3
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	fc 01       	movw	r30, r24
    33bc:	31 83       	std	Z+1, r19	; 0x01
    33be:	20 83       	st	Z, r18
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	9a 81       	ldd	r25, Y+2	; 0x02
    33c4:	fc 01       	movw	r30, r24
    33c6:	13 82       	std	Z+3, r1	; 0x03
    33c8:	12 82       	std	Z+2, r1	; 0x02
    33ca:	00 00       	nop
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

000033d6 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	00 d0       	rcall	.+0      	; 0x33dc <_ZN6StreamC1Ev+0x6>
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	9a 83       	std	Y+2, r25	; 0x02
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5PrintC1Ev>
    33ec:	2b ed       	ldi	r18, 0xDB	; 219
    33ee:	32 e0       	ldi	r19, 0x02	; 2
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	9a 81       	ldd	r25, Y+2	; 0x02
    33f4:	fc 01       	movw	r30, r24
    33f6:	31 83       	std	Z+1, r19	; 0x01
    33f8:	20 83       	st	Z, r18
    33fa:	29 81       	ldd	r18, Y+1	; 0x01
    33fc:	3a 81       	ldd	r19, Y+2	; 0x02
    33fe:	88 ee       	ldi	r24, 0xE8	; 232
    3400:	93 e0       	ldi	r25, 0x03	; 3
    3402:	a0 e0       	ldi	r26, 0x00	; 0
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	f9 01       	movw	r30, r18
    3408:	84 83       	std	Z+4, r24	; 0x04
    340a:	95 83       	std	Z+5, r25	; 0x05
    340c:	a6 83       	std	Z+6, r26	; 0x06
    340e:	b7 83       	std	Z+7, r27	; 0x07
    3410:	00 00       	nop
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	08 95       	ret

0000341c <__floatunsisf>:
    341c:	e8 94       	clt
    341e:	09 c0       	rjmp	.+18     	; 0x3432 <__floatsisf+0x12>

00003420 <__floatsisf>:
    3420:	97 fb       	bst	r25, 7
    3422:	3e f4       	brtc	.+14     	; 0x3432 <__floatsisf+0x12>
    3424:	90 95       	com	r25
    3426:	80 95       	com	r24
    3428:	70 95       	com	r23
    342a:	61 95       	neg	r22
    342c:	7f 4f       	sbci	r23, 0xFF	; 255
    342e:	8f 4f       	sbci	r24, 0xFF	; 255
    3430:	9f 4f       	sbci	r25, 0xFF	; 255
    3432:	99 23       	and	r25, r25
    3434:	a9 f0       	breq	.+42     	; 0x3460 <__floatsisf+0x40>
    3436:	f9 2f       	mov	r31, r25
    3438:	96 e9       	ldi	r25, 0x96	; 150
    343a:	bb 27       	eor	r27, r27
    343c:	93 95       	inc	r25
    343e:	f6 95       	lsr	r31
    3440:	87 95       	ror	r24
    3442:	77 95       	ror	r23
    3444:	67 95       	ror	r22
    3446:	b7 95       	ror	r27
    3448:	f1 11       	cpse	r31, r1
    344a:	f8 cf       	rjmp	.-16     	; 0x343c <__floatsisf+0x1c>
    344c:	fa f4       	brpl	.+62     	; 0x348c <__floatsisf+0x6c>
    344e:	bb 0f       	add	r27, r27
    3450:	11 f4       	brne	.+4      	; 0x3456 <__floatsisf+0x36>
    3452:	60 ff       	sbrs	r22, 0
    3454:	1b c0       	rjmp	.+54     	; 0x348c <__floatsisf+0x6c>
    3456:	6f 5f       	subi	r22, 0xFF	; 255
    3458:	7f 4f       	sbci	r23, 0xFF	; 255
    345a:	8f 4f       	sbci	r24, 0xFF	; 255
    345c:	9f 4f       	sbci	r25, 0xFF	; 255
    345e:	16 c0       	rjmp	.+44     	; 0x348c <__floatsisf+0x6c>
    3460:	88 23       	and	r24, r24
    3462:	11 f0       	breq	.+4      	; 0x3468 <__floatsisf+0x48>
    3464:	96 e9       	ldi	r25, 0x96	; 150
    3466:	11 c0       	rjmp	.+34     	; 0x348a <__floatsisf+0x6a>
    3468:	77 23       	and	r23, r23
    346a:	21 f0       	breq	.+8      	; 0x3474 <__floatsisf+0x54>
    346c:	9e e8       	ldi	r25, 0x8E	; 142
    346e:	87 2f       	mov	r24, r23
    3470:	76 2f       	mov	r23, r22
    3472:	05 c0       	rjmp	.+10     	; 0x347e <__floatsisf+0x5e>
    3474:	66 23       	and	r22, r22
    3476:	71 f0       	breq	.+28     	; 0x3494 <__floatsisf+0x74>
    3478:	96 e8       	ldi	r25, 0x86	; 134
    347a:	86 2f       	mov	r24, r22
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	2a f0       	brmi	.+10     	; 0x348c <__floatsisf+0x6c>
    3482:	9a 95       	dec	r25
    3484:	66 0f       	add	r22, r22
    3486:	77 1f       	adc	r23, r23
    3488:	88 1f       	adc	r24, r24
    348a:	da f7       	brpl	.-10     	; 0x3482 <__floatsisf+0x62>
    348c:	88 0f       	add	r24, r24
    348e:	96 95       	lsr	r25
    3490:	87 95       	ror	r24
    3492:	97 f9       	bld	r25, 7
    3494:	08 95       	ret

00003496 <__cxa_pure_virtual>:
    3496:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <abort>

0000349a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    349a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    349c:	91 8d       	ldd	r25, Z+25	; 0x19
    349e:	22 8d       	ldd	r18, Z+26	; 0x1a
    34a0:	89 2f       	mov	r24, r25
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	80 5c       	subi	r24, 0xC0	; 192
    34a6:	9f 4f       	sbci	r25, 0xFF	; 255
    34a8:	82 1b       	sub	r24, r18
    34aa:	91 09       	sbc	r25, r1
}
    34ac:	8f 73       	andi	r24, 0x3F	; 63
    34ae:	99 27       	eor	r25, r25
    34b0:	08 95       	ret

000034b2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    34b2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    34b4:	91 8d       	ldd	r25, Z+25	; 0x19
    34b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    34b8:	98 17       	cp	r25, r24
    34ba:	31 f0       	breq	.+12     	; 0x34c8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    34bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    34be:	e8 0f       	add	r30, r24
    34c0:	f1 1d       	adc	r31, r1
    34c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    34c8:	8f ef       	ldi	r24, 0xFF	; 255
    34ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    34cc:	08 95       	ret

000034ce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    34ce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    34d0:	91 8d       	ldd	r25, Z+25	; 0x19
    34d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34d4:	98 17       	cp	r25, r24
    34d6:	61 f0       	breq	.+24     	; 0x34f0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    34d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    34da:	df 01       	movw	r26, r30
    34dc:	a8 0f       	add	r26, r24
    34de:	b1 1d       	adc	r27, r1
    34e0:	5d 96       	adiw	r26, 0x1d	; 29
    34e2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    34e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    34e6:	9f 5f       	subi	r25, 0xFF	; 255
    34e8:	9f 73       	andi	r25, 0x3F	; 63
    34ea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    34f0:	8f ef       	ldi	r24, 0xFF	; 255
    34f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    34f4:	08 95       	ret

000034f6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    34f6:	80 ed       	ldi	r24, 0xD0	; 208
    34f8:	9b e1       	ldi	r25, 0x1B	; 27
    34fa:	89 2b       	or	r24, r25
    34fc:	49 f0       	breq	.+18     	; 0x3510 <_Z14serialEventRunv+0x1a>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	89 2b       	or	r24, r25
    3504:	29 f0       	breq	.+10     	; 0x3510 <_Z14serialEventRunv+0x1a>
    3506:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_Z17Serial0_availablev>
    350a:	81 11       	cpse	r24, r1
    350c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3510:	08 95       	ret

00003512 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3512:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3514:	84 8d       	ldd	r24, Z+28	; 0x1c
    3516:	df 01       	movw	r26, r30
    3518:	a8 0f       	add	r26, r24
    351a:	b1 1d       	adc	r27, r1
    351c:	a3 5a       	subi	r26, 0xA3	; 163
    351e:	bf 4f       	sbci	r27, 0xFF	; 255
    3520:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3522:	84 8d       	ldd	r24, Z+28	; 0x1c
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	8f 73       	andi	r24, 0x3F	; 63
    352a:	99 27       	eor	r25, r25
    352c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    352e:	a6 89       	ldd	r26, Z+22	; 0x16
    3530:	b7 89       	ldd	r27, Z+23	; 0x17
    3532:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3534:	a0 89       	ldd	r26, Z+16	; 0x10
    3536:	b1 89       	ldd	r27, Z+17	; 0x11
    3538:	8c 91       	ld	r24, X
    353a:	80 64       	ori	r24, 0x40	; 64
    353c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    353e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3540:	84 8d       	ldd	r24, Z+28	; 0x1c
    3542:	98 13       	cpse	r25, r24
    3544:	06 c0       	rjmp	.+12     	; 0x3552 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3546:	02 88       	ldd	r0, Z+18	; 0x12
    3548:	f3 89       	ldd	r31, Z+19	; 0x13
    354a:	e0 2d       	mov	r30, r0
    354c:	80 81       	ld	r24, Z
    354e:	8f 7d       	andi	r24, 0xDF	; 223
    3550:	80 83       	st	Z, r24
    3552:	08 95       	ret

00003554 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ec 01       	movw	r28, r24
  _written = true;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3566:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3568:	8c 8d       	ldd	r24, Y+28	; 0x1c
    356a:	98 13       	cpse	r25, r24
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <_ZN14HardwareSerial5writeEh+0x24>
    356e:	e8 89       	ldd	r30, Y+16	; 0x10
    3570:	f9 89       	ldd	r31, Y+17	; 0x11
    3572:	80 81       	ld	r24, Z
    3574:	85 fd       	sbrc	r24, 5
    3576:	24 c0       	rjmp	.+72     	; 0x35c0 <_ZN14HardwareSerial5writeEh+0x6c>
    3578:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    357a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    357c:	10 e0       	ldi	r17, 0x00	; 0
    357e:	0f 5f       	subi	r16, 0xFF	; 255
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	0f 73       	andi	r16, 0x3F	; 63
    3584:	11 27       	eor	r17, r17
    3586:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3588:	8c 8d       	ldd	r24, Y+28	; 0x1c
    358a:	e8 12       	cpse	r14, r24
    358c:	0c c0       	rjmp	.+24     	; 0x35a6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	07 fc       	sbrc	r0, 7
    3592:	fa cf       	rjmp	.-12     	; 0x3588 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3594:	e8 89       	ldd	r30, Y+16	; 0x10
    3596:	f9 89       	ldd	r31, Y+17	; 0x11
    3598:	80 81       	ld	r24, Z
    359a:	85 ff       	sbrs	r24, 5
    359c:	f5 cf       	rjmp	.-22     	; 0x3588 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    359e:	ce 01       	movw	r24, r28
    35a0:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    35a4:	f1 cf       	rjmp	.-30     	; 0x3588 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    35a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35a8:	fe 01       	movw	r30, r28
    35aa:	e8 0f       	add	r30, r24
    35ac:	f1 1d       	adc	r31, r1
    35ae:	e3 5a       	subi	r30, 0xA3	; 163
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    35b4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    35b6:	ea 89       	ldd	r30, Y+18	; 0x12
    35b8:	fb 89       	ldd	r31, Y+19	; 0x13
    35ba:	80 81       	ld	r24, Z
    35bc:	80 62       	ori	r24, 0x20	; 32
    35be:	07 c0       	rjmp	.+14     	; 0x35ce <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    35c0:	ee 89       	ldd	r30, Y+22	; 0x16
    35c2:	ff 89       	ldd	r31, Y+23	; 0x17
    35c4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    35c6:	e8 89       	ldd	r30, Y+16	; 0x10
    35c8:	f9 89       	ldd	r31, Y+17	; 0x11
    35ca:	80 81       	ld	r24, Z
    35cc:	80 64       	ori	r24, 0x40	; 64
    35ce:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	08 95       	ret

000035e2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    35e2:	cf 93       	push	r28
    35e4:	df 93       	push	r29
    35e6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    35e8:	88 8d       	ldd	r24, Y+24	; 0x18
    35ea:	88 23       	and	r24, r24
    35ec:	c9 f0       	breq	.+50     	; 0x3620 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    35ee:	ea 89       	ldd	r30, Y+18	; 0x12
    35f0:	fb 89       	ldd	r31, Y+19	; 0x13
    35f2:	80 81       	ld	r24, Z
    35f4:	85 fd       	sbrc	r24, 5
    35f6:	05 c0       	rjmp	.+10     	; 0x3602 <_ZN14HardwareSerial5flushEv+0x20>
    35f8:	a8 89       	ldd	r26, Y+16	; 0x10
    35fa:	b9 89       	ldd	r27, Y+17	; 0x11
    35fc:	8c 91       	ld	r24, X
    35fe:	86 fd       	sbrc	r24, 6
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	07 fc       	sbrc	r0, 7
    3606:	f5 cf       	rjmp	.-22     	; 0x35f2 <_ZN14HardwareSerial5flushEv+0x10>
    3608:	80 81       	ld	r24, Z
    360a:	85 ff       	sbrs	r24, 5
    360c:	f2 cf       	rjmp	.-28     	; 0x35f2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    360e:	a8 89       	ldd	r26, Y+16	; 0x10
    3610:	b9 89       	ldd	r27, Y+17	; 0x11
    3612:	8c 91       	ld	r24, X
    3614:	85 ff       	sbrs	r24, 5
    3616:	ed cf       	rjmp	.-38     	; 0x35f2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3618:	ce 01       	movw	r24, r28
    361a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    361e:	e7 cf       	rjmp	.-50     	; 0x35ee <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	08 95       	ret

00003626 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3626:	cf 92       	push	r12
    3628:	df 92       	push	r13
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	ec 01       	movw	r28, r24
    3636:	6a 01       	movw	r12, r20
    3638:	7b 01       	movw	r14, r22
    363a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    363c:	e8 89       	ldd	r30, Y+16	; 0x10
    363e:	f9 89       	ldd	r31, Y+17	; 0x11
    3640:	82 e0       	ldi	r24, 0x02	; 2
    3642:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3644:	41 15       	cp	r20, r1
    3646:	51 4e       	sbci	r21, 0xE1	; 225
    3648:	61 05       	cpc	r22, r1
    364a:	71 05       	cpc	r23, r1
    364c:	b1 f0       	breq	.+44     	; 0x367a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	79 e0       	ldi	r23, 0x09	; 9
    3652:	8d e3       	ldi	r24, 0x3D	; 61
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a7 01       	movw	r20, r14
    3658:	96 01       	movw	r18, r12
    365a:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    365e:	da 01       	movw	r26, r20
    3660:	c9 01       	movw	r24, r18
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	a1 09       	sbc	r26, r1
    3666:	b1 09       	sbc	r27, r1
    3668:	b6 95       	lsr	r27
    366a:	a7 95       	ror	r26
    366c:	97 95       	ror	r25
    366e:	87 95       	ror	r24
    3670:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3672:	21 15       	cp	r18, r1
    3674:	80 e1       	ldi	r24, 0x10	; 16
    3676:	38 07       	cpc	r19, r24
    3678:	a8 f0       	brcs	.+42     	; 0x36a4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    367a:	e8 89       	ldd	r30, Y+16	; 0x10
    367c:	f9 89       	ldd	r31, Y+17	; 0x11
    367e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3680:	60 e8       	ldi	r22, 0x80	; 128
    3682:	74 e8       	ldi	r23, 0x84	; 132
    3684:	8e e1       	ldi	r24, 0x1E	; 30
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	a7 01       	movw	r20, r14
    368a:	96 01       	movw	r18, r12
    368c:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    3690:	da 01       	movw	r26, r20
    3692:	c9 01       	movw	r24, r18
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	a1 09       	sbc	r26, r1
    3698:	b1 09       	sbc	r27, r1
    369a:	b6 95       	lsr	r27
    369c:	a7 95       	ror	r26
    369e:	97 95       	ror	r25
    36a0:	87 95       	ror	r24
    36a2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    36a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    36a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    36a8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    36aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    36ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    36ae:	20 83       	st	Z, r18

  _written = false;
    36b0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    36b2:	ec 89       	ldd	r30, Y+20	; 0x14
    36b4:	fd 89       	ldd	r31, Y+21	; 0x15
    36b6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    36b8:	ea 89       	ldd	r30, Y+18	; 0x12
    36ba:	fb 89       	ldd	r31, Y+19	; 0x13
    36bc:	80 81       	ld	r24, Z
    36be:	80 61       	ori	r24, 0x10	; 16
    36c0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    36c2:	ea 89       	ldd	r30, Y+18	; 0x12
    36c4:	fb 89       	ldd	r31, Y+19	; 0x13
    36c6:	80 81       	ld	r24, Z
    36c8:	88 60       	ori	r24, 0x08	; 8
    36ca:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    36cc:	ea 89       	ldd	r30, Y+18	; 0x12
    36ce:	fb 89       	ldd	r31, Y+19	; 0x13
    36d0:	80 81       	ld	r24, Z
    36d2:	80 68       	ori	r24, 0x80	; 128
    36d4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    36d6:	ea 89       	ldd	r30, Y+18	; 0x12
    36d8:	fb 89       	ldd	r31, Y+19	; 0x13
    36da:	80 81       	ld	r24, Z
    36dc:	8f 7d       	andi	r24, 0xDF	; 223
    36de:	80 83       	st	Z, r24
}
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	ff 90       	pop	r15
    36e8:	ef 90       	pop	r14
    36ea:	df 90       	pop	r13
    36ec:	cf 90       	pop	r12
    36ee:	08 95       	ret

000036f0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    36f0:	1f 92       	push	r1
    36f2:	0f 92       	push	r0
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	0f 92       	push	r0
    36f8:	11 24       	eor	r1, r1
    36fa:	2f 93       	push	r18
    36fc:	8f 93       	push	r24
    36fe:	9f 93       	push	r25
    3700:	ef 93       	push	r30
    3702:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3704:	e0 91 c1 07 	lds	r30, 0x07C1	; 0x8007c1 <Serial+0x10>
    3708:	f0 91 c2 07 	lds	r31, 0x07C2	; 0x8007c2 <Serial+0x11>
    370c:	80 81       	ld	r24, Z
    370e:	e0 91 c7 07 	lds	r30, 0x07C7	; 0x8007c7 <Serial+0x16>
    3712:	f0 91 c8 07 	lds	r31, 0x07C8	; 0x8007c8 <Serial+0x17>
    3716:	82 fd       	sbrc	r24, 2
    3718:	12 c0       	rjmp	.+36     	; 0x373e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    371a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    371c:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <Serial+0x19>
    3720:	8f 5f       	subi	r24, 0xFF	; 255
    3722:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3724:	20 91 cb 07 	lds	r18, 0x07CB	; 0x8007cb <Serial+0x1a>
    3728:	82 17       	cp	r24, r18
    372a:	51 f0       	breq	.+20     	; 0x3740 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    372c:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <Serial+0x19>
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	ef 54       	subi	r30, 0x4F	; 79
    3734:	f8 4f       	sbci	r31, 0xF8	; 248
    3736:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3738:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <Serial+0x19>
    373c:	01 c0       	rjmp	.+2      	; 0x3740 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    373e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3740:	ff 91       	pop	r31
    3742:	ef 91       	pop	r30
    3744:	9f 91       	pop	r25
    3746:	8f 91       	pop	r24
    3748:	2f 91       	pop	r18
    374a:	0f 90       	pop	r0
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	0f 90       	pop	r0
    3750:	1f 90       	pop	r1
    3752:	18 95       	reti

00003754 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3754:	1f 92       	push	r1
    3756:	0f 92       	push	r0
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	0f 92       	push	r0
    375c:	11 24       	eor	r1, r1
    375e:	2f 93       	push	r18
    3760:	3f 93       	push	r19
    3762:	4f 93       	push	r20
    3764:	5f 93       	push	r21
    3766:	6f 93       	push	r22
    3768:	7f 93       	push	r23
    376a:	8f 93       	push	r24
    376c:	9f 93       	push	r25
    376e:	af 93       	push	r26
    3770:	bf 93       	push	r27
    3772:	ef 93       	push	r30
    3774:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3776:	81 eb       	ldi	r24, 0xB1	; 177
    3778:	97 e0       	ldi	r25, 0x07	; 7
    377a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    377e:	ff 91       	pop	r31
    3780:	ef 91       	pop	r30
    3782:	bf 91       	pop	r27
    3784:	af 91       	pop	r26
    3786:	9f 91       	pop	r25
    3788:	8f 91       	pop	r24
    378a:	7f 91       	pop	r23
    378c:	6f 91       	pop	r22
    378e:	5f 91       	pop	r21
    3790:	4f 91       	pop	r20
    3792:	3f 91       	pop	r19
    3794:	2f 91       	pop	r18
    3796:	0f 90       	pop	r0
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	0f 90       	pop	r0
    379c:	1f 90       	pop	r1
    379e:	18 95       	reti

000037a0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    37a0:	81 eb       	ldi	r24, 0xB1	; 177
    37a2:	97 e0       	ldi	r25, 0x07	; 7
    37a4:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN14HardwareSerial9availableEv>
    37a8:	21 e0       	ldi	r18, 0x01	; 1
    37aa:	89 2b       	or	r24, r25
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <_Z17Serial0_availablev+0x10>
    37ae:	20 e0       	ldi	r18, 0x00	; 0
}
    37b0:	82 2f       	mov	r24, r18
    37b2:	08 95       	ret

000037b4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    37b4:	e1 eb       	ldi	r30, 0xB1	; 177
    37b6:	f7 e0       	ldi	r31, 0x07	; 7
    37b8:	13 82       	std	Z+3, r1	; 0x03
    37ba:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    37bc:	88 ee       	ldi	r24, 0xE8	; 232
    37be:	93 e0       	ldi	r25, 0x03	; 3
    37c0:	a0 e0       	ldi	r26, 0x00	; 0
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	84 83       	std	Z+4, r24	; 0x04
    37c6:	95 83       	std	Z+5, r25	; 0x05
    37c8:	a6 83       	std	Z+6, r26	; 0x06
    37ca:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    37cc:	8b ee       	ldi	r24, 0xEB	; 235
    37ce:	92 e0       	ldi	r25, 0x02	; 2
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	85 ec       	ldi	r24, 0xC5	; 197
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	95 87       	std	Z+13, r25	; 0x0d
    37da:	84 87       	std	Z+12, r24	; 0x0c
    37dc:	84 ec       	ldi	r24, 0xC4	; 196
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	97 87       	std	Z+15, r25	; 0x0f
    37e2:	86 87       	std	Z+14, r24	; 0x0e
    37e4:	80 ec       	ldi	r24, 0xC0	; 192
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	91 8b       	std	Z+17, r25	; 0x11
    37ea:	80 8b       	std	Z+16, r24	; 0x10
    37ec:	81 ec       	ldi	r24, 0xC1	; 193
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	93 8b       	std	Z+19, r25	; 0x13
    37f2:	82 8b       	std	Z+18, r24	; 0x12
    37f4:	82 ec       	ldi	r24, 0xC2	; 194
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	95 8b       	std	Z+21, r25	; 0x15
    37fa:	84 8b       	std	Z+20, r24	; 0x14
    37fc:	86 ec       	ldi	r24, 0xC6	; 198
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	97 8b       	std	Z+23, r25	; 0x17
    3802:	86 8b       	std	Z+22, r24	; 0x16
    3804:	11 8e       	std	Z+25, r1	; 0x19
    3806:	12 8e       	std	Z+26, r1	; 0x1a
    3808:	13 8e       	std	Z+27, r1	; 0x1b
    380a:	14 8e       	std	Z+28, r1	; 0x1c
    380c:	08 95       	ret

0000380e <initVariant>:
    380e:	08 95       	ret

00003810 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3810:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <init>

	initVariant();
    3814:	0e 94 07 1c 	call	0x380e	; 0x380e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3818:	0e 94 93 07 	call	0xf26	; 0xf26 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    381c:	cb e7       	ldi	r28, 0x7B	; 123
    381e:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
    3820:	0e 94 89 08 	call	0x1112	; 0x1112 <loop>
		if (serialEventRun) serialEventRun();
    3824:	20 97       	sbiw	r28, 0x00	; 0
    3826:	e1 f3       	breq	.-8      	; 0x3820 <main+0x10>
    3828:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <_Z14serialEventRunv>
    382c:	f9 cf       	rjmp	.-14     	; 0x3820 <main+0x10>

0000382e <_Znwj>:
    382e:	0c 94 8b 2e 	jmp	0x5d16	; 0x5d16 <malloc>

00003832 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3832:	cf 92       	push	r12
    3834:	df 92       	push	r13
    3836:	ef 92       	push	r14
    3838:	ff 92       	push	r15
    383a:	0f 93       	push	r16
    383c:	1f 93       	push	r17
    383e:	cf 93       	push	r28
    3840:	df 93       	push	r29
    3842:	6c 01       	movw	r12, r24
    3844:	7a 01       	movw	r14, r20
    3846:	8b 01       	movw	r16, r22
    3848:	c0 e0       	ldi	r28, 0x00	; 0
    384a:	d0 e0       	ldi	r29, 0x00	; 0
    384c:	ce 15       	cp	r28, r14
    384e:	df 05       	cpc	r29, r15
    3850:	81 f0       	breq	.+32     	; 0x3872 <_ZN5Print5writeEPKhj+0x40>
    3852:	d8 01       	movw	r26, r16
    3854:	6d 91       	ld	r22, X+
    3856:	8d 01       	movw	r16, r26
    3858:	d6 01       	movw	r26, r12
    385a:	ed 91       	ld	r30, X+
    385c:	fc 91       	ld	r31, X
    385e:	01 90       	ld	r0, Z+
    3860:	f0 81       	ld	r31, Z
    3862:	e0 2d       	mov	r30, r0
    3864:	c6 01       	movw	r24, r12
    3866:	09 95       	icall
    3868:	89 2b       	or	r24, r25
    386a:	11 f0       	breq	.+4      	; 0x3870 <_ZN5Print5writeEPKhj+0x3e>
    386c:	21 96       	adiw	r28, 0x01	; 1
    386e:	ee cf       	rjmp	.-36     	; 0x384c <_ZN5Print5writeEPKhj+0x1a>
    3870:	7e 01       	movw	r14, r28
    3872:	c7 01       	movw	r24, r14
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	1f 91       	pop	r17
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	df 90       	pop	r13
    3882:	cf 90       	pop	r12
    3884:	08 95       	ret

00003886 <_ZN5Print5writeEPKc>:
    3886:	61 15       	cp	r22, r1
    3888:	71 05       	cpc	r23, r1
    388a:	79 f0       	breq	.+30     	; 0x38aa <_ZN5Print5writeEPKc+0x24>
    388c:	fb 01       	movw	r30, r22
    388e:	01 90       	ld	r0, Z+
    3890:	00 20       	and	r0, r0
    3892:	e9 f7       	brne	.-6      	; 0x388e <_ZN5Print5writeEPKc+0x8>
    3894:	31 97       	sbiw	r30, 0x01	; 1
    3896:	af 01       	movw	r20, r30
    3898:	46 1b       	sub	r20, r22
    389a:	57 0b       	sbc	r21, r23
    389c:	dc 01       	movw	r26, r24
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	02 80       	ldd	r0, Z+2	; 0x02
    38a4:	f3 81       	ldd	r31, Z+3	; 0x03
    38a6:	e0 2d       	mov	r30, r0
    38a8:	09 94       	ijmp
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	08 95       	ret

000038b0 <_ZN5Print5printEPK19__FlashStringHelper>:
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	8c 01       	movw	r16, r24
    38be:	7b 01       	movw	r14, r22
    38c0:	c0 e0       	ldi	r28, 0x00	; 0
    38c2:	d0 e0       	ldi	r29, 0x00	; 0
    38c4:	f7 01       	movw	r30, r14
    38c6:	ec 0f       	add	r30, r28
    38c8:	fd 1f       	adc	r31, r29
    38ca:	64 91       	lpm	r22, Z
    38cc:	66 23       	and	r22, r22
    38ce:	61 f0       	breq	.+24     	; 0x38e8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    38d0:	d8 01       	movw	r26, r16
    38d2:	ed 91       	ld	r30, X+
    38d4:	fc 91       	ld	r31, X
    38d6:	01 90       	ld	r0, Z+
    38d8:	f0 81       	ld	r31, Z
    38da:	e0 2d       	mov	r30, r0
    38dc:	c8 01       	movw	r24, r16
    38de:	09 95       	icall
    38e0:	89 2b       	or	r24, r25
    38e2:	11 f0       	breq	.+4      	; 0x38e8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    38e4:	21 96       	adiw	r28, 0x01	; 1
    38e6:	ee cf       	rjmp	.-36     	; 0x38c4 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    38e8:	ce 01       	movw	r24, r28
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	1f 91       	pop	r17
    38f0:	0f 91       	pop	r16
    38f2:	ff 90       	pop	r15
    38f4:	ef 90       	pop	r14
    38f6:	08 95       	ret

000038f8 <_ZN5Print5printEPKc>:
    38f8:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <_ZN5Print5writeEPKc>

000038fc <_ZN5Print5printEc>:
    38fc:	dc 01       	movw	r26, r24
    38fe:	ed 91       	ld	r30, X+
    3900:	fc 91       	ld	r31, X
    3902:	01 90       	ld	r0, Z+
    3904:	f0 81       	ld	r31, Z
    3906:	e0 2d       	mov	r30, r0
    3908:	09 94       	ijmp

0000390a <_ZN5Print7printlnEv>:
    390a:	67 ef       	ldi	r22, 0xF7	; 247
    390c:	72 e0       	ldi	r23, 0x02	; 2
    390e:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <_ZN5Print5writeEPKc>

00003912 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	ec 01       	movw	r28, r24
    391c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    3920:	8c 01       	movw	r16, r24
    3922:	ce 01       	movw	r24, r28
    3924:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    3928:	80 0f       	add	r24, r16
    392a:	91 1f       	adc	r25, r17
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	08 95       	ret

00003936 <_ZN5Print7printlnEPKc>:
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	ec 01       	movw	r28, r24
    3940:	0e 94 43 1c 	call	0x3886	; 0x3886 <_ZN5Print5writeEPKc>
    3944:	8c 01       	movw	r16, r24
    3946:	ce 01       	movw	r24, r28
    3948:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    394c:	80 0f       	add	r24, r16
    394e:	91 1f       	adc	r25, r17
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	08 95       	ret

0000395a <_ZN5Print7printlnEc>:
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	ec 01       	movw	r28, r24
    3964:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <_ZN5Print5printEc>
    3968:	8c 01       	movw	r16, r24
    396a:	ce 01       	movw	r24, r28
    396c:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    3970:	80 0f       	add	r24, r16
    3972:	91 1f       	adc	r25, r17
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <_ZN5Print11printNumberEmh>:
    397e:	8f 92       	push	r8
    3980:	9f 92       	push	r9
    3982:	af 92       	push	r10
    3984:	bf 92       	push	r11
    3986:	ef 92       	push	r14
    3988:	ff 92       	push	r15
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	a1 97       	sbiw	r28, 0x21	; 33
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	7c 01       	movw	r14, r24
    39a4:	fa 01       	movw	r30, r20
    39a6:	cb 01       	movw	r24, r22
    39a8:	19 a2       	std	Y+33, r1	; 0x21
    39aa:	22 30       	cpi	r18, 0x02	; 2
    39ac:	08 f4       	brcc	.+2      	; 0x39b0 <_ZN5Print11printNumberEmh+0x32>
    39ae:	2a e0       	ldi	r18, 0x0A	; 10
    39b0:	8e 01       	movw	r16, r28
    39b2:	0f 5d       	subi	r16, 0xDF	; 223
    39b4:	1f 4f       	sbci	r17, 0xFF	; 255
    39b6:	82 2e       	mov	r8, r18
    39b8:	91 2c       	mov	r9, r1
    39ba:	a1 2c       	mov	r10, r1
    39bc:	b1 2c       	mov	r11, r1
    39be:	bf 01       	movw	r22, r30
    39c0:	a5 01       	movw	r20, r10
    39c2:	94 01       	movw	r18, r8
    39c4:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    39c8:	f9 01       	movw	r30, r18
    39ca:	ca 01       	movw	r24, r20
    39cc:	01 50       	subi	r16, 0x01	; 1
    39ce:	11 09       	sbc	r17, r1
    39d0:	6a 30       	cpi	r22, 0x0A	; 10
    39d2:	10 f4       	brcc	.+4      	; 0x39d8 <_ZN5Print11printNumberEmh+0x5a>
    39d4:	60 5d       	subi	r22, 0xD0	; 208
    39d6:	01 c0       	rjmp	.+2      	; 0x39da <_ZN5Print11printNumberEmh+0x5c>
    39d8:	69 5c       	subi	r22, 0xC9	; 201
    39da:	d8 01       	movw	r26, r16
    39dc:	6c 93       	st	X, r22
    39de:	23 2b       	or	r18, r19
    39e0:	24 2b       	or	r18, r20
    39e2:	25 2b       	or	r18, r21
    39e4:	61 f7       	brne	.-40     	; 0x39be <_ZN5Print11printNumberEmh+0x40>
    39e6:	b8 01       	movw	r22, r16
    39e8:	c7 01       	movw	r24, r14
    39ea:	0e 94 43 1c 	call	0x3886	; 0x3886 <_ZN5Print5writeEPKc>
    39ee:	a1 96       	adiw	r28, 0x21	; 33
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	bf 90       	pop	r11
    3a08:	af 90       	pop	r10
    3a0a:	9f 90       	pop	r9
    3a0c:	8f 90       	pop	r8
    3a0e:	08 95       	ret

00003a10 <_ZN5Print5printEmi>:
    3a10:	21 15       	cp	r18, r1
    3a12:	31 05       	cpc	r19, r1
    3a14:	41 f4       	brne	.+16     	; 0x3a26 <_ZN5Print5printEmi+0x16>
    3a16:	dc 01       	movw	r26, r24
    3a18:	ed 91       	ld	r30, X+
    3a1a:	fc 91       	ld	r31, X
    3a1c:	01 90       	ld	r0, Z+
    3a1e:	f0 81       	ld	r31, Z
    3a20:	e0 2d       	mov	r30, r0
    3a22:	64 2f       	mov	r22, r20
    3a24:	09 94       	ijmp
    3a26:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <_ZN5Print11printNumberEmh>

00003a2a <_ZN5Print5printEhi>:
    3a2a:	9a 01       	movw	r18, r20
    3a2c:	46 2f       	mov	r20, r22
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <_ZN5Print5printEmi>

00003a38 <_ZN5Print7printlnEhi>:
    3a38:	0f 93       	push	r16
    3a3a:	1f 93       	push	r17
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	ec 01       	movw	r28, r24
    3a42:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_ZN5Print5printEhi>
    3a46:	8c 01       	movw	r16, r24
    3a48:	ce 01       	movw	r24, r28
    3a4a:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    3a4e:	80 0f       	add	r24, r16
    3a50:	91 1f       	adc	r25, r17
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	08 95       	ret

00003a5c <_ZN5Print5printEji>:
    3a5c:	9a 01       	movw	r18, r20
    3a5e:	ab 01       	movw	r20, r22
    3a60:	60 e0       	ldi	r22, 0x00	; 0
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <_ZN5Print5printEmi>

00003a68 <_ZN5Print7printlnEji>:
    3a68:	0f 93       	push	r16
    3a6a:	1f 93       	push	r17
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	ec 01       	movw	r28, r24
    3a72:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN5Print5printEji>
    3a76:	8c 01       	movw	r16, r24
    3a78:	ce 01       	movw	r24, r28
    3a7a:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    3a7e:	80 0f       	add	r24, r16
    3a80:	91 1f       	adc	r25, r17
    3a82:	df 91       	pop	r29
    3a84:	cf 91       	pop	r28
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	08 95       	ret

00003a8c <_ZN5Print7printlnEmi>:
    3a8c:	0f 93       	push	r16
    3a8e:	1f 93       	push	r17
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	ec 01       	movw	r28, r24
    3a96:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <_ZN5Print5printEmi>
    3a9a:	8c 01       	movw	r16, r24
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    3aa2:	80 0f       	add	r24, r16
    3aa4:	91 1f       	adc	r25, r17
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	08 95       	ret

00003ab0 <_ZN5Print5printEli>:
    3ab0:	cf 92       	push	r12
    3ab2:	df 92       	push	r13
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	21 15       	cp	r18, r1
    3ac2:	31 05       	cpc	r19, r1
    3ac4:	81 f4       	brne	.+32     	; 0x3ae6 <_ZN5Print5printEli+0x36>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	ed 91       	ld	r30, X+
    3aca:	fc 91       	ld	r31, X
    3acc:	01 90       	ld	r0, Z+
    3ace:	f0 81       	ld	r31, Z
    3ad0:	e0 2d       	mov	r30, r0
    3ad2:	64 2f       	mov	r22, r20
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	ff 90       	pop	r15
    3ade:	ef 90       	pop	r14
    3ae0:	df 90       	pop	r13
    3ae2:	cf 90       	pop	r12
    3ae4:	09 94       	ijmp
    3ae6:	2a 30       	cpi	r18, 0x0A	; 10
    3ae8:	31 05       	cpc	r19, r1
    3aea:	01 f5       	brne	.+64     	; 0x3b2c <_ZN5Print5printEli+0x7c>
    3aec:	77 ff       	sbrs	r23, 7
    3aee:	1d c0       	rjmp	.+58     	; 0x3b2a <_ZN5Print5printEli+0x7a>
    3af0:	6a 01       	movw	r12, r20
    3af2:	7b 01       	movw	r14, r22
    3af4:	ec 01       	movw	r28, r24
    3af6:	6d e2       	ldi	r22, 0x2D	; 45
    3af8:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <_ZN5Print5printEc>
    3afc:	8c 01       	movw	r16, r24
    3afe:	44 27       	eor	r20, r20
    3b00:	55 27       	eor	r21, r21
    3b02:	ba 01       	movw	r22, r20
    3b04:	4c 19       	sub	r20, r12
    3b06:	5d 09       	sbc	r21, r13
    3b08:	6e 09       	sbc	r22, r14
    3b0a:	7f 09       	sbc	r23, r15
    3b0c:	2a e0       	ldi	r18, 0x0A	; 10
    3b0e:	ce 01       	movw	r24, r28
    3b10:	0e 94 bf 1c 	call	0x397e	; 0x397e <_ZN5Print11printNumberEmh>
    3b14:	80 0f       	add	r24, r16
    3b16:	91 1f       	adc	r25, r17
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	ef 90       	pop	r14
    3b24:	df 90       	pop	r13
    3b26:	cf 90       	pop	r12
    3b28:	08 95       	ret
    3b2a:	2a e0       	ldi	r18, 0x0A	; 10
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	1f 91       	pop	r17
    3b32:	0f 91       	pop	r16
    3b34:	ff 90       	pop	r15
    3b36:	ef 90       	pop	r14
    3b38:	df 90       	pop	r13
    3b3a:	cf 90       	pop	r12
    3b3c:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <_ZN5Print11printNumberEmh>

00003b40 <_ZN5Print5printEii>:
    3b40:	9a 01       	movw	r18, r20
    3b42:	ab 01       	movw	r20, r22
    3b44:	77 0f       	add	r23, r23
    3b46:	66 0b       	sbc	r22, r22
    3b48:	77 0b       	sbc	r23, r23
    3b4a:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <_ZN5Print5printEli>

00003b4e <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3b58:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN5Print5printEli>
    3b5c:	8c 01       	movw	r16, r24
  n += println();
    3b5e:	ce 01       	movw	r24, r28
    3b60:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
  return n;
}
    3b64:	80 0f       	add	r24, r16
    3b66:	91 1f       	adc	r25, r17
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

00003b72 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3b72:	1f 92       	push	r1
    3b74:	0f 92       	push	r0
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	0f 92       	push	r0
    3b7a:	11 24       	eor	r1, r1
    3b7c:	2f 93       	push	r18
    3b7e:	3f 93       	push	r19
    3b80:	8f 93       	push	r24
    3b82:	9f 93       	push	r25
    3b84:	af 93       	push	r26
    3b86:	bf 93       	push	r27
    3b88:	80 91 4f 08 	lds	r24, 0x084F	; 0x80084f <timer0_millis>
    3b8c:	90 91 50 08 	lds	r25, 0x0850	; 0x800850 <timer0_millis+0x1>
    3b90:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <timer0_millis+0x2>
    3b94:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <timer0_millis+0x3>
    3b98:	30 91 4e 08 	lds	r19, 0x084E	; 0x80084e <timer0_fract>
    3b9c:	23 e0       	ldi	r18, 0x03	; 3
    3b9e:	23 0f       	add	r18, r19
    3ba0:	2d 37       	cpi	r18, 0x7D	; 125
    3ba2:	20 f4       	brcc	.+8      	; 0x3bac <__vector_16+0x3a>
    3ba4:	01 96       	adiw	r24, 0x01	; 1
    3ba6:	a1 1d       	adc	r26, r1
    3ba8:	b1 1d       	adc	r27, r1
    3baa:	05 c0       	rjmp	.+10     	; 0x3bb6 <__vector_16+0x44>
    3bac:	26 e8       	ldi	r18, 0x86	; 134
    3bae:	23 0f       	add	r18, r19
    3bb0:	02 96       	adiw	r24, 0x02	; 2
    3bb2:	a1 1d       	adc	r26, r1
    3bb4:	b1 1d       	adc	r27, r1
    3bb6:	20 93 4e 08 	sts	0x084E, r18	; 0x80084e <timer0_fract>
    3bba:	80 93 4f 08 	sts	0x084F, r24	; 0x80084f <timer0_millis>
    3bbe:	90 93 50 08 	sts	0x0850, r25	; 0x800850 <timer0_millis+0x1>
    3bc2:	a0 93 51 08 	sts	0x0851, r26	; 0x800851 <timer0_millis+0x2>
    3bc6:	b0 93 52 08 	sts	0x0852, r27	; 0x800852 <timer0_millis+0x3>
    3bca:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <timer0_overflow_count>
    3bce:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <timer0_overflow_count+0x1>
    3bd2:	a0 91 55 08 	lds	r26, 0x0855	; 0x800855 <timer0_overflow_count+0x2>
    3bd6:	b0 91 56 08 	lds	r27, 0x0856	; 0x800856 <timer0_overflow_count+0x3>
    3bda:	01 96       	adiw	r24, 0x01	; 1
    3bdc:	a1 1d       	adc	r26, r1
    3bde:	b1 1d       	adc	r27, r1
    3be0:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <timer0_overflow_count>
    3be4:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <timer0_overflow_count+0x1>
    3be8:	a0 93 55 08 	sts	0x0855, r26	; 0x800855 <timer0_overflow_count+0x2>
    3bec:	b0 93 56 08 	sts	0x0856, r27	; 0x800856 <timer0_overflow_count+0x3>
    3bf0:	bf 91       	pop	r27
    3bf2:	af 91       	pop	r26
    3bf4:	9f 91       	pop	r25
    3bf6:	8f 91       	pop	r24
    3bf8:	3f 91       	pop	r19
    3bfa:	2f 91       	pop	r18
    3bfc:	0f 90       	pop	r0
    3bfe:	0f be       	out	0x3f, r0	; 63
    3c00:	0f 90       	pop	r0
    3c02:	1f 90       	pop	r1
    3c04:	18 95       	reti

00003c06 <micros>:
    3c06:	3f b7       	in	r19, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <timer0_overflow_count>
    3c0e:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <timer0_overflow_count+0x1>
    3c12:	a0 91 55 08 	lds	r26, 0x0855	; 0x800855 <timer0_overflow_count+0x2>
    3c16:	b0 91 56 08 	lds	r27, 0x0856	; 0x800856 <timer0_overflow_count+0x3>
    3c1a:	26 b5       	in	r18, 0x26	; 38
    3c1c:	a8 9b       	sbis	0x15, 0	; 21
    3c1e:	05 c0       	rjmp	.+10     	; 0x3c2a <micros+0x24>
    3c20:	2f 3f       	cpi	r18, 0xFF	; 255
    3c22:	19 f0       	breq	.+6      	; 0x3c2a <micros+0x24>
    3c24:	01 96       	adiw	r24, 0x01	; 1
    3c26:	a1 1d       	adc	r26, r1
    3c28:	b1 1d       	adc	r27, r1
    3c2a:	3f bf       	out	0x3f, r19	; 63
    3c2c:	ba 2f       	mov	r27, r26
    3c2e:	a9 2f       	mov	r26, r25
    3c30:	98 2f       	mov	r25, r24
    3c32:	88 27       	eor	r24, r24
    3c34:	82 0f       	add	r24, r18
    3c36:	91 1d       	adc	r25, r1
    3c38:	a1 1d       	adc	r26, r1
    3c3a:	b1 1d       	adc	r27, r1
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	cd 01       	movw	r24, r26
    3c40:	42 e0       	ldi	r20, 0x02	; 2
    3c42:	66 0f       	add	r22, r22
    3c44:	77 1f       	adc	r23, r23
    3c46:	88 1f       	adc	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	4a 95       	dec	r20
    3c4c:	d1 f7       	brne	.-12     	; 0x3c42 <micros+0x3c>
    3c4e:	08 95       	ret

00003c50 <delay>:
    3c50:	8f 92       	push	r8
    3c52:	9f 92       	push	r9
    3c54:	af 92       	push	r10
    3c56:	bf 92       	push	r11
    3c58:	cf 92       	push	r12
    3c5a:	df 92       	push	r13
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
    3c60:	6b 01       	movw	r12, r22
    3c62:	7c 01       	movw	r14, r24
    3c64:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <micros>
    3c68:	4b 01       	movw	r8, r22
    3c6a:	5c 01       	movw	r10, r24
    3c6c:	c1 14       	cp	r12, r1
    3c6e:	d1 04       	cpc	r13, r1
    3c70:	e1 04       	cpc	r14, r1
    3c72:	f1 04       	cpc	r15, r1
    3c74:	01 f1       	breq	.+64     	; 0x3cb6 <delay+0x66>
    3c76:	0e 94 c7 2c 	call	0x598e	; 0x598e <yield>
    3c7a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <micros>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	88 19       	sub	r24, r8
    3c84:	99 09       	sbc	r25, r9
    3c86:	aa 09       	sbc	r26, r10
    3c88:	bb 09       	sbc	r27, r11
    3c8a:	88 3e       	cpi	r24, 0xE8	; 232
    3c8c:	93 40       	sbci	r25, 0x03	; 3
    3c8e:	a1 05       	cpc	r26, r1
    3c90:	b1 05       	cpc	r27, r1
    3c92:	60 f3       	brcs	.-40     	; 0x3c6c <delay+0x1c>
    3c94:	21 e0       	ldi	r18, 0x01	; 1
    3c96:	c2 1a       	sub	r12, r18
    3c98:	d1 08       	sbc	r13, r1
    3c9a:	e1 08       	sbc	r14, r1
    3c9c:	f1 08       	sbc	r15, r1
    3c9e:	88 ee       	ldi	r24, 0xE8	; 232
    3ca0:	88 0e       	add	r8, r24
    3ca2:	83 e0       	ldi	r24, 0x03	; 3
    3ca4:	98 1e       	adc	r9, r24
    3ca6:	a1 1c       	adc	r10, r1
    3ca8:	b1 1c       	adc	r11, r1
    3caa:	c1 14       	cp	r12, r1
    3cac:	d1 04       	cpc	r13, r1
    3cae:	e1 04       	cpc	r14, r1
    3cb0:	f1 04       	cpc	r15, r1
    3cb2:	19 f7       	brne	.-58     	; 0x3c7a <delay+0x2a>
    3cb4:	db cf       	rjmp	.-74     	; 0x3c6c <delay+0x1c>
    3cb6:	ff 90       	pop	r15
    3cb8:	ef 90       	pop	r14
    3cba:	df 90       	pop	r13
    3cbc:	cf 90       	pop	r12
    3cbe:	bf 90       	pop	r11
    3cc0:	af 90       	pop	r10
    3cc2:	9f 90       	pop	r9
    3cc4:	8f 90       	pop	r8
    3cc6:	08 95       	ret

00003cc8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3cc8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3cca:	84 b5       	in	r24, 0x24	; 36
    3ccc:	82 60       	ori	r24, 0x02	; 2
    3cce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3cd0:	84 b5       	in	r24, 0x24	; 36
    3cd2:	81 60       	ori	r24, 0x01	; 1
    3cd4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3cd6:	85 b5       	in	r24, 0x25	; 37
    3cd8:	82 60       	ori	r24, 0x02	; 2
    3cda:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3cdc:	85 b5       	in	r24, 0x25	; 37
    3cde:	81 60       	ori	r24, 0x01	; 1
    3ce0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3ce2:	ee e6       	ldi	r30, 0x6E	; 110
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	80 81       	ld	r24, Z
    3ce8:	81 60       	ori	r24, 0x01	; 1
    3cea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3cec:	e1 e8       	ldi	r30, 0x81	; 129
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3cf2:	80 81       	ld	r24, Z
    3cf4:	82 60       	ori	r24, 0x02	; 2
    3cf6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3cf8:	80 81       	ld	r24, Z
    3cfa:	81 60       	ori	r24, 0x01	; 1
    3cfc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3cfe:	e0 e8       	ldi	r30, 0x80	; 128
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	81 60       	ori	r24, 0x01	; 1
    3d06:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3d08:	e1 eb       	ldi	r30, 0xB1	; 177
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	80 81       	ld	r24, Z
    3d0e:	84 60       	ori	r24, 0x04	; 4
    3d10:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3d12:	e0 eb       	ldi	r30, 0xB0	; 176
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	81 60       	ori	r24, 0x01	; 1
    3d1a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3d1c:	ea e7       	ldi	r30, 0x7A	; 122
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	80 81       	ld	r24, Z
    3d22:	84 60       	ori	r24, 0x04	; 4
    3d24:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3d26:	80 81       	ld	r24, Z
    3d28:	82 60       	ori	r24, 0x02	; 2
    3d2a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3d2c:	80 81       	ld	r24, Z
    3d2e:	81 60       	ori	r24, 0x01	; 1
    3d30:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3d32:	80 81       	ld	r24, Z
    3d34:	80 68       	ori	r24, 0x80	; 128
    3d36:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3d38:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3d3c:	08 95       	ret

00003d3e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3d3e:	8e 30       	cpi	r24, 0x0E	; 14
    3d40:	08 f0       	brcs	.+2      	; 0x3d44 <analogRead+0x6>
    3d42:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3d44:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    3d48:	90 e4       	ldi	r25, 0x40	; 64
    3d4a:	29 9f       	mul	r18, r25
    3d4c:	90 01       	movw	r18, r0
    3d4e:	11 24       	eor	r1, r1
    3d50:	87 70       	andi	r24, 0x07	; 7
    3d52:	82 2b       	or	r24, r18
    3d54:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3d58:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3d5c:	80 64       	ori	r24, 0x40	; 64
    3d5e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3d62:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3d66:	86 fd       	sbrc	r24, 6
    3d68:	fc cf       	rjmp	.-8      	; 0x3d62 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3d6a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3d6e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3d72:	90 e0       	ldi	r25, 0x00	; 0
}
    3d74:	92 2b       	or	r25, r18
    3d76:	08 95       	ret

00003d78 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3d78:	83 30       	cpi	r24, 0x03	; 3
    3d7a:	81 f0       	breq	.+32     	; 0x3d9c <turnOffPWM+0x24>
    3d7c:	28 f4       	brcc	.+10     	; 0x3d88 <turnOffPWM+0x10>
    3d7e:	81 30       	cpi	r24, 0x01	; 1
    3d80:	99 f0       	breq	.+38     	; 0x3da8 <turnOffPWM+0x30>
    3d82:	82 30       	cpi	r24, 0x02	; 2
    3d84:	a1 f0       	breq	.+40     	; 0x3dae <turnOffPWM+0x36>
    3d86:	08 95       	ret
    3d88:	87 30       	cpi	r24, 0x07	; 7
    3d8a:	a9 f0       	breq	.+42     	; 0x3db6 <turnOffPWM+0x3e>
    3d8c:	88 30       	cpi	r24, 0x08	; 8
    3d8e:	b9 f0       	breq	.+46     	; 0x3dbe <turnOffPWM+0x46>
    3d90:	84 30       	cpi	r24, 0x04	; 4
    3d92:	d1 f4       	brne	.+52     	; 0x3dc8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3d94:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3d98:	8f 7d       	andi	r24, 0xDF	; 223
    3d9a:	03 c0       	rjmp	.+6      	; 0x3da2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3d9c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3da0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3da2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3da6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3da8:	84 b5       	in	r24, 0x24	; 36
    3daa:	8f 77       	andi	r24, 0x7F	; 127
    3dac:	02 c0       	rjmp	.+4      	; 0x3db2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3dae:	84 b5       	in	r24, 0x24	; 36
    3db0:	8f 7d       	andi	r24, 0xDF	; 223
    3db2:	84 bd       	out	0x24, r24	; 36
    3db4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3db6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3dba:	8f 77       	andi	r24, 0x7F	; 127
    3dbc:	03 c0       	rjmp	.+6      	; 0x3dc4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3dbe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3dc2:	8f 7d       	andi	r24, 0xDF	; 223
    3dc4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3dc8:	08 95       	ret

00003dca <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	ea 54       	subi	r30, 0x4A	; 74
    3dd4:	fc 4f       	sbci	r31, 0xFC	; 252
    3dd6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3dd8:	fc 01       	movw	r30, r24
    3dda:	e6 53       	subi	r30, 0x36	; 54
    3ddc:	fc 4f       	sbci	r31, 0xFC	; 252
    3dde:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3de0:	88 23       	and	r24, r24
    3de2:	61 f1       	breq	.+88     	; 0x3e3c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	fc 01       	movw	r30, r24
    3dec:	ee 50       	subi	r30, 0x0E	; 14
    3dee:	fc 4f       	sbci	r31, 0xFC	; 252
    3df0:	c5 91       	lpm	r28, Z+
    3df2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3df4:	fc 01       	movw	r30, r24
    3df6:	e8 51       	subi	r30, 0x18	; 24
    3df8:	fc 4f       	sbci	r31, 0xFC	; 252
    3dfa:	a5 91       	lpm	r26, Z+
    3dfc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3dfe:	61 11       	cpse	r22, r1
    3e00:	09 c0       	rjmp	.+18     	; 0x3e14 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3e02:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3e04:	f8 94       	cli
		*reg &= ~bit;
    3e06:	88 81       	ld	r24, Y
    3e08:	20 95       	com	r18
    3e0a:	82 23       	and	r24, r18
    3e0c:	88 83       	st	Y, r24
		*out &= ~bit;
    3e0e:	ec 91       	ld	r30, X
    3e10:	2e 23       	and	r18, r30
    3e12:	0b c0       	rjmp	.+22     	; 0x3e2a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3e14:	62 30       	cpi	r22, 0x02	; 2
    3e16:	61 f4       	brne	.+24     	; 0x3e30 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3e18:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3e1a:	f8 94       	cli
		*reg &= ~bit;
    3e1c:	88 81       	ld	r24, Y
    3e1e:	32 2f       	mov	r19, r18
    3e20:	30 95       	com	r19
    3e22:	83 23       	and	r24, r19
    3e24:	88 83       	st	Y, r24
		*out |= bit;
    3e26:	ec 91       	ld	r30, X
    3e28:	2e 2b       	or	r18, r30
    3e2a:	2c 93       	st	X, r18
		SREG = oldSREG;
    3e2c:	9f bf       	out	0x3f, r25	; 63
    3e2e:	06 c0       	rjmp	.+12     	; 0x3e3c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3e30:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3e32:	f8 94       	cli
		*reg |= bit;
    3e34:	e8 81       	ld	r30, Y
    3e36:	2e 2b       	or	r18, r30
    3e38:	28 83       	st	Y, r18
		SREG = oldSREG;
    3e3a:	8f bf       	out	0x3f, r24	; 63
	}
}
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	08 95       	ret

00003e42 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3e42:	1f 93       	push	r17
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3e48:	28 2f       	mov	r18, r24
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	f9 01       	movw	r30, r18
    3e4e:	ee 55       	subi	r30, 0x5E	; 94
    3e50:	fc 4f       	sbci	r31, 0xFC	; 252
    3e52:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3e54:	f9 01       	movw	r30, r18
    3e56:	ea 54       	subi	r30, 0x4A	; 74
    3e58:	fc 4f       	sbci	r31, 0xFC	; 252
    3e5a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3e5c:	f9 01       	movw	r30, r18
    3e5e:	e6 53       	subi	r30, 0x36	; 54
    3e60:	fc 4f       	sbci	r31, 0xFC	; 252
    3e62:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3e64:	cc 23       	and	r28, r28
    3e66:	c1 f0       	breq	.+48     	; 0x3e98 <digitalWrite+0x56>
    3e68:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3e6a:	81 11       	cpse	r24, r1
    3e6c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <turnOffPWM>

	out = portOutputRegister(port);
    3e70:	ec 2f       	mov	r30, r28
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	ee 0f       	add	r30, r30
    3e76:	ff 1f       	adc	r31, r31
    3e78:	e8 51       	subi	r30, 0x18	; 24
    3e7a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e7c:	a5 91       	lpm	r26, Z+
    3e7e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3e80:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3e82:	f8 94       	cli

	if (val == LOW) {
    3e84:	11 11       	cpse	r17, r1
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <digitalWrite+0x4e>
		*out &= ~bit;
    3e88:	8c 91       	ld	r24, X
    3e8a:	d0 95       	com	r29
    3e8c:	d8 23       	and	r29, r24
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3e90:	ec 91       	ld	r30, X
    3e92:	de 2b       	or	r29, r30
    3e94:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3e96:	9f bf       	out	0x3f, r25	; 63
}
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	08 95       	ret

00003ea0 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3ea0:	88 5e       	subi	r24, 0xE8	; 232
    3ea2:	9e 4f       	sbci	r25, 0xFE	; 254
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	8d 91       	ld	r24, X+
    3ea8:	9c 91       	ld	r25, X
    3eaa:	dc 01       	movw	r26, r24
    3eac:	ed 91       	ld	r30, X+
    3eae:	fc 91       	ld	r31, X
    3eb0:	04 80       	ldd	r0, Z+4	; 0x04
    3eb2:	f5 81       	ldd	r31, Z+5	; 0x05
    3eb4:	e0 2d       	mov	r30, r0
    3eb6:	09 94       	ijmp

00003eb8 <_ZN13Adafruit_FONA5writeEh>:
    3eb8:	88 5e       	subi	r24, 0xE8	; 232
    3eba:	9e 4f       	sbci	r25, 0xFE	; 254
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	8d 91       	ld	r24, X+
    3ec0:	9c 91       	ld	r25, X
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	ed 91       	ld	r30, X+
    3ec6:	fc 91       	ld	r31, X
    3ec8:	01 90       	ld	r0, Z+
    3eca:	f0 81       	ld	r31, Z
    3ecc:	e0 2d       	mov	r30, r0
    3ece:	09 94       	ijmp

00003ed0 <_ZN13Adafruit_FONA4readEv>:
    3ed0:	88 5e       	subi	r24, 0xE8	; 232
    3ed2:	9e 4f       	sbci	r25, 0xFE	; 254
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	8d 91       	ld	r24, X+
    3ed8:	9c 91       	ld	r25, X
    3eda:	dc 01       	movw	r26, r24
    3edc:	ed 91       	ld	r30, X+
    3ede:	fc 91       	ld	r31, X
    3ee0:	06 80       	ldd	r0, Z+6	; 0x06
    3ee2:	f7 81       	ldd	r31, Z+7	; 0x07
    3ee4:	e0 2d       	mov	r30, r0
    3ee6:	09 94       	ijmp

00003ee8 <_ZN13Adafruit_FONA4peekEv>:
    3ee8:	88 5e       	subi	r24, 0xE8	; 232
    3eea:	9e 4f       	sbci	r25, 0xFE	; 254
    3eec:	dc 01       	movw	r26, r24
    3eee:	8d 91       	ld	r24, X+
    3ef0:	9c 91       	ld	r25, X
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	ed 91       	ld	r30, X+
    3ef6:	fc 91       	ld	r31, X
    3ef8:	00 84       	ldd	r0, Z+8	; 0x08
    3efa:	f1 85       	ldd	r31, Z+9	; 0x09
    3efc:	e0 2d       	mov	r30, r0
    3efe:	09 94       	ijmp

00003f00 <_ZN13Adafruit_FONA5flushEv>:
    3f00:	88 5e       	subi	r24, 0xE8	; 232
    3f02:	9e 4f       	sbci	r25, 0xFE	; 254
    3f04:	dc 01       	movw	r26, r24
    3f06:	8d 91       	ld	r24, X+
    3f08:	9c 91       	ld	r25, X
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	ed 91       	ld	r30, X+
    3f0e:	fc 91       	ld	r31, X
    3f10:	02 84       	ldd	r0, Z+10	; 0x0a
    3f12:	f3 85       	ldd	r31, Z+11	; 0x0b
    3f14:	e0 2d       	mov	r30, r0
    3f16:	09 94       	ijmp

00003f18 <_ZN13Adafruit_FONAC1Ea>:
    3f18:	fc 01       	movw	r30, r24
    3f1a:	13 82       	std	Z+3, r1	; 0x03
    3f1c:	12 82       	std	Z+2, r1	; 0x02
    3f1e:	88 ee       	ldi	r24, 0xE8	; 232
    3f20:	93 e0       	ldi	r25, 0x03	; 3
    3f22:	a0 e0       	ldi	r26, 0x00	; 0
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	84 83       	std	Z+4, r24	; 0x04
    3f28:	95 83       	std	Z+5, r25	; 0x05
    3f2a:	a6 83       	std	Z+6, r26	; 0x06
    3f2c:	b7 83       	std	Z+7, r27	; 0x07
    3f2e:	8d e6       	ldi	r24, 0x6D	; 109
    3f30:	93 e0       	ldi	r25, 0x03	; 3
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
    3f36:	64 87       	std	Z+12, r22	; 0x0c
    3f38:	df 01       	movw	r26, r30
    3f3a:	a3 5f       	subi	r26, 0xF3	; 243
    3f3c:	be 4f       	sbci	r27, 0xFE	; 254
    3f3e:	8c e5       	ldi	r24, 0x5C	; 92
    3f40:	97 e0       	ldi	r25, 0x07	; 7
    3f42:	11 96       	adiw	r26, 0x01	; 1
    3f44:	9c 93       	st	X, r25
    3f46:	8e 93       	st	-X, r24
    3f48:	12 96       	adiw	r26, 0x02	; 2
    3f4a:	11 96       	adiw	r26, 0x01	; 1
    3f4c:	1c 92       	st	X, r1
    3f4e:	1e 92       	st	-X, r1
    3f50:	12 96       	adiw	r26, 0x02	; 2
    3f52:	11 96       	adiw	r26, 0x01	; 1
    3f54:	1c 92       	st	X, r1
    3f56:	1e 92       	st	-X, r1
    3f58:	17 96       	adiw	r26, 0x07	; 7
    3f5a:	11 96       	adiw	r26, 0x01	; 1
    3f5c:	1c 92       	st	X, r1
    3f5e:	1e 92       	st	-X, r1
    3f60:	15 97       	sbiw	r26, 0x05	; 5
    3f62:	1c 92       	st	X, r1
    3f64:	11 96       	adiw	r26, 0x01	; 1
    3f66:	87 e5       	ldi	r24, 0x57	; 87
    3f68:	97 e0       	ldi	r25, 0x07	; 7
    3f6a:	8d 93       	st	X+, r24
    3f6c:	9c 93       	st	X, r25
    3f6e:	ea 5e       	subi	r30, 0xEA	; 234
    3f70:	fe 4f       	sbci	r31, 0xFE	; 254
    3f72:	84 e5       	ldi	r24, 0x54	; 84
    3f74:	97 e0       	ldi	r25, 0x07	; 7
    3f76:	91 83       	std	Z+1, r25	; 0x01
    3f78:	80 83       	st	Z, r24
    3f7a:	08 95       	ret

00003f7c <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	e3 5f       	subi	r30, 0xF3	; 243
    3f80:	fe 4f       	sbci	r31, 0xFE	; 254
    3f82:	71 83       	std	Z+1, r23	; 0x01
    3f84:	60 83       	st	Z, r22
    3f86:	32 96       	adiw	r30, 0x02	; 2
    3f88:	51 83       	std	Z+1, r21	; 0x01
    3f8a:	40 83       	st	Z, r20
    3f8c:	32 96       	adiw	r30, 0x02	; 2
    3f8e:	31 83       	std	Z+1, r19	; 0x01
    3f90:	20 83       	st	Z, r18
    3f92:	08 95       	ret

00003f94 <_ZN13Adafruit_FONA10flushInputEv>:
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	ec 01       	movw	r28, r24
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	8c 01       	movw	r16, r24
    3fa4:	0f 5f       	subi	r16, 0xFF	; 255
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	88 97       	sbiw	r24, 0x28	; 40
    3faa:	d8 f4       	brcc	.+54     	; 0x3fe2 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    3fac:	e8 81       	ld	r30, Y
    3fae:	f9 81       	ldd	r31, Y+1	; 0x01
    3fb0:	04 80       	ldd	r0, Z+4	; 0x04
    3fb2:	f5 81       	ldd	r31, Z+5	; 0x05
    3fb4:	e0 2d       	mov	r30, r0
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	09 95       	icall
    3fba:	89 2b       	or	r24, r25
    3fbc:	51 f0       	breq	.+20     	; 0x3fd2 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    3fbe:	e8 81       	ld	r30, Y
    3fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    3fc2:	06 80       	ldd	r0, Z+6	; 0x06
    3fc4:	f7 81       	ldd	r31, Z+7	; 0x07
    3fc6:	e0 2d       	mov	r30, r0
    3fc8:	ce 01       	movw	r24, r28
    3fca:	09 95       	icall
    3fcc:	00 e0       	ldi	r16, 0x00	; 0
    3fce:	10 e0       	ldi	r17, 0x00	; 0
    3fd0:	ed cf       	rjmp	.-38     	; 0x3fac <_ZN13Adafruit_FONA10flushInputEv+0x18>
    3fd2:	61 e0       	ldi	r22, 0x01	; 1
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    3fde:	c8 01       	movw	r24, r16
    3fe0:	e0 cf       	rjmp	.-64     	; 0x3fa2 <_ZN13Adafruit_FONA10flushInputEv+0xe>
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
    3fea:	08 95       	ret

00003fec <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    3fec:	ff 92       	push	r15
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
    3ff6:	ec 01       	movw	r28, r24
    3ff8:	8b 01       	movw	r16, r22
    3ffa:	f4 2e       	mov	r15, r20
    3ffc:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    4000:	6a e0       	ldi	r22, 0x0A	; 10
    4002:	75 e0       	ldi	r23, 0x05	; 5
    4004:	81 eb       	ldi	r24, 0xB1	; 177
    4006:	97 e0       	ldi	r25, 0x07	; 7
    4008:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    400c:	6c ef       	ldi	r22, 0xFC	; 252
    400e:	74 e0       	ldi	r23, 0x04	; 4
    4010:	81 eb       	ldi	r24, 0xB1	; 177
    4012:	97 e0       	ldi	r25, 0x07	; 7
    4014:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4018:	b8 01       	movw	r22, r16
    401a:	81 eb       	ldi	r24, 0xB1	; 177
    401c:	97 e0       	ldi	r25, 0x07	; 7
    401e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4022:	62 e2       	ldi	r22, 0x22	; 34
    4024:	81 eb       	ldi	r24, 0xB1	; 177
    4026:	97 e0       	ldi	r25, 0x07	; 7
    4028:	0e 94 ad 1c 	call	0x395a	; 0x395a <_ZN5Print7printlnEc>
    402c:	c8 5e       	subi	r28, 0xE8	; 232
    402e:	de 4f       	sbci	r29, 0xFE	; 254
    4030:	6e ee       	ldi	r22, 0xEE	; 238
    4032:	74 e0       	ldi	r23, 0x04	; 4
    4034:	88 81       	ld	r24, Y
    4036:	99 81       	ldd	r25, Y+1	; 0x01
    4038:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    403c:	b8 01       	movw	r22, r16
    403e:	88 81       	ld	r24, Y
    4040:	99 81       	ldd	r25, Y+1	; 0x01
    4042:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4046:	88 81       	ld	r24, Y
    4048:	99 81       	ldd	r25, Y+1	; 0x01
    404a:	ff 20       	and	r15, r15
    404c:	19 f0       	breq	.+6      	; 0x4054 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    404e:	6a ee       	ldi	r22, 0xEA	; 234
    4050:	74 e0       	ldi	r23, 0x04	; 4
    4052:	02 c0       	rjmp	.+4      	; 0x4058 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    4054:	67 ee       	ldi	r22, 0xE7	; 231
    4056:	74 e0       	ldi	r23, 0x04	; 4
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	1f 91       	pop	r17
    405e:	0f 91       	pop	r16
    4060:	ff 90       	pop	r15
    4062:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>

00004066 <_ZN13Adafruit_FONA8readlineEjb>:
    4066:	9f 92       	push	r9
    4068:	af 92       	push	r10
    406a:	bf 92       	push	r11
    406c:	cf 92       	push	r12
    406e:	df 92       	push	r13
    4070:	ef 92       	push	r14
    4072:	ff 92       	push	r15
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	7c 01       	movw	r14, r24
    407e:	94 2e       	mov	r9, r20
    4080:	8b 01       	movw	r16, r22
    4082:	00 0f       	add	r16, r16
    4084:	11 1f       	adc	r17, r17
    4086:	00 0f       	add	r16, r16
    4088:	11 1f       	adc	r17, r17
    408a:	c0 e0       	ldi	r28, 0x00	; 0
    408c:	d0 e0       	ldi	r29, 0x00	; 0
    408e:	57 01       	movw	r10, r14
    4090:	88 ee       	ldi	r24, 0xE8	; 232
    4092:	a8 1a       	sub	r10, r24
    4094:	8e ef       	ldi	r24, 0xFE	; 254
    4096:	b8 0a       	sbc	r11, r24
    4098:	01 15       	cp	r16, r1
    409a:	11 05       	cpc	r17, r1
    409c:	09 f4       	brne	.+2      	; 0x40a0 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    409e:	50 c0       	rjmp	.+160    	; 0x4140 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    40a0:	ce 3f       	cpi	r28, 0xFE	; 254
    40a2:	d1 05       	cpc	r29, r1
    40a4:	80 f0       	brcs	.+32     	; 0x40c6 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    40a6:	6c e3       	ldi	r22, 0x3C	; 60
    40a8:	74 e0       	ldi	r23, 0x04	; 4
    40aa:	22 c0       	rjmp	.+68     	; 0x40f0 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    40ac:	f5 01       	movw	r30, r10
    40ae:	80 81       	ld	r24, Z
    40b0:	91 81       	ldd	r25, Z+1	; 0x01
    40b2:	dc 01       	movw	r26, r24
    40b4:	ed 91       	ld	r30, X+
    40b6:	fc 91       	ld	r31, X
    40b8:	06 80       	ldd	r0, Z+6	; 0x06
    40ba:	f7 81       	ldd	r31, Z+7	; 0x07
    40bc:	e0 2d       	mov	r30, r0
    40be:	09 95       	icall
    40c0:	6c 01       	movw	r12, r24
    40c2:	8d 30       	cpi	r24, 0x0D	; 13
    40c4:	69 f4       	brne	.+26     	; 0x40e0 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    40c6:	d5 01       	movw	r26, r10
    40c8:	8d 91       	ld	r24, X+
    40ca:	9c 91       	ld	r25, X
    40cc:	dc 01       	movw	r26, r24
    40ce:	ed 91       	ld	r30, X+
    40d0:	fc 91       	ld	r31, X
    40d2:	04 80       	ldd	r0, Z+4	; 0x04
    40d4:	f5 81       	ldd	r31, Z+5	; 0x05
    40d6:	e0 2d       	mov	r30, r0
    40d8:	09 95       	icall
    40da:	89 2b       	or	r24, r25
    40dc:	39 f7       	brne	.-50     	; 0x40ac <_ZN13Adafruit_FONA8readlineEjb+0x46>
    40de:	26 c0       	rjmp	.+76     	; 0x412c <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    40e0:	8a 30       	cpi	r24, 0x0A	; 10
    40e2:	59 f4       	brne	.+22     	; 0x40fa <_ZN13Adafruit_FONA8readlineEjb+0x94>
    40e4:	20 97       	sbiw	r28, 0x00	; 0
    40e6:	79 f3       	breq	.-34     	; 0x40c6 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    40e8:	91 10       	cpse	r9, r1
    40ea:	07 c0       	rjmp	.+14     	; 0x40fa <_ZN13Adafruit_FONA8readlineEjb+0x94>
    40ec:	64 e3       	ldi	r22, 0x34	; 52
    40ee:	74 e0       	ldi	r23, 0x04	; 4
    40f0:	81 eb       	ldi	r24, 0xB1	; 177
    40f2:	97 e0       	ldi	r25, 0x07	; 7
    40f4:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    40f8:	23 c0       	rjmp	.+70     	; 0x4140 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    40fa:	f7 01       	movw	r30, r14
    40fc:	ec 0f       	add	r30, r28
    40fe:	fd 1f       	adc	r31, r29
    4100:	c6 86       	std	Z+14, r12	; 0x0e
    4102:	b6 01       	movw	r22, r12
    4104:	77 27       	eor	r23, r23
    4106:	40 e1       	ldi	r20, 0x10	; 16
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	81 eb       	ldi	r24, 0xB1	; 177
    410c:	97 e0       	ldi	r25, 0x07	; 7
    410e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <_ZN5Print5printEii>
    4112:	60 e1       	ldi	r22, 0x10	; 16
    4114:	73 e0       	ldi	r23, 0x03	; 3
    4116:	81 eb       	ldi	r24, 0xB1	; 177
    4118:	97 e0       	ldi	r25, 0x07	; 7
    411a:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    411e:	6c 2d       	mov	r22, r12
    4120:	81 eb       	ldi	r24, 0xB1	; 177
    4122:	97 e0       	ldi	r25, 0x07	; 7
    4124:	0e 94 ad 1c 	call	0x395a	; 0x395a <_ZN5Print7printlnEc>
    4128:	21 96       	adiw	r28, 0x01	; 1
    412a:	cd cf       	rjmp	.-102    	; 0x40c6 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    412c:	01 50       	subi	r16, 0x01	; 1
    412e:	11 09       	sbc	r17, r1
    4130:	e9 f2       	breq	.-70     	; 0x40ec <_ZN13Adafruit_FONA8readlineEjb+0x86>
    4132:	61 e0       	ldi	r22, 0x01	; 1
    4134:	70 e0       	ldi	r23, 0x00	; 0
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    413e:	ac cf       	rjmp	.-168    	; 0x4098 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    4140:	f7 01       	movw	r30, r14
    4142:	ec 0f       	add	r30, r28
    4144:	fd 1f       	adc	r31, r29
    4146:	16 86       	std	Z+14, r1	; 0x0e
    4148:	8c 2f       	mov	r24, r28
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	1f 91       	pop	r17
    4150:	0f 91       	pop	r16
    4152:	ff 90       	pop	r15
    4154:	ef 90       	pop	r14
    4156:	df 90       	pop	r13
    4158:	cf 90       	pop	r12
    415a:	bf 90       	pop	r11
    415c:	af 90       	pop	r10
    415e:	9f 90       	pop	r9
    4160:	08 95       	ret

00004162 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    4162:	0f 93       	push	r16
    4164:	1f 93       	push	r17
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
    416a:	ec 01       	movw	r28, r24
    416c:	8b 01       	movw	r16, r22
    416e:	ba 01       	movw	r22, r20
    4170:	40 e0       	ldi	r20, 0x00	; 0
    4172:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4176:	62 e4       	ldi	r22, 0x42	; 66
    4178:	74 e0       	ldi	r23, 0x04	; 4
    417a:	81 eb       	ldi	r24, 0xB1	; 177
    417c:	97 e0       	ldi	r25, 0x07	; 7
    417e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4182:	2e 96       	adiw	r28, 0x0e	; 14
    4184:	be 01       	movw	r22, r28
    4186:	81 eb       	ldi	r24, 0xB1	; 177
    4188:	97 e0       	ldi	r25, 0x07	; 7
    418a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    418e:	b8 01       	movw	r22, r16
    4190:	ce 01       	movw	r24, r28
    4192:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <strcmp_P>
    4196:	21 e0       	ldi	r18, 0x01	; 1
    4198:	89 2b       	or	r24, r25
    419a:	09 f0       	breq	.+2      	; 0x419e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	82 2f       	mov	r24, r18
    41a0:	df 91       	pop	r29
    41a2:	cf 91       	pop	r28
    41a4:	1f 91       	pop	r17
    41a6:	0f 91       	pop	r16
    41a8:	08 95       	ret

000041aa <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	ec 01       	movw	r28, r24
    41b0:	fc 01       	movw	r30, r24
    41b2:	e8 5e       	subi	r30, 0xE8	; 232
    41b4:	fe 4f       	sbci	r31, 0xFE	; 254
    41b6:	66 23       	and	r22, r22
    41b8:	31 f0       	breq	.+12     	; 0x41c6 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    41ba:	62 e2       	ldi	r22, 0x22	; 34
    41bc:	80 81       	ld	r24, Z
    41be:	91 81       	ldd	r25, Z+1	; 0x01
    41c0:	0e 94 ad 1c 	call	0x395a	; 0x395a <_ZN5Print7printlnEc>
    41c4:	04 c0       	rjmp	.+8      	; 0x41ce <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    41c6:	80 81       	ld	r24, Z
    41c8:	91 81       	ldd	r25, Z+1	; 0x01
    41ca:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    41ce:	fe 01       	movw	r30, r28
    41d0:	ea 5e       	subi	r30, 0xEA	; 234
    41d2:	fe 4f       	sbci	r31, 0xFE	; 254
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	40 e1       	ldi	r20, 0x10	; 16
    41da:	57 e2       	ldi	r21, 0x27	; 39
    41dc:	ce 01       	movw	r24, r28
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

000041e6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    41e6:	0f 93       	push	r16
    41e8:	1f 93       	push	r17
    41ea:	cf 93       	push	r28
    41ec:	df 93       	push	r29
    41ee:	ec 01       	movw	r28, r24
    41f0:	8a 01       	movw	r16, r20
    41f2:	41 e0       	ldi	r20, 0x01	; 1
    41f4:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    41f8:	fe 01       	movw	r30, r28
    41fa:	e8 5e       	subi	r30, 0xE8	; 232
    41fc:	fe 4f       	sbci	r31, 0xFE	; 254
    41fe:	b8 01       	movw	r22, r16
    4200:	80 81       	ld	r24, Z
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    4208:	61 e0       	ldi	r22, 0x01	; 1
    420a:	ce 01       	movw	r24, r28
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	1f 91       	pop	r17
    4212:	0f 91       	pop	r16
    4214:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004218 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    4218:	0f 93       	push	r16
    421a:	1f 93       	push	r17
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	ec 01       	movw	r28, r24
    4222:	8a 01       	movw	r16, r20
    4224:	41 e0       	ldi	r20, 0x01	; 1
    4226:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    422a:	fe 01       	movw	r30, r28
    422c:	e8 5e       	subi	r30, 0xE8	; 232
    422e:	fe 4f       	sbci	r31, 0xFE	; 254
    4230:	b8 01       	movw	r22, r16
    4232:	80 81       	ld	r24, Z
    4234:	91 81       	ldd	r25, Z+1	; 0x01
    4236:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    423a:	61 e0       	ldi	r22, 0x01	; 1
    423c:	ce 01       	movw	r24, r28
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <_ZN13Adafruit_FONA13HTTP_para_endEb>

0000424a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	cf 93       	push	r28
    4254:	df 93       	push	r29
    4256:	ec 01       	movw	r28, r24
    4258:	69 01       	movw	r12, r18
    425a:	7a 01       	movw	r14, r20
    425c:	40 e0       	ldi	r20, 0x00	; 0
    425e:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4262:	fe 01       	movw	r30, r28
    4264:	e8 5e       	subi	r30, 0xE8	; 232
    4266:	fe 4f       	sbci	r31, 0xFE	; 254
    4268:	2a e0       	ldi	r18, 0x0A	; 10
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	b7 01       	movw	r22, r14
    426e:	a6 01       	movw	r20, r12
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN5Print5printEli>
    4278:	60 e0       	ldi	r22, 0x00	; 0
    427a:	ce 01       	movw	r24, r28
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	ff 90       	pop	r15
    4282:	ef 90       	pop	r14
    4284:	df 90       	pop	r13
    4286:	cf 90       	pop	r12
    4288:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <_ZN13Adafruit_FONA13HTTP_para_endEb>

0000428c <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    428c:	4f 92       	push	r4
    428e:	5f 92       	push	r5
    4290:	6f 92       	push	r6
    4292:	7f 92       	push	r7
    4294:	8f 92       	push	r8
    4296:	9f 92       	push	r9
    4298:	af 92       	push	r10
    429a:	bf 92       	push	r11
    429c:	ef 92       	push	r14
    429e:	ff 92       	push	r15
    42a0:	0f 93       	push	r16
    42a2:	1f 93       	push	r17
    42a4:	cf 93       	push	r28
    42a6:	df 93       	push	r29
    42a8:	7c 01       	movw	r14, r24
    42aa:	2a 01       	movw	r4, r20
    42ac:	3b 01       	movw	r6, r22
    42ae:	48 01       	movw	r8, r16
    42b0:	59 01       	movw	r10, r18
    42b2:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    42b6:	60 ee       	ldi	r22, 0xE0	; 224
    42b8:	74 e0       	ldi	r23, 0x04	; 4
    42ba:	81 eb       	ldi	r24, 0xB1	; 177
    42bc:	97 e0       	ldi	r25, 0x07	; 7
    42be:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    42c2:	63 ed       	ldi	r22, 0xD3	; 211
    42c4:	74 e0       	ldi	r23, 0x04	; 4
    42c6:	81 eb       	ldi	r24, 0xB1	; 177
    42c8:	97 e0       	ldi	r25, 0x07	; 7
    42ca:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    42ce:	2a e0       	ldi	r18, 0x0A	; 10
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	b3 01       	movw	r22, r6
    42d4:	a2 01       	movw	r20, r4
    42d6:	81 eb       	ldi	r24, 0xB1	; 177
    42d8:	97 e0       	ldi	r25, 0x07	; 7
    42da:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <_ZN5Print5printEmi>
    42de:	6c e2       	ldi	r22, 0x2C	; 44
    42e0:	81 eb       	ldi	r24, 0xB1	; 177
    42e2:	97 e0       	ldi	r25, 0x07	; 7
    42e4:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <_ZN5Print5printEc>
    42e8:	2a e0       	ldi	r18, 0x0A	; 10
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	b5 01       	movw	r22, r10
    42ee:	a4 01       	movw	r20, r8
    42f0:	81 eb       	ldi	r24, 0xB1	; 177
    42f2:	97 e0       	ldi	r25, 0x07	; 7
    42f4:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN5Print7printlnEmi>
    42f8:	e7 01       	movw	r28, r14
    42fa:	c8 5e       	subi	r28, 0xE8	; 232
    42fc:	de 4f       	sbci	r29, 0xFE	; 254
    42fe:	66 ec       	ldi	r22, 0xC6	; 198
    4300:	74 e0       	ldi	r23, 0x04	; 4
    4302:	88 81       	ld	r24, Y
    4304:	99 81       	ldd	r25, Y+1	; 0x01
    4306:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    430a:	2a e0       	ldi	r18, 0x0A	; 10
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	b3 01       	movw	r22, r6
    4310:	a2 01       	movw	r20, r4
    4312:	88 81       	ld	r24, Y
    4314:	99 81       	ldd	r25, Y+1	; 0x01
    4316:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <_ZN5Print5printEmi>
    431a:	6a e1       	ldi	r22, 0x1A	; 26
    431c:	73 e0       	ldi	r23, 0x03	; 3
    431e:	88 81       	ld	r24, Y
    4320:	99 81       	ldd	r25, Y+1	; 0x01
    4322:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    4326:	2a e0       	ldi	r18, 0x0A	; 10
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	b5 01       	movw	r22, r10
    432c:	a4 01       	movw	r20, r8
    432e:	88 81       	ld	r24, Y
    4330:	99 81       	ldd	r25, Y+1	; 0x01
    4332:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN5Print7printlnEmi>
    4336:	40 e1       	ldi	r20, 0x10	; 16
    4338:	57 e2       	ldi	r21, 0x27	; 39
    433a:	6d eb       	ldi	r22, 0xBD	; 189
    433c:	74 e0       	ldi	r23, 0x04	; 4
    433e:	c7 01       	movw	r24, r14
    4340:	df 91       	pop	r29
    4342:	cf 91       	pop	r28
    4344:	1f 91       	pop	r17
    4346:	0f 91       	pop	r16
    4348:	ff 90       	pop	r15
    434a:	ef 90       	pop	r14
    434c:	bf 90       	pop	r11
    434e:	af 90       	pop	r10
    4350:	9f 90       	pop	r9
    4352:	8f 90       	pop	r8
    4354:	7f 90       	pop	r7
    4356:	6f 90       	pop	r6
    4358:	5f 90       	pop	r5
    435a:	4f 90       	pop	r4
    435c:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004360 <_ZN13Adafruit_FONA8getReplyEPcj>:
    4360:	ef 92       	push	r14
    4362:	ff 92       	push	r15
    4364:	0f 93       	push	r16
    4366:	1f 93       	push	r17
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
    436c:	ec 01       	movw	r28, r24
    436e:	8b 01       	movw	r16, r22
    4370:	7a 01       	movw	r14, r20
    4372:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    4376:	6d e2       	ldi	r22, 0x2D	; 45
    4378:	74 e0       	ldi	r23, 0x04	; 4
    437a:	81 eb       	ldi	r24, 0xB1	; 177
    437c:	97 e0       	ldi	r25, 0x07	; 7
    437e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4382:	b8 01       	movw	r22, r16
    4384:	81 eb       	ldi	r24, 0xB1	; 177
    4386:	97 e0       	ldi	r25, 0x07	; 7
    4388:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    438c:	fe 01       	movw	r30, r28
    438e:	e8 5e       	subi	r30, 0xE8	; 232
    4390:	fe 4f       	sbci	r31, 0xFE	; 254
    4392:	b8 01       	movw	r22, r16
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    439c:	40 e0       	ldi	r20, 0x00	; 0
    439e:	b7 01       	movw	r22, r14
    43a0:	ce 01       	movw	r24, r28
    43a2:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    43a6:	18 2f       	mov	r17, r24
    43a8:	66 e2       	ldi	r22, 0x26	; 38
    43aa:	74 e0       	ldi	r23, 0x04	; 4
    43ac:	81 eb       	ldi	r24, 0xB1	; 177
    43ae:	97 e0       	ldi	r25, 0x07	; 7
    43b0:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    43b4:	be 01       	movw	r22, r28
    43b6:	62 5f       	subi	r22, 0xF2	; 242
    43b8:	7f 4f       	sbci	r23, 0xFF	; 255
    43ba:	81 eb       	ldi	r24, 0xB1	; 177
    43bc:	97 e0       	ldi	r25, 0x07	; 7
    43be:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    43c2:	81 2f       	mov	r24, r17
    43c4:	df 91       	pop	r29
    43c6:	cf 91       	pop	r28
    43c8:	1f 91       	pop	r17
    43ca:	0f 91       	pop	r16
    43cc:	ff 90       	pop	r15
    43ce:	ef 90       	pop	r14
    43d0:	08 95       	ret

000043d2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    43d2:	ef 92       	push	r14
    43d4:	ff 92       	push	r15
    43d6:	0f 93       	push	r16
    43d8:	1f 93       	push	r17
    43da:	cf 93       	push	r28
    43dc:	df 93       	push	r29
    43de:	ec 01       	movw	r28, r24
    43e0:	8b 01       	movw	r16, r22
    43e2:	7a 01       	movw	r14, r20
    43e4:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    43e8:	6f e1       	ldi	r22, 0x1F	; 31
    43ea:	74 e0       	ldi	r23, 0x04	; 4
    43ec:	81 eb       	ldi	r24, 0xB1	; 177
    43ee:	97 e0       	ldi	r25, 0x07	; 7
    43f0:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    43f4:	b8 01       	movw	r22, r16
    43f6:	81 eb       	ldi	r24, 0xB1	; 177
    43f8:	97 e0       	ldi	r25, 0x07	; 7
    43fa:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    43fe:	fe 01       	movw	r30, r28
    4400:	e8 5e       	subi	r30, 0xE8	; 232
    4402:	fe 4f       	sbci	r31, 0xFE	; 254
    4404:	b8 01       	movw	r22, r16
    4406:	80 81       	ld	r24, Z
    4408:	91 81       	ldd	r25, Z+1	; 0x01
    440a:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    440e:	40 e0       	ldi	r20, 0x00	; 0
    4410:	b7 01       	movw	r22, r14
    4412:	ce 01       	movw	r24, r28
    4414:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4418:	18 2f       	mov	r17, r24
    441a:	68 e1       	ldi	r22, 0x18	; 24
    441c:	74 e0       	ldi	r23, 0x04	; 4
    441e:	81 eb       	ldi	r24, 0xB1	; 177
    4420:	97 e0       	ldi	r25, 0x07	; 7
    4422:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4426:	be 01       	movw	r22, r28
    4428:	62 5f       	subi	r22, 0xF2	; 242
    442a:	7f 4f       	sbci	r23, 0xFF	; 255
    442c:	81 eb       	ldi	r24, 0xB1	; 177
    442e:	97 e0       	ldi	r25, 0x07	; 7
    4430:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4434:	81 2f       	mov	r24, r17
    4436:	df 91       	pop	r29
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	ff 90       	pop	r15
    4440:	ef 90       	pop	r14
    4442:	08 95       	ret

00004444 <_ZN13Adafruit_FONA9GPSstatusEv>:
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	cf 93       	push	r28
    444a:	df 93       	push	r29
    444c:	8c 01       	movw	r16, r24
    444e:	44 ef       	ldi	r20, 0xF4	; 244
    4450:	51 e0       	ldi	r21, 0x01	; 1
    4452:	69 e1       	ldi	r22, 0x19	; 25
    4454:	76 e0       	ldi	r23, 0x06	; 6
    4456:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    445a:	6e e0       	ldi	r22, 0x0E	; 14
    445c:	76 e0       	ldi	r23, 0x06	; 6
    445e:	c8 01       	movw	r24, r16
    4460:	0e 96       	adiw	r24, 0x0e	; 14
    4462:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4466:	ec 01       	movw	r28, r24
    4468:	89 2b       	or	r24, r25
    446a:	71 f0       	breq	.+28     	; 0x4488 <_ZN13Adafruit_FONA9GPSstatusEv+0x44>
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	64 ef       	ldi	r22, 0xF4	; 244
    4470:	71 e0       	ldi	r23, 0x01	; 1
    4472:	c8 01       	movw	r24, r16
    4474:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4478:	8a 85       	ldd	r24, Y+10	; 0x0a
    447a:	80 33       	cpi	r24, 0x30	; 48
    447c:	39 f0       	breq	.+14     	; 0x448c <_ZN13Adafruit_FONA9GPSstatusEv+0x48>
    447e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4480:	81 33       	cpi	r24, 0x31	; 49
    4482:	31 f0       	breq	.+12     	; 0x4490 <_ZN13Adafruit_FONA9GPSstatusEv+0x4c>
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	05 c0       	rjmp	.+10     	; 0x4492 <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    4488:	8f ef       	ldi	r24, 0xFF	; 255
    448a:	03 c0       	rjmp	.+6      	; 0x4492 <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	01 c0       	rjmp	.+2      	; 0x4492 <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    4490:	83 e0       	ldi	r24, 0x03	; 3
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	08 95       	ret

0000449c <_ZN13Adafruit_FONA6getGPSEhPch>:
    449c:	cf 92       	push	r12
    449e:	df 92       	push	r13
    44a0:	ef 92       	push	r14
    44a2:	ff 92       	push	r15
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	cf 93       	push	r28
    44aa:	8c 01       	movw	r16, r24
    44ac:	7a 01       	movw	r14, r20
    44ae:	c2 2f       	mov	r28, r18
    44b0:	44 ef       	ldi	r20, 0xF4	; 244
    44b2:	51 e0       	ldi	r21, 0x01	; 1
    44b4:	63 e0       	ldi	r22, 0x03	; 3
    44b6:	76 e0       	ldi	r23, 0x06	; 6
    44b8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    44bc:	6e ef       	ldi	r22, 0xFE	; 254
    44be:	75 e0       	ldi	r23, 0x05	; 5
    44c0:	c8 01       	movw	r24, r16
    44c2:	0e 96       	adiw	r24, 0x0e	; 14
    44c4:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	21 f4       	brne	.+8      	; 0x44d4 <_ZN13Adafruit_FONA6getGPSEhPch+0x38>
    44cc:	f7 01       	movw	r30, r14
    44ce:	10 82       	st	Z, r1
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	24 c0       	rjmp	.+72     	; 0x451c <_ZN13Adafruit_FONA6getGPSEhPch+0x80>
    44d4:	bc 01       	movw	r22, r24
    44d6:	6a 5f       	subi	r22, 0xFA	; 250
    44d8:	7f 4f       	sbci	r23, 0xFF	; 255
    44da:	fb 01       	movw	r30, r22
    44dc:	01 90       	ld	r0, Z+
    44de:	00 20       	and	r0, r0
    44e0:	e9 f7       	brne	.-6      	; 0x44dc <_ZN13Adafruit_FONA6getGPSEhPch+0x40>
    44e2:	31 97       	sbiw	r30, 0x01	; 1
    44e4:	e6 1b       	sub	r30, r22
    44e6:	f7 0b       	sbc	r31, r23
    44e8:	8c 2f       	mov	r24, r28
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	e8 17       	cp	r30, r24
    44f0:	f9 07       	cpc	r31, r25
    44f2:	10 f4       	brcc	.+4      	; 0x44f8 <_ZN13Adafruit_FONA6getGPSEhPch+0x5c>
    44f4:	c1 50       	subi	r28, 0x01	; 1
    44f6:	01 c0       	rjmp	.+2      	; 0x44fa <_ZN13Adafruit_FONA6getGPSEhPch+0x5e>
    44f8:	ce 2f       	mov	r28, r30
    44fa:	cc 2e       	mov	r12, r28
    44fc:	d1 2c       	mov	r13, r1
    44fe:	a6 01       	movw	r20, r12
    4500:	c7 01       	movw	r24, r14
    4502:	0e 94 28 30 	call	0x6050	; 0x6050 <strncpy>
    4506:	f7 01       	movw	r30, r14
    4508:	ec 0d       	add	r30, r12
    450a:	fd 1d       	adc	r31, r13
    450c:	10 82       	st	Z, r1
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	64 ef       	ldi	r22, 0xF4	; 244
    4512:	71 e0       	ldi	r23, 0x01	; 1
    4514:	c8 01       	movw	r24, r16
    4516:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    451a:	8c 2f       	mov	r24, r28
    451c:	cf 91       	pop	r28
    451e:	1f 91       	pop	r17
    4520:	0f 91       	pop	r16
    4522:	ff 90       	pop	r15
    4524:	ef 90       	pop	r14
    4526:	df 90       	pop	r13
    4528:	cf 90       	pop	r12
    452a:	08 95       	ret

0000452c <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>:
    452c:	2f 92       	push	r2
    452e:	3f 92       	push	r3
    4530:	4f 92       	push	r4
    4532:	5f 92       	push	r5
    4534:	6f 92       	push	r6
    4536:	7f 92       	push	r7
    4538:	8f 92       	push	r8
    453a:	9f 92       	push	r9
    453c:	af 92       	push	r10
    453e:	bf 92       	push	r11
    4540:	cf 92       	push	r12
    4542:	df 92       	push	r13
    4544:	ef 92       	push	r14
    4546:	ff 92       	push	r15
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	ca 57       	subi	r28, 0x7A	; 122
    4556:	d1 09       	sbc	r29, r1
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	5c 01       	movw	r10, r24
    4564:	1b 01       	movw	r2, r22
    4566:	eb 96       	adiw	r28, 0x3b	; 59
    4568:	5f af       	std	Y+63, r21	; 0x3f
    456a:	4e af       	std	Y+62, r20	; 0x3e
    456c:	eb 97       	sbiw	r28, 0x3b	; 59
    456e:	39 01       	movw	r6, r18
    4570:	28 01       	movw	r4, r16
    4572:	0e 94 22 22 	call	0x4444	; 0x4444 <_ZN13Adafruit_FONA9GPSstatusEv>
    4576:	82 30       	cpi	r24, 0x02	; 2
    4578:	14 f4       	brge	.+4      	; 0x457e <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x52>
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	8a c0       	rjmp	.+276    	; 0x4692 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x166>
    457e:	28 e7       	ldi	r18, 0x78	; 120
    4580:	ae 01       	movw	r20, r28
    4582:	4f 5f       	subi	r20, 0xFF	; 255
    4584:	5f 4f       	sbci	r21, 0xFF	; 255
    4586:	60 e2       	ldi	r22, 0x20	; 32
    4588:	c5 01       	movw	r24, r10
    458a:	0e 94 4e 22 	call	0x449c	; 0x449c <_ZN13Adafruit_FONA6getGPSEhPch>
    458e:	88 23       	and	r24, r24
    4590:	a1 f3       	breq	.-24     	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4592:	6a e1       	ldi	r22, 0x1A	; 26
    4594:	73 e0       	ldi	r23, 0x03	; 3
    4596:	ce 01       	movw	r24, r28
    4598:	01 96       	adiw	r24, 0x01	; 1
    459a:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    459e:	89 2b       	or	r24, r25
    45a0:	61 f3       	breq	.-40     	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45a2:	6a e1       	ldi	r22, 0x1A	; 26
    45a4:	73 e0       	ldi	r23, 0x03	; 3
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    45ae:	89 2b       	or	r24, r25
    45b0:	21 f3       	breq	.-56     	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45b2:	6a e1       	ldi	r22, 0x1A	; 26
    45b4:	73 e0       	ldi	r23, 0x03	; 3
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    45be:	4c 01       	movw	r8, r24
    45c0:	89 2b       	or	r24, r25
    45c2:	d9 f2       	breq	.-74     	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45c4:	6a e1       	ldi	r22, 0x1A	; 26
    45c6:	73 e0       	ldi	r23, 0x03	; 3
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    45d0:	5c 01       	movw	r10, r24
    45d2:	89 2b       	or	r24, r25
    45d4:	91 f2       	breq	.-92     	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45d6:	6a e1       	ldi	r22, 0x1A	; 26
    45d8:	73 e0       	ldi	r23, 0x03	; 3
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    45e2:	8c 01       	movw	r16, r24
    45e4:	89 2b       	or	r24, r25
    45e6:	49 f2       	breq	.-110    	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45e8:	4e e0       	ldi	r20, 0x0E	; 14
    45ea:	50 e0       	ldi	r21, 0x00	; 0
    45ec:	b4 01       	movw	r22, r8
    45ee:	c6 01       	movw	r24, r12
    45f0:	0e 94 28 30 	call	0x6050	; 0x6050 <strncpy>
    45f4:	f6 01       	movw	r30, r12
    45f6:	16 86       	std	Z+14, r1	; 0x0e
    45f8:	c5 01       	movw	r24, r10
    45fa:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <atof>
    45fe:	f1 01       	movw	r30, r2
    4600:	60 83       	st	Z, r22
    4602:	71 83       	std	Z+1, r23	; 0x01
    4604:	82 83       	std	Z+2, r24	; 0x02
    4606:	93 83       	std	Z+3, r25	; 0x03
    4608:	c8 01       	movw	r24, r16
    460a:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <atof>
    460e:	eb 96       	adiw	r28, 0x3b	; 59
    4610:	ee ad       	ldd	r30, Y+62	; 0x3e
    4612:	ff ad       	ldd	r31, Y+63	; 0x3f
    4614:	eb 97       	sbiw	r28, 0x3b	; 59
    4616:	60 83       	st	Z, r22
    4618:	71 83       	std	Z+1, r23	; 0x01
    461a:	82 83       	std	Z+2, r24	; 0x02
    461c:	93 83       	std	Z+3, r25	; 0x03
    461e:	e1 14       	cp	r14, r1
    4620:	f1 04       	cpc	r15, r1
    4622:	81 f0       	breq	.+32     	; 0x4644 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x118>
    4624:	6a e1       	ldi	r22, 0x1A	; 26
    4626:	73 e0       	ldi	r23, 0x03	; 3
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    4630:	00 97       	sbiw	r24, 0x00	; 0
    4632:	09 f4       	brne	.+2      	; 0x4636 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x10a>
    4634:	a2 cf       	rjmp	.-188    	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4636:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <atof>
    463a:	f7 01       	movw	r30, r14
    463c:	60 83       	st	Z, r22
    463e:	71 83       	std	Z+1, r23	; 0x01
    4640:	82 83       	std	Z+2, r24	; 0x02
    4642:	93 83       	std	Z+3, r25	; 0x03
    4644:	61 14       	cp	r6, r1
    4646:	71 04       	cpc	r7, r1
    4648:	81 f0       	breq	.+32     	; 0x466a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x13e>
    464a:	6a e1       	ldi	r22, 0x1A	; 26
    464c:	73 e0       	ldi	r23, 0x03	; 3
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    4656:	00 97       	sbiw	r24, 0x00	; 0
    4658:	09 f4       	brne	.+2      	; 0x465c <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x130>
    465a:	8f cf       	rjmp	.-226    	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    465c:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <atof>
    4660:	f3 01       	movw	r30, r6
    4662:	60 83       	st	Z, r22
    4664:	71 83       	std	Z+1, r23	; 0x01
    4666:	82 83       	std	Z+2, r24	; 0x02
    4668:	93 83       	std	Z+3, r25	; 0x03
    466a:	41 14       	cp	r4, r1
    466c:	51 04       	cpc	r5, r1
    466e:	81 f0       	breq	.+32     	; 0x4690 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x164>
    4670:	6a e1       	ldi	r22, 0x1A	; 26
    4672:	73 e0       	ldi	r23, 0x03	; 3
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <strtok>
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	09 f4       	brne	.+2      	; 0x4682 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x156>
    4680:	7c cf       	rjmp	.-264    	; 0x457a <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4682:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <atof>
    4686:	f2 01       	movw	r30, r4
    4688:	60 83       	st	Z, r22
    468a:	71 83       	std	Z+1, r23	; 0x01
    468c:	82 83       	std	Z+2, r24	; 0x02
    468e:	93 83       	std	Z+3, r25	; 0x03
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	c6 58       	subi	r28, 0x86	; 134
    4694:	df 4f       	sbci	r29, 0xFF	; 255
    4696:	0f b6       	in	r0, 0x3f	; 63
    4698:	f8 94       	cli
    469a:	de bf       	out	0x3e, r29	; 62
    469c:	0f be       	out	0x3f, r0	; 63
    469e:	cd bf       	out	0x3d, r28	; 61
    46a0:	df 91       	pop	r29
    46a2:	cf 91       	pop	r28
    46a4:	1f 91       	pop	r17
    46a6:	0f 91       	pop	r16
    46a8:	ff 90       	pop	r15
    46aa:	ef 90       	pop	r14
    46ac:	df 90       	pop	r13
    46ae:	cf 90       	pop	r12
    46b0:	bf 90       	pop	r11
    46b2:	af 90       	pop	r10
    46b4:	9f 90       	pop	r9
    46b6:	8f 90       	pop	r8
    46b8:	7f 90       	pop	r7
    46ba:	6f 90       	pop	r6
    46bc:	5f 90       	pop	r5
    46be:	4f 90       	pop	r4
    46c0:	3f 90       	pop	r3
    46c2:	2f 90       	pop	r2
    46c4:	08 95       	ret

000046c6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    46c6:	8f 92       	push	r8
    46c8:	9f 92       	push	r9
    46ca:	af 92       	push	r10
    46cc:	bf 92       	push	r11
    46ce:	cf 92       	push	r12
    46d0:	df 92       	push	r13
    46d2:	ef 92       	push	r14
    46d4:	ff 92       	push	r15
    46d6:	0f 93       	push	r16
    46d8:	1f 93       	push	r17
    46da:	cf 93       	push	r28
    46dc:	df 93       	push	r29
    46de:	ec 01       	movw	r28, r24
    46e0:	6b 01       	movw	r12, r22
    46e2:	49 01       	movw	r8, r18
    46e4:	5a 01       	movw	r10, r20
    46e6:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    46ea:	61 e1       	ldi	r22, 0x11	; 17
    46ec:	74 e0       	ldi	r23, 0x04	; 4
    46ee:	81 eb       	ldi	r24, 0xB1	; 177
    46f0:	97 e0       	ldi	r25, 0x07	; 7
    46f2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    46f6:	b6 01       	movw	r22, r12
    46f8:	81 eb       	ldi	r24, 0xB1	; 177
    46fa:	97 e0       	ldi	r25, 0x07	; 7
    46fc:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4700:	2a e0       	ldi	r18, 0x0A	; 10
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	b5 01       	movw	r22, r10
    4706:	a4 01       	movw	r20, r8
    4708:	81 eb       	ldi	r24, 0xB1	; 177
    470a:	97 e0       	ldi	r25, 0x07	; 7
    470c:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <_ZN5Print7printlnEli>
    4710:	7e 01       	movw	r14, r28
    4712:	88 ee       	ldi	r24, 0xE8	; 232
    4714:	e8 1a       	sub	r14, r24
    4716:	8e ef       	ldi	r24, 0xFE	; 254
    4718:	f8 0a       	sbc	r15, r24
    471a:	b6 01       	movw	r22, r12
    471c:	f7 01       	movw	r30, r14
    471e:	80 81       	ld	r24, Z
    4720:	91 81       	ldd	r25, Z+1	; 0x01
    4722:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4726:	2a e0       	ldi	r18, 0x0A	; 10
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	b5 01       	movw	r22, r10
    472c:	a4 01       	movw	r20, r8
    472e:	f7 01       	movw	r30, r14
    4730:	80 81       	ld	r24, Z
    4732:	91 81       	ldd	r25, Z+1	; 0x01
    4734:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <_ZN5Print7printlnEli>
    4738:	40 e0       	ldi	r20, 0x00	; 0
    473a:	b8 01       	movw	r22, r16
    473c:	ce 01       	movw	r24, r28
    473e:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4742:	18 2f       	mov	r17, r24
    4744:	6a e0       	ldi	r22, 0x0A	; 10
    4746:	74 e0       	ldi	r23, 0x04	; 4
    4748:	81 eb       	ldi	r24, 0xB1	; 177
    474a:	97 e0       	ldi	r25, 0x07	; 7
    474c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4750:	be 01       	movw	r22, r28
    4752:	62 5f       	subi	r22, 0xF2	; 242
    4754:	7f 4f       	sbci	r23, 0xFF	; 255
    4756:	81 eb       	ldi	r24, 0xB1	; 177
    4758:	97 e0       	ldi	r25, 0x07	; 7
    475a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    475e:	81 2f       	mov	r24, r17
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	1f 91       	pop	r17
    4766:	0f 91       	pop	r16
    4768:	ff 90       	pop	r15
    476a:	ef 90       	pop	r14
    476c:	df 90       	pop	r13
    476e:	cf 90       	pop	r12
    4770:	bf 90       	pop	r11
    4772:	af 90       	pop	r10
    4774:	9f 90       	pop	r9
    4776:	8f 90       	pop	r8
    4778:	08 95       	ret

0000477a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    477a:	af 92       	push	r10
    477c:	bf 92       	push	r11
    477e:	cf 92       	push	r12
    4780:	df 92       	push	r13
    4782:	ef 92       	push	r14
    4784:	ff 92       	push	r15
    4786:	0f 93       	push	r16
    4788:	1f 93       	push	r17
    478a:	cf 93       	push	r28
    478c:	df 93       	push	r29
    478e:	ec 01       	movw	r28, r24
    4790:	6b 01       	movw	r12, r22
    4792:	7a 01       	movw	r14, r20
    4794:	59 01       	movw	r10, r18
    4796:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    479a:	63 e0       	ldi	r22, 0x03	; 3
    479c:	74 e0       	ldi	r23, 0x04	; 4
    479e:	81 eb       	ldi	r24, 0xB1	; 177
    47a0:	97 e0       	ldi	r25, 0x07	; 7
    47a2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    47a6:	b6 01       	movw	r22, r12
    47a8:	81 eb       	ldi	r24, 0xB1	; 177
    47aa:	97 e0       	ldi	r25, 0x07	; 7
    47ac:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    47b0:	62 e2       	ldi	r22, 0x22	; 34
    47b2:	81 eb       	ldi	r24, 0xB1	; 177
    47b4:	97 e0       	ldi	r25, 0x07	; 7
    47b6:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <_ZN5Print5printEc>
    47ba:	b7 01       	movw	r22, r14
    47bc:	81 eb       	ldi	r24, 0xB1	; 177
    47be:	97 e0       	ldi	r25, 0x07	; 7
    47c0:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    47c4:	62 e2       	ldi	r22, 0x22	; 34
    47c6:	81 eb       	ldi	r24, 0xB1	; 177
    47c8:	97 e0       	ldi	r25, 0x07	; 7
    47ca:	0e 94 ad 1c 	call	0x395a	; 0x395a <_ZN5Print7printlnEc>
    47ce:	8e 01       	movw	r16, r28
    47d0:	08 5e       	subi	r16, 0xE8	; 232
    47d2:	1e 4f       	sbci	r17, 0xFE	; 254
    47d4:	b6 01       	movw	r22, r12
    47d6:	f8 01       	movw	r30, r16
    47d8:	80 81       	ld	r24, Z
    47da:	91 81       	ldd	r25, Z+1	; 0x01
    47dc:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    47e0:	62 e2       	ldi	r22, 0x22	; 34
    47e2:	f8 01       	movw	r30, r16
    47e4:	80 81       	ld	r24, Z
    47e6:	91 81       	ldd	r25, Z+1	; 0x01
    47e8:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <_ZN5Print5printEc>
    47ec:	b7 01       	movw	r22, r14
    47ee:	f8 01       	movw	r30, r16
    47f0:	80 81       	ld	r24, Z
    47f2:	91 81       	ldd	r25, Z+1	; 0x01
    47f4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    47f8:	62 e2       	ldi	r22, 0x22	; 34
    47fa:	f8 01       	movw	r30, r16
    47fc:	80 81       	ld	r24, Z
    47fe:	91 81       	ldd	r25, Z+1	; 0x01
    4800:	0e 94 ad 1c 	call	0x395a	; 0x395a <_ZN5Print7printlnEc>
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	b5 01       	movw	r22, r10
    4808:	ce 01       	movw	r24, r28
    480a:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    480e:	18 2f       	mov	r17, r24
    4810:	6c ef       	ldi	r22, 0xFC	; 252
    4812:	73 e0       	ldi	r23, 0x03	; 3
    4814:	81 eb       	ldi	r24, 0xB1	; 177
    4816:	97 e0       	ldi	r25, 0x07	; 7
    4818:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    481c:	be 01       	movw	r22, r28
    481e:	62 5f       	subi	r22, 0xF2	; 242
    4820:	7f 4f       	sbci	r23, 0xFF	; 255
    4822:	81 eb       	ldi	r24, 0xB1	; 177
    4824:	97 e0       	ldi	r25, 0x07	; 7
    4826:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    482a:	81 2f       	mov	r24, r17
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	1f 91       	pop	r17
    4832:	0f 91       	pop	r16
    4834:	ff 90       	pop	r15
    4836:	ef 90       	pop	r14
    4838:	df 90       	pop	r13
    483a:	cf 90       	pop	r12
    483c:	bf 90       	pop	r11
    483e:	af 90       	pop	r10
    4840:	08 95       	ret

00004842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    4842:	0f 93       	push	r16
    4844:	1f 93       	push	r17
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	ec 01       	movw	r28, r24
    484c:	8a 01       	movw	r16, r20
    484e:	a9 01       	movw	r20, r18
    4850:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4854:	88 23       	and	r24, r24
    4856:	41 f0       	breq	.+16     	; 0x4868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    4858:	b8 01       	movw	r22, r16
    485a:	ce 01       	movw	r24, r28
    485c:	0e 96       	adiw	r24, 0x0e	; 14
    485e:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <strcmp_P>
    4862:	21 e0       	ldi	r18, 0x01	; 1
    4864:	89 2b       	or	r24, r25
    4866:	09 f0       	breq	.+2      	; 0x486a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	82 2f       	mov	r24, r18
    486c:	df 91       	pop	r29
    486e:	cf 91       	pop	r28
    4870:	1f 91       	pop	r17
    4872:	0f 91       	pop	r16
    4874:	08 95       	ret

00004876 <_ZN13Adafruit_FONA5beginER6Stream>:
    4876:	cf 92       	push	r12
    4878:	df 92       	push	r13
    487a:	ef 92       	push	r14
    487c:	ff 92       	push	r15
    487e:	0f 93       	push	r16
    4880:	1f 93       	push	r17
    4882:	cf 93       	push	r28
    4884:	df 93       	push	r29
    4886:	ec 01       	movw	r28, r24
    4888:	7c 01       	movw	r14, r24
    488a:	88 ee       	ldi	r24, 0xE8	; 232
    488c:	e8 1a       	sub	r14, r24
    488e:	8e ef       	ldi	r24, 0xFE	; 254
    4890:	f8 0a       	sbc	r15, r24
    4892:	d7 01       	movw	r26, r14
    4894:	6d 93       	st	X+, r22
    4896:	7c 93       	st	X, r23
    4898:	61 e0       	ldi	r22, 0x01	; 1
    489a:	8c 85       	ldd	r24, Y+12	; 0x0c
    489c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <pinMode>
    48a0:	61 e0       	ldi	r22, 0x01	; 1
    48a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    48a4:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
    48a8:	6a e0       	ldi	r22, 0x0A	; 10
    48aa:	70 e0       	ldi	r23, 0x00	; 0
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    48b4:	60 e0       	ldi	r22, 0x00	; 0
    48b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b8:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
    48bc:	64 e6       	ldi	r22, 0x64	; 100
    48be:	70 e0       	ldi	r23, 0x00	; 0
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    48c8:	61 e0       	ldi	r22, 0x01	; 1
    48ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    48cc:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
    48d0:	63 e3       	ldi	r22, 0x33	; 51
    48d2:	77 e0       	ldi	r23, 0x07	; 7
    48d4:	81 eb       	ldi	r24, 0xB1	; 177
    48d6:	97 e0       	ldi	r25, 0x07	; 7
    48d8:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    48dc:	8e e0       	ldi	r24, 0x0E	; 14
    48de:	c8 2e       	mov	r12, r24
    48e0:	d1 2c       	mov	r13, r1
    48e2:	8e 01       	movw	r16, r28
    48e4:	0a 5e       	subi	r16, 0xEA	; 234
    48e6:	1e 4f       	sbci	r17, 0xFE	; 254
    48e8:	f7 01       	movw	r30, r14
    48ea:	80 81       	ld	r24, Z
    48ec:	91 81       	ldd	r25, Z+1	; 0x01
    48ee:	dc 01       	movw	r26, r24
    48f0:	ed 91       	ld	r30, X+
    48f2:	fc 91       	ld	r31, X
    48f4:	04 80       	ldd	r0, Z+4	; 0x04
    48f6:	f5 81       	ldd	r31, Z+5	; 0x05
    48f8:	e0 2d       	mov	r30, r0
    48fa:	09 95       	icall
    48fc:	89 2b       	or	r24, r25
    48fe:	89 f0       	breq	.+34     	; 0x4922 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    4900:	6e e1       	ldi	r22, 0x1E	; 30
    4902:	77 e0       	ldi	r23, 0x07	; 7
    4904:	81 eb       	ldi	r24, 0xB1	; 177
    4906:	97 e0       	ldi	r25, 0x07	; 7
    4908:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    490c:	f7 01       	movw	r30, r14
    490e:	80 81       	ld	r24, Z
    4910:	91 81       	ldd	r25, Z+1	; 0x01
    4912:	dc 01       	movw	r26, r24
    4914:	ed 91       	ld	r30, X+
    4916:	fc 91       	ld	r31, X
    4918:	06 80       	ldd	r0, Z+6	; 0x06
    491a:	f7 81       	ldd	r31, Z+7	; 0x07
    491c:	e0 2d       	mov	r30, r0
    491e:	09 95       	icall
    4920:	e3 cf       	rjmp	.-58     	; 0x48e8 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    4922:	f8 01       	movw	r30, r16
    4924:	40 81       	ld	r20, Z
    4926:	51 81       	ldd	r21, Z+1	; 0x01
    4928:	24 ef       	ldi	r18, 0xF4	; 244
    492a:	31 e0       	ldi	r19, 0x01	; 1
    492c:	6b e1       	ldi	r22, 0x1B	; 27
    492e:	77 e0       	ldi	r23, 0x07	; 7
    4930:	ce 01       	movw	r24, r28
    4932:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4936:	81 11       	cpse	r24, r1
    4938:	63 c0       	rjmp	.+198    	; 0x4a00 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    493a:	d7 01       	movw	r26, r14
    493c:	8d 91       	ld	r24, X+
    493e:	9c 91       	ld	r25, X
    4940:	dc 01       	movw	r26, r24
    4942:	ed 91       	ld	r30, X+
    4944:	fc 91       	ld	r31, X
    4946:	04 80       	ldd	r0, Z+4	; 0x04
    4948:	f5 81       	ldd	r31, Z+5	; 0x05
    494a:	e0 2d       	mov	r30, r0
    494c:	09 95       	icall
    494e:	89 2b       	or	r24, r25
    4950:	59 f0       	breq	.+22     	; 0x4968 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    4952:	f7 01       	movw	r30, r14
    4954:	80 81       	ld	r24, Z
    4956:	91 81       	ldd	r25, Z+1	; 0x01
    4958:	dc 01       	movw	r26, r24
    495a:	ed 91       	ld	r30, X+
    495c:	fc 91       	ld	r31, X
    495e:	06 80       	ldd	r0, Z+6	; 0x06
    4960:	f7 81       	ldd	r31, Z+7	; 0x07
    4962:	e0 2d       	mov	r30, r0
    4964:	09 95       	icall
    4966:	e9 cf       	rjmp	.-46     	; 0x493a <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    4968:	24 ef       	ldi	r18, 0xF4	; 244
    496a:	31 e0       	ldi	r19, 0x01	; 1
    496c:	48 e1       	ldi	r20, 0x18	; 24
    496e:	57 e0       	ldi	r21, 0x07	; 7
    4970:	65 e1       	ldi	r22, 0x15	; 21
    4972:	77 e0       	ldi	r23, 0x07	; 7
    4974:	ce 01       	movw	r24, r28
    4976:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    497a:	81 11       	cpse	r24, r1
    497c:	41 c0       	rjmp	.+130    	; 0x4a00 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    497e:	64 ef       	ldi	r22, 0xF4	; 244
    4980:	71 e0       	ldi	r23, 0x01	; 1
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    498a:	b1 e0       	ldi	r27, 0x01	; 1
    498c:	cb 1a       	sub	r12, r27
    498e:	d1 08       	sbc	r13, r1
    4990:	09 f0       	breq	.+2      	; 0x4994 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    4992:	aa cf       	rjmp	.-172    	; 0x48e8 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    4994:	63 ee       	ldi	r22, 0xE3	; 227
    4996:	76 e0       	ldi	r23, 0x06	; 6
    4998:	81 eb       	ldi	r24, 0xB1	; 177
    499a:	97 e0       	ldi	r25, 0x07	; 7
    499c:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    49a0:	d8 01       	movw	r26, r16
    49a2:	4d 91       	ld	r20, X+
    49a4:	5c 91       	ld	r21, X
    49a6:	24 ef       	ldi	r18, 0xF4	; 244
    49a8:	31 e0       	ldi	r19, 0x01	; 1
    49aa:	60 ee       	ldi	r22, 0xE0	; 224
    49ac:	76 e0       	ldi	r23, 0x06	; 6
    49ae:	ce 01       	movw	r24, r28
    49b0:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49b4:	64 e6       	ldi	r22, 0x64	; 100
    49b6:	70 e0       	ldi	r23, 0x00	; 0
    49b8:	80 e0       	ldi	r24, 0x00	; 0
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    49c0:	f8 01       	movw	r30, r16
    49c2:	40 81       	ld	r20, Z
    49c4:	51 81       	ldd	r21, Z+1	; 0x01
    49c6:	24 ef       	ldi	r18, 0xF4	; 244
    49c8:	31 e0       	ldi	r19, 0x01	; 1
    49ca:	6d ed       	ldi	r22, 0xDD	; 221
    49cc:	76 e0       	ldi	r23, 0x06	; 6
    49ce:	ce 01       	movw	r24, r28
    49d0:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49d4:	64 e6       	ldi	r22, 0x64	; 100
    49d6:	70 e0       	ldi	r23, 0x00	; 0
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    49e0:	d8 01       	movw	r26, r16
    49e2:	4d 91       	ld	r20, X+
    49e4:	5c 91       	ld	r21, X
    49e6:	24 ef       	ldi	r18, 0xF4	; 244
    49e8:	31 e0       	ldi	r19, 0x01	; 1
    49ea:	6a ed       	ldi	r22, 0xDA	; 218
    49ec:	76 e0       	ldi	r23, 0x06	; 6
    49ee:	ce 01       	movw	r24, r28
    49f0:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49f4:	64 e6       	ldi	r22, 0x64	; 100
    49f6:	70 e0       	ldi	r23, 0x00	; 0
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    4a00:	f8 01       	movw	r30, r16
    4a02:	40 81       	ld	r20, Z
    4a04:	51 81       	ldd	r21, Z+1	; 0x01
    4a06:	24 ef       	ldi	r18, 0xF4	; 244
    4a08:	31 e0       	ldi	r19, 0x01	; 1
    4a0a:	65 ed       	ldi	r22, 0xD5	; 213
    4a0c:	76 e0       	ldi	r23, 0x06	; 6
    4a0e:	ce 01       	movw	r24, r28
    4a10:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a14:	64 e6       	ldi	r22, 0x64	; 100
    4a16:	70 e0       	ldi	r23, 0x00	; 0
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    4a20:	d8 01       	movw	r26, r16
    4a22:	4d 91       	ld	r20, X+
    4a24:	5c 91       	ld	r21, X
    4a26:	24 ef       	ldi	r18, 0xF4	; 244
    4a28:	31 e0       	ldi	r19, 0x01	; 1
    4a2a:	60 ed       	ldi	r22, 0xD0	; 208
    4a2c:	76 e0       	ldi	r23, 0x06	; 6
    4a2e:	ce 01       	movw	r24, r28
    4a30:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a34:	d8 2e       	mov	r13, r24
    4a36:	88 23       	and	r24, r24
    4a38:	09 f4       	brne	.+2      	; 0x4a3c <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    4a3a:	97 c0       	rjmp	.+302    	; 0x4b6a <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4a3c:	f8 01       	movw	r30, r16
    4a3e:	40 81       	ld	r20, Z
    4a40:	51 81       	ldd	r21, Z+1	; 0x01
    4a42:	24 ef       	ldi	r18, 0xF4	; 244
    4a44:	31 e0       	ldi	r19, 0x01	; 1
    4a46:	66 ec       	ldi	r22, 0xC6	; 198
    4a48:	76 e0       	ldi	r23, 0x06	; 6
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a50:	64 e6       	ldi	r22, 0x64	; 100
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <delay>
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    4a62:	6f eb       	ldi	r22, 0xBF	; 191
    4a64:	76 e0       	ldi	r23, 0x06	; 6
    4a66:	81 eb       	ldi	r24, 0xB1	; 177
    4a68:	97 e0       	ldi	r25, 0x07	; 7
    4a6a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4a6e:	64 e2       	ldi	r22, 0x24	; 36
    4a70:	73 e0       	ldi	r23, 0x03	; 3
    4a72:	81 eb       	ldi	r24, 0xB1	; 177
    4a74:	97 e0       	ldi	r25, 0x07	; 7
    4a76:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4a7a:	64 e2       	ldi	r22, 0x24	; 36
    4a7c:	73 e0       	ldi	r23, 0x03	; 3
    4a7e:	d7 01       	movw	r26, r14
    4a80:	8d 91       	ld	r24, X+
    4a82:	9c 91       	ld	r25, X
    4a84:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4a88:	41 e0       	ldi	r20, 0x01	; 1
    4a8a:	64 ef       	ldi	r22, 0xF4	; 244
    4a8c:	71 e0       	ldi	r23, 0x01	; 1
    4a8e:	ce 01       	movw	r24, r28
    4a90:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4a94:	68 eb       	ldi	r22, 0xB8	; 184
    4a96:	76 e0       	ldi	r23, 0x06	; 6
    4a98:	81 eb       	ldi	r24, 0xB1	; 177
    4a9a:	97 e0       	ldi	r25, 0x07	; 7
    4a9c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4aa0:	8e 01       	movw	r16, r28
    4aa2:	02 5f       	subi	r16, 0xF2	; 242
    4aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa6:	b8 01       	movw	r22, r16
    4aa8:	81 eb       	ldi	r24, 0xB1	; 177
    4aaa:	97 e0       	ldi	r25, 0x07	; 7
    4aac:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4ab0:	6d ea       	ldi	r22, 0xAD	; 173
    4ab2:	76 e0       	ldi	r23, 0x06	; 6
    4ab4:	c8 01       	movw	r24, r16
    4ab6:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4aba:	89 2b       	or	r24, r25
    4abc:	11 f0       	breq	.+4      	; 0x4ac2 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    4abe:	83 e0       	ldi	r24, 0x03	; 3
    4ac0:	23 c0       	rjmp	.+70     	; 0x4b08 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4ac2:	62 ea       	ldi	r22, 0xA2	; 162
    4ac4:	76 e0       	ldi	r23, 0x06	; 6
    4ac6:	c8 01       	movw	r24, r16
    4ac8:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4acc:	89 2b       	or	r24, r25
    4ace:	11 f0       	breq	.+4      	; 0x4ad4 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    4ad0:	82 e0       	ldi	r24, 0x02	; 2
    4ad2:	1a c0       	rjmp	.+52     	; 0x4b08 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4ad4:	67 e9       	ldi	r22, 0x97	; 151
    4ad6:	76 e0       	ldi	r23, 0x06	; 6
    4ad8:	c8 01       	movw	r24, r16
    4ada:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4ade:	89 2b       	or	r24, r25
    4ae0:	11 f0       	breq	.+4      	; 0x4ae6 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    4ae2:	81 e0       	ldi	r24, 0x01	; 1
    4ae4:	11 c0       	rjmp	.+34     	; 0x4b08 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4ae6:	67 e8       	ldi	r22, 0x87	; 135
    4ae8:	76 e0       	ldi	r23, 0x06	; 6
    4aea:	c8 01       	movw	r24, r16
    4aec:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4af0:	89 2b       	or	r24, r25
    4af2:	11 f0       	breq	.+4      	; 0x4af8 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    4af4:	84 e0       	ldi	r24, 0x04	; 4
    4af6:	08 c0       	rjmp	.+16     	; 0x4b08 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4af8:	67 e7       	ldi	r22, 0x77	; 119
    4afa:	76 e0       	ldi	r23, 0x06	; 6
    4afc:	c8 01       	movw	r24, r16
    4afe:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4b02:	89 2b       	or	r24, r25
    4b04:	11 f0       	breq	.+4      	; 0x4b0a <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    4b06:	85 e0       	ldi	r24, 0x05	; 5
    4b08:	8d 87       	std	Y+13, r24	; 0x0d
    4b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b0c:	81 30       	cpi	r24, 0x01	; 1
    4b0e:	69 f5       	brne	.+90     	; 0x4b6a <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4b10:	60 e7       	ldi	r22, 0x70	; 112
    4b12:	76 e0       	ldi	r23, 0x06	; 6
    4b14:	81 eb       	ldi	r24, 0xB1	; 177
    4b16:	97 e0       	ldi	r25, 0x07	; 7
    4b18:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4b1c:	68 e2       	ldi	r22, 0x28	; 40
    4b1e:	73 e0       	ldi	r23, 0x03	; 3
    4b20:	81 eb       	ldi	r24, 0xB1	; 177
    4b22:	97 e0       	ldi	r25, 0x07	; 7
    4b24:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4b28:	68 e2       	ldi	r22, 0x28	; 40
    4b2a:	73 e0       	ldi	r23, 0x03	; 3
    4b2c:	f7 01       	movw	r30, r14
    4b2e:	80 81       	ld	r24, Z
    4b30:	91 81       	ldd	r25, Z+1	; 0x01
    4b32:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4b36:	41 e0       	ldi	r20, 0x01	; 1
    4b38:	64 ef       	ldi	r22, 0xF4	; 244
    4b3a:	71 e0       	ldi	r23, 0x01	; 1
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4b42:	69 e6       	ldi	r22, 0x69	; 105
    4b44:	76 e0       	ldi	r23, 0x06	; 6
    4b46:	81 eb       	ldi	r24, 0xB1	; 177
    4b48:	97 e0       	ldi	r25, 0x07	; 7
    4b4a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4b4e:	b8 01       	movw	r22, r16
    4b50:	81 eb       	ldi	r24, 0xB1	; 177
    4b52:	97 e0       	ldi	r25, 0x07	; 7
    4b54:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4b58:	61 e6       	ldi	r22, 0x61	; 97
    4b5a:	76 e0       	ldi	r23, 0x06	; 6
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    4b62:	89 2b       	or	r24, r25
    4b64:	11 f0       	breq	.+4      	; 0x4b6a <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4b66:	86 e0       	ldi	r24, 0x06	; 6
    4b68:	8d 87       	std	Y+13, r24	; 0x0d
    4b6a:	8d 2d       	mov	r24, r13
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	1f 91       	pop	r17
    4b72:	0f 91       	pop	r16
    4b74:	ff 90       	pop	r15
    4b76:	ef 90       	pop	r14
    4b78:	df 90       	pop	r13
    4b7a:	cf 90       	pop	r12
    4b7c:	08 95       	ret

00004b7e <_ZN13Adafruit_FONA9HTTP_initEv>:
    4b7e:	fc 01       	movw	r30, r24
    4b80:	ea 5e       	subi	r30, 0xEA	; 234
    4b82:	fe 4f       	sbci	r31, 0xFE	; 254
    4b84:	40 81       	ld	r20, Z
    4b86:	51 81       	ldd	r21, Z+1	; 0x01
    4b88:	24 ef       	ldi	r18, 0xF4	; 244
    4b8a:	31 e0       	ldi	r19, 0x01	; 1
    4b8c:	6d e1       	ldi	r22, 0x1D	; 29
    4b8e:	75 e0       	ldi	r23, 0x05	; 5
    4b90:	0c 94 21 24 	jmp	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004b94 <_ZN13Adafruit_FONA9HTTP_termEv>:
    4b94:	fc 01       	movw	r30, r24
    4b96:	ea 5e       	subi	r30, 0xEA	; 234
    4b98:	fe 4f       	sbci	r31, 0xFE	; 254
    4b9a:	40 81       	ld	r20, Z
    4b9c:	51 81       	ldd	r21, Z+1	; 0x01
    4b9e:	24 ef       	ldi	r18, 0xF4	; 244
    4ba0:	31 e0       	ldi	r19, 0x01	; 1
    4ba2:	61 e1       	ldi	r22, 0x11	; 17
    4ba4:	75 e0       	ldi	r23, 0x05	; 5
    4ba6:	0c 94 21 24 	jmp	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004baa <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    4baa:	0c 94 ca 25 	jmp	0x4b94	; 0x4b94 <_ZN13Adafruit_FONA9HTTP_termEv>

00004bae <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    4bae:	0f 93       	push	r16
    4bb0:	1f 93       	push	r17
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	ec 01       	movw	r28, r24
    4bb8:	8a 01       	movw	r16, r20
    4bba:	a9 01       	movw	r20, r18
    4bbc:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN13Adafruit_FONA8getReplyEPcj>
    4bc0:	88 23       	and	r24, r24
    4bc2:	41 f0       	breq	.+16     	; 0x4bd4 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    4bc4:	b8 01       	movw	r22, r16
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	0e 96       	adiw	r24, 0x0e	; 14
    4bca:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <strcmp_P>
    4bce:	21 e0       	ldi	r18, 0x01	; 1
    4bd0:	89 2b       	or	r24, r25
    4bd2:	09 f0       	breq	.+2      	; 0x4bd6 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	82 2f       	mov	r24, r18
    4bd8:	df 91       	pop	r29
    4bda:	cf 91       	pop	r28
    4bdc:	1f 91       	pop	r17
    4bde:	0f 91       	pop	r16
    4be0:	08 95       	ret

00004be2 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    4be2:	af 92       	push	r10
    4be4:	bf 92       	push	r11
    4be6:	cf 92       	push	r12
    4be8:	df 92       	push	r13
    4bea:	ef 92       	push	r14
    4bec:	ff 92       	push	r15
    4bee:	0f 93       	push	r16
    4bf0:	1f 93       	push	r17
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	6e 97       	sbiw	r28, 0x1e	; 30
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	f8 94       	cli
    4c00:	de bf       	out	0x3e, r29	; 62
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	8c 01       	movw	r16, r24
    4c08:	5b 01       	movw	r10, r22
    4c0a:	6a 01       	movw	r12, r20
    4c0c:	fc 01       	movw	r30, r24
    4c0e:	ea 5e       	subi	r30, 0xEA	; 234
    4c10:	fe 4f       	sbci	r31, 0xFE	; 254
    4c12:	40 81       	ld	r20, Z
    4c14:	51 81       	ldd	r21, Z+1	; 0x01
    4c16:	24 ef       	ldi	r18, 0xF4	; 244
    4c18:	31 e0       	ldi	r19, 0x01	; 1
    4c1a:	6a e2       	ldi	r22, 0x2A	; 42
    4c1c:	76 e0       	ldi	r23, 0x06	; 6
    4c1e:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4c22:	88 23       	and	r24, r24
    4c24:	09 f4       	brne	.+2      	; 0x4c28 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4c26:	88 c0       	rjmp	.+272    	; 0x4d38 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4c28:	8a e0       	ldi	r24, 0x0A	; 10
    4c2a:	e7 e2       	ldi	r30, 0x27	; 39
    4c2c:	f2 e0       	ldi	r31, 0x02	; 2
    4c2e:	9e 01       	movw	r18, r28
    4c30:	2f 5f       	subi	r18, 0xFF	; 255
    4c32:	3f 4f       	sbci	r19, 0xFF	; 255
    4c34:	79 01       	movw	r14, r18
    4c36:	d9 01       	movw	r26, r18
    4c38:	01 90       	ld	r0, Z+
    4c3a:	0d 92       	st	X+, r0
    4c3c:	8a 95       	dec	r24
    4c3e:	e1 f7       	brne	.-8      	; 0x4c38 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    4c40:	fe 01       	movw	r30, r28
    4c42:	3b 96       	adiw	r30, 0x0b	; 11
    4c44:	84 e1       	ldi	r24, 0x14	; 20
    4c46:	df 01       	movw	r26, r30
    4c48:	1d 92       	st	X+, r1
    4c4a:	8a 95       	dec	r24
    4c4c:	e9 f7       	brne	.-6      	; 0x4c48 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    4c4e:	43 e1       	ldi	r20, 0x13	; 19
    4c50:	50 e0       	ldi	r21, 0x00	; 0
    4c52:	b5 01       	movw	r22, r10
    4c54:	ce 01       	movw	r24, r28
    4c56:	0a 96       	adiw	r24, 0x0a	; 10
    4c58:	0e 94 28 30 	call	0x6050	; 0x6050 <strncpy>
    4c5c:	f7 01       	movw	r30, r14
    4c5e:	01 90       	ld	r0, Z+
    4c60:	00 20       	and	r0, r0
    4c62:	e9 f7       	brne	.-6      	; 0x4c5e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    4c64:	31 97       	sbiw	r30, 0x01	; 1
    4c66:	82 e2       	ldi	r24, 0x22	; 34
    4c68:	80 83       	st	Z, r24
    4c6a:	24 ef       	ldi	r18, 0xF4	; 244
    4c6c:	31 e0       	ldi	r19, 0x01	; 1
    4c6e:	47 e2       	ldi	r20, 0x27	; 39
    4c70:	56 e0       	ldi	r21, 0x06	; 6
    4c72:	b7 01       	movw	r22, r14
    4c74:	c8 01       	movw	r24, r16
    4c76:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    4c7a:	88 23       	and	r24, r24
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    4c7e:	5c c0       	rjmp	.+184    	; 0x4d38 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4c80:	64 e2       	ldi	r22, 0x24	; 36
    4c82:	76 e0       	ldi	r23, 0x06	; 6
    4c84:	81 eb       	ldi	r24, 0xB1	; 177
    4c86:	97 e0       	ldi	r25, 0x07	; 7
    4c88:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4c8c:	b6 01       	movw	r22, r12
    4c8e:	81 eb       	ldi	r24, 0xB1	; 177
    4c90:	97 e0       	ldi	r25, 0x07	; 7
    4c92:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4c96:	b6 01       	movw	r22, r12
    4c98:	78 01       	movw	r14, r16
    4c9a:	b8 ee       	ldi	r27, 0xE8	; 232
    4c9c:	eb 1a       	sub	r14, r27
    4c9e:	be ef       	ldi	r27, 0xFE	; 254
    4ca0:	fb 0a       	sbc	r15, r27
    4ca2:	f7 01       	movw	r30, r14
    4ca4:	80 81       	ld	r24, Z
    4ca6:	91 81       	ldd	r25, Z+1	; 0x01
    4ca8:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4cac:	d7 01       	movw	r26, r14
    4cae:	8d 91       	ld	r24, X+
    4cb0:	9c 91       	ld	r25, X
    4cb2:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEv>
    4cb6:	f7 01       	movw	r30, r14
    4cb8:	80 81       	ld	r24, Z
    4cba:	91 81       	ldd	r25, Z+1	; 0x01
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	ed 91       	ld	r30, X+
    4cc0:	fc 91       	ld	r31, X
    4cc2:	01 90       	ld	r0, Z+
    4cc4:	f0 81       	ld	r31, Z
    4cc6:	e0 2d       	mov	r30, r0
    4cc8:	6a e1       	ldi	r22, 0x1A	; 26
    4cca:	09 95       	icall
    4ccc:	61 e4       	ldi	r22, 0x41	; 65
    4cce:	73 e0       	ldi	r23, 0x03	; 3
    4cd0:	81 eb       	ldi	r24, 0xB1	; 177
    4cd2:	97 e0       	ldi	r25, 0x07	; 7
    4cd4:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    4cd8:	f8 01       	movw	r30, r16
    4cda:	85 85       	ldd	r24, Z+13	; 0x0d
    4cdc:	84 50       	subi	r24, 0x04	; 4
    4cde:	82 30       	cpi	r24, 0x02	; 2
    4ce0:	60 f4       	brcc	.+24     	; 0x4cfa <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    4ce2:	40 e0       	ldi	r20, 0x00	; 0
    4ce4:	68 ec       	ldi	r22, 0xC8	; 200
    4ce6:	70 e0       	ldi	r23, 0x00	; 0
    4ce8:	c8 01       	movw	r24, r16
    4cea:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4cee:	40 e0       	ldi	r20, 0x00	; 0
    4cf0:	68 ec       	ldi	r22, 0xC8	; 200
    4cf2:	70 e0       	ldi	r23, 0x00	; 0
    4cf4:	c8 01       	movw	r24, r16
    4cf6:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4cfa:	40 e0       	ldi	r20, 0x00	; 0
    4cfc:	60 e1       	ldi	r22, 0x10	; 16
    4cfe:	77 e2       	ldi	r23, 0x27	; 39
    4d00:	c8 01       	movw	r24, r16
    4d02:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4d06:	78 01       	movw	r14, r16
    4d08:	fe e0       	ldi	r31, 0x0E	; 14
    4d0a:	ef 0e       	add	r14, r31
    4d0c:	f1 1c       	adc	r15, r1
    4d0e:	64 e4       	ldi	r22, 0x44	; 68
    4d10:	73 e0       	ldi	r23, 0x03	; 3
    4d12:	c7 01       	movw	r24, r14
    4d14:	0e 94 37 30 	call	0x606e	; 0x606e <strstr>
    4d18:	89 2b       	or	r24, r25
    4d1a:	71 f0       	breq	.+28     	; 0x4d38 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4d1c:	40 e0       	ldi	r20, 0x00	; 0
    4d1e:	68 ee       	ldi	r22, 0xE8	; 232
    4d20:	73 e0       	ldi	r23, 0x03	; 3
    4d22:	c8 01       	movw	r24, r16
    4d24:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    4d28:	67 e1       	ldi	r22, 0x17	; 23
    4d2a:	73 e0       	ldi	r23, 0x03	; 3
    4d2c:	c7 01       	movw	r24, r14
    4d2e:	0e 94 16 30 	call	0x602c	; 0x602c <strcmp>
    4d32:	21 e0       	ldi	r18, 0x01	; 1
    4d34:	89 2b       	or	r24, r25
    4d36:	09 f0       	breq	.+2      	; 0x4d3a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	82 2f       	mov	r24, r18
    4d3c:	6e 96       	adiw	r28, 0x1e	; 30
    4d3e:	0f b6       	in	r0, 0x3f	; 63
    4d40:	f8 94       	cli
    4d42:	de bf       	out	0x3e, r29	; 62
    4d44:	0f be       	out	0x3f, r0	; 63
    4d46:	cd bf       	out	0x3d, r28	; 61
    4d48:	df 91       	pop	r29
    4d4a:	cf 91       	pop	r28
    4d4c:	1f 91       	pop	r17
    4d4e:	0f 91       	pop	r16
    4d50:	ff 90       	pop	r15
    4d52:	ef 90       	pop	r14
    4d54:	df 90       	pop	r13
    4d56:	cf 90       	pop	r12
    4d58:	bf 90       	pop	r11
    4d5a:	af 90       	pop	r10
    4d5c:	08 95       	ret

00004d5e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    4d5e:	cf 92       	push	r12
    4d60:	df 92       	push	r13
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	ec 01       	movw	r28, r24
    4d70:	68 01       	movw	r12, r16
    4d72:	87 01       	movw	r16, r14
    4d74:	0e 94 63 23 	call	0x46c6	; 0x46c6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4d78:	b6 01       	movw	r22, r12
    4d7a:	ce 01       	movw	r24, r28
    4d7c:	0e 96       	adiw	r24, 0x0e	; 14
    4d7e:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <strcmp_P>
    4d82:	21 e0       	ldi	r18, 0x01	; 1
    4d84:	89 2b       	or	r24, r25
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4d88:	20 e0       	ldi	r18, 0x00	; 0
    4d8a:	82 2f       	mov	r24, r18
    4d8c:	df 91       	pop	r29
    4d8e:	cf 91       	pop	r28
    4d90:	1f 91       	pop	r17
    4d92:	0f 91       	pop	r16
    4d94:	ff 90       	pop	r15
    4d96:	ef 90       	pop	r14
    4d98:	df 90       	pop	r13
    4d9a:	cf 90       	pop	r12
    4d9c:	08 95       	ret

00004d9e <_ZN13Adafruit_FONA8HTTP_sslEb>:
    4d9e:	ef 92       	push	r14
    4da0:	ff 92       	push	r15
    4da2:	0f 93       	push	r16
    4da4:	1f 93       	push	r17
    4da6:	fc 01       	movw	r30, r24
    4da8:	ea 5e       	subi	r30, 0xEA	; 234
    4daa:	fe 4f       	sbci	r31, 0xFE	; 254
    4dac:	00 81       	ld	r16, Z
    4dae:	11 81       	ldd	r17, Z+1	; 0x01
    4db0:	26 2f       	mov	r18, r22
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	40 e0       	ldi	r20, 0x00	; 0
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	64 ef       	ldi	r22, 0xF4	; 244
    4dba:	e6 2e       	mov	r14, r22
    4dbc:	ff 24       	eor	r15, r15
    4dbe:	f3 94       	inc	r15
    4dc0:	61 e7       	ldi	r22, 0x71	; 113
    4dc2:	74 e0       	ldi	r23, 0x04	; 4
    4dc4:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	08 95       	ret

00004dd2 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	ec 01       	movw	r28, r24
    4ddc:	8b 01       	movw	r16, r22
    4dde:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <_ZN13Adafruit_FONA9HTTP_termEv>
    4de2:	ce 01       	movw	r24, r28
    4de4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <_ZN13Adafruit_FONA9HTTP_initEv>
    4de8:	81 11       	cpse	r24, r1
    4dea:	02 c0       	rjmp	.+4      	; 0x4df0 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	38 c0       	rjmp	.+112    	; 0x4e60 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4df0:	21 e0       	ldi	r18, 0x01	; 1
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	40 e0       	ldi	r20, 0x00	; 0
    4df6:	50 e0       	ldi	r21, 0x00	; 0
    4df8:	66 e5       	ldi	r22, 0x56	; 86
    4dfa:	74 e0       	ldi	r23, 0x04	; 4
    4dfc:	ce 01       	movw	r24, r28
    4dfe:	0e 94 25 21 	call	0x424a	; 0x424a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4e02:	88 23       	and	r24, r24
    4e04:	99 f3       	breq	.-26     	; 0x4dec <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e06:	fe 01       	movw	r30, r28
    4e08:	ec 5e       	subi	r30, 0xEC	; 236
    4e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0c:	40 81       	ld	r20, Z
    4e0e:	51 81       	ldd	r21, Z+1	; 0x01
    4e10:	63 e5       	ldi	r22, 0x53	; 83
    4e12:	74 e0       	ldi	r23, 0x04	; 4
    4e14:	ce 01       	movw	r24, r28
    4e16:	0e 94 0c 21 	call	0x4218	; 0x4218 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4e1a:	88 23       	and	r24, r24
    4e1c:	39 f3       	breq	.-50     	; 0x4dec <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e1e:	a8 01       	movw	r20, r16
    4e20:	6f e4       	ldi	r22, 0x4F	; 79
    4e22:	74 e0       	ldi	r23, 0x04	; 4
    4e24:	ce 01       	movw	r24, r28
    4e26:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    4e2a:	88 23       	and	r24, r24
    4e2c:	f9 f2       	breq	.-66     	; 0x4dec <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e2e:	fe 01       	movw	r30, r28
    4e30:	ed 5e       	subi	r30, 0xED	; 237
    4e32:	fe 4f       	sbci	r31, 0xFE	; 254
    4e34:	90 81       	ld	r25, Z
    4e36:	99 23       	and	r25, r25
    4e38:	99 f0       	breq	.+38     	; 0x4e60 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4e3a:	21 e0       	ldi	r18, 0x01	; 1
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	40 e0       	ldi	r20, 0x00	; 0
    4e40:	50 e0       	ldi	r21, 0x00	; 0
    4e42:	69 e4       	ldi	r22, 0x49	; 73
    4e44:	74 e0       	ldi	r23, 0x04	; 4
    4e46:	ce 01       	movw	r24, r28
    4e48:	0e 94 25 21 	call	0x424a	; 0x424a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4e4c:	88 23       	and	r24, r24
    4e4e:	71 f2       	breq	.-100    	; 0x4dec <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e50:	61 e0       	ldi	r22, 0x01	; 1
    4e52:	ce 01       	movw	r24, r28
    4e54:	df 91       	pop	r29
    4e56:	cf 91       	pop	r28
    4e58:	1f 91       	pop	r17
    4e5a:	0f 91       	pop	r16
    4e5c:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <_ZN13Adafruit_FONA8HTTP_sslEb>
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	08 95       	ret

00004e6a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4e6a:	ef 92       	push	r14
    4e6c:	ff 92       	push	r15
    4e6e:	0f 93       	push	r16
    4e70:	1f 93       	push	r17
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	ec 01       	movw	r28, r24
    4e78:	79 01       	movw	r14, r18
    4e7a:	98 01       	movw	r18, r16
    4e7c:	0e 94 bd 23 	call	0x477a	; 0x477a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    4e80:	b7 01       	movw	r22, r14
    4e82:	ce 01       	movw	r24, r28
    4e84:	0e 96       	adiw	r24, 0x0e	; 14
    4e86:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <strcmp_P>
    4e8a:	21 e0       	ldi	r18, 0x01	; 1
    4e8c:	89 2b       	or	r24, r25
    4e8e:	09 f0       	breq	.+2      	; 0x4e92 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    4e90:	20 e0       	ldi	r18, 0x00	; 0
    4e92:	82 2f       	mov	r24, r18
    4e94:	df 91       	pop	r29
    4e96:	cf 91       	pop	r28
    4e98:	1f 91       	pop	r17
    4e9a:	0f 91       	pop	r16
    4e9c:	ff 90       	pop	r15
    4e9e:	ef 90       	pop	r14
    4ea0:	08 95       	ret

00004ea2 <_ZN13Adafruit_FONA10enableGPRSEb>:
    4ea2:	8f 92       	push	r8
    4ea4:	9f 92       	push	r9
    4ea6:	af 92       	push	r10
    4ea8:	bf 92       	push	r11
    4eaa:	cf 92       	push	r12
    4eac:	df 92       	push	r13
    4eae:	ef 92       	push	r14
    4eb0:	ff 92       	push	r15
    4eb2:	0f 93       	push	r16
    4eb4:	1f 93       	push	r17
    4eb6:	cf 93       	push	r28
    4eb8:	df 93       	push	r29
    4eba:	ec 01       	movw	r28, r24
    4ebc:	20 e2       	ldi	r18, 0x20	; 32
    4ebe:	3e e4       	ldi	r19, 0x4E	; 78
    4ec0:	66 23       	and	r22, r22
    4ec2:	09 f4       	brne	.+2      	; 0x4ec6 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    4ec4:	0f c1       	rjmp	.+542    	; 0x50e4 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    4ec6:	46 ef       	ldi	r20, 0xF6	; 246
    4ec8:	55 e0       	ldi	r21, 0x05	; 5
    4eca:	6b ee       	ldi	r22, 0xEB	; 235
    4ecc:	75 e0       	ldi	r23, 0x05	; 5
    4ece:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4ed2:	7e 01       	movw	r14, r28
    4ed4:	8a ee       	ldi	r24, 0xEA	; 234
    4ed6:	e8 1a       	sub	r14, r24
    4ed8:	8e ef       	ldi	r24, 0xFE	; 254
    4eda:	f8 0a       	sbc	r15, r24
    4edc:	f7 01       	movw	r30, r14
    4ede:	40 81       	ld	r20, Z
    4ee0:	51 81       	ldd	r21, Z+1	; 0x01
    4ee2:	20 e1       	ldi	r18, 0x10	; 16
    4ee4:	37 e2       	ldi	r19, 0x27	; 39
    4ee6:	60 ee       	ldi	r22, 0xE0	; 224
    4ee8:	75 e0       	ldi	r23, 0x05	; 5
    4eea:	ce 01       	movw	r24, r28
    4eec:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4ef0:	88 23       	and	r24, r24
    4ef2:	09 f4       	brne	.+2      	; 0x4ef6 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    4ef4:	24 c1       	rjmp	.+584    	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4ef6:	f7 01       	movw	r30, r14
    4ef8:	40 81       	ld	r20, Z
    4efa:	51 81       	ldd	r21, Z+1	; 0x01
    4efc:	20 e1       	ldi	r18, 0x10	; 16
    4efe:	37 e2       	ldi	r19, 0x27	; 39
    4f00:	62 ec       	ldi	r22, 0xC2	; 194
    4f02:	75 e0       	ldi	r23, 0x05	; 5
    4f04:	ce 01       	movw	r24, r28
    4f06:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f0a:	88 23       	and	r24, r24
    4f0c:	09 f4       	brne	.+2      	; 0x4f10 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    4f0e:	17 c1       	rjmp	.+558    	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f10:	4e 01       	movw	r8, r28
    4f12:	f3 ef       	ldi	r31, 0xF3	; 243
    4f14:	8f 1a       	sub	r8, r31
    4f16:	fe ef       	ldi	r31, 0xFE	; 254
    4f18:	9f 0a       	sbc	r9, r31
    4f1a:	f4 01       	movw	r30, r8
    4f1c:	40 81       	ld	r20, Z
    4f1e:	51 81       	ldd	r21, Z+1	; 0x01
    4f20:	41 15       	cp	r20, r1
    4f22:	51 05       	cpc	r21, r1
    4f24:	a9 f4       	brne	.+42     	; 0x4f50 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4f26:	f7 01       	movw	r30, r14
    4f28:	40 81       	ld	r20, Z
    4f2a:	51 81       	ldd	r21, Z+1	; 0x01
    4f2c:	20 e3       	ldi	r18, 0x30	; 48
    4f2e:	35 e7       	ldi	r19, 0x75	; 117
    4f30:	6d e5       	ldi	r22, 0x5D	; 93
    4f32:	75 e0       	ldi	r23, 0x05	; 5
    4f34:	ce 01       	movw	r24, r28
    4f36:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f3a:	88 23       	and	r24, r24
    4f3c:	09 f4       	brne	.+2      	; 0x4f40 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    4f3e:	ff c0       	rjmp	.+510    	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f40:	f7 01       	movw	r30, r14
    4f42:	40 81       	ld	r20, Z
    4f44:	51 81       	ldd	r21, Z+1	; 0x01
    4f46:	20 e1       	ldi	r18, 0x10	; 16
    4f48:	37 e2       	ldi	r19, 0x27	; 39
    4f4a:	64 e5       	ldi	r22, 0x54	; 84
    4f4c:	75 e0       	ldi	r23, 0x05	; 5
    4f4e:	e8 c0       	rjmp	.+464    	; 0x5120 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    4f50:	f7 01       	movw	r30, r14
    4f52:	20 81       	ld	r18, Z
    4f54:	31 81       	ldd	r19, Z+1	; 0x01
    4f56:	00 e1       	ldi	r16, 0x10	; 16
    4f58:	17 e2       	ldi	r17, 0x27	; 39
    4f5a:	6e ea       	ldi	r22, 0xAE	; 174
    4f5c:	75 e0       	ldi	r23, 0x05	; 5
    4f5e:	ce 01       	movw	r24, r28
    4f60:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4f64:	88 23       	and	r24, r24
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4f68:	ea c0       	rjmp	.+468    	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f6a:	ce 01       	movw	r24, r28
    4f6c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <_ZN13Adafruit_FONA10flushInputEv>
    4f70:	8e 01       	movw	r16, r28
    4f72:	08 5e       	subi	r16, 0xE8	; 232
    4f74:	1e 4f       	sbci	r17, 0xFE	; 254
    4f76:	64 ea       	ldi	r22, 0xA4	; 164
    4f78:	75 e0       	ldi	r23, 0x05	; 5
    4f7a:	f8 01       	movw	r30, r16
    4f7c:	80 81       	ld	r24, Z
    4f7e:	91 81       	ldd	r25, Z+1	; 0x01
    4f80:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4f84:	f4 01       	movw	r30, r8
    4f86:	60 81       	ld	r22, Z
    4f88:	71 81       	ldd	r23, Z+1	; 0x01
    4f8a:	f8 01       	movw	r30, r16
    4f8c:	80 81       	ld	r24, Z
    4f8e:	91 81       	ldd	r25, Z+1	; 0x01
    4f90:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4f94:	5e 01       	movw	r10, r28
    4f96:	f1 ef       	ldi	r31, 0xF1	; 241
    4f98:	af 1a       	sub	r10, r31
    4f9a:	fe ef       	ldi	r31, 0xFE	; 254
    4f9c:	bf 0a       	sbc	r11, r31
    4f9e:	f5 01       	movw	r30, r10
    4fa0:	80 81       	ld	r24, Z
    4fa2:	91 81       	ldd	r25, Z+1	; 0x01
    4fa4:	89 2b       	or	r24, r25
    4fa6:	79 f0       	breq	.+30     	; 0x4fc6 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    4fa8:	65 e6       	ldi	r22, 0x65	; 101
    4faa:	73 e0       	ldi	r23, 0x03	; 3
    4fac:	f8 01       	movw	r30, r16
    4fae:	80 81       	ld	r24, Z
    4fb0:	91 81       	ldd	r25, Z+1	; 0x01
    4fb2:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    4fb6:	f5 01       	movw	r30, r10
    4fb8:	60 81       	ld	r22, Z
    4fba:	71 81       	ldd	r23, Z+1	; 0x01
    4fbc:	f8 01       	movw	r30, r16
    4fbe:	80 81       	ld	r24, Z
    4fc0:	91 81       	ldd	r25, Z+1	; 0x01
    4fc2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4fc6:	6e 01       	movw	r12, r28
    4fc8:	ff ee       	ldi	r31, 0xEF	; 239
    4fca:	cf 1a       	sub	r12, r31
    4fcc:	fe ef       	ldi	r31, 0xFE	; 254
    4fce:	df 0a       	sbc	r13, r31
    4fd0:	f6 01       	movw	r30, r12
    4fd2:	80 81       	ld	r24, Z
    4fd4:	91 81       	ldd	r25, Z+1	; 0x01
    4fd6:	89 2b       	or	r24, r25
    4fd8:	79 f0       	breq	.+30     	; 0x4ff8 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    4fda:	65 e6       	ldi	r22, 0x65	; 101
    4fdc:	73 e0       	ldi	r23, 0x03	; 3
    4fde:	f8 01       	movw	r30, r16
    4fe0:	80 81       	ld	r24, Z
    4fe2:	91 81       	ldd	r25, Z+1	; 0x01
    4fe4:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    4fe8:	f6 01       	movw	r30, r12
    4fea:	60 81       	ld	r22, Z
    4fec:	71 81       	ldd	r23, Z+1	; 0x01
    4fee:	f8 01       	movw	r30, r16
    4ff0:	80 81       	ld	r24, Z
    4ff2:	91 81       	ldd	r25, Z+1	; 0x01
    4ff4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    4ff8:	67 e6       	ldi	r22, 0x67	; 103
    4ffa:	73 e0       	ldi	r23, 0x03	; 3
    4ffc:	f8 01       	movw	r30, r16
    4ffe:	80 81       	ld	r24, Z
    5000:	91 81       	ldd	r25, Z+1	; 0x01
    5002:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    5006:	6d e9       	ldi	r22, 0x9D	; 157
    5008:	75 e0       	ldi	r23, 0x05	; 5
    500a:	81 eb       	ldi	r24, 0xB1	; 177
    500c:	97 e0       	ldi	r25, 0x07	; 7
    500e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    5012:	63 e9       	ldi	r22, 0x93	; 147
    5014:	75 e0       	ldi	r23, 0x05	; 5
    5016:	81 eb       	ldi	r24, 0xB1	; 177
    5018:	97 e0       	ldi	r25, 0x07	; 7
    501a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    501e:	f4 01       	movw	r30, r8
    5020:	60 81       	ld	r22, Z
    5022:	71 81       	ldd	r23, Z+1	; 0x01
    5024:	81 eb       	ldi	r24, 0xB1	; 177
    5026:	97 e0       	ldi	r25, 0x07	; 7
    5028:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    502c:	f5 01       	movw	r30, r10
    502e:	80 81       	ld	r24, Z
    5030:	91 81       	ldd	r25, Z+1	; 0x01
    5032:	89 2b       	or	r24, r25
    5034:	69 f0       	breq	.+26     	; 0x5050 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    5036:	65 e6       	ldi	r22, 0x65	; 101
    5038:	73 e0       	ldi	r23, 0x03	; 3
    503a:	81 eb       	ldi	r24, 0xB1	; 177
    503c:	97 e0       	ldi	r25, 0x07	; 7
    503e:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    5042:	f5 01       	movw	r30, r10
    5044:	60 81       	ld	r22, Z
    5046:	71 81       	ldd	r23, Z+1	; 0x01
    5048:	81 eb       	ldi	r24, 0xB1	; 177
    504a:	97 e0       	ldi	r25, 0x07	; 7
    504c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    5050:	f6 01       	movw	r30, r12
    5052:	80 81       	ld	r24, Z
    5054:	91 81       	ldd	r25, Z+1	; 0x01
    5056:	89 2b       	or	r24, r25
    5058:	69 f0       	breq	.+26     	; 0x5074 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    505a:	65 e6       	ldi	r22, 0x65	; 101
    505c:	73 e0       	ldi	r23, 0x03	; 3
    505e:	81 eb       	ldi	r24, 0xB1	; 177
    5060:	97 e0       	ldi	r25, 0x07	; 7
    5062:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN5Print5printEPKc>
    5066:	f6 01       	movw	r30, r12
    5068:	60 81       	ld	r22, Z
    506a:	71 81       	ldd	r23, Z+1	; 0x01
    506c:	81 eb       	ldi	r24, 0xB1	; 177
    506e:	97 e0       	ldi	r25, 0x07	; 7
    5070:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    5074:	67 e6       	ldi	r22, 0x67	; 103
    5076:	73 e0       	ldi	r23, 0x03	; 3
    5078:	81 eb       	ldi	r24, 0xB1	; 177
    507a:	97 e0       	ldi	r25, 0x07	; 7
    507c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN5Print7printlnEPKc>
    5080:	f7 01       	movw	r30, r14
    5082:	60 81       	ld	r22, Z
    5084:	71 81       	ldd	r23, Z+1	; 0x01
    5086:	40 e1       	ldi	r20, 0x10	; 16
    5088:	57 e2       	ldi	r21, 0x27	; 39
    508a:	ce 01       	movw	r24, r28
    508c:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5090:	88 23       	and	r24, r24
    5092:	09 f4       	brne	.+2      	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    5094:	54 c0       	rjmp	.+168    	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5096:	f5 01       	movw	r30, r10
    5098:	40 81       	ld	r20, Z
    509a:	51 81       	ldd	r21, Z+1	; 0x01
    509c:	41 15       	cp	r20, r1
    509e:	51 05       	cpc	r21, r1
    50a0:	39 f4       	brne	.+14     	; 0x50b0 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    50a2:	f6 01       	movw	r30, r12
    50a4:	40 81       	ld	r20, Z
    50a6:	51 81       	ldd	r21, Z+1	; 0x01
    50a8:	41 15       	cp	r20, r1
    50aa:	51 05       	cpc	r21, r1
    50ac:	71 f4       	brne	.+28     	; 0x50ca <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    50ae:	3b cf       	rjmp	.-394    	; 0x4f26 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    50b0:	f7 01       	movw	r30, r14
    50b2:	20 81       	ld	r18, Z
    50b4:	31 81       	ldd	r19, Z+1	; 0x01
    50b6:	00 e1       	ldi	r16, 0x10	; 16
    50b8:	17 e2       	ldi	r17, 0x27	; 39
    50ba:	6e e7       	ldi	r22, 0x7E	; 126
    50bc:	75 e0       	ldi	r23, 0x05	; 5
    50be:	ce 01       	movw	r24, r28
    50c0:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    50c4:	81 11       	cpse	r24, r1
    50c6:	ed cf       	rjmp	.-38     	; 0x50a2 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    50c8:	3a c0       	rjmp	.+116    	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    50ca:	f7 01       	movw	r30, r14
    50cc:	20 81       	ld	r18, Z
    50ce:	31 81       	ldd	r19, Z+1	; 0x01
    50d0:	00 e1       	ldi	r16, 0x10	; 16
    50d2:	17 e2       	ldi	r17, 0x27	; 39
    50d4:	6a e6       	ldi	r22, 0x6A	; 106
    50d6:	75 e0       	ldi	r23, 0x05	; 5
    50d8:	ce 01       	movw	r24, r28
    50da:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    50de:	81 11       	cpse	r24, r1
    50e0:	22 cf       	rjmp	.-444    	; 0x4f26 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    50e2:	2d c0       	rjmp	.+90     	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    50e4:	4c e4       	ldi	r20, 0x4C	; 76
    50e6:	55 e0       	ldi	r21, 0x05	; 5
    50e8:	61 e4       	ldi	r22, 0x41	; 65
    50ea:	75 e0       	ldi	r23, 0x05	; 5
    50ec:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    50f0:	88 23       	and	r24, r24
    50f2:	29 f1       	breq	.+74     	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    50f4:	8e 01       	movw	r16, r28
    50f6:	0a 5e       	subi	r16, 0xEA	; 234
    50f8:	1e 4f       	sbci	r17, 0xFE	; 254
    50fa:	f8 01       	movw	r30, r16
    50fc:	40 81       	ld	r20, Z
    50fe:	51 81       	ldd	r21, Z+1	; 0x01
    5100:	20 e1       	ldi	r18, 0x10	; 16
    5102:	37 e2       	ldi	r19, 0x27	; 39
    5104:	64 e3       	ldi	r22, 0x34	; 52
    5106:	75 e0       	ldi	r23, 0x05	; 5
    5108:	ce 01       	movw	r24, r28
    510a:	0e 94 21 24 	call	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    510e:	88 23       	and	r24, r24
    5110:	b1 f0       	breq	.+44     	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5112:	f8 01       	movw	r30, r16
    5114:	40 81       	ld	r20, Z
    5116:	51 81       	ldd	r21, Z+1	; 0x01
    5118:	20 e1       	ldi	r18, 0x10	; 16
    511a:	37 e2       	ldi	r19, 0x27	; 39
    511c:	69 e2       	ldi	r22, 0x29	; 41
    511e:	75 e0       	ldi	r23, 0x05	; 5
    5120:	ce 01       	movw	r24, r28
    5122:	df 91       	pop	r29
    5124:	cf 91       	pop	r28
    5126:	1f 91       	pop	r17
    5128:	0f 91       	pop	r16
    512a:	ff 90       	pop	r15
    512c:	ef 90       	pop	r14
    512e:	df 90       	pop	r13
    5130:	cf 90       	pop	r12
    5132:	bf 90       	pop	r11
    5134:	af 90       	pop	r10
    5136:	9f 90       	pop	r9
    5138:	8f 90       	pop	r8
    513a:	0c 94 21 24 	jmp	0x4842	; 0x4842 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	df 91       	pop	r29
    5142:	cf 91       	pop	r28
    5144:	1f 91       	pop	r17
    5146:	0f 91       	pop	r16
    5148:	ff 90       	pop	r15
    514a:	ef 90       	pop	r14
    514c:	df 90       	pop	r13
    514e:	cf 90       	pop	r12
    5150:	bf 90       	pop	r11
    5152:	af 90       	pop	r10
    5154:	9f 90       	pop	r9
    5156:	8f 90       	pop	r8
    5158:	08 95       	ret

0000515a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    515a:	af 92       	push	r10
    515c:	bf 92       	push	r11
    515e:	cf 92       	push	r12
    5160:	df 92       	push	r13
    5162:	ef 92       	push	r14
    5164:	ff 92       	push	r15
    5166:	0f 93       	push	r16
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	5b 01       	movw	r10, r22
    516e:	6a 01       	movw	r12, r20
    5170:	e2 2e       	mov	r14, r18
    5172:	0e 96       	adiw	r24, 0x0e	; 14
    5174:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <strstr_P>
    5178:	ec 01       	movw	r28, r24
    517a:	89 2b       	or	r24, r25
    517c:	c1 f0       	breq	.+48     	; 0x51ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    517e:	c5 01       	movw	r24, r10
    5180:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__strlen_P>
    5184:	8c 0f       	add	r24, r28
    5186:	9d 1f       	adc	r25, r29
    5188:	c0 e0       	ldi	r28, 0x00	; 0
    518a:	f1 2c       	mov	r15, r1
    518c:	c0 17       	cp	r28, r16
    518e:	41 f0       	breq	.+16     	; 0x51a0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    5190:	b7 01       	movw	r22, r14
    5192:	0e 94 0b 30 	call	0x6016	; 0x6016 <strchr>
    5196:	00 97       	sbiw	r24, 0x00	; 0
    5198:	51 f0       	breq	.+20     	; 0x51ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    519a:	01 96       	adiw	r24, 0x01	; 1
    519c:	cf 5f       	subi	r28, 0xFF	; 255
    519e:	f6 cf       	rjmp	.-20     	; 0x518c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    51a0:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <atoi>
    51a4:	f6 01       	movw	r30, r12
    51a6:	91 83       	std	Z+1, r25	; 0x01
    51a8:	80 83       	st	Z, r24
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	01 c0       	rjmp	.+2      	; 0x51b0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	0f 91       	pop	r16
    51b6:	ff 90       	pop	r15
    51b8:	ef 90       	pop	r14
    51ba:	df 90       	pop	r13
    51bc:	cf 90       	pop	r12
    51be:	bf 90       	pop	r11
    51c0:	af 90       	pop	r10
    51c2:	08 95       	ret

000051c4 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    51c4:	ef 92       	push	r14
    51c6:	ff 92       	push	r15
    51c8:	0f 93       	push	r16
    51ca:	cf 93       	push	r28
    51cc:	df 93       	push	r29
    51ce:	ec 01       	movw	r28, r24
    51d0:	7b 01       	movw	r14, r22
    51d2:	44 ef       	ldi	r20, 0xF4	; 244
    51d4:	51 e0       	ldi	r21, 0x01	; 1
    51d6:	68 e8       	ldi	r22, 0x88	; 136
    51d8:	74 e0       	ldi	r23, 0x04	; 4
    51da:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    51de:	00 e0       	ldi	r16, 0x00	; 0
    51e0:	2c e2       	ldi	r18, 0x2C	; 44
    51e2:	a7 01       	movw	r20, r14
    51e4:	6d e7       	ldi	r22, 0x7D	; 125
    51e6:	74 e0       	ldi	r23, 0x04	; 4
    51e8:	ce 01       	movw	r24, r28
    51ea:	0e 94 ad 28 	call	0x515a	; 0x515a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	0f 91       	pop	r16
    51f4:	ff 90       	pop	r15
    51f6:	ef 90       	pop	r14
    51f8:	08 95       	ret

000051fa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    51fa:	4f 92       	push	r4
    51fc:	5f 92       	push	r5
    51fe:	6f 92       	push	r6
    5200:	7f 92       	push	r7
    5202:	af 92       	push	r10
    5204:	bf 92       	push	r11
    5206:	cf 92       	push	r12
    5208:	df 92       	push	r13
    520a:	ef 92       	push	r14
    520c:	ff 92       	push	r15
    520e:	0f 93       	push	r16
    5210:	1f 93       	push	r17
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	ec 01       	movw	r28, r24
    5218:	5a 01       	movw	r10, r20
    521a:	69 01       	movw	r12, r18
    521c:	27 01       	movw	r4, r14
    521e:	38 01       	movw	r6, r16
    5220:	fc 01       	movw	r30, r24
    5222:	ea 5e       	subi	r30, 0xEA	; 234
    5224:	fe 4f       	sbci	r31, 0xFE	; 254
    5226:	00 81       	ld	r16, Z
    5228:	11 81       	ldd	r17, Z+1	; 0x01
    522a:	26 2f       	mov	r18, r22
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	40 e0       	ldi	r20, 0x00	; 0
    5230:	50 e0       	ldi	r21, 0x00	; 0
    5232:	84 ef       	ldi	r24, 0xF4	; 244
    5234:	e8 2e       	mov	r14, r24
    5236:	ff 24       	eor	r15, r15
    5238:	f3 94       	inc	r15
    523a:	6e ea       	ldi	r22, 0xAE	; 174
    523c:	74 e0       	ldi	r23, 0x04	; 4
    523e:	ce 01       	movw	r24, r28
    5240:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    5244:	81 11       	cpse	r24, r1
    5246:	02 c0       	rjmp	.+4      	; 0x524c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	17 c0       	rjmp	.+46     	; 0x527a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    524c:	40 e0       	ldi	r20, 0x00	; 0
    524e:	b2 01       	movw	r22, r4
    5250:	ce 01       	movw	r24, r28
    5252:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    5256:	01 e0       	ldi	r16, 0x01	; 1
    5258:	2c e2       	ldi	r18, 0x2C	; 44
    525a:	a5 01       	movw	r20, r10
    525c:	61 ea       	ldi	r22, 0xA1	; 161
    525e:	74 e0       	ldi	r23, 0x04	; 4
    5260:	ce 01       	movw	r24, r28
    5262:	0e 94 ad 28 	call	0x515a	; 0x515a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5266:	88 23       	and	r24, r24
    5268:	79 f3       	breq	.-34     	; 0x5248 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    526a:	02 e0       	ldi	r16, 0x02	; 2
    526c:	2c e2       	ldi	r18, 0x2C	; 44
    526e:	a6 01       	movw	r20, r12
    5270:	64 e9       	ldi	r22, 0x94	; 148
    5272:	74 e0       	ldi	r23, 0x04	; 4
    5274:	ce 01       	movw	r24, r28
    5276:	0e 94 ad 28 	call	0x515a	; 0x515a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	df 90       	pop	r13
    5288:	cf 90       	pop	r12
    528a:	bf 90       	pop	r11
    528c:	af 90       	pop	r10
    528e:	7f 90       	pop	r7
    5290:	6f 90       	pop	r6
    5292:	5f 90       	pop	r5
    5294:	4f 90       	pop	r4
    5296:	08 95       	ret

00005298 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    5298:	4f 92       	push	r4
    529a:	5f 92       	push	r5
    529c:	6f 92       	push	r6
    529e:	7f 92       	push	r7
    52a0:	8f 92       	push	r8
    52a2:	9f 92       	push	r9
    52a4:	af 92       	push	r10
    52a6:	bf 92       	push	r11
    52a8:	cf 92       	push	r12
    52aa:	df 92       	push	r13
    52ac:	ef 92       	push	r14
    52ae:	ff 92       	push	r15
    52b0:	0f 93       	push	r16
    52b2:	1f 93       	push	r17
    52b4:	cf 93       	push	r28
    52b6:	df 93       	push	r29
    52b8:	ec 01       	movw	r28, r24
    52ba:	2a 01       	movw	r4, r20
    52bc:	39 01       	movw	r6, r18
    52be:	48 01       	movw	r8, r16
    52c0:	57 01       	movw	r10, r14
    52c2:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    52c6:	88 23       	and	r24, r24
    52c8:	09 f4       	brne	.+2      	; 0x52cc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    52ca:	71 c0       	rjmp	.+226    	; 0x53ae <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    52cc:	a2 01       	movw	r20, r4
    52ce:	69 e6       	ldi	r22, 0x69	; 105
    52d0:	74 e0       	ldi	r23, 0x04	; 4
    52d2:	ce 01       	movw	r24, r28
    52d4:	0e 94 0c 21 	call	0x4218	; 0x4218 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    52d8:	88 23       	and	r24, r24
    52da:	09 f4       	brne	.+2      	; 0x52de <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    52dc:	68 c0       	rjmp	.+208    	; 0x53ae <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    52de:	a8 01       	movw	r20, r16
    52e0:	60 e0       	ldi	r22, 0x00	; 0
    52e2:	70 e0       	ldi	r23, 0x00	; 0
    52e4:	00 e1       	ldi	r16, 0x10	; 16
    52e6:	17 e2       	ldi	r17, 0x27	; 39
    52e8:	20 e0       	ldi	r18, 0x00	; 0
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	ce 01       	movw	r24, r28
    52ee:	0e 94 46 21 	call	0x428c	; 0x428c <_ZN13Adafruit_FONA9HTTP_dataEmm>
    52f2:	88 23       	and	r24, r24
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    52f6:	5b c0       	rjmp	.+182    	; 0x53ae <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    52f8:	fe 01       	movw	r30, r28
    52fa:	e8 5e       	subi	r30, 0xE8	; 232
    52fc:	fe 4f       	sbci	r31, 0xFE	; 254
    52fe:	80 81       	ld	r24, Z
    5300:	91 81       	ldd	r25, Z+1	; 0x01
    5302:	dc 01       	movw	r26, r24
    5304:	ed 91       	ld	r30, X+
    5306:	fc 91       	ld	r31, X
    5308:	02 80       	ldd	r0, Z+2	; 0x02
    530a:	f3 81       	ldd	r31, Z+3	; 0x03
    530c:	e0 2d       	mov	r30, r0
    530e:	a4 01       	movw	r20, r8
    5310:	b3 01       	movw	r22, r6
    5312:	09 95       	icall
    5314:	fe 01       	movw	r30, r28
    5316:	ea 5e       	subi	r30, 0xEA	; 234
    5318:	fe 4f       	sbci	r31, 0xFE	; 254
    531a:	60 81       	ld	r22, Z
    531c:	71 81       	ldd	r23, Z+1	; 0x01
    531e:	40 e1       	ldi	r20, 0x10	; 16
    5320:	57 e2       	ldi	r21, 0x27	; 39
    5322:	ce 01       	movw	r24, r28
    5324:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5328:	88 23       	and	r24, r24
    532a:	09 f4       	brne	.+2      	; 0x532e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    532c:	40 c0       	rjmp	.+128    	; 0x53ae <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    532e:	10 e1       	ldi	r17, 0x10	; 16
    5330:	e1 2e       	mov	r14, r17
    5332:	17 e2       	ldi	r17, 0x27	; 39
    5334:	f1 2e       	mov	r15, r17
    5336:	00 e0       	ldi	r16, 0x00	; 0
    5338:	10 e0       	ldi	r17, 0x00	; 0
    533a:	96 01       	movw	r18, r12
    533c:	a5 01       	movw	r20, r10
    533e:	61 e0       	ldi	r22, 0x01	; 1
    5340:	ce 01       	movw	r24, r28
    5342:	0e 94 fd 28 	call	0x51fa	; 0x51fa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    5346:	88 23       	and	r24, r24
    5348:	91 f1       	breq	.+100    	; 0x53ae <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    534a:	60 e6       	ldi	r22, 0x60	; 96
    534c:	74 e0       	ldi	r23, 0x04	; 4
    534e:	81 eb       	ldi	r24, 0xB1	; 177
    5350:	97 e0       	ldi	r25, 0x07	; 7
    5352:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    5356:	f5 01       	movw	r30, r10
    5358:	60 81       	ld	r22, Z
    535a:	71 81       	ldd	r23, Z+1	; 0x01
    535c:	4a e0       	ldi	r20, 0x0A	; 10
    535e:	50 e0       	ldi	r21, 0x00	; 0
    5360:	81 eb       	ldi	r24, 0xB1	; 177
    5362:	97 e0       	ldi	r25, 0x07	; 7
    5364:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
    5368:	6a e5       	ldi	r22, 0x5A	; 90
    536a:	74 e0       	ldi	r23, 0x04	; 4
    536c:	81 eb       	ldi	r24, 0xB1	; 177
    536e:	97 e0       	ldi	r25, 0x07	; 7
    5370:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN5Print5printEPK19__FlashStringHelper>
    5374:	d6 01       	movw	r26, r12
    5376:	6d 91       	ld	r22, X+
    5378:	7c 91       	ld	r23, X
    537a:	4a e0       	ldi	r20, 0x0A	; 10
    537c:	50 e0       	ldi	r21, 0x00	; 0
    537e:	81 eb       	ldi	r24, 0xB1	; 177
    5380:	97 e0       	ldi	r25, 0x07	; 7
    5382:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN5Print7printlnEji>
    5386:	b6 01       	movw	r22, r12
    5388:	ce 01       	movw	r24, r28
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	1f 91       	pop	r17
    5390:	0f 91       	pop	r16
    5392:	ff 90       	pop	r15
    5394:	ef 90       	pop	r14
    5396:	df 90       	pop	r13
    5398:	cf 90       	pop	r12
    539a:	bf 90       	pop	r11
    539c:	af 90       	pop	r10
    539e:	9f 90       	pop	r9
    53a0:	8f 90       	pop	r8
    53a2:	7f 90       	pop	r7
    53a4:	6f 90       	pop	r6
    53a6:	5f 90       	pop	r5
    53a8:	4f 90       	pop	r4
    53aa:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    53ae:	80 e0       	ldi	r24, 0x00	; 0
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	1f 91       	pop	r17
    53b6:	0f 91       	pop	r16
    53b8:	ff 90       	pop	r15
    53ba:	ef 90       	pop	r14
    53bc:	df 90       	pop	r13
    53be:	cf 90       	pop	r12
    53c0:	bf 90       	pop	r11
    53c2:	af 90       	pop	r10
    53c4:	9f 90       	pop	r9
    53c6:	8f 90       	pop	r8
    53c8:	7f 90       	pop	r7
    53ca:	6f 90       	pop	r6
    53cc:	5f 90       	pop	r5
    53ce:	4f 90       	pop	r4
    53d0:	08 95       	ret

000053d2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    53d2:	af 92       	push	r10
    53d4:	bf 92       	push	r11
    53d6:	cf 92       	push	r12
    53d8:	df 92       	push	r13
    53da:	ef 92       	push	r14
    53dc:	0f 93       	push	r16
    53de:	1f 93       	push	r17
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	ec 01       	movw	r28, r24
    53e6:	6a 01       	movw	r12, r20
    53e8:	59 01       	movw	r10, r18
    53ea:	10 2f       	mov	r17, r16
    53ec:	0e 2d       	mov	r16, r14
    53ee:	44 ef       	ldi	r20, 0xF4	; 244
    53f0:	51 e0       	ldi	r21, 0x01	; 1
    53f2:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    53f6:	21 2f       	mov	r18, r17
    53f8:	a5 01       	movw	r20, r10
    53fa:	b6 01       	movw	r22, r12
    53fc:	ce 01       	movw	r24, r28
    53fe:	0e 94 ad 28 	call	0x515a	; 0x515a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5402:	18 2f       	mov	r17, r24
    5404:	88 23       	and	r24, r24
    5406:	31 f0       	breq	.+12     	; 0x5414 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5408:	40 e0       	ldi	r20, 0x00	; 0
    540a:	64 ef       	ldi	r22, 0xF4	; 244
    540c:	71 e0       	ldi	r23, 0x01	; 1
    540e:	ce 01       	movw	r24, r28
    5410:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN13Adafruit_FONA8readlineEjb>
    5414:	81 2f       	mov	r24, r17
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	1f 91       	pop	r17
    541c:	0f 91       	pop	r16
    541e:	ef 90       	pop	r14
    5420:	df 90       	pop	r13
    5422:	cf 90       	pop	r12
    5424:	bf 90       	pop	r11
    5426:	af 90       	pop	r10
    5428:	08 95       	ret

0000542a <_ZN13Adafruit_FONA14getBattPercentEPj>:
    542a:	ef 92       	push	r14
    542c:	0f 93       	push	r16
    542e:	9b 01       	movw	r18, r22
    5430:	ee 24       	eor	r14, r14
    5432:	e3 94       	inc	r14
    5434:	0c e2       	ldi	r16, 0x2C	; 44
    5436:	4a e5       	ldi	r20, 0x5A	; 90
    5438:	56 e0       	ldi	r21, 0x06	; 6
    543a:	63 e5       	ldi	r22, 0x53	; 83
    543c:	76 e0       	ldi	r23, 0x06	; 6
    543e:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5442:	0f 91       	pop	r16
    5444:	ef 90       	pop	r14
    5446:	08 95       	ret

00005448 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    5448:	ef 92       	push	r14
    544a:	0f 93       	push	r16
    544c:	cf 93       	push	r28
    544e:	df 93       	push	r29
    5450:	00 d0       	rcall	.+0      	; 0x5452 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    5452:	cd b7       	in	r28, 0x3d	; 61
    5454:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5456:	ee 24       	eor	r14, r14
    5458:	e3 94       	inc	r14
    545a:	0c e2       	ldi	r16, 0x2C	; 44
    545c:	9e 01       	movw	r18, r28
    545e:	2f 5f       	subi	r18, 0xFF	; 255
    5460:	3f 4f       	sbci	r19, 0xFF	; 255
    5462:	4b e4       	ldi	r20, 0x4B	; 75
    5464:	56 e0       	ldi	r21, 0x06	; 6
    5466:	62 e4       	ldi	r22, 0x42	; 66
    5468:	76 e0       	ldi	r23, 0x06	; 6
    546a:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    546e:	88 23       	and	r24, r24
    5470:	11 f0       	breq	.+4      	; 0x5476 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    5472:	89 81       	ldd	r24, Y+1	; 0x01
    5474:	01 c0       	rjmp	.+2      	; 0x5478 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5476:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    5478:	0f 90       	pop	r0
    547a:	0f 90       	pop	r0
    547c:	df 91       	pop	r29
    547e:	cf 91       	pop	r28
    5480:	0f 91       	pop	r16
    5482:	ef 90       	pop	r14
    5484:	08 95       	ret

00005486 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    5486:	ef 92       	push	r14
    5488:	0f 93       	push	r16
    548a:	cf 93       	push	r28
    548c:	df 93       	push	r29
    548e:	00 d0       	rcall	.+0      	; 0x5490 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    5490:	cd b7       	in	r28, 0x3d	; 61
    5492:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5494:	e1 2c       	mov	r14, r1
    5496:	0c e2       	ldi	r16, 0x2C	; 44
    5498:	9e 01       	movw	r18, r28
    549a:	2f 5f       	subi	r18, 0xFF	; 255
    549c:	3f 4f       	sbci	r19, 0xFF	; 255
    549e:	4b e3       	ldi	r20, 0x3B	; 59
    54a0:	56 e0       	ldi	r21, 0x06	; 6
    54a2:	64 e3       	ldi	r22, 0x34	; 52
    54a4:	76 e0       	ldi	r23, 0x06	; 6
    54a6:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    54aa:	88 23       	and	r24, r24
    54ac:	11 f0       	breq	.+4      	; 0x54b2 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    54ae:	89 81       	ldd	r24, Y+1	; 0x01
    54b0:	01 c0       	rjmp	.+2      	; 0x54b4 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    54b2:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    54b4:	0f 90       	pop	r0
    54b6:	0f 90       	pop	r0
    54b8:	df 91       	pop	r29
    54ba:	cf 91       	pop	r28
    54bc:	0f 91       	pop	r16
    54be:	ef 90       	pop	r14
    54c0:	08 95       	ret

000054c2 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    54c2:	20 91 99 08 	lds	r18, 0x0899	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    54c6:	30 91 9a 08 	lds	r19, 0x089A	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    54ca:	28 17       	cp	r18, r24
    54cc:	39 07       	cpc	r19, r25
    54ce:	b9 f4       	brne	.+46     	; 0x54fe <_ZN14SoftwareSerial4readEv+0x3c>
    54d0:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    54d4:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    54d8:	98 17       	cp	r25, r24
    54da:	89 f0       	breq	.+34     	; 0x54fe <_ZN14SoftwareSerial4readEv+0x3c>
    54dc:	e0 91 57 08 	lds	r30, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    54e0:	f0 e0       	ldi	r31, 0x00	; 0
    54e2:	e7 5a       	subi	r30, 0xA7	; 167
    54e4:	f7 4f       	sbci	r31, 0xF7	; 247
    54e6:	80 81       	ld	r24, Z
    54e8:	20 91 57 08 	lds	r18, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	2f 5f       	subi	r18, 0xFF	; 255
    54f0:	3f 4f       	sbci	r19, 0xFF	; 255
    54f2:	2f 73       	andi	r18, 0x3F	; 63
    54f4:	33 27       	eor	r19, r19
    54f6:	20 93 57 08 	sts	0x0857, r18	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	08 95       	ret
    54fe:	8f ef       	ldi	r24, 0xFF	; 255
    5500:	9f ef       	ldi	r25, 0xFF	; 255
    5502:	08 95       	ret

00005504 <_ZN14SoftwareSerial5writeEh>:
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	dc 01       	movw	r26, r24
    550c:	5c 96       	adiw	r26, 0x1c	; 28
    550e:	8d 91       	ld	r24, X+
    5510:	9c 91       	ld	r25, X
    5512:	5d 97       	sbiw	r26, 0x1d	; 29
    5514:	00 97       	sbiw	r24, 0x00	; 0
    5516:	39 f4       	brne	.+14     	; 0x5526 <_ZN14SoftwareSerial5writeEh+0x22>
    5518:	21 e0       	ldi	r18, 0x01	; 1
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	13 96       	adiw	r26, 0x03	; 3
    551e:	3c 93       	st	X, r19
    5520:	2e 93       	st	-X, r18
    5522:	12 97       	sbiw	r26, 0x02	; 2
    5524:	3b c0       	rjmp	.+118    	; 0x559c <_ZN14SoftwareSerial5writeEh+0x98>
    5526:	51 96       	adiw	r26, 0x11	; 17
    5528:	ed 91       	ld	r30, X+
    552a:	fc 91       	ld	r31, X
    552c:	52 97       	sbiw	r26, 0x12	; 18
    552e:	50 96       	adiw	r26, 0x10	; 16
    5530:	2c 91       	ld	r18, X
    5532:	50 97       	sbiw	r26, 0x10	; 16
    5534:	32 2f       	mov	r19, r18
    5536:	30 95       	com	r19
    5538:	1f b7       	in	r17, 0x3f	; 63
    553a:	5e 96       	adiw	r26, 0x1e	; 30
    553c:	4c 91       	ld	r20, X
    553e:	5e 97       	sbiw	r26, 0x1e	; 30
    5540:	74 2f       	mov	r23, r20
    5542:	72 70       	andi	r23, 0x02	; 2
    5544:	41 fd       	sbrc	r20, 1
    5546:	60 95       	com	r22
    5548:	f8 94       	cli
    554a:	40 81       	ld	r20, Z
    554c:	77 23       	and	r23, r23
    554e:	11 f0       	breq	.+4      	; 0x5554 <_ZN14SoftwareSerial5writeEh+0x50>
    5550:	42 2b       	or	r20, r18
    5552:	01 c0       	rjmp	.+2      	; 0x5556 <_ZN14SoftwareSerial5writeEh+0x52>
    5554:	43 23       	and	r20, r19
    5556:	40 83       	st	Z, r20
    5558:	ec 01       	movw	r28, r24
    555a:	21 97       	sbiw	r28, 0x01	; 1
    555c:	f1 f7       	brne	.-4      	; 0x555a <_ZN14SoftwareSerial5writeEh+0x56>
    555e:	48 e0       	ldi	r20, 0x08	; 8
    5560:	50 81       	ld	r21, Z
    5562:	60 ff       	sbrs	r22, 0
    5564:	02 c0       	rjmp	.+4      	; 0x556a <_ZN14SoftwareSerial5writeEh+0x66>
    5566:	52 2b       	or	r21, r18
    5568:	01 c0       	rjmp	.+2      	; 0x556c <_ZN14SoftwareSerial5writeEh+0x68>
    556a:	53 23       	and	r21, r19
    556c:	50 83       	st	Z, r21
    556e:	ec 01       	movw	r28, r24
    5570:	21 97       	sbiw	r28, 0x01	; 1
    5572:	f1 f7       	brne	.-4      	; 0x5570 <_ZN14SoftwareSerial5writeEh+0x6c>
    5574:	66 95       	lsr	r22
    5576:	41 50       	subi	r20, 0x01	; 1
    5578:	99 f7       	brne	.-26     	; 0x5560 <_ZN14SoftwareSerial5writeEh+0x5c>
    557a:	80 81       	ld	r24, Z
    557c:	77 23       	and	r23, r23
    557e:	19 f0       	breq	.+6      	; 0x5586 <_ZN14SoftwareSerial5writeEh+0x82>
    5580:	83 23       	and	r24, r19
    5582:	80 83       	st	Z, r24
    5584:	02 c0       	rjmp	.+4      	; 0x558a <_ZN14SoftwareSerial5writeEh+0x86>
    5586:	28 2b       	or	r18, r24
    5588:	20 83       	st	Z, r18
    558a:	1f bf       	out	0x3f, r17	; 63
    558c:	5c 96       	adiw	r26, 0x1c	; 28
    558e:	8d 91       	ld	r24, X+
    5590:	9c 91       	ld	r25, X
    5592:	5d 97       	sbiw	r26, 0x1d	; 29
    5594:	01 97       	sbiw	r24, 0x01	; 1
    5596:	f1 f7       	brne	.-4      	; 0x5594 <_ZN14SoftwareSerial5writeEh+0x90>
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	df 91       	pop	r29
    559e:	cf 91       	pop	r28
    55a0:	1f 91       	pop	r17
    55a2:	08 95       	ret

000055a4 <_ZN14SoftwareSerial5flushEv>:
    55a4:	08 95       	ret

000055a6 <_ZN14SoftwareSerial4peekEv>:
    55a6:	20 91 99 08 	lds	r18, 0x0899	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    55aa:	30 91 9a 08 	lds	r19, 0x089A	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    55ae:	28 17       	cp	r18, r24
    55b0:	39 07       	cpc	r19, r25
    55b2:	71 f4       	brne	.+28     	; 0x55d0 <_ZN14SoftwareSerial4peekEv+0x2a>
    55b4:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    55b8:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    55bc:	98 17       	cp	r25, r24
    55be:	41 f0       	breq	.+16     	; 0x55d0 <_ZN14SoftwareSerial4peekEv+0x2a>
    55c0:	e0 91 57 08 	lds	r30, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	e7 5a       	subi	r30, 0xA7	; 167
    55c8:	f7 4f       	sbci	r31, 0xF7	; 247
    55ca:	80 81       	ld	r24, Z
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	08 95       	ret
    55d0:	8f ef       	ldi	r24, 0xFF	; 255
    55d2:	9f ef       	ldi	r25, 0xFF	; 255
    55d4:	08 95       	ret

000055d6 <_ZN14SoftwareSerial9availableEv>:
    55d6:	20 91 99 08 	lds	r18, 0x0899	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    55da:	30 91 9a 08 	lds	r19, 0x089A	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    55de:	28 17       	cp	r18, r24
    55e0:	39 07       	cpc	r19, r25
    55e2:	71 f4       	brne	.+28     	; 0x5600 <_ZN14SoftwareSerial9availableEv+0x2a>
    55e4:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    55e8:	20 91 57 08 	lds	r18, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	80 5c       	subi	r24, 0xC0	; 192
    55f0:	9f 4f       	sbci	r25, 0xFF	; 255
    55f2:	82 1b       	sub	r24, r18
    55f4:	91 09       	sbc	r25, r1
    55f6:	60 e4       	ldi	r22, 0x40	; 64
    55f8:	70 e0       	ldi	r23, 0x00	; 0
    55fa:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__divmodhi4>
    55fe:	08 95       	ret
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	08 95       	ret

00005606 <_ZN14SoftwareSerial13stopListeningEv>:
    5606:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    560a:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    560e:	e8 17       	cp	r30, r24
    5610:	f9 07       	cpc	r31, r25
    5612:	69 f4       	brne	.+26     	; 0x562e <_ZN14SoftwareSerial13stopListeningEv+0x28>
    5614:	a3 89       	ldd	r26, Z+19	; 0x13
    5616:	b4 89       	ldd	r27, Z+20	; 0x14
    5618:	9c 91       	ld	r25, X
    561a:	85 89       	ldd	r24, Z+21	; 0x15
    561c:	80 95       	com	r24
    561e:	89 23       	and	r24, r25
    5620:	8c 93       	st	X, r24
    5622:	10 92 9a 08 	sts	0x089A, r1	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    5626:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	08 95       	ret
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	08 95       	ret

00005632 <_ZN14SoftwareSerial6listenEv>:
    5632:	cf 93       	push	r28
    5634:	df 93       	push	r29
    5636:	ec 01       	movw	r28, r24
    5638:	8a 8d       	ldd	r24, Y+26	; 0x1a
    563a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    563c:	89 2b       	or	r24, r25
    563e:	f1 f0       	breq	.+60     	; 0x567c <_ZN14SoftwareSerial6listenEv+0x4a>
    5640:	80 91 99 08 	lds	r24, 0x0899	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    5644:	90 91 9a 08 	lds	r25, 0x089A	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    5648:	c8 17       	cp	r28, r24
    564a:	d9 07       	cpc	r29, r25
    564c:	b9 f0       	breq	.+46     	; 0x567c <_ZN14SoftwareSerial6listenEv+0x4a>
    564e:	00 97       	sbiw	r24, 0x00	; 0
    5650:	11 f0       	breq	.+4      	; 0x5656 <_ZN14SoftwareSerial6listenEv+0x24>
    5652:	0e 94 03 2b 	call	0x5606	; 0x5606 <_ZN14SoftwareSerial13stopListeningEv>
    5656:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5658:	8e 7f       	andi	r24, 0xFE	; 254
    565a:	8e 8f       	std	Y+30, r24	; 0x1e
    565c:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5660:	10 92 57 08 	sts	0x0857, r1	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5664:	d0 93 9a 08 	sts	0x089A, r29	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    5668:	c0 93 99 08 	sts	0x0899, r28	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    566c:	eb 89       	ldd	r30, Y+19	; 0x13
    566e:	fc 89       	ldd	r31, Y+20	; 0x14
    5670:	90 81       	ld	r25, Z
    5672:	8d 89       	ldd	r24, Y+21	; 0x15
    5674:	89 2b       	or	r24, r25
    5676:	80 83       	st	Z, r24
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	01 c0       	rjmp	.+2      	; 0x567e <_ZN14SoftwareSerial6listenEv+0x4c>
    567c:	80 e0       	ldi	r24, 0x00	; 0
    567e:	df 91       	pop	r29
    5680:	cf 91       	pop	r28
    5682:	08 95       	ret

00005684 <__vector_3>:
    5684:	1f 92       	push	r1
    5686:	0f 92       	push	r0
    5688:	0f b6       	in	r0, 0x3f	; 63
    568a:	0f 92       	push	r0
    568c:	11 24       	eor	r1, r1
    568e:	2f 93       	push	r18
    5690:	3f 93       	push	r19
    5692:	4f 93       	push	r20
    5694:	5f 93       	push	r21
    5696:	6f 93       	push	r22
    5698:	7f 93       	push	r23
    569a:	8f 93       	push	r24
    569c:	9f 93       	push	r25
    569e:	af 93       	push	r26
    56a0:	bf 93       	push	r27
    56a2:	ef 93       	push	r30
    56a4:	ff 93       	push	r31
    56a6:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <_ZN14SoftwareSerial13active_objectE>
    56aa:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <_ZN14SoftwareSerial13active_objectE+0x1>
    56ae:	30 97       	sbiw	r30, 0x00	; 0
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <__vector_3+0x30>
    56b2:	51 c0       	rjmp	.+162    	; 0x5756 <__vector_3+0xd2>
    56b4:	96 8d       	ldd	r25, Z+30	; 0x1e
    56b6:	a6 85       	ldd	r26, Z+14	; 0x0e
    56b8:	b7 85       	ldd	r27, Z+15	; 0x0f
    56ba:	85 85       	ldd	r24, Z+13	; 0x0d
    56bc:	91 ff       	sbrs	r25, 1
    56be:	04 c0       	rjmp	.+8      	; 0x56c8 <__vector_3+0x44>
    56c0:	9c 91       	ld	r25, X
    56c2:	89 23       	and	r24, r25
    56c4:	29 f4       	brne	.+10     	; 0x56d0 <__vector_3+0x4c>
    56c6:	47 c0       	rjmp	.+142    	; 0x5756 <__vector_3+0xd2>
    56c8:	9c 91       	ld	r25, X
    56ca:	89 23       	and	r24, r25
    56cc:	09 f0       	breq	.+2      	; 0x56d0 <__vector_3+0x4c>
    56ce:	43 c0       	rjmp	.+134    	; 0x5756 <__vector_3+0xd2>
    56d0:	a3 89       	ldd	r26, Z+19	; 0x13
    56d2:	b4 89       	ldd	r27, Z+20	; 0x14
    56d4:	9c 91       	ld	r25, X
    56d6:	85 89       	ldd	r24, Z+21	; 0x15
    56d8:	80 95       	com	r24
    56da:	89 23       	and	r24, r25
    56dc:	8c 93       	st	X, r24
    56de:	86 89       	ldd	r24, Z+22	; 0x16
    56e0:	97 89       	ldd	r25, Z+23	; 0x17
    56e2:	01 97       	sbiw	r24, 0x01	; 1
    56e4:	f1 f7       	brne	.-4      	; 0x56e2 <__vector_3+0x5e>
    56e6:	60 8d       	ldd	r22, Z+24	; 0x18
    56e8:	71 8d       	ldd	r23, Z+25	; 0x19
    56ea:	a6 85       	ldd	r26, Z+14	; 0x0e
    56ec:	b7 85       	ldd	r27, Z+15	; 0x0f
    56ee:	55 85       	ldd	r21, Z+13	; 0x0d
    56f0:	38 e0       	ldi	r19, 0x08	; 8
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	cb 01       	movw	r24, r22
    56f6:	01 97       	sbiw	r24, 0x01	; 1
    56f8:	f1 f7       	brne	.-4      	; 0x56f6 <__vector_3+0x72>
    56fa:	82 2f       	mov	r24, r18
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	95 95       	asr	r25
    5700:	87 95       	ror	r24
    5702:	28 2f       	mov	r18, r24
    5704:	4c 91       	ld	r20, X
    5706:	45 23       	and	r20, r21
    5708:	09 f0       	breq	.+2      	; 0x570c <__vector_3+0x88>
    570a:	20 68       	ori	r18, 0x80	; 128
    570c:	31 50       	subi	r19, 0x01	; 1
    570e:	91 f7       	brne	.-28     	; 0x56f4 <__vector_3+0x70>
    5710:	86 8d       	ldd	r24, Z+30	; 0x1e
    5712:	81 fd       	sbrc	r24, 1
    5714:	20 95       	com	r18
    5716:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	01 96       	adiw	r24, 0x01	; 1
    571e:	8f 73       	andi	r24, 0x3F	; 63
    5720:	99 27       	eor	r25, r25
    5722:	30 91 57 08 	lds	r19, 0x0857	; 0x800857 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5726:	38 17       	cp	r19, r24
    5728:	49 f0       	breq	.+18     	; 0x573c <__vector_3+0xb8>
    572a:	a0 91 58 08 	lds	r26, 0x0858	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    572e:	b0 e0       	ldi	r27, 0x00	; 0
    5730:	a7 5a       	subi	r26, 0xA7	; 167
    5732:	b7 4f       	sbci	r27, 0xF7	; 247
    5734:	2c 93       	st	X, r18
    5736:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    573a:	03 c0       	rjmp	.+6      	; 0x5742 <__vector_3+0xbe>
    573c:	86 8d       	ldd	r24, Z+30	; 0x1e
    573e:	81 60       	ori	r24, 0x01	; 1
    5740:	86 8f       	std	Z+30, r24	; 0x1e
    5742:	82 8d       	ldd	r24, Z+26	; 0x1a
    5744:	93 8d       	ldd	r25, Z+27	; 0x1b
    5746:	01 97       	sbiw	r24, 0x01	; 1
    5748:	f1 f7       	brne	.-4      	; 0x5746 <__vector_3+0xc2>
    574a:	a3 89       	ldd	r26, Z+19	; 0x13
    574c:	b4 89       	ldd	r27, Z+20	; 0x14
    574e:	9c 91       	ld	r25, X
    5750:	85 89       	ldd	r24, Z+21	; 0x15
    5752:	89 2b       	or	r24, r25
    5754:	8c 93       	st	X, r24
    5756:	ff 91       	pop	r31
    5758:	ef 91       	pop	r30
    575a:	bf 91       	pop	r27
    575c:	af 91       	pop	r26
    575e:	9f 91       	pop	r25
    5760:	8f 91       	pop	r24
    5762:	7f 91       	pop	r23
    5764:	6f 91       	pop	r22
    5766:	5f 91       	pop	r21
    5768:	4f 91       	pop	r20
    576a:	3f 91       	pop	r19
    576c:	2f 91       	pop	r18
    576e:	0f 90       	pop	r0
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	0f 90       	pop	r0
    5774:	1f 90       	pop	r1
    5776:	18 95       	reti

00005778 <_ZN14SoftwareSerial5setTXEh>:
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	ec 01       	movw	r28, r24
    5780:	16 2f       	mov	r17, r22
    5782:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5784:	66 95       	lsr	r22
    5786:	61 70       	andi	r22, 0x01	; 1
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	68 27       	eor	r22, r24
    578c:	81 2f       	mov	r24, r17
    578e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
    5792:	61 e0       	ldi	r22, 0x01	; 1
    5794:	81 2f       	mov	r24, r17
    5796:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <pinMode>
    579a:	81 2f       	mov	r24, r17
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	fc 01       	movw	r30, r24
    57a0:	ea 54       	subi	r30, 0x4A	; 74
    57a2:	fc 4f       	sbci	r31, 0xFC	; 252
    57a4:	e4 91       	lpm	r30, Z
    57a6:	e8 8b       	std	Y+16, r30	; 0x10
    57a8:	fc 01       	movw	r30, r24
    57aa:	e6 53       	subi	r30, 0x36	; 54
    57ac:	fc 4f       	sbci	r31, 0xFC	; 252
    57ae:	e4 91       	lpm	r30, Z
    57b0:	f0 e0       	ldi	r31, 0x00	; 0
    57b2:	ee 0f       	add	r30, r30
    57b4:	ff 1f       	adc	r31, r31
    57b6:	e8 51       	subi	r30, 0x18	; 24
    57b8:	fc 4f       	sbci	r31, 0xFC	; 252
    57ba:	85 91       	lpm	r24, Z+
    57bc:	94 91       	lpm	r25, Z
    57be:	9a 8b       	std	Y+18, r25	; 0x12
    57c0:	89 8b       	std	Y+17, r24	; 0x11
    57c2:	df 91       	pop	r29
    57c4:	cf 91       	pop	r28
    57c6:	1f 91       	pop	r17
    57c8:	08 95       	ret

000057ca <_ZN14SoftwareSerial5setRXEh>:
    57ca:	1f 93       	push	r17
    57cc:	cf 93       	push	r28
    57ce:	df 93       	push	r29
    57d0:	ec 01       	movw	r28, r24
    57d2:	16 2f       	mov	r17, r22
    57d4:	60 e0       	ldi	r22, 0x00	; 0
    57d6:	81 2f       	mov	r24, r17
    57d8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <pinMode>
    57dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    57de:	81 fd       	sbrc	r24, 1
    57e0:	04 c0       	rjmp	.+8      	; 0x57ea <_ZN14SoftwareSerial5setRXEh+0x20>
    57e2:	61 e0       	ldi	r22, 0x01	; 1
    57e4:	81 2f       	mov	r24, r17
    57e6:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <digitalWrite>
    57ea:	1c 87       	std	Y+12, r17	; 0x0c
    57ec:	81 2f       	mov	r24, r17
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	fc 01       	movw	r30, r24
    57f2:	ea 54       	subi	r30, 0x4A	; 74
    57f4:	fc 4f       	sbci	r31, 0xFC	; 252
    57f6:	e4 91       	lpm	r30, Z
    57f8:	ed 87       	std	Y+13, r30	; 0x0d
    57fa:	fc 01       	movw	r30, r24
    57fc:	e6 53       	subi	r30, 0x36	; 54
    57fe:	fc 4f       	sbci	r31, 0xFC	; 252
    5800:	e4 91       	lpm	r30, Z
    5802:	f0 e0       	ldi	r31, 0x00	; 0
    5804:	ee 0f       	add	r30, r30
    5806:	ff 1f       	adc	r31, r31
    5808:	e2 52       	subi	r30, 0x22	; 34
    580a:	fc 4f       	sbci	r31, 0xFC	; 252
    580c:	85 91       	lpm	r24, Z+
    580e:	94 91       	lpm	r25, Z
    5810:	9f 87       	std	Y+15, r25	; 0x0f
    5812:	8e 87       	std	Y+14, r24	; 0x0e
    5814:	df 91       	pop	r29
    5816:	cf 91       	pop	r28
    5818:	1f 91       	pop	r17
    581a:	08 95       	ret

0000581c <_ZN14SoftwareSerialC1Ehhb>:
    581c:	1f 93       	push	r17
    581e:	cf 93       	push	r28
    5820:	df 93       	push	r29
    5822:	ec 01       	movw	r28, r24
    5824:	16 2f       	mov	r17, r22
    5826:	1b 82       	std	Y+3, r1	; 0x03
    5828:	1a 82       	std	Y+2, r1	; 0x02
    582a:	88 ee       	ldi	r24, 0xE8	; 232
    582c:	93 e0       	ldi	r25, 0x03	; 3
    582e:	a0 e0       	ldi	r26, 0x00	; 0
    5830:	b0 e0       	ldi	r27, 0x00	; 0
    5832:	8c 83       	std	Y+4, r24	; 0x04
    5834:	9d 83       	std	Y+5, r25	; 0x05
    5836:	ae 83       	std	Y+6, r26	; 0x06
    5838:	bf 83       	std	Y+7, r27	; 0x07
    583a:	8d e7       	ldi	r24, 0x7D	; 125
    583c:	93 e0       	ldi	r25, 0x03	; 3
    583e:	99 83       	std	Y+1, r25	; 0x01
    5840:	88 83       	st	Y, r24
    5842:	1f 8a       	std	Y+23, r1	; 0x17
    5844:	1e 8a       	std	Y+22, r1	; 0x16
    5846:	19 8e       	std	Y+25, r1	; 0x19
    5848:	18 8e       	std	Y+24, r1	; 0x18
    584a:	1b 8e       	std	Y+27, r1	; 0x1b
    584c:	1a 8e       	std	Y+26, r1	; 0x1a
    584e:	1d 8e       	std	Y+29, r1	; 0x1d
    5850:	1c 8e       	std	Y+28, r1	; 0x1c
    5852:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5854:	8e 7f       	andi	r24, 0xFE	; 254
    5856:	20 fb       	bst	r18, 0
    5858:	81 f9       	bld	r24, 1
    585a:	8e 8f       	std	Y+30, r24	; 0x1e
    585c:	64 2f       	mov	r22, r20
    585e:	ce 01       	movw	r24, r28
    5860:	0e 94 bc 2b 	call	0x5778	; 0x5778 <_ZN14SoftwareSerial5setTXEh>
    5864:	61 2f       	mov	r22, r17
    5866:	ce 01       	movw	r24, r28
    5868:	df 91       	pop	r29
    586a:	cf 91       	pop	r28
    586c:	1f 91       	pop	r17
    586e:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <_ZN14SoftwareSerial5setRXEh>

00005872 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	ec 01       	movw	r28, r24
    5878:	9a 01       	movw	r18, r20
    587a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    587c:	1b 8e       	std	Y+27, r1	; 0x1b
    587e:	1a 8e       	std	Y+26, r1	; 0x1a
    5880:	19 8e       	std	Y+25, r1	; 0x19
    5882:	18 8e       	std	Y+24, r1	; 0x18
    5884:	1f 8a       	std	Y+23, r1	; 0x17
    5886:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    5888:	60 e0       	ldi	r22, 0x00	; 0
    588a:	79 e0       	ldi	r23, 0x09	; 9
    588c:	8d e3       	ldi	r24, 0x3D	; 61
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <__divmodsi4>
    5894:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5896:	24 30       	cpi	r18, 0x04	; 4
    5898:	31 05       	cpc	r19, r1
    589a:	18 f0       	brcs	.+6      	; 0x58a2 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    589c:	c9 01       	movw	r24, r18
    589e:	03 97       	sbiw	r24, 0x03	; 3
    58a0:	02 c0       	rjmp	.+4      	; 0x58a6 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    58a2:	81 e0       	ldi	r24, 0x01	; 1
    58a4:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    58a6:	9d 8f       	std	Y+29, r25	; 0x1d
    58a8:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    58aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    58ac:	66 31       	cpi	r22, 0x16	; 22
    58ae:	08 f0       	brcs	.+2      	; 0x58b2 <_ZN14SoftwareSerial5beginEl+0x40>
    58b0:	69 c0       	rjmp	.+210    	; 0x5984 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    58b2:	c9 01       	movw	r24, r18
    58b4:	96 95       	lsr	r25
    58b6:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    58b8:	84 31       	cpi	r24, 0x14	; 20
    58ba:	91 05       	cpc	r25, r1
    58bc:	10 f0       	brcs	.+4      	; 0x58c2 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    58be:	43 97       	sbiw	r24, 0x13	; 19
    58c0:	02 c0       	rjmp	.+4      	; 0x58c6 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    58c6:	9f 8b       	std	Y+23, r25	; 0x17
    58c8:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    58ca:	36 97       	sbiw	r30, 0x06	; 6
    58cc:	18 f0       	brcs	.+6      	; 0x58d4 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    58ce:	c9 01       	movw	r24, r18
    58d0:	05 97       	sbiw	r24, 0x05	; 5
    58d2:	02 c0       	rjmp	.+4      	; 0x58d8 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    58d8:	99 8f       	std	Y+25, r25	; 0x19
    58da:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    58dc:	c9 01       	movw	r24, r18
    58de:	88 0f       	add	r24, r24
    58e0:	99 1f       	adc	r25, r25
    58e2:	28 0f       	add	r18, r24
    58e4:	39 1f       	adc	r19, r25
    58e6:	36 95       	lsr	r19
    58e8:	27 95       	ror	r18
    58ea:	36 95       	lsr	r19
    58ec:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    58ee:	2d 30       	cpi	r18, 0x0D	; 13
    58f0:	31 05       	cpc	r19, r1
    58f2:	18 f0       	brcs	.+6      	; 0x58fa <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    58f4:	2c 50       	subi	r18, 0x0C	; 12
    58f6:	31 09       	sbc	r19, r1
    58f8:	02 c0       	rjmp	.+4      	; 0x58fe <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    58fa:	21 e0       	ldi	r18, 0x01	; 1
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    58fe:	3b 8f       	std	Y+27, r19	; 0x1b
    5900:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    5902:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    5906:	68 30       	cpi	r22, 0x08	; 8
    5908:	50 f0       	brcs	.+20     	; 0x591e <_ZN14SoftwareSerial5beginEl+0xac>
    590a:	21 e0       	ldi	r18, 0x01	; 1
    590c:	6e 30       	cpi	r22, 0x0E	; 14
    590e:	08 f4       	brcc	.+2      	; 0x5912 <_ZN14SoftwareSerial5beginEl+0xa0>
    5910:	20 e0       	ldi	r18, 0x00	; 0
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	01 c0       	rjmp	.+2      	; 0x5918 <_ZN14SoftwareSerial5beginEl+0xa6>
    5916:	88 0f       	add	r24, r24
    5918:	2a 95       	dec	r18
    591a:	ea f7       	brpl	.-6      	; 0x5916 <_ZN14SoftwareSerial5beginEl+0xa4>
    591c:	01 c0       	rjmp	.+2      	; 0x5920 <_ZN14SoftwareSerial5beginEl+0xae>
    591e:	84 e0       	ldi	r24, 0x04	; 4
    5920:	89 2b       	or	r24, r25
    5922:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    5926:	9c 85       	ldd	r25, Y+12	; 0x0c
    5928:	98 30       	cpi	r25, 0x08	; 8
    592a:	38 f0       	brcs	.+14     	; 0x593a <_ZN14SoftwareSerial5beginEl+0xc8>
    592c:	9e 30       	cpi	r25, 0x0E	; 14
    592e:	40 f0       	brcs	.+16     	; 0x5940 <_ZN14SoftwareSerial5beginEl+0xce>
    5930:	96 31       	cpi	r25, 0x16	; 22
    5932:	48 f0       	brcs	.+18     	; 0x5946 <_ZN14SoftwareSerial5beginEl+0xd4>
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	08 c0       	rjmp	.+16     	; 0x594a <_ZN14SoftwareSerial5beginEl+0xd8>
    593a:	2d e6       	ldi	r18, 0x6D	; 109
    593c:	30 e0       	ldi	r19, 0x00	; 0
    593e:	05 c0       	rjmp	.+10     	; 0x594a <_ZN14SoftwareSerial5beginEl+0xd8>
    5940:	2b e6       	ldi	r18, 0x6B	; 107
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	02 c0       	rjmp	.+4      	; 0x594a <_ZN14SoftwareSerial5beginEl+0xd8>
    5946:	2c e6       	ldi	r18, 0x6C	; 108
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	3c 8b       	std	Y+20, r19	; 0x14
    594c:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    594e:	98 30       	cpi	r25, 0x08	; 8
    5950:	30 f4       	brcc	.+12     	; 0x595e <_ZN14SoftwareSerial5beginEl+0xec>
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	01 c0       	rjmp	.+2      	; 0x5958 <_ZN14SoftwareSerial5beginEl+0xe6>
    5956:	88 0f       	add	r24, r24
    5958:	9a 95       	dec	r25
    595a:	ea f7       	brpl	.-6      	; 0x5956 <_ZN14SoftwareSerial5beginEl+0xe4>
    595c:	0e c0       	rjmp	.+28     	; 0x597a <_ZN14SoftwareSerial5beginEl+0x108>
    595e:	29 2f       	mov	r18, r25
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	9e 30       	cpi	r25, 0x0E	; 14
    5964:	18 f4       	brcc	.+6      	; 0x596c <_ZN14SoftwareSerial5beginEl+0xfa>
    5966:	28 50       	subi	r18, 0x08	; 8
    5968:	31 09       	sbc	r19, r1
    596a:	02 c0       	rjmp	.+4      	; 0x5970 <_ZN14SoftwareSerial5beginEl+0xfe>
    596c:	2e 50       	subi	r18, 0x0E	; 14
    596e:	31 09       	sbc	r19, r1
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	01 c0       	rjmp	.+2      	; 0x5976 <_ZN14SoftwareSerial5beginEl+0x104>
    5974:	88 0f       	add	r24, r24
    5976:	2a 95       	dec	r18
    5978:	ea f7       	brpl	.-6      	; 0x5974 <_ZN14SoftwareSerial5beginEl+0x102>
    597a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    597c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    597e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	f1 f7       	brne	.-4      	; 0x5980 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    5984:	ce 01       	movw	r24, r28
}
    5986:	df 91       	pop	r29
    5988:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    598a:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <_ZN14SoftwareSerial6listenEv>

0000598e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    598e:	08 95       	ret

00005990 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    5990:	08 95       	ret

00005992 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    5992:	1f 92       	push	r1
    5994:	0f 92       	push	r0
    5996:	0f b6       	in	r0, 0x3f	; 63
    5998:	0f 92       	push	r0
    599a:	11 24       	eor	r1, r1
    599c:	2f 93       	push	r18
    599e:	3f 93       	push	r19
    59a0:	4f 93       	push	r20
    59a2:	5f 93       	push	r21
    59a4:	6f 93       	push	r22
    59a6:	7f 93       	push	r23
    59a8:	8f 93       	push	r24
    59aa:	9f 93       	push	r25
    59ac:	af 93       	push	r26
    59ae:	bf 93       	push	r27
    59b0:	ef 93       	push	r30
    59b2:	ff 93       	push	r31
    59b4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc>
    59b8:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x1>
    59bc:	09 95       	icall
    59be:	ff 91       	pop	r31
    59c0:	ef 91       	pop	r30
    59c2:	bf 91       	pop	r27
    59c4:	af 91       	pop	r26
    59c6:	9f 91       	pop	r25
    59c8:	8f 91       	pop	r24
    59ca:	7f 91       	pop	r23
    59cc:	6f 91       	pop	r22
    59ce:	5f 91       	pop	r21
    59d0:	4f 91       	pop	r20
    59d2:	3f 91       	pop	r19
    59d4:	2f 91       	pop	r18
    59d6:	0f 90       	pop	r0
    59d8:	0f be       	out	0x3f, r0	; 63
    59da:	0f 90       	pop	r0
    59dc:	1f 90       	pop	r1
    59de:	18 95       	reti

000059e0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    59e0:	1f 92       	push	r1
    59e2:	0f 92       	push	r0
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	0f 92       	push	r0
    59e8:	11 24       	eor	r1, r1
    59ea:	2f 93       	push	r18
    59ec:	3f 93       	push	r19
    59ee:	4f 93       	push	r20
    59f0:	5f 93       	push	r21
    59f2:	6f 93       	push	r22
    59f4:	7f 93       	push	r23
    59f6:	8f 93       	push	r24
    59f8:	9f 93       	push	r25
    59fa:	af 93       	push	r26
    59fc:	bf 93       	push	r27
    59fe:	ef 93       	push	r30
    5a00:	ff 93       	push	r31
    5a02:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <intFunc+0x2>
    5a06:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <intFunc+0x3>
    5a0a:	09 95       	icall
    5a0c:	ff 91       	pop	r31
    5a0e:	ef 91       	pop	r30
    5a10:	bf 91       	pop	r27
    5a12:	af 91       	pop	r26
    5a14:	9f 91       	pop	r25
    5a16:	8f 91       	pop	r24
    5a18:	7f 91       	pop	r23
    5a1a:	6f 91       	pop	r22
    5a1c:	5f 91       	pop	r21
    5a1e:	4f 91       	pop	r20
    5a20:	3f 91       	pop	r19
    5a22:	2f 91       	pop	r18
    5a24:	0f 90       	pop	r0
    5a26:	0f be       	out	0x3f, r0	; 63
    5a28:	0f 90       	pop	r0
    5a2a:	1f 90       	pop	r1
    5a2c:	18 95       	reti

00005a2e <__cmpsf2>:
    5a2e:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <__fp_cmp>
    5a32:	08 f4       	brcc	.+2      	; 0x5a36 <__cmpsf2+0x8>
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	08 95       	ret

00005a38 <__fp_cmp>:
    5a38:	99 0f       	add	r25, r25
    5a3a:	00 08       	sbc	r0, r0
    5a3c:	55 0f       	add	r21, r21
    5a3e:	aa 0b       	sbc	r26, r26
    5a40:	e0 e8       	ldi	r30, 0x80	; 128
    5a42:	fe ef       	ldi	r31, 0xFE	; 254
    5a44:	16 16       	cp	r1, r22
    5a46:	17 06       	cpc	r1, r23
    5a48:	e8 07       	cpc	r30, r24
    5a4a:	f9 07       	cpc	r31, r25
    5a4c:	c0 f0       	brcs	.+48     	; 0x5a7e <__fp_cmp+0x46>
    5a4e:	12 16       	cp	r1, r18
    5a50:	13 06       	cpc	r1, r19
    5a52:	e4 07       	cpc	r30, r20
    5a54:	f5 07       	cpc	r31, r21
    5a56:	98 f0       	brcs	.+38     	; 0x5a7e <__fp_cmp+0x46>
    5a58:	62 1b       	sub	r22, r18
    5a5a:	73 0b       	sbc	r23, r19
    5a5c:	84 0b       	sbc	r24, r20
    5a5e:	95 0b       	sbc	r25, r21
    5a60:	39 f4       	brne	.+14     	; 0x5a70 <__fp_cmp+0x38>
    5a62:	0a 26       	eor	r0, r26
    5a64:	61 f0       	breq	.+24     	; 0x5a7e <__fp_cmp+0x46>
    5a66:	23 2b       	or	r18, r19
    5a68:	24 2b       	or	r18, r20
    5a6a:	25 2b       	or	r18, r21
    5a6c:	21 f4       	brne	.+8      	; 0x5a76 <__fp_cmp+0x3e>
    5a6e:	08 95       	ret
    5a70:	0a 26       	eor	r0, r26
    5a72:	09 f4       	brne	.+2      	; 0x5a76 <__fp_cmp+0x3e>
    5a74:	a1 40       	sbci	r26, 0x01	; 1
    5a76:	a6 95       	lsr	r26
    5a78:	8f ef       	ldi	r24, 0xFF	; 255
    5a7a:	81 1d       	adc	r24, r1
    5a7c:	81 1d       	adc	r24, r1
    5a7e:	08 95       	ret

00005a80 <__fp_inf>:
    5a80:	97 f9       	bld	r25, 7
    5a82:	9f 67       	ori	r25, 0x7F	; 127
    5a84:	80 e8       	ldi	r24, 0x80	; 128
    5a86:	70 e0       	ldi	r23, 0x00	; 0
    5a88:	60 e0       	ldi	r22, 0x00	; 0
    5a8a:	08 95       	ret

00005a8c <__fp_nan>:
    5a8c:	9f ef       	ldi	r25, 0xFF	; 255
    5a8e:	80 ec       	ldi	r24, 0xC0	; 192
    5a90:	08 95       	ret

00005a92 <__fp_pscA>:
    5a92:	00 24       	eor	r0, r0
    5a94:	0a 94       	dec	r0
    5a96:	16 16       	cp	r1, r22
    5a98:	17 06       	cpc	r1, r23
    5a9a:	18 06       	cpc	r1, r24
    5a9c:	09 06       	cpc	r0, r25
    5a9e:	08 95       	ret

00005aa0 <__fp_pscB>:
    5aa0:	00 24       	eor	r0, r0
    5aa2:	0a 94       	dec	r0
    5aa4:	12 16       	cp	r1, r18
    5aa6:	13 06       	cpc	r1, r19
    5aa8:	14 06       	cpc	r1, r20
    5aaa:	05 06       	cpc	r0, r21
    5aac:	08 95       	ret

00005aae <__fp_round>:
    5aae:	09 2e       	mov	r0, r25
    5ab0:	03 94       	inc	r0
    5ab2:	00 0c       	add	r0, r0
    5ab4:	11 f4       	brne	.+4      	; 0x5aba <__fp_round+0xc>
    5ab6:	88 23       	and	r24, r24
    5ab8:	52 f0       	brmi	.+20     	; 0x5ace <__fp_round+0x20>
    5aba:	bb 0f       	add	r27, r27
    5abc:	40 f4       	brcc	.+16     	; 0x5ace <__fp_round+0x20>
    5abe:	bf 2b       	or	r27, r31
    5ac0:	11 f4       	brne	.+4      	; 0x5ac6 <__fp_round+0x18>
    5ac2:	60 ff       	sbrs	r22, 0
    5ac4:	04 c0       	rjmp	.+8      	; 0x5ace <__fp_round+0x20>
    5ac6:	6f 5f       	subi	r22, 0xFF	; 255
    5ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aca:	8f 4f       	sbci	r24, 0xFF	; 255
    5acc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ace:	08 95       	ret

00005ad0 <__fp_split3>:
    5ad0:	57 fd       	sbrc	r21, 7
    5ad2:	90 58       	subi	r25, 0x80	; 128
    5ad4:	44 0f       	add	r20, r20
    5ad6:	55 1f       	adc	r21, r21
    5ad8:	59 f0       	breq	.+22     	; 0x5af0 <__fp_splitA+0x10>
    5ada:	5f 3f       	cpi	r21, 0xFF	; 255
    5adc:	71 f0       	breq	.+28     	; 0x5afa <__fp_splitA+0x1a>
    5ade:	47 95       	ror	r20

00005ae0 <__fp_splitA>:
    5ae0:	88 0f       	add	r24, r24
    5ae2:	97 fb       	bst	r25, 7
    5ae4:	99 1f       	adc	r25, r25
    5ae6:	61 f0       	breq	.+24     	; 0x5b00 <__fp_splitA+0x20>
    5ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    5aea:	79 f0       	breq	.+30     	; 0x5b0a <__fp_splitA+0x2a>
    5aec:	87 95       	ror	r24
    5aee:	08 95       	ret
    5af0:	12 16       	cp	r1, r18
    5af2:	13 06       	cpc	r1, r19
    5af4:	14 06       	cpc	r1, r20
    5af6:	55 1f       	adc	r21, r21
    5af8:	f2 cf       	rjmp	.-28     	; 0x5ade <__fp_split3+0xe>
    5afa:	46 95       	lsr	r20
    5afc:	f1 df       	rcall	.-30     	; 0x5ae0 <__fp_splitA>
    5afe:	08 c0       	rjmp	.+16     	; 0x5b10 <__fp_splitA+0x30>
    5b00:	16 16       	cp	r1, r22
    5b02:	17 06       	cpc	r1, r23
    5b04:	18 06       	cpc	r1, r24
    5b06:	99 1f       	adc	r25, r25
    5b08:	f1 cf       	rjmp	.-30     	; 0x5aec <__fp_splitA+0xc>
    5b0a:	86 95       	lsr	r24
    5b0c:	71 05       	cpc	r23, r1
    5b0e:	61 05       	cpc	r22, r1
    5b10:	08 94       	sec
    5b12:	08 95       	ret

00005b14 <__fp_zero>:
    5b14:	e8 94       	clt

00005b16 <__fp_szero>:
    5b16:	bb 27       	eor	r27, r27
    5b18:	66 27       	eor	r22, r22
    5b1a:	77 27       	eor	r23, r23
    5b1c:	cb 01       	movw	r24, r22
    5b1e:	97 f9       	bld	r25, 7
    5b20:	08 95       	ret

00005b22 <__mulsf3>:
    5b22:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <__mulsf3x>
    5b26:	0c 94 57 2d 	jmp	0x5aae	; 0x5aae <__fp_round>
    5b2a:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__fp_pscA>
    5b2e:	38 f0       	brcs	.+14     	; 0x5b3e <__mulsf3+0x1c>
    5b30:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <__fp_pscB>
    5b34:	20 f0       	brcs	.+8      	; 0x5b3e <__mulsf3+0x1c>
    5b36:	95 23       	and	r25, r21
    5b38:	11 f0       	breq	.+4      	; 0x5b3e <__mulsf3+0x1c>
    5b3a:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__fp_inf>
    5b3e:	0c 94 46 2d 	jmp	0x5a8c	; 0x5a8c <__fp_nan>
    5b42:	11 24       	eor	r1, r1
    5b44:	0c 94 8b 2d 	jmp	0x5b16	; 0x5b16 <__fp_szero>

00005b48 <__mulsf3x>:
    5b48:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__fp_split3>
    5b4c:	70 f3       	brcs	.-36     	; 0x5b2a <__mulsf3+0x8>

00005b4e <__mulsf3_pse>:
    5b4e:	95 9f       	mul	r25, r21
    5b50:	c1 f3       	breq	.-16     	; 0x5b42 <__mulsf3+0x20>
    5b52:	95 0f       	add	r25, r21
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	55 1f       	adc	r21, r21
    5b58:	62 9f       	mul	r22, r18
    5b5a:	f0 01       	movw	r30, r0
    5b5c:	72 9f       	mul	r23, r18
    5b5e:	bb 27       	eor	r27, r27
    5b60:	f0 0d       	add	r31, r0
    5b62:	b1 1d       	adc	r27, r1
    5b64:	63 9f       	mul	r22, r19
    5b66:	aa 27       	eor	r26, r26
    5b68:	f0 0d       	add	r31, r0
    5b6a:	b1 1d       	adc	r27, r1
    5b6c:	aa 1f       	adc	r26, r26
    5b6e:	64 9f       	mul	r22, r20
    5b70:	66 27       	eor	r22, r22
    5b72:	b0 0d       	add	r27, r0
    5b74:	a1 1d       	adc	r26, r1
    5b76:	66 1f       	adc	r22, r22
    5b78:	82 9f       	mul	r24, r18
    5b7a:	22 27       	eor	r18, r18
    5b7c:	b0 0d       	add	r27, r0
    5b7e:	a1 1d       	adc	r26, r1
    5b80:	62 1f       	adc	r22, r18
    5b82:	73 9f       	mul	r23, r19
    5b84:	b0 0d       	add	r27, r0
    5b86:	a1 1d       	adc	r26, r1
    5b88:	62 1f       	adc	r22, r18
    5b8a:	83 9f       	mul	r24, r19
    5b8c:	a0 0d       	add	r26, r0
    5b8e:	61 1d       	adc	r22, r1
    5b90:	22 1f       	adc	r18, r18
    5b92:	74 9f       	mul	r23, r20
    5b94:	33 27       	eor	r19, r19
    5b96:	a0 0d       	add	r26, r0
    5b98:	61 1d       	adc	r22, r1
    5b9a:	23 1f       	adc	r18, r19
    5b9c:	84 9f       	mul	r24, r20
    5b9e:	60 0d       	add	r22, r0
    5ba0:	21 1d       	adc	r18, r1
    5ba2:	82 2f       	mov	r24, r18
    5ba4:	76 2f       	mov	r23, r22
    5ba6:	6a 2f       	mov	r22, r26
    5ba8:	11 24       	eor	r1, r1
    5baa:	9f 57       	subi	r25, 0x7F	; 127
    5bac:	50 40       	sbci	r21, 0x00	; 0
    5bae:	9a f0       	brmi	.+38     	; 0x5bd6 <__mulsf3_pse+0x88>
    5bb0:	f1 f0       	breq	.+60     	; 0x5bee <__mulsf3_pse+0xa0>
    5bb2:	88 23       	and	r24, r24
    5bb4:	4a f0       	brmi	.+18     	; 0x5bc8 <__mulsf3_pse+0x7a>
    5bb6:	ee 0f       	add	r30, r30
    5bb8:	ff 1f       	adc	r31, r31
    5bba:	bb 1f       	adc	r27, r27
    5bbc:	66 1f       	adc	r22, r22
    5bbe:	77 1f       	adc	r23, r23
    5bc0:	88 1f       	adc	r24, r24
    5bc2:	91 50       	subi	r25, 0x01	; 1
    5bc4:	50 40       	sbci	r21, 0x00	; 0
    5bc6:	a9 f7       	brne	.-22     	; 0x5bb2 <__mulsf3_pse+0x64>
    5bc8:	9e 3f       	cpi	r25, 0xFE	; 254
    5bca:	51 05       	cpc	r21, r1
    5bcc:	80 f0       	brcs	.+32     	; 0x5bee <__mulsf3_pse+0xa0>
    5bce:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__fp_inf>
    5bd2:	0c 94 8b 2d 	jmp	0x5b16	; 0x5b16 <__fp_szero>
    5bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    5bd8:	e4 f3       	brlt	.-8      	; 0x5bd2 <__mulsf3_pse+0x84>
    5bda:	98 3e       	cpi	r25, 0xE8	; 232
    5bdc:	d4 f3       	brlt	.-12     	; 0x5bd2 <__mulsf3_pse+0x84>
    5bde:	86 95       	lsr	r24
    5be0:	77 95       	ror	r23
    5be2:	67 95       	ror	r22
    5be4:	b7 95       	ror	r27
    5be6:	f7 95       	ror	r31
    5be8:	e7 95       	ror	r30
    5bea:	9f 5f       	subi	r25, 0xFF	; 255
    5bec:	c1 f7       	brne	.-16     	; 0x5bde <__mulsf3_pse+0x90>
    5bee:	fe 2b       	or	r31, r30
    5bf0:	88 0f       	add	r24, r24
    5bf2:	91 1d       	adc	r25, r1
    5bf4:	96 95       	lsr	r25
    5bf6:	87 95       	ror	r24
    5bf8:	97 f9       	bld	r25, 7
    5bfa:	08 95       	ret

00005bfc <__divmodhi4>:
    5bfc:	97 fb       	bst	r25, 7
    5bfe:	07 2e       	mov	r0, r23
    5c00:	16 f4       	brtc	.+4      	; 0x5c06 <__divmodhi4+0xa>
    5c02:	00 94       	com	r0
    5c04:	07 d0       	rcall	.+14     	; 0x5c14 <__divmodhi4_neg1>
    5c06:	77 fd       	sbrc	r23, 7
    5c08:	09 d0       	rcall	.+18     	; 0x5c1c <__divmodhi4_neg2>
    5c0a:	0e 94 77 2e 	call	0x5cee	; 0x5cee <__udivmodhi4>
    5c0e:	07 fc       	sbrc	r0, 7
    5c10:	05 d0       	rcall	.+10     	; 0x5c1c <__divmodhi4_neg2>
    5c12:	3e f4       	brtc	.+14     	; 0x5c22 <__divmodhi4_exit>

00005c14 <__divmodhi4_neg1>:
    5c14:	90 95       	com	r25
    5c16:	81 95       	neg	r24
    5c18:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1a:	08 95       	ret

00005c1c <__divmodhi4_neg2>:
    5c1c:	70 95       	com	r23
    5c1e:	61 95       	neg	r22
    5c20:	7f 4f       	sbci	r23, 0xFF	; 255

00005c22 <__divmodhi4_exit>:
    5c22:	08 95       	ret

00005c24 <__udivmodsi4>:
    5c24:	a1 e2       	ldi	r26, 0x21	; 33
    5c26:	1a 2e       	mov	r1, r26
    5c28:	aa 1b       	sub	r26, r26
    5c2a:	bb 1b       	sub	r27, r27
    5c2c:	fd 01       	movw	r30, r26
    5c2e:	0d c0       	rjmp	.+26     	; 0x5c4a <__udivmodsi4_ep>

00005c30 <__udivmodsi4_loop>:
    5c30:	aa 1f       	adc	r26, r26
    5c32:	bb 1f       	adc	r27, r27
    5c34:	ee 1f       	adc	r30, r30
    5c36:	ff 1f       	adc	r31, r31
    5c38:	a2 17       	cp	r26, r18
    5c3a:	b3 07       	cpc	r27, r19
    5c3c:	e4 07       	cpc	r30, r20
    5c3e:	f5 07       	cpc	r31, r21
    5c40:	20 f0       	brcs	.+8      	; 0x5c4a <__udivmodsi4_ep>
    5c42:	a2 1b       	sub	r26, r18
    5c44:	b3 0b       	sbc	r27, r19
    5c46:	e4 0b       	sbc	r30, r20
    5c48:	f5 0b       	sbc	r31, r21

00005c4a <__udivmodsi4_ep>:
    5c4a:	66 1f       	adc	r22, r22
    5c4c:	77 1f       	adc	r23, r23
    5c4e:	88 1f       	adc	r24, r24
    5c50:	99 1f       	adc	r25, r25
    5c52:	1a 94       	dec	r1
    5c54:	69 f7       	brne	.-38     	; 0x5c30 <__udivmodsi4_loop>
    5c56:	60 95       	com	r22
    5c58:	70 95       	com	r23
    5c5a:	80 95       	com	r24
    5c5c:	90 95       	com	r25
    5c5e:	9b 01       	movw	r18, r22
    5c60:	ac 01       	movw	r20, r24
    5c62:	bd 01       	movw	r22, r26
    5c64:	cf 01       	movw	r24, r30
    5c66:	08 95       	ret

00005c68 <__divmodsi4>:
    5c68:	05 2e       	mov	r0, r21
    5c6a:	97 fb       	bst	r25, 7
    5c6c:	1e f4       	brtc	.+6      	; 0x5c74 <__divmodsi4+0xc>
    5c6e:	00 94       	com	r0
    5c70:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <__negsi2>
    5c74:	57 fd       	sbrc	r21, 7
    5c76:	07 d0       	rcall	.+14     	; 0x5c86 <__divmodsi4_neg2>
    5c78:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <__udivmodsi4>
    5c7c:	07 fc       	sbrc	r0, 7
    5c7e:	03 d0       	rcall	.+6      	; 0x5c86 <__divmodsi4_neg2>
    5c80:	4e f4       	brtc	.+18     	; 0x5c94 <__divmodsi4_exit>
    5c82:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__negsi2>

00005c86 <__divmodsi4_neg2>:
    5c86:	50 95       	com	r21
    5c88:	40 95       	com	r20
    5c8a:	30 95       	com	r19
    5c8c:	21 95       	neg	r18
    5c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c90:	4f 4f       	sbci	r20, 0xFF	; 255
    5c92:	5f 4f       	sbci	r21, 0xFF	; 255

00005c94 <__divmodsi4_exit>:
    5c94:	08 95       	ret

00005c96 <__negsi2>:
    5c96:	90 95       	com	r25
    5c98:	80 95       	com	r24
    5c9a:	70 95       	com	r23
    5c9c:	61 95       	neg	r22
    5c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca4:	08 95       	ret

00005ca6 <__tablejump2__>:
    5ca6:	ee 0f       	add	r30, r30
    5ca8:	ff 1f       	adc	r31, r31
    5caa:	05 90       	lpm	r0, Z+
    5cac:	f4 91       	lpm	r31, Z
    5cae:	e0 2d       	mov	r30, r0
    5cb0:	09 94       	ijmp

00005cb2 <__ashrdi3>:
    5cb2:	97 fb       	bst	r25, 7
    5cb4:	10 f8       	bld	r1, 0

00005cb6 <__lshrdi3>:
    5cb6:	16 94       	lsr	r1
    5cb8:	00 08       	sbc	r0, r0
    5cba:	0f 93       	push	r16
    5cbc:	08 30       	cpi	r16, 0x08	; 8
    5cbe:	98 f0       	brcs	.+38     	; 0x5ce6 <__lshrdi3+0x30>
    5cc0:	08 50       	subi	r16, 0x08	; 8
    5cc2:	23 2f       	mov	r18, r19
    5cc4:	34 2f       	mov	r19, r20
    5cc6:	45 2f       	mov	r20, r21
    5cc8:	56 2f       	mov	r21, r22
    5cca:	67 2f       	mov	r22, r23
    5ccc:	78 2f       	mov	r23, r24
    5cce:	89 2f       	mov	r24, r25
    5cd0:	90 2d       	mov	r25, r0
    5cd2:	f4 cf       	rjmp	.-24     	; 0x5cbc <__lshrdi3+0x6>
    5cd4:	05 94       	asr	r0
    5cd6:	97 95       	ror	r25
    5cd8:	87 95       	ror	r24
    5cda:	77 95       	ror	r23
    5cdc:	67 95       	ror	r22
    5cde:	57 95       	ror	r21
    5ce0:	47 95       	ror	r20
    5ce2:	37 95       	ror	r19
    5ce4:	27 95       	ror	r18
    5ce6:	0a 95       	dec	r16
    5ce8:	aa f7       	brpl	.-22     	; 0x5cd4 <__lshrdi3+0x1e>
    5cea:	0f 91       	pop	r16
    5cec:	08 95       	ret

00005cee <__udivmodhi4>:
    5cee:	aa 1b       	sub	r26, r26
    5cf0:	bb 1b       	sub	r27, r27
    5cf2:	51 e1       	ldi	r21, 0x11	; 17
    5cf4:	07 c0       	rjmp	.+14     	; 0x5d04 <__udivmodhi4_ep>

00005cf6 <__udivmodhi4_loop>:
    5cf6:	aa 1f       	adc	r26, r26
    5cf8:	bb 1f       	adc	r27, r27
    5cfa:	a6 17       	cp	r26, r22
    5cfc:	b7 07       	cpc	r27, r23
    5cfe:	10 f0       	brcs	.+4      	; 0x5d04 <__udivmodhi4_ep>
    5d00:	a6 1b       	sub	r26, r22
    5d02:	b7 0b       	sbc	r27, r23

00005d04 <__udivmodhi4_ep>:
    5d04:	88 1f       	adc	r24, r24
    5d06:	99 1f       	adc	r25, r25
    5d08:	5a 95       	dec	r21
    5d0a:	a9 f7       	brne	.-22     	; 0x5cf6 <__udivmodhi4_loop>
    5d0c:	80 95       	com	r24
    5d0e:	90 95       	com	r25
    5d10:	bc 01       	movw	r22, r24
    5d12:	cd 01       	movw	r24, r26
    5d14:	08 95       	ret

00005d16 <malloc>:
    5d16:	0f 93       	push	r16
    5d18:	1f 93       	push	r17
    5d1a:	cf 93       	push	r28
    5d1c:	df 93       	push	r29
    5d1e:	82 30       	cpi	r24, 0x02	; 2
    5d20:	91 05       	cpc	r25, r1
    5d22:	10 f4       	brcc	.+4      	; 0x5d28 <malloc+0x12>
    5d24:	82 e0       	ldi	r24, 0x02	; 2
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	e0 91 9d 08 	lds	r30, 0x089D	; 0x80089d <__flp>
    5d2c:	f0 91 9e 08 	lds	r31, 0x089E	; 0x80089e <__flp+0x1>
    5d30:	20 e0       	ldi	r18, 0x00	; 0
    5d32:	30 e0       	ldi	r19, 0x00	; 0
    5d34:	a0 e0       	ldi	r26, 0x00	; 0
    5d36:	b0 e0       	ldi	r27, 0x00	; 0
    5d38:	30 97       	sbiw	r30, 0x00	; 0
    5d3a:	19 f1       	breq	.+70     	; 0x5d82 <malloc+0x6c>
    5d3c:	40 81       	ld	r20, Z
    5d3e:	51 81       	ldd	r21, Z+1	; 0x01
    5d40:	02 81       	ldd	r16, Z+2	; 0x02
    5d42:	13 81       	ldd	r17, Z+3	; 0x03
    5d44:	48 17       	cp	r20, r24
    5d46:	59 07       	cpc	r21, r25
    5d48:	c8 f0       	brcs	.+50     	; 0x5d7c <malloc+0x66>
    5d4a:	84 17       	cp	r24, r20
    5d4c:	95 07       	cpc	r25, r21
    5d4e:	69 f4       	brne	.+26     	; 0x5d6a <malloc+0x54>
    5d50:	10 97       	sbiw	r26, 0x00	; 0
    5d52:	31 f0       	breq	.+12     	; 0x5d60 <malloc+0x4a>
    5d54:	12 96       	adiw	r26, 0x02	; 2
    5d56:	0c 93       	st	X, r16
    5d58:	12 97       	sbiw	r26, 0x02	; 2
    5d5a:	13 96       	adiw	r26, 0x03	; 3
    5d5c:	1c 93       	st	X, r17
    5d5e:	27 c0       	rjmp	.+78     	; 0x5dae <malloc+0x98>
    5d60:	00 93 9d 08 	sts	0x089D, r16	; 0x80089d <__flp>
    5d64:	10 93 9e 08 	sts	0x089E, r17	; 0x80089e <__flp+0x1>
    5d68:	22 c0       	rjmp	.+68     	; 0x5dae <malloc+0x98>
    5d6a:	21 15       	cp	r18, r1
    5d6c:	31 05       	cpc	r19, r1
    5d6e:	19 f0       	breq	.+6      	; 0x5d76 <malloc+0x60>
    5d70:	42 17       	cp	r20, r18
    5d72:	53 07       	cpc	r21, r19
    5d74:	18 f4       	brcc	.+6      	; 0x5d7c <malloc+0x66>
    5d76:	9a 01       	movw	r18, r20
    5d78:	bd 01       	movw	r22, r26
    5d7a:	ef 01       	movw	r28, r30
    5d7c:	df 01       	movw	r26, r30
    5d7e:	f8 01       	movw	r30, r16
    5d80:	db cf       	rjmp	.-74     	; 0x5d38 <malloc+0x22>
    5d82:	21 15       	cp	r18, r1
    5d84:	31 05       	cpc	r19, r1
    5d86:	f9 f0       	breq	.+62     	; 0x5dc6 <malloc+0xb0>
    5d88:	28 1b       	sub	r18, r24
    5d8a:	39 0b       	sbc	r19, r25
    5d8c:	24 30       	cpi	r18, 0x04	; 4
    5d8e:	31 05       	cpc	r19, r1
    5d90:	80 f4       	brcc	.+32     	; 0x5db2 <malloc+0x9c>
    5d92:	8a 81       	ldd	r24, Y+2	; 0x02
    5d94:	9b 81       	ldd	r25, Y+3	; 0x03
    5d96:	61 15       	cp	r22, r1
    5d98:	71 05       	cpc	r23, r1
    5d9a:	21 f0       	breq	.+8      	; 0x5da4 <malloc+0x8e>
    5d9c:	fb 01       	movw	r30, r22
    5d9e:	93 83       	std	Z+3, r25	; 0x03
    5da0:	82 83       	std	Z+2, r24	; 0x02
    5da2:	04 c0       	rjmp	.+8      	; 0x5dac <malloc+0x96>
    5da4:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <__flp+0x1>
    5da8:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <__flp>
    5dac:	fe 01       	movw	r30, r28
    5dae:	32 96       	adiw	r30, 0x02	; 2
    5db0:	44 c0       	rjmp	.+136    	; 0x5e3a <malloc+0x124>
    5db2:	fe 01       	movw	r30, r28
    5db4:	e2 0f       	add	r30, r18
    5db6:	f3 1f       	adc	r31, r19
    5db8:	81 93       	st	Z+, r24
    5dba:	91 93       	st	Z+, r25
    5dbc:	22 50       	subi	r18, 0x02	; 2
    5dbe:	31 09       	sbc	r19, r1
    5dc0:	39 83       	std	Y+1, r19	; 0x01
    5dc2:	28 83       	st	Y, r18
    5dc4:	3a c0       	rjmp	.+116    	; 0x5e3a <malloc+0x124>
    5dc6:	20 91 9b 08 	lds	r18, 0x089B	; 0x80089b <__brkval>
    5dca:	30 91 9c 08 	lds	r19, 0x089C	; 0x80089c <__brkval+0x1>
    5dce:	23 2b       	or	r18, r19
    5dd0:	41 f4       	brne	.+16     	; 0x5de2 <malloc+0xcc>
    5dd2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    5dd6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    5dda:	30 93 9c 08 	sts	0x089C, r19	; 0x80089c <__brkval+0x1>
    5dde:	20 93 9b 08 	sts	0x089B, r18	; 0x80089b <__brkval>
    5de2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    5de6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    5dea:	21 15       	cp	r18, r1
    5dec:	31 05       	cpc	r19, r1
    5dee:	41 f4       	brne	.+16     	; 0x5e00 <malloc+0xea>
    5df0:	2d b7       	in	r18, 0x3d	; 61
    5df2:	3e b7       	in	r19, 0x3e	; 62
    5df4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    5df8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    5dfc:	24 1b       	sub	r18, r20
    5dfe:	35 0b       	sbc	r19, r21
    5e00:	e0 91 9b 08 	lds	r30, 0x089B	; 0x80089b <__brkval>
    5e04:	f0 91 9c 08 	lds	r31, 0x089C	; 0x80089c <__brkval+0x1>
    5e08:	e2 17       	cp	r30, r18
    5e0a:	f3 07       	cpc	r31, r19
    5e0c:	a0 f4       	brcc	.+40     	; 0x5e36 <malloc+0x120>
    5e0e:	2e 1b       	sub	r18, r30
    5e10:	3f 0b       	sbc	r19, r31
    5e12:	28 17       	cp	r18, r24
    5e14:	39 07       	cpc	r19, r25
    5e16:	78 f0       	brcs	.+30     	; 0x5e36 <malloc+0x120>
    5e18:	ac 01       	movw	r20, r24
    5e1a:	4e 5f       	subi	r20, 0xFE	; 254
    5e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e1e:	24 17       	cp	r18, r20
    5e20:	35 07       	cpc	r19, r21
    5e22:	48 f0       	brcs	.+18     	; 0x5e36 <malloc+0x120>
    5e24:	4e 0f       	add	r20, r30
    5e26:	5f 1f       	adc	r21, r31
    5e28:	50 93 9c 08 	sts	0x089C, r21	; 0x80089c <__brkval+0x1>
    5e2c:	40 93 9b 08 	sts	0x089B, r20	; 0x80089b <__brkval>
    5e30:	81 93       	st	Z+, r24
    5e32:	91 93       	st	Z+, r25
    5e34:	02 c0       	rjmp	.+4      	; 0x5e3a <malloc+0x124>
    5e36:	e0 e0       	ldi	r30, 0x00	; 0
    5e38:	f0 e0       	ldi	r31, 0x00	; 0
    5e3a:	cf 01       	movw	r24, r30
    5e3c:	df 91       	pop	r29
    5e3e:	cf 91       	pop	r28
    5e40:	1f 91       	pop	r17
    5e42:	0f 91       	pop	r16
    5e44:	08 95       	ret

00005e46 <free>:
    5e46:	cf 93       	push	r28
    5e48:	df 93       	push	r29
    5e4a:	00 97       	sbiw	r24, 0x00	; 0
    5e4c:	09 f4       	brne	.+2      	; 0x5e50 <free+0xa>
    5e4e:	81 c0       	rjmp	.+258    	; 0x5f52 <free+0x10c>
    5e50:	fc 01       	movw	r30, r24
    5e52:	32 97       	sbiw	r30, 0x02	; 2
    5e54:	13 82       	std	Z+3, r1	; 0x03
    5e56:	12 82       	std	Z+2, r1	; 0x02
    5e58:	a0 91 9d 08 	lds	r26, 0x089D	; 0x80089d <__flp>
    5e5c:	b0 91 9e 08 	lds	r27, 0x089E	; 0x80089e <__flp+0x1>
    5e60:	10 97       	sbiw	r26, 0x00	; 0
    5e62:	81 f4       	brne	.+32     	; 0x5e84 <free+0x3e>
    5e64:	20 81       	ld	r18, Z
    5e66:	31 81       	ldd	r19, Z+1	; 0x01
    5e68:	82 0f       	add	r24, r18
    5e6a:	93 1f       	adc	r25, r19
    5e6c:	20 91 9b 08 	lds	r18, 0x089B	; 0x80089b <__brkval>
    5e70:	30 91 9c 08 	lds	r19, 0x089C	; 0x80089c <__brkval+0x1>
    5e74:	28 17       	cp	r18, r24
    5e76:	39 07       	cpc	r19, r25
    5e78:	51 f5       	brne	.+84     	; 0x5ece <free+0x88>
    5e7a:	f0 93 9c 08 	sts	0x089C, r31	; 0x80089c <__brkval+0x1>
    5e7e:	e0 93 9b 08 	sts	0x089B, r30	; 0x80089b <__brkval>
    5e82:	67 c0       	rjmp	.+206    	; 0x5f52 <free+0x10c>
    5e84:	ed 01       	movw	r28, r26
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	ce 17       	cp	r28, r30
    5e8c:	df 07       	cpc	r29, r31
    5e8e:	40 f4       	brcc	.+16     	; 0x5ea0 <free+0x5a>
    5e90:	4a 81       	ldd	r20, Y+2	; 0x02
    5e92:	5b 81       	ldd	r21, Y+3	; 0x03
    5e94:	9e 01       	movw	r18, r28
    5e96:	41 15       	cp	r20, r1
    5e98:	51 05       	cpc	r21, r1
    5e9a:	f1 f0       	breq	.+60     	; 0x5ed8 <free+0x92>
    5e9c:	ea 01       	movw	r28, r20
    5e9e:	f5 cf       	rjmp	.-22     	; 0x5e8a <free+0x44>
    5ea0:	d3 83       	std	Z+3, r29	; 0x03
    5ea2:	c2 83       	std	Z+2, r28	; 0x02
    5ea4:	40 81       	ld	r20, Z
    5ea6:	51 81       	ldd	r21, Z+1	; 0x01
    5ea8:	84 0f       	add	r24, r20
    5eaa:	95 1f       	adc	r25, r21
    5eac:	c8 17       	cp	r28, r24
    5eae:	d9 07       	cpc	r29, r25
    5eb0:	59 f4       	brne	.+22     	; 0x5ec8 <free+0x82>
    5eb2:	88 81       	ld	r24, Y
    5eb4:	99 81       	ldd	r25, Y+1	; 0x01
    5eb6:	84 0f       	add	r24, r20
    5eb8:	95 1f       	adc	r25, r21
    5eba:	02 96       	adiw	r24, 0x02	; 2
    5ebc:	91 83       	std	Z+1, r25	; 0x01
    5ebe:	80 83       	st	Z, r24
    5ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ec4:	93 83       	std	Z+3, r25	; 0x03
    5ec6:	82 83       	std	Z+2, r24	; 0x02
    5ec8:	21 15       	cp	r18, r1
    5eca:	31 05       	cpc	r19, r1
    5ecc:	29 f4       	brne	.+10     	; 0x5ed8 <free+0x92>
    5ece:	f0 93 9e 08 	sts	0x089E, r31	; 0x80089e <__flp+0x1>
    5ed2:	e0 93 9d 08 	sts	0x089D, r30	; 0x80089d <__flp>
    5ed6:	3d c0       	rjmp	.+122    	; 0x5f52 <free+0x10c>
    5ed8:	e9 01       	movw	r28, r18
    5eda:	fb 83       	std	Y+3, r31	; 0x03
    5edc:	ea 83       	std	Y+2, r30	; 0x02
    5ede:	49 91       	ld	r20, Y+
    5ee0:	59 91       	ld	r21, Y+
    5ee2:	c4 0f       	add	r28, r20
    5ee4:	d5 1f       	adc	r29, r21
    5ee6:	ec 17       	cp	r30, r28
    5ee8:	fd 07       	cpc	r31, r29
    5eea:	61 f4       	brne	.+24     	; 0x5f04 <free+0xbe>
    5eec:	80 81       	ld	r24, Z
    5eee:	91 81       	ldd	r25, Z+1	; 0x01
    5ef0:	84 0f       	add	r24, r20
    5ef2:	95 1f       	adc	r25, r21
    5ef4:	02 96       	adiw	r24, 0x02	; 2
    5ef6:	e9 01       	movw	r28, r18
    5ef8:	99 83       	std	Y+1, r25	; 0x01
    5efa:	88 83       	st	Y, r24
    5efc:	82 81       	ldd	r24, Z+2	; 0x02
    5efe:	93 81       	ldd	r25, Z+3	; 0x03
    5f00:	9b 83       	std	Y+3, r25	; 0x03
    5f02:	8a 83       	std	Y+2, r24	; 0x02
    5f04:	e0 e0       	ldi	r30, 0x00	; 0
    5f06:	f0 e0       	ldi	r31, 0x00	; 0
    5f08:	12 96       	adiw	r26, 0x02	; 2
    5f0a:	8d 91       	ld	r24, X+
    5f0c:	9c 91       	ld	r25, X
    5f0e:	13 97       	sbiw	r26, 0x03	; 3
    5f10:	00 97       	sbiw	r24, 0x00	; 0
    5f12:	19 f0       	breq	.+6      	; 0x5f1a <free+0xd4>
    5f14:	fd 01       	movw	r30, r26
    5f16:	dc 01       	movw	r26, r24
    5f18:	f7 cf       	rjmp	.-18     	; 0x5f08 <free+0xc2>
    5f1a:	8d 91       	ld	r24, X+
    5f1c:	9c 91       	ld	r25, X
    5f1e:	11 97       	sbiw	r26, 0x01	; 1
    5f20:	9d 01       	movw	r18, r26
    5f22:	2e 5f       	subi	r18, 0xFE	; 254
    5f24:	3f 4f       	sbci	r19, 0xFF	; 255
    5f26:	82 0f       	add	r24, r18
    5f28:	93 1f       	adc	r25, r19
    5f2a:	20 91 9b 08 	lds	r18, 0x089B	; 0x80089b <__brkval>
    5f2e:	30 91 9c 08 	lds	r19, 0x089C	; 0x80089c <__brkval+0x1>
    5f32:	28 17       	cp	r18, r24
    5f34:	39 07       	cpc	r19, r25
    5f36:	69 f4       	brne	.+26     	; 0x5f52 <free+0x10c>
    5f38:	30 97       	sbiw	r30, 0x00	; 0
    5f3a:	29 f4       	brne	.+10     	; 0x5f46 <free+0x100>
    5f3c:	10 92 9e 08 	sts	0x089E, r1	; 0x80089e <__flp+0x1>
    5f40:	10 92 9d 08 	sts	0x089D, r1	; 0x80089d <__flp>
    5f44:	02 c0       	rjmp	.+4      	; 0x5f4a <free+0x104>
    5f46:	13 82       	std	Z+3, r1	; 0x03
    5f48:	12 82       	std	Z+2, r1	; 0x02
    5f4a:	b0 93 9c 08 	sts	0x089C, r27	; 0x80089c <__brkval+0x1>
    5f4e:	a0 93 9b 08 	sts	0x089B, r26	; 0x80089b <__brkval>
    5f52:	df 91       	pop	r29
    5f54:	cf 91       	pop	r28
    5f56:	08 95       	ret

00005f58 <abort>:
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	f8 94       	cli
    5f5e:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__do_global_dtors>

00005f62 <atof>:
    5f62:	66 27       	eor	r22, r22
    5f64:	77 27       	eor	r23, r23
    5f66:	0c 94 80 30 	jmp	0x6100	; 0x6100 <strtod>

00005f6a <atoi>:
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	88 27       	eor	r24, r24
    5f6e:	99 27       	eor	r25, r25
    5f70:	e8 94       	clt
    5f72:	21 91       	ld	r18, Z+
    5f74:	20 32       	cpi	r18, 0x20	; 32
    5f76:	e9 f3       	breq	.-6      	; 0x5f72 <atoi+0x8>
    5f78:	29 30       	cpi	r18, 0x09	; 9
    5f7a:	10 f0       	brcs	.+4      	; 0x5f80 <atoi+0x16>
    5f7c:	2e 30       	cpi	r18, 0x0E	; 14
    5f7e:	c8 f3       	brcs	.-14     	; 0x5f72 <atoi+0x8>
    5f80:	2b 32       	cpi	r18, 0x2B	; 43
    5f82:	41 f0       	breq	.+16     	; 0x5f94 <atoi+0x2a>
    5f84:	2d 32       	cpi	r18, 0x2D	; 45
    5f86:	39 f4       	brne	.+14     	; 0x5f96 <atoi+0x2c>
    5f88:	68 94       	set
    5f8a:	04 c0       	rjmp	.+8      	; 0x5f94 <atoi+0x2a>
    5f8c:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__mulhi_const_10>
    5f90:	82 0f       	add	r24, r18
    5f92:	91 1d       	adc	r25, r1
    5f94:	21 91       	ld	r18, Z+
    5f96:	20 53       	subi	r18, 0x30	; 48
    5f98:	2a 30       	cpi	r18, 0x0A	; 10
    5f9a:	c0 f3       	brcs	.-16     	; 0x5f8c <atoi+0x22>
    5f9c:	1e f4       	brtc	.+6      	; 0x5fa4 <atoi+0x3a>
    5f9e:	90 95       	com	r25
    5fa0:	81 95       	neg	r24
    5fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fa4:	08 95       	ret

00005fa6 <strcmp_P>:
    5fa6:	fb 01       	movw	r30, r22
    5fa8:	dc 01       	movw	r26, r24
    5faa:	8d 91       	ld	r24, X+
    5fac:	05 90       	lpm	r0, Z+
    5fae:	80 19       	sub	r24, r0
    5fb0:	01 10       	cpse	r0, r1
    5fb2:	d9 f3       	breq	.-10     	; 0x5faa <strcmp_P+0x4>
    5fb4:	99 0b       	sbc	r25, r25
    5fb6:	08 95       	ret

00005fb8 <__strlen_P>:
    5fb8:	fc 01       	movw	r30, r24
    5fba:	05 90       	lpm	r0, Z+
    5fbc:	00 20       	and	r0, r0
    5fbe:	e9 f7       	brne	.-6      	; 0x5fba <__strlen_P+0x2>
    5fc0:	80 95       	com	r24
    5fc2:	90 95       	com	r25
    5fc4:	8e 0f       	add	r24, r30
    5fc6:	9f 1f       	adc	r25, r31
    5fc8:	08 95       	ret

00005fca <strstr_P>:
    5fca:	fb 01       	movw	r30, r22
    5fcc:	55 91       	lpm	r21, Z+
    5fce:	55 23       	and	r21, r21
    5fd0:	a9 f0       	breq	.+42     	; 0x5ffc <strstr_P+0x32>
    5fd2:	bf 01       	movw	r22, r30
    5fd4:	dc 01       	movw	r26, r24
    5fd6:	4d 91       	ld	r20, X+
    5fd8:	45 17       	cp	r20, r21
    5fda:	41 11       	cpse	r20, r1
    5fdc:	e1 f7       	brne	.-8      	; 0x5fd6 <strstr_P+0xc>
    5fde:	59 f4       	brne	.+22     	; 0x5ff6 <strstr_P+0x2c>
    5fe0:	cd 01       	movw	r24, r26
    5fe2:	05 90       	lpm	r0, Z+
    5fe4:	00 20       	and	r0, r0
    5fe6:	49 f0       	breq	.+18     	; 0x5ffa <strstr_P+0x30>
    5fe8:	4d 91       	ld	r20, X+
    5fea:	40 15       	cp	r20, r0
    5fec:	41 11       	cpse	r20, r1
    5fee:	c9 f3       	breq	.-14     	; 0x5fe2 <strstr_P+0x18>
    5ff0:	fb 01       	movw	r30, r22
    5ff2:	41 11       	cpse	r20, r1
    5ff4:	ef cf       	rjmp	.-34     	; 0x5fd4 <strstr_P+0xa>
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	01 97       	sbiw	r24, 0x01	; 1
    5ffc:	08 95       	ret

00005ffe <strtok>:
    5ffe:	4f ea       	ldi	r20, 0xAF	; 175
    6000:	57 e0       	ldi	r21, 0x07	; 7
    6002:	0e 94 51 30 	call	0x60a2	; 0x60a2 <strtok_r>
    6006:	08 95       	ret

00006008 <memset>:
    6008:	dc 01       	movw	r26, r24
    600a:	01 c0       	rjmp	.+2      	; 0x600e <memset+0x6>
    600c:	6d 93       	st	X+, r22
    600e:	41 50       	subi	r20, 0x01	; 1
    6010:	50 40       	sbci	r21, 0x00	; 0
    6012:	e0 f7       	brcc	.-8      	; 0x600c <memset+0x4>
    6014:	08 95       	ret

00006016 <strchr>:
    6016:	fc 01       	movw	r30, r24
    6018:	81 91       	ld	r24, Z+
    601a:	86 17       	cp	r24, r22
    601c:	21 f0       	breq	.+8      	; 0x6026 <strchr+0x10>
    601e:	88 23       	and	r24, r24
    6020:	d9 f7       	brne	.-10     	; 0x6018 <strchr+0x2>
    6022:	99 27       	eor	r25, r25
    6024:	08 95       	ret
    6026:	31 97       	sbiw	r30, 0x01	; 1
    6028:	cf 01       	movw	r24, r30
    602a:	08 95       	ret

0000602c <strcmp>:
    602c:	fb 01       	movw	r30, r22
    602e:	dc 01       	movw	r26, r24
    6030:	8d 91       	ld	r24, X+
    6032:	01 90       	ld	r0, Z+
    6034:	80 19       	sub	r24, r0
    6036:	01 10       	cpse	r0, r1
    6038:	d9 f3       	breq	.-10     	; 0x6030 <strcmp+0x4>
    603a:	99 0b       	sbc	r25, r25
    603c:	08 95       	ret

0000603e <strlen>:
    603e:	fc 01       	movw	r30, r24
    6040:	01 90       	ld	r0, Z+
    6042:	00 20       	and	r0, r0
    6044:	e9 f7       	brne	.-6      	; 0x6040 <strlen+0x2>
    6046:	80 95       	com	r24
    6048:	90 95       	com	r25
    604a:	8e 0f       	add	r24, r30
    604c:	9f 1f       	adc	r25, r31
    604e:	08 95       	ret

00006050 <strncpy>:
    6050:	fb 01       	movw	r30, r22
    6052:	dc 01       	movw	r26, r24
    6054:	41 50       	subi	r20, 0x01	; 1
    6056:	50 40       	sbci	r21, 0x00	; 0
    6058:	48 f0       	brcs	.+18     	; 0x606c <strncpy+0x1c>
    605a:	01 90       	ld	r0, Z+
    605c:	0d 92       	st	X+, r0
    605e:	00 20       	and	r0, r0
    6060:	c9 f7       	brne	.-14     	; 0x6054 <strncpy+0x4>
    6062:	01 c0       	rjmp	.+2      	; 0x6066 <strncpy+0x16>
    6064:	1d 92       	st	X+, r1
    6066:	41 50       	subi	r20, 0x01	; 1
    6068:	50 40       	sbci	r21, 0x00	; 0
    606a:	e0 f7       	brcc	.-8      	; 0x6064 <strncpy+0x14>
    606c:	08 95       	ret

0000606e <strstr>:
    606e:	fb 01       	movw	r30, r22
    6070:	51 91       	ld	r21, Z+
    6072:	55 23       	and	r21, r21
    6074:	a9 f0       	breq	.+42     	; 0x60a0 <strstr+0x32>
    6076:	bf 01       	movw	r22, r30
    6078:	dc 01       	movw	r26, r24
    607a:	4d 91       	ld	r20, X+
    607c:	45 17       	cp	r20, r21
    607e:	41 11       	cpse	r20, r1
    6080:	e1 f7       	brne	.-8      	; 0x607a <strstr+0xc>
    6082:	59 f4       	brne	.+22     	; 0x609a <strstr+0x2c>
    6084:	cd 01       	movw	r24, r26
    6086:	01 90       	ld	r0, Z+
    6088:	00 20       	and	r0, r0
    608a:	49 f0       	breq	.+18     	; 0x609e <strstr+0x30>
    608c:	4d 91       	ld	r20, X+
    608e:	40 15       	cp	r20, r0
    6090:	41 11       	cpse	r20, r1
    6092:	c9 f3       	breq	.-14     	; 0x6086 <strstr+0x18>
    6094:	fb 01       	movw	r30, r22
    6096:	41 11       	cpse	r20, r1
    6098:	ef cf       	rjmp	.-34     	; 0x6078 <strstr+0xa>
    609a:	81 e0       	ldi	r24, 0x01	; 1
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	01 97       	sbiw	r24, 0x01	; 1
    60a0:	08 95       	ret

000060a2 <strtok_r>:
    60a2:	fa 01       	movw	r30, r20
    60a4:	a1 91       	ld	r26, Z+
    60a6:	b0 81       	ld	r27, Z
    60a8:	00 97       	sbiw	r24, 0x00	; 0
    60aa:	19 f4       	brne	.+6      	; 0x60b2 <strtok_r+0x10>
    60ac:	10 97       	sbiw	r26, 0x00	; 0
    60ae:	e1 f0       	breq	.+56     	; 0x60e8 <strtok_r+0x46>
    60b0:	cd 01       	movw	r24, r26
    60b2:	dc 01       	movw	r26, r24
    60b4:	cd 01       	movw	r24, r26
    60b6:	0d 90       	ld	r0, X+
    60b8:	00 20       	and	r0, r0
    60ba:	11 f4       	brne	.+4      	; 0x60c0 <strtok_r+0x1e>
    60bc:	c0 01       	movw	r24, r0
    60be:	13 c0       	rjmp	.+38     	; 0x60e6 <strtok_r+0x44>
    60c0:	fb 01       	movw	r30, r22
    60c2:	21 91       	ld	r18, Z+
    60c4:	22 23       	and	r18, r18
    60c6:	19 f0       	breq	.+6      	; 0x60ce <strtok_r+0x2c>
    60c8:	20 15       	cp	r18, r0
    60ca:	d9 f7       	brne	.-10     	; 0x60c2 <strtok_r+0x20>
    60cc:	f3 cf       	rjmp	.-26     	; 0x60b4 <strtok_r+0x12>
    60ce:	fb 01       	movw	r30, r22
    60d0:	21 91       	ld	r18, Z+
    60d2:	20 15       	cp	r18, r0
    60d4:	19 f4       	brne	.+6      	; 0x60dc <strtok_r+0x3a>
    60d6:	1e 92       	st	-X, r1
    60d8:	11 96       	adiw	r26, 0x01	; 1
    60da:	06 c0       	rjmp	.+12     	; 0x60e8 <strtok_r+0x46>
    60dc:	22 23       	and	r18, r18
    60de:	c1 f7       	brne	.-16     	; 0x60d0 <strtok_r+0x2e>
    60e0:	0d 90       	ld	r0, X+
    60e2:	00 20       	and	r0, r0
    60e4:	a1 f7       	brne	.-24     	; 0x60ce <strtok_r+0x2c>
    60e6:	d0 01       	movw	r26, r0
    60e8:	fa 01       	movw	r30, r20
    60ea:	a1 93       	st	Z+, r26
    60ec:	b0 83       	st	Z, r27
    60ee:	08 95       	ret

000060f0 <__mulhi_const_10>:
    60f0:	7a e0       	ldi	r23, 0x0A	; 10
    60f2:	97 9f       	mul	r25, r23
    60f4:	90 2d       	mov	r25, r0
    60f6:	87 9f       	mul	r24, r23
    60f8:	80 2d       	mov	r24, r0
    60fa:	91 0d       	add	r25, r1
    60fc:	11 24       	eor	r1, r1
    60fe:	08 95       	ret

00006100 <strtod>:
    6100:	a0 e0       	ldi	r26, 0x00	; 0
    6102:	b0 e0       	ldi	r27, 0x00	; 0
    6104:	e6 e8       	ldi	r30, 0x86	; 134
    6106:	f0 e3       	ldi	r31, 0x30	; 48
    6108:	0c 94 03 32 	jmp	0x6406	; 0x6406 <__prologue_saves__+0xc>
    610c:	ec 01       	movw	r28, r24
    610e:	6b 01       	movw	r12, r22
    6110:	61 15       	cp	r22, r1
    6112:	71 05       	cpc	r23, r1
    6114:	19 f0       	breq	.+6      	; 0x611c <strtod+0x1c>
    6116:	fb 01       	movw	r30, r22
    6118:	91 83       	std	Z+1, r25	; 0x01
    611a:	80 83       	st	Z, r24
    611c:	7e 01       	movw	r14, r28
    611e:	ff ef       	ldi	r31, 0xFF	; 255
    6120:	ef 1a       	sub	r14, r31
    6122:	ff 0a       	sbc	r15, r31
    6124:	08 81       	ld	r16, Y
    6126:	80 2f       	mov	r24, r16
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	0e 94 ce 31 	call	0x639c	; 0x639c <isspace>
    612e:	89 2b       	or	r24, r25
    6130:	11 f0       	breq	.+4      	; 0x6136 <strtod+0x36>
    6132:	e7 01       	movw	r28, r14
    6134:	f3 cf       	rjmp	.-26     	; 0x611c <strtod+0x1c>
    6136:	0d 32       	cpi	r16, 0x2D	; 45
    6138:	39 f4       	brne	.+14     	; 0x6148 <strtod+0x48>
    613a:	7e 01       	movw	r14, r28
    613c:	82 e0       	ldi	r24, 0x02	; 2
    613e:	e8 0e       	add	r14, r24
    6140:	f1 1c       	adc	r15, r1
    6142:	09 81       	ldd	r16, Y+1	; 0x01
    6144:	11 e0       	ldi	r17, 0x01	; 1
    6146:	08 c0       	rjmp	.+16     	; 0x6158 <strtod+0x58>
    6148:	0b 32       	cpi	r16, 0x2B	; 43
    614a:	29 f4       	brne	.+10     	; 0x6156 <strtod+0x56>
    614c:	7e 01       	movw	r14, r28
    614e:	92 e0       	ldi	r25, 0x02	; 2
    6150:	e9 0e       	add	r14, r25
    6152:	f1 1c       	adc	r15, r1
    6154:	09 81       	ldd	r16, Y+1	; 0x01
    6156:	10 e0       	ldi	r17, 0x00	; 0
    6158:	e7 01       	movw	r28, r14
    615a:	21 97       	sbiw	r28, 0x01	; 1
    615c:	43 e0       	ldi	r20, 0x03	; 3
    615e:	50 e0       	ldi	r21, 0x00	; 0
    6160:	62 e6       	ldi	r22, 0x62	; 98
    6162:	72 e0       	ldi	r23, 0x02	; 2
    6164:	ce 01       	movw	r24, r28
    6166:	0e 94 d7 31 	call	0x63ae	; 0x63ae <strncasecmp_P>
    616a:	89 2b       	or	r24, r25
    616c:	c1 f4       	brne	.+48     	; 0x619e <strtod+0x9e>
    616e:	23 96       	adiw	r28, 0x03	; 3
    6170:	45 e0       	ldi	r20, 0x05	; 5
    6172:	50 e0       	ldi	r21, 0x00	; 0
    6174:	6d e5       	ldi	r22, 0x5D	; 93
    6176:	72 e0       	ldi	r23, 0x02	; 2
    6178:	ce 01       	movw	r24, r28
    617a:	0e 94 d7 31 	call	0x63ae	; 0x63ae <strncasecmp_P>
    617e:	89 2b       	or	r24, r25
    6180:	09 f4       	brne	.+2      	; 0x6184 <strtod+0x84>
    6182:	25 96       	adiw	r28, 0x05	; 5
    6184:	c1 14       	cp	r12, r1
    6186:	d1 04       	cpc	r13, r1
    6188:	19 f0       	breq	.+6      	; 0x6190 <strtod+0x90>
    618a:	f6 01       	movw	r30, r12
    618c:	d1 83       	std	Z+1, r29	; 0x01
    618e:	c0 83       	st	Z, r28
    6190:	11 11       	cpse	r17, r1
    6192:	f6 c0       	rjmp	.+492    	; 0x6380 <strtod+0x280>
    6194:	60 e0       	ldi	r22, 0x00	; 0
    6196:	70 e0       	ldi	r23, 0x00	; 0
    6198:	80 e8       	ldi	r24, 0x80	; 128
    619a:	9f e7       	ldi	r25, 0x7F	; 127
    619c:	fa c0       	rjmp	.+500    	; 0x6392 <strtod+0x292>
    619e:	43 e0       	ldi	r20, 0x03	; 3
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	6a e5       	ldi	r22, 0x5A	; 90
    61a4:	72 e0       	ldi	r23, 0x02	; 2
    61a6:	ce 01       	movw	r24, r28
    61a8:	0e 94 d7 31 	call	0x63ae	; 0x63ae <strncasecmp_P>
    61ac:	89 2b       	or	r24, r25
    61ae:	59 f4       	brne	.+22     	; 0x61c6 <strtod+0xc6>
    61b0:	c1 14       	cp	r12, r1
    61b2:	d1 04       	cpc	r13, r1
    61b4:	09 f4       	brne	.+2      	; 0x61b8 <strtod+0xb8>
    61b6:	e9 c0       	rjmp	.+466    	; 0x638a <strtod+0x28a>
    61b8:	f2 e0       	ldi	r31, 0x02	; 2
    61ba:	ef 0e       	add	r14, r31
    61bc:	f1 1c       	adc	r15, r1
    61be:	f6 01       	movw	r30, r12
    61c0:	f1 82       	std	Z+1, r15	; 0x01
    61c2:	e0 82       	st	Z, r14
    61c4:	e2 c0       	rjmp	.+452    	; 0x638a <strtod+0x28a>
    61c6:	20 e0       	ldi	r18, 0x00	; 0
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	a9 01       	movw	r20, r18
    61cc:	c0 e0       	ldi	r28, 0x00	; 0
    61ce:	d0 e0       	ldi	r29, 0x00	; 0
    61d0:	f7 01       	movw	r30, r14
    61d2:	80 ed       	ldi	r24, 0xD0	; 208
    61d4:	a8 2e       	mov	r10, r24
    61d6:	a0 0e       	add	r10, r16
    61d8:	89 e0       	ldi	r24, 0x09	; 9
    61da:	8a 15       	cp	r24, r10
    61dc:	30 f1       	brcs	.+76     	; 0x622a <strtod+0x12a>
    61de:	91 2f       	mov	r25, r17
    61e0:	92 60       	ori	r25, 0x02	; 2
    61e2:	b9 2e       	mov	r11, r25
    61e4:	81 2f       	mov	r24, r17
    61e6:	88 70       	andi	r24, 0x08	; 8
    61e8:	12 ff       	sbrs	r17, 2
    61ea:	04 c0       	rjmp	.+8      	; 0x61f4 <strtod+0xf4>
    61ec:	81 11       	cpse	r24, r1
    61ee:	24 c0       	rjmp	.+72     	; 0x6238 <strtod+0x138>
    61f0:	21 96       	adiw	r28, 0x01	; 1
    61f2:	22 c0       	rjmp	.+68     	; 0x6238 <strtod+0x138>
    61f4:	81 11       	cpse	r24, r1
    61f6:	21 97       	sbiw	r28, 0x01	; 1
    61f8:	a5 e0       	ldi	r26, 0x05	; 5
    61fa:	b0 e0       	ldi	r27, 0x00	; 0
    61fc:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__muluhisi3>
    6200:	dc 01       	movw	r26, r24
    6202:	cb 01       	movw	r24, r22
    6204:	88 0f       	add	r24, r24
    6206:	99 1f       	adc	r25, r25
    6208:	aa 1f       	adc	r26, r26
    620a:	bb 1f       	adc	r27, r27
    620c:	9c 01       	movw	r18, r24
    620e:	ad 01       	movw	r20, r26
    6210:	2a 0d       	add	r18, r10
    6212:	31 1d       	adc	r19, r1
    6214:	41 1d       	adc	r20, r1
    6216:	51 1d       	adc	r21, r1
    6218:	28 39       	cpi	r18, 0x98	; 152
    621a:	89 e9       	ldi	r24, 0x99	; 153
    621c:	38 07       	cpc	r19, r24
    621e:	48 07       	cpc	r20, r24
    6220:	89 e1       	ldi	r24, 0x19	; 25
    6222:	58 07       	cpc	r21, r24
    6224:	48 f0       	brcs	.+18     	; 0x6238 <strtod+0x138>
    6226:	16 60       	ori	r17, 0x06	; 6
    6228:	06 c0       	rjmp	.+12     	; 0x6236 <strtod+0x136>
    622a:	9e ef       	ldi	r25, 0xFE	; 254
    622c:	a9 12       	cpse	r10, r25
    622e:	0a c0       	rjmp	.+20     	; 0x6244 <strtod+0x144>
    6230:	13 fd       	sbrc	r17, 3
    6232:	40 c0       	rjmp	.+128    	; 0x62b4 <strtod+0x1b4>
    6234:	18 60       	ori	r17, 0x08	; 8
    6236:	b1 2e       	mov	r11, r17
    6238:	8f ef       	ldi	r24, 0xFF	; 255
    623a:	e8 1a       	sub	r14, r24
    623c:	f8 0a       	sbc	r15, r24
    623e:	00 81       	ld	r16, Z
    6240:	1b 2d       	mov	r17, r11
    6242:	c6 cf       	rjmp	.-116    	; 0x61d0 <strtod+0xd0>
    6244:	80 2f       	mov	r24, r16
    6246:	8f 7d       	andi	r24, 0xDF	; 223
    6248:	85 34       	cpi	r24, 0x45	; 69
    624a:	a1 f5       	brne	.+104    	; 0x62b4 <strtod+0x1b4>
    624c:	80 81       	ld	r24, Z
    624e:	8d 32       	cpi	r24, 0x2D	; 45
    6250:	11 f4       	brne	.+4      	; 0x6256 <strtod+0x156>
    6252:	10 61       	ori	r17, 0x10	; 16
    6254:	06 c0       	rjmp	.+12     	; 0x6262 <strtod+0x162>
    6256:	8b 32       	cpi	r24, 0x2B	; 43
    6258:	21 f0       	breq	.+8      	; 0x6262 <strtod+0x162>
    625a:	31 96       	adiw	r30, 0x01	; 1
    625c:	61 e0       	ldi	r22, 0x01	; 1
    625e:	70 e0       	ldi	r23, 0x00	; 0
    6260:	04 c0       	rjmp	.+8      	; 0x626a <strtod+0x16a>
    6262:	81 81       	ldd	r24, Z+1	; 0x01
    6264:	32 96       	adiw	r30, 0x02	; 2
    6266:	62 e0       	ldi	r22, 0x02	; 2
    6268:	70 e0       	ldi	r23, 0x00	; 0
    626a:	80 53       	subi	r24, 0x30	; 48
    626c:	8a 30       	cpi	r24, 0x0A	; 10
    626e:	18 f0       	brcs	.+6      	; 0x6276 <strtod+0x176>
    6270:	e6 1b       	sub	r30, r22
    6272:	f7 0b       	sbc	r31, r23
    6274:	1f c0       	rjmp	.+62     	; 0x62b4 <strtod+0x1b4>
    6276:	60 e0       	ldi	r22, 0x00	; 0
    6278:	70 e0       	ldi	r23, 0x00	; 0
    627a:	60 38       	cpi	r22, 0x80	; 128
    627c:	9c e0       	ldi	r25, 0x0C	; 12
    627e:	79 07       	cpc	r23, r25
    6280:	5c f4       	brge	.+22     	; 0x6298 <strtod+0x198>
    6282:	db 01       	movw	r26, r22
    6284:	aa 0f       	add	r26, r26
    6286:	bb 1f       	adc	r27, r27
    6288:	aa 0f       	add	r26, r26
    628a:	bb 1f       	adc	r27, r27
    628c:	6a 0f       	add	r22, r26
    628e:	7b 1f       	adc	r23, r27
    6290:	66 0f       	add	r22, r22
    6292:	77 1f       	adc	r23, r23
    6294:	68 0f       	add	r22, r24
    6296:	71 1d       	adc	r23, r1
    6298:	31 96       	adiw	r30, 0x01	; 1
    629a:	df 01       	movw	r26, r30
    629c:	11 97       	sbiw	r26, 0x01	; 1
    629e:	8c 91       	ld	r24, X
    62a0:	80 53       	subi	r24, 0x30	; 48
    62a2:	8a 30       	cpi	r24, 0x0A	; 10
    62a4:	50 f3       	brcs	.-44     	; 0x627a <strtod+0x17a>
    62a6:	14 ff       	sbrs	r17, 4
    62a8:	03 c0       	rjmp	.+6      	; 0x62b0 <strtod+0x1b0>
    62aa:	71 95       	neg	r23
    62ac:	61 95       	neg	r22
    62ae:	71 09       	sbc	r23, r1
    62b0:	c6 0f       	add	r28, r22
    62b2:	d7 1f       	adc	r29, r23
    62b4:	11 ff       	sbrs	r17, 1
    62b6:	08 c0       	rjmp	.+16     	; 0x62c8 <strtod+0x1c8>
    62b8:	c1 14       	cp	r12, r1
    62ba:	d1 04       	cpc	r13, r1
    62bc:	29 f0       	breq	.+10     	; 0x62c8 <strtod+0x1c8>
    62be:	cf 01       	movw	r24, r30
    62c0:	01 97       	sbiw	r24, 0x01	; 1
    62c2:	f6 01       	movw	r30, r12
    62c4:	91 83       	std	Z+1, r25	; 0x01
    62c6:	80 83       	st	Z, r24
    62c8:	ca 01       	movw	r24, r20
    62ca:	b9 01       	movw	r22, r18
    62cc:	0e 94 0e 1a 	call	0x341c	; 0x341c <__floatunsisf>
    62d0:	21 2f       	mov	r18, r17
    62d2:	23 70       	andi	r18, 0x03	; 3
    62d4:	23 30       	cpi	r18, 0x03	; 3
    62d6:	19 f0       	breq	.+6      	; 0x62de <strtod+0x1de>
    62d8:	4b 01       	movw	r8, r22
    62da:	5c 01       	movw	r10, r24
    62dc:	06 c0       	rjmp	.+12     	; 0x62ea <strtod+0x1ea>
    62de:	4b 01       	movw	r8, r22
    62e0:	5c 01       	movw	r10, r24
    62e2:	b7 fa       	bst	r11, 7
    62e4:	b0 94       	com	r11
    62e6:	b7 f8       	bld	r11, 7
    62e8:	b0 94       	com	r11
    62ea:	20 e0       	ldi	r18, 0x00	; 0
    62ec:	30 e0       	ldi	r19, 0x00	; 0
    62ee:	a9 01       	movw	r20, r18
    62f0:	c5 01       	movw	r24, r10
    62f2:	b4 01       	movw	r22, r8
    62f4:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__cmpsf2>
    62f8:	88 23       	and	r24, r24
    62fa:	09 f4       	brne	.+2      	; 0x62fe <strtod+0x1fe>
    62fc:	3e c0       	rjmp	.+124    	; 0x637a <strtod+0x27a>
    62fe:	d7 ff       	sbrs	r29, 7
    6300:	06 c0       	rjmp	.+12     	; 0x630e <strtod+0x20e>
    6302:	d1 95       	neg	r29
    6304:	c1 95       	neg	r28
    6306:	d1 09       	sbc	r29, r1
    6308:	09 e7       	ldi	r16, 0x79	; 121
    630a:	12 e0       	ldi	r17, 0x02	; 2
    630c:	02 c0       	rjmp	.+4      	; 0x6312 <strtod+0x212>
    630e:	01 e9       	ldi	r16, 0x91	; 145
    6310:	12 e0       	ldi	r17, 0x02	; 2
    6312:	68 01       	movw	r12, r16
    6314:	f8 e1       	ldi	r31, 0x18	; 24
    6316:	cf 1a       	sub	r12, r31
    6318:	d1 08       	sbc	r13, r1
    631a:	90 e2       	ldi	r25, 0x20	; 32
    631c:	e9 2e       	mov	r14, r25
    631e:	f1 2c       	mov	r15, r1
    6320:	ce 15       	cp	r28, r14
    6322:	df 05       	cpc	r29, r15
    6324:	74 f0       	brlt	.+28     	; 0x6342 <strtod+0x242>
    6326:	f8 01       	movw	r30, r16
    6328:	25 91       	lpm	r18, Z+
    632a:	35 91       	lpm	r19, Z+
    632c:	45 91       	lpm	r20, Z+
    632e:	54 91       	lpm	r21, Z
    6330:	c5 01       	movw	r24, r10
    6332:	b4 01       	movw	r22, r8
    6334:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__mulsf3>
    6338:	4b 01       	movw	r8, r22
    633a:	5c 01       	movw	r10, r24
    633c:	ce 19       	sub	r28, r14
    633e:	df 09       	sbc	r29, r15
    6340:	ef cf       	rjmp	.-34     	; 0x6320 <strtod+0x220>
    6342:	04 50       	subi	r16, 0x04	; 4
    6344:	11 09       	sbc	r17, r1
    6346:	f5 94       	asr	r15
    6348:	e7 94       	ror	r14
    634a:	0c 15       	cp	r16, r12
    634c:	1d 05       	cpc	r17, r13
    634e:	41 f7       	brne	.-48     	; 0x6320 <strtod+0x220>
    6350:	8a 2d       	mov	r24, r10
    6352:	88 0f       	add	r24, r24
    6354:	8b 2d       	mov	r24, r11
    6356:	88 1f       	adc	r24, r24
    6358:	8f 3f       	cpi	r24, 0xFF	; 255
    635a:	49 f0       	breq	.+18     	; 0x636e <strtod+0x26e>
    635c:	20 e0       	ldi	r18, 0x00	; 0
    635e:	30 e0       	ldi	r19, 0x00	; 0
    6360:	a9 01       	movw	r20, r18
    6362:	c5 01       	movw	r24, r10
    6364:	b4 01       	movw	r22, r8
    6366:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__cmpsf2>
    636a:	81 11       	cpse	r24, r1
    636c:	06 c0       	rjmp	.+12     	; 0x637a <strtod+0x27a>
    636e:	82 e2       	ldi	r24, 0x22	; 34
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <errno+0x1>
    6376:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <errno>
    637a:	c5 01       	movw	r24, r10
    637c:	b4 01       	movw	r22, r8
    637e:	09 c0       	rjmp	.+18     	; 0x6392 <strtod+0x292>
    6380:	60 e0       	ldi	r22, 0x00	; 0
    6382:	70 e0       	ldi	r23, 0x00	; 0
    6384:	80 e8       	ldi	r24, 0x80	; 128
    6386:	9f ef       	ldi	r25, 0xFF	; 255
    6388:	04 c0       	rjmp	.+8      	; 0x6392 <strtod+0x292>
    638a:	60 e0       	ldi	r22, 0x00	; 0
    638c:	70 e0       	ldi	r23, 0x00	; 0
    638e:	80 ec       	ldi	r24, 0xC0	; 192
    6390:	9f e7       	ldi	r25, 0x7F	; 127
    6392:	cd b7       	in	r28, 0x3d	; 61
    6394:	de b7       	in	r29, 0x3e	; 62
    6396:	ec e0       	ldi	r30, 0x0C	; 12
    6398:	0c 94 1f 32 	jmp	0x643e	; 0x643e <__epilogue_restores__+0xc>

0000639c <isspace>:
    639c:	91 11       	cpse	r25, r1
    639e:	0c 94 ef 31 	jmp	0x63de	; 0x63de <__ctype_isfalse>
    63a2:	80 32       	cpi	r24, 0x20	; 32
    63a4:	19 f0       	breq	.+6      	; 0x63ac <isspace+0x10>
    63a6:	89 50       	subi	r24, 0x09	; 9
    63a8:	85 50       	subi	r24, 0x05	; 5
    63aa:	c8 f7       	brcc	.-14     	; 0x639e <isspace+0x2>
    63ac:	08 95       	ret

000063ae <strncasecmp_P>:
    63ae:	fb 01       	movw	r30, r22
    63b0:	dc 01       	movw	r26, r24
    63b2:	41 50       	subi	r20, 0x01	; 1
    63b4:	50 40       	sbci	r21, 0x00	; 0
    63b6:	88 f0       	brcs	.+34     	; 0x63da <strncasecmp_P+0x2c>
    63b8:	8d 91       	ld	r24, X+
    63ba:	81 34       	cpi	r24, 0x41	; 65
    63bc:	1c f0       	brlt	.+6      	; 0x63c4 <strncasecmp_P+0x16>
    63be:	8b 35       	cpi	r24, 0x5B	; 91
    63c0:	0c f4       	brge	.+2      	; 0x63c4 <strncasecmp_P+0x16>
    63c2:	80 5e       	subi	r24, 0xE0	; 224
    63c4:	65 91       	lpm	r22, Z+
    63c6:	61 34       	cpi	r22, 0x41	; 65
    63c8:	1c f0       	brlt	.+6      	; 0x63d0 <strncasecmp_P+0x22>
    63ca:	6b 35       	cpi	r22, 0x5B	; 91
    63cc:	0c f4       	brge	.+2      	; 0x63d0 <strncasecmp_P+0x22>
    63ce:	60 5e       	subi	r22, 0xE0	; 224
    63d0:	86 1b       	sub	r24, r22
    63d2:	61 11       	cpse	r22, r1
    63d4:	71 f3       	breq	.-36     	; 0x63b2 <strncasecmp_P+0x4>
    63d6:	99 0b       	sbc	r25, r25
    63d8:	08 95       	ret
    63da:	88 1b       	sub	r24, r24
    63dc:	fc cf       	rjmp	.-8      	; 0x63d6 <strncasecmp_P+0x28>

000063de <__ctype_isfalse>:
    63de:	99 27       	eor	r25, r25
    63e0:	88 27       	eor	r24, r24

000063e2 <__ctype_istrue>:
    63e2:	08 95       	ret

000063e4 <__muluhisi3>:
    63e4:	0e 94 34 32 	call	0x6468	; 0x6468 <__umulhisi3>
    63e8:	a5 9f       	mul	r26, r21
    63ea:	90 0d       	add	r25, r0
    63ec:	b4 9f       	mul	r27, r20
    63ee:	90 0d       	add	r25, r0
    63f0:	a4 9f       	mul	r26, r20
    63f2:	80 0d       	add	r24, r0
    63f4:	91 1d       	adc	r25, r1
    63f6:	11 24       	eor	r1, r1
    63f8:	08 95       	ret

000063fa <__prologue_saves__>:
    63fa:	2f 92       	push	r2
    63fc:	3f 92       	push	r3
    63fe:	4f 92       	push	r4
    6400:	5f 92       	push	r5
    6402:	6f 92       	push	r6
    6404:	7f 92       	push	r7
    6406:	8f 92       	push	r8
    6408:	9f 92       	push	r9
    640a:	af 92       	push	r10
    640c:	bf 92       	push	r11
    640e:	cf 92       	push	r12
    6410:	df 92       	push	r13
    6412:	ef 92       	push	r14
    6414:	ff 92       	push	r15
    6416:	0f 93       	push	r16
    6418:	1f 93       	push	r17
    641a:	cf 93       	push	r28
    641c:	df 93       	push	r29
    641e:	cd b7       	in	r28, 0x3d	; 61
    6420:	de b7       	in	r29, 0x3e	; 62
    6422:	ca 1b       	sub	r28, r26
    6424:	db 0b       	sbc	r29, r27
    6426:	0f b6       	in	r0, 0x3f	; 63
    6428:	f8 94       	cli
    642a:	de bf       	out	0x3e, r29	; 62
    642c:	0f be       	out	0x3f, r0	; 63
    642e:	cd bf       	out	0x3d, r28	; 61
    6430:	09 94       	ijmp

00006432 <__epilogue_restores__>:
    6432:	2a 88       	ldd	r2, Y+18	; 0x12
    6434:	39 88       	ldd	r3, Y+17	; 0x11
    6436:	48 88       	ldd	r4, Y+16	; 0x10
    6438:	5f 84       	ldd	r5, Y+15	; 0x0f
    643a:	6e 84       	ldd	r6, Y+14	; 0x0e
    643c:	7d 84       	ldd	r7, Y+13	; 0x0d
    643e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6440:	9b 84       	ldd	r9, Y+11	; 0x0b
    6442:	aa 84       	ldd	r10, Y+10	; 0x0a
    6444:	b9 84       	ldd	r11, Y+9	; 0x09
    6446:	c8 84       	ldd	r12, Y+8	; 0x08
    6448:	df 80       	ldd	r13, Y+7	; 0x07
    644a:	ee 80       	ldd	r14, Y+6	; 0x06
    644c:	fd 80       	ldd	r15, Y+5	; 0x05
    644e:	0c 81       	ldd	r16, Y+4	; 0x04
    6450:	1b 81       	ldd	r17, Y+3	; 0x03
    6452:	aa 81       	ldd	r26, Y+2	; 0x02
    6454:	b9 81       	ldd	r27, Y+1	; 0x01
    6456:	ce 0f       	add	r28, r30
    6458:	d1 1d       	adc	r29, r1
    645a:	0f b6       	in	r0, 0x3f	; 63
    645c:	f8 94       	cli
    645e:	de bf       	out	0x3e, r29	; 62
    6460:	0f be       	out	0x3f, r0	; 63
    6462:	cd bf       	out	0x3d, r28	; 61
    6464:	ed 01       	movw	r28, r26
    6466:	08 95       	ret

00006468 <__umulhisi3>:
    6468:	a2 9f       	mul	r26, r18
    646a:	b0 01       	movw	r22, r0
    646c:	b3 9f       	mul	r27, r19
    646e:	c0 01       	movw	r24, r0
    6470:	a3 9f       	mul	r26, r19
    6472:	70 0d       	add	r23, r0
    6474:	81 1d       	adc	r24, r1
    6476:	11 24       	eor	r1, r1
    6478:	91 1d       	adc	r25, r1
    647a:	b2 9f       	mul	r27, r18
    647c:	70 0d       	add	r23, r0
    647e:	81 1d       	adc	r24, r1
    6480:	11 24       	eor	r1, r1
    6482:	91 1d       	adc	r25, r1
    6484:	08 95       	ret

00006486 <__do_global_dtors>:
    6486:	13 e0       	ldi	r17, 0x03	; 3
    6488:	c5 eb       	ldi	r28, 0xB5	; 181
    648a:	d3 e0       	ldi	r29, 0x03	; 3
    648c:	04 c0       	rjmp	.+8      	; 0x6496 <__do_global_dtors+0x10>
    648e:	fe 01       	movw	r30, r28
    6490:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <__tablejump2__>
    6494:	21 96       	adiw	r28, 0x01	; 1
    6496:	c6 3b       	cpi	r28, 0xB6	; 182
    6498:	d1 07       	cpc	r29, r17
    649a:	c9 f7       	brne	.-14     	; 0x648e <__do_global_dtors+0x8>
    649c:	f8 94       	cli

0000649e <__stop_program>:
    649e:	ff cf       	rjmp	.-2      	; 0x649e <__stop_program>
