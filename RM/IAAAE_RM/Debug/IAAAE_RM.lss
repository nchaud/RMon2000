
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00003b34  00003bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ec  008001a6  008001a6  00003c6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003c6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cd0  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001fcab  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048cb  00000000  00000000  0002465b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f1b  00000000  00000000  00028f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f00  00000000  00000000  0002fe44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005b60  00000000  00000000  00032d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010d61  00000000  00000000  000388a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c88  00000000  00000000  00049605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__dtors_end>
       4:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
       8:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
       c:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__vector_3>
      10:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__vector_3>
      14:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__vector_3>
      18:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      1c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      20:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      24:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      28:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      2c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      30:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      34:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      38:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      3c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      40:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__vector_16>
      44:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      48:	0c 94 87 13 	jmp	0x270e	; 0x270e <__vector_18>
      4c:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_19>
      50:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      54:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      58:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      5c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      60:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__vector_24>
      64:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     224:	45 72 72 6f 72 3d 00                                Error=.

0000022b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     22b:	20 7c 20 00                                          | .

0000022f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     22f:	54 65 6d 70 3d 00                                   Temp=.

00000235 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     235:	20 7c 20 00                                          | .

00000239 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     239:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000242 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     242:	20 7c 20 00                                          | .

00000246 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     246:	50 56 2d 56 3d 00                                   PV-V=.

0000024c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     24c:	20 7c 20 00                                          | .

00000250 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     250:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000258 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     258:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000265 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     265:	20 7c 20 00                                          | .

00000269 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     269:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

00000272 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     272:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

0000027c <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     27c:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     28c:	6f 64 65 3d 00                                      ode=.

00000291 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     291:	20 7c 20 00                                          | .

00000295 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     295:	42 45 52 3d 00                                      BER=.

0000029a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     29a:	20 7c 20 00                                          | .

0000029e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     29e:	52 53 53 49 3d 00                                   RSSI=.

000002a4 <_ZL12b64_alphabet>:
     2a4:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     2b4:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     2c4:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     2d4:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000002e5 <_ZZ4loopE3__c_1>:
     2e5:	53 55 42 53 45 51 55 45 4e 54 20 66 6f 6e 61 20     SUBSEQUENT fona 
     2f5:	69 73 20 6e 75 6c 6c 3f 00                          is null?.

000002fe <_ZZ4loopE3__c_0>:
     2fe:	53 55 42 53 45 51 55 45 4e 54 20 49 53 43 4f 4d     SUBSEQUENT ISCOM
     30e:	50 4c 45 54 45 00                                   PLETE.

00000314 <_ZZ4loopE3__c>:
     314:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000031e <_ZZ8sendDatavE3__c_3>:
     31e:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     32e:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     33e:	6f 72 20 73 65 6e 64 3a 00                          or send:.

00000347 <_ZZ8sendDatavE3__c_2>:
     347:	46 4f 55 4e 44 2e 2e 2e 00                          FOUND....

00000350 <_ZZ8sendDatavE3__c_1>:
     350:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     360:	52 29 00                                            R).

00000363 <_ZZ8sendDatavE3__c_0>:
     363:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     373:	69 6e 67 2e 2e 2e 29 00                             ing...).

0000037b <_ZZ8sendDatavE3__c>:
     37b:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     38b:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

0000039a <_ZZ12takeReadingsvE3__c>:
     39a:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     3aa:	2e 2e 00                                            ...

000003ad <_ZZ21ensureFonaInitialisedbPbE3__c_5>:
     3ad:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     3bd:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

000003cd <_ZZ21ensureFonaInitialisedbPbE3__c_4>:
     3cd:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     3dd:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     3ed:	65 64 00                                            ed.

000003f0 <_ZZ21ensureFonaInitialisedbPbE3__c_3>:
     3f0:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     400:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     410:	6f 72 74 6c 79 00                                   ortly.

00000416 <_ZZ21ensureFonaInitialisedbPbE3__c_2>:
     416:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     426:	6e 67 20 47 50 52 53 2e 2e 2e 00                    ng GPRS....

00000431 <_ZZ21ensureFonaInitialisedbPbE3__c_1>:
     431:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     441:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

0000044e <_ZZ21ensureFonaInitialisedbPbE3__c_0>:
     44e:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     45e:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000469 <_ZZ21ensureFonaInitialisedbPbE3__c>:
     469:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     479:	61 2e 2e 2e 00                                      a....

0000047e <_ZZ5setupE3__c>:
     47e:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

0000048a <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_1>:
     48a:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     49a:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     4aa:	73 73 69 6f 6e 3a 00                                ssion:.

000004b1 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     4b1:	2a 2a 2a 2a 00                                      ****.

000004b6 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     4b6:	54 45 53 54 3a 20 43 68 65 63 6b 69 6e 67 20 72     TEST: Checking r
     4c6:	73 73 69 2e 2e 2e 00                                ssi....

000004cd <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     4cd:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     4dd:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     4ed:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     4fd:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

00000508 <digital_pin_to_timer_PGM>:
     508:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     518:	00 00 00 00                                         ....

0000051c <digital_pin_to_bit_mask_PGM>:
     51c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     52c:	04 08 10 20                                         ... 

00000530 <digital_pin_to_port_PGM>:
     530:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     540:	03 03 03 03                                         ....

00000544 <port_to_input_PGM>:
     544:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000054e <port_to_output_PGM>:
     54e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000558 <port_to_mode_PGM>:
     558:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000562 <__ctors_start>:
     562:	52 0d       	add	r21, r2
     564:	f3 11       	cpse	r31, r3
     566:	e9 13       	cpse	r30, r25

00000568 <__ctors_end>:
     568:	62 0d       	add	r22, r2

0000056a <__dtors_end>:
     56a:	11 24       	eor	r1, r1
     56c:	1f be       	out	0x3f, r1	; 63
     56e:	cf ef       	ldi	r28, 0xFF	; 255
     570:	d8 e0       	ldi	r29, 0x08	; 8
     572:	de bf       	out	0x3e, r29	; 62
     574:	cd bf       	out	0x3d, r28	; 61

00000576 <__do_copy_data>:
     576:	11 e0       	ldi	r17, 0x01	; 1
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b1 e0       	ldi	r27, 0x01	; 1
     57c:	e4 e3       	ldi	r30, 0x34	; 52
     57e:	fb e3       	ldi	r31, 0x3B	; 59
     580:	02 c0       	rjmp	.+4      	; 0x586 <__do_copy_data+0x10>
     582:	05 90       	lpm	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	a6 3a       	cpi	r26, 0xA6	; 166
     588:	b1 07       	cpc	r27, r17
     58a:	d9 f7       	brne	.-10     	; 0x582 <__do_copy_data+0xc>

0000058c <__do_clear_bss>:
     58c:	24 e0       	ldi	r18, 0x04	; 4
     58e:	a6 ea       	ldi	r26, 0xA6	; 166
     590:	b1 e0       	ldi	r27, 0x01	; 1
     592:	01 c0       	rjmp	.+2      	; 0x596 <.do_clear_bss_start>

00000594 <.do_clear_bss_loop>:
     594:	1d 92       	st	X+, r1

00000596 <.do_clear_bss_start>:
     596:	a2 39       	cpi	r26, 0x92	; 146
     598:	b2 07       	cpc	r27, r18
     59a:	e1 f7       	brne	.-8      	; 0x594 <.do_clear_bss_loop>

0000059c <__do_global_ctors>:
     59c:	12 e0       	ldi	r17, 0x02	; 2
     59e:	c4 eb       	ldi	r28, 0xB4	; 180
     5a0:	d2 e0       	ldi	r29, 0x02	; 2
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <__do_global_ctors+0x10>
     5a4:	21 97       	sbiw	r28, 0x01	; 1
     5a6:	fe 01       	movw	r30, r28
     5a8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__tablejump2__>
     5ac:	c1 3b       	cpi	r28, 0xB1	; 177
     5ae:	d1 07       	cpc	r29, r17
     5b0:	c9 f7       	brne	.-14     	; 0x5a4 <__do_global_ctors+0x8>
     5b2:	0e 94 17 14 	call	0x282e	; 0x282e <main>
     5b6:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__do_global_dtors>

000005ba <__bad_interrupt>:
     5ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005be <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     5be:	83 5e       	subi	r24, 0xE3	; 227
     5c0:	9e 4f       	sbci	r25, 0xFE	; 254
     5c2:	dc 01       	movw	r26, r24
     5c4:	8d 91       	ld	r24, X+
     5c6:	9c 91       	ld	r25, X
     5c8:	dc 01       	movw	r26, r24
     5ca:	ed 91       	ld	r30, X+
     5cc:	fc 91       	ld	r31, X
     5ce:	04 80       	ldd	r0, Z+4	; 0x04
     5d0:	f5 81       	ldd	r31, Z+5	; 0x05
     5d2:	e0 2d       	mov	r30, r0
     5d4:	09 94       	ijmp

000005d6 <_ZN13Adafruit_FONA5writeEh>:
     5d6:	83 5e       	subi	r24, 0xE3	; 227
     5d8:	9e 4f       	sbci	r25, 0xFE	; 254
     5da:	dc 01       	movw	r26, r24
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	dc 01       	movw	r26, r24
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	01 90       	ld	r0, Z+
     5e8:	f0 81       	ld	r31, Z
     5ea:	e0 2d       	mov	r30, r0
     5ec:	09 94       	ijmp

000005ee <_ZN13Adafruit_FONA4readEv>:
     5ee:	83 5e       	subi	r24, 0xE3	; 227
     5f0:	9e 4f       	sbci	r25, 0xFE	; 254
     5f2:	dc 01       	movw	r26, r24
     5f4:	8d 91       	ld	r24, X+
     5f6:	9c 91       	ld	r25, X
     5f8:	dc 01       	movw	r26, r24
     5fa:	ed 91       	ld	r30, X+
     5fc:	fc 91       	ld	r31, X
     5fe:	06 80       	ldd	r0, Z+6	; 0x06
     600:	f7 81       	ldd	r31, Z+7	; 0x07
     602:	e0 2d       	mov	r30, r0
     604:	09 94       	ijmp

00000606 <_ZN13Adafruit_FONA4peekEv>:
     606:	83 5e       	subi	r24, 0xE3	; 227
     608:	9e 4f       	sbci	r25, 0xFE	; 254
     60a:	dc 01       	movw	r26, r24
     60c:	8d 91       	ld	r24, X+
     60e:	9c 91       	ld	r25, X
     610:	dc 01       	movw	r26, r24
     612:	ed 91       	ld	r30, X+
     614:	fc 91       	ld	r31, X
     616:	00 84       	ldd	r0, Z+8	; 0x08
     618:	f1 85       	ldd	r31, Z+9	; 0x09
     61a:	e0 2d       	mov	r30, r0
     61c:	09 94       	ijmp

0000061e <_ZN13Adafruit_FONA5flushEv>:
     61e:	83 5e       	subi	r24, 0xE3	; 227
     620:	9e 4f       	sbci	r25, 0xFE	; 254
     622:	dc 01       	movw	r26, r24
     624:	8d 91       	ld	r24, X+
     626:	9c 91       	ld	r25, X
     628:	dc 01       	movw	r26, r24
     62a:	ed 91       	ld	r30, X+
     62c:	fc 91       	ld	r31, X
     62e:	02 84       	ldd	r0, Z+10	; 0x0a
     630:	f3 85       	ldd	r31, Z+11	; 0x0b
     632:	e0 2d       	mov	r30, r0
     634:	09 94       	ijmp

00000636 <_ZN13Adafruit_FONAC1Eab>:
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	00 d0       	rcall	.+0      	; 0x648 <_ZN13Adafruit_FONAC1Eab+0x12>
     648:	00 d0       	rcall	.+0      	; 0x64a <_ZN13Adafruit_FONAC1Eab+0x14>
     64a:	00 d0       	rcall	.+0      	; 0x64c <_ZN13Adafruit_FONAC1Eab+0x16>
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	8c 01       	movw	r16, r24
     652:	c6 2e       	mov	r12, r22
     654:	d4 2e       	mov	r13, r20
     656:	fc 01       	movw	r30, r24
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	12 82       	std	Z+2, r1	; 0x02
     65c:	88 ee       	ldi	r24, 0xE8	; 232
     65e:	93 e0       	ldi	r25, 0x03	; 3
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	84 83       	std	Z+4, r24	; 0x04
     666:	95 83       	std	Z+5, r25	; 0x05
     668:	a6 83       	std	Z+6, r26	; 0x06
     66a:	b7 83       	std	Z+7, r27	; 0x07
     66c:	8a e3       	ldi	r24, 0x3A	; 58
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	86 87       	std	Z+14, r24	; 0x0e
     678:	78 01       	movw	r14, r16
     67a:	fb ee       	ldi	r31, 0xEB	; 235
     67c:	ef 1a       	sub	r14, r31
     67e:	fe ef       	ldi	r31, 0xFE	; 254
     680:	ff 0a       	sbc	r15, r31
     682:	69 e8       	ldi	r22, 0x89	; 137
     684:	71 e0       	ldi	r23, 0x01	; 1
     686:	c7 01       	movw	r24, r14
     688:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN6StringC1EPKc>
     68c:	f8 01       	movw	r30, r16
     68e:	c4 86       	std	Z+12, r12	; 0x0c
     690:	d5 86       	std	Z+13, r13	; 0x0d
     692:	e2 5f       	subi	r30, 0xF2	; 242
     694:	fe 4f       	sbci	r31, 0xFE	; 254
     696:	8c e1       	ldi	r24, 0x1C	; 28
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	91 83       	std	Z+1, r25	; 0x01
     69c:	80 83       	st	Z, r24
     69e:	32 96       	adiw	r30, 0x02	; 2
     6a0:	11 82       	std	Z+1, r1	; 0x01
     6a2:	10 82       	st	Z, r1
     6a4:	32 96       	adiw	r30, 0x02	; 2
     6a6:	11 82       	std	Z+1, r1	; 0x01
     6a8:	10 82       	st	Z, r1
     6aa:	3b 96       	adiw	r30, 0x0b	; 11
     6ac:	11 82       	std	Z+1, r1	; 0x01
     6ae:	10 82       	st	Z, r1
     6b0:	39 97       	sbiw	r30, 0x09	; 9
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 83       	st	Z, r24
     6b6:	67 e0       	ldi	r22, 0x07	; 7
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN6StringC1EPKc>
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	c7 01       	movw	r24, r14
     6ca:	0e 94 14 18 	call	0x3028	; 0x3028 <_ZN6StringaSEOS_>
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN6StringD1Ev>
     6d6:	f8 01       	movw	r30, r16
     6d8:	e5 5e       	subi	r30, 0xE5	; 229
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	89 e1       	ldi	r24, 0x19	; 25
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	91 83       	std	Z+1, r25	; 0x01
     6e2:	80 83       	st	Z, r24
     6e4:	26 96       	adiw	r28, 0x06	; 6
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	08 95       	ret

00000702 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     702:	8b 5e       	subi	r24, 0xEB	; 235
     704:	9e 4f       	sbci	r25, 0xFE	; 254
     706:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <_ZN6StringaSERKS_>

0000070a <_ZN13Adafruit_FONA10flushInputEv>:
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	8c 01       	movw	r16, r24
     71a:	0f 5f       	subi	r16, 0xFF	; 255
     71c:	1f 4f       	sbci	r17, 0xFF	; 255
     71e:	88 97       	sbiw	r24, 0x28	; 40
     720:	d8 f4       	brcc	.+54     	; 0x758 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     722:	e8 81       	ld	r30, Y
     724:	f9 81       	ldd	r31, Y+1	; 0x01
     726:	04 80       	ldd	r0, Z+4	; 0x04
     728:	f5 81       	ldd	r31, Z+5	; 0x05
     72a:	e0 2d       	mov	r30, r0
     72c:	ce 01       	movw	r24, r28
     72e:	09 95       	icall
     730:	89 2b       	or	r24, r25
     732:	51 f0       	breq	.+20     	; 0x748 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     734:	e8 81       	ld	r30, Y
     736:	f9 81       	ldd	r31, Y+1	; 0x01
     738:	06 80       	ldd	r0, Z+6	; 0x06
     73a:	f7 81       	ldd	r31, Z+7	; 0x07
     73c:	e0 2d       	mov	r30, r0
     73e:	ce 01       	movw	r24, r28
     740:	09 95       	icall
     742:	00 e0       	ldi	r16, 0x00	; 0
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	ed cf       	rjmp	.-38     	; 0x722 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     754:	c8 01       	movw	r24, r16
     756:	e0 cf       	rjmp	.-64     	; 0x718 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <_ZN13Adafruit_FONA8readlineEjb>:
     762:	bf 92       	push	r11
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	7c 01       	movw	r14, r24
     776:	b4 2e       	mov	r11, r20
     778:	8b 01       	movw	r16, r22
     77a:	00 0f       	add	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	00 0f       	add	r16, r16
     780:	11 1f       	adc	r17, r17
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	d0 e0       	ldi	r29, 0x00	; 0
     786:	67 01       	movw	r12, r14
     788:	83 ee       	ldi	r24, 0xE3	; 227
     78a:	c8 1a       	sub	r12, r24
     78c:	8e ef       	ldi	r24, 0xFE	; 254
     78e:	d8 0a       	sbc	r13, r24
     790:	01 15       	cp	r16, r1
     792:	11 05       	cpc	r17, r1
     794:	c9 f1       	breq	.+114    	; 0x808 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     796:	ce 3f       	cpi	r28, 0xFE	; 254
     798:	d1 05       	cpc	r29, r1
     79a:	98 f0       	brcs	.+38     	; 0x7c2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     79c:	64 e8       	ldi	r22, 0x84	; 132
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	84 ea       	ldi	r24, 0xA4	; 164
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
     7a8:	2f c0       	rjmp	.+94     	; 0x808 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     7aa:	f6 01       	movw	r30, r12
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	dc 01       	movw	r26, r24
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	06 80       	ldd	r0, Z+6	; 0x06
     7b8:	f7 81       	ldd	r31, Z+7	; 0x07
     7ba:	e0 2d       	mov	r30, r0
     7bc:	09 95       	icall
     7be:	8d 30       	cpi	r24, 0x0D	; 13
     7c0:	69 f4       	brne	.+26     	; 0x7dc <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     7c2:	d6 01       	movw	r26, r12
     7c4:	8d 91       	ld	r24, X+
     7c6:	9c 91       	ld	r25, X
     7c8:	dc 01       	movw	r26, r24
     7ca:	ed 91       	ld	r30, X+
     7cc:	fc 91       	ld	r31, X
     7ce:	04 80       	ldd	r0, Z+4	; 0x04
     7d0:	f5 81       	ldd	r31, Z+5	; 0x05
     7d2:	e0 2d       	mov	r30, r0
     7d4:	09 95       	icall
     7d6:	89 2b       	or	r24, r25
     7d8:	41 f7       	brne	.-48     	; 0x7aa <_ZN13Adafruit_FONA8readlineEjb+0x48>
     7da:	0c c0       	rjmp	.+24     	; 0x7f4 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     7dc:	8a 30       	cpi	r24, 0x0A	; 10
     7de:	21 f4       	brne	.+8      	; 0x7e8 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     7e0:	20 97       	sbiw	r28, 0x00	; 0
     7e2:	79 f3       	breq	.-34     	; 0x7c2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     7e4:	bb 20       	and	r11, r11
     7e6:	81 f0       	breq	.+32     	; 0x808 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     7e8:	f7 01       	movw	r30, r14
     7ea:	ec 0f       	add	r30, r28
     7ec:	fd 1f       	adc	r31, r29
     7ee:	87 87       	std	Z+15, r24	; 0x0f
     7f0:	21 96       	adiw	r28, 0x01	; 1
     7f2:	e7 cf       	rjmp	.-50     	; 0x7c2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     7f4:	01 50       	subi	r16, 0x01	; 1
     7f6:	11 09       	sbc	r17, r1
     7f8:	39 f0       	breq	.+14     	; 0x808 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     806:	c4 cf       	rjmp	.-120    	; 0x790 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     808:	f7 01       	movw	r30, r14
     80a:	ec 0f       	add	r30, r28
     80c:	fd 1f       	adc	r31, r29
     80e:	17 86       	std	Z+15, r1	; 0x0f
     810:	8c 2f       	mov	r24, r28
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	bf 90       	pop	r11
     824:	08 95       	ret

00000826 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	8b 01       	movw	r16, r22
     832:	ba 01       	movw	r22, r20
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN13Adafruit_FONA8readlineEjb>
     83a:	6a e8       	ldi	r22, 0x8A	; 138
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	84 ea       	ldi	r24, 0xA4	; 164
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     846:	2f 96       	adiw	r28, 0x0f	; 15
     848:	be 01       	movw	r22, r28
     84a:	84 ea       	ldi	r24, 0xA4	; 164
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     852:	b8 01       	movw	r22, r16
     854:	ce 01       	movw	r24, r28
     856:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strcmp_P>
     85a:	21 e0       	ldi	r18, 0x01	; 1
     85c:	89 2b       	or	r24, r25
     85e:	09 f0       	breq	.+2      	; 0x862 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	82 2f       	mov	r24, r18
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	08 95       	ret

0000086e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	8b 01       	movw	r16, r22
     87e:	7a 01       	movw	r14, r20
     880:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN13Adafruit_FONA10flushInputEv>
     884:	6d e7       	ldi	r22, 0x7D	; 125
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	84 ea       	ldi	r24, 0xA4	; 164
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     890:	b8 01       	movw	r22, r16
     892:	84 ea       	ldi	r24, 0xA4	; 164
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
     89a:	fe 01       	movw	r30, r28
     89c:	e3 5e       	subi	r30, 0xE3	; 227
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	b8 01       	movw	r22, r16
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	b7 01       	movw	r22, r14
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN13Adafruit_FONA8readlineEjb>
     8b4:	18 2f       	mov	r17, r24
     8b6:	66 e7       	ldi	r22, 0x76	; 118
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	84 ea       	ldi	r24, 0xA4	; 164
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     8c2:	be 01       	movw	r22, r28
     8c4:	61 5f       	subi	r22, 0xF1	; 241
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	84 ea       	ldi	r24, 0xA4	; 164
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     8d0:	81 2f       	mov	r24, r17
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	08 95       	ret

000008e0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
     8f6:	6b 01       	movw	r12, r22
     8f8:	7a 01       	movw	r14, r20
     8fa:	59 01       	movw	r10, r18
     8fc:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN13Adafruit_FONA10flushInputEv>
     900:	6f e6       	ldi	r22, 0x6F	; 111
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	84 ea       	ldi	r24, 0xA4	; 164
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     90c:	b6 01       	movw	r22, r12
     90e:	84 ea       	ldi	r24, 0xA4	; 164
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     916:	62 e2       	ldi	r22, 0x22	; 34
     918:	84 ea       	ldi	r24, 0xA4	; 164
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN5Print5printEc>
     920:	b7 01       	movw	r22, r14
     922:	84 ea       	ldi	r24, 0xA4	; 164
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     92a:	62 e2       	ldi	r22, 0x22	; 34
     92c:	84 ea       	ldi	r24, 0xA4	; 164
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	0e 94 bc 14 	call	0x2978	; 0x2978 <_ZN5Print7printlnEc>
     934:	8e 01       	movw	r16, r28
     936:	03 5e       	subi	r16, 0xE3	; 227
     938:	1e 4f       	sbci	r17, 0xFE	; 254
     93a:	b6 01       	movw	r22, r12
     93c:	f8 01       	movw	r30, r16
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     946:	62 e2       	ldi	r22, 0x22	; 34
     948:	f8 01       	movw	r30, r16
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN5Print5printEc>
     952:	b7 01       	movw	r22, r14
     954:	f8 01       	movw	r30, r16
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     95e:	62 e2       	ldi	r22, 0x22	; 34
     960:	f8 01       	movw	r30, r16
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 bc 14 	call	0x2978	; 0x2978 <_ZN5Print7printlnEc>
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	b5 01       	movw	r22, r10
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN13Adafruit_FONA8readlineEjb>
     974:	18 2f       	mov	r17, r24
     976:	68 e6       	ldi	r22, 0x68	; 104
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	84 ea       	ldi	r24, 0xA4	; 164
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     982:	be 01       	movw	r22, r28
     984:	61 5f       	subi	r22, 0xF1	; 241
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	84 ea       	ldi	r24, 0xA4	; 164
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     990:	81 2f       	mov	r24, r17
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	08 95       	ret

000009a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	8a 01       	movw	r16, r20
     9b4:	a9 01       	movw	r20, r18
     9b6:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     9ba:	88 23       	and	r24, r24
     9bc:	41 f0       	breq	.+16     	; 0x9ce <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     9be:	b8 01       	movw	r22, r16
     9c0:	ce 01       	movw	r24, r28
     9c2:	0f 96       	adiw	r24, 0x0f	; 15
     9c4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strcmp_P>
     9c8:	21 e0       	ldi	r18, 0x01	; 1
     9ca:	89 2b       	or	r24, r25
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	82 2f       	mov	r24, r18
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <_ZN13Adafruit_FONA5beginEhh>:
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
     9ee:	f6 2e       	mov	r15, r22
     9f0:	e4 2e       	mov	r14, r20
     9f2:	8f e1       	ldi	r24, 0x1F	; 31
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 26 14 	call	0x284c	; 0x284c <_Znwj>
     9fa:	8c 01       	movw	r16, r24
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	4e 2d       	mov	r20, r14
     a00:	6f 2d       	mov	r22, r15
     a02:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN14SoftwareSerialC1Ehhb>
     a06:	7e 01       	movw	r14, r28
     a08:	83 ee       	ldi	r24, 0xE3	; 227
     a0a:	e8 1a       	sub	r14, r24
     a0c:	8e ef       	ldi	r24, 0xFE	; 254
     a0e:	f8 0a       	sbc	r15, r24
     a10:	d7 01       	movw	r26, r14
     a12:	0d 93       	st	X+, r16
     a14:	1c 93       	st	X, r17
     a16:	40 ec       	ldi	r20, 0xC0	; 192
     a18:	52 e1       	ldi	r21, 0x12	; 18
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	c8 01       	movw	r24, r16
     a20:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZN14SoftwareSerial5beginEl>
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	8c 85       	ldd	r24, Y+12	; 0x0c
     a28:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pinMode>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a30:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
     a34:	6a e0       	ldi	r22, 0x0A	; 10
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	8c 85       	ldd	r24, Y+12	; 0x0c
     a44:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
     a48:	64 e6       	ldi	r22, 0x64	; 100
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	8c 85       	ldd	r24, Y+12	; 0x0c
     a58:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
     a5c:	68 ef       	ldi	r22, 0xF8	; 248
     a5e:	71 e0       	ldi	r23, 0x01	; 1
     a60:	84 ea       	ldi	r24, 0xA4	; 164
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a68:	8e e0       	ldi	r24, 0x0E	; 14
     a6a:	c8 2e       	mov	r12, r24
     a6c:	d1 2c       	mov	r13, r1
     a6e:	8e 01       	movw	r16, r28
     a70:	05 5e       	subi	r16, 0xE5	; 229
     a72:	1e 4f       	sbci	r17, 0xFE	; 254
     a74:	f7 01       	movw	r30, r14
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	dc 01       	movw	r26, r24
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	04 80       	ldd	r0, Z+4	; 0x04
     a82:	f5 81       	ldd	r31, Z+5	; 0x05
     a84:	e0 2d       	mov	r30, r0
     a86:	09 95       	icall
     a88:	89 2b       	or	r24, r25
     a8a:	59 f0       	breq	.+22     	; 0xaa2 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     a8c:	f7 01       	movw	r30, r14
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	dc 01       	movw	r26, r24
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	06 80       	ldd	r0, Z+6	; 0x06
     a9a:	f7 81       	ldd	r31, Z+7	; 0x07
     a9c:	e0 2d       	mov	r30, r0
     a9e:	09 95       	icall
     aa0:	e9 cf       	rjmp	.-46     	; 0xa74 <_ZN13Adafruit_FONA5beginEhh+0x98>
     aa2:	f8 01       	movw	r30, r16
     aa4:	40 81       	ld	r20, Z
     aa6:	51 81       	ldd	r21, Z+1	; 0x01
     aa8:	24 ef       	ldi	r18, 0xF4	; 244
     aaa:	31 e0       	ldi	r19, 0x01	; 1
     aac:	65 ef       	ldi	r22, 0xF5	; 245
     aae:	71 e0       	ldi	r23, 0x01	; 1
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ab6:	81 11       	cpse	r24, r1
     ab8:	34 c0       	rjmp	.+104    	; 0xb22 <_ZN13Adafruit_FONA5beginEhh+0x146>
     aba:	d7 01       	movw	r26, r14
     abc:	8d 91       	ld	r24, X+
     abe:	9c 91       	ld	r25, X
     ac0:	dc 01       	movw	r26, r24
     ac2:	ed 91       	ld	r30, X+
     ac4:	fc 91       	ld	r31, X
     ac6:	04 80       	ldd	r0, Z+4	; 0x04
     ac8:	f5 81       	ldd	r31, Z+5	; 0x05
     aca:	e0 2d       	mov	r30, r0
     acc:	09 95       	icall
     ace:	89 2b       	or	r24, r25
     ad0:	59 f0       	breq	.+22     	; 0xae8 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     ad2:	f7 01       	movw	r30, r14
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	dc 01       	movw	r26, r24
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	06 80       	ldd	r0, Z+6	; 0x06
     ae0:	f7 81       	ldd	r31, Z+7	; 0x07
     ae2:	e0 2d       	mov	r30, r0
     ae4:	09 95       	icall
     ae6:	e9 cf       	rjmp	.-46     	; 0xaba <_ZN13Adafruit_FONA5beginEhh+0xde>
     ae8:	24 ef       	ldi	r18, 0xF4	; 244
     aea:	31 e0       	ldi	r19, 0x01	; 1
     aec:	42 ef       	ldi	r20, 0xF2	; 242
     aee:	51 e0       	ldi	r21, 0x01	; 1
     af0:	6f ee       	ldi	r22, 0xEF	; 239
     af2:	71 e0       	ldi	r23, 0x01	; 1
     af4:	ce 01       	movw	r24, r28
     af6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     afa:	81 11       	cpse	r24, r1
     afc:	12 c0       	rjmp	.+36     	; 0xb22 <_ZN13Adafruit_FONA5beginEhh+0x146>
     afe:	64 ef       	ldi	r22, 0xF4	; 244
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     b0a:	b1 e0       	ldi	r27, 0x01	; 1
     b0c:	cb 1a       	sub	r12, r27
     b0e:	d1 08       	sbc	r13, r1
     b10:	09 f0       	breq	.+2      	; 0xb14 <_ZN13Adafruit_FONA5beginEhh+0x138>
     b12:	b0 cf       	rjmp	.-160    	; 0xa74 <_ZN13Adafruit_FONA5beginEhh+0x98>
     b14:	5e c0       	rjmp	.+188    	; 0xbd2 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     b16:	64 e6       	ldi	r22, 0x64	; 100
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     b22:	f8 01       	movw	r30, r16
     b24:	40 81       	ld	r20, Z
     b26:	51 81       	ldd	r21, Z+1	; 0x01
     b28:	24 ef       	ldi	r18, 0xF4	; 244
     b2a:	31 e0       	ldi	r19, 0x01	; 1
     b2c:	62 ec       	ldi	r22, 0xC2	; 194
     b2e:	71 e0       	ldi	r23, 0x01	; 1
     b30:	ce 01       	movw	r24, r28
     b32:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b36:	64 e6       	ldi	r22, 0x64	; 100
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     b42:	d8 01       	movw	r26, r16
     b44:	4d 91       	ld	r20, X+
     b46:	5c 91       	ld	r21, X
     b48:	24 ef       	ldi	r18, 0xF4	; 244
     b4a:	31 e0       	ldi	r19, 0x01	; 1
     b4c:	6d eb       	ldi	r22, 0xBD	; 189
     b4e:	71 e0       	ldi	r23, 0x01	; 1
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b56:	81 11       	cpse	r24, r1
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <_ZN13Adafruit_FONA5beginEhh+0x182>
     b5a:	12 e0       	ldi	r17, 0x02	; 2
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <_ZN13Adafruit_FONA5beginEhh+0x184>
     b5e:	11 e0       	ldi	r17, 0x01	; 1
     b60:	64 e6       	ldi	r22, 0x64	; 100
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN13Adafruit_FONA10flushInputEv>
     b72:	66 eb       	ldi	r22, 0xB6	; 182
     b74:	71 e0       	ldi	r23, 0x01	; 1
     b76:	84 ea       	ldi	r24, 0xA4	; 164
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     b7e:	66 e1       	ldi	r22, 0x16	; 22
     b80:	71 e0       	ldi	r23, 0x01	; 1
     b82:	84 ea       	ldi	r24, 0xA4	; 164
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     b8a:	66 e1       	ldi	r22, 0x16	; 22
     b8c:	71 e0       	ldi	r23, 0x01	; 1
     b8e:	f7 01       	movw	r30, r14
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	64 ef       	ldi	r22, 0xF4	; 244
     b9c:	71 e0       	ldi	r23, 0x01	; 1
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN13Adafruit_FONA8readlineEjb>
     ba4:	6f ea       	ldi	r22, 0xAF	; 175
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	84 ea       	ldi	r24, 0xA4	; 164
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     bb0:	2f 96       	adiw	r28, 0x0f	; 15
     bb2:	be 01       	movw	r22, r28
     bb4:	84 ea       	ldi	r24, 0xA4	; 164
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     bbc:	64 ea       	ldi	r22, 0xA4	; 164
     bbe:	71 e0       	ldi	r23, 0x01	; 1
     bc0:	ce 01       	movw	r24, r28
     bc2:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <strstr_P>
     bc6:	89 2b       	or	r24, r25
     bc8:	11 f0       	breq	.+4      	; 0xbce <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     bca:	81 2f       	mov	r24, r17
     bcc:	35 c0       	rjmp	.+106    	; 0xc38 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	33 c0       	rjmp	.+102    	; 0xc38 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     bd2:	d8 01       	movw	r26, r16
     bd4:	4d 91       	ld	r20, X+
     bd6:	5c 91       	ld	r21, X
     bd8:	24 ef       	ldi	r18, 0xF4	; 244
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	6c ee       	ldi	r22, 0xEC	; 236
     bde:	71 e0       	ldi	r23, 0x01	; 1
     be0:	ce 01       	movw	r24, r28
     be2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     be6:	64 e6       	ldi	r22, 0x64	; 100
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     bf2:	f8 01       	movw	r30, r16
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	24 ef       	ldi	r18, 0xF4	; 244
     bfa:	31 e0       	ldi	r19, 0x01	; 1
     bfc:	69 ee       	ldi	r22, 0xE9	; 233
     bfe:	71 e0       	ldi	r23, 0x01	; 1
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c06:	64 e6       	ldi	r22, 0x64	; 100
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
     c12:	d8 01       	movw	r26, r16
     c14:	4d 91       	ld	r20, X+
     c16:	5c 91       	ld	r21, X
     c18:	24 ef       	ldi	r18, 0xF4	; 244
     c1a:	31 e0       	ldi	r19, 0x01	; 1
     c1c:	66 ee       	ldi	r22, 0xE6	; 230
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	ce 01       	movw	r24, r28
     c22:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c26:	81 11       	cpse	r24, r1
     c28:	76 cf       	rjmp	.-276    	; 0xb16 <_ZN13Adafruit_FONA5beginEhh+0x13a>
     c2a:	67 ec       	ldi	r22, 0xC7	; 199
     c2c:	71 e0       	ldi	r23, 0x01	; 1
     c2e:	84 ea       	ldi	r24, 0xA4	; 164
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	08 95       	ret

00000c4a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	79 01       	movw	r14, r18
     c5a:	98 01       	movw	r18, r16
     c5c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     c60:	b7 01       	movw	r22, r14
     c62:	ce 01       	movw	r24, r28
     c64:	0f 96       	adiw	r24, 0x0f	; 15
     c66:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strcmp_P>
     c6a:	21 e0       	ldi	r18, 0x01	; 1
     c6c:	89 2b       	or	r24, r25
     c6e:	09 f0       	breq	.+2      	; 0xc72 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	82 2f       	mov	r24, r18
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <_ZN13Adafruit_FONA10enableGPRSEb>:
     c82:	7f 92       	push	r7
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ec 01       	movw	r28, r24
     c9e:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <__data_end>
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 0f       	add	r24, r25
     ca6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     caa:	91 11       	cpse	r25, r1
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <_ZN13Adafruit_FONA10enableGPRSEb+0x30>
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	57 c1       	rjmp	.+686    	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     cb2:	28 ee       	ldi	r18, 0xE8	; 232
     cb4:	3d ef       	ldi	r19, 0xFD	; 253
     cb6:	66 23       	and	r22, r22
     cb8:	09 f4       	brne	.+2      	; 0xcbc <_ZN13Adafruit_FONA10enableGPRSEb+0x3a>
     cba:	1f c1       	rjmp	.+574    	; 0xefa <_ZN13Adafruit_FONA10enableGPRSEb+0x278>
     cbc:	4e e5       	ldi	r20, 0x5E	; 94
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	63 e5       	ldi	r22, 0x53	; 83
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	ce 01       	movw	r24, r28
     cc6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cca:	81 11       	cpse	r24, r1
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <_ZN13Adafruit_FONA10enableGPRSEb+0x52>
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	78 2e       	mov	r7, r24
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <_ZN13Adafruit_FONA10enableGPRSEb+0x56>
     cd4:	77 24       	eor	r7, r7
     cd6:	73 94       	inc	r7
     cd8:	7e 01       	movw	r14, r28
     cda:	85 ee       	ldi	r24, 0xE5	; 229
     cdc:	e8 1a       	sub	r14, r24
     cde:	8e ef       	ldi	r24, 0xFE	; 254
     ce0:	f8 0a       	sbc	r15, r24
     ce2:	f7 01       	movw	r30, r14
     ce4:	40 81       	ld	r20, Z
     ce6:	51 81       	ldd	r21, Z+1	; 0x01
     ce8:	20 e1       	ldi	r18, 0x10	; 16
     cea:	37 e2       	ldi	r19, 0x27	; 39
     cec:	68 e4       	ldi	r22, 0x48	; 72
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	ce 01       	movw	r24, r28
     cf2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cf6:	88 23       	and	r24, r24
     cf8:	d1 f2       	breq	.-76     	; 0xcae <_ZN13Adafruit_FONA10enableGPRSEb+0x2c>
     cfa:	f7 01       	movw	r30, r14
     cfc:	40 81       	ld	r20, Z
     cfe:	51 81       	ldd	r21, Z+1	; 0x01
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	37 e2       	ldi	r19, 0x27	; 39
     d04:	6a e2       	ldi	r22, 0x2A	; 42
     d06:	71 e0       	ldi	r23, 0x01	; 1
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <_ZN13Adafruit_FONA10enableGPRSEb+0x92>
     d12:	19 c1       	rjmp	.+562    	; 0xf46 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c4>
     d14:	4e 01       	movw	r8, r28
     d16:	f2 ef       	ldi	r31, 0xF2	; 242
     d18:	8f 1a       	sub	r8, r31
     d1a:	fe ef       	ldi	r31, 0xFE	; 254
     d1c:	9f 0a       	sbc	r9, r31
     d1e:	f4 01       	movw	r30, r8
     d20:	40 81       	ld	r20, Z
     d22:	51 81       	ldd	r21, Z+1	; 0x01
     d24:	41 15       	cp	r20, r1
     d26:	51 05       	cpc	r21, r1
     d28:	71 f4       	brne	.+28     	; 0xd46 <_ZN13Adafruit_FONA10enableGPRSEb+0xc4>
     d2a:	f7 01       	movw	r30, r14
     d2c:	40 81       	ld	r20, Z
     d2e:	51 81       	ldd	r21, Z+1	; 0x01
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	65 ec       	ldi	r22, 0xC5	; 197
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	ce 01       	movw	r24, r28
     d3a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d3e:	81 11       	cpse	r24, r1
     d40:	ce c0       	rjmp	.+412    	; 0xede <_ZN13Adafruit_FONA10enableGPRSEb+0x25c>
     d42:	89 e0       	ldi	r24, 0x09	; 9
     d44:	0d c1       	rjmp	.+538    	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     d46:	f7 01       	movw	r30, r14
     d48:	20 81       	ld	r18, Z
     d4a:	31 81       	ldd	r19, Z+1	; 0x01
     d4c:	00 e1       	ldi	r16, 0x10	; 16
     d4e:	17 e2       	ldi	r17, 0x27	; 39
     d50:	66 e1       	ldi	r22, 0x16	; 22
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <_ZN13Adafruit_FONA10enableGPRSEb+0xde>
     d5e:	f5 c0       	rjmp	.+490    	; 0xf4a <_ZN13Adafruit_FONA10enableGPRSEb+0x2c8>
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN13Adafruit_FONA10flushInputEv>
     d66:	8e 01       	movw	r16, r28
     d68:	03 5e       	subi	r16, 0xE3	; 227
     d6a:	1e 4f       	sbci	r17, 0xFE	; 254
     d6c:	6c e0       	ldi	r22, 0x0C	; 12
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	f8 01       	movw	r30, r16
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     d7a:	f4 01       	movw	r30, r8
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	f8 01       	movw	r30, r16
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     d8a:	5e 01       	movw	r10, r28
     d8c:	f0 ef       	ldi	r31, 0xF0	; 240
     d8e:	af 1a       	sub	r10, r31
     d90:	fe ef       	ldi	r31, 0xFE	; 254
     d92:	bf 0a       	sbc	r11, r31
     d94:	f5 01       	movw	r30, r10
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	89 2b       	or	r24, r25
     d9c:	79 f0       	breq	.+30     	; 0xdbc <_ZN13Adafruit_FONA10enableGPRSEb+0x13a>
     d9e:	62 e3       	ldi	r22, 0x32	; 50
     da0:	71 e0       	ldi	r23, 0x01	; 1
     da2:	f8 01       	movw	r30, r16
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
     dac:	f5 01       	movw	r30, r10
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	f8 01       	movw	r30, r16
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     dbc:	6e 01       	movw	r12, r28
     dbe:	fe ee       	ldi	r31, 0xEE	; 238
     dc0:	cf 1a       	sub	r12, r31
     dc2:	fe ef       	ldi	r31, 0xFE	; 254
     dc4:	df 0a       	sbc	r13, r31
     dc6:	f6 01       	movw	r30, r12
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	89 2b       	or	r24, r25
     dce:	79 f0       	breq	.+30     	; 0xdee <_ZN13Adafruit_FONA10enableGPRSEb+0x16c>
     dd0:	62 e3       	ldi	r22, 0x32	; 50
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	f8 01       	movw	r30, r16
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
     dde:	f6 01       	movw	r30, r12
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     dee:	64 e3       	ldi	r22, 0x34	; 52
     df0:	71 e0       	ldi	r23, 0x01	; 1
     df2:	f8 01       	movw	r30, r16
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     dfc:	65 e0       	ldi	r22, 0x05	; 5
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	84 ea       	ldi	r24, 0xA4	; 164
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     e08:	6b ef       	ldi	r22, 0xFB	; 251
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	84 ea       	ldi	r24, 0xA4	; 164
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     e14:	f4 01       	movw	r30, r8
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01
     e1a:	84 ea       	ldi	r24, 0xA4	; 164
     e1c:	93 e0       	ldi	r25, 0x03	; 3
     e1e:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     e22:	f5 01       	movw	r30, r10
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	89 2b       	or	r24, r25
     e2a:	69 f0       	breq	.+26     	; 0xe46 <_ZN13Adafruit_FONA10enableGPRSEb+0x1c4>
     e2c:	62 e3       	ldi	r22, 0x32	; 50
     e2e:	71 e0       	ldi	r23, 0x01	; 1
     e30:	84 ea       	ldi	r24, 0xA4	; 164
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
     e38:	f5 01       	movw	r30, r10
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	84 ea       	ldi	r24, 0xA4	; 164
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     e46:	f6 01       	movw	r30, r12
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	89 2b       	or	r24, r25
     e4e:	69 f0       	breq	.+26     	; 0xe6a <_ZN13Adafruit_FONA10enableGPRSEb+0x1e8>
     e50:	62 e3       	ldi	r22, 0x32	; 50
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	84 ea       	ldi	r24, 0xA4	; 164
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
     e5c:	f6 01       	movw	r30, r12
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	84 ea       	ldi	r24, 0xA4	; 164
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
     e6a:	64 e3       	ldi	r22, 0x34	; 52
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	84 ea       	ldi	r24, 0xA4	; 164
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
     e76:	f7 01       	movw	r30, r14
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	40 e1       	ldi	r20, 0x10	; 16
     e7e:	57 e2       	ldi	r21, 0x27	; 39
     e80:	ce 01       	movw	r24, r28
     e82:	0e 94 13 04 	call	0x826	; 0x826 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     e86:	88 23       	and	r24, r24
     e88:	09 f4       	brne	.+2      	; 0xe8c <_ZN13Adafruit_FONA10enableGPRSEb+0x20a>
     e8a:	61 c0       	rjmp	.+194    	; 0xf4e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e8c:	f5 01       	movw	r30, r10
     e8e:	40 81       	ld	r20, Z
     e90:	51 81       	ldd	r21, Z+1	; 0x01
     e92:	41 15       	cp	r20, r1
     e94:	51 05       	cpc	r21, r1
     e96:	39 f4       	brne	.+14     	; 0xea6 <_ZN13Adafruit_FONA10enableGPRSEb+0x224>
     e98:	f6 01       	movw	r30, r12
     e9a:	40 81       	ld	r20, Z
     e9c:	51 81       	ldd	r21, Z+1	; 0x01
     e9e:	41 15       	cp	r20, r1
     ea0:	51 05       	cpc	r21, r1
     ea2:	79 f4       	brne	.+30     	; 0xec2 <_ZN13Adafruit_FONA10enableGPRSEb+0x240>
     ea4:	42 cf       	rjmp	.-380    	; 0xd2a <_ZN13Adafruit_FONA10enableGPRSEb+0xa8>
     ea6:	f7 01       	movw	r30, r14
     ea8:	20 81       	ld	r18, Z
     eaa:	31 81       	ldd	r19, Z+1	; 0x01
     eac:	00 e1       	ldi	r16, 0x10	; 16
     eae:	17 e2       	ldi	r17, 0x27	; 39
     eb0:	66 ee       	ldi	r22, 0xE6	; 230
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	ce 01       	movw	r24, r28
     eb6:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     eba:	81 11       	cpse	r24, r1
     ebc:	ed cf       	rjmp	.-38     	; 0xe98 <_ZN13Adafruit_FONA10enableGPRSEb+0x216>
     ebe:	87 e0       	ldi	r24, 0x07	; 7
     ec0:	4f c0       	rjmp	.+158    	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     ec2:	f7 01       	movw	r30, r14
     ec4:	20 81       	ld	r18, Z
     ec6:	31 81       	ldd	r19, Z+1	; 0x01
     ec8:	00 e1       	ldi	r16, 0x10	; 16
     eca:	17 e2       	ldi	r17, 0x27	; 39
     ecc:	62 ed       	ldi	r22, 0xD2	; 210
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     ed6:	81 11       	cpse	r24, r1
     ed8:	28 cf       	rjmp	.-432    	; 0xd2a <_ZN13Adafruit_FONA10enableGPRSEb+0xa8>
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	41 c0       	rjmp	.+130    	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     ede:	f7 01       	movw	r30, r14
     ee0:	40 81       	ld	r20, Z
     ee2:	51 81       	ldd	r21, Z+1	; 0x01
     ee4:	2f ef       	ldi	r18, 0xFF	; 255
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	6c eb       	ldi	r22, 0xBC	; 188
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	ce 01       	movw	r24, r28
     eee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ef2:	88 23       	and	r24, r24
     ef4:	71 f1       	breq	.+92     	; 0xf52 <_ZN13Adafruit_FONA10enableGPRSEb+0x2d0>
     ef6:	87 2d       	mov	r24, r7
     ef8:	33 c0       	rjmp	.+102    	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     efa:	44 eb       	ldi	r20, 0xB4	; 180
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	69 ea       	ldi	r22, 0xA9	; 169
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	ce 01       	movw	r24, r28
     f04:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f08:	88 23       	and	r24, r24
     f0a:	29 f1       	breq	.+74     	; 0xf56 <_ZN13Adafruit_FONA10enableGPRSEb+0x2d4>
     f0c:	8e 01       	movw	r16, r28
     f0e:	05 5e       	subi	r16, 0xE5	; 229
     f10:	1e 4f       	sbci	r17, 0xFE	; 254
     f12:	f8 01       	movw	r30, r16
     f14:	40 81       	ld	r20, Z
     f16:	51 81       	ldd	r21, Z+1	; 0x01
     f18:	20 e1       	ldi	r18, 0x10	; 16
     f1a:	37 e2       	ldi	r19, 0x27	; 39
     f1c:	6c e9       	ldi	r22, 0x9C	; 156
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	ce 01       	movw	r24, r28
     f22:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f26:	88 23       	and	r24, r24
     f28:	c1 f0       	breq	.+48     	; 0xf5a <_ZN13Adafruit_FONA10enableGPRSEb+0x2d8>
     f2a:	f8 01       	movw	r30, r16
     f2c:	40 81       	ld	r20, Z
     f2e:	51 81       	ldd	r21, Z+1	; 0x01
     f30:	20 e1       	ldi	r18, 0x10	; 16
     f32:	37 e2       	ldi	r19, 0x27	; 39
     f34:	61 e9       	ldi	r22, 0x91	; 145
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	ce 01       	movw	r24, r28
     f3a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f3e:	88 23       	and	r24, r24
     f40:	71 f0       	breq	.+28     	; 0xf5e <_ZN13Adafruit_FONA10enableGPRSEb+0x2dc>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0d c0       	rjmp	.+26     	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f4a:	85 e0       	ldi	r24, 0x05	; 5
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f56:	8b e0       	ldi	r24, 0x0B	; 11
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f5a:	8c e0       	ldi	r24, 0x0C	; 12
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb+0x2de>
     f5e:	8d e0       	ldi	r24, 0x0D	; 13
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	9f 90       	pop	r9
     f76:	8f 90       	pop	r8
     f78:	7f 90       	pop	r7
     f7a:	08 95       	ret

00000f7c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	5b 01       	movw	r10, r22
     f90:	6a 01       	movw	r12, r20
     f92:	e2 2e       	mov	r14, r18
     f94:	0f 96       	adiw	r24, 0x0f	; 15
     f96:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <strstr_P>
     f9a:	ec 01       	movw	r28, r24
     f9c:	89 2b       	or	r24, r25
     f9e:	c1 f0       	breq	.+48     	; 0xfd0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     fa0:	c5 01       	movw	r24, r10
     fa2:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__strlen_P>
     fa6:	8c 0f       	add	r24, r28
     fa8:	9d 1f       	adc	r25, r29
     faa:	c0 e0       	ldi	r28, 0x00	; 0
     fac:	f1 2c       	mov	r15, r1
     fae:	c0 17       	cp	r28, r16
     fb0:	41 f0       	breq	.+16     	; 0xfc2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
     fb2:	b7 01       	movw	r22, r14
     fb4:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <strchr>
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	51 f0       	breq	.+20     	; 0xfd0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	cf 5f       	subi	r28, 0xFF	; 255
     fc0:	f6 cf       	rjmp	.-20     	; 0xfae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
     fc2:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <atoi>
     fc6:	f6 01       	movw	r30, r12
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	cf 90       	pop	r12
     fe0:	bf 90       	pop	r11
     fe2:	af 90       	pop	r10
     fe4:	08 95       	ret

00000fe6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
     fe6:	af 92       	push	r10
     fe8:	bf 92       	push	r11
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
     ffa:	6a 01       	movw	r12, r20
     ffc:	59 01       	movw	r10, r18
     ffe:	10 2f       	mov	r17, r16
    1000:	0e 2d       	mov	r16, r14
    1002:	44 ef       	ldi	r20, 0xF4	; 244
    1004:	51 e0       	ldi	r21, 0x01	; 1
    1006:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    100a:	21 2f       	mov	r18, r17
    100c:	a5 01       	movw	r20, r10
    100e:	b6 01       	movw	r22, r12
    1010:	ce 01       	movw	r24, r28
    1012:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1016:	18 2f       	mov	r17, r24
    1018:	88 23       	and	r24, r24
    101a:	31 f0       	breq	.+12     	; 0x1028 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	64 ef       	ldi	r22, 0xF4	; 244
    1020:	71 e0       	ldi	r23, 0x01	; 1
    1022:	ce 01       	movw	r24, r28
    1024:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN13Adafruit_FONA8readlineEjb>
    1028:	81 2f       	mov	r24, r17
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
    103c:	08 95       	ret

0000103e <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	28 97       	sbiw	r28, 0x08	; 8
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1060:	18 86       	std	Y+8, r1	; 0x08
    1062:	1f 82       	std	Y+7, r1	; 0x07
    1064:	1e 82       	std	Y+6, r1	; 0x06
    1066:	1d 82       	std	Y+5, r1	; 0x05
    1068:	1c 82       	std	Y+4, r1	; 0x04
    106a:	1b 82       	std	Y+3, r1	; 0x03
    106c:	1a 82       	std	Y+2, r1	; 0x02
    106e:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1070:	e1 2c       	mov	r14, r1
    1072:	0c e2       	ldi	r16, 0x2C	; 44
    1074:	9e 01       	movw	r18, r28
    1076:	29 5f       	subi	r18, 0xF9	; 249
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	4d e9       	ldi	r20, 0x9D	; 157
    107c:	51 e0       	ldi	r21, 0x01	; 1
    107e:	66 e9       	ldi	r22, 0x96	; 150
    1080:	71 e0       	ldi	r23, 0x01	; 1
    1082:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1086:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1088:	ee 24       	eor	r14, r14
    108a:	e3 94       	inc	r14
    108c:	9e 01       	movw	r18, r28
    108e:	2b 5f       	subi	r18, 0xFB	; 251
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	4f e8       	ldi	r20, 0x8F	; 143
    1094:	51 e0       	ldi	r21, 0x01	; 1
    1096:	68 e8       	ldi	r22, 0x88	; 136
    1098:	71 e0       	ldi	r23, 0x01	; 1
    109a:	c6 01       	movw	r24, r12
    109c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    10a0:	88 23       	and	r24, r24
    10a2:	19 f0       	breq	.+6      	; 0x10aa <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	f8 26       	eor	r15, r24
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    10aa:	ff 24       	eor	r15, r15
    10ac:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    10ae:	e1 2c       	mov	r14, r1
    10b0:	0c e2       	ldi	r16, 0x2C	; 44
    10b2:	9e 01       	movw	r18, r28
    10b4:	2d 5f       	subi	r18, 0xFD	; 253
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	51 e0       	ldi	r21, 0x01	; 1
    10bc:	67 e7       	ldi	r22, 0x77	; 119
    10be:	71 e0       	ldi	r23, 0x01	; 1
    10c0:	c6 01       	movw	r24, r12
    10c2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    10c6:	88 23       	and	r24, r24
    10c8:	11 f0       	breq	.+4      	; 0x10ce <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    10ca:	1b 81       	ldd	r17, Y+3	; 0x03
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    10ce:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    10d0:	ee 24       	eor	r14, r14
    10d2:	e3 94       	inc	r14
    10d4:	0c e2       	ldi	r16, 0x2C	; 44
    10d6:	9e 01       	movw	r18, r28
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	4f e6       	ldi	r20, 0x6F	; 111
    10de:	51 e0       	ldi	r21, 0x01	; 1
    10e0:	66 e6       	ldi	r22, 0x66	; 102
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	c6 01       	movw	r24, r12
    10e6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    10ea:	81 11       	cpse	r24, r1
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    10ee:	91 2f       	mov	r25, r17
    10f0:	90 62       	ori	r25, 0x20	; 32
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    10f4:	99 81       	ldd	r25, Y+1	; 0x01
    10f6:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    10f8:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
}
    10fc:	8f 2d       	mov	r24, r15
    10fe:	28 96       	adiw	r28, 0x08	; 8
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <_ZN10GsmPayloadC1Ev>:
}

boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
    111c:	fc 01       	movw	r30, r24
    111e:	10 82       	st	Z, r1
    1120:	12 82       	std	Z+2, r1	; 0x02
    1122:	11 82       	std	Z+1, r1	; 0x01
    1124:	13 82       	std	Z+3, r1	; 0x03
    1126:	14 82       	std	Z+4, r1	; 0x04
    1128:	15 82       	std	Z+5, r1	; 0x05
    112a:	16 82       	std	Z+6, r1	; 0x06
    112c:	17 82       	std	Z+7, r1	; 0x07
    112e:	12 86       	std	Z+10, r1	; 0x0a
    1130:	11 86       	std	Z+9, r1	; 0x09
    1132:	14 86       	std	Z+12, r1	; 0x0c
    1134:	13 86       	std	Z+11, r1	; 0x0b
    1136:	08 95       	ret

00001138 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	82 9f       	mul	r24, r18
    113c:	c0 01       	movw	r24, r0
    113e:	11 24       	eor	r1, r1
    1140:	09 96       	adiw	r24, 0x09	; 9
    1142:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_ZN7Helpers14base64_enc_lenEi>

00001146 <_ZN10GsmPayload16createRawPayloadEPh>:
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
    114c:	cb 01       	movw	r24, r22
    114e:	29 e0       	ldi	r18, 0x09	; 9
    1150:	fe 01       	movw	r30, r28
    1152:	db 01       	movw	r26, r22
    1154:	01 90       	ld	r0, Z+
    1156:	0d 92       	st	X+, r0
    1158:	2a 95       	dec	r18
    115a:	e1 f7       	brne	.-8      	; 0x1154 <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    115c:	4b 81       	ldd	r20, Y+3	; 0x03
    115e:	2a e0       	ldi	r18, 0x0A	; 10
    1160:	42 9f       	mul	r20, r18
    1162:	a0 01       	movw	r20, r0
    1164:	11 24       	eor	r1, r1
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	09 96       	adiw	r24, 0x09	; 9
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <memcpy>

00001174 <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	6b 01       	movw	r12, r22
    118e:	ed b6       	in	r14, 0x3d	; 61
    1190:	fe b6       	in	r15, 0x3e	; 62
    1192:	fc 01       	movw	r30, r24
    1194:	03 81       	ldd	r16, Z+3	; 0x03
    1196:	fa e0       	ldi	r31, 0x0A	; 10
    1198:	0f 9f       	mul	r16, r31
    119a:	80 01       	movw	r16, r0
    119c:	11 24       	eor	r1, r1
    119e:	07 5f       	subi	r16, 0xF7	; 247
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
    11a2:	2d b7       	in	r18, 0x3d	; 61
    11a4:	3e b7       	in	r19, 0x3e	; 62
    11a6:	20 1b       	sub	r18, r16
    11a8:	31 0b       	sbc	r19, r17
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	3e bf       	out	0x3e, r19	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	2d bf       	out	0x3d, r18	; 61
    11b4:	ed b7       	in	r30, 0x3d	; 61
    11b6:	fe b7       	in	r31, 0x3e	; 62
    11b8:	31 96       	adiw	r30, 0x01	; 1
    11ba:	5f 01       	movw	r10, r30
    11bc:	bf 01       	movw	r22, r30
    11be:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN10GsmPayload16createRawPayloadEPh>
    11c2:	a8 01       	movw	r20, r16
    11c4:	b5 01       	movw	r22, r10
    11c6:	c6 01       	movw	r24, r12
    11c8:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN7Helpers13base64_encodeEPcPhi>
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	fe be       	out	0x3e, r15	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	ed be       	out	0x3d, r14	; 61
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	08 95       	ret

000011ec <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    11ec:	fc 01       	movw	r30, r24
    11ee:	74 87       	std	Z+12, r23	; 0x0c
    11f0:	63 87       	std	Z+11, r22	; 0x0b
    11f2:	43 83       	std	Z+3, r20	; 0x03
    11f4:	08 95       	ret

000011f6 <_ZN10GsmPayload11setModuleIdEh>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	60 83       	st	Z, r22
    11fa:	08 95       	ret

000011fc <_ZN10GsmPayload13setBootNumberEj>:
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
    11fc:	fc 01       	movw	r30, r24
    11fe:	72 83       	std	Z+2, r23	; 0x02
    1200:	61 83       	std	Z+1, r22	; 0x01
    1202:	08 95       	ret

00001204 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	ec 01       	movw	r28, r24
    120a:	6e e9       	ldi	r22, 0x9E	; 158
    120c:	72 e0       	ldi	r23, 0x02	; 2
    120e:	84 ea       	ldi	r24, 0xA4	; 164
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1216:	4a e0       	ldi	r20, 0x0A	; 10
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	68 81       	ld	r22, Y
    121c:	84 ea       	ldi	r24, 0xA4	; 164
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN5Print5printEhi>
    1224:	6a e9       	ldi	r22, 0x9A	; 154
    1226:	72 e0       	ldi	r23, 0x02	; 2
    1228:	84 ea       	ldi	r24, 0xA4	; 164
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1230:	65 e9       	ldi	r22, 0x95	; 149
    1232:	72 e0       	ldi	r23, 0x02	; 2
    1234:	84 ea       	ldi	r24, 0xA4	; 164
    1236:	93 e0       	ldi	r25, 0x03	; 3
    1238:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    123c:	4a e0       	ldi	r20, 0x0A	; 10
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	69 81       	ldd	r22, Y+1	; 0x01
    1242:	84 ea       	ldi	r24, 0xA4	; 164
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN5Print5printEhi>
    124a:	61 e9       	ldi	r22, 0x91	; 145
    124c:	72 e0       	ldi	r23, 0x02	; 2
    124e:	84 ea       	ldi	r24, 0xA4	; 164
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1256:	6c e7       	ldi	r22, 0x7C	; 124
    1258:	72 e0       	ldi	r23, 0x02	; 2
    125a:	84 ea       	ldi	r24, 0xA4	; 164
    125c:	93 e0       	ldi	r25, 0x03	; 3
    125e:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1262:	6b 81       	ldd	r22, Y+3	; 0x03
    1264:	63 70       	andi	r22, 0x03	; 3
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	4a e0       	ldi	r20, 0x0A	; 10
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	84 ea       	ldi	r24, 0xA4	; 164
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN5Print5printEii>
    1274:	62 e7       	ldi	r22, 0x72	; 114
    1276:	72 e0       	ldi	r23, 0x02	; 2
    1278:	84 ea       	ldi	r24, 0xA4	; 164
    127a:	93 e0       	ldi	r25, 0x03	; 3
    127c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1280:	6b 81       	ldd	r22, Y+3	; 0x03
    1282:	6c 71       	andi	r22, 0x1C	; 28
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	75 95       	asr	r23
    1288:	67 95       	ror	r22
    128a:	75 95       	asr	r23
    128c:	67 95       	ror	r22
    128e:	4a e0       	ldi	r20, 0x0A	; 10
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	84 ea       	ldi	r24, 0xA4	; 164
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN5Print5printEii>
    129a:	69 e6       	ldi	r22, 0x69	; 105
    129c:	72 e0       	ldi	r23, 0x02	; 2
    129e:	84 ea       	ldi	r24, 0xA4	; 164
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    12a6:	6b 81       	ldd	r22, Y+3	; 0x03
    12a8:	65 fb       	bst	r22, 5
    12aa:	66 27       	eor	r22, r22
    12ac:	60 f9       	bld	r22, 0
    12ae:	4a e0       	ldi	r20, 0x0A	; 10
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	84 ea       	ldi	r24, 0xA4	; 164
    12b6:	93 e0       	ldi	r25, 0x03	; 3
    12b8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN5Print5printEii>
    12bc:	65 e6       	ldi	r22, 0x65	; 101
    12be:	72 e0       	ldi	r23, 0x02	; 2
    12c0:	84 ea       	ldi	r24, 0xA4	; 164
    12c2:	93 e0       	ldi	r25, 0x03	; 3
    12c4:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    12c8:	68 e5       	ldi	r22, 0x58	; 88
    12ca:	72 e0       	ldi	r23, 0x02	; 2
    12cc:	84 ea       	ldi	r24, 0xA4	; 164
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    12d4:	4a e0       	ldi	r20, 0x0A	; 10
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	6a 81       	ldd	r22, Y+2	; 0x02
    12da:	84 ea       	ldi	r24, 0xA4	; 164
    12dc:	93 e0       	ldi	r25, 0x03	; 3
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <_ZN5Print7printlnEhi>

000012e6 <_ZN7Helpers15printSensorDataEP10SensorData>:
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
    12ec:	60 e5       	ldi	r22, 0x50	; 80
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	84 ea       	ldi	r24, 0xA4	; 164
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    12f8:	69 81       	ldd	r22, Y+1	; 0x01
    12fa:	7a 81       	ldd	r23, Y+2	; 0x02
    12fc:	4a e0       	ldi	r20, 0x0A	; 10
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	84 ea       	ldi	r24, 0xA4	; 164
    1302:	93 e0       	ldi	r25, 0x03	; 3
    1304:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print5printEji>
    1308:	6c e4       	ldi	r22, 0x4C	; 76
    130a:	72 e0       	ldi	r23, 0x02	; 2
    130c:	84 ea       	ldi	r24, 0xA4	; 164
    130e:	93 e0       	ldi	r25, 0x03	; 3
    1310:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1314:	66 e4       	ldi	r22, 0x46	; 70
    1316:	72 e0       	ldi	r23, 0x02	; 2
    1318:	84 ea       	ldi	r24, 0xA4	; 164
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1320:	6b 81       	ldd	r22, Y+3	; 0x03
    1322:	7c 81       	ldd	r23, Y+4	; 0x04
    1324:	4a e0       	ldi	r20, 0x0A	; 10
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	84 ea       	ldi	r24, 0xA4	; 164
    132a:	93 e0       	ldi	r25, 0x03	; 3
    132c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print5printEji>
    1330:	62 e4       	ldi	r22, 0x42	; 66
    1332:	72 e0       	ldi	r23, 0x02	; 2
    1334:	84 ea       	ldi	r24, 0xA4	; 164
    1336:	93 e0       	ldi	r25, 0x03	; 3
    1338:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    133c:	69 e3       	ldi	r22, 0x39	; 57
    133e:	72 e0       	ldi	r23, 0x02	; 2
    1340:	84 ea       	ldi	r24, 0xA4	; 164
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1348:	6d 81       	ldd	r22, Y+5	; 0x05
    134a:	7e 81       	ldd	r23, Y+6	; 0x06
    134c:	4a e0       	ldi	r20, 0x0A	; 10
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	84 ea       	ldi	r24, 0xA4	; 164
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print5printEji>
    1358:	65 e3       	ldi	r22, 0x35	; 53
    135a:	72 e0       	ldi	r23, 0x02	; 2
    135c:	84 ea       	ldi	r24, 0xA4	; 164
    135e:	93 e0       	ldi	r25, 0x03	; 3
    1360:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1364:	6f e2       	ldi	r22, 0x2F	; 47
    1366:	72 e0       	ldi	r23, 0x02	; 2
    1368:	84 ea       	ldi	r24, 0xA4	; 164
    136a:	93 e0       	ldi	r25, 0x03	; 3
    136c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1370:	6f 81       	ldd	r22, Y+7	; 0x07
    1372:	78 85       	ldd	r23, Y+8	; 0x08
    1374:	4a e0       	ldi	r20, 0x0A	; 10
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	84 ea       	ldi	r24, 0xA4	; 164
    137a:	93 e0       	ldi	r25, 0x03	; 3
    137c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN5Print5printEji>
    1380:	6b e2       	ldi	r22, 0x2B	; 43
    1382:	72 e0       	ldi	r23, 0x02	; 2
    1384:	84 ea       	ldi	r24, 0xA4	; 164
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    138c:	64 e2       	ldi	r22, 0x24	; 36
    138e:	72 e0       	ldi	r23, 0x02	; 2
    1390:	84 ea       	ldi	r24, 0xA4	; 164
    1392:	93 e0       	ldi	r25, 0x03	; 3
    1394:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1398:	4a e0       	ldi	r20, 0x0A	; 10
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	69 85       	ldd	r22, Y+9	; 0x09
    139e:	84 ea       	ldi	r24, 0xA4	; 164
    13a0:	93 e0       	ldi	r25, 0x03	; 3
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <_ZN5Print7printlnEhi>

000013aa <_ZN7Helpers14base64_enc_lenEi>:
    13aa:	9c 01       	movw	r18, r24
    13ac:	2e 5f       	subi	r18, 0xFE	; 254
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	e3 e0       	ldi	r30, 0x03	; 3
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	c9 01       	movw	r24, r18
    13b6:	bf 01       	movw	r22, r30
    13b8:	0e 94 a7 1a 	call	0x354e	; 0x354e <__divmodhi4>
    13bc:	a9 01       	movw	r20, r18
    13be:	48 1b       	sub	r20, r24
    13c0:	59 0b       	sbc	r21, r25
    13c2:	ca 01       	movw	r24, r20
    13c4:	bf 01       	movw	r22, r30
    13c6:	0e 94 a7 1a 	call	0x354e	; 0x354e <__divmodhi4>
    13ca:	cb 01       	movw	r24, r22
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	08 95       	ret

000013d8 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    13d8:	dc 01       	movw	r26, r24
    13da:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    13dc:	80 81       	ld	r24, Z
    13de:	86 95       	lsr	r24
    13e0:	86 95       	lsr	r24
    13e2:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    13e4:	80 81       	ld	r24, Z
    13e6:	83 70       	andi	r24, 0x03	; 3
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	92 95       	swap	r25
    13ec:	9f 70       	andi	r25, 0x0F	; 15
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	82 9f       	mul	r24, r18
    13f2:	90 0d       	add	r25, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	9c 93       	st	X, r25
    13fa:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	9f 70       	andi	r25, 0x0F	; 15
    1400:	99 0f       	add	r25, r25
    1402:	99 0f       	add	r25, r25
    1404:	22 81       	ldd	r18, Z+2	; 0x02
    1406:	22 95       	swap	r18
    1408:	26 95       	lsr	r18
    140a:	26 95       	lsr	r18
    140c:	23 70       	andi	r18, 0x03	; 3
    140e:	92 0f       	add	r25, r18
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	9c 93       	st	X, r25
    1414:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	8f 73       	andi	r24, 0x3F	; 63
    141a:	13 96       	adiw	r26, 0x03	; 3
    141c:	8c 93       	st	X, r24
    141e:	08 95       	ret

00001420 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1420:	6f 92       	push	r6
    1422:	7f 92       	push	r7
    1424:	8f 92       	push	r8
    1426:	9f 92       	push	r9
    1428:	af 92       	push	r10
    142a:	bf 92       	push	r11
    142c:	cf 92       	push	r12
    142e:	df 92       	push	r13
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	27 97       	sbiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	6c 01       	movw	r12, r24
    144e:	5b 01       	movw	r10, r22
    1450:	3b 01       	movw	r6, r22
    1452:	64 0e       	add	r6, r20
    1454:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1456:	e1 2c       	mov	r14, r1
    1458:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    145a:	00 e0       	ldi	r16, 0x00	; 0
    145c:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    145e:	4e 01       	movw	r8, r28
    1460:	85 e0       	ldi	r24, 0x05	; 5
    1462:	88 0e       	add	r8, r24
    1464:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1466:	6a 14       	cp	r6, r10
    1468:	7b 04       	cpc	r7, r11
    146a:	49 f1       	breq	.+82     	; 0x14be <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    146c:	c8 01       	movw	r24, r16
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	f5 01       	movw	r30, r10
    1472:	21 91       	ld	r18, Z+
    1474:	5f 01       	movw	r10, r30
    1476:	f4 01       	movw	r30, r8
    1478:	e0 0f       	add	r30, r16
    147a:	f1 1f       	adc	r31, r17
    147c:	20 83       	st	Z, r18
		if(i == 3) {
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 05       	cpc	r25, r1
    1482:	11 f0       	breq	.+4      	; 0x1488 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1484:	8c 01       	movw	r16, r24
    1486:	ef cf       	rjmp	.-34     	; 0x1466 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1488:	b4 01       	movw	r22, r8
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_Z8a3_to_a4PhS_>
    1492:	de 01       	movw	r26, r28
    1494:	11 96       	adiw	r26, 0x01	; 1
    1496:	c6 01       	movw	r24, r12
    1498:	8e 0d       	add	r24, r14
    149a:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    149c:	ed 91       	ld	r30, X+
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	ec 55       	subi	r30, 0x5C	; 92
    14a2:	fd 4f       	sbci	r31, 0xFD	; 253
    14a4:	24 91       	lpm	r18, Z
    14a6:	fc 01       	movw	r30, r24
    14a8:	21 93       	st	Z+, r18
    14aa:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    14ac:	a8 15       	cp	r26, r8
    14ae:	b9 05       	cpc	r27, r9
    14b0:	a9 f7       	brne	.-22     	; 0x149c <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    14b2:	f4 e0       	ldi	r31, 0x04	; 4
    14b4:	ef 0e       	add	r14, r31
    14b6:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	e3 cf       	rjmp	.-58     	; 0x1484 <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    14be:	01 15       	cp	r16, r1
    14c0:	11 05       	cpc	r17, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    14c4:	3c c0       	rjmp	.+120    	; 0x153e <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    14c6:	be 01       	movw	r22, r28
    14c8:	6b 5f       	subi	r22, 0xFB	; 251
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	fb 01       	movw	r30, r22
    14ce:	e0 0f       	add	r30, r16
    14d0:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    14d2:	cf 01       	movw	r24, r30
    14d4:	86 1b       	sub	r24, r22
    14d6:	97 0b       	sbc	r25, r23
    14d8:	03 97       	sbiw	r24, 0x03	; 3
    14da:	14 f4       	brge	.+4      	; 0x14e0 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    14dc:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    14de:	f9 cf       	rjmp	.-14     	; 0x14d2 <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	5c 01       	movw	r10, r24
    14e6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_Z8a3_to_a4PhS_>
    14ea:	c6 01       	movw	r24, r12
    14ec:	8e 0d       	add	r24, r14
    14ee:	9f 1d       	adc	r25, r15
    14f0:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    14f2:	ed 91       	ld	r30, X+
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	ec 55       	subi	r30, 0x5C	; 92
    14f8:	fd 4f       	sbci	r31, 0xFD	; 253
    14fa:	24 91       	lpm	r18, Z
    14fc:	fc 01       	movw	r30, r24
    14fe:	21 93       	st	Z+, r18
    1500:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1502:	9d 01       	movw	r18, r26
    1504:	2a 19       	sub	r18, r10
    1506:	3b 09       	sbc	r19, r11
    1508:	02 17       	cp	r16, r18
    150a:	13 07       	cpc	r17, r19
    150c:	94 f7       	brge	.-28     	; 0x14f2 <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    150e:	ff ef       	ldi	r31, 0xFF	; 255
    1510:	ef 1a       	sub	r14, r31
    1512:	ff 0a       	sbc	r15, r31
    1514:	e0 0e       	add	r14, r16
    1516:	f1 1e       	adc	r15, r17
    1518:	f6 01       	movw	r30, r12
    151a:	ee 0d       	add	r30, r14
    151c:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    151e:	0c 19       	sub	r16, r12
    1520:	1d 09       	sbc	r17, r13
    1522:	0e 19       	sub	r16, r14
    1524:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1526:	8d e3       	ldi	r24, 0x3D	; 61
    1528:	7f 01       	movw	r14, r30
    152a:	ec 18       	sub	r14, r12
    152c:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    152e:	98 01       	movw	r18, r16
    1530:	2e 0f       	add	r18, r30
    1532:	3f 1f       	adc	r19, r31
    1534:	23 30       	cpi	r18, 0x03	; 3
    1536:	31 05       	cpc	r19, r1
    1538:	14 f4       	brge	.+4      	; 0x153e <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    153a:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    153c:	f5 cf       	rjmp	.-22     	; 0x1528 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    153e:	f6 01       	movw	r30, r12
    1540:	ee 0d       	add	r30, r14
    1542:	ff 1d       	adc	r31, r15
    1544:	10 82       	st	Z, r1
	
	return encLen;
}
    1546:	c7 01       	movw	r24, r14
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	27 96       	adiw	r28, 0x07	; 7
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	bf 90       	pop	r11
    1568:	af 90       	pop	r10
    156a:	9f 90       	pop	r9
    156c:	8f 90       	pop	r8
    156e:	7f 90       	pop	r7
    1570:	6f 90       	pop	r6
    1572:	08 95       	ret

00001574 <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	85 e0       	ldi	r24, 0x05	; 5
    1578:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pinMode>
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	85 e0       	ldi	r24, 0x05	; 5
    1580:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
    1584:	68 eb       	ldi	r22, 0xB8	; 184
    1586:	7b e0       	ldi	r23, 0x0B	; 11
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	8d e0       	ldi	r24, 0x0D	; 13
    1594:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pinMode>
    1598:	26 e0       	ldi	r18, 0x06	; 6
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	55 e2       	ldi	r21, 0x25	; 37
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	84 ea       	ldi	r24, 0xA4	; 164
    15a4:	93 e0       	ldi	r25, 0x03	; 3
    15a6:	0e 94 22 13 	call	0x2644	; 0x2644 <_ZN14HardwareSerial5beginEmh>
    15aa:	6e e7       	ldi	r22, 0x7E	; 126
    15ac:	74 e0       	ldi	r23, 0x04	; 4
    15ae:	84 ea       	ldi	r24, 0xA4	; 164
    15b0:	93 e0       	ldi	r25, 0x03	; 3
    15b2:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
    15b6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_behaviour>
    15c0:	08 95       	ret

000015c2 <_Z21ensureFonaInitialisedbPb>:
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2c 97       	sbiw	r28, 0x0c	; 12
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	18 2f       	mov	r17, r24
    15de:	7b 01       	movw	r14, r22
    15e0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_initFonaLoopCount>
    15e4:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_initFonaLoopCount+0x1>
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <_initFonaLoopCount+0x1>
    15ee:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_initFonaLoopCount>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	fb 01       	movw	r30, r22
    15f6:	80 83       	st	Z, r24
    15f8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_fonaStatusInit>
    15fc:	81 11       	cpse	r24, r1
    15fe:	30 c0       	rjmp	.+96     	; 0x1660 <_Z21ensureFonaInitialisedbPb+0x9e>
    1600:	69 e6       	ldi	r22, 0x69	; 105
    1602:	74 e0       	ldi	r23, 0x04	; 4
    1604:	84 ea       	ldi	r24, 0xA4	; 164
    1606:	93 e0       	ldi	r25, 0x03	; 3
    1608:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
    160c:	42 e0       	ldi	r20, 0x02	; 2
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	8f eb       	ldi	r24, 0xBF	; 191
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN13Adafruit_FONA5beginEhh>
    1618:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <_fonaStatusInit>
    161c:	84 eb       	ldi	r24, 0xB4	; 180
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN12RmMemManager11getModuleIdEv>
    1624:	68 2f       	mov	r22, r24
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	6a 5b       	subi	r22, 0xBA	; 186
    162a:	7e 4f       	sbci	r23, 0xFE	; 254
    162c:	ce 01       	movw	r24, r28
    162e:	07 96       	adiw	r24, 0x07	; 7
    1630:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN6StringC1EPKc>
    1634:	be 01       	movw	r22, r28
    1636:	69 5f       	subi	r22, 0xF9	; 249
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	0e 94 0b 18 	call	0x3016	; 0x3016 <_ZN6StringC1ERKS_>
    1642:	be 01       	movw	r22, r28
    1644:	6f 5f       	subi	r22, 0xFF	; 255
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	8f eb       	ldi	r24, 0xBF	; 191
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	0e 94 81 03 	call	0x702	; 0x702 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN6StringD1Ev>
    1658:	ce 01       	movw	r24, r28
    165a:	07 96       	adiw	r24, 0x07	; 7
    165c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN6StringD1Ev>
    1660:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_fonaStatusInit>
    1664:	83 50       	subi	r24, 0x03	; 3
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	a8 f4       	brcc	.+42     	; 0x1694 <_Z21ensureFonaInitialisedbPb+0xd2>
    166a:	6e e4       	ldi	r22, 0x4E	; 78
    166c:	74 e0       	ldi	r23, 0x04	; 4
    166e:	84 ea       	ldi	r24, 0xA4	; 164
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1676:	64 e5       	ldi	r22, 0x54	; 84
    1678:	71 e0       	ldi	r23, 0x01	; 1
    167a:	84 ea       	ldi	r24, 0xA4	; 164
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
    1682:	4a e0       	ldi	r20, 0x0A	; 10
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <_fonaStatusInit>
    168a:	84 ea       	ldi	r24, 0xA4	; 164
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN5Print7printlnEhi>
    1692:	5c c0       	rjmp	.+184    	; 0x174c <_Z21ensureFonaInitialisedbPb+0x18a>
    1694:	11 23       	and	r17, r17
    1696:	09 f4       	brne	.+2      	; 0x169a <_Z21ensureFonaInitialisedbPb+0xd8>
    1698:	56 c0       	rjmp	.+172    	; 0x1746 <_Z21ensureFonaInitialisedbPb+0x184>
    169a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_gprsStatusInit>
    169e:	81 11       	cpse	r24, r1
    16a0:	4d c0       	rjmp	.+154    	; 0x173c <_Z21ensureFonaInitialisedbPb+0x17a>
    16a2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_initFonaLoopCount>
    16a6:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_initFonaLoopCount+0x1>
    16aa:	8d 33       	cpi	r24, 0x3D	; 61
    16ac:	91 05       	cpc	r25, r1
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <_Z21ensureFonaInitialisedbPb+0xf0>
    16b0:	45 c0       	rjmp	.+138    	; 0x173c <_Z21ensureFonaInitialisedbPb+0x17a>
    16b2:	64 e1       	ldi	r22, 0x14	; 20
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	0e 94 93 1a 	call	0x3526	; 0x3526 <__udivmodhi4>
    16ba:	89 2b       	or	r24, r25
    16bc:	19 f0       	breq	.+6      	; 0x16c4 <_Z21ensureFonaInitialisedbPb+0x102>
    16be:	f7 01       	movw	r30, r14
    16c0:	10 82       	st	Z, r1
    16c2:	3c c0       	rjmp	.+120    	; 0x173c <_Z21ensureFonaInitialisedbPb+0x17a>
    16c4:	61 e3       	ldi	r22, 0x31	; 49
    16c6:	74 e0       	ldi	r23, 0x04	; 4
    16c8:	84 ea       	ldi	r24, 0xA4	; 164
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	8f eb       	ldi	r24, 0xBF	; 191
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN13Adafruit_FONA10enableGPRSEb>
    16da:	18 2f       	mov	r17, r24
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	81 0f       	add	r24, r17
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	20 f1       	brcs	.+72     	; 0x172c <_Z21ensureFonaInitialisedbPb+0x16a>
    16e4:	66 e1       	ldi	r22, 0x16	; 22
    16e6:	74 e0       	ldi	r23, 0x04	; 4
    16e8:	84 ea       	ldi	r24, 0xA4	; 164
    16ea:	93 e0       	ldi	r25, 0x03	; 3
    16ec:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    16f0:	64 e5       	ldi	r22, 0x54	; 84
    16f2:	71 e0       	ldi	r23, 0x01	; 1
    16f4:	84 ea       	ldi	r24, 0xA4	; 164
    16f6:	93 e0       	ldi	r25, 0x03	; 3
    16f8:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
    16fc:	61 2f       	mov	r22, r17
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	4a e0       	ldi	r20, 0x0A	; 10
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	84 ea       	ldi	r24, 0xA4	; 164
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 92 15 	call	0x2b24	; 0x2b24 <_ZN5Print7printlnEii>
    170c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_initFonaLoopCount>
    1710:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_initFonaLoopCount+0x1>
    1714:	cc 97       	sbiw	r24, 0x3c	; 60
    1716:	28 f4       	brcc	.+10     	; 0x1722 <_Z21ensureFonaInitialisedbPb+0x160>
    1718:	f7 01       	movw	r30, r14
    171a:	10 82       	st	Z, r1
    171c:	60 ef       	ldi	r22, 0xF0	; 240
    171e:	73 e0       	ldi	r23, 0x03	; 3
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <_Z21ensureFonaInitialisedbPb+0x172>
    1722:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <_gprsStatusInit>
    1726:	6d ec       	ldi	r22, 0xCD	; 205
    1728:	73 e0       	ldi	r23, 0x03	; 3
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <_Z21ensureFonaInitialisedbPb+0x172>
    172c:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <_gprsStatusInit>
    1730:	6d ea       	ldi	r22, 0xAD	; 173
    1732:	73 e0       	ldi	r23, 0x03	; 3
    1734:	84 ea       	ldi	r24, 0xA4	; 164
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
    173c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_gprsStatusInit>
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	18 f4       	brcc	.+6      	; 0x174c <_Z21ensureFonaInitialisedbPb+0x18a>
    1746:	8f eb       	ldi	r24, 0xBF	; 191
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <_Z21ensureFonaInitialisedbPb+0x18e>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	2c 96       	adiw	r28, 0x0c	; 12
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	08 95       	ret

00001768 <_Z15switchOffSystemv>:
    1768:	66 e5       	ldi	r22, 0x56	; 86
    176a:	71 e0       	ldi	r23, 0x01	; 1
    176c:	84 ea       	ldi	r24, 0xA4	; 164
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	85 e0       	ldi	r24, 0x05	; 5
    1778:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
    177c:	68 eb       	ldi	r22, 0xB8	; 184
    177e:	7b e0       	ldi	r23, 0x0B	; 11
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <delay>

00001788 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	2a 97       	sbiw	r28, 0x0a	; 10
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    179c:	6a e9       	ldi	r22, 0x9A	; 154
    179e:	73 e0       	ldi	r23, 0x03	; 3
    17a0:	84 ea       	ldi	r24, 0xA4	; 164
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	1b 82       	std	Y+3, r1	; 0x03
    17ae:	1a 82       	std	Y+2, r1	; 0x02
    17b0:	1d 82       	std	Y+5, r1	; 0x05
    17b2:	1c 82       	std	Y+4, r1	; 0x04
    17b4:	1f 82       	std	Y+7, r1	; 0x07
    17b6:	1e 82       	std	Y+6, r1	; 0x06
    17b8:	19 86       	std	Y+9, r1	; 0x09
    17ba:	18 86       	std	Y+8, r1	; 0x08
    17bc:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    17be:	be 01       	movw	r22, r28
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	82 eb       	ldi	r24, 0xB2	; 178
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	2a 96       	adiw	r28, 0x0a	; 10
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    17e0:	cf 92       	push	r12
    17e2:	df 92       	push	r13
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	aa 97       	sbiw	r28, 0x2a	; 42
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return true;
}
    17fe:	cd b6       	in	r12, 0x3d	; 61
    1800:	de b6       	in	r13, 0x3e	; 62

Adafruit_FONA* _sendDataFona = NULL;
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	boolean isInit = (_sendDataLoopCount == 0);
    1802:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_sendDataLoopCount>
    1806:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_sendDataLoopCount+0x1>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    180a:	9c 01       	movw	r18, r24
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	30 93 aa 01 	sts	0x01AA, r19	; 0x8001aa <_sendDataLoopCount+0x1>
    1814:	20 93 a9 01 	sts	0x01A9, r18	; 0x8001a9 <_sendDataLoopCount>
	
	if (isInit)
    1818:	89 2b       	or	r24, r25
    181a:	31 f4       	brne	.+12     	; 0x1828 <_Z8sendDatav+0x48>
		RM_LOGLN(F("Initialising Fona to send data"));
    181c:	6b e7       	ldi	r22, 0x7B	; 123
    181e:	73 e0       	ldi	r23, 0x03	; 3
    1820:	84 ea       	ldi	r24, 0xA4	; 164
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	boolean isComplete;
	_sendDataFona = ensureFonaInitialised(true, &isComplete);
    1828:	be 01       	movw	r22, r28
    182a:	66 5d       	subi	r22, 0xD6	; 214
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_Z21ensureFonaInitialisedbPb>
    1834:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_sendDataFona+0x1>
    1838:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_sendDataFona>
	
	if (!isComplete) {
    183c:	fa a4       	ldd	r15, Y+42	; 0x2a
    183e:	f1 10       	cpse	r15, r1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <_Z8sendDatav+0x68>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    1842:	63 e6       	ldi	r22, 0x63	; 99
    1844:	73 e0       	ldi	r23, 0x03	; 3
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <_Z8sendDatav+0x70>
		return false; //Still waiting to initialise
	}
		
	if (_sendDataFona == NULL) {
    1848:	89 2b       	or	r24, r25
    184a:	39 f4       	brne	.+14     	; 0x185a <_Z8sendDatav+0x7a>
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    184c:	60 e5       	ldi	r22, 0x50	; 80
    184e:	73 e0       	ldi	r23, 0x03	; 3
    1850:	84 ea       	ldi	r24, 0xA4	; 164
    1852:	93 e0       	ldi	r25, 0x03	; 3
    1854:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return true; //Error initialising
    1858:	73 c0       	rjmp	.+230    	; 0x1940 <_Z8sendDatav+0x160>
	}
		
		
	SensorData sData[2]; //TODO: HARDCODED
    185a:	8e 01       	movw	r16, r28
    185c:	0f 5f       	subi	r16, 0xFF	; 255
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	84 e1       	ldi	r24, 0x14	; 20
    1862:	f8 01       	movw	r30, r16
    1864:	11 92       	st	Z+, r1
    1866:	8a 95       	dec	r24
    1868:	e9 f7       	brne	.-6      	; 0x1864 <_Z8sendDatav+0x84>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	8b 87       	std	Y+11, r24	; 0x0b
	unsigned long loadedTo;
	mem.loadSensorData((SensorData*)&sData, 2, &loadedTo);
    1870:	9e 01       	movw	r18, r28
    1872:	2a 5d       	subi	r18, 0xDA	; 218
    1874:	3f 4f       	sbci	r19, 0xFF	; 255
    1876:	42 e0       	ldi	r20, 0x02	; 2
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	b8 01       	movw	r22, r16
    187c:	84 eb       	ldi	r24, 0xB4	; 180
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
	
	RM_LOGLN(F("FOUND..."));
    1884:	67 e4       	ldi	r22, 0x47	; 71
    1886:	73 e0       	ldi	r23, 0x03	; 3
    1888:	84 ea       	ldi	r24, 0xA4	; 164
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(sData);
    1890:	c8 01       	movw	r24, r16
    1892:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(sData+1);
    1896:	ce 01       	movw	r24, r28
    1898:	0b 96       	adiw	r24, 0x0b	; 11
    189a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	GsmPayload payload;
    189e:	ce 01       	movw	r24, r28
    18a0:	45 96       	adiw	r24, 0x15	; 21
    18a2:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    18a6:	67 ee       	ldi	r22, 0xE7	; 231
    18a8:	ce 01       	movw	r24, r28
    18aa:	45 96       	adiw	r24, 0x15	; 21
    18ac:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    18b0:	61 e2       	ldi	r22, 0x21	; 33
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	ce 01       	movw	r24, r28
    18b6:	45 96       	adiw	r24, 0x15	; 21
    18b8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, 2);
    18bc:	42 e0       	ldi	r20, 0x02	; 2
    18be:	b8 01       	movw	r22, r16
    18c0:	ce 01       	movw	r24, r28
    18c2:	45 96       	adiw	r24, 0x15	; 21
    18c4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(2);
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>

	char encodedData[encodedSz];
    18ce:	2d b7       	in	r18, 0x3d	; 61
    18d0:	3e b7       	in	r19, 0x3e	; 62
    18d2:	28 1b       	sub	r18, r24
    18d4:	39 0b       	sbc	r19, r25
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	3e bf       	out	0x3e, r19	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	2d bf       	out	0x3d, r18	; 61
    18e0:	0d b7       	in	r16, 0x3d	; 61
    18e2:	1e b7       	in	r17, 0x3e	; 62
    18e4:	0f 5f       	subi	r16, 0xFF	; 255
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
	payload.createEncodedPayload(encodedData);
    18e8:	b8 01       	movw	r22, r16
    18ea:	ce 01       	movw	r24, r28
    18ec:	45 96       	adiw	r24, 0x15	; 21
    18ee:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN10GsmPayload20createEncodedPayloadEPc>

	RM_LOGLN(F("Encoded data created and ready for send:"));
    18f2:	6e e1       	ldi	r22, 0x1E	; 30
    18f4:	73 e0       	ldi	r23, 0x03	; 3
    18f6:	84 ea       	ldi	r24, 0xA4	; 164
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    18fe:	b8 01       	movw	r22, r16
    1900:	84 ea       	ldi	r24, 0xA4	; 164
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN5Print7printlnEPKc>

	//RM_LOGLN(F("Now waiting for a while before checking signal"));
	
	//Wait to get signal - may already be over the threshold when doing initialisation
	if (_sendDataLoopCount >= 60) {
    1908:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_sendDataLoopCount>
    190c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_sendDataLoopCount+0x1>
    1910:	cc 97       	sbiw	r24, 0x3c	; 60
    1912:	b0 f0       	brcs	.+44     	; 0x1940 <_Z8sendDatav+0x160>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1914:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_sendDataFona>
    1918:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_sendDataFona+0x1>
    191c:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN13Adafruit_FONA7getRSSIEv>
    1920:	6a a3       	std	Y+34, r22	; 0x22
    1922:	7b a3       	std	Y+35, r23	; 0x23
    1924:	8c a3       	std	Y+36, r24	; 0x24
    1926:	9d a3       	std	Y+37, r25	; 0x25
		Helpers::printRSSI(&rssi);
    1928:	ce 01       	movw	r24, r28
    192a:	82 96       	adiw	r24, 0x22	; 34
    192c:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->pVVoltage = 25;
		//sd->current = 13;
		//sd->temperature = 43;
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1930:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <_sendDataLoopCount+0x1>
    1934:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1938:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_sendDataFona+0x1>
    193c:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_sendDataFona>
	}
	
	return true;
}
    1940:	8f 2d       	mov	r24, r15
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de be       	out	0x3e, r13	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd be       	out	0x3d, r12	; 61
    194c:	aa 96       	adiw	r28, 0x2a	; 42
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	08 95       	ret

00001968 <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	1f 92       	push	r1
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62

	delay(1000);
    1976:	68 ee       	ldi	r22, 0xE8	; 232
    1978:	73 e0       	ldi	r23, 0x03	; 3
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <delay>
	++_timerCounter;
    1982:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_timerCounter>
    1986:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_timerCounter+0x1>
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <_timerCounter+0x1>
    1990:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_timerCounter>

	RM_LOG2(F("Behaviour"), _behaviour);
    1994:	64 e1       	ldi	r22, 0x14	; 20
    1996:	73 e0       	ldi	r23, 0x03	; 3
    1998:	84 ea       	ldi	r24, 0xA4	; 164
    199a:	93 e0       	ldi	r25, 0x03	; 3
    199c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    19a0:	64 e5       	ldi	r22, 0x54	; 84
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	84 ea       	ldi	r24, 0xA4	; 164
    19a6:	93 e0       	ldi	r25, 0x03	; 3
    19a8:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
    19ac:	4a e0       	ldi	r20, 0x0A	; 10
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <_behaviour>
    19b4:	84 ea       	ldi	r24, 0xA4	; 164
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    19bc:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    19c0:	80 ff       	sbrs	r24, 0
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <loop+0x6e>
		
		if (takeReadings())
    19c4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_Z12takeReadingsv>
    19c8:	88 23       	and	r24, r24
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <loop+0x6e>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    19cc:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    19d6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    19da:	81 ff       	sbrs	r24, 1
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <loop+0x88>
		
		if (sendData())
    19de:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z8sendDatav>
    19e2:	88 23       	and	r24, r24
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <loop+0x88>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    19e6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    19ea:	8d 7f       	andi	r24, 0xFD	; 253
    19ec:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    19f0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    19f4:	82 ff       	sbrs	r24, 2
    19f6:	4a c0       	rjmp	.+148    	; 0x1a8c <loop+0x124>
	
		if (_timerCounter == 1)
    19f8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_timerCounter>
    19fc:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_timerCounter+0x1>
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	31 f4       	brne	.+12     	; 0x1a10 <loop+0xa8>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    1a04:	64 eb       	ldi	r22, 0xB4	; 180
    1a06:	71 e0       	ldi	r23, 0x01	; 1
    1a08:	8f eb       	ldi	r24, 0xBF	; 191
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    1a10:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_Z8sendDatav>
    1a14:	88 23       	and	r24, r24
    1a16:	d1 f1       	breq	.+116    	; 0x1a8c <loop+0x124>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    1a18:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    1a1c:	8b 7f       	andi	r24, 0xFB	; 251
    1a1e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    1a22:	0e 94 f7 11 	call	0x23ee	; 0x23ee <_ZN13ExtendedTests18endExtendedGsmTestEv>
			
			
			
			//TEST: We should be able to call ensureInitialised subsequently
			boolean isComplete;
			Adafruit_FONA* fona = ensureFonaInitialised(true, &isComplete);
    1a26:	be 01       	movw	r22, r28
    1a28:	6f 5f       	subi	r22, 0xFF	; 255
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_Z21ensureFonaInitialisedbPb>
    1a32:	8c 01       	movw	r16, r24
			
			RM_LOG2(F("SUBSEQUENT ISCOMPLETE"), isComplete);
    1a34:	6e ef       	ldi	r22, 0xFE	; 254
    1a36:	72 e0       	ldi	r23, 0x02	; 2
    1a38:	84 ea       	ldi	r24, 0xA4	; 164
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1a40:	64 e5       	ldi	r22, 0x54	; 84
    1a42:	71 e0       	ldi	r23, 0x01	; 1
    1a44:	84 ea       	ldi	r24, 0xA4	; 164
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
    1a4c:	69 81       	ldd	r22, Y+1	; 0x01
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	4a e0       	ldi	r20, 0x0A	; 10
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	84 ea       	ldi	r24, 0xA4	; 164
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	0e 94 92 15 	call	0x2b24	; 0x2b24 <_ZN5Print7printlnEii>
			RM_LOG2(F("SUBSEQUENT fona is null?"), fona == NULL);
    1a5c:	65 ee       	ldi	r22, 0xE5	; 229
    1a5e:	72 e0       	ldi	r23, 0x02	; 2
    1a60:	84 ea       	ldi	r24, 0xA4	; 164
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    1a68:	64 e5       	ldi	r22, 0x54	; 84
    1a6a:	71 e0       	ldi	r23, 0x01	; 1
    1a6c:	84 ea       	ldi	r24, 0xA4	; 164
    1a6e:	93 e0       	ldi	r25, 0x03	; 3
    1a70:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print5printEPKc>
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	01 2b       	or	r16, r17
    1a7a:	11 f0       	breq	.+4      	; 0x1a80 <loop+0x118>
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	4a e0       	ldi	r20, 0x0A	; 10
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	84 ea       	ldi	r24, 0xA4	; 164
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	0e 94 92 15 	call	0x2b24	; 0x2b24 <_ZN5Print7printlnEii>
			
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1a8c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_behaviour>
    1a90:	81 11       	cpse	r24, r1
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <loop+0x130>
		
		switchOffSystem();
    1a94:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_Z15switchOffSystemv>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    1a98:	0f 90       	pop	r0
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	8f eb       	ldi	r24, 0xBF	; 191
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	84 eb       	ldi	r24, 0xB4	; 180
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	82 eb       	ldi	r24, 0xB2	; 178
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <_ZN13SensorManagerC1Eb>

00001ac4 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1ac4:	8a e3       	ldi	r24, 0x3A	; 58
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <__fona+0x1>
    1acc:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <__fona>
    1ad0:	84 ed       	ldi	r24, 0xD4	; 212
    1ad2:	92 e0       	ldi	r25, 0x02	; 2
    1ad4:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <_ZN6StringD1Ev>

00001ad8 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1ad8:	dc 01       	movw	r26, r24
    1ada:	ed 91       	ld	r30, X+
    1adc:	fc 91       	ld	r31, X
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	09 94       	ijmp

00001ae6 <_ZN12RmMemManagerC1Eb>:
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	14 82       	std	Z+4, r1	; 0x04
    1aea:	15 82       	std	Z+5, r1	; 0x05
    1aec:	16 82       	std	Z+6, r1	; 0x06
    1aee:	17 82       	std	Z+7, r1	; 0x07
    1af0:	80 e8       	ldi	r24, 0x80	; 128
    1af2:	80 87       	std	Z+8, r24	; 0x08
    1af4:	81 87       	std	Z+9, r24	; 0x09
    1af6:	12 86       	std	Z+10, r1	; 0x0a
    1af8:	63 83       	std	Z+3, r22	; 0x03
    1afa:	61 11       	cpse	r22, r1
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <_ZN12RmMemManagerC1Eb+0x20>
    1afe:	8c e4       	ldi	r24, 0x4C	; 76
    1b00:	93 e0       	ldi	r25, 0x03	; 3
    1b02:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <_ZN7TwoWire5beginEv>
    1b06:	08 95       	ret

00001b08 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:
    1b08:	fc 01       	movw	r30, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	61 15       	cp	r22, r1
    1b12:	71 05       	cpc	r23, r1
    1b14:	39 f0       	breq	.+14     	; 0x1b24 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x1c>
    1b16:	42 81       	ldd	r20, Z+2	; 0x02
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	42 9f       	mul	r20, r18
    1b1c:	a0 01       	movw	r20, r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	08 95       	ret

00001b2e <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	eb 01       	movw	r28, r22
    1b3c:	7b 01       	movw	r14, r22
    1b3e:	e4 0e       	add	r14, r20
    1b40:	f1 1c       	adc	r15, r1
    1b42:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1b44:	ce 15       	cp	r28, r14
    1b46:	df 05       	cpc	r29, r15
    1b48:	71 f1       	breq	.+92     	; 0x1ba6 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1b4a:	60 e5       	ldi	r22, 0x50	; 80
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	8c e4       	ldi	r24, 0x4C	; 76
    1b50:	93 e0       	ldi	r25, 0x03	; 3
    1b52:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1b56:	61 2f       	mov	r22, r17
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	8c e4       	ldi	r24, 0x4C	; 76
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1b62:	b8 01       	movw	r22, r16
    1b64:	77 27       	eor	r23, r23
    1b66:	8c e4       	ldi	r24, 0x4C	; 76
    1b68:	93 e0       	ldi	r25, 0x03	; 3
    1b6a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1b6e:	8c e4       	ldi	r24, 0x4C	; 76
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	60 e5       	ldi	r22, 0x50	; 80
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	8c e4       	ldi	r24, 0x4C	; 76
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	0e 94 ed 11 	call	0x23da	; 0x23da <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1b86:	8c e4       	ldi	r24, 0x4C	; 76
    1b88:	93 e0       	ldi	r25, 0x03	; 3
    1b8a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire9availableEv>
    1b8e:	89 2b       	or	r24, r25
    1b90:	29 f0       	breq	.+10     	; 0x1b9c <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1b92:	8c e4       	ldi	r24, 0x4C	; 76
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN7TwoWire4readEv>
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1b9e:	89 93       	st	Y+, r24
    1ba0:	0f 5f       	subi	r16, 0xFF	; 255
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1ba4:	cf cf       	rjmp	.-98     	; 0x1b44 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	08 95       	ret

00001bb4 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	1f 92       	push	r1
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	be 01       	movw	r22, r28
    1bc4:	6f 5f       	subi	r22, 0xFF	; 255
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_Z12internalReadjPhh>
	return value;
}
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	0f 90       	pop	r0
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <_ZN12RmMemManager18getUCharFromMemoryEj>

00001bde <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1bde:	fc 01       	movw	r30, r24
    1be0:	60 83       	st	Z, r22
    1be2:	08 95       	ret

00001be4 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1be4:	fc 01       	movw	r30, r24
    1be6:	80 81       	ld	r24, Z
    1be8:	81 11       	cpse	r24, r1
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1bec:	86 2f       	mov	r24, r22
    1bee:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	08 95       	ret

00001bf8 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1bfc:	81 81       	ldd	r24, Z+1	; 0x01
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	12 96       	adiw	r26, 0x02	; 2
    1c06:	9c 93       	st	X, r25
    1c08:	8e 93       	st	-X, r24
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1c0c:	81 81       	ldd	r24, Z+1	; 0x01
    1c0e:	2a e0       	ldi	r18, 0x0A	; 10
    1c10:	82 9f       	mul	r24, r18
    1c12:	c0 01       	movw	r24, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	14 96       	adiw	r26, 0x04	; 4
    1c18:	9c 93       	st	X, r25
    1c1a:	8e 93       	st	-X, r24
    1c1c:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    1c1e:	81 81       	ldd	r24, Z+1	; 0x01
    1c20:	67 e0       	ldi	r22, 0x07	; 7
    1c22:	0e 94 87 1a 	call	0x350e	; 0x350e <__udivmodqi4>
    1c26:	89 2f       	mov	r24, r25
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	16 96       	adiw	r26, 0x06	; 6
    1c2c:	9c 93       	st	X, r25
    1c2e:	8e 93       	st	-X, r24
    1c30:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    1c32:	81 81       	ldd	r24, Z+1	; 0x01
    1c34:	24 e6       	ldi	r18, 0x64	; 100
    1c36:	82 9f       	mul	r24, r18
    1c38:	c0 01       	movw	r24, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	18 96       	adiw	r26, 0x08	; 8
    1c3e:	9c 93       	st	X, r25
    1c40:	8e 93       	st	-X, r24
    1c42:	17 97       	sbiw	r26, 0x07	; 7
    1c44:	08 95       	ret

00001c46 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1c5e:	fc 01       	movw	r30, r24
    1c60:	80 81       	ld	r24, Z
    1c62:	88 23       	and	r24, r24
    1c64:	21 f0       	breq	.+8      	; 0x1c6e <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN13SensorManager11getMockDataEP10SensorData>
    1c6c:	1b c0       	rjmp	.+54     	; 0x1ca4 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1c6e:	6e e0       	ldi	r22, 0x0E	; 14
    1c70:	c8 01       	movw	r24, r16
    1c72:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN13SensorManager16takeSampleAnalogEh>
    1c76:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1c78:	6f e0       	ldi	r22, 0x0F	; 15
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN13SensorManager16takeSampleAnalogEh>
    1c80:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1c82:	61 e1       	ldi	r22, 0x11	; 17
    1c84:	c8 01       	movw	r24, r16
    1c86:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN13SensorManager16takeSampleAnalogEh>
    1c8a:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1c8c:	60 e1       	ldi	r22, 0x10	; 16
    1c8e:	c8 01       	movw	r24, r16
    1c90:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    1c94:	ba 82       	std	Y+2, r11	; 0x02
    1c96:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    1c98:	dc 82       	std	Y+4, r13	; 0x04
    1c9a:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    1c9c:	fe 82       	std	Y+6, r15	; 0x06
    1c9e:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    1ca0:	98 87       	std	Y+8, r25	; 0x08
    1ca2:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1ca4:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    1cba:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_ZN7Helpers15printSensorDataEP10SensorData>

00001cbe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1cbe:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_state>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_sendStop>
    1cc8:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <twi_inRepStart>
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	82 e1       	ldi	r24, 0x12	; 18
    1cd0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	83 e1       	ldi	r24, 0x13	; 19
    1cd8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
    1cdc:	e9 eb       	ldi	r30, 0xB9	; 185
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8e 7f       	andi	r24, 0xFE	; 254
    1ce4:	80 83       	st	Z, r24
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8d 7f       	andi	r24, 0xFD	; 253
    1cea:	80 83       	st	Z, r24
    1cec:	88 e4       	ldi	r24, 0x48	; 72
    1cee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1cf2:	85 e4       	ldi	r24, 0x45	; 69
    1cf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1cf8:	08 95       	ret

00001cfa <twi_readFrom>:
    1cfa:	41 32       	cpi	r20, 0x21	; 33
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <twi_readFrom+0x6>
    1cfe:	43 c0       	rjmp	.+134    	; 0x1d86 <twi_readFrom+0x8c>
    1d00:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <twi_state>
    1d04:	91 11       	cpse	r25, r1
    1d06:	fc cf       	rjmp	.-8      	; 0x1d00 <twi_readFrom+0x6>
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <twi_state>
    1d0e:	20 93 49 03 	sts	0x0349, r18	; 0x800349 <twi_sendStop>
    1d12:	2f ef       	ldi	r18, 0xFF	; 255
    1d14:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <twi_error>
    1d18:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <twi_masterBufferIndex>
    1d1c:	24 0f       	add	r18, r20
    1d1e:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <twi_masterBufferLength>
    1d22:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <twi_slarw>
    1d26:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <twi_slarw>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	89 2b       	or	r24, r25
    1d2e:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_slarw>
    1d32:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_inRepStart>
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	61 f4       	brne	.+24     	; 0x1d52 <twi_readFrom+0x58>
    1d3a:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <twi_inRepStart>
    1d3e:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_slarw>
    1d42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1d46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d4a:	83 fd       	sbrc	r24, 3
    1d4c:	f8 cf       	rjmp	.-16     	; 0x1d3e <twi_readFrom+0x44>
    1d4e:	85 ec       	ldi	r24, 0xC5	; 197
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <twi_readFrom+0x5a>
    1d52:	85 ee       	ldi	r24, 0xE5	; 229
    1d54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d58:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_state>
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	e1 f3       	breq	.-8      	; 0x1d58 <twi_readFrom+0x5e>
    1d60:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1d64:	84 17       	cp	r24, r20
    1d66:	10 f4       	brcc	.+4      	; 0x1d6c <twi_readFrom+0x72>
    1d68:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1d6c:	a4 e2       	ldi	r26, 0x24	; 36
    1d6e:	b3 e0       	ldi	r27, 0x03	; 3
    1d70:	96 2f       	mov	r25, r22
    1d72:	fb 01       	movw	r30, r22
    1d74:	8e 2f       	mov	r24, r30
    1d76:	89 1b       	sub	r24, r25
    1d78:	84 17       	cp	r24, r20
    1d7a:	18 f4       	brcc	.+6      	; 0x1d82 <twi_readFrom+0x88>
    1d7c:	8d 91       	ld	r24, X+
    1d7e:	81 93       	st	Z+, r24
    1d80:	f9 cf       	rjmp	.-14     	; 0x1d74 <twi_readFrom+0x7a>
    1d82:	84 2f       	mov	r24, r20
    1d84:	08 95       	ret
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	08 95       	ret

00001d8a <twi_writeTo>:
    1d8a:	0f 93       	push	r16
    1d8c:	41 32       	cpi	r20, 0x21	; 33
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <twi_writeTo+0x8>
    1d90:	4a c0       	rjmp	.+148    	; 0x1e26 <twi_writeTo+0x9c>
    1d92:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <twi_state>
    1d96:	91 11       	cpse	r25, r1
    1d98:	fc cf       	rjmp	.-8      	; 0x1d92 <twi_writeTo+0x8>
    1d9a:	32 e0       	ldi	r19, 0x02	; 2
    1d9c:	30 93 4b 03 	sts	0x034B, r19	; 0x80034b <twi_state>
    1da0:	00 93 49 03 	sts	0x0349, r16	; 0x800349 <twi_sendStop>
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <twi_error>
    1daa:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <twi_masterBufferIndex>
    1dae:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <twi_masterBufferLength>
    1db2:	56 2f       	mov	r21, r22
    1db4:	a4 e2       	ldi	r26, 0x24	; 36
    1db6:	b3 e0       	ldi	r27, 0x03	; 3
    1db8:	fb 01       	movw	r30, r22
    1dba:	3e 2f       	mov	r19, r30
    1dbc:	35 1b       	sub	r19, r21
    1dbe:	34 17       	cp	r19, r20
    1dc0:	18 f4       	brcc	.+6      	; 0x1dc8 <twi_writeTo+0x3e>
    1dc2:	31 91       	ld	r19, Z+
    1dc4:	3d 93       	st	X+, r19
    1dc6:	f9 cf       	rjmp	.-14     	; 0x1dba <twi_writeTo+0x30>
    1dc8:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <twi_slarw>
    1dcc:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <twi_slarw>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	83 2b       	or	r24, r19
    1dd4:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_slarw>
    1dd8:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_inRepStart>
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	61 f4       	brne	.+24     	; 0x1df8 <twi_writeTo+0x6e>
    1de0:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <twi_inRepStart>
    1de4:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_slarw>
    1de8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1dec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1df0:	83 fd       	sbrc	r24, 3
    1df2:	f8 cf       	rjmp	.-16     	; 0x1de4 <twi_writeTo+0x5a>
    1df4:	85 ec       	ldi	r24, 0xC5	; 197
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <twi_writeTo+0x70>
    1df8:	85 ee       	ldi	r24, 0xE5	; 229
    1dfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1dfe:	22 23       	and	r18, r18
    1e00:	21 f0       	breq	.+8      	; 0x1e0a <twi_writeTo+0x80>
    1e02:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_state>
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	d1 f3       	breq	.-12     	; 0x1dfe <twi_writeTo+0x74>
    1e0a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_error>
    1e0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e10:	79 f0       	breq	.+30     	; 0x1e30 <twi_writeTo+0xa6>
    1e12:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_error>
    1e16:	80 32       	cpi	r24, 0x20	; 32
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <twi_writeTo+0xa0>
    1e1a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_error>
    1e1e:	80 33       	cpi	r24, 0x30	; 48
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <twi_writeTo+0xa4>
    1e22:	94 e0       	ldi	r25, 0x04	; 4
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <twi_writeTo+0xa6>
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <twi_writeTo+0xa6>
    1e2a:	92 e0       	ldi	r25, 0x02	; 2
    1e2c:	01 c0       	rjmp	.+2      	; 0x1e30 <twi_writeTo+0xa6>
    1e2e:	93 e0       	ldi	r25, 0x03	; 3
    1e30:	89 2f       	mov	r24, r25
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <twi_transmit>:
    1e36:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <twi_txBufferLength>
    1e3a:	26 2f       	mov	r18, r22
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	24 0f       	add	r18, r20
    1e40:	31 1d       	adc	r19, r1
    1e42:	21 32       	cpi	r18, 0x21	; 33
    1e44:	31 05       	cpc	r19, r1
    1e46:	dc f4       	brge	.+54     	; 0x1e7e <twi_transmit+0x48>
    1e48:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <twi_state>
    1e4c:	24 30       	cpi	r18, 0x04	; 4
    1e4e:	c9 f4       	brne	.+50     	; 0x1e82 <twi_transmit+0x4c>
    1e50:	fc 01       	movw	r30, r24
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	86 17       	cp	r24, r22
    1e58:	58 f4       	brcc	.+22     	; 0x1e70 <twi_transmit+0x3a>
    1e5a:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <twi_txBufferLength>
    1e5e:	21 91       	ld	r18, Z+
    1e60:	dc 01       	movw	r26, r24
    1e62:	ae 5f       	subi	r26, 0xFE	; 254
    1e64:	bc 4f       	sbci	r27, 0xFC	; 252
    1e66:	a3 0f       	add	r26, r19
    1e68:	b1 1d       	adc	r27, r1
    1e6a:	2c 93       	st	X, r18
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	f3 cf       	rjmp	.-26     	; 0x1e56 <twi_transmit+0x20>
    1e70:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_txBufferLength>
    1e74:	68 0f       	add	r22, r24
    1e76:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <twi_txBufferLength>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	08 95       	ret
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	08 95       	ret
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	08 95       	ret

00001e86 <twi_attachSlaveRxEvent>:
    1e86:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <twi_onSlaveReceive+0x1>
    1e8a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_onSlaveReceive>
    1e8e:	08 95       	ret

00001e90 <twi_attachSlaveTxEvent>:
    1e90:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <twi_onSlaveTransmit+0x1>
    1e94:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_onSlaveTransmit>
    1e98:	08 95       	ret

00001e9a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1e9a:	85 ed       	ldi	r24, 0xD5	; 213
    1e9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1ea0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1ea4:	84 fd       	sbrc	r24, 4
    1ea6:	fc cf       	rjmp	.-8      	; 0x1ea0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1ea8:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_state>
    1eac:	08 95       	ret

00001eae <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1eae:	85 ec       	ldi	r24, 0xC5	; 197
    1eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    1eb4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_state>
    1eb8:	08 95       	ret

00001eba <__vector_24>:
}

ISR(TWI_vect)
{
    1eba:	1f 92       	push	r1
    1ebc:	0f 92       	push	r0
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	0f 92       	push	r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	2f 93       	push	r18
    1ec6:	3f 93       	push	r19
    1ec8:	4f 93       	push	r20
    1eca:	5f 93       	push	r21
    1ecc:	6f 93       	push	r22
    1ece:	7f 93       	push	r23
    1ed0:	8f 93       	push	r24
    1ed2:	9f 93       	push	r25
    1ed4:	af 93       	push	r26
    1ed6:	bf 93       	push	r27
    1ed8:	ef 93       	push	r30
    1eda:	ff 93       	push	r31
  switch(TW_STATUS){
    1edc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1ee0:	88 7f       	andi	r24, 0xF8	; 248
    1ee2:	80 36       	cpi	r24, 0x60	; 96
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <__vector_24+0x2e>
    1ee6:	9e c0       	rjmp	.+316    	; 0x2024 <__vector_24+0x16a>
    1ee8:	78 f5       	brcc	.+94     	; 0x1f48 <__vector_24+0x8e>
    1eea:	88 32       	cpi	r24, 0x28	; 40
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__vector_24+0x36>
    1eee:	5d c0       	rjmp	.+186    	; 0x1faa <__vector_24+0xf0>
    1ef0:	90 f4       	brcc	.+36     	; 0x1f16 <__vector_24+0x5c>
    1ef2:	80 31       	cpi	r24, 0x10	; 16
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <__vector_24+0x3e>
    1ef6:	56 c0       	rjmp	.+172    	; 0x1fa4 <__vector_24+0xea>
    1ef8:	38 f4       	brcc	.+14     	; 0x1f08 <__vector_24+0x4e>
    1efa:	88 23       	and	r24, r24
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <__vector_24+0x46>
    1efe:	f5 c0       	rjmp	.+490    	; 0x20ea <__vector_24+0x230>
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <__vector_24+0x4c>
    1f04:	4f c0       	rjmp	.+158    	; 0x1fa4 <__vector_24+0xea>
    1f06:	f5 c0       	rjmp	.+490    	; 0x20f2 <__vector_24+0x238>
    1f08:	88 31       	cpi	r24, 0x18	; 24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <__vector_24+0x54>
    1f0c:	4e c0       	rjmp	.+156    	; 0x1faa <__vector_24+0xf0>
    1f0e:	80 32       	cpi	r24, 0x20	; 32
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <__vector_24+0x5a>
    1f12:	5f c0       	rjmp	.+190    	; 0x1fd2 <__vector_24+0x118>
    1f14:	ee c0       	rjmp	.+476    	; 0x20f2 <__vector_24+0x238>
    1f16:	80 34       	cpi	r24, 0x40	; 64
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <__vector_24+0x62>
    1f1a:	6a c0       	rjmp	.+212    	; 0x1ff0 <__vector_24+0x136>
    1f1c:	58 f4       	brcc	.+22     	; 0x1f34 <__vector_24+0x7a>
    1f1e:	80 33       	cpi	r24, 0x30	; 48
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <__vector_24+0x6a>
    1f22:	57 c0       	rjmp	.+174    	; 0x1fd2 <__vector_24+0x118>
    1f24:	88 33       	cpi	r24, 0x38	; 56
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <__vector_24+0x70>
    1f28:	e4 c0       	rjmp	.+456    	; 0x20f2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1f2a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_error>
      twi_releaseBus();
    1f2e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <twi_releaseBus>
      break;
    1f32:	df c0       	rjmp	.+446    	; 0x20f2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f34:	80 35       	cpi	r24, 0x50	; 80
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <__vector_24+0x80>
    1f38:	4f c0       	rjmp	.+158    	; 0x1fd8 <__vector_24+0x11e>
    1f3a:	88 35       	cpi	r24, 0x58	; 88
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <__vector_24+0x86>
    1f3e:	5d c0       	rjmp	.+186    	; 0x1ffa <__vector_24+0x140>
    1f40:	88 34       	cpi	r24, 0x48	; 72
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <__vector_24+0x8c>
    1f44:	d6 c0       	rjmp	.+428    	; 0x20f2 <__vector_24+0x238>
    1f46:	d3 c0       	rjmp	.+422    	; 0x20ee <__vector_24+0x234>
    1f48:	88 39       	cpi	r24, 0x98	; 152
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <__vector_24+0x94>
    1f4c:	c4 c0       	rjmp	.+392    	; 0x20d6 <__vector_24+0x21c>
    1f4e:	a8 f4       	brcc	.+42     	; 0x1f7a <__vector_24+0xc0>
    1f50:	88 37       	cpi	r24, 0x78	; 120
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <__vector_24+0x9c>
    1f54:	67 c0       	rjmp	.+206    	; 0x2024 <__vector_24+0x16a>
    1f56:	38 f4       	brcc	.+14     	; 0x1f66 <__vector_24+0xac>
    1f58:	88 36       	cpi	r24, 0x68	; 104
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <__vector_24+0xa4>
    1f5c:	63 c0       	rjmp	.+198    	; 0x2024 <__vector_24+0x16a>
    1f5e:	80 37       	cpi	r24, 0x70	; 112
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <__vector_24+0xaa>
    1f62:	60 c0       	rjmp	.+192    	; 0x2024 <__vector_24+0x16a>
    1f64:	c6 c0       	rjmp	.+396    	; 0x20f2 <__vector_24+0x238>
    1f66:	88 38       	cpi	r24, 0x88	; 136
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <__vector_24+0xb2>
    1f6a:	b5 c0       	rjmp	.+362    	; 0x20d6 <__vector_24+0x21c>
    1f6c:	80 39       	cpi	r24, 0x90	; 144
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <__vector_24+0xb8>
    1f70:	5f c0       	rjmp	.+190    	; 0x2030 <__vector_24+0x176>
    1f72:	80 38       	cpi	r24, 0x80	; 128
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <__vector_24+0xbe>
    1f76:	bd c0       	rjmp	.+378    	; 0x20f2 <__vector_24+0x238>
    1f78:	5b c0       	rjmp	.+182    	; 0x2030 <__vector_24+0x176>
    1f7a:	80 3b       	cpi	r24, 0xB0	; 176
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <__vector_24+0xc6>
    1f7e:	83 c0       	rjmp	.+262    	; 0x2086 <__vector_24+0x1cc>
    1f80:	38 f4       	brcc	.+14     	; 0x1f90 <__vector_24+0xd6>
    1f82:	80 3a       	cpi	r24, 0xA0	; 160
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <__vector_24+0xce>
    1f86:	66 c0       	rjmp	.+204    	; 0x2054 <__vector_24+0x19a>
    1f88:	88 3a       	cpi	r24, 0xA8	; 168
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <__vector_24+0xd4>
    1f8c:	7c c0       	rjmp	.+248    	; 0x2086 <__vector_24+0x1cc>
    1f8e:	b1 c0       	rjmp	.+354    	; 0x20f2 <__vector_24+0x238>
    1f90:	80 3c       	cpi	r24, 0xC0	; 192
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <__vector_24+0xdc>
    1f94:	a4 c0       	rjmp	.+328    	; 0x20de <__vector_24+0x224>
    1f96:	88 3c       	cpi	r24, 0xC8	; 200
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <__vector_24+0xe2>
    1f9a:	a1 c0       	rjmp	.+322    	; 0x20de <__vector_24+0x224>
    1f9c:	88 3b       	cpi	r24, 0xB8	; 184
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <__vector_24+0xe8>
    1fa0:	87 c0       	rjmp	.+270    	; 0x20b0 <__vector_24+0x1f6>
    1fa2:	a7 c0       	rjmp	.+334    	; 0x20f2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1fa4:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_slarw>
    1fa8:	10 c0       	rjmp	.+32     	; 0x1fca <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1faa:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1fae:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <twi_masterBufferLength>
    1fb2:	98 17       	cp	r25, r24
    1fb4:	70 f5       	brcc	.+92     	; 0x2012 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1fb6:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	8e 0f       	add	r24, r30
    1fbe:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_masterBufferIndex>
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	ec 5d       	subi	r30, 0xDC	; 220
    1fc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc8:	80 81       	ld	r24, Z
    1fca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fce:	85 ec       	ldi	r24, 0xC5	; 197
    1fd0:	83 c0       	rjmp	.+262    	; 0x20d8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1fd2:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_error>
    1fd6:	8b c0       	rjmp	.+278    	; 0x20ee <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fd8:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8e 0f       	add	r24, r30
    1fe0:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_masterBufferIndex>
    1fe4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	ec 5d       	subi	r30, 0xDC	; 220
    1fec:	fc 4f       	sbci	r31, 0xFC	; 252
    1fee:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ff0:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1ff4:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <twi_masterBufferLength>
    1ff8:	6b c0       	rjmp	.+214    	; 0x20d0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ffa:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_masterBufferIndex>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	8e 0f       	add	r24, r30
    2002:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_masterBufferIndex>
    2006:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	ec 5d       	subi	r30, 0xDC	; 220
    200e:	fc 4f       	sbci	r31, 0xFC	; 252
    2010:	80 83       	st	Z, r24
	if (twi_sendStop)
    2012:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_sendStop>
    2016:	81 11       	cpse	r24, r1
    2018:	6a c0       	rjmp	.+212    	; 0x20ee <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2020:	84 ea       	ldi	r24, 0xA4	; 164
    2022:	5e c0       	rjmp	.+188    	; 0x20e0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    202a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <twi_rxBufferIndex>
    202e:	cf cf       	rjmp	.-98     	; 0x1fce <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2030:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_rxBufferIndex>
    2034:	80 32       	cpi	r24, 0x20	; 32
    2036:	08 f0       	brcs	.+2      	; 0x203a <__vector_24+0x180>
    2038:	4e c0       	rjmp	.+156    	; 0x20d6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    203a:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <twi_rxBufferIndex>
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	8e 0f       	add	r24, r30
    2042:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <twi_rxBufferIndex>
    2046:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	e0 52       	subi	r30, 0x20	; 32
    204e:	fd 4f       	sbci	r31, 0xFD	; 253
    2050:	80 83       	st	Z, r24
    2052:	bd cf       	rjmp	.-134    	; 0x1fce <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2054:	0e 94 57 0f 	call	0x1eae	; 0x1eae <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2058:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_rxBufferIndex>
    205c:	80 32       	cpi	r24, 0x20	; 32
    205e:	30 f4       	brcc	.+12     	; 0x206c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2060:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <twi_rxBufferIndex>
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	e0 52       	subi	r30, 0x20	; 32
    2068:	fd 4f       	sbci	r31, 0xFD	; 253
    206a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    206c:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <twi_rxBufferIndex>
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <twi_onSlaveReceive>
    2076:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <twi_onSlaveReceive+0x1>
    207a:	80 ee       	ldi	r24, 0xE0	; 224
    207c:	92 e0       	ldi	r25, 0x02	; 2
    207e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2080:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <twi_rxBufferIndex>
      break;
    2084:	36 c0       	rjmp	.+108    	; 0x20f2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2086:	84 e0       	ldi	r24, 0x04	; 4
    2088:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    208c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2090:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2094:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <twi_onSlaveTransmit>
    2098:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <twi_onSlaveTransmit+0x1>
    209c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    209e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_txBufferLength>
    20a2:	81 11       	cpse	r24, r1
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    20ac:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    20b0:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <twi_txBufferIndex>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	8e 0f       	add	r24, r30
    20b8:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <twi_txBufferIndex>
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	ee 5f       	subi	r30, 0xFE	; 254
    20c0:	fc 4f       	sbci	r31, 0xFC	; 252
    20c2:	80 81       	ld	r24, Z
    20c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20c8:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <twi_txBufferIndex>
    20cc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_txBufferLength>
    20d0:	98 17       	cp	r25, r24
    20d2:	08 f4       	brcc	.+2      	; 0x20d6 <__vector_24+0x21c>
    20d4:	7c cf       	rjmp	.-264    	; 0x1fce <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20d6:	85 e8       	ldi	r24, 0x85	; 133
    20d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20dc:	0a c0       	rjmp	.+20     	; 0x20f2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20de:	85 ec       	ldi	r24, 0xC5	; 197
    20e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    20e4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_state>
      break;
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    20ea:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_error>
      twi_stop();
    20ee:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <twi_stop>
      break;
  }
}
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2114:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    211e:	82 1b       	sub	r24, r18
    2120:	91 09       	sbc	r25, r1
    2122:	08 95       	ret

00002124 <_ZN7TwoWire4readEv>:
    2124:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    2128:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    212c:	98 17       	cp	r25, r24
    212e:	50 f4       	brcc	.+20     	; 0x2144 <_ZN7TwoWire4readEv+0x20>
    2130:	e9 2f       	mov	r30, r25
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	ee 57       	subi	r30, 0x7E	; 126
    2136:	fc 4f       	sbci	r31, 0xFC	; 252
    2138:	20 81       	ld	r18, Z
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	9f 5f       	subi	r25, 0xFF	; 255
    213e:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <_ZN7TwoWire4readEv+0x24>
    2144:	2f ef       	ldi	r18, 0xFF	; 255
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	c9 01       	movw	r24, r18
    214a:	08 95       	ret

0000214c <_ZN7TwoWire4peekEv>:
    214c:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    2150:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    2154:	e8 17       	cp	r30, r24
    2156:	30 f4       	brcc	.+12     	; 0x2164 <_ZN7TwoWire4peekEv+0x18>
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	ee 57       	subi	r30, 0x7E	; 126
    215c:	fc 4f       	sbci	r31, 0xFC	; 252
    215e:	80 81       	ld	r24, Z
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	08 95       	ret
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	9f ef       	ldi	r25, 0xFF	; 255
    2168:	08 95       	ret

0000216a <_ZN7TwoWire5flushEv>:
    216a:	08 95       	ret

0000216c <_ZN7TwoWire16onReceiveServiceEPhi>:
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	ec 01       	movw	r28, r24
    2172:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZN7TwoWire14user_onReceiveE>
    2176:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZN7TwoWire14user_onReceiveE+0x1>
    217a:	30 97       	sbiw	r30, 0x00	; 0
    217c:	f1 f0       	breq	.+60     	; 0x21ba <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    217e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    2182:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    2186:	98 17       	cp	r25, r24
    2188:	c0 f0       	brcs	.+48     	; 0x21ba <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	29 2f       	mov	r18, r25
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	26 17       	cp	r18, r22
    2192:	37 07       	cpc	r19, r23
    2194:	54 f4       	brge	.+20     	; 0x21aa <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2196:	de 01       	movw	r26, r28
    2198:	a2 0f       	add	r26, r18
    219a:	b3 1f       	adc	r27, r19
    219c:	4c 91       	ld	r20, X
    219e:	d9 01       	movw	r26, r18
    21a0:	ae 57       	subi	r26, 0x7E	; 126
    21a2:	bc 4f       	sbci	r27, 0xFC	; 252
    21a4:	4c 93       	st	X, r20
    21a6:	9f 5f       	subi	r25, 0xFF	; 255
    21a8:	f1 cf       	rjmp	.-30     	; 0x218c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    21aa:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    21ae:	60 93 80 03 	sts	0x0380, r22	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    21b2:	cb 01       	movw	r24, r22
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	09 94       	ijmp
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <_ZN7TwoWire16onRequestServiceEv>:
    21c0:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <_ZN7TwoWire14user_onRequestE>
    21c4:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <_ZN7TwoWire14user_onRequestE+0x1>
    21c8:	30 97       	sbiw	r30, 0x00	; 0
    21ca:	29 f0       	breq	.+10     	; 0x21d6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    21cc:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire13txBufferIndexE>
    21d0:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    21d4:	09 94       	ijmp
    21d6:	08 95       	ret

000021d8 <_ZN7TwoWire5writeEPKhj>:
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	7c 01       	movw	r14, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8a 01       	movw	r16, r20
    21ee:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <_ZN7TwoWire12transmittingE>
    21f2:	22 23       	and	r18, r18
    21f4:	89 f0       	breq	.+34     	; 0x2218 <_ZN7TwoWire5writeEPKhj+0x40>
    21f6:	eb 01       	movw	r28, r22
    21f8:	6b 01       	movw	r12, r22
    21fa:	c4 0e       	add	r12, r20
    21fc:	d5 1e       	adc	r13, r21
    21fe:	cc 15       	cp	r28, r12
    2200:	dd 05       	cpc	r29, r13
    2202:	69 f0       	breq	.+26     	; 0x221e <_ZN7TwoWire5writeEPKhj+0x46>
    2204:	69 91       	ld	r22, Y+
    2206:	d7 01       	movw	r26, r14
    2208:	ed 91       	ld	r30, X+
    220a:	fc 91       	ld	r31, X
    220c:	01 90       	ld	r0, Z+
    220e:	f0 81       	ld	r31, Z
    2210:	e0 2d       	mov	r30, r0
    2212:	c7 01       	movw	r24, r14
    2214:	09 95       	icall
    2216:	f3 cf       	rjmp	.-26     	; 0x21fe <_ZN7TwoWire5writeEPKhj+0x26>
    2218:	64 2f       	mov	r22, r20
    221a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <twi_transmit>
    221e:	c8 01       	movw	r24, r16
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	08 95       	ret

00002232 <_ZN7TwoWire5writeEh>:
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	1f 92       	push	r1
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	69 83       	std	Y+1, r22	; 0x01
    223e:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <_ZN7TwoWire12transmittingE>
    2242:	22 23       	and	r18, r18
    2244:	d1 f0       	breq	.+52     	; 0x227a <_ZN7TwoWire5writeEh+0x48>
    2246:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    224a:	20 32       	cpi	r18, 0x20	; 32
    224c:	40 f0       	brcs	.+16     	; 0x225e <_ZN7TwoWire5writeEh+0x2c>
    224e:	21 e0       	ldi	r18, 0x01	; 1
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	fc 01       	movw	r30, r24
    2254:	33 83       	std	Z+3, r19	; 0x03
    2256:	22 83       	std	Z+2, r18	; 0x02
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	15 c0       	rjmp	.+42     	; 0x2288 <_ZN7TwoWire5writeEh+0x56>
    225e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <_ZN7TwoWire13txBufferIndexE>
    2262:	e8 2f       	mov	r30, r24
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	e1 5a       	subi	r30, 0xA1	; 161
    2268:	fc 4f       	sbci	r31, 0xFC	; 252
    226a:	99 81       	ldd	r25, Y+1	; 0x01
    226c:	90 83       	st	Z, r25
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_ZN7TwoWire13txBufferIndexE>
    2274:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    2278:	05 c0       	rjmp	.+10     	; 0x2284 <_ZN7TwoWire5writeEh+0x52>
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	ce 01       	movw	r24, r28
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <twi_transmit>
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0f 90       	pop	r0
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <_ZN7TwoWireC1Ev>:
    2290:	fc 01       	movw	r30, r24
    2292:	13 82       	std	Z+3, r1	; 0x03
    2294:	12 82       	std	Z+2, r1	; 0x02
    2296:	88 ee       	ldi	r24, 0xE8	; 232
    2298:	93 e0       	ldi	r25, 0x03	; 3
    229a:	a0 e0       	ldi	r26, 0x00	; 0
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	84 83       	std	Z+4, r24	; 0x04
    22a0:	95 83       	std	Z+5, r25	; 0x05
    22a2:	a6 83       	std	Z+6, r26	; 0x06
    22a4:	b7 83       	std	Z+7, r27	; 0x07
    22a6:	8b e6       	ldi	r24, 0x6B	; 107
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	08 95       	ret

000022b0 <_ZN7TwoWire5beginEv>:
    22b0:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    22b4:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    22b8:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire13txBufferIndexE>
    22bc:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    22c0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <twi_init>
    22c4:	80 ee       	ldi	r24, 0xE0	; 224
    22c6:	90 e1       	ldi	r25, 0x10	; 16
    22c8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <twi_attachSlaveTxEvent>
    22cc:	86 eb       	ldi	r24, 0xB6	; 182
    22ce:	90 e1       	ldi	r25, 0x10	; 16
    22d0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <twi_attachSlaveRxEvent>

000022d4 <_ZN7TwoWire17beginTransmissionEh>:
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <_ZN7TwoWire12transmittingE>
    22da:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <_ZN7TwoWire9txAddressE>
    22de:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire13txBufferIndexE>
    22e2:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    22e6:	08 95       	ret

000022e8 <_ZN7TwoWire17beginTransmissionEi>:
    22e8:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <_ZN7TwoWire17beginTransmissionEh>

000022ec <_ZN7TwoWire15endTransmissionEh>:
    22ec:	0f 93       	push	r16
    22ee:	06 2f       	mov	r16, r22
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	40 91 5d 03 	lds	r20, 0x035D	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    22f6:	6f e5       	ldi	r22, 0x5F	; 95
    22f8:	73 e0       	ldi	r23, 0x03	; 3
    22fa:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <_ZN7TwoWire9txAddressE>
    22fe:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <twi_writeTo>
    2302:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire13txBufferIndexE>
    2306:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN7TwoWire14txBufferLengthE>
    230a:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN7TwoWire12transmittingE>
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <_ZN7TwoWire11requestFromEhhmhh>:
    2312:	4f 92       	push	r4
    2314:	5f 92       	push	r5
    2316:	6f 92       	push	r6
    2318:	7f 92       	push	r7
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	5c 01       	movw	r10, r24
    232e:	f6 2e       	mov	r15, r22
    2330:	d4 2f       	mov	r29, r20
    2332:	28 01       	movw	r4, r16
    2334:	39 01       	movw	r6, r18
    2336:	ee 20       	and	r14, r14
    2338:	21 f1       	breq	.+72     	; 0x2382 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    233a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_ZN7TwoWire17beginTransmissionEh>
    233e:	ce 2d       	mov	r28, r14
    2340:	c4 30       	cpi	r28, 0x04	; 4
    2342:	08 f0       	brcs	.+2      	; 0x2346 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2344:	c3 e0       	ldi	r28, 0x03	; 3
    2346:	c1 50       	subi	r28, 0x01	; 1
    2348:	c0 f0       	brcs	.+48     	; 0x237a <_ZN7TwoWire11requestFromEhhmhh+0x68>
    234a:	28 e0       	ldi	r18, 0x08	; 8
    234c:	c2 9f       	mul	r28, r18
    234e:	c0 01       	movw	r24, r0
    2350:	11 24       	eor	r1, r1
    2352:	a3 01       	movw	r20, r6
    2354:	92 01       	movw	r18, r4
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2358:	56 95       	lsr	r21
    235a:	47 95       	ror	r20
    235c:	37 95       	ror	r19
    235e:	27 95       	ror	r18
    2360:	8a 95       	dec	r24
    2362:	d2 f7       	brpl	.-12     	; 0x2358 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2364:	ca 01       	movw	r24, r20
    2366:	b9 01       	movw	r22, r18
    2368:	d5 01       	movw	r26, r10
    236a:	ed 91       	ld	r30, X+
    236c:	fc 91       	ld	r31, X
    236e:	01 90       	ld	r0, Z+
    2370:	f0 81       	ld	r31, Z
    2372:	e0 2d       	mov	r30, r0
    2374:	c5 01       	movw	r24, r10
    2376:	09 95       	icall
    2378:	e6 cf       	rjmp	.-52     	; 0x2346 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	c5 01       	movw	r24, r10
    237e:	0e 94 76 11 	call	0x22ec	; 0x22ec <_ZN7TwoWire15endTransmissionEh>
    2382:	4d 2f       	mov	r20, r29
    2384:	d1 32       	cpi	r29, 0x21	; 33
    2386:	08 f0       	brcs	.+2      	; 0x238a <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	2c 2d       	mov	r18, r12
    238c:	62 e8       	ldi	r22, 0x82	; 130
    238e:	73 e0       	ldi	r23, 0x03	; 3
    2390:	8f 2d       	mov	r24, r15
    2392:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <twi_readFrom>
    2396:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <_ZN7TwoWire13rxBufferIndexE>
    239a:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <_ZN7TwoWire14rxBufferLengthE>
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	1f 91       	pop	r17
    23a4:	0f 91       	pop	r16
    23a6:	ff 90       	pop	r15
    23a8:	ef 90       	pop	r14
    23aa:	cf 90       	pop	r12
    23ac:	bf 90       	pop	r11
    23ae:	af 90       	pop	r10
    23b0:	7f 90       	pop	r7
    23b2:	6f 90       	pop	r6
    23b4:	5f 90       	pop	r5
    23b6:	4f 90       	pop	r4
    23b8:	08 95       	ret

000023ba <_ZN7TwoWire11requestFromEhhh>:
    23ba:	cf 92       	push	r12
    23bc:	ef 92       	push	r14
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	c2 2e       	mov	r12, r18
    23c4:	e1 2c       	mov	r14, r1
    23c6:	00 e0       	ldi	r16, 0x00	; 0
    23c8:	10 e0       	ldi	r17, 0x00	; 0
    23ca:	98 01       	movw	r18, r16
    23cc:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire11requestFromEhhmhh>
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ef 90       	pop	r14
    23d6:	cf 90       	pop	r12
    23d8:	08 95       	ret

000023da <_ZN7TwoWire11requestFromEii>:
    23da:	21 e0       	ldi	r18, 0x01	; 1
    23dc:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <_ZN7TwoWire11requestFromEhhh>

000023e0 <_ZN7TwoWire15endTransmissionEv>:
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <_ZN7TwoWire15endTransmissionEh>

000023e6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    23e6:	8c e4       	ldi	r24, 0x4C	; 76
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	0c 94 48 11 	jmp	0x2290	; 0x2290 <_ZN7TwoWireC1Ev>

000023ee <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    23ee:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_mockData>
    23f2:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_mockData+0x1>
    23f6:	0e 94 9a 1b 	call	0x3734	; 0x3734 <free>
	
	//Do verification test
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    23fa:	6d ec       	ldi	r22, 0xCD	; 205
    23fc:	74 e0       	ldi	r23, 0x04	; 4
    23fe:	84 ea       	ldi	r24, 0xA4	; 164
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	0c 94 98 14 	jmp	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>

00002406 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

	//delay(5000);
	
	RM_LOGLN(F("TEST: Checking rssi..."));
    240c:	66 eb       	ldi	r22, 0xB6	; 182
    240e:	74 e0       	ldi	r23, 0x04	; 4
    2410:	84 ea       	ldi	r24, 0xA4	; 164
    2412:	93 e0       	ldi	r25, 0x03	; 3
    2414:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
    //uint16_t statuscode;
    //int16_t length;
    //char url[29] = "http://cars.khuddam.org.uk/r";
	//url[28]=0; //end

    Serial.println(F("****"));
    2418:	61 eb       	ldi	r22, 0xB1	; 177
    241a:	74 e0       	ldi	r23, 0x04	; 4
    241c:	84 ea       	ldi	r24, 0xA4	; 164
    241e:	93 e0       	ldi	r25, 0x03	; 3
    2420:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    2424:	84 e1       	ldi	r24, 0x14	; 20
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 02 1b 	call	0x3604	; 0x3604 <malloc>
    242c:	fc 01       	movw	r30, r24
    242e:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <_mockData+0x1>
    2432:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	92 83       	std	Z+2, r25	; 0x02
    243c:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    243e:	8a e0       	ldi	r24, 0x0A	; 10
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	96 83       	std	Z+6, r25	; 0x06
    2444:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    2446:	84 e6       	ldi	r24, 0x64	; 100
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	94 83       	std	Z+4, r25	; 0x04
    244c:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    244e:	83 e3       	ldi	r24, 0x33	; 51
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	90 87       	std	Z+8, r25	; 0x08
    2454:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	94 87       	std	Z+12, r25	; 0x0c
    2460:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    2462:	84 e1       	ldi	r24, 0x14	; 20
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	90 8b       	std	Z+16, r25	; 0x10
    2468:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    246a:	88 ec       	ldi	r24, 0xC8	; 200
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	96 87       	std	Z+14, r25	; 0x0e
    2470:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    2472:	84 e3       	ldi	r24, 0x34	; 52
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	92 8b       	std	Z+18, r25	; 0x12
    2478:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    247a:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    247c:	6a e8       	ldi	r22, 0x8A	; 138
    247e:	74 e0       	ldi	r23, 0x04	; 4
    2480:	84 ea       	ldi	r24, 0xA4	; 164
    2482:	93 e0       	ldi	r25, 0x03	; 3
    2484:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    2488:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_mockData>
    248c:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_mockData+0x1>
    2490:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    2494:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_mockData>
    2498:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_mockData+0x1>
    249c:	0a 96       	adiw	r24, 0x0a	; 10
    249e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    24a2:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_mockData>
    24a6:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_mockData+0x1>
    24aa:	99 83       	std	Y+1, r25	; 0x01
    24ac:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	8a 83       	std	Y+2, r24	; 0x02
			
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	08 95       	ret

000024b8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    24b8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    24ba:	91 8d       	ldd	r25, Z+25	; 0x19
    24bc:	22 8d       	ldd	r18, Z+26	; 0x1a
    24be:	89 2f       	mov	r24, r25
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	80 5c       	subi	r24, 0xC0	; 192
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	82 1b       	sub	r24, r18
    24c8:	91 09       	sbc	r25, r1
}
    24ca:	8f 73       	andi	r24, 0x3F	; 63
    24cc:	99 27       	eor	r25, r25
    24ce:	08 95       	ret

000024d0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    24d0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    24d2:	91 8d       	ldd	r25, Z+25	; 0x19
    24d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    24d6:	98 17       	cp	r25, r24
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    24da:	82 8d       	ldd	r24, Z+26	; 0x1a
    24dc:	e8 0f       	add	r30, r24
    24de:	f1 1d       	adc	r31, r1
    24e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    24ea:	08 95       	ret

000024ec <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    24ec:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    24ee:	91 8d       	ldd	r25, Z+25	; 0x19
    24f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    24f2:	98 17       	cp	r25, r24
    24f4:	61 f0       	breq	.+24     	; 0x250e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    24f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    24f8:	df 01       	movw	r26, r30
    24fa:	a8 0f       	add	r26, r24
    24fc:	b1 1d       	adc	r27, r1
    24fe:	5d 96       	adiw	r26, 0x1d	; 29
    2500:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2502:	92 8d       	ldd	r25, Z+26	; 0x1a
    2504:	9f 5f       	subi	r25, 0xFF	; 255
    2506:	9f 73       	andi	r25, 0x3F	; 63
    2508:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2512:	08 95       	ret

00002514 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2514:	8f ed       	ldi	r24, 0xDF	; 223
    2516:	93 e1       	ldi	r25, 0x13	; 19
    2518:	89 2b       	or	r24, r25
    251a:	49 f0       	breq	.+18     	; 0x252e <_Z14serialEventRunv+0x1a>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	89 2b       	or	r24, r25
    2522:	29 f0       	breq	.+10     	; 0x252e <_Z14serialEventRunv+0x1a>
    2524:	0e 94 df 13 	call	0x27be	; 0x27be <_Z17Serial0_availablev>
    2528:	81 11       	cpse	r24, r1
    252a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    252e:	08 95       	ret

00002530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2530:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2532:	84 8d       	ldd	r24, Z+28	; 0x1c
    2534:	df 01       	movw	r26, r30
    2536:	a8 0f       	add	r26, r24
    2538:	b1 1d       	adc	r27, r1
    253a:	a3 5a       	subi	r26, 0xA3	; 163
    253c:	bf 4f       	sbci	r27, 0xFF	; 255
    253e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2540:	84 8d       	ldd	r24, Z+28	; 0x1c
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	8f 73       	andi	r24, 0x3F	; 63
    2548:	99 27       	eor	r25, r25
    254a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    254c:	a6 89       	ldd	r26, Z+22	; 0x16
    254e:	b7 89       	ldd	r27, Z+23	; 0x17
    2550:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2552:	a0 89       	ldd	r26, Z+16	; 0x10
    2554:	b1 89       	ldd	r27, Z+17	; 0x11
    2556:	8c 91       	ld	r24, X
    2558:	80 64       	ori	r24, 0x40	; 64
    255a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    255c:	93 8d       	ldd	r25, Z+27	; 0x1b
    255e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2560:	98 13       	cpse	r25, r24
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2564:	02 88       	ldd	r0, Z+18	; 0x12
    2566:	f3 89       	ldd	r31, Z+19	; 0x13
    2568:	e0 2d       	mov	r30, r0
    256a:	80 81       	ld	r24, Z
    256c:	8f 7d       	andi	r24, 0xDF	; 223
    256e:	80 83       	st	Z, r24
    2570:	08 95       	ret

00002572 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	ec 01       	movw	r28, r24
  _written = true;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2584:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2586:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2588:	98 13       	cpse	r25, r24
    258a:	05 c0       	rjmp	.+10     	; 0x2596 <_ZN14HardwareSerial5writeEh+0x24>
    258c:	e8 89       	ldd	r30, Y+16	; 0x10
    258e:	f9 89       	ldd	r31, Y+17	; 0x11
    2590:	80 81       	ld	r24, Z
    2592:	85 fd       	sbrc	r24, 5
    2594:	24 c0       	rjmp	.+72     	; 0x25de <_ZN14HardwareSerial5writeEh+0x6c>
    2596:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2598:	0b 8d       	ldd	r16, Y+27	; 0x1b
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	0f 5f       	subi	r16, 0xFF	; 255
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	0f 73       	andi	r16, 0x3F	; 63
    25a2:	11 27       	eor	r17, r17
    25a4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    25a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25a8:	e8 12       	cpse	r14, r24
    25aa:	0c c0       	rjmp	.+24     	; 0x25c4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	07 fc       	sbrc	r0, 7
    25b0:	fa cf       	rjmp	.-12     	; 0x25a6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    25b2:	e8 89       	ldd	r30, Y+16	; 0x10
    25b4:	f9 89       	ldd	r31, Y+17	; 0x11
    25b6:	80 81       	ld	r24, Z
    25b8:	85 ff       	sbrs	r24, 5
    25ba:	f5 cf       	rjmp	.-22     	; 0x25a6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    25bc:	ce 01       	movw	r24, r28
    25be:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    25c2:	f1 cf       	rjmp	.-30     	; 0x25a6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    25c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c6:	fe 01       	movw	r30, r28
    25c8:	e8 0f       	add	r30, r24
    25ca:	f1 1d       	adc	r31, r1
    25cc:	e3 5a       	subi	r30, 0xA3	; 163
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    25d2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    25d4:	ea 89       	ldd	r30, Y+18	; 0x12
    25d6:	fb 89       	ldd	r31, Y+19	; 0x13
    25d8:	80 81       	ld	r24, Z
    25da:	80 62       	ori	r24, 0x20	; 32
    25dc:	07 c0       	rjmp	.+14     	; 0x25ec <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    25de:	ee 89       	ldd	r30, Y+22	; 0x16
    25e0:	ff 89       	ldd	r31, Y+23	; 0x17
    25e2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    25e4:	e8 89       	ldd	r30, Y+16	; 0x10
    25e6:	f9 89       	ldd	r31, Y+17	; 0x11
    25e8:	80 81       	ld	r24, Z
    25ea:	80 64       	ori	r24, 0x40	; 64
    25ec:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	08 95       	ret

00002600 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2606:	88 8d       	ldd	r24, Y+24	; 0x18
    2608:	88 23       	and	r24, r24
    260a:	c9 f0       	breq	.+50     	; 0x263e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    260c:	ea 89       	ldd	r30, Y+18	; 0x12
    260e:	fb 89       	ldd	r31, Y+19	; 0x13
    2610:	80 81       	ld	r24, Z
    2612:	85 fd       	sbrc	r24, 5
    2614:	05 c0       	rjmp	.+10     	; 0x2620 <_ZN14HardwareSerial5flushEv+0x20>
    2616:	a8 89       	ldd	r26, Y+16	; 0x10
    2618:	b9 89       	ldd	r27, Y+17	; 0x11
    261a:	8c 91       	ld	r24, X
    261c:	86 fd       	sbrc	r24, 6
    261e:	0f c0       	rjmp	.+30     	; 0x263e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	07 fc       	sbrc	r0, 7
    2624:	f5 cf       	rjmp	.-22     	; 0x2610 <_ZN14HardwareSerial5flushEv+0x10>
    2626:	80 81       	ld	r24, Z
    2628:	85 ff       	sbrs	r24, 5
    262a:	f2 cf       	rjmp	.-28     	; 0x2610 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    262c:	a8 89       	ldd	r26, Y+16	; 0x10
    262e:	b9 89       	ldd	r27, Y+17	; 0x11
    2630:	8c 91       	ld	r24, X
    2632:	85 ff       	sbrs	r24, 5
    2634:	ed cf       	rjmp	.-38     	; 0x2610 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2636:	ce 01       	movw	r24, r28
    2638:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    263c:	e7 cf       	rjmp	.-50     	; 0x260c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2644:	cf 92       	push	r12
    2646:	df 92       	push	r13
    2648:	ef 92       	push	r14
    264a:	ff 92       	push	r15
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	ec 01       	movw	r28, r24
    2654:	6a 01       	movw	r12, r20
    2656:	7b 01       	movw	r14, r22
    2658:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    265a:	e8 89       	ldd	r30, Y+16	; 0x10
    265c:	f9 89       	ldd	r31, Y+17	; 0x11
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2662:	41 15       	cp	r20, r1
    2664:	51 4e       	sbci	r21, 0xE1	; 225
    2666:	61 05       	cpc	r22, r1
    2668:	71 05       	cpc	r23, r1
    266a:	b1 f0       	breq	.+44     	; 0x2698 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	79 e0       	ldi	r23, 0x09	; 9
    2670:	8d e3       	ldi	r24, 0x3D	; 61
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a7 01       	movw	r20, r14
    2676:	96 01       	movw	r18, r12
    2678:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__udivmodsi4>
    267c:	da 01       	movw	r26, r20
    267e:	c9 01       	movw	r24, r18
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	a1 09       	sbc	r26, r1
    2684:	b1 09       	sbc	r27, r1
    2686:	b6 95       	lsr	r27
    2688:	a7 95       	ror	r26
    268a:	97 95       	ror	r25
    268c:	87 95       	ror	r24
    268e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2690:	21 15       	cp	r18, r1
    2692:	80 e1       	ldi	r24, 0x10	; 16
    2694:	38 07       	cpc	r19, r24
    2696:	a8 f0       	brcs	.+42     	; 0x26c2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2698:	e8 89       	ldd	r30, Y+16	; 0x10
    269a:	f9 89       	ldd	r31, Y+17	; 0x11
    269c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    269e:	60 e8       	ldi	r22, 0x80	; 128
    26a0:	74 e8       	ldi	r23, 0x84	; 132
    26a2:	8e e1       	ldi	r24, 0x1E	; 30
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a7 01       	movw	r20, r14
    26a8:	96 01       	movw	r18, r12
    26aa:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__udivmodsi4>
    26ae:	da 01       	movw	r26, r20
    26b0:	c9 01       	movw	r24, r18
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	a1 09       	sbc	r26, r1
    26b6:	b1 09       	sbc	r27, r1
    26b8:	b6 95       	lsr	r27
    26ba:	a7 95       	ror	r26
    26bc:	97 95       	ror	r25
    26be:	87 95       	ror	r24
    26c0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    26c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    26c4:	fd 85       	ldd	r31, Y+13	; 0x0d
    26c6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    26c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    26ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    26cc:	20 83       	st	Z, r18

  _written = false;
    26ce:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    26d0:	ec 89       	ldd	r30, Y+20	; 0x14
    26d2:	fd 89       	ldd	r31, Y+21	; 0x15
    26d4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    26d6:	ea 89       	ldd	r30, Y+18	; 0x12
    26d8:	fb 89       	ldd	r31, Y+19	; 0x13
    26da:	80 81       	ld	r24, Z
    26dc:	80 61       	ori	r24, 0x10	; 16
    26de:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    26e0:	ea 89       	ldd	r30, Y+18	; 0x12
    26e2:	fb 89       	ldd	r31, Y+19	; 0x13
    26e4:	80 81       	ld	r24, Z
    26e6:	88 60       	ori	r24, 0x08	; 8
    26e8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    26ea:	ea 89       	ldd	r30, Y+18	; 0x12
    26ec:	fb 89       	ldd	r31, Y+19	; 0x13
    26ee:	80 81       	ld	r24, Z
    26f0:	80 68       	ori	r24, 0x80	; 128
    26f2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    26f4:	ea 89       	ldd	r30, Y+18	; 0x12
    26f6:	fb 89       	ldd	r31, Y+19	; 0x13
    26f8:	80 81       	ld	r24, Z
    26fa:	8f 7d       	andi	r24, 0xDF	; 223
    26fc:	80 83       	st	Z, r24
}
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
    270c:	08 95       	ret

0000270e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    270e:	1f 92       	push	r1
    2710:	0f 92       	push	r0
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	0f 92       	push	r0
    2716:	11 24       	eor	r1, r1
    2718:	2f 93       	push	r18
    271a:	8f 93       	push	r24
    271c:	9f 93       	push	r25
    271e:	ef 93       	push	r30
    2720:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2722:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <Serial+0x10>
    2726:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <Serial+0x11>
    272a:	80 81       	ld	r24, Z
    272c:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <Serial+0x16>
    2730:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <Serial+0x17>
    2734:	82 fd       	sbrc	r24, 2
    2736:	12 c0       	rjmp	.+36     	; 0x275c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2738:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    273a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <Serial+0x19>
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2742:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <Serial+0x1a>
    2746:	82 17       	cp	r24, r18
    2748:	51 f0       	breq	.+20     	; 0x275e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    274a:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <Serial+0x19>
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	ec 55       	subi	r30, 0x5C	; 92
    2752:	fc 4f       	sbci	r31, 0xFC	; 252
    2754:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2756:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <Serial+0x19>
    275a:	01 c0       	rjmp	.+2      	; 0x275e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    275c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    275e:	ff 91       	pop	r31
    2760:	ef 91       	pop	r30
    2762:	9f 91       	pop	r25
    2764:	8f 91       	pop	r24
    2766:	2f 91       	pop	r18
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	0f 90       	pop	r0
    276e:	1f 90       	pop	r1
    2770:	18 95       	reti

00002772 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	2f 93       	push	r18
    277e:	3f 93       	push	r19
    2780:	4f 93       	push	r20
    2782:	5f 93       	push	r21
    2784:	6f 93       	push	r22
    2786:	7f 93       	push	r23
    2788:	8f 93       	push	r24
    278a:	9f 93       	push	r25
    278c:	af 93       	push	r26
    278e:	bf 93       	push	r27
    2790:	ef 93       	push	r30
    2792:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2794:	84 ea       	ldi	r24, 0xA4	; 164
    2796:	93 e0       	ldi	r25, 0x03	; 3
    2798:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    279c:	ff 91       	pop	r31
    279e:	ef 91       	pop	r30
    27a0:	bf 91       	pop	r27
    27a2:	af 91       	pop	r26
    27a4:	9f 91       	pop	r25
    27a6:	8f 91       	pop	r24
    27a8:	7f 91       	pop	r23
    27aa:	6f 91       	pop	r22
    27ac:	5f 91       	pop	r21
    27ae:	4f 91       	pop	r20
    27b0:	3f 91       	pop	r19
    27b2:	2f 91       	pop	r18
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	0f 90       	pop	r0
    27ba:	1f 90       	pop	r1
    27bc:	18 95       	reti

000027be <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    27be:	84 ea       	ldi	r24, 0xA4	; 164
    27c0:	93 e0       	ldi	r25, 0x03	; 3
    27c2:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <_ZN14HardwareSerial9availableEv>
    27c6:	21 e0       	ldi	r18, 0x01	; 1
    27c8:	89 2b       	or	r24, r25
    27ca:	09 f4       	brne	.+2      	; 0x27ce <_Z17Serial0_availablev+0x10>
    27cc:	20 e0       	ldi	r18, 0x00	; 0
}
    27ce:	82 2f       	mov	r24, r18
    27d0:	08 95       	ret

000027d2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    27d2:	e4 ea       	ldi	r30, 0xA4	; 164
    27d4:	f3 e0       	ldi	r31, 0x03	; 3
    27d6:	13 82       	std	Z+3, r1	; 0x03
    27d8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    27da:	88 ee       	ldi	r24, 0xE8	; 232
    27dc:	93 e0       	ldi	r25, 0x03	; 3
    27de:	a0 e0       	ldi	r26, 0x00	; 0
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	84 83       	std	Z+4, r24	; 0x04
    27e4:	95 83       	std	Z+5, r25	; 0x05
    27e6:	a6 83       	std	Z+6, r26	; 0x06
    27e8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    27ea:	8b e7       	ldi	r24, 0x7B	; 123
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	85 ec       	ldi	r24, 0xC5	; 197
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	95 87       	std	Z+13, r25	; 0x0d
    27f8:	84 87       	std	Z+12, r24	; 0x0c
    27fa:	84 ec       	ldi	r24, 0xC4	; 196
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	97 87       	std	Z+15, r25	; 0x0f
    2800:	86 87       	std	Z+14, r24	; 0x0e
    2802:	80 ec       	ldi	r24, 0xC0	; 192
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	91 8b       	std	Z+17, r25	; 0x11
    2808:	80 8b       	std	Z+16, r24	; 0x10
    280a:	81 ec       	ldi	r24, 0xC1	; 193
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	93 8b       	std	Z+19, r25	; 0x13
    2810:	82 8b       	std	Z+18, r24	; 0x12
    2812:	82 ec       	ldi	r24, 0xC2	; 194
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	95 8b       	std	Z+21, r25	; 0x15
    2818:	84 8b       	std	Z+20, r24	; 0x14
    281a:	86 ec       	ldi	r24, 0xC6	; 198
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	97 8b       	std	Z+23, r25	; 0x17
    2820:	86 8b       	std	Z+22, r24	; 0x16
    2822:	11 8e       	std	Z+25, r1	; 0x19
    2824:	12 8e       	std	Z+26, r1	; 0x1a
    2826:	13 8e       	std	Z+27, r1	; 0x1b
    2828:	14 8e       	std	Z+28, r1	; 0x1c
    282a:	08 95       	ret

0000282c <initVariant>:
    282c:	08 95       	ret

0000282e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    282e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <init>

	initVariant();
    2832:	0e 94 16 14 	call	0x282c	; 0x282c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2836:	0e 94 ba 0a 	call	0x1574	; 0x1574 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    283a:	ca e8       	ldi	r28, 0x8A	; 138
    283c:	d2 e1       	ldi	r29, 0x12	; 18
#endif
	
	setup();
    
	for (;;) {
		loop();
    283e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <loop>
		if (serialEventRun) serialEventRun();
    2842:	20 97       	sbiw	r28, 0x00	; 0
    2844:	e1 f3       	breq	.-8      	; 0x283e <main+0x10>
    2846:	0e 94 8a 12 	call	0x2514	; 0x2514 <_Z14serialEventRunv>
    284a:	f9 cf       	rjmp	.-14     	; 0x283e <main+0x10>

0000284c <_Znwj>:
    284c:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <malloc>

00002850 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2850:	cf 92       	push	r12
    2852:	df 92       	push	r13
    2854:	ef 92       	push	r14
    2856:	ff 92       	push	r15
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	6c 01       	movw	r12, r24
    2862:	7a 01       	movw	r14, r20
    2864:	8b 01       	movw	r16, r22
    2866:	c0 e0       	ldi	r28, 0x00	; 0
    2868:	d0 e0       	ldi	r29, 0x00	; 0
    286a:	ce 15       	cp	r28, r14
    286c:	df 05       	cpc	r29, r15
    286e:	81 f0       	breq	.+32     	; 0x2890 <_ZN5Print5writeEPKhj+0x40>
    2870:	d8 01       	movw	r26, r16
    2872:	6d 91       	ld	r22, X+
    2874:	8d 01       	movw	r16, r26
    2876:	d6 01       	movw	r26, r12
    2878:	ed 91       	ld	r30, X+
    287a:	fc 91       	ld	r31, X
    287c:	01 90       	ld	r0, Z+
    287e:	f0 81       	ld	r31, Z
    2880:	e0 2d       	mov	r30, r0
    2882:	c6 01       	movw	r24, r12
    2884:	09 95       	icall
    2886:	89 2b       	or	r24, r25
    2888:	11 f0       	breq	.+4      	; 0x288e <_ZN5Print5writeEPKhj+0x3e>
    288a:	21 96       	adiw	r28, 0x01	; 1
    288c:	ee cf       	rjmp	.-36     	; 0x286a <_ZN5Print5writeEPKhj+0x1a>
    288e:	7e 01       	movw	r14, r28
    2890:	c7 01       	movw	r24, r14
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	08 95       	ret

000028a4 <_ZN5Print5writeEPKc>:
    28a4:	61 15       	cp	r22, r1
    28a6:	71 05       	cpc	r23, r1
    28a8:	79 f0       	breq	.+30     	; 0x28c8 <_ZN5Print5writeEPKc+0x24>
    28aa:	fb 01       	movw	r30, r22
    28ac:	01 90       	ld	r0, Z+
    28ae:	00 20       	and	r0, r0
    28b0:	e9 f7       	brne	.-6      	; 0x28ac <_ZN5Print5writeEPKc+0x8>
    28b2:	31 97       	sbiw	r30, 0x01	; 1
    28b4:	af 01       	movw	r20, r30
    28b6:	46 1b       	sub	r20, r22
    28b8:	57 0b       	sbc	r21, r23
    28ba:	dc 01       	movw	r26, r24
    28bc:	ed 91       	ld	r30, X+
    28be:	fc 91       	ld	r31, X
    28c0:	02 80       	ldd	r0, Z+2	; 0x02
    28c2:	f3 81       	ldd	r31, Z+3	; 0x03
    28c4:	e0 2d       	mov	r30, r0
    28c6:	09 94       	ijmp
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	08 95       	ret

000028ce <_ZN5Print5printEPK19__FlashStringHelper>:
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	8c 01       	movw	r16, r24
    28dc:	7b 01       	movw	r14, r22
    28de:	c0 e0       	ldi	r28, 0x00	; 0
    28e0:	d0 e0       	ldi	r29, 0x00	; 0
    28e2:	f7 01       	movw	r30, r14
    28e4:	ec 0f       	add	r30, r28
    28e6:	fd 1f       	adc	r31, r29
    28e8:	64 91       	lpm	r22, Z
    28ea:	66 23       	and	r22, r22
    28ec:	61 f0       	breq	.+24     	; 0x2906 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    28ee:	d8 01       	movw	r26, r16
    28f0:	ed 91       	ld	r30, X+
    28f2:	fc 91       	ld	r31, X
    28f4:	01 90       	ld	r0, Z+
    28f6:	f0 81       	ld	r31, Z
    28f8:	e0 2d       	mov	r30, r0
    28fa:	c8 01       	movw	r24, r16
    28fc:	09 95       	icall
    28fe:	89 2b       	or	r24, r25
    2900:	11 f0       	breq	.+4      	; 0x2906 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2902:	21 96       	adiw	r28, 0x01	; 1
    2904:	ee cf       	rjmp	.-36     	; 0x28e2 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2906:	ce 01       	movw	r24, r28
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	08 95       	ret

00002916 <_ZN5Print5printEPKc>:
    2916:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <_ZN5Print5writeEPKc>

0000291a <_ZN5Print5printEc>:
    291a:	dc 01       	movw	r26, r24
    291c:	ed 91       	ld	r30, X+
    291e:	fc 91       	ld	r31, X
    2920:	01 90       	ld	r0, Z+
    2922:	f0 81       	ld	r31, Z
    2924:	e0 2d       	mov	r30, r0
    2926:	09 94       	ijmp

00002928 <_ZN5Print7printlnEv>:
    2928:	67 e8       	ldi	r22, 0x87	; 135
    292a:	71 e0       	ldi	r23, 0x01	; 1
    292c:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <_ZN5Print5writeEPKc>

00002930 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ec 01       	movw	r28, r24
    293a:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN5Print5printEPK19__FlashStringHelper>
    293e:	8c 01       	movw	r16, r24
    2940:	ce 01       	movw	r24, r28
    2942:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN5Print7printlnEv>
    2946:	80 0f       	add	r24, r16
    2948:	91 1f       	adc	r25, r17
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <_ZN5Print7printlnEPKc>:
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	ec 01       	movw	r28, r24
    295e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN5Print5writeEPKc>
    2962:	8c 01       	movw	r16, r24
    2964:	ce 01       	movw	r24, r28
    2966:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN5Print7printlnEv>
    296a:	80 0f       	add	r24, r16
    296c:	91 1f       	adc	r25, r17
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	1f 91       	pop	r17
    2974:	0f 91       	pop	r16
    2976:	08 95       	ret

00002978 <_ZN5Print7printlnEc>:
    2978:	0f 93       	push	r16
    297a:	1f 93       	push	r17
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	ec 01       	movw	r28, r24
    2982:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN5Print5printEc>
    2986:	8c 01       	movw	r16, r24
    2988:	ce 01       	movw	r24, r28
    298a:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN5Print7printlnEv>
    298e:	80 0f       	add	r24, r16
    2990:	91 1f       	adc	r25, r17
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	08 95       	ret

0000299c <_ZN5Print11printNumberEmh>:
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	ef 92       	push	r14
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	a1 97       	sbiw	r28, 0x21	; 33
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	7c 01       	movw	r14, r24
    29c2:	fa 01       	movw	r30, r20
    29c4:	cb 01       	movw	r24, r22
    29c6:	19 a2       	std	Y+33, r1	; 0x21
    29c8:	22 30       	cpi	r18, 0x02	; 2
    29ca:	08 f4       	brcc	.+2      	; 0x29ce <_ZN5Print11printNumberEmh+0x32>
    29cc:	2a e0       	ldi	r18, 0x0A	; 10
    29ce:	8e 01       	movw	r16, r28
    29d0:	0f 5d       	subi	r16, 0xDF	; 223
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	82 2e       	mov	r8, r18
    29d6:	91 2c       	mov	r9, r1
    29d8:	a1 2c       	mov	r10, r1
    29da:	b1 2c       	mov	r11, r1
    29dc:	bf 01       	movw	r22, r30
    29de:	a5 01       	movw	r20, r10
    29e0:	94 01       	movw	r18, r8
    29e2:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__udivmodsi4>
    29e6:	f9 01       	movw	r30, r18
    29e8:	ca 01       	movw	r24, r20
    29ea:	01 50       	subi	r16, 0x01	; 1
    29ec:	11 09       	sbc	r17, r1
    29ee:	6a 30       	cpi	r22, 0x0A	; 10
    29f0:	10 f4       	brcc	.+4      	; 0x29f6 <_ZN5Print11printNumberEmh+0x5a>
    29f2:	60 5d       	subi	r22, 0xD0	; 208
    29f4:	01 c0       	rjmp	.+2      	; 0x29f8 <_ZN5Print11printNumberEmh+0x5c>
    29f6:	69 5c       	subi	r22, 0xC9	; 201
    29f8:	d8 01       	movw	r26, r16
    29fa:	6c 93       	st	X, r22
    29fc:	23 2b       	or	r18, r19
    29fe:	24 2b       	or	r18, r20
    2a00:	25 2b       	or	r18, r21
    2a02:	61 f7       	brne	.-40     	; 0x29dc <_ZN5Print11printNumberEmh+0x40>
    2a04:	b8 01       	movw	r22, r16
    2a06:	c7 01       	movw	r24, r14
    2a08:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN5Print5writeEPKc>
    2a0c:	a1 96       	adiw	r28, 0x21	; 33
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	9f 90       	pop	r9
    2a2a:	8f 90       	pop	r8
    2a2c:	08 95       	ret

00002a2e <_ZN5Print5printEmi>:
    2a2e:	21 15       	cp	r18, r1
    2a30:	31 05       	cpc	r19, r1
    2a32:	41 f4       	brne	.+16     	; 0x2a44 <_ZN5Print5printEmi+0x16>
    2a34:	dc 01       	movw	r26, r24
    2a36:	ed 91       	ld	r30, X+
    2a38:	fc 91       	ld	r31, X
    2a3a:	01 90       	ld	r0, Z+
    2a3c:	f0 81       	ld	r31, Z
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	64 2f       	mov	r22, r20
    2a42:	09 94       	ijmp
    2a44:	0c 94 ce 14 	jmp	0x299c	; 0x299c <_ZN5Print11printNumberEmh>

00002a48 <_ZN5Print5printEhi>:
    2a48:	9a 01       	movw	r18, r20
    2a4a:	46 2f       	mov	r20, r22
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <_ZN5Print5printEmi>

00002a56 <_ZN5Print7printlnEhi>:
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	ec 01       	movw	r28, r24
    2a60:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN5Print5printEhi>
    2a64:	8c 01       	movw	r16, r24
    2a66:	ce 01       	movw	r24, r28
    2a68:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN5Print7printlnEv>
    2a6c:	80 0f       	add	r24, r16
    2a6e:	91 1f       	adc	r25, r17
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	08 95       	ret

00002a7a <_ZN5Print5printEji>:
    2a7a:	9a 01       	movw	r18, r20
    2a7c:	ab 01       	movw	r20, r22
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <_ZN5Print5printEmi>

00002a86 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
  if (base == 0) {
    2a96:	21 15       	cp	r18, r1
    2a98:	31 05       	cpc	r19, r1
    2a9a:	81 f4       	brne	.+32     	; 0x2abc <_ZN5Print5printEli+0x36>
    return write(n);
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	ed 91       	ld	r30, X+
    2aa0:	fc 91       	ld	r31, X
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	f0 81       	ld	r31, Z
    2aa6:	e0 2d       	mov	r30, r0
    2aa8:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2aba:	09 94       	ijmp
  } else if (base == 10) {
    2abc:	2a 30       	cpi	r18, 0x0A	; 10
    2abe:	31 05       	cpc	r19, r1
    2ac0:	01 f5       	brne	.+64     	; 0x2b02 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    2ac2:	77 ff       	sbrs	r23, 7
    2ac4:	1d c0       	rjmp	.+58     	; 0x2b00 <_ZN5Print5printEli+0x7a>
    2ac6:	6a 01       	movw	r12, r20
    2ac8:	7b 01       	movw	r14, r22
    2aca:	ec 01       	movw	r28, r24
      int t = print('-');
    2acc:	6d e2       	ldi	r22, 0x2D	; 45
    2ace:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN5Print5printEc>
    2ad2:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2ad4:	44 27       	eor	r20, r20
    2ad6:	55 27       	eor	r21, r21
    2ad8:	ba 01       	movw	r22, r20
    2ada:	4c 19       	sub	r20, r12
    2adc:	5d 09       	sbc	r21, r13
    2ade:	6e 09       	sbc	r22, r14
    2ae0:	7f 09       	sbc	r23, r15
    2ae2:	2a e0       	ldi	r18, 0x0A	; 10
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN5Print11printNumberEmh>
    2aea:	80 0f       	add	r24, r16
    2aec:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2b00:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2b12:	0c 94 ce 14 	jmp	0x299c	; 0x299c <_ZN5Print11printNumberEmh>

00002b16 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2b16:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2b18:	ab 01       	movw	r20, r22
    2b1a:	77 0f       	add	r23, r23
    2b1c:	66 0b       	sbc	r22, r22
    2b1e:	77 0b       	sbc	r23, r23
    2b20:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_ZN5Print5printEli>

00002b24 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2b2e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN5Print5printEii>
    2b32:	8c 01       	movw	r16, r24
  n += println();
    2b34:	ce 01       	movw	r24, r28
    2b36:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN5Print7printlnEv>
  return n;
}
    2b3a:	80 0f       	add	r24, r16
    2b3c:	91 1f       	adc	r25, r17
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	08 95       	ret

00002b48 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2b48:	1f 92       	push	r1
    2b4a:	0f 92       	push	r0
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	0f 92       	push	r0
    2b50:	11 24       	eor	r1, r1
    2b52:	2f 93       	push	r18
    2b54:	3f 93       	push	r19
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <timer0_millis>
    2b62:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <timer0_millis+0x1>
    2b66:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <timer0_millis+0x2>
    2b6a:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <timer0_millis+0x3>
    2b6e:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <timer0_fract>
    2b72:	23 e0       	ldi	r18, 0x03	; 3
    2b74:	23 0f       	add	r18, r19
    2b76:	2d 37       	cpi	r18, 0x7D	; 125
    2b78:	20 f4       	brcc	.+8      	; 0x2b82 <__vector_16+0x3a>
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	a1 1d       	adc	r26, r1
    2b7e:	b1 1d       	adc	r27, r1
    2b80:	05 c0       	rjmp	.+10     	; 0x2b8c <__vector_16+0x44>
    2b82:	26 e8       	ldi	r18, 0x86	; 134
    2b84:	23 0f       	add	r18, r19
    2b86:	02 96       	adiw	r24, 0x02	; 2
    2b88:	a1 1d       	adc	r26, r1
    2b8a:	b1 1d       	adc	r27, r1
    2b8c:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <timer0_fract>
    2b90:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <timer0_millis>
    2b94:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <timer0_millis+0x1>
    2b98:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <timer0_millis+0x2>
    2b9c:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <timer0_millis+0x3>
    2ba0:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <timer0_overflow_count>
    2ba4:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <timer0_overflow_count+0x1>
    2ba8:	a0 91 48 04 	lds	r26, 0x0448	; 0x800448 <timer0_overflow_count+0x2>
    2bac:	b0 91 49 04 	lds	r27, 0x0449	; 0x800449 <timer0_overflow_count+0x3>
    2bb0:	01 96       	adiw	r24, 0x01	; 1
    2bb2:	a1 1d       	adc	r26, r1
    2bb4:	b1 1d       	adc	r27, r1
    2bb6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <timer0_overflow_count>
    2bba:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <timer0_overflow_count+0x1>
    2bbe:	a0 93 48 04 	sts	0x0448, r26	; 0x800448 <timer0_overflow_count+0x2>
    2bc2:	b0 93 49 04 	sts	0x0449, r27	; 0x800449 <timer0_overflow_count+0x3>
    2bc6:	bf 91       	pop	r27
    2bc8:	af 91       	pop	r26
    2bca:	9f 91       	pop	r25
    2bcc:	8f 91       	pop	r24
    2bce:	3f 91       	pop	r19
    2bd0:	2f 91       	pop	r18
    2bd2:	0f 90       	pop	r0
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	0f 90       	pop	r0
    2bd8:	1f 90       	pop	r1
    2bda:	18 95       	reti

00002bdc <micros>:
    2bdc:	3f b7       	in	r19, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <timer0_overflow_count>
    2be4:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <timer0_overflow_count+0x1>
    2be8:	a0 91 48 04 	lds	r26, 0x0448	; 0x800448 <timer0_overflow_count+0x2>
    2bec:	b0 91 49 04 	lds	r27, 0x0449	; 0x800449 <timer0_overflow_count+0x3>
    2bf0:	26 b5       	in	r18, 0x26	; 38
    2bf2:	a8 9b       	sbis	0x15, 0	; 21
    2bf4:	05 c0       	rjmp	.+10     	; 0x2c00 <micros+0x24>
    2bf6:	2f 3f       	cpi	r18, 0xFF	; 255
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <micros+0x24>
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	a1 1d       	adc	r26, r1
    2bfe:	b1 1d       	adc	r27, r1
    2c00:	3f bf       	out	0x3f, r19	; 63
    2c02:	ba 2f       	mov	r27, r26
    2c04:	a9 2f       	mov	r26, r25
    2c06:	98 2f       	mov	r25, r24
    2c08:	88 27       	eor	r24, r24
    2c0a:	82 0f       	add	r24, r18
    2c0c:	91 1d       	adc	r25, r1
    2c0e:	a1 1d       	adc	r26, r1
    2c10:	b1 1d       	adc	r27, r1
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	42 e0       	ldi	r20, 0x02	; 2
    2c18:	66 0f       	add	r22, r22
    2c1a:	77 1f       	adc	r23, r23
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	4a 95       	dec	r20
    2c22:	d1 f7       	brne	.-12     	; 0x2c18 <micros+0x3c>
    2c24:	08 95       	ret

00002c26 <delay>:
    2c26:	8f 92       	push	r8
    2c28:	9f 92       	push	r9
    2c2a:	af 92       	push	r10
    2c2c:	bf 92       	push	r11
    2c2e:	cf 92       	push	r12
    2c30:	df 92       	push	r13
    2c32:	ef 92       	push	r14
    2c34:	ff 92       	push	r15
    2c36:	6b 01       	movw	r12, r22
    2c38:	7c 01       	movw	r14, r24
    2c3a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <micros>
    2c3e:	4b 01       	movw	r8, r22
    2c40:	5c 01       	movw	r10, r24
    2c42:	c1 14       	cp	r12, r1
    2c44:	d1 04       	cpc	r13, r1
    2c46:	e1 04       	cpc	r14, r1
    2c48:	f1 04       	cpc	r15, r1
    2c4a:	01 f1       	breq	.+64     	; 0x2c8c <delay+0x66>
    2c4c:	0e 94 86 1a 	call	0x350c	; 0x350c <yield>
    2c50:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <micros>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	88 19       	sub	r24, r8
    2c5a:	99 09       	sbc	r25, r9
    2c5c:	aa 09       	sbc	r26, r10
    2c5e:	bb 09       	sbc	r27, r11
    2c60:	88 3e       	cpi	r24, 0xE8	; 232
    2c62:	93 40       	sbci	r25, 0x03	; 3
    2c64:	a1 05       	cpc	r26, r1
    2c66:	b1 05       	cpc	r27, r1
    2c68:	60 f3       	brcs	.-40     	; 0x2c42 <delay+0x1c>
    2c6a:	21 e0       	ldi	r18, 0x01	; 1
    2c6c:	c2 1a       	sub	r12, r18
    2c6e:	d1 08       	sbc	r13, r1
    2c70:	e1 08       	sbc	r14, r1
    2c72:	f1 08       	sbc	r15, r1
    2c74:	88 ee       	ldi	r24, 0xE8	; 232
    2c76:	88 0e       	add	r8, r24
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	98 1e       	adc	r9, r24
    2c7c:	a1 1c       	adc	r10, r1
    2c7e:	b1 1c       	adc	r11, r1
    2c80:	c1 14       	cp	r12, r1
    2c82:	d1 04       	cpc	r13, r1
    2c84:	e1 04       	cpc	r14, r1
    2c86:	f1 04       	cpc	r15, r1
    2c88:	19 f7       	brne	.-58     	; 0x2c50 <delay+0x2a>
    2c8a:	db cf       	rjmp	.-74     	; 0x2c42 <delay+0x1c>
    2c8c:	ff 90       	pop	r15
    2c8e:	ef 90       	pop	r14
    2c90:	df 90       	pop	r13
    2c92:	cf 90       	pop	r12
    2c94:	bf 90       	pop	r11
    2c96:	af 90       	pop	r10
    2c98:	9f 90       	pop	r9
    2c9a:	8f 90       	pop	r8
    2c9c:	08 95       	ret

00002c9e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c9e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2ca0:	84 b5       	in	r24, 0x24	; 36
    2ca2:	82 60       	ori	r24, 0x02	; 2
    2ca4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ca6:	84 b5       	in	r24, 0x24	; 36
    2ca8:	81 60       	ori	r24, 0x01	; 1
    2caa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2cac:	85 b5       	in	r24, 0x25	; 37
    2cae:	82 60       	ori	r24, 0x02	; 2
    2cb0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2cb2:	85 b5       	in	r24, 0x25	; 37
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2cb8:	ee e6       	ldi	r30, 0x6E	; 110
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	81 60       	ori	r24, 0x01	; 1
    2cc0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2cc2:	e1 e8       	ldi	r30, 0x81	; 129
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2cc8:	80 81       	ld	r24, Z
    2cca:	82 60       	ori	r24, 0x02	; 2
    2ccc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2cce:	80 81       	ld	r24, Z
    2cd0:	81 60       	ori	r24, 0x01	; 1
    2cd2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2cd4:	e0 e8       	ldi	r30, 0x80	; 128
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	81 60       	ori	r24, 0x01	; 1
    2cdc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2cde:	e1 eb       	ldi	r30, 0xB1	; 177
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	84 60       	ori	r24, 0x04	; 4
    2ce6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2ce8:	e0 eb       	ldi	r30, 0xB0	; 176
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	81 60       	ori	r24, 0x01	; 1
    2cf0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2cf2:	ea e7       	ldi	r30, 0x7A	; 122
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	84 60       	ori	r24, 0x04	; 4
    2cfa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2cfc:	80 81       	ld	r24, Z
    2cfe:	82 60       	ori	r24, 0x02	; 2
    2d00:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2d02:	80 81       	ld	r24, Z
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2d08:	80 81       	ld	r24, Z
    2d0a:	80 68       	ori	r24, 0x80	; 128
    2d0c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2d0e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    2d12:	08 95       	ret

00002d14 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2d14:	8e 30       	cpi	r24, 0x0E	; 14
    2d16:	08 f0       	brcs	.+2      	; 0x2d1a <analogRead+0x6>
    2d18:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2d1a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    2d1e:	90 e4       	ldi	r25, 0x40	; 64
    2d20:	29 9f       	mul	r18, r25
    2d22:	90 01       	movw	r18, r0
    2d24:	11 24       	eor	r1, r1
    2d26:	87 70       	andi	r24, 0x07	; 7
    2d28:	82 2b       	or	r24, r18
    2d2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2d2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2d32:	80 64       	ori	r24, 0x40	; 64
    2d34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2d38:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2d3c:	86 fd       	sbrc	r24, 6
    2d3e:	fc cf       	rjmp	.-8      	; 0x2d38 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2d40:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    2d44:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2d48:	90 e0       	ldi	r25, 0x00	; 0
}
    2d4a:	92 2b       	or	r25, r18
    2d4c:	08 95       	ret

00002d4e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2d4e:	83 30       	cpi	r24, 0x03	; 3
    2d50:	81 f0       	breq	.+32     	; 0x2d72 <turnOffPWM+0x24>
    2d52:	28 f4       	brcc	.+10     	; 0x2d5e <turnOffPWM+0x10>
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	99 f0       	breq	.+38     	; 0x2d7e <turnOffPWM+0x30>
    2d58:	82 30       	cpi	r24, 0x02	; 2
    2d5a:	a1 f0       	breq	.+40     	; 0x2d84 <turnOffPWM+0x36>
    2d5c:	08 95       	ret
    2d5e:	87 30       	cpi	r24, 0x07	; 7
    2d60:	a9 f0       	breq	.+42     	; 0x2d8c <turnOffPWM+0x3e>
    2d62:	88 30       	cpi	r24, 0x08	; 8
    2d64:	b9 f0       	breq	.+46     	; 0x2d94 <turnOffPWM+0x46>
    2d66:	84 30       	cpi	r24, 0x04	; 4
    2d68:	d1 f4       	brne	.+52     	; 0x2d9e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2d6e:	8f 7d       	andi	r24, 0xDF	; 223
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2d76:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d78:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2d7c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d7e:	84 b5       	in	r24, 0x24	; 36
    2d80:	8f 77       	andi	r24, 0x7F	; 127
    2d82:	02 c0       	rjmp	.+4      	; 0x2d88 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d84:	84 b5       	in	r24, 0x24	; 36
    2d86:	8f 7d       	andi	r24, 0xDF	; 223
    2d88:	84 bd       	out	0x24, r24	; 36
    2d8a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2d90:	8f 77       	andi	r24, 0x7F	; 127
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2d98:	8f 7d       	andi	r24, 0xDF	; 223
    2d9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2d9e:	08 95       	ret

00002da0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	fc 01       	movw	r30, r24
    2da8:	e4 5e       	subi	r30, 0xE4	; 228
    2daa:	fa 4f       	sbci	r31, 0xFA	; 250
    2dac:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2dae:	fc 01       	movw	r30, r24
    2db0:	e0 5d       	subi	r30, 0xD0	; 208
    2db2:	fa 4f       	sbci	r31, 0xFA	; 250
    2db4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2db6:	88 23       	and	r24, r24
    2db8:	61 f1       	breq	.+88     	; 0x2e12 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	e8 5a       	subi	r30, 0xA8	; 168
    2dc4:	fa 4f       	sbci	r31, 0xFA	; 250
    2dc6:	c5 91       	lpm	r28, Z+
    2dc8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 5b       	subi	r30, 0xB2	; 178
    2dce:	fa 4f       	sbci	r31, 0xFA	; 250
    2dd0:	a5 91       	lpm	r26, Z+
    2dd2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2dd4:	61 11       	cpse	r22, r1
    2dd6:	09 c0       	rjmp	.+18     	; 0x2dea <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2dd8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2dda:	f8 94       	cli
		*reg &= ~bit;
    2ddc:	88 81       	ld	r24, Y
    2dde:	20 95       	com	r18
    2de0:	82 23       	and	r24, r18
    2de2:	88 83       	st	Y, r24
		*out &= ~bit;
    2de4:	ec 91       	ld	r30, X
    2de6:	2e 23       	and	r18, r30
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2dea:	62 30       	cpi	r22, 0x02	; 2
    2dec:	61 f4       	brne	.+24     	; 0x2e06 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2dee:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2df0:	f8 94       	cli
		*reg &= ~bit;
    2df2:	88 81       	ld	r24, Y
    2df4:	32 2f       	mov	r19, r18
    2df6:	30 95       	com	r19
    2df8:	83 23       	and	r24, r19
    2dfa:	88 83       	st	Y, r24
		*out |= bit;
    2dfc:	ec 91       	ld	r30, X
    2dfe:	2e 2b       	or	r18, r30
    2e00:	2c 93       	st	X, r18
		SREG = oldSREG;
    2e02:	9f bf       	out	0x3f, r25	; 63
    2e04:	06 c0       	rjmp	.+12     	; 0x2e12 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2e06:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2e08:	f8 94       	cli
		*reg |= bit;
    2e0a:	e8 81       	ld	r30, Y
    2e0c:	2e 2b       	or	r18, r30
    2e0e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2e10:	8f bf       	out	0x3f, r24	; 63
	}
}
    2e12:	df 91       	pop	r29
    2e14:	cf 91       	pop	r28
    2e16:	08 95       	ret

00002e18 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	f9 01       	movw	r30, r18
    2e24:	e8 5f       	subi	r30, 0xF8	; 248
    2e26:	fa 4f       	sbci	r31, 0xFA	; 250
    2e28:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	e4 5e       	subi	r30, 0xE4	; 228
    2e2e:	fa 4f       	sbci	r31, 0xFA	; 250
    2e30:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2e32:	f9 01       	movw	r30, r18
    2e34:	e0 5d       	subi	r30, 0xD0	; 208
    2e36:	fa 4f       	sbci	r31, 0xFA	; 250
    2e38:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2e3a:	cc 23       	and	r28, r28
    2e3c:	c1 f0       	breq	.+48     	; 0x2e6e <digitalWrite+0x56>
    2e3e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e40:	81 11       	cpse	r24, r1
    2e42:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <turnOffPWM>

	out = portOutputRegister(port);
    2e46:	ec 2f       	mov	r30, r28
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	ee 0f       	add	r30, r30
    2e4c:	ff 1f       	adc	r31, r31
    2e4e:	e2 5b       	subi	r30, 0xB2	; 178
    2e50:	fa 4f       	sbci	r31, 0xFA	; 250
    2e52:	a5 91       	lpm	r26, Z+
    2e54:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2e56:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2e58:	f8 94       	cli

	if (val == LOW) {
    2e5a:	11 11       	cpse	r17, r1
    2e5c:	04 c0       	rjmp	.+8      	; 0x2e66 <digitalWrite+0x4e>
		*out &= ~bit;
    2e5e:	8c 91       	ld	r24, X
    2e60:	d0 95       	com	r29
    2e62:	d8 23       	and	r29, r24
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2e66:	ec 91       	ld	r30, X
    2e68:	de 2b       	or	r29, r30
    2e6a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2e6c:	9f bf       	out	0x3f, r25	; 63
}
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	08 95       	ret

00002e76 <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    2e76:	fc 01       	movw	r30, r24
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <free>

00002e80 <_ZN6String10invalidateEv>:
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	ec 01       	movw	r28, r24
    2e86:	88 81       	ld	r24, Y
    2e88:	99 81       	ldd	r25, Y+1	; 0x01
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	11 f0       	breq	.+4      	; 0x2e92 <_ZN6String10invalidateEv+0x12>
    2e8e:	0e 94 9a 1b 	call	0x3734	; 0x3734 <free>
    2e92:	19 82       	std	Y+1, r1	; 0x01
    2e94:	18 82       	st	Y, r1
    2e96:	1d 82       	std	Y+5, r1	; 0x05
    2e98:	1c 82       	std	Y+4, r1	; 0x04
    2e9a:	1b 82       	std	Y+3, r1	; 0x03
    2e9c:	1a 82       	std	Y+2, r1	; 0x02
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	08 95       	ret

00002ea4 <_ZN6String12changeBufferEj>:
    2ea4:	0f 93       	push	r16
    2ea6:	1f 93       	push	r17
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	ec 01       	movw	r28, r24
    2eae:	8b 01       	movw	r16, r22
    2eb0:	6f 5f       	subi	r22, 0xFF	; 255
    2eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb4:	88 81       	ld	r24, Y
    2eb6:	99 81       	ldd	r25, Y+1	; 0x01
    2eb8:	0e 94 23 1c 	call	0x3846	; 0x3846 <realloc>
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <_ZN6String12changeBufferEj+0x28>
    2ec0:	99 83       	std	Y+1, r25	; 0x01
    2ec2:	88 83       	st	Y, r24
    2ec4:	1b 83       	std	Y+3, r17	; 0x03
    2ec6:	0a 83       	std	Y+2, r16	; 0x02
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <_ZN6String12changeBufferEj+0x2a>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	08 95       	ret

00002ed8 <_ZN6String7reserveEj>:
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	ec 01       	movw	r28, r24
    2ede:	88 81       	ld	r24, Y
    2ee0:	99 81       	ldd	r25, Y+1	; 0x01
    2ee2:	89 2b       	or	r24, r25
    2ee4:	29 f0       	breq	.+10     	; 0x2ef0 <_ZN6String7reserveEj+0x18>
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	86 17       	cp	r24, r22
    2eec:	97 07       	cpc	r25, r23
    2eee:	60 f4       	brcc	.+24     	; 0x2f08 <_ZN6String7reserveEj+0x30>
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN6String12changeBufferEj>
    2ef6:	88 23       	and	r24, r24
    2ef8:	41 f0       	breq	.+16     	; 0x2f0a <_ZN6String7reserveEj+0x32>
    2efa:	8c 81       	ldd	r24, Y+4	; 0x04
    2efc:	9d 81       	ldd	r25, Y+5	; 0x05
    2efe:	89 2b       	or	r24, r25
    2f00:	19 f4       	brne	.+6      	; 0x2f08 <_ZN6String7reserveEj+0x30>
    2f02:	e8 81       	ld	r30, Y
    2f04:	f9 81       	ldd	r31, Y+1	; 0x01
    2f06:	10 82       	st	Z, r1
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <_ZN6String4copyEPKcj>:
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	ec 01       	movw	r28, r24
    2f1e:	7b 01       	movw	r14, r22
    2f20:	8a 01       	movw	r16, r20
    2f22:	ba 01       	movw	r22, r20
    2f24:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String7reserveEj>
    2f28:	81 11       	cpse	r24, r1
    2f2a:	04 c0       	rjmp	.+8      	; 0x2f34 <_ZN6String4copyEPKcj+0x24>
    2f2c:	ce 01       	movw	r24, r28
    2f2e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN6String10invalidateEv>
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <_ZN6String4copyEPKcj+0x32>
    2f34:	1d 83       	std	Y+5, r17	; 0x05
    2f36:	0c 83       	std	Y+4, r16	; 0x04
    2f38:	b7 01       	movw	r22, r14
    2f3a:	88 81       	ld	r24, Y
    2f3c:	99 81       	ldd	r25, Y+1	; 0x01
    2f3e:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <strcpy>
    2f42:	ce 01       	movw	r24, r28
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	08 95       	ret

00002f52 <_ZN6StringC1EPKc>:
    2f52:	fc 01       	movw	r30, r24
    2f54:	11 82       	std	Z+1, r1	; 0x01
    2f56:	10 82       	st	Z, r1
    2f58:	13 82       	std	Z+3, r1	; 0x03
    2f5a:	12 82       	std	Z+2, r1	; 0x02
    2f5c:	15 82       	std	Z+5, r1	; 0x05
    2f5e:	14 82       	std	Z+4, r1	; 0x04
    2f60:	61 15       	cp	r22, r1
    2f62:	71 05       	cpc	r23, r1
    2f64:	51 f0       	breq	.+20     	; 0x2f7a <_ZN6StringC1EPKc+0x28>
    2f66:	fb 01       	movw	r30, r22
    2f68:	01 90       	ld	r0, Z+
    2f6a:	00 20       	and	r0, r0
    2f6c:	e9 f7       	brne	.-6      	; 0x2f68 <_ZN6StringC1EPKc+0x16>
    2f6e:	31 97       	sbiw	r30, 0x01	; 1
    2f70:	af 01       	movw	r20, r30
    2f72:	46 1b       	sub	r20, r22
    2f74:	57 0b       	sbc	r21, r23
    2f76:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <_ZN6String4copyEPKcj>
    2f7a:	08 95       	ret

00002f7c <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	8c 01       	movw	r16, r24
    2f86:	eb 01       	movw	r28, r22
	if (buffer) {
    2f88:	fc 01       	movw	r30, r24
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	99 f0       	breq	.+38     	; 0x2fb8 <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    2f92:	42 81       	ldd	r20, Z+2	; 0x02
    2f94:	53 81       	ldd	r21, Z+3	; 0x03
    2f96:	2c 81       	ldd	r18, Y+4	; 0x04
    2f98:	3d 81       	ldd	r19, Y+5	; 0x05
    2f9a:	42 17       	cp	r20, r18
    2f9c:	53 07       	cpc	r21, r19
    2f9e:	50 f0       	brcs	.+20     	; 0x2fb4 <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    2fa0:	68 81       	ld	r22, Y
    2fa2:	79 81       	ldd	r23, Y+1	; 0x01
    2fa4:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <strcpy>
			len = rhs.len;
    2fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2faa:	9d 81       	ldd	r25, Y+5	; 0x05
    2fac:	f8 01       	movw	r30, r16
    2fae:	95 83       	std	Z+5, r25	; 0x05
    2fb0:	84 83       	std	Z+4, r24	; 0x04
    2fb2:	13 c0       	rjmp	.+38     	; 0x2fda <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    2fb4:	0e 94 9a 1b 	call	0x3734	; 0x3734 <free>
		}
	}
	buffer = rhs.buffer;
    2fb8:	88 81       	ld	r24, Y
    2fba:	99 81       	ldd	r25, Y+1	; 0x01
    2fbc:	f8 01       	movw	r30, r16
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	93 83       	std	Z+3, r25	; 0x03
    2fc8:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    2fca:	8c 81       	ldd	r24, Y+4	; 0x04
    2fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fce:	95 83       	std	Z+5, r25	; 0x05
    2fd0:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    2fd2:	19 82       	std	Y+1, r1	; 0x01
    2fd4:	18 82       	st	Y, r1
	rhs.capacity = 0;
    2fd6:	1b 82       	std	Y+3, r1	; 0x03
    2fd8:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    2fda:	1d 82       	std	Y+5, r1	; 0x05
    2fdc:	1c 82       	std	Y+4, r1	; 0x04
}
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	ec 01       	movw	r28, r24
    2fee:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2ff0:	86 17       	cp	r24, r22
    2ff2:	97 07       	cpc	r25, r23
    2ff4:	61 f0       	breq	.+24     	; 0x300e <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	61 15       	cp	r22, r1
    2ffc:	71 05       	cpc	r23, r1
    2ffe:	29 f0       	breq	.+10     	; 0x300a <_ZN6StringaSERKS_+0x22>
    3000:	44 81       	ldd	r20, Z+4	; 0x04
    3002:	55 81       	ldd	r21, Z+5	; 0x05
    3004:	0e 94 88 17 	call	0x2f10	; 0x2f10 <_ZN6String4copyEPKcj>
    3008:	02 c0       	rjmp	.+4      	; 0x300e <_ZN6StringaSERKS_+0x26>
	else invalidate();
    300a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN6String10invalidateEv>
	
	return *this;
}
    300e:	ce 01       	movw	r24, r28
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3016:	fc 01       	movw	r30, r24
    3018:	11 82       	std	Z+1, r1	; 0x01
    301a:	10 82       	st	Z, r1
	capacity = 0;
    301c:	13 82       	std	Z+3, r1	; 0x03
    301e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3020:	15 82       	std	Z+5, r1	; 0x05
    3022:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    3024:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <_ZN6StringaSERKS_>

00003028 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    302e:	86 17       	cp	r24, r22
    3030:	97 07       	cpc	r25, r23
    3032:	11 f0       	breq	.+4      	; 0x3038 <_ZN6StringaSEOS_+0x10>
    3034:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <_ZN6String4moveERS_>
	return *this;
}
    3038:	ce 01       	movw	r24, r28
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	08 95       	ret

00003040 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3040:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    3044:	30 91 8d 04 	lds	r19, 0x048D	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    3048:	28 17       	cp	r18, r24
    304a:	39 07       	cpc	r19, r25
    304c:	b9 f4       	brne	.+46     	; 0x307c <_ZN14SoftwareSerial4readEv+0x3c>
    304e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    3052:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3056:	98 17       	cp	r25, r24
    3058:	89 f0       	breq	.+34     	; 0x307c <_ZN14SoftwareSerial4readEv+0x3c>
    305a:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	e4 5b       	subi	r30, 0xB4	; 180
    3062:	fb 4f       	sbci	r31, 0xFB	; 251
    3064:	80 81       	ld	r24, Z
    3066:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	2f 5f       	subi	r18, 0xFF	; 255
    306e:	3f 4f       	sbci	r19, 0xFF	; 255
    3070:	2f 73       	andi	r18, 0x3F	; 63
    3072:	33 27       	eor	r19, r19
    3074:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	08 95       	ret
    307c:	8f ef       	ldi	r24, 0xFF	; 255
    307e:	9f ef       	ldi	r25, 0xFF	; 255
    3080:	08 95       	ret

00003082 <_ZN14SoftwareSerial5writeEh>:
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	dc 01       	movw	r26, r24
    308a:	5c 96       	adiw	r26, 0x1c	; 28
    308c:	8d 91       	ld	r24, X+
    308e:	9c 91       	ld	r25, X
    3090:	5d 97       	sbiw	r26, 0x1d	; 29
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	39 f4       	brne	.+14     	; 0x30a4 <_ZN14SoftwareSerial5writeEh+0x22>
    3096:	21 e0       	ldi	r18, 0x01	; 1
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	13 96       	adiw	r26, 0x03	; 3
    309c:	3c 93       	st	X, r19
    309e:	2e 93       	st	-X, r18
    30a0:	12 97       	sbiw	r26, 0x02	; 2
    30a2:	3b c0       	rjmp	.+118    	; 0x311a <_ZN14SoftwareSerial5writeEh+0x98>
    30a4:	51 96       	adiw	r26, 0x11	; 17
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	52 97       	sbiw	r26, 0x12	; 18
    30ac:	50 96       	adiw	r26, 0x10	; 16
    30ae:	2c 91       	ld	r18, X
    30b0:	50 97       	sbiw	r26, 0x10	; 16
    30b2:	32 2f       	mov	r19, r18
    30b4:	30 95       	com	r19
    30b6:	1f b7       	in	r17, 0x3f	; 63
    30b8:	5e 96       	adiw	r26, 0x1e	; 30
    30ba:	4c 91       	ld	r20, X
    30bc:	5e 97       	sbiw	r26, 0x1e	; 30
    30be:	74 2f       	mov	r23, r20
    30c0:	72 70       	andi	r23, 0x02	; 2
    30c2:	41 fd       	sbrc	r20, 1
    30c4:	60 95       	com	r22
    30c6:	f8 94       	cli
    30c8:	40 81       	ld	r20, Z
    30ca:	77 23       	and	r23, r23
    30cc:	11 f0       	breq	.+4      	; 0x30d2 <_ZN14SoftwareSerial5writeEh+0x50>
    30ce:	42 2b       	or	r20, r18
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <_ZN14SoftwareSerial5writeEh+0x52>
    30d2:	43 23       	and	r20, r19
    30d4:	40 83       	st	Z, r20
    30d6:	ec 01       	movw	r28, r24
    30d8:	21 97       	sbiw	r28, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <_ZN14SoftwareSerial5writeEh+0x56>
    30dc:	48 e0       	ldi	r20, 0x08	; 8
    30de:	50 81       	ld	r21, Z
    30e0:	60 ff       	sbrs	r22, 0
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <_ZN14SoftwareSerial5writeEh+0x66>
    30e4:	52 2b       	or	r21, r18
    30e6:	01 c0       	rjmp	.+2      	; 0x30ea <_ZN14SoftwareSerial5writeEh+0x68>
    30e8:	53 23       	and	r21, r19
    30ea:	50 83       	st	Z, r21
    30ec:	ec 01       	movw	r28, r24
    30ee:	21 97       	sbiw	r28, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <_ZN14SoftwareSerial5writeEh+0x6c>
    30f2:	66 95       	lsr	r22
    30f4:	41 50       	subi	r20, 0x01	; 1
    30f6:	99 f7       	brne	.-26     	; 0x30de <_ZN14SoftwareSerial5writeEh+0x5c>
    30f8:	80 81       	ld	r24, Z
    30fa:	77 23       	and	r23, r23
    30fc:	19 f0       	breq	.+6      	; 0x3104 <_ZN14SoftwareSerial5writeEh+0x82>
    30fe:	83 23       	and	r24, r19
    3100:	80 83       	st	Z, r24
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <_ZN14SoftwareSerial5writeEh+0x86>
    3104:	28 2b       	or	r18, r24
    3106:	20 83       	st	Z, r18
    3108:	1f bf       	out	0x3f, r17	; 63
    310a:	5c 96       	adiw	r26, 0x1c	; 28
    310c:	8d 91       	ld	r24, X+
    310e:	9c 91       	ld	r25, X
    3110:	5d 97       	sbiw	r26, 0x1d	; 29
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <_ZN14SoftwareSerial5writeEh+0x90>
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	1f 91       	pop	r17
    3120:	08 95       	ret

00003122 <_ZN14SoftwareSerial5flushEv>:
    3122:	08 95       	ret

00003124 <_ZN14SoftwareSerial4peekEv>:
    3124:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    3128:	30 91 8d 04 	lds	r19, 0x048D	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    312c:	28 17       	cp	r18, r24
    312e:	39 07       	cpc	r19, r25
    3130:	71 f4       	brne	.+28     	; 0x314e <_ZN14SoftwareSerial4peekEv+0x2a>
    3132:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    3136:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    313a:	98 17       	cp	r25, r24
    313c:	41 f0       	breq	.+16     	; 0x314e <_ZN14SoftwareSerial4peekEv+0x2a>
    313e:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	e4 5b       	subi	r30, 0xB4	; 180
    3146:	fb 4f       	sbci	r31, 0xFB	; 251
    3148:	80 81       	ld	r24, Z
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	08 95       	ret
    314e:	8f ef       	ldi	r24, 0xFF	; 255
    3150:	9f ef       	ldi	r25, 0xFF	; 255
    3152:	08 95       	ret

00003154 <_ZN14SoftwareSerial9availableEv>:
    3154:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    3158:	30 91 8d 04 	lds	r19, 0x048D	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    315c:	28 17       	cp	r18, r24
    315e:	39 07       	cpc	r19, r25
    3160:	71 f4       	brne	.+28     	; 0x317e <_ZN14SoftwareSerial9availableEv+0x2a>
    3162:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3166:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	80 5c       	subi	r24, 0xC0	; 192
    316e:	9f 4f       	sbci	r25, 0xFF	; 255
    3170:	82 1b       	sub	r24, r18
    3172:	91 09       	sbc	r25, r1
    3174:	60 e4       	ldi	r22, 0x40	; 64
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	0e 94 a7 1a 	call	0x354e	; 0x354e <__divmodhi4>
    317c:	08 95       	ret
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	08 95       	ret

00003184 <_ZN14SoftwareSerial13stopListeningEv>:
    3184:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    3188:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    318c:	e8 17       	cp	r30, r24
    318e:	f9 07       	cpc	r31, r25
    3190:	69 f4       	brne	.+26     	; 0x31ac <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3192:	a3 89       	ldd	r26, Z+19	; 0x13
    3194:	b4 89       	ldd	r27, Z+20	; 0x14
    3196:	9c 91       	ld	r25, X
    3198:	85 89       	ldd	r24, Z+21	; 0x15
    319a:	80 95       	com	r24
    319c:	89 23       	and	r24, r25
    319e:	8c 93       	st	X, r24
    31a0:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    31a4:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	08 95       	ret
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	08 95       	ret

000031b0 <_ZN14SoftwareSerial6listenEv>:
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	ec 01       	movw	r28, r24
    31b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31ba:	89 2b       	or	r24, r25
    31bc:	f1 f0       	breq	.+60     	; 0x31fa <_ZN14SoftwareSerial6listenEv+0x4a>
    31be:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    31c2:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    31c6:	c8 17       	cp	r28, r24
    31c8:	d9 07       	cpc	r29, r25
    31ca:	b9 f0       	breq	.+46     	; 0x31fa <_ZN14SoftwareSerial6listenEv+0x4a>
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	11 f0       	breq	.+4      	; 0x31d4 <_ZN14SoftwareSerial6listenEv+0x24>
    31d0:	0e 94 c2 18 	call	0x3184	; 0x3184 <_ZN14SoftwareSerial13stopListeningEv>
    31d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d6:	8e 7f       	andi	r24, 0xFE	; 254
    31d8:	8e 8f       	std	Y+30, r24	; 0x1e
    31da:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    31de:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    31e2:	d0 93 8d 04 	sts	0x048D, r29	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    31e6:	c0 93 8c 04 	sts	0x048C, r28	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    31ea:	eb 89       	ldd	r30, Y+19	; 0x13
    31ec:	fc 89       	ldd	r31, Y+20	; 0x14
    31ee:	90 81       	ld	r25, Z
    31f0:	8d 89       	ldd	r24, Y+21	; 0x15
    31f2:	89 2b       	or	r24, r25
    31f4:	80 83       	st	Z, r24
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	01 c0       	rjmp	.+2      	; 0x31fc <_ZN14SoftwareSerial6listenEv+0x4c>
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	df 91       	pop	r29
    31fe:	cf 91       	pop	r28
    3200:	08 95       	ret

00003202 <__vector_3>:
    3202:	1f 92       	push	r1
    3204:	0f 92       	push	r0
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	0f 92       	push	r0
    320a:	11 24       	eor	r1, r1
    320c:	2f 93       	push	r18
    320e:	3f 93       	push	r19
    3210:	4f 93       	push	r20
    3212:	5f 93       	push	r21
    3214:	6f 93       	push	r22
    3216:	7f 93       	push	r23
    3218:	8f 93       	push	r24
    321a:	9f 93       	push	r25
    321c:	af 93       	push	r26
    321e:	bf 93       	push	r27
    3220:	ef 93       	push	r30
    3222:	ff 93       	push	r31
    3224:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <_ZN14SoftwareSerial13active_objectE>
    3228:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <_ZN14SoftwareSerial13active_objectE+0x1>
    322c:	30 97       	sbiw	r30, 0x00	; 0
    322e:	09 f4       	brne	.+2      	; 0x3232 <__vector_3+0x30>
    3230:	51 c0       	rjmp	.+162    	; 0x32d4 <__vector_3+0xd2>
    3232:	96 8d       	ldd	r25, Z+30	; 0x1e
    3234:	a6 85       	ldd	r26, Z+14	; 0x0e
    3236:	b7 85       	ldd	r27, Z+15	; 0x0f
    3238:	85 85       	ldd	r24, Z+13	; 0x0d
    323a:	91 ff       	sbrs	r25, 1
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <__vector_3+0x44>
    323e:	9c 91       	ld	r25, X
    3240:	89 23       	and	r24, r25
    3242:	29 f4       	brne	.+10     	; 0x324e <__vector_3+0x4c>
    3244:	47 c0       	rjmp	.+142    	; 0x32d4 <__vector_3+0xd2>
    3246:	9c 91       	ld	r25, X
    3248:	89 23       	and	r24, r25
    324a:	09 f0       	breq	.+2      	; 0x324e <__vector_3+0x4c>
    324c:	43 c0       	rjmp	.+134    	; 0x32d4 <__vector_3+0xd2>
    324e:	a3 89       	ldd	r26, Z+19	; 0x13
    3250:	b4 89       	ldd	r27, Z+20	; 0x14
    3252:	9c 91       	ld	r25, X
    3254:	85 89       	ldd	r24, Z+21	; 0x15
    3256:	80 95       	com	r24
    3258:	89 23       	and	r24, r25
    325a:	8c 93       	st	X, r24
    325c:	86 89       	ldd	r24, Z+22	; 0x16
    325e:	97 89       	ldd	r25, Z+23	; 0x17
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <__vector_3+0x5e>
    3264:	60 8d       	ldd	r22, Z+24	; 0x18
    3266:	71 8d       	ldd	r23, Z+25	; 0x19
    3268:	a6 85       	ldd	r26, Z+14	; 0x0e
    326a:	b7 85       	ldd	r27, Z+15	; 0x0f
    326c:	55 85       	ldd	r21, Z+13	; 0x0d
    326e:	38 e0       	ldi	r19, 0x08	; 8
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	cb 01       	movw	r24, r22
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <__vector_3+0x72>
    3278:	82 2f       	mov	r24, r18
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	95 95       	asr	r25
    327e:	87 95       	ror	r24
    3280:	28 2f       	mov	r18, r24
    3282:	4c 91       	ld	r20, X
    3284:	45 23       	and	r20, r21
    3286:	09 f0       	breq	.+2      	; 0x328a <__vector_3+0x88>
    3288:	20 68       	ori	r18, 0x80	; 128
    328a:	31 50       	subi	r19, 0x01	; 1
    328c:	91 f7       	brne	.-28     	; 0x3272 <__vector_3+0x70>
    328e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3290:	81 fd       	sbrc	r24, 1
    3292:	20 95       	com	r18
    3294:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	8f 73       	andi	r24, 0x3F	; 63
    329e:	99 27       	eor	r25, r25
    32a0:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <_ZN14SoftwareSerial20_receive_buffer_headE>
    32a4:	38 17       	cp	r19, r24
    32a6:	49 f0       	breq	.+18     	; 0x32ba <__vector_3+0xb8>
    32a8:	a0 91 4b 04 	lds	r26, 0x044B	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	a4 5b       	subi	r26, 0xB4	; 180
    32b0:	bb 4f       	sbci	r27, 0xFB	; 251
    32b2:	2c 93       	st	X, r18
    32b4:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    32b8:	03 c0       	rjmp	.+6      	; 0x32c0 <__vector_3+0xbe>
    32ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    32bc:	81 60       	ori	r24, 0x01	; 1
    32be:	86 8f       	std	Z+30, r24	; 0x1e
    32c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    32c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <__vector_3+0xc2>
    32c8:	a3 89       	ldd	r26, Z+19	; 0x13
    32ca:	b4 89       	ldd	r27, Z+20	; 0x14
    32cc:	9c 91       	ld	r25, X
    32ce:	85 89       	ldd	r24, Z+21	; 0x15
    32d0:	89 2b       	or	r24, r25
    32d2:	8c 93       	st	X, r24
    32d4:	ff 91       	pop	r31
    32d6:	ef 91       	pop	r30
    32d8:	bf 91       	pop	r27
    32da:	af 91       	pop	r26
    32dc:	9f 91       	pop	r25
    32de:	8f 91       	pop	r24
    32e0:	7f 91       	pop	r23
    32e2:	6f 91       	pop	r22
    32e4:	5f 91       	pop	r21
    32e6:	4f 91       	pop	r20
    32e8:	3f 91       	pop	r19
    32ea:	2f 91       	pop	r18
    32ec:	0f 90       	pop	r0
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	0f 90       	pop	r0
    32f2:	1f 90       	pop	r1
    32f4:	18 95       	reti

000032f6 <_ZN14SoftwareSerial5setTXEh>:
    32f6:	1f 93       	push	r17
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	ec 01       	movw	r28, r24
    32fe:	16 2f       	mov	r17, r22
    3300:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3302:	66 95       	lsr	r22
    3304:	61 70       	andi	r22, 0x01	; 1
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	68 27       	eor	r22, r24
    330a:	81 2f       	mov	r24, r17
    330c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
    3310:	61 e0       	ldi	r22, 0x01	; 1
    3312:	81 2f       	mov	r24, r17
    3314:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pinMode>
    3318:	81 2f       	mov	r24, r17
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	fc 01       	movw	r30, r24
    331e:	e4 5e       	subi	r30, 0xE4	; 228
    3320:	fa 4f       	sbci	r31, 0xFA	; 250
    3322:	e4 91       	lpm	r30, Z
    3324:	e8 8b       	std	Y+16, r30	; 0x10
    3326:	fc 01       	movw	r30, r24
    3328:	e0 5d       	subi	r30, 0xD0	; 208
    332a:	fa 4f       	sbci	r31, 0xFA	; 250
    332c:	e4 91       	lpm	r30, Z
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	ee 0f       	add	r30, r30
    3332:	ff 1f       	adc	r31, r31
    3334:	e2 5b       	subi	r30, 0xB2	; 178
    3336:	fa 4f       	sbci	r31, 0xFA	; 250
    3338:	85 91       	lpm	r24, Z+
    333a:	94 91       	lpm	r25, Z
    333c:	9a 8b       	std	Y+18, r25	; 0x12
    333e:	89 8b       	std	Y+17, r24	; 0x11
    3340:	df 91       	pop	r29
    3342:	cf 91       	pop	r28
    3344:	1f 91       	pop	r17
    3346:	08 95       	ret

00003348 <_ZN14SoftwareSerial5setRXEh>:
    3348:	1f 93       	push	r17
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	ec 01       	movw	r28, r24
    3350:	16 2f       	mov	r17, r22
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	81 2f       	mov	r24, r17
    3356:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pinMode>
    335a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    335c:	81 fd       	sbrc	r24, 1
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <_ZN14SoftwareSerial5setRXEh+0x20>
    3360:	61 e0       	ldi	r22, 0x01	; 1
    3362:	81 2f       	mov	r24, r17
    3364:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <digitalWrite>
    3368:	1c 87       	std	Y+12, r17	; 0x0c
    336a:	81 2f       	mov	r24, r17
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	fc 01       	movw	r30, r24
    3370:	e4 5e       	subi	r30, 0xE4	; 228
    3372:	fa 4f       	sbci	r31, 0xFA	; 250
    3374:	e4 91       	lpm	r30, Z
    3376:	ed 87       	std	Y+13, r30	; 0x0d
    3378:	fc 01       	movw	r30, r24
    337a:	e0 5d       	subi	r30, 0xD0	; 208
    337c:	fa 4f       	sbci	r31, 0xFA	; 250
    337e:	e4 91       	lpm	r30, Z
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	ee 0f       	add	r30, r30
    3384:	ff 1f       	adc	r31, r31
    3386:	ec 5b       	subi	r30, 0xBC	; 188
    3388:	fa 4f       	sbci	r31, 0xFA	; 250
    338a:	85 91       	lpm	r24, Z+
    338c:	94 91       	lpm	r25, Z
    338e:	9f 87       	std	Y+15, r25	; 0x0f
    3390:	8e 87       	std	Y+14, r24	; 0x0e
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	08 95       	ret

0000339a <_ZN14SoftwareSerialC1Ehhb>:
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	ec 01       	movw	r28, r24
    33a2:	16 2f       	mov	r17, r22
    33a4:	1b 82       	std	Y+3, r1	; 0x03
    33a6:	1a 82       	std	Y+2, r1	; 0x02
    33a8:	88 ee       	ldi	r24, 0xE8	; 232
    33aa:	93 e0       	ldi	r25, 0x03	; 3
    33ac:	a0 e0       	ldi	r26, 0x00	; 0
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	8c 83       	std	Y+4, r24	; 0x04
    33b2:	9d 83       	std	Y+5, r25	; 0x05
    33b4:	ae 83       	std	Y+6, r26	; 0x06
    33b6:	bf 83       	std	Y+7, r27	; 0x07
    33b8:	8a e9       	ldi	r24, 0x9A	; 154
    33ba:	91 e0       	ldi	r25, 0x01	; 1
    33bc:	99 83       	std	Y+1, r25	; 0x01
    33be:	88 83       	st	Y, r24
    33c0:	1f 8a       	std	Y+23, r1	; 0x17
    33c2:	1e 8a       	std	Y+22, r1	; 0x16
    33c4:	19 8e       	std	Y+25, r1	; 0x19
    33c6:	18 8e       	std	Y+24, r1	; 0x18
    33c8:	1b 8e       	std	Y+27, r1	; 0x1b
    33ca:	1a 8e       	std	Y+26, r1	; 0x1a
    33cc:	1d 8e       	std	Y+29, r1	; 0x1d
    33ce:	1c 8e       	std	Y+28, r1	; 0x1c
    33d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33d2:	8e 7f       	andi	r24, 0xFE	; 254
    33d4:	20 fb       	bst	r18, 0
    33d6:	81 f9       	bld	r24, 1
    33d8:	8e 8f       	std	Y+30, r24	; 0x1e
    33da:	64 2f       	mov	r22, r20
    33dc:	ce 01       	movw	r24, r28
    33de:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <_ZN14SoftwareSerial5setTXEh>
    33e2:	61 2f       	mov	r22, r17
    33e4:	ce 01       	movw	r24, r28
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <_ZN14SoftwareSerial5setRXEh>

000033f0 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	ec 01       	movw	r28, r24
    33f6:	9a 01       	movw	r18, r20
    33f8:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    33fa:	1b 8e       	std	Y+27, r1	; 0x1b
    33fc:	1a 8e       	std	Y+26, r1	; 0x1a
    33fe:	19 8e       	std	Y+25, r1	; 0x19
    3400:	18 8e       	std	Y+24, r1	; 0x18
    3402:	1f 8a       	std	Y+23, r1	; 0x17
    3404:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	79 e0       	ldi	r23, 0x09	; 9
    340a:	8d e3       	ldi	r24, 0x3D	; 61
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__divmodsi4>
    3412:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3414:	24 30       	cpi	r18, 0x04	; 4
    3416:	31 05       	cpc	r19, r1
    3418:	18 f0       	brcs	.+6      	; 0x3420 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    341a:	c9 01       	movw	r24, r18
    341c:	03 97       	sbiw	r24, 0x03	; 3
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3424:	9d 8f       	std	Y+29, r25	; 0x1d
    3426:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3428:	6c 85       	ldd	r22, Y+12	; 0x0c
    342a:	66 31       	cpi	r22, 0x16	; 22
    342c:	08 f0       	brcs	.+2      	; 0x3430 <_ZN14SoftwareSerial5beginEl+0x40>
    342e:	69 c0       	rjmp	.+210    	; 0x3502 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3430:	c9 01       	movw	r24, r18
    3432:	96 95       	lsr	r25
    3434:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3436:	84 31       	cpi	r24, 0x14	; 20
    3438:	91 05       	cpc	r25, r1
    343a:	10 f0       	brcs	.+4      	; 0x3440 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    343c:	43 97       	sbiw	r24, 0x13	; 19
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3444:	9f 8b       	std	Y+23, r25	; 0x17
    3446:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3448:	36 97       	sbiw	r30, 0x06	; 6
    344a:	18 f0       	brcs	.+6      	; 0x3452 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    344c:	c9 01       	movw	r24, r18
    344e:	05 97       	sbiw	r24, 0x05	; 5
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3456:	99 8f       	std	Y+25, r25	; 0x19
    3458:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    345a:	c9 01       	movw	r24, r18
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	28 0f       	add	r18, r24
    3462:	39 1f       	adc	r19, r25
    3464:	36 95       	lsr	r19
    3466:	27 95       	ror	r18
    3468:	36 95       	lsr	r19
    346a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    346c:	2d 30       	cpi	r18, 0x0D	; 13
    346e:	31 05       	cpc	r19, r1
    3470:	18 f0       	brcs	.+6      	; 0x3478 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3472:	2c 50       	subi	r18, 0x0C	; 12
    3474:	31 09       	sbc	r19, r1
    3476:	02 c0       	rjmp	.+4      	; 0x347c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3478:	21 e0       	ldi	r18, 0x01	; 1
    347a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    347c:	3b 8f       	std	Y+27, r19	; 0x1b
    347e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3480:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3484:	68 30       	cpi	r22, 0x08	; 8
    3486:	50 f0       	brcs	.+20     	; 0x349c <_ZN14SoftwareSerial5beginEl+0xac>
    3488:	21 e0       	ldi	r18, 0x01	; 1
    348a:	6e 30       	cpi	r22, 0x0E	; 14
    348c:	08 f4       	brcc	.+2      	; 0x3490 <_ZN14SoftwareSerial5beginEl+0xa0>
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <_ZN14SoftwareSerial5beginEl+0xa6>
    3494:	88 0f       	add	r24, r24
    3496:	2a 95       	dec	r18
    3498:	ea f7       	brpl	.-6      	; 0x3494 <_ZN14SoftwareSerial5beginEl+0xa4>
    349a:	01 c0       	rjmp	.+2      	; 0x349e <_ZN14SoftwareSerial5beginEl+0xae>
    349c:	84 e0       	ldi	r24, 0x04	; 4
    349e:	89 2b       	or	r24, r25
    34a0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    34a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    34a6:	98 30       	cpi	r25, 0x08	; 8
    34a8:	38 f0       	brcs	.+14     	; 0x34b8 <_ZN14SoftwareSerial5beginEl+0xc8>
    34aa:	9e 30       	cpi	r25, 0x0E	; 14
    34ac:	40 f0       	brcs	.+16     	; 0x34be <_ZN14SoftwareSerial5beginEl+0xce>
    34ae:	96 31       	cpi	r25, 0x16	; 22
    34b0:	48 f0       	brcs	.+18     	; 0x34c4 <_ZN14SoftwareSerial5beginEl+0xd4>
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	08 c0       	rjmp	.+16     	; 0x34c8 <_ZN14SoftwareSerial5beginEl+0xd8>
    34b8:	2d e6       	ldi	r18, 0x6D	; 109
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	05 c0       	rjmp	.+10     	; 0x34c8 <_ZN14SoftwareSerial5beginEl+0xd8>
    34be:	2b e6       	ldi	r18, 0x6B	; 107
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <_ZN14SoftwareSerial5beginEl+0xd8>
    34c4:	2c e6       	ldi	r18, 0x6C	; 108
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	3c 8b       	std	Y+20, r19	; 0x14
    34ca:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    34cc:	98 30       	cpi	r25, 0x08	; 8
    34ce:	30 f4       	brcc	.+12     	; 0x34dc <_ZN14SoftwareSerial5beginEl+0xec>
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	01 c0       	rjmp	.+2      	; 0x34d6 <_ZN14SoftwareSerial5beginEl+0xe6>
    34d4:	88 0f       	add	r24, r24
    34d6:	9a 95       	dec	r25
    34d8:	ea f7       	brpl	.-6      	; 0x34d4 <_ZN14SoftwareSerial5beginEl+0xe4>
    34da:	0e c0       	rjmp	.+28     	; 0x34f8 <_ZN14SoftwareSerial5beginEl+0x108>
    34dc:	29 2f       	mov	r18, r25
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	9e 30       	cpi	r25, 0x0E	; 14
    34e2:	18 f4       	brcc	.+6      	; 0x34ea <_ZN14SoftwareSerial5beginEl+0xfa>
    34e4:	28 50       	subi	r18, 0x08	; 8
    34e6:	31 09       	sbc	r19, r1
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <_ZN14SoftwareSerial5beginEl+0xfe>
    34ea:	2e 50       	subi	r18, 0x0E	; 14
    34ec:	31 09       	sbc	r19, r1
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <_ZN14SoftwareSerial5beginEl+0x104>
    34f2:	88 0f       	add	r24, r24
    34f4:	2a 95       	dec	r18
    34f6:	ea f7       	brpl	.-6      	; 0x34f2 <_ZN14SoftwareSerial5beginEl+0x102>
    34f8:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    34fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3502:	ce 01       	movw	r24, r28
}
    3504:	df 91       	pop	r29
    3506:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3508:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <_ZN14SoftwareSerial6listenEv>

0000350c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    350c:	08 95       	ret

0000350e <__udivmodqi4>:
    350e:	99 1b       	sub	r25, r25
    3510:	79 e0       	ldi	r23, 0x09	; 9
    3512:	04 c0       	rjmp	.+8      	; 0x351c <__udivmodqi4_ep>

00003514 <__udivmodqi4_loop>:
    3514:	99 1f       	adc	r25, r25
    3516:	96 17       	cp	r25, r22
    3518:	08 f0       	brcs	.+2      	; 0x351c <__udivmodqi4_ep>
    351a:	96 1b       	sub	r25, r22

0000351c <__udivmodqi4_ep>:
    351c:	88 1f       	adc	r24, r24
    351e:	7a 95       	dec	r23
    3520:	c9 f7       	brne	.-14     	; 0x3514 <__udivmodqi4_loop>
    3522:	80 95       	com	r24
    3524:	08 95       	ret

00003526 <__udivmodhi4>:
    3526:	aa 1b       	sub	r26, r26
    3528:	bb 1b       	sub	r27, r27
    352a:	51 e1       	ldi	r21, 0x11	; 17
    352c:	07 c0       	rjmp	.+14     	; 0x353c <__udivmodhi4_ep>

0000352e <__udivmodhi4_loop>:
    352e:	aa 1f       	adc	r26, r26
    3530:	bb 1f       	adc	r27, r27
    3532:	a6 17       	cp	r26, r22
    3534:	b7 07       	cpc	r27, r23
    3536:	10 f0       	brcs	.+4      	; 0x353c <__udivmodhi4_ep>
    3538:	a6 1b       	sub	r26, r22
    353a:	b7 0b       	sbc	r27, r23

0000353c <__udivmodhi4_ep>:
    353c:	88 1f       	adc	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	5a 95       	dec	r21
    3542:	a9 f7       	brne	.-22     	; 0x352e <__udivmodhi4_loop>
    3544:	80 95       	com	r24
    3546:	90 95       	com	r25
    3548:	bc 01       	movw	r22, r24
    354a:	cd 01       	movw	r24, r26
    354c:	08 95       	ret

0000354e <__divmodhi4>:
    354e:	97 fb       	bst	r25, 7
    3550:	07 2e       	mov	r0, r23
    3552:	16 f4       	brtc	.+4      	; 0x3558 <__divmodhi4+0xa>
    3554:	00 94       	com	r0
    3556:	07 d0       	rcall	.+14     	; 0x3566 <__divmodhi4_neg1>
    3558:	77 fd       	sbrc	r23, 7
    355a:	09 d0       	rcall	.+18     	; 0x356e <__divmodhi4_neg2>
    355c:	0e 94 93 1a 	call	0x3526	; 0x3526 <__udivmodhi4>
    3560:	07 fc       	sbrc	r0, 7
    3562:	05 d0       	rcall	.+10     	; 0x356e <__divmodhi4_neg2>
    3564:	3e f4       	brtc	.+14     	; 0x3574 <__divmodhi4_exit>

00003566 <__divmodhi4_neg1>:
    3566:	90 95       	com	r25
    3568:	81 95       	neg	r24
    356a:	9f 4f       	sbci	r25, 0xFF	; 255
    356c:	08 95       	ret

0000356e <__divmodhi4_neg2>:
    356e:	70 95       	com	r23
    3570:	61 95       	neg	r22
    3572:	7f 4f       	sbci	r23, 0xFF	; 255

00003574 <__divmodhi4_exit>:
    3574:	08 95       	ret

00003576 <__udivmodsi4>:
    3576:	a1 e2       	ldi	r26, 0x21	; 33
    3578:	1a 2e       	mov	r1, r26
    357a:	aa 1b       	sub	r26, r26
    357c:	bb 1b       	sub	r27, r27
    357e:	fd 01       	movw	r30, r26
    3580:	0d c0       	rjmp	.+26     	; 0x359c <__udivmodsi4_ep>

00003582 <__udivmodsi4_loop>:
    3582:	aa 1f       	adc	r26, r26
    3584:	bb 1f       	adc	r27, r27
    3586:	ee 1f       	adc	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	a2 17       	cp	r26, r18
    358c:	b3 07       	cpc	r27, r19
    358e:	e4 07       	cpc	r30, r20
    3590:	f5 07       	cpc	r31, r21
    3592:	20 f0       	brcs	.+8      	; 0x359c <__udivmodsi4_ep>
    3594:	a2 1b       	sub	r26, r18
    3596:	b3 0b       	sbc	r27, r19
    3598:	e4 0b       	sbc	r30, r20
    359a:	f5 0b       	sbc	r31, r21

0000359c <__udivmodsi4_ep>:
    359c:	66 1f       	adc	r22, r22
    359e:	77 1f       	adc	r23, r23
    35a0:	88 1f       	adc	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	1a 94       	dec	r1
    35a6:	69 f7       	brne	.-38     	; 0x3582 <__udivmodsi4_loop>
    35a8:	60 95       	com	r22
    35aa:	70 95       	com	r23
    35ac:	80 95       	com	r24
    35ae:	90 95       	com	r25
    35b0:	9b 01       	movw	r18, r22
    35b2:	ac 01       	movw	r20, r24
    35b4:	bd 01       	movw	r22, r26
    35b6:	cf 01       	movw	r24, r30
    35b8:	08 95       	ret

000035ba <__divmodsi4>:
    35ba:	05 2e       	mov	r0, r21
    35bc:	97 fb       	bst	r25, 7
    35be:	1e f4       	brtc	.+6      	; 0x35c6 <__divmodsi4+0xc>
    35c0:	00 94       	com	r0
    35c2:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__negsi2>
    35c6:	57 fd       	sbrc	r21, 7
    35c8:	07 d0       	rcall	.+14     	; 0x35d8 <__divmodsi4_neg2>
    35ca:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__udivmodsi4>
    35ce:	07 fc       	sbrc	r0, 7
    35d0:	03 d0       	rcall	.+6      	; 0x35d8 <__divmodsi4_neg2>
    35d2:	4e f4       	brtc	.+18     	; 0x35e6 <__divmodsi4_exit>
    35d4:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__negsi2>

000035d8 <__divmodsi4_neg2>:
    35d8:	50 95       	com	r21
    35da:	40 95       	com	r20
    35dc:	30 95       	com	r19
    35de:	21 95       	neg	r18
    35e0:	3f 4f       	sbci	r19, 0xFF	; 255
    35e2:	4f 4f       	sbci	r20, 0xFF	; 255
    35e4:	5f 4f       	sbci	r21, 0xFF	; 255

000035e6 <__divmodsi4_exit>:
    35e6:	08 95       	ret

000035e8 <__negsi2>:
    35e8:	90 95       	com	r25
    35ea:	80 95       	com	r24
    35ec:	70 95       	com	r23
    35ee:	61 95       	neg	r22
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	8f 4f       	sbci	r24, 0xFF	; 255
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	08 95       	ret

000035f8 <__tablejump2__>:
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	05 90       	lpm	r0, Z+
    35fe:	f4 91       	lpm	r31, Z
    3600:	e0 2d       	mov	r30, r0
    3602:	09 94       	ijmp

00003604 <malloc>:
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	82 30       	cpi	r24, 0x02	; 2
    360e:	91 05       	cpc	r25, r1
    3610:	10 f4       	brcc	.+4      	; 0x3616 <malloc+0x12>
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <__flp>
    361a:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <__flp+0x1>
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	a0 e0       	ldi	r26, 0x00	; 0
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	30 97       	sbiw	r30, 0x00	; 0
    3628:	19 f1       	breq	.+70     	; 0x3670 <malloc+0x6c>
    362a:	40 81       	ld	r20, Z
    362c:	51 81       	ldd	r21, Z+1	; 0x01
    362e:	02 81       	ldd	r16, Z+2	; 0x02
    3630:	13 81       	ldd	r17, Z+3	; 0x03
    3632:	48 17       	cp	r20, r24
    3634:	59 07       	cpc	r21, r25
    3636:	c8 f0       	brcs	.+50     	; 0x366a <malloc+0x66>
    3638:	84 17       	cp	r24, r20
    363a:	95 07       	cpc	r25, r21
    363c:	69 f4       	brne	.+26     	; 0x3658 <malloc+0x54>
    363e:	10 97       	sbiw	r26, 0x00	; 0
    3640:	31 f0       	breq	.+12     	; 0x364e <malloc+0x4a>
    3642:	12 96       	adiw	r26, 0x02	; 2
    3644:	0c 93       	st	X, r16
    3646:	12 97       	sbiw	r26, 0x02	; 2
    3648:	13 96       	adiw	r26, 0x03	; 3
    364a:	1c 93       	st	X, r17
    364c:	27 c0       	rjmp	.+78     	; 0x369c <malloc+0x98>
    364e:	00 93 90 04 	sts	0x0490, r16	; 0x800490 <__flp>
    3652:	10 93 91 04 	sts	0x0491, r17	; 0x800491 <__flp+0x1>
    3656:	22 c0       	rjmp	.+68     	; 0x369c <malloc+0x98>
    3658:	21 15       	cp	r18, r1
    365a:	31 05       	cpc	r19, r1
    365c:	19 f0       	breq	.+6      	; 0x3664 <malloc+0x60>
    365e:	42 17       	cp	r20, r18
    3660:	53 07       	cpc	r21, r19
    3662:	18 f4       	brcc	.+6      	; 0x366a <malloc+0x66>
    3664:	9a 01       	movw	r18, r20
    3666:	bd 01       	movw	r22, r26
    3668:	ef 01       	movw	r28, r30
    366a:	df 01       	movw	r26, r30
    366c:	f8 01       	movw	r30, r16
    366e:	db cf       	rjmp	.-74     	; 0x3626 <malloc+0x22>
    3670:	21 15       	cp	r18, r1
    3672:	31 05       	cpc	r19, r1
    3674:	f9 f0       	breq	.+62     	; 0x36b4 <malloc+0xb0>
    3676:	28 1b       	sub	r18, r24
    3678:	39 0b       	sbc	r19, r25
    367a:	24 30       	cpi	r18, 0x04	; 4
    367c:	31 05       	cpc	r19, r1
    367e:	80 f4       	brcc	.+32     	; 0x36a0 <malloc+0x9c>
    3680:	8a 81       	ldd	r24, Y+2	; 0x02
    3682:	9b 81       	ldd	r25, Y+3	; 0x03
    3684:	61 15       	cp	r22, r1
    3686:	71 05       	cpc	r23, r1
    3688:	21 f0       	breq	.+8      	; 0x3692 <malloc+0x8e>
    368a:	fb 01       	movw	r30, r22
    368c:	93 83       	std	Z+3, r25	; 0x03
    368e:	82 83       	std	Z+2, r24	; 0x02
    3690:	04 c0       	rjmp	.+8      	; 0x369a <malloc+0x96>
    3692:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <__flp+0x1>
    3696:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <__flp>
    369a:	fe 01       	movw	r30, r28
    369c:	32 96       	adiw	r30, 0x02	; 2
    369e:	44 c0       	rjmp	.+136    	; 0x3728 <malloc+0x124>
    36a0:	fe 01       	movw	r30, r28
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	81 93       	st	Z+, r24
    36a8:	91 93       	st	Z+, r25
    36aa:	22 50       	subi	r18, 0x02	; 2
    36ac:	31 09       	sbc	r19, r1
    36ae:	39 83       	std	Y+1, r19	; 0x01
    36b0:	28 83       	st	Y, r18
    36b2:	3a c0       	rjmp	.+116    	; 0x3728 <malloc+0x124>
    36b4:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <__brkval>
    36b8:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <__brkval+0x1>
    36bc:	23 2b       	or	r18, r19
    36be:	41 f4       	brne	.+16     	; 0x36d0 <malloc+0xcc>
    36c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    36c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    36c8:	30 93 8f 04 	sts	0x048F, r19	; 0x80048f <__brkval+0x1>
    36cc:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <__brkval>
    36d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    36d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    36d8:	21 15       	cp	r18, r1
    36da:	31 05       	cpc	r19, r1
    36dc:	41 f4       	brne	.+16     	; 0x36ee <malloc+0xea>
    36de:	2d b7       	in	r18, 0x3d	; 61
    36e0:	3e b7       	in	r19, 0x3e	; 62
    36e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    36e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    36ea:	24 1b       	sub	r18, r20
    36ec:	35 0b       	sbc	r19, r21
    36ee:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <__brkval>
    36f2:	f0 91 8f 04 	lds	r31, 0x048F	; 0x80048f <__brkval+0x1>
    36f6:	e2 17       	cp	r30, r18
    36f8:	f3 07       	cpc	r31, r19
    36fa:	a0 f4       	brcc	.+40     	; 0x3724 <malloc+0x120>
    36fc:	2e 1b       	sub	r18, r30
    36fe:	3f 0b       	sbc	r19, r31
    3700:	28 17       	cp	r18, r24
    3702:	39 07       	cpc	r19, r25
    3704:	78 f0       	brcs	.+30     	; 0x3724 <malloc+0x120>
    3706:	ac 01       	movw	r20, r24
    3708:	4e 5f       	subi	r20, 0xFE	; 254
    370a:	5f 4f       	sbci	r21, 0xFF	; 255
    370c:	24 17       	cp	r18, r20
    370e:	35 07       	cpc	r19, r21
    3710:	48 f0       	brcs	.+18     	; 0x3724 <malloc+0x120>
    3712:	4e 0f       	add	r20, r30
    3714:	5f 1f       	adc	r21, r31
    3716:	50 93 8f 04 	sts	0x048F, r21	; 0x80048f <__brkval+0x1>
    371a:	40 93 8e 04 	sts	0x048E, r20	; 0x80048e <__brkval>
    371e:	81 93       	st	Z+, r24
    3720:	91 93       	st	Z+, r25
    3722:	02 c0       	rjmp	.+4      	; 0x3728 <malloc+0x124>
    3724:	e0 e0       	ldi	r30, 0x00	; 0
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	cf 01       	movw	r24, r30
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	08 95       	ret

00003734 <free>:
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	09 f4       	brne	.+2      	; 0x373e <free+0xa>
    373c:	81 c0       	rjmp	.+258    	; 0x3840 <free+0x10c>
    373e:	fc 01       	movw	r30, r24
    3740:	32 97       	sbiw	r30, 0x02	; 2
    3742:	13 82       	std	Z+3, r1	; 0x03
    3744:	12 82       	std	Z+2, r1	; 0x02
    3746:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <__flp>
    374a:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <__flp+0x1>
    374e:	10 97       	sbiw	r26, 0x00	; 0
    3750:	81 f4       	brne	.+32     	; 0x3772 <free+0x3e>
    3752:	20 81       	ld	r18, Z
    3754:	31 81       	ldd	r19, Z+1	; 0x01
    3756:	82 0f       	add	r24, r18
    3758:	93 1f       	adc	r25, r19
    375a:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <__brkval>
    375e:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <__brkval+0x1>
    3762:	28 17       	cp	r18, r24
    3764:	39 07       	cpc	r19, r25
    3766:	51 f5       	brne	.+84     	; 0x37bc <free+0x88>
    3768:	f0 93 8f 04 	sts	0x048F, r31	; 0x80048f <__brkval+0x1>
    376c:	e0 93 8e 04 	sts	0x048E, r30	; 0x80048e <__brkval>
    3770:	67 c0       	rjmp	.+206    	; 0x3840 <free+0x10c>
    3772:	ed 01       	movw	r28, r26
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	ce 17       	cp	r28, r30
    377a:	df 07       	cpc	r29, r31
    377c:	40 f4       	brcc	.+16     	; 0x378e <free+0x5a>
    377e:	4a 81       	ldd	r20, Y+2	; 0x02
    3780:	5b 81       	ldd	r21, Y+3	; 0x03
    3782:	9e 01       	movw	r18, r28
    3784:	41 15       	cp	r20, r1
    3786:	51 05       	cpc	r21, r1
    3788:	f1 f0       	breq	.+60     	; 0x37c6 <free+0x92>
    378a:	ea 01       	movw	r28, r20
    378c:	f5 cf       	rjmp	.-22     	; 0x3778 <free+0x44>
    378e:	d3 83       	std	Z+3, r29	; 0x03
    3790:	c2 83       	std	Z+2, r28	; 0x02
    3792:	40 81       	ld	r20, Z
    3794:	51 81       	ldd	r21, Z+1	; 0x01
    3796:	84 0f       	add	r24, r20
    3798:	95 1f       	adc	r25, r21
    379a:	c8 17       	cp	r28, r24
    379c:	d9 07       	cpc	r29, r25
    379e:	59 f4       	brne	.+22     	; 0x37b6 <free+0x82>
    37a0:	88 81       	ld	r24, Y
    37a2:	99 81       	ldd	r25, Y+1	; 0x01
    37a4:	84 0f       	add	r24, r20
    37a6:	95 1f       	adc	r25, r21
    37a8:	02 96       	adiw	r24, 0x02	; 2
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	80 83       	st	Z, r24
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	93 83       	std	Z+3, r25	; 0x03
    37b4:	82 83       	std	Z+2, r24	; 0x02
    37b6:	21 15       	cp	r18, r1
    37b8:	31 05       	cpc	r19, r1
    37ba:	29 f4       	brne	.+10     	; 0x37c6 <free+0x92>
    37bc:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <__flp+0x1>
    37c0:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <__flp>
    37c4:	3d c0       	rjmp	.+122    	; 0x3840 <free+0x10c>
    37c6:	e9 01       	movw	r28, r18
    37c8:	fb 83       	std	Y+3, r31	; 0x03
    37ca:	ea 83       	std	Y+2, r30	; 0x02
    37cc:	49 91       	ld	r20, Y+
    37ce:	59 91       	ld	r21, Y+
    37d0:	c4 0f       	add	r28, r20
    37d2:	d5 1f       	adc	r29, r21
    37d4:	ec 17       	cp	r30, r28
    37d6:	fd 07       	cpc	r31, r29
    37d8:	61 f4       	brne	.+24     	; 0x37f2 <free+0xbe>
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	84 0f       	add	r24, r20
    37e0:	95 1f       	adc	r25, r21
    37e2:	02 96       	adiw	r24, 0x02	; 2
    37e4:	e9 01       	movw	r28, r18
    37e6:	99 83       	std	Y+1, r25	; 0x01
    37e8:	88 83       	st	Y, r24
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	9b 83       	std	Y+3, r25	; 0x03
    37f0:	8a 83       	std	Y+2, r24	; 0x02
    37f2:	e0 e0       	ldi	r30, 0x00	; 0
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	12 96       	adiw	r26, 0x02	; 2
    37f8:	8d 91       	ld	r24, X+
    37fa:	9c 91       	ld	r25, X
    37fc:	13 97       	sbiw	r26, 0x03	; 3
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	19 f0       	breq	.+6      	; 0x3808 <free+0xd4>
    3802:	fd 01       	movw	r30, r26
    3804:	dc 01       	movw	r26, r24
    3806:	f7 cf       	rjmp	.-18     	; 0x37f6 <free+0xc2>
    3808:	8d 91       	ld	r24, X+
    380a:	9c 91       	ld	r25, X
    380c:	11 97       	sbiw	r26, 0x01	; 1
    380e:	9d 01       	movw	r18, r26
    3810:	2e 5f       	subi	r18, 0xFE	; 254
    3812:	3f 4f       	sbci	r19, 0xFF	; 255
    3814:	82 0f       	add	r24, r18
    3816:	93 1f       	adc	r25, r19
    3818:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <__brkval>
    381c:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <__brkval+0x1>
    3820:	28 17       	cp	r18, r24
    3822:	39 07       	cpc	r19, r25
    3824:	69 f4       	brne	.+26     	; 0x3840 <free+0x10c>
    3826:	30 97       	sbiw	r30, 0x00	; 0
    3828:	29 f4       	brne	.+10     	; 0x3834 <free+0x100>
    382a:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <__flp+0x1>
    382e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <__flp>
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <free+0x104>
    3834:	13 82       	std	Z+3, r1	; 0x03
    3836:	12 82       	std	Z+2, r1	; 0x02
    3838:	b0 93 8f 04 	sts	0x048F, r27	; 0x80048f <__brkval+0x1>
    383c:	a0 93 8e 04 	sts	0x048E, r26	; 0x80048e <__brkval>
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <realloc>:
    3846:	a0 e0       	ldi	r26, 0x00	; 0
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	e9 e2       	ldi	r30, 0x29	; 41
    384c:	fc e1       	ldi	r31, 0x1C	; 28
    384e:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__prologue_saves__+0x8>
    3852:	ec 01       	movw	r28, r24
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	21 f4       	brne	.+8      	; 0x3860 <realloc+0x1a>
    3858:	cb 01       	movw	r24, r22
    385a:	0e 94 02 1b 	call	0x3604	; 0x3604 <malloc>
    385e:	b4 c0       	rjmp	.+360    	; 0x39c8 <realloc+0x182>
    3860:	fc 01       	movw	r30, r24
    3862:	e6 0f       	add	r30, r22
    3864:	f7 1f       	adc	r31, r23
    3866:	9c 01       	movw	r18, r24
    3868:	22 50       	subi	r18, 0x02	; 2
    386a:	31 09       	sbc	r19, r1
    386c:	e2 17       	cp	r30, r18
    386e:	f3 07       	cpc	r31, r19
    3870:	08 f4       	brcc	.+2      	; 0x3874 <realloc+0x2e>
    3872:	a8 c0       	rjmp	.+336    	; 0x39c4 <realloc+0x17e>
    3874:	d9 01       	movw	r26, r18
    3876:	0d 91       	ld	r16, X+
    3878:	1c 91       	ld	r17, X
    387a:	11 97       	sbiw	r26, 0x01	; 1
    387c:	06 17       	cp	r16, r22
    387e:	17 07       	cpc	r17, r23
    3880:	b0 f0       	brcs	.+44     	; 0x38ae <realloc+0x68>
    3882:	05 30       	cpi	r16, 0x05	; 5
    3884:	11 05       	cpc	r17, r1
    3886:	08 f4       	brcc	.+2      	; 0x388a <realloc+0x44>
    3888:	9b c0       	rjmp	.+310    	; 0x39c0 <realloc+0x17a>
    388a:	c8 01       	movw	r24, r16
    388c:	04 97       	sbiw	r24, 0x04	; 4
    388e:	86 17       	cp	r24, r22
    3890:	97 07       	cpc	r25, r23
    3892:	08 f4       	brcc	.+2      	; 0x3896 <realloc+0x50>
    3894:	95 c0       	rjmp	.+298    	; 0x39c0 <realloc+0x17a>
    3896:	02 50       	subi	r16, 0x02	; 2
    3898:	11 09       	sbc	r17, r1
    389a:	06 1b       	sub	r16, r22
    389c:	17 0b       	sbc	r17, r23
    389e:	01 93       	st	Z+, r16
    38a0:	11 93       	st	Z+, r17
    38a2:	6d 93       	st	X+, r22
    38a4:	7c 93       	st	X, r23
    38a6:	cf 01       	movw	r24, r30
    38a8:	0e 94 9a 1b 	call	0x3734	; 0x3734 <free>
    38ac:	89 c0       	rjmp	.+274    	; 0x39c0 <realloc+0x17a>
    38ae:	5b 01       	movw	r10, r22
    38b0:	a0 1a       	sub	r10, r16
    38b2:	b1 0a       	sbc	r11, r17
    38b4:	4c 01       	movw	r8, r24
    38b6:	80 0e       	add	r8, r16
    38b8:	91 1e       	adc	r9, r17
    38ba:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <__flp>
    38be:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <__flp+0x1>
    38c2:	61 2c       	mov	r6, r1
    38c4:	71 2c       	mov	r7, r1
    38c6:	e1 2c       	mov	r14, r1
    38c8:	f1 2c       	mov	r15, r1
    38ca:	10 97       	sbiw	r26, 0x00	; 0
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <realloc+0x8a>
    38ce:	46 c0       	rjmp	.+140    	; 0x395c <realloc+0x116>
    38d0:	8d 91       	ld	r24, X+
    38d2:	9c 91       	ld	r25, X
    38d4:	11 97       	sbiw	r26, 0x01	; 1
    38d6:	a8 15       	cp	r26, r8
    38d8:	b9 05       	cpc	r27, r9
    38da:	b1 f5       	brne	.+108    	; 0x3948 <realloc+0x102>
    38dc:	6c 01       	movw	r12, r24
    38de:	42 e0       	ldi	r20, 0x02	; 2
    38e0:	c4 0e       	add	r12, r20
    38e2:	d1 1c       	adc	r13, r1
    38e4:	ca 14       	cp	r12, r10
    38e6:	db 04       	cpc	r13, r11
    38e8:	78 f1       	brcs	.+94     	; 0x3948 <realloc+0x102>
    38ea:	4c 01       	movw	r8, r24
    38ec:	8a 18       	sub	r8, r10
    38ee:	9b 08       	sbc	r9, r11
    38f0:	64 01       	movw	r12, r8
    38f2:	42 e0       	ldi	r20, 0x02	; 2
    38f4:	c4 0e       	add	r12, r20
    38f6:	d1 1c       	adc	r13, r1
    38f8:	12 96       	adiw	r26, 0x02	; 2
    38fa:	bc 90       	ld	r11, X
    38fc:	12 97       	sbiw	r26, 0x02	; 2
    38fe:	13 96       	adiw	r26, 0x03	; 3
    3900:	ac 91       	ld	r26, X
    3902:	b5 e0       	ldi	r27, 0x05	; 5
    3904:	cb 16       	cp	r12, r27
    3906:	d1 04       	cpc	r13, r1
    3908:	40 f0       	brcs	.+16     	; 0x391a <realloc+0xd4>
    390a:	b2 82       	std	Z+2, r11	; 0x02
    390c:	a3 83       	std	Z+3, r26	; 0x03
    390e:	91 82       	std	Z+1, r9	; 0x01
    3910:	80 82       	st	Z, r8
    3912:	d9 01       	movw	r26, r18
    3914:	6d 93       	st	X+, r22
    3916:	7c 93       	st	X, r23
    3918:	09 c0       	rjmp	.+18     	; 0x392c <realloc+0xe6>
    391a:	0e 5f       	subi	r16, 0xFE	; 254
    391c:	1f 4f       	sbci	r17, 0xFF	; 255
    391e:	80 0f       	add	r24, r16
    3920:	91 1f       	adc	r25, r17
    3922:	f9 01       	movw	r30, r18
    3924:	91 83       	std	Z+1, r25	; 0x01
    3926:	80 83       	st	Z, r24
    3928:	eb 2d       	mov	r30, r11
    392a:	fa 2f       	mov	r31, r26
    392c:	e1 14       	cp	r14, r1
    392e:	f1 04       	cpc	r15, r1
    3930:	31 f0       	breq	.+12     	; 0x393e <realloc+0xf8>
    3932:	d7 01       	movw	r26, r14
    3934:	13 96       	adiw	r26, 0x03	; 3
    3936:	fc 93       	st	X, r31
    3938:	ee 93       	st	-X, r30
    393a:	12 97       	sbiw	r26, 0x02	; 2
    393c:	41 c0       	rjmp	.+130    	; 0x39c0 <realloc+0x17a>
    393e:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <__flp+0x1>
    3942:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <__flp>
    3946:	3c c0       	rjmp	.+120    	; 0x39c0 <realloc+0x17a>
    3948:	68 16       	cp	r6, r24
    394a:	79 06       	cpc	r7, r25
    394c:	08 f4       	brcc	.+2      	; 0x3950 <realloc+0x10a>
    394e:	3c 01       	movw	r6, r24
    3950:	7d 01       	movw	r14, r26
    3952:	12 96       	adiw	r26, 0x02	; 2
    3954:	0d 90       	ld	r0, X+
    3956:	bc 91       	ld	r27, X
    3958:	a0 2d       	mov	r26, r0
    395a:	b7 cf       	rjmp	.-146    	; 0x38ca <realloc+0x84>
    395c:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <__brkval>
    3960:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <__brkval+0x1>
    3964:	88 16       	cp	r8, r24
    3966:	99 06       	cpc	r9, r25
    3968:	e1 f4       	brne	.+56     	; 0x39a2 <realloc+0x15c>
    396a:	66 16       	cp	r6, r22
    396c:	77 06       	cpc	r7, r23
    396e:	c8 f4       	brcc	.+50     	; 0x39a2 <realloc+0x15c>
    3970:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3974:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	41 f4       	brne	.+16     	; 0x398c <realloc+0x146>
    397c:	8d b7       	in	r24, 0x3d	; 61
    397e:	9e b7       	in	r25, 0x3e	; 62
    3980:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3984:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3988:	84 1b       	sub	r24, r20
    398a:	95 0b       	sbc	r25, r21
    398c:	e8 17       	cp	r30, r24
    398e:	f9 07       	cpc	r31, r25
    3990:	c8 f4       	brcc	.+50     	; 0x39c4 <realloc+0x17e>
    3992:	f0 93 8f 04 	sts	0x048F, r31	; 0x80048f <__brkval+0x1>
    3996:	e0 93 8e 04 	sts	0x048E, r30	; 0x80048e <__brkval>
    399a:	f9 01       	movw	r30, r18
    399c:	71 83       	std	Z+1, r23	; 0x01
    399e:	60 83       	st	Z, r22
    39a0:	0f c0       	rjmp	.+30     	; 0x39c0 <realloc+0x17a>
    39a2:	cb 01       	movw	r24, r22
    39a4:	0e 94 02 1b 	call	0x3604	; 0x3604 <malloc>
    39a8:	7c 01       	movw	r14, r24
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	59 f0       	breq	.+22     	; 0x39c4 <realloc+0x17e>
    39ae:	a8 01       	movw	r20, r16
    39b0:	be 01       	movw	r22, r28
    39b2:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
    39b6:	ce 01       	movw	r24, r28
    39b8:	0e 94 9a 1b 	call	0x3734	; 0x3734 <free>
    39bc:	c7 01       	movw	r24, r14
    39be:	04 c0       	rjmp	.+8      	; 0x39c8 <realloc+0x182>
    39c0:	ce 01       	movw	r24, r28
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <realloc+0x182>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	ee e0       	ldi	r30, 0x0E	; 14
    39ce:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__epilogue_restores__+0x8>

000039d2 <atoi>:
    39d2:	fc 01       	movw	r30, r24
    39d4:	88 27       	eor	r24, r24
    39d6:	99 27       	eor	r25, r25
    39d8:	e8 94       	clt
    39da:	21 91       	ld	r18, Z+
    39dc:	20 32       	cpi	r18, 0x20	; 32
    39de:	e9 f3       	breq	.-6      	; 0x39da <atoi+0x8>
    39e0:	29 30       	cpi	r18, 0x09	; 9
    39e2:	10 f0       	brcs	.+4      	; 0x39e8 <atoi+0x16>
    39e4:	2e 30       	cpi	r18, 0x0E	; 14
    39e6:	c8 f3       	brcs	.-14     	; 0x39da <atoi+0x8>
    39e8:	2b 32       	cpi	r18, 0x2B	; 43
    39ea:	41 f0       	breq	.+16     	; 0x39fc <atoi+0x2a>
    39ec:	2d 32       	cpi	r18, 0x2D	; 45
    39ee:	39 f4       	brne	.+14     	; 0x39fe <atoi+0x2c>
    39f0:	68 94       	set
    39f2:	04 c0       	rjmp	.+8      	; 0x39fc <atoi+0x2a>
    39f4:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__mulhi_const_10>
    39f8:	82 0f       	add	r24, r18
    39fa:	91 1d       	adc	r25, r1
    39fc:	21 91       	ld	r18, Z+
    39fe:	20 53       	subi	r18, 0x30	; 48
    3a00:	2a 30       	cpi	r18, 0x0A	; 10
    3a02:	c0 f3       	brcs	.-16     	; 0x39f4 <atoi+0x22>
    3a04:	1e f4       	brtc	.+6      	; 0x3a0c <atoi+0x3a>
    3a06:	90 95       	com	r25
    3a08:	81 95       	neg	r24
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	08 95       	ret

00003a0e <strcmp_P>:
    3a0e:	fb 01       	movw	r30, r22
    3a10:	dc 01       	movw	r26, r24
    3a12:	8d 91       	ld	r24, X+
    3a14:	05 90       	lpm	r0, Z+
    3a16:	80 19       	sub	r24, r0
    3a18:	01 10       	cpse	r0, r1
    3a1a:	d9 f3       	breq	.-10     	; 0x3a12 <strcmp_P+0x4>
    3a1c:	99 0b       	sbc	r25, r25
    3a1e:	08 95       	ret

00003a20 <__strlen_P>:
    3a20:	fc 01       	movw	r30, r24
    3a22:	05 90       	lpm	r0, Z+
    3a24:	00 20       	and	r0, r0
    3a26:	e9 f7       	brne	.-6      	; 0x3a22 <__strlen_P+0x2>
    3a28:	80 95       	com	r24
    3a2a:	90 95       	com	r25
    3a2c:	8e 0f       	add	r24, r30
    3a2e:	9f 1f       	adc	r25, r31
    3a30:	08 95       	ret

00003a32 <strstr_P>:
    3a32:	fb 01       	movw	r30, r22
    3a34:	55 91       	lpm	r21, Z+
    3a36:	55 23       	and	r21, r21
    3a38:	a9 f0       	breq	.+42     	; 0x3a64 <strstr_P+0x32>
    3a3a:	bf 01       	movw	r22, r30
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	4d 91       	ld	r20, X+
    3a40:	45 17       	cp	r20, r21
    3a42:	41 11       	cpse	r20, r1
    3a44:	e1 f7       	brne	.-8      	; 0x3a3e <strstr_P+0xc>
    3a46:	59 f4       	brne	.+22     	; 0x3a5e <strstr_P+0x2c>
    3a48:	cd 01       	movw	r24, r26
    3a4a:	05 90       	lpm	r0, Z+
    3a4c:	00 20       	and	r0, r0
    3a4e:	49 f0       	breq	.+18     	; 0x3a62 <strstr_P+0x30>
    3a50:	4d 91       	ld	r20, X+
    3a52:	40 15       	cp	r20, r0
    3a54:	41 11       	cpse	r20, r1
    3a56:	c9 f3       	breq	.-14     	; 0x3a4a <strstr_P+0x18>
    3a58:	fb 01       	movw	r30, r22
    3a5a:	41 11       	cpse	r20, r1
    3a5c:	ef cf       	rjmp	.-34     	; 0x3a3c <strstr_P+0xa>
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	08 95       	ret

00003a66 <memcpy>:
    3a66:	fb 01       	movw	r30, r22
    3a68:	dc 01       	movw	r26, r24
    3a6a:	02 c0       	rjmp	.+4      	; 0x3a70 <memcpy+0xa>
    3a6c:	01 90       	ld	r0, Z+
    3a6e:	0d 92       	st	X+, r0
    3a70:	41 50       	subi	r20, 0x01	; 1
    3a72:	50 40       	sbci	r21, 0x00	; 0
    3a74:	d8 f7       	brcc	.-10     	; 0x3a6c <memcpy+0x6>
    3a76:	08 95       	ret

00003a78 <strchr>:
    3a78:	fc 01       	movw	r30, r24
    3a7a:	81 91       	ld	r24, Z+
    3a7c:	86 17       	cp	r24, r22
    3a7e:	21 f0       	breq	.+8      	; 0x3a88 <strchr+0x10>
    3a80:	88 23       	and	r24, r24
    3a82:	d9 f7       	brne	.-10     	; 0x3a7a <strchr+0x2>
    3a84:	99 27       	eor	r25, r25
    3a86:	08 95       	ret
    3a88:	31 97       	sbiw	r30, 0x01	; 1
    3a8a:	cf 01       	movw	r24, r30
    3a8c:	08 95       	ret

00003a8e <strcpy>:
    3a8e:	fb 01       	movw	r30, r22
    3a90:	dc 01       	movw	r26, r24
    3a92:	01 90       	ld	r0, Z+
    3a94:	0d 92       	st	X+, r0
    3a96:	00 20       	and	r0, r0
    3a98:	e1 f7       	brne	.-8      	; 0x3a92 <strcpy+0x4>
    3a9a:	08 95       	ret

00003a9c <__mulhi_const_10>:
    3a9c:	7a e0       	ldi	r23, 0x0A	; 10
    3a9e:	97 9f       	mul	r25, r23
    3aa0:	90 2d       	mov	r25, r0
    3aa2:	87 9f       	mul	r24, r23
    3aa4:	80 2d       	mov	r24, r0
    3aa6:	91 0d       	add	r25, r1
    3aa8:	11 24       	eor	r1, r1
    3aaa:	08 95       	ret

00003aac <__prologue_saves__>:
    3aac:	2f 92       	push	r2
    3aae:	3f 92       	push	r3
    3ab0:	4f 92       	push	r4
    3ab2:	5f 92       	push	r5
    3ab4:	6f 92       	push	r6
    3ab6:	7f 92       	push	r7
    3ab8:	8f 92       	push	r8
    3aba:	9f 92       	push	r9
    3abc:	af 92       	push	r10
    3abe:	bf 92       	push	r11
    3ac0:	cf 92       	push	r12
    3ac2:	df 92       	push	r13
    3ac4:	ef 92       	push	r14
    3ac6:	ff 92       	push	r15
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	ca 1b       	sub	r28, r26
    3ad6:	db 0b       	sbc	r29, r27
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	f8 94       	cli
    3adc:	de bf       	out	0x3e, r29	; 62
    3ade:	0f be       	out	0x3f, r0	; 63
    3ae0:	cd bf       	out	0x3d, r28	; 61
    3ae2:	09 94       	ijmp

00003ae4 <__epilogue_restores__>:
    3ae4:	2a 88       	ldd	r2, Y+18	; 0x12
    3ae6:	39 88       	ldd	r3, Y+17	; 0x11
    3ae8:	48 88       	ldd	r4, Y+16	; 0x10
    3aea:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aec:	6e 84       	ldd	r6, Y+14	; 0x0e
    3aee:	7d 84       	ldd	r7, Y+13	; 0x0d
    3af0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3af2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3af4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3af6:	b9 84       	ldd	r11, Y+9	; 0x09
    3af8:	c8 84       	ldd	r12, Y+8	; 0x08
    3afa:	df 80       	ldd	r13, Y+7	; 0x07
    3afc:	ee 80       	ldd	r14, Y+6	; 0x06
    3afe:	fd 80       	ldd	r15, Y+5	; 0x05
    3b00:	0c 81       	ldd	r16, Y+4	; 0x04
    3b02:	1b 81       	ldd	r17, Y+3	; 0x03
    3b04:	aa 81       	ldd	r26, Y+2	; 0x02
    3b06:	b9 81       	ldd	r27, Y+1	; 0x01
    3b08:	ce 0f       	add	r28, r30
    3b0a:	d1 1d       	adc	r29, r1
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	ed 01       	movw	r28, r26
    3b18:	08 95       	ret

00003b1a <__do_global_dtors>:
    3b1a:	12 e0       	ldi	r17, 0x02	; 2
    3b1c:	c4 eb       	ldi	r28, 0xB4	; 180
    3b1e:	d2 e0       	ldi	r29, 0x02	; 2
    3b20:	04 c0       	rjmp	.+8      	; 0x3b2a <__do_global_dtors+0x10>
    3b22:	fe 01       	movw	r30, r28
    3b24:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__tablejump2__>
    3b28:	21 96       	adiw	r28, 0x01	; 1
    3b2a:	c5 3b       	cpi	r28, 0xB5	; 181
    3b2c:	d1 07       	cpc	r29, r17
    3b2e:	c9 f7       	brne	.-14     	; 0x3b22 <__do_global_dtors+0x8>
    3b30:	f8 94       	cli

00003b32 <__stop_program>:
    3b32:	ff cf       	rjmp	.-2      	; 0x3b32 <__stop_program>
