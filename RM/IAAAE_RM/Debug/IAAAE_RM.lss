
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00003470  00003504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e4  008001a6  008001a6  000035aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bc0  00000000  00000000  0000361c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001d758  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041da  00000000  00000000  00021934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000675b  00000000  00000000  00025b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c0c  00000000  00000000  0002c26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005403  00000000  00000000  0002ee78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000102b7  00000000  00000000  0003427b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  00044532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 15 02 	jmp	0x42a	; 0x42a <__dtors_end>
       4:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
       8:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
       c:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_3>
      10:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_3>
      14:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_3>
      18:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      1c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      20:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      24:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      28:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      2c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      30:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      34:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      38:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      3c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      40:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__vector_16>
      44:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      48:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_18>
      4c:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__vector_19>
      50:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      54:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      58:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      5c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      60:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__vector_24>
      64:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     224:	45 72 72 6f 72 3d 00                                Error=.

0000022b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     22b:	20 7c 20 00                                          | .

0000022f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     22f:	54 65 6d 70 3d 00                                   Temp=.

00000235 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     235:	20 7c 20 00                                          | .

00000239 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     239:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000242 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     242:	20 7c 20 00                                          | .

00000246 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     246:	50 56 2d 56 3d 00                                   PV-V=.

0000024c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     24c:	20 7c 20 00                                          | .

00000250 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     250:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000258 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     258:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000265 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     265:	20 7c 20 00                                          | .

00000269 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     269:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

00000272 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     272:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

0000027c <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     27c:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     28c:	6f 64 65 3d 00                                      ode=.

00000291 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     291:	20 7c 20 00                                          | .

00000295 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     295:	42 45 52 3d 00                                      BER=.

0000029a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     29a:	20 7c 20 00                                          | .

0000029e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     29e:	52 53 53 49 3d 00                                   RSSI=.

000002a4 <_ZZ4loopE3__c>:
     2a4:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000002ae <_ZZ8sendDatavE3__c_0>:
     2ae:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     2be:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     2ce:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

000002dd <_ZZ8sendDatavE3__c>:
     2dd:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     2ed:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

000002fe <_ZZ12takeReadingsvE3__c>:
     2fe:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     30e:	2e 2e 00                                            ...

00000311 <_ZZ21ensureFonaInitialisedbPbE3__c_4>:
     311:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     321:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000331 <_ZZ21ensureFonaInitialisedbPbE3__c_3>:
     331:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     341:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     351:	65 64 00                                            ed.

00000354 <_ZZ21ensureFonaInitialisedbPbE3__c_2>:
     354:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     364:	6e 67 20 47 50 52 53 2e 2e 2e 00                    ng GPRS....

0000036f <_ZZ21ensureFonaInitialisedbPbE3__c_1>:
     36f:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     37f:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

0000038c <_ZZ21ensureFonaInitialisedbPbE3__c_0>:
     38c:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     39c:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000003a7 <_ZZ21ensureFonaInitialisedbPbE3__c>:
     3a7:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     3b7:	61 2e 2e 2e 00                                      a....

000003bc <_ZZ5setupE3__c>:
     3bc:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003c8 <digital_pin_to_timer_PGM>:
     3c8:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3d8:	00 00 00 00                                         ....

000003dc <digital_pin_to_bit_mask_PGM>:
     3dc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3ec:	04 08 10 20                                         ... 

000003f0 <digital_pin_to_port_PGM>:
     3f0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     400:	03 03 03 03                                         ....

00000404 <port_to_input_PGM>:
     404:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000040e <port_to_output_PGM>:
     40e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000418 <port_to_mode_PGM>:
     418:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000422 <__ctors_start>:
     422:	68 0a       	sbc	r6, r24
     424:	f6 0e       	add	r15, r22
     426:	87 10       	cpse	r8, r7

00000428 <__ctors_end>:
     428:	78 0a       	sbc	r7, r24

0000042a <__dtors_end>:
     42a:	11 24       	eor	r1, r1
     42c:	1f be       	out	0x3f, r1	; 63
     42e:	cf ef       	ldi	r28, 0xFF	; 255
     430:	d8 e0       	ldi	r29, 0x08	; 8
     432:	de bf       	out	0x3e, r29	; 62
     434:	cd bf       	out	0x3d, r28	; 61

00000436 <__do_copy_data>:
     436:	11 e0       	ldi	r17, 0x01	; 1
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	e0 e7       	ldi	r30, 0x70	; 112
     43e:	f4 e3       	ldi	r31, 0x34	; 52
     440:	02 c0       	rjmp	.+4      	; 0x446 <__do_copy_data+0x10>
     442:	05 90       	lpm	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	a6 3a       	cpi	r26, 0xA6	; 166
     448:	b1 07       	cpc	r27, r17
     44a:	d9 f7       	brne	.-10     	; 0x442 <__do_copy_data+0xc>

0000044c <__do_clear_bss>:
     44c:	24 e0       	ldi	r18, 0x04	; 4
     44e:	a6 ea       	ldi	r26, 0xA6	; 166
     450:	b1 e0       	ldi	r27, 0x01	; 1
     452:	01 c0       	rjmp	.+2      	; 0x456 <.do_clear_bss_start>

00000454 <.do_clear_bss_loop>:
     454:	1d 92       	st	X+, r1

00000456 <.do_clear_bss_start>:
     456:	aa 38       	cpi	r26, 0x8A	; 138
     458:	b2 07       	cpc	r27, r18
     45a:	e1 f7       	brne	.-8      	; 0x454 <.do_clear_bss_loop>

0000045c <__do_global_ctors>:
     45c:	12 e0       	ldi	r17, 0x02	; 2
     45e:	c4 e1       	ldi	r28, 0x14	; 20
     460:	d2 e0       	ldi	r29, 0x02	; 2
     462:	04 c0       	rjmp	.+8      	; 0x46c <__do_global_ctors+0x10>
     464:	21 97       	sbiw	r28, 0x01	; 1
     466:	fe 01       	movw	r30, r28
     468:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__tablejump2__>
     46c:	c1 31       	cpi	r28, 0x11	; 17
     46e:	d1 07       	cpc	r29, r17
     470:	c9 f7       	brne	.-14     	; 0x464 <__do_global_ctors+0x8>
     472:	0e 94 b5 10 	call	0x216a	; 0x216a <main>
     476:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__do_global_dtors>

0000047a <__bad_interrupt>:
     47a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000047e <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     47e:	83 5e       	subi	r24, 0xE3	; 227
     480:	9e 4f       	sbci	r25, 0xFE	; 254
     482:	dc 01       	movw	r26, r24
     484:	8d 91       	ld	r24, X+
     486:	9c 91       	ld	r25, X
     488:	dc 01       	movw	r26, r24
     48a:	ed 91       	ld	r30, X+
     48c:	fc 91       	ld	r31, X
     48e:	04 80       	ldd	r0, Z+4	; 0x04
     490:	f5 81       	ldd	r31, Z+5	; 0x05
     492:	e0 2d       	mov	r30, r0
     494:	09 94       	ijmp

00000496 <_ZN13Adafruit_FONA5writeEh>:
     496:	83 5e       	subi	r24, 0xE3	; 227
     498:	9e 4f       	sbci	r25, 0xFE	; 254
     49a:	dc 01       	movw	r26, r24
     49c:	8d 91       	ld	r24, X+
     49e:	9c 91       	ld	r25, X
     4a0:	dc 01       	movw	r26, r24
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	01 90       	ld	r0, Z+
     4a8:	f0 81       	ld	r31, Z
     4aa:	e0 2d       	mov	r30, r0
     4ac:	09 94       	ijmp

000004ae <_ZN13Adafruit_FONA4readEv>:
     4ae:	83 5e       	subi	r24, 0xE3	; 227
     4b0:	9e 4f       	sbci	r25, 0xFE	; 254
     4b2:	dc 01       	movw	r26, r24
     4b4:	8d 91       	ld	r24, X+
     4b6:	9c 91       	ld	r25, X
     4b8:	dc 01       	movw	r26, r24
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	06 80       	ldd	r0, Z+6	; 0x06
     4c0:	f7 81       	ldd	r31, Z+7	; 0x07
     4c2:	e0 2d       	mov	r30, r0
     4c4:	09 94       	ijmp

000004c6 <_ZN13Adafruit_FONA4peekEv>:
     4c6:	83 5e       	subi	r24, 0xE3	; 227
     4c8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ca:	dc 01       	movw	r26, r24
     4cc:	8d 91       	ld	r24, X+
     4ce:	9c 91       	ld	r25, X
     4d0:	dc 01       	movw	r26, r24
     4d2:	ed 91       	ld	r30, X+
     4d4:	fc 91       	ld	r31, X
     4d6:	00 84       	ldd	r0, Z+8	; 0x08
     4d8:	f1 85       	ldd	r31, Z+9	; 0x09
     4da:	e0 2d       	mov	r30, r0
     4dc:	09 94       	ijmp

000004de <_ZN13Adafruit_FONA5flushEv>:
     4de:	83 5e       	subi	r24, 0xE3	; 227
     4e0:	9e 4f       	sbci	r25, 0xFE	; 254
     4e2:	dc 01       	movw	r26, r24
     4e4:	8d 91       	ld	r24, X+
     4e6:	9c 91       	ld	r25, X
     4e8:	dc 01       	movw	r26, r24
     4ea:	ed 91       	ld	r30, X+
     4ec:	fc 91       	ld	r31, X
     4ee:	02 84       	ldd	r0, Z+10	; 0x0a
     4f0:	f3 85       	ldd	r31, Z+11	; 0x0b
     4f2:	e0 2d       	mov	r30, r0
     4f4:	09 94       	ijmp

000004f6 <_ZN13Adafruit_FONAC1Eab>:
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <_ZN13Adafruit_FONAC1Eab+0x12>
     508:	00 d0       	rcall	.+0      	; 0x50a <_ZN13Adafruit_FONAC1Eab+0x14>
     50a:	00 d0       	rcall	.+0      	; 0x50c <_ZN13Adafruit_FONAC1Eab+0x16>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	8c 01       	movw	r16, r24
     512:	c6 2e       	mov	r12, r22
     514:	d4 2e       	mov	r13, r20
     516:	fc 01       	movw	r30, r24
     518:	13 82       	std	Z+3, r1	; 0x03
     51a:	12 82       	std	Z+2, r1	; 0x02
     51c:	88 ee       	ldi	r24, 0xE8	; 232
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	84 83       	std	Z+4, r24	; 0x04
     526:	95 83       	std	Z+5, r25	; 0x05
     528:	a6 83       	std	Z+6, r26	; 0x06
     52a:	b7 83       	std	Z+7, r27	; 0x07
     52c:	8a e3       	ldi	r24, 0x3A	; 58
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	91 83       	std	Z+1, r25	; 0x01
     532:	80 83       	st	Z, r24
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	86 87       	std	Z+14, r24	; 0x0e
     538:	78 01       	movw	r14, r16
     53a:	fb ee       	ldi	r31, 0xEB	; 235
     53c:	ef 1a       	sub	r14, r31
     53e:	fe ef       	ldi	r31, 0xFE	; 254
     540:	ff 0a       	sbc	r15, r31
     542:	69 e8       	ldi	r22, 0x89	; 137
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	c7 01       	movw	r24, r14
     548:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN6StringC1EPKc>
     54c:	f8 01       	movw	r30, r16
     54e:	c4 86       	std	Z+12, r12	; 0x0c
     550:	d5 86       	std	Z+13, r13	; 0x0d
     552:	e2 5f       	subi	r30, 0xF2	; 242
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	8c e1       	ldi	r24, 0x1C	; 28
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	91 83       	std	Z+1, r25	; 0x01
     55c:	80 83       	st	Z, r24
     55e:	32 96       	adiw	r30, 0x02	; 2
     560:	11 82       	std	Z+1, r1	; 0x01
     562:	10 82       	st	Z, r1
     564:	32 96       	adiw	r30, 0x02	; 2
     566:	11 82       	std	Z+1, r1	; 0x01
     568:	10 82       	st	Z, r1
     56a:	3b 96       	adiw	r30, 0x0b	; 11
     56c:	11 82       	std	Z+1, r1	; 0x01
     56e:	10 82       	st	Z, r1
     570:	39 97       	sbiw	r30, 0x09	; 9
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 83       	st	Z, r24
     576:	67 e0       	ldi	r22, 0x07	; 7
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN6StringC1EPKc>
     582:	be 01       	movw	r22, r28
     584:	6f 5f       	subi	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	c7 01       	movw	r24, r14
     58a:	0e 94 b2 14 	call	0x2964	; 0x2964 <_ZN6StringaSEOS_>
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN6StringD1Ev>
     596:	f8 01       	movw	r30, r16
     598:	e5 5e       	subi	r30, 0xE5	; 229
     59a:	fe 4f       	sbci	r31, 0xFE	; 254
     59c:	89 e1       	ldi	r24, 0x19	; 25
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
     5a4:	26 96       	adiw	r28, 0x06	; 6
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	08 95       	ret

000005c2 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     5c2:	8b 5e       	subi	r24, 0xEB	; 235
     5c4:	9e 4f       	sbci	r25, 0xFE	; 254
     5c6:	0c 94 92 14 	jmp	0x2924	; 0x2924 <_ZN6StringaSERKS_>

000005ca <_ZN13Adafruit_FONA10flushInputEv>:
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	ec 01       	movw	r28, r24
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	8c 01       	movw	r16, r24
     5da:	0f 5f       	subi	r16, 0xFF	; 255
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255
     5de:	88 97       	sbiw	r24, 0x28	; 40
     5e0:	d8 f4       	brcc	.+54     	; 0x618 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     5e2:	e8 81       	ld	r30, Y
     5e4:	f9 81       	ldd	r31, Y+1	; 0x01
     5e6:	04 80       	ldd	r0, Z+4	; 0x04
     5e8:	f5 81       	ldd	r31, Z+5	; 0x05
     5ea:	e0 2d       	mov	r30, r0
     5ec:	ce 01       	movw	r24, r28
     5ee:	09 95       	icall
     5f0:	89 2b       	or	r24, r25
     5f2:	51 f0       	breq	.+20     	; 0x608 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     5f4:	e8 81       	ld	r30, Y
     5f6:	f9 81       	ldd	r31, Y+1	; 0x01
     5f8:	06 80       	ldd	r0, Z+6	; 0x06
     5fa:	f7 81       	ldd	r31, Z+7	; 0x07
     5fc:	e0 2d       	mov	r30, r0
     5fe:	ce 01       	movw	r24, r28
     600:	09 95       	icall
     602:	00 e0       	ldi	r16, 0x00	; 0
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	ed cf       	rjmp	.-38     	; 0x5e2 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     614:	c8 01       	movw	r24, r16
     616:	e0 cf       	rjmp	.-64     	; 0x5d8 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	08 95       	ret

00000622 <_ZN13Adafruit_FONA8readlineEjb>:
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	7c 01       	movw	r14, r24
     636:	b4 2e       	mov	r11, r20
     638:	8b 01       	movw	r16, r22
     63a:	00 0f       	add	r16, r16
     63c:	11 1f       	adc	r17, r17
     63e:	00 0f       	add	r16, r16
     640:	11 1f       	adc	r17, r17
     642:	c0 e0       	ldi	r28, 0x00	; 0
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	67 01       	movw	r12, r14
     648:	83 ee       	ldi	r24, 0xE3	; 227
     64a:	c8 1a       	sub	r12, r24
     64c:	8e ef       	ldi	r24, 0xFE	; 254
     64e:	d8 0a       	sbc	r13, r24
     650:	01 15       	cp	r16, r1
     652:	11 05       	cpc	r17, r1
     654:	c9 f1       	breq	.+114    	; 0x6c8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     656:	ce 3f       	cpi	r28, 0xFE	; 254
     658:	d1 05       	cpc	r29, r1
     65a:	98 f0       	brcs	.+38     	; 0x682 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     65c:	64 e8       	ldi	r22, 0x84	; 132
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	8c e9       	ldi	r24, 0x9C	; 156
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
     668:	2f c0       	rjmp	.+94     	; 0x6c8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     66a:	f6 01       	movw	r30, r12
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	dc 01       	movw	r26, r24
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	06 80       	ldd	r0, Z+6	; 0x06
     678:	f7 81       	ldd	r31, Z+7	; 0x07
     67a:	e0 2d       	mov	r30, r0
     67c:	09 95       	icall
     67e:	8d 30       	cpi	r24, 0x0D	; 13
     680:	69 f4       	brne	.+26     	; 0x69c <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     682:	d6 01       	movw	r26, r12
     684:	8d 91       	ld	r24, X+
     686:	9c 91       	ld	r25, X
     688:	dc 01       	movw	r26, r24
     68a:	ed 91       	ld	r30, X+
     68c:	fc 91       	ld	r31, X
     68e:	04 80       	ldd	r0, Z+4	; 0x04
     690:	f5 81       	ldd	r31, Z+5	; 0x05
     692:	e0 2d       	mov	r30, r0
     694:	09 95       	icall
     696:	89 2b       	or	r24, r25
     698:	41 f7       	brne	.-48     	; 0x66a <_ZN13Adafruit_FONA8readlineEjb+0x48>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     69c:	8a 30       	cpi	r24, 0x0A	; 10
     69e:	21 f4       	brne	.+8      	; 0x6a8 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     6a0:	20 97       	sbiw	r28, 0x00	; 0
     6a2:	79 f3       	breq	.-34     	; 0x682 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     6a4:	bb 20       	and	r11, r11
     6a6:	81 f0       	breq	.+32     	; 0x6c8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     6a8:	f7 01       	movw	r30, r14
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	87 87       	std	Z+15, r24	; 0x0f
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	e7 cf       	rjmp	.-50     	; 0x682 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     6b4:	01 50       	subi	r16, 0x01	; 1
     6b6:	11 09       	sbc	r17, r1
     6b8:	39 f0       	breq	.+14     	; 0x6c8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     6c6:	c4 cf       	rjmp	.-120    	; 0x650 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     6c8:	f7 01       	movw	r30, r14
     6ca:	ec 0f       	add	r30, r28
     6cc:	fd 1f       	adc	r31, r29
     6ce:	17 86       	std	Z+15, r1	; 0x0f
     6d0:	8c 2f       	mov	r24, r28
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	bf 90       	pop	r11
     6e4:	08 95       	ret

000006e6 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
     6f0:	8b 01       	movw	r16, r22
     6f2:	ba 01       	movw	r22, r20
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13Adafruit_FONA8readlineEjb>
     6fa:	6a e8       	ldi	r22, 0x8A	; 138
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	8c e9       	ldi	r24, 0x9C	; 156
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     706:	2f 96       	adiw	r28, 0x0f	; 15
     708:	be 01       	movw	r22, r28
     70a:	8c e9       	ldi	r24, 0x9C	; 156
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     712:	b8 01       	movw	r22, r16
     714:	ce 01       	movw	r24, r28
     716:	0e 94 a5 19 	call	0x334a	; 0x334a <strcmp_P>
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	89 2b       	or	r24, r25
     71e:	09 f0       	breq	.+2      	; 0x722 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	82 2f       	mov	r24, r18
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	ec 01       	movw	r28, r24
     73c:	8b 01       	movw	r16, r22
     73e:	7a 01       	movw	r14, r20
     740:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN13Adafruit_FONA10flushInputEv>
     744:	6d e7       	ldi	r22, 0x7D	; 125
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	8c e9       	ldi	r24, 0x9C	; 156
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     750:	b8 01       	movw	r22, r16
     752:	8c e9       	ldi	r24, 0x9C	; 156
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
     75a:	fe 01       	movw	r30, r28
     75c:	e3 5e       	subi	r30, 0xE3	; 227
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	b8 01       	movw	r22, r16
     762:	80 81       	ld	r24, Z
     764:	91 81       	ldd	r25, Z+1	; 0x01
     766:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	b7 01       	movw	r22, r14
     76e:	ce 01       	movw	r24, r28
     770:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13Adafruit_FONA8readlineEjb>
     774:	18 2f       	mov	r17, r24
     776:	66 e7       	ldi	r22, 0x76	; 118
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	8c e9       	ldi	r24, 0x9C	; 156
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     782:	be 01       	movw	r22, r28
     784:	61 5f       	subi	r22, 0xF1	; 241
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	8c e9       	ldi	r24, 0x9C	; 156
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     790:	81 2f       	mov	r24, r17
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
     7b6:	6b 01       	movw	r12, r22
     7b8:	7a 01       	movw	r14, r20
     7ba:	59 01       	movw	r10, r18
     7bc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN13Adafruit_FONA10flushInputEv>
     7c0:	6f e6       	ldi	r22, 0x6F	; 111
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	8c e9       	ldi	r24, 0x9C	; 156
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     7cc:	b6 01       	movw	r22, r12
     7ce:	8c e9       	ldi	r24, 0x9C	; 156
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     7d6:	62 e2       	ldi	r22, 0x22	; 34
     7d8:	8c e9       	ldi	r24, 0x9C	; 156
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN5Print5printEc>
     7e0:	b7 01       	movw	r22, r14
     7e2:	8c e9       	ldi	r24, 0x9C	; 156
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     7ea:	62 e2       	ldi	r22, 0x22	; 34
     7ec:	8c e9       	ldi	r24, 0x9C	; 156
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <_ZN5Print7printlnEc>
     7f4:	8e 01       	movw	r16, r28
     7f6:	03 5e       	subi	r16, 0xE3	; 227
     7f8:	1e 4f       	sbci	r17, 0xFE	; 254
     7fa:	b6 01       	movw	r22, r12
     7fc:	f8 01       	movw	r30, r16
     7fe:	80 81       	ld	r24, Z
     800:	91 81       	ldd	r25, Z+1	; 0x01
     802:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     806:	62 e2       	ldi	r22, 0x22	; 34
     808:	f8 01       	movw	r30, r16
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN5Print5printEc>
     812:	b7 01       	movw	r22, r14
     814:	f8 01       	movw	r30, r16
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     81e:	62 e2       	ldi	r22, 0x22	; 34
     820:	f8 01       	movw	r30, r16
     822:	80 81       	ld	r24, Z
     824:	91 81       	ldd	r25, Z+1	; 0x01
     826:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <_ZN5Print7printlnEc>
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	b5 01       	movw	r22, r10
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13Adafruit_FONA8readlineEjb>
     834:	18 2f       	mov	r17, r24
     836:	68 e6       	ldi	r22, 0x68	; 104
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	8c e9       	ldi	r24, 0x9C	; 156
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     842:	be 01       	movw	r22, r28
     844:	61 5f       	subi	r22, 0xF1	; 241
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	8c e9       	ldi	r24, 0x9C	; 156
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     850:	81 2f       	mov	r24, r17
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
     866:	08 95       	ret

00000868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
     872:	8a 01       	movw	r16, r20
     874:	a9 01       	movw	r20, r18
     876:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     87a:	88 23       	and	r24, r24
     87c:	41 f0       	breq	.+16     	; 0x88e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     87e:	b8 01       	movw	r22, r16
     880:	ce 01       	movw	r24, r28
     882:	0f 96       	adiw	r24, 0x0f	; 15
     884:	0e 94 a5 19 	call	0x334a	; 0x334a <strcmp_P>
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	89 2b       	or	r24, r25
     88c:	09 f0       	breq	.+2      	; 0x890 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	82 2f       	mov	r24, r18
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	08 95       	ret

0000089c <_ZN13Adafruit_FONA5beginEhh>:
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	f6 2e       	mov	r15, r22
     8b0:	e4 2e       	mov	r14, r20
     8b2:	8f e1       	ldi	r24, 0x1F	; 31
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 c4 10 	call	0x2188	; 0x2188 <_Znwj>
     8ba:	8c 01       	movw	r16, r24
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	4e 2d       	mov	r20, r14
     8c0:	6f 2d       	mov	r22, r15
     8c2:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <_ZN14SoftwareSerialC1Ehhb>
     8c6:	7e 01       	movw	r14, r28
     8c8:	83 ee       	ldi	r24, 0xE3	; 227
     8ca:	e8 1a       	sub	r14, r24
     8cc:	8e ef       	ldi	r24, 0xFE	; 254
     8ce:	f8 0a       	sbc	r15, r24
     8d0:	d7 01       	movw	r26, r14
     8d2:	0d 93       	st	X+, r16
     8d4:	1c 93       	st	X, r17
     8d6:	40 ec       	ldi	r20, 0xC0	; 192
     8d8:	52 e1       	ldi	r21, 0x12	; 18
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	c8 01       	movw	r24, r16
     8e0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <_ZN14SoftwareSerial5beginEl>
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     8e8:	0e 94 6e 13 	call	0x26dc	; 0x26dc <pinMode>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     8f0:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
     8f4:	6a e0       	ldi	r22, 0x0A	; 10
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	8c 85       	ldd	r24, Y+12	; 0x0c
     904:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
     908:	64 e6       	ldi	r22, 0x64	; 100
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	8c 85       	ldd	r24, Y+12	; 0x0c
     918:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
     91c:	68 ef       	ldi	r22, 0xF8	; 248
     91e:	71 e0       	ldi	r23, 0x01	; 1
     920:	8c e9       	ldi	r24, 0x9C	; 156
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
     928:	8e e0       	ldi	r24, 0x0E	; 14
     92a:	c8 2e       	mov	r12, r24
     92c:	d1 2c       	mov	r13, r1
     92e:	8e 01       	movw	r16, r28
     930:	05 5e       	subi	r16, 0xE5	; 229
     932:	1e 4f       	sbci	r17, 0xFE	; 254
     934:	f7 01       	movw	r30, r14
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	dc 01       	movw	r26, r24
     93c:	ed 91       	ld	r30, X+
     93e:	fc 91       	ld	r31, X
     940:	04 80       	ldd	r0, Z+4	; 0x04
     942:	f5 81       	ldd	r31, Z+5	; 0x05
     944:	e0 2d       	mov	r30, r0
     946:	09 95       	icall
     948:	89 2b       	or	r24, r25
     94a:	59 f0       	breq	.+22     	; 0x962 <__stack+0x63>
     94c:	f7 01       	movw	r30, r14
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	dc 01       	movw	r26, r24
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	06 80       	ldd	r0, Z+6	; 0x06
     95a:	f7 81       	ldd	r31, Z+7	; 0x07
     95c:	e0 2d       	mov	r30, r0
     95e:	09 95       	icall
     960:	e9 cf       	rjmp	.-46     	; 0x934 <__stack+0x35>
     962:	f8 01       	movw	r30, r16
     964:	40 81       	ld	r20, Z
     966:	51 81       	ldd	r21, Z+1	; 0x01
     968:	24 ef       	ldi	r18, 0xF4	; 244
     96a:	31 e0       	ldi	r19, 0x01	; 1
     96c:	65 ef       	ldi	r22, 0xF5	; 245
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	ce 01       	movw	r24, r28
     972:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     976:	81 11       	cpse	r24, r1
     978:	34 c0       	rjmp	.+104    	; 0x9e2 <__stack+0xe3>
     97a:	d7 01       	movw	r26, r14
     97c:	8d 91       	ld	r24, X+
     97e:	9c 91       	ld	r25, X
     980:	dc 01       	movw	r26, r24
     982:	ed 91       	ld	r30, X+
     984:	fc 91       	ld	r31, X
     986:	04 80       	ldd	r0, Z+4	; 0x04
     988:	f5 81       	ldd	r31, Z+5	; 0x05
     98a:	e0 2d       	mov	r30, r0
     98c:	09 95       	icall
     98e:	89 2b       	or	r24, r25
     990:	59 f0       	breq	.+22     	; 0x9a8 <__stack+0xa9>
     992:	f7 01       	movw	r30, r14
     994:	80 81       	ld	r24, Z
     996:	91 81       	ldd	r25, Z+1	; 0x01
     998:	dc 01       	movw	r26, r24
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	06 80       	ldd	r0, Z+6	; 0x06
     9a0:	f7 81       	ldd	r31, Z+7	; 0x07
     9a2:	e0 2d       	mov	r30, r0
     9a4:	09 95       	icall
     9a6:	e9 cf       	rjmp	.-46     	; 0x97a <__stack+0x7b>
     9a8:	24 ef       	ldi	r18, 0xF4	; 244
     9aa:	31 e0       	ldi	r19, 0x01	; 1
     9ac:	42 ef       	ldi	r20, 0xF2	; 242
     9ae:	51 e0       	ldi	r21, 0x01	; 1
     9b0:	6f ee       	ldi	r22, 0xEF	; 239
     9b2:	71 e0       	ldi	r23, 0x01	; 1
     9b4:	ce 01       	movw	r24, r28
     9b6:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     9ba:	81 11       	cpse	r24, r1
     9bc:	12 c0       	rjmp	.+36     	; 0x9e2 <__stack+0xe3>
     9be:	64 ef       	ldi	r22, 0xF4	; 244
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     9ca:	b1 e0       	ldi	r27, 0x01	; 1
     9cc:	cb 1a       	sub	r12, r27
     9ce:	d1 08       	sbc	r13, r1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	b0 cf       	rjmp	.-160    	; 0x934 <__stack+0x35>
     9d4:	5e c0       	rjmp	.+188    	; 0xa92 <__stack+0x193>
     9d6:	64 e6       	ldi	r22, 0x64	; 100
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     9e2:	f8 01       	movw	r30, r16
     9e4:	40 81       	ld	r20, Z
     9e6:	51 81       	ldd	r21, Z+1	; 0x01
     9e8:	24 ef       	ldi	r18, 0xF4	; 244
     9ea:	31 e0       	ldi	r19, 0x01	; 1
     9ec:	62 ec       	ldi	r22, 0xC2	; 194
     9ee:	71 e0       	ldi	r23, 0x01	; 1
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     9f6:	64 e6       	ldi	r22, 0x64	; 100
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     a02:	d8 01       	movw	r26, r16
     a04:	4d 91       	ld	r20, X+
     a06:	5c 91       	ld	r21, X
     a08:	24 ef       	ldi	r18, 0xF4	; 244
     a0a:	31 e0       	ldi	r19, 0x01	; 1
     a0c:	6d eb       	ldi	r22, 0xBD	; 189
     a0e:	71 e0       	ldi	r23, 0x01	; 1
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     a16:	81 11       	cpse	r24, r1
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x11f>
     a1a:	12 e0       	ldi	r17, 0x02	; 2
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <__stack+0x121>
     a1e:	11 e0       	ldi	r17, 0x01	; 1
     a20:	64 e6       	ldi	r22, 0x64	; 100
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN13Adafruit_FONA10flushInputEv>
     a32:	66 eb       	ldi	r22, 0xB6	; 182
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	8c e9       	ldi	r24, 0x9C	; 156
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     a3e:	66 e1       	ldi	r22, 0x16	; 22
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	8c e9       	ldi	r24, 0x9C	; 156
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     a4a:	66 e1       	ldi	r22, 0x16	; 22
     a4c:	71 e0       	ldi	r23, 0x01	; 1
     a4e:	f7 01       	movw	r30, r14
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     a58:	41 e0       	ldi	r20, 0x01	; 1
     a5a:	64 ef       	ldi	r22, 0xF4	; 244
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	ce 01       	movw	r24, r28
     a60:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13Adafruit_FONA8readlineEjb>
     a64:	6f ea       	ldi	r22, 0xAF	; 175
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	8c e9       	ldi	r24, 0x9C	; 156
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     a70:	2f 96       	adiw	r28, 0x0f	; 15
     a72:	be 01       	movw	r22, r28
     a74:	8c e9       	ldi	r24, 0x9C	; 156
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     a7c:	64 ea       	ldi	r22, 0xA4	; 164
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 b7 19 	call	0x336e	; 0x336e <strstr_P>
     a86:	89 2b       	or	r24, r25
     a88:	11 f0       	breq	.+4      	; 0xa8e <__stack+0x18f>
     a8a:	81 2f       	mov	r24, r17
     a8c:	35 c0       	rjmp	.+106    	; 0xaf8 <__stack+0x1f9>
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	33 c0       	rjmp	.+102    	; 0xaf8 <__stack+0x1f9>
     a92:	d8 01       	movw	r26, r16
     a94:	4d 91       	ld	r20, X+
     a96:	5c 91       	ld	r21, X
     a98:	24 ef       	ldi	r18, 0xF4	; 244
     a9a:	31 e0       	ldi	r19, 0x01	; 1
     a9c:	6c ee       	ldi	r22, 0xEC	; 236
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	ce 01       	movw	r24, r28
     aa2:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     aa6:	64 e6       	ldi	r22, 0x64	; 100
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     ab2:	f8 01       	movw	r30, r16
     ab4:	40 81       	ld	r20, Z
     ab6:	51 81       	ldd	r21, Z+1	; 0x01
     ab8:	24 ef       	ldi	r18, 0xF4	; 244
     aba:	31 e0       	ldi	r19, 0x01	; 1
     abc:	69 ee       	ldi	r22, 0xE9	; 233
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ac6:	64 e6       	ldi	r22, 0x64	; 100
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
     ad2:	d8 01       	movw	r26, r16
     ad4:	4d 91       	ld	r20, X+
     ad6:	5c 91       	ld	r21, X
     ad8:	24 ef       	ldi	r18, 0xF4	; 244
     ada:	31 e0       	ldi	r19, 0x01	; 1
     adc:	66 ee       	ldi	r22, 0xE6	; 230
     ade:	71 e0       	ldi	r23, 0x01	; 1
     ae0:	ce 01       	movw	r24, r28
     ae2:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ae6:	81 11       	cpse	r24, r1
     ae8:	76 cf       	rjmp	.-276    	; 0x9d6 <__stack+0xd7>
     aea:	67 ec       	ldi	r22, 0xC7	; 199
     aec:	71 e0       	ldi	r23, 0x01	; 1
     aee:	8c e9       	ldi	r24, 0x9C	; 156
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	08 95       	ret

00000b0a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	79 01       	movw	r14, r18
     b1a:	98 01       	movw	r18, r16
     b1c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     b20:	b7 01       	movw	r22, r14
     b22:	ce 01       	movw	r24, r28
     b24:	0f 96       	adiw	r24, 0x0f	; 15
     b26:	0e 94 a5 19 	call	0x334a	; 0x334a <strcmp_P>
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	89 2b       	or	r24, r25
     b2e:	09 f0       	breq	.+2      	; 0xb32 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	82 2f       	mov	r24, r18
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <_ZN13Adafruit_FONA10enableGPRSEb>:
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
     b5e:	28 ee       	ldi	r18, 0xE8	; 232
     b60:	3d ef       	ldi	r19, 0xFD	; 253
     b62:	66 23       	and	r22, r22
     b64:	09 f4       	brne	.+2      	; 0xb68 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     b66:	1f c1       	rjmp	.+574    	; 0xda6 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     b68:	4e e5       	ldi	r20, 0x5E	; 94
     b6a:	51 e0       	ldi	r21, 0x01	; 1
     b6c:	63 e5       	ldi	r22, 0x53	; 83
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b74:	81 11       	cpse	r24, r1
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	78 2e       	mov	r7, r24
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     b7e:	77 24       	eor	r7, r7
     b80:	73 94       	inc	r7
     b82:	7e 01       	movw	r14, r28
     b84:	85 ee       	ldi	r24, 0xE5	; 229
     b86:	e8 1a       	sub	r14, r24
     b88:	8e ef       	ldi	r24, 0xFE	; 254
     b8a:	f8 0a       	sbc	r15, r24
     b8c:	f7 01       	movw	r30, r14
     b8e:	40 81       	ld	r20, Z
     b90:	51 81       	ldd	r21, Z+1	; 0x01
     b92:	20 e1       	ldi	r18, 0x10	; 16
     b94:	37 e2       	ldi	r19, 0x27	; 39
     b96:	68 e4       	ldi	r22, 0x48	; 72
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     ba4:	25 c1       	rjmp	.+586    	; 0xdf0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     ba6:	f7 01       	movw	r30, r14
     ba8:	40 81       	ld	r20, Z
     baa:	51 81       	ldd	r21, Z+1	; 0x01
     bac:	20 e1       	ldi	r18, 0x10	; 16
     bae:	37 e2       	ldi	r19, 0x27	; 39
     bb0:	6a e2       	ldi	r22, 0x2A	; 42
     bb2:	71 e0       	ldi	r23, 0x01	; 1
     bb4:	ce 01       	movw	r24, r28
     bb6:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     bbe:	1a c1       	rjmp	.+564    	; 0xdf4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     bc0:	4e 01       	movw	r8, r28
     bc2:	f2 ef       	ldi	r31, 0xF2	; 242
     bc4:	8f 1a       	sub	r8, r31
     bc6:	fe ef       	ldi	r31, 0xFE	; 254
     bc8:	9f 0a       	sbc	r9, r31
     bca:	f4 01       	movw	r30, r8
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	41 15       	cp	r20, r1
     bd2:	51 05       	cpc	r21, r1
     bd4:	71 f4       	brne	.+28     	; 0xbf2 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     bd6:	f7 01       	movw	r30, r14
     bd8:	40 81       	ld	r20, Z
     bda:	51 81       	ldd	r21, Z+1	; 0x01
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	65 ec       	ldi	r22, 0xC5	; 197
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     bea:	81 11       	cpse	r24, r1
     bec:	ce c0       	rjmp	.+412    	; 0xd8a <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     bee:	89 e0       	ldi	r24, 0x09	; 9
     bf0:	0e c1       	rjmp	.+540    	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     bf2:	f7 01       	movw	r30, r14
     bf4:	20 81       	ld	r18, Z
     bf6:	31 81       	ldd	r19, Z+1	; 0x01
     bf8:	00 e1       	ldi	r16, 0x10	; 16
     bfa:	17 e2       	ldi	r17, 0x27	; 39
     bfc:	66 e1       	ldi	r22, 0x16	; 22
     bfe:	71 e0       	ldi	r23, 0x01	; 1
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
     c0a:	f6 c0       	rjmp	.+492    	; 0xdf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN13Adafruit_FONA10flushInputEv>
     c12:	8e 01       	movw	r16, r28
     c14:	03 5e       	subi	r16, 0xE3	; 227
     c16:	1e 4f       	sbci	r17, 0xFE	; 254
     c18:	6c e0       	ldi	r22, 0x0C	; 12
     c1a:	71 e0       	ldi	r23, 0x01	; 1
     c1c:	f8 01       	movw	r30, r16
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     c26:	f4 01       	movw	r30, r8
     c28:	60 81       	ld	r22, Z
     c2a:	71 81       	ldd	r23, Z+1	; 0x01
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     c36:	5e 01       	movw	r10, r28
     c38:	f0 ef       	ldi	r31, 0xF0	; 240
     c3a:	af 1a       	sub	r10, r31
     c3c:	fe ef       	ldi	r31, 0xFE	; 254
     c3e:	bf 0a       	sbc	r11, r31
     c40:	f5 01       	movw	r30, r10
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	89 2b       	or	r24, r25
     c48:	79 f0       	breq	.+30     	; 0xc68 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
     c4a:	62 e3       	ldi	r22, 0x32	; 50
     c4c:	71 e0       	ldi	r23, 0x01	; 1
     c4e:	f8 01       	movw	r30, r16
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
     c58:	f5 01       	movw	r30, r10
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	f8 01       	movw	r30, r16
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     c68:	6e 01       	movw	r12, r28
     c6a:	fe ee       	ldi	r31, 0xEE	; 238
     c6c:	cf 1a       	sub	r12, r31
     c6e:	fe ef       	ldi	r31, 0xFE	; 254
     c70:	df 0a       	sbc	r13, r31
     c72:	f6 01       	movw	r30, r12
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	89 2b       	or	r24, r25
     c7a:	79 f0       	breq	.+30     	; 0xc9a <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
     c7c:	62 e3       	ldi	r22, 0x32	; 50
     c7e:	71 e0       	ldi	r23, 0x01	; 1
     c80:	f8 01       	movw	r30, r16
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
     c8a:	f6 01       	movw	r30, r12
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	f8 01       	movw	r30, r16
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     c9a:	64 e3       	ldi	r22, 0x34	; 52
     c9c:	71 e0       	ldi	r23, 0x01	; 1
     c9e:	f8 01       	movw	r30, r16
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	71 e0       	ldi	r23, 0x01	; 1
     cac:	8c e9       	ldi	r24, 0x9C	; 156
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     cb4:	6b ef       	ldi	r22, 0xFB	; 251
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	8c e9       	ldi	r24, 0x9C	; 156
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     cc0:	f4 01       	movw	r30, r8
     cc2:	60 81       	ld	r22, Z
     cc4:	71 81       	ldd	r23, Z+1	; 0x01
     cc6:	8c e9       	ldi	r24, 0x9C	; 156
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     cce:	f5 01       	movw	r30, r10
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	89 2b       	or	r24, r25
     cd6:	69 f0       	breq	.+26     	; 0xcf2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
     cd8:	62 e3       	ldi	r22, 0x32	; 50
     cda:	71 e0       	ldi	r23, 0x01	; 1
     cdc:	8c e9       	ldi	r24, 0x9C	; 156
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
     ce4:	f5 01       	movw	r30, r10
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	8c e9       	ldi	r24, 0x9C	; 156
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     cf2:	f6 01       	movw	r30, r12
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	89 2b       	or	r24, r25
     cfa:	69 f0       	breq	.+26     	; 0xd16 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
     cfc:	62 e3       	ldi	r22, 0x32	; 50
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	8c e9       	ldi	r24, 0x9C	; 156
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
     d08:	f6 01       	movw	r30, r12
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	8c e9       	ldi	r24, 0x9C	; 156
     d10:	93 e0       	ldi	r25, 0x03	; 3
     d12:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     d16:	64 e3       	ldi	r22, 0x34	; 52
     d18:	71 e0       	ldi	r23, 0x01	; 1
     d1a:	8c e9       	ldi	r24, 0x9C	; 156
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
     d22:	f7 01       	movw	r30, r14
     d24:	60 81       	ld	r22, Z
     d26:	71 81       	ldd	r23, Z+1	; 0x01
     d28:	40 e1       	ldi	r20, 0x10	; 16
     d2a:	57 e2       	ldi	r21, 0x27	; 39
     d2c:	ce 01       	movw	r24, r28
     d2e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
     d36:	62 c0       	rjmp	.+196    	; 0xdfc <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
     d38:	f5 01       	movw	r30, r10
     d3a:	40 81       	ld	r20, Z
     d3c:	51 81       	ldd	r21, Z+1	; 0x01
     d3e:	41 15       	cp	r20, r1
     d40:	51 05       	cpc	r21, r1
     d42:	39 f4       	brne	.+14     	; 0xd52 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
     d44:	f6 01       	movw	r30, r12
     d46:	40 81       	ld	r20, Z
     d48:	51 81       	ldd	r21, Z+1	; 0x01
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	79 f4       	brne	.+30     	; 0xd6e <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
     d50:	42 cf       	rjmp	.-380    	; 0xbd6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     d52:	f7 01       	movw	r30, r14
     d54:	20 81       	ld	r18, Z
     d56:	31 81       	ldd	r19, Z+1	; 0x01
     d58:	00 e1       	ldi	r16, 0x10	; 16
     d5a:	17 e2       	ldi	r17, 0x27	; 39
     d5c:	66 ee       	ldi	r22, 0xE6	; 230
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     d66:	81 11       	cpse	r24, r1
     d68:	ed cf       	rjmp	.-38     	; 0xd44 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
     d6a:	87 e0       	ldi	r24, 0x07	; 7
     d6c:	50 c0       	rjmp	.+160    	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d6e:	f7 01       	movw	r30, r14
     d70:	20 81       	ld	r18, Z
     d72:	31 81       	ldd	r19, Z+1	; 0x01
     d74:	00 e1       	ldi	r16, 0x10	; 16
     d76:	17 e2       	ldi	r17, 0x27	; 39
     d78:	62 ed       	ldi	r22, 0xD2	; 210
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	ce 01       	movw	r24, r28
     d7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     d82:	81 11       	cpse	r24, r1
     d84:	28 cf       	rjmp	.-432    	; 0xbd6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     d86:	88 e0       	ldi	r24, 0x08	; 8
     d88:	42 c0       	rjmp	.+132    	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d8a:	f7 01       	movw	r30, r14
     d8c:	40 81       	ld	r20, Z
     d8e:	51 81       	ldd	r21, Z+1	; 0x01
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	3f ef       	ldi	r19, 0xFF	; 255
     d94:	6c eb       	ldi	r22, 0xBC	; 188
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d9e:	88 23       	and	r24, r24
     da0:	79 f1       	breq	.+94     	; 0xe00 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
     da2:	87 2d       	mov	r24, r7
     da4:	34 c0       	rjmp	.+104    	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     da6:	44 eb       	ldi	r20, 0xB4	; 180
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	69 ea       	ldi	r22, 0xA9	; 169
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     db2:	88 23       	and	r24, r24
     db4:	39 f1       	breq	.+78     	; 0xe04 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
     db6:	8e 01       	movw	r16, r28
     db8:	05 5e       	subi	r16, 0xE5	; 229
     dba:	1e 4f       	sbci	r17, 0xFE	; 254
     dbc:	f8 01       	movw	r30, r16
     dbe:	40 81       	ld	r20, Z
     dc0:	51 81       	ldd	r21, Z+1	; 0x01
     dc2:	20 e1       	ldi	r18, 0x10	; 16
     dc4:	37 e2       	ldi	r19, 0x27	; 39
     dc6:	6c e9       	ldi	r22, 0x9C	; 156
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	ce 01       	movw	r24, r28
     dcc:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dd0:	88 23       	and	r24, r24
     dd2:	d1 f0       	breq	.+52     	; 0xe08 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
     dd4:	f8 01       	movw	r30, r16
     dd6:	40 81       	ld	r20, Z
     dd8:	51 81       	ldd	r21, Z+1	; 0x01
     dda:	20 e1       	ldi	r18, 0x10	; 16
     ddc:	37 e2       	ldi	r19, 0x27	; 39
     dde:	61 e9       	ldi	r22, 0x91	; 145
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	ce 01       	movw	r24, r28
     de4:	0e 94 34 04 	call	0x868	; 0x868 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     de8:	88 23       	and	r24, r24
     dea:	81 f0       	breq	.+32     	; 0xe0c <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e00:	8a e0       	ldi	r24, 0x0A	; 10
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e04:	8b e0       	ldi	r24, 0x0B	; 11
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e08:	8c e0       	ldi	r24, 0x0C	; 12
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e0c:	8d e0       	ldi	r24, 0x0D	; 13
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	9f 90       	pop	r9
     e24:	8f 90       	pop	r8
     e26:	7f 90       	pop	r7
     e28:	08 95       	ret

00000e2a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
     e2a:	af 92       	push	r10
     e2c:	bf 92       	push	r11
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	5b 01       	movw	r10, r22
     e3e:	6a 01       	movw	r12, r20
     e40:	e2 2e       	mov	r14, r18
     e42:	0f 96       	adiw	r24, 0x0f	; 15
     e44:	0e 94 b7 19 	call	0x336e	; 0x336e <strstr_P>
     e48:	ec 01       	movw	r28, r24
     e4a:	89 2b       	or	r24, r25
     e4c:	c1 f0       	breq	.+48     	; 0xe7e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     e4e:	c5 01       	movw	r24, r10
     e50:	0e 94 ae 19 	call	0x335c	; 0x335c <__strlen_P>
     e54:	8c 0f       	add	r24, r28
     e56:	9d 1f       	adc	r25, r29
     e58:	c0 e0       	ldi	r28, 0x00	; 0
     e5a:	f1 2c       	mov	r15, r1
     e5c:	c0 17       	cp	r28, r16
     e5e:	41 f0       	breq	.+16     	; 0xe70 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
     e60:	b7 01       	movw	r22, r14
     e62:	0e 94 da 19 	call	0x33b4	; 0x33b4 <strchr>
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	51 f0       	breq	.+20     	; 0xe7e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	cf 5f       	subi	r28, 0xFF	; 255
     e6e:	f6 cf       	rjmp	.-20     	; 0xe5c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
     e70:	0e 94 87 19 	call	0x330e	; 0x330e <atoi>
     e74:	f6 01       	movw	r30, r12
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	bf 90       	pop	r11
     e90:	af 90       	pop	r10
     e92:	08 95       	ret

00000e94 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
     ea8:	6a 01       	movw	r12, r20
     eaa:	59 01       	movw	r10, r18
     eac:	10 2f       	mov	r17, r16
     eae:	0e 2d       	mov	r16, r14
     eb0:	44 ef       	ldi	r20, 0xF4	; 244
     eb2:	51 e0       	ldi	r21, 0x01	; 1
     eb4:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     eb8:	21 2f       	mov	r18, r17
     eba:	a5 01       	movw	r20, r10
     ebc:	b6 01       	movw	r22, r12
     ebe:	ce 01       	movw	r24, r28
     ec0:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
     ec4:	18 2f       	mov	r17, r24
     ec6:	88 23       	and	r24, r24
     ec8:	31 f0       	breq	.+12     	; 0xed6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	64 ef       	ldi	r22, 0xF4	; 244
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	ce 01       	movw	r24, r28
     ed2:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13Adafruit_FONA8readlineEjb>
     ed6:	81 2f       	mov	r24, r17
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	08 95       	ret

00000eec <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	28 97       	sbiw	r28, 0x08	; 8
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
     f0e:	18 86       	std	Y+8, r1	; 0x08
     f10:	1f 82       	std	Y+7, r1	; 0x07
     f12:	1e 82       	std	Y+6, r1	; 0x06
     f14:	1d 82       	std	Y+5, r1	; 0x05
     f16:	1c 82       	std	Y+4, r1	; 0x04
     f18:	1b 82       	std	Y+3, r1	; 0x03
     f1a:	1a 82       	std	Y+2, r1	; 0x02
     f1c:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
     f1e:	e1 2c       	mov	r14, r1
     f20:	0c e2       	ldi	r16, 0x2C	; 44
     f22:	9e 01       	movw	r18, r28
     f24:	29 5f       	subi	r18, 0xF9	; 249
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	4d e9       	ldi	r20, 0x9D	; 157
     f2a:	51 e0       	ldi	r21, 0x01	; 1
     f2c:	66 e9       	ldi	r22, 0x96	; 150
     f2e:	71 e0       	ldi	r23, 0x01	; 1
     f30:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     f34:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
     f36:	ee 24       	eor	r14, r14
     f38:	e3 94       	inc	r14
     f3a:	9e 01       	movw	r18, r28
     f3c:	2b 5f       	subi	r18, 0xFB	; 251
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	4f e8       	ldi	r20, 0x8F	; 143
     f42:	51 e0       	ldi	r21, 0x01	; 1
     f44:	68 e8       	ldi	r22, 0x88	; 136
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	c6 01       	movw	r24, r12
     f4a:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     f4e:	88 23       	and	r24, r24
     f50:	19 f0       	breq	.+6      	; 0xf58 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	f8 26       	eor	r15, r24
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
     f58:	ff 24       	eor	r15, r15
     f5a:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
     f5c:	e1 2c       	mov	r14, r1
     f5e:	0c e2       	ldi	r16, 0x2C	; 44
     f60:	9e 01       	movw	r18, r28
     f62:	2d 5f       	subi	r18, 0xFD	; 253
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	51 e0       	ldi	r21, 0x01	; 1
     f6a:	67 e7       	ldi	r22, 0x77	; 119
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	c6 01       	movw	r24, r12
     f70:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     f74:	88 23       	and	r24, r24
     f76:	11 f0       	breq	.+4      	; 0xf7c <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
     f78:	1b 81       	ldd	r17, Y+3	; 0x03
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
     f7c:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
     f7e:	ee 24       	eor	r14, r14
     f80:	e3 94       	inc	r14
     f82:	0c e2       	ldi	r16, 0x2C	; 44
     f84:	9e 01       	movw	r18, r28
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	4f e6       	ldi	r20, 0x6F	; 111
     f8c:	51 e0       	ldi	r21, 0x01	; 1
     f8e:	66 e6       	ldi	r22, 0x66	; 102
     f90:	71 e0       	ldi	r23, 0x01	; 1
     f92:	c6 01       	movw	r24, r12
     f94:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     f98:	81 11       	cpse	r24, r1
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
     f9c:	91 2f       	mov	r25, r17
     f9e:	90 62       	ori	r25, 0x20	; 32
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
     fa2:	99 81       	ldd	r25, Y+1	; 0x01
     fa4:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
     fa6:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
     fa8:	6f 81       	ldd	r22, Y+7	; 0x07
}
     faa:	8f 2d       	mov	r24, r15
     fac:	28 96       	adiw	r28, 0x08	; 8
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	df 90       	pop	r13
     fc6:	cf 90       	pop	r12
     fc8:	08 95       	ret

00000fca <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
			RM_LOG(*(sd+t));
		
		RM_LOG(" ");
	}
	
	RM_LOGLN(" ");
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	6e e9       	ldi	r22, 0x9E	; 158
     fd2:	72 e0       	ldi	r23, 0x02	; 2
     fd4:	8c e9       	ldi	r24, 0x9C	; 156
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     fdc:	4a e0       	ldi	r20, 0x0A	; 10
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	68 81       	ld	r22, Y
     fe2:	8c e9       	ldi	r24, 0x9C	; 156
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN5Print5printEhi>
     fea:	6a e9       	ldi	r22, 0x9A	; 154
     fec:	72 e0       	ldi	r23, 0x02	; 2
     fee:	8c e9       	ldi	r24, 0x9C	; 156
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
     ff6:	65 e9       	ldi	r22, 0x95	; 149
     ff8:	72 e0       	ldi	r23, 0x02	; 2
     ffa:	8c e9       	ldi	r24, 0x9C	; 156
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    1002:	4a e0       	ldi	r20, 0x0A	; 10
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	69 81       	ldd	r22, Y+1	; 0x01
    1008:	8c e9       	ldi	r24, 0x9C	; 156
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN5Print5printEhi>
    1010:	61 e9       	ldi	r22, 0x91	; 145
    1012:	72 e0       	ldi	r23, 0x02	; 2
    1014:	8c e9       	ldi	r24, 0x9C	; 156
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    101c:	6c e7       	ldi	r22, 0x7C	; 124
    101e:	72 e0       	ldi	r23, 0x02	; 2
    1020:	8c e9       	ldi	r24, 0x9C	; 156
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    1028:	6b 81       	ldd	r22, Y+3	; 0x03
    102a:	63 70       	andi	r22, 0x03	; 3
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	4a e0       	ldi	r20, 0x0A	; 10
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	8c e9       	ldi	r24, 0x9C	; 156
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN5Print5printEii>
    103a:	62 e7       	ldi	r22, 0x72	; 114
    103c:	72 e0       	ldi	r23, 0x02	; 2
    103e:	8c e9       	ldi	r24, 0x9C	; 156
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    1046:	6b 81       	ldd	r22, Y+3	; 0x03
    1048:	6c 71       	andi	r22, 0x1C	; 28
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	75 95       	asr	r23
    104e:	67 95       	ror	r22
    1050:	75 95       	asr	r23
    1052:	67 95       	ror	r22
    1054:	4a e0       	ldi	r20, 0x0A	; 10
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	8c e9       	ldi	r24, 0x9C	; 156
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN5Print5printEii>
    1060:	69 e6       	ldi	r22, 0x69	; 105
    1062:	72 e0       	ldi	r23, 0x02	; 2
    1064:	8c e9       	ldi	r24, 0x9C	; 156
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    106c:	6b 81       	ldd	r22, Y+3	; 0x03
    106e:	65 fb       	bst	r22, 5
    1070:	66 27       	eor	r22, r22
    1072:	60 f9       	bld	r22, 0
    1074:	4a e0       	ldi	r20, 0x0A	; 10
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	8c e9       	ldi	r24, 0x9C	; 156
    107c:	93 e0       	ldi	r25, 0x03	; 3
    107e:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN5Print5printEii>
    1082:	65 e6       	ldi	r22, 0x65	; 101
    1084:	72 e0       	ldi	r23, 0x02	; 2
    1086:	8c e9       	ldi	r24, 0x9C	; 156
    1088:	93 e0       	ldi	r25, 0x03	; 3
    108a:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    108e:	68 e5       	ldi	r22, 0x58	; 88
    1090:	72 e0       	ldi	r23, 0x02	; 2
    1092:	8c e9       	ldi	r24, 0x9C	; 156
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    109a:	4a e0       	ldi	r20, 0x0A	; 10
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	6a 81       	ldd	r22, Y+2	; 0x02
    10a0:	8c e9       	ldi	r24, 0x9C	; 156
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_ZN5Print7printlnEhi>

000010ac <_ZN7Helpers15printSensorDataEP10SensorData>:
}

void Helpers::printSensorData(SensorData* sd) {
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
    10b2:	60 e5       	ldi	r22, 0x50	; 80
    10b4:	72 e0       	ldi	r23, 0x02	; 2
    10b6:	8c e9       	ldi	r24, 0x9C	; 156
    10b8:	93 e0       	ldi	r25, 0x03	; 3
    10ba:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
    10be:	69 81       	ldd	r22, Y+1	; 0x01
    10c0:	7a 81       	ldd	r23, Y+2	; 0x02
    10c2:	4a e0       	ldi	r20, 0x0A	; 10
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	8c e9       	ldi	r24, 0x9C	; 156
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    10ce:	6c e4       	ldi	r22, 0x4C	; 76
    10d0:	72 e0       	ldi	r23, 0x02	; 2
    10d2:	8c e9       	ldi	r24, 0x9C	; 156
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
    10da:	66 e4       	ldi	r22, 0x46	; 70
    10dc:	72 e0       	ldi	r23, 0x02	; 2
    10de:	8c e9       	ldi	r24, 0x9C	; 156
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
    10e6:	6d 81       	ldd	r22, Y+5	; 0x05
    10e8:	7e 81       	ldd	r23, Y+6	; 0x06
    10ea:	4a e0       	ldi	r20, 0x0A	; 10
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	8c e9       	ldi	r24, 0x9C	; 156
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    10f6:	62 e4       	ldi	r22, 0x42	; 66
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	8c e9       	ldi	r24, 0x9C	; 156
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    1102:	69 e3       	ldi	r22, 0x39	; 57
    1104:	72 e0       	ldi	r23, 0x02	; 2
    1106:	8c e9       	ldi	r24, 0x9C	; 156
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    110e:	6b 81       	ldd	r22, Y+3	; 0x03
    1110:	7c 81       	ldd	r23, Y+4	; 0x04
    1112:	4a e0       	ldi	r20, 0x0A	; 10
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	8c e9       	ldi	r24, 0x9C	; 156
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    111e:	65 e3       	ldi	r22, 0x35	; 53
    1120:	72 e0       	ldi	r23, 0x02	; 2
    1122:	8c e9       	ldi	r24, 0x9C	; 156
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    112a:	6f e2       	ldi	r22, 0x2F	; 47
    112c:	72 e0       	ldi	r23, 0x02	; 2
    112e:	8c e9       	ldi	r24, 0x9C	; 156
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->temperature);
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	4a e0       	ldi	r20, 0x0A	; 10
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	8c e9       	ldi	r24, 0x9C	; 156
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1146:	6b e2       	ldi	r22, 0x2B	; 43
    1148:	72 e0       	ldi	r23, 0x02	; 2
    114a:	8c e9       	ldi	r24, 0x9C	; 156
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Error="));
    1152:	64 e2       	ldi	r22, 0x24	; 36
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	8c e9       	ldi	r24, 0x9C	; 156
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->errorChar);
    115e:	4a e0       	ldi	r20, 0x0A	; 10
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	69 85       	ldd	r22, Y+9	; 0x09
    1164:	8c e9       	ldi	r24, 0x9C	; 156
    1166:	93 e0       	ldi	r25, 0x03	; 3
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
	RM_LOG(F("Temp="));
	RM_LOG(sd->temperature);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Error="));
	RM_LOGLN(sd->errorChar);
    116c:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_ZN5Print7printlnEhi>

00001170 <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	85 e0       	ldi	r24, 0x05	; 5
    1174:	0e 94 6e 13 	call	0x26dc	; 0x26dc <pinMode>
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
    1180:	68 eb       	ldi	r22, 0xB8	; 184
    1182:	7b e0       	ldi	r23, 0x0B	; 11
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	8d e0       	ldi	r24, 0x0D	; 13
    1190:	0e 94 6e 13 	call	0x26dc	; 0x26dc <pinMode>
    1194:	26 e0       	ldi	r18, 0x06	; 6
    1196:	40 e8       	ldi	r20, 0x80	; 128
    1198:	55 e2       	ldi	r21, 0x25	; 37
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	8c e9       	ldi	r24, 0x9C	; 156
    11a0:	93 e0       	ldi	r25, 0x03	; 3
    11a2:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN14HardwareSerial5beginEmh>
    11a6:	6c eb       	ldi	r22, 0xBC	; 188
    11a8:	73 e0       	ldi	r23, 0x03	; 3
    11aa:	8c e9       	ldi	r24, 0x9C	; 156
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	0c 94 36 11 	jmp	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>

000011b2 <_Z21ensureFonaInitialisedbPb>:
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	2c 97       	sbiw	r28, 0x0c	; 12
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	18 2f       	mov	r17, r24
    11ce:	7b 01       	movw	r14, r22
    11d0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_initFonaLoopCount>
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    11d6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_initFonaLoopCount>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	fb 01       	movw	r30, r22
    11de:	80 83       	st	Z, r24
    11e0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_fonaStatusInit>
    11e4:	81 11       	cpse	r24, r1
    11e6:	30 c0       	rjmp	.+96     	; 0x1248 <_Z21ensureFonaInitialisedbPb+0x96>
    11e8:	67 ea       	ldi	r22, 0xA7	; 167
    11ea:	73 e0       	ldi	r23, 0x03	; 3
    11ec:	8c e9       	ldi	r24, 0x9C	; 156
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
    11f4:	42 e0       	ldi	r20, 0x02	; 2
    11f6:	63 e0       	ldi	r22, 0x03	; 3
    11f8:	89 eb       	ldi	r24, 0xB9	; 185
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN13Adafruit_FONA5beginEhh>
    1200:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_fonaStatusInit>
    1204:	81 eb       	ldi	r24, 0xB1	; 177
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN12RmMemManager11getModuleIdEv>
    120c:	68 2f       	mov	r22, r24
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	6a 5b       	subi	r22, 0xBA	; 186
    1212:	7e 4f       	sbci	r23, 0xFE	; 254
    1214:	ce 01       	movw	r24, r28
    1216:	07 96       	adiw	r24, 0x07	; 7
    1218:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN6StringC1EPKc>
    121c:	be 01       	movw	r22, r28
    121e:	69 5f       	subi	r22, 0xF9	; 249
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	0e 94 a9 14 	call	0x2952	; 0x2952 <_ZN6StringC1ERKS_>
    122a:	be 01       	movw	r22, r28
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	89 eb       	ldi	r24, 0xB9	; 185
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN6StringD1Ev>
    1240:	ce 01       	movw	r24, r28
    1242:	07 96       	adiw	r24, 0x07	; 7
    1244:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN6StringD1Ev>
    1248:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_fonaStatusInit>
    124c:	83 50       	subi	r24, 0x03	; 3
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	a8 f4       	brcc	.+42     	; 0x127c <_Z21ensureFonaInitialisedbPb+0xca>
    1252:	6c e8       	ldi	r22, 0x8C	; 140
    1254:	73 e0       	ldi	r23, 0x03	; 3
    1256:	8c e9       	ldi	r24, 0x9C	; 156
    1258:	93 e0       	ldi	r25, 0x03	; 3
    125a:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    125e:	64 e5       	ldi	r22, 0x54	; 84
    1260:	71 e0       	ldi	r23, 0x01	; 1
    1262:	8c e9       	ldi	r24, 0x9C	; 156
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
    126a:	4a e0       	ldi	r20, 0x0A	; 10
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <_fonaStatusInit>
    1272:	8c e9       	ldi	r24, 0x9C	; 156
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN5Print7printlnEhi>
    127a:	50 c0       	rjmp	.+160    	; 0x131c <_Z21ensureFonaInitialisedbPb+0x16a>
    127c:	11 23       	and	r17, r17
    127e:	09 f4       	brne	.+2      	; 0x1282 <_Z21ensureFonaInitialisedbPb+0xd0>
    1280:	4a c0       	rjmp	.+148    	; 0x1316 <_Z21ensureFonaInitialisedbPb+0x164>
    1282:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_gprsStatusInit>
    1286:	81 11       	cpse	r24, r1
    1288:	41 c0       	rjmp	.+130    	; 0x130c <_Z21ensureFonaInitialisedbPb+0x15a>
    128a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_initFonaLoopCount>
    128e:	8d 33       	cpi	r24, 0x3D	; 61
    1290:	e8 f5       	brcc	.+122    	; 0x130c <_Z21ensureFonaInitialisedbPb+0x15a>
    1292:	64 e1       	ldi	r22, 0x14	; 20
    1294:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodqi4>
    1298:	99 23       	and	r25, r25
    129a:	19 f0       	breq	.+6      	; 0x12a2 <_Z21ensureFonaInitialisedbPb+0xf0>
    129c:	f7 01       	movw	r30, r14
    129e:	10 82       	st	Z, r1
    12a0:	35 c0       	rjmp	.+106    	; 0x130c <_Z21ensureFonaInitialisedbPb+0x15a>
    12a2:	6f e6       	ldi	r22, 0x6F	; 111
    12a4:	73 e0       	ldi	r23, 0x03	; 3
    12a6:	8c e9       	ldi	r24, 0x9C	; 156
    12a8:	93 e0       	ldi	r25, 0x03	; 3
    12aa:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	89 eb       	ldi	r24, 0xB9	; 185
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN13Adafruit_FONA10enableGPRSEb>
    12b8:	18 2f       	mov	r17, r24
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	81 0f       	add	r24, r17
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	e8 f0       	brcs	.+58     	; 0x12fc <_Z21ensureFonaInitialisedbPb+0x14a>
    12c2:	64 e5       	ldi	r22, 0x54	; 84
    12c4:	73 e0       	ldi	r23, 0x03	; 3
    12c6:	8c e9       	ldi	r24, 0x9C	; 156
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    12ce:	64 e5       	ldi	r22, 0x54	; 84
    12d0:	71 e0       	ldi	r23, 0x01	; 1
    12d2:	8c e9       	ldi	r24, 0x9C	; 156
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
    12da:	61 2f       	mov	r22, r17
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	4a e0       	ldi	r20, 0x0A	; 10
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	8c e9       	ldi	r24, 0x9C	; 156
    12e4:	93 e0       	ldi	r25, 0x03	; 3
    12e6:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN5Print7printlnEii>
    12ea:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_initFonaLoopCount>
    12ee:	8c 33       	cpi	r24, 0x3C	; 60
    12f0:	a8 f2       	brcs	.-86     	; 0x129c <_Z21ensureFonaInitialisedbPb+0xea>
    12f2:	10 93 ac 01 	sts	0x01AC, r17	; 0x8001ac <_gprsStatusInit>
    12f6:	61 e3       	ldi	r22, 0x31	; 49
    12f8:	73 e0       	ldi	r23, 0x03	; 3
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <_Z21ensureFonaInitialisedbPb+0x152>
    12fc:	10 93 ac 01 	sts	0x01AC, r17	; 0x8001ac <_gprsStatusInit>
    1300:	61 e1       	ldi	r22, 0x11	; 17
    1302:	73 e0       	ldi	r23, 0x03	; 3
    1304:	8c e9       	ldi	r24, 0x9C	; 156
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
    130c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_gprsStatusInit>
    1310:	81 50       	subi	r24, 0x01	; 1
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	18 f4       	brcc	.+6      	; 0x131c <_Z21ensureFonaInitialisedbPb+0x16a>
    1316:	89 eb       	ldi	r24, 0xB9	; 185
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <_Z21ensureFonaInitialisedbPb+0x16e>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	2c 96       	adiw	r28, 0x0c	; 12
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <_Z15switchOffSystemv>:
    1338:	66 e5       	ldi	r22, 0x56	; 86
    133a:	71 e0       	ldi	r23, 0x01	; 1
    133c:	8c e9       	ldi	r24, 0x9C	; 156
    133e:	93 e0       	ldi	r25, 0x03	; 3
    1340:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN5Print7printlnEPKc>
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	85 e0       	ldi	r24, 0x05	; 5
    1348:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
    134c:	68 eb       	ldi	r22, 0xB8	; 184
    134e:	7b e0       	ldi	r23, 0x0B	; 11
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <delay>

00001358 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	2a 97       	sbiw	r28, 0x0a	; 10
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    136c:	6e ef       	ldi	r22, 0xFE	; 254
    136e:	72 e0       	ldi	r23, 0x02	; 2
    1370:	8c e9       	ldi	r24, 0x9C	; 156
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	1b 82       	std	Y+3, r1	; 0x03
    137e:	1a 82       	std	Y+2, r1	; 0x02
    1380:	1d 82       	std	Y+5, r1	; 0x05
    1382:	1c 82       	std	Y+4, r1	; 0x04
    1384:	1f 82       	std	Y+7, r1	; 0x07
    1386:	1e 82       	std	Y+6, r1	; 0x06
    1388:	19 86       	std	Y+9, r1	; 0x09
    138a:	18 86       	std	Y+8, r1	; 0x08
    138c:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    138e:	be 01       	movw	r22, r28
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f ea       	ldi	r24, 0xAF	; 175
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	2a 96       	adiw	r28, 0x0a	; 10
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <_Z8sendDatav+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <_Z8sendDatav+0x8>
    13b8:	1f 92       	push	r1
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    13be:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	98 0f       	add	r25, r24
    13c6:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <_sendDataLoopCount>
	
	//if (doInit) {
	if (doInit)
    13ca:	81 11       	cpse	r24, r1
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <_Z8sendDatav+0x2a>
		RM_LOGLN(F("Initialising module to send data"));
    13ce:	6d ed       	ldi	r22, 0xDD	; 221
    13d0:	72 e0       	ldi	r23, 0x02	; 2
    13d2:	8c e9       	ldi	r24, 0x9C	; 156
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	boolean isComplete;
	_sendDataFona = ensureFonaInitialised(true, &isComplete);
    13da:	be 01       	movw	r22, r28
    13dc:	6b 5f       	subi	r22, 0xFB	; 251
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_Z21ensureFonaInitialisedbPb>
    13e6:	9c 01       	movw	r18, r24
    13e8:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <_sendDataFona+0x1>
    13ec:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_sendDataFona>
	
	if (!isComplete)
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	88 23       	and	r24, r24
    13f4:	01 f1       	breq	.+64     	; 0x1436 <_Z8sendDatav+0x86>
		return false; //Still waiting to initialise
		
	if (_sendDataFona == NULL)
    13f6:	23 2b       	or	r18, r19
    13f8:	f9 f0       	breq	.+62     	; 0x1438 <_Z8sendDatav+0x88>
		return true; //Error initialising

	RM_LOGLN(F("Now waiting for a while before checking signal"));
    13fa:	6e ea       	ldi	r22, 0xAE	; 174
    13fc:	72 e0       	ldi	r23, 0x02	; 2
    13fe:	8c e9       	ldi	r24, 0x9C	; 156
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print7printlnEPK19__FlashStringHelper>
	//}
	
	//Wait to get signal - may already be over the threshold when doing initialisation
	if (_sendDataLoopCount >= 60) {
    1406:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_sendDataLoopCount>
    140a:	8c 33       	cpi	r24, 0x3C	; 60
    140c:	a0 f0       	brcs	.+40     	; 0x1436 <_Z8sendDatav+0x86>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    140e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_sendDataFona>
    1412:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_sendDataFona+0x1>
    1416:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13Adafruit_FONA7getRSSIEv>
    141a:	69 83       	std	Y+1, r22	; 0x01
    141c:	7a 83       	std	Y+2, r23	; 0x02
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    142a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <_sendDataLoopCount>
		_sendDataFona = NULL;
    142e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <_sendDataFona+0x1>
    1432:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <_sendDataFona>
    1436:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return false;
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1448:	68 ee       	ldi	r22, 0xE8	; 232
    144a:	73 e0       	ldi	r23, 0x03	; 3
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 b1 12 	call	0x2562	; 0x2562 <delay>
	++_timerCounter;
    1454:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
    1458:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
    1462:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    1466:	64 ea       	ldi	r22, 0xA4	; 164
    1468:	72 e0       	ldi	r23, 0x02	; 2
    146a:	8c e9       	ldi	r24, 0x9C	; 156
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    1472:	64 e5       	ldi	r22, 0x54	; 84
    1474:	71 e0       	ldi	r23, 0x01	; 1
    1476:	8c e9       	ldi	r24, 0x9C	; 156
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5printEPKc>
    147e:	4a e0       	ldi	r20, 0x0A	; 10
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <_behaviour>
    1486:	8c e9       	ldi	r24, 0x9C	; 156
    1488:	93 e0       	ldi	r25, 0x03	; 3
    148a:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    148e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_behaviour>
    1492:	80 ff       	sbrs	r24, 0
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <loop+0x60>
		
		if (takeReadings())
    1496:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z12takeReadingsv>
    149a:	88 23       	and	r24, r24
    149c:	29 f0       	breq	.+10     	; 0x14a8 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    149e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_behaviour>
    14a2:	8e 7f       	andi	r24, 0xFE	; 254
    14a4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    14a8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_behaviour>
    14ac:	81 ff       	sbrs	r24, 1
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <loop+0x7a>
		
		if (sendData())
    14b0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_Z8sendDatav>
    14b4:	88 23       	and	r24, r24
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    14b8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_behaviour>
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    14c2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_behaviour>
    14c6:	81 11       	cpse	r24, r1
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <loop+0x86>
		
		switchOffSystem();
    14ca:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_Z15switchOffSystemv>
    14ce:	08 95       	ret

000014d0 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	89 eb       	ldi	r24, 0xB9	; 185
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	81 eb       	ldi	r24, 0xB1	; 177
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	8f ea       	ldi	r24, 0xAF	; 175
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <_ZN13SensorManagerC1Eb>

000014f0 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    14f0:	8a e3       	ldi	r24, 0x3A	; 58
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <__fona+0x1>
    14f8:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <__fona>
    14fc:	8e ec       	ldi	r24, 0xCE	; 206
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <_ZN6StringD1Ev>

00001504 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1504:	dc 01       	movw	r26, r24
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	01 90       	ld	r0, Z+
    150c:	f0 81       	ld	r31, Z
    150e:	e0 2d       	mov	r30, r0
    1510:	09 94       	ijmp

00001512 <_ZN12RmMemManagerC1Eb>:
    1512:	fc 01       	movw	r30, r24
    1514:	11 82       	std	Z+1, r1	; 0x01
    1516:	12 82       	std	Z+2, r1	; 0x02
    1518:	13 82       	std	Z+3, r1	; 0x03
    151a:	14 82       	std	Z+4, r1	; 0x04
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	85 83       	std	Z+5, r24	; 0x05
    1520:	86 83       	std	Z+6, r24	; 0x06
    1522:	17 82       	std	Z+7, r1	; 0x07
    1524:	60 83       	st	Z, r22
    1526:	61 11       	cpse	r22, r1
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <_ZN12RmMemManagerC1Eb+0x20>
    152a:	86 e4       	ldi	r24, 0x46	; 70
    152c:	93 e0       	ldi	r25, 0x03	; 3
    152e:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <_ZN7TwoWire5beginEv>
    1532:	08 95       	ret

00001534 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	eb 01       	movw	r28, r22
    1542:	7b 01       	movw	r14, r22
    1544:	e4 0e       	add	r14, r20
    1546:	f1 1c       	adc	r15, r1
    1548:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    154a:	ce 15       	cp	r28, r14
    154c:	df 05       	cpc	r29, r15
    154e:	71 f1       	breq	.+92     	; 0x15ac <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1550:	60 e5       	ldi	r22, 0x50	; 80
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	86 e4       	ldi	r24, 0x46	; 70
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    155c:	61 2f       	mov	r22, r17
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	86 e4       	ldi	r24, 0x46	; 70
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1568:	b8 01       	movw	r22, r16
    156a:	77 27       	eor	r23, r23
    156c:	86 e4       	ldi	r24, 0x46	; 70
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1574:	86 e4       	ldi	r24, 0x46	; 70
    1576:	93 e0       	ldi	r25, 0x03	; 3
    1578:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	60 e5       	ldi	r22, 0x50	; 80
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	86 e4       	ldi	r24, 0x46	; 70
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    158c:	86 e4       	ldi	r24, 0x46	; 70
    158e:	93 e0       	ldi	r25, 0x03	; 3
    1590:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <_ZN7TwoWire9availableEv>
    1594:	89 2b       	or	r24, r25
    1596:	29 f0       	breq	.+10     	; 0x15a2 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1598:	86 e4       	ldi	r24, 0x46	; 70
    159a:	93 e0       	ldi	r25, 0x03	; 3
    159c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN7TwoWire4readEv>
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    15a4:	89 93       	st	Y+, r24
    15a6:	0f 5f       	subi	r16, 0xFF	; 255
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    15aa:	cf cf       	rjmp	.-98     	; 0x154a <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	08 95       	ret

000015ba <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	1f 92       	push	r1
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	be 01       	movw	r22, r28
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z12internalReadjPhh>
	return value;
}
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	0f 90       	pop	r0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <_ZN12RmMemManager18getUCharFromMemoryEj>

000015e4 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    15e4:	fc 01       	movw	r30, r24
    15e6:	60 83       	st	Z, r22
    15e8:	08 95       	ret

000015ea <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    15ea:	fc 01       	movw	r30, r24
    15ec:	80 81       	ld	r24, Z
    15ee:	81 11       	cpse	r24, r1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    15f2:	86 2f       	mov	r24, r22
    15f4:	0c 94 28 13 	jmp	0x2650	; 0x2650 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    15f8:	85 e0       	ldi	r24, 0x05	; 5
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	08 95       	ret

000015fe <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    15fe:	fc 01       	movw	r30, r24
    1600:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1602:	81 81       	ldd	r24, Z+1	; 0x01
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	9c 93       	st	X, r25
    160e:	8e 93       	st	-X, r24
    1610:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1612:	81 81       	ldd	r24, Z+1	; 0x01
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	82 9f       	mul	r24, r18
    1618:	c0 01       	movw	r24, r0
    161a:	11 24       	eor	r1, r1
    161c:	16 96       	adiw	r26, 0x06	; 6
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
    1622:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	67 e0       	ldi	r22, 0x07	; 7
    1628:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodqi4>
    162c:	89 2f       	mov	r24, r25
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	14 96       	adiw	r26, 0x04	; 4
    1632:	9c 93       	st	X, r25
    1634:	8e 93       	st	-X, r24
    1636:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	24 e6       	ldi	r18, 0x64	; 100
    163c:	82 9f       	mul	r24, r18
    163e:	c0 01       	movw	r24, r0
    1640:	11 24       	eor	r1, r1
    1642:	18 96       	adiw	r26, 0x08	; 8
    1644:	9c 93       	st	X, r25
    1646:	8e 93       	st	-X, r24
    1648:	17 97       	sbiw	r26, 0x07	; 7
    164a:	08 95       	ret

0000164c <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	8c 01       	movw	r16, r24
    1662:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	88 23       	and	r24, r24
    166a:	21 f0       	breq	.+8      	; 0x1674 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    166c:	c8 01       	movw	r24, r16
    166e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN13SensorManager11getMockDataEP10SensorData>
    1672:	1b c0       	rjmp	.+54     	; 0x16aa <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1674:	6e e0       	ldi	r22, 0x0E	; 14
    1676:	c8 01       	movw	r24, r16
    1678:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN13SensorManager16takeSampleAnalogEh>
    167c:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    167e:	6f e0       	ldi	r22, 0x0F	; 15
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN13SensorManager16takeSampleAnalogEh>
    1686:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1688:	61 e1       	ldi	r22, 0x11	; 17
    168a:	c8 01       	movw	r24, r16
    168c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN13SensorManager16takeSampleAnalogEh>
    1690:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1692:	60 e1       	ldi	r22, 0x10	; 16
    1694:	c8 01       	movw	r24, r16
    1696:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    169a:	ba 82       	std	Y+2, r11	; 0x02
    169c:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    169e:	de 82       	std	Y+6, r13	; 0x06
    16a0:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    16a2:	fc 82       	std	Y+4, r15	; 0x04
    16a4:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    16a6:	98 87       	std	Y+8, r25	; 0x08
    16a8:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    16aa:	ce 01       	movw	r24, r28
	
	//return ret;
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    16c0:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_ZN7Helpers15printSensorDataEP10SensorData>

000016c4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16c4:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <twi_sendStop>
    16ce:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	82 e1       	ldi	r24, 0x12	; 18
    16d6:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	83 e1       	ldi	r24, 0x13	; 19
    16de:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
    16e2:	e9 eb       	ldi	r30, 0xB9	; 185
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	80 83       	st	Z, r24
    16ec:	80 81       	ld	r24, Z
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	80 83       	st	Z, r24
    16f2:	88 e4       	ldi	r24, 0x48	; 72
    16f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    16f8:	85 e4       	ldi	r24, 0x45	; 69
    16fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    16fe:	08 95       	ret

00001700 <twi_readFrom>:
    1700:	41 32       	cpi	r20, 0x21	; 33
    1702:	08 f0       	brcs	.+2      	; 0x1706 <twi_readFrom+0x6>
    1704:	43 c0       	rjmp	.+134    	; 0x178c <twi_readFrom+0x8c>
    1706:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    170a:	91 11       	cpse	r25, r1
    170c:	fc cf       	rjmp	.-8      	; 0x1706 <twi_readFrom+0x6>
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <twi_state>
    1714:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <twi_sendStop>
    1718:	2f ef       	ldi	r18, 0xFF	; 255
    171a:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_error>
    171e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    1722:	24 0f       	add	r18, r20
    1724:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <twi_masterBufferLength>
    1728:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <twi_slarw>
    172c:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <twi_slarw>
    1730:	88 0f       	add	r24, r24
    1732:	89 2b       	or	r24, r25
    1734:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    1738:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	61 f4       	brne	.+24     	; 0x1758 <twi_readFrom+0x58>
    1740:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    1744:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    1748:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    174c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1750:	83 fd       	sbrc	r24, 3
    1752:	f8 cf       	rjmp	.-16     	; 0x1744 <twi_readFrom+0x44>
    1754:	85 ec       	ldi	r24, 0xC5	; 197
    1756:	01 c0       	rjmp	.+2      	; 0x175a <twi_readFrom+0x5a>
    1758:	85 ee       	ldi	r24, 0xE5	; 229
    175a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    175e:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	e1 f3       	breq	.-8      	; 0x175e <twi_readFrom+0x5e>
    1766:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_masterBufferIndex>
    176a:	84 17       	cp	r24, r20
    176c:	10 f4       	brcc	.+4      	; 0x1772 <twi_readFrom+0x72>
    176e:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <twi_masterBufferIndex>
    1772:	ae e1       	ldi	r26, 0x1E	; 30
    1774:	b3 e0       	ldi	r27, 0x03	; 3
    1776:	96 2f       	mov	r25, r22
    1778:	fb 01       	movw	r30, r22
    177a:	8e 2f       	mov	r24, r30
    177c:	89 1b       	sub	r24, r25
    177e:	84 17       	cp	r24, r20
    1780:	18 f4       	brcc	.+6      	; 0x1788 <twi_readFrom+0x88>
    1782:	8d 91       	ld	r24, X+
    1784:	81 93       	st	Z+, r24
    1786:	f9 cf       	rjmp	.-14     	; 0x177a <twi_readFrom+0x7a>
    1788:	84 2f       	mov	r24, r20
    178a:	08 95       	ret
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	08 95       	ret

00001790 <twi_writeTo>:
    1790:	0f 93       	push	r16
    1792:	41 32       	cpi	r20, 0x21	; 33
    1794:	08 f0       	brcs	.+2      	; 0x1798 <twi_writeTo+0x8>
    1796:	4a c0       	rjmp	.+148    	; 0x182c <twi_writeTo+0x9c>
    1798:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    179c:	91 11       	cpse	r25, r1
    179e:	fc cf       	rjmp	.-8      	; 0x1798 <twi_writeTo+0x8>
    17a0:	32 e0       	ldi	r19, 0x02	; 2
    17a2:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <twi_state>
    17a6:	00 93 43 03 	sts	0x0343, r16	; 0x800343 <twi_sendStop>
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <twi_error>
    17b0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    17b4:	40 93 1c 03 	sts	0x031C, r20	; 0x80031c <twi_masterBufferLength>
    17b8:	56 2f       	mov	r21, r22
    17ba:	ae e1       	ldi	r26, 0x1E	; 30
    17bc:	b3 e0       	ldi	r27, 0x03	; 3
    17be:	fb 01       	movw	r30, r22
    17c0:	3e 2f       	mov	r19, r30
    17c2:	35 1b       	sub	r19, r21
    17c4:	34 17       	cp	r19, r20
    17c6:	18 f4       	brcc	.+6      	; 0x17ce <twi_writeTo+0x3e>
    17c8:	31 91       	ld	r19, Z+
    17ca:	3d 93       	st	X+, r19
    17cc:	f9 cf       	rjmp	.-14     	; 0x17c0 <twi_writeTo+0x30>
    17ce:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_slarw>
    17d2:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <twi_slarw>
    17d6:	88 0f       	add	r24, r24
    17d8:	83 2b       	or	r24, r19
    17da:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    17de:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	61 f4       	brne	.+24     	; 0x17fe <twi_writeTo+0x6e>
    17e6:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    17ea:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    17ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    17f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    17f6:	83 fd       	sbrc	r24, 3
    17f8:	f8 cf       	rjmp	.-16     	; 0x17ea <twi_writeTo+0x5a>
    17fa:	85 ec       	ldi	r24, 0xC5	; 197
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <twi_writeTo+0x70>
    17fe:	85 ee       	ldi	r24, 0xE5	; 229
    1800:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1804:	22 23       	and	r18, r18
    1806:	21 f0       	breq	.+8      	; 0x1810 <twi_writeTo+0x80>
    1808:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	d1 f3       	breq	.-12     	; 0x1804 <twi_writeTo+0x74>
    1810:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    1814:	8f 3f       	cpi	r24, 0xFF	; 255
    1816:	79 f0       	breq	.+30     	; 0x1836 <twi_writeTo+0xa6>
    1818:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    181c:	80 32       	cpi	r24, 0x20	; 32
    181e:	41 f0       	breq	.+16     	; 0x1830 <twi_writeTo+0xa0>
    1820:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    1824:	80 33       	cpi	r24, 0x30	; 48
    1826:	31 f0       	breq	.+12     	; 0x1834 <twi_writeTo+0xa4>
    1828:	94 e0       	ldi	r25, 0x04	; 4
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <twi_writeTo+0xa6>
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <twi_writeTo+0xa6>
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <twi_writeTo+0xa6>
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	89 2f       	mov	r24, r25
    1838:	0f 91       	pop	r16
    183a:	08 95       	ret

0000183c <twi_transmit>:
    183c:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <twi_txBufferLength>
    1840:	26 2f       	mov	r18, r22
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	24 0f       	add	r18, r20
    1846:	31 1d       	adc	r19, r1
    1848:	21 32       	cpi	r18, 0x21	; 33
    184a:	31 05       	cpc	r19, r1
    184c:	dc f4       	brge	.+54     	; 0x1884 <twi_transmit+0x48>
    184e:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <twi_state>
    1852:	24 30       	cpi	r18, 0x04	; 4
    1854:	c9 f4       	brne	.+50     	; 0x1888 <twi_transmit+0x4c>
    1856:	fc 01       	movw	r30, r24
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	86 17       	cp	r24, r22
    185e:	58 f4       	brcc	.+22     	; 0x1876 <twi_transmit+0x3a>
    1860:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <twi_txBufferLength>
    1864:	21 91       	ld	r18, Z+
    1866:	dc 01       	movw	r26, r24
    1868:	a4 50       	subi	r26, 0x04	; 4
    186a:	bd 4f       	sbci	r27, 0xFD	; 253
    186c:	a3 0f       	add	r26, r19
    186e:	b1 1d       	adc	r27, r1
    1870:	2c 93       	st	X, r18
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	f3 cf       	rjmp	.-26     	; 0x185c <twi_transmit+0x20>
    1876:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    187a:	68 0f       	add	r22, r24
    187c:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <twi_txBufferLength>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	08 95       	ret
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	08 95       	ret
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	08 95       	ret

0000188c <twi_attachSlaveRxEvent>:
    188c:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <twi_onSlaveReceive+0x1>
    1890:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_onSlaveReceive>
    1894:	08 95       	ret

00001896 <twi_attachSlaveTxEvent>:
    1896:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_onSlaveTransmit+0x1>
    189a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_onSlaveTransmit>
    189e:	08 95       	ret

000018a0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    18a0:	85 ed       	ldi	r24, 0xD5	; 213
    18a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    18a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    18aa:	84 fd       	sbrc	r24, 4
    18ac:	fc cf       	rjmp	.-8      	; 0x18a6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    18ae:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    18b2:	08 95       	ret

000018b4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    18b4:	85 ec       	ldi	r24, 0xC5	; 197
    18b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    18ba:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    18be:	08 95       	ret

000018c0 <__vector_24>:
}

ISR(TWI_vect)
{
    18c0:	1f 92       	push	r1
    18c2:	0f 92       	push	r0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	11 24       	eor	r1, r1
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	6f 93       	push	r22
    18d4:	7f 93       	push	r23
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	af 93       	push	r26
    18dc:	bf 93       	push	r27
    18de:	ef 93       	push	r30
    18e0:	ff 93       	push	r31
  switch(TW_STATUS){
    18e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    18e6:	88 7f       	andi	r24, 0xF8	; 248
    18e8:	80 36       	cpi	r24, 0x60	; 96
    18ea:	09 f4       	brne	.+2      	; 0x18ee <__vector_24+0x2e>
    18ec:	9e c0       	rjmp	.+316    	; 0x1a2a <__vector_24+0x16a>
    18ee:	78 f5       	brcc	.+94     	; 0x194e <__vector_24+0x8e>
    18f0:	88 32       	cpi	r24, 0x28	; 40
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <__vector_24+0x36>
    18f4:	5d c0       	rjmp	.+186    	; 0x19b0 <__vector_24+0xf0>
    18f6:	90 f4       	brcc	.+36     	; 0x191c <__vector_24+0x5c>
    18f8:	80 31       	cpi	r24, 0x10	; 16
    18fa:	09 f4       	brne	.+2      	; 0x18fe <__vector_24+0x3e>
    18fc:	56 c0       	rjmp	.+172    	; 0x19aa <__vector_24+0xea>
    18fe:	38 f4       	brcc	.+14     	; 0x190e <__vector_24+0x4e>
    1900:	88 23       	and	r24, r24
    1902:	09 f4       	brne	.+2      	; 0x1906 <__vector_24+0x46>
    1904:	f5 c0       	rjmp	.+490    	; 0x1af0 <__vector_24+0x230>
    1906:	88 30       	cpi	r24, 0x08	; 8
    1908:	09 f4       	brne	.+2      	; 0x190c <__vector_24+0x4c>
    190a:	4f c0       	rjmp	.+158    	; 0x19aa <__vector_24+0xea>
    190c:	f5 c0       	rjmp	.+490    	; 0x1af8 <__vector_24+0x238>
    190e:	88 31       	cpi	r24, 0x18	; 24
    1910:	09 f4       	brne	.+2      	; 0x1914 <__vector_24+0x54>
    1912:	4e c0       	rjmp	.+156    	; 0x19b0 <__vector_24+0xf0>
    1914:	80 32       	cpi	r24, 0x20	; 32
    1916:	09 f4       	brne	.+2      	; 0x191a <__vector_24+0x5a>
    1918:	5f c0       	rjmp	.+190    	; 0x19d8 <__vector_24+0x118>
    191a:	ee c0       	rjmp	.+476    	; 0x1af8 <__vector_24+0x238>
    191c:	80 34       	cpi	r24, 0x40	; 64
    191e:	09 f4       	brne	.+2      	; 0x1922 <__vector_24+0x62>
    1920:	6a c0       	rjmp	.+212    	; 0x19f6 <__vector_24+0x136>
    1922:	58 f4       	brcc	.+22     	; 0x193a <__vector_24+0x7a>
    1924:	80 33       	cpi	r24, 0x30	; 48
    1926:	09 f4       	brne	.+2      	; 0x192a <__vector_24+0x6a>
    1928:	57 c0       	rjmp	.+174    	; 0x19d8 <__vector_24+0x118>
    192a:	88 33       	cpi	r24, 0x38	; 56
    192c:	09 f0       	breq	.+2      	; 0x1930 <__vector_24+0x70>
    192e:	e4 c0       	rjmp	.+456    	; 0x1af8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1930:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
      twi_releaseBus();
    1934:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <twi_releaseBus>
      break;
    1938:	df c0       	rjmp	.+446    	; 0x1af8 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    193a:	80 35       	cpi	r24, 0x50	; 80
    193c:	09 f4       	brne	.+2      	; 0x1940 <__vector_24+0x80>
    193e:	4f c0       	rjmp	.+158    	; 0x19de <__vector_24+0x11e>
    1940:	88 35       	cpi	r24, 0x58	; 88
    1942:	09 f4       	brne	.+2      	; 0x1946 <__vector_24+0x86>
    1944:	5d c0       	rjmp	.+186    	; 0x1a00 <__vector_24+0x140>
    1946:	88 34       	cpi	r24, 0x48	; 72
    1948:	09 f0       	breq	.+2      	; 0x194c <__vector_24+0x8c>
    194a:	d6 c0       	rjmp	.+428    	; 0x1af8 <__vector_24+0x238>
    194c:	d3 c0       	rjmp	.+422    	; 0x1af4 <__vector_24+0x234>
    194e:	88 39       	cpi	r24, 0x98	; 152
    1950:	09 f4       	brne	.+2      	; 0x1954 <__vector_24+0x94>
    1952:	c4 c0       	rjmp	.+392    	; 0x1adc <__vector_24+0x21c>
    1954:	a8 f4       	brcc	.+42     	; 0x1980 <__vector_24+0xc0>
    1956:	88 37       	cpi	r24, 0x78	; 120
    1958:	09 f4       	brne	.+2      	; 0x195c <__vector_24+0x9c>
    195a:	67 c0       	rjmp	.+206    	; 0x1a2a <__vector_24+0x16a>
    195c:	38 f4       	brcc	.+14     	; 0x196c <__vector_24+0xac>
    195e:	88 36       	cpi	r24, 0x68	; 104
    1960:	09 f4       	brne	.+2      	; 0x1964 <__vector_24+0xa4>
    1962:	63 c0       	rjmp	.+198    	; 0x1a2a <__vector_24+0x16a>
    1964:	80 37       	cpi	r24, 0x70	; 112
    1966:	09 f4       	brne	.+2      	; 0x196a <__vector_24+0xaa>
    1968:	60 c0       	rjmp	.+192    	; 0x1a2a <__vector_24+0x16a>
    196a:	c6 c0       	rjmp	.+396    	; 0x1af8 <__vector_24+0x238>
    196c:	88 38       	cpi	r24, 0x88	; 136
    196e:	09 f4       	brne	.+2      	; 0x1972 <__vector_24+0xb2>
    1970:	b5 c0       	rjmp	.+362    	; 0x1adc <__vector_24+0x21c>
    1972:	80 39       	cpi	r24, 0x90	; 144
    1974:	09 f4       	brne	.+2      	; 0x1978 <__vector_24+0xb8>
    1976:	5f c0       	rjmp	.+190    	; 0x1a36 <__vector_24+0x176>
    1978:	80 38       	cpi	r24, 0x80	; 128
    197a:	09 f0       	breq	.+2      	; 0x197e <__vector_24+0xbe>
    197c:	bd c0       	rjmp	.+378    	; 0x1af8 <__vector_24+0x238>
    197e:	5b c0       	rjmp	.+182    	; 0x1a36 <__vector_24+0x176>
    1980:	80 3b       	cpi	r24, 0xB0	; 176
    1982:	09 f4       	brne	.+2      	; 0x1986 <__vector_24+0xc6>
    1984:	83 c0       	rjmp	.+262    	; 0x1a8c <__vector_24+0x1cc>
    1986:	38 f4       	brcc	.+14     	; 0x1996 <__vector_24+0xd6>
    1988:	80 3a       	cpi	r24, 0xA0	; 160
    198a:	09 f4       	brne	.+2      	; 0x198e <__vector_24+0xce>
    198c:	66 c0       	rjmp	.+204    	; 0x1a5a <__vector_24+0x19a>
    198e:	88 3a       	cpi	r24, 0xA8	; 168
    1990:	09 f4       	brne	.+2      	; 0x1994 <__vector_24+0xd4>
    1992:	7c c0       	rjmp	.+248    	; 0x1a8c <__vector_24+0x1cc>
    1994:	b1 c0       	rjmp	.+354    	; 0x1af8 <__vector_24+0x238>
    1996:	80 3c       	cpi	r24, 0xC0	; 192
    1998:	09 f4       	brne	.+2      	; 0x199c <__vector_24+0xdc>
    199a:	a4 c0       	rjmp	.+328    	; 0x1ae4 <__vector_24+0x224>
    199c:	88 3c       	cpi	r24, 0xC8	; 200
    199e:	09 f4       	brne	.+2      	; 0x19a2 <__vector_24+0xe2>
    19a0:	a1 c0       	rjmp	.+322    	; 0x1ae4 <__vector_24+0x224>
    19a2:	88 3b       	cpi	r24, 0xB8	; 184
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <__vector_24+0xe8>
    19a6:	87 c0       	rjmp	.+270    	; 0x1ab6 <__vector_24+0x1f6>
    19a8:	a7 c0       	rjmp	.+334    	; 0x1af8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    19aa:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    19ae:	10 c0       	rjmp	.+32     	; 0x19d0 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    19b0:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    19b4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    19b8:	98 17       	cp	r25, r24
    19ba:	70 f5       	brcc	.+92     	; 0x1a18 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    19bc:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	8e 0f       	add	r24, r30
    19c4:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	e2 5e       	subi	r30, 0xE2	; 226
    19cc:	fc 4f       	sbci	r31, 0xFC	; 252
    19ce:	80 81       	ld	r24, Z
    19d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    19d4:	85 ec       	ldi	r24, 0xC5	; 197
    19d6:	83 c0       	rjmp	.+262    	; 0x1ade <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    19d8:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
    19dc:	8b c0       	rjmp	.+278    	; 0x1af4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    19de:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	8e 0f       	add	r24, r30
    19e6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    19ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	e2 5e       	subi	r30, 0xE2	; 226
    19f2:	fc 4f       	sbci	r31, 0xFC	; 252
    19f4:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    19f6:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    19fa:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    19fe:	6b c0       	rjmp	.+214    	; 0x1ad6 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a00:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8e 0f       	add	r24, r30
    1a08:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    1a0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	e2 5e       	subi	r30, 0xE2	; 226
    1a14:	fc 4f       	sbci	r31, 0xFC	; 252
    1a16:	80 83       	st	Z, r24
	if (twi_sendStop)
    1a18:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <twi_sendStop>
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	6a c0       	rjmp	.+212    	; 0x1af4 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1a26:	84 ea       	ldi	r24, 0xA4	; 164
    1a28:	5e c0       	rjmp	.+188    	; 0x1ae6 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1a30:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
    1a34:	cf cf       	rjmp	.-98     	; 0x19d4 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a36:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    1a3a:	80 32       	cpi	r24, 0x20	; 32
    1a3c:	08 f0       	brcs	.+2      	; 0x1a40 <__vector_24+0x180>
    1a3e:	4e c0       	rjmp	.+156    	; 0x1adc <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1a40:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	8e 0f       	add	r24, r30
    1a48:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_rxBufferIndex>
    1a4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	e6 52       	subi	r30, 0x26	; 38
    1a54:	fd 4f       	sbci	r31, 0xFD	; 253
    1a56:	80 83       	st	Z, r24
    1a58:	bd cf       	rjmp	.-134    	; 0x19d4 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1a5a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a5e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    1a62:	80 32       	cpi	r24, 0x20	; 32
    1a64:	30 f4       	brcc	.+12     	; 0x1a72 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1a66:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	e6 52       	subi	r30, 0x26	; 38
    1a6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a70:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1a72:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_onSlaveReceive>
    1a7c:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <twi_onSlaveReceive+0x1>
    1a80:	8a ed       	ldi	r24, 0xDA	; 218
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1a86:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
      break;
    1a8a:	36 c0       	rjmp	.+108    	; 0x1af8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1a92:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1a96:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1a9a:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <twi_onSlaveTransmit>
    1a9e:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <twi_onSlaveTransmit+0x1>
    1aa2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1aa4:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1ab2:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ab6:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	8e 0f       	add	r24, r30
    1abe:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_txBufferIndex>
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	e4 50       	subi	r30, 0x04	; 4
    1ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1ace:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    1ad2:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    1ad6:	98 17       	cp	r25, r24
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <__vector_24+0x21c>
    1ada:	7c cf       	rjmp	.-264    	; 0x19d4 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1adc:	85 e8       	ldi	r24, 0x85	; 133
    1ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ae4:	85 ec       	ldi	r24, 0xC5	; 197
    1ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1aea:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
      break;
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1af0:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_error>
      twi_stop();
    1af4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <twi_stop>
      break;
  }
}
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1b1a:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1b24:	82 1b       	sub	r24, r18
    1b26:	91 09       	sbc	r25, r1
    1b28:	08 95       	ret

00001b2a <_ZN7TwoWire4readEv>:
    1b2a:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1b2e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1b32:	98 17       	cp	r25, r24
    1b34:	50 f4       	brcc	.+20     	; 0x1b4a <_ZN7TwoWire4readEv+0x20>
    1b36:	e9 2f       	mov	r30, r25
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	e4 58       	subi	r30, 0x84	; 132
    1b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b3e:	20 81       	ld	r18, Z
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	9f 5f       	subi	r25, 0xFF	; 255
    1b44:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <_ZN7TwoWire4readEv+0x24>
    1b4a:	2f ef       	ldi	r18, 0xFF	; 255
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	c9 01       	movw	r24, r18
    1b50:	08 95       	ret

00001b52 <_ZN7TwoWire4peekEv>:
    1b52:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1b56:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1b5a:	e8 17       	cp	r30, r24
    1b5c:	30 f4       	brcc	.+12     	; 0x1b6a <_ZN7TwoWire4peekEv+0x18>
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	e4 58       	subi	r30, 0x84	; 132
    1b62:	fc 4f       	sbci	r31, 0xFC	; 252
    1b64:	80 81       	ld	r24, Z
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	08 95       	ret
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	9f ef       	ldi	r25, 0xFF	; 255
    1b6e:	08 95       	ret

00001b70 <_ZN7TwoWire5flushEv>:
    1b70:	08 95       	ret

00001b72 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	ec 01       	movw	r28, r24
    1b78:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <_ZN7TwoWire14user_onReceiveE>
    1b7c:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <_ZN7TwoWire14user_onReceiveE+0x1>
    1b80:	30 97       	sbiw	r30, 0x00	; 0
    1b82:	f1 f0       	breq	.+60     	; 0x1bc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b84:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1b88:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1b8c:	98 17       	cp	r25, r24
    1b8e:	c0 f0       	brcs	.+48     	; 0x1bc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	29 2f       	mov	r18, r25
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	26 17       	cp	r18, r22
    1b98:	37 07       	cpc	r19, r23
    1b9a:	54 f4       	brge	.+20     	; 0x1bb0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1b9c:	de 01       	movw	r26, r28
    1b9e:	a2 0f       	add	r26, r18
    1ba0:	b3 1f       	adc	r27, r19
    1ba2:	4c 91       	ld	r20, X
    1ba4:	d9 01       	movw	r26, r18
    1ba6:	a4 58       	subi	r26, 0x84	; 132
    1ba8:	bc 4f       	sbci	r27, 0xFC	; 252
    1baa:	4c 93       	st	X, r20
    1bac:	9f 5f       	subi	r25, 0xFF	; 255
    1bae:	f1 cf       	rjmp	.-30     	; 0x1b92 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1bb0:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1bb4:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1bb8:	cb 01       	movw	r24, r22
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	09 94       	ijmp
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <_ZN7TwoWire16onRequestServiceEv>:
    1bc6:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZN7TwoWire14user_onRequestE>
    1bca:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZN7TwoWire14user_onRequestE+0x1>
    1bce:	30 97       	sbiw	r30, 0x00	; 0
    1bd0:	29 f0       	breq	.+10     	; 0x1bdc <_ZN7TwoWire16onRequestServiceEv+0x16>
    1bd2:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    1bd6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1bda:	09 94       	ijmp
    1bdc:	08 95       	ret

00001bde <_ZN7TwoWire5writeEPKhj>:
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	7c 01       	movw	r14, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8a 01       	movw	r16, r20
    1bf4:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    1bf8:	22 23       	and	r18, r18
    1bfa:	89 f0       	breq	.+34     	; 0x1c1e <_ZN7TwoWire5writeEPKhj+0x40>
    1bfc:	eb 01       	movw	r28, r22
    1bfe:	6b 01       	movw	r12, r22
    1c00:	c4 0e       	add	r12, r20
    1c02:	d5 1e       	adc	r13, r21
    1c04:	cc 15       	cp	r28, r12
    1c06:	dd 05       	cpc	r29, r13
    1c08:	69 f0       	breq	.+26     	; 0x1c24 <_ZN7TwoWire5writeEPKhj+0x46>
    1c0a:	69 91       	ld	r22, Y+
    1c0c:	d7 01       	movw	r26, r14
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	01 90       	ld	r0, Z+
    1c14:	f0 81       	ld	r31, Z
    1c16:	e0 2d       	mov	r30, r0
    1c18:	c7 01       	movw	r24, r14
    1c1a:	09 95       	icall
    1c1c:	f3 cf       	rjmp	.-26     	; 0x1c04 <_ZN7TwoWire5writeEPKhj+0x26>
    1c1e:	64 2f       	mov	r22, r20
    1c20:	0e 94 1e 0c 	call	0x183c	; 0x183c <twi_transmit>
    1c24:	c8 01       	movw	r24, r16
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	df 90       	pop	r13
    1c34:	cf 90       	pop	r12
    1c36:	08 95       	ret

00001c38 <_ZN7TwoWire5writeEh>:
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	1f 92       	push	r1
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	69 83       	std	Y+1, r22	; 0x01
    1c44:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    1c48:	22 23       	and	r18, r18
    1c4a:	d1 f0       	breq	.+52     	; 0x1c80 <_ZN7TwoWire5writeEh+0x48>
    1c4c:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1c50:	20 32       	cpi	r18, 0x20	; 32
    1c52:	40 f0       	brcs	.+16     	; 0x1c64 <_ZN7TwoWire5writeEh+0x2c>
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	fc 01       	movw	r30, r24
    1c5a:	33 83       	std	Z+3, r19	; 0x03
    1c5c:	22 83       	std	Z+2, r18	; 0x02
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	15 c0       	rjmp	.+42     	; 0x1c8e <_ZN7TwoWire5writeEh+0x56>
    1c64:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    1c68:	e8 2f       	mov	r30, r24
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	e7 5a       	subi	r30, 0xA7	; 167
    1c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c70:	99 81       	ldd	r25, Y+1	; 0x01
    1c72:	90 83       	st	Z, r25
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    1c7a:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <_ZN7TwoWire5writeEh+0x52>
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	ce 01       	movw	r24, r28
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	0e 94 1e 0c 	call	0x183c	; 0x183c <twi_transmit>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0f 90       	pop	r0
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <_ZN7TwoWireC1Ev>:
    1c96:	fc 01       	movw	r30, r24
    1c98:	13 82       	std	Z+3, r1	; 0x03
    1c9a:	12 82       	std	Z+2, r1	; 0x02
    1c9c:	88 ee       	ldi	r24, 0xE8	; 232
    1c9e:	93 e0       	ldi	r25, 0x03	; 3
    1ca0:	a0 e0       	ldi	r26, 0x00	; 0
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	84 83       	std	Z+4, r24	; 0x04
    1ca6:	95 83       	std	Z+5, r25	; 0x05
    1ca8:	a6 83       	std	Z+6, r26	; 0x06
    1caa:	b7 83       	std	Z+7, r27	; 0x07
    1cac:	8b e6       	ldi	r24, 0x6B	; 107
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
    1cb4:	08 95       	ret

00001cb6 <_ZN7TwoWire5beginEv>:
    1cb6:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1cba:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1cbe:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    1cc2:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1cc6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <twi_init>
    1cca:	83 ee       	ldi	r24, 0xE3	; 227
    1ccc:	9d e0       	ldi	r25, 0x0D	; 13
    1cce:	0e 94 4b 0c 	call	0x1896	; 0x1896 <twi_attachSlaveTxEvent>
    1cd2:	89 eb       	ldi	r24, 0xB9	; 185
    1cd4:	9d e0       	ldi	r25, 0x0D	; 13
    1cd6:	0c 94 46 0c 	jmp	0x188c	; 0x188c <twi_attachSlaveRxEvent>

00001cda <_ZN7TwoWire17beginTransmissionEh>:
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZN7TwoWire12transmittingE>
    1ce0:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <_ZN7TwoWire9txAddressE>
    1ce4:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    1ce8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1cec:	08 95       	ret

00001cee <_ZN7TwoWire17beginTransmissionEi>:
    1cee:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_ZN7TwoWire17beginTransmissionEh>

00001cf2 <_ZN7TwoWire15endTransmissionEh>:
    1cf2:	0f 93       	push	r16
    1cf4:	06 2f       	mov	r16, r22
    1cf6:	21 e0       	ldi	r18, 0x01	; 1
    1cf8:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1cfc:	69 e5       	ldi	r22, 0x59	; 89
    1cfe:	73 e0       	ldi	r23, 0x03	; 3
    1d00:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <_ZN7TwoWire9txAddressE>
    1d04:	0e 94 c8 0b 	call	0x1790	; 0x1790 <twi_writeTo>
    1d08:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    1d0c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    1d10:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN7TwoWire12transmittingE>
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <_ZN7TwoWire11requestFromEhhmhh>:
    1d18:	4f 92       	push	r4
    1d1a:	5f 92       	push	r5
    1d1c:	6f 92       	push	r6
    1d1e:	7f 92       	push	r7
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	5c 01       	movw	r10, r24
    1d34:	f6 2e       	mov	r15, r22
    1d36:	d4 2f       	mov	r29, r20
    1d38:	28 01       	movw	r4, r16
    1d3a:	39 01       	movw	r6, r18
    1d3c:	ee 20       	and	r14, r14
    1d3e:	21 f1       	breq	.+72     	; 0x1d88 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1d40:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN7TwoWire17beginTransmissionEh>
    1d44:	ce 2d       	mov	r28, r14
    1d46:	c4 30       	cpi	r28, 0x04	; 4
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d4a:	c3 e0       	ldi	r28, 0x03	; 3
    1d4c:	c1 50       	subi	r28, 0x01	; 1
    1d4e:	c0 f0       	brcs	.+48     	; 0x1d80 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1d50:	28 e0       	ldi	r18, 0x08	; 8
    1d52:	c2 9f       	mul	r28, r18
    1d54:	c0 01       	movw	r24, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	a3 01       	movw	r20, r6
    1d5a:	92 01       	movw	r18, r4
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1d5e:	56 95       	lsr	r21
    1d60:	47 95       	ror	r20
    1d62:	37 95       	ror	r19
    1d64:	27 95       	ror	r18
    1d66:	8a 95       	dec	r24
    1d68:	d2 f7       	brpl	.-12     	; 0x1d5e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	b9 01       	movw	r22, r18
    1d6e:	d5 01       	movw	r26, r10
    1d70:	ed 91       	ld	r30, X+
    1d72:	fc 91       	ld	r31, X
    1d74:	01 90       	ld	r0, Z+
    1d76:	f0 81       	ld	r31, Z
    1d78:	e0 2d       	mov	r30, r0
    1d7a:	c5 01       	movw	r24, r10
    1d7c:	09 95       	icall
    1d7e:	e6 cf       	rjmp	.-52     	; 0x1d4c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	c5 01       	movw	r24, r10
    1d84:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_ZN7TwoWire15endTransmissionEh>
    1d88:	4d 2f       	mov	r20, r29
    1d8a:	d1 32       	cpi	r29, 0x21	; 33
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	2c 2d       	mov	r18, r12
    1d92:	6c e7       	ldi	r22, 0x7C	; 124
    1d94:	73 e0       	ldi	r23, 0x03	; 3
    1d96:	8f 2d       	mov	r24, r15
    1d98:	0e 94 80 0b 	call	0x1700	; 0x1700 <twi_readFrom>
    1d9c:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    1da0:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	cf 90       	pop	r12
    1db2:	bf 90       	pop	r11
    1db4:	af 90       	pop	r10
    1db6:	7f 90       	pop	r7
    1db8:	6f 90       	pop	r6
    1dba:	5f 90       	pop	r5
    1dbc:	4f 90       	pop	r4
    1dbe:	08 95       	ret

00001dc0 <_ZN7TwoWire11requestFromEhhh>:
    1dc0:	cf 92       	push	r12
    1dc2:	ef 92       	push	r14
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	c2 2e       	mov	r12, r18
    1dca:	e1 2c       	mov	r14, r1
    1dcc:	00 e0       	ldi	r16, 0x00	; 0
    1dce:	10 e0       	ldi	r17, 0x00	; 0
    1dd0:	98 01       	movw	r18, r16
    1dd2:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN7TwoWire11requestFromEhhmhh>
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ef 90       	pop	r14
    1ddc:	cf 90       	pop	r12
    1dde:	08 95       	ret

00001de0 <_ZN7TwoWire11requestFromEii>:
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_ZN7TwoWire11requestFromEhhh>

00001de6 <_ZN7TwoWire15endTransmissionEv>:
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <_ZN7TwoWire15endTransmissionEh>

00001dec <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1dec:	86 e4       	ldi	r24, 0x46	; 70
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <_ZN7TwoWireC1Ev>

00001df4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1df4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1df6:	91 8d       	ldd	r25, Z+25	; 0x19
    1df8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dfa:	89 2f       	mov	r24, r25
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	80 5c       	subi	r24, 0xC0	; 192
    1e00:	9f 4f       	sbci	r25, 0xFF	; 255
    1e02:	82 1b       	sub	r24, r18
    1e04:	91 09       	sbc	r25, r1
}
    1e06:	8f 73       	andi	r24, 0x3F	; 63
    1e08:	99 27       	eor	r25, r25
    1e0a:	08 95       	ret

00001e0c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1e0c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1e0e:	91 8d       	ldd	r25, Z+25	; 0x19
    1e10:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e12:	98 17       	cp	r25, r24
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1e16:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f1 1d       	adc	r31, r1
    1e1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1e26:	08 95       	ret

00001e28 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1e28:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1e2a:	91 8d       	ldd	r25, Z+25	; 0x19
    1e2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e2e:	98 17       	cp	r25, r24
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1e32:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e34:	df 01       	movw	r26, r30
    1e36:	a8 0f       	add	r26, r24
    1e38:	b1 1d       	adc	r27, r1
    1e3a:	5d 96       	adiw	r26, 0x1d	; 29
    1e3c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1e3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e40:	9f 5f       	subi	r25, 0xFF	; 255
    1e42:	9f 73       	andi	r25, 0x3F	; 63
    1e44:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1e4e:	08 95       	ret

00001e50 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1e50:	8d e7       	ldi	r24, 0x7D	; 125
    1e52:	90 e1       	ldi	r25, 0x10	; 16
    1e54:	89 2b       	or	r24, r25
    1e56:	49 f0       	breq	.+18     	; 0x1e6a <_Z14serialEventRunv+0x1a>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	89 2b       	or	r24, r25
    1e5e:	29 f0       	breq	.+10     	; 0x1e6a <_Z14serialEventRunv+0x1a>
    1e60:	0e 94 7d 10 	call	0x20fa	; 0x20fa <_Z17Serial0_availablev>
    1e64:	81 11       	cpse	r24, r1
    1e66:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1e6a:	08 95       	ret

00001e6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1e6c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1e6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e70:	df 01       	movw	r26, r30
    1e72:	a8 0f       	add	r26, r24
    1e74:	b1 1d       	adc	r27, r1
    1e76:	a3 5a       	subi	r26, 0xA3	; 163
    1e78:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1e7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	8f 73       	andi	r24, 0x3F	; 63
    1e84:	99 27       	eor	r25, r25
    1e86:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1e88:	a6 89       	ldd	r26, Z+22	; 0x16
    1e8a:	b7 89       	ldd	r27, Z+23	; 0x17
    1e8c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1e8e:	a0 89       	ldd	r26, Z+16	; 0x10
    1e90:	b1 89       	ldd	r27, Z+17	; 0x11
    1e92:	8c 91       	ld	r24, X
    1e94:	80 64       	ori	r24, 0x40	; 64
    1e96:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1e98:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e9a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e9c:	98 13       	cpse	r25, r24
    1e9e:	06 c0       	rjmp	.+12     	; 0x1eac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1ea0:	02 88       	ldd	r0, Z+18	; 0x12
    1ea2:	f3 89       	ldd	r31, Z+19	; 0x13
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7d       	andi	r24, 0xDF	; 223
    1eaa:	80 83       	st	Z, r24
    1eac:	08 95       	ret

00001eae <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
  _written = true;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1ec0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ec2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ec4:	98 13       	cpse	r25, r24
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <_ZN14HardwareSerial5writeEh+0x24>
    1ec8:	e8 89       	ldd	r30, Y+16	; 0x10
    1eca:	f9 89       	ldd	r31, Y+17	; 0x11
    1ecc:	80 81       	ld	r24, Z
    1ece:	85 fd       	sbrc	r24, 5
    1ed0:	24 c0       	rjmp	.+72     	; 0x1f1a <_ZN14HardwareSerial5writeEh+0x6c>
    1ed2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ed4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ed6:	10 e0       	ldi	r17, 0x00	; 0
    1ed8:	0f 5f       	subi	r16, 0xFF	; 255
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	0f 73       	andi	r16, 0x3F	; 63
    1ede:	11 27       	eor	r17, r17
    1ee0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1ee2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ee4:	e8 12       	cpse	r14, r24
    1ee6:	0c c0       	rjmp	.+24     	; 0x1f00 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	07 fc       	sbrc	r0, 7
    1eec:	fa cf       	rjmp	.-12     	; 0x1ee2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1eee:	e8 89       	ldd	r30, Y+16	; 0x10
    1ef0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ef2:	80 81       	ld	r24, Z
    1ef4:	85 ff       	sbrs	r24, 5
    1ef6:	f5 cf       	rjmp	.-22     	; 0x1ee2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ef8:	ce 01       	movw	r24, r28
    1efa:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1efe:	f1 cf       	rjmp	.-30     	; 0x1ee2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f02:	fe 01       	movw	r30, r28
    1f04:	e8 0f       	add	r30, r24
    1f06:	f1 1d       	adc	r31, r1
    1f08:	e3 5a       	subi	r30, 0xA3	; 163
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1f0e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1f10:	ea 89       	ldd	r30, Y+18	; 0x12
    1f12:	fb 89       	ldd	r31, Y+19	; 0x13
    1f14:	80 81       	ld	r24, Z
    1f16:	80 62       	ori	r24, 0x20	; 32
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1f1a:	ee 89       	ldd	r30, Y+22	; 0x16
    1f1c:	ff 89       	ldd	r31, Y+23	; 0x17
    1f1e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1f20:	e8 89       	ldd	r30, Y+16	; 0x10
    1f22:	f9 89       	ldd	r31, Y+17	; 0x11
    1f24:	80 81       	ld	r24, Z
    1f26:	80 64       	ori	r24, 0x40	; 64
    1f28:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	08 95       	ret

00001f3c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1f42:	88 8d       	ldd	r24, Y+24	; 0x18
    1f44:	88 23       	and	r24, r24
    1f46:	c9 f0       	breq	.+50     	; 0x1f7a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1f48:	ea 89       	ldd	r30, Y+18	; 0x12
    1f4a:	fb 89       	ldd	r31, Y+19	; 0x13
    1f4c:	80 81       	ld	r24, Z
    1f4e:	85 fd       	sbrc	r24, 5
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <_ZN14HardwareSerial5flushEv+0x20>
    1f52:	a8 89       	ldd	r26, Y+16	; 0x10
    1f54:	b9 89       	ldd	r27, Y+17	; 0x11
    1f56:	8c 91       	ld	r24, X
    1f58:	86 fd       	sbrc	r24, 6
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	07 fc       	sbrc	r0, 7
    1f60:	f5 cf       	rjmp	.-22     	; 0x1f4c <_ZN14HardwareSerial5flushEv+0x10>
    1f62:	80 81       	ld	r24, Z
    1f64:	85 ff       	sbrs	r24, 5
    1f66:	f2 cf       	rjmp	.-28     	; 0x1f4c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1f68:	a8 89       	ldd	r26, Y+16	; 0x10
    1f6a:	b9 89       	ldd	r27, Y+17	; 0x11
    1f6c:	8c 91       	ld	r24, X
    1f6e:	85 ff       	sbrs	r24, 5
    1f70:	ed cf       	rjmp	.-38     	; 0x1f4c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1f72:	ce 01       	movw	r24, r28
    1f74:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	ec 01       	movw	r28, r24
    1f90:	6a 01       	movw	r12, r20
    1f92:	7b 01       	movw	r14, r22
    1f94:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1f96:	e8 89       	ldd	r30, Y+16	; 0x10
    1f98:	f9 89       	ldd	r31, Y+17	; 0x11
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1f9e:	41 15       	cp	r20, r1
    1fa0:	51 4e       	sbci	r21, 0xE1	; 225
    1fa2:	61 05       	cpc	r22, r1
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	b1 f0       	breq	.+44     	; 0x1fd4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	79 e0       	ldi	r23, 0x09	; 9
    1fac:	8d e3       	ldi	r24, 0x3D	; 61
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a7 01       	movw	r20, r14
    1fb2:	96 01       	movw	r18, r12
    1fb4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodsi4>
    1fb8:	da 01       	movw	r26, r20
    1fba:	c9 01       	movw	r24, r18
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	a1 09       	sbc	r26, r1
    1fc0:	b1 09       	sbc	r27, r1
    1fc2:	b6 95       	lsr	r27
    1fc4:	a7 95       	ror	r26
    1fc6:	97 95       	ror	r25
    1fc8:	87 95       	ror	r24
    1fca:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1fcc:	21 15       	cp	r18, r1
    1fce:	80 e1       	ldi	r24, 0x10	; 16
    1fd0:	38 07       	cpc	r19, r24
    1fd2:	a8 f0       	brcs	.+42     	; 0x1ffe <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1fd4:	e8 89       	ldd	r30, Y+16	; 0x10
    1fd6:	f9 89       	ldd	r31, Y+17	; 0x11
    1fd8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1fda:	60 e8       	ldi	r22, 0x80	; 128
    1fdc:	74 e8       	ldi	r23, 0x84	; 132
    1fde:	8e e1       	ldi	r24, 0x1E	; 30
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a7 01       	movw	r20, r14
    1fe4:	96 01       	movw	r18, r12
    1fe6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodsi4>
    1fea:	da 01       	movw	r26, r20
    1fec:	c9 01       	movw	r24, r18
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	a1 09       	sbc	r26, r1
    1ff2:	b1 09       	sbc	r27, r1
    1ff4:	b6 95       	lsr	r27
    1ff6:	a7 95       	ror	r26
    1ff8:	97 95       	ror	r25
    1ffa:	87 95       	ror	r24
    1ffc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ffe:	ec 85       	ldd	r30, Y+12	; 0x0c
    2000:	fd 85       	ldd	r31, Y+13	; 0x0d
    2002:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2004:	ee 85       	ldd	r30, Y+14	; 0x0e
    2006:	ff 85       	ldd	r31, Y+15	; 0x0f
    2008:	20 83       	st	Z, r18

  _written = false;
    200a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    200c:	ec 89       	ldd	r30, Y+20	; 0x14
    200e:	fd 89       	ldd	r31, Y+21	; 0x15
    2010:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2012:	ea 89       	ldd	r30, Y+18	; 0x12
    2014:	fb 89       	ldd	r31, Y+19	; 0x13
    2016:	80 81       	ld	r24, Z
    2018:	80 61       	ori	r24, 0x10	; 16
    201a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    201c:	ea 89       	ldd	r30, Y+18	; 0x12
    201e:	fb 89       	ldd	r31, Y+19	; 0x13
    2020:	80 81       	ld	r24, Z
    2022:	88 60       	ori	r24, 0x08	; 8
    2024:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2026:	ea 89       	ldd	r30, Y+18	; 0x12
    2028:	fb 89       	ldd	r31, Y+19	; 0x13
    202a:	80 81       	ld	r24, Z
    202c:	80 68       	ori	r24, 0x80	; 128
    202e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2030:	ea 89       	ldd	r30, Y+18	; 0x12
    2032:	fb 89       	ldd	r31, Y+19	; 0x13
    2034:	80 81       	ld	r24, Z
    2036:	8f 7d       	andi	r24, 0xDF	; 223
    2038:	80 83       	st	Z, r24
}
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	df 90       	pop	r13
    2046:	cf 90       	pop	r12
    2048:	08 95       	ret

0000204a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	2f 93       	push	r18
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    205e:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <Serial+0x10>
    2062:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <Serial+0x11>
    2066:	80 81       	ld	r24, Z
    2068:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <Serial+0x16>
    206c:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <Serial+0x17>
    2070:	82 fd       	sbrc	r24, 2
    2072:	12 c0       	rjmp	.+36     	; 0x2098 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2074:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2076:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <Serial+0x19>
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    207e:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <Serial+0x1a>
    2082:	82 17       	cp	r24, r18
    2084:	51 f0       	breq	.+20     	; 0x209a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2086:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <Serial+0x19>
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	e4 56       	subi	r30, 0x64	; 100
    208e:	fc 4f       	sbci	r31, 0xFC	; 252
    2090:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2092:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <Serial+0x19>
    2096:	01 c0       	rjmp	.+2      	; 0x209a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2098:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    20ae:	1f 92       	push	r1
    20b0:	0f 92       	push	r0
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	0f 92       	push	r0
    20b6:	11 24       	eor	r1, r1
    20b8:	2f 93       	push	r18
    20ba:	3f 93       	push	r19
    20bc:	4f 93       	push	r20
    20be:	5f 93       	push	r21
    20c0:	6f 93       	push	r22
    20c2:	7f 93       	push	r23
    20c4:	8f 93       	push	r24
    20c6:	9f 93       	push	r25
    20c8:	af 93       	push	r26
    20ca:	bf 93       	push	r27
    20cc:	ef 93       	push	r30
    20ce:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    20d0:	8c e9       	ldi	r24, 0x9C	; 156
    20d2:	93 e0       	ldi	r25, 0x03	; 3
    20d4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	0f 90       	pop	r0
    20f6:	1f 90       	pop	r1
    20f8:	18 95       	reti

000020fa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    20fa:	8c e9       	ldi	r24, 0x9C	; 156
    20fc:	93 e0       	ldi	r25, 0x03	; 3
    20fe:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_ZN14HardwareSerial9availableEv>
    2102:	21 e0       	ldi	r18, 0x01	; 1
    2104:	89 2b       	or	r24, r25
    2106:	09 f4       	brne	.+2      	; 0x210a <_Z17Serial0_availablev+0x10>
    2108:	20 e0       	ldi	r18, 0x00	; 0
}
    210a:	82 2f       	mov	r24, r18
    210c:	08 95       	ret

0000210e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    210e:	ec e9       	ldi	r30, 0x9C	; 156
    2110:	f3 e0       	ldi	r31, 0x03	; 3
    2112:	13 82       	std	Z+3, r1	; 0x03
    2114:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2116:	88 ee       	ldi	r24, 0xE8	; 232
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	a0 e0       	ldi	r26, 0x00	; 0
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	84 83       	std	Z+4, r24	; 0x04
    2120:	95 83       	std	Z+5, r25	; 0x05
    2122:	a6 83       	std	Z+6, r26	; 0x06
    2124:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2126:	8b e7       	ldi	r24, 0x7B	; 123
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    212e:	85 ec       	ldi	r24, 0xC5	; 197
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	95 87       	std	Z+13, r25	; 0x0d
    2134:	84 87       	std	Z+12, r24	; 0x0c
    2136:	84 ec       	ldi	r24, 0xC4	; 196
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	97 87       	std	Z+15, r25	; 0x0f
    213c:	86 87       	std	Z+14, r24	; 0x0e
    213e:	80 ec       	ldi	r24, 0xC0	; 192
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	91 8b       	std	Z+17, r25	; 0x11
    2144:	80 8b       	std	Z+16, r24	; 0x10
    2146:	81 ec       	ldi	r24, 0xC1	; 193
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	93 8b       	std	Z+19, r25	; 0x13
    214c:	82 8b       	std	Z+18, r24	; 0x12
    214e:	82 ec       	ldi	r24, 0xC2	; 194
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	95 8b       	std	Z+21, r25	; 0x15
    2154:	84 8b       	std	Z+20, r24	; 0x14
    2156:	86 ec       	ldi	r24, 0xC6	; 198
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	97 8b       	std	Z+23, r25	; 0x17
    215c:	86 8b       	std	Z+22, r24	; 0x16
    215e:	11 8e       	std	Z+25, r1	; 0x19
    2160:	12 8e       	std	Z+26, r1	; 0x1a
    2162:	13 8e       	std	Z+27, r1	; 0x1b
    2164:	14 8e       	std	Z+28, r1	; 0x1c
    2166:	08 95       	ret

00002168 <initVariant>:
    2168:	08 95       	ret

0000216a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    216a:	0e 94 ed 12 	call	0x25da	; 0x25da <init>

	initVariant();
    216e:	0e 94 b4 10 	call	0x2168	; 0x2168 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2172:	0e 94 b8 08 	call	0x1170	; 0x1170 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2176:	c8 e2       	ldi	r28, 0x28	; 40
    2178:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    217a:	0e 94 24 0a 	call	0x1448	; 0x1448 <loop>
		if (serialEventRun) serialEventRun();
    217e:	20 97       	sbiw	r28, 0x00	; 0
    2180:	e1 f3       	breq	.-8      	; 0x217a <main+0x10>
    2182:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z14serialEventRunv>
    2186:	f9 cf       	rjmp	.-14     	; 0x217a <main+0x10>

00002188 <_Znwj>:
    2188:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <malloc>

0000218c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	6c 01       	movw	r12, r24
    219e:	7a 01       	movw	r14, r20
    21a0:	8b 01       	movw	r16, r22
    21a2:	c0 e0       	ldi	r28, 0x00	; 0
    21a4:	d0 e0       	ldi	r29, 0x00	; 0
    21a6:	ce 15       	cp	r28, r14
    21a8:	df 05       	cpc	r29, r15
    21aa:	81 f0       	breq	.+32     	; 0x21cc <_ZN5Print5writeEPKhj+0x40>
    21ac:	d8 01       	movw	r26, r16
    21ae:	6d 91       	ld	r22, X+
    21b0:	8d 01       	movw	r16, r26
    21b2:	d6 01       	movw	r26, r12
    21b4:	ed 91       	ld	r30, X+
    21b6:	fc 91       	ld	r31, X
    21b8:	01 90       	ld	r0, Z+
    21ba:	f0 81       	ld	r31, Z
    21bc:	e0 2d       	mov	r30, r0
    21be:	c6 01       	movw	r24, r12
    21c0:	09 95       	icall
    21c2:	89 2b       	or	r24, r25
    21c4:	11 f0       	breq	.+4      	; 0x21ca <_ZN5Print5writeEPKhj+0x3e>
    21c6:	21 96       	adiw	r28, 0x01	; 1
    21c8:	ee cf       	rjmp	.-36     	; 0x21a6 <_ZN5Print5writeEPKhj+0x1a>
    21ca:	7e 01       	movw	r14, r28
    21cc:	c7 01       	movw	r24, r14
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	08 95       	ret

000021e0 <_ZN5Print5writeEPKc>:
    21e0:	61 15       	cp	r22, r1
    21e2:	71 05       	cpc	r23, r1
    21e4:	79 f0       	breq	.+30     	; 0x2204 <_ZN5Print5writeEPKc+0x24>
    21e6:	fb 01       	movw	r30, r22
    21e8:	01 90       	ld	r0, Z+
    21ea:	00 20       	and	r0, r0
    21ec:	e9 f7       	brne	.-6      	; 0x21e8 <_ZN5Print5writeEPKc+0x8>
    21ee:	31 97       	sbiw	r30, 0x01	; 1
    21f0:	af 01       	movw	r20, r30
    21f2:	46 1b       	sub	r20, r22
    21f4:	57 0b       	sbc	r21, r23
    21f6:	dc 01       	movw	r26, r24
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	02 80       	ldd	r0, Z+2	; 0x02
    21fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2200:	e0 2d       	mov	r30, r0
    2202:	09 94       	ijmp
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	08 95       	ret

0000220a <_ZN5Print5printEPK19__FlashStringHelper>:
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	8c 01       	movw	r16, r24
    2218:	7b 01       	movw	r14, r22
    221a:	c0 e0       	ldi	r28, 0x00	; 0
    221c:	d0 e0       	ldi	r29, 0x00	; 0
    221e:	f7 01       	movw	r30, r14
    2220:	ec 0f       	add	r30, r28
    2222:	fd 1f       	adc	r31, r29
    2224:	64 91       	lpm	r22, Z
    2226:	66 23       	and	r22, r22
    2228:	61 f0       	breq	.+24     	; 0x2242 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    222a:	d8 01       	movw	r26, r16
    222c:	ed 91       	ld	r30, X+
    222e:	fc 91       	ld	r31, X
    2230:	01 90       	ld	r0, Z+
    2232:	f0 81       	ld	r31, Z
    2234:	e0 2d       	mov	r30, r0
    2236:	c8 01       	movw	r24, r16
    2238:	09 95       	icall
    223a:	89 2b       	or	r24, r25
    223c:	11 f0       	breq	.+4      	; 0x2242 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    223e:	21 96       	adiw	r28, 0x01	; 1
    2240:	ee cf       	rjmp	.-36     	; 0x221e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2242:	ce 01       	movw	r24, r28
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	08 95       	ret

00002252 <_ZN5Print5printEPKc>:
    2252:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_ZN5Print5writeEPKc>

00002256 <_ZN5Print5printEc>:
    2256:	dc 01       	movw	r26, r24
    2258:	ed 91       	ld	r30, X+
    225a:	fc 91       	ld	r31, X
    225c:	01 90       	ld	r0, Z+
    225e:	f0 81       	ld	r31, Z
    2260:	e0 2d       	mov	r30, r0
    2262:	09 94       	ijmp

00002264 <_ZN5Print7printlnEv>:
    2264:	67 e8       	ldi	r22, 0x87	; 135
    2266:	71 e0       	ldi	r23, 0x01	; 1
    2268:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_ZN5Print5writeEPKc>

0000226c <_ZN5Print7printlnEPK19__FlashStringHelper>:
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	ec 01       	movw	r28, r24
    2276:	0e 94 05 11 	call	0x220a	; 0x220a <_ZN5Print5printEPK19__FlashStringHelper>
    227a:	8c 01       	movw	r16, r24
    227c:	ce 01       	movw	r24, r28
    227e:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print7printlnEv>
    2282:	80 0f       	add	r24, r16
    2284:	91 1f       	adc	r25, r17
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <_ZN5Print7printlnEPKc>:
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	ec 01       	movw	r28, r24
    229a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN5Print5writeEPKc>
    229e:	8c 01       	movw	r16, r24
    22a0:	ce 01       	movw	r24, r28
    22a2:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print7printlnEv>
    22a6:	80 0f       	add	r24, r16
    22a8:	91 1f       	adc	r25, r17
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	08 95       	ret

000022b4 <_ZN5Print7printlnEc>:
    22b4:	0f 93       	push	r16
    22b6:	1f 93       	push	r17
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	ec 01       	movw	r28, r24
    22be:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN5Print5printEc>
    22c2:	8c 01       	movw	r16, r24
    22c4:	ce 01       	movw	r24, r28
    22c6:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print7printlnEv>
    22ca:	80 0f       	add	r24, r16
    22cc:	91 1f       	adc	r25, r17
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <_ZN5Print11printNumberEmh>:
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	a1 97       	sbiw	r28, 0x21	; 33
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	7c 01       	movw	r14, r24
    22fe:	fa 01       	movw	r30, r20
    2300:	cb 01       	movw	r24, r22
    2302:	19 a2       	std	Y+33, r1	; 0x21
    2304:	22 30       	cpi	r18, 0x02	; 2
    2306:	08 f4       	brcc	.+2      	; 0x230a <_ZN5Print11printNumberEmh+0x32>
    2308:	2a e0       	ldi	r18, 0x0A	; 10
    230a:	8e 01       	movw	r16, r28
    230c:	0f 5d       	subi	r16, 0xDF	; 223
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	82 2e       	mov	r8, r18
    2312:	91 2c       	mov	r9, r1
    2314:	a1 2c       	mov	r10, r1
    2316:	b1 2c       	mov	r11, r1
    2318:	bf 01       	movw	r22, r30
    231a:	a5 01       	movw	r20, r10
    231c:	94 01       	movw	r18, r8
    231e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodsi4>
    2322:	f9 01       	movw	r30, r18
    2324:	ca 01       	movw	r24, r20
    2326:	01 50       	subi	r16, 0x01	; 1
    2328:	11 09       	sbc	r17, r1
    232a:	6a 30       	cpi	r22, 0x0A	; 10
    232c:	10 f4       	brcc	.+4      	; 0x2332 <_ZN5Print11printNumberEmh+0x5a>
    232e:	60 5d       	subi	r22, 0xD0	; 208
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <_ZN5Print11printNumberEmh+0x5c>
    2332:	69 5c       	subi	r22, 0xC9	; 201
    2334:	d8 01       	movw	r26, r16
    2336:	6c 93       	st	X, r22
    2338:	23 2b       	or	r18, r19
    233a:	24 2b       	or	r18, r20
    233c:	25 2b       	or	r18, r21
    233e:	61 f7       	brne	.-40     	; 0x2318 <_ZN5Print11printNumberEmh+0x40>
    2340:	b8 01       	movw	r22, r16
    2342:	c7 01       	movw	r24, r14
    2344:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN5Print5writeEPKc>
    2348:	a1 96       	adiw	r28, 0x21	; 33
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	bf 90       	pop	r11
    2362:	af 90       	pop	r10
    2364:	9f 90       	pop	r9
    2366:	8f 90       	pop	r8
    2368:	08 95       	ret

0000236a <_ZN5Print5printEmi>:
    236a:	21 15       	cp	r18, r1
    236c:	31 05       	cpc	r19, r1
    236e:	41 f4       	brne	.+16     	; 0x2380 <_ZN5Print5printEmi+0x16>
    2370:	dc 01       	movw	r26, r24
    2372:	ed 91       	ld	r30, X+
    2374:	fc 91       	ld	r31, X
    2376:	01 90       	ld	r0, Z+
    2378:	f0 81       	ld	r31, Z
    237a:	e0 2d       	mov	r30, r0
    237c:	64 2f       	mov	r22, r20
    237e:	09 94       	ijmp
    2380:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_ZN5Print11printNumberEmh>

00002384 <_ZN5Print5printEhi>:
    2384:	9a 01       	movw	r18, r20
    2386:	46 2f       	mov	r20, r22
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	0c 94 b5 11 	jmp	0x236a	; 0x236a <_ZN5Print5printEmi>

00002392 <_ZN5Print7printlnEhi>:
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	ec 01       	movw	r28, r24
    239c:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN5Print5printEhi>
    23a0:	8c 01       	movw	r16, r24
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print7printlnEv>
    23a8:	80 0f       	add	r24, r16
    23aa:	91 1f       	adc	r25, r17
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	08 95       	ret

000023b6 <_ZN5Print5printEji>:
    23b6:	9a 01       	movw	r18, r20
    23b8:	ab 01       	movw	r20, r22
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	0c 94 b5 11 	jmp	0x236a	; 0x236a <_ZN5Print5printEmi>

000023c2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
  if (base == 0) {
    23d2:	21 15       	cp	r18, r1
    23d4:	31 05       	cpc	r19, r1
    23d6:	81 f4       	brne	.+32     	; 0x23f8 <_ZN5Print5printEli+0x36>
    return write(n);
    23d8:	dc 01       	movw	r26, r24
    23da:	ed 91       	ld	r30, X+
    23dc:	fc 91       	ld	r31, X
    23de:	01 90       	ld	r0, Z+
    23e0:	f0 81       	ld	r31, Z
    23e2:	e0 2d       	mov	r30, r0
    23e4:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    23f6:	09 94       	ijmp
  } else if (base == 10) {
    23f8:	2a 30       	cpi	r18, 0x0A	; 10
    23fa:	31 05       	cpc	r19, r1
    23fc:	01 f5       	brne	.+64     	; 0x243e <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    23fe:	77 ff       	sbrs	r23, 7
    2400:	1d c0       	rjmp	.+58     	; 0x243c <_ZN5Print5printEli+0x7a>
    2402:	6a 01       	movw	r12, r20
    2404:	7b 01       	movw	r14, r22
    2406:	ec 01       	movw	r28, r24
      int t = print('-');
    2408:	6d e2       	ldi	r22, 0x2D	; 45
    240a:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN5Print5printEc>
    240e:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2410:	44 27       	eor	r20, r20
    2412:	55 27       	eor	r21, r21
    2414:	ba 01       	movw	r22, r20
    2416:	4c 19       	sub	r20, r12
    2418:	5d 09       	sbc	r21, r13
    241a:	6e 09       	sbc	r22, r14
    241c:	7f 09       	sbc	r23, r15
    241e:	2a e0       	ldi	r18, 0x0A	; 10
    2420:	ce 01       	movw	r24, r28
    2422:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_ZN5Print11printNumberEmh>
    2426:	80 0f       	add	r24, r16
    2428:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	df 90       	pop	r13
    2438:	cf 90       	pop	r12
    243a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    243c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    244e:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_ZN5Print11printNumberEmh>

00002452 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2452:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2454:	ab 01       	movw	r20, r22
    2456:	77 0f       	add	r23, r23
    2458:	66 0b       	sbc	r22, r22
    245a:	77 0b       	sbc	r23, r23
    245c:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <_ZN5Print5printEli>

00002460 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    246a:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN5Print5printEii>
    246e:	8c 01       	movw	r16, r24
  n += println();
    2470:	ce 01       	movw	r24, r28
    2472:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print7printlnEv>
  return n;
}
    2476:	80 0f       	add	r24, r16
    2478:	91 1f       	adc	r25, r17
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	08 95       	ret

00002484 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2484:	1f 92       	push	r1
    2486:	0f 92       	push	r0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	0f 92       	push	r0
    248c:	11 24       	eor	r1, r1
    248e:	2f 93       	push	r18
    2490:	3f 93       	push	r19
    2492:	8f 93       	push	r24
    2494:	9f 93       	push	r25
    2496:	af 93       	push	r26
    2498:	bf 93       	push	r27
    249a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <timer0_millis>
    249e:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <timer0_millis+0x1>
    24a2:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <timer0_millis+0x2>
    24a6:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <timer0_millis+0x3>
    24aa:	30 91 39 04 	lds	r19, 0x0439	; 0x800439 <timer0_fract>
    24ae:	23 e0       	ldi	r18, 0x03	; 3
    24b0:	23 0f       	add	r18, r19
    24b2:	2d 37       	cpi	r18, 0x7D	; 125
    24b4:	20 f4       	brcc	.+8      	; 0x24be <__vector_16+0x3a>
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	a1 1d       	adc	r26, r1
    24ba:	b1 1d       	adc	r27, r1
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <__vector_16+0x44>
    24be:	26 e8       	ldi	r18, 0x86	; 134
    24c0:	23 0f       	add	r18, r19
    24c2:	02 96       	adiw	r24, 0x02	; 2
    24c4:	a1 1d       	adc	r26, r1
    24c6:	b1 1d       	adc	r27, r1
    24c8:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <timer0_fract>
    24cc:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <timer0_millis>
    24d0:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <timer0_millis+0x1>
    24d4:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <timer0_millis+0x2>
    24d8:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <timer0_millis+0x3>
    24dc:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <timer0_overflow_count>
    24e0:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <timer0_overflow_count+0x1>
    24e4:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <timer0_overflow_count+0x2>
    24e8:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <timer0_overflow_count+0x3>
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	a1 1d       	adc	r26, r1
    24f0:	b1 1d       	adc	r27, r1
    24f2:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <timer0_overflow_count>
    24f6:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <timer0_overflow_count+0x1>
    24fa:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <timer0_overflow_count+0x2>
    24fe:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <timer0_overflow_count+0x3>
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	3f 91       	pop	r19
    250c:	2f 91       	pop	r18
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <micros>:
    2518:	3f b7       	in	r19, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <timer0_overflow_count>
    2520:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <timer0_overflow_count+0x1>
    2524:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <timer0_overflow_count+0x2>
    2528:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <timer0_overflow_count+0x3>
    252c:	26 b5       	in	r18, 0x26	; 38
    252e:	a8 9b       	sbis	0x15, 0	; 21
    2530:	05 c0       	rjmp	.+10     	; 0x253c <micros+0x24>
    2532:	2f 3f       	cpi	r18, 0xFF	; 255
    2534:	19 f0       	breq	.+6      	; 0x253c <micros+0x24>
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	a1 1d       	adc	r26, r1
    253a:	b1 1d       	adc	r27, r1
    253c:	3f bf       	out	0x3f, r19	; 63
    253e:	ba 2f       	mov	r27, r26
    2540:	a9 2f       	mov	r26, r25
    2542:	98 2f       	mov	r25, r24
    2544:	88 27       	eor	r24, r24
    2546:	82 0f       	add	r24, r18
    2548:	91 1d       	adc	r25, r1
    254a:	a1 1d       	adc	r26, r1
    254c:	b1 1d       	adc	r27, r1
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	42 e0       	ldi	r20, 0x02	; 2
    2554:	66 0f       	add	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	4a 95       	dec	r20
    255e:	d1 f7       	brne	.-12     	; 0x2554 <micros+0x3c>
    2560:	08 95       	ret

00002562 <delay>:
    2562:	8f 92       	push	r8
    2564:	9f 92       	push	r9
    2566:	af 92       	push	r10
    2568:	bf 92       	push	r11
    256a:	cf 92       	push	r12
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	6b 01       	movw	r12, r22
    2574:	7c 01       	movw	r14, r24
    2576:	0e 94 8c 12 	call	0x2518	; 0x2518 <micros>
    257a:	4b 01       	movw	r8, r22
    257c:	5c 01       	movw	r10, r24
    257e:	c1 14       	cp	r12, r1
    2580:	d1 04       	cpc	r13, r1
    2582:	e1 04       	cpc	r14, r1
    2584:	f1 04       	cpc	r15, r1
    2586:	01 f1       	breq	.+64     	; 0x25c8 <delay+0x66>
    2588:	0e 94 24 17 	call	0x2e48	; 0x2e48 <yield>
    258c:	0e 94 8c 12 	call	0x2518	; 0x2518 <micros>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	88 19       	sub	r24, r8
    2596:	99 09       	sbc	r25, r9
    2598:	aa 09       	sbc	r26, r10
    259a:	bb 09       	sbc	r27, r11
    259c:	88 3e       	cpi	r24, 0xE8	; 232
    259e:	93 40       	sbci	r25, 0x03	; 3
    25a0:	a1 05       	cpc	r26, r1
    25a2:	b1 05       	cpc	r27, r1
    25a4:	60 f3       	brcs	.-40     	; 0x257e <delay+0x1c>
    25a6:	21 e0       	ldi	r18, 0x01	; 1
    25a8:	c2 1a       	sub	r12, r18
    25aa:	d1 08       	sbc	r13, r1
    25ac:	e1 08       	sbc	r14, r1
    25ae:	f1 08       	sbc	r15, r1
    25b0:	88 ee       	ldi	r24, 0xE8	; 232
    25b2:	88 0e       	add	r8, r24
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	98 1e       	adc	r9, r24
    25b8:	a1 1c       	adc	r10, r1
    25ba:	b1 1c       	adc	r11, r1
    25bc:	c1 14       	cp	r12, r1
    25be:	d1 04       	cpc	r13, r1
    25c0:	e1 04       	cpc	r14, r1
    25c2:	f1 04       	cpc	r15, r1
    25c4:	19 f7       	brne	.-58     	; 0x258c <delay+0x2a>
    25c6:	db cf       	rjmp	.-74     	; 0x257e <delay+0x1c>
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	cf 90       	pop	r12
    25d0:	bf 90       	pop	r11
    25d2:	af 90       	pop	r10
    25d4:	9f 90       	pop	r9
    25d6:	8f 90       	pop	r8
    25d8:	08 95       	ret

000025da <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    25da:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    25dc:	84 b5       	in	r24, 0x24	; 36
    25de:	82 60       	ori	r24, 0x02	; 2
    25e0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    25e2:	84 b5       	in	r24, 0x24	; 36
    25e4:	81 60       	ori	r24, 0x01	; 1
    25e6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    25e8:	85 b5       	in	r24, 0x25	; 37
    25ea:	82 60       	ori	r24, 0x02	; 2
    25ec:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    25ee:	85 b5       	in	r24, 0x25	; 37
    25f0:	81 60       	ori	r24, 0x01	; 1
    25f2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    25f4:	ee e6       	ldi	r30, 0x6E	; 110
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	81 60       	ori	r24, 0x01	; 1
    25fc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    25fe:	e1 e8       	ldi	r30, 0x81	; 129
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2604:	80 81       	ld	r24, Z
    2606:	82 60       	ori	r24, 0x02	; 2
    2608:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    260a:	80 81       	ld	r24, Z
    260c:	81 60       	ori	r24, 0x01	; 1
    260e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2610:	e0 e8       	ldi	r30, 0x80	; 128
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	81 60       	ori	r24, 0x01	; 1
    2618:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    261a:	e1 eb       	ldi	r30, 0xB1	; 177
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	84 60       	ori	r24, 0x04	; 4
    2622:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2624:	e0 eb       	ldi	r30, 0xB0	; 176
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	81 60       	ori	r24, 0x01	; 1
    262c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    262e:	ea e7       	ldi	r30, 0x7A	; 122
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	84 60       	ori	r24, 0x04	; 4
    2636:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2638:	80 81       	ld	r24, Z
    263a:	82 60       	ori	r24, 0x02	; 2
    263c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    263e:	80 81       	ld	r24, Z
    2640:	81 60       	ori	r24, 0x01	; 1
    2642:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2644:	80 81       	ld	r24, Z
    2646:	80 68       	ori	r24, 0x80	; 128
    2648:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    264a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    264e:	08 95       	ret

00002650 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2650:	8e 30       	cpi	r24, 0x0E	; 14
    2652:	08 f0       	brcs	.+2      	; 0x2656 <analogRead+0x6>
    2654:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2656:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    265a:	90 e4       	ldi	r25, 0x40	; 64
    265c:	29 9f       	mul	r18, r25
    265e:	90 01       	movw	r18, r0
    2660:	11 24       	eor	r1, r1
    2662:	87 70       	andi	r24, 0x07	; 7
    2664:	82 2b       	or	r24, r18
    2666:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    266a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    266e:	80 64       	ori	r24, 0x40	; 64
    2670:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2674:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2678:	86 fd       	sbrc	r24, 6
    267a:	fc cf       	rjmp	.-8      	; 0x2674 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    267c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    2680:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2684:	90 e0       	ldi	r25, 0x00	; 0
}
    2686:	92 2b       	or	r25, r18
    2688:	08 95       	ret

0000268a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    268a:	83 30       	cpi	r24, 0x03	; 3
    268c:	81 f0       	breq	.+32     	; 0x26ae <turnOffPWM+0x24>
    268e:	28 f4       	brcc	.+10     	; 0x269a <turnOffPWM+0x10>
    2690:	81 30       	cpi	r24, 0x01	; 1
    2692:	99 f0       	breq	.+38     	; 0x26ba <turnOffPWM+0x30>
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	a1 f0       	breq	.+40     	; 0x26c0 <turnOffPWM+0x36>
    2698:	08 95       	ret
    269a:	87 30       	cpi	r24, 0x07	; 7
    269c:	a9 f0       	breq	.+42     	; 0x26c8 <turnOffPWM+0x3e>
    269e:	88 30       	cpi	r24, 0x08	; 8
    26a0:	b9 f0       	breq	.+46     	; 0x26d0 <turnOffPWM+0x46>
    26a2:	84 30       	cpi	r24, 0x04	; 4
    26a4:	d1 f4       	brne	.+52     	; 0x26da <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    26aa:	8f 7d       	andi	r24, 0xDF	; 223
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    26ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    26b2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    26b8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    26ba:	84 b5       	in	r24, 0x24	; 36
    26bc:	8f 77       	andi	r24, 0x7F	; 127
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    26c0:	84 b5       	in	r24, 0x24	; 36
    26c2:	8f 7d       	andi	r24, 0xDF	; 223
    26c4:	84 bd       	out	0x24, r24	; 36
    26c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    26c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    26cc:	8f 77       	andi	r24, 0x7F	; 127
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    26d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    26d4:	8f 7d       	andi	r24, 0xDF	; 223
    26d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    26da:	08 95       	ret

000026dc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	fc 01       	movw	r30, r24
    26e4:	e4 52       	subi	r30, 0x24	; 36
    26e6:	fc 4f       	sbci	r31, 0xFC	; 252
    26e8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    26ea:	fc 01       	movw	r30, r24
    26ec:	e0 51       	subi	r30, 0x10	; 16
    26ee:	fc 4f       	sbci	r31, 0xFC	; 252
    26f0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    26f2:	88 23       	and	r24, r24
    26f4:	61 f1       	breq	.+88     	; 0x274e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	fc 01       	movw	r30, r24
    26fe:	e8 5e       	subi	r30, 0xE8	; 232
    2700:	fb 4f       	sbci	r31, 0xFB	; 251
    2702:	c5 91       	lpm	r28, Z+
    2704:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2706:	fc 01       	movw	r30, r24
    2708:	e2 5f       	subi	r30, 0xF2	; 242
    270a:	fb 4f       	sbci	r31, 0xFB	; 251
    270c:	a5 91       	lpm	r26, Z+
    270e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2710:	61 11       	cpse	r22, r1
    2712:	09 c0       	rjmp	.+18     	; 0x2726 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2714:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2716:	f8 94       	cli
		*reg &= ~bit;
    2718:	88 81       	ld	r24, Y
    271a:	20 95       	com	r18
    271c:	82 23       	and	r24, r18
    271e:	88 83       	st	Y, r24
		*out &= ~bit;
    2720:	ec 91       	ld	r30, X
    2722:	2e 23       	and	r18, r30
    2724:	0b c0       	rjmp	.+22     	; 0x273c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2726:	62 30       	cpi	r22, 0x02	; 2
    2728:	61 f4       	brne	.+24     	; 0x2742 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    272a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    272c:	f8 94       	cli
		*reg &= ~bit;
    272e:	88 81       	ld	r24, Y
    2730:	32 2f       	mov	r19, r18
    2732:	30 95       	com	r19
    2734:	83 23       	and	r24, r19
    2736:	88 83       	st	Y, r24
		*out |= bit;
    2738:	ec 91       	ld	r30, X
    273a:	2e 2b       	or	r18, r30
    273c:	2c 93       	st	X, r18
		SREG = oldSREG;
    273e:	9f bf       	out	0x3f, r25	; 63
    2740:	06 c0       	rjmp	.+12     	; 0x274e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2742:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2744:	f8 94       	cli
		*reg |= bit;
    2746:	e8 81       	ld	r30, Y
    2748:	2e 2b       	or	r18, r30
    274a:	28 83       	st	Y, r18
		SREG = oldSREG;
    274c:	8f bf       	out	0x3f, r24	; 63
	}
}
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	f9 01       	movw	r30, r18
    2760:	e8 53       	subi	r30, 0x38	; 56
    2762:	fc 4f       	sbci	r31, 0xFC	; 252
    2764:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2766:	f9 01       	movw	r30, r18
    2768:	e4 52       	subi	r30, 0x24	; 36
    276a:	fc 4f       	sbci	r31, 0xFC	; 252
    276c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    276e:	f9 01       	movw	r30, r18
    2770:	e0 51       	subi	r30, 0x10	; 16
    2772:	fc 4f       	sbci	r31, 0xFC	; 252
    2774:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2776:	cc 23       	and	r28, r28
    2778:	c1 f0       	breq	.+48     	; 0x27aa <digitalWrite+0x56>
    277a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    277c:	81 11       	cpse	r24, r1
    277e:	0e 94 45 13 	call	0x268a	; 0x268a <turnOffPWM>

	out = portOutputRegister(port);
    2782:	ec 2f       	mov	r30, r28
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	e2 5f       	subi	r30, 0xF2	; 242
    278c:	fb 4f       	sbci	r31, 0xFB	; 251
    278e:	a5 91       	lpm	r26, Z+
    2790:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2792:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2794:	f8 94       	cli

	if (val == LOW) {
    2796:	11 11       	cpse	r17, r1
    2798:	04 c0       	rjmp	.+8      	; 0x27a2 <digitalWrite+0x4e>
		*out &= ~bit;
    279a:	8c 91       	ld	r24, X
    279c:	d0 95       	com	r29
    279e:	d8 23       	and	r29, r24
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    27a2:	ec 91       	ld	r30, X
    27a4:	de 2b       	or	r29, r30
    27a6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    27a8:	9f bf       	out	0x3f, r25	; 63
}
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	1f 91       	pop	r17
    27b0:	08 95       	ret

000027b2 <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    27b2:	fc 01       	movw	r30, r24
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	0c 94 38 18 	jmp	0x3070	; 0x3070 <free>

000027bc <_ZN6String10invalidateEv>:
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	ec 01       	movw	r28, r24
    27c2:	88 81       	ld	r24, Y
    27c4:	99 81       	ldd	r25, Y+1	; 0x01
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	11 f0       	breq	.+4      	; 0x27ce <_ZN6String10invalidateEv+0x12>
    27ca:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    27ce:	19 82       	std	Y+1, r1	; 0x01
    27d0:	18 82       	st	Y, r1
    27d2:	1d 82       	std	Y+5, r1	; 0x05
    27d4:	1c 82       	std	Y+4, r1	; 0x04
    27d6:	1b 82       	std	Y+3, r1	; 0x03
    27d8:	1a 82       	std	Y+2, r1	; 0x02
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <_ZN6String12changeBufferEj>:
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	ec 01       	movw	r28, r24
    27ea:	8b 01       	movw	r16, r22
    27ec:	6f 5f       	subi	r22, 0xFF	; 255
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	88 81       	ld	r24, Y
    27f2:	99 81       	ldd	r25, Y+1	; 0x01
    27f4:	0e 94 c1 18 	call	0x3182	; 0x3182 <realloc>
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	31 f0       	breq	.+12     	; 0x2808 <_ZN6String12changeBufferEj+0x28>
    27fc:	99 83       	std	Y+1, r25	; 0x01
    27fe:	88 83       	st	Y, r24
    2800:	1b 83       	std	Y+3, r17	; 0x03
    2802:	0a 83       	std	Y+2, r16	; 0x02
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	01 c0       	rjmp	.+2      	; 0x280a <_ZN6String12changeBufferEj+0x2a>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	08 95       	ret

00002814 <_ZN6String7reserveEj>:
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	ec 01       	movw	r28, r24
    281a:	88 81       	ld	r24, Y
    281c:	99 81       	ldd	r25, Y+1	; 0x01
    281e:	89 2b       	or	r24, r25
    2820:	29 f0       	breq	.+10     	; 0x282c <_ZN6String7reserveEj+0x18>
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	86 17       	cp	r24, r22
    2828:	97 07       	cpc	r25, r23
    282a:	60 f4       	brcc	.+24     	; 0x2844 <_ZN6String7reserveEj+0x30>
    282c:	ce 01       	movw	r24, r28
    282e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN6String12changeBufferEj>
    2832:	88 23       	and	r24, r24
    2834:	41 f0       	breq	.+16     	; 0x2846 <_ZN6String7reserveEj+0x32>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	89 2b       	or	r24, r25
    283c:	19 f4       	brne	.+6      	; 0x2844 <_ZN6String7reserveEj+0x30>
    283e:	e8 81       	ld	r30, Y
    2840:	f9 81       	ldd	r31, Y+1	; 0x01
    2842:	10 82       	st	Z, r1
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <_ZN6String4copyEPKcj>:
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	ec 01       	movw	r28, r24
    285a:	7b 01       	movw	r14, r22
    285c:	8a 01       	movw	r16, r20
    285e:	ba 01       	movw	r22, r20
    2860:	0e 94 0a 14 	call	0x2814	; 0x2814 <_ZN6String7reserveEj>
    2864:	81 11       	cpse	r24, r1
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <_ZN6String4copyEPKcj+0x24>
    2868:	ce 01       	movw	r24, r28
    286a:	0e 94 de 13 	call	0x27bc	; 0x27bc <_ZN6String10invalidateEv>
    286e:	07 c0       	rjmp	.+14     	; 0x287e <_ZN6String4copyEPKcj+0x32>
    2870:	1d 83       	std	Y+5, r17	; 0x05
    2872:	0c 83       	std	Y+4, r16	; 0x04
    2874:	b7 01       	movw	r22, r14
    2876:	88 81       	ld	r24, Y
    2878:	99 81       	ldd	r25, Y+1	; 0x01
    287a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <strcpy>
    287e:	ce 01       	movw	r24, r28
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	08 95       	ret

0000288e <_ZN6StringC1EPKc>:
    288e:	fc 01       	movw	r30, r24
    2890:	11 82       	std	Z+1, r1	; 0x01
    2892:	10 82       	st	Z, r1
    2894:	13 82       	std	Z+3, r1	; 0x03
    2896:	12 82       	std	Z+2, r1	; 0x02
    2898:	15 82       	std	Z+5, r1	; 0x05
    289a:	14 82       	std	Z+4, r1	; 0x04
    289c:	61 15       	cp	r22, r1
    289e:	71 05       	cpc	r23, r1
    28a0:	51 f0       	breq	.+20     	; 0x28b6 <_ZN6StringC1EPKc+0x28>
    28a2:	fb 01       	movw	r30, r22
    28a4:	01 90       	ld	r0, Z+
    28a6:	00 20       	and	r0, r0
    28a8:	e9 f7       	brne	.-6      	; 0x28a4 <_ZN6StringC1EPKc+0x16>
    28aa:	31 97       	sbiw	r30, 0x01	; 1
    28ac:	af 01       	movw	r20, r30
    28ae:	46 1b       	sub	r20, r22
    28b0:	57 0b       	sbc	r21, r23
    28b2:	0c 94 26 14 	jmp	0x284c	; 0x284c <_ZN6String4copyEPKcj>
    28b6:	08 95       	ret

000028b8 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	8c 01       	movw	r16, r24
    28c2:	eb 01       	movw	r28, r22
	if (buffer) {
    28c4:	fc 01       	movw	r30, r24
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	99 f0       	breq	.+38     	; 0x28f4 <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    28ce:	42 81       	ldd	r20, Z+2	; 0x02
    28d0:	53 81       	ldd	r21, Z+3	; 0x03
    28d2:	2c 81       	ldd	r18, Y+4	; 0x04
    28d4:	3d 81       	ldd	r19, Y+5	; 0x05
    28d6:	42 17       	cp	r20, r18
    28d8:	53 07       	cpc	r21, r19
    28da:	50 f0       	brcs	.+20     	; 0x28f0 <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    28dc:	68 81       	ld	r22, Y
    28de:	79 81       	ldd	r23, Y+1	; 0x01
    28e0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <strcpy>
			len = rhs.len;
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	9d 81       	ldd	r25, Y+5	; 0x05
    28e8:	f8 01       	movw	r30, r16
    28ea:	95 83       	std	Z+5, r25	; 0x05
    28ec:	84 83       	std	Z+4, r24	; 0x04
    28ee:	13 c0       	rjmp	.+38     	; 0x2916 <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    28f0:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
		}
	}
	buffer = rhs.buffer;
    28f4:	88 81       	ld	r24, Y
    28f6:	99 81       	ldd	r25, Y+1	; 0x01
    28f8:	f8 01       	movw	r30, r16
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	93 83       	std	Z+3, r25	; 0x03
    2904:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	95 83       	std	Z+5, r25	; 0x05
    290c:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    290e:	19 82       	std	Y+1, r1	; 0x01
    2910:	18 82       	st	Y, r1
	rhs.capacity = 0;
    2912:	1b 82       	std	Y+3, r1	; 0x03
    2914:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    2916:	1d 82       	std	Y+5, r1	; 0x05
    2918:	1c 82       	std	Y+4, r1	; 0x04
}
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	08 95       	ret

00002924 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	ec 01       	movw	r28, r24
    292a:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    292c:	86 17       	cp	r24, r22
    292e:	97 07       	cpc	r25, r23
    2930:	61 f0       	breq	.+24     	; 0x294a <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	61 15       	cp	r22, r1
    2938:	71 05       	cpc	r23, r1
    293a:	29 f0       	breq	.+10     	; 0x2946 <_ZN6StringaSERKS_+0x22>
    293c:	44 81       	ldd	r20, Z+4	; 0x04
    293e:	55 81       	ldd	r21, Z+5	; 0x05
    2940:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN6String4copyEPKcj>
    2944:	02 c0       	rjmp	.+4      	; 0x294a <_ZN6StringaSERKS_+0x26>
	else invalidate();
    2946:	0e 94 de 13 	call	0x27bc	; 0x27bc <_ZN6String10invalidateEv>
	
	return *this;
}
    294a:	ce 01       	movw	r24, r28
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	08 95       	ret

00002952 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2952:	fc 01       	movw	r30, r24
    2954:	11 82       	std	Z+1, r1	; 0x01
    2956:	10 82       	st	Z, r1
	capacity = 0;
    2958:	13 82       	std	Z+3, r1	; 0x03
    295a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    295c:	15 82       	std	Z+5, r1	; 0x05
    295e:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    2960:	0c 94 92 14 	jmp	0x2924	; 0x2924 <_ZN6StringaSERKS_>

00002964 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    296a:	86 17       	cp	r24, r22
    296c:	97 07       	cpc	r25, r23
    296e:	11 f0       	breq	.+4      	; 0x2974 <_ZN6StringaSEOS_+0x10>
    2970:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <_ZN6String4moveERS_>
	return *this;
}
    2974:	ce 01       	movw	r24, r28
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	08 95       	ret

0000297c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    297c:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2980:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2984:	28 17       	cp	r18, r24
    2986:	39 07       	cpc	r19, r25
    2988:	b9 f4       	brne	.+46     	; 0x29b8 <_ZN14SoftwareSerial4readEv+0x3c>
    298a:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    298e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2992:	98 17       	cp	r25, r24
    2994:	89 f0       	breq	.+34     	; 0x29b8 <_ZN14SoftwareSerial4readEv+0x3c>
    2996:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	ec 5b       	subi	r30, 0xBC	; 188
    299e:	fb 4f       	sbci	r31, 0xFB	; 251
    29a0:	80 81       	ld	r24, Z
    29a2:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	2f 5f       	subi	r18, 0xFF	; 255
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	2f 73       	andi	r18, 0x3F	; 63
    29ae:	33 27       	eor	r19, r19
    29b0:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	08 95       	ret
    29b8:	8f ef       	ldi	r24, 0xFF	; 255
    29ba:	9f ef       	ldi	r25, 0xFF	; 255
    29bc:	08 95       	ret

000029be <_ZN14SoftwareSerial5writeEh>:
    29be:	1f 93       	push	r17
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	dc 01       	movw	r26, r24
    29c6:	5c 96       	adiw	r26, 0x1c	; 28
    29c8:	8d 91       	ld	r24, X+
    29ca:	9c 91       	ld	r25, X
    29cc:	5d 97       	sbiw	r26, 0x1d	; 29
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	39 f4       	brne	.+14     	; 0x29e0 <_ZN14SoftwareSerial5writeEh+0x22>
    29d2:	21 e0       	ldi	r18, 0x01	; 1
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	13 96       	adiw	r26, 0x03	; 3
    29d8:	3c 93       	st	X, r19
    29da:	2e 93       	st	-X, r18
    29dc:	12 97       	sbiw	r26, 0x02	; 2
    29de:	3b c0       	rjmp	.+118    	; 0x2a56 <_ZN14SoftwareSerial5writeEh+0x98>
    29e0:	51 96       	adiw	r26, 0x11	; 17
    29e2:	ed 91       	ld	r30, X+
    29e4:	fc 91       	ld	r31, X
    29e6:	52 97       	sbiw	r26, 0x12	; 18
    29e8:	50 96       	adiw	r26, 0x10	; 16
    29ea:	2c 91       	ld	r18, X
    29ec:	50 97       	sbiw	r26, 0x10	; 16
    29ee:	32 2f       	mov	r19, r18
    29f0:	30 95       	com	r19
    29f2:	1f b7       	in	r17, 0x3f	; 63
    29f4:	5e 96       	adiw	r26, 0x1e	; 30
    29f6:	4c 91       	ld	r20, X
    29f8:	5e 97       	sbiw	r26, 0x1e	; 30
    29fa:	74 2f       	mov	r23, r20
    29fc:	72 70       	andi	r23, 0x02	; 2
    29fe:	41 fd       	sbrc	r20, 1
    2a00:	60 95       	com	r22
    2a02:	f8 94       	cli
    2a04:	40 81       	ld	r20, Z
    2a06:	77 23       	and	r23, r23
    2a08:	11 f0       	breq	.+4      	; 0x2a0e <_ZN14SoftwareSerial5writeEh+0x50>
    2a0a:	42 2b       	or	r20, r18
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <_ZN14SoftwareSerial5writeEh+0x52>
    2a0e:	43 23       	and	r20, r19
    2a10:	40 83       	st	Z, r20
    2a12:	ec 01       	movw	r28, r24
    2a14:	21 97       	sbiw	r28, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <_ZN14SoftwareSerial5writeEh+0x56>
    2a18:	48 e0       	ldi	r20, 0x08	; 8
    2a1a:	50 81       	ld	r21, Z
    2a1c:	60 ff       	sbrs	r22, 0
    2a1e:	02 c0       	rjmp	.+4      	; 0x2a24 <_ZN14SoftwareSerial5writeEh+0x66>
    2a20:	52 2b       	or	r21, r18
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <_ZN14SoftwareSerial5writeEh+0x68>
    2a24:	53 23       	and	r21, r19
    2a26:	50 83       	st	Z, r21
    2a28:	ec 01       	movw	r28, r24
    2a2a:	21 97       	sbiw	r28, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <_ZN14SoftwareSerial5writeEh+0x6c>
    2a2e:	66 95       	lsr	r22
    2a30:	41 50       	subi	r20, 0x01	; 1
    2a32:	99 f7       	brne	.-26     	; 0x2a1a <_ZN14SoftwareSerial5writeEh+0x5c>
    2a34:	80 81       	ld	r24, Z
    2a36:	77 23       	and	r23, r23
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <_ZN14SoftwareSerial5writeEh+0x82>
    2a3a:	83 23       	and	r24, r19
    2a3c:	80 83       	st	Z, r24
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <_ZN14SoftwareSerial5writeEh+0x86>
    2a40:	28 2b       	or	r18, r24
    2a42:	20 83       	st	Z, r18
    2a44:	1f bf       	out	0x3f, r17	; 63
    2a46:	5c 96       	adiw	r26, 0x1c	; 28
    2a48:	8d 91       	ld	r24, X+
    2a4a:	9c 91       	ld	r25, X
    2a4c:	5d 97       	sbiw	r26, 0x1d	; 29
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <_ZN14SoftwareSerial5writeEh+0x90>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	08 95       	ret

00002a5e <_ZN14SoftwareSerial5flushEv>:
    2a5e:	08 95       	ret

00002a60 <_ZN14SoftwareSerial4peekEv>:
    2a60:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2a64:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2a68:	28 17       	cp	r18, r24
    2a6a:	39 07       	cpc	r19, r25
    2a6c:	71 f4       	brne	.+28     	; 0x2a8a <_ZN14SoftwareSerial4peekEv+0x2a>
    2a6e:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2a72:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2a76:	98 17       	cp	r25, r24
    2a78:	41 f0       	breq	.+16     	; 0x2a8a <_ZN14SoftwareSerial4peekEv+0x2a>
    2a7a:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	ec 5b       	subi	r30, 0xBC	; 188
    2a82:	fb 4f       	sbci	r31, 0xFB	; 251
    2a84:	80 81       	ld	r24, Z
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	08 95       	ret
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	9f ef       	ldi	r25, 0xFF	; 255
    2a8e:	08 95       	ret

00002a90 <_ZN14SoftwareSerial9availableEv>:
    2a90:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2a94:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2a98:	28 17       	cp	r18, r24
    2a9a:	39 07       	cpc	r19, r25
    2a9c:	71 f4       	brne	.+28     	; 0x2aba <_ZN14SoftwareSerial9availableEv+0x2a>
    2a9e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2aa2:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	80 5c       	subi	r24, 0xC0	; 192
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	82 1b       	sub	r24, r18
    2aae:	91 09       	sbc	r25, r1
    2ab0:	60 e4       	ldi	r22, 0x40	; 64
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__divmodhi4>
    2ab8:	08 95       	ret
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	08 95       	ret

00002ac0 <_ZN14SoftwareSerial13stopListeningEv>:
    2ac0:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2ac4:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2ac8:	e8 17       	cp	r30, r24
    2aca:	f9 07       	cpc	r31, r25
    2acc:	69 f4       	brne	.+26     	; 0x2ae8 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    2ace:	a3 89       	ldd	r26, Z+19	; 0x13
    2ad0:	b4 89       	ldd	r27, Z+20	; 0x14
    2ad2:	9c 91       	ld	r25, X
    2ad4:	85 89       	ldd	r24, Z+21	; 0x15
    2ad6:	80 95       	com	r24
    2ad8:	89 23       	and	r24, r25
    2ada:	8c 93       	st	X, r24
    2adc:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2ae0:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	08 95       	ret
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	08 95       	ret

00002aec <_ZN14SoftwareSerial6listenEv>:
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
    2af2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2af4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2af6:	89 2b       	or	r24, r25
    2af8:	f1 f0       	breq	.+60     	; 0x2b36 <_ZN14SoftwareSerial6listenEv+0x4a>
    2afa:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2afe:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2b02:	c8 17       	cp	r28, r24
    2b04:	d9 07       	cpc	r29, r25
    2b06:	b9 f0       	breq	.+46     	; 0x2b36 <_ZN14SoftwareSerial6listenEv+0x4a>
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	11 f0       	breq	.+4      	; 0x2b10 <_ZN14SoftwareSerial6listenEv+0x24>
    2b0c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN14SoftwareSerial13stopListeningEv>
    2b10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b12:	8e 7f       	andi	r24, 0xFE	; 254
    2b14:	8e 8f       	std	Y+30, r24	; 0x1e
    2b16:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2b1a:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2b1e:	d0 93 85 04 	sts	0x0485, r29	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2b22:	c0 93 84 04 	sts	0x0484, r28	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2b26:	eb 89       	ldd	r30, Y+19	; 0x13
    2b28:	fc 89       	ldd	r31, Y+20	; 0x14
    2b2a:	90 81       	ld	r25, Z
    2b2c:	8d 89       	ldd	r24, Y+21	; 0x15
    2b2e:	89 2b       	or	r24, r25
    2b30:	80 83       	st	Z, r24
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <_ZN14SoftwareSerial6listenEv+0x4c>
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	08 95       	ret

00002b3e <__vector_3>:
    2b3e:	1f 92       	push	r1
    2b40:	0f 92       	push	r0
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	0f 92       	push	r0
    2b46:	11 24       	eor	r1, r1
    2b48:	2f 93       	push	r18
    2b4a:	3f 93       	push	r19
    2b4c:	4f 93       	push	r20
    2b4e:	5f 93       	push	r21
    2b50:	6f 93       	push	r22
    2b52:	7f 93       	push	r23
    2b54:	8f 93       	push	r24
    2b56:	9f 93       	push	r25
    2b58:	af 93       	push	r26
    2b5a:	bf 93       	push	r27
    2b5c:	ef 93       	push	r30
    2b5e:	ff 93       	push	r31
    2b60:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <_ZN14SoftwareSerial13active_objectE>
    2b64:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE+0x1>
    2b68:	30 97       	sbiw	r30, 0x00	; 0
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <__vector_3+0x30>
    2b6c:	51 c0       	rjmp	.+162    	; 0x2c10 <__vector_3+0xd2>
    2b6e:	96 8d       	ldd	r25, Z+30	; 0x1e
    2b70:	a6 85       	ldd	r26, Z+14	; 0x0e
    2b72:	b7 85       	ldd	r27, Z+15	; 0x0f
    2b74:	85 85       	ldd	r24, Z+13	; 0x0d
    2b76:	91 ff       	sbrs	r25, 1
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <__vector_3+0x44>
    2b7a:	9c 91       	ld	r25, X
    2b7c:	89 23       	and	r24, r25
    2b7e:	29 f4       	brne	.+10     	; 0x2b8a <__vector_3+0x4c>
    2b80:	47 c0       	rjmp	.+142    	; 0x2c10 <__vector_3+0xd2>
    2b82:	9c 91       	ld	r25, X
    2b84:	89 23       	and	r24, r25
    2b86:	09 f0       	breq	.+2      	; 0x2b8a <__vector_3+0x4c>
    2b88:	43 c0       	rjmp	.+134    	; 0x2c10 <__vector_3+0xd2>
    2b8a:	a3 89       	ldd	r26, Z+19	; 0x13
    2b8c:	b4 89       	ldd	r27, Z+20	; 0x14
    2b8e:	9c 91       	ld	r25, X
    2b90:	85 89       	ldd	r24, Z+21	; 0x15
    2b92:	80 95       	com	r24
    2b94:	89 23       	and	r24, r25
    2b96:	8c 93       	st	X, r24
    2b98:	86 89       	ldd	r24, Z+22	; 0x16
    2b9a:	97 89       	ldd	r25, Z+23	; 0x17
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <__vector_3+0x5e>
    2ba0:	60 8d       	ldd	r22, Z+24	; 0x18
    2ba2:	71 8d       	ldd	r23, Z+25	; 0x19
    2ba4:	a6 85       	ldd	r26, Z+14	; 0x0e
    2ba6:	b7 85       	ldd	r27, Z+15	; 0x0f
    2ba8:	55 85       	ldd	r21, Z+13	; 0x0d
    2baa:	38 e0       	ldi	r19, 0x08	; 8
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	cb 01       	movw	r24, r22
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <__vector_3+0x72>
    2bb4:	82 2f       	mov	r24, r18
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	95 95       	asr	r25
    2bba:	87 95       	ror	r24
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	4c 91       	ld	r20, X
    2bc0:	45 23       	and	r20, r21
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <__vector_3+0x88>
    2bc4:	20 68       	ori	r18, 0x80	; 128
    2bc6:	31 50       	subi	r19, 0x01	; 1
    2bc8:	91 f7       	brne	.-28     	; 0x2bae <__vector_3+0x70>
    2bca:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bcc:	81 fd       	sbrc	r24, 1
    2bce:	20 95       	com	r18
    2bd0:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	01 96       	adiw	r24, 0x01	; 1
    2bd8:	8f 73       	andi	r24, 0x3F	; 63
    2bda:	99 27       	eor	r25, r25
    2bdc:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2be0:	38 17       	cp	r19, r24
    2be2:	49 f0       	breq	.+18     	; 0x2bf6 <__vector_3+0xb8>
    2be4:	a0 91 43 04 	lds	r26, 0x0443	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	ac 5b       	subi	r26, 0xBC	; 188
    2bec:	bb 4f       	sbci	r27, 0xFB	; 251
    2bee:	2c 93       	st	X, r18
    2bf0:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2bf4:	03 c0       	rjmp	.+6      	; 0x2bfc <__vector_3+0xbe>
    2bf6:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bf8:	81 60       	ori	r24, 0x01	; 1
    2bfa:	86 8f       	std	Z+30, r24	; 0x1e
    2bfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bfe:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <__vector_3+0xc2>
    2c04:	a3 89       	ldd	r26, Z+19	; 0x13
    2c06:	b4 89       	ldd	r27, Z+20	; 0x14
    2c08:	9c 91       	ld	r25, X
    2c0a:	85 89       	ldd	r24, Z+21	; 0x15
    2c0c:	89 2b       	or	r24, r25
    2c0e:	8c 93       	st	X, r24
    2c10:	ff 91       	pop	r31
    2c12:	ef 91       	pop	r30
    2c14:	bf 91       	pop	r27
    2c16:	af 91       	pop	r26
    2c18:	9f 91       	pop	r25
    2c1a:	8f 91       	pop	r24
    2c1c:	7f 91       	pop	r23
    2c1e:	6f 91       	pop	r22
    2c20:	5f 91       	pop	r21
    2c22:	4f 91       	pop	r20
    2c24:	3f 91       	pop	r19
    2c26:	2f 91       	pop	r18
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <_ZN14SoftwareSerial5setTXEh>:
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	ec 01       	movw	r28, r24
    2c3a:	16 2f       	mov	r17, r22
    2c3c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2c3e:	66 95       	lsr	r22
    2c40:	61 70       	andi	r22, 0x01	; 1
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	68 27       	eor	r22, r24
    2c46:	81 2f       	mov	r24, r17
    2c48:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
    2c4c:	61 e0       	ldi	r22, 0x01	; 1
    2c4e:	81 2f       	mov	r24, r17
    2c50:	0e 94 6e 13 	call	0x26dc	; 0x26dc <pinMode>
    2c54:	81 2f       	mov	r24, r17
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e4 52       	subi	r30, 0x24	; 36
    2c5c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c5e:	e4 91       	lpm	r30, Z
    2c60:	e8 8b       	std	Y+16, r30	; 0x10
    2c62:	fc 01       	movw	r30, r24
    2c64:	e0 51       	subi	r30, 0x10	; 16
    2c66:	fc 4f       	sbci	r31, 0xFC	; 252
    2c68:	e4 91       	lpm	r30, Z
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	ee 0f       	add	r30, r30
    2c6e:	ff 1f       	adc	r31, r31
    2c70:	e2 5f       	subi	r30, 0xF2	; 242
    2c72:	fb 4f       	sbci	r31, 0xFB	; 251
    2c74:	85 91       	lpm	r24, Z+
    2c76:	94 91       	lpm	r25, Z
    2c78:	9a 8b       	std	Y+18, r25	; 0x12
    2c7a:	89 8b       	std	Y+17, r24	; 0x11
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	08 95       	ret

00002c84 <_ZN14SoftwareSerial5setRXEh>:
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	ec 01       	movw	r28, r24
    2c8c:	16 2f       	mov	r17, r22
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	81 2f       	mov	r24, r17
    2c92:	0e 94 6e 13 	call	0x26dc	; 0x26dc <pinMode>
    2c96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c98:	81 fd       	sbrc	r24, 1
    2c9a:	04 c0       	rjmp	.+8      	; 0x2ca4 <_ZN14SoftwareSerial5setRXEh+0x20>
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	81 2f       	mov	r24, r17
    2ca0:	0e 94 aa 13 	call	0x2754	; 0x2754 <digitalWrite>
    2ca4:	1c 87       	std	Y+12, r17	; 0x0c
    2ca6:	81 2f       	mov	r24, r17
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	fc 01       	movw	r30, r24
    2cac:	e4 52       	subi	r30, 0x24	; 36
    2cae:	fc 4f       	sbci	r31, 0xFC	; 252
    2cb0:	e4 91       	lpm	r30, Z
    2cb2:	ed 87       	std	Y+13, r30	; 0x0d
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e0 51       	subi	r30, 0x10	; 16
    2cb8:	fc 4f       	sbci	r31, 0xFC	; 252
    2cba:	e4 91       	lpm	r30, Z
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	ee 0f       	add	r30, r30
    2cc0:	ff 1f       	adc	r31, r31
    2cc2:	ec 5f       	subi	r30, 0xFC	; 252
    2cc4:	fb 4f       	sbci	r31, 0xFB	; 251
    2cc6:	85 91       	lpm	r24, Z+
    2cc8:	94 91       	lpm	r25, Z
    2cca:	9f 87       	std	Y+15, r25	; 0x0f
    2ccc:	8e 87       	std	Y+14, r24	; 0x0e
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	08 95       	ret

00002cd6 <_ZN14SoftwareSerialC1Ehhb>:
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ec 01       	movw	r28, r24
    2cde:	16 2f       	mov	r17, r22
    2ce0:	1b 82       	std	Y+3, r1	; 0x03
    2ce2:	1a 82       	std	Y+2, r1	; 0x02
    2ce4:	88 ee       	ldi	r24, 0xE8	; 232
    2ce6:	93 e0       	ldi	r25, 0x03	; 3
    2ce8:	a0 e0       	ldi	r26, 0x00	; 0
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	8c 83       	std	Y+4, r24	; 0x04
    2cee:	9d 83       	std	Y+5, r25	; 0x05
    2cf0:	ae 83       	std	Y+6, r26	; 0x06
    2cf2:	bf 83       	std	Y+7, r27	; 0x07
    2cf4:	8a e9       	ldi	r24, 0x9A	; 154
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	99 83       	std	Y+1, r25	; 0x01
    2cfa:	88 83       	st	Y, r24
    2cfc:	1f 8a       	std	Y+23, r1	; 0x17
    2cfe:	1e 8a       	std	Y+22, r1	; 0x16
    2d00:	19 8e       	std	Y+25, r1	; 0x19
    2d02:	18 8e       	std	Y+24, r1	; 0x18
    2d04:	1b 8e       	std	Y+27, r1	; 0x1b
    2d06:	1a 8e       	std	Y+26, r1	; 0x1a
    2d08:	1d 8e       	std	Y+29, r1	; 0x1d
    2d0a:	1c 8e       	std	Y+28, r1	; 0x1c
    2d0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d0e:	8e 7f       	andi	r24, 0xFE	; 254
    2d10:	20 fb       	bst	r18, 0
    2d12:	81 f9       	bld	r24, 1
    2d14:	8e 8f       	std	Y+30, r24	; 0x1e
    2d16:	64 2f       	mov	r22, r20
    2d18:	ce 01       	movw	r24, r28
    2d1a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <_ZN14SoftwareSerial5setTXEh>
    2d1e:	61 2f       	mov	r22, r17
    2d20:	ce 01       	movw	r24, r28
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	1f 91       	pop	r17
    2d28:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <_ZN14SoftwareSerial5setRXEh>

00002d2c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	ec 01       	movw	r28, r24
    2d32:	9a 01       	movw	r18, r20
    2d34:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2d36:	1b 8e       	std	Y+27, r1	; 0x1b
    2d38:	1a 8e       	std	Y+26, r1	; 0x1a
    2d3a:	19 8e       	std	Y+25, r1	; 0x19
    2d3c:	18 8e       	std	Y+24, r1	; 0x18
    2d3e:	1f 8a       	std	Y+23, r1	; 0x17
    2d40:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	79 e0       	ldi	r23, 0x09	; 9
    2d46:	8d e3       	ldi	r24, 0x3D	; 61
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__divmodsi4>
    2d4e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2d50:	24 30       	cpi	r18, 0x04	; 4
    2d52:	31 05       	cpc	r19, r1
    2d54:	18 f0       	brcs	.+6      	; 0x2d5c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2d56:	c9 01       	movw	r24, r18
    2d58:	03 97       	sbiw	r24, 0x03	; 3
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2d60:	9d 8f       	std	Y+29, r25	; 0x1d
    2d62:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2d64:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d66:	66 31       	cpi	r22, 0x16	; 22
    2d68:	08 f0       	brcs	.+2      	; 0x2d6c <_ZN14SoftwareSerial5beginEl+0x40>
    2d6a:	69 c0       	rjmp	.+210    	; 0x2e3e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2d6c:	c9 01       	movw	r24, r18
    2d6e:	96 95       	lsr	r25
    2d70:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2d72:	84 31       	cpi	r24, 0x14	; 20
    2d74:	91 05       	cpc	r25, r1
    2d76:	10 f0       	brcs	.+4      	; 0x2d7c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    2d78:	43 97       	sbiw	r24, 0x13	; 19
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2d80:	9f 8b       	std	Y+23, r25	; 0x17
    2d82:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2d84:	36 97       	sbiw	r30, 0x06	; 6
    2d86:	18 f0       	brcs	.+6      	; 0x2d8e <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    2d88:	c9 01       	movw	r24, r18
    2d8a:	05 97       	sbiw	r24, 0x05	; 5
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2d92:	99 8f       	std	Y+25, r25	; 0x19
    2d94:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2d96:	c9 01       	movw	r24, r18
    2d98:	88 0f       	add	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	28 0f       	add	r18, r24
    2d9e:	39 1f       	adc	r19, r25
    2da0:	36 95       	lsr	r19
    2da2:	27 95       	ror	r18
    2da4:	36 95       	lsr	r19
    2da6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2da8:	2d 30       	cpi	r18, 0x0D	; 13
    2daa:	31 05       	cpc	r19, r1
    2dac:	18 f0       	brcs	.+6      	; 0x2db4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2dae:	2c 50       	subi	r18, 0x0C	; 12
    2db0:	31 09       	sbc	r19, r1
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    2db4:	21 e0       	ldi	r18, 0x01	; 1
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2db8:	3b 8f       	std	Y+27, r19	; 0x1b
    2dba:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2dbc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    2dc0:	68 30       	cpi	r22, 0x08	; 8
    2dc2:	50 f0       	brcs	.+20     	; 0x2dd8 <_ZN14SoftwareSerial5beginEl+0xac>
    2dc4:	21 e0       	ldi	r18, 0x01	; 1
    2dc6:	6e 30       	cpi	r22, 0x0E	; 14
    2dc8:	08 f4       	brcc	.+2      	; 0x2dcc <_ZN14SoftwareSerial5beginEl+0xa0>
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <_ZN14SoftwareSerial5beginEl+0xa6>
    2dd0:	88 0f       	add	r24, r24
    2dd2:	2a 95       	dec	r18
    2dd4:	ea f7       	brpl	.-6      	; 0x2dd0 <_ZN14SoftwareSerial5beginEl+0xa4>
    2dd6:	01 c0       	rjmp	.+2      	; 0x2dda <_ZN14SoftwareSerial5beginEl+0xae>
    2dd8:	84 e0       	ldi	r24, 0x04	; 4
    2dda:	89 2b       	or	r24, r25
    2ddc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2de0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2de2:	98 30       	cpi	r25, 0x08	; 8
    2de4:	38 f0       	brcs	.+14     	; 0x2df4 <_ZN14SoftwareSerial5beginEl+0xc8>
    2de6:	9e 30       	cpi	r25, 0x0E	; 14
    2de8:	40 f0       	brcs	.+16     	; 0x2dfa <_ZN14SoftwareSerial5beginEl+0xce>
    2dea:	96 31       	cpi	r25, 0x16	; 22
    2dec:	48 f0       	brcs	.+18     	; 0x2e00 <_ZN14SoftwareSerial5beginEl+0xd4>
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	08 c0       	rjmp	.+16     	; 0x2e04 <_ZN14SoftwareSerial5beginEl+0xd8>
    2df4:	2d e6       	ldi	r18, 0x6D	; 109
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <_ZN14SoftwareSerial5beginEl+0xd8>
    2dfa:	2b e6       	ldi	r18, 0x6B	; 107
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <_ZN14SoftwareSerial5beginEl+0xd8>
    2e00:	2c e6       	ldi	r18, 0x6C	; 108
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	3c 8b       	std	Y+20, r19	; 0x14
    2e06:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2e08:	98 30       	cpi	r25, 0x08	; 8
    2e0a:	30 f4       	brcc	.+12     	; 0x2e18 <_ZN14SoftwareSerial5beginEl+0xec>
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	01 c0       	rjmp	.+2      	; 0x2e12 <_ZN14SoftwareSerial5beginEl+0xe6>
    2e10:	88 0f       	add	r24, r24
    2e12:	9a 95       	dec	r25
    2e14:	ea f7       	brpl	.-6      	; 0x2e10 <_ZN14SoftwareSerial5beginEl+0xe4>
    2e16:	0e c0       	rjmp	.+28     	; 0x2e34 <_ZN14SoftwareSerial5beginEl+0x108>
    2e18:	29 2f       	mov	r18, r25
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	9e 30       	cpi	r25, 0x0E	; 14
    2e1e:	18 f4       	brcc	.+6      	; 0x2e26 <_ZN14SoftwareSerial5beginEl+0xfa>
    2e20:	28 50       	subi	r18, 0x08	; 8
    2e22:	31 09       	sbc	r19, r1
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <_ZN14SoftwareSerial5beginEl+0xfe>
    2e26:	2e 50       	subi	r18, 0x0E	; 14
    2e28:	31 09       	sbc	r19, r1
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	01 c0       	rjmp	.+2      	; 0x2e30 <_ZN14SoftwareSerial5beginEl+0x104>
    2e2e:	88 0f       	add	r24, r24
    2e30:	2a 95       	dec	r18
    2e32:	ea f7       	brpl	.-6      	; 0x2e2e <_ZN14SoftwareSerial5beginEl+0x102>
    2e34:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2e36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2e3e:	ce 01       	movw	r24, r28
}
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2e44:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <_ZN14SoftwareSerial6listenEv>

00002e48 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2e48:	08 95       	ret

00002e4a <__udivmodqi4>:
    2e4a:	99 1b       	sub	r25, r25
    2e4c:	79 e0       	ldi	r23, 0x09	; 9
    2e4e:	04 c0       	rjmp	.+8      	; 0x2e58 <__udivmodqi4_ep>

00002e50 <__udivmodqi4_loop>:
    2e50:	99 1f       	adc	r25, r25
    2e52:	96 17       	cp	r25, r22
    2e54:	08 f0       	brcs	.+2      	; 0x2e58 <__udivmodqi4_ep>
    2e56:	96 1b       	sub	r25, r22

00002e58 <__udivmodqi4_ep>:
    2e58:	88 1f       	adc	r24, r24
    2e5a:	7a 95       	dec	r23
    2e5c:	c9 f7       	brne	.-14     	; 0x2e50 <__udivmodqi4_loop>
    2e5e:	80 95       	com	r24
    2e60:	08 95       	ret

00002e62 <__udivmodhi4>:
    2e62:	aa 1b       	sub	r26, r26
    2e64:	bb 1b       	sub	r27, r27
    2e66:	51 e1       	ldi	r21, 0x11	; 17
    2e68:	07 c0       	rjmp	.+14     	; 0x2e78 <__udivmodhi4_ep>

00002e6a <__udivmodhi4_loop>:
    2e6a:	aa 1f       	adc	r26, r26
    2e6c:	bb 1f       	adc	r27, r27
    2e6e:	a6 17       	cp	r26, r22
    2e70:	b7 07       	cpc	r27, r23
    2e72:	10 f0       	brcs	.+4      	; 0x2e78 <__udivmodhi4_ep>
    2e74:	a6 1b       	sub	r26, r22
    2e76:	b7 0b       	sbc	r27, r23

00002e78 <__udivmodhi4_ep>:
    2e78:	88 1f       	adc	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	5a 95       	dec	r21
    2e7e:	a9 f7       	brne	.-22     	; 0x2e6a <__udivmodhi4_loop>
    2e80:	80 95       	com	r24
    2e82:	90 95       	com	r25
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	08 95       	ret

00002e8a <__divmodhi4>:
    2e8a:	97 fb       	bst	r25, 7
    2e8c:	07 2e       	mov	r0, r23
    2e8e:	16 f4       	brtc	.+4      	; 0x2e94 <__divmodhi4+0xa>
    2e90:	00 94       	com	r0
    2e92:	07 d0       	rcall	.+14     	; 0x2ea2 <__divmodhi4_neg1>
    2e94:	77 fd       	sbrc	r23, 7
    2e96:	09 d0       	rcall	.+18     	; 0x2eaa <__divmodhi4_neg2>
    2e98:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__udivmodhi4>
    2e9c:	07 fc       	sbrc	r0, 7
    2e9e:	05 d0       	rcall	.+10     	; 0x2eaa <__divmodhi4_neg2>
    2ea0:	3e f4       	brtc	.+14     	; 0x2eb0 <__divmodhi4_exit>

00002ea2 <__divmodhi4_neg1>:
    2ea2:	90 95       	com	r25
    2ea4:	81 95       	neg	r24
    2ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea8:	08 95       	ret

00002eaa <__divmodhi4_neg2>:
    2eaa:	70 95       	com	r23
    2eac:	61 95       	neg	r22
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255

00002eb0 <__divmodhi4_exit>:
    2eb0:	08 95       	ret

00002eb2 <__udivmodsi4>:
    2eb2:	a1 e2       	ldi	r26, 0x21	; 33
    2eb4:	1a 2e       	mov	r1, r26
    2eb6:	aa 1b       	sub	r26, r26
    2eb8:	bb 1b       	sub	r27, r27
    2eba:	fd 01       	movw	r30, r26
    2ebc:	0d c0       	rjmp	.+26     	; 0x2ed8 <__udivmodsi4_ep>

00002ebe <__udivmodsi4_loop>:
    2ebe:	aa 1f       	adc	r26, r26
    2ec0:	bb 1f       	adc	r27, r27
    2ec2:	ee 1f       	adc	r30, r30
    2ec4:	ff 1f       	adc	r31, r31
    2ec6:	a2 17       	cp	r26, r18
    2ec8:	b3 07       	cpc	r27, r19
    2eca:	e4 07       	cpc	r30, r20
    2ecc:	f5 07       	cpc	r31, r21
    2ece:	20 f0       	brcs	.+8      	; 0x2ed8 <__udivmodsi4_ep>
    2ed0:	a2 1b       	sub	r26, r18
    2ed2:	b3 0b       	sbc	r27, r19
    2ed4:	e4 0b       	sbc	r30, r20
    2ed6:	f5 0b       	sbc	r31, r21

00002ed8 <__udivmodsi4_ep>:
    2ed8:	66 1f       	adc	r22, r22
    2eda:	77 1f       	adc	r23, r23
    2edc:	88 1f       	adc	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	1a 94       	dec	r1
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <__udivmodsi4_loop>
    2ee4:	60 95       	com	r22
    2ee6:	70 95       	com	r23
    2ee8:	80 95       	com	r24
    2eea:	90 95       	com	r25
    2eec:	9b 01       	movw	r18, r22
    2eee:	ac 01       	movw	r20, r24
    2ef0:	bd 01       	movw	r22, r26
    2ef2:	cf 01       	movw	r24, r30
    2ef4:	08 95       	ret

00002ef6 <__divmodsi4>:
    2ef6:	05 2e       	mov	r0, r21
    2ef8:	97 fb       	bst	r25, 7
    2efa:	1e f4       	brtc	.+6      	; 0x2f02 <__divmodsi4+0xc>
    2efc:	00 94       	com	r0
    2efe:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__negsi2>
    2f02:	57 fd       	sbrc	r21, 7
    2f04:	07 d0       	rcall	.+14     	; 0x2f14 <__divmodsi4_neg2>
    2f06:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodsi4>
    2f0a:	07 fc       	sbrc	r0, 7
    2f0c:	03 d0       	rcall	.+6      	; 0x2f14 <__divmodsi4_neg2>
    2f0e:	4e f4       	brtc	.+18     	; 0x2f22 <__divmodsi4_exit>
    2f10:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__negsi2>

00002f14 <__divmodsi4_neg2>:
    2f14:	50 95       	com	r21
    2f16:	40 95       	com	r20
    2f18:	30 95       	com	r19
    2f1a:	21 95       	neg	r18
    2f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1e:	4f 4f       	sbci	r20, 0xFF	; 255
    2f20:	5f 4f       	sbci	r21, 0xFF	; 255

00002f22 <__divmodsi4_exit>:
    2f22:	08 95       	ret

00002f24 <__negsi2>:
    2f24:	90 95       	com	r25
    2f26:	80 95       	com	r24
    2f28:	70 95       	com	r23
    2f2a:	61 95       	neg	r22
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	08 95       	ret

00002f34 <__tablejump2__>:
    2f34:	ee 0f       	add	r30, r30
    2f36:	ff 1f       	adc	r31, r31
    2f38:	05 90       	lpm	r0, Z+
    2f3a:	f4 91       	lpm	r31, Z
    2f3c:	e0 2d       	mov	r30, r0
    2f3e:	09 94       	ijmp

00002f40 <malloc>:
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	82 30       	cpi	r24, 0x02	; 2
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	10 f4       	brcc	.+4      	; 0x2f52 <malloc+0x12>
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <__flp>
    2f56:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <__flp+0x1>
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	a0 e0       	ldi	r26, 0x00	; 0
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	30 97       	sbiw	r30, 0x00	; 0
    2f64:	19 f1       	breq	.+70     	; 0x2fac <malloc+0x6c>
    2f66:	40 81       	ld	r20, Z
    2f68:	51 81       	ldd	r21, Z+1	; 0x01
    2f6a:	02 81       	ldd	r16, Z+2	; 0x02
    2f6c:	13 81       	ldd	r17, Z+3	; 0x03
    2f6e:	48 17       	cp	r20, r24
    2f70:	59 07       	cpc	r21, r25
    2f72:	c8 f0       	brcs	.+50     	; 0x2fa6 <malloc+0x66>
    2f74:	84 17       	cp	r24, r20
    2f76:	95 07       	cpc	r25, r21
    2f78:	69 f4       	brne	.+26     	; 0x2f94 <malloc+0x54>
    2f7a:	10 97       	sbiw	r26, 0x00	; 0
    2f7c:	31 f0       	breq	.+12     	; 0x2f8a <malloc+0x4a>
    2f7e:	12 96       	adiw	r26, 0x02	; 2
    2f80:	0c 93       	st	X, r16
    2f82:	12 97       	sbiw	r26, 0x02	; 2
    2f84:	13 96       	adiw	r26, 0x03	; 3
    2f86:	1c 93       	st	X, r17
    2f88:	27 c0       	rjmp	.+78     	; 0x2fd8 <malloc+0x98>
    2f8a:	00 93 88 04 	sts	0x0488, r16	; 0x800488 <__flp>
    2f8e:	10 93 89 04 	sts	0x0489, r17	; 0x800489 <__flp+0x1>
    2f92:	22 c0       	rjmp	.+68     	; 0x2fd8 <malloc+0x98>
    2f94:	21 15       	cp	r18, r1
    2f96:	31 05       	cpc	r19, r1
    2f98:	19 f0       	breq	.+6      	; 0x2fa0 <malloc+0x60>
    2f9a:	42 17       	cp	r20, r18
    2f9c:	53 07       	cpc	r21, r19
    2f9e:	18 f4       	brcc	.+6      	; 0x2fa6 <malloc+0x66>
    2fa0:	9a 01       	movw	r18, r20
    2fa2:	bd 01       	movw	r22, r26
    2fa4:	ef 01       	movw	r28, r30
    2fa6:	df 01       	movw	r26, r30
    2fa8:	f8 01       	movw	r30, r16
    2faa:	db cf       	rjmp	.-74     	; 0x2f62 <malloc+0x22>
    2fac:	21 15       	cp	r18, r1
    2fae:	31 05       	cpc	r19, r1
    2fb0:	f9 f0       	breq	.+62     	; 0x2ff0 <malloc+0xb0>
    2fb2:	28 1b       	sub	r18, r24
    2fb4:	39 0b       	sbc	r19, r25
    2fb6:	24 30       	cpi	r18, 0x04	; 4
    2fb8:	31 05       	cpc	r19, r1
    2fba:	80 f4       	brcc	.+32     	; 0x2fdc <malloc+0x9c>
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	61 15       	cp	r22, r1
    2fc2:	71 05       	cpc	r23, r1
    2fc4:	21 f0       	breq	.+8      	; 0x2fce <malloc+0x8e>
    2fc6:	fb 01       	movw	r30, r22
    2fc8:	93 83       	std	Z+3, r25	; 0x03
    2fca:	82 83       	std	Z+2, r24	; 0x02
    2fcc:	04 c0       	rjmp	.+8      	; 0x2fd6 <malloc+0x96>
    2fce:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <__flp+0x1>
    2fd2:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <__flp>
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	32 96       	adiw	r30, 0x02	; 2
    2fda:	44 c0       	rjmp	.+136    	; 0x3064 <malloc+0x124>
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e2 0f       	add	r30, r18
    2fe0:	f3 1f       	adc	r31, r19
    2fe2:	81 93       	st	Z+, r24
    2fe4:	91 93       	st	Z+, r25
    2fe6:	22 50       	subi	r18, 0x02	; 2
    2fe8:	31 09       	sbc	r19, r1
    2fea:	39 83       	std	Y+1, r19	; 0x01
    2fec:	28 83       	st	Y, r18
    2fee:	3a c0       	rjmp	.+116    	; 0x3064 <malloc+0x124>
    2ff0:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <__brkval>
    2ff4:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <__brkval+0x1>
    2ff8:	23 2b       	or	r18, r19
    2ffa:	41 f4       	brne	.+16     	; 0x300c <malloc+0xcc>
    2ffc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3000:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3004:	30 93 87 04 	sts	0x0487, r19	; 0x800487 <__brkval+0x1>
    3008:	20 93 86 04 	sts	0x0486, r18	; 0x800486 <__brkval>
    300c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3010:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3014:	21 15       	cp	r18, r1
    3016:	31 05       	cpc	r19, r1
    3018:	41 f4       	brne	.+16     	; 0x302a <malloc+0xea>
    301a:	2d b7       	in	r18, 0x3d	; 61
    301c:	3e b7       	in	r19, 0x3e	; 62
    301e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3022:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3026:	24 1b       	sub	r18, r20
    3028:	35 0b       	sbc	r19, r21
    302a:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <__brkval>
    302e:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <__brkval+0x1>
    3032:	e2 17       	cp	r30, r18
    3034:	f3 07       	cpc	r31, r19
    3036:	a0 f4       	brcc	.+40     	; 0x3060 <malloc+0x120>
    3038:	2e 1b       	sub	r18, r30
    303a:	3f 0b       	sbc	r19, r31
    303c:	28 17       	cp	r18, r24
    303e:	39 07       	cpc	r19, r25
    3040:	78 f0       	brcs	.+30     	; 0x3060 <malloc+0x120>
    3042:	ac 01       	movw	r20, r24
    3044:	4e 5f       	subi	r20, 0xFE	; 254
    3046:	5f 4f       	sbci	r21, 0xFF	; 255
    3048:	24 17       	cp	r18, r20
    304a:	35 07       	cpc	r19, r21
    304c:	48 f0       	brcs	.+18     	; 0x3060 <malloc+0x120>
    304e:	4e 0f       	add	r20, r30
    3050:	5f 1f       	adc	r21, r31
    3052:	50 93 87 04 	sts	0x0487, r21	; 0x800487 <__brkval+0x1>
    3056:	40 93 86 04 	sts	0x0486, r20	; 0x800486 <__brkval>
    305a:	81 93       	st	Z+, r24
    305c:	91 93       	st	Z+, r25
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <malloc+0x124>
    3060:	e0 e0       	ldi	r30, 0x00	; 0
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	cf 01       	movw	r24, r30
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	08 95       	ret

00003070 <free>:
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	09 f4       	brne	.+2      	; 0x307a <free+0xa>
    3078:	81 c0       	rjmp	.+258    	; 0x317c <free+0x10c>
    307a:	fc 01       	movw	r30, r24
    307c:	32 97       	sbiw	r30, 0x02	; 2
    307e:	13 82       	std	Z+3, r1	; 0x03
    3080:	12 82       	std	Z+2, r1	; 0x02
    3082:	a0 91 88 04 	lds	r26, 0x0488	; 0x800488 <__flp>
    3086:	b0 91 89 04 	lds	r27, 0x0489	; 0x800489 <__flp+0x1>
    308a:	10 97       	sbiw	r26, 0x00	; 0
    308c:	81 f4       	brne	.+32     	; 0x30ae <free+0x3e>
    308e:	20 81       	ld	r18, Z
    3090:	31 81       	ldd	r19, Z+1	; 0x01
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <__brkval>
    309a:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <__brkval+0x1>
    309e:	28 17       	cp	r18, r24
    30a0:	39 07       	cpc	r19, r25
    30a2:	51 f5       	brne	.+84     	; 0x30f8 <free+0x88>
    30a4:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <__brkval+0x1>
    30a8:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <__brkval>
    30ac:	67 c0       	rjmp	.+206    	; 0x317c <free+0x10c>
    30ae:	ed 01       	movw	r28, r26
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	ce 17       	cp	r28, r30
    30b6:	df 07       	cpc	r29, r31
    30b8:	40 f4       	brcc	.+16     	; 0x30ca <free+0x5a>
    30ba:	4a 81       	ldd	r20, Y+2	; 0x02
    30bc:	5b 81       	ldd	r21, Y+3	; 0x03
    30be:	9e 01       	movw	r18, r28
    30c0:	41 15       	cp	r20, r1
    30c2:	51 05       	cpc	r21, r1
    30c4:	f1 f0       	breq	.+60     	; 0x3102 <free+0x92>
    30c6:	ea 01       	movw	r28, r20
    30c8:	f5 cf       	rjmp	.-22     	; 0x30b4 <free+0x44>
    30ca:	d3 83       	std	Z+3, r29	; 0x03
    30cc:	c2 83       	std	Z+2, r28	; 0x02
    30ce:	40 81       	ld	r20, Z
    30d0:	51 81       	ldd	r21, Z+1	; 0x01
    30d2:	84 0f       	add	r24, r20
    30d4:	95 1f       	adc	r25, r21
    30d6:	c8 17       	cp	r28, r24
    30d8:	d9 07       	cpc	r29, r25
    30da:	59 f4       	brne	.+22     	; 0x30f2 <free+0x82>
    30dc:	88 81       	ld	r24, Y
    30de:	99 81       	ldd	r25, Y+1	; 0x01
    30e0:	84 0f       	add	r24, r20
    30e2:	95 1f       	adc	r25, r21
    30e4:	02 96       	adiw	r24, 0x02	; 2
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	9b 81       	ldd	r25, Y+3	; 0x03
    30ee:	93 83       	std	Z+3, r25	; 0x03
    30f0:	82 83       	std	Z+2, r24	; 0x02
    30f2:	21 15       	cp	r18, r1
    30f4:	31 05       	cpc	r19, r1
    30f6:	29 f4       	brne	.+10     	; 0x3102 <free+0x92>
    30f8:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__flp+0x1>
    30fc:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__flp>
    3100:	3d c0       	rjmp	.+122    	; 0x317c <free+0x10c>
    3102:	e9 01       	movw	r28, r18
    3104:	fb 83       	std	Y+3, r31	; 0x03
    3106:	ea 83       	std	Y+2, r30	; 0x02
    3108:	49 91       	ld	r20, Y+
    310a:	59 91       	ld	r21, Y+
    310c:	c4 0f       	add	r28, r20
    310e:	d5 1f       	adc	r29, r21
    3110:	ec 17       	cp	r30, r28
    3112:	fd 07       	cpc	r31, r29
    3114:	61 f4       	brne	.+24     	; 0x312e <free+0xbe>
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	84 0f       	add	r24, r20
    311c:	95 1f       	adc	r25, r21
    311e:	02 96       	adiw	r24, 0x02	; 2
    3120:	e9 01       	movw	r28, r18
    3122:	99 83       	std	Y+1, r25	; 0x01
    3124:	88 83       	st	Y, r24
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	9b 83       	std	Y+3, r25	; 0x03
    312c:	8a 83       	std	Y+2, r24	; 0x02
    312e:	e0 e0       	ldi	r30, 0x00	; 0
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	12 96       	adiw	r26, 0x02	; 2
    3134:	8d 91       	ld	r24, X+
    3136:	9c 91       	ld	r25, X
    3138:	13 97       	sbiw	r26, 0x03	; 3
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	19 f0       	breq	.+6      	; 0x3144 <free+0xd4>
    313e:	fd 01       	movw	r30, r26
    3140:	dc 01       	movw	r26, r24
    3142:	f7 cf       	rjmp	.-18     	; 0x3132 <free+0xc2>
    3144:	8d 91       	ld	r24, X+
    3146:	9c 91       	ld	r25, X
    3148:	11 97       	sbiw	r26, 0x01	; 1
    314a:	9d 01       	movw	r18, r26
    314c:	2e 5f       	subi	r18, 0xFE	; 254
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	82 0f       	add	r24, r18
    3152:	93 1f       	adc	r25, r19
    3154:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <__brkval>
    3158:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <__brkval+0x1>
    315c:	28 17       	cp	r18, r24
    315e:	39 07       	cpc	r19, r25
    3160:	69 f4       	brne	.+26     	; 0x317c <free+0x10c>
    3162:	30 97       	sbiw	r30, 0x00	; 0
    3164:	29 f4       	brne	.+10     	; 0x3170 <free+0x100>
    3166:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <__flp+0x1>
    316a:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <__flp>
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <free+0x104>
    3170:	13 82       	std	Z+3, r1	; 0x03
    3172:	12 82       	std	Z+2, r1	; 0x02
    3174:	b0 93 87 04 	sts	0x0487, r27	; 0x800487 <__brkval+0x1>
    3178:	a0 93 86 04 	sts	0x0486, r26	; 0x800486 <__brkval>
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	08 95       	ret

00003182 <realloc>:
    3182:	a0 e0       	ldi	r26, 0x00	; 0
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e7 ec       	ldi	r30, 0xC7	; 199
    3188:	f8 e1       	ldi	r31, 0x18	; 24
    318a:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x8>
    318e:	ec 01       	movw	r28, r24
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	21 f4       	brne	.+8      	; 0x319c <realloc+0x1a>
    3194:	cb 01       	movw	r24, r22
    3196:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <malloc>
    319a:	b4 c0       	rjmp	.+360    	; 0x3304 <realloc+0x182>
    319c:	fc 01       	movw	r30, r24
    319e:	e6 0f       	add	r30, r22
    31a0:	f7 1f       	adc	r31, r23
    31a2:	9c 01       	movw	r18, r24
    31a4:	22 50       	subi	r18, 0x02	; 2
    31a6:	31 09       	sbc	r19, r1
    31a8:	e2 17       	cp	r30, r18
    31aa:	f3 07       	cpc	r31, r19
    31ac:	08 f4       	brcc	.+2      	; 0x31b0 <realloc+0x2e>
    31ae:	a8 c0       	rjmp	.+336    	; 0x3300 <realloc+0x17e>
    31b0:	d9 01       	movw	r26, r18
    31b2:	0d 91       	ld	r16, X+
    31b4:	1c 91       	ld	r17, X
    31b6:	11 97       	sbiw	r26, 0x01	; 1
    31b8:	06 17       	cp	r16, r22
    31ba:	17 07       	cpc	r17, r23
    31bc:	b0 f0       	brcs	.+44     	; 0x31ea <realloc+0x68>
    31be:	05 30       	cpi	r16, 0x05	; 5
    31c0:	11 05       	cpc	r17, r1
    31c2:	08 f4       	brcc	.+2      	; 0x31c6 <realloc+0x44>
    31c4:	9b c0       	rjmp	.+310    	; 0x32fc <realloc+0x17a>
    31c6:	c8 01       	movw	r24, r16
    31c8:	04 97       	sbiw	r24, 0x04	; 4
    31ca:	86 17       	cp	r24, r22
    31cc:	97 07       	cpc	r25, r23
    31ce:	08 f4       	brcc	.+2      	; 0x31d2 <realloc+0x50>
    31d0:	95 c0       	rjmp	.+298    	; 0x32fc <realloc+0x17a>
    31d2:	02 50       	subi	r16, 0x02	; 2
    31d4:	11 09       	sbc	r17, r1
    31d6:	06 1b       	sub	r16, r22
    31d8:	17 0b       	sbc	r17, r23
    31da:	01 93       	st	Z+, r16
    31dc:	11 93       	st	Z+, r17
    31de:	6d 93       	st	X+, r22
    31e0:	7c 93       	st	X, r23
    31e2:	cf 01       	movw	r24, r30
    31e4:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    31e8:	89 c0       	rjmp	.+274    	; 0x32fc <realloc+0x17a>
    31ea:	5b 01       	movw	r10, r22
    31ec:	a0 1a       	sub	r10, r16
    31ee:	b1 0a       	sbc	r11, r17
    31f0:	4c 01       	movw	r8, r24
    31f2:	80 0e       	add	r8, r16
    31f4:	91 1e       	adc	r9, r17
    31f6:	a0 91 88 04 	lds	r26, 0x0488	; 0x800488 <__flp>
    31fa:	b0 91 89 04 	lds	r27, 0x0489	; 0x800489 <__flp+0x1>
    31fe:	61 2c       	mov	r6, r1
    3200:	71 2c       	mov	r7, r1
    3202:	e1 2c       	mov	r14, r1
    3204:	f1 2c       	mov	r15, r1
    3206:	10 97       	sbiw	r26, 0x00	; 0
    3208:	09 f4       	brne	.+2      	; 0x320c <realloc+0x8a>
    320a:	46 c0       	rjmp	.+140    	; 0x3298 <realloc+0x116>
    320c:	8d 91       	ld	r24, X+
    320e:	9c 91       	ld	r25, X
    3210:	11 97       	sbiw	r26, 0x01	; 1
    3212:	a8 15       	cp	r26, r8
    3214:	b9 05       	cpc	r27, r9
    3216:	b1 f5       	brne	.+108    	; 0x3284 <realloc+0x102>
    3218:	6c 01       	movw	r12, r24
    321a:	42 e0       	ldi	r20, 0x02	; 2
    321c:	c4 0e       	add	r12, r20
    321e:	d1 1c       	adc	r13, r1
    3220:	ca 14       	cp	r12, r10
    3222:	db 04       	cpc	r13, r11
    3224:	78 f1       	brcs	.+94     	; 0x3284 <realloc+0x102>
    3226:	4c 01       	movw	r8, r24
    3228:	8a 18       	sub	r8, r10
    322a:	9b 08       	sbc	r9, r11
    322c:	64 01       	movw	r12, r8
    322e:	42 e0       	ldi	r20, 0x02	; 2
    3230:	c4 0e       	add	r12, r20
    3232:	d1 1c       	adc	r13, r1
    3234:	12 96       	adiw	r26, 0x02	; 2
    3236:	bc 90       	ld	r11, X
    3238:	12 97       	sbiw	r26, 0x02	; 2
    323a:	13 96       	adiw	r26, 0x03	; 3
    323c:	ac 91       	ld	r26, X
    323e:	b5 e0       	ldi	r27, 0x05	; 5
    3240:	cb 16       	cp	r12, r27
    3242:	d1 04       	cpc	r13, r1
    3244:	40 f0       	brcs	.+16     	; 0x3256 <realloc+0xd4>
    3246:	b2 82       	std	Z+2, r11	; 0x02
    3248:	a3 83       	std	Z+3, r26	; 0x03
    324a:	91 82       	std	Z+1, r9	; 0x01
    324c:	80 82       	st	Z, r8
    324e:	d9 01       	movw	r26, r18
    3250:	6d 93       	st	X+, r22
    3252:	7c 93       	st	X, r23
    3254:	09 c0       	rjmp	.+18     	; 0x3268 <realloc+0xe6>
    3256:	0e 5f       	subi	r16, 0xFE	; 254
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	80 0f       	add	r24, r16
    325c:	91 1f       	adc	r25, r17
    325e:	f9 01       	movw	r30, r18
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
    3264:	eb 2d       	mov	r30, r11
    3266:	fa 2f       	mov	r31, r26
    3268:	e1 14       	cp	r14, r1
    326a:	f1 04       	cpc	r15, r1
    326c:	31 f0       	breq	.+12     	; 0x327a <realloc+0xf8>
    326e:	d7 01       	movw	r26, r14
    3270:	13 96       	adiw	r26, 0x03	; 3
    3272:	fc 93       	st	X, r31
    3274:	ee 93       	st	-X, r30
    3276:	12 97       	sbiw	r26, 0x02	; 2
    3278:	41 c0       	rjmp	.+130    	; 0x32fc <realloc+0x17a>
    327a:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__flp+0x1>
    327e:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__flp>
    3282:	3c c0       	rjmp	.+120    	; 0x32fc <realloc+0x17a>
    3284:	68 16       	cp	r6, r24
    3286:	79 06       	cpc	r7, r25
    3288:	08 f4       	brcc	.+2      	; 0x328c <realloc+0x10a>
    328a:	3c 01       	movw	r6, r24
    328c:	7d 01       	movw	r14, r26
    328e:	12 96       	adiw	r26, 0x02	; 2
    3290:	0d 90       	ld	r0, X+
    3292:	bc 91       	ld	r27, X
    3294:	a0 2d       	mov	r26, r0
    3296:	b7 cf       	rjmp	.-146    	; 0x3206 <realloc+0x84>
    3298:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <__brkval>
    329c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <__brkval+0x1>
    32a0:	88 16       	cp	r8, r24
    32a2:	99 06       	cpc	r9, r25
    32a4:	e1 f4       	brne	.+56     	; 0x32de <realloc+0x15c>
    32a6:	66 16       	cp	r6, r22
    32a8:	77 06       	cpc	r7, r23
    32aa:	c8 f4       	brcc	.+50     	; 0x32de <realloc+0x15c>
    32ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    32b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	41 f4       	brne	.+16     	; 0x32c8 <realloc+0x146>
    32b8:	8d b7       	in	r24, 0x3d	; 61
    32ba:	9e b7       	in	r25, 0x3e	; 62
    32bc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    32c0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    32c4:	84 1b       	sub	r24, r20
    32c6:	95 0b       	sbc	r25, r21
    32c8:	e8 17       	cp	r30, r24
    32ca:	f9 07       	cpc	r31, r25
    32cc:	c8 f4       	brcc	.+50     	; 0x3300 <realloc+0x17e>
    32ce:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <__brkval+0x1>
    32d2:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <__brkval>
    32d6:	f9 01       	movw	r30, r18
    32d8:	71 83       	std	Z+1, r23	; 0x01
    32da:	60 83       	st	Z, r22
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <realloc+0x17a>
    32de:	cb 01       	movw	r24, r22
    32e0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <malloc>
    32e4:	7c 01       	movw	r14, r24
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	59 f0       	breq	.+22     	; 0x3300 <realloc+0x17e>
    32ea:	a8 01       	movw	r20, r16
    32ec:	be 01       	movw	r22, r28
    32ee:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <memcpy>
    32f2:	ce 01       	movw	r24, r28
    32f4:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    32f8:	c7 01       	movw	r24, r14
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <realloc+0x182>
    32fc:	ce 01       	movw	r24, r28
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <realloc+0x182>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	ee e0       	ldi	r30, 0x0E	; 14
    330a:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x8>

0000330e <atoi>:
    330e:	fc 01       	movw	r30, r24
    3310:	88 27       	eor	r24, r24
    3312:	99 27       	eor	r25, r25
    3314:	e8 94       	clt
    3316:	21 91       	ld	r18, Z+
    3318:	20 32       	cpi	r18, 0x20	; 32
    331a:	e9 f3       	breq	.-6      	; 0x3316 <atoi+0x8>
    331c:	29 30       	cpi	r18, 0x09	; 9
    331e:	10 f0       	brcs	.+4      	; 0x3324 <atoi+0x16>
    3320:	2e 30       	cpi	r18, 0x0E	; 14
    3322:	c8 f3       	brcs	.-14     	; 0x3316 <atoi+0x8>
    3324:	2b 32       	cpi	r18, 0x2B	; 43
    3326:	41 f0       	breq	.+16     	; 0x3338 <atoi+0x2a>
    3328:	2d 32       	cpi	r18, 0x2D	; 45
    332a:	39 f4       	brne	.+14     	; 0x333a <atoi+0x2c>
    332c:	68 94       	set
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <atoi+0x2a>
    3330:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__mulhi_const_10>
    3334:	82 0f       	add	r24, r18
    3336:	91 1d       	adc	r25, r1
    3338:	21 91       	ld	r18, Z+
    333a:	20 53       	subi	r18, 0x30	; 48
    333c:	2a 30       	cpi	r18, 0x0A	; 10
    333e:	c0 f3       	brcs	.-16     	; 0x3330 <atoi+0x22>
    3340:	1e f4       	brtc	.+6      	; 0x3348 <atoi+0x3a>
    3342:	90 95       	com	r25
    3344:	81 95       	neg	r24
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	08 95       	ret

0000334a <strcmp_P>:
    334a:	fb 01       	movw	r30, r22
    334c:	dc 01       	movw	r26, r24
    334e:	8d 91       	ld	r24, X+
    3350:	05 90       	lpm	r0, Z+
    3352:	80 19       	sub	r24, r0
    3354:	01 10       	cpse	r0, r1
    3356:	d9 f3       	breq	.-10     	; 0x334e <strcmp_P+0x4>
    3358:	99 0b       	sbc	r25, r25
    335a:	08 95       	ret

0000335c <__strlen_P>:
    335c:	fc 01       	movw	r30, r24
    335e:	05 90       	lpm	r0, Z+
    3360:	00 20       	and	r0, r0
    3362:	e9 f7       	brne	.-6      	; 0x335e <__strlen_P+0x2>
    3364:	80 95       	com	r24
    3366:	90 95       	com	r25
    3368:	8e 0f       	add	r24, r30
    336a:	9f 1f       	adc	r25, r31
    336c:	08 95       	ret

0000336e <strstr_P>:
    336e:	fb 01       	movw	r30, r22
    3370:	55 91       	lpm	r21, Z+
    3372:	55 23       	and	r21, r21
    3374:	a9 f0       	breq	.+42     	; 0x33a0 <strstr_P+0x32>
    3376:	bf 01       	movw	r22, r30
    3378:	dc 01       	movw	r26, r24
    337a:	4d 91       	ld	r20, X+
    337c:	45 17       	cp	r20, r21
    337e:	41 11       	cpse	r20, r1
    3380:	e1 f7       	brne	.-8      	; 0x337a <strstr_P+0xc>
    3382:	59 f4       	brne	.+22     	; 0x339a <strstr_P+0x2c>
    3384:	cd 01       	movw	r24, r26
    3386:	05 90       	lpm	r0, Z+
    3388:	00 20       	and	r0, r0
    338a:	49 f0       	breq	.+18     	; 0x339e <strstr_P+0x30>
    338c:	4d 91       	ld	r20, X+
    338e:	40 15       	cp	r20, r0
    3390:	41 11       	cpse	r20, r1
    3392:	c9 f3       	breq	.-14     	; 0x3386 <strstr_P+0x18>
    3394:	fb 01       	movw	r30, r22
    3396:	41 11       	cpse	r20, r1
    3398:	ef cf       	rjmp	.-34     	; 0x3378 <strstr_P+0xa>
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	08 95       	ret

000033a2 <memcpy>:
    33a2:	fb 01       	movw	r30, r22
    33a4:	dc 01       	movw	r26, r24
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <memcpy+0xa>
    33a8:	01 90       	ld	r0, Z+
    33aa:	0d 92       	st	X+, r0
    33ac:	41 50       	subi	r20, 0x01	; 1
    33ae:	50 40       	sbci	r21, 0x00	; 0
    33b0:	d8 f7       	brcc	.-10     	; 0x33a8 <memcpy+0x6>
    33b2:	08 95       	ret

000033b4 <strchr>:
    33b4:	fc 01       	movw	r30, r24
    33b6:	81 91       	ld	r24, Z+
    33b8:	86 17       	cp	r24, r22
    33ba:	21 f0       	breq	.+8      	; 0x33c4 <strchr+0x10>
    33bc:	88 23       	and	r24, r24
    33be:	d9 f7       	brne	.-10     	; 0x33b6 <strchr+0x2>
    33c0:	99 27       	eor	r25, r25
    33c2:	08 95       	ret
    33c4:	31 97       	sbiw	r30, 0x01	; 1
    33c6:	cf 01       	movw	r24, r30
    33c8:	08 95       	ret

000033ca <strcpy>:
    33ca:	fb 01       	movw	r30, r22
    33cc:	dc 01       	movw	r26, r24
    33ce:	01 90       	ld	r0, Z+
    33d0:	0d 92       	st	X+, r0
    33d2:	00 20       	and	r0, r0
    33d4:	e1 f7       	brne	.-8      	; 0x33ce <strcpy+0x4>
    33d6:	08 95       	ret

000033d8 <__mulhi_const_10>:
    33d8:	7a e0       	ldi	r23, 0x0A	; 10
    33da:	97 9f       	mul	r25, r23
    33dc:	90 2d       	mov	r25, r0
    33de:	87 9f       	mul	r24, r23
    33e0:	80 2d       	mov	r24, r0
    33e2:	91 0d       	add	r25, r1
    33e4:	11 24       	eor	r1, r1
    33e6:	08 95       	ret

000033e8 <__prologue_saves__>:
    33e8:	2f 92       	push	r2
    33ea:	3f 92       	push	r3
    33ec:	4f 92       	push	r4
    33ee:	5f 92       	push	r5
    33f0:	6f 92       	push	r6
    33f2:	7f 92       	push	r7
    33f4:	8f 92       	push	r8
    33f6:	9f 92       	push	r9
    33f8:	af 92       	push	r10
    33fa:	bf 92       	push	r11
    33fc:	cf 92       	push	r12
    33fe:	df 92       	push	r13
    3400:	ef 92       	push	r14
    3402:	ff 92       	push	r15
    3404:	0f 93       	push	r16
    3406:	1f 93       	push	r17
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	ca 1b       	sub	r28, r26
    3412:	db 0b       	sbc	r29, r27
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	09 94       	ijmp

00003420 <__epilogue_restores__>:
    3420:	2a 88       	ldd	r2, Y+18	; 0x12
    3422:	39 88       	ldd	r3, Y+17	; 0x11
    3424:	48 88       	ldd	r4, Y+16	; 0x10
    3426:	5f 84       	ldd	r5, Y+15	; 0x0f
    3428:	6e 84       	ldd	r6, Y+14	; 0x0e
    342a:	7d 84       	ldd	r7, Y+13	; 0x0d
    342c:	8c 84       	ldd	r8, Y+12	; 0x0c
    342e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3430:	aa 84       	ldd	r10, Y+10	; 0x0a
    3432:	b9 84       	ldd	r11, Y+9	; 0x09
    3434:	c8 84       	ldd	r12, Y+8	; 0x08
    3436:	df 80       	ldd	r13, Y+7	; 0x07
    3438:	ee 80       	ldd	r14, Y+6	; 0x06
    343a:	fd 80       	ldd	r15, Y+5	; 0x05
    343c:	0c 81       	ldd	r16, Y+4	; 0x04
    343e:	1b 81       	ldd	r17, Y+3	; 0x03
    3440:	aa 81       	ldd	r26, Y+2	; 0x02
    3442:	b9 81       	ldd	r27, Y+1	; 0x01
    3444:	ce 0f       	add	r28, r30
    3446:	d1 1d       	adc	r29, r1
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	ed 01       	movw	r28, r26
    3454:	08 95       	ret

00003456 <__do_global_dtors>:
    3456:	12 e0       	ldi	r17, 0x02	; 2
    3458:	c4 e1       	ldi	r28, 0x14	; 20
    345a:	d2 e0       	ldi	r29, 0x02	; 2
    345c:	04 c0       	rjmp	.+8      	; 0x3466 <__do_global_dtors+0x10>
    345e:	fe 01       	movw	r30, r28
    3460:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__tablejump2__>
    3464:	21 96       	adiw	r28, 0x01	; 1
    3466:	c5 31       	cpi	r28, 0x15	; 21
    3468:	d1 07       	cpc	r29, r17
    346a:	c9 f7       	brne	.-14     	; 0x345e <__do_global_dtors+0x8>
    346c:	f8 94       	cli

0000346e <__stop_program>:
    346e:	ff cf       	rjmp	.-2      	; 0x346e <__stop_program>
