
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021c  00800100  000068a0  00006934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000068a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000425  0080031c  0080031c  00006b50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006b50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af8  00000000  00000000  00006bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002180d  00000000  00000000  000076b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042a1  00000000  00000000  00028ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000091ee  00000000  00000000  0002d166  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003a40  00000000  00000000  00036354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012950  00000000  00000000  00039d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000137a3  00000000  00000000  0004c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  0005fe87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000529f  00000000  00000000  0006088f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__dtors_end>
       4:	0c 94 0d 30 	jmp	0x601a	; 0x601a <__vector_1>
       8:	0c 94 34 30 	jmp	0x6068	; 0x6068 <__vector_2>
       c:	0c 94 86 2e 	jmp	0x5d0c	; 0x5d0c <__vector_3>
      10:	0c 94 86 2e 	jmp	0x5d0c	; 0x5d0c <__vector_3>
      14:	0c 94 86 2e 	jmp	0x5d0c	; 0x5d0c <__vector_3>
      18:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      1c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      20:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      24:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      28:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      2c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      30:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      34:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      38:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      3c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      40:	0c 94 af 21 	jmp	0x435e	; 0x435e <__vector_16>
      44:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      48:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__vector_18>
      4c:	0c 94 8e 1f 	jmp	0x3f1c	; 0x3f1c <__vector_19>
      50:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      54:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      58:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      5c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      60:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__vector_24>
      64:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
      68:	5e 17       	cp	r21, r30
      6a:	64 17       	cp	r22, r20
      6c:	64 17       	cp	r22, r20
      6e:	64 17       	cp	r22, r20
      70:	64 17       	cp	r22, r20
      72:	64 17       	cp	r22, r20
      74:	64 17       	cp	r22, r20
      76:	64 17       	cp	r22, r20
      78:	52 16       	cp	r5, r18
      7a:	64 17       	cp	r22, r20
      7c:	64 17       	cp	r22, r20
      7e:	64 17       	cp	r22, r20
      80:	64 17       	cp	r22, r20
      82:	64 17       	cp	r22, r20
      84:	64 17       	cp	r22, r20
      86:	64 17       	cp	r22, r20
      88:	52 16       	cp	r5, r18
      8a:	64 17       	cp	r22, r20
      8c:	64 17       	cp	r22, r20
      8e:	64 17       	cp	r22, r20
      90:	64 17       	cp	r22, r20
      92:	64 17       	cp	r22, r20
      94:	64 17       	cp	r22, r20
      96:	64 17       	cp	r22, r20
      98:	5c 16       	cp	r5, r28
      9a:	64 17       	cp	r22, r20
      9c:	64 17       	cp	r22, r20
      9e:	64 17       	cp	r22, r20
      a0:	64 17       	cp	r22, r20
      a2:	64 17       	cp	r22, r20
      a4:	64 17       	cp	r22, r20
      a6:	64 17       	cp	r22, r20
      a8:	88 16       	cp	r8, r24
      aa:	64 17       	cp	r22, r20
      ac:	64 17       	cp	r22, r20
      ae:	64 17       	cp	r22, r20
      b0:	64 17       	cp	r22, r20
      b2:	64 17       	cp	r22, r20
      b4:	64 17       	cp	r22, r20
      b6:	64 17       	cp	r22, r20
      b8:	5c 16       	cp	r5, r28
      ba:	64 17       	cp	r22, r20
      bc:	64 17       	cp	r22, r20
      be:	64 17       	cp	r22, r20
      c0:	64 17       	cp	r22, r20
      c2:	64 17       	cp	r22, r20
      c4:	64 17       	cp	r22, r20
      c6:	64 17       	cp	r22, r20
      c8:	8e 16       	cp	r8, r30
      ca:	64 17       	cp	r22, r20
      cc:	64 17       	cp	r22, r20
      ce:	64 17       	cp	r22, r20
      d0:	64 17       	cp	r22, r20
      d2:	64 17       	cp	r22, r20
      d4:	64 17       	cp	r22, r20
      d6:	64 17       	cp	r22, r20
      d8:	94 16       	cp	r9, r20
      da:	64 17       	cp	r22, r20
      dc:	64 17       	cp	r22, r20
      de:	64 17       	cp	r22, r20
      e0:	64 17       	cp	r22, r20
      e2:	64 17       	cp	r22, r20
      e4:	64 17       	cp	r22, r20
      e6:	64 17       	cp	r22, r20
      e8:	aa 16       	cp	r10, r26
      ea:	64 17       	cp	r22, r20
      ec:	64 17       	cp	r22, r20
      ee:	64 17       	cp	r22, r20
      f0:	64 17       	cp	r22, r20
      f2:	64 17       	cp	r22, r20
      f4:	64 17       	cp	r22, r20
      f6:	64 17       	cp	r22, r20
      f8:	da 16       	cp	r13, r26
      fa:	64 17       	cp	r22, r20
      fc:	64 17       	cp	r22, r20
      fe:	64 17       	cp	r22, r20
     100:	64 17       	cp	r22, r20
     102:	64 17       	cp	r22, r20
     104:	64 17       	cp	r22, r20
     106:	64 17       	cp	r22, r20
     108:	9a 16       	cp	r9, r26
     10a:	64 17       	cp	r22, r20
     10c:	64 17       	cp	r22, r20
     10e:	64 17       	cp	r22, r20
     110:	64 17       	cp	r22, r20
     112:	64 17       	cp	r22, r20
     114:	64 17       	cp	r22, r20
     116:	64 17       	cp	r22, r20
     118:	b8 16       	cp	r11, r24
     11a:	64 17       	cp	r22, r20
     11c:	64 17       	cp	r22, r20
     11e:	64 17       	cp	r22, r20
     120:	64 17       	cp	r22, r20
     122:	64 17       	cp	r22, r20
     124:	64 17       	cp	r22, r20
     126:	64 17       	cp	r22, r20
     128:	dd 16       	cp	r13, r29
     12a:	64 17       	cp	r22, r20
     12c:	64 17       	cp	r22, r20
     12e:	64 17       	cp	r22, r20
     130:	64 17       	cp	r22, r20
     132:	64 17       	cp	r22, r20
     134:	64 17       	cp	r22, r20
     136:	64 17       	cp	r22, r20
     138:	dd 16       	cp	r13, r29
     13a:	64 17       	cp	r22, r20
     13c:	64 17       	cp	r22, r20
     13e:	64 17       	cp	r22, r20
     140:	64 17       	cp	r22, r20
     142:	64 17       	cp	r22, r20
     144:	64 17       	cp	r22, r20
     146:	64 17       	cp	r22, r20
     148:	dd 16       	cp	r13, r29
     14a:	64 17       	cp	r22, r20
     14c:	64 17       	cp	r22, r20
     14e:	64 17       	cp	r22, r20
     150:	64 17       	cp	r22, r20
     152:	64 17       	cp	r22, r20
     154:	64 17       	cp	r22, r20
     156:	64 17       	cp	r22, r20
     158:	dd 16       	cp	r13, r29
     15a:	64 17       	cp	r22, r20
     15c:	64 17       	cp	r22, r20
     15e:	64 17       	cp	r22, r20
     160:	64 17       	cp	r22, r20
     162:	64 17       	cp	r22, r20
     164:	64 17       	cp	r22, r20
     166:	64 17       	cp	r22, r20
     168:	e6 16       	cp	r14, r22
     16a:	64 17       	cp	r22, r20
     16c:	64 17       	cp	r22, r20
     16e:	64 17       	cp	r22, r20
     170:	64 17       	cp	r22, r20
     172:	64 17       	cp	r22, r20
     174:	64 17       	cp	r22, r20
     176:	64 17       	cp	r22, r20
     178:	20 17       	cp	r18, r16
     17a:	64 17       	cp	r22, r20
     17c:	64 17       	cp	r22, r20
     17e:	64 17       	cp	r22, r20
     180:	64 17       	cp	r22, r20
     182:	64 17       	cp	r22, r20
     184:	64 17       	cp	r22, r20
     186:	64 17       	cp	r22, r20
     188:	e6 16       	cp	r14, r22
     18a:	64 17       	cp	r22, r20
     18c:	64 17       	cp	r22, r20
     18e:	64 17       	cp	r22, r20
     190:	64 17       	cp	r22, r20
     192:	64 17       	cp	r22, r20
     194:	64 17       	cp	r22, r20
     196:	64 17       	cp	r22, r20
     198:	20 17       	cp	r18, r16
     19a:	64 17       	cp	r22, r20
     19c:	64 17       	cp	r22, r20
     19e:	64 17       	cp	r22, r20
     1a0:	64 17       	cp	r22, r20
     1a2:	64 17       	cp	r22, r20
     1a4:	64 17       	cp	r22, r20
     1a6:	64 17       	cp	r22, r20
     1a8:	02 17       	cp	r16, r18
     1aa:	64 17       	cp	r22, r20
     1ac:	64 17       	cp	r22, r20
     1ae:	64 17       	cp	r22, r20
     1b0:	64 17       	cp	r22, r20
     1b2:	64 17       	cp	r22, r20
     1b4:	64 17       	cp	r22, r20
     1b6:	64 17       	cp	r22, r20
     1b8:	24 17       	cp	r18, r20
     1ba:	64 17       	cp	r22, r20
     1bc:	64 17       	cp	r22, r20
     1be:	64 17       	cp	r22, r20
     1c0:	64 17       	cp	r22, r20
     1c2:	64 17       	cp	r22, r20
     1c4:	64 17       	cp	r22, r20
     1c6:	64 17       	cp	r22, r20
     1c8:	24 17       	cp	r18, r20
     1ca:	64 17       	cp	r22, r20
     1cc:	64 17       	cp	r22, r20
     1ce:	64 17       	cp	r22, r20
     1d0:	64 17       	cp	r22, r20
     1d2:	64 17       	cp	r22, r20
     1d4:	64 17       	cp	r22, r20
     1d6:	64 17       	cp	r22, r20
     1d8:	3a 17       	cp	r19, r26
     1da:	64 17       	cp	r22, r20
     1dc:	64 17       	cp	r22, r20
     1de:	64 17       	cp	r22, r20
     1e0:	64 17       	cp	r22, r20
     1e2:	64 17       	cp	r22, r20
     1e4:	64 17       	cp	r22, r20
     1e6:	64 17       	cp	r22, r20
     1e8:	58 17       	cp	r21, r24
     1ea:	64 17       	cp	r22, r20
     1ec:	64 17       	cp	r22, r20
     1ee:	64 17       	cp	r22, r20
     1f0:	64 17       	cp	r22, r20
     1f2:	64 17       	cp	r22, r20
     1f4:	64 17       	cp	r22, r20
     1f6:	64 17       	cp	r22, r20
     1f8:	58 17       	cp	r21, r24
     1fa:	64 17       	cp	r22, r20
     1fc:	64 17       	cp	r22, r20
     1fe:	64 17       	cp	r22, r20
     200:	64 17       	cp	r22, r20
     202:	64 17       	cp	r22, r20
     204:	64 17       	cp	r22, r20
     206:	64 17       	cp	r22, r20
     208:	64 17       	cp	r22, r20
     20a:	64 17       	cp	r22, r20
     20c:	64 17       	cp	r22, r20
     20e:	64 17       	cp	r22, r20
     210:	64 17       	cp	r22, r20
     212:	64 17       	cp	r22, r20
     214:	64 17       	cp	r22, r20
     216:	64 17       	cp	r22, r20
     218:	64 17       	cp	r22, r20
     21a:	64 17       	cp	r22, r20
     21c:	64 17       	cp	r22, r20
     21e:	64 17       	cp	r22, r20
     220:	64 17       	cp	r22, r20
     222:	64 17       	cp	r22, r20
     224:	64 17       	cp	r22, r20
     226:	64 17       	cp	r22, r20
     228:	64 17       	cp	r22, r20
     22a:	64 17       	cp	r22, r20
     22c:	64 17       	cp	r22, r20
     22e:	64 17       	cp	r22, r20
     230:	64 17       	cp	r22, r20
     232:	64 17       	cp	r22, r20
     234:	64 17       	cp	r22, r20
     236:	64 17       	cp	r22, r20
     238:	64 17       	cp	r22, r20
     23a:	64 17       	cp	r22, r20
     23c:	64 17       	cp	r22, r20
     23e:	64 17       	cp	r22, r20
     240:	64 17       	cp	r22, r20
     242:	64 17       	cp	r22, r20
     244:	64 17       	cp	r22, r20
     246:	64 17       	cp	r22, r20
     248:	64 17       	cp	r22, r20
     24a:	64 17       	cp	r22, r20
     24c:	64 17       	cp	r22, r20
     24e:	64 17       	cp	r22, r20
     250:	64 17       	cp	r22, r20
     252:	64 17       	cp	r22, r20
     254:	64 17       	cp	r22, r20
     256:	64 17       	cp	r22, r20
     258:	63 17       	cp	r22, r19

0000025a <__trampolines_end>:
     25a:	74 65       	ori	r23, 0x54	; 84
     25c:	78 74       	andi	r23, 0x48	; 72
     25e:	2f 70       	andi	r18, 0x0F	; 15
     260:	6c 61       	ori	r22, 0x1C	; 28
     262:	69 6e       	ori	r22, 0xE9	; 233
	...

00000265 <_ZZN10GsmManager11sendViaGprsEPcE3__c_0>:
     265:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000270 <_ZZN10GsmManager11sendViaGprsEPcE3__c_1>:
	...

00000271 <_ZZN10GsmManager11sendViaGprsEPcE3__c_2>:
	...

00000272 <_ZZN10GsmManager11sendViaGprsEPcE3__c>:
     272:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000027d <_ZZ18ensureBatteryLevelvE3__c_0>:
     27d:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 52 65 74     BatteryLevel Ret
     28d:	72 69 65 76 65 64 00                                rieved.

00000294 <_ZZ18ensureBatteryLevelvE3__c>:
     294:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 46 61 69     BatteryLevel Fai
     2a4:	6c 65 64 00                                         led.

000002a8 <_ZZ16readSensorsAsyncvE3__c>:
     2a8:	52 65 61 64 69 6e 67 20 53 65 6e 73 6f 72 73 00     Reading Sensors.

000002b8 <_ZZ20execTransmitReadingsP14DailyCycleDataE3__c_1>:
     2b8:	53 4d 53 20 53 65 6e 64 20 46 61 69 6c 65 64 20     SMS Send Failed 
     2c8:	21 21 00                                            !!.

000002cb <_ZZ20execTransmitReadingsP14DailyCycleDataE3__c_0>:
     2cb:	53 65 6e 64 69 6e 67 20 53 65 6e 73 6f 72 73 20     Sending Sensors 
     2db:	43 6d 70 74 00                                      Cmpt.

000002e0 <_ZZ20execTransmitReadingsP14DailyCycleDataE3__c>:
     2e0:	47 50 52 53 20 46 61 69 6c 65 64 2d 54 72 79 69     GPRS Failed-Tryi
     2f0:	6e 67 20 53 4d 53 2e 2e 2e 00                       ng SMS....

000002fa <_ZZ9loopCyclevE3__c_2>:
     2fa:	46 72 65 65 4d 65 6d 6f 72 79 00                    FreeMemory.

00000305 <_ZZ9loopCyclevE3__c_1>:
     305:	49 6e 20 44 61 69 6c 79 20 43 79 63 6c 65 2e 2e     In Daily Cycle..
     315:	2e 00                                               ..

00000317 <_ZZ9loopCyclevE3__c_0>:
     317:	50 65 72 73 69 73 74 69 6e 67 20 73 65 6e 73 6f     Persisting senso
     327:	72 20 64 61 74 61 2e 2e 2e 00                       r data....

00000331 <_ZZ9loopCyclevE3__c>:
     331:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     341:	2e 2e 00                                            ...

00000344 <_ZZ8execLoopvE3__c>:
     344:	45 4e 44 20 43 59 43 4c 45 00                       END CYCLE.

0000034e <_ZZ5setupE3__c>:
     34e:	52 75 6e 6e 69 6e 67 00                             Running.

00000356 <digital_pin_to_timer_PGM>:
     356:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     366:	00 00 00 00                                         ....

0000036a <digital_pin_to_bit_mask_PGM>:
     36a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     37a:	04 08 10 20                                         ... 

0000037e <digital_pin_to_port_PGM>:
     37e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     38e:	03 03 03 03                                         ....

00000392 <port_to_input_PGM>:
     392:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000039c <port_to_output_PGM>:
     39c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003a6 <port_to_mode_PGM>:
     3a6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003b0 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     3b0:	09 3c 2d 2d 2d 20 00                                .<--- .

000003b7 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     3b7:	09 2d 2d 2d 3e 20 00                                .---> .

000003be <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     3be:	09 3c 2d 2d 2d 20 00                                .<--- .

000003c5 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     3c5:	09 2d 2d 2d 3e 20 00                                .---> .

000003cc <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     3cc:	09 3c 2d 2d 2d 20 00                                .<--- .

000003d3 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     3d3:	09 2d 2d 2d 3e 20 00                                .---> .

000003da <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     3da:	09 3c 2d 2d 2d 20 00                                .<--- .

000003e1 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     3e1:	09 2d 2d 2d 3e 20 00                                .---> .

000003e8 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     3e8:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000003f0 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     3f0:	53 50 41 43 45 00                                   SPACE.

000003f6 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     3f6:	09 3c 2d 2d 2d 20 00                                .<--- .

000003fd <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     3fd:	52 45 44 49 52 00                                   REDIR.

00000403 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     403:	55 52 4c 00                                         URL.

00000407 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     407:	55 41 00                                            UA.

0000040a <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     40a:	43 49 44 00                                         CID.

0000040e <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     40e:	4c 65 6e 3a 20 00                                   Len: .

00000414 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     414:	53 74 61 74 75 73 3a 20 00                          Status: .

0000041d <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     41d:	43 4f 4e 54 45 4e 54 00                             CONTENT.

00000425 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     425:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

00000431 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     431:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000043c <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     43c:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000448 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     448:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000455 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     455:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000462 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     462:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000471 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     471:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000047a <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     47a:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000487 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     487:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000494 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     494:	09 2d 2d 2d 3e 20 00                                .---> .

0000049b <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     49b:	22 2c 00                                            ",.

0000049e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     49e:	22 2c 22 00                                         ",".

000004a2 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     4a2:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004b0 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     4b0:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004be <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     4be:	09 2d 2d 2d 3e 20 00                                .---> .

000004c5 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     4c5:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

000004d1 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     4d1:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000004dd <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     4dd:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000004e8 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     4e8:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000004f5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     4f5:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000500 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     500:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000508 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     508:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000511 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     511:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

0000051e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     51e:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     52e:	44 22 2c 00                                         D",.

00000532 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     532:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     542:	45 52 22 2c 00                                      ER",.

00000547 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     547:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000551 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     551:	09 2d 2d 2d 3e 20 00                                .---> .

00000558 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     558:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000562 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     562:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     572:	4e 22 2c 00                                         N",.

00000576 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     576:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     586:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000594 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     594:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000059f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     59f:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000005aa <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     5aa:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005b2 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     5b2:	3e 20 00                                            > .

000005b5 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     5b5:	3e 20 00                                            > .

000005b8 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     5b8:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000005c2 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     5c2:	41 54 2b 43 53 51 00                                AT+CSQ.

000005c9 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     5c9:	2b 43 53 51 3a 20 00                                +CSQ: .

000005d0 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     5d0:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000005d9 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     5d9:	2b 43 52 45 47 3a 20 00                             +CREG: .

000005e1 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     5e1:	41 54 2b 43 42 43 00                                AT+CBC.

000005e8 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     5e8:	2b 43 42 43 3a 20 00                                +CBC: .

000005ef <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     5ef:	53 49 4d 38 30 30 48 00                             SIM800H.

000005f7 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     5f7:	09 3c 2d 2d 2d 20 00                                .<--- .

000005fe <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     5fe:	09 2d 2d 2d 3e 20 00                                .---> .

00000605 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     605:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000615 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     615:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000625 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     625:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

00000630 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     630:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

0000063b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     63b:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000646 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     646:	09 3c 2d 2d 2d 20 00                                .<--- .

0000064d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     64d:	09 2d 2d 2d 3e 20 00                                .---> .

00000654 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     654:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

0000065e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     65e:	41 54 45 30 00                                      ATE0.

00000663 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     663:	41 54 45 30 00                                      ATE0.

00000668 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     668:	41 54 00                                            AT.

0000066b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     66b:	41 54 00                                            AT.

0000066e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     66e:	41 54 00                                            AT.

00000671 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     671:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     681:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     691:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     6a1:	2e 00                                               ..

000006a3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     6a3:	41 54 00                                            AT.

000006a6 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     6a6:	41 54 00                                            AT.

000006a9 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     6a9:	41 54 00                                            AT.

000006ac <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     6ac:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     6bc:	61 62 6c 65 00                                      able.

000006c1 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     6c1:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     6d1:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000006e2 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     6e2:	4f 4b 00                                            OK.

000006e5 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     6e5:	46 4f 4e 41 00                                      FONA.

000006ea <_ZZN13Adafruit_FONAC4EaE3__c>:
     6ea:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000006f2 <__ctors_start>:
     6f2:	ba 13       	cpse	r27, r26
     6f4:	25 19       	sub	r18, r5
     6f6:	be 1f       	adc	r27, r30

000006f8 <__ctors_end>:
     6f8:	c1 13       	cpse	r28, r17

000006fa <__dtors_end>:
     6fa:	11 24       	eor	r1, r1
     6fc:	1f be       	out	0x3f, r1	; 63
     6fe:	cf ef       	ldi	r28, 0xFF	; 255
     700:	d8 e0       	ldi	r29, 0x08	; 8
     702:	de bf       	out	0x3e, r29	; 62
     704:	cd bf       	out	0x3d, r28	; 61

00000706 <__do_copy_data>:
     706:	13 e0       	ldi	r17, 0x03	; 3
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	b1 e0       	ldi	r27, 0x01	; 1
     70c:	e0 ea       	ldi	r30, 0xA0	; 160
     70e:	f8 e6       	ldi	r31, 0x68	; 104
     710:	02 c0       	rjmp	.+4      	; 0x716 <__do_copy_data+0x10>
     712:	05 90       	lpm	r0, Z+
     714:	0d 92       	st	X+, r0
     716:	ac 31       	cpi	r26, 0x1C	; 28
     718:	b1 07       	cpc	r27, r17
     71a:	d9 f7       	brne	.-10     	; 0x712 <__do_copy_data+0xc>

0000071c <__do_clear_bss>:
     71c:	27 e0       	ldi	r18, 0x07	; 7
     71e:	ac e1       	ldi	r26, 0x1C	; 28
     720:	b3 e0       	ldi	r27, 0x03	; 3
     722:	01 c0       	rjmp	.+2      	; 0x726 <.do_clear_bss_start>

00000724 <.do_clear_bss_loop>:
     724:	1d 92       	st	X+, r1

00000726 <.do_clear_bss_start>:
     726:	a1 34       	cpi	r26, 0x41	; 65
     728:	b2 07       	cpc	r27, r18
     72a:	e1 f7       	brne	.-8      	; 0x724 <.do_clear_bss_loop>

0000072c <__do_global_ctors>:
     72c:	13 e0       	ldi	r17, 0x03	; 3
     72e:	cc e7       	ldi	r28, 0x7C	; 124
     730:	d3 e0       	ldi	r29, 0x03	; 3
     732:	04 c0       	rjmp	.+8      	; 0x73c <__do_global_ctors+0x10>
     734:	21 97       	sbiw	r28, 0x01	; 1
     736:	fe 01       	movw	r30, r28
     738:	0e 94 c0 30 	call	0x6180	; 0x6180 <__tablejump2__>
     73c:	c9 37       	cpi	r28, 0x79	; 121
     73e:	d1 07       	cpc	r29, r17
     740:	c9 f7       	brne	.-14     	; 0x734 <__do_global_ctors+0x8>
     742:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <main>
     746:	0c 94 43 34 	jmp	0x6886	; 0x6886 <__do_global_dtors>

0000074a <__bad_interrupt>:
     74a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000074e <_ZN10GsmManagerC1Eh>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(uint8_t isMock)
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	16 2f       	mov	r17, r22
     758:	64 e0       	ldi	r22, 0x04	; 4
     75a:	05 96       	adiw	r24, 0x05	; 5
     75c:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN13Adafruit_FONAC1Ea>
{
	_isMock = isMock;
     760:	1c 83       	std	Y+4, r17	; 0x04
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     76a:	08 95       	ret

0000076c <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     76c:	fc 01       	movw	r30, r24
     76e:	11 82       	std	Z+1, r1	; 0x01
     770:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     772:	13 82       	std	Z+3, r1	; 0x03
     774:	12 82       	std	Z+2, r1	; 0x02
     776:	08 95       	ret

00000778 <_ZN10GsmManager5beginEv>:
	#endif
}

bool GsmManager::begin(){
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29

	if (_isMock)
     784:	fc 01       	movw	r30, r24
     786:	24 81       	ldd	r18, Z+4	; 0x04
     788:	21 11       	cpse	r18, r1
     78a:	22 c0       	rjmp	.+68     	; 0x7d0 <_ZN10GsmManager5beginEv+0x58>
     78c:	ec 01       	movw	r28, r24
		return true;

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     78e:	8f e1       	ldi	r24, 0x1F	; 31
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_Znwj>
     796:	8c 01       	movw	r16, r24
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	42 e0       	ldi	r20, 0x02	; 2
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <_ZN14SoftwareSerialC1Ehhb>
     7a2:	7e 01       	movw	r14, r28
     7a4:	f1 ee       	ldi	r31, 0xE1	; 225
     7a6:	ef 1a       	sub	r14, r31
     7a8:	fe ef       	ldi	r31, 0xFE	; 254
     7aa:	ff 0a       	sbc	r15, r31
     7ac:	f7 01       	movw	r30, r14
     7ae:	11 83       	std	Z+1, r17	; 0x01
     7b0:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     7b2:	40 ec       	ldi	r20, 0xC0	; 192
     7b4:	52 e1       	ldi	r21, 0x12	; 18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     7c0:	f7 01       	movw	r30, r14
     7c2:	60 81       	ld	r22, Z
     7c4:	71 81       	ldd	r23, Z+1	; 0x01
     7c6:	ce 01       	movw	r24, r28
     7c8:	05 96       	adiw	r24, 0x05	; 5
     7ca:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN13Adafruit_FONA5beginER6Stream>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <_ZN10GsmManager5beginEv+0x5a>
}

bool GsmManager::begin(){

	if (_isMock)
		return true;
     7d0:	81 e0       	ldi	r24, 0x01	; 1

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
	fonaSerial->begin(4800);
	return fona.begin(*fonaSerial);
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
	
	if (_isMock)
     7e0:	fc 01       	movw	r30, r24
     7e2:	24 81       	ldd	r18, Z+4	; 0x04
     7e4:	22 23       	and	r18, r18
     7e6:	39 f0       	breq	.+14     	; 0x7f6 <_ZN10GsmManager14getBattPercentEPj+0x16>
	{
		*vbat = 99;
     7e8:	83 e6       	ldi	r24, 0x63	; 99
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	fb 01       	movw	r30, r22
     7ee:	91 83       	std	Z+1, r25	; 0x01
     7f0:	80 83       	st	Z, r24
		return true;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	08 95       	ret
	}
	
	return fona.getBattPercent(vbat);
     7f6:	05 96       	adiw	r24, 0x05	; 5
     7f8:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     7fc:	08 95       	ret

000007fe <_ZN10GsmManager10sendViaSmsEPc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(char* data) {
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	65 97       	sbiw	r28, 0x15	; 21
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61

	if (_isMock)
     814:	dc 01       	movw	r26, r24
     816:	14 96       	adiw	r26, 0x04	; 4
     818:	1c 91       	ld	r17, X
     81a:	14 97       	sbiw	r26, 0x04	; 4
     81c:	11 23       	and	r17, r17
     81e:	31 f0       	breq	.+12     	; 0x82c <_ZN10GsmManager10sendViaSmsEPc+0x2e>
	{
		MOCK_DATA_SENT_SMS = data;
     820:	13 96       	adiw	r26, 0x03	; 3
     822:	7c 93       	st	X, r23
     824:	6e 93       	st	-X, r22
     826:	12 97       	sbiw	r26, 0x02	; 2
		return 1;
     828:	11 e0       	ldi	r17, 0x01	; 1
     82a:	1a c0       	rjmp	.+52     	; 0x860 <_ZN10GsmManager10sendViaSmsEPc+0x62>
     82c:	ab 01       	movw	r20, r22
	}

	char sendto[21]="+447968988149";
     82e:	2e e0       	ldi	r18, 0x0E	; 14
     830:	e6 e1       	ldi	r30, 0x16	; 22
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	de 01       	movw	r26, r28
     836:	11 96       	adiw	r26, 0x01	; 1
     838:	01 90       	ld	r0, Z+
     83a:	0d 92       	st	X+, r0
     83c:	2a 95       	dec	r18
     83e:	e1 f7       	brne	.-8      	; 0x838 <_ZN10GsmManager10sendViaSmsEPc+0x3a>
     840:	fe 01       	movw	r30, r28
     842:	3f 96       	adiw	r30, 0x0f	; 15
     844:	27 e0       	ldi	r18, 0x07	; 7
     846:	df 01       	movw	r26, r30
     848:	1d 92       	st	X+, r1
     84a:	2a 95       	dec	r18
     84c:	e9 f7       	brne	.-6      	; 0x848 <_ZN10GsmManager10sendViaSmsEPc+0x4a>
	if (!fona.sendSMS(sendto, data)) {
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	05 96       	adiw	r24, 0x05	; 5
     856:	0e 94 35 29 	call	0x526a	; 0x526a <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     85a:	81 11       	cpse	r24, r1
     85c:	01 c0       	rjmp	.+2      	; 0x860 <_ZN10GsmManager10sendViaSmsEPc+0x62>
		return 1;
     85e:	11 e0       	ldi	r17, 0x01	; 1
	} else {
		return 0;
	}
}
     860:	81 2f       	mov	r24, r17
     862:	65 96       	adiw	r28, 0x15	; 21
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	08 95       	ret

00000876 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
     876:	fc 01       	movw	r30, r24
     878:	24 81       	ldd	r18, Z+4	; 0x04
     87a:	21 11       	cpse	r18, r1
     87c:	04 c0       	rjmp	.+8      	; 0x886 <_ZN10GsmManager16getNetworkStatusEv+0x10>
		return 7; //magic
	else
		return fona.getNetworkStatus();
     87e:	05 96       	adiw	r24, 0x05	; 5
     880:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <_ZN13Adafruit_FONA16getNetworkStatusEv>
     884:	08 95       	ret
}

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
		return 7; //magic
     886:	87 e0       	ldi	r24, 0x07	; 7
	else
		return fona.getNetworkStatus();
}
     888:	08 95       	ret

0000088a <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
     88a:	fc 01       	movw	r30, r24
     88c:	24 81       	ldd	r18, Z+4	; 0x04
     88e:	21 11       	cpse	r18, r1
     890:	04 c0       	rjmp	.+8      	; 0x89a <_ZN10GsmManager7getRSSIEv+0x10>
		return 21; //magic
	else
		return fona.getRSSI();
     892:	05 96       	adiw	r24, 0x05	; 5
     894:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <_ZN13Adafruit_FONA7getRSSIEv>
     898:	08 95       	ret
}

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
		return 21; //magic
     89a:	85 e1       	ldi	r24, 0x15	; 21
	else
		return fona.getRSSI();
}
     89c:	08 95       	ret

0000089e <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
	return fona.enableGPRS(switchOn);
     89e:	05 96       	adiw	r24, 0x05	; 5
     8a0:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN13Adafruit_FONA10enableGPRSEb>
}
     8a4:	08 95       	ret

000008a6 <_ZN10GsmManager11sendViaGprsEPc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(char* data)
{
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <_ZN10GsmManager11sendViaGprsEPc+0x1a>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_ZN10GsmManager11sendViaGprsEPc+0x1c>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	if (_isMock)
     8c6:	fc 01       	movw	r30, r24
     8c8:	24 81       	ldd	r18, Z+4	; 0x04
     8ca:	22 23       	and	r18, r18
     8cc:	29 f0       	breq	.+10     	; 0x8d8 <_ZN10GsmManager11sendViaGprsEPc+0x32>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		MOCK_DATA_SENT_GPRS = data;
     8ce:	71 83       	std	Z+1, r23	; 0x01
     8d0:	60 83       	st	Z, r22
		return 0;
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	60 c0       	rjmp	.+192    	; 0x998 <__stack+0x99>
     8d8:	4b 01       	movw	r8, r22
	uint16_t statuscode;
	int16_t length;
	char* url="http://r.mkacars.org/do.php"; //TODO: should not require https?!
		                                                      
	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     8da:	fb 01       	movw	r30, r22
     8dc:	01 90       	ld	r0, Z+
     8de:	00 20       	and	r0, r0
     8e0:	e9 f7       	brne	.-6      	; 0x8dc <_ZN10GsmManager11sendViaGprsEPc+0x36>
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	8f 01       	movw	r16, r30
     8e6:	06 1b       	sub	r16, r22
     8e8:	17 0b       	sbc	r17, r23
     8ea:	5c 01       	movw	r10, r24
     8ec:	f5 e0       	ldi	r31, 0x05	; 5
     8ee:	af 0e       	add	r10, r31
     8f0:	b1 1c       	adc	r11, r1
     8f2:	ce 01       	movw	r24, r28
     8f4:	03 96       	adiw	r24, 0x03	; 3
     8f6:	6c 01       	movw	r12, r24
     8f8:	fe 01       	movw	r30, r28
     8fa:	31 96       	adiw	r30, 0x01	; 1
     8fc:	7f 01       	movw	r14, r30
     8fe:	9b 01       	movw	r18, r22
     900:	42 e7       	ldi	r20, 0x72	; 114
     902:	52 e0       	ldi	r21, 0x02	; 2
     904:	69 e0       	ldi	r22, 0x09	; 9
     906:	72 e0       	ldi	r23, 0x02	; 2
     908:	c5 01       	movw	r24, r10
     90a:	0e 94 90 2c 	call	0x5920	; 0x5920 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     90e:	81 11       	cpse	r24, r1
     910:	19 c0       	rjmp	.+50     	; 0x944 <__stack+0x45>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     912:	21 e7       	ldi	r18, 0x71	; 113
     914:	32 e0       	ldi	r19, 0x02	; 2
     916:	40 e7       	ldi	r20, 0x70	; 112
     918:	52 e0       	ldi	r21, 0x02	; 2
     91a:	65 e6       	ldi	r22, 0x65	; 101
     91c:	72 e0       	ldi	r23, 0x02	; 2
     91e:	c5 01       	movw	r24, r10
     920:	0e 94 43 24 	call	0x4886	; 0x4886 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     924:	f4 01       	movw	r30, r8
     926:	01 90       	ld	r0, Z+
     928:	00 20       	and	r0, r0
     92a:	e9 f7       	brne	.-6      	; 0x926 <__stack+0x27>
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	8f 01       	movw	r16, r30
     930:	08 19       	sub	r16, r8
     932:	19 09       	sbc	r17, r9
     934:	94 01       	movw	r18, r8
     936:	4a e5       	ldi	r20, 0x5A	; 90
     938:	52 e0       	ldi	r21, 0x02	; 2
     93a:	69 e0       	ldi	r22, 0x09	; 9
     93c:	72 e0       	ldi	r23, 0x02	; 2
     93e:	c5 01       	movw	r24, r10
     940:	0e 94 90 2c 	call	0x5920	; 0x5920 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
	}

	if (!succ)
     944:	88 23       	and	r24, r24
     946:	31 f1       	breq	.+76     	; 0x994 <__stack+0x95>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	18 16       	cp	r1, r24
     94e:	19 06       	cpc	r1, r25
     950:	b4 f4       	brge	.+44     	; 0x97e <__stack+0x7f>
			while (fona.available()) {
     952:	c5 01       	movw	r24, r10
     954:	0e 94 d5 23 	call	0x47aa	; 0x47aa <_ZN13Adafruit_FONA9availableEv>
     958:	89 2b       	or	r24, r25
     95a:	b1 f3       	breq	.-20     	; 0x948 <__stack+0x49>
				char c = fona.read();
     95c:	c5 01       	movw	r24, r10
     95e:	0e 94 ed 23 	call	0x47da	; 0x47da <_ZN13Adafruit_FONA4readEv>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     962:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     966:	95 ff       	sbrs	r25, 5
     968:	fc cf       	rjmp	.-8      	; 0x962 <__stack+0x63>
				UDR0 = c;
     96a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
					                                                      
				length--;
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	9c 83       	std	Y+4, r25	; 0x04
     976:	8b 83       	std	Y+3, r24	; 0x03
				if (! length) break;
     978:	89 2b       	or	r24, r25
     97a:	59 f7       	brne	.-42     	; 0x952 <__stack+0x53>
     97c:	e5 cf       	rjmp	.-54     	; 0x948 <__stack+0x49>
			}
		}
		fona.HTTP_POST_end();
     97e:	c5 01       	movw	r24, r10
     980:	0e 94 19 29 	call	0x5232	; 0x5232 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	88 3c       	cpi	r24, 0xC8	; 200
     98a:	91 05       	cpc	r25, r1
     98c:	29 f4       	brne	.+10     	; 0x998 <__stack+0x99>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
	}

	if (!succ)
	{
		ret = 999;
     994:	87 ee       	ldi	r24, 0xE7	; 231
     996:	93 e0       	ldi	r25, 0x03	; 3
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
	}
	                                                      
	return ret;
}
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	08 95       	ret

000009ba <_Z16getNumOfPadCharsjh>:

uint8_t getNumOfPadChars(unsigned int value, uint8_t padLength)
{
	uint8_t padChars = 0;
	
	if (value <10)
     9ba:	8a 30       	cpi	r24, 0x0A	; 10
     9bc:	91 05       	cpc	r25, r1
     9be:	38 f4       	brcc	.+14     	; 0x9ce <_Z16getNumOfPadCharsjh+0x14>
		padChars = max(0, padLength-1);
     9c0:	86 2f       	mov	r24, r22
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	42 f5       	brpl	.+80     	; 0xa18 <_Z16getNumOfPadCharsjh+0x5e>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	08 95       	ret
	else if (value < 100)
     9ce:	84 36       	cpi	r24, 0x64	; 100
     9d0:	91 05       	cpc	r25, r1
     9d2:	38 f4       	brcc	.+14     	; 0x9e2 <_Z16getNumOfPadCharsjh+0x28>
		padChars = max(0, padLength-2);
     9d4:	86 2f       	mov	r24, r22
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	02 97       	sbiw	r24, 0x02	; 2
     9da:	f2 f4       	brpl	.+60     	; 0xa18 <_Z16getNumOfPadCharsjh+0x5e>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	08 95       	ret
	else if (value < 1000)
     9e2:	88 3e       	cpi	r24, 0xE8	; 232
     9e4:	23 e0       	ldi	r18, 0x03	; 3
     9e6:	92 07       	cpc	r25, r18
     9e8:	38 f4       	brcc	.+14     	; 0x9f8 <_Z16getNumOfPadCharsjh+0x3e>
		padChars = max(0, padLength-3);
     9ea:	86 2f       	mov	r24, r22
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	03 97       	sbiw	r24, 0x03	; 3
     9f0:	9a f4       	brpl	.+38     	; 0xa18 <_Z16getNumOfPadCharsjh+0x5e>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	08 95       	ret
	else if (value < 10000)
     9f8:	80 31       	cpi	r24, 0x10	; 16
     9fa:	97 42       	sbci	r25, 0x27	; 39
     9fc:	38 f4       	brcc	.+14     	; 0xa0c <_Z16getNumOfPadCharsjh+0x52>
		padChars = max(0, padLength-4);
     9fe:	86 2f       	mov	r24, r22
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	04 97       	sbiw	r24, 0x04	; 4
     a04:	4a f4       	brpl	.+18     	; 0xa18 <_Z16getNumOfPadCharsjh+0x5e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	08 95       	ret
	else
		padChars = max(0, padLength-5);
     a0c:	86 2f       	mov	r24, r22
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	05 97       	sbiw	r24, 0x05	; 5
     a12:	12 f4       	brpl	.+4      	; 0xa18 <_Z16getNumOfPadCharsjh+0x5e>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0

	return padChars;	
}
     a18:	08 95       	ret

00000a1a <_Z16writeCharWithPadPcch>:


byte writeCharWithPad(char* buffer, const char value, byte padLength)
{
     a1a:	fc 01       	movw	r30, r24
	byte padChars = max(0, padLength-1);
     a1c:	84 2f       	mov	r24, r20
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	12 f4       	brpl	.+4      	; 0xa28 <_Z16writeCharWithPadPcch+0xe>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	98 17       	cp	r25, r24
     a2c:	28 f4       	brcc	.+10     	; 0xa38 <_Z16writeCharWithPadPcch+0x1e>
		*(buffer++) = '0';
     a2e:	20 e3       	ldi	r18, 0x30	; 48
     a30:	20 83       	st	Z, r18
byte writeCharWithPad(char* buffer, const char value, byte padLength)
{
	byte padChars = max(0, padLength-1);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a32:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = '0';
     a34:	31 96       	adiw	r30, 0x01	; 1
byte writeCharWithPad(char* buffer, const char value, byte padLength)
{
	byte padChars = max(0, padLength-1);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a36:	f9 cf       	rjmp	.-14     	; 0xa2a <_Z16writeCharWithPadPcch+0x10>
		*(buffer++) = '0';
	
	*(buffer++) = value;
     a38:	60 83       	st	Z, r22

	return padChars + 1;
}
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	08 95       	ret

00000a3e <_Z19writeCharArrWithPadPcPKch>:



byte writeCharArrWithPad(char* buffer, const char* value, byte padLength)
{
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	fc 01       	movw	r30, r24
	byte valLen = strlen(value);
     a44:	eb 01       	movw	r28, r22
     a46:	09 90       	ld	r0, Y+
     a48:	00 20       	and	r0, r0
     a4a:	e9 f7       	brne	.-6      	; 0xa46 <_Z19writeCharArrWithPadPcPKch+0x8>
     a4c:	21 97       	sbiw	r28, 0x01	; 1
     a4e:	c6 1b       	sub	r28, r22
     a50:	d7 0b       	sbc	r29, r23
     a52:	8c 2f       	mov	r24, r28
	byte padChars = max(0, padLength-valLen);
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	4c 1b       	sub	r20, r28
     a58:	51 09       	sbc	r21, r1
     a5a:	12 f4       	brpl	.+4      	; 0xa60 <_Z19writeCharArrWithPadPcPKch+0x22>
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	94 17       	cp	r25, r20
     a64:	28 f4       	brcc	.+10     	; 0xa70 <_Z19writeCharArrWithPadPcPKch+0x32>
		*(buffer++) = '0';
     a66:	20 e3       	ldi	r18, 0x30	; 48
     a68:	20 83       	st	Z, r18
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a6a:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = '0';
     a6c:	31 96       	adiw	r30, 0x01	; 1
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a6e:	f9 cf       	rjmp	.-14     	; 0xa62 <_Z19writeCharArrWithPadPcPKch+0x24>
     a70:	90 e0       	ldi	r25, 0x00	; 0
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a72:	98 17       	cp	r25, r24
     a74:	40 f4       	brcc	.+16     	; 0xa86 <_Z19writeCharArrWithPadPcPKch+0x48>
		*(buffer++) = *(value+i);
     a76:	db 01       	movw	r26, r22
     a78:	a9 0f       	add	r26, r25
     a7a:	b1 1d       	adc	r27, r1
     a7c:	2c 91       	ld	r18, X
     a7e:	20 83       	st	Z, r18
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a80:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = *(value+i);
     a82:	31 96       	adiw	r30, 0x01	; 1
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a84:	f6 cf       	rjmp	.-20     	; 0xa72 <_Z19writeCharArrWithPadPcPKch+0x34>
		*(buffer++) = *(value+i);

	return padChars + valLen;
}
     a86:	8c 2f       	mov	r24, r28
     a88:	84 0f       	add	r24, r20
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <_Z16writeByteWithPadPchh>:
	//
	//return writeCharArrWithPad(buffer, strRaw, padLength);
//}

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
	byte padChars =getNumOfPadChars(value, padLength);
     a9c:	e6 2e       	mov	r14, r22
     a9e:	f1 2c       	mov	r15, r1
     aa0:	64 2f       	mov	r22, r20
     aa2:	c7 01       	movw	r24, r14
     aa4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_Z16getNumOfPadCharsjh>
     aa8:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	81 17       	cp	r24, r17
     aae:	28 f4       	brcc	.+10     	; 0xaba <_Z16writeByteWithPadPchh+0x2a>
		*(buffer++) = '0';
     ab0:	90 e3       	ldi	r25, 0x30	; 48
     ab2:	98 83       	st	Y, r25

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     ab6:	21 96       	adiw	r28, 0x01	; 1

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     ab8:	f9 cf       	rjmp	.-14     	; 0xaac <_Z16writeByteWithPadPchh+0x1c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     aba:	4a e0       	ldi	r20, 0x0A	; 10
     abc:	be 01       	movw	r22, r28
     abe:	c7 01       	movw	r24, r14
     ac0:	0e 94 cc 33 	call	0x6798	; 0x6798 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     ac6:	fe 01       	movw	r30, r28
     ac8:	e8 0f       	add	r30, r24
     aca:	f1 1d       	adc	r31, r1
     acc:	90 81       	ld	r25, Z
     ace:	99 23       	and	r25, r25
     ad0:	11 f0       	breq	.+4      	; 0xad6 <_Z16writeByteWithPadPchh+0x46>
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	f8 cf       	rjmp	.-16     	; 0xac6 <_Z16writeByteWithPadPchh+0x36>
	
	return padChars + offset;	
}
     ad6:	81 0f       	add	r24, r17
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <_Z12writeWithPadPcjh>:

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
     af0:	7b 01       	movw	r14, r22
	byte padChars =getNumOfPadChars(value, padLength);
     af2:	64 2f       	mov	r22, r20
     af4:	c7 01       	movw	r24, r14
     af6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_Z16getNumOfPadCharsjh>
     afa:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	81 17       	cp	r24, r17
     b00:	28 f4       	brcc	.+10     	; 0xb0c <_Z12writeWithPadPcjh+0x28>
		*(buffer++) = '0';
     b02:	90 e3       	ldi	r25, 0x30	; 48
     b04:	98 83       	st	Y, r25

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     b06:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     b08:	21 96       	adiw	r28, 0x01	; 1

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     b0a:	f9 cf       	rjmp	.-14     	; 0xafe <_Z12writeWithPadPcjh+0x1a>
     b0c:	4a e0       	ldi	r20, 0x0A	; 10
     b0e:	be 01       	movw	r22, r28
     b10:	c7 01       	movw	r24, r14
     b12:	0e 94 cc 33 	call	0x6798	; 0x6798 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     b16:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     b18:	fe 01       	movw	r30, r28
     b1a:	e8 0f       	add	r30, r24
     b1c:	f1 1d       	adc	r31, r1
     b1e:	90 81       	ld	r25, Z
     b20:	99 23       	and	r25, r25
     b22:	11 f0       	breq	.+4      	; 0xb28 <_Z12writeWithPadPcjh+0x44>
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	f8 cf       	rjmp	.-16     	; 0xb18 <_Z12writeWithPadPcjh+0x34>
	
	return padChars + offset;
}
     b28:	81 0f       	add	r24, r17
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	08 95       	ret

00000b36 <_ZN12RmMemManagerC1Eb>:
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock){
	_isMock = isMock;
     b36:	fc 01       	movw	r30, r24
     b38:	60 83       	st	Z, r22
     b3a:	08 95       	ret

00000b3c <_ZN12RmMemManager17getLongFromMemoryEj>:
	toggleLED(Bottom, All_Clear);
	toggleLED(Top, All_Clear);
}

unsigned long RmMemManager::getLongFromMemory(unsigned int address)
{
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <_ZN12RmMemManager17getLongFromMemoryEj+0x10>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <_ZN12RmMemManager17getLongFromMemoryEj+0x12>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	8b 01       	movw	r16, r22

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     b54:	cb 01       	movw	r24, r22
     b56:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
     b5a:	d8 2e       	mov	r13, r24
     b5c:	c8 01       	movw	r24, r16
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
     b64:	e8 2e       	mov	r14, r24
     b66:	c8 01       	movw	r24, r16
     b68:	02 96       	adiw	r24, 0x02	; 2
     b6a:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
     b6e:	f8 2e       	mov	r15, r24
     b70:	c8 01       	movw	r24, r16
     b72:	03 96       	adiw	r24, 0x03	; 3
     b74:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
	byte b4 = EEPROM.read(address+3);
	
	//Interpret it exactly as it's stored in memory
	byte bArr[] = {b1,b2,b3,b4};
	
	volatile unsigned long derefValue = *(unsigned long*)(&bArr);
     b78:	4d 2d       	mov	r20, r13
     b7a:	5e 2d       	mov	r21, r14
     b7c:	6f 2d       	mov	r22, r15
     b7e:	78 2f       	mov	r23, r24
     b80:	49 83       	std	Y+1, r20	; 0x01
     b82:	5a 83       	std	Y+2, r21	; 0x02
     b84:	6b 83       	std	Y+3, r22	; 0x03
     b86:	7c 83       	std	Y+4, r23	; 0x04
	
	return derefValue;	
     b88:	69 81       	ldd	r22, Y+1	; 0x01
     b8a:	7a 81       	ldd	r23, Y+2	; 0x02
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	08 95       	ret

00000ba8 <_Z17getUIntFromMemoryj>:

unsigned int /*RmMemManager::*/getUIntFromMemory(unsigned int address)
{
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <_Z17getUIntFromMemoryj+0xc>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	8c 01       	movw	r16, r24
     bba:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
     bbe:	f8 2e       	mov	r15, r24
     bc0:	c8 01       	movw	r24, r16
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
	byte b2 = EEPROM.read(address+1);
		
	//Interpret it exactly as it's stored in memory
	byte bArr[] = {b1,b2};
		
	volatile unsigned int derefValue = *(unsigned int*)(&bArr);
     bc8:	2f 2d       	mov	r18, r15
     bca:	38 2f       	mov	r19, r24
     bcc:	3a 83       	std	Y+2, r19	; 0x02
     bce:	29 83       	std	Y+1, r18	; 0x01
		
	return derefValue;
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	08 95       	ret

00000be4 <_ZN12RmMemManager15setLongToMemoryEjm>:

void RmMemManager::setLongToMemory(unsigned int address, unsigned long value)
{
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	28 97       	sbiw	r28, 0x08	; 8
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	8b 01       	movw	r16, r22
     bfe:	2d 83       	std	Y+5, r18	; 0x05
     c00:	3e 83       	std	Y+6, r19	; 0x06
     c02:	4f 83       	std	Y+7, r20	; 0x07
     c04:	58 87       	std	Y+8, r21	; 0x08
	//Interpret the bytes as they're stored in memory, little or big endian, we don't care
	volatile byte byte1 = * ((byte*)&value); //LSB
     c06:	29 83       	std	Y+1, r18	; 0x01
	volatile byte byte2 = * (((byte*)&value)+1); //MSB
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	8a 83       	std	Y+2, r24	; 0x02
	volatile byte byte3 = * (((byte*)&value)+2); //MSB
     c0c:	8f 81       	ldd	r24, Y+7	; 0x07
     c0e:	8b 83       	std	Y+3, r24	; 0x03
	volatile byte byte4 = * (((byte*)&value)+3); //MSB
     c10:	88 85       	ldd	r24, Y+8	; 0x08
     c12:	8c 83       	std	Y+4, r24	; 0x04
	
	EEPROM.write(address,   byte1);
     c14:	69 81       	ldd	r22, Y+1	; 0x01
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     c16:	c8 01       	movw	r24, r16
     c18:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>
	EEPROM.write(address+1, byte2);
     c1c:	6a 81       	ldd	r22, Y+2	; 0x02
     c1e:	c8 01       	movw	r24, r16
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>
	EEPROM.write(address+2, byte3);
     c26:	6b 81       	ldd	r22, Y+3	; 0x03
     c28:	c8 01       	movw	r24, r16
     c2a:	02 96       	adiw	r24, 0x02	; 2
     c2c:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>
	EEPROM.write(address+3, byte4);
     c30:	6c 81       	ldd	r22, Y+4	; 0x04
     c32:	c8 01       	movw	r24, r16
     c34:	03 96       	adiw	r24, 0x03	; 3
     c36:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>
}
     c3a:	28 96       	adiw	r28, 0x08	; 8
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <_Z15setUIntToMemoryjj>:

void /* RmMemManager::*/setUIntToMemory(unsigned int address, unsigned int value)
{
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <_Z15setUIntToMemoryjj+0xa>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <_Z15setUIntToMemoryjj+0xc>
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	8c 01       	movw	r16, r24
     c62:	7c 83       	std	Y+4, r23	; 0x04
     c64:	6b 83       	std	Y+3, r22	; 0x03
	//Interpret the bytes as they're stored in memory, little or big endian, we don't care
	volatile byte byte1 = * ((byte*)&value); //LSB
     c66:	69 83       	std	Y+1, r22	; 0x01
	volatile byte byte2 = * (((byte*)&value)+1); //MSB
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	8a 83       	std	Y+2, r24	; 0x02
	
	EEPROM.write(address,   byte1);
     c6c:	69 81       	ldd	r22, Y+1	; 0x01
     c6e:	c8 01       	movw	r24, r16
     c70:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>
	EEPROM.write(address+1, byte2);
     c74:	6a 81       	ldd	r22, Y+2	; 0x02
     c76:	c8 01       	movw	r24, r16
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	69 97       	sbiw	r28, 0x19	; 25
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	5c 01       	movw	r10, r24
     cb6:	7b 01       	movw	r14, r22
     cb8:	8a 01       	movw	r16, r20
     cba:	69 01       	movw	r12, r18
	uint8_t readingSz = sizeof(SensorData);
	
	//TODO: This only takes the last few, change to average/compress?
	
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     cbc:	64 e6       	ldi	r22, 0x64	; 100
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN12RmMemManager17getLongFromMemoryEj>
     cc4:	69 83       	std	Y+1, r22	; 0x01
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	9c 83       	std	Y+4, r25	; 0x04
	volatile unsigned long alreadySentTo = getLongFromMemory(MEMLOC_SENT_UPTO);
     ccc:	6c e0       	ldi	r22, 0x0C	; 12
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	c5 01       	movw	r24, r10
     cd2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN12RmMemManager17getLongFromMemoryEj>
     cd6:	6d 83       	std	Y+5, r22	; 0x05
     cd8:	7e 83       	std	Y+6, r23	; 0x06
     cda:	8f 83       	std	Y+7, r24	; 0x07
     cdc:	98 87       	std	Y+8, r25	; 0x08
	
	//We need the last {<maxNoOfReadings}. This may mean we skip from {alreadySentTo-x} onwards.
	volatile unsigned long numOfLastReadings = min(entryCount-alreadySentTo, maxNoOfReadings); //Take last n readings
     cde:	49 81       	ldd	r20, Y+1	; 0x01
     ce0:	5a 81       	ldd	r21, Y+2	; 0x02
     ce2:	6b 81       	ldd	r22, Y+3	; 0x03
     ce4:	7c 81       	ldd	r23, Y+4	; 0x04
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	af 81       	ldd	r26, Y+7	; 0x07
     cec:	b8 85       	ldd	r27, Y+8	; 0x08
     cee:	48 1b       	sub	r20, r24
     cf0:	59 0b       	sbc	r21, r25
     cf2:	6a 0b       	sbc	r22, r26
     cf4:	7b 0b       	sbc	r23, r27
     cf6:	c8 01       	movw	r24, r16
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	48 17       	cp	r20, r24
     cfe:	59 07       	cpc	r21, r25
     d00:	6a 07       	cpc	r22, r26
     d02:	7b 07       	cpc	r23, r27
     d04:	60 f4       	brcc	.+24     	; 0xd1e <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x8e>
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	ab 81       	ldd	r26, Y+3	; 0x03
     d0c:	bc 81       	ldd	r27, Y+4	; 0x04
     d0e:	4d 81       	ldd	r20, Y+5	; 0x05
     d10:	5e 81       	ldd	r21, Y+6	; 0x06
     d12:	6f 81       	ldd	r22, Y+7	; 0x07
     d14:	78 85       	ldd	r23, Y+8	; 0x08
     d16:	84 1b       	sub	r24, r20
     d18:	95 0b       	sbc	r25, r21
     d1a:	a6 0b       	sbc	r26, r22
     d1c:	b7 0b       	sbc	r27, r23
     d1e:	89 87       	std	Y+9, r24	; 0x09
     d20:	9a 87       	std	Y+10, r25	; 0x0a
     d22:	ab 87       	std	Y+11, r26	; 0x0b
     d24:	bc 87       	std	Y+12, r27	; 0x0c
	if (numOfLastReadings == 0)
     d26:	69 85       	ldd	r22, Y+9	; 0x09
     d28:	7a 85       	ldd	r23, Y+10	; 0x0a
     d2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2e:	61 15       	cp	r22, r1
     d30:	71 05       	cpc	r23, r1
     d32:	81 05       	cpc	r24, r1
     d34:	91 05       	cpc	r25, r1
     d36:	51 f4       	brne	.+20     	; 0xd4c <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xbc>
	{
		*loadedUpTo = alreadySentTo; /* Nothing more */
     d38:	0d 81       	ldd	r16, Y+5	; 0x05
     d3a:	1e 81       	ldd	r17, Y+6	; 0x06
     d3c:	2f 81       	ldd	r18, Y+7	; 0x07
     d3e:	38 85       	ldd	r19, Y+8	; 0x08
     d40:	f6 01       	movw	r30, r12
     d42:	00 83       	st	Z, r16
     d44:	11 83       	std	Z+1, r17	; 0x01
     d46:	22 83       	std	Z+2, r18	; 0x02
     d48:	33 83       	std	Z+3, r19	; 0x03
		return 0UL; //Nothing to send
     d4a:	69 c0       	rjmp	.+210    	; 0xe1e <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x18e>
	}
	
	//Get read idx => 2 readings if 10 entry count => @ idx 8 offset
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	49 85       	ldd	r20, Y+9	; 0x09
     d56:	5a 85       	ldd	r21, Y+10	; 0x0a
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	84 1b       	sub	r24, r20
     d5e:	95 0b       	sbc	r25, r21
     d60:	a6 0b       	sbc	r26, r22
     d62:	b7 0b       	sbc	r27, r23
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	9e 87       	std	Y+14, r25	; 0x0e
     d72:	8d 87       	std	Y+13, r24	; 0x0d
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	88 59       	subi	r24, 0x98	; 152
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	98 8b       	std	Y+16, r25	; 0x10
     d7e:	8f 87       	std	Y+15, r24	; 0x0f

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     d80:	18 8e       	std	Y+24, r1	; 0x18
     d82:	1f 8a       	std	Y+23, r1	; 0x17
     d84:	8f 89       	ldd	r24, Y+23	; 0x17
     d86:	98 8d       	ldd	r25, Y+24	; 0x18
     d88:	09 2e       	mov	r0, r25
     d8a:	00 0c       	add	r0, r0
     d8c:	aa 0b       	sbc	r26, r26
     d8e:	bb 0b       	sbc	r27, r27
     d90:	49 85       	ldd	r20, Y+9	; 0x09
     d92:	5a 85       	ldd	r21, Y+10	; 0x0a
     d94:	6b 85       	ldd	r22, Y+11	; 0x0b
     d96:	7c 85       	ldd	r23, Y+12	; 0x0c
     d98:	84 17       	cp	r24, r20
     d9a:	95 07       	cpc	r25, r21
     d9c:	a6 07       	cpc	r26, r22
     d9e:	b7 07       	cpc	r27, r23
     da0:	88 f5       	brcc	.+98     	; 0xe04 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x174>
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     da2:	1e 8a       	std	Y+22, r1	; 0x16
     da4:	1d 8a       	std	Y+21, r1	; 0x15
     da6:	8d 89       	ldd	r24, Y+21	; 0x15
     da8:	9e 89       	ldd	r25, Y+22	; 0x16
     daa:	08 97       	sbiw	r24, 0x08	; 8
     dac:	2c f5       	brge	.+74     	; 0xdf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x168>
		{
			unsigned int currBufferOffset = (readingNo*readingSz)+byteIdx;//curr buffer offset
     dae:	0f 89       	ldd	r16, Y+23	; 0x17
     db0:	18 8d       	ldd	r17, Y+24	; 0x18
     db2:	00 0f       	add	r16, r16
     db4:	11 1f       	adc	r17, r17
     db6:	00 0f       	add	r16, r16
     db8:	11 1f       	adc	r17, r17
     dba:	00 0f       	add	r16, r16
     dbc:	11 1f       	adc	r17, r17
     dbe:	8d 89       	ldd	r24, Y+21	; 0x15
     dc0:	9e 89       	ldd	r25, Y+22	; 0x16
     dc2:	08 0f       	add	r16, r24
     dc4:	19 1f       	adc	r17, r25
			unsigned int currReadAddress = startReadAddress + currBufferOffset;
     dc6:	af 84       	ldd	r10, Y+15	; 0x0f
     dc8:	b8 88       	ldd	r11, Y+16	; 0x10
     dca:	a0 0e       	add	r10, r16
     dcc:	b1 1e       	adc	r11, r17
			unsigned volatile int stopme=currBufferOffset;
     dce:	1c 8b       	std	Y+20, r17	; 0x14
     dd0:	0b 8b       	std	Y+19, r16	; 0x13
			unsigned volatile int stopme2=currReadAddress;
     dd2:	ba 8a       	std	Y+18, r11	; 0x12
     dd4:	a9 8a       	std	Y+17, r10	; 0x11

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     dd6:	c5 01       	movw	r24, r10
     dd8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
			volatile byte stopx = (byte)EEPROM.read(currReadAddress);
     ddc:	89 8f       	std	Y+25, r24	; 0x19
			*(rPtr+currBufferOffset) = EEPROM.read(currReadAddress);
     dde:	0e 0d       	add	r16, r14
     de0:	1f 1d       	adc	r17, r15
     de2:	c5 01       	movw	r24, r10
     de4:	0e 94 f6 33 	call	0x67ec	; 0x67ec <eeprom_read_byte>
     de8:	f8 01       	movw	r30, r16
     dea:	80 83       	st	Z, r24
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     dec:	8d 89       	ldd	r24, Y+21	; 0x15
     dee:	9e 89       	ldd	r25, Y+22	; 0x16
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	8d 8b       	std	Y+21, r24	; 0x15
     df6:	d7 cf       	rjmp	.-82     	; 0xda6 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x116>
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     df8:	8f 89       	ldd	r24, Y+23	; 0x17
     dfa:	98 8d       	ldd	r25, Y+24	; 0x18
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	98 8f       	std	Y+24, r25	; 0x18
     e00:	8f 8b       	std	Y+23, r24	; 0x17
     e02:	c0 cf       	rjmp	.-128    	; 0xd84 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xf4>
		}
	
	
	
	
	*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	ab 81       	ldd	r26, Y+3	; 0x03
     e0a:	bc 81       	ldd	r27, Y+4	; 0x04
     e0c:	f6 01       	movw	r30, r12
     e0e:	80 83       	st	Z, r24
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	a2 83       	std	Z+2, r26	; 0x02
     e14:	b3 83       	std	Z+3, r27	; 0x03
	return numOfLastReadings;
     e16:	69 85       	ldd	r22, Y+9	; 0x09
     e18:	7a 85       	ldd	r23, Y+10	; 0x0a
     e1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e1c:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     e1e:	69 96       	adiw	r28, 0x19	; 25
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
     e3a:	bf 90       	pop	r11
     e3c:	af 90       	pop	r10
     e3e:	08 95       	ret

00000e40 <_ZN12RmMemManager12markDataSentEm>:

void RmMemManager::markDataSent(unsigned long sentUpTo)
{
	setLongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
     e40:	9a 01       	movw	r18, r20
     e42:	ab 01       	movw	r20, r22
     e44:	6c e0       	ldi	r22, 0x0C	; 12
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>
     e4c:	08 95       	ret

00000e4e <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
}

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
     e4e:	08 95       	ret

00000e50 <_Z27internalWriteEntryAtAddressP10SensorDatam>:
	//TODO
}

void internalWriteEntryAtAddress(SensorData* r, unsigned long address){
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	8c 01       	movw	r16, r24
     e62:	6a 01       	movw	r12, r20
     e64:	7b 01       	movw	r14, r22
	
	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     e66:	c0 e0       	ldi	r28, 0x00	; 0
     e68:	d0 e0       	ldi	r29, 0x00	; 0
     e6a:	c8 30       	cpi	r28, 0x08	; 8
     e6c:	d1 05       	cpc	r29, r1
     e6e:	58 f4       	brcc	.+22     	; 0xe86 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x36>
		EEPROM.write(address+i, *(rPtr+i));
     e70:	f8 01       	movw	r30, r16
     e72:	ec 0f       	add	r30, r28
     e74:	fd 1f       	adc	r31, r29
     e76:	60 81       	ld	r22, Z
     e78:	ce 01       	movw	r24, r28
     e7a:	8c 0d       	add	r24, r12
     e7c:	9d 1d       	adc	r25, r13
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     e7e:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_write_byte>

void internalWriteEntryAtAddress(SensorData* r, unsigned long address){
	
	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     e82:	21 96       	adiw	r28, 0x01	; 1
     e84:	f2 cf       	rjmp	.-28     	; 0xe6a <_Z27internalWriteEntryAtAddressP10SensorDatam+0x1a>
		EEPROM.write(address+i, *(rPtr+i));
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	08 95       	ret

00000e98 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>:

void RmMemManager::replaceLastSensorEntry(SensorData* r)
{
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	2c 97       	sbiw	r28, 0x0c	; 12
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	8b 01       	movw	r16, r22
	//Read where last entry is
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     eb2:	64 e6       	ldi	r22, 0x64	; 100
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN12RmMemManager17getLongFromMemoryEj>
     eba:	69 83       	std	Y+1, r22	; 0x01
     ebc:	7a 83       	std	Y+2, r23	; 0x02
     ebe:	8b 83       	std	Y+3, r24	; 0x03
     ec0:	9c 83       	std	Y+4, r25	; 0x04
	volatile unsigned long lastEntryOffset = max(0,entryCount-1) * sizeof(SensorData);
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	ab 81       	ldd	r26, Y+3	; 0x03
     ec8:	bc 81       	ldd	r27, Y+4	; 0x04
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	a1 09       	sbc	r26, r1
     ed6:	b1 09       	sbc	r27, r1
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	aa 1f       	adc	r26, r26
     ede:	bb 1f       	adc	r27, r27
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	aa 1f       	adc	r26, r26
     ee6:	bb 1f       	adc	r27, r27
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	bb 1f       	adc	r27, r27
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	af 83       	std	Y+7, r26	; 0x07
     ef6:	b8 87       	std	Y+8, r27	; 0x08
	volatile unsigned long lastEntryAddress = MEMADDR_READING_DATA_START + lastEntryOffset;
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	af 81       	ldd	r26, Y+7	; 0x07
     efe:	b8 85       	ldd	r27, Y+8	; 0x08
     f00:	88 59       	subi	r24, 0x98	; 152
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	af 4f       	sbci	r26, 0xFF	; 255
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	89 87       	std	Y+9, r24	; 0x09
     f0a:	9a 87       	std	Y+10, r25	; 0x0a
     f0c:	ab 87       	std	Y+11, r26	; 0x0b
     f0e:	bc 87       	std	Y+12, r27	; 0x0c
	
	internalWriteEntryAtAddress(r, lastEntryAddress);
     f10:	49 85       	ldd	r20, Y+9	; 0x09
     f12:	5a 85       	ldd	r21, Y+10	; 0x0a
     f14:	6b 85       	ldd	r22, Y+11	; 0x0b
     f16:	7c 85       	ldd	r23, Y+12	; 0x0c
     f18:	c8 01       	movw	r24, r16
     f1a:	0e 94 28 07 	call	0xe50	; 0xe50 <_Z27internalWriteEntryAtAddressP10SensorDatam>
}
     f1e:	2c 96       	adiw	r28, 0x0c	; 12
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:

void RmMemManager::appendSensorEntry(SensorData* r)
{
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8c 01       	movw	r16, r24
     f52:	7b 01       	movw	r14, r22
	volatile unsigned int readingSz = sizeof(SensorData); //const
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
	
	//Read where next entry is free
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     f5c:	64 e6       	ldi	r22, 0x64	; 100
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN12RmMemManager17getLongFromMemoryEj>
     f66:	6b 83       	std	Y+3, r22	; 0x03
     f68:	7c 83       	std	Y+4, r23	; 0x04
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	9e 83       	std	Y+6, r25	; 0x06
	volatile unsigned long nextFreeOffset = entryCount * sizeof(SensorData);
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	ad 81       	ldd	r26, Y+5	; 0x05
     f74:	be 81       	ldd	r27, Y+6	; 0x06
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	aa 1f       	adc	r26, r26
     f7c:	bb 1f       	adc	r27, r27
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	aa 1f       	adc	r26, r26
     f84:	bb 1f       	adc	r27, r27
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	aa 1f       	adc	r26, r26
     f8c:	bb 1f       	adc	r27, r27
     f8e:	8f 83       	std	Y+7, r24	; 0x07
     f90:	98 87       	std	Y+8, r25	; 0x08
     f92:	a9 87       	std	Y+9, r26	; 0x09
     f94:	ba 87       	std	Y+10, r27	; 0x0a
	volatile unsigned long nextFreeAddress = MEMADDR_READING_DATA_START + nextFreeOffset;
     f96:	8f 81       	ldd	r24, Y+7	; 0x07
     f98:	98 85       	ldd	r25, Y+8	; 0x08
     f9a:	a9 85       	ldd	r26, Y+9	; 0x09
     f9c:	ba 85       	ldd	r27, Y+10	; 0x0a
     f9e:	88 59       	subi	r24, 0x98	; 152
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	af 4f       	sbci	r26, 0xFF	; 255
     fa4:	bf 4f       	sbci	r27, 0xFF	; 255
     fa6:	8b 87       	std	Y+11, r24	; 0x0b
     fa8:	9c 87       	std	Y+12, r25	; 0x0c
     faa:	ad 87       	std	Y+13, r26	; 0x0d
     fac:	be 87       	std	Y+14, r27	; 0x0e

	//TODO: modulo both free address (AND entry count?)

	internalWriteEntryAtAddress(r, nextFreeAddress);
     fae:	4b 85       	ldd	r20, Y+11	; 0x0b
     fb0:	5c 85       	ldd	r21, Y+12	; 0x0c
     fb2:	6d 85       	ldd	r22, Y+13	; 0x0d
     fb4:	7e 85       	ldd	r23, Y+14	; 0x0e
     fb6:	c7 01       	movw	r24, r14
     fb8:	0e 94 28 07 	call	0xe50	; 0xe50 <_Z27internalWriteEntryAtAddressP10SensorDatam>

	//Update entry count
	setLongToMemory(MEMLOC_READING_ENTRY_COUNT, entryCount+1);
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	ad 81       	ldd	r26, Y+5	; 0x05
     fc2:	be 81       	ldd	r27, Y+6	; 0x06
     fc4:	9c 01       	movw	r18, r24
     fc6:	ad 01       	movw	r20, r26
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	4f 4f       	sbci	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	64 e6       	ldi	r22, 0x64	; 100
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	c8 01       	movw	r24, r16
     fd6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
     fda:	2e 96       	adiw	r28, 0x0e	; 14
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <_Z13internalFlashRbS_9LED_STATEb>:
	)
{
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
     ff4:	40 32       	cpi	r20, 0x20	; 32
     ff6:	31 f4       	brne	.+12     	; 0x1004 <_Z13internalFlashRbS_9LED_STATEb+0x10>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
     ff8:	fc 01       	movw	r30, r24
     ffa:	50 81       	ld	r21, Z
     ffc:	31 e0       	ldi	r19, 0x01	; 1
     ffe:	35 27       	eor	r19, r21
    1000:	30 83       	st	Z, r19
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Slow) {
    1004:	40 34       	cpi	r20, 0x40	; 64
    1006:	19 f4       	brne	.+6      	; 0x100e <_Z13internalFlashRbS_9LED_STATEb+0x1a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Solid) {
    100e:	40 31       	cpi	r20, 0x10	; 16
    1010:	21 f4       	brne	.+8      	; 0x101a <_Z13internalFlashRbS_9LED_STATEb+0x26>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1012:	31 e0       	ldi	r19, 0x01	; 1
    1014:	fc 01       	movw	r30, r24
    1016:	30 83       	st	Z, r19
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == All_Clear) {
    101a:	40 38       	cpi	r20, 0x80	; 128
    101c:	11 f4       	brne	.+4      	; 0x1022 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    101e:	fc 01       	movw	r30, r24
    1020:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	31 f4       	brne	.+12     	; 0x1032 <_Z13internalFlashRbS_9LED_STATEb+0x3e>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1026:	fb 01       	movw	r30, r22
    1028:	90 81       	ld	r25, Z
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	89 27       	eor	r24, r25
    102e:	80 83       	st	Z, r24
    1030:	08 95       	ret
	}
	else if (currLedState == Red_Slow) {
    1032:	44 30       	cpi	r20, 0x04	; 4
    1034:	19 f4       	brne	.+6      	; 0x103c <_Z13internalFlashRbS_9LED_STATEb+0x48>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1036:	fb 01       	movw	r30, r22
    1038:	20 83       	st	Z, r18
    103a:	08 95       	ret
	}
	else if (currLedState == Red_Solid) {
    103c:	41 30       	cpi	r20, 0x01	; 1
    103e:	21 f4       	brne	.+8      	; 0x1048 <_Z13internalFlashRbS_9LED_STATEb+0x54>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	fb 01       	movw	r30, r22
    1044:	80 83       	st	Z, r24
    1046:	08 95       	ret
	}
	else if (currLedState == All_Clear) {
    1048:	40 38       	cpi	r20, 0x80	; 128
    104a:	11 f4       	brne	.+4      	; 0x1050 <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    104c:	fb 01       	movw	r30, r22
    104e:	10 82       	st	Z, r1
    1050:	08 95       	ret

00001052 <_ZN12RmMemManager8flashLEDEv>:

//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
    1052:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <__data_end>
    1056:	9f 5f       	subi	r25, 0xFF	; 255
    1058:	8b ea       	ldi	r24, 0xAB	; 171
    105a:	98 9f       	mul	r25, r24
    105c:	81 2d       	mov	r24, r1
    105e:	11 24       	eor	r1, r1
    1060:	86 95       	lsr	r24
    1062:	28 2f       	mov	r18, r24
    1064:	22 0f       	add	r18, r18
    1066:	82 0f       	add	r24, r18
    1068:	98 1b       	sub	r25, r24
    106a:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <__data_end>

	//Flash Bottom LED	
	internalFlash(
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	91 11       	cpse	r25, r1
    1072:	20 e0       	ldi	r18, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1074:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <_ledBottomState>
    1078:	6f e1       	ldi	r22, 0x1F	; 31
    107a:	73 e0       	ldi	r23, 0x03	; 3
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1084:	60 91 1f 03 	lds	r22, 0x031F	; 0x80031f <_ledBottomPinGreen>
    1088:	89 e0       	ldi	r24, 0x09	; 9
    108a:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    108e:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <_ledBottomPinRed>
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__data_end>
    109e:	81 11       	cpse	r24, r1
    10a0:	20 e0       	ldi	r18, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    10a2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    10a6:	6e e1       	ldi	r22, 0x1E	; 30
    10a8:	73 e0       	ldi	r23, 0x03	; 3
    10aa:	8d e1       	ldi	r24, 0x1D	; 29
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    10b2:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <_ledTopPinGreen>
    10b6:	8b e0       	ldi	r24, 0x0B	; 11
    10b8:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    10bc:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <_ledTopPinRed>
    10c0:	8a e0       	ldi	r24, 0x0A	; 10
    10c2:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
    10c6:	08 95       	ret

000010c8 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:
}

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
	if (led_num == Bottom)
    10c8:	61 30       	cpi	r22, 0x01	; 1
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0xa>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    10cc:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <_ledBottomState>
    10d0:	08 95       	ret
	else if (led_num == Top)
    10d2:	61 11       	cpse	r22, r1
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x12>
		_ledTopState = state;
    10d6:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
    10da:	08 95       	ret

000010dc <_ZN12RmMemManager5resetEv>:

RmMemManager::RmMemManager(boolean isMock){
	_isMock = isMock;
}

void RmMemManager::reset(){
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	ec 01       	movw	r28, r24
	_flashCallCount=0;
    10e2:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <__data_end>
	toggleLED(Bottom, All_Clear);
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <_ZN12RmMemManager7readVccEv>:
}

float RmMemManager::readVcc() {
  long result;
  // Read 1.1V reference against AVcc - TODO: does this even work ?!
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    10fe:	8e e4       	ldi	r24, 0x4E	; 78
    1100:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  delay(2); // Wait for Vref to settle
    1104:	62 e0       	ldi	r22, 0x02	; 2
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
  ADCSRA |= _BV(ADSC); // Convert
    1110:	ea e7       	ldi	r30, 0x7A	; 122
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 64       	ori	r24, 0x40	; 64
    1118:	80 83       	st	Z, r24
  while (bit_is_set(ADCSRA,ADSC));
    111a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    111e:	86 fd       	sbrc	r24, 6
    1120:	fc cf       	rjmp	.-8      	; 0x111a <_ZN12RmMemManager7readVccEv+0x1c>
  result = ADCL;
    1122:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  result |= ADCH<<8;
    1126:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	32 2f       	mov	r19, r18
    112e:	22 27       	eor	r18, r18
    1130:	a9 01       	movw	r20, r18
    1132:	33 0f       	add	r19, r19
    1134:	66 0b       	sbc	r22, r22
    1136:	77 0b       	sbc	r23, r23
    1138:	9a 01       	movw	r18, r20
    113a:	ab 01       	movw	r20, r22
    113c:	28 2b       	or	r18, r24
  result = 1125300L / result; // Back-calculate AVcc in mV
    113e:	64 eb       	ldi	r22, 0xB4	; 180
    1140:	7b e2       	ldi	r23, 0x2B	; 43
    1142:	81 e1       	ldi	r24, 0x11	; 17
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 a1 30 	call	0x6142	; 0x6142 <__divmodsi4>
  return result / 1000;
    114a:	ca 01       	movw	r24, r20
    114c:	b9 01       	movw	r22, r18
    114e:	28 ee       	ldi	r18, 0xE8	; 232
    1150:	33 e0       	ldi	r19, 0x03	; 3
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	0e 94 a1 30 	call	0x6142	; 0x6142 <__divmodsi4>
    115a:	ca 01       	movw	r24, r20
    115c:	b9 01       	movw	r22, r18
    115e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
}
    1162:	08 95       	ret

00001164 <_ZN12RmMemManager16takeSampleAnalogEi>:
	//still required?
}

//Returns (analog_reading * vcc)
//TODO: Doesn't really belong in memory manager class :|
float RmMemManager::takeSampleAnalog(int pinNo)	{
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
	if (_isMock)
    1174:	fc 01       	movw	r30, r24
    1176:	20 81       	ld	r18, Z
    1178:	21 11       	cpse	r18, r1
    117a:	1d c0       	rjmp	.+58     	; 0x11b6 <_ZN12RmMemManager16takeSampleAnalogEi+0x52>
    117c:	ec 01       	movw	r28, r24
		return 5;
		
	int batt = analogRead(pinNo); 
    117e:	86 2f       	mov	r24, r22
    1180:	0e 94 a1 22 	call	0x4542	; 0x4542 <analogRead>
    1184:	8c 01       	movw	r16, r24
	float vcc = readVcc();
    1186:	ce 01       	movw	r24, r28
    1188:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN12RmMemManager7readVccEv>
    118c:	6b 01       	movw	r12, r22
    118e:	7c 01       	movw	r14, r24
	batt *= vcc;
    1190:	b8 01       	movw	r22, r16
    1192:	11 0f       	add	r17, r17
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    119c:	a7 01       	movw	r20, r14
    119e:	96 01       	movw	r18, r12
    11a0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__mulsf3>
    11a4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__fixsfsi>
	return batt;
    11a8:	07 2e       	mov	r0, r23
    11aa:	00 0c       	add	r0, r0
    11ac:	88 0b       	sbc	r24, r24
    11ae:	99 0b       	sbc	r25, r25
    11b0:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <_ZN12RmMemManager16takeSampleAnalogEi+0x5a>

//Returns (analog_reading * vcc)
//TODO: Doesn't really belong in memory manager class :|
float RmMemManager::takeSampleAnalog(int pinNo)	{
	if (_isMock)
		return 5;
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 ea       	ldi	r24, 0xA0	; 160
    11bc:	90 e4       	ldi	r25, 0x40	; 64
		
	int batt = analogRead(pinNo); 
	float vcc = readVcc();
	batt *= vcc;
	return batt;
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	08 95       	ret

000011d0 <_Z41__static_initialization_and_destruction_0ii>:
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    11d0:	8f 92       	push	r8
    11d2:	9f 92       	push	r9
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    11ea:	4b 01       	movw	r8, r22
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	39 f5       	brne	.+78     	; 0x123e <_Z41__static_initialization_and_destruction_0ii+0x6e>
    11f0:	6f 3f       	cpi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	21 f5       	brne	.+72     	; 0x123e <_Z41__static_initialization_and_destruction_0ii+0x6e>
char replybuffer[255];
SYS_STATE _currSystemState = SysState_Initialising;
uint32_t readingTime=10*1000; //10 secs for readings - MATCH-R-TIME

//C++ instances
RmMemManager mem(IS_SENSOR_MOCK);
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	8f e8       	ldi	r24, 0x8F	; 143
    11fa:	94 e0       	ldi	r25, 0x04	; 4
    11fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN12RmMemManagerC1Eb>
GsmManager gsm(IS_GSM_MOCK);
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	8e e6       	ldi	r24, 0x6E	; 110
    1204:	93 e0       	ldi	r25, 0x03	; 3
    1206:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN10GsmManagerC1Eh>
Timing timer(IS_TIMING_MOCK, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME); //TODO: But loop delay will be many times in a given cycle so cycleTime() won't be accurate!
    120a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <readingTime>
    120e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <readingTime+0x1>
    1212:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <readingTime+0x2>
    1216:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <readingTime+0x3>
    121a:	0f 2e       	mov	r0, r31
    121c:	f0 ee       	ldi	r31, 0xE0	; 224
    121e:	af 2e       	mov	r10, r31
    1220:	f2 e3       	ldi	r31, 0x32	; 50
    1222:	bf 2e       	mov	r11, r31
    1224:	f9 e2       	ldi	r31, 0x29	; 41
    1226:	cf 2e       	mov	r12, r31
    1228:	d1 2c       	mov	r13, r1
    122a:	f0 2d       	mov	r31, r0
    122c:	e1 2c       	mov	r14, r1
    122e:	f1 2c       	mov	r15, r1
    1230:	87 01       	movw	r16, r14
    1232:	e3 94       	inc	r14
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	81 e4       	ldi	r24, 0x41	; 65
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN6TimingC1Ehmmm>
    123e:	cd 2b       	or	r28, r29
    1240:	59 f4       	brne	.+22     	; 0x1258 <_Z41__static_initialization_and_destruction_0ii+0x88>
    1242:	89 20       	and	r8, r9
    1244:	80 94       	com	r8
    1246:	41 f4       	brne	.+16     	; 0x1258 <_Z41__static_initialization_and_destruction_0ii+0x88>
    1248:	81 e4       	ldi	r24, 0x41	; 65
    124a:	93 e0       	ldi	r25, 0x03	; 3
    124c:	0e 94 5f 19 	call	0x32be	; 0x32be <_ZN6TimingD1Ev>
SYS_STATE _currSystemState = SysState_Initialising;
uint32_t readingTime=10*1000; //10 secs for readings - MATCH-R-TIME

//C++ instances
RmMemManager mem(IS_SENSOR_MOCK);
GsmManager gsm(IS_GSM_MOCK);
    1250:	8e e6       	ldi	r24, 0x6E	; 110
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN10GsmManagerD1Ev>
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	08 95       	ret

00001272 <_Z15get_free_memoryv>:
/*********************/
#ifdef DEBUG
extern int __bss_end;
extern void *__brkval;
int get_free_memory()
{
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	00 d0       	rcall	.+0      	; 0x1278 <_Z15get_free_memoryv+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
  int free_memory;
  if((int)__brkval == 0)
    127c:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <__brkval>
    1280:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <__brkval+0x1>
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	31 f4       	brne	.+12     	; 0x1294 <_Z15get_free_memoryv+0x22>
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
    1288:	ce 01       	movw	r24, r28
    128a:	80 54       	subi	r24, 0x40	; 64
    128c:	97 40       	sbci	r25, 0x07	; 7
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <_Z15get_free_memoryv+0x32>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    1294:	9e 01       	movw	r18, r28
    1296:	2f 5f       	subi	r18, 0xFF	; 255
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	a9 01       	movw	r20, r18
    129c:	48 1b       	sub	r20, r24
    129e:	59 0b       	sbc	r21, r25
    12a0:	5a 83       	std	Y+2, r21	; 0x02
    12a2:	49 83       	std	Y+1, r20	; 0x01
  return free_memory;
}
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <_Z10updateLEDsv>:
	//(2 minutes)

	delay(LOOP_DELAY);
}

void updateLEDs(){
    12b2:	08 95       	ret

000012b4 <_Z17toggleSystemStatel>:
	//_currSystemState &= SysState_InTest;
	//mem.toggleLED(Bottom, LED_STATE.Green_Solid);
	//mem.toggleLED(Top, LED_STATE.Green_Solid);
}

void toggleSystemState(volatile long state){
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <_Z17toggleSystemStatel+0x6>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <_Z17toggleSystemStatel+0x8>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	69 83       	std	Y+1, r22	; 0x01
    12c2:	7a 83       	std	Y+2, r23	; 0x02
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	9c 83       	std	Y+4, r25	; 0x04
												RM_LOG2("System State OFF: ", (SYS_STATE)~state);
		_currSystemState = (SYS_STATE) ((long)_currSystemState & state); //Off
	}
		
	updateLEDs();
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <_Z14setErrorByFlaglh9SYS_STATE>:
//measure ttf ! and temp!
//discard analog reading too low
//what is ADC-voltage ??
//use fona rtc?

void setErrorByFlag(long memLoc, uint8_t errCode, SYS_STATE systemState = SysState_Initialising){
    12d6:	08 95       	ret

000012d8 <_Z24initialiseModulePristinej>:
	//Store for each boot-no?
}


/* Called once to initalise module - for first time in it's life only */
void initialiseModulePristine(unsigned int moduleId){
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	28 97       	sbiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61

	volatile long val = SysState_OneTimeInit;
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e2       	ldi	r21, 0x20	; 32
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	49 83       	std	Y+1, r20	; 0x01
    12f6:	5a 83       	std	Y+2, r21	; 0x02
    12f8:	6b 83       	std	Y+3, r22	; 0x03
    12fa:	7c 83       	std	Y+4, r23	; 0x04
	volatile long val2 = ~SysState_OneTimeInit;
    12fc:	4f ef       	ldi	r20, 0xFF	; 255
    12fe:	5f ed       	ldi	r21, 0xDF	; 223
    1300:	6f ef       	ldi	r22, 0xFF	; 255
    1302:	7f ef       	ldi	r23, 0xFF	; 255
    1304:	4d 83       	std	Y+5, r20	; 0x05
    1306:	5e 83       	std	Y+6, r21	; 0x06
    1308:	6f 83       	std	Y+7, r22	; 0x07
    130a:	78 87       	std	Y+8, r23	; 0x08
	toggleSystemState(SysState_OneTimeInit);
	
	mem.setLongToMemory(MEMLOC_MODULE_ID, moduleId);
    130c:	9c 01       	movw	r18, r24
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	8f e8       	ldi	r24, 0x8F	; 143
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_BOOTCOUNT, FIRST_CYCLE_NO-1); //i.e. 0 !
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	68 e0       	ldi	r22, 0x08	; 8
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	8f e8       	ldi	r24, 0x8F	; 143
    132a:	94 e0       	ldi	r25, 0x04	; 4
    132c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_READING_ENTRY_COUNT, 0);
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	64 e6       	ldi	r22, 0x64	; 100
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	8f e8       	ldi	r24, 0x8F	; 143
    133c:	94 e0       	ldi	r25, 0x04	; 4
    133e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	6c e0       	ldi	r22, 0x0C	; 12
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	8f e8       	ldi	r24, 0x8F	; 143
    134e:	94 e0       	ldi	r25, 0x04	; 4
    1350:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>
	
	toggleSystemState(~SysState_OneTimeInit);
}
    1354:	28 96       	adiw	r28, 0x08	; 8
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <_Z8shutdownv>:
//Sends a high on digital pin to reset external CMOS timer
void shutdown() {

  toggleSystemState(SysState_ShuttingDown);
  
  delay(3000); //Wait for any pending writes etc.
    1366:	68 eb       	ldi	r22, 0xB8	; 184
    1368:	7b e0       	ldi	r23, 0x0B	; 11
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
  
  digitalWrite(PIN_TIMER_SHUTDOWN, HIGH);
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
  
  //TODO: If PNP is bust, will perpetually remain like this?
  _moduleHasShutdown = true; //Just incase shutdown takes some time
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_moduleHasShutdown>
    1380:	08 95       	ret

00001382 <_Z15setupOnNewCyclev>:
boolean _moduleHasShutdown;
volatile unsigned long _currCycleNumber = 0UL;

void setupOnNewCycle(){
	
	_isEndOfDayCycle=false;
    1382:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_isEndOfDayCycle>
	_isStartOfHourCycle=false;
    1386:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_isStartOfHourCycle>
	_moduleHasShutdown=false;
    138a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <_moduleHasShutdown>
	_isAtCycleStart = false;
    138e:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <_isAtCycleStart>
	_currCycleNumber = 0UL;
    1392:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <_currCycleNumber>
    1396:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <_currCycleNumber+0x1>
    139a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <_currCycleNumber+0x2>
    139e:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <_currCycleNumber+0x3>

	if (!gsm.begin()) {
    13a2:	8e e6       	ldi	r24, 0x6E	; 110
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN10GsmManager5beginEv>
    13aa:	81 11       	cpse	r24, r1
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <_Z15setupOnNewCyclev+0x30>
		//FONA library did not begin - store in ROM, terminate and don't consume power(TODO: Why would this ever happen?)
		shutdown();
    13ae:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z8shutdownv>
	}	

	//Reset all
	mem.reset();
    13b2:	8f e8       	ldi	r24, 0x8F	; 143
    13b4:	94 e0       	ldi	r25, 0x04	; 4
    13b6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN12RmMemManager5resetEv>
	gsm.reset();
    13ba:	8e e6       	ldi	r24, 0x6E	; 110
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN10GsmManager5resetEv>
	timer.reset();
    13c2:	81 e4       	ldi	r24, 0x41	; 65
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN6Timing5resetEv>
    13ca:	08 95       	ret

000013cc <setup>:
}


void setup() {
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <setup+0x6>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
 
   unsigned char ResetSrc = MCUSR;   // TODO: save reset reason if not 0
    13d6:	84 b7       	in	r24, 0x34	; 52
   unsigned volatile int px=9;
    13d8:	89 e0       	ldi	r24, 0x09	; 9
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
   MCUSR = 0x00;  // cleared for next reset detection
    13e0:	14 be       	out	0x34, r1	; 52
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    13e2:	26 e0       	ldi	r18, 0x06	; 6
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	52 ec       	ldi	r21, 0xC2	; 194
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	83 e5       	ldi	r24, 0x53	; 83
    13ee:	96 e0       	ldi	r25, 0x06	; 6
    13f0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN14HardwareSerial5beginEmh>
	//fona.setHTTPSRedirect(true);

	#ifdef DEBUG

	Serial.begin(115200); //Writes to Serial output
	Serial.print(F("Running"));
    13f4:	6e e4       	ldi	r22, 0x4E	; 78
    13f6:	73 e0       	ldi	r23, 0x03	; 3
    13f8:	83 e5       	ldi	r24, 0x53	; 83
    13fa:	96 e0       	ldi	r25, 0x06	; 6
    13fc:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>

	#endif	

	//Mark all the outputs pins as such
 	pinMode(PIN_TIMER_SHUTDOWN, OUTPUT);
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
 	pinMode(PIN_LED_BOTTOM_GREEN, OUTPUT);
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	89 e0       	ldi	r24, 0x09	; 9
    140c:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
 	pinMode(PIN_LED_BOTTOM_RED, OUTPUT);
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	88 e0       	ldi	r24, 0x08	; 8
    1414:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
 	pinMode(PIN_LED_TOP_GREEN, OUTPUT);
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	8b e0       	ldi	r24, 0x0B	; 11
    141c:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
 	pinMode(PIN_LED_TOP_RED, OUTPUT);
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	8a e0       	ldi	r24, 0x0A	; 10
    1424:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
	
	setupOnNewCycle();
    1428:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z15setupOnNewCyclev>
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <_Z10toggleGPRSb>:
/********************************************************/
/********************** Transmission ********************/
/********************************************************/
bool toggleGPRS(boolean onOff){
	
	bool ret = gsm.enableGPRS(onOff);
    1436:	68 2f       	mov	r22, r24
    1438:	8e e6       	ldi	r24, 0x6E	; 110
    143a:	93 e0       	ldi	r25, 0x03	; 3
    143c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN10GsmManager10enableGPRSEb>
	if (ret)
		toggleSystemState(SysState_GPRSIsOn); //Success
	else
		toggleSystemState(SysState_GPRSToggleError); //Failure
	return ret;
}
    1440:	08 95       	ret

00001442 <_Z10sendViaSmsPc>:

uint8_t sendViaSms(char* data){
	
	toggleSystemState(SysState_GPRSSendingViaSms);
	
	uint8_t ret = gsm.sendViaSms(data);
    1442:	bc 01       	movw	r22, r24
    1444:	8e e6       	ldi	r24, 0x6E	; 110
    1446:	93 e0       	ldi	r25, 0x03	; 3
    1448:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN10GsmManager10sendViaSmsEPc>
		toggleSystemState(SysState_GPRSSendViaSmsError);
		
	toggleSystemState(~SysState_GPRSSendingViaSms);
	
	return ret;
}
    144c:	08 95       	ret

0000144e <_Z11sendViaGprsPc>:

uint16_t sendViaGprs(char* data){
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	00 d0       	rcall	.+0      	; 0x1454 <_Z11sendViaGprsPc+0x6>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	
	toggleSystemState(SysState_GPRSSendingViaNet);
	
	volatile uint16_t ret = gsm.sendViaGprs(data);
    1458:	bc 01       	movw	r22, r24
    145a:	8e e6       	ldi	r24, 0x6E	; 110
    145c:	93 e0       	ldi	r25, 0x03	; 3
    145e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN10GsmManager11sendViaGprsEPc>
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
	if (ret == 0)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
	else
		toggleSystemState(SysState_GPRSSendViaNetError);
	
	toggleSystemState(~SysState_GPRSSendingViaNet);

	return ret;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <_Z14loopSystemTestv>:
	}
		
	updateLEDs();
}

boolean loopSystemTest() {
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
	
	bool doContinue;
	
	if (_isAtCycleStart) {
    147c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_isAtCycleStart>
    1480:	88 23       	and	r24, r24
    1482:	29 f0       	breq	.+10     	; 0x148e <_Z14loopSystemTestv+0x16>
		
		toggleSystemState(SysState_InTest);
		
		if (!toggleGPRS(true))
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_Z10toggleGPRSb>
		{
			//LED lights will show error condition so leave running to allow user to see (?)
		}
		
		doContinue=true;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	2b c0       	rjmp	.+86     	; 0x14e4 <_Z14loopSystemTestv+0x6c>
	}
	else if (timer._at1Min) { //Wait 1 min to initialise GPRS module
    148e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <timer+0xd>
    1492:	88 23       	and	r24, r24
    1494:	01 f1       	breq	.+64     	; 0x14d6 <_Z14loopSystemTestv+0x5e>
												RM_LOG("System-Test : At 1 Min !");
    1496:	65 e2       	ldi	r22, 0x25	; 37
    1498:	72 e0       	ldi	r23, 0x02	; 2
    149a:	83 e5       	ldi	r24, 0x53	; 83
    149c:	96 e0       	ldi	r25, 0x06	; 6
    149e:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
		uint16_t retCode = sendViaGprs("Test From Module");
    14a2:	8e e3       	ldi	r24, 0x3E	; 62
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	0e 94 27 0a 	call	0x144e	; 0x144e <_Z11sendViaGprsPc>
    14aa:	ec 01       	movw	r28, r24
		
		RM_LOG2("GSM Result", retCode);
    14ac:	6f e4       	ldi	r22, 0x4F	; 79
    14ae:	72 e0       	ldi	r23, 0x02	; 2
    14b0:	83 e5       	ldi	r24, 0x53	; 83
    14b2:	96 e0       	ldi	r25, 0x06	; 6
    14b4:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    14b8:	6a e5       	ldi	r22, 0x5A	; 90
    14ba:	72 e0       	ldi	r23, 0x02	; 2
    14bc:	83 e5       	ldi	r24, 0x53	; 83
    14be:	96 e0       	ldi	r25, 0x06	; 6
    14c0:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    14c4:	4a e0       	ldi	r20, 0x0A	; 10
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	be 01       	movw	r22, r28
    14ca:	83 e5       	ldi	r24, 0x53	; 83
    14cc:	96 e0       	ldi	r25, 0x06	; 6
    14ce:	0e 94 18 21 	call	0x4230	; 0x4230 <_ZN5Print7printlnEji>
		//TODO: On failure, send via Sms?

		doContinue=true;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <_Z14loopSystemTestv+0x6c>
	}
	else if (!timer._has1Min30SecsElapsed) { //Wait 30 secs to send msg 
    14d6:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <timer+0x13>
    14da:	81 11       	cpse	r24, r1
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <_Z14loopSystemTestv+0x6a>
		doContinue=true;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <_Z14loopSystemTestv+0x6c>
	}
	else{
		toggleSystemState(~SysState_InTest);
		doContinue=false;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return doContinue;
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <_Z15resetSensorDatav>:
	
	//Done at start of each cycle but strictly not necessary as
	//system would have re-booted after each cycle but still here as 
	//1) we could change logic and keep it on between certain cycles - e.g. to charge batt
	//2) for unit tests
	noBattReadings=0;
    14ea:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <noBattReadings>
	noPVReadings=0;
    14ee:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <noPVReadings>
	nocurrReadings=0;
    14f2:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <nocurrReadings>
	noTempReadings=0;
    14f6:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <noTempReadings>

	//Just clear global instance instead of new to prevent fragmentation
	_currSensorData.BattVoltage=0;
    14fa:	e9 e3       	ldi	r30, 0x39	; 57
    14fc:	f3 e0       	ldi	r31, 0x03	; 3
    14fe:	11 82       	std	Z+1, r1	; 0x01
    1500:	10 82       	st	Z, r1
	_currSensorData.Current=0;
    1502:	13 82       	std	Z+3, r1	; 0x03
    1504:	12 82       	std	Z+2, r1	; 0x02
	_currSensorData.PVVoltage=0;
    1506:	15 82       	std	Z+5, r1	; 0x05
    1508:	14 82       	std	Z+4, r1	; 0x04
	_currSensorData.Temperature=0;
    150a:	17 82       	std	Z+7, r1	; 0x07
    150c:	16 82       	std	Z+6, r1	; 0x06
    150e:	08 95       	ret

00001510 <_Z17persistSensorDatav>:
}

void persistSensorData() {
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	2c 97       	sbiw	r28, 0x0c	; 12
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	
	//If it's a new hour, create a new entry, otherwise compare to previous entry
	//So we get the 'best' entry every hour
	if (_isStartOfHourCycle) {
    1524:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <_isStartOfHourCycle>
    1528:	88 23       	and	r24, r24
    152a:	39 f0       	breq	.+14     	; 0x153a <_Z17persistSensorDatav+0x2a>
		mem.appendSensorEntry(&_currSensorData);
    152c:	69 e3       	ldi	r22, 0x39	; 57
    152e:	73 e0       	ldi	r23, 0x03	; 3
    1530:	8f e8       	ldi	r24, 0x8F	; 143
    1532:	94 e0       	ldi	r25, 0x04	; 4
    1534:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
    1538:	2b c0       	rjmp	.+86     	; 0x1590 <_Z17persistSensorDatav+0x80>
	}
	else{
		unsigned long loadedTo;
		SensorData lastData;
    153a:	be 01       	movw	r22, r28
    153c:	6f 5f       	subi	r22, 0xFF	; 255
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	88 e0       	ldi	r24, 0x08	; 8
    1542:	fb 01       	movw	r30, r22
    1544:	11 92       	st	Z+, r1
    1546:	8a 95       	dec	r24
    1548:	e9 f7       	brne	.-6      	; 0x1544 <_Z17persistSensorDatav+0x34>
		unsigned long actLoad = mem.loadSensorData(&lastData, 1, &loadedTo);
    154a:	9e 01       	movw	r18, r28
    154c:	27 5f       	subi	r18, 0xF7	; 247
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	8f e8       	ldi	r24, 0x8F	; 143
    1556:	94 e0       	ldi	r25, 0x04	; 4
    1558:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
		
		if (actLoad == 0) {
    155c:	67 2b       	or	r22, r23
    155e:	68 2b       	or	r22, r24
    1560:	69 2b       	or	r22, r25
    1562:	39 f4       	brne	.+14     	; 0x1572 <_Z17persistSensorDatav+0x62>
			//Don't expect this to happen! But if it does, append the reading.
			mem.appendSensorEntry(&_currSensorData);
    1564:	69 e3       	ldi	r22, 0x39	; 57
    1566:	73 e0       	ldi	r23, 0x03	; 3
    1568:	8f e8       	ldi	r24, 0x8F	; 143
    156a:	94 e0       	ldi	r25, 0x04	; 4
    156c:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <_Z17persistSensorDatav+0x80>
		}
		else{
			//If there is more usage in this cycle, prefer to record that so we get 
			//max usage per hour
			//TODO: Test max is indeed saved
			if (_currSensorData.Current > lastData.Current){
    1572:	20 91 3b 03 	lds	r18, 0x033B	; 0x80033b <_currSensorData+0x2>
    1576:	30 91 3c 03 	lds	r19, 0x033C	; 0x80033c <_currSensorData+0x3>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	82 17       	cp	r24, r18
    1580:	93 07       	cpc	r25, r19
    1582:	30 f4       	brcc	.+12     	; 0x1590 <_Z17persistSensorDatav+0x80>
				mem.replaceLastSensorEntry(&_currSensorData);
    1584:	69 e3       	ldi	r22, 0x39	; 57
    1586:	73 e0       	ldi	r23, 0x03	; 3
    1588:	8f e8       	ldi	r24, 0x8F	; 143
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>
			}
			//else leave previous higher reading
		}
	}
}
    1590:	2c 96       	adiw	r28, 0x0c	; 12
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <_Z16readSensorsAsyncv>:



void readSensorsAsync() {
    15a2:	3f 92       	push	r3
    15a4:	4f 92       	push	r4
    15a6:	5f 92       	push	r5
    15a8:	6f 92       	push	r6
    15aa:	7f 92       	push	r7
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	2a 97       	sbiw	r28, 0x0a	; 10
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
	//Collect sensor data for x minutes, calc average, remove outliers
	//TODO: Should this be RMS instead?

                                                      RM_LOG(F("Reading Sensors"));
    15d4:	68 ea       	ldi	r22, 0xA8	; 168
    15d6:	72 e0       	ldi	r23, 0x02	; 2
    15d8:	83 e5       	ldi	r24, 0x53	; 83
    15da:	96 e0       	ldi	r25, 0x06	; 6
    15dc:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    float pvRaw   = mem.takeSampleAnalog(PIN_PV_VOLTAGE);
    15e0:	6e e0       	ldi	r22, 0x0E	; 14
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	8f e8       	ldi	r24, 0x8F	; 143
    15e6:	94 e0       	ldi	r25, 0x04	; 4
    15e8:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN12RmMemManager16takeSampleAnalogEi>
    15ec:	4b 01       	movw	r8, r22
    15ee:	5c 01       	movw	r10, r24
    float pvAct = (pvRaw/1024.0) * 15.70589;
    
    float battRaw = mem.takeSampleAnalog(PIN_BATT_VOLTAGE);
    15f0:	6f e0       	ldi	r22, 0x0F	; 15
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	8f e8       	ldi	r24, 0x8F	; 143
    15f6:	94 e0       	ldi	r25, 0x04	; 4
    15f8:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN12RmMemManager16takeSampleAnalogEi>
    15fc:	2b 01       	movw	r4, r22
    15fe:	3c 01       	movw	r6, r24
    float battAct = (battRaw/1024.0) * 6.0; //6=28/4.6666
    
    float currentRaw = mem.takeSampleAnalog(PIN_CURRENT);
    1600:	61 e1       	ldi	r22, 0x11	; 17
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	8f e8       	ldi	r24, 0x8F	; 143
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN12RmMemManager16takeSampleAnalogEi>
    160c:	6b 01       	movw	r12, r22
    160e:	7c 01       	movw	r14, r24
    float currentAct = (battRaw/1024.0) * 1.0; //TODO: Not sure about current calibration yet !

    float tempRaw = mem.takeSampleAnalog(PIN_TEMP);
    1610:	60 e1       	ldi	r22, 0x10	; 16
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	8f e8       	ldi	r24, 0x8F	; 143
    1616:	94 e0       	ldi	r25, 0x04	; 4
    1618:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN12RmMemManager16takeSampleAnalogEi>
    161c:	6f 83       	std	Y+7, r22	; 0x07
    161e:	78 87       	std	Y+8, r23	; 0x08
    1620:	89 87       	std	Y+9, r24	; 0x09
    1622:	9a 87       	std	Y+10, r25	; 0x0a


    //TODO: Ideally some measure of variance in addition to avg should be got
	
    //Incremental average
    if (battRaw > 0) {
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	a9 01       	movw	r20, r18
    162a:	c3 01       	movw	r24, r6
    162c:	b2 01       	movw	r22, r4
    162e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__gesf2>
    1632:	18 16       	cp	r1, r24
    1634:	b4 f5       	brge	.+108    	; 0x16a2 <_Z16readSensorsAsyncv+0x100>
      
      volatile long currReading = _currSensorData.BattVoltage * noBattReadings;
    1636:	09 e3       	ldi	r16, 0x39	; 57
    1638:	13 e0       	ldi	r17, 0x03	; 3
    163a:	f8 01       	movw	r30, r16
    163c:	20 81       	ld	r18, Z
    163e:	31 81       	ldd	r19, Z+1	; 0x01
    1640:	30 90 2d 03 	lds	r3, 0x032D	; 0x80032d <noBattReadings>
    1644:	32 9e       	mul	r3, r18
    1646:	c0 01       	movw	r24, r0
    1648:	33 9e       	mul	r3, r19
    164a:	90 0d       	add	r25, r0
    164c:	11 24       	eor	r1, r1
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	ab 83       	std	Y+3, r26	; 0x03
    1658:	bc 83       	std	Y+4, r27	; 0x04
	  volatile int px=9;
    165a:	89 e0       	ldi	r24, 0x09	; 9
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
      noBattReadings++;
    1662:	33 94       	inc	r3
    1664:	30 92 2d 03 	sts	0x032D, r3	; 0x80032d <noBattReadings>
      _currSensorData.BattVoltage = (currReading + battRaw)/noBattReadings; //Will be >0 denom because of above
    1668:	69 81       	ldd	r22, Y+1	; 0x01
    166a:	7a 81       	ldd	r23, Y+2	; 0x02
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    1674:	a3 01       	movw	r20, r6
    1676:	92 01       	movw	r18, r4
    1678:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__addsf3>
    167c:	2b 01       	movw	r4, r22
    167e:	3c 01       	movw	r6, r24
    1680:	63 2d       	mov	r22, r3
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	c3 01       	movw	r24, r6
    1692:	b2 01       	movw	r22, r4
    1694:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__divsf3>
    1698:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixunssfsi>
    169c:	f8 01       	movw	r30, r16
    169e:	71 83       	std	Z+1, r23	; 0x01
    16a0:	60 83       	st	Z, r22
    }
    
    if (pvRaw > 0) {
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	a9 01       	movw	r20, r18
    16a8:	c5 01       	movw	r24, r10
    16aa:	b4 01       	movw	r22, r8
    16ac:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__gesf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	54 f5       	brge	.+84     	; 0x1708 <_Z16readSensorsAsyncv+0x166>
      
      long currReading = _currSensorData.PVVoltage * noPVReadings;
    16b4:	09 e3       	ldi	r16, 0x39	; 57
    16b6:	13 e0       	ldi	r17, 0x03	; 3
    16b8:	f8 01       	movw	r30, r16
    16ba:	84 81       	ldd	r24, Z+4	; 0x04
    16bc:	95 81       	ldd	r25, Z+5	; 0x05
    16be:	70 90 2c 03 	lds	r7, 0x032C	; 0x80032c <noPVReadings>
    16c2:	78 9e       	mul	r7, r24
    16c4:	b0 01       	movw	r22, r0
    16c6:	79 9e       	mul	r7, r25
    16c8:	70 0d       	add	r23, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
      noPVReadings++;
    16d0:	73 94       	inc	r7
    16d2:	70 92 2c 03 	sts	0x032C, r7	; 0x80032c <noPVReadings>
      _currSensorData.PVVoltage = (currReading + pvRaw)/noPVReadings; //Will be >0 denom because of above
    16d6:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    16da:	a5 01       	movw	r20, r10
    16dc:	94 01       	movw	r18, r8
    16de:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__addsf3>
    16e2:	4b 01       	movw	r8, r22
    16e4:	5c 01       	movw	r10, r24
    16e6:	67 2d       	mov	r22, r7
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	c5 01       	movw	r24, r10
    16f8:	b4 01       	movw	r22, r8
    16fa:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__divsf3>
    16fe:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixunssfsi>
    1702:	f8 01       	movw	r30, r16
    1704:	75 83       	std	Z+5, r23	; 0x05
    1706:	64 83       	std	Z+4, r22	; 0x04
    }
    
    if (currentRaw > 0) {
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	a9 01       	movw	r20, r18
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__gesf2>
    1716:	18 16       	cp	r1, r24
    1718:	54 f5       	brge	.+84     	; 0x176e <_Z16readSensorsAsyncv+0x1cc>
      
      long currReading = _currSensorData.Current * nocurrReadings;
    171a:	09 e3       	ldi	r16, 0x39	; 57
    171c:	13 e0       	ldi	r17, 0x03	; 3
    171e:	f8 01       	movw	r30, r16
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	b0 90 2b 03 	lds	r11, 0x032B	; 0x80032b <nocurrReadings>
    1728:	b8 9e       	mul	r11, r24
    172a:	b0 01       	movw	r22, r0
    172c:	b9 9e       	mul	r11, r25
    172e:	70 0d       	add	r23, r0
    1730:	11 24       	eor	r1, r1
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
      nocurrReadings++;
    1736:	b3 94       	inc	r11
    1738:	b0 92 2b 03 	sts	0x032B, r11	; 0x80032b <nocurrReadings>
      _currSensorData.Current = (currReading + currentRaw)/nocurrReadings; //Will be >0 denom because of above
    173c:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    1740:	a7 01       	movw	r20, r14
    1742:	96 01       	movw	r18, r12
    1744:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__addsf3>
    1748:	6b 01       	movw	r12, r22
    174a:	7c 01       	movw	r14, r24
    174c:	6b 2d       	mov	r22, r11
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    1758:	9b 01       	movw	r18, r22
    175a:	ac 01       	movw	r20, r24
    175c:	c7 01       	movw	r24, r14
    175e:	b6 01       	movw	r22, r12
    1760:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__divsf3>
    1764:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixunssfsi>
    1768:	f8 01       	movw	r30, r16
    176a:	73 83       	std	Z+3, r23	; 0x03
    176c:	62 83       	std	Z+2, r22	; 0x02
    }
    
    if (tempRaw > 0) {
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	6f 81       	ldd	r22, Y+7	; 0x07
    1776:	78 85       	ldd	r23, Y+8	; 0x08
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__gesf2>
    1780:	18 16       	cp	r1, r24
    1782:	64 f5       	brge	.+88     	; 0x17dc <_Z16readSensorsAsyncv+0x23a>
      
      long currReading = _currSensorData.Temperature * noTempReadings;
    1784:	09 e3       	ldi	r16, 0x39	; 57
    1786:	13 e0       	ldi	r17, 0x03	; 3
    1788:	f8 01       	movw	r30, r16
    178a:	86 81       	ldd	r24, Z+6	; 0x06
    178c:	97 81       	ldd	r25, Z+7	; 0x07
    178e:	f0 90 2a 03 	lds	r15, 0x032A	; 0x80032a <noTempReadings>
    1792:	f8 9e       	mul	r15, r24
    1794:	b0 01       	movw	r22, r0
    1796:	f9 9e       	mul	r15, r25
    1798:	70 0d       	add	r23, r0
    179a:	11 24       	eor	r1, r1
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
      noTempReadings++;
    17a0:	f3 94       	inc	r15
    17a2:	f0 92 2a 03 	sts	0x032A, r15	; 0x80032a <noTempReadings>
      _currSensorData.Temperature = (currReading + tempRaw)/noTempReadings; //Will be >0 denom because of above
    17a6:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    17aa:	2f 81       	ldd	r18, Y+7	; 0x07
    17ac:	38 85       	ldd	r19, Y+8	; 0x08
    17ae:	49 85       	ldd	r20, Y+9	; 0x09
    17b0:	5a 85       	ldd	r21, Y+10	; 0x0a
    17b2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__addsf3>
    17b6:	4b 01       	movw	r8, r22
    17b8:	5c 01       	movw	r10, r24
    17ba:	6f 2d       	mov	r22, r15
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__floatsisf>
    17c6:	9b 01       	movw	r18, r22
    17c8:	ac 01       	movw	r20, r24
    17ca:	c5 01       	movw	r24, r10
    17cc:	b4 01       	movw	r22, r8
    17ce:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__divsf3>
    17d2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixunssfsi>
    17d6:	f8 01       	movw	r30, r16
    17d8:	77 83       	std	Z+7, r23	; 0x07
    17da:	66 83       	std	Z+6, r22	; 0x06
    }
                                                     // RM_LOG2(F("Sensors-Curr"), cData.Current);

	//TODO: If any above are 0, record it as an error ("no of 0s")
}
    17dc:	2a 96       	adiw	r28, 0x0a	; 10
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	7f 90       	pop	r7
    1802:	6f 90       	pop	r6
    1804:	5f 90       	pop	r5
    1806:	4f 90       	pop	r4
    1808:	3f 90       	pop	r3
    180a:	08 95       	ret

0000180c <_Z17prepareDataForSMSP10SensorDatajPcj>:


void prepareDataForSMS(SensorData* readings, unsigned int noOfReadings, 
					   char* strBuffer, unsigned int maxStrBuffer) {
    180c:	08 95       	ret

0000180e <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>:
//ModuleID-BootCount-NetworkStatus-RSSI-BattPct-(BattCurrentPVTempErrchar,)*
uint16_t prepareDataForGPRS(SensorData* readings, unsigned int noOfReadings, 
						long moduleId, long bootCount, uint8_t networkStatus,
						uint8_t rssi, uint16_t batPct,
						char* strBuffer, unsigned int maxStrBuffer) //TODO: Take max buffer into account
{
    180e:	4f 92       	push	r4
    1810:	5f 92       	push	r5
    1812:	6f 92       	push	r6
    1814:	7f 92       	push	r7
    1816:	8f 92       	push	r8
    1818:	9f 92       	push	r9
    181a:	af 92       	push	r10
    181c:	cf 92       	push	r12
    181e:	df 92       	push	r13
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	2d 97       	sbiw	r28, 0x0d	; 13
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	2c 01       	movw	r4, r24
    183e:	3b 01       	movw	r6, r22
    1840:	ca 01       	movw	r24, r20
    1842:	b9 01       	movw	r22, r18
    1844:	ea 86       	std	Y+10, r14	; 0x0a
    1846:	fb 86       	std	Y+11, r15	; 0x0b
    1848:	0c 87       	std	Y+12, r16	; 0x0c
    184a:	1d 87       	std	Y+13, r17	; 0x0d
    184c:	ef 8c       	ldd	r14, Y+31	; 0x1f
    184e:	f8 a0       	ldd	r15, Y+32	; 0x20
	volatile byte offset = 0;
    1850:	19 82       	std	Y+1, r1	; 0x01
	char* origiBufferStart = strBuffer;
	
	//strBuffer = utoa(0, strBuffer, 10);
	offset = writeWithPad(strBuffer, moduleId,0);
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	c7 01       	movw	r24, r14
    1856:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    185a:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    185c:	09 81       	ldd	r16, Y+1	; 0x01
    185e:	10 e0       	ldi	r17, 0x00	; 0
    1860:	f7 01       	movw	r30, r14
    1862:	e0 0f       	add	r30, r16
    1864:	f1 1f       	adc	r31, r17
	
	*strBuffer++='-'; //Add a dash
    1866:	0f 5f       	subi	r16, 0xFF	; 255
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	0e 0d       	add	r16, r14
    186c:	1f 1d       	adc	r17, r15
    186e:	0f 2e       	mov	r0, r31
    1870:	fd e2       	ldi	r31, 0x2D	; 45
    1872:	df 2e       	mov	r13, r31
    1874:	f0 2d       	mov	r31, r0
    1876:	d0 82       	st	Z, r13
	
	offset = writeWithPad(strBuffer, bootCount, 0);
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	6a 85       	ldd	r22, Y+10	; 0x0a
    187c:	7b 85       	ldd	r23, Y+11	; 0x0b
    187e:	c8 01       	movw	r24, r16
    1880:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    1884:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	f8 01       	movw	r30, r16
    188c:	e8 0f       	add	r30, r24
    188e:	f9 1f       	adc	r31, r25
	
	*strBuffer++='-'; //Add a dash
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	08 0f       	add	r16, r24
    1894:	19 1f       	adc	r17, r25
    1896:	d0 82       	st	Z, r13

	//Network status
	offset = writeByteWithPad(strBuffer, networkStatus, 0);
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	6c 2d       	mov	r22, r12
    189c:	c8 01       	movw	r24, r16
    189e:	0e 94 48 05 	call	0xa90	; 0xa90 <_Z16writeByteWithPadPchh>
    18a2:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	f8 01       	movw	r30, r16
    18aa:	e8 0f       	add	r30, r24
    18ac:	f9 1f       	adc	r31, r25
	
	*strBuffer++='-'; //Add a dash
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	08 0f       	add	r16, r24
    18b2:	19 1f       	adc	r17, r25
    18b4:	d0 82       	st	Z, r13
	//TODO: Below won't work as GPRS not on yet...?! Maybe?
	
	
	
	//Get network signal
	offset = writeByteWithPad(strBuffer, rssi, 0);
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	6a 2d       	mov	r22, r10
    18ba:	c8 01       	movw	r24, r16
    18bc:	0e 94 48 05 	call	0xa90	; 0xa90 <_Z16writeByteWithPadPchh>
    18c0:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	f8 01       	movw	r30, r16
    18c8:	e8 0f       	add	r30, r24
    18ca:	f9 1f       	adc	r31, r25

	*strBuffer++='-'; //Add a dash
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	08 0f       	add	r16, r24
    18d0:	19 1f       	adc	r17, r25
    18d2:	d0 82       	st	Z, r13
	
	//Get battery pct
	offset = writeWithPad(strBuffer, batPct, 0);
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	b4 01       	movw	r22, r8
    18d8:	c8 01       	movw	r24, r16
    18da:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    18de:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	08 0f       	add	r16, r24
    18e4:	11 1d       	adc	r17, r1
	
	if (noOfReadings > 0) //Could have no new readings but we still send above data
    18e6:	61 14       	cp	r6, r1
    18e8:	71 04       	cpc	r7, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xe0>
    18ec:	51 c0       	rjmp	.+162    	; 0x1990 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
	{
		*strBuffer++='-'; //Add a dash
    18ee:	8d e2       	ldi	r24, 0x2D	; 45
    18f0:	f8 01       	movw	r30, r16
    18f2:	80 83       	st	Z, r24
    18f4:	0f 5f       	subi	r16, 0xFF	; 255
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
	
		for(unsigned int i=0;i<noOfReadings;i++)
    18f8:	c1 2c       	mov	r12, r1
    18fa:	d1 2c       	mov	r13, r1
    18fc:	c6 14       	cp	r12, r6
    18fe:	d7 04       	cpc	r13, r7
    1900:	08 f0       	brcs	.+2      	; 0x1904 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xf6>
    1902:	46 c0       	rjmp	.+140    	; 0x1990 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
		{
			SensorData r = readings[i];
    1904:	f6 01       	movw	r30, r12
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	e4 0d       	add	r30, r4
    1914:	f5 1d       	adc	r31, r5
    1916:	88 e0       	ldi	r24, 0x08	; 8
    1918:	de 01       	movw	r26, r28
    191a:	12 96       	adiw	r26, 0x02	; 2
    191c:	01 90       	ld	r0, Z+
    191e:	0d 92       	st	X+, r0
    1920:	8a 95       	dec	r24
    1922:	e1 f7       	brne	.-8      	; 0x191c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x10e>
		
			offset = writeWithPad(strBuffer, r.BattVoltage, 4);
    1924:	6a 81       	ldd	r22, Y+2	; 0x02
    1926:	7b 81       	ldd	r23, Y+3	; 0x03
    1928:	44 e0       	ldi	r20, 0x04	; 4
    192a:	c8 01       	movw	r24, r16
    192c:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    1930:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	08 0f       	add	r16, r24
    1936:	11 1d       	adc	r17, r1

			offset = writeWithPad(strBuffer, r.Current, 4);
    1938:	6c 81       	ldd	r22, Y+4	; 0x04
    193a:	7d 81       	ldd	r23, Y+5	; 0x05
    193c:	44 e0       	ldi	r20, 0x04	; 4
    193e:	c8 01       	movw	r24, r16
    1940:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    1944:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	08 0f       	add	r16, r24
    194a:	11 1d       	adc	r17, r1

			offset = writeWithPad(strBuffer, r.PVVoltage, 4);
    194c:	6e 81       	ldd	r22, Y+6	; 0x06
    194e:	7f 81       	ldd	r23, Y+7	; 0x07
    1950:	44 e0       	ldi	r20, 0x04	; 4
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    1958:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	08 0f       	add	r16, r24
    195e:	11 1d       	adc	r17, r1

			offset = writeWithPad(strBuffer, r.Temperature, 4);
    1960:	68 85       	ldd	r22, Y+8	; 0x08
    1962:	79 85       	ldd	r23, Y+9	; 0x09
    1964:	44 e0       	ldi	r20, 0x04	; 4
    1966:	c8 01       	movw	r24, r16
    1968:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z12writeWithPadPcjh>
    196c:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	08 0f       	add	r16, r24
    1972:	11 1d       	adc	r17, r1
				//
				//offset = writeCharWithPad(strBuffer, r.ErrorChar, 0);
				//strBuffer += offset;
			//}

			if (i < noOfReadings-1)
    1974:	c3 01       	movw	r24, r6
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	c8 16       	cp	r12, r24
    197a:	d9 06       	cpc	r13, r25
    197c:	28 f4       	brcc	.+10     	; 0x1988 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x17a>
				*strBuffer++=','; //Add a comma between reading sets
    197e:	8c e2       	ldi	r24, 0x2C	; 44
    1980:	f8 01       	movw	r30, r16
    1982:	80 83       	st	Z, r24
    1984:	0f 5f       	subi	r16, 0xFF	; 255
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
	
	if (noOfReadings > 0) //Could have no new readings but we still send above data
	{
		*strBuffer++='-'; //Add a dash
	
		for(unsigned int i=0;i<noOfReadings;i++)
    1988:	ff ef       	ldi	r31, 0xFF	; 255
    198a:	cf 1a       	sub	r12, r31
    198c:	df 0a       	sbc	r13, r31
    198e:	b6 cf       	rjmp	.-148    	; 0x18fc <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xee>
			if (i < noOfReadings-1)
				*strBuffer++=','; //Add a comma between reading sets
		}
	}
	
	*strBuffer='\0'; //Terminate string
    1990:	f8 01       	movw	r30, r16
    1992:	10 82       	st	Z, r1
	
	return strBuffer-origiBufferStart;
}
    1994:	c8 01       	movw	r24, r16
    1996:	8e 19       	sub	r24, r14
    1998:	9f 09       	sbc	r25, r15
    199a:	2d 96       	adiw	r28, 0x0d	; 13
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	af 90       	pop	r10
    19b8:	9f 90       	pop	r9
    19ba:	8f 90       	pop	r8
    19bc:	7f 90       	pop	r7
    19be:	6f 90       	pop	r6
    19c0:	5f 90       	pop	r5
    19c2:	4f 90       	pop	r4
    19c4:	08 95       	ret

000019c6 <_Z20execTransmitReadingsP14DailyCycleData>:
	else
		toggleSystemState(SysState_GPRSToggleError); //Failure
	return ret;
}

void execTransmitReadings(DailyCycleData* ret) {
    19c6:	4f 92       	push	r4
    19c8:	5f 92       	push	r5
    19ca:	6f 92       	push	r6
    19cc:	7f 92       	push	r7
    19ce:	8f 92       	push	r8
    19d0:	9f 92       	push	r9
    19d2:	af 92       	push	r10
    19d4:	bf 92       	push	r11
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	c0 58       	subi	r28, 0x80	; 128
    19ec:	d1 09       	sbc	r29, r1
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	3c 01       	movw	r6, r24

	ret->BootNo = _currCycleNumber;
    19fa:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_currCycleNumber>
    19fe:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    1a02:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    1a06:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    1a0a:	f3 01       	movw	r30, r6
    1a0c:	80 83       	st	Z, r24
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	a2 83       	std	Z+2, r26	; 0x02
    1a12:	b3 83       	std	Z+3, r27	; 0x03
		
	//Load the readings to be sent into memory  
	byte requestedLoadCount = 2; //TODO: Should be 24, which we stream over GPRS !!
	unsigned long loadedUpTo = 0;
    1a14:	19 8a       	std	Y+17, r1	; 0x11
    1a16:	1a 8a       	std	Y+18, r1	; 0x12
    1a18:	1b 8a       	std	Y+19, r1	; 0x13
    1a1a:	1c 8a       	std	Y+20, r1	; 0x14
  	SensorData dszReadings[requestedLoadCount];
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	fe 01       	movw	r30, r28
    1a22:	31 96       	adiw	r30, 0x01	; 1
    1a24:	8f 3f       	cpi	r24, 0xFF	; 255
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	92 07       	cpc	r25, r18
    1a2a:	59 f0       	breq	.+22     	; 0x1a42 <_Z20execTransmitReadingsP14DailyCycleData+0x7c>
} ModuleData;


//TODO: All these to be uint16_t ?

typedef struct SensorData{
    1a2c:	11 82       	std	Z+1, r1	; 0x01
    1a2e:	10 82       	st	Z, r1
    1a30:	13 82       	std	Z+3, r1	; 0x03
    1a32:	12 82       	std	Z+2, r1	; 0x02
    1a34:	15 82       	std	Z+5, r1	; 0x05
    1a36:	14 82       	std	Z+4, r1	; 0x04
    1a38:	17 82       	std	Z+7, r1	; 0x07
    1a3a:	16 82       	std	Z+6, r1	; 0x06
    1a3c:	38 96       	adiw	r30, 0x08	; 8
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 cf       	rjmp	.-30     	; 0x1a24 <_Z20execTransmitReadingsP14DailyCycleData+0x5e>
  	unsigned actLoadCount = mem.loadSensorData(dszReadings, requestedLoadCount, &loadedUpTo);
    1a42:	9e 01       	movw	r18, r28
    1a44:	2f 5e       	subi	r18, 0xEF	; 239
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	be 01       	movw	r22, r28
    1a4e:	6f 5f       	subi	r22, 0xFF	; 255
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f e8       	ldi	r24, 0x8F	; 143
    1a54:	94 e0       	ldi	r25, 0x04	; 4
    1a56:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    1a5a:	d6 2e       	mov	r13, r22
    1a5c:	b7 2e       	mov	r11, r23

	ret->NoOfReadings = actLoadCount;
    1a5e:	d3 01       	movw	r26, r6
    1a60:	16 96       	adiw	r26, 0x06	; 6
    1a62:	6c 93       	st	X, r22
		
	unsigned long moduleId = mem.getLongFromMemory(MEMLOC_MODULE_ID);
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	8f e8       	ldi	r24, 0x8F	; 143
    1a6a:	94 e0       	ldi	r25, 0x04	; 4
    1a6c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN12RmMemManager17getLongFromMemoryEj>
    1a70:	c3 58       	subi	r28, 0x83	; 131
    1a72:	df 4f       	sbci	r29, 0xFF	; 255
    1a74:	68 83       	st	Y, r22
    1a76:	79 83       	std	Y+1, r23	; 0x01
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    1a7a:	9b 83       	std	Y+3, r25	; 0x03
    1a7c:	cd 57       	subi	r28, 0x7D	; 125
    1a7e:	d0 40       	sbci	r29, 0x00	; 0
	ret->RSSI = gsm.getRSSI();
    1a80:	8e e6       	ldi	r24, 0x6E	; 110
    1a82:	93 e0       	ldi	r25, 0x03	; 3
    1a84:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN10GsmManager7getRSSIEv>
    1a88:	f3 01       	movw	r30, r6
    1a8a:	86 87       	std	Z+14, r24	; 0x0e
	ret->NetworkStatus = gsm.getNetworkStatus();
    1a8c:	8e e6       	ldi	r24, 0x6E	; 110
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN10GsmManager16getNetworkStatusEv>
    1a94:	d3 01       	movw	r26, r6
    1a96:	1d 96       	adiw	r26, 0x0d	; 13
    1a98:	8c 93       	st	X, r24
	
	//Get battery pct
	uint16_t batPct=0;
    1a9a:	1e 8a       	std	Y+22, r1	; 0x16
    1a9c:	1d 8a       	std	Y+21, r1	; 0x15
	if (!gsm.getBattPercent(&batPct))
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6b 5e       	subi	r22, 0xEB	; 235
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	8e e6       	ldi	r24, 0x6E	; 110
    1aa6:	93 e0       	ldi	r25, 0x03	; 3
    1aa8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN10GsmManager14getBattPercentEPj>
    1aac:	81 11       	cpse	r24, r1
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <_Z20execTransmitReadingsP14DailyCycleData+0xf2>
		ret->GetBatteryFailure = true;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	f3 01       	movw	r30, r6
    1ab4:	85 83       	std	Z+5, r24	; 0x05
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <_Z20execTransmitReadingsP14DailyCycleData+0xfa>
	else
		ret->BattPct = batPct;
    1ab8:	8d 89       	ldd	r24, Y+21	; 0x15
    1aba:	d3 01       	movw	r26, r6
    1abc:	1c 96       	adiw	r26, 0x0c	; 12
    1abe:	8c 93       	st	X, r24
	//Even if no ret.NoOfReadings == 0, still get signal etc data and store/send
	
	//char buffer
	//TODO: Test correctness with increasing buffer sizes to get optimal
  	uint16_t DATA_BUFFER_LEN = 100;
  	char strBuffer[DATA_BUFFER_LEN]=""; //TODO: MAX?
    1ac0:	1a 8e       	std	Y+26, r1	; 0x1a
    1ac2:	19 8e       	std	Y+25, r1	; 0x19
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	7b 96       	adiw	r30, 0x1b	; 27
    1ac8:	82 e6       	ldi	r24, 0x62	; 98
    1aca:	df 01       	movw	r26, r30
    1acc:	1d 92       	st	X+, r1
    1ace:	8a 95       	dec	r24
    1ad0:	e9 f7       	brne	.-6      	; 0x1acc <_Z20execTransmitReadingsP14DailyCycleData+0x106>

  	ret->GsmMessageLength =
		prepareDataForGPRS(dszReadings, actLoadCount, moduleId, ret->BootNo,
    1ad2:	f3 01       	movw	r30, r6
    1ad4:	e0 80       	ld	r14, Z
    1ad6:	f1 80       	ldd	r15, Z+1	; 0x01
    1ad8:	02 81       	ldd	r16, Z+2	; 0x02
    1ada:	13 81       	ldd	r17, Z+3	; 0x03
    1adc:	8d 88       	ldd	r8, Y+21	; 0x15
    1ade:	9e 88       	ldd	r9, Y+22	; 0x16
    1ae0:	1f 92       	push	r1
    1ae2:	84 e6       	ldi	r24, 0x64	; 100
    1ae4:	8f 93       	push	r24
    1ae6:	2e 01       	movw	r4, r28
    1ae8:	f9 e1       	ldi	r31, 0x19	; 25
    1aea:	4f 0e       	add	r4, r31
    1aec:	51 1c       	adc	r5, r1
    1aee:	5f 92       	push	r5
    1af0:	4f 92       	push	r4
    1af2:	d3 01       	movw	r26, r6
    1af4:	1e 96       	adiw	r26, 0x0e	; 14
    1af6:	ac 90       	ld	r10, X
    1af8:	1e 97       	sbiw	r26, 0x0e	; 14
    1afa:	1d 96       	adiw	r26, 0x0d	; 13
    1afc:	cc 90       	ld	r12, X
    1afe:	c3 58       	subi	r28, 0x83	; 131
    1b00:	df 4f       	sbci	r29, 0xFF	; 255
    1b02:	28 81       	ld	r18, Y
    1b04:	39 81       	ldd	r19, Y+1	; 0x01
    1b06:	4a 81       	ldd	r20, Y+2	; 0x02
    1b08:	5b 81       	ldd	r21, Y+3	; 0x03
    1b0a:	cd 57       	subi	r28, 0x7D	; 125
    1b0c:	d0 40       	sbci	r29, 0x00	; 0
    1b0e:	6d 2d       	mov	r22, r13
    1b10:	7b 2d       	mov	r23, r11
    1b12:	ce 01       	movw	r24, r28
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	0e 94 07 0c 	call	0x180e	; 0x180e <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>
						ret->NetworkStatus, ret->RSSI, batPct, strBuffer, DATA_BUFFER_LEN);
    1b1a:	f3 01       	movw	r30, r6
    1b1c:	90 87       	std	Z+8, r25	; 0x08
    1b1e:	87 83       	std	Z+7, r24	; 0x07


volatile int test = strlen(strBuffer);
    1b20:	f2 01       	movw	r30, r4
    1b22:	01 90       	ld	r0, Z+
    1b24:	00 20       	and	r0, r0
    1b26:	e9 f7       	brne	.-6      	; 0x1b22 <_Z20execTransmitReadingsP14DailyCycleData+0x15c>
    1b28:	31 97       	sbiw	r30, 0x01	; 1
    1b2a:	e4 19       	sub	r30, r4
    1b2c:	f5 09       	sbc	r31, r5
    1b2e:	f8 8f       	std	Y+24, r31	; 0x18
    1b30:	ef 8b       	std	Y+23, r30	; 0x17
	//Send via GPRS - on failure, try SMS
	ret->GsmFailureCode = sendViaGprs(strBuffer);
    1b32:	c2 01       	movw	r24, r4
    1b34:	0e 94 27 0a 	call	0x144e	; 0x144e <_Z11sendViaGprsPc>
    1b38:	d3 01       	movw	r26, r6
    1b3a:	1a 96       	adiw	r26, 0x0a	; 10
    1b3c:	9c 93       	st	X, r25
    1b3e:	8e 93       	st	-X, r24
    1b40:	19 97       	sbiw	r26, 0x09	; 9

	if (ret->GsmFailureCode > 0) {
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	89 2b       	or	r24, r25
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <_Z20execTransmitReadingsP14DailyCycleData+0x18a>
    1b4e:	47 c0       	rjmp	.+142    	; 0x1bde <_Z20execTransmitReadingsP14DailyCycleData+0x218>
														RM_LOG2(F("GPRS Failed-Trying SMS..."),ret->GsmFailureCode);
    1b50:	60 ee       	ldi	r22, 0xE0	; 224
    1b52:	72 e0       	ldi	r23, 0x02	; 2
    1b54:	83 e5       	ldi	r24, 0x53	; 83
    1b56:	96 e0       	ldi	r25, 0x06	; 6
    1b58:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    1b5c:	6a e5       	ldi	r22, 0x5A	; 90
    1b5e:	72 e0       	ldi	r23, 0x02	; 2
    1b60:	83 e5       	ldi	r24, 0x53	; 83
    1b62:	96 e0       	ldi	r25, 0x06	; 6
    1b64:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    1b68:	f3 01       	movw	r30, r6
    1b6a:	61 85       	ldd	r22, Z+9	; 0x09
    1b6c:	72 85       	ldd	r23, Z+10	; 0x0a
    1b6e:	4a e0       	ldi	r20, 0x0A	; 10
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	83 e5       	ldi	r24, 0x53	; 83
    1b74:	96 e0       	ldi	r25, 0x06	; 6
    1b76:	0e 94 18 21 	call	0x4230	; 0x4230 <_ZN5Print7printlnEji>
		memset(strBuffer, 0, DATA_BUFFER_LEN); //TODO: TEST
    1b7a:	84 e6       	ldi	r24, 0x64	; 100
    1b7c:	d2 01       	movw	r26, r4
    1b7e:	1d 92       	st	X+, r1
    1b80:	8a 95       	dec	r24
    1b82:	e9 f7       	brne	.-6      	; 0x1b7e <_Z20execTransmitReadingsP14DailyCycleData+0x1b8>
		const uint8_t SMS_LIMIT = 140;

		prepareDataForSMS(dszReadings, actLoadCount, strBuffer, SMS_LIMIT);
														RM_LOG2(F("Sending Sensors Cmpt"),strBuffer);
    1b84:	6b ec       	ldi	r22, 0xCB	; 203
    1b86:	72 e0       	ldi	r23, 0x02	; 2
    1b88:	83 e5       	ldi	r24, 0x53	; 83
    1b8a:	96 e0       	ldi	r25, 0x06	; 6
    1b8c:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    1b90:	6a e5       	ldi	r22, 0x5A	; 90
    1b92:	72 e0       	ldi	r23, 0x02	; 2
    1b94:	83 e5       	ldi	r24, 0x53	; 83
    1b96:	96 e0       	ldi	r25, 0x06	; 6
    1b98:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    1b9c:	b2 01       	movw	r22, r4
    1b9e:	83 e5       	ldi	r24, 0x53	; 83
    1ba0:	96 e0       	ldi	r25, 0x06	; 6
    1ba2:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
		ret->SmsFailureCode = sendViaSms(strBuffer);
    1ba6:	c2 01       	movw	r24, r4
    1ba8:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z10sendViaSmsPc>
    1bac:	f3 01       	movw	r30, r6
    1bae:	83 87       	std	Z+11, r24	; 0x0b
		if (ret->SmsFailureCode > 0) {
    1bb0:	88 23       	and	r24, r24
    1bb2:	a9 f0       	breq	.+42     	; 0x1bde <_Z20execTransmitReadingsP14DailyCycleData+0x218>
														RM_LOG2(F("SMS Send Failed !!"), ret->SmsFailureCode);
    1bb4:	68 eb       	ldi	r22, 0xB8	; 184
    1bb6:	72 e0       	ldi	r23, 0x02	; 2
    1bb8:	83 e5       	ldi	r24, 0x53	; 83
    1bba:	96 e0       	ldi	r25, 0x06	; 6
    1bbc:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    1bc0:	6a e5       	ldi	r22, 0x5A	; 90
    1bc2:	72 e0       	ldi	r23, 0x02	; 2
    1bc4:	83 e5       	ldi	r24, 0x53	; 83
    1bc6:	96 e0       	ldi	r25, 0x06	; 6
    1bc8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    1bcc:	d3 01       	movw	r26, r6
    1bce:	1b 96       	adiw	r26, 0x0b	; 11
    1bd0:	6c 91       	ld	r22, X
    1bd2:	4a e0       	ldi	r20, 0x0A	; 10
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	83 e5       	ldi	r24, 0x53	; 83
    1bd8:	96 e0       	ldi	r25, 0x06	; 6
    1bda:	0e 94 00 21 	call	0x4200	; 0x4200 <_ZN5Print7printlnEhi>
			//If even SMS is failing, can't do much
		}
	}
	
	//Only update sent-to flag if actually changed
	if (ret->NoOfReadings > 0 &&
    1bde:	f3 01       	movw	r30, r6
    1be0:	86 81       	ldd	r24, Z+6	; 0x06
    1be2:	88 23       	and	r24, r24
    1be4:	79 f0       	breq	.+30     	; 0x1c04 <_Z20execTransmitReadingsP14DailyCycleData+0x23e>
	   (ret->GsmFailureCode == 0 || ret->SmsFailureCode == 0))
    1be6:	81 85       	ldd	r24, Z+9	; 0x09
    1be8:	92 85       	ldd	r25, Z+10	; 0x0a
			//If even SMS is failing, can't do much
		}
	}
	
	//Only update sent-to flag if actually changed
	if (ret->NoOfReadings > 0 &&
    1bea:	89 2b       	or	r24, r25
    1bec:	19 f0       	breq	.+6      	; 0x1bf4 <_Z20execTransmitReadingsP14DailyCycleData+0x22e>
	   (ret->GsmFailureCode == 0 || ret->SmsFailureCode == 0))
    1bee:	83 85       	ldd	r24, Z+11	; 0x0b
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <_Z20execTransmitReadingsP14DailyCycleData+0x23e>
	{
		mem.markDataSent(loadedUpTo);
    1bf4:	49 89       	ldd	r20, Y+17	; 0x11
    1bf6:	5a 89       	ldd	r21, Y+18	; 0x12
    1bf8:	6b 89       	ldd	r22, Y+19	; 0x13
    1bfa:	7c 89       	ldd	r23, Y+20	; 0x14
    1bfc:	8f e8       	ldi	r24, 0x8F	; 143
    1bfe:	94 e0       	ldi	r25, 0x04	; 4
    1c00:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN12RmMemManager12markDataSentEm>
 	}
}
    1c04:	c0 58       	subi	r28, 0x80	; 128
    1c06:	df 4f       	sbci	r29, 0xFF	; 255
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	bf 90       	pop	r11
    1c24:	af 90       	pop	r10
    1c26:	9f 90       	pop	r9
    1c28:	8f 90       	pop	r8
    1c2a:	7f 90       	pop	r7
    1c2c:	6f 90       	pop	r6
    1c2e:	5f 90       	pop	r5
    1c30:	4f 90       	pop	r4
    1c32:	08 95       	ret

00001c34 <_Z18ensureBatteryLevelv>:


/********************************************************/
/********************** Battery *************************/
/********************************************************/
bool ensureBatteryLevel() {
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <_Z18ensureBatteryLevelv+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62

     uint16_t vbat;
     if (!gsm.getBattPercent(&vbat)) {
    1c40:	be 01       	movw	r22, r28
    1c42:	6f 5f       	subi	r22, 0xFF	; 255
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8e e6       	ldi	r24, 0x6E	; 110
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN10GsmManager14getBattPercentEPj>
    1c4e:	18 2f       	mov	r17, r24
    1c50:	81 11       	cpse	r24, r1
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <_Z18ensureBatteryLevelv+0x2e>
                                                    RM_LOG(F("BatteryLevel Failed"));
    1c54:	64 e9       	ldi	r22, 0x94	; 148
    1c56:	72 e0       	ldi	r23, 0x02	; 2
    1c58:	83 e5       	ldi	r24, 0x53	; 83
    1c5a:	96 e0       	ldi	r25, 0x06	; 6
    1c5c:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false; //Don't keep up module if can't get battery level.
    1c60:	1b c0       	rjmp	.+54     	; 0x1c98 <_Z18ensureBatteryLevelv+0x64>
    } else {
                                                    RM_LOG2(F("BatteryLevel Retrieved"), vbat);
    1c62:	6d e7       	ldi	r22, 0x7D	; 125
    1c64:	72 e0       	ldi	r23, 0x02	; 2
    1c66:	83 e5       	ldi	r24, 0x53	; 83
    1c68:	96 e0       	ldi	r25, 0x06	; 6
    1c6a:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    1c6e:	6a e5       	ldi	r22, 0x5A	; 90
    1c70:	72 e0       	ldi	r23, 0x02	; 2
    1c72:	83 e5       	ldi	r24, 0x53	; 83
    1c74:	96 e0       	ldi	r25, 0x06	; 6
    1c76:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    1c7a:	69 81       	ldd	r22, Y+1	; 0x01
    1c7c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c7e:	4a e0       	ldi	r20, 0x0A	; 10
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	83 e5       	ldi	r24, 0x53	; 83
    1c84:	96 e0       	ldi	r25, 0x06	; 6
    1c86:	0e 94 18 21 	call	0x4230	; 0x4230 <_ZN5Print7printlnEji>
        //Require charging if less than threshold
        return vbat <= 80;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	11 e0       	ldi	r17, 0x01	; 1
    1c90:	81 35       	cpi	r24, 0x51	; 81
    1c92:	91 05       	cpc	r25, r1
    1c94:	08 f0       	brcs	.+2      	; 0x1c98 <_Z18ensureBatteryLevelv+0x64>
    1c96:	10 e0       	ldi	r17, 0x00	; 0
    }
}
    1c98:	81 2f       	mov	r24, r17
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	08 95       	ret

00001ca6 <_Z9loopCyclev>:
//					If EOD, transmit readings
//					If Battery low, keep system up to charge it
//			loop() shuts down module when loopCycles says not to wait any more

//A cycle runs about every hour
boolean loopCycle() {
    1ca6:	cf 93       	push	r28
  
  boolean doContinueCycle = false;

  //Read sensors for 10 secs
  if (!timer._has10SecsElapsed) { //MATCH-R-TIME
    1ca8:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <timer+0x16>
    1cac:	81 11       	cpse	r24, r1
    1cae:	0a c0       	rjmp	.+20     	; 0x1cc4 <_Z9loopCyclev+0x1e>
                                                    RM_LOG(F("Reading sensors..."));
    1cb0:	61 e3       	ldi	r22, 0x31	; 49
    1cb2:	73 e0       	ldi	r23, 0x03	; 3
    1cb4:	83 e5       	ldi	r24, 0x53	; 83
    1cb6:	96 e0       	ldi	r25, 0x06	; 6
    1cb8:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
	  toggleSystemState(SysState_TakingReadings);
      readSensorsAsync();
    1cbc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_Z16readSensorsAsyncv>
	  
	  doContinueCycle |= true;
    1cc0:	c1 e0       	ldi	r28, 0x01	; 1
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <_Z9loopCyclev+0x20>
//			loop() shuts down module when loopCycles says not to wait any more

//A cycle runs about every hour
boolean loopCycle() {
  
  boolean doContinueCycle = false;
    1cc4:	c0 e0       	ldi	r28, 0x00	; 0
	  
	  doContinueCycle |= true;
  }

  //At the 10 sec mark, save readings down once if 'better'
  if (timer._at10Secs) { //MATCH-R-TIME
    1cc6:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <timer+0xc>
    1cca:	88 23       	and	r24, r24
    1ccc:	41 f0       	breq	.+16     	; 0x1cde <_Z9loopCyclev+0x38>
													RM_LOG(F("Persisting sensor data..."));
    1cce:	67 e1       	ldi	r22, 0x17	; 23
    1cd0:	73 e0       	ldi	r23, 0x03	; 3
    1cd2:	83 e5       	ldi	r24, 0x53	; 83
    1cd4:	96 e0       	ldi	r25, 0x06	; 6
    1cd6:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
	  toggleSystemState(~SysState_TakingReadings);
	  persistSensorData();
    1cda:	0e 94 88 0a 	call	0x1510	; 0x1510 <_Z17persistSensorDatav>
  }
  
  //Once a day, send sensor data
  if (_isEndOfDayCycle) {
    1cde:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <_isEndOfDayCycle>
    1ce2:	88 23       	and	r24, r24
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <_Z9loopCyclev+0x42>
    1ce6:	4c c0       	rjmp	.+152    	; 0x1d80 <_Z9loopCyclev+0xda>
                                                    RM_LOG(F("In Daily Cycle..."));
    1ce8:	65 e0       	ldi	r22, 0x05	; 5
    1cea:	73 e0       	ldi	r23, 0x03	; 3
    1cec:	83 e5       	ldi	r24, 0x53	; 83
    1cee:	96 e0       	ldi	r25, 0x06	; 6
    1cf0:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
	//Initialize GPRS module so it can load whilst readings are collected
	//Note: All reads and writes to global _dailyCycleData are done here to prevent global state use
	if (_isAtCycleStart)
    1cf4:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_isAtCycleStart>
    1cf8:	88 23       	and	r24, r24
    1cfa:	e9 f0       	breq	.+58     	; 0x1d36 <_Z9loopCyclev+0x90>
	{
		_dailyCycleData = new DailyCycleData();
    1cfc:	81 e1       	ldi	r24, 0x11	; 17
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_Znwj>
    1d04:	21 e1       	ldi	r18, 0x11	; 17
    1d06:	fc 01       	movw	r30, r24
    1d08:	11 92       	st	Z+, r1
    1d0a:	2a 95       	dec	r18
    1d0c:	e9 f7       	brne	.-6      	; 0x1d08 <_Z9loopCyclev+0x62>
	//bool           HasBeenSent	= false;
} SensorData;


/* Stored in ROM and attempted to be sent every day along with readings */
typedef struct DailyCycleData {
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e4       	ldi	r19, 0x40	; 64
    1d12:	fc 01       	movw	r30, r24
    1d14:	30 8b       	std	Z+16, r19	; 0x10
    1d16:	27 87       	std	Z+15, r18	; 0x0f
    1d18:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <_dailyCycleData+0x1>
    1d1c:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <_dailyCycleData>

		if (!toggleGPRS(true))
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_Z10toggleGPRSb>
    1d26:	81 11       	cpse	r24, r1
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <_Z9loopCyclev+0x90>
		{
			_dailyCycleData->GPRSToggleFailure = true;
    1d2a:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <_dailyCycleData>
    1d2e:	f0 91 38 03 	lds	r31, 0x0338	; 0x800338 <_dailyCycleData+0x1>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	84 83       	std	Z+4, r24	; 0x04
			//2) we don't need a separate code flow for doing the above in failure case
		}
	}
	
	//Wait a minute to acquire signal before sending the data
	if (timer._at1Min) {
    1d36:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <timer+0xd>
    1d3a:	88 23       	and	r24, r24
    1d3c:	31 f0       	breq	.+12     	; 0x1d4a <_Z9loopCyclev+0xa4>
		//We try and send even if GPRS didn't toggle on above incase toggle was a false -ve
		execTransmitReadings(_dailyCycleData);
    1d3e:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_dailyCycleData>
    1d42:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_dailyCycleData+0x1>
    1d46:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z20execTransmitReadingsP14DailyCycleData>
	}
		
	//Give it time to flush the buffer before shutting down - TODO: necessary?
	if (timer._at1Min30Secs)
    1d4a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <timer+0xe>
    1d4e:	88 23       	and	r24, r24
    1d50:	91 f0       	breq	.+36     	; 0x1d76 <_Z9loopCyclev+0xd0>
	{
		//Store a record of SystemStates on this daily transmit cycle
		_dailyCycleData->SystemState = _currSystemState; //TODO: Necessary?
    1d52:	60 91 37 03 	lds	r22, 0x0337	; 0x800337 <_dailyCycleData>
    1d56:	70 91 38 03 	lds	r23, 0x0338	; 0x800338 <_dailyCycleData+0x1>
    1d5a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_currSystemState>
    1d5e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_currSystemState+0x1>
    1d62:	fb 01       	movw	r30, r22
    1d64:	90 8b       	std	Z+16, r25	; 0x10
    1d66:	87 87       	std	Z+15, r24	; 0x0f
		mem.appendDailyEntry(_dailyCycleData);
    1d68:	8f e8       	ldi	r24, 0x8F	; 143
    1d6a:	94 e0       	ldi	r25, 0x04	; 4
    1d6c:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
		//Done sending - shut down GPRS
		toggleGPRS(false); //Ignore failure
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_Z10toggleGPRSb>
	}
		
	doContinueCycle |= !timer._has1Min30SecsElapsed;
    1d76:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <timer+0x13>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 27       	eor	r24, r25
    1d7e:	c8 2b       	or	r28, r24
  } //End is-daily-cycle

  //Check battery level at start of a cycle
  if (_isAtCycleStart) {
    1d80:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_isAtCycleStart>
    1d84:	88 23       	and	r24, r24
    1d86:	d1 f0       	breq	.+52     	; 0x1dbc <_Z9loopCyclev+0x116>
                                                    RM_LOG2(F("FreeMemory"), get_free_memory());
    1d88:	6a ef       	ldi	r22, 0xFA	; 250
    1d8a:	72 e0       	ldi	r23, 0x02	; 2
    1d8c:	83 e5       	ldi	r24, 0x53	; 83
    1d8e:	96 e0       	ldi	r25, 0x06	; 6
    1d90:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    1d94:	6a e5       	ldi	r22, 0x5A	; 90
    1d96:	72 e0       	ldi	r23, 0x02	; 2
    1d98:	83 e5       	ldi	r24, 0x53	; 83
    1d9a:	96 e0       	ldi	r25, 0x06	; 6
    1d9c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    1da0:	0e 94 39 09 	call	0x1272	; 0x1272 <_Z15get_free_memoryv>
    1da4:	4a e0       	ldi	r20, 0x0A	; 10
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	bc 01       	movw	r22, r24
    1daa:	83 e5       	ldi	r24, 0x53	; 83
    1dac:	96 e0       	ldi	r25, 0x06	; 6
    1dae:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print7printlnEii>
      bool needsCharging = ensureBatteryLevel();
    1db2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_Z18ensureBatteryLevelv>
      _chargingInProgress = needsCharging;
    1db6:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_chargingInProgress>
    1dba:	c8 2b       	or	r28, r24

      doContinueCycle |= needsCharging;
  }

  if (_chargingInProgress) {
    1dbc:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_chargingInProgress>
    1dc0:	88 23       	and	r24, r24
    1dc2:	c1 f0       	breq	.+48     	; 0x1df4 <_Z9loopCyclev+0x14e>

	  toggleSystemState(SysState_IsCharging);
	  
      if (timer._at30SecInterval) {
    1dc4:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <timer+0x11>
    1dc8:	88 23       	and	r24, r24
    1dca:	99 f0       	breq	.+38     	; 0x1df2 <_Z9loopCyclev+0x14c>
          bool needsCharging = ensureBatteryLevel();
    1dcc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_Z18ensureBatteryLevelv>

          //Charge for 15 mins max - battery may have low rate now
          bool doneCharging = !needsCharging || timer._has15MinElapsed;
    1dd0:	88 23       	and	r24, r24
    1dd2:	31 f0       	breq	.+12     	; 0x1de0 <_Z9loopCyclev+0x13a>
    1dd4:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <timer+0x17>
    1dd8:	88 23       	and	r24, r24
    1dda:	21 f0       	breq	.+8      	; 0x1de4 <_Z9loopCyclev+0x13e>
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <_Z9loopCyclev+0x140>
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <_Z9loopCyclev+0x140>
    1de4:	90 e0       	ldi	r25, 0x00	; 0

          _chargingInProgress =   !doneCharging;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	89 27       	eor	r24, r25
    1dea:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_chargingInProgress>
    1dee:	c8 2b       	or	r28, r24
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <_Z9loopCyclev+0x14e>
          doContinueCycle |=      !doneCharging;
      }
      else
          doContinueCycle |= true;
    1df2:	c1 e0       	ldi	r28, 0x01	; 1
  else{
	  toggleSystemState(~SysState_IsCharging);
  }
  
  return doContinueCycle;
}
    1df4:	8c 2f       	mov	r24, r28
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <_Z8postLoopv>:
void preLoop(){
#ifdef UNIT_TESTS
	runPreLoopForTest();
#endif
}
void postLoop(){}
    1dfa:	08 95       	ret

00001dfc <_Z10assertTrueb>:
/****************************************************/
/********************** TESTING *********************/
/****************************************************/
#ifdef UNIT_TESTS
void assertTrue(bool val)
{
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <_Z10assertTrueb+0x6>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	if (!val){
    1e06:	81 11       	cpse	r24, r1
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <_Z10assertTrueb+0x1e>
		volatile int failure=10/0; //Main Assert
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	69 83       	std	Y+1, r22	; 0x01
	}
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <_Z9assertIntjjPc>:

void assertInt(volatile unsigned int expected, volatile unsigned int actual, char* msg = NULL)
{
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <_Z9assertIntjjPc+0x6>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <_Z9assertIntjjPc+0x8>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	7c 83       	std	Y+4, r23	; 0x04
    1e36:	6b 83       	std	Y+3, r22	; 0x03
	assertTrue(expected == actual);
    1e38:	49 81       	ldd	r20, Y+1	; 0x01
    1e3a:	5a 81       	ldd	r21, Y+2	; 0x02
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	42 17       	cp	r20, r18
    1e44:	53 07       	cpc	r21, r19
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <_Z9assertIntjjPc+0x26>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <_Z6assertmmPc>:

void assert(volatile unsigned long expected, volatile unsigned long actual, char* msg = NULL)
{
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	28 97       	sbiw	r28, 0x08	; 8
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	69 83       	std	Y+1, r22	; 0x01
    1e76:	7a 83       	std	Y+2, r23	; 0x02
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	2d 83       	std	Y+5, r18	; 0x05
    1e7e:	3e 83       	std	Y+6, r19	; 0x06
    1e80:	4f 83       	std	Y+7, r20	; 0x07
    1e82:	58 87       	std	Y+8, r21	; 0x08
	assertTrue(expected == actual);
    1e84:	09 81       	ldd	r16, Y+1	; 0x01
    1e86:	1a 81       	ldd	r17, Y+2	; 0x02
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	4d 81       	ldd	r20, Y+5	; 0x05
    1e8e:	5e 81       	ldd	r21, Y+6	; 0x06
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	04 17       	cp	r16, r20
    1e98:	15 07       	cpc	r17, r21
    1e9a:	26 07       	cpc	r18, r22
    1e9c:	37 07       	cpc	r19, r23
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <_Z6assertmmPc+0x46>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
}
    1ea6:	28 96       	adiw	r28, 0x08	; 8
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <_Z26assertCharStringsIdenticalPKcS0_i>:

void assertCharStringsIdentical(const char* expected, const char* actualRaw, int len_TODO=-1)
{
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <_Z26assertCharStringsIdenticalPKcS0_i+0x6>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <_Z26assertCharStringsIdenticalPKcS0_i+0x8>
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	unsigned volatile int cmp = strcmp(expected, actualRaw);
    1ec8:	0e 94 8b 33 	call	0x6716	; 0x6716 <strcmp>
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	unsigned volatile int res = cmp==0;
    1ed0:	29 81       	ldd	r18, Y+1	; 0x01
    1ed2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	23 2b       	or	r18, r19
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <_Z26assertCharStringsIdenticalPKcS0_i+0x24>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
	
	assertTrue(res);
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	23 2b       	or	r18, r19
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <_Z26assertCharStringsIdenticalPKcS0_i+0x34>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <_Z22assertStringsIdenticalRK6StringPKci>:

void assertStringsIdentical(const String& expected, const char* actualRaw, int len_TODO=-1)
{
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	28 97       	sbiw	r28, 0x08	; 8
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	7c 01       	movw	r14, r24
    1f20:	8b 01       	movw	r16, r22
	String actual(actualRaw);
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	0e 94 c0 23 	call	0x4780	; 0x4780 <_ZN6StringC1EPKc>
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
    1f2a:	b8 01       	movw	r22, r16
    1f2c:	f7 01       	movw	r30, r14
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	0e 94 8b 33 	call	0x6716	; 0x6716 <strcmp>
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	89 2b       	or	r24, r25
    1f3c:	11 f0       	breq	.+4      	; 0x1f42 <_Z22assertStringsIdenticalRK6StringPKci+0x40>
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	38 87       	std	Y+8, r19	; 0x08
    1f44:	2f 83       	std	Y+7, r18	; 0x07
	
	assertTrue(res);
    1f46:	2f 81       	ldd	r18, Y+7	; 0x07
    1f48:	38 85       	ldd	r19, Y+8	; 0x08
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	23 2b       	or	r18, r19
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <_Z22assertStringsIdenticalRK6StringPKci+0x50>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
	assertTrue(res);
}

void assertStringsIdentical(const String& expected, const char* actualRaw, int len_TODO=-1)
{
	String actual(actualRaw);
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN6StringD1Ev>
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
	
	assertTrue(res);
}
    1f5e:	28 96       	adiw	r28, 0x08	; 8
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	08 95       	ret

00001f78 <_Z23assertReadingsIdentical10SensorDataS_>:
//{
	//return assertStringsIdentical(expected, actual.c_str());
//}

void assertReadingsIdentical(SensorData expected, SensorData r1)
{
    1f78:	af 92       	push	r10
    1f7a:	bf 92       	push	r11
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	60 97       	sbiw	r28, 0x10	; 16
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	29 83       	std	Y+1, r18	; 0x01
    1f9e:	3a 83       	std	Y+2, r19	; 0x02
    1fa0:	4b 83       	std	Y+3, r20	; 0x03
    1fa2:	5c 83       	std	Y+4, r21	; 0x04
    1fa4:	6d 83       	std	Y+5, r22	; 0x05
    1fa6:	7e 83       	std	Y+6, r23	; 0x06
    1fa8:	8f 83       	std	Y+7, r24	; 0x07
    1faa:	98 87       	std	Y+8, r25	; 0x08
    1fac:	a9 86       	std	Y+9, r10	; 0x09
    1fae:	ba 86       	std	Y+10, r11	; 0x0a
    1fb0:	cb 86       	std	Y+11, r12	; 0x0b
    1fb2:	dc 86       	std	Y+12, r13	; 0x0c
    1fb4:	ed 86       	std	Y+13, r14	; 0x0d
    1fb6:	fe 86       	std	Y+14, r15	; 0x0e
    1fb8:	0f 87       	std	Y+15, r16	; 0x0f
    1fba:	18 8b       	std	Y+16, r17	; 0x10
	assert(expected.BattVoltage, r1.BattVoltage, "batt");
    1fbc:	29 85       	ldd	r18, Y+9	; 0x09
    1fbe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	69 81       	ldd	r22, Y+1	; 0x01
    1fc6:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0c e5       	ldi	r16, 0x5C	; 92
    1fce:	12 e0       	ldi	r17, 0x02	; 2
    1fd0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
	assert(expected.Current, r1.Current, "current");
    1fd4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fd6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	6b 81       	ldd	r22, Y+3	; 0x03
    1fde:	7c 81       	ldd	r23, Y+4	; 0x04
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	01 e6       	ldi	r16, 0x61	; 97
    1fe6:	12 e0       	ldi	r17, 0x02	; 2
    1fe8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
	assert(expected.PVVoltage, r1.PVVoltage, "pv");
    1fec:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fee:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ff6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	09 e6       	ldi	r16, 0x69	; 105
    1ffe:	12 e0       	ldi	r17, 0x02	; 2
    2000:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
	assert(expected.Temperature, r1.Temperature, "temp");
    2004:	2f 85       	ldd	r18, Y+15	; 0x0f
    2006:	38 89       	ldd	r19, Y+16	; 0x10
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0c e6       	ldi	r16, 0x6C	; 108
    2016:	12 e0       	ldi	r17, 0x02	; 2
    2018:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
	//assert(expected.ErrorChar, r1.ErrorChar, "errorCode");
}
    201c:	60 96       	adiw	r28, 0x10	; 16
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	bf 90       	pop	r11
    203a:	af 90       	pop	r10
    203c:	08 95       	ret

0000203e <_Z17createMockReadingbc>:


int _mockNo = 0;
SensorData createMockReading(bool append = true, char errorChar = 0)
{
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	60 97       	sbiw	r28, 0x10	; 16
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
	++_mockNo;
    2052:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <_mockNo>
    2056:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <_mockNo+0x1>
    205a:	2f 5f       	subi	r18, 0xFF	; 255
    205c:	3f 4f       	sbci	r19, 0xFF	; 255
    205e:	30 93 29 03 	sts	0x0329, r19	; 0x800329 <_mockNo+0x1>
    2062:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <_mockNo>
	
	SensorData r2;
    2066:	fe 01       	movw	r30, r28
    2068:	39 96       	adiw	r30, 0x09	; 9
    206a:	98 e0       	ldi	r25, 0x08	; 8
    206c:	df 01       	movw	r26, r30
    206e:	1d 92       	st	X+, r1
    2070:	9a 95       	dec	r25
    2072:	e9 f7       	brne	.-6      	; 0x206e <_Z17createMockReadingbc+0x30>
	r2.BattVoltage=_mockNo*2;
    2074:	a9 01       	movw	r20, r18
    2076:	44 0f       	add	r20, r20
    2078:	55 1f       	adc	r21, r21
    207a:	5a 87       	std	Y+10, r21	; 0x0a
    207c:	49 87       	std	Y+9, r20	; 0x09
	r2.Current=_mockNo*30;
    207e:	9e e1       	ldi	r25, 0x1E	; 30
    2080:	92 9f       	mul	r25, r18
    2082:	a0 01       	movw	r20, r0
    2084:	93 9f       	mul	r25, r19
    2086:	50 0d       	add	r21, r0
    2088:	11 24       	eor	r1, r1
    208a:	5c 87       	std	Y+12, r21	; 0x0c
    208c:	4b 87       	std	Y+11, r20	; 0x0b
	r2.PVVoltage=_mockNo*29;
    208e:	9d e1       	ldi	r25, 0x1D	; 29
    2090:	92 9f       	mul	r25, r18
    2092:	a0 01       	movw	r20, r0
    2094:	93 9f       	mul	r25, r19
    2096:	50 0d       	add	r21, r0
    2098:	11 24       	eor	r1, r1
    209a:	5e 87       	std	Y+14, r21	; 0x0e
    209c:	4d 87       	std	Y+13, r20	; 0x0d
	r2.Temperature=_mockNo*37;
    209e:	95 e2       	ldi	r25, 0x25	; 37
    20a0:	92 9f       	mul	r25, r18
    20a2:	a0 01       	movw	r20, r0
    20a4:	93 9f       	mul	r25, r19
    20a6:	50 0d       	add	r21, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	58 8b       	std	Y+16, r21	; 0x10
    20ac:	4f 87       	std	Y+15, r20	; 0x0f
	//r2.ErrorChar=errorChar;
	if (append)
    20ae:	88 23       	and	r24, r24
    20b0:	29 f0       	breq	.+10     	; 0x20bc <_Z17createMockReadingbc+0x7e>
		mem.appendSensorEntry(&r2);
    20b2:	bf 01       	movw	r22, r30
    20b4:	8f e8       	ldi	r24, 0x8F	; 143
    20b6:	94 e0       	ldi	r25, 0x04	; 4
    20b8:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	return r2;
    20bc:	88 e0       	ldi	r24, 0x08	; 8
    20be:	fe 01       	movw	r30, r28
    20c0:	39 96       	adiw	r30, 0x09	; 9
    20c2:	de 01       	movw	r26, r28
    20c4:	11 96       	adiw	r26, 0x01	; 1
    20c6:	01 90       	ld	r0, Z+
    20c8:	0d 92       	st	X+, r0
    20ca:	8a 95       	dec	r24
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <_Z17createMockReadingbc+0x88>
    20ce:	29 81       	ldd	r18, Y+1	; 0x01
    20d0:	3a 81       	ldd	r19, Y+2	; 0x02
    20d2:	4b 81       	ldd	r20, Y+3	; 0x03
    20d4:	5c 81       	ldd	r21, Y+4	; 0x04
    20d6:	6d 81       	ldd	r22, Y+5	; 0x05
    20d8:	7e 81       	ldd	r23, Y+6	; 0x06
}
    20da:	8f 81       	ldd	r24, Y+7	; 0x07
    20dc:	98 85       	ldd	r25, Y+8	; 0x08
    20de:	60 96       	adiw	r28, 0x10	; 16
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	08 95       	ret

000020f0 <_Z17runPreLoopForTestv>:

unsigned long _currLoopNo=0;
boolean _doInitializeModule = true; //Any test can call this to reset module
boolean _doSimulateFreshBoot = true; //Any test can call this
void runPreLoopForTest(){
	if (_doInitializeModule)
    20f0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_doInitializeModule>
    20f4:	88 23       	and	r24, r24
    20f6:	21 f0       	breq	.+8      	; 0x2100 <_Z17runPreLoopForTestv+0x10>
		initialiseModulePristine(1); //Reset module
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z24initialiseModulePristinej>
	
	if (_doSimulateFreshBoot)
    2100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_doSimulateFreshBoot>
    2104:	81 11       	cpse	r24, r1
		setupOnNewCycle(); //Simulate a fresh boot of system
    2106:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z15setupOnNewCyclev>
	
	_doInitializeModule=false;
    210a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_doInitializeModule>
	_doSimulateFreshBoot=false;
    210e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_doSimulateFreshBoot>
    2112:	08 95       	ret

00002114 <_Z7preLoopv>:



void preLoop(){
#ifdef UNIT_TESTS
	runPreLoopForTest();
    2114:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_Z17runPreLoopForTestv>
    2118:	08 95       	ret

0000211a <_Z11runLoadTestv>:
	assert(0, loadedTo);
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
#endif	

	return false;
}
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	08 95       	ret

0000211e <_Z10runPadTestv>:
	assertCharStringsIdentical("Serious Error", buff);
	memset(buff, 0, buffSz);

#endif
	return false;
}
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	08 95       	ret

00002122 <_Z11runSendTestv>:
	assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS) < 35); //Could also check for commas
	assert(5+3, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged

#endif
	return false;
}
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	08 95       	ret

00002126 <_Z23runIntraCycleTimerTestsv>:
	testTimer.onCycleLoop();
	assert(false, testTimer._at10Secs);

#endif
	return false;
}
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	08 95       	ret

0000212a <_Z23runInterCycleTimerTestsv>:

boolean runInterCycleTimerTests(){ //i.e. check the IsHourly and IsDaily flags
    212a:	cf 92       	push	r12
    212c:	df 92       	push	r13
    212e:	ef 92       	push	r14
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	69 97       	sbiw	r28, 0x19	; 25
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61

#ifdef UNIT_TESTS
	//Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);

	//Move forward and check daily-cycle flag set
	volatile uint32_t oneCycleTime = timer.getTimePerCycleInMs()/1000;
    214a:	81 e4       	ldi	r24, 0x41	; 65
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN6Timing19getTimePerCycleInMsEv>
    2152:	28 ee       	ldi	r18, 0xE8	; 232
    2154:	33 e0       	ldi	r19, 0x03	; 3
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    215e:	29 83       	std	Y+1, r18	; 0x01
    2160:	3a 83       	std	Y+2, r19	; 0x02
    2162:	4b 83       	std	Y+3, r20	; 0x03
    2164:	5c 83       	std	Y+4, r21	; 0x04
	//volatile uint32_t cyclesInOneDay = testTimer.getCyclesInOneDay();

	volatile uint32_t prevHour=(int)((_currCycleNumber-1)*oneCycleTime)/3600;
    2166:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <_currCycleNumber>
    216a:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    216e:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    2172:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    2176:	41 50       	subi	r20, 0x01	; 1
    2178:	51 09       	sbc	r21, r1
    217a:	61 09       	sbc	r22, r1
    217c:	71 09       	sbc	r23, r1
    217e:	c9 80       	ldd	r12, Y+1	; 0x01
    2180:	da 80       	ldd	r13, Y+2	; 0x02
    2182:	eb 80       	ldd	r14, Y+3	; 0x03
    2184:	fc 80       	ldd	r15, Y+4	; 0x04
    2186:	4c 9d       	mul	r20, r12
    2188:	c0 01       	movw	r24, r0
    218a:	4d 9d       	mul	r20, r13
    218c:	90 0d       	add	r25, r0
    218e:	5c 9d       	mul	r21, r12
    2190:	90 0d       	add	r25, r0
    2192:	11 24       	eor	r1, r1
    2194:	20 e1       	ldi	r18, 0x10	; 16
    2196:	3e e0       	ldi	r19, 0x0E	; 14
    2198:	b9 01       	movw	r22, r18
    219a:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    219e:	cb 01       	movw	r24, r22
    21a0:	77 0f       	add	r23, r23
    21a2:	aa 0b       	sbc	r26, r26
    21a4:	bb 0b       	sbc	r27, r27
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	af 83       	std	Y+7, r26	; 0x07
    21ac:	b8 87       	std	Y+8, r27	; 0x08
	volatile uint32_t currHour=(int)(_currCycleNumber*oneCycleTime)/3600;
    21ae:	c0 90 2f 03 	lds	r12, 0x032F	; 0x80032f <_currCycleNumber>
    21b2:	d0 90 30 03 	lds	r13, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    21b6:	e0 90 31 03 	lds	r14, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    21ba:	f0 90 32 03 	lds	r15, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    21be:	49 81       	ldd	r20, Y+1	; 0x01
    21c0:	5a 81       	ldd	r21, Y+2	; 0x02
    21c2:	6b 81       	ldd	r22, Y+3	; 0x03
    21c4:	7c 81       	ldd	r23, Y+4	; 0x04
    21c6:	c4 9e       	mul	r12, r20
    21c8:	c0 01       	movw	r24, r0
    21ca:	c5 9e       	mul	r12, r21
    21cc:	90 0d       	add	r25, r0
    21ce:	d4 9e       	mul	r13, r20
    21d0:	90 0d       	add	r25, r0
    21d2:	11 24       	eor	r1, r1
    21d4:	b9 01       	movw	r22, r18
    21d6:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    21da:	cb 01       	movw	r24, r22
    21dc:	77 0f       	add	r23, r23
    21de:	aa 0b       	sbc	r26, r26
    21e0:	bb 0b       	sbc	r27, r27
    21e2:	89 87       	std	Y+9, r24	; 0x09
    21e4:	9a 87       	std	Y+10, r25	; 0x0a
    21e6:	ab 87       	std	Y+11, r26	; 0x0b
    21e8:	bc 87       	std	Y+12, r27	; 0x0c

	//As timer is at every 45 mins, we expect this sequence for _isHourlyFlag
	boolean expected[] = {true/*@45 mins */, true, true, true, false, true, true, true, false, true,true,true,false};
    21ea:	8d e0       	ldi	r24, 0x0D	; 13
    21ec:	eb e2       	ldi	r30, 0x2B	; 43
    21ee:	f1 e0       	ldi	r31, 0x01	; 1
    21f0:	de 01       	movw	r26, r28
    21f2:	1d 96       	adiw	r26, 0x0d	; 13
    21f4:	01 90       	ld	r0, Z+
    21f6:	0d 92       	st	X+, r0
    21f8:	8a 95       	dec	r24
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <_Z23runInterCycleTimerTestsv+0xca>

	if (_currCycleNumber <= 11) { //MUST MATCH ABOVE LENGTH
    21fc:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_currCycleNumber>
    2200:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    2204:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    2208:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    220c:	0c 97       	sbiw	r24, 0x0c	; 12
    220e:	a1 05       	cpc	r26, r1
    2210:	b1 05       	cpc	r27, r1
    2212:	f8 f4       	brcc	.+62     	; 0x2252 <_Z23runInterCycleTimerTestsv+0x128>
		assert(expected[_currCycleNumber-1], _isStartOfHourCycle);
    2214:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <_isStartOfHourCycle>
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_currCycleNumber>
    2222:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    2226:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    222a:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	a1 09       	sbc	r26, r1
    2232:	b1 09       	sbc	r27, r1
    2234:	ed e0       	ldi	r30, 0x0D	; 13
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	ec 0f       	add	r30, r28
    223a:	fd 1f       	adc	r31, r29
    223c:	e8 0f       	add	r30, r24
    223e:	f9 1f       	adc	r31, r25
    2240:	60 81       	ld	r22, Z
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	00 e0       	ldi	r16, 0x00	; 0
    224a:	10 e0       	ldi	r17, 0x00	; 0
    224c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
    2250:	39 c0       	rjmp	.+114    	; 0x22c4 <_Z23runInterCycleTimerTestsv+0x19a>
	}
	else {
		if (_currCycleNumber == 31 || _currCycleNumber == 63) //32nd cycle is exactly 24th hour and considered next day
    2252:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_currCycleNumber>
    2256:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    225a:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    225e:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    2262:	4f 97       	sbiw	r24, 0x1f	; 31
    2264:	a1 05       	cpc	r26, r1
    2266:	b1 05       	cpc	r27, r1
    2268:	71 f0       	breq	.+28     	; 0x2286 <_Z23runInterCycleTimerTestsv+0x15c>
    226a:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_currCycleNumber>
    226e:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    2272:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    2276:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    227a:	cf 97       	sbiw	r24, 0x3f	; 63
    227c:	a1 05       	cpc	r26, r1
    227e:	b1 05       	cpc	r27, r1
    2280:	21 f4       	brne	.+8      	; 0x228a <_Z23runInterCycleTimerTestsv+0x160>
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	03 c0       	rjmp	.+6      	; 0x228c <_Z23runInterCycleTimerTestsv+0x162>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	01 c0       	rjmp	.+2      	; 0x228c <_Z23runInterCycleTimerTestsv+0x162>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	88 23       	and	r24, r24
    228e:	71 f0       	breq	.+28     	; 0x22ac <_Z23runInterCycleTimerTestsv+0x182>
			assert(true, _isEndOfDayCycle);
    2290:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <_isEndOfDayCycle>
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	00 e0       	ldi	r16, 0x00	; 0
    229c:	10 e0       	ldi	r17, 0x00	; 0
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
    22aa:	0c c0       	rjmp	.+24     	; 0x22c4 <_Z23runInterCycleTimerTestsv+0x19a>
		else
			assert(false, _isEndOfDayCycle);
    22ac:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <_isEndOfDayCycle>
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	00 e0       	ldi	r16, 0x00	; 0
    22b8:	10 e0       	ldi	r17, 0x00	; 0
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	cb 01       	movw	r24, r22
    22c0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
	}
	
	//Reset all so as to initiate a new cycle on next loop
	_doSimulateFreshBoot = true;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>

	return _currCycleNumber <=70;
    22ca:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <_currCycleNumber>
    22ce:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    22d2:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    22d6:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    22da:	47 34       	cpi	r20, 0x47	; 71
    22dc:	51 05       	cpc	r21, r1
    22de:	61 05       	cpc	r22, r1
    22e0:	71 05       	cpc	r23, r1
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <_Z23runInterCycleTimerTestsv+0x1bc>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    22e6:	69 96       	adiw	r28, 0x19	; 25
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	1f 91       	pop	r17
    22f8:	0f 91       	pop	r16
    22fa:	ff 90       	pop	r15
    22fc:	ef 90       	pop	r14
    22fe:	df 90       	pop	r13
    2300:	cf 90       	pop	r12
    2302:	08 95       	ret

00002304 <_Z16runFullCycleTestv>:
	
//TODO: Test timing flags - runSingleCycleTimingTest()
//TODO: Test module status sent back (?)
uint16_t _testFullCycleLoopCount=0;
boolean runFullCycleTest()
{	
    2304:	8f 92       	push	r8
    2306:	9f 92       	push	r9
    2308:	af 92       	push	r10
    230a:	bf 92       	push	r11
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	ea 97       	sbiw	r28, 0x3a	; 58
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
#ifdef UNIT_TESTS
		
	//We simulate cycles for 24 hours then ensure data got sent. Repeat for a month(years?)
	volatile uint32_t cyclesInDay = timer.getCyclesInOneDay();
    232c:	81 e4       	ldi	r24, 0x41	; 65
    232e:	93 e0       	ldi	r25, 0x03	; 3
    2330:	0e 94 b2 19 	call	0x3364	; 0x3364 <_ZN6Timing17getCyclesInOneDayEv>
    2334:	69 83       	std	Y+1, r22	; 0x01
    2336:	7a 83       	std	Y+2, r23	; 0x02
    2338:	8b 83       	std	Y+3, r24	; 0x03
    233a:	9c 83       	std	Y+4, r25	; 0x04

	//# of readings required per day ?!
	unsigned int requestedLoadCount = 5;
	unsigned long loadedUpTo = 0;
	uint32_t loadedTo;
	SensorData dszReadings[requestedLoadCount];
    233c:	84 e0       	ldi	r24, 0x04	; 4
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	fe 01       	movw	r30, r28
    2342:	71 96       	adiw	r30, 0x11	; 17
    2344:	8f 3f       	cpi	r24, 0xFF	; 255
    2346:	2f ef       	ldi	r18, 0xFF	; 255
    2348:	92 07       	cpc	r25, r18
    234a:	59 f0       	breq	.+22     	; 0x2362 <_Z16runFullCycleTestv+0x5e>
} ModuleData;


//TODO: All these to be uint16_t ?

typedef struct SensorData{
    234c:	11 82       	std	Z+1, r1	; 0x01
    234e:	10 82       	st	Z, r1
    2350:	13 82       	std	Z+3, r1	; 0x03
    2352:	12 82       	std	Z+2, r1	; 0x02
    2354:	15 82       	std	Z+5, r1	; 0x05
    2356:	14 82       	std	Z+4, r1	; 0x04
    2358:	17 82       	std	Z+7, r1	; 0x07
    235a:	16 82       	std	Z+6, r1	; 0x06
    235c:	38 96       	adiw	r30, 0x08	; 8
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 cf       	rjmp	.-30     	; 0x2344 <_Z16runFullCycleTestv+0x40>
	 
	//In the beginning, check no of readings in memory already
	volatile uint32_t initLoadCount = mem.loadSensorData(dszReadings, requestedLoadCount, &loadedTo);
    2362:	7e 01       	movw	r14, r28
    2364:	81 e1       	ldi	r24, 0x11	; 17
    2366:	e8 0e       	add	r14, r24
    2368:	f1 1c       	adc	r15, r1
    236a:	9e 01       	movw	r18, r28
    236c:	2b 5f       	subi	r18, 0xFB	; 251
    236e:	3f 4f       	sbci	r19, 0xFF	; 255
    2370:	45 e0       	ldi	r20, 0x05	; 5
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	b7 01       	movw	r22, r14
    2376:	8f e8       	ldi	r24, 0x8F	; 143
    2378:	94 e0       	ldi	r25, 0x04	; 4
    237a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    237e:	69 87       	std	Y+9, r22	; 0x09
    2380:	7a 87       	std	Y+10, r23	; 0x0a
    2382:	8b 87       	std	Y+11, r24	; 0x0b
    2384:	9c 87       	std	Y+12, r25	; 0x0c
	memset(dszReadings, 0, sizeof(SensorData)*requestedLoadCount); //reset
    2386:	88 e2       	ldi	r24, 0x28	; 40
    2388:	f7 01       	movw	r30, r14
    238a:	11 92       	st	Z+, r1
    238c:	8a 95       	dec	r24
    238e:	e9 f7       	brne	.-6      	; 0x238a <_Z16runFullCycleTestv+0x86>
		
	//Call normal looping function
	boolean doContinue = loopCycle();
    2390:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <_Z9loopCyclev>
    2394:	18 2f       	mov	r17, r24
		
	//Simulate time advanced by readingTime/3 so we get 3 readings
	timer.MOCK_ADVANCE_TIME(readingTime/3);
    2396:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <readingTime>
    239a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <readingTime+0x1>
    239e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readingTime+0x2>
    23a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readingTime+0x3>
    23a6:	2b ea       	ldi	r18, 0xAB	; 171
    23a8:	3a ea       	ldi	r19, 0xAA	; 170
    23aa:	4a ea       	ldi	r20, 0xAA	; 170
    23ac:	5a ea       	ldi	r21, 0xAA	; 170
    23ae:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__umulsidi3>
    23b2:	00 e2       	ldi	r16, 0x20	; 32
    23b4:	0e 94 fe 30 	call	0x61fc	; 0x61fc <__lshrdi3>
    23b8:	82 2e       	mov	r8, r18
    23ba:	93 2e       	mov	r9, r19
    23bc:	a4 2e       	mov	r10, r20
    23be:	b5 2e       	mov	r11, r21
    23c0:	b5 01       	movw	r22, r10
    23c2:	a4 01       	movw	r20, r8
    23c4:	76 95       	lsr	r23
    23c6:	67 95       	ror	r22
    23c8:	57 95       	ror	r21
    23ca:	47 95       	ror	r20
    23cc:	81 e4       	ldi	r24, 0x41	; 65
    23ce:	93 e0       	ldi	r25, 0x03	; 3
    23d0:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
		
	if (doContinue)
    23d4:	11 11       	cpse	r17, r1
    23d6:	aa c0       	rjmp	.+340    	; 0x252c <_Z16runFullCycleTestv+0x228>
		return true; //This cycle is still running, doing work
		
	_testFullCycleLoopCount++;
    23d8:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_testFullCycleLoopCount>
    23dc:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_testFullCycleLoopCount+0x1>
    23e0:	01 96       	adiw	r24, 0x01	; 1
    23e2:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_testFullCycleLoopCount+0x1>
    23e6:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_testFullCycleLoopCount>
	
	if (_testFullCycleLoopCount == 22){
    23ea:	46 97       	sbiw	r24, 0x16	; 22
    23ec:	21 f4       	brne	.+8      	; 0x23f6 <_Z16runFullCycleTestv+0xf2>
	
		volatile int breakHere=99;
    23ee:	83 e6       	ldi	r24, 0x63	; 99
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a af       	std	Y+58, r25	; 0x3a
    23f4:	89 af       	std	Y+57, r24	; 0x39
	}
		
	//If hourly cycle is done, let's check we have 1 more reading saved in memory
	volatile uint32_t newLoadCount = mem.loadSensorData(dszReadings, requestedLoadCount, &loadedTo);
    23f6:	9e 01       	movw	r18, r28
    23f8:	2b 5f       	subi	r18, 0xFB	; 251
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	45 e0       	ldi	r20, 0x05	; 5
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	be 01       	movw	r22, r28
    2402:	6f 5e       	subi	r22, 0xEF	; 239
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	8f e8       	ldi	r24, 0x8F	; 143
    2408:	94 e0       	ldi	r25, 0x04	; 4
    240a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    240e:	6d 87       	std	Y+13, r22	; 0x0d
    2410:	7e 87       	std	Y+14, r23	; 0x0e
    2412:	8f 87       	std	Y+15, r24	; 0x0f
    2414:	98 8b       	std	Y+16, r25	; 0x10

	if (_isStartOfHourCycle) {
    2416:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <_isStartOfHourCycle>
    241a:	88 23       	and	r24, r24
    241c:	99 f0       	breq	.+38     	; 0x2444 <_Z16runFullCycleTestv+0x140>
		assert(initLoadCount+1, newLoadCount);
    241e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2420:	3e 85       	ldd	r19, Y+14	; 0x0e
    2422:	4f 85       	ldd	r20, Y+15	; 0x0f
    2424:	58 89       	ldd	r21, Y+16	; 0x10
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	ab 85       	ldd	r26, Y+11	; 0x0b
    242c:	bc 85       	ldd	r27, Y+12	; 0x0c
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	6f 5f       	subi	r22, 0xFF	; 255
    2434:	7f 4f       	sbci	r23, 0xFF	; 255
    2436:	8f 4f       	sbci	r24, 0xFF	; 255
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	00 e0       	ldi	r16, 0x00	; 0
    243c:	10 e0       	ldi	r17, 0x00	; 0
    243e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
    2442:	0c c0       	rjmp	.+24     	; 0x245c <_Z16runFullCycleTestv+0x158>
	}
	else{
		assert(initLoadCount, newLoadCount); //unchanged, can be updated though
    2444:	2d 85       	ldd	r18, Y+13	; 0x0d
    2446:	3e 85       	ldd	r19, Y+14	; 0x0e
    2448:	4f 85       	ldd	r20, Y+15	; 0x0f
    244a:	58 89       	ldd	r21, Y+16	; 0x10
    244c:	69 85       	ldd	r22, Y+9	; 0x09
    244e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2450:	8b 85       	ldd	r24, Y+11	; 0x0b
    2452:	9c 85       	ldd	r25, Y+12	; 0x0c
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
	}

	if (_testFullCycleLoopCount < cyclesInDay) {
    245c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_testFullCycleLoopCount>
    2460:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_testFullCycleLoopCount+0x1>
    2464:	a0 e0       	ldi	r26, 0x00	; 0
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	49 81       	ldd	r20, Y+1	; 0x01
    246a:	5a 81       	ldd	r21, Y+2	; 0x02
    246c:	6b 81       	ldd	r22, Y+3	; 0x03
    246e:	7c 81       	ldd	r23, Y+4	; 0x04
    2470:	84 17       	cp	r24, r20
    2472:	95 07       	cpc	r25, r21
    2474:	a6 07       	cpc	r26, r22
    2476:	b7 07       	cpc	r27, r23
    2478:	58 f5       	brcc	.+86     	; 0x24d0 <_Z16runFullCycleTestv+0x1cc>
		assert(0, _isEndOfDayCycle);
    247a:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <_isEndOfDayCycle>
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	00 e0       	ldi	r16, 0x00	; 0
    2486:	10 e0       	ldi	r17, 0x00	; 0
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	cb 01       	movw	r24, r22
    248e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
		assertTrue(_dailyCycleData == NULL); //This should not be set during the day
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <_dailyCycleData>
    2498:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <_dailyCycleData+0x1>
    249c:	23 2b       	or	r18, r19
    249e:	09 f0       	breq	.+2      	; 0x24a2 <_Z16runFullCycleTestv+0x19e>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
		assertCharStringsIdentical(NULL, gsm.MOCK_DATA_SENT_GPRS);
    24a6:	0e e6       	ldi	r16, 0x6E	; 110
    24a8:	13 e0       	ldi	r17, 0x03	; 3
    24aa:	f8 01       	movw	r30, r16
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	4f ef       	ldi	r20, 0xFF	; 255
    24b2:	5f ef       	ldi	r21, 0xFF	; 255
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z26assertCharStringsIdenticalPKcS0_i>
		assertCharStringsIdentical(NULL, gsm.MOCK_DATA_SENT_SMS);
    24bc:	f8 01       	movw	r30, r16
    24be:	62 81       	ldd	r22, Z+2	; 0x02
    24c0:	73 81       	ldd	r23, Z+3	; 0x03
    24c2:	4f ef       	ldi	r20, 0xFF	; 255
    24c4:	5f ef       	ldi	r21, 0xFF	; 255
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z26assertCharStringsIdenticalPKcS0_i>
    24ce:	2c c0       	rjmp	.+88     	; 0x2528 <_Z16runFullCycleTestv+0x224>
	}
	else{
		//TODO: Check memory has 1 daily reading stored now and is transmitted
		assert(1, _isEndOfDayCycle);
    24d0:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <_isEndOfDayCycle>
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	00 e0       	ldi	r16, 0x00	; 0
    24dc:	10 e0       	ldi	r17, 0x00	; 0
    24de:	61 e0       	ldi	r22, 0x01	; 1
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
		assertTrue(_dailyCycleData != NULL);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <_dailyCycleData>
    24f0:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <_dailyCycleData+0x1>
    24f4:	23 2b       	or	r18, r19
    24f6:	09 f4       	brne	.+2      	; 0x24fa <_Z16runFullCycleTestv+0x1f6>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS)>0);
    24fe:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <gsm>
    2502:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <gsm+0x1>
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 81       	ld	r25, Z
    250a:	91 11       	cpse	r25, r1
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <_Z16runFullCycleTestv+0x20c>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_Z10assertTrueb>
		assertCharStringsIdentical(NULL, gsm.MOCK_DATA_SENT_SMS);
    2514:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <gsm+0x2>
    2518:	70 91 71 03 	lds	r23, 0x0371	; 0x800371 <gsm+0x3>
    251c:	4f ef       	ldi	r20, 0xFF	; 255
    251e:	5f ef       	ldi	r21, 0xFF	; 255
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z26assertCharStringsIdenticalPKcS0_i>
	}
	
	//As it's a new cycle simulated, run equivalent of setup() first
	setupOnNewCycle();
    2528:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z15setupOnNewCyclev>
		//gsm.MOCK_DATA_SENT_SMS = "";
	//}
	
	return ret;
#endif
}
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	ea 96       	adiw	r28, 0x3a	; 58
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	af 90       	pop	r10
    254e:	9f 90       	pop	r9
    2550:	8f 90       	pop	r8
    2552:	08 95       	ret

00002554 <_Z11runAllTestsv>:



uint8_t _currTestStage=0;
bool runAllTests()
{
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
	bool doContinue = true;
	
#ifdef UNIT_TESTS
	++_currLoopNo;
    255a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_currLoopNo>
    255e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <_currLoopNo+0x1>
    2562:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <_currLoopNo+0x2>
    2566:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <_currLoopNo+0x3>
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	a1 1d       	adc	r26, r1
    256e:	b1 1d       	adc	r27, r1
    2570:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_currLoopNo>
    2574:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <_currLoopNo+0x1>
    2578:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <_currLoopNo+0x2>
    257c:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <_currLoopNo+0x3>
	
	//First time it boots cycle no should be 1
	if (_currTestStage == 0) {
    2580:	c0 91 21 03 	lds	r28, 0x0321	; 0x800321 <_currTestStage>
    2584:	c1 11       	cpse	r28, r1
    2586:	19 c0       	rjmp	.+50     	; 0x25ba <_Z11runAllTestsv+0x66>
		assert(FIRST_CYCLE_NO, _currCycleNumber);
    2588:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <_currCycleNumber>
    258c:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    2590:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    2594:	50 91 32 03 	lds	r21, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    2598:	00 e0       	ldi	r16, 0x00	; 0
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_Z6assertmmPc>
		
		//Stage complete
		_currTestStage++;
    25a8:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_currTestStage>
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_currTestStage>
		_doSimulateFreshBoot = true;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>
		return true;
    25b8:	45 c0       	rjmp	.+138    	; 0x2644 <_Z11runAllTestsv+0xf0>
	}

	if (_currTestStage == 1) {
    25ba:	c1 30       	cpi	r28, 0x01	; 1
    25bc:	69 f4       	brne	.+26     	; 0x25d8 <_Z11runAllTestsv+0x84>
		if(runInterCycleTimerTests())
    25be:	0e 94 95 10 	call	0x212a	; 0x212a <_Z23runInterCycleTimerTestsv>
    25c2:	81 11       	cpse	r24, r1
    25c4:	3f c0       	rjmp	.+126    	; 0x2644 <_Z11runAllTestsv+0xf0>
			return true;
			
		//Stage complete
		_currTestStage++;
    25c6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_currTestStage>
    25ca:	8f 5f       	subi	r24, 0xFF	; 255
    25cc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_currTestStage>
		_doSimulateFreshBoot = true;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>
		return true;
    25d6:	36 c0       	rjmp	.+108    	; 0x2644 <_Z11runAllTestsv+0xf0>
	}
	
	if (_currTestStage == 2){
    25d8:	c2 30       	cpi	r28, 0x02	; 2
    25da:	59 f4       	brne	.+22     	; 0x25f2 <_Z11runAllTestsv+0x9e>
		if (runSendTest())
    25dc:	0e 94 91 10 	call	0x2122	; 0x2122 <_Z11runSendTestv>
    25e0:	81 11       	cpse	r24, r1
    25e2:	30 c0       	rjmp	.+96     	; 0x2644 <_Z11runAllTestsv+0xf0>
			return true;
			
		//Stage complete
		_currTestStage++;
    25e4:	cf 5f       	subi	r28, 0xFF	; 255
    25e6:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <_currTestStage>
		_doSimulateFreshBoot = true;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>
		return true;
    25f0:	29 c0       	rjmp	.+82     	; 0x2644 <_Z11runAllTestsv+0xf0>
	}
	
	if (_currTestStage == 3){
    25f2:	c3 30       	cpi	r28, 0x03	; 3
    25f4:	59 f4       	brne	.+22     	; 0x260c <_Z11runAllTestsv+0xb8>
		if (runPadTest())
    25f6:	0e 94 8f 10 	call	0x211e	; 0x211e <_Z10runPadTestv>
    25fa:	81 11       	cpse	r24, r1
    25fc:	23 c0       	rjmp	.+70     	; 0x2644 <_Z11runAllTestsv+0xf0>
			return true;
		
		//Stage complete
		_currTestStage++;
    25fe:	cf 5f       	subi	r28, 0xFF	; 255
    2600:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <_currTestStage>
		_doSimulateFreshBoot = true;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>
		return true;
    260a:	1c c0       	rjmp	.+56     	; 0x2644 <_Z11runAllTestsv+0xf0>
	}
	
	if (_currTestStage == 4){
    260c:	c4 30       	cpi	r28, 0x04	; 4
    260e:	59 f4       	brne	.+22     	; 0x2626 <_Z11runAllTestsv+0xd2>
		if (runLoadTest())
    2610:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11runLoadTestv>
    2614:	81 11       	cpse	r24, r1
    2616:	16 c0       	rjmp	.+44     	; 0x2644 <_Z11runAllTestsv+0xf0>
			return true;
		
		//Stage complete
		_currTestStage++;
    2618:	cf 5f       	subi	r28, 0xFF	; 255
    261a:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <_currTestStage>
		_doSimulateFreshBoot = true;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>
		return true;
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <_Z11runAllTestsv+0xf0>
	}
	
	if (_currTestStage == 5){
    2626:	c5 30       	cpi	r28, 0x05	; 5
    2628:	59 f4       	brne	.+22     	; 0x2640 <_Z11runAllTestsv+0xec>
		if (runIntraCycleTimerTests())
    262a:	0e 94 93 10 	call	0x2126	; 0x2126 <_Z23runIntraCycleTimerTestsv>
    262e:	81 11       	cpse	r24, r1
    2630:	09 c0       	rjmp	.+18     	; 0x2644 <_Z11runAllTestsv+0xf0>
			return true;
		
		//Stage complete
		_currTestStage++;
    2632:	cf 5f       	subi	r28, 0xFF	; 255
    2634:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <_currTestStage>
		_doSimulateFreshBoot = true;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_doSimulateFreshBoot>
		return true;
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <_Z11runAllTestsv+0xf0>
	}
	
	//Subsequent tests require looping callbacks
	doContinue = runFullCycleTest();
    2640:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z16runFullCycleTestv>
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    2644:	cf 91       	pop	r28
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	08 95       	ret

0000264c <_Z8execLoopv>:
	preLoop();
	execLoop();
	postLoop();
}

void execLoop() {
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	00 d0       	rcall	.+0      	; 0x2652 <_Z8execLoopv+0x6>
    2652:	00 d0       	rcall	.+0      	; 0x2654 <_Z8execLoopv+0x8>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62

	if (_moduleHasShutdown)
    2658:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_moduleHasShutdown>
    265c:	81 11       	cpse	r24, r1
    265e:	7e c0       	rjmp	.+252    	; 0x275c <_Z8execLoopv+0x110>
		return;

	volatile unsigned long currentMillis = timer.getMillis();
    2660:	81 e4       	ldi	r24, 0x41	; 65
    2662:	93 e0       	ldi	r25, 0x03	; 3
    2664:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6Timing9getMillisEv>
    2668:	69 83       	std	Y+1, r22	; 0x01
    266a:	7a 83       	std	Y+2, r23	; 0x02
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	9c 83       	std	Y+4, r25	; 0x04

	//If board being powered up for the first time, start timer before running 1st cycle
	_isAtCycleStart = _currCycleNumber == 0; //Not initialised so must be at start
    2670:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <_currCycleNumber>
    2674:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    2678:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    267c:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	45 2b       	or	r20, r21
    2684:	46 2b       	or	r20, r22
    2686:	47 2b       	or	r20, r23
    2688:	09 f0       	breq	.+2      	; 0x268c <_Z8execLoopv+0x40>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_isAtCycleStart>
	if (_isAtCycleStart) {
    2690:	88 23       	and	r24, r24
    2692:	09 f4       	brne	.+2      	; 0x2696 <_Z8execLoopv+0x4a>
    2694:	4d c0       	rjmp	.+154    	; 0x2730 <_Z8execLoopv+0xe4>

		//Update bootcount
		_currCycleNumber = mem.getLongFromMemory(MEMLOC_BOOTCOUNT);
    2696:	68 e0       	ldi	r22, 0x08	; 8
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	8f e8       	ldi	r24, 0x8F	; 143
    269c:	94 e0       	ldi	r25, 0x04	; 4
    269e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN12RmMemManager17getLongFromMemoryEj>
    26a2:	60 93 2f 03 	sts	0x032F, r22	; 0x80032f <_currCycleNumber>
    26a6:	70 93 30 03 	sts	0x0330, r23	; 0x800330 <_currCycleNumber+0x1>
    26aa:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_currCycleNumber+0x2>
    26ae:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <_currCycleNumber+0x3>
		_currCycleNumber = _currCycleNumber + 1UL;
    26b2:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_currCycleNumber>
    26b6:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    26ba:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    26be:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	a1 1d       	adc	r26, r1
    26c6:	b1 1d       	adc	r27, r1
    26c8:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <_currCycleNumber>
    26cc:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <_currCycleNumber+0x1>
    26d0:	a0 93 31 03 	sts	0x0331, r26	; 0x800331 <_currCycleNumber+0x2>
    26d4:	b0 93 32 03 	sts	0x0332, r27	; 0x800332 <_currCycleNumber+0x3>
		mem.setLongToMemory(MEMLOC_BOOTCOUNT, _currCycleNumber);
    26d8:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <_currCycleNumber>
    26dc:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    26e0:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    26e4:	50 91 32 03 	lds	r21, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    26e8:	68 e0       	ldi	r22, 0x08	; 8
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	8f e8       	ldi	r24, 0x8F	; 143
    26ee:	94 e0       	ldi	r25, 0x04	; 4
    26f0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN12RmMemManager15setLongToMemoryEjm>

		_isEndOfDayCycle = timer.isDailyCycle(_currCycleNumber);
    26f4:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <_currCycleNumber>
    26f8:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    26fc:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    2700:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    2704:	81 e4       	ldi	r24, 0x41	; 65
    2706:	93 e0       	ldi	r25, 0x03	; 3
    2708:	0e 94 8a 1b 	call	0x3714	; 0x3714 <_ZN6Timing12isDailyCycleEm>
    270c:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_isEndOfDayCycle>
		_isStartOfHourCycle = timer.isStartOfHourCycle(_currCycleNumber);
    2710:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <_currCycleNumber>
    2714:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <_currCycleNumber+0x1>
    2718:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <_currCycleNumber+0x2>
    271c:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <_currCycleNumber+0x3>
    2720:	81 e4       	ldi	r24, 0x41	; 65
    2722:	93 e0       	ldi	r25, 0x03	; 3
    2724:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN6Timing18isStartOfHourCycleEm>
    2728:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_isStartOfHourCycle>
		
		//Reset all in-memory data when a new cycle begins
		//Strictly not necessary as it gets re-booted each time (but req'd for unit-tests)
		resetSensorData();
    272c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_Z15resetSensorDatav>
	}

	timer.onCycleLoop();
    2730:	81 e4       	ldi	r24, 0x41	; 65
    2732:	93 e0       	ldi	r25, 0x03	; 3
    2734:	0e 94 f7 19 	call	0x33ee	; 0x33ee <_ZN6Timing11onCycleLoopEv>
	//and we can't call flash
	//mem.flashLED();
	
	
	#ifdef UNIT_TESTS
		doContinue = runAllTests();
    2738:	0e 94 aa 12 	call	0x2554	; 0x2554 <_Z11runAllTestsv>
		else
			doContinue = loopCycle();
	#endif

	//If all work done, shut down
	if (!doContinue) {
    273c:	81 11       	cpse	r24, r1
    273e:	08 c0       	rjmp	.+16     	; 0x2750 <_Z8execLoopv+0x104>
		
		RM_LOG(F("END CYCLE"));
    2740:	64 e4       	ldi	r22, 0x44	; 68
    2742:	73 e0       	ldi	r23, 0x03	; 3
    2744:	83 e5       	ldi	r24, 0x53	; 83
    2746:	96 e0       	ldi	r25, 0x06	; 6
    2748:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
		shutdown();
    274c:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z8shutdownv>
	}

	//Try POST to site with large timeout
	//(2 minutes)

	delay(LOOP_DELAY);
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	08 95       	ret

0000276a <loop>:
	
	setupOnNewCycle();
}

void loop() {
	preLoop();
    276a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_Z7preLoopv>
	execLoop();
    276e:	0e 94 26 13 	call	0x264c	; 0x264c <_Z8execLoopv>
    2772:	08 95       	ret

00002774 <_GLOBAL__sub_I__isSystemTest>:
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    2774:	6f ef       	ldi	r22, 0xFF	; 255
    2776:	7f ef       	ldi	r23, 0xFF	; 255
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_Z41__static_initialization_and_destruction_0ii>
    2780:	08 95       	ret

00002782 <_GLOBAL__sub_D__isSystemTest>:
    2782:	6f ef       	ldi	r22, 0xFF	; 255
    2784:	7f ef       	ldi	r23, 0xFF	; 255
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_Z41__static_initialization_and_destruction_0ii>
    278e:	08 95       	ret

00002790 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    2798:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_state>
  twi_sendStop = true;		// default value
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <twi_sendStop>
  twi_inRepStart = false;
    27a2:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    27a6:	82 e1       	ldi	r24, 0x12	; 18
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
  digitalWrite(SCL, 1);
    27ae:	83 e1       	ldi	r24, 0x13	; 19
    27b0:	61 e0       	ldi	r22, 0x01	; 1
    27b2:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    27b6:	89 eb       	ldi	r24, 0xB9	; 185
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	29 eb       	ldi	r18, 0xB9	; 185
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	f9 01       	movw	r30, r18
    27c0:	20 81       	ld	r18, Z
    27c2:	2e 7f       	andi	r18, 0xFE	; 254
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    27c8:	89 eb       	ldi	r24, 0xB9	; 185
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	29 eb       	ldi	r18, 0xB9	; 185
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	f9 01       	movw	r30, r18
    27d2:	20 81       	ld	r18, Z
    27d4:	2d 7f       	andi	r18, 0xFD	; 253
    27d6:	fc 01       	movw	r30, r24
    27d8:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    27da:	88 eb       	ldi	r24, 0xB8	; 184
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	28 e4       	ldi	r18, 0x48	; 72
    27e0:	fc 01       	movw	r30, r24
    27e2:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    27e4:	8c eb       	ldi	r24, 0xBC	; 188
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	25 e4       	ldi	r18, 0x45	; 69
    27ea:	fc 01       	movw	r30, r24
    27ec:	20 83       	st	Z, r18
}
    27ee:	00 00       	nop
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    27fe:	8c eb       	ldi	r24, 0xBC	; 188
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	2c eb       	ldi	r18, 0xBC	; 188
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	20 81       	ld	r18, Z
    280a:	2a 7b       	andi	r18, 0xBA	; 186
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    2810:	82 e1       	ldi	r24, 0x12	; 18
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
  digitalWrite(SCL, 0);
    2818:	83 e1       	ldi	r24, 0x13	; 19
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
}
    2820:	00 00       	nop
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	08 95       	ret

00002828 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	1f 92       	push	r1
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    2834:	8a eb       	ldi	r24, 0xBA	; 186
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	29 81       	ldd	r18, Y+1	; 0x01
    283a:	22 0f       	add	r18, r18
    283c:	fc 01       	movw	r30, r24
    283e:	20 83       	st	Z, r18
}
    2840:	00 00       	nop
    2842:	0f 90       	pop	r0
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	00 d0       	rcall	.+0      	; 0x2854 <twi_setFrequency+0xa>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <twi_setFrequency+0xc>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	69 83       	std	Y+1, r22	; 0x01
    285c:	7a 83       	std	Y+2, r23	; 0x02
    285e:	8b 83       	std	Y+3, r24	; 0x03
    2860:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    2862:	08 eb       	ldi	r16, 0xB8	; 184
    2864:	10 e0       	ldi	r17, 0x00	; 0
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	94 e2       	ldi	r25, 0x24	; 36
    286a:	a4 ef       	ldi	r26, 0xF4	; 244
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	29 81       	ldd	r18, Y+1	; 0x01
    2870:	3a 81       	ldd	r19, Y+2	; 0x02
    2872:	4b 81       	ldd	r20, Y+3	; 0x03
    2874:	5c 81       	ldd	r21, Y+4	; 0x04
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    287e:	da 01       	movw	r26, r20
    2880:	c9 01       	movw	r24, r18
    2882:	40 97       	sbiw	r24, 0x10	; 16
    2884:	a1 09       	sbc	r26, r1
    2886:	b1 09       	sbc	r27, r1
    2888:	b6 95       	lsr	r27
    288a:	a7 95       	ror	r26
    288c:	97 95       	ror	r25
    288e:	87 95       	ror	r24
    2890:	f8 01       	movw	r30, r16
    2892:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    2894:	00 00       	nop
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	08 95       	ret

000028a8 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <twi_readFrom+0x6>
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <twi_readFrom+0x8>
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <twi_readFrom+0xa>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	7c 83       	std	Y+4, r23	; 0x04
    28ba:	6b 83       	std	Y+3, r22	; 0x03
    28bc:	4d 83       	std	Y+5, r20	; 0x05
    28be:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	81 32       	cpi	r24, 0x21	; 33
    28c4:	18 f0       	brcs	.+6      	; 0x28cc <twi_readFrom+0x24>
    return 0;
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	6b c0       	rjmp	.+214    	; 0x29a0 <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    28ca:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    28cc:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_state>
    28d0:	88 23       	and	r24, r24
    28d2:	d9 f7       	brne	.-10     	; 0x28ca <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_state>
  twi_sendStop = sendStop;
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    28e0:	8f ef       	ldi	r24, 0xFF	; 255
    28e2:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    28e6:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	81 50       	subi	r24, 0x01	; 1
    28ee:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_slarw>
  twi_slarw |= address << 1;
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	98 2f       	mov	r25, r24
    2904:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_slarw>
    2908:	89 2b       	or	r24, r25
    290a:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_slarw>

  if (true == twi_inRepStart) {
    290e:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_inRepStart>
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	c1 f4       	brne	.+48     	; 0x2946 <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2916:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    291a:	8b eb       	ldi	r24, 0xBB	; 187
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <twi_slarw>
    2922:	fc 01       	movw	r30, r24
    2924:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    2926:	8c eb       	ldi	r24, 0xBC	; 188
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	fc 01       	movw	r30, r24
    292c:	80 81       	ld	r24, Z
    292e:	88 2f       	mov	r24, r24
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	88 70       	andi	r24, 0x08	; 8
    2934:	99 27       	eor	r25, r25
    2936:	89 2b       	or	r24, r25
    2938:	81 f7       	brne	.-32     	; 0x291a <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    293a:	8c eb       	ldi	r24, 0xBC	; 188
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	25 ec       	ldi	r18, 0xC5	; 197
    2940:	fc 01       	movw	r30, r24
    2942:	20 83       	st	Z, r18
    2944:	07 c0       	rjmp	.+14     	; 0x2954 <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    2946:	8c eb       	ldi	r24, 0xBC	; 188
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	25 ee       	ldi	r18, 0xE5	; 229
    294c:	fc 01       	movw	r30, r24
    294e:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <twi_readFrom+0xac>
    continue;
    2952:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2954:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_state>
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	d9 f3       	breq	.-10     	; 0x2952 <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    295c:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	98 17       	cp	r25, r24
    2964:	18 f4       	brcc	.+6      	; 0x296c <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    2966:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    296a:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    296c:	19 82       	std	Y+1, r1	; 0x01
    296e:	13 c0       	rjmp	.+38     	; 0x2996 <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	2b 81       	ldd	r18, Y+3	; 0x03
    2978:	3c 81       	ldd	r19, Y+4	; 0x04
    297a:	82 0f       	add	r24, r18
    297c:	93 1f       	adc	r25, r19
    297e:	29 81       	ldd	r18, Y+1	; 0x01
    2980:	22 2f       	mov	r18, r18
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	29 56       	subi	r18, 0x69	; 105
    2986:	3a 4f       	sbci	r19, 0xFA	; 250
    2988:	f9 01       	movw	r30, r18
    298a:	20 81       	ld	r18, Z
    298c:	fc 01       	movw	r30, r24
    298e:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	99 81       	ldd	r25, Y+1	; 0x01
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	98 17       	cp	r25, r24
    299c:	48 f3       	brcs	.-46     	; 0x2970 <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29a0:	26 96       	adiw	r28, 0x06	; 6
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    29b2:	0f 93       	push	r16
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	27 97       	sbiw	r28, 0x07	; 7
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	8a 83       	std	Y+2, r24	; 0x02
    29ca:	7c 83       	std	Y+4, r23	; 0x04
    29cc:	6b 83       	std	Y+3, r22	; 0x03
    29ce:	4d 83       	std	Y+5, r20	; 0x05
    29d0:	2e 83       	std	Y+6, r18	; 0x06
    29d2:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	81 32       	cpi	r24, 0x21	; 33
    29d8:	18 f0       	brcs	.+6      	; 0x29e0 <twi_writeTo+0x2e>
    return 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	76 c0       	rjmp	.+236    	; 0x2aca <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    29de:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    29e0:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_state>
    29e4:	88 23       	and	r24, r24
    29e6:	d9 f7       	brne	.-10     	; 0x29de <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_state>
  twi_sendStop = sendStop;
    29ee:	8f 81       	ldd	r24, Y+7	; 0x07
    29f0:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    29fa:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	13 c0       	rjmp	.+38     	; 0x2a2e <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	88 2f       	mov	r24, r24
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	29 81       	ldd	r18, Y+1	; 0x01
    2a10:	22 2f       	mov	r18, r18
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4b 81       	ldd	r20, Y+3	; 0x03
    2a16:	5c 81       	ldd	r21, Y+4	; 0x04
    2a18:	24 0f       	add	r18, r20
    2a1a:	35 1f       	adc	r19, r21
    2a1c:	f9 01       	movw	r30, r18
    2a1e:	20 81       	ld	r18, Z
    2a20:	89 56       	subi	r24, 0x69	; 105
    2a22:	9a 4f       	sbci	r25, 0xFA	; 250
    2a24:	fc 01       	movw	r30, r24
    2a26:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	8f 5f       	subi	r24, 0xFF	; 255
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	99 81       	ldd	r25, Y+1	; 0x01
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	98 17       	cp	r25, r24
    2a34:	48 f3       	brcs	.-46     	; 0x2a08 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2a36:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_slarw>
  twi_slarw |= address << 1;
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	98 2f       	mov	r25, r24
    2a46:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_slarw>
    2a4a:	89 2b       	or	r24, r25
    2a4c:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2a50:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_inRepStart>
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	c1 f4       	brne	.+48     	; 0x2a88 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2a58:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    2a5c:	8b eb       	ldi	r24, 0xBB	; 187
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <twi_slarw>
    2a64:	fc 01       	movw	r30, r24
    2a66:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    2a68:	8c eb       	ldi	r24, 0xBC	; 188
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	80 81       	ld	r24, Z
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	88 70       	andi	r24, 0x08	; 8
    2a76:	99 27       	eor	r25, r25
    2a78:	89 2b       	or	r24, r25
    2a7a:	81 f7       	brne	.-32     	; 0x2a5c <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2a7c:	8c eb       	ldi	r24, 0xBC	; 188
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	25 ec       	ldi	r18, 0xC5	; 197
    2a82:	fc 01       	movw	r30, r24
    2a84:	20 83       	st	Z, r18
    2a86:	07 c0       	rjmp	.+14     	; 0x2a96 <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2a88:	8c eb       	ldi	r24, 0xBC	; 188
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	25 ee       	ldi	r18, 0xE5	; 229
    2a8e:	fc 01       	movw	r30, r24
    2a90:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <twi_writeTo+0xe4>
    continue;
    2a94:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2a96:	8e 81       	ldd	r24, Y+6	; 0x06
    2a98:	88 23       	and	r24, r24
    2a9a:	21 f0       	breq	.+8      	; 0x2aa4 <twi_writeTo+0xf2>
    2a9c:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_state>
    2aa0:	82 30       	cpi	r24, 0x02	; 2
    2aa2:	c1 f3       	breq	.-16     	; 0x2a94 <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    2aa4:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <twi_error>
    2aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <twi_writeTo+0xfe>
    return 0;	// success
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	0d c0       	rjmp	.+26     	; 0x2aca <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    2ab0:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <twi_error>
    2ab4:	80 32       	cpi	r24, 0x20	; 32
    2ab6:	11 f4       	brne	.+4      	; 0x2abc <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	07 c0       	rjmp	.+14     	; 0x2aca <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    2abc:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <twi_error>
    2ac0:	80 33       	cpi	r24, 0x30	; 48
    2ac2:	11 f4       	brne	.+4      	; 0x2ac8 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    2ac4:	83 e0       	ldi	r24, 0x03	; 3
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    2ac8:	84 e0       	ldi	r24, 0x04	; 4
}
    2aca:	27 96       	adiw	r28, 0x07	; 7
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	0f 91       	pop	r16
    2adc:	08 95       	ret

00002ade <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <twi_transmit+0x6>
    2ae4:	00 d0       	rcall	.+0      	; 0x2ae6 <twi_transmit+0x8>
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	9b 83       	std	Y+3, r25	; 0x03
    2aec:	8a 83       	std	Y+2, r24	; 0x02
    2aee:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    2af0:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <twi_txBufferLength>
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	81 97       	sbiw	r24, 0x21	; 33
    2b04:	14 f0       	brlt	.+4      	; 0x2b0a <twi_transmit+0x2c>
    return 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	2c c0       	rjmp	.+88     	; 0x2b62 <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    2b0a:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_state>
    2b0e:	84 30       	cpi	r24, 0x04	; 4
    2b10:	11 f0       	breq	.+4      	; 0x2b16 <twi_transmit+0x38>
    return 2;
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	26 c0       	rjmp	.+76     	; 0x2b62 <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    2b16:	19 82       	std	Y+1, r1	; 0x01
    2b18:	19 c0       	rjmp	.+50     	; 0x2b4c <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    2b1a:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <twi_txBufferLength>
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	82 0f       	add	r24, r18
    2b2a:	93 1f       	adc	r25, r19
    2b2c:	29 81       	ldd	r18, Y+1	; 0x01
    2b2e:	22 2f       	mov	r18, r18
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a 81       	ldd	r20, Y+2	; 0x02
    2b34:	5b 81       	ldd	r21, Y+3	; 0x03
    2b36:	24 0f       	add	r18, r20
    2b38:	35 1f       	adc	r19, r21
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	20 81       	ld	r18, Z
    2b3e:	87 54       	subi	r24, 0x47	; 71
    2b40:	9a 4f       	sbci	r25, 0xFA	; 250
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	8f 5f       	subi	r24, 0xFF	; 255
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	99 81       	ldd	r25, Y+1	; 0x01
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	98 17       	cp	r25, r24
    2b52:	18 f3       	brcs	.-58     	; 0x2b1a <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    2b54:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <twi_txBufferLength>
    2b58:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5a:	89 0f       	add	r24, r25
    2b5c:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <twi_txBufferLength>
  
  return 0;
    2b60:	80 e0       	ldi	r24, 0x00	; 0
}
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <twi_attachSlaveRxEvent+0x6>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <twi_onSlaveReceive+0x1>
    2b86:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_onSlaveReceive>
}
    2b8a:	00 00       	nop
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <twi_attachSlaveTxEvent+0x6>
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	9a 83       	std	Y+2, r25	; 0x02
    2ba2:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <twi_onSlaveTransmit+0x1>
    2bac:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <twi_onSlaveTransmit>
}
    2bb0:	00 00       	nop
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	08 95       	ret

00002bbc <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	88 23       	and	r24, r24
    2bcc:	31 f0       	breq	.+12     	; 0x2bda <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bce:	8c eb       	ldi	r24, 0xBC	; 188
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	25 ec       	ldi	r18, 0xC5	; 197
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2bda:	8c eb       	ldi	r24, 0xBC	; 188
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	25 e8       	ldi	r18, 0x85	; 133
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18
  }
}
    2be4:	00 00       	nop
    2be6:	0f 90       	pop	r0
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret

00002bee <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2bf6:	8c eb       	ldi	r24, 0xBC	; 188
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	25 ed       	ldi	r18, 0xD5	; 213
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2c00:	01 c0       	rjmp	.+2      	; 0x2c04 <twi_stop+0x16>
    continue;
    2c02:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2c04:	8c eb       	ldi	r24, 0xBC	; 188
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	fc 01       	movw	r30, r24
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	80 71       	andi	r24, 0x10	; 16
    2c12:	99 27       	eor	r25, r25
    2c14:	89 2b       	or	r24, r25
    2c16:	a9 f7       	brne	.-22     	; 0x2c02 <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2c18:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_state>
}
    2c1c:	00 00       	nop
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	08 95       	ret

00002c24 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2c2c:	8c eb       	ldi	r24, 0xBC	; 188
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	25 ec       	ldi	r18, 0xC5	; 197
    2c32:	fc 01       	movw	r30, r24
    2c34:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    2c36:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_state>
}
    2c3a:	00 00       	nop
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <__vector_24>:

ISR(TWI_vect)
{
    2c42:	1f 92       	push	r1
    2c44:	0f 92       	push	r0
    2c46:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2c4a:	0f 92       	push	r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	2f 93       	push	r18
    2c50:	3f 93       	push	r19
    2c52:	4f 93       	push	r20
    2c54:	5f 93       	push	r21
    2c56:	6f 93       	push	r22
    2c58:	7f 93       	push	r23
    2c5a:	8f 93       	push	r24
    2c5c:	9f 93       	push	r25
    2c5e:	af 93       	push	r26
    2c60:	bf 93       	push	r27
    2c62:	ef 93       	push	r30
    2c64:	ff 93       	push	r31
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    2c6e:	89 eb       	ldi	r24, 0xB9	; 185
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	fc 01       	movw	r30, r24
    2c74:	80 81       	ld	r24, Z
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	88 7f       	andi	r24, 0xF8	; 248
    2c7c:	99 27       	eor	r25, r25
    2c7e:	09 2e       	mov	r0, r25
    2c80:	00 0c       	add	r0, r0
    2c82:	aa 0b       	sbc	r26, r26
    2c84:	bb 0b       	sbc	r27, r27
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	28 ef       	ldi	r18, 0xF8	; 248
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	84 1b       	sub	r24, r20
    2c90:	95 0b       	sbc	r25, r21
    2c92:	28 17       	cp	r18, r24
    2c94:	39 07       	cpc	r19, r25
    2c96:	08 f4       	brcc	.+2      	; 0x2c9a <__vector_24+0x58>
    2c98:	17 c1       	rjmp	.+558    	; 0x2ec8 <__vector_24+0x286>
    2c9a:	8c 5c       	subi	r24, 0xCC	; 204
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	0c 94 c0 30 	jmp	0x6180	; 0x6180 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2ca4:	8b eb       	ldi	r24, 0xBB	; 187
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <twi_slarw>
    2cac:	fc 01       	movw	r30, r24
    2cae:	20 83       	st	Z, r18
      twi_reply(1);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      break;
    2cb6:	08 c1       	rjmp	.+528    	; 0x2ec8 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2cb8:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    2cbc:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <twi_masterBufferLength>
    2cc0:	98 17       	cp	r25, r24
    2cc2:	a0 f4       	brcc	.+40     	; 0x2cec <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2cc4:	8b eb       	ldi	r24, 0xBB	; 187
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    2ccc:	31 e0       	ldi	r19, 0x01	; 1
    2cce:	32 0f       	add	r19, r18
    2cd0:	30 93 b7 05 	sts	0x05B7, r19	; 0x8005b7 <twi_masterBufferIndex>
    2cd4:	22 2f       	mov	r18, r18
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	29 56       	subi	r18, 0x69	; 105
    2cda:	3a 4f       	sbci	r19, 0xFA	; 250
    2cdc:	f9 01       	movw	r30, r18
    2cde:	20 81       	ld	r18, Z
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	20 83       	st	Z, r18
        twi_reply(1);
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    2cea:	ee c0       	rjmp	.+476    	; 0x2ec8 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2cec:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <twi_sendStop>
    2cf0:	88 23       	and	r24, r24
    2cf2:	19 f0       	breq	.+6      	; 0x2cfa <__vector_24+0xb8>
          twi_stop();
    2cf4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    2cf8:	e7 c0       	rjmp	.+462    	; 0x2ec8 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2d00:	8c eb       	ldi	r24, 0xBC	; 188
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	24 ea       	ldi	r18, 0xA4	; 164
    2d06:	fc 01       	movw	r30, r24
    2d08:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    2d0a:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_state>
	}
      }
      break;
    2d0e:	dc c0       	rjmp	.+440    	; 0x2ec8 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2d10:	80 e2       	ldi	r24, 0x20	; 32
    2d12:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <twi_error>
      twi_stop();
    2d16:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_stop>
      break;
    2d1a:	d6 c0       	rjmp	.+428    	; 0x2ec8 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2d1c:	80 e3       	ldi	r24, 0x30	; 48
    2d1e:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <twi_error>
      twi_stop();
    2d22:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_stop>
      break;
    2d26:	d0 c0       	rjmp	.+416    	; 0x2ec8 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2d28:	88 e3       	ldi	r24, 0x38	; 56
    2d2a:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <twi_error>
      twi_releaseBus();
    2d2e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <twi_releaseBus>
      break;
    2d32:	ca c0       	rjmp	.+404    	; 0x2ec8 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d34:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	98 0f       	add	r25, r24
    2d3c:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <twi_masterBufferIndex>
    2d40:	88 2f       	mov	r24, r24
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	2b eb       	ldi	r18, 0xBB	; 187
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	f9 01       	movw	r30, r18
    2d4a:	20 81       	ld	r18, Z
    2d4c:	89 56       	subi	r24, 0x69	; 105
    2d4e:	9a 4f       	sbci	r25, 0xFA	; 250
    2d50:	fc 01       	movw	r30, r24
    2d52:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d54:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    2d58:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <twi_masterBufferLength>
    2d5c:	98 17       	cp	r25, r24
    2d5e:	20 f4       	brcc	.+8      	; 0x2d68 <__vector_24+0x126>
        twi_reply(1);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    2d66:	b0 c0       	rjmp	.+352    	; 0x2ec8 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      }
      break;
    2d6e:	ac c0       	rjmp	.+344    	; 0x2ec8 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d70:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <twi_masterBufferIndex>
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	98 0f       	add	r25, r24
    2d78:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <twi_masterBufferIndex>
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	2b eb       	ldi	r18, 0xBB	; 187
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	f9 01       	movw	r30, r18
    2d86:	20 81       	ld	r18, Z
    2d88:	89 56       	subi	r24, 0x69	; 105
    2d8a:	9a 4f       	sbci	r25, 0xFA	; 250
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	20 83       	st	Z, r18
	if (twi_sendStop)
    2d90:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <twi_sendStop>
    2d94:	88 23       	and	r24, r24
    2d96:	19 f0       	breq	.+6      	; 0x2d9e <__vector_24+0x15c>
          twi_stop();
    2d98:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    2d9c:	95 c0       	rjmp	.+298    	; 0x2ec8 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2da4:	8c eb       	ldi	r24, 0xBC	; 188
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	24 ea       	ldi	r18, 0xA4	; 164
    2daa:	fc 01       	movw	r30, r24
    2dac:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    2dae:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_state>
	}    
	break;
    2db2:	8a c0       	rjmp	.+276    	; 0x2ec8 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2db4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_stop>
      break;
    2db8:	87 c0       	rjmp	.+270    	; 0x2ec8 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2dba:	83 e0       	ldi	r24, 0x03	; 3
    2dbc:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2dc0:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <twi_rxBufferIndex>
      twi_reply(1);
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      break;
    2dca:	7e c0       	rjmp	.+252    	; 0x2ec8 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2dcc:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <twi_rxBufferIndex>
    2dd0:	80 32       	cpi	r24, 0x20	; 32
    2dd2:	a0 f4       	brcc	.+40     	; 0x2dfc <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2dd4:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <twi_rxBufferIndex>
    2dd8:	91 e0       	ldi	r25, 0x01	; 1
    2dda:	98 0f       	add	r25, r24
    2ddc:	90 93 fb 05 	sts	0x05FB, r25	; 0x8005fb <twi_rxBufferIndex>
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	2b eb       	ldi	r18, 0xBB	; 187
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	f9 01       	movw	r30, r18
    2dea:	20 81       	ld	r18, Z
    2dec:	85 52       	subi	r24, 0x25	; 37
    2dee:	9a 4f       	sbci	r25, 0xFA	; 250
    2df0:	fc 01       	movw	r30, r24
    2df2:	20 83       	st	Z, r18
        twi_reply(1);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    2dfa:	66 c0       	rjmp	.+204    	; 0x2ec8 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      }
      break;
    2e02:	62 c0       	rjmp	.+196    	; 0x2ec8 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e04:	0e 94 12 16 	call	0x2c24	; 0x2c24 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e08:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <twi_rxBufferIndex>
    2e0c:	80 32       	cpi	r24, 0x20	; 32
    2e0e:	40 f4       	brcc	.+16     	; 0x2e20 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2e10:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <twi_rxBufferIndex>
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	85 52       	subi	r24, 0x25	; 37
    2e1a:	9a 4f       	sbci	r25, 0xFA	; 250
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2e20:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <twi_onSlaveReceive>
    2e24:	30 91 96 05 	lds	r19, 0x0596	; 0x800596 <twi_onSlaveReceive+0x1>
    2e28:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <twi_rxBufferIndex>
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	bc 01       	movw	r22, r24
    2e32:	8b ed       	ldi	r24, 0xDB	; 219
    2e34:	95 e0       	ldi	r25, 0x05	; 5
    2e36:	f9 01       	movw	r30, r18
    2e38:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2e3a:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <twi_rxBufferIndex>
      break;
    2e3e:	44 c0       	rjmp	.+136    	; 0x2ec8 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      break;
    2e46:	40 c0       	rjmp	.+128    	; 0x2ec8 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2e48:	84 e0       	ldi	r24, 0x04	; 4
    2e4a:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2e4e:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2e52:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2e56:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <twi_onSlaveTransmit>
    2e5a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <twi_onSlaveTransmit+0x1>
    2e5e:	fc 01       	movw	r30, r24
    2e60:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2e62:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <twi_txBufferLength>
    2e66:	88 23       	and	r24, r24
    2e68:	29 f4       	brne	.+10     	; 0x2e74 <__vector_24+0x232>
        twi_txBufferLength = 1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2e70:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2e74:	8b eb       	ldi	r24, 0xBB	; 187
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	20 91 d9 05 	lds	r18, 0x05D9	; 0x8005d9 <twi_txBufferIndex>
    2e7c:	31 e0       	ldi	r19, 0x01	; 1
    2e7e:	32 0f       	add	r19, r18
    2e80:	30 93 d9 05 	sts	0x05D9, r19	; 0x8005d9 <twi_txBufferIndex>
    2e84:	22 2f       	mov	r18, r18
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	27 54       	subi	r18, 0x47	; 71
    2e8a:	3a 4f       	sbci	r19, 0xFA	; 250
    2e8c:	f9 01       	movw	r30, r18
    2e8e:	20 81       	ld	r18, Z
    2e90:	fc 01       	movw	r30, r24
    2e92:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2e94:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <twi_txBufferIndex>
    2e98:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <twi_txBufferLength>
    2e9c:	98 17       	cp	r25, r24
    2e9e:	20 f4       	brcc	.+8      	; 0x2ea8 <__vector_24+0x266>
        twi_reply(1);
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    2ea6:	10 c0       	rjmp	.+32     	; 0x2ec8 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      }
      break;
    2eae:	0c c0       	rjmp	.+24     	; 0x2ec8 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    2eb6:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_state>
      break;
    2eba:	06 c0       	rjmp	.+12     	; 0x2ec8 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2ebc:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <twi_error>
      twi_stop();
    2ec0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_stop>
      break;
    2ec4:	01 c0       	rjmp	.+2      	; 0x2ec8 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    2ec6:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2ec8:	00 00       	nop
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2eec:	0f 90       	pop	r0
    2eee:	1f 90       	pop	r1
    2ef0:	18 95       	reti

00002ef2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2ef2:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	20 91 32 06 	lds	r18, 0x0632	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
}
    2efc:	82 1b       	sub	r24, r18
    2efe:	91 09       	sbc	r25, r1
    2f00:	08 95       	ret

00002f02 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2f02:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
    2f06:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>
    2f0a:	98 17       	cp	r25, r24
    2f0c:	50 f4       	brcc	.+20     	; 0x2f22 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    2f0e:	e9 2f       	mov	r30, r25
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	ed 5c       	subi	r30, 0xCD	; 205
    2f14:	f9 4f       	sbci	r31, 0xF9	; 249
    2f16:	20 81       	ld	r18, Z
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    2f1a:	9f 5f       	subi	r25, 0xFF	; 255
    2f1c:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    2f22:	2f ef       	ldi	r18, 0xFF	; 255
    2f24:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    2f26:	c9 01       	movw	r24, r18
    2f28:	08 95       	ret

00002f2a <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    2f2a:	e0 91 32 06 	lds	r30, 0x0632	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
    2f2e:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>
    2f32:	e8 17       	cp	r30, r24
    2f34:	30 f4       	brcc	.+12     	; 0x2f42 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	ed 5c       	subi	r30, 0xCD	; 205
    2f3a:	f9 4f       	sbci	r31, 0xF9	; 249
    2f3c:	80 81       	ld	r24, Z
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    2f42:	8f ef       	ldi	r24, 0xFF	; 255
    2f44:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    2f46:	08 95       	ret

00002f48 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2f48:	08 95       	ret

00002f4a <_ZN7TwoWire16onReceiveServiceEPhi>:
  // XXX: to be implemented.
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	ec 01       	movw	r28, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2f50:	e0 91 09 06 	lds	r30, 0x0609	; 0x800609 <_ZN7TwoWire14user_onReceiveE>
    2f54:	f0 91 0a 06 	lds	r31, 0x060A	; 0x80060a <_ZN7TwoWire14user_onReceiveE+0x1>
    2f58:	30 97       	sbiw	r30, 0x00	; 0
    2f5a:	e1 f0       	breq	.+56     	; 0x2f94 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2f5c:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
    2f60:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>
    2f64:	98 17       	cp	r25, r24
    2f66:	b0 f0       	brcs	.+44     	; 0x2f94 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2f6a:	29 2f       	mov	r18, r25
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	26 17       	cp	r18, r22
    2f70:	37 07       	cpc	r19, r23
    2f72:	54 f4       	brge	.+20     	; 0x2f88 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    rxBuffer[i] = inBytes[i];    
    2f74:	de 01       	movw	r26, r28
    2f76:	a9 0f       	add	r26, r25
    2f78:	b1 1d       	adc	r27, r1
    2f7a:	4c 91       	ld	r20, X
    2f7c:	d9 01       	movw	r26, r18
    2f7e:	ad 5c       	subi	r26, 0xCD	; 205
    2f80:	b9 4f       	sbci	r27, 0xF9	; 249
    2f82:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2f84:	9f 5f       	subi	r25, 0xFF	; 255
    2f86:	f1 cf       	rjmp	.-30     	; 0x2f6a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2f88:	cb 01       	movw	r24, r22
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2f8a:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2f8e:	60 93 31 06 	sts	0x0631, r22	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    2f92:	09 95       	icall
}
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	08 95       	ret

00002f9a <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    2f9a:	e0 91 0b 06 	lds	r30, 0x060B	; 0x80060b <_ZN7TwoWire14user_onRequestE>
    2f9e:	f0 91 0c 06 	lds	r31, 0x060C	; 0x80060c <_ZN7TwoWire14user_onRequestE+0x1>
    2fa2:	30 97       	sbiw	r30, 0x00	; 0
    2fa4:	29 f0       	breq	.+10     	; 0x2fb0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2fa6:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2faa:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    2fae:	09 95       	icall
    2fb0:	08 95       	ret

00002fb2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2fb2:	cf 92       	push	r12
    2fb4:	df 92       	push	r13
    2fb6:	ef 92       	push	r14
    2fb8:	ff 92       	push	r15
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	8c 01       	movw	r16, r24
    2fc4:	6b 01       	movw	r12, r22
    2fc6:	7a 01       	movw	r14, r20
  if(transmitting){
    2fc8:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <_ZN7TwoWire12transmittingE>
    2fcc:	88 23       	and	r24, r24
    2fce:	99 f0       	breq	.+38     	; 0x2ff6 <_ZN7TwoWire5writeEPKhj+0x44>
    2fd0:	c0 e0       	ldi	r28, 0x00	; 0
    2fd2:	d0 e0       	ldi	r29, 0x00	; 0
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2fd4:	ce 15       	cp	r28, r14
    2fd6:	df 05       	cpc	r29, r15
    2fd8:	90 f4       	brcc	.+36     	; 0x2ffe <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    2fda:	d8 01       	movw	r26, r16
    2fdc:	ed 91       	ld	r30, X+
    2fde:	fc 91       	ld	r31, X
    2fe0:	01 90       	ld	r0, Z+
    2fe2:	f0 81       	ld	r31, Z
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	d6 01       	movw	r26, r12
    2fe8:	ac 0f       	add	r26, r28
    2fea:	bd 1f       	adc	r27, r29
    2fec:	6c 91       	ld	r22, X
    2fee:	c8 01       	movw	r24, r16
    2ff0:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2ff2:	21 96       	adiw	r28, 0x01	; 1
    2ff4:	ef cf       	rjmp	.-34     	; 0x2fd4 <_ZN7TwoWire5writeEPKhj+0x22>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2ff6:	64 2f       	mov	r22, r20
    2ff8:	c6 01       	movw	r24, r12
    2ffa:	0e 94 6f 15 	call	0x2ade	; 0x2ade <twi_transmit>
  }
  return quantity;
}
    2ffe:	c7 01       	movw	r24, r14
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	1f 92       	push	r1
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	fc 01       	movw	r30, r24
    301e:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    3020:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <_ZN7TwoWire12transmittingE>
    3024:	99 23       	and	r25, r25
    3026:	d9 f0       	breq	.+54     	; 0x305e <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    3028:	90 91 0e 06 	lds	r25, 0x060E	; 0x80060e <_ZN7TwoWire14txBufferLengthE>
    302c:	90 32       	cpi	r25, 0x20	; 32
    302e:	38 f0       	brcs	.+14     	; 0x303e <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	93 83       	std	Z+3, r25	; 0x03
    3036:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	17 c0       	rjmp	.+46     	; 0x306c <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    303e:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <_ZN7TwoWire13txBufferIndexE>
    3042:	e8 2f       	mov	r30, r24
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	e0 5f       	subi	r30, 0xF0	; 240
    3048:	f9 4f       	sbci	r31, 0xF9	; 249
    304a:	99 81       	ldd	r25, Y+1	; 0x01
    304c:	90 83       	st	Z, r25
    ++txBufferIndex;
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    3054:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <_ZN7TwoWire14txBufferLengthE>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	07 c0       	rjmp	.+14     	; 0x306c <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	ce 01       	movw	r24, r28
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	0e 94 6f 15 	call	0x2ade	; 0x2ade <twi_transmit>
  }
  return 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
}
    306c:	0f 90       	pop	r0
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	08 95       	ret

00003074 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3074:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    3076:	13 82       	std	Z+3, r1	; 0x03
    3078:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    307a:	88 ee       	ldi	r24, 0xE8	; 232
    307c:	93 e0       	ldi	r25, 0x03	; 3
    307e:	a0 e0       	ldi	r26, 0x00	; 0
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	84 83       	std	Z+4, r24	; 0x04
    3084:	95 83       	std	Z+5, r25	; 0x05
    3086:	a6 83       	std	Z+6, r26	; 0x06
    3088:	b7 83       	std	Z+7, r27	; 0x07
    308a:	85 e7       	ldi	r24, 0x75	; 117
    308c:	92 e0       	ldi	r25, 0x02	; 2
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
    3092:	08 95       	ret

00003094 <_Z41__static_initialization_and_destruction_0ii>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	39 f4       	brne	.+14     	; 0x30a6 <_Z41__static_initialization_and_destruction_0ii+0x12>
    3098:	6f 3f       	cpi	r22, 0xFF	; 255
    309a:	7f 4f       	sbci	r23, 0xFF	; 255
    309c:	21 f4       	brne	.+8      	; 0x30a6 <_Z41__static_initialization_and_destruction_0ii+0x12>
    309e:	8d ef       	ldi	r24, 0xFD	; 253
    30a0:	95 e0       	ldi	r25, 0x05	; 5
    30a2:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN7TwoWireC1Ev>
    30a6:	08 95       	ret

000030a8 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    30a8:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    30ac:	10 92 31 06 	sts	0x0631, r1	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    30b0:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    30b4:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    30b8:	0e 94 c8 13 	call	0x2790	; 0x2790 <twi_init>
    30bc:	08 95       	ret

000030be <_ZN7TwoWire5beginEh>:
}

void TwoWire::begin(uint8_t address)
{
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	ec 01       	movw	r28, r24
    30c4:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    30c6:	0e 94 14 14 	call	0x2828	; 0x2828 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    30ca:	8d ec       	ldi	r24, 0xCD	; 205
    30cc:	97 e1       	ldi	r25, 0x17	; 23
    30ce:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    30d2:	85 ea       	ldi	r24, 0xA5	; 165
    30d4:	97 e1       	ldi	r25, 0x17	; 23
    30d6:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <twi_attachSlaveRxEvent>
  begin();
    30da:	ce 01       	movw	r24, r28
    30dc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN7TwoWire5beginEv>
}
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	08 95       	ret

000030e6 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    30e6:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN7TwoWire5beginEh>
    30ea:	08 95       	ret

000030ec <_ZN7TwoWire3endEv>:
}

void TwoWire::end(void)
{
  twi_disable();
    30ec:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <twi_disable>
    30f0:	08 95       	ret

000030f2 <_ZN7TwoWire8setClockEm>:
}

void TwoWire::setClock(uint32_t clock)
{
  twi_setFrequency(clock);
    30f2:	cb 01       	movw	r24, r22
    30f4:	ba 01       	movw	r22, r20
    30f6:	0e 94 25 14 	call	0x284a	; 0x284a <twi_setFrequency>
    30fa:	08 95       	ret

000030fc <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    3102:	60 93 30 06 	sts	0x0630, r22	; 0x800630 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    3106:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    310a:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <_ZN7TwoWire14txBufferLengthE>
    310e:	08 95       	ret

00003110 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    3110:	0e 94 7e 18 	call	0x30fc	; 0x30fc <_ZN7TwoWire17beginTransmissionEh>
    3114:	08 95       	ret

00003116 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    3116:	0f 93       	push	r16
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    3118:	40 91 0e 06 	lds	r20, 0x060E	; 0x80060e <_ZN7TwoWire14txBufferLengthE>
    311c:	06 2f       	mov	r16, r22
    311e:	21 e0       	ldi	r18, 0x01	; 1
    3120:	60 e1       	ldi	r22, 0x10	; 16
    3122:	76 e0       	ldi	r23, 0x06	; 6
    3124:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <_ZN7TwoWire9txAddressE>
    3128:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    312c:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    3130:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    3134:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <_ZN7TwoWire12transmittingE>
  return ret;
}
    3138:	0f 91       	pop	r16
    313a:	08 95       	ret

0000313c <_ZN7TwoWire11requestFromEhhmhh>:
{
  twi_setFrequency(clock);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    313c:	8f 92       	push	r8
    313e:	9f 92       	push	r9
    3140:	af 92       	push	r10
    3142:	bf 92       	push	r11
    3144:	cf 92       	push	r12
    3146:	df 92       	push	r13
    3148:	ef 92       	push	r14
    314a:	ff 92       	push	r15
    314c:	0f 93       	push	r16
    314e:	1f 93       	push	r17
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	ec 01       	movw	r28, r24
    3156:	d6 2e       	mov	r13, r22
    3158:	f4 2e       	mov	r15, r20
    315a:	48 01       	movw	r8, r16
    315c:	59 01       	movw	r10, r18
  if (isize > 0) {
    315e:	ee 20       	and	r14, r14
    3160:	69 f1       	breq	.+90     	; 0x31bc <_ZN7TwoWire11requestFromEhhmhh+0x80>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    3162:	0e 94 7e 18 	call	0x30fc	; 0x30fc <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    3166:	23 e0       	ldi	r18, 0x03	; 3
    3168:	2e 15       	cp	r18, r14
    316a:	20 f4       	brcc	.+8      	; 0x3174 <_ZN7TwoWire11requestFromEhhmhh+0x38>
    isize = 3;
    316c:	0f 2e       	mov	r0, r31
    316e:	f3 e0       	ldi	r31, 0x03	; 3
    3170:	ef 2e       	mov	r14, r31
    3172:	f0 2d       	mov	r31, r0
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    3174:	1f ef       	ldi	r17, 0xFF	; 255
    3176:	1e 0d       	add	r17, r14
    3178:	ee 20       	and	r14, r14
    317a:	e1 f0       	breq	.+56     	; 0x31b4 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    write((uint8_t)(iaddress >> (isize*8)));
    317c:	e8 81       	ld	r30, Y
    317e:	f9 81       	ldd	r31, Y+1	; 0x01
    3180:	01 90       	ld	r0, Z+
    3182:	f0 81       	ld	r31, Z
    3184:	e0 2d       	mov	r30, r0
    3186:	81 2f       	mov	r24, r17
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	a5 01       	movw	r20, r10
    3198:	94 01       	movw	r18, r8
    319a:	04 c0       	rjmp	.+8      	; 0x31a4 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    319c:	56 95       	lsr	r21
    319e:	47 95       	ror	r20
    31a0:	37 95       	ror	r19
    31a2:	27 95       	ror	r18
    31a4:	8a 95       	dec	r24
    31a6:	d2 f7       	brpl	.-12     	; 0x319c <_ZN7TwoWire11requestFromEhhmhh+0x60>
    31a8:	ca 01       	movw	r24, r20
    31aa:	b9 01       	movw	r22, r18
    31ac:	ce 01       	movw	r24, r28
    31ae:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    31b0:	e1 2e       	mov	r14, r17
    31b2:	e0 cf       	rjmp	.-64     	; 0x3174 <_ZN7TwoWire11requestFromEhhmhh+0x38>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	ce 01       	movw	r24, r28
    31b8:	0e 94 8b 18 	call	0x3116	; 0x3116 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    31bc:	30 e2       	ldi	r19, 0x20	; 32
    31be:	3f 15       	cp	r19, r15
    31c0:	18 f4       	brcc	.+6      	; 0x31c8 <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    quantity = BUFFER_LENGTH;
    31c2:	68 94       	set
    31c4:	ff 24       	eor	r15, r15
    31c6:	f5 f8       	bld	r15, 5
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    31c8:	2c 2d       	mov	r18, r12
    31ca:	4f 2d       	mov	r20, r15
    31cc:	63 e3       	ldi	r22, 0x33	; 51
    31ce:	76 e0       	ldi	r23, 0x06	; 6
    31d0:	8d 2d       	mov	r24, r13
    31d2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    31d6:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    31da:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <_ZN7TwoWire14rxBufferLengthE>

  return read;
}
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	df 90       	pop	r13
    31ec:	cf 90       	pop	r12
    31ee:	bf 90       	pop	r11
    31f0:	af 90       	pop	r10
    31f2:	9f 90       	pop	r9
    31f4:	8f 90       	pop	r8
    31f6:	08 95       	ret

000031f8 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    31f8:	cf 92       	push	r12
    31fa:	ef 92       	push	r14
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    3200:	c2 2e       	mov	r12, r18
    3202:	e1 2c       	mov	r14, r1
    3204:	00 e0       	ldi	r16, 0x00	; 0
    3206:	10 e0       	ldi	r17, 0x00	; 0
    3208:	98 01       	movw	r18, r16
    320a:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN7TwoWire11requestFromEhhmhh>
}
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ef 90       	pop	r14
    3214:	cf 90       	pop	r12
    3216:	08 95       	ret

00003218 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    3218:	21 e0       	ldi	r18, 0x01	; 1
    321a:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN7TwoWire11requestFromEhhh>
}
    321e:	08 95       	ret

00003220 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    3220:	21 e0       	ldi	r18, 0x01	; 1
    3222:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN7TwoWire11requestFromEhhh>
}
    3226:	08 95       	ret

00003228 <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    3228:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN7TwoWire11requestFromEhhh>
}
    322c:	08 95       	ret

0000322e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    322e:	61 e0       	ldi	r22, 0x01	; 1
    3230:	0e 94 8b 18 	call	0x3116	; 0x3116 <_ZN7TwoWire15endTransmissionEh>
}
    3234:	08 95       	ret

00003236 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    3236:	70 93 0a 06 	sts	0x060A, r23	; 0x80060a <_ZN7TwoWire14user_onReceiveE+0x1>
    323a:	60 93 09 06 	sts	0x0609, r22	; 0x800609 <_ZN7TwoWire14user_onReceiveE>
    323e:	08 95       	ret

00003240 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3240:	70 93 0c 06 	sts	0x060C, r23	; 0x80060c <_ZN7TwoWire14user_onRequestE+0x1>
    3244:	60 93 0b 06 	sts	0x060B, r22	; 0x80060b <_ZN7TwoWire14user_onRequestE>
    3248:	08 95       	ret

0000324a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    324a:	6f ef       	ldi	r22, 0xFF	; 255
    324c:	7f ef       	ldi	r23, 0xFF	; 255
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 4a 18 	call	0x3094	; 0x3094 <_Z41__static_initialization_and_destruction_0ii>
    3256:	08 95       	ret

00003258 <_ZN6TimingC1Ehmmm>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "Timing.h"

Timing::Timing(
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	fc 01       	movw	r30, r24
				uint8_t isMock, 
				volatile uint32_t readingTime, 
				volatile uint32_t loopDelay, 
				volatile uint32_t intercycleDownTime)
    326a:	10 82       	st	Z, r1
    326c:	11 82       	std	Z+1, r1	; 0x01
    326e:	12 82       	std	Z+2, r1	; 0x02
    3270:	13 82       	std	Z+3, r1	; 0x03
    3272:	14 82       	std	Z+4, r1	; 0x04
    3274:	15 82       	std	Z+5, r1	; 0x05
    3276:	16 82       	std	Z+6, r1	; 0x06
    3278:	17 82       	std	Z+7, r1	; 0x07
    327a:	10 86       	std	Z+8, r1	; 0x08
    327c:	11 86       	std	Z+9, r1	; 0x09
    327e:	12 86       	std	Z+10, r1	; 0x0a
    3280:	13 86       	std	Z+11, r1	; 0x0b
    3282:	11 8e       	std	Z+25, r1	; 0x19
    3284:	12 8e       	std	Z+26, r1	; 0x1a
    3286:	13 8e       	std	Z+27, r1	; 0x1b
    3288:	14 8e       	std	Z+28, r1	; 0x1c
    328a:	11 a6       	std	Z+41, r1	; 0x29
    328c:	12 a6       	std	Z+42, r1	; 0x2a
    328e:	13 a6       	std	Z+43, r1	; 0x2b
    3290:	14 a6       	std	Z+44, r1	; 0x2c
{
	_loopDelay = loopDelay;
    3292:	e4 82       	std	Z+4, r14	; 0x04
    3294:	f5 82       	std	Z+5, r15	; 0x05
    3296:	06 83       	std	Z+6, r16	; 0x06
    3298:	17 83       	std	Z+7, r17	; 0x07
	_readingTime = readingTime;
    329a:	20 87       	std	Z+8, r18	; 0x08
    329c:	31 87       	std	Z+9, r19	; 0x09
    329e:	42 87       	std	Z+10, r20	; 0x0a
    32a0:	53 87       	std	Z+11, r21	; 0x0b
	_intercycleDownTime = intercycleDownTime;
    32a2:	a0 82       	st	Z, r10
    32a4:	b1 82       	std	Z+1, r11	; 0x01
    32a6:	c2 82       	std	Z+2, r12	; 0x02
    32a8:	d3 82       	std	Z+3, r13	; 0x03
	_isMock = isMock;
    32aa:	60 8f       	std	Z+24, r22	; 0x18
}
    32ac:	1f 91       	pop	r17
    32ae:	0f 91       	pop	r16
    32b0:	ff 90       	pop	r15
    32b2:	ef 90       	pop	r14
    32b4:	df 90       	pop	r13
    32b6:	cf 90       	pop	r12
    32b8:	bf 90       	pop	r11
    32ba:	af 90       	pop	r10
    32bc:	08 95       	ret

000032be <_ZN6TimingD1Ev>:

Timing::~Timing() {}
    32be:	08 95       	ret

000032c0 <_ZN6Timing17MOCK_ADVANCE_TIMEEm>:

#ifdef UNIT_TESTS
void Timing::MOCK_ADVANCE_TIME(uint32_t milliseconds){
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
	_MOCK_ADVANCED_BY += milliseconds;
    32c4:	fc 01       	movw	r30, r24
    32c6:	01 a5       	ldd	r16, Z+41	; 0x29
    32c8:	12 a5       	ldd	r17, Z+42	; 0x2a
    32ca:	23 a5       	ldd	r18, Z+43	; 0x2b
    32cc:	34 a5       	ldd	r19, Z+44	; 0x2c
    32ce:	40 0f       	add	r20, r16
    32d0:	51 1f       	adc	r21, r17
    32d2:	62 1f       	adc	r22, r18
    32d4:	73 1f       	adc	r23, r19
    32d6:	41 a7       	std	Z+41, r20	; 0x29
    32d8:	52 a7       	std	Z+42, r21	; 0x2a
    32da:	63 a7       	std	Z+43, r22	; 0x2b
    32dc:	74 a7       	std	Z+44, r23	; 0x2c
}
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	08 95       	ret

000032e4 <_ZN6Timing5resetEv>:
#endif

void Timing::reset(){
    32e4:	fc 01       	movw	r30, r24
	__is10SecsTriggered = 
	
	__last1SecInterval =
	__last30SecInterval = 
	
	0;
    32e6:	15 a2       	std	Z+37, r1	; 0x25
    32e8:	16 a2       	std	Z+38, r1	; 0x26
    32ea:	17 a2       	std	Z+39, r1	; 0x27
    32ec:	10 a6       	std	Z+40, r1	; 0x28
    32ee:	11 a2       	std	Z+33, r1	; 0x21
    32f0:	12 a2       	std	Z+34, r1	; 0x22
    32f2:	13 a2       	std	Z+35, r1	; 0x23
    32f4:	14 a2       	std	Z+36, r1	; 0x24
    32f6:	10 a2       	std	Z+32, r1	; 0x20
    32f8:	17 8e       	std	Z+31, r1	; 0x1f
    32fa:	16 8e       	std	Z+30, r1	; 0x1e
    32fc:	15 8e       	std	Z+29, r1	; 0x1d
    32fe:	11 8e       	std	Z+25, r1	; 0x19
    3300:	12 8e       	std	Z+26, r1	; 0x1a
    3302:	13 8e       	std	Z+27, r1	; 0x1b
    3304:	14 8e       	std	Z+28, r1	; 0x1c
    3306:	17 8a       	std	Z+23, r1	; 0x17
    3308:	16 8a       	std	Z+22, r1	; 0x16
    330a:	15 8a       	std	Z+21, r1	; 0x15
    330c:	14 8a       	std	Z+20, r1	; 0x14
    330e:	13 8a       	std	Z+19, r1	; 0x13
    3310:	12 8a       	std	Z+18, r1	; 0x12
    3312:	11 8a       	std	Z+17, r1	; 0x11
    3314:	10 8a       	std	Z+16, r1	; 0x10
    3316:	17 86       	std	Z+15, r1	; 0x0f
    3318:	16 86       	std	Z+14, r1	; 0x0e
    331a:	15 86       	std	Z+13, r1	; 0x0d
    331c:	14 86       	std	Z+12, r1	; 0x0c
	
	#ifdef UNIT_TESTS	
	_MOCK_ADVANCED_BY = 0;
    331e:	11 a6       	std	Z+41, r1	; 0x29
    3320:	12 a6       	std	Z+42, r1	; 0x2a
    3322:	13 a6       	std	Z+43, r1	; 0x2b
    3324:	14 a6       	std	Z+44, r1	; 0x2c
    3326:	08 95       	ret

00003328 <_ZN6Timing19getTimePerCycleInMsEv>:
	#endif
}


uint32_t Timing::getTimePerCycleInMs(){
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	fc 01       	movw	r30, r24
	uint32_t oneCycleTime = _loopDelay+_readingTime+_intercycleDownTime;
    332e:	84 81       	ldd	r24, Z+4	; 0x04
    3330:	95 81       	ldd	r25, Z+5	; 0x05
    3332:	a6 81       	ldd	r26, Z+6	; 0x06
    3334:	b7 81       	ldd	r27, Z+7	; 0x07
    3336:	40 85       	ldd	r20, Z+8	; 0x08
    3338:	51 85       	ldd	r21, Z+9	; 0x09
    333a:	62 85       	ldd	r22, Z+10	; 0x0a
    333c:	73 85       	ldd	r23, Z+11	; 0x0b
    333e:	48 0f       	add	r20, r24
    3340:	59 1f       	adc	r21, r25
    3342:	6a 1f       	adc	r22, r26
    3344:	7b 1f       	adc	r23, r27
    3346:	80 81       	ld	r24, Z
    3348:	91 81       	ldd	r25, Z+1	; 0x01
    334a:	a2 81       	ldd	r26, Z+2	; 0x02
    334c:	b3 81       	ldd	r27, Z+3	; 0x03
    334e:	8a 01       	movw	r16, r20
    3350:	9b 01       	movw	r18, r22
    3352:	08 0f       	add	r16, r24
    3354:	19 1f       	adc	r17, r25
    3356:	2a 1f       	adc	r18, r26
    3358:	3b 1f       	adc	r19, r27
    335a:	c9 01       	movw	r24, r18
    335c:	b8 01       	movw	r22, r16
	return oneCycleTime;
}
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	08 95       	ret

00003364 <_ZN6Timing17getCyclesInOneDayEv>:

uint32_t Timing::getCyclesInOneDay(){
	uint32_t oneCycleTime = getTimePerCycleInMs()/1000;
    3364:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN6Timing19getTimePerCycleInMsEv>
    3368:	28 ee       	ldi	r18, 0xE8	; 232
    336a:	33 e0       	ldi	r19, 0x03	; 3
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
	uint32_t cyclesInOneDay = (24UL*60*60)/oneCycleTime;
    3374:	60 e8       	ldi	r22, 0x80	; 128
    3376:	71 e5       	ldi	r23, 0x51	; 81
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
	return cyclesInOneDay;
}
    3380:	ca 01       	movw	r24, r20
    3382:	b9 01       	movw	r22, r18
    3384:	08 95       	ret

00003386 <_ZN6Timing9getMillisEv>:
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}

unsigned long Timing::getMillis()
{
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	00 d0       	rcall	.+0      	; 0x3390 <_ZN6Timing9getMillisEv+0xa>
    3390:	00 d0       	rcall	.+0      	; 0x3392 <_ZN6Timing9getMillisEv+0xc>
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	8c 01       	movw	r16, r24
	if (_isMock)
    3398:	fc 01       	movw	r30, r24
    339a:	80 8d       	ldd	r24, Z+24	; 0x18
    339c:	88 23       	and	r24, r24
    339e:	e1 f0       	breq	.+56     	; 0x33d8 <_ZN6Timing9getMillisEv+0x52>
	{
		//Speed up time in DEBUG mode ! // Each second=>x minutes
		volatile unsigned long currentMillis = millis();
    33a0:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <millis>
    33a4:	69 83       	std	Y+1, r22	; 0x01
    33a6:	7a 83       	std	Y+2, r23	; 0x02
    33a8:	8b 83       	std	Y+3, r24	; 0x03
    33aa:	9c 83       	std	Y+4, r25	; 0x04

		#ifdef UNIT_TESTS
		currentMillis += _MOCK_ADVANCED_BY;
    33ac:	f8 01       	movw	r30, r16
    33ae:	41 a5       	ldd	r20, Z+41	; 0x29
    33b0:	52 a5       	ldd	r21, Z+42	; 0x2a
    33b2:	63 a5       	ldd	r22, Z+43	; 0x2b
    33b4:	74 a5       	ldd	r23, Z+44	; 0x2c
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	ab 81       	ldd	r26, Y+3	; 0x03
    33bc:	bc 81       	ldd	r27, Y+4	; 0x04
    33be:	84 0f       	add	r24, r20
    33c0:	95 1f       	adc	r25, r21
    33c2:	a6 1f       	adc	r26, r22
    33c4:	b7 1f       	adc	r27, r23
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	ab 83       	std	Y+3, r26	; 0x03
    33cc:	bc 83       	std	Y+4, r27	; 0x04
		#endif
		
		return currentMillis;
    33ce:	69 81       	ldd	r22, Y+1	; 0x01
    33d0:	7a 81       	ldd	r23, Y+2	; 0x02
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <_ZN6Timing9getMillisEv+0x56>
		//currentMillis = 1L*40*60*1000*secsFromStart;
		//return currentMillis;
	}
	else
	{
		return millis();
    33d8:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <millis>
	}
}
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	08 95       	ret

000033ee <_ZN6Timing11onCycleLoopEv>:
	uint32_t oneCycleTime = getTimePerCycleInMs()/1000;
	uint32_t cyclesInOneDay = (24UL*60*60)/oneCycleTime;
	return cyclesInOneDay;
}

void Timing::onCycleLoop(){
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	28 97       	sbiw	r28, 0x08	; 8
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	8c 01       	movw	r16, r24
	
	volatile unsigned long currentMillis = getMillis();
    3408:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6Timing9getMillisEv>
    340c:	69 83       	std	Y+1, r22	; 0x01
    340e:	7a 83       	std	Y+2, r23	; 0x02
    3410:	8b 83       	std	Y+3, r24	; 0x03
    3412:	9c 83       	std	Y+4, r25	; 0x04
	
	if (_currCycleStartTime == 0)
    3414:	f8 01       	movw	r30, r16
    3416:	81 8d       	ldd	r24, Z+25	; 0x19
    3418:	92 8d       	ldd	r25, Z+26	; 0x1a
    341a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    341c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    341e:	89 2b       	or	r24, r25
    3420:	8a 2b       	or	r24, r26
    3422:	8b 2b       	or	r24, r27
    3424:	41 f4       	brne	.+16     	; 0x3436 <_ZN6Timing11onCycleLoopEv+0x48>
		_currCycleStartTime = currentMillis;
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	ab 81       	ldd	r26, Y+3	; 0x03
    342c:	bc 81       	ldd	r27, Y+4	; 0x04
    342e:	81 8f       	std	Z+25, r24	; 0x19
    3430:	92 8f       	std	Z+26, r25	; 0x1a
    3432:	a3 8f       	std	Z+27, r26	; 0x1b
    3434:	b4 8f       	std	Z+28, r27	; 0x1c
	
	//How long has this cycle been running for ?
	volatile unsigned long currCycleDuration = currentMillis - _currCycleStartTime;
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	ab 81       	ldd	r26, Y+3	; 0x03
    343c:	bc 81       	ldd	r27, Y+4	; 0x04
    343e:	f8 01       	movw	r30, r16
    3440:	41 8d       	ldd	r20, Z+25	; 0x19
    3442:	52 8d       	ldd	r21, Z+26	; 0x1a
    3444:	63 8d       	ldd	r22, Z+27	; 0x1b
    3446:	74 8d       	ldd	r23, Z+28	; 0x1c
    3448:	84 1b       	sub	r24, r20
    344a:	95 0b       	sbc	r25, r21
    344c:	a6 0b       	sbc	r26, r22
    344e:	b7 0b       	sbc	r27, r23
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	af 83       	std	Y+7, r26	; 0x07
    3456:	b8 87       	std	Y+8, r27	; 0x08
	//RM_LOG2(F("CurrCycleDuration"), currCycleDuration);
		
	//Some don't latch, so reset them
	_at10Secs = false;
    3458:	14 86       	std	Z+12, r1	; 0x0c
	_at1Min = false;
    345a:	15 86       	std	Z+13, r1	; 0x0d
	_at1Min30Secs = false;
    345c:	16 86       	std	Z+14, r1	; 0x0e
	_at2Mins = false;
    345e:	17 86       	std	Z+15, r1	; 0x0f
	_at30SecInterval = false;
    3460:	11 8a       	std	Z+17, r1	; 0x11
	_at1SecInterval = false;
    3462:	10 8a       	std	Z+16, r1	; 0x10
	//__is1MinTriggered = false;
	//__is2MinTriggered = false;


	//10 seconds
	if (currCycleDuration >= 10*1000) {
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	af 81       	ldd	r26, Y+7	; 0x07
    346a:	b8 85       	ldd	r27, Y+8	; 0x08
    346c:	80 31       	cpi	r24, 0x10	; 16
    346e:	97 42       	sbci	r25, 0x27	; 39
    3470:	a1 05       	cpc	r26, r1
    3472:	b1 05       	cpc	r27, r1
    3474:	48 f0       	brcs	.+18     	; 0x3488 <_ZN6Timing11onCycleLoopEv+0x9a>
		_has10SecsElapsed = true;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	f8 01       	movw	r30, r16
    347a:	86 8b       	std	Z+22, r24	; 0x16
			
		//One-Time @10-Secs triggered
		if (!__is10SecsTriggered) {
    347c:	80 a1       	ldd	r24, Z+32	; 0x20
    347e:	81 11       	cpse	r24, r1
    3480:	03 c0       	rjmp	.+6      	; 0x3488 <_ZN6Timing11onCycleLoopEv+0x9a>
				
			_at10Secs = true;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	84 87       	std	Z+12, r24	; 0x0c
			__is10SecsTriggered = true;
    3486:	80 a3       	std	Z+32, r24	; 0x20
		}
	}
		
	//1 minute
	if (currCycleDuration >= 1L*60*1000) {
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	af 81       	ldd	r26, Y+7	; 0x07
    348e:	b8 85       	ldd	r27, Y+8	; 0x08
    3490:	80 36       	cpi	r24, 0x60	; 96
    3492:	9a 4e       	sbci	r25, 0xEA	; 234
    3494:	a1 05       	cpc	r26, r1
    3496:	b1 05       	cpc	r27, r1
    3498:	48 f0       	brcs	.+18     	; 0x34ac <_ZN6Timing11onCycleLoopEv+0xbe>
		_has1MinElapsed = true;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	f8 01       	movw	r30, r16
    349e:	82 8b       	std	Z+18, r24	; 0x12
			
		//One-Time @1-Min triggered
		if (!__is1MinTriggered) {
    34a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    34a2:	81 11       	cpse	r24, r1
    34a4:	03 c0       	rjmp	.+6      	; 0x34ac <_ZN6Timing11onCycleLoopEv+0xbe>
				
			_at1Min = true;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	85 87       	std	Z+13, r24	; 0x0d
			__is1MinTriggered = true;
    34aa:	85 8f       	std	Z+29, r24	; 0x1d
		}
	}
		
	//1 minute 30 secs
	if (currCycleDuration >= 3L*60*1000/2) {
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	af 81       	ldd	r26, Y+7	; 0x07
    34b2:	b8 85       	ldd	r27, Y+8	; 0x08
    34b4:	80 39       	cpi	r24, 0x90	; 144
    34b6:	9f 45       	sbci	r25, 0x5F	; 95
    34b8:	a1 40       	sbci	r26, 0x01	; 1
    34ba:	b1 05       	cpc	r27, r1
    34bc:	48 f0       	brcs	.+18     	; 0x34d0 <_ZN6Timing11onCycleLoopEv+0xe2>
		_has1Min30SecsElapsed = true;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	f8 01       	movw	r30, r16
    34c2:	83 8b       	std	Z+19, r24	; 0x13
			
		//One-Time @1-Min triggered
		if (!__is1Min30SecsTriggered) {
    34c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    34c6:	81 11       	cpse	r24, r1
    34c8:	03 c0       	rjmp	.+6      	; 0x34d0 <_ZN6Timing11onCycleLoopEv+0xe2>
				
			_at1Min30Secs = true;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	86 87       	std	Z+14, r24	; 0x0e
			__is1Min30SecsTriggered = true;
    34ce:	86 8f       	std	Z+30, r24	; 0x1e
		}
	}
		
	//2 minutes
	if (currCycleDuration >= 2L*60*1000) {
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	af 81       	ldd	r26, Y+7	; 0x07
    34d6:	b8 85       	ldd	r27, Y+8	; 0x08
    34d8:	80 3c       	cpi	r24, 0xC0	; 192
    34da:	94 4d       	sbci	r25, 0xD4	; 212
    34dc:	a1 40       	sbci	r26, 0x01	; 1
    34de:	b1 05       	cpc	r27, r1
    34e0:	48 f0       	brcs	.+18     	; 0x34f4 <_ZN6Timing11onCycleLoopEv+0x106>
		_has2MinElapsed = true;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	f8 01       	movw	r30, r16
    34e6:	85 8b       	std	Z+21, r24	; 0x15
			
		//One-Time @2-Min triggered
		if (!__is2MinTriggered) {
    34e8:	87 8d       	ldd	r24, Z+31	; 0x1f
    34ea:	81 11       	cpse	r24, r1
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <_ZN6Timing11onCycleLoopEv+0x106>
				
			_at2Mins = true;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	87 87       	std	Z+15, r24	; 0x0f
			__is2MinTriggered = true;
    34f2:	87 8f       	std	Z+31, r24	; 0x1f
		}
	}
		
	//5 mins
	if (currCycleDuration >= 5L*60*1000)
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	af 81       	ldd	r26, Y+7	; 0x07
    34fa:	b8 85       	ldd	r27, Y+8	; 0x08
    34fc:	80 3e       	cpi	r24, 0xE0	; 224
    34fe:	93 49       	sbci	r25, 0x93	; 147
    3500:	a4 40       	sbci	r26, 0x04	; 4
    3502:	b1 05       	cpc	r27, r1
    3504:	18 f0       	brcs	.+6      	; 0x350c <_ZN6Timing11onCycleLoopEv+0x11e>
	_has5MinElapsed=true;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	f8 01       	movw	r30, r16
    350a:	84 8b       	std	Z+20, r24	; 0x14
		
	//15 mins
	if (currCycleDuration >= 15L*60*1000)
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	af 81       	ldd	r26, Y+7	; 0x07
    3512:	b8 85       	ldd	r27, Y+8	; 0x08
    3514:	80 3a       	cpi	r24, 0xA0	; 160
    3516:	9b 4b       	sbci	r25, 0xBB	; 187
    3518:	ad 40       	sbci	r26, 0x0D	; 13
    351a:	b1 05       	cpc	r27, r1
    351c:	18 f0       	brcs	.+6      	; 0x3524 <_ZN6Timing11onCycleLoopEv+0x136>
	_has15MinElapsed=true;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	f8 01       	movw	r30, r16
    3522:	87 8b       	std	Z+23, r24	; 0x17
		
	//1 sec interval
	if ( (currentMillis - __last1SecInterval) >= 1L*1000) {
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	ab 81       	ldd	r26, Y+3	; 0x03
    352a:	bc 81       	ldd	r27, Y+4	; 0x04
    352c:	f8 01       	movw	r30, r16
    352e:	41 a1       	ldd	r20, Z+33	; 0x21
    3530:	52 a1       	ldd	r21, Z+34	; 0x22
    3532:	63 a1       	ldd	r22, Z+35	; 0x23
    3534:	74 a1       	ldd	r23, Z+36	; 0x24
    3536:	84 1b       	sub	r24, r20
    3538:	95 0b       	sbc	r25, r21
    353a:	a6 0b       	sbc	r26, r22
    353c:	b7 0b       	sbc	r27, r23
    353e:	88 3e       	cpi	r24, 0xE8	; 232
    3540:	93 40       	sbci	r25, 0x03	; 3
    3542:	a1 05       	cpc	r26, r1
    3544:	b1 05       	cpc	r27, r1
    3546:	58 f0       	brcs	.+22     	; 0x355e <_ZN6Timing11onCycleLoopEv+0x170>
		_at1SecInterval = true;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	f8 01       	movw	r30, r16
    354c:	80 8b       	std	Z+16, r24	; 0x10
		__last1SecInterval = currentMillis;
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	9a 81       	ldd	r25, Y+2	; 0x02
    3552:	ab 81       	ldd	r26, Y+3	; 0x03
    3554:	bc 81       	ldd	r27, Y+4	; 0x04
    3556:	81 a3       	std	Z+33, r24	; 0x21
    3558:	92 a3       	std	Z+34, r25	; 0x22
    355a:	a3 a3       	std	Z+35, r26	; 0x23
    355c:	b4 a3       	std	Z+36, r27	; 0x24
	}
		
	//30 sec interval
	if ( (currentMillis - __last30SecInterval) >= 30L*1000) {
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
    3562:	ab 81       	ldd	r26, Y+3	; 0x03
    3564:	bc 81       	ldd	r27, Y+4	; 0x04
    3566:	f8 01       	movw	r30, r16
    3568:	45 a1       	ldd	r20, Z+37	; 0x25
    356a:	56 a1       	ldd	r21, Z+38	; 0x26
    356c:	67 a1       	ldd	r22, Z+39	; 0x27
    356e:	70 a5       	ldd	r23, Z+40	; 0x28
    3570:	84 1b       	sub	r24, r20
    3572:	95 0b       	sbc	r25, r21
    3574:	a6 0b       	sbc	r26, r22
    3576:	b7 0b       	sbc	r27, r23
    3578:	80 33       	cpi	r24, 0x30	; 48
    357a:	95 47       	sbci	r25, 0x75	; 117
    357c:	a1 05       	cpc	r26, r1
    357e:	b1 05       	cpc	r27, r1
    3580:	58 f0       	brcs	.+22     	; 0x3598 <_ZN6Timing11onCycleLoopEv+0x1aa>
		_at30SecInterval = true;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	f8 01       	movw	r30, r16
    3586:	81 8b       	std	Z+17, r24	; 0x11
		__last30SecInterval = currentMillis;
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	ab 81       	ldd	r26, Y+3	; 0x03
    358e:	bc 81       	ldd	r27, Y+4	; 0x04
    3590:	85 a3       	std	Z+37, r24	; 0x25
    3592:	96 a3       	std	Z+38, r25	; 0x26
    3594:	a7 a3       	std	Z+39, r26	; 0x27
    3596:	b0 a7       	std	Z+40, r27	; 0x28
	//RM_LOG("_is30SecInterval",_is30SecInterval);
	//RM_LOG("_at1SecInterval",_is1SecInterval);
	//RM_LOG2("_gpsFetchInProgress",_gpsFetchInProgress);
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}
    3598:	28 96       	adiw	r28, 0x08	; 8
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	08 95       	ret

000035ae <_ZN6Timing25getDurationPerCycleInSecsEv>:
		return true;
	else
		return false;
}

uint32_t Timing::getDurationPerCycleInSecs(){
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <_ZN6Timing25getDurationPerCycleInSecsEv+0xa>
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <_ZN6Timing25getDurationPerCycleInSecsEv+0xc>
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	fc 01       	movw	r30, r24
	
	//Calc approximate time between cycles. Divide by 1000 to prevent overflow when multiplied later.
	volatile uint32_t durationPerCycleInSecs =
		(_intercycleDownTime + _readingTime + _loopDelay)/1000;
    35c0:	80 81       	ld	r24, Z
    35c2:	91 81       	ldd	r25, Z+1	; 0x01
    35c4:	a2 81       	ldd	r26, Z+2	; 0x02
    35c6:	b3 81       	ldd	r27, Z+3	; 0x03
    35c8:	40 85       	ldd	r20, Z+8	; 0x08
    35ca:	51 85       	ldd	r21, Z+9	; 0x09
    35cc:	62 85       	ldd	r22, Z+10	; 0x0a
    35ce:	73 85       	ldd	r23, Z+11	; 0x0b
    35d0:	48 0f       	add	r20, r24
    35d2:	59 1f       	adc	r21, r25
    35d4:	6a 1f       	adc	r22, r26
    35d6:	7b 1f       	adc	r23, r27
    35d8:	84 81       	ldd	r24, Z+4	; 0x04
    35da:	95 81       	ldd	r25, Z+5	; 0x05
    35dc:	a6 81       	ldd	r26, Z+6	; 0x06
    35de:	b7 81       	ldd	r27, Z+7	; 0x07
    35e0:	8a 01       	movw	r16, r20
    35e2:	9b 01       	movw	r18, r22
    35e4:	08 0f       	add	r16, r24
    35e6:	19 1f       	adc	r17, r25
    35e8:	2a 1f       	adc	r18, r26
    35ea:	3b 1f       	adc	r19, r27
    35ec:	c9 01       	movw	r24, r18
    35ee:	b8 01       	movw	r22, r16
    35f0:	28 ee       	ldi	r18, 0xE8	; 232
    35f2:	33 e0       	ldi	r19, 0x03	; 3
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    35fc:	29 83       	std	Y+1, r18	; 0x01
    35fe:	3a 83       	std	Y+2, r19	; 0x02
    3600:	4b 83       	std	Y+3, r20	; 0x03
    3602:	5c 83       	std	Y+4, r21	; 0x04
		
	//- todo: if kept up by battery? whilst sending? add a EEPROM entry when cycle finishes?
	return durationPerCycleInSecs;
    3604:	69 81       	ldd	r22, Y+1	; 0x01
    3606:	7a 81       	ldd	r23, Y+2	; 0x02
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	08 95       	ret

0000361e <_ZN6Timing18isStartOfHourCycleEm>:
	{
		return millis();
	}
}

boolean Timing::isStartOfHourCycle(unsigned long currCycleNumber){
    361e:	4f 92       	push	r4
    3620:	5f 92       	push	r5
    3622:	6f 92       	push	r6
    3624:	7f 92       	push	r7
    3626:	8f 92       	push	r8
    3628:	9f 92       	push	r9
    362a:	af 92       	push	r10
    362c:	bf 92       	push	r11
    362e:	cf 92       	push	r12
    3630:	df 92       	push	r13
    3632:	ef 92       	push	r14
    3634:	ff 92       	push	r15
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	2c 97       	sbiw	r28, 0x0c	; 12
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
	
	//If so, persist data (taking into account previous readings or don't read at all?)
	if (currCycleNumber == FIRST_CYCLE_NO)
    364a:	41 30       	cpi	r20, 0x01	; 1
    364c:	51 05       	cpc	r21, r1
    364e:	61 05       	cpc	r22, r1
    3650:	71 05       	cpc	r23, r1
    3652:	09 f4       	brne	.+2      	; 0x3656 <_ZN6Timing18isStartOfHourCycleEm+0x38>
    3654:	47 c0       	rjmp	.+142    	; 0x36e4 <_ZN6Timing18isStartOfHourCycleEm+0xc6>
    3656:	6a 01       	movw	r12, r20
    3658:	7b 01       	movw	r14, r22
		return true;
		
	volatile long test=currCycleNumber;
    365a:	49 83       	std	Y+1, r20	; 0x01
    365c:	5a 83       	std	Y+2, r21	; 0x02
    365e:	6b 83       	std	Y+3, r22	; 0x03
    3660:	7c 83       	std	Y+4, r23	; 0x04
		
	uint32_t durationPerCycleInSecs = getDurationPerCycleInSecs();
    3662:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN6Timing25getDurationPerCycleInSecsEv>
    3666:	2b 01       	movw	r4, r22
    3668:	3c 01       	movw	r6, r24
		
	volatile uint32_t prevDurationMins = ((currCycleNumber-1)*durationPerCycleInSecs)/(60);
    366a:	c7 01       	movw	r24, r14
    366c:	b6 01       	movw	r22, r12
    366e:	61 50       	subi	r22, 0x01	; 1
    3670:	71 09       	sbc	r23, r1
    3672:	81 09       	sbc	r24, r1
    3674:	91 09       	sbc	r25, r1
    3676:	a3 01       	movw	r20, r6
    3678:	92 01       	movw	r18, r4
    367a:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__mulsi3>
    367e:	0f 2e       	mov	r0, r31
    3680:	fc e3       	ldi	r31, 0x3C	; 60
    3682:	8f 2e       	mov	r8, r31
    3684:	91 2c       	mov	r9, r1
    3686:	a1 2c       	mov	r10, r1
    3688:	b1 2c       	mov	r11, r1
    368a:	f0 2d       	mov	r31, r0
    368c:	a5 01       	movw	r20, r10
    368e:	94 01       	movw	r18, r8
    3690:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    3694:	2d 83       	std	Y+5, r18	; 0x05
    3696:	3e 83       	std	Y+6, r19	; 0x06
    3698:	4f 83       	std	Y+7, r20	; 0x07
    369a:	58 87       	std	Y+8, r21	; 0x08
	volatile uint32_t currDurationMins = (currCycleNumber*durationPerCycleInSecs)/(60);
    369c:	a7 01       	movw	r20, r14
    369e:	96 01       	movw	r18, r12
    36a0:	c3 01       	movw	r24, r6
    36a2:	b2 01       	movw	r22, r4
    36a4:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__mulsi3>
    36a8:	a5 01       	movw	r20, r10
    36aa:	94 01       	movw	r18, r8
    36ac:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    36b0:	29 87       	std	Y+9, r18	; 0x09
    36b2:	3a 87       	std	Y+10, r19	; 0x0a
    36b4:	4b 87       	std	Y+11, r20	; 0x0b
    36b6:	5c 87       	std	Y+12, r21	; 0x0c
	
	if ((int)prevDurationMins/MINS_IN_HOURS < ((int)currDurationMins/MINS_IN_HOURS))
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	af 81       	ldd	r26, Y+7	; 0x07
    36be:	b8 85       	ldd	r27, Y+8	; 0x08
    36c0:	2c e3       	ldi	r18, 0x3C	; 60
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	b9 01       	movw	r22, r18
    36c6:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    36ca:	fb 01       	movw	r30, r22
    36cc:	89 85       	ldd	r24, Y+9	; 0x09
    36ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    36d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    36d4:	b9 01       	movw	r22, r18
    36d6:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    36da:	e6 17       	cp	r30, r22
    36dc:	f7 07       	cpc	r31, r23
    36de:	24 f4       	brge	.+8      	; 0x36e8 <_ZN6Timing18isStartOfHourCycleEm+0xca>
		return true;
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	03 c0       	rjmp	.+6      	; 0x36ea <_ZN6Timing18isStartOfHourCycleEm+0xcc>

boolean Timing::isStartOfHourCycle(unsigned long currCycleNumber){
	
	//If so, persist data (taking into account previous readings or don't read at all?)
	if (currCycleNumber == FIRST_CYCLE_NO)
		return true;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	01 c0       	rjmp	.+2      	; 0x36ea <_ZN6Timing18isStartOfHourCycleEm+0xcc>
	volatile uint32_t currDurationMins = (currCycleNumber*durationPerCycleInSecs)/(60);
	
	if ((int)prevDurationMins/MINS_IN_HOURS < ((int)currDurationMins/MINS_IN_HOURS))
		return true;
	else
		return false;
    36e8:	80 e0       	ldi	r24, 0x00	; 0
}
    36ea:	2c 96       	adiw	r28, 0x0c	; 12
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	ff 90       	pop	r15
    36fc:	ef 90       	pop	r14
    36fe:	df 90       	pop	r13
    3700:	cf 90       	pop	r12
    3702:	bf 90       	pop	r11
    3704:	af 90       	pop	r10
    3706:	9f 90       	pop	r9
    3708:	8f 90       	pop	r8
    370a:	7f 90       	pop	r7
    370c:	6f 90       	pop	r6
    370e:	5f 90       	pop	r5
    3710:	4f 90       	pop	r4
    3712:	08 95       	ret

00003714 <_ZN6Timing12isDailyCycleEm>:
	//- todo: if kept up by battery? whilst sending? add a EEPROM entry when cycle finishes?
	return durationPerCycleInSecs;
}

boolean Timing::isDailyCycle(unsigned long currCycleNumber)
{
    3714:	8f 92       	push	r8
    3716:	9f 92       	push	r9
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	2c 97       	sbiw	r28, 0x0c	; 12
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	6a 01       	movw	r12, r20
    373a:	7b 01       	movw	r14, r22
	volatile uint32_t durationPerCycleInSecs = getDurationPerCycleInSecs();
    373c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN6Timing25getDurationPerCycleInSecsEv>
    3740:	69 83       	std	Y+1, r22	; 0x01
    3742:	7a 83       	std	Y+2, r23	; 0x02
    3744:	8b 83       	std	Y+3, r24	; 0x03
    3746:	9c 83       	std	Y+4, r25	; 0x04

	//Calc current time since module was installed
	volatile uint32_t totalDurationHrs = (currCycleNumber*durationPerCycleInSecs)/(60*60);
    3748:	29 81       	ldd	r18, Y+1	; 0x01
    374a:	3a 81       	ldd	r19, Y+2	; 0x02
    374c:	4b 81       	ldd	r20, Y+3	; 0x03
    374e:	5c 81       	ldd	r21, Y+4	; 0x04
    3750:	c7 01       	movw	r24, r14
    3752:	b6 01       	movw	r22, r12
    3754:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__mulsi3>
    3758:	0f 2e       	mov	r0, r31
    375a:	f0 e1       	ldi	r31, 0x10	; 16
    375c:	8f 2e       	mov	r8, r31
    375e:	fe e0       	ldi	r31, 0x0E	; 14
    3760:	9f 2e       	mov	r9, r31
    3762:	a1 2c       	mov	r10, r1
    3764:	b1 2c       	mov	r11, r1
    3766:	f0 2d       	mov	r31, r0
    3768:	a5 01       	movw	r20, r10
    376a:	94 01       	movw	r18, r8
    376c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    3770:	2d 83       	std	Y+5, r18	; 0x05
    3772:	3e 83       	std	Y+6, r19	; 0x06
    3774:	4f 83       	std	Y+7, r20	; 0x07
    3776:	58 87       	std	Y+8, r21	; 0x08
	
	//Check if 1 hour is almost up by looking at totalDuration of next cycle
	volatile uint32_t nextDurationHrs = ((currCycleNumber+1)*durationPerCycleInSecs)/(60*60);
    3778:	a7 01       	movw	r20, r14
    377a:	96 01       	movw	r18, r12
    377c:	2f 5f       	subi	r18, 0xFF	; 255
    377e:	3f 4f       	sbci	r19, 0xFF	; 255
    3780:	4f 4f       	sbci	r20, 0xFF	; 255
    3782:	5f 4f       	sbci	r21, 0xFF	; 255
    3784:	69 81       	ldd	r22, Y+1	; 0x01
    3786:	7a 81       	ldd	r23, Y+2	; 0x02
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	9c 81       	ldd	r25, Y+4	; 0x04
    378c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__mulsi3>
    3790:	a5 01       	movw	r20, r10
    3792:	94 01       	movw	r18, r8
    3794:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    3798:	29 87       	std	Y+9, r18	; 0x09
    379a:	3a 87       	std	Y+10, r19	; 0x0a
    379c:	4b 87       	std	Y+11, r20	; 0x0b
    379e:	5c 87       	std	Y+12, r21	; 0x0c
	
	//Check if it's a daily/weekly cycle by seeing if next cycle will rollover
	if ((int)totalDurationHrs/HOURS_IN_DAY < (int)nextDurationHrs/HOURS_IN_DAY)
    37a0:	8d 81       	ldd	r24, Y+5	; 0x05
    37a2:	9e 81       	ldd	r25, Y+6	; 0x06
    37a4:	af 81       	ldd	r26, Y+7	; 0x07
    37a6:	b8 85       	ldd	r27, Y+8	; 0x08
    37a8:	28 e1       	ldi	r18, 0x18	; 24
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	b9 01       	movw	r22, r18
    37ae:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    37b2:	fb 01       	movw	r30, r22
    37b4:	89 85       	ldd	r24, Y+9	; 0x09
    37b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    37ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    37bc:	b9 01       	movw	r22, r18
    37be:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    37c2:	e6 17       	cp	r30, r22
    37c4:	f7 07       	cpc	r31, r23
    37c6:	14 f4       	brge	.+4      	; 0x37cc <_ZN6Timing12isDailyCycleEm+0xb8>
		return true;
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <_ZN6Timing12isDailyCycleEm+0xba>
	else
		return false;	
    37cc:	80 e0       	ldi	r24, 0x00	; 0
}
    37ce:	2c 96       	adiw	r28, 0x0c	; 12
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	ff 90       	pop	r15
    37e0:	ef 90       	pop	r14
    37e2:	df 90       	pop	r13
    37e4:	cf 90       	pop	r12
    37e6:	bf 90       	pop	r11
    37e8:	af 90       	pop	r10
    37ea:	9f 90       	pop	r9
    37ec:	8f 90       	pop	r8
    37ee:	08 95       	ret

000037f0 <__subsf3>:
    37f0:	50 58       	subi	r21, 0x80	; 128

000037f2 <__addsf3>:
    37f2:	bb 27       	eor	r27, r27
    37f4:	aa 27       	eor	r26, r26
    37f6:	0e 94 10 1c 	call	0x3820	; 0x3820 <__addsf3x>
    37fa:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__fp_round>
    37fe:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_pscA>
    3802:	38 f0       	brcs	.+14     	; 0x3812 <__addsf3+0x20>
    3804:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__fp_pscB>
    3808:	20 f0       	brcs	.+8      	; 0x3812 <__addsf3+0x20>
    380a:	39 f4       	brne	.+14     	; 0x381a <__addsf3+0x28>
    380c:	9f 3f       	cpi	r25, 0xFF	; 255
    380e:	19 f4       	brne	.+6      	; 0x3816 <__addsf3+0x24>
    3810:	26 f4       	brtc	.+8      	; 0x381a <__addsf3+0x28>
    3812:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_nan>
    3816:	0e f4       	brtc	.+2      	; 0x381a <__addsf3+0x28>
    3818:	e0 95       	com	r30
    381a:	e7 fb       	bst	r30, 7
    381c:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__fp_inf>

00003820 <__addsf3x>:
    3820:	e9 2f       	mov	r30, r25
    3822:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__fp_split3>
    3826:	58 f3       	brcs	.-42     	; 0x37fe <__addsf3+0xc>
    3828:	ba 17       	cp	r27, r26
    382a:	62 07       	cpc	r22, r18
    382c:	73 07       	cpc	r23, r19
    382e:	84 07       	cpc	r24, r20
    3830:	95 07       	cpc	r25, r21
    3832:	20 f0       	brcs	.+8      	; 0x383c <__addsf3x+0x1c>
    3834:	79 f4       	brne	.+30     	; 0x3854 <__addsf3x+0x34>
    3836:	a6 f5       	brtc	.+104    	; 0x38a0 <__addsf3x+0x80>
    3838:	0c 94 94 1d 	jmp	0x3b28	; 0x3b28 <__fp_zero>
    383c:	0e f4       	brtc	.+2      	; 0x3840 <__addsf3x+0x20>
    383e:	e0 95       	com	r30
    3840:	0b 2e       	mov	r0, r27
    3842:	ba 2f       	mov	r27, r26
    3844:	a0 2d       	mov	r26, r0
    3846:	0b 01       	movw	r0, r22
    3848:	b9 01       	movw	r22, r18
    384a:	90 01       	movw	r18, r0
    384c:	0c 01       	movw	r0, r24
    384e:	ca 01       	movw	r24, r20
    3850:	a0 01       	movw	r20, r0
    3852:	11 24       	eor	r1, r1
    3854:	ff 27       	eor	r31, r31
    3856:	59 1b       	sub	r21, r25
    3858:	99 f0       	breq	.+38     	; 0x3880 <__addsf3x+0x60>
    385a:	59 3f       	cpi	r21, 0xF9	; 249
    385c:	50 f4       	brcc	.+20     	; 0x3872 <__addsf3x+0x52>
    385e:	50 3e       	cpi	r21, 0xE0	; 224
    3860:	68 f1       	brcs	.+90     	; 0x38bc <__addsf3x+0x9c>
    3862:	1a 16       	cp	r1, r26
    3864:	f0 40       	sbci	r31, 0x00	; 0
    3866:	a2 2f       	mov	r26, r18
    3868:	23 2f       	mov	r18, r19
    386a:	34 2f       	mov	r19, r20
    386c:	44 27       	eor	r20, r20
    386e:	58 5f       	subi	r21, 0xF8	; 248
    3870:	f3 cf       	rjmp	.-26     	; 0x3858 <__addsf3x+0x38>
    3872:	46 95       	lsr	r20
    3874:	37 95       	ror	r19
    3876:	27 95       	ror	r18
    3878:	a7 95       	ror	r26
    387a:	f0 40       	sbci	r31, 0x00	; 0
    387c:	53 95       	inc	r21
    387e:	c9 f7       	brne	.-14     	; 0x3872 <__addsf3x+0x52>
    3880:	7e f4       	brtc	.+30     	; 0x38a0 <__addsf3x+0x80>
    3882:	1f 16       	cp	r1, r31
    3884:	ba 0b       	sbc	r27, r26
    3886:	62 0b       	sbc	r22, r18
    3888:	73 0b       	sbc	r23, r19
    388a:	84 0b       	sbc	r24, r20
    388c:	ba f0       	brmi	.+46     	; 0x38bc <__addsf3x+0x9c>
    388e:	91 50       	subi	r25, 0x01	; 1
    3890:	a1 f0       	breq	.+40     	; 0x38ba <__addsf3x+0x9a>
    3892:	ff 0f       	add	r31, r31
    3894:	bb 1f       	adc	r27, r27
    3896:	66 1f       	adc	r22, r22
    3898:	77 1f       	adc	r23, r23
    389a:	88 1f       	adc	r24, r24
    389c:	c2 f7       	brpl	.-16     	; 0x388e <__addsf3x+0x6e>
    389e:	0e c0       	rjmp	.+28     	; 0x38bc <__addsf3x+0x9c>
    38a0:	ba 0f       	add	r27, r26
    38a2:	62 1f       	adc	r22, r18
    38a4:	73 1f       	adc	r23, r19
    38a6:	84 1f       	adc	r24, r20
    38a8:	48 f4       	brcc	.+18     	; 0x38bc <__addsf3x+0x9c>
    38aa:	87 95       	ror	r24
    38ac:	77 95       	ror	r23
    38ae:	67 95       	ror	r22
    38b0:	b7 95       	ror	r27
    38b2:	f7 95       	ror	r31
    38b4:	9e 3f       	cpi	r25, 0xFE	; 254
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <__addsf3x+0x9a>
    38b8:	b0 cf       	rjmp	.-160    	; 0x381a <__addsf3+0x28>
    38ba:	93 95       	inc	r25
    38bc:	88 0f       	add	r24, r24
    38be:	08 f0       	brcs	.+2      	; 0x38c2 <__addsf3x+0xa2>
    38c0:	99 27       	eor	r25, r25
    38c2:	ee 0f       	add	r30, r30
    38c4:	97 95       	ror	r25
    38c6:	87 95       	ror	r24
    38c8:	08 95       	ret

000038ca <__divsf3>:
    38ca:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__divsf3x>
    38ce:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__fp_round>
    38d2:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__fp_pscB>
    38d6:	58 f0       	brcs	.+22     	; 0x38ee <__divsf3+0x24>
    38d8:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_pscA>
    38dc:	40 f0       	brcs	.+16     	; 0x38ee <__divsf3+0x24>
    38de:	29 f4       	brne	.+10     	; 0x38ea <__divsf3+0x20>
    38e0:	5f 3f       	cpi	r21, 0xFF	; 255
    38e2:	29 f0       	breq	.+10     	; 0x38ee <__divsf3+0x24>
    38e4:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__fp_inf>
    38e8:	51 11       	cpse	r21, r1
    38ea:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__fp_szero>
    38ee:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_nan>

000038f2 <__divsf3x>:
    38f2:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__fp_split3>
    38f6:	68 f3       	brcs	.-38     	; 0x38d2 <__divsf3+0x8>

000038f8 <__divsf3_pse>:
    38f8:	99 23       	and	r25, r25
    38fa:	b1 f3       	breq	.-20     	; 0x38e8 <__divsf3+0x1e>
    38fc:	55 23       	and	r21, r21
    38fe:	91 f3       	breq	.-28     	; 0x38e4 <__divsf3+0x1a>
    3900:	95 1b       	sub	r25, r21
    3902:	55 0b       	sbc	r21, r21
    3904:	bb 27       	eor	r27, r27
    3906:	aa 27       	eor	r26, r26
    3908:	62 17       	cp	r22, r18
    390a:	73 07       	cpc	r23, r19
    390c:	84 07       	cpc	r24, r20
    390e:	38 f0       	brcs	.+14     	; 0x391e <__divsf3_pse+0x26>
    3910:	9f 5f       	subi	r25, 0xFF	; 255
    3912:	5f 4f       	sbci	r21, 0xFF	; 255
    3914:	22 0f       	add	r18, r18
    3916:	33 1f       	adc	r19, r19
    3918:	44 1f       	adc	r20, r20
    391a:	aa 1f       	adc	r26, r26
    391c:	a9 f3       	breq	.-22     	; 0x3908 <__divsf3_pse+0x10>
    391e:	35 d0       	rcall	.+106    	; 0x398a <__divsf3_pse+0x92>
    3920:	0e 2e       	mov	r0, r30
    3922:	3a f0       	brmi	.+14     	; 0x3932 <__divsf3_pse+0x3a>
    3924:	e0 e8       	ldi	r30, 0x80	; 128
    3926:	32 d0       	rcall	.+100    	; 0x398c <__divsf3_pse+0x94>
    3928:	91 50       	subi	r25, 0x01	; 1
    392a:	50 40       	sbci	r21, 0x00	; 0
    392c:	e6 95       	lsr	r30
    392e:	00 1c       	adc	r0, r0
    3930:	ca f7       	brpl	.-14     	; 0x3924 <__divsf3_pse+0x2c>
    3932:	2b d0       	rcall	.+86     	; 0x398a <__divsf3_pse+0x92>
    3934:	fe 2f       	mov	r31, r30
    3936:	29 d0       	rcall	.+82     	; 0x398a <__divsf3_pse+0x92>
    3938:	66 0f       	add	r22, r22
    393a:	77 1f       	adc	r23, r23
    393c:	88 1f       	adc	r24, r24
    393e:	bb 1f       	adc	r27, r27
    3940:	26 17       	cp	r18, r22
    3942:	37 07       	cpc	r19, r23
    3944:	48 07       	cpc	r20, r24
    3946:	ab 07       	cpc	r26, r27
    3948:	b0 e8       	ldi	r27, 0x80	; 128
    394a:	09 f0       	breq	.+2      	; 0x394e <__divsf3_pse+0x56>
    394c:	bb 0b       	sbc	r27, r27
    394e:	80 2d       	mov	r24, r0
    3950:	bf 01       	movw	r22, r30
    3952:	ff 27       	eor	r31, r31
    3954:	93 58       	subi	r25, 0x83	; 131
    3956:	5f 4f       	sbci	r21, 0xFF	; 255
    3958:	3a f0       	brmi	.+14     	; 0x3968 <__divsf3_pse+0x70>
    395a:	9e 3f       	cpi	r25, 0xFE	; 254
    395c:	51 05       	cpc	r21, r1
    395e:	78 f0       	brcs	.+30     	; 0x397e <__divsf3_pse+0x86>
    3960:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__fp_inf>
    3964:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__fp_szero>
    3968:	5f 3f       	cpi	r21, 0xFF	; 255
    396a:	e4 f3       	brlt	.-8      	; 0x3964 <__divsf3_pse+0x6c>
    396c:	98 3e       	cpi	r25, 0xE8	; 232
    396e:	d4 f3       	brlt	.-12     	; 0x3964 <__divsf3_pse+0x6c>
    3970:	86 95       	lsr	r24
    3972:	77 95       	ror	r23
    3974:	67 95       	ror	r22
    3976:	b7 95       	ror	r27
    3978:	f7 95       	ror	r31
    397a:	9f 5f       	subi	r25, 0xFF	; 255
    397c:	c9 f7       	brne	.-14     	; 0x3970 <__divsf3_pse+0x78>
    397e:	88 0f       	add	r24, r24
    3980:	91 1d       	adc	r25, r1
    3982:	96 95       	lsr	r25
    3984:	87 95       	ror	r24
    3986:	97 f9       	bld	r25, 7
    3988:	08 95       	ret
    398a:	e1 e0       	ldi	r30, 0x01	; 1
    398c:	66 0f       	add	r22, r22
    398e:	77 1f       	adc	r23, r23
    3990:	88 1f       	adc	r24, r24
    3992:	bb 1f       	adc	r27, r27
    3994:	62 17       	cp	r22, r18
    3996:	73 07       	cpc	r23, r19
    3998:	84 07       	cpc	r24, r20
    399a:	ba 07       	cpc	r27, r26
    399c:	20 f0       	brcs	.+8      	; 0x39a6 <__divsf3_pse+0xae>
    399e:	62 1b       	sub	r22, r18
    39a0:	73 0b       	sbc	r23, r19
    39a2:	84 0b       	sbc	r24, r20
    39a4:	ba 0b       	sbc	r27, r26
    39a6:	ee 1f       	adc	r30, r30
    39a8:	88 f7       	brcc	.-30     	; 0x398c <__divsf3_pse+0x94>
    39aa:	e0 95       	com	r30
    39ac:	08 95       	ret

000039ae <__fixsfsi>:
    39ae:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixunssfsi>
    39b2:	68 94       	set
    39b4:	b1 11       	cpse	r27, r1
    39b6:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__fp_szero>
    39ba:	08 95       	ret

000039bc <__fixunssfsi>:
    39bc:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__fp_splitA>
    39c0:	88 f0       	brcs	.+34     	; 0x39e4 <__fixunssfsi+0x28>
    39c2:	9f 57       	subi	r25, 0x7F	; 127
    39c4:	98 f0       	brcs	.+38     	; 0x39ec <__fixunssfsi+0x30>
    39c6:	b9 2f       	mov	r27, r25
    39c8:	99 27       	eor	r25, r25
    39ca:	b7 51       	subi	r27, 0x17	; 23
    39cc:	b0 f0       	brcs	.+44     	; 0x39fa <__fixunssfsi+0x3e>
    39ce:	e1 f0       	breq	.+56     	; 0x3a08 <__fixunssfsi+0x4c>
    39d0:	66 0f       	add	r22, r22
    39d2:	77 1f       	adc	r23, r23
    39d4:	88 1f       	adc	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	1a f0       	brmi	.+6      	; 0x39e0 <__fixunssfsi+0x24>
    39da:	ba 95       	dec	r27
    39dc:	c9 f7       	brne	.-14     	; 0x39d0 <__fixunssfsi+0x14>
    39de:	14 c0       	rjmp	.+40     	; 0x3a08 <__fixunssfsi+0x4c>
    39e0:	b1 30       	cpi	r27, 0x01	; 1
    39e2:	91 f0       	breq	.+36     	; 0x3a08 <__fixunssfsi+0x4c>
    39e4:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__fp_zero>
    39e8:	b1 e0       	ldi	r27, 0x01	; 1
    39ea:	08 95       	ret
    39ec:	0c 94 94 1d 	jmp	0x3b28	; 0x3b28 <__fp_zero>
    39f0:	67 2f       	mov	r22, r23
    39f2:	78 2f       	mov	r23, r24
    39f4:	88 27       	eor	r24, r24
    39f6:	b8 5f       	subi	r27, 0xF8	; 248
    39f8:	39 f0       	breq	.+14     	; 0x3a08 <__fixunssfsi+0x4c>
    39fa:	b9 3f       	cpi	r27, 0xF9	; 249
    39fc:	cc f3       	brlt	.-14     	; 0x39f0 <__fixunssfsi+0x34>
    39fe:	86 95       	lsr	r24
    3a00:	77 95       	ror	r23
    3a02:	67 95       	ror	r22
    3a04:	b3 95       	inc	r27
    3a06:	d9 f7       	brne	.-10     	; 0x39fe <__fixunssfsi+0x42>
    3a08:	3e f4       	brtc	.+14     	; 0x3a18 <__fixunssfsi+0x5c>
    3a0a:	90 95       	com	r25
    3a0c:	80 95       	com	r24
    3a0e:	70 95       	com	r23
    3a10:	61 95       	neg	r22
    3a12:	7f 4f       	sbci	r23, 0xFF	; 255
    3a14:	8f 4f       	sbci	r24, 0xFF	; 255
    3a16:	9f 4f       	sbci	r25, 0xFF	; 255
    3a18:	08 95       	ret

00003a1a <__floatunsisf>:
    3a1a:	e8 94       	clt
    3a1c:	09 c0       	rjmp	.+18     	; 0x3a30 <__floatsisf+0x12>

00003a1e <__floatsisf>:
    3a1e:	97 fb       	bst	r25, 7
    3a20:	3e f4       	brtc	.+14     	; 0x3a30 <__floatsisf+0x12>
    3a22:	90 95       	com	r25
    3a24:	80 95       	com	r24
    3a26:	70 95       	com	r23
    3a28:	61 95       	neg	r22
    3a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a30:	99 23       	and	r25, r25
    3a32:	a9 f0       	breq	.+42     	; 0x3a5e <__floatsisf+0x40>
    3a34:	f9 2f       	mov	r31, r25
    3a36:	96 e9       	ldi	r25, 0x96	; 150
    3a38:	bb 27       	eor	r27, r27
    3a3a:	93 95       	inc	r25
    3a3c:	f6 95       	lsr	r31
    3a3e:	87 95       	ror	r24
    3a40:	77 95       	ror	r23
    3a42:	67 95       	ror	r22
    3a44:	b7 95       	ror	r27
    3a46:	f1 11       	cpse	r31, r1
    3a48:	f8 cf       	rjmp	.-16     	; 0x3a3a <__floatsisf+0x1c>
    3a4a:	fa f4       	brpl	.+62     	; 0x3a8a <__floatsisf+0x6c>
    3a4c:	bb 0f       	add	r27, r27
    3a4e:	11 f4       	brne	.+4      	; 0x3a54 <__floatsisf+0x36>
    3a50:	60 ff       	sbrs	r22, 0
    3a52:	1b c0       	rjmp	.+54     	; 0x3a8a <__floatsisf+0x6c>
    3a54:	6f 5f       	subi	r22, 0xFF	; 255
    3a56:	7f 4f       	sbci	r23, 0xFF	; 255
    3a58:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	16 c0       	rjmp	.+44     	; 0x3a8a <__floatsisf+0x6c>
    3a5e:	88 23       	and	r24, r24
    3a60:	11 f0       	breq	.+4      	; 0x3a66 <__floatsisf+0x48>
    3a62:	96 e9       	ldi	r25, 0x96	; 150
    3a64:	11 c0       	rjmp	.+34     	; 0x3a88 <__floatsisf+0x6a>
    3a66:	77 23       	and	r23, r23
    3a68:	21 f0       	breq	.+8      	; 0x3a72 <__floatsisf+0x54>
    3a6a:	9e e8       	ldi	r25, 0x8E	; 142
    3a6c:	87 2f       	mov	r24, r23
    3a6e:	76 2f       	mov	r23, r22
    3a70:	05 c0       	rjmp	.+10     	; 0x3a7c <__floatsisf+0x5e>
    3a72:	66 23       	and	r22, r22
    3a74:	71 f0       	breq	.+28     	; 0x3a92 <__floatsisf+0x74>
    3a76:	96 e8       	ldi	r25, 0x86	; 134
    3a78:	86 2f       	mov	r24, r22
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	2a f0       	brmi	.+10     	; 0x3a8a <__floatsisf+0x6c>
    3a80:	9a 95       	dec	r25
    3a82:	66 0f       	add	r22, r22
    3a84:	77 1f       	adc	r23, r23
    3a86:	88 1f       	adc	r24, r24
    3a88:	da f7       	brpl	.-10     	; 0x3a80 <__floatsisf+0x62>
    3a8a:	88 0f       	add	r24, r24
    3a8c:	96 95       	lsr	r25
    3a8e:	87 95       	ror	r24
    3a90:	97 f9       	bld	r25, 7
    3a92:	08 95       	ret

00003a94 <__fp_inf>:
    3a94:	97 f9       	bld	r25, 7
    3a96:	9f 67       	ori	r25, 0x7F	; 127
    3a98:	80 e8       	ldi	r24, 0x80	; 128
    3a9a:	70 e0       	ldi	r23, 0x00	; 0
    3a9c:	60 e0       	ldi	r22, 0x00	; 0
    3a9e:	08 95       	ret

00003aa0 <__fp_nan>:
    3aa0:	9f ef       	ldi	r25, 0xFF	; 255
    3aa2:	80 ec       	ldi	r24, 0xC0	; 192
    3aa4:	08 95       	ret

00003aa6 <__fp_pscA>:
    3aa6:	00 24       	eor	r0, r0
    3aa8:	0a 94       	dec	r0
    3aaa:	16 16       	cp	r1, r22
    3aac:	17 06       	cpc	r1, r23
    3aae:	18 06       	cpc	r1, r24
    3ab0:	09 06       	cpc	r0, r25
    3ab2:	08 95       	ret

00003ab4 <__fp_pscB>:
    3ab4:	00 24       	eor	r0, r0
    3ab6:	0a 94       	dec	r0
    3ab8:	12 16       	cp	r1, r18
    3aba:	13 06       	cpc	r1, r19
    3abc:	14 06       	cpc	r1, r20
    3abe:	05 06       	cpc	r0, r21
    3ac0:	08 95       	ret

00003ac2 <__fp_round>:
    3ac2:	09 2e       	mov	r0, r25
    3ac4:	03 94       	inc	r0
    3ac6:	00 0c       	add	r0, r0
    3ac8:	11 f4       	brne	.+4      	; 0x3ace <__fp_round+0xc>
    3aca:	88 23       	and	r24, r24
    3acc:	52 f0       	brmi	.+20     	; 0x3ae2 <__fp_round+0x20>
    3ace:	bb 0f       	add	r27, r27
    3ad0:	40 f4       	brcc	.+16     	; 0x3ae2 <__fp_round+0x20>
    3ad2:	bf 2b       	or	r27, r31
    3ad4:	11 f4       	brne	.+4      	; 0x3ada <__fp_round+0x18>
    3ad6:	60 ff       	sbrs	r22, 0
    3ad8:	04 c0       	rjmp	.+8      	; 0x3ae2 <__fp_round+0x20>
    3ada:	6f 5f       	subi	r22, 0xFF	; 255
    3adc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ade:	8f 4f       	sbci	r24, 0xFF	; 255
    3ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae2:	08 95       	ret

00003ae4 <__fp_split3>:
    3ae4:	57 fd       	sbrc	r21, 7
    3ae6:	90 58       	subi	r25, 0x80	; 128
    3ae8:	44 0f       	add	r20, r20
    3aea:	55 1f       	adc	r21, r21
    3aec:	59 f0       	breq	.+22     	; 0x3b04 <__fp_splitA+0x10>
    3aee:	5f 3f       	cpi	r21, 0xFF	; 255
    3af0:	71 f0       	breq	.+28     	; 0x3b0e <__fp_splitA+0x1a>
    3af2:	47 95       	ror	r20

00003af4 <__fp_splitA>:
    3af4:	88 0f       	add	r24, r24
    3af6:	97 fb       	bst	r25, 7
    3af8:	99 1f       	adc	r25, r25
    3afa:	61 f0       	breq	.+24     	; 0x3b14 <__fp_splitA+0x20>
    3afc:	9f 3f       	cpi	r25, 0xFF	; 255
    3afe:	79 f0       	breq	.+30     	; 0x3b1e <__fp_splitA+0x2a>
    3b00:	87 95       	ror	r24
    3b02:	08 95       	ret
    3b04:	12 16       	cp	r1, r18
    3b06:	13 06       	cpc	r1, r19
    3b08:	14 06       	cpc	r1, r20
    3b0a:	55 1f       	adc	r21, r21
    3b0c:	f2 cf       	rjmp	.-28     	; 0x3af2 <__fp_split3+0xe>
    3b0e:	46 95       	lsr	r20
    3b10:	f1 df       	rcall	.-30     	; 0x3af4 <__fp_splitA>
    3b12:	08 c0       	rjmp	.+16     	; 0x3b24 <__fp_splitA+0x30>
    3b14:	16 16       	cp	r1, r22
    3b16:	17 06       	cpc	r1, r23
    3b18:	18 06       	cpc	r1, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	f1 cf       	rjmp	.-30     	; 0x3b00 <__fp_splitA+0xc>
    3b1e:	86 95       	lsr	r24
    3b20:	71 05       	cpc	r23, r1
    3b22:	61 05       	cpc	r22, r1
    3b24:	08 94       	sec
    3b26:	08 95       	ret

00003b28 <__fp_zero>:
    3b28:	e8 94       	clt

00003b2a <__fp_szero>:
    3b2a:	bb 27       	eor	r27, r27
    3b2c:	66 27       	eor	r22, r22
    3b2e:	77 27       	eor	r23, r23
    3b30:	cb 01       	movw	r24, r22
    3b32:	97 f9       	bld	r25, 7
    3b34:	08 95       	ret

00003b36 <__gesf2>:
    3b36:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fp_cmp>
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <__gesf2+0x8>
    3b3c:	8f ef       	ldi	r24, 0xFF	; 255
    3b3e:	08 95       	ret

00003b40 <__mulsf3>:
    3b40:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__mulsf3x>
    3b44:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__fp_round>
    3b48:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_pscA>
    3b4c:	38 f0       	brcs	.+14     	; 0x3b5c <__mulsf3+0x1c>
    3b4e:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__fp_pscB>
    3b52:	20 f0       	brcs	.+8      	; 0x3b5c <__mulsf3+0x1c>
    3b54:	95 23       	and	r25, r21
    3b56:	11 f0       	breq	.+4      	; 0x3b5c <__mulsf3+0x1c>
    3b58:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__fp_inf>
    3b5c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__fp_nan>
    3b60:	11 24       	eor	r1, r1
    3b62:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__fp_szero>

00003b66 <__mulsf3x>:
    3b66:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__fp_split3>
    3b6a:	70 f3       	brcs	.-36     	; 0x3b48 <__mulsf3+0x8>

00003b6c <__mulsf3_pse>:
    3b6c:	95 9f       	mul	r25, r21
    3b6e:	c1 f3       	breq	.-16     	; 0x3b60 <__mulsf3+0x20>
    3b70:	95 0f       	add	r25, r21
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	55 1f       	adc	r21, r21
    3b76:	62 9f       	mul	r22, r18
    3b78:	f0 01       	movw	r30, r0
    3b7a:	72 9f       	mul	r23, r18
    3b7c:	bb 27       	eor	r27, r27
    3b7e:	f0 0d       	add	r31, r0
    3b80:	b1 1d       	adc	r27, r1
    3b82:	63 9f       	mul	r22, r19
    3b84:	aa 27       	eor	r26, r26
    3b86:	f0 0d       	add	r31, r0
    3b88:	b1 1d       	adc	r27, r1
    3b8a:	aa 1f       	adc	r26, r26
    3b8c:	64 9f       	mul	r22, r20
    3b8e:	66 27       	eor	r22, r22
    3b90:	b0 0d       	add	r27, r0
    3b92:	a1 1d       	adc	r26, r1
    3b94:	66 1f       	adc	r22, r22
    3b96:	82 9f       	mul	r24, r18
    3b98:	22 27       	eor	r18, r18
    3b9a:	b0 0d       	add	r27, r0
    3b9c:	a1 1d       	adc	r26, r1
    3b9e:	62 1f       	adc	r22, r18
    3ba0:	73 9f       	mul	r23, r19
    3ba2:	b0 0d       	add	r27, r0
    3ba4:	a1 1d       	adc	r26, r1
    3ba6:	62 1f       	adc	r22, r18
    3ba8:	83 9f       	mul	r24, r19
    3baa:	a0 0d       	add	r26, r0
    3bac:	61 1d       	adc	r22, r1
    3bae:	22 1f       	adc	r18, r18
    3bb0:	74 9f       	mul	r23, r20
    3bb2:	33 27       	eor	r19, r19
    3bb4:	a0 0d       	add	r26, r0
    3bb6:	61 1d       	adc	r22, r1
    3bb8:	23 1f       	adc	r18, r19
    3bba:	84 9f       	mul	r24, r20
    3bbc:	60 0d       	add	r22, r0
    3bbe:	21 1d       	adc	r18, r1
    3bc0:	82 2f       	mov	r24, r18
    3bc2:	76 2f       	mov	r23, r22
    3bc4:	6a 2f       	mov	r22, r26
    3bc6:	11 24       	eor	r1, r1
    3bc8:	9f 57       	subi	r25, 0x7F	; 127
    3bca:	50 40       	sbci	r21, 0x00	; 0
    3bcc:	9a f0       	brmi	.+38     	; 0x3bf4 <__mulsf3_pse+0x88>
    3bce:	f1 f0       	breq	.+60     	; 0x3c0c <__mulsf3_pse+0xa0>
    3bd0:	88 23       	and	r24, r24
    3bd2:	4a f0       	brmi	.+18     	; 0x3be6 <__mulsf3_pse+0x7a>
    3bd4:	ee 0f       	add	r30, r30
    3bd6:	ff 1f       	adc	r31, r31
    3bd8:	bb 1f       	adc	r27, r27
    3bda:	66 1f       	adc	r22, r22
    3bdc:	77 1f       	adc	r23, r23
    3bde:	88 1f       	adc	r24, r24
    3be0:	91 50       	subi	r25, 0x01	; 1
    3be2:	50 40       	sbci	r21, 0x00	; 0
    3be4:	a9 f7       	brne	.-22     	; 0x3bd0 <__mulsf3_pse+0x64>
    3be6:	9e 3f       	cpi	r25, 0xFE	; 254
    3be8:	51 05       	cpc	r21, r1
    3bea:	80 f0       	brcs	.+32     	; 0x3c0c <__mulsf3_pse+0xa0>
    3bec:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__fp_inf>
    3bf0:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__fp_szero>
    3bf4:	5f 3f       	cpi	r21, 0xFF	; 255
    3bf6:	e4 f3       	brlt	.-8      	; 0x3bf0 <__mulsf3_pse+0x84>
    3bf8:	98 3e       	cpi	r25, 0xE8	; 232
    3bfa:	d4 f3       	brlt	.-12     	; 0x3bf0 <__mulsf3_pse+0x84>
    3bfc:	86 95       	lsr	r24
    3bfe:	77 95       	ror	r23
    3c00:	67 95       	ror	r22
    3c02:	b7 95       	ror	r27
    3c04:	f7 95       	ror	r31
    3c06:	e7 95       	ror	r30
    3c08:	9f 5f       	subi	r25, 0xFF	; 255
    3c0a:	c1 f7       	brne	.-16     	; 0x3bfc <__mulsf3_pse+0x90>
    3c0c:	fe 2b       	or	r31, r30
    3c0e:	88 0f       	add	r24, r24
    3c10:	91 1d       	adc	r25, r1
    3c12:	96 95       	lsr	r25
    3c14:	87 95       	ror	r24
    3c16:	97 f9       	bld	r25, 7
    3c18:	08 95       	ret

00003c1a <__fp_cmp>:
    3c1a:	99 0f       	add	r25, r25
    3c1c:	00 08       	sbc	r0, r0
    3c1e:	55 0f       	add	r21, r21
    3c20:	aa 0b       	sbc	r26, r26
    3c22:	e0 e8       	ldi	r30, 0x80	; 128
    3c24:	fe ef       	ldi	r31, 0xFE	; 254
    3c26:	16 16       	cp	r1, r22
    3c28:	17 06       	cpc	r1, r23
    3c2a:	e8 07       	cpc	r30, r24
    3c2c:	f9 07       	cpc	r31, r25
    3c2e:	c0 f0       	brcs	.+48     	; 0x3c60 <__fp_cmp+0x46>
    3c30:	12 16       	cp	r1, r18
    3c32:	13 06       	cpc	r1, r19
    3c34:	e4 07       	cpc	r30, r20
    3c36:	f5 07       	cpc	r31, r21
    3c38:	98 f0       	brcs	.+38     	; 0x3c60 <__fp_cmp+0x46>
    3c3a:	62 1b       	sub	r22, r18
    3c3c:	73 0b       	sbc	r23, r19
    3c3e:	84 0b       	sbc	r24, r20
    3c40:	95 0b       	sbc	r25, r21
    3c42:	39 f4       	brne	.+14     	; 0x3c52 <__fp_cmp+0x38>
    3c44:	0a 26       	eor	r0, r26
    3c46:	61 f0       	breq	.+24     	; 0x3c60 <__fp_cmp+0x46>
    3c48:	23 2b       	or	r18, r19
    3c4a:	24 2b       	or	r18, r20
    3c4c:	25 2b       	or	r18, r21
    3c4e:	21 f4       	brne	.+8      	; 0x3c58 <__fp_cmp+0x3e>
    3c50:	08 95       	ret
    3c52:	0a 26       	eor	r0, r26
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <__fp_cmp+0x3e>
    3c56:	a1 40       	sbci	r26, 0x01	; 1
    3c58:	a6 95       	lsr	r26
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
    3c5c:	81 1d       	adc	r24, r1
    3c5e:	81 1d       	adc	r24, r1
    3c60:	08 95       	ret

00003c62 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3c62:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3c64:	91 8d       	ldd	r25, Z+25	; 0x19
    3c66:	22 8d       	ldd	r18, Z+26	; 0x1a
    3c68:	89 2f       	mov	r24, r25
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	80 5c       	subi	r24, 0xC0	; 192
    3c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c70:	82 1b       	sub	r24, r18
    3c72:	91 09       	sbc	r25, r1
}
    3c74:	8f 73       	andi	r24, 0x3F	; 63
    3c76:	99 27       	eor	r25, r25
    3c78:	08 95       	ret

00003c7a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3c7a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3c7c:	91 8d       	ldd	r25, Z+25	; 0x19
    3c7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c80:	98 17       	cp	r25, r24
    3c82:	31 f0       	breq	.+12     	; 0x3c90 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3c84:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c86:	e8 0f       	add	r30, r24
    3c88:	f1 1d       	adc	r31, r1
    3c8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3c90:	8f ef       	ldi	r24, 0xFF	; 255
    3c92:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3c94:	08 95       	ret

00003c96 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3c96:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3c98:	91 8d       	ldd	r25, Z+25	; 0x19
    3c9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c9c:	98 17       	cp	r25, r24
    3c9e:	61 f0       	breq	.+24     	; 0x3cb8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3ca0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ca2:	df 01       	movw	r26, r30
    3ca4:	a8 0f       	add	r26, r24
    3ca6:	b1 1d       	adc	r27, r1
    3ca8:	5d 96       	adiw	r26, 0x1d	; 29
    3caa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3cac:	92 8d       	ldd	r25, Z+26	; 0x1a
    3cae:	9f 5f       	subi	r25, 0xFF	; 255
    3cb0:	9f 73       	andi	r25, 0x3F	; 63
    3cb2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
    3cba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3cbc:	08 95       	ret

00003cbe <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3cbe:	84 eb       	ldi	r24, 0xB4	; 180
    3cc0:	9f e1       	ldi	r25, 0x1F	; 31
    3cc2:	89 2b       	or	r24, r25
    3cc4:	49 f0       	breq	.+18     	; 0x3cd8 <_Z14serialEventRunv+0x1a>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	89 2b       	or	r24, r25
    3ccc:	29 f0       	breq	.+10     	; 0x3cd8 <_Z14serialEventRunv+0x1a>
    3cce:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_Z17Serial0_availablev>
    3cd2:	81 11       	cpse	r24, r1
    3cd4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3cd8:	08 95       	ret

00003cda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3cda:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3cdc:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cde:	df 01       	movw	r26, r30
    3ce0:	a8 0f       	add	r26, r24
    3ce2:	b1 1d       	adc	r27, r1
    3ce4:	a3 5a       	subi	r26, 0xA3	; 163
    3ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ce8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3cea:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	01 96       	adiw	r24, 0x01	; 1
    3cf0:	8f 73       	andi	r24, 0x3F	; 63
    3cf2:	99 27       	eor	r25, r25
    3cf4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3cf6:	a6 89       	ldd	r26, Z+22	; 0x16
    3cf8:	b7 89       	ldd	r27, Z+23	; 0x17
    3cfa:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3cfc:	a0 89       	ldd	r26, Z+16	; 0x10
    3cfe:	b1 89       	ldd	r27, Z+17	; 0x11
    3d00:	8c 91       	ld	r24, X
    3d02:	80 64       	ori	r24, 0x40	; 64
    3d04:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3d06:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d08:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d0a:	98 13       	cpse	r25, r24
    3d0c:	06 c0       	rjmp	.+12     	; 0x3d1a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3d0e:	02 88       	ldd	r0, Z+18	; 0x12
    3d10:	f3 89       	ldd	r31, Z+19	; 0x13
    3d12:	e0 2d       	mov	r30, r0
    3d14:	80 81       	ld	r24, Z
    3d16:	8f 7d       	andi	r24, 0xDF	; 223
    3d18:	80 83       	st	Z, r24
    3d1a:	08 95       	ret

00003d1c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	ec 01       	movw	r28, r24
  _written = true;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3d2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d32:	98 13       	cpse	r25, r24
    3d34:	05 c0       	rjmp	.+10     	; 0x3d40 <_ZN14HardwareSerial5writeEh+0x24>
    3d36:	e8 89       	ldd	r30, Y+16	; 0x10
    3d38:	f9 89       	ldd	r31, Y+17	; 0x11
    3d3a:	80 81       	ld	r24, Z
    3d3c:	85 fd       	sbrc	r24, 5
    3d3e:	24 c0       	rjmp	.+72     	; 0x3d88 <_ZN14HardwareSerial5writeEh+0x6c>
    3d40:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3d42:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3d44:	10 e0       	ldi	r17, 0x00	; 0
    3d46:	0f 5f       	subi	r16, 0xFF	; 255
    3d48:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4a:	0f 73       	andi	r16, 0x3F	; 63
    3d4c:	11 27       	eor	r17, r17
    3d4e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3d50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d52:	e8 12       	cpse	r14, r24
    3d54:	0c c0       	rjmp	.+24     	; 0x3d6e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	07 fc       	sbrc	r0, 7
    3d5a:	fa cf       	rjmp	.-12     	; 0x3d50 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3d5c:	e8 89       	ldd	r30, Y+16	; 0x10
    3d5e:	f9 89       	ldd	r31, Y+17	; 0x11
    3d60:	80 81       	ld	r24, Z
    3d62:	85 ff       	sbrs	r24, 5
    3d64:	f5 cf       	rjmp	.-22     	; 0x3d50 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3d66:	ce 01       	movw	r24, r28
    3d68:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3d6c:	f1 cf       	rjmp	.-30     	; 0x3d50 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d70:	fe 01       	movw	r30, r28
    3d72:	e8 0f       	add	r30, r24
    3d74:	f1 1d       	adc	r31, r1
    3d76:	e3 5a       	subi	r30, 0xA3	; 163
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3d7c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3d7e:	ea 89       	ldd	r30, Y+18	; 0x12
    3d80:	fb 89       	ldd	r31, Y+19	; 0x13
    3d82:	80 81       	ld	r24, Z
    3d84:	80 62       	ori	r24, 0x20	; 32
    3d86:	07 c0       	rjmp	.+14     	; 0x3d96 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3d88:	ee 89       	ldd	r30, Y+22	; 0x16
    3d8a:	ff 89       	ldd	r31, Y+23	; 0x17
    3d8c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3d8e:	e8 89       	ldd	r30, Y+16	; 0x10
    3d90:	f9 89       	ldd	r31, Y+17	; 0x11
    3d92:	80 81       	ld	r24, Z
    3d94:	80 64       	ori	r24, 0x40	; 64
    3d96:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	ff 90       	pop	r15
    3da6:	ef 90       	pop	r14
    3da8:	08 95       	ret

00003daa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3db0:	88 8d       	ldd	r24, Y+24	; 0x18
    3db2:	88 23       	and	r24, r24
    3db4:	c9 f0       	breq	.+50     	; 0x3de8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3db6:	ea 89       	ldd	r30, Y+18	; 0x12
    3db8:	fb 89       	ldd	r31, Y+19	; 0x13
    3dba:	80 81       	ld	r24, Z
    3dbc:	85 fd       	sbrc	r24, 5
    3dbe:	05 c0       	rjmp	.+10     	; 0x3dca <_ZN14HardwareSerial5flushEv+0x20>
    3dc0:	a8 89       	ldd	r26, Y+16	; 0x10
    3dc2:	b9 89       	ldd	r27, Y+17	; 0x11
    3dc4:	8c 91       	ld	r24, X
    3dc6:	86 fd       	sbrc	r24, 6
    3dc8:	0f c0       	rjmp	.+30     	; 0x3de8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	07 fc       	sbrc	r0, 7
    3dce:	f5 cf       	rjmp	.-22     	; 0x3dba <_ZN14HardwareSerial5flushEv+0x10>
    3dd0:	80 81       	ld	r24, Z
    3dd2:	85 ff       	sbrs	r24, 5
    3dd4:	f2 cf       	rjmp	.-28     	; 0x3dba <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3dd6:	a8 89       	ldd	r26, Y+16	; 0x10
    3dd8:	b9 89       	ldd	r27, Y+17	; 0x11
    3dda:	8c 91       	ld	r24, X
    3ddc:	85 ff       	sbrs	r24, 5
    3dde:	ed cf       	rjmp	.-38     	; 0x3dba <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3de0:	ce 01       	movw	r24, r28
    3de2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3de6:	e7 cf       	rjmp	.-50     	; 0x3db6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	08 95       	ret

00003dee <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	1f 93       	push	r17
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	ec 01       	movw	r28, r24
    3dfe:	6a 01       	movw	r12, r20
    3e00:	7b 01       	movw	r14, r22
    3e02:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3e04:	e8 89       	ldd	r30, Y+16	; 0x10
    3e06:	f9 89       	ldd	r31, Y+17	; 0x11
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3e0c:	41 15       	cp	r20, r1
    3e0e:	51 4e       	sbci	r21, 0xE1	; 225
    3e10:	61 05       	cpc	r22, r1
    3e12:	71 05       	cpc	r23, r1
    3e14:	b1 f0       	breq	.+44     	; 0x3e42 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3e16:	60 e0       	ldi	r22, 0x00	; 0
    3e18:	79 e0       	ldi	r23, 0x09	; 9
    3e1a:	8d e3       	ldi	r24, 0x3D	; 61
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a7 01       	movw	r20, r14
    3e20:	96 01       	movw	r18, r12
    3e22:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    3e26:	da 01       	movw	r26, r20
    3e28:	c9 01       	movw	r24, r18
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	a1 09       	sbc	r26, r1
    3e2e:	b1 09       	sbc	r27, r1
    3e30:	b6 95       	lsr	r27
    3e32:	a7 95       	ror	r26
    3e34:	97 95       	ror	r25
    3e36:	87 95       	ror	r24
    3e38:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3e3a:	21 15       	cp	r18, r1
    3e3c:	80 e1       	ldi	r24, 0x10	; 16
    3e3e:	38 07       	cpc	r19, r24
    3e40:	a8 f0       	brcs	.+42     	; 0x3e6c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3e42:	e8 89       	ldd	r30, Y+16	; 0x10
    3e44:	f9 89       	ldd	r31, Y+17	; 0x11
    3e46:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3e48:	60 e8       	ldi	r22, 0x80	; 128
    3e4a:	74 e8       	ldi	r23, 0x84	; 132
    3e4c:	8e e1       	ldi	r24, 0x1E	; 30
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	a7 01       	movw	r20, r14
    3e52:	96 01       	movw	r18, r12
    3e54:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    3e58:	da 01       	movw	r26, r20
    3e5a:	c9 01       	movw	r24, r18
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	a1 09       	sbc	r26, r1
    3e60:	b1 09       	sbc	r27, r1
    3e62:	b6 95       	lsr	r27
    3e64:	a7 95       	ror	r26
    3e66:	97 95       	ror	r25
    3e68:	87 95       	ror	r24
    3e6a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3e6c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e6e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e70:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3e72:	ee 85       	ldd	r30, Y+14	; 0x0e
    3e74:	ff 85       	ldd	r31, Y+15	; 0x0f
    3e76:	20 83       	st	Z, r18

  _written = false;
    3e78:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3e7a:	ec 89       	ldd	r30, Y+20	; 0x14
    3e7c:	fd 89       	ldd	r31, Y+21	; 0x15
    3e7e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3e80:	ea 89       	ldd	r30, Y+18	; 0x12
    3e82:	fb 89       	ldd	r31, Y+19	; 0x13
    3e84:	80 81       	ld	r24, Z
    3e86:	80 61       	ori	r24, 0x10	; 16
    3e88:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3e8a:	ea 89       	ldd	r30, Y+18	; 0x12
    3e8c:	fb 89       	ldd	r31, Y+19	; 0x13
    3e8e:	80 81       	ld	r24, Z
    3e90:	88 60       	ori	r24, 0x08	; 8
    3e92:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3e94:	ea 89       	ldd	r30, Y+18	; 0x12
    3e96:	fb 89       	ldd	r31, Y+19	; 0x13
    3e98:	80 81       	ld	r24, Z
    3e9a:	80 68       	ori	r24, 0x80	; 128
    3e9c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3e9e:	ea 89       	ldd	r30, Y+18	; 0x12
    3ea0:	fb 89       	ldd	r31, Y+19	; 0x13
    3ea2:	80 81       	ld	r24, Z
    3ea4:	8f 7d       	andi	r24, 0xDF	; 223
    3ea6:	80 83       	st	Z, r24
}
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	1f 91       	pop	r17
    3eae:	ff 90       	pop	r15
    3eb0:	ef 90       	pop	r14
    3eb2:	df 90       	pop	r13
    3eb4:	cf 90       	pop	r12
    3eb6:	08 95       	ret

00003eb8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3eb8:	1f 92       	push	r1
    3eba:	0f 92       	push	r0
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	0f 92       	push	r0
    3ec0:	11 24       	eor	r1, r1
    3ec2:	2f 93       	push	r18
    3ec4:	8f 93       	push	r24
    3ec6:	9f 93       	push	r25
    3ec8:	ef 93       	push	r30
    3eca:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3ecc:	e0 91 63 06 	lds	r30, 0x0663	; 0x800663 <Serial+0x10>
    3ed0:	f0 91 64 06 	lds	r31, 0x0664	; 0x800664 <Serial+0x11>
    3ed4:	80 81       	ld	r24, Z
    3ed6:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <Serial+0x16>
    3eda:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <Serial+0x17>
    3ede:	82 fd       	sbrc	r24, 2
    3ee0:	12 c0       	rjmp	.+36     	; 0x3f06 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3ee2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3ee4:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <Serial+0x19>
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3eec:	20 91 6d 06 	lds	r18, 0x066D	; 0x80066d <Serial+0x1a>
    3ef0:	82 17       	cp	r24, r18
    3ef2:	51 f0       	breq	.+20     	; 0x3f08 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3ef4:	e0 91 6c 06 	lds	r30, 0x066C	; 0x80066c <Serial+0x19>
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	ed 5a       	subi	r30, 0xAD	; 173
    3efc:	f9 4f       	sbci	r31, 0xF9	; 249
    3efe:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3f00:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <Serial+0x19>
    3f04:	01 c0       	rjmp	.+2      	; 0x3f08 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3f06:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3f08:	ff 91       	pop	r31
    3f0a:	ef 91       	pop	r30
    3f0c:	9f 91       	pop	r25
    3f0e:	8f 91       	pop	r24
    3f10:	2f 91       	pop	r18
    3f12:	0f 90       	pop	r0
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	0f 90       	pop	r0
    3f18:	1f 90       	pop	r1
    3f1a:	18 95       	reti

00003f1c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3f1c:	1f 92       	push	r1
    3f1e:	0f 92       	push	r0
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	0f 92       	push	r0
    3f24:	11 24       	eor	r1, r1
    3f26:	2f 93       	push	r18
    3f28:	3f 93       	push	r19
    3f2a:	4f 93       	push	r20
    3f2c:	5f 93       	push	r21
    3f2e:	6f 93       	push	r22
    3f30:	7f 93       	push	r23
    3f32:	8f 93       	push	r24
    3f34:	9f 93       	push	r25
    3f36:	af 93       	push	r26
    3f38:	bf 93       	push	r27
    3f3a:	ef 93       	push	r30
    3f3c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3f3e:	83 e5       	ldi	r24, 0x53	; 83
    3f40:	96 e0       	ldi	r25, 0x06	; 6
    3f42:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3f46:	ff 91       	pop	r31
    3f48:	ef 91       	pop	r30
    3f4a:	bf 91       	pop	r27
    3f4c:	af 91       	pop	r26
    3f4e:	9f 91       	pop	r25
    3f50:	8f 91       	pop	r24
    3f52:	7f 91       	pop	r23
    3f54:	6f 91       	pop	r22
    3f56:	5f 91       	pop	r21
    3f58:	4f 91       	pop	r20
    3f5a:	3f 91       	pop	r19
    3f5c:	2f 91       	pop	r18
    3f5e:	0f 90       	pop	r0
    3f60:	0f be       	out	0x3f, r0	; 63
    3f62:	0f 90       	pop	r0
    3f64:	1f 90       	pop	r1
    3f66:	18 95       	reti

00003f68 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3f68:	83 e5       	ldi	r24, 0x53	; 83
    3f6a:	96 e0       	ldi	r25, 0x06	; 6
    3f6c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN14HardwareSerial9availableEv>
    3f70:	21 e0       	ldi	r18, 0x01	; 1
    3f72:	89 2b       	or	r24, r25
    3f74:	09 f4       	brne	.+2      	; 0x3f78 <_Z17Serial0_availablev+0x10>
    3f76:	20 e0       	ldi	r18, 0x00	; 0
}
    3f78:	82 2f       	mov	r24, r18
    3f7a:	08 95       	ret

00003f7c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3f7c:	e3 e5       	ldi	r30, 0x53	; 83
    3f7e:	f6 e0       	ldi	r31, 0x06	; 6
    3f80:	13 82       	std	Z+3, r1	; 0x03
    3f82:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3f84:	88 ee       	ldi	r24, 0xE8	; 232
    3f86:	93 e0       	ldi	r25, 0x03	; 3
    3f88:	a0 e0       	ldi	r26, 0x00	; 0
    3f8a:	b0 e0       	ldi	r27, 0x00	; 0
    3f8c:	84 83       	std	Z+4, r24	; 0x04
    3f8e:	95 83       	std	Z+5, r25	; 0x05
    3f90:	a6 83       	std	Z+6, r26	; 0x06
    3f92:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3f94:	85 e8       	ldi	r24, 0x85	; 133
    3f96:	92 e0       	ldi	r25, 0x02	; 2
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	85 ec       	ldi	r24, 0xC5	; 197
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	95 87       	std	Z+13, r25	; 0x0d
    3fa2:	84 87       	std	Z+12, r24	; 0x0c
    3fa4:	84 ec       	ldi	r24, 0xC4	; 196
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	97 87       	std	Z+15, r25	; 0x0f
    3faa:	86 87       	std	Z+14, r24	; 0x0e
    3fac:	80 ec       	ldi	r24, 0xC0	; 192
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	91 8b       	std	Z+17, r25	; 0x11
    3fb2:	80 8b       	std	Z+16, r24	; 0x10
    3fb4:	81 ec       	ldi	r24, 0xC1	; 193
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	93 8b       	std	Z+19, r25	; 0x13
    3fba:	82 8b       	std	Z+18, r24	; 0x12
    3fbc:	82 ec       	ldi	r24, 0xC2	; 194
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	95 8b       	std	Z+21, r25	; 0x15
    3fc2:	84 8b       	std	Z+20, r24	; 0x14
    3fc4:	86 ec       	ldi	r24, 0xC6	; 198
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	97 8b       	std	Z+23, r25	; 0x17
    3fca:	86 8b       	std	Z+22, r24	; 0x16
    3fcc:	11 8e       	std	Z+25, r1	; 0x19
    3fce:	12 8e       	std	Z+26, r1	; 0x1a
    3fd0:	13 8e       	std	Z+27, r1	; 0x1b
    3fd2:	14 8e       	std	Z+28, r1	; 0x1c
    3fd4:	08 95       	ret

00003fd6 <initVariant>:
    3fd6:	08 95       	ret

00003fd8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3fd8:	0e 94 66 22 	call	0x44cc	; 0x44cc <init>

	initVariant();
    3fdc:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3fe0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3fe4:	cf e5       	ldi	r28, 0x5F	; 95
    3fe6:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    3fe8:	0e 94 b5 13 	call	0x276a	; 0x276a <loop>
		if (serialEventRun) serialEventRun();
    3fec:	20 97       	sbiw	r28, 0x00	; 0
    3fee:	e1 f3       	breq	.-8      	; 0x3fe8 <main+0x10>
    3ff0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <_Z14serialEventRunv>
    3ff4:	f9 cf       	rjmp	.-14     	; 0x3fe8 <main+0x10>

00003ff6 <_Znwj>:
    3ff6:	0c 94 46 31 	jmp	0x628c	; 0x628c <malloc>

00003ffa <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	6c 01       	movw	r12, r24
    400c:	7a 01       	movw	r14, r20
    400e:	8b 01       	movw	r16, r22
    4010:	c0 e0       	ldi	r28, 0x00	; 0
    4012:	d0 e0       	ldi	r29, 0x00	; 0
    4014:	ce 15       	cp	r28, r14
    4016:	df 05       	cpc	r29, r15
    4018:	81 f0       	breq	.+32     	; 0x403a <_ZN5Print5writeEPKhj+0x40>
    401a:	d8 01       	movw	r26, r16
    401c:	6d 91       	ld	r22, X+
    401e:	8d 01       	movw	r16, r26
    4020:	d6 01       	movw	r26, r12
    4022:	ed 91       	ld	r30, X+
    4024:	fc 91       	ld	r31, X
    4026:	01 90       	ld	r0, Z+
    4028:	f0 81       	ld	r31, Z
    402a:	e0 2d       	mov	r30, r0
    402c:	c6 01       	movw	r24, r12
    402e:	09 95       	icall
    4030:	89 2b       	or	r24, r25
    4032:	11 f0       	breq	.+4      	; 0x4038 <_ZN5Print5writeEPKhj+0x3e>
    4034:	21 96       	adiw	r28, 0x01	; 1
    4036:	ee cf       	rjmp	.-36     	; 0x4014 <_ZN5Print5writeEPKhj+0x1a>
    4038:	7e 01       	movw	r14, r28
    403a:	c7 01       	movw	r24, r14
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	1f 91       	pop	r17
    4042:	0f 91       	pop	r16
    4044:	ff 90       	pop	r15
    4046:	ef 90       	pop	r14
    4048:	df 90       	pop	r13
    404a:	cf 90       	pop	r12
    404c:	08 95       	ret

0000404e <_ZN5Print5writeEPKc>:
    404e:	61 15       	cp	r22, r1
    4050:	71 05       	cpc	r23, r1
    4052:	79 f0       	breq	.+30     	; 0x4072 <_ZN5Print5writeEPKc+0x24>
    4054:	fb 01       	movw	r30, r22
    4056:	01 90       	ld	r0, Z+
    4058:	00 20       	and	r0, r0
    405a:	e9 f7       	brne	.-6      	; 0x4056 <_ZN5Print5writeEPKc+0x8>
    405c:	31 97       	sbiw	r30, 0x01	; 1
    405e:	af 01       	movw	r20, r30
    4060:	46 1b       	sub	r20, r22
    4062:	57 0b       	sbc	r21, r23
    4064:	dc 01       	movw	r26, r24
    4066:	ed 91       	ld	r30, X+
    4068:	fc 91       	ld	r31, X
    406a:	02 80       	ldd	r0, Z+2	; 0x02
    406c:	f3 81       	ldd	r31, Z+3	; 0x03
    406e:	e0 2d       	mov	r30, r0
    4070:	09 94       	ijmp
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	08 95       	ret

00004078 <_ZN5Print5printEPK19__FlashStringHelper>:
    4078:	ef 92       	push	r14
    407a:	ff 92       	push	r15
    407c:	0f 93       	push	r16
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	8c 01       	movw	r16, r24
    4086:	7b 01       	movw	r14, r22
    4088:	c0 e0       	ldi	r28, 0x00	; 0
    408a:	d0 e0       	ldi	r29, 0x00	; 0
    408c:	f7 01       	movw	r30, r14
    408e:	ec 0f       	add	r30, r28
    4090:	fd 1f       	adc	r31, r29
    4092:	64 91       	lpm	r22, Z
    4094:	66 23       	and	r22, r22
    4096:	61 f0       	breq	.+24     	; 0x40b0 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4098:	d8 01       	movw	r26, r16
    409a:	ed 91       	ld	r30, X+
    409c:	fc 91       	ld	r31, X
    409e:	01 90       	ld	r0, Z+
    40a0:	f0 81       	ld	r31, Z
    40a2:	e0 2d       	mov	r30, r0
    40a4:	c8 01       	movw	r24, r16
    40a6:	09 95       	icall
    40a8:	89 2b       	or	r24, r25
    40aa:	11 f0       	breq	.+4      	; 0x40b0 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    40ac:	21 96       	adiw	r28, 0x01	; 1
    40ae:	ee cf       	rjmp	.-36     	; 0x408c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    40b0:	ce 01       	movw	r24, r28
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	ff 90       	pop	r15
    40bc:	ef 90       	pop	r14
    40be:	08 95       	ret

000040c0 <_ZN5Print5printEPKc>:
    40c0:	0c 94 27 20 	jmp	0x404e	; 0x404e <_ZN5Print5writeEPKc>

000040c4 <_ZN5Print5printEc>:
    40c4:	dc 01       	movw	r26, r24
    40c6:	ed 91       	ld	r30, X+
    40c8:	fc 91       	ld	r31, X
    40ca:	01 90       	ld	r0, Z+
    40cc:	f0 81       	ld	r31, Z
    40ce:	e0 2d       	mov	r30, r0
    40d0:	09 94       	ijmp

000040d2 <_ZN5Print7printlnEv>:
    40d2:	61 e9       	ldi	r22, 0x91	; 145
    40d4:	72 e0       	ldi	r23, 0x02	; 2
    40d6:	0c 94 27 20 	jmp	0x404e	; 0x404e <_ZN5Print5writeEPKc>

000040da <_ZN5Print7printlnEPK19__FlashStringHelper>:
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	ec 01       	movw	r28, r24
    40e4:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    40e8:	8c 01       	movw	r16, r24
    40ea:	ce 01       	movw	r24, r28
    40ec:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
    40f0:	80 0f       	add	r24, r16
    40f2:	91 1f       	adc	r25, r17
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	1f 91       	pop	r17
    40fa:	0f 91       	pop	r16
    40fc:	08 95       	ret

000040fe <_ZN5Print7printlnEPKc>:
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	ec 01       	movw	r28, r24
    4108:	0e 94 27 20 	call	0x404e	; 0x404e <_ZN5Print5writeEPKc>
    410c:	8c 01       	movw	r16, r24
    410e:	ce 01       	movw	r24, r28
    4110:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
    4114:	80 0f       	add	r24, r16
    4116:	91 1f       	adc	r25, r17
    4118:	df 91       	pop	r29
    411a:	cf 91       	pop	r28
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	08 95       	ret

00004122 <_ZN5Print7printlnEc>:
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	ec 01       	movw	r28, r24
    412c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEc>
    4130:	8c 01       	movw	r16, r24
    4132:	ce 01       	movw	r24, r28
    4134:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
    4138:	80 0f       	add	r24, r16
    413a:	91 1f       	adc	r25, r17
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	08 95       	ret

00004146 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4146:	8f 92       	push	r8
    4148:	9f 92       	push	r9
    414a:	af 92       	push	r10
    414c:	bf 92       	push	r11
    414e:	ef 92       	push	r14
    4150:	ff 92       	push	r15
    4152:	0f 93       	push	r16
    4154:	1f 93       	push	r17
    4156:	cf 93       	push	r28
    4158:	df 93       	push	r29
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	a1 97       	sbiw	r28, 0x21	; 33
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	cd bf       	out	0x3d, r28	; 61
    416a:	7c 01       	movw	r14, r24
    416c:	fa 01       	movw	r30, r20
    416e:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4170:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4172:	22 30       	cpi	r18, 0x02	; 2
    4174:	08 f4       	brcc	.+2      	; 0x4178 <_ZN5Print11printNumberEmh+0x32>
    4176:	2a e0       	ldi	r18, 0x0A	; 10
    4178:	8e 01       	movw	r16, r28
    417a:	0f 5d       	subi	r16, 0xDF	; 223
    417c:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    417e:	82 2e       	mov	r8, r18
    4180:	91 2c       	mov	r9, r1
    4182:	a1 2c       	mov	r10, r1
    4184:	b1 2c       	mov	r11, r1
    4186:	bf 01       	movw	r22, r30
    4188:	a5 01       	movw	r20, r10
    418a:	94 01       	movw	r18, r8
    418c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    n /= base;
    4190:	f9 01       	movw	r30, r18
    4192:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4194:	01 50       	subi	r16, 0x01	; 1
    4196:	11 09       	sbc	r17, r1
    4198:	6a 30       	cpi	r22, 0x0A	; 10
    419a:	10 f4       	brcc	.+4      	; 0x41a0 <_ZN5Print11printNumberEmh+0x5a>
    419c:	60 5d       	subi	r22, 0xD0	; 208
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <_ZN5Print11printNumberEmh+0x5c>
    41a0:	69 5c       	subi	r22, 0xC9	; 201
    41a2:	d8 01       	movw	r26, r16
    41a4:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    41a6:	23 2b       	or	r18, r19
    41a8:	24 2b       	or	r18, r20
    41aa:	25 2b       	or	r18, r21
    41ac:	61 f7       	brne	.-40     	; 0x4186 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    41ae:	b8 01       	movw	r22, r16
    41b0:	c7 01       	movw	r24, r14
    41b2:	0e 94 27 20 	call	0x404e	; 0x404e <_ZN5Print5writeEPKc>
}
    41b6:	a1 96       	adiw	r28, 0x21	; 33
    41b8:	0f b6       	in	r0, 0x3f	; 63
    41ba:	f8 94       	cli
    41bc:	de bf       	out	0x3e, r29	; 62
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	cd bf       	out	0x3d, r28	; 61
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	ff 90       	pop	r15
    41cc:	ef 90       	pop	r14
    41ce:	bf 90       	pop	r11
    41d0:	af 90       	pop	r10
    41d2:	9f 90       	pop	r9
    41d4:	8f 90       	pop	r8
    41d6:	08 95       	ret

000041d8 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    41d8:	21 15       	cp	r18, r1
    41da:	31 05       	cpc	r19, r1
    41dc:	41 f4       	brne	.+16     	; 0x41ee <_ZN5Print5printEmi+0x16>
    41de:	dc 01       	movw	r26, r24
    41e0:	ed 91       	ld	r30, X+
    41e2:	fc 91       	ld	r31, X
    41e4:	01 90       	ld	r0, Z+
    41e6:	f0 81       	ld	r31, Z
    41e8:	e0 2d       	mov	r30, r0
    41ea:	64 2f       	mov	r22, r20
    41ec:	09 94       	ijmp
  else return printNumber(n, base);
    41ee:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <_ZN5Print11printNumberEmh>

000041f2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    41f2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    41f4:	46 2f       	mov	r20, r22
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	60 e0       	ldi	r22, 0x00	; 0
    41fa:	70 e0       	ldi	r23, 0x00	; 0
    41fc:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <_ZN5Print5printEmi>

00004200 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    420a:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_ZN5Print5printEhi>
    420e:	8c 01       	movw	r16, r24
  n += println();
    4210:	ce 01       	movw	r24, r28
    4212:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
  return n;
}
    4216:	80 0f       	add	r24, r16
    4218:	91 1f       	adc	r25, r17
    421a:	df 91       	pop	r29
    421c:	cf 91       	pop	r28
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	08 95       	ret

00004224 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    4224:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    4226:	ab 01       	movw	r20, r22
    4228:	60 e0       	ldi	r22, 0x00	; 0
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <_ZN5Print5printEmi>

00004230 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    423a:	0e 94 12 21 	call	0x4224	; 0x4224 <_ZN5Print5printEji>
    423e:	8c 01       	movw	r16, r24
  n += println();
    4240:	ce 01       	movw	r24, r28
    4242:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
  return n;
}
    4246:	80 0f       	add	r24, r16
    4248:	91 1f       	adc	r25, r17
    424a:	df 91       	pop	r29
    424c:	cf 91       	pop	r28
    424e:	1f 91       	pop	r17
    4250:	0f 91       	pop	r16
    4252:	08 95       	ret

00004254 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    4254:	0f 93       	push	r16
    4256:	1f 93       	push	r17
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    425e:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <_ZN5Print5printEmi>
    4262:	8c 01       	movw	r16, r24
  n += println();
    4264:	ce 01       	movw	r24, r28
    4266:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
  return n;
}
    426a:	80 0f       	add	r24, r16
    426c:	91 1f       	adc	r25, r17
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	08 95       	ret

00004278 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    4278:	cf 92       	push	r12
    427a:	df 92       	push	r13
    427c:	ef 92       	push	r14
    427e:	ff 92       	push	r15
    4280:	0f 93       	push	r16
    4282:	1f 93       	push	r17
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
  if (base == 0) {
    4288:	21 15       	cp	r18, r1
    428a:	31 05       	cpc	r19, r1
    428c:	81 f4       	brne	.+32     	; 0x42ae <_ZN5Print5printEli+0x36>
    return write(n);
    428e:	dc 01       	movw	r26, r24
    4290:	ed 91       	ld	r30, X+
    4292:	fc 91       	ld	r31, X
    4294:	01 90       	ld	r0, Z+
    4296:	f0 81       	ld	r31, Z
    4298:	e0 2d       	mov	r30, r0
    429a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	ff 90       	pop	r15
    42a6:	ef 90       	pop	r14
    42a8:	df 90       	pop	r13
    42aa:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    42ac:	09 94       	ijmp
  } else if (base == 10) {
    42ae:	2a 30       	cpi	r18, 0x0A	; 10
    42b0:	31 05       	cpc	r19, r1
    42b2:	01 f5       	brne	.+64     	; 0x42f4 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    42b4:	77 ff       	sbrs	r23, 7
    42b6:	1d c0       	rjmp	.+58     	; 0x42f2 <_ZN5Print5printEli+0x7a>
    42b8:	6a 01       	movw	r12, r20
    42ba:	7b 01       	movw	r14, r22
    42bc:	ec 01       	movw	r28, r24
      int t = print('-');
    42be:	6d e2       	ldi	r22, 0x2D	; 45
    42c0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEc>
    42c4:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    42c6:	44 27       	eor	r20, r20
    42c8:	55 27       	eor	r21, r21
    42ca:	ba 01       	movw	r22, r20
    42cc:	4c 19       	sub	r20, r12
    42ce:	5d 09       	sbc	r21, r13
    42d0:	6e 09       	sbc	r22, r14
    42d2:	7f 09       	sbc	r23, r15
    42d4:	2a e0       	ldi	r18, 0x0A	; 10
    42d6:	ce 01       	movw	r24, r28
    42d8:	0e 94 a3 20 	call	0x4146	; 0x4146 <_ZN5Print11printNumberEmh>
    42dc:	80 0f       	add	r24, r16
    42de:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    42e0:	df 91       	pop	r29
    42e2:	cf 91       	pop	r28
    42e4:	1f 91       	pop	r17
    42e6:	0f 91       	pop	r16
    42e8:	ff 90       	pop	r15
    42ea:	ef 90       	pop	r14
    42ec:	df 90       	pop	r13
    42ee:	cf 90       	pop	r12
    42f0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    42f2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	ff 90       	pop	r15
    42fe:	ef 90       	pop	r14
    4300:	df 90       	pop	r13
    4302:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    4304:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <_ZN5Print11printNumberEmh>

00004308 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    4308:	9a 01       	movw	r18, r20
  return print((long) n, base);
    430a:	ab 01       	movw	r20, r22
    430c:	77 0f       	add	r23, r23
    430e:	66 0b       	sbc	r22, r22
    4310:	77 0b       	sbc	r23, r23
    4312:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <_ZN5Print5printEli>

00004316 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    4320:	0e 94 84 21 	call	0x4308	; 0x4308 <_ZN5Print5printEii>
    4324:	8c 01       	movw	r16, r24
  n += println();
    4326:	ce 01       	movw	r24, r28
    4328:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
  return n;
}
    432c:	80 0f       	add	r24, r16
    432e:	91 1f       	adc	r25, r17
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	08 95       	ret

0000433a <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    4344:	0e 94 3c 21 	call	0x4278	; 0x4278 <_ZN5Print5printEli>
    4348:	8c 01       	movw	r16, r24
  n += println();
    434a:	ce 01       	movw	r24, r28
    434c:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
  return n;
}
    4350:	80 0f       	add	r24, r16
    4352:	91 1f       	adc	r25, r17
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	08 95       	ret

0000435e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    435e:	1f 92       	push	r1
    4360:	0f 92       	push	r0
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	0f 92       	push	r0
    4366:	11 24       	eor	r1, r1
    4368:	2f 93       	push	r18
    436a:	3f 93       	push	r19
    436c:	8f 93       	push	r24
    436e:	9f 93       	push	r25
    4370:	af 93       	push	r26
    4372:	bf 93       	push	r27
    4374:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <timer0_millis>
    4378:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <timer0_millis+0x1>
    437c:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <timer0_millis+0x2>
    4380:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <timer0_millis+0x3>
    4384:	30 91 f0 06 	lds	r19, 0x06F0	; 0x8006f0 <timer0_fract>
    4388:	23 e0       	ldi	r18, 0x03	; 3
    438a:	23 0f       	add	r18, r19
    438c:	2d 37       	cpi	r18, 0x7D	; 125
    438e:	20 f4       	brcc	.+8      	; 0x4398 <__vector_16+0x3a>
    4390:	01 96       	adiw	r24, 0x01	; 1
    4392:	a1 1d       	adc	r26, r1
    4394:	b1 1d       	adc	r27, r1
    4396:	05 c0       	rjmp	.+10     	; 0x43a2 <__vector_16+0x44>
    4398:	26 e8       	ldi	r18, 0x86	; 134
    439a:	23 0f       	add	r18, r19
    439c:	02 96       	adiw	r24, 0x02	; 2
    439e:	a1 1d       	adc	r26, r1
    43a0:	b1 1d       	adc	r27, r1
    43a2:	20 93 f0 06 	sts	0x06F0, r18	; 0x8006f0 <timer0_fract>
    43a6:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <timer0_millis>
    43aa:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <timer0_millis+0x1>
    43ae:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <timer0_millis+0x2>
    43b2:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <timer0_millis+0x3>
    43b6:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <timer0_overflow_count>
    43ba:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <timer0_overflow_count+0x1>
    43be:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <timer0_overflow_count+0x2>
    43c2:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <timer0_overflow_count+0x3>
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	a1 1d       	adc	r26, r1
    43ca:	b1 1d       	adc	r27, r1
    43cc:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <timer0_overflow_count>
    43d0:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <timer0_overflow_count+0x1>
    43d4:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <timer0_overflow_count+0x2>
    43d8:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <timer0_overflow_count+0x3>
    43dc:	bf 91       	pop	r27
    43de:	af 91       	pop	r26
    43e0:	9f 91       	pop	r25
    43e2:	8f 91       	pop	r24
    43e4:	3f 91       	pop	r19
    43e6:	2f 91       	pop	r18
    43e8:	0f 90       	pop	r0
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	0f 90       	pop	r0
    43ee:	1f 90       	pop	r1
    43f0:	18 95       	reti

000043f2 <millis>:
    43f2:	2f b7       	in	r18, 0x3f	; 63
    43f4:	f8 94       	cli
    43f6:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <timer0_millis>
    43fa:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <timer0_millis+0x1>
    43fe:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <timer0_millis+0x2>
    4402:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <timer0_millis+0x3>
    4406:	2f bf       	out	0x3f, r18	; 63
    4408:	08 95       	ret

0000440a <micros>:
    440a:	3f b7       	in	r19, 0x3f	; 63
    440c:	f8 94       	cli
    440e:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <timer0_overflow_count>
    4412:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <timer0_overflow_count+0x1>
    4416:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <timer0_overflow_count+0x2>
    441a:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <timer0_overflow_count+0x3>
    441e:	26 b5       	in	r18, 0x26	; 38
    4420:	a8 9b       	sbis	0x15, 0	; 21
    4422:	05 c0       	rjmp	.+10     	; 0x442e <micros+0x24>
    4424:	2f 3f       	cpi	r18, 0xFF	; 255
    4426:	19 f0       	breq	.+6      	; 0x442e <micros+0x24>
    4428:	01 96       	adiw	r24, 0x01	; 1
    442a:	a1 1d       	adc	r26, r1
    442c:	b1 1d       	adc	r27, r1
    442e:	3f bf       	out	0x3f, r19	; 63
    4430:	ba 2f       	mov	r27, r26
    4432:	a9 2f       	mov	r26, r25
    4434:	98 2f       	mov	r25, r24
    4436:	88 27       	eor	r24, r24
    4438:	82 0f       	add	r24, r18
    443a:	91 1d       	adc	r25, r1
    443c:	a1 1d       	adc	r26, r1
    443e:	b1 1d       	adc	r27, r1
    4440:	bc 01       	movw	r22, r24
    4442:	cd 01       	movw	r24, r26
    4444:	42 e0       	ldi	r20, 0x02	; 2
    4446:	66 0f       	add	r22, r22
    4448:	77 1f       	adc	r23, r23
    444a:	88 1f       	adc	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	4a 95       	dec	r20
    4450:	d1 f7       	brne	.-12     	; 0x4446 <micros+0x3c>
    4452:	08 95       	ret

00004454 <delay>:
    4454:	8f 92       	push	r8
    4456:	9f 92       	push	r9
    4458:	af 92       	push	r10
    445a:	bf 92       	push	r11
    445c:	cf 92       	push	r12
    445e:	df 92       	push	r13
    4460:	ef 92       	push	r14
    4462:	ff 92       	push	r15
    4464:	6b 01       	movw	r12, r22
    4466:	7c 01       	movw	r14, r24
    4468:	0e 94 05 22 	call	0x440a	; 0x440a <micros>
    446c:	4b 01       	movw	r8, r22
    446e:	5c 01       	movw	r10, r24
    4470:	c1 14       	cp	r12, r1
    4472:	d1 04       	cpc	r13, r1
    4474:	e1 04       	cpc	r14, r1
    4476:	f1 04       	cpc	r15, r1
    4478:	01 f1       	breq	.+64     	; 0x44ba <delay+0x66>
    447a:	0e 94 0b 30 	call	0x6016	; 0x6016 <yield>
    447e:	0e 94 05 22 	call	0x440a	; 0x440a <micros>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	88 19       	sub	r24, r8
    4488:	99 09       	sbc	r25, r9
    448a:	aa 09       	sbc	r26, r10
    448c:	bb 09       	sbc	r27, r11
    448e:	88 3e       	cpi	r24, 0xE8	; 232
    4490:	93 40       	sbci	r25, 0x03	; 3
    4492:	a1 05       	cpc	r26, r1
    4494:	b1 05       	cpc	r27, r1
    4496:	60 f3       	brcs	.-40     	; 0x4470 <delay+0x1c>
    4498:	21 e0       	ldi	r18, 0x01	; 1
    449a:	c2 1a       	sub	r12, r18
    449c:	d1 08       	sbc	r13, r1
    449e:	e1 08       	sbc	r14, r1
    44a0:	f1 08       	sbc	r15, r1
    44a2:	88 ee       	ldi	r24, 0xE8	; 232
    44a4:	88 0e       	add	r8, r24
    44a6:	83 e0       	ldi	r24, 0x03	; 3
    44a8:	98 1e       	adc	r9, r24
    44aa:	a1 1c       	adc	r10, r1
    44ac:	b1 1c       	adc	r11, r1
    44ae:	c1 14       	cp	r12, r1
    44b0:	d1 04       	cpc	r13, r1
    44b2:	e1 04       	cpc	r14, r1
    44b4:	f1 04       	cpc	r15, r1
    44b6:	19 f7       	brne	.-58     	; 0x447e <delay+0x2a>
    44b8:	db cf       	rjmp	.-74     	; 0x4470 <delay+0x1c>
    44ba:	ff 90       	pop	r15
    44bc:	ef 90       	pop	r14
    44be:	df 90       	pop	r13
    44c0:	cf 90       	pop	r12
    44c2:	bf 90       	pop	r11
    44c4:	af 90       	pop	r10
    44c6:	9f 90       	pop	r9
    44c8:	8f 90       	pop	r8
    44ca:	08 95       	ret

000044cc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    44cc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    44ce:	84 b5       	in	r24, 0x24	; 36
    44d0:	82 60       	ori	r24, 0x02	; 2
    44d2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    44d4:	84 b5       	in	r24, 0x24	; 36
    44d6:	81 60       	ori	r24, 0x01	; 1
    44d8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    44da:	85 b5       	in	r24, 0x25	; 37
    44dc:	82 60       	ori	r24, 0x02	; 2
    44de:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    44e0:	85 b5       	in	r24, 0x25	; 37
    44e2:	81 60       	ori	r24, 0x01	; 1
    44e4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    44e6:	ee e6       	ldi	r30, 0x6E	; 110
    44e8:	f0 e0       	ldi	r31, 0x00	; 0
    44ea:	80 81       	ld	r24, Z
    44ec:	81 60       	ori	r24, 0x01	; 1
    44ee:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    44f0:	e1 e8       	ldi	r30, 0x81	; 129
    44f2:	f0 e0       	ldi	r31, 0x00	; 0
    44f4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    44f6:	80 81       	ld	r24, Z
    44f8:	82 60       	ori	r24, 0x02	; 2
    44fa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    44fc:	80 81       	ld	r24, Z
    44fe:	81 60       	ori	r24, 0x01	; 1
    4500:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4502:	e0 e8       	ldi	r30, 0x80	; 128
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	81 60       	ori	r24, 0x01	; 1
    450a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    450c:	e1 eb       	ldi	r30, 0xB1	; 177
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	80 81       	ld	r24, Z
    4512:	84 60       	ori	r24, 0x04	; 4
    4514:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4516:	e0 eb       	ldi	r30, 0xB0	; 176
    4518:	f0 e0       	ldi	r31, 0x00	; 0
    451a:	80 81       	ld	r24, Z
    451c:	81 60       	ori	r24, 0x01	; 1
    451e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4520:	ea e7       	ldi	r30, 0x7A	; 122
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	84 60       	ori	r24, 0x04	; 4
    4528:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    452a:	80 81       	ld	r24, Z
    452c:	82 60       	ori	r24, 0x02	; 2
    452e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4530:	80 81       	ld	r24, Z
    4532:	81 60       	ori	r24, 0x01	; 1
    4534:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4536:	80 81       	ld	r24, Z
    4538:	80 68       	ori	r24, 0x80	; 128
    453a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    453c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4540:	08 95       	ret

00004542 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    4542:	8e 30       	cpi	r24, 0x0E	; 14
    4544:	08 f0       	brcs	.+2      	; 0x4548 <analogRead+0x6>
    4546:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4548:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <analog_reference>
    454c:	90 e4       	ldi	r25, 0x40	; 64
    454e:	29 9f       	mul	r18, r25
    4550:	90 01       	movw	r18, r0
    4552:	11 24       	eor	r1, r1
    4554:	87 70       	andi	r24, 0x07	; 7
    4556:	82 2b       	or	r24, r18
    4558:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    455c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4560:	80 64       	ori	r24, 0x40	; 64
    4562:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4566:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    456a:	86 fd       	sbrc	r24, 6
    456c:	fc cf       	rjmp	.-8      	; 0x4566 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    456e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    4572:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4576:	90 e0       	ldi	r25, 0x00	; 0
}
    4578:	92 2b       	or	r25, r18
    457a:	08 95       	ret

0000457c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    457c:	83 30       	cpi	r24, 0x03	; 3
    457e:	81 f0       	breq	.+32     	; 0x45a0 <turnOffPWM+0x24>
    4580:	28 f4       	brcc	.+10     	; 0x458c <turnOffPWM+0x10>
    4582:	81 30       	cpi	r24, 0x01	; 1
    4584:	99 f0       	breq	.+38     	; 0x45ac <turnOffPWM+0x30>
    4586:	82 30       	cpi	r24, 0x02	; 2
    4588:	a1 f0       	breq	.+40     	; 0x45b2 <turnOffPWM+0x36>
    458a:	08 95       	ret
    458c:	87 30       	cpi	r24, 0x07	; 7
    458e:	a9 f0       	breq	.+42     	; 0x45ba <turnOffPWM+0x3e>
    4590:	88 30       	cpi	r24, 0x08	; 8
    4592:	b9 f0       	breq	.+46     	; 0x45c2 <turnOffPWM+0x46>
    4594:	84 30       	cpi	r24, 0x04	; 4
    4596:	d1 f4       	brne	.+52     	; 0x45cc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4598:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    459c:	8f 7d       	andi	r24, 0xDF	; 223
    459e:	03 c0       	rjmp	.+6      	; 0x45a6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    45a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    45a4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    45a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    45aa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    45ac:	84 b5       	in	r24, 0x24	; 36
    45ae:	8f 77       	andi	r24, 0x7F	; 127
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    45b2:	84 b5       	in	r24, 0x24	; 36
    45b4:	8f 7d       	andi	r24, 0xDF	; 223
    45b6:	84 bd       	out	0x24, r24	; 36
    45b8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    45ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    45be:	8f 77       	andi	r24, 0x7F	; 127
    45c0:	03 c0       	rjmp	.+6      	; 0x45c8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    45c2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    45c6:	8f 7d       	andi	r24, 0xDF	; 223
    45c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    45cc:	08 95       	ret

000045ce <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	fc 01       	movw	r30, r24
    45d6:	e6 59       	subi	r30, 0x96	; 150
    45d8:	fc 4f       	sbci	r31, 0xFC	; 252
    45da:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    45dc:	fc 01       	movw	r30, r24
    45de:	e2 58       	subi	r30, 0x82	; 130
    45e0:	fc 4f       	sbci	r31, 0xFC	; 252
    45e2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    45e4:	88 23       	and	r24, r24
    45e6:	61 f1       	breq	.+88     	; 0x4640 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	88 0f       	add	r24, r24
    45ec:	99 1f       	adc	r25, r25
    45ee:	fc 01       	movw	r30, r24
    45f0:	ea 55       	subi	r30, 0x5A	; 90
    45f2:	fc 4f       	sbci	r31, 0xFC	; 252
    45f4:	c5 91       	lpm	r28, Z+
    45f6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    45f8:	fc 01       	movw	r30, r24
    45fa:	e4 56       	subi	r30, 0x64	; 100
    45fc:	fc 4f       	sbci	r31, 0xFC	; 252
    45fe:	a5 91       	lpm	r26, Z+
    4600:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4602:	61 11       	cpse	r22, r1
    4604:	09 c0       	rjmp	.+18     	; 0x4618 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4606:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4608:	f8 94       	cli
		*reg &= ~bit;
    460a:	88 81       	ld	r24, Y
    460c:	20 95       	com	r18
    460e:	82 23       	and	r24, r18
    4610:	88 83       	st	Y, r24
		*out &= ~bit;
    4612:	ec 91       	ld	r30, X
    4614:	2e 23       	and	r18, r30
    4616:	0b c0       	rjmp	.+22     	; 0x462e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4618:	62 30       	cpi	r22, 0x02	; 2
    461a:	61 f4       	brne	.+24     	; 0x4634 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    461c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    461e:	f8 94       	cli
		*reg &= ~bit;
    4620:	88 81       	ld	r24, Y
    4622:	32 2f       	mov	r19, r18
    4624:	30 95       	com	r19
    4626:	83 23       	and	r24, r19
    4628:	88 83       	st	Y, r24
		*out |= bit;
    462a:	ec 91       	ld	r30, X
    462c:	2e 2b       	or	r18, r30
    462e:	2c 93       	st	X, r18
		SREG = oldSREG;
    4630:	9f bf       	out	0x3f, r25	; 63
    4632:	06 c0       	rjmp	.+12     	; 0x4640 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4634:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4636:	f8 94       	cli
		*reg |= bit;
    4638:	e8 81       	ld	r30, Y
    463a:	2e 2b       	or	r18, r30
    463c:	28 83       	st	Y, r18
		SREG = oldSREG;
    463e:	8f bf       	out	0x3f, r24	; 63
	}
}
    4640:	df 91       	pop	r29
    4642:	cf 91       	pop	r28
    4644:	08 95       	ret

00004646 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4646:	1f 93       	push	r17
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    464c:	28 2f       	mov	r18, r24
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	f9 01       	movw	r30, r18
    4652:	ea 5a       	subi	r30, 0xAA	; 170
    4654:	fc 4f       	sbci	r31, 0xFC	; 252
    4656:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4658:	f9 01       	movw	r30, r18
    465a:	e6 59       	subi	r30, 0x96	; 150
    465c:	fc 4f       	sbci	r31, 0xFC	; 252
    465e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4660:	f9 01       	movw	r30, r18
    4662:	e2 58       	subi	r30, 0x82	; 130
    4664:	fc 4f       	sbci	r31, 0xFC	; 252
    4666:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4668:	cc 23       	and	r28, r28
    466a:	c1 f0       	breq	.+48     	; 0x469c <digitalWrite+0x56>
    466c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    466e:	81 11       	cpse	r24, r1
    4670:	0e 94 be 22 	call	0x457c	; 0x457c <turnOffPWM>

	out = portOutputRegister(port);
    4674:	ec 2f       	mov	r30, r28
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	ee 0f       	add	r30, r30
    467a:	ff 1f       	adc	r31, r31
    467c:	e4 56       	subi	r30, 0x64	; 100
    467e:	fc 4f       	sbci	r31, 0xFC	; 252
    4680:	a5 91       	lpm	r26, Z+
    4682:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4684:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4686:	f8 94       	cli

	if (val == LOW) {
    4688:	11 11       	cpse	r17, r1
    468a:	04 c0       	rjmp	.+8      	; 0x4694 <digitalWrite+0x4e>
		*out &= ~bit;
    468c:	8c 91       	ld	r24, X
    468e:	d0 95       	com	r29
    4690:	d8 23       	and	r29, r24
    4692:	02 c0       	rjmp	.+4      	; 0x4698 <digitalWrite+0x52>
	} else {
		*out |= bit;
    4694:	ec 91       	ld	r30, X
    4696:	de 2b       	or	r29, r30
    4698:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    469a:	9f bf       	out	0x3f, r25	; 63
}
    469c:	df 91       	pop	r29
    469e:	cf 91       	pop	r28
    46a0:	1f 91       	pop	r17
    46a2:	08 95       	ret

000046a4 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    46a4:	fc 01       	movw	r30, r24
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	0c 94 de 31 	jmp	0x63bc	; 0x63bc <free>

000046ae <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    46ae:	cf 93       	push	r28
    46b0:	df 93       	push	r29
    46b2:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    46b4:	88 81       	ld	r24, Y
    46b6:	99 81       	ldd	r25, Y+1	; 0x01
    46b8:	00 97       	sbiw	r24, 0x00	; 0
    46ba:	11 f0       	breq	.+4      	; 0x46c0 <_ZN6String10invalidateEv+0x12>
    46bc:	0e 94 de 31 	call	0x63bc	; 0x63bc <free>
	buffer = NULL;
    46c0:	19 82       	std	Y+1, r1	; 0x01
    46c2:	18 82       	st	Y, r1
	capacity = len = 0;
    46c4:	1d 82       	std	Y+5, r1	; 0x05
    46c6:	1c 82       	std	Y+4, r1	; 0x04
    46c8:	1b 82       	std	Y+3, r1	; 0x03
    46ca:	1a 82       	std	Y+2, r1	; 0x02
}
    46cc:	df 91       	pop	r29
    46ce:	cf 91       	pop	r28
    46d0:	08 95       	ret

000046d2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    46d2:	0f 93       	push	r16
    46d4:	1f 93       	push	r17
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	ec 01       	movw	r28, r24
    46dc:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    46de:	6f 5f       	subi	r22, 0xFF	; 255
    46e0:	7f 4f       	sbci	r23, 0xFF	; 255
    46e2:	88 81       	ld	r24, Y
    46e4:	99 81       	ldd	r25, Y+1	; 0x01
    46e6:	0e 94 67 32 	call	0x64ce	; 0x64ce <realloc>
	if (newbuffer) {
    46ea:	00 97       	sbiw	r24, 0x00	; 0
    46ec:	31 f0       	breq	.+12     	; 0x46fa <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    46ee:	99 83       	std	Y+1, r25	; 0x01
    46f0:	88 83       	st	Y, r24
		capacity = maxStrLen;
    46f2:	1b 83       	std	Y+3, r17	; 0x03
    46f4:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	01 c0       	rjmp	.+2      	; 0x46fc <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    46fa:	80 e0       	ldi	r24, 0x00	; 0
}
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	1f 91       	pop	r17
    4702:	0f 91       	pop	r16
    4704:	08 95       	ret

00004706 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    4706:	cf 93       	push	r28
    4708:	df 93       	push	r29
    470a:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    470c:	88 81       	ld	r24, Y
    470e:	99 81       	ldd	r25, Y+1	; 0x01
    4710:	89 2b       	or	r24, r25
    4712:	29 f0       	breq	.+10     	; 0x471e <_ZN6String7reserveEj+0x18>
    4714:	8a 81       	ldd	r24, Y+2	; 0x02
    4716:	9b 81       	ldd	r25, Y+3	; 0x03
    4718:	86 17       	cp	r24, r22
    471a:	97 07       	cpc	r25, r23
    471c:	60 f4       	brcc	.+24     	; 0x4736 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    471e:	ce 01       	movw	r24, r28
    4720:	0e 94 69 23 	call	0x46d2	; 0x46d2 <_ZN6String12changeBufferEj>
    4724:	88 23       	and	r24, r24
    4726:	41 f0       	breq	.+16     	; 0x4738 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    4728:	8c 81       	ldd	r24, Y+4	; 0x04
    472a:	9d 81       	ldd	r25, Y+5	; 0x05
    472c:	89 2b       	or	r24, r25
    472e:	19 f4       	brne	.+6      	; 0x4736 <_ZN6String7reserveEj+0x30>
    4730:	e8 81       	ld	r30, Y
    4732:	f9 81       	ldd	r31, Y+1	; 0x01
    4734:	10 82       	st	Z, r1
    4736:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	08 95       	ret

0000473e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    473e:	ef 92       	push	r14
    4740:	ff 92       	push	r15
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	ec 01       	movw	r28, r24
    474c:	7b 01       	movw	r14, r22
    474e:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    4750:	ba 01       	movw	r22, r20
    4752:	0e 94 83 23 	call	0x4706	; 0x4706 <_ZN6String7reserveEj>
    4756:	81 11       	cpse	r24, r1
    4758:	04 c0       	rjmp	.+8      	; 0x4762 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    475a:	ce 01       	movw	r24, r28
    475c:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN6String10invalidateEv>
		return *this;
    4760:	07 c0       	rjmp	.+14     	; 0x4770 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    4762:	1d 83       	std	Y+5, r17	; 0x05
    4764:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    4766:	b7 01       	movw	r22, r14
    4768:	88 81       	ld	r24, Y
    476a:	99 81       	ldd	r25, Y+1	; 0x01
    476c:	0e 94 94 33 	call	0x6728	; 0x6728 <strcpy>
	return *this;
}
    4770:	ce 01       	movw	r24, r28
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	1f 91       	pop	r17
    4778:	0f 91       	pop	r16
    477a:	ff 90       	pop	r15
    477c:	ef 90       	pop	r14
    477e:	08 95       	ret

00004780 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4780:	fc 01       	movw	r30, r24
    4782:	11 82       	std	Z+1, r1	; 0x01
    4784:	10 82       	st	Z, r1
	capacity = 0;
    4786:	13 82       	std	Z+3, r1	; 0x03
    4788:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    478a:	15 82       	std	Z+5, r1	; 0x05
    478c:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    478e:	61 15       	cp	r22, r1
    4790:	71 05       	cpc	r23, r1
    4792:	51 f0       	breq	.+20     	; 0x47a8 <_ZN6StringC1EPKc+0x28>
    4794:	fb 01       	movw	r30, r22
    4796:	01 90       	ld	r0, Z+
    4798:	00 20       	and	r0, r0
    479a:	e9 f7       	brne	.-6      	; 0x4796 <_ZN6StringC1EPKc+0x16>
    479c:	31 97       	sbiw	r30, 0x01	; 1
    479e:	af 01       	movw	r20, r30
    47a0:	46 1b       	sub	r20, r22
    47a2:	57 0b       	sbc	r21, r23
    47a4:	0c 94 9f 23 	jmp	0x473e	; 0x473e <_ZN6String4copyEPKcj>
    47a8:	08 95       	ret

000047aa <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    47aa:	88 5e       	subi	r24, 0xE8	; 232
    47ac:	9e 4f       	sbci	r25, 0xFE	; 254
    47ae:	dc 01       	movw	r26, r24
    47b0:	8d 91       	ld	r24, X+
    47b2:	9c 91       	ld	r25, X
    47b4:	dc 01       	movw	r26, r24
    47b6:	ed 91       	ld	r30, X+
    47b8:	fc 91       	ld	r31, X
    47ba:	04 80       	ldd	r0, Z+4	; 0x04
    47bc:	f5 81       	ldd	r31, Z+5	; 0x05
    47be:	e0 2d       	mov	r30, r0
    47c0:	09 94       	ijmp

000047c2 <_ZN13Adafruit_FONA5writeEh>:
    47c2:	88 5e       	subi	r24, 0xE8	; 232
    47c4:	9e 4f       	sbci	r25, 0xFE	; 254
    47c6:	dc 01       	movw	r26, r24
    47c8:	8d 91       	ld	r24, X+
    47ca:	9c 91       	ld	r25, X
    47cc:	dc 01       	movw	r26, r24
    47ce:	ed 91       	ld	r30, X+
    47d0:	fc 91       	ld	r31, X
    47d2:	01 90       	ld	r0, Z+
    47d4:	f0 81       	ld	r31, Z
    47d6:	e0 2d       	mov	r30, r0
    47d8:	09 94       	ijmp

000047da <_ZN13Adafruit_FONA4readEv>:
    47da:	88 5e       	subi	r24, 0xE8	; 232
    47dc:	9e 4f       	sbci	r25, 0xFE	; 254
    47de:	dc 01       	movw	r26, r24
    47e0:	8d 91       	ld	r24, X+
    47e2:	9c 91       	ld	r25, X
    47e4:	dc 01       	movw	r26, r24
    47e6:	ed 91       	ld	r30, X+
    47e8:	fc 91       	ld	r31, X
    47ea:	06 80       	ldd	r0, Z+6	; 0x06
    47ec:	f7 81       	ldd	r31, Z+7	; 0x07
    47ee:	e0 2d       	mov	r30, r0
    47f0:	09 94       	ijmp

000047f2 <_ZN13Adafruit_FONA4peekEv>:
    47f2:	88 5e       	subi	r24, 0xE8	; 232
    47f4:	9e 4f       	sbci	r25, 0xFE	; 254
    47f6:	dc 01       	movw	r26, r24
    47f8:	8d 91       	ld	r24, X+
    47fa:	9c 91       	ld	r25, X
    47fc:	dc 01       	movw	r26, r24
    47fe:	ed 91       	ld	r30, X+
    4800:	fc 91       	ld	r31, X
    4802:	00 84       	ldd	r0, Z+8	; 0x08
    4804:	f1 85       	ldd	r31, Z+9	; 0x09
    4806:	e0 2d       	mov	r30, r0
    4808:	09 94       	ijmp

0000480a <_ZN13Adafruit_FONA5flushEv>:
    480a:	88 5e       	subi	r24, 0xE8	; 232
    480c:	9e 4f       	sbci	r25, 0xFE	; 254
    480e:	dc 01       	movw	r26, r24
    4810:	8d 91       	ld	r24, X+
    4812:	9c 91       	ld	r25, X
    4814:	dc 01       	movw	r26, r24
    4816:	ed 91       	ld	r30, X+
    4818:	fc 91       	ld	r31, X
    481a:	02 84       	ldd	r0, Z+10	; 0x0a
    481c:	f3 85       	ldd	r31, Z+11	; 0x0b
    481e:	e0 2d       	mov	r30, r0
    4820:	09 94       	ijmp

00004822 <_ZN13Adafruit_FONAC1Ea>:
    4822:	fc 01       	movw	r30, r24
    4824:	13 82       	std	Z+3, r1	; 0x03
    4826:	12 82       	std	Z+2, r1	; 0x02
    4828:	88 ee       	ldi	r24, 0xE8	; 232
    482a:	93 e0       	ldi	r25, 0x03	; 3
    482c:	a0 e0       	ldi	r26, 0x00	; 0
    482e:	b0 e0       	ldi	r27, 0x00	; 0
    4830:	84 83       	std	Z+4, r24	; 0x04
    4832:	95 83       	std	Z+5, r25	; 0x05
    4834:	a6 83       	std	Z+6, r26	; 0x06
    4836:	b7 83       	std	Z+7, r27	; 0x07
    4838:	8f ef       	ldi	r24, 0xFF	; 255
    483a:	92 e0       	ldi	r25, 0x02	; 2
    483c:	91 83       	std	Z+1, r25	; 0x01
    483e:	80 83       	st	Z, r24
    4840:	64 87       	std	Z+12, r22	; 0x0c
    4842:	df 01       	movw	r26, r30
    4844:	a3 5f       	subi	r26, 0xF3	; 243
    4846:	be 4f       	sbci	r27, 0xFE	; 254
    4848:	8a ee       	ldi	r24, 0xEA	; 234
    484a:	96 e0       	ldi	r25, 0x06	; 6
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	9c 93       	st	X, r25
    4850:	8e 93       	st	-X, r24
    4852:	12 96       	adiw	r26, 0x02	; 2
    4854:	11 96       	adiw	r26, 0x01	; 1
    4856:	1c 92       	st	X, r1
    4858:	1e 92       	st	-X, r1
    485a:	12 96       	adiw	r26, 0x02	; 2
    485c:	11 96       	adiw	r26, 0x01	; 1
    485e:	1c 92       	st	X, r1
    4860:	1e 92       	st	-X, r1
    4862:	17 96       	adiw	r26, 0x07	; 7
    4864:	11 96       	adiw	r26, 0x01	; 1
    4866:	1c 92       	st	X, r1
    4868:	1e 92       	st	-X, r1
    486a:	15 97       	sbiw	r26, 0x05	; 5
    486c:	1c 92       	st	X, r1
    486e:	11 96       	adiw	r26, 0x01	; 1
    4870:	85 ee       	ldi	r24, 0xE5	; 229
    4872:	96 e0       	ldi	r25, 0x06	; 6
    4874:	8d 93       	st	X+, r24
    4876:	9c 93       	st	X, r25
    4878:	ea 5e       	subi	r30, 0xEA	; 234
    487a:	fe 4f       	sbci	r31, 0xFE	; 254
    487c:	82 ee       	ldi	r24, 0xE2	; 226
    487e:	96 e0       	ldi	r25, 0x06	; 6
    4880:	91 83       	std	Z+1, r25	; 0x01
    4882:	80 83       	st	Z, r24
    4884:	08 95       	ret

00004886 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    4886:	fc 01       	movw	r30, r24
    4888:	e3 5f       	subi	r30, 0xF3	; 243
    488a:	fe 4f       	sbci	r31, 0xFE	; 254
    488c:	71 83       	std	Z+1, r23	; 0x01
    488e:	60 83       	st	Z, r22
    4890:	32 96       	adiw	r30, 0x02	; 2
    4892:	51 83       	std	Z+1, r21	; 0x01
    4894:	40 83       	st	Z, r20
    4896:	32 96       	adiw	r30, 0x02	; 2
    4898:	31 83       	std	Z+1, r19	; 0x01
    489a:	20 83       	st	Z, r18
    489c:	08 95       	ret

0000489e <_ZN13Adafruit_FONA10flushInputEv>:
    489e:	0f 93       	push	r16
    48a0:	1f 93       	push	r17
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	ec 01       	movw	r28, r24
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	8c 01       	movw	r16, r24
    48ae:	0f 5f       	subi	r16, 0xFF	; 255
    48b0:	1f 4f       	sbci	r17, 0xFF	; 255
    48b2:	88 97       	sbiw	r24, 0x28	; 40
    48b4:	d8 f4       	brcc	.+54     	; 0x48ec <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    48b6:	e8 81       	ld	r30, Y
    48b8:	f9 81       	ldd	r31, Y+1	; 0x01
    48ba:	04 80       	ldd	r0, Z+4	; 0x04
    48bc:	f5 81       	ldd	r31, Z+5	; 0x05
    48be:	e0 2d       	mov	r30, r0
    48c0:	ce 01       	movw	r24, r28
    48c2:	09 95       	icall
    48c4:	89 2b       	or	r24, r25
    48c6:	51 f0       	breq	.+20     	; 0x48dc <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    48c8:	e8 81       	ld	r30, Y
    48ca:	f9 81       	ldd	r31, Y+1	; 0x01
    48cc:	06 80       	ldd	r0, Z+6	; 0x06
    48ce:	f7 81       	ldd	r31, Z+7	; 0x07
    48d0:	e0 2d       	mov	r30, r0
    48d2:	ce 01       	movw	r24, r28
    48d4:	09 95       	icall
    48d6:	00 e0       	ldi	r16, 0x00	; 0
    48d8:	10 e0       	ldi	r17, 0x00	; 0
    48da:	ed cf       	rjmp	.-38     	; 0x48b6 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    48dc:	61 e0       	ldi	r22, 0x01	; 1
    48de:	70 e0       	ldi	r23, 0x00	; 0
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    48e8:	c8 01       	movw	r24, r16
    48ea:	e0 cf       	rjmp	.-64     	; 0x48ac <_ZN13Adafruit_FONA10flushInputEv+0xe>
    48ec:	df 91       	pop	r29
    48ee:	cf 91       	pop	r28
    48f0:	1f 91       	pop	r17
    48f2:	0f 91       	pop	r16
    48f4:	08 95       	ret

000048f6 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	ec 01       	movw	r28, r24
    4902:	8b 01       	movw	r16, r22
    4904:	f4 2e       	mov	r15, r20
    4906:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    490a:	6e eb       	ldi	r22, 0xBE	; 190
    490c:	74 e0       	ldi	r23, 0x04	; 4
    490e:	83 e5       	ldi	r24, 0x53	; 83
    4910:	96 e0       	ldi	r25, 0x06	; 6
    4912:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4916:	60 eb       	ldi	r22, 0xB0	; 176
    4918:	74 e0       	ldi	r23, 0x04	; 4
    491a:	83 e5       	ldi	r24, 0x53	; 83
    491c:	96 e0       	ldi	r25, 0x06	; 6
    491e:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4922:	b8 01       	movw	r22, r16
    4924:	83 e5       	ldi	r24, 0x53	; 83
    4926:	96 e0       	ldi	r25, 0x06	; 6
    4928:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    492c:	62 e2       	ldi	r22, 0x22	; 34
    492e:	83 e5       	ldi	r24, 0x53	; 83
    4930:	96 e0       	ldi	r25, 0x06	; 6
    4932:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN5Print7printlnEc>
    4936:	c8 5e       	subi	r28, 0xE8	; 232
    4938:	de 4f       	sbci	r29, 0xFE	; 254
    493a:	62 ea       	ldi	r22, 0xA2	; 162
    493c:	74 e0       	ldi	r23, 0x04	; 4
    493e:	88 81       	ld	r24, Y
    4940:	99 81       	ldd	r25, Y+1	; 0x01
    4942:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4946:	b8 01       	movw	r22, r16
    4948:	88 81       	ld	r24, Y
    494a:	99 81       	ldd	r25, Y+1	; 0x01
    494c:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4950:	88 81       	ld	r24, Y
    4952:	99 81       	ldd	r25, Y+1	; 0x01
    4954:	ff 20       	and	r15, r15
    4956:	19 f0       	breq	.+6      	; 0x495e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    4958:	6e e9       	ldi	r22, 0x9E	; 158
    495a:	74 e0       	ldi	r23, 0x04	; 4
    495c:	02 c0       	rjmp	.+4      	; 0x4962 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    495e:	6b e9       	ldi	r22, 0x9B	; 155
    4960:	74 e0       	ldi	r23, 0x04	; 4
    4962:	df 91       	pop	r29
    4964:	cf 91       	pop	r28
    4966:	1f 91       	pop	r17
    4968:	0f 91       	pop	r16
    496a:	ff 90       	pop	r15
    496c:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>

00004970 <_ZN13Adafruit_FONA8readlineEjb>:
    4970:	9f 92       	push	r9
    4972:	af 92       	push	r10
    4974:	bf 92       	push	r11
    4976:	cf 92       	push	r12
    4978:	df 92       	push	r13
    497a:	ef 92       	push	r14
    497c:	ff 92       	push	r15
    497e:	0f 93       	push	r16
    4980:	1f 93       	push	r17
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	7c 01       	movw	r14, r24
    4988:	94 2e       	mov	r9, r20
    498a:	8b 01       	movw	r16, r22
    498c:	00 0f       	add	r16, r16
    498e:	11 1f       	adc	r17, r17
    4990:	00 0f       	add	r16, r16
    4992:	11 1f       	adc	r17, r17
    4994:	c0 e0       	ldi	r28, 0x00	; 0
    4996:	d0 e0       	ldi	r29, 0x00	; 0
    4998:	57 01       	movw	r10, r14
    499a:	88 ee       	ldi	r24, 0xE8	; 232
    499c:	a8 1a       	sub	r10, r24
    499e:	8e ef       	ldi	r24, 0xFE	; 254
    49a0:	b8 0a       	sbc	r11, r24
    49a2:	01 15       	cp	r16, r1
    49a4:	11 05       	cpc	r17, r1
    49a6:	09 f4       	brne	.+2      	; 0x49aa <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    49a8:	50 c0       	rjmp	.+160    	; 0x4a4a <_ZN13Adafruit_FONA8readlineEjb+0xda>
    49aa:	ce 3f       	cpi	r28, 0xFE	; 254
    49ac:	d1 05       	cpc	r29, r1
    49ae:	80 f0       	brcs	.+32     	; 0x49d0 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    49b0:	60 ef       	ldi	r22, 0xF0	; 240
    49b2:	73 e0       	ldi	r23, 0x03	; 3
    49b4:	22 c0       	rjmp	.+68     	; 0x49fa <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    49b6:	f5 01       	movw	r30, r10
    49b8:	80 81       	ld	r24, Z
    49ba:	91 81       	ldd	r25, Z+1	; 0x01
    49bc:	dc 01       	movw	r26, r24
    49be:	ed 91       	ld	r30, X+
    49c0:	fc 91       	ld	r31, X
    49c2:	06 80       	ldd	r0, Z+6	; 0x06
    49c4:	f7 81       	ldd	r31, Z+7	; 0x07
    49c6:	e0 2d       	mov	r30, r0
    49c8:	09 95       	icall
    49ca:	6c 01       	movw	r12, r24
    49cc:	8d 30       	cpi	r24, 0x0D	; 13
    49ce:	69 f4       	brne	.+26     	; 0x49ea <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    49d0:	d5 01       	movw	r26, r10
    49d2:	8d 91       	ld	r24, X+
    49d4:	9c 91       	ld	r25, X
    49d6:	dc 01       	movw	r26, r24
    49d8:	ed 91       	ld	r30, X+
    49da:	fc 91       	ld	r31, X
    49dc:	04 80       	ldd	r0, Z+4	; 0x04
    49de:	f5 81       	ldd	r31, Z+5	; 0x05
    49e0:	e0 2d       	mov	r30, r0
    49e2:	09 95       	icall
    49e4:	89 2b       	or	r24, r25
    49e6:	39 f7       	brne	.-50     	; 0x49b6 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    49e8:	26 c0       	rjmp	.+76     	; 0x4a36 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    49ea:	8a 30       	cpi	r24, 0x0A	; 10
    49ec:	59 f4       	brne	.+22     	; 0x4a04 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    49ee:	20 97       	sbiw	r28, 0x00	; 0
    49f0:	79 f3       	breq	.-34     	; 0x49d0 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    49f2:	91 10       	cpse	r9, r1
    49f4:	07 c0       	rjmp	.+14     	; 0x4a04 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    49f6:	68 ee       	ldi	r22, 0xE8	; 232
    49f8:	73 e0       	ldi	r23, 0x03	; 3
    49fa:	83 e5       	ldi	r24, 0x53	; 83
    49fc:	96 e0       	ldi	r25, 0x06	; 6
    49fe:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    4a02:	23 c0       	rjmp	.+70     	; 0x4a4a <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4a04:	f7 01       	movw	r30, r14
    4a06:	ec 0f       	add	r30, r28
    4a08:	fd 1f       	adc	r31, r29
    4a0a:	c6 86       	std	Z+14, r12	; 0x0e
    4a0c:	b6 01       	movw	r22, r12
    4a0e:	77 27       	eor	r23, r23
    4a10:	40 e1       	ldi	r20, 0x10	; 16
    4a12:	50 e0       	ldi	r21, 0x00	; 0
    4a14:	83 e5       	ldi	r24, 0x53	; 83
    4a16:	96 e0       	ldi	r25, 0x06	; 6
    4a18:	0e 94 84 21 	call	0x4308	; 0x4308 <_ZN5Print5printEii>
    4a1c:	62 ea       	ldi	r22, 0xA2	; 162
    4a1e:	72 e0       	ldi	r23, 0x02	; 2
    4a20:	83 e5       	ldi	r24, 0x53	; 83
    4a22:	96 e0       	ldi	r25, 0x06	; 6
    4a24:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    4a28:	6c 2d       	mov	r22, r12
    4a2a:	83 e5       	ldi	r24, 0x53	; 83
    4a2c:	96 e0       	ldi	r25, 0x06	; 6
    4a2e:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN5Print7printlnEc>
    4a32:	21 96       	adiw	r28, 0x01	; 1
    4a34:	cd cf       	rjmp	.-102    	; 0x49d0 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4a36:	01 50       	subi	r16, 0x01	; 1
    4a38:	11 09       	sbc	r17, r1
    4a3a:	e9 f2       	breq	.-70     	; 0x49f6 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    4a3c:	61 e0       	ldi	r22, 0x01	; 1
    4a3e:	70 e0       	ldi	r23, 0x00	; 0
    4a40:	80 e0       	ldi	r24, 0x00	; 0
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    4a48:	ac cf       	rjmp	.-168    	; 0x49a2 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    4a4a:	f7 01       	movw	r30, r14
    4a4c:	ec 0f       	add	r30, r28
    4a4e:	fd 1f       	adc	r31, r29
    4a50:	16 86       	std	Z+14, r1	; 0x0e
    4a52:	8c 2f       	mov	r24, r28
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	1f 91       	pop	r17
    4a5a:	0f 91       	pop	r16
    4a5c:	ff 90       	pop	r15
    4a5e:	ef 90       	pop	r14
    4a60:	df 90       	pop	r13
    4a62:	cf 90       	pop	r12
    4a64:	bf 90       	pop	r11
    4a66:	af 90       	pop	r10
    4a68:	9f 90       	pop	r9
    4a6a:	08 95       	ret

00004a6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    4a6c:	0f 93       	push	r16
    4a6e:	1f 93       	push	r17
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	ec 01       	movw	r28, r24
    4a76:	8b 01       	movw	r16, r22
    4a78:	ba 01       	movw	r22, r20
    4a7a:	40 e0       	ldi	r20, 0x00	; 0
    4a7c:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    4a80:	66 ef       	ldi	r22, 0xF6	; 246
    4a82:	73 e0       	ldi	r23, 0x03	; 3
    4a84:	83 e5       	ldi	r24, 0x53	; 83
    4a86:	96 e0       	ldi	r25, 0x06	; 6
    4a88:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4a8c:	2e 96       	adiw	r28, 0x0e	; 14
    4a8e:	be 01       	movw	r22, r28
    4a90:	83 e5       	ldi	r24, 0x53	; 83
    4a92:	96 e0       	ldi	r25, 0x06	; 6
    4a94:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4a98:	b8 01       	movw	r22, r16
    4a9a:	ce 01       	movw	r24, r28
    4a9c:	0e 94 4b 33 	call	0x6696	; 0x6696 <strcmp_P>
    4aa0:	21 e0       	ldi	r18, 0x01	; 1
    4aa2:	89 2b       	or	r24, r25
    4aa4:	09 f0       	breq	.+2      	; 0x4aa8 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	82 2f       	mov	r24, r18
    4aaa:	df 91       	pop	r29
    4aac:	cf 91       	pop	r28
    4aae:	1f 91       	pop	r17
    4ab0:	0f 91       	pop	r16
    4ab2:	08 95       	ret

00004ab4 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    4ab4:	cf 93       	push	r28
    4ab6:	df 93       	push	r29
    4ab8:	ec 01       	movw	r28, r24
    4aba:	fc 01       	movw	r30, r24
    4abc:	e8 5e       	subi	r30, 0xE8	; 232
    4abe:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac0:	66 23       	and	r22, r22
    4ac2:	31 f0       	breq	.+12     	; 0x4ad0 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    4ac4:	62 e2       	ldi	r22, 0x22	; 34
    4ac6:	80 81       	ld	r24, Z
    4ac8:	91 81       	ldd	r25, Z+1	; 0x01
    4aca:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN5Print7printlnEc>
    4ace:	04 c0       	rjmp	.+8      	; 0x4ad8 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    4ad0:	80 81       	ld	r24, Z
    4ad2:	91 81       	ldd	r25, Z+1	; 0x01
    4ad4:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
    4ad8:	fe 01       	movw	r30, r28
    4ada:	ea 5e       	subi	r30, 0xEA	; 234
    4adc:	fe 4f       	sbci	r31, 0xFE	; 254
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	40 e1       	ldi	r20, 0x10	; 16
    4ae4:	57 e2       	ldi	r21, 0x27	; 39
    4ae6:	ce 01       	movw	r24, r28
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004af0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    4af0:	0f 93       	push	r16
    4af2:	1f 93       	push	r17
    4af4:	cf 93       	push	r28
    4af6:	df 93       	push	r29
    4af8:	ec 01       	movw	r28, r24
    4afa:	8a 01       	movw	r16, r20
    4afc:	41 e0       	ldi	r20, 0x01	; 1
    4afe:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4b02:	fe 01       	movw	r30, r28
    4b04:	e8 5e       	subi	r30, 0xE8	; 232
    4b06:	fe 4f       	sbci	r31, 0xFE	; 254
    4b08:	b8 01       	movw	r22, r16
    4b0a:	80 81       	ld	r24, Z
    4b0c:	91 81       	ldd	r25, Z+1	; 0x01
    4b0e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    4b12:	61 e0       	ldi	r22, 0x01	; 1
    4b14:	ce 01       	movw	r24, r28
    4b16:	df 91       	pop	r29
    4b18:	cf 91       	pop	r28
    4b1a:	1f 91       	pop	r17
    4b1c:	0f 91       	pop	r16
    4b1e:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004b22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    4b22:	0f 93       	push	r16
    4b24:	1f 93       	push	r17
    4b26:	cf 93       	push	r28
    4b28:	df 93       	push	r29
    4b2a:	ec 01       	movw	r28, r24
    4b2c:	8a 01       	movw	r16, r20
    4b2e:	41 e0       	ldi	r20, 0x01	; 1
    4b30:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4b34:	fe 01       	movw	r30, r28
    4b36:	e8 5e       	subi	r30, 0xE8	; 232
    4b38:	fe 4f       	sbci	r31, 0xFE	; 254
    4b3a:	b8 01       	movw	r22, r16
    4b3c:	80 81       	ld	r24, Z
    4b3e:	91 81       	ldd	r25, Z+1	; 0x01
    4b40:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4b44:	61 e0       	ldi	r22, 0x01	; 1
    4b46:	ce 01       	movw	r24, r28
    4b48:	df 91       	pop	r29
    4b4a:	cf 91       	pop	r28
    4b4c:	1f 91       	pop	r17
    4b4e:	0f 91       	pop	r16
    4b50:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004b54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    4b54:	cf 92       	push	r12
    4b56:	df 92       	push	r13
    4b58:	ef 92       	push	r14
    4b5a:	ff 92       	push	r15
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	ec 01       	movw	r28, r24
    4b62:	69 01       	movw	r12, r18
    4b64:	7a 01       	movw	r14, r20
    4b66:	40 e0       	ldi	r20, 0x00	; 0
    4b68:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	e8 5e       	subi	r30, 0xE8	; 232
    4b70:	fe 4f       	sbci	r31, 0xFE	; 254
    4b72:	2a e0       	ldi	r18, 0x0A	; 10
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	b7 01       	movw	r22, r14
    4b78:	a6 01       	movw	r20, r12
    4b7a:	80 81       	ld	r24, Z
    4b7c:	91 81       	ldd	r25, Z+1	; 0x01
    4b7e:	0e 94 3c 21 	call	0x4278	; 0x4278 <_ZN5Print5printEli>
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	ce 01       	movw	r24, r28
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	ff 90       	pop	r15
    4b8c:	ef 90       	pop	r14
    4b8e:	df 90       	pop	r13
    4b90:	cf 90       	pop	r12
    4b92:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004b96 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    4b96:	4f 92       	push	r4
    4b98:	5f 92       	push	r5
    4b9a:	6f 92       	push	r6
    4b9c:	7f 92       	push	r7
    4b9e:	8f 92       	push	r8
    4ba0:	9f 92       	push	r9
    4ba2:	af 92       	push	r10
    4ba4:	bf 92       	push	r11
    4ba6:	ef 92       	push	r14
    4ba8:	ff 92       	push	r15
    4baa:	0f 93       	push	r16
    4bac:	1f 93       	push	r17
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	7c 01       	movw	r14, r24
    4bb4:	2a 01       	movw	r4, r20
    4bb6:	3b 01       	movw	r6, r22
    4bb8:	48 01       	movw	r8, r16
    4bba:	59 01       	movw	r10, r18
    4bbc:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    4bc0:	64 e9       	ldi	r22, 0x94	; 148
    4bc2:	74 e0       	ldi	r23, 0x04	; 4
    4bc4:	83 e5       	ldi	r24, 0x53	; 83
    4bc6:	96 e0       	ldi	r25, 0x06	; 6
    4bc8:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4bcc:	67 e8       	ldi	r22, 0x87	; 135
    4bce:	74 e0       	ldi	r23, 0x04	; 4
    4bd0:	83 e5       	ldi	r24, 0x53	; 83
    4bd2:	96 e0       	ldi	r25, 0x06	; 6
    4bd4:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4bd8:	2a e0       	ldi	r18, 0x0A	; 10
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	b3 01       	movw	r22, r6
    4bde:	a2 01       	movw	r20, r4
    4be0:	83 e5       	ldi	r24, 0x53	; 83
    4be2:	96 e0       	ldi	r25, 0x06	; 6
    4be4:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <_ZN5Print5printEmi>
    4be8:	6c e2       	ldi	r22, 0x2C	; 44
    4bea:	83 e5       	ldi	r24, 0x53	; 83
    4bec:	96 e0       	ldi	r25, 0x06	; 6
    4bee:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEc>
    4bf2:	2a e0       	ldi	r18, 0x0A	; 10
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	b5 01       	movw	r22, r10
    4bf8:	a4 01       	movw	r20, r8
    4bfa:	83 e5       	ldi	r24, 0x53	; 83
    4bfc:	96 e0       	ldi	r25, 0x06	; 6
    4bfe:	0e 94 2a 21 	call	0x4254	; 0x4254 <_ZN5Print7printlnEmi>
    4c02:	e7 01       	movw	r28, r14
    4c04:	c8 5e       	subi	r28, 0xE8	; 232
    4c06:	de 4f       	sbci	r29, 0xFE	; 254
    4c08:	6a e7       	ldi	r22, 0x7A	; 122
    4c0a:	74 e0       	ldi	r23, 0x04	; 4
    4c0c:	88 81       	ld	r24, Y
    4c0e:	99 81       	ldd	r25, Y+1	; 0x01
    4c10:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4c14:	2a e0       	ldi	r18, 0x0A	; 10
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	b3 01       	movw	r22, r6
    4c1a:	a2 01       	movw	r20, r4
    4c1c:	88 81       	ld	r24, Y
    4c1e:	99 81       	ldd	r25, Y+1	; 0x01
    4c20:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <_ZN5Print5printEmi>
    4c24:	6c ea       	ldi	r22, 0xAC	; 172
    4c26:	72 e0       	ldi	r23, 0x02	; 2
    4c28:	88 81       	ld	r24, Y
    4c2a:	99 81       	ldd	r25, Y+1	; 0x01
    4c2c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    4c30:	2a e0       	ldi	r18, 0x0A	; 10
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	b5 01       	movw	r22, r10
    4c36:	a4 01       	movw	r20, r8
    4c38:	88 81       	ld	r24, Y
    4c3a:	99 81       	ldd	r25, Y+1	; 0x01
    4c3c:	0e 94 2a 21 	call	0x4254	; 0x4254 <_ZN5Print7printlnEmi>
    4c40:	40 e1       	ldi	r20, 0x10	; 16
    4c42:	57 e2       	ldi	r21, 0x27	; 39
    4c44:	61 e7       	ldi	r22, 0x71	; 113
    4c46:	74 e0       	ldi	r23, 0x04	; 4
    4c48:	c7 01       	movw	r24, r14
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	ff 90       	pop	r15
    4c54:	ef 90       	pop	r14
    4c56:	bf 90       	pop	r11
    4c58:	af 90       	pop	r10
    4c5a:	9f 90       	pop	r9
    4c5c:	8f 90       	pop	r8
    4c5e:	7f 90       	pop	r7
    4c60:	6f 90       	pop	r6
    4c62:	5f 90       	pop	r5
    4c64:	4f 90       	pop	r4
    4c66:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004c6a <_ZN13Adafruit_FONA8getReplyEPcj>:
    4c6a:	ef 92       	push	r14
    4c6c:	ff 92       	push	r15
    4c6e:	0f 93       	push	r16
    4c70:	1f 93       	push	r17
    4c72:	cf 93       	push	r28
    4c74:	df 93       	push	r29
    4c76:	ec 01       	movw	r28, r24
    4c78:	8b 01       	movw	r16, r22
    4c7a:	7a 01       	movw	r14, r20
    4c7c:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    4c80:	61 ee       	ldi	r22, 0xE1	; 225
    4c82:	73 e0       	ldi	r23, 0x03	; 3
    4c84:	83 e5       	ldi	r24, 0x53	; 83
    4c86:	96 e0       	ldi	r25, 0x06	; 6
    4c88:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4c8c:	b8 01       	movw	r22, r16
    4c8e:	83 e5       	ldi	r24, 0x53	; 83
    4c90:	96 e0       	ldi	r25, 0x06	; 6
    4c92:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4c96:	fe 01       	movw	r30, r28
    4c98:	e8 5e       	subi	r30, 0xE8	; 232
    4c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c9c:	b8 01       	movw	r22, r16
    4c9e:	80 81       	ld	r24, Z
    4ca0:	91 81       	ldd	r25, Z+1	; 0x01
    4ca2:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4ca6:	40 e0       	ldi	r20, 0x00	; 0
    4ca8:	b7 01       	movw	r22, r14
    4caa:	ce 01       	movw	r24, r28
    4cac:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    4cb0:	18 2f       	mov	r17, r24
    4cb2:	6a ed       	ldi	r22, 0xDA	; 218
    4cb4:	73 e0       	ldi	r23, 0x03	; 3
    4cb6:	83 e5       	ldi	r24, 0x53	; 83
    4cb8:	96 e0       	ldi	r25, 0x06	; 6
    4cba:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4cbe:	be 01       	movw	r22, r28
    4cc0:	62 5f       	subi	r22, 0xF2	; 242
    4cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc4:	83 e5       	ldi	r24, 0x53	; 83
    4cc6:	96 e0       	ldi	r25, 0x06	; 6
    4cc8:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4ccc:	81 2f       	mov	r24, r17
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	1f 91       	pop	r17
    4cd4:	0f 91       	pop	r16
    4cd6:	ff 90       	pop	r15
    4cd8:	ef 90       	pop	r14
    4cda:	08 95       	ret

00004cdc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    4cdc:	ef 92       	push	r14
    4cde:	ff 92       	push	r15
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	ec 01       	movw	r28, r24
    4cea:	8b 01       	movw	r16, r22
    4cec:	7a 01       	movw	r14, r20
    4cee:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    4cf2:	63 ed       	ldi	r22, 0xD3	; 211
    4cf4:	73 e0       	ldi	r23, 0x03	; 3
    4cf6:	83 e5       	ldi	r24, 0x53	; 83
    4cf8:	96 e0       	ldi	r25, 0x06	; 6
    4cfa:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4cfe:	b8 01       	movw	r22, r16
    4d00:	83 e5       	ldi	r24, 0x53	; 83
    4d02:	96 e0       	ldi	r25, 0x06	; 6
    4d04:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    4d08:	fe 01       	movw	r30, r28
    4d0a:	e8 5e       	subi	r30, 0xE8	; 232
    4d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d0e:	b8 01       	movw	r22, r16
    4d10:	80 81       	ld	r24, Z
    4d12:	91 81       	ldd	r25, Z+1	; 0x01
    4d14:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    4d18:	40 e0       	ldi	r20, 0x00	; 0
    4d1a:	b7 01       	movw	r22, r14
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    4d22:	18 2f       	mov	r17, r24
    4d24:	6c ec       	ldi	r22, 0xCC	; 204
    4d26:	73 e0       	ldi	r23, 0x03	; 3
    4d28:	83 e5       	ldi	r24, 0x53	; 83
    4d2a:	96 e0       	ldi	r25, 0x06	; 6
    4d2c:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4d30:	be 01       	movw	r22, r28
    4d32:	62 5f       	subi	r22, 0xF2	; 242
    4d34:	7f 4f       	sbci	r23, 0xFF	; 255
    4d36:	83 e5       	ldi	r24, 0x53	; 83
    4d38:	96 e0       	ldi	r25, 0x06	; 6
    4d3a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4d3e:	81 2f       	mov	r24, r17
    4d40:	df 91       	pop	r29
    4d42:	cf 91       	pop	r28
    4d44:	1f 91       	pop	r17
    4d46:	0f 91       	pop	r16
    4d48:	ff 90       	pop	r15
    4d4a:	ef 90       	pop	r14
    4d4c:	08 95       	ret

00004d4e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    4d4e:	8f 92       	push	r8
    4d50:	9f 92       	push	r9
    4d52:	af 92       	push	r10
    4d54:	bf 92       	push	r11
    4d56:	cf 92       	push	r12
    4d58:	df 92       	push	r13
    4d5a:	ef 92       	push	r14
    4d5c:	ff 92       	push	r15
    4d5e:	0f 93       	push	r16
    4d60:	1f 93       	push	r17
    4d62:	cf 93       	push	r28
    4d64:	df 93       	push	r29
    4d66:	ec 01       	movw	r28, r24
    4d68:	6b 01       	movw	r12, r22
    4d6a:	49 01       	movw	r8, r18
    4d6c:	5a 01       	movw	r10, r20
    4d6e:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    4d72:	65 ec       	ldi	r22, 0xC5	; 197
    4d74:	73 e0       	ldi	r23, 0x03	; 3
    4d76:	83 e5       	ldi	r24, 0x53	; 83
    4d78:	96 e0       	ldi	r25, 0x06	; 6
    4d7a:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4d7e:	b6 01       	movw	r22, r12
    4d80:	83 e5       	ldi	r24, 0x53	; 83
    4d82:	96 e0       	ldi	r25, 0x06	; 6
    4d84:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4d88:	2a e0       	ldi	r18, 0x0A	; 10
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	b5 01       	movw	r22, r10
    4d8e:	a4 01       	movw	r20, r8
    4d90:	83 e5       	ldi	r24, 0x53	; 83
    4d92:	96 e0       	ldi	r25, 0x06	; 6
    4d94:	0e 94 9d 21 	call	0x433a	; 0x433a <_ZN5Print7printlnEli>
    4d98:	7e 01       	movw	r14, r28
    4d9a:	88 ee       	ldi	r24, 0xE8	; 232
    4d9c:	e8 1a       	sub	r14, r24
    4d9e:	8e ef       	ldi	r24, 0xFE	; 254
    4da0:	f8 0a       	sbc	r15, r24
    4da2:	b6 01       	movw	r22, r12
    4da4:	f7 01       	movw	r30, r14
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4dae:	2a e0       	ldi	r18, 0x0A	; 10
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	b5 01       	movw	r22, r10
    4db4:	a4 01       	movw	r20, r8
    4db6:	f7 01       	movw	r30, r14
    4db8:	80 81       	ld	r24, Z
    4dba:	91 81       	ldd	r25, Z+1	; 0x01
    4dbc:	0e 94 9d 21 	call	0x433a	; 0x433a <_ZN5Print7printlnEli>
    4dc0:	40 e0       	ldi	r20, 0x00	; 0
    4dc2:	b8 01       	movw	r22, r16
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    4dca:	18 2f       	mov	r17, r24
    4dcc:	6e eb       	ldi	r22, 0xBE	; 190
    4dce:	73 e0       	ldi	r23, 0x03	; 3
    4dd0:	83 e5       	ldi	r24, 0x53	; 83
    4dd2:	96 e0       	ldi	r25, 0x06	; 6
    4dd4:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4dd8:	be 01       	movw	r22, r28
    4dda:	62 5f       	subi	r22, 0xF2	; 242
    4ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dde:	83 e5       	ldi	r24, 0x53	; 83
    4de0:	96 e0       	ldi	r25, 0x06	; 6
    4de2:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4de6:	81 2f       	mov	r24, r17
    4de8:	df 91       	pop	r29
    4dea:	cf 91       	pop	r28
    4dec:	1f 91       	pop	r17
    4dee:	0f 91       	pop	r16
    4df0:	ff 90       	pop	r15
    4df2:	ef 90       	pop	r14
    4df4:	df 90       	pop	r13
    4df6:	cf 90       	pop	r12
    4df8:	bf 90       	pop	r11
    4dfa:	af 90       	pop	r10
    4dfc:	9f 90       	pop	r9
    4dfe:	8f 90       	pop	r8
    4e00:	08 95       	ret

00004e02 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    4e02:	af 92       	push	r10
    4e04:	bf 92       	push	r11
    4e06:	cf 92       	push	r12
    4e08:	df 92       	push	r13
    4e0a:	ef 92       	push	r14
    4e0c:	ff 92       	push	r15
    4e0e:	0f 93       	push	r16
    4e10:	1f 93       	push	r17
    4e12:	cf 93       	push	r28
    4e14:	df 93       	push	r29
    4e16:	ec 01       	movw	r28, r24
    4e18:	6b 01       	movw	r12, r22
    4e1a:	7a 01       	movw	r14, r20
    4e1c:	59 01       	movw	r10, r18
    4e1e:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    4e22:	67 eb       	ldi	r22, 0xB7	; 183
    4e24:	73 e0       	ldi	r23, 0x03	; 3
    4e26:	83 e5       	ldi	r24, 0x53	; 83
    4e28:	96 e0       	ldi	r25, 0x06	; 6
    4e2a:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4e2e:	b6 01       	movw	r22, r12
    4e30:	83 e5       	ldi	r24, 0x53	; 83
    4e32:	96 e0       	ldi	r25, 0x06	; 6
    4e34:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4e38:	62 e2       	ldi	r22, 0x22	; 34
    4e3a:	83 e5       	ldi	r24, 0x53	; 83
    4e3c:	96 e0       	ldi	r25, 0x06	; 6
    4e3e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEc>
    4e42:	b7 01       	movw	r22, r14
    4e44:	83 e5       	ldi	r24, 0x53	; 83
    4e46:	96 e0       	ldi	r25, 0x06	; 6
    4e48:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4e4c:	62 e2       	ldi	r22, 0x22	; 34
    4e4e:	83 e5       	ldi	r24, 0x53	; 83
    4e50:	96 e0       	ldi	r25, 0x06	; 6
    4e52:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN5Print7printlnEc>
    4e56:	8e 01       	movw	r16, r28
    4e58:	08 5e       	subi	r16, 0xE8	; 232
    4e5a:	1e 4f       	sbci	r17, 0xFE	; 254
    4e5c:	b6 01       	movw	r22, r12
    4e5e:	f8 01       	movw	r30, r16
    4e60:	80 81       	ld	r24, Z
    4e62:	91 81       	ldd	r25, Z+1	; 0x01
    4e64:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4e68:	62 e2       	ldi	r22, 0x22	; 34
    4e6a:	f8 01       	movw	r30, r16
    4e6c:	80 81       	ld	r24, Z
    4e6e:	91 81       	ldd	r25, Z+1	; 0x01
    4e70:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEc>
    4e74:	b7 01       	movw	r22, r14
    4e76:	f8 01       	movw	r30, r16
    4e78:	80 81       	ld	r24, Z
    4e7a:	91 81       	ldd	r25, Z+1	; 0x01
    4e7c:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4e80:	62 e2       	ldi	r22, 0x22	; 34
    4e82:	f8 01       	movw	r30, r16
    4e84:	80 81       	ld	r24, Z
    4e86:	91 81       	ldd	r25, Z+1	; 0x01
    4e88:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN5Print7printlnEc>
    4e8c:	40 e0       	ldi	r20, 0x00	; 0
    4e8e:	b5 01       	movw	r22, r10
    4e90:	ce 01       	movw	r24, r28
    4e92:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    4e96:	18 2f       	mov	r17, r24
    4e98:	60 eb       	ldi	r22, 0xB0	; 176
    4e9a:	73 e0       	ldi	r23, 0x03	; 3
    4e9c:	83 e5       	ldi	r24, 0x53	; 83
    4e9e:	96 e0       	ldi	r25, 0x06	; 6
    4ea0:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    4ea4:	be 01       	movw	r22, r28
    4ea6:	62 5f       	subi	r22, 0xF2	; 242
    4ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eaa:	83 e5       	ldi	r24, 0x53	; 83
    4eac:	96 e0       	ldi	r25, 0x06	; 6
    4eae:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    4eb2:	81 2f       	mov	r24, r17
    4eb4:	df 91       	pop	r29
    4eb6:	cf 91       	pop	r28
    4eb8:	1f 91       	pop	r17
    4eba:	0f 91       	pop	r16
    4ebc:	ff 90       	pop	r15
    4ebe:	ef 90       	pop	r14
    4ec0:	df 90       	pop	r13
    4ec2:	cf 90       	pop	r12
    4ec4:	bf 90       	pop	r11
    4ec6:	af 90       	pop	r10
    4ec8:	08 95       	ret

00004eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	ec 01       	movw	r28, r24
    4ed4:	8a 01       	movw	r16, r20
    4ed6:	a9 01       	movw	r20, r18
    4ed8:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4edc:	88 23       	and	r24, r24
    4ede:	41 f0       	breq	.+16     	; 0x4ef0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    4ee0:	b8 01       	movw	r22, r16
    4ee2:	ce 01       	movw	r24, r28
    4ee4:	0e 96       	adiw	r24, 0x0e	; 14
    4ee6:	0e 94 4b 33 	call	0x6696	; 0x6696 <strcmp_P>
    4eea:	21 e0       	ldi	r18, 0x01	; 1
    4eec:	89 2b       	or	r24, r25
    4eee:	09 f0       	breq	.+2      	; 0x4ef2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    4ef0:	20 e0       	ldi	r18, 0x00	; 0
    4ef2:	82 2f       	mov	r24, r18
    4ef4:	df 91       	pop	r29
    4ef6:	cf 91       	pop	r28
    4ef8:	1f 91       	pop	r17
    4efa:	0f 91       	pop	r16
    4efc:	08 95       	ret

00004efe <_ZN13Adafruit_FONA5beginER6Stream>:
    4efe:	cf 92       	push	r12
    4f00:	df 92       	push	r13
    4f02:	ef 92       	push	r14
    4f04:	ff 92       	push	r15
    4f06:	0f 93       	push	r16
    4f08:	1f 93       	push	r17
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	ec 01       	movw	r28, r24
    4f10:	7c 01       	movw	r14, r24
    4f12:	88 ee       	ldi	r24, 0xE8	; 232
    4f14:	e8 1a       	sub	r14, r24
    4f16:	8e ef       	ldi	r24, 0xFE	; 254
    4f18:	f8 0a       	sbc	r15, r24
    4f1a:	d7 01       	movw	r26, r14
    4f1c:	6d 93       	st	X+, r22
    4f1e:	7c 93       	st	X, r23
    4f20:	61 e0       	ldi	r22, 0x01	; 1
    4f22:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f24:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
    4f28:	61 e0       	ldi	r22, 0x01	; 1
    4f2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f2c:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
    4f30:	6a e0       	ldi	r22, 0x0A	; 10
    4f32:	70 e0       	ldi	r23, 0x00	; 0
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    4f3c:	60 e0       	ldi	r22, 0x00	; 0
    4f3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f40:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
    4f44:	64 e6       	ldi	r22, 0x64	; 100
    4f46:	70 e0       	ldi	r23, 0x00	; 0
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    4f50:	61 e0       	ldi	r22, 0x01	; 1
    4f52:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f54:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
    4f58:	61 ec       	ldi	r22, 0xC1	; 193
    4f5a:	76 e0       	ldi	r23, 0x06	; 6
    4f5c:	83 e5       	ldi	r24, 0x53	; 83
    4f5e:	96 e0       	ldi	r25, 0x06	; 6
    4f60:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    4f64:	8e e0       	ldi	r24, 0x0E	; 14
    4f66:	c8 2e       	mov	r12, r24
    4f68:	d1 2c       	mov	r13, r1
    4f6a:	8e 01       	movw	r16, r28
    4f6c:	0a 5e       	subi	r16, 0xEA	; 234
    4f6e:	1e 4f       	sbci	r17, 0xFE	; 254
    4f70:	f7 01       	movw	r30, r14
    4f72:	80 81       	ld	r24, Z
    4f74:	91 81       	ldd	r25, Z+1	; 0x01
    4f76:	dc 01       	movw	r26, r24
    4f78:	ed 91       	ld	r30, X+
    4f7a:	fc 91       	ld	r31, X
    4f7c:	04 80       	ldd	r0, Z+4	; 0x04
    4f7e:	f5 81       	ldd	r31, Z+5	; 0x05
    4f80:	e0 2d       	mov	r30, r0
    4f82:	09 95       	icall
    4f84:	89 2b       	or	r24, r25
    4f86:	89 f0       	breq	.+34     	; 0x4faa <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    4f88:	6c ea       	ldi	r22, 0xAC	; 172
    4f8a:	76 e0       	ldi	r23, 0x06	; 6
    4f8c:	83 e5       	ldi	r24, 0x53	; 83
    4f8e:	96 e0       	ldi	r25, 0x06	; 6
    4f90:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    4f94:	f7 01       	movw	r30, r14
    4f96:	80 81       	ld	r24, Z
    4f98:	91 81       	ldd	r25, Z+1	; 0x01
    4f9a:	dc 01       	movw	r26, r24
    4f9c:	ed 91       	ld	r30, X+
    4f9e:	fc 91       	ld	r31, X
    4fa0:	06 80       	ldd	r0, Z+6	; 0x06
    4fa2:	f7 81       	ldd	r31, Z+7	; 0x07
    4fa4:	e0 2d       	mov	r30, r0
    4fa6:	09 95       	icall
    4fa8:	e3 cf       	rjmp	.-58     	; 0x4f70 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    4faa:	f8 01       	movw	r30, r16
    4fac:	40 81       	ld	r20, Z
    4fae:	51 81       	ldd	r21, Z+1	; 0x01
    4fb0:	24 ef       	ldi	r18, 0xF4	; 244
    4fb2:	31 e0       	ldi	r19, 0x01	; 1
    4fb4:	69 ea       	ldi	r22, 0xA9	; 169
    4fb6:	76 e0       	ldi	r23, 0x06	; 6
    4fb8:	ce 01       	movw	r24, r28
    4fba:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4fbe:	81 11       	cpse	r24, r1
    4fc0:	63 c0       	rjmp	.+198    	; 0x5088 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    4fc2:	d7 01       	movw	r26, r14
    4fc4:	8d 91       	ld	r24, X+
    4fc6:	9c 91       	ld	r25, X
    4fc8:	dc 01       	movw	r26, r24
    4fca:	ed 91       	ld	r30, X+
    4fcc:	fc 91       	ld	r31, X
    4fce:	04 80       	ldd	r0, Z+4	; 0x04
    4fd0:	f5 81       	ldd	r31, Z+5	; 0x05
    4fd2:	e0 2d       	mov	r30, r0
    4fd4:	09 95       	icall
    4fd6:	89 2b       	or	r24, r25
    4fd8:	59 f0       	breq	.+22     	; 0x4ff0 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    4fda:	f7 01       	movw	r30, r14
    4fdc:	80 81       	ld	r24, Z
    4fde:	91 81       	ldd	r25, Z+1	; 0x01
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	ed 91       	ld	r30, X+
    4fe4:	fc 91       	ld	r31, X
    4fe6:	06 80       	ldd	r0, Z+6	; 0x06
    4fe8:	f7 81       	ldd	r31, Z+7	; 0x07
    4fea:	e0 2d       	mov	r30, r0
    4fec:	09 95       	icall
    4fee:	e9 cf       	rjmp	.-46     	; 0x4fc2 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    4ff0:	24 ef       	ldi	r18, 0xF4	; 244
    4ff2:	31 e0       	ldi	r19, 0x01	; 1
    4ff4:	46 ea       	ldi	r20, 0xA6	; 166
    4ff6:	56 e0       	ldi	r21, 0x06	; 6
    4ff8:	63 ea       	ldi	r22, 0xA3	; 163
    4ffa:	76 e0       	ldi	r23, 0x06	; 6
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5002:	81 11       	cpse	r24, r1
    5004:	41 c0       	rjmp	.+130    	; 0x5088 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    5006:	64 ef       	ldi	r22, 0xF4	; 244
    5008:	71 e0       	ldi	r23, 0x01	; 1
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    5012:	b1 e0       	ldi	r27, 0x01	; 1
    5014:	cb 1a       	sub	r12, r27
    5016:	d1 08       	sbc	r13, r1
    5018:	09 f0       	breq	.+2      	; 0x501c <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    501a:	aa cf       	rjmp	.-172    	; 0x4f70 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    501c:	61 e7       	ldi	r22, 0x71	; 113
    501e:	76 e0       	ldi	r23, 0x06	; 6
    5020:	83 e5       	ldi	r24, 0x53	; 83
    5022:	96 e0       	ldi	r25, 0x06	; 6
    5024:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN5Print7printlnEPK19__FlashStringHelper>
    5028:	d8 01       	movw	r26, r16
    502a:	4d 91       	ld	r20, X+
    502c:	5c 91       	ld	r21, X
    502e:	24 ef       	ldi	r18, 0xF4	; 244
    5030:	31 e0       	ldi	r19, 0x01	; 1
    5032:	6e e6       	ldi	r22, 0x6E	; 110
    5034:	76 e0       	ldi	r23, 0x06	; 6
    5036:	ce 01       	movw	r24, r28
    5038:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    503c:	64 e6       	ldi	r22, 0x64	; 100
    503e:	70 e0       	ldi	r23, 0x00	; 0
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    5048:	f8 01       	movw	r30, r16
    504a:	40 81       	ld	r20, Z
    504c:	51 81       	ldd	r21, Z+1	; 0x01
    504e:	24 ef       	ldi	r18, 0xF4	; 244
    5050:	31 e0       	ldi	r19, 0x01	; 1
    5052:	6b e6       	ldi	r22, 0x6B	; 107
    5054:	76 e0       	ldi	r23, 0x06	; 6
    5056:	ce 01       	movw	r24, r28
    5058:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    505c:	64 e6       	ldi	r22, 0x64	; 100
    505e:	70 e0       	ldi	r23, 0x00	; 0
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    5068:	d8 01       	movw	r26, r16
    506a:	4d 91       	ld	r20, X+
    506c:	5c 91       	ld	r21, X
    506e:	24 ef       	ldi	r18, 0xF4	; 244
    5070:	31 e0       	ldi	r19, 0x01	; 1
    5072:	68 e6       	ldi	r22, 0x68	; 104
    5074:	76 e0       	ldi	r23, 0x06	; 6
    5076:	ce 01       	movw	r24, r28
    5078:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    507c:	64 e6       	ldi	r22, 0x64	; 100
    507e:	70 e0       	ldi	r23, 0x00	; 0
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    5088:	f8 01       	movw	r30, r16
    508a:	40 81       	ld	r20, Z
    508c:	51 81       	ldd	r21, Z+1	; 0x01
    508e:	24 ef       	ldi	r18, 0xF4	; 244
    5090:	31 e0       	ldi	r19, 0x01	; 1
    5092:	63 e6       	ldi	r22, 0x63	; 99
    5094:	76 e0       	ldi	r23, 0x06	; 6
    5096:	ce 01       	movw	r24, r28
    5098:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    509c:	64 e6       	ldi	r22, 0x64	; 100
    509e:	70 e0       	ldi	r23, 0x00	; 0
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    50a8:	d8 01       	movw	r26, r16
    50aa:	4d 91       	ld	r20, X+
    50ac:	5c 91       	ld	r21, X
    50ae:	24 ef       	ldi	r18, 0xF4	; 244
    50b0:	31 e0       	ldi	r19, 0x01	; 1
    50b2:	6e e5       	ldi	r22, 0x5E	; 94
    50b4:	76 e0       	ldi	r23, 0x06	; 6
    50b6:	ce 01       	movw	r24, r28
    50b8:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    50bc:	d8 2e       	mov	r13, r24
    50be:	88 23       	and	r24, r24
    50c0:	09 f4       	brne	.+2      	; 0x50c4 <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    50c2:	97 c0       	rjmp	.+302    	; 0x51f2 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    50c4:	f8 01       	movw	r30, r16
    50c6:	40 81       	ld	r20, Z
    50c8:	51 81       	ldd	r21, Z+1	; 0x01
    50ca:	24 ef       	ldi	r18, 0xF4	; 244
    50cc:	31 e0       	ldi	r19, 0x01	; 1
    50ce:	64 e5       	ldi	r22, 0x54	; 84
    50d0:	76 e0       	ldi	r23, 0x06	; 6
    50d2:	ce 01       	movw	r24, r28
    50d4:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    50d8:	64 e6       	ldi	r22, 0x64	; 100
    50da:	70 e0       	ldi	r23, 0x00	; 0
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	0e 94 2a 22 	call	0x4454	; 0x4454 <delay>
    50e4:	ce 01       	movw	r24, r28
    50e6:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    50ea:	6d e4       	ldi	r22, 0x4D	; 77
    50ec:	76 e0       	ldi	r23, 0x06	; 6
    50ee:	83 e5       	ldi	r24, 0x53	; 83
    50f0:	96 e0       	ldi	r25, 0x06	; 6
    50f2:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    50f6:	66 eb       	ldi	r22, 0xB6	; 182
    50f8:	72 e0       	ldi	r23, 0x02	; 2
    50fa:	83 e5       	ldi	r24, 0x53	; 83
    50fc:	96 e0       	ldi	r25, 0x06	; 6
    50fe:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    5102:	66 eb       	ldi	r22, 0xB6	; 182
    5104:	72 e0       	ldi	r23, 0x02	; 2
    5106:	d7 01       	movw	r26, r14
    5108:	8d 91       	ld	r24, X+
    510a:	9c 91       	ld	r25, X
    510c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    5110:	41 e0       	ldi	r20, 0x01	; 1
    5112:	64 ef       	ldi	r22, 0xF4	; 244
    5114:	71 e0       	ldi	r23, 0x01	; 1
    5116:	ce 01       	movw	r24, r28
    5118:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    511c:	66 e4       	ldi	r22, 0x46	; 70
    511e:	76 e0       	ldi	r23, 0x06	; 6
    5120:	83 e5       	ldi	r24, 0x53	; 83
    5122:	96 e0       	ldi	r25, 0x06	; 6
    5124:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    5128:	8e 01       	movw	r16, r28
    512a:	02 5f       	subi	r16, 0xF2	; 242
    512c:	1f 4f       	sbci	r17, 0xFF	; 255
    512e:	b8 01       	movw	r22, r16
    5130:	83 e5       	ldi	r24, 0x53	; 83
    5132:	96 e0       	ldi	r25, 0x06	; 6
    5134:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    5138:	6b e3       	ldi	r22, 0x3B	; 59
    513a:	76 e0       	ldi	r23, 0x06	; 6
    513c:	c8 01       	movw	r24, r16
    513e:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    5142:	89 2b       	or	r24, r25
    5144:	11 f0       	breq	.+4      	; 0x514a <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    5146:	83 e0       	ldi	r24, 0x03	; 3
    5148:	23 c0       	rjmp	.+70     	; 0x5190 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    514a:	60 e3       	ldi	r22, 0x30	; 48
    514c:	76 e0       	ldi	r23, 0x06	; 6
    514e:	c8 01       	movw	r24, r16
    5150:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    5154:	89 2b       	or	r24, r25
    5156:	11 f0       	breq	.+4      	; 0x515c <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    5158:	82 e0       	ldi	r24, 0x02	; 2
    515a:	1a c0       	rjmp	.+52     	; 0x5190 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    515c:	65 e2       	ldi	r22, 0x25	; 37
    515e:	76 e0       	ldi	r23, 0x06	; 6
    5160:	c8 01       	movw	r24, r16
    5162:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    5166:	89 2b       	or	r24, r25
    5168:	11 f0       	breq	.+4      	; 0x516e <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	11 c0       	rjmp	.+34     	; 0x5190 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    516e:	65 e1       	ldi	r22, 0x15	; 21
    5170:	76 e0       	ldi	r23, 0x06	; 6
    5172:	c8 01       	movw	r24, r16
    5174:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    5178:	89 2b       	or	r24, r25
    517a:	11 f0       	breq	.+4      	; 0x5180 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    517c:	84 e0       	ldi	r24, 0x04	; 4
    517e:	08 c0       	rjmp	.+16     	; 0x5190 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    5180:	65 e0       	ldi	r22, 0x05	; 5
    5182:	76 e0       	ldi	r23, 0x06	; 6
    5184:	c8 01       	movw	r24, r16
    5186:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    518a:	89 2b       	or	r24, r25
    518c:	11 f0       	breq	.+4      	; 0x5192 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    518e:	85 e0       	ldi	r24, 0x05	; 5
    5190:	8d 87       	std	Y+13, r24	; 0x0d
    5192:	8d 85       	ldd	r24, Y+13	; 0x0d
    5194:	81 30       	cpi	r24, 0x01	; 1
    5196:	69 f5       	brne	.+90     	; 0x51f2 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    5198:	6e ef       	ldi	r22, 0xFE	; 254
    519a:	75 e0       	ldi	r23, 0x05	; 5
    519c:	83 e5       	ldi	r24, 0x53	; 83
    519e:	96 e0       	ldi	r25, 0x06	; 6
    51a0:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    51a4:	6a eb       	ldi	r22, 0xBA	; 186
    51a6:	72 e0       	ldi	r23, 0x02	; 2
    51a8:	83 e5       	ldi	r24, 0x53	; 83
    51aa:	96 e0       	ldi	r25, 0x06	; 6
    51ac:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    51b0:	6a eb       	ldi	r22, 0xBA	; 186
    51b2:	72 e0       	ldi	r23, 0x02	; 2
    51b4:	f7 01       	movw	r30, r14
    51b6:	80 81       	ld	r24, Z
    51b8:	91 81       	ldd	r25, Z+1	; 0x01
    51ba:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    51be:	41 e0       	ldi	r20, 0x01	; 1
    51c0:	64 ef       	ldi	r22, 0xF4	; 244
    51c2:	71 e0       	ldi	r23, 0x01	; 1
    51c4:	ce 01       	movw	r24, r28
    51c6:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    51ca:	67 ef       	ldi	r22, 0xF7	; 247
    51cc:	75 e0       	ldi	r23, 0x05	; 5
    51ce:	83 e5       	ldi	r24, 0x53	; 83
    51d0:	96 e0       	ldi	r25, 0x06	; 6
    51d2:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    51d6:	b8 01       	movw	r22, r16
    51d8:	83 e5       	ldi	r24, 0x53	; 83
    51da:	96 e0       	ldi	r25, 0x06	; 6
    51dc:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    51e0:	6f ee       	ldi	r22, 0xEF	; 239
    51e2:	75 e0       	ldi	r23, 0x05	; 5
    51e4:	c8 01       	movw	r24, r16
    51e6:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    51ea:	89 2b       	or	r24, r25
    51ec:	11 f0       	breq	.+4      	; 0x51f2 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    51ee:	86 e0       	ldi	r24, 0x06	; 6
    51f0:	8d 87       	std	Y+13, r24	; 0x0d
    51f2:	8d 2d       	mov	r24, r13
    51f4:	df 91       	pop	r29
    51f6:	cf 91       	pop	r28
    51f8:	1f 91       	pop	r17
    51fa:	0f 91       	pop	r16
    51fc:	ff 90       	pop	r15
    51fe:	ef 90       	pop	r14
    5200:	df 90       	pop	r13
    5202:	cf 90       	pop	r12
    5204:	08 95       	ret

00005206 <_ZN13Adafruit_FONA9HTTP_initEv>:
    5206:	fc 01       	movw	r30, r24
    5208:	ea 5e       	subi	r30, 0xEA	; 234
    520a:	fe 4f       	sbci	r31, 0xFE	; 254
    520c:	40 81       	ld	r20, Z
    520e:	51 81       	ldd	r21, Z+1	; 0x01
    5210:	24 ef       	ldi	r18, 0xF4	; 244
    5212:	31 e0       	ldi	r19, 0x01	; 1
    5214:	61 ed       	ldi	r22, 0xD1	; 209
    5216:	74 e0       	ldi	r23, 0x04	; 4
    5218:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000521c <_ZN13Adafruit_FONA9HTTP_termEv>:
    521c:	fc 01       	movw	r30, r24
    521e:	ea 5e       	subi	r30, 0xEA	; 234
    5220:	fe 4f       	sbci	r31, 0xFE	; 254
    5222:	40 81       	ld	r20, Z
    5224:	51 81       	ldd	r21, Z+1	; 0x01
    5226:	24 ef       	ldi	r18, 0xF4	; 244
    5228:	31 e0       	ldi	r19, 0x01	; 1
    522a:	65 ec       	ldi	r22, 0xC5	; 197
    522c:	74 e0       	ldi	r23, 0x04	; 4
    522e:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00005232 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    5232:	0c 94 0e 29 	jmp	0x521c	; 0x521c <_ZN13Adafruit_FONA9HTTP_termEv>

00005236 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    5236:	0f 93       	push	r16
    5238:	1f 93       	push	r17
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	ec 01       	movw	r28, r24
    5240:	8a 01       	movw	r16, r20
    5242:	a9 01       	movw	r20, r18
    5244:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <_ZN13Adafruit_FONA8getReplyEPcj>
    5248:	88 23       	and	r24, r24
    524a:	41 f0       	breq	.+16     	; 0x525c <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    524c:	b8 01       	movw	r22, r16
    524e:	ce 01       	movw	r24, r28
    5250:	0e 96       	adiw	r24, 0x0e	; 14
    5252:	0e 94 4b 33 	call	0x6696	; 0x6696 <strcmp_P>
    5256:	21 e0       	ldi	r18, 0x01	; 1
    5258:	89 2b       	or	r24, r25
    525a:	09 f0       	breq	.+2      	; 0x525e <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    525c:	20 e0       	ldi	r18, 0x00	; 0
    525e:	82 2f       	mov	r24, r18
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	08 95       	ret

0000526a <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    526a:	af 92       	push	r10
    526c:	bf 92       	push	r11
    526e:	cf 92       	push	r12
    5270:	df 92       	push	r13
    5272:	ef 92       	push	r14
    5274:	ff 92       	push	r15
    5276:	0f 93       	push	r16
    5278:	1f 93       	push	r17
    527a:	cf 93       	push	r28
    527c:	df 93       	push	r29
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
    5282:	6e 97       	sbiw	r28, 0x1e	; 30
    5284:	0f b6       	in	r0, 0x3f	; 63
    5286:	f8 94       	cli
    5288:	de bf       	out	0x3e, r29	; 62
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	cd bf       	out	0x3d, r28	; 61
    528e:	8c 01       	movw	r16, r24
    5290:	5b 01       	movw	r10, r22
    5292:	6a 01       	movw	r12, r20
    5294:	fc 01       	movw	r30, r24
    5296:	ea 5e       	subi	r30, 0xEA	; 234
    5298:	fe 4f       	sbci	r31, 0xFE	; 254
    529a:	40 81       	ld	r20, Z
    529c:	51 81       	ldd	r21, Z+1	; 0x01
    529e:	24 ef       	ldi	r18, 0xF4	; 244
    52a0:	31 e0       	ldi	r19, 0x01	; 1
    52a2:	68 eb       	ldi	r22, 0xB8	; 184
    52a4:	75 e0       	ldi	r23, 0x05	; 5
    52a6:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    52aa:	88 23       	and	r24, r24
    52ac:	09 f4       	brne	.+2      	; 0x52b0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    52ae:	88 c0       	rjmp	.+272    	; 0x53c0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    52b0:	8a e0       	ldi	r24, 0x0A	; 10
    52b2:	e9 e6       	ldi	r30, 0x69	; 105
    52b4:	f1 e0       	ldi	r31, 0x01	; 1
    52b6:	9e 01       	movw	r18, r28
    52b8:	2f 5f       	subi	r18, 0xFF	; 255
    52ba:	3f 4f       	sbci	r19, 0xFF	; 255
    52bc:	79 01       	movw	r14, r18
    52be:	d9 01       	movw	r26, r18
    52c0:	01 90       	ld	r0, Z+
    52c2:	0d 92       	st	X+, r0
    52c4:	8a 95       	dec	r24
    52c6:	e1 f7       	brne	.-8      	; 0x52c0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    52c8:	fe 01       	movw	r30, r28
    52ca:	3b 96       	adiw	r30, 0x0b	; 11
    52cc:	84 e1       	ldi	r24, 0x14	; 20
    52ce:	df 01       	movw	r26, r30
    52d0:	1d 92       	st	X+, r1
    52d2:	8a 95       	dec	r24
    52d4:	e9 f7       	brne	.-6      	; 0x52d0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    52d6:	43 e1       	ldi	r20, 0x13	; 19
    52d8:	50 e0       	ldi	r21, 0x00	; 0
    52da:	b5 01       	movw	r22, r10
    52dc:	ce 01       	movw	r24, r28
    52de:	0a 96       	adiw	r24, 0x0a	; 10
    52e0:	0e 94 9b 33 	call	0x6736	; 0x6736 <strncpy>
    52e4:	f7 01       	movw	r30, r14
    52e6:	01 90       	ld	r0, Z+
    52e8:	00 20       	and	r0, r0
    52ea:	e9 f7       	brne	.-6      	; 0x52e6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    52ec:	31 97       	sbiw	r30, 0x01	; 1
    52ee:	82 e2       	ldi	r24, 0x22	; 34
    52f0:	80 83       	st	Z, r24
    52f2:	24 ef       	ldi	r18, 0xF4	; 244
    52f4:	31 e0       	ldi	r19, 0x01	; 1
    52f6:	45 eb       	ldi	r20, 0xB5	; 181
    52f8:	55 e0       	ldi	r21, 0x05	; 5
    52fa:	b7 01       	movw	r22, r14
    52fc:	c8 01       	movw	r24, r16
    52fe:	0e 94 1b 29 	call	0x5236	; 0x5236 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    5302:	88 23       	and	r24, r24
    5304:	09 f4       	brne	.+2      	; 0x5308 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    5306:	5c c0       	rjmp	.+184    	; 0x53c0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    5308:	62 eb       	ldi	r22, 0xB2	; 178
    530a:	75 e0       	ldi	r23, 0x05	; 5
    530c:	83 e5       	ldi	r24, 0x53	; 83
    530e:	96 e0       	ldi	r25, 0x06	; 6
    5310:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    5314:	b6 01       	movw	r22, r12
    5316:	83 e5       	ldi	r24, 0x53	; 83
    5318:	96 e0       	ldi	r25, 0x06	; 6
    531a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    531e:	b6 01       	movw	r22, r12
    5320:	78 01       	movw	r14, r16
    5322:	b8 ee       	ldi	r27, 0xE8	; 232
    5324:	eb 1a       	sub	r14, r27
    5326:	be ef       	ldi	r27, 0xFE	; 254
    5328:	fb 0a       	sbc	r15, r27
    532a:	f7 01       	movw	r30, r14
    532c:	80 81       	ld	r24, Z
    532e:	91 81       	ldd	r25, Z+1	; 0x01
    5330:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    5334:	d7 01       	movw	r26, r14
    5336:	8d 91       	ld	r24, X+
    5338:	9c 91       	ld	r25, X
    533a:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN5Print7printlnEv>
    533e:	f7 01       	movw	r30, r14
    5340:	80 81       	ld	r24, Z
    5342:	91 81       	ldd	r25, Z+1	; 0x01
    5344:	dc 01       	movw	r26, r24
    5346:	ed 91       	ld	r30, X+
    5348:	fc 91       	ld	r31, X
    534a:	01 90       	ld	r0, Z+
    534c:	f0 81       	ld	r31, Z
    534e:	e0 2d       	mov	r30, r0
    5350:	6a e1       	ldi	r22, 0x1A	; 26
    5352:	09 95       	icall
    5354:	63 ed       	ldi	r22, 0xD3	; 211
    5356:	72 e0       	ldi	r23, 0x02	; 2
    5358:	83 e5       	ldi	r24, 0x53	; 83
    535a:	96 e0       	ldi	r25, 0x06	; 6
    535c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    5360:	f8 01       	movw	r30, r16
    5362:	85 85       	ldd	r24, Z+13	; 0x0d
    5364:	84 50       	subi	r24, 0x04	; 4
    5366:	82 30       	cpi	r24, 0x02	; 2
    5368:	60 f4       	brcc	.+24     	; 0x5382 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    536a:	40 e0       	ldi	r20, 0x00	; 0
    536c:	68 ec       	ldi	r22, 0xC8	; 200
    536e:	70 e0       	ldi	r23, 0x00	; 0
    5370:	c8 01       	movw	r24, r16
    5372:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    5376:	40 e0       	ldi	r20, 0x00	; 0
    5378:	68 ec       	ldi	r22, 0xC8	; 200
    537a:	70 e0       	ldi	r23, 0x00	; 0
    537c:	c8 01       	movw	r24, r16
    537e:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	60 e1       	ldi	r22, 0x10	; 16
    5386:	77 e2       	ldi	r23, 0x27	; 39
    5388:	c8 01       	movw	r24, r16
    538a:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    538e:	78 01       	movw	r14, r16
    5390:	fe e0       	ldi	r31, 0x0E	; 14
    5392:	ef 0e       	add	r14, r31
    5394:	f1 1c       	adc	r15, r1
    5396:	66 ed       	ldi	r22, 0xD6	; 214
    5398:	72 e0       	ldi	r23, 0x02	; 2
    539a:	c7 01       	movw	r24, r14
    539c:	0e 94 aa 33 	call	0x6754	; 0x6754 <strstr>
    53a0:	89 2b       	or	r24, r25
    53a2:	71 f0       	breq	.+28     	; 0x53c0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    53a4:	40 e0       	ldi	r20, 0x00	; 0
    53a6:	68 ee       	ldi	r22, 0xE8	; 232
    53a8:	73 e0       	ldi	r23, 0x03	; 3
    53aa:	c8 01       	movw	r24, r16
    53ac:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    53b0:	69 ea       	ldi	r22, 0xA9	; 169
    53b2:	72 e0       	ldi	r23, 0x02	; 2
    53b4:	c7 01       	movw	r24, r14
    53b6:	0e 94 8b 33 	call	0x6716	; 0x6716 <strcmp>
    53ba:	21 e0       	ldi	r18, 0x01	; 1
    53bc:	89 2b       	or	r24, r25
    53be:	09 f0       	breq	.+2      	; 0x53c2 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	82 2f       	mov	r24, r18
    53c4:	6e 96       	adiw	r28, 0x1e	; 30
    53c6:	0f b6       	in	r0, 0x3f	; 63
    53c8:	f8 94       	cli
    53ca:	de bf       	out	0x3e, r29	; 62
    53cc:	0f be       	out	0x3f, r0	; 63
    53ce:	cd bf       	out	0x3d, r28	; 61
    53d0:	df 91       	pop	r29
    53d2:	cf 91       	pop	r28
    53d4:	1f 91       	pop	r17
    53d6:	0f 91       	pop	r16
    53d8:	ff 90       	pop	r15
    53da:	ef 90       	pop	r14
    53dc:	df 90       	pop	r13
    53de:	cf 90       	pop	r12
    53e0:	bf 90       	pop	r11
    53e2:	af 90       	pop	r10
    53e4:	08 95       	ret

000053e6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    53e6:	cf 92       	push	r12
    53e8:	df 92       	push	r13
    53ea:	ef 92       	push	r14
    53ec:	ff 92       	push	r15
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	ec 01       	movw	r28, r24
    53f8:	68 01       	movw	r12, r16
    53fa:	87 01       	movw	r16, r14
    53fc:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    5400:	b6 01       	movw	r22, r12
    5402:	ce 01       	movw	r24, r28
    5404:	0e 96       	adiw	r24, 0x0e	; 14
    5406:	0e 94 4b 33 	call	0x6696	; 0x6696 <strcmp_P>
    540a:	21 e0       	ldi	r18, 0x01	; 1
    540c:	89 2b       	or	r24, r25
    540e:	09 f0       	breq	.+2      	; 0x5412 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	82 2f       	mov	r24, r18
    5414:	df 91       	pop	r29
    5416:	cf 91       	pop	r28
    5418:	1f 91       	pop	r17
    541a:	0f 91       	pop	r16
    541c:	ff 90       	pop	r15
    541e:	ef 90       	pop	r14
    5420:	df 90       	pop	r13
    5422:	cf 90       	pop	r12
    5424:	08 95       	ret

00005426 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    5426:	ef 92       	push	r14
    5428:	ff 92       	push	r15
    542a:	0f 93       	push	r16
    542c:	1f 93       	push	r17
    542e:	fc 01       	movw	r30, r24
    5430:	ea 5e       	subi	r30, 0xEA	; 234
    5432:	fe 4f       	sbci	r31, 0xFE	; 254
    5434:	00 81       	ld	r16, Z
    5436:	11 81       	ldd	r17, Z+1	; 0x01
    5438:	26 2f       	mov	r18, r22
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	40 e0       	ldi	r20, 0x00	; 0
    543e:	50 e0       	ldi	r21, 0x00	; 0
    5440:	64 ef       	ldi	r22, 0xF4	; 244
    5442:	e6 2e       	mov	r14, r22
    5444:	ff 24       	eor	r15, r15
    5446:	f3 94       	inc	r15
    5448:	65 e2       	ldi	r22, 0x25	; 37
    544a:	74 e0       	ldi	r23, 0x04	; 4
    544c:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    5450:	1f 91       	pop	r17
    5452:	0f 91       	pop	r16
    5454:	ff 90       	pop	r15
    5456:	ef 90       	pop	r14
    5458:	08 95       	ret

0000545a <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    545a:	0f 93       	push	r16
    545c:	1f 93       	push	r17
    545e:	cf 93       	push	r28
    5460:	df 93       	push	r29
    5462:	ec 01       	movw	r28, r24
    5464:	8b 01       	movw	r16, r22
    5466:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN13Adafruit_FONA9HTTP_termEv>
    546a:	ce 01       	movw	r24, r28
    546c:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN13Adafruit_FONA9HTTP_initEv>
    5470:	81 11       	cpse	r24, r1
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	38 c0       	rjmp	.+112    	; 0x54e8 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    5478:	21 e0       	ldi	r18, 0x01	; 1
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	40 e0       	ldi	r20, 0x00	; 0
    547e:	50 e0       	ldi	r21, 0x00	; 0
    5480:	6a e0       	ldi	r22, 0x0A	; 10
    5482:	74 e0       	ldi	r23, 0x04	; 4
    5484:	ce 01       	movw	r24, r28
    5486:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    548a:	88 23       	and	r24, r24
    548c:	99 f3       	breq	.-26     	; 0x5474 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    548e:	fe 01       	movw	r30, r28
    5490:	ec 5e       	subi	r30, 0xEC	; 236
    5492:	fe 4f       	sbci	r31, 0xFE	; 254
    5494:	40 81       	ld	r20, Z
    5496:	51 81       	ldd	r21, Z+1	; 0x01
    5498:	67 e0       	ldi	r22, 0x07	; 7
    549a:	74 e0       	ldi	r23, 0x04	; 4
    549c:	ce 01       	movw	r24, r28
    549e:	0e 94 91 25 	call	0x4b22	; 0x4b22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    54a2:	88 23       	and	r24, r24
    54a4:	39 f3       	breq	.-50     	; 0x5474 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    54a6:	a8 01       	movw	r20, r16
    54a8:	63 e0       	ldi	r22, 0x03	; 3
    54aa:	74 e0       	ldi	r23, 0x04	; 4
    54ac:	ce 01       	movw	r24, r28
    54ae:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    54b2:	88 23       	and	r24, r24
    54b4:	f9 f2       	breq	.-66     	; 0x5474 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    54b6:	fe 01       	movw	r30, r28
    54b8:	ed 5e       	subi	r30, 0xED	; 237
    54ba:	fe 4f       	sbci	r31, 0xFE	; 254
    54bc:	90 81       	ld	r25, Z
    54be:	99 23       	and	r25, r25
    54c0:	99 f0       	breq	.+38     	; 0x54e8 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    54c2:	21 e0       	ldi	r18, 0x01	; 1
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	40 e0       	ldi	r20, 0x00	; 0
    54c8:	50 e0       	ldi	r21, 0x00	; 0
    54ca:	6d ef       	ldi	r22, 0xFD	; 253
    54cc:	73 e0       	ldi	r23, 0x03	; 3
    54ce:	ce 01       	movw	r24, r28
    54d0:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    54d4:	88 23       	and	r24, r24
    54d6:	71 f2       	breq	.-100    	; 0x5474 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    54d8:	61 e0       	ldi	r22, 0x01	; 1
    54da:	ce 01       	movw	r24, r28
    54dc:	df 91       	pop	r29
    54de:	cf 91       	pop	r28
    54e0:	1f 91       	pop	r17
    54e2:	0f 91       	pop	r16
    54e4:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <_ZN13Adafruit_FONA8HTTP_sslEb>
    54e8:	df 91       	pop	r29
    54ea:	cf 91       	pop	r28
    54ec:	1f 91       	pop	r17
    54ee:	0f 91       	pop	r16
    54f0:	08 95       	ret

000054f2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	ec 01       	movw	r28, r24
    5500:	79 01       	movw	r14, r18
    5502:	98 01       	movw	r18, r16
    5504:	0e 94 01 27 	call	0x4e02	; 0x4e02 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    5508:	b7 01       	movw	r22, r14
    550a:	ce 01       	movw	r24, r28
    550c:	0e 96       	adiw	r24, 0x0e	; 14
    550e:	0e 94 4b 33 	call	0x6696	; 0x6696 <strcmp_P>
    5512:	21 e0       	ldi	r18, 0x01	; 1
    5514:	89 2b       	or	r24, r25
    5516:	09 f0       	breq	.+2      	; 0x551a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    5518:	20 e0       	ldi	r18, 0x00	; 0
    551a:	82 2f       	mov	r24, r18
    551c:	df 91       	pop	r29
    551e:	cf 91       	pop	r28
    5520:	1f 91       	pop	r17
    5522:	0f 91       	pop	r16
    5524:	ff 90       	pop	r15
    5526:	ef 90       	pop	r14
    5528:	08 95       	ret

0000552a <_ZN13Adafruit_FONA10enableGPRSEb>:
    552a:	8f 92       	push	r8
    552c:	9f 92       	push	r9
    552e:	af 92       	push	r10
    5530:	bf 92       	push	r11
    5532:	cf 92       	push	r12
    5534:	df 92       	push	r13
    5536:	ef 92       	push	r14
    5538:	ff 92       	push	r15
    553a:	0f 93       	push	r16
    553c:	1f 93       	push	r17
    553e:	cf 93       	push	r28
    5540:	df 93       	push	r29
    5542:	ec 01       	movw	r28, r24
    5544:	20 e2       	ldi	r18, 0x20	; 32
    5546:	3e e4       	ldi	r19, 0x4E	; 78
    5548:	66 23       	and	r22, r22
    554a:	09 f4       	brne	.+2      	; 0x554e <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    554c:	0f c1       	rjmp	.+542    	; 0x576c <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    554e:	4a ea       	ldi	r20, 0xAA	; 170
    5550:	55 e0       	ldi	r21, 0x05	; 5
    5552:	6f e9       	ldi	r22, 0x9F	; 159
    5554:	75 e0       	ldi	r23, 0x05	; 5
    5556:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    555a:	7e 01       	movw	r14, r28
    555c:	8a ee       	ldi	r24, 0xEA	; 234
    555e:	e8 1a       	sub	r14, r24
    5560:	8e ef       	ldi	r24, 0xFE	; 254
    5562:	f8 0a       	sbc	r15, r24
    5564:	f7 01       	movw	r30, r14
    5566:	40 81       	ld	r20, Z
    5568:	51 81       	ldd	r21, Z+1	; 0x01
    556a:	20 e1       	ldi	r18, 0x10	; 16
    556c:	37 e2       	ldi	r19, 0x27	; 39
    556e:	64 e9       	ldi	r22, 0x94	; 148
    5570:	75 e0       	ldi	r23, 0x05	; 5
    5572:	ce 01       	movw	r24, r28
    5574:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5578:	88 23       	and	r24, r24
    557a:	09 f4       	brne	.+2      	; 0x557e <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    557c:	24 c1       	rjmp	.+584    	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    557e:	f7 01       	movw	r30, r14
    5580:	40 81       	ld	r20, Z
    5582:	51 81       	ldd	r21, Z+1	; 0x01
    5584:	20 e1       	ldi	r18, 0x10	; 16
    5586:	37 e2       	ldi	r19, 0x27	; 39
    5588:	66 e7       	ldi	r22, 0x76	; 118
    558a:	75 e0       	ldi	r23, 0x05	; 5
    558c:	ce 01       	movw	r24, r28
    558e:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5592:	88 23       	and	r24, r24
    5594:	09 f4       	brne	.+2      	; 0x5598 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    5596:	17 c1       	rjmp	.+558    	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5598:	4e 01       	movw	r8, r28
    559a:	f3 ef       	ldi	r31, 0xF3	; 243
    559c:	8f 1a       	sub	r8, r31
    559e:	fe ef       	ldi	r31, 0xFE	; 254
    55a0:	9f 0a       	sbc	r9, r31
    55a2:	f4 01       	movw	r30, r8
    55a4:	40 81       	ld	r20, Z
    55a6:	51 81       	ldd	r21, Z+1	; 0x01
    55a8:	41 15       	cp	r20, r1
    55aa:	51 05       	cpc	r21, r1
    55ac:	a9 f4       	brne	.+42     	; 0x55d8 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    55ae:	f7 01       	movw	r30, r14
    55b0:	40 81       	ld	r20, Z
    55b2:	51 81       	ldd	r21, Z+1	; 0x01
    55b4:	20 e3       	ldi	r18, 0x30	; 48
    55b6:	35 e7       	ldi	r19, 0x75	; 117
    55b8:	61 e1       	ldi	r22, 0x11	; 17
    55ba:	75 e0       	ldi	r23, 0x05	; 5
    55bc:	ce 01       	movw	r24, r28
    55be:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    55c2:	88 23       	and	r24, r24
    55c4:	09 f4       	brne	.+2      	; 0x55c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    55c6:	ff c0       	rjmp	.+510    	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    55c8:	f7 01       	movw	r30, r14
    55ca:	40 81       	ld	r20, Z
    55cc:	51 81       	ldd	r21, Z+1	; 0x01
    55ce:	20 e1       	ldi	r18, 0x10	; 16
    55d0:	37 e2       	ldi	r19, 0x27	; 39
    55d2:	68 e0       	ldi	r22, 0x08	; 8
    55d4:	75 e0       	ldi	r23, 0x05	; 5
    55d6:	e8 c0       	rjmp	.+464    	; 0x57a8 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    55d8:	f7 01       	movw	r30, r14
    55da:	20 81       	ld	r18, Z
    55dc:	31 81       	ldd	r19, Z+1	; 0x01
    55de:	00 e1       	ldi	r16, 0x10	; 16
    55e0:	17 e2       	ldi	r17, 0x27	; 39
    55e2:	62 e6       	ldi	r22, 0x62	; 98
    55e4:	75 e0       	ldi	r23, 0x05	; 5
    55e6:	ce 01       	movw	r24, r28
    55e8:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    55ec:	88 23       	and	r24, r24
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    55f0:	ea c0       	rjmp	.+468    	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    55f2:	ce 01       	movw	r24, r28
    55f4:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN13Adafruit_FONA10flushInputEv>
    55f8:	8e 01       	movw	r16, r28
    55fa:	08 5e       	subi	r16, 0xE8	; 232
    55fc:	1e 4f       	sbci	r17, 0xFE	; 254
    55fe:	68 e5       	ldi	r22, 0x58	; 88
    5600:	75 e0       	ldi	r23, 0x05	; 5
    5602:	f8 01       	movw	r30, r16
    5604:	80 81       	ld	r24, Z
    5606:	91 81       	ldd	r25, Z+1	; 0x01
    5608:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    560c:	f4 01       	movw	r30, r8
    560e:	60 81       	ld	r22, Z
    5610:	71 81       	ldd	r23, Z+1	; 0x01
    5612:	f8 01       	movw	r30, r16
    5614:	80 81       	ld	r24, Z
    5616:	91 81       	ldd	r25, Z+1	; 0x01
    5618:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    561c:	5e 01       	movw	r10, r28
    561e:	f1 ef       	ldi	r31, 0xF1	; 241
    5620:	af 1a       	sub	r10, r31
    5622:	fe ef       	ldi	r31, 0xFE	; 254
    5624:	bf 0a       	sbc	r11, r31
    5626:	f5 01       	movw	r30, r10
    5628:	80 81       	ld	r24, Z
    562a:	91 81       	ldd	r25, Z+1	; 0x01
    562c:	89 2b       	or	r24, r25
    562e:	79 f0       	breq	.+30     	; 0x564e <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    5630:	67 ef       	ldi	r22, 0xF7	; 247
    5632:	72 e0       	ldi	r23, 0x02	; 2
    5634:	f8 01       	movw	r30, r16
    5636:	80 81       	ld	r24, Z
    5638:	91 81       	ldd	r25, Z+1	; 0x01
    563a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    563e:	f5 01       	movw	r30, r10
    5640:	60 81       	ld	r22, Z
    5642:	71 81       	ldd	r23, Z+1	; 0x01
    5644:	f8 01       	movw	r30, r16
    5646:	80 81       	ld	r24, Z
    5648:	91 81       	ldd	r25, Z+1	; 0x01
    564a:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    564e:	6e 01       	movw	r12, r28
    5650:	ff ee       	ldi	r31, 0xEF	; 239
    5652:	cf 1a       	sub	r12, r31
    5654:	fe ef       	ldi	r31, 0xFE	; 254
    5656:	df 0a       	sbc	r13, r31
    5658:	f6 01       	movw	r30, r12
    565a:	80 81       	ld	r24, Z
    565c:	91 81       	ldd	r25, Z+1	; 0x01
    565e:	89 2b       	or	r24, r25
    5660:	79 f0       	breq	.+30     	; 0x5680 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    5662:	67 ef       	ldi	r22, 0xF7	; 247
    5664:	72 e0       	ldi	r23, 0x02	; 2
    5666:	f8 01       	movw	r30, r16
    5668:	80 81       	ld	r24, Z
    566a:	91 81       	ldd	r25, Z+1	; 0x01
    566c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    5670:	f6 01       	movw	r30, r12
    5672:	60 81       	ld	r22, Z
    5674:	71 81       	ldd	r23, Z+1	; 0x01
    5676:	f8 01       	movw	r30, r16
    5678:	80 81       	ld	r24, Z
    567a:	91 81       	ldd	r25, Z+1	; 0x01
    567c:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    5680:	69 ef       	ldi	r22, 0xF9	; 249
    5682:	72 e0       	ldi	r23, 0x02	; 2
    5684:	f8 01       	movw	r30, r16
    5686:	80 81       	ld	r24, Z
    5688:	91 81       	ldd	r25, Z+1	; 0x01
    568a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    568e:	61 e5       	ldi	r22, 0x51	; 81
    5690:	75 e0       	ldi	r23, 0x05	; 5
    5692:	83 e5       	ldi	r24, 0x53	; 83
    5694:	96 e0       	ldi	r25, 0x06	; 6
    5696:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    569a:	67 e4       	ldi	r22, 0x47	; 71
    569c:	75 e0       	ldi	r23, 0x05	; 5
    569e:	83 e5       	ldi	r24, 0x53	; 83
    56a0:	96 e0       	ldi	r25, 0x06	; 6
    56a2:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    56a6:	f4 01       	movw	r30, r8
    56a8:	60 81       	ld	r22, Z
    56aa:	71 81       	ldd	r23, Z+1	; 0x01
    56ac:	83 e5       	ldi	r24, 0x53	; 83
    56ae:	96 e0       	ldi	r25, 0x06	; 6
    56b0:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    56b4:	f5 01       	movw	r30, r10
    56b6:	80 81       	ld	r24, Z
    56b8:	91 81       	ldd	r25, Z+1	; 0x01
    56ba:	89 2b       	or	r24, r25
    56bc:	69 f0       	breq	.+26     	; 0x56d8 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    56be:	67 ef       	ldi	r22, 0xF7	; 247
    56c0:	72 e0       	ldi	r23, 0x02	; 2
    56c2:	83 e5       	ldi	r24, 0x53	; 83
    56c4:	96 e0       	ldi	r25, 0x06	; 6
    56c6:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    56ca:	f5 01       	movw	r30, r10
    56cc:	60 81       	ld	r22, Z
    56ce:	71 81       	ldd	r23, Z+1	; 0x01
    56d0:	83 e5       	ldi	r24, 0x53	; 83
    56d2:	96 e0       	ldi	r25, 0x06	; 6
    56d4:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    56d8:	f6 01       	movw	r30, r12
    56da:	80 81       	ld	r24, Z
    56dc:	91 81       	ldd	r25, Z+1	; 0x01
    56de:	89 2b       	or	r24, r25
    56e0:	69 f0       	breq	.+26     	; 0x56fc <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    56e2:	67 ef       	ldi	r22, 0xF7	; 247
    56e4:	72 e0       	ldi	r23, 0x02	; 2
    56e6:	83 e5       	ldi	r24, 0x53	; 83
    56e8:	96 e0       	ldi	r25, 0x06	; 6
    56ea:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print5printEPKc>
    56ee:	f6 01       	movw	r30, r12
    56f0:	60 81       	ld	r22, Z
    56f2:	71 81       	ldd	r23, Z+1	; 0x01
    56f4:	83 e5       	ldi	r24, 0x53	; 83
    56f6:	96 e0       	ldi	r25, 0x06	; 6
    56f8:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    56fc:	69 ef       	ldi	r22, 0xF9	; 249
    56fe:	72 e0       	ldi	r23, 0x02	; 2
    5700:	83 e5       	ldi	r24, 0x53	; 83
    5702:	96 e0       	ldi	r25, 0x06	; 6
    5704:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN5Print7printlnEPKc>
    5708:	f7 01       	movw	r30, r14
    570a:	60 81       	ld	r22, Z
    570c:	71 81       	ldd	r23, Z+1	; 0x01
    570e:	40 e1       	ldi	r20, 0x10	; 16
    5710:	57 e2       	ldi	r21, 0x27	; 39
    5712:	ce 01       	movw	r24, r28
    5714:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5718:	88 23       	and	r24, r24
    571a:	09 f4       	brne	.+2      	; 0x571e <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    571c:	54 c0       	rjmp	.+168    	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    571e:	f5 01       	movw	r30, r10
    5720:	40 81       	ld	r20, Z
    5722:	51 81       	ldd	r21, Z+1	; 0x01
    5724:	41 15       	cp	r20, r1
    5726:	51 05       	cpc	r21, r1
    5728:	39 f4       	brne	.+14     	; 0x5738 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    572a:	f6 01       	movw	r30, r12
    572c:	40 81       	ld	r20, Z
    572e:	51 81       	ldd	r21, Z+1	; 0x01
    5730:	41 15       	cp	r20, r1
    5732:	51 05       	cpc	r21, r1
    5734:	71 f4       	brne	.+28     	; 0x5752 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    5736:	3b cf       	rjmp	.-394    	; 0x55ae <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5738:	f7 01       	movw	r30, r14
    573a:	20 81       	ld	r18, Z
    573c:	31 81       	ldd	r19, Z+1	; 0x01
    573e:	00 e1       	ldi	r16, 0x10	; 16
    5740:	17 e2       	ldi	r17, 0x27	; 39
    5742:	62 e3       	ldi	r22, 0x32	; 50
    5744:	75 e0       	ldi	r23, 0x05	; 5
    5746:	ce 01       	movw	r24, r28
    5748:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    574c:	81 11       	cpse	r24, r1
    574e:	ed cf       	rjmp	.-38     	; 0x572a <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    5750:	3a c0       	rjmp	.+116    	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5752:	f7 01       	movw	r30, r14
    5754:	20 81       	ld	r18, Z
    5756:	31 81       	ldd	r19, Z+1	; 0x01
    5758:	00 e1       	ldi	r16, 0x10	; 16
    575a:	17 e2       	ldi	r17, 0x27	; 39
    575c:	6e e1       	ldi	r22, 0x1E	; 30
    575e:	75 e0       	ldi	r23, 0x05	; 5
    5760:	ce 01       	movw	r24, r28
    5762:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5766:	81 11       	cpse	r24, r1
    5768:	22 cf       	rjmp	.-444    	; 0x55ae <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    576a:	2d c0       	rjmp	.+90     	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    576c:	40 e0       	ldi	r20, 0x00	; 0
    576e:	55 e0       	ldi	r21, 0x05	; 5
    5770:	65 ef       	ldi	r22, 0xF5	; 245
    5772:	74 e0       	ldi	r23, 0x04	; 4
    5774:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5778:	88 23       	and	r24, r24
    577a:	29 f1       	breq	.+74     	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    577c:	8e 01       	movw	r16, r28
    577e:	0a 5e       	subi	r16, 0xEA	; 234
    5780:	1e 4f       	sbci	r17, 0xFE	; 254
    5782:	f8 01       	movw	r30, r16
    5784:	40 81       	ld	r20, Z
    5786:	51 81       	ldd	r21, Z+1	; 0x01
    5788:	20 e1       	ldi	r18, 0x10	; 16
    578a:	37 e2       	ldi	r19, 0x27	; 39
    578c:	68 ee       	ldi	r22, 0xE8	; 232
    578e:	74 e0       	ldi	r23, 0x04	; 4
    5790:	ce 01       	movw	r24, r28
    5792:	0e 94 65 27 	call	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5796:	88 23       	and	r24, r24
    5798:	b1 f0       	breq	.+44     	; 0x57c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    579a:	f8 01       	movw	r30, r16
    579c:	40 81       	ld	r20, Z
    579e:	51 81       	ldd	r21, Z+1	; 0x01
    57a0:	20 e1       	ldi	r18, 0x10	; 16
    57a2:	37 e2       	ldi	r19, 0x27	; 39
    57a4:	6d ed       	ldi	r22, 0xDD	; 221
    57a6:	74 e0       	ldi	r23, 0x04	; 4
    57a8:	ce 01       	movw	r24, r28
    57aa:	df 91       	pop	r29
    57ac:	cf 91       	pop	r28
    57ae:	1f 91       	pop	r17
    57b0:	0f 91       	pop	r16
    57b2:	ff 90       	pop	r15
    57b4:	ef 90       	pop	r14
    57b6:	df 90       	pop	r13
    57b8:	cf 90       	pop	r12
    57ba:	bf 90       	pop	r11
    57bc:	af 90       	pop	r10
    57be:	9f 90       	pop	r9
    57c0:	8f 90       	pop	r8
    57c2:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    57c6:	80 e0       	ldi	r24, 0x00	; 0
    57c8:	df 91       	pop	r29
    57ca:	cf 91       	pop	r28
    57cc:	1f 91       	pop	r17
    57ce:	0f 91       	pop	r16
    57d0:	ff 90       	pop	r15
    57d2:	ef 90       	pop	r14
    57d4:	df 90       	pop	r13
    57d6:	cf 90       	pop	r12
    57d8:	bf 90       	pop	r11
    57da:	af 90       	pop	r10
    57dc:	9f 90       	pop	r9
    57de:	8f 90       	pop	r8
    57e0:	08 95       	ret

000057e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    57e2:	af 92       	push	r10
    57e4:	bf 92       	push	r11
    57e6:	cf 92       	push	r12
    57e8:	df 92       	push	r13
    57ea:	ef 92       	push	r14
    57ec:	ff 92       	push	r15
    57ee:	0f 93       	push	r16
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
    57f4:	5b 01       	movw	r10, r22
    57f6:	6a 01       	movw	r12, r20
    57f8:	e2 2e       	mov	r14, r18
    57fa:	0e 96       	adiw	r24, 0x0e	; 14
    57fc:	0e 94 5d 33 	call	0x66ba	; 0x66ba <strstr_P>
    5800:	ec 01       	movw	r28, r24
    5802:	89 2b       	or	r24, r25
    5804:	c1 f0       	breq	.+48     	; 0x5836 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5806:	c5 01       	movw	r24, r10
    5808:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__strlen_P>
    580c:	8c 0f       	add	r24, r28
    580e:	9d 1f       	adc	r25, r29
    5810:	c0 e0       	ldi	r28, 0x00	; 0
    5812:	f1 2c       	mov	r15, r1
    5814:	c0 17       	cp	r28, r16
    5816:	41 f0       	breq	.+16     	; 0x5828 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    5818:	b7 01       	movw	r22, r14
    581a:	0e 94 80 33 	call	0x6700	; 0x6700 <strchr>
    581e:	00 97       	sbiw	r24, 0x00	; 0
    5820:	51 f0       	breq	.+20     	; 0x5836 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5822:	01 96       	adiw	r24, 0x01	; 1
    5824:	cf 5f       	subi	r28, 0xFF	; 255
    5826:	f6 cf       	rjmp	.-20     	; 0x5814 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    5828:	0e 94 2d 33 	call	0x665a	; 0x665a <atoi>
    582c:	f6 01       	movw	r30, r12
    582e:	91 83       	std	Z+1, r25	; 0x01
    5830:	80 83       	st	Z, r24
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	01 c0       	rjmp	.+2      	; 0x5838 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	0f 91       	pop	r16
    583e:	ff 90       	pop	r15
    5840:	ef 90       	pop	r14
    5842:	df 90       	pop	r13
    5844:	cf 90       	pop	r12
    5846:	bf 90       	pop	r11
    5848:	af 90       	pop	r10
    584a:	08 95       	ret

0000584c <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    584c:	ef 92       	push	r14
    584e:	ff 92       	push	r15
    5850:	0f 93       	push	r16
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
    5856:	ec 01       	movw	r28, r24
    5858:	7b 01       	movw	r14, r22
    585a:	44 ef       	ldi	r20, 0xF4	; 244
    585c:	51 e0       	ldi	r21, 0x01	; 1
    585e:	6c e3       	ldi	r22, 0x3C	; 60
    5860:	74 e0       	ldi	r23, 0x04	; 4
    5862:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5866:	00 e0       	ldi	r16, 0x00	; 0
    5868:	2c e2       	ldi	r18, 0x2C	; 44
    586a:	a7 01       	movw	r20, r14
    586c:	61 e3       	ldi	r22, 0x31	; 49
    586e:	74 e0       	ldi	r23, 0x04	; 4
    5870:	ce 01       	movw	r24, r28
    5872:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5876:	df 91       	pop	r29
    5878:	cf 91       	pop	r28
    587a:	0f 91       	pop	r16
    587c:	ff 90       	pop	r15
    587e:	ef 90       	pop	r14
    5880:	08 95       	ret

00005882 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    5882:	4f 92       	push	r4
    5884:	5f 92       	push	r5
    5886:	6f 92       	push	r6
    5888:	7f 92       	push	r7
    588a:	af 92       	push	r10
    588c:	bf 92       	push	r11
    588e:	cf 92       	push	r12
    5890:	df 92       	push	r13
    5892:	ef 92       	push	r14
    5894:	ff 92       	push	r15
    5896:	0f 93       	push	r16
    5898:	1f 93       	push	r17
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	ec 01       	movw	r28, r24
    58a0:	5a 01       	movw	r10, r20
    58a2:	69 01       	movw	r12, r18
    58a4:	27 01       	movw	r4, r14
    58a6:	38 01       	movw	r6, r16
    58a8:	fc 01       	movw	r30, r24
    58aa:	ea 5e       	subi	r30, 0xEA	; 234
    58ac:	fe 4f       	sbci	r31, 0xFE	; 254
    58ae:	00 81       	ld	r16, Z
    58b0:	11 81       	ldd	r17, Z+1	; 0x01
    58b2:	26 2f       	mov	r18, r22
    58b4:	30 e0       	ldi	r19, 0x00	; 0
    58b6:	40 e0       	ldi	r20, 0x00	; 0
    58b8:	50 e0       	ldi	r21, 0x00	; 0
    58ba:	84 ef       	ldi	r24, 0xF4	; 244
    58bc:	e8 2e       	mov	r14, r24
    58be:	ff 24       	eor	r15, r15
    58c0:	f3 94       	inc	r15
    58c2:	62 e6       	ldi	r22, 0x62	; 98
    58c4:	74 e0       	ldi	r23, 0x04	; 4
    58c6:	ce 01       	movw	r24, r28
    58c8:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    58cc:	81 11       	cpse	r24, r1
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	17 c0       	rjmp	.+46     	; 0x5902 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    58d4:	40 e0       	ldi	r20, 0x00	; 0
    58d6:	b2 01       	movw	r22, r4
    58d8:	ce 01       	movw	r24, r28
    58da:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    58de:	01 e0       	ldi	r16, 0x01	; 1
    58e0:	2c e2       	ldi	r18, 0x2C	; 44
    58e2:	a5 01       	movw	r20, r10
    58e4:	65 e5       	ldi	r22, 0x55	; 85
    58e6:	74 e0       	ldi	r23, 0x04	; 4
    58e8:	ce 01       	movw	r24, r28
    58ea:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    58ee:	88 23       	and	r24, r24
    58f0:	79 f3       	breq	.-34     	; 0x58d0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    58f2:	02 e0       	ldi	r16, 0x02	; 2
    58f4:	2c e2       	ldi	r18, 0x2C	; 44
    58f6:	a6 01       	movw	r20, r12
    58f8:	68 e4       	ldi	r22, 0x48	; 72
    58fa:	74 e0       	ldi	r23, 0x04	; 4
    58fc:	ce 01       	movw	r24, r28
    58fe:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5902:	df 91       	pop	r29
    5904:	cf 91       	pop	r28
    5906:	1f 91       	pop	r17
    5908:	0f 91       	pop	r16
    590a:	ff 90       	pop	r15
    590c:	ef 90       	pop	r14
    590e:	df 90       	pop	r13
    5910:	cf 90       	pop	r12
    5912:	bf 90       	pop	r11
    5914:	af 90       	pop	r10
    5916:	7f 90       	pop	r7
    5918:	6f 90       	pop	r6
    591a:	5f 90       	pop	r5
    591c:	4f 90       	pop	r4
    591e:	08 95       	ret

00005920 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    5920:	4f 92       	push	r4
    5922:	5f 92       	push	r5
    5924:	6f 92       	push	r6
    5926:	7f 92       	push	r7
    5928:	8f 92       	push	r8
    592a:	9f 92       	push	r9
    592c:	af 92       	push	r10
    592e:	bf 92       	push	r11
    5930:	cf 92       	push	r12
    5932:	df 92       	push	r13
    5934:	ef 92       	push	r14
    5936:	ff 92       	push	r15
    5938:	0f 93       	push	r16
    593a:	1f 93       	push	r17
    593c:	cf 93       	push	r28
    593e:	df 93       	push	r29
    5940:	ec 01       	movw	r28, r24
    5942:	2a 01       	movw	r4, r20
    5944:	39 01       	movw	r6, r18
    5946:	48 01       	movw	r8, r16
    5948:	57 01       	movw	r10, r14
    594a:	0e 94 2d 2a 	call	0x545a	; 0x545a <_ZN13Adafruit_FONA10HTTP_setupEPc>
    594e:	88 23       	and	r24, r24
    5950:	09 f4       	brne	.+2      	; 0x5954 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    5952:	71 c0       	rjmp	.+226    	; 0x5a36 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5954:	a2 01       	movw	r20, r4
    5956:	6d e1       	ldi	r22, 0x1D	; 29
    5958:	74 e0       	ldi	r23, 0x04	; 4
    595a:	ce 01       	movw	r24, r28
    595c:	0e 94 91 25 	call	0x4b22	; 0x4b22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5960:	88 23       	and	r24, r24
    5962:	09 f4       	brne	.+2      	; 0x5966 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    5964:	68 c0       	rjmp	.+208    	; 0x5a36 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5966:	a8 01       	movw	r20, r16
    5968:	60 e0       	ldi	r22, 0x00	; 0
    596a:	70 e0       	ldi	r23, 0x00	; 0
    596c:	00 e1       	ldi	r16, 0x10	; 16
    596e:	17 e2       	ldi	r17, 0x27	; 39
    5970:	20 e0       	ldi	r18, 0x00	; 0
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	ce 01       	movw	r24, r28
    5976:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    597a:	88 23       	and	r24, r24
    597c:	09 f4       	brne	.+2      	; 0x5980 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    597e:	5b c0       	rjmp	.+182    	; 0x5a36 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5980:	fe 01       	movw	r30, r28
    5982:	e8 5e       	subi	r30, 0xE8	; 232
    5984:	fe 4f       	sbci	r31, 0xFE	; 254
    5986:	80 81       	ld	r24, Z
    5988:	91 81       	ldd	r25, Z+1	; 0x01
    598a:	dc 01       	movw	r26, r24
    598c:	ed 91       	ld	r30, X+
    598e:	fc 91       	ld	r31, X
    5990:	02 80       	ldd	r0, Z+2	; 0x02
    5992:	f3 81       	ldd	r31, Z+3	; 0x03
    5994:	e0 2d       	mov	r30, r0
    5996:	a4 01       	movw	r20, r8
    5998:	b3 01       	movw	r22, r6
    599a:	09 95       	icall
    599c:	fe 01       	movw	r30, r28
    599e:	ea 5e       	subi	r30, 0xEA	; 234
    59a0:	fe 4f       	sbci	r31, 0xFE	; 254
    59a2:	60 81       	ld	r22, Z
    59a4:	71 81       	ldd	r23, Z+1	; 0x01
    59a6:	40 e1       	ldi	r20, 0x10	; 16
    59a8:	57 e2       	ldi	r21, 0x27	; 39
    59aa:	ce 01       	movw	r24, r28
    59ac:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    59b0:	88 23       	and	r24, r24
    59b2:	09 f4       	brne	.+2      	; 0x59b6 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    59b4:	40 c0       	rjmp	.+128    	; 0x5a36 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    59b6:	10 e1       	ldi	r17, 0x10	; 16
    59b8:	e1 2e       	mov	r14, r17
    59ba:	17 e2       	ldi	r17, 0x27	; 39
    59bc:	f1 2e       	mov	r15, r17
    59be:	00 e0       	ldi	r16, 0x00	; 0
    59c0:	10 e0       	ldi	r17, 0x00	; 0
    59c2:	96 01       	movw	r18, r12
    59c4:	a5 01       	movw	r20, r10
    59c6:	61 e0       	ldi	r22, 0x01	; 1
    59c8:	ce 01       	movw	r24, r28
    59ca:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    59ce:	88 23       	and	r24, r24
    59d0:	91 f1       	breq	.+100    	; 0x5a36 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    59d2:	64 e1       	ldi	r22, 0x14	; 20
    59d4:	74 e0       	ldi	r23, 0x04	; 4
    59d6:	83 e5       	ldi	r24, 0x53	; 83
    59d8:	96 e0       	ldi	r25, 0x06	; 6
    59da:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    59de:	f5 01       	movw	r30, r10
    59e0:	60 81       	ld	r22, Z
    59e2:	71 81       	ldd	r23, Z+1	; 0x01
    59e4:	4a e0       	ldi	r20, 0x0A	; 10
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	83 e5       	ldi	r24, 0x53	; 83
    59ea:	96 e0       	ldi	r25, 0x06	; 6
    59ec:	0e 94 18 21 	call	0x4230	; 0x4230 <_ZN5Print7printlnEji>
    59f0:	6e e0       	ldi	r22, 0x0E	; 14
    59f2:	74 e0       	ldi	r23, 0x04	; 4
    59f4:	83 e5       	ldi	r24, 0x53	; 83
    59f6:	96 e0       	ldi	r25, 0x06	; 6
    59f8:	0e 94 3c 20 	call	0x4078	; 0x4078 <_ZN5Print5printEPK19__FlashStringHelper>
    59fc:	d6 01       	movw	r26, r12
    59fe:	6d 91       	ld	r22, X+
    5a00:	7c 91       	ld	r23, X
    5a02:	4a e0       	ldi	r20, 0x0A	; 10
    5a04:	50 e0       	ldi	r21, 0x00	; 0
    5a06:	83 e5       	ldi	r24, 0x53	; 83
    5a08:	96 e0       	ldi	r25, 0x06	; 6
    5a0a:	0e 94 18 21 	call	0x4230	; 0x4230 <_ZN5Print7printlnEji>
    5a0e:	b6 01       	movw	r22, r12
    5a10:	ce 01       	movw	r24, r28
    5a12:	df 91       	pop	r29
    5a14:	cf 91       	pop	r28
    5a16:	1f 91       	pop	r17
    5a18:	0f 91       	pop	r16
    5a1a:	ff 90       	pop	r15
    5a1c:	ef 90       	pop	r14
    5a1e:	df 90       	pop	r13
    5a20:	cf 90       	pop	r12
    5a22:	bf 90       	pop	r11
    5a24:	af 90       	pop	r10
    5a26:	9f 90       	pop	r9
    5a28:	8f 90       	pop	r8
    5a2a:	7f 90       	pop	r7
    5a2c:	6f 90       	pop	r6
    5a2e:	5f 90       	pop	r5
    5a30:	4f 90       	pop	r4
    5a32:	0c 94 26 2c 	jmp	0x584c	; 0x584c <_ZN13Adafruit_FONA12HTTP_readallEPj>
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	df 91       	pop	r29
    5a3a:	cf 91       	pop	r28
    5a3c:	1f 91       	pop	r17
    5a3e:	0f 91       	pop	r16
    5a40:	ff 90       	pop	r15
    5a42:	ef 90       	pop	r14
    5a44:	df 90       	pop	r13
    5a46:	cf 90       	pop	r12
    5a48:	bf 90       	pop	r11
    5a4a:	af 90       	pop	r10
    5a4c:	9f 90       	pop	r9
    5a4e:	8f 90       	pop	r8
    5a50:	7f 90       	pop	r7
    5a52:	6f 90       	pop	r6
    5a54:	5f 90       	pop	r5
    5a56:	4f 90       	pop	r4
    5a58:	08 95       	ret

00005a5a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    5a5a:	af 92       	push	r10
    5a5c:	bf 92       	push	r11
    5a5e:	cf 92       	push	r12
    5a60:	df 92       	push	r13
    5a62:	ef 92       	push	r14
    5a64:	0f 93       	push	r16
    5a66:	1f 93       	push	r17
    5a68:	cf 93       	push	r28
    5a6a:	df 93       	push	r29
    5a6c:	ec 01       	movw	r28, r24
    5a6e:	6a 01       	movw	r12, r20
    5a70:	59 01       	movw	r10, r18
    5a72:	10 2f       	mov	r17, r16
    5a74:	0e 2d       	mov	r16, r14
    5a76:	44 ef       	ldi	r20, 0xF4	; 244
    5a78:	51 e0       	ldi	r21, 0x01	; 1
    5a7a:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5a7e:	21 2f       	mov	r18, r17
    5a80:	a5 01       	movw	r20, r10
    5a82:	b6 01       	movw	r22, r12
    5a84:	ce 01       	movw	r24, r28
    5a86:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5a8a:	18 2f       	mov	r17, r24
    5a8c:	88 23       	and	r24, r24
    5a8e:	31 f0       	breq	.+12     	; 0x5a9c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5a90:	40 e0       	ldi	r20, 0x00	; 0
    5a92:	64 ef       	ldi	r22, 0xF4	; 244
    5a94:	71 e0       	ldi	r23, 0x01	; 1
    5a96:	ce 01       	movw	r24, r28
    5a98:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN13Adafruit_FONA8readlineEjb>
    5a9c:	81 2f       	mov	r24, r17
    5a9e:	df 91       	pop	r29
    5aa0:	cf 91       	pop	r28
    5aa2:	1f 91       	pop	r17
    5aa4:	0f 91       	pop	r16
    5aa6:	ef 90       	pop	r14
    5aa8:	df 90       	pop	r13
    5aaa:	cf 90       	pop	r12
    5aac:	bf 90       	pop	r11
    5aae:	af 90       	pop	r10
    5ab0:	08 95       	ret

00005ab2 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    5ab2:	ef 92       	push	r14
    5ab4:	0f 93       	push	r16
    5ab6:	9b 01       	movw	r18, r22
    5ab8:	ee 24       	eor	r14, r14
    5aba:	e3 94       	inc	r14
    5abc:	0c e2       	ldi	r16, 0x2C	; 44
    5abe:	48 ee       	ldi	r20, 0xE8	; 232
    5ac0:	55 e0       	ldi	r21, 0x05	; 5
    5ac2:	61 ee       	ldi	r22, 0xE1	; 225
    5ac4:	75 e0       	ldi	r23, 0x05	; 5
    5ac6:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5aca:	0f 91       	pop	r16
    5acc:	ef 90       	pop	r14
    5ace:	08 95       	ret

00005ad0 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    5ad0:	ef 92       	push	r14
    5ad2:	0f 93       	push	r16
    5ad4:	cf 93       	push	r28
    5ad6:	df 93       	push	r29
    5ad8:	00 d0       	rcall	.+0      	; 0x5ada <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    5ada:	cd b7       	in	r28, 0x3d	; 61
    5adc:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5ade:	ee 24       	eor	r14, r14
    5ae0:	e3 94       	inc	r14
    5ae2:	0c e2       	ldi	r16, 0x2C	; 44
    5ae4:	9e 01       	movw	r18, r28
    5ae6:	2f 5f       	subi	r18, 0xFF	; 255
    5ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    5aea:	49 ed       	ldi	r20, 0xD9	; 217
    5aec:	55 e0       	ldi	r21, 0x05	; 5
    5aee:	60 ed       	ldi	r22, 0xD0	; 208
    5af0:	75 e0       	ldi	r23, 0x05	; 5
    5af2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5af6:	88 23       	and	r24, r24
    5af8:	11 f0       	breq	.+4      	; 0x5afe <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    5afa:	89 81       	ldd	r24, Y+1	; 0x01
    5afc:	01 c0       	rjmp	.+2      	; 0x5b00 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5afe:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    5b00:	0f 90       	pop	r0
    5b02:	0f 90       	pop	r0
    5b04:	df 91       	pop	r29
    5b06:	cf 91       	pop	r28
    5b08:	0f 91       	pop	r16
    5b0a:	ef 90       	pop	r14
    5b0c:	08 95       	ret

00005b0e <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    5b0e:	ef 92       	push	r14
    5b10:	0f 93       	push	r16
    5b12:	cf 93       	push	r28
    5b14:	df 93       	push	r29
    5b16:	00 d0       	rcall	.+0      	; 0x5b18 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    5b18:	cd b7       	in	r28, 0x3d	; 61
    5b1a:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5b1c:	e1 2c       	mov	r14, r1
    5b1e:	0c e2       	ldi	r16, 0x2C	; 44
    5b20:	9e 01       	movw	r18, r28
    5b22:	2f 5f       	subi	r18, 0xFF	; 255
    5b24:	3f 4f       	sbci	r19, 0xFF	; 255
    5b26:	49 ec       	ldi	r20, 0xC9	; 201
    5b28:	55 e0       	ldi	r21, 0x05	; 5
    5b2a:	62 ec       	ldi	r22, 0xC2	; 194
    5b2c:	75 e0       	ldi	r23, 0x05	; 5
    5b2e:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5b32:	88 23       	and	r24, r24
    5b34:	11 f0       	breq	.+4      	; 0x5b3a <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    5b36:	89 81       	ldd	r24, Y+1	; 0x01
    5b38:	01 c0       	rjmp	.+2      	; 0x5b3c <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5b3a:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    5b3c:	0f 90       	pop	r0
    5b3e:	0f 90       	pop	r0
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	0f 91       	pop	r16
    5b46:	ef 90       	pop	r14
    5b48:	08 95       	ret

00005b4a <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    5b4a:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5b4e:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5b52:	28 17       	cp	r18, r24
    5b54:	39 07       	cpc	r19, r25
    5b56:	b9 f4       	brne	.+46     	; 0x5b86 <_ZN14SoftwareSerial4readEv+0x3c>
    5b58:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5b5c:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5b60:	98 17       	cp	r25, r24
    5b62:	89 f0       	breq	.+34     	; 0x5b86 <_ZN14SoftwareSerial4readEv+0x3c>
    5b64:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5b68:	f0 e0       	ldi	r31, 0x00	; 0
    5b6a:	e5 50       	subi	r30, 0x05	; 5
    5b6c:	f9 4f       	sbci	r31, 0xF9	; 249
    5b6e:	80 81       	ld	r24, Z
    5b70:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5b74:	30 e0       	ldi	r19, 0x00	; 0
    5b76:	2f 5f       	subi	r18, 0xFF	; 255
    5b78:	3f 4f       	sbci	r19, 0xFF	; 255
    5b7a:	2f 73       	andi	r18, 0x3F	; 63
    5b7c:	33 27       	eor	r19, r19
    5b7e:	20 93 f9 06 	sts	0x06F9, r18	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	08 95       	ret
    5b86:	8f ef       	ldi	r24, 0xFF	; 255
    5b88:	9f ef       	ldi	r25, 0xFF	; 255
    5b8a:	08 95       	ret

00005b8c <_ZN14SoftwareSerial5writeEh>:
    5b8c:	1f 93       	push	r17
    5b8e:	cf 93       	push	r28
    5b90:	df 93       	push	r29
    5b92:	dc 01       	movw	r26, r24
    5b94:	5c 96       	adiw	r26, 0x1c	; 28
    5b96:	8d 91       	ld	r24, X+
    5b98:	9c 91       	ld	r25, X
    5b9a:	5d 97       	sbiw	r26, 0x1d	; 29
    5b9c:	00 97       	sbiw	r24, 0x00	; 0
    5b9e:	39 f4       	brne	.+14     	; 0x5bae <_ZN14SoftwareSerial5writeEh+0x22>
    5ba0:	21 e0       	ldi	r18, 0x01	; 1
    5ba2:	30 e0       	ldi	r19, 0x00	; 0
    5ba4:	13 96       	adiw	r26, 0x03	; 3
    5ba6:	3c 93       	st	X, r19
    5ba8:	2e 93       	st	-X, r18
    5baa:	12 97       	sbiw	r26, 0x02	; 2
    5bac:	3b c0       	rjmp	.+118    	; 0x5c24 <_ZN14SoftwareSerial5writeEh+0x98>
    5bae:	51 96       	adiw	r26, 0x11	; 17
    5bb0:	ed 91       	ld	r30, X+
    5bb2:	fc 91       	ld	r31, X
    5bb4:	52 97       	sbiw	r26, 0x12	; 18
    5bb6:	50 96       	adiw	r26, 0x10	; 16
    5bb8:	2c 91       	ld	r18, X
    5bba:	50 97       	sbiw	r26, 0x10	; 16
    5bbc:	32 2f       	mov	r19, r18
    5bbe:	30 95       	com	r19
    5bc0:	1f b7       	in	r17, 0x3f	; 63
    5bc2:	5e 96       	adiw	r26, 0x1e	; 30
    5bc4:	4c 91       	ld	r20, X
    5bc6:	5e 97       	sbiw	r26, 0x1e	; 30
    5bc8:	74 2f       	mov	r23, r20
    5bca:	72 70       	andi	r23, 0x02	; 2
    5bcc:	41 fd       	sbrc	r20, 1
    5bce:	60 95       	com	r22
    5bd0:	f8 94       	cli
    5bd2:	40 81       	ld	r20, Z
    5bd4:	77 23       	and	r23, r23
    5bd6:	11 f0       	breq	.+4      	; 0x5bdc <_ZN14SoftwareSerial5writeEh+0x50>
    5bd8:	42 2b       	or	r20, r18
    5bda:	01 c0       	rjmp	.+2      	; 0x5bde <_ZN14SoftwareSerial5writeEh+0x52>
    5bdc:	43 23       	and	r20, r19
    5bde:	40 83       	st	Z, r20
    5be0:	ec 01       	movw	r28, r24
    5be2:	21 97       	sbiw	r28, 0x01	; 1
    5be4:	f1 f7       	brne	.-4      	; 0x5be2 <_ZN14SoftwareSerial5writeEh+0x56>
    5be6:	48 e0       	ldi	r20, 0x08	; 8
    5be8:	50 81       	ld	r21, Z
    5bea:	60 ff       	sbrs	r22, 0
    5bec:	02 c0       	rjmp	.+4      	; 0x5bf2 <_ZN14SoftwareSerial5writeEh+0x66>
    5bee:	52 2b       	or	r21, r18
    5bf0:	01 c0       	rjmp	.+2      	; 0x5bf4 <_ZN14SoftwareSerial5writeEh+0x68>
    5bf2:	53 23       	and	r21, r19
    5bf4:	50 83       	st	Z, r21
    5bf6:	ec 01       	movw	r28, r24
    5bf8:	21 97       	sbiw	r28, 0x01	; 1
    5bfa:	f1 f7       	brne	.-4      	; 0x5bf8 <_ZN14SoftwareSerial5writeEh+0x6c>
    5bfc:	66 95       	lsr	r22
    5bfe:	41 50       	subi	r20, 0x01	; 1
    5c00:	99 f7       	brne	.-26     	; 0x5be8 <_ZN14SoftwareSerial5writeEh+0x5c>
    5c02:	80 81       	ld	r24, Z
    5c04:	77 23       	and	r23, r23
    5c06:	19 f0       	breq	.+6      	; 0x5c0e <_ZN14SoftwareSerial5writeEh+0x82>
    5c08:	83 23       	and	r24, r19
    5c0a:	80 83       	st	Z, r24
    5c0c:	02 c0       	rjmp	.+4      	; 0x5c12 <_ZN14SoftwareSerial5writeEh+0x86>
    5c0e:	28 2b       	or	r18, r24
    5c10:	20 83       	st	Z, r18
    5c12:	1f bf       	out	0x3f, r17	; 63
    5c14:	5c 96       	adiw	r26, 0x1c	; 28
    5c16:	8d 91       	ld	r24, X+
    5c18:	9c 91       	ld	r25, X
    5c1a:	5d 97       	sbiw	r26, 0x1d	; 29
    5c1c:	01 97       	sbiw	r24, 0x01	; 1
    5c1e:	f1 f7       	brne	.-4      	; 0x5c1c <_ZN14SoftwareSerial5writeEh+0x90>
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	df 91       	pop	r29
    5c26:	cf 91       	pop	r28
    5c28:	1f 91       	pop	r17
    5c2a:	08 95       	ret

00005c2c <_ZN14SoftwareSerial5flushEv>:
    5c2c:	08 95       	ret

00005c2e <_ZN14SoftwareSerial4peekEv>:
    5c2e:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5c32:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5c36:	28 17       	cp	r18, r24
    5c38:	39 07       	cpc	r19, r25
    5c3a:	71 f4       	brne	.+28     	; 0x5c58 <_ZN14SoftwareSerial4peekEv+0x2a>
    5c3c:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5c40:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5c44:	98 17       	cp	r25, r24
    5c46:	41 f0       	breq	.+16     	; 0x5c58 <_ZN14SoftwareSerial4peekEv+0x2a>
    5c48:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5c4c:	f0 e0       	ldi	r31, 0x00	; 0
    5c4e:	e5 50       	subi	r30, 0x05	; 5
    5c50:	f9 4f       	sbci	r31, 0xF9	; 249
    5c52:	80 81       	ld	r24, Z
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	08 95       	ret
    5c58:	8f ef       	ldi	r24, 0xFF	; 255
    5c5a:	9f ef       	ldi	r25, 0xFF	; 255
    5c5c:	08 95       	ret

00005c5e <_ZN14SoftwareSerial9availableEv>:
    5c5e:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5c62:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5c66:	28 17       	cp	r18, r24
    5c68:	39 07       	cpc	r19, r25
    5c6a:	71 f4       	brne	.+28     	; 0x5c88 <_ZN14SoftwareSerial9availableEv+0x2a>
    5c6c:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5c70:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	80 5c       	subi	r24, 0xC0	; 192
    5c78:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7a:	82 1b       	sub	r24, r18
    5c7c:	91 09       	sbc	r25, r1
    5c7e:	60 e4       	ldi	r22, 0x40	; 64
    5c80:	70 e0       	ldi	r23, 0x00	; 0
    5c82:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__divmodhi4>
    5c86:	08 95       	ret
    5c88:	80 e0       	ldi	r24, 0x00	; 0
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	08 95       	ret

00005c8e <_ZN14SoftwareSerial13stopListeningEv>:
    5c8e:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5c92:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5c96:	e8 17       	cp	r30, r24
    5c98:	f9 07       	cpc	r31, r25
    5c9a:	69 f4       	brne	.+26     	; 0x5cb6 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    5c9c:	a3 89       	ldd	r26, Z+19	; 0x13
    5c9e:	b4 89       	ldd	r27, Z+20	; 0x14
    5ca0:	9c 91       	ld	r25, X
    5ca2:	85 89       	ldd	r24, Z+21	; 0x15
    5ca4:	80 95       	com	r24
    5ca6:	89 23       	and	r24, r25
    5ca8:	8c 93       	st	X, r24
    5caa:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5cae:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5cb2:	81 e0       	ldi	r24, 0x01	; 1
    5cb4:	08 95       	ret
    5cb6:	80 e0       	ldi	r24, 0x00	; 0
    5cb8:	08 95       	ret

00005cba <_ZN14SoftwareSerial6listenEv>:
    5cba:	cf 93       	push	r28
    5cbc:	df 93       	push	r29
    5cbe:	ec 01       	movw	r28, r24
    5cc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5cc4:	89 2b       	or	r24, r25
    5cc6:	f1 f0       	breq	.+60     	; 0x5d04 <_ZN14SoftwareSerial6listenEv+0x4a>
    5cc8:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5ccc:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5cd0:	c8 17       	cp	r28, r24
    5cd2:	d9 07       	cpc	r29, r25
    5cd4:	b9 f0       	breq	.+46     	; 0x5d04 <_ZN14SoftwareSerial6listenEv+0x4a>
    5cd6:	00 97       	sbiw	r24, 0x00	; 0
    5cd8:	11 f0       	breq	.+4      	; 0x5cde <_ZN14SoftwareSerial6listenEv+0x24>
    5cda:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <_ZN14SoftwareSerial13stopListeningEv>
    5cde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ce0:	8e 7f       	andi	r24, 0xFE	; 254
    5ce2:	8e 8f       	std	Y+30, r24	; 0x1e
    5ce4:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5ce8:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5cec:	d0 93 3c 07 	sts	0x073C, r29	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5cf0:	c0 93 3b 07 	sts	0x073B, r28	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5cf4:	eb 89       	ldd	r30, Y+19	; 0x13
    5cf6:	fc 89       	ldd	r31, Y+20	; 0x14
    5cf8:	90 81       	ld	r25, Z
    5cfa:	8d 89       	ldd	r24, Y+21	; 0x15
    5cfc:	89 2b       	or	r24, r25
    5cfe:	80 83       	st	Z, r24
    5d00:	81 e0       	ldi	r24, 0x01	; 1
    5d02:	01 c0       	rjmp	.+2      	; 0x5d06 <_ZN14SoftwareSerial6listenEv+0x4c>
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	df 91       	pop	r29
    5d08:	cf 91       	pop	r28
    5d0a:	08 95       	ret

00005d0c <__vector_3>:
    5d0c:	1f 92       	push	r1
    5d0e:	0f 92       	push	r0
    5d10:	0f b6       	in	r0, 0x3f	; 63
    5d12:	0f 92       	push	r0
    5d14:	11 24       	eor	r1, r1
    5d16:	2f 93       	push	r18
    5d18:	3f 93       	push	r19
    5d1a:	4f 93       	push	r20
    5d1c:	5f 93       	push	r21
    5d1e:	6f 93       	push	r22
    5d20:	7f 93       	push	r23
    5d22:	8f 93       	push	r24
    5d24:	9f 93       	push	r25
    5d26:	af 93       	push	r26
    5d28:	bf 93       	push	r27
    5d2a:	ef 93       	push	r30
    5d2c:	ff 93       	push	r31
    5d2e:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <_ZN14SoftwareSerial13active_objectE>
    5d32:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <_ZN14SoftwareSerial13active_objectE+0x1>
    5d36:	30 97       	sbiw	r30, 0x00	; 0
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <__vector_3+0x30>
    5d3a:	51 c0       	rjmp	.+162    	; 0x5dde <__vector_3+0xd2>
    5d3c:	96 8d       	ldd	r25, Z+30	; 0x1e
    5d3e:	a6 85       	ldd	r26, Z+14	; 0x0e
    5d40:	b7 85       	ldd	r27, Z+15	; 0x0f
    5d42:	85 85       	ldd	r24, Z+13	; 0x0d
    5d44:	91 ff       	sbrs	r25, 1
    5d46:	04 c0       	rjmp	.+8      	; 0x5d50 <__vector_3+0x44>
    5d48:	9c 91       	ld	r25, X
    5d4a:	89 23       	and	r24, r25
    5d4c:	29 f4       	brne	.+10     	; 0x5d58 <__vector_3+0x4c>
    5d4e:	47 c0       	rjmp	.+142    	; 0x5dde <__vector_3+0xd2>
    5d50:	9c 91       	ld	r25, X
    5d52:	89 23       	and	r24, r25
    5d54:	09 f0       	breq	.+2      	; 0x5d58 <__vector_3+0x4c>
    5d56:	43 c0       	rjmp	.+134    	; 0x5dde <__vector_3+0xd2>
    5d58:	a3 89       	ldd	r26, Z+19	; 0x13
    5d5a:	b4 89       	ldd	r27, Z+20	; 0x14
    5d5c:	9c 91       	ld	r25, X
    5d5e:	85 89       	ldd	r24, Z+21	; 0x15
    5d60:	80 95       	com	r24
    5d62:	89 23       	and	r24, r25
    5d64:	8c 93       	st	X, r24
    5d66:	86 89       	ldd	r24, Z+22	; 0x16
    5d68:	97 89       	ldd	r25, Z+23	; 0x17
    5d6a:	01 97       	sbiw	r24, 0x01	; 1
    5d6c:	f1 f7       	brne	.-4      	; 0x5d6a <__vector_3+0x5e>
    5d6e:	60 8d       	ldd	r22, Z+24	; 0x18
    5d70:	71 8d       	ldd	r23, Z+25	; 0x19
    5d72:	a6 85       	ldd	r26, Z+14	; 0x0e
    5d74:	b7 85       	ldd	r27, Z+15	; 0x0f
    5d76:	55 85       	ldd	r21, Z+13	; 0x0d
    5d78:	38 e0       	ldi	r19, 0x08	; 8
    5d7a:	20 e0       	ldi	r18, 0x00	; 0
    5d7c:	cb 01       	movw	r24, r22
    5d7e:	01 97       	sbiw	r24, 0x01	; 1
    5d80:	f1 f7       	brne	.-4      	; 0x5d7e <__vector_3+0x72>
    5d82:	82 2f       	mov	r24, r18
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	95 95       	asr	r25
    5d88:	87 95       	ror	r24
    5d8a:	28 2f       	mov	r18, r24
    5d8c:	4c 91       	ld	r20, X
    5d8e:	45 23       	and	r20, r21
    5d90:	09 f0       	breq	.+2      	; 0x5d94 <__vector_3+0x88>
    5d92:	20 68       	ori	r18, 0x80	; 128
    5d94:	31 50       	subi	r19, 0x01	; 1
    5d96:	91 f7       	brne	.-28     	; 0x5d7c <__vector_3+0x70>
    5d98:	86 8d       	ldd	r24, Z+30	; 0x1e
    5d9a:	81 fd       	sbrc	r24, 1
    5d9c:	20 95       	com	r18
    5d9e:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	01 96       	adiw	r24, 0x01	; 1
    5da6:	8f 73       	andi	r24, 0x3F	; 63
    5da8:	99 27       	eor	r25, r25
    5daa:	30 91 f9 06 	lds	r19, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5dae:	38 17       	cp	r19, r24
    5db0:	49 f0       	breq	.+18     	; 0x5dc4 <__vector_3+0xb8>
    5db2:	a0 91 fa 06 	lds	r26, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5db6:	b0 e0       	ldi	r27, 0x00	; 0
    5db8:	a5 50       	subi	r26, 0x05	; 5
    5dba:	b9 4f       	sbci	r27, 0xF9	; 249
    5dbc:	2c 93       	st	X, r18
    5dbe:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5dc2:	03 c0       	rjmp	.+6      	; 0x5dca <__vector_3+0xbe>
    5dc4:	86 8d       	ldd	r24, Z+30	; 0x1e
    5dc6:	81 60       	ori	r24, 0x01	; 1
    5dc8:	86 8f       	std	Z+30, r24	; 0x1e
    5dca:	82 8d       	ldd	r24, Z+26	; 0x1a
    5dcc:	93 8d       	ldd	r25, Z+27	; 0x1b
    5dce:	01 97       	sbiw	r24, 0x01	; 1
    5dd0:	f1 f7       	brne	.-4      	; 0x5dce <__vector_3+0xc2>
    5dd2:	a3 89       	ldd	r26, Z+19	; 0x13
    5dd4:	b4 89       	ldd	r27, Z+20	; 0x14
    5dd6:	9c 91       	ld	r25, X
    5dd8:	85 89       	ldd	r24, Z+21	; 0x15
    5dda:	89 2b       	or	r24, r25
    5ddc:	8c 93       	st	X, r24
    5dde:	ff 91       	pop	r31
    5de0:	ef 91       	pop	r30
    5de2:	bf 91       	pop	r27
    5de4:	af 91       	pop	r26
    5de6:	9f 91       	pop	r25
    5de8:	8f 91       	pop	r24
    5dea:	7f 91       	pop	r23
    5dec:	6f 91       	pop	r22
    5dee:	5f 91       	pop	r21
    5df0:	4f 91       	pop	r20
    5df2:	3f 91       	pop	r19
    5df4:	2f 91       	pop	r18
    5df6:	0f 90       	pop	r0
    5df8:	0f be       	out	0x3f, r0	; 63
    5dfa:	0f 90       	pop	r0
    5dfc:	1f 90       	pop	r1
    5dfe:	18 95       	reti

00005e00 <_ZN14SoftwareSerial5setTXEh>:
    5e00:	1f 93       	push	r17
    5e02:	cf 93       	push	r28
    5e04:	df 93       	push	r29
    5e06:	ec 01       	movw	r28, r24
    5e08:	16 2f       	mov	r17, r22
    5e0a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5e0c:	66 95       	lsr	r22
    5e0e:	61 70       	andi	r22, 0x01	; 1
    5e10:	81 e0       	ldi	r24, 0x01	; 1
    5e12:	68 27       	eor	r22, r24
    5e14:	81 2f       	mov	r24, r17
    5e16:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
    5e1a:	61 e0       	ldi	r22, 0x01	; 1
    5e1c:	81 2f       	mov	r24, r17
    5e1e:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
    5e22:	81 2f       	mov	r24, r17
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	fc 01       	movw	r30, r24
    5e28:	e6 59       	subi	r30, 0x96	; 150
    5e2a:	fc 4f       	sbci	r31, 0xFC	; 252
    5e2c:	e4 91       	lpm	r30, Z
    5e2e:	e8 8b       	std	Y+16, r30	; 0x10
    5e30:	fc 01       	movw	r30, r24
    5e32:	e2 58       	subi	r30, 0x82	; 130
    5e34:	fc 4f       	sbci	r31, 0xFC	; 252
    5e36:	e4 91       	lpm	r30, Z
    5e38:	f0 e0       	ldi	r31, 0x00	; 0
    5e3a:	ee 0f       	add	r30, r30
    5e3c:	ff 1f       	adc	r31, r31
    5e3e:	e4 56       	subi	r30, 0x64	; 100
    5e40:	fc 4f       	sbci	r31, 0xFC	; 252
    5e42:	85 91       	lpm	r24, Z+
    5e44:	94 91       	lpm	r25, Z
    5e46:	9a 8b       	std	Y+18, r25	; 0x12
    5e48:	89 8b       	std	Y+17, r24	; 0x11
    5e4a:	df 91       	pop	r29
    5e4c:	cf 91       	pop	r28
    5e4e:	1f 91       	pop	r17
    5e50:	08 95       	ret

00005e52 <_ZN14SoftwareSerial5setRXEh>:
    5e52:	1f 93       	push	r17
    5e54:	cf 93       	push	r28
    5e56:	df 93       	push	r29
    5e58:	ec 01       	movw	r28, r24
    5e5a:	16 2f       	mov	r17, r22
    5e5c:	60 e0       	ldi	r22, 0x00	; 0
    5e5e:	81 2f       	mov	r24, r17
    5e60:	0e 94 e7 22 	call	0x45ce	; 0x45ce <pinMode>
    5e64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5e66:	81 fd       	sbrc	r24, 1
    5e68:	04 c0       	rjmp	.+8      	; 0x5e72 <_ZN14SoftwareSerial5setRXEh+0x20>
    5e6a:	61 e0       	ldi	r22, 0x01	; 1
    5e6c:	81 2f       	mov	r24, r17
    5e6e:	0e 94 23 23 	call	0x4646	; 0x4646 <digitalWrite>
    5e72:	1c 87       	std	Y+12, r17	; 0x0c
    5e74:	81 2f       	mov	r24, r17
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	fc 01       	movw	r30, r24
    5e7a:	e6 59       	subi	r30, 0x96	; 150
    5e7c:	fc 4f       	sbci	r31, 0xFC	; 252
    5e7e:	e4 91       	lpm	r30, Z
    5e80:	ed 87       	std	Y+13, r30	; 0x0d
    5e82:	fc 01       	movw	r30, r24
    5e84:	e2 58       	subi	r30, 0x82	; 130
    5e86:	fc 4f       	sbci	r31, 0xFC	; 252
    5e88:	e4 91       	lpm	r30, Z
    5e8a:	f0 e0       	ldi	r31, 0x00	; 0
    5e8c:	ee 0f       	add	r30, r30
    5e8e:	ff 1f       	adc	r31, r31
    5e90:	ee 56       	subi	r30, 0x6E	; 110
    5e92:	fc 4f       	sbci	r31, 0xFC	; 252
    5e94:	85 91       	lpm	r24, Z+
    5e96:	94 91       	lpm	r25, Z
    5e98:	9f 87       	std	Y+15, r25	; 0x0f
    5e9a:	8e 87       	std	Y+14, r24	; 0x0e
    5e9c:	df 91       	pop	r29
    5e9e:	cf 91       	pop	r28
    5ea0:	1f 91       	pop	r17
    5ea2:	08 95       	ret

00005ea4 <_ZN14SoftwareSerialC1Ehhb>:
    5ea4:	1f 93       	push	r17
    5ea6:	cf 93       	push	r28
    5ea8:	df 93       	push	r29
    5eaa:	ec 01       	movw	r28, r24
    5eac:	16 2f       	mov	r17, r22
    5eae:	1b 82       	std	Y+3, r1	; 0x03
    5eb0:	1a 82       	std	Y+2, r1	; 0x02
    5eb2:	88 ee       	ldi	r24, 0xE8	; 232
    5eb4:	93 e0       	ldi	r25, 0x03	; 3
    5eb6:	a0 e0       	ldi	r26, 0x00	; 0
    5eb8:	b0 e0       	ldi	r27, 0x00	; 0
    5eba:	8c 83       	std	Y+4, r24	; 0x04
    5ebc:	9d 83       	std	Y+5, r25	; 0x05
    5ebe:	ae 83       	std	Y+6, r26	; 0x06
    5ec0:	bf 83       	std	Y+7, r27	; 0x07
    5ec2:	8f e0       	ldi	r24, 0x0F	; 15
    5ec4:	93 e0       	ldi	r25, 0x03	; 3
    5ec6:	99 83       	std	Y+1, r25	; 0x01
    5ec8:	88 83       	st	Y, r24
    5eca:	1f 8a       	std	Y+23, r1	; 0x17
    5ecc:	1e 8a       	std	Y+22, r1	; 0x16
    5ece:	19 8e       	std	Y+25, r1	; 0x19
    5ed0:	18 8e       	std	Y+24, r1	; 0x18
    5ed2:	1b 8e       	std	Y+27, r1	; 0x1b
    5ed4:	1a 8e       	std	Y+26, r1	; 0x1a
    5ed6:	1d 8e       	std	Y+29, r1	; 0x1d
    5ed8:	1c 8e       	std	Y+28, r1	; 0x1c
    5eda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5edc:	8e 7f       	andi	r24, 0xFE	; 254
    5ede:	20 fb       	bst	r18, 0
    5ee0:	81 f9       	bld	r24, 1
    5ee2:	8e 8f       	std	Y+30, r24	; 0x1e
    5ee4:	64 2f       	mov	r22, r20
    5ee6:	ce 01       	movw	r24, r28
    5ee8:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_ZN14SoftwareSerial5setTXEh>
    5eec:	61 2f       	mov	r22, r17
    5eee:	ce 01       	movw	r24, r28
    5ef0:	df 91       	pop	r29
    5ef2:	cf 91       	pop	r28
    5ef4:	1f 91       	pop	r17
    5ef6:	0c 94 29 2f 	jmp	0x5e52	; 0x5e52 <_ZN14SoftwareSerial5setRXEh>

00005efa <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
    5efe:	ec 01       	movw	r28, r24
    5f00:	9a 01       	movw	r18, r20
    5f02:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    5f04:	1b 8e       	std	Y+27, r1	; 0x1b
    5f06:	1a 8e       	std	Y+26, r1	; 0x1a
    5f08:	19 8e       	std	Y+25, r1	; 0x19
    5f0a:	18 8e       	std	Y+24, r1	; 0x18
    5f0c:	1f 8a       	std	Y+23, r1	; 0x17
    5f0e:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    5f10:	60 e0       	ldi	r22, 0x00	; 0
    5f12:	79 e0       	ldi	r23, 0x09	; 9
    5f14:	8d e3       	ldi	r24, 0x3D	; 61
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	0e 94 a1 30 	call	0x6142	; 0x6142 <__divmodsi4>
    5f1c:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5f1e:	24 30       	cpi	r18, 0x04	; 4
    5f20:	31 05       	cpc	r19, r1
    5f22:	18 f0       	brcs	.+6      	; 0x5f2a <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    5f24:	c9 01       	movw	r24, r18
    5f26:	03 97       	sbiw	r24, 0x03	; 3
    5f28:	02 c0       	rjmp	.+4      	; 0x5f2e <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    5f2a:	81 e0       	ldi	r24, 0x01	; 1
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    5f2e:	9d 8f       	std	Y+29, r25	; 0x1d
    5f30:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    5f32:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f34:	66 31       	cpi	r22, 0x16	; 22
    5f36:	08 f0       	brcs	.+2      	; 0x5f3a <_ZN14SoftwareSerial5beginEl+0x40>
    5f38:	69 c0       	rjmp	.+210    	; 0x600c <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5f3a:	c9 01       	movw	r24, r18
    5f3c:	96 95       	lsr	r25
    5f3e:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5f40:	84 31       	cpi	r24, 0x14	; 20
    5f42:	91 05       	cpc	r25, r1
    5f44:	10 f0       	brcs	.+4      	; 0x5f4a <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    5f46:	43 97       	sbiw	r24, 0x13	; 19
    5f48:	02 c0       	rjmp	.+4      	; 0x5f4e <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    5f4a:	81 e0       	ldi	r24, 0x01	; 1
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5f4e:	9f 8b       	std	Y+23, r25	; 0x17
    5f50:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5f52:	36 97       	sbiw	r30, 0x06	; 6
    5f54:	18 f0       	brcs	.+6      	; 0x5f5c <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    5f56:	c9 01       	movw	r24, r18
    5f58:	05 97       	sbiw	r24, 0x05	; 5
    5f5a:	02 c0       	rjmp	.+4      	; 0x5f60 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    5f5c:	81 e0       	ldi	r24, 0x01	; 1
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    5f60:	99 8f       	std	Y+25, r25	; 0x19
    5f62:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    5f64:	c9 01       	movw	r24, r18
    5f66:	88 0f       	add	r24, r24
    5f68:	99 1f       	adc	r25, r25
    5f6a:	28 0f       	add	r18, r24
    5f6c:	39 1f       	adc	r19, r25
    5f6e:	36 95       	lsr	r19
    5f70:	27 95       	ror	r18
    5f72:	36 95       	lsr	r19
    5f74:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5f76:	2d 30       	cpi	r18, 0x0D	; 13
    5f78:	31 05       	cpc	r19, r1
    5f7a:	18 f0       	brcs	.+6      	; 0x5f82 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    5f7c:	2c 50       	subi	r18, 0x0C	; 12
    5f7e:	31 09       	sbc	r19, r1
    5f80:	02 c0       	rjmp	.+4      	; 0x5f86 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    5f82:	21 e0       	ldi	r18, 0x01	; 1
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    5f86:	3b 8f       	std	Y+27, r19	; 0x1b
    5f88:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    5f8a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    5f8e:	68 30       	cpi	r22, 0x08	; 8
    5f90:	50 f0       	brcs	.+20     	; 0x5fa6 <_ZN14SoftwareSerial5beginEl+0xac>
    5f92:	21 e0       	ldi	r18, 0x01	; 1
    5f94:	6e 30       	cpi	r22, 0x0E	; 14
    5f96:	08 f4       	brcc	.+2      	; 0x5f9a <_ZN14SoftwareSerial5beginEl+0xa0>
    5f98:	20 e0       	ldi	r18, 0x00	; 0
    5f9a:	81 e0       	ldi	r24, 0x01	; 1
    5f9c:	01 c0       	rjmp	.+2      	; 0x5fa0 <_ZN14SoftwareSerial5beginEl+0xa6>
    5f9e:	88 0f       	add	r24, r24
    5fa0:	2a 95       	dec	r18
    5fa2:	ea f7       	brpl	.-6      	; 0x5f9e <_ZN14SoftwareSerial5beginEl+0xa4>
    5fa4:	01 c0       	rjmp	.+2      	; 0x5fa8 <_ZN14SoftwareSerial5beginEl+0xae>
    5fa6:	84 e0       	ldi	r24, 0x04	; 4
    5fa8:	89 2b       	or	r24, r25
    5faa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    5fae:	9c 85       	ldd	r25, Y+12	; 0x0c
    5fb0:	98 30       	cpi	r25, 0x08	; 8
    5fb2:	38 f0       	brcs	.+14     	; 0x5fc2 <_ZN14SoftwareSerial5beginEl+0xc8>
    5fb4:	9e 30       	cpi	r25, 0x0E	; 14
    5fb6:	40 f0       	brcs	.+16     	; 0x5fc8 <_ZN14SoftwareSerial5beginEl+0xce>
    5fb8:	96 31       	cpi	r25, 0x16	; 22
    5fba:	48 f0       	brcs	.+18     	; 0x5fce <_ZN14SoftwareSerial5beginEl+0xd4>
    5fbc:	20 e0       	ldi	r18, 0x00	; 0
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	08 c0       	rjmp	.+16     	; 0x5fd2 <_ZN14SoftwareSerial5beginEl+0xd8>
    5fc2:	2d e6       	ldi	r18, 0x6D	; 109
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	05 c0       	rjmp	.+10     	; 0x5fd2 <_ZN14SoftwareSerial5beginEl+0xd8>
    5fc8:	2b e6       	ldi	r18, 0x6B	; 107
    5fca:	30 e0       	ldi	r19, 0x00	; 0
    5fcc:	02 c0       	rjmp	.+4      	; 0x5fd2 <_ZN14SoftwareSerial5beginEl+0xd8>
    5fce:	2c e6       	ldi	r18, 0x6C	; 108
    5fd0:	30 e0       	ldi	r19, 0x00	; 0
    5fd2:	3c 8b       	std	Y+20, r19	; 0x14
    5fd4:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    5fd6:	98 30       	cpi	r25, 0x08	; 8
    5fd8:	30 f4       	brcc	.+12     	; 0x5fe6 <_ZN14SoftwareSerial5beginEl+0xec>
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	01 c0       	rjmp	.+2      	; 0x5fe0 <_ZN14SoftwareSerial5beginEl+0xe6>
    5fde:	88 0f       	add	r24, r24
    5fe0:	9a 95       	dec	r25
    5fe2:	ea f7       	brpl	.-6      	; 0x5fde <_ZN14SoftwareSerial5beginEl+0xe4>
    5fe4:	0e c0       	rjmp	.+28     	; 0x6002 <_ZN14SoftwareSerial5beginEl+0x108>
    5fe6:	29 2f       	mov	r18, r25
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	9e 30       	cpi	r25, 0x0E	; 14
    5fec:	18 f4       	brcc	.+6      	; 0x5ff4 <_ZN14SoftwareSerial5beginEl+0xfa>
    5fee:	28 50       	subi	r18, 0x08	; 8
    5ff0:	31 09       	sbc	r19, r1
    5ff2:	02 c0       	rjmp	.+4      	; 0x5ff8 <_ZN14SoftwareSerial5beginEl+0xfe>
    5ff4:	2e 50       	subi	r18, 0x0E	; 14
    5ff6:	31 09       	sbc	r19, r1
    5ff8:	81 e0       	ldi	r24, 0x01	; 1
    5ffa:	01 c0       	rjmp	.+2      	; 0x5ffe <_ZN14SoftwareSerial5beginEl+0x104>
    5ffc:	88 0f       	add	r24, r24
    5ffe:	2a 95       	dec	r18
    6000:	ea f7       	brpl	.-6      	; 0x5ffc <_ZN14SoftwareSerial5beginEl+0x102>
    6002:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    6004:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6006:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6008:	01 97       	sbiw	r24, 0x01	; 1
    600a:	f1 f7       	brne	.-4      	; 0x6008 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    600c:	ce 01       	movw	r24, r28
}
    600e:	df 91       	pop	r29
    6010:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    6012:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <_ZN14SoftwareSerial6listenEv>

00006016 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6016:	08 95       	ret

00006018 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    6018:	08 95       	ret

0000601a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    601a:	1f 92       	push	r1
    601c:	0f 92       	push	r0
    601e:	0f b6       	in	r0, 0x3f	; 63
    6020:	0f 92       	push	r0
    6022:	11 24       	eor	r1, r1
    6024:	2f 93       	push	r18
    6026:	3f 93       	push	r19
    6028:	4f 93       	push	r20
    602a:	5f 93       	push	r21
    602c:	6f 93       	push	r22
    602e:	7f 93       	push	r23
    6030:	8f 93       	push	r24
    6032:	9f 93       	push	r25
    6034:	af 93       	push	r26
    6036:	bf 93       	push	r27
    6038:	ef 93       	push	r30
    603a:	ff 93       	push	r31
    603c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc>
    6040:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x1>
    6044:	09 95       	icall
    6046:	ff 91       	pop	r31
    6048:	ef 91       	pop	r30
    604a:	bf 91       	pop	r27
    604c:	af 91       	pop	r26
    604e:	9f 91       	pop	r25
    6050:	8f 91       	pop	r24
    6052:	7f 91       	pop	r23
    6054:	6f 91       	pop	r22
    6056:	5f 91       	pop	r21
    6058:	4f 91       	pop	r20
    605a:	3f 91       	pop	r19
    605c:	2f 91       	pop	r18
    605e:	0f 90       	pop	r0
    6060:	0f be       	out	0x3f, r0	; 63
    6062:	0f 90       	pop	r0
    6064:	1f 90       	pop	r1
    6066:	18 95       	reti

00006068 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    6068:	1f 92       	push	r1
    606a:	0f 92       	push	r0
    606c:	0f b6       	in	r0, 0x3f	; 63
    606e:	0f 92       	push	r0
    6070:	11 24       	eor	r1, r1
    6072:	2f 93       	push	r18
    6074:	3f 93       	push	r19
    6076:	4f 93       	push	r20
    6078:	5f 93       	push	r21
    607a:	6f 93       	push	r22
    607c:	7f 93       	push	r23
    607e:	8f 93       	push	r24
    6080:	9f 93       	push	r25
    6082:	af 93       	push	r26
    6084:	bf 93       	push	r27
    6086:	ef 93       	push	r30
    6088:	ff 93       	push	r31
    608a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc+0x2>
    608e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x3>
    6092:	09 95       	icall
    6094:	ff 91       	pop	r31
    6096:	ef 91       	pop	r30
    6098:	bf 91       	pop	r27
    609a:	af 91       	pop	r26
    609c:	9f 91       	pop	r25
    609e:	8f 91       	pop	r24
    60a0:	7f 91       	pop	r23
    60a2:	6f 91       	pop	r22
    60a4:	5f 91       	pop	r21
    60a6:	4f 91       	pop	r20
    60a8:	3f 91       	pop	r19
    60aa:	2f 91       	pop	r18
    60ac:	0f 90       	pop	r0
    60ae:	0f be       	out	0x3f, r0	; 63
    60b0:	0f 90       	pop	r0
    60b2:	1f 90       	pop	r1
    60b4:	18 95       	reti

000060b6 <__mulsi3>:
    60b6:	db 01       	movw	r26, r22
    60b8:	8f 93       	push	r24
    60ba:	9f 93       	push	r25
    60bc:	0e 94 c6 30 	call	0x618c	; 0x618c <__muluhisi3>
    60c0:	bf 91       	pop	r27
    60c2:	af 91       	pop	r26
    60c4:	a2 9f       	mul	r26, r18
    60c6:	80 0d       	add	r24, r0
    60c8:	91 1d       	adc	r25, r1
    60ca:	a3 9f       	mul	r26, r19
    60cc:	90 0d       	add	r25, r0
    60ce:	b2 9f       	mul	r27, r18
    60d0:	90 0d       	add	r25, r0
    60d2:	11 24       	eor	r1, r1
    60d4:	08 95       	ret

000060d6 <__divmodhi4>:
    60d6:	97 fb       	bst	r25, 7
    60d8:	07 2e       	mov	r0, r23
    60da:	16 f4       	brtc	.+4      	; 0x60e0 <__divmodhi4+0xa>
    60dc:	00 94       	com	r0
    60de:	07 d0       	rcall	.+14     	; 0x60ee <__divmodhi4_neg1>
    60e0:	77 fd       	sbrc	r23, 7
    60e2:	09 d0       	rcall	.+18     	; 0x60f6 <__divmodhi4_neg2>
    60e4:	0e 94 1a 31 	call	0x6234	; 0x6234 <__udivmodhi4>
    60e8:	07 fc       	sbrc	r0, 7
    60ea:	05 d0       	rcall	.+10     	; 0x60f6 <__divmodhi4_neg2>
    60ec:	3e f4       	brtc	.+14     	; 0x60fc <__divmodhi4_exit>

000060ee <__divmodhi4_neg1>:
    60ee:	90 95       	com	r25
    60f0:	81 95       	neg	r24
    60f2:	9f 4f       	sbci	r25, 0xFF	; 255
    60f4:	08 95       	ret

000060f6 <__divmodhi4_neg2>:
    60f6:	70 95       	com	r23
    60f8:	61 95       	neg	r22
    60fa:	7f 4f       	sbci	r23, 0xFF	; 255

000060fc <__divmodhi4_exit>:
    60fc:	08 95       	ret

000060fe <__udivmodsi4>:
    60fe:	a1 e2       	ldi	r26, 0x21	; 33
    6100:	1a 2e       	mov	r1, r26
    6102:	aa 1b       	sub	r26, r26
    6104:	bb 1b       	sub	r27, r27
    6106:	fd 01       	movw	r30, r26
    6108:	0d c0       	rjmp	.+26     	; 0x6124 <__udivmodsi4_ep>

0000610a <__udivmodsi4_loop>:
    610a:	aa 1f       	adc	r26, r26
    610c:	bb 1f       	adc	r27, r27
    610e:	ee 1f       	adc	r30, r30
    6110:	ff 1f       	adc	r31, r31
    6112:	a2 17       	cp	r26, r18
    6114:	b3 07       	cpc	r27, r19
    6116:	e4 07       	cpc	r30, r20
    6118:	f5 07       	cpc	r31, r21
    611a:	20 f0       	brcs	.+8      	; 0x6124 <__udivmodsi4_ep>
    611c:	a2 1b       	sub	r26, r18
    611e:	b3 0b       	sbc	r27, r19
    6120:	e4 0b       	sbc	r30, r20
    6122:	f5 0b       	sbc	r31, r21

00006124 <__udivmodsi4_ep>:
    6124:	66 1f       	adc	r22, r22
    6126:	77 1f       	adc	r23, r23
    6128:	88 1f       	adc	r24, r24
    612a:	99 1f       	adc	r25, r25
    612c:	1a 94       	dec	r1
    612e:	69 f7       	brne	.-38     	; 0x610a <__udivmodsi4_loop>
    6130:	60 95       	com	r22
    6132:	70 95       	com	r23
    6134:	80 95       	com	r24
    6136:	90 95       	com	r25
    6138:	9b 01       	movw	r18, r22
    613a:	ac 01       	movw	r20, r24
    613c:	bd 01       	movw	r22, r26
    613e:	cf 01       	movw	r24, r30
    6140:	08 95       	ret

00006142 <__divmodsi4>:
    6142:	05 2e       	mov	r0, r21
    6144:	97 fb       	bst	r25, 7
    6146:	1e f4       	brtc	.+6      	; 0x614e <__divmodsi4+0xc>
    6148:	00 94       	com	r0
    614a:	0e 94 b8 30 	call	0x6170	; 0x6170 <__negsi2>
    614e:	57 fd       	sbrc	r21, 7
    6150:	07 d0       	rcall	.+14     	; 0x6160 <__divmodsi4_neg2>
    6152:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__udivmodsi4>
    6156:	07 fc       	sbrc	r0, 7
    6158:	03 d0       	rcall	.+6      	; 0x6160 <__divmodsi4_neg2>
    615a:	4e f4       	brtc	.+18     	; 0x616e <__divmodsi4_exit>
    615c:	0c 94 b8 30 	jmp	0x6170	; 0x6170 <__negsi2>

00006160 <__divmodsi4_neg2>:
    6160:	50 95       	com	r21
    6162:	40 95       	com	r20
    6164:	30 95       	com	r19
    6166:	21 95       	neg	r18
    6168:	3f 4f       	sbci	r19, 0xFF	; 255
    616a:	4f 4f       	sbci	r20, 0xFF	; 255
    616c:	5f 4f       	sbci	r21, 0xFF	; 255

0000616e <__divmodsi4_exit>:
    616e:	08 95       	ret

00006170 <__negsi2>:
    6170:	90 95       	com	r25
    6172:	80 95       	com	r24
    6174:	70 95       	com	r23
    6176:	61 95       	neg	r22
    6178:	7f 4f       	sbci	r23, 0xFF	; 255
    617a:	8f 4f       	sbci	r24, 0xFF	; 255
    617c:	9f 4f       	sbci	r25, 0xFF	; 255
    617e:	08 95       	ret

00006180 <__tablejump2__>:
    6180:	ee 0f       	add	r30, r30
    6182:	ff 1f       	adc	r31, r31
    6184:	05 90       	lpm	r0, Z+
    6186:	f4 91       	lpm	r31, Z
    6188:	e0 2d       	mov	r30, r0
    618a:	09 94       	ijmp

0000618c <__muluhisi3>:
    618c:	0e 94 2e 31 	call	0x625c	; 0x625c <__umulhisi3>
    6190:	a5 9f       	mul	r26, r21
    6192:	90 0d       	add	r25, r0
    6194:	b4 9f       	mul	r27, r20
    6196:	90 0d       	add	r25, r0
    6198:	a4 9f       	mul	r26, r20
    619a:	80 0d       	add	r24, r0
    619c:	91 1d       	adc	r25, r1
    619e:	11 24       	eor	r1, r1
    61a0:	08 95       	ret

000061a2 <__umulsidi3>:
    61a2:	e8 94       	clt

000061a4 <__umulsidi3_helper>:
    61a4:	df 93       	push	r29
    61a6:	cf 93       	push	r28
    61a8:	fc 01       	movw	r30, r24
    61aa:	db 01       	movw	r26, r22
    61ac:	0e 94 2e 31 	call	0x625c	; 0x625c <__umulhisi3>
    61b0:	7f 93       	push	r23
    61b2:	6f 93       	push	r22
    61b4:	e9 01       	movw	r28, r18
    61b6:	9a 01       	movw	r18, r20
    61b8:	ac 01       	movw	r20, r24
    61ba:	bf 93       	push	r27
    61bc:	af 93       	push	r26
    61be:	3f 93       	push	r19
    61c0:	2f 93       	push	r18
    61c2:	df 01       	movw	r26, r30
    61c4:	0e 94 2e 31 	call	0x625c	; 0x625c <__umulhisi3>
    61c8:	26 f4       	brtc	.+8      	; 0x61d2 <__umulsidi3_helper+0x2e>
    61ca:	6c 1b       	sub	r22, r28
    61cc:	7d 0b       	sbc	r23, r29
    61ce:	82 0b       	sbc	r24, r18
    61d0:	93 0b       	sbc	r25, r19
    61d2:	9e 01       	movw	r18, r28
    61d4:	eb 01       	movw	r28, r22
    61d6:	fc 01       	movw	r30, r24
    61d8:	0e 94 3d 31 	call	0x627a	; 0x627a <__muldi3_6>
    61dc:	af 91       	pop	r26
    61de:	bf 91       	pop	r27
    61e0:	2f 91       	pop	r18
    61e2:	3f 91       	pop	r19
    61e4:	0e 94 3d 31 	call	0x627a	; 0x627a <__muldi3_6>
    61e8:	be 01       	movw	r22, r28
    61ea:	cf 01       	movw	r24, r30
    61ec:	f9 01       	movw	r30, r18
    61ee:	2f 91       	pop	r18
    61f0:	3f 91       	pop	r19
    61f2:	cf 91       	pop	r28
    61f4:	df 91       	pop	r29
    61f6:	08 95       	ret

000061f8 <__ashrdi3>:
    61f8:	97 fb       	bst	r25, 7
    61fa:	10 f8       	bld	r1, 0

000061fc <__lshrdi3>:
    61fc:	16 94       	lsr	r1
    61fe:	00 08       	sbc	r0, r0
    6200:	0f 93       	push	r16
    6202:	08 30       	cpi	r16, 0x08	; 8
    6204:	98 f0       	brcs	.+38     	; 0x622c <__lshrdi3+0x30>
    6206:	08 50       	subi	r16, 0x08	; 8
    6208:	23 2f       	mov	r18, r19
    620a:	34 2f       	mov	r19, r20
    620c:	45 2f       	mov	r20, r21
    620e:	56 2f       	mov	r21, r22
    6210:	67 2f       	mov	r22, r23
    6212:	78 2f       	mov	r23, r24
    6214:	89 2f       	mov	r24, r25
    6216:	90 2d       	mov	r25, r0
    6218:	f4 cf       	rjmp	.-24     	; 0x6202 <__lshrdi3+0x6>
    621a:	05 94       	asr	r0
    621c:	97 95       	ror	r25
    621e:	87 95       	ror	r24
    6220:	77 95       	ror	r23
    6222:	67 95       	ror	r22
    6224:	57 95       	ror	r21
    6226:	47 95       	ror	r20
    6228:	37 95       	ror	r19
    622a:	27 95       	ror	r18
    622c:	0a 95       	dec	r16
    622e:	aa f7       	brpl	.-22     	; 0x621a <__lshrdi3+0x1e>
    6230:	0f 91       	pop	r16
    6232:	08 95       	ret

00006234 <__udivmodhi4>:
    6234:	aa 1b       	sub	r26, r26
    6236:	bb 1b       	sub	r27, r27
    6238:	51 e1       	ldi	r21, 0x11	; 17
    623a:	07 c0       	rjmp	.+14     	; 0x624a <__udivmodhi4_ep>

0000623c <__udivmodhi4_loop>:
    623c:	aa 1f       	adc	r26, r26
    623e:	bb 1f       	adc	r27, r27
    6240:	a6 17       	cp	r26, r22
    6242:	b7 07       	cpc	r27, r23
    6244:	10 f0       	brcs	.+4      	; 0x624a <__udivmodhi4_ep>
    6246:	a6 1b       	sub	r26, r22
    6248:	b7 0b       	sbc	r27, r23

0000624a <__udivmodhi4_ep>:
    624a:	88 1f       	adc	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	5a 95       	dec	r21
    6250:	a9 f7       	brne	.-22     	; 0x623c <__udivmodhi4_loop>
    6252:	80 95       	com	r24
    6254:	90 95       	com	r25
    6256:	bc 01       	movw	r22, r24
    6258:	cd 01       	movw	r24, r26
    625a:	08 95       	ret

0000625c <__umulhisi3>:
    625c:	a2 9f       	mul	r26, r18
    625e:	b0 01       	movw	r22, r0
    6260:	b3 9f       	mul	r27, r19
    6262:	c0 01       	movw	r24, r0
    6264:	a3 9f       	mul	r26, r19
    6266:	70 0d       	add	r23, r0
    6268:	81 1d       	adc	r24, r1
    626a:	11 24       	eor	r1, r1
    626c:	91 1d       	adc	r25, r1
    626e:	b2 9f       	mul	r27, r18
    6270:	70 0d       	add	r23, r0
    6272:	81 1d       	adc	r24, r1
    6274:	11 24       	eor	r1, r1
    6276:	91 1d       	adc	r25, r1
    6278:	08 95       	ret

0000627a <__muldi3_6>:
    627a:	0e 94 2e 31 	call	0x625c	; 0x625c <__umulhisi3>
    627e:	46 0f       	add	r20, r22
    6280:	57 1f       	adc	r21, r23
    6282:	c8 1f       	adc	r28, r24
    6284:	d9 1f       	adc	r29, r25
    6286:	08 f4       	brcc	.+2      	; 0x628a <__muldi3_6+0x10>
    6288:	31 96       	adiw	r30, 0x01	; 1
    628a:	08 95       	ret

0000628c <malloc>:
    628c:	0f 93       	push	r16
    628e:	1f 93       	push	r17
    6290:	cf 93       	push	r28
    6292:	df 93       	push	r29
    6294:	82 30       	cpi	r24, 0x02	; 2
    6296:	91 05       	cpc	r25, r1
    6298:	10 f4       	brcc	.+4      	; 0x629e <malloc+0x12>
    629a:	82 e0       	ldi	r24, 0x02	; 2
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	e0 91 3f 07 	lds	r30, 0x073F	; 0x80073f <__flp>
    62a2:	f0 91 40 07 	lds	r31, 0x0740	; 0x800740 <__flp+0x1>
    62a6:	20 e0       	ldi	r18, 0x00	; 0
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	a0 e0       	ldi	r26, 0x00	; 0
    62ac:	b0 e0       	ldi	r27, 0x00	; 0
    62ae:	30 97       	sbiw	r30, 0x00	; 0
    62b0:	19 f1       	breq	.+70     	; 0x62f8 <malloc+0x6c>
    62b2:	40 81       	ld	r20, Z
    62b4:	51 81       	ldd	r21, Z+1	; 0x01
    62b6:	02 81       	ldd	r16, Z+2	; 0x02
    62b8:	13 81       	ldd	r17, Z+3	; 0x03
    62ba:	48 17       	cp	r20, r24
    62bc:	59 07       	cpc	r21, r25
    62be:	c8 f0       	brcs	.+50     	; 0x62f2 <malloc+0x66>
    62c0:	84 17       	cp	r24, r20
    62c2:	95 07       	cpc	r25, r21
    62c4:	69 f4       	brne	.+26     	; 0x62e0 <malloc+0x54>
    62c6:	10 97       	sbiw	r26, 0x00	; 0
    62c8:	31 f0       	breq	.+12     	; 0x62d6 <malloc+0x4a>
    62ca:	12 96       	adiw	r26, 0x02	; 2
    62cc:	0c 93       	st	X, r16
    62ce:	12 97       	sbiw	r26, 0x02	; 2
    62d0:	13 96       	adiw	r26, 0x03	; 3
    62d2:	1c 93       	st	X, r17
    62d4:	27 c0       	rjmp	.+78     	; 0x6324 <malloc+0x98>
    62d6:	00 93 3f 07 	sts	0x073F, r16	; 0x80073f <__flp>
    62da:	10 93 40 07 	sts	0x0740, r17	; 0x800740 <__flp+0x1>
    62de:	22 c0       	rjmp	.+68     	; 0x6324 <malloc+0x98>
    62e0:	21 15       	cp	r18, r1
    62e2:	31 05       	cpc	r19, r1
    62e4:	19 f0       	breq	.+6      	; 0x62ec <malloc+0x60>
    62e6:	42 17       	cp	r20, r18
    62e8:	53 07       	cpc	r21, r19
    62ea:	18 f4       	brcc	.+6      	; 0x62f2 <malloc+0x66>
    62ec:	9a 01       	movw	r18, r20
    62ee:	bd 01       	movw	r22, r26
    62f0:	ef 01       	movw	r28, r30
    62f2:	df 01       	movw	r26, r30
    62f4:	f8 01       	movw	r30, r16
    62f6:	db cf       	rjmp	.-74     	; 0x62ae <malloc+0x22>
    62f8:	21 15       	cp	r18, r1
    62fa:	31 05       	cpc	r19, r1
    62fc:	f9 f0       	breq	.+62     	; 0x633c <malloc+0xb0>
    62fe:	28 1b       	sub	r18, r24
    6300:	39 0b       	sbc	r19, r25
    6302:	24 30       	cpi	r18, 0x04	; 4
    6304:	31 05       	cpc	r19, r1
    6306:	80 f4       	brcc	.+32     	; 0x6328 <malloc+0x9c>
    6308:	8a 81       	ldd	r24, Y+2	; 0x02
    630a:	9b 81       	ldd	r25, Y+3	; 0x03
    630c:	61 15       	cp	r22, r1
    630e:	71 05       	cpc	r23, r1
    6310:	21 f0       	breq	.+8      	; 0x631a <malloc+0x8e>
    6312:	fb 01       	movw	r30, r22
    6314:	93 83       	std	Z+3, r25	; 0x03
    6316:	82 83       	std	Z+2, r24	; 0x02
    6318:	04 c0       	rjmp	.+8      	; 0x6322 <malloc+0x96>
    631a:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <__flp+0x1>
    631e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <__flp>
    6322:	fe 01       	movw	r30, r28
    6324:	32 96       	adiw	r30, 0x02	; 2
    6326:	44 c0       	rjmp	.+136    	; 0x63b0 <malloc+0x124>
    6328:	fe 01       	movw	r30, r28
    632a:	e2 0f       	add	r30, r18
    632c:	f3 1f       	adc	r31, r19
    632e:	81 93       	st	Z+, r24
    6330:	91 93       	st	Z+, r25
    6332:	22 50       	subi	r18, 0x02	; 2
    6334:	31 09       	sbc	r19, r1
    6336:	39 83       	std	Y+1, r19	; 0x01
    6338:	28 83       	st	Y, r18
    633a:	3a c0       	rjmp	.+116    	; 0x63b0 <malloc+0x124>
    633c:	20 91 3d 07 	lds	r18, 0x073D	; 0x80073d <__brkval>
    6340:	30 91 3e 07 	lds	r19, 0x073E	; 0x80073e <__brkval+0x1>
    6344:	23 2b       	or	r18, r19
    6346:	41 f4       	brne	.+16     	; 0x6358 <malloc+0xcc>
    6348:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__malloc_heap_start>
    634c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__malloc_heap_start+0x1>
    6350:	30 93 3e 07 	sts	0x073E, r19	; 0x80073e <__brkval+0x1>
    6354:	20 93 3d 07 	sts	0x073D, r18	; 0x80073d <__brkval>
    6358:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_end>
    635c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_end+0x1>
    6360:	21 15       	cp	r18, r1
    6362:	31 05       	cpc	r19, r1
    6364:	41 f4       	brne	.+16     	; 0x6376 <malloc+0xea>
    6366:	2d b7       	in	r18, 0x3d	; 61
    6368:	3e b7       	in	r19, 0x3e	; 62
    636a:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <__malloc_margin>
    636e:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <__malloc_margin+0x1>
    6372:	24 1b       	sub	r18, r20
    6374:	35 0b       	sbc	r19, r21
    6376:	e0 91 3d 07 	lds	r30, 0x073D	; 0x80073d <__brkval>
    637a:	f0 91 3e 07 	lds	r31, 0x073E	; 0x80073e <__brkval+0x1>
    637e:	e2 17       	cp	r30, r18
    6380:	f3 07       	cpc	r31, r19
    6382:	a0 f4       	brcc	.+40     	; 0x63ac <malloc+0x120>
    6384:	2e 1b       	sub	r18, r30
    6386:	3f 0b       	sbc	r19, r31
    6388:	28 17       	cp	r18, r24
    638a:	39 07       	cpc	r19, r25
    638c:	78 f0       	brcs	.+30     	; 0x63ac <malloc+0x120>
    638e:	ac 01       	movw	r20, r24
    6390:	4e 5f       	subi	r20, 0xFE	; 254
    6392:	5f 4f       	sbci	r21, 0xFF	; 255
    6394:	24 17       	cp	r18, r20
    6396:	35 07       	cpc	r19, r21
    6398:	48 f0       	brcs	.+18     	; 0x63ac <malloc+0x120>
    639a:	4e 0f       	add	r20, r30
    639c:	5f 1f       	adc	r21, r31
    639e:	50 93 3e 07 	sts	0x073E, r21	; 0x80073e <__brkval+0x1>
    63a2:	40 93 3d 07 	sts	0x073D, r20	; 0x80073d <__brkval>
    63a6:	81 93       	st	Z+, r24
    63a8:	91 93       	st	Z+, r25
    63aa:	02 c0       	rjmp	.+4      	; 0x63b0 <malloc+0x124>
    63ac:	e0 e0       	ldi	r30, 0x00	; 0
    63ae:	f0 e0       	ldi	r31, 0x00	; 0
    63b0:	cf 01       	movw	r24, r30
    63b2:	df 91       	pop	r29
    63b4:	cf 91       	pop	r28
    63b6:	1f 91       	pop	r17
    63b8:	0f 91       	pop	r16
    63ba:	08 95       	ret

000063bc <free>:
    63bc:	cf 93       	push	r28
    63be:	df 93       	push	r29
    63c0:	00 97       	sbiw	r24, 0x00	; 0
    63c2:	09 f4       	brne	.+2      	; 0x63c6 <free+0xa>
    63c4:	81 c0       	rjmp	.+258    	; 0x64c8 <free+0x10c>
    63c6:	fc 01       	movw	r30, r24
    63c8:	32 97       	sbiw	r30, 0x02	; 2
    63ca:	13 82       	std	Z+3, r1	; 0x03
    63cc:	12 82       	std	Z+2, r1	; 0x02
    63ce:	a0 91 3f 07 	lds	r26, 0x073F	; 0x80073f <__flp>
    63d2:	b0 91 40 07 	lds	r27, 0x0740	; 0x800740 <__flp+0x1>
    63d6:	10 97       	sbiw	r26, 0x00	; 0
    63d8:	81 f4       	brne	.+32     	; 0x63fa <free+0x3e>
    63da:	20 81       	ld	r18, Z
    63dc:	31 81       	ldd	r19, Z+1	; 0x01
    63de:	82 0f       	add	r24, r18
    63e0:	93 1f       	adc	r25, r19
    63e2:	20 91 3d 07 	lds	r18, 0x073D	; 0x80073d <__brkval>
    63e6:	30 91 3e 07 	lds	r19, 0x073E	; 0x80073e <__brkval+0x1>
    63ea:	28 17       	cp	r18, r24
    63ec:	39 07       	cpc	r19, r25
    63ee:	51 f5       	brne	.+84     	; 0x6444 <free+0x88>
    63f0:	f0 93 3e 07 	sts	0x073E, r31	; 0x80073e <__brkval+0x1>
    63f4:	e0 93 3d 07 	sts	0x073D, r30	; 0x80073d <__brkval>
    63f8:	67 c0       	rjmp	.+206    	; 0x64c8 <free+0x10c>
    63fa:	ed 01       	movw	r28, r26
    63fc:	20 e0       	ldi	r18, 0x00	; 0
    63fe:	30 e0       	ldi	r19, 0x00	; 0
    6400:	ce 17       	cp	r28, r30
    6402:	df 07       	cpc	r29, r31
    6404:	40 f4       	brcc	.+16     	; 0x6416 <free+0x5a>
    6406:	4a 81       	ldd	r20, Y+2	; 0x02
    6408:	5b 81       	ldd	r21, Y+3	; 0x03
    640a:	9e 01       	movw	r18, r28
    640c:	41 15       	cp	r20, r1
    640e:	51 05       	cpc	r21, r1
    6410:	f1 f0       	breq	.+60     	; 0x644e <free+0x92>
    6412:	ea 01       	movw	r28, r20
    6414:	f5 cf       	rjmp	.-22     	; 0x6400 <free+0x44>
    6416:	d3 83       	std	Z+3, r29	; 0x03
    6418:	c2 83       	std	Z+2, r28	; 0x02
    641a:	40 81       	ld	r20, Z
    641c:	51 81       	ldd	r21, Z+1	; 0x01
    641e:	84 0f       	add	r24, r20
    6420:	95 1f       	adc	r25, r21
    6422:	c8 17       	cp	r28, r24
    6424:	d9 07       	cpc	r29, r25
    6426:	59 f4       	brne	.+22     	; 0x643e <free+0x82>
    6428:	88 81       	ld	r24, Y
    642a:	99 81       	ldd	r25, Y+1	; 0x01
    642c:	84 0f       	add	r24, r20
    642e:	95 1f       	adc	r25, r21
    6430:	02 96       	adiw	r24, 0x02	; 2
    6432:	91 83       	std	Z+1, r25	; 0x01
    6434:	80 83       	st	Z, r24
    6436:	8a 81       	ldd	r24, Y+2	; 0x02
    6438:	9b 81       	ldd	r25, Y+3	; 0x03
    643a:	93 83       	std	Z+3, r25	; 0x03
    643c:	82 83       	std	Z+2, r24	; 0x02
    643e:	21 15       	cp	r18, r1
    6440:	31 05       	cpc	r19, r1
    6442:	29 f4       	brne	.+10     	; 0x644e <free+0x92>
    6444:	f0 93 40 07 	sts	0x0740, r31	; 0x800740 <__flp+0x1>
    6448:	e0 93 3f 07 	sts	0x073F, r30	; 0x80073f <__flp>
    644c:	3d c0       	rjmp	.+122    	; 0x64c8 <free+0x10c>
    644e:	e9 01       	movw	r28, r18
    6450:	fb 83       	std	Y+3, r31	; 0x03
    6452:	ea 83       	std	Y+2, r30	; 0x02
    6454:	49 91       	ld	r20, Y+
    6456:	59 91       	ld	r21, Y+
    6458:	c4 0f       	add	r28, r20
    645a:	d5 1f       	adc	r29, r21
    645c:	ec 17       	cp	r30, r28
    645e:	fd 07       	cpc	r31, r29
    6460:	61 f4       	brne	.+24     	; 0x647a <free+0xbe>
    6462:	80 81       	ld	r24, Z
    6464:	91 81       	ldd	r25, Z+1	; 0x01
    6466:	84 0f       	add	r24, r20
    6468:	95 1f       	adc	r25, r21
    646a:	02 96       	adiw	r24, 0x02	; 2
    646c:	e9 01       	movw	r28, r18
    646e:	99 83       	std	Y+1, r25	; 0x01
    6470:	88 83       	st	Y, r24
    6472:	82 81       	ldd	r24, Z+2	; 0x02
    6474:	93 81       	ldd	r25, Z+3	; 0x03
    6476:	9b 83       	std	Y+3, r25	; 0x03
    6478:	8a 83       	std	Y+2, r24	; 0x02
    647a:	e0 e0       	ldi	r30, 0x00	; 0
    647c:	f0 e0       	ldi	r31, 0x00	; 0
    647e:	12 96       	adiw	r26, 0x02	; 2
    6480:	8d 91       	ld	r24, X+
    6482:	9c 91       	ld	r25, X
    6484:	13 97       	sbiw	r26, 0x03	; 3
    6486:	00 97       	sbiw	r24, 0x00	; 0
    6488:	19 f0       	breq	.+6      	; 0x6490 <free+0xd4>
    648a:	fd 01       	movw	r30, r26
    648c:	dc 01       	movw	r26, r24
    648e:	f7 cf       	rjmp	.-18     	; 0x647e <free+0xc2>
    6490:	8d 91       	ld	r24, X+
    6492:	9c 91       	ld	r25, X
    6494:	11 97       	sbiw	r26, 0x01	; 1
    6496:	9d 01       	movw	r18, r26
    6498:	2e 5f       	subi	r18, 0xFE	; 254
    649a:	3f 4f       	sbci	r19, 0xFF	; 255
    649c:	82 0f       	add	r24, r18
    649e:	93 1f       	adc	r25, r19
    64a0:	20 91 3d 07 	lds	r18, 0x073D	; 0x80073d <__brkval>
    64a4:	30 91 3e 07 	lds	r19, 0x073E	; 0x80073e <__brkval+0x1>
    64a8:	28 17       	cp	r18, r24
    64aa:	39 07       	cpc	r19, r25
    64ac:	69 f4       	brne	.+26     	; 0x64c8 <free+0x10c>
    64ae:	30 97       	sbiw	r30, 0x00	; 0
    64b0:	29 f4       	brne	.+10     	; 0x64bc <free+0x100>
    64b2:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <__flp+0x1>
    64b6:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <__flp>
    64ba:	02 c0       	rjmp	.+4      	; 0x64c0 <free+0x104>
    64bc:	13 82       	std	Z+3, r1	; 0x03
    64be:	12 82       	std	Z+2, r1	; 0x02
    64c0:	b0 93 3e 07 	sts	0x073E, r27	; 0x80073e <__brkval+0x1>
    64c4:	a0 93 3d 07 	sts	0x073D, r26	; 0x80073d <__brkval>
    64c8:	df 91       	pop	r29
    64ca:	cf 91       	pop	r28
    64cc:	08 95       	ret

000064ce <realloc>:
    64ce:	a0 e0       	ldi	r26, 0x00	; 0
    64d0:	b0 e0       	ldi	r27, 0x00	; 0
    64d2:	ed e6       	ldi	r30, 0x6D	; 109
    64d4:	f2 e3       	ldi	r31, 0x32	; 50
    64d6:	0c 94 10 34 	jmp	0x6820	; 0x6820 <__prologue_saves__+0x8>
    64da:	ec 01       	movw	r28, r24
    64dc:	00 97       	sbiw	r24, 0x00	; 0
    64de:	21 f4       	brne	.+8      	; 0x64e8 <realloc+0x1a>
    64e0:	cb 01       	movw	r24, r22
    64e2:	0e 94 46 31 	call	0x628c	; 0x628c <malloc>
    64e6:	b4 c0       	rjmp	.+360    	; 0x6650 <realloc+0x182>
    64e8:	fc 01       	movw	r30, r24
    64ea:	e6 0f       	add	r30, r22
    64ec:	f7 1f       	adc	r31, r23
    64ee:	9c 01       	movw	r18, r24
    64f0:	22 50       	subi	r18, 0x02	; 2
    64f2:	31 09       	sbc	r19, r1
    64f4:	e2 17       	cp	r30, r18
    64f6:	f3 07       	cpc	r31, r19
    64f8:	08 f4       	brcc	.+2      	; 0x64fc <realloc+0x2e>
    64fa:	a8 c0       	rjmp	.+336    	; 0x664c <realloc+0x17e>
    64fc:	d9 01       	movw	r26, r18
    64fe:	0d 91       	ld	r16, X+
    6500:	1c 91       	ld	r17, X
    6502:	11 97       	sbiw	r26, 0x01	; 1
    6504:	06 17       	cp	r16, r22
    6506:	17 07       	cpc	r17, r23
    6508:	b0 f0       	brcs	.+44     	; 0x6536 <realloc+0x68>
    650a:	05 30       	cpi	r16, 0x05	; 5
    650c:	11 05       	cpc	r17, r1
    650e:	08 f4       	brcc	.+2      	; 0x6512 <realloc+0x44>
    6510:	9b c0       	rjmp	.+310    	; 0x6648 <realloc+0x17a>
    6512:	c8 01       	movw	r24, r16
    6514:	04 97       	sbiw	r24, 0x04	; 4
    6516:	86 17       	cp	r24, r22
    6518:	97 07       	cpc	r25, r23
    651a:	08 f4       	brcc	.+2      	; 0x651e <realloc+0x50>
    651c:	95 c0       	rjmp	.+298    	; 0x6648 <realloc+0x17a>
    651e:	02 50       	subi	r16, 0x02	; 2
    6520:	11 09       	sbc	r17, r1
    6522:	06 1b       	sub	r16, r22
    6524:	17 0b       	sbc	r17, r23
    6526:	01 93       	st	Z+, r16
    6528:	11 93       	st	Z+, r17
    652a:	6d 93       	st	X+, r22
    652c:	7c 93       	st	X, r23
    652e:	cf 01       	movw	r24, r30
    6530:	0e 94 de 31 	call	0x63bc	; 0x63bc <free>
    6534:	89 c0       	rjmp	.+274    	; 0x6648 <realloc+0x17a>
    6536:	5b 01       	movw	r10, r22
    6538:	a0 1a       	sub	r10, r16
    653a:	b1 0a       	sbc	r11, r17
    653c:	4c 01       	movw	r8, r24
    653e:	80 0e       	add	r8, r16
    6540:	91 1e       	adc	r9, r17
    6542:	a0 91 3f 07 	lds	r26, 0x073F	; 0x80073f <__flp>
    6546:	b0 91 40 07 	lds	r27, 0x0740	; 0x800740 <__flp+0x1>
    654a:	61 2c       	mov	r6, r1
    654c:	71 2c       	mov	r7, r1
    654e:	e1 2c       	mov	r14, r1
    6550:	f1 2c       	mov	r15, r1
    6552:	10 97       	sbiw	r26, 0x00	; 0
    6554:	09 f4       	brne	.+2      	; 0x6558 <realloc+0x8a>
    6556:	46 c0       	rjmp	.+140    	; 0x65e4 <realloc+0x116>
    6558:	8d 91       	ld	r24, X+
    655a:	9c 91       	ld	r25, X
    655c:	11 97       	sbiw	r26, 0x01	; 1
    655e:	a8 15       	cp	r26, r8
    6560:	b9 05       	cpc	r27, r9
    6562:	b1 f5       	brne	.+108    	; 0x65d0 <realloc+0x102>
    6564:	6c 01       	movw	r12, r24
    6566:	42 e0       	ldi	r20, 0x02	; 2
    6568:	c4 0e       	add	r12, r20
    656a:	d1 1c       	adc	r13, r1
    656c:	ca 14       	cp	r12, r10
    656e:	db 04       	cpc	r13, r11
    6570:	78 f1       	brcs	.+94     	; 0x65d0 <realloc+0x102>
    6572:	4c 01       	movw	r8, r24
    6574:	8a 18       	sub	r8, r10
    6576:	9b 08       	sbc	r9, r11
    6578:	64 01       	movw	r12, r8
    657a:	42 e0       	ldi	r20, 0x02	; 2
    657c:	c4 0e       	add	r12, r20
    657e:	d1 1c       	adc	r13, r1
    6580:	12 96       	adiw	r26, 0x02	; 2
    6582:	bc 90       	ld	r11, X
    6584:	12 97       	sbiw	r26, 0x02	; 2
    6586:	13 96       	adiw	r26, 0x03	; 3
    6588:	ac 91       	ld	r26, X
    658a:	b5 e0       	ldi	r27, 0x05	; 5
    658c:	cb 16       	cp	r12, r27
    658e:	d1 04       	cpc	r13, r1
    6590:	40 f0       	brcs	.+16     	; 0x65a2 <realloc+0xd4>
    6592:	b2 82       	std	Z+2, r11	; 0x02
    6594:	a3 83       	std	Z+3, r26	; 0x03
    6596:	91 82       	std	Z+1, r9	; 0x01
    6598:	80 82       	st	Z, r8
    659a:	d9 01       	movw	r26, r18
    659c:	6d 93       	st	X+, r22
    659e:	7c 93       	st	X, r23
    65a0:	09 c0       	rjmp	.+18     	; 0x65b4 <realloc+0xe6>
    65a2:	0e 5f       	subi	r16, 0xFE	; 254
    65a4:	1f 4f       	sbci	r17, 0xFF	; 255
    65a6:	80 0f       	add	r24, r16
    65a8:	91 1f       	adc	r25, r17
    65aa:	f9 01       	movw	r30, r18
    65ac:	91 83       	std	Z+1, r25	; 0x01
    65ae:	80 83       	st	Z, r24
    65b0:	eb 2d       	mov	r30, r11
    65b2:	fa 2f       	mov	r31, r26
    65b4:	e1 14       	cp	r14, r1
    65b6:	f1 04       	cpc	r15, r1
    65b8:	31 f0       	breq	.+12     	; 0x65c6 <realloc+0xf8>
    65ba:	d7 01       	movw	r26, r14
    65bc:	13 96       	adiw	r26, 0x03	; 3
    65be:	fc 93       	st	X, r31
    65c0:	ee 93       	st	-X, r30
    65c2:	12 97       	sbiw	r26, 0x02	; 2
    65c4:	41 c0       	rjmp	.+130    	; 0x6648 <realloc+0x17a>
    65c6:	f0 93 40 07 	sts	0x0740, r31	; 0x800740 <__flp+0x1>
    65ca:	e0 93 3f 07 	sts	0x073F, r30	; 0x80073f <__flp>
    65ce:	3c c0       	rjmp	.+120    	; 0x6648 <realloc+0x17a>
    65d0:	68 16       	cp	r6, r24
    65d2:	79 06       	cpc	r7, r25
    65d4:	08 f4       	brcc	.+2      	; 0x65d8 <realloc+0x10a>
    65d6:	3c 01       	movw	r6, r24
    65d8:	7d 01       	movw	r14, r26
    65da:	12 96       	adiw	r26, 0x02	; 2
    65dc:	0d 90       	ld	r0, X+
    65de:	bc 91       	ld	r27, X
    65e0:	a0 2d       	mov	r26, r0
    65e2:	b7 cf       	rjmp	.-146    	; 0x6552 <realloc+0x84>
    65e4:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <__brkval>
    65e8:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <__brkval+0x1>
    65ec:	88 16       	cp	r8, r24
    65ee:	99 06       	cpc	r9, r25
    65f0:	e1 f4       	brne	.+56     	; 0x662a <realloc+0x15c>
    65f2:	66 16       	cp	r6, r22
    65f4:	77 06       	cpc	r7, r23
    65f6:	c8 f4       	brcc	.+50     	; 0x662a <realloc+0x15c>
    65f8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__malloc_heap_end>
    65fc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__malloc_heap_end+0x1>
    6600:	00 97       	sbiw	r24, 0x00	; 0
    6602:	41 f4       	brne	.+16     	; 0x6614 <realloc+0x146>
    6604:	8d b7       	in	r24, 0x3d	; 61
    6606:	9e b7       	in	r25, 0x3e	; 62
    6608:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <__malloc_margin>
    660c:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <__malloc_margin+0x1>
    6610:	84 1b       	sub	r24, r20
    6612:	95 0b       	sbc	r25, r21
    6614:	e8 17       	cp	r30, r24
    6616:	f9 07       	cpc	r31, r25
    6618:	c8 f4       	brcc	.+50     	; 0x664c <realloc+0x17e>
    661a:	f0 93 3e 07 	sts	0x073E, r31	; 0x80073e <__brkval+0x1>
    661e:	e0 93 3d 07 	sts	0x073D, r30	; 0x80073d <__brkval>
    6622:	f9 01       	movw	r30, r18
    6624:	71 83       	std	Z+1, r23	; 0x01
    6626:	60 83       	st	Z, r22
    6628:	0f c0       	rjmp	.+30     	; 0x6648 <realloc+0x17a>
    662a:	cb 01       	movw	r24, r22
    662c:	0e 94 46 31 	call	0x628c	; 0x628c <malloc>
    6630:	7c 01       	movw	r14, r24
    6632:	00 97       	sbiw	r24, 0x00	; 0
    6634:	59 f0       	breq	.+22     	; 0x664c <realloc+0x17e>
    6636:	a8 01       	movw	r20, r16
    6638:	be 01       	movw	r22, r28
    663a:	0e 94 77 33 	call	0x66ee	; 0x66ee <memcpy>
    663e:	ce 01       	movw	r24, r28
    6640:	0e 94 de 31 	call	0x63bc	; 0x63bc <free>
    6644:	c7 01       	movw	r24, r14
    6646:	04 c0       	rjmp	.+8      	; 0x6650 <realloc+0x182>
    6648:	ce 01       	movw	r24, r28
    664a:	02 c0       	rjmp	.+4      	; 0x6650 <realloc+0x182>
    664c:	80 e0       	ldi	r24, 0x00	; 0
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	cd b7       	in	r28, 0x3d	; 61
    6652:	de b7       	in	r29, 0x3e	; 62
    6654:	ee e0       	ldi	r30, 0x0E	; 14
    6656:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__epilogue_restores__+0x8>

0000665a <atoi>:
    665a:	fc 01       	movw	r30, r24
    665c:	88 27       	eor	r24, r24
    665e:	99 27       	eor	r25, r25
    6660:	e8 94       	clt
    6662:	21 91       	ld	r18, Z+
    6664:	20 32       	cpi	r18, 0x20	; 32
    6666:	e9 f3       	breq	.-6      	; 0x6662 <atoi+0x8>
    6668:	29 30       	cpi	r18, 0x09	; 9
    666a:	10 f0       	brcs	.+4      	; 0x6670 <atoi+0x16>
    666c:	2e 30       	cpi	r18, 0x0E	; 14
    666e:	c8 f3       	brcs	.-14     	; 0x6662 <atoi+0x8>
    6670:	2b 32       	cpi	r18, 0x2B	; 43
    6672:	41 f0       	breq	.+16     	; 0x6684 <atoi+0x2a>
    6674:	2d 32       	cpi	r18, 0x2D	; 45
    6676:	39 f4       	brne	.+14     	; 0x6686 <atoi+0x2c>
    6678:	68 94       	set
    667a:	04 c0       	rjmp	.+8      	; 0x6684 <atoi+0x2a>
    667c:	0e 94 c4 33 	call	0x6788	; 0x6788 <__mulhi_const_10>
    6680:	82 0f       	add	r24, r18
    6682:	91 1d       	adc	r25, r1
    6684:	21 91       	ld	r18, Z+
    6686:	20 53       	subi	r18, 0x30	; 48
    6688:	2a 30       	cpi	r18, 0x0A	; 10
    668a:	c0 f3       	brcs	.-16     	; 0x667c <atoi+0x22>
    668c:	1e f4       	brtc	.+6      	; 0x6694 <atoi+0x3a>
    668e:	90 95       	com	r25
    6690:	81 95       	neg	r24
    6692:	9f 4f       	sbci	r25, 0xFF	; 255
    6694:	08 95       	ret

00006696 <strcmp_P>:
    6696:	fb 01       	movw	r30, r22
    6698:	dc 01       	movw	r26, r24
    669a:	8d 91       	ld	r24, X+
    669c:	05 90       	lpm	r0, Z+
    669e:	80 19       	sub	r24, r0
    66a0:	01 10       	cpse	r0, r1
    66a2:	d9 f3       	breq	.-10     	; 0x669a <strcmp_P+0x4>
    66a4:	99 0b       	sbc	r25, r25
    66a6:	08 95       	ret

000066a8 <__strlen_P>:
    66a8:	fc 01       	movw	r30, r24
    66aa:	05 90       	lpm	r0, Z+
    66ac:	00 20       	and	r0, r0
    66ae:	e9 f7       	brne	.-6      	; 0x66aa <__strlen_P+0x2>
    66b0:	80 95       	com	r24
    66b2:	90 95       	com	r25
    66b4:	8e 0f       	add	r24, r30
    66b6:	9f 1f       	adc	r25, r31
    66b8:	08 95       	ret

000066ba <strstr_P>:
    66ba:	fb 01       	movw	r30, r22
    66bc:	55 91       	lpm	r21, Z+
    66be:	55 23       	and	r21, r21
    66c0:	a9 f0       	breq	.+42     	; 0x66ec <strstr_P+0x32>
    66c2:	bf 01       	movw	r22, r30
    66c4:	dc 01       	movw	r26, r24
    66c6:	4d 91       	ld	r20, X+
    66c8:	45 17       	cp	r20, r21
    66ca:	41 11       	cpse	r20, r1
    66cc:	e1 f7       	brne	.-8      	; 0x66c6 <strstr_P+0xc>
    66ce:	59 f4       	brne	.+22     	; 0x66e6 <strstr_P+0x2c>
    66d0:	cd 01       	movw	r24, r26
    66d2:	05 90       	lpm	r0, Z+
    66d4:	00 20       	and	r0, r0
    66d6:	49 f0       	breq	.+18     	; 0x66ea <strstr_P+0x30>
    66d8:	4d 91       	ld	r20, X+
    66da:	40 15       	cp	r20, r0
    66dc:	41 11       	cpse	r20, r1
    66de:	c9 f3       	breq	.-14     	; 0x66d2 <strstr_P+0x18>
    66e0:	fb 01       	movw	r30, r22
    66e2:	41 11       	cpse	r20, r1
    66e4:	ef cf       	rjmp	.-34     	; 0x66c4 <strstr_P+0xa>
    66e6:	81 e0       	ldi	r24, 0x01	; 1
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	01 97       	sbiw	r24, 0x01	; 1
    66ec:	08 95       	ret

000066ee <memcpy>:
    66ee:	fb 01       	movw	r30, r22
    66f0:	dc 01       	movw	r26, r24
    66f2:	02 c0       	rjmp	.+4      	; 0x66f8 <memcpy+0xa>
    66f4:	01 90       	ld	r0, Z+
    66f6:	0d 92       	st	X+, r0
    66f8:	41 50       	subi	r20, 0x01	; 1
    66fa:	50 40       	sbci	r21, 0x00	; 0
    66fc:	d8 f7       	brcc	.-10     	; 0x66f4 <memcpy+0x6>
    66fe:	08 95       	ret

00006700 <strchr>:
    6700:	fc 01       	movw	r30, r24
    6702:	81 91       	ld	r24, Z+
    6704:	86 17       	cp	r24, r22
    6706:	21 f0       	breq	.+8      	; 0x6710 <strchr+0x10>
    6708:	88 23       	and	r24, r24
    670a:	d9 f7       	brne	.-10     	; 0x6702 <strchr+0x2>
    670c:	99 27       	eor	r25, r25
    670e:	08 95       	ret
    6710:	31 97       	sbiw	r30, 0x01	; 1
    6712:	cf 01       	movw	r24, r30
    6714:	08 95       	ret

00006716 <strcmp>:
    6716:	fb 01       	movw	r30, r22
    6718:	dc 01       	movw	r26, r24
    671a:	8d 91       	ld	r24, X+
    671c:	01 90       	ld	r0, Z+
    671e:	80 19       	sub	r24, r0
    6720:	01 10       	cpse	r0, r1
    6722:	d9 f3       	breq	.-10     	; 0x671a <strcmp+0x4>
    6724:	99 0b       	sbc	r25, r25
    6726:	08 95       	ret

00006728 <strcpy>:
    6728:	fb 01       	movw	r30, r22
    672a:	dc 01       	movw	r26, r24
    672c:	01 90       	ld	r0, Z+
    672e:	0d 92       	st	X+, r0
    6730:	00 20       	and	r0, r0
    6732:	e1 f7       	brne	.-8      	; 0x672c <strcpy+0x4>
    6734:	08 95       	ret

00006736 <strncpy>:
    6736:	fb 01       	movw	r30, r22
    6738:	dc 01       	movw	r26, r24
    673a:	41 50       	subi	r20, 0x01	; 1
    673c:	50 40       	sbci	r21, 0x00	; 0
    673e:	48 f0       	brcs	.+18     	; 0x6752 <strncpy+0x1c>
    6740:	01 90       	ld	r0, Z+
    6742:	0d 92       	st	X+, r0
    6744:	00 20       	and	r0, r0
    6746:	c9 f7       	brne	.-14     	; 0x673a <strncpy+0x4>
    6748:	01 c0       	rjmp	.+2      	; 0x674c <strncpy+0x16>
    674a:	1d 92       	st	X+, r1
    674c:	41 50       	subi	r20, 0x01	; 1
    674e:	50 40       	sbci	r21, 0x00	; 0
    6750:	e0 f7       	brcc	.-8      	; 0x674a <strncpy+0x14>
    6752:	08 95       	ret

00006754 <strstr>:
    6754:	fb 01       	movw	r30, r22
    6756:	51 91       	ld	r21, Z+
    6758:	55 23       	and	r21, r21
    675a:	a9 f0       	breq	.+42     	; 0x6786 <strstr+0x32>
    675c:	bf 01       	movw	r22, r30
    675e:	dc 01       	movw	r26, r24
    6760:	4d 91       	ld	r20, X+
    6762:	45 17       	cp	r20, r21
    6764:	41 11       	cpse	r20, r1
    6766:	e1 f7       	brne	.-8      	; 0x6760 <strstr+0xc>
    6768:	59 f4       	brne	.+22     	; 0x6780 <strstr+0x2c>
    676a:	cd 01       	movw	r24, r26
    676c:	01 90       	ld	r0, Z+
    676e:	00 20       	and	r0, r0
    6770:	49 f0       	breq	.+18     	; 0x6784 <strstr+0x30>
    6772:	4d 91       	ld	r20, X+
    6774:	40 15       	cp	r20, r0
    6776:	41 11       	cpse	r20, r1
    6778:	c9 f3       	breq	.-14     	; 0x676c <strstr+0x18>
    677a:	fb 01       	movw	r30, r22
    677c:	41 11       	cpse	r20, r1
    677e:	ef cf       	rjmp	.-34     	; 0x675e <strstr+0xa>
    6780:	81 e0       	ldi	r24, 0x01	; 1
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	01 97       	sbiw	r24, 0x01	; 1
    6786:	08 95       	ret

00006788 <__mulhi_const_10>:
    6788:	7a e0       	ldi	r23, 0x0A	; 10
    678a:	97 9f       	mul	r25, r23
    678c:	90 2d       	mov	r25, r0
    678e:	87 9f       	mul	r24, r23
    6790:	80 2d       	mov	r24, r0
    6792:	91 0d       	add	r25, r1
    6794:	11 24       	eor	r1, r1
    6796:	08 95       	ret

00006798 <__utoa_ncheck>:
    6798:	bb 27       	eor	r27, r27

0000679a <__utoa_common>:
    679a:	fb 01       	movw	r30, r22
    679c:	55 27       	eor	r21, r21
    679e:	aa 27       	eor	r26, r26
    67a0:	88 0f       	add	r24, r24
    67a2:	99 1f       	adc	r25, r25
    67a4:	aa 1f       	adc	r26, r26
    67a6:	a4 17       	cp	r26, r20
    67a8:	10 f0       	brcs	.+4      	; 0x67ae <__utoa_common+0x14>
    67aa:	a4 1b       	sub	r26, r20
    67ac:	83 95       	inc	r24
    67ae:	50 51       	subi	r21, 0x10	; 16
    67b0:	b9 f7       	brne	.-18     	; 0x67a0 <__utoa_common+0x6>
    67b2:	a0 5d       	subi	r26, 0xD0	; 208
    67b4:	aa 33       	cpi	r26, 0x3A	; 58
    67b6:	08 f0       	brcs	.+2      	; 0x67ba <__utoa_common+0x20>
    67b8:	a9 5d       	subi	r26, 0xD9	; 217
    67ba:	a1 93       	st	Z+, r26
    67bc:	00 97       	sbiw	r24, 0x00	; 0
    67be:	79 f7       	brne	.-34     	; 0x679e <__utoa_common+0x4>
    67c0:	b1 11       	cpse	r27, r1
    67c2:	b1 93       	st	Z+, r27
    67c4:	11 92       	st	Z+, r1
    67c6:	cb 01       	movw	r24, r22
    67c8:	0c 94 e6 33 	jmp	0x67cc	; 0x67cc <strrev>

000067cc <strrev>:
    67cc:	dc 01       	movw	r26, r24
    67ce:	fc 01       	movw	r30, r24
    67d0:	67 2f       	mov	r22, r23
    67d2:	71 91       	ld	r23, Z+
    67d4:	77 23       	and	r23, r23
    67d6:	e1 f7       	brne	.-8      	; 0x67d0 <strrev+0x4>
    67d8:	32 97       	sbiw	r30, 0x02	; 2
    67da:	04 c0       	rjmp	.+8      	; 0x67e4 <strrev+0x18>
    67dc:	7c 91       	ld	r23, X
    67de:	6d 93       	st	X+, r22
    67e0:	70 83       	st	Z, r23
    67e2:	62 91       	ld	r22, -Z
    67e4:	ae 17       	cp	r26, r30
    67e6:	bf 07       	cpc	r27, r31
    67e8:	c8 f3       	brcs	.-14     	; 0x67dc <strrev+0x10>
    67ea:	08 95       	ret

000067ec <eeprom_read_byte>:
    67ec:	f9 99       	sbic	0x1f, 1	; 31
    67ee:	fe cf       	rjmp	.-4      	; 0x67ec <eeprom_read_byte>
    67f0:	92 bd       	out	0x22, r25	; 34
    67f2:	81 bd       	out	0x21, r24	; 33
    67f4:	f8 9a       	sbi	0x1f, 0	; 31
    67f6:	99 27       	eor	r25, r25
    67f8:	80 b5       	in	r24, 0x20	; 32
    67fa:	08 95       	ret

000067fc <eeprom_write_byte>:
    67fc:	26 2f       	mov	r18, r22

000067fe <eeprom_write_r18>:
    67fe:	f9 99       	sbic	0x1f, 1	; 31
    6800:	fe cf       	rjmp	.-4      	; 0x67fe <eeprom_write_r18>
    6802:	1f ba       	out	0x1f, r1	; 31
    6804:	92 bd       	out	0x22, r25	; 34
    6806:	81 bd       	out	0x21, r24	; 33
    6808:	20 bd       	out	0x20, r18	; 32
    680a:	0f b6       	in	r0, 0x3f	; 63
    680c:	f8 94       	cli
    680e:	fa 9a       	sbi	0x1f, 2	; 31
    6810:	f9 9a       	sbi	0x1f, 1	; 31
    6812:	0f be       	out	0x3f, r0	; 63
    6814:	01 96       	adiw	r24, 0x01	; 1
    6816:	08 95       	ret

00006818 <__prologue_saves__>:
    6818:	2f 92       	push	r2
    681a:	3f 92       	push	r3
    681c:	4f 92       	push	r4
    681e:	5f 92       	push	r5
    6820:	6f 92       	push	r6
    6822:	7f 92       	push	r7
    6824:	8f 92       	push	r8
    6826:	9f 92       	push	r9
    6828:	af 92       	push	r10
    682a:	bf 92       	push	r11
    682c:	cf 92       	push	r12
    682e:	df 92       	push	r13
    6830:	ef 92       	push	r14
    6832:	ff 92       	push	r15
    6834:	0f 93       	push	r16
    6836:	1f 93       	push	r17
    6838:	cf 93       	push	r28
    683a:	df 93       	push	r29
    683c:	cd b7       	in	r28, 0x3d	; 61
    683e:	de b7       	in	r29, 0x3e	; 62
    6840:	ca 1b       	sub	r28, r26
    6842:	db 0b       	sbc	r29, r27
    6844:	0f b6       	in	r0, 0x3f	; 63
    6846:	f8 94       	cli
    6848:	de bf       	out	0x3e, r29	; 62
    684a:	0f be       	out	0x3f, r0	; 63
    684c:	cd bf       	out	0x3d, r28	; 61
    684e:	09 94       	ijmp

00006850 <__epilogue_restores__>:
    6850:	2a 88       	ldd	r2, Y+18	; 0x12
    6852:	39 88       	ldd	r3, Y+17	; 0x11
    6854:	48 88       	ldd	r4, Y+16	; 0x10
    6856:	5f 84       	ldd	r5, Y+15	; 0x0f
    6858:	6e 84       	ldd	r6, Y+14	; 0x0e
    685a:	7d 84       	ldd	r7, Y+13	; 0x0d
    685c:	8c 84       	ldd	r8, Y+12	; 0x0c
    685e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6860:	aa 84       	ldd	r10, Y+10	; 0x0a
    6862:	b9 84       	ldd	r11, Y+9	; 0x09
    6864:	c8 84       	ldd	r12, Y+8	; 0x08
    6866:	df 80       	ldd	r13, Y+7	; 0x07
    6868:	ee 80       	ldd	r14, Y+6	; 0x06
    686a:	fd 80       	ldd	r15, Y+5	; 0x05
    686c:	0c 81       	ldd	r16, Y+4	; 0x04
    686e:	1b 81       	ldd	r17, Y+3	; 0x03
    6870:	aa 81       	ldd	r26, Y+2	; 0x02
    6872:	b9 81       	ldd	r27, Y+1	; 0x01
    6874:	ce 0f       	add	r28, r30
    6876:	d1 1d       	adc	r29, r1
    6878:	0f b6       	in	r0, 0x3f	; 63
    687a:	f8 94       	cli
    687c:	de bf       	out	0x3e, r29	; 62
    687e:	0f be       	out	0x3f, r0	; 63
    6880:	cd bf       	out	0x3d, r28	; 61
    6882:	ed 01       	movw	r28, r26
    6884:	08 95       	ret

00006886 <__do_global_dtors>:
    6886:	13 e0       	ldi	r17, 0x03	; 3
    6888:	cc e7       	ldi	r28, 0x7C	; 124
    688a:	d3 e0       	ldi	r29, 0x03	; 3
    688c:	04 c0       	rjmp	.+8      	; 0x6896 <__do_global_dtors+0x10>
    688e:	fe 01       	movw	r30, r28
    6890:	0e 94 c0 30 	call	0x6180	; 0x6180 <__tablejump2__>
    6894:	21 96       	adiw	r28, 0x01	; 1
    6896:	cd 37       	cpi	r28, 0x7D	; 125
    6898:	d1 07       	cpc	r29, r17
    689a:	c9 f7       	brne	.-14     	; 0x688e <__do_global_dtors+0x8>
    689c:	f8 94       	cli

0000689e <__stop_program>:
    689e:	ff cf       	rjmp	.-2      	; 0x689e <__stop_program>
