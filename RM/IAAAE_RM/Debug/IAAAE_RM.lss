
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800100  00004850  000048e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004850  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e1  0080028e  0080028e  00004a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce8  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002094f  00000000  00000000  000057cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049ef  00000000  00000000  0002611b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000072b8  00000000  00000000  0002ab0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fdc  00000000  00000000  00031dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005cdb  00000000  00000000  00034da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011239  00000000  00000000  0003aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  0004bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 29 04 	jmp	0x852	; 0x852 <__dtors_end>
       4:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
       8:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
       c:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__vector_3>
      10:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__vector_3>
      14:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__vector_3>
      18:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      1c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      20:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      24:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      28:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      2c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      30:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      34:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      38:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      3c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      40:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__vector_16>
      44:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      48:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__vector_18>
      4c:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__vector_19>
      50:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      54:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      58:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      5c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      60:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_24>
      64:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     224:	45 72 72 6f 72 3d 00                                Error=.

0000022b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     22b:	20 7c 20 00                                          | .

0000022f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     22f:	54 65 6d 70 3d 00                                   Temp=.

00000235 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     235:	20 7c 20 00                                          | .

00000239 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     239:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000242 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     242:	20 7c 20 00                                          | .

00000246 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     246:	50 56 2d 56 3d 00                                   PV-V=.

0000024c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     24c:	20 7c 20 00                                          | .

00000250 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     250:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000258 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     258:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000265 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     265:	20 7c 20 00                                          | .

00000269 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     269:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

00000272 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     272:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

0000027c <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     27c:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     28c:	6f 64 65 3d 00                                      ode=.

00000291 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     291:	20 7c 20 00                                          | .

00000295 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     295:	42 45 52 3d 00                                      BER=.

0000029a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     29a:	20 7c 20 00                                          | .

0000029e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     29e:	52 53 53 49 3d 00                                   RSSI=.

000002a4 <_ZL12b64_alphabet>:
     2a4:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     2b4:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     2c4:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     2d4:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000002e5 <_ZZ4loopE3__c>:
     2e5:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000002ef <_ZZ8sendDatavE3__c_0>:
     2ef:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     2ff:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     30f:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

0000031e <_ZZ8sendDatavE3__c>:
     31e:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     32e:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

0000033f <_ZZ12takeReadingsvE3__c>:
     33f:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     34f:	2e 2e 00                                            ...

00000352 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     352:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     362:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

0000036d <_ZZ21ensureFonaInitialisedbE3__c_1>:
     36d:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     37d:	73 2e 2e 2e 00                                      s....

00000382 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     382:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     392:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

0000039d <_ZZ21ensureFonaInitialisedbE3__c>:
     39d:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     3ad:	61 2e 2e 2e 00                                      a....

000003b2 <_ZZ5setupE3__c>:
     3b2:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003be <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_21>:
     3be:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     3ce:	45 78 74 65 6e 64 65 64 20 54 79 70 65 73 20 54     Extended Types T
     3de:	65 73 74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e     est Complete~~~~
     3ee:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00              ~~~~~~~~~~~~.

000003fb <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_20>:
     3fb:	2a 2a 2a 20 54 45 4d 50 20 46 41 49 4c 20 2a 2a     *** TEMP FAIL **
     40b:	2a 00                                               *.

0000040d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_19>:
     40d:	2a 2a 2a 20 50 56 20 46 41 49 4c 20 2a 2a 2a 00     *** PV FAIL ***.

0000041d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_18>:
     41d:	2a 2a 2a 20 45 52 52 20 46 41 49 4c 20 2a 2a 2a     *** ERR FAIL ***
	...

0000042e <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_17>:
     42e:	2a 2a 2a 20 44 54 20 46 41 49 4c 20 2a 2a 2a 00     *** DT FAIL ***.

0000043e <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_16>:
     43e:	2a 2a 2a 20 43 55 52 52 20 46 41 49 4c 20 2a 2a     *** CURR FAIL **
     44e:	2a 00                                               *.

00000450 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_15>:
     450:	2a 2a 2a 20 42 41 54 54 20 46 41 49 4c 20 2a 2a     *** BATT FAIL **
     460:	2a 00                                               *.

00000462 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_14>:
     462:	46 69 72 73 74 20 50 61 72 73 65 64 20 52 65 61     First Parsed Rea
     472:	64 69 6e 67 3a 00                                   ding:.

00000478 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_13>:
     478:	2a 2a 2a 20 52 45 41 44 20 4e 55 4d 20 46 41 49     *** READ NUM FAI
     488:	4c 20 2a 2a 2a 00                                   L ***.

0000048e <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_12>:
     48e:	47 53 4d 20 50 61 79 6c 6f 61 64 20 54 6f 20 42     GSM Payload To B
     49e:	65 20 53 65 6e 74 20 4f 76 65 72 20 57 65 62 3a     e Sent Over Web:
	...

000004af <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_11>:
     4af:	54 65 73 74 20 46 6f 72 20 50 72 69 6e 74 20 4f     Test For Print O
     4bf:	75 74 70 75 74 3a 00                                utput:.

000004c6 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_10>:
     4c6:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     4d6:	40 31 30 20 2a 2a 2a 00                             @10 ***.

000004de <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_9>:
     4de:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     4ee:	40 39 20 2a 2a 2a 00                                @9 ***.

000004f5 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_8>:
     4f5:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     505:	40 38 20 2a 2a 2a 00                                @8 ***.

0000050c <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_7>:
     50c:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     51c:	40 37 20 2a 2a 2a 00                                @7 ***.

00000523 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_6>:
     523:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     533:	40 36 20 2a 2a 2a 00                                @6 ***.

0000053a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_5>:
     53a:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     54a:	40 35 20 2a 2a 2a 00                                @5 ***.

00000551 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_4>:
     551:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     561:	40 34 20 2a 2a 2a 00                                @4 ***.

00000568 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_3>:
     568:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     578:	40 33 20 2a 2a 2a 00                                @3 ***.

0000057f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_2>:
     57f:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     58f:	40 32 20 2a 2a 2a 00                                @2 ***.

00000596 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_1>:
     596:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     5a6:	40 31 20 2a 2a 2a 00                                @1 ***.

000005ad <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_0>:
     5ad:	43 61 73 74 20 62 61 63 6b 20 61 66 74 65 72 20     Cast back after 
     5bd:	69 6e 74 20 73 74 6f 72 61 67 65 20 76 61 6c 3a     int storage val:
	...

000005ce <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c>:
     5ce:	4e 65 74 73 74 61 74 20 35 20 2b 20 52 65 73 75     Netstat 5 + Resu
     5de:	6c 74 43 6f 64 65 20 31 20 2b 20 45 72 72 6f 72     ltCode 1 + Error
     5ee:	20 31 3d 00                                          1=.

000005f2 <_ZZ22encodeSingleSensorTestvE3__c_8>:
     5f2:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     602:	4c 20 40 36 20 2a 2a 2a 00                          L @6 ***.

0000060b <_ZZ22encodeSingleSensorTestvE3__c_7>:
     60b:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     61b:	4c 20 40 35 20 2a 2a 2a 00                          L @5 ***.

00000624 <_ZZ22encodeSingleSensorTestvE3__c_6>:
     624:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     634:	4c 20 40 34 20 2a 2a 2a 00                          L @4 ***.

0000063d <_ZZ22encodeSingleSensorTestvE3__c_5>:
     63d:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     64d:	4c 20 40 33 20 2a 2a 2a 00                          L @3 ***.

00000656 <_ZZ22encodeSingleSensorTestvE3__c_4>:
     656:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     666:	4c 20 40 32 20 2a 2a 2a 00                          L @2 ***.

0000066f <_ZZ22encodeSingleSensorTestvE3__c_3>:
     66f:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     67f:	4c 20 40 31 20 2a 2a 2a 00                          L @1 ***.

00000688 <_ZZ22encodeSingleSensorTestvE3__c_2>:
     688:	2a 2a 2a 20 44 45 43 20 4c 45 4e 20 46 41 49 4c     *** DEC LEN FAIL
     698:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000006a0 <_ZZ22encodeSingleSensorTestvE3__c_1>:
     6a0:	2a 2a 2a 20 44 45 43 20 4c 45 4e 20 46 41 49 4c     *** DEC LEN FAIL
     6b0:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000006b8 <_ZZ22encodeSingleSensorTestvE3__c_0>:
     6b8:	2a 2a 2a 20 45 4e 43 20 4c 45 4e 20 46 41 49 4c     *** ENC LEN FAIL
     6c8:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000006d0 <_ZZ22encodeSingleSensorTestvE3__c>:
     6d0:	2a 2a 2a 20 45 4e 43 20 4c 45 4e 20 46 41 49 4c     *** ENC LEN FAIL
     6e0:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000006e8 <_ZZ13encodeStrTestPcS_E3__c_7>:
     6e8:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     6f8:	20 40 34 20 2a 2a 2a 00                              @4 ***.

00000700 <_ZZ13encodeStrTestPcS_E3__c_6>:
     700:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     710:	20 40 33 20 2a 2a 2a 00                              @3 ***.

00000718 <_ZZ13encodeStrTestPcS_E3__c_5>:
     718:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     728:	20 40 32 20 2a 2a 2a 00                              @2 ***.

00000730 <_ZZ13encodeStrTestPcS_E3__c_4>:
     730:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     740:	20 40 31 20 2a 2a 2a 00                              @1 ***.

00000748 <_ZZ13encodeStrTestPcS_E3__c_3>:
     748:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     758:	20 40 35 20 2a 2a 2a 00                              @5 ***.

00000760 <_ZZ13encodeStrTestPcS_E3__c_2>:
     760:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     770:	20 40 34 20 2a 2a 2a 00                              @4 ***.

00000778 <_ZZ13encodeStrTestPcS_E3__c_1>:
     778:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     788:	20 40 33 20 2a 2a 2a 00                              @3 ***.

00000790 <_ZZ13encodeStrTestPcS_E3__c_0>:
     790:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     7a0:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000007a8 <_ZZ13encodeStrTestPcS_E3__c>:
     7a8:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     7b8:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000007c0 <_ZZ13encodeIntTesthE3__c_0>:
     7c0:	2a 2a 2a 20 49 4e 54 20 45 4e 43 20 46 41 49 4c     *** INT ENC FAIL
     7d0:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000007d8 <_ZZ13encodeIntTesthE3__c>:
     7d8:	2a 2a 2a 20 49 4e 54 20 45 4e 43 20 46 41 49 4c     *** INT ENC FAIL
     7e8:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000007f0 <digital_pin_to_timer_PGM>:
     7f0:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     800:	00 00 00 00                                         ....

00000804 <digital_pin_to_bit_mask_PGM>:
     804:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     814:	04 08 10 20                                         ... 

00000818 <digital_pin_to_port_PGM>:
     818:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     828:	03 03 03 03                                         ....

0000082c <port_to_input_PGM>:
     82c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000836 <port_to_output_PGM>:
     836:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000840 <port_to_mode_PGM>:
     840:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000084a <__ctors_start>:
     84a:	26 0f       	add	r18, r22
     84c:	b4 13       	cpse	r27, r20
     84e:	77 1a       	sub	r7, r23

00000850 <__ctors_end>:
     850:	36 0f       	add	r19, r22

00000852 <__dtors_end>:
     852:	11 24       	eor	r1, r1
     854:	1f be       	out	0x3f, r1	; 63
     856:	cf ef       	ldi	r28, 0xFF	; 255
     858:	d8 e0       	ldi	r29, 0x08	; 8
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	cd bf       	out	0x3d, r28	; 61

0000085e <__do_copy_data>:
     85e:	12 e0       	ldi	r17, 0x02	; 2
     860:	a0 e0       	ldi	r26, 0x00	; 0
     862:	b1 e0       	ldi	r27, 0x01	; 1
     864:	e0 e5       	ldi	r30, 0x50	; 80
     866:	f8 e4       	ldi	r31, 0x48	; 72
     868:	02 c0       	rjmp	.+4      	; 0x86e <__do_copy_data+0x10>
     86a:	05 90       	lpm	r0, Z+
     86c:	0d 92       	st	X+, r0
     86e:	ae 38       	cpi	r26, 0x8E	; 142
     870:	b1 07       	cpc	r27, r17
     872:	d9 f7       	brne	.-10     	; 0x86a <__do_copy_data+0xc>

00000874 <__do_clear_bss>:
     874:	25 e0       	ldi	r18, 0x05	; 5
     876:	ae e8       	ldi	r26, 0x8E	; 142
     878:	b2 e0       	ldi	r27, 0x02	; 2
     87a:	01 c0       	rjmp	.+2      	; 0x87e <.do_clear_bss_start>

0000087c <.do_clear_bss_loop>:
     87c:	1d 92       	st	X+, r1

0000087e <.do_clear_bss_start>:
     87e:	af 36       	cpi	r26, 0x6F	; 111
     880:	b2 07       	cpc	r27, r18
     882:	e1 f7       	brne	.-8      	; 0x87c <.do_clear_bss_loop>

00000884 <__do_global_ctors>:
     884:	14 e0       	ldi	r17, 0x04	; 4
     886:	c8 e2       	ldi	r28, 0x28	; 40
     888:	d4 e0       	ldi	r29, 0x04	; 4
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__do_global_ctors+0x10>
     88c:	21 97       	sbiw	r28, 0x01	; 1
     88e:	fe 01       	movw	r30, r28
     890:	0e 94 8a 21 	call	0x4314	; 0x4314 <__tablejump2__>
     894:	c5 32       	cpi	r28, 0x25	; 37
     896:	d1 07       	cpc	r29, r17
     898:	c9 f7       	brne	.-14     	; 0x88c <__do_global_ctors+0x8>
     89a:	0e 94 a5 1a 	call	0x354a	; 0x354a <main>
     89e:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <__do_global_dtors>

000008a2 <__bad_interrupt>:
     8a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008a6 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     8a6:	83 5e       	subi	r24, 0xE3	; 227
     8a8:	9e 4f       	sbci	r25, 0xFE	; 254
     8aa:	dc 01       	movw	r26, r24
     8ac:	8d 91       	ld	r24, X+
     8ae:	9c 91       	ld	r25, X
     8b0:	dc 01       	movw	r26, r24
     8b2:	ed 91       	ld	r30, X+
     8b4:	fc 91       	ld	r31, X
     8b6:	04 80       	ldd	r0, Z+4	; 0x04
     8b8:	f5 81       	ldd	r31, Z+5	; 0x05
     8ba:	e0 2d       	mov	r30, r0
     8bc:	09 94       	ijmp

000008be <_ZN13Adafruit_FONA5writeEh>:
     8be:	83 5e       	subi	r24, 0xE3	; 227
     8c0:	9e 4f       	sbci	r25, 0xFE	; 254
     8c2:	dc 01       	movw	r26, r24
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	dc 01       	movw	r26, r24
     8ca:	ed 91       	ld	r30, X+
     8cc:	fc 91       	ld	r31, X
     8ce:	01 90       	ld	r0, Z+
     8d0:	f0 81       	ld	r31, Z
     8d2:	e0 2d       	mov	r30, r0
     8d4:	09 94       	ijmp

000008d6 <_ZN13Adafruit_FONA4readEv>:
     8d6:	83 5e       	subi	r24, 0xE3	; 227
     8d8:	9e 4f       	sbci	r25, 0xFE	; 254
     8da:	dc 01       	movw	r26, r24
     8dc:	8d 91       	ld	r24, X+
     8de:	9c 91       	ld	r25, X
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	06 80       	ldd	r0, Z+6	; 0x06
     8e8:	f7 81       	ldd	r31, Z+7	; 0x07
     8ea:	e0 2d       	mov	r30, r0
     8ec:	09 94       	ijmp

000008ee <_ZN13Adafruit_FONA4peekEv>:
     8ee:	83 5e       	subi	r24, 0xE3	; 227
     8f0:	9e 4f       	sbci	r25, 0xFE	; 254
     8f2:	dc 01       	movw	r26, r24
     8f4:	8d 91       	ld	r24, X+
     8f6:	9c 91       	ld	r25, X
     8f8:	dc 01       	movw	r26, r24
     8fa:	ed 91       	ld	r30, X+
     8fc:	fc 91       	ld	r31, X
     8fe:	00 84       	ldd	r0, Z+8	; 0x08
     900:	f1 85       	ldd	r31, Z+9	; 0x09
     902:	e0 2d       	mov	r30, r0
     904:	09 94       	ijmp

00000906 <_ZN13Adafruit_FONA5flushEv>:
     906:	83 5e       	subi	r24, 0xE3	; 227
     908:	9e 4f       	sbci	r25, 0xFE	; 254
     90a:	dc 01       	movw	r26, r24
     90c:	8d 91       	ld	r24, X+
     90e:	9c 91       	ld	r25, X
     910:	dc 01       	movw	r26, r24
     912:	ed 91       	ld	r30, X+
     914:	fc 91       	ld	r31, X
     916:	02 84       	ldd	r0, Z+10	; 0x0a
     918:	f3 85       	ldd	r31, Z+11	; 0x0b
     91a:	e0 2d       	mov	r30, r0
     91c:	09 94       	ijmp

0000091e <_ZN13Adafruit_FONAC1Eab>:
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	00 d0       	rcall	.+0      	; 0x930 <_ZN13Adafruit_FONAC1Eab+0x12>
     930:	00 d0       	rcall	.+0      	; 0x932 <_ZN13Adafruit_FONAC1Eab+0x14>
     932:	00 d0       	rcall	.+0      	; 0x934 <_ZN13Adafruit_FONAC1Eab+0x16>
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	8c 01       	movw	r16, r24
     93a:	c6 2e       	mov	r12, r22
     93c:	d4 2e       	mov	r13, r20
     93e:	fc 01       	movw	r30, r24
     940:	13 82       	std	Z+3, r1	; 0x03
     942:	12 82       	std	Z+2, r1	; 0x02
     944:	88 ee       	ldi	r24, 0xE8	; 232
     946:	93 e0       	ldi	r25, 0x03	; 3
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	84 83       	std	Z+4, r24	; 0x04
     94e:	95 83       	std	Z+5, r25	; 0x05
     950:	a6 83       	std	Z+6, r26	; 0x06
     952:	b7 83       	std	Z+7, r27	; 0x07
     954:	8a e3       	ldi	r24, 0x3A	; 58
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	86 87       	std	Z+14, r24	; 0x0e
     960:	78 01       	movw	r14, r16
     962:	fb ee       	ldi	r31, 0xEB	; 235
     964:	ef 1a       	sub	r14, r31
     966:	fe ef       	ldi	r31, 0xFE	; 254
     968:	ff 0a       	sbc	r15, r31
     96a:	60 e7       	ldi	r22, 0x70	; 112
     96c:	72 e0       	ldi	r23, 0x02	; 2
     96e:	c7 01       	movw	r24, r14
     970:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <_ZN6StringC1EPKc>
     974:	f8 01       	movw	r30, r16
     976:	c4 86       	std	Z+12, r12	; 0x0c
     978:	d5 86       	std	Z+13, r13	; 0x0d
     97a:	e2 5f       	subi	r30, 0xF2	; 242
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	8c e1       	ldi	r24, 0x1C	; 28
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	80 83       	st	Z, r24
     986:	32 96       	adiw	r30, 0x02	; 2
     988:	11 82       	std	Z+1, r1	; 0x01
     98a:	10 82       	st	Z, r1
     98c:	32 96       	adiw	r30, 0x02	; 2
     98e:	11 82       	std	Z+1, r1	; 0x01
     990:	10 82       	st	Z, r1
     992:	3b 96       	adiw	r30, 0x0b	; 11
     994:	11 82       	std	Z+1, r1	; 0x01
     996:	10 82       	st	Z, r1
     998:	39 97       	sbiw	r30, 0x09	; 9
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 83       	st	Z, r24
     99e:	67 e0       	ldi	r22, 0x07	; 7
     9a0:	71 e0       	ldi	r23, 0x01	; 1
     9a2:	ce 01       	movw	r24, r28
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <_ZN6StringC1EPKc>
     9aa:	be 01       	movw	r22, r28
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	c7 01       	movw	r24, r14
     9b2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <_ZN6StringaSEOS_>
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <_ZN6StringD1Ev>
     9be:	f8 01       	movw	r30, r16
     9c0:	e5 5e       	subi	r30, 0xE5	; 229
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	89 e1       	ldi	r24, 0x19	; 25
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
     9cc:	26 96       	adiw	r28, 0x06	; 6
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	08 95       	ret

000009ea <_ZN13Adafruit_FONA12setUserAgentE6String>:
     9ea:	8b 5e       	subi	r24, 0xEB	; 235
     9ec:	9e 4f       	sbci	r25, 0xFE	; 254
     9ee:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <_ZN6StringaSERKS_>

000009f2 <_ZN13Adafruit_FONA10flushInputEv>:
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	ec 01       	movw	r28, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8c 01       	movw	r16, r24
     a02:	0f 5f       	subi	r16, 0xFF	; 255
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	88 97       	sbiw	r24, 0x28	; 40
     a08:	d8 f4       	brcc	.+54     	; 0xa40 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     a0a:	e8 81       	ld	r30, Y
     a0c:	f9 81       	ldd	r31, Y+1	; 0x01
     a0e:	04 80       	ldd	r0, Z+4	; 0x04
     a10:	f5 81       	ldd	r31, Z+5	; 0x05
     a12:	e0 2d       	mov	r30, r0
     a14:	ce 01       	movw	r24, r28
     a16:	09 95       	icall
     a18:	89 2b       	or	r24, r25
     a1a:	51 f0       	breq	.+20     	; 0xa30 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     a1c:	e8 81       	ld	r30, Y
     a1e:	f9 81       	ldd	r31, Y+1	; 0x01
     a20:	06 80       	ldd	r0, Z+6	; 0x06
     a22:	f7 81       	ldd	r31, Z+7	; 0x07
     a24:	e0 2d       	mov	r30, r0
     a26:	ce 01       	movw	r24, r28
     a28:	09 95       	icall
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	ed cf       	rjmp	.-38     	; 0xa0a <_ZN13Adafruit_FONA10flushInputEv+0x18>
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     a3c:	c8 01       	movw	r24, r16
     a3e:	e0 cf       	rjmp	.-64     	; 0xa00 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <_ZN13Adafruit_FONA8readlineEjb>:
     a4a:	bf 92       	push	r11
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	7c 01       	movw	r14, r24
     a5e:	b4 2e       	mov	r11, r20
     a60:	8b 01       	movw	r16, r22
     a62:	00 0f       	add	r16, r16
     a64:	11 1f       	adc	r17, r17
     a66:	00 0f       	add	r16, r16
     a68:	11 1f       	adc	r17, r17
     a6a:	c0 e0       	ldi	r28, 0x00	; 0
     a6c:	d0 e0       	ldi	r29, 0x00	; 0
     a6e:	67 01       	movw	r12, r14
     a70:	83 ee       	ldi	r24, 0xE3	; 227
     a72:	c8 1a       	sub	r12, r24
     a74:	8e ef       	ldi	r24, 0xFE	; 254
     a76:	d8 0a       	sbc	r13, r24
     a78:	01 15       	cp	r16, r1
     a7a:	11 05       	cpc	r17, r1
     a7c:	c9 f1       	breq	.+114    	; 0xaf0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a7e:	ce 3f       	cpi	r28, 0xFE	; 254
     a80:	d1 05       	cpc	r29, r1
     a82:	98 f0       	brcs	.+38     	; 0xaaa <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a84:	64 e8       	ldi	r22, 0x84	; 132
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	81 e8       	ldi	r24, 0x81	; 129
     a8a:	94 e0       	ldi	r25, 0x04	; 4
     a8c:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
     a90:	2f c0       	rjmp	.+94     	; 0xaf0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a92:	f6 01       	movw	r30, r12
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	dc 01       	movw	r26, r24
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	06 80       	ldd	r0, Z+6	; 0x06
     aa0:	f7 81       	ldd	r31, Z+7	; 0x07
     aa2:	e0 2d       	mov	r30, r0
     aa4:	09 95       	icall
     aa6:	8d 30       	cpi	r24, 0x0D	; 13
     aa8:	69 f4       	brne	.+26     	; 0xac4 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     aaa:	d6 01       	movw	r26, r12
     aac:	8d 91       	ld	r24, X+
     aae:	9c 91       	ld	r25, X
     ab0:	dc 01       	movw	r26, r24
     ab2:	ed 91       	ld	r30, X+
     ab4:	fc 91       	ld	r31, X
     ab6:	04 80       	ldd	r0, Z+4	; 0x04
     ab8:	f5 81       	ldd	r31, Z+5	; 0x05
     aba:	e0 2d       	mov	r30, r0
     abc:	09 95       	icall
     abe:	89 2b       	or	r24, r25
     ac0:	41 f7       	brne	.-48     	; 0xa92 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <_ZN13Adafruit_FONA8readlineEjb+0x92>
     ac4:	8a 30       	cpi	r24, 0x0A	; 10
     ac6:	21 f4       	brne	.+8      	; 0xad0 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     ac8:	20 97       	sbiw	r28, 0x00	; 0
     aca:	79 f3       	breq	.-34     	; 0xaaa <_ZN13Adafruit_FONA8readlineEjb+0x60>
     acc:	bb 20       	and	r11, r11
     ace:	81 f0       	breq	.+32     	; 0xaf0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ad0:	f7 01       	movw	r30, r14
     ad2:	ec 0f       	add	r30, r28
     ad4:	fd 1f       	adc	r31, r29
     ad6:	87 87       	std	Z+15, r24	; 0x0f
     ad8:	21 96       	adiw	r28, 0x01	; 1
     ada:	e7 cf       	rjmp	.-50     	; 0xaaa <_ZN13Adafruit_FONA8readlineEjb+0x60>
     adc:	01 50       	subi	r16, 0x01	; 1
     ade:	11 09       	sbc	r17, r1
     ae0:	39 f0       	breq	.+14     	; 0xaf0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     aee:	c4 cf       	rjmp	.-120    	; 0xa78 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     af0:	f7 01       	movw	r30, r14
     af2:	ec 0f       	add	r30, r28
     af4:	fd 1f       	adc	r31, r29
     af6:	17 86       	std	Z+15, r1	; 0x0f
     af8:	8c 2f       	mov	r24, r28
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	08 95       	ret

00000b0e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	8b 01       	movw	r16, r22
     b1a:	ba 01       	movw	r22, r20
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN13Adafruit_FONA8readlineEjb>
     b22:	6a e8       	ldi	r22, 0x8A	; 138
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	81 e8       	ldi	r24, 0x81	; 129
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     b2e:	2f 96       	adiw	r28, 0x0f	; 15
     b30:	be 01       	movw	r22, r28
     b32:	81 e8       	ldi	r24, 0x81	; 129
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
     b3a:	b8 01       	movw	r22, r16
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 95 23 	call	0x472a	; 0x472a <strcmp_P>
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	89 2b       	or	r24, r25
     b46:	09 f0       	breq	.+2      	; 0xb4a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	82 2f       	mov	r24, r18
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
     b64:	8b 01       	movw	r16, r22
     b66:	7a 01       	movw	r14, r20
     b68:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN13Adafruit_FONA10flushInputEv>
     b6c:	6d e7       	ldi	r22, 0x7D	; 125
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	81 e8       	ldi	r24, 0x81	; 129
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     b78:	b8 01       	movw	r22, r16
     b7a:	81 e8       	ldi	r24, 0x81	; 129
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
     b82:	fe 01       	movw	r30, r28
     b84:	e3 5e       	subi	r30, 0xE3	; 227
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	b8 01       	movw	r22, r16
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	b7 01       	movw	r22, r14
     b96:	ce 01       	movw	r24, r28
     b98:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN13Adafruit_FONA8readlineEjb>
     b9c:	18 2f       	mov	r17, r24
     b9e:	66 e7       	ldi	r22, 0x76	; 118
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	81 e8       	ldi	r24, 0x81	; 129
     ba4:	94 e0       	ldi	r25, 0x04	; 4
     ba6:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     baa:	be 01       	movw	r22, r28
     bac:	61 5f       	subi	r22, 0xF1	; 241
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	81 e8       	ldi	r24, 0x81	; 129
     bb2:	94 e0       	ldi	r25, 0x04	; 4
     bb4:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
     bb8:	81 2f       	mov	r24, r17
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	08 95       	ret

00000bc8 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	6b 01       	movw	r12, r22
     be0:	7a 01       	movw	r14, r20
     be2:	59 01       	movw	r10, r18
     be4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN13Adafruit_FONA10flushInputEv>
     be8:	6f e6       	ldi	r22, 0x6F	; 111
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	81 e8       	ldi	r24, 0x81	; 129
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     bf4:	b6 01       	movw	r22, r12
     bf6:	81 e8       	ldi	r24, 0x81	; 129
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     bfe:	62 e2       	ldi	r22, 0x22	; 34
     c00:	81 e8       	ldi	r24, 0x81	; 129
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print5printEc>
     c08:	b7 01       	movw	r22, r14
     c0a:	81 e8       	ldi	r24, 0x81	; 129
     c0c:	94 e0       	ldi	r25, 0x04	; 4
     c0e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     c12:	62 e2       	ldi	r22, 0x22	; 34
     c14:	81 e8       	ldi	r24, 0x81	; 129
     c16:	94 e0       	ldi	r25, 0x04	; 4
     c18:	0e 94 4a 1b 	call	0x3694	; 0x3694 <_ZN5Print7printlnEc>
     c1c:	8e 01       	movw	r16, r28
     c1e:	03 5e       	subi	r16, 0xE3	; 227
     c20:	1e 4f       	sbci	r17, 0xFE	; 254
     c22:	b6 01       	movw	r22, r12
     c24:	f8 01       	movw	r30, r16
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     c2e:	62 e2       	ldi	r22, 0x22	; 34
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print5printEc>
     c3a:	b7 01       	movw	r22, r14
     c3c:	f8 01       	movw	r30, r16
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     c46:	62 e2       	ldi	r22, 0x22	; 34
     c48:	f8 01       	movw	r30, r16
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <_ZN5Print7printlnEc>
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	b5 01       	movw	r22, r10
     c56:	ce 01       	movw	r24, r28
     c58:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN13Adafruit_FONA8readlineEjb>
     c5c:	18 2f       	mov	r17, r24
     c5e:	68 e6       	ldi	r22, 0x68	; 104
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	81 e8       	ldi	r24, 0x81	; 129
     c64:	94 e0       	ldi	r25, 0x04	; 4
     c66:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     c6a:	be 01       	movw	r22, r28
     c6c:	61 5f       	subi	r22, 0xF1	; 241
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	81 e8       	ldi	r24, 0x81	; 129
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
     c78:	81 2f       	mov	r24, r17
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	08 95       	ret

00000c90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	8a 01       	movw	r16, r20
     c9c:	a9 01       	movw	r20, r18
     c9e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     ca2:	88 23       	and	r24, r24
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     ca6:	b8 01       	movw	r22, r16
     ca8:	ce 01       	movw	r24, r28
     caa:	0f 96       	adiw	r24, 0x0f	; 15
     cac:	0e 94 95 23 	call	0x472a	; 0x472a <strcmp_P>
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	89 2b       	or	r24, r25
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	82 2f       	mov	r24, r18
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <_ZN13Adafruit_FONA5beginEhh>:
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
     cd6:	f6 2e       	mov	r15, r22
     cd8:	e4 2e       	mov	r14, r20
     cda:	8f e1       	ldi	r24, 0x1F	; 31
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 b4 1a 	call	0x3568	; 0x3568 <_Znwj>
     ce2:	8c 01       	movw	r16, r24
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	4e 2d       	mov	r20, r14
     ce8:	6f 2d       	mov	r22, r15
     cea:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <_ZN14SoftwareSerialC1Ehhb>
     cee:	7e 01       	movw	r14, r28
     cf0:	83 ee       	ldi	r24, 0xE3	; 227
     cf2:	e8 1a       	sub	r14, r24
     cf4:	8e ef       	ldi	r24, 0xFE	; 254
     cf6:	f8 0a       	sbc	r15, r24
     cf8:	d7 01       	movw	r26, r14
     cfa:	0d 93       	st	X+, r16
     cfc:	1c 93       	st	X, r17
     cfe:	40 ec       	ldi	r20, 0xC0	; 192
     d00:	52 e1       	ldi	r21, 0x12	; 18
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	c8 01       	movw	r24, r16
     d08:	0e 94 86 20 	call	0x410c	; 0x410c <_ZN14SoftwareSerial5beginEl>
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d10:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <pinMode>
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	8c 85       	ldd	r24, Y+12	; 0x0c
     d18:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
     d1c:	6a e0       	ldi	r22, 0x0A	; 10
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d2c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
     d30:	64 e6       	ldi	r22, 0x64	; 100
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d40:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
     d44:	68 ef       	ldi	r22, 0xF8	; 248
     d46:	71 e0       	ldi	r23, 0x01	; 1
     d48:	81 e8       	ldi	r24, 0x81	; 129
     d4a:	94 e0       	ldi	r25, 0x04	; 4
     d4c:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
     d50:	8e e0       	ldi	r24, 0x0E	; 14
     d52:	c8 2e       	mov	r12, r24
     d54:	d1 2c       	mov	r13, r1
     d56:	8e 01       	movw	r16, r28
     d58:	05 5e       	subi	r16, 0xE5	; 229
     d5a:	1e 4f       	sbci	r17, 0xFE	; 254
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	dc 01       	movw	r26, r24
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	04 80       	ldd	r0, Z+4	; 0x04
     d6a:	f5 81       	ldd	r31, Z+5	; 0x05
     d6c:	e0 2d       	mov	r30, r0
     d6e:	09 95       	icall
     d70:	89 2b       	or	r24, r25
     d72:	59 f0       	breq	.+22     	; 0xd8a <_ZN13Adafruit_FONA5beginEhh+0xc6>
     d74:	f7 01       	movw	r30, r14
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	dc 01       	movw	r26, r24
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	06 80       	ldd	r0, Z+6	; 0x06
     d82:	f7 81       	ldd	r31, Z+7	; 0x07
     d84:	e0 2d       	mov	r30, r0
     d86:	09 95       	icall
     d88:	e9 cf       	rjmp	.-46     	; 0xd5c <_ZN13Adafruit_FONA5beginEhh+0x98>
     d8a:	f8 01       	movw	r30, r16
     d8c:	40 81       	ld	r20, Z
     d8e:	51 81       	ldd	r21, Z+1	; 0x01
     d90:	24 ef       	ldi	r18, 0xF4	; 244
     d92:	31 e0       	ldi	r19, 0x01	; 1
     d94:	65 ef       	ldi	r22, 0xF5	; 245
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	ce 01       	movw	r24, r28
     d9a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d9e:	81 11       	cpse	r24, r1
     da0:	34 c0       	rjmp	.+104    	; 0xe0a <_ZN13Adafruit_FONA5beginEhh+0x146>
     da2:	d7 01       	movw	r26, r14
     da4:	8d 91       	ld	r24, X+
     da6:	9c 91       	ld	r25, X
     da8:	dc 01       	movw	r26, r24
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	04 80       	ldd	r0, Z+4	; 0x04
     db0:	f5 81       	ldd	r31, Z+5	; 0x05
     db2:	e0 2d       	mov	r30, r0
     db4:	09 95       	icall
     db6:	89 2b       	or	r24, r25
     db8:	59 f0       	breq	.+22     	; 0xdd0 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     dba:	f7 01       	movw	r30, r14
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	dc 01       	movw	r26, r24
     dc2:	ed 91       	ld	r30, X+
     dc4:	fc 91       	ld	r31, X
     dc6:	06 80       	ldd	r0, Z+6	; 0x06
     dc8:	f7 81       	ldd	r31, Z+7	; 0x07
     dca:	e0 2d       	mov	r30, r0
     dcc:	09 95       	icall
     dce:	e9 cf       	rjmp	.-46     	; 0xda2 <_ZN13Adafruit_FONA5beginEhh+0xde>
     dd0:	24 ef       	ldi	r18, 0xF4	; 244
     dd2:	31 e0       	ldi	r19, 0x01	; 1
     dd4:	42 ef       	ldi	r20, 0xF2	; 242
     dd6:	51 e0       	ldi	r21, 0x01	; 1
     dd8:	6f ee       	ldi	r22, 0xEF	; 239
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	ce 01       	movw	r24, r28
     dde:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     de2:	81 11       	cpse	r24, r1
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <_ZN13Adafruit_FONA5beginEhh+0x146>
     de6:	64 ef       	ldi	r22, 0xF4	; 244
     de8:	71 e0       	ldi	r23, 0x01	; 1
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     df2:	b1 e0       	ldi	r27, 0x01	; 1
     df4:	cb 1a       	sub	r12, r27
     df6:	d1 08       	sbc	r13, r1
     df8:	09 f0       	breq	.+2      	; 0xdfc <_ZN13Adafruit_FONA5beginEhh+0x138>
     dfa:	b0 cf       	rjmp	.-160    	; 0xd5c <_ZN13Adafruit_FONA5beginEhh+0x98>
     dfc:	5e c0       	rjmp	.+188    	; 0xeba <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     dfe:	64 e6       	ldi	r22, 0x64	; 100
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     e0a:	f8 01       	movw	r30, r16
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	24 ef       	ldi	r18, 0xF4	; 244
     e12:	31 e0       	ldi	r19, 0x01	; 1
     e14:	62 ec       	ldi	r22, 0xC2	; 194
     e16:	71 e0       	ldi	r23, 0x01	; 1
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e1e:	64 e6       	ldi	r22, 0x64	; 100
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     e2a:	d8 01       	movw	r26, r16
     e2c:	4d 91       	ld	r20, X+
     e2e:	5c 91       	ld	r21, X
     e30:	24 ef       	ldi	r18, 0xF4	; 244
     e32:	31 e0       	ldi	r19, 0x01	; 1
     e34:	6d eb       	ldi	r22, 0xBD	; 189
     e36:	71 e0       	ldi	r23, 0x01	; 1
     e38:	ce 01       	movw	r24, r28
     e3a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e3e:	81 11       	cpse	r24, r1
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <_ZN13Adafruit_FONA5beginEhh+0x182>
     e42:	12 e0       	ldi	r17, 0x02	; 2
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <_ZN13Adafruit_FONA5beginEhh+0x184>
     e46:	11 e0       	ldi	r17, 0x01	; 1
     e48:	64 e6       	ldi	r22, 0x64	; 100
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN13Adafruit_FONA10flushInputEv>
     e5a:	66 eb       	ldi	r22, 0xB6	; 182
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	81 e8       	ldi	r24, 0x81	; 129
     e60:	94 e0       	ldi	r25, 0x04	; 4
     e62:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     e66:	66 e1       	ldi	r22, 0x16	; 22
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	81 e8       	ldi	r24, 0x81	; 129
     e6c:	94 e0       	ldi	r25, 0x04	; 4
     e6e:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
     e72:	66 e1       	ldi	r22, 0x16	; 22
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	f7 01       	movw	r30, r14
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	64 ef       	ldi	r22, 0xF4	; 244
     e84:	71 e0       	ldi	r23, 0x01	; 1
     e86:	ce 01       	movw	r24, r28
     e88:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN13Adafruit_FONA8readlineEjb>
     e8c:	6f ea       	ldi	r22, 0xAF	; 175
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	81 e8       	ldi	r24, 0x81	; 129
     e92:	94 e0       	ldi	r25, 0x04	; 4
     e94:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
     e98:	2f 96       	adiw	r28, 0x0f	; 15
     e9a:	be 01       	movw	r22, r28
     e9c:	81 e8       	ldi	r24, 0x81	; 129
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
     ea4:	64 ea       	ldi	r22, 0xA4	; 164
     ea6:	71 e0       	ldi	r23, 0x01	; 1
     ea8:	ce 01       	movw	r24, r28
     eaa:	0e 94 a7 23 	call	0x474e	; 0x474e <strstr_P>
     eae:	89 2b       	or	r24, r25
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     eb2:	81 2f       	mov	r24, r17
     eb4:	35 c0       	rjmp	.+106    	; 0xf20 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	33 c0       	rjmp	.+102    	; 0xf20 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     eba:	d8 01       	movw	r26, r16
     ebc:	4d 91       	ld	r20, X+
     ebe:	5c 91       	ld	r21, X
     ec0:	24 ef       	ldi	r18, 0xF4	; 244
     ec2:	31 e0       	ldi	r19, 0x01	; 1
     ec4:	6c ee       	ldi	r22, 0xEC	; 236
     ec6:	71 e0       	ldi	r23, 0x01	; 1
     ec8:	ce 01       	movw	r24, r28
     eca:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ece:	64 e6       	ldi	r22, 0x64	; 100
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     eda:	f8 01       	movw	r30, r16
     edc:	40 81       	ld	r20, Z
     ede:	51 81       	ldd	r21, Z+1	; 0x01
     ee0:	24 ef       	ldi	r18, 0xF4	; 244
     ee2:	31 e0       	ldi	r19, 0x01	; 1
     ee4:	69 ee       	ldi	r22, 0xE9	; 233
     ee6:	71 e0       	ldi	r23, 0x01	; 1
     ee8:	ce 01       	movw	r24, r28
     eea:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     eee:	64 e6       	ldi	r22, 0x64	; 100
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
     efa:	d8 01       	movw	r26, r16
     efc:	4d 91       	ld	r20, X+
     efe:	5c 91       	ld	r21, X
     f00:	24 ef       	ldi	r18, 0xF4	; 244
     f02:	31 e0       	ldi	r19, 0x01	; 1
     f04:	66 ee       	ldi	r22, 0xE6	; 230
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f0e:	81 11       	cpse	r24, r1
     f10:	76 cf       	rjmp	.-276    	; 0xdfe <_ZN13Adafruit_FONA5beginEhh+0x13a>
     f12:	67 ec       	ldi	r22, 0xC7	; 199
     f14:	71 e0       	ldi	r23, 0x01	; 1
     f16:	81 e8       	ldi	r24, 0x81	; 129
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	08 95       	ret

00000f32 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	ec 01       	movw	r28, r24
     f40:	79 01       	movw	r14, r18
     f42:	98 01       	movw	r18, r16
     f44:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     f48:	b7 01       	movw	r22, r14
     f4a:	ce 01       	movw	r24, r28
     f4c:	0f 96       	adiw	r24, 0x0f	; 15
     f4e:	0e 94 95 23 	call	0x472a	; 0x472a <strcmp_P>
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	89 2b       	or	r24, r25
     f56:	09 f0       	breq	.+2      	; 0xf5a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	82 2f       	mov	r24, r18
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	08 95       	ret

00000f6a <_ZN13Adafruit_FONA10enableGPRSEb>:
     f6a:	7f 92       	push	r7
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
     f86:	28 ee       	ldi	r18, 0xE8	; 232
     f88:	3d ef       	ldi	r19, 0xFD	; 253
     f8a:	66 23       	and	r22, r22
     f8c:	09 f4       	brne	.+2      	; 0xf90 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     f8e:	1f c1       	rjmp	.+574    	; 0x11ce <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     f90:	4e e5       	ldi	r20, 0x5E	; 94
     f92:	51 e0       	ldi	r21, 0x01	; 1
     f94:	63 e5       	ldi	r22, 0x53	; 83
     f96:	71 e0       	ldi	r23, 0x01	; 1
     f98:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f9c:	81 11       	cpse	r24, r1
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	78 2e       	mov	r7, r24
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     fa6:	77 24       	eor	r7, r7
     fa8:	73 94       	inc	r7
     faa:	7e 01       	movw	r14, r28
     fac:	85 ee       	ldi	r24, 0xE5	; 229
     fae:	e8 1a       	sub	r14, r24
     fb0:	8e ef       	ldi	r24, 0xFE	; 254
     fb2:	f8 0a       	sbc	r15, r24
     fb4:	f7 01       	movw	r30, r14
     fb6:	40 81       	ld	r20, Z
     fb8:	51 81       	ldd	r21, Z+1	; 0x01
     fba:	20 e1       	ldi	r18, 0x10	; 16
     fbc:	37 e2       	ldi	r19, 0x27	; 39
     fbe:	68 e4       	ldi	r22, 0x48	; 72
     fc0:	71 e0       	ldi	r23, 0x01	; 1
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     fcc:	25 c1       	rjmp	.+586    	; 0x1218 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     fce:	f7 01       	movw	r30, r14
     fd0:	40 81       	ld	r20, Z
     fd2:	51 81       	ldd	r21, Z+1	; 0x01
     fd4:	20 e1       	ldi	r18, 0x10	; 16
     fd6:	37 e2       	ldi	r19, 0x27	; 39
     fd8:	6a e2       	ldi	r22, 0x2A	; 42
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	ce 01       	movw	r24, r28
     fde:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fe2:	88 23       	and	r24, r24
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     fe6:	1a c1       	rjmp	.+564    	; 0x121c <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     fe8:	4e 01       	movw	r8, r28
     fea:	f2 ef       	ldi	r31, 0xF2	; 242
     fec:	8f 1a       	sub	r8, r31
     fee:	fe ef       	ldi	r31, 0xFE	; 254
     ff0:	9f 0a       	sbc	r9, r31
     ff2:	f4 01       	movw	r30, r8
     ff4:	40 81       	ld	r20, Z
     ff6:	51 81       	ldd	r21, Z+1	; 0x01
     ff8:	41 15       	cp	r20, r1
     ffa:	51 05       	cpc	r21, r1
     ffc:	71 f4       	brne	.+28     	; 0x101a <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     ffe:	f7 01       	movw	r30, r14
    1000:	40 81       	ld	r20, Z
    1002:	51 81       	ldd	r21, Z+1	; 0x01
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	65 ec       	ldi	r22, 0xC5	; 197
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1012:	81 11       	cpse	r24, r1
    1014:	ce c0       	rjmp	.+412    	; 0x11b2 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    1016:	89 e0       	ldi	r24, 0x09	; 9
    1018:	0e c1       	rjmp	.+540    	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    101a:	f7 01       	movw	r30, r14
    101c:	20 81       	ld	r18, Z
    101e:	31 81       	ldd	r19, Z+1	; 0x01
    1020:	00 e1       	ldi	r16, 0x10	; 16
    1022:	17 e2       	ldi	r17, 0x27	; 39
    1024:	66 e1       	ldi	r22, 0x16	; 22
    1026:	71 e0       	ldi	r23, 0x01	; 1
    1028:	ce 01       	movw	r24, r28
    102a:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    102e:	88 23       	and	r24, r24
    1030:	09 f4       	brne	.+2      	; 0x1034 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    1032:	f6 c0       	rjmp	.+492    	; 0x1220 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN13Adafruit_FONA10flushInputEv>
    103a:	8e 01       	movw	r16, r28
    103c:	03 5e       	subi	r16, 0xE3	; 227
    103e:	1e 4f       	sbci	r17, 0xFE	; 254
    1040:	6c e0       	ldi	r22, 0x0C	; 12
    1042:	71 e0       	ldi	r23, 0x01	; 1
    1044:	f8 01       	movw	r30, r16
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    104e:	f4 01       	movw	r30, r8
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	f8 01       	movw	r30, r16
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    105e:	5e 01       	movw	r10, r28
    1060:	f0 ef       	ldi	r31, 0xF0	; 240
    1062:	af 1a       	sub	r10, r31
    1064:	fe ef       	ldi	r31, 0xFE	; 254
    1066:	bf 0a       	sbc	r11, r31
    1068:	f5 01       	movw	r30, r10
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	89 2b       	or	r24, r25
    1070:	79 f0       	breq	.+30     	; 0x1090 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    1072:	62 e3       	ldi	r22, 0x32	; 50
    1074:	71 e0       	ldi	r23, 0x01	; 1
    1076:	f8 01       	movw	r30, r16
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    1080:	f5 01       	movw	r30, r10
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	f8 01       	movw	r30, r16
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1090:	6e 01       	movw	r12, r28
    1092:	fe ee       	ldi	r31, 0xEE	; 238
    1094:	cf 1a       	sub	r12, r31
    1096:	fe ef       	ldi	r31, 0xFE	; 254
    1098:	df 0a       	sbc	r13, r31
    109a:	f6 01       	movw	r30, r12
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	89 2b       	or	r24, r25
    10a2:	79 f0       	breq	.+30     	; 0x10c2 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    10a4:	62 e3       	ldi	r22, 0x32	; 50
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	f8 01       	movw	r30, r16
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    10b2:	f6 01       	movw	r30, r12
    10b4:	60 81       	ld	r22, Z
    10b6:	71 81       	ldd	r23, Z+1	; 0x01
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    10c2:	64 e3       	ldi	r22, 0x34	; 52
    10c4:	71 e0       	ldi	r23, 0x01	; 1
    10c6:	f8 01       	movw	r30, r16
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
    10d0:	65 e0       	ldi	r22, 0x05	; 5
    10d2:	71 e0       	ldi	r23, 0x01	; 1
    10d4:	81 e8       	ldi	r24, 0x81	; 129
    10d6:	94 e0       	ldi	r25, 0x04	; 4
    10d8:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    10dc:	6b ef       	ldi	r22, 0xFB	; 251
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	81 e8       	ldi	r24, 0x81	; 129
    10e2:	94 e0       	ldi	r25, 0x04	; 4
    10e4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    10e8:	f4 01       	movw	r30, r8
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	81 e8       	ldi	r24, 0x81	; 129
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    10f6:	f5 01       	movw	r30, r10
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	89 2b       	or	r24, r25
    10fe:	69 f0       	breq	.+26     	; 0x111a <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    1100:	62 e3       	ldi	r22, 0x32	; 50
    1102:	71 e0       	ldi	r23, 0x01	; 1
    1104:	81 e8       	ldi	r24, 0x81	; 129
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    110c:	f5 01       	movw	r30, r10
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	81 e8       	ldi	r24, 0x81	; 129
    1114:	94 e0       	ldi	r25, 0x04	; 4
    1116:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    111a:	f6 01       	movw	r30, r12
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	89 2b       	or	r24, r25
    1122:	69 f0       	breq	.+26     	; 0x113e <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    1124:	62 e3       	ldi	r22, 0x32	; 50
    1126:	71 e0       	ldi	r23, 0x01	; 1
    1128:	81 e8       	ldi	r24, 0x81	; 129
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    1130:	f6 01       	movw	r30, r12
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	81 e8       	ldi	r24, 0x81	; 129
    1138:	94 e0       	ldi	r25, 0x04	; 4
    113a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    113e:	64 e3       	ldi	r22, 0x34	; 52
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	81 e8       	ldi	r24, 0x81	; 129
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
    114a:	f7 01       	movw	r30, r14
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	40 e1       	ldi	r20, 0x10	; 16
    1152:	57 e2       	ldi	r21, 0x27	; 39
    1154:	ce 01       	movw	r24, r28
    1156:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    115e:	62 c0       	rjmp	.+196    	; 0x1224 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    1160:	f5 01       	movw	r30, r10
    1162:	40 81       	ld	r20, Z
    1164:	51 81       	ldd	r21, Z+1	; 0x01
    1166:	41 15       	cp	r20, r1
    1168:	51 05       	cpc	r21, r1
    116a:	39 f4       	brne	.+14     	; 0x117a <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    116c:	f6 01       	movw	r30, r12
    116e:	40 81       	ld	r20, Z
    1170:	51 81       	ldd	r21, Z+1	; 0x01
    1172:	41 15       	cp	r20, r1
    1174:	51 05       	cpc	r21, r1
    1176:	79 f4       	brne	.+30     	; 0x1196 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    1178:	42 cf       	rjmp	.-380    	; 0xffe <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    117a:	f7 01       	movw	r30, r14
    117c:	20 81       	ld	r18, Z
    117e:	31 81       	ldd	r19, Z+1	; 0x01
    1180:	00 e1       	ldi	r16, 0x10	; 16
    1182:	17 e2       	ldi	r17, 0x27	; 39
    1184:	66 ee       	ldi	r22, 0xE6	; 230
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    118e:	81 11       	cpse	r24, r1
    1190:	ed cf       	rjmp	.-38     	; 0x116c <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1192:	87 e0       	ldi	r24, 0x07	; 7
    1194:	50 c0       	rjmp	.+160    	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1196:	f7 01       	movw	r30, r14
    1198:	20 81       	ld	r18, Z
    119a:	31 81       	ldd	r19, Z+1	; 0x01
    119c:	00 e1       	ldi	r16, 0x10	; 16
    119e:	17 e2       	ldi	r17, 0x27	; 39
    11a0:	62 ed       	ldi	r22, 0xD2	; 210
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	ce 01       	movw	r24, r28
    11a6:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    11aa:	81 11       	cpse	r24, r1
    11ac:	28 cf       	rjmp	.-432    	; 0xffe <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    11ae:	88 e0       	ldi	r24, 0x08	; 8
    11b0:	42 c0       	rjmp	.+132    	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    11b2:	f7 01       	movw	r30, r14
    11b4:	40 81       	ld	r20, Z
    11b6:	51 81       	ldd	r21, Z+1	; 0x01
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	6c eb       	ldi	r22, 0xBC	; 188
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11c6:	88 23       	and	r24, r24
    11c8:	79 f1       	breq	.+94     	; 0x1228 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    11ca:	87 2d       	mov	r24, r7
    11cc:	34 c0       	rjmp	.+104    	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    11ce:	44 eb       	ldi	r20, 0xB4	; 180
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	69 ea       	ldi	r22, 0xA9	; 169
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11da:	88 23       	and	r24, r24
    11dc:	39 f1       	breq	.+78     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    11de:	8e 01       	movw	r16, r28
    11e0:	05 5e       	subi	r16, 0xE5	; 229
    11e2:	1e 4f       	sbci	r17, 0xFE	; 254
    11e4:	f8 01       	movw	r30, r16
    11e6:	40 81       	ld	r20, Z
    11e8:	51 81       	ldd	r21, Z+1	; 0x01
    11ea:	20 e1       	ldi	r18, 0x10	; 16
    11ec:	37 e2       	ldi	r19, 0x27	; 39
    11ee:	6c e9       	ldi	r22, 0x9C	; 156
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11f8:	88 23       	and	r24, r24
    11fa:	d1 f0       	breq	.+52     	; 0x1230 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    11fc:	f8 01       	movw	r30, r16
    11fe:	40 81       	ld	r20, Z
    1200:	51 81       	ldd	r21, Z+1	; 0x01
    1202:	20 e1       	ldi	r18, 0x10	; 16
    1204:	37 e2       	ldi	r19, 0x27	; 39
    1206:	61 e9       	ldi	r22, 0x91	; 145
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	ce 01       	movw	r24, r28
    120c:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1210:	88 23       	and	r24, r24
    1212:	81 f0       	breq	.+32     	; 0x1234 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1220:	85 e0       	ldi	r24, 0x05	; 5
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1224:	86 e0       	ldi	r24, 0x06	; 6
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1228:	8a e0       	ldi	r24, 0x0A	; 10
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    122c:	8b e0       	ldi	r24, 0x0B	; 11
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1230:	8c e0       	ldi	r24, 0x0C	; 12
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1234:	8d e0       	ldi	r24, 0x0D	; 13
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	9f 90       	pop	r9
    124c:	8f 90       	pop	r8
    124e:	7f 90       	pop	r7
    1250:	08 95       	ret

00001252 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    1252:	af 92       	push	r10
    1254:	bf 92       	push	r11
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	5b 01       	movw	r10, r22
    1266:	6a 01       	movw	r12, r20
    1268:	e2 2e       	mov	r14, r18
    126a:	0f 96       	adiw	r24, 0x0f	; 15
    126c:	0e 94 a7 23 	call	0x474e	; 0x474e <strstr_P>
    1270:	ec 01       	movw	r28, r24
    1272:	89 2b       	or	r24, r25
    1274:	c1 f0       	breq	.+48     	; 0x12a6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1276:	c5 01       	movw	r24, r10
    1278:	0e 94 9e 23 	call	0x473c	; 0x473c <__strlen_P>
    127c:	8c 0f       	add	r24, r28
    127e:	9d 1f       	adc	r25, r29
    1280:	c0 e0       	ldi	r28, 0x00	; 0
    1282:	f1 2c       	mov	r15, r1
    1284:	c0 17       	cp	r28, r16
    1286:	41 f0       	breq	.+16     	; 0x1298 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1288:	b7 01       	movw	r22, r14
    128a:	0e 94 ca 23 	call	0x4794	; 0x4794 <strchr>
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	51 f0       	breq	.+20     	; 0x12a6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	cf 5f       	subi	r28, 0xFF	; 255
    1296:	f6 cf       	rjmp	.-20     	; 0x1284 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1298:	0e 94 77 23 	call	0x46ee	; 0x46ee <atoi>
    129c:	f6 01       	movw	r30, r12
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	08 95       	ret

000012bc <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ec 01       	movw	r28, r24
    12d0:	6a 01       	movw	r12, r20
    12d2:	59 01       	movw	r10, r18
    12d4:	10 2f       	mov	r17, r16
    12d6:	0e 2d       	mov	r16, r14
    12d8:	44 ef       	ldi	r20, 0xF4	; 244
    12da:	51 e0       	ldi	r21, 0x01	; 1
    12dc:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    12e0:	21 2f       	mov	r18, r17
    12e2:	a5 01       	movw	r20, r10
    12e4:	b6 01       	movw	r22, r12
    12e6:	ce 01       	movw	r24, r28
    12e8:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    12ec:	18 2f       	mov	r17, r24
    12ee:	88 23       	and	r24, r24
    12f0:	31 f0       	breq	.+12     	; 0x12fe <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	64 ef       	ldi	r22, 0xF4	; 244
    12f6:	71 e0       	ldi	r23, 0x01	; 1
    12f8:	ce 01       	movw	r24, r28
    12fa:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN13Adafruit_FONA8readlineEjb>
    12fe:	81 2f       	mov	r24, r17
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	08 95       	ret

00001314 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	28 97       	sbiw	r28, 0x08	; 8
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1336:	18 86       	std	Y+8, r1	; 0x08
    1338:	1f 82       	std	Y+7, r1	; 0x07
    133a:	1e 82       	std	Y+6, r1	; 0x06
    133c:	1d 82       	std	Y+5, r1	; 0x05
    133e:	1c 82       	std	Y+4, r1	; 0x04
    1340:	1b 82       	std	Y+3, r1	; 0x03
    1342:	1a 82       	std	Y+2, r1	; 0x02
    1344:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1346:	e1 2c       	mov	r14, r1
    1348:	0c e2       	ldi	r16, 0x2C	; 44
    134a:	9e 01       	movw	r18, r28
    134c:	29 5f       	subi	r18, 0xF9	; 249
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	4d e9       	ldi	r20, 0x9D	; 157
    1352:	51 e0       	ldi	r21, 0x01	; 1
    1354:	66 e9       	ldi	r22, 0x96	; 150
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    135c:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    135e:	ee 24       	eor	r14, r14
    1360:	e3 94       	inc	r14
    1362:	9e 01       	movw	r18, r28
    1364:	2b 5f       	subi	r18, 0xFB	; 251
    1366:	3f 4f       	sbci	r19, 0xFF	; 255
    1368:	4f e8       	ldi	r20, 0x8F	; 143
    136a:	51 e0       	ldi	r21, 0x01	; 1
    136c:	68 e8       	ldi	r22, 0x88	; 136
    136e:	71 e0       	ldi	r23, 0x01	; 1
    1370:	c6 01       	movw	r24, r12
    1372:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1376:	88 23       	and	r24, r24
    1378:	19 f0       	breq	.+6      	; 0x1380 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	f8 26       	eor	r15, r24
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1380:	ff 24       	eor	r15, r15
    1382:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1384:	e1 2c       	mov	r14, r1
    1386:	0c e2       	ldi	r16, 0x2C	; 44
    1388:	9e 01       	movw	r18, r28
    138a:	2d 5f       	subi	r18, 0xFD	; 253
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	51 e0       	ldi	r21, 0x01	; 1
    1392:	67 e7       	ldi	r22, 0x77	; 119
    1394:	71 e0       	ldi	r23, 0x01	; 1
    1396:	c6 01       	movw	r24, r12
    1398:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    139c:	88 23       	and	r24, r24
    139e:	11 f0       	breq	.+4      	; 0x13a4 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    13a0:	1b 81       	ldd	r17, Y+3	; 0x03
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    13a4:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    13a6:	ee 24       	eor	r14, r14
    13a8:	e3 94       	inc	r14
    13aa:	0c e2       	ldi	r16, 0x2C	; 44
    13ac:	9e 01       	movw	r18, r28
    13ae:	2f 5f       	subi	r18, 0xFF	; 255
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	4f e6       	ldi	r20, 0x6F	; 111
    13b4:	51 e0       	ldi	r21, 0x01	; 1
    13b6:	66 e6       	ldi	r22, 0x66	; 102
    13b8:	71 e0       	ldi	r23, 0x01	; 1
    13ba:	c6 01       	movw	r24, r12
    13bc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    13c0:	81 11       	cpse	r24, r1
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    13c4:	91 2f       	mov	r25, r17
    13c6:	90 62       	ori	r25, 0x20	; 32
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    13ce:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
}
    13d2:	8f 2d       	mov	r24, r15
    13d4:	28 96       	adiw	r28, 0x08	; 8
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	cf 90       	pop	r12
    13f0:	08 95       	ret

000013f2 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    13f2:	fc 01       	movw	r30, r24
    13f4:	10 82       	st	Z, r1
    13f6:	12 82       	std	Z+2, r1	; 0x02
    13f8:	11 82       	std	Z+1, r1	; 0x01
    13fa:	13 82       	std	Z+3, r1	; 0x03
    13fc:	14 82       	std	Z+4, r1	; 0x04
    13fe:	15 82       	std	Z+5, r1	; 0x05
    1400:	16 82       	std	Z+6, r1	; 0x06
    1402:	17 82       	std	Z+7, r1	; 0x07
    1404:	12 86       	std	Z+10, r1	; 0x0a
    1406:	11 86       	std	Z+9, r1	; 0x09
    1408:	14 86       	std	Z+12, r1	; 0x0c
    140a:	13 86       	std	Z+11, r1	; 0x0b
    140c:	08 95       	ret

0000140e <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    140e:	2a e0       	ldi	r18, 0x0A	; 10
    1410:	82 9f       	mul	r24, r18
    1412:	c0 01       	movw	r24, r0
    1414:	11 24       	eor	r1, r1
    1416:	09 96       	adiw	r24, 0x09	; 9
    1418:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <_ZN7Helpers14base64_enc_lenEi>

0000141c <_ZN10GsmPayload16readNumSReadingsEPcj>:
    141c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN7Helpers14base64_dec_lenEPci>
    1420:	09 97       	sbiw	r24, 0x09	; 9
    1422:	6a e0       	ldi	r22, 0x0A	; 10
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 21 21 	call	0x4242	; 0x4242 <__udivmodhi4>
    142a:	86 2f       	mov	r24, r22
    142c:	08 95       	ret

0000142e <_ZN10GsmPayload16createRawPayloadEPh>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
    1434:	cb 01       	movw	r24, r22
    1436:	29 e0       	ldi	r18, 0x09	; 9
    1438:	fe 01       	movw	r30, r28
    143a:	db 01       	movw	r26, r22
    143c:	01 90       	ld	r0, Z+
    143e:	0d 92       	st	X+, r0
    1440:	2a 95       	dec	r18
    1442:	e1 f7       	brne	.-8      	; 0x143c <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1444:	4b 81       	ldd	r20, Y+3	; 0x03
    1446:	2a e0       	ldi	r18, 0x0A	; 10
    1448:	42 9f       	mul	r20, r18
    144a:	a0 01       	movw	r20, r0
    144c:	11 24       	eor	r1, r1
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	09 96       	adiw	r24, 0x09	; 9
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <memcpy>

0000145c <_ZN10GsmPayload20createEncodedPayloadEPc>:
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	6b 01       	movw	r12, r22
    1476:	ed b6       	in	r14, 0x3d	; 61
    1478:	fe b6       	in	r15, 0x3e	; 62
    147a:	fc 01       	movw	r30, r24
    147c:	03 81       	ldd	r16, Z+3	; 0x03
    147e:	fa e0       	ldi	r31, 0x0A	; 10
    1480:	0f 9f       	mul	r16, r31
    1482:	80 01       	movw	r16, r0
    1484:	11 24       	eor	r1, r1
    1486:	07 5f       	subi	r16, 0xF7	; 247
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	2d b7       	in	r18, 0x3d	; 61
    148c:	3e b7       	in	r19, 0x3e	; 62
    148e:	20 1b       	sub	r18, r16
    1490:	31 0b       	sbc	r19, r17
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	3e bf       	out	0x3e, r19	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	2d bf       	out	0x3d, r18	; 61
    149c:	ed b7       	in	r30, 0x3d	; 61
    149e:	fe b7       	in	r31, 0x3e	; 62
    14a0:	31 96       	adiw	r30, 0x01	; 1
    14a2:	5f 01       	movw	r10, r30
    14a4:	bf 01       	movw	r22, r30
    14a6:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN10GsmPayload16createRawPayloadEPh>
    14aa:	a8 01       	movw	r20, r16
    14ac:	b5 01       	movw	r22, r10
    14ae:	c6 01       	movw	r24, r12
    14b0:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Helpers13base64_encodeEPcPhi>
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	fe be       	out	0x3e, r15	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	ed be       	out	0x3d, r14	; 61
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	08 95       	ret

000014d4 <_ZN10GsmPayload14readRawPayloadEPhP10SensorData>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ec 01       	movw	r28, r24
    14de:	8a 01       	movw	r16, r20
    14e0:	89 e0       	ldi	r24, 0x09	; 9
    14e2:	fb 01       	movw	r30, r22
    14e4:	de 01       	movw	r26, r28
    14e6:	01 90       	ld	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	8a 95       	dec	r24
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <_ZN10GsmPayload14readRawPayloadEPhP10SensorData+0x12>
    14ee:	4b 81       	ldd	r20, Y+3	; 0x03
    14f0:	8a e0       	ldi	r24, 0x0A	; 10
    14f2:	48 9f       	mul	r20, r24
    14f4:	a0 01       	movw	r20, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	67 5f       	subi	r22, 0xF7	; 247
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	c8 01       	movw	r24, r16
    14fe:	0e 94 c1 23 	call	0x4782	; 0x4782 <memcpy>
    1502:	1c 87       	std	Y+12, r17	; 0x0c
    1504:	0b 87       	std	Y+11, r16	; 0x0b
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <_ZN10GsmPayload18readEncodedPayloadEPcjP10SensorData>:
    1510:	6f 92       	push	r6
    1512:	7f 92       	push	r7
    1514:	8f 92       	push	r8
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	bf 92       	push	r11
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	5c 01       	movw	r10, r24
    1532:	7b 01       	movw	r14, r22
    1534:	6a 01       	movw	r12, r20
    1536:	49 01       	movw	r8, r18
    1538:	6d b6       	in	r6, 0x3d	; 61
    153a:	7e b6       	in	r7, 0x3e	; 62
    153c:	ba 01       	movw	r22, r20
    153e:	c7 01       	movw	r24, r14
    1540:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN7Helpers14base64_dec_lenEPci>
    1544:	2d b7       	in	r18, 0x3d	; 61
    1546:	3e b7       	in	r19, 0x3e	; 62
    1548:	28 1b       	sub	r18, r24
    154a:	39 0b       	sbc	r19, r25
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	3e bf       	out	0x3e, r19	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	2d bf       	out	0x3d, r18	; 61
    1556:	0d b7       	in	r16, 0x3d	; 61
    1558:	1e b7       	in	r17, 0x3e	; 62
    155a:	0f 5f       	subi	r16, 0xFF	; 255
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	a6 01       	movw	r20, r12
    1560:	b7 01       	movw	r22, r14
    1562:	c8 01       	movw	r24, r16
    1564:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7Helpers13base64_decodeEPhPci>
    1568:	a4 01       	movw	r20, r8
    156a:	b8 01       	movw	r22, r16
    156c:	c5 01       	movw	r24, r10
    156e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN10GsmPayload14readRawPayloadEPhP10SensorData>
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	7e be       	out	0x3e, r7	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	6d be       	out	0x3d, r6	; 61
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	08 95       	ret

0000159a <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    159a:	fc 01       	movw	r30, r24
    159c:	74 87       	std	Z+12, r23	; 0x0c
    159e:	63 87       	std	Z+11, r22	; 0x0b
    15a0:	43 83       	std	Z+3, r20	; 0x03
    15a2:	08 95       	ret

000015a4 <_ZN10GsmPayload13getSensorDataEv>:
    15a4:	fc 01       	movw	r30, r24
    15a6:	83 85       	ldd	r24, Z+11	; 0x0b
    15a8:	94 85       	ldd	r25, Z+12	; 0x0c
    15aa:	08 95       	ret

000015ac <_ZN10GsmPayload11setModuleIdEh>:
    15ac:	fc 01       	movw	r30, r24
    15ae:	60 83       	st	Z, r22
    15b0:	08 95       	ret

000015b2 <_ZN10GsmPayload13setBootNumberEj>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	72 83       	std	Z+2, r23	; 0x02
    15b6:	61 83       	std	Z+1, r22	; 0x01
    15b8:	08 95       	ret

000015ba <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    15ba:	fc 01       	movw	r30, r24
    15bc:	45 83       	std	Z+5, r20	; 0x05
    15be:	56 83       	std	Z+6, r21	; 0x06
    15c0:	67 83       	std	Z+7, r22	; 0x07
    15c2:	70 87       	std	Z+8, r23	; 0x08
    15c4:	08 95       	ret

000015c6 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
			RM_LOG(*(sd+t));
		
		RM_LOG(" ");
	}
	
	RM_LOGLN(" ");
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
    15cc:	6e e9       	ldi	r22, 0x9E	; 158
    15ce:	72 e0       	ldi	r23, 0x02	; 2
    15d0:	81 e8       	ldi	r24, 0x81	; 129
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    15d8:	4a e0       	ldi	r20, 0x0A	; 10
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	68 81       	ld	r22, Y
    15de:	81 e8       	ldi	r24, 0x81	; 129
    15e0:	94 e0       	ldi	r25, 0x04	; 4
    15e2:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN5Print5printEhi>
    15e6:	6a e9       	ldi	r22, 0x9A	; 154
    15e8:	72 e0       	ldi	r23, 0x02	; 2
    15ea:	81 e8       	ldi	r24, 0x81	; 129
    15ec:	94 e0       	ldi	r25, 0x04	; 4
    15ee:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    15f2:	65 e9       	ldi	r22, 0x95	; 149
    15f4:	72 e0       	ldi	r23, 0x02	; 2
    15f6:	81 e8       	ldi	r24, 0x81	; 129
    15f8:	94 e0       	ldi	r25, 0x04	; 4
    15fa:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    15fe:	4a e0       	ldi	r20, 0x0A	; 10
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	69 81       	ldd	r22, Y+1	; 0x01
    1604:	81 e8       	ldi	r24, 0x81	; 129
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN5Print5printEhi>
    160c:	61 e9       	ldi	r22, 0x91	; 145
    160e:	72 e0       	ldi	r23, 0x02	; 2
    1610:	81 e8       	ldi	r24, 0x81	; 129
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1618:	6c e7       	ldi	r22, 0x7C	; 124
    161a:	72 e0       	ldi	r23, 0x02	; 2
    161c:	81 e8       	ldi	r24, 0x81	; 129
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1624:	6b 81       	ldd	r22, Y+3	; 0x03
    1626:	63 70       	andi	r22, 0x03	; 3
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	4a e0       	ldi	r20, 0x0A	; 10
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	81 e8       	ldi	r24, 0x81	; 129
    1630:	94 e0       	ldi	r25, 0x04	; 4
    1632:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN5Print5printEii>
    1636:	62 e7       	ldi	r22, 0x72	; 114
    1638:	72 e0       	ldi	r23, 0x02	; 2
    163a:	81 e8       	ldi	r24, 0x81	; 129
    163c:	94 e0       	ldi	r25, 0x04	; 4
    163e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1642:	6b 81       	ldd	r22, Y+3	; 0x03
    1644:	6c 71       	andi	r22, 0x1C	; 28
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	75 95       	asr	r23
    164a:	67 95       	ror	r22
    164c:	75 95       	asr	r23
    164e:	67 95       	ror	r22
    1650:	4a e0       	ldi	r20, 0x0A	; 10
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	81 e8       	ldi	r24, 0x81	; 129
    1656:	94 e0       	ldi	r25, 0x04	; 4
    1658:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN5Print5printEii>
    165c:	69 e6       	ldi	r22, 0x69	; 105
    165e:	72 e0       	ldi	r23, 0x02	; 2
    1660:	81 e8       	ldi	r24, 0x81	; 129
    1662:	94 e0       	ldi	r25, 0x04	; 4
    1664:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1668:	6b 81       	ldd	r22, Y+3	; 0x03
    166a:	65 fb       	bst	r22, 5
    166c:	66 27       	eor	r22, r22
    166e:	60 f9       	bld	r22, 0
    1670:	4a e0       	ldi	r20, 0x0A	; 10
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	81 e8       	ldi	r24, 0x81	; 129
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN5Print5printEii>
    167e:	65 e6       	ldi	r22, 0x65	; 101
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	81 e8       	ldi	r24, 0x81	; 129
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    168a:	68 e5       	ldi	r22, 0x58	; 88
    168c:	72 e0       	ldi	r23, 0x02	; 2
    168e:	81 e8       	ldi	r24, 0x81	; 129
    1690:	94 e0       	ldi	r25, 0x04	; 4
    1692:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1696:	4a e0       	ldi	r20, 0x0A	; 10
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	6a 81       	ldd	r22, Y+2	; 0x02
    169c:	81 e8       	ldi	r24, 0x81	; 129
    169e:	94 e0       	ldi	r25, 0x04	; 4
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <_ZN5Print7printlnEhi>

000016a8 <_ZN7Helpers15printSensorDataEP10SensorData>:
}

void Helpers::printSensorData(SensorData* sd) {
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
    16ae:	60 e5       	ldi	r22, 0x50	; 80
    16b0:	72 e0       	ldi	r23, 0x02	; 2
    16b2:	81 e8       	ldi	r24, 0x81	; 129
    16b4:	94 e0       	ldi	r25, 0x04	; 4
    16b6:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
    16ba:	69 81       	ldd	r22, Y+1	; 0x01
    16bc:	7a 81       	ldd	r23, Y+2	; 0x02
    16be:	4a e0       	ldi	r20, 0x0A	; 10
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	81 e8       	ldi	r24, 0x81	; 129
    16c4:	94 e0       	ldi	r25, 0x04	; 4
    16c6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    16ca:	6c e4       	ldi	r22, 0x4C	; 76
    16cc:	72 e0       	ldi	r23, 0x02	; 2
    16ce:	81 e8       	ldi	r24, 0x81	; 129
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
    16d6:	66 e4       	ldi	r22, 0x46	; 70
    16d8:	72 e0       	ldi	r23, 0x02	; 2
    16da:	81 e8       	ldi	r24, 0x81	; 129
    16dc:	94 e0       	ldi	r25, 0x04	; 4
    16de:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
    16e2:	6d 81       	ldd	r22, Y+5	; 0x05
    16e4:	7e 81       	ldd	r23, Y+6	; 0x06
    16e6:	4a e0       	ldi	r20, 0x0A	; 10
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	81 e8       	ldi	r24, 0x81	; 129
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    16f2:	62 e4       	ldi	r22, 0x42	; 66
    16f4:	72 e0       	ldi	r23, 0x02	; 2
    16f6:	81 e8       	ldi	r24, 0x81	; 129
    16f8:	94 e0       	ldi	r25, 0x04	; 4
    16fa:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    16fe:	69 e3       	ldi	r22, 0x39	; 57
    1700:	72 e0       	ldi	r23, 0x02	; 2
    1702:	81 e8       	ldi	r24, 0x81	; 129
    1704:	94 e0       	ldi	r25, 0x04	; 4
    1706:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    170a:	6b 81       	ldd	r22, Y+3	; 0x03
    170c:	7c 81       	ldd	r23, Y+4	; 0x04
    170e:	4a e0       	ldi	r20, 0x0A	; 10
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	81 e8       	ldi	r24, 0x81	; 129
    1714:	94 e0       	ldi	r25, 0x04	; 4
    1716:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    171a:	65 e3       	ldi	r22, 0x35	; 53
    171c:	72 e0       	ldi	r23, 0x02	; 2
    171e:	81 e8       	ldi	r24, 0x81	; 129
    1720:	94 e0       	ldi	r25, 0x04	; 4
    1722:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    1726:	6f e2       	ldi	r22, 0x2F	; 47
    1728:	72 e0       	ldi	r23, 0x02	; 2
    172a:	81 e8       	ldi	r24, 0x81	; 129
    172c:	94 e0       	ldi	r25, 0x04	; 4
    172e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->temperature);
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	4a e0       	ldi	r20, 0x0A	; 10
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	81 e8       	ldi	r24, 0x81	; 129
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1742:	6b e2       	ldi	r22, 0x2B	; 43
    1744:	72 e0       	ldi	r23, 0x02	; 2
    1746:	81 e8       	ldi	r24, 0x81	; 129
    1748:	94 e0       	ldi	r25, 0x04	; 4
    174a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Error="));
    174e:	64 e2       	ldi	r22, 0x24	; 36
    1750:	72 e0       	ldi	r23, 0x02	; 2
    1752:	81 e8       	ldi	r24, 0x81	; 129
    1754:	94 e0       	ldi	r25, 0x04	; 4
    1756:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->errorChar);
    175a:	4a e0       	ldi	r20, 0x0A	; 10
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	69 85       	ldd	r22, Y+9	; 0x09
    1760:	81 e8       	ldi	r24, 0x81	; 129
    1762:	94 e0       	ldi	r25, 0x04	; 4
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
	RM_LOG(F("Temp="));
	RM_LOG(sd->temperature);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Error="));
	RM_LOGLN(sd->errorChar);
    1768:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <_ZN5Print7printlnEhi>

0000176c <_ZN7Helpers9fillArrayEPhjh>:
}

void Helpers::fillArray(uint8_t* ptr, uint16_t sz, uint8_t val){
    176c:	68 0f       	add	r22, r24
    176e:	79 1f       	adc	r23, r25
	
	for(uint16_t i=0; i<sz; i++){
    1770:	86 17       	cp	r24, r22
    1772:	97 07       	cpc	r25, r23
    1774:	21 f0       	breq	.+8      	; 0x177e <_ZN7Helpers9fillArrayEPhjh+0x12>
		*(ptr+i) = val;
    1776:	fc 01       	movw	r30, r24
    1778:	41 93       	st	Z+, r20
    177a:	cf 01       	movw	r24, r30
	RM_LOGLN(sd->errorChar);
}

void Helpers::fillArray(uint8_t* ptr, uint16_t sz, uint8_t val){
	
	for(uint16_t i=0; i<sz; i++){
    177c:	f9 cf       	rjmp	.-14     	; 0x1770 <_ZN7Helpers9fillArrayEPhjh+0x4>
    177e:	08 95       	ret

00001780 <_ZN7Helpers14base64_enc_lenEi>:
/* Return length DOES include trailing \0 */
int16_t Helpers::base64_enc_len(int16_t plainLen) {
	
	int16_t n = plainLen;
	
	return (n + 2 - ((n + 2) % 3)) / 3 * 4 + 1;
    1780:	9c 01       	movw	r18, r24
    1782:	2e 5f       	subi	r18, 0xFE	; 254
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	e3 e0       	ldi	r30, 0x03	; 3
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	c9 01       	movw	r24, r18
    178c:	bf 01       	movw	r22, r30
    178e:	0e 94 35 21 	call	0x426a	; 0x426a <__divmodhi4>
    1792:	a9 01       	movw	r20, r18
    1794:	48 1b       	sub	r20, r24
    1796:	59 0b       	sbc	r21, r25
    1798:	ca 01       	movw	r24, r20
    179a:	bf 01       	movw	r22, r30
    179c:	0e 94 35 21 	call	0x426a	; 0x426a <__divmodhi4>
    17a0:	cb 01       	movw	r24, r22
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
}
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	08 95       	ret

000017ae <_ZN7Helpers14base64_dec_lenEPci>:
int16_t Helpers::base64_dec_len(char* input, int16_t inputLen) {
	
	int16_t i = 0;
	int16_t numEq = 0;
	
	inputLen -=1; //Remove terminating char
    17ae:	61 50       	subi	r22, 0x01	; 1
    17b0:	71 09       	sbc	r23, r1
    17b2:	fc 01       	movw	r30, r24
    17b4:	e6 0f       	add	r30, r22
    17b6:	f7 1f       	adc	r31, r23

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_dec_len(char* input, int16_t inputLen) {
	
	int16_t i = 0;
	int16_t numEq = 0;
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
	
	inputLen -=1; //Remove terminating char
	
	for(i = inputLen - 1; input[i] == '='; i--) {
    17bc:	82 91       	ld	r24, -Z
    17be:	8d 33       	cpi	r24, 0x3D	; 61
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <_ZN7Helpers14base64_dec_lenEPci+0x1a>
		numEq++;
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t i = 0;
	int16_t numEq = 0;
	
	inputLen -=1; //Remove terminating char
	
	for(i = inputLen - 1; input[i] == '='; i--) {
    17c6:	fa cf       	rjmp	.-12     	; 0x17bc <_ZN7Helpers14base64_dec_lenEPci+0xe>
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
    17c8:	46 e0       	ldi	r20, 0x06	; 6
    17ca:	46 9f       	mul	r20, r22
    17cc:	c0 01       	movw	r24, r0
    17ce:	47 9f       	mul	r20, r23
    17d0:	90 0d       	add	r25, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	97 fd       	sbrc	r25, 7
    17d6:	07 96       	adiw	r24, 0x07	; 7
    17d8:	43 e0       	ldi	r20, 0x03	; 3
    17da:	95 95       	asr	r25
    17dc:	87 95       	ror	r24
    17de:	4a 95       	dec	r20
    17e0:	e1 f7       	brne	.-8      	; 0x17da <_ZN7Helpers14base64_dec_lenEPci+0x2c>
}
    17e2:	82 1b       	sub	r24, r18
    17e4:	93 0b       	sbc	r25, r19
    17e6:	08 95       	ret

000017e8 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    17e8:	dc 01       	movw	r26, r24
    17ea:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    17ec:	80 81       	ld	r24, Z
    17ee:	86 95       	lsr	r24
    17f0:	86 95       	lsr	r24
    17f2:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    17f4:	80 81       	ld	r24, Z
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	92 95       	swap	r25
    17fc:	9f 70       	andi	r25, 0x0F	; 15
    17fe:	20 e1       	ldi	r18, 0x10	; 16
    1800:	82 9f       	mul	r24, r18
    1802:	90 0d       	add	r25, r0
    1804:	11 24       	eor	r1, r1
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	9c 93       	st	X, r25
    180a:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	9f 70       	andi	r25, 0x0F	; 15
    1810:	99 0f       	add	r25, r25
    1812:	99 0f       	add	r25, r25
    1814:	22 81       	ldd	r18, Z+2	; 0x02
    1816:	22 95       	swap	r18
    1818:	26 95       	lsr	r18
    181a:	26 95       	lsr	r18
    181c:	23 70       	andi	r18, 0x03	; 3
    181e:	92 0f       	add	r25, r18
    1820:	12 96       	adiw	r26, 0x02	; 2
    1822:	9c 93       	st	X, r25
    1824:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	8f 73       	andi	r24, 0x3F	; 63
    182a:	13 96       	adiw	r26, 0x03	; 3
    182c:	8c 93       	st	X, r24
    182e:	08 95       	ret

00001830 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	27 97       	sbiw	r28, 0x07	; 7
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	6c 01       	movw	r12, r24
    185e:	5b 01       	movw	r10, r22
    1860:	3b 01       	movw	r6, r22
    1862:	64 0e       	add	r6, r20
    1864:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1866:	e1 2c       	mov	r14, r1
    1868:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    186a:	00 e0       	ldi	r16, 0x00	; 0
    186c:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    186e:	4e 01       	movw	r8, r28
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	88 0e       	add	r8, r24
    1874:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1876:	6a 14       	cp	r6, r10
    1878:	7b 04       	cpc	r7, r11
    187a:	49 f1       	breq	.+82     	; 0x18ce <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    187c:	c8 01       	movw	r24, r16
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	f5 01       	movw	r30, r10
    1882:	21 91       	ld	r18, Z+
    1884:	5f 01       	movw	r10, r30
    1886:	f4 01       	movw	r30, r8
    1888:	e0 0f       	add	r30, r16
    188a:	f1 1f       	adc	r31, r17
    188c:	20 83       	st	Z, r18
		if(i == 3) {
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	11 f0       	breq	.+4      	; 0x1898 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1894:	8c 01       	movw	r16, r24
    1896:	ef cf       	rjmp	.-34     	; 0x1876 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1898:	b4 01       	movw	r22, r8
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_Z8a3_to_a4PhS_>
    18a2:	de 01       	movw	r26, r28
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	c6 01       	movw	r24, r12
    18a8:	8e 0d       	add	r24, r14
    18aa:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    18ac:	ed 91       	ld	r30, X+
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ec 55       	subi	r30, 0x5C	; 92
    18b2:	fd 4f       	sbci	r31, 0xFD	; 253
    18b4:	24 91       	lpm	r18, Z
    18b6:	fc 01       	movw	r30, r24
    18b8:	21 93       	st	Z+, r18
    18ba:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    18bc:	a8 15       	cp	r26, r8
    18be:	b9 05       	cpc	r27, r9
    18c0:	a9 f7       	brne	.-22     	; 0x18ac <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    18c2:	f4 e0       	ldi	r31, 0x04	; 4
    18c4:	ef 0e       	add	r14, r31
    18c6:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	e3 cf       	rjmp	.-58     	; 0x1894 <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    18ce:	01 15       	cp	r16, r1
    18d0:	11 05       	cpc	r17, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    18d4:	3c c0       	rjmp	.+120    	; 0x194e <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    18d6:	be 01       	movw	r22, r28
    18d8:	6b 5f       	subi	r22, 0xFB	; 251
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	fb 01       	movw	r30, r22
    18de:	e0 0f       	add	r30, r16
    18e0:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    18e2:	cf 01       	movw	r24, r30
    18e4:	86 1b       	sub	r24, r22
    18e6:	97 0b       	sbc	r25, r23
    18e8:	03 97       	sbiw	r24, 0x03	; 3
    18ea:	14 f4       	brge	.+4      	; 0x18f0 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    18ec:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    18ee:	f9 cf       	rjmp	.-14     	; 0x18e2 <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	5c 01       	movw	r10, r24
    18f6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_Z8a3_to_a4PhS_>
    18fa:	c6 01       	movw	r24, r12
    18fc:	8e 0d       	add	r24, r14
    18fe:	9f 1d       	adc	r25, r15
    1900:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1902:	ed 91       	ld	r30, X+
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	ec 55       	subi	r30, 0x5C	; 92
    1908:	fd 4f       	sbci	r31, 0xFD	; 253
    190a:	24 91       	lpm	r18, Z
    190c:	fc 01       	movw	r30, r24
    190e:	21 93       	st	Z+, r18
    1910:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1912:	9d 01       	movw	r18, r26
    1914:	2a 19       	sub	r18, r10
    1916:	3b 09       	sbc	r19, r11
    1918:	02 17       	cp	r16, r18
    191a:	13 07       	cpc	r17, r19
    191c:	94 f7       	brge	.-28     	; 0x1902 <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    191e:	ff ef       	ldi	r31, 0xFF	; 255
    1920:	ef 1a       	sub	r14, r31
    1922:	ff 0a       	sbc	r15, r31
    1924:	e0 0e       	add	r14, r16
    1926:	f1 1e       	adc	r15, r17
    1928:	f6 01       	movw	r30, r12
    192a:	ee 0d       	add	r30, r14
    192c:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    192e:	0c 19       	sub	r16, r12
    1930:	1d 09       	sbc	r17, r13
    1932:	0e 19       	sub	r16, r14
    1934:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1936:	8d e3       	ldi	r24, 0x3D	; 61
    1938:	7f 01       	movw	r14, r30
    193a:	ec 18       	sub	r14, r12
    193c:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    193e:	98 01       	movw	r18, r16
    1940:	2e 0f       	add	r18, r30
    1942:	3f 1f       	adc	r19, r31
    1944:	23 30       	cpi	r18, 0x03	; 3
    1946:	31 05       	cpc	r19, r1
    1948:	14 f4       	brge	.+4      	; 0x194e <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    194a:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    194c:	f5 cf       	rjmp	.-22     	; 0x1938 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    194e:	f6 01       	movw	r30, r12
    1950:	ee 0d       	add	r30, r14
    1952:	ff 1d       	adc	r31, r15
    1954:	10 82       	st	Z, r1
	
	return encLen;
}
    1956:	c7 01       	movw	r24, r14
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	27 96       	adiw	r28, 0x07	; 7
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	08 95       	ret

00001984 <_Z8a4_to_a3PhS_>:
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(uint8_t * a3, uint8_t * a4) {
    1984:	dc 01       	movw	r26, r24
    1986:	fb 01       	movw	r30, r22
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
    1988:	91 81       	ldd	r25, Z+1	; 0x01
    198a:	90 73       	andi	r25, 0x30	; 48
    198c:	92 95       	swap	r25
    198e:	9f 70       	andi	r25, 0x0F	; 15
    1990:	20 81       	ld	r18, Z
    1992:	22 0f       	add	r18, r18
    1994:	22 0f       	add	r18, r18
    1996:	92 0f       	add	r25, r18
    1998:	9c 93       	st	X, r25
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
    199a:	92 81       	ldd	r25, Z+2	; 0x02
    199c:	9c 73       	andi	r25, 0x3C	; 60
    199e:	96 95       	lsr	r25
    19a0:	96 95       	lsr	r25
    19a2:	81 81       	ldd	r24, Z+1	; 0x01
    19a4:	20 e1       	ldi	r18, 0x10	; 16
    19a6:	82 9f       	mul	r24, r18
    19a8:	90 0d       	add	r25, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	9c 93       	st	X, r25
    19b0:	11 97       	sbiw	r26, 0x01	; 1
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
    19b2:	92 81       	ldd	r25, Z+2	; 0x02
    19b4:	83 81       	ldd	r24, Z+3	; 0x03
    19b6:	20 e4       	ldi	r18, 0x40	; 64
    19b8:	92 9f       	mul	r25, r18
    19ba:	80 0d       	add	r24, r0
    19bc:	11 24       	eor	r1, r1
    19be:	12 96       	adiw	r26, 0x02	; 2
    19c0:	8c 93       	st	X, r24
    19c2:	08 95       	ret

000019c4 <_Z10b64_lookupc>:
}

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
    19c4:	9f eb       	ldi	r25, 0xBF	; 191
    19c6:	98 0f       	add	r25, r24
    19c8:	9a 31       	cpi	r25, 0x1A	; 26
    19ca:	90 f0       	brcs	.+36     	; 0x19f0 <_Z10b64_lookupc+0x2c>
	if(c >='a' && c <='z') return c - 71;
    19cc:	9f e9       	ldi	r25, 0x9F	; 159
    19ce:	98 0f       	add	r25, r24
    19d0:	9a 31       	cpi	r25, 0x1A	; 26
    19d2:	10 f4       	brcc	.+4      	; 0x19d8 <_Z10b64_lookupc+0x14>
    19d4:	87 54       	subi	r24, 0x47	; 71
    19d6:	08 95       	ret
	if(c >='0' && c <='9') return c + 4;
    19d8:	90 ed       	ldi	r25, 0xD0	; 208
    19da:	98 0f       	add	r25, r24
    19dc:	9a 30       	cpi	r25, 0x0A	; 10
    19de:	10 f4       	brcc	.+4      	; 0x19e4 <_Z10b64_lookupc+0x20>
    19e0:	8c 5f       	subi	r24, 0xFC	; 252
    19e2:	08 95       	ret
	if(c == '+') return 62;
    19e4:	8b 32       	cpi	r24, 0x2B	; 43
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <_Z10b64_lookupc+0x30>
	if(c == '/') return 63;
    19e8:	8f 32       	cpi	r24, 0x2F	; 47
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <_Z10b64_lookupc+0x34>
	return -1;
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	08 95       	ret
    19f0:	89 2f       	mov	r24, r25
    19f2:	08 95       	ret

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
    19f4:	8e e3       	ldi	r24, 0x3E	; 62
    19f6:	08 95       	ret
	if(c == '/') return 63;
    19f8:	8f e3       	ldi	r24, 0x3F	; 63
	return -1;
}
    19fa:	08 95       	ret

000019fc <_ZN7Helpers13base64_decodeEPhPci>:
	
	return encLen;
}

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_decode(uint8_t * output, char* input, int16_t inputLen) {
    19fc:	4f 92       	push	r4
    19fe:	5f 92       	push	r5
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	27 97       	sbiw	r28, 0x07	; 7
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	3c 01       	movw	r6, r24
    1a2e:	7b 01       	movw	r14, r22
    1a30:	2b 01       	movw	r4, r22
    1a32:	44 0e       	add	r4, r20
    1a34:	55 1e       	adc	r5, r21
	
	int16_t i = 0, j = 0;
	int16_t decLen = 0;
    1a36:	c1 2c       	mov	r12, r1
    1a38:	d1 2c       	mov	r13, r1
}

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_decode(uint8_t * output, char* input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	5e 01       	movw	r10, r28
    1a40:	85 e0       	ldi	r24, 0x05	; 5
    1a42:	a8 0e       	add	r10, r24
    1a44:	b1 1c       	adc	r11, r1
    1a46:	4e 01       	movw	r8, r28
    1a48:	98 e0       	ldi	r25, 0x08	; 8
    1a4a:	89 0e       	add	r8, r25
    1a4c:	91 1c       	adc	r9, r1
	int16_t decLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];


	while (inputLen--) {
    1a4e:	e4 14       	cp	r14, r4
    1a50:	f5 04       	cpc	r15, r5
    1a52:	a9 f1       	breq	.+106    	; 0x1abe <_ZN7Helpers13base64_decodeEPhPci+0xc2>
		if(*input == '=') {
    1a54:	f7 01       	movw	r30, r14
    1a56:	21 91       	ld	r18, Z+
    1a58:	7f 01       	movw	r14, r30
    1a5a:	2d 33       	cpi	r18, 0x3D	; 61
    1a5c:	81 f1       	breq	.+96     	; 0x1abe <_ZN7Helpers13base64_decodeEPhPci+0xc2>
			break;
		}

		a4[i++] = *(input++);
    1a5e:	c8 01       	movw	r24, r16
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	e1 e0       	ldi	r30, 0x01	; 1
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	ec 0f       	add	r30, r28
    1a68:	fd 1f       	adc	r31, r29
    1a6a:	e0 0f       	add	r30, r16
    1a6c:	f1 1f       	adc	r31, r17
    1a6e:	20 83       	st	Z, r18
		if (i == 4) {
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	91 05       	cpc	r25, r1
    1a74:	11 f0       	breq	.+4      	; 0x1a7a <_ZN7Helpers13base64_decodeEPhPci+0x7e>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
    1a76:	8c 01       	movw	r16, r24
    1a78:	ea cf       	rjmp	.-44     	; 0x1a4e <_ZN7Helpers13base64_decodeEPhPci+0x52>
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	0f 5f       	subi	r16, 0xFF	; 255
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 81       	ld	r24, Z
    1a84:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_Z10b64_lookupc>
    1a88:	f8 01       	movw	r30, r16
    1a8a:	81 93       	st	Z+, r24
    1a8c:	8f 01       	movw	r16, r30
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
    1a8e:	ea 15       	cp	r30, r10
    1a90:	fb 05       	cpc	r31, r11
    1a92:	b1 f7       	brne	.-20     	; 0x1a80 <_ZN7Helpers13base64_decodeEPhPci+0x84>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
    1a94:	be 01       	movw	r22, r28
    1a96:	6f 5f       	subi	r22, 0xFF	; 255
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	c5 01       	movw	r24, r10
    1a9c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z8a4_to_a3PhS_>
    1aa0:	f5 01       	movw	r30, r10
    1aa2:	d3 01       	movw	r26, r6
    1aa4:	ac 0d       	add	r26, r12
    1aa6:	bd 1d       	adc	r27, r13

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
    1aa8:	81 91       	ld	r24, Z+
    1aaa:	8d 93       	st	X+, r24
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
    1aac:	e8 15       	cp	r30, r8
    1aae:	f9 05       	cpc	r31, r9
    1ab0:	d9 f7       	brne	.-10     	; 0x1aa8 <_ZN7Helpers13base64_decodeEPhPci+0xac>
    1ab2:	f3 e0       	ldi	r31, 0x03	; 3
    1ab4:	cf 0e       	add	r12, r31
    1ab6:	d1 1c       	adc	r13, r1
				output[decLen++] = a3[i];
			}
			i = 0;
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	dc cf       	rjmp	.-72     	; 0x1a76 <_ZN7Helpers13base64_decodeEPhPci+0x7a>
		}
	}

	if (i) {
    1abe:	01 15       	cp	r16, r1
    1ac0:	11 05       	cpc	r17, r1
    1ac2:	99 f1       	breq	.+102    	; 0x1b2a <_ZN7Helpers13base64_decodeEPhPci+0x12e>
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	5c 01       	movw	r10, r24
    1aca:	fc 01       	movw	r30, r24
    1acc:	e0 0f       	add	r30, r16
    1ace:	f1 1f       	adc	r31, r17
    1ad0:	75 01       	movw	r14, r10
		for (j = i; j < 4; j++) {
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	8a 19       	sub	r24, r10
    1ad6:	9b 09       	sbc	r25, r11
    1ad8:	04 97       	sbiw	r24, 0x04	; 4
    1ada:	14 f4       	brge	.+4      	; 0x1ae0 <_ZN7Helpers13base64_decodeEPhPci+0xe4>
			a4[j] = '\0';
    1adc:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
    1ade:	f8 cf       	rjmp	.-16     	; 0x1ad0 <_ZN7Helpers13base64_decodeEPhPci+0xd4>
    1ae0:	4e 01       	movw	r8, r28
    1ae2:	95 e0       	ldi	r25, 0x05	; 5
    1ae4:	89 0e       	add	r8, r25
    1ae6:	91 1c       	adc	r9, r1
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
    1ae8:	f7 01       	movw	r30, r14
    1aea:	80 81       	ld	r24, Z
    1aec:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_Z10b64_lookupc>
    1af0:	f7 01       	movw	r30, r14
    1af2:	81 93       	st	Z+, r24
    1af4:	7f 01       	movw	r14, r30
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
    1af6:	e8 15       	cp	r30, r8
    1af8:	f9 05       	cpc	r31, r9
    1afa:	b1 f7       	brne	.-20     	; 0x1ae8 <_ZN7Helpers13base64_decodeEPhPci+0xec>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
    1afc:	b5 01       	movw	r22, r10
    1afe:	cf 01       	movw	r24, r30
    1b00:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z8a4_to_a3PhS_>
    1b04:	f7 01       	movw	r30, r14
    1b06:	96 01       	movw	r18, r12
    1b08:	d3 01       	movw	r26, r6
    1b0a:	ac 0d       	add	r26, r12
    1b0c:	bd 1d       	adc	r27, r13

		for (j = 0; j < i - 1; j++) {
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	01 50       	subi	r16, 0x01	; 1
    1b14:	11 09       	sbc	r17, r1
    1b16:	6c 01       	movw	r12, r24
    1b18:	c2 0e       	add	r12, r18
    1b1a:	d3 1e       	adc	r13, r19
    1b1c:	80 17       	cp	r24, r16
    1b1e:	91 07       	cpc	r25, r17
    1b20:	24 f4       	brge	.+8      	; 0x1b2a <_ZN7Helpers13base64_decodeEPhPci+0x12e>
			output[decLen++] = a3[j];
    1b22:	41 91       	ld	r20, Z+
    1b24:	4d 93       	st	X+, r20
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	f6 cf       	rjmp	.-20     	; 0x1b16 <_ZN7Helpers13base64_decodeEPhPci+0x11a>
			output[decLen++] = a3[j];
		}
	}
	//output[decLen] = '\0';
	return decLen;
}
    1b2a:	c6 01       	movw	r24, r12
    1b2c:	27 96       	adiw	r28, 0x07	; 7
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	bf 90       	pop	r11
    1b4a:	af 90       	pop	r10
    1b4c:	9f 90       	pop	r9
    1b4e:	8f 90       	pop	r8
    1b50:	7f 90       	pop	r7
    1b52:	6f 90       	pop	r6
    1b54:	5f 90       	pop	r5
    1b56:	4f 90       	pop	r4
    1b58:	08 95       	ret

00001b5a <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	2c 97       	sbiw	r28, 0x0c	; 12
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	08 2f       	mov	r16, r24
    1b74:	6d e9       	ldi	r22, 0x9D	; 157
    1b76:	73 e0       	ldi	r23, 0x03	; 3
    1b78:	81 e8       	ldi	r24, 0x81	; 129
    1b7a:	94 e0       	ldi	r25, 0x04	; 4
    1b7c:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b80:	42 e0       	ldi	r20, 0x02	; 2
    1b82:	63 e0       	ldi	r22, 0x03	; 3
    1b84:	8e e9       	ldi	r24, 0x9E	; 158
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN13Adafruit_FONA5beginEhh>
    1b8c:	18 2f       	mov	r17, r24
    1b8e:	8d ef       	ldi	r24, 0xFD	; 253
    1b90:	81 0f       	add	r24, r17
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	b8 f4       	brcc	.+46     	; 0x1bc4 <_Z21ensureFonaInitialisedb+0x6a>
    1b96:	62 e8       	ldi	r22, 0x82	; 130
    1b98:	73 e0       	ldi	r23, 0x03	; 3
    1b9a:	81 e8       	ldi	r24, 0x81	; 129
    1b9c:	94 e0       	ldi	r25, 0x04	; 4
    1b9e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1ba2:	66 e4       	ldi	r22, 0x46	; 70
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	81 e8       	ldi	r24, 0x81	; 129
    1ba8:	94 e0       	ldi	r25, 0x04	; 4
    1baa:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    1bae:	61 2f       	mov	r22, r17
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	4a e0       	ldi	r20, 0x0A	; 10
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	81 e8       	ldi	r24, 0x81	; 129
    1bb8:	94 e0       	ldi	r25, 0x04	; 4
    1bba:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print7printlnEii>
    1bbe:	00 e0       	ldi	r16, 0x00	; 0
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	4d c0       	rjmp	.+154    	; 0x1c5e <_Z21ensureFonaInitialisedb+0x104>
    1bc4:	86 e9       	ldi	r24, 0x96	; 150
    1bc6:	92 e0       	ldi	r25, 0x02	; 2
    1bc8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN12RmMemManager11getModuleIdEv>
    1bcc:	68 2f       	mov	r22, r24
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	68 5b       	subi	r22, 0xB8	; 184
    1bd2:	7e 4f       	sbci	r23, 0xFE	; 254
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	07 96       	adiw	r24, 0x07	; 7
    1bd8:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <_ZN6StringC1EPKc>
    1bdc:	be 01       	movw	r22, r28
    1bde:	69 5f       	subi	r22, 0xF9	; 249
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <_ZN6StringC1ERKS_>
    1bea:	be 01       	movw	r22, r28
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8e e9       	ldi	r24, 0x9E	; 158
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN13Adafruit_FONA12setUserAgentE6String>
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <_ZN6StringD1Ev>
    1c00:	01 11       	cpse	r16, r1
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <_Z21ensureFonaInitialisedb+0xb0>
    1c04:	0e e9       	ldi	r16, 0x9E	; 158
    1c06:	12 e0       	ldi	r17, 0x02	; 2
    1c08:	26 c0       	rjmp	.+76     	; 0x1c56 <_Z21ensureFonaInitialisedb+0xfc>
    1c0a:	6d e6       	ldi	r22, 0x6D	; 109
    1c0c:	73 e0       	ldi	r23, 0x03	; 3
    1c0e:	81 e8       	ldi	r24, 0x81	; 129
    1c10:	94 e0       	ldi	r25, 0x04	; 4
    1c12:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	8e e9       	ldi	r24, 0x9E	; 158
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN13Adafruit_FONA10enableGPRSEb>
    1c20:	18 2f       	mov	r17, r24
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	81 0f       	add	r24, r17
    1c26:	82 30       	cpi	r24, 0x02	; 2
    1c28:	68 f3       	brcs	.-38     	; 0x1c04 <_Z21ensureFonaInitialisedb+0xaa>
    1c2a:	62 e5       	ldi	r22, 0x52	; 82
    1c2c:	73 e0       	ldi	r23, 0x03	; 3
    1c2e:	81 e8       	ldi	r24, 0x81	; 129
    1c30:	94 e0       	ldi	r25, 0x04	; 4
    1c32:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1c36:	66 e4       	ldi	r22, 0x46	; 70
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	81 e8       	ldi	r24, 0x81	; 129
    1c3c:	94 e0       	ldi	r25, 0x04	; 4
    1c3e:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    1c42:	61 2f       	mov	r22, r17
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	4a e0       	ldi	r20, 0x0A	; 10
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	81 e8       	ldi	r24, 0x81	; 129
    1c4c:	94 e0       	ldi	r25, 0x04	; 4
    1c4e:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print7printlnEii>
    1c52:	00 e0       	ldi	r16, 0x00	; 0
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	ce 01       	movw	r24, r28
    1c58:	07 96       	adiw	r24, 0x07	; 7
    1c5a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <_ZN6StringD1Ev>
    1c5e:	c8 01       	movw	r24, r16
    1c60:	2c 96       	adiw	r28, 0x0c	; 12
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret

00001c76 <_Z15switchOffSystemv>:
    1c76:	66 e5       	ldi	r22, 0x56	; 86
    1c78:	71 e0       	ldi	r23, 0x01	; 1
    1c7a:	81 e8       	ldi	r24, 0x81	; 129
    1c7c:	94 e0       	ldi	r25, 0x04	; 4
    1c7e:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	85 e0       	ldi	r24, 0x05	; 5
    1c86:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
    1c8a:	68 eb       	ldi	r22, 0xB8	; 184
    1c8c:	7b e0       	ldi	r23, 0x0B	; 11
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <delay>

00001c96 <setup>:
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	85 e0       	ldi	r24, 0x05	; 5
    1c9a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <pinMode>
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	85 e0       	ldi	r24, 0x05	; 5
    1ca2:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
    1ca6:	68 eb       	ldi	r22, 0xB8	; 184
    1ca8:	7b e0       	ldi	r23, 0x0B	; 11
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	8d e0       	ldi	r24, 0x0D	; 13
    1cb6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <pinMode>
    1cba:	26 e0       	ldi	r18, 0x06	; 6
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	55 e2       	ldi	r21, 0x25	; 37
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	81 e8       	ldi	r24, 0x81	; 129
    1cc6:	94 e0       	ldi	r25, 0x04	; 4
    1cc8:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZN14HardwareSerial5beginEmh>
    1ccc:	62 eb       	ldi	r22, 0xB2	; 178
    1cce:	73 e0       	ldi	r23, 0x03	; 3
    1cd0:	81 e8       	ldi	r24, 0x81	; 129
    1cd2:	94 e0       	ldi	r25, 0x04	; 4
    1cd4:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
    1cd8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <_ZN13ExtendedTests20runExtendedTypesTestEv>
    1cdc:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_Z15switchOffSystemv>

00001ce0 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	2a 97       	sbiw	r28, 0x0a	; 10
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    1cf4:	6f e3       	ldi	r22, 0x3F	; 63
    1cf6:	73 e0       	ldi	r23, 0x03	; 3
    1cf8:	81 e8       	ldi	r24, 0x81	; 129
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	1b 82       	std	Y+3, r1	; 0x03
    1d06:	1a 82       	std	Y+2, r1	; 0x02
    1d08:	1d 82       	std	Y+5, r1	; 0x05
    1d0a:	1c 82       	std	Y+4, r1	; 0x04
    1d0c:	1f 82       	std	Y+7, r1	; 0x07
    1d0e:	1e 82       	std	Y+6, r1	; 0x06
    1d10:	19 86       	std	Y+9, r1	; 0x09
    1d12:	18 86       	std	Y+8, r1	; 0x08
    1d14:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    1d16:	be 01       	movw	r22, r28
    1d18:	6f 5f       	subi	r22, 0xFF	; 255
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1c:	84 e9       	ldi	r24, 0x94	; 148
    1d1e:	92 e0       	ldi	r25, 0x02	; 2
    1d20:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	2a 96       	adiw	r28, 0x0a	; 10
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <_Z8sendDatav+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <_Z8sendDatav+0x8>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    1d44:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	98 0f       	add	r25, r24
    1d4c:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <_sendDataLoopCount>
	
	if (doInit) {
    1d50:	81 11       	cpse	r24, r1
    1d52:	15 c0       	rjmp	.+42     	; 0x1d7e <_Z8sendDatav+0x46>
	
		RM_LOGLN(F("Initialising module to send data"));
    1d54:	6e e1       	ldi	r22, 0x1E	; 30
    1d56:	73 e0       	ldi	r23, 0x03	; 3
    1d58:	81 e8       	ldi	r24, 0x81	; 129
    1d5a:	94 e0       	ldi	r25, 0x04	; 4
    1d5c:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_Z21ensureFonaInitialisedb>
    1d66:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <_sendDataFona+0x1>
    1d6a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_sendDataFona>
	
		if (_sendDataFona == NULL)
    1d6e:	89 2b       	or	r24, r25
    1d70:	f9 f0       	breq	.+62     	; 0x1db0 <_Z8sendDatav+0x78>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    1d72:	6f ee       	ldi	r22, 0xEF	; 239
    1d74:	72 e0       	ldi	r23, 0x02	; 2
    1d76:	81 e8       	ldi	r24, 0x81	; 129
    1d78:	94 e0       	ldi	r25, 0x04	; 4
    1d7a:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    1d7e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_sendDataLoopCount>
    1d82:	8c 33       	cpi	r24, 0x3C	; 60
    1d84:	b9 f4       	brne	.+46     	; 0x1db4 <_Z8sendDatav+0x7c>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1d86:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_sendDataFona>
    1d8a:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <_sendDataFona+0x1>
    1d8e:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN13Adafruit_FONA7getRSSIEv>
    1d92:	69 83       	std	Y+1, r22	; 0x01
    1d94:	7a 83       	std	Y+2, r23	; 0x02
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1da2:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1da6:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_sendDataFona+0x1>
    1daa:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_sendDataFona>
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <_Z8sendDatav+0x7c>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <_Z8sendDatav+0x7e>
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1db4:	80 e0       	ldi	r24, 0x00	; 0
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1dc4:	68 ee       	ldi	r22, 0xE8	; 232
    1dc6:	73 e0       	ldi	r23, 0x03	; 3
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <delay>
	++_timerCounter;
    1dd0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end>
    1dd4:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x1>
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x1>
    1dde:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    1de2:	65 ee       	ldi	r22, 0xE5	; 229
    1de4:	72 e0       	ldi	r23, 0x02	; 2
    1de6:	81 e8       	ldi	r24, 0x81	; 129
    1de8:	94 e0       	ldi	r25, 0x04	; 4
    1dea:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    1dee:	66 e4       	ldi	r22, 0x46	; 70
    1df0:	71 e0       	ldi	r23, 0x01	; 1
    1df2:	81 e8       	ldi	r24, 0x81	; 129
    1df4:	94 e0       	ldi	r25, 0x04	; 4
    1df6:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    1dfa:	4a e0       	ldi	r20, 0x0A	; 10
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <_behaviour>
    1e02:	81 e8       	ldi	r24, 0x81	; 129
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1e0a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1e0e:	80 ff       	sbrs	r24, 0
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <loop+0x60>
		
		if (takeReadings())
    1e12:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_Z12takeReadingsv>
    1e16:	88 23       	and	r24, r24
    1e18:	29 f0       	breq	.+10     	; 0x1e24 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    1e1a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1e1e:	8e 7f       	andi	r24, 0xFE	; 254
    1e20:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1e24:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1e28:	81 ff       	sbrs	r24, 1
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <loop+0x7a>
		
		if (sendData())
    1e2c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_Z8sendDatav>
    1e30:	88 23       	and	r24, r24
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    1e34:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1e38:	8d 7f       	andi	r24, 0xFD	; 253
    1e3a:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1e3e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1e42:	81 11       	cpse	r24, r1
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <loop+0x86>
		
		switchOffSystem();
    1e46:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_Z15switchOffSystemv>
    1e4a:	08 95       	ret

00001e4c <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	8e e9       	ldi	r24, 0x9E	; 158
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	86 e9       	ldi	r24, 0x96	; 150
    1e5c:	92 e0       	ldi	r25, 0x02	; 2
    1e5e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	84 e9       	ldi	r24, 0x94	; 148
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <_ZN13SensorManagerC1Eb>

00001e6c <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1e6c:	8a e3       	ldi	r24, 0x3A	; 58
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__fona+0x1>
    1e74:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__fona>
    1e78:	83 eb       	ldi	r24, 0xB3	; 179
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <_ZN6StringD1Ev>

00001e80 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1e80:	dc 01       	movw	r26, r24
    1e82:	ed 91       	ld	r30, X+
    1e84:	fc 91       	ld	r31, X
    1e86:	01 90       	ld	r0, Z+
    1e88:	f0 81       	ld	r31, Z
    1e8a:	e0 2d       	mov	r30, r0
    1e8c:	09 94       	ijmp

00001e8e <_ZN12RmMemManagerC1Eb>:
    1e8e:	fc 01       	movw	r30, r24
    1e90:	11 82       	std	Z+1, r1	; 0x01
    1e92:	12 82       	std	Z+2, r1	; 0x02
    1e94:	13 82       	std	Z+3, r1	; 0x03
    1e96:	14 82       	std	Z+4, r1	; 0x04
    1e98:	80 e8       	ldi	r24, 0x80	; 128
    1e9a:	85 83       	std	Z+5, r24	; 0x05
    1e9c:	86 83       	std	Z+6, r24	; 0x06
    1e9e:	17 82       	std	Z+7, r1	; 0x07
    1ea0:	60 83       	st	Z, r22
    1ea2:	61 11       	cpse	r22, r1
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <_ZN12RmMemManagerC1Eb+0x20>
    1ea6:	8b e2       	ldi	r24, 0x2B	; 43
    1ea8:	94 e0       	ldi	r25, 0x04	; 4
    1eaa:	0c 94 19 13 	jmp	0x2632	; 0x2632 <_ZN7TwoWire5beginEv>
    1eae:	08 95       	ret

00001eb0 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	eb 01       	movw	r28, r22
    1ebe:	7b 01       	movw	r14, r22
    1ec0:	e4 0e       	add	r14, r20
    1ec2:	f1 1c       	adc	r15, r1
    1ec4:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1ec6:	ce 15       	cp	r28, r14
    1ec8:	df 05       	cpc	r29, r15
    1eca:	71 f1       	breq	.+92     	; 0x1f28 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1ecc:	60 e5       	ldi	r22, 0x50	; 80
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	8b e2       	ldi	r24, 0x2B	; 43
    1ed2:	94 e0       	ldi	r25, 0x04	; 4
    1ed4:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1ed8:	61 2f       	mov	r22, r17
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	8b e2       	ldi	r24, 0x2B	; 43
    1ede:	94 e0       	ldi	r25, 0x04	; 4
    1ee0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1ee4:	b8 01       	movw	r22, r16
    1ee6:	77 27       	eor	r23, r23
    1ee8:	8b e2       	ldi	r24, 0x2B	; 43
    1eea:	94 e0       	ldi	r25, 0x04	; 4
    1eec:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1ef0:	8b e2       	ldi	r24, 0x2B	; 43
    1ef2:	94 e0       	ldi	r25, 0x04	; 4
    1ef4:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	60 e5       	ldi	r22, 0x50	; 80
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	8b e2       	ldi	r24, 0x2B	; 43
    1f02:	94 e0       	ldi	r25, 0x04	; 4
    1f04:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1f08:	8b e2       	ldi	r24, 0x2B	; 43
    1f0a:	94 e0       	ldi	r25, 0x04	; 4
    1f0c:	0e 94 4b 12 	call	0x2496	; 0x2496 <_ZN7TwoWire9availableEv>
    1f10:	89 2b       	or	r24, r25
    1f12:	29 f0       	breq	.+10     	; 0x1f1e <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1f14:	8b e2       	ldi	r24, 0x2B	; 43
    1f16:	94 e0       	ldi	r25, 0x04	; 4
    1f18:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN7TwoWire4readEv>
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1f1e:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1f20:	89 93       	st	Y+, r24
    1f22:	0f 5f       	subi	r16, 0xFF	; 255
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1f26:	cf cf       	rjmp	.-98     	; 0x1ec6 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	08 95       	ret

00001f36 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	1f 92       	push	r1
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	be 01       	movw	r22, r28
    1f46:	6f 5f       	subi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_Z12internalReadjPhh>
	return value;
}
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	0f 90       	pop	r0
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <_ZN12RmMemManager18getUCharFromMemoryEj>

00001f60 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1f60:	fc 01       	movw	r30, r24
    1f62:	60 83       	st	Z, r22
    1f64:	08 95       	ret

00001f66 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1f66:	fc 01       	movw	r30, r24
    1f68:	80 81       	ld	r24, Z
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	03 c0       	rjmp	.+6      	; 0x1f74 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1f6e:	86 2f       	mov	r24, r22
    1f70:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1f74:	85 e0       	ldi	r24, 0x05	; 5
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	08 95       	ret

00001f7a <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	12 96       	adiw	r26, 0x02	; 2
    1f88:	9c 93       	st	X, r25
    1f8a:	8e 93       	st	-X, r24
    1f8c:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	2a e0       	ldi	r18, 0x0A	; 10
    1f92:	82 9f       	mul	r24, r18
    1f94:	c0 01       	movw	r24, r0
    1f96:	11 24       	eor	r1, r1
    1f98:	16 96       	adiw	r26, 0x06	; 6
    1f9a:	9c 93       	st	X, r25
    1f9c:	8e 93       	st	-X, r24
    1f9e:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1fa0:	81 81       	ldd	r24, Z+1	; 0x01
    1fa2:	67 e0       	ldi	r22, 0x07	; 7
    1fa4:	0e 94 15 21 	call	0x422a	; 0x422a <__udivmodqi4>
    1fa8:	89 2f       	mov	r24, r25
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	14 96       	adiw	r26, 0x04	; 4
    1fae:	9c 93       	st	X, r25
    1fb0:	8e 93       	st	-X, r24
    1fb2:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1fb4:	81 81       	ldd	r24, Z+1	; 0x01
    1fb6:	24 e6       	ldi	r18, 0x64	; 100
    1fb8:	82 9f       	mul	r24, r18
    1fba:	c0 01       	movw	r24, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	18 96       	adiw	r26, 0x08	; 8
    1fc0:	9c 93       	st	X, r25
    1fc2:	8e 93       	st	-X, r24
    1fc4:	17 97       	sbiw	r26, 0x07	; 7
    1fc6:	08 95       	ret

00001fc8 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1fc8:	af 92       	push	r10
    1fca:	bf 92       	push	r11
    1fcc:	cf 92       	push	r12
    1fce:	df 92       	push	r13
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	8c 01       	movw	r16, r24
    1fde:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	21 f0       	breq	.+8      	; 0x1ff0 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1fe8:	c8 01       	movw	r24, r16
    1fea:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN13SensorManager11getMockDataEP10SensorData>
    1fee:	1b c0       	rjmp	.+54     	; 0x2026 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1ff0:	6e e0       	ldi	r22, 0x0E	; 14
    1ff2:	c8 01       	movw	r24, r16
    1ff4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN13SensorManager16takeSampleAnalogEh>
    1ff8:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1ffa:	6f e0       	ldi	r22, 0x0F	; 15
    1ffc:	c8 01       	movw	r24, r16
    1ffe:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN13SensorManager16takeSampleAnalogEh>
    2002:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2004:	61 e1       	ldi	r22, 0x11	; 17
    2006:	c8 01       	movw	r24, r16
    2008:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN13SensorManager16takeSampleAnalogEh>
    200c:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    200e:	60 e1       	ldi	r22, 0x10	; 16
    2010:	c8 01       	movw	r24, r16
    2012:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    2016:	ba 82       	std	Y+2, r11	; 0x02
    2018:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    201a:	de 82       	std	Y+6, r13	; 0x06
    201c:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    201e:	fc 82       	std	Y+4, r15	; 0x04
    2020:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    2022:	98 87       	std	Y+8, r25	; 0x08
    2024:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2026:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	bf 90       	pop	r11
    203a:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    203c:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_ZN7Helpers15printSensorDataEP10SensorData>

00002040 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2040:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_sendStop>
    204a:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_inRepStart>
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	82 e1       	ldi	r24, 0x12	; 18
    2052:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
    2056:	61 e0       	ldi	r22, 0x01	; 1
    2058:	83 e1       	ldi	r24, 0x13	; 19
    205a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
    205e:	e9 eb       	ldi	r30, 0xB9	; 185
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8e 7f       	andi	r24, 0xFE	; 254
    2066:	80 83       	st	Z, r24
    2068:	80 81       	ld	r24, Z
    206a:	8d 7f       	andi	r24, 0xFD	; 253
    206c:	80 83       	st	Z, r24
    206e:	88 e4       	ldi	r24, 0x48	; 72
    2070:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2074:	85 e4       	ldi	r24, 0x45	; 69
    2076:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    207a:	08 95       	ret

0000207c <twi_readFrom>:
    207c:	41 32       	cpi	r20, 0x21	; 33
    207e:	08 f0       	brcs	.+2      	; 0x2082 <twi_readFrom+0x6>
    2080:	43 c0       	rjmp	.+134    	; 0x2108 <twi_readFrom+0x8c>
    2082:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <twi_state>
    2086:	91 11       	cpse	r25, r1
    2088:	fc cf       	rjmp	.-8      	; 0x2082 <twi_readFrom+0x6>
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <twi_state>
    2090:	20 93 28 04 	sts	0x0428, r18	; 0x800428 <twi_sendStop>
    2094:	2f ef       	ldi	r18, 0xFF	; 255
    2096:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <twi_error>
    209a:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_masterBufferIndex>
    209e:	24 0f       	add	r18, r20
    20a0:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <twi_masterBufferLength>
    20a4:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <twi_slarw>
    20a8:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <twi_slarw>
    20ac:	88 0f       	add	r24, r24
    20ae:	89 2b       	or	r24, r25
    20b0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_slarw>
    20b4:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_inRepStart>
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <twi_readFrom+0x58>
    20bc:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_inRepStart>
    20c0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_slarw>
    20c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20cc:	83 fd       	sbrc	r24, 3
    20ce:	f8 cf       	rjmp	.-16     	; 0x20c0 <twi_readFrom+0x44>
    20d0:	85 ec       	ldi	r24, 0xC5	; 197
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <twi_readFrom+0x5a>
    20d4:	85 ee       	ldi	r24, 0xE5	; 229
    20d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20da:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_state>
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	e1 f3       	breq	.-8      	; 0x20da <twi_readFrom+0x5e>
    20e2:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <twi_masterBufferIndex>
    20e6:	84 17       	cp	r24, r20
    20e8:	10 f4       	brcc	.+4      	; 0x20ee <twi_readFrom+0x72>
    20ea:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <twi_masterBufferIndex>
    20ee:	a3 e0       	ldi	r26, 0x03	; 3
    20f0:	b4 e0       	ldi	r27, 0x04	; 4
    20f2:	96 2f       	mov	r25, r22
    20f4:	fb 01       	movw	r30, r22
    20f6:	8e 2f       	mov	r24, r30
    20f8:	89 1b       	sub	r24, r25
    20fa:	84 17       	cp	r24, r20
    20fc:	18 f4       	brcc	.+6      	; 0x2104 <twi_readFrom+0x88>
    20fe:	8d 91       	ld	r24, X+
    2100:	81 93       	st	Z+, r24
    2102:	f9 cf       	rjmp	.-14     	; 0x20f6 <twi_readFrom+0x7a>
    2104:	84 2f       	mov	r24, r20
    2106:	08 95       	ret
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	08 95       	ret

0000210c <twi_writeTo>:
    210c:	0f 93       	push	r16
    210e:	41 32       	cpi	r20, 0x21	; 33
    2110:	08 f0       	brcs	.+2      	; 0x2114 <twi_writeTo+0x8>
    2112:	4a c0       	rjmp	.+148    	; 0x21a8 <twi_writeTo+0x9c>
    2114:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <twi_state>
    2118:	91 11       	cpse	r25, r1
    211a:	fc cf       	rjmp	.-8      	; 0x2114 <twi_writeTo+0x8>
    211c:	32 e0       	ldi	r19, 0x02	; 2
    211e:	30 93 2a 04 	sts	0x042A, r19	; 0x80042a <twi_state>
    2122:	00 93 28 04 	sts	0x0428, r16	; 0x800428 <twi_sendStop>
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <twi_error>
    212c:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_masterBufferIndex>
    2130:	40 93 01 04 	sts	0x0401, r20	; 0x800401 <twi_masterBufferLength>
    2134:	56 2f       	mov	r21, r22
    2136:	a3 e0       	ldi	r26, 0x03	; 3
    2138:	b4 e0       	ldi	r27, 0x04	; 4
    213a:	fb 01       	movw	r30, r22
    213c:	3e 2f       	mov	r19, r30
    213e:	35 1b       	sub	r19, r21
    2140:	34 17       	cp	r19, r20
    2142:	18 f4       	brcc	.+6      	; 0x214a <twi_writeTo+0x3e>
    2144:	31 91       	ld	r19, Z+
    2146:	3d 93       	st	X+, r19
    2148:	f9 cf       	rjmp	.-14     	; 0x213c <twi_writeTo+0x30>
    214a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <twi_slarw>
    214e:	30 91 29 04 	lds	r19, 0x0429	; 0x800429 <twi_slarw>
    2152:	88 0f       	add	r24, r24
    2154:	83 2b       	or	r24, r19
    2156:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_slarw>
    215a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_inRepStart>
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	61 f4       	brne	.+24     	; 0x217a <twi_writeTo+0x6e>
    2162:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_inRepStart>
    2166:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_slarw>
    216a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    216e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2172:	83 fd       	sbrc	r24, 3
    2174:	f8 cf       	rjmp	.-16     	; 0x2166 <twi_writeTo+0x5a>
    2176:	85 ec       	ldi	r24, 0xC5	; 197
    2178:	01 c0       	rjmp	.+2      	; 0x217c <twi_writeTo+0x70>
    217a:	85 ee       	ldi	r24, 0xE5	; 229
    217c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2180:	22 23       	and	r18, r18
    2182:	21 f0       	breq	.+8      	; 0x218c <twi_writeTo+0x80>
    2184:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_state>
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	d1 f3       	breq	.-12     	; 0x2180 <twi_writeTo+0x74>
    218c:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_error>
    2190:	8f 3f       	cpi	r24, 0xFF	; 255
    2192:	79 f0       	breq	.+30     	; 0x21b2 <twi_writeTo+0xa6>
    2194:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_error>
    2198:	80 32       	cpi	r24, 0x20	; 32
    219a:	41 f0       	breq	.+16     	; 0x21ac <twi_writeTo+0xa0>
    219c:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_error>
    21a0:	80 33       	cpi	r24, 0x30	; 48
    21a2:	31 f0       	breq	.+12     	; 0x21b0 <twi_writeTo+0xa4>
    21a4:	94 e0       	ldi	r25, 0x04	; 4
    21a6:	05 c0       	rjmp	.+10     	; 0x21b2 <twi_writeTo+0xa6>
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <twi_writeTo+0xa6>
    21ac:	92 e0       	ldi	r25, 0x02	; 2
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <twi_writeTo+0xa6>
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	89 2f       	mov	r24, r25
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <twi_transmit>:
    21b8:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <twi_txBufferLength>
    21bc:	26 2f       	mov	r18, r22
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	24 0f       	add	r18, r20
    21c2:	31 1d       	adc	r19, r1
    21c4:	21 32       	cpi	r18, 0x21	; 33
    21c6:	31 05       	cpc	r19, r1
    21c8:	dc f4       	brge	.+54     	; 0x2200 <twi_transmit+0x48>
    21ca:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <twi_state>
    21ce:	24 30       	cpi	r18, 0x04	; 4
    21d0:	c9 f4       	brne	.+50     	; 0x2204 <twi_transmit+0x4c>
    21d2:	fc 01       	movw	r30, r24
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	86 17       	cp	r24, r22
    21da:	58 f4       	brcc	.+22     	; 0x21f2 <twi_transmit+0x3a>
    21dc:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <twi_txBufferLength>
    21e0:	21 91       	ld	r18, Z+
    21e2:	dc 01       	movw	r26, r24
    21e4:	af 51       	subi	r26, 0x1F	; 31
    21e6:	bc 4f       	sbci	r27, 0xFC	; 252
    21e8:	a3 0f       	add	r26, r19
    21ea:	b1 1d       	adc	r27, r1
    21ec:	2c 93       	st	X, r18
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	f3 cf       	rjmp	.-26     	; 0x21d8 <twi_transmit+0x20>
    21f2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_txBufferLength>
    21f6:	68 0f       	add	r22, r24
    21f8:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <twi_txBufferLength>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	08 95       	ret
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	08 95       	ret
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	08 95       	ret

00002208 <twi_attachSlaveRxEvent>:
    2208:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <twi_onSlaveReceive+0x1>
    220c:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_onSlaveReceive>
    2210:	08 95       	ret

00002212 <twi_attachSlaveTxEvent>:
    2212:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <twi_onSlaveTransmit+0x1>
    2216:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <twi_onSlaveTransmit>
    221a:	08 95       	ret

0000221c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    221c:	85 ed       	ldi	r24, 0xD5	; 213
    221e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2222:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2226:	84 fd       	sbrc	r24, 4
    2228:	fc cf       	rjmp	.-8      	; 0x2222 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    222a:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
    222e:	08 95       	ret

00002230 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2230:	85 ec       	ldi	r24, 0xC5	; 197
    2232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2236:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
    223a:	08 95       	ret

0000223c <__vector_24>:
}

ISR(TWI_vect)
{
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	4f 93       	push	r20
    224c:	5f 93       	push	r21
    224e:	6f 93       	push	r22
    2250:	7f 93       	push	r23
    2252:	8f 93       	push	r24
    2254:	9f 93       	push	r25
    2256:	af 93       	push	r26
    2258:	bf 93       	push	r27
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
  switch(TW_STATUS){
    225e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2262:	88 7f       	andi	r24, 0xF8	; 248
    2264:	80 36       	cpi	r24, 0x60	; 96
    2266:	09 f4       	brne	.+2      	; 0x226a <__vector_24+0x2e>
    2268:	9e c0       	rjmp	.+316    	; 0x23a6 <__vector_24+0x16a>
    226a:	78 f5       	brcc	.+94     	; 0x22ca <__vector_24+0x8e>
    226c:	88 32       	cpi	r24, 0x28	; 40
    226e:	09 f4       	brne	.+2      	; 0x2272 <__vector_24+0x36>
    2270:	5d c0       	rjmp	.+186    	; 0x232c <__vector_24+0xf0>
    2272:	90 f4       	brcc	.+36     	; 0x2298 <__vector_24+0x5c>
    2274:	80 31       	cpi	r24, 0x10	; 16
    2276:	09 f4       	brne	.+2      	; 0x227a <__vector_24+0x3e>
    2278:	56 c0       	rjmp	.+172    	; 0x2326 <__vector_24+0xea>
    227a:	38 f4       	brcc	.+14     	; 0x228a <__vector_24+0x4e>
    227c:	88 23       	and	r24, r24
    227e:	09 f4       	brne	.+2      	; 0x2282 <__vector_24+0x46>
    2280:	f5 c0       	rjmp	.+490    	; 0x246c <__vector_24+0x230>
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	09 f4       	brne	.+2      	; 0x2288 <__vector_24+0x4c>
    2286:	4f c0       	rjmp	.+158    	; 0x2326 <__vector_24+0xea>
    2288:	f5 c0       	rjmp	.+490    	; 0x2474 <__vector_24+0x238>
    228a:	88 31       	cpi	r24, 0x18	; 24
    228c:	09 f4       	brne	.+2      	; 0x2290 <__vector_24+0x54>
    228e:	4e c0       	rjmp	.+156    	; 0x232c <__vector_24+0xf0>
    2290:	80 32       	cpi	r24, 0x20	; 32
    2292:	09 f4       	brne	.+2      	; 0x2296 <__vector_24+0x5a>
    2294:	5f c0       	rjmp	.+190    	; 0x2354 <__vector_24+0x118>
    2296:	ee c0       	rjmp	.+476    	; 0x2474 <__vector_24+0x238>
    2298:	80 34       	cpi	r24, 0x40	; 64
    229a:	09 f4       	brne	.+2      	; 0x229e <__vector_24+0x62>
    229c:	6a c0       	rjmp	.+212    	; 0x2372 <__vector_24+0x136>
    229e:	58 f4       	brcc	.+22     	; 0x22b6 <__vector_24+0x7a>
    22a0:	80 33       	cpi	r24, 0x30	; 48
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <__vector_24+0x6a>
    22a4:	57 c0       	rjmp	.+174    	; 0x2354 <__vector_24+0x118>
    22a6:	88 33       	cpi	r24, 0x38	; 56
    22a8:	09 f0       	breq	.+2      	; 0x22ac <__vector_24+0x70>
    22aa:	e4 c0       	rjmp	.+456    	; 0x2474 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    22ac:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <twi_error>
      twi_releaseBus();
    22b0:	0e 94 18 11 	call	0x2230	; 0x2230 <twi_releaseBus>
      break;
    22b4:	df c0       	rjmp	.+446    	; 0x2474 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    22b6:	80 35       	cpi	r24, 0x50	; 80
    22b8:	09 f4       	brne	.+2      	; 0x22bc <__vector_24+0x80>
    22ba:	4f c0       	rjmp	.+158    	; 0x235a <__vector_24+0x11e>
    22bc:	88 35       	cpi	r24, 0x58	; 88
    22be:	09 f4       	brne	.+2      	; 0x22c2 <__vector_24+0x86>
    22c0:	5d c0       	rjmp	.+186    	; 0x237c <__vector_24+0x140>
    22c2:	88 34       	cpi	r24, 0x48	; 72
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <__vector_24+0x8c>
    22c6:	d6 c0       	rjmp	.+428    	; 0x2474 <__vector_24+0x238>
    22c8:	d3 c0       	rjmp	.+422    	; 0x2470 <__vector_24+0x234>
    22ca:	88 39       	cpi	r24, 0x98	; 152
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <__vector_24+0x94>
    22ce:	c4 c0       	rjmp	.+392    	; 0x2458 <__vector_24+0x21c>
    22d0:	a8 f4       	brcc	.+42     	; 0x22fc <__vector_24+0xc0>
    22d2:	88 37       	cpi	r24, 0x78	; 120
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <__vector_24+0x9c>
    22d6:	67 c0       	rjmp	.+206    	; 0x23a6 <__vector_24+0x16a>
    22d8:	38 f4       	brcc	.+14     	; 0x22e8 <__vector_24+0xac>
    22da:	88 36       	cpi	r24, 0x68	; 104
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <__vector_24+0xa4>
    22de:	63 c0       	rjmp	.+198    	; 0x23a6 <__vector_24+0x16a>
    22e0:	80 37       	cpi	r24, 0x70	; 112
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <__vector_24+0xaa>
    22e4:	60 c0       	rjmp	.+192    	; 0x23a6 <__vector_24+0x16a>
    22e6:	c6 c0       	rjmp	.+396    	; 0x2474 <__vector_24+0x238>
    22e8:	88 38       	cpi	r24, 0x88	; 136
    22ea:	09 f4       	brne	.+2      	; 0x22ee <__vector_24+0xb2>
    22ec:	b5 c0       	rjmp	.+362    	; 0x2458 <__vector_24+0x21c>
    22ee:	80 39       	cpi	r24, 0x90	; 144
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <__vector_24+0xb8>
    22f2:	5f c0       	rjmp	.+190    	; 0x23b2 <__vector_24+0x176>
    22f4:	80 38       	cpi	r24, 0x80	; 128
    22f6:	09 f0       	breq	.+2      	; 0x22fa <__vector_24+0xbe>
    22f8:	bd c0       	rjmp	.+378    	; 0x2474 <__vector_24+0x238>
    22fa:	5b c0       	rjmp	.+182    	; 0x23b2 <__vector_24+0x176>
    22fc:	80 3b       	cpi	r24, 0xB0	; 176
    22fe:	09 f4       	brne	.+2      	; 0x2302 <__vector_24+0xc6>
    2300:	83 c0       	rjmp	.+262    	; 0x2408 <__vector_24+0x1cc>
    2302:	38 f4       	brcc	.+14     	; 0x2312 <__vector_24+0xd6>
    2304:	80 3a       	cpi	r24, 0xA0	; 160
    2306:	09 f4       	brne	.+2      	; 0x230a <__vector_24+0xce>
    2308:	66 c0       	rjmp	.+204    	; 0x23d6 <__vector_24+0x19a>
    230a:	88 3a       	cpi	r24, 0xA8	; 168
    230c:	09 f4       	brne	.+2      	; 0x2310 <__vector_24+0xd4>
    230e:	7c c0       	rjmp	.+248    	; 0x2408 <__vector_24+0x1cc>
    2310:	b1 c0       	rjmp	.+354    	; 0x2474 <__vector_24+0x238>
    2312:	80 3c       	cpi	r24, 0xC0	; 192
    2314:	09 f4       	brne	.+2      	; 0x2318 <__vector_24+0xdc>
    2316:	a4 c0       	rjmp	.+328    	; 0x2460 <__vector_24+0x224>
    2318:	88 3c       	cpi	r24, 0xC8	; 200
    231a:	09 f4       	brne	.+2      	; 0x231e <__vector_24+0xe2>
    231c:	a1 c0       	rjmp	.+322    	; 0x2460 <__vector_24+0x224>
    231e:	88 3b       	cpi	r24, 0xB8	; 184
    2320:	09 f4       	brne	.+2      	; 0x2324 <__vector_24+0xe8>
    2322:	87 c0       	rjmp	.+270    	; 0x2432 <__vector_24+0x1f6>
    2324:	a7 c0       	rjmp	.+334    	; 0x2474 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2326:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_slarw>
    232a:	10 c0       	rjmp	.+32     	; 0x234c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    232c:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <twi_masterBufferIndex>
    2330:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_masterBufferLength>
    2334:	98 17       	cp	r25, r24
    2336:	70 f5       	brcc	.+92     	; 0x2394 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2338:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_masterBufferIndex>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	8e 0f       	add	r24, r30
    2340:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_masterBufferIndex>
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	ed 5f       	subi	r30, 0xFD	; 253
    2348:	fb 4f       	sbci	r31, 0xFB	; 251
    234a:	80 81       	ld	r24, Z
    234c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2350:	85 ec       	ldi	r24, 0xC5	; 197
    2352:	83 c0       	rjmp	.+262    	; 0x245a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2354:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <twi_error>
    2358:	8b c0       	rjmp	.+278    	; 0x2470 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    235a:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_masterBufferIndex>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	8e 0f       	add	r24, r30
    2362:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_masterBufferIndex>
    2366:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	ed 5f       	subi	r30, 0xFD	; 253
    236e:	fb 4f       	sbci	r31, 0xFB	; 251
    2370:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2372:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <twi_masterBufferIndex>
    2376:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_masterBufferLength>
    237a:	6b c0       	rjmp	.+214    	; 0x2452 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    237c:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_masterBufferIndex>
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	8e 0f       	add	r24, r30
    2384:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_masterBufferIndex>
    2388:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	ed 5f       	subi	r30, 0xFD	; 253
    2390:	fb 4f       	sbci	r31, 0xFB	; 251
    2392:	80 83       	st	Z, r24
	if (twi_sendStop)
    2394:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_sendStop>
    2398:	81 11       	cpse	r24, r1
    239a:	6a c0       	rjmp	.+212    	; 0x2470 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    23a2:	84 ea       	ldi	r24, 0xA4	; 164
    23a4:	5e c0       	rjmp	.+188    	; 0x2462 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    23a6:	83 e0       	ldi	r24, 0x03	; 3
    23a8:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    23ac:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <twi_rxBufferIndex>
    23b0:	cf cf       	rjmp	.-98     	; 0x2350 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    23b2:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    23b6:	80 32       	cpi	r24, 0x20	; 32
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__vector_24+0x180>
    23ba:	4e c0       	rjmp	.+156    	; 0x2458 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    23bc:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	8e 0f       	add	r24, r30
    23c4:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <twi_rxBufferIndex>
    23c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	e1 54       	subi	r30, 0x41	; 65
    23d0:	fc 4f       	sbci	r31, 0xFC	; 252
    23d2:	80 83       	st	Z, r24
    23d4:	bd cf       	rjmp	.-134    	; 0x2350 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    23d6:	0e 94 18 11 	call	0x2230	; 0x2230 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    23da:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    23de:	80 32       	cpi	r24, 0x20	; 32
    23e0:	30 f4       	brcc	.+12     	; 0x23ee <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    23e2:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	e1 54       	subi	r30, 0x41	; 65
    23ea:	fc 4f       	sbci	r31, 0xFC	; 252
    23ec:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    23ee:	60 91 be 03 	lds	r22, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_onSlaveReceive>
    23f8:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <twi_onSlaveReceive+0x1>
    23fc:	8f eb       	ldi	r24, 0xBF	; 191
    23fe:	93 e0       	ldi	r25, 0x03	; 3
    2400:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2402:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <twi_rxBufferIndex>
      break;
    2406:	36 c0       	rjmp	.+108    	; 0x2474 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2408:	84 e0       	ldi	r24, 0x04	; 4
    240a:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    240e:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2412:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2416:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <twi_onSlaveTransmit>
    241a:	f0 91 26 04 	lds	r31, 0x0426	; 0x800426 <twi_onSlaveTransmit+0x1>
    241e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2420:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_txBufferLength>
    2424:	81 11       	cpse	r24, r1
    2426:	05 c0       	rjmp	.+10     	; 0x2432 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    242e:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2432:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <twi_txBufferIndex>
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	8e 0f       	add	r24, r30
    243a:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <twi_txBufferIndex>
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	ef 51       	subi	r30, 0x1F	; 31
    2442:	fc 4f       	sbci	r31, 0xFC	; 252
    2444:	80 81       	ld	r24, Z
    2446:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    244a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <twi_txBufferIndex>
    244e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_txBufferLength>
    2452:	98 17       	cp	r25, r24
    2454:	08 f4       	brcc	.+2      	; 0x2458 <__vector_24+0x21c>
    2456:	7c cf       	rjmp	.-264    	; 0x2350 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2458:	85 e8       	ldi	r24, 0x85	; 133
    245a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    245e:	0a c0       	rjmp	.+20     	; 0x2474 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2460:	85 ec       	ldi	r24, 0xC5	; 197
    2462:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2466:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
      break;
    246a:	04 c0       	rjmp	.+8      	; 0x2474 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    246c:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_error>
      twi_stop();
    2470:	0e 94 0e 11 	call	0x221c	; 0x221c <twi_stop>
      break;
  }
}
    2474:	ff 91       	pop	r31
    2476:	ef 91       	pop	r30
    2478:	bf 91       	pop	r27
    247a:	af 91       	pop	r26
    247c:	9f 91       	pop	r25
    247e:	8f 91       	pop	r24
    2480:	7f 91       	pop	r23
    2482:	6f 91       	pop	r22
    2484:	5f 91       	pop	r21
    2486:	4f 91       	pop	r20
    2488:	3f 91       	pop	r19
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

00002496 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2496:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    24a0:	82 1b       	sub	r24, r18
    24a2:	91 09       	sbc	r25, r1
    24a4:	08 95       	ret

000024a6 <_ZN7TwoWire4readEv>:
    24a6:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    24aa:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    24ae:	98 17       	cp	r25, r24
    24b0:	50 f4       	brcc	.+20     	; 0x24c6 <_ZN7TwoWire4readEv+0x20>
    24b2:	e9 2f       	mov	r30, r25
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	ef 59       	subi	r30, 0x9F	; 159
    24b8:	fb 4f       	sbci	r31, 0xFB	; 251
    24ba:	20 81       	ld	r18, Z
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	9f 5f       	subi	r25, 0xFF	; 255
    24c0:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <_ZN7TwoWire4readEv+0x24>
    24c6:	2f ef       	ldi	r18, 0xFF	; 255
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	c9 01       	movw	r24, r18
    24cc:	08 95       	ret

000024ce <_ZN7TwoWire4peekEv>:
    24ce:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    24d2:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    24d6:	e8 17       	cp	r30, r24
    24d8:	30 f4       	brcc	.+12     	; 0x24e6 <_ZN7TwoWire4peekEv+0x18>
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	ef 59       	subi	r30, 0x9F	; 159
    24de:	fb 4f       	sbci	r31, 0xFB	; 251
    24e0:	80 81       	ld	r24, Z
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	08 95       	ret
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	9f ef       	ldi	r25, 0xFF	; 255
    24ea:	08 95       	ret

000024ec <_ZN7TwoWire5flushEv>:
    24ec:	08 95       	ret

000024ee <_ZN7TwoWire16onReceiveServiceEPhi>:
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	ec 01       	movw	r28, r24
    24f4:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <_ZN7TwoWire14user_onReceiveE>
    24f8:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <_ZN7TwoWire14user_onReceiveE+0x1>
    24fc:	30 97       	sbiw	r30, 0x00	; 0
    24fe:	f1 f0       	breq	.+60     	; 0x253c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2500:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2504:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2508:	98 17       	cp	r25, r24
    250a:	c0 f0       	brcs	.+48     	; 0x253c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	29 2f       	mov	r18, r25
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	26 17       	cp	r18, r22
    2514:	37 07       	cpc	r19, r23
    2516:	54 f4       	brge	.+20     	; 0x252c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2518:	de 01       	movw	r26, r28
    251a:	a2 0f       	add	r26, r18
    251c:	b3 1f       	adc	r27, r19
    251e:	4c 91       	ld	r20, X
    2520:	d9 01       	movw	r26, r18
    2522:	af 59       	subi	r26, 0x9F	; 159
    2524:	bb 4f       	sbci	r27, 0xFB	; 251
    2526:	4c 93       	st	X, r20
    2528:	9f 5f       	subi	r25, 0xFF	; 255
    252a:	f1 cf       	rjmp	.-30     	; 0x250e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    252c:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2530:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2534:	cb 01       	movw	r24, r22
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	09 94       	ijmp
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <_ZN7TwoWire16onRequestServiceEv>:
    2542:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <_ZN7TwoWire14user_onRequestE>
    2546:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <_ZN7TwoWire14user_onRequestE+0x1>
    254a:	30 97       	sbiw	r30, 0x00	; 0
    254c:	29 f0       	breq	.+10     	; 0x2558 <_ZN7TwoWire16onRequestServiceEv+0x16>
    254e:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    2552:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2556:	09 94       	ijmp
    2558:	08 95       	ret

0000255a <_ZN7TwoWire5writeEPKhj>:
    255a:	cf 92       	push	r12
    255c:	df 92       	push	r13
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	7c 01       	movw	r14, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8a 01       	movw	r16, r20
    2570:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN7TwoWire12transmittingE>
    2574:	22 23       	and	r18, r18
    2576:	89 f0       	breq	.+34     	; 0x259a <_ZN7TwoWire5writeEPKhj+0x40>
    2578:	eb 01       	movw	r28, r22
    257a:	6b 01       	movw	r12, r22
    257c:	c4 0e       	add	r12, r20
    257e:	d5 1e       	adc	r13, r21
    2580:	cc 15       	cp	r28, r12
    2582:	dd 05       	cpc	r29, r13
    2584:	69 f0       	breq	.+26     	; 0x25a0 <_ZN7TwoWire5writeEPKhj+0x46>
    2586:	69 91       	ld	r22, Y+
    2588:	d7 01       	movw	r26, r14
    258a:	ed 91       	ld	r30, X+
    258c:	fc 91       	ld	r31, X
    258e:	01 90       	ld	r0, Z+
    2590:	f0 81       	ld	r31, Z
    2592:	e0 2d       	mov	r30, r0
    2594:	c7 01       	movw	r24, r14
    2596:	09 95       	icall
    2598:	f3 cf       	rjmp	.-26     	; 0x2580 <_ZN7TwoWire5writeEPKhj+0x26>
    259a:	64 2f       	mov	r22, r20
    259c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <twi_transmit>
    25a0:	c8 01       	movw	r24, r16
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	08 95       	ret

000025b4 <_ZN7TwoWire5writeEh>:
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	1f 92       	push	r1
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	69 83       	std	Y+1, r22	; 0x01
    25c0:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN7TwoWire12transmittingE>
    25c4:	22 23       	and	r18, r18
    25c6:	d1 f0       	breq	.+52     	; 0x25fc <_ZN7TwoWire5writeEh+0x48>
    25c8:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    25cc:	20 32       	cpi	r18, 0x20	; 32
    25ce:	40 f0       	brcs	.+16     	; 0x25e0 <_ZN7TwoWire5writeEh+0x2c>
    25d0:	21 e0       	ldi	r18, 0x01	; 1
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	fc 01       	movw	r30, r24
    25d6:	33 83       	std	Z+3, r19	; 0x03
    25d8:	22 83       	std	Z+2, r18	; 0x02
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	15 c0       	rjmp	.+42     	; 0x260a <_ZN7TwoWire5writeEh+0x56>
    25e0:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    25e4:	e8 2f       	mov	r30, r24
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	e2 5c       	subi	r30, 0xC2	; 194
    25ea:	fb 4f       	sbci	r31, 0xFB	; 251
    25ec:	99 81       	ldd	r25, Y+1	; 0x01
    25ee:	90 83       	st	Z, r25
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    25f6:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <_ZN7TwoWire5writeEh+0x52>
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	ce 01       	movw	r24, r28
    2600:	01 96       	adiw	r24, 0x01	; 1
    2602:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <twi_transmit>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0f 90       	pop	r0
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <_ZN7TwoWireC1Ev>:
    2612:	fc 01       	movw	r30, r24
    2614:	13 82       	std	Z+3, r1	; 0x03
    2616:	12 82       	std	Z+2, r1	; 0x02
    2618:	88 ee       	ldi	r24, 0xE8	; 232
    261a:	93 e0       	ldi	r25, 0x03	; 3
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	84 83       	std	Z+4, r24	; 0x04
    2622:	95 83       	std	Z+5, r25	; 0x05
    2624:	a6 83       	std	Z+6, r26	; 0x06
    2626:	b7 83       	std	Z+7, r27	; 0x07
    2628:	8b e6       	ldi	r24, 0x6B	; 107
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
    2630:	08 95       	ret

00002632 <_ZN7TwoWire5beginEv>:
    2632:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2636:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    263a:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    263e:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2642:	0e 94 20 10 	call	0x2040	; 0x2040 <twi_init>
    2646:	81 ea       	ldi	r24, 0xA1	; 161
    2648:	92 e1       	ldi	r25, 0x12	; 18
    264a:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_attachSlaveTxEvent>
    264e:	87 e7       	ldi	r24, 0x77	; 119
    2650:	92 e1       	ldi	r25, 0x12	; 18
    2652:	0c 94 04 11 	jmp	0x2208	; 0x2208 <twi_attachSlaveRxEvent>

00002656 <_ZN7TwoWire17beginTransmissionEh>:
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN7TwoWire12transmittingE>
    265c:	60 93 5e 04 	sts	0x045E, r22	; 0x80045e <_ZN7TwoWire9txAddressE>
    2660:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    2664:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2668:	08 95       	ret

0000266a <_ZN7TwoWire17beginTransmissionEi>:
    266a:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <_ZN7TwoWire17beginTransmissionEh>

0000266e <_ZN7TwoWire15endTransmissionEh>:
    266e:	0f 93       	push	r16
    2670:	06 2f       	mov	r16, r22
    2672:	21 e0       	ldi	r18, 0x01	; 1
    2674:	40 91 3c 04 	lds	r20, 0x043C	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2678:	6e e3       	ldi	r22, 0x3E	; 62
    267a:	74 e0       	ldi	r23, 0x04	; 4
    267c:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZN7TwoWire9txAddressE>
    2680:	0e 94 86 10 	call	0x210c	; 0x210c <twi_writeTo>
    2684:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    2688:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    268c:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZN7TwoWire12transmittingE>
    2690:	0f 91       	pop	r16
    2692:	08 95       	ret

00002694 <_ZN7TwoWire11requestFromEhhmhh>:
    2694:	4f 92       	push	r4
    2696:	5f 92       	push	r5
    2698:	6f 92       	push	r6
    269a:	7f 92       	push	r7
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	5c 01       	movw	r10, r24
    26b0:	f6 2e       	mov	r15, r22
    26b2:	d4 2f       	mov	r29, r20
    26b4:	28 01       	movw	r4, r16
    26b6:	39 01       	movw	r6, r18
    26b8:	ee 20       	and	r14, r14
    26ba:	21 f1       	breq	.+72     	; 0x2704 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    26bc:	0e 94 2b 13 	call	0x2656	; 0x2656 <_ZN7TwoWire17beginTransmissionEh>
    26c0:	ce 2d       	mov	r28, r14
    26c2:	c4 30       	cpi	r28, 0x04	; 4
    26c4:	08 f0       	brcs	.+2      	; 0x26c8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    26c6:	c3 e0       	ldi	r28, 0x03	; 3
    26c8:	c1 50       	subi	r28, 0x01	; 1
    26ca:	c0 f0       	brcs	.+48     	; 0x26fc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    26cc:	28 e0       	ldi	r18, 0x08	; 8
    26ce:	c2 9f       	mul	r28, r18
    26d0:	c0 01       	movw	r24, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	a3 01       	movw	r20, r6
    26d6:	92 01       	movw	r18, r4
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    26da:	56 95       	lsr	r21
    26dc:	47 95       	ror	r20
    26de:	37 95       	ror	r19
    26e0:	27 95       	ror	r18
    26e2:	8a 95       	dec	r24
    26e4:	d2 f7       	brpl	.-12     	; 0x26da <_ZN7TwoWire11requestFromEhhmhh+0x46>
    26e6:	ca 01       	movw	r24, r20
    26e8:	b9 01       	movw	r22, r18
    26ea:	d5 01       	movw	r26, r10
    26ec:	ed 91       	ld	r30, X+
    26ee:	fc 91       	ld	r31, X
    26f0:	01 90       	ld	r0, Z+
    26f2:	f0 81       	ld	r31, Z
    26f4:	e0 2d       	mov	r30, r0
    26f6:	c5 01       	movw	r24, r10
    26f8:	09 95       	icall
    26fa:	e6 cf       	rjmp	.-52     	; 0x26c8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	c5 01       	movw	r24, r10
    2700:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN7TwoWire15endTransmissionEh>
    2704:	4d 2f       	mov	r20, r29
    2706:	d1 32       	cpi	r29, 0x21	; 33
    2708:	08 f0       	brcs	.+2      	; 0x270c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	2c 2d       	mov	r18, r12
    270e:	61 e6       	ldi	r22, 0x61	; 97
    2710:	74 e0       	ldi	r23, 0x04	; 4
    2712:	8f 2d       	mov	r24, r15
    2714:	0e 94 3e 10 	call	0x207c	; 0x207c <twi_readFrom>
    2718:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    271c:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	cf 90       	pop	r12
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	7f 90       	pop	r7
    2734:	6f 90       	pop	r6
    2736:	5f 90       	pop	r5
    2738:	4f 90       	pop	r4
    273a:	08 95       	ret

0000273c <_ZN7TwoWire11requestFromEhhh>:
    273c:	cf 92       	push	r12
    273e:	ef 92       	push	r14
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	c2 2e       	mov	r12, r18
    2746:	e1 2c       	mov	r14, r1
    2748:	00 e0       	ldi	r16, 0x00	; 0
    274a:	10 e0       	ldi	r17, 0x00	; 0
    274c:	98 01       	movw	r18, r16
    274e:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN7TwoWire11requestFromEhhmhh>
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ef 90       	pop	r14
    2758:	cf 90       	pop	r12
    275a:	08 95       	ret

0000275c <_ZN7TwoWire11requestFromEii>:
    275c:	21 e0       	ldi	r18, 0x01	; 1
    275e:	0c 94 9e 13 	jmp	0x273c	; 0x273c <_ZN7TwoWire11requestFromEhhh>

00002762 <_ZN7TwoWire15endTransmissionEv>:
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	0c 94 37 13 	jmp	0x266e	; 0x266e <_ZN7TwoWire15endTransmissionEh>

00002768 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2768:	8b e2       	ldi	r24, 0x2B	; 43
    276a:	94 e0       	ldi	r25, 0x04	; 4
    276c:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_ZN7TwoWireC1Ev>

00002770 <_Z13encodeIntTesth>:

//RMonV3 types/flags test

#if IS_EXTENDED_TYPES_TEST == true

void encodeIntTest(uint8_t i) {
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	65 97       	sbiw	r28, 0x15	; 21
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	f8 2e       	mov	r15, r24
	
	uint8_t input[1];
	input[0] = i;
    278e:	8d 8b       	std	Y+21, r24	; 0x15
		
	char output2[10]{0};
    2790:	8a e0       	ldi	r24, 0x0A	; 10
    2792:	e8 2e       	mov	r14, r24
    2794:	8e 01       	movw	r16, r28
    2796:	05 5f       	subi	r16, 0xF5	; 245
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	f8 01       	movw	r30, r16
    279c:	8e 2d       	mov	r24, r14
    279e:	11 92       	st	Z+, r1
    27a0:	8a 95       	dec	r24
    27a2:	e9 f7       	brne	.-6      	; 0x279e <_Z13encodeIntTesth+0x2e>
	Helpers::base64_encode(&output2[0], (uint8_t*)&input, 1);
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	be 01       	movw	r22, r28
    27aa:	6b 5e       	subi	r22, 0xEB	; 235
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	c8 01       	movw	r24, r16
    27b0:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Helpers13base64_encodeEPcPhi>
		
	uint8_t output3[10]{0};
    27b4:	ce 01       	movw	r24, r28
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	fc 01       	movw	r30, r24
    27ba:	11 92       	st	Z+, r1
    27bc:	ea 94       	dec	r14
    27be:	e9 f7       	brne	.-6      	; 0x27ba <_Z13encodeIntTesth+0x4a>
	Helpers::base64_decode((uint8_t*)&output3, &output2[0], 10);
    27c0:	4a e0       	ldi	r20, 0x0A	; 10
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	b8 01       	movw	r22, r16
    27c6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7Helpers13base64_decodeEPhPci>
		
	if ((uint8_t)output3[0] != i) RM_LOGLN(F("*** INT ENC FAIL @1 ***"));
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	f8 16       	cp	r15, r24
    27ce:	31 f0       	breq	.+12     	; 0x27dc <_Z13encodeIntTesth+0x6c>
    27d0:	68 ed       	ldi	r22, 0xD8	; 216
    27d2:	77 e0       	ldi	r23, 0x07	; 7
    27d4:	81 e8       	ldi	r24, 0x81	; 129
    27d6:	94 e0       	ldi	r25, 0x04	; 4
    27d8:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ((uint8_t)output3[1] != 0) RM_LOGLN(F("*** INT ENC FAIL @2 ***")); //Overflow
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	88 23       	and	r24, r24
    27e0:	31 f0       	breq	.+12     	; 0x27ee <_Z13encodeIntTesth+0x7e>
    27e2:	60 ec       	ldi	r22, 0xC0	; 192
    27e4:	77 e0       	ldi	r23, 0x07	; 7
    27e6:	81 e8       	ldi	r24, 0x81	; 129
    27e8:	94 e0       	ldi	r25, 0x04	; 4
    27ea:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    27ee:	65 96       	adiw	r28, 0x15	; 21
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	08 95       	ret

00002808 <_Z13encodeStrTestPcS_>:

void encodeStrTest(char* encVal, char* decVal) {
    2808:	af 92       	push	r10
    280a:	bf 92       	push	r11
    280c:	cf 92       	push	r12
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	a8 97       	sbiw	r28, 0x28	; 40
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	8c 01       	movw	r16, r24
    282e:	5b 01       	movw	r10, r22
	
	int inputLen = strlen(encVal);
    2830:	fc 01       	movw	r30, r24
    2832:	01 90       	ld	r0, Z+
    2834:	00 20       	and	r0, r0
    2836:	e9 f7       	brne	.-6      	; 0x2832 <_Z13encodeStrTestPcS_+0x2a>
    2838:	31 97       	sbiw	r30, 0x01	; 1
    283a:	6f 01       	movw	r12, r30
    283c:	c8 1a       	sub	r12, r24
    283e:	d9 0a       	sbc	r13, r25
	int decodeLen = strlen(decVal);
    2840:	fb 01       	movw	r30, r22
    2842:	01 90       	ld	r0, Z+
    2844:	00 20       	and	r0, r0
    2846:	e9 f7       	brne	.-6      	; 0x2842 <_Z13encodeStrTestPcS_+0x3a>
    2848:	31 97       	sbiw	r30, 0x01	; 1
    284a:	7f 01       	movw	r14, r30
    284c:	e6 1a       	sub	r14, r22
    284e:	f7 0a       	sbc	r15, r23
	
	RM_LOG2("Running Test For ", encVal);
    2850:	67 e7       	ldi	r22, 0x77	; 119
    2852:	71 e0       	ldi	r23, 0x01	; 1
    2854:	81 e8       	ldi	r24, 0x81	; 129
    2856:	94 e0       	ldi	r25, 0x04	; 4
    2858:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    285c:	66 e4       	ldi	r22, 0x46	; 70
    285e:	71 e0       	ldi	r23, 0x01	; 1
    2860:	81 e8       	ldi	r24, 0x81	; 129
    2862:	94 e0       	ldi	r25, 0x04	; 4
    2864:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    2868:	b8 01       	movw	r22, r16
    286a:	81 e8       	ldi	r24, 0x81	; 129
    286c:	94 e0       	ldi	r25, 0x04	; 4
    286e:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
	int encLen = Helpers::base64_enc_len(inputLen); //No@terminal char
    2872:	c6 01       	movw	r24, r12
    2874:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN7Helpers14base64_enc_lenEi>
	if (encLen != strlen(decVal)+1) RM_LOGLN(F("*** STR ENC FAIL @1 ***"));
    2878:	f5 01       	movw	r30, r10
    287a:	01 90       	ld	r0, Z+
    287c:	00 20       	and	r0, r0
    287e:	e9 f7       	brne	.-6      	; 0x287a <_Z13encodeStrTestPcS_+0x72>
    2880:	9f 01       	movw	r18, r30
    2882:	2a 19       	sub	r18, r10
    2884:	3b 09       	sbc	r19, r11
    2886:	28 17       	cp	r18, r24
    2888:	39 07       	cpc	r19, r25
    288a:	31 f0       	breq	.+12     	; 0x2898 <_Z13encodeStrTestPcS_+0x90>
    288c:	68 ea       	ldi	r22, 0xA8	; 168
    288e:	77 e0       	ldi	r23, 0x07	; 7
    2890:	81 e8       	ldi	r24, 0x81	; 129
    2892:	94 e0       	ldi	r25, 0x04	; 4
    2894:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
		
	char strEncoded[20];
	Helpers::fillArray((uint8_t*)strEncoded, sizeof(strEncoded), 1); //Extra buffer of 1s to test no overspill
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	64 e1       	ldi	r22, 0x14	; 20
    289c:	70 e0       	ldi	r23, 0x00	; 0
    289e:	ce 01       	movw	r24, r28
    28a0:	45 96       	adiw	r24, 0x15	; 21
    28a2:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN7Helpers9fillArrayEPhjh>

	int strEncodedLen = Helpers::base64_encode(strEncoded, (uint8_t*)encVal, inputLen);
    28a6:	a6 01       	movw	r20, r12
    28a8:	b8 01       	movw	r22, r16
    28aa:	ce 01       	movw	r24, r28
    28ac:	45 96       	adiw	r24, 0x15	; 21
    28ae:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Helpers13base64_encodeEPcPhi>
	
	if (strEncodedLen != strlen(decVal)+1) RM_LOGLN(F("*** STR ENC FAIL @2 ***")); //Yes@terminal char
    28b2:	f5 01       	movw	r30, r10
    28b4:	01 90       	ld	r0, Z+
    28b6:	00 20       	and	r0, r0
    28b8:	e9 f7       	brne	.-6      	; 0x28b4 <_Z13encodeStrTestPcS_+0xac>
    28ba:	9f 01       	movw	r18, r30
    28bc:	2a 19       	sub	r18, r10
    28be:	3b 09       	sbc	r19, r11
    28c0:	28 17       	cp	r18, r24
    28c2:	39 07       	cpc	r19, r25
    28c4:	31 f0       	breq	.+12     	; 0x28d2 <_Z13encodeStrTestPcS_+0xca>
    28c6:	60 e9       	ldi	r22, 0x90	; 144
    28c8:	77 e0       	ldi	r23, 0x07	; 7
    28ca:	81 e8       	ldi	r24, 0x81	; 129
    28cc:	94 e0       	ldi	r25, 0x04	; 4
    28ce:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (decVal[decodeLen-1] != strEncoded[decodeLen-1]) RM_LOGLN(F("*** STR ENC FAIL @3 ***"));
    28d2:	f5 01       	movw	r30, r10
    28d4:	ee 0d       	add	r30, r14
    28d6:	ff 1d       	adc	r31, r15
    28d8:	31 97       	sbiw	r30, 0x01	; 1
    28da:	90 81       	ld	r25, Z
    28dc:	fe 01       	movw	r30, r28
    28de:	ee 0d       	add	r30, r14
    28e0:	ff 1d       	adc	r31, r15
    28e2:	84 89       	ldd	r24, Z+20	; 0x14
    28e4:	98 17       	cp	r25, r24
    28e6:	31 f0       	breq	.+12     	; 0x28f4 <_Z13encodeStrTestPcS_+0xec>
    28e8:	68 e7       	ldi	r22, 0x78	; 120
    28ea:	77 e0       	ldi	r23, 0x07	; 7
    28ec:	81 e8       	ldi	r24, 0x81	; 129
    28ee:	94 e0       	ldi	r25, 0x04	; 4
    28f0:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (0 != strEncoded[decodeLen]) RM_LOGLN(F("*** STR ENC FAIL @4 ***"));
    28f4:	e5 e1       	ldi	r30, 0x15	; 21
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	ec 0f       	add	r30, r28
    28fa:	fd 1f       	adc	r31, r29
    28fc:	ee 0d       	add	r30, r14
    28fe:	ff 1d       	adc	r31, r15
    2900:	80 81       	ld	r24, Z
    2902:	88 23       	and	r24, r24
    2904:	31 f0       	breq	.+12     	; 0x2912 <_Z13encodeStrTestPcS_+0x10a>
    2906:	60 e6       	ldi	r22, 0x60	; 96
    2908:	77 e0       	ldi	r23, 0x07	; 7
    290a:	81 e8       	ldi	r24, 0x81	; 129
    290c:	94 e0       	ldi	r25, 0x04	; 4
    290e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (1 != strEncoded[decodeLen+1]) RM_LOGLN(F("*** STR ENC FAIL @5 ***")); //May have overwritten
    2912:	8f ef       	ldi	r24, 0xFF	; 255
    2914:	e8 1a       	sub	r14, r24
    2916:	f8 0a       	sbc	r15, r24
    2918:	e5 e1       	ldi	r30, 0x15	; 21
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ec 0f       	add	r30, r28
    291e:	fd 1f       	adc	r31, r29
    2920:	ee 0d       	add	r30, r14
    2922:	ff 1d       	adc	r31, r15
    2924:	80 81       	ld	r24, Z
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	31 f0       	breq	.+12     	; 0x2936 <_Z13encodeStrTestPcS_+0x12e>
    292a:	68 e4       	ldi	r22, 0x48	; 72
    292c:	77 e0       	ldi	r23, 0x07	; 7
    292e:	81 e8       	ldi	r24, 0x81	; 129
    2930:	94 e0       	ldi	r25, 0x04	; 4
    2932:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
		
	int expStrDecodingLen = Helpers::base64_dec_len(decVal, decodeLen+1);
    2936:	b7 01       	movw	r22, r14
    2938:	c5 01       	movw	r24, r10
    293a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN7Helpers14base64_dec_lenEPci>
	if (expStrDecodingLen != strlen(encVal)) RM_LOGLN(F("*** STR DEC FAIL @1 ***")); //No@terminal char
    293e:	f8 01       	movw	r30, r16
    2940:	01 90       	ld	r0, Z+
    2942:	00 20       	and	r0, r0
    2944:	e9 f7       	brne	.-6      	; 0x2940 <_Z13encodeStrTestPcS_+0x138>
    2946:	31 97       	sbiw	r30, 0x01	; 1
    2948:	e0 1b       	sub	r30, r16
    294a:	f1 0b       	sbc	r31, r17
    294c:	e8 17       	cp	r30, r24
    294e:	f9 07       	cpc	r31, r25
    2950:	31 f0       	breq	.+12     	; 0x295e <_Z13encodeStrTestPcS_+0x156>
    2952:	60 e3       	ldi	r22, 0x30	; 48
    2954:	77 e0       	ldi	r23, 0x07	; 7
    2956:	81 e8       	ldi	r24, 0x81	; 129
    2958:	94 e0       	ldi	r25, 0x04	; 4
    295a:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
		
	char strDecoded[20];
	Helpers::fillArray((uint8_t*)strDecoded, sizeof(strDecoded), 1); //Extra buffer of 1s to test no overspill
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	64 e1       	ldi	r22, 0x14	; 20
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	ce 01       	movw	r24, r28
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN7Helpers9fillArrayEPhjh>
		
	int strDecodedLen = Helpers::base64_decode((uint8_t*)strDecoded, decVal, decodeLen+1);
    296c:	a7 01       	movw	r20, r14
    296e:	b5 01       	movw	r22, r10
    2970:	ce 01       	movw	r24, r28
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7Helpers13base64_decodeEPhPci>
	if (strDecodedLen != strlen(encVal)) RM_LOGLN(F("*** STR DEC FAIL @2 ***")); //No@terminal char
    2978:	f8 01       	movw	r30, r16
    297a:	01 90       	ld	r0, Z+
    297c:	00 20       	and	r0, r0
    297e:	e9 f7       	brne	.-6      	; 0x297a <_Z13encodeStrTestPcS_+0x172>
    2980:	31 97       	sbiw	r30, 0x01	; 1
    2982:	e0 1b       	sub	r30, r16
    2984:	f1 0b       	sbc	r31, r17
    2986:	e8 17       	cp	r30, r24
    2988:	f9 07       	cpc	r31, r25
    298a:	31 f0       	breq	.+12     	; 0x2998 <_Z13encodeStrTestPcS_+0x190>
    298c:	68 e1       	ldi	r22, 0x18	; 24
    298e:	77 e0       	ldi	r23, 0x07	; 7
    2990:	81 e8       	ldi	r24, 0x81	; 129
    2992:	94 e0       	ldi	r25, 0x04	; 4
    2994:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (encVal[inputLen-1] != strDecoded[inputLen-1]) RM_LOGLN(F("*** STR DEC FAIL @3 ***"));
    2998:	0c 0d       	add	r16, r12
    299a:	1d 1d       	adc	r17, r13
    299c:	f8 01       	movw	r30, r16
    299e:	31 97       	sbiw	r30, 0x01	; 1
    29a0:	de 01       	movw	r26, r28
    29a2:	ac 0d       	add	r26, r12
    29a4:	bd 1d       	adc	r27, r13
    29a6:	90 81       	ld	r25, Z
    29a8:	8c 91       	ld	r24, X
    29aa:	98 17       	cp	r25, r24
    29ac:	31 f0       	breq	.+12     	; 0x29ba <_Z13encodeStrTestPcS_+0x1b2>
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	77 e0       	ldi	r23, 0x07	; 7
    29b2:	81 e8       	ldi	r24, 0x81	; 129
    29b4:	94 e0       	ldi	r25, 0x04	; 4
    29b6:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (1 != strDecoded[inputLen]) RM_LOGLN(F("*** STR DEC FAIL @4 ***")); //May have introduced \0, WRONG
    29ba:	e1 e0       	ldi	r30, 0x01	; 1
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	ec 0f       	add	r30, r28
    29c0:	fd 1f       	adc	r31, r29
    29c2:	ec 0d       	add	r30, r12
    29c4:	fd 1d       	adc	r31, r13
    29c6:	80 81       	ld	r24, Z
    29c8:	81 30       	cpi	r24, 0x01	; 1
    29ca:	31 f0       	breq	.+12     	; 0x29d8 <_Z13encodeStrTestPcS_+0x1d0>
    29cc:	68 ee       	ldi	r22, 0xE8	; 232
    29ce:	76 e0       	ldi	r23, 0x06	; 6
    29d0:	81 e8       	ldi	r24, 0x81	; 129
    29d2:	94 e0       	ldi	r25, 0x04	; 4
    29d4:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    29d8:	a8 96       	adiw	r28, 0x28	; 40
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	df 90       	pop	r13
    29f2:	cf 90       	pop	r12
    29f4:	bf 90       	pop	r11
    29f6:	af 90       	pop	r10
    29f8:	08 95       	ret

000029fa <_Z22encodeSingleSensorTestv>:

void encodeSingleSensorTest(){
    29fa:	cf 92       	push	r12
    29fc:	df 92       	push	r13
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	c8 57       	subi	r28, 0x78	; 120
    2a10:	d1 09       	sbc	r29, r1
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
	
	SensorData sd;			//size ~ 10 bytes
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	e0 96       	adiw	r28, 0x30	; 48
    2a20:	8f af       	std	Y+63, r24	; 0x3f
    2a22:	e0 97       	sbiw	r28, 0x30	; 48
    2a24:	e8 96       	adiw	r28, 0x38	; 56
    2a26:	1f ae       	std	Y+63, r1	; 0x3f
    2a28:	1e ae       	std	Y+62, r1	; 0x3e
    2a2a:	e8 97       	sbiw	r28, 0x38	; 56
	sd.battVoltage = 20245; //Includes mV - e.g. 20.245V
    2a2c:	85 e1       	ldi	r24, 0x15	; 21
    2a2e:	9f e4       	ldi	r25, 0x4F	; 79
    2a30:	e2 96       	adiw	r28, 0x32	; 50
    2a32:	9f af       	std	Y+63, r25	; 0x3f
    2a34:	8e af       	std	Y+62, r24	; 0x3e
    2a36:	e2 97       	sbiw	r28, 0x32	; 50
	sd.current = 65535;
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	9f ef       	ldi	r25, 0xFF	; 255
    2a3c:	e4 96       	adiw	r28, 0x34	; 52
    2a3e:	9f af       	std	Y+63, r25	; 0x3f
    2a40:	8e af       	std	Y+62, r24	; 0x3e
    2a42:	e4 97       	sbiw	r28, 0x34	; 52
	sd.errorChar = 3;
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	e9 96       	adiw	r28, 0x39	; 57
    2a48:	8f af       	std	Y+63, r24	; 0x3f
    2a4a:	e9 97       	sbiw	r28, 0x39	; 57
	sd.pVVoltage = 64913;
    2a4c:	81 e9       	ldi	r24, 0x91	; 145
    2a4e:	9d ef       	ldi	r25, 0xFD	; 253
    2a50:	e6 96       	adiw	r28, 0x36	; 54
    2a52:	9f af       	std	Y+63, r25	; 0x3f
    2a54:	8e af       	std	Y+62, r24	; 0x3e
    2a56:	e6 97       	sbiw	r28, 0x36	; 54
	sd.temperature = 0;
	Helpers::printSensorData(&sd);
    2a58:	ce 01       	movw	r24, r28
    2a5a:	81 59       	subi	r24, 0x91	; 145
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	uint8_t typicalMemUsage = sizeof("20245-65535-3-64913-0"); //23 bytes
	RM_LOG2("Basic int->str usage would be", typicalMemUsage);
    2a62:	69 e8       	ldi	r22, 0x89	; 137
    2a64:	71 e0       	ldi	r23, 0x01	; 1
    2a66:	81 e8       	ldi	r24, 0x81	; 129
    2a68:	94 e0       	ldi	r25, 0x04	; 4
    2a6a:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    2a6e:	66 e4       	ldi	r22, 0x46	; 70
    2a70:	71 e0       	ldi	r23, 0x01	; 1
    2a72:	81 e8       	ldi	r24, 0x81	; 129
    2a74:	94 e0       	ldi	r25, 0x04	; 4
    2a76:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    2a7a:	4a e0       	ldi	r20, 0x0A	; 10
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	66 e1       	ldi	r22, 0x16	; 22
    2a80:	81 e8       	ldi	r24, 0x81	; 129
    2a82:	94 e0       	ldi	r25, 0x04	; 4
    2a84:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
	
	// ENCODING
	char output[100]; //For testing, make a large buffer and check it doesn't overspill
	int len = Helpers::base64_encode(output, (uint8_t*)&sd, sizeof(SensorData));
    2a88:	4a e0       	ldi	r20, 0x0A	; 10
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	be 01       	movw	r22, r28
    2a8e:	61 59       	subi	r22, 0x91	; 145
    2a90:	7f 4f       	sbci	r23, 0xFF	; 255
    2a92:	8e 01       	movw	r16, r28
    2a94:	0f 5f       	subi	r16, 0xFF	; 255
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	c8 01       	movw	r24, r16
    2a9a:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7Helpers13base64_encodeEPcPhi>
    2a9e:	7c 01       	movw	r14, r24
	int expectedLen = Helpers::base64_enc_len(sizeof(SensorData));
    2aa0:	8a e0       	ldi	r24, 0x0A	; 10
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN7Helpers14base64_enc_lenEi>
    2aa8:	6c 01       	movw	r12, r24
	RM_LOG("Encoded result to be sent over Web is ");
    2aaa:	67 ea       	ldi	r22, 0xA7	; 167
    2aac:	71 e0       	ldi	r23, 0x01	; 1
    2aae:	81 e8       	ldi	r24, 0x81	; 129
    2ab0:	94 e0       	ldi	r25, 0x04	; 4
    2ab2:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
	RM_LOGLN(output);
    2ab6:	b8 01       	movw	r22, r16
    2ab8:	81 e8       	ldi	r24, 0x81	; 129
    2aba:	94 e0       	ldi	r25, 0x04	; 4
    2abc:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
	RM_LOG("\t with size of ");
    2ac0:	6e ec       	ldi	r22, 0xCE	; 206
    2ac2:	71 e0       	ldi	r23, 0x01	; 1
    2ac4:	81 e8       	ldi	r24, 0x81	; 129
    2ac6:	94 e0       	ldi	r25, 0x04	; 4
    2ac8:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
	RM_LOG(strlen(output)+1);
    2acc:	f8 01       	movw	r30, r16
    2ace:	01 90       	ld	r0, Z+
    2ad0:	00 20       	and	r0, r0
    2ad2:	e9 f7       	brne	.-6      	; 0x2ace <_Z22encodeSingleSensorTestv+0xd4>
    2ad4:	bf 01       	movw	r22, r30
    2ad6:	60 1b       	sub	r22, r16
    2ad8:	71 0b       	sbc	r23, r17
    2ada:	4a e0       	ldi	r20, 0x0A	; 10
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	81 e8       	ldi	r24, 0x81	; 129
    2ae0:	94 e0       	ldi	r25, 0x04	; 4
    2ae2:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN5Print5printEji>
	RM_LOGLN(" (including terminating '0')");
    2ae6:	6e ed       	ldi	r22, 0xDE	; 222
    2ae8:	71 e0       	ldi	r23, 0x01	; 1
    2aea:	81 e8       	ldi	r24, 0x81	; 129
    2aec:	94 e0       	ldi	r25, 0x04	; 4
    2aee:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
	if ((strlen(output)+1) != len) RM_LOGLN(F("*** ENC LEN FAIL @1 ***"));
    2af2:	f8 01       	movw	r30, r16
    2af4:	01 90       	ld	r0, Z+
    2af6:	00 20       	and	r0, r0
    2af8:	e9 f7       	brne	.-6      	; 0x2af4 <_Z22encodeSingleSensorTestv+0xfa>
    2afa:	cf 01       	movw	r24, r30
    2afc:	80 1b       	sub	r24, r16
    2afe:	91 0b       	sbc	r25, r17
    2b00:	8e 15       	cp	r24, r14
    2b02:	9f 05       	cpc	r25, r15
    2b04:	31 f0       	breq	.+12     	; 0x2b12 <_Z22encodeSingleSensorTestv+0x118>
    2b06:	60 ed       	ldi	r22, 0xD0	; 208
    2b08:	76 e0       	ldi	r23, 0x06	; 6
    2b0a:	81 e8       	ldi	r24, 0x81	; 129
    2b0c:	94 e0       	ldi	r25, 0x04	; 4
    2b0e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ((strlen(output)+1) != expectedLen) RM_LOGLN(F("*** ENC LEN FAIL @2 ***"));
    2b12:	f8 01       	movw	r30, r16
    2b14:	01 90       	ld	r0, Z+
    2b16:	00 20       	and	r0, r0
    2b18:	e9 f7       	brne	.-6      	; 0x2b14 <_Z22encodeSingleSensorTestv+0x11a>
    2b1a:	cf 01       	movw	r24, r30
    2b1c:	80 1b       	sub	r24, r16
    2b1e:	91 0b       	sbc	r25, r17
    2b20:	8c 15       	cp	r24, r12
    2b22:	9d 05       	cpc	r25, r13
    2b24:	31 f0       	breq	.+12     	; 0x2b32 <_Z22encodeSingleSensorTestv+0x138>
    2b26:	68 eb       	ldi	r22, 0xB8	; 184
    2b28:	76 e0       	ldi	r23, 0x06	; 6
    2b2a:	81 e8       	ldi	r24, 0x81	; 129
    2b2c:	94 e0       	ldi	r25, 0x04	; 4
    2b2e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// DECODING
	SensorData sdAfter;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	a6 96       	adiw	r28, 0x26	; 38
    2b36:	8f af       	std	Y+63, r24	; 0x3f
    2b38:	a6 97       	sbiw	r28, 0x26	; 38
    2b3a:	a8 96       	adiw	r28, 0x28	; 40
    2b3c:	1f ae       	std	Y+63, r1	; 0x3f
    2b3e:	1e ae       	std	Y+62, r1	; 0x3e
    2b40:	a8 97       	sbiw	r28, 0x28	; 40
    2b42:	aa 96       	adiw	r28, 0x2a	; 42
    2b44:	1f ae       	std	Y+63, r1	; 0x3f
    2b46:	1e ae       	std	Y+62, r1	; 0x3e
    2b48:	aa 97       	sbiw	r28, 0x2a	; 42
    2b4a:	ac 96       	adiw	r28, 0x2c	; 44
    2b4c:	1f ae       	std	Y+63, r1	; 0x3f
    2b4e:	1e ae       	std	Y+62, r1	; 0x3e
    2b50:	ac 97       	sbiw	r28, 0x2c	; 44
    2b52:	ae 96       	adiw	r28, 0x2e	; 46
    2b54:	1f ae       	std	Y+63, r1	; 0x3f
    2b56:	1e ae       	std	Y+62, r1	; 0x3e
    2b58:	ae 97       	sbiw	r28, 0x2e	; 46
    2b5a:	af 96       	adiw	r28, 0x2f	; 47
    2b5c:	1f ae       	std	Y+63, r1	; 0x3f
    2b5e:	af 97       	sbiw	r28, 0x2f	; 47
	int expDecodingLen = Helpers::base64_dec_len(output, len);
    2b60:	b7 01       	movw	r22, r14
    2b62:	c8 01       	movw	r24, r16
    2b64:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN7Helpers14base64_dec_lenEPci>
    2b68:	6c 01       	movw	r12, r24
	int lenAfter = Helpers::base64_decode((uint8_t*)&sdAfter, output, len);
    2b6a:	a7 01       	movw	r20, r14
    2b6c:	b8 01       	movw	r22, r16
    2b6e:	ce 01       	movw	r24, r28
    2b70:	8b 59       	subi	r24, 0x9B	; 155
    2b72:	9f 4f       	sbci	r25, 0xFF	; 255
    2b74:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7Helpers13base64_decodeEPhPci>
    2b78:	8c 01       	movw	r16, r24
	RM_LOG2("Decoded result received over Web has size of ", lenAfter);
    2b7a:	6b ef       	ldi	r22, 0xFB	; 251
    2b7c:	71 e0       	ldi	r23, 0x01	; 1
    2b7e:	81 e8       	ldi	r24, 0x81	; 129
    2b80:	94 e0       	ldi	r25, 0x04	; 4
    2b82:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    2b86:	66 e4       	ldi	r22, 0x46	; 70
    2b88:	71 e0       	ldi	r23, 0x01	; 1
    2b8a:	81 e8       	ldi	r24, 0x81	; 129
    2b8c:	94 e0       	ldi	r25, 0x04	; 4
    2b8e:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    2b92:	4a e0       	ldi	r20, 0x0A	; 10
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	b8 01       	movw	r22, r16
    2b98:	81 e8       	ldi	r24, 0x81	; 129
    2b9a:	94 e0       	ldi	r25, 0x04	; 4
    2b9c:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print7printlnEii>
	Helpers::printSensorData(&sdAfter);
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	8b 59       	subi	r24, 0x9B	; 155
    2ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	if (sizeof(SensorData) != lenAfter) RM_LOGLN(F("*** DEC LEN FAIL @1 ***"));
    2baa:	0a 30       	cpi	r16, 0x0A	; 10
    2bac:	11 05       	cpc	r17, r1
    2bae:	31 f0       	breq	.+12     	; 0x2bbc <_Z22encodeSingleSensorTestv+0x1c2>
    2bb0:	60 ea       	ldi	r22, 0xA0	; 160
    2bb2:	76 e0       	ldi	r23, 0x06	; 6
    2bb4:	81 e8       	ldi	r24, 0x81	; 129
    2bb6:	94 e0       	ldi	r25, 0x04	; 4
    2bb8:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sizeof(SensorData) != expDecodingLen) RM_LOGLN(F("*** DEC LEN FAIL @2 ***"));
    2bbc:	8a e0       	ldi	r24, 0x0A	; 10
    2bbe:	c8 16       	cp	r12, r24
    2bc0:	d1 04       	cpc	r13, r1
    2bc2:	31 f0       	breq	.+12     	; 0x2bd0 <_Z22encodeSingleSensorTestv+0x1d6>
    2bc4:	68 e8       	ldi	r22, 0x88	; 136
    2bc6:	76 e0       	ldi	r23, 0x06	; 6
    2bc8:	81 e8       	ldi	r24, 0x81	; 129
    2bca:	94 e0       	ldi	r25, 0x04	; 4
    2bcc:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (sdAfter.battVoltage != sd.battVoltage) RM_LOGLN(F("*** CMP TEST FAIL @1 ***"));
    2bd0:	a8 96       	adiw	r28, 0x28	; 40
    2bd2:	2e ad       	ldd	r18, Y+62	; 0x3e
    2bd4:	3f ad       	ldd	r19, Y+63	; 0x3f
    2bd6:	a8 97       	sbiw	r28, 0x28	; 40
    2bd8:	e2 96       	adiw	r28, 0x32	; 50
    2bda:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bde:	e2 97       	sbiw	r28, 0x32	; 50
    2be0:	28 17       	cp	r18, r24
    2be2:	39 07       	cpc	r19, r25
    2be4:	31 f0       	breq	.+12     	; 0x2bf2 <_Z22encodeSingleSensorTestv+0x1f8>
    2be6:	6f e6       	ldi	r22, 0x6F	; 111
    2be8:	76 e0       	ldi	r23, 0x06	; 6
    2bea:	81 e8       	ldi	r24, 0x81	; 129
    2bec:	94 e0       	ldi	r25, 0x04	; 4
    2bee:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.current != sd.current) RM_LOGLN(F("*** CMP TEST FAIL @2 ***"));
    2bf2:	aa 96       	adiw	r28, 0x2a	; 42
    2bf4:	2e ad       	ldd	r18, Y+62	; 0x3e
    2bf6:	3f ad       	ldd	r19, Y+63	; 0x3f
    2bf8:	aa 97       	sbiw	r28, 0x2a	; 42
    2bfa:	e4 96       	adiw	r28, 0x34	; 52
    2bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c00:	e4 97       	sbiw	r28, 0x34	; 52
    2c02:	28 17       	cp	r18, r24
    2c04:	39 07       	cpc	r19, r25
    2c06:	31 f0       	breq	.+12     	; 0x2c14 <_Z22encodeSingleSensorTestv+0x21a>
    2c08:	66 e5       	ldi	r22, 0x56	; 86
    2c0a:	76 e0       	ldi	r23, 0x06	; 6
    2c0c:	81 e8       	ldi	r24, 0x81	; 129
    2c0e:	94 e0       	ldi	r25, 0x04	; 4
    2c10:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.errorChar != sd.errorChar) RM_LOGLN(F("*** CMP TEST FAIL @3 ***"));
    2c14:	af 96       	adiw	r28, 0x2f	; 47
    2c16:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c18:	af 97       	sbiw	r28, 0x2f	; 47
    2c1a:	e9 96       	adiw	r28, 0x39	; 57
    2c1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c1e:	e9 97       	sbiw	r28, 0x39	; 57
    2c20:	98 17       	cp	r25, r24
    2c22:	31 f0       	breq	.+12     	; 0x2c30 <_Z22encodeSingleSensorTestv+0x236>
    2c24:	6d e3       	ldi	r22, 0x3D	; 61
    2c26:	76 e0       	ldi	r23, 0x06	; 6
    2c28:	81 e8       	ldi	r24, 0x81	; 129
    2c2a:	94 e0       	ldi	r25, 0x04	; 4
    2c2c:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.pVVoltage != sd.pVVoltage) RM_LOGLN(F("*** CMP TEST FAIL @4 ***"));
    2c30:	ac 96       	adiw	r28, 0x2c	; 44
    2c32:	2e ad       	ldd	r18, Y+62	; 0x3e
    2c34:	3f ad       	ldd	r19, Y+63	; 0x3f
    2c36:	ac 97       	sbiw	r28, 0x2c	; 44
    2c38:	e6 96       	adiw	r28, 0x36	; 54
    2c3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c3e:	e6 97       	sbiw	r28, 0x36	; 54
    2c40:	28 17       	cp	r18, r24
    2c42:	39 07       	cpc	r19, r25
    2c44:	31 f0       	breq	.+12     	; 0x2c52 <_Z22encodeSingleSensorTestv+0x258>
    2c46:	64 e2       	ldi	r22, 0x24	; 36
    2c48:	76 e0       	ldi	r23, 0x06	; 6
    2c4a:	81 e8       	ldi	r24, 0x81	; 129
    2c4c:	94 e0       	ldi	r25, 0x04	; 4
    2c4e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.temperature != sd.temperature) RM_LOGLN(F("*** CMP TEST FAIL @5 ***"));
    2c52:	ae 96       	adiw	r28, 0x2e	; 46
    2c54:	2e ad       	ldd	r18, Y+62	; 0x3e
    2c56:	3f ad       	ldd	r19, Y+63	; 0x3f
    2c58:	ae 97       	sbiw	r28, 0x2e	; 46
    2c5a:	e8 96       	adiw	r28, 0x38	; 56
    2c5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c60:	e8 97       	sbiw	r28, 0x38	; 56
    2c62:	28 17       	cp	r18, r24
    2c64:	39 07       	cpc	r19, r25
    2c66:	31 f0       	breq	.+12     	; 0x2c74 <_Z22encodeSingleSensorTestv+0x27a>
    2c68:	6b e0       	ldi	r22, 0x0B	; 11
    2c6a:	76 e0       	ldi	r23, 0x06	; 6
    2c6c:	81 e8       	ldi	r24, 0x81	; 129
    2c6e:	94 e0       	ldi	r25, 0x04	; 4
    2c70:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.dataType != sd.dataType) RM_LOGLN(F("*** CMP TEST FAIL @6 ***"));
    2c74:	a6 96       	adiw	r28, 0x26	; 38
    2c76:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c78:	a6 97       	sbiw	r28, 0x26	; 38
    2c7a:	e0 96       	adiw	r28, 0x30	; 48
    2c7c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c7e:	e0 97       	sbiw	r28, 0x30	; 48
    2c80:	98 17       	cp	r25, r24
    2c82:	31 f0       	breq	.+12     	; 0x2c90 <_Z22encodeSingleSensorTestv+0x296>
    2c84:	62 ef       	ldi	r22, 0xF2	; 242
    2c86:	75 e0       	ldi	r23, 0x05	; 5
    2c88:	81 e8       	ldi	r24, 0x81	; 129
    2c8a:	94 e0       	ldi	r25, 0x04	; 4
    2c8c:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    2c90:	c8 58       	subi	r28, 0x88	; 136
    2c92:	df 4f       	sbci	r29, 0xFF	; 255
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	08 95       	ret

00002cb0 <_Z11writeMockSDP10SensorDatah>:

void writeMockSD(SensorData* iSd, uint8_t i){
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	86 2f       	mov	r24, r22
	iSd->battVoltage = (i+1);
    2cb4:	26 2f       	mov	r18, r22
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	a9 01       	movw	r20, r18
    2cba:	4f 5f       	subi	r20, 0xFF	; 255
    2cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbe:	52 83       	std	Z+2, r21	; 0x02
    2cc0:	41 83       	std	Z+1, r20	; 0x01
	iSd->current = (i+1)*10;
    2cc2:	9a e0       	ldi	r25, 0x0A	; 10
    2cc4:	94 9f       	mul	r25, r20
    2cc6:	b0 01       	movw	r22, r0
    2cc8:	95 9f       	mul	r25, r21
    2cca:	70 0d       	add	r23, r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	74 83       	std	Z+4, r23	; 0x04
    2cd0:	63 83       	std	Z+3, r22	; 0x03
	iSd->pVVoltage = (i+1)*100;
    2cd2:	94 e6       	ldi	r25, 0x64	; 100
    2cd4:	94 9f       	mul	r25, r20
    2cd6:	b0 01       	movw	r22, r0
    2cd8:	95 9f       	mul	r25, r21
    2cda:	70 0d       	add	r23, r0
    2cdc:	11 24       	eor	r1, r1
    2cde:	76 83       	std	Z+6, r23	; 0x06
    2ce0:	65 83       	std	Z+5, r22	; 0x05
	iSd->temperature = (i+1)+50;
    2ce2:	2d 5c       	subi	r18, 0xCD	; 205
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	30 87       	std	Z+8, r19	; 0x08
    2ce8:	27 83       	std	Z+7, r18	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2cea:	65 e0       	ldi	r22, 0x05	; 5
    2cec:	0e 94 15 21 	call	0x422a	; 0x422a <__udivmodqi4>
    2cf0:	99 23       	and	r25, r25
    2cf2:	11 f0       	breq	.+4      	; 0x2cf8 <_Z11writeMockSDP10SensorDatah+0x48>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <_Z11writeMockSDP10SensorDatah+0x4a>
    2cf8:	83 e0       	ldi	r24, 0x03	; 3
    2cfa:	81 87       	std	Z+9, r24	; 0x09
    2cfc:	08 95       	ret

00002cfe <_Z21encodeBulkSignalsTestPch>:
}

void encodeBulkSignalsTest(char* forWeb, uint8_t COUNT) {
    2cfe:	8f 92       	push	r8
    2d00:	9f 92       	push	r9
    2d02:	af 92       	push	r10
    2d04:	bf 92       	push	r11
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	2d 97       	sbiw	r28, 0x0d	; 13
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	5c 01       	movw	r10, r24
    2d28:	06 2f       	mov	r16, r22
	gsm.setBootNumber( 1026);
	gsm.setRSSI( rssi);
	gsm.setSensorData(&bulkSd[0], COUNT);
	
	gsm.createEncodedPayload(forWeb);
}
    2d2a:	cd b6       	in	r12, 0x3d	; 61
    2d2c:	de b6       	in	r13, 0x3e	; 62
	iSd->errorChar = i%5==0?3:0;
}

void encodeBulkSignalsTest(char* forWeb, uint8_t COUNT) {
	
	SensorData bulkSd[COUNT];
    2d2e:	2d b7       	in	r18, 0x3d	; 61
    2d30:	3e b7       	in	r19, 0x3e	; 62
    2d32:	8a e0       	ldi	r24, 0x0A	; 10
    2d34:	68 9f       	mul	r22, r24
    2d36:	20 19       	sub	r18, r0
    2d38:	31 09       	sbc	r19, r1
    2d3a:	11 24       	eor	r1, r1
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	3e bf       	out	0x3e, r19	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	2d bf       	out	0x3d, r18	; 61
    2d46:	2f 5f       	subi	r18, 0xFF	; 255
    2d48:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4a:	79 01       	movw	r14, r18
    2d4c:	86 2f       	mov	r24, r22
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2d52:	21 e0       	ldi	r18, 0x01	; 1
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	60 f0       	brcs	.+24     	; 0x2d70 <_Z21encodeBulkSignalsTestPch+0x72>
    2d58:	20 83       	st	Z, r18
    2d5a:	12 82       	std	Z+2, r1	; 0x02
    2d5c:	11 82       	std	Z+1, r1	; 0x01
    2d5e:	14 82       	std	Z+4, r1	; 0x04
    2d60:	13 82       	std	Z+3, r1	; 0x03
    2d62:	16 82       	std	Z+6, r1	; 0x06
    2d64:	15 82       	std	Z+5, r1	; 0x05
    2d66:	10 86       	std	Z+8, r1	; 0x08
    2d68:	17 82       	std	Z+7, r1	; 0x07
    2d6a:	11 86       	std	Z+9, r1	; 0x09
    2d6c:	3a 96       	adiw	r30, 0x0a	; 10
    2d6e:	f2 cf       	rjmp	.-28     	; 0x2d54 <_Z21encodeBulkSignalsTestPch+0x56>
    2d70:	47 01       	movw	r8, r14
    2d72:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<COUNT;i++){
    2d74:	10 17       	cp	r17, r16
    2d76:	49 f0       	breq	.+18     	; 0x2d8a <_Z21encodeBulkSignalsTestPch+0x8c>
		
		SensorData* iSd = &bulkSd[i];
		writeMockSD(iSd, i);
    2d78:	61 2f       	mov	r22, r17
    2d7a:	c4 01       	movw	r24, r8
    2d7c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_Z11writeMockSDP10SensorDatah>
}

void encodeBulkSignalsTest(char* forWeb, uint8_t COUNT) {
	
	SensorData bulkSd[COUNT];
	for(uint8_t i=0;i<COUNT;i++){
    2d80:	1f 5f       	subi	r17, 0xFF	; 255
    2d82:	8a e0       	ldi	r24, 0x0A	; 10
    2d84:	88 0e       	add	r8, r24
    2d86:	91 1c       	adc	r9, r1
    2d88:	f5 cf       	rjmp	.-22     	; 0x2d74 <_Z21encodeBulkSignalsTestPch+0x76>
	FONA_GET_RSSI rssi;
	rssi.rssi = 15;
	rssi.ber = 3;
	rssi.netReg = (FONA_GET_NETREG)(FONA_GET_NETREG::NETSTAT_4 | FONA_GET_NETREG::RESULT_CODE_1);
	
	GsmPayload gsm;
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN10GsmPayloadC1Ev>
	gsm.setModuleId(33);
    2d92:	61 e2       	ldi	r22, 0x21	; 33
    2d94:	ce 01       	movw	r24, r28
    2d96:	01 96       	adiw	r24, 0x01	; 1
    2d98:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN10GsmPayload11setModuleIdEh>
	gsm.setBootNumber( 1026);
    2d9c:	62 e0       	ldi	r22, 0x02	; 2
    2d9e:	74 e0       	ldi	r23, 0x04	; 4
    2da0:	ce 01       	movw	r24, r28
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZN10GsmPayload13setBootNumberEj>
	gsm.setRSSI( rssi);
    2da8:	4f e0       	ldi	r20, 0x0F	; 15
    2daa:	53 e0       	ldi	r21, 0x03	; 3
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	71 e1       	ldi	r23, 0x11	; 17
    2db0:	ce 01       	movw	r24, r28
    2db2:	01 96       	adiw	r24, 0x01	; 1
    2db4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	gsm.setSensorData(&bulkSd[0], COUNT);
    2db8:	41 2f       	mov	r20, r17
    2dba:	b7 01       	movw	r22, r14
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	0e 94 cd 0a 	call	0x159a	; 0x159a <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	
	gsm.createEncodedPayload(forWeb);
    2dc4:	b5 01       	movw	r22, r10
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN10GsmPayload20createEncodedPayloadEPc>
}
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de be       	out	0x3e, r13	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd be       	out	0x3d, r12	; 61
    2dd8:	2d 96       	adiw	r28, 0x0d	; 13
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ff 90       	pop	r15
    2dee:	ef 90       	pop	r14
    2df0:	df 90       	pop	r13
    2df2:	cf 90       	pop	r12
    2df4:	bf 90       	pop	r11
    2df6:	af 90       	pop	r10
    2df8:	9f 90       	pop	r9
    2dfa:	8f 90       	pop	r8
    2dfc:	08 95       	ret

00002dfe <_ZN13ExtendedTests20runExtendedTypesTestEv>:
#endif


void ExtendedTests::runExtendedTypesTest() {
    2dfe:	af 92       	push	r10
    2e00:	bf 92       	push	r11
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ef 92       	push	r14
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	6b 97       	sbiw	r28, 0x1b	; 27
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended Types Test Complete~~~~~~~~~~~~~~~~"));
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2e22:	cd b6       	in	r12, 0x3d	; 61
    2e24:	de b6       	in	r13, 0x3e	; 62
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    2e26:	18 8e       	std	Y+24, r1	; 0x18
    2e28:	19 8e       	std	Y+25, r1	; 0x19
    2e2a:	1a 8e       	std	Y+26, r1	; 0x1a
							(FONA_GET_NETREG::NETSTAT_5 |
							FONA_GET_NETREG::RESULT_CODE_1 |
							FONA_GET_NETREG::IS_ERROR);
	
	FONA_GET_RSSI result;
	result.netReg = regVal;
    2e2c:	85 e3       	ldi	r24, 0x35	; 53
    2e2e:	8b 8f       	std	Y+27, r24	; 0x1b
					 
	RM_LOG(F("Netstat 5 + ResultCode 1 + Error 1="));
    2e30:	6e ec       	ldi	r22, 0xCE	; 206
    2e32:	75 e0       	ldi	r23, 0x05	; 5
    2e34:	81 e8       	ldi	r24, 0x81	; 129
    2e36:	94 e0       	ldi	r25, 0x04	; 4
    2e38:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(result.netReg, BIN);
    2e3c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	42 e0       	ldi	r20, 0x02	; 2
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	81 e8       	ldi	r24, 0x81	; 129
    2e46:	94 e0       	ldi	r25, 0x04	; 4
    2e48:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print7printlnEii>

	uint8_t memStoredVal = result.netReg;
    2e4c:	1b 8d       	ldd	r17, Y+27	; 0x1b
	FONA_GET_NETREG back = (FONA_GET_NETREG)memStoredVal;
	RM_LOG(F("Cast back after int storage val:"));
    2e4e:	6d ea       	ldi	r22, 0xAD	; 173
    2e50:	75 e0       	ldi	r23, 0x05	; 5
    2e52:	81 e8       	ldi	r24, 0x81	; 129
    2e54:	94 e0       	ldi	r25, 0x04	; 4
    2e56:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(back, BIN);
    2e5a:	61 2f       	mov	r22, r17
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	42 e0       	ldi	r20, 0x02	; 2
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	81 e8       	ldi	r24, 0x81	; 129
    2e64:	94 e0       	ldi	r25, 0x04	; 4
    2e66:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print7printlnEii>
    2e6a:	81 2f       	mov	r24, r17
    2e6c:	8c 71       	andi	r24, 0x1C	; 28
	
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_0) RM_LOGLN(F("*** NETREG FAIL @1 ***"));
    2e6e:	19 f4       	brne	.+6      	; 0x2e76 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x78>
    2e70:	66 e9       	ldi	r22, 0x96	; 150
    2e72:	75 e0       	ldi	r23, 0x05	; 5
    2e74:	13 c0       	rjmp	.+38     	; 0x2e9c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x9e>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_1) RM_LOGLN(F("*** NETREG FAIL @2 ***"));
    2e76:	84 30       	cpi	r24, 0x04	; 4
    2e78:	19 f4       	brne	.+6      	; 0x2e80 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x82>
    2e7a:	6f e7       	ldi	r22, 0x7F	; 127
    2e7c:	75 e0       	ldi	r23, 0x05	; 5
    2e7e:	0e c0       	rjmp	.+28     	; 0x2e9c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x9e>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_2) RM_LOGLN(F("*** NETREG FAIL @3 ***"));
    2e80:	88 30       	cpi	r24, 0x08	; 8
    2e82:	19 f4       	brne	.+6      	; 0x2e8a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x8c>
    2e84:	68 e6       	ldi	r22, 0x68	; 104
    2e86:	75 e0       	ldi	r23, 0x05	; 5
    2e88:	09 c0       	rjmp	.+18     	; 0x2e9c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x9e>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_3) RM_LOGLN(F("*** NETREG FAIL @4 ***"));
    2e8a:	8c 30       	cpi	r24, 0x0C	; 12
    2e8c:	19 f4       	brne	.+6      	; 0x2e94 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x96>
    2e8e:	61 e5       	ldi	r22, 0x51	; 81
    2e90:	75 e0       	ldi	r23, 0x05	; 5
    2e92:	04 c0       	rjmp	.+8      	; 0x2e9c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x9e>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_4) RM_LOGLN(F("*** NETREG FAIL @5 ***"));
    2e94:	80 31       	cpi	r24, 0x10	; 16
    2e96:	39 f4       	brne	.+14     	; 0x2ea6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xa8>
    2e98:	6a e3       	ldi	r22, 0x3A	; 58
    2e9a:	75 e0       	ldi	r23, 0x05	; 5
    2e9c:	81 e8       	ldi	r24, 0x81	; 129
    2e9e:	94 e0       	ldi	r25, 0x04	; 4
    2ea0:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <_ZN13ExtendedTests20runExtendedTypesTestEv+0xac>
	if (NETREG_ONLY_NETSTAT(back) != FONA_GET_NETREG::NETSTAT_5) RM_LOGLN(F("*** NETREG FAIL @6 ***"));
    2ea6:	84 31       	cpi	r24, 0x14	; 20
    2ea8:	31 f0       	breq	.+12     	; 0x2eb6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xb8>
    2eaa:	63 e2       	ldi	r22, 0x23	; 35
    2eac:	75 e0       	ldi	r23, 0x05	; 5
    2eae:	81 e8       	ldi	r24, 0x81	; 129
    2eb0:	94 e0       	ldi	r25, 0x04	; 4
    2eb2:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
    2eb6:	01 2f       	mov	r16, r17
    2eb8:	03 70       	andi	r16, 0x03	; 3
	
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_0) RM_LOGLN(F("*** NETREG FAIL @7 ***"));
    2eba:	39 f4       	brne	.+14     	; 0x2eca <_ZN13ExtendedTests20runExtendedTypesTestEv+0xcc>
    2ebc:	6c e0       	ldi	r22, 0x0C	; 12
    2ebe:	75 e0       	ldi	r23, 0x05	; 5
    2ec0:	81 e8       	ldi	r24, 0x81	; 129
    2ec2:	94 e0       	ldi	r25, 0x04	; 4
    2ec4:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd0>
	if (NETREG_ONLY_RESULT_CODE(back) != FONA_GET_NETREG::RESULT_CODE_1) RM_LOGLN(F("*** NETREG FAIL @8 ***"));
    2eca:	01 30       	cpi	r16, 0x01	; 1
    2ecc:	71 f0       	breq	.+28     	; 0x2eea <_ZN13ExtendedTests20runExtendedTypesTestEv+0xec>
    2ece:	65 ef       	ldi	r22, 0xF5	; 245
    2ed0:	74 e0       	ldi	r23, 0x04	; 4
    2ed2:	81 e8       	ldi	r24, 0x81	; 129
    2ed4:	94 e0       	ldi	r25, 0x04	; 4
    2ed6:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_2) RM_LOGLN(F("*** NETREG FAIL @9 ***"));
    2eda:	02 30       	cpi	r16, 0x02	; 2
    2edc:	31 f4       	brne	.+12     	; 0x2eea <_ZN13ExtendedTests20runExtendedTypesTestEv+0xec>
    2ede:	6e ed       	ldi	r22, 0xDE	; 222
    2ee0:	74 e0       	ldi	r23, 0x04	; 4
    2ee2:	81 e8       	ldi	r24, 0x81	; 129
    2ee4:	94 e0       	ldi	r25, 0x04	; 4
    2ee6:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (NETREG_ONLY_ERROR(back) != FONA_GET_NETREG::IS_ERROR) RM_LOGLN(F("*** NETREG FAIL @10 ***"));
    2eea:	15 fd       	sbrc	r17, 5
    2eec:	06 c0       	rjmp	.+12     	; 0x2efa <_ZN13ExtendedTests20runExtendedTypesTestEv+0xfc>
    2eee:	66 ec       	ldi	r22, 0xC6	; 198
    2ef0:	74 e0       	ldi	r23, 0x04	; 4
    2ef2:	81 e8       	ldi	r24, 0x81	; 129
    2ef4:	94 e0       	ldi	r25, 0x04	; 4
    2ef6:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Print test
	RM_LOG(F("Test For Print Output:"));
    2efa:	6f ea       	ldi	r22, 0xAF	; 175
    2efc:	74 e0       	ldi	r23, 0x04	; 4
    2efe:	81 e8       	ldi	r24, 0x81	; 129
    2f00:	94 e0       	ldi	r25, 0x04	; 4
    2f02:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
	Helpers::printRSSI(&result);
    2f06:	ce 01       	movw	r24, r28
    2f08:	48 96       	adiw	r24, 0x18	; 24
    2f0a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	
	/******* ENCODING TESTS *********/
	
	//	** 1) Ensure this is avoided with lib:- **
	//		char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2f0e:	10 e0       	ldi	r17, 0x00	; 0
	
		encodeIntTest(i);
    2f10:	81 2f       	mov	r24, r17
    2f12:	0e 94 b8 13 	call	0x2770	; 0x2770 <_Z13encodeIntTesth>
		if (i==255)
    2f16:	1f 3f       	cpi	r17, 0xFF	; 255
    2f18:	11 f0       	breq	.+4      	; 0x2f1e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x120>
	
	/******* ENCODING TESTS *********/
	
	//	** 1) Ensure this is avoided with lib:- **
	//		char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2f1a:	1f 5f       	subi	r17, 0xFF	; 255
    2f1c:	f9 cf       	rjmp	.-14     	; 0x2f10 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x112>
			break; //max for unsigned byte
	}

	//	** 2) Check encoding/decoding for strings with their null terminating char \0 **
	//		Verify encoding/decoding %3 behaviour works
	encodeStrTest("h", "aA==");
    2f1e:	69 e2       	ldi	r22, 0x29	; 41
    2f20:	72 e0       	ldi	r23, 0x02	; 2
    2f22:	8e e2       	ldi	r24, 0x2E	; 46
    2f24:	92 e0       	ldi	r25, 0x02	; 2
    2f26:	0e 94 04 14 	call	0x2808	; 0x2808 <_Z13encodeStrTestPcS_>
	encodeStrTest("he", "aGU=");
    2f2a:	60 e3       	ldi	r22, 0x30	; 48
    2f2c:	72 e0       	ldi	r23, 0x02	; 2
    2f2e:	85 e3       	ldi	r24, 0x35	; 53
    2f30:	92 e0       	ldi	r25, 0x02	; 2
    2f32:	0e 94 04 14 	call	0x2808	; 0x2808 <_Z13encodeStrTestPcS_>
	encodeStrTest("hel", "aGVs");
    2f36:	68 e3       	ldi	r22, 0x38	; 56
    2f38:	72 e0       	ldi	r23, 0x02	; 2
    2f3a:	8d e3       	ldi	r24, 0x3D	; 61
    2f3c:	92 e0       	ldi	r25, 0x02	; 2
    2f3e:	0e 94 04 14 	call	0x2808	; 0x2808 <_Z13encodeStrTestPcS_>
	encodeStrTest("hell", "aGVsbA==");
    2f42:	61 e4       	ldi	r22, 0x41	; 65
    2f44:	72 e0       	ldi	r23, 0x02	; 2
    2f46:	8a e4       	ldi	r24, 0x4A	; 74
    2f48:	92 e0       	ldi	r25, 0x02	; 2
    2f4a:	0e 94 04 14 	call	0x2808	; 0x2808 <_Z13encodeStrTestPcS_>
	encodeStrTest("hello", "aGVsbG8=");
    2f4e:	6f e4       	ldi	r22, 0x4F	; 79
    2f50:	72 e0       	ldi	r23, 0x02	; 2
    2f52:	88 e5       	ldi	r24, 0x58	; 88
    2f54:	92 e0       	ldi	r25, 0x02	; 2
    2f56:	0e 94 04 14 	call	0x2808	; 0x2808 <_Z13encodeStrTestPcS_>
	
	
	//	** 3) Single sensor-data round-trip numbers test **
	encodeSingleSensorTest();
    2f5a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_Z22encodeSingleSensorTestv>

	//TODO: MAX READINGS A CONSTANT?
	
	//Encoding
	int COUNT=15;
	uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(COUNT);
    2f5e:	8f e0       	ldi	r24, 0x0F	; 15
    2f60:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    2f64:	5c 01       	movw	r10, r24
	char forWeb[encodedSz];
    2f66:	8d b7       	in	r24, 0x3d	; 61
    2f68:	9e b7       	in	r25, 0x3e	; 62
    2f6a:	8a 19       	sub	r24, r10
    2f6c:	9b 09       	sbc	r25, r11
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	9e bf       	out	0x3e, r25	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	8d bf       	out	0x3d, r24	; 61
    2f78:	0d b7       	in	r16, 0x3d	; 61
    2f7a:	1e b7       	in	r17, 0x3e	; 62
    2f7c:	0f 5f       	subi	r16, 0xFF	; 255
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
	encodeBulkSignalsTest(forWeb, COUNT);
    2f80:	6f e0       	ldi	r22, 0x0F	; 15
    2f82:	c8 01       	movw	r24, r16
    2f84:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_Z21encodeBulkSignalsTestPch>
	
	RM_LOGLN(F("GSM Payload To Be Sent Over Web:"));
    2f88:	6e e8       	ldi	r22, 0x8E	; 142
    2f8a:	74 e0       	ldi	r23, 0x04	; 4
    2f8c:	81 e8       	ldi	r24, 0x81	; 129
    2f8e:	94 e0       	ldi	r25, 0x04	; 4
    2f90:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(forWeb);
    2f94:	b8 01       	movw	r22, r16
    2f96:	81 e8       	ldi	r24, 0x81	; 129
    2f98:	94 e0       	ldi	r25, 0x04	; 4
    2f9a:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print7printlnEPKc>
	//		Helpers::printByteArray((uint8_t*)(&forWeb[0]), 20);
	
	//Decoding
	uint8_t numReadings = GsmPayload::readNumSReadings(forWeb, encodedSz);
    2f9e:	b5 01       	movw	r22, r10
    2fa0:	c8 01       	movw	r24, r16
    2fa2:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN10GsmPayload16readNumSReadingsEPcj>
    2fa6:	e8 2e       	mov	r14, r24
	if (numReadings != COUNT) RM_LOGLN(F("*** READ NUM FAIL ***"));
    2fa8:	9f e0       	ldi	r25, 0x0F	; 15
    2faa:	89 17       	cp	r24, r25
    2fac:	31 f0       	breq	.+12     	; 0x2fba <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1bc>
    2fae:	68 e7       	ldi	r22, 0x78	; 120
    2fb0:	74 e0       	ldi	r23, 0x04	; 4
    2fb2:	81 e8       	ldi	r24, 0x81	; 129
    2fb4:	94 e0       	ldi	r25, 0x04	; 4
    2fb6:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>

	//Now parse it
	GsmPayload receivedPayload;
    2fba:	ce 01       	movw	r24, r28
    2fbc:	01 96       	adiw	r24, 0x01	; 1
    2fbe:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN10GsmPayloadC1Ev>
	SensorData receivedSensorData[numReadings];
    2fc2:	ed b7       	in	r30, 0x3d	; 61
    2fc4:	fe b7       	in	r31, 0x3e	; 62
    2fc6:	2a e0       	ldi	r18, 0x0A	; 10
    2fc8:	e2 9e       	mul	r14, r18
    2fca:	e0 19       	sub	r30, r0
    2fcc:	f1 09       	sbc	r31, r1
    2fce:	11 24       	eor	r1, r1
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	fe bf       	out	0x3e, r31	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	ed bf       	out	0x3d, r30	; 61
    2fda:	2d b7       	in	r18, 0x3d	; 61
    2fdc:	3e b7       	in	r19, 0x3e	; 62
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	8e 2d       	mov	r24, r14
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	60 f0       	brcs	.+24     	; 0x3006 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x208>
    2fee:	40 83       	st	Z, r20
    2ff0:	12 82       	std	Z+2, r1	; 0x02
    2ff2:	11 82       	std	Z+1, r1	; 0x01
    2ff4:	14 82       	std	Z+4, r1	; 0x04
    2ff6:	13 82       	std	Z+3, r1	; 0x03
    2ff8:	16 82       	std	Z+6, r1	; 0x06
    2ffa:	15 82       	std	Z+5, r1	; 0x05
    2ffc:	10 86       	std	Z+8, r1	; 0x08
    2ffe:	17 82       	std	Z+7, r1	; 0x07
    3000:	11 86       	std	Z+9, r1	; 0x09
    3002:	3a 96       	adiw	r30, 0x0a	; 10
    3004:	f2 cf       	rjmp	.-28     	; 0x2fea <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1ec>
	receivedPayload.readEncodedPayload(forWeb, encodedSz, (SensorData*)&receivedSensorData);
    3006:	a5 01       	movw	r20, r10
    3008:	b8 01       	movw	r22, r16
    300a:	ce 01       	movw	r24, r28
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN10GsmPayload18readEncodedPayloadEPcjP10SensorData>
	
	RM_LOGLN(F("First Parsed Reading:"));
    3012:	62 e6       	ldi	r22, 0x62	; 98
    3014:	74 e0       	ldi	r23, 0x04	; 4
    3016:	81 e8       	ldi	r24, 0x81	; 129
    3018:	94 e0       	ldi	r25, 0x04	; 4
    301a:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	SensorData* readOne = receivedPayload.getSensorData();
    301e:	ce 01       	movw	r24, r28
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN10GsmPayload13getSensorDataEv>
    3026:	b8 2e       	mov	r11, r24
    3028:	f9 2e       	mov	r15, r25
	Helpers::printSensorData(readOne); //print the first
    302a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN7Helpers15printSensorDataEP10SensorData>
    302e:	0b 2d       	mov	r16, r11
    3030:	1f 2d       	mov	r17, r15
	
	for(uint8_t i=0;i<numReadings;i++){
    3032:	f1 2c       	mov	r15, r1
		
		SensorData expectedVal;
    3034:	bb 24       	eor	r11, r11
    3036:	b3 94       	inc	r11
	
	RM_LOGLN(F("First Parsed Reading:"));
	SensorData* readOne = receivedPayload.getSensorData();
	Helpers::printSensorData(readOne); //print the first
	
	for(uint8_t i=0;i<numReadings;i++){
    3038:	fe 14       	cp	r15, r14
    303a:	09 f4       	brne	.+2      	; 0x303e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x240>
    303c:	af c0       	rjmp	.+350    	; 0x319c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x39e>
		
		SensorData expectedVal;
    303e:	be 86       	std	Y+14, r11	; 0x0e
    3040:	18 8a       	std	Y+16, r1	; 0x10
    3042:	1f 86       	std	Y+15, r1	; 0x0f
    3044:	1a 8a       	std	Y+18, r1	; 0x12
    3046:	19 8a       	std	Y+17, r1	; 0x11
    3048:	1c 8a       	std	Y+20, r1	; 0x14
    304a:	1b 8a       	std	Y+19, r1	; 0x13
    304c:	1e 8a       	std	Y+22, r1	; 0x16
    304e:	1d 8a       	std	Y+21, r1	; 0x15
    3050:	1f 8a       	std	Y+23, r1	; 0x17
		SensorData* expectedValPtr=&expectedVal;
		writeMockSD(expectedValPtr, i);
    3052:	6f 2d       	mov	r22, r15
    3054:	ce 01       	movw	r24, r28
    3056:	0e 96       	adiw	r24, 0x0e	; 14
    3058:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_Z11writeMockSDP10SensorDatah>
		
		SensorData* parsed = readOne + i;
		
		if (expectedValPtr->battVoltage != parsed->battVoltage) {RM_LOG2(F("*** BATT FAIL ***"), i);}
    305c:	2f 85       	ldd	r18, Y+15	; 0x0f
    305e:	38 89       	ldd	r19, Y+16	; 0x10
    3060:	f8 01       	movw	r30, r16
    3062:	81 81       	ldd	r24, Z+1	; 0x01
    3064:	92 81       	ldd	r25, Z+2	; 0x02
    3066:	28 17       	cp	r18, r24
    3068:	39 07       	cpc	r19, r25
    306a:	99 f0       	breq	.+38     	; 0x3092 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x294>
    306c:	60 e5       	ldi	r22, 0x50	; 80
    306e:	74 e0       	ldi	r23, 0x04	; 4
    3070:	81 e8       	ldi	r24, 0x81	; 129
    3072:	94 e0       	ldi	r25, 0x04	; 4
    3074:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    3078:	66 e4       	ldi	r22, 0x46	; 70
    307a:	71 e0       	ldi	r23, 0x01	; 1
    307c:	81 e8       	ldi	r24, 0x81	; 129
    307e:	94 e0       	ldi	r25, 0x04	; 4
    3080:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    3084:	4a e0       	ldi	r20, 0x0A	; 10
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	6f 2d       	mov	r22, r15
    308a:	81 e8       	ldi	r24, 0x81	; 129
    308c:	94 e0       	ldi	r25, 0x04	; 4
    308e:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
		if (expectedValPtr->current != parsed->current) {RM_LOG2(F("*** CURR FAIL ***"), i);}
    3092:	29 89       	ldd	r18, Y+17	; 0x11
    3094:	3a 89       	ldd	r19, Y+18	; 0x12
    3096:	f8 01       	movw	r30, r16
    3098:	83 81       	ldd	r24, Z+3	; 0x03
    309a:	94 81       	ldd	r25, Z+4	; 0x04
    309c:	28 17       	cp	r18, r24
    309e:	39 07       	cpc	r19, r25
    30a0:	99 f0       	breq	.+38     	; 0x30c8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2ca>
    30a2:	6e e3       	ldi	r22, 0x3E	; 62
    30a4:	74 e0       	ldi	r23, 0x04	; 4
    30a6:	81 e8       	ldi	r24, 0x81	; 129
    30a8:	94 e0       	ldi	r25, 0x04	; 4
    30aa:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    30ae:	66 e4       	ldi	r22, 0x46	; 70
    30b0:	71 e0       	ldi	r23, 0x01	; 1
    30b2:	81 e8       	ldi	r24, 0x81	; 129
    30b4:	94 e0       	ldi	r25, 0x04	; 4
    30b6:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    30ba:	4a e0       	ldi	r20, 0x0A	; 10
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	6f 2d       	mov	r22, r15
    30c0:	81 e8       	ldi	r24, 0x81	; 129
    30c2:	94 e0       	ldi	r25, 0x04	; 4
    30c4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
		if (expectedValPtr->dataType != parsed->dataType) {RM_LOG2(F("*** DT FAIL ***"), i);}
    30c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ca:	f8 01       	movw	r30, r16
    30cc:	80 81       	ld	r24, Z
    30ce:	98 17       	cp	r25, r24
    30d0:	99 f0       	breq	.+38     	; 0x30f8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2fa>
    30d2:	6e e2       	ldi	r22, 0x2E	; 46
    30d4:	74 e0       	ldi	r23, 0x04	; 4
    30d6:	81 e8       	ldi	r24, 0x81	; 129
    30d8:	94 e0       	ldi	r25, 0x04	; 4
    30da:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    30de:	66 e4       	ldi	r22, 0x46	; 70
    30e0:	71 e0       	ldi	r23, 0x01	; 1
    30e2:	81 e8       	ldi	r24, 0x81	; 129
    30e4:	94 e0       	ldi	r25, 0x04	; 4
    30e6:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    30ea:	4a e0       	ldi	r20, 0x0A	; 10
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	6f 2d       	mov	r22, r15
    30f0:	81 e8       	ldi	r24, 0x81	; 129
    30f2:	94 e0       	ldi	r25, 0x04	; 4
    30f4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
		if (expectedValPtr->errorChar != parsed->errorChar) {RM_LOG2(F("*** ERR FAIL ***"), i);}
    30f8:	9f 89       	ldd	r25, Y+23	; 0x17
    30fa:	f8 01       	movw	r30, r16
    30fc:	81 85       	ldd	r24, Z+9	; 0x09
    30fe:	98 17       	cp	r25, r24
    3100:	99 f0       	breq	.+38     	; 0x3128 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x32a>
    3102:	6d e1       	ldi	r22, 0x1D	; 29
    3104:	74 e0       	ldi	r23, 0x04	; 4
    3106:	81 e8       	ldi	r24, 0x81	; 129
    3108:	94 e0       	ldi	r25, 0x04	; 4
    310a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    310e:	66 e4       	ldi	r22, 0x46	; 70
    3110:	71 e0       	ldi	r23, 0x01	; 1
    3112:	81 e8       	ldi	r24, 0x81	; 129
    3114:	94 e0       	ldi	r25, 0x04	; 4
    3116:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    311a:	4a e0       	ldi	r20, 0x0A	; 10
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	6f 2d       	mov	r22, r15
    3120:	81 e8       	ldi	r24, 0x81	; 129
    3122:	94 e0       	ldi	r25, 0x04	; 4
    3124:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
		if (expectedValPtr->pVVoltage != parsed->pVVoltage) {RM_LOG2(F("*** PV FAIL ***"), i);}
    3128:	2b 89       	ldd	r18, Y+19	; 0x13
    312a:	3c 89       	ldd	r19, Y+20	; 0x14
    312c:	f8 01       	movw	r30, r16
    312e:	85 81       	ldd	r24, Z+5	; 0x05
    3130:	96 81       	ldd	r25, Z+6	; 0x06
    3132:	28 17       	cp	r18, r24
    3134:	39 07       	cpc	r19, r25
    3136:	99 f0       	breq	.+38     	; 0x315e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x360>
    3138:	6d e0       	ldi	r22, 0x0D	; 13
    313a:	74 e0       	ldi	r23, 0x04	; 4
    313c:	81 e8       	ldi	r24, 0x81	; 129
    313e:	94 e0       	ldi	r25, 0x04	; 4
    3140:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    3144:	66 e4       	ldi	r22, 0x46	; 70
    3146:	71 e0       	ldi	r23, 0x01	; 1
    3148:	81 e8       	ldi	r24, 0x81	; 129
    314a:	94 e0       	ldi	r25, 0x04	; 4
    314c:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    3150:	4a e0       	ldi	r20, 0x0A	; 10
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	6f 2d       	mov	r22, r15
    3156:	81 e8       	ldi	r24, 0x81	; 129
    3158:	94 e0       	ldi	r25, 0x04	; 4
    315a:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
		if (expectedValPtr->temperature != parsed->temperature) {RM_LOG2(F("*** TEMP FAIL ***"), i);}
    315e:	2d 89       	ldd	r18, Y+21	; 0x15
    3160:	3e 89       	ldd	r19, Y+22	; 0x16
    3162:	f8 01       	movw	r30, r16
    3164:	87 81       	ldd	r24, Z+7	; 0x07
    3166:	90 85       	ldd	r25, Z+8	; 0x08
    3168:	28 17       	cp	r18, r24
    316a:	39 07       	cpc	r19, r25
    316c:	99 f0       	breq	.+38     	; 0x3194 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x396>
    316e:	6b ef       	ldi	r22, 0xFB	; 251
    3170:	73 e0       	ldi	r23, 0x03	; 3
    3172:	81 e8       	ldi	r24, 0x81	; 129
    3174:	94 e0       	ldi	r25, 0x04	; 4
    3176:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    317a:	66 e4       	ldi	r22, 0x46	; 70
    317c:	71 e0       	ldi	r23, 0x01	; 1
    317e:	81 e8       	ldi	r24, 0x81	; 129
    3180:	94 e0       	ldi	r25, 0x04	; 4
    3182:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print5printEPKc>
    3186:	4a e0       	ldi	r20, 0x0A	; 10
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	6f 2d       	mov	r22, r15
    318c:	81 e8       	ldi	r24, 0x81	; 129
    318e:	94 e0       	ldi	r25, 0x04	; 4
    3190:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN5Print7printlnEhi>
	
	RM_LOGLN(F("First Parsed Reading:"));
	SensorData* readOne = receivedPayload.getSensorData();
	Helpers::printSensorData(readOne); //print the first
	
	for(uint8_t i=0;i<numReadings;i++){
    3194:	f3 94       	inc	r15
    3196:	06 5f       	subi	r16, 0xF6	; 246
    3198:	1f 4f       	sbci	r17, 0xFF	; 255
    319a:	4e cf       	rjmp	.-356    	; 0x3038 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x23a>
		if (expectedValPtr->temperature != parsed->temperature) {RM_LOG2(F("*** TEMP FAIL ***"), i);}
	}
	
	/*************************/
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended Types Test Complete~~~~~~~~~~~~~~~~"));
    319c:	6e eb       	ldi	r22, 0xBE	; 190
    319e:	73 e0       	ldi	r23, 0x03	; 3
    31a0:	81 e8       	ldi	r24, 0x81	; 129
    31a2:	94 e0       	ldi	r25, 0x04	; 4
    31a4:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de be       	out	0x3e, r13	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd be       	out	0x3d, r12	; 61
    31b2:	6b 96       	adiw	r28, 0x1b	; 27
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	df 91       	pop	r29
    31c0:	cf 91       	pop	r28
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	ef 90       	pop	r14
    31ca:	df 90       	pop	r13
    31cc:	cf 90       	pop	r12
    31ce:	bf 90       	pop	r11
    31d0:	af 90       	pop	r10
    31d2:	08 95       	ret

000031d4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    31d4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    31d6:	91 8d       	ldd	r25, Z+25	; 0x19
    31d8:	22 8d       	ldd	r18, Z+26	; 0x1a
    31da:	89 2f       	mov	r24, r25
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	80 5c       	subi	r24, 0xC0	; 192
    31e0:	9f 4f       	sbci	r25, 0xFF	; 255
    31e2:	82 1b       	sub	r24, r18
    31e4:	91 09       	sbc	r25, r1
}
    31e6:	8f 73       	andi	r24, 0x3F	; 63
    31e8:	99 27       	eor	r25, r25
    31ea:	08 95       	ret

000031ec <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    31ec:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    31ee:	91 8d       	ldd	r25, Z+25	; 0x19
    31f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f2:	98 17       	cp	r25, r24
    31f4:	31 f0       	breq	.+12     	; 0x3202 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    31f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f8:	e8 0f       	add	r30, r24
    31fa:	f1 1d       	adc	r31, r1
    31fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3202:	8f ef       	ldi	r24, 0xFF	; 255
    3204:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3206:	08 95       	ret

00003208 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3208:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    320a:	91 8d       	ldd	r25, Z+25	; 0x19
    320c:	82 8d       	ldd	r24, Z+26	; 0x1a
    320e:	98 17       	cp	r25, r24
    3210:	61 f0       	breq	.+24     	; 0x322a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3212:	82 8d       	ldd	r24, Z+26	; 0x1a
    3214:	df 01       	movw	r26, r30
    3216:	a8 0f       	add	r26, r24
    3218:	b1 1d       	adc	r27, r1
    321a:	5d 96       	adiw	r26, 0x1d	; 29
    321c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    321e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3220:	9f 5f       	subi	r25, 0xFF	; 255
    3222:	9f 73       	andi	r25, 0x3F	; 63
    3224:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    322a:	8f ef       	ldi	r24, 0xFF	; 255
    322c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    322e:	08 95       	ret

00003230 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3230:	8d e6       	ldi	r24, 0x6D	; 109
    3232:	9a e1       	ldi	r25, 0x1A	; 26
    3234:	89 2b       	or	r24, r25
    3236:	49 f0       	breq	.+18     	; 0x324a <_Z14serialEventRunv+0x1a>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	89 2b       	or	r24, r25
    323e:	29 f0       	breq	.+10     	; 0x324a <_Z14serialEventRunv+0x1a>
    3240:	0e 94 6d 1a 	call	0x34da	; 0x34da <_Z17Serial0_availablev>
    3244:	81 11       	cpse	r24, r1
    3246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    324a:	08 95       	ret

0000324c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    324c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    324e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3250:	df 01       	movw	r26, r30
    3252:	a8 0f       	add	r26, r24
    3254:	b1 1d       	adc	r27, r1
    3256:	a3 5a       	subi	r26, 0xA3	; 163
    3258:	bf 4f       	sbci	r27, 0xFF	; 255
    325a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    325c:	84 8d       	ldd	r24, Z+28	; 0x1c
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	8f 73       	andi	r24, 0x3F	; 63
    3264:	99 27       	eor	r25, r25
    3266:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3268:	a6 89       	ldd	r26, Z+22	; 0x16
    326a:	b7 89       	ldd	r27, Z+23	; 0x17
    326c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    326e:	a0 89       	ldd	r26, Z+16	; 0x10
    3270:	b1 89       	ldd	r27, Z+17	; 0x11
    3272:	8c 91       	ld	r24, X
    3274:	80 64       	ori	r24, 0x40	; 64
    3276:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3278:	93 8d       	ldd	r25, Z+27	; 0x1b
    327a:	84 8d       	ldd	r24, Z+28	; 0x1c
    327c:	98 13       	cpse	r25, r24
    327e:	06 c0       	rjmp	.+12     	; 0x328c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3280:	02 88       	ldd	r0, Z+18	; 0x12
    3282:	f3 89       	ldd	r31, Z+19	; 0x13
    3284:	e0 2d       	mov	r30, r0
    3286:	80 81       	ld	r24, Z
    3288:	8f 7d       	andi	r24, 0xDF	; 223
    328a:	80 83       	st	Z, r24
    328c:	08 95       	ret

0000328e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    328e:	ef 92       	push	r14
    3290:	ff 92       	push	r15
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	ec 01       	movw	r28, r24
  _written = true;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    32a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32a4:	98 13       	cpse	r25, r24
    32a6:	05 c0       	rjmp	.+10     	; 0x32b2 <_ZN14HardwareSerial5writeEh+0x24>
    32a8:	e8 89       	ldd	r30, Y+16	; 0x10
    32aa:	f9 89       	ldd	r31, Y+17	; 0x11
    32ac:	80 81       	ld	r24, Z
    32ae:	85 fd       	sbrc	r24, 5
    32b0:	24 c0       	rjmp	.+72     	; 0x32fa <_ZN14HardwareSerial5writeEh+0x6c>
    32b2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    32b4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    32b6:	10 e0       	ldi	r17, 0x00	; 0
    32b8:	0f 5f       	subi	r16, 0xFF	; 255
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	0f 73       	andi	r16, 0x3F	; 63
    32be:	11 27       	eor	r17, r17
    32c0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    32c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32c4:	e8 12       	cpse	r14, r24
    32c6:	0c c0       	rjmp	.+24     	; 0x32e0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	07 fc       	sbrc	r0, 7
    32cc:	fa cf       	rjmp	.-12     	; 0x32c2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    32ce:	e8 89       	ldd	r30, Y+16	; 0x10
    32d0:	f9 89       	ldd	r31, Y+17	; 0x11
    32d2:	80 81       	ld	r24, Z
    32d4:	85 ff       	sbrs	r24, 5
    32d6:	f5 cf       	rjmp	.-22     	; 0x32c2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    32d8:	ce 01       	movw	r24, r28
    32da:	0e 94 26 19 	call	0x324c	; 0x324c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32de:	f1 cf       	rjmp	.-30     	; 0x32c2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    32e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e2:	fe 01       	movw	r30, r28
    32e4:	e8 0f       	add	r30, r24
    32e6:	f1 1d       	adc	r31, r1
    32e8:	e3 5a       	subi	r30, 0xA3	; 163
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    32ee:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    32f0:	ea 89       	ldd	r30, Y+18	; 0x12
    32f2:	fb 89       	ldd	r31, Y+19	; 0x13
    32f4:	80 81       	ld	r24, Z
    32f6:	80 62       	ori	r24, 0x20	; 32
    32f8:	07 c0       	rjmp	.+14     	; 0x3308 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    32fa:	ee 89       	ldd	r30, Y+22	; 0x16
    32fc:	ff 89       	ldd	r31, Y+23	; 0x17
    32fe:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3300:	e8 89       	ldd	r30, Y+16	; 0x10
    3302:	f9 89       	ldd	r31, Y+17	; 0x11
    3304:	80 81       	ld	r24, Z
    3306:	80 64       	ori	r24, 0x40	; 64
    3308:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	08 95       	ret

0000331c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3322:	88 8d       	ldd	r24, Y+24	; 0x18
    3324:	88 23       	and	r24, r24
    3326:	c9 f0       	breq	.+50     	; 0x335a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3328:	ea 89       	ldd	r30, Y+18	; 0x12
    332a:	fb 89       	ldd	r31, Y+19	; 0x13
    332c:	80 81       	ld	r24, Z
    332e:	85 fd       	sbrc	r24, 5
    3330:	05 c0       	rjmp	.+10     	; 0x333c <_ZN14HardwareSerial5flushEv+0x20>
    3332:	a8 89       	ldd	r26, Y+16	; 0x10
    3334:	b9 89       	ldd	r27, Y+17	; 0x11
    3336:	8c 91       	ld	r24, X
    3338:	86 fd       	sbrc	r24, 6
    333a:	0f c0       	rjmp	.+30     	; 0x335a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	07 fc       	sbrc	r0, 7
    3340:	f5 cf       	rjmp	.-22     	; 0x332c <_ZN14HardwareSerial5flushEv+0x10>
    3342:	80 81       	ld	r24, Z
    3344:	85 ff       	sbrs	r24, 5
    3346:	f2 cf       	rjmp	.-28     	; 0x332c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3348:	a8 89       	ldd	r26, Y+16	; 0x10
    334a:	b9 89       	ldd	r27, Y+17	; 0x11
    334c:	8c 91       	ld	r24, X
    334e:	85 ff       	sbrs	r24, 5
    3350:	ed cf       	rjmp	.-38     	; 0x332c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3352:	ce 01       	movw	r24, r28
    3354:	0e 94 26 19 	call	0x324c	; 0x324c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3358:	e7 cf       	rjmp	.-50     	; 0x3328 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	ec 01       	movw	r28, r24
    3370:	6a 01       	movw	r12, r20
    3372:	7b 01       	movw	r14, r22
    3374:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3376:	e8 89       	ldd	r30, Y+16	; 0x10
    3378:	f9 89       	ldd	r31, Y+17	; 0x11
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    337e:	41 15       	cp	r20, r1
    3380:	51 4e       	sbci	r21, 0xE1	; 225
    3382:	61 05       	cpc	r22, r1
    3384:	71 05       	cpc	r23, r1
    3386:	b1 f0       	breq	.+44     	; 0x33b4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	79 e0       	ldi	r23, 0x09	; 9
    338c:	8d e3       	ldi	r24, 0x3D	; 61
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	a7 01       	movw	r20, r14
    3392:	96 01       	movw	r18, r12
    3394:	0e 94 49 21 	call	0x4292	; 0x4292 <__udivmodsi4>
    3398:	da 01       	movw	r26, r20
    339a:	c9 01       	movw	r24, r18
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	a1 09       	sbc	r26, r1
    33a0:	b1 09       	sbc	r27, r1
    33a2:	b6 95       	lsr	r27
    33a4:	a7 95       	ror	r26
    33a6:	97 95       	ror	r25
    33a8:	87 95       	ror	r24
    33aa:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    33ac:	21 15       	cp	r18, r1
    33ae:	80 e1       	ldi	r24, 0x10	; 16
    33b0:	38 07       	cpc	r19, r24
    33b2:	a8 f0       	brcs	.+42     	; 0x33de <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    33b4:	e8 89       	ldd	r30, Y+16	; 0x10
    33b6:	f9 89       	ldd	r31, Y+17	; 0x11
    33b8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    33ba:	60 e8       	ldi	r22, 0x80	; 128
    33bc:	74 e8       	ldi	r23, 0x84	; 132
    33be:	8e e1       	ldi	r24, 0x1E	; 30
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	a7 01       	movw	r20, r14
    33c4:	96 01       	movw	r18, r12
    33c6:	0e 94 49 21 	call	0x4292	; 0x4292 <__udivmodsi4>
    33ca:	da 01       	movw	r26, r20
    33cc:	c9 01       	movw	r24, r18
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	a1 09       	sbc	r26, r1
    33d2:	b1 09       	sbc	r27, r1
    33d4:	b6 95       	lsr	r27
    33d6:	a7 95       	ror	r26
    33d8:	97 95       	ror	r25
    33da:	87 95       	ror	r24
    33dc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    33de:	ec 85       	ldd	r30, Y+12	; 0x0c
    33e0:	fd 85       	ldd	r31, Y+13	; 0x0d
    33e2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    33e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    33e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    33e8:	20 83       	st	Z, r18

  _written = false;
    33ea:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    33ec:	ec 89       	ldd	r30, Y+20	; 0x14
    33ee:	fd 89       	ldd	r31, Y+21	; 0x15
    33f0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    33f2:	ea 89       	ldd	r30, Y+18	; 0x12
    33f4:	fb 89       	ldd	r31, Y+19	; 0x13
    33f6:	80 81       	ld	r24, Z
    33f8:	80 61       	ori	r24, 0x10	; 16
    33fa:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    33fc:	ea 89       	ldd	r30, Y+18	; 0x12
    33fe:	fb 89       	ldd	r31, Y+19	; 0x13
    3400:	80 81       	ld	r24, Z
    3402:	88 60       	ori	r24, 0x08	; 8
    3404:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3406:	ea 89       	ldd	r30, Y+18	; 0x12
    3408:	fb 89       	ldd	r31, Y+19	; 0x13
    340a:	80 81       	ld	r24, Z
    340c:	80 68       	ori	r24, 0x80	; 128
    340e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3410:	ea 89       	ldd	r30, Y+18	; 0x12
    3412:	fb 89       	ldd	r31, Y+19	; 0x13
    3414:	80 81       	ld	r24, Z
    3416:	8f 7d       	andi	r24, 0xDF	; 223
    3418:	80 83       	st	Z, r24
}
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	1f 91       	pop	r17
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	df 90       	pop	r13
    3426:	cf 90       	pop	r12
    3428:	08 95       	ret

0000342a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    342a:	1f 92       	push	r1
    342c:	0f 92       	push	r0
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	0f 92       	push	r0
    3432:	11 24       	eor	r1, r1
    3434:	2f 93       	push	r18
    3436:	8f 93       	push	r24
    3438:	9f 93       	push	r25
    343a:	ef 93       	push	r30
    343c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    343e:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <Serial+0x10>
    3442:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <Serial+0x11>
    3446:	80 81       	ld	r24, Z
    3448:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <Serial+0x16>
    344c:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <Serial+0x17>
    3450:	82 fd       	sbrc	r24, 2
    3452:	12 c0       	rjmp	.+36     	; 0x3478 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3454:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3456:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Serial+0x19>
    345a:	8f 5f       	subi	r24, 0xFF	; 255
    345c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    345e:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <Serial+0x1a>
    3462:	82 17       	cp	r24, r18
    3464:	51 f0       	breq	.+20     	; 0x347a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3466:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <Serial+0x19>
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	ef 57       	subi	r30, 0x7F	; 127
    346e:	fb 4f       	sbci	r31, 0xFB	; 251
    3470:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3472:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Serial+0x19>
    3476:	01 c0       	rjmp	.+2      	; 0x347a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3478:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    347a:	ff 91       	pop	r31
    347c:	ef 91       	pop	r30
    347e:	9f 91       	pop	r25
    3480:	8f 91       	pop	r24
    3482:	2f 91       	pop	r18
    3484:	0f 90       	pop	r0
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	0f 90       	pop	r0
    348a:	1f 90       	pop	r1
    348c:	18 95       	reti

0000348e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    348e:	1f 92       	push	r1
    3490:	0f 92       	push	r0
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	0f 92       	push	r0
    3496:	11 24       	eor	r1, r1
    3498:	2f 93       	push	r18
    349a:	3f 93       	push	r19
    349c:	4f 93       	push	r20
    349e:	5f 93       	push	r21
    34a0:	6f 93       	push	r22
    34a2:	7f 93       	push	r23
    34a4:	8f 93       	push	r24
    34a6:	9f 93       	push	r25
    34a8:	af 93       	push	r26
    34aa:	bf 93       	push	r27
    34ac:	ef 93       	push	r30
    34ae:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    34b0:	81 e8       	ldi	r24, 0x81	; 129
    34b2:	94 e0       	ldi	r25, 0x04	; 4
    34b4:	0e 94 26 19 	call	0x324c	; 0x324c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    34b8:	ff 91       	pop	r31
    34ba:	ef 91       	pop	r30
    34bc:	bf 91       	pop	r27
    34be:	af 91       	pop	r26
    34c0:	9f 91       	pop	r25
    34c2:	8f 91       	pop	r24
    34c4:	7f 91       	pop	r23
    34c6:	6f 91       	pop	r22
    34c8:	5f 91       	pop	r21
    34ca:	4f 91       	pop	r20
    34cc:	3f 91       	pop	r19
    34ce:	2f 91       	pop	r18
    34d0:	0f 90       	pop	r0
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	0f 90       	pop	r0
    34d6:	1f 90       	pop	r1
    34d8:	18 95       	reti

000034da <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    34da:	81 e8       	ldi	r24, 0x81	; 129
    34dc:	94 e0       	ldi	r25, 0x04	; 4
    34de:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <_ZN14HardwareSerial9availableEv>
    34e2:	21 e0       	ldi	r18, 0x01	; 1
    34e4:	89 2b       	or	r24, r25
    34e6:	09 f4       	brne	.+2      	; 0x34ea <_Z17Serial0_availablev+0x10>
    34e8:	20 e0       	ldi	r18, 0x00	; 0
}
    34ea:	82 2f       	mov	r24, r18
    34ec:	08 95       	ret

000034ee <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    34ee:	e1 e8       	ldi	r30, 0x81	; 129
    34f0:	f4 e0       	ldi	r31, 0x04	; 4
    34f2:	13 82       	std	Z+3, r1	; 0x03
    34f4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    34f6:	88 ee       	ldi	r24, 0xE8	; 232
    34f8:	93 e0       	ldi	r25, 0x03	; 3
    34fa:	a0 e0       	ldi	r26, 0x00	; 0
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	84 83       	std	Z+4, r24	; 0x04
    3500:	95 83       	std	Z+5, r25	; 0x05
    3502:	a6 83       	std	Z+6, r26	; 0x06
    3504:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3506:	82 e6       	ldi	r24, 0x62	; 98
    3508:	92 e0       	ldi	r25, 0x02	; 2
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	80 83       	st	Z, r24
    350e:	85 ec       	ldi	r24, 0xC5	; 197
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	95 87       	std	Z+13, r25	; 0x0d
    3514:	84 87       	std	Z+12, r24	; 0x0c
    3516:	84 ec       	ldi	r24, 0xC4	; 196
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	97 87       	std	Z+15, r25	; 0x0f
    351c:	86 87       	std	Z+14, r24	; 0x0e
    351e:	80 ec       	ldi	r24, 0xC0	; 192
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	91 8b       	std	Z+17, r25	; 0x11
    3524:	80 8b       	std	Z+16, r24	; 0x10
    3526:	81 ec       	ldi	r24, 0xC1	; 193
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	93 8b       	std	Z+19, r25	; 0x13
    352c:	82 8b       	std	Z+18, r24	; 0x12
    352e:	82 ec       	ldi	r24, 0xC2	; 194
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	95 8b       	std	Z+21, r25	; 0x15
    3534:	84 8b       	std	Z+20, r24	; 0x14
    3536:	86 ec       	ldi	r24, 0xC6	; 198
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	97 8b       	std	Z+23, r25	; 0x17
    353c:	86 8b       	std	Z+22, r24	; 0x16
    353e:	11 8e       	std	Z+25, r1	; 0x19
    3540:	12 8e       	std	Z+26, r1	; 0x1a
    3542:	13 8e       	std	Z+27, r1	; 0x1b
    3544:	14 8e       	std	Z+28, r1	; 0x1c
    3546:	08 95       	ret

00003548 <initVariant>:
    3548:	08 95       	ret

0000354a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    354a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <init>

	initVariant();
    354e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3552:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3556:	c8 e1       	ldi	r28, 0x18	; 24
    3558:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    355a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <loop>
		if (serialEventRun) serialEventRun();
    355e:	20 97       	sbiw	r28, 0x00	; 0
    3560:	e1 f3       	breq	.-8      	; 0x355a <main+0x10>
    3562:	0e 94 18 19 	call	0x3230	; 0x3230 <_Z14serialEventRunv>
    3566:	f9 cf       	rjmp	.-14     	; 0x355a <main+0x10>

00003568 <_Znwj>:
    3568:	0c 94 90 21 	jmp	0x4320	; 0x4320 <malloc>

0000356c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    356c:	cf 92       	push	r12
    356e:	df 92       	push	r13
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	6c 01       	movw	r12, r24
    357e:	7a 01       	movw	r14, r20
    3580:	8b 01       	movw	r16, r22
    3582:	c0 e0       	ldi	r28, 0x00	; 0
    3584:	d0 e0       	ldi	r29, 0x00	; 0
    3586:	ce 15       	cp	r28, r14
    3588:	df 05       	cpc	r29, r15
    358a:	81 f0       	breq	.+32     	; 0x35ac <_ZN5Print5writeEPKhj+0x40>
    358c:	d8 01       	movw	r26, r16
    358e:	6d 91       	ld	r22, X+
    3590:	8d 01       	movw	r16, r26
    3592:	d6 01       	movw	r26, r12
    3594:	ed 91       	ld	r30, X+
    3596:	fc 91       	ld	r31, X
    3598:	01 90       	ld	r0, Z+
    359a:	f0 81       	ld	r31, Z
    359c:	e0 2d       	mov	r30, r0
    359e:	c6 01       	movw	r24, r12
    35a0:	09 95       	icall
    35a2:	89 2b       	or	r24, r25
    35a4:	11 f0       	breq	.+4      	; 0x35aa <_ZN5Print5writeEPKhj+0x3e>
    35a6:	21 96       	adiw	r28, 0x01	; 1
    35a8:	ee cf       	rjmp	.-36     	; 0x3586 <_ZN5Print5writeEPKhj+0x1a>
    35aa:	7e 01       	movw	r14, r28
    35ac:	c7 01       	movw	r24, r14
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	df 90       	pop	r13
    35bc:	cf 90       	pop	r12
    35be:	08 95       	ret

000035c0 <_ZN5Print5writeEPKc>:
    35c0:	61 15       	cp	r22, r1
    35c2:	71 05       	cpc	r23, r1
    35c4:	79 f0       	breq	.+30     	; 0x35e4 <_ZN5Print5writeEPKc+0x24>
    35c6:	fb 01       	movw	r30, r22
    35c8:	01 90       	ld	r0, Z+
    35ca:	00 20       	and	r0, r0
    35cc:	e9 f7       	brne	.-6      	; 0x35c8 <_ZN5Print5writeEPKc+0x8>
    35ce:	31 97       	sbiw	r30, 0x01	; 1
    35d0:	af 01       	movw	r20, r30
    35d2:	46 1b       	sub	r20, r22
    35d4:	57 0b       	sbc	r21, r23
    35d6:	dc 01       	movw	r26, r24
    35d8:	ed 91       	ld	r30, X+
    35da:	fc 91       	ld	r31, X
    35dc:	02 80       	ldd	r0, Z+2	; 0x02
    35de:	f3 81       	ldd	r31, Z+3	; 0x03
    35e0:	e0 2d       	mov	r30, r0
    35e2:	09 94       	ijmp
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	08 95       	ret

000035ea <_ZN5Print5printEPK19__FlashStringHelper>:
    35ea:	ef 92       	push	r14
    35ec:	ff 92       	push	r15
    35ee:	0f 93       	push	r16
    35f0:	1f 93       	push	r17
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	8c 01       	movw	r16, r24
    35f8:	7b 01       	movw	r14, r22
    35fa:	c0 e0       	ldi	r28, 0x00	; 0
    35fc:	d0 e0       	ldi	r29, 0x00	; 0
    35fe:	f7 01       	movw	r30, r14
    3600:	ec 0f       	add	r30, r28
    3602:	fd 1f       	adc	r31, r29
    3604:	64 91       	lpm	r22, Z
    3606:	66 23       	and	r22, r22
    3608:	61 f0       	breq	.+24     	; 0x3622 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    360a:	d8 01       	movw	r26, r16
    360c:	ed 91       	ld	r30, X+
    360e:	fc 91       	ld	r31, X
    3610:	01 90       	ld	r0, Z+
    3612:	f0 81       	ld	r31, Z
    3614:	e0 2d       	mov	r30, r0
    3616:	c8 01       	movw	r24, r16
    3618:	09 95       	icall
    361a:	89 2b       	or	r24, r25
    361c:	11 f0       	breq	.+4      	; 0x3622 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    361e:	21 96       	adiw	r28, 0x01	; 1
    3620:	ee cf       	rjmp	.-36     	; 0x35fe <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3622:	ce 01       	movw	r24, r28
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	08 95       	ret

00003632 <_ZN5Print5printEPKc>:
    3632:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <_ZN5Print5writeEPKc>

00003636 <_ZN5Print5printEc>:
    3636:	dc 01       	movw	r26, r24
    3638:	ed 91       	ld	r30, X+
    363a:	fc 91       	ld	r31, X
    363c:	01 90       	ld	r0, Z+
    363e:	f0 81       	ld	r31, Z
    3640:	e0 2d       	mov	r30, r0
    3642:	09 94       	ijmp

00003644 <_ZN5Print7printlnEv>:
    3644:	6e e6       	ldi	r22, 0x6E	; 110
    3646:	72 e0       	ldi	r23, 0x02	; 2
    3648:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <_ZN5Print5writeEPKc>

0000364c <_ZN5Print7printlnEPK19__FlashStringHelper>:
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
    3650:	cf 93       	push	r28
    3652:	df 93       	push	r29
    3654:	ec 01       	movw	r28, r24
    3656:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print5printEPK19__FlashStringHelper>
    365a:	8c 01       	movw	r16, r24
    365c:	ce 01       	movw	r24, r28
    365e:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN5Print7printlnEv>
    3662:	80 0f       	add	r24, r16
    3664:	91 1f       	adc	r25, r17
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	08 95       	ret

00003670 <_ZN5Print7printlnEPKc>:
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
    3678:	ec 01       	movw	r28, r24
    367a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5writeEPKc>
    367e:	8c 01       	movw	r16, r24
    3680:	ce 01       	movw	r24, r28
    3682:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN5Print7printlnEv>
    3686:	80 0f       	add	r24, r16
    3688:	91 1f       	adc	r25, r17
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	08 95       	ret

00003694 <_ZN5Print7printlnEc>:
    3694:	0f 93       	push	r16
    3696:	1f 93       	push	r17
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	ec 01       	movw	r28, r24
    369e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print5printEc>
    36a2:	8c 01       	movw	r16, r24
    36a4:	ce 01       	movw	r24, r28
    36a6:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN5Print7printlnEv>
    36aa:	80 0f       	add	r24, r16
    36ac:	91 1f       	adc	r25, r17
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	08 95       	ret

000036b8 <_ZN5Print11printNumberEmh>:
    36b8:	8f 92       	push	r8
    36ba:	9f 92       	push	r9
    36bc:	af 92       	push	r10
    36be:	bf 92       	push	r11
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	a1 97       	sbiw	r28, 0x21	; 33
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	7c 01       	movw	r14, r24
    36de:	fa 01       	movw	r30, r20
    36e0:	cb 01       	movw	r24, r22
    36e2:	19 a2       	std	Y+33, r1	; 0x21
    36e4:	22 30       	cpi	r18, 0x02	; 2
    36e6:	08 f4       	brcc	.+2      	; 0x36ea <_ZN5Print11printNumberEmh+0x32>
    36e8:	2a e0       	ldi	r18, 0x0A	; 10
    36ea:	8e 01       	movw	r16, r28
    36ec:	0f 5d       	subi	r16, 0xDF	; 223
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
    36f0:	82 2e       	mov	r8, r18
    36f2:	91 2c       	mov	r9, r1
    36f4:	a1 2c       	mov	r10, r1
    36f6:	b1 2c       	mov	r11, r1
    36f8:	bf 01       	movw	r22, r30
    36fa:	a5 01       	movw	r20, r10
    36fc:	94 01       	movw	r18, r8
    36fe:	0e 94 49 21 	call	0x4292	; 0x4292 <__udivmodsi4>
    3702:	f9 01       	movw	r30, r18
    3704:	ca 01       	movw	r24, r20
    3706:	01 50       	subi	r16, 0x01	; 1
    3708:	11 09       	sbc	r17, r1
    370a:	6a 30       	cpi	r22, 0x0A	; 10
    370c:	10 f4       	brcc	.+4      	; 0x3712 <_ZN5Print11printNumberEmh+0x5a>
    370e:	60 5d       	subi	r22, 0xD0	; 208
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <_ZN5Print11printNumberEmh+0x5c>
    3712:	69 5c       	subi	r22, 0xC9	; 201
    3714:	d8 01       	movw	r26, r16
    3716:	6c 93       	st	X, r22
    3718:	23 2b       	or	r18, r19
    371a:	24 2b       	or	r18, r20
    371c:	25 2b       	or	r18, r21
    371e:	61 f7       	brne	.-40     	; 0x36f8 <_ZN5Print11printNumberEmh+0x40>
    3720:	b8 01       	movw	r22, r16
    3722:	c7 01       	movw	r24, r14
    3724:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5writeEPKc>
    3728:	a1 96       	adiw	r28, 0x21	; 33
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	1f 91       	pop	r17
    373a:	0f 91       	pop	r16
    373c:	ff 90       	pop	r15
    373e:	ef 90       	pop	r14
    3740:	bf 90       	pop	r11
    3742:	af 90       	pop	r10
    3744:	9f 90       	pop	r9
    3746:	8f 90       	pop	r8
    3748:	08 95       	ret

0000374a <_ZN5Print5printEmi>:
    374a:	21 15       	cp	r18, r1
    374c:	31 05       	cpc	r19, r1
    374e:	41 f4       	brne	.+16     	; 0x3760 <_ZN5Print5printEmi+0x16>
    3750:	dc 01       	movw	r26, r24
    3752:	ed 91       	ld	r30, X+
    3754:	fc 91       	ld	r31, X
    3756:	01 90       	ld	r0, Z+
    3758:	f0 81       	ld	r31, Z
    375a:	e0 2d       	mov	r30, r0
    375c:	64 2f       	mov	r22, r20
    375e:	09 94       	ijmp
    3760:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <_ZN5Print11printNumberEmh>

00003764 <_ZN5Print5printEhi>:
    3764:	9a 01       	movw	r18, r20
    3766:	46 2f       	mov	r20, r22
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	70 e0       	ldi	r23, 0x00	; 0
    376e:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <_ZN5Print5printEmi>

00003772 <_ZN5Print7printlnEhi>:
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	ec 01       	movw	r28, r24
    377c:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN5Print5printEhi>
    3780:	8c 01       	movw	r16, r24
    3782:	ce 01       	movw	r24, r28
    3784:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN5Print7printlnEv>
    3788:	80 0f       	add	r24, r16
    378a:	91 1f       	adc	r25, r17
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	08 95       	ret

00003796 <_ZN5Print5printEji>:
    3796:	9a 01       	movw	r18, r20
    3798:	ab 01       	movw	r20, r22
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <_ZN5Print5printEmi>

000037a2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    37a2:	cf 92       	push	r12
    37a4:	df 92       	push	r13
    37a6:	ef 92       	push	r14
    37a8:	ff 92       	push	r15
    37aa:	0f 93       	push	r16
    37ac:	1f 93       	push	r17
    37ae:	cf 93       	push	r28
    37b0:	df 93       	push	r29
  if (base == 0) {
    37b2:	21 15       	cp	r18, r1
    37b4:	31 05       	cpc	r19, r1
    37b6:	81 f4       	brne	.+32     	; 0x37d8 <_ZN5Print5printEli+0x36>
    return write(n);
    37b8:	dc 01       	movw	r26, r24
    37ba:	ed 91       	ld	r30, X+
    37bc:	fc 91       	ld	r31, X
    37be:	01 90       	ld	r0, Z+
    37c0:	f0 81       	ld	r31, Z
    37c2:	e0 2d       	mov	r30, r0
    37c4:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	ff 90       	pop	r15
    37d0:	ef 90       	pop	r14
    37d2:	df 90       	pop	r13
    37d4:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    37d6:	09 94       	ijmp
  } else if (base == 10) {
    37d8:	2a 30       	cpi	r18, 0x0A	; 10
    37da:	31 05       	cpc	r19, r1
    37dc:	01 f5       	brne	.+64     	; 0x381e <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    37de:	77 ff       	sbrs	r23, 7
    37e0:	1d c0       	rjmp	.+58     	; 0x381c <_ZN5Print5printEli+0x7a>
    37e2:	6a 01       	movw	r12, r20
    37e4:	7b 01       	movw	r14, r22
    37e6:	ec 01       	movw	r28, r24
      int t = print('-');
    37e8:	6d e2       	ldi	r22, 0x2D	; 45
    37ea:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print5printEc>
    37ee:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    37f0:	44 27       	eor	r20, r20
    37f2:	55 27       	eor	r21, r21
    37f4:	ba 01       	movw	r22, r20
    37f6:	4c 19       	sub	r20, r12
    37f8:	5d 09       	sbc	r21, r13
    37fa:	6e 09       	sbc	r22, r14
    37fc:	7f 09       	sbc	r23, r15
    37fe:	2a e0       	ldi	r18, 0x0A	; 10
    3800:	ce 01       	movw	r24, r28
    3802:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN5Print11printNumberEmh>
    3806:	80 0f       	add	r24, r16
    3808:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	df 90       	pop	r13
    3818:	cf 90       	pop	r12
    381a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    381c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	ff 90       	pop	r15
    3828:	ef 90       	pop	r14
    382a:	df 90       	pop	r13
    382c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    382e:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <_ZN5Print11printNumberEmh>

00003832 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3832:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3834:	ab 01       	movw	r20, r22
    3836:	77 0f       	add	r23, r23
    3838:	66 0b       	sbc	r22, r22
    383a:	77 0b       	sbc	r23, r23
    383c:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <_ZN5Print5printEli>

00003840 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    384a:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN5Print5printEii>
    384e:	8c 01       	movw	r16, r24
  n += println();
    3850:	ce 01       	movw	r24, r28
    3852:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN5Print7printlnEv>
  return n;
}
    3856:	80 0f       	add	r24, r16
    3858:	91 1f       	adc	r25, r17
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	08 95       	ret

00003864 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3864:	1f 92       	push	r1
    3866:	0f 92       	push	r0
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	0f 92       	push	r0
    386c:	11 24       	eor	r1, r1
    386e:	2f 93       	push	r18
    3870:	3f 93       	push	r19
    3872:	8f 93       	push	r24
    3874:	9f 93       	push	r25
    3876:	af 93       	push	r26
    3878:	bf 93       	push	r27
    387a:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <timer0_millis>
    387e:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <timer0_millis+0x1>
    3882:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <timer0_millis+0x2>
    3886:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <timer0_millis+0x3>
    388a:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <timer0_fract>
    388e:	23 e0       	ldi	r18, 0x03	; 3
    3890:	23 0f       	add	r18, r19
    3892:	2d 37       	cpi	r18, 0x7D	; 125
    3894:	20 f4       	brcc	.+8      	; 0x389e <__vector_16+0x3a>
    3896:	01 96       	adiw	r24, 0x01	; 1
    3898:	a1 1d       	adc	r26, r1
    389a:	b1 1d       	adc	r27, r1
    389c:	05 c0       	rjmp	.+10     	; 0x38a8 <__vector_16+0x44>
    389e:	26 e8       	ldi	r18, 0x86	; 134
    38a0:	23 0f       	add	r18, r19
    38a2:	02 96       	adiw	r24, 0x02	; 2
    38a4:	a1 1d       	adc	r26, r1
    38a6:	b1 1d       	adc	r27, r1
    38a8:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <timer0_fract>
    38ac:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <timer0_millis>
    38b0:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <timer0_millis+0x1>
    38b4:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <timer0_millis+0x2>
    38b8:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <timer0_millis+0x3>
    38bc:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <timer0_overflow_count>
    38c0:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <timer0_overflow_count+0x1>
    38c4:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <timer0_overflow_count+0x2>
    38c8:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <timer0_overflow_count+0x3>
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	a1 1d       	adc	r26, r1
    38d0:	b1 1d       	adc	r27, r1
    38d2:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <timer0_overflow_count>
    38d6:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <timer0_overflow_count+0x1>
    38da:	a0 93 25 05 	sts	0x0525, r26	; 0x800525 <timer0_overflow_count+0x2>
    38de:	b0 93 26 05 	sts	0x0526, r27	; 0x800526 <timer0_overflow_count+0x3>
    38e2:	bf 91       	pop	r27
    38e4:	af 91       	pop	r26
    38e6:	9f 91       	pop	r25
    38e8:	8f 91       	pop	r24
    38ea:	3f 91       	pop	r19
    38ec:	2f 91       	pop	r18
    38ee:	0f 90       	pop	r0
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	0f 90       	pop	r0
    38f4:	1f 90       	pop	r1
    38f6:	18 95       	reti

000038f8 <micros>:
    38f8:	3f b7       	in	r19, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <timer0_overflow_count>
    3900:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <timer0_overflow_count+0x1>
    3904:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <timer0_overflow_count+0x2>
    3908:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <timer0_overflow_count+0x3>
    390c:	26 b5       	in	r18, 0x26	; 38
    390e:	a8 9b       	sbis	0x15, 0	; 21
    3910:	05 c0       	rjmp	.+10     	; 0x391c <micros+0x24>
    3912:	2f 3f       	cpi	r18, 0xFF	; 255
    3914:	19 f0       	breq	.+6      	; 0x391c <micros+0x24>
    3916:	01 96       	adiw	r24, 0x01	; 1
    3918:	a1 1d       	adc	r26, r1
    391a:	b1 1d       	adc	r27, r1
    391c:	3f bf       	out	0x3f, r19	; 63
    391e:	ba 2f       	mov	r27, r26
    3920:	a9 2f       	mov	r26, r25
    3922:	98 2f       	mov	r25, r24
    3924:	88 27       	eor	r24, r24
    3926:	82 0f       	add	r24, r18
    3928:	91 1d       	adc	r25, r1
    392a:	a1 1d       	adc	r26, r1
    392c:	b1 1d       	adc	r27, r1
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	42 e0       	ldi	r20, 0x02	; 2
    3934:	66 0f       	add	r22, r22
    3936:	77 1f       	adc	r23, r23
    3938:	88 1f       	adc	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	4a 95       	dec	r20
    393e:	d1 f7       	brne	.-12     	; 0x3934 <micros+0x3c>
    3940:	08 95       	ret

00003942 <delay>:
    3942:	8f 92       	push	r8
    3944:	9f 92       	push	r9
    3946:	af 92       	push	r10
    3948:	bf 92       	push	r11
    394a:	cf 92       	push	r12
    394c:	df 92       	push	r13
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	6b 01       	movw	r12, r22
    3954:	7c 01       	movw	r14, r24
    3956:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <micros>
    395a:	4b 01       	movw	r8, r22
    395c:	5c 01       	movw	r10, r24
    395e:	c1 14       	cp	r12, r1
    3960:	d1 04       	cpc	r13, r1
    3962:	e1 04       	cpc	r14, r1
    3964:	f1 04       	cpc	r15, r1
    3966:	01 f1       	breq	.+64     	; 0x39a8 <delay+0x66>
    3968:	0e 94 14 21 	call	0x4228	; 0x4228 <yield>
    396c:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <micros>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	88 19       	sub	r24, r8
    3976:	99 09       	sbc	r25, r9
    3978:	aa 09       	sbc	r26, r10
    397a:	bb 09       	sbc	r27, r11
    397c:	88 3e       	cpi	r24, 0xE8	; 232
    397e:	93 40       	sbci	r25, 0x03	; 3
    3980:	a1 05       	cpc	r26, r1
    3982:	b1 05       	cpc	r27, r1
    3984:	60 f3       	brcs	.-40     	; 0x395e <delay+0x1c>
    3986:	21 e0       	ldi	r18, 0x01	; 1
    3988:	c2 1a       	sub	r12, r18
    398a:	d1 08       	sbc	r13, r1
    398c:	e1 08       	sbc	r14, r1
    398e:	f1 08       	sbc	r15, r1
    3990:	88 ee       	ldi	r24, 0xE8	; 232
    3992:	88 0e       	add	r8, r24
    3994:	83 e0       	ldi	r24, 0x03	; 3
    3996:	98 1e       	adc	r9, r24
    3998:	a1 1c       	adc	r10, r1
    399a:	b1 1c       	adc	r11, r1
    399c:	c1 14       	cp	r12, r1
    399e:	d1 04       	cpc	r13, r1
    39a0:	e1 04       	cpc	r14, r1
    39a2:	f1 04       	cpc	r15, r1
    39a4:	19 f7       	brne	.-58     	; 0x396c <delay+0x2a>
    39a6:	db cf       	rjmp	.-74     	; 0x395e <delay+0x1c>
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	df 90       	pop	r13
    39ae:	cf 90       	pop	r12
    39b0:	bf 90       	pop	r11
    39b2:	af 90       	pop	r10
    39b4:	9f 90       	pop	r9
    39b6:	8f 90       	pop	r8
    39b8:	08 95       	ret

000039ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    39ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    39bc:	84 b5       	in	r24, 0x24	; 36
    39be:	82 60       	ori	r24, 0x02	; 2
    39c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    39c2:	84 b5       	in	r24, 0x24	; 36
    39c4:	81 60       	ori	r24, 0x01	; 1
    39c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    39c8:	85 b5       	in	r24, 0x25	; 37
    39ca:	82 60       	ori	r24, 0x02	; 2
    39cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    39ce:	85 b5       	in	r24, 0x25	; 37
    39d0:	81 60       	ori	r24, 0x01	; 1
    39d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    39d4:	ee e6       	ldi	r30, 0x6E	; 110
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	81 60       	ori	r24, 0x01	; 1
    39dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    39de:	e1 e8       	ldi	r30, 0x81	; 129
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    39e4:	80 81       	ld	r24, Z
    39e6:	82 60       	ori	r24, 0x02	; 2
    39e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    39ea:	80 81       	ld	r24, Z
    39ec:	81 60       	ori	r24, 0x01	; 1
    39ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    39f0:	e0 e8       	ldi	r30, 0x80	; 128
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	81 60       	ori	r24, 0x01	; 1
    39f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    39fa:	e1 eb       	ldi	r30, 0xB1	; 177
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	84 60       	ori	r24, 0x04	; 4
    3a02:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3a04:	e0 eb       	ldi	r30, 0xB0	; 176
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	81 60       	ori	r24, 0x01	; 1
    3a0c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3a0e:	ea e7       	ldi	r30, 0x7A	; 122
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	84 60       	ori	r24, 0x04	; 4
    3a16:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3a18:	80 81       	ld	r24, Z
    3a1a:	82 60       	ori	r24, 0x02	; 2
    3a1c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3a1e:	80 81       	ld	r24, Z
    3a20:	81 60       	ori	r24, 0x01	; 1
    3a22:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a24:	80 81       	ld	r24, Z
    3a26:	80 68       	ori	r24, 0x80	; 128
    3a28:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a2a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3a2e:	08 95       	ret

00003a30 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3a30:	8e 30       	cpi	r24, 0x0E	; 14
    3a32:	08 f0       	brcs	.+2      	; 0x3a36 <analogRead+0x6>
    3a34:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3a36:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3a3a:	90 e4       	ldi	r25, 0x40	; 64
    3a3c:	29 9f       	mul	r18, r25
    3a3e:	90 01       	movw	r18, r0
    3a40:	11 24       	eor	r1, r1
    3a42:	87 70       	andi	r24, 0x07	; 7
    3a44:	82 2b       	or	r24, r18
    3a46:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3a4a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a4e:	80 64       	ori	r24, 0x40	; 64
    3a50:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3a54:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a58:	86 fd       	sbrc	r24, 6
    3a5a:	fc cf       	rjmp	.-8      	; 0x3a54 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3a5c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3a60:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3a64:	90 e0       	ldi	r25, 0x00	; 0
}
    3a66:	92 2b       	or	r25, r18
    3a68:	08 95       	ret

00003a6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3a6a:	83 30       	cpi	r24, 0x03	; 3
    3a6c:	81 f0       	breq	.+32     	; 0x3a8e <turnOffPWM+0x24>
    3a6e:	28 f4       	brcc	.+10     	; 0x3a7a <turnOffPWM+0x10>
    3a70:	81 30       	cpi	r24, 0x01	; 1
    3a72:	99 f0       	breq	.+38     	; 0x3a9a <turnOffPWM+0x30>
    3a74:	82 30       	cpi	r24, 0x02	; 2
    3a76:	a1 f0       	breq	.+40     	; 0x3aa0 <turnOffPWM+0x36>
    3a78:	08 95       	ret
    3a7a:	87 30       	cpi	r24, 0x07	; 7
    3a7c:	a9 f0       	breq	.+42     	; 0x3aa8 <turnOffPWM+0x3e>
    3a7e:	88 30       	cpi	r24, 0x08	; 8
    3a80:	b9 f0       	breq	.+46     	; 0x3ab0 <turnOffPWM+0x46>
    3a82:	84 30       	cpi	r24, 0x04	; 4
    3a84:	d1 f4       	brne	.+52     	; 0x3aba <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a8a:	8f 7d       	andi	r24, 0xDF	; 223
    3a8c:	03 c0       	rjmp	.+6      	; 0x3a94 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3a8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a92:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a94:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3a9a:	84 b5       	in	r24, 0x24	; 36
    3a9c:	8f 77       	andi	r24, 0x7F	; 127
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3aa0:	84 b5       	in	r24, 0x24	; 36
    3aa2:	8f 7d       	andi	r24, 0xDF	; 223
    3aa4:	84 bd       	out	0x24, r24	; 36
    3aa6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3aa8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3aac:	8f 77       	andi	r24, 0x7F	; 127
    3aae:	03 c0       	rjmp	.+6      	; 0x3ab6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3ab0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3ab4:	8f 7d       	andi	r24, 0xDF	; 223
    3ab6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3aba:	08 95       	ret

00003abc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	ec 5f       	subi	r30, 0xFC	; 252
    3ac6:	f7 4f       	sbci	r31, 0xF7	; 247
    3ac8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3aca:	fc 01       	movw	r30, r24
    3acc:	e8 5e       	subi	r30, 0xE8	; 232
    3ace:	f7 4f       	sbci	r31, 0xF7	; 247
    3ad0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3ad2:	88 23       	and	r24, r24
    3ad4:	61 f1       	breq	.+88     	; 0x3b2e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	fc 01       	movw	r30, r24
    3ade:	e0 5c       	subi	r30, 0xC0	; 192
    3ae0:	f7 4f       	sbci	r31, 0xF7	; 247
    3ae2:	c5 91       	lpm	r28, Z+
    3ae4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	ea 5c       	subi	r30, 0xCA	; 202
    3aea:	f7 4f       	sbci	r31, 0xF7	; 247
    3aec:	a5 91       	lpm	r26, Z+
    3aee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3af0:	61 11       	cpse	r22, r1
    3af2:	09 c0       	rjmp	.+18     	; 0x3b06 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3af4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3af6:	f8 94       	cli
		*reg &= ~bit;
    3af8:	88 81       	ld	r24, Y
    3afa:	20 95       	com	r18
    3afc:	82 23       	and	r24, r18
    3afe:	88 83       	st	Y, r24
		*out &= ~bit;
    3b00:	ec 91       	ld	r30, X
    3b02:	2e 23       	and	r18, r30
    3b04:	0b c0       	rjmp	.+22     	; 0x3b1c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3b06:	62 30       	cpi	r22, 0x02	; 2
    3b08:	61 f4       	brne	.+24     	; 0x3b22 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3b0a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b0c:	f8 94       	cli
		*reg &= ~bit;
    3b0e:	88 81       	ld	r24, Y
    3b10:	32 2f       	mov	r19, r18
    3b12:	30 95       	com	r19
    3b14:	83 23       	and	r24, r19
    3b16:	88 83       	st	Y, r24
		*out |= bit;
    3b18:	ec 91       	ld	r30, X
    3b1a:	2e 2b       	or	r18, r30
    3b1c:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b1e:	9f bf       	out	0x3f, r25	; 63
    3b20:	06 c0       	rjmp	.+12     	; 0x3b2e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b22:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b24:	f8 94       	cli
		*reg |= bit;
    3b26:	e8 81       	ld	r30, Y
    3b28:	2e 2b       	or	r18, r30
    3b2a:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b2c:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	08 95       	ret

00003b34 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	f9 01       	movw	r30, r18
    3b40:	e0 51       	subi	r30, 0x10	; 16
    3b42:	f8 4f       	sbci	r31, 0xF8	; 248
    3b44:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3b46:	f9 01       	movw	r30, r18
    3b48:	ec 5f       	subi	r30, 0xFC	; 252
    3b4a:	f7 4f       	sbci	r31, 0xF7	; 247
    3b4c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3b4e:	f9 01       	movw	r30, r18
    3b50:	e8 5e       	subi	r30, 0xE8	; 232
    3b52:	f7 4f       	sbci	r31, 0xF7	; 247
    3b54:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3b56:	cc 23       	and	r28, r28
    3b58:	c1 f0       	breq	.+48     	; 0x3b8a <digitalWrite+0x56>
    3b5a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3b5c:	81 11       	cpse	r24, r1
    3b5e:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <turnOffPWM>

	out = portOutputRegister(port);
    3b62:	ec 2f       	mov	r30, r28
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	ee 0f       	add	r30, r30
    3b68:	ff 1f       	adc	r31, r31
    3b6a:	ea 5c       	subi	r30, 0xCA	; 202
    3b6c:	f7 4f       	sbci	r31, 0xF7	; 247
    3b6e:	a5 91       	lpm	r26, Z+
    3b70:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3b72:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3b74:	f8 94       	cli

	if (val == LOW) {
    3b76:	11 11       	cpse	r17, r1
    3b78:	04 c0       	rjmp	.+8      	; 0x3b82 <digitalWrite+0x4e>
		*out &= ~bit;
    3b7a:	8c 91       	ld	r24, X
    3b7c:	d0 95       	com	r29
    3b7e:	d8 23       	and	r29, r24
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3b82:	ec 91       	ld	r30, X
    3b84:	de 2b       	or	r29, r30
    3b86:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3b88:	9f bf       	out	0x3f, r25	; 63
}
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	1f 91       	pop	r17
    3b90:	08 95       	ret

00003b92 <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    3b92:	fc 01       	movw	r30, r24
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	0c 94 28 22 	jmp	0x4450	; 0x4450 <free>

00003b9c <_ZN6String10invalidateEv>:
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	ec 01       	movw	r28, r24
    3ba2:	88 81       	ld	r24, Y
    3ba4:	99 81       	ldd	r25, Y+1	; 0x01
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	11 f0       	breq	.+4      	; 0x3bae <_ZN6String10invalidateEv+0x12>
    3baa:	0e 94 28 22 	call	0x4450	; 0x4450 <free>
    3bae:	19 82       	std	Y+1, r1	; 0x01
    3bb0:	18 82       	st	Y, r1
    3bb2:	1d 82       	std	Y+5, r1	; 0x05
    3bb4:	1c 82       	std	Y+4, r1	; 0x04
    3bb6:	1b 82       	std	Y+3, r1	; 0x03
    3bb8:	1a 82       	std	Y+2, r1	; 0x02
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	08 95       	ret

00003bc0 <_ZN6String12changeBufferEj>:
    3bc0:	0f 93       	push	r16
    3bc2:	1f 93       	push	r17
    3bc4:	cf 93       	push	r28
    3bc6:	df 93       	push	r29
    3bc8:	ec 01       	movw	r28, r24
    3bca:	8b 01       	movw	r16, r22
    3bcc:	6f 5f       	subi	r22, 0xFF	; 255
    3bce:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd0:	88 81       	ld	r24, Y
    3bd2:	99 81       	ldd	r25, Y+1	; 0x01
    3bd4:	0e 94 b1 22 	call	0x4562	; 0x4562 <realloc>
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	31 f0       	breq	.+12     	; 0x3be8 <_ZN6String12changeBufferEj+0x28>
    3bdc:	99 83       	std	Y+1, r25	; 0x01
    3bde:	88 83       	st	Y, r24
    3be0:	1b 83       	std	Y+3, r17	; 0x03
    3be2:	0a 83       	std	Y+2, r16	; 0x02
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	01 c0       	rjmp	.+2      	; 0x3bea <_ZN6String12changeBufferEj+0x2a>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	08 95       	ret

00003bf4 <_ZN6String7reserveEj>:
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	ec 01       	movw	r28, r24
    3bfa:	88 81       	ld	r24, Y
    3bfc:	99 81       	ldd	r25, Y+1	; 0x01
    3bfe:	89 2b       	or	r24, r25
    3c00:	29 f0       	breq	.+10     	; 0x3c0c <_ZN6String7reserveEj+0x18>
    3c02:	8a 81       	ldd	r24, Y+2	; 0x02
    3c04:	9b 81       	ldd	r25, Y+3	; 0x03
    3c06:	86 17       	cp	r24, r22
    3c08:	97 07       	cpc	r25, r23
    3c0a:	60 f4       	brcc	.+24     	; 0x3c24 <_ZN6String7reserveEj+0x30>
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_ZN6String12changeBufferEj>
    3c12:	88 23       	and	r24, r24
    3c14:	41 f0       	breq	.+16     	; 0x3c26 <_ZN6String7reserveEj+0x32>
    3c16:	8c 81       	ldd	r24, Y+4	; 0x04
    3c18:	9d 81       	ldd	r25, Y+5	; 0x05
    3c1a:	89 2b       	or	r24, r25
    3c1c:	19 f4       	brne	.+6      	; 0x3c24 <_ZN6String7reserveEj+0x30>
    3c1e:	e8 81       	ld	r30, Y
    3c20:	f9 81       	ldd	r31, Y+1	; 0x01
    3c22:	10 82       	st	Z, r1
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	08 95       	ret

00003c2c <_ZN6String4copyEPKcj>:
    3c2c:	ef 92       	push	r14
    3c2e:	ff 92       	push	r15
    3c30:	0f 93       	push	r16
    3c32:	1f 93       	push	r17
    3c34:	cf 93       	push	r28
    3c36:	df 93       	push	r29
    3c38:	ec 01       	movw	r28, r24
    3c3a:	7b 01       	movw	r14, r22
    3c3c:	8a 01       	movw	r16, r20
    3c3e:	ba 01       	movw	r22, r20
    3c40:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <_ZN6String7reserveEj>
    3c44:	81 11       	cpse	r24, r1
    3c46:	04 c0       	rjmp	.+8      	; 0x3c50 <_ZN6String4copyEPKcj+0x24>
    3c48:	ce 01       	movw	r24, r28
    3c4a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_ZN6String10invalidateEv>
    3c4e:	07 c0       	rjmp	.+14     	; 0x3c5e <_ZN6String4copyEPKcj+0x32>
    3c50:	1d 83       	std	Y+5, r17	; 0x05
    3c52:	0c 83       	std	Y+4, r16	; 0x04
    3c54:	b7 01       	movw	r22, r14
    3c56:	88 81       	ld	r24, Y
    3c58:	99 81       	ldd	r25, Y+1	; 0x01
    3c5a:	0e 94 d5 23 	call	0x47aa	; 0x47aa <strcpy>
    3c5e:	ce 01       	movw	r24, r28
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	ff 90       	pop	r15
    3c6a:	ef 90       	pop	r14
    3c6c:	08 95       	ret

00003c6e <_ZN6StringC1EPKc>:
    3c6e:	fc 01       	movw	r30, r24
    3c70:	11 82       	std	Z+1, r1	; 0x01
    3c72:	10 82       	st	Z, r1
    3c74:	13 82       	std	Z+3, r1	; 0x03
    3c76:	12 82       	std	Z+2, r1	; 0x02
    3c78:	15 82       	std	Z+5, r1	; 0x05
    3c7a:	14 82       	std	Z+4, r1	; 0x04
    3c7c:	61 15       	cp	r22, r1
    3c7e:	71 05       	cpc	r23, r1
    3c80:	51 f0       	breq	.+20     	; 0x3c96 <_ZN6StringC1EPKc+0x28>
    3c82:	fb 01       	movw	r30, r22
    3c84:	01 90       	ld	r0, Z+
    3c86:	00 20       	and	r0, r0
    3c88:	e9 f7       	brne	.-6      	; 0x3c84 <_ZN6StringC1EPKc+0x16>
    3c8a:	31 97       	sbiw	r30, 0x01	; 1
    3c8c:	af 01       	movw	r20, r30
    3c8e:	46 1b       	sub	r20, r22
    3c90:	57 0b       	sbc	r21, r23
    3c92:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <_ZN6String4copyEPKcj>
    3c96:	08 95       	ret

00003c98 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	8c 01       	movw	r16, r24
    3ca2:	eb 01       	movw	r28, r22
	if (buffer) {
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	99 f0       	breq	.+38     	; 0x3cd4 <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    3cae:	42 81       	ldd	r20, Z+2	; 0x02
    3cb0:	53 81       	ldd	r21, Z+3	; 0x03
    3cb2:	2c 81       	ldd	r18, Y+4	; 0x04
    3cb4:	3d 81       	ldd	r19, Y+5	; 0x05
    3cb6:	42 17       	cp	r20, r18
    3cb8:	53 07       	cpc	r21, r19
    3cba:	50 f0       	brcs	.+20     	; 0x3cd0 <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    3cbc:	68 81       	ld	r22, Y
    3cbe:	79 81       	ldd	r23, Y+1	; 0x01
    3cc0:	0e 94 d5 23 	call	0x47aa	; 0x47aa <strcpy>
			len = rhs.len;
    3cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc8:	f8 01       	movw	r30, r16
    3cca:	95 83       	std	Z+5, r25	; 0x05
    3ccc:	84 83       	std	Z+4, r24	; 0x04
    3cce:	13 c0       	rjmp	.+38     	; 0x3cf6 <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    3cd0:	0e 94 28 22 	call	0x4450	; 0x4450 <free>
		}
	}
	buffer = rhs.buffer;
    3cd4:	88 81       	ld	r24, Y
    3cd6:	99 81       	ldd	r25, Y+1	; 0x01
    3cd8:	f8 01       	movw	r30, r16
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce2:	93 83       	std	Z+3, r25	; 0x03
    3ce4:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    3ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cea:	95 83       	std	Z+5, r25	; 0x05
    3cec:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    3cee:	19 82       	std	Y+1, r1	; 0x01
    3cf0:	18 82       	st	Y, r1
	rhs.capacity = 0;
    3cf2:	1b 82       	std	Y+3, r1	; 0x03
    3cf4:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    3cf6:	1d 82       	std	Y+5, r1	; 0x05
    3cf8:	1c 82       	std	Y+4, r1	; 0x04
}
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	1f 91       	pop	r17
    3d00:	0f 91       	pop	r16
    3d02:	08 95       	ret

00003d04 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	ec 01       	movw	r28, r24
    3d0a:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3d0c:	86 17       	cp	r24, r22
    3d0e:	97 07       	cpc	r25, r23
    3d10:	61 f0       	breq	.+24     	; 0x3d2a <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3d12:	60 81       	ld	r22, Z
    3d14:	71 81       	ldd	r23, Z+1	; 0x01
    3d16:	61 15       	cp	r22, r1
    3d18:	71 05       	cpc	r23, r1
    3d1a:	29 f0       	breq	.+10     	; 0x3d26 <_ZN6StringaSERKS_+0x22>
    3d1c:	44 81       	ldd	r20, Z+4	; 0x04
    3d1e:	55 81       	ldd	r21, Z+5	; 0x05
    3d20:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZN6String4copyEPKcj>
    3d24:	02 c0       	rjmp	.+4      	; 0x3d2a <_ZN6StringaSERKS_+0x26>
	else invalidate();
    3d26:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_ZN6String10invalidateEv>
	
	return *this;
}
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	08 95       	ret

00003d32 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3d32:	fc 01       	movw	r30, r24
    3d34:	11 82       	std	Z+1, r1	; 0x01
    3d36:	10 82       	st	Z, r1
	capacity = 0;
    3d38:	13 82       	std	Z+3, r1	; 0x03
    3d3a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3d3c:	15 82       	std	Z+5, r1	; 0x05
    3d3e:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    3d40:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <_ZN6StringaSERKS_>

00003d44 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    3d44:	cf 93       	push	r28
    3d46:	df 93       	push	r29
    3d48:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    3d4a:	86 17       	cp	r24, r22
    3d4c:	97 07       	cpc	r25, r23
    3d4e:	11 f0       	breq	.+4      	; 0x3d54 <_ZN6StringaSEOS_+0x10>
    3d50:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <_ZN6String4moveERS_>
	return *this;
}
    3d54:	ce 01       	movw	r24, r28
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	08 95       	ret

00003d5c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3d5c:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3d60:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3d64:	28 17       	cp	r18, r24
    3d66:	39 07       	cpc	r19, r25
    3d68:	b9 f4       	brne	.+46     	; 0x3d98 <_ZN14SoftwareSerial4readEv+0x3c>
    3d6a:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d6e:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d72:	98 17       	cp	r25, r24
    3d74:	89 f0       	breq	.+34     	; 0x3d98 <_ZN14SoftwareSerial4readEv+0x3c>
    3d76:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	e7 5d       	subi	r30, 0xD7	; 215
    3d7e:	fa 4f       	sbci	r31, 0xFA	; 250
    3d80:	80 81       	ld	r24, Z
    3d82:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	2f 5f       	subi	r18, 0xFF	; 255
    3d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8c:	2f 73       	andi	r18, 0x3F	; 63
    3d8e:	33 27       	eor	r19, r19
    3d90:	20 93 27 05 	sts	0x0527, r18	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	08 95       	ret
    3d98:	8f ef       	ldi	r24, 0xFF	; 255
    3d9a:	9f ef       	ldi	r25, 0xFF	; 255
    3d9c:	08 95       	ret

00003d9e <_ZN14SoftwareSerial5writeEh>:
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	dc 01       	movw	r26, r24
    3da6:	5c 96       	adiw	r26, 0x1c	; 28
    3da8:	8d 91       	ld	r24, X+
    3daa:	9c 91       	ld	r25, X
    3dac:	5d 97       	sbiw	r26, 0x1d	; 29
    3dae:	00 97       	sbiw	r24, 0x00	; 0
    3db0:	39 f4       	brne	.+14     	; 0x3dc0 <_ZN14SoftwareSerial5writeEh+0x22>
    3db2:	21 e0       	ldi	r18, 0x01	; 1
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	13 96       	adiw	r26, 0x03	; 3
    3db8:	3c 93       	st	X, r19
    3dba:	2e 93       	st	-X, r18
    3dbc:	12 97       	sbiw	r26, 0x02	; 2
    3dbe:	3b c0       	rjmp	.+118    	; 0x3e36 <_ZN14SoftwareSerial5writeEh+0x98>
    3dc0:	51 96       	adiw	r26, 0x11	; 17
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	52 97       	sbiw	r26, 0x12	; 18
    3dc8:	50 96       	adiw	r26, 0x10	; 16
    3dca:	2c 91       	ld	r18, X
    3dcc:	50 97       	sbiw	r26, 0x10	; 16
    3dce:	32 2f       	mov	r19, r18
    3dd0:	30 95       	com	r19
    3dd2:	1f b7       	in	r17, 0x3f	; 63
    3dd4:	5e 96       	adiw	r26, 0x1e	; 30
    3dd6:	4c 91       	ld	r20, X
    3dd8:	5e 97       	sbiw	r26, 0x1e	; 30
    3dda:	74 2f       	mov	r23, r20
    3ddc:	72 70       	andi	r23, 0x02	; 2
    3dde:	41 fd       	sbrc	r20, 1
    3de0:	60 95       	com	r22
    3de2:	f8 94       	cli
    3de4:	40 81       	ld	r20, Z
    3de6:	77 23       	and	r23, r23
    3de8:	11 f0       	breq	.+4      	; 0x3dee <_ZN14SoftwareSerial5writeEh+0x50>
    3dea:	42 2b       	or	r20, r18
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <_ZN14SoftwareSerial5writeEh+0x52>
    3dee:	43 23       	and	r20, r19
    3df0:	40 83       	st	Z, r20
    3df2:	ec 01       	movw	r28, r24
    3df4:	21 97       	sbiw	r28, 0x01	; 1
    3df6:	f1 f7       	brne	.-4      	; 0x3df4 <_ZN14SoftwareSerial5writeEh+0x56>
    3df8:	48 e0       	ldi	r20, 0x08	; 8
    3dfa:	50 81       	ld	r21, Z
    3dfc:	60 ff       	sbrs	r22, 0
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <_ZN14SoftwareSerial5writeEh+0x66>
    3e00:	52 2b       	or	r21, r18
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <_ZN14SoftwareSerial5writeEh+0x68>
    3e04:	53 23       	and	r21, r19
    3e06:	50 83       	st	Z, r21
    3e08:	ec 01       	movw	r28, r24
    3e0a:	21 97       	sbiw	r28, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <_ZN14SoftwareSerial5writeEh+0x6c>
    3e0e:	66 95       	lsr	r22
    3e10:	41 50       	subi	r20, 0x01	; 1
    3e12:	99 f7       	brne	.-26     	; 0x3dfa <_ZN14SoftwareSerial5writeEh+0x5c>
    3e14:	80 81       	ld	r24, Z
    3e16:	77 23       	and	r23, r23
    3e18:	19 f0       	breq	.+6      	; 0x3e20 <_ZN14SoftwareSerial5writeEh+0x82>
    3e1a:	83 23       	and	r24, r19
    3e1c:	80 83       	st	Z, r24
    3e1e:	02 c0       	rjmp	.+4      	; 0x3e24 <_ZN14SoftwareSerial5writeEh+0x86>
    3e20:	28 2b       	or	r18, r24
    3e22:	20 83       	st	Z, r18
    3e24:	1f bf       	out	0x3f, r17	; 63
    3e26:	5c 96       	adiw	r26, 0x1c	; 28
    3e28:	8d 91       	ld	r24, X+
    3e2a:	9c 91       	ld	r25, X
    3e2c:	5d 97       	sbiw	r26, 0x1d	; 29
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <_ZN14SoftwareSerial5writeEh+0x90>
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	08 95       	ret

00003e3e <_ZN14SoftwareSerial5flushEv>:
    3e3e:	08 95       	ret

00003e40 <_ZN14SoftwareSerial4peekEv>:
    3e40:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3e44:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e48:	28 17       	cp	r18, r24
    3e4a:	39 07       	cpc	r19, r25
    3e4c:	71 f4       	brne	.+28     	; 0x3e6a <_ZN14SoftwareSerial4peekEv+0x2a>
    3e4e:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e52:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e56:	98 17       	cp	r25, r24
    3e58:	41 f0       	breq	.+16     	; 0x3e6a <_ZN14SoftwareSerial4peekEv+0x2a>
    3e5a:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	e7 5d       	subi	r30, 0xD7	; 215
    3e62:	fa 4f       	sbci	r31, 0xFA	; 250
    3e64:	80 81       	ld	r24, Z
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	08 95       	ret
    3e6a:	8f ef       	ldi	r24, 0xFF	; 255
    3e6c:	9f ef       	ldi	r25, 0xFF	; 255
    3e6e:	08 95       	ret

00003e70 <_ZN14SoftwareSerial9availableEv>:
    3e70:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3e74:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e78:	28 17       	cp	r18, r24
    3e7a:	39 07       	cpc	r19, r25
    3e7c:	71 f4       	brne	.+28     	; 0x3e9a <_ZN14SoftwareSerial9availableEv+0x2a>
    3e7e:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e82:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	80 5c       	subi	r24, 0xC0	; 192
    3e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8c:	82 1b       	sub	r24, r18
    3e8e:	91 09       	sbc	r25, r1
    3e90:	60 e4       	ldi	r22, 0x40	; 64
    3e92:	70 e0       	ldi	r23, 0x00	; 0
    3e94:	0e 94 35 21 	call	0x426a	; 0x426a <__divmodhi4>
    3e98:	08 95       	ret
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	08 95       	ret

00003ea0 <_ZN14SoftwareSerial13stopListeningEv>:
    3ea0:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3ea4:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3ea8:	e8 17       	cp	r30, r24
    3eaa:	f9 07       	cpc	r31, r25
    3eac:	69 f4       	brne	.+26     	; 0x3ec8 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3eae:	a3 89       	ldd	r26, Z+19	; 0x13
    3eb0:	b4 89       	ldd	r27, Z+20	; 0x14
    3eb2:	9c 91       	ld	r25, X
    3eb4:	85 89       	ldd	r24, Z+21	; 0x15
    3eb6:	80 95       	com	r24
    3eb8:	89 23       	and	r24, r25
    3eba:	8c 93       	st	X, r24
    3ebc:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3ec0:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	08 95       	ret
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	08 95       	ret

00003ecc <_ZN14SoftwareSerial6listenEv>:
    3ecc:	cf 93       	push	r28
    3ece:	df 93       	push	r29
    3ed0:	ec 01       	movw	r28, r24
    3ed2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ed4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ed6:	89 2b       	or	r24, r25
    3ed8:	f1 f0       	breq	.+60     	; 0x3f16 <_ZN14SoftwareSerial6listenEv+0x4a>
    3eda:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3ede:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3ee2:	c8 17       	cp	r28, r24
    3ee4:	d9 07       	cpc	r29, r25
    3ee6:	b9 f0       	breq	.+46     	; 0x3f16 <_ZN14SoftwareSerial6listenEv+0x4a>
    3ee8:	00 97       	sbiw	r24, 0x00	; 0
    3eea:	11 f0       	breq	.+4      	; 0x3ef0 <_ZN14SoftwareSerial6listenEv+0x24>
    3eec:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <_ZN14SoftwareSerial13stopListeningEv>
    3ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ef2:	8e 7f       	andi	r24, 0xFE	; 254
    3ef4:	8e 8f       	std	Y+30, r24	; 0x1e
    3ef6:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3efa:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3efe:	d0 93 6a 05 	sts	0x056A, r29	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3f02:	c0 93 69 05 	sts	0x0569, r28	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3f06:	eb 89       	ldd	r30, Y+19	; 0x13
    3f08:	fc 89       	ldd	r31, Y+20	; 0x14
    3f0a:	90 81       	ld	r25, Z
    3f0c:	8d 89       	ldd	r24, Y+21	; 0x15
    3f0e:	89 2b       	or	r24, r25
    3f10:	80 83       	st	Z, r24
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	01 c0       	rjmp	.+2      	; 0x3f18 <_ZN14SoftwareSerial6listenEv+0x4c>
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	df 91       	pop	r29
    3f1a:	cf 91       	pop	r28
    3f1c:	08 95       	ret

00003f1e <__vector_3>:
    3f1e:	1f 92       	push	r1
    3f20:	0f 92       	push	r0
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	0f 92       	push	r0
    3f26:	11 24       	eor	r1, r1
    3f28:	2f 93       	push	r18
    3f2a:	3f 93       	push	r19
    3f2c:	4f 93       	push	r20
    3f2e:	5f 93       	push	r21
    3f30:	6f 93       	push	r22
    3f32:	7f 93       	push	r23
    3f34:	8f 93       	push	r24
    3f36:	9f 93       	push	r25
    3f38:	af 93       	push	r26
    3f3a:	bf 93       	push	r27
    3f3c:	ef 93       	push	r30
    3f3e:	ff 93       	push	r31
    3f40:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3f44:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3f48:	30 97       	sbiw	r30, 0x00	; 0
    3f4a:	09 f4       	brne	.+2      	; 0x3f4e <__vector_3+0x30>
    3f4c:	51 c0       	rjmp	.+162    	; 0x3ff0 <__vector_3+0xd2>
    3f4e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3f50:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f52:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f54:	85 85       	ldd	r24, Z+13	; 0x0d
    3f56:	91 ff       	sbrs	r25, 1
    3f58:	04 c0       	rjmp	.+8      	; 0x3f62 <__vector_3+0x44>
    3f5a:	9c 91       	ld	r25, X
    3f5c:	89 23       	and	r24, r25
    3f5e:	29 f4       	brne	.+10     	; 0x3f6a <__vector_3+0x4c>
    3f60:	47 c0       	rjmp	.+142    	; 0x3ff0 <__vector_3+0xd2>
    3f62:	9c 91       	ld	r25, X
    3f64:	89 23       	and	r24, r25
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <__vector_3+0x4c>
    3f68:	43 c0       	rjmp	.+134    	; 0x3ff0 <__vector_3+0xd2>
    3f6a:	a3 89       	ldd	r26, Z+19	; 0x13
    3f6c:	b4 89       	ldd	r27, Z+20	; 0x14
    3f6e:	9c 91       	ld	r25, X
    3f70:	85 89       	ldd	r24, Z+21	; 0x15
    3f72:	80 95       	com	r24
    3f74:	89 23       	and	r24, r25
    3f76:	8c 93       	st	X, r24
    3f78:	86 89       	ldd	r24, Z+22	; 0x16
    3f7a:	97 89       	ldd	r25, Z+23	; 0x17
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <__vector_3+0x5e>
    3f80:	60 8d       	ldd	r22, Z+24	; 0x18
    3f82:	71 8d       	ldd	r23, Z+25	; 0x19
    3f84:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f86:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f88:	55 85       	ldd	r21, Z+13	; 0x0d
    3f8a:	38 e0       	ldi	r19, 0x08	; 8
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	cb 01       	movw	r24, r22
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <__vector_3+0x72>
    3f94:	82 2f       	mov	r24, r18
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	95 95       	asr	r25
    3f9a:	87 95       	ror	r24
    3f9c:	28 2f       	mov	r18, r24
    3f9e:	4c 91       	ld	r20, X
    3fa0:	45 23       	and	r20, r21
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <__vector_3+0x88>
    3fa4:	20 68       	ori	r18, 0x80	; 128
    3fa6:	31 50       	subi	r19, 0x01	; 1
    3fa8:	91 f7       	brne	.-28     	; 0x3f8e <__vector_3+0x70>
    3faa:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fac:	81 fd       	sbrc	r24, 1
    3fae:	20 95       	com	r18
    3fb0:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	01 96       	adiw	r24, 0x01	; 1
    3fb8:	8f 73       	andi	r24, 0x3F	; 63
    3fba:	99 27       	eor	r25, r25
    3fbc:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fc0:	38 17       	cp	r19, r24
    3fc2:	49 f0       	breq	.+18     	; 0x3fd6 <__vector_3+0xb8>
    3fc4:	a0 91 28 05 	lds	r26, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	a7 5d       	subi	r26, 0xD7	; 215
    3fcc:	ba 4f       	sbci	r27, 0xFA	; 250
    3fce:	2c 93       	st	X, r18
    3fd0:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fd4:	03 c0       	rjmp	.+6      	; 0x3fdc <__vector_3+0xbe>
    3fd6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fd8:	81 60       	ori	r24, 0x01	; 1
    3fda:	86 8f       	std	Z+30, r24	; 0x1e
    3fdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3fde:	93 8d       	ldd	r25, Z+27	; 0x1b
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <__vector_3+0xc2>
    3fe4:	a3 89       	ldd	r26, Z+19	; 0x13
    3fe6:	b4 89       	ldd	r27, Z+20	; 0x14
    3fe8:	9c 91       	ld	r25, X
    3fea:	85 89       	ldd	r24, Z+21	; 0x15
    3fec:	89 2b       	or	r24, r25
    3fee:	8c 93       	st	X, r24
    3ff0:	ff 91       	pop	r31
    3ff2:	ef 91       	pop	r30
    3ff4:	bf 91       	pop	r27
    3ff6:	af 91       	pop	r26
    3ff8:	9f 91       	pop	r25
    3ffa:	8f 91       	pop	r24
    3ffc:	7f 91       	pop	r23
    3ffe:	6f 91       	pop	r22
    4000:	5f 91       	pop	r21
    4002:	4f 91       	pop	r20
    4004:	3f 91       	pop	r19
    4006:	2f 91       	pop	r18
    4008:	0f 90       	pop	r0
    400a:	0f be       	out	0x3f, r0	; 63
    400c:	0f 90       	pop	r0
    400e:	1f 90       	pop	r1
    4010:	18 95       	reti

00004012 <_ZN14SoftwareSerial5setTXEh>:
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	ec 01       	movw	r28, r24
    401a:	16 2f       	mov	r17, r22
    401c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    401e:	66 95       	lsr	r22
    4020:	61 70       	andi	r22, 0x01	; 1
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	68 27       	eor	r22, r24
    4026:	81 2f       	mov	r24, r17
    4028:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
    402c:	61 e0       	ldi	r22, 0x01	; 1
    402e:	81 2f       	mov	r24, r17
    4030:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <pinMode>
    4034:	81 2f       	mov	r24, r17
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	fc 01       	movw	r30, r24
    403a:	ec 5f       	subi	r30, 0xFC	; 252
    403c:	f7 4f       	sbci	r31, 0xF7	; 247
    403e:	e4 91       	lpm	r30, Z
    4040:	e8 8b       	std	Y+16, r30	; 0x10
    4042:	fc 01       	movw	r30, r24
    4044:	e8 5e       	subi	r30, 0xE8	; 232
    4046:	f7 4f       	sbci	r31, 0xF7	; 247
    4048:	e4 91       	lpm	r30, Z
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	ee 0f       	add	r30, r30
    404e:	ff 1f       	adc	r31, r31
    4050:	ea 5c       	subi	r30, 0xCA	; 202
    4052:	f7 4f       	sbci	r31, 0xF7	; 247
    4054:	85 91       	lpm	r24, Z+
    4056:	94 91       	lpm	r25, Z
    4058:	9a 8b       	std	Y+18, r25	; 0x12
    405a:	89 8b       	std	Y+17, r24	; 0x11
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	1f 91       	pop	r17
    4062:	08 95       	ret

00004064 <_ZN14SoftwareSerial5setRXEh>:
    4064:	1f 93       	push	r17
    4066:	cf 93       	push	r28
    4068:	df 93       	push	r29
    406a:	ec 01       	movw	r28, r24
    406c:	16 2f       	mov	r17, r22
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	81 2f       	mov	r24, r17
    4072:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <pinMode>
    4076:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4078:	81 fd       	sbrc	r24, 1
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <_ZN14SoftwareSerial5setRXEh+0x20>
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	81 2f       	mov	r24, r17
    4080:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <digitalWrite>
    4084:	1c 87       	std	Y+12, r17	; 0x0c
    4086:	81 2f       	mov	r24, r17
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	fc 01       	movw	r30, r24
    408c:	ec 5f       	subi	r30, 0xFC	; 252
    408e:	f7 4f       	sbci	r31, 0xF7	; 247
    4090:	e4 91       	lpm	r30, Z
    4092:	ed 87       	std	Y+13, r30	; 0x0d
    4094:	fc 01       	movw	r30, r24
    4096:	e8 5e       	subi	r30, 0xE8	; 232
    4098:	f7 4f       	sbci	r31, 0xF7	; 247
    409a:	e4 91       	lpm	r30, Z
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	ee 0f       	add	r30, r30
    40a0:	ff 1f       	adc	r31, r31
    40a2:	e4 5d       	subi	r30, 0xD4	; 212
    40a4:	f7 4f       	sbci	r31, 0xF7	; 247
    40a6:	85 91       	lpm	r24, Z+
    40a8:	94 91       	lpm	r25, Z
    40aa:	9f 87       	std	Y+15, r25	; 0x0f
    40ac:	8e 87       	std	Y+14, r24	; 0x0e
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	08 95       	ret

000040b6 <_ZN14SoftwareSerialC1Ehhb>:
    40b6:	1f 93       	push	r17
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	ec 01       	movw	r28, r24
    40be:	16 2f       	mov	r17, r22
    40c0:	1b 82       	std	Y+3, r1	; 0x03
    40c2:	1a 82       	std	Y+2, r1	; 0x02
    40c4:	88 ee       	ldi	r24, 0xE8	; 232
    40c6:	93 e0       	ldi	r25, 0x03	; 3
    40c8:	a0 e0       	ldi	r26, 0x00	; 0
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	8c 83       	std	Y+4, r24	; 0x04
    40ce:	9d 83       	std	Y+5, r25	; 0x05
    40d0:	ae 83       	std	Y+6, r26	; 0x06
    40d2:	bf 83       	std	Y+7, r27	; 0x07
    40d4:	81 e8       	ldi	r24, 0x81	; 129
    40d6:	92 e0       	ldi	r25, 0x02	; 2
    40d8:	99 83       	std	Y+1, r25	; 0x01
    40da:	88 83       	st	Y, r24
    40dc:	1f 8a       	std	Y+23, r1	; 0x17
    40de:	1e 8a       	std	Y+22, r1	; 0x16
    40e0:	19 8e       	std	Y+25, r1	; 0x19
    40e2:	18 8e       	std	Y+24, r1	; 0x18
    40e4:	1b 8e       	std	Y+27, r1	; 0x1b
    40e6:	1a 8e       	std	Y+26, r1	; 0x1a
    40e8:	1d 8e       	std	Y+29, r1	; 0x1d
    40ea:	1c 8e       	std	Y+28, r1	; 0x1c
    40ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40ee:	8e 7f       	andi	r24, 0xFE	; 254
    40f0:	20 fb       	bst	r18, 0
    40f2:	81 f9       	bld	r24, 1
    40f4:	8e 8f       	std	Y+30, r24	; 0x1e
    40f6:	64 2f       	mov	r22, r20
    40f8:	ce 01       	movw	r24, r28
    40fa:	0e 94 09 20 	call	0x4012	; 0x4012 <_ZN14SoftwareSerial5setTXEh>
    40fe:	61 2f       	mov	r22, r17
    4100:	ce 01       	movw	r24, r28
    4102:	df 91       	pop	r29
    4104:	cf 91       	pop	r28
    4106:	1f 91       	pop	r17
    4108:	0c 94 32 20 	jmp	0x4064	; 0x4064 <_ZN14SoftwareSerial5setRXEh>

0000410c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	ec 01       	movw	r28, r24
    4112:	9a 01       	movw	r18, r20
    4114:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4116:	1b 8e       	std	Y+27, r1	; 0x1b
    4118:	1a 8e       	std	Y+26, r1	; 0x1a
    411a:	19 8e       	std	Y+25, r1	; 0x19
    411c:	18 8e       	std	Y+24, r1	; 0x18
    411e:	1f 8a       	std	Y+23, r1	; 0x17
    4120:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4122:	60 e0       	ldi	r22, 0x00	; 0
    4124:	79 e0       	ldi	r23, 0x09	; 9
    4126:	8d e3       	ldi	r24, 0x3D	; 61
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__divmodsi4>
    412e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4130:	24 30       	cpi	r18, 0x04	; 4
    4132:	31 05       	cpc	r19, r1
    4134:	18 f0       	brcs	.+6      	; 0x413c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    4136:	c9 01       	movw	r24, r18
    4138:	03 97       	sbiw	r24, 0x03	; 3
    413a:	02 c0       	rjmp	.+4      	; 0x4140 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4140:	9d 8f       	std	Y+29, r25	; 0x1d
    4142:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4144:	6c 85       	ldd	r22, Y+12	; 0x0c
    4146:	66 31       	cpi	r22, 0x16	; 22
    4148:	08 f0       	brcs	.+2      	; 0x414c <_ZN14SoftwareSerial5beginEl+0x40>
    414a:	69 c0       	rjmp	.+210    	; 0x421e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    414c:	c9 01       	movw	r24, r18
    414e:	96 95       	lsr	r25
    4150:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4152:	84 31       	cpi	r24, 0x14	; 20
    4154:	91 05       	cpc	r25, r1
    4156:	10 f0       	brcs	.+4      	; 0x415c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    4158:	43 97       	sbiw	r24, 0x13	; 19
    415a:	02 c0       	rjmp	.+4      	; 0x4160 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4160:	9f 8b       	std	Y+23, r25	; 0x17
    4162:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4164:	36 97       	sbiw	r30, 0x06	; 6
    4166:	18 f0       	brcs	.+6      	; 0x416e <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    4168:	c9 01       	movw	r24, r18
    416a:	05 97       	sbiw	r24, 0x05	; 5
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4172:	99 8f       	std	Y+25, r25	; 0x19
    4174:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4176:	c9 01       	movw	r24, r18
    4178:	88 0f       	add	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	28 0f       	add	r18, r24
    417e:	39 1f       	adc	r19, r25
    4180:	36 95       	lsr	r19
    4182:	27 95       	ror	r18
    4184:	36 95       	lsr	r19
    4186:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4188:	2d 30       	cpi	r18, 0x0D	; 13
    418a:	31 05       	cpc	r19, r1
    418c:	18 f0       	brcs	.+6      	; 0x4194 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    418e:	2c 50       	subi	r18, 0x0C	; 12
    4190:	31 09       	sbc	r19, r1
    4192:	02 c0       	rjmp	.+4      	; 0x4198 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    4194:	21 e0       	ldi	r18, 0x01	; 1
    4196:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4198:	3b 8f       	std	Y+27, r19	; 0x1b
    419a:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    419c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    41a0:	68 30       	cpi	r22, 0x08	; 8
    41a2:	50 f0       	brcs	.+20     	; 0x41b8 <_ZN14SoftwareSerial5beginEl+0xac>
    41a4:	21 e0       	ldi	r18, 0x01	; 1
    41a6:	6e 30       	cpi	r22, 0x0E	; 14
    41a8:	08 f4       	brcc	.+2      	; 0x41ac <_ZN14SoftwareSerial5beginEl+0xa0>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	01 c0       	rjmp	.+2      	; 0x41b2 <_ZN14SoftwareSerial5beginEl+0xa6>
    41b0:	88 0f       	add	r24, r24
    41b2:	2a 95       	dec	r18
    41b4:	ea f7       	brpl	.-6      	; 0x41b0 <_ZN14SoftwareSerial5beginEl+0xa4>
    41b6:	01 c0       	rjmp	.+2      	; 0x41ba <_ZN14SoftwareSerial5beginEl+0xae>
    41b8:	84 e0       	ldi	r24, 0x04	; 4
    41ba:	89 2b       	or	r24, r25
    41bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    41c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    41c2:	98 30       	cpi	r25, 0x08	; 8
    41c4:	38 f0       	brcs	.+14     	; 0x41d4 <_ZN14SoftwareSerial5beginEl+0xc8>
    41c6:	9e 30       	cpi	r25, 0x0E	; 14
    41c8:	40 f0       	brcs	.+16     	; 0x41da <_ZN14SoftwareSerial5beginEl+0xce>
    41ca:	96 31       	cpi	r25, 0x16	; 22
    41cc:	48 f0       	brcs	.+18     	; 0x41e0 <_ZN14SoftwareSerial5beginEl+0xd4>
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	08 c0       	rjmp	.+16     	; 0x41e4 <_ZN14SoftwareSerial5beginEl+0xd8>
    41d4:	2d e6       	ldi	r18, 0x6D	; 109
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	05 c0       	rjmp	.+10     	; 0x41e4 <_ZN14SoftwareSerial5beginEl+0xd8>
    41da:	2b e6       	ldi	r18, 0x6B	; 107
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <_ZN14SoftwareSerial5beginEl+0xd8>
    41e0:	2c e6       	ldi	r18, 0x6C	; 108
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	3c 8b       	std	Y+20, r19	; 0x14
    41e6:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    41e8:	98 30       	cpi	r25, 0x08	; 8
    41ea:	30 f4       	brcc	.+12     	; 0x41f8 <_ZN14SoftwareSerial5beginEl+0xec>
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	01 c0       	rjmp	.+2      	; 0x41f2 <_ZN14SoftwareSerial5beginEl+0xe6>
    41f0:	88 0f       	add	r24, r24
    41f2:	9a 95       	dec	r25
    41f4:	ea f7       	brpl	.-6      	; 0x41f0 <_ZN14SoftwareSerial5beginEl+0xe4>
    41f6:	0e c0       	rjmp	.+28     	; 0x4214 <_ZN14SoftwareSerial5beginEl+0x108>
    41f8:	29 2f       	mov	r18, r25
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	9e 30       	cpi	r25, 0x0E	; 14
    41fe:	18 f4       	brcc	.+6      	; 0x4206 <_ZN14SoftwareSerial5beginEl+0xfa>
    4200:	28 50       	subi	r18, 0x08	; 8
    4202:	31 09       	sbc	r19, r1
    4204:	02 c0       	rjmp	.+4      	; 0x420a <_ZN14SoftwareSerial5beginEl+0xfe>
    4206:	2e 50       	subi	r18, 0x0E	; 14
    4208:	31 09       	sbc	r19, r1
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <_ZN14SoftwareSerial5beginEl+0x104>
    420e:	88 0f       	add	r24, r24
    4210:	2a 95       	dec	r18
    4212:	ea f7       	brpl	.-6      	; 0x420e <_ZN14SoftwareSerial5beginEl+0x102>
    4214:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4216:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4218:	9d 8d       	ldd	r25, Y+29	; 0x1d
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    421e:	ce 01       	movw	r24, r28
}
    4220:	df 91       	pop	r29
    4222:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4224:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <_ZN14SoftwareSerial6listenEv>

00004228 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4228:	08 95       	ret

0000422a <__udivmodqi4>:
    422a:	99 1b       	sub	r25, r25
    422c:	79 e0       	ldi	r23, 0x09	; 9
    422e:	04 c0       	rjmp	.+8      	; 0x4238 <__udivmodqi4_ep>

00004230 <__udivmodqi4_loop>:
    4230:	99 1f       	adc	r25, r25
    4232:	96 17       	cp	r25, r22
    4234:	08 f0       	brcs	.+2      	; 0x4238 <__udivmodqi4_ep>
    4236:	96 1b       	sub	r25, r22

00004238 <__udivmodqi4_ep>:
    4238:	88 1f       	adc	r24, r24
    423a:	7a 95       	dec	r23
    423c:	c9 f7       	brne	.-14     	; 0x4230 <__udivmodqi4_loop>
    423e:	80 95       	com	r24
    4240:	08 95       	ret

00004242 <__udivmodhi4>:
    4242:	aa 1b       	sub	r26, r26
    4244:	bb 1b       	sub	r27, r27
    4246:	51 e1       	ldi	r21, 0x11	; 17
    4248:	07 c0       	rjmp	.+14     	; 0x4258 <__udivmodhi4_ep>

0000424a <__udivmodhi4_loop>:
    424a:	aa 1f       	adc	r26, r26
    424c:	bb 1f       	adc	r27, r27
    424e:	a6 17       	cp	r26, r22
    4250:	b7 07       	cpc	r27, r23
    4252:	10 f0       	brcs	.+4      	; 0x4258 <__udivmodhi4_ep>
    4254:	a6 1b       	sub	r26, r22
    4256:	b7 0b       	sbc	r27, r23

00004258 <__udivmodhi4_ep>:
    4258:	88 1f       	adc	r24, r24
    425a:	99 1f       	adc	r25, r25
    425c:	5a 95       	dec	r21
    425e:	a9 f7       	brne	.-22     	; 0x424a <__udivmodhi4_loop>
    4260:	80 95       	com	r24
    4262:	90 95       	com	r25
    4264:	bc 01       	movw	r22, r24
    4266:	cd 01       	movw	r24, r26
    4268:	08 95       	ret

0000426a <__divmodhi4>:
    426a:	97 fb       	bst	r25, 7
    426c:	07 2e       	mov	r0, r23
    426e:	16 f4       	brtc	.+4      	; 0x4274 <__divmodhi4+0xa>
    4270:	00 94       	com	r0
    4272:	07 d0       	rcall	.+14     	; 0x4282 <__divmodhi4_neg1>
    4274:	77 fd       	sbrc	r23, 7
    4276:	09 d0       	rcall	.+18     	; 0x428a <__divmodhi4_neg2>
    4278:	0e 94 21 21 	call	0x4242	; 0x4242 <__udivmodhi4>
    427c:	07 fc       	sbrc	r0, 7
    427e:	05 d0       	rcall	.+10     	; 0x428a <__divmodhi4_neg2>
    4280:	3e f4       	brtc	.+14     	; 0x4290 <__divmodhi4_exit>

00004282 <__divmodhi4_neg1>:
    4282:	90 95       	com	r25
    4284:	81 95       	neg	r24
    4286:	9f 4f       	sbci	r25, 0xFF	; 255
    4288:	08 95       	ret

0000428a <__divmodhi4_neg2>:
    428a:	70 95       	com	r23
    428c:	61 95       	neg	r22
    428e:	7f 4f       	sbci	r23, 0xFF	; 255

00004290 <__divmodhi4_exit>:
    4290:	08 95       	ret

00004292 <__udivmodsi4>:
    4292:	a1 e2       	ldi	r26, 0x21	; 33
    4294:	1a 2e       	mov	r1, r26
    4296:	aa 1b       	sub	r26, r26
    4298:	bb 1b       	sub	r27, r27
    429a:	fd 01       	movw	r30, r26
    429c:	0d c0       	rjmp	.+26     	; 0x42b8 <__udivmodsi4_ep>

0000429e <__udivmodsi4_loop>:
    429e:	aa 1f       	adc	r26, r26
    42a0:	bb 1f       	adc	r27, r27
    42a2:	ee 1f       	adc	r30, r30
    42a4:	ff 1f       	adc	r31, r31
    42a6:	a2 17       	cp	r26, r18
    42a8:	b3 07       	cpc	r27, r19
    42aa:	e4 07       	cpc	r30, r20
    42ac:	f5 07       	cpc	r31, r21
    42ae:	20 f0       	brcs	.+8      	; 0x42b8 <__udivmodsi4_ep>
    42b0:	a2 1b       	sub	r26, r18
    42b2:	b3 0b       	sbc	r27, r19
    42b4:	e4 0b       	sbc	r30, r20
    42b6:	f5 0b       	sbc	r31, r21

000042b8 <__udivmodsi4_ep>:
    42b8:	66 1f       	adc	r22, r22
    42ba:	77 1f       	adc	r23, r23
    42bc:	88 1f       	adc	r24, r24
    42be:	99 1f       	adc	r25, r25
    42c0:	1a 94       	dec	r1
    42c2:	69 f7       	brne	.-38     	; 0x429e <__udivmodsi4_loop>
    42c4:	60 95       	com	r22
    42c6:	70 95       	com	r23
    42c8:	80 95       	com	r24
    42ca:	90 95       	com	r25
    42cc:	9b 01       	movw	r18, r22
    42ce:	ac 01       	movw	r20, r24
    42d0:	bd 01       	movw	r22, r26
    42d2:	cf 01       	movw	r24, r30
    42d4:	08 95       	ret

000042d6 <__divmodsi4>:
    42d6:	05 2e       	mov	r0, r21
    42d8:	97 fb       	bst	r25, 7
    42da:	1e f4       	brtc	.+6      	; 0x42e2 <__divmodsi4+0xc>
    42dc:	00 94       	com	r0
    42de:	0e 94 82 21 	call	0x4304	; 0x4304 <__negsi2>
    42e2:	57 fd       	sbrc	r21, 7
    42e4:	07 d0       	rcall	.+14     	; 0x42f4 <__divmodsi4_neg2>
    42e6:	0e 94 49 21 	call	0x4292	; 0x4292 <__udivmodsi4>
    42ea:	07 fc       	sbrc	r0, 7
    42ec:	03 d0       	rcall	.+6      	; 0x42f4 <__divmodsi4_neg2>
    42ee:	4e f4       	brtc	.+18     	; 0x4302 <__divmodsi4_exit>
    42f0:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__negsi2>

000042f4 <__divmodsi4_neg2>:
    42f4:	50 95       	com	r21
    42f6:	40 95       	com	r20
    42f8:	30 95       	com	r19
    42fa:	21 95       	neg	r18
    42fc:	3f 4f       	sbci	r19, 0xFF	; 255
    42fe:	4f 4f       	sbci	r20, 0xFF	; 255
    4300:	5f 4f       	sbci	r21, 0xFF	; 255

00004302 <__divmodsi4_exit>:
    4302:	08 95       	ret

00004304 <__negsi2>:
    4304:	90 95       	com	r25
    4306:	80 95       	com	r24
    4308:	70 95       	com	r23
    430a:	61 95       	neg	r22
    430c:	7f 4f       	sbci	r23, 0xFF	; 255
    430e:	8f 4f       	sbci	r24, 0xFF	; 255
    4310:	9f 4f       	sbci	r25, 0xFF	; 255
    4312:	08 95       	ret

00004314 <__tablejump2__>:
    4314:	ee 0f       	add	r30, r30
    4316:	ff 1f       	adc	r31, r31
    4318:	05 90       	lpm	r0, Z+
    431a:	f4 91       	lpm	r31, Z
    431c:	e0 2d       	mov	r30, r0
    431e:	09 94       	ijmp

00004320 <malloc>:
    4320:	0f 93       	push	r16
    4322:	1f 93       	push	r17
    4324:	cf 93       	push	r28
    4326:	df 93       	push	r29
    4328:	82 30       	cpi	r24, 0x02	; 2
    432a:	91 05       	cpc	r25, r1
    432c:	10 f4       	brcc	.+4      	; 0x4332 <malloc+0x12>
    432e:	82 e0       	ldi	r24, 0x02	; 2
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <__flp>
    4336:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <__flp+0x1>
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	a0 e0       	ldi	r26, 0x00	; 0
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	30 97       	sbiw	r30, 0x00	; 0
    4344:	19 f1       	breq	.+70     	; 0x438c <malloc+0x6c>
    4346:	40 81       	ld	r20, Z
    4348:	51 81       	ldd	r21, Z+1	; 0x01
    434a:	02 81       	ldd	r16, Z+2	; 0x02
    434c:	13 81       	ldd	r17, Z+3	; 0x03
    434e:	48 17       	cp	r20, r24
    4350:	59 07       	cpc	r21, r25
    4352:	c8 f0       	brcs	.+50     	; 0x4386 <malloc+0x66>
    4354:	84 17       	cp	r24, r20
    4356:	95 07       	cpc	r25, r21
    4358:	69 f4       	brne	.+26     	; 0x4374 <malloc+0x54>
    435a:	10 97       	sbiw	r26, 0x00	; 0
    435c:	31 f0       	breq	.+12     	; 0x436a <malloc+0x4a>
    435e:	12 96       	adiw	r26, 0x02	; 2
    4360:	0c 93       	st	X, r16
    4362:	12 97       	sbiw	r26, 0x02	; 2
    4364:	13 96       	adiw	r26, 0x03	; 3
    4366:	1c 93       	st	X, r17
    4368:	27 c0       	rjmp	.+78     	; 0x43b8 <malloc+0x98>
    436a:	00 93 6d 05 	sts	0x056D, r16	; 0x80056d <__flp>
    436e:	10 93 6e 05 	sts	0x056E, r17	; 0x80056e <__flp+0x1>
    4372:	22 c0       	rjmp	.+68     	; 0x43b8 <malloc+0x98>
    4374:	21 15       	cp	r18, r1
    4376:	31 05       	cpc	r19, r1
    4378:	19 f0       	breq	.+6      	; 0x4380 <malloc+0x60>
    437a:	42 17       	cp	r20, r18
    437c:	53 07       	cpc	r21, r19
    437e:	18 f4       	brcc	.+6      	; 0x4386 <malloc+0x66>
    4380:	9a 01       	movw	r18, r20
    4382:	bd 01       	movw	r22, r26
    4384:	ef 01       	movw	r28, r30
    4386:	df 01       	movw	r26, r30
    4388:	f8 01       	movw	r30, r16
    438a:	db cf       	rjmp	.-74     	; 0x4342 <malloc+0x22>
    438c:	21 15       	cp	r18, r1
    438e:	31 05       	cpc	r19, r1
    4390:	f9 f0       	breq	.+62     	; 0x43d0 <malloc+0xb0>
    4392:	28 1b       	sub	r18, r24
    4394:	39 0b       	sbc	r19, r25
    4396:	24 30       	cpi	r18, 0x04	; 4
    4398:	31 05       	cpc	r19, r1
    439a:	80 f4       	brcc	.+32     	; 0x43bc <malloc+0x9c>
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	9b 81       	ldd	r25, Y+3	; 0x03
    43a0:	61 15       	cp	r22, r1
    43a2:	71 05       	cpc	r23, r1
    43a4:	21 f0       	breq	.+8      	; 0x43ae <malloc+0x8e>
    43a6:	fb 01       	movw	r30, r22
    43a8:	93 83       	std	Z+3, r25	; 0x03
    43aa:	82 83       	std	Z+2, r24	; 0x02
    43ac:	04 c0       	rjmp	.+8      	; 0x43b6 <malloc+0x96>
    43ae:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <__flp+0x1>
    43b2:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <__flp>
    43b6:	fe 01       	movw	r30, r28
    43b8:	32 96       	adiw	r30, 0x02	; 2
    43ba:	44 c0       	rjmp	.+136    	; 0x4444 <malloc+0x124>
    43bc:	fe 01       	movw	r30, r28
    43be:	e2 0f       	add	r30, r18
    43c0:	f3 1f       	adc	r31, r19
    43c2:	81 93       	st	Z+, r24
    43c4:	91 93       	st	Z+, r25
    43c6:	22 50       	subi	r18, 0x02	; 2
    43c8:	31 09       	sbc	r19, r1
    43ca:	39 83       	std	Y+1, r19	; 0x01
    43cc:	28 83       	st	Y, r18
    43ce:	3a c0       	rjmp	.+116    	; 0x4444 <malloc+0x124>
    43d0:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    43d4:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    43d8:	23 2b       	or	r18, r19
    43da:	41 f4       	brne	.+16     	; 0x43ec <malloc+0xcc>
    43dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    43e0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    43e4:	30 93 6c 05 	sts	0x056C, r19	; 0x80056c <__brkval+0x1>
    43e8:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <__brkval>
    43ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    43f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    43f4:	21 15       	cp	r18, r1
    43f6:	31 05       	cpc	r19, r1
    43f8:	41 f4       	brne	.+16     	; 0x440a <malloc+0xea>
    43fa:	2d b7       	in	r18, 0x3d	; 61
    43fc:	3e b7       	in	r19, 0x3e	; 62
    43fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4402:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4406:	24 1b       	sub	r18, r20
    4408:	35 0b       	sbc	r19, r21
    440a:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <__brkval>
    440e:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <__brkval+0x1>
    4412:	e2 17       	cp	r30, r18
    4414:	f3 07       	cpc	r31, r19
    4416:	a0 f4       	brcc	.+40     	; 0x4440 <malloc+0x120>
    4418:	2e 1b       	sub	r18, r30
    441a:	3f 0b       	sbc	r19, r31
    441c:	28 17       	cp	r18, r24
    441e:	39 07       	cpc	r19, r25
    4420:	78 f0       	brcs	.+30     	; 0x4440 <malloc+0x120>
    4422:	ac 01       	movw	r20, r24
    4424:	4e 5f       	subi	r20, 0xFE	; 254
    4426:	5f 4f       	sbci	r21, 0xFF	; 255
    4428:	24 17       	cp	r18, r20
    442a:	35 07       	cpc	r19, r21
    442c:	48 f0       	brcs	.+18     	; 0x4440 <malloc+0x120>
    442e:	4e 0f       	add	r20, r30
    4430:	5f 1f       	adc	r21, r31
    4432:	50 93 6c 05 	sts	0x056C, r21	; 0x80056c <__brkval+0x1>
    4436:	40 93 6b 05 	sts	0x056B, r20	; 0x80056b <__brkval>
    443a:	81 93       	st	Z+, r24
    443c:	91 93       	st	Z+, r25
    443e:	02 c0       	rjmp	.+4      	; 0x4444 <malloc+0x124>
    4440:	e0 e0       	ldi	r30, 0x00	; 0
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	cf 01       	movw	r24, r30
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	08 95       	ret

00004450 <free>:
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	00 97       	sbiw	r24, 0x00	; 0
    4456:	09 f4       	brne	.+2      	; 0x445a <free+0xa>
    4458:	81 c0       	rjmp	.+258    	; 0x455c <free+0x10c>
    445a:	fc 01       	movw	r30, r24
    445c:	32 97       	sbiw	r30, 0x02	; 2
    445e:	13 82       	std	Z+3, r1	; 0x03
    4460:	12 82       	std	Z+2, r1	; 0x02
    4462:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <__flp>
    4466:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <__flp+0x1>
    446a:	10 97       	sbiw	r26, 0x00	; 0
    446c:	81 f4       	brne	.+32     	; 0x448e <free+0x3e>
    446e:	20 81       	ld	r18, Z
    4470:	31 81       	ldd	r19, Z+1	; 0x01
    4472:	82 0f       	add	r24, r18
    4474:	93 1f       	adc	r25, r19
    4476:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    447a:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    447e:	28 17       	cp	r18, r24
    4480:	39 07       	cpc	r19, r25
    4482:	51 f5       	brne	.+84     	; 0x44d8 <free+0x88>
    4484:	f0 93 6c 05 	sts	0x056C, r31	; 0x80056c <__brkval+0x1>
    4488:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <__brkval>
    448c:	67 c0       	rjmp	.+206    	; 0x455c <free+0x10c>
    448e:	ed 01       	movw	r28, r26
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	ce 17       	cp	r28, r30
    4496:	df 07       	cpc	r29, r31
    4498:	40 f4       	brcc	.+16     	; 0x44aa <free+0x5a>
    449a:	4a 81       	ldd	r20, Y+2	; 0x02
    449c:	5b 81       	ldd	r21, Y+3	; 0x03
    449e:	9e 01       	movw	r18, r28
    44a0:	41 15       	cp	r20, r1
    44a2:	51 05       	cpc	r21, r1
    44a4:	f1 f0       	breq	.+60     	; 0x44e2 <free+0x92>
    44a6:	ea 01       	movw	r28, r20
    44a8:	f5 cf       	rjmp	.-22     	; 0x4494 <free+0x44>
    44aa:	d3 83       	std	Z+3, r29	; 0x03
    44ac:	c2 83       	std	Z+2, r28	; 0x02
    44ae:	40 81       	ld	r20, Z
    44b0:	51 81       	ldd	r21, Z+1	; 0x01
    44b2:	84 0f       	add	r24, r20
    44b4:	95 1f       	adc	r25, r21
    44b6:	c8 17       	cp	r28, r24
    44b8:	d9 07       	cpc	r29, r25
    44ba:	59 f4       	brne	.+22     	; 0x44d2 <free+0x82>
    44bc:	88 81       	ld	r24, Y
    44be:	99 81       	ldd	r25, Y+1	; 0x01
    44c0:	84 0f       	add	r24, r20
    44c2:	95 1f       	adc	r25, r21
    44c4:	02 96       	adiw	r24, 0x02	; 2
    44c6:	91 83       	std	Z+1, r25	; 0x01
    44c8:	80 83       	st	Z, r24
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	9b 81       	ldd	r25, Y+3	; 0x03
    44ce:	93 83       	std	Z+3, r25	; 0x03
    44d0:	82 83       	std	Z+2, r24	; 0x02
    44d2:	21 15       	cp	r18, r1
    44d4:	31 05       	cpc	r19, r1
    44d6:	29 f4       	brne	.+10     	; 0x44e2 <free+0x92>
    44d8:	f0 93 6e 05 	sts	0x056E, r31	; 0x80056e <__flp+0x1>
    44dc:	e0 93 6d 05 	sts	0x056D, r30	; 0x80056d <__flp>
    44e0:	3d c0       	rjmp	.+122    	; 0x455c <free+0x10c>
    44e2:	e9 01       	movw	r28, r18
    44e4:	fb 83       	std	Y+3, r31	; 0x03
    44e6:	ea 83       	std	Y+2, r30	; 0x02
    44e8:	49 91       	ld	r20, Y+
    44ea:	59 91       	ld	r21, Y+
    44ec:	c4 0f       	add	r28, r20
    44ee:	d5 1f       	adc	r29, r21
    44f0:	ec 17       	cp	r30, r28
    44f2:	fd 07       	cpc	r31, r29
    44f4:	61 f4       	brne	.+24     	; 0x450e <free+0xbe>
    44f6:	80 81       	ld	r24, Z
    44f8:	91 81       	ldd	r25, Z+1	; 0x01
    44fa:	84 0f       	add	r24, r20
    44fc:	95 1f       	adc	r25, r21
    44fe:	02 96       	adiw	r24, 0x02	; 2
    4500:	e9 01       	movw	r28, r18
    4502:	99 83       	std	Y+1, r25	; 0x01
    4504:	88 83       	st	Y, r24
    4506:	82 81       	ldd	r24, Z+2	; 0x02
    4508:	93 81       	ldd	r25, Z+3	; 0x03
    450a:	9b 83       	std	Y+3, r25	; 0x03
    450c:	8a 83       	std	Y+2, r24	; 0x02
    450e:	e0 e0       	ldi	r30, 0x00	; 0
    4510:	f0 e0       	ldi	r31, 0x00	; 0
    4512:	12 96       	adiw	r26, 0x02	; 2
    4514:	8d 91       	ld	r24, X+
    4516:	9c 91       	ld	r25, X
    4518:	13 97       	sbiw	r26, 0x03	; 3
    451a:	00 97       	sbiw	r24, 0x00	; 0
    451c:	19 f0       	breq	.+6      	; 0x4524 <free+0xd4>
    451e:	fd 01       	movw	r30, r26
    4520:	dc 01       	movw	r26, r24
    4522:	f7 cf       	rjmp	.-18     	; 0x4512 <free+0xc2>
    4524:	8d 91       	ld	r24, X+
    4526:	9c 91       	ld	r25, X
    4528:	11 97       	sbiw	r26, 0x01	; 1
    452a:	9d 01       	movw	r18, r26
    452c:	2e 5f       	subi	r18, 0xFE	; 254
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	82 0f       	add	r24, r18
    4532:	93 1f       	adc	r25, r19
    4534:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    4538:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    453c:	28 17       	cp	r18, r24
    453e:	39 07       	cpc	r19, r25
    4540:	69 f4       	brne	.+26     	; 0x455c <free+0x10c>
    4542:	30 97       	sbiw	r30, 0x00	; 0
    4544:	29 f4       	brne	.+10     	; 0x4550 <free+0x100>
    4546:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__flp+0x1>
    454a:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <__flp>
    454e:	02 c0       	rjmp	.+4      	; 0x4554 <free+0x104>
    4550:	13 82       	std	Z+3, r1	; 0x03
    4552:	12 82       	std	Z+2, r1	; 0x02
    4554:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <__brkval+0x1>
    4558:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <__brkval>
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	08 95       	ret

00004562 <realloc>:
    4562:	a0 e0       	ldi	r26, 0x00	; 0
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	e7 eb       	ldi	r30, 0xB7	; 183
    4568:	f2 e2       	ldi	r31, 0x22	; 34
    456a:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <__prologue_saves__+0x8>
    456e:	ec 01       	movw	r28, r24
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	21 f4       	brne	.+8      	; 0x457c <realloc+0x1a>
    4574:	cb 01       	movw	r24, r22
    4576:	0e 94 90 21 	call	0x4320	; 0x4320 <malloc>
    457a:	b4 c0       	rjmp	.+360    	; 0x46e4 <realloc+0x182>
    457c:	fc 01       	movw	r30, r24
    457e:	e6 0f       	add	r30, r22
    4580:	f7 1f       	adc	r31, r23
    4582:	9c 01       	movw	r18, r24
    4584:	22 50       	subi	r18, 0x02	; 2
    4586:	31 09       	sbc	r19, r1
    4588:	e2 17       	cp	r30, r18
    458a:	f3 07       	cpc	r31, r19
    458c:	08 f4       	brcc	.+2      	; 0x4590 <realloc+0x2e>
    458e:	a8 c0       	rjmp	.+336    	; 0x46e0 <realloc+0x17e>
    4590:	d9 01       	movw	r26, r18
    4592:	0d 91       	ld	r16, X+
    4594:	1c 91       	ld	r17, X
    4596:	11 97       	sbiw	r26, 0x01	; 1
    4598:	06 17       	cp	r16, r22
    459a:	17 07       	cpc	r17, r23
    459c:	b0 f0       	brcs	.+44     	; 0x45ca <realloc+0x68>
    459e:	05 30       	cpi	r16, 0x05	; 5
    45a0:	11 05       	cpc	r17, r1
    45a2:	08 f4       	brcc	.+2      	; 0x45a6 <realloc+0x44>
    45a4:	9b c0       	rjmp	.+310    	; 0x46dc <realloc+0x17a>
    45a6:	c8 01       	movw	r24, r16
    45a8:	04 97       	sbiw	r24, 0x04	; 4
    45aa:	86 17       	cp	r24, r22
    45ac:	97 07       	cpc	r25, r23
    45ae:	08 f4       	brcc	.+2      	; 0x45b2 <realloc+0x50>
    45b0:	95 c0       	rjmp	.+298    	; 0x46dc <realloc+0x17a>
    45b2:	02 50       	subi	r16, 0x02	; 2
    45b4:	11 09       	sbc	r17, r1
    45b6:	06 1b       	sub	r16, r22
    45b8:	17 0b       	sbc	r17, r23
    45ba:	01 93       	st	Z+, r16
    45bc:	11 93       	st	Z+, r17
    45be:	6d 93       	st	X+, r22
    45c0:	7c 93       	st	X, r23
    45c2:	cf 01       	movw	r24, r30
    45c4:	0e 94 28 22 	call	0x4450	; 0x4450 <free>
    45c8:	89 c0       	rjmp	.+274    	; 0x46dc <realloc+0x17a>
    45ca:	5b 01       	movw	r10, r22
    45cc:	a0 1a       	sub	r10, r16
    45ce:	b1 0a       	sbc	r11, r17
    45d0:	4c 01       	movw	r8, r24
    45d2:	80 0e       	add	r8, r16
    45d4:	91 1e       	adc	r9, r17
    45d6:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <__flp>
    45da:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <__flp+0x1>
    45de:	61 2c       	mov	r6, r1
    45e0:	71 2c       	mov	r7, r1
    45e2:	e1 2c       	mov	r14, r1
    45e4:	f1 2c       	mov	r15, r1
    45e6:	10 97       	sbiw	r26, 0x00	; 0
    45e8:	09 f4       	brne	.+2      	; 0x45ec <realloc+0x8a>
    45ea:	46 c0       	rjmp	.+140    	; 0x4678 <realloc+0x116>
    45ec:	8d 91       	ld	r24, X+
    45ee:	9c 91       	ld	r25, X
    45f0:	11 97       	sbiw	r26, 0x01	; 1
    45f2:	a8 15       	cp	r26, r8
    45f4:	b9 05       	cpc	r27, r9
    45f6:	b1 f5       	brne	.+108    	; 0x4664 <realloc+0x102>
    45f8:	6c 01       	movw	r12, r24
    45fa:	42 e0       	ldi	r20, 0x02	; 2
    45fc:	c4 0e       	add	r12, r20
    45fe:	d1 1c       	adc	r13, r1
    4600:	ca 14       	cp	r12, r10
    4602:	db 04       	cpc	r13, r11
    4604:	78 f1       	brcs	.+94     	; 0x4664 <realloc+0x102>
    4606:	4c 01       	movw	r8, r24
    4608:	8a 18       	sub	r8, r10
    460a:	9b 08       	sbc	r9, r11
    460c:	64 01       	movw	r12, r8
    460e:	42 e0       	ldi	r20, 0x02	; 2
    4610:	c4 0e       	add	r12, r20
    4612:	d1 1c       	adc	r13, r1
    4614:	12 96       	adiw	r26, 0x02	; 2
    4616:	bc 90       	ld	r11, X
    4618:	12 97       	sbiw	r26, 0x02	; 2
    461a:	13 96       	adiw	r26, 0x03	; 3
    461c:	ac 91       	ld	r26, X
    461e:	b5 e0       	ldi	r27, 0x05	; 5
    4620:	cb 16       	cp	r12, r27
    4622:	d1 04       	cpc	r13, r1
    4624:	40 f0       	brcs	.+16     	; 0x4636 <realloc+0xd4>
    4626:	b2 82       	std	Z+2, r11	; 0x02
    4628:	a3 83       	std	Z+3, r26	; 0x03
    462a:	91 82       	std	Z+1, r9	; 0x01
    462c:	80 82       	st	Z, r8
    462e:	d9 01       	movw	r26, r18
    4630:	6d 93       	st	X+, r22
    4632:	7c 93       	st	X, r23
    4634:	09 c0       	rjmp	.+18     	; 0x4648 <realloc+0xe6>
    4636:	0e 5f       	subi	r16, 0xFE	; 254
    4638:	1f 4f       	sbci	r17, 0xFF	; 255
    463a:	80 0f       	add	r24, r16
    463c:	91 1f       	adc	r25, r17
    463e:	f9 01       	movw	r30, r18
    4640:	91 83       	std	Z+1, r25	; 0x01
    4642:	80 83       	st	Z, r24
    4644:	eb 2d       	mov	r30, r11
    4646:	fa 2f       	mov	r31, r26
    4648:	e1 14       	cp	r14, r1
    464a:	f1 04       	cpc	r15, r1
    464c:	31 f0       	breq	.+12     	; 0x465a <realloc+0xf8>
    464e:	d7 01       	movw	r26, r14
    4650:	13 96       	adiw	r26, 0x03	; 3
    4652:	fc 93       	st	X, r31
    4654:	ee 93       	st	-X, r30
    4656:	12 97       	sbiw	r26, 0x02	; 2
    4658:	41 c0       	rjmp	.+130    	; 0x46dc <realloc+0x17a>
    465a:	f0 93 6e 05 	sts	0x056E, r31	; 0x80056e <__flp+0x1>
    465e:	e0 93 6d 05 	sts	0x056D, r30	; 0x80056d <__flp>
    4662:	3c c0       	rjmp	.+120    	; 0x46dc <realloc+0x17a>
    4664:	68 16       	cp	r6, r24
    4666:	79 06       	cpc	r7, r25
    4668:	08 f4       	brcc	.+2      	; 0x466c <realloc+0x10a>
    466a:	3c 01       	movw	r6, r24
    466c:	7d 01       	movw	r14, r26
    466e:	12 96       	adiw	r26, 0x02	; 2
    4670:	0d 90       	ld	r0, X+
    4672:	bc 91       	ld	r27, X
    4674:	a0 2d       	mov	r26, r0
    4676:	b7 cf       	rjmp	.-146    	; 0x45e6 <realloc+0x84>
    4678:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <__brkval>
    467c:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <__brkval+0x1>
    4680:	88 16       	cp	r8, r24
    4682:	99 06       	cpc	r9, r25
    4684:	e1 f4       	brne	.+56     	; 0x46be <realloc+0x15c>
    4686:	66 16       	cp	r6, r22
    4688:	77 06       	cpc	r7, r23
    468a:	c8 f4       	brcc	.+50     	; 0x46be <realloc+0x15c>
    468c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4690:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	41 f4       	brne	.+16     	; 0x46a8 <realloc+0x146>
    4698:	8d b7       	in	r24, 0x3d	; 61
    469a:	9e b7       	in	r25, 0x3e	; 62
    469c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    46a0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    46a4:	84 1b       	sub	r24, r20
    46a6:	95 0b       	sbc	r25, r21
    46a8:	e8 17       	cp	r30, r24
    46aa:	f9 07       	cpc	r31, r25
    46ac:	c8 f4       	brcc	.+50     	; 0x46e0 <realloc+0x17e>
    46ae:	f0 93 6c 05 	sts	0x056C, r31	; 0x80056c <__brkval+0x1>
    46b2:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <__brkval>
    46b6:	f9 01       	movw	r30, r18
    46b8:	71 83       	std	Z+1, r23	; 0x01
    46ba:	60 83       	st	Z, r22
    46bc:	0f c0       	rjmp	.+30     	; 0x46dc <realloc+0x17a>
    46be:	cb 01       	movw	r24, r22
    46c0:	0e 94 90 21 	call	0x4320	; 0x4320 <malloc>
    46c4:	7c 01       	movw	r14, r24
    46c6:	00 97       	sbiw	r24, 0x00	; 0
    46c8:	59 f0       	breq	.+22     	; 0x46e0 <realloc+0x17e>
    46ca:	a8 01       	movw	r20, r16
    46cc:	be 01       	movw	r22, r28
    46ce:	0e 94 c1 23 	call	0x4782	; 0x4782 <memcpy>
    46d2:	ce 01       	movw	r24, r28
    46d4:	0e 94 28 22 	call	0x4450	; 0x4450 <free>
    46d8:	c7 01       	movw	r24, r14
    46da:	04 c0       	rjmp	.+8      	; 0x46e4 <realloc+0x182>
    46dc:	ce 01       	movw	r24, r28
    46de:	02 c0       	rjmp	.+4      	; 0x46e4 <realloc+0x182>
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
    46e8:	ee e0       	ldi	r30, 0x0E	; 14
    46ea:	0c 94 04 24 	jmp	0x4808	; 0x4808 <__epilogue_restores__+0x8>

000046ee <atoi>:
    46ee:	fc 01       	movw	r30, r24
    46f0:	88 27       	eor	r24, r24
    46f2:	99 27       	eor	r25, r25
    46f4:	e8 94       	clt
    46f6:	21 91       	ld	r18, Z+
    46f8:	20 32       	cpi	r18, 0x20	; 32
    46fa:	e9 f3       	breq	.-6      	; 0x46f6 <atoi+0x8>
    46fc:	29 30       	cpi	r18, 0x09	; 9
    46fe:	10 f0       	brcs	.+4      	; 0x4704 <atoi+0x16>
    4700:	2e 30       	cpi	r18, 0x0E	; 14
    4702:	c8 f3       	brcs	.-14     	; 0x46f6 <atoi+0x8>
    4704:	2b 32       	cpi	r18, 0x2B	; 43
    4706:	41 f0       	breq	.+16     	; 0x4718 <atoi+0x2a>
    4708:	2d 32       	cpi	r18, 0x2D	; 45
    470a:	39 f4       	brne	.+14     	; 0x471a <atoi+0x2c>
    470c:	68 94       	set
    470e:	04 c0       	rjmp	.+8      	; 0x4718 <atoi+0x2a>
    4710:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__mulhi_const_10>
    4714:	82 0f       	add	r24, r18
    4716:	91 1d       	adc	r25, r1
    4718:	21 91       	ld	r18, Z+
    471a:	20 53       	subi	r18, 0x30	; 48
    471c:	2a 30       	cpi	r18, 0x0A	; 10
    471e:	c0 f3       	brcs	.-16     	; 0x4710 <atoi+0x22>
    4720:	1e f4       	brtc	.+6      	; 0x4728 <atoi+0x3a>
    4722:	90 95       	com	r25
    4724:	81 95       	neg	r24
    4726:	9f 4f       	sbci	r25, 0xFF	; 255
    4728:	08 95       	ret

0000472a <strcmp_P>:
    472a:	fb 01       	movw	r30, r22
    472c:	dc 01       	movw	r26, r24
    472e:	8d 91       	ld	r24, X+
    4730:	05 90       	lpm	r0, Z+
    4732:	80 19       	sub	r24, r0
    4734:	01 10       	cpse	r0, r1
    4736:	d9 f3       	breq	.-10     	; 0x472e <strcmp_P+0x4>
    4738:	99 0b       	sbc	r25, r25
    473a:	08 95       	ret

0000473c <__strlen_P>:
    473c:	fc 01       	movw	r30, r24
    473e:	05 90       	lpm	r0, Z+
    4740:	00 20       	and	r0, r0
    4742:	e9 f7       	brne	.-6      	; 0x473e <__strlen_P+0x2>
    4744:	80 95       	com	r24
    4746:	90 95       	com	r25
    4748:	8e 0f       	add	r24, r30
    474a:	9f 1f       	adc	r25, r31
    474c:	08 95       	ret

0000474e <strstr_P>:
    474e:	fb 01       	movw	r30, r22
    4750:	55 91       	lpm	r21, Z+
    4752:	55 23       	and	r21, r21
    4754:	a9 f0       	breq	.+42     	; 0x4780 <strstr_P+0x32>
    4756:	bf 01       	movw	r22, r30
    4758:	dc 01       	movw	r26, r24
    475a:	4d 91       	ld	r20, X+
    475c:	45 17       	cp	r20, r21
    475e:	41 11       	cpse	r20, r1
    4760:	e1 f7       	brne	.-8      	; 0x475a <strstr_P+0xc>
    4762:	59 f4       	brne	.+22     	; 0x477a <strstr_P+0x2c>
    4764:	cd 01       	movw	r24, r26
    4766:	05 90       	lpm	r0, Z+
    4768:	00 20       	and	r0, r0
    476a:	49 f0       	breq	.+18     	; 0x477e <strstr_P+0x30>
    476c:	4d 91       	ld	r20, X+
    476e:	40 15       	cp	r20, r0
    4770:	41 11       	cpse	r20, r1
    4772:	c9 f3       	breq	.-14     	; 0x4766 <strstr_P+0x18>
    4774:	fb 01       	movw	r30, r22
    4776:	41 11       	cpse	r20, r1
    4778:	ef cf       	rjmp	.-34     	; 0x4758 <strstr_P+0xa>
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	01 97       	sbiw	r24, 0x01	; 1
    4780:	08 95       	ret

00004782 <memcpy>:
    4782:	fb 01       	movw	r30, r22
    4784:	dc 01       	movw	r26, r24
    4786:	02 c0       	rjmp	.+4      	; 0x478c <memcpy+0xa>
    4788:	01 90       	ld	r0, Z+
    478a:	0d 92       	st	X+, r0
    478c:	41 50       	subi	r20, 0x01	; 1
    478e:	50 40       	sbci	r21, 0x00	; 0
    4790:	d8 f7       	brcc	.-10     	; 0x4788 <memcpy+0x6>
    4792:	08 95       	ret

00004794 <strchr>:
    4794:	fc 01       	movw	r30, r24
    4796:	81 91       	ld	r24, Z+
    4798:	86 17       	cp	r24, r22
    479a:	21 f0       	breq	.+8      	; 0x47a4 <strchr+0x10>
    479c:	88 23       	and	r24, r24
    479e:	d9 f7       	brne	.-10     	; 0x4796 <strchr+0x2>
    47a0:	99 27       	eor	r25, r25
    47a2:	08 95       	ret
    47a4:	31 97       	sbiw	r30, 0x01	; 1
    47a6:	cf 01       	movw	r24, r30
    47a8:	08 95       	ret

000047aa <strcpy>:
    47aa:	fb 01       	movw	r30, r22
    47ac:	dc 01       	movw	r26, r24
    47ae:	01 90       	ld	r0, Z+
    47b0:	0d 92       	st	X+, r0
    47b2:	00 20       	and	r0, r0
    47b4:	e1 f7       	brne	.-8      	; 0x47ae <strcpy+0x4>
    47b6:	08 95       	ret

000047b8 <__mulhi_const_10>:
    47b8:	7a e0       	ldi	r23, 0x0A	; 10
    47ba:	97 9f       	mul	r25, r23
    47bc:	90 2d       	mov	r25, r0
    47be:	87 9f       	mul	r24, r23
    47c0:	80 2d       	mov	r24, r0
    47c2:	91 0d       	add	r25, r1
    47c4:	11 24       	eor	r1, r1
    47c6:	08 95       	ret

000047c8 <__prologue_saves__>:
    47c8:	2f 92       	push	r2
    47ca:	3f 92       	push	r3
    47cc:	4f 92       	push	r4
    47ce:	5f 92       	push	r5
    47d0:	6f 92       	push	r6
    47d2:	7f 92       	push	r7
    47d4:	8f 92       	push	r8
    47d6:	9f 92       	push	r9
    47d8:	af 92       	push	r10
    47da:	bf 92       	push	r11
    47dc:	cf 92       	push	r12
    47de:	df 92       	push	r13
    47e0:	ef 92       	push	r14
    47e2:	ff 92       	push	r15
    47e4:	0f 93       	push	r16
    47e6:	1f 93       	push	r17
    47e8:	cf 93       	push	r28
    47ea:	df 93       	push	r29
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
    47f0:	ca 1b       	sub	r28, r26
    47f2:	db 0b       	sbc	r29, r27
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	09 94       	ijmp

00004800 <__epilogue_restores__>:
    4800:	2a 88       	ldd	r2, Y+18	; 0x12
    4802:	39 88       	ldd	r3, Y+17	; 0x11
    4804:	48 88       	ldd	r4, Y+16	; 0x10
    4806:	5f 84       	ldd	r5, Y+15	; 0x0f
    4808:	6e 84       	ldd	r6, Y+14	; 0x0e
    480a:	7d 84       	ldd	r7, Y+13	; 0x0d
    480c:	8c 84       	ldd	r8, Y+12	; 0x0c
    480e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4810:	aa 84       	ldd	r10, Y+10	; 0x0a
    4812:	b9 84       	ldd	r11, Y+9	; 0x09
    4814:	c8 84       	ldd	r12, Y+8	; 0x08
    4816:	df 80       	ldd	r13, Y+7	; 0x07
    4818:	ee 80       	ldd	r14, Y+6	; 0x06
    481a:	fd 80       	ldd	r15, Y+5	; 0x05
    481c:	0c 81       	ldd	r16, Y+4	; 0x04
    481e:	1b 81       	ldd	r17, Y+3	; 0x03
    4820:	aa 81       	ldd	r26, Y+2	; 0x02
    4822:	b9 81       	ldd	r27, Y+1	; 0x01
    4824:	ce 0f       	add	r28, r30
    4826:	d1 1d       	adc	r29, r1
    4828:	0f b6       	in	r0, 0x3f	; 63
    482a:	f8 94       	cli
    482c:	de bf       	out	0x3e, r29	; 62
    482e:	0f be       	out	0x3f, r0	; 63
    4830:	cd bf       	out	0x3d, r28	; 61
    4832:	ed 01       	movw	r28, r26
    4834:	08 95       	ret

00004836 <__do_global_dtors>:
    4836:	14 e0       	ldi	r17, 0x04	; 4
    4838:	c8 e2       	ldi	r28, 0x28	; 40
    483a:	d4 e0       	ldi	r29, 0x04	; 4
    483c:	04 c0       	rjmp	.+8      	; 0x4846 <__do_global_dtors+0x10>
    483e:	fe 01       	movw	r30, r28
    4840:	0e 94 8a 21 	call	0x4314	; 0x4314 <__tablejump2__>
    4844:	21 96       	adiw	r28, 0x01	; 1
    4846:	c9 32       	cpi	r28, 0x29	; 41
    4848:	d1 07       	cpc	r29, r17
    484a:	c9 f7       	brne	.-14     	; 0x483e <__do_global_dtors+0x8>
    484c:	f8 94       	cli

0000484e <__stop_program>:
    484e:	ff cf       	rjmp	.-2      	; 0x484e <__stop_program>
