
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00004598  0000462c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ef  008001ce  008001ce  000046fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000046fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000472c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce0  00000000  00000000  0000476c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000201ee  00000000  00000000  0000544c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048d7  00000000  00000000  0002563a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000701b  00000000  00000000  00029f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f7c  00000000  00000000  00030f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c58  00000000  00000000  00033ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001111d  00000000  00000000  00039b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb0  00000000  00000000  0004ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__dtors_end>
       4:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
       8:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
       c:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_3>
      10:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_3>
      14:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_3>
      18:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      1c:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      20:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      24:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      28:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      2c:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      30:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      34:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      38:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      3c:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      40:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__vector_16>
      44:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      48:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__vector_18>
      4c:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__vector_19>
      50:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      54:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      58:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      5c:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>
      60:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__vector_24>
      64:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
      9f:	52 45 44 49 52 00                                   REDIR.

000000a5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
      a5:	55 52 4c 00                                         URL.

000000a9 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
      a9:	55 41 00                                            UA.

000000ac <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
      ac:	43 49 44 00                                         CID.

000000b0 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_8>:
      b0:	4c 65 6e 3a 20 00                                   Len: .

000000b6 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_7>:
      b6:	53 74 61 74 75 73 3a 20 00                          Status: .

000000bf <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_6>:
      bf:	53 54 45 50 20 37 00                                STEP 7.

000000c6 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_5>:
      c6:	53 54 45 50 20 36 00                                STEP 6.

000000cd <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_4>:
      cd:	53 54 45 50 20 35 00                                STEP 5.

000000d4 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_3>:
      d4:	53 54 45 50 20 34 00                                STEP 4.

000000db <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_2>:
      db:	53 54 45 50 20 33 00                                STEP 3.

000000e2 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
      e2:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000ea <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
      ea:	53 54 45 50 20 32 00                                STEP 2.

000000f1 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
      f1:	53 54 45 50 20 31 00                                STEP 1.

000000f8 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
      f8:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

00000104 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     104:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000010f <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     10f:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

0000011b <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     11b:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000128 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     128:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000135 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     135:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000144 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     144:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000014d <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     14d:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000015a <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     15a:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000167 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     167:	09 2d 2d 2d 3e 20 00                                .---> .

0000016e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     16e:	22 2c 00                                            ",.

00000171 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     171:	22 2c 22 00                                         ",".

00000175 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     175:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000183 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     183:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000191 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     191:	09 2d 2d 2d 3e 20 00                                .---> .

00000198 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     198:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

000001a4 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     1a4:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000001b0 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c>:
     1b0:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000001bb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     1bb:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001c6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     1c6:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000001d3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     1d3:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000001de <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     1de:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000001e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     1e6:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000001ef <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     1ef:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000001fc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     1fc:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     20c:	44 22 2c 00                                         D",.

00000210 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     210:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     220:	45 52 22 2c 00                                      ER",.

00000225 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     225:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000022f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     22f:	09 2d 2d 2d 3e 20 00                                .---> .

00000236 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     236:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000240 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     240:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     250:	4e 22 2c 00                                         N",.

00000254 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     254:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     264:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000272 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     272:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000027d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     27d:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000288 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     288:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000290 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     290:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000299 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     299:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002a1 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     2a1:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002aa <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     2aa:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002b2 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     2b2:	41 54 2b 43 53 51 00                                AT+CSQ.

000002b9 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     2b9:	2b 43 53 51 3a 20 00                                +CSQ: .

000002c0 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     2c0:	41 54 2b 43 53 51 00                                AT+CSQ.

000002c7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     2c7:	2b 43 53 51 3a 20 00                                +CSQ: .

000002ce <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     2ce:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000002d9 <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     2d9:	09 3c 2d 2d 2d 20 00                                .<--- .

000002e0 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     2e0:	09 2d 2d 2d 3e 20 00                                .---> .

000002e7 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     2e7:	41 54 45 30 00                                      ATE0.

000002ec <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     2ec:	41 54 45 30 00                                      ATE0.

000002f1 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     2f1:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     301:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

00000310 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     310:	41 54 00                                            AT.

00000313 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     313:	41 54 00                                            AT.

00000316 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     316:	41 54 00                                            AT.

00000319 <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     319:	41 54 00                                            AT.

0000031c <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     31c:	41 54 00                                            AT.

0000031f <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     31f:	41 54 00                                            AT.

00000322 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     322:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     332:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000343 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     343:	4f 4b 00                                            OK.

00000346 <_ZZN13Adafruit_FONAC4EabE3__c>:
     346:	46 4f 4e 41 6e 65 74 00                             FONAnet.

0000034e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     34e:	45 72 72 6f 72 3d 00                                Error=.

00000355 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     355:	20 7c 20 00                                          | .

00000359 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     359:	54 65 6d 70 3d 00                                   Temp=.

0000035f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     35f:	20 7c 20 00                                          | .

00000363 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     363:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000036c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     36c:	20 7c 20 00                                          | .

00000370 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     370:	50 56 2d 56 3d 00                                   PV-V=.

00000376 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     376:	20 7c 20 00                                          | .

0000037a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     37a:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000382 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     382:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

0000038f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     38f:	20 7c 20 00                                          | .

00000393 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     393:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000039c <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     39c:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

000003a6 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     3a6:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     3b6:	6f 64 65 3d 00                                      ode=.

000003bb <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     3bb:	20 7c 20 00                                          | .

000003bf <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     3bf:	42 45 52 3d 00                                      BER=.

000003c4 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     3c4:	20 7c 20 00                                          | .

000003c8 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     3c8:	52 53 53 49 3d 00                                   RSSI=.

000003ce <_ZL12b64_alphabet>:
     3ce:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     3de:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     3ee:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     3fe:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

0000040f <_ZZ4loopE3__c>:
     40f:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

00000419 <_ZZ8sendDatavE3__c_2>:
     419:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     429:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     439:	6f 72 20 73 65 6e 64 3a 00                          or send:.

00000442 <_ZZ8sendDatavE3__c_1>:
     442:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     452:	52 29 00                                            R).

00000455 <_ZZ8sendDatavE3__c_0>:
     455:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     465:	69 6e 67 2e 2e 2e 29 00                             ing...).

0000046d <_ZZ8sendDatavE3__c>:
     46d:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     47d:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

0000048c <_ZZ12takeReadingsvE3__c>:
     48c:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     49c:	2e 2e 00                                            ...

0000049f <_ZZ21ensureFonaInitialisedbPbE3__c_10>:
     49f:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 46 61 69     . (Good-RSSI Fai
     4af:	6c 65 64 20 2d 20 77 69 6c 6c 20 63 68 65 63 6b     led - will check
     4bf:	20 61 67 61 69 6e 20 61 66 74 65 72 20 69 6e 74      again after int
     4cf:	65 72 76 61 6c 29 00                                erval).

000004d6 <_ZZ21ensureFonaInitialisedbPbE3__c_9>:
     4d6:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     4e6:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     4f6:	64 6f 6e 65 29 00                                   done).

000004fc <_ZZ21ensureFonaInitialisedbPbE3__c_8>:
     4fc:	43 68 65 63 6b 69 6e 67 20 47 6f 6f 64 2d 52 53     Checking Good-RS
     50c:	53 49 20 2d 20 63 75 72 72 65 6e 74 6c 79 3a 00     SI - currently:.

0000051c <_ZZ21ensureFonaInitialisedbPbE3__c_7>:
     51c:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 57 61 69     . (Good-RSSI Wai
     52c:	74 20 54 69 6d 65 64 20 4f 75 74 20 2d 20 77 69     t Timed Out - wi
     53c:	6c 6c 20 63 6f 6e 74 69 6e 75 65 20 72 65 67 61     ll continue rega
     54c:	72 64 6c 65 73 73 20 6e 6f 77 29 00                 rdless now).

00000558 <_ZZ21ensureFonaInitialisedbPbE3__c_6>:
     558:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     568:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000578 <_ZZ21ensureFonaInitialisedbPbE3__c_5>:
     578:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     588:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     598:	65 64 00                                            ed.

0000059b <_ZZ21ensureFonaInitialisedbPbE3__c_4>:
     59b:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     5ab:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     5bb:	6f 72 74 6c 79 00                                   ortly.

000005c1 <_ZZ21ensureFonaInitialisedbPbE3__c_3>:
     5c1:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     5d1:	6e 67 20 47 50 52 53 2e 2e 2e 00                    ng GPRS....

000005dc <_ZZ21ensureFonaInitialisedbPbE3__c_2>:
     5dc:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     5ec:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

000005f9 <_ZZ21ensureFonaInitialisedbPbE3__c_1>:
     5f9:	5f 5f 47 50 52 53 5f 4f 56 45 52 5f 4d 41 58 5f     __GPRS_OVER_MAX_
     609:	53 48 4f 55 4c 44 5f 4e 45 56 45 52 5f 4f 43 43     SHOULD_NEVER_OCC
     619:	55 52 5f 5f 00                                      UR__.

0000061e <_ZZ21ensureFonaInitialisedbPbE3__c_0>:
     61e:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     62e:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000639 <_ZZ21ensureFonaInitialisedbPbE3__c>:
     639:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     649:	61 2e 2e 2e 00                                      a....

0000064e <_ZZ5setupE3__c>:
     64e:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

0000065a <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_1>:
     65a:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     66a:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     67a:	73 73 69 6f 6e 3a 00                                ssion:.

00000681 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     681:	2a 2a 2a 2a 00                                      ****.

00000686 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     686:	54 45 53 54 3a 20 43 68 65 63 6b 69 6e 67 20 72     TEST: Checking r
     696:	73 73 69 2e 2e 2e 00                                ssi....

0000069d <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     69d:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     6ad:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     6bd:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     6cd:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

000006d8 <digital_pin_to_timer_PGM>:
     6d8:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     6e8:	00 00 00 00                                         ....

000006ec <digital_pin_to_bit_mask_PGM>:
     6ec:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6fc:	04 08 10 20                                         ... 

00000700 <digital_pin_to_port_PGM>:
     700:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     710:	03 03 03 03                                         ....

00000714 <port_to_input_PGM>:
     714:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000071e <port_to_output_PGM>:
     71e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000728 <port_to_mode_PGM>:
     728:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000732 <__ctors_start>:
     732:	3a 12       	cpse	r3, r26
     734:	e1 16       	cp	r14, r17
     736:	d7 18       	sub	r13, r7

00000738 <__ctors_end>:
     738:	50 12       	cpse	r5, r16

0000073a <__dtors_end>:
     73a:	11 24       	eor	r1, r1
     73c:	1f be       	out	0x3f, r1	; 63
     73e:	cf ef       	ldi	r28, 0xFF	; 255
     740:	d8 e0       	ldi	r29, 0x08	; 8
     742:	de bf       	out	0x3e, r29	; 62
     744:	cd bf       	out	0x3d, r28	; 61

00000746 <__do_copy_data>:
     746:	11 e0       	ldi	r17, 0x01	; 1
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b1 e0       	ldi	r27, 0x01	; 1
     74c:	e8 e9       	ldi	r30, 0x98	; 152
     74e:	f5 e4       	ldi	r31, 0x45	; 69
     750:	02 c0       	rjmp	.+4      	; 0x756 <__do_copy_data+0x10>
     752:	05 90       	lpm	r0, Z+
     754:	0d 92       	st	X+, r0
     756:	ae 3c       	cpi	r26, 0xCE	; 206
     758:	b1 07       	cpc	r27, r17
     75a:	d9 f7       	brne	.-10     	; 0x752 <__do_copy_data+0xc>

0000075c <__do_clear_bss>:
     75c:	24 e0       	ldi	r18, 0x04	; 4
     75e:	ae ec       	ldi	r26, 0xCE	; 206
     760:	b1 e0       	ldi	r27, 0x01	; 1
     762:	01 c0       	rjmp	.+2      	; 0x766 <.do_clear_bss_start>

00000764 <.do_clear_bss_loop>:
     764:	1d 92       	st	X+, r1

00000766 <.do_clear_bss_start>:
     766:	ad 3b       	cpi	r26, 0xBD	; 189
     768:	b2 07       	cpc	r27, r18
     76a:	e1 f7       	brne	.-8      	; 0x764 <.do_clear_bss_loop>

0000076c <__do_global_ctors>:
     76c:	13 e0       	ldi	r17, 0x03	; 3
     76e:	cc e9       	ldi	r28, 0x9C	; 156
     770:	d3 e0       	ldi	r29, 0x03	; 3
     772:	04 c0       	rjmp	.+8      	; 0x77c <__do_global_ctors+0x10>
     774:	21 97       	sbiw	r28, 0x01	; 1
     776:	fe 01       	movw	r30, r28
     778:	0e 94 2e 20 	call	0x405c	; 0x405c <__tablejump2__>
     77c:	c9 39       	cpi	r28, 0x99	; 153
     77e:	d1 07       	cpc	r29, r17
     780:	c9 f7       	brne	.-14     	; 0x774 <__do_global_ctors+0x8>
     782:	0e 94 05 19 	call	0x320a	; 0x320a <main>
     786:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__do_global_dtors>

0000078a <__bad_interrupt>:
     78a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000078e <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     78e:	83 5e       	subi	r24, 0xE3	; 227
     790:	9e 4f       	sbci	r25, 0xFE	; 254
     792:	dc 01       	movw	r26, r24
     794:	8d 91       	ld	r24, X+
     796:	9c 91       	ld	r25, X
     798:	dc 01       	movw	r26, r24
     79a:	ed 91       	ld	r30, X+
     79c:	fc 91       	ld	r31, X
     79e:	04 80       	ldd	r0, Z+4	; 0x04
     7a0:	f5 81       	ldd	r31, Z+5	; 0x05
     7a2:	e0 2d       	mov	r30, r0
     7a4:	09 94       	ijmp

000007a6 <_ZN13Adafruit_FONA5writeEh>:
     7a6:	83 5e       	subi	r24, 0xE3	; 227
     7a8:	9e 4f       	sbci	r25, 0xFE	; 254
     7aa:	dc 01       	movw	r26, r24
     7ac:	8d 91       	ld	r24, X+
     7ae:	9c 91       	ld	r25, X
     7b0:	dc 01       	movw	r26, r24
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	01 90       	ld	r0, Z+
     7b8:	f0 81       	ld	r31, Z
     7ba:	e0 2d       	mov	r30, r0
     7bc:	09 94       	ijmp

000007be <_ZN13Adafruit_FONA4readEv>:
     7be:	83 5e       	subi	r24, 0xE3	; 227
     7c0:	9e 4f       	sbci	r25, 0xFE	; 254
     7c2:	dc 01       	movw	r26, r24
     7c4:	8d 91       	ld	r24, X+
     7c6:	9c 91       	ld	r25, X
     7c8:	dc 01       	movw	r26, r24
     7ca:	ed 91       	ld	r30, X+
     7cc:	fc 91       	ld	r31, X
     7ce:	06 80       	ldd	r0, Z+6	; 0x06
     7d0:	f7 81       	ldd	r31, Z+7	; 0x07
     7d2:	e0 2d       	mov	r30, r0
     7d4:	09 94       	ijmp

000007d6 <_ZN13Adafruit_FONA4peekEv>:
     7d6:	83 5e       	subi	r24, 0xE3	; 227
     7d8:	9e 4f       	sbci	r25, 0xFE	; 254
     7da:	dc 01       	movw	r26, r24
     7dc:	8d 91       	ld	r24, X+
     7de:	9c 91       	ld	r25, X
     7e0:	dc 01       	movw	r26, r24
     7e2:	ed 91       	ld	r30, X+
     7e4:	fc 91       	ld	r31, X
     7e6:	00 84       	ldd	r0, Z+8	; 0x08
     7e8:	f1 85       	ldd	r31, Z+9	; 0x09
     7ea:	e0 2d       	mov	r30, r0
     7ec:	09 94       	ijmp

000007ee <_ZN13Adafruit_FONA5flushEv>:
     7ee:	83 5e       	subi	r24, 0xE3	; 227
     7f0:	9e 4f       	sbci	r25, 0xFE	; 254
     7f2:	dc 01       	movw	r26, r24
     7f4:	8d 91       	ld	r24, X+
     7f6:	9c 91       	ld	r25, X
     7f8:	dc 01       	movw	r26, r24
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	02 84       	ldd	r0, Z+10	; 0x0a
     800:	f3 85       	ldd	r31, Z+11	; 0x0b
     802:	e0 2d       	mov	r30, r0
     804:	09 94       	ijmp

00000806 <_ZN13Adafruit_FONAC1Eab>:
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <_ZN13Adafruit_FONAC1Eab+0x12>
     818:	00 d0       	rcall	.+0      	; 0x81a <_ZN13Adafruit_FONAC1Eab+0x14>
     81a:	00 d0       	rcall	.+0      	; 0x81c <_ZN13Adafruit_FONAC1Eab+0x16>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	8c 01       	movw	r16, r24
     822:	c6 2e       	mov	r12, r22
     824:	d4 2e       	mov	r13, r20
     826:	fc 01       	movw	r30, r24
     828:	13 82       	std	Z+3, r1	; 0x03
     82a:	12 82       	std	Z+2, r1	; 0x02
     82c:	88 ee       	ldi	r24, 0xE8	; 232
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	84 83       	std	Z+4, r24	; 0x04
     836:	95 83       	std	Z+5, r25	; 0x05
     838:	a6 83       	std	Z+6, r26	; 0x06
     83a:	b7 83       	std	Z+7, r27	; 0x07
     83c:	82 e6       	ldi	r24, 0x62	; 98
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	91 83       	std	Z+1, r25	; 0x01
     842:	80 83       	st	Z, r24
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	86 87       	std	Z+14, r24	; 0x0e
     848:	78 01       	movw	r14, r16
     84a:	fb ee       	ldi	r31, 0xEB	; 235
     84c:	ef 1a       	sub	r14, r31
     84e:	fe ef       	ldi	r31, 0xFE	; 254
     850:	ff 0a       	sbc	r15, r31
     852:	61 eb       	ldi	r22, 0xB1	; 177
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	c7 01       	movw	r24, r14
     858:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <_ZN6StringC1EPKc>
     85c:	f8 01       	movw	r30, r16
     85e:	c4 86       	std	Z+12, r12	; 0x0c
     860:	d5 86       	std	Z+13, r13	; 0x0d
     862:	e2 5f       	subi	r30, 0xF2	; 242
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	86 e4       	ldi	r24, 0x46	; 70
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	91 83       	std	Z+1, r25	; 0x01
     86c:	80 83       	st	Z, r24
     86e:	32 96       	adiw	r30, 0x02	; 2
     870:	11 82       	std	Z+1, r1	; 0x01
     872:	10 82       	st	Z, r1
     874:	32 96       	adiw	r30, 0x02	; 2
     876:	11 82       	std	Z+1, r1	; 0x01
     878:	10 82       	st	Z, r1
     87a:	3b 96       	adiw	r30, 0x0b	; 11
     87c:	11 82       	std	Z+1, r1	; 0x01
     87e:	10 82       	st	Z, r1
     880:	39 97       	sbiw	r30, 0x09	; 9
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 83       	st	Z, r24
     886:	67 e0       	ldi	r22, 0x07	; 7
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	ce 01       	movw	r24, r28
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <_ZN6StringC1EPKc>
     892:	be 01       	movw	r22, r28
     894:	6f 5f       	subi	r22, 0xFF	; 255
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	c7 01       	movw	r24, r14
     89a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN6StringaSEOS_>
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	0e 94 6d 1c 	call	0x38da	; 0x38da <_ZN6StringD1Ev>
     8a6:	f8 01       	movw	r30, r16
     8a8:	e5 5e       	subi	r30, 0xE5	; 229
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	83 e4       	ldi	r24, 0x43	; 67
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
     8b4:	26 96       	adiw	r28, 0x06	; 6
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	08 95       	ret

000008d2 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     8d2:	8b 5e       	subi	r24, 0xEB	; 235
     8d4:	9e 4f       	sbci	r25, 0xFE	; 254
     8d6:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <_ZN6StringaSERKS_>

000008da <_ZN13Adafruit_FONA10flushInputEv>:
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	8c 01       	movw	r16, r24
     8ea:	0f 5f       	subi	r16, 0xFF	; 255
     8ec:	1f 4f       	sbci	r17, 0xFF	; 255
     8ee:	88 97       	sbiw	r24, 0x28	; 40
     8f0:	d8 f4       	brcc	.+54     	; 0x928 <__stack+0x29>
     8f2:	e8 81       	ld	r30, Y
     8f4:	f9 81       	ldd	r31, Y+1	; 0x01
     8f6:	04 80       	ldd	r0, Z+4	; 0x04
     8f8:	f5 81       	ldd	r31, Z+5	; 0x05
     8fa:	e0 2d       	mov	r30, r0
     8fc:	ce 01       	movw	r24, r28
     8fe:	09 95       	icall
     900:	89 2b       	or	r24, r25
     902:	51 f0       	breq	.+20     	; 0x918 <__stack+0x19>
     904:	e8 81       	ld	r30, Y
     906:	f9 81       	ldd	r31, Y+1	; 0x01
     908:	06 80       	ldd	r0, Z+6	; 0x06
     90a:	f7 81       	ldd	r31, Z+7	; 0x07
     90c:	e0 2d       	mov	r30, r0
     90e:	ce 01       	movw	r24, r28
     910:	09 95       	icall
     912:	00 e0       	ldi	r16, 0x00	; 0
     914:	10 e0       	ldi	r17, 0x00	; 0
     916:	ed cf       	rjmp	.-38     	; 0x8f2 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
     924:	c8 01       	movw	r24, r16
     926:	e0 cf       	rjmp	.-64     	; 0x8e8 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8b 01       	movw	r16, r22
     940:	f4 2e       	mov	r15, r20
     942:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
     946:	61 e9       	ldi	r22, 0x91	; 145
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	8f ec       	ldi	r24, 0xCF	; 207
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     952:	63 e8       	ldi	r22, 0x83	; 131
     954:	71 e0       	ldi	r23, 0x01	; 1
     956:	8f ec       	ldi	r24, 0xCF	; 207
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     95e:	b8 01       	movw	r22, r16
     960:	8f ec       	ldi	r24, 0xCF	; 207
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     968:	62 e2       	ldi	r22, 0x22	; 34
     96a:	8f ec       	ldi	r24, 0xCF	; 207
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 b8 19 	call	0x3370	; 0x3370 <_ZN5Print7printlnEc>
     972:	c3 5e       	subi	r28, 0xE3	; 227
     974:	de 4f       	sbci	r29, 0xFE	; 254
     976:	65 e7       	ldi	r22, 0x75	; 117
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	88 81       	ld	r24, Y
     97c:	99 81       	ldd	r25, Y+1	; 0x01
     97e:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     982:	b8 01       	movw	r22, r16
     984:	88 81       	ld	r24, Y
     986:	99 81       	ldd	r25, Y+1	; 0x01
     988:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     98c:	88 81       	ld	r24, Y
     98e:	99 81       	ldd	r25, Y+1	; 0x01
     990:	ff 20       	and	r15, r15
     992:	19 f0       	breq	.+6      	; 0x99a <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     994:	61 e7       	ldi	r22, 0x71	; 113
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	02 c0       	rjmp	.+4      	; 0x99e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     99a:	6e e6       	ldi	r22, 0x6E	; 110
     99c:	71 e0       	ldi	r23, 0x01	; 1
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>

000009ac <_ZN13Adafruit_FONA8readlineEjb>:
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	7c 01       	movw	r14, r24
     9c0:	b4 2e       	mov	r11, r20
     9c2:	8b 01       	movw	r16, r22
     9c4:	00 0f       	add	r16, r16
     9c6:	11 1f       	adc	r17, r17
     9c8:	00 0f       	add	r16, r16
     9ca:	11 1f       	adc	r17, r17
     9cc:	c0 e0       	ldi	r28, 0x00	; 0
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	67 01       	movw	r12, r14
     9d2:	83 ee       	ldi	r24, 0xE3	; 227
     9d4:	c8 1a       	sub	r12, r24
     9d6:	8e ef       	ldi	r24, 0xFE	; 254
     9d8:	d8 0a       	sbc	r13, r24
     9da:	01 15       	cp	r16, r1
     9dc:	11 05       	cpc	r17, r1
     9de:	c9 f1       	breq	.+114    	; 0xa52 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9e0:	ce 3f       	cpi	r28, 0xFE	; 254
     9e2:	d1 05       	cpc	r29, r1
     9e4:	98 f0       	brcs	.+38     	; 0xa0c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9e6:	62 e9       	ldi	r22, 0x92	; 146
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	8f ec       	ldi	r24, 0xCF	; 207
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
     9f2:	2f c0       	rjmp	.+94     	; 0xa52 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9f4:	f6 01       	movw	r30, r12
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	dc 01       	movw	r26, r24
     9fc:	ed 91       	ld	r30, X+
     9fe:	fc 91       	ld	r31, X
     a00:	06 80       	ldd	r0, Z+6	; 0x06
     a02:	f7 81       	ldd	r31, Z+7	; 0x07
     a04:	e0 2d       	mov	r30, r0
     a06:	09 95       	icall
     a08:	8d 30       	cpi	r24, 0x0D	; 13
     a0a:	69 f4       	brne	.+26     	; 0xa26 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     a0c:	d6 01       	movw	r26, r12
     a0e:	8d 91       	ld	r24, X+
     a10:	9c 91       	ld	r25, X
     a12:	dc 01       	movw	r26, r24
     a14:	ed 91       	ld	r30, X+
     a16:	fc 91       	ld	r31, X
     a18:	04 80       	ldd	r0, Z+4	; 0x04
     a1a:	f5 81       	ldd	r31, Z+5	; 0x05
     a1c:	e0 2d       	mov	r30, r0
     a1e:	09 95       	icall
     a20:	89 2b       	or	r24, r25
     a22:	41 f7       	brne	.-48     	; 0x9f4 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     a24:	0c c0       	rjmp	.+24     	; 0xa3e <_ZN13Adafruit_FONA8readlineEjb+0x92>
     a26:	8a 30       	cpi	r24, 0x0A	; 10
     a28:	21 f4       	brne	.+8      	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     a2a:	20 97       	sbiw	r28, 0x00	; 0
     a2c:	79 f3       	breq	.-34     	; 0xa0c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a2e:	bb 20       	and	r11, r11
     a30:	81 f0       	breq	.+32     	; 0xa52 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a32:	f7 01       	movw	r30, r14
     a34:	ec 0f       	add	r30, r28
     a36:	fd 1f       	adc	r31, r29
     a38:	87 87       	std	Z+15, r24	; 0x0f
     a3a:	21 96       	adiw	r28, 0x01	; 1
     a3c:	e7 cf       	rjmp	.-50     	; 0xa0c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a3e:	01 50       	subi	r16, 0x01	; 1
     a40:	11 09       	sbc	r17, r1
     a42:	39 f0       	breq	.+14     	; 0xa52 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
     a50:	c4 cf       	rjmp	.-120    	; 0x9da <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     a52:	f7 01       	movw	r30, r14
     a54:	ec 0f       	add	r30, r28
     a56:	fd 1f       	adc	r31, r29
     a58:	17 86       	std	Z+15, r1	; 0x0f
     a5a:	8c 2f       	mov	r24, r28
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	08 95       	ret

00000a70 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	ec 01       	movw	r28, r24
     a7a:	8b 01       	movw	r16, r22
     a7c:	ba 01       	movw	r22, r20
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
     a84:	68 e9       	ldi	r22, 0x98	; 152
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	8f ec       	ldi	r24, 0xCF	; 207
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     a90:	2f 96       	adiw	r28, 0x0f	; 15
     a92:	be 01       	movw	r22, r28
     a94:	8f ec       	ldi	r24, 0xCF	; 207
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
     a9c:	b8 01       	movw	r22, r16
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 39 22 	call	0x4472	; 0x4472 <strcmp_P>
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f0       	breq	.+2      	; 0xaac <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	82 2f       	mov	r24, r18
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret

00000ab8 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	fc 01       	movw	r30, r24
     ac0:	e3 5e       	subi	r30, 0xE3	; 227
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	66 23       	and	r22, r22
     ac6:	31 f0       	breq	.+12     	; 0xad4 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     ac8:	62 e2       	ldi	r22, 0x22	; 34
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	0e 94 b8 19 	call	0x3370	; 0x3370 <_ZN5Print7printlnEc>
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
     adc:	fe 01       	movw	r30, r28
     ade:	e5 5e       	subi	r30, 0xE5	; 229
     ae0:	fe 4f       	sbci	r31, 0xFE	; 254
     ae2:	60 81       	ld	r22, Z
     ae4:	71 81       	ldd	r23, Z+1	; 0x01
     ae6:	40 e1       	ldi	r20, 0x10	; 16
     ae8:	57 e2       	ldi	r21, 0x27	; 39
     aea:	ce 01       	movw	r24, r28
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	0c 94 38 05 	jmp	0xa70	; 0xa70 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000af4 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
     afe:	8a 01       	movw	r16, r20
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	0e 94 99 04 	call	0x932	; 0x932 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b06:	fe 01       	movw	r30, r28
     b08:	e3 5e       	subi	r30, 0xE3	; 227
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	b8 01       	movw	r22, r16
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	ce 01       	movw	r24, r28
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b26 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
     b30:	8a 01       	movw	r16, r20
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	0e 94 99 04 	call	0x932	; 0x932 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b38:	fe 01       	movw	r30, r28
     b3a:	e3 5e       	subi	r30, 0xE3	; 227
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	b8 01       	movw	r22, r16
     b40:	80 81       	ld	r24, Z
     b42:	91 81       	ldd	r25, Z+1	; 0x01
     b44:	0e 94 79 19 	call	0x32f2	; 0x32f2 <_ZN5Print5printERK6String>
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	ce 01       	movw	r24, r28
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b58 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
     b62:	8a 01       	movw	r16, r20
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	0e 94 99 04 	call	0x932	; 0x932 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b6a:	fe 01       	movw	r30, r28
     b6c:	e3 5e       	subi	r30, 0xE3	; 227
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	b8 01       	movw	r22, r16
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	ce 01       	movw	r24, r28
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b8a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	ec 01       	movw	r28, r24
     b98:	69 01       	movw	r12, r18
     b9a:	7a 01       	movw	r14, r20
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 99 04 	call	0x932	; 0x932 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     ba2:	fe 01       	movw	r30, r28
     ba4:	e3 5e       	subi	r30, 0xE3	; 227
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	2a e0       	ldi	r18, 0x0A	; 10
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	b7 01       	movw	r22, r14
     bae:	a6 01       	movw	r20, r12
     bb0:	80 81       	ld	r24, Z
     bb2:	91 81       	ldd	r25, Z+1	; 0x01
     bb4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZN5Print5printEli>
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	ce 01       	movw	r24, r28
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000bcc <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     bcc:	4f 92       	push	r4
     bce:	5f 92       	push	r5
     bd0:	6f 92       	push	r6
     bd2:	7f 92       	push	r7
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	7c 01       	movw	r14, r24
     bea:	2a 01       	movw	r4, r20
     bec:	3b 01       	movw	r6, r22
     bee:	48 01       	movw	r8, r16
     bf0:	59 01       	movw	r10, r18
     bf2:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
     bf6:	67 e6       	ldi	r22, 0x67	; 103
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	8f ec       	ldi	r24, 0xCF	; 207
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     c02:	6a e5       	ldi	r22, 0x5A	; 90
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	8f ec       	ldi	r24, 0xCF	; 207
     c08:	93 e0       	ldi	r25, 0x03	; 3
     c0a:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     c0e:	2a e0       	ldi	r18, 0x0A	; 10
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	b3 01       	movw	r22, r6
     c14:	a2 01       	movw	r20, r4
     c16:	8f ec       	ldi	r24, 0xCF	; 207
     c18:	93 e0       	ldi	r25, 0x03	; 3
     c1a:	0e 94 13 1a 	call	0x3426	; 0x3426 <_ZN5Print5printEmi>
     c1e:	6c e2       	ldi	r22, 0x2C	; 44
     c20:	8f ec       	ldi	r24, 0xCF	; 207
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEc>
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b5 01       	movw	r22, r10
     c2e:	a4 01       	movw	r20, r8
     c30:	8f ec       	ldi	r24, 0xCF	; 207
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <_ZN5Print7printlnEmi>
     c38:	e7 01       	movw	r28, r14
     c3a:	c3 5e       	subi	r28, 0xE3	; 227
     c3c:	de 4f       	sbci	r29, 0xFE	; 254
     c3e:	6d e4       	ldi	r22, 0x4D	; 77
     c40:	71 e0       	ldi	r23, 0x01	; 1
     c42:	88 81       	ld	r24, Y
     c44:	99 81       	ldd	r25, Y+1	; 0x01
     c46:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     c4a:	2a e0       	ldi	r18, 0x0A	; 10
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	b3 01       	movw	r22, r6
     c50:	a2 01       	movw	r20, r4
     c52:	88 81       	ld	r24, Y
     c54:	99 81       	ldd	r25, Y+1	; 0x01
     c56:	0e 94 13 1a 	call	0x3426	; 0x3426 <_ZN5Print5printEmi>
     c5a:	64 e1       	ldi	r22, 0x14	; 20
     c5c:	71 e0       	ldi	r23, 0x01	; 1
     c5e:	88 81       	ld	r24, Y
     c60:	99 81       	ldd	r25, Y+1	; 0x01
     c62:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
     c66:	2a e0       	ldi	r18, 0x0A	; 10
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	b5 01       	movw	r22, r10
     c6c:	a4 01       	movw	r20, r8
     c6e:	88 81       	ld	r24, Y
     c70:	99 81       	ldd	r25, Y+1	; 0x01
     c72:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <_ZN5Print7printlnEmi>
     c76:	40 e1       	ldi	r20, 0x10	; 16
     c78:	57 e2       	ldi	r21, 0x27	; 39
     c7a:	64 e4       	ldi	r22, 0x44	; 68
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	c7 01       	movw	r24, r14
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	7f 90       	pop	r7
     c96:	6f 90       	pop	r6
     c98:	5f 90       	pop	r5
     c9a:	4f 90       	pop	r4
     c9c:	0c 94 38 05 	jmp	0xa70	; 0xa70 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000ca0 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	ec 01       	movw	r28, r24
     cae:	8b 01       	movw	r16, r22
     cb0:	7a 01       	movw	r14, r20
     cb2:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
     cb6:	6b e8       	ldi	r22, 0x8B	; 139
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	8f ec       	ldi	r24, 0xCF	; 207
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     cc2:	b8 01       	movw	r22, r16
     cc4:	8f ec       	ldi	r24, 0xCF	; 207
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
     ccc:	fe 01       	movw	r30, r28
     cce:	e3 5e       	subi	r30, 0xE3	; 227
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	b8 01       	movw	r22, r16
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	b7 01       	movw	r22, r14
     ce0:	ce 01       	movw	r24, r28
     ce2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
     ce6:	18 2f       	mov	r17, r24
     ce8:	64 e8       	ldi	r22, 0x84	; 132
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	8f ec       	ldi	r24, 0xCF	; 207
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     cf4:	be 01       	movw	r22, r28
     cf6:	61 5f       	subi	r22, 0xF1	; 241
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	8f ec       	ldi	r24, 0xCF	; 207
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
     d02:	81 2f       	mov	r24, r17
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	08 95       	ret

00000d12 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	ec 01       	movw	r28, r24
     d2c:	6b 01       	movw	r12, r22
     d2e:	49 01       	movw	r8, r18
     d30:	5a 01       	movw	r10, r20
     d32:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
     d36:	6d e7       	ldi	r22, 0x7D	; 125
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	8f ec       	ldi	r24, 0xCF	; 207
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     d42:	b6 01       	movw	r22, r12
     d44:	8f ec       	ldi	r24, 0xCF	; 207
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     d4c:	2a e0       	ldi	r18, 0x0A	; 10
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	b5 01       	movw	r22, r10
     d52:	a4 01       	movw	r20, r8
     d54:	8f ec       	ldi	r24, 0xCF	; 207
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	0e 94 c4 1a 	call	0x3588	; 0x3588 <_ZN5Print7printlnEli>
     d5c:	7e 01       	movw	r14, r28
     d5e:	83 ee       	ldi	r24, 0xE3	; 227
     d60:	e8 1a       	sub	r14, r24
     d62:	8e ef       	ldi	r24, 0xFE	; 254
     d64:	f8 0a       	sbc	r15, r24
     d66:	b6 01       	movw	r22, r12
     d68:	f7 01       	movw	r30, r14
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     d72:	2a e0       	ldi	r18, 0x0A	; 10
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	b5 01       	movw	r22, r10
     d78:	a4 01       	movw	r20, r8
     d7a:	f7 01       	movw	r30, r14
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	0e 94 c4 1a 	call	0x3588	; 0x3588 <_ZN5Print7printlnEli>
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	b8 01       	movw	r22, r16
     d88:	ce 01       	movw	r24, r28
     d8a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
     d8e:	18 2f       	mov	r17, r24
     d90:	66 e7       	ldi	r22, 0x76	; 118
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	8f ec       	ldi	r24, 0xCF	; 207
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     d9c:	be 01       	movw	r22, r28
     d9e:	61 5f       	subi	r22, 0xF1	; 241
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f ec       	ldi	r24, 0xCF	; 207
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
     daa:	81 2f       	mov	r24, r17
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	8f 90       	pop	r8
     dc4:	08 95       	ret

00000dc6 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     dc6:	af 92       	push	r10
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	6b 01       	movw	r12, r22
     dde:	7a 01       	movw	r14, r20
     de0:	59 01       	movw	r10, r18
     de2:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
     de6:	6f e6       	ldi	r22, 0x6F	; 111
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	8f ec       	ldi	r24, 0xCF	; 207
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     df2:	b6 01       	movw	r22, r12
     df4:	8f ec       	ldi	r24, 0xCF	; 207
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     dfc:	62 e2       	ldi	r22, 0x22	; 34
     dfe:	8f ec       	ldi	r24, 0xCF	; 207
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEc>
     e06:	b7 01       	movw	r22, r14
     e08:	8f ec       	ldi	r24, 0xCF	; 207
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     e10:	62 e2       	ldi	r22, 0x22	; 34
     e12:	8f ec       	ldi	r24, 0xCF	; 207
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 b8 19 	call	0x3370	; 0x3370 <_ZN5Print7printlnEc>
     e1a:	8e 01       	movw	r16, r28
     e1c:	03 5e       	subi	r16, 0xE3	; 227
     e1e:	1e 4f       	sbci	r17, 0xFE	; 254
     e20:	b6 01       	movw	r22, r12
     e22:	f8 01       	movw	r30, r16
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     e2c:	62 e2       	ldi	r22, 0x22	; 34
     e2e:	f8 01       	movw	r30, r16
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEc>
     e38:	b7 01       	movw	r22, r14
     e3a:	f8 01       	movw	r30, r16
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     e44:	62 e2       	ldi	r22, 0x22	; 34
     e46:	f8 01       	movw	r30, r16
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	0e 94 b8 19 	call	0x3370	; 0x3370 <_ZN5Print7printlnEc>
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	b5 01       	movw	r22, r10
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
     e5a:	18 2f       	mov	r17, r24
     e5c:	68 e6       	ldi	r22, 0x68	; 104
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	8f ec       	ldi	r24, 0xCF	; 207
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
     e68:	be 01       	movw	r22, r28
     e6a:	61 5f       	subi	r22, 0xF1	; 241
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f ec       	ldi	r24, 0xCF	; 207
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
     e76:	81 2f       	mov	r24, r17
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	08 95       	ret

00000e8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	8a 01       	movw	r16, r20
     e9a:	a9 01       	movw	r20, r18
     e9c:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     ea0:	88 23       	and	r24, r24
     ea2:	41 f0       	breq	.+16     	; 0xeb4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     ea4:	b8 01       	movw	r22, r16
     ea6:	ce 01       	movw	r24, r28
     ea8:	0f 96       	adiw	r24, 0x0f	; 15
     eaa:	0e 94 39 22 	call	0x4472	; 0x4472 <strcmp_P>
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	89 2b       	or	r24, r25
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	82 2f       	mov	r24, r18
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <_ZN13Adafruit_FONA5beginEhh>:
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	ec 01       	movw	r28, r24
     ed4:	f6 2e       	mov	r15, r22
     ed6:	e4 2e       	mov	r14, r20
     ed8:	8f e1       	ldi	r24, 0x1F	; 31
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 14 19 	call	0x3228	; 0x3228 <_Znwj>
     ee0:	8c 01       	movw	r16, r24
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	4e 2d       	mov	r20, r14
     ee6:	6f 2d       	mov	r22, r15
     ee8:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <_ZN14SoftwareSerialC1Ehhb>
     eec:	7e 01       	movw	r14, r28
     eee:	83 ee       	ldi	r24, 0xE3	; 227
     ef0:	e8 1a       	sub	r14, r24
     ef2:	8e ef       	ldi	r24, 0xFE	; 254
     ef4:	f8 0a       	sbc	r15, r24
     ef6:	d7 01       	movw	r26, r14
     ef8:	0d 93       	st	X+, r16
     efa:	1c 93       	st	X, r17
     efc:	40 ec       	ldi	r20, 0xC0	; 192
     efe:	52 e1       	ldi	r21, 0x12	; 18
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	c8 01       	movw	r24, r16
     f06:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <_ZN14SoftwareSerial5beginEl>
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0e:	0e 94 02 1c 	call	0x3804	; 0x3804 <pinMode>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	8c 85       	ldd	r24, Y+12	; 0x0c
     f16:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
     f1a:	6a e0       	ldi	r22, 0x0A	; 10
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	8c 85       	ldd	r24, Y+12	; 0x0c
     f2a:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
     f2e:	64 e6       	ldi	r22, 0x64	; 100
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
     f42:	62 e2       	ldi	r22, 0x22	; 34
     f44:	73 e0       	ldi	r23, 0x03	; 3
     f46:	8f ec       	ldi	r24, 0xCF	; 207
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
     f4e:	8e e0       	ldi	r24, 0x0E	; 14
     f50:	c8 2e       	mov	r12, r24
     f52:	d1 2c       	mov	r13, r1
     f54:	8e 01       	movw	r16, r28
     f56:	05 5e       	subi	r16, 0xE5	; 229
     f58:	1e 4f       	sbci	r17, 0xFE	; 254
     f5a:	f7 01       	movw	r30, r14
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	dc 01       	movw	r26, r24
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	04 80       	ldd	r0, Z+4	; 0x04
     f68:	f5 81       	ldd	r31, Z+5	; 0x05
     f6a:	e0 2d       	mov	r30, r0
     f6c:	09 95       	icall
     f6e:	89 2b       	or	r24, r25
     f70:	59 f0       	breq	.+22     	; 0xf88 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     f72:	f7 01       	movw	r30, r14
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	dc 01       	movw	r26, r24
     f7a:	ed 91       	ld	r30, X+
     f7c:	fc 91       	ld	r31, X
     f7e:	06 80       	ldd	r0, Z+6	; 0x06
     f80:	f7 81       	ldd	r31, Z+7	; 0x07
     f82:	e0 2d       	mov	r30, r0
     f84:	09 95       	icall
     f86:	e9 cf       	rjmp	.-46     	; 0xf5a <_ZN13Adafruit_FONA5beginEhh+0x98>
     f88:	f8 01       	movw	r30, r16
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	24 ef       	ldi	r18, 0xF4	; 244
     f90:	31 e0       	ldi	r19, 0x01	; 1
     f92:	6f e1       	ldi	r22, 0x1F	; 31
     f94:	73 e0       	ldi	r23, 0x03	; 3
     f96:	ce 01       	movw	r24, r28
     f98:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f9c:	81 11       	cpse	r24, r1
     f9e:	34 c0       	rjmp	.+104    	; 0x1008 <_ZN13Adafruit_FONA5beginEhh+0x146>
     fa0:	d7 01       	movw	r26, r14
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	dc 01       	movw	r26, r24
     fa8:	ed 91       	ld	r30, X+
     faa:	fc 91       	ld	r31, X
     fac:	04 80       	ldd	r0, Z+4	; 0x04
     fae:	f5 81       	ldd	r31, Z+5	; 0x05
     fb0:	e0 2d       	mov	r30, r0
     fb2:	09 95       	icall
     fb4:	89 2b       	or	r24, r25
     fb6:	59 f0       	breq	.+22     	; 0xfce <_ZN13Adafruit_FONA5beginEhh+0x10c>
     fb8:	f7 01       	movw	r30, r14
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	dc 01       	movw	r26, r24
     fc0:	ed 91       	ld	r30, X+
     fc2:	fc 91       	ld	r31, X
     fc4:	06 80       	ldd	r0, Z+6	; 0x06
     fc6:	f7 81       	ldd	r31, Z+7	; 0x07
     fc8:	e0 2d       	mov	r30, r0
     fca:	09 95       	icall
     fcc:	e9 cf       	rjmp	.-46     	; 0xfa0 <_ZN13Adafruit_FONA5beginEhh+0xde>
     fce:	24 ef       	ldi	r18, 0xF4	; 244
     fd0:	31 e0       	ldi	r19, 0x01	; 1
     fd2:	4c e1       	ldi	r20, 0x1C	; 28
     fd4:	53 e0       	ldi	r21, 0x03	; 3
     fd6:	69 e1       	ldi	r22, 0x19	; 25
     fd8:	73 e0       	ldi	r23, 0x03	; 3
     fda:	ce 01       	movw	r24, r28
     fdc:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fe0:	81 11       	cpse	r24, r1
     fe2:	12 c0       	rjmp	.+36     	; 0x1008 <_ZN13Adafruit_FONA5beginEhh+0x146>
     fe4:	64 ef       	ldi	r22, 0xF4	; 244
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
     ff0:	b1 e0       	ldi	r27, 0x01	; 1
     ff2:	cb 1a       	sub	r12, r27
     ff4:	d1 08       	sbc	r13, r1
     ff6:	09 f0       	breq	.+2      	; 0xffa <_ZN13Adafruit_FONA5beginEhh+0x138>
     ff8:	b0 cf       	rjmp	.-160    	; 0xf5a <_ZN13Adafruit_FONA5beginEhh+0x98>
     ffa:	5e c0       	rjmp	.+188    	; 0x10b8 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     ffc:	64 e6       	ldi	r22, 0x64	; 100
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
    1008:	f8 01       	movw	r30, r16
    100a:	40 81       	ld	r20, Z
    100c:	51 81       	ldd	r21, Z+1	; 0x01
    100e:	24 ef       	ldi	r18, 0xF4	; 244
    1010:	31 e0       	ldi	r19, 0x01	; 1
    1012:	6c ee       	ldi	r22, 0xEC	; 236
    1014:	72 e0       	ldi	r23, 0x02	; 2
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    101c:	64 e6       	ldi	r22, 0x64	; 100
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
    1028:	d8 01       	movw	r26, r16
    102a:	4d 91       	ld	r20, X+
    102c:	5c 91       	ld	r21, X
    102e:	24 ef       	ldi	r18, 0xF4	; 244
    1030:	31 e0       	ldi	r19, 0x01	; 1
    1032:	67 ee       	ldi	r22, 0xE7	; 231
    1034:	72 e0       	ldi	r23, 0x02	; 2
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    103c:	81 11       	cpse	r24, r1
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <_ZN13Adafruit_FONA5beginEhh+0x182>
    1040:	12 e0       	ldi	r17, 0x02	; 2
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <_ZN13Adafruit_FONA5beginEhh+0x184>
    1044:	11 e0       	ldi	r17, 0x01	; 1
    1046:	64 e6       	ldi	r22, 0x64	; 100
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
    1052:	ce 01       	movw	r24, r28
    1054:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
    1058:	60 ee       	ldi	r22, 0xE0	; 224
    105a:	72 e0       	ldi	r23, 0x02	; 2
    105c:	8f ec       	ldi	r24, 0xCF	; 207
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1064:	66 e1       	ldi	r22, 0x16	; 22
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	8f ec       	ldi	r24, 0xCF	; 207
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    1070:	66 e1       	ldi	r22, 0x16	; 22
    1072:	71 e0       	ldi	r23, 0x01	; 1
    1074:	f7 01       	movw	r30, r14
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	64 ef       	ldi	r22, 0xF4	; 244
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	ce 01       	movw	r24, r28
    1086:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
    108a:	69 ed       	ldi	r22, 0xD9	; 217
    108c:	72 e0       	ldi	r23, 0x02	; 2
    108e:	8f ec       	ldi	r24, 0xCF	; 207
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1096:	2f 96       	adiw	r28, 0x0f	; 15
    1098:	be 01       	movw	r22, r28
    109a:	8f ec       	ldi	r24, 0xCF	; 207
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    10a2:	6e ec       	ldi	r22, 0xCE	; 206
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 4b 22 	call	0x4496	; 0x4496 <strstr_P>
    10ac:	89 2b       	or	r24, r25
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    10b0:	81 2f       	mov	r24, r17
    10b2:	35 c0       	rjmp	.+106    	; 0x111e <_ZN13Adafruit_FONA5beginEhh+0x25c>
    10b4:	84 e0       	ldi	r24, 0x04	; 4
    10b6:	33 c0       	rjmp	.+102    	; 0x111e <_ZN13Adafruit_FONA5beginEhh+0x25c>
    10b8:	d8 01       	movw	r26, r16
    10ba:	4d 91       	ld	r20, X+
    10bc:	5c 91       	ld	r21, X
    10be:	24 ef       	ldi	r18, 0xF4	; 244
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	66 e1       	ldi	r22, 0x16	; 22
    10c4:	73 e0       	ldi	r23, 0x03	; 3
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10cc:	64 e6       	ldi	r22, 0x64	; 100
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
    10d8:	f8 01       	movw	r30, r16
    10da:	40 81       	ld	r20, Z
    10dc:	51 81       	ldd	r21, Z+1	; 0x01
    10de:	24 ef       	ldi	r18, 0xF4	; 244
    10e0:	31 e0       	ldi	r19, 0x01	; 1
    10e2:	63 e1       	ldi	r22, 0x13	; 19
    10e4:	73 e0       	ldi	r23, 0x03	; 3
    10e6:	ce 01       	movw	r24, r28
    10e8:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10ec:	64 e6       	ldi	r22, 0x64	; 100
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
    10f8:	d8 01       	movw	r26, r16
    10fa:	4d 91       	ld	r20, X+
    10fc:	5c 91       	ld	r21, X
    10fe:	24 ef       	ldi	r18, 0xF4	; 244
    1100:	31 e0       	ldi	r19, 0x01	; 1
    1102:	60 e1       	ldi	r22, 0x10	; 16
    1104:	73 e0       	ldi	r23, 0x03	; 3
    1106:	ce 01       	movw	r24, r28
    1108:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    110c:	81 11       	cpse	r24, r1
    110e:	76 cf       	rjmp	.-276    	; 0xffc <_ZN13Adafruit_FONA5beginEhh+0x13a>
    1110:	61 ef       	ldi	r22, 0xF1	; 241
    1112:	72 e0       	ldi	r23, 0x02	; 2
    1114:	8f ec       	ldi	r24, 0xCF	; 207
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	08 95       	ret

00001130 <_ZN13Adafruit_FONA9HTTP_initEv>:
    1130:	fc 01       	movw	r30, r24
    1132:	e5 5e       	subi	r30, 0xE5	; 229
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	40 81       	ld	r20, Z
    1138:	51 81       	ldd	r21, Z+1	; 0x01
    113a:	24 ef       	ldi	r18, 0xF4	; 244
    113c:	31 e0       	ldi	r19, 0x01	; 1
    113e:	64 ea       	ldi	r22, 0xA4	; 164
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001146 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1146:	fc 01       	movw	r30, r24
    1148:	e5 5e       	subi	r30, 0xE5	; 229
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	24 ef       	ldi	r18, 0xF4	; 244
    1152:	31 e0       	ldi	r19, 0x01	; 1
    1154:	68 e9       	ldi	r22, 0x98	; 152
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000115c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	ec 01       	movw	r28, r24
    116e:	68 01       	movw	r12, r16
    1170:	87 01       	movw	r16, r14
    1172:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    1176:	b6 01       	movw	r22, r12
    1178:	ce 01       	movw	r24, r28
    117a:	0f 96       	adiw	r24, 0x0f	; 15
    117c:	0e 94 39 22 	call	0x4472	; 0x4472 <strcmp_P>
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	89 2b       	or	r24, r25
    1184:	09 f0       	breq	.+2      	; 0x1188 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	82 2f       	mov	r24, r18
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	08 95       	ret

0000119c <_ZN13Adafruit_FONA8HTTP_sslEb>:
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	fc 01       	movw	r30, r24
    11a6:	e5 5e       	subi	r30, 0xE5	; 229
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	00 81       	ld	r16, Z
    11ac:	11 81       	ldd	r17, Z+1	; 0x01
    11ae:	26 2f       	mov	r18, r22
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	64 ef       	ldi	r22, 0xF4	; 244
    11b8:	e6 2e       	mov	r14, r22
    11ba:	ff 24       	eor	r15, r15
    11bc:	f3 94       	inc	r15
    11be:	68 ef       	ldi	r22, 0xF8	; 248
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	08 95       	ret

000011d0 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x10>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x12>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x14>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	8c 01       	movw	r16, r24
    11ea:	7b 01       	movw	r14, r22
    11ec:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN13Adafruit_FONA9HTTP_termEv>
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN13Adafruit_FONA9HTTP_initEv>
    11f6:	81 11       	cpse	r24, r1
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2e>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	3e c0       	rjmp	.+124    	; 0x127a <_ZN13Adafruit_FONA10HTTP_setupEPc+0xaa>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	6c ea       	ldi	r22, 0xAC	; 172
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	c8 01       	movw	r24, r16
    120c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1210:	88 23       	and	r24, r24
    1212:	99 f3       	breq	.-26     	; 0x11fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1214:	b8 01       	movw	r22, r16
    1216:	6b 5e       	subi	r22, 0xEB	; 235
    1218:	7e 4f       	sbci	r23, 0xFE	; 254
    121a:	ce 01       	movw	r24, r28
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_ZN6StringC1ERKS_>
    1222:	ae 01       	movw	r20, r28
    1224:	4f 5f       	subi	r20, 0xFF	; 255
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	69 ea       	ldi	r22, 0xA9	; 169
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	c8 01       	movw	r24, r16
    122e:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1232:	d8 2e       	mov	r13, r24
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 6d 1c 	call	0x38da	; 0x38da <_ZN6StringD1Ev>
    123c:	dd 20       	and	r13, r13
    123e:	e9 f2       	breq	.-70     	; 0x11fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1240:	a7 01       	movw	r20, r14
    1242:	65 ea       	ldi	r22, 0xA5	; 165
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	c8 01       	movw	r24, r16
    1248:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    124c:	88 23       	and	r24, r24
    124e:	a9 f2       	breq	.-86     	; 0x11fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1250:	f8 01       	movw	r30, r16
    1252:	ec 5e       	subi	r30, 0xEC	; 236
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	90 81       	ld	r25, Z
    1258:	99 23       	and	r25, r25
    125a:	79 f0       	breq	.+30     	; 0x127a <_ZN13Adafruit_FONA10HTTP_setupEPc+0xaa>
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	6f e9       	ldi	r22, 0x9F	; 159
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	c8 01       	movw	r24, r16
    126a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    126e:	88 23       	and	r24, r24
    1270:	21 f2       	breq	.-120    	; 0x11fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	c8 01       	movw	r24, r16
    1276:	0e 94 ce 08 	call	0x119c	; 0x119c <_ZN13Adafruit_FONA8HTTP_sslEb>
    127a:	26 96       	adiw	r28, 0x06	; 6
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	08 95       	ret

00001296 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
    12a4:	79 01       	movw	r14, r18
    12a6:	98 01       	movw	r18, r16
    12a8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    12ac:	b7 01       	movw	r22, r14
    12ae:	ce 01       	movw	r24, r28
    12b0:	0f 96       	adiw	r24, 0x0f	; 15
    12b2:	0e 94 39 22 	call	0x4472	; 0x4472 <strcmp_P>
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	89 2b       	or	r24, r25
    12ba:	09 f0       	breq	.+2      	; 0x12be <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	82 2f       	mov	r24, r18
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	08 95       	ret

000012ce <_ZN13Adafruit_FONA10enableGPRSEb>:
    12ce:	7f 92       	push	r7
    12d0:	8f 92       	push	r8
    12d2:	9f 92       	push	r9
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    12ea:	28 ee       	ldi	r18, 0xE8	; 232
    12ec:	3d ef       	ldi	r19, 0xFD	; 253
    12ee:	66 23       	and	r22, r22
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    12f2:	1f c1       	rjmp	.+574    	; 0x1532 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    12f4:	48 e8       	ldi	r20, 0x88	; 136
    12f6:	52 e0       	ldi	r21, 0x02	; 2
    12f8:	6d e7       	ldi	r22, 0x7D	; 125
    12fa:	72 e0       	ldi	r23, 0x02	; 2
    12fc:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1300:	81 11       	cpse	r24, r1
    1302:	03 c0       	rjmp	.+6      	; 0x130a <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	78 2e       	mov	r7, r24
    1308:	02 c0       	rjmp	.+4      	; 0x130e <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    130a:	77 24       	eor	r7, r7
    130c:	73 94       	inc	r7
    130e:	7e 01       	movw	r14, r28
    1310:	85 ee       	ldi	r24, 0xE5	; 229
    1312:	e8 1a       	sub	r14, r24
    1314:	8e ef       	ldi	r24, 0xFE	; 254
    1316:	f8 0a       	sbc	r15, r24
    1318:	f7 01       	movw	r30, r14
    131a:	40 81       	ld	r20, Z
    131c:	51 81       	ldd	r21, Z+1	; 0x01
    131e:	20 e1       	ldi	r18, 0x10	; 16
    1320:	37 e2       	ldi	r19, 0x27	; 39
    1322:	62 e7       	ldi	r22, 0x72	; 114
    1324:	72 e0       	ldi	r23, 0x02	; 2
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    1330:	25 c1       	rjmp	.+586    	; 0x157c <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    1332:	f7 01       	movw	r30, r14
    1334:	40 81       	ld	r20, Z
    1336:	51 81       	ldd	r21, Z+1	; 0x01
    1338:	20 e1       	ldi	r18, 0x10	; 16
    133a:	37 e2       	ldi	r19, 0x27	; 39
    133c:	64 e5       	ldi	r22, 0x54	; 84
    133e:	72 e0       	ldi	r23, 0x02	; 2
    1340:	ce 01       	movw	r24, r28
    1342:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    134a:	1a c1       	rjmp	.+564    	; 0x1580 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    134c:	4e 01       	movw	r8, r28
    134e:	f2 ef       	ldi	r31, 0xF2	; 242
    1350:	8f 1a       	sub	r8, r31
    1352:	fe ef       	ldi	r31, 0xFE	; 254
    1354:	9f 0a       	sbc	r9, r31
    1356:	f4 01       	movw	r30, r8
    1358:	40 81       	ld	r20, Z
    135a:	51 81       	ldd	r21, Z+1	; 0x01
    135c:	41 15       	cp	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	71 f4       	brne	.+28     	; 0x137e <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    1362:	f7 01       	movw	r30, r14
    1364:	40 81       	ld	r20, Z
    1366:	51 81       	ldd	r21, Z+1	; 0x01
    1368:	2f ef       	ldi	r18, 0xFF	; 255
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	6f ee       	ldi	r22, 0xEF	; 239
    136e:	71 e0       	ldi	r23, 0x01	; 1
    1370:	ce 01       	movw	r24, r28
    1372:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1376:	81 11       	cpse	r24, r1
    1378:	ce c0       	rjmp	.+412    	; 0x1516 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    137a:	89 e0       	ldi	r24, 0x09	; 9
    137c:	0e c1       	rjmp	.+540    	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    137e:	f7 01       	movw	r30, r14
    1380:	20 81       	ld	r18, Z
    1382:	31 81       	ldd	r19, Z+1	; 0x01
    1384:	00 e1       	ldi	r16, 0x10	; 16
    1386:	17 e2       	ldi	r17, 0x27	; 39
    1388:	60 e4       	ldi	r22, 0x40	; 64
    138a:	72 e0       	ldi	r23, 0x02	; 2
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    1396:	f6 c0       	rjmp	.+492    	; 0x1584 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    1398:	ce 01       	movw	r24, r28
    139a:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA10flushInputEv>
    139e:	8e 01       	movw	r16, r28
    13a0:	03 5e       	subi	r16, 0xE3	; 227
    13a2:	1e 4f       	sbci	r17, 0xFE	; 254
    13a4:	66 e3       	ldi	r22, 0x36	; 54
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	f8 01       	movw	r30, r16
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    13b2:	f4 01       	movw	r30, r8
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    13c2:	5e 01       	movw	r10, r28
    13c4:	f0 ef       	ldi	r31, 0xF0	; 240
    13c6:	af 1a       	sub	r10, r31
    13c8:	fe ef       	ldi	r31, 0xFE	; 254
    13ca:	bf 0a       	sbc	r11, r31
    13cc:	f5 01       	movw	r30, r10
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	89 2b       	or	r24, r25
    13d4:	79 f0       	breq	.+30     	; 0x13f4 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    13d6:	62 e3       	ldi	r22, 0x32	; 50
    13d8:	71 e0       	ldi	r23, 0x01	; 1
    13da:	f8 01       	movw	r30, r16
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    13e4:	f5 01       	movw	r30, r10
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    13f4:	6e 01       	movw	r12, r28
    13f6:	fe ee       	ldi	r31, 0xEE	; 238
    13f8:	cf 1a       	sub	r12, r31
    13fa:	fe ef       	ldi	r31, 0xFE	; 254
    13fc:	df 0a       	sbc	r13, r31
    13fe:	f6 01       	movw	r30, r12
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	89 2b       	or	r24, r25
    1406:	79 f0       	breq	.+30     	; 0x1426 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1408:	62 e3       	ldi	r22, 0x32	; 50
    140a:	71 e0       	ldi	r23, 0x01	; 1
    140c:	f8 01       	movw	r30, r16
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    1416:	f6 01       	movw	r30, r12
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	f8 01       	movw	r30, r16
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1426:	64 e3       	ldi	r22, 0x34	; 52
    1428:	71 e0       	ldi	r23, 0x01	; 1
    142a:	f8 01       	movw	r30, r16
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    1434:	6f e2       	ldi	r22, 0x2F	; 47
    1436:	72 e0       	ldi	r23, 0x02	; 2
    1438:	8f ec       	ldi	r24, 0xCF	; 207
    143a:	93 e0       	ldi	r25, 0x03	; 3
    143c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1440:	65 e2       	ldi	r22, 0x25	; 37
    1442:	72 e0       	ldi	r23, 0x02	; 2
    1444:	8f ec       	ldi	r24, 0xCF	; 207
    1446:	93 e0       	ldi	r25, 0x03	; 3
    1448:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    144c:	f4 01       	movw	r30, r8
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	8f ec       	ldi	r24, 0xCF	; 207
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    145a:	f5 01       	movw	r30, r10
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
    1460:	89 2b       	or	r24, r25
    1462:	69 f0       	breq	.+26     	; 0x147e <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    1464:	62 e3       	ldi	r22, 0x32	; 50
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	8f ec       	ldi	r24, 0xCF	; 207
    146a:	93 e0       	ldi	r25, 0x03	; 3
    146c:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    1470:	f5 01       	movw	r30, r10
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	8f ec       	ldi	r24, 0xCF	; 207
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    147e:	f6 01       	movw	r30, r12
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	89 2b       	or	r24, r25
    1486:	69 f0       	breq	.+26     	; 0x14a2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    1488:	62 e3       	ldi	r22, 0x32	; 50
    148a:	71 e0       	ldi	r23, 0x01	; 1
    148c:	8f ec       	ldi	r24, 0xCF	; 207
    148e:	93 e0       	ldi	r25, 0x03	; 3
    1490:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    1494:	f6 01       	movw	r30, r12
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	8f ec       	ldi	r24, 0xCF	; 207
    149c:	93 e0       	ldi	r25, 0x03	; 3
    149e:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    14a2:	64 e3       	ldi	r22, 0x34	; 52
    14a4:	71 e0       	ldi	r23, 0x01	; 1
    14a6:	8f ec       	ldi	r24, 0xCF	; 207
    14a8:	93 e0       	ldi	r25, 0x03	; 3
    14aa:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    14ae:	f7 01       	movw	r30, r14
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	40 e1       	ldi	r20, 0x10	; 16
    14b6:	57 e2       	ldi	r21, 0x27	; 39
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    14be:	88 23       	and	r24, r24
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    14c2:	62 c0       	rjmp	.+196    	; 0x1588 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    14c4:	f5 01       	movw	r30, r10
    14c6:	40 81       	ld	r20, Z
    14c8:	51 81       	ldd	r21, Z+1	; 0x01
    14ca:	41 15       	cp	r20, r1
    14cc:	51 05       	cpc	r21, r1
    14ce:	39 f4       	brne	.+14     	; 0x14de <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    14d0:	f6 01       	movw	r30, r12
    14d2:	40 81       	ld	r20, Z
    14d4:	51 81       	ldd	r21, Z+1	; 0x01
    14d6:	41 15       	cp	r20, r1
    14d8:	51 05       	cpc	r21, r1
    14da:	79 f4       	brne	.+30     	; 0x14fa <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    14dc:	42 cf       	rjmp	.-380    	; 0x1362 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    14de:	f7 01       	movw	r30, r14
    14e0:	20 81       	ld	r18, Z
    14e2:	31 81       	ldd	r19, Z+1	; 0x01
    14e4:	00 e1       	ldi	r16, 0x10	; 16
    14e6:	17 e2       	ldi	r17, 0x27	; 39
    14e8:	60 e1       	ldi	r22, 0x10	; 16
    14ea:	72 e0       	ldi	r23, 0x02	; 2
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    14f2:	81 11       	cpse	r24, r1
    14f4:	ed cf       	rjmp	.-38     	; 0x14d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    14f6:	87 e0       	ldi	r24, 0x07	; 7
    14f8:	50 c0       	rjmp	.+160    	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14fa:	f7 01       	movw	r30, r14
    14fc:	20 81       	ld	r18, Z
    14fe:	31 81       	ldd	r19, Z+1	; 0x01
    1500:	00 e1       	ldi	r16, 0x10	; 16
    1502:	17 e2       	ldi	r17, 0x27	; 39
    1504:	6c ef       	ldi	r22, 0xFC	; 252
    1506:	71 e0       	ldi	r23, 0x01	; 1
    1508:	ce 01       	movw	r24, r28
    150a:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    150e:	81 11       	cpse	r24, r1
    1510:	28 cf       	rjmp	.-432    	; 0x1362 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1512:	88 e0       	ldi	r24, 0x08	; 8
    1514:	42 c0       	rjmp	.+132    	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1516:	f7 01       	movw	r30, r14
    1518:	40 81       	ld	r20, Z
    151a:	51 81       	ldd	r21, Z+1	; 0x01
    151c:	2f ef       	ldi	r18, 0xFF	; 255
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	66 ee       	ldi	r22, 0xE6	; 230
    1522:	71 e0       	ldi	r23, 0x01	; 1
    1524:	ce 01       	movw	r24, r28
    1526:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    152a:	88 23       	and	r24, r24
    152c:	79 f1       	breq	.+94     	; 0x158c <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    152e:	87 2d       	mov	r24, r7
    1530:	34 c0       	rjmp	.+104    	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1532:	4e ed       	ldi	r20, 0xDE	; 222
    1534:	51 e0       	ldi	r21, 0x01	; 1
    1536:	63 ed       	ldi	r22, 0xD3	; 211
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    153e:	88 23       	and	r24, r24
    1540:	39 f1       	breq	.+78     	; 0x1590 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    1542:	8e 01       	movw	r16, r28
    1544:	05 5e       	subi	r16, 0xE5	; 229
    1546:	1e 4f       	sbci	r17, 0xFE	; 254
    1548:	f8 01       	movw	r30, r16
    154a:	40 81       	ld	r20, Z
    154c:	51 81       	ldd	r21, Z+1	; 0x01
    154e:	20 e1       	ldi	r18, 0x10	; 16
    1550:	37 e2       	ldi	r19, 0x27	; 39
    1552:	66 ec       	ldi	r22, 0xC6	; 198
    1554:	71 e0       	ldi	r23, 0x01	; 1
    1556:	ce 01       	movw	r24, r28
    1558:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    155c:	88 23       	and	r24, r24
    155e:	d1 f0       	breq	.+52     	; 0x1594 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    1560:	f8 01       	movw	r30, r16
    1562:	40 81       	ld	r20, Z
    1564:	51 81       	ldd	r21, Z+1	; 0x01
    1566:	20 e1       	ldi	r18, 0x10	; 16
    1568:	37 e2       	ldi	r19, 0x27	; 39
    156a:	6b eb       	ldi	r22, 0xBB	; 187
    156c:	71 e0       	ldi	r23, 0x01	; 1
    156e:	ce 01       	movw	r24, r28
    1570:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1574:	88 23       	and	r24, r24
    1576:	81 f0       	breq	.+32     	; 0x1598 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	0f c0       	rjmp	.+30     	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	0d c0       	rjmp	.+26     	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	0b c0       	rjmp	.+22     	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	09 c0       	rjmp	.+18     	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1588:	86 e0       	ldi	r24, 0x06	; 6
    158a:	07 c0       	rjmp	.+14     	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    158c:	8a e0       	ldi	r24, 0x0A	; 10
    158e:	05 c0       	rjmp	.+10     	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1590:	8b e0       	ldi	r24, 0x0B	; 11
    1592:	03 c0       	rjmp	.+6      	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1594:	8c e0       	ldi	r24, 0x0C	; 12
    1596:	01 c0       	rjmp	.+2      	; 0x159a <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1598:	8d e0       	ldi	r24, 0x0D	; 13
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	9f 90       	pop	r9
    15b0:	8f 90       	pop	r8
    15b2:	7f 90       	pop	r7
    15b4:	08 95       	ret

000015b6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	5b 01       	movw	r10, r22
    15ca:	6a 01       	movw	r12, r20
    15cc:	e2 2e       	mov	r14, r18
    15ce:	0f 96       	adiw	r24, 0x0f	; 15
    15d0:	0e 94 4b 22 	call	0x4496	; 0x4496 <strstr_P>
    15d4:	ec 01       	movw	r28, r24
    15d6:	89 2b       	or	r24, r25
    15d8:	c1 f0       	breq	.+48     	; 0x160a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    15da:	c5 01       	movw	r24, r10
    15dc:	0e 94 42 22 	call	0x4484	; 0x4484 <__strlen_P>
    15e0:	8c 0f       	add	r24, r28
    15e2:	9d 1f       	adc	r25, r29
    15e4:	c0 e0       	ldi	r28, 0x00	; 0
    15e6:	f1 2c       	mov	r15, r1
    15e8:	c0 17       	cp	r28, r16
    15ea:	41 f0       	breq	.+16     	; 0x15fc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    15ec:	b7 01       	movw	r22, r14
    15ee:	0e 94 6e 22 	call	0x44dc	; 0x44dc <strchr>
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	51 f0       	breq	.+20     	; 0x160a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	cf 5f       	subi	r28, 0xFF	; 255
    15fa:	f6 cf       	rjmp	.-20     	; 0x15e8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    15fc:	0e 94 1b 22 	call	0x4436	; 0x4436 <atoi>
    1600:	f6 01       	movw	r30, r12
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	01 c0       	rjmp	.+2      	; 0x160c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	08 95       	ret

00001620 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
    162c:	7b 01       	movw	r14, r22
    162e:	44 ef       	ldi	r20, 0xF4	; 244
    1630:	51 e0       	ldi	r21, 0x01	; 1
    1632:	6f e0       	ldi	r22, 0x0F	; 15
    1634:	71 e0       	ldi	r23, 0x01	; 1
    1636:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    163a:	00 e0       	ldi	r16, 0x00	; 0
    163c:	2c e2       	ldi	r18, 0x2C	; 44
    163e:	a7 01       	movw	r20, r14
    1640:	64 e0       	ldi	r22, 0x04	; 4
    1642:	71 e0       	ldi	r23, 0x01	; 1
    1644:	ce 01       	movw	r24, r28
    1646:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    1656:	4f 92       	push	r4
    1658:	5f 92       	push	r5
    165a:	6f 92       	push	r6
    165c:	7f 92       	push	r7
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
    1674:	5a 01       	movw	r10, r20
    1676:	69 01       	movw	r12, r18
    1678:	27 01       	movw	r4, r14
    167a:	38 01       	movw	r6, r16
    167c:	fc 01       	movw	r30, r24
    167e:	e5 5e       	subi	r30, 0xE5	; 229
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	00 81       	ld	r16, Z
    1684:	11 81       	ldd	r17, Z+1	; 0x01
    1686:	26 2f       	mov	r18, r22
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	84 ef       	ldi	r24, 0xF4	; 244
    1690:	e8 2e       	mov	r14, r24
    1692:	ff 24       	eor	r15, r15
    1694:	f3 94       	inc	r15
    1696:	65 e3       	ldi	r22, 0x35	; 53
    1698:	71 e0       	ldi	r23, 0x01	; 1
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    16a0:	81 11       	cpse	r24, r1
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	17 c0       	rjmp	.+46     	; 0x16d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	b2 01       	movw	r22, r4
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
    16b2:	01 e0       	ldi	r16, 0x01	; 1
    16b4:	2c e2       	ldi	r18, 0x2C	; 44
    16b6:	a5 01       	movw	r20, r10
    16b8:	68 e2       	ldi	r22, 0x28	; 40
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	ce 01       	movw	r24, r28
    16be:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    16c2:	88 23       	and	r24, r24
    16c4:	79 f3       	breq	.-34     	; 0x16a4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    16c6:	02 e0       	ldi	r16, 0x02	; 2
    16c8:	2c e2       	ldi	r18, 0x2C	; 44
    16ca:	a6 01       	movw	r20, r12
    16cc:	6b e1       	ldi	r22, 0x1B	; 27
    16ce:	71 e0       	ldi	r23, 0x01	; 1
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	08 95       	ret

000016f4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    16f4:	2f 92       	push	r2
    16f6:	3f 92       	push	r3
    16f8:	4f 92       	push	r4
    16fa:	5f 92       	push	r5
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
    171a:	3b 01       	movw	r6, r22
    171c:	1a 01       	movw	r2, r20
    171e:	29 01       	movw	r4, r18
    1720:	48 01       	movw	r8, r16
    1722:	57 01       	movw	r10, r14
    1724:	61 ef       	ldi	r22, 0xF1	; 241
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	8f ec       	ldi	r24, 0xCF	; 207
    172a:	93 e0       	ldi	r25, 0x03	; 3
    172c:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1730:	b3 01       	movw	r22, r6
    1732:	ce 01       	movw	r24, r28
    1734:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    1738:	88 23       	and	r24, r24
    173a:	09 f4       	brne	.+2      	; 0x173e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x4a>
    173c:	97 c0       	rjmp	.+302    	; 0x186c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x178>
    173e:	6a ee       	ldi	r22, 0xEA	; 234
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	8f ec       	ldi	r24, 0xCF	; 207
    1744:	93 e0       	ldi	r25, 0x03	; 3
    1746:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    174a:	a1 01       	movw	r20, r2
    174c:	62 ee       	ldi	r22, 0xE2	; 226
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 ac 05 	call	0xb58	; 0xb58 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1756:	88 23       	and	r24, r24
    1758:	09 f4       	brne	.+2      	; 0x175c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x68>
    175a:	88 c0       	rjmp	.+272    	; 0x186c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x178>
    175c:	6b ed       	ldi	r22, 0xDB	; 219
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	8f ec       	ldi	r24, 0xCF	; 207
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1768:	a8 01       	movw	r20, r16
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	00 e1       	ldi	r16, 0x10	; 16
    1770:	17 e2       	ldi	r17, 0x27	; 39
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN13Adafruit_FONA9HTTP_dataEmm>
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x8e>
    1780:	75 c0       	rjmp	.+234    	; 0x186c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x178>
    1782:	64 ed       	ldi	r22, 0xD4	; 212
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	8f ec       	ldi	r24, 0xCF	; 207
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    178e:	fe 01       	movw	r30, r28
    1790:	e3 5e       	subi	r30, 0xE3	; 227
    1792:	fe 4f       	sbci	r31, 0xFE	; 254
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	dc 01       	movw	r26, r24
    179a:	ed 91       	ld	r30, X+
    179c:	fc 91       	ld	r31, X
    179e:	02 80       	ldd	r0, Z+2	; 0x02
    17a0:	f3 81       	ldd	r31, Z+3	; 0x03
    17a2:	e0 2d       	mov	r30, r0
    17a4:	a4 01       	movw	r20, r8
    17a6:	b2 01       	movw	r22, r4
    17a8:	09 95       	icall
    17aa:	6d ec       	ldi	r22, 0xCD	; 205
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	8f ec       	ldi	r24, 0xCF	; 207
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    17b6:	fe 01       	movw	r30, r28
    17b8:	e5 5e       	subi	r30, 0xE5	; 229
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	40 e1       	ldi	r20, 0x10	; 16
    17c2:	57 e2       	ldi	r21, 0x27	; 39
    17c4:	ce 01       	movw	r24, r28
    17c6:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    17ca:	88 23       	and	r24, r24
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0xdc>
    17ce:	4e c0       	rjmp	.+156    	; 0x186c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x178>
    17d0:	66 ec       	ldi	r22, 0xC6	; 198
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	8f ec       	ldi	r24, 0xCF	; 207
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    17dc:	10 e1       	ldi	r17, 0x10	; 16
    17de:	e1 2e       	mov	r14, r17
    17e0:	17 e2       	ldi	r17, 0x27	; 39
    17e2:	f1 2e       	mov	r15, r17
    17e4:	00 e0       	ldi	r16, 0x00	; 0
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	96 01       	movw	r18, r12
    17ea:	a5 01       	movw	r20, r10
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    17f4:	88 23       	and	r24, r24
    17f6:	d1 f1       	breq	.+116    	; 0x186c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x178>
    17f8:	6f eb       	ldi	r22, 0xBF	; 191
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	8f ec       	ldi	r24, 0xCF	; 207
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1804:	66 eb       	ldi	r22, 0xB6	; 182
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	8f ec       	ldi	r24, 0xCF	; 207
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1810:	f5 01       	movw	r30, r10
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	4a e0       	ldi	r20, 0x0A	; 10
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	8f ec       	ldi	r24, 0xCF	; 207
    181c:	93 e0       	ldi	r25, 0x03	; 3
    181e:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN5Print7printlnEji>
    1822:	60 eb       	ldi	r22, 0xB0	; 176
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	8f ec       	ldi	r24, 0xCF	; 207
    1828:	93 e0       	ldi	r25, 0x03	; 3
    182a:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    182e:	d6 01       	movw	r26, r12
    1830:	6d 91       	ld	r22, X+
    1832:	7c 91       	ld	r23, X
    1834:	4a e0       	ldi	r20, 0x0A	; 10
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	8f ec       	ldi	r24, 0xCF	; 207
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN5Print7printlnEji>
    1840:	b6 01       	movw	r22, r12
    1842:	ce 01       	movw	r24, r28
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	bf 90       	pop	r11
    1856:	af 90       	pop	r10
    1858:	9f 90       	pop	r9
    185a:	8f 90       	pop	r8
    185c:	7f 90       	pop	r7
    185e:	6f 90       	pop	r6
    1860:	5f 90       	pop	r5
    1862:	4f 90       	pop	r4
    1864:	3f 90       	pop	r3
    1866:	2f 90       	pop	r2
    1868:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	9f 90       	pop	r9
    1884:	8f 90       	pop	r8
    1886:	7f 90       	pop	r7
    1888:	6f 90       	pop	r6
    188a:	5f 90       	pop	r5
    188c:	4f 90       	pop	r4
    188e:	3f 90       	pop	r3
    1890:	2f 90       	pop	r2
    1892:	08 95       	ret

00001894 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>:
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	a2 97       	sbiw	r28, 0x22	; 34
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	5c 01       	movw	r10, r24
    18be:	4a 01       	movw	r8, r20
    18c0:	80 e2       	ldi	r24, 0x20	; 32
    18c2:	ee e3       	ldi	r30, 0x3E	; 62
    18c4:	f1 e0       	ldi	r31, 0x01	; 1
    18c6:	de 01       	movw	r26, r28
    18c8:	11 96       	adiw	r26, 0x01	; 1
    18ca:	01 90       	ld	r0, Z+
    18cc:	0d 92       	st	X+, r0
    18ce:	8a 95       	dec	r24
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x36>
    18d2:	ce 01       	movw	r24, r28
    18d4:	81 96       	adiw	r24, 0x21	; 33
    18d6:	6c 01       	movw	r12, r24
    18d8:	79 01       	movw	r14, r18
    18da:	8a 01       	movw	r16, r20
    18dc:	9b 01       	movw	r18, r22
    18de:	40 eb       	ldi	r20, 0xB0	; 176
    18e0:	51 e0       	ldi	r21, 0x01	; 1
    18e2:	be 01       	movw	r22, r28
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	c5 01       	movw	r24, r10
    18ea:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
    18ee:	81 11       	cpse	r24, r1
    18f0:	23 c0       	rjmp	.+70     	; 0x1938 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    18f2:	66 e3       	ldi	r22, 0x36	; 54
    18f4:	71 e0       	ldi	r23, 0x01	; 1
    18f6:	8f ec       	ldi	r24, 0xCF	; 207
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    18fe:	22 c0       	rjmp	.+68     	; 0x1944 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb0>
    1900:	d5 01       	movw	r26, r10
    1902:	ed 91       	ld	r30, X+
    1904:	fc 91       	ld	r31, X
    1906:	04 80       	ldd	r0, Z+4	; 0x04
    1908:	f5 81       	ldd	r31, Z+5	; 0x05
    190a:	e0 2d       	mov	r30, r0
    190c:	c5 01       	movw	r24, r10
    190e:	09 95       	icall
    1910:	89 2b       	or	r24, r25
    1912:	91 f0       	breq	.+36     	; 0x1938 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    1914:	d5 01       	movw	r26, r10
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	06 80       	ldd	r0, Z+6	; 0x06
    191c:	f7 81       	ldd	r31, Z+7	; 0x07
    191e:	e0 2d       	mov	r30, r0
    1920:	c5 01       	movw	r24, r10
    1922:	09 95       	icall
    1924:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1928:	95 ff       	sbrs	r25, 5
    192a:	fc cf       	rjmp	.-8      	; 0x1924 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x90>
    192c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1930:	b1 e0       	ldi	r27, 0x01	; 1
    1932:	8b 1a       	sub	r8, r27
    1934:	91 08       	sbc	r9, r1
    1936:	21 f7       	brne	.-56     	; 0x1900 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x6c>
    1938:	81 14       	cp	r8, r1
    193a:	91 04       	cpc	r9, r1
    193c:	09 f7       	brne	.-62     	; 0x1900 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x6c>
    193e:	c5 01       	movw	r24, r10
    1940:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN13Adafruit_FONA9HTTP_termEv>
    1944:	a2 96       	adiw	r28, 0x22	; 34
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	9f 90       	pop	r9
    1966:	8f 90       	pop	r8
    1968:	08 95       	ret

0000196a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	ec 01       	movw	r28, r24
    197e:	6a 01       	movw	r12, r20
    1980:	59 01       	movw	r10, r18
    1982:	10 2f       	mov	r17, r16
    1984:	0e 2d       	mov	r16, r14
    1986:	44 ef       	ldi	r20, 0xF4	; 244
    1988:	51 e0       	ldi	r21, 0x01	; 1
    198a:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    198e:	21 2f       	mov	r18, r17
    1990:	a5 01       	movw	r20, r10
    1992:	b6 01       	movw	r22, r12
    1994:	ce 01       	movw	r24, r28
    1996:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    199a:	18 2f       	mov	r17, r24
    199c:	88 23       	and	r24, r24
    199e:	31 f0       	breq	.+12     	; 0x19ac <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	64 ef       	ldi	r22, 0xF4	; 244
    19a4:	71 e0       	ldi	r23, 0x01	; 1
    19a6:	ce 01       	movw	r24, r28
    19a8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN13Adafruit_FONA8readlineEjb>
    19ac:	81 2f       	mov	r24, r17
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	bf 90       	pop	r11
    19be:	af 90       	pop	r10
    19c0:	08 95       	ret

000019c2 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	28 97       	sbiw	r28, 0x08	; 8
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    19e4:	18 86       	std	Y+8, r1	; 0x08
    19e6:	1f 82       	std	Y+7, r1	; 0x07
    19e8:	1e 82       	std	Y+6, r1	; 0x06
    19ea:	1d 82       	std	Y+5, r1	; 0x05
    19ec:	1c 82       	std	Y+4, r1	; 0x04
    19ee:	1b 82       	std	Y+3, r1	; 0x03
    19f0:	1a 82       	std	Y+2, r1	; 0x02
    19f2:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    19f4:	e1 2c       	mov	r14, r1
    19f6:	0c e2       	ldi	r16, 0x2C	; 44
    19f8:	9e 01       	movw	r18, r28
    19fa:	29 5f       	subi	r18, 0xF9	; 249
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	47 ec       	ldi	r20, 0xC7	; 199
    1a00:	52 e0       	ldi	r21, 0x02	; 2
    1a02:	60 ec       	ldi	r22, 0xC0	; 192
    1a04:	72 e0       	ldi	r23, 0x02	; 2
    1a06:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a0a:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1a0c:	ee 24       	eor	r14, r14
    1a0e:	e3 94       	inc	r14
    1a10:	9e 01       	movw	r18, r28
    1a12:	2b 5f       	subi	r18, 0xFB	; 251
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	49 eb       	ldi	r20, 0xB9	; 185
    1a18:	52 e0       	ldi	r21, 0x02	; 2
    1a1a:	62 eb       	ldi	r22, 0xB2	; 178
    1a1c:	72 e0       	ldi	r23, 0x02	; 2
    1a1e:	c6 01       	movw	r24, r12
    1a20:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a24:	88 23       	and	r24, r24
    1a26:	19 f0       	breq	.+6      	; 0x1a2e <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	f8 26       	eor	r15, r24
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1a2e:	ff 24       	eor	r15, r15
    1a30:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1a32:	e1 2c       	mov	r14, r1
    1a34:	0c e2       	ldi	r16, 0x2C	; 44
    1a36:	9e 01       	movw	r18, r28
    1a38:	2d 5f       	subi	r18, 0xFD	; 253
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	4a ea       	ldi	r20, 0xAA	; 170
    1a3e:	52 e0       	ldi	r21, 0x02	; 2
    1a40:	61 ea       	ldi	r22, 0xA1	; 161
    1a42:	72 e0       	ldi	r23, 0x02	; 2
    1a44:	c6 01       	movw	r24, r12
    1a46:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a4a:	88 23       	and	r24, r24
    1a4c:	11 f0       	breq	.+4      	; 0x1a52 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1a4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a52:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1a54:	ee 24       	eor	r14, r14
    1a56:	e3 94       	inc	r14
    1a58:	0c e2       	ldi	r16, 0x2C	; 44
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2f 5f       	subi	r18, 0xFF	; 255
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	49 e9       	ldi	r20, 0x99	; 153
    1a62:	52 e0       	ldi	r21, 0x02	; 2
    1a64:	60 e9       	ldi	r22, 0x90	; 144
    1a66:	72 e0       	ldi	r23, 0x02	; 2
    1a68:	c6 01       	movw	r24, r12
    1a6a:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a6e:	81 11       	cpse	r24, r1
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a72:	91 2f       	mov	r25, r17
    1a74:	90 62       	ori	r25, 0x20	; 32
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1a78:	99 81       	ldd	r25, Y+1	; 0x01
    1a7a:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1a7c:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1a80:	8f 2d       	mov	r24, r15
    1a82:	28 96       	adiw	r28, 0x08	; 8
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	df 90       	pop	r13
    1a9c:	cf 90       	pop	r12
    1a9e:	08 95       	ret

00001aa0 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	10 82       	st	Z, r1
    1aa4:	12 82       	std	Z+2, r1	; 0x02
    1aa6:	11 82       	std	Z+1, r1	; 0x01
    1aa8:	13 82       	std	Z+3, r1	; 0x03
    1aaa:	14 82       	std	Z+4, r1	; 0x04
    1aac:	15 82       	std	Z+5, r1	; 0x05
    1aae:	16 82       	std	Z+6, r1	; 0x06
    1ab0:	17 82       	std	Z+7, r1	; 0x07
    1ab2:	12 86       	std	Z+10, r1	; 0x0a
    1ab4:	11 86       	std	Z+9, r1	; 0x09
    1ab6:	14 86       	std	Z+12, r1	; 0x0c
    1ab8:	13 86       	std	Z+11, r1	; 0x0b
    1aba:	08 95       	ret

00001abc <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1abc:	2a e0       	ldi	r18, 0x0A	; 10
    1abe:	82 9f       	mul	r24, r18
    1ac0:	c0 01       	movw	r24, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	09 96       	adiw	r24, 0x09	; 9
    1ac6:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <_ZN7Helpers14base64_enc_lenEi>

00001aca <_ZN10GsmPayload16createRawPayloadEPh>:
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	29 e0       	ldi	r18, 0x09	; 9
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	db 01       	movw	r26, r22
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	2a 95       	dec	r18
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1ae0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ae2:	2a e0       	ldi	r18, 0x0A	; 10
    1ae4:	42 9f       	mul	r20, r18
    1ae6:	a0 01       	movw	r20, r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	09 96       	adiw	r24, 0x09	; 9
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <memcpy>

00001af8 <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1af8:	af 92       	push	r10
    1afa:	bf 92       	push	r11
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	6b 01       	movw	r12, r22
    1b12:	ed b6       	in	r14, 0x3d	; 61
    1b14:	fe b6       	in	r15, 0x3e	; 62
    1b16:	fc 01       	movw	r30, r24
    1b18:	03 81       	ldd	r16, Z+3	; 0x03
    1b1a:	fa e0       	ldi	r31, 0x0A	; 10
    1b1c:	0f 9f       	mul	r16, r31
    1b1e:	80 01       	movw	r16, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	07 5f       	subi	r16, 0xF7	; 247
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	2d b7       	in	r18, 0x3d	; 61
    1b28:	3e b7       	in	r19, 0x3e	; 62
    1b2a:	20 1b       	sub	r18, r16
    1b2c:	31 0b       	sbc	r19, r17
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	3e bf       	out	0x3e, r19	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	2d bf       	out	0x3d, r18	; 61
    1b38:	ed b7       	in	r30, 0x3d	; 61
    1b3a:	fe b7       	in	r31, 0x3e	; 62
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	5f 01       	movw	r10, r30
    1b40:	bf 01       	movw	r22, r30
    1b42:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN10GsmPayload16createRawPayloadEPh>
    1b46:	a8 01       	movw	r20, r16
    1b48:	b5 01       	movw	r22, r10
    1b4a:	c6 01       	movw	r24, r12
    1b4c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7Helpers13base64_encodeEPcPhi>
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	fe be       	out	0x3e, r15	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	ed be       	out	0x3d, r14	; 61
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	08 95       	ret

00001b70 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1b70:	fc 01       	movw	r30, r24
    1b72:	74 87       	std	Z+12, r23	; 0x0c
    1b74:	63 87       	std	Z+11, r22	; 0x0b
    1b76:	43 83       	std	Z+3, r20	; 0x03
    1b78:	08 95       	ret

00001b7a <_ZN10GsmPayload11setModuleIdEh>:
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	60 83       	st	Z, r22
    1b7e:	08 95       	ret

00001b80 <_ZN10GsmPayload13setBootNumberEj>:
    1b80:	fc 01       	movw	r30, r24
    1b82:	72 83       	std	Z+2, r23	; 0x02
    1b84:	61 83       	std	Z+1, r22	; 0x01
    1b86:	08 95       	ret

00001b88 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1b88:	fc 01       	movw	r30, r24
    1b8a:	45 83       	std	Z+5, r20	; 0x05
    1b8c:	56 83       	std	Z+6, r21	; 0x06
    1b8e:	67 83       	std	Z+7, r22	; 0x07
    1b90:	70 87       	std	Z+8, r23	; 0x08
    1b92:	08 95       	ret

00001b94 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	68 ec       	ldi	r22, 0xC8	; 200
    1b9c:	73 e0       	ldi	r23, 0x03	; 3
    1b9e:	8f ec       	ldi	r24, 0xCF	; 207
    1ba0:	93 e0       	ldi	r25, 0x03	; 3
    1ba2:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1ba6:	4a e0       	ldi	r20, 0x0A	; 10
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	68 81       	ld	r22, Y
    1bac:	8f ec       	ldi	r24, 0xCF	; 207
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	0e 94 20 1a 	call	0x3440	; 0x3440 <_ZN5Print5printEhi>
    1bb4:	64 ec       	ldi	r22, 0xC4	; 196
    1bb6:	73 e0       	ldi	r23, 0x03	; 3
    1bb8:	8f ec       	ldi	r24, 0xCF	; 207
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1bc0:	6f eb       	ldi	r22, 0xBF	; 191
    1bc2:	73 e0       	ldi	r23, 0x03	; 3
    1bc4:	8f ec       	ldi	r24, 0xCF	; 207
    1bc6:	93 e0       	ldi	r25, 0x03	; 3
    1bc8:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1bcc:	4a e0       	ldi	r20, 0x0A	; 10
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	69 81       	ldd	r22, Y+1	; 0x01
    1bd2:	8f ec       	ldi	r24, 0xCF	; 207
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	0e 94 20 1a 	call	0x3440	; 0x3440 <_ZN5Print5printEhi>
    1bda:	6b eb       	ldi	r22, 0xBB	; 187
    1bdc:	73 e0       	ldi	r23, 0x03	; 3
    1bde:	8f ec       	ldi	r24, 0xCF	; 207
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1be6:	66 ea       	ldi	r22, 0xA6	; 166
    1be8:	73 e0       	ldi	r23, 0x03	; 3
    1bea:	8f ec       	ldi	r24, 0xCF	; 207
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1bf2:	6b 81       	ldd	r22, Y+3	; 0x03
    1bf4:	63 70       	andi	r22, 0x03	; 3
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	4a e0       	ldi	r20, 0x0A	; 10
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	8f ec       	ldi	r24, 0xCF	; 207
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEii>
    1c04:	6c e9       	ldi	r22, 0x9C	; 156
    1c06:	73 e0       	ldi	r23, 0x03	; 3
    1c08:	8f ec       	ldi	r24, 0xCF	; 207
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1c10:	6b 81       	ldd	r22, Y+3	; 0x03
    1c12:	6c 71       	andi	r22, 0x1C	; 28
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	75 95       	asr	r23
    1c18:	67 95       	ror	r22
    1c1a:	75 95       	asr	r23
    1c1c:	67 95       	ror	r22
    1c1e:	4a e0       	ldi	r20, 0x0A	; 10
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	8f ec       	ldi	r24, 0xCF	; 207
    1c24:	93 e0       	ldi	r25, 0x03	; 3
    1c26:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEii>
    1c2a:	63 e9       	ldi	r22, 0x93	; 147
    1c2c:	73 e0       	ldi	r23, 0x03	; 3
    1c2e:	8f ec       	ldi	r24, 0xCF	; 207
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1c36:	6b 81       	ldd	r22, Y+3	; 0x03
    1c38:	65 fb       	bst	r22, 5
    1c3a:	66 27       	eor	r22, r22
    1c3c:	60 f9       	bld	r22, 0
    1c3e:	4a e0       	ldi	r20, 0x0A	; 10
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	8f ec       	ldi	r24, 0xCF	; 207
    1c46:	93 e0       	ldi	r25, 0x03	; 3
    1c48:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEii>
    1c4c:	6f e8       	ldi	r22, 0x8F	; 143
    1c4e:	73 e0       	ldi	r23, 0x03	; 3
    1c50:	8f ec       	ldi	r24, 0xCF	; 207
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1c58:	62 e8       	ldi	r22, 0x82	; 130
    1c5a:	73 e0       	ldi	r23, 0x03	; 3
    1c5c:	8f ec       	ldi	r24, 0xCF	; 207
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1c64:	4a e0       	ldi	r20, 0x0A	; 10
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	6a 81       	ldd	r22, Y+2	; 0x02
    1c6a:	8f ec       	ldi	r24, 0xCF	; 207
    1c6c:	93 e0       	ldi	r25, 0x03	; 3
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	0c 94 27 1a 	jmp	0x344e	; 0x344e <_ZN5Print7printlnEhi>

00001c76 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1c76:	fc 01       	movw	r30, r24
    1c78:	22 81       	ldd	r18, Z+2	; 0x02
    1c7a:	21 11       	cpse	r18, r1
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1c7e:	90 81       	ld	r25, Z
    1c80:	93 36       	cpi	r25, 0x63	; 99
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	97 30       	cpi	r25, 0x07	; 7
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	08 95       	ret

00001c8e <_ZN7Helpers15printSensorDataEP10SensorData>:
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	ec 01       	movw	r28, r24
    1c94:	6a e7       	ldi	r22, 0x7A	; 122
    1c96:	73 e0       	ldi	r23, 0x03	; 3
    1c98:	8f ec       	ldi	r24, 0xCF	; 207
    1c9a:	93 e0       	ldi	r25, 0x03	; 3
    1c9c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1ca0:	69 81       	ldd	r22, Y+1	; 0x01
    1ca2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ca4:	4a e0       	ldi	r20, 0x0A	; 10
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	8f ec       	ldi	r24, 0xCF	; 207
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN5Print5printEji>
    1cb0:	66 e7       	ldi	r22, 0x76	; 118
    1cb2:	73 e0       	ldi	r23, 0x03	; 3
    1cb4:	8f ec       	ldi	r24, 0xCF	; 207
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1cbc:	60 e7       	ldi	r22, 0x70	; 112
    1cbe:	73 e0       	ldi	r23, 0x03	; 3
    1cc0:	8f ec       	ldi	r24, 0xCF	; 207
    1cc2:	93 e0       	ldi	r25, 0x03	; 3
    1cc4:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1cc8:	6b 81       	ldd	r22, Y+3	; 0x03
    1cca:	7c 81       	ldd	r23, Y+4	; 0x04
    1ccc:	4a e0       	ldi	r20, 0x0A	; 10
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	8f ec       	ldi	r24, 0xCF	; 207
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN5Print5printEji>
    1cd8:	6c e6       	ldi	r22, 0x6C	; 108
    1cda:	73 e0       	ldi	r23, 0x03	; 3
    1cdc:	8f ec       	ldi	r24, 0xCF	; 207
    1cde:	93 e0       	ldi	r25, 0x03	; 3
    1ce0:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1ce4:	63 e6       	ldi	r22, 0x63	; 99
    1ce6:	73 e0       	ldi	r23, 0x03	; 3
    1ce8:	8f ec       	ldi	r24, 0xCF	; 207
    1cea:	93 e0       	ldi	r25, 0x03	; 3
    1cec:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1cf0:	6d 81       	ldd	r22, Y+5	; 0x05
    1cf2:	7e 81       	ldd	r23, Y+6	; 0x06
    1cf4:	4a e0       	ldi	r20, 0x0A	; 10
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	8f ec       	ldi	r24, 0xCF	; 207
    1cfa:	93 e0       	ldi	r25, 0x03	; 3
    1cfc:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN5Print5printEji>
    1d00:	6f e5       	ldi	r22, 0x5F	; 95
    1d02:	73 e0       	ldi	r23, 0x03	; 3
    1d04:	8f ec       	ldi	r24, 0xCF	; 207
    1d06:	93 e0       	ldi	r25, 0x03	; 3
    1d08:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1d0c:	69 e5       	ldi	r22, 0x59	; 89
    1d0e:	73 e0       	ldi	r23, 0x03	; 3
    1d10:	8f ec       	ldi	r24, 0xCF	; 207
    1d12:	93 e0       	ldi	r25, 0x03	; 3
    1d14:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	4a e0       	ldi	r20, 0x0A	; 10
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	8f ec       	ldi	r24, 0xCF	; 207
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN5Print5printEji>
    1d28:	65 e5       	ldi	r22, 0x55	; 85
    1d2a:	73 e0       	ldi	r23, 0x03	; 3
    1d2c:	8f ec       	ldi	r24, 0xCF	; 207
    1d2e:	93 e0       	ldi	r25, 0x03	; 3
    1d30:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1d34:	6e e4       	ldi	r22, 0x4E	; 78
    1d36:	73 e0       	ldi	r23, 0x03	; 3
    1d38:	8f ec       	ldi	r24, 0xCF	; 207
    1d3a:	93 e0       	ldi	r25, 0x03	; 3
    1d3c:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    1d40:	4a e0       	ldi	r20, 0x0A	; 10
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	69 85       	ldd	r22, Y+9	; 0x09
    1d46:	8f ec       	ldi	r24, 0xCF	; 207
    1d48:	93 e0       	ldi	r25, 0x03	; 3
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <_ZN5Print7printlnEhi>

00001d52 <_ZN7Helpers14base64_enc_lenEi>:
    1d52:	9c 01       	movw	r18, r24
    1d54:	2e 5f       	subi	r18, 0xFE	; 254
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	e3 e0       	ldi	r30, 0x03	; 3
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	c9 01       	movw	r24, r18
    1d5e:	bf 01       	movw	r22, r30
    1d60:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__divmodhi4>
    1d64:	a9 01       	movw	r20, r18
    1d66:	48 1b       	sub	r20, r24
    1d68:	59 0b       	sbc	r21, r25
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	bf 01       	movw	r22, r30
    1d6e:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__divmodhi4>
    1d72:	cb 01       	movw	r24, r22
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	08 95       	ret

00001d80 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1d80:	dc 01       	movw	r26, r24
    1d82:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1d84:	80 81       	ld	r24, Z
    1d86:	86 95       	lsr	r24
    1d88:	86 95       	lsr	r24
    1d8a:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1d8c:	80 81       	ld	r24, Z
    1d8e:	83 70       	andi	r24, 0x03	; 3
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	92 95       	swap	r25
    1d94:	9f 70       	andi	r25, 0x0F	; 15
    1d96:	20 e1       	ldi	r18, 0x10	; 16
    1d98:	82 9f       	mul	r24, r18
    1d9a:	90 0d       	add	r25, r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	9c 93       	st	X, r25
    1da2:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	9f 70       	andi	r25, 0x0F	; 15
    1da8:	99 0f       	add	r25, r25
    1daa:	99 0f       	add	r25, r25
    1dac:	22 81       	ldd	r18, Z+2	; 0x02
    1dae:	22 95       	swap	r18
    1db0:	26 95       	lsr	r18
    1db2:	26 95       	lsr	r18
    1db4:	23 70       	andi	r18, 0x03	; 3
    1db6:	92 0f       	add	r25, r18
    1db8:	12 96       	adiw	r26, 0x02	; 2
    1dba:	9c 93       	st	X, r25
    1dbc:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	8f 73       	andi	r24, 0x3F	; 63
    1dc2:	13 96       	adiw	r26, 0x03	; 3
    1dc4:	8c 93       	st	X, r24
    1dc6:	08 95       	ret

00001dc8 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1dc8:	6f 92       	push	r6
    1dca:	7f 92       	push	r7
    1dcc:	8f 92       	push	r8
    1dce:	9f 92       	push	r9
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	27 97       	sbiw	r28, 0x07	; 7
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	6c 01       	movw	r12, r24
    1df6:	5b 01       	movw	r10, r22
    1df8:	3b 01       	movw	r6, r22
    1dfa:	64 0e       	add	r6, r20
    1dfc:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1dfe:	e1 2c       	mov	r14, r1
    1e00:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1e02:	00 e0       	ldi	r16, 0x00	; 0
    1e04:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1e06:	4e 01       	movw	r8, r28
    1e08:	85 e0       	ldi	r24, 0x05	; 5
    1e0a:	88 0e       	add	r8, r24
    1e0c:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1e0e:	6a 14       	cp	r6, r10
    1e10:	7b 04       	cpc	r7, r11
    1e12:	49 f1       	breq	.+82     	; 0x1e66 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1e14:	c8 01       	movw	r24, r16
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	f5 01       	movw	r30, r10
    1e1a:	21 91       	ld	r18, Z+
    1e1c:	5f 01       	movw	r10, r30
    1e1e:	f4 01       	movw	r30, r8
    1e20:	e0 0f       	add	r30, r16
    1e22:	f1 1f       	adc	r31, r17
    1e24:	20 83       	st	Z, r18
		if(i == 3) {
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	11 f0       	breq	.+4      	; 0x1e30 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1e2c:	8c 01       	movw	r16, r24
    1e2e:	ef cf       	rjmp	.-34     	; 0x1e0e <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1e30:	b4 01       	movw	r22, r8
    1e32:	ce 01       	movw	r24, r28
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_Z8a3_to_a4PhS_>
    1e3a:	de 01       	movw	r26, r28
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	c6 01       	movw	r24, r12
    1e40:	8e 0d       	add	r24, r14
    1e42:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1e44:	ed 91       	ld	r30, X+
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	e2 53       	subi	r30, 0x32	; 50
    1e4a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e4c:	24 91       	lpm	r18, Z
    1e4e:	fc 01       	movw	r30, r24
    1e50:	21 93       	st	Z+, r18
    1e52:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1e54:	a8 15       	cp	r26, r8
    1e56:	b9 05       	cpc	r27, r9
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1e5a:	f4 e0       	ldi	r31, 0x04	; 4
    1e5c:	ef 0e       	add	r14, r31
    1e5e:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	e3 cf       	rjmp	.-58     	; 0x1e2c <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1e66:	01 15       	cp	r16, r1
    1e68:	11 05       	cpc	r17, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1e6c:	3c c0       	rjmp	.+120    	; 0x1ee6 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1e6e:	be 01       	movw	r22, r28
    1e70:	6b 5f       	subi	r22, 0xFB	; 251
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	fb 01       	movw	r30, r22
    1e76:	e0 0f       	add	r30, r16
    1e78:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1e7a:	cf 01       	movw	r24, r30
    1e7c:	86 1b       	sub	r24, r22
    1e7e:	97 0b       	sbc	r25, r23
    1e80:	03 97       	sbiw	r24, 0x03	; 3
    1e82:	14 f4       	brge	.+4      	; 0x1e88 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1e84:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1e86:	f9 cf       	rjmp	.-14     	; 0x1e7a <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1e88:	ce 01       	movw	r24, r28
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	5c 01       	movw	r10, r24
    1e8e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_Z8a3_to_a4PhS_>
    1e92:	c6 01       	movw	r24, r12
    1e94:	8e 0d       	add	r24, r14
    1e96:	9f 1d       	adc	r25, r15
    1e98:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1e9a:	ed 91       	ld	r30, X+
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	e2 53       	subi	r30, 0x32	; 50
    1ea0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea2:	24 91       	lpm	r18, Z
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	21 93       	st	Z+, r18
    1ea8:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1eaa:	9d 01       	movw	r18, r26
    1eac:	2a 19       	sub	r18, r10
    1eae:	3b 09       	sbc	r19, r11
    1eb0:	02 17       	cp	r16, r18
    1eb2:	13 07       	cpc	r17, r19
    1eb4:	94 f7       	brge	.-28     	; 0x1e9a <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1eb6:	ff ef       	ldi	r31, 0xFF	; 255
    1eb8:	ef 1a       	sub	r14, r31
    1eba:	ff 0a       	sbc	r15, r31
    1ebc:	e0 0e       	add	r14, r16
    1ebe:	f1 1e       	adc	r15, r17
    1ec0:	f6 01       	movw	r30, r12
    1ec2:	ee 0d       	add	r30, r14
    1ec4:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1ec6:	0c 19       	sub	r16, r12
    1ec8:	1d 09       	sbc	r17, r13
    1eca:	0e 19       	sub	r16, r14
    1ecc:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1ece:	8d e3       	ldi	r24, 0x3D	; 61
    1ed0:	7f 01       	movw	r14, r30
    1ed2:	ec 18       	sub	r14, r12
    1ed4:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1ed6:	98 01       	movw	r18, r16
    1ed8:	2e 0f       	add	r18, r30
    1eda:	3f 1f       	adc	r19, r31
    1edc:	23 30       	cpi	r18, 0x03	; 3
    1ede:	31 05       	cpc	r19, r1
    1ee0:	14 f4       	brge	.+4      	; 0x1ee6 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1ee2:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1ee4:	f5 cf       	rjmp	.-22     	; 0x1ed0 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1ee6:	f6 01       	movw	r30, r12
    1ee8:	ee 0d       	add	r30, r14
    1eea:	ff 1d       	adc	r31, r15
    1eec:	10 82       	st	Z, r1
	
	return encLen;
}
    1eee:	c7 01       	movw	r24, r14
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	27 96       	adiw	r28, 0x07	; 7
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	8f 90       	pop	r8
    1f16:	7f 90       	pop	r7
    1f18:	6f 90       	pop	r6
    1f1a:	08 95       	ret

00001f1c <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	85 e0       	ldi	r24, 0x05	; 5
    1f20:	0e 94 02 1c 	call	0x3804	; 0x3804 <pinMode>
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	85 e0       	ldi	r24, 0x05	; 5
    1f28:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
    1f2c:	68 eb       	ldi	r22, 0xB8	; 184
    1f2e:	7b e0       	ldi	r23, 0x0B	; 11
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	8d e0       	ldi	r24, 0x0D	; 13
    1f3c:	0e 94 02 1c 	call	0x3804	; 0x3804 <pinMode>
    1f40:	26 e0       	ldi	r18, 0x06	; 6
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	55 e2       	ldi	r21, 0x25	; 37
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	8f ec       	ldi	r24, 0xCF	; 207
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	0e 94 10 18 	call	0x3020	; 0x3020 <_ZN14HardwareSerial5beginEmh>
    1f52:	6e e4       	ldi	r22, 0x4E	; 78
    1f54:	76 e0       	ldi	r23, 0x06	; 6
    1f56:	8f ec       	ldi	r24, 0xCF	; 207
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f5e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    1f62:	84 60       	ori	r24, 0x04	; 4
    1f64:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_behaviour>
    1f68:	08 95       	ret

00001f6a <_Z21ensureFonaInitialisedbPb>:
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	2c 97       	sbiw	r28, 0x0c	; 12
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	f8 2e       	mov	r15, r24
    1f86:	8b 01       	movw	r16, r22
    1f88:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_initFonaLoopCount>
    1f8c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_initFonaLoopCount+0x1>
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <_initFonaLoopCount+0x1>
    1f96:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_initFonaLoopCount>
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	fb 01       	movw	r30, r22
    1f9e:	80 83       	st	Z, r24
    1fa0:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_fonaStatusInit>
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	30 c0       	rjmp	.+96     	; 0x2008 <_Z21ensureFonaInitialisedbPb+0x9e>
    1fa8:	69 e3       	ldi	r22, 0x39	; 57
    1faa:	76 e0       	ldi	r23, 0x06	; 6
    1fac:	8f ec       	ldi	r24, 0xCF	; 207
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1fb4:	42 e0       	ldi	r20, 0x02	; 2
    1fb6:	63 e0       	ldi	r22, 0x03	; 3
    1fb8:	8a ee       	ldi	r24, 0xEA	; 234
    1fba:	91 e0       	ldi	r25, 0x01	; 1
    1fbc:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN13Adafruit_FONA5beginEhh>
    1fc0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <_fonaStatusInit>
    1fc4:	8f ed       	ldi	r24, 0xDF	; 223
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN12RmMemManager11getModuleIdEv>
    1fcc:	68 2f       	mov	r22, r24
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	62 59       	subi	r22, 0x92	; 146
    1fd2:	7e 4f       	sbci	r23, 0xFE	; 254
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	07 96       	adiw	r24, 0x07	; 7
    1fd8:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <_ZN6StringC1EPKc>
    1fdc:	be 01       	movw	r22, r28
    1fde:	69 5f       	subi	r22, 0xF9	; 249
    1fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_ZN6StringC1ERKS_>
    1fea:	be 01       	movw	r22, r28
    1fec:	6f 5f       	subi	r22, 0xFF	; 255
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	8a ee       	ldi	r24, 0xEA	; 234
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	0e 94 6d 1c 	call	0x38da	; 0x38da <_ZN6StringD1Ev>
    2000:	ce 01       	movw	r24, r28
    2002:	07 96       	adiw	r24, 0x07	; 7
    2004:	0e 94 6d 1c 	call	0x38da	; 0x38da <_ZN6StringD1Ev>
    2008:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_fonaStatusInit>
    200c:	83 50       	subi	r24, 0x03	; 3
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	a8 f4       	brcc	.+42     	; 0x203c <_Z21ensureFonaInitialisedbPb+0xd2>
    2012:	6e e1       	ldi	r22, 0x1E	; 30
    2014:	76 e0       	ldi	r23, 0x06	; 6
    2016:	8f ec       	ldi	r24, 0xCF	; 207
    2018:	93 e0       	ldi	r25, 0x03	; 3
    201a:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    201e:	6c e7       	ldi	r22, 0x7C	; 124
    2020:	71 e0       	ldi	r23, 0x01	; 1
    2022:	8f ec       	ldi	r24, 0xCF	; 207
    2024:	93 e0       	ldi	r25, 0x03	; 3
    2026:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    202a:	4a e0       	ldi	r20, 0x0A	; 10
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	60 91 db 01 	lds	r22, 0x01DB	; 0x8001db <_fonaStatusInit>
    2032:	8f ec       	ldi	r24, 0xCF	; 207
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN5Print7printlnEhi>
    203a:	ad c0       	rjmp	.+346    	; 0x2196 <_Z21ensureFonaInitialisedbPb+0x22c>
    203c:	ff 20       	and	r15, r15
    203e:	09 f4       	brne	.+2      	; 0x2042 <_Z21ensureFonaInitialisedbPb+0xd8>
    2040:	a7 c0       	rjmp	.+334    	; 0x2190 <_Z21ensureFonaInitialisedbPb+0x226>
    2042:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_gprsStatusInit>
    2046:	81 11       	cpse	r24, r1
    2048:	4f c0       	rjmp	.+158    	; 0x20e8 <_Z21ensureFonaInitialisedbPb+0x17e>
    204a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_initFonaLoopCount>
    204e:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_initFonaLoopCount+0x1>
    2052:	8d 33       	cpi	r24, 0x3D	; 61
    2054:	91 05       	cpc	r25, r1
    2056:	18 f0       	brcs	.+6      	; 0x205e <_Z21ensureFonaInitialisedbPb+0xf4>
    2058:	69 ef       	ldi	r22, 0xF9	; 249
    205a:	75 e0       	ldi	r23, 0x05	; 5
    205c:	41 c0       	rjmp	.+130    	; 0x20e0 <_Z21ensureFonaInitialisedbPb+0x176>
    205e:	64 e1       	ldi	r22, 0x14	; 20
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__udivmodhi4>
    2066:	89 2b       	or	r24, r25
    2068:	19 f0       	breq	.+6      	; 0x2070 <_Z21ensureFonaInitialisedbPb+0x106>
    206a:	f8 01       	movw	r30, r16
    206c:	10 82       	st	Z, r1
    206e:	3c c0       	rjmp	.+120    	; 0x20e8 <_Z21ensureFonaInitialisedbPb+0x17e>
    2070:	6c ed       	ldi	r22, 0xDC	; 220
    2072:	75 e0       	ldi	r23, 0x05	; 5
    2074:	8f ec       	ldi	r24, 0xCF	; 207
    2076:	93 e0       	ldi	r25, 0x03	; 3
    2078:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	8a ee       	ldi	r24, 0xEA	; 234
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN13Adafruit_FONA10enableGPRSEb>
    2086:	f8 2e       	mov	r15, r24
    2088:	8f ef       	ldi	r24, 0xFF	; 255
    208a:	8f 0d       	add	r24, r15
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	20 f1       	brcs	.+72     	; 0x20d8 <_Z21ensureFonaInitialisedbPb+0x16e>
    2090:	61 ec       	ldi	r22, 0xC1	; 193
    2092:	75 e0       	ldi	r23, 0x05	; 5
    2094:	8f ec       	ldi	r24, 0xCF	; 207
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    209c:	6c e7       	ldi	r22, 0x7C	; 124
    209e:	71 e0       	ldi	r23, 0x01	; 1
    20a0:	8f ec       	ldi	r24, 0xCF	; 207
    20a2:	93 e0       	ldi	r25, 0x03	; 3
    20a4:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    20a8:	6f 2d       	mov	r22, r15
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	4a e0       	ldi	r20, 0x0A	; 10
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	8f ec       	ldi	r24, 0xCF	; 207
    20b2:	93 e0       	ldi	r25, 0x03	; 3
    20b4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEii>
    20b8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_initFonaLoopCount>
    20bc:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_initFonaLoopCount+0x1>
    20c0:	cc 97       	sbiw	r24, 0x3c	; 60
    20c2:	28 f4       	brcc	.+10     	; 0x20ce <_Z21ensureFonaInitialisedbPb+0x164>
    20c4:	f8 01       	movw	r30, r16
    20c6:	10 82       	st	Z, r1
    20c8:	6b e9       	ldi	r22, 0x9B	; 155
    20ca:	75 e0       	ldi	r23, 0x05	; 5
    20cc:	09 c0       	rjmp	.+18     	; 0x20e0 <_Z21ensureFonaInitialisedbPb+0x176>
    20ce:	f0 92 da 01 	sts	0x01DA, r15	; 0x8001da <_gprsStatusInit>
    20d2:	68 e7       	ldi	r22, 0x78	; 120
    20d4:	75 e0       	ldi	r23, 0x05	; 5
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <_Z21ensureFonaInitialisedbPb+0x176>
    20d8:	f0 92 da 01 	sts	0x01DA, r15	; 0x8001da <_gprsStatusInit>
    20dc:	68 e5       	ldi	r22, 0x58	; 88
    20de:	75 e0       	ldi	r23, 0x05	; 5
    20e0:	8f ec       	ldi	r24, 0xCF	; 207
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20e8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_gprsStatusInit>
    20ec:	81 50       	subi	r24, 0x01	; 1
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <_Z21ensureFonaInitialisedbPb+0x18a>
    20f2:	51 c0       	rjmp	.+162    	; 0x2196 <_Z21ensureFonaInitialisedbPb+0x22c>
    20f4:	82 ed       	ldi	r24, 0xD2	; 210
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    20fc:	81 11       	cpse	r24, r1
    20fe:	48 c0       	rjmp	.+144    	; 0x2190 <_Z21ensureFonaInitialisedbPb+0x226>
    2100:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_gprsSignalLoopCount>
    2104:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_gprsSignalLoopCount+0x1>
    2108:	9c 01       	movw	r18, r24
    210a:	2f 5f       	subi	r18, 0xFF	; 255
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	30 93 d7 01 	sts	0x01D7, r19	; 0x8001d7 <_gprsSignalLoopCount+0x1>
    2112:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <_gprsSignalLoopCount>
    2116:	8d 32       	cpi	r24, 0x2D	; 45
    2118:	91 40       	sbci	r25, 0x01	; 1
    211a:	38 f0       	brcs	.+14     	; 0x212a <_Z21ensureFonaInitialisedbPb+0x1c0>
    211c:	6c e1       	ldi	r22, 0x1C	; 28
    211e:	75 e0       	ldi	r23, 0x05	; 5
    2120:	8f ec       	ldi	r24, 0xCF	; 207
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2128:	33 c0       	rjmp	.+102    	; 0x2190 <_Z21ensureFonaInitialisedbPb+0x226>
    212a:	8a ee       	ldi	r24, 0xEA	; 234
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA7getRSSIEv>
    2132:	69 83       	std	Y+1, r22	; 0x01
    2134:	7a 83       	std	Y+2, r23	; 0x02
    2136:	8b 83       	std	Y+3, r24	; 0x03
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	6c ef       	ldi	r22, 0xFC	; 252
    213c:	74 e0       	ldi	r23, 0x04	; 4
    213e:	8f ec       	ldi	r24, 0xCF	; 207
    2140:	93 e0       	ldi	r25, 0x03	; 3
    2142:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    2146:	ce 01       	movw	r24, r28
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    214e:	ce 01       	movw	r24, r28
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    2156:	88 23       	and	r24, r24
    2158:	99 f0       	breq	.+38     	; 0x2180 <_Z21ensureFonaInitialisedbPb+0x216>
    215a:	66 ed       	ldi	r22, 0xD6	; 214
    215c:	74 e0       	ldi	r23, 0x04	; 4
    215e:	8f ec       	ldi	r24, 0xCF	; 207
    2160:	93 e0       	ldi	r25, 0x03	; 3
    2162:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	ab 81       	ldd	r26, Y+3	; 0x03
    216c:	bc 81       	ldd	r27, Y+4	; 0x04
    216e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <_rssiStatus>
    2172:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <_rssiStatus+0x1>
    2176:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <_rssiStatus+0x2>
    217a:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <_rssiStatus+0x3>
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <_Z21ensureFonaInitialisedbPb+0x226>
    2180:	6f e9       	ldi	r22, 0x9F	; 159
    2182:	74 e0       	ldi	r23, 0x04	; 4
    2184:	8f ec       	ldi	r24, 0xCF	; 207
    2186:	93 e0       	ldi	r25, 0x03	; 3
    2188:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    218c:	f8 01       	movw	r30, r16
    218e:	10 82       	st	Z, r1
    2190:	8a ee       	ldi	r24, 0xEA	; 234
    2192:	91 e0       	ldi	r25, 0x01	; 1
    2194:	02 c0       	rjmp	.+4      	; 0x219a <_Z21ensureFonaInitialisedbPb+0x230>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	2c 96       	adiw	r28, 0x0c	; 12
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	08 95       	ret

000021b2 <_Z15switchOffSystemv>:
    21b2:	6e e7       	ldi	r22, 0x7E	; 126
    21b4:	71 e0       	ldi	r23, 0x01	; 1
    21b6:	8f ec       	ldi	r24, 0xCF	; 207
    21b8:	93 e0       	ldi	r25, 0x03	; 3
    21ba:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	85 e0       	ldi	r24, 0x05	; 5
    21c2:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
    21c6:	68 eb       	ldi	r22, 0xB8	; 184
    21c8:	7b e0       	ldi	r23, 0x0B	; 11
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0c 94 45 1b 	jmp	0x368a	; 0x368a <delay>

000021d2 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	2a 97       	sbiw	r28, 0x0a	; 10
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    21e6:	6c e8       	ldi	r22, 0x8C	; 140
    21e8:	74 e0       	ldi	r23, 0x04	; 4
    21ea:	8f ec       	ldi	r24, 0xCF	; 207
    21ec:	93 e0       	ldi	r25, 0x03	; 3
    21ee:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	1b 82       	std	Y+3, r1	; 0x03
    21f8:	1a 82       	std	Y+2, r1	; 0x02
    21fa:	1d 82       	std	Y+5, r1	; 0x05
    21fc:	1c 82       	std	Y+4, r1	; 0x04
    21fe:	1f 82       	std	Y+7, r1	; 0x07
    2200:	1e 82       	std	Y+6, r1	; 0x06
    2202:	19 86       	std	Y+9, r1	; 0x09
    2204:	18 86       	std	Y+8, r1	; 0x08
    2206:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    2208:	be 01       	movw	r22, r28
    220a:	6f 5f       	subi	r22, 0xFF	; 255
    220c:	7f 4f       	sbci	r23, 0xFF	; 255
    220e:	8d ed       	ldi	r24, 0xDD	; 221
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	2a 96       	adiw	r28, 0x0a	; 10
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	08 95       	ret

0000222a <_Z8sendDatav>:

//Adafruit_FONA* _sendDataFona = NULL;
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    222a:	4f 92       	push	r4
    222c:	5f 92       	push	r5
    222e:	6f 92       	push	r6
    2230:	7f 92       	push	r7
    2232:	8f 92       	push	r8
    2234:	9f 92       	push	r9
    2236:	af 92       	push	r10
    2238:	bf 92       	push	r11
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	a8 97       	sbiw	r28, 0x28	; 40
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
		return true;
	}
	else{
		return false;
	}
}
    2258:	ad b6       	in	r10, 0x3d	; 61
    225a:	be b6       	in	r11, 0x3e	; 62

//Adafruit_FONA* _sendDataFona = NULL;
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	boolean isInit = (_sendDataLoopCount == 0);
    225c:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_sendDataLoopCount>
    2260:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <_sendDataLoopCount+0x1>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2264:	9c 01       	movw	r18, r24
    2266:	2f 5f       	subi	r18, 0xFF	; 255
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	30 93 d1 01 	sts	0x01D1, r19	; 0x8001d1 <_sendDataLoopCount+0x1>
    226e:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <_sendDataLoopCount>
	
	if (isInit)
    2272:	89 2b       	or	r24, r25
    2274:	31 f4       	brne	.+12     	; 0x2282 <_Z8sendDatav+0x58>
		RM_LOGLN(F("Initialising Fona to send data"));
    2276:	6d e6       	ldi	r22, 0x6D	; 109
    2278:	74 e0       	ldi	r23, 0x04	; 4
    227a:	8f ec       	ldi	r24, 0xCF	; 207
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	boolean isComplete;
	Adafruit_FONA* sendDataFona = ensureFonaInitialised(true, &isComplete);
    2282:	be 01       	movw	r22, r28
    2284:	68 5d       	subi	r22, 0xD8	; 216
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_Z21ensureFonaInitialisedbPb>
    228e:	8c 01       	movw	r16, r24
	
	if (!isComplete) {
    2290:	d8 a4       	ldd	r13, Y+40	; 0x28
    2292:	d1 10       	cpse	r13, r1
    2294:	03 c0       	rjmp	.+6      	; 0x229c <_Z8sendDatav+0x72>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    2296:	65 e5       	ldi	r22, 0x55	; 85
    2298:	74 e0       	ldi	r23, 0x04	; 4
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <_Z8sendDatav+0x7a>
		return false; //Still waiting to initialise
	}
		
	if (sendDataFona == NULL) {
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	39 f4       	brne	.+14     	; 0x22ae <_Z8sendDatav+0x84>
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    22a0:	62 e4       	ldi	r22, 0x42	; 66
    22a2:	74 e0       	ldi	r23, 0x04	; 4
    22a4:	8f ec       	ldi	r24, 0xCF	; 207
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return true; //Error initialising
    22ac:	68 c0       	rjmp	.+208    	; 0x237e <_Z8sendDatav+0x154>
		sendDataFona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);

		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		
		return true;
    22ae:	8d b6       	in	r8, 0x3d	; 61
    22b0:	9e b6       	in	r9, 0x3e	; 62
	//	- may already be over the threshold when doing initialisation so kick it off if so
	//	OR should we just check RSSI and send if it's ok?
	if (true) { // _sendDataLoopCount >= GPRS_MAX_SIGNAL_WAIT_TIME) {
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = sendDataFona->getRSSI();
    22b2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA7getRSSIEv>
    22b6:	2b 01       	movw	r4, r22
    22b8:	3c 01       	movw	r6, r24
		//Helpers::printRSSI(&rssi);
		
		SensorData sData[2]; //TODO: HARDCODED
    22ba:	ce 01       	movw	r24, r28
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	7c 01       	movw	r14, r24
    22c0:	84 e1       	ldi	r24, 0x14	; 20
    22c2:	f7 01       	movw	r30, r14
    22c4:	11 92       	st	Z+, r1
    22c6:	8a 95       	dec	r24
    22c8:	e9 f7       	brne	.-6      	; 0x22c4 <_Z8sendDatav+0x9a>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	8b 87       	std	Y+11, r24	; 0x0b
		unsigned long loadedTo;
		mem.loadSensorData((SensorData*)&sData, 2, &loadedTo);
    22d0:	9e 01       	movw	r18, r28
    22d2:	2e 5d       	subi	r18, 0xDE	; 222
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	42 e0       	ldi	r20, 0x02	; 2
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	b7 01       	movw	r22, r14
    22dc:	8f ed       	ldi	r24, 0xDF	; 223
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>

		GsmPayload payload;
    22e4:	ce 01       	movw	r24, r28
    22e6:	45 96       	adiw	r24, 0x15	; 21
    22e8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN10GsmPayloadC1Ev>
		payload.setModuleId(999);
    22ec:	67 ee       	ldi	r22, 0xE7	; 231
    22ee:	ce 01       	movw	r24, r28
    22f0:	45 96       	adiw	r24, 0x15	; 21
    22f2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN10GsmPayload11setModuleIdEh>
		payload.setBootNumber(33);
    22f6:	61 e2       	ldi	r22, 0x21	; 33
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	ce 01       	movw	r24, r28
    22fc:	45 96       	adiw	r24, 0x15	; 21
    22fe:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_ZN10GsmPayload13setBootNumberEj>
		payload.setSensorData((SensorData*)&sData, 2);
    2302:	42 e0       	ldi	r20, 0x02	; 2
    2304:	b7 01       	movw	r22, r14
    2306:	ce 01       	movw	r24, r28
    2308:	45 96       	adiw	r24, 0x15	; 21
    230a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
		payload.setRSSI(rssi);
    230e:	b3 01       	movw	r22, r6
    2310:	a2 01       	movw	r20, r4
    2312:	ce 01       	movw	r24, r28
    2314:	45 96       	adiw	r24, 0x15	; 21
    2316:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
		uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(2);
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    2320:	3c 01       	movw	r6, r24

		char encodedData[encodedSz];
    2322:	8d b7       	in	r24, 0x3d	; 61
    2324:	9e b7       	in	r25, 0x3e	; 62
    2326:	86 19       	sub	r24, r6
    2328:	97 09       	sbc	r25, r7
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	9e bf       	out	0x3e, r25	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	8d bf       	out	0x3d, r24	; 61
    2334:	ed b7       	in	r30, 0x3d	; 61
    2336:	fe b7       	in	r31, 0x3e	; 62
    2338:	31 96       	adiw	r30, 0x01	; 1
    233a:	7f 01       	movw	r14, r30
		payload.createEncodedPayload(encodedData);
    233c:	bf 01       	movw	r22, r30
    233e:	ce 01       	movw	r24, r28
    2340:	45 96       	adiw	r24, 0x15	; 21
    2342:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN10GsmPayload20createEncodedPayloadEPc>

		RM_LOGLN(F("Encoded data created and ready for send:"));
    2346:	69 e1       	ldi	r22, 0x19	; 25
    2348:	74 e0       	ldi	r23, 0x04	; 4
    234a:	8f ec       	ldi	r24, 0xCF	; 207
    234c:	93 e0       	ldi	r25, 0x03	; 3
    234e:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
		RM_LOGLN(encodedData);
    2352:	b7 01       	movw	r22, r14
    2354:	8f ec       	ldi	r24, 0xCF	; 207
    2356:	93 e0       	ldi	r25, 0x03	; 3
    2358:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN5Print7printlnEPKc>

		uint16_t statuscode;
		sendDataFona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);
    235c:	9e 01       	movw	r18, r28
    235e:	2a 5d       	subi	r18, 0xDA	; 218
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	a3 01       	movw	r20, r6
    2364:	b7 01       	movw	r22, r14
    2366:	c8 01       	movw	r24, r16
    2368:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>

		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    236c:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <_sendDataLoopCount+0x1>
    2370:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <_sendDataLoopCount>
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	9e be       	out	0x3e, r9	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	8d be       	out	0x3d, r8	; 61
		return true;
	}
	else{
		return false;
	}
}
    237e:	8d 2d       	mov	r24, r13
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	be be       	out	0x3e, r11	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	ad be       	out	0x3d, r10	; 61
    238a:	a8 96       	adiw	r28, 0x28	; 40
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	df 90       	pop	r13
    23a4:	bf 90       	pop	r11
    23a6:	af 90       	pop	r10
    23a8:	9f 90       	pop	r9
    23aa:	8f 90       	pop	r8
    23ac:	7f 90       	pop	r7
    23ae:	6f 90       	pop	r6
    23b0:	5f 90       	pop	r5
    23b2:	4f 90       	pop	r4
    23b4:	08 95       	ret

000023b6 <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    23b6:	68 ee       	ldi	r22, 0xE8	; 232
    23b8:	73 e0       	ldi	r23, 0x03	; 3
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 45 1b 	call	0x368a	; 0x368a <delay>
	++_timerCounter;
    23c2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    23c6:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__data_end+0x1>
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <__data_end+0x1>
    23d0:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    23d4:	6f e0       	ldi	r22, 0x0F	; 15
    23d6:	74 e0       	ldi	r23, 0x04	; 4
    23d8:	8f ec       	ldi	r24, 0xCF	; 207
    23da:	93 e0       	ldi	r25, 0x03	; 3
    23dc:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    23e0:	6c e7       	ldi	r22, 0x7C	; 124
    23e2:	71 e0       	ldi	r23, 0x01	; 1
    23e4:	8f ec       	ldi	r24, 0xCF	; 207
    23e6:	93 e0       	ldi	r25, 0x03	; 3
    23e8:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN5Print5printEPKc>
    23ec:	4a e0       	ldi	r20, 0x0A	; 10
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	60 91 dc 01 	lds	r22, 0x01DC	; 0x8001dc <_behaviour>
    23f4:	8f ec       	ldi	r24, 0xCF	; 207
    23f6:	93 e0       	ldi	r25, 0x03	; 3
    23f8:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    23fc:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    2400:	80 ff       	sbrs	r24, 0
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <loop+0x60>
		
		if (takeReadings())
    2404:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_Z12takeReadingsv>
    2408:	88 23       	and	r24, r24
    240a:	29 f0       	breq	.+10     	; 0x2416 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    240c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    2410:	8e 7f       	andi	r24, 0xFE	; 254
    2412:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    2416:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    241a:	81 ff       	sbrs	r24, 1
    241c:	09 c0       	rjmp	.+18     	; 0x2430 <loop+0x7a>
		
		if (sendData())
    241e:	0e 94 15 11 	call	0x222a	; 0x222a <_Z8sendDatav>
    2422:	88 23       	and	r24, r24
    2424:	29 f0       	breq	.+10     	; 0x2430 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    2426:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    242a:	8d 7f       	andi	r24, 0xFD	; 253
    242c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    2430:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    2434:	82 ff       	sbrs	r24, 2
    2436:	17 c0       	rjmp	.+46     	; 0x2466 <loop+0xb0>
	
		if (_timerCounter == 1)
    2438:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    243c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__data_end+0x1>
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	31 f4       	brne	.+12     	; 0x2450 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    2444:	6f ed       	ldi	r22, 0xDF	; 223
    2446:	71 e0       	ldi	r23, 0x01	; 1
    2448:	8a ee       	ldi	r24, 0xEA	; 234
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    2450:	0e 94 15 11 	call	0x222a	; 0x222a <_Z8sendDatav>
    2454:	88 23       	and	r24, r24
    2456:	39 f0       	breq	.+14     	; 0x2466 <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    2458:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    245c:	8b 7f       	andi	r24, 0xFB	; 251
    245e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    2462:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    2466:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_behaviour>
    246a:	81 11       	cpse	r24, r1
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <loop+0xbc>
		
		switchOffSystem();
    246e:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <_Z15switchOffSystemv>
    2472:	08 95       	ret

00002474 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	64 e0       	ldi	r22, 0x04	; 4
    2478:	8a ee       	ldi	r24, 0xEA	; 234
    247a:	91 e0       	ldi	r25, 0x01	; 1
    247c:	0e 94 03 04 	call	0x806	; 0x806 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	8f ed       	ldi	r24, 0xDF	; 223
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	0e 94 61 12 	call	0x24c2	; 0x24c2 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	8d ed       	ldi	r24, 0xDD	; 221
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	0e 94 dd 12 	call	0x25ba	; 0x25ba <_ZN13SensorManagerC1Eb>
    2494:	e2 ed       	ldi	r30, 0xD2	; 210
    2496:	f1 e0       	ldi	r31, 0x01	; 1
    2498:	10 82       	st	Z, r1
    249a:	11 82       	std	Z+1, r1	; 0x01
    249c:	12 82       	std	Z+2, r1	; 0x02
    249e:	08 95       	ret

000024a0 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    24a0:	82 e6       	ldi	r24, 0x62	; 98
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <__fona+0x1>
    24a8:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__fona>
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <_ZN6StringD1Ev>

000024b4 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    24b4:	dc 01       	movw	r26, r24
    24b6:	ed 91       	ld	r30, X+
    24b8:	fc 91       	ld	r31, X
    24ba:	01 90       	ld	r0, Z+
    24bc:	f0 81       	ld	r31, Z
    24be:	e0 2d       	mov	r30, r0
    24c0:	09 94       	ijmp

000024c2 <_ZN12RmMemManagerC1Eb>:
    24c2:	fc 01       	movw	r30, r24
    24c4:	14 82       	std	Z+4, r1	; 0x04
    24c6:	15 82       	std	Z+5, r1	; 0x05
    24c8:	16 82       	std	Z+6, r1	; 0x06
    24ca:	17 82       	std	Z+7, r1	; 0x07
    24cc:	80 e8       	ldi	r24, 0x80	; 128
    24ce:	80 87       	std	Z+8, r24	; 0x08
    24d0:	81 87       	std	Z+9, r24	; 0x09
    24d2:	12 86       	std	Z+10, r1	; 0x0a
    24d4:	63 83       	std	Z+3, r22	; 0x03
    24d6:	61 11       	cpse	r22, r1
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <_ZN12RmMemManagerC1Eb+0x20>
    24da:	87 e7       	ldi	r24, 0x77	; 119
    24dc:	93 e0       	ldi	r25, 0x03	; 3
    24de:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <_ZN7TwoWire5beginEv>
    24e2:	08 95       	ret

000024e4 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:
    24e4:	fc 01       	movw	r30, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	61 15       	cp	r22, r1
    24ee:	71 05       	cpc	r23, r1
    24f0:	39 f0       	breq	.+14     	; 0x2500 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x1c>
    24f2:	42 81       	ldd	r20, Z+2	; 0x02
    24f4:	2a e0       	ldi	r18, 0x0A	; 10
    24f6:	42 9f       	mul	r20, r18
    24f8:	a0 01       	movw	r20, r0
    24fa:	11 24       	eor	r1, r1
    24fc:	0e 94 65 22 	call	0x44ca	; 0x44ca <memcpy>
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	08 95       	ret

0000250a <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	eb 01       	movw	r28, r22
    2518:	7b 01       	movw	r14, r22
    251a:	e4 0e       	add	r14, r20
    251c:	f1 1c       	adc	r15, r1
    251e:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2520:	ce 15       	cp	r28, r14
    2522:	df 05       	cpc	r29, r15
    2524:	71 f1       	breq	.+92     	; 0x2582 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    2526:	60 e5       	ldi	r22, 0x50	; 80
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	87 e7       	ldi	r24, 0x77	; 119
    252c:	93 e0       	ldi	r25, 0x03	; 3
    252e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    2532:	61 2f       	mov	r22, r17
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	87 e7       	ldi	r24, 0x77	; 119
    2538:	93 e0       	ldi	r25, 0x03	; 3
    253a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    253e:	b8 01       	movw	r22, r16
    2540:	77 27       	eor	r23, r23
    2542:	87 e7       	ldi	r24, 0x77	; 119
    2544:	93 e0       	ldi	r25, 0x03	; 3
    2546:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    254a:	87 e7       	ldi	r24, 0x77	; 119
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	60 e5       	ldi	r22, 0x50	; 80
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	87 e7       	ldi	r24, 0x77	; 119
    255c:	93 e0       	ldi	r25, 0x03	; 3
    255e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    2562:	87 e7       	ldi	r24, 0x77	; 119
    2564:	93 e0       	ldi	r25, 0x03	; 3
    2566:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire9availableEv>
    256a:	89 2b       	or	r24, r25
    256c:	29 f0       	breq	.+10     	; 0x2578 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    256e:	87 e7       	ldi	r24, 0x77	; 119
    2570:	93 e0       	ldi	r25, 0x03	; 3
    2572:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_ZN7TwoWire4readEv>
    2576:	01 c0       	rjmp	.+2      	; 0x257a <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    2578:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    257a:	89 93       	st	Y+, r24
    257c:	0f 5f       	subi	r16, 0xFF	; 255
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2580:	cf cf       	rjmp	.-98     	; 0x2520 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	08 95       	ret

00002590 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	1f 92       	push	r1
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    259c:	41 e0       	ldi	r20, 0x01	; 1
    259e:	be 01       	movw	r22, r28
    25a0:	6f 5f       	subi	r22, 0xFF	; 255
    25a2:	7f 4f       	sbci	r23, 0xFF	; 255
    25a4:	0e 94 85 12 	call	0x250a	; 0x250a <_Z12internalReadjPhh>
	return value;
}
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	0f 90       	pop	r0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <_ZN12RmMemManager18getUCharFromMemoryEj>

000025ba <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    25ba:	fc 01       	movw	r30, r24
    25bc:	60 83       	st	Z, r22
    25be:	08 95       	ret

000025c0 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    25c0:	fc 01       	movw	r30, r24
    25c2:	80 81       	ld	r24, Z
    25c4:	81 11       	cpse	r24, r1
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    25c8:	86 2f       	mov	r24, r22
    25ca:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    25ce:	85 e0       	ldi	r24, 0x05	; 5
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	08 95       	ret

000025d4 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    25d4:	fc 01       	movw	r30, r24
    25d6:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    25d8:	81 81       	ldd	r24, Z+1	; 0x01
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	12 96       	adiw	r26, 0x02	; 2
    25e2:	9c 93       	st	X, r25
    25e4:	8e 93       	st	-X, r24
    25e6:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    25e8:	81 81       	ldd	r24, Z+1	; 0x01
    25ea:	2a e0       	ldi	r18, 0x0A	; 10
    25ec:	82 9f       	mul	r24, r18
    25ee:	c0 01       	movw	r24, r0
    25f0:	11 24       	eor	r1, r1
    25f2:	14 96       	adiw	r26, 0x04	; 4
    25f4:	9c 93       	st	X, r25
    25f6:	8e 93       	st	-X, r24
    25f8:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    25fa:	81 81       	ldd	r24, Z+1	; 0x01
    25fc:	67 e0       	ldi	r22, 0x07	; 7
    25fe:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodqi4>
    2602:	89 2f       	mov	r24, r25
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	16 96       	adiw	r26, 0x06	; 6
    2608:	9c 93       	st	X, r25
    260a:	8e 93       	st	-X, r24
    260c:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    260e:	81 81       	ldd	r24, Z+1	; 0x01
    2610:	24 e6       	ldi	r18, 0x64	; 100
    2612:	82 9f       	mul	r24, r18
    2614:	c0 01       	movw	r24, r0
    2616:	11 24       	eor	r1, r1
    2618:	18 96       	adiw	r26, 0x08	; 8
    261a:	9c 93       	st	X, r25
    261c:	8e 93       	st	-X, r24
    261e:	17 97       	sbiw	r26, 0x07	; 7
    2620:	08 95       	ret

00002622 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    2622:	af 92       	push	r10
    2624:	bf 92       	push	r11
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	8c 01       	movw	r16, r24
    2638:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    263a:	fc 01       	movw	r30, r24
    263c:	80 81       	ld	r24, Z
    263e:	88 23       	and	r24, r24
    2640:	21 f0       	breq	.+8      	; 0x264a <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    2642:	c8 01       	movw	r24, r16
    2644:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN13SensorManager11getMockDataEP10SensorData>
    2648:	1b c0       	rjmp	.+54     	; 0x2680 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    264a:	6e e0       	ldi	r22, 0x0E	; 14
    264c:	c8 01       	movw	r24, r16
    264e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_ZN13SensorManager16takeSampleAnalogEh>
    2652:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    2654:	6f e0       	ldi	r22, 0x0F	; 15
    2656:	c8 01       	movw	r24, r16
    2658:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_ZN13SensorManager16takeSampleAnalogEh>
    265c:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    265e:	61 e1       	ldi	r22, 0x11	; 17
    2660:	c8 01       	movw	r24, r16
    2662:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_ZN13SensorManager16takeSampleAnalogEh>
    2666:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    2668:	60 e1       	ldi	r22, 0x10	; 16
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    2670:	ba 82       	std	Y+2, r11	; 0x02
    2672:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    2674:	dc 82       	std	Y+4, r13	; 0x04
    2676:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    2678:	fe 82       	std	Y+6, r15	; 0x06
    267a:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2680:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	ff 90       	pop	r15
    268c:	ef 90       	pop	r14
    268e:	df 90       	pop	r13
    2690:	cf 90       	pop	r12
    2692:	bf 90       	pop	r11
    2694:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    2696:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <_ZN7Helpers15printSensorDataEP10SensorData>

0000269a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    269a:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_state>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <twi_sendStop>
    26a4:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <twi_inRepStart>
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	82 e1       	ldi	r24, 0x12	; 18
    26ac:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	83 e1       	ldi	r24, 0x13	; 19
    26b4:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
    26b8:	e9 eb       	ldi	r30, 0xB9	; 185
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	8e 7f       	andi	r24, 0xFE	; 254
    26c0:	80 83       	st	Z, r24
    26c2:	80 81       	ld	r24, Z
    26c4:	8d 7f       	andi	r24, 0xFD	; 253
    26c6:	80 83       	st	Z, r24
    26c8:	88 e4       	ldi	r24, 0x48	; 72
    26ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    26ce:	85 e4       	ldi	r24, 0x45	; 69
    26d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    26d4:	08 95       	ret

000026d6 <twi_readFrom>:
    26d6:	41 32       	cpi	r20, 0x21	; 33
    26d8:	08 f0       	brcs	.+2      	; 0x26dc <twi_readFrom+0x6>
    26da:	43 c0       	rjmp	.+134    	; 0x2762 <twi_readFrom+0x8c>
    26dc:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_state>
    26e0:	91 11       	cpse	r25, r1
    26e2:	fc cf       	rjmp	.-8      	; 0x26dc <twi_readFrom+0x6>
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <twi_state>
    26ea:	20 93 74 03 	sts	0x0374, r18	; 0x800374 <twi_sendStop>
    26ee:	2f ef       	ldi	r18, 0xFF	; 255
    26f0:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <twi_error>
    26f4:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_masterBufferIndex>
    26f8:	24 0f       	add	r18, r20
    26fa:	20 93 4d 03 	sts	0x034D, r18	; 0x80034d <twi_masterBufferLength>
    26fe:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <twi_slarw>
    2702:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <twi_slarw>
    2706:	88 0f       	add	r24, r24
    2708:	89 2b       	or	r24, r25
    270a:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <twi_slarw>
    270e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_inRepStart>
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	61 f4       	brne	.+24     	; 0x272e <twi_readFrom+0x58>
    2716:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <twi_inRepStart>
    271a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_slarw>
    271e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2722:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2726:	83 fd       	sbrc	r24, 3
    2728:	f8 cf       	rjmp	.-16     	; 0x271a <twi_readFrom+0x44>
    272a:	85 ec       	ldi	r24, 0xC5	; 197
    272c:	01 c0       	rjmp	.+2      	; 0x2730 <twi_readFrom+0x5a>
    272e:	85 ee       	ldi	r24, 0xE5	; 229
    2730:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2734:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <twi_state>
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	e1 f3       	breq	.-8      	; 0x2734 <twi_readFrom+0x5e>
    273c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_masterBufferIndex>
    2740:	84 17       	cp	r24, r20
    2742:	10 f4       	brcc	.+4      	; 0x2748 <twi_readFrom+0x72>
    2744:	40 91 4e 03 	lds	r20, 0x034E	; 0x80034e <twi_masterBufferIndex>
    2748:	af e4       	ldi	r26, 0x4F	; 79
    274a:	b3 e0       	ldi	r27, 0x03	; 3
    274c:	96 2f       	mov	r25, r22
    274e:	fb 01       	movw	r30, r22
    2750:	8e 2f       	mov	r24, r30
    2752:	89 1b       	sub	r24, r25
    2754:	84 17       	cp	r24, r20
    2756:	18 f4       	brcc	.+6      	; 0x275e <twi_readFrom+0x88>
    2758:	8d 91       	ld	r24, X+
    275a:	81 93       	st	Z+, r24
    275c:	f9 cf       	rjmp	.-14     	; 0x2750 <twi_readFrom+0x7a>
    275e:	84 2f       	mov	r24, r20
    2760:	08 95       	ret
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	08 95       	ret

00002766 <twi_writeTo>:
    2766:	0f 93       	push	r16
    2768:	41 32       	cpi	r20, 0x21	; 33
    276a:	08 f0       	brcs	.+2      	; 0x276e <twi_writeTo+0x8>
    276c:	4a c0       	rjmp	.+148    	; 0x2802 <twi_writeTo+0x9c>
    276e:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_state>
    2772:	91 11       	cpse	r25, r1
    2774:	fc cf       	rjmp	.-8      	; 0x276e <twi_writeTo+0x8>
    2776:	32 e0       	ldi	r19, 0x02	; 2
    2778:	30 93 76 03 	sts	0x0376, r19	; 0x800376 <twi_state>
    277c:	00 93 74 03 	sts	0x0374, r16	; 0x800374 <twi_sendStop>
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <twi_error>
    2786:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_masterBufferIndex>
    278a:	40 93 4d 03 	sts	0x034D, r20	; 0x80034d <twi_masterBufferLength>
    278e:	56 2f       	mov	r21, r22
    2790:	af e4       	ldi	r26, 0x4F	; 79
    2792:	b3 e0       	ldi	r27, 0x03	; 3
    2794:	fb 01       	movw	r30, r22
    2796:	3e 2f       	mov	r19, r30
    2798:	35 1b       	sub	r19, r21
    279a:	34 17       	cp	r19, r20
    279c:	18 f4       	brcc	.+6      	; 0x27a4 <twi_writeTo+0x3e>
    279e:	31 91       	ld	r19, Z+
    27a0:	3d 93       	st	X+, r19
    27a2:	f9 cf       	rjmp	.-14     	; 0x2796 <twi_writeTo+0x30>
    27a4:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <twi_slarw>
    27a8:	30 91 75 03 	lds	r19, 0x0375	; 0x800375 <twi_slarw>
    27ac:	88 0f       	add	r24, r24
    27ae:	83 2b       	or	r24, r19
    27b0:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <twi_slarw>
    27b4:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_inRepStart>
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	61 f4       	brne	.+24     	; 0x27d4 <twi_writeTo+0x6e>
    27bc:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <twi_inRepStart>
    27c0:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_slarw>
    27c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    27c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    27cc:	83 fd       	sbrc	r24, 3
    27ce:	f8 cf       	rjmp	.-16     	; 0x27c0 <twi_writeTo+0x5a>
    27d0:	85 ec       	ldi	r24, 0xC5	; 197
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <twi_writeTo+0x70>
    27d4:	85 ee       	ldi	r24, 0xE5	; 229
    27d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    27da:	22 23       	and	r18, r18
    27dc:	21 f0       	breq	.+8      	; 0x27e6 <twi_writeTo+0x80>
    27de:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <twi_state>
    27e2:	82 30       	cpi	r24, 0x02	; 2
    27e4:	d1 f3       	breq	.-12     	; 0x27da <twi_writeTo+0x74>
    27e6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <twi_error>
    27ea:	8f 3f       	cpi	r24, 0xFF	; 255
    27ec:	79 f0       	breq	.+30     	; 0x280c <twi_writeTo+0xa6>
    27ee:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <twi_error>
    27f2:	80 32       	cpi	r24, 0x20	; 32
    27f4:	41 f0       	breq	.+16     	; 0x2806 <twi_writeTo+0xa0>
    27f6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <twi_error>
    27fa:	80 33       	cpi	r24, 0x30	; 48
    27fc:	31 f0       	breq	.+12     	; 0x280a <twi_writeTo+0xa4>
    27fe:	94 e0       	ldi	r25, 0x04	; 4
    2800:	05 c0       	rjmp	.+10     	; 0x280c <twi_writeTo+0xa6>
    2802:	91 e0       	ldi	r25, 0x01	; 1
    2804:	03 c0       	rjmp	.+6      	; 0x280c <twi_writeTo+0xa6>
    2806:	92 e0       	ldi	r25, 0x02	; 2
    2808:	01 c0       	rjmp	.+2      	; 0x280c <twi_writeTo+0xa6>
    280a:	93 e0       	ldi	r25, 0x03	; 3
    280c:	89 2f       	mov	r24, r25
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <twi_transmit>:
    2812:	40 91 2b 03 	lds	r20, 0x032B	; 0x80032b <twi_txBufferLength>
    2816:	26 2f       	mov	r18, r22
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	24 0f       	add	r18, r20
    281c:	31 1d       	adc	r19, r1
    281e:	21 32       	cpi	r18, 0x21	; 33
    2820:	31 05       	cpc	r19, r1
    2822:	dc f4       	brge	.+54     	; 0x285a <twi_transmit+0x48>
    2824:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <twi_state>
    2828:	24 30       	cpi	r18, 0x04	; 4
    282a:	c9 f4       	brne	.+50     	; 0x285e <twi_transmit+0x4c>
    282c:	fc 01       	movw	r30, r24
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	86 17       	cp	r24, r22
    2834:	58 f4       	brcc	.+22     	; 0x284c <twi_transmit+0x3a>
    2836:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <twi_txBufferLength>
    283a:	21 91       	ld	r18, Z+
    283c:	dc 01       	movw	r26, r24
    283e:	a3 5d       	subi	r26, 0xD3	; 211
    2840:	bc 4f       	sbci	r27, 0xFC	; 252
    2842:	a3 0f       	add	r26, r19
    2844:	b1 1d       	adc	r27, r1
    2846:	2c 93       	st	X, r18
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	f3 cf       	rjmp	.-26     	; 0x2832 <twi_transmit+0x20>
    284c:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_txBufferLength>
    2850:	68 0f       	add	r22, r24
    2852:	60 93 2b 03 	sts	0x032B, r22	; 0x80032b <twi_txBufferLength>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	08 95       	ret
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	08 95       	ret
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	08 95       	ret

00002862 <twi_attachSlaveRxEvent>:
    2862:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <twi_onSlaveReceive+0x1>
    2866:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_onSlaveReceive>
    286a:	08 95       	ret

0000286c <twi_attachSlaveTxEvent>:
    286c:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <twi_onSlaveTransmit+0x1>
    2870:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <twi_onSlaveTransmit>
    2874:	08 95       	ret

00002876 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2876:	85 ed       	ldi	r24, 0xD5	; 213
    2878:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    287c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2880:	84 fd       	sbrc	r24, 4
    2882:	fc cf       	rjmp	.-8      	; 0x287c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2884:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_state>
    2888:	08 95       	ret

0000288a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    288a:	85 ec       	ldi	r24, 0xC5	; 197
    288c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2890:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_state>
    2894:	08 95       	ret

00002896 <__vector_24>:
}

ISR(TWI_vect)
{
    2896:	1f 92       	push	r1
    2898:	0f 92       	push	r0
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	0f 92       	push	r0
    289e:	11 24       	eor	r1, r1
    28a0:	2f 93       	push	r18
    28a2:	3f 93       	push	r19
    28a4:	4f 93       	push	r20
    28a6:	5f 93       	push	r21
    28a8:	6f 93       	push	r22
    28aa:	7f 93       	push	r23
    28ac:	8f 93       	push	r24
    28ae:	9f 93       	push	r25
    28b0:	af 93       	push	r26
    28b2:	bf 93       	push	r27
    28b4:	ef 93       	push	r30
    28b6:	ff 93       	push	r31
  switch(TW_STATUS){
    28b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    28bc:	88 7f       	andi	r24, 0xF8	; 248
    28be:	80 36       	cpi	r24, 0x60	; 96
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <__vector_24+0x2e>
    28c2:	9e c0       	rjmp	.+316    	; 0x2a00 <__vector_24+0x16a>
    28c4:	78 f5       	brcc	.+94     	; 0x2924 <__vector_24+0x8e>
    28c6:	88 32       	cpi	r24, 0x28	; 40
    28c8:	09 f4       	brne	.+2      	; 0x28cc <__vector_24+0x36>
    28ca:	5d c0       	rjmp	.+186    	; 0x2986 <__vector_24+0xf0>
    28cc:	90 f4       	brcc	.+36     	; 0x28f2 <__vector_24+0x5c>
    28ce:	80 31       	cpi	r24, 0x10	; 16
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <__vector_24+0x3e>
    28d2:	56 c0       	rjmp	.+172    	; 0x2980 <__vector_24+0xea>
    28d4:	38 f4       	brcc	.+14     	; 0x28e4 <__vector_24+0x4e>
    28d6:	88 23       	and	r24, r24
    28d8:	09 f4       	brne	.+2      	; 0x28dc <__vector_24+0x46>
    28da:	f5 c0       	rjmp	.+490    	; 0x2ac6 <__vector_24+0x230>
    28dc:	88 30       	cpi	r24, 0x08	; 8
    28de:	09 f4       	brne	.+2      	; 0x28e2 <__vector_24+0x4c>
    28e0:	4f c0       	rjmp	.+158    	; 0x2980 <__vector_24+0xea>
    28e2:	f5 c0       	rjmp	.+490    	; 0x2ace <__vector_24+0x238>
    28e4:	88 31       	cpi	r24, 0x18	; 24
    28e6:	09 f4       	brne	.+2      	; 0x28ea <__vector_24+0x54>
    28e8:	4e c0       	rjmp	.+156    	; 0x2986 <__vector_24+0xf0>
    28ea:	80 32       	cpi	r24, 0x20	; 32
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <__vector_24+0x5a>
    28ee:	5f c0       	rjmp	.+190    	; 0x29ae <__vector_24+0x118>
    28f0:	ee c0       	rjmp	.+476    	; 0x2ace <__vector_24+0x238>
    28f2:	80 34       	cpi	r24, 0x40	; 64
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__vector_24+0x62>
    28f6:	6a c0       	rjmp	.+212    	; 0x29cc <__vector_24+0x136>
    28f8:	58 f4       	brcc	.+22     	; 0x2910 <__vector_24+0x7a>
    28fa:	80 33       	cpi	r24, 0x30	; 48
    28fc:	09 f4       	brne	.+2      	; 0x2900 <__vector_24+0x6a>
    28fe:	57 c0       	rjmp	.+174    	; 0x29ae <__vector_24+0x118>
    2900:	88 33       	cpi	r24, 0x38	; 56
    2902:	09 f0       	breq	.+2      	; 0x2906 <__vector_24+0x70>
    2904:	e4 c0       	rjmp	.+456    	; 0x2ace <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2906:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <twi_error>
      twi_releaseBus();
    290a:	0e 94 45 14 	call	0x288a	; 0x288a <twi_releaseBus>
      break;
    290e:	df c0       	rjmp	.+446    	; 0x2ace <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2910:	80 35       	cpi	r24, 0x50	; 80
    2912:	09 f4       	brne	.+2      	; 0x2916 <__vector_24+0x80>
    2914:	4f c0       	rjmp	.+158    	; 0x29b4 <__vector_24+0x11e>
    2916:	88 35       	cpi	r24, 0x58	; 88
    2918:	09 f4       	brne	.+2      	; 0x291c <__vector_24+0x86>
    291a:	5d c0       	rjmp	.+186    	; 0x29d6 <__vector_24+0x140>
    291c:	88 34       	cpi	r24, 0x48	; 72
    291e:	09 f0       	breq	.+2      	; 0x2922 <__vector_24+0x8c>
    2920:	d6 c0       	rjmp	.+428    	; 0x2ace <__vector_24+0x238>
    2922:	d3 c0       	rjmp	.+422    	; 0x2aca <__vector_24+0x234>
    2924:	88 39       	cpi	r24, 0x98	; 152
    2926:	09 f4       	brne	.+2      	; 0x292a <__vector_24+0x94>
    2928:	c4 c0       	rjmp	.+392    	; 0x2ab2 <__vector_24+0x21c>
    292a:	a8 f4       	brcc	.+42     	; 0x2956 <__vector_24+0xc0>
    292c:	88 37       	cpi	r24, 0x78	; 120
    292e:	09 f4       	brne	.+2      	; 0x2932 <__vector_24+0x9c>
    2930:	67 c0       	rjmp	.+206    	; 0x2a00 <__vector_24+0x16a>
    2932:	38 f4       	brcc	.+14     	; 0x2942 <__vector_24+0xac>
    2934:	88 36       	cpi	r24, 0x68	; 104
    2936:	09 f4       	brne	.+2      	; 0x293a <__vector_24+0xa4>
    2938:	63 c0       	rjmp	.+198    	; 0x2a00 <__vector_24+0x16a>
    293a:	80 37       	cpi	r24, 0x70	; 112
    293c:	09 f4       	brne	.+2      	; 0x2940 <__vector_24+0xaa>
    293e:	60 c0       	rjmp	.+192    	; 0x2a00 <__vector_24+0x16a>
    2940:	c6 c0       	rjmp	.+396    	; 0x2ace <__vector_24+0x238>
    2942:	88 38       	cpi	r24, 0x88	; 136
    2944:	09 f4       	brne	.+2      	; 0x2948 <__vector_24+0xb2>
    2946:	b5 c0       	rjmp	.+362    	; 0x2ab2 <__vector_24+0x21c>
    2948:	80 39       	cpi	r24, 0x90	; 144
    294a:	09 f4       	brne	.+2      	; 0x294e <__vector_24+0xb8>
    294c:	5f c0       	rjmp	.+190    	; 0x2a0c <__vector_24+0x176>
    294e:	80 38       	cpi	r24, 0x80	; 128
    2950:	09 f0       	breq	.+2      	; 0x2954 <__vector_24+0xbe>
    2952:	bd c0       	rjmp	.+378    	; 0x2ace <__vector_24+0x238>
    2954:	5b c0       	rjmp	.+182    	; 0x2a0c <__vector_24+0x176>
    2956:	80 3b       	cpi	r24, 0xB0	; 176
    2958:	09 f4       	brne	.+2      	; 0x295c <__vector_24+0xc6>
    295a:	83 c0       	rjmp	.+262    	; 0x2a62 <__vector_24+0x1cc>
    295c:	38 f4       	brcc	.+14     	; 0x296c <__vector_24+0xd6>
    295e:	80 3a       	cpi	r24, 0xA0	; 160
    2960:	09 f4       	brne	.+2      	; 0x2964 <__vector_24+0xce>
    2962:	66 c0       	rjmp	.+204    	; 0x2a30 <__vector_24+0x19a>
    2964:	88 3a       	cpi	r24, 0xA8	; 168
    2966:	09 f4       	brne	.+2      	; 0x296a <__vector_24+0xd4>
    2968:	7c c0       	rjmp	.+248    	; 0x2a62 <__vector_24+0x1cc>
    296a:	b1 c0       	rjmp	.+354    	; 0x2ace <__vector_24+0x238>
    296c:	80 3c       	cpi	r24, 0xC0	; 192
    296e:	09 f4       	brne	.+2      	; 0x2972 <__vector_24+0xdc>
    2970:	a4 c0       	rjmp	.+328    	; 0x2aba <__vector_24+0x224>
    2972:	88 3c       	cpi	r24, 0xC8	; 200
    2974:	09 f4       	brne	.+2      	; 0x2978 <__vector_24+0xe2>
    2976:	a1 c0       	rjmp	.+322    	; 0x2aba <__vector_24+0x224>
    2978:	88 3b       	cpi	r24, 0xB8	; 184
    297a:	09 f4       	brne	.+2      	; 0x297e <__vector_24+0xe8>
    297c:	87 c0       	rjmp	.+270    	; 0x2a8c <__vector_24+0x1f6>
    297e:	a7 c0       	rjmp	.+334    	; 0x2ace <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2980:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_slarw>
    2984:	10 c0       	rjmp	.+32     	; 0x29a6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2986:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <twi_masterBufferIndex>
    298a:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_masterBufferLength>
    298e:	98 17       	cp	r25, r24
    2990:	70 f5       	brcc	.+92     	; 0x29ee <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2992:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <twi_masterBufferIndex>
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	8e 0f       	add	r24, r30
    299a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <twi_masterBufferIndex>
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	e1 5b       	subi	r30, 0xB1	; 177
    29a2:	fc 4f       	sbci	r31, 0xFC	; 252
    29a4:	80 81       	ld	r24, Z
    29a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    29aa:	85 ec       	ldi	r24, 0xC5	; 197
    29ac:	83 c0       	rjmp	.+262    	; 0x2ab4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    29ae:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <twi_error>
    29b2:	8b c0       	rjmp	.+278    	; 0x2aca <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    29b4:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <twi_masterBufferIndex>
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	8e 0f       	add	r24, r30
    29bc:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <twi_masterBufferIndex>
    29c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	e1 5b       	subi	r30, 0xB1	; 177
    29c8:	fc 4f       	sbci	r31, 0xFC	; 252
    29ca:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    29cc:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <twi_masterBufferIndex>
    29d0:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_masterBufferLength>
    29d4:	6b c0       	rjmp	.+214    	; 0x2aac <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    29d6:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <twi_masterBufferIndex>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	8e 0f       	add	r24, r30
    29de:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <twi_masterBufferIndex>
    29e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	e1 5b       	subi	r30, 0xB1	; 177
    29ea:	fc 4f       	sbci	r31, 0xFC	; 252
    29ec:	80 83       	st	Z, r24
	if (twi_sendStop)
    29ee:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <twi_sendStop>
    29f2:	81 11       	cpse	r24, r1
    29f4:	6a c0       	rjmp	.+212    	; 0x2aca <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    29fc:	84 ea       	ldi	r24, 0xA4	; 164
    29fe:	5e c0       	rjmp	.+188    	; 0x2abc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2a00:	83 e0       	ldi	r24, 0x03	; 3
    2a02:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2a06:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <twi_rxBufferIndex>
    2a0a:	cf cf       	rjmp	.-98     	; 0x29aa <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2a0c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_rxBufferIndex>
    2a10:	80 32       	cpi	r24, 0x20	; 32
    2a12:	08 f0       	brcs	.+2      	; 0x2a16 <__vector_24+0x180>
    2a14:	4e c0       	rjmp	.+156    	; 0x2ab2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2a16:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <twi_rxBufferIndex>
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	8e 0f       	add	r24, r30
    2a1e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <twi_rxBufferIndex>
    2a22:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	e5 5f       	subi	r30, 0xF5	; 245
    2a2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a2c:	80 83       	st	Z, r24
    2a2e:	bd cf       	rjmp	.-134    	; 0x29aa <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2a30:	0e 94 45 14 	call	0x288a	; 0x288a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2a34:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_rxBufferIndex>
    2a38:	80 32       	cpi	r24, 0x20	; 32
    2a3a:	30 f4       	brcc	.+12     	; 0x2a48 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2a3c:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <twi_rxBufferIndex>
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	e5 5f       	subi	r30, 0xF5	; 245
    2a44:	fc 4f       	sbci	r31, 0xFC	; 252
    2a46:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2a48:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <twi_rxBufferIndex>
    2a4c:	70 e0       	ldi	r23, 0x00	; 0
    2a4e:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <twi_onSlaveReceive>
    2a52:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <twi_onSlaveReceive+0x1>
    2a56:	8b e0       	ldi	r24, 0x0B	; 11
    2a58:	93 e0       	ldi	r25, 0x03	; 3
    2a5a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2a5c:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <twi_rxBufferIndex>
      break;
    2a60:	36 c0       	rjmp	.+108    	; 0x2ace <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2a62:	84 e0       	ldi	r24, 0x04	; 4
    2a64:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2a68:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2a6c:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2a70:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <twi_onSlaveTransmit>
    2a74:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <twi_onSlaveTransmit+0x1>
    2a78:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2a7a:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_txBufferLength>
    2a7e:	81 11       	cpse	r24, r1
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2a88:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2a8c:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <twi_txBufferIndex>
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	8e 0f       	add	r24, r30
    2a94:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_txBufferIndex>
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	e3 5d       	subi	r30, 0xD3	; 211
    2a9c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2aa4:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <twi_txBufferIndex>
    2aa8:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_txBufferLength>
    2aac:	98 17       	cp	r25, r24
    2aae:	08 f4       	brcc	.+2      	; 0x2ab2 <__vector_24+0x21c>
    2ab0:	7c cf       	rjmp	.-264    	; 0x29aa <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2ab2:	85 e8       	ldi	r24, 0x85	; 133
    2ab4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2ab8:	0a c0       	rjmp	.+20     	; 0x2ace <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2aba:	85 ec       	ldi	r24, 0xC5	; 197
    2abc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2ac0:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_state>
      break;
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2ac6:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <twi_error>
      twi_stop();
    2aca:	0e 94 3b 14 	call	0x2876	; 0x2876 <twi_stop>
      break;
  }
}
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2af0:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2afa:	82 1b       	sub	r24, r18
    2afc:	91 09       	sbc	r25, r1
    2afe:	08 95       	ret

00002b00 <_ZN7TwoWire4readEv>:
    2b00:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2b04:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2b08:	98 17       	cp	r25, r24
    2b0a:	50 f4       	brcc	.+20     	; 0x2b20 <_ZN7TwoWire4readEv+0x20>
    2b0c:	e9 2f       	mov	r30, r25
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	e3 55       	subi	r30, 0x53	; 83
    2b12:	fc 4f       	sbci	r31, 0xFC	; 252
    2b14:	20 81       	ld	r18, Z
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	9f 5f       	subi	r25, 0xFF	; 255
    2b1a:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <_ZN7TwoWire4readEv+0x24>
    2b20:	2f ef       	ldi	r18, 0xFF	; 255
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	c9 01       	movw	r24, r18
    2b26:	08 95       	ret

00002b28 <_ZN7TwoWire4peekEv>:
    2b28:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2b2c:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2b30:	e8 17       	cp	r30, r24
    2b32:	30 f4       	brcc	.+12     	; 0x2b40 <_ZN7TwoWire4peekEv+0x18>
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	e3 55       	subi	r30, 0x53	; 83
    2b38:	fc 4f       	sbci	r31, 0xFC	; 252
    2b3a:	80 81       	ld	r24, Z
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	08 95       	ret
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	9f ef       	ldi	r25, 0xFF	; 255
    2b44:	08 95       	ret

00002b46 <_ZN7TwoWire5flushEv>:
    2b46:	08 95       	ret

00002b48 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	ec 01       	movw	r28, r24
    2b4e:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <_ZN7TwoWire14user_onReceiveE>
    2b52:	f0 91 84 03 	lds	r31, 0x0384	; 0x800384 <_ZN7TwoWire14user_onReceiveE+0x1>
    2b56:	30 97       	sbiw	r30, 0x00	; 0
    2b58:	f1 f0       	breq	.+60     	; 0x2b96 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2b5a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2b5e:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2b62:	98 17       	cp	r25, r24
    2b64:	c0 f0       	brcs	.+48     	; 0x2b96 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	29 2f       	mov	r18, r25
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	26 17       	cp	r18, r22
    2b6e:	37 07       	cpc	r19, r23
    2b70:	54 f4       	brge	.+20     	; 0x2b86 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2b72:	de 01       	movw	r26, r28
    2b74:	a2 0f       	add	r26, r18
    2b76:	b3 1f       	adc	r27, r19
    2b78:	4c 91       	ld	r20, X
    2b7a:	d9 01       	movw	r26, r18
    2b7c:	a3 55       	subi	r26, 0x53	; 83
    2b7e:	bc 4f       	sbci	r27, 0xFC	; 252
    2b80:	4c 93       	st	X, r20
    2b82:	9f 5f       	subi	r25, 0xFF	; 255
    2b84:	f1 cf       	rjmp	.-30     	; 0x2b68 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2b86:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2b8a:	60 93 ab 03 	sts	0x03AB, r22	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2b8e:	cb 01       	movw	r24, r22
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	09 94       	ijmp
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	08 95       	ret

00002b9c <_ZN7TwoWire16onRequestServiceEv>:
    2b9c:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <_ZN7TwoWire14user_onRequestE>
    2ba0:	f0 91 86 03 	lds	r31, 0x0386	; 0x800386 <_ZN7TwoWire14user_onRequestE+0x1>
    2ba4:	30 97       	sbiw	r30, 0x00	; 0
    2ba6:	29 f0       	breq	.+10     	; 0x2bb2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2ba8:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <_ZN7TwoWire13txBufferIndexE>
    2bac:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2bb0:	09 94       	ijmp
    2bb2:	08 95       	ret

00002bb4 <_ZN7TwoWire5writeEPKhj>:
    2bb4:	cf 92       	push	r12
    2bb6:	df 92       	push	r13
    2bb8:	ef 92       	push	r14
    2bba:	ff 92       	push	r15
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	7c 01       	movw	r14, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8a 01       	movw	r16, r20
    2bca:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <_ZN7TwoWire12transmittingE>
    2bce:	22 23       	and	r18, r18
    2bd0:	89 f0       	breq	.+34     	; 0x2bf4 <_ZN7TwoWire5writeEPKhj+0x40>
    2bd2:	eb 01       	movw	r28, r22
    2bd4:	6b 01       	movw	r12, r22
    2bd6:	c4 0e       	add	r12, r20
    2bd8:	d5 1e       	adc	r13, r21
    2bda:	cc 15       	cp	r28, r12
    2bdc:	dd 05       	cpc	r29, r13
    2bde:	69 f0       	breq	.+26     	; 0x2bfa <_ZN7TwoWire5writeEPKhj+0x46>
    2be0:	69 91       	ld	r22, Y+
    2be2:	d7 01       	movw	r26, r14
    2be4:	ed 91       	ld	r30, X+
    2be6:	fc 91       	ld	r31, X
    2be8:	01 90       	ld	r0, Z+
    2bea:	f0 81       	ld	r31, Z
    2bec:	e0 2d       	mov	r30, r0
    2bee:	c7 01       	movw	r24, r14
    2bf0:	09 95       	icall
    2bf2:	f3 cf       	rjmp	.-26     	; 0x2bda <_ZN7TwoWire5writeEPKhj+0x26>
    2bf4:	64 2f       	mov	r22, r20
    2bf6:	0e 94 09 14 	call	0x2812	; 0x2812 <twi_transmit>
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	ff 90       	pop	r15
    2c06:	ef 90       	pop	r14
    2c08:	df 90       	pop	r13
    2c0a:	cf 90       	pop	r12
    2c0c:	08 95       	ret

00002c0e <_ZN7TwoWire5writeEh>:
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	1f 92       	push	r1
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	69 83       	std	Y+1, r22	; 0x01
    2c1a:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <_ZN7TwoWire12transmittingE>
    2c1e:	22 23       	and	r18, r18
    2c20:	d1 f0       	breq	.+52     	; 0x2c56 <_ZN7TwoWire5writeEh+0x48>
    2c22:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2c26:	20 32       	cpi	r18, 0x20	; 32
    2c28:	40 f0       	brcs	.+16     	; 0x2c3a <_ZN7TwoWire5writeEh+0x2c>
    2c2a:	21 e0       	ldi	r18, 0x01	; 1
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	fc 01       	movw	r30, r24
    2c30:	33 83       	std	Z+3, r19	; 0x03
    2c32:	22 83       	std	Z+2, r18	; 0x02
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	15 c0       	rjmp	.+42     	; 0x2c64 <_ZN7TwoWire5writeEh+0x56>
    2c3a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <_ZN7TwoWire13txBufferIndexE>
    2c3e:	e8 2f       	mov	r30, r24
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	e6 57       	subi	r30, 0x76	; 118
    2c44:	fc 4f       	sbci	r31, 0xFC	; 252
    2c46:	99 81       	ldd	r25, Y+1	; 0x01
    2c48:	90 83       	st	Z, r25
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <_ZN7TwoWire13txBufferIndexE>
    2c50:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2c54:	05 c0       	rjmp	.+10     	; 0x2c60 <_ZN7TwoWire5writeEh+0x52>
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	ce 01       	movw	r24, r28
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	0e 94 09 14 	call	0x2812	; 0x2812 <twi_transmit>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0f 90       	pop	r0
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	08 95       	ret

00002c6c <_ZN7TwoWireC1Ev>:
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	13 82       	std	Z+3, r1	; 0x03
    2c70:	12 82       	std	Z+2, r1	; 0x02
    2c72:	88 ee       	ldi	r24, 0xE8	; 232
    2c74:	93 e0       	ldi	r25, 0x03	; 3
    2c76:	a0 e0       	ldi	r26, 0x00	; 0
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	84 83       	std	Z+4, r24	; 0x04
    2c7c:	95 83       	std	Z+5, r25	; 0x05
    2c7e:	a6 83       	std	Z+6, r26	; 0x06
    2c80:	b7 83       	std	Z+7, r27	; 0x07
    2c82:	83 e9       	ldi	r24, 0x93	; 147
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	08 95       	ret

00002c8c <_ZN7TwoWire5beginEv>:
    2c8c:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2c90:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2c94:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <_ZN7TwoWire13txBufferIndexE>
    2c98:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2c9c:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_init>
    2ca0:	8e ec       	ldi	r24, 0xCE	; 206
    2ca2:	95 e1       	ldi	r25, 0x15	; 21
    2ca4:	0e 94 36 14 	call	0x286c	; 0x286c <twi_attachSlaveTxEvent>
    2ca8:	84 ea       	ldi	r24, 0xA4	; 164
    2caa:	95 e1       	ldi	r25, 0x15	; 21
    2cac:	0c 94 31 14 	jmp	0x2862	; 0x2862 <twi_attachSlaveRxEvent>

00002cb0 <_ZN7TwoWire17beginTransmissionEh>:
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <_ZN7TwoWire12transmittingE>
    2cb6:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <_ZN7TwoWire9txAddressE>
    2cba:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <_ZN7TwoWire13txBufferIndexE>
    2cbe:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2cc2:	08 95       	ret

00002cc4 <_ZN7TwoWire17beginTransmissionEi>:
    2cc4:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <_ZN7TwoWire17beginTransmissionEh>

00002cc8 <_ZN7TwoWire15endTransmissionEh>:
    2cc8:	0f 93       	push	r16
    2cca:	06 2f       	mov	r16, r22
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2cd2:	6a e8       	ldi	r22, 0x8A	; 138
    2cd4:	73 e0       	ldi	r23, 0x03	; 3
    2cd6:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <_ZN7TwoWire9txAddressE>
    2cda:	0e 94 b3 13 	call	0x2766	; 0x2766 <twi_writeTo>
    2cde:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <_ZN7TwoWire13txBufferIndexE>
    2ce2:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ZN7TwoWire14txBufferLengthE>
    2ce6:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <_ZN7TwoWire12transmittingE>
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <_ZN7TwoWire11requestFromEhhmhh>:
    2cee:	4f 92       	push	r4
    2cf0:	5f 92       	push	r5
    2cf2:	6f 92       	push	r6
    2cf4:	7f 92       	push	r7
    2cf6:	af 92       	push	r10
    2cf8:	bf 92       	push	r11
    2cfa:	cf 92       	push	r12
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	5c 01       	movw	r10, r24
    2d0a:	f6 2e       	mov	r15, r22
    2d0c:	d4 2f       	mov	r29, r20
    2d0e:	28 01       	movw	r4, r16
    2d10:	39 01       	movw	r6, r18
    2d12:	ee 20       	and	r14, r14
    2d14:	21 f1       	breq	.+72     	; 0x2d5e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2d16:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN7TwoWire17beginTransmissionEh>
    2d1a:	ce 2d       	mov	r28, r14
    2d1c:	c4 30       	cpi	r28, 0x04	; 4
    2d1e:	08 f0       	brcs	.+2      	; 0x2d22 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2d20:	c3 e0       	ldi	r28, 0x03	; 3
    2d22:	c1 50       	subi	r28, 0x01	; 1
    2d24:	c0 f0       	brcs	.+48     	; 0x2d56 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2d26:	28 e0       	ldi	r18, 0x08	; 8
    2d28:	c2 9f       	mul	r28, r18
    2d2a:	c0 01       	movw	r24, r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	a3 01       	movw	r20, r6
    2d30:	92 01       	movw	r18, r4
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2d34:	56 95       	lsr	r21
    2d36:	47 95       	ror	r20
    2d38:	37 95       	ror	r19
    2d3a:	27 95       	ror	r18
    2d3c:	8a 95       	dec	r24
    2d3e:	d2 f7       	brpl	.-12     	; 0x2d34 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2d40:	ca 01       	movw	r24, r20
    2d42:	b9 01       	movw	r22, r18
    2d44:	d5 01       	movw	r26, r10
    2d46:	ed 91       	ld	r30, X+
    2d48:	fc 91       	ld	r31, X
    2d4a:	01 90       	ld	r0, Z+
    2d4c:	f0 81       	ld	r31, Z
    2d4e:	e0 2d       	mov	r30, r0
    2d50:	c5 01       	movw	r24, r10
    2d52:	09 95       	icall
    2d54:	e6 cf       	rjmp	.-52     	; 0x2d22 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	c5 01       	movw	r24, r10
    2d5a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <_ZN7TwoWire15endTransmissionEh>
    2d5e:	4d 2f       	mov	r20, r29
    2d60:	d1 32       	cpi	r29, 0x21	; 33
    2d62:	08 f0       	brcs	.+2      	; 0x2d66 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	2c 2d       	mov	r18, r12
    2d68:	6d ea       	ldi	r22, 0xAD	; 173
    2d6a:	73 e0       	ldi	r23, 0x03	; 3
    2d6c:	8f 2d       	mov	r24, r15
    2d6e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <twi_readFrom>
    2d72:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <_ZN7TwoWire13rxBufferIndexE>
    2d76:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <_ZN7TwoWire14rxBufferLengthE>
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	ff 90       	pop	r15
    2d84:	ef 90       	pop	r14
    2d86:	cf 90       	pop	r12
    2d88:	bf 90       	pop	r11
    2d8a:	af 90       	pop	r10
    2d8c:	7f 90       	pop	r7
    2d8e:	6f 90       	pop	r6
    2d90:	5f 90       	pop	r5
    2d92:	4f 90       	pop	r4
    2d94:	08 95       	ret

00002d96 <_ZN7TwoWire11requestFromEhhh>:
    2d96:	cf 92       	push	r12
    2d98:	ef 92       	push	r14
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	c2 2e       	mov	r12, r18
    2da0:	e1 2c       	mov	r14, r1
    2da2:	00 e0       	ldi	r16, 0x00	; 0
    2da4:	10 e0       	ldi	r17, 0x00	; 0
    2da6:	98 01       	movw	r18, r16
    2da8:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN7TwoWire11requestFromEhhmhh>
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ef 90       	pop	r14
    2db2:	cf 90       	pop	r12
    2db4:	08 95       	ret

00002db6 <_ZN7TwoWire11requestFromEii>:
    2db6:	21 e0       	ldi	r18, 0x01	; 1
    2db8:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <_ZN7TwoWire11requestFromEhhh>

00002dbc <_ZN7TwoWire15endTransmissionEv>:
    2dbc:	61 e0       	ldi	r22, 0x01	; 1
    2dbe:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <_ZN7TwoWire15endTransmissionEh>

00002dc2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2dc2:	87 e7       	ldi	r24, 0x77	; 119
    2dc4:	93 e0       	ldi	r25, 0x03	; 3
    2dc6:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <_ZN7TwoWireC1Ev>

00002dca <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    2dca:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_mockData>
    2dce:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_mockData+0x1>
    2dd2:	0e 94 cc 20 	call	0x4198	; 0x4198 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    2dd6:	6d e9       	ldi	r22, 0x9D	; 157
    2dd8:	76 e0       	ldi	r23, 0x06	; 6
    2dda:	8f ec       	ldi	r24, 0xCF	; 207
    2ddc:	93 e0       	ldi	r25, 0x03	; 3
    2dde:	0c 94 94 19 	jmp	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>

00002de2 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

	//delay(5000);
	
	RM_LOGLN(F("TEST: Checking rssi..."));
    2de8:	66 e8       	ldi	r22, 0x86	; 134
    2dea:	76 e0       	ldi	r23, 0x06	; 6
    2dec:	8f ec       	ldi	r24, 0xCF	; 207
    2dee:	93 e0       	ldi	r25, 0x03	; 3
    2df0:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
    //uint16_t statuscode;
    //int16_t length;
    //char url[29] = "http://cars.khuddam.org.uk/r";
	//url[28]=0; //end

    Serial.println(F("****"));
    2df4:	61 e8       	ldi	r22, 0x81	; 129
    2df6:	76 e0       	ldi	r23, 0x06	; 6
    2df8:	8f ec       	ldi	r24, 0xCF	; 207
    2dfa:	93 e0       	ldi	r25, 0x03	; 3
    2dfc:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    2e00:	84 e1       	ldi	r24, 0x14	; 20
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 34 20 	call	0x4068	; 0x4068 <malloc>
    2e08:	fc 01       	movw	r30, r24
    2e0a:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_mockData+0x1>
    2e0e:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	92 83       	std	Z+2, r25	; 0x02
    2e18:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    2e1a:	8a e0       	ldi	r24, 0x0A	; 10
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	96 83       	std	Z+6, r25	; 0x06
    2e20:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    2e22:	84 e6       	ldi	r24, 0x64	; 100
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	94 83       	std	Z+4, r25	; 0x04
    2e28:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    2e2a:	83 e3       	ldi	r24, 0x33	; 51
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	90 87       	std	Z+8, r25	; 0x08
    2e30:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2e32:	83 e0       	ldi	r24, 0x03	; 3
    2e34:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	94 87       	std	Z+12, r25	; 0x0c
    2e3c:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    2e3e:	84 e1       	ldi	r24, 0x14	; 20
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	90 8b       	std	Z+16, r25	; 0x10
    2e44:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    2e46:	88 ec       	ldi	r24, 0xC8	; 200
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	96 87       	std	Z+14, r25	; 0x0e
    2e4c:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    2e4e:	84 e3       	ldi	r24, 0x34	; 52
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	92 8b       	std	Z+18, r25	; 0x12
    2e54:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    2e56:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    2e58:	6a e5       	ldi	r22, 0x5A	; 90
    2e5a:	76 e0       	ldi	r23, 0x06	; 6
    2e5c:	8f ec       	ldi	r24, 0xCF	; 207
    2e5e:	93 e0       	ldi	r25, 0x03	; 3
    2e60:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    2e64:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_mockData>
    2e68:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_mockData+0x1>
    2e6c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    2e70:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_mockData>
    2e74:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_mockData+0x1>
    2e78:	0a 96       	adiw	r24, 0x0a	; 10
    2e7a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    2e7e:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_mockData>
    2e82:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_mockData+0x1>
    2e86:	99 83       	std	Y+1, r25	; 0x01
    2e88:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    2e8a:	82 e0       	ldi	r24, 0x02	; 2
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	08 95       	ret

00002e94 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2e94:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2e96:	91 8d       	ldd	r25, Z+25	; 0x19
    2e98:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e9a:	89 2f       	mov	r24, r25
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	80 5c       	subi	r24, 0xC0	; 192
    2ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea2:	82 1b       	sub	r24, r18
    2ea4:	91 09       	sbc	r25, r1
}
    2ea6:	8f 73       	andi	r24, 0x3F	; 63
    2ea8:	99 27       	eor	r25, r25
    2eaa:	08 95       	ret

00002eac <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2eac:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2eae:	91 8d       	ldd	r25, Z+25	; 0x19
    2eb0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eb2:	98 17       	cp	r25, r24
    2eb4:	31 f0       	breq	.+12     	; 0x2ec2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2eb6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eb8:	e8 0f       	add	r30, r24
    2eba:	f1 1d       	adc	r31, r1
    2ebc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2ec2:	8f ef       	ldi	r24, 0xFF	; 255
    2ec4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2ec6:	08 95       	ret

00002ec8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2ec8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2eca:	91 8d       	ldd	r25, Z+25	; 0x19
    2ecc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ece:	98 17       	cp	r25, r24
    2ed0:	61 f0       	breq	.+24     	; 0x2eea <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2ed2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ed4:	df 01       	movw	r26, r30
    2ed6:	a8 0f       	add	r26, r24
    2ed8:	b1 1d       	adc	r27, r1
    2eda:	5d 96       	adiw	r26, 0x1d	; 29
    2edc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2ede:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ee0:	9f 5f       	subi	r25, 0xFF	; 255
    2ee2:	9f 73       	andi	r25, 0x3F	; 63
    2ee4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2eea:	8f ef       	ldi	r24, 0xFF	; 255
    2eec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2eee:	08 95       	ret

00002ef0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2ef0:	8d ec       	ldi	r24, 0xCD	; 205
    2ef2:	98 e1       	ldi	r25, 0x18	; 24
    2ef4:	89 2b       	or	r24, r25
    2ef6:	49 f0       	breq	.+18     	; 0x2f0a <_Z14serialEventRunv+0x1a>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	89 2b       	or	r24, r25
    2efe:	29 f0       	breq	.+10     	; 0x2f0a <_Z14serialEventRunv+0x1a>
    2f00:	0e 94 cd 18 	call	0x319a	; 0x319a <_Z17Serial0_availablev>
    2f04:	81 11       	cpse	r24, r1
    2f06:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2f0a:	08 95       	ret

00002f0c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2f0c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2f0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f10:	df 01       	movw	r26, r30
    2f12:	a8 0f       	add	r26, r24
    2f14:	b1 1d       	adc	r27, r1
    2f16:	a3 5a       	subi	r26, 0xA3	; 163
    2f18:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2f1c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	8f 73       	andi	r24, 0x3F	; 63
    2f24:	99 27       	eor	r25, r25
    2f26:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2f28:	a6 89       	ldd	r26, Z+22	; 0x16
    2f2a:	b7 89       	ldd	r27, Z+23	; 0x17
    2f2c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2f2e:	a0 89       	ldd	r26, Z+16	; 0x10
    2f30:	b1 89       	ldd	r27, Z+17	; 0x11
    2f32:	8c 91       	ld	r24, X
    2f34:	80 64       	ori	r24, 0x40	; 64
    2f36:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2f38:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f3a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f3c:	98 13       	cpse	r25, r24
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2f40:	02 88       	ldd	r0, Z+18	; 0x12
    2f42:	f3 89       	ldd	r31, Z+19	; 0x13
    2f44:	e0 2d       	mov	r30, r0
    2f46:	80 81       	ld	r24, Z
    2f48:	8f 7d       	andi	r24, 0xDF	; 223
    2f4a:	80 83       	st	Z, r24
    2f4c:	08 95       	ret

00002f4e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	ec 01       	movw	r28, r24
  _written = true;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2f60:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f64:	98 13       	cpse	r25, r24
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <_ZN14HardwareSerial5writeEh+0x24>
    2f68:	e8 89       	ldd	r30, Y+16	; 0x10
    2f6a:	f9 89       	ldd	r31, Y+17	; 0x11
    2f6c:	80 81       	ld	r24, Z
    2f6e:	85 fd       	sbrc	r24, 5
    2f70:	24 c0       	rjmp	.+72     	; 0x2fba <_ZN14HardwareSerial5writeEh+0x6c>
    2f72:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2f74:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2f76:	10 e0       	ldi	r17, 0x00	; 0
    2f78:	0f 5f       	subi	r16, 0xFF	; 255
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	0f 73       	andi	r16, 0x3F	; 63
    2f7e:	11 27       	eor	r17, r17
    2f80:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2f82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f84:	e8 12       	cpse	r14, r24
    2f86:	0c c0       	rjmp	.+24     	; 0x2fa0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	07 fc       	sbrc	r0, 7
    2f8c:	fa cf       	rjmp	.-12     	; 0x2f82 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2f8e:	e8 89       	ldd	r30, Y+16	; 0x10
    2f90:	f9 89       	ldd	r31, Y+17	; 0x11
    2f92:	80 81       	ld	r24, Z
    2f94:	85 ff       	sbrs	r24, 5
    2f96:	f5 cf       	rjmp	.-22     	; 0x2f82 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2f98:	ce 01       	movw	r24, r28
    2f9a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2f9e:	f1 cf       	rjmp	.-30     	; 0x2f82 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e8 0f       	add	r30, r24
    2fa6:	f1 1d       	adc	r31, r1
    2fa8:	e3 5a       	subi	r30, 0xA3	; 163
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2fae:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2fb0:	ea 89       	ldd	r30, Y+18	; 0x12
    2fb2:	fb 89       	ldd	r31, Y+19	; 0x13
    2fb4:	80 81       	ld	r24, Z
    2fb6:	80 62       	ori	r24, 0x20	; 32
    2fb8:	07 c0       	rjmp	.+14     	; 0x2fc8 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2fba:	ee 89       	ldd	r30, Y+22	; 0x16
    2fbc:	ff 89       	ldd	r31, Y+23	; 0x17
    2fbe:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2fc0:	e8 89       	ldd	r30, Y+16	; 0x10
    2fc2:	f9 89       	ldd	r31, Y+17	; 0x11
    2fc4:	80 81       	ld	r24, Z
    2fc6:	80 64       	ori	r24, 0x40	; 64
    2fc8:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	08 95       	ret

00002fdc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2fe2:	88 8d       	ldd	r24, Y+24	; 0x18
    2fe4:	88 23       	and	r24, r24
    2fe6:	c9 f0       	breq	.+50     	; 0x301a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2fe8:	ea 89       	ldd	r30, Y+18	; 0x12
    2fea:	fb 89       	ldd	r31, Y+19	; 0x13
    2fec:	80 81       	ld	r24, Z
    2fee:	85 fd       	sbrc	r24, 5
    2ff0:	05 c0       	rjmp	.+10     	; 0x2ffc <_ZN14HardwareSerial5flushEv+0x20>
    2ff2:	a8 89       	ldd	r26, Y+16	; 0x10
    2ff4:	b9 89       	ldd	r27, Y+17	; 0x11
    2ff6:	8c 91       	ld	r24, X
    2ff8:	86 fd       	sbrc	r24, 6
    2ffa:	0f c0       	rjmp	.+30     	; 0x301a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	07 fc       	sbrc	r0, 7
    3000:	f5 cf       	rjmp	.-22     	; 0x2fec <_ZN14HardwareSerial5flushEv+0x10>
    3002:	80 81       	ld	r24, Z
    3004:	85 ff       	sbrs	r24, 5
    3006:	f2 cf       	rjmp	.-28     	; 0x2fec <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3008:	a8 89       	ldd	r26, Y+16	; 0x10
    300a:	b9 89       	ldd	r27, Y+17	; 0x11
    300c:	8c 91       	ld	r24, X
    300e:	85 ff       	sbrs	r24, 5
    3010:	ed cf       	rjmp	.-38     	; 0x2fec <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3012:	ce 01       	movw	r24, r28
    3014:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3018:	e7 cf       	rjmp	.-50     	; 0x2fe8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	08 95       	ret

00003020 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	ec 01       	movw	r28, r24
    3030:	6a 01       	movw	r12, r20
    3032:	7b 01       	movw	r14, r22
    3034:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3036:	e8 89       	ldd	r30, Y+16	; 0x10
    3038:	f9 89       	ldd	r31, Y+17	; 0x11
    303a:	82 e0       	ldi	r24, 0x02	; 2
    303c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    303e:	41 15       	cp	r20, r1
    3040:	51 4e       	sbci	r21, 0xE1	; 225
    3042:	61 05       	cpc	r22, r1
    3044:	71 05       	cpc	r23, r1
    3046:	b1 f0       	breq	.+44     	; 0x3074 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	79 e0       	ldi	r23, 0x09	; 9
    304c:	8d e3       	ldi	r24, 0x3D	; 61
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	a7 01       	movw	r20, r14
    3052:	96 01       	movw	r18, r12
    3054:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__udivmodsi4>
    3058:	da 01       	movw	r26, r20
    305a:	c9 01       	movw	r24, r18
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	a1 09       	sbc	r26, r1
    3060:	b1 09       	sbc	r27, r1
    3062:	b6 95       	lsr	r27
    3064:	a7 95       	ror	r26
    3066:	97 95       	ror	r25
    3068:	87 95       	ror	r24
    306a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    306c:	21 15       	cp	r18, r1
    306e:	80 e1       	ldi	r24, 0x10	; 16
    3070:	38 07       	cpc	r19, r24
    3072:	a8 f0       	brcs	.+42     	; 0x309e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3074:	e8 89       	ldd	r30, Y+16	; 0x10
    3076:	f9 89       	ldd	r31, Y+17	; 0x11
    3078:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    307a:	60 e8       	ldi	r22, 0x80	; 128
    307c:	74 e8       	ldi	r23, 0x84	; 132
    307e:	8e e1       	ldi	r24, 0x1E	; 30
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a7 01       	movw	r20, r14
    3084:	96 01       	movw	r18, r12
    3086:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__udivmodsi4>
    308a:	da 01       	movw	r26, r20
    308c:	c9 01       	movw	r24, r18
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	a1 09       	sbc	r26, r1
    3092:	b1 09       	sbc	r27, r1
    3094:	b6 95       	lsr	r27
    3096:	a7 95       	ror	r26
    3098:	97 95       	ror	r25
    309a:	87 95       	ror	r24
    309c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    309e:	ec 85       	ldd	r30, Y+12	; 0x0c
    30a0:	fd 85       	ldd	r31, Y+13	; 0x0d
    30a2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    30a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    30a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    30a8:	20 83       	st	Z, r18

  _written = false;
    30aa:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    30ac:	ec 89       	ldd	r30, Y+20	; 0x14
    30ae:	fd 89       	ldd	r31, Y+21	; 0x15
    30b0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    30b2:	ea 89       	ldd	r30, Y+18	; 0x12
    30b4:	fb 89       	ldd	r31, Y+19	; 0x13
    30b6:	80 81       	ld	r24, Z
    30b8:	80 61       	ori	r24, 0x10	; 16
    30ba:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    30bc:	ea 89       	ldd	r30, Y+18	; 0x12
    30be:	fb 89       	ldd	r31, Y+19	; 0x13
    30c0:	80 81       	ld	r24, Z
    30c2:	88 60       	ori	r24, 0x08	; 8
    30c4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    30c6:	ea 89       	ldd	r30, Y+18	; 0x12
    30c8:	fb 89       	ldd	r31, Y+19	; 0x13
    30ca:	80 81       	ld	r24, Z
    30cc:	80 68       	ori	r24, 0x80	; 128
    30ce:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    30d0:	ea 89       	ldd	r30, Y+18	; 0x12
    30d2:	fb 89       	ldd	r31, Y+19	; 0x13
    30d4:	80 81       	ld	r24, Z
    30d6:	8f 7d       	andi	r24, 0xDF	; 223
    30d8:	80 83       	st	Z, r24
}
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	ff 90       	pop	r15
    30e2:	ef 90       	pop	r14
    30e4:	df 90       	pop	r13
    30e6:	cf 90       	pop	r12
    30e8:	08 95       	ret

000030ea <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    30ea:	1f 92       	push	r1
    30ec:	0f 92       	push	r0
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	0f 92       	push	r0
    30f2:	11 24       	eor	r1, r1
    30f4:	2f 93       	push	r18
    30f6:	8f 93       	push	r24
    30f8:	9f 93       	push	r25
    30fa:	ef 93       	push	r30
    30fc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    30fe:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <Serial+0x10>
    3102:	f0 91 e0 03 	lds	r31, 0x03E0	; 0x8003e0 <Serial+0x11>
    3106:	80 81       	ld	r24, Z
    3108:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <Serial+0x16>
    310c:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <Serial+0x17>
    3110:	82 fd       	sbrc	r24, 2
    3112:	12 c0       	rjmp	.+36     	; 0x3138 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3114:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3116:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <Serial+0x19>
    311a:	8f 5f       	subi	r24, 0xFF	; 255
    311c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    311e:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <Serial+0x1a>
    3122:	82 17       	cp	r24, r18
    3124:	51 f0       	breq	.+20     	; 0x313a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3126:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <Serial+0x19>
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	e1 53       	subi	r30, 0x31	; 49
    312e:	fc 4f       	sbci	r31, 0xFC	; 252
    3130:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3132:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <Serial+0x19>
    3136:	01 c0       	rjmp	.+2      	; 0x313a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3138:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    313a:	ff 91       	pop	r31
    313c:	ef 91       	pop	r30
    313e:	9f 91       	pop	r25
    3140:	8f 91       	pop	r24
    3142:	2f 91       	pop	r18
    3144:	0f 90       	pop	r0
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	0f 90       	pop	r0
    314a:	1f 90       	pop	r1
    314c:	18 95       	reti

0000314e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    314e:	1f 92       	push	r1
    3150:	0f 92       	push	r0
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	0f 92       	push	r0
    3156:	11 24       	eor	r1, r1
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	4f 93       	push	r20
    315e:	5f 93       	push	r21
    3160:	6f 93       	push	r22
    3162:	7f 93       	push	r23
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3170:	8f ec       	ldi	r24, 0xCF	; 207
    3172:	93 e0       	ldi	r25, 0x03	; 3
    3174:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3178:	ff 91       	pop	r31
    317a:	ef 91       	pop	r30
    317c:	bf 91       	pop	r27
    317e:	af 91       	pop	r26
    3180:	9f 91       	pop	r25
    3182:	8f 91       	pop	r24
    3184:	7f 91       	pop	r23
    3186:	6f 91       	pop	r22
    3188:	5f 91       	pop	r21
    318a:	4f 91       	pop	r20
    318c:	3f 91       	pop	r19
    318e:	2f 91       	pop	r18
    3190:	0f 90       	pop	r0
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	0f 90       	pop	r0
    3196:	1f 90       	pop	r1
    3198:	18 95       	reti

0000319a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    319a:	8f ec       	ldi	r24, 0xCF	; 207
    319c:	93 e0       	ldi	r25, 0x03	; 3
    319e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZN14HardwareSerial9availableEv>
    31a2:	21 e0       	ldi	r18, 0x01	; 1
    31a4:	89 2b       	or	r24, r25
    31a6:	09 f4       	brne	.+2      	; 0x31aa <_Z17Serial0_availablev+0x10>
    31a8:	20 e0       	ldi	r18, 0x00	; 0
}
    31aa:	82 2f       	mov	r24, r18
    31ac:	08 95       	ret

000031ae <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    31ae:	ef ec       	ldi	r30, 0xCF	; 207
    31b0:	f3 e0       	ldi	r31, 0x03	; 3
    31b2:	13 82       	std	Z+3, r1	; 0x03
    31b4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    31b6:	88 ee       	ldi	r24, 0xE8	; 232
    31b8:	93 e0       	ldi	r25, 0x03	; 3
    31ba:	a0 e0       	ldi	r26, 0x00	; 0
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	84 83       	std	Z+4, r24	; 0x04
    31c0:	95 83       	std	Z+5, r25	; 0x05
    31c2:	a6 83       	std	Z+6, r26	; 0x06
    31c4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    31c6:	83 ea       	ldi	r24, 0xA3	; 163
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
    31ce:	85 ec       	ldi	r24, 0xC5	; 197
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	95 87       	std	Z+13, r25	; 0x0d
    31d4:	84 87       	std	Z+12, r24	; 0x0c
    31d6:	84 ec       	ldi	r24, 0xC4	; 196
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	97 87       	std	Z+15, r25	; 0x0f
    31dc:	86 87       	std	Z+14, r24	; 0x0e
    31de:	80 ec       	ldi	r24, 0xC0	; 192
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	91 8b       	std	Z+17, r25	; 0x11
    31e4:	80 8b       	std	Z+16, r24	; 0x10
    31e6:	81 ec       	ldi	r24, 0xC1	; 193
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	93 8b       	std	Z+19, r25	; 0x13
    31ec:	82 8b       	std	Z+18, r24	; 0x12
    31ee:	82 ec       	ldi	r24, 0xC2	; 194
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	95 8b       	std	Z+21, r25	; 0x15
    31f4:	84 8b       	std	Z+20, r24	; 0x14
    31f6:	86 ec       	ldi	r24, 0xC6	; 198
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	97 8b       	std	Z+23, r25	; 0x17
    31fc:	86 8b       	std	Z+22, r24	; 0x16
    31fe:	11 8e       	std	Z+25, r1	; 0x19
    3200:	12 8e       	std	Z+26, r1	; 0x1a
    3202:	13 8e       	std	Z+27, r1	; 0x1b
    3204:	14 8e       	std	Z+28, r1	; 0x1c
    3206:	08 95       	ret

00003208 <initVariant>:
    3208:	08 95       	ret

0000320a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    320a:	0e 94 81 1b 	call	0x3702	; 0x3702 <init>

	initVariant();
    320e:	0e 94 04 19 	call	0x3208	; 0x3208 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3212:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3216:	c8 e7       	ldi	r28, 0x78	; 120
    3218:	d7 e1       	ldi	r29, 0x17	; 23
#endif
	
	setup();
    
	for (;;) {
		loop();
    321a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <loop>
		if (serialEventRun) serialEventRun();
    321e:	20 97       	sbiw	r28, 0x00	; 0
    3220:	e1 f3       	breq	.-8      	; 0x321a <main+0x10>
    3222:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_Z14serialEventRunv>
    3226:	f9 cf       	rjmp	.-14     	; 0x321a <main+0x10>

00003228 <_Znwj>:
    3228:	0c 94 34 20 	jmp	0x4068	; 0x4068 <malloc>

0000322c <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    322c:	cf 92       	push	r12
    322e:	df 92       	push	r13
    3230:	ef 92       	push	r14
    3232:	ff 92       	push	r15
    3234:	0f 93       	push	r16
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	6c 01       	movw	r12, r24
    323e:	7a 01       	movw	r14, r20
    3240:	8b 01       	movw	r16, r22
    3242:	c0 e0       	ldi	r28, 0x00	; 0
    3244:	d0 e0       	ldi	r29, 0x00	; 0
    3246:	ce 15       	cp	r28, r14
    3248:	df 05       	cpc	r29, r15
    324a:	81 f0       	breq	.+32     	; 0x326c <_ZN5Print5writeEPKhj+0x40>
    324c:	d8 01       	movw	r26, r16
    324e:	6d 91       	ld	r22, X+
    3250:	8d 01       	movw	r16, r26
    3252:	d6 01       	movw	r26, r12
    3254:	ed 91       	ld	r30, X+
    3256:	fc 91       	ld	r31, X
    3258:	01 90       	ld	r0, Z+
    325a:	f0 81       	ld	r31, Z
    325c:	e0 2d       	mov	r30, r0
    325e:	c6 01       	movw	r24, r12
    3260:	09 95       	icall
    3262:	89 2b       	or	r24, r25
    3264:	11 f0       	breq	.+4      	; 0x326a <_ZN5Print5writeEPKhj+0x3e>
    3266:	21 96       	adiw	r28, 0x01	; 1
    3268:	ee cf       	rjmp	.-36     	; 0x3246 <_ZN5Print5writeEPKhj+0x1a>
    326a:	7e 01       	movw	r14, r28
    326c:	c7 01       	movw	r24, r14
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	df 90       	pop	r13
    327c:	cf 90       	pop	r12
    327e:	08 95       	ret

00003280 <_ZN5Print5writeEPKc>:
    3280:	61 15       	cp	r22, r1
    3282:	71 05       	cpc	r23, r1
    3284:	79 f0       	breq	.+30     	; 0x32a4 <_ZN5Print5writeEPKc+0x24>
    3286:	fb 01       	movw	r30, r22
    3288:	01 90       	ld	r0, Z+
    328a:	00 20       	and	r0, r0
    328c:	e9 f7       	brne	.-6      	; 0x3288 <_ZN5Print5writeEPKc+0x8>
    328e:	31 97       	sbiw	r30, 0x01	; 1
    3290:	af 01       	movw	r20, r30
    3292:	46 1b       	sub	r20, r22
    3294:	57 0b       	sbc	r21, r23
    3296:	dc 01       	movw	r26, r24
    3298:	ed 91       	ld	r30, X+
    329a:	fc 91       	ld	r31, X
    329c:	02 80       	ldd	r0, Z+2	; 0x02
    329e:	f3 81       	ldd	r31, Z+3	; 0x03
    32a0:	e0 2d       	mov	r30, r0
    32a2:	09 94       	ijmp
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	08 95       	ret

000032aa <_ZN5Print5printEPK19__FlashStringHelper>:
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	8c 01       	movw	r16, r24
    32b8:	7b 01       	movw	r14, r22
    32ba:	c0 e0       	ldi	r28, 0x00	; 0
    32bc:	d0 e0       	ldi	r29, 0x00	; 0
    32be:	f7 01       	movw	r30, r14
    32c0:	ec 0f       	add	r30, r28
    32c2:	fd 1f       	adc	r31, r29
    32c4:	64 91       	lpm	r22, Z
    32c6:	66 23       	and	r22, r22
    32c8:	61 f0       	breq	.+24     	; 0x32e2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    32ca:	d8 01       	movw	r26, r16
    32cc:	ed 91       	ld	r30, X+
    32ce:	fc 91       	ld	r31, X
    32d0:	01 90       	ld	r0, Z+
    32d2:	f0 81       	ld	r31, Z
    32d4:	e0 2d       	mov	r30, r0
    32d6:	c8 01       	movw	r24, r16
    32d8:	09 95       	icall
    32da:	89 2b       	or	r24, r25
    32dc:	11 f0       	breq	.+4      	; 0x32e2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    32de:	21 96       	adiw	r28, 0x01	; 1
    32e0:	ee cf       	rjmp	.-36     	; 0x32be <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    32e2:	ce 01       	movw	r24, r28
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	ff 90       	pop	r15
    32ee:	ef 90       	pop	r14
    32f0:	08 95       	ret

000032f2 <_ZN5Print5printERK6String>:
    32f2:	db 01       	movw	r26, r22
    32f4:	14 96       	adiw	r26, 0x04	; 4
    32f6:	4d 91       	ld	r20, X+
    32f8:	5c 91       	ld	r21, X
    32fa:	15 97       	sbiw	r26, 0x05	; 5
    32fc:	6d 91       	ld	r22, X+
    32fe:	7c 91       	ld	r23, X
    3300:	dc 01       	movw	r26, r24
    3302:	ed 91       	ld	r30, X+
    3304:	fc 91       	ld	r31, X
    3306:	02 80       	ldd	r0, Z+2	; 0x02
    3308:	f3 81       	ldd	r31, Z+3	; 0x03
    330a:	e0 2d       	mov	r30, r0
    330c:	09 94       	ijmp

0000330e <_ZN5Print5printEPKc>:
    330e:	0c 94 40 19 	jmp	0x3280	; 0x3280 <_ZN5Print5writeEPKc>

00003312 <_ZN5Print5printEc>:
    3312:	dc 01       	movw	r26, r24
    3314:	ed 91       	ld	r30, X+
    3316:	fc 91       	ld	r31, X
    3318:	01 90       	ld	r0, Z+
    331a:	f0 81       	ld	r31, Z
    331c:	e0 2d       	mov	r30, r0
    331e:	09 94       	ijmp

00003320 <_ZN5Print7printlnEv>:
    3320:	6f ea       	ldi	r22, 0xAF	; 175
    3322:	71 e0       	ldi	r23, 0x01	; 1
    3324:	0c 94 40 19 	jmp	0x3280	; 0x3280 <_ZN5Print5writeEPKc>

00003328 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	ec 01       	movw	r28, r24
    3332:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5printEPK19__FlashStringHelper>
    3336:	8c 01       	movw	r16, r24
    3338:	ce 01       	movw	r24, r28
    333a:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
    333e:	80 0f       	add	r24, r16
    3340:	91 1f       	adc	r25, r17
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	08 95       	ret

0000334c <_ZN5Print7printlnEPKc>:
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	ec 01       	movw	r28, r24
    3356:	0e 94 40 19 	call	0x3280	; 0x3280 <_ZN5Print5writeEPKc>
    335a:	8c 01       	movw	r16, r24
    335c:	ce 01       	movw	r24, r28
    335e:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
    3362:	80 0f       	add	r24, r16
    3364:	91 1f       	adc	r25, r17
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	08 95       	ret

00003370 <_ZN5Print7printlnEc>:
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	ec 01       	movw	r28, r24
    337a:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEc>
    337e:	8c 01       	movw	r16, r24
    3380:	ce 01       	movw	r24, r28
    3382:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
    3386:	80 0f       	add	r24, r16
    3388:	91 1f       	adc	r25, r17
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	08 95       	ret

00003394 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3394:	8f 92       	push	r8
    3396:	9f 92       	push	r9
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	a1 97       	sbiw	r28, 0x21	; 33
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	7c 01       	movw	r14, r24
    33ba:	fa 01       	movw	r30, r20
    33bc:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    33be:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    33c0:	22 30       	cpi	r18, 0x02	; 2
    33c2:	08 f4       	brcc	.+2      	; 0x33c6 <_ZN5Print11printNumberEmh+0x32>
    33c4:	2a e0       	ldi	r18, 0x0A	; 10
    33c6:	8e 01       	movw	r16, r28
    33c8:	0f 5d       	subi	r16, 0xDF	; 223
    33ca:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    33cc:	82 2e       	mov	r8, r18
    33ce:	91 2c       	mov	r9, r1
    33d0:	a1 2c       	mov	r10, r1
    33d2:	b1 2c       	mov	r11, r1
    33d4:	bf 01       	movw	r22, r30
    33d6:	a5 01       	movw	r20, r10
    33d8:	94 01       	movw	r18, r8
    33da:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__udivmodsi4>
    n /= base;
    33de:	f9 01       	movw	r30, r18
    33e0:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    33e2:	01 50       	subi	r16, 0x01	; 1
    33e4:	11 09       	sbc	r17, r1
    33e6:	6a 30       	cpi	r22, 0x0A	; 10
    33e8:	10 f4       	brcc	.+4      	; 0x33ee <_ZN5Print11printNumberEmh+0x5a>
    33ea:	60 5d       	subi	r22, 0xD0	; 208
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <_ZN5Print11printNumberEmh+0x5c>
    33ee:	69 5c       	subi	r22, 0xC9	; 201
    33f0:	d8 01       	movw	r26, r16
    33f2:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    33f4:	23 2b       	or	r18, r19
    33f6:	24 2b       	or	r18, r20
    33f8:	25 2b       	or	r18, r21
    33fa:	61 f7       	brne	.-40     	; 0x33d4 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    33fc:	b8 01       	movw	r22, r16
    33fe:	c7 01       	movw	r24, r14
    3400:	0e 94 40 19 	call	0x3280	; 0x3280 <_ZN5Print5writeEPKc>
}
    3404:	a1 96       	adiw	r28, 0x21	; 33
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	bf 90       	pop	r11
    341e:	af 90       	pop	r10
    3420:	9f 90       	pop	r9
    3422:	8f 90       	pop	r8
    3424:	08 95       	ret

00003426 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    3426:	21 15       	cp	r18, r1
    3428:	31 05       	cpc	r19, r1
    342a:	41 f4       	brne	.+16     	; 0x343c <_ZN5Print5printEmi+0x16>
    342c:	dc 01       	movw	r26, r24
    342e:	ed 91       	ld	r30, X+
    3430:	fc 91       	ld	r31, X
    3432:	01 90       	ld	r0, Z+
    3434:	f0 81       	ld	r31, Z
    3436:	e0 2d       	mov	r30, r0
    3438:	64 2f       	mov	r22, r20
    343a:	09 94       	ijmp
  else return printNumber(n, base);
    343c:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <_ZN5Print11printNumberEmh>

00003440 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    3440:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    3442:	46 2f       	mov	r20, r22
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <_ZN5Print5printEmi>

0000344e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    344e:	0f 93       	push	r16
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3458:	0e 94 20 1a 	call	0x3440	; 0x3440 <_ZN5Print5printEhi>
    345c:	8c 01       	movw	r16, r24
  n += println();
    345e:	ce 01       	movw	r24, r28
    3460:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
  return n;
}
    3464:	80 0f       	add	r24, r16
    3466:	91 1f       	adc	r25, r17
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	1f 91       	pop	r17
    346e:	0f 91       	pop	r16
    3470:	08 95       	ret

00003472 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3472:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3474:	ab 01       	movw	r20, r22
    3476:	60 e0       	ldi	r22, 0x00	; 0
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <_ZN5Print5printEmi>

0000347e <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3488:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN5Print5printEji>
    348c:	8c 01       	movw	r16, r24
  n += println();
    348e:	ce 01       	movw	r24, r28
    3490:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
  return n;
}
    3494:	80 0f       	add	r24, r16
    3496:	91 1f       	adc	r25, r17
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	08 95       	ret

000034a2 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	cf 93       	push	r28
    34a8:	df 93       	push	r29
    34aa:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    34ac:	0e 94 13 1a 	call	0x3426	; 0x3426 <_ZN5Print5printEmi>
    34b0:	8c 01       	movw	r16, r24
  n += println();
    34b2:	ce 01       	movw	r24, r28
    34b4:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
  return n;
}
    34b8:	80 0f       	add	r24, r16
    34ba:	91 1f       	adc	r25, r17
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	08 95       	ret

000034c6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    34c6:	cf 92       	push	r12
    34c8:	df 92       	push	r13
    34ca:	ef 92       	push	r14
    34cc:	ff 92       	push	r15
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
  if (base == 0) {
    34d6:	21 15       	cp	r18, r1
    34d8:	31 05       	cpc	r19, r1
    34da:	81 f4       	brne	.+32     	; 0x34fc <_ZN5Print5printEli+0x36>
    return write(n);
    34dc:	dc 01       	movw	r26, r24
    34de:	ed 91       	ld	r30, X+
    34e0:	fc 91       	ld	r31, X
    34e2:	01 90       	ld	r0, Z+
    34e4:	f0 81       	ld	r31, Z
    34e6:	e0 2d       	mov	r30, r0
    34e8:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    34fa:	09 94       	ijmp
  } else if (base == 10) {
    34fc:	2a 30       	cpi	r18, 0x0A	; 10
    34fe:	31 05       	cpc	r19, r1
    3500:	01 f5       	brne	.+64     	; 0x3542 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3502:	77 ff       	sbrs	r23, 7
    3504:	1d c0       	rjmp	.+58     	; 0x3540 <_ZN5Print5printEli+0x7a>
    3506:	6a 01       	movw	r12, r20
    3508:	7b 01       	movw	r14, r22
    350a:	ec 01       	movw	r28, r24
      int t = print('-');
    350c:	6d e2       	ldi	r22, 0x2D	; 45
    350e:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEc>
    3512:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    3514:	44 27       	eor	r20, r20
    3516:	55 27       	eor	r21, r21
    3518:	ba 01       	movw	r22, r20
    351a:	4c 19       	sub	r20, r12
    351c:	5d 09       	sbc	r21, r13
    351e:	6e 09       	sbc	r22, r14
    3520:	7f 09       	sbc	r23, r15
    3522:	2a e0       	ldi	r18, 0x0A	; 10
    3524:	ce 01       	movw	r24, r28
    3526:	0e 94 ca 19 	call	0x3394	; 0x3394 <_ZN5Print11printNumberEmh>
    352a:	80 0f       	add	r24, r16
    352c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	ff 90       	pop	r15
    3538:	ef 90       	pop	r14
    353a:	df 90       	pop	r13
    353c:	cf 90       	pop	r12
    353e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3540:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	1f 91       	pop	r17
    3548:	0f 91       	pop	r16
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	df 90       	pop	r13
    3550:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3552:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <_ZN5Print11printNumberEmh>

00003556 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3556:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3558:	ab 01       	movw	r20, r22
    355a:	77 0f       	add	r23, r23
    355c:	66 0b       	sbc	r22, r22
    355e:	77 0b       	sbc	r23, r23
    3560:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <_ZN5Print5printEli>

00003564 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    356e:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEii>
    3572:	8c 01       	movw	r16, r24
  n += println();
    3574:	ce 01       	movw	r24, r28
    3576:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
  return n;
}
    357a:	80 0f       	add	r24, r16
    357c:	91 1f       	adc	r25, r17
    357e:	df 91       	pop	r29
    3580:	cf 91       	pop	r28
    3582:	1f 91       	pop	r17
    3584:	0f 91       	pop	r16
    3586:	08 95       	ret

00003588 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3588:	0f 93       	push	r16
    358a:	1f 93       	push	r17
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3592:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZN5Print5printEli>
    3596:	8c 01       	movw	r16, r24
  n += println();
    3598:	ce 01       	movw	r24, r28
    359a:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEv>
  return n;
}
    359e:	80 0f       	add	r24, r16
    35a0:	91 1f       	adc	r25, r17
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	08 95       	ret

000035ac <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    35ac:	1f 92       	push	r1
    35ae:	0f 92       	push	r0
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	0f 92       	push	r0
    35b4:	11 24       	eor	r1, r1
    35b6:	2f 93       	push	r18
    35b8:	3f 93       	push	r19
    35ba:	8f 93       	push	r24
    35bc:	9f 93       	push	r25
    35be:	af 93       	push	r26
    35c0:	bf 93       	push	r27
    35c2:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <timer0_millis>
    35c6:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <timer0_millis+0x1>
    35ca:	a0 91 6f 04 	lds	r26, 0x046F	; 0x80046f <timer0_millis+0x2>
    35ce:	b0 91 70 04 	lds	r27, 0x0470	; 0x800470 <timer0_millis+0x3>
    35d2:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <timer0_fract>
    35d6:	23 e0       	ldi	r18, 0x03	; 3
    35d8:	23 0f       	add	r18, r19
    35da:	2d 37       	cpi	r18, 0x7D	; 125
    35dc:	20 f4       	brcc	.+8      	; 0x35e6 <__vector_16+0x3a>
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	a1 1d       	adc	r26, r1
    35e2:	b1 1d       	adc	r27, r1
    35e4:	05 c0       	rjmp	.+10     	; 0x35f0 <__vector_16+0x44>
    35e6:	26 e8       	ldi	r18, 0x86	; 134
    35e8:	23 0f       	add	r18, r19
    35ea:	02 96       	adiw	r24, 0x02	; 2
    35ec:	a1 1d       	adc	r26, r1
    35ee:	b1 1d       	adc	r27, r1
    35f0:	20 93 6c 04 	sts	0x046C, r18	; 0x80046c <timer0_fract>
    35f4:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <timer0_millis>
    35f8:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <timer0_millis+0x1>
    35fc:	a0 93 6f 04 	sts	0x046F, r26	; 0x80046f <timer0_millis+0x2>
    3600:	b0 93 70 04 	sts	0x0470, r27	; 0x800470 <timer0_millis+0x3>
    3604:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <timer0_overflow_count>
    3608:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <timer0_overflow_count+0x1>
    360c:	a0 91 73 04 	lds	r26, 0x0473	; 0x800473 <timer0_overflow_count+0x2>
    3610:	b0 91 74 04 	lds	r27, 0x0474	; 0x800474 <timer0_overflow_count+0x3>
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	a1 1d       	adc	r26, r1
    3618:	b1 1d       	adc	r27, r1
    361a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <timer0_overflow_count>
    361e:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <timer0_overflow_count+0x1>
    3622:	a0 93 73 04 	sts	0x0473, r26	; 0x800473 <timer0_overflow_count+0x2>
    3626:	b0 93 74 04 	sts	0x0474, r27	; 0x800474 <timer0_overflow_count+0x3>
    362a:	bf 91       	pop	r27
    362c:	af 91       	pop	r26
    362e:	9f 91       	pop	r25
    3630:	8f 91       	pop	r24
    3632:	3f 91       	pop	r19
    3634:	2f 91       	pop	r18
    3636:	0f 90       	pop	r0
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	0f 90       	pop	r0
    363c:	1f 90       	pop	r1
    363e:	18 95       	reti

00003640 <micros>:
    3640:	3f b7       	in	r19, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <timer0_overflow_count>
    3648:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <timer0_overflow_count+0x1>
    364c:	a0 91 73 04 	lds	r26, 0x0473	; 0x800473 <timer0_overflow_count+0x2>
    3650:	b0 91 74 04 	lds	r27, 0x0474	; 0x800474 <timer0_overflow_count+0x3>
    3654:	26 b5       	in	r18, 0x26	; 38
    3656:	a8 9b       	sbis	0x15, 0	; 21
    3658:	05 c0       	rjmp	.+10     	; 0x3664 <micros+0x24>
    365a:	2f 3f       	cpi	r18, 0xFF	; 255
    365c:	19 f0       	breq	.+6      	; 0x3664 <micros+0x24>
    365e:	01 96       	adiw	r24, 0x01	; 1
    3660:	a1 1d       	adc	r26, r1
    3662:	b1 1d       	adc	r27, r1
    3664:	3f bf       	out	0x3f, r19	; 63
    3666:	ba 2f       	mov	r27, r26
    3668:	a9 2f       	mov	r26, r25
    366a:	98 2f       	mov	r25, r24
    366c:	88 27       	eor	r24, r24
    366e:	82 0f       	add	r24, r18
    3670:	91 1d       	adc	r25, r1
    3672:	a1 1d       	adc	r26, r1
    3674:	b1 1d       	adc	r27, r1
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	42 e0       	ldi	r20, 0x02	; 2
    367c:	66 0f       	add	r22, r22
    367e:	77 1f       	adc	r23, r23
    3680:	88 1f       	adc	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	4a 95       	dec	r20
    3686:	d1 f7       	brne	.-12     	; 0x367c <micros+0x3c>
    3688:	08 95       	ret

0000368a <delay>:
    368a:	8f 92       	push	r8
    368c:	9f 92       	push	r9
    368e:	af 92       	push	r10
    3690:	bf 92       	push	r11
    3692:	cf 92       	push	r12
    3694:	df 92       	push	r13
    3696:	ef 92       	push	r14
    3698:	ff 92       	push	r15
    369a:	6b 01       	movw	r12, r22
    369c:	7c 01       	movw	r14, r24
    369e:	0e 94 20 1b 	call	0x3640	; 0x3640 <micros>
    36a2:	4b 01       	movw	r8, r22
    36a4:	5c 01       	movw	r10, r24
    36a6:	c1 14       	cp	r12, r1
    36a8:	d1 04       	cpc	r13, r1
    36aa:	e1 04       	cpc	r14, r1
    36ac:	f1 04       	cpc	r15, r1
    36ae:	01 f1       	breq	.+64     	; 0x36f0 <delay+0x66>
    36b0:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <yield>
    36b4:	0e 94 20 1b 	call	0x3640	; 0x3640 <micros>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	88 19       	sub	r24, r8
    36be:	99 09       	sbc	r25, r9
    36c0:	aa 09       	sbc	r26, r10
    36c2:	bb 09       	sbc	r27, r11
    36c4:	88 3e       	cpi	r24, 0xE8	; 232
    36c6:	93 40       	sbci	r25, 0x03	; 3
    36c8:	a1 05       	cpc	r26, r1
    36ca:	b1 05       	cpc	r27, r1
    36cc:	60 f3       	brcs	.-40     	; 0x36a6 <delay+0x1c>
    36ce:	21 e0       	ldi	r18, 0x01	; 1
    36d0:	c2 1a       	sub	r12, r18
    36d2:	d1 08       	sbc	r13, r1
    36d4:	e1 08       	sbc	r14, r1
    36d6:	f1 08       	sbc	r15, r1
    36d8:	88 ee       	ldi	r24, 0xE8	; 232
    36da:	88 0e       	add	r8, r24
    36dc:	83 e0       	ldi	r24, 0x03	; 3
    36de:	98 1e       	adc	r9, r24
    36e0:	a1 1c       	adc	r10, r1
    36e2:	b1 1c       	adc	r11, r1
    36e4:	c1 14       	cp	r12, r1
    36e6:	d1 04       	cpc	r13, r1
    36e8:	e1 04       	cpc	r14, r1
    36ea:	f1 04       	cpc	r15, r1
    36ec:	19 f7       	brne	.-58     	; 0x36b4 <delay+0x2a>
    36ee:	db cf       	rjmp	.-74     	; 0x36a6 <delay+0x1c>
    36f0:	ff 90       	pop	r15
    36f2:	ef 90       	pop	r14
    36f4:	df 90       	pop	r13
    36f6:	cf 90       	pop	r12
    36f8:	bf 90       	pop	r11
    36fa:	af 90       	pop	r10
    36fc:	9f 90       	pop	r9
    36fe:	8f 90       	pop	r8
    3700:	08 95       	ret

00003702 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3702:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3704:	84 b5       	in	r24, 0x24	; 36
    3706:	82 60       	ori	r24, 0x02	; 2
    3708:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    370a:	84 b5       	in	r24, 0x24	; 36
    370c:	81 60       	ori	r24, 0x01	; 1
    370e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3710:	85 b5       	in	r24, 0x25	; 37
    3712:	82 60       	ori	r24, 0x02	; 2
    3714:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3716:	85 b5       	in	r24, 0x25	; 37
    3718:	81 60       	ori	r24, 0x01	; 1
    371a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    371c:	ee e6       	ldi	r30, 0x6E	; 110
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	80 81       	ld	r24, Z
    3722:	81 60       	ori	r24, 0x01	; 1
    3724:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3726:	e1 e8       	ldi	r30, 0x81	; 129
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    372c:	80 81       	ld	r24, Z
    372e:	82 60       	ori	r24, 0x02	; 2
    3730:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3732:	80 81       	ld	r24, Z
    3734:	81 60       	ori	r24, 0x01	; 1
    3736:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3738:	e0 e8       	ldi	r30, 0x80	; 128
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	80 81       	ld	r24, Z
    373e:	81 60       	ori	r24, 0x01	; 1
    3740:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3742:	e1 eb       	ldi	r30, 0xB1	; 177
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	80 81       	ld	r24, Z
    3748:	84 60       	ori	r24, 0x04	; 4
    374a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    374c:	e0 eb       	ldi	r30, 0xB0	; 176
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	81 60       	ori	r24, 0x01	; 1
    3754:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3756:	ea e7       	ldi	r30, 0x7A	; 122
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	80 81       	ld	r24, Z
    375c:	84 60       	ori	r24, 0x04	; 4
    375e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3760:	80 81       	ld	r24, Z
    3762:	82 60       	ori	r24, 0x02	; 2
    3764:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3766:	80 81       	ld	r24, Z
    3768:	81 60       	ori	r24, 0x01	; 1
    376a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    376c:	80 81       	ld	r24, Z
    376e:	80 68       	ori	r24, 0x80	; 128
    3770:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3772:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3776:	08 95       	ret

00003778 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3778:	8e 30       	cpi	r24, 0x0E	; 14
    377a:	08 f0       	brcs	.+2      	; 0x377e <analogRead+0x6>
    377c:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    377e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3782:	90 e4       	ldi	r25, 0x40	; 64
    3784:	29 9f       	mul	r18, r25
    3786:	90 01       	movw	r18, r0
    3788:	11 24       	eor	r1, r1
    378a:	87 70       	andi	r24, 0x07	; 7
    378c:	82 2b       	or	r24, r18
    378e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3792:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3796:	80 64       	ori	r24, 0x40	; 64
    3798:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    379c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    37a0:	86 fd       	sbrc	r24, 6
    37a2:	fc cf       	rjmp	.-8      	; 0x379c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    37a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    37a8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    37ac:	90 e0       	ldi	r25, 0x00	; 0
}
    37ae:	92 2b       	or	r25, r18
    37b0:	08 95       	ret

000037b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    37b2:	83 30       	cpi	r24, 0x03	; 3
    37b4:	81 f0       	breq	.+32     	; 0x37d6 <turnOffPWM+0x24>
    37b6:	28 f4       	brcc	.+10     	; 0x37c2 <turnOffPWM+0x10>
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	99 f0       	breq	.+38     	; 0x37e2 <turnOffPWM+0x30>
    37bc:	82 30       	cpi	r24, 0x02	; 2
    37be:	a1 f0       	breq	.+40     	; 0x37e8 <turnOffPWM+0x36>
    37c0:	08 95       	ret
    37c2:	87 30       	cpi	r24, 0x07	; 7
    37c4:	a9 f0       	breq	.+42     	; 0x37f0 <turnOffPWM+0x3e>
    37c6:	88 30       	cpi	r24, 0x08	; 8
    37c8:	b9 f0       	breq	.+46     	; 0x37f8 <turnOffPWM+0x46>
    37ca:	84 30       	cpi	r24, 0x04	; 4
    37cc:	d1 f4       	brne	.+52     	; 0x3802 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    37ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    37d2:	8f 7d       	andi	r24, 0xDF	; 223
    37d4:	03 c0       	rjmp	.+6      	; 0x37dc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    37d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    37da:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    37dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    37e0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    37e2:	84 b5       	in	r24, 0x24	; 36
    37e4:	8f 77       	andi	r24, 0x7F	; 127
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    37e8:	84 b5       	in	r24, 0x24	; 36
    37ea:	8f 7d       	andi	r24, 0xDF	; 223
    37ec:	84 bd       	out	0x24, r24	; 36
    37ee:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    37f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    37f4:	8f 77       	andi	r24, 0x7F	; 127
    37f6:	03 c0       	rjmp	.+6      	; 0x37fe <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    37f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    37fc:	8f 7d       	andi	r24, 0xDF	; 223
    37fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3802:	08 95       	ret

00003804 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	fc 01       	movw	r30, r24
    380c:	e4 51       	subi	r30, 0x14	; 20
    380e:	f9 4f       	sbci	r31, 0xF9	; 249
    3810:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3812:	fc 01       	movw	r30, r24
    3814:	e0 50       	subi	r30, 0x00	; 0
    3816:	f9 4f       	sbci	r31, 0xF9	; 249
    3818:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    381a:	88 23       	and	r24, r24
    381c:	61 f1       	breq	.+88     	; 0x3876 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	fc 01       	movw	r30, r24
    3826:	e8 5d       	subi	r30, 0xD8	; 216
    3828:	f8 4f       	sbci	r31, 0xF8	; 248
    382a:	c5 91       	lpm	r28, Z+
    382c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    382e:	fc 01       	movw	r30, r24
    3830:	e2 5e       	subi	r30, 0xE2	; 226
    3832:	f8 4f       	sbci	r31, 0xF8	; 248
    3834:	a5 91       	lpm	r26, Z+
    3836:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3838:	61 11       	cpse	r22, r1
    383a:	09 c0       	rjmp	.+18     	; 0x384e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    383c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    383e:	f8 94       	cli
		*reg &= ~bit;
    3840:	88 81       	ld	r24, Y
    3842:	20 95       	com	r18
    3844:	82 23       	and	r24, r18
    3846:	88 83       	st	Y, r24
		*out &= ~bit;
    3848:	ec 91       	ld	r30, X
    384a:	2e 23       	and	r18, r30
    384c:	0b c0       	rjmp	.+22     	; 0x3864 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    384e:	62 30       	cpi	r22, 0x02	; 2
    3850:	61 f4       	brne	.+24     	; 0x386a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3852:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3854:	f8 94       	cli
		*reg &= ~bit;
    3856:	88 81       	ld	r24, Y
    3858:	32 2f       	mov	r19, r18
    385a:	30 95       	com	r19
    385c:	83 23       	and	r24, r19
    385e:	88 83       	st	Y, r24
		*out |= bit;
    3860:	ec 91       	ld	r30, X
    3862:	2e 2b       	or	r18, r30
    3864:	2c 93       	st	X, r18
		SREG = oldSREG;
    3866:	9f bf       	out	0x3f, r25	; 63
    3868:	06 c0       	rjmp	.+12     	; 0x3876 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    386a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    386c:	f8 94       	cli
		*reg |= bit;
    386e:	e8 81       	ld	r30, Y
    3870:	2e 2b       	or	r18, r30
    3872:	28 83       	st	Y, r18
		SREG = oldSREG;
    3874:	8f bf       	out	0x3f, r24	; 63
	}
}
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	08 95       	ret

0000387c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3882:	28 2f       	mov	r18, r24
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	f9 01       	movw	r30, r18
    3888:	e8 52       	subi	r30, 0x28	; 40
    388a:	f9 4f       	sbci	r31, 0xF9	; 249
    388c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    388e:	f9 01       	movw	r30, r18
    3890:	e4 51       	subi	r30, 0x14	; 20
    3892:	f9 4f       	sbci	r31, 0xF9	; 249
    3894:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3896:	f9 01       	movw	r30, r18
    3898:	e0 50       	subi	r30, 0x00	; 0
    389a:	f9 4f       	sbci	r31, 0xF9	; 249
    389c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    389e:	cc 23       	and	r28, r28
    38a0:	c1 f0       	breq	.+48     	; 0x38d2 <digitalWrite+0x56>
    38a2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    38a4:	81 11       	cpse	r24, r1
    38a6:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <turnOffPWM>

	out = portOutputRegister(port);
    38aa:	ec 2f       	mov	r30, r28
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	ee 0f       	add	r30, r30
    38b0:	ff 1f       	adc	r31, r31
    38b2:	e2 5e       	subi	r30, 0xE2	; 226
    38b4:	f8 4f       	sbci	r31, 0xF8	; 248
    38b6:	a5 91       	lpm	r26, Z+
    38b8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    38ba:	9f b7       	in	r25, 0x3f	; 63
	cli();
    38bc:	f8 94       	cli

	if (val == LOW) {
    38be:	11 11       	cpse	r17, r1
    38c0:	04 c0       	rjmp	.+8      	; 0x38ca <digitalWrite+0x4e>
		*out &= ~bit;
    38c2:	8c 91       	ld	r24, X
    38c4:	d0 95       	com	r29
    38c6:	d8 23       	and	r29, r24
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <digitalWrite+0x52>
	} else {
		*out |= bit;
    38ca:	ec 91       	ld	r30, X
    38cc:	de 2b       	or	r29, r30
    38ce:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    38d0:	9f bf       	out	0x3f, r25	; 63
}
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	1f 91       	pop	r17
    38d8:	08 95       	ret

000038da <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    38da:	fc 01       	movw	r30, r24
    38dc:	80 81       	ld	r24, Z
    38de:	91 81       	ldd	r25, Z+1	; 0x01
    38e0:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <free>

000038e4 <_ZN6String10invalidateEv>:
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	ec 01       	movw	r28, r24
    38ea:	88 81       	ld	r24, Y
    38ec:	99 81       	ldd	r25, Y+1	; 0x01
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	11 f0       	breq	.+4      	; 0x38f6 <_ZN6String10invalidateEv+0x12>
    38f2:	0e 94 cc 20 	call	0x4198	; 0x4198 <free>
    38f6:	19 82       	std	Y+1, r1	; 0x01
    38f8:	18 82       	st	Y, r1
    38fa:	1d 82       	std	Y+5, r1	; 0x05
    38fc:	1c 82       	std	Y+4, r1	; 0x04
    38fe:	1b 82       	std	Y+3, r1	; 0x03
    3900:	1a 82       	std	Y+2, r1	; 0x02
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	08 95       	ret

00003908 <_ZN6String12changeBufferEj>:
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	ec 01       	movw	r28, r24
    3912:	8b 01       	movw	r16, r22
    3914:	6f 5f       	subi	r22, 0xFF	; 255
    3916:	7f 4f       	sbci	r23, 0xFF	; 255
    3918:	88 81       	ld	r24, Y
    391a:	99 81       	ldd	r25, Y+1	; 0x01
    391c:	0e 94 55 21 	call	0x42aa	; 0x42aa <realloc>
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	31 f0       	breq	.+12     	; 0x3930 <_ZN6String12changeBufferEj+0x28>
    3924:	99 83       	std	Y+1, r25	; 0x01
    3926:	88 83       	st	Y, r24
    3928:	1b 83       	std	Y+3, r17	; 0x03
    392a:	0a 83       	std	Y+2, r16	; 0x02
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <_ZN6String12changeBufferEj+0x2a>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	08 95       	ret

0000393c <_ZN6String7reserveEj>:
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	ec 01       	movw	r28, r24
    3942:	88 81       	ld	r24, Y
    3944:	99 81       	ldd	r25, Y+1	; 0x01
    3946:	89 2b       	or	r24, r25
    3948:	29 f0       	breq	.+10     	; 0x3954 <_ZN6String7reserveEj+0x18>
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
    394c:	9b 81       	ldd	r25, Y+3	; 0x03
    394e:	86 17       	cp	r24, r22
    3950:	97 07       	cpc	r25, r23
    3952:	60 f4       	brcc	.+24     	; 0x396c <_ZN6String7reserveEj+0x30>
    3954:	ce 01       	movw	r24, r28
    3956:	0e 94 84 1c 	call	0x3908	; 0x3908 <_ZN6String12changeBufferEj>
    395a:	88 23       	and	r24, r24
    395c:	41 f0       	breq	.+16     	; 0x396e <_ZN6String7reserveEj+0x32>
    395e:	8c 81       	ldd	r24, Y+4	; 0x04
    3960:	9d 81       	ldd	r25, Y+5	; 0x05
    3962:	89 2b       	or	r24, r25
    3964:	19 f4       	brne	.+6      	; 0x396c <_ZN6String7reserveEj+0x30>
    3966:	e8 81       	ld	r30, Y
    3968:	f9 81       	ldd	r31, Y+1	; 0x01
    396a:	10 82       	st	Z, r1
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	08 95       	ret

00003974 <_ZN6String4copyEPKcj>:
    3974:	ef 92       	push	r14
    3976:	ff 92       	push	r15
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
    397c:	cf 93       	push	r28
    397e:	df 93       	push	r29
    3980:	ec 01       	movw	r28, r24
    3982:	7b 01       	movw	r14, r22
    3984:	8a 01       	movw	r16, r20
    3986:	ba 01       	movw	r22, r20
    3988:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6String7reserveEj>
    398c:	81 11       	cpse	r24, r1
    398e:	04 c0       	rjmp	.+8      	; 0x3998 <_ZN6String4copyEPKcj+0x24>
    3990:	ce 01       	movw	r24, r28
    3992:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <_ZN6String10invalidateEv>
    3996:	07 c0       	rjmp	.+14     	; 0x39a6 <_ZN6String4copyEPKcj+0x32>
    3998:	1d 83       	std	Y+5, r17	; 0x05
    399a:	0c 83       	std	Y+4, r16	; 0x04
    399c:	b7 01       	movw	r22, r14
    399e:	88 81       	ld	r24, Y
    39a0:	99 81       	ldd	r25, Y+1	; 0x01
    39a2:	0e 94 79 22 	call	0x44f2	; 0x44f2 <strcpy>
    39a6:	ce 01       	movw	r24, r28
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	08 95       	ret

000039b6 <_ZN6StringC1EPKc>:
    39b6:	fc 01       	movw	r30, r24
    39b8:	11 82       	std	Z+1, r1	; 0x01
    39ba:	10 82       	st	Z, r1
    39bc:	13 82       	std	Z+3, r1	; 0x03
    39be:	12 82       	std	Z+2, r1	; 0x02
    39c0:	15 82       	std	Z+5, r1	; 0x05
    39c2:	14 82       	std	Z+4, r1	; 0x04
    39c4:	61 15       	cp	r22, r1
    39c6:	71 05       	cpc	r23, r1
    39c8:	51 f0       	breq	.+20     	; 0x39de <_ZN6StringC1EPKc+0x28>
    39ca:	fb 01       	movw	r30, r22
    39cc:	01 90       	ld	r0, Z+
    39ce:	00 20       	and	r0, r0
    39d0:	e9 f7       	brne	.-6      	; 0x39cc <_ZN6StringC1EPKc+0x16>
    39d2:	31 97       	sbiw	r30, 0x01	; 1
    39d4:	af 01       	movw	r20, r30
    39d6:	46 1b       	sub	r20, r22
    39d8:	57 0b       	sbc	r21, r23
    39da:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <_ZN6String4copyEPKcj>
    39de:	08 95       	ret

000039e0 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	8c 01       	movw	r16, r24
    39ea:	eb 01       	movw	r28, r22
	if (buffer) {
    39ec:	fc 01       	movw	r30, r24
    39ee:	80 81       	ld	r24, Z
    39f0:	91 81       	ldd	r25, Z+1	; 0x01
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	99 f0       	breq	.+38     	; 0x3a1c <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    39f6:	42 81       	ldd	r20, Z+2	; 0x02
    39f8:	53 81       	ldd	r21, Z+3	; 0x03
    39fa:	2c 81       	ldd	r18, Y+4	; 0x04
    39fc:	3d 81       	ldd	r19, Y+5	; 0x05
    39fe:	42 17       	cp	r20, r18
    3a00:	53 07       	cpc	r21, r19
    3a02:	50 f0       	brcs	.+20     	; 0x3a18 <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    3a04:	68 81       	ld	r22, Y
    3a06:	79 81       	ldd	r23, Y+1	; 0x01
    3a08:	0e 94 79 22 	call	0x44f2	; 0x44f2 <strcpy>
			len = rhs.len;
    3a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a10:	f8 01       	movw	r30, r16
    3a12:	95 83       	std	Z+5, r25	; 0x05
    3a14:	84 83       	std	Z+4, r24	; 0x04
    3a16:	13 c0       	rjmp	.+38     	; 0x3a3e <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    3a18:	0e 94 cc 20 	call	0x4198	; 0x4198 <free>
		}
	}
	buffer = rhs.buffer;
    3a1c:	88 81       	ld	r24, Y
    3a1e:	99 81       	ldd	r25, Y+1	; 0x01
    3a20:	f8 01       	movw	r30, r16
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2a:	93 83       	std	Z+3, r25	; 0x03
    3a2c:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    3a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a30:	9d 81       	ldd	r25, Y+5	; 0x05
    3a32:	95 83       	std	Z+5, r25	; 0x05
    3a34:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    3a36:	19 82       	std	Y+1, r1	; 0x01
    3a38:	18 82       	st	Y, r1
	rhs.capacity = 0;
    3a3a:	1b 82       	std	Y+3, r1	; 0x03
    3a3c:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    3a3e:	1d 82       	std	Y+5, r1	; 0x05
    3a40:	1c 82       	std	Y+4, r1	; 0x04
}
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	0f 91       	pop	r16
    3a4a:	08 95       	ret

00003a4c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	ec 01       	movw	r28, r24
    3a52:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3a54:	86 17       	cp	r24, r22
    3a56:	97 07       	cpc	r25, r23
    3a58:	61 f0       	breq	.+24     	; 0x3a72 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3a5a:	60 81       	ld	r22, Z
    3a5c:	71 81       	ldd	r23, Z+1	; 0x01
    3a5e:	61 15       	cp	r22, r1
    3a60:	71 05       	cpc	r23, r1
    3a62:	29 f0       	breq	.+10     	; 0x3a6e <_ZN6StringaSERKS_+0x22>
    3a64:	44 81       	ldd	r20, Z+4	; 0x04
    3a66:	55 81       	ldd	r21, Z+5	; 0x05
    3a68:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_ZN6String4copyEPKcj>
    3a6c:	02 c0       	rjmp	.+4      	; 0x3a72 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    3a6e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <_ZN6String10invalidateEv>
	
	return *this;
}
    3a72:	ce 01       	movw	r24, r28
    3a74:	df 91       	pop	r29
    3a76:	cf 91       	pop	r28
    3a78:	08 95       	ret

00003a7a <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	11 82       	std	Z+1, r1	; 0x01
    3a7e:	10 82       	st	Z, r1
	capacity = 0;
    3a80:	13 82       	std	Z+3, r1	; 0x03
    3a82:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3a84:	15 82       	std	Z+5, r1	; 0x05
    3a86:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    3a88:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <_ZN6StringaSERKS_>

00003a8c <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    3a92:	86 17       	cp	r24, r22
    3a94:	97 07       	cpc	r25, r23
    3a96:	11 f0       	breq	.+4      	; 0x3a9c <_ZN6StringaSEOS_+0x10>
    3a98:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_ZN6String4moveERS_>
	return *this;
}
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	08 95       	ret

00003aa4 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3aa4:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3aa8:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3aac:	28 17       	cp	r18, r24
    3aae:	39 07       	cpc	r19, r25
    3ab0:	b9 f4       	brne	.+46     	; 0x3ae0 <_ZN14SoftwareSerial4readEv+0x3c>
    3ab2:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ab6:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3aba:	98 17       	cp	r25, r24
    3abc:	89 f0       	breq	.+34     	; 0x3ae0 <_ZN14SoftwareSerial4readEv+0x3c>
    3abe:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	e9 58       	subi	r30, 0x89	; 137
    3ac6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ac8:	80 81       	ld	r24, Z
    3aca:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	2f 5f       	subi	r18, 0xFF	; 255
    3ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad4:	2f 73       	andi	r18, 0x3F	; 63
    3ad6:	33 27       	eor	r19, r19
    3ad8:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	08 95       	ret
    3ae0:	8f ef       	ldi	r24, 0xFF	; 255
    3ae2:	9f ef       	ldi	r25, 0xFF	; 255
    3ae4:	08 95       	ret

00003ae6 <_ZN14SoftwareSerial5writeEh>:
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	dc 01       	movw	r26, r24
    3aee:	5c 96       	adiw	r26, 0x1c	; 28
    3af0:	8d 91       	ld	r24, X+
    3af2:	9c 91       	ld	r25, X
    3af4:	5d 97       	sbiw	r26, 0x1d	; 29
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	39 f4       	brne	.+14     	; 0x3b08 <_ZN14SoftwareSerial5writeEh+0x22>
    3afa:	21 e0       	ldi	r18, 0x01	; 1
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	13 96       	adiw	r26, 0x03	; 3
    3b00:	3c 93       	st	X, r19
    3b02:	2e 93       	st	-X, r18
    3b04:	12 97       	sbiw	r26, 0x02	; 2
    3b06:	3b c0       	rjmp	.+118    	; 0x3b7e <_ZN14SoftwareSerial5writeEh+0x98>
    3b08:	51 96       	adiw	r26, 0x11	; 17
    3b0a:	ed 91       	ld	r30, X+
    3b0c:	fc 91       	ld	r31, X
    3b0e:	52 97       	sbiw	r26, 0x12	; 18
    3b10:	50 96       	adiw	r26, 0x10	; 16
    3b12:	2c 91       	ld	r18, X
    3b14:	50 97       	sbiw	r26, 0x10	; 16
    3b16:	32 2f       	mov	r19, r18
    3b18:	30 95       	com	r19
    3b1a:	1f b7       	in	r17, 0x3f	; 63
    3b1c:	5e 96       	adiw	r26, 0x1e	; 30
    3b1e:	4c 91       	ld	r20, X
    3b20:	5e 97       	sbiw	r26, 0x1e	; 30
    3b22:	74 2f       	mov	r23, r20
    3b24:	72 70       	andi	r23, 0x02	; 2
    3b26:	41 fd       	sbrc	r20, 1
    3b28:	60 95       	com	r22
    3b2a:	f8 94       	cli
    3b2c:	40 81       	ld	r20, Z
    3b2e:	77 23       	and	r23, r23
    3b30:	11 f0       	breq	.+4      	; 0x3b36 <_ZN14SoftwareSerial5writeEh+0x50>
    3b32:	42 2b       	or	r20, r18
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <_ZN14SoftwareSerial5writeEh+0x52>
    3b36:	43 23       	and	r20, r19
    3b38:	40 83       	st	Z, r20
    3b3a:	ec 01       	movw	r28, r24
    3b3c:	21 97       	sbiw	r28, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <_ZN14SoftwareSerial5writeEh+0x56>
    3b40:	48 e0       	ldi	r20, 0x08	; 8
    3b42:	50 81       	ld	r21, Z
    3b44:	60 ff       	sbrs	r22, 0
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <_ZN14SoftwareSerial5writeEh+0x66>
    3b48:	52 2b       	or	r21, r18
    3b4a:	01 c0       	rjmp	.+2      	; 0x3b4e <_ZN14SoftwareSerial5writeEh+0x68>
    3b4c:	53 23       	and	r21, r19
    3b4e:	50 83       	st	Z, r21
    3b50:	ec 01       	movw	r28, r24
    3b52:	21 97       	sbiw	r28, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <_ZN14SoftwareSerial5writeEh+0x6c>
    3b56:	66 95       	lsr	r22
    3b58:	41 50       	subi	r20, 0x01	; 1
    3b5a:	99 f7       	brne	.-26     	; 0x3b42 <_ZN14SoftwareSerial5writeEh+0x5c>
    3b5c:	80 81       	ld	r24, Z
    3b5e:	77 23       	and	r23, r23
    3b60:	19 f0       	breq	.+6      	; 0x3b68 <_ZN14SoftwareSerial5writeEh+0x82>
    3b62:	83 23       	and	r24, r19
    3b64:	80 83       	st	Z, r24
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <_ZN14SoftwareSerial5writeEh+0x86>
    3b68:	28 2b       	or	r18, r24
    3b6a:	20 83       	st	Z, r18
    3b6c:	1f bf       	out	0x3f, r17	; 63
    3b6e:	5c 96       	adiw	r26, 0x1c	; 28
    3b70:	8d 91       	ld	r24, X+
    3b72:	9c 91       	ld	r25, X
    3b74:	5d 97       	sbiw	r26, 0x1d	; 29
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <_ZN14SoftwareSerial5writeEh+0x90>
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	1f 91       	pop	r17
    3b84:	08 95       	ret

00003b86 <_ZN14SoftwareSerial5flushEv>:
    3b86:	08 95       	ret

00003b88 <_ZN14SoftwareSerial4peekEv>:
    3b88:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3b8c:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3b90:	28 17       	cp	r18, r24
    3b92:	39 07       	cpc	r19, r25
    3b94:	71 f4       	brne	.+28     	; 0x3bb2 <_ZN14SoftwareSerial4peekEv+0x2a>
    3b96:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b9a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3b9e:	98 17       	cp	r25, r24
    3ba0:	41 f0       	breq	.+16     	; 0x3bb2 <_ZN14SoftwareSerial4peekEv+0x2a>
    3ba2:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	e9 58       	subi	r30, 0x89	; 137
    3baa:	fb 4f       	sbci	r31, 0xFB	; 251
    3bac:	80 81       	ld	r24, Z
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	08 95       	ret
    3bb2:	8f ef       	ldi	r24, 0xFF	; 255
    3bb4:	9f ef       	ldi	r25, 0xFF	; 255
    3bb6:	08 95       	ret

00003bb8 <_ZN14SoftwareSerial9availableEv>:
    3bb8:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3bbc:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3bc0:	28 17       	cp	r18, r24
    3bc2:	39 07       	cpc	r19, r25
    3bc4:	71 f4       	brne	.+28     	; 0x3be2 <_ZN14SoftwareSerial9availableEv+0x2a>
    3bc6:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3bca:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	80 5c       	subi	r24, 0xC0	; 192
    3bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd4:	82 1b       	sub	r24, r18
    3bd6:	91 09       	sbc	r25, r1
    3bd8:	60 e4       	ldi	r22, 0x40	; 64
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__divmodhi4>
    3be0:	08 95       	ret
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	08 95       	ret

00003be8 <_ZN14SoftwareSerial13stopListeningEv>:
    3be8:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3bec:	f0 91 b8 04 	lds	r31, 0x04B8	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3bf0:	e8 17       	cp	r30, r24
    3bf2:	f9 07       	cpc	r31, r25
    3bf4:	69 f4       	brne	.+26     	; 0x3c10 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3bf6:	a3 89       	ldd	r26, Z+19	; 0x13
    3bf8:	b4 89       	ldd	r27, Z+20	; 0x14
    3bfa:	9c 91       	ld	r25, X
    3bfc:	85 89       	ldd	r24, Z+21	; 0x15
    3bfe:	80 95       	com	r24
    3c00:	89 23       	and	r24, r25
    3c02:	8c 93       	st	X, r24
    3c04:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3c08:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	08 95       	ret
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	08 95       	ret

00003c14 <_ZN14SoftwareSerial6listenEv>:
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	ec 01       	movw	r28, r24
    3c1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c1e:	89 2b       	or	r24, r25
    3c20:	f1 f0       	breq	.+60     	; 0x3c5e <_ZN14SoftwareSerial6listenEv+0x4a>
    3c22:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3c26:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3c2a:	c8 17       	cp	r28, r24
    3c2c:	d9 07       	cpc	r29, r25
    3c2e:	b9 f0       	breq	.+46     	; 0x3c5e <_ZN14SoftwareSerial6listenEv+0x4a>
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	11 f0       	breq	.+4      	; 0x3c38 <_ZN14SoftwareSerial6listenEv+0x24>
    3c34:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN14SoftwareSerial13stopListeningEv>
    3c38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c3a:	8e 7f       	andi	r24, 0xFE	; 254
    3c3c:	8e 8f       	std	Y+30, r24	; 0x1e
    3c3e:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c42:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c46:	d0 93 b8 04 	sts	0x04B8, r29	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3c4a:	c0 93 b7 04 	sts	0x04B7, r28	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3c4e:	eb 89       	ldd	r30, Y+19	; 0x13
    3c50:	fc 89       	ldd	r31, Y+20	; 0x14
    3c52:	90 81       	ld	r25, Z
    3c54:	8d 89       	ldd	r24, Y+21	; 0x15
    3c56:	89 2b       	or	r24, r25
    3c58:	80 83       	st	Z, r24
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	01 c0       	rjmp	.+2      	; 0x3c60 <_ZN14SoftwareSerial6listenEv+0x4c>
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	08 95       	ret

00003c66 <__vector_3>:
    3c66:	1f 92       	push	r1
    3c68:	0f 92       	push	r0
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	0f 92       	push	r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	2f 93       	push	r18
    3c72:	3f 93       	push	r19
    3c74:	4f 93       	push	r20
    3c76:	5f 93       	push	r21
    3c78:	6f 93       	push	r22
    3c7a:	7f 93       	push	r23
    3c7c:	8f 93       	push	r24
    3c7e:	9f 93       	push	r25
    3c80:	af 93       	push	r26
    3c82:	bf 93       	push	r27
    3c84:	ef 93       	push	r30
    3c86:	ff 93       	push	r31
    3c88:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <_ZN14SoftwareSerial13active_objectE>
    3c8c:	f0 91 b8 04 	lds	r31, 0x04B8	; 0x8004b8 <_ZN14SoftwareSerial13active_objectE+0x1>
    3c90:	30 97       	sbiw	r30, 0x00	; 0
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <__vector_3+0x30>
    3c94:	51 c0       	rjmp	.+162    	; 0x3d38 <__vector_3+0xd2>
    3c96:	96 8d       	ldd	r25, Z+30	; 0x1e
    3c98:	a6 85       	ldd	r26, Z+14	; 0x0e
    3c9a:	b7 85       	ldd	r27, Z+15	; 0x0f
    3c9c:	85 85       	ldd	r24, Z+13	; 0x0d
    3c9e:	91 ff       	sbrs	r25, 1
    3ca0:	04 c0       	rjmp	.+8      	; 0x3caa <__vector_3+0x44>
    3ca2:	9c 91       	ld	r25, X
    3ca4:	89 23       	and	r24, r25
    3ca6:	29 f4       	brne	.+10     	; 0x3cb2 <__vector_3+0x4c>
    3ca8:	47 c0       	rjmp	.+142    	; 0x3d38 <__vector_3+0xd2>
    3caa:	9c 91       	ld	r25, X
    3cac:	89 23       	and	r24, r25
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <__vector_3+0x4c>
    3cb0:	43 c0       	rjmp	.+134    	; 0x3d38 <__vector_3+0xd2>
    3cb2:	a3 89       	ldd	r26, Z+19	; 0x13
    3cb4:	b4 89       	ldd	r27, Z+20	; 0x14
    3cb6:	9c 91       	ld	r25, X
    3cb8:	85 89       	ldd	r24, Z+21	; 0x15
    3cba:	80 95       	com	r24
    3cbc:	89 23       	and	r24, r25
    3cbe:	8c 93       	st	X, r24
    3cc0:	86 89       	ldd	r24, Z+22	; 0x16
    3cc2:	97 89       	ldd	r25, Z+23	; 0x17
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <__vector_3+0x5e>
    3cc8:	60 8d       	ldd	r22, Z+24	; 0x18
    3cca:	71 8d       	ldd	r23, Z+25	; 0x19
    3ccc:	a6 85       	ldd	r26, Z+14	; 0x0e
    3cce:	b7 85       	ldd	r27, Z+15	; 0x0f
    3cd0:	55 85       	ldd	r21, Z+13	; 0x0d
    3cd2:	38 e0       	ldi	r19, 0x08	; 8
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <__vector_3+0x72>
    3cdc:	82 2f       	mov	r24, r18
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	95 95       	asr	r25
    3ce2:	87 95       	ror	r24
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	4c 91       	ld	r20, X
    3ce8:	45 23       	and	r20, r21
    3cea:	09 f0       	breq	.+2      	; 0x3cee <__vector_3+0x88>
    3cec:	20 68       	ori	r18, 0x80	; 128
    3cee:	31 50       	subi	r19, 0x01	; 1
    3cf0:	91 f7       	brne	.-28     	; 0x3cd6 <__vector_3+0x70>
    3cf2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cf4:	81 fd       	sbrc	r24, 1
    3cf6:	20 95       	com	r18
    3cf8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	01 96       	adiw	r24, 0x01	; 1
    3d00:	8f 73       	andi	r24, 0x3F	; 63
    3d02:	99 27       	eor	r25, r25
    3d04:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d08:	38 17       	cp	r19, r24
    3d0a:	49 f0       	breq	.+18     	; 0x3d1e <__vector_3+0xb8>
    3d0c:	a0 91 76 04 	lds	r26, 0x0476	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	a9 58       	subi	r26, 0x89	; 137
    3d14:	bb 4f       	sbci	r27, 0xFB	; 251
    3d16:	2c 93       	st	X, r18
    3d18:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d1c:	03 c0       	rjmp	.+6      	; 0x3d24 <__vector_3+0xbe>
    3d1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d20:	81 60       	ori	r24, 0x01	; 1
    3d22:	86 8f       	std	Z+30, r24	; 0x1e
    3d24:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d26:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <__vector_3+0xc2>
    3d2c:	a3 89       	ldd	r26, Z+19	; 0x13
    3d2e:	b4 89       	ldd	r27, Z+20	; 0x14
    3d30:	9c 91       	ld	r25, X
    3d32:	85 89       	ldd	r24, Z+21	; 0x15
    3d34:	89 2b       	or	r24, r25
    3d36:	8c 93       	st	X, r24
    3d38:	ff 91       	pop	r31
    3d3a:	ef 91       	pop	r30
    3d3c:	bf 91       	pop	r27
    3d3e:	af 91       	pop	r26
    3d40:	9f 91       	pop	r25
    3d42:	8f 91       	pop	r24
    3d44:	7f 91       	pop	r23
    3d46:	6f 91       	pop	r22
    3d48:	5f 91       	pop	r21
    3d4a:	4f 91       	pop	r20
    3d4c:	3f 91       	pop	r19
    3d4e:	2f 91       	pop	r18
    3d50:	0f 90       	pop	r0
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	0f 90       	pop	r0
    3d56:	1f 90       	pop	r1
    3d58:	18 95       	reti

00003d5a <_ZN14SoftwareSerial5setTXEh>:
    3d5a:	1f 93       	push	r17
    3d5c:	cf 93       	push	r28
    3d5e:	df 93       	push	r29
    3d60:	ec 01       	movw	r28, r24
    3d62:	16 2f       	mov	r17, r22
    3d64:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3d66:	66 95       	lsr	r22
    3d68:	61 70       	andi	r22, 0x01	; 1
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	68 27       	eor	r22, r24
    3d6e:	81 2f       	mov	r24, r17
    3d70:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
    3d74:	61 e0       	ldi	r22, 0x01	; 1
    3d76:	81 2f       	mov	r24, r17
    3d78:	0e 94 02 1c 	call	0x3804	; 0x3804 <pinMode>
    3d7c:	81 2f       	mov	r24, r17
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	fc 01       	movw	r30, r24
    3d82:	e4 51       	subi	r30, 0x14	; 20
    3d84:	f9 4f       	sbci	r31, 0xF9	; 249
    3d86:	e4 91       	lpm	r30, Z
    3d88:	e8 8b       	std	Y+16, r30	; 0x10
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	e0 50       	subi	r30, 0x00	; 0
    3d8e:	f9 4f       	sbci	r31, 0xF9	; 249
    3d90:	e4 91       	lpm	r30, Z
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	ee 0f       	add	r30, r30
    3d96:	ff 1f       	adc	r31, r31
    3d98:	e2 5e       	subi	r30, 0xE2	; 226
    3d9a:	f8 4f       	sbci	r31, 0xF8	; 248
    3d9c:	85 91       	lpm	r24, Z+
    3d9e:	94 91       	lpm	r25, Z
    3da0:	9a 8b       	std	Y+18, r25	; 0x12
    3da2:	89 8b       	std	Y+17, r24	; 0x11
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	1f 91       	pop	r17
    3daa:	08 95       	ret

00003dac <_ZN14SoftwareSerial5setRXEh>:
    3dac:	1f 93       	push	r17
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	ec 01       	movw	r28, r24
    3db4:	16 2f       	mov	r17, r22
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	81 2f       	mov	r24, r17
    3dba:	0e 94 02 1c 	call	0x3804	; 0x3804 <pinMode>
    3dbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3dc0:	81 fd       	sbrc	r24, 1
    3dc2:	04 c0       	rjmp	.+8      	; 0x3dcc <_ZN14SoftwareSerial5setRXEh+0x20>
    3dc4:	61 e0       	ldi	r22, 0x01	; 1
    3dc6:	81 2f       	mov	r24, r17
    3dc8:	0e 94 3e 1c 	call	0x387c	; 0x387c <digitalWrite>
    3dcc:	1c 87       	std	Y+12, r17	; 0x0c
    3dce:	81 2f       	mov	r24, r17
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	e4 51       	subi	r30, 0x14	; 20
    3dd6:	f9 4f       	sbci	r31, 0xF9	; 249
    3dd8:	e4 91       	lpm	r30, Z
    3dda:	ed 87       	std	Y+13, r30	; 0x0d
    3ddc:	fc 01       	movw	r30, r24
    3dde:	e0 50       	subi	r30, 0x00	; 0
    3de0:	f9 4f       	sbci	r31, 0xF9	; 249
    3de2:	e4 91       	lpm	r30, Z
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	ee 0f       	add	r30, r30
    3de8:	ff 1f       	adc	r31, r31
    3dea:	ec 5e       	subi	r30, 0xEC	; 236
    3dec:	f8 4f       	sbci	r31, 0xF8	; 248
    3dee:	85 91       	lpm	r24, Z+
    3df0:	94 91       	lpm	r25, Z
    3df2:	9f 87       	std	Y+15, r25	; 0x0f
    3df4:	8e 87       	std	Y+14, r24	; 0x0e
    3df6:	df 91       	pop	r29
    3df8:	cf 91       	pop	r28
    3dfa:	1f 91       	pop	r17
    3dfc:	08 95       	ret

00003dfe <_ZN14SoftwareSerialC1Ehhb>:
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	ec 01       	movw	r28, r24
    3e06:	16 2f       	mov	r17, r22
    3e08:	1b 82       	std	Y+3, r1	; 0x03
    3e0a:	1a 82       	std	Y+2, r1	; 0x02
    3e0c:	88 ee       	ldi	r24, 0xE8	; 232
    3e0e:	93 e0       	ldi	r25, 0x03	; 3
    3e10:	a0 e0       	ldi	r26, 0x00	; 0
    3e12:	b0 e0       	ldi	r27, 0x00	; 0
    3e14:	8c 83       	std	Y+4, r24	; 0x04
    3e16:	9d 83       	std	Y+5, r25	; 0x05
    3e18:	ae 83       	std	Y+6, r26	; 0x06
    3e1a:	bf 83       	std	Y+7, r27	; 0x07
    3e1c:	82 ec       	ldi	r24, 0xC2	; 194
    3e1e:	91 e0       	ldi	r25, 0x01	; 1
    3e20:	99 83       	std	Y+1, r25	; 0x01
    3e22:	88 83       	st	Y, r24
    3e24:	1f 8a       	std	Y+23, r1	; 0x17
    3e26:	1e 8a       	std	Y+22, r1	; 0x16
    3e28:	19 8e       	std	Y+25, r1	; 0x19
    3e2a:	18 8e       	std	Y+24, r1	; 0x18
    3e2c:	1b 8e       	std	Y+27, r1	; 0x1b
    3e2e:	1a 8e       	std	Y+26, r1	; 0x1a
    3e30:	1d 8e       	std	Y+29, r1	; 0x1d
    3e32:	1c 8e       	std	Y+28, r1	; 0x1c
    3e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e36:	8e 7f       	andi	r24, 0xFE	; 254
    3e38:	20 fb       	bst	r18, 0
    3e3a:	81 f9       	bld	r24, 1
    3e3c:	8e 8f       	std	Y+30, r24	; 0x1e
    3e3e:	64 2f       	mov	r22, r20
    3e40:	ce 01       	movw	r24, r28
    3e42:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN14SoftwareSerial5setTXEh>
    3e46:	61 2f       	mov	r22, r17
    3e48:	ce 01       	movw	r24, r28
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <_ZN14SoftwareSerial5setRXEh>

00003e54 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	ec 01       	movw	r28, r24
    3e5a:	9a 01       	movw	r18, r20
    3e5c:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3e5e:	1b 8e       	std	Y+27, r1	; 0x1b
    3e60:	1a 8e       	std	Y+26, r1	; 0x1a
    3e62:	19 8e       	std	Y+25, r1	; 0x19
    3e64:	18 8e       	std	Y+24, r1	; 0x18
    3e66:	1f 8a       	std	Y+23, r1	; 0x17
    3e68:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	79 e0       	ldi	r23, 0x09	; 9
    3e6e:	8d e3       	ldi	r24, 0x3D	; 61
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0e 94 0f 20 	call	0x401e	; 0x401e <__divmodsi4>
    3e76:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3e78:	24 30       	cpi	r18, 0x04	; 4
    3e7a:	31 05       	cpc	r19, r1
    3e7c:	18 f0       	brcs	.+6      	; 0x3e84 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3e7e:	c9 01       	movw	r24, r18
    3e80:	03 97       	sbiw	r24, 0x03	; 3
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3e88:	9d 8f       	std	Y+29, r25	; 0x1d
    3e8a:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3e8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e8e:	66 31       	cpi	r22, 0x16	; 22
    3e90:	08 f0       	brcs	.+2      	; 0x3e94 <_ZN14SoftwareSerial5beginEl+0x40>
    3e92:	69 c0       	rjmp	.+210    	; 0x3f66 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3e94:	c9 01       	movw	r24, r18
    3e96:	96 95       	lsr	r25
    3e98:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3e9a:	84 31       	cpi	r24, 0x14	; 20
    3e9c:	91 05       	cpc	r25, r1
    3e9e:	10 f0       	brcs	.+4      	; 0x3ea4 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3ea0:	43 97       	sbiw	r24, 0x13	; 19
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3ea8:	9f 8b       	std	Y+23, r25	; 0x17
    3eaa:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3eac:	36 97       	sbiw	r30, 0x06	; 6
    3eae:	18 f0       	brcs	.+6      	; 0x3eb6 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3eb0:	c9 01       	movw	r24, r18
    3eb2:	05 97       	sbiw	r24, 0x05	; 5
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3eba:	99 8f       	std	Y+25, r25	; 0x19
    3ebc:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3ebe:	c9 01       	movw	r24, r18
    3ec0:	88 0f       	add	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	28 0f       	add	r18, r24
    3ec6:	39 1f       	adc	r19, r25
    3ec8:	36 95       	lsr	r19
    3eca:	27 95       	ror	r18
    3ecc:	36 95       	lsr	r19
    3ece:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3ed0:	2d 30       	cpi	r18, 0x0D	; 13
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	18 f0       	brcs	.+6      	; 0x3edc <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3ed6:	2c 50       	subi	r18, 0x0C	; 12
    3ed8:	31 09       	sbc	r19, r1
    3eda:	02 c0       	rjmp	.+4      	; 0x3ee0 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3edc:	21 e0       	ldi	r18, 0x01	; 1
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3ee0:	3b 8f       	std	Y+27, r19	; 0x1b
    3ee2:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3ee4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3ee8:	68 30       	cpi	r22, 0x08	; 8
    3eea:	50 f0       	brcs	.+20     	; 0x3f00 <_ZN14SoftwareSerial5beginEl+0xac>
    3eec:	21 e0       	ldi	r18, 0x01	; 1
    3eee:	6e 30       	cpi	r22, 0x0E	; 14
    3ef0:	08 f4       	brcc	.+2      	; 0x3ef4 <_ZN14SoftwareSerial5beginEl+0xa0>
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	01 c0       	rjmp	.+2      	; 0x3efa <_ZN14SoftwareSerial5beginEl+0xa6>
    3ef8:	88 0f       	add	r24, r24
    3efa:	2a 95       	dec	r18
    3efc:	ea f7       	brpl	.-6      	; 0x3ef8 <_ZN14SoftwareSerial5beginEl+0xa4>
    3efe:	01 c0       	rjmp	.+2      	; 0x3f02 <_ZN14SoftwareSerial5beginEl+0xae>
    3f00:	84 e0       	ldi	r24, 0x04	; 4
    3f02:	89 2b       	or	r24, r25
    3f04:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    3f08:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f0a:	98 30       	cpi	r25, 0x08	; 8
    3f0c:	38 f0       	brcs	.+14     	; 0x3f1c <_ZN14SoftwareSerial5beginEl+0xc8>
    3f0e:	9e 30       	cpi	r25, 0x0E	; 14
    3f10:	40 f0       	brcs	.+16     	; 0x3f22 <_ZN14SoftwareSerial5beginEl+0xce>
    3f12:	96 31       	cpi	r25, 0x16	; 22
    3f14:	48 f0       	brcs	.+18     	; 0x3f28 <_ZN14SoftwareSerial5beginEl+0xd4>
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	08 c0       	rjmp	.+16     	; 0x3f2c <_ZN14SoftwareSerial5beginEl+0xd8>
    3f1c:	2d e6       	ldi	r18, 0x6D	; 109
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	05 c0       	rjmp	.+10     	; 0x3f2c <_ZN14SoftwareSerial5beginEl+0xd8>
    3f22:	2b e6       	ldi	r18, 0x6B	; 107
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <_ZN14SoftwareSerial5beginEl+0xd8>
    3f28:	2c e6       	ldi	r18, 0x6C	; 108
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	3c 8b       	std	Y+20, r19	; 0x14
    3f2e:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3f30:	98 30       	cpi	r25, 0x08	; 8
    3f32:	30 f4       	brcc	.+12     	; 0x3f40 <_ZN14SoftwareSerial5beginEl+0xec>
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	01 c0       	rjmp	.+2      	; 0x3f3a <_ZN14SoftwareSerial5beginEl+0xe6>
    3f38:	88 0f       	add	r24, r24
    3f3a:	9a 95       	dec	r25
    3f3c:	ea f7       	brpl	.-6      	; 0x3f38 <_ZN14SoftwareSerial5beginEl+0xe4>
    3f3e:	0e c0       	rjmp	.+28     	; 0x3f5c <_ZN14SoftwareSerial5beginEl+0x108>
    3f40:	29 2f       	mov	r18, r25
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	9e 30       	cpi	r25, 0x0E	; 14
    3f46:	18 f4       	brcc	.+6      	; 0x3f4e <_ZN14SoftwareSerial5beginEl+0xfa>
    3f48:	28 50       	subi	r18, 0x08	; 8
    3f4a:	31 09       	sbc	r19, r1
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <_ZN14SoftwareSerial5beginEl+0xfe>
    3f4e:	2e 50       	subi	r18, 0x0E	; 14
    3f50:	31 09       	sbc	r19, r1
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	01 c0       	rjmp	.+2      	; 0x3f58 <_ZN14SoftwareSerial5beginEl+0x104>
    3f56:	88 0f       	add	r24, r24
    3f58:	2a 95       	dec	r18
    3f5a:	ea f7       	brpl	.-6      	; 0x3f56 <_ZN14SoftwareSerial5beginEl+0x102>
    3f5c:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3f5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3f66:	ce 01       	movw	r24, r28
}
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3f6c:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <_ZN14SoftwareSerial6listenEv>

00003f70 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3f70:	08 95       	ret

00003f72 <__udivmodqi4>:
    3f72:	99 1b       	sub	r25, r25
    3f74:	79 e0       	ldi	r23, 0x09	; 9
    3f76:	04 c0       	rjmp	.+8      	; 0x3f80 <__udivmodqi4_ep>

00003f78 <__udivmodqi4_loop>:
    3f78:	99 1f       	adc	r25, r25
    3f7a:	96 17       	cp	r25, r22
    3f7c:	08 f0       	brcs	.+2      	; 0x3f80 <__udivmodqi4_ep>
    3f7e:	96 1b       	sub	r25, r22

00003f80 <__udivmodqi4_ep>:
    3f80:	88 1f       	adc	r24, r24
    3f82:	7a 95       	dec	r23
    3f84:	c9 f7       	brne	.-14     	; 0x3f78 <__udivmodqi4_loop>
    3f86:	80 95       	com	r24
    3f88:	08 95       	ret

00003f8a <__udivmodhi4>:
    3f8a:	aa 1b       	sub	r26, r26
    3f8c:	bb 1b       	sub	r27, r27
    3f8e:	51 e1       	ldi	r21, 0x11	; 17
    3f90:	07 c0       	rjmp	.+14     	; 0x3fa0 <__udivmodhi4_ep>

00003f92 <__udivmodhi4_loop>:
    3f92:	aa 1f       	adc	r26, r26
    3f94:	bb 1f       	adc	r27, r27
    3f96:	a6 17       	cp	r26, r22
    3f98:	b7 07       	cpc	r27, r23
    3f9a:	10 f0       	brcs	.+4      	; 0x3fa0 <__udivmodhi4_ep>
    3f9c:	a6 1b       	sub	r26, r22
    3f9e:	b7 0b       	sbc	r27, r23

00003fa0 <__udivmodhi4_ep>:
    3fa0:	88 1f       	adc	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	5a 95       	dec	r21
    3fa6:	a9 f7       	brne	.-22     	; 0x3f92 <__udivmodhi4_loop>
    3fa8:	80 95       	com	r24
    3faa:	90 95       	com	r25
    3fac:	bc 01       	movw	r22, r24
    3fae:	cd 01       	movw	r24, r26
    3fb0:	08 95       	ret

00003fb2 <__divmodhi4>:
    3fb2:	97 fb       	bst	r25, 7
    3fb4:	07 2e       	mov	r0, r23
    3fb6:	16 f4       	brtc	.+4      	; 0x3fbc <__divmodhi4+0xa>
    3fb8:	00 94       	com	r0
    3fba:	07 d0       	rcall	.+14     	; 0x3fca <__divmodhi4_neg1>
    3fbc:	77 fd       	sbrc	r23, 7
    3fbe:	09 d0       	rcall	.+18     	; 0x3fd2 <__divmodhi4_neg2>
    3fc0:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__udivmodhi4>
    3fc4:	07 fc       	sbrc	r0, 7
    3fc6:	05 d0       	rcall	.+10     	; 0x3fd2 <__divmodhi4_neg2>
    3fc8:	3e f4       	brtc	.+14     	; 0x3fd8 <__divmodhi4_exit>

00003fca <__divmodhi4_neg1>:
    3fca:	90 95       	com	r25
    3fcc:	81 95       	neg	r24
    3fce:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd0:	08 95       	ret

00003fd2 <__divmodhi4_neg2>:
    3fd2:	70 95       	com	r23
    3fd4:	61 95       	neg	r22
    3fd6:	7f 4f       	sbci	r23, 0xFF	; 255

00003fd8 <__divmodhi4_exit>:
    3fd8:	08 95       	ret

00003fda <__udivmodsi4>:
    3fda:	a1 e2       	ldi	r26, 0x21	; 33
    3fdc:	1a 2e       	mov	r1, r26
    3fde:	aa 1b       	sub	r26, r26
    3fe0:	bb 1b       	sub	r27, r27
    3fe2:	fd 01       	movw	r30, r26
    3fe4:	0d c0       	rjmp	.+26     	; 0x4000 <__udivmodsi4_ep>

00003fe6 <__udivmodsi4_loop>:
    3fe6:	aa 1f       	adc	r26, r26
    3fe8:	bb 1f       	adc	r27, r27
    3fea:	ee 1f       	adc	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	a2 17       	cp	r26, r18
    3ff0:	b3 07       	cpc	r27, r19
    3ff2:	e4 07       	cpc	r30, r20
    3ff4:	f5 07       	cpc	r31, r21
    3ff6:	20 f0       	brcs	.+8      	; 0x4000 <__udivmodsi4_ep>
    3ff8:	a2 1b       	sub	r26, r18
    3ffa:	b3 0b       	sbc	r27, r19
    3ffc:	e4 0b       	sbc	r30, r20
    3ffe:	f5 0b       	sbc	r31, r21

00004000 <__udivmodsi4_ep>:
    4000:	66 1f       	adc	r22, r22
    4002:	77 1f       	adc	r23, r23
    4004:	88 1f       	adc	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	1a 94       	dec	r1
    400a:	69 f7       	brne	.-38     	; 0x3fe6 <__udivmodsi4_loop>
    400c:	60 95       	com	r22
    400e:	70 95       	com	r23
    4010:	80 95       	com	r24
    4012:	90 95       	com	r25
    4014:	9b 01       	movw	r18, r22
    4016:	ac 01       	movw	r20, r24
    4018:	bd 01       	movw	r22, r26
    401a:	cf 01       	movw	r24, r30
    401c:	08 95       	ret

0000401e <__divmodsi4>:
    401e:	05 2e       	mov	r0, r21
    4020:	97 fb       	bst	r25, 7
    4022:	1e f4       	brtc	.+6      	; 0x402a <__divmodsi4+0xc>
    4024:	00 94       	com	r0
    4026:	0e 94 26 20 	call	0x404c	; 0x404c <__negsi2>
    402a:	57 fd       	sbrc	r21, 7
    402c:	07 d0       	rcall	.+14     	; 0x403c <__divmodsi4_neg2>
    402e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__udivmodsi4>
    4032:	07 fc       	sbrc	r0, 7
    4034:	03 d0       	rcall	.+6      	; 0x403c <__divmodsi4_neg2>
    4036:	4e f4       	brtc	.+18     	; 0x404a <__divmodsi4_exit>
    4038:	0c 94 26 20 	jmp	0x404c	; 0x404c <__negsi2>

0000403c <__divmodsi4_neg2>:
    403c:	50 95       	com	r21
    403e:	40 95       	com	r20
    4040:	30 95       	com	r19
    4042:	21 95       	neg	r18
    4044:	3f 4f       	sbci	r19, 0xFF	; 255
    4046:	4f 4f       	sbci	r20, 0xFF	; 255
    4048:	5f 4f       	sbci	r21, 0xFF	; 255

0000404a <__divmodsi4_exit>:
    404a:	08 95       	ret

0000404c <__negsi2>:
    404c:	90 95       	com	r25
    404e:	80 95       	com	r24
    4050:	70 95       	com	r23
    4052:	61 95       	neg	r22
    4054:	7f 4f       	sbci	r23, 0xFF	; 255
    4056:	8f 4f       	sbci	r24, 0xFF	; 255
    4058:	9f 4f       	sbci	r25, 0xFF	; 255
    405a:	08 95       	ret

0000405c <__tablejump2__>:
    405c:	ee 0f       	add	r30, r30
    405e:	ff 1f       	adc	r31, r31
    4060:	05 90       	lpm	r0, Z+
    4062:	f4 91       	lpm	r31, Z
    4064:	e0 2d       	mov	r30, r0
    4066:	09 94       	ijmp

00004068 <malloc>:
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	82 30       	cpi	r24, 0x02	; 2
    4072:	91 05       	cpc	r25, r1
    4074:	10 f4       	brcc	.+4      	; 0x407a <malloc+0x12>
    4076:	82 e0       	ldi	r24, 0x02	; 2
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <__flp>
    407e:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <__flp+0x1>
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	a0 e0       	ldi	r26, 0x00	; 0
    4088:	b0 e0       	ldi	r27, 0x00	; 0
    408a:	30 97       	sbiw	r30, 0x00	; 0
    408c:	19 f1       	breq	.+70     	; 0x40d4 <malloc+0x6c>
    408e:	40 81       	ld	r20, Z
    4090:	51 81       	ldd	r21, Z+1	; 0x01
    4092:	02 81       	ldd	r16, Z+2	; 0x02
    4094:	13 81       	ldd	r17, Z+3	; 0x03
    4096:	48 17       	cp	r20, r24
    4098:	59 07       	cpc	r21, r25
    409a:	c8 f0       	brcs	.+50     	; 0x40ce <malloc+0x66>
    409c:	84 17       	cp	r24, r20
    409e:	95 07       	cpc	r25, r21
    40a0:	69 f4       	brne	.+26     	; 0x40bc <malloc+0x54>
    40a2:	10 97       	sbiw	r26, 0x00	; 0
    40a4:	31 f0       	breq	.+12     	; 0x40b2 <malloc+0x4a>
    40a6:	12 96       	adiw	r26, 0x02	; 2
    40a8:	0c 93       	st	X, r16
    40aa:	12 97       	sbiw	r26, 0x02	; 2
    40ac:	13 96       	adiw	r26, 0x03	; 3
    40ae:	1c 93       	st	X, r17
    40b0:	27 c0       	rjmp	.+78     	; 0x4100 <malloc+0x98>
    40b2:	00 93 bb 04 	sts	0x04BB, r16	; 0x8004bb <__flp>
    40b6:	10 93 bc 04 	sts	0x04BC, r17	; 0x8004bc <__flp+0x1>
    40ba:	22 c0       	rjmp	.+68     	; 0x4100 <malloc+0x98>
    40bc:	21 15       	cp	r18, r1
    40be:	31 05       	cpc	r19, r1
    40c0:	19 f0       	breq	.+6      	; 0x40c8 <malloc+0x60>
    40c2:	42 17       	cp	r20, r18
    40c4:	53 07       	cpc	r21, r19
    40c6:	18 f4       	brcc	.+6      	; 0x40ce <malloc+0x66>
    40c8:	9a 01       	movw	r18, r20
    40ca:	bd 01       	movw	r22, r26
    40cc:	ef 01       	movw	r28, r30
    40ce:	df 01       	movw	r26, r30
    40d0:	f8 01       	movw	r30, r16
    40d2:	db cf       	rjmp	.-74     	; 0x408a <malloc+0x22>
    40d4:	21 15       	cp	r18, r1
    40d6:	31 05       	cpc	r19, r1
    40d8:	f9 f0       	breq	.+62     	; 0x4118 <malloc+0xb0>
    40da:	28 1b       	sub	r18, r24
    40dc:	39 0b       	sbc	r19, r25
    40de:	24 30       	cpi	r18, 0x04	; 4
    40e0:	31 05       	cpc	r19, r1
    40e2:	80 f4       	brcc	.+32     	; 0x4104 <malloc+0x9c>
    40e4:	8a 81       	ldd	r24, Y+2	; 0x02
    40e6:	9b 81       	ldd	r25, Y+3	; 0x03
    40e8:	61 15       	cp	r22, r1
    40ea:	71 05       	cpc	r23, r1
    40ec:	21 f0       	breq	.+8      	; 0x40f6 <malloc+0x8e>
    40ee:	fb 01       	movw	r30, r22
    40f0:	93 83       	std	Z+3, r25	; 0x03
    40f2:	82 83       	std	Z+2, r24	; 0x02
    40f4:	04 c0       	rjmp	.+8      	; 0x40fe <malloc+0x96>
    40f6:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <__flp+0x1>
    40fa:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <__flp>
    40fe:	fe 01       	movw	r30, r28
    4100:	32 96       	adiw	r30, 0x02	; 2
    4102:	44 c0       	rjmp	.+136    	; 0x418c <malloc+0x124>
    4104:	fe 01       	movw	r30, r28
    4106:	e2 0f       	add	r30, r18
    4108:	f3 1f       	adc	r31, r19
    410a:	81 93       	st	Z+, r24
    410c:	91 93       	st	Z+, r25
    410e:	22 50       	subi	r18, 0x02	; 2
    4110:	31 09       	sbc	r19, r1
    4112:	39 83       	std	Y+1, r19	; 0x01
    4114:	28 83       	st	Y, r18
    4116:	3a c0       	rjmp	.+116    	; 0x418c <malloc+0x124>
    4118:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <__brkval>
    411c:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <__brkval+0x1>
    4120:	23 2b       	or	r18, r19
    4122:	41 f4       	brne	.+16     	; 0x4134 <malloc+0xcc>
    4124:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4128:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    412c:	30 93 ba 04 	sts	0x04BA, r19	; 0x8004ba <__brkval+0x1>
    4130:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <__brkval>
    4134:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4138:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    413c:	21 15       	cp	r18, r1
    413e:	31 05       	cpc	r19, r1
    4140:	41 f4       	brne	.+16     	; 0x4152 <malloc+0xea>
    4142:	2d b7       	in	r18, 0x3d	; 61
    4144:	3e b7       	in	r19, 0x3e	; 62
    4146:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    414a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    414e:	24 1b       	sub	r18, r20
    4150:	35 0b       	sbc	r19, r21
    4152:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <__brkval>
    4156:	f0 91 ba 04 	lds	r31, 0x04BA	; 0x8004ba <__brkval+0x1>
    415a:	e2 17       	cp	r30, r18
    415c:	f3 07       	cpc	r31, r19
    415e:	a0 f4       	brcc	.+40     	; 0x4188 <malloc+0x120>
    4160:	2e 1b       	sub	r18, r30
    4162:	3f 0b       	sbc	r19, r31
    4164:	28 17       	cp	r18, r24
    4166:	39 07       	cpc	r19, r25
    4168:	78 f0       	brcs	.+30     	; 0x4188 <malloc+0x120>
    416a:	ac 01       	movw	r20, r24
    416c:	4e 5f       	subi	r20, 0xFE	; 254
    416e:	5f 4f       	sbci	r21, 0xFF	; 255
    4170:	24 17       	cp	r18, r20
    4172:	35 07       	cpc	r19, r21
    4174:	48 f0       	brcs	.+18     	; 0x4188 <malloc+0x120>
    4176:	4e 0f       	add	r20, r30
    4178:	5f 1f       	adc	r21, r31
    417a:	50 93 ba 04 	sts	0x04BA, r21	; 0x8004ba <__brkval+0x1>
    417e:	40 93 b9 04 	sts	0x04B9, r20	; 0x8004b9 <__brkval>
    4182:	81 93       	st	Z+, r24
    4184:	91 93       	st	Z+, r25
    4186:	02 c0       	rjmp	.+4      	; 0x418c <malloc+0x124>
    4188:	e0 e0       	ldi	r30, 0x00	; 0
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	cf 01       	movw	r24, r30
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	1f 91       	pop	r17
    4194:	0f 91       	pop	r16
    4196:	08 95       	ret

00004198 <free>:
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	09 f4       	brne	.+2      	; 0x41a2 <free+0xa>
    41a0:	81 c0       	rjmp	.+258    	; 0x42a4 <free+0x10c>
    41a2:	fc 01       	movw	r30, r24
    41a4:	32 97       	sbiw	r30, 0x02	; 2
    41a6:	13 82       	std	Z+3, r1	; 0x03
    41a8:	12 82       	std	Z+2, r1	; 0x02
    41aa:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <__flp>
    41ae:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <__flp+0x1>
    41b2:	10 97       	sbiw	r26, 0x00	; 0
    41b4:	81 f4       	brne	.+32     	; 0x41d6 <free+0x3e>
    41b6:	20 81       	ld	r18, Z
    41b8:	31 81       	ldd	r19, Z+1	; 0x01
    41ba:	82 0f       	add	r24, r18
    41bc:	93 1f       	adc	r25, r19
    41be:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <__brkval>
    41c2:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <__brkval+0x1>
    41c6:	28 17       	cp	r18, r24
    41c8:	39 07       	cpc	r19, r25
    41ca:	51 f5       	brne	.+84     	; 0x4220 <free+0x88>
    41cc:	f0 93 ba 04 	sts	0x04BA, r31	; 0x8004ba <__brkval+0x1>
    41d0:	e0 93 b9 04 	sts	0x04B9, r30	; 0x8004b9 <__brkval>
    41d4:	67 c0       	rjmp	.+206    	; 0x42a4 <free+0x10c>
    41d6:	ed 01       	movw	r28, r26
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	ce 17       	cp	r28, r30
    41de:	df 07       	cpc	r29, r31
    41e0:	40 f4       	brcc	.+16     	; 0x41f2 <free+0x5a>
    41e2:	4a 81       	ldd	r20, Y+2	; 0x02
    41e4:	5b 81       	ldd	r21, Y+3	; 0x03
    41e6:	9e 01       	movw	r18, r28
    41e8:	41 15       	cp	r20, r1
    41ea:	51 05       	cpc	r21, r1
    41ec:	f1 f0       	breq	.+60     	; 0x422a <free+0x92>
    41ee:	ea 01       	movw	r28, r20
    41f0:	f5 cf       	rjmp	.-22     	; 0x41dc <free+0x44>
    41f2:	d3 83       	std	Z+3, r29	; 0x03
    41f4:	c2 83       	std	Z+2, r28	; 0x02
    41f6:	40 81       	ld	r20, Z
    41f8:	51 81       	ldd	r21, Z+1	; 0x01
    41fa:	84 0f       	add	r24, r20
    41fc:	95 1f       	adc	r25, r21
    41fe:	c8 17       	cp	r28, r24
    4200:	d9 07       	cpc	r29, r25
    4202:	59 f4       	brne	.+22     	; 0x421a <free+0x82>
    4204:	88 81       	ld	r24, Y
    4206:	99 81       	ldd	r25, Y+1	; 0x01
    4208:	84 0f       	add	r24, r20
    420a:	95 1f       	adc	r25, r21
    420c:	02 96       	adiw	r24, 0x02	; 2
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	80 83       	st	Z, r24
    4212:	8a 81       	ldd	r24, Y+2	; 0x02
    4214:	9b 81       	ldd	r25, Y+3	; 0x03
    4216:	93 83       	std	Z+3, r25	; 0x03
    4218:	82 83       	std	Z+2, r24	; 0x02
    421a:	21 15       	cp	r18, r1
    421c:	31 05       	cpc	r19, r1
    421e:	29 f4       	brne	.+10     	; 0x422a <free+0x92>
    4220:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <__flp+0x1>
    4224:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <__flp>
    4228:	3d c0       	rjmp	.+122    	; 0x42a4 <free+0x10c>
    422a:	e9 01       	movw	r28, r18
    422c:	fb 83       	std	Y+3, r31	; 0x03
    422e:	ea 83       	std	Y+2, r30	; 0x02
    4230:	49 91       	ld	r20, Y+
    4232:	59 91       	ld	r21, Y+
    4234:	c4 0f       	add	r28, r20
    4236:	d5 1f       	adc	r29, r21
    4238:	ec 17       	cp	r30, r28
    423a:	fd 07       	cpc	r31, r29
    423c:	61 f4       	brne	.+24     	; 0x4256 <free+0xbe>
    423e:	80 81       	ld	r24, Z
    4240:	91 81       	ldd	r25, Z+1	; 0x01
    4242:	84 0f       	add	r24, r20
    4244:	95 1f       	adc	r25, r21
    4246:	02 96       	adiw	r24, 0x02	; 2
    4248:	e9 01       	movw	r28, r18
    424a:	99 83       	std	Y+1, r25	; 0x01
    424c:	88 83       	st	Y, r24
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	9b 83       	std	Y+3, r25	; 0x03
    4254:	8a 83       	std	Y+2, r24	; 0x02
    4256:	e0 e0       	ldi	r30, 0x00	; 0
    4258:	f0 e0       	ldi	r31, 0x00	; 0
    425a:	12 96       	adiw	r26, 0x02	; 2
    425c:	8d 91       	ld	r24, X+
    425e:	9c 91       	ld	r25, X
    4260:	13 97       	sbiw	r26, 0x03	; 3
    4262:	00 97       	sbiw	r24, 0x00	; 0
    4264:	19 f0       	breq	.+6      	; 0x426c <free+0xd4>
    4266:	fd 01       	movw	r30, r26
    4268:	dc 01       	movw	r26, r24
    426a:	f7 cf       	rjmp	.-18     	; 0x425a <free+0xc2>
    426c:	8d 91       	ld	r24, X+
    426e:	9c 91       	ld	r25, X
    4270:	11 97       	sbiw	r26, 0x01	; 1
    4272:	9d 01       	movw	r18, r26
    4274:	2e 5f       	subi	r18, 0xFE	; 254
    4276:	3f 4f       	sbci	r19, 0xFF	; 255
    4278:	82 0f       	add	r24, r18
    427a:	93 1f       	adc	r25, r19
    427c:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <__brkval>
    4280:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <__brkval+0x1>
    4284:	28 17       	cp	r18, r24
    4286:	39 07       	cpc	r19, r25
    4288:	69 f4       	brne	.+26     	; 0x42a4 <free+0x10c>
    428a:	30 97       	sbiw	r30, 0x00	; 0
    428c:	29 f4       	brne	.+10     	; 0x4298 <free+0x100>
    428e:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <__flp+0x1>
    4292:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <__flp>
    4296:	02 c0       	rjmp	.+4      	; 0x429c <free+0x104>
    4298:	13 82       	std	Z+3, r1	; 0x03
    429a:	12 82       	std	Z+2, r1	; 0x02
    429c:	b0 93 ba 04 	sts	0x04BA, r27	; 0x8004ba <__brkval+0x1>
    42a0:	a0 93 b9 04 	sts	0x04B9, r26	; 0x8004b9 <__brkval>
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	08 95       	ret

000042aa <realloc>:
    42aa:	a0 e0       	ldi	r26, 0x00	; 0
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	eb e5       	ldi	r30, 0x5B	; 91
    42b0:	f1 e2       	ldi	r31, 0x21	; 33
    42b2:	0c 94 8c 22 	jmp	0x4518	; 0x4518 <__prologue_saves__+0x8>
    42b6:	ec 01       	movw	r28, r24
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	21 f4       	brne	.+8      	; 0x42c4 <realloc+0x1a>
    42bc:	cb 01       	movw	r24, r22
    42be:	0e 94 34 20 	call	0x4068	; 0x4068 <malloc>
    42c2:	b4 c0       	rjmp	.+360    	; 0x442c <realloc+0x182>
    42c4:	fc 01       	movw	r30, r24
    42c6:	e6 0f       	add	r30, r22
    42c8:	f7 1f       	adc	r31, r23
    42ca:	9c 01       	movw	r18, r24
    42cc:	22 50       	subi	r18, 0x02	; 2
    42ce:	31 09       	sbc	r19, r1
    42d0:	e2 17       	cp	r30, r18
    42d2:	f3 07       	cpc	r31, r19
    42d4:	08 f4       	brcc	.+2      	; 0x42d8 <realloc+0x2e>
    42d6:	a8 c0       	rjmp	.+336    	; 0x4428 <realloc+0x17e>
    42d8:	d9 01       	movw	r26, r18
    42da:	0d 91       	ld	r16, X+
    42dc:	1c 91       	ld	r17, X
    42de:	11 97       	sbiw	r26, 0x01	; 1
    42e0:	06 17       	cp	r16, r22
    42e2:	17 07       	cpc	r17, r23
    42e4:	b0 f0       	brcs	.+44     	; 0x4312 <realloc+0x68>
    42e6:	05 30       	cpi	r16, 0x05	; 5
    42e8:	11 05       	cpc	r17, r1
    42ea:	08 f4       	brcc	.+2      	; 0x42ee <realloc+0x44>
    42ec:	9b c0       	rjmp	.+310    	; 0x4424 <realloc+0x17a>
    42ee:	c8 01       	movw	r24, r16
    42f0:	04 97       	sbiw	r24, 0x04	; 4
    42f2:	86 17       	cp	r24, r22
    42f4:	97 07       	cpc	r25, r23
    42f6:	08 f4       	brcc	.+2      	; 0x42fa <realloc+0x50>
    42f8:	95 c0       	rjmp	.+298    	; 0x4424 <realloc+0x17a>
    42fa:	02 50       	subi	r16, 0x02	; 2
    42fc:	11 09       	sbc	r17, r1
    42fe:	06 1b       	sub	r16, r22
    4300:	17 0b       	sbc	r17, r23
    4302:	01 93       	st	Z+, r16
    4304:	11 93       	st	Z+, r17
    4306:	6d 93       	st	X+, r22
    4308:	7c 93       	st	X, r23
    430a:	cf 01       	movw	r24, r30
    430c:	0e 94 cc 20 	call	0x4198	; 0x4198 <free>
    4310:	89 c0       	rjmp	.+274    	; 0x4424 <realloc+0x17a>
    4312:	5b 01       	movw	r10, r22
    4314:	a0 1a       	sub	r10, r16
    4316:	b1 0a       	sbc	r11, r17
    4318:	4c 01       	movw	r8, r24
    431a:	80 0e       	add	r8, r16
    431c:	91 1e       	adc	r9, r17
    431e:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <__flp>
    4322:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <__flp+0x1>
    4326:	61 2c       	mov	r6, r1
    4328:	71 2c       	mov	r7, r1
    432a:	e1 2c       	mov	r14, r1
    432c:	f1 2c       	mov	r15, r1
    432e:	10 97       	sbiw	r26, 0x00	; 0
    4330:	09 f4       	brne	.+2      	; 0x4334 <realloc+0x8a>
    4332:	46 c0       	rjmp	.+140    	; 0x43c0 <realloc+0x116>
    4334:	8d 91       	ld	r24, X+
    4336:	9c 91       	ld	r25, X
    4338:	11 97       	sbiw	r26, 0x01	; 1
    433a:	a8 15       	cp	r26, r8
    433c:	b9 05       	cpc	r27, r9
    433e:	b1 f5       	brne	.+108    	; 0x43ac <realloc+0x102>
    4340:	6c 01       	movw	r12, r24
    4342:	42 e0       	ldi	r20, 0x02	; 2
    4344:	c4 0e       	add	r12, r20
    4346:	d1 1c       	adc	r13, r1
    4348:	ca 14       	cp	r12, r10
    434a:	db 04       	cpc	r13, r11
    434c:	78 f1       	brcs	.+94     	; 0x43ac <realloc+0x102>
    434e:	4c 01       	movw	r8, r24
    4350:	8a 18       	sub	r8, r10
    4352:	9b 08       	sbc	r9, r11
    4354:	64 01       	movw	r12, r8
    4356:	42 e0       	ldi	r20, 0x02	; 2
    4358:	c4 0e       	add	r12, r20
    435a:	d1 1c       	adc	r13, r1
    435c:	12 96       	adiw	r26, 0x02	; 2
    435e:	bc 90       	ld	r11, X
    4360:	12 97       	sbiw	r26, 0x02	; 2
    4362:	13 96       	adiw	r26, 0x03	; 3
    4364:	ac 91       	ld	r26, X
    4366:	b5 e0       	ldi	r27, 0x05	; 5
    4368:	cb 16       	cp	r12, r27
    436a:	d1 04       	cpc	r13, r1
    436c:	40 f0       	brcs	.+16     	; 0x437e <realloc+0xd4>
    436e:	b2 82       	std	Z+2, r11	; 0x02
    4370:	a3 83       	std	Z+3, r26	; 0x03
    4372:	91 82       	std	Z+1, r9	; 0x01
    4374:	80 82       	st	Z, r8
    4376:	d9 01       	movw	r26, r18
    4378:	6d 93       	st	X+, r22
    437a:	7c 93       	st	X, r23
    437c:	09 c0       	rjmp	.+18     	; 0x4390 <realloc+0xe6>
    437e:	0e 5f       	subi	r16, 0xFE	; 254
    4380:	1f 4f       	sbci	r17, 0xFF	; 255
    4382:	80 0f       	add	r24, r16
    4384:	91 1f       	adc	r25, r17
    4386:	f9 01       	movw	r30, r18
    4388:	91 83       	std	Z+1, r25	; 0x01
    438a:	80 83       	st	Z, r24
    438c:	eb 2d       	mov	r30, r11
    438e:	fa 2f       	mov	r31, r26
    4390:	e1 14       	cp	r14, r1
    4392:	f1 04       	cpc	r15, r1
    4394:	31 f0       	breq	.+12     	; 0x43a2 <realloc+0xf8>
    4396:	d7 01       	movw	r26, r14
    4398:	13 96       	adiw	r26, 0x03	; 3
    439a:	fc 93       	st	X, r31
    439c:	ee 93       	st	-X, r30
    439e:	12 97       	sbiw	r26, 0x02	; 2
    43a0:	41 c0       	rjmp	.+130    	; 0x4424 <realloc+0x17a>
    43a2:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <__flp+0x1>
    43a6:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <__flp>
    43aa:	3c c0       	rjmp	.+120    	; 0x4424 <realloc+0x17a>
    43ac:	68 16       	cp	r6, r24
    43ae:	79 06       	cpc	r7, r25
    43b0:	08 f4       	brcc	.+2      	; 0x43b4 <realloc+0x10a>
    43b2:	3c 01       	movw	r6, r24
    43b4:	7d 01       	movw	r14, r26
    43b6:	12 96       	adiw	r26, 0x02	; 2
    43b8:	0d 90       	ld	r0, X+
    43ba:	bc 91       	ld	r27, X
    43bc:	a0 2d       	mov	r26, r0
    43be:	b7 cf       	rjmp	.-146    	; 0x432e <realloc+0x84>
    43c0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <__brkval>
    43c4:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <__brkval+0x1>
    43c8:	88 16       	cp	r8, r24
    43ca:	99 06       	cpc	r9, r25
    43cc:	e1 f4       	brne	.+56     	; 0x4406 <realloc+0x15c>
    43ce:	66 16       	cp	r6, r22
    43d0:	77 06       	cpc	r7, r23
    43d2:	c8 f4       	brcc	.+50     	; 0x4406 <realloc+0x15c>
    43d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    43d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    43dc:	00 97       	sbiw	r24, 0x00	; 0
    43de:	41 f4       	brne	.+16     	; 0x43f0 <realloc+0x146>
    43e0:	8d b7       	in	r24, 0x3d	; 61
    43e2:	9e b7       	in	r25, 0x3e	; 62
    43e4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    43e8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    43ec:	84 1b       	sub	r24, r20
    43ee:	95 0b       	sbc	r25, r21
    43f0:	e8 17       	cp	r30, r24
    43f2:	f9 07       	cpc	r31, r25
    43f4:	c8 f4       	brcc	.+50     	; 0x4428 <realloc+0x17e>
    43f6:	f0 93 ba 04 	sts	0x04BA, r31	; 0x8004ba <__brkval+0x1>
    43fa:	e0 93 b9 04 	sts	0x04B9, r30	; 0x8004b9 <__brkval>
    43fe:	f9 01       	movw	r30, r18
    4400:	71 83       	std	Z+1, r23	; 0x01
    4402:	60 83       	st	Z, r22
    4404:	0f c0       	rjmp	.+30     	; 0x4424 <realloc+0x17a>
    4406:	cb 01       	movw	r24, r22
    4408:	0e 94 34 20 	call	0x4068	; 0x4068 <malloc>
    440c:	7c 01       	movw	r14, r24
    440e:	00 97       	sbiw	r24, 0x00	; 0
    4410:	59 f0       	breq	.+22     	; 0x4428 <realloc+0x17e>
    4412:	a8 01       	movw	r20, r16
    4414:	be 01       	movw	r22, r28
    4416:	0e 94 65 22 	call	0x44ca	; 0x44ca <memcpy>
    441a:	ce 01       	movw	r24, r28
    441c:	0e 94 cc 20 	call	0x4198	; 0x4198 <free>
    4420:	c7 01       	movw	r24, r14
    4422:	04 c0       	rjmp	.+8      	; 0x442c <realloc+0x182>
    4424:	ce 01       	movw	r24, r28
    4426:	02 c0       	rjmp	.+4      	; 0x442c <realloc+0x182>
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    4430:	ee e0       	ldi	r30, 0x0E	; 14
    4432:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__epilogue_restores__+0x8>

00004436 <atoi>:
    4436:	fc 01       	movw	r30, r24
    4438:	88 27       	eor	r24, r24
    443a:	99 27       	eor	r25, r25
    443c:	e8 94       	clt
    443e:	21 91       	ld	r18, Z+
    4440:	20 32       	cpi	r18, 0x20	; 32
    4442:	e9 f3       	breq	.-6      	; 0x443e <atoi+0x8>
    4444:	29 30       	cpi	r18, 0x09	; 9
    4446:	10 f0       	brcs	.+4      	; 0x444c <atoi+0x16>
    4448:	2e 30       	cpi	r18, 0x0E	; 14
    444a:	c8 f3       	brcs	.-14     	; 0x443e <atoi+0x8>
    444c:	2b 32       	cpi	r18, 0x2B	; 43
    444e:	41 f0       	breq	.+16     	; 0x4460 <atoi+0x2a>
    4450:	2d 32       	cpi	r18, 0x2D	; 45
    4452:	39 f4       	brne	.+14     	; 0x4462 <atoi+0x2c>
    4454:	68 94       	set
    4456:	04 c0       	rjmp	.+8      	; 0x4460 <atoi+0x2a>
    4458:	0e 94 80 22 	call	0x4500	; 0x4500 <__mulhi_const_10>
    445c:	82 0f       	add	r24, r18
    445e:	91 1d       	adc	r25, r1
    4460:	21 91       	ld	r18, Z+
    4462:	20 53       	subi	r18, 0x30	; 48
    4464:	2a 30       	cpi	r18, 0x0A	; 10
    4466:	c0 f3       	brcs	.-16     	; 0x4458 <atoi+0x22>
    4468:	1e f4       	brtc	.+6      	; 0x4470 <atoi+0x3a>
    446a:	90 95       	com	r25
    446c:	81 95       	neg	r24
    446e:	9f 4f       	sbci	r25, 0xFF	; 255
    4470:	08 95       	ret

00004472 <strcmp_P>:
    4472:	fb 01       	movw	r30, r22
    4474:	dc 01       	movw	r26, r24
    4476:	8d 91       	ld	r24, X+
    4478:	05 90       	lpm	r0, Z+
    447a:	80 19       	sub	r24, r0
    447c:	01 10       	cpse	r0, r1
    447e:	d9 f3       	breq	.-10     	; 0x4476 <strcmp_P+0x4>
    4480:	99 0b       	sbc	r25, r25
    4482:	08 95       	ret

00004484 <__strlen_P>:
    4484:	fc 01       	movw	r30, r24
    4486:	05 90       	lpm	r0, Z+
    4488:	00 20       	and	r0, r0
    448a:	e9 f7       	brne	.-6      	; 0x4486 <__strlen_P+0x2>
    448c:	80 95       	com	r24
    448e:	90 95       	com	r25
    4490:	8e 0f       	add	r24, r30
    4492:	9f 1f       	adc	r25, r31
    4494:	08 95       	ret

00004496 <strstr_P>:
    4496:	fb 01       	movw	r30, r22
    4498:	55 91       	lpm	r21, Z+
    449a:	55 23       	and	r21, r21
    449c:	a9 f0       	breq	.+42     	; 0x44c8 <strstr_P+0x32>
    449e:	bf 01       	movw	r22, r30
    44a0:	dc 01       	movw	r26, r24
    44a2:	4d 91       	ld	r20, X+
    44a4:	45 17       	cp	r20, r21
    44a6:	41 11       	cpse	r20, r1
    44a8:	e1 f7       	brne	.-8      	; 0x44a2 <strstr_P+0xc>
    44aa:	59 f4       	brne	.+22     	; 0x44c2 <strstr_P+0x2c>
    44ac:	cd 01       	movw	r24, r26
    44ae:	05 90       	lpm	r0, Z+
    44b0:	00 20       	and	r0, r0
    44b2:	49 f0       	breq	.+18     	; 0x44c6 <strstr_P+0x30>
    44b4:	4d 91       	ld	r20, X+
    44b6:	40 15       	cp	r20, r0
    44b8:	41 11       	cpse	r20, r1
    44ba:	c9 f3       	breq	.-14     	; 0x44ae <strstr_P+0x18>
    44bc:	fb 01       	movw	r30, r22
    44be:	41 11       	cpse	r20, r1
    44c0:	ef cf       	rjmp	.-34     	; 0x44a0 <strstr_P+0xa>
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	01 97       	sbiw	r24, 0x01	; 1
    44c8:	08 95       	ret

000044ca <memcpy>:
    44ca:	fb 01       	movw	r30, r22
    44cc:	dc 01       	movw	r26, r24
    44ce:	02 c0       	rjmp	.+4      	; 0x44d4 <memcpy+0xa>
    44d0:	01 90       	ld	r0, Z+
    44d2:	0d 92       	st	X+, r0
    44d4:	41 50       	subi	r20, 0x01	; 1
    44d6:	50 40       	sbci	r21, 0x00	; 0
    44d8:	d8 f7       	brcc	.-10     	; 0x44d0 <memcpy+0x6>
    44da:	08 95       	ret

000044dc <strchr>:
    44dc:	fc 01       	movw	r30, r24
    44de:	81 91       	ld	r24, Z+
    44e0:	86 17       	cp	r24, r22
    44e2:	21 f0       	breq	.+8      	; 0x44ec <strchr+0x10>
    44e4:	88 23       	and	r24, r24
    44e6:	d9 f7       	brne	.-10     	; 0x44de <strchr+0x2>
    44e8:	99 27       	eor	r25, r25
    44ea:	08 95       	ret
    44ec:	31 97       	sbiw	r30, 0x01	; 1
    44ee:	cf 01       	movw	r24, r30
    44f0:	08 95       	ret

000044f2 <strcpy>:
    44f2:	fb 01       	movw	r30, r22
    44f4:	dc 01       	movw	r26, r24
    44f6:	01 90       	ld	r0, Z+
    44f8:	0d 92       	st	X+, r0
    44fa:	00 20       	and	r0, r0
    44fc:	e1 f7       	brne	.-8      	; 0x44f6 <strcpy+0x4>
    44fe:	08 95       	ret

00004500 <__mulhi_const_10>:
    4500:	7a e0       	ldi	r23, 0x0A	; 10
    4502:	97 9f       	mul	r25, r23
    4504:	90 2d       	mov	r25, r0
    4506:	87 9f       	mul	r24, r23
    4508:	80 2d       	mov	r24, r0
    450a:	91 0d       	add	r25, r1
    450c:	11 24       	eor	r1, r1
    450e:	08 95       	ret

00004510 <__prologue_saves__>:
    4510:	2f 92       	push	r2
    4512:	3f 92       	push	r3
    4514:	4f 92       	push	r4
    4516:	5f 92       	push	r5
    4518:	6f 92       	push	r6
    451a:	7f 92       	push	r7
    451c:	8f 92       	push	r8
    451e:	9f 92       	push	r9
    4520:	af 92       	push	r10
    4522:	bf 92       	push	r11
    4524:	cf 92       	push	r12
    4526:	df 92       	push	r13
    4528:	ef 92       	push	r14
    452a:	ff 92       	push	r15
    452c:	0f 93       	push	r16
    452e:	1f 93       	push	r17
    4530:	cf 93       	push	r28
    4532:	df 93       	push	r29
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	ca 1b       	sub	r28, r26
    453a:	db 0b       	sbc	r29, r27
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	f8 94       	cli
    4540:	de bf       	out	0x3e, r29	; 62
    4542:	0f be       	out	0x3f, r0	; 63
    4544:	cd bf       	out	0x3d, r28	; 61
    4546:	09 94       	ijmp

00004548 <__epilogue_restores__>:
    4548:	2a 88       	ldd	r2, Y+18	; 0x12
    454a:	39 88       	ldd	r3, Y+17	; 0x11
    454c:	48 88       	ldd	r4, Y+16	; 0x10
    454e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4550:	6e 84       	ldd	r6, Y+14	; 0x0e
    4552:	7d 84       	ldd	r7, Y+13	; 0x0d
    4554:	8c 84       	ldd	r8, Y+12	; 0x0c
    4556:	9b 84       	ldd	r9, Y+11	; 0x0b
    4558:	aa 84       	ldd	r10, Y+10	; 0x0a
    455a:	b9 84       	ldd	r11, Y+9	; 0x09
    455c:	c8 84       	ldd	r12, Y+8	; 0x08
    455e:	df 80       	ldd	r13, Y+7	; 0x07
    4560:	ee 80       	ldd	r14, Y+6	; 0x06
    4562:	fd 80       	ldd	r15, Y+5	; 0x05
    4564:	0c 81       	ldd	r16, Y+4	; 0x04
    4566:	1b 81       	ldd	r17, Y+3	; 0x03
    4568:	aa 81       	ldd	r26, Y+2	; 0x02
    456a:	b9 81       	ldd	r27, Y+1	; 0x01
    456c:	ce 0f       	add	r28, r30
    456e:	d1 1d       	adc	r29, r1
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	ed 01       	movw	r28, r26
    457c:	08 95       	ret

0000457e <__do_global_dtors>:
    457e:	13 e0       	ldi	r17, 0x03	; 3
    4580:	cc e9       	ldi	r28, 0x9C	; 156
    4582:	d3 e0       	ldi	r29, 0x03	; 3
    4584:	04 c0       	rjmp	.+8      	; 0x458e <__do_global_dtors+0x10>
    4586:	fe 01       	movw	r30, r28
    4588:	0e 94 2e 20 	call	0x405c	; 0x405c <__tablejump2__>
    458c:	21 96       	adiw	r28, 0x01	; 1
    458e:	cd 39       	cpi	r28, 0x9D	; 157
    4590:	d1 07       	cpc	r29, r17
    4592:	c9 f7       	brne	.-14     	; 0x4586 <__do_global_dtors+0x8>
    4594:	f8 94       	cli

00004596 <__stop_program>:
    4596:	ff cf       	rjmp	.-2      	; 0x4596 <__stop_program>
