
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  000048ce  00004962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  0080019c  0080019c  000049fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000049fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce8  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000206ac  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049a8  00000000  00000000  00025e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071a9  00000000  00000000  0002a7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fc0  00000000  00000000  00031958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d51  00000000  00000000  00034918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000114c2  00000000  00000000  0003a669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  0004bb2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c0 03 	jmp	0x780	; 0x780 <__dtors_end>
       4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
       8:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
       c:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__vector_3>
      10:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__vector_3>
      14:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__vector_3>
      18:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      1c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      20:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      24:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      28:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      2c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      30:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      34:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      38:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      3c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      40:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__vector_16>
      44:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      48:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__vector_18>
      4c:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__vector_19>
      50:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      54:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      58:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      5c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>
      60:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__vector_24>
      64:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_E3__c>:
      aa:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000b2 <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c_0>:
      b2:	2b 48 54 54 50 52 45 41 44 3a 20 00                 +HTTPREAD: .

000000be <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c>:
      be:	41 54 2b 48 54 54 50 52 45 41 44 3d 30 2c 00        AT+HTTPREAD=0,.

000000cd <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      cd:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000da <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      da:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000e7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
      e7:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000000f6 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
      f6:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000000ff <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
      ff:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000010c <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     10c:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000119 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     119:	09 2d 2d 2d 3e 20 00                                .---> .

00000120 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     120:	22 2c 00                                            ",.

00000123 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     123:	22 2c 22 00                                         ",".

00000127 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     127:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000135 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     135:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000143 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     143:	09 2d 2d 2d 3e 20 00                                .---> .

0000014a <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     14a:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000156 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     156:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000162 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_4>:
     162:	2c 20 77 65 27 6c 6c 20 72 65 61 64 20 00           , we'll read .

00000170 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_3>:
     170:	2c 20 77 69 74 68 20 6f 75 72 20 6d 61 78 20 6f     , with our max o
     180:	66 20 00                                            f .

00000183 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_2>:
     183:	52 65 63 65 69 76 65 64 20 72 65 73 70 6f 6e 73     Received respons
     193:	65 20 6f 66 20 6c 65 6e 67 74 68 20 00              e of length .

000001a0 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_1>:
     1a0:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     1b0:	61 74 61 2c 20 73 74 61 74 75 73 20 63 6f 64 65     ata, status code
     1c0:	3a 20 00                                            : .

000001c3 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_0>:
     1c3:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000001ce <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c>:
     1ce:	68 74 74 70 3a 2f 2f 72 6d 6f 6e 2e 6b 68 75 64     http://rmon.khud
     1de:	64 61 6d 2e 6f 72 67 2e 75 6b 2f 3f 61 3d 61 64     dam.org.uk/?a=ad
     1ee:	64 00                                               d.

000001f0 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     1f0:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     1fb:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000208 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     208:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000213 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     213:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000021b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     21b:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000224 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     224:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000231 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     231:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     241:	44 22 2c 00                                         D",.

00000245 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     245:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     255:	45 52 22 2c 00                                      ER",.

0000025a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     25a:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000264 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     264:	09 2d 2d 2d 3e 20 00                                .---> .

0000026b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     26b:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000275 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     275:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     285:	4e 22 2c 00                                         N",.

00000289 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     289:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     299:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000002a7 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     2a7:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000002b2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     2b2:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000002bd <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     2bd:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000002c5 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     2c5:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002ce <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     2ce:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002d6 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     2d6:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002df <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     2df:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002e7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     2e7:	41 54 2b 43 53 51 00                                AT+CSQ.

000002ee <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     2ee:	2b 43 53 51 3a 20 00                                +CSQ: .

000002f5 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     2f5:	41 54 2b 43 53 51 00                                AT+CSQ.

000002fc <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     2fc:	2b 43 53 51 3a 20 00                                +CSQ: .

00000303 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     303:	41 54 2b 43 42 43 00                                AT+CBC.

0000030a <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     30a:	2b 43 42 43 3a 20 00                                +CBC: .

00000311 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     311:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000031c <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     31c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000323 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     323:	09 2d 2d 2d 3e 20 00                                .---> .

0000032a <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     32a:	41 54 45 30 00                                      ATE0.

0000032f <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     32f:	41 54 45 30 00                                      ATE0.

00000334 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     334:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     344:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

00000353 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     353:	41 54 00                                            AT.

00000356 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     356:	41 54 00                                            AT.

00000359 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     359:	41 54 00                                            AT.

0000035c <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     35c:	41 54 00                                            AT.

0000035f <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     35f:	41 54 00                                            AT.

00000362 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     362:	41 54 00                                            AT.

00000365 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     365:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     375:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000386 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     386:	4f 4b 00                                            OK.

00000389 <_ZZN13Adafruit_FONAC4EabE3__c>:
     389:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000391 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     391:	45 72 72 6f 72 3d 00                                Error=.

00000398 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     398:	20 7c 20 00                                          | .

0000039c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     39c:	54 65 6d 70 3d 00                                   Temp=.

000003a2 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     3a2:	20 7c 20 00                                          | .

000003a6 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     3a6:	43 75 72 72 65 6e 74 3d 00                          Current=.

000003af <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     3af:	20 7c 20 00                                          | .

000003b3 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     3b3:	50 56 2d 56 3d 00                                   PV-V=.

000003b9 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     3b9:	20 7c 20 00                                          | .

000003bd <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     3bd:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000003c5 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     3c5:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

000003d2 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     3d2:	20 7c 20 00                                          | .

000003d6 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     3d6:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

000003df <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     3df:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

000003e9 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     3e9:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     3f9:	6f 64 65 3d 00                                      ode=.

000003fe <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     3fe:	20 7c 20 00                                          | .

00000402 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     402:	42 45 52 3d 00                                      BER=.

00000407 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     407:	20 7c 20 00                                          | .

0000040b <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     40b:	52 53 53 49 3d 00                                   RSSI=.

00000411 <_ZL12b64_alphabet>:
     411:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     421:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     431:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     441:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000452 <_ZZ4loopE3__c>:
     452:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000045c <_ZZ8sendDatavE3__c_4>:
     45c:	2c 20 77 69 74 68 20 6c 65 6e 67 74 68 00           , with length.

0000046a <_ZZ8sendDatavE3__c_3>:
     46a:	52 65 73 70 6f 6e 73 65 20 66 72 6f 6d 20 73 65     Response from se
     47a:	6e 64 3a 20 00                                      nd: .

0000047f <_ZZ8sendDatavE3__c_2>:
     47f:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     48f:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     49f:	6f 72 20 73 65 6e 64 3a 00                          or send:.

000004a8 <_ZZ8sendDatavE3__c_1>:
     4a8:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     4b8:	52 29 00                                            R).

000004bb <_ZZ8sendDatavE3__c_0>:
     4bb:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     4cb:	69 6e 67 2e 2e 2e 29 00                             ing...).

000004d3 <_ZZ8sendDatavE3__c>:
     4d3:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     4e3:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

000004f2 <_ZZ17createEncodedDataPcPhhP14DailyCycleDataE3__c>:
     4f2:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     502:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     512:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

00000522 <_ZZ12takeReadingsvE3__c>:
     522:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     532:	2e 2e 00                                            ...

00000535 <_ZZ21ensureFonaInitialisedbE3__c_9>:
     535:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     545:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     555:	64 6f 6e 65 29 00                                   done).

0000055b <_ZZ21ensureFonaInitialisedbE3__c_8>:
     55b:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     56b:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     57b:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     58b:	75 65 20 6e 6f 77 29 00                             ue now).

00000593 <_ZZ21ensureFonaInitialisedbE3__c_7>:
     593:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     5a3:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     5b3:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

000005c2 <_ZZ21ensureFonaInitialisedbE3__c_6>:
     5c2:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     5d2:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

000005dd <_ZZ21ensureFonaInitialisedbE3__c_5>:
     5dd:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     5ed:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

000005fd <_ZZ21ensureFonaInitialisedbE3__c_4>:
     5fd:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     60d:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     61d:	65 64 00                                            ed.

00000620 <_ZZ21ensureFonaInitialisedbE3__c_3>:
     620:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     630:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     640:	6f 72 74 6c 79 00                                   ortly.

00000646 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     646:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     656:	6e 67 20 47 50 52 53 00                             ng GPRS.

0000065e <_ZZ21ensureFonaInitialisedbE3__c_1>:
     65e:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     66e:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

0000067b <_ZZ21ensureFonaInitialisedbE3__c_0>:
     67b:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     68b:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000696 <_ZZ21ensureFonaInitialisedbE3__c>:
     696:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     6a6:	61 2e 2e 2e 00                                      a....

000006ab <_ZZ5setupE3__c>:
     6ab:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000006b7 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     6b7:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     6c7:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     6d7:	73 73 69 6f 6e 3a 00                                ssion:.

000006de <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     6de:	2a 2a 2a 2a 00                                      ****.

000006e3 <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     6e3:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     6f3:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     703:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     713:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

0000071e <digital_pin_to_timer_PGM>:
     71e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     72e:	00 00 00 00                                         ....

00000732 <digital_pin_to_bit_mask_PGM>:
     732:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     742:	04 08 10 20                                         ... 

00000746 <digital_pin_to_port_PGM>:
     746:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     756:	03 03 03 03                                         ....

0000075a <port_to_input_PGM>:
     75a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000764 <port_to_output_PGM>:
     764:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000076e <port_to_mode_PGM>:
     76e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000778 <__ctors_start>:
     778:	8c 13       	cpse	r24, r28
     77a:	36 18       	sub	r3, r6
     77c:	26 1a       	sub	r2, r22

0000077e <__ctors_end>:
     77e:	a7 13       	cpse	r26, r23

00000780 <__dtors_end>:
     780:	11 24       	eor	r1, r1
     782:	1f be       	out	0x3f, r1	; 63
     784:	cf ef       	ldi	r28, 0xFF	; 255
     786:	d8 e0       	ldi	r29, 0x08	; 8
     788:	de bf       	out	0x3e, r29	; 62
     78a:	cd bf       	out	0x3d, r28	; 61

0000078c <__do_copy_data>:
     78c:	11 e0       	ldi	r17, 0x01	; 1
     78e:	a0 e0       	ldi	r26, 0x00	; 0
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	ee ec       	ldi	r30, 0xCE	; 206
     794:	f8 e4       	ldi	r31, 0x48	; 72
     796:	02 c0       	rjmp	.+4      	; 0x79c <__do_copy_data+0x10>
     798:	05 90       	lpm	r0, Z+
     79a:	0d 92       	st	X+, r0
     79c:	ac 39       	cpi	r26, 0x9C	; 156
     79e:	b1 07       	cpc	r27, r17
     7a0:	d9 f7       	brne	.-10     	; 0x798 <__do_copy_data+0xc>

000007a2 <__do_clear_bss>:
     7a2:	24 e0       	ldi	r18, 0x04	; 4
     7a4:	ac e9       	ldi	r26, 0x9C	; 156
     7a6:	b1 e0       	ldi	r27, 0x01	; 1
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <.do_clear_bss_start>

000007aa <.do_clear_bss_loop>:
     7aa:	1d 92       	st	X+, r1

000007ac <.do_clear_bss_start>:
     7ac:	ae 38       	cpi	r26, 0x8E	; 142
     7ae:	b2 07       	cpc	r27, r18
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <.do_clear_bss_loop>

000007b2 <__do_global_ctors>:
     7b2:	13 e0       	ldi	r17, 0x03	; 3
     7b4:	cf eb       	ldi	r28, 0xBF	; 191
     7b6:	d3 e0       	ldi	r29, 0x03	; 3
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <__do_global_ctors+0x10>
     7ba:	21 97       	sbiw	r28, 0x01	; 1
     7bc:	fe 01       	movw	r30, r28
     7be:	0e 94 94 21 	call	0x4328	; 0x4328 <__tablejump2__>
     7c2:	cc 3b       	cpi	r28, 0xBC	; 188
     7c4:	d1 07       	cpc	r29, r17
     7c6:	c9 f7       	brne	.-14     	; 0x7ba <__do_global_ctors+0x8>
     7c8:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <main>
     7cc:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__do_global_dtors>

000007d0 <__bad_interrupt>:
     7d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007d4 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     7d4:	83 5e       	subi	r24, 0xE3	; 227
     7d6:	9e 4f       	sbci	r25, 0xFE	; 254
     7d8:	dc 01       	movw	r26, r24
     7da:	8d 91       	ld	r24, X+
     7dc:	9c 91       	ld	r25, X
     7de:	dc 01       	movw	r26, r24
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	04 80       	ldd	r0, Z+4	; 0x04
     7e6:	f5 81       	ldd	r31, Z+5	; 0x05
     7e8:	e0 2d       	mov	r30, r0
     7ea:	09 94       	ijmp

000007ec <_ZN13Adafruit_FONA5writeEh>:
     7ec:	83 5e       	subi	r24, 0xE3	; 227
     7ee:	9e 4f       	sbci	r25, 0xFE	; 254
     7f0:	dc 01       	movw	r26, r24
     7f2:	8d 91       	ld	r24, X+
     7f4:	9c 91       	ld	r25, X
     7f6:	dc 01       	movw	r26, r24
     7f8:	ed 91       	ld	r30, X+
     7fa:	fc 91       	ld	r31, X
     7fc:	01 90       	ld	r0, Z+
     7fe:	f0 81       	ld	r31, Z
     800:	e0 2d       	mov	r30, r0
     802:	09 94       	ijmp

00000804 <_ZN13Adafruit_FONA4readEv>:
     804:	83 5e       	subi	r24, 0xE3	; 227
     806:	9e 4f       	sbci	r25, 0xFE	; 254
     808:	dc 01       	movw	r26, r24
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	dc 01       	movw	r26, r24
     810:	ed 91       	ld	r30, X+
     812:	fc 91       	ld	r31, X
     814:	06 80       	ldd	r0, Z+6	; 0x06
     816:	f7 81       	ldd	r31, Z+7	; 0x07
     818:	e0 2d       	mov	r30, r0
     81a:	09 94       	ijmp

0000081c <_ZN13Adafruit_FONA4peekEv>:
     81c:	83 5e       	subi	r24, 0xE3	; 227
     81e:	9e 4f       	sbci	r25, 0xFE	; 254
     820:	dc 01       	movw	r26, r24
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	dc 01       	movw	r26, r24
     828:	ed 91       	ld	r30, X+
     82a:	fc 91       	ld	r31, X
     82c:	00 84       	ldd	r0, Z+8	; 0x08
     82e:	f1 85       	ldd	r31, Z+9	; 0x09
     830:	e0 2d       	mov	r30, r0
     832:	09 94       	ijmp

00000834 <_ZN13Adafruit_FONA5flushEv>:
     834:	83 5e       	subi	r24, 0xE3	; 227
     836:	9e 4f       	sbci	r25, 0xFE	; 254
     838:	dc 01       	movw	r26, r24
     83a:	8d 91       	ld	r24, X+
     83c:	9c 91       	ld	r25, X
     83e:	dc 01       	movw	r26, r24
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	02 84       	ldd	r0, Z+10	; 0x0a
     846:	f3 85       	ldd	r31, Z+11	; 0x0b
     848:	e0 2d       	mov	r30, r0
     84a:	09 94       	ijmp

0000084c <_ZN13Adafruit_FONAC1Eab>:
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	06 2f       	mov	r16, r22
     858:	14 2f       	mov	r17, r20
     85a:	1b 82       	std	Y+3, r1	; 0x03
     85c:	1a 82       	std	Y+2, r1	; 0x02
     85e:	88 ee       	ldi	r24, 0xE8	; 232
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	a0 e0       	ldi	r26, 0x00	; 0
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	8c 83       	std	Y+4, r24	; 0x04
     868:	9d 83       	std	Y+5, r25	; 0x05
     86a:	ae 83       	std	Y+6, r26	; 0x06
     86c:	bf 83       	std	Y+7, r27	; 0x07
     86e:	8f e2       	ldi	r24, 0x2F	; 47
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	99 83       	std	Y+1, r25	; 0x01
     874:	88 83       	st	Y, r24
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	8e 87       	std	Y+14, r24	; 0x0e
     87a:	6e e7       	ldi	r22, 0x7E	; 126
     87c:	71 e0       	ldi	r23, 0x01	; 1
     87e:	ce 01       	movw	r24, r28
     880:	8b 5e       	subi	r24, 0xEB	; 235
     882:	9e 4f       	sbci	r25, 0xFE	; 254
     884:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN6StringC1EPKc>
     888:	0c 87       	std	Y+12, r16	; 0x0c
     88a:	1d 87       	std	Y+13, r17	; 0x0d
     88c:	fe 01       	movw	r30, r28
     88e:	e2 5f       	subi	r30, 0xF2	; 242
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	89 e8       	ldi	r24, 0x89	; 137
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	80 83       	st	Z, r24
     89a:	32 96       	adiw	r30, 0x02	; 2
     89c:	11 82       	std	Z+1, r1	; 0x01
     89e:	10 82       	st	Z, r1
     8a0:	32 96       	adiw	r30, 0x02	; 2
     8a2:	11 82       	std	Z+1, r1	; 0x01
     8a4:	10 82       	st	Z, r1
     8a6:	3b 96       	adiw	r30, 0x0b	; 11
     8a8:	11 82       	std	Z+1, r1	; 0x01
     8aa:	10 82       	st	Z, r1
     8ac:	39 97       	sbiw	r30, 0x09	; 9
     8ae:	10 82       	st	Z, r1
     8b0:	c5 5e       	subi	r28, 0xE5	; 229
     8b2:	de 4f       	sbci	r29, 0xFE	; 254
     8b4:	86 e8       	ldi	r24, 0x86	; 134
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	99 83       	std	Y+1, r25	; 0x01
     8ba:	88 83       	st	Y, r24
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     8c6:	8b 5e       	subi	r24, 0xEB	; 235
     8c8:	9e 4f       	sbci	r25, 0xFE	; 254
     8ca:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <_ZN6StringaSERKS_>

000008ce <_ZN13Adafruit_FONA10flushInputEv>:
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	8c 01       	movw	r16, r24
     8de:	0f 5f       	subi	r16, 0xFF	; 255
     8e0:	1f 4f       	sbci	r17, 0xFF	; 255
     8e2:	88 97       	sbiw	r24, 0x28	; 40
     8e4:	d8 f4       	brcc	.+54     	; 0x91c <__stack+0x1d>
     8e6:	e8 81       	ld	r30, Y
     8e8:	f9 81       	ldd	r31, Y+1	; 0x01
     8ea:	04 80       	ldd	r0, Z+4	; 0x04
     8ec:	f5 81       	ldd	r31, Z+5	; 0x05
     8ee:	e0 2d       	mov	r30, r0
     8f0:	ce 01       	movw	r24, r28
     8f2:	09 95       	icall
     8f4:	89 2b       	or	r24, r25
     8f6:	51 f0       	breq	.+20     	; 0x90c <__stack+0xd>
     8f8:	e8 81       	ld	r30, Y
     8fa:	f9 81       	ldd	r31, Y+1	; 0x01
     8fc:	06 80       	ldd	r0, Z+6	; 0x06
     8fe:	f7 81       	ldd	r31, Z+7	; 0x07
     900:	e0 2d       	mov	r30, r0
     902:	ce 01       	movw	r24, r28
     904:	09 95       	icall
     906:	00 e0       	ldi	r16, 0x00	; 0
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	ed cf       	rjmp	.-38     	; 0x8e6 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     918:	c8 01       	movw	r24, r16
     91a:	e0 cf       	rjmp	.-64     	; 0x8dc <_ZN13Adafruit_FONA10flushInputEv+0xe>
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	08 95       	ret

00000926 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24
     932:	8b 01       	movw	r16, r22
     934:	f4 2e       	mov	r15, r20
     936:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
     93a:	63 e4       	ldi	r22, 0x43	; 67
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	80 ea       	ldi	r24, 0xA0	; 160
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     946:	65 e3       	ldi	r22, 0x35	; 53
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	80 ea       	ldi	r24, 0xA0	; 160
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     952:	b8 01       	movw	r22, r16
     954:	80 ea       	ldi	r24, 0xA0	; 160
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     95c:	62 e2       	ldi	r22, 0x22	; 34
     95e:	80 ea       	ldi	r24, 0xA0	; 160
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 07 1b 	call	0x360e	; 0x360e <_ZN5Print7printlnEc>
     966:	c3 5e       	subi	r28, 0xE3	; 227
     968:	de 4f       	sbci	r29, 0xFE	; 254
     96a:	67 e2       	ldi	r22, 0x27	; 39
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	88 81       	ld	r24, Y
     970:	99 81       	ldd	r25, Y+1	; 0x01
     972:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     976:	b8 01       	movw	r22, r16
     978:	88 81       	ld	r24, Y
     97a:	99 81       	ldd	r25, Y+1	; 0x01
     97c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     980:	88 81       	ld	r24, Y
     982:	99 81       	ldd	r25, Y+1	; 0x01
     984:	ff 20       	and	r15, r15
     986:	19 f0       	breq	.+6      	; 0x98e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     988:	63 e2       	ldi	r22, 0x23	; 35
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	02 c0       	rjmp	.+4      	; 0x992 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     98e:	60 e2       	ldi	r22, 0x20	; 32
     990:	71 e0       	ldi	r23, 0x01	; 1
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>

000009a0 <_ZN13Adafruit_FONA8readlineEjb>:
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	7c 01       	movw	r14, r24
     9b4:	b4 2e       	mov	r11, r20
     9b6:	8b 01       	movw	r16, r22
     9b8:	00 0f       	add	r16, r16
     9ba:	11 1f       	adc	r17, r17
     9bc:	00 0f       	add	r16, r16
     9be:	11 1f       	adc	r17, r17
     9c0:	c0 e0       	ldi	r28, 0x00	; 0
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
     9c4:	67 01       	movw	r12, r14
     9c6:	83 ee       	ldi	r24, 0xE3	; 227
     9c8:	c8 1a       	sub	r12, r24
     9ca:	8e ef       	ldi	r24, 0xFE	; 254
     9cc:	d8 0a       	sbc	r13, r24
     9ce:	01 15       	cp	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	c9 f1       	breq	.+114    	; 0xa46 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9d4:	ce 3f       	cpi	r28, 0xFE	; 254
     9d6:	d1 05       	cpc	r29, r1
     9d8:	98 f0       	brcs	.+38     	; 0xa00 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9da:	62 e9       	ldi	r22, 0x92	; 146
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     9e6:	2f c0       	rjmp	.+94     	; 0xa46 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9e8:	f6 01       	movw	r30, r12
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	dc 01       	movw	r26, r24
     9f0:	ed 91       	ld	r30, X+
     9f2:	fc 91       	ld	r31, X
     9f4:	06 80       	ldd	r0, Z+6	; 0x06
     9f6:	f7 81       	ldd	r31, Z+7	; 0x07
     9f8:	e0 2d       	mov	r30, r0
     9fa:	09 95       	icall
     9fc:	8d 30       	cpi	r24, 0x0D	; 13
     9fe:	69 f4       	brne	.+26     	; 0xa1a <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     a00:	d6 01       	movw	r26, r12
     a02:	8d 91       	ld	r24, X+
     a04:	9c 91       	ld	r25, X
     a06:	dc 01       	movw	r26, r24
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	04 80       	ldd	r0, Z+4	; 0x04
     a0e:	f5 81       	ldd	r31, Z+5	; 0x05
     a10:	e0 2d       	mov	r30, r0
     a12:	09 95       	icall
     a14:	89 2b       	or	r24, r25
     a16:	41 f7       	brne	.-48     	; 0x9e8 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     a18:	0c c0       	rjmp	.+24     	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     a1a:	8a 30       	cpi	r24, 0x0A	; 10
     a1c:	21 f4       	brne	.+8      	; 0xa26 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     a1e:	20 97       	sbiw	r28, 0x00	; 0
     a20:	79 f3       	breq	.-34     	; 0xa00 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a22:	bb 20       	and	r11, r11
     a24:	81 f0       	breq	.+32     	; 0xa46 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a26:	f7 01       	movw	r30, r14
     a28:	ec 0f       	add	r30, r28
     a2a:	fd 1f       	adc	r31, r29
     a2c:	87 87       	std	Z+15, r24	; 0x0f
     a2e:	21 96       	adiw	r28, 0x01	; 1
     a30:	e7 cf       	rjmp	.-50     	; 0xa00 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a32:	01 50       	subi	r16, 0x01	; 1
     a34:	11 09       	sbc	r17, r1
     a36:	39 f0       	breq	.+14     	; 0xa46 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     a44:	c4 cf       	rjmp	.-120    	; 0x9ce <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     a46:	f7 01       	movw	r30, r14
     a48:	ec 0f       	add	r30, r28
     a4a:	fd 1f       	adc	r31, r29
     a4c:	17 86       	std	Z+15, r1	; 0x0f
     a4e:	8c 2f       	mov	r24, r28
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	08 95       	ret

00000a64 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	ec 01       	movw	r28, r24
     a6e:	8b 01       	movw	r16, r22
     a70:	ba 01       	movw	r22, r20
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
     a78:	68 e9       	ldi	r22, 0x98	; 152
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	80 ea       	ldi	r24, 0xA0	; 160
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     a84:	2f 96       	adiw	r28, 0x0f	; 15
     a86:	be 01       	movw	r22, r28
     a88:	80 ea       	ldi	r24, 0xA0	; 160
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
     a90:	b8 01       	movw	r22, r16
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 9f 23 	call	0x473e	; 0x473e <strcmp_P>
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	89 2b       	or	r24, r25
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	82 2f       	mov	r24, r18
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	ec 01       	movw	r28, r24
     ab2:	fc 01       	movw	r30, r24
     ab4:	e3 5e       	subi	r30, 0xE3	; 227
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	66 23       	and	r22, r22
     aba:	31 f0       	breq	.+12     	; 0xac8 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     abc:	62 e2       	ldi	r22, 0x22	; 34
     abe:	80 81       	ld	r24, Z
     ac0:	91 81       	ldd	r25, Z+1	; 0x01
     ac2:	0e 94 07 1b 	call	0x360e	; 0x360e <_ZN5Print7printlnEc>
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
     ad0:	fe 01       	movw	r30, r28
     ad2:	e5 5e       	subi	r30, 0xE5	; 229
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	60 81       	ld	r22, Z
     ad8:	71 81       	ldd	r23, Z+1	; 0x01
     ada:	40 e1       	ldi	r20, 0x10	; 16
     adc:	57 e2       	ldi	r21, 0x27	; 39
     ade:	ce 01       	movw	r24, r28
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000ae8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	ec 01       	movw	r28, r24
     af2:	8a 01       	movw	r16, r20
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	0e 94 93 04 	call	0x926	; 0x926 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     afa:	fe 01       	movw	r30, r28
     afc:	e3 5e       	subi	r30, 0xE3	; 227
     afe:	fe 4f       	sbci	r31, 0xFE	; 254
     b00:	b8 01       	movw	r22, r16
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print5printERK6String>
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	ce 01       	movw	r24, r28
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	0c 94 56 05 	jmp	0xaac	; 0xaac <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b1a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
     b24:	8a 01       	movw	r16, r20
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	0e 94 93 04 	call	0x926	; 0x926 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b2c:	fe 01       	movw	r30, r28
     b2e:	e3 5e       	subi	r30, 0xE3	; 227
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	b8 01       	movw	r22, r16
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	ce 01       	movw	r24, r28
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	0c 94 56 05 	jmp	0xaac	; 0xaac <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b4c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
     b5a:	69 01       	movw	r12, r18
     b5c:	7a 01       	movw	r14, r20
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 93 04 	call	0x926	; 0x926 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b64:	fe 01       	movw	r30, r28
     b66:	e3 5e       	subi	r30, 0xE3	; 227
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	2a e0       	ldi	r18, 0x0A	; 10
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	b7 01       	movw	r22, r14
     b70:	a6 01       	movw	r20, r12
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN5Print5printEli>
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	ce 01       	movw	r24, r28
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	0c 94 56 05 	jmp	0xaac	; 0xaac <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b8e <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	7c 01       	movw	r14, r24
     bac:	2a 01       	movw	r4, r20
     bae:	3b 01       	movw	r6, r22
     bb0:	48 01       	movw	r8, r16
     bb2:	59 01       	movw	r10, r18
     bb4:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
     bb8:	69 e1       	ldi	r22, 0x19	; 25
     bba:	71 e0       	ldi	r23, 0x01	; 1
     bbc:	80 ea       	ldi	r24, 0xA0	; 160
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     bc4:	6c e0       	ldi	r22, 0x0C	; 12
     bc6:	71 e0       	ldi	r23, 0x01	; 1
     bc8:	80 ea       	ldi	r24, 0xA0	; 160
     bca:	93 e0       	ldi	r25, 0x03	; 3
     bcc:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     bd0:	2a e0       	ldi	r18, 0x0A	; 10
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	b3 01       	movw	r22, r6
     bd6:	a2 01       	movw	r20, r4
     bd8:	80 ea       	ldi	r24, 0xA0	; 160
     bda:	93 e0       	ldi	r25, 0x03	; 3
     bdc:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN5Print5printEmi>
     be0:	6c e2       	ldi	r22, 0x2C	; 44
     be2:	80 ea       	ldi	r24, 0xA0	; 160
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN5Print5printEc>
     bea:	2a e0       	ldi	r18, 0x0A	; 10
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	b5 01       	movw	r22, r10
     bf0:	a4 01       	movw	r20, r8
     bf2:	80 ea       	ldi	r24, 0xA0	; 160
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN5Print7printlnEmi>
     bfa:	e7 01       	movw	r28, r14
     bfc:	c3 5e       	subi	r28, 0xE3	; 227
     bfe:	de 4f       	sbci	r29, 0xFE	; 254
     c00:	6f ef       	ldi	r22, 0xFF	; 255
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	88 81       	ld	r24, Y
     c06:	99 81       	ldd	r25, Y+1	; 0x01
     c08:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     c0c:	2a e0       	ldi	r18, 0x0A	; 10
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	b3 01       	movw	r22, r6
     c12:	a2 01       	movw	r20, r4
     c14:	88 81       	ld	r24, Y
     c16:	99 81       	ldd	r25, Y+1	; 0x01
     c18:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN5Print5printEmi>
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	88 81       	ld	r24, Y
     c22:	99 81       	ldd	r25, Y+1	; 0x01
     c24:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b5 01       	movw	r22, r10
     c2e:	a4 01       	movw	r20, r8
     c30:	88 81       	ld	r24, Y
     c32:	99 81       	ldd	r25, Y+1	; 0x01
     c34:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN5Print7printlnEmi>
     c38:	40 e1       	ldi	r20, 0x10	; 16
     c3a:	57 e2       	ldi	r21, 0x27	; 39
     c3c:	66 ef       	ldi	r22, 0xF6	; 246
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	c7 01       	movw	r24, r14
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000c62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	ec 01       	movw	r28, r24
     c70:	8b 01       	movw	r16, r22
     c72:	7a 01       	movw	r14, r20
     c74:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
     c78:	6b e8       	ldi	r22, 0x8B	; 139
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 ea       	ldi	r24, 0xA0	; 160
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     c84:	b8 01       	movw	r22, r16
     c86:	80 ea       	ldi	r24, 0xA0	; 160
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c8e:	fe 01       	movw	r30, r28
     c90:	e3 5e       	subi	r30, 0xE3	; 227
     c92:	fe 4f       	sbci	r31, 0xFE	; 254
     c94:	b8 01       	movw	r22, r16
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	b7 01       	movw	r22, r14
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
     ca8:	18 2f       	mov	r17, r24
     caa:	64 e8       	ldi	r22, 0x84	; 132
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 ea       	ldi	r24, 0xA0	; 160
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     cb6:	be 01       	movw	r22, r28
     cb8:	61 5f       	subi	r22, 0xF1	; 241
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	80 ea       	ldi	r24, 0xA0	; 160
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
     cc4:	81 2f       	mov	r24, r17
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	08 95       	ret

00000cd4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	6b 01       	movw	r12, r22
     cf0:	49 01       	movw	r8, r18
     cf2:	5a 01       	movw	r10, r20
     cf4:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
     cf8:	6d e7       	ldi	r22, 0x7D	; 125
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	80 ea       	ldi	r24, 0xA0	; 160
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     d04:	b6 01       	movw	r22, r12
     d06:	80 ea       	ldi	r24, 0xA0	; 160
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     d0e:	2a e0       	ldi	r18, 0x0A	; 10
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	b5 01       	movw	r22, r10
     d14:	a4 01       	movw	r20, r8
     d16:	80 ea       	ldi	r24, 0xA0	; 160
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN5Print7printlnEli>
     d1e:	7e 01       	movw	r14, r28
     d20:	83 ee       	ldi	r24, 0xE3	; 227
     d22:	e8 1a       	sub	r14, r24
     d24:	8e ef       	ldi	r24, 0xFE	; 254
     d26:	f8 0a       	sbc	r15, r24
     d28:	b6 01       	movw	r22, r12
     d2a:	f7 01       	movw	r30, r14
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     d34:	2a e0       	ldi	r18, 0x0A	; 10
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	b5 01       	movw	r22, r10
     d3a:	a4 01       	movw	r20, r8
     d3c:	f7 01       	movw	r30, r14
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN5Print7printlnEli>
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	b8 01       	movw	r22, r16
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
     d50:	18 2f       	mov	r17, r24
     d52:	66 e7       	ldi	r22, 0x76	; 118
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 ea       	ldi	r24, 0xA0	; 160
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     d5e:	be 01       	movw	r22, r28
     d60:	61 5f       	subi	r22, 0xF1	; 241
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	80 ea       	ldi	r24, 0xA0	; 160
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
     d6c:	81 2f       	mov	r24, r17
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	bf 90       	pop	r11
     d80:	af 90       	pop	r10
     d82:	9f 90       	pop	r9
     d84:	8f 90       	pop	r8
     d86:	08 95       	ret

00000d88 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
     d9e:	6b 01       	movw	r12, r22
     da0:	7a 01       	movw	r14, r20
     da2:	59 01       	movw	r10, r18
     da4:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
     da8:	6f e6       	ldi	r22, 0x6F	; 111
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 ea       	ldi	r24, 0xA0	; 160
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     db4:	b6 01       	movw	r22, r12
     db6:	80 ea       	ldi	r24, 0xA0	; 160
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     dbe:	62 e2       	ldi	r22, 0x22	; 34
     dc0:	80 ea       	ldi	r24, 0xA0	; 160
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN5Print5printEc>
     dc8:	b7 01       	movw	r22, r14
     dca:	80 ea       	ldi	r24, 0xA0	; 160
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     dd2:	62 e2       	ldi	r22, 0x22	; 34
     dd4:	80 ea       	ldi	r24, 0xA0	; 160
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 07 1b 	call	0x360e	; 0x360e <_ZN5Print7printlnEc>
     ddc:	8e 01       	movw	r16, r28
     dde:	03 5e       	subi	r16, 0xE3	; 227
     de0:	1e 4f       	sbci	r17, 0xFE	; 254
     de2:	b6 01       	movw	r22, r12
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     dee:	62 e2       	ldi	r22, 0x22	; 34
     df0:	f8 01       	movw	r30, r16
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN5Print5printEc>
     dfa:	b7 01       	movw	r22, r14
     dfc:	f8 01       	movw	r30, r16
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     e06:	62 e2       	ldi	r22, 0x22	; 34
     e08:	f8 01       	movw	r30, r16
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	0e 94 07 1b 	call	0x360e	; 0x360e <_ZN5Print7printlnEc>
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	b5 01       	movw	r22, r10
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
     e1c:	18 2f       	mov	r17, r24
     e1e:	68 e6       	ldi	r22, 0x68	; 104
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 ea       	ldi	r24, 0xA0	; 160
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
     e2a:	be 01       	movw	r22, r28
     e2c:	61 5f       	subi	r22, 0xF1	; 241
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	80 ea       	ldi	r24, 0xA0	; 160
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
     e38:	81 2f       	mov	r24, r17
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	08 95       	ret

00000e50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
     e5a:	8a 01       	movw	r16, r20
     e5c:	a9 01       	movw	r20, r18
     e5e:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e62:	88 23       	and	r24, r24
     e64:	41 f0       	breq	.+16     	; 0xe76 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     e66:	b8 01       	movw	r22, r16
     e68:	ce 01       	movw	r24, r28
     e6a:	0f 96       	adiw	r24, 0x0f	; 15
     e6c:	0e 94 9f 23 	call	0x473e	; 0x473e <strcmp_P>
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	82 2f       	mov	r24, r18
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <_ZN13Adafruit_FONA5beginEhh>:
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
     e96:	f6 2e       	mov	r15, r22
     e98:	e4 2e       	mov	r14, r20
     e9a:	8f e1       	ldi	r24, 0x1F	; 31
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_Znwj>
     ea2:	8c 01       	movw	r16, r24
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	4e 2d       	mov	r20, r14
     ea8:	6f 2d       	mov	r22, r15
     eaa:	0e 94 65 20 	call	0x40ca	; 0x40ca <_ZN14SoftwareSerialC1Ehhb>
     eae:	7e 01       	movw	r14, r28
     eb0:	83 ee       	ldi	r24, 0xE3	; 227
     eb2:	e8 1a       	sub	r14, r24
     eb4:	8e ef       	ldi	r24, 0xFE	; 254
     eb6:	f8 0a       	sbc	r15, r24
     eb8:	d7 01       	movw	r26, r14
     eba:	0d 93       	st	X+, r16
     ebc:	1c 93       	st	X, r17
     ebe:	40 ec       	ldi	r20, 0xC0	; 192
     ec0:	52 e1       	ldi	r21, 0x12	; 18
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	c8 01       	movw	r24, r16
     ec8:	0e 94 90 20 	call	0x4120	; 0x4120 <_ZN14SoftwareSerial5beginEl>
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed0:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <pinMode>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed8:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
     edc:	6a e0       	ldi	r22, 0x0A	; 10
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	8c 85       	ldd	r24, Y+12	; 0x0c
     eec:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
     ef0:	64 e6       	ldi	r22, 0x64	; 100
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	8c 85       	ldd	r24, Y+12	; 0x0c
     f00:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
     f04:	65 e6       	ldi	r22, 0x65	; 101
     f06:	73 e0       	ldi	r23, 0x03	; 3
     f08:	80 ea       	ldi	r24, 0xA0	; 160
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     f10:	8e e0       	ldi	r24, 0x0E	; 14
     f12:	c8 2e       	mov	r12, r24
     f14:	d1 2c       	mov	r13, r1
     f16:	8e 01       	movw	r16, r28
     f18:	05 5e       	subi	r16, 0xE5	; 229
     f1a:	1e 4f       	sbci	r17, 0xFE	; 254
     f1c:	f7 01       	movw	r30, r14
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	dc 01       	movw	r26, r24
     f24:	ed 91       	ld	r30, X+
     f26:	fc 91       	ld	r31, X
     f28:	04 80       	ldd	r0, Z+4	; 0x04
     f2a:	f5 81       	ldd	r31, Z+5	; 0x05
     f2c:	e0 2d       	mov	r30, r0
     f2e:	09 95       	icall
     f30:	89 2b       	or	r24, r25
     f32:	59 f0       	breq	.+22     	; 0xf4a <_ZN13Adafruit_FONA5beginEhh+0xc6>
     f34:	f7 01       	movw	r30, r14
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	dc 01       	movw	r26, r24
     f3c:	ed 91       	ld	r30, X+
     f3e:	fc 91       	ld	r31, X
     f40:	06 80       	ldd	r0, Z+6	; 0x06
     f42:	f7 81       	ldd	r31, Z+7	; 0x07
     f44:	e0 2d       	mov	r30, r0
     f46:	09 95       	icall
     f48:	e9 cf       	rjmp	.-46     	; 0xf1c <_ZN13Adafruit_FONA5beginEhh+0x98>
     f4a:	f8 01       	movw	r30, r16
     f4c:	40 81       	ld	r20, Z
     f4e:	51 81       	ldd	r21, Z+1	; 0x01
     f50:	24 ef       	ldi	r18, 0xF4	; 244
     f52:	31 e0       	ldi	r19, 0x01	; 1
     f54:	62 e6       	ldi	r22, 0x62	; 98
     f56:	73 e0       	ldi	r23, 0x03	; 3
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f5e:	81 11       	cpse	r24, r1
     f60:	34 c0       	rjmp	.+104    	; 0xfca <_ZN13Adafruit_FONA5beginEhh+0x146>
     f62:	d7 01       	movw	r26, r14
     f64:	8d 91       	ld	r24, X+
     f66:	9c 91       	ld	r25, X
     f68:	dc 01       	movw	r26, r24
     f6a:	ed 91       	ld	r30, X+
     f6c:	fc 91       	ld	r31, X
     f6e:	04 80       	ldd	r0, Z+4	; 0x04
     f70:	f5 81       	ldd	r31, Z+5	; 0x05
     f72:	e0 2d       	mov	r30, r0
     f74:	09 95       	icall
     f76:	89 2b       	or	r24, r25
     f78:	59 f0       	breq	.+22     	; 0xf90 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     f7a:	f7 01       	movw	r30, r14
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	dc 01       	movw	r26, r24
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	06 80       	ldd	r0, Z+6	; 0x06
     f88:	f7 81       	ldd	r31, Z+7	; 0x07
     f8a:	e0 2d       	mov	r30, r0
     f8c:	09 95       	icall
     f8e:	e9 cf       	rjmp	.-46     	; 0xf62 <_ZN13Adafruit_FONA5beginEhh+0xde>
     f90:	24 ef       	ldi	r18, 0xF4	; 244
     f92:	31 e0       	ldi	r19, 0x01	; 1
     f94:	4f e5       	ldi	r20, 0x5F	; 95
     f96:	53 e0       	ldi	r21, 0x03	; 3
     f98:	6c e5       	ldi	r22, 0x5C	; 92
     f9a:	73 e0       	ldi	r23, 0x03	; 3
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fa2:	81 11       	cpse	r24, r1
     fa4:	12 c0       	rjmp	.+36     	; 0xfca <_ZN13Adafruit_FONA5beginEhh+0x146>
     fa6:	64 ef       	ldi	r22, 0xF4	; 244
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     fb2:	b1 e0       	ldi	r27, 0x01	; 1
     fb4:	cb 1a       	sub	r12, r27
     fb6:	d1 08       	sbc	r13, r1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <_ZN13Adafruit_FONA5beginEhh+0x138>
     fba:	b0 cf       	rjmp	.-160    	; 0xf1c <_ZN13Adafruit_FONA5beginEhh+0x98>
     fbc:	5e c0       	rjmp	.+188    	; 0x107a <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     fbe:	64 e6       	ldi	r22, 0x64	; 100
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     fca:	f8 01       	movw	r30, r16
     fcc:	40 81       	ld	r20, Z
     fce:	51 81       	ldd	r21, Z+1	; 0x01
     fd0:	24 ef       	ldi	r18, 0xF4	; 244
     fd2:	31 e0       	ldi	r19, 0x01	; 1
     fd4:	6f e2       	ldi	r22, 0x2F	; 47
     fd6:	73 e0       	ldi	r23, 0x03	; 3
     fd8:	ce 01       	movw	r24, r28
     fda:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fde:	64 e6       	ldi	r22, 0x64	; 100
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
     fea:	d8 01       	movw	r26, r16
     fec:	4d 91       	ld	r20, X+
     fee:	5c 91       	ld	r21, X
     ff0:	24 ef       	ldi	r18, 0xF4	; 244
     ff2:	31 e0       	ldi	r19, 0x01	; 1
     ff4:	6a e2       	ldi	r22, 0x2A	; 42
     ff6:	73 e0       	ldi	r23, 0x03	; 3
     ff8:	ce 01       	movw	r24, r28
     ffa:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ffe:	81 11       	cpse	r24, r1
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <_ZN13Adafruit_FONA5beginEhh+0x182>
    1002:	12 e0       	ldi	r17, 0x02	; 2
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <_ZN13Adafruit_FONA5beginEhh+0x184>
    1006:	11 e0       	ldi	r17, 0x01	; 1
    1008:	64 e6       	ldi	r22, 0x64	; 100
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
    1014:	ce 01       	movw	r24, r28
    1016:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
    101a:	63 e2       	ldi	r22, 0x23	; 35
    101c:	73 e0       	ldi	r23, 0x03	; 3
    101e:	80 ea       	ldi	r24, 0xA0	; 160
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1026:	69 e0       	ldi	r22, 0x09	; 9
    1028:	71 e0       	ldi	r23, 0x01	; 1
    102a:	80 ea       	ldi	r24, 0xA0	; 160
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
    1032:	69 e0       	ldi	r22, 0x09	; 9
    1034:	71 e0       	ldi	r23, 0x01	; 1
    1036:	f7 01       	movw	r30, r14
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
    1040:	41 e0       	ldi	r20, 0x01	; 1
    1042:	64 ef       	ldi	r22, 0xF4	; 244
    1044:	71 e0       	ldi	r23, 0x01	; 1
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
    104c:	6c e1       	ldi	r22, 0x1C	; 28
    104e:	73 e0       	ldi	r23, 0x03	; 3
    1050:	80 ea       	ldi	r24, 0xA0	; 160
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1058:	2f 96       	adiw	r28, 0x0f	; 15
    105a:	be 01       	movw	r22, r28
    105c:	80 ea       	ldi	r24, 0xA0	; 160
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
    1064:	61 e1       	ldi	r22, 0x11	; 17
    1066:	73 e0       	ldi	r23, 0x03	; 3
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 b1 23 	call	0x4762	; 0x4762 <strstr_P>
    106e:	89 2b       	or	r24, r25
    1070:	11 f4       	brne	.+4      	; 0x1076 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	35 c0       	rjmp	.+106    	; 0x10e0 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1076:	81 2f       	mov	r24, r17
    1078:	33 c0       	rjmp	.+102    	; 0x10e0 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    107a:	d8 01       	movw	r26, r16
    107c:	4d 91       	ld	r20, X+
    107e:	5c 91       	ld	r21, X
    1080:	24 ef       	ldi	r18, 0xF4	; 244
    1082:	31 e0       	ldi	r19, 0x01	; 1
    1084:	69 e5       	ldi	r22, 0x59	; 89
    1086:	73 e0       	ldi	r23, 0x03	; 3
    1088:	ce 01       	movw	r24, r28
    108a:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    108e:	64 e6       	ldi	r22, 0x64	; 100
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
    109a:	f8 01       	movw	r30, r16
    109c:	40 81       	ld	r20, Z
    109e:	51 81       	ldd	r21, Z+1	; 0x01
    10a0:	24 ef       	ldi	r18, 0xF4	; 244
    10a2:	31 e0       	ldi	r19, 0x01	; 1
    10a4:	66 e5       	ldi	r22, 0x56	; 86
    10a6:	73 e0       	ldi	r23, 0x03	; 3
    10a8:	ce 01       	movw	r24, r28
    10aa:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10ae:	64 e6       	ldi	r22, 0x64	; 100
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
    10ba:	d8 01       	movw	r26, r16
    10bc:	4d 91       	ld	r20, X+
    10be:	5c 91       	ld	r21, X
    10c0:	24 ef       	ldi	r18, 0xF4	; 244
    10c2:	31 e0       	ldi	r19, 0x01	; 1
    10c4:	63 e5       	ldi	r22, 0x53	; 83
    10c6:	73 e0       	ldi	r23, 0x03	; 3
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10ce:	81 11       	cpse	r24, r1
    10d0:	76 cf       	rjmp	.-276    	; 0xfbe <_ZN13Adafruit_FONA5beginEhh+0x13a>
    10d2:	64 e3       	ldi	r22, 0x34	; 52
    10d4:	73 e0       	ldi	r23, 0x03	; 3
    10d6:	80 ea       	ldi	r24, 0xA0	; 160
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret

000010f2 <_ZN13Adafruit_FONA9HTTP_initEv>:
    10f2:	fc 01       	movw	r30, r24
    10f4:	e5 5e       	subi	r30, 0xE5	; 229
    10f6:	fe 4f       	sbci	r31, 0xFE	; 254
    10f8:	40 81       	ld	r20, Z
    10fa:	51 81       	ldd	r21, Z+1	; 0x01
    10fc:	24 ef       	ldi	r18, 0xF4	; 244
    10fe:	31 e0       	ldi	r19, 0x01	; 1
    1100:	66 e5       	ldi	r22, 0x56	; 86
    1102:	71 e0       	ldi	r23, 0x01	; 1
    1104:	0c 94 28 07 	jmp	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001108 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1108:	fc 01       	movw	r30, r24
    110a:	e5 5e       	subi	r30, 0xE5	; 229
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	40 81       	ld	r20, Z
    1110:	51 81       	ldd	r21, Z+1	; 0x01
    1112:	24 ef       	ldi	r18, 0xF4	; 244
    1114:	31 e0       	ldi	r19, 0x01	; 1
    1116:	6a e4       	ldi	r22, 0x4A	; 74
    1118:	71 e0       	ldi	r23, 0x01	; 1
    111a:	0c 94 28 07 	jmp	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000111e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>:
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0xe>
    112c:	00 d0       	rcall	.+0      	; 0x112e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x10>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x12>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8c 01       	movw	r16, r24
    1136:	7b 01       	movw	r14, r22
    1138:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN13Adafruit_FONA9HTTP_termEv>
    113c:	c8 01       	movw	r24, r16
    113e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN13Adafruit_FONA9HTTP_initEv>
    1142:	88 23       	and	r24, r24
    1144:	59 f1       	breq	.+86     	; 0x119c <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x7e>
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	66 ea       	ldi	r22, 0xA6	; 166
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	c8 01       	movw	r24, r16
    1154:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1158:	88 23       	and	r24, r24
    115a:	11 f1       	breq	.+68     	; 0x11a0 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x82>
    115c:	a7 01       	movw	r20, r14
    115e:	62 ea       	ldi	r22, 0xA2	; 162
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	c8 01       	movw	r24, r16
    1164:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1168:	88 23       	and	r24, r24
    116a:	e1 f0       	breq	.+56     	; 0x11a4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x86>
    116c:	b8 01       	movw	r22, r16
    116e:	6b 5e       	subi	r22, 0xEB	; 235
    1170:	7e 4f       	sbci	r23, 0xFE	; 254
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	0e 94 56 1e 	call	0x3cac	; 0x3cac <_ZN6StringC1ERKS_>
    117a:	ae 01       	movw	r20, r28
    117c:	4f 5f       	subi	r20, 0xFF	; 255
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	6f e9       	ldi	r22, 0x9F	; 159
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	c8 01       	movw	r24, r16
    1186:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    118a:	18 2f       	mov	r17, r24
    118c:	ce 01       	movw	r24, r28
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <_ZN6StringD1Ev>
    1194:	11 23       	and	r17, r17
    1196:	41 f0       	breq	.+16     	; 0x11a8 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8a>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11a8:	80 e4       	ldi	r24, 0x40	; 64
    11aa:	26 96       	adiw	r28, 0x06	; 6
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	08 95       	ret

000011c4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ec 01       	movw	r28, r24
    11d6:	68 01       	movw	r12, r16
    11d8:	87 01       	movw	r16, r14
    11da:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    11de:	b6 01       	movw	r22, r12
    11e0:	ce 01       	movw	r24, r28
    11e2:	0f 96       	adiw	r24, 0x0f	; 15
    11e4:	0e 94 9f 23 	call	0x473e	; 0x473e <strcmp_P>
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	89 2b       	or	r24, r25
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	82 2f       	mov	r24, r18
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	08 95       	ret

00001204 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
    1212:	79 01       	movw	r14, r18
    1214:	98 01       	movw	r18, r16
    1216:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    121a:	b7 01       	movw	r22, r14
    121c:	ce 01       	movw	r24, r28
    121e:	0f 96       	adiw	r24, 0x0f	; 15
    1220:	0e 94 9f 23 	call	0x473e	; 0x473e <strcmp_P>
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	89 2b       	or	r24, r25
    1228:	09 f0       	breq	.+2      	; 0x122c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	82 2f       	mov	r24, r18
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	08 95       	ret

0000123c <_ZN13Adafruit_FONA10enableGPRSEb>:
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
    1258:	28 ee       	ldi	r18, 0xE8	; 232
    125a:	3d ef       	ldi	r19, 0xFD	; 253
    125c:	66 23       	and	r22, r22
    125e:	09 f4       	brne	.+2      	; 0x1262 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    1260:	1f c1       	rjmp	.+574    	; 0x14a0 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    1262:	4d eb       	ldi	r20, 0xBD	; 189
    1264:	52 e0       	ldi	r21, 0x02	; 2
    1266:	62 eb       	ldi	r22, 0xB2	; 178
    1268:	72 e0       	ldi	r23, 0x02	; 2
    126a:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    126e:	81 11       	cpse	r24, r1
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	78 2e       	mov	r7, r24
    1276:	02 c0       	rjmp	.+4      	; 0x127c <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1278:	77 24       	eor	r7, r7
    127a:	73 94       	inc	r7
    127c:	7e 01       	movw	r14, r28
    127e:	85 ee       	ldi	r24, 0xE5	; 229
    1280:	e8 1a       	sub	r14, r24
    1282:	8e ef       	ldi	r24, 0xFE	; 254
    1284:	f8 0a       	sbc	r15, r24
    1286:	f7 01       	movw	r30, r14
    1288:	40 81       	ld	r20, Z
    128a:	51 81       	ldd	r21, Z+1	; 0x01
    128c:	20 e1       	ldi	r18, 0x10	; 16
    128e:	37 e2       	ldi	r19, 0x27	; 39
    1290:	67 ea       	ldi	r22, 0xA7	; 167
    1292:	72 e0       	ldi	r23, 0x02	; 2
    1294:	ce 01       	movw	r24, r28
    1296:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    129a:	88 23       	and	r24, r24
    129c:	09 f4       	brne	.+2      	; 0x12a0 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    129e:	25 c1       	rjmp	.+586    	; 0x14ea <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    12a0:	f7 01       	movw	r30, r14
    12a2:	40 81       	ld	r20, Z
    12a4:	51 81       	ldd	r21, Z+1	; 0x01
    12a6:	20 e1       	ldi	r18, 0x10	; 16
    12a8:	37 e2       	ldi	r19, 0x27	; 39
    12aa:	69 e8       	ldi	r22, 0x89	; 137
    12ac:	72 e0       	ldi	r23, 0x02	; 2
    12ae:	ce 01       	movw	r24, r28
    12b0:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12b4:	88 23       	and	r24, r24
    12b6:	09 f4       	brne	.+2      	; 0x12ba <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    12b8:	1a c1       	rjmp	.+564    	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    12ba:	4e 01       	movw	r8, r28
    12bc:	f2 ef       	ldi	r31, 0xF2	; 242
    12be:	8f 1a       	sub	r8, r31
    12c0:	fe ef       	ldi	r31, 0xFE	; 254
    12c2:	9f 0a       	sbc	r9, r31
    12c4:	f4 01       	movw	r30, r8
    12c6:	40 81       	ld	r20, Z
    12c8:	51 81       	ldd	r21, Z+1	; 0x01
    12ca:	41 15       	cp	r20, r1
    12cc:	51 05       	cpc	r21, r1
    12ce:	71 f4       	brne	.+28     	; 0x12ec <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    12d0:	f7 01       	movw	r30, r14
    12d2:	40 81       	ld	r20, Z
    12d4:	51 81       	ldd	r21, Z+1	; 0x01
    12d6:	2f ef       	ldi	r18, 0xFF	; 255
    12d8:	3f ef       	ldi	r19, 0xFF	; 255
    12da:	64 e2       	ldi	r22, 0x24	; 36
    12dc:	72 e0       	ldi	r23, 0x02	; 2
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12e4:	81 11       	cpse	r24, r1
    12e6:	ce c0       	rjmp	.+412    	; 0x1484 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    12e8:	89 e0       	ldi	r24, 0x09	; 9
    12ea:	0e c1       	rjmp	.+540    	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    12ec:	f7 01       	movw	r30, r14
    12ee:	20 81       	ld	r18, Z
    12f0:	31 81       	ldd	r19, Z+1	; 0x01
    12f2:	00 e1       	ldi	r16, 0x10	; 16
    12f4:	17 e2       	ldi	r17, 0x27	; 39
    12f6:	65 e7       	ldi	r22, 0x75	; 117
    12f8:	72 e0       	ldi	r23, 0x02	; 2
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    1304:	f6 c0       	rjmp	.+492    	; 0x14f2 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    1306:	ce 01       	movw	r24, r28
    1308:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN13Adafruit_FONA10flushInputEv>
    130c:	8e 01       	movw	r16, r28
    130e:	03 5e       	subi	r16, 0xE3	; 227
    1310:	1e 4f       	sbci	r17, 0xFE	; 254
    1312:	6b e6       	ldi	r22, 0x6B	; 107
    1314:	72 e0       	ldi	r23, 0x02	; 2
    1316:	f8 01       	movw	r30, r16
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1320:	f4 01       	movw	r30, r8
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	f8 01       	movw	r30, r16
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1330:	5e 01       	movw	r10, r28
    1332:	f0 ef       	ldi	r31, 0xF0	; 240
    1334:	af 1a       	sub	r10, r31
    1336:	fe ef       	ldi	r31, 0xFE	; 254
    1338:	bf 0a       	sbc	r11, r31
    133a:	f5 01       	movw	r30, r10
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	89 2b       	or	r24, r25
    1342:	79 f0       	breq	.+30     	; 0x1362 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    1344:	65 e2       	ldi	r22, 0x25	; 37
    1346:	71 e0       	ldi	r23, 0x01	; 1
    1348:	f8 01       	movw	r30, r16
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    1352:	f5 01       	movw	r30, r10
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	f8 01       	movw	r30, r16
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1362:	6e 01       	movw	r12, r28
    1364:	fe ee       	ldi	r31, 0xEE	; 238
    1366:	cf 1a       	sub	r12, r31
    1368:	fe ef       	ldi	r31, 0xFE	; 254
    136a:	df 0a       	sbc	r13, r31
    136c:	f6 01       	movw	r30, r12
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	89 2b       	or	r24, r25
    1374:	79 f0       	breq	.+30     	; 0x1394 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1376:	65 e2       	ldi	r22, 0x25	; 37
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	f8 01       	movw	r30, r16
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    1384:	f6 01       	movw	r30, r12
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	f8 01       	movw	r30, r16
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1394:	67 e2       	ldi	r22, 0x27	; 39
    1396:	71 e0       	ldi	r23, 0x01	; 1
    1398:	f8 01       	movw	r30, r16
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
    13a2:	64 e6       	ldi	r22, 0x64	; 100
    13a4:	72 e0       	ldi	r23, 0x02	; 2
    13a6:	80 ea       	ldi	r24, 0xA0	; 160
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    13ae:	6a e5       	ldi	r22, 0x5A	; 90
    13b0:	72 e0       	ldi	r23, 0x02	; 2
    13b2:	80 ea       	ldi	r24, 0xA0	; 160
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    13ba:	f4 01       	movw	r30, r8
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	80 ea       	ldi	r24, 0xA0	; 160
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    13c8:	f5 01       	movw	r30, r10
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	89 2b       	or	r24, r25
    13d0:	69 f0       	breq	.+26     	; 0x13ec <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    13d2:	65 e2       	ldi	r22, 0x25	; 37
    13d4:	71 e0       	ldi	r23, 0x01	; 1
    13d6:	80 ea       	ldi	r24, 0xA0	; 160
    13d8:	93 e0       	ldi	r25, 0x03	; 3
    13da:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    13de:	f5 01       	movw	r30, r10
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	80 ea       	ldi	r24, 0xA0	; 160
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    13ec:	f6 01       	movw	r30, r12
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	89 2b       	or	r24, r25
    13f4:	69 f0       	breq	.+26     	; 0x1410 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    13f6:	65 e2       	ldi	r22, 0x25	; 37
    13f8:	71 e0       	ldi	r23, 0x01	; 1
    13fa:	80 ea       	ldi	r24, 0xA0	; 160
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    1402:	f6 01       	movw	r30, r12
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	80 ea       	ldi	r24, 0xA0	; 160
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1410:	67 e2       	ldi	r22, 0x27	; 39
    1412:	71 e0       	ldi	r23, 0x01	; 1
    1414:	80 ea       	ldi	r24, 0xA0	; 160
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
    141c:	f7 01       	movw	r30, r14
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	40 e1       	ldi	r20, 0x10	; 16
    1424:	57 e2       	ldi	r21, 0x27	; 39
    1426:	ce 01       	movw	r24, r28
    1428:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    1430:	62 c0       	rjmp	.+196    	; 0x14f6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    1432:	f5 01       	movw	r30, r10
    1434:	40 81       	ld	r20, Z
    1436:	51 81       	ldd	r21, Z+1	; 0x01
    1438:	41 15       	cp	r20, r1
    143a:	51 05       	cpc	r21, r1
    143c:	39 f4       	brne	.+14     	; 0x144c <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    143e:	f6 01       	movw	r30, r12
    1440:	40 81       	ld	r20, Z
    1442:	51 81       	ldd	r21, Z+1	; 0x01
    1444:	41 15       	cp	r20, r1
    1446:	51 05       	cpc	r21, r1
    1448:	79 f4       	brne	.+30     	; 0x1468 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    144a:	42 cf       	rjmp	.-380    	; 0x12d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    144c:	f7 01       	movw	r30, r14
    144e:	20 81       	ld	r18, Z
    1450:	31 81       	ldd	r19, Z+1	; 0x01
    1452:	00 e1       	ldi	r16, 0x10	; 16
    1454:	17 e2       	ldi	r17, 0x27	; 39
    1456:	65 e4       	ldi	r22, 0x45	; 69
    1458:	72 e0       	ldi	r23, 0x02	; 2
    145a:	ce 01       	movw	r24, r28
    145c:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1460:	81 11       	cpse	r24, r1
    1462:	ed cf       	rjmp	.-38     	; 0x143e <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1464:	87 e0       	ldi	r24, 0x07	; 7
    1466:	50 c0       	rjmp	.+160    	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1468:	f7 01       	movw	r30, r14
    146a:	20 81       	ld	r18, Z
    146c:	31 81       	ldd	r19, Z+1	; 0x01
    146e:	00 e1       	ldi	r16, 0x10	; 16
    1470:	17 e2       	ldi	r17, 0x27	; 39
    1472:	61 e3       	ldi	r22, 0x31	; 49
    1474:	72 e0       	ldi	r23, 0x02	; 2
    1476:	ce 01       	movw	r24, r28
    1478:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    147c:	81 11       	cpse	r24, r1
    147e:	28 cf       	rjmp	.-432    	; 0x12d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1480:	88 e0       	ldi	r24, 0x08	; 8
    1482:	42 c0       	rjmp	.+132    	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1484:	f7 01       	movw	r30, r14
    1486:	40 81       	ld	r20, Z
    1488:	51 81       	ldd	r21, Z+1	; 0x01
    148a:	2f ef       	ldi	r18, 0xFF	; 255
    148c:	3f ef       	ldi	r19, 0xFF	; 255
    148e:	6b e1       	ldi	r22, 0x1B	; 27
    1490:	72 e0       	ldi	r23, 0x02	; 2
    1492:	ce 01       	movw	r24, r28
    1494:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1498:	88 23       	and	r24, r24
    149a:	79 f1       	breq	.+94     	; 0x14fa <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    149c:	87 2d       	mov	r24, r7
    149e:	34 c0       	rjmp	.+104    	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14a0:	43 e1       	ldi	r20, 0x13	; 19
    14a2:	52 e0       	ldi	r21, 0x02	; 2
    14a4:	68 e0       	ldi	r22, 0x08	; 8
    14a6:	72 e0       	ldi	r23, 0x02	; 2
    14a8:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14ac:	88 23       	and	r24, r24
    14ae:	39 f1       	breq	.+78     	; 0x14fe <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    14b0:	8e 01       	movw	r16, r28
    14b2:	05 5e       	subi	r16, 0xE5	; 229
    14b4:	1e 4f       	sbci	r17, 0xFE	; 254
    14b6:	f8 01       	movw	r30, r16
    14b8:	40 81       	ld	r20, Z
    14ba:	51 81       	ldd	r21, Z+1	; 0x01
    14bc:	20 e1       	ldi	r18, 0x10	; 16
    14be:	37 e2       	ldi	r19, 0x27	; 39
    14c0:	6b ef       	ldi	r22, 0xFB	; 251
    14c2:	71 e0       	ldi	r23, 0x01	; 1
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14ca:	88 23       	and	r24, r24
    14cc:	d1 f0       	breq	.+52     	; 0x1502 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    14ce:	f8 01       	movw	r30, r16
    14d0:	40 81       	ld	r20, Z
    14d2:	51 81       	ldd	r21, Z+1	; 0x01
    14d4:	20 e1       	ldi	r18, 0x10	; 16
    14d6:	37 e2       	ldi	r19, 0x27	; 39
    14d8:	60 ef       	ldi	r22, 0xF0	; 240
    14da:	71 e0       	ldi	r23, 0x01	; 1
    14dc:	ce 01       	movw	r24, r28
    14de:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14e2:	88 23       	and	r24, r24
    14e4:	81 f0       	breq	.+32     	; 0x1506 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	0b c0       	rjmp	.+22     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14f2:	85 e0       	ldi	r24, 0x05	; 5
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14f6:	86 e0       	ldi	r24, 0x06	; 6
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14fe:	8b e0       	ldi	r24, 0x0B	; 11
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1502:	8c e0       	ldi	r24, 0x0C	; 12
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1506:	8d e0       	ldi	r24, 0x0D	; 13
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
    151c:	9f 90       	pop	r9
    151e:	8f 90       	pop	r8
    1520:	7f 90       	pop	r7
    1522:	08 95       	ret

00001524 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	5b 01       	movw	r10, r22
    1538:	6a 01       	movw	r12, r20
    153a:	e2 2e       	mov	r14, r18
    153c:	0f 96       	adiw	r24, 0x0f	; 15
    153e:	0e 94 b1 23 	call	0x4762	; 0x4762 <strstr_P>
    1542:	ec 01       	movw	r28, r24
    1544:	89 2b       	or	r24, r25
    1546:	c1 f0       	breq	.+48     	; 0x1578 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1548:	c5 01       	movw	r24, r10
    154a:	0e 94 a8 23 	call	0x4750	; 0x4750 <__strlen_P>
    154e:	8c 0f       	add	r24, r28
    1550:	9d 1f       	adc	r25, r29
    1552:	c0 e0       	ldi	r28, 0x00	; 0
    1554:	f1 2c       	mov	r15, r1
    1556:	c0 17       	cp	r28, r16
    1558:	41 f0       	breq	.+16     	; 0x156a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    155a:	b7 01       	movw	r22, r14
    155c:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <strchr>
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	51 f0       	breq	.+20     	; 0x1578 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	cf 5f       	subi	r28, 0xFF	; 255
    1568:	f6 cf       	rjmp	.-20     	; 0x1556 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    156a:	0e 94 81 23 	call	0x4702	; 0x4702 <atoi>
    156e:	f6 01       	movw	r30, r12
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	01 c0       	rjmp	.+2      	; 0x157a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	bf 90       	pop	r11
    158a:	af 90       	pop	r10
    158c:	08 95       	ret

0000158e <_ZN13Adafruit_FONA12HTTP_readallEjPj>:
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	ec 01       	movw	r28, r24
    159c:	7a 01       	movw	r14, r20
    159e:	9b 01       	movw	r18, r22
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	04 ef       	ldi	r16, 0xF4	; 244
    15a6:	11 e0       	ldi	r17, 0x01	; 1
    15a8:	6e eb       	ldi	r22, 0xBE	; 190
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    15b0:	00 e0       	ldi	r16, 0x00	; 0
    15b2:	2c e2       	ldi	r18, 0x2C	; 44
    15b4:	a7 01       	movw	r20, r14
    15b6:	62 eb       	ldi	r22, 0xB2	; 178
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	ce 01       	movw	r24, r28
    15bc:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15c0:	88 23       	and	r24, r24
    15c2:	39 f0       	breq	.+14     	; 0x15d2 <_ZN13Adafruit_FONA12HTTP_readallEjPj+0x44>
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	64 ef       	ldi	r22, 0xF4	; 244
    15c8:	71 e0       	ldi	r23, 0x01	; 1
    15ca:	ce 01       	movw	r24, r28
    15cc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	08 95       	ret

000015e0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    15e0:	4f 92       	push	r4
    15e2:	5f 92       	push	r5
    15e4:	6f 92       	push	r6
    15e6:	7f 92       	push	r7
    15e8:	af 92       	push	r10
    15ea:	bf 92       	push	r11
    15ec:	cf 92       	push	r12
    15ee:	df 92       	push	r13
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	6a 01       	movw	r12, r20
    1600:	59 01       	movw	r10, r18
    1602:	27 01       	movw	r4, r14
    1604:	38 01       	movw	r6, r16
    1606:	fc 01       	movw	r30, r24
    1608:	e5 5e       	subi	r30, 0xE5	; 229
    160a:	fe 4f       	sbci	r31, 0xFE	; 254
    160c:	00 81       	ld	r16, Z
    160e:	11 81       	ldd	r17, Z+1	; 0x01
    1610:	26 2f       	mov	r18, r22
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	84 ef       	ldi	r24, 0xF4	; 244
    161a:	e8 2e       	mov	r14, r24
    161c:	ff 24       	eor	r15, r15
    161e:	f3 94       	inc	r15
    1620:	67 ee       	ldi	r22, 0xE7	; 231
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	ce 01       	movw	r24, r28
    1626:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    162a:	88 23       	and	r24, r24
    162c:	09 f1       	breq	.+66     	; 0x1670 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x90>
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	b2 01       	movw	r22, r4
    1632:	ce 01       	movw	r24, r28
    1634:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
    1638:	01 e0       	ldi	r16, 0x01	; 1
    163a:	2c e2       	ldi	r18, 0x2C	; 44
    163c:	a6 01       	movw	r20, r12
    163e:	6a ed       	ldi	r22, 0xDA	; 218
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	ce 01       	movw	r24, r28
    1644:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1648:	88 23       	and	r24, r24
    164a:	a1 f0       	breq	.+40     	; 0x1674 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x94>
    164c:	02 e0       	ldi	r16, 0x02	; 2
    164e:	2c e2       	ldi	r18, 0x2C	; 44
    1650:	a5 01       	movw	r20, r10
    1652:	6d ec       	ldi	r22, 0xCD	; 205
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	ce 01       	movw	r24, r28
    1658:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    165c:	88 23       	and	r24, r24
    165e:	61 f0       	breq	.+24     	; 0x1678 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x98>
    1660:	f6 01       	movw	r30, r12
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	88 3c       	cpi	r24, 0xC8	; 200
    1668:	91 05       	cpc	r25, r1
    166a:	41 f4       	brne	.+16     	; 0x167c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9c>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	07 c0       	rjmp	.+14     	; 0x167e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1670:	87 e0       	ldi	r24, 0x07	; 7
    1672:	05 c0       	rjmp	.+10     	; 0x167e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	03 c0       	rjmp	.+6      	; 0x167e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1678:	89 e0       	ldi	r24, 0x09	; 9
    167a:	01 c0       	rjmp	.+2      	; 0x167e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    167c:	80 e8       	ldi	r24, 0x80	; 128
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	7f 90       	pop	r7
    1694:	6f 90       	pop	r6
    1696:	5f 90       	pop	r5
    1698:	4f 90       	pop	r4
    169a:	08 95       	ret

0000169c <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_>:
    169c:	2f 92       	push	r2
    169e:	3f 92       	push	r3
    16a0:	4f 92       	push	r4
    16a2:	5f 92       	push	r5
    16a4:	6f 92       	push	r6
    16a6:	7f 92       	push	r7
    16a8:	8f 92       	push	r8
    16aa:	9f 92       	push	r9
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x26>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x28>
    16c4:	1f 92       	push	r1
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	3c 01       	movw	r6, r24
    16cc:	5b 83       	std	Y+3, r21	; 0x03
    16ce:	4a 83       	std	Y+2, r20	; 0x02
    16d0:	19 01       	movw	r2, r18
    16d2:	28 01       	movw	r4, r16
    16d4:	fd 82       	std	Y+5, r15	; 0x05
    16d6:	ec 82       	std	Y+4, r14	; 0x04
    16d8:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	8f 70       	andi	r24, 0x0F	; 15
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x4a>
    16e4:	59 c0       	rjmp	.+178    	; 0x1798 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfc>
    16e6:	4a 81       	ldd	r20, Y+2	; 0x02
    16e8:	5b 81       	ldd	r21, Y+3	; 0x03
    16ea:	6a ea       	ldi	r22, 0xAA	; 170
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	c3 01       	movw	r24, r6
    16f0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    16f4:	81 11       	cpse	r24, r1
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x62>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	80 61       	ori	r24, 0x10	; 16
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	a2 01       	movw	r20, r4
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	00 ec       	ldi	r16, 0xC0	; 192
    1706:	14 ed       	ldi	r17, 0xD4	; 212
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	c3 01       	movw	r24, r6
    170e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN13Adafruit_FONA9HTTP_dataEmm>
    1712:	81 11       	cpse	r24, r1
    1714:	03 c0       	rjmp	.+6      	; 0x171c <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x80>
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	85 60       	ori	r24, 0x05	; 5
    171a:	3f c0       	rjmp	.+126    	; 0x179a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    171c:	f3 01       	movw	r30, r6
    171e:	e3 5e       	subi	r30, 0xE3	; 227
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	dc 01       	movw	r26, r24
    1728:	ed 91       	ld	r30, X+
    172a:	fc 91       	ld	r31, X
    172c:	02 80       	ldd	r0, Z+2	; 0x02
    172e:	f3 81       	ldd	r31, Z+3	; 0x03
    1730:	e0 2d       	mov	r30, r0
    1732:	a2 01       	movw	r20, r4
    1734:	b1 01       	movw	r22, r2
    1736:	09 95       	icall
    1738:	f3 01       	movw	r30, r6
    173a:	e5 5e       	subi	r30, 0xE5	; 229
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	40 e1       	ldi	r20, 0x10	; 16
    1744:	57 e2       	ldi	r21, 0x27	; 39
    1746:	c3 01       	movw	r24, r6
    1748:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    174c:	81 11       	cpse	r24, r1
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xba>
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	86 60       	ori	r24, 0x06	; 6
    1754:	22 c0       	rjmp	.+68     	; 0x179a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1756:	10 e1       	ldi	r17, 0x10	; 16
    1758:	e1 2e       	mov	r14, r17
    175a:	17 e2       	ldi	r17, 0x27	; 39
    175c:	f1 2e       	mov	r15, r17
    175e:	00 e0       	ldi	r16, 0x00	; 0
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	95 01       	movw	r18, r10
    1764:	4c 81       	ldd	r20, Y+4	; 0x04
    1766:	5d 81       	ldd	r21, Y+5	; 0x05
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	c3 01       	movw	r24, r6
    176c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    1770:	98 2f       	mov	r25, r24
    1772:	9f 70       	andi	r25, 0x0F	; 15
    1774:	92 30       	cpi	r25, 0x02	; 2
    1776:	18 f0       	brcs	.+6      	; 0x177e <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xe2>
    1778:	b9 81       	ldd	r27, Y+1	; 0x01
    177a:	8b 2b       	or	r24, r27
    177c:	0e c0       	rjmp	.+28     	; 0x179a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    177e:	a4 01       	movw	r20, r8
    1780:	b6 01       	movw	r22, r12
    1782:	c3 01       	movw	r24, r6
    1784:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN13Adafruit_FONA12HTTP_readallEjPj>
    1788:	81 11       	cpse	r24, r1
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xf6>
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	80 62       	ori	r24, 0x20	; 32
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	01 c0       	rjmp	.+2      	; 0x179a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	2f 90       	pop	r2
    17c8:	08 95       	ret

000017ca <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_>:
    17ca:	2f 92       	push	r2
    17cc:	3f 92       	push	r3
    17ce:	4f 92       	push	r4
    17d0:	5f 92       	push	r5
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x26>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x28>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	3c 01       	movw	r6, r24
    17f8:	3c 83       	std	Y+4, r19	; 0x04
    17fa:	2b 83       	std	Y+3, r18	; 0x03
    17fc:	28 01       	movw	r4, r16
    17fe:	17 01       	movw	r2, r14
    1800:	76 01       	movw	r14, r12
    1802:	1a 82       	std	Y+2, r1	; 0x02
    1804:	19 82       	std	Y+1, r1	; 0x01
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	4c 01       	movw	r8, r24
    180c:	51 01       	movw	r10, r2
    180e:	68 01       	movw	r12, r16
    1810:	8a 01       	movw	r16, r20
    1812:	9b 01       	movw	r18, r22
    1814:	43 ec       	ldi	r20, 0xC3	; 195
    1816:	51 e0       	ldi	r21, 0x01	; 1
    1818:	6e ec       	ldi	r22, 0xCE	; 206
    181a:	71 e0       	ldi	r23, 0x01	; 1
    181c:	c3 01       	movw	r24, r6
    181e:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_>
    1822:	18 2f       	mov	r17, r24
    1824:	8f 70       	andi	r24, 0x0F	; 15
    1826:	82 30       	cpi	r24, 0x02	; 2
    1828:	78 f0       	brcs	.+30     	; 0x1848 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x7e>
    182a:	60 ea       	ldi	r22, 0xA0	; 160
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	80 ea       	ldi	r24, 0xA0	; 160
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1836:	61 2f       	mov	r22, r17
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	4a e0       	ldi	r20, 0x0A	; 10
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	80 ea       	ldi	r24, 0xA0	; 160
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN5Print7printlnEii>
    1846:	77 c0       	rjmp	.+238    	; 0x1936 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x16c>
    1848:	63 e8       	ldi	r22, 0x83	; 131
    184a:	71 e0       	ldi	r23, 0x01	; 1
    184c:	80 ea       	ldi	r24, 0xA0	; 160
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1854:	d1 01       	movw	r26, r2
    1856:	6d 91       	ld	r22, X+
    1858:	7c 91       	ld	r23, X
    185a:	4a e0       	ldi	r20, 0x0A	; 10
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	80 ea       	ldi	r24, 0xA0	; 160
    1860:	93 e0       	ldi	r25, 0x03	; 3
    1862:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    1866:	60 e7       	ldi	r22, 0x70	; 112
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	80 ea       	ldi	r24, 0xA0	; 160
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1872:	4a e0       	ldi	r20, 0x0A	; 10
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	b2 01       	movw	r22, r4
    1878:	80 ea       	ldi	r24, 0xA0	; 160
    187a:	93 e0       	ldi	r25, 0x03	; 3
    187c:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    1880:	62 e6       	ldi	r22, 0x62	; 98
    1882:	71 e0       	ldi	r23, 0x01	; 1
    1884:	80 ea       	ldi	r24, 0xA0	; 160
    1886:	93 e0       	ldi	r25, 0x03	; 3
    1888:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    188c:	69 81       	ldd	r22, Y+1	; 0x01
    188e:	7a 81       	ldd	r23, Y+2	; 0x02
    1890:	4a e0       	ldi	r20, 0x0A	; 10
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	80 ea       	ldi	r24, 0xA0	; 160
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 8e 1b 	call	0x371c	; 0x371c <_ZN5Print7printlnEji>
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	02 96       	adiw	r24, 0x02	; 2
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	21 2c       	mov	r2, r1
    18a8:	31 2c       	mov	r3, r1
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	eb 81       	ldd	r30, Y+3	; 0x03
    18b0:	fc 81       	ldd	r31, Y+4	; 0x04
    18b2:	e2 0d       	add	r30, r2
    18b4:	f3 1d       	adc	r31, r3
    18b6:	89 2b       	or	r24, r25
    18b8:	d1 f1       	breq	.+116    	; 0x192e <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x164>
    18ba:	2f 01       	movw	r4, r30
    18bc:	d3 01       	movw	r26, r6
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	04 80       	ldd	r0, Z+4	; 0x04
    18c4:	f5 81       	ldd	r31, Z+5	; 0x05
    18c6:	e0 2d       	mov	r30, r0
    18c8:	c3 01       	movw	r24, r6
    18ca:	09 95       	icall
    18cc:	89 2b       	or	r24, r25
    18ce:	69 f3       	breq	.-38     	; 0x18aa <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xe0>
    18d0:	d3 01       	movw	r26, r6
    18d2:	ed 91       	ld	r30, X+
    18d4:	fc 91       	ld	r31, X
    18d6:	06 80       	ldd	r0, Z+6	; 0x06
    18d8:	f7 81       	ldd	r31, Z+7	; 0x07
    18da:	e0 2d       	mov	r30, r0
    18dc:	c3 01       	movw	r24, r6
    18de:	09 95       	icall
    18e0:	08 2f       	mov	r16, r24
    18e2:	68 2f       	mov	r22, r24
    18e4:	80 ea       	ldi	r24, 0xA0	; 160
    18e6:	93 e0       	ldi	r25, 0x03	; 3
    18e8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN5Print5printEc>
    18ec:	69 e2       	ldi	r22, 0x29	; 41
    18ee:	71 e0       	ldi	r23, 0x01	; 1
    18f0:	80 ea       	ldi	r24, 0xA0	; 160
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    18f8:	4a e0       	ldi	r20, 0x0A	; 10
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	60 2f       	mov	r22, r16
    18fe:	80 ea       	ldi	r24, 0xA0	; 160
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 76 1b 	call	0x36ec	; 0x36ec <_ZN5Print7printlnEhi>
    1906:	f2 01       	movw	r30, r4
    1908:	01 93       	st	Z+, r16
    190a:	2f 01       	movw	r4, r30
    190c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1910:	85 ff       	sbrs	r24, 5
    1912:	fc cf       	rjmp	.-8      	; 0x190c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x142>
    1914:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1918:	ff ef       	ldi	r31, 0xFF	; 255
    191a:	2f 1a       	sub	r2, r31
    191c:	3f 0a       	sbc	r3, r31
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 2b       	or	r24, r25
    192a:	41 f6       	brne	.-112    	; 0x18bc <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xf2>
    192c:	be cf       	rjmp	.-132    	; 0x18aa <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xe0>
    192e:	10 82       	st	Z, r1
    1930:	c3 01       	movw	r24, r6
    1932:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN13Adafruit_FONA9HTTP_termEv>
    1936:	81 2f       	mov	r24, r17
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	bf 90       	pop	r11
    1952:	af 90       	pop	r10
    1954:	9f 90       	pop	r9
    1956:	8f 90       	pop	r8
    1958:	7f 90       	pop	r7
    195a:	6f 90       	pop	r6
    195c:	5f 90       	pop	r5
    195e:	4f 90       	pop	r4
    1960:	3f 90       	pop	r3
    1962:	2f 90       	pop	r2
    1964:	08 95       	ret

00001966 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1966:	af 92       	push	r10
    1968:	bf 92       	push	r11
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	ec 01       	movw	r28, r24
    197a:	6a 01       	movw	r12, r20
    197c:	59 01       	movw	r10, r18
    197e:	10 2f       	mov	r17, r16
    1980:	0e 2d       	mov	r16, r14
    1982:	44 ef       	ldi	r20, 0xF4	; 244
    1984:	51 e0       	ldi	r21, 0x01	; 1
    1986:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    198a:	21 2f       	mov	r18, r17
    198c:	a5 01       	movw	r20, r10
    198e:	b6 01       	movw	r22, r12
    1990:	ce 01       	movw	r24, r28
    1992:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1996:	18 2f       	mov	r17, r24
    1998:	88 23       	and	r24, r24
    199a:	31 f0       	breq	.+12     	; 0x19a8 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	64 ef       	ldi	r22, 0xF4	; 244
    19a0:	71 e0       	ldi	r23, 0x01	; 1
    19a2:	ce 01       	movw	r24, r28
    19a4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13Adafruit_FONA8readlineEjb>
    19a8:	81 2f       	mov	r24, r17
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	08 95       	ret

000019be <_ZN13Adafruit_FONA14getBattPercentEPj>:
    19be:	ef 92       	push	r14
    19c0:	0f 93       	push	r16
    19c2:	9b 01       	movw	r18, r22
    19c4:	ee 24       	eor	r14, r14
    19c6:	e3 94       	inc	r14
    19c8:	0c e2       	ldi	r16, 0x2C	; 44
    19ca:	4a e0       	ldi	r20, 0x0A	; 10
    19cc:	53 e0       	ldi	r21, 0x03	; 3
    19ce:	63 e0       	ldi	r22, 0x03	; 3
    19d0:	73 e0       	ldi	r23, 0x03	; 3
    19d2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    19d6:	0f 91       	pop	r16
    19d8:	ef 90       	pop	r14
    19da:	08 95       	ret

000019dc <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	28 97       	sbiw	r28, 0x08	; 8
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    19fe:	18 86       	std	Y+8, r1	; 0x08
    1a00:	1f 82       	std	Y+7, r1	; 0x07
    1a02:	1e 82       	std	Y+6, r1	; 0x06
    1a04:	1d 82       	std	Y+5, r1	; 0x05
    1a06:	1c 82       	std	Y+4, r1	; 0x04
    1a08:	1b 82       	std	Y+3, r1	; 0x03
    1a0a:	1a 82       	std	Y+2, r1	; 0x02
    1a0c:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1a0e:	e1 2c       	mov	r14, r1
    1a10:	0c e2       	ldi	r16, 0x2C	; 44
    1a12:	9e 01       	movw	r18, r28
    1a14:	29 5f       	subi	r18, 0xF9	; 249
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	4c ef       	ldi	r20, 0xFC	; 252
    1a1a:	52 e0       	ldi	r21, 0x02	; 2
    1a1c:	65 ef       	ldi	r22, 0xF5	; 245
    1a1e:	72 e0       	ldi	r23, 0x02	; 2
    1a20:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a24:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1a26:	ee 24       	eor	r14, r14
    1a28:	e3 94       	inc	r14
    1a2a:	9e 01       	movw	r18, r28
    1a2c:	2b 5f       	subi	r18, 0xFB	; 251
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	4e ee       	ldi	r20, 0xEE	; 238
    1a32:	52 e0       	ldi	r21, 0x02	; 2
    1a34:	67 ee       	ldi	r22, 0xE7	; 231
    1a36:	72 e0       	ldi	r23, 0x02	; 2
    1a38:	c6 01       	movw	r24, r12
    1a3a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a3e:	88 23       	and	r24, r24
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	f8 26       	eor	r15, r24
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1a48:	ff 24       	eor	r15, r15
    1a4a:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1a4c:	e1 2c       	mov	r14, r1
    1a4e:	0c e2       	ldi	r16, 0x2C	; 44
    1a50:	9e 01       	movw	r18, r28
    1a52:	2d 5f       	subi	r18, 0xFD	; 253
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	4f ed       	ldi	r20, 0xDF	; 223
    1a58:	52 e0       	ldi	r21, 0x02	; 2
    1a5a:	66 ed       	ldi	r22, 0xD6	; 214
    1a5c:	72 e0       	ldi	r23, 0x02	; 2
    1a5e:	c6 01       	movw	r24, r12
    1a60:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a64:	88 23       	and	r24, r24
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1a68:	1b 81       	ldd	r17, Y+3	; 0x03
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a6c:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1a6e:	ee 24       	eor	r14, r14
    1a70:	e3 94       	inc	r14
    1a72:	0c e2       	ldi	r16, 0x2C	; 44
    1a74:	9e 01       	movw	r18, r28
    1a76:	2f 5f       	subi	r18, 0xFF	; 255
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	4e ec       	ldi	r20, 0xCE	; 206
    1a7c:	52 e0       	ldi	r21, 0x02	; 2
    1a7e:	65 ec       	ldi	r22, 0xC5	; 197
    1a80:	72 e0       	ldi	r23, 0x02	; 2
    1a82:	c6 01       	movw	r24, r12
    1a84:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a88:	81 11       	cpse	r24, r1
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a8c:	91 2f       	mov	r25, r17
    1a8e:	90 62       	ori	r25, 0x20	; 32
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1a92:	99 81       	ldd	r25, Y+1	; 0x01
    1a94:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1a96:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1a9a:	8f 2d       	mov	r24, r15
    1a9c:	28 96       	adiw	r28, 0x08	; 8
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	08 95       	ret

00001aba <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1aba:	fc 01       	movw	r30, r24
    1abc:	10 82       	st	Z, r1
    1abe:	12 82       	std	Z+2, r1	; 0x02
    1ac0:	11 82       	std	Z+1, r1	; 0x01
    1ac2:	13 82       	std	Z+3, r1	; 0x03
    1ac4:	14 82       	std	Z+4, r1	; 0x04
    1ac6:	15 82       	std	Z+5, r1	; 0x05
    1ac8:	16 82       	std	Z+6, r1	; 0x06
    1aca:	17 82       	std	Z+7, r1	; 0x07
    1acc:	12 86       	std	Z+10, r1	; 0x0a
    1ace:	11 86       	std	Z+9, r1	; 0x09
    1ad0:	14 86       	std	Z+12, r1	; 0x0c
    1ad2:	13 86       	std	Z+11, r1	; 0x0b
    1ad4:	08 95       	ret

00001ad6 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	82 9f       	mul	r24, r18
    1ada:	c0 01       	movw	r24, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	09 96       	adiw	r24, 0x09	; 9
    1ae0:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <_ZN7Helpers14base64_enc_lenEi>

00001ae4 <_ZN10GsmPayload16createRawPayloadEPh>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	ec 01       	movw	r28, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	29 e0       	ldi	r18, 0x09	; 9
    1aee:	fe 01       	movw	r30, r28
    1af0:	db 01       	movw	r26, r22
    1af2:	01 90       	ld	r0, Z+
    1af4:	0d 92       	st	X+, r0
    1af6:	2a 95       	dec	r18
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1afa:	4b 81       	ldd	r20, Y+3	; 0x03
    1afc:	2a e0       	ldi	r18, 0x0A	; 10
    1afe:	42 9f       	mul	r20, r18
    1b00:	a0 01       	movw	r20, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	09 96       	adiw	r24, 0x09	; 9
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	0c 94 cb 23 	jmp	0x4796	; 0x4796 <memcpy>

00001b12 <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	6b 01       	movw	r12, r22
    1b2c:	ed b6       	in	r14, 0x3d	; 61
    1b2e:	fe b6       	in	r15, 0x3e	; 62
    1b30:	fc 01       	movw	r30, r24
    1b32:	03 81       	ldd	r16, Z+3	; 0x03
    1b34:	fa e0       	ldi	r31, 0x0A	; 10
    1b36:	0f 9f       	mul	r16, r31
    1b38:	80 01       	movw	r16, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	07 5f       	subi	r16, 0xF7	; 247
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	2d b7       	in	r18, 0x3d	; 61
    1b42:	3e b7       	in	r19, 0x3e	; 62
    1b44:	20 1b       	sub	r18, r16
    1b46:	31 0b       	sbc	r19, r17
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	3e bf       	out	0x3e, r19	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	2d bf       	out	0x3d, r18	; 61
    1b52:	ed b7       	in	r30, 0x3d	; 61
    1b54:	fe b7       	in	r31, 0x3e	; 62
    1b56:	31 96       	adiw	r30, 0x01	; 1
    1b58:	5f 01       	movw	r10, r30
    1b5a:	bf 01       	movw	r22, r30
    1b5c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN10GsmPayload16createRawPayloadEPh>
    1b60:	a8 01       	movw	r20, r16
    1b62:	b5 01       	movw	r22, r10
    1b64:	c6 01       	movw	r24, r12
    1b66:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN7Helpers13base64_encodeEPcPhi>
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	fe be       	out	0x3e, r15	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	ed be       	out	0x3d, r14	; 61
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	bf 90       	pop	r11
    1b86:	af 90       	pop	r10
    1b88:	08 95       	ret

00001b8a <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	74 87       	std	Z+12, r23	; 0x0c
    1b8e:	63 87       	std	Z+11, r22	; 0x0b
    1b90:	43 83       	std	Z+3, r20	; 0x03
    1b92:	08 95       	ret

00001b94 <_ZN10GsmPayload11setModuleIdEh>:
    1b94:	fc 01       	movw	r30, r24
    1b96:	60 83       	st	Z, r22
    1b98:	08 95       	ret

00001b9a <_ZN10GsmPayload13getBootNumberEv>:
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	81 81       	ldd	r24, Z+1	; 0x01
    1b9e:	92 81       	ldd	r25, Z+2	; 0x02
    1ba0:	08 95       	ret

00001ba2 <_ZN10GsmPayload13setBootNumberEj>:
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	72 83       	std	Z+2, r23	; 0x02
    1ba6:	61 83       	std	Z+1, r22	; 0x01
    1ba8:	08 95       	ret

00001baa <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1baa:	fc 01       	movw	r30, r24
    1bac:	45 83       	std	Z+5, r20	; 0x05
    1bae:	56 83       	std	Z+6, r21	; 0x06
    1bb0:	67 83       	std	Z+7, r22	; 0x07
    1bb2:	70 87       	std	Z+8, r23	; 0x08
    1bb4:	08 95       	ret

00001bb6 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
    1bbc:	6b e0       	ldi	r22, 0x0B	; 11
    1bbe:	74 e0       	ldi	r23, 0x04	; 4
    1bc0:	80 ea       	ldi	r24, 0xA0	; 160
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1bc8:	4a e0       	ldi	r20, 0x0A	; 10
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	68 81       	ld	r22, Y
    1bce:	80 ea       	ldi	r24, 0xA0	; 160
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	0e 94 6f 1b 	call	0x36de	; 0x36de <_ZN5Print5printEhi>
    1bd6:	67 e0       	ldi	r22, 0x07	; 7
    1bd8:	74 e0       	ldi	r23, 0x04	; 4
    1bda:	80 ea       	ldi	r24, 0xA0	; 160
    1bdc:	93 e0       	ldi	r25, 0x03	; 3
    1bde:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1be2:	62 e0       	ldi	r22, 0x02	; 2
    1be4:	74 e0       	ldi	r23, 0x04	; 4
    1be6:	80 ea       	ldi	r24, 0xA0	; 160
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1bee:	4a e0       	ldi	r20, 0x0A	; 10
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	69 81       	ldd	r22, Y+1	; 0x01
    1bf4:	80 ea       	ldi	r24, 0xA0	; 160
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	0e 94 6f 1b 	call	0x36de	; 0x36de <_ZN5Print5printEhi>
    1bfc:	6e ef       	ldi	r22, 0xFE	; 254
    1bfe:	73 e0       	ldi	r23, 0x03	; 3
    1c00:	80 ea       	ldi	r24, 0xA0	; 160
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1c08:	69 ee       	ldi	r22, 0xE9	; 233
    1c0a:	73 e0       	ldi	r23, 0x03	; 3
    1c0c:	80 ea       	ldi	r24, 0xA0	; 160
    1c0e:	93 e0       	ldi	r25, 0x03	; 3
    1c10:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1c14:	6b 81       	ldd	r22, Y+3	; 0x03
    1c16:	63 70       	andi	r22, 0x03	; 3
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	4a e0       	ldi	r20, 0x0A	; 10
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	80 ea       	ldi	r24, 0xA0	; 160
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN5Print5printEii>
    1c26:	6f ed       	ldi	r22, 0xDF	; 223
    1c28:	73 e0       	ldi	r23, 0x03	; 3
    1c2a:	80 ea       	ldi	r24, 0xA0	; 160
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1c32:	6b 81       	ldd	r22, Y+3	; 0x03
    1c34:	6c 71       	andi	r22, 0x1C	; 28
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	75 95       	asr	r23
    1c3a:	67 95       	ror	r22
    1c3c:	75 95       	asr	r23
    1c3e:	67 95       	ror	r22
    1c40:	4a e0       	ldi	r20, 0x0A	; 10
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	80 ea       	ldi	r24, 0xA0	; 160
    1c46:	93 e0       	ldi	r25, 0x03	; 3
    1c48:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN5Print5printEii>
    1c4c:	66 ed       	ldi	r22, 0xD6	; 214
    1c4e:	73 e0       	ldi	r23, 0x03	; 3
    1c50:	80 ea       	ldi	r24, 0xA0	; 160
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1c58:	6b 81       	ldd	r22, Y+3	; 0x03
    1c5a:	65 fb       	bst	r22, 5
    1c5c:	66 27       	eor	r22, r22
    1c5e:	60 f9       	bld	r22, 0
    1c60:	4a e0       	ldi	r20, 0x0A	; 10
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	80 ea       	ldi	r24, 0xA0	; 160
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN5Print5printEii>
    1c6e:	62 ed       	ldi	r22, 0xD2	; 210
    1c70:	73 e0       	ldi	r23, 0x03	; 3
    1c72:	80 ea       	ldi	r24, 0xA0	; 160
    1c74:	93 e0       	ldi	r25, 0x03	; 3
    1c76:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1c7a:	65 ec       	ldi	r22, 0xC5	; 197
    1c7c:	73 e0       	ldi	r23, 0x03	; 3
    1c7e:	80 ea       	ldi	r24, 0xA0	; 160
    1c80:	93 e0       	ldi	r25, 0x03	; 3
    1c82:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1c86:	4a e0       	ldi	r20, 0x0A	; 10
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c8c:	80 ea       	ldi	r24, 0xA0	; 160
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <_ZN5Print7printlnEhi>

00001c98 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1c98:	fc 01       	movw	r30, r24
    1c9a:	22 81       	ldd	r18, Z+2	; 0x02
    1c9c:	21 11       	cpse	r18, r1
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1ca0:	90 81       	ld	r25, Z
    1ca2:	93 36       	cpi	r25, 0x63	; 99
    1ca4:	19 f0       	breq	.+6      	; 0x1cac <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	97 30       	cpi	r25, 0x07	; 7
    1caa:	08 f4       	brcc	.+2      	; 0x1cae <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	08 95       	ret

00001cb0 <_ZN7Helpers15printSensorDataEP10SensorData>:
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	6d eb       	ldi	r22, 0xBD	; 189
    1cb8:	73 e0       	ldi	r23, 0x03	; 3
    1cba:	80 ea       	ldi	r24, 0xA0	; 160
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1cc2:	69 81       	ldd	r22, Y+1	; 0x01
    1cc4:	7a 81       	ldd	r23, Y+2	; 0x02
    1cc6:	4a e0       	ldi	r20, 0x0A	; 10
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	80 ea       	ldi	r24, 0xA0	; 160
    1ccc:	93 e0       	ldi	r25, 0x03	; 3
    1cce:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    1cd2:	69 eb       	ldi	r22, 0xB9	; 185
    1cd4:	73 e0       	ldi	r23, 0x03	; 3
    1cd6:	80 ea       	ldi	r24, 0xA0	; 160
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1cde:	63 eb       	ldi	r22, 0xB3	; 179
    1ce0:	73 e0       	ldi	r23, 0x03	; 3
    1ce2:	80 ea       	ldi	r24, 0xA0	; 160
    1ce4:	93 e0       	ldi	r25, 0x03	; 3
    1ce6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1cea:	6b 81       	ldd	r22, Y+3	; 0x03
    1cec:	7c 81       	ldd	r23, Y+4	; 0x04
    1cee:	4a e0       	ldi	r20, 0x0A	; 10
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	80 ea       	ldi	r24, 0xA0	; 160
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    1cfa:	6f ea       	ldi	r22, 0xAF	; 175
    1cfc:	73 e0       	ldi	r23, 0x03	; 3
    1cfe:	80 ea       	ldi	r24, 0xA0	; 160
    1d00:	93 e0       	ldi	r25, 0x03	; 3
    1d02:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1d06:	66 ea       	ldi	r22, 0xA6	; 166
    1d08:	73 e0       	ldi	r23, 0x03	; 3
    1d0a:	80 ea       	ldi	r24, 0xA0	; 160
    1d0c:	93 e0       	ldi	r25, 0x03	; 3
    1d0e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1d12:	6d 81       	ldd	r22, Y+5	; 0x05
    1d14:	7e 81       	ldd	r23, Y+6	; 0x06
    1d16:	4a e0       	ldi	r20, 0x0A	; 10
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	80 ea       	ldi	r24, 0xA0	; 160
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    1d22:	62 ea       	ldi	r22, 0xA2	; 162
    1d24:	73 e0       	ldi	r23, 0x03	; 3
    1d26:	80 ea       	ldi	r24, 0xA0	; 160
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1d2e:	6c e9       	ldi	r22, 0x9C	; 156
    1d30:	73 e0       	ldi	r23, 0x03	; 3
    1d32:	80 ea       	ldi	r24, 0xA0	; 160
    1d34:	93 e0       	ldi	r25, 0x03	; 3
    1d36:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	4a e0       	ldi	r20, 0x0A	; 10
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	80 ea       	ldi	r24, 0xA0	; 160
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    1d4a:	68 e9       	ldi	r22, 0x98	; 152
    1d4c:	73 e0       	ldi	r23, 0x03	; 3
    1d4e:	80 ea       	ldi	r24, 0xA0	; 160
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1d56:	61 e9       	ldi	r22, 0x91	; 145
    1d58:	73 e0       	ldi	r23, 0x03	; 3
    1d5a:	80 ea       	ldi	r24, 0xA0	; 160
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    1d62:	4a e0       	ldi	r20, 0x0A	; 10
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	69 85       	ldd	r22, Y+9	; 0x09
    1d68:	80 ea       	ldi	r24, 0xA0	; 160
    1d6a:	93 e0       	ldi	r25, 0x03	; 3
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <_ZN5Print7printlnEhi>

00001d74 <_ZN7Helpers12freeListSizeEv>:
    1d74:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <__flp>
    1d78:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <__flp+0x1>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	30 97       	sbiw	r30, 0x00	; 0
    1d82:	49 f0       	breq	.+18     	; 0x1d96 <_ZN7Helpers12freeListSizeEv+0x22>
    1d84:	02 96       	adiw	r24, 0x02	; 2
    1d86:	20 81       	ld	r18, Z
    1d88:	31 81       	ldd	r19, Z+1	; 0x01
    1d8a:	82 0f       	add	r24, r18
    1d8c:	93 1f       	adc	r25, r19
    1d8e:	02 80       	ldd	r0, Z+2	; 0x02
    1d90:	f3 81       	ldd	r31, Z+3	; 0x03
    1d92:	e0 2d       	mov	r30, r0
    1d94:	f5 cf       	rjmp	.-22     	; 0x1d80 <_ZN7Helpers12freeListSizeEv+0xc>
    1d96:	08 95       	ret

00001d98 <_ZN7Helpers10freeMemoryEv>:
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <_ZN7Helpers10freeMemoryEv+0xa>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__brkval>
    1daa:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <__brkval+0x1>
    1dae:	8e 01       	movw	r16, r28
    1db0:	0f 5f       	subi	r16, 0xFF	; 255
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <_ZN7Helpers10freeMemoryEv+0x2a>
    1db8:	0e 58       	subi	r16, 0x8E	; 142
    1dba:	14 40       	sbci	r17, 0x04	; 4
    1dbc:	1a 83       	std	Y+2, r17	; 0x02
    1dbe:	09 83       	std	Y+1, r16	; 0x01
    1dc0:	0a c0       	rjmp	.+20     	; 0x1dd6 <_ZN7Helpers10freeMemoryEv+0x3e>
    1dc2:	08 1b       	sub	r16, r24
    1dc4:	19 0b       	sbc	r17, r25
    1dc6:	1a 83       	std	Y+2, r17	; 0x02
    1dc8:	09 83       	std	Y+1, r16	; 0x01
    1dca:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN7Helpers12freeListSizeEv>
    1dce:	80 0f       	add	r24, r16
    1dd0:	91 1f       	adc	r25, r17
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <_ZN7Helpers14base64_enc_lenEi>:
    1de8:	9c 01       	movw	r18, r24
    1dea:	2e 5f       	subi	r18, 0xFE	; 254
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	e3 e0       	ldi	r30, 0x03	; 3
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	c9 01       	movw	r24, r18
    1df4:	bf 01       	movw	r22, r30
    1df6:	0e 94 3f 21 	call	0x427e	; 0x427e <__divmodhi4>
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	48 1b       	sub	r20, r24
    1dfe:	59 0b       	sbc	r21, r25
    1e00:	ca 01       	movw	r24, r20
    1e02:	bf 01       	movw	r22, r30
    1e04:	0e 94 3f 21 	call	0x427e	; 0x427e <__divmodhi4>
    1e08:	cb 01       	movw	r24, r22
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	08 95       	ret

00001e16 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1e16:	dc 01       	movw	r26, r24
    1e18:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1e1a:	80 81       	ld	r24, Z
    1e1c:	86 95       	lsr	r24
    1e1e:	86 95       	lsr	r24
    1e20:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1e22:	80 81       	ld	r24, Z
    1e24:	83 70       	andi	r24, 0x03	; 3
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	92 95       	swap	r25
    1e2a:	9f 70       	andi	r25, 0x0F	; 15
    1e2c:	20 e1       	ldi	r18, 0x10	; 16
    1e2e:	82 9f       	mul	r24, r18
    1e30:	90 0d       	add	r25, r0
    1e32:	11 24       	eor	r1, r1
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	9c 93       	st	X, r25
    1e38:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	9f 70       	andi	r25, 0x0F	; 15
    1e3e:	99 0f       	add	r25, r25
    1e40:	99 0f       	add	r25, r25
    1e42:	22 81       	ldd	r18, Z+2	; 0x02
    1e44:	22 95       	swap	r18
    1e46:	26 95       	lsr	r18
    1e48:	26 95       	lsr	r18
    1e4a:	23 70       	andi	r18, 0x03	; 3
    1e4c:	92 0f       	add	r25, r18
    1e4e:	12 96       	adiw	r26, 0x02	; 2
    1e50:	9c 93       	st	X, r25
    1e52:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	8f 73       	andi	r24, 0x3F	; 63
    1e58:	13 96       	adiw	r26, 0x03	; 3
    1e5a:	8c 93       	st	X, r24
    1e5c:	08 95       	ret

00001e5e <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1e5e:	6f 92       	push	r6
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	27 97       	sbiw	r28, 0x07	; 7
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	6c 01       	movw	r12, r24
    1e8c:	5b 01       	movw	r10, r22
    1e8e:	3b 01       	movw	r6, r22
    1e90:	64 0e       	add	r6, r20
    1e92:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1e94:	e1 2c       	mov	r14, r1
    1e96:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1e98:	00 e0       	ldi	r16, 0x00	; 0
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1e9c:	4e 01       	movw	r8, r28
    1e9e:	85 e0       	ldi	r24, 0x05	; 5
    1ea0:	88 0e       	add	r8, r24
    1ea2:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1ea4:	6a 14       	cp	r6, r10
    1ea6:	7b 04       	cpc	r7, r11
    1ea8:	49 f1       	breq	.+82     	; 0x1efc <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1eaa:	c8 01       	movw	r24, r16
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	f5 01       	movw	r30, r10
    1eb0:	21 91       	ld	r18, Z+
    1eb2:	5f 01       	movw	r10, r30
    1eb4:	f4 01       	movw	r30, r8
    1eb6:	e0 0f       	add	r30, r16
    1eb8:	f1 1f       	adc	r31, r17
    1eba:	20 83       	st	Z, r18
		if(i == 3) {
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	11 f0       	breq	.+4      	; 0x1ec6 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1ec2:	8c 01       	movw	r16, r24
    1ec4:	ef cf       	rjmp	.-34     	; 0x1ea4 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1ec6:	b4 01       	movw	r22, r8
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_Z8a3_to_a4PhS_>
    1ed0:	de 01       	movw	r26, r28
    1ed2:	11 96       	adiw	r26, 0x01	; 1
    1ed4:	c6 01       	movw	r24, r12
    1ed6:	8e 0d       	add	r24, r14
    1ed8:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1eda:	ed 91       	ld	r30, X+
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	ef 5e       	subi	r30, 0xEF	; 239
    1ee0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee2:	24 91       	lpm	r18, Z
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	21 93       	st	Z+, r18
    1ee8:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1eea:	a8 15       	cp	r26, r8
    1eec:	b9 05       	cpc	r27, r9
    1eee:	a9 f7       	brne	.-22     	; 0x1eda <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1ef0:	f4 e0       	ldi	r31, 0x04	; 4
    1ef2:	ef 0e       	add	r14, r31
    1ef4:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	e3 cf       	rjmp	.-58     	; 0x1ec2 <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1efc:	01 15       	cp	r16, r1
    1efe:	11 05       	cpc	r17, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1f02:	3c c0       	rjmp	.+120    	; 0x1f7c <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1f04:	be 01       	movw	r22, r28
    1f06:	6b 5f       	subi	r22, 0xFB	; 251
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	fb 01       	movw	r30, r22
    1f0c:	e0 0f       	add	r30, r16
    1f0e:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1f10:	cf 01       	movw	r24, r30
    1f12:	86 1b       	sub	r24, r22
    1f14:	97 0b       	sbc	r25, r23
    1f16:	03 97       	sbiw	r24, 0x03	; 3
    1f18:	14 f4       	brge	.+4      	; 0x1f1e <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1f1a:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1f1c:	f9 cf       	rjmp	.-14     	; 0x1f10 <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	5c 01       	movw	r10, r24
    1f24:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_Z8a3_to_a4PhS_>
    1f28:	c6 01       	movw	r24, r12
    1f2a:	8e 0d       	add	r24, r14
    1f2c:	9f 1d       	adc	r25, r15
    1f2e:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1f30:	ed 91       	ld	r30, X+
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	ef 5e       	subi	r30, 0xEF	; 239
    1f36:	fb 4f       	sbci	r31, 0xFB	; 251
    1f38:	24 91       	lpm	r18, Z
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	21 93       	st	Z+, r18
    1f3e:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1f40:	9d 01       	movw	r18, r26
    1f42:	2a 19       	sub	r18, r10
    1f44:	3b 09       	sbc	r19, r11
    1f46:	02 17       	cp	r16, r18
    1f48:	13 07       	cpc	r17, r19
    1f4a:	94 f7       	brge	.-28     	; 0x1f30 <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1f4c:	ff ef       	ldi	r31, 0xFF	; 255
    1f4e:	ef 1a       	sub	r14, r31
    1f50:	ff 0a       	sbc	r15, r31
    1f52:	e0 0e       	add	r14, r16
    1f54:	f1 1e       	adc	r15, r17
    1f56:	f6 01       	movw	r30, r12
    1f58:	ee 0d       	add	r30, r14
    1f5a:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f5c:	0c 19       	sub	r16, r12
    1f5e:	1d 09       	sbc	r17, r13
    1f60:	0e 19       	sub	r16, r14
    1f62:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1f64:	8d e3       	ldi	r24, 0x3D	; 61
    1f66:	7f 01       	movw	r14, r30
    1f68:	ec 18       	sub	r14, r12
    1f6a:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f6c:	98 01       	movw	r18, r16
    1f6e:	2e 0f       	add	r18, r30
    1f70:	3f 1f       	adc	r19, r31
    1f72:	23 30       	cpi	r18, 0x03	; 3
    1f74:	31 05       	cpc	r19, r1
    1f76:	14 f4       	brge	.+4      	; 0x1f7c <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1f78:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f7a:	f5 cf       	rjmp	.-22     	; 0x1f66 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1f7c:	f6 01       	movw	r30, r12
    1f7e:	ee 0d       	add	r30, r14
    1f80:	ff 1d       	adc	r31, r15
    1f82:	10 82       	st	Z, r1
	
	return encLen;
}
    1f84:	c7 01       	movw	r24, r14
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	27 96       	adiw	r28, 0x07	; 7
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	ff 90       	pop	r15
    1f9e:	ef 90       	pop	r14
    1fa0:	df 90       	pop	r13
    1fa2:	cf 90       	pop	r12
    1fa4:	bf 90       	pop	r11
    1fa6:	af 90       	pop	r10
    1fa8:	9f 90       	pop	r9
    1faa:	8f 90       	pop	r8
    1fac:	7f 90       	pop	r7
    1fae:	6f 90       	pop	r6
    1fb0:	08 95       	ret

00001fb2 <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	85 e0       	ldi	r24, 0x05	; 5
    1fb6:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <pinMode>
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	85 e0       	ldi	r24, 0x05	; 5
    1fbe:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
    1fc2:	68 eb       	ldi	r22, 0xB8	; 184
    1fc4:	7b e0       	ldi	r23, 0x0B	; 11
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	8d e0       	ldi	r24, 0x0D	; 13
    1fd2:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <pinMode>
    1fd6:	26 e0       	ldi	r18, 0x06	; 6
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	55 e2       	ldi	r21, 0x25	; 37
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	80 ea       	ldi	r24, 0xA0	; 160
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	0e 94 5f 19 	call	0x32be	; 0x32be <_ZN14HardwareSerial5beginEmh>
    1fe8:	6b ea       	ldi	r22, 0xAB	; 171
    1fea:	76 e0       	ldi	r23, 0x06	; 6
    1fec:	80 ea       	ldi	r24, 0xA0	; 160
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ff4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    1ff8:	84 60       	ori	r24, 0x04	; 4
    1ffa:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_behaviour>
    1ffe:	08 95       	ret

00002000 <_Z21ensureFonaInitialisedb>:
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	2c 97       	sbiw	r28, 0x0c	; 12
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	18 2f       	mov	r17, r24
    201a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0x9>
    201e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xa>
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__initState+0xa>
    2028:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__initState+0x9>
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__initState+0x2>
    2032:	8b eb       	ldi	r24, 0xBB	; 187
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__initState+0x1>
    203a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__initState>
    203e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <__initState+0x3>
    2042:	81 11       	cpse	r24, r1
    2044:	34 c0       	rjmp	.+104    	; 0x20ae <_Z21ensureFonaInitialisedb+0xae>
    2046:	66 e9       	ldi	r22, 0x96	; 150
    2048:	76 e0       	ldi	r23, 0x06	; 6
    204a:	80 ea       	ldi	r24, 0xA0	; 160
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2052:	42 e0       	ldi	r20, 0x02	; 2
    2054:	63 e0       	ldi	r22, 0x03	; 3
    2056:	8b eb       	ldi	r24, 0xBB	; 187
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN13Adafruit_FONA5beginEhh>
    205e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__initState+0x3>
    2062:	80 eb       	ldi	r24, 0xB0	; 176
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN12RmMemManager11getModuleIdEv>
    206a:	08 2f       	mov	r16, r24
    206c:	6b e3       	ldi	r22, 0x3B	; 59
    206e:	71 e0       	ldi	r23, 0x01	; 1
    2070:	ce 01       	movw	r24, r28
    2072:	07 96       	adiw	r24, 0x07	; 7
    2074:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN6StringC1EPKc>
    2078:	60 2f       	mov	r22, r16
    207a:	ce 01       	movw	r24, r28
    207c:	07 96       	adiw	r24, 0x07	; 7
    207e:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <_ZN6String6concatEh>
    2082:	be 01       	movw	r22, r28
    2084:	69 5f       	subi	r22, 0xF9	; 249
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	ce 01       	movw	r24, r28
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <_ZN6StringC1ERKS_>
    2090:	be 01       	movw	r22, r28
    2092:	6f 5f       	subi	r22, 0xFF	; 255
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	8b eb       	ldi	r24, 0xBB	; 187
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN13Adafruit_FONA12setUserAgentE6String>
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <_ZN6StringD1Ev>
    20a6:	ce 01       	movw	r24, r28
    20a8:	07 96       	adiw	r24, 0x07	; 7
    20aa:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <_ZN6StringD1Ev>
    20ae:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <__initState+0x3>
    20b2:	83 50       	subi	r24, 0x03	; 3
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	b0 f4       	brcc	.+44     	; 0x20e4 <_Z21ensureFonaInitialisedb+0xe4>
    20b8:	6b e7       	ldi	r22, 0x7B	; 123
    20ba:	76 e0       	ldi	r23, 0x06	; 6
    20bc:	80 ea       	ldi	r24, 0xA0	; 160
    20be:	93 e0       	ldi	r25, 0x03	; 3
    20c0:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    20c4:	69 e4       	ldi	r22, 0x49	; 73
    20c6:	71 e0       	ldi	r23, 0x01	; 1
    20c8:	80 ea       	ldi	r24, 0xA0	; 160
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    20d0:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <__initState+0x3>
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	4a e0       	ldi	r20, 0x0A	; 10
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	80 ea       	ldi	r24, 0xA0	; 160
    20dc:	93 e0       	ldi	r25, 0x03	; 3
    20de:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN5Print7printlnEii>
    20e2:	65 c0       	rjmp	.+202    	; 0x21ae <_Z21ensureFonaInitialisedb+0x1ae>
    20e4:	11 23       	and	r17, r17
    20e6:	09 f4       	brne	.+2      	; 0x20ea <_Z21ensureFonaInitialisedb+0xea>
    20e8:	b1 c0       	rjmp	.+354    	; 0x224c <_Z21ensureFonaInitialisedb+0x24c>
    20ea:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__initState+0x4>
    20ee:	81 11       	cpse	r24, r1
    20f0:	49 c0       	rjmp	.+146    	; 0x2184 <_Z21ensureFonaInitialisedb+0x184>
    20f2:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0x9>
    20f6:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xa>
    20fa:	6a e0       	ldi	r22, 0x0A	; 10
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	0e 94 2b 21 	call	0x4256	; 0x4256 <__udivmodhi4>
    2102:	89 2b       	or	r24, r25
    2104:	19 f0       	breq	.+6      	; 0x210c <_Z21ensureFonaInitialisedb+0x10c>
    2106:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__initState+0x2>
    210a:	3c c0       	rjmp	.+120    	; 0x2184 <_Z21ensureFonaInitialisedb+0x184>
    210c:	6e e5       	ldi	r22, 0x5E	; 94
    210e:	76 e0       	ldi	r23, 0x06	; 6
    2110:	80 ea       	ldi	r24, 0xA0	; 160
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	8b eb       	ldi	r24, 0xBB	; 187
    211c:	91 e0       	ldi	r25, 0x01	; 1
    211e:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN13Adafruit_FONA10enableGPRSEb>
    2122:	18 2f       	mov	r17, r24
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	81 0f       	add	r24, r17
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	20 f1       	brcs	.+72     	; 0x2174 <_Z21ensureFonaInitialisedb+0x174>
    212c:	66 e4       	ldi	r22, 0x46	; 70
    212e:	76 e0       	ldi	r23, 0x06	; 6
    2130:	80 ea       	ldi	r24, 0xA0	; 160
    2132:	93 e0       	ldi	r25, 0x03	; 3
    2134:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    2138:	69 e4       	ldi	r22, 0x49	; 73
    213a:	71 e0       	ldi	r23, 0x01	; 1
    213c:	80 ea       	ldi	r24, 0xA0	; 160
    213e:	93 e0       	ldi	r25, 0x03	; 3
    2140:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    2144:	61 2f       	mov	r22, r17
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	4a e0       	ldi	r20, 0x0A	; 10
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	80 ea       	ldi	r24, 0xA0	; 160
    214e:	93 e0       	ldi	r25, 0x03	; 3
    2150:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN5Print7printlnEii>
    2154:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0x9>
    2158:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xa>
    215c:	cc 97       	sbiw	r24, 0x3c	; 60
    215e:	28 f4       	brcc	.+10     	; 0x216a <_Z21ensureFonaInitialisedb+0x16a>
    2160:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__initState+0x2>
    2164:	60 e2       	ldi	r22, 0x20	; 32
    2166:	76 e0       	ldi	r23, 0x06	; 6
    2168:	09 c0       	rjmp	.+18     	; 0x217c <_Z21ensureFonaInitialisedb+0x17c>
    216a:	10 93 a4 01 	sts	0x01A4, r17	; 0x8001a4 <__initState+0x4>
    216e:	6d ef       	ldi	r22, 0xFD	; 253
    2170:	75 e0       	ldi	r23, 0x05	; 5
    2172:	04 c0       	rjmp	.+8      	; 0x217c <_Z21ensureFonaInitialisedb+0x17c>
    2174:	10 93 a4 01 	sts	0x01A4, r17	; 0x8001a4 <__initState+0x4>
    2178:	6d ed       	ldi	r22, 0xDD	; 221
    217a:	75 e0       	ldi	r23, 0x05	; 5
    217c:	80 ea       	ldi	r24, 0xA0	; 160
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2184:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__initState+0x4>
    2188:	81 50       	subi	r24, 0x01	; 1
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	80 f4       	brcc	.+32     	; 0x21ae <_Z21ensureFonaInitialisedb+0x1ae>
    218e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <__initState+0xb>
    2192:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <__initState+0xc>
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <__initState+0xc>
    219c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <__initState+0xb>
    21a0:	85 ea       	ldi	r24, 0xA5	; 165
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    21a8:	88 23       	and	r24, r24
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <_Z21ensureFonaInitialisedb+0x1b8>
    21ac:	4f c0       	rjmp	.+158    	; 0x224c <_Z21ensureFonaInitialisedb+0x24c>
    21ae:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__initState+0x1>
    21b2:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState>
    21b6:	4a c0       	rjmp	.+148    	; 0x224c <_Z21ensureFonaInitialisedb+0x24c>
    21b8:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <__initState+0xb>
    21bc:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <__initState+0xc>
    21c0:	6a e0       	ldi	r22, 0x0A	; 10
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	0e 94 2b 21 	call	0x4256	; 0x4256 <__udivmodhi4>
    21c8:	89 2b       	or	r24, r25
    21ca:	19 f0       	breq	.+6      	; 0x21d2 <_Z21ensureFonaInitialisedb+0x1d2>
    21cc:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__initState+0x2>
    21d0:	3d c0       	rjmp	.+122    	; 0x224c <_Z21ensureFonaInitialisedb+0x24c>
    21d2:	62 ec       	ldi	r22, 0xC2	; 194
    21d4:	75 e0       	ldi	r23, 0x05	; 5
    21d6:	80 ea       	ldi	r24, 0xA0	; 160
    21d8:	93 e0       	ldi	r25, 0x03	; 3
    21da:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    21de:	8b eb       	ldi	r24, 0xBB	; 187
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN13Adafruit_FONA7getRSSIEv>
    21e6:	69 83       	std	Y+1, r22	; 0x01
    21e8:	7a 83       	std	Y+2, r23	; 0x02
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    21fe:	81 11       	cpse	r24, r1
    2200:	13 c0       	rjmp	.+38     	; 0x2228 <_Z21ensureFonaInitialisedb+0x228>
    2202:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <__initState+0xb>
    2206:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <__initState+0xc>
    220a:	8c 32       	cpi	r24, 0x2C	; 44
    220c:	91 40       	sbci	r25, 0x01	; 1
    220e:	48 f4       	brcc	.+18     	; 0x2222 <_Z21ensureFonaInitialisedb+0x222>
    2210:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__initState+0x2>
    2214:	63 e9       	ldi	r22, 0x93	; 147
    2216:	75 e0       	ldi	r23, 0x05	; 5
    2218:	80 ea       	ldi	r24, 0xA0	; 160
    221a:	93 e0       	ldi	r25, 0x03	; 3
    221c:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2220:	15 c0       	rjmp	.+42     	; 0x224c <_Z21ensureFonaInitialisedb+0x24c>
    2222:	6b e5       	ldi	r22, 0x5B	; 91
    2224:	75 e0       	ldi	r23, 0x05	; 5
    2226:	02 c0       	rjmp	.+4      	; 0x222c <_Z21ensureFonaInitialisedb+0x22c>
    2228:	65 e3       	ldi	r22, 0x35	; 53
    222a:	75 e0       	ldi	r23, 0x05	; 5
    222c:	80 ea       	ldi	r24, 0xA0	; 160
    222e:	93 e0       	ldi	r25, 0x03	; 3
    2230:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	ab 81       	ldd	r26, Y+3	; 0x03
    223a:	bc 81       	ldd	r27, Y+4	; 0x04
    223c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__initState+0x5>
    2240:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <__initState+0x6>
    2244:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <__initState+0x7>
    2248:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <__initState+0x8>
    224c:	80 ea       	ldi	r24, 0xA0	; 160
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	2c 96       	adiw	r28, 0x0c	; 12
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	08 95       	ret

00002266 <_Z15switchOffSystemv>:
    2266:	6b e4       	ldi	r22, 0x4B	; 75
    2268:	71 e0       	ldi	r23, 0x01	; 1
    226a:	80 ea       	ldi	r24, 0xA0	; 160
    226c:	93 e0       	ldi	r25, 0x03	; 3
    226e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	85 e0       	ldi	r24, 0x05	; 5
    2276:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
    227a:	68 eb       	ldi	r22, 0xB8	; 184
    227c:	7b e0       	ldi	r23, 0x0B	; 11
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <delay>

00002286 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	2a 97       	sbiw	r28, 0x0a	; 10
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    229a:	62 e2       	ldi	r22, 0x22	; 34
    229c:	75 e0       	ldi	r23, 0x05	; 5
    229e:	80 ea       	ldi	r24, 0xA0	; 160
    22a0:	93 e0       	ldi	r25, 0x03	; 3
    22a2:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	1b 82       	std	Y+3, r1	; 0x03
    22ac:	1a 82       	std	Y+2, r1	; 0x02
    22ae:	1d 82       	std	Y+5, r1	; 0x05
    22b0:	1c 82       	std	Y+4, r1	; 0x04
    22b2:	1f 82       	std	Y+7, r1	; 0x07
    22b4:	1e 82       	std	Y+6, r1	; 0x06
    22b6:	19 86       	std	Y+9, r1	; 0x09
    22b8:	18 86       	std	Y+8, r1	; 0x08
    22ba:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    22bc:	be 01       	movw	r22, r28
    22be:	6f 5f       	subi	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	8e ea       	ldi	r24, 0xAE	; 174
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	2a 96       	adiw	r28, 0x0a	; 10
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <_Z17createEncodedDataPcPhhP14DailyCycleData>:

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
    22de:	5f 92       	push	r5
    22e0:	6f 92       	push	r6
    22e2:	7f 92       	push	r7
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	2d 97       	sbiw	r28, 0x0d	; 13
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	4c 01       	movw	r8, r24
    230e:	5b 01       	movw	r10, r22
    2310:	54 2e       	mov	r5, r20
    2312:	69 01       	movw	r12, r18
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
	payload.setRSSI(cycleData->RSSI);
	payload.createEncodedPayload(encodedOutput);
	
	cycleData->BootNo = payload.getBootNumber();
}
    2314:	6d b6       	in	r6, 0x3d	; 61
    2316:	7e b6       	in	r7, 0x3e	; 62
}

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int16_t freeRAM = Helpers::freeMemory();
    2318:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN7Helpers10freeMemoryEv>
    231c:	7c 01       	movw	r14, r24
	int16_t minRAM = (sizeof(SensorData)*maxReadings)
    231e:	05 2d       	mov	r16, r5
    2320:	10 e0       	ldi	r17, 0x00	; 0
					+sizeof(GsmPayload)
					+100; //Buffer

	if (freeRAM < minRAM)
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	52 9e       	mul	r5, r18
    2326:	c0 01       	movw	r24, r0
    2328:	11 24       	eor	r1, r1
    232a:	8f 58       	subi	r24, 0x8F	; 143
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	e8 16       	cp	r14, r24
    2330:	f9 06       	cpc	r15, r25
    2332:	34 f4       	brge	.+12     	; 0x2340 <_Z17createEncodedDataPcPhhP14DailyCycleData+0x62>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    2334:	62 ef       	ldi	r22, 0xF2	; 242
    2336:	74 e0       	ldi	r23, 0x04	; 4
    2338:	80 ea       	ldi	r24, 0xA0	; 160
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    2340:	69 e4       	ldi	r22, 0x49	; 73
    2342:	71 e0       	ldi	r23, 0x01	; 1
    2344:	80 ea       	ldi	r24, 0xA0	; 160
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    234c:	4a e0       	ldi	r20, 0x0A	; 10
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	b7 01       	movw	r22, r14
    2352:	80 ea       	ldi	r24, 0xA0	; 160
    2354:	93 e0       	ldi	r25, 0x03	; 3
    2356:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN5Print7printlnEii>
	
	SensorData sData[maxReadings];
    235a:	2a e0       	ldi	r18, 0x0A	; 10
    235c:	20 9f       	mul	r18, r16
    235e:	c0 01       	movw	r24, r0
    2360:	21 9f       	mul	r18, r17
    2362:	90 0d       	add	r25, r0
    2364:	11 24       	eor	r1, r1
    2366:	ed b7       	in	r30, 0x3d	; 61
    2368:	fe b7       	in	r31, 0x3e	; 62
    236a:	e8 1b       	sub	r30, r24
    236c:	f9 0b       	sbc	r31, r25
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	fe bf       	out	0x3e, r31	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	ed bf       	out	0x3d, r30	; 61
    2378:	2d b7       	in	r18, 0x3d	; 61
    237a:	3e b7       	in	r19, 0x3e	; 62
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	79 01       	movw	r14, r18
    2382:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	01 50       	subi	r16, 0x01	; 1
    2388:	11 09       	sbc	r17, r1
    238a:	60 f0       	brcs	.+24     	; 0x23a4 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xc6>
    238c:	80 83       	st	Z, r24
    238e:	12 82       	std	Z+2, r1	; 0x02
    2390:	11 82       	std	Z+1, r1	; 0x01
    2392:	14 82       	std	Z+4, r1	; 0x04
    2394:	13 82       	std	Z+3, r1	; 0x03
    2396:	16 82       	std	Z+6, r1	; 0x06
    2398:	15 82       	std	Z+5, r1	; 0x05
    239a:	10 86       	std	Z+8, r1	; 0x08
    239c:	17 82       	std	Z+7, r1	; 0x07
    239e:	11 86       	std	Z+9, r1	; 0x09
    23a0:	3a 96       	adiw	r30, 0x0a	; 10
    23a2:	f1 cf       	rjmp	.-30     	; 0x2386 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xa8>
	*outputNumLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    23a4:	45 2d       	mov	r20, r5
    23a6:	b7 01       	movw	r22, r14
    23a8:	80 eb       	ldi	r24, 0xB0	; 176
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	0e 94 c9 13 	call	0x2792	; 0x2792 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    23b0:	f5 01       	movw	r30, r10
    23b2:	80 83       	st	Z, r24
	
	GsmPayload payload;
    23b4:	ce 01       	movw	r24, r28
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    23bc:	67 ee       	ldi	r22, 0xE7	; 231
    23be:	ce 01       	movw	r24, r28
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    23c6:	61 e2       	ldi	r22, 0x21	; 33
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	ce 01       	movw	r24, r28
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
    23d2:	f5 01       	movw	r30, r10
    23d4:	40 81       	ld	r20, Z
    23d6:	b7 01       	movw	r22, r14
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(cycleData->RSSI);
    23e0:	f6 01       	movw	r30, r12
    23e2:	45 81       	ldd	r20, Z+5	; 0x05
    23e4:	56 81       	ldd	r21, Z+6	; 0x06
    23e6:	67 81       	ldd	r22, Z+7	; 0x07
    23e8:	70 85       	ldd	r23, Z+8	; 0x08
    23ea:	ce 01       	movw	r24, r28
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    23f2:	b4 01       	movw	r22, r8
    23f4:	ce 01       	movw	r24, r28
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_ZN10GsmPayload20createEncodedPayloadEPc>
	
	cycleData->BootNo = payload.getBootNumber();
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN10GsmPayload13getBootNumberEv>
    2404:	f6 01       	movw	r30, r12
    2406:	93 83       	std	Z+3, r25	; 0x03
    2408:	82 83       	std	Z+2, r24	; 0x02
}
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	7e be       	out	0x3e, r7	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	6d be       	out	0x3d, r6	; 61
    2414:	2d 96       	adiw	r28, 0x0d	; 13
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	9f 90       	pop	r9
    2436:	8f 90       	pop	r8
    2438:	7f 90       	pop	r7
    243a:	6f 90       	pop	r6
    243c:	5f 90       	pop	r5
    243e:	08 95       	ret

00002440 <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    2440:	2f 92       	push	r2
    2442:	3f 92       	push	r3
    2444:	4f 92       	push	r4
    2446:	5f 92       	push	r5
    2448:	6f 92       	push	r6
    244a:	7f 92       	push	r7
    244c:	8f 92       	push	r8
    244e:	9f 92       	push	r9
    2450:	af 92       	push	r10
    2452:	bf 92       	push	r11
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	a2 97       	sbiw	r28, 0x22	; 34
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
	sendData.ResponseLength = actualResponseLen;
		
	mem.appendDailyEntry(&sendData);
		
	return true;
}
    2474:	2d b6       	in	r2, 0x3d	; 61
    2476:	3e b6       	in	r3, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2478:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_sendDataLoopCount>
    247c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_sendDataLoopCount+0x1>
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <_sendDataLoopCount+0x1>
    2486:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	31 f4       	brne	.+12     	; 0x249a <_Z8sendDatav+0x5a>
		RM_LOGLN(F("Initialising Fona to send data"));
    248e:	63 ed       	ldi	r22, 0xD3	; 211
    2490:	74 e0       	ldi	r23, 0x04	; 4
    2492:	80 ea       	ldi	r24, 0xA0	; 160
    2494:	93 e0       	ldi	r25, 0x03	; 3
    2496:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	INITIALISING_STATE* sendDataFona = ensureFonaInitialised(true);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	0e 94 00 10 	call	0x2000	; 0x2000 <_Z21ensureFonaInitialisedb>
    24a0:	fc 01       	movw	r30, r24
	
	if (!sendDataFona->isComplete) {
    24a2:	22 81       	ldd	r18, Z+2	; 0x02
    24a4:	2a a3       	std	Y+34, r18	; 0x22
    24a6:	21 11       	cpse	r18, r1
    24a8:	07 c0       	rjmp	.+14     	; 0x24b8 <_Z8sendDatav+0x78>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    24aa:	6b eb       	ldi	r22, 0xBB	; 187
    24ac:	74 e0       	ldi	r23, 0x04	; 4
    24ae:	80 ea       	ldi	r24, 0xA0	; 160
    24b0:	93 e0       	ldi	r25, 0x03	; 3
    24b2:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return false; //Still waiting to initialise
    24b6:	b2 c0       	rjmp	.+356    	; 0x261c <_Z8sendDatav+0x1dc>
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	1a 82       	std	Y+2, r1	; 0x02
    24be:	1c 82       	std	Y+4, r1	; 0x04
    24c0:	1b 82       	std	Y+3, r1	; 0x03
    24c2:	1d 82       	std	Y+5, r1	; 0x05
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    24c4:	1e 82       	std	Y+6, r1	; 0x06
    24c6:	1f 82       	std	Y+7, r1	; 0x07
    24c8:	18 86       	std	Y+8, r1	; 0x08
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    24ca:	1c 86       	std	Y+12, r1	; 0x0c
    24cc:	1e 86       	std	Y+14, r1	; 0x0e
    24ce:	1d 86       	std	Y+13, r1	; 0x0d
    24d0:	18 8a       	std	Y+16, r1	; 0x10
    24d2:	1f 86       	std	Y+15, r1	; 0x0f
	}
		
	DailyCycleData sendData;
	sendData.InitStatus = sendDataFona->_fonaStatusInit;
    24d4:	83 81       	ldd	r24, Z+3	; 0x03
    24d6:	8a 87       	std	Y+10, r24	; 0x0a
	sendData.GPRSInitStatus = sendDataFona->_gprsStatusInit;
    24d8:	84 81       	ldd	r24, Z+4	; 0x04
    24da:	8b 87       	std	Y+11, r24	; 0x0b
	sendData.RSSI = sendDataFona->_rssiStatusInit;
    24dc:	85 81       	ldd	r24, Z+5	; 0x05
    24de:	96 81       	ldd	r25, Z+6	; 0x06
    24e0:	a7 81       	ldd	r26, Z+7	; 0x07
    24e2:	b0 85       	ldd	r27, Z+8	; 0x08
    24e4:	8e 83       	std	Y+6, r24	; 0x06
    24e6:	9f 83       	std	Y+7, r25	; 0x07
    24e8:	a8 87       	std	Y+8, r26	; 0x08
    24ea:	b9 87       	std	Y+9, r27	; 0x09
		
	if (sendDataFona->fona == NULL) {
    24ec:	80 80       	ld	r8, Z
    24ee:	91 80       	ldd	r9, Z+1	; 0x01
    24f0:	81 14       	cp	r8, r1
    24f2:	91 04       	cpc	r9, r1
    24f4:	39 f4       	brne	.+14     	; 0x2504 <_Z8sendDatav+0xc4>
		
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    24f6:	68 ea       	ldi	r22, 0xA8	; 168
    24f8:	74 e0       	ldi	r23, 0x04	; 4
    24fa:	80 ea       	ldi	r24, 0xA0	; 160
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2502:	85 c0       	rjmp	.+266    	; 0x260e <_Z8sendDatav+0x1ce>
	
	Adafruit_FONA* fona = (Adafruit_FONA*)sendDataFona->fona;
	
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t fullEncodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    2504:	84 e1       	ldi	r24, 0x14	; 20
    2506:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
	char encodedData[fullEncodedSz];
    250a:	2d b7       	in	r18, 0x3d	; 61
    250c:	3e b7       	in	r19, 0x3e	; 62
    250e:	28 1b       	sub	r18, r24
    2510:	39 0b       	sbc	r19, r25
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	3e bf       	out	0x3e, r19	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	2d bf       	out	0x3d, r18	; 61
    251c:	8d b7       	in	r24, 0x3d	; 61
    251e:	9e b7       	in	r25, 0x3e	; 62
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	3c 01       	movw	r6, r24
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	uint8_t numReadingsLoaded;
	createEncodedData(encodedData, &numReadingsLoaded, GPRS_MAX_READINGS_FOR_SEND, &sendData);
    2524:	9e 01       	movw	r18, r28
    2526:	2f 5f       	subi	r18, 0xFF	; 255
    2528:	3f 4f       	sbci	r19, 0xFF	; 255
    252a:	44 e1       	ldi	r20, 0x14	; 20
    252c:	be 01       	movw	r22, r28
    252e:	6f 5d       	subi	r22, 0xDF	; 223
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	0e 94 6f 11 	call	0x22de	; 0x22de <_Z17createEncodedDataPcPhhP14DailyCycleData>
	sendData.NoOfReadings = numReadingsLoaded;
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	8d 83       	std	Y+5, r24	; 0x05
	
	uint16_t actualEncodedSz = GsmPayload::getEncodedPayloadSize_S(numReadingsLoaded);
    253a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    253e:	2c 01       	movw	r4, r24

	RM_LOGLN(F("Encoded data created and ready for send:"));
    2540:	6f e7       	ldi	r22, 0x7F	; 127
    2542:	74 e0       	ldi	r23, 0x04	; 4
    2544:	80 ea       	ldi	r24, 0xA0	; 160
    2546:	93 e0       	ldi	r25, 0x03	; 3
    2548:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    254c:	b3 01       	movw	r22, r6
    254e:	80 ea       	ldi	r24, 0xA0	; 160
    2550:	93 e0       	ldi	r25, 0x03	; 3
    2552:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN5Print7printlnEPKc>
	
	uint8_t maxResponseSz = 10;
	char response[maxResponseSz] = {0};
    2556:	19 8a       	std	Y+17, r1	; 0x11
    2558:	1a 8a       	std	Y+18, r1	; 0x12
    255a:	1b 8a       	std	Y+19, r1	; 0x13
    255c:	1c 8a       	std	Y+20, r1	; 0x14
    255e:	1d 8a       	std	Y+21, r1	; 0x15
    2560:	1e 8a       	std	Y+22, r1	; 0x16
    2562:	1f 8a       	std	Y+23, r1	; 0x17
    2564:	18 8e       	std	Y+24, r1	; 0x18
    2566:	19 8e       	std	Y+25, r1	; 0x19
    2568:	1a 8e       	std	Y+26, r1	; 0x1a
	uint16_t statuscode=0;
    256a:	18 a2       	std	Y+32, r1	; 0x20
    256c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t actualResponseLen=0;
    256e:	1e 8e       	std	Y+30, r1	; 0x1e
    2570:	1d 8e       	std	Y+29, r1	; 0x1d
	FONA_STATUS_GPRS_SEND status =  fona->sendDataOverGprs(
		(uint8_t*)encodedData, actualEncodedSz, 
		response, maxResponseSz, &actualResponseLen, &statuscode);
    2572:	5e 01       	movw	r10, r28
    2574:	91 e1       	ldi	r25, 0x11	; 17
    2576:	a9 0e       	add	r10, r25
    2578:	b1 1c       	adc	r11, r1
    257a:	9e 01       	movw	r18, r28
    257c:	21 5e       	subi	r18, 0xE1	; 225
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	69 01       	movw	r12, r18
    2582:	ce 01       	movw	r24, r28
    2584:	4d 96       	adiw	r24, 0x1d	; 29
    2586:	7c 01       	movw	r14, r24
    2588:	0a e0       	ldi	r16, 0x0A	; 10
    258a:	10 e0       	ldi	r17, 0x00	; 0
    258c:	95 01       	movw	r18, r10
    258e:	a2 01       	movw	r20, r4
    2590:	b3 01       	movw	r22, r6
    2592:	c4 01       	movw	r24, r8
    2594:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_>
    2598:	78 2e       	mov	r7, r24

	RM_LOG(F("Response from send: "));
    259a:	6a e6       	ldi	r22, 0x6A	; 106
    259c:	74 e0       	ldi	r23, 0x04	; 4
    259e:	80 ea       	ldi	r24, 0xA0	; 160
    25a0:	93 e0       	ldi	r25, 0x03	; 3
    25a2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(response);
    25a6:	b5 01       	movw	r22, r10
    25a8:	80 ea       	ldi	r24, 0xA0	; 160
    25aa:	93 e0       	ldi	r25, 0x03	; 3
    25ac:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
	RM_LOG2(F(", with length"), strlen(response));
    25b0:	6c e5       	ldi	r22, 0x5C	; 92
    25b2:	74 e0       	ldi	r23, 0x04	; 4
    25b4:	80 ea       	ldi	r24, 0xA0	; 160
    25b6:	93 e0       	ldi	r25, 0x03	; 3
    25b8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    25bc:	69 e4       	ldi	r22, 0x49	; 73
    25be:	71 e0       	ldi	r23, 0x01	; 1
    25c0:	80 ea       	ldi	r24, 0xA0	; 160
    25c2:	93 e0       	ldi	r25, 0x03	; 3
    25c4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    25c8:	f5 01       	movw	r30, r10
    25ca:	01 90       	ld	r0, Z+
    25cc:	00 20       	and	r0, r0
    25ce:	e9 f7       	brne	.-6      	; 0x25ca <_Z8sendDatav+0x18a>
    25d0:	31 97       	sbiw	r30, 0x01	; 1
    25d2:	bf 01       	movw	r22, r30
    25d4:	6a 19       	sub	r22, r10
    25d6:	7b 09       	sbc	r23, r11
    25d8:	4a e0       	ldi	r20, 0x0A	; 10
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	80 ea       	ldi	r24, 0xA0	; 160
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	0e 94 8e 1b 	call	0x371c	; 0x371c <_ZN5Print7printlnEji>

	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    25e4:	be 01       	movw	r22, r28
    25e6:	65 5e       	subi	r22, 0xE5	; 229
    25e8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ea:	c4 01       	movw	r24, r8
    25ec:	0e 94 df 0c 	call	0x19be	; 0x19be <_ZN13Adafruit_FONA14getBattPercentEPj>
    25f0:	81 11       	cpse	r24, r1
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <_Z8sendDatav+0x1b8>
		sendData.BattPct = -1;
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <_Z8sendDatav+0x1ba>
	else
		sendData.BattPct = battPct;
    25f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fa:	8a 83       	std	Y+2, r24	; 0x02
	
	sendData.SendStatus = status;
    25fc:	7c 86       	std	Y+12, r7	; 0x0c
	sendData.ResponseHTMLCode = statuscode;
    25fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2600:	98 a1       	ldd	r25, Y+32	; 0x20
    2602:	9e 87       	std	Y+14, r25	; 0x0e
    2604:	8d 87       	std	Y+13, r24	; 0x0d
	sendData.ResponseLength = actualResponseLen;
    2606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260a:	98 8b       	std	Y+16, r25	; 0x10
    260c:	8f 87       	std	Y+15, r24	; 0x0f
		
	mem.appendDailyEntry(&sendData);
    260e:	be 01       	movw	r22, r28
    2610:	6f 5f       	subi	r22, 0xFF	; 255
    2612:	7f 4f       	sbci	r23, 0xFF	; 255
    2614:	80 eb       	ldi	r24, 0xB0	; 176
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
	return true;
}
    261c:	8a a1       	ldd	r24, Y+34	; 0x22
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	3e be       	out	0x3e, r3	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	2d be       	out	0x3d, r2	; 61
    2628:	a2 96       	adiw	r28, 0x22	; 34
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	bf 90       	pop	r11
    2646:	af 90       	pop	r10
    2648:	9f 90       	pop	r9
    264a:	8f 90       	pop	r8
    264c:	7f 90       	pop	r7
    264e:	6f 90       	pop	r6
    2650:	5f 90       	pop	r5
    2652:	4f 90       	pop	r4
    2654:	3f 90       	pop	r3
    2656:	2f 90       	pop	r2
    2658:	08 95       	ret

0000265a <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    265a:	68 ee       	ldi	r22, 0xE8	; 232
    265c:	73 e0       	ldi	r23, 0x03	; 3
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 94 1c 	call	0x3928	; 0x3928 <delay>
	++_timerCounter;
    2666:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
    266a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x1>
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x1>
    2674:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    2678:	62 e5       	ldi	r22, 0x52	; 82
    267a:	74 e0       	ldi	r23, 0x04	; 4
    267c:	80 ea       	ldi	r24, 0xA0	; 160
    267e:	93 e0       	ldi	r25, 0x03	; 3
    2680:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    2684:	69 e4       	ldi	r22, 0x49	; 73
    2686:	71 e0       	ldi	r23, 0x01	; 1
    2688:	80 ea       	ldi	r24, 0xA0	; 160
    268a:	93 e0       	ldi	r25, 0x03	; 3
    268c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN5Print5printEPKc>
    2690:	4a e0       	ldi	r20, 0x0A	; 10
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <_behaviour>
    2698:	80 ea       	ldi	r24, 0xA0	; 160
    269a:	93 e0       	ldi	r25, 0x03	; 3
    269c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    26a0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    26a4:	80 ff       	sbrs	r24, 0
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <loop+0x60>
		
		if (takeReadings())
    26a8:	0e 94 43 11 	call	0x2286	; 0x2286 <_Z12takeReadingsv>
    26ac:	88 23       	and	r24, r24
    26ae:	29 f0       	breq	.+10     	; 0x26ba <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    26b0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    26b4:	8e 7f       	andi	r24, 0xFE	; 254
    26b6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    26ba:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    26be:	81 ff       	sbrs	r24, 1
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <loop+0x7a>
		
		if (sendData())
    26c2:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z8sendDatav>
    26c6:	88 23       	and	r24, r24
    26c8:	29 f0       	breq	.+10     	; 0x26d4 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    26ca:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    26ce:	8d 7f       	andi	r24, 0xFD	; 253
    26d0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    26d4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    26d8:	82 ff       	sbrs	r24, 2
    26da:	17 c0       	rjmp	.+46     	; 0x270a <loop+0xb0>
	
		if (_timerCounter == 1)
    26dc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
    26e0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x1>
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	31 f4       	brne	.+12     	; 0x26f4 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    26e8:	60 eb       	ldi	r22, 0xB0	; 176
    26ea:	71 e0       	ldi	r23, 0x01	; 1
    26ec:	8b eb       	ldi	r24, 0xBB	; 187
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    26f4:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z8sendDatav>
    26f8:	88 23       	and	r24, r24
    26fa:	39 f0       	breq	.+14     	; 0x270a <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    26fc:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    2700:	8b 7f       	andi	r24, 0xFB	; 251
    2702:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    2706:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    270a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_behaviour>
    270e:	81 11       	cpse	r24, r1
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <loop+0xbc>
		
		switchOffSystem();
    2712:	0c 94 33 11 	jmp	0x2266	; 0x2266 <_Z15switchOffSystemv>
    2716:	08 95       	ret

00002718 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	64 e0       	ldi	r22, 0x04	; 4
    271c:	8b eb       	ldi	r24, 0xBB	; 187
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	80 eb       	ldi	r24, 0xB0	; 176
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	8e ea       	ldi	r24, 0xAE	; 174
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN13SensorManagerC1Eb>
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2738:	e0 ea       	ldi	r30, 0xA0	; 160
    273a:	f1 e0       	ldi	r31, 0x01	; 1
    273c:	12 82       	std	Z+2, r1	; 0x02
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    273e:	15 82       	std	Z+5, r1	; 0x05
    2740:	16 82       	std	Z+6, r1	; 0x06
    2742:	17 82       	std	Z+7, r1	; 0x07
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2744:	12 86       	std	Z+10, r1	; 0x0a
    2746:	11 86       	std	Z+9, r1	; 0x09
    2748:	14 86       	std	Z+12, r1	; 0x0c
    274a:	13 86       	std	Z+11, r1	; 0x0b
    274c:	08 95       	ret

0000274e <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    274e:	8f e2       	ldi	r24, 0x2F	; 47
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <__fona+0x1>
    2756:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <__fona>
    275a:	80 ed       	ldi	r24, 0xD0	; 208
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <_ZN6StringD1Ev>

00002762 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    2762:	dc 01       	movw	r26, r24
    2764:	ed 91       	ld	r30, X+
    2766:	fc 91       	ld	r31, X
    2768:	01 90       	ld	r0, Z+
    276a:	f0 81       	ld	r31, Z
    276c:	e0 2d       	mov	r30, r0
    276e:	09 94       	ijmp

00002770 <_ZN12RmMemManagerC1Eb>:
    2770:	fc 01       	movw	r30, r24
    2772:	14 82       	std	Z+4, r1	; 0x04
    2774:	15 82       	std	Z+5, r1	; 0x05
    2776:	16 82       	std	Z+6, r1	; 0x06
    2778:	17 82       	std	Z+7, r1	; 0x07
    277a:	80 e8       	ldi	r24, 0x80	; 128
    277c:	80 87       	std	Z+8, r24	; 0x08
    277e:	81 87       	std	Z+9, r24	; 0x09
    2780:	12 86       	std	Z+10, r1	; 0x0a
    2782:	63 83       	std	Z+3, r22	; 0x03
    2784:	61 11       	cpse	r22, r1
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <_ZN12RmMemManagerC1Eb+0x20>
    2788:	88 e4       	ldi	r24, 0x48	; 72
    278a:	93 e0       	ldi	r25, 0x03	; 3
    278c:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <_ZN7TwoWire5beginEv>
    2790:	08 95       	ret

00002792 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    2792:	fc 01       	movw	r30, r24
    2794:	cb 01       	movw	r24, r22
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	61 15       	cp	r22, r1
    279c:	71 05       	cpc	r23, r1
    279e:	39 f0       	breq	.+14     	; 0x27ae <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    27a0:	42 81       	ldd	r20, Z+2	; 0x02
    27a2:	2a e0       	ldi	r18, 0x0A	; 10
    27a4:	42 9f       	mul	r20, r18
    27a6:	a0 01       	movw	r20, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	0e 94 cb 23 	call	0x4796	; 0x4796 <memcpy>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	08 95       	ret

000027b2 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
    27b2:	08 95       	ret

000027b4 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	eb 01       	movw	r28, r22
    27c2:	7b 01       	movw	r14, r22
    27c4:	e4 0e       	add	r14, r20
    27c6:	f1 1c       	adc	r15, r1
    27c8:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    27ca:	ce 15       	cp	r28, r14
    27cc:	df 05       	cpc	r29, r15
    27ce:	71 f1       	breq	.+92     	; 0x282c <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    27d0:	60 e5       	ldi	r22, 0x50	; 80
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	88 e4       	ldi	r24, 0x48	; 72
    27d6:	93 e0       	ldi	r25, 0x03	; 3
    27d8:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    27dc:	61 2f       	mov	r22, r17
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	88 e4       	ldi	r24, 0x48	; 72
    27e2:	93 e0       	ldi	r25, 0x03	; 3
    27e4:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    27e8:	b8 01       	movw	r22, r16
    27ea:	77 27       	eor	r23, r23
    27ec:	88 e4       	ldi	r24, 0x48	; 72
    27ee:	93 e0       	ldi	r25, 0x03	; 3
    27f0:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    27f4:	88 e4       	ldi	r24, 0x48	; 72
    27f6:	93 e0       	ldi	r25, 0x03	; 3
    27f8:	0e 94 33 18 	call	0x3066	; 0x3066 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	60 e5       	ldi	r22, 0x50	; 80
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	88 e4       	ldi	r24, 0x48	; 72
    2806:	93 e0       	ldi	r25, 0x03	; 3
    2808:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    280c:	88 e4       	ldi	r24, 0x48	; 72
    280e:	93 e0       	ldi	r25, 0x03	; 3
    2810:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZN7TwoWire9availableEv>
    2814:	89 2b       	or	r24, r25
    2816:	29 f0       	breq	.+10     	; 0x2822 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    2818:	88 e4       	ldi	r24, 0x48	; 72
    281a:	93 e0       	ldi	r25, 0x03	; 3
    281c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    2822:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    2824:	89 93       	st	Y+, r24
    2826:	0f 5f       	subi	r16, 0xFF	; 255
    2828:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    282a:	cf cf       	rjmp	.-98     	; 0x27ca <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	08 95       	ret

0000283a <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	1f 92       	push	r1
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	be 01       	movw	r22, r28
    284a:	6f 5f       	subi	r22, 0xFF	; 255
    284c:	7f 4f       	sbci	r23, 0xFF	; 255
    284e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_Z12internalReadjPhh>
	return value;
}
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	0f 90       	pop	r0
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	0c 94 1d 14 	jmp	0x283a	; 0x283a <_ZN12RmMemManager18getUCharFromMemoryEj>

00002864 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    2864:	fc 01       	movw	r30, r24
    2866:	60 83       	st	Z, r22
    2868:	08 95       	ret

0000286a <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    286a:	fc 01       	movw	r30, r24
    286c:	80 81       	ld	r24, Z
    286e:	81 11       	cpse	r24, r1
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    2872:	86 2f       	mov	r24, r22
    2874:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    2878:	85 e0       	ldi	r24, 0x05	; 5
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	08 95       	ret

0000287e <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    287e:	fc 01       	movw	r30, r24
    2880:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    2882:	81 81       	ldd	r24, Z+1	; 0x01
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	12 96       	adiw	r26, 0x02	; 2
    288c:	9c 93       	st	X, r25
    288e:	8e 93       	st	-X, r24
    2890:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    2892:	81 81       	ldd	r24, Z+1	; 0x01
    2894:	2a e0       	ldi	r18, 0x0A	; 10
    2896:	82 9f       	mul	r24, r18
    2898:	c0 01       	movw	r24, r0
    289a:	11 24       	eor	r1, r1
    289c:	14 96       	adiw	r26, 0x04	; 4
    289e:	9c 93       	st	X, r25
    28a0:	8e 93       	st	-X, r24
    28a2:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    28a4:	81 81       	ldd	r24, Z+1	; 0x01
    28a6:	67 e0       	ldi	r22, 0x07	; 7
    28a8:	0e 94 1f 21 	call	0x423e	; 0x423e <__udivmodqi4>
    28ac:	89 2f       	mov	r24, r25
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	16 96       	adiw	r26, 0x06	; 6
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
    28b6:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    28b8:	81 81       	ldd	r24, Z+1	; 0x01
    28ba:	24 e6       	ldi	r18, 0x64	; 100
    28bc:	82 9f       	mul	r24, r18
    28be:	c0 01       	movw	r24, r0
    28c0:	11 24       	eor	r1, r1
    28c2:	18 96       	adiw	r26, 0x08	; 8
    28c4:	9c 93       	st	X, r25
    28c6:	8e 93       	st	-X, r24
    28c8:	17 97       	sbiw	r26, 0x07	; 7
    28ca:	08 95       	ret

000028cc <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	8c 01       	movw	r16, r24
    28e2:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    28e4:	fc 01       	movw	r30, r24
    28e6:	80 81       	ld	r24, Z
    28e8:	88 23       	and	r24, r24
    28ea:	21 f0       	breq	.+8      	; 0x28f4 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    28ec:	c8 01       	movw	r24, r16
    28ee:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN13SensorManager11getMockDataEP10SensorData>
    28f2:	1b c0       	rjmp	.+54     	; 0x292a <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    28f4:	6e e0       	ldi	r22, 0x0E	; 14
    28f6:	c8 01       	movw	r24, r16
    28f8:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN13SensorManager16takeSampleAnalogEh>
    28fc:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    28fe:	6f e0       	ldi	r22, 0x0F	; 15
    2900:	c8 01       	movw	r24, r16
    2902:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN13SensorManager16takeSampleAnalogEh>
    2906:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2908:	61 e1       	ldi	r22, 0x11	; 17
    290a:	c8 01       	movw	r24, r16
    290c:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN13SensorManager16takeSampleAnalogEh>
    2910:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    2912:	60 e1       	ldi	r22, 0x10	; 16
    2914:	c8 01       	movw	r24, r16
    2916:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    291a:	ba 82       	std	Y+2, r11	; 0x02
    291c:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    291e:	dc 82       	std	Y+4, r13	; 0x04
    2920:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    2922:	fe 82       	std	Y+6, r15	; 0x06
    2924:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    292a:	ce 01       	movw	r24, r28
	
	//return ret;
}
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	cf 90       	pop	r12
    293c:	bf 90       	pop	r11
    293e:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    2940:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_ZN7Helpers15printSensorDataEP10SensorData>

00002944 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2944:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <twi_state>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_sendStop>
    294e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_inRepStart>
    2952:	61 e0       	ldi	r22, 0x01	; 1
    2954:	82 e1       	ldi	r24, 0x12	; 18
    2956:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	83 e1       	ldi	r24, 0x13	; 19
    295e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
    2962:	e9 eb       	ldi	r30, 0xB9	; 185
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8e 7f       	andi	r24, 0xFE	; 254
    296a:	80 83       	st	Z, r24
    296c:	80 81       	ld	r24, Z
    296e:	8d 7f       	andi	r24, 0xFD	; 253
    2970:	80 83       	st	Z, r24
    2972:	88 e4       	ldi	r24, 0x48	; 72
    2974:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2978:	85 e4       	ldi	r24, 0x45	; 69
    297a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    297e:	08 95       	ret

00002980 <twi_readFrom>:
    2980:	41 32       	cpi	r20, 0x21	; 33
    2982:	08 f0       	brcs	.+2      	; 0x2986 <twi_readFrom+0x6>
    2984:	43 c0       	rjmp	.+134    	; 0x2a0c <twi_readFrom+0x8c>
    2986:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <twi_state>
    298a:	91 11       	cpse	r25, r1
    298c:	fc cf       	rjmp	.-8      	; 0x2986 <twi_readFrom+0x6>
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <twi_state>
    2994:	20 93 45 03 	sts	0x0345, r18	; 0x800345 <twi_sendStop>
    2998:	2f ef       	ldi	r18, 0xFF	; 255
    299a:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_error>
    299e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_masterBufferIndex>
    29a2:	24 0f       	add	r18, r20
    29a4:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <twi_masterBufferLength>
    29a8:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <twi_slarw>
    29ac:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <twi_slarw>
    29b0:	88 0f       	add	r24, r24
    29b2:	89 2b       	or	r24, r25
    29b4:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_slarw>
    29b8:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_inRepStart>
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	61 f4       	brne	.+24     	; 0x29d8 <twi_readFrom+0x58>
    29c0:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_inRepStart>
    29c4:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_slarw>
    29c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    29cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    29d0:	83 fd       	sbrc	r24, 3
    29d2:	f8 cf       	rjmp	.-16     	; 0x29c4 <twi_readFrom+0x44>
    29d4:	85 ec       	ldi	r24, 0xC5	; 197
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <twi_readFrom+0x5a>
    29d8:	85 ee       	ldi	r24, 0xE5	; 229
    29da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    29de:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <twi_state>
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	e1 f3       	breq	.-8      	; 0x29de <twi_readFrom+0x5e>
    29e6:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_masterBufferIndex>
    29ea:	84 17       	cp	r24, r20
    29ec:	10 f4       	brcc	.+4      	; 0x29f2 <twi_readFrom+0x72>
    29ee:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <twi_masterBufferIndex>
    29f2:	a0 e2       	ldi	r26, 0x20	; 32
    29f4:	b3 e0       	ldi	r27, 0x03	; 3
    29f6:	96 2f       	mov	r25, r22
    29f8:	fb 01       	movw	r30, r22
    29fa:	8e 2f       	mov	r24, r30
    29fc:	89 1b       	sub	r24, r25
    29fe:	84 17       	cp	r24, r20
    2a00:	18 f4       	brcc	.+6      	; 0x2a08 <twi_readFrom+0x88>
    2a02:	8d 91       	ld	r24, X+
    2a04:	81 93       	st	Z+, r24
    2a06:	f9 cf       	rjmp	.-14     	; 0x29fa <twi_readFrom+0x7a>
    2a08:	84 2f       	mov	r24, r20
    2a0a:	08 95       	ret
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	08 95       	ret

00002a10 <twi_writeTo>:
    2a10:	0f 93       	push	r16
    2a12:	41 32       	cpi	r20, 0x21	; 33
    2a14:	08 f0       	brcs	.+2      	; 0x2a18 <twi_writeTo+0x8>
    2a16:	4a c0       	rjmp	.+148    	; 0x2aac <twi_writeTo+0x9c>
    2a18:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <twi_state>
    2a1c:	91 11       	cpse	r25, r1
    2a1e:	fc cf       	rjmp	.-8      	; 0x2a18 <twi_writeTo+0x8>
    2a20:	32 e0       	ldi	r19, 0x02	; 2
    2a22:	30 93 47 03 	sts	0x0347, r19	; 0x800347 <twi_state>
    2a26:	00 93 45 03 	sts	0x0345, r16	; 0x800345 <twi_sendStop>
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	30 93 da 02 	sts	0x02DA, r19	; 0x8002da <twi_error>
    2a30:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_masterBufferIndex>
    2a34:	40 93 1e 03 	sts	0x031E, r20	; 0x80031e <twi_masterBufferLength>
    2a38:	56 2f       	mov	r21, r22
    2a3a:	a0 e2       	ldi	r26, 0x20	; 32
    2a3c:	b3 e0       	ldi	r27, 0x03	; 3
    2a3e:	fb 01       	movw	r30, r22
    2a40:	3e 2f       	mov	r19, r30
    2a42:	35 1b       	sub	r19, r21
    2a44:	34 17       	cp	r19, r20
    2a46:	18 f4       	brcc	.+6      	; 0x2a4e <twi_writeTo+0x3e>
    2a48:	31 91       	ld	r19, Z+
    2a4a:	3d 93       	st	X+, r19
    2a4c:	f9 cf       	rjmp	.-14     	; 0x2a40 <twi_writeTo+0x30>
    2a4e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_slarw>
    2a52:	30 91 46 03 	lds	r19, 0x0346	; 0x800346 <twi_slarw>
    2a56:	88 0f       	add	r24, r24
    2a58:	83 2b       	or	r24, r19
    2a5a:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_slarw>
    2a5e:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_inRepStart>
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	61 f4       	brne	.+24     	; 0x2a7e <twi_writeTo+0x6e>
    2a66:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_inRepStart>
    2a6a:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_slarw>
    2a6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a76:	83 fd       	sbrc	r24, 3
    2a78:	f8 cf       	rjmp	.-16     	; 0x2a6a <twi_writeTo+0x5a>
    2a7a:	85 ec       	ldi	r24, 0xC5	; 197
    2a7c:	01 c0       	rjmp	.+2      	; 0x2a80 <twi_writeTo+0x70>
    2a7e:	85 ee       	ldi	r24, 0xE5	; 229
    2a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a84:	22 23       	and	r18, r18
    2a86:	21 f0       	breq	.+8      	; 0x2a90 <twi_writeTo+0x80>
    2a88:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <twi_state>
    2a8c:	82 30       	cpi	r24, 0x02	; 2
    2a8e:	d1 f3       	breq	.-12     	; 0x2a84 <twi_writeTo+0x74>
    2a90:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
    2a94:	8f 3f       	cpi	r24, 0xFF	; 255
    2a96:	79 f0       	breq	.+30     	; 0x2ab6 <twi_writeTo+0xa6>
    2a98:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
    2a9c:	80 32       	cpi	r24, 0x20	; 32
    2a9e:	41 f0       	breq	.+16     	; 0x2ab0 <twi_writeTo+0xa0>
    2aa0:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
    2aa4:	80 33       	cpi	r24, 0x30	; 48
    2aa6:	31 f0       	breq	.+12     	; 0x2ab4 <twi_writeTo+0xa4>
    2aa8:	94 e0       	ldi	r25, 0x04	; 4
    2aaa:	05 c0       	rjmp	.+10     	; 0x2ab6 <twi_writeTo+0xa6>
    2aac:	91 e0       	ldi	r25, 0x01	; 1
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <twi_writeTo+0xa6>
    2ab0:	92 e0       	ldi	r25, 0x02	; 2
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <twi_writeTo+0xa6>
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	89 2f       	mov	r24, r25
    2ab8:	0f 91       	pop	r16
    2aba:	08 95       	ret

00002abc <twi_transmit>:
    2abc:	40 91 fc 02 	lds	r20, 0x02FC	; 0x8002fc <twi_txBufferLength>
    2ac0:	26 2f       	mov	r18, r22
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	24 0f       	add	r18, r20
    2ac6:	31 1d       	adc	r19, r1
    2ac8:	21 32       	cpi	r18, 0x21	; 33
    2aca:	31 05       	cpc	r19, r1
    2acc:	dc f4       	brge	.+54     	; 0x2b04 <twi_transmit+0x48>
    2ace:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <twi_state>
    2ad2:	24 30       	cpi	r18, 0x04	; 4
    2ad4:	c9 f4       	brne	.+50     	; 0x2b08 <twi_transmit+0x4c>
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	86 17       	cp	r24, r22
    2ade:	58 f4       	brcc	.+22     	; 0x2af6 <twi_transmit+0x3a>
    2ae0:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <twi_txBufferLength>
    2ae4:	21 91       	ld	r18, Z+
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	a2 50       	subi	r26, 0x02	; 2
    2aea:	bd 4f       	sbci	r27, 0xFD	; 253
    2aec:	a3 0f       	add	r26, r19
    2aee:	b1 1d       	adc	r27, r1
    2af0:	2c 93       	st	X, r18
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	f3 cf       	rjmp	.-26     	; 0x2adc <twi_transmit+0x20>
    2af6:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_txBufferLength>
    2afa:	68 0f       	add	r22, r24
    2afc:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <twi_txBufferLength>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	08 95       	ret
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	08 95       	ret
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	08 95       	ret

00002b0c <twi_attachSlaveRxEvent>:
    2b0c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_onSlaveReceive+0x1>
    2b10:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_onSlaveReceive>
    2b14:	08 95       	ret

00002b16 <twi_attachSlaveTxEvent>:
    2b16:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <twi_onSlaveTransmit+0x1>
    2b1a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_onSlaveTransmit>
    2b1e:	08 95       	ret

00002b20 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b20:	85 ed       	ldi	r24, 0xD5	; 213
    2b22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2b2a:	84 fd       	sbrc	r24, 4
    2b2c:	fc cf       	rjmp	.-8      	; 0x2b26 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b2e:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <twi_state>
    2b32:	08 95       	ret

00002b34 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b34:	85 ec       	ldi	r24, 0xC5	; 197
    2b36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2b3a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <twi_state>
    2b3e:	08 95       	ret

00002b40 <__vector_24>:
}

ISR(TWI_vect)
{
    2b40:	1f 92       	push	r1
    2b42:	0f 92       	push	r0
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	ef 93       	push	r30
    2b60:	ff 93       	push	r31
  switch(TW_STATUS){
    2b62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2b66:	88 7f       	andi	r24, 0xF8	; 248
    2b68:	80 36       	cpi	r24, 0x60	; 96
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <__vector_24+0x2e>
    2b6c:	9e c0       	rjmp	.+316    	; 0x2caa <__vector_24+0x16a>
    2b6e:	78 f5       	brcc	.+94     	; 0x2bce <__vector_24+0x8e>
    2b70:	88 32       	cpi	r24, 0x28	; 40
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__vector_24+0x36>
    2b74:	5d c0       	rjmp	.+186    	; 0x2c30 <__vector_24+0xf0>
    2b76:	90 f4       	brcc	.+36     	; 0x2b9c <__vector_24+0x5c>
    2b78:	80 31       	cpi	r24, 0x10	; 16
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <__vector_24+0x3e>
    2b7c:	56 c0       	rjmp	.+172    	; 0x2c2a <__vector_24+0xea>
    2b7e:	38 f4       	brcc	.+14     	; 0x2b8e <__vector_24+0x4e>
    2b80:	88 23       	and	r24, r24
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <__vector_24+0x46>
    2b84:	f5 c0       	rjmp	.+490    	; 0x2d70 <__vector_24+0x230>
    2b86:	88 30       	cpi	r24, 0x08	; 8
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <__vector_24+0x4c>
    2b8a:	4f c0       	rjmp	.+158    	; 0x2c2a <__vector_24+0xea>
    2b8c:	f5 c0       	rjmp	.+490    	; 0x2d78 <__vector_24+0x238>
    2b8e:	88 31       	cpi	r24, 0x18	; 24
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <__vector_24+0x54>
    2b92:	4e c0       	rjmp	.+156    	; 0x2c30 <__vector_24+0xf0>
    2b94:	80 32       	cpi	r24, 0x20	; 32
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <__vector_24+0x5a>
    2b98:	5f c0       	rjmp	.+190    	; 0x2c58 <__vector_24+0x118>
    2b9a:	ee c0       	rjmp	.+476    	; 0x2d78 <__vector_24+0x238>
    2b9c:	80 34       	cpi	r24, 0x40	; 64
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <__vector_24+0x62>
    2ba0:	6a c0       	rjmp	.+212    	; 0x2c76 <__vector_24+0x136>
    2ba2:	58 f4       	brcc	.+22     	; 0x2bba <__vector_24+0x7a>
    2ba4:	80 33       	cpi	r24, 0x30	; 48
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <__vector_24+0x6a>
    2ba8:	57 c0       	rjmp	.+174    	; 0x2c58 <__vector_24+0x118>
    2baa:	88 33       	cpi	r24, 0x38	; 56
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <__vector_24+0x70>
    2bae:	e4 c0       	rjmp	.+456    	; 0x2d78 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bb0:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_error>
      twi_releaseBus();
    2bb4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <twi_releaseBus>
      break;
    2bb8:	df c0       	rjmp	.+446    	; 0x2d78 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bba:	80 35       	cpi	r24, 0x50	; 80
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__vector_24+0x80>
    2bbe:	4f c0       	rjmp	.+158    	; 0x2c5e <__vector_24+0x11e>
    2bc0:	88 35       	cpi	r24, 0x58	; 88
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <__vector_24+0x86>
    2bc4:	5d c0       	rjmp	.+186    	; 0x2c80 <__vector_24+0x140>
    2bc6:	88 34       	cpi	r24, 0x48	; 72
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <__vector_24+0x8c>
    2bca:	d6 c0       	rjmp	.+428    	; 0x2d78 <__vector_24+0x238>
    2bcc:	d3 c0       	rjmp	.+422    	; 0x2d74 <__vector_24+0x234>
    2bce:	88 39       	cpi	r24, 0x98	; 152
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <__vector_24+0x94>
    2bd2:	c4 c0       	rjmp	.+392    	; 0x2d5c <__vector_24+0x21c>
    2bd4:	a8 f4       	brcc	.+42     	; 0x2c00 <__vector_24+0xc0>
    2bd6:	88 37       	cpi	r24, 0x78	; 120
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <__vector_24+0x9c>
    2bda:	67 c0       	rjmp	.+206    	; 0x2caa <__vector_24+0x16a>
    2bdc:	38 f4       	brcc	.+14     	; 0x2bec <__vector_24+0xac>
    2bde:	88 36       	cpi	r24, 0x68	; 104
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <__vector_24+0xa4>
    2be2:	63 c0       	rjmp	.+198    	; 0x2caa <__vector_24+0x16a>
    2be4:	80 37       	cpi	r24, 0x70	; 112
    2be6:	09 f4       	brne	.+2      	; 0x2bea <__vector_24+0xaa>
    2be8:	60 c0       	rjmp	.+192    	; 0x2caa <__vector_24+0x16a>
    2bea:	c6 c0       	rjmp	.+396    	; 0x2d78 <__vector_24+0x238>
    2bec:	88 38       	cpi	r24, 0x88	; 136
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <__vector_24+0xb2>
    2bf0:	b5 c0       	rjmp	.+362    	; 0x2d5c <__vector_24+0x21c>
    2bf2:	80 39       	cpi	r24, 0x90	; 144
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <__vector_24+0xb8>
    2bf6:	5f c0       	rjmp	.+190    	; 0x2cb6 <__vector_24+0x176>
    2bf8:	80 38       	cpi	r24, 0x80	; 128
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <__vector_24+0xbe>
    2bfc:	bd c0       	rjmp	.+378    	; 0x2d78 <__vector_24+0x238>
    2bfe:	5b c0       	rjmp	.+182    	; 0x2cb6 <__vector_24+0x176>
    2c00:	80 3b       	cpi	r24, 0xB0	; 176
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <__vector_24+0xc6>
    2c04:	83 c0       	rjmp	.+262    	; 0x2d0c <__vector_24+0x1cc>
    2c06:	38 f4       	brcc	.+14     	; 0x2c16 <__vector_24+0xd6>
    2c08:	80 3a       	cpi	r24, 0xA0	; 160
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <__vector_24+0xce>
    2c0c:	66 c0       	rjmp	.+204    	; 0x2cda <__vector_24+0x19a>
    2c0e:	88 3a       	cpi	r24, 0xA8	; 168
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <__vector_24+0xd4>
    2c12:	7c c0       	rjmp	.+248    	; 0x2d0c <__vector_24+0x1cc>
    2c14:	b1 c0       	rjmp	.+354    	; 0x2d78 <__vector_24+0x238>
    2c16:	80 3c       	cpi	r24, 0xC0	; 192
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <__vector_24+0xdc>
    2c1a:	a4 c0       	rjmp	.+328    	; 0x2d64 <__vector_24+0x224>
    2c1c:	88 3c       	cpi	r24, 0xC8	; 200
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <__vector_24+0xe2>
    2c20:	a1 c0       	rjmp	.+322    	; 0x2d64 <__vector_24+0x224>
    2c22:	88 3b       	cpi	r24, 0xB8	; 184
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <__vector_24+0xe8>
    2c26:	87 c0       	rjmp	.+270    	; 0x2d36 <__vector_24+0x1f6>
    2c28:	a7 c0       	rjmp	.+334    	; 0x2d78 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2c2a:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_slarw>
    2c2e:	10 c0       	rjmp	.+32     	; 0x2c50 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c30:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <twi_masterBufferIndex>
    2c34:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <twi_masterBufferLength>
    2c38:	98 17       	cp	r25, r24
    2c3a:	70 f5       	brcc	.+92     	; 0x2c98 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c3c:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <twi_masterBufferIndex>
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	8e 0f       	add	r24, r30
    2c44:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_masterBufferIndex>
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	e0 5e       	subi	r30, 0xE0	; 224
    2c4c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c4e:	80 81       	ld	r24, Z
    2c50:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c54:	85 ec       	ldi	r24, 0xC5	; 197
    2c56:	83 c0       	rjmp	.+262    	; 0x2d5e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2c58:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_error>
    2c5c:	8b c0       	rjmp	.+278    	; 0x2d74 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c5e:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <twi_masterBufferIndex>
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	8e 0f       	add	r24, r30
    2c66:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_masterBufferIndex>
    2c6a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	e0 5e       	subi	r30, 0xE0	; 224
    2c72:	fc 4f       	sbci	r31, 0xFC	; 252
    2c74:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c76:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <twi_masterBufferIndex>
    2c7a:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <twi_masterBufferLength>
    2c7e:	6b c0       	rjmp	.+214    	; 0x2d56 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c80:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <twi_masterBufferIndex>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8e 0f       	add	r24, r30
    2c88:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_masterBufferIndex>
    2c8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	e0 5e       	subi	r30, 0xE0	; 224
    2c94:	fc 4f       	sbci	r31, 0xFC	; 252
    2c96:	80 83       	st	Z, r24
	if (twi_sendStop)
    2c98:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_sendStop>
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	6a c0       	rjmp	.+212    	; 0x2d74 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2ca6:	84 ea       	ldi	r24, 0xA4	; 164
    2ca8:	5e c0       	rjmp	.+188    	; 0x2d66 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2cb0:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_rxBufferIndex>
    2cb4:	cf cf       	rjmp	.-98     	; 0x2c54 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cb6:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_rxBufferIndex>
    2cba:	80 32       	cpi	r24, 0x20	; 32
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <__vector_24+0x180>
    2cbe:	4e c0       	rjmp	.+156    	; 0x2d5c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2cc0:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <twi_rxBufferIndex>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	8e 0f       	add	r24, r30
    2cc8:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_rxBufferIndex>
    2ccc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	e4 52       	subi	r30, 0x24	; 36
    2cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd6:	80 83       	st	Z, r24
    2cd8:	bd cf       	rjmp	.-134    	; 0x2c54 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2cda:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cde:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_rxBufferIndex>
    2ce2:	80 32       	cpi	r24, 0x20	; 32
    2ce4:	30 f4       	brcc	.+12     	; 0x2cf2 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2ce6:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <twi_rxBufferIndex>
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	e4 52       	subi	r30, 0x24	; 36
    2cee:	fd 4f       	sbci	r31, 0xFD	; 253
    2cf0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2cf2:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <twi_rxBufferIndex>
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <twi_onSlaveReceive>
    2cfc:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <twi_onSlaveReceive+0x1>
    2d00:	8c ed       	ldi	r24, 0xDC	; 220
    2d02:	92 e0       	ldi	r25, 0x02	; 2
    2d04:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2d06:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_rxBufferIndex>
      break;
    2d0a:	36 c0       	rjmp	.+108    	; 0x2d78 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2d0c:	84 e0       	ldi	r24, 0x04	; 4
    2d0e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2d12:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2d16:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2d1a:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_onSlaveTransmit>
    2d1e:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <twi_onSlaveTransmit+0x1>
    2d22:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2d24:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_txBufferLength>
    2d28:	81 11       	cpse	r24, r1
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2d32:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d36:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <twi_txBufferIndex>
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	8e 0f       	add	r24, r30
    2d3e:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_txBufferIndex>
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	e2 50       	subi	r30, 0x02	; 2
    2d46:	fd 4f       	sbci	r31, 0xFD	; 253
    2d48:	80 81       	ld	r24, Z
    2d4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d4e:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_txBufferIndex>
    2d52:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_txBufferLength>
    2d56:	98 17       	cp	r25, r24
    2d58:	08 f4       	brcc	.+2      	; 0x2d5c <__vector_24+0x21c>
    2d5a:	7c cf       	rjmp	.-264    	; 0x2c54 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d5c:	85 e8       	ldi	r24, 0x85	; 133
    2d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2d62:	0a c0       	rjmp	.+20     	; 0x2d78 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d64:	85 ec       	ldi	r24, 0xC5	; 197
    2d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d6a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <twi_state>
      break;
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d70:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <twi_error>
      twi_stop();
    2d74:	0e 94 90 15 	call	0x2b20	; 0x2b20 <twi_stop>
      break;
  }
}
    2d78:	ff 91       	pop	r31
    2d7a:	ef 91       	pop	r30
    2d7c:	bf 91       	pop	r27
    2d7e:	af 91       	pop	r26
    2d80:	9f 91       	pop	r25
    2d82:	8f 91       	pop	r24
    2d84:	7f 91       	pop	r23
    2d86:	6f 91       	pop	r22
    2d88:	5f 91       	pop	r21
    2d8a:	4f 91       	pop	r20
    2d8c:	3f 91       	pop	r19
    2d8e:	2f 91       	pop	r18
    2d90:	0f 90       	pop	r0
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	0f 90       	pop	r0
    2d96:	1f 90       	pop	r1
    2d98:	18 95       	reti

00002d9a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2d9a:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2da4:	82 1b       	sub	r24, r18
    2da6:	91 09       	sbc	r25, r1
    2da8:	08 95       	ret

00002daa <_ZN7TwoWire4readEv>:
    2daa:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2dae:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    2db2:	98 17       	cp	r25, r24
    2db4:	50 f4       	brcc	.+20     	; 0x2dca <_ZN7TwoWire4readEv+0x20>
    2db6:	e9 2f       	mov	r30, r25
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	e2 58       	subi	r30, 0x82	; 130
    2dbc:	fc 4f       	sbci	r31, 0xFC	; 252
    2dbe:	20 81       	ld	r18, Z
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	9f 5f       	subi	r25, 0xFF	; 255
    2dc4:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <_ZN7TwoWire4readEv+0x24>
    2dca:	2f ef       	ldi	r18, 0xFF	; 255
    2dcc:	3f ef       	ldi	r19, 0xFF	; 255
    2dce:	c9 01       	movw	r24, r18
    2dd0:	08 95       	ret

00002dd2 <_ZN7TwoWire4peekEv>:
    2dd2:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2dd6:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    2dda:	e8 17       	cp	r30, r24
    2ddc:	30 f4       	brcc	.+12     	; 0x2dea <_ZN7TwoWire4peekEv+0x18>
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	e2 58       	subi	r30, 0x82	; 130
    2de2:	fc 4f       	sbci	r31, 0xFC	; 252
    2de4:	80 81       	ld	r24, Z
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	08 95       	ret
    2dea:	8f ef       	ldi	r24, 0xFF	; 255
    2dec:	9f ef       	ldi	r25, 0xFF	; 255
    2dee:	08 95       	ret

00002df0 <_ZN7TwoWire5flushEv>:
    2df0:	08 95       	ret

00002df2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	ec 01       	movw	r28, r24
    2df8:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZN7TwoWire14user_onReceiveE>
    2dfc:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZN7TwoWire14user_onReceiveE+0x1>
    2e00:	30 97       	sbiw	r30, 0x00	; 0
    2e02:	f1 f0       	breq	.+60     	; 0x2e40 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e04:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2e08:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    2e0c:	98 17       	cp	r25, r24
    2e0e:	c0 f0       	brcs	.+48     	; 0x2e40 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	29 2f       	mov	r18, r25
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	26 17       	cp	r18, r22
    2e18:	37 07       	cpc	r19, r23
    2e1a:	54 f4       	brge	.+20     	; 0x2e30 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2e1c:	de 01       	movw	r26, r28
    2e1e:	a2 0f       	add	r26, r18
    2e20:	b3 1f       	adc	r27, r19
    2e22:	4c 91       	ld	r20, X
    2e24:	d9 01       	movw	r26, r18
    2e26:	a2 58       	subi	r26, 0x82	; 130
    2e28:	bc 4f       	sbci	r27, 0xFC	; 252
    2e2a:	4c 93       	st	X, r20
    2e2c:	9f 5f       	subi	r25, 0xFF	; 255
    2e2e:	f1 cf       	rjmp	.-30     	; 0x2e12 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2e30:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2e34:	60 93 7c 03 	sts	0x037C, r22	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    2e38:	cb 01       	movw	r24, r22
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	09 94       	ijmp
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <_ZN7TwoWire16onRequestServiceEv>:
    2e46:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <_ZN7TwoWire14user_onRequestE>
    2e4a:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <_ZN7TwoWire14user_onRequestE+0x1>
    2e4e:	30 97       	sbiw	r30, 0x00	; 0
    2e50:	29 f0       	breq	.+10     	; 0x2e5c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2e52:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN7TwoWire13txBufferIndexE>
    2e56:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2e5a:	09 94       	ijmp
    2e5c:	08 95       	ret

00002e5e <_ZN7TwoWire5writeEPKhj>:
    2e5e:	cf 92       	push	r12
    2e60:	df 92       	push	r13
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	7c 01       	movw	r14, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8a 01       	movw	r16, r20
    2e74:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <_ZN7TwoWire12transmittingE>
    2e78:	22 23       	and	r18, r18
    2e7a:	89 f0       	breq	.+34     	; 0x2e9e <_ZN7TwoWire5writeEPKhj+0x40>
    2e7c:	eb 01       	movw	r28, r22
    2e7e:	6b 01       	movw	r12, r22
    2e80:	c4 0e       	add	r12, r20
    2e82:	d5 1e       	adc	r13, r21
    2e84:	cc 15       	cp	r28, r12
    2e86:	dd 05       	cpc	r29, r13
    2e88:	69 f0       	breq	.+26     	; 0x2ea4 <_ZN7TwoWire5writeEPKhj+0x46>
    2e8a:	69 91       	ld	r22, Y+
    2e8c:	d7 01       	movw	r26, r14
    2e8e:	ed 91       	ld	r30, X+
    2e90:	fc 91       	ld	r31, X
    2e92:	01 90       	ld	r0, Z+
    2e94:	f0 81       	ld	r31, Z
    2e96:	e0 2d       	mov	r30, r0
    2e98:	c7 01       	movw	r24, r14
    2e9a:	09 95       	icall
    2e9c:	f3 cf       	rjmp	.-26     	; 0x2e84 <_ZN7TwoWire5writeEPKhj+0x26>
    2e9e:	64 2f       	mov	r22, r20
    2ea0:	0e 94 5e 15 	call	0x2abc	; 0x2abc <twi_transmit>
    2ea4:	c8 01       	movw	r24, r16
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	1f 91       	pop	r17
    2eac:	0f 91       	pop	r16
    2eae:	ff 90       	pop	r15
    2eb0:	ef 90       	pop	r14
    2eb2:	df 90       	pop	r13
    2eb4:	cf 90       	pop	r12
    2eb6:	08 95       	ret

00002eb8 <_ZN7TwoWire5writeEh>:
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	1f 92       	push	r1
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	69 83       	std	Y+1, r22	; 0x01
    2ec4:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <_ZN7TwoWire12transmittingE>
    2ec8:	22 23       	and	r18, r18
    2eca:	d1 f0       	breq	.+52     	; 0x2f00 <_ZN7TwoWire5writeEh+0x48>
    2ecc:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2ed0:	20 32       	cpi	r18, 0x20	; 32
    2ed2:	40 f0       	brcs	.+16     	; 0x2ee4 <_ZN7TwoWire5writeEh+0x2c>
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	fc 01       	movw	r30, r24
    2eda:	33 83       	std	Z+3, r19	; 0x03
    2edc:	22 83       	std	Z+2, r18	; 0x02
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	15 c0       	rjmp	.+42     	; 0x2f0e <_ZN7TwoWire5writeEh+0x56>
    2ee4:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <_ZN7TwoWire13txBufferIndexE>
    2ee8:	e8 2f       	mov	r30, r24
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	e5 5a       	subi	r30, 0xA5	; 165
    2eee:	fc 4f       	sbci	r31, 0xFC	; 252
    2ef0:	99 81       	ldd	r25, Y+1	; 0x01
    2ef2:	90 83       	st	Z, r25
    2ef4:	8f 5f       	subi	r24, 0xFF	; 255
    2ef6:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZN7TwoWire13txBufferIndexE>
    2efa:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2efe:	05 c0       	rjmp	.+10     	; 0x2f0a <_ZN7TwoWire5writeEh+0x52>
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	ce 01       	movw	r24, r28
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	0e 94 5e 15 	call	0x2abc	; 0x2abc <twi_transmit>
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0f 90       	pop	r0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	08 95       	ret

00002f16 <_ZN7TwoWireC1Ev>:
    2f16:	fc 01       	movw	r30, r24
    2f18:	13 82       	std	Z+3, r1	; 0x03
    2f1a:	12 82       	std	Z+2, r1	; 0x02
    2f1c:	88 ee       	ldi	r24, 0xE8	; 232
    2f1e:	93 e0       	ldi	r25, 0x03	; 3
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	84 83       	std	Z+4, r24	; 0x04
    2f26:	95 83       	std	Z+5, r25	; 0x05
    2f28:	a6 83       	std	Z+6, r26	; 0x06
    2f2a:	b7 83       	std	Z+7, r27	; 0x07
    2f2c:	80 e6       	ldi	r24, 0x60	; 96
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	08 95       	ret

00002f36 <_ZN7TwoWire5beginEv>:
    2f36:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    2f3a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    2f3e:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN7TwoWire13txBufferIndexE>
    2f42:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2f46:	0e 94 a2 14 	call	0x2944	; 0x2944 <twi_init>
    2f4a:	83 e2       	ldi	r24, 0x23	; 35
    2f4c:	97 e1       	ldi	r25, 0x17	; 23
    2f4e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <twi_attachSlaveTxEvent>
    2f52:	89 ef       	ldi	r24, 0xF9	; 249
    2f54:	96 e1       	ldi	r25, 0x16	; 22
    2f56:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <twi_attachSlaveRxEvent>

00002f5a <_ZN7TwoWire17beginTransmissionEh>:
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN7TwoWire12transmittingE>
    2f60:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <_ZN7TwoWire9txAddressE>
    2f64:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN7TwoWire13txBufferIndexE>
    2f68:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2f6c:	08 95       	ret

00002f6e <_ZN7TwoWire17beginTransmissionEi>:
    2f6e:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>

00002f72 <_ZN7TwoWire15endTransmissionEh>:
    2f72:	0f 93       	push	r16
    2f74:	06 2f       	mov	r16, r22
    2f76:	21 e0       	ldi	r18, 0x01	; 1
    2f78:	40 91 59 03 	lds	r20, 0x0359	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2f7c:	6b e5       	ldi	r22, 0x5B	; 91
    2f7e:	73 e0       	ldi	r23, 0x03	; 3
    2f80:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_ZN7TwoWire9txAddressE>
    2f84:	0e 94 08 15 	call	0x2a10	; 0x2a10 <twi_writeTo>
    2f88:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN7TwoWire13txBufferIndexE>
    2f8c:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN7TwoWire14txBufferLengthE>
    2f90:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire12transmittingE>
    2f94:	0f 91       	pop	r16
    2f96:	08 95       	ret

00002f98 <_ZN7TwoWire11requestFromEhhmhh>:
    2f98:	4f 92       	push	r4
    2f9a:	5f 92       	push	r5
    2f9c:	6f 92       	push	r6
    2f9e:	7f 92       	push	r7
    2fa0:	af 92       	push	r10
    2fa2:	bf 92       	push	r11
    2fa4:	cf 92       	push	r12
    2fa6:	ef 92       	push	r14
    2fa8:	ff 92       	push	r15
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	5c 01       	movw	r10, r24
    2fb4:	f6 2e       	mov	r15, r22
    2fb6:	d4 2f       	mov	r29, r20
    2fb8:	28 01       	movw	r4, r16
    2fba:	39 01       	movw	r6, r18
    2fbc:	ee 20       	and	r14, r14
    2fbe:	21 f1       	breq	.+72     	; 0x3008 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2fc0:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
    2fc4:	ce 2d       	mov	r28, r14
    2fc6:	c4 30       	cpi	r28, 0x04	; 4
    2fc8:	08 f0       	brcs	.+2      	; 0x2fcc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2fca:	c3 e0       	ldi	r28, 0x03	; 3
    2fcc:	c1 50       	subi	r28, 0x01	; 1
    2fce:	c0 f0       	brcs	.+48     	; 0x3000 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2fd0:	28 e0       	ldi	r18, 0x08	; 8
    2fd2:	c2 9f       	mul	r28, r18
    2fd4:	c0 01       	movw	r24, r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	a3 01       	movw	r20, r6
    2fda:	92 01       	movw	r18, r4
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2fde:	56 95       	lsr	r21
    2fe0:	47 95       	ror	r20
    2fe2:	37 95       	ror	r19
    2fe4:	27 95       	ror	r18
    2fe6:	8a 95       	dec	r24
    2fe8:	d2 f7       	brpl	.-12     	; 0x2fde <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2fea:	ca 01       	movw	r24, r20
    2fec:	b9 01       	movw	r22, r18
    2fee:	d5 01       	movw	r26, r10
    2ff0:	ed 91       	ld	r30, X+
    2ff2:	fc 91       	ld	r31, X
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	f0 81       	ld	r31, Z
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	c5 01       	movw	r24, r10
    2ffc:	09 95       	icall
    2ffe:	e6 cf       	rjmp	.-52     	; 0x2fcc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	c5 01       	movw	r24, r10
    3004:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <_ZN7TwoWire15endTransmissionEh>
    3008:	4d 2f       	mov	r20, r29
    300a:	d1 32       	cpi	r29, 0x21	; 33
    300c:	08 f0       	brcs	.+2      	; 0x3010 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	2c 2d       	mov	r18, r12
    3012:	6e e7       	ldi	r22, 0x7E	; 126
    3014:	73 e0       	ldi	r23, 0x03	; 3
    3016:	8f 2d       	mov	r24, r15
    3018:	0e 94 c0 14 	call	0x2980	; 0x2980 <twi_readFrom>
    301c:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13rxBufferIndexE>
    3020:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <_ZN7TwoWire14rxBufferLengthE>
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	cf 90       	pop	r12
    3032:	bf 90       	pop	r11
    3034:	af 90       	pop	r10
    3036:	7f 90       	pop	r7
    3038:	6f 90       	pop	r6
    303a:	5f 90       	pop	r5
    303c:	4f 90       	pop	r4
    303e:	08 95       	ret

00003040 <_ZN7TwoWire11requestFromEhhh>:
    3040:	cf 92       	push	r12
    3042:	ef 92       	push	r14
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	c2 2e       	mov	r12, r18
    304a:	e1 2c       	mov	r14, r1
    304c:	00 e0       	ldi	r16, 0x00	; 0
    304e:	10 e0       	ldi	r17, 0x00	; 0
    3050:	98 01       	movw	r18, r16
    3052:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <_ZN7TwoWire11requestFromEhhmhh>
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	ef 90       	pop	r14
    305c:	cf 90       	pop	r12
    305e:	08 95       	ret

00003060 <_ZN7TwoWire11requestFromEii>:
    3060:	21 e0       	ldi	r18, 0x01	; 1
    3062:	0c 94 20 18 	jmp	0x3040	; 0x3040 <_ZN7TwoWire11requestFromEhhh>

00003066 <_ZN7TwoWire15endTransmissionEv>:
    3066:	61 e0       	ldi	r22, 0x01	; 1
    3068:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <_ZN7TwoWire15endTransmissionEh>

0000306c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    306c:	88 e4       	ldi	r24, 0x48	; 72
    306e:	93 e0       	ldi	r25, 0x03	; 3
    3070:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <_ZN7TwoWireC1Ev>

00003074 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    3074:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_mockData>
    3078:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <_mockData+0x1>
    307c:	0e 94 32 22 	call	0x4464	; 0x4464 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    3080:	63 ee       	ldi	r22, 0xE3	; 227
    3082:	76 e0       	ldi	r23, 0x06	; 6
    3084:	80 ea       	ldi	r24, 0xA0	; 160
    3086:	93 e0       	ldi	r25, 0x03	; 3
    3088:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>

0000308c <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    3092:	6e ed       	ldi	r22, 0xDE	; 222
    3094:	76 e0       	ldi	r23, 0x06	; 6
    3096:	80 ea       	ldi	r24, 0xA0	; 160
    3098:	93 e0       	ldi	r25, 0x03	; 3
    309a:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    309e:	84 e1       	ldi	r24, 0x14	; 20
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	0e 94 9a 21 	call	0x4334	; 0x4334 <malloc>
    30a6:	fc 01       	movw	r30, r24
    30a8:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <_mockData+0x1>
    30ac:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	92 83       	std	Z+2, r25	; 0x02
    30b6:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    30b8:	8a e0       	ldi	r24, 0x0A	; 10
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	96 83       	std	Z+6, r25	; 0x06
    30be:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    30c0:	84 e6       	ldi	r24, 0x64	; 100
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	94 83       	std	Z+4, r25	; 0x04
    30c6:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    30c8:	83 e3       	ldi	r24, 0x33	; 51
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	90 87       	std	Z+8, r25	; 0x08
    30ce:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    30d0:	83 e0       	ldi	r24, 0x03	; 3
    30d2:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    30d4:	82 e0       	ldi	r24, 0x02	; 2
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	94 87       	std	Z+12, r25	; 0x0c
    30da:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    30dc:	84 e1       	ldi	r24, 0x14	; 20
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	90 8b       	std	Z+16, r25	; 0x10
    30e2:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    30e4:	88 ec       	ldi	r24, 0xC8	; 200
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	96 87       	std	Z+14, r25	; 0x0e
    30ea:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    30ec:	84 e3       	ldi	r24, 0x34	; 52
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	92 8b       	std	Z+18, r25	; 0x12
    30f2:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    30f4:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    30f6:	67 eb       	ldi	r22, 0xB7	; 183
    30f8:	76 e0       	ldi	r23, 0x06	; 6
    30fa:	80 ea       	ldi	r24, 0xA0	; 160
    30fc:	93 e0       	ldi	r25, 0x03	; 3
    30fe:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    3102:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_mockData>
    3106:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <_mockData+0x1>
    310a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    310e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_mockData>
    3112:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <_mockData+0x1>
    3116:	0a 96       	adiw	r24, 0x0a	; 10
    3118:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    311c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_mockData>
    3120:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <_mockData+0x1>
    3124:	99 83       	std	Y+1, r25	; 0x01
    3126:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	08 95       	ret

00003132 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3132:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3134:	91 8d       	ldd	r25, Z+25	; 0x19
    3136:	22 8d       	ldd	r18, Z+26	; 0x1a
    3138:	89 2f       	mov	r24, r25
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	80 5c       	subi	r24, 0xC0	; 192
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	82 1b       	sub	r24, r18
    3142:	91 09       	sbc	r25, r1
}
    3144:	8f 73       	andi	r24, 0x3F	; 63
    3146:	99 27       	eor	r25, r25
    3148:	08 95       	ret

0000314a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    314a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    314c:	91 8d       	ldd	r25, Z+25	; 0x19
    314e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3150:	98 17       	cp	r25, r24
    3152:	31 f0       	breq	.+12     	; 0x3160 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3154:	82 8d       	ldd	r24, Z+26	; 0x1a
    3156:	e8 0f       	add	r30, r24
    3158:	f1 1d       	adc	r31, r1
    315a:	85 8d       	ldd	r24, Z+29	; 0x1d
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3160:	8f ef       	ldi	r24, 0xFF	; 255
    3162:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3164:	08 95       	ret

00003166 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3166:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3168:	91 8d       	ldd	r25, Z+25	; 0x19
    316a:	82 8d       	ldd	r24, Z+26	; 0x1a
    316c:	98 17       	cp	r25, r24
    316e:	61 f0       	breq	.+24     	; 0x3188 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3170:	82 8d       	ldd	r24, Z+26	; 0x1a
    3172:	df 01       	movw	r26, r30
    3174:	a8 0f       	add	r26, r24
    3176:	b1 1d       	adc	r27, r1
    3178:	5d 96       	adiw	r26, 0x1d	; 29
    317a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    317c:	92 8d       	ldd	r25, Z+26	; 0x1a
    317e:	9f 5f       	subi	r25, 0xFF	; 255
    3180:	9f 73       	andi	r25, 0x3F	; 63
    3182:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3188:	8f ef       	ldi	r24, 0xFF	; 255
    318a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    318c:	08 95       	ret

0000318e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    318e:	8c e1       	ldi	r24, 0x1C	; 28
    3190:	9a e1       	ldi	r25, 0x1A	; 26
    3192:	89 2b       	or	r24, r25
    3194:	49 f0       	breq	.+18     	; 0x31a8 <_Z14serialEventRunv+0x1a>
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	89 2b       	or	r24, r25
    319c:	29 f0       	breq	.+10     	; 0x31a8 <_Z14serialEventRunv+0x1a>
    319e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_Z17Serial0_availablev>
    31a2:	81 11       	cpse	r24, r1
    31a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    31a8:	08 95       	ret

000031aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    31aa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    31ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    31ae:	df 01       	movw	r26, r30
    31b0:	a8 0f       	add	r26, r24
    31b2:	b1 1d       	adc	r27, r1
    31b4:	a3 5a       	subi	r26, 0xA3	; 163
    31b6:	bf 4f       	sbci	r27, 0xFF	; 255
    31b8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    31ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	8f 73       	andi	r24, 0x3F	; 63
    31c2:	99 27       	eor	r25, r25
    31c4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    31c6:	a6 89       	ldd	r26, Z+22	; 0x16
    31c8:	b7 89       	ldd	r27, Z+23	; 0x17
    31ca:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    31cc:	a0 89       	ldd	r26, Z+16	; 0x10
    31ce:	b1 89       	ldd	r27, Z+17	; 0x11
    31d0:	8c 91       	ld	r24, X
    31d2:	80 64       	ori	r24, 0x40	; 64
    31d4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    31d6:	93 8d       	ldd	r25, Z+27	; 0x1b
    31d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    31da:	98 13       	cpse	r25, r24
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    31de:	02 88       	ldd	r0, Z+18	; 0x12
    31e0:	f3 89       	ldd	r31, Z+19	; 0x13
    31e2:	e0 2d       	mov	r30, r0
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 7d       	andi	r24, 0xDF	; 223
    31e8:	80 83       	st	Z, r24
    31ea:	08 95       	ret

000031ec <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	ec 01       	movw	r28, r24
  _written = true;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    31fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3200:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3202:	98 13       	cpse	r25, r24
    3204:	05 c0       	rjmp	.+10     	; 0x3210 <_ZN14HardwareSerial5writeEh+0x24>
    3206:	e8 89       	ldd	r30, Y+16	; 0x10
    3208:	f9 89       	ldd	r31, Y+17	; 0x11
    320a:	80 81       	ld	r24, Z
    320c:	85 fd       	sbrc	r24, 5
    320e:	24 c0       	rjmp	.+72     	; 0x3258 <_ZN14HardwareSerial5writeEh+0x6c>
    3210:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3212:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3214:	10 e0       	ldi	r17, 0x00	; 0
    3216:	0f 5f       	subi	r16, 0xFF	; 255
    3218:	1f 4f       	sbci	r17, 0xFF	; 255
    321a:	0f 73       	andi	r16, 0x3F	; 63
    321c:	11 27       	eor	r17, r17
    321e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3220:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3222:	e8 12       	cpse	r14, r24
    3224:	0c c0       	rjmp	.+24     	; 0x323e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	07 fc       	sbrc	r0, 7
    322a:	fa cf       	rjmp	.-12     	; 0x3220 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    322c:	e8 89       	ldd	r30, Y+16	; 0x10
    322e:	f9 89       	ldd	r31, Y+17	; 0x11
    3230:	80 81       	ld	r24, Z
    3232:	85 ff       	sbrs	r24, 5
    3234:	f5 cf       	rjmp	.-22     	; 0x3220 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3236:	ce 01       	movw	r24, r28
    3238:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    323c:	f1 cf       	rjmp	.-30     	; 0x3220 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    323e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3240:	fe 01       	movw	r30, r28
    3242:	e8 0f       	add	r30, r24
    3244:	f1 1d       	adc	r31, r1
    3246:	e3 5a       	subi	r30, 0xA3	; 163
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    324c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    324e:	ea 89       	ldd	r30, Y+18	; 0x12
    3250:	fb 89       	ldd	r31, Y+19	; 0x13
    3252:	80 81       	ld	r24, Z
    3254:	80 62       	ori	r24, 0x20	; 32
    3256:	07 c0       	rjmp	.+14     	; 0x3266 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3258:	ee 89       	ldd	r30, Y+22	; 0x16
    325a:	ff 89       	ldd	r31, Y+23	; 0x17
    325c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    325e:	e8 89       	ldd	r30, Y+16	; 0x10
    3260:	f9 89       	ldd	r31, Y+17	; 0x11
    3262:	80 81       	ld	r24, Z
    3264:	80 64       	ori	r24, 0x40	; 64
    3266:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	0f 91       	pop	r16
    3274:	ff 90       	pop	r15
    3276:	ef 90       	pop	r14
    3278:	08 95       	ret

0000327a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3280:	88 8d       	ldd	r24, Y+24	; 0x18
    3282:	88 23       	and	r24, r24
    3284:	c9 f0       	breq	.+50     	; 0x32b8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3286:	ea 89       	ldd	r30, Y+18	; 0x12
    3288:	fb 89       	ldd	r31, Y+19	; 0x13
    328a:	80 81       	ld	r24, Z
    328c:	85 fd       	sbrc	r24, 5
    328e:	05 c0       	rjmp	.+10     	; 0x329a <_ZN14HardwareSerial5flushEv+0x20>
    3290:	a8 89       	ldd	r26, Y+16	; 0x10
    3292:	b9 89       	ldd	r27, Y+17	; 0x11
    3294:	8c 91       	ld	r24, X
    3296:	86 fd       	sbrc	r24, 6
    3298:	0f c0       	rjmp	.+30     	; 0x32b8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	07 fc       	sbrc	r0, 7
    329e:	f5 cf       	rjmp	.-22     	; 0x328a <_ZN14HardwareSerial5flushEv+0x10>
    32a0:	80 81       	ld	r24, Z
    32a2:	85 ff       	sbrs	r24, 5
    32a4:	f2 cf       	rjmp	.-28     	; 0x328a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    32a6:	a8 89       	ldd	r26, Y+16	; 0x10
    32a8:	b9 89       	ldd	r27, Y+17	; 0x11
    32aa:	8c 91       	ld	r24, X
    32ac:	85 ff       	sbrs	r24, 5
    32ae:	ed cf       	rjmp	.-38     	; 0x328a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    32b0:	ce 01       	movw	r24, r28
    32b2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32b6:	e7 cf       	rjmp	.-50     	; 0x3286 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    32be:	cf 92       	push	r12
    32c0:	df 92       	push	r13
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	ec 01       	movw	r28, r24
    32ce:	6a 01       	movw	r12, r20
    32d0:	7b 01       	movw	r14, r22
    32d2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    32d4:	e8 89       	ldd	r30, Y+16	; 0x10
    32d6:	f9 89       	ldd	r31, Y+17	; 0x11
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32dc:	41 15       	cp	r20, r1
    32de:	51 4e       	sbci	r21, 0xE1	; 225
    32e0:	61 05       	cpc	r22, r1
    32e2:	71 05       	cpc	r23, r1
    32e4:	b1 f0       	breq	.+44     	; 0x3312 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	79 e0       	ldi	r23, 0x09	; 9
    32ea:	8d e3       	ldi	r24, 0x3D	; 61
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a7 01       	movw	r20, r14
    32f0:	96 01       	movw	r18, r12
    32f2:	0e 94 53 21 	call	0x42a6	; 0x42a6 <__udivmodsi4>
    32f6:	da 01       	movw	r26, r20
    32f8:	c9 01       	movw	r24, r18
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	a1 09       	sbc	r26, r1
    32fe:	b1 09       	sbc	r27, r1
    3300:	b6 95       	lsr	r27
    3302:	a7 95       	ror	r26
    3304:	97 95       	ror	r25
    3306:	87 95       	ror	r24
    3308:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    330a:	21 15       	cp	r18, r1
    330c:	80 e1       	ldi	r24, 0x10	; 16
    330e:	38 07       	cpc	r19, r24
    3310:	a8 f0       	brcs	.+42     	; 0x333c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3312:	e8 89       	ldd	r30, Y+16	; 0x10
    3314:	f9 89       	ldd	r31, Y+17	; 0x11
    3316:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3318:	60 e8       	ldi	r22, 0x80	; 128
    331a:	74 e8       	ldi	r23, 0x84	; 132
    331c:	8e e1       	ldi	r24, 0x1E	; 30
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	a7 01       	movw	r20, r14
    3322:	96 01       	movw	r18, r12
    3324:	0e 94 53 21 	call	0x42a6	; 0x42a6 <__udivmodsi4>
    3328:	da 01       	movw	r26, r20
    332a:	c9 01       	movw	r24, r18
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	a1 09       	sbc	r26, r1
    3330:	b1 09       	sbc	r27, r1
    3332:	b6 95       	lsr	r27
    3334:	a7 95       	ror	r26
    3336:	97 95       	ror	r25
    3338:	87 95       	ror	r24
    333a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    333c:	ec 85       	ldd	r30, Y+12	; 0x0c
    333e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3340:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3342:	ee 85       	ldd	r30, Y+14	; 0x0e
    3344:	ff 85       	ldd	r31, Y+15	; 0x0f
    3346:	20 83       	st	Z, r18

  _written = false;
    3348:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    334a:	ec 89       	ldd	r30, Y+20	; 0x14
    334c:	fd 89       	ldd	r31, Y+21	; 0x15
    334e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3350:	ea 89       	ldd	r30, Y+18	; 0x12
    3352:	fb 89       	ldd	r31, Y+19	; 0x13
    3354:	80 81       	ld	r24, Z
    3356:	80 61       	ori	r24, 0x10	; 16
    3358:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    335a:	ea 89       	ldd	r30, Y+18	; 0x12
    335c:	fb 89       	ldd	r31, Y+19	; 0x13
    335e:	80 81       	ld	r24, Z
    3360:	88 60       	ori	r24, 0x08	; 8
    3362:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3364:	ea 89       	ldd	r30, Y+18	; 0x12
    3366:	fb 89       	ldd	r31, Y+19	; 0x13
    3368:	80 81       	ld	r24, Z
    336a:	80 68       	ori	r24, 0x80	; 128
    336c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    336e:	ea 89       	ldd	r30, Y+18	; 0x12
    3370:	fb 89       	ldd	r31, Y+19	; 0x13
    3372:	80 81       	ld	r24, Z
    3374:	8f 7d       	andi	r24, 0xDF	; 223
    3376:	80 83       	st	Z, r24
}
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	1f 91       	pop	r17
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	df 90       	pop	r13
    3384:	cf 90       	pop	r12
    3386:	08 95       	ret

00003388 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3388:	1f 92       	push	r1
    338a:	0f 92       	push	r0
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	0f 92       	push	r0
    3390:	11 24       	eor	r1, r1
    3392:	2f 93       	push	r18
    3394:	8f 93       	push	r24
    3396:	9f 93       	push	r25
    3398:	ef 93       	push	r30
    339a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    339c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <Serial+0x10>
    33a0:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <Serial+0x11>
    33a4:	80 81       	ld	r24, Z
    33a6:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <Serial+0x16>
    33aa:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <Serial+0x17>
    33ae:	82 fd       	sbrc	r24, 2
    33b0:	12 c0       	rjmp	.+36     	; 0x33d6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    33b2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    33b4:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <Serial+0x19>
    33b8:	8f 5f       	subi	r24, 0xFF	; 255
    33ba:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    33bc:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <Serial+0x1a>
    33c0:	82 17       	cp	r24, r18
    33c2:	51 f0       	breq	.+20     	; 0x33d8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    33c4:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <Serial+0x19>
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	e0 56       	subi	r30, 0x60	; 96
    33cc:	fc 4f       	sbci	r31, 0xFC	; 252
    33ce:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    33d0:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <Serial+0x19>
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    33d6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	9f 91       	pop	r25
    33de:	8f 91       	pop	r24
    33e0:	2f 91       	pop	r18
    33e2:	0f 90       	pop	r0
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	0f 90       	pop	r0
    33e8:	1f 90       	pop	r1
    33ea:	18 95       	reti

000033ec <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    33ec:	1f 92       	push	r1
    33ee:	0f 92       	push	r0
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	0f 92       	push	r0
    33f4:	11 24       	eor	r1, r1
    33f6:	2f 93       	push	r18
    33f8:	3f 93       	push	r19
    33fa:	4f 93       	push	r20
    33fc:	5f 93       	push	r21
    33fe:	6f 93       	push	r22
    3400:	7f 93       	push	r23
    3402:	8f 93       	push	r24
    3404:	9f 93       	push	r25
    3406:	af 93       	push	r26
    3408:	bf 93       	push	r27
    340a:	ef 93       	push	r30
    340c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    340e:	80 ea       	ldi	r24, 0xA0	; 160
    3410:	93 e0       	ldi	r25, 0x03	; 3
    3412:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3416:	ff 91       	pop	r31
    3418:	ef 91       	pop	r30
    341a:	bf 91       	pop	r27
    341c:	af 91       	pop	r26
    341e:	9f 91       	pop	r25
    3420:	8f 91       	pop	r24
    3422:	7f 91       	pop	r23
    3424:	6f 91       	pop	r22
    3426:	5f 91       	pop	r21
    3428:	4f 91       	pop	r20
    342a:	3f 91       	pop	r19
    342c:	2f 91       	pop	r18
    342e:	0f 90       	pop	r0
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	0f 90       	pop	r0
    3434:	1f 90       	pop	r1
    3436:	18 95       	reti

00003438 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3438:	80 ea       	ldi	r24, 0xA0	; 160
    343a:	93 e0       	ldi	r25, 0x03	; 3
    343c:	0e 94 99 18 	call	0x3132	; 0x3132 <_ZN14HardwareSerial9availableEv>
    3440:	21 e0       	ldi	r18, 0x01	; 1
    3442:	89 2b       	or	r24, r25
    3444:	09 f4       	brne	.+2      	; 0x3448 <_Z17Serial0_availablev+0x10>
    3446:	20 e0       	ldi	r18, 0x00	; 0
}
    3448:	82 2f       	mov	r24, r18
    344a:	08 95       	ret

0000344c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    344c:	e0 ea       	ldi	r30, 0xA0	; 160
    344e:	f3 e0       	ldi	r31, 0x03	; 3
    3450:	13 82       	std	Z+3, r1	; 0x03
    3452:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3454:	88 ee       	ldi	r24, 0xE8	; 232
    3456:	93 e0       	ldi	r25, 0x03	; 3
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	84 83       	std	Z+4, r24	; 0x04
    345e:	95 83       	std	Z+5, r25	; 0x05
    3460:	a6 83       	std	Z+6, r26	; 0x06
    3462:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3464:	80 e7       	ldi	r24, 0x70	; 112
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	80 83       	st	Z, r24
    346c:	85 ec       	ldi	r24, 0xC5	; 197
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	95 87       	std	Z+13, r25	; 0x0d
    3472:	84 87       	std	Z+12, r24	; 0x0c
    3474:	84 ec       	ldi	r24, 0xC4	; 196
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	97 87       	std	Z+15, r25	; 0x0f
    347a:	86 87       	std	Z+14, r24	; 0x0e
    347c:	80 ec       	ldi	r24, 0xC0	; 192
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	91 8b       	std	Z+17, r25	; 0x11
    3482:	80 8b       	std	Z+16, r24	; 0x10
    3484:	81 ec       	ldi	r24, 0xC1	; 193
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	93 8b       	std	Z+19, r25	; 0x13
    348a:	82 8b       	std	Z+18, r24	; 0x12
    348c:	82 ec       	ldi	r24, 0xC2	; 194
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	95 8b       	std	Z+21, r25	; 0x15
    3492:	84 8b       	std	Z+20, r24	; 0x14
    3494:	86 ec       	ldi	r24, 0xC6	; 198
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	97 8b       	std	Z+23, r25	; 0x17
    349a:	86 8b       	std	Z+22, r24	; 0x16
    349c:	11 8e       	std	Z+25, r1	; 0x19
    349e:	12 8e       	std	Z+26, r1	; 0x1a
    34a0:	13 8e       	std	Z+27, r1	; 0x1b
    34a2:	14 8e       	std	Z+28, r1	; 0x1c
    34a4:	08 95       	ret

000034a6 <initVariant>:
    34a6:	08 95       	ret

000034a8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    34a8:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <init>

	initVariant();
    34ac:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    34b0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    34b4:	c7 ec       	ldi	r28, 0xC7	; 199
    34b6:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    34b8:	0e 94 2d 13 	call	0x265a	; 0x265a <loop>
		if (serialEventRun) serialEventRun();
    34bc:	20 97       	sbiw	r28, 0x00	; 0
    34be:	e1 f3       	breq	.-8      	; 0x34b8 <main+0x10>
    34c0:	0e 94 c7 18 	call	0x318e	; 0x318e <_Z14serialEventRunv>
    34c4:	f9 cf       	rjmp	.-14     	; 0x34b8 <main+0x10>

000034c6 <_Znwj>:
    34c6:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <malloc>

000034ca <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    34ca:	cf 92       	push	r12
    34cc:	df 92       	push	r13
    34ce:	ef 92       	push	r14
    34d0:	ff 92       	push	r15
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	6c 01       	movw	r12, r24
    34dc:	7a 01       	movw	r14, r20
    34de:	8b 01       	movw	r16, r22
    34e0:	c0 e0       	ldi	r28, 0x00	; 0
    34e2:	d0 e0       	ldi	r29, 0x00	; 0
    34e4:	ce 15       	cp	r28, r14
    34e6:	df 05       	cpc	r29, r15
    34e8:	81 f0       	breq	.+32     	; 0x350a <_ZN5Print5writeEPKhj+0x40>
    34ea:	d8 01       	movw	r26, r16
    34ec:	6d 91       	ld	r22, X+
    34ee:	8d 01       	movw	r16, r26
    34f0:	d6 01       	movw	r26, r12
    34f2:	ed 91       	ld	r30, X+
    34f4:	fc 91       	ld	r31, X
    34f6:	01 90       	ld	r0, Z+
    34f8:	f0 81       	ld	r31, Z
    34fa:	e0 2d       	mov	r30, r0
    34fc:	c6 01       	movw	r24, r12
    34fe:	09 95       	icall
    3500:	89 2b       	or	r24, r25
    3502:	11 f0       	breq	.+4      	; 0x3508 <_ZN5Print5writeEPKhj+0x3e>
    3504:	21 96       	adiw	r28, 0x01	; 1
    3506:	ee cf       	rjmp	.-36     	; 0x34e4 <_ZN5Print5writeEPKhj+0x1a>
    3508:	7e 01       	movw	r14, r28
    350a:	c7 01       	movw	r24, r14
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	1f 91       	pop	r17
    3512:	0f 91       	pop	r16
    3514:	ff 90       	pop	r15
    3516:	ef 90       	pop	r14
    3518:	df 90       	pop	r13
    351a:	cf 90       	pop	r12
    351c:	08 95       	ret

0000351e <_ZN5Print5writeEPKc>:
    351e:	61 15       	cp	r22, r1
    3520:	71 05       	cpc	r23, r1
    3522:	79 f0       	breq	.+30     	; 0x3542 <_ZN5Print5writeEPKc+0x24>
    3524:	fb 01       	movw	r30, r22
    3526:	01 90       	ld	r0, Z+
    3528:	00 20       	and	r0, r0
    352a:	e9 f7       	brne	.-6      	; 0x3526 <_ZN5Print5writeEPKc+0x8>
    352c:	31 97       	sbiw	r30, 0x01	; 1
    352e:	af 01       	movw	r20, r30
    3530:	46 1b       	sub	r20, r22
    3532:	57 0b       	sbc	r21, r23
    3534:	dc 01       	movw	r26, r24
    3536:	ed 91       	ld	r30, X+
    3538:	fc 91       	ld	r31, X
    353a:	02 80       	ldd	r0, Z+2	; 0x02
    353c:	f3 81       	ldd	r31, Z+3	; 0x03
    353e:	e0 2d       	mov	r30, r0
    3540:	09 94       	ijmp
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	08 95       	ret

00003548 <_ZN5Print5printEPK19__FlashStringHelper>:
    3548:	ef 92       	push	r14
    354a:	ff 92       	push	r15
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	8c 01       	movw	r16, r24
    3556:	7b 01       	movw	r14, r22
    3558:	c0 e0       	ldi	r28, 0x00	; 0
    355a:	d0 e0       	ldi	r29, 0x00	; 0
    355c:	f7 01       	movw	r30, r14
    355e:	ec 0f       	add	r30, r28
    3560:	fd 1f       	adc	r31, r29
    3562:	64 91       	lpm	r22, Z
    3564:	66 23       	and	r22, r22
    3566:	61 f0       	breq	.+24     	; 0x3580 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3568:	d8 01       	movw	r26, r16
    356a:	ed 91       	ld	r30, X+
    356c:	fc 91       	ld	r31, X
    356e:	01 90       	ld	r0, Z+
    3570:	f0 81       	ld	r31, Z
    3572:	e0 2d       	mov	r30, r0
    3574:	c8 01       	movw	r24, r16
    3576:	09 95       	icall
    3578:	89 2b       	or	r24, r25
    357a:	11 f0       	breq	.+4      	; 0x3580 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    357c:	21 96       	adiw	r28, 0x01	; 1
    357e:	ee cf       	rjmp	.-36     	; 0x355c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3580:	ce 01       	movw	r24, r28
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	ff 90       	pop	r15
    358c:	ef 90       	pop	r14
    358e:	08 95       	ret

00003590 <_ZN5Print5printERK6String>:
    3590:	db 01       	movw	r26, r22
    3592:	14 96       	adiw	r26, 0x04	; 4
    3594:	4d 91       	ld	r20, X+
    3596:	5c 91       	ld	r21, X
    3598:	15 97       	sbiw	r26, 0x05	; 5
    359a:	6d 91       	ld	r22, X+
    359c:	7c 91       	ld	r23, X
    359e:	dc 01       	movw	r26, r24
    35a0:	ed 91       	ld	r30, X+
    35a2:	fc 91       	ld	r31, X
    35a4:	02 80       	ldd	r0, Z+2	; 0x02
    35a6:	f3 81       	ldd	r31, Z+3	; 0x03
    35a8:	e0 2d       	mov	r30, r0
    35aa:	09 94       	ijmp

000035ac <_ZN5Print5printEPKc>:
    35ac:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <_ZN5Print5writeEPKc>

000035b0 <_ZN5Print5printEc>:
    35b0:	dc 01       	movw	r26, r24
    35b2:	ed 91       	ld	r30, X+
    35b4:	fc 91       	ld	r31, X
    35b6:	01 90       	ld	r0, Z+
    35b8:	f0 81       	ld	r31, Z
    35ba:	e0 2d       	mov	r30, r0
    35bc:	09 94       	ijmp

000035be <_ZN5Print7printlnEv>:
    35be:	6c e7       	ldi	r22, 0x7C	; 124
    35c0:	71 e0       	ldi	r23, 0x01	; 1
    35c2:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <_ZN5Print5writeEPKc>

000035c6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	ec 01       	movw	r28, r24
    35d0:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print5printEPK19__FlashStringHelper>
    35d4:	8c 01       	movw	r16, r24
    35d6:	ce 01       	movw	r24, r28
    35d8:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
    35dc:	80 0f       	add	r24, r16
    35de:	91 1f       	adc	r25, r17
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	08 95       	ret

000035ea <_ZN5Print7printlnEPKc>:
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	ec 01       	movw	r28, r24
    35f4:	0e 94 8f 1a 	call	0x351e	; 0x351e <_ZN5Print5writeEPKc>
    35f8:	8c 01       	movw	r16, r24
    35fa:	ce 01       	movw	r24, r28
    35fc:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
    3600:	80 0f       	add	r24, r16
    3602:	91 1f       	adc	r25, r17
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
    360c:	08 95       	ret

0000360e <_ZN5Print7printlnEc>:
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	ec 01       	movw	r28, r24
    3618:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN5Print5printEc>
    361c:	8c 01       	movw	r16, r24
    361e:	ce 01       	movw	r24, r28
    3620:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
    3624:	80 0f       	add	r24, r16
    3626:	91 1f       	adc	r25, r17
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	08 95       	ret

00003632 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3632:	8f 92       	push	r8
    3634:	9f 92       	push	r9
    3636:	af 92       	push	r10
    3638:	bf 92       	push	r11
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	a1 97       	sbiw	r28, 0x21	; 33
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	7c 01       	movw	r14, r24
    3658:	fa 01       	movw	r30, r20
    365a:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    365c:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    365e:	22 30       	cpi	r18, 0x02	; 2
    3660:	08 f4       	brcc	.+2      	; 0x3664 <_ZN5Print11printNumberEmh+0x32>
    3662:	2a e0       	ldi	r18, 0x0A	; 10
    3664:	8e 01       	movw	r16, r28
    3666:	0f 5d       	subi	r16, 0xDF	; 223
    3668:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    366a:	82 2e       	mov	r8, r18
    366c:	91 2c       	mov	r9, r1
    366e:	a1 2c       	mov	r10, r1
    3670:	b1 2c       	mov	r11, r1
    3672:	bf 01       	movw	r22, r30
    3674:	a5 01       	movw	r20, r10
    3676:	94 01       	movw	r18, r8
    3678:	0e 94 53 21 	call	0x42a6	; 0x42a6 <__udivmodsi4>
    n /= base;
    367c:	f9 01       	movw	r30, r18
    367e:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3680:	01 50       	subi	r16, 0x01	; 1
    3682:	11 09       	sbc	r17, r1
    3684:	6a 30       	cpi	r22, 0x0A	; 10
    3686:	10 f4       	brcc	.+4      	; 0x368c <_ZN5Print11printNumberEmh+0x5a>
    3688:	60 5d       	subi	r22, 0xD0	; 208
    368a:	01 c0       	rjmp	.+2      	; 0x368e <_ZN5Print11printNumberEmh+0x5c>
    368c:	69 5c       	subi	r22, 0xC9	; 201
    368e:	d8 01       	movw	r26, r16
    3690:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3692:	23 2b       	or	r18, r19
    3694:	24 2b       	or	r18, r20
    3696:	25 2b       	or	r18, r21
    3698:	61 f7       	brne	.-40     	; 0x3672 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    369a:	b8 01       	movw	r22, r16
    369c:	c7 01       	movw	r24, r14
    369e:	0e 94 8f 1a 	call	0x351e	; 0x351e <_ZN5Print5writeEPKc>
}
    36a2:	a1 96       	adiw	r28, 0x21	; 33
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	bf 90       	pop	r11
    36bc:	af 90       	pop	r10
    36be:	9f 90       	pop	r9
    36c0:	8f 90       	pop	r8
    36c2:	08 95       	ret

000036c4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    36c4:	21 15       	cp	r18, r1
    36c6:	31 05       	cpc	r19, r1
    36c8:	41 f4       	brne	.+16     	; 0x36da <_ZN5Print5printEmi+0x16>
    36ca:	dc 01       	movw	r26, r24
    36cc:	ed 91       	ld	r30, X+
    36ce:	fc 91       	ld	r31, X
    36d0:	01 90       	ld	r0, Z+
    36d2:	f0 81       	ld	r31, Z
    36d4:	e0 2d       	mov	r30, r0
    36d6:	64 2f       	mov	r22, r20
    36d8:	09 94       	ijmp
  else return printNumber(n, base);
    36da:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <_ZN5Print11printNumberEmh>

000036de <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    36de:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    36e0:	46 2f       	mov	r20, r22
    36e2:	50 e0       	ldi	r21, 0x00	; 0
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	70 e0       	ldi	r23, 0x00	; 0
    36e8:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <_ZN5Print5printEmi>

000036ec <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
    36f4:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    36f6:	0e 94 6f 1b 	call	0x36de	; 0x36de <_ZN5Print5printEhi>
    36fa:	8c 01       	movw	r16, r24
  n += println();
    36fc:	ce 01       	movw	r24, r28
    36fe:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
  return n;
}
    3702:	80 0f       	add	r24, r16
    3704:	91 1f       	adc	r25, r17
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	08 95       	ret

00003710 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3710:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3712:	ab 01       	movw	r20, r22
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <_ZN5Print5printEmi>

0000371c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    371c:	0f 93       	push	r16
    371e:	1f 93       	push	r17
    3720:	cf 93       	push	r28
    3722:	df 93       	push	r29
    3724:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3726:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEji>
    372a:	8c 01       	movw	r16, r24
  n += println();
    372c:	ce 01       	movw	r24, r28
    372e:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
  return n;
}
    3732:	80 0f       	add	r24, r16
    3734:	91 1f       	adc	r25, r17
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	08 95       	ret

00003740 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    374a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN5Print5printEmi>
    374e:	8c 01       	movw	r16, r24
  n += println();
    3750:	ce 01       	movw	r24, r28
    3752:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
  return n;
}
    3756:	80 0f       	add	r24, r16
    3758:	91 1f       	adc	r25, r17
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	08 95       	ret

00003764 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3764:	cf 92       	push	r12
    3766:	df 92       	push	r13
    3768:	ef 92       	push	r14
    376a:	ff 92       	push	r15
    376c:	0f 93       	push	r16
    376e:	1f 93       	push	r17
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
  if (base == 0) {
    3774:	21 15       	cp	r18, r1
    3776:	31 05       	cpc	r19, r1
    3778:	81 f4       	brne	.+32     	; 0x379a <_ZN5Print5printEli+0x36>
    return write(n);
    377a:	dc 01       	movw	r26, r24
    377c:	ed 91       	ld	r30, X+
    377e:	fc 91       	ld	r31, X
    3780:	01 90       	ld	r0, Z+
    3782:	f0 81       	ld	r31, Z
    3784:	e0 2d       	mov	r30, r0
    3786:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3798:	09 94       	ijmp
  } else if (base == 10) {
    379a:	2a 30       	cpi	r18, 0x0A	; 10
    379c:	31 05       	cpc	r19, r1
    379e:	01 f5       	brne	.+64     	; 0x37e0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    37a0:	77 ff       	sbrs	r23, 7
    37a2:	1d c0       	rjmp	.+58     	; 0x37de <_ZN5Print5printEli+0x7a>
    37a4:	6a 01       	movw	r12, r20
    37a6:	7b 01       	movw	r14, r22
    37a8:	ec 01       	movw	r28, r24
      int t = print('-');
    37aa:	6d e2       	ldi	r22, 0x2D	; 45
    37ac:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN5Print5printEc>
    37b0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    37b2:	44 27       	eor	r20, r20
    37b4:	55 27       	eor	r21, r21
    37b6:	ba 01       	movw	r22, r20
    37b8:	4c 19       	sub	r20, r12
    37ba:	5d 09       	sbc	r21, r13
    37bc:	6e 09       	sbc	r22, r14
    37be:	7f 09       	sbc	r23, r15
    37c0:	2a e0       	ldi	r18, 0x0A	; 10
    37c2:	ce 01       	movw	r24, r28
    37c4:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN5Print11printNumberEmh>
    37c8:	80 0f       	add	r24, r16
    37ca:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	1f 91       	pop	r17
    37d2:	0f 91       	pop	r16
    37d4:	ff 90       	pop	r15
    37d6:	ef 90       	pop	r14
    37d8:	df 90       	pop	r13
    37da:	cf 90       	pop	r12
    37dc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    37de:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    37f0:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <_ZN5Print11printNumberEmh>

000037f4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    37f4:	9a 01       	movw	r18, r20
  return print((long) n, base);
    37f6:	ab 01       	movw	r20, r22
    37f8:	77 0f       	add	r23, r23
    37fa:	66 0b       	sbc	r22, r22
    37fc:	77 0b       	sbc	r23, r23
    37fe:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <_ZN5Print5printEli>

00003802 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    380c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN5Print5printEii>
    3810:	8c 01       	movw	r16, r24
  n += println();
    3812:	ce 01       	movw	r24, r28
    3814:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
  return n;
}
    3818:	80 0f       	add	r24, r16
    381a:	91 1f       	adc	r25, r17
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	08 95       	ret

00003826 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3830:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN5Print5printEli>
    3834:	8c 01       	movw	r16, r24
  n += println();
    3836:	ce 01       	movw	r24, r28
    3838:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN5Print7printlnEv>
  return n;
}
    383c:	80 0f       	add	r24, r16
    383e:	91 1f       	adc	r25, r17
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	08 95       	ret

0000384a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    384a:	1f 92       	push	r1
    384c:	0f 92       	push	r0
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	0f 92       	push	r0
    3852:	11 24       	eor	r1, r1
    3854:	2f 93       	push	r18
    3856:	3f 93       	push	r19
    3858:	8f 93       	push	r24
    385a:	9f 93       	push	r25
    385c:	af 93       	push	r26
    385e:	bf 93       	push	r27
    3860:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <timer0_millis>
    3864:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <timer0_millis+0x1>
    3868:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <timer0_millis+0x2>
    386c:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <timer0_millis+0x3>
    3870:	30 91 3d 04 	lds	r19, 0x043D	; 0x80043d <timer0_fract>
    3874:	23 e0       	ldi	r18, 0x03	; 3
    3876:	23 0f       	add	r18, r19
    3878:	2d 37       	cpi	r18, 0x7D	; 125
    387a:	20 f4       	brcc	.+8      	; 0x3884 <__vector_16+0x3a>
    387c:	01 96       	adiw	r24, 0x01	; 1
    387e:	a1 1d       	adc	r26, r1
    3880:	b1 1d       	adc	r27, r1
    3882:	05 c0       	rjmp	.+10     	; 0x388e <__vector_16+0x44>
    3884:	26 e8       	ldi	r18, 0x86	; 134
    3886:	23 0f       	add	r18, r19
    3888:	02 96       	adiw	r24, 0x02	; 2
    388a:	a1 1d       	adc	r26, r1
    388c:	b1 1d       	adc	r27, r1
    388e:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <timer0_fract>
    3892:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <timer0_millis>
    3896:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <timer0_millis+0x1>
    389a:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <timer0_millis+0x2>
    389e:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <timer0_millis+0x3>
    38a2:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <timer0_overflow_count>
    38a6:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <timer0_overflow_count+0x1>
    38aa:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <timer0_overflow_count+0x2>
    38ae:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <timer0_overflow_count+0x3>
    38b2:	01 96       	adiw	r24, 0x01	; 1
    38b4:	a1 1d       	adc	r26, r1
    38b6:	b1 1d       	adc	r27, r1
    38b8:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <timer0_overflow_count>
    38bc:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <timer0_overflow_count+0x1>
    38c0:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <timer0_overflow_count+0x2>
    38c4:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <timer0_overflow_count+0x3>
    38c8:	bf 91       	pop	r27
    38ca:	af 91       	pop	r26
    38cc:	9f 91       	pop	r25
    38ce:	8f 91       	pop	r24
    38d0:	3f 91       	pop	r19
    38d2:	2f 91       	pop	r18
    38d4:	0f 90       	pop	r0
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	0f 90       	pop	r0
    38da:	1f 90       	pop	r1
    38dc:	18 95       	reti

000038de <micros>:
    38de:	3f b7       	in	r19, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <timer0_overflow_count>
    38e6:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <timer0_overflow_count+0x1>
    38ea:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <timer0_overflow_count+0x2>
    38ee:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <timer0_overflow_count+0x3>
    38f2:	26 b5       	in	r18, 0x26	; 38
    38f4:	a8 9b       	sbis	0x15, 0	; 21
    38f6:	05 c0       	rjmp	.+10     	; 0x3902 <micros+0x24>
    38f8:	2f 3f       	cpi	r18, 0xFF	; 255
    38fa:	19 f0       	breq	.+6      	; 0x3902 <micros+0x24>
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	a1 1d       	adc	r26, r1
    3900:	b1 1d       	adc	r27, r1
    3902:	3f bf       	out	0x3f, r19	; 63
    3904:	ba 2f       	mov	r27, r26
    3906:	a9 2f       	mov	r26, r25
    3908:	98 2f       	mov	r25, r24
    390a:	88 27       	eor	r24, r24
    390c:	82 0f       	add	r24, r18
    390e:	91 1d       	adc	r25, r1
    3910:	a1 1d       	adc	r26, r1
    3912:	b1 1d       	adc	r27, r1
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	42 e0       	ldi	r20, 0x02	; 2
    391a:	66 0f       	add	r22, r22
    391c:	77 1f       	adc	r23, r23
    391e:	88 1f       	adc	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	4a 95       	dec	r20
    3924:	d1 f7       	brne	.-12     	; 0x391a <micros+0x3c>
    3926:	08 95       	ret

00003928 <delay>:
    3928:	8f 92       	push	r8
    392a:	9f 92       	push	r9
    392c:	af 92       	push	r10
    392e:	bf 92       	push	r11
    3930:	cf 92       	push	r12
    3932:	df 92       	push	r13
    3934:	ef 92       	push	r14
    3936:	ff 92       	push	r15
    3938:	6b 01       	movw	r12, r22
    393a:	7c 01       	movw	r14, r24
    393c:	0e 94 6f 1c 	call	0x38de	; 0x38de <micros>
    3940:	4b 01       	movw	r8, r22
    3942:	5c 01       	movw	r10, r24
    3944:	c1 14       	cp	r12, r1
    3946:	d1 04       	cpc	r13, r1
    3948:	e1 04       	cpc	r14, r1
    394a:	f1 04       	cpc	r15, r1
    394c:	01 f1       	breq	.+64     	; 0x398e <delay+0x66>
    394e:	0e 94 1e 21 	call	0x423c	; 0x423c <yield>
    3952:	0e 94 6f 1c 	call	0x38de	; 0x38de <micros>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	88 19       	sub	r24, r8
    395c:	99 09       	sbc	r25, r9
    395e:	aa 09       	sbc	r26, r10
    3960:	bb 09       	sbc	r27, r11
    3962:	88 3e       	cpi	r24, 0xE8	; 232
    3964:	93 40       	sbci	r25, 0x03	; 3
    3966:	a1 05       	cpc	r26, r1
    3968:	b1 05       	cpc	r27, r1
    396a:	60 f3       	brcs	.-40     	; 0x3944 <delay+0x1c>
    396c:	21 e0       	ldi	r18, 0x01	; 1
    396e:	c2 1a       	sub	r12, r18
    3970:	d1 08       	sbc	r13, r1
    3972:	e1 08       	sbc	r14, r1
    3974:	f1 08       	sbc	r15, r1
    3976:	88 ee       	ldi	r24, 0xE8	; 232
    3978:	88 0e       	add	r8, r24
    397a:	83 e0       	ldi	r24, 0x03	; 3
    397c:	98 1e       	adc	r9, r24
    397e:	a1 1c       	adc	r10, r1
    3980:	b1 1c       	adc	r11, r1
    3982:	c1 14       	cp	r12, r1
    3984:	d1 04       	cpc	r13, r1
    3986:	e1 04       	cpc	r14, r1
    3988:	f1 04       	cpc	r15, r1
    398a:	19 f7       	brne	.-58     	; 0x3952 <delay+0x2a>
    398c:	db cf       	rjmp	.-74     	; 0x3944 <delay+0x1c>
    398e:	ff 90       	pop	r15
    3990:	ef 90       	pop	r14
    3992:	df 90       	pop	r13
    3994:	cf 90       	pop	r12
    3996:	bf 90       	pop	r11
    3998:	af 90       	pop	r10
    399a:	9f 90       	pop	r9
    399c:	8f 90       	pop	r8
    399e:	08 95       	ret

000039a0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    39a0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    39a2:	84 b5       	in	r24, 0x24	; 36
    39a4:	82 60       	ori	r24, 0x02	; 2
    39a6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    39a8:	84 b5       	in	r24, 0x24	; 36
    39aa:	81 60       	ori	r24, 0x01	; 1
    39ac:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    39ae:	85 b5       	in	r24, 0x25	; 37
    39b0:	82 60       	ori	r24, 0x02	; 2
    39b2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    39b4:	85 b5       	in	r24, 0x25	; 37
    39b6:	81 60       	ori	r24, 0x01	; 1
    39b8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    39ba:	ee e6       	ldi	r30, 0x6E	; 110
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	81 60       	ori	r24, 0x01	; 1
    39c2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    39c4:	e1 e8       	ldi	r30, 0x81	; 129
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    39ca:	80 81       	ld	r24, Z
    39cc:	82 60       	ori	r24, 0x02	; 2
    39ce:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    39d0:	80 81       	ld	r24, Z
    39d2:	81 60       	ori	r24, 0x01	; 1
    39d4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    39d6:	e0 e8       	ldi	r30, 0x80	; 128
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	81 60       	ori	r24, 0x01	; 1
    39de:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    39e0:	e1 eb       	ldi	r30, 0xB1	; 177
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	84 60       	ori	r24, 0x04	; 4
    39e8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    39ea:	e0 eb       	ldi	r30, 0xB0	; 176
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	81 60       	ori	r24, 0x01	; 1
    39f2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    39f4:	ea e7       	ldi	r30, 0x7A	; 122
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	84 60       	ori	r24, 0x04	; 4
    39fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    39fe:	80 81       	ld	r24, Z
    3a00:	82 60       	ori	r24, 0x02	; 2
    3a02:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3a04:	80 81       	ld	r24, Z
    3a06:	81 60       	ori	r24, 0x01	; 1
    3a08:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a0a:	80 81       	ld	r24, Z
    3a0c:	80 68       	ori	r24, 0x80	; 128
    3a0e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a10:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3a14:	08 95       	ret

00003a16 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3a16:	8e 30       	cpi	r24, 0x0E	; 14
    3a18:	08 f0       	brcs	.+2      	; 0x3a1c <analogRead+0x6>
    3a1a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3a1c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3a20:	90 e4       	ldi	r25, 0x40	; 64
    3a22:	29 9f       	mul	r18, r25
    3a24:	90 01       	movw	r18, r0
    3a26:	11 24       	eor	r1, r1
    3a28:	87 70       	andi	r24, 0x07	; 7
    3a2a:	82 2b       	or	r24, r18
    3a2c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3a30:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a34:	80 64       	ori	r24, 0x40	; 64
    3a36:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3a3a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a3e:	86 fd       	sbrc	r24, 6
    3a40:	fc cf       	rjmp	.-8      	; 0x3a3a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3a42:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3a46:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
}
    3a4c:	92 2b       	or	r25, r18
    3a4e:	08 95       	ret

00003a50 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3a50:	83 30       	cpi	r24, 0x03	; 3
    3a52:	81 f0       	breq	.+32     	; 0x3a74 <turnOffPWM+0x24>
    3a54:	28 f4       	brcc	.+10     	; 0x3a60 <turnOffPWM+0x10>
    3a56:	81 30       	cpi	r24, 0x01	; 1
    3a58:	99 f0       	breq	.+38     	; 0x3a80 <turnOffPWM+0x30>
    3a5a:	82 30       	cpi	r24, 0x02	; 2
    3a5c:	a1 f0       	breq	.+40     	; 0x3a86 <turnOffPWM+0x36>
    3a5e:	08 95       	ret
    3a60:	87 30       	cpi	r24, 0x07	; 7
    3a62:	a9 f0       	breq	.+42     	; 0x3a8e <turnOffPWM+0x3e>
    3a64:	88 30       	cpi	r24, 0x08	; 8
    3a66:	b9 f0       	breq	.+46     	; 0x3a96 <turnOffPWM+0x46>
    3a68:	84 30       	cpi	r24, 0x04	; 4
    3a6a:	d1 f4       	brne	.+52     	; 0x3aa0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a70:	8f 7d       	andi	r24, 0xDF	; 223
    3a72:	03 c0       	rjmp	.+6      	; 0x3a7a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3a74:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a78:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a7a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a7e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3a80:	84 b5       	in	r24, 0x24	; 36
    3a82:	8f 77       	andi	r24, 0x7F	; 127
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3a86:	84 b5       	in	r24, 0x24	; 36
    3a88:	8f 7d       	andi	r24, 0xDF	; 223
    3a8a:	84 bd       	out	0x24, r24	; 36
    3a8c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3a8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a92:	8f 77       	andi	r24, 0x7F	; 127
    3a94:	03 c0       	rjmp	.+6      	; 0x3a9c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3a96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a9a:	8f 7d       	andi	r24, 0xDF	; 223
    3a9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3aa0:	08 95       	ret

00003aa2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	ee 5c       	subi	r30, 0xCE	; 206
    3aac:	f8 4f       	sbci	r31, 0xF8	; 248
    3aae:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	ea 5b       	subi	r30, 0xBA	; 186
    3ab4:	f8 4f       	sbci	r31, 0xF8	; 248
    3ab6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3ab8:	88 23       	and	r24, r24
    3aba:	61 f1       	breq	.+88     	; 0x3b14 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	e2 59       	subi	r30, 0x92	; 146
    3ac6:	f8 4f       	sbci	r31, 0xF8	; 248
    3ac8:	c5 91       	lpm	r28, Z+
    3aca:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3acc:	fc 01       	movw	r30, r24
    3ace:	ec 59       	subi	r30, 0x9C	; 156
    3ad0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ad2:	a5 91       	lpm	r26, Z+
    3ad4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3ad6:	61 11       	cpse	r22, r1
    3ad8:	09 c0       	rjmp	.+18     	; 0x3aec <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3ada:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3adc:	f8 94       	cli
		*reg &= ~bit;
    3ade:	88 81       	ld	r24, Y
    3ae0:	20 95       	com	r18
    3ae2:	82 23       	and	r24, r18
    3ae4:	88 83       	st	Y, r24
		*out &= ~bit;
    3ae6:	ec 91       	ld	r30, X
    3ae8:	2e 23       	and	r18, r30
    3aea:	0b c0       	rjmp	.+22     	; 0x3b02 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3aec:	62 30       	cpi	r22, 0x02	; 2
    3aee:	61 f4       	brne	.+24     	; 0x3b08 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3af0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3af2:	f8 94       	cli
		*reg &= ~bit;
    3af4:	88 81       	ld	r24, Y
    3af6:	32 2f       	mov	r19, r18
    3af8:	30 95       	com	r19
    3afa:	83 23       	and	r24, r19
    3afc:	88 83       	st	Y, r24
		*out |= bit;
    3afe:	ec 91       	ld	r30, X
    3b00:	2e 2b       	or	r18, r30
    3b02:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b04:	9f bf       	out	0x3f, r25	; 63
    3b06:	06 c0       	rjmp	.+12     	; 0x3b14 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b08:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b0a:	f8 94       	cli
		*reg |= bit;
    3b0c:	e8 81       	ld	r30, Y
    3b0e:	2e 2b       	or	r18, r30
    3b10:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b12:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	08 95       	ret

00003b1a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3b1a:	1f 93       	push	r17
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3b20:	28 2f       	mov	r18, r24
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	f9 01       	movw	r30, r18
    3b26:	e2 5e       	subi	r30, 0xE2	; 226
    3b28:	f8 4f       	sbci	r31, 0xF8	; 248
    3b2a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3b2c:	f9 01       	movw	r30, r18
    3b2e:	ee 5c       	subi	r30, 0xCE	; 206
    3b30:	f8 4f       	sbci	r31, 0xF8	; 248
    3b32:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3b34:	f9 01       	movw	r30, r18
    3b36:	ea 5b       	subi	r30, 0xBA	; 186
    3b38:	f8 4f       	sbci	r31, 0xF8	; 248
    3b3a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3b3c:	cc 23       	and	r28, r28
    3b3e:	c1 f0       	breq	.+48     	; 0x3b70 <digitalWrite+0x56>
    3b40:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3b42:	81 11       	cpse	r24, r1
    3b44:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <turnOffPWM>

	out = portOutputRegister(port);
    3b48:	ec 2f       	mov	r30, r28
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	ee 0f       	add	r30, r30
    3b4e:	ff 1f       	adc	r31, r31
    3b50:	ec 59       	subi	r30, 0x9C	; 156
    3b52:	f8 4f       	sbci	r31, 0xF8	; 248
    3b54:	a5 91       	lpm	r26, Z+
    3b56:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3b58:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3b5a:	f8 94       	cli

	if (val == LOW) {
    3b5c:	11 11       	cpse	r17, r1
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <digitalWrite+0x4e>
		*out &= ~bit;
    3b60:	8c 91       	ld	r24, X
    3b62:	d0 95       	com	r29
    3b64:	d8 23       	and	r29, r24
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <digitalWrite+0x52>
	} else {
		*out |= bit;
    3b68:	ec 91       	ld	r30, X
    3b6a:	de 2b       	or	r29, r30
    3b6c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3b6e:	9f bf       	out	0x3f, r25	; 63
}
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	1f 91       	pop	r17
    3b76:	08 95       	ret

00003b78 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3b78:	fc 01       	movw	r30, r24
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	0c 94 32 22 	jmp	0x4464	; 0x4464 <free>

00003b82 <_ZN6String10invalidateEv>:
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	ec 01       	movw	r28, r24
    3b88:	88 81       	ld	r24, Y
    3b8a:	99 81       	ldd	r25, Y+1	; 0x01
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	11 f0       	breq	.+4      	; 0x3b94 <_ZN6String10invalidateEv+0x12>
    3b90:	0e 94 32 22 	call	0x4464	; 0x4464 <free>
    3b94:	19 82       	std	Y+1, r1	; 0x01
    3b96:	18 82       	st	Y, r1
    3b98:	1d 82       	std	Y+5, r1	; 0x05
    3b9a:	1c 82       	std	Y+4, r1	; 0x04
    3b9c:	1b 82       	std	Y+3, r1	; 0x03
    3b9e:	1a 82       	std	Y+2, r1	; 0x02
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	08 95       	ret

00003ba6 <_ZN6String12changeBufferEj>:
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	ec 01       	movw	r28, r24
    3bb0:	8b 01       	movw	r16, r22
    3bb2:	6f 5f       	subi	r22, 0xFF	; 255
    3bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb6:	88 81       	ld	r24, Y
    3bb8:	99 81       	ldd	r25, Y+1	; 0x01
    3bba:	0e 94 bb 22 	call	0x4576	; 0x4576 <realloc>
    3bbe:	00 97       	sbiw	r24, 0x00	; 0
    3bc0:	31 f0       	breq	.+12     	; 0x3bce <_ZN6String12changeBufferEj+0x28>
    3bc2:	99 83       	std	Y+1, r25	; 0x01
    3bc4:	88 83       	st	Y, r24
    3bc6:	1b 83       	std	Y+3, r17	; 0x03
    3bc8:	0a 83       	std	Y+2, r16	; 0x02
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	01 c0       	rjmp	.+2      	; 0x3bd0 <_ZN6String12changeBufferEj+0x2a>
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	1f 91       	pop	r17
    3bd6:	0f 91       	pop	r16
    3bd8:	08 95       	ret

00003bda <_ZN6String7reserveEj>:
    3bda:	cf 93       	push	r28
    3bdc:	df 93       	push	r29
    3bde:	ec 01       	movw	r28, r24
    3be0:	88 81       	ld	r24, Y
    3be2:	99 81       	ldd	r25, Y+1	; 0x01
    3be4:	89 2b       	or	r24, r25
    3be6:	29 f0       	breq	.+10     	; 0x3bf2 <_ZN6String7reserveEj+0x18>
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	9b 81       	ldd	r25, Y+3	; 0x03
    3bec:	86 17       	cp	r24, r22
    3bee:	97 07       	cpc	r25, r23
    3bf0:	60 f4       	brcc	.+24     	; 0x3c0a <_ZN6String7reserveEj+0x30>
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <_ZN6String12changeBufferEj>
    3bf8:	88 23       	and	r24, r24
    3bfa:	41 f0       	breq	.+16     	; 0x3c0c <_ZN6String7reserveEj+0x32>
    3bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    3c00:	89 2b       	or	r24, r25
    3c02:	19 f4       	brne	.+6      	; 0x3c0a <_ZN6String7reserveEj+0x30>
    3c04:	e8 81       	ld	r30, Y
    3c06:	f9 81       	ldd	r31, Y+1	; 0x01
    3c08:	10 82       	st	Z, r1
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	08 95       	ret

00003c12 <_ZN6String4copyEPKcj>:
    3c12:	ef 92       	push	r14
    3c14:	ff 92       	push	r15
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	ec 01       	movw	r28, r24
    3c20:	7b 01       	movw	r14, r22
    3c22:	8a 01       	movw	r16, r20
    3c24:	ba 01       	movw	r22, r20
    3c26:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <_ZN6String7reserveEj>
    3c2a:	81 11       	cpse	r24, r1
    3c2c:	04 c0       	rjmp	.+8      	; 0x3c36 <_ZN6String4copyEPKcj+0x24>
    3c2e:	ce 01       	movw	r24, r28
    3c30:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <_ZN6String10invalidateEv>
    3c34:	07 c0       	rjmp	.+14     	; 0x3c44 <_ZN6String4copyEPKcj+0x32>
    3c36:	1d 83       	std	Y+5, r17	; 0x05
    3c38:	0c 83       	std	Y+4, r16	; 0x04
    3c3a:	b7 01       	movw	r22, r14
    3c3c:	88 81       	ld	r24, Y
    3c3e:	99 81       	ldd	r25, Y+1	; 0x01
    3c40:	0e 94 df 23 	call	0x47be	; 0x47be <strcpy>
    3c44:	ce 01       	movw	r24, r28
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	ff 90       	pop	r15
    3c50:	ef 90       	pop	r14
    3c52:	08 95       	ret

00003c54 <_ZN6StringC1EPKc>:
    3c54:	fc 01       	movw	r30, r24
    3c56:	11 82       	std	Z+1, r1	; 0x01
    3c58:	10 82       	st	Z, r1
    3c5a:	13 82       	std	Z+3, r1	; 0x03
    3c5c:	12 82       	std	Z+2, r1	; 0x02
    3c5e:	15 82       	std	Z+5, r1	; 0x05
    3c60:	14 82       	std	Z+4, r1	; 0x04
    3c62:	61 15       	cp	r22, r1
    3c64:	71 05       	cpc	r23, r1
    3c66:	51 f0       	breq	.+20     	; 0x3c7c <_ZN6StringC1EPKc+0x28>
    3c68:	fb 01       	movw	r30, r22
    3c6a:	01 90       	ld	r0, Z+
    3c6c:	00 20       	and	r0, r0
    3c6e:	e9 f7       	brne	.-6      	; 0x3c6a <_ZN6StringC1EPKc+0x16>
    3c70:	31 97       	sbiw	r30, 0x01	; 1
    3c72:	af 01       	movw	r20, r30
    3c74:	46 1b       	sub	r20, r22
    3c76:	57 0b       	sbc	r21, r23
    3c78:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <_ZN6String4copyEPKcj>
    3c7c:	08 95       	ret

00003c7e <_ZN6StringaSERKS_>:
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	ec 01       	movw	r28, r24
    3c84:	fb 01       	movw	r30, r22
    3c86:	86 17       	cp	r24, r22
    3c88:	97 07       	cpc	r25, r23
    3c8a:	61 f0       	breq	.+24     	; 0x3ca4 <_ZN6StringaSERKS_+0x26>
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	61 15       	cp	r22, r1
    3c92:	71 05       	cpc	r23, r1
    3c94:	29 f0       	breq	.+10     	; 0x3ca0 <_ZN6StringaSERKS_+0x22>
    3c96:	44 81       	ldd	r20, Z+4	; 0x04
    3c98:	55 81       	ldd	r21, Z+5	; 0x05
    3c9a:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <_ZN6String4copyEPKcj>
    3c9e:	02 c0       	rjmp	.+4      	; 0x3ca4 <_ZN6StringaSERKS_+0x26>
    3ca0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <_ZN6String10invalidateEv>
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	08 95       	ret

00003cac <_ZN6StringC1ERKS_>:
    3cac:	fc 01       	movw	r30, r24
    3cae:	11 82       	std	Z+1, r1	; 0x01
    3cb0:	10 82       	st	Z, r1
    3cb2:	13 82       	std	Z+3, r1	; 0x03
    3cb4:	12 82       	std	Z+2, r1	; 0x02
    3cb6:	15 82       	std	Z+5, r1	; 0x05
    3cb8:	14 82       	std	Z+4, r1	; 0x04
    3cba:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <_ZN6StringaSERKS_>

00003cbe <_ZN6String6concatEPKcj>:
    3cbe:	ef 92       	push	r14
    3cc0:	ff 92       	push	r15
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	61 15       	cp	r22, r1
    3ccc:	71 05       	cpc	r23, r1
    3cce:	11 f4       	brne	.+4      	; 0x3cd4 <_ZN6String6concatEPKcj+0x16>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	1c c0       	rjmp	.+56     	; 0x3d0c <_ZN6String6concatEPKcj+0x4e>
    3cd4:	41 15       	cp	r20, r1
    3cd6:	51 05       	cpc	r21, r1
    3cd8:	c1 f0       	breq	.+48     	; 0x3d0a <_ZN6String6concatEPKcj+0x4c>
    3cda:	7b 01       	movw	r14, r22
    3cdc:	ec 01       	movw	r28, r24
    3cde:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce2:	8a 01       	movw	r16, r20
    3ce4:	08 0f       	add	r16, r24
    3ce6:	19 1f       	adc	r17, r25
    3ce8:	b8 01       	movw	r22, r16
    3cea:	ce 01       	movw	r24, r28
    3cec:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <_ZN6String7reserveEj>
    3cf0:	88 23       	and	r24, r24
    3cf2:	71 f3       	breq	.-36     	; 0x3cd0 <_ZN6String6concatEPKcj+0x12>
    3cf4:	28 81       	ld	r18, Y
    3cf6:	39 81       	ldd	r19, Y+1	; 0x01
    3cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    3cfc:	b7 01       	movw	r22, r14
    3cfe:	82 0f       	add	r24, r18
    3d00:	93 1f       	adc	r25, r19
    3d02:	0e 94 df 23 	call	0x47be	; 0x47be <strcpy>
    3d06:	1d 83       	std	Y+5, r17	; 0x05
    3d08:	0c 83       	std	Y+4, r16	; 0x04
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	df 91       	pop	r29
    3d0e:	cf 91       	pop	r28
    3d10:	1f 91       	pop	r17
    3d12:	0f 91       	pop	r16
    3d14:	ff 90       	pop	r15
    3d16:	ef 90       	pop	r14
    3d18:	08 95       	ret

00003d1a <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	00 d0       	rcall	.+0      	; 0x3d28 <_ZN6String6concatEh+0xe>
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <_ZN6String6concatEh+0x10>
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	7c 01       	movw	r14, r24
    3d30:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3d32:	4a e0       	ldi	r20, 0x0A	; 10
    3d34:	8e 01       	movw	r16, r28
    3d36:	0f 5f       	subi	r16, 0xFF	; 255
    3d38:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3a:	b8 01       	movw	r22, r16
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3d42:	f8 01       	movw	r30, r16
    3d44:	01 90       	ld	r0, Z+
    3d46:	00 20       	and	r0, r0
    3d48:	e9 f7       	brne	.-6      	; 0x3d44 <_ZN6String6concatEh+0x2a>
    3d4a:	31 97       	sbiw	r30, 0x01	; 1
    3d4c:	af 01       	movw	r20, r30
    3d4e:	40 1b       	sub	r20, r16
    3d50:	51 0b       	sbc	r21, r17
    3d52:	b8 01       	movw	r22, r16
    3d54:	c7 01       	movw	r24, r14
    3d56:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <_ZN6String6concatEPKcj>
}
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	ff 90       	pop	r15
    3d6c:	ef 90       	pop	r14
    3d6e:	08 95       	ret

00003d70 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3d70:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3d74:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d78:	28 17       	cp	r18, r24
    3d7a:	39 07       	cpc	r19, r25
    3d7c:	b9 f4       	brne	.+46     	; 0x3dac <_ZN14SoftwareSerial4readEv+0x3c>
    3d7e:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d82:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d86:	98 17       	cp	r25, r24
    3d88:	89 f0       	breq	.+34     	; 0x3dac <_ZN14SoftwareSerial4readEv+0x3c>
    3d8a:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	e8 5b       	subi	r30, 0xB8	; 184
    3d92:	fb 4f       	sbci	r31, 0xFB	; 251
    3d94:	80 81       	ld	r24, Z
    3d96:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	2f 5f       	subi	r18, 0xFF	; 255
    3d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3da0:	2f 73       	andi	r18, 0x3F	; 63
    3da2:	33 27       	eor	r19, r19
    3da4:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	08 95       	ret
    3dac:	8f ef       	ldi	r24, 0xFF	; 255
    3dae:	9f ef       	ldi	r25, 0xFF	; 255
    3db0:	08 95       	ret

00003db2 <_ZN14SoftwareSerial5writeEh>:
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	dc 01       	movw	r26, r24
    3dba:	5c 96       	adiw	r26, 0x1c	; 28
    3dbc:	8d 91       	ld	r24, X+
    3dbe:	9c 91       	ld	r25, X
    3dc0:	5d 97       	sbiw	r26, 0x1d	; 29
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	39 f4       	brne	.+14     	; 0x3dd4 <_ZN14SoftwareSerial5writeEh+0x22>
    3dc6:	21 e0       	ldi	r18, 0x01	; 1
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	13 96       	adiw	r26, 0x03	; 3
    3dcc:	3c 93       	st	X, r19
    3dce:	2e 93       	st	-X, r18
    3dd0:	12 97       	sbiw	r26, 0x02	; 2
    3dd2:	3b c0       	rjmp	.+118    	; 0x3e4a <_ZN14SoftwareSerial5writeEh+0x98>
    3dd4:	51 96       	adiw	r26, 0x11	; 17
    3dd6:	ed 91       	ld	r30, X+
    3dd8:	fc 91       	ld	r31, X
    3dda:	52 97       	sbiw	r26, 0x12	; 18
    3ddc:	50 96       	adiw	r26, 0x10	; 16
    3dde:	2c 91       	ld	r18, X
    3de0:	50 97       	sbiw	r26, 0x10	; 16
    3de2:	32 2f       	mov	r19, r18
    3de4:	30 95       	com	r19
    3de6:	1f b7       	in	r17, 0x3f	; 63
    3de8:	5e 96       	adiw	r26, 0x1e	; 30
    3dea:	4c 91       	ld	r20, X
    3dec:	5e 97       	sbiw	r26, 0x1e	; 30
    3dee:	74 2f       	mov	r23, r20
    3df0:	72 70       	andi	r23, 0x02	; 2
    3df2:	41 fd       	sbrc	r20, 1
    3df4:	60 95       	com	r22
    3df6:	f8 94       	cli
    3df8:	40 81       	ld	r20, Z
    3dfa:	77 23       	and	r23, r23
    3dfc:	11 f0       	breq	.+4      	; 0x3e02 <_ZN14SoftwareSerial5writeEh+0x50>
    3dfe:	42 2b       	or	r20, r18
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <_ZN14SoftwareSerial5writeEh+0x52>
    3e02:	43 23       	and	r20, r19
    3e04:	40 83       	st	Z, r20
    3e06:	ec 01       	movw	r28, r24
    3e08:	21 97       	sbiw	r28, 0x01	; 1
    3e0a:	f1 f7       	brne	.-4      	; 0x3e08 <_ZN14SoftwareSerial5writeEh+0x56>
    3e0c:	48 e0       	ldi	r20, 0x08	; 8
    3e0e:	50 81       	ld	r21, Z
    3e10:	60 ff       	sbrs	r22, 0
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <_ZN14SoftwareSerial5writeEh+0x66>
    3e14:	52 2b       	or	r21, r18
    3e16:	01 c0       	rjmp	.+2      	; 0x3e1a <_ZN14SoftwareSerial5writeEh+0x68>
    3e18:	53 23       	and	r21, r19
    3e1a:	50 83       	st	Z, r21
    3e1c:	ec 01       	movw	r28, r24
    3e1e:	21 97       	sbiw	r28, 0x01	; 1
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <_ZN14SoftwareSerial5writeEh+0x6c>
    3e22:	66 95       	lsr	r22
    3e24:	41 50       	subi	r20, 0x01	; 1
    3e26:	99 f7       	brne	.-26     	; 0x3e0e <_ZN14SoftwareSerial5writeEh+0x5c>
    3e28:	80 81       	ld	r24, Z
    3e2a:	77 23       	and	r23, r23
    3e2c:	19 f0       	breq	.+6      	; 0x3e34 <_ZN14SoftwareSerial5writeEh+0x82>
    3e2e:	83 23       	and	r24, r19
    3e30:	80 83       	st	Z, r24
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <_ZN14SoftwareSerial5writeEh+0x86>
    3e34:	28 2b       	or	r18, r24
    3e36:	20 83       	st	Z, r18
    3e38:	1f bf       	out	0x3f, r17	; 63
    3e3a:	5c 96       	adiw	r26, 0x1c	; 28
    3e3c:	8d 91       	ld	r24, X+
    3e3e:	9c 91       	ld	r25, X
    3e40:	5d 97       	sbiw	r26, 0x1d	; 29
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	f1 f7       	brne	.-4      	; 0x3e42 <_ZN14SoftwareSerial5writeEh+0x90>
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	08 95       	ret

00003e52 <_ZN14SoftwareSerial5flushEv>:
    3e52:	08 95       	ret

00003e54 <_ZN14SoftwareSerial4peekEv>:
    3e54:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3e58:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e5c:	28 17       	cp	r18, r24
    3e5e:	39 07       	cpc	r19, r25
    3e60:	71 f4       	brne	.+28     	; 0x3e7e <_ZN14SoftwareSerial4peekEv+0x2a>
    3e62:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e66:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e6a:	98 17       	cp	r25, r24
    3e6c:	41 f0       	breq	.+16     	; 0x3e7e <_ZN14SoftwareSerial4peekEv+0x2a>
    3e6e:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	e8 5b       	subi	r30, 0xB8	; 184
    3e76:	fb 4f       	sbci	r31, 0xFB	; 251
    3e78:	80 81       	ld	r24, Z
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	08 95       	ret
    3e7e:	8f ef       	ldi	r24, 0xFF	; 255
    3e80:	9f ef       	ldi	r25, 0xFF	; 255
    3e82:	08 95       	ret

00003e84 <_ZN14SoftwareSerial9availableEv>:
    3e84:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3e88:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e8c:	28 17       	cp	r18, r24
    3e8e:	39 07       	cpc	r19, r25
    3e90:	71 f4       	brne	.+28     	; 0x3eae <_ZN14SoftwareSerial9availableEv+0x2a>
    3e92:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e96:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	80 5c       	subi	r24, 0xC0	; 192
    3e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea0:	82 1b       	sub	r24, r18
    3ea2:	91 09       	sbc	r25, r1
    3ea4:	60 e4       	ldi	r22, 0x40	; 64
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	0e 94 3f 21 	call	0x427e	; 0x427e <__divmodhi4>
    3eac:	08 95       	ret
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	08 95       	ret

00003eb4 <_ZN14SoftwareSerial13stopListeningEv>:
    3eb4:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3eb8:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ebc:	e8 17       	cp	r30, r24
    3ebe:	f9 07       	cpc	r31, r25
    3ec0:	69 f4       	brne	.+26     	; 0x3edc <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3ec2:	a3 89       	ldd	r26, Z+19	; 0x13
    3ec4:	b4 89       	ldd	r27, Z+20	; 0x14
    3ec6:	9c 91       	ld	r25, X
    3ec8:	85 89       	ldd	r24, Z+21	; 0x15
    3eca:	80 95       	com	r24
    3ecc:	89 23       	and	r24, r25
    3ece:	8c 93       	st	X, r24
    3ed0:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ed4:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	08 95       	ret
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	08 95       	ret

00003ee0 <_ZN14SoftwareSerial6listenEv>:
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	ec 01       	movw	r28, r24
    3ee6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ee8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3eea:	89 2b       	or	r24, r25
    3eec:	f1 f0       	breq	.+60     	; 0x3f2a <_ZN14SoftwareSerial6listenEv+0x4a>
    3eee:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3ef2:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ef6:	c8 17       	cp	r28, r24
    3ef8:	d9 07       	cpc	r29, r25
    3efa:	b9 f0       	breq	.+46     	; 0x3f2a <_ZN14SoftwareSerial6listenEv+0x4a>
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	11 f0       	breq	.+4      	; 0x3f04 <_ZN14SoftwareSerial6listenEv+0x24>
    3f00:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <_ZN14SoftwareSerial13stopListeningEv>
    3f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f06:	8e 7f       	andi	r24, 0xFE	; 254
    3f08:	8e 8f       	std	Y+30, r24	; 0x1e
    3f0a:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f0e:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f12:	d0 93 89 04 	sts	0x0489, r29	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f16:	c0 93 88 04 	sts	0x0488, r28	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3f1a:	eb 89       	ldd	r30, Y+19	; 0x13
    3f1c:	fc 89       	ldd	r31, Y+20	; 0x14
    3f1e:	90 81       	ld	r25, Z
    3f20:	8d 89       	ldd	r24, Y+21	; 0x15
    3f22:	89 2b       	or	r24, r25
    3f24:	80 83       	st	Z, r24
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	01 c0       	rjmp	.+2      	; 0x3f2c <_ZN14SoftwareSerial6listenEv+0x4c>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	08 95       	ret

00003f32 <__vector_3>:
    3f32:	1f 92       	push	r1
    3f34:	0f 92       	push	r0
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	0f 92       	push	r0
    3f3a:	11 24       	eor	r1, r1
    3f3c:	2f 93       	push	r18
    3f3e:	3f 93       	push	r19
    3f40:	4f 93       	push	r20
    3f42:	5f 93       	push	r21
    3f44:	6f 93       	push	r22
    3f46:	7f 93       	push	r23
    3f48:	8f 93       	push	r24
    3f4a:	9f 93       	push	r25
    3f4c:	af 93       	push	r26
    3f4e:	bf 93       	push	r27
    3f50:	ef 93       	push	r30
    3f52:	ff 93       	push	r31
    3f54:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <_ZN14SoftwareSerial13active_objectE>
    3f58:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f5c:	30 97       	sbiw	r30, 0x00	; 0
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <__vector_3+0x30>
    3f60:	51 c0       	rjmp	.+162    	; 0x4004 <__vector_3+0xd2>
    3f62:	96 8d       	ldd	r25, Z+30	; 0x1e
    3f64:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f66:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f68:	85 85       	ldd	r24, Z+13	; 0x0d
    3f6a:	91 ff       	sbrs	r25, 1
    3f6c:	04 c0       	rjmp	.+8      	; 0x3f76 <__vector_3+0x44>
    3f6e:	9c 91       	ld	r25, X
    3f70:	89 23       	and	r24, r25
    3f72:	29 f4       	brne	.+10     	; 0x3f7e <__vector_3+0x4c>
    3f74:	47 c0       	rjmp	.+142    	; 0x4004 <__vector_3+0xd2>
    3f76:	9c 91       	ld	r25, X
    3f78:	89 23       	and	r24, r25
    3f7a:	09 f0       	breq	.+2      	; 0x3f7e <__vector_3+0x4c>
    3f7c:	43 c0       	rjmp	.+134    	; 0x4004 <__vector_3+0xd2>
    3f7e:	a3 89       	ldd	r26, Z+19	; 0x13
    3f80:	b4 89       	ldd	r27, Z+20	; 0x14
    3f82:	9c 91       	ld	r25, X
    3f84:	85 89       	ldd	r24, Z+21	; 0x15
    3f86:	80 95       	com	r24
    3f88:	89 23       	and	r24, r25
    3f8a:	8c 93       	st	X, r24
    3f8c:	86 89       	ldd	r24, Z+22	; 0x16
    3f8e:	97 89       	ldd	r25, Z+23	; 0x17
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <__vector_3+0x5e>
    3f94:	60 8d       	ldd	r22, Z+24	; 0x18
    3f96:	71 8d       	ldd	r23, Z+25	; 0x19
    3f98:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f9a:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f9c:	55 85       	ldd	r21, Z+13	; 0x0d
    3f9e:	38 e0       	ldi	r19, 0x08	; 8
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <__vector_3+0x72>
    3fa8:	82 2f       	mov	r24, r18
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	95 95       	asr	r25
    3fae:	87 95       	ror	r24
    3fb0:	28 2f       	mov	r18, r24
    3fb2:	4c 91       	ld	r20, X
    3fb4:	45 23       	and	r20, r21
    3fb6:	09 f0       	breq	.+2      	; 0x3fba <__vector_3+0x88>
    3fb8:	20 68       	ori	r18, 0x80	; 128
    3fba:	31 50       	subi	r19, 0x01	; 1
    3fbc:	91 f7       	brne	.-28     	; 0x3fa2 <__vector_3+0x70>
    3fbe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fc0:	81 fd       	sbrc	r24, 1
    3fc2:	20 95       	com	r18
    3fc4:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	01 96       	adiw	r24, 0x01	; 1
    3fcc:	8f 73       	andi	r24, 0x3F	; 63
    3fce:	99 27       	eor	r25, r25
    3fd0:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fd4:	38 17       	cp	r19, r24
    3fd6:	49 f0       	breq	.+18     	; 0x3fea <__vector_3+0xb8>
    3fd8:	a0 91 47 04 	lds	r26, 0x0447	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	a8 5b       	subi	r26, 0xB8	; 184
    3fe0:	bb 4f       	sbci	r27, 0xFB	; 251
    3fe2:	2c 93       	st	X, r18
    3fe4:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fe8:	03 c0       	rjmp	.+6      	; 0x3ff0 <__vector_3+0xbe>
    3fea:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fec:	81 60       	ori	r24, 0x01	; 1
    3fee:	86 8f       	std	Z+30, r24	; 0x1e
    3ff0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ff2:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <__vector_3+0xc2>
    3ff8:	a3 89       	ldd	r26, Z+19	; 0x13
    3ffa:	b4 89       	ldd	r27, Z+20	; 0x14
    3ffc:	9c 91       	ld	r25, X
    3ffe:	85 89       	ldd	r24, Z+21	; 0x15
    4000:	89 2b       	or	r24, r25
    4002:	8c 93       	st	X, r24
    4004:	ff 91       	pop	r31
    4006:	ef 91       	pop	r30
    4008:	bf 91       	pop	r27
    400a:	af 91       	pop	r26
    400c:	9f 91       	pop	r25
    400e:	8f 91       	pop	r24
    4010:	7f 91       	pop	r23
    4012:	6f 91       	pop	r22
    4014:	5f 91       	pop	r21
    4016:	4f 91       	pop	r20
    4018:	3f 91       	pop	r19
    401a:	2f 91       	pop	r18
    401c:	0f 90       	pop	r0
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	0f 90       	pop	r0
    4022:	1f 90       	pop	r1
    4024:	18 95       	reti

00004026 <_ZN14SoftwareSerial5setTXEh>:
    4026:	1f 93       	push	r17
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	ec 01       	movw	r28, r24
    402e:	16 2f       	mov	r17, r22
    4030:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4032:	66 95       	lsr	r22
    4034:	61 70       	andi	r22, 0x01	; 1
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	68 27       	eor	r22, r24
    403a:	81 2f       	mov	r24, r17
    403c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
    4040:	61 e0       	ldi	r22, 0x01	; 1
    4042:	81 2f       	mov	r24, r17
    4044:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <pinMode>
    4048:	81 2f       	mov	r24, r17
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	fc 01       	movw	r30, r24
    404e:	ee 5c       	subi	r30, 0xCE	; 206
    4050:	f8 4f       	sbci	r31, 0xF8	; 248
    4052:	e4 91       	lpm	r30, Z
    4054:	e8 8b       	std	Y+16, r30	; 0x10
    4056:	fc 01       	movw	r30, r24
    4058:	ea 5b       	subi	r30, 0xBA	; 186
    405a:	f8 4f       	sbci	r31, 0xF8	; 248
    405c:	e4 91       	lpm	r30, Z
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	ee 0f       	add	r30, r30
    4062:	ff 1f       	adc	r31, r31
    4064:	ec 59       	subi	r30, 0x9C	; 156
    4066:	f8 4f       	sbci	r31, 0xF8	; 248
    4068:	85 91       	lpm	r24, Z+
    406a:	94 91       	lpm	r25, Z
    406c:	9a 8b       	std	Y+18, r25	; 0x12
    406e:	89 8b       	std	Y+17, r24	; 0x11
    4070:	df 91       	pop	r29
    4072:	cf 91       	pop	r28
    4074:	1f 91       	pop	r17
    4076:	08 95       	ret

00004078 <_ZN14SoftwareSerial5setRXEh>:
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	ec 01       	movw	r28, r24
    4080:	16 2f       	mov	r17, r22
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	81 2f       	mov	r24, r17
    4086:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <pinMode>
    408a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    408c:	81 fd       	sbrc	r24, 1
    408e:	04 c0       	rjmp	.+8      	; 0x4098 <_ZN14SoftwareSerial5setRXEh+0x20>
    4090:	61 e0       	ldi	r22, 0x01	; 1
    4092:	81 2f       	mov	r24, r17
    4094:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <digitalWrite>
    4098:	1c 87       	std	Y+12, r17	; 0x0c
    409a:	81 2f       	mov	r24, r17
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	fc 01       	movw	r30, r24
    40a0:	ee 5c       	subi	r30, 0xCE	; 206
    40a2:	f8 4f       	sbci	r31, 0xF8	; 248
    40a4:	e4 91       	lpm	r30, Z
    40a6:	ed 87       	std	Y+13, r30	; 0x0d
    40a8:	fc 01       	movw	r30, r24
    40aa:	ea 5b       	subi	r30, 0xBA	; 186
    40ac:	f8 4f       	sbci	r31, 0xF8	; 248
    40ae:	e4 91       	lpm	r30, Z
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	ee 0f       	add	r30, r30
    40b4:	ff 1f       	adc	r31, r31
    40b6:	e6 5a       	subi	r30, 0xA6	; 166
    40b8:	f8 4f       	sbci	r31, 0xF8	; 248
    40ba:	85 91       	lpm	r24, Z+
    40bc:	94 91       	lpm	r25, Z
    40be:	9f 87       	std	Y+15, r25	; 0x0f
    40c0:	8e 87       	std	Y+14, r24	; 0x0e
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	08 95       	ret

000040ca <_ZN14SoftwareSerialC1Ehhb>:
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	ec 01       	movw	r28, r24
    40d2:	16 2f       	mov	r17, r22
    40d4:	1b 82       	std	Y+3, r1	; 0x03
    40d6:	1a 82       	std	Y+2, r1	; 0x02
    40d8:	88 ee       	ldi	r24, 0xE8	; 232
    40da:	93 e0       	ldi	r25, 0x03	; 3
    40dc:	a0 e0       	ldi	r26, 0x00	; 0
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	8c 83       	std	Y+4, r24	; 0x04
    40e2:	9d 83       	std	Y+5, r25	; 0x05
    40e4:	ae 83       	std	Y+6, r26	; 0x06
    40e6:	bf 83       	std	Y+7, r27	; 0x07
    40e8:	8f e8       	ldi	r24, 0x8F	; 143
    40ea:	91 e0       	ldi	r25, 0x01	; 1
    40ec:	99 83       	std	Y+1, r25	; 0x01
    40ee:	88 83       	st	Y, r24
    40f0:	1f 8a       	std	Y+23, r1	; 0x17
    40f2:	1e 8a       	std	Y+22, r1	; 0x16
    40f4:	19 8e       	std	Y+25, r1	; 0x19
    40f6:	18 8e       	std	Y+24, r1	; 0x18
    40f8:	1b 8e       	std	Y+27, r1	; 0x1b
    40fa:	1a 8e       	std	Y+26, r1	; 0x1a
    40fc:	1d 8e       	std	Y+29, r1	; 0x1d
    40fe:	1c 8e       	std	Y+28, r1	; 0x1c
    4100:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4102:	8e 7f       	andi	r24, 0xFE	; 254
    4104:	20 fb       	bst	r18, 0
    4106:	81 f9       	bld	r24, 1
    4108:	8e 8f       	std	Y+30, r24	; 0x1e
    410a:	64 2f       	mov	r22, r20
    410c:	ce 01       	movw	r24, r28
    410e:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN14SoftwareSerial5setTXEh>
    4112:	61 2f       	mov	r22, r17
    4114:	ce 01       	movw	r24, r28
    4116:	df 91       	pop	r29
    4118:	cf 91       	pop	r28
    411a:	1f 91       	pop	r17
    411c:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <_ZN14SoftwareSerial5setRXEh>

00004120 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4120:	cf 93       	push	r28
    4122:	df 93       	push	r29
    4124:	ec 01       	movw	r28, r24
    4126:	9a 01       	movw	r18, r20
    4128:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    412a:	1b 8e       	std	Y+27, r1	; 0x1b
    412c:	1a 8e       	std	Y+26, r1	; 0x1a
    412e:	19 8e       	std	Y+25, r1	; 0x19
    4130:	18 8e       	std	Y+24, r1	; 0x18
    4132:	1f 8a       	std	Y+23, r1	; 0x17
    4134:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	79 e0       	ldi	r23, 0x09	; 9
    413a:	8d e3       	ldi	r24, 0x3D	; 61
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0e 94 75 21 	call	0x42ea	; 0x42ea <__divmodsi4>
    4142:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4144:	24 30       	cpi	r18, 0x04	; 4
    4146:	31 05       	cpc	r19, r1
    4148:	18 f0       	brcs	.+6      	; 0x4150 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    414a:	c9 01       	movw	r24, r18
    414c:	03 97       	sbiw	r24, 0x03	; 3
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4154:	9d 8f       	std	Y+29, r25	; 0x1d
    4156:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4158:	6c 85       	ldd	r22, Y+12	; 0x0c
    415a:	66 31       	cpi	r22, 0x16	; 22
    415c:	08 f0       	brcs	.+2      	; 0x4160 <_ZN14SoftwareSerial5beginEl+0x40>
    415e:	69 c0       	rjmp	.+210    	; 0x4232 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4160:	c9 01       	movw	r24, r18
    4162:	96 95       	lsr	r25
    4164:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4166:	84 31       	cpi	r24, 0x14	; 20
    4168:	91 05       	cpc	r25, r1
    416a:	10 f0       	brcs	.+4      	; 0x4170 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    416c:	43 97       	sbiw	r24, 0x13	; 19
    416e:	02 c0       	rjmp	.+4      	; 0x4174 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4174:	9f 8b       	std	Y+23, r25	; 0x17
    4176:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4178:	36 97       	sbiw	r30, 0x06	; 6
    417a:	18 f0       	brcs	.+6      	; 0x4182 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    417c:	c9 01       	movw	r24, r18
    417e:	05 97       	sbiw	r24, 0x05	; 5
    4180:	02 c0       	rjmp	.+4      	; 0x4186 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4186:	99 8f       	std	Y+25, r25	; 0x19
    4188:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    418a:	c9 01       	movw	r24, r18
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	28 0f       	add	r18, r24
    4192:	39 1f       	adc	r19, r25
    4194:	36 95       	lsr	r19
    4196:	27 95       	ror	r18
    4198:	36 95       	lsr	r19
    419a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    419c:	2d 30       	cpi	r18, 0x0D	; 13
    419e:	31 05       	cpc	r19, r1
    41a0:	18 f0       	brcs	.+6      	; 0x41a8 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    41a2:	2c 50       	subi	r18, 0x0C	; 12
    41a4:	31 09       	sbc	r19, r1
    41a6:	02 c0       	rjmp	.+4      	; 0x41ac <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    41a8:	21 e0       	ldi	r18, 0x01	; 1
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    41ac:	3b 8f       	std	Y+27, r19	; 0x1b
    41ae:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    41b0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    41b4:	68 30       	cpi	r22, 0x08	; 8
    41b6:	50 f0       	brcs	.+20     	; 0x41cc <_ZN14SoftwareSerial5beginEl+0xac>
    41b8:	21 e0       	ldi	r18, 0x01	; 1
    41ba:	6e 30       	cpi	r22, 0x0E	; 14
    41bc:	08 f4       	brcc	.+2      	; 0x41c0 <_ZN14SoftwareSerial5beginEl+0xa0>
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	01 c0       	rjmp	.+2      	; 0x41c6 <_ZN14SoftwareSerial5beginEl+0xa6>
    41c4:	88 0f       	add	r24, r24
    41c6:	2a 95       	dec	r18
    41c8:	ea f7       	brpl	.-6      	; 0x41c4 <_ZN14SoftwareSerial5beginEl+0xa4>
    41ca:	01 c0       	rjmp	.+2      	; 0x41ce <_ZN14SoftwareSerial5beginEl+0xae>
    41cc:	84 e0       	ldi	r24, 0x04	; 4
    41ce:	89 2b       	or	r24, r25
    41d0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    41d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    41d6:	98 30       	cpi	r25, 0x08	; 8
    41d8:	38 f0       	brcs	.+14     	; 0x41e8 <_ZN14SoftwareSerial5beginEl+0xc8>
    41da:	9e 30       	cpi	r25, 0x0E	; 14
    41dc:	40 f0       	brcs	.+16     	; 0x41ee <_ZN14SoftwareSerial5beginEl+0xce>
    41de:	96 31       	cpi	r25, 0x16	; 22
    41e0:	48 f0       	brcs	.+18     	; 0x41f4 <_ZN14SoftwareSerial5beginEl+0xd4>
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	08 c0       	rjmp	.+16     	; 0x41f8 <_ZN14SoftwareSerial5beginEl+0xd8>
    41e8:	2d e6       	ldi	r18, 0x6D	; 109
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	05 c0       	rjmp	.+10     	; 0x41f8 <_ZN14SoftwareSerial5beginEl+0xd8>
    41ee:	2b e6       	ldi	r18, 0x6B	; 107
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	02 c0       	rjmp	.+4      	; 0x41f8 <_ZN14SoftwareSerial5beginEl+0xd8>
    41f4:	2c e6       	ldi	r18, 0x6C	; 108
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	3c 8b       	std	Y+20, r19	; 0x14
    41fa:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    41fc:	98 30       	cpi	r25, 0x08	; 8
    41fe:	30 f4       	brcc	.+12     	; 0x420c <_ZN14SoftwareSerial5beginEl+0xec>
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	01 c0       	rjmp	.+2      	; 0x4206 <_ZN14SoftwareSerial5beginEl+0xe6>
    4204:	88 0f       	add	r24, r24
    4206:	9a 95       	dec	r25
    4208:	ea f7       	brpl	.-6      	; 0x4204 <_ZN14SoftwareSerial5beginEl+0xe4>
    420a:	0e c0       	rjmp	.+28     	; 0x4228 <_ZN14SoftwareSerial5beginEl+0x108>
    420c:	29 2f       	mov	r18, r25
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	9e 30       	cpi	r25, 0x0E	; 14
    4212:	18 f4       	brcc	.+6      	; 0x421a <_ZN14SoftwareSerial5beginEl+0xfa>
    4214:	28 50       	subi	r18, 0x08	; 8
    4216:	31 09       	sbc	r19, r1
    4218:	02 c0       	rjmp	.+4      	; 0x421e <_ZN14SoftwareSerial5beginEl+0xfe>
    421a:	2e 50       	subi	r18, 0x0E	; 14
    421c:	31 09       	sbc	r19, r1
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <_ZN14SoftwareSerial5beginEl+0x104>
    4222:	88 0f       	add	r24, r24
    4224:	2a 95       	dec	r18
    4226:	ea f7       	brpl	.-6      	; 0x4222 <_ZN14SoftwareSerial5beginEl+0x102>
    4228:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    422a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    422c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4232:	ce 01       	movw	r24, r28
}
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4238:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <_ZN14SoftwareSerial6listenEv>

0000423c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    423c:	08 95       	ret

0000423e <__udivmodqi4>:
    423e:	99 1b       	sub	r25, r25
    4240:	79 e0       	ldi	r23, 0x09	; 9
    4242:	04 c0       	rjmp	.+8      	; 0x424c <__udivmodqi4_ep>

00004244 <__udivmodqi4_loop>:
    4244:	99 1f       	adc	r25, r25
    4246:	96 17       	cp	r25, r22
    4248:	08 f0       	brcs	.+2      	; 0x424c <__udivmodqi4_ep>
    424a:	96 1b       	sub	r25, r22

0000424c <__udivmodqi4_ep>:
    424c:	88 1f       	adc	r24, r24
    424e:	7a 95       	dec	r23
    4250:	c9 f7       	brne	.-14     	; 0x4244 <__udivmodqi4_loop>
    4252:	80 95       	com	r24
    4254:	08 95       	ret

00004256 <__udivmodhi4>:
    4256:	aa 1b       	sub	r26, r26
    4258:	bb 1b       	sub	r27, r27
    425a:	51 e1       	ldi	r21, 0x11	; 17
    425c:	07 c0       	rjmp	.+14     	; 0x426c <__udivmodhi4_ep>

0000425e <__udivmodhi4_loop>:
    425e:	aa 1f       	adc	r26, r26
    4260:	bb 1f       	adc	r27, r27
    4262:	a6 17       	cp	r26, r22
    4264:	b7 07       	cpc	r27, r23
    4266:	10 f0       	brcs	.+4      	; 0x426c <__udivmodhi4_ep>
    4268:	a6 1b       	sub	r26, r22
    426a:	b7 0b       	sbc	r27, r23

0000426c <__udivmodhi4_ep>:
    426c:	88 1f       	adc	r24, r24
    426e:	99 1f       	adc	r25, r25
    4270:	5a 95       	dec	r21
    4272:	a9 f7       	brne	.-22     	; 0x425e <__udivmodhi4_loop>
    4274:	80 95       	com	r24
    4276:	90 95       	com	r25
    4278:	bc 01       	movw	r22, r24
    427a:	cd 01       	movw	r24, r26
    427c:	08 95       	ret

0000427e <__divmodhi4>:
    427e:	97 fb       	bst	r25, 7
    4280:	07 2e       	mov	r0, r23
    4282:	16 f4       	brtc	.+4      	; 0x4288 <__divmodhi4+0xa>
    4284:	00 94       	com	r0
    4286:	07 d0       	rcall	.+14     	; 0x4296 <__divmodhi4_neg1>
    4288:	77 fd       	sbrc	r23, 7
    428a:	09 d0       	rcall	.+18     	; 0x429e <__divmodhi4_neg2>
    428c:	0e 94 2b 21 	call	0x4256	; 0x4256 <__udivmodhi4>
    4290:	07 fc       	sbrc	r0, 7
    4292:	05 d0       	rcall	.+10     	; 0x429e <__divmodhi4_neg2>
    4294:	3e f4       	brtc	.+14     	; 0x42a4 <__divmodhi4_exit>

00004296 <__divmodhi4_neg1>:
    4296:	90 95       	com	r25
    4298:	81 95       	neg	r24
    429a:	9f 4f       	sbci	r25, 0xFF	; 255
    429c:	08 95       	ret

0000429e <__divmodhi4_neg2>:
    429e:	70 95       	com	r23
    42a0:	61 95       	neg	r22
    42a2:	7f 4f       	sbci	r23, 0xFF	; 255

000042a4 <__divmodhi4_exit>:
    42a4:	08 95       	ret

000042a6 <__udivmodsi4>:
    42a6:	a1 e2       	ldi	r26, 0x21	; 33
    42a8:	1a 2e       	mov	r1, r26
    42aa:	aa 1b       	sub	r26, r26
    42ac:	bb 1b       	sub	r27, r27
    42ae:	fd 01       	movw	r30, r26
    42b0:	0d c0       	rjmp	.+26     	; 0x42cc <__udivmodsi4_ep>

000042b2 <__udivmodsi4_loop>:
    42b2:	aa 1f       	adc	r26, r26
    42b4:	bb 1f       	adc	r27, r27
    42b6:	ee 1f       	adc	r30, r30
    42b8:	ff 1f       	adc	r31, r31
    42ba:	a2 17       	cp	r26, r18
    42bc:	b3 07       	cpc	r27, r19
    42be:	e4 07       	cpc	r30, r20
    42c0:	f5 07       	cpc	r31, r21
    42c2:	20 f0       	brcs	.+8      	; 0x42cc <__udivmodsi4_ep>
    42c4:	a2 1b       	sub	r26, r18
    42c6:	b3 0b       	sbc	r27, r19
    42c8:	e4 0b       	sbc	r30, r20
    42ca:	f5 0b       	sbc	r31, r21

000042cc <__udivmodsi4_ep>:
    42cc:	66 1f       	adc	r22, r22
    42ce:	77 1f       	adc	r23, r23
    42d0:	88 1f       	adc	r24, r24
    42d2:	99 1f       	adc	r25, r25
    42d4:	1a 94       	dec	r1
    42d6:	69 f7       	brne	.-38     	; 0x42b2 <__udivmodsi4_loop>
    42d8:	60 95       	com	r22
    42da:	70 95       	com	r23
    42dc:	80 95       	com	r24
    42de:	90 95       	com	r25
    42e0:	9b 01       	movw	r18, r22
    42e2:	ac 01       	movw	r20, r24
    42e4:	bd 01       	movw	r22, r26
    42e6:	cf 01       	movw	r24, r30
    42e8:	08 95       	ret

000042ea <__divmodsi4>:
    42ea:	05 2e       	mov	r0, r21
    42ec:	97 fb       	bst	r25, 7
    42ee:	1e f4       	brtc	.+6      	; 0x42f6 <__divmodsi4+0xc>
    42f0:	00 94       	com	r0
    42f2:	0e 94 8c 21 	call	0x4318	; 0x4318 <__negsi2>
    42f6:	57 fd       	sbrc	r21, 7
    42f8:	07 d0       	rcall	.+14     	; 0x4308 <__divmodsi4_neg2>
    42fa:	0e 94 53 21 	call	0x42a6	; 0x42a6 <__udivmodsi4>
    42fe:	07 fc       	sbrc	r0, 7
    4300:	03 d0       	rcall	.+6      	; 0x4308 <__divmodsi4_neg2>
    4302:	4e f4       	brtc	.+18     	; 0x4316 <__divmodsi4_exit>
    4304:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__negsi2>

00004308 <__divmodsi4_neg2>:
    4308:	50 95       	com	r21
    430a:	40 95       	com	r20
    430c:	30 95       	com	r19
    430e:	21 95       	neg	r18
    4310:	3f 4f       	sbci	r19, 0xFF	; 255
    4312:	4f 4f       	sbci	r20, 0xFF	; 255
    4314:	5f 4f       	sbci	r21, 0xFF	; 255

00004316 <__divmodsi4_exit>:
    4316:	08 95       	ret

00004318 <__negsi2>:
    4318:	90 95       	com	r25
    431a:	80 95       	com	r24
    431c:	70 95       	com	r23
    431e:	61 95       	neg	r22
    4320:	7f 4f       	sbci	r23, 0xFF	; 255
    4322:	8f 4f       	sbci	r24, 0xFF	; 255
    4324:	9f 4f       	sbci	r25, 0xFF	; 255
    4326:	08 95       	ret

00004328 <__tablejump2__>:
    4328:	ee 0f       	add	r30, r30
    432a:	ff 1f       	adc	r31, r31
    432c:	05 90       	lpm	r0, Z+
    432e:	f4 91       	lpm	r31, Z
    4330:	e0 2d       	mov	r30, r0
    4332:	09 94       	ijmp

00004334 <malloc>:
    4334:	0f 93       	push	r16
    4336:	1f 93       	push	r17
    4338:	cf 93       	push	r28
    433a:	df 93       	push	r29
    433c:	82 30       	cpi	r24, 0x02	; 2
    433e:	91 05       	cpc	r25, r1
    4340:	10 f4       	brcc	.+4      	; 0x4346 <malloc+0x12>
    4342:	82 e0       	ldi	r24, 0x02	; 2
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <__flp>
    434a:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <__flp+0x1>
    434e:	20 e0       	ldi	r18, 0x00	; 0
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	a0 e0       	ldi	r26, 0x00	; 0
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	30 97       	sbiw	r30, 0x00	; 0
    4358:	19 f1       	breq	.+70     	; 0x43a0 <malloc+0x6c>
    435a:	40 81       	ld	r20, Z
    435c:	51 81       	ldd	r21, Z+1	; 0x01
    435e:	02 81       	ldd	r16, Z+2	; 0x02
    4360:	13 81       	ldd	r17, Z+3	; 0x03
    4362:	48 17       	cp	r20, r24
    4364:	59 07       	cpc	r21, r25
    4366:	c8 f0       	brcs	.+50     	; 0x439a <malloc+0x66>
    4368:	84 17       	cp	r24, r20
    436a:	95 07       	cpc	r25, r21
    436c:	69 f4       	brne	.+26     	; 0x4388 <malloc+0x54>
    436e:	10 97       	sbiw	r26, 0x00	; 0
    4370:	31 f0       	breq	.+12     	; 0x437e <malloc+0x4a>
    4372:	12 96       	adiw	r26, 0x02	; 2
    4374:	0c 93       	st	X, r16
    4376:	12 97       	sbiw	r26, 0x02	; 2
    4378:	13 96       	adiw	r26, 0x03	; 3
    437a:	1c 93       	st	X, r17
    437c:	27 c0       	rjmp	.+78     	; 0x43cc <malloc+0x98>
    437e:	00 93 8c 04 	sts	0x048C, r16	; 0x80048c <__flp>
    4382:	10 93 8d 04 	sts	0x048D, r17	; 0x80048d <__flp+0x1>
    4386:	22 c0       	rjmp	.+68     	; 0x43cc <malloc+0x98>
    4388:	21 15       	cp	r18, r1
    438a:	31 05       	cpc	r19, r1
    438c:	19 f0       	breq	.+6      	; 0x4394 <malloc+0x60>
    438e:	42 17       	cp	r20, r18
    4390:	53 07       	cpc	r21, r19
    4392:	18 f4       	brcc	.+6      	; 0x439a <malloc+0x66>
    4394:	9a 01       	movw	r18, r20
    4396:	bd 01       	movw	r22, r26
    4398:	ef 01       	movw	r28, r30
    439a:	df 01       	movw	r26, r30
    439c:	f8 01       	movw	r30, r16
    439e:	db cf       	rjmp	.-74     	; 0x4356 <malloc+0x22>
    43a0:	21 15       	cp	r18, r1
    43a2:	31 05       	cpc	r19, r1
    43a4:	f9 f0       	breq	.+62     	; 0x43e4 <malloc+0xb0>
    43a6:	28 1b       	sub	r18, r24
    43a8:	39 0b       	sbc	r19, r25
    43aa:	24 30       	cpi	r18, 0x04	; 4
    43ac:	31 05       	cpc	r19, r1
    43ae:	80 f4       	brcc	.+32     	; 0x43d0 <malloc+0x9c>
    43b0:	8a 81       	ldd	r24, Y+2	; 0x02
    43b2:	9b 81       	ldd	r25, Y+3	; 0x03
    43b4:	61 15       	cp	r22, r1
    43b6:	71 05       	cpc	r23, r1
    43b8:	21 f0       	breq	.+8      	; 0x43c2 <malloc+0x8e>
    43ba:	fb 01       	movw	r30, r22
    43bc:	93 83       	std	Z+3, r25	; 0x03
    43be:	82 83       	std	Z+2, r24	; 0x02
    43c0:	04 c0       	rjmp	.+8      	; 0x43ca <malloc+0x96>
    43c2:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <__flp+0x1>
    43c6:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <__flp>
    43ca:	fe 01       	movw	r30, r28
    43cc:	32 96       	adiw	r30, 0x02	; 2
    43ce:	44 c0       	rjmp	.+136    	; 0x4458 <malloc+0x124>
    43d0:	fe 01       	movw	r30, r28
    43d2:	e2 0f       	add	r30, r18
    43d4:	f3 1f       	adc	r31, r19
    43d6:	81 93       	st	Z+, r24
    43d8:	91 93       	st	Z+, r25
    43da:	22 50       	subi	r18, 0x02	; 2
    43dc:	31 09       	sbc	r19, r1
    43de:	39 83       	std	Y+1, r19	; 0x01
    43e0:	28 83       	st	Y, r18
    43e2:	3a c0       	rjmp	.+116    	; 0x4458 <malloc+0x124>
    43e4:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <__brkval>
    43e8:	30 91 8b 04 	lds	r19, 0x048B	; 0x80048b <__brkval+0x1>
    43ec:	23 2b       	or	r18, r19
    43ee:	41 f4       	brne	.+16     	; 0x4400 <malloc+0xcc>
    43f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    43f4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    43f8:	30 93 8b 04 	sts	0x048B, r19	; 0x80048b <__brkval+0x1>
    43fc:	20 93 8a 04 	sts	0x048A, r18	; 0x80048a <__brkval>
    4400:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4404:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4408:	21 15       	cp	r18, r1
    440a:	31 05       	cpc	r19, r1
    440c:	41 f4       	brne	.+16     	; 0x441e <malloc+0xea>
    440e:	2d b7       	in	r18, 0x3d	; 61
    4410:	3e b7       	in	r19, 0x3e	; 62
    4412:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4416:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    441a:	24 1b       	sub	r18, r20
    441c:	35 0b       	sbc	r19, r21
    441e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__brkval>
    4422:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__brkval+0x1>
    4426:	e2 17       	cp	r30, r18
    4428:	f3 07       	cpc	r31, r19
    442a:	a0 f4       	brcc	.+40     	; 0x4454 <malloc+0x120>
    442c:	2e 1b       	sub	r18, r30
    442e:	3f 0b       	sbc	r19, r31
    4430:	28 17       	cp	r18, r24
    4432:	39 07       	cpc	r19, r25
    4434:	78 f0       	brcs	.+30     	; 0x4454 <malloc+0x120>
    4436:	ac 01       	movw	r20, r24
    4438:	4e 5f       	subi	r20, 0xFE	; 254
    443a:	5f 4f       	sbci	r21, 0xFF	; 255
    443c:	24 17       	cp	r18, r20
    443e:	35 07       	cpc	r19, r21
    4440:	48 f0       	brcs	.+18     	; 0x4454 <malloc+0x120>
    4442:	4e 0f       	add	r20, r30
    4444:	5f 1f       	adc	r21, r31
    4446:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <__brkval+0x1>
    444a:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <__brkval>
    444e:	81 93       	st	Z+, r24
    4450:	91 93       	st	Z+, r25
    4452:	02 c0       	rjmp	.+4      	; 0x4458 <malloc+0x124>
    4454:	e0 e0       	ldi	r30, 0x00	; 0
    4456:	f0 e0       	ldi	r31, 0x00	; 0
    4458:	cf 01       	movw	r24, r30
    445a:	df 91       	pop	r29
    445c:	cf 91       	pop	r28
    445e:	1f 91       	pop	r17
    4460:	0f 91       	pop	r16
    4462:	08 95       	ret

00004464 <free>:
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	00 97       	sbiw	r24, 0x00	; 0
    446a:	09 f4       	brne	.+2      	; 0x446e <free+0xa>
    446c:	81 c0       	rjmp	.+258    	; 0x4570 <free+0x10c>
    446e:	fc 01       	movw	r30, r24
    4470:	32 97       	sbiw	r30, 0x02	; 2
    4472:	13 82       	std	Z+3, r1	; 0x03
    4474:	12 82       	std	Z+2, r1	; 0x02
    4476:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <__flp>
    447a:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <__flp+0x1>
    447e:	10 97       	sbiw	r26, 0x00	; 0
    4480:	81 f4       	brne	.+32     	; 0x44a2 <free+0x3e>
    4482:	20 81       	ld	r18, Z
    4484:	31 81       	ldd	r19, Z+1	; 0x01
    4486:	82 0f       	add	r24, r18
    4488:	93 1f       	adc	r25, r19
    448a:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <__brkval>
    448e:	30 91 8b 04 	lds	r19, 0x048B	; 0x80048b <__brkval+0x1>
    4492:	28 17       	cp	r18, r24
    4494:	39 07       	cpc	r19, r25
    4496:	51 f5       	brne	.+84     	; 0x44ec <free+0x88>
    4498:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__brkval+0x1>
    449c:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__brkval>
    44a0:	67 c0       	rjmp	.+206    	; 0x4570 <free+0x10c>
    44a2:	ed 01       	movw	r28, r26
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	ce 17       	cp	r28, r30
    44aa:	df 07       	cpc	r29, r31
    44ac:	40 f4       	brcc	.+16     	; 0x44be <free+0x5a>
    44ae:	4a 81       	ldd	r20, Y+2	; 0x02
    44b0:	5b 81       	ldd	r21, Y+3	; 0x03
    44b2:	9e 01       	movw	r18, r28
    44b4:	41 15       	cp	r20, r1
    44b6:	51 05       	cpc	r21, r1
    44b8:	f1 f0       	breq	.+60     	; 0x44f6 <free+0x92>
    44ba:	ea 01       	movw	r28, r20
    44bc:	f5 cf       	rjmp	.-22     	; 0x44a8 <free+0x44>
    44be:	d3 83       	std	Z+3, r29	; 0x03
    44c0:	c2 83       	std	Z+2, r28	; 0x02
    44c2:	40 81       	ld	r20, Z
    44c4:	51 81       	ldd	r21, Z+1	; 0x01
    44c6:	84 0f       	add	r24, r20
    44c8:	95 1f       	adc	r25, r21
    44ca:	c8 17       	cp	r28, r24
    44cc:	d9 07       	cpc	r29, r25
    44ce:	59 f4       	brne	.+22     	; 0x44e6 <free+0x82>
    44d0:	88 81       	ld	r24, Y
    44d2:	99 81       	ldd	r25, Y+1	; 0x01
    44d4:	84 0f       	add	r24, r20
    44d6:	95 1f       	adc	r25, r21
    44d8:	02 96       	adiw	r24, 0x02	; 2
    44da:	91 83       	std	Z+1, r25	; 0x01
    44dc:	80 83       	st	Z, r24
    44de:	8a 81       	ldd	r24, Y+2	; 0x02
    44e0:	9b 81       	ldd	r25, Y+3	; 0x03
    44e2:	93 83       	std	Z+3, r25	; 0x03
    44e4:	82 83       	std	Z+2, r24	; 0x02
    44e6:	21 15       	cp	r18, r1
    44e8:	31 05       	cpc	r19, r1
    44ea:	29 f4       	brne	.+10     	; 0x44f6 <free+0x92>
    44ec:	f0 93 8d 04 	sts	0x048D, r31	; 0x80048d <__flp+0x1>
    44f0:	e0 93 8c 04 	sts	0x048C, r30	; 0x80048c <__flp>
    44f4:	3d c0       	rjmp	.+122    	; 0x4570 <free+0x10c>
    44f6:	e9 01       	movw	r28, r18
    44f8:	fb 83       	std	Y+3, r31	; 0x03
    44fa:	ea 83       	std	Y+2, r30	; 0x02
    44fc:	49 91       	ld	r20, Y+
    44fe:	59 91       	ld	r21, Y+
    4500:	c4 0f       	add	r28, r20
    4502:	d5 1f       	adc	r29, r21
    4504:	ec 17       	cp	r30, r28
    4506:	fd 07       	cpc	r31, r29
    4508:	61 f4       	brne	.+24     	; 0x4522 <free+0xbe>
    450a:	80 81       	ld	r24, Z
    450c:	91 81       	ldd	r25, Z+1	; 0x01
    450e:	84 0f       	add	r24, r20
    4510:	95 1f       	adc	r25, r21
    4512:	02 96       	adiw	r24, 0x02	; 2
    4514:	e9 01       	movw	r28, r18
    4516:	99 83       	std	Y+1, r25	; 0x01
    4518:	88 83       	st	Y, r24
    451a:	82 81       	ldd	r24, Z+2	; 0x02
    451c:	93 81       	ldd	r25, Z+3	; 0x03
    451e:	9b 83       	std	Y+3, r25	; 0x03
    4520:	8a 83       	std	Y+2, r24	; 0x02
    4522:	e0 e0       	ldi	r30, 0x00	; 0
    4524:	f0 e0       	ldi	r31, 0x00	; 0
    4526:	12 96       	adiw	r26, 0x02	; 2
    4528:	8d 91       	ld	r24, X+
    452a:	9c 91       	ld	r25, X
    452c:	13 97       	sbiw	r26, 0x03	; 3
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	19 f0       	breq	.+6      	; 0x4538 <free+0xd4>
    4532:	fd 01       	movw	r30, r26
    4534:	dc 01       	movw	r26, r24
    4536:	f7 cf       	rjmp	.-18     	; 0x4526 <free+0xc2>
    4538:	8d 91       	ld	r24, X+
    453a:	9c 91       	ld	r25, X
    453c:	11 97       	sbiw	r26, 0x01	; 1
    453e:	9d 01       	movw	r18, r26
    4540:	2e 5f       	subi	r18, 0xFE	; 254
    4542:	3f 4f       	sbci	r19, 0xFF	; 255
    4544:	82 0f       	add	r24, r18
    4546:	93 1f       	adc	r25, r19
    4548:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <__brkval>
    454c:	30 91 8b 04 	lds	r19, 0x048B	; 0x80048b <__brkval+0x1>
    4550:	28 17       	cp	r18, r24
    4552:	39 07       	cpc	r19, r25
    4554:	69 f4       	brne	.+26     	; 0x4570 <free+0x10c>
    4556:	30 97       	sbiw	r30, 0x00	; 0
    4558:	29 f4       	brne	.+10     	; 0x4564 <free+0x100>
    455a:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <__flp+0x1>
    455e:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <__flp>
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <free+0x104>
    4564:	13 82       	std	Z+3, r1	; 0x03
    4566:	12 82       	std	Z+2, r1	; 0x02
    4568:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <__brkval+0x1>
    456c:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <__brkval>
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	08 95       	ret

00004576 <realloc>:
    4576:	a0 e0       	ldi	r26, 0x00	; 0
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	e1 ec       	ldi	r30, 0xC1	; 193
    457c:	f2 e2       	ldi	r31, 0x22	; 34
    457e:	0c 94 27 24 	jmp	0x484e	; 0x484e <__prologue_saves__+0x8>
    4582:	ec 01       	movw	r28, r24
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	21 f4       	brne	.+8      	; 0x4590 <realloc+0x1a>
    4588:	cb 01       	movw	r24, r22
    458a:	0e 94 9a 21 	call	0x4334	; 0x4334 <malloc>
    458e:	b4 c0       	rjmp	.+360    	; 0x46f8 <realloc+0x182>
    4590:	fc 01       	movw	r30, r24
    4592:	e6 0f       	add	r30, r22
    4594:	f7 1f       	adc	r31, r23
    4596:	9c 01       	movw	r18, r24
    4598:	22 50       	subi	r18, 0x02	; 2
    459a:	31 09       	sbc	r19, r1
    459c:	e2 17       	cp	r30, r18
    459e:	f3 07       	cpc	r31, r19
    45a0:	08 f4       	brcc	.+2      	; 0x45a4 <realloc+0x2e>
    45a2:	a8 c0       	rjmp	.+336    	; 0x46f4 <realloc+0x17e>
    45a4:	d9 01       	movw	r26, r18
    45a6:	0d 91       	ld	r16, X+
    45a8:	1c 91       	ld	r17, X
    45aa:	11 97       	sbiw	r26, 0x01	; 1
    45ac:	06 17       	cp	r16, r22
    45ae:	17 07       	cpc	r17, r23
    45b0:	b0 f0       	brcs	.+44     	; 0x45de <realloc+0x68>
    45b2:	05 30       	cpi	r16, 0x05	; 5
    45b4:	11 05       	cpc	r17, r1
    45b6:	08 f4       	brcc	.+2      	; 0x45ba <realloc+0x44>
    45b8:	9b c0       	rjmp	.+310    	; 0x46f0 <realloc+0x17a>
    45ba:	c8 01       	movw	r24, r16
    45bc:	04 97       	sbiw	r24, 0x04	; 4
    45be:	86 17       	cp	r24, r22
    45c0:	97 07       	cpc	r25, r23
    45c2:	08 f4       	brcc	.+2      	; 0x45c6 <realloc+0x50>
    45c4:	95 c0       	rjmp	.+298    	; 0x46f0 <realloc+0x17a>
    45c6:	02 50       	subi	r16, 0x02	; 2
    45c8:	11 09       	sbc	r17, r1
    45ca:	06 1b       	sub	r16, r22
    45cc:	17 0b       	sbc	r17, r23
    45ce:	01 93       	st	Z+, r16
    45d0:	11 93       	st	Z+, r17
    45d2:	6d 93       	st	X+, r22
    45d4:	7c 93       	st	X, r23
    45d6:	cf 01       	movw	r24, r30
    45d8:	0e 94 32 22 	call	0x4464	; 0x4464 <free>
    45dc:	89 c0       	rjmp	.+274    	; 0x46f0 <realloc+0x17a>
    45de:	5b 01       	movw	r10, r22
    45e0:	a0 1a       	sub	r10, r16
    45e2:	b1 0a       	sbc	r11, r17
    45e4:	4c 01       	movw	r8, r24
    45e6:	80 0e       	add	r8, r16
    45e8:	91 1e       	adc	r9, r17
    45ea:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <__flp>
    45ee:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <__flp+0x1>
    45f2:	61 2c       	mov	r6, r1
    45f4:	71 2c       	mov	r7, r1
    45f6:	e1 2c       	mov	r14, r1
    45f8:	f1 2c       	mov	r15, r1
    45fa:	10 97       	sbiw	r26, 0x00	; 0
    45fc:	09 f4       	brne	.+2      	; 0x4600 <realloc+0x8a>
    45fe:	46 c0       	rjmp	.+140    	; 0x468c <realloc+0x116>
    4600:	8d 91       	ld	r24, X+
    4602:	9c 91       	ld	r25, X
    4604:	11 97       	sbiw	r26, 0x01	; 1
    4606:	a8 15       	cp	r26, r8
    4608:	b9 05       	cpc	r27, r9
    460a:	b1 f5       	brne	.+108    	; 0x4678 <realloc+0x102>
    460c:	6c 01       	movw	r12, r24
    460e:	42 e0       	ldi	r20, 0x02	; 2
    4610:	c4 0e       	add	r12, r20
    4612:	d1 1c       	adc	r13, r1
    4614:	ca 14       	cp	r12, r10
    4616:	db 04       	cpc	r13, r11
    4618:	78 f1       	brcs	.+94     	; 0x4678 <realloc+0x102>
    461a:	4c 01       	movw	r8, r24
    461c:	8a 18       	sub	r8, r10
    461e:	9b 08       	sbc	r9, r11
    4620:	64 01       	movw	r12, r8
    4622:	42 e0       	ldi	r20, 0x02	; 2
    4624:	c4 0e       	add	r12, r20
    4626:	d1 1c       	adc	r13, r1
    4628:	12 96       	adiw	r26, 0x02	; 2
    462a:	bc 90       	ld	r11, X
    462c:	12 97       	sbiw	r26, 0x02	; 2
    462e:	13 96       	adiw	r26, 0x03	; 3
    4630:	ac 91       	ld	r26, X
    4632:	b5 e0       	ldi	r27, 0x05	; 5
    4634:	cb 16       	cp	r12, r27
    4636:	d1 04       	cpc	r13, r1
    4638:	40 f0       	brcs	.+16     	; 0x464a <realloc+0xd4>
    463a:	b2 82       	std	Z+2, r11	; 0x02
    463c:	a3 83       	std	Z+3, r26	; 0x03
    463e:	91 82       	std	Z+1, r9	; 0x01
    4640:	80 82       	st	Z, r8
    4642:	d9 01       	movw	r26, r18
    4644:	6d 93       	st	X+, r22
    4646:	7c 93       	st	X, r23
    4648:	09 c0       	rjmp	.+18     	; 0x465c <realloc+0xe6>
    464a:	0e 5f       	subi	r16, 0xFE	; 254
    464c:	1f 4f       	sbci	r17, 0xFF	; 255
    464e:	80 0f       	add	r24, r16
    4650:	91 1f       	adc	r25, r17
    4652:	f9 01       	movw	r30, r18
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	80 83       	st	Z, r24
    4658:	eb 2d       	mov	r30, r11
    465a:	fa 2f       	mov	r31, r26
    465c:	e1 14       	cp	r14, r1
    465e:	f1 04       	cpc	r15, r1
    4660:	31 f0       	breq	.+12     	; 0x466e <realloc+0xf8>
    4662:	d7 01       	movw	r26, r14
    4664:	13 96       	adiw	r26, 0x03	; 3
    4666:	fc 93       	st	X, r31
    4668:	ee 93       	st	-X, r30
    466a:	12 97       	sbiw	r26, 0x02	; 2
    466c:	41 c0       	rjmp	.+130    	; 0x46f0 <realloc+0x17a>
    466e:	f0 93 8d 04 	sts	0x048D, r31	; 0x80048d <__flp+0x1>
    4672:	e0 93 8c 04 	sts	0x048C, r30	; 0x80048c <__flp>
    4676:	3c c0       	rjmp	.+120    	; 0x46f0 <realloc+0x17a>
    4678:	68 16       	cp	r6, r24
    467a:	79 06       	cpc	r7, r25
    467c:	08 f4       	brcc	.+2      	; 0x4680 <realloc+0x10a>
    467e:	3c 01       	movw	r6, r24
    4680:	7d 01       	movw	r14, r26
    4682:	12 96       	adiw	r26, 0x02	; 2
    4684:	0d 90       	ld	r0, X+
    4686:	bc 91       	ld	r27, X
    4688:	a0 2d       	mov	r26, r0
    468a:	b7 cf       	rjmp	.-146    	; 0x45fa <realloc+0x84>
    468c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__brkval>
    4690:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <__brkval+0x1>
    4694:	88 16       	cp	r8, r24
    4696:	99 06       	cpc	r9, r25
    4698:	e1 f4       	brne	.+56     	; 0x46d2 <realloc+0x15c>
    469a:	66 16       	cp	r6, r22
    469c:	77 06       	cpc	r7, r23
    469e:	c8 f4       	brcc	.+50     	; 0x46d2 <realloc+0x15c>
    46a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    46a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    46a8:	00 97       	sbiw	r24, 0x00	; 0
    46aa:	41 f4       	brne	.+16     	; 0x46bc <realloc+0x146>
    46ac:	8d b7       	in	r24, 0x3d	; 61
    46ae:	9e b7       	in	r25, 0x3e	; 62
    46b0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    46b4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    46b8:	84 1b       	sub	r24, r20
    46ba:	95 0b       	sbc	r25, r21
    46bc:	e8 17       	cp	r30, r24
    46be:	f9 07       	cpc	r31, r25
    46c0:	c8 f4       	brcc	.+50     	; 0x46f4 <realloc+0x17e>
    46c2:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__brkval+0x1>
    46c6:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__brkval>
    46ca:	f9 01       	movw	r30, r18
    46cc:	71 83       	std	Z+1, r23	; 0x01
    46ce:	60 83       	st	Z, r22
    46d0:	0f c0       	rjmp	.+30     	; 0x46f0 <realloc+0x17a>
    46d2:	cb 01       	movw	r24, r22
    46d4:	0e 94 9a 21 	call	0x4334	; 0x4334 <malloc>
    46d8:	7c 01       	movw	r14, r24
    46da:	00 97       	sbiw	r24, 0x00	; 0
    46dc:	59 f0       	breq	.+22     	; 0x46f4 <realloc+0x17e>
    46de:	a8 01       	movw	r20, r16
    46e0:	be 01       	movw	r22, r28
    46e2:	0e 94 cb 23 	call	0x4796	; 0x4796 <memcpy>
    46e6:	ce 01       	movw	r24, r28
    46e8:	0e 94 32 22 	call	0x4464	; 0x4464 <free>
    46ec:	c7 01       	movw	r24, r14
    46ee:	04 c0       	rjmp	.+8      	; 0x46f8 <realloc+0x182>
    46f0:	ce 01       	movw	r24, r28
    46f2:	02 c0       	rjmp	.+4      	; 0x46f8 <realloc+0x182>
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
    46fc:	ee e0       	ldi	r30, 0x0E	; 14
    46fe:	0c 94 43 24 	jmp	0x4886	; 0x4886 <__epilogue_restores__+0x8>

00004702 <atoi>:
    4702:	fc 01       	movw	r30, r24
    4704:	88 27       	eor	r24, r24
    4706:	99 27       	eor	r25, r25
    4708:	e8 94       	clt
    470a:	21 91       	ld	r18, Z+
    470c:	20 32       	cpi	r18, 0x20	; 32
    470e:	e9 f3       	breq	.-6      	; 0x470a <atoi+0x8>
    4710:	29 30       	cpi	r18, 0x09	; 9
    4712:	10 f0       	brcs	.+4      	; 0x4718 <atoi+0x16>
    4714:	2e 30       	cpi	r18, 0x0E	; 14
    4716:	c8 f3       	brcs	.-14     	; 0x470a <atoi+0x8>
    4718:	2b 32       	cpi	r18, 0x2B	; 43
    471a:	41 f0       	breq	.+16     	; 0x472c <atoi+0x2a>
    471c:	2d 32       	cpi	r18, 0x2D	; 45
    471e:	39 f4       	brne	.+14     	; 0x472e <atoi+0x2c>
    4720:	68 94       	set
    4722:	04 c0       	rjmp	.+8      	; 0x472c <atoi+0x2a>
    4724:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__mulhi_const_10>
    4728:	82 0f       	add	r24, r18
    472a:	91 1d       	adc	r25, r1
    472c:	21 91       	ld	r18, Z+
    472e:	20 53       	subi	r18, 0x30	; 48
    4730:	2a 30       	cpi	r18, 0x0A	; 10
    4732:	c0 f3       	brcs	.-16     	; 0x4724 <atoi+0x22>
    4734:	1e f4       	brtc	.+6      	; 0x473c <atoi+0x3a>
    4736:	90 95       	com	r25
    4738:	81 95       	neg	r24
    473a:	9f 4f       	sbci	r25, 0xFF	; 255
    473c:	08 95       	ret

0000473e <strcmp_P>:
    473e:	fb 01       	movw	r30, r22
    4740:	dc 01       	movw	r26, r24
    4742:	8d 91       	ld	r24, X+
    4744:	05 90       	lpm	r0, Z+
    4746:	80 19       	sub	r24, r0
    4748:	01 10       	cpse	r0, r1
    474a:	d9 f3       	breq	.-10     	; 0x4742 <strcmp_P+0x4>
    474c:	99 0b       	sbc	r25, r25
    474e:	08 95       	ret

00004750 <__strlen_P>:
    4750:	fc 01       	movw	r30, r24
    4752:	05 90       	lpm	r0, Z+
    4754:	00 20       	and	r0, r0
    4756:	e9 f7       	brne	.-6      	; 0x4752 <__strlen_P+0x2>
    4758:	80 95       	com	r24
    475a:	90 95       	com	r25
    475c:	8e 0f       	add	r24, r30
    475e:	9f 1f       	adc	r25, r31
    4760:	08 95       	ret

00004762 <strstr_P>:
    4762:	fb 01       	movw	r30, r22
    4764:	55 91       	lpm	r21, Z+
    4766:	55 23       	and	r21, r21
    4768:	a9 f0       	breq	.+42     	; 0x4794 <strstr_P+0x32>
    476a:	bf 01       	movw	r22, r30
    476c:	dc 01       	movw	r26, r24
    476e:	4d 91       	ld	r20, X+
    4770:	45 17       	cp	r20, r21
    4772:	41 11       	cpse	r20, r1
    4774:	e1 f7       	brne	.-8      	; 0x476e <strstr_P+0xc>
    4776:	59 f4       	brne	.+22     	; 0x478e <strstr_P+0x2c>
    4778:	cd 01       	movw	r24, r26
    477a:	05 90       	lpm	r0, Z+
    477c:	00 20       	and	r0, r0
    477e:	49 f0       	breq	.+18     	; 0x4792 <strstr_P+0x30>
    4780:	4d 91       	ld	r20, X+
    4782:	40 15       	cp	r20, r0
    4784:	41 11       	cpse	r20, r1
    4786:	c9 f3       	breq	.-14     	; 0x477a <strstr_P+0x18>
    4788:	fb 01       	movw	r30, r22
    478a:	41 11       	cpse	r20, r1
    478c:	ef cf       	rjmp	.-34     	; 0x476c <strstr_P+0xa>
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	08 95       	ret

00004796 <memcpy>:
    4796:	fb 01       	movw	r30, r22
    4798:	dc 01       	movw	r26, r24
    479a:	02 c0       	rjmp	.+4      	; 0x47a0 <memcpy+0xa>
    479c:	01 90       	ld	r0, Z+
    479e:	0d 92       	st	X+, r0
    47a0:	41 50       	subi	r20, 0x01	; 1
    47a2:	50 40       	sbci	r21, 0x00	; 0
    47a4:	d8 f7       	brcc	.-10     	; 0x479c <memcpy+0x6>
    47a6:	08 95       	ret

000047a8 <strchr>:
    47a8:	fc 01       	movw	r30, r24
    47aa:	81 91       	ld	r24, Z+
    47ac:	86 17       	cp	r24, r22
    47ae:	21 f0       	breq	.+8      	; 0x47b8 <strchr+0x10>
    47b0:	88 23       	and	r24, r24
    47b2:	d9 f7       	brne	.-10     	; 0x47aa <strchr+0x2>
    47b4:	99 27       	eor	r25, r25
    47b6:	08 95       	ret
    47b8:	31 97       	sbiw	r30, 0x01	; 1
    47ba:	cf 01       	movw	r24, r30
    47bc:	08 95       	ret

000047be <strcpy>:
    47be:	fb 01       	movw	r30, r22
    47c0:	dc 01       	movw	r26, r24
    47c2:	01 90       	ld	r0, Z+
    47c4:	0d 92       	st	X+, r0
    47c6:	00 20       	and	r0, r0
    47c8:	e1 f7       	brne	.-8      	; 0x47c2 <strcpy+0x4>
    47ca:	08 95       	ret

000047cc <__itoa_ncheck>:
    47cc:	bb 27       	eor	r27, r27
    47ce:	4a 30       	cpi	r20, 0x0A	; 10
    47d0:	31 f4       	brne	.+12     	; 0x47de <__itoa_ncheck+0x12>
    47d2:	99 23       	and	r25, r25
    47d4:	22 f4       	brpl	.+8      	; 0x47de <__itoa_ncheck+0x12>
    47d6:	bd e2       	ldi	r27, 0x2D	; 45
    47d8:	90 95       	com	r25
    47da:	81 95       	neg	r24
    47dc:	9f 4f       	sbci	r25, 0xFF	; 255
    47de:	0c 94 fa 23 	jmp	0x47f4	; 0x47f4 <__utoa_common>

000047e2 <__mulhi_const_10>:
    47e2:	7a e0       	ldi	r23, 0x0A	; 10
    47e4:	97 9f       	mul	r25, r23
    47e6:	90 2d       	mov	r25, r0
    47e8:	87 9f       	mul	r24, r23
    47ea:	80 2d       	mov	r24, r0
    47ec:	91 0d       	add	r25, r1
    47ee:	11 24       	eor	r1, r1
    47f0:	08 95       	ret

000047f2 <__utoa_ncheck>:
    47f2:	bb 27       	eor	r27, r27

000047f4 <__utoa_common>:
    47f4:	fb 01       	movw	r30, r22
    47f6:	55 27       	eor	r21, r21
    47f8:	aa 27       	eor	r26, r26
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	aa 1f       	adc	r26, r26
    4800:	a4 17       	cp	r26, r20
    4802:	10 f0       	brcs	.+4      	; 0x4808 <__utoa_common+0x14>
    4804:	a4 1b       	sub	r26, r20
    4806:	83 95       	inc	r24
    4808:	50 51       	subi	r21, 0x10	; 16
    480a:	b9 f7       	brne	.-18     	; 0x47fa <__utoa_common+0x6>
    480c:	a0 5d       	subi	r26, 0xD0	; 208
    480e:	aa 33       	cpi	r26, 0x3A	; 58
    4810:	08 f0       	brcs	.+2      	; 0x4814 <__utoa_common+0x20>
    4812:	a9 5d       	subi	r26, 0xD9	; 217
    4814:	a1 93       	st	Z+, r26
    4816:	00 97       	sbiw	r24, 0x00	; 0
    4818:	79 f7       	brne	.-34     	; 0x47f8 <__utoa_common+0x4>
    481a:	b1 11       	cpse	r27, r1
    481c:	b1 93       	st	Z+, r27
    481e:	11 92       	st	Z+, r1
    4820:	cb 01       	movw	r24, r22
    4822:	0c 94 13 24 	jmp	0x4826	; 0x4826 <strrev>

00004826 <strrev>:
    4826:	dc 01       	movw	r26, r24
    4828:	fc 01       	movw	r30, r24
    482a:	67 2f       	mov	r22, r23
    482c:	71 91       	ld	r23, Z+
    482e:	77 23       	and	r23, r23
    4830:	e1 f7       	brne	.-8      	; 0x482a <strrev+0x4>
    4832:	32 97       	sbiw	r30, 0x02	; 2
    4834:	04 c0       	rjmp	.+8      	; 0x483e <strrev+0x18>
    4836:	7c 91       	ld	r23, X
    4838:	6d 93       	st	X+, r22
    483a:	70 83       	st	Z, r23
    483c:	62 91       	ld	r22, -Z
    483e:	ae 17       	cp	r26, r30
    4840:	bf 07       	cpc	r27, r31
    4842:	c8 f3       	brcs	.-14     	; 0x4836 <strrev+0x10>
    4844:	08 95       	ret

00004846 <__prologue_saves__>:
    4846:	2f 92       	push	r2
    4848:	3f 92       	push	r3
    484a:	4f 92       	push	r4
    484c:	5f 92       	push	r5
    484e:	6f 92       	push	r6
    4850:	7f 92       	push	r7
    4852:	8f 92       	push	r8
    4854:	9f 92       	push	r9
    4856:	af 92       	push	r10
    4858:	bf 92       	push	r11
    485a:	cf 92       	push	r12
    485c:	df 92       	push	r13
    485e:	ef 92       	push	r14
    4860:	ff 92       	push	r15
    4862:	0f 93       	push	r16
    4864:	1f 93       	push	r17
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	ca 1b       	sub	r28, r26
    4870:	db 0b       	sbc	r29, r27
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	09 94       	ijmp

0000487e <__epilogue_restores__>:
    487e:	2a 88       	ldd	r2, Y+18	; 0x12
    4880:	39 88       	ldd	r3, Y+17	; 0x11
    4882:	48 88       	ldd	r4, Y+16	; 0x10
    4884:	5f 84       	ldd	r5, Y+15	; 0x0f
    4886:	6e 84       	ldd	r6, Y+14	; 0x0e
    4888:	7d 84       	ldd	r7, Y+13	; 0x0d
    488a:	8c 84       	ldd	r8, Y+12	; 0x0c
    488c:	9b 84       	ldd	r9, Y+11	; 0x0b
    488e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4890:	b9 84       	ldd	r11, Y+9	; 0x09
    4892:	c8 84       	ldd	r12, Y+8	; 0x08
    4894:	df 80       	ldd	r13, Y+7	; 0x07
    4896:	ee 80       	ldd	r14, Y+6	; 0x06
    4898:	fd 80       	ldd	r15, Y+5	; 0x05
    489a:	0c 81       	ldd	r16, Y+4	; 0x04
    489c:	1b 81       	ldd	r17, Y+3	; 0x03
    489e:	aa 81       	ldd	r26, Y+2	; 0x02
    48a0:	b9 81       	ldd	r27, Y+1	; 0x01
    48a2:	ce 0f       	add	r28, r30
    48a4:	d1 1d       	adc	r29, r1
    48a6:	0f b6       	in	r0, 0x3f	; 63
    48a8:	f8 94       	cli
    48aa:	de bf       	out	0x3e, r29	; 62
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	cd bf       	out	0x3d, r28	; 61
    48b0:	ed 01       	movw	r28, r26
    48b2:	08 95       	ret

000048b4 <__do_global_dtors>:
    48b4:	13 e0       	ldi	r17, 0x03	; 3
    48b6:	cf eb       	ldi	r28, 0xBF	; 191
    48b8:	d3 e0       	ldi	r29, 0x03	; 3
    48ba:	04 c0       	rjmp	.+8      	; 0x48c4 <__do_global_dtors+0x10>
    48bc:	fe 01       	movw	r30, r28
    48be:	0e 94 94 21 	call	0x4328	; 0x4328 <__tablejump2__>
    48c2:	21 96       	adiw	r28, 0x01	; 1
    48c4:	c0 3c       	cpi	r28, 0xC0	; 192
    48c6:	d1 07       	cpc	r29, r17
    48c8:	c9 f7       	brne	.-14     	; 0x48bc <__do_global_dtors+0x8>
    48ca:	f8 94       	cli

000048cc <__stop_program>:
    48cc:	ff cf       	rjmp	.-2      	; 0x48cc <__stop_program>
