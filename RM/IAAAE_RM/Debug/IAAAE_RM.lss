
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030c  00800100  00006af8  00006b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030b  0080040c  0080040c  00006e98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006e98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e20  00000000  00000000  00006f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00022c2e  00000000  00000000  00007d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004180  00000000  00000000  0002a956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000801d  00000000  00000000  0002ead6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000037f0  00000000  00000000  00036af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006451  00000000  00000000  0003a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001336a  00000000  00000000  00040735  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000db0  00000000  00000000  00053a9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__dtors_end>
       4:	0c 94 81 31 	jmp	0x6302	; 0x6302 <__vector_1>
       8:	0c 94 a8 31 	jmp	0x6350	; 0x6350 <__vector_2>
       c:	0c 94 f3 2f 	jmp	0x5fe6	; 0x5fe6 <__vector_3>
      10:	0c 94 f3 2f 	jmp	0x5fe6	; 0x5fe6 <__vector_3>
      14:	0c 94 f3 2f 	jmp	0x5fe6	; 0x5fe6 <__vector_3>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__vector_16>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__vector_18>
      4c:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__vector_19>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 47 19 	jmp	0x328e	; 0x328e <__vector_24>
      64:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      68:	53 1a       	sub	r5, r19
      6a:	57 1a       	sub	r5, r23
      6c:	57 1a       	sub	r5, r23
      6e:	57 1a       	sub	r5, r23
      70:	57 1a       	sub	r5, r23
      72:	57 1a       	sub	r5, r23
      74:	57 1a       	sub	r5, r23
      76:	57 1a       	sub	r5, r23
      78:	67 19       	sub	r22, r7
      7a:	57 1a       	sub	r5, r23
      7c:	57 1a       	sub	r5, r23
      7e:	57 1a       	sub	r5, r23
      80:	57 1a       	sub	r5, r23
      82:	57 1a       	sub	r5, r23
      84:	57 1a       	sub	r5, r23
      86:	57 1a       	sub	r5, r23
      88:	67 19       	sub	r22, r7
      8a:	57 1a       	sub	r5, r23
      8c:	57 1a       	sub	r5, r23
      8e:	57 1a       	sub	r5, r23
      90:	57 1a       	sub	r5, r23
      92:	57 1a       	sub	r5, r23
      94:	57 1a       	sub	r5, r23
      96:	57 1a       	sub	r5, r23
      98:	6f 19       	sub	r22, r15
      9a:	57 1a       	sub	r5, r23
      9c:	57 1a       	sub	r5, r23
      9e:	57 1a       	sub	r5, r23
      a0:	57 1a       	sub	r5, r23
      a2:	57 1a       	sub	r5, r23
      a4:	57 1a       	sub	r5, r23
      a6:	57 1a       	sub	r5, r23
      a8:	95 19       	sub	r25, r5
      aa:	57 1a       	sub	r5, r23
      ac:	57 1a       	sub	r5, r23
      ae:	57 1a       	sub	r5, r23
      b0:	57 1a       	sub	r5, r23
      b2:	57 1a       	sub	r5, r23
      b4:	57 1a       	sub	r5, r23
      b6:	57 1a       	sub	r5, r23
      b8:	6f 19       	sub	r22, r15
      ba:	57 1a       	sub	r5, r23
      bc:	57 1a       	sub	r5, r23
      be:	57 1a       	sub	r5, r23
      c0:	57 1a       	sub	r5, r23
      c2:	57 1a       	sub	r5, r23
      c4:	57 1a       	sub	r5, r23
      c6:	57 1a       	sub	r5, r23
      c8:	9b 19       	sub	r25, r11
      ca:	57 1a       	sub	r5, r23
      cc:	57 1a       	sub	r5, r23
      ce:	57 1a       	sub	r5, r23
      d0:	57 1a       	sub	r5, r23
      d2:	57 1a       	sub	r5, r23
      d4:	57 1a       	sub	r5, r23
      d6:	57 1a       	sub	r5, r23
      d8:	a1 19       	sub	r26, r1
      da:	57 1a       	sub	r5, r23
      dc:	57 1a       	sub	r5, r23
      de:	57 1a       	sub	r5, r23
      e0:	57 1a       	sub	r5, r23
      e2:	57 1a       	sub	r5, r23
      e4:	57 1a       	sub	r5, r23
      e6:	57 1a       	sub	r5, r23
      e8:	b3 19       	sub	r27, r3
      ea:	57 1a       	sub	r5, r23
      ec:	57 1a       	sub	r5, r23
      ee:	57 1a       	sub	r5, r23
      f0:	57 1a       	sub	r5, r23
      f2:	57 1a       	sub	r5, r23
      f4:	57 1a       	sub	r5, r23
      f6:	57 1a       	sub	r5, r23
      f8:	dd 19       	sub	r29, r13
      fa:	57 1a       	sub	r5, r23
      fc:	57 1a       	sub	r5, r23
      fe:	57 1a       	sub	r5, r23
     100:	57 1a       	sub	r5, r23
     102:	57 1a       	sub	r5, r23
     104:	57 1a       	sub	r5, r23
     106:	57 1a       	sub	r5, r23
     108:	a7 19       	sub	r26, r7
     10a:	57 1a       	sub	r5, r23
     10c:	57 1a       	sub	r5, r23
     10e:	57 1a       	sub	r5, r23
     110:	57 1a       	sub	r5, r23
     112:	57 1a       	sub	r5, r23
     114:	57 1a       	sub	r5, r23
     116:	57 1a       	sub	r5, r23
     118:	c1 19       	sub	r28, r1
     11a:	57 1a       	sub	r5, r23
     11c:	57 1a       	sub	r5, r23
     11e:	57 1a       	sub	r5, r23
     120:	57 1a       	sub	r5, r23
     122:	57 1a       	sub	r5, r23
     124:	57 1a       	sub	r5, r23
     126:	57 1a       	sub	r5, r23
     128:	e0 19       	sub	r30, r0
     12a:	57 1a       	sub	r5, r23
     12c:	57 1a       	sub	r5, r23
     12e:	57 1a       	sub	r5, r23
     130:	57 1a       	sub	r5, r23
     132:	57 1a       	sub	r5, r23
     134:	57 1a       	sub	r5, r23
     136:	57 1a       	sub	r5, r23
     138:	e0 19       	sub	r30, r0
     13a:	57 1a       	sub	r5, r23
     13c:	57 1a       	sub	r5, r23
     13e:	57 1a       	sub	r5, r23
     140:	57 1a       	sub	r5, r23
     142:	57 1a       	sub	r5, r23
     144:	57 1a       	sub	r5, r23
     146:	57 1a       	sub	r5, r23
     148:	e0 19       	sub	r30, r0
     14a:	57 1a       	sub	r5, r23
     14c:	57 1a       	sub	r5, r23
     14e:	57 1a       	sub	r5, r23
     150:	57 1a       	sub	r5, r23
     152:	57 1a       	sub	r5, r23
     154:	57 1a       	sub	r5, r23
     156:	57 1a       	sub	r5, r23
     158:	e0 19       	sub	r30, r0
     15a:	57 1a       	sub	r5, r23
     15c:	57 1a       	sub	r5, r23
     15e:	57 1a       	sub	r5, r23
     160:	57 1a       	sub	r5, r23
     162:	57 1a       	sub	r5, r23
     164:	57 1a       	sub	r5, r23
     166:	57 1a       	sub	r5, r23
     168:	e9 19       	sub	r30, r9
     16a:	57 1a       	sub	r5, r23
     16c:	57 1a       	sub	r5, r23
     16e:	57 1a       	sub	r5, r23
     170:	57 1a       	sub	r5, r23
     172:	57 1a       	sub	r5, r23
     174:	57 1a       	sub	r5, r23
     176:	57 1a       	sub	r5, r23
     178:	1a 1a       	sub	r1, r26
     17a:	57 1a       	sub	r5, r23
     17c:	57 1a       	sub	r5, r23
     17e:	57 1a       	sub	r5, r23
     180:	57 1a       	sub	r5, r23
     182:	57 1a       	sub	r5, r23
     184:	57 1a       	sub	r5, r23
     186:	57 1a       	sub	r5, r23
     188:	e9 19       	sub	r30, r9
     18a:	57 1a       	sub	r5, r23
     18c:	57 1a       	sub	r5, r23
     18e:	57 1a       	sub	r5, r23
     190:	57 1a       	sub	r5, r23
     192:	57 1a       	sub	r5, r23
     194:	57 1a       	sub	r5, r23
     196:	57 1a       	sub	r5, r23
     198:	1a 1a       	sub	r1, r26
     19a:	57 1a       	sub	r5, r23
     19c:	57 1a       	sub	r5, r23
     19e:	57 1a       	sub	r5, r23
     1a0:	57 1a       	sub	r5, r23
     1a2:	57 1a       	sub	r5, r23
     1a4:	57 1a       	sub	r5, r23
     1a6:	57 1a       	sub	r5, r23
     1a8:	01 1a       	sub	r0, r17
     1aa:	57 1a       	sub	r5, r23
     1ac:	57 1a       	sub	r5, r23
     1ae:	57 1a       	sub	r5, r23
     1b0:	57 1a       	sub	r5, r23
     1b2:	57 1a       	sub	r5, r23
     1b4:	57 1a       	sub	r5, r23
     1b6:	57 1a       	sub	r5, r23
     1b8:	1e 1a       	sub	r1, r30
     1ba:	57 1a       	sub	r5, r23
     1bc:	57 1a       	sub	r5, r23
     1be:	57 1a       	sub	r5, r23
     1c0:	57 1a       	sub	r5, r23
     1c2:	57 1a       	sub	r5, r23
     1c4:	57 1a       	sub	r5, r23
     1c6:	57 1a       	sub	r5, r23
     1c8:	1e 1a       	sub	r1, r30
     1ca:	57 1a       	sub	r5, r23
     1cc:	57 1a       	sub	r5, r23
     1ce:	57 1a       	sub	r5, r23
     1d0:	57 1a       	sub	r5, r23
     1d2:	57 1a       	sub	r5, r23
     1d4:	57 1a       	sub	r5, r23
     1d6:	57 1a       	sub	r5, r23
     1d8:	33 1a       	sub	r3, r19
     1da:	57 1a       	sub	r5, r23
     1dc:	57 1a       	sub	r5, r23
     1de:	57 1a       	sub	r5, r23
     1e0:	57 1a       	sub	r5, r23
     1e2:	57 1a       	sub	r5, r23
     1e4:	57 1a       	sub	r5, r23
     1e6:	57 1a       	sub	r5, r23
     1e8:	4d 1a       	sub	r4, r29
     1ea:	57 1a       	sub	r5, r23
     1ec:	57 1a       	sub	r5, r23
     1ee:	57 1a       	sub	r5, r23
     1f0:	57 1a       	sub	r5, r23
     1f2:	57 1a       	sub	r5, r23
     1f4:	57 1a       	sub	r5, r23
     1f6:	57 1a       	sub	r5, r23
     1f8:	4d 1a       	sub	r4, r29

000001fa <__trampolines_end>:
     1fa:	74 65       	ori	r23, 0x54	; 84
     1fc:	78 74       	andi	r23, 0x48	; 72
     1fe:	2f 70       	andi	r18, 0x0F	; 15
     200:	6c 61       	ori	r22, 0x1C	; 28
     202:	69 6e       	ori	r22, 0xE9	; 233
	...

00000205 <_ZZN10GsmManager11sendViaGprsEPcE3__c_0>:
     205:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000210 <_ZZN10GsmManager11sendViaGprsEPcE3__c_1>:
	...

00000211 <_ZZN10GsmManager11sendViaGprsEPcE3__c_2>:
	...

00000212 <_ZZN10GsmManager11sendViaGprsEPcE3__c>:
     212:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000021d <_ZZ18ensureBatteryLevelvE3__c_0>:
     21d:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 52 65 74     BatteryLevel Ret
     22d:	72 69 65 76 65 64 00                                rieved.

00000234 <_ZZ18ensureBatteryLevelvE3__c>:
     234:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 46 61 69     BatteryLevel Fai
     244:	6c 65 64 00                                         led.

00000248 <_ZZ16readSensorsAsyncvE3__c_3>:
     248:	50 56 20 56 6f 6c 74 61 67 65 28 41 63 74 29 3a     PV Voltage(Act):
	...

00000259 <_ZZ16readSensorsAsyncvE3__c_2>:
     259:	50 56 20 56 6f 6c 74 61 67 65 28 52 61 77 29 3a     PV Voltage(Raw):
	...

0000026a <_ZZ16readSensorsAsyncvE3__c_1>:
     26a:	42 61 74 74 65 72 79 20 56 6f 6c 74 61 67 65 28     Battery Voltage(
     27a:	41 63 74 29 3a 00                                   Act):.

00000280 <_ZZ16readSensorsAsyncvE3__c_0>:
     280:	42 61 74 74 65 72 79 20 56 6f 6c 74 61 67 65 28     Battery Voltage(
     290:	52 61 77 29 3a 00                                   Raw):.

00000296 <_ZZ16readSensorsAsyncvE3__c>:
     296:	52 65 61 64 69 6e 67 20 53 65 6e 73 6f 72 73 00     Reading Sensors.

000002a6 <_ZZ20execTransmitReadingsR14DailyCycleDataE3__c_1>:
     2a6:	53 4d 53 20 53 65 6e 64 20 46 61 69 6c 65 64 20     SMS Send Failed 
     2b6:	21 21 00                                            !!.

000002b9 <_ZZ20execTransmitReadingsR14DailyCycleDataE3__c_0>:
     2b9:	53 65 6e 64 69 6e 67 20 53 65 6e 73 6f 72 73 20     Sending Sensors 
     2c9:	43 6d 70 74 00                                      Cmpt.

000002ce <_ZZ20execTransmitReadingsR14DailyCycleDataE3__c>:
     2ce:	47 50 52 53 20 46 61 69 6c 65 64 2d 54 72 79 69     GPRS Failed-Tryi
     2de:	6e 67 20 53 4d 53 2e 2e 2e 00                       ng SMS....

000002e8 <_ZZ9loopCyclevE3__c_2>:
     2e8:	46 72 65 65 4d 65 6d 6f 72 79 00                    FreeMemory.

000002f3 <_ZZ9loopCyclevE3__c_1>:
     2f3:	49 6e 20 44 61 69 6c 79 20 43 79 63 6c 65 2e 2e     In Daily Cycle..
     303:	2e 00                                               ..

00000305 <_ZZ9loopCyclevE3__c_0>:
     305:	50 65 72 73 69 73 74 69 6e 67 20 73 65 6e 73 6f     Persisting senso
     315:	72 20 64 61 74 61 2e 2e 2e 00                       r data....

0000031f <_ZZ9loopCyclevE3__c>:
     31f:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     32f:	2e 2e 00                                            ...

00000332 <_ZZ4loopE3__c>:
     332:	45 4e 44 20 43 59 43 4c 45 00                       END CYCLE.

0000033c <_ZZ5setupE3__c>:
     33c:	52 75 6e 6e 69 6e 67 00                             Running.

00000344 <digital_pin_to_timer_PGM>:
     344:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     354:	00 00 00 00                                         ....

00000358 <digital_pin_to_bit_mask_PGM>:
     358:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     368:	04 08 10 20                                         ... 

0000036c <digital_pin_to_port_PGM>:
     36c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     37c:	03 03 03 03                                         ....

00000380 <port_to_input_PGM>:
     380:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000038a <port_to_output_PGM>:
     38a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000394 <port_to_mode_PGM>:
     394:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000039e <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     39e:	09 3c 2d 2d 2d 20 00                                .<--- .

000003a5 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     3a5:	09 2d 2d 2d 3e 20 00                                .---> .

000003ac <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     3ac:	09 3c 2d 2d 2d 20 00                                .<--- .

000003b3 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     3b3:	09 2d 2d 2d 3e 20 00                                .---> .

000003ba <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     3ba:	09 3c 2d 2d 2d 20 00                                .<--- .

000003c1 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     3c1:	09 2d 2d 2d 3e 20 00                                .---> .

000003c8 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     3c8:	09 3c 2d 2d 2d 20 00                                .<--- .

000003cf <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     3cf:	09 2d 2d 2d 3e 20 00                                .---> .

000003d6 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     3d6:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000003de <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     3de:	53 50 41 43 45 00                                   SPACE.

000003e4 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     3e4:	09 3c 2d 2d 2d 20 00                                .<--- .

000003eb <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     3eb:	52 45 44 49 52 00                                   REDIR.

000003f1 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     3f1:	55 52 4c 00                                         URL.

000003f5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     3f5:	55 41 00                                            UA.

000003f8 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     3f8:	43 49 44 00                                         CID.

000003fc <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     3fc:	4c 65 6e 3a 20 00                                   Len: .

00000402 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     402:	53 74 61 74 75 73 3a 20 00                          Status: .

0000040b <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     40b:	43 4f 4e 54 45 4e 54 00                             CONTENT.

00000413 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     413:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

0000041f <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     41f:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000042a <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     42a:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000436 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     436:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000443 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     443:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000450 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     450:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

0000045f <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     45f:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

00000468 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     468:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000475 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     475:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000482 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     482:	09 2d 2d 2d 3e 20 00                                .---> .

00000489 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     489:	22 2c 00                                            ",.

0000048c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     48c:	22 2c 22 00                                         ",".

00000490 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     490:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000049e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     49e:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004ac <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     4ac:	09 2d 2d 2d 3e 20 00                                .---> .

000004b3 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     4b3:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

000004bf <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     4bf:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000004cb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     4cb:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000004d6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     4d6:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000004e3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     4e3:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000004ee <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     4ee:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000004f6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     4f6:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000004ff <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     4ff:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

0000050c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     50c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     51c:	44 22 2c 00                                         D",.

00000520 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     520:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     530:	45 52 22 2c 00                                      ER",.

00000535 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     535:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000053f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     53f:	09 2d 2d 2d 3e 20 00                                .---> .

00000546 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     546:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000550 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     550:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     560:	4e 22 2c 00                                         N",.

00000564 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     564:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     574:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000582 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     582:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000058d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     58d:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000598 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     598:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005a0 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     5a0:	3e 20 00                                            > .

000005a3 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     5a3:	3e 20 00                                            > .

000005a6 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     5a6:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000005b0 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     5b0:	41 54 2b 43 53 51 00                                AT+CSQ.

000005b7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     5b7:	2b 43 53 51 3a 20 00                                +CSQ: .

000005be <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     5be:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000005c7 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     5c7:	2b 43 52 45 47 3a 20 00                             +CREG: .

000005cf <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     5cf:	41 54 2b 43 42 43 00                                AT+CBC.

000005d6 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     5d6:	2b 43 42 43 3a 20 00                                +CBC: .

000005dd <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     5dd:	53 49 4d 38 30 30 48 00                             SIM800H.

000005e5 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     5e5:	09 3c 2d 2d 2d 20 00                                .<--- .

000005ec <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     5ec:	09 2d 2d 2d 3e 20 00                                .---> .

000005f3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     5f3:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000603 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     603:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000613 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     613:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

0000061e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     61e:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000629 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     629:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000634 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     634:	09 3c 2d 2d 2d 20 00                                .<--- .

0000063b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     63b:	09 2d 2d 2d 3e 20 00                                .---> .

00000642 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     642:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

0000064c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     64c:	41 54 45 30 00                                      ATE0.

00000651 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     651:	41 54 45 30 00                                      ATE0.

00000656 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     656:	41 54 00                                            AT.

00000659 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     659:	41 54 00                                            AT.

0000065c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     65c:	41 54 00                                            AT.

0000065f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     65f:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     66f:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     67f:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     68f:	2e 00                                               ..

00000691 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     691:	41 54 00                                            AT.

00000694 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     694:	41 54 00                                            AT.

00000697 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     697:	41 54 00                                            AT.

0000069a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     69a:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     6aa:	61 62 6c 65 00                                      able.

000006af <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     6af:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     6bf:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000006d0 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     6d0:	4f 4b 00                                            OK.

000006d3 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     6d3:	46 4f 4e 41 00                                      FONA.

000006d8 <_ZZN13Adafruit_FONAC4EaE3__c>:
     6d8:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000006e0 <__ctors_start>:
     6e0:	f3 18       	sub	r15, r3
     6e2:	0f 1b       	sub	r16, r31
     6e4:	3e 20       	and	r3, r14

000006e6 <__ctors_end>:
     6e6:	fa 18       	sub	r15, r10

000006e8 <__dtors_end>:
     6e8:	11 24       	eor	r1, r1
     6ea:	1f be       	out	0x3f, r1	; 63
     6ec:	cf ef       	ldi	r28, 0xFF	; 255
     6ee:	d8 e0       	ldi	r29, 0x08	; 8
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	cd bf       	out	0x3d, r28	; 61

000006f4 <__do_copy_data>:
     6f4:	14 e0       	ldi	r17, 0x04	; 4
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b1 e0       	ldi	r27, 0x01	; 1
     6fa:	e8 ef       	ldi	r30, 0xF8	; 248
     6fc:	fa e6       	ldi	r31, 0x6A	; 106
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <__do_copy_data+0x10>
     700:	05 90       	lpm	r0, Z+
     702:	0d 92       	st	X+, r0
     704:	ac 30       	cpi	r26, 0x0C	; 12
     706:	b1 07       	cpc	r27, r17
     708:	d9 f7       	brne	.-10     	; 0x700 <__do_copy_data+0xc>

0000070a <__do_clear_bss>:
     70a:	27 e0       	ldi	r18, 0x07	; 7
     70c:	ac e0       	ldi	r26, 0x0C	; 12
     70e:	b4 e0       	ldi	r27, 0x04	; 4
     710:	01 c0       	rjmp	.+2      	; 0x714 <.do_clear_bss_start>

00000712 <.do_clear_bss_loop>:
     712:	1d 92       	st	X+, r1

00000714 <.do_clear_bss_start>:
     714:	a7 31       	cpi	r26, 0x17	; 23
     716:	b2 07       	cpc	r27, r18
     718:	e1 f7       	brne	.-8      	; 0x712 <.do_clear_bss_loop>

0000071a <__do_global_ctors>:
     71a:	13 e0       	ldi	r17, 0x03	; 3
     71c:	c3 e7       	ldi	r28, 0x73	; 115
     71e:	d3 e0       	ldi	r29, 0x03	; 3
     720:	04 c0       	rjmp	.+8      	; 0x72a <__do_global_ctors+0x10>
     722:	21 97       	sbiw	r28, 0x01	; 1
     724:	fe 01       	movw	r30, r28
     726:	0e 94 3e 32 	call	0x647c	; 0x647c <__tablejump2__>
     72a:	c0 37       	cpi	r28, 0x70	; 112
     72c:	d1 07       	cpc	r29, r17
     72e:	c9 f7       	brne	.-14     	; 0x722 <__do_global_ctors+0x8>
     730:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <main>
     734:	0c 94 6f 35 	jmp	0x6ade	; 0x6ade <__do_global_dtors>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN10GsmManagerC1Eh>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(uint8_t isMock)
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
     744:	16 2f       	mov	r17, r22
     746:	64 e0       	ldi	r22, 0x04	; 4
     748:	05 96       	adiw	r24, 0x05	; 5
     74a:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN13Adafruit_FONAC1Ea>
{
	_isMock = isMock;
     74e:	1c 83       	std	Y+4, r17	; 0x04
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	08 95       	ret

00000758 <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager()
     758:	08 95       	ret

0000075a <_ZN10GsmManager5beginEv>:
{
}

bool GsmManager::begin(){
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	6f 97       	sbiw	r28, 0x1f	; 31
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61

	if (_isMock)
     77a:	fc 01       	movw	r30, r24
     77c:	24 81       	ldd	r18, Z+4	; 0x04
     77e:	21 11       	cpse	r18, r1
     780:	23 c0       	rjmp	.+70     	; 0x7c8 <_ZN10GsmManager5beginEv+0x6e>
     782:	8c 01       	movw	r16, r24
		return true;
		
	SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
     784:	42 e0       	ldi	r20, 0x02	; 2
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	7c 01       	movw	r14, r24
     78e:	0e 94 c6 30 	call	0x618c	; 0x618c <_ZN14SoftwareSerialC1Ehhb>
	fonaSerial = &fonaSS;
     792:	68 01       	movw	r12, r16
     794:	91 ee       	ldi	r25, 0xE1	; 225
     796:	c9 1a       	sub	r12, r25
     798:	9e ef       	ldi	r25, 0xFE	; 254
     79a:	d9 0a       	sbc	r13, r25
     79c:	f6 01       	movw	r30, r12
     79e:	f1 82       	std	Z+1, r15	; 0x01
     7a0:	e0 82       	st	Z, r14
	
	fonaSerial->begin(4800);
     7a2:	40 ec       	ldi	r20, 0xC0	; 192
     7a4:	52 e1       	ldi	r21, 0x12	; 18
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	c7 01       	movw	r24, r14
     7ac:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     7b0:	f6 01       	movw	r30, r12
     7b2:	60 81       	ld	r22, Z
     7b4:	71 81       	ldd	r23, Z+1	; 0x01
     7b6:	c8 01       	movw	r24, r16
     7b8:	05 96       	adiw	r24, 0x05	; 5
     7ba:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <_ZN13Adafruit_FONA5beginER6Stream>
     7be:	18 2f       	mov	r17, r24
bool GsmManager::begin(){

	if (_isMock)
		return true;
		
	SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
     7c0:	c7 01       	movw	r24, r14
     7c2:	0e 94 6d 30 	call	0x60da	; 0x60da <_ZN14SoftwareSerialD1Ev>
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_ZN10GsmManager5beginEv+0x70>
}

bool GsmManager::begin(){

	if (_isMock)
		return true;
     7c8:	11 e0       	ldi	r17, 0x01	; 1
	SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
	fonaSerial = &fonaSS;
	
	fonaSerial->begin(4800);
	return fona.begin(*fonaSerial);
}
     7ca:	81 2f       	mov	r24, r17
     7cc:	6f 96       	adiw	r28, 0x1f	; 31
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	08 95       	ret

000007ea <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
	
	if (_isMock)
     7ea:	fc 01       	movw	r30, r24
     7ec:	24 81       	ldd	r18, Z+4	; 0x04
     7ee:	22 23       	and	r18, r18
     7f0:	39 f0       	breq	.+14     	; 0x800 <_ZN10GsmManager14getBattPercentEPj+0x16>
	{
		*vbat = 99;
     7f2:	83 e6       	ldi	r24, 0x63	; 99
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	fb 01       	movw	r30, r22
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	80 83       	st	Z, r24
		return true;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	08 95       	ret
	}
	
	return fona.getBattPercent(vbat);
     800:	05 96       	adiw	r24, 0x05	; 5
     802:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     806:	08 95       	ret

00000808 <_ZN10GsmManager10sendViaSmsEPc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(char* data) {
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	65 97       	sbiw	r28, 0x15	; 21
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61

	if (_isMock)
     81e:	dc 01       	movw	r26, r24
     820:	14 96       	adiw	r26, 0x04	; 4
     822:	1c 91       	ld	r17, X
     824:	14 97       	sbiw	r26, 0x04	; 4
     826:	11 23       	and	r17, r17
     828:	31 f0       	breq	.+12     	; 0x836 <_ZN10GsmManager10sendViaSmsEPc+0x2e>
	{
		MOCK_DATA_SENT_SMS = data;
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	7c 93       	st	X, r23
     82e:	6e 93       	st	-X, r22
     830:	12 97       	sbiw	r26, 0x02	; 2
		return 1;
     832:	11 e0       	ldi	r17, 0x01	; 1
     834:	1a c0       	rjmp	.+52     	; 0x86a <_ZN10GsmManager10sendViaSmsEPc+0x62>
     836:	ab 01       	movw	r20, r22
	}

	char sendto[21]="+447968988149";
     838:	2e e0       	ldi	r18, 0x0E	; 14
     83a:	e0 e2       	ldi	r30, 0x20	; 32
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	de 01       	movw	r26, r28
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	2a 95       	dec	r18
     848:	e1 f7       	brne	.-8      	; 0x842 <_ZN10GsmManager10sendViaSmsEPc+0x3a>
     84a:	fe 01       	movw	r30, r28
     84c:	3f 96       	adiw	r30, 0x0f	; 15
     84e:	27 e0       	ldi	r18, 0x07	; 7
     850:	df 01       	movw	r26, r30
     852:	1d 92       	st	X+, r1
     854:	2a 95       	dec	r18
     856:	e9 f7       	brne	.-6      	; 0x852 <_ZN10GsmManager10sendViaSmsEPc+0x4a>
	if (!fona.sendSMS(sendto, data)) {
     858:	be 01       	movw	r22, r28
     85a:	6f 5f       	subi	r22, 0xFF	; 255
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     864:	81 11       	cpse	r24, r1
     866:	01 c0       	rjmp	.+2      	; 0x86a <_ZN10GsmManager10sendViaSmsEPc+0x62>
		return 1;
     868:	11 e0       	ldi	r17, 0x01	; 1
	} else {
		return 0;
	}
}
     86a:	81 2f       	mov	r24, r17
     86c:	65 96       	adiw	r28, 0x15	; 21
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
     880:	fc 01       	movw	r30, r24
     882:	24 81       	ldd	r18, Z+4	; 0x04
     884:	21 11       	cpse	r18, r1
     886:	04 c0       	rjmp	.+8      	; 0x890 <_ZN10GsmManager16getNetworkStatusEv+0x10>
		return 7; //magic
	else
		return fona.getNetworkStatus();
     888:	05 96       	adiw	r24, 0x05	; 5
     88a:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <_ZN13Adafruit_FONA16getNetworkStatusEv>
     88e:	08 95       	ret
}

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
		return 7; //magic
     890:	87 e0       	ldi	r24, 0x07	; 7
	else
		return fona.getNetworkStatus();
}
     892:	08 95       	ret

00000894 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
     894:	fc 01       	movw	r30, r24
     896:	24 81       	ldd	r18, Z+4	; 0x04
     898:	21 11       	cpse	r18, r1
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <_ZN10GsmManager7getRSSIEv+0x10>
		return 21; //magic
	else
		return fona.getRSSI();
     89c:	05 96       	adiw	r24, 0x05	; 5
     89e:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <_ZN13Adafruit_FONA7getRSSIEv>
     8a2:	08 95       	ret
}

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
		return 21; //magic
     8a4:	85 e1       	ldi	r24, 0x15	; 21
	else
		return fona.getRSSI();
}
     8a6:	08 95       	ret

000008a8 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
	return fona.enableGPRS(switchOn);
     8a8:	05 96       	adiw	r24, 0x05	; 5
     8aa:	0e 94 02 2c 	call	0x5804	; 0x5804 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     8ae:	08 95       	ret

000008b0 <_ZN10GsmManager11sendViaGprsEPc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(char* data)
{
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <_ZN10GsmManager11sendViaGprsEPc+0x1a>
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <_ZN10GsmManager11sendViaGprsEPc+0x1c>
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
	if (_isMock)
     8d0:	fc 01       	movw	r30, r24
     8d2:	24 81       	ldd	r18, Z+4	; 0x04
     8d4:	22 23       	and	r18, r18
     8d6:	29 f0       	breq	.+10     	; 0x8e2 <_ZN10GsmManager11sendViaGprsEPc+0x32>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		MOCK_DATA_SENT_GPRS = data;
     8d8:	71 83       	std	Z+1, r23	; 0x01
     8da:	60 83       	st	Z, r22
		return 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	60 c0       	rjmp	.+192    	; 0x9a2 <__stack+0xa3>
     8e2:	4b 01       	movw	r8, r22
	uint16_t statuscode;
	int16_t length;
	char* url="http://r.mkacars.org/do.php"; //TODO: should not require https?!
		                                                      
	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     8e4:	fb 01       	movw	r30, r22
     8e6:	01 90       	ld	r0, Z+
     8e8:	00 20       	and	r0, r0
     8ea:	e9 f7       	brne	.-6      	; 0x8e6 <_ZN10GsmManager11sendViaGprsEPc+0x36>
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	8f 01       	movw	r16, r30
     8f0:	06 1b       	sub	r16, r22
     8f2:	17 0b       	sbc	r17, r23
     8f4:	5c 01       	movw	r10, r24
     8f6:	f5 e0       	ldi	r31, 0x05	; 5
     8f8:	af 0e       	add	r10, r31
     8fa:	b1 1c       	adc	r11, r1
     8fc:	ce 01       	movw	r24, r28
     8fe:	03 96       	adiw	r24, 0x03	; 3
     900:	6c 01       	movw	r12, r24
     902:	fe 01       	movw	r30, r28
     904:	31 96       	adiw	r30, 0x01	; 1
     906:	7f 01       	movw	r14, r30
     908:	9b 01       	movw	r18, r22
     90a:	42 e1       	ldi	r20, 0x12	; 18
     90c:	52 e0       	ldi	r21, 0x02	; 2
     90e:	6d e2       	ldi	r22, 0x2D	; 45
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	c5 01       	movw	r24, r10
     914:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     918:	81 11       	cpse	r24, r1
     91a:	19 c0       	rjmp	.+50     	; 0x94e <__stack+0x4f>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     91c:	21 e1       	ldi	r18, 0x11	; 17
     91e:	32 e0       	ldi	r19, 0x02	; 2
     920:	40 e1       	ldi	r20, 0x10	; 16
     922:	52 e0       	ldi	r21, 0x02	; 2
     924:	65 e0       	ldi	r22, 0x05	; 5
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	c5 01       	movw	r24, r10
     92a:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     92e:	f4 01       	movw	r30, r8
     930:	01 90       	ld	r0, Z+
     932:	00 20       	and	r0, r0
     934:	e9 f7       	brne	.-6      	; 0x930 <__stack+0x31>
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	8f 01       	movw	r16, r30
     93a:	08 19       	sub	r16, r8
     93c:	19 09       	sbc	r17, r9
     93e:	94 01       	movw	r18, r8
     940:	4a ef       	ldi	r20, 0xFA	; 250
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	6d e2       	ldi	r22, 0x2D	; 45
     946:	72 e0       	ldi	r23, 0x02	; 2
     948:	c5 01       	movw	r24, r10
     94a:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
	}

	if (!succ)
     94e:	88 23       	and	r24, r24
     950:	31 f1       	breq	.+76     	; 0x99e <__stack+0x9f>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	9c 81       	ldd	r25, Y+4	; 0x04
     956:	18 16       	cp	r1, r24
     958:	19 06       	cpc	r1, r25
     95a:	b4 f4       	brge	.+44     	; 0x988 <__stack+0x89>
			while (fona.available()) {
     95c:	c5 01       	movw	r24, r10
     95e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <_ZN13Adafruit_FONA9availableEv>
     962:	89 2b       	or	r24, r25
     964:	b1 f3       	breq	.-20     	; 0x952 <__stack+0x53>
				char c = fona.read();
     966:	c5 01       	movw	r24, r10
     968:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <_ZN13Adafruit_FONA4readEv>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     96c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     970:	95 ff       	sbrs	r25, 5
     972:	fc cf       	rjmp	.-8      	; 0x96c <__stack+0x6d>
				UDR0 = c;
     974:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
					                                                      
				length--;
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	9c 83       	std	Y+4, r25	; 0x04
     980:	8b 83       	std	Y+3, r24	; 0x03
				if (! length) break;
     982:	89 2b       	or	r24, r25
     984:	59 f7       	brne	.-42     	; 0x95c <__stack+0x5d>
     986:	e5 cf       	rjmp	.-54     	; 0x952 <__stack+0x53>
			}
		}
		fona.HTTP_POST_end();
     988:	c5 01       	movw	r24, r10
     98a:	0e 94 86 2a 	call	0x550c	; 0x550c <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	88 3c       	cpi	r24, 0xC8	; 200
     994:	91 05       	cpc	r25, r1
     996:	29 f4       	brne	.+10     	; 0x9a2 <__stack+0xa3>
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
	}

	if (!succ)
	{
		ret = 999;
     99e:	87 ee       	ldi	r24, 0xE7	; 231
     9a0:	93 e0       	ldi	r25, 0x03	; 3
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
	}
	                                                      
	return ret;
}
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	08 95       	ret

000009c4 <_Z16getNumOfPadCharsjh>:
		*(buffer++) = '0';
	
	*(buffer++) = value;

	return padChars + 1;
}
     9c4:	8a 30       	cpi	r24, 0x0A	; 10
     9c6:	91 05       	cpc	r25, r1
     9c8:	38 f4       	brcc	.+14     	; 0x9d8 <_Z16getNumOfPadCharsjh+0x14>
     9ca:	86 2f       	mov	r24, r22
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	42 f5       	brpl	.+80     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	08 95       	ret
     9d8:	84 36       	cpi	r24, 0x64	; 100
     9da:	91 05       	cpc	r25, r1
     9dc:	38 f4       	brcc	.+14     	; 0x9ec <_Z16getNumOfPadCharsjh+0x28>
     9de:	86 2f       	mov	r24, r22
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 97       	sbiw	r24, 0x02	; 2
     9e4:	f2 f4       	brpl	.+60     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	08 95       	ret
     9ec:	88 3e       	cpi	r24, 0xE8	; 232
     9ee:	23 e0       	ldi	r18, 0x03	; 3
     9f0:	92 07       	cpc	r25, r18
     9f2:	38 f4       	brcc	.+14     	; 0xa02 <_Z16getNumOfPadCharsjh+0x3e>
     9f4:	86 2f       	mov	r24, r22
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	03 97       	sbiw	r24, 0x03	; 3
     9fa:	9a f4       	brpl	.+38     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	08 95       	ret
     a02:	80 31       	cpi	r24, 0x10	; 16
     a04:	97 42       	sbci	r25, 0x27	; 39
     a06:	38 f4       	brcc	.+14     	; 0xa16 <_Z16getNumOfPadCharsjh+0x52>
     a08:	86 2f       	mov	r24, r22
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	04 97       	sbiw	r24, 0x04	; 4
     a0e:	4a f4       	brpl	.+18     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	08 95       	ret
     a16:	86 2f       	mov	r24, r22
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	05 97       	sbiw	r24, 0x05	; 5
     a1c:	12 f4       	brpl	.+4      	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret

00000a24 <_Z19writeCharArrWithPadPcPKch>:



byte writeCharArrWithPad(char* buffer, const char* value, byte padLength)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	fc 01       	movw	r30, r24
	byte valLen = strlen(value);
     a2a:	eb 01       	movw	r28, r22
     a2c:	09 90       	ld	r0, Y+
     a2e:	00 20       	and	r0, r0
     a30:	e9 f7       	brne	.-6      	; 0xa2c <_Z19writeCharArrWithPadPcPKch+0x8>
     a32:	21 97       	sbiw	r28, 0x01	; 1
     a34:	c6 1b       	sub	r28, r22
     a36:	d7 0b       	sbc	r29, r23
     a38:	8c 2f       	mov	r24, r28
	byte padChars = max(0, padLength-valLen);
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	4c 1b       	sub	r20, r28
     a3e:	51 09       	sbc	r21, r1
     a40:	12 f4       	brpl	.+4      	; 0xa46 <_Z19writeCharArrWithPadPcPKch+0x22>
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	94 17       	cp	r25, r20
     a4a:	28 f4       	brcc	.+10     	; 0xa56 <_Z19writeCharArrWithPadPcPKch+0x32>
		*(buffer++) = '0';
     a4c:	20 e3       	ldi	r18, 0x30	; 48
     a4e:	20 83       	st	Z, r18
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a50:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = '0';
     a52:	31 96       	adiw	r30, 0x01	; 1
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a54:	f9 cf       	rjmp	.-14     	; 0xa48 <_Z19writeCharArrWithPadPcPKch+0x24>
     a56:	90 e0       	ldi	r25, 0x00	; 0
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a58:	98 17       	cp	r25, r24
     a5a:	40 f4       	brcc	.+16     	; 0xa6c <_Z19writeCharArrWithPadPcPKch+0x48>
		*(buffer++) = *(value+i);
     a5c:	db 01       	movw	r26, r22
     a5e:	a9 0f       	add	r26, r25
     a60:	b1 1d       	adc	r27, r1
     a62:	2c 91       	ld	r18, X
     a64:	20 83       	st	Z, r18
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a66:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = *(value+i);
     a68:	31 96       	adiw	r30, 0x01	; 1
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a6a:	f6 cf       	rjmp	.-20     	; 0xa58 <_Z19writeCharArrWithPadPcPKch+0x34>
		*(buffer++) = *(value+i);

	return padChars + valLen;
}
     a6c:	8c 2f       	mov	r24, r28
     a6e:	84 0f       	add	r24, r20
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <_Z16writeByteWithPadPchh>:
	//
	//return writeCharArrWithPad(buffer, strRaw, padLength);
//}

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
	byte padChars =getNumOfPadChars(value, padLength);
     a82:	e6 2e       	mov	r14, r22
     a84:	f1 2c       	mov	r15, r1
     a86:	64 2f       	mov	r22, r20
     a88:	c7 01       	movw	r24, r14
     a8a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z16getNumOfPadCharsjh>
     a8e:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	81 17       	cp	r24, r17
     a94:	28 f4       	brcc	.+10     	; 0xaa0 <_Z16writeByteWithPadPchh+0x2a>
		*(buffer++) = '0';
     a96:	90 e3       	ldi	r25, 0x30	; 48
     a98:	98 83       	st	Y, r25

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     a9c:	21 96       	adiw	r28, 0x01	; 1

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     a9e:	f9 cf       	rjmp	.-14     	; 0xa92 <_Z16writeByteWithPadPchh+0x1c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     aa0:	4a e0       	ldi	r20, 0x0A	; 10
     aa2:	be 01       	movw	r22, r28
     aa4:	c7 01       	movw	r24, r14
     aa6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     aac:	fe 01       	movw	r30, r28
     aae:	e8 0f       	add	r30, r24
     ab0:	f1 1d       	adc	r31, r1
     ab2:	90 81       	ld	r25, Z
     ab4:	99 23       	and	r25, r25
     ab6:	11 f0       	breq	.+4      	; 0xabc <_Z16writeByteWithPadPchh+0x46>
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	f8 cf       	rjmp	.-16     	; 0xaac <_Z16writeByteWithPadPchh+0x36>
	
	return padChars + offset;	
}
     abc:	81 0f       	add	r24, r17
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <_Z12writeWithPadPcjh>:

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	7b 01       	movw	r14, r22
	byte padChars =getNumOfPadChars(value, padLength);
     ad8:	64 2f       	mov	r22, r20
     ada:	c7 01       	movw	r24, r14
     adc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z16getNumOfPadCharsjh>
     ae0:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	81 17       	cp	r24, r17
     ae6:	28 f4       	brcc	.+10     	; 0xaf2 <_Z12writeWithPadPcjh+0x28>
		*(buffer++) = '0';
     ae8:	90 e3       	ldi	r25, 0x30	; 48
     aea:	98 83       	st	Y, r25

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     aec:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     aee:	21 96       	adiw	r28, 0x01	; 1

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     af0:	f9 cf       	rjmp	.-14     	; 0xae4 <_Z12writeWithPadPcjh+0x1a>
     af2:	4a e0       	ldi	r20, 0x0A	; 10
     af4:	be 01       	movw	r22, r28
     af6:	c7 01       	movw	r24, r14
     af8:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     afc:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     afe:	fe 01       	movw	r30, r28
     b00:	e8 0f       	add	r30, r24
     b02:	f1 1d       	adc	r31, r1
     b04:	90 81       	ld	r25, Z
     b06:	99 23       	and	r25, r25
     b08:	11 f0       	breq	.+4      	; 0xb0e <_Z12writeWithPadPcjh+0x44>
     b0a:	8f 5f       	subi	r24, 0xFF	; 255
     b0c:	f8 cf       	rjmp	.-16     	; 0xafe <_Z12writeWithPadPcjh+0x34>
	
	return padChars + offset;
}
     b0e:	81 0f       	add	r24, r17
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <_ZN12RmMemManagerC1Ev>:
	volatile byte byte1 = * ((byte*)&value); //LSB
	volatile byte byte2 = * (((byte*)&value)+1); //MSB
	
	EEPROM.write(address,   byte1);
	EEPROM.write(address+1, byte2);
}
     b1c:	08 95       	ret

00000b1e <_ZN12RmMemManagerD1Ev>:
     b1e:	08 95       	ret

00000b20 <_ZN12RmMemManager17getLongFromMemoryEj>:
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <_ZN12RmMemManager17getLongFromMemoryEj+0x10>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <_ZN12RmMemManager17getLongFromMemoryEj+0x12>
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	8b 01       	movw	r16, r22
     b38:	cb 01       	movw	r24, r22
     b3a:	0e 94 22 35 	call	0x6a44	; 0x6a44 <eeprom_read_byte>
     b3e:	d8 2e       	mov	r13, r24
     b40:	c8 01       	movw	r24, r16
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 22 35 	call	0x6a44	; 0x6a44 <eeprom_read_byte>
     b48:	e8 2e       	mov	r14, r24
     b4a:	c8 01       	movw	r24, r16
     b4c:	02 96       	adiw	r24, 0x02	; 2
     b4e:	0e 94 22 35 	call	0x6a44	; 0x6a44 <eeprom_read_byte>
     b52:	f8 2e       	mov	r15, r24
     b54:	c8 01       	movw	r24, r16
     b56:	03 96       	adiw	r24, 0x03	; 3
     b58:	0e 94 22 35 	call	0x6a44	; 0x6a44 <eeprom_read_byte>
     b5c:	4d 2d       	mov	r20, r13
     b5e:	5e 2d       	mov	r21, r14
     b60:	6f 2d       	mov	r22, r15
     b62:	78 2f       	mov	r23, r24
     b64:	49 83       	std	Y+1, r20	; 0x01
     b66:	5a 83       	std	Y+2, r21	; 0x02
     b68:	6b 83       	std	Y+3, r22	; 0x03
     b6a:	7c 83       	std	Y+4, r23	; 0x04
     b6c:	69 81       	ldd	r22, Y+1	; 0x01
     b6e:	7a 81       	ldd	r23, Y+2	; 0x02
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	08 95       	ret

00000b8c <_ZN12RmMemManager15setLongToMemoryEjm>:
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	28 97       	sbiw	r28, 0x08	; 8
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	8b 01       	movw	r16, r22
     ba6:	2d 83       	std	Y+5, r18	; 0x05
     ba8:	3e 83       	std	Y+6, r19	; 0x06
     baa:	4f 83       	std	Y+7, r20	; 0x07
     bac:	58 87       	std	Y+8, r21	; 0x08
     bae:	29 83       	std	Y+1, r18	; 0x01
     bb0:	8e 81       	ldd	r24, Y+6	; 0x06
     bb2:	8a 83       	std	Y+2, r24	; 0x02
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	8b 83       	std	Y+3, r24	; 0x03
     bb8:	88 85       	ldd	r24, Y+8	; 0x08
     bba:	8c 83       	std	Y+4, r24	; 0x04
     bbc:	69 81       	ldd	r22, Y+1	; 0x01
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <eeprom_write_byte>
     bc4:	6a 81       	ldd	r22, Y+2	; 0x02
     bc6:	c8 01       	movw	r24, r16
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <eeprom_write_byte>
     bce:	6b 81       	ldd	r22, Y+3	; 0x03
     bd0:	c8 01       	movw	r24, r16
     bd2:	02 96       	adiw	r24, 0x02	; 2
     bd4:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <eeprom_write_byte>
     bd8:	6c 81       	ldd	r22, Y+4	; 0x04
     bda:	c8 01       	movw	r24, r16
     bdc:	03 96       	adiw	r24, 0x03	; 3
     bde:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <eeprom_write_byte>
     be2:	28 96       	adiw	r28, 0x08	; 8
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
     bf8:	af 92       	push	r10
     bfa:	bf 92       	push	r11
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	69 97       	sbiw	r28, 0x19	; 25
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	5c 01       	movw	r10, r24
     c1e:	7b 01       	movw	r14, r22
     c20:	8a 01       	movw	r16, r20
     c22:	69 01       	movw	r12, r18
	uint8_t readingSz = sizeof(SensorData);
	
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     c24:	64 e6       	ldi	r22, 0x64	; 100
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
     c2c:	69 83       	std	Y+1, r22	; 0x01
     c2e:	7a 83       	std	Y+2, r23	; 0x02
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	9c 83       	std	Y+4, r25	; 0x04
	volatile unsigned long alreadySentTo = getLongFromMemory(MEMLOC_SENT_UPTO);
     c34:	6c e0       	ldi	r22, 0x0C	; 12
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	c5 01       	movw	r24, r10
     c3a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
     c3e:	6d 83       	std	Y+5, r22	; 0x05
     c40:	7e 83       	std	Y+6, r23	; 0x06
     c42:	8f 83       	std	Y+7, r24	; 0x07
     c44:	98 87       	std	Y+8, r25	; 0x08
	
	//We need the last {<maxNoOfReadings}. This may mean we skip from {alreadySentTo-x} onwards.
	volatile unsigned long numOfLastReadings = min(entryCount-alreadySentTo, maxNoOfReadings); //Take last n readings
     c46:	49 81       	ldd	r20, Y+1	; 0x01
     c48:	5a 81       	ldd	r21, Y+2	; 0x02
     c4a:	6b 81       	ldd	r22, Y+3	; 0x03
     c4c:	7c 81       	ldd	r23, Y+4	; 0x04
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	af 81       	ldd	r26, Y+7	; 0x07
     c54:	b8 85       	ldd	r27, Y+8	; 0x08
     c56:	48 1b       	sub	r20, r24
     c58:	59 0b       	sbc	r21, r25
     c5a:	6a 0b       	sbc	r22, r26
     c5c:	7b 0b       	sbc	r23, r27
     c5e:	c8 01       	movw	r24, r16
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	48 17       	cp	r20, r24
     c66:	59 07       	cpc	r21, r25
     c68:	6a 07       	cpc	r22, r26
     c6a:	7b 07       	cpc	r23, r27
     c6c:	60 f4       	brcc	.+24     	; 0xc86 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x8e>
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	ab 81       	ldd	r26, Y+3	; 0x03
     c74:	bc 81       	ldd	r27, Y+4	; 0x04
     c76:	4d 81       	ldd	r20, Y+5	; 0x05
     c78:	5e 81       	ldd	r21, Y+6	; 0x06
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	84 1b       	sub	r24, r20
     c80:	95 0b       	sbc	r25, r21
     c82:	a6 0b       	sbc	r26, r22
     c84:	b7 0b       	sbc	r27, r23
     c86:	89 87       	std	Y+9, r24	; 0x09
     c88:	9a 87       	std	Y+10, r25	; 0x0a
     c8a:	ab 87       	std	Y+11, r26	; 0x0b
     c8c:	bc 87       	std	Y+12, r27	; 0x0c
	if (numOfLastReadings == 0)
     c8e:	69 85       	ldd	r22, Y+9	; 0x09
     c90:	7a 85       	ldd	r23, Y+10	; 0x0a
     c92:	8b 85       	ldd	r24, Y+11	; 0x0b
     c94:	9c 85       	ldd	r25, Y+12	; 0x0c
     c96:	61 15       	cp	r22, r1
     c98:	71 05       	cpc	r23, r1
     c9a:	81 05       	cpc	r24, r1
     c9c:	91 05       	cpc	r25, r1
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xbc>
	{
		*loadedUpTo = alreadySentTo; /* Nothing more */
     ca0:	0d 81       	ldd	r16, Y+5	; 0x05
     ca2:	1e 81       	ldd	r17, Y+6	; 0x06
     ca4:	2f 81       	ldd	r18, Y+7	; 0x07
     ca6:	38 85       	ldd	r19, Y+8	; 0x08
     ca8:	f6 01       	movw	r30, r12
     caa:	00 83       	st	Z, r16
     cac:	11 83       	std	Z+1, r17	; 0x01
     cae:	22 83       	std	Z+2, r18	; 0x02
     cb0:	33 83       	std	Z+3, r19	; 0x03
		return 0; //Nothing to send
     cb2:	69 c0       	rjmp	.+210    	; 0xd86 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x18e>
	}
	
	//Get read idx => 2 readings if 10 entry count => @ idx 8 offset
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	ab 81       	ldd	r26, Y+3	; 0x03
     cba:	bc 81       	ldd	r27, Y+4	; 0x04
     cbc:	49 85       	ldd	r20, Y+9	; 0x09
     cbe:	5a 85       	ldd	r21, Y+10	; 0x0a
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	84 1b       	sub	r24, r20
     cc6:	95 0b       	sbc	r25, r21
     cc8:	a6 0b       	sbc	r26, r22
     cca:	b7 0b       	sbc	r27, r23
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	9e 87       	std	Y+14, r25	; 0x0e
     cda:	8d 87       	std	Y+13, r24	; 0x0d
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	88 59       	subi	r24, 0x98	; 152
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	98 8b       	std	Y+16, r25	; 0x10
     ce6:	8f 87       	std	Y+15, r24	; 0x0f

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     ce8:	18 8e       	std	Y+24, r1	; 0x18
     cea:	1f 8a       	std	Y+23, r1	; 0x17
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	09 2e       	mov	r0, r25
     cf2:	00 0c       	add	r0, r0
     cf4:	aa 0b       	sbc	r26, r26
     cf6:	bb 0b       	sbc	r27, r27
     cf8:	49 85       	ldd	r20, Y+9	; 0x09
     cfa:	5a 85       	ldd	r21, Y+10	; 0x0a
     cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     d00:	84 17       	cp	r24, r20
     d02:	95 07       	cpc	r25, r21
     d04:	a6 07       	cpc	r26, r22
     d06:	b7 07       	cpc	r27, r23
     d08:	88 f5       	brcc	.+98     	; 0xd6c <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x174>
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     d0a:	1e 8a       	std	Y+22, r1	; 0x16
     d0c:	1d 8a       	std	Y+21, r1	; 0x15
     d0e:	8d 89       	ldd	r24, Y+21	; 0x15
     d10:	9e 89       	ldd	r25, Y+22	; 0x16
     d12:	08 97       	sbiw	r24, 0x08	; 8
     d14:	2c f5       	brge	.+74     	; 0xd60 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x168>
		{
			unsigned int currBufferOffset = (readingNo*readingSz)+byteIdx;//curr buffer offset
     d16:	0f 89       	ldd	r16, Y+23	; 0x17
     d18:	18 8d       	ldd	r17, Y+24	; 0x18
     d1a:	00 0f       	add	r16, r16
     d1c:	11 1f       	adc	r17, r17
     d1e:	00 0f       	add	r16, r16
     d20:	11 1f       	adc	r17, r17
     d22:	00 0f       	add	r16, r16
     d24:	11 1f       	adc	r17, r17
     d26:	8d 89       	ldd	r24, Y+21	; 0x15
     d28:	9e 89       	ldd	r25, Y+22	; 0x16
     d2a:	08 0f       	add	r16, r24
     d2c:	19 1f       	adc	r17, r25
			unsigned int currReadAddress = startReadAddress + currBufferOffset;
     d2e:	af 84       	ldd	r10, Y+15	; 0x0f
     d30:	b8 88       	ldd	r11, Y+16	; 0x10
     d32:	a0 0e       	add	r10, r16
     d34:	b1 1e       	adc	r11, r17
			unsigned volatile int stopme=currBufferOffset;
     d36:	1c 8b       	std	Y+20, r17	; 0x14
     d38:	0b 8b       	std	Y+19, r16	; 0x13
			unsigned volatile int stopme2=currReadAddress;
     d3a:	ba 8a       	std	Y+18, r11	; 0x12
     d3c:	a9 8a       	std	Y+17, r10	; 0x11

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     d3e:	c5 01       	movw	r24, r10
     d40:	0e 94 22 35 	call	0x6a44	; 0x6a44 <eeprom_read_byte>
			volatile byte stopx = (byte)EEPROM.read(currReadAddress);
     d44:	89 8f       	std	Y+25, r24	; 0x19
			*(rPtr+currBufferOffset) = EEPROM.read(currReadAddress);
     d46:	0e 0d       	add	r16, r14
     d48:	1f 1d       	adc	r17, r15
     d4a:	c5 01       	movw	r24, r10
     d4c:	0e 94 22 35 	call	0x6a44	; 0x6a44 <eeprom_read_byte>
     d50:	f8 01       	movw	r30, r16
     d52:	80 83       	st	Z, r24
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     d54:	8d 89       	ldd	r24, Y+21	; 0x15
     d56:	9e 89       	ldd	r25, Y+22	; 0x16
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	9e 8b       	std	Y+22, r25	; 0x16
     d5c:	8d 8b       	std	Y+21, r24	; 0x15
     d5e:	d7 cf       	rjmp	.-82     	; 0xd0e <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x116>
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     d60:	8f 89       	ldd	r24, Y+23	; 0x17
     d62:	98 8d       	ldd	r25, Y+24	; 0x18
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	98 8f       	std	Y+24, r25	; 0x18
     d68:	8f 8b       	std	Y+23, r24	; 0x17
     d6a:	c0 cf       	rjmp	.-128    	; 0xcec <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xf4>
			unsigned volatile int stopme2=currReadAddress;
			volatile byte stopx = (byte)EEPROM.read(currReadAddress);
			*(rPtr+currBufferOffset) = EEPROM.read(currReadAddress);
		}
	
	*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	ab 81       	ldd	r26, Y+3	; 0x03
     d72:	bc 81       	ldd	r27, Y+4	; 0x04
     d74:	f6 01       	movw	r30, r12
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	a2 83       	std	Z+2, r26	; 0x02
     d7c:	b3 83       	std	Z+3, r27	; 0x03
	return numOfLastReadings;
     d7e:	69 85       	ldd	r22, Y+9	; 0x09
     d80:	7a 85       	ldd	r23, Y+10	; 0x0a
     d82:	8b 85       	ldd	r24, Y+11	; 0x0b
     d84:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     d86:	69 96       	adiw	r28, 0x19	; 25
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <_ZN12RmMemManager12markDataSentEm>:

void RmMemManager::markDataSent(unsigned long sentUpTo)
{
	setLongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
     da8:	9a 01       	movw	r18, r20
     daa:	ab 01       	movw	r20, r22
     dac:	6c e0       	ldi	r22, 0x0C	; 12
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
     db4:	08 95       	ret

00000db6 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
}

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
     db6:	08 95       	ret

00000db8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:
	//TODO
}

void RmMemManager::appendSensorEntry(SensorData* r)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	60 97       	sbiw	r28, 0x10	; 16
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	6c 01       	movw	r12, r24
     dda:	7b 01       	movw	r14, r22
	volatile unsigned int readingSz = sizeof(SensorData); //const
     ddc:	88 e0       	ldi	r24, 0x08	; 8
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
	
	//Read where next entry is free
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     de4:	64 e6       	ldi	r22, 0x64	; 100
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	c6 01       	movw	r24, r12
     dea:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
     dee:	6b 83       	std	Y+3, r22	; 0x03
     df0:	7c 83       	std	Y+4, r23	; 0x04
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	9e 83       	std	Y+6, r25	; 0x06
	volatile unsigned long nextFreeOffset = entryCount * sizeof(SensorData);
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	ad 81       	ldd	r26, Y+5	; 0x05
     dfc:	be 81       	ldd	r27, Y+6	; 0x06
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	aa 1f       	adc	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	aa 1f       	adc	r26, r26
     e0c:	bb 1f       	adc	r27, r27
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	aa 1f       	adc	r26, r26
     e14:	bb 1f       	adc	r27, r27
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
     e1a:	a9 87       	std	Y+9, r26	; 0x09
     e1c:	ba 87       	std	Y+10, r27	; 0x0a
	volatile unsigned long nextFreeAddress = MEMADDR_READING_DATA_START + nextFreeOffset;
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
     e20:	98 85       	ldd	r25, Y+8	; 0x08
     e22:	a9 85       	ldd	r26, Y+9	; 0x09
     e24:	ba 85       	ldd	r27, Y+10	; 0x0a
     e26:	88 59       	subi	r24, 0x98	; 152
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	af 4f       	sbci	r26, 0xFF	; 255
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	8b 87       	std	Y+11, r24	; 0x0b
     e30:	9c 87       	std	Y+12, r25	; 0x0c
     e32:	ad 87       	std	Y+13, r26	; 0x0d
     e34:	be 87       	std	Y+14, r27	; 0x0e

	//TODO: modulo both free address (AND entry count?)

	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     e36:	00 e0       	ldi	r16, 0x00	; 0
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	08 30       	cpi	r16, 0x08	; 8
     e3c:	11 05       	cpc	r17, r1
     e3e:	78 f4       	brcc	.+30     	; 0xe5e <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0xa6>
		EEPROM.write(nextFreeAddress+i, *(rPtr+i));
     e40:	f7 01       	movw	r30, r14
     e42:	e0 0f       	add	r30, r16
     e44:	f1 1f       	adc	r31, r17
     e46:	60 81       	ld	r22, Z
     e48:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4c:	ad 85       	ldd	r26, Y+13	; 0x0d
     e4e:	be 85       	ldd	r27, Y+14	; 0x0e
     e50:	80 0f       	add	r24, r16
     e52:	91 1f       	adc	r25, r17
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     e54:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <eeprom_write_byte>

	//TODO: modulo both free address (AND entry count?)

	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     e58:	0f 5f       	subi	r16, 0xFF	; 255
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	ee cf       	rjmp	.-36     	; 0xe3a <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x82>
		EEPROM.write(nextFreeAddress+i, *(rPtr+i));

	//Update entry count
	setLongToMemory(MEMLOC_READING_ENTRY_COUNT, entryCount+1);
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	ad 81       	ldd	r26, Y+5	; 0x05
     e64:	be 81       	ldd	r27, Y+6	; 0x06
     e66:	9c 01       	movw	r18, r24
     e68:	ad 01       	movw	r20, r26
     e6a:	2f 5f       	subi	r18, 0xFF	; 255
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	4f 4f       	sbci	r20, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	64 e6       	ldi	r22, 0x64	; 100
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	c6 01       	movw	r24, r12
     e78:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	volatile int stop=2;
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	98 8b       	std	Y+16, r25	; 0x10
     e82:	8f 87       	std	Y+15, r24	; 0x0f
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
     e84:	60 96       	adiw	r28, 0x10	; 16
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	08 95       	ret

00000ea2 <_Z13internalFlashRbS_9LED_STATEb>:
	)
{
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
     ea2:	40 32       	cpi	r20, 0x20	; 32
     ea4:	31 f4       	brne	.+12     	; 0xeb2 <_Z13internalFlashRbS_9LED_STATEb+0x10>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
     ea6:	fc 01       	movw	r30, r24
     ea8:	50 81       	ld	r21, Z
     eaa:	31 e0       	ldi	r19, 0x01	; 1
     eac:	35 27       	eor	r19, r21
     eae:	30 83       	st	Z, r19
     eb0:	0f c0       	rjmp	.+30     	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Slow) {
     eb2:	40 34       	cpi	r20, 0x40	; 64
     eb4:	19 f4       	brne	.+6      	; 0xebc <_Z13internalFlashRbS_9LED_STATEb+0x1a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Solid) {
     ebc:	40 31       	cpi	r20, 0x10	; 16
     ebe:	21 f4       	brne	.+8      	; 0xec8 <_Z13internalFlashRbS_9LED_STATEb+0x26>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
     ec0:	31 e0       	ldi	r19, 0x01	; 1
     ec2:	fc 01       	movw	r30, r24
     ec4:	30 83       	st	Z, r19
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == All_Clear) {
     ec8:	40 38       	cpi	r20, 0x80	; 128
     eca:	11 f4       	brne	.+4      	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
     ecc:	fc 01       	movw	r30, r24
     ece:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
     ed0:	42 30       	cpi	r20, 0x02	; 2
     ed2:	31 f4       	brne	.+12     	; 0xee0 <_Z13internalFlashRbS_9LED_STATEb+0x3e>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
     ed4:	fb 01       	movw	r30, r22
     ed6:	90 81       	ld	r25, Z
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	89 27       	eor	r24, r25
     edc:	80 83       	st	Z, r24
     ede:	08 95       	ret
	}
	else if (currLedState == Red_Slow) {
     ee0:	44 30       	cpi	r20, 0x04	; 4
     ee2:	19 f4       	brne	.+6      	; 0xeea <_Z13internalFlashRbS_9LED_STATEb+0x48>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
     ee4:	fb 01       	movw	r30, r22
     ee6:	20 83       	st	Z, r18
     ee8:	08 95       	ret
	}
	else if (currLedState == Red_Solid) {
     eea:	41 30       	cpi	r20, 0x01	; 1
     eec:	21 f4       	brne	.+8      	; 0xef6 <_Z13internalFlashRbS_9LED_STATEb+0x54>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	fb 01       	movw	r30, r22
     ef2:	80 83       	st	Z, r24
     ef4:	08 95       	ret
	}
	else if (currLedState == All_Clear) {
     ef6:	40 38       	cpi	r20, 0x80	; 128
     ef8:	11 f4       	brne	.+4      	; 0xefe <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
     efa:	fb 01       	movw	r30, r22
     efc:	10 82       	st	Z, r1
     efe:	08 95       	ret

00000f00 <_ZN12RmMemManager8flashLEDEv>:

//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
     f00:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__data_end>
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	8b ea       	ldi	r24, 0xAB	; 171
     f08:	98 9f       	mul	r25, r24
     f0a:	81 2d       	mov	r24, r1
     f0c:	11 24       	eor	r1, r1
     f0e:	86 95       	lsr	r24
     f10:	28 2f       	mov	r18, r24
     f12:	22 0f       	add	r18, r18
     f14:	82 0f       	add	r24, r18
     f16:	98 1b       	sub	r25, r24
     f18:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <__data_end>

	//Flash Bottom LED	
	internalFlash(
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	91 11       	cpse	r25, r1
     f20:	20 e0       	ldi	r18, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
     f22:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <_ledBottomState>
     f26:	6f e0       	ldi	r22, 0x0F	; 15
     f28:	74 e0       	ldi	r23, 0x04	; 4
     f2a:	80 e1       	ldi	r24, 0x10	; 16
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
     f32:	60 91 0f 04 	lds	r22, 0x040F	; 0x80040f <_ledBottomPinGreen>
     f36:	89 e0       	ldi	r24, 0x09	; 9
     f38:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
     f3c:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <_ledBottomPinRed>
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
				
	//Flash Top LED
	internalFlash(
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__data_end>
     f4c:	81 11       	cpse	r24, r1
     f4e:	20 e0       	ldi	r18, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
     f50:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ledTopState>
     f54:	6e e0       	ldi	r22, 0x0E	; 14
     f56:	74 e0       	ldi	r23, 0x04	; 4
     f58:	8d e0       	ldi	r24, 0x0D	; 13
     f5a:	94 e0       	ldi	r25, 0x04	; 4
     f5c:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
     f60:	60 91 0d 04 	lds	r22, 0x040D	; 0x80040d <_ledTopPinGreen>
     f64:	8b e0       	ldi	r24, 0x0B	; 11
     f66:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
     f6a:	60 91 0e 04 	lds	r22, 0x040E	; 0x80040e <_ledTopPinRed>
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
     f74:	08 95       	ret

00000f76 <_Z41__static_initialization_and_destruction_0ii>:
void assertInt(unsigned int expected, unsigned int actual, char* msg = NULL)
{
	volatile unsigned int stp=expected;
	
	assertTrue(expected == actual);
}
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	8b 01       	movw	r16, r22
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	a9 f4       	brne	.+42     	; 0xfb0 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     f86:	6f 3f       	cpi	r22, 0xFF	; 255
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	91 f4       	brne	.+36     	; 0xfb0 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     f8c:	89 e6       	ldi	r24, 0x69	; 105
     f8e:	95 e0       	ldi	r25, 0x05	; 5
     f90:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN12RmMemManagerC1Ev>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	88 e4       	ldi	r24, 0x48	; 72
     f98:	94 e0       	ldi	r25, 0x04	; 4
     f9a:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN10GsmManagerC1Eh>
     f9e:	24 eb       	ldi	r18, 0xB4	; 180
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	83 e2       	ldi	r24, 0x23	; 35
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	0e 94 16 1b 	call	0x362c	; 0x362c <_ZN6TimingC1Ehm>
     fb0:	cd 2b       	or	r28, r29
     fb2:	79 f4       	brne	.+30     	; 0xfd2 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     fb4:	0f 3f       	cpi	r16, 0xFF	; 255
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	61 f4       	brne	.+24     	; 0xfd2 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     fba:	83 e2       	ldi	r24, 0x23	; 35
     fbc:	94 e0       	ldi	r25, 0x04	; 4
     fbe:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN6TimingD1Ev>
     fc2:	88 e4       	ldi	r24, 0x48	; 72
     fc4:	94 e0       	ldi	r25, 0x04	; 4
     fc6:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN10GsmManagerD1Ev>
     fca:	89 e6       	ldi	r24, 0x69	; 105
     fcc:	95 e0       	ldi	r25, 0x05	; 5
     fce:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN12RmMemManagerD1Ev>
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <_Z15get_free_memoryv>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <_Z15get_free_memoryv+0x6>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <__brkval>
     fea:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <__brkval+0x1>
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	31 f4       	brne	.+12     	; 0xffe <_Z15get_free_memoryv+0x22>
     ff2:	ce 01       	movw	r24, r28
     ff4:	86 51       	subi	r24, 0x16	; 22
     ff6:	97 40       	sbci	r25, 0x07	; 7
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <_Z15get_free_memoryv+0x32>
     ffe:	9e 01       	movw	r18, r28
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	a9 01       	movw	r20, r18
    1006:	48 1b       	sub	r20, r24
    1008:	59 0b       	sbc	r21, r25
    100a:	5a 83       	std	Y+2, r21	; 0x02
    100c:	49 83       	std	Y+1, r20	; 0x01
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <_Z24initialiseModulePristinej>:
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	28 97       	sbiw	r28, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e2       	ldi	r21, 0x20	; 32
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	49 83       	std	Y+1, r20	; 0x01
    103a:	5a 83       	std	Y+2, r21	; 0x02
    103c:	6b 83       	std	Y+3, r22	; 0x03
    103e:	7c 83       	std	Y+4, r23	; 0x04
    1040:	4f ef       	ldi	r20, 0xFF	; 255
    1042:	5f ed       	ldi	r21, 0xDF	; 223
    1044:	6f ef       	ldi	r22, 0xFF	; 255
    1046:	7f ef       	ldi	r23, 0xFF	; 255
    1048:	4d 83       	std	Y+5, r20	; 0x05
    104a:	5e 83       	std	Y+6, r21	; 0x06
    104c:	6f 83       	std	Y+7, r22	; 0x07
    104e:	78 87       	std	Y+8, r23	; 0x08
    1050:	9c 01       	movw	r18, r24
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	89 e6       	ldi	r24, 0x69	; 105
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	a9 01       	movw	r20, r18
    1068:	68 e0       	ldi	r22, 0x08	; 8
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	89 e6       	ldi	r24, 0x69	; 105
    106e:	95 e0       	ldi	r25, 0x05	; 5
    1070:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	a9 01       	movw	r20, r18
    107a:	64 e6       	ldi	r22, 0x64	; 100
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	89 e6       	ldi	r24, 0x69	; 105
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	6c e0       	ldi	r22, 0x0C	; 12
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	89 e6       	ldi	r24, 0x69	; 105
    1092:	95 e0       	ldi	r25, 0x05	; 5
    1094:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    1098:	28 96       	adiw	r28, 0x08	; 8
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_Z8shutdownv>:
    10aa:	68 eb       	ldi	r22, 0xB8	; 184
    10ac:	7b e0       	ldi	r23, 0x0B	; 11
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <_moduleHasShutdown>
    10c4:	08 95       	ret

000010c6 <setup>:
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <setup+0x6>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	84 b7       	in	r24, 0x34	; 52
    10d2:	89 e0       	ldi	r24, 0x09	; 9
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	14 be       	out	0x34, r1	; 52
    10dc:	26 e0       	ldi	r18, 0x06	; 6
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	52 ec       	ldi	r21, 0xC2	; 194
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	89 e2       	ldi	r24, 0x29	; 41
    10e8:	96 e0       	ldi	r25, 0x06	; 6
    10ea:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_ZN14HardwareSerial5beginEmh>
    10ee:	6c e3       	ldi	r22, 0x3C	; 60
    10f0:	73 e0       	ldi	r23, 0x03	; 3
    10f2:	89 e2       	ldi	r24, 0x29	; 41
    10f4:	96 e0       	ldi	r25, 0x06	; 6
    10f6:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	89 e0       	ldi	r24, 0x09	; 9
    1106:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	88 e0       	ldi	r24, 0x08	; 8
    110e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	8b e0       	ldi	r24, 0x0B	; 11
    1116:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	8a e0       	ldi	r24, 0x0A	; 10
    111e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <_isAtCycleStart>
    1128:	88 e4       	ldi	r24, 0x48	; 72
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN10GsmManager5beginEv>
    1130:	81 11       	cpse	r24, r1
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <setup+0x72>
    1134:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z8shutdownv>
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <_Z10toggleGPRSb>:
    1142:	68 2f       	mov	r22, r24
    1144:	88 e4       	ldi	r24, 0x48	; 72
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN10GsmManager10enableGPRSEb>
    114c:	08 95       	ret

0000114e <_Z10sendViaSmsPc>:
    114e:	bc 01       	movw	r22, r24
    1150:	88 e4       	ldi	r24, 0x48	; 72
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	0e 94 04 04 	call	0x808	; 0x808 <_ZN10GsmManager10sendViaSmsEPc>
    1158:	08 95       	ret

0000115a <_Z11sendViaGprsPc>:
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <_Z11sendViaGprsPc+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	bc 01       	movw	r22, r24
    1166:	88 e4       	ldi	r24, 0x48	; 72
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN10GsmManager11sendViaGprsEPc>
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <_Z15resetSensorDatav>:
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	28 97       	sbiw	r28, 0x08	; 8
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <noBattReadings>
    119c:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <noPVReadings>
    11a0:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <nocurrReadings>
    11a4:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <noTempReadings>
    11a8:	ce 01       	movw	r24, r28
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <currSensorData+0x1>
    11b0:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <currSensorData>
    11b4:	28 96       	adiw	r28, 0x08	; 8
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <_Z17resetAtCycleStartv>:
    11c6:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z15resetSensorDatav>
    11ca:	08 95       	ret

000011cc <_Z17persistSensorDatav>:
    11cc:	60 91 15 04 	lds	r22, 0x0415	; 0x800415 <currSensorData>
    11d0:	70 91 16 04 	lds	r23, 0x0416	; 0x800416 <currSensorData+0x1>
    11d4:	89 e6       	ldi	r24, 0x69	; 105
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
    11dc:	08 95       	ret

000011de <_Z7readVccv>:
    11de:	8e e4       	ldi	r24, 0x4E	; 78
    11e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    11f0:	ea e7       	ldi	r30, 0x7A	; 122
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 64       	ori	r24, 0x40	; 64
    11f8:	80 83       	st	Z, r24
    11fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    11fe:	86 fd       	sbrc	r24, 6
    1200:	fc cf       	rjmp	.-8      	; 0x11fa <_Z7readVccv+0x1c>
    1202:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1206:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	32 2f       	mov	r19, r18
    120e:	22 27       	eor	r18, r18
    1210:	a9 01       	movw	r20, r18
    1212:	33 0f       	add	r19, r19
    1214:	66 0b       	sbc	r22, r22
    1216:	77 0b       	sbc	r23, r23
    1218:	9a 01       	movw	r18, r20
    121a:	ab 01       	movw	r20, r22
    121c:	28 2b       	or	r18, r24
    121e:	64 eb       	ldi	r22, 0xB4	; 180
    1220:	7b e2       	ldi	r23, 0x2B	; 43
    1222:	81 e1       	ldi	r24, 0x11	; 17
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 1f 32 	call	0x643e	; 0x643e <__divmodsi4>
    122a:	ca 01       	movw	r24, r20
    122c:	b9 01       	movw	r22, r18
    122e:	28 ee       	ldi	r18, 0xE8	; 232
    1230:	33 e0       	ldi	r19, 0x03	; 3
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	0e 94 1f 32 	call	0x643e	; 0x643e <__divmodsi4>
    123a:	ca 01       	movw	r24, r20
    123c:	b9 01       	movw	r22, r18
    123e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    1242:	08 95       	ret

00001244 <_Z16takeSampleAnalogi>:
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	0e 94 0e 24 	call	0x481c	; 0x481c <analogRead>
    1254:	ec 01       	movw	r28, r24
    1256:	0e 94 ef 08 	call	0x11de	; 0x11de <_Z7readVccv>
    125a:	6b 01       	movw	r12, r22
    125c:	7c 01       	movw	r14, r24
    125e:	be 01       	movw	r22, r28
    1260:	dd 0f       	add	r29, r29
    1262:	88 0b       	sbc	r24, r24
    1264:	99 0b       	sbc	r25, r25
    1266:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    126a:	a7 01       	movw	r20, r14
    126c:	96 01       	movw	r18, r12
    126e:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    1272:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__fixsfsi>
    1276:	07 2e       	mov	r0, r23
    1278:	00 0c       	add	r0, r0
    127a:	88 0b       	sbc	r24, r24
    127c:	99 0b       	sbc	r25, r25
    127e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	08 95       	ret

00001290 <_Z16readSensorsAsyncv>:
    1290:	4f 92       	push	r4
    1292:	5f 92       	push	r5
    1294:	6f 92       	push	r6
    1296:	7f 92       	push	r7
    1298:	8f 92       	push	r8
    129a:	9f 92       	push	r9
    129c:	af 92       	push	r10
    129e:	bf 92       	push	r11
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	2c 97       	sbiw	r28, 0x0c	; 12
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	66 e9       	ldi	r22, 0x96	; 150
    12c0:	72 e0       	ldi	r23, 0x02	; 2
    12c2:	89 e2       	ldi	r24, 0x29	; 41
    12c4:	96 e0       	ldi	r25, 0x06	; 6
    12c6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    12ca:	8e e0       	ldi	r24, 0x0E	; 14
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 22 09 	call	0x1244	; 0x1244 <_Z16takeSampleAnalogi>
    12d2:	6b 01       	movw	r12, r22
    12d4:	7c 01       	movw	r14, r24
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5a e3       	ldi	r21, 0x3A	; 58
    12de:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    12e2:	23 e5       	ldi	r18, 0x53	; 83
    12e4:	3b e4       	ldi	r19, 0x4B	; 75
    12e6:	4b e7       	ldi	r20, 0x7B	; 123
    12e8:	51 e4       	ldi	r21, 0x41	; 65
    12ea:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    12ee:	6d 83       	std	Y+5, r22	; 0x05
    12f0:	7e 83       	std	Y+6, r23	; 0x06
    12f2:	8f 83       	std	Y+7, r24	; 0x07
    12f4:	98 87       	std	Y+8, r25	; 0x08
    12f6:	8f e0       	ldi	r24, 0x0F	; 15
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 22 09 	call	0x1244	; 0x1244 <_Z16takeSampleAnalogi>
    12fe:	4b 01       	movw	r8, r22
    1300:	5c 01       	movw	r10, r24
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e8       	ldi	r20, 0x80	; 128
    1308:	5a e3       	ldi	r21, 0x3A	; 58
    130a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 ec       	ldi	r20, 0xC0	; 192
    1314:	50 e4       	ldi	r21, 0x40	; 64
    1316:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    131a:	69 87       	std	Y+9, r22	; 0x09
    131c:	7a 87       	std	Y+10, r23	; 0x0a
    131e:	8b 87       	std	Y+11, r24	; 0x0b
    1320:	9c 87       	std	Y+12, r25	; 0x0c
    1322:	81 e1       	ldi	r24, 0x11	; 17
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 22 09 	call	0x1244	; 0x1244 <_Z16takeSampleAnalogi>
    132a:	69 83       	std	Y+1, r22	; 0x01
    132c:	7a 83       	std	Y+2, r23	; 0x02
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	80 e1       	ldi	r24, 0x10	; 16
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 22 09 	call	0x1244	; 0x1244 <_Z16takeSampleAnalogi>
    133a:	2b 01       	movw	r4, r22
    133c:	3c 01       	movw	r6, r24
    133e:	60 e8       	ldi	r22, 0x80	; 128
    1340:	72 e0       	ldi	r23, 0x02	; 2
    1342:	89 e2       	ldi	r24, 0x29	; 41
    1344:	96 e0       	ldi	r25, 0x06	; 6
    1346:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    134a:	6e e7       	ldi	r22, 0x7E	; 126
    134c:	72 e0       	ldi	r23, 0x02	; 2
    134e:	89 e2       	ldi	r24, 0x29	; 41
    1350:	96 e0       	ldi	r25, 0x06	; 6
    1352:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    1356:	22 e0       	ldi	r18, 0x02	; 2
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	b5 01       	movw	r22, r10
    135c:	a4 01       	movw	r20, r8
    135e:	89 e2       	ldi	r24, 0x29	; 41
    1360:	96 e0       	ldi	r25, 0x06	; 6
    1362:	0e 94 0a 23 	call	0x4614	; 0x4614 <_ZN5Print7printlnEdi>
    1366:	6a e6       	ldi	r22, 0x6A	; 106
    1368:	72 e0       	ldi	r23, 0x02	; 2
    136a:	89 e2       	ldi	r24, 0x29	; 41
    136c:	96 e0       	ldi	r25, 0x06	; 6
    136e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    1372:	6e e7       	ldi	r22, 0x7E	; 126
    1374:	72 e0       	ldi	r23, 0x02	; 2
    1376:	89 e2       	ldi	r24, 0x29	; 41
    1378:	96 e0       	ldi	r25, 0x06	; 6
    137a:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    137e:	22 e0       	ldi	r18, 0x02	; 2
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	49 85       	ldd	r20, Y+9	; 0x09
    1384:	5a 85       	ldd	r21, Y+10	; 0x0a
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	89 e2       	ldi	r24, 0x29	; 41
    138c:	96 e0       	ldi	r25, 0x06	; 6
    138e:	0e 94 0a 23 	call	0x4614	; 0x4614 <_ZN5Print7printlnEdi>
    1392:	69 e5       	ldi	r22, 0x59	; 89
    1394:	72 e0       	ldi	r23, 0x02	; 2
    1396:	89 e2       	ldi	r24, 0x29	; 41
    1398:	96 e0       	ldi	r25, 0x06	; 6
    139a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    139e:	6e e7       	ldi	r22, 0x7E	; 126
    13a0:	72 e0       	ldi	r23, 0x02	; 2
    13a2:	89 e2       	ldi	r24, 0x29	; 41
    13a4:	96 e0       	ldi	r25, 0x06	; 6
    13a6:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    13aa:	22 e0       	ldi	r18, 0x02	; 2
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	b7 01       	movw	r22, r14
    13b0:	a6 01       	movw	r20, r12
    13b2:	89 e2       	ldi	r24, 0x29	; 41
    13b4:	96 e0       	ldi	r25, 0x06	; 6
    13b6:	0e 94 0a 23 	call	0x4614	; 0x4614 <_ZN5Print7printlnEdi>
    13ba:	68 e4       	ldi	r22, 0x48	; 72
    13bc:	72 e0       	ldi	r23, 0x02	; 2
    13be:	89 e2       	ldi	r24, 0x29	; 41
    13c0:	96 e0       	ldi	r25, 0x06	; 6
    13c2:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    13c6:	6e e7       	ldi	r22, 0x7E	; 126
    13c8:	72 e0       	ldi	r23, 0x02	; 2
    13ca:	89 e2       	ldi	r24, 0x29	; 41
    13cc:	96 e0       	ldi	r25, 0x06	; 6
    13ce:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    13d2:	22 e0       	ldi	r18, 0x02	; 2
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4d 81       	ldd	r20, Y+5	; 0x05
    13d8:	5e 81       	ldd	r21, Y+6	; 0x06
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 e2       	ldi	r24, 0x29	; 41
    13e0:	96 e0       	ldi	r25, 0x06	; 6
    13e2:	0e 94 0a 23 	call	0x4614	; 0x4614 <_ZN5Print7printlnEdi>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	c5 01       	movw	r24, r10
    13ee:	b4 01       	movw	r22, r8
    13f0:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__gesf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	7c f5       	brge	.+94     	; 0x1456 <_Z16readSensorsAsyncv+0x1c6>
    13f8:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <currSensorData>
    13fc:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <currSensorData+0x1>
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	10 91 1a 04 	lds	r17, 0x041A	; 0x80041a <noBattReadings>
    140e:	18 9f       	mul	r17, r24
    1410:	b0 01       	movw	r22, r0
    1412:	19 9f       	mul	r17, r25
    1414:	70 0d       	add	r23, r0
    1416:	11 24       	eor	r1, r1
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	1f 5f       	subi	r17, 0xFF	; 255
    141e:	10 93 1a 04 	sts	0x041A, r17	; 0x80041a <noBattReadings>
    1422:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    1426:	a5 01       	movw	r20, r10
    1428:	94 01       	movw	r18, r8
    142a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__addsf3>
    142e:	4b 01       	movw	r8, r22
    1430:	5c 01       	movw	r10, r24
    1432:	61 2f       	mov	r22, r17
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	c5 01       	movw	r24, r10
    1444:	b4 01       	movw	r22, r8
    1446:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__divsf3>
    144a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__fixunssfsi>
    144e:	ed 81       	ldd	r30, Y+5	; 0x05
    1450:	fe 81       	ldd	r31, Y+6	; 0x06
    1452:	71 83       	std	Z+1, r23	; 0x01
    1454:	60 83       	st	Z, r22
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	a9 01       	movw	r20, r18
    145c:	c7 01       	movw	r24, r14
    145e:	b6 01       	movw	r22, r12
    1460:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__gesf2>
    1464:	18 16       	cp	r1, r24
    1466:	7c f5       	brge	.+94     	; 0x14c6 <_Z16readSensorsAsyncv+0x236>
    1468:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <currSensorData>
    146c:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <currSensorData+0x1>
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	fc 01       	movw	r30, r24
    1476:	84 81       	ldd	r24, Z+4	; 0x04
    1478:	95 81       	ldd	r25, Z+5	; 0x05
    147a:	b0 90 19 04 	lds	r11, 0x0419	; 0x800419 <noPVReadings>
    147e:	b8 9e       	mul	r11, r24
    1480:	b0 01       	movw	r22, r0
    1482:	b9 9e       	mul	r11, r25
    1484:	70 0d       	add	r23, r0
    1486:	11 24       	eor	r1, r1
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	b3 94       	inc	r11
    148e:	b0 92 19 04 	sts	0x0419, r11	; 0x800419 <noPVReadings>
    1492:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    1496:	a7 01       	movw	r20, r14
    1498:	96 01       	movw	r18, r12
    149a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__addsf3>
    149e:	6b 01       	movw	r12, r22
    14a0:	7c 01       	movw	r14, r24
    14a2:	6b 2d       	mov	r22, r11
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	c7 01       	movw	r24, r14
    14b4:	b6 01       	movw	r22, r12
    14b6:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__divsf3>
    14ba:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__fixunssfsi>
    14be:	ed 81       	ldd	r30, Y+5	; 0x05
    14c0:	fe 81       	ldd	r31, Y+6	; 0x06
    14c2:	75 83       	std	Z+5, r23	; 0x05
    14c4:	64 83       	std	Z+4, r22	; 0x04
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	69 81       	ldd	r22, Y+1	; 0x01
    14ce:	7a 81       	ldd	r23, Y+2	; 0x02
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__gesf2>
    14d8:	18 16       	cp	r1, r24
    14da:	8c f5       	brge	.+98     	; 0x153e <_Z16readSensorsAsyncv+0x2ae>
    14dc:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <currSensorData>
    14e0:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <currSensorData+0x1>
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	fc 01       	movw	r30, r24
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	f0 90 18 04 	lds	r15, 0x0418	; 0x800418 <nocurrReadings>
    14f2:	f8 9e       	mul	r15, r24
    14f4:	b0 01       	movw	r22, r0
    14f6:	f9 9e       	mul	r15, r25
    14f8:	70 0d       	add	r23, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	f3 94       	inc	r15
    1502:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <nocurrReadings>
    1506:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    150a:	29 81       	ldd	r18, Y+1	; 0x01
    150c:	3a 81       	ldd	r19, Y+2	; 0x02
    150e:	4b 81       	ldd	r20, Y+3	; 0x03
    1510:	5c 81       	ldd	r21, Y+4	; 0x04
    1512:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__addsf3>
    1516:	4b 01       	movw	r8, r22
    1518:	5c 01       	movw	r10, r24
    151a:	6f 2d       	mov	r22, r15
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	c5 01       	movw	r24, r10
    152c:	b4 01       	movw	r22, r8
    152e:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__divsf3>
    1532:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__fixunssfsi>
    1536:	ed 81       	ldd	r30, Y+5	; 0x05
    1538:	fe 81       	ldd	r31, Y+6	; 0x06
    153a:	73 83       	std	Z+3, r23	; 0x03
    153c:	62 83       	std	Z+2, r22	; 0x02
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	c3 01       	movw	r24, r6
    1546:	b2 01       	movw	r22, r4
    1548:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__gesf2>
    154c:	18 16       	cp	r1, r24
    154e:	7c f5       	brge	.+94     	; 0x15ae <_Z16readSensorsAsyncv+0x31e>
    1550:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <currSensorData>
    1554:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <currSensorData+0x1>
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	fc 01       	movw	r30, r24
    155e:	86 81       	ldd	r24, Z+6	; 0x06
    1560:	97 81       	ldd	r25, Z+7	; 0x07
    1562:	f0 90 17 04 	lds	r15, 0x0417	; 0x800417 <noTempReadings>
    1566:	f8 9e       	mul	r15, r24
    1568:	b0 01       	movw	r22, r0
    156a:	f9 9e       	mul	r15, r25
    156c:	70 0d       	add	r23, r0
    156e:	11 24       	eor	r1, r1
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	f3 94       	inc	r15
    1576:	f0 92 17 04 	sts	0x0417, r15	; 0x800417 <noTempReadings>
    157a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    157e:	a3 01       	movw	r20, r6
    1580:	92 01       	movw	r18, r4
    1582:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__addsf3>
    1586:	4b 01       	movw	r8, r22
    1588:	5c 01       	movw	r10, r24
    158a:	6f 2d       	mov	r22, r15
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	c5 01       	movw	r24, r10
    159c:	b4 01       	movw	r22, r8
    159e:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__divsf3>
    15a2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__fixunssfsi>
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	77 83       	std	Z+7, r23	; 0x07
    15ac:	66 83       	std	Z+6, r22	; 0x06
    15ae:	2c 96       	adiw	r28, 0x0c	; 12
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	7f 90       	pop	r7
    15d2:	6f 90       	pop	r6
    15d4:	5f 90       	pop	r5
    15d6:	4f 90       	pop	r4
    15d8:	08 95       	ret

000015da <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>:
    15da:	4f 92       	push	r4
    15dc:	5f 92       	push	r5
    15de:	6f 92       	push	r6
    15e0:	7f 92       	push	r7
    15e2:	8f 92       	push	r8
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	2d 97       	sbiw	r28, 0x0d	; 13
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	2c 01       	movw	r4, r24
    160a:	3b 01       	movw	r6, r22
    160c:	ca 01       	movw	r24, r20
    160e:	b9 01       	movw	r22, r18
    1610:	ea 86       	std	Y+10, r14	; 0x0a
    1612:	fb 86       	std	Y+11, r15	; 0x0b
    1614:	0c 87       	std	Y+12, r16	; 0x0c
    1616:	1d 87       	std	Y+13, r17	; 0x0d
    1618:	ef 8c       	ldd	r14, Y+31	; 0x1f
    161a:	f8 a0       	ldd	r15, Y+32	; 0x20
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	c7 01       	movw	r24, r14
    1622:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	09 81       	ldd	r16, Y+1	; 0x01
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	f7 01       	movw	r30, r14
    162e:	e0 0f       	add	r30, r16
    1630:	f1 1f       	adc	r31, r17
    1632:	0f 5f       	subi	r16, 0xFF	; 255
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	0e 0d       	add	r16, r14
    1638:	1f 1d       	adc	r17, r15
    163a:	0f 2e       	mov	r0, r31
    163c:	fd e2       	ldi	r31, 0x2D	; 45
    163e:	df 2e       	mov	r13, r31
    1640:	f0 2d       	mov	r31, r0
    1642:	d0 82       	st	Z, r13
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	6a 85       	ldd	r22, Y+10	; 0x0a
    1648:	7b 85       	ldd	r23, Y+11	; 0x0b
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	f8 01       	movw	r30, r16
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	08 0f       	add	r16, r24
    1660:	19 1f       	adc	r17, r25
    1662:	d0 82       	st	Z, r13
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	6c 2d       	mov	r22, r12
    1668:	c8 01       	movw	r24, r16
    166a:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	f8 01       	movw	r30, r16
    1676:	e8 0f       	add	r30, r24
    1678:	f9 1f       	adc	r31, r25
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	08 0f       	add	r16, r24
    167e:	19 1f       	adc	r17, r25
    1680:	d0 82       	st	Z, r13
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	6a 2d       	mov	r22, r10
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	f8 01       	movw	r30, r16
    1694:	e8 0f       	add	r30, r24
    1696:	f9 1f       	adc	r31, r25
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	08 0f       	add	r16, r24
    169c:	19 1f       	adc	r17, r25
    169e:	d0 82       	st	Z, r13
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	b4 01       	movw	r22, r8
    16a4:	c8 01       	movw	r24, r16
    16a6:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	08 0f       	add	r16, r24
    16b0:	11 1d       	adc	r17, r1
    16b2:	61 14       	cp	r6, r1
    16b4:	71 04       	cpc	r7, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xe0>
    16b8:	51 c0       	rjmp	.+162    	; 0x175c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
    16ba:	8d e2       	ldi	r24, 0x2D	; 45
    16bc:	f8 01       	movw	r30, r16
    16be:	80 83       	st	Z, r24
    16c0:	0f 5f       	subi	r16, 0xFF	; 255
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	c1 2c       	mov	r12, r1
    16c6:	d1 2c       	mov	r13, r1
    16c8:	c6 14       	cp	r12, r6
    16ca:	d7 04       	cpc	r13, r7
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xf6>
    16ce:	46 c0       	rjmp	.+140    	; 0x175c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
    16d0:	f6 01       	movw	r30, r12
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	e4 0d       	add	r30, r4
    16e0:	f5 1d       	adc	r31, r5
    16e2:	88 e0       	ldi	r24, 0x08	; 8
    16e4:	de 01       	movw	r26, r28
    16e6:	12 96       	adiw	r26, 0x02	; 2
    16e8:	01 90       	ld	r0, Z+
    16ea:	0d 92       	st	X+, r0
    16ec:	8a 95       	dec	r24
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x10e>
    16f0:	6a 81       	ldd	r22, Y+2	; 0x02
    16f2:	7b 81       	ldd	r23, Y+3	; 0x03
    16f4:	44 e0       	ldi	r20, 0x04	; 4
    16f6:	c8 01       	movw	r24, r16
    16f8:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	08 0f       	add	r16, r24
    1702:	11 1d       	adc	r17, r1
    1704:	6c 81       	ldd	r22, Y+4	; 0x04
    1706:	7d 81       	ldd	r23, Y+5	; 0x05
    1708:	44 e0       	ldi	r20, 0x04	; 4
    170a:	c8 01       	movw	r24, r16
    170c:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	08 0f       	add	r16, r24
    1716:	11 1d       	adc	r17, r1
    1718:	6e 81       	ldd	r22, Y+6	; 0x06
    171a:	7f 81       	ldd	r23, Y+7	; 0x07
    171c:	44 e0       	ldi	r20, 0x04	; 4
    171e:	c8 01       	movw	r24, r16
    1720:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	08 0f       	add	r16, r24
    172a:	11 1d       	adc	r17, r1
    172c:	68 85       	ldd	r22, Y+8	; 0x08
    172e:	79 85       	ldd	r23, Y+9	; 0x09
    1730:	44 e0       	ldi	r20, 0x04	; 4
    1732:	c8 01       	movw	r24, r16
    1734:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	08 0f       	add	r16, r24
    173e:	11 1d       	adc	r17, r1
    1740:	c3 01       	movw	r24, r6
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	c8 16       	cp	r12, r24
    1746:	d9 06       	cpc	r13, r25
    1748:	28 f4       	brcc	.+10     	; 0x1754 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x17a>
    174a:	8c e2       	ldi	r24, 0x2C	; 44
    174c:	f8 01       	movw	r30, r16
    174e:	80 83       	st	Z, r24
    1750:	0f 5f       	subi	r16, 0xFF	; 255
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	ff ef       	ldi	r31, 0xFF	; 255
    1756:	cf 1a       	sub	r12, r31
    1758:	df 0a       	sbc	r13, r31
    175a:	b6 cf       	rjmp	.-148    	; 0x16c8 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xee>
    175c:	c8 01       	movw	r24, r16
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	f8 01       	movw	r30, r16
    1762:	10 82       	st	Z, r1
    1764:	8e 19       	sub	r24, r14
    1766:	9f 09       	sbc	r25, r15
    1768:	2d 96       	adiw	r28, 0x0d	; 13
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	5f 90       	pop	r5
    1790:	4f 90       	pop	r4
    1792:	08 95       	ret

00001794 <_Z20execTransmitReadingsR14DailyCycleData>:
    1794:	4f 92       	push	r4
    1796:	5f 92       	push	r5
    1798:	6f 92       	push	r6
    179a:	7f 92       	push	r7
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	ca 51       	subi	r28, 0x1A	; 26
    17ba:	d1 40       	sbci	r29, 0x01	; 1
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	3c 01       	movw	r6, r24
    17c8:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <_currCycleNumber>
    17cc:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <_currCycleNumber+0x1>
    17d0:	a0 91 1e 04 	lds	r26, 0x041E	; 0x80041e <_currCycleNumber+0x2>
    17d4:	b0 91 1f 04 	lds	r27, 0x041F	; 0x80041f <_currCycleNumber+0x3>
    17d8:	f3 01       	movw	r30, r6
    17da:	80 83       	st	Z, r24
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	a2 83       	std	Z+2, r26	; 0x02
    17e0:	b3 83       	std	Z+3, r27	; 0x03
    17e2:	19 8a       	std	Y+17, r1	; 0x11
    17e4:	1a 8a       	std	Y+18, r1	; 0x12
    17e6:	1b 8a       	std	Y+19, r1	; 0x13
    17e8:	1c 8a       	std	Y+20, r1	; 0x14
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	fe 01       	movw	r30, r28
    17f0:	31 96       	adiw	r30, 0x01	; 1
    17f2:	8f 3f       	cpi	r24, 0xFF	; 255
    17f4:	2f ef       	ldi	r18, 0xFF	; 255
    17f6:	92 07       	cpc	r25, r18
    17f8:	59 f0       	breq	.+22     	; 0x1810 <_Z20execTransmitReadingsR14DailyCycleData+0x7c>
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	10 82       	st	Z, r1
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	12 82       	std	Z+2, r1	; 0x02
    1802:	15 82       	std	Z+5, r1	; 0x05
    1804:	14 82       	std	Z+4, r1	; 0x04
    1806:	17 82       	std	Z+7, r1	; 0x07
    1808:	16 82       	std	Z+6, r1	; 0x06
    180a:	38 96       	adiw	r30, 0x08	; 8
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 cf       	rjmp	.-30     	; 0x17f2 <_Z20execTransmitReadingsR14DailyCycleData+0x5e>
    1810:	9e 01       	movw	r18, r28
    1812:	2f 5e       	subi	r18, 0xEF	; 239
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	42 e0       	ldi	r20, 0x02	; 2
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	be 01       	movw	r22, r28
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	89 e6       	ldi	r24, 0x69	; 105
    1822:	95 e0       	ldi	r25, 0x05	; 5
    1824:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    1828:	d6 2e       	mov	r13, r22
    182a:	b7 2e       	mov	r11, r23
    182c:	d3 01       	movw	r26, r6
    182e:	16 96       	adiw	r26, 0x06	; 6
    1830:	6c 93       	st	X, r22
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	89 e6       	ldi	r24, 0x69	; 105
    1838:	95 e0       	ldi	r25, 0x05	; 5
    183a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    183e:	c9 5e       	subi	r28, 0xE9	; 233
    1840:	de 4f       	sbci	r29, 0xFE	; 254
    1842:	68 83       	st	Y, r22
    1844:	79 83       	std	Y+1, r23	; 0x01
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	c7 51       	subi	r28, 0x17	; 23
    184c:	d1 40       	sbci	r29, 0x01	; 1
    184e:	88 e4       	ldi	r24, 0x48	; 72
    1850:	94 e0       	ldi	r25, 0x04	; 4
    1852:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN10GsmManager7getRSSIEv>
    1856:	f3 01       	movw	r30, r6
    1858:	86 87       	std	Z+14, r24	; 0x0e
    185a:	88 e4       	ldi	r24, 0x48	; 72
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	0e 94 40 04 	call	0x880	; 0x880 <_ZN10GsmManager16getNetworkStatusEv>
    1862:	d3 01       	movw	r26, r6
    1864:	1d 96       	adiw	r26, 0x0d	; 13
    1866:	8c 93       	st	X, r24
    1868:	1e 8a       	std	Y+22, r1	; 0x16
    186a:	1d 8a       	std	Y+21, r1	; 0x15
    186c:	be 01       	movw	r22, r28
    186e:	6b 5e       	subi	r22, 0xEB	; 235
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	88 e4       	ldi	r24, 0x48	; 72
    1874:	94 e0       	ldi	r25, 0x04	; 4
    1876:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN10GsmManager14getBattPercentEPj>
    187a:	81 11       	cpse	r24, r1
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <_Z20execTransmitReadingsR14DailyCycleData+0xf2>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	f3 01       	movw	r30, r6
    1882:	85 83       	std	Z+5, r24	; 0x05
    1884:	04 c0       	rjmp	.+8      	; 0x188e <_Z20execTransmitReadingsR14DailyCycleData+0xfa>
    1886:	8d 89       	ldd	r24, Y+21	; 0x15
    1888:	d3 01       	movw	r26, r6
    188a:	1c 96       	adiw	r26, 0x0c	; 12
    188c:	8c 93       	st	X, r24
    188e:	18 8e       	std	Y+24, r1	; 0x18
    1890:	1f 8a       	std	Y+23, r1	; 0x17
    1892:	fe 01       	movw	r30, r28
    1894:	79 96       	adiw	r30, 0x19	; 25
    1896:	8e ef       	ldi	r24, 0xFE	; 254
    1898:	df 01       	movw	r26, r30
    189a:	1d 92       	st	X+, r1
    189c:	8a 95       	dec	r24
    189e:	e9 f7       	brne	.-6      	; 0x189a <_Z20execTransmitReadingsR14DailyCycleData+0x106>
    18a0:	f3 01       	movw	r30, r6
    18a2:	e0 80       	ld	r14, Z
    18a4:	f1 80       	ldd	r15, Z+1	; 0x01
    18a6:	02 81       	ldd	r16, Z+2	; 0x02
    18a8:	13 81       	ldd	r17, Z+3	; 0x03
    18aa:	8d 88       	ldd	r8, Y+21	; 0x15
    18ac:	9e 88       	ldd	r9, Y+22	; 0x16
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	8f 93       	push	r24
    18b2:	1f 92       	push	r1
    18b4:	2e 01       	movw	r4, r28
    18b6:	f7 e1       	ldi	r31, 0x17	; 23
    18b8:	4f 0e       	add	r4, r31
    18ba:	51 1c       	adc	r5, r1
    18bc:	5f 92       	push	r5
    18be:	4f 92       	push	r4
    18c0:	d3 01       	movw	r26, r6
    18c2:	1e 96       	adiw	r26, 0x0e	; 14
    18c4:	ac 90       	ld	r10, X
    18c6:	1e 97       	sbiw	r26, 0x0e	; 14
    18c8:	1d 96       	adiw	r26, 0x0d	; 13
    18ca:	cc 90       	ld	r12, X
    18cc:	c9 5e       	subi	r28, 0xE9	; 233
    18ce:	de 4f       	sbci	r29, 0xFE	; 254
    18d0:	28 81       	ld	r18, Y
    18d2:	39 81       	ldd	r19, Y+1	; 0x01
    18d4:	4a 81       	ldd	r20, Y+2	; 0x02
    18d6:	5b 81       	ldd	r21, Y+3	; 0x03
    18d8:	c7 51       	subi	r28, 0x17	; 23
    18da:	d1 40       	sbci	r29, 0x01	; 1
    18dc:	6d 2d       	mov	r22, r13
    18de:	7b 2d       	mov	r23, r11
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	0e 94 ed 0a 	call	0x15da	; 0x15da <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>
    18e8:	f3 01       	movw	r30, r6
    18ea:	90 87       	std	Z+8, r25	; 0x08
    18ec:	87 83       	std	Z+7, r24	; 0x07
    18ee:	c2 01       	movw	r24, r4
    18f0:	0e 94 ad 08 	call	0x115a	; 0x115a <_Z11sendViaGprsPc>
    18f4:	d3 01       	movw	r26, r6
    18f6:	1a 96       	adiw	r26, 0x0a	; 10
    18f8:	9c 93       	st	X, r25
    18fa:	8e 93       	st	-X, r24
    18fc:	19 97       	sbiw	r26, 0x09	; 9
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	89 2b       	or	r24, r25
    1908:	09 f4       	brne	.+2      	; 0x190c <_Z20execTransmitReadingsR14DailyCycleData+0x178>
    190a:	49 c0       	rjmp	.+146    	; 0x199e <_Z20execTransmitReadingsR14DailyCycleData+0x20a>
    190c:	6e ec       	ldi	r22, 0xCE	; 206
    190e:	72 e0       	ldi	r23, 0x02	; 2
    1910:	89 e2       	ldi	r24, 0x29	; 41
    1912:	96 e0       	ldi	r25, 0x06	; 6
    1914:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    1918:	6e e7       	ldi	r22, 0x7E	; 126
    191a:	72 e0       	ldi	r23, 0x02	; 2
    191c:	89 e2       	ldi	r24, 0x29	; 41
    191e:	96 e0       	ldi	r25, 0x06	; 6
    1920:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    1924:	f3 01       	movw	r30, r6
    1926:	61 85       	ldd	r22, Z+9	; 0x09
    1928:	72 85       	ldd	r23, Z+10	; 0x0a
    192a:	4a e0       	ldi	r20, 0x0A	; 10
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	89 e2       	ldi	r24, 0x29	; 41
    1930:	96 e0       	ldi	r25, 0x06	; 6
    1932:	0e 94 96 21 	call	0x432c	; 0x432c <_ZN5Print7printlnEji>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	d2 01       	movw	r26, r4
    193c:	fc 01       	movw	r30, r24
    193e:	1d 92       	st	X+, r1
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	e9 f7       	brne	.-6      	; 0x193e <_Z20execTransmitReadingsR14DailyCycleData+0x1aa>
    1944:	69 eb       	ldi	r22, 0xB9	; 185
    1946:	72 e0       	ldi	r23, 0x02	; 2
    1948:	89 e2       	ldi	r24, 0x29	; 41
    194a:	96 e0       	ldi	r25, 0x06	; 6
    194c:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    1950:	6e e7       	ldi	r22, 0x7E	; 126
    1952:	72 e0       	ldi	r23, 0x02	; 2
    1954:	89 e2       	ldi	r24, 0x29	; 41
    1956:	96 e0       	ldi	r25, 0x06	; 6
    1958:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    195c:	b2 01       	movw	r22, r4
    195e:	89 e2       	ldi	r24, 0x29	; 41
    1960:	96 e0       	ldi	r25, 0x06	; 6
    1962:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    1966:	c2 01       	movw	r24, r4
    1968:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z10sendViaSmsPc>
    196c:	d3 01       	movw	r26, r6
    196e:	1b 96       	adiw	r26, 0x0b	; 11
    1970:	8c 93       	st	X, r24
    1972:	88 23       	and	r24, r24
    1974:	a1 f0       	breq	.+40     	; 0x199e <_Z20execTransmitReadingsR14DailyCycleData+0x20a>
    1976:	66 ea       	ldi	r22, 0xA6	; 166
    1978:	72 e0       	ldi	r23, 0x02	; 2
    197a:	89 e2       	ldi	r24, 0x29	; 41
    197c:	96 e0       	ldi	r25, 0x06	; 6
    197e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    1982:	6e e7       	ldi	r22, 0x7E	; 126
    1984:	72 e0       	ldi	r23, 0x02	; 2
    1986:	89 e2       	ldi	r24, 0x29	; 41
    1988:	96 e0       	ldi	r25, 0x06	; 6
    198a:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    198e:	f3 01       	movw	r30, r6
    1990:	63 85       	ldd	r22, Z+11	; 0x0b
    1992:	4a e0       	ldi	r20, 0x0A	; 10
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	89 e2       	ldi	r24, 0x29	; 41
    1998:	96 e0       	ldi	r25, 0x06	; 6
    199a:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN5Print7printlnEhi>
    199e:	d3 01       	movw	r26, r6
    19a0:	16 96       	adiw	r26, 0x06	; 6
    19a2:	8c 91       	ld	r24, X
    19a4:	16 97       	sbiw	r26, 0x06	; 6
    19a6:	88 23       	and	r24, r24
    19a8:	91 f0       	breq	.+36     	; 0x19ce <_Z20execTransmitReadingsR14DailyCycleData+0x23a>
    19aa:	19 96       	adiw	r26, 0x09	; 9
    19ac:	8d 91       	ld	r24, X+
    19ae:	9c 91       	ld	r25, X
    19b0:	1a 97       	sbiw	r26, 0x0a	; 10
    19b2:	89 2b       	or	r24, r25
    19b4:	21 f0       	breq	.+8      	; 0x19be <_Z20execTransmitReadingsR14DailyCycleData+0x22a>
    19b6:	1b 96       	adiw	r26, 0x0b	; 11
    19b8:	8c 91       	ld	r24, X
    19ba:	81 11       	cpse	r24, r1
    19bc:	08 c0       	rjmp	.+16     	; 0x19ce <_Z20execTransmitReadingsR14DailyCycleData+0x23a>
    19be:	49 89       	ldd	r20, Y+17	; 0x11
    19c0:	5a 89       	ldd	r21, Y+18	; 0x12
    19c2:	6b 89       	ldd	r22, Y+19	; 0x13
    19c4:	7c 89       	ldd	r23, Y+20	; 0x14
    19c6:	89 e6       	ldi	r24, 0x69	; 105
    19c8:	95 e0       	ldi	r25, 0x05	; 5
    19ca:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN12RmMemManager12markDataSentEm>
    19ce:	c6 5e       	subi	r28, 0xE6	; 230
    19d0:	de 4f       	sbci	r29, 0xFE	; 254
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	df 90       	pop	r13
    19ea:	cf 90       	pop	r12
    19ec:	bf 90       	pop	r11
    19ee:	af 90       	pop	r10
    19f0:	9f 90       	pop	r9
    19f2:	8f 90       	pop	r8
    19f4:	7f 90       	pop	r7
    19f6:	6f 90       	pop	r6
    19f8:	5f 90       	pop	r5
    19fa:	4f 90       	pop	r4
    19fc:	08 95       	ret

000019fe <_Z18ensureBatteryLevelv>:
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <_Z18ensureBatteryLevelv+0x8>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	be 01       	movw	r22, r28
    1a0c:	6f 5f       	subi	r22, 0xFF	; 255
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	88 e4       	ldi	r24, 0x48	; 72
    1a12:	94 e0       	ldi	r25, 0x04	; 4
    1a14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN10GsmManager14getBattPercentEPj>
    1a18:	18 2f       	mov	r17, r24
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <_Z18ensureBatteryLevelv+0x2e>
    1a1e:	64 e3       	ldi	r22, 0x34	; 52
    1a20:	72 e0       	ldi	r23, 0x02	; 2
    1a22:	89 e2       	ldi	r24, 0x29	; 41
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a2a:	1b c0       	rjmp	.+54     	; 0x1a62 <_Z18ensureBatteryLevelv+0x64>
    1a2c:	6d e1       	ldi	r22, 0x1D	; 29
    1a2e:	72 e0       	ldi	r23, 0x02	; 2
    1a30:	89 e2       	ldi	r24, 0x29	; 41
    1a32:	96 e0       	ldi	r25, 0x06	; 6
    1a34:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    1a38:	6e e7       	ldi	r22, 0x7E	; 126
    1a3a:	72 e0       	ldi	r23, 0x02	; 2
    1a3c:	89 e2       	ldi	r24, 0x29	; 41
    1a3e:	96 e0       	ldi	r25, 0x06	; 6
    1a40:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    1a44:	69 81       	ldd	r22, Y+1	; 0x01
    1a46:	7a 81       	ldd	r23, Y+2	; 0x02
    1a48:	4a e0       	ldi	r20, 0x0A	; 10
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	89 e2       	ldi	r24, 0x29	; 41
    1a4e:	96 e0       	ldi	r25, 0x06	; 6
    1a50:	0e 94 96 21 	call	0x432c	; 0x432c <_ZN5Print7printlnEji>
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	11 e0       	ldi	r17, 0x01	; 1
    1a5a:	81 35       	cpi	r24, 0x51	; 81
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <_Z18ensureBatteryLevelv+0x64>
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	81 2f       	mov	r24, r17
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	08 95       	ret

00001a70 <_Z9loopCyclev>:
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	61 97       	sbiw	r28, 0x11	; 17
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <timer+0xe>
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	0a c0       	rjmp	.+20     	; 0x1aa2 <_Z9loopCyclev+0x32>
    1a8e:	6f e1       	ldi	r22, 0x1F	; 31
    1a90:	73 e0       	ldi	r23, 0x03	; 3
    1a92:	89 e2       	ldi	r24, 0x29	; 41
    1a94:	96 e0       	ldi	r25, 0x06	; 6
    1a96:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a9a:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z16readSensorsAsyncv>
    1a9e:	11 e0       	ldi	r17, 0x01	; 1
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <_Z9loopCyclev+0x34>
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer+0x4>
    1aa8:	88 23       	and	r24, r24
    1aaa:	41 f0       	breq	.+16     	; 0x1abc <_Z9loopCyclev+0x4c>
    1aac:	65 e0       	ldi	r22, 0x05	; 5
    1aae:	73 e0       	ldi	r23, 0x03	; 3
    1ab0:	89 e2       	ldi	r24, 0x29	; 41
    1ab2:	96 e0       	ldi	r25, 0x06	; 6
    1ab4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ab8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_Z17persistSensorDatav>
    1abc:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_isDailyCycle>
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <_Z9loopCyclev+0x56>
    1ac4:	46 c0       	rjmp	.+140    	; 0x1b52 <_Z9loopCyclev+0xe2>
    1ac6:	63 ef       	ldi	r22, 0xF3	; 243
    1ac8:	72 e0       	ldi	r23, 0x02	; 2
    1aca:	89 e2       	ldi	r24, 0x29	; 41
    1acc:	96 e0       	ldi	r25, 0x06	; 6
    1ace:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ad2:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_isAtCycleStart>
    1ad6:	88 23       	and	r24, r24
    1ad8:	d1 f0       	breq	.+52     	; 0x1b0e <_Z9loopCyclev+0x9e>
    1ada:	fe 01       	movw	r30, r28
    1adc:	31 96       	adiw	r30, 0x01	; 1
    1ade:	81 e1       	ldi	r24, 0x11	; 17
    1ae0:	df 01       	movw	r26, r30
    1ae2:	1d 92       	st	X+, r1
    1ae4:	8a 95       	dec	r24
    1ae6:	e9 f7       	brne	.-6      	; 0x1ae2 <_Z9loopCyclev+0x72>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e4       	ldi	r25, 0x40	; 64
    1aec:	99 8b       	std	Y+17, r25	; 0x11
    1aee:	88 8b       	std	Y+16, r24	; 0x10
    1af0:	81 e1       	ldi	r24, 0x11	; 17
    1af2:	a8 e0       	ldi	r26, 0x08	; 8
    1af4:	b1 e0       	ldi	r27, 0x01	; 1
    1af6:	01 90       	ld	r0, Z+
    1af8:	0d 92       	st	X+, r0
    1afa:	8a 95       	dec	r24
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <_Z9loopCyclev+0x86>
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	0e 94 a1 08 	call	0x1142	; 0x1142 <_Z10toggleGPRSb>
    1b04:	81 11       	cpse	r24, r1
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <_Z9loopCyclev+0x9e>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_dailyCycleData+0x4>
    1b0e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <timer+0x5>
    1b12:	88 23       	and	r24, r24
    1b14:	21 f0       	breq	.+8      	; 0x1b1e <_Z9loopCyclev+0xae>
    1b16:	88 e0       	ldi	r24, 0x08	; 8
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z20execTransmitReadingsR14DailyCycleData>
    1b1e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <timer+0x6>
    1b22:	88 23       	and	r24, r24
    1b24:	89 f0       	breq	.+34     	; 0x1b48 <_Z9loopCyclev+0xd8>
    1b26:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_currSystemState>
    1b2a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <_currSystemState+0x1>
    1b2e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_dailyCycleData+0x10>
    1b32:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_dailyCycleData+0xf>
    1b36:	68 e0       	ldi	r22, 0x08	; 8
    1b38:	71 e0       	ldi	r23, 0x01	; 1
    1b3a:	89 e6       	ldi	r24, 0x69	; 105
    1b3c:	95 e0       	ldi	r25, 0x05	; 5
    1b3e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	0e 94 a1 08 	call	0x1142	; 0x1142 <_Z10toggleGPRSb>
    1b48:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <timer+0xb>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 27       	eor	r24, r25
    1b50:	18 2b       	or	r17, r24
    1b52:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_isAtCycleStart>
    1b56:	88 23       	and	r24, r24
    1b58:	d1 f0       	breq	.+52     	; 0x1b8e <_Z9loopCyclev+0x11e>
    1b5a:	68 ee       	ldi	r22, 0xE8	; 232
    1b5c:	72 e0       	ldi	r23, 0x02	; 2
    1b5e:	89 e2       	ldi	r24, 0x29	; 41
    1b60:	96 e0       	ldi	r25, 0x06	; 6
    1b62:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    1b66:	6e e7       	ldi	r22, 0x7E	; 126
    1b68:	72 e0       	ldi	r23, 0x02	; 2
    1b6a:	89 e2       	ldi	r24, 0x29	; 41
    1b6c:	96 e0       	ldi	r25, 0x06	; 6
    1b6e:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    1b72:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_Z15get_free_memoryv>
    1b76:	4a e0       	ldi	r20, 0x0A	; 10
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	89 e2       	ldi	r24, 0x29	; 41
    1b7e:	96 e0       	ldi	r25, 0x06	; 6
    1b80:	0e 94 09 22 	call	0x4412	; 0x4412 <_ZN5Print7printlnEii>
    1b84:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_Z18ensureBatteryLevelv>
    1b88:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_chargingInProgress>
    1b8c:	18 2b       	or	r17, r24
    1b8e:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_chargingInProgress>
    1b92:	88 23       	and	r24, r24
    1b94:	c1 f0       	breq	.+48     	; 0x1bc6 <_Z9loopCyclev+0x156>
    1b96:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <timer+0x9>
    1b9a:	88 23       	and	r24, r24
    1b9c:	99 f0       	breq	.+38     	; 0x1bc4 <_Z9loopCyclev+0x154>
    1b9e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_Z18ensureBatteryLevelv>
    1ba2:	88 23       	and	r24, r24
    1ba4:	31 f0       	breq	.+12     	; 0x1bb2 <_Z9loopCyclev+0x142>
    1ba6:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <timer+0xf>
    1baa:	88 23       	and	r24, r24
    1bac:	21 f0       	breq	.+8      	; 0x1bb6 <_Z9loopCyclev+0x146>
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <_Z9loopCyclev+0x148>
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <_Z9loopCyclev+0x148>
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	89 27       	eor	r24, r25
    1bbc:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_chargingInProgress>
    1bc0:	18 2b       	or	r17, r24
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <_Z9loopCyclev+0x156>
    1bc4:	11 e0       	ldi	r17, 0x01	; 1
    1bc6:	81 2f       	mov	r24, r17
    1bc8:	61 96       	adiw	r28, 0x11	; 17
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	08 95       	ret

00001bdc <_Z10assertTrueb>:
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <_Z10assertTrueb+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	81 11       	cpse	r24, r1
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <_Z10assertTrueb+0x1e>
    1bea:	8a e0       	ldi	r24, 0x0A	; 10
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__divmodhi4>
    1bf6:	7a 83       	std	Y+2, r23	; 0x02
    1bf8:	69 83       	std	Y+1, r22	; 0x01
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <_Z6assertmmPc>:

void assert(unsigned long expected, unsigned long actual, char* msg = NULL)
{
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <_Z6assertmmPc+0x6>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <_Z6assertmmPc+0x8>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned long stp=expected;
    1c10:	69 83       	std	Y+1, r22	; 0x01
    1c12:	7a 83       	std	Y+2, r23	; 0x02
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	9c 83       	std	Y+4, r25	; 0x04
	
	assertTrue(expected == actual);
    1c18:	e1 e0       	ldi	r30, 0x01	; 1
    1c1a:	62 17       	cp	r22, r18
    1c1c:	73 07       	cpc	r23, r19
    1c1e:	84 07       	cpc	r24, r20
    1c20:	95 07       	cpc	r25, r21
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <_Z6assertmmPc+0x22>
    1c24:	e0 e0       	ldi	r30, 0x00	; 0
    1c26:	8e 2f       	mov	r24, r30
    1c28:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <_Z26assertCharStringsIdenticalPKcS0_i>:

void assertCharStringsIdentical(const char* expected, const char* actualRaw, int len_TODO=-1)
{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <_Z26assertCharStringsIdenticalPKcS0_i+0x6>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	unsigned volatile int res = strcmp(expected, actualRaw)==0;
    1c44:	0e 94 b7 34 	call	0x696e	; 0x696e <strcmp>
    1c48:	21 e0       	ldi	r18, 0x01	; 1
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	89 2b       	or	r24, r25
    1c4e:	11 f0       	breq	.+4      	; 0x1c54 <_Z26assertCharStringsIdenticalPKcS0_i+0x1a>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	3a 83       	std	Y+2, r19	; 0x02
    1c56:	29 83       	std	Y+1, r18	; 0x01
	
	assertTrue(res);
    1c58:	29 81       	ldd	r18, Y+1	; 0x01
    1c5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	23 2b       	or	r18, r19
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <_Z26assertCharStringsIdenticalPKcS0_i+0x2a>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <_Z22assertStringsIdenticalRK6StringPKci>:

void assertStringsIdentical(const String& expected, const char* actualRaw, int len_TODO=-1)
{
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	28 97       	sbiw	r28, 0x08	; 8
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	7c 01       	movw	r14, r24
    1c90:	8b 01       	movw	r16, r22
	String actual(actualRaw);
    1c92:	ce 01       	movw	r24, r28
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN6StringC1EPKc>
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
    1c9a:	b8 01       	movw	r22, r16
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	0e 94 b7 34 	call	0x696e	; 0x696e <strcmp>
    1ca6:	21 e0       	ldi	r18, 0x01	; 1
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	89 2b       	or	r24, r25
    1cac:	11 f0       	breq	.+4      	; 0x1cb2 <_Z22assertStringsIdenticalRK6StringPKci+0x40>
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	38 87       	std	Y+8, r19	; 0x08
    1cb4:	2f 83       	std	Y+7, r18	; 0x07
	
	assertTrue(res);
    1cb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1cb8:	38 85       	ldd	r19, Y+8	; 0x08
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	23 2b       	or	r18, r19
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <_Z22assertStringsIdenticalRK6StringPKci+0x50>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
	assertTrue(res);
}

void assertStringsIdentical(const String& expected, const char* actualRaw, int len_TODO=-1)
{
	String actual(actualRaw);
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN6StringD1Ev>
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
	
	assertTrue(res);
}
    1cce:	28 96       	adiw	r28, 0x08	; 8
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	08 95       	ret

00001ce8 <_Z26assertRealStringsIdenticalRK6StringS1_>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
    1ce8:	fb 01       	movw	r30, r22
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01

void assertRealStringsIdentical(const String& expected, const String& actual)
{
	return assertStringsIdentical(expected, actual.c_str());
    1cee:	4f ef       	ldi	r20, 0xFF	; 255
    1cf0:	5f ef       	ldi	r21, 0xFF	; 255
    1cf2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_Z22assertStringsIdenticalRK6StringPKci>
    1cf6:	08 95       	ret

00001cf8 <_Z23assertReadingsIdentical10SensorDataS_>:
}

void assertReadingsIdentical(SensorData expected, SensorData r1)
{
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	60 97       	sbiw	r28, 0x10	; 16
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	29 83       	std	Y+1, r18	; 0x01
    1d1e:	3a 83       	std	Y+2, r19	; 0x02
    1d20:	4b 83       	std	Y+3, r20	; 0x03
    1d22:	5c 83       	std	Y+4, r21	; 0x04
    1d24:	6d 83       	std	Y+5, r22	; 0x05
    1d26:	7e 83       	std	Y+6, r23	; 0x06
    1d28:	8f 83       	std	Y+7, r24	; 0x07
    1d2a:	98 87       	std	Y+8, r25	; 0x08
    1d2c:	a9 86       	std	Y+9, r10	; 0x09
    1d2e:	ba 86       	std	Y+10, r11	; 0x0a
    1d30:	cb 86       	std	Y+11, r12	; 0x0b
    1d32:	dc 86       	std	Y+12, r13	; 0x0c
    1d34:	ed 86       	std	Y+13, r14	; 0x0d
    1d36:	fe 86       	std	Y+14, r15	; 0x0e
    1d38:	0f 87       	std	Y+15, r16	; 0x0f
    1d3a:	18 8b       	std	Y+16, r17	; 0x10
	assert(expected.BattVoltage, r1.BattVoltage, "batt");
    1d3c:	29 85       	ldd	r18, Y+9	; 0x09
    1d3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	69 81       	ldd	r22, Y+1	; 0x01
    1d46:	7a 81       	ldd	r23, Y+2	; 0x02
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	00 e8       	ldi	r16, 0x80	; 128
    1d4e:	12 e0       	ldi	r17, 0x02	; 2
    1d50:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(expected.Current, r1.Current, "current");
    1d54:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d56:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1d5e:	7c 81       	ldd	r23, Y+4	; 0x04
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	05 e8       	ldi	r16, 0x85	; 133
    1d66:	12 e0       	ldi	r17, 0x02	; 2
    1d68:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(expected.PVVoltage, r1.PVVoltage, "pv");
    1d6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	6d 81       	ldd	r22, Y+5	; 0x05
    1d76:	7e 81       	ldd	r23, Y+6	; 0x06
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0d e8       	ldi	r16, 0x8D	; 141
    1d7e:	12 e0       	ldi	r17, 0x02	; 2
    1d80:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(expected.Temperature, r1.Temperature, "temp");
    1d84:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d86:	38 89       	ldd	r19, Y+16	; 0x10
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	00 e9       	ldi	r16, 0x90	; 144
    1d96:	12 e0       	ldi	r17, 0x02	; 2
    1d98:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	//assert(expected.ErrorChar, r1.ErrorChar, "errorCode");
}
    1d9c:	60 96       	adiw	r28, 0x10	; 16
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	bf 90       	pop	r11
    1dba:	af 90       	pop	r10
    1dbc:	08 95       	ret

00001dbe <_Z17createMockReadingbc>:

int _mockNo = 0;
SensorData createMockReading(bool append = true, char errorChar = 0)
{
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	60 97       	sbiw	r28, 0x10	; 16
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
	++_mockNo;
    1dd2:	20 91 13 04 	lds	r18, 0x0413	; 0x800413 <_mockNo>
    1dd6:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <_mockNo+0x1>
    1dda:	2f 5f       	subi	r18, 0xFF	; 255
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <_mockNo+0x1>
    1de2:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <_mockNo>
	
	SensorData r2;
    1de6:	fe 01       	movw	r30, r28
    1de8:	39 96       	adiw	r30, 0x09	; 9
    1dea:	98 e0       	ldi	r25, 0x08	; 8
    1dec:	df 01       	movw	r26, r30
    1dee:	1d 92       	st	X+, r1
    1df0:	9a 95       	dec	r25
    1df2:	e9 f7       	brne	.-6      	; 0x1dee <_Z17createMockReadingbc+0x30>
	r2.BattVoltage=_mockNo*2;
    1df4:	a9 01       	movw	r20, r18
    1df6:	44 0f       	add	r20, r20
    1df8:	55 1f       	adc	r21, r21
    1dfa:	5a 87       	std	Y+10, r21	; 0x0a
    1dfc:	49 87       	std	Y+9, r20	; 0x09
	r2.Current=_mockNo*30;
    1dfe:	9e e1       	ldi	r25, 0x1E	; 30
    1e00:	92 9f       	mul	r25, r18
    1e02:	a0 01       	movw	r20, r0
    1e04:	93 9f       	mul	r25, r19
    1e06:	50 0d       	add	r21, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	5c 87       	std	Y+12, r21	; 0x0c
    1e0c:	4b 87       	std	Y+11, r20	; 0x0b
	r2.PVVoltage=_mockNo*29;
    1e0e:	9d e1       	ldi	r25, 0x1D	; 29
    1e10:	92 9f       	mul	r25, r18
    1e12:	a0 01       	movw	r20, r0
    1e14:	93 9f       	mul	r25, r19
    1e16:	50 0d       	add	r21, r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	5e 87       	std	Y+14, r21	; 0x0e
    1e1c:	4d 87       	std	Y+13, r20	; 0x0d
	r2.Temperature=_mockNo*37;
    1e1e:	95 e2       	ldi	r25, 0x25	; 37
    1e20:	92 9f       	mul	r25, r18
    1e22:	a0 01       	movw	r20, r0
    1e24:	93 9f       	mul	r25, r19
    1e26:	50 0d       	add	r21, r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	58 8b       	std	Y+16, r21	; 0x10
    1e2c:	4f 87       	std	Y+15, r20	; 0x0f
	//r2.ErrorChar=errorChar;
	if (append)
    1e2e:	88 23       	and	r24, r24
    1e30:	29 f0       	breq	.+10     	; 0x1e3c <_Z17createMockReadingbc+0x7e>
		mem.appendSensorEntry(&r2);
    1e32:	bf 01       	movw	r22, r30
    1e34:	89 e6       	ldi	r24, 0x69	; 105
    1e36:	95 e0       	ldi	r25, 0x05	; 5
    1e38:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	return r2;
    1e3c:	88 e0       	ldi	r24, 0x08	; 8
    1e3e:	fe 01       	movw	r30, r28
    1e40:	39 96       	adiw	r30, 0x09	; 9
    1e42:	de 01       	movw	r26, r28
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	01 90       	ld	r0, Z+
    1e48:	0d 92       	st	X+, r0
    1e4a:	8a 95       	dec	r24
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <_Z17createMockReadingbc+0x88>
    1e4e:	29 81       	ldd	r18, Y+1	; 0x01
    1e50:	3a 81       	ldd	r19, Y+2	; 0x02
    1e52:	4b 81       	ldd	r20, Y+3	; 0x03
    1e54:	5c 81       	ldd	r21, Y+4	; 0x04
    1e56:	6d 81       	ldd	r22, Y+5	; 0x05
    1e58:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5c:	98 85       	ldd	r25, Y+8	; 0x08
    1e5e:	60 96       	adiw	r28, 0x10	; 16
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	08 95       	ret

00001e70 <_Z11runLoadTestv>:

void runLoadTest()
{
    1e70:	7f 92       	push	r7
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	cc 57       	subi	r28, 0x7C	; 124
    1e90:	d1 09       	sbc	r29, r1
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
	//Load some fake readings
	SensorData 
		r0=createMockReading(),
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z17createMockReadingbc>
    1ea4:	29 83       	std	Y+1, r18	; 0x01
    1ea6:	3a 83       	std	Y+2, r19	; 0x02
    1ea8:	4b 83       	std	Y+3, r20	; 0x03
    1eaa:	5c 83       	std	Y+4, r21	; 0x04
    1eac:	6d 83       	std	Y+5, r22	; 0x05
    1eae:	7e 83       	std	Y+6, r23	; 0x06
    1eb0:	8f 83       	std	Y+7, r24	; 0x07
    1eb2:	98 87       	std	Y+8, r25	; 0x08
		r1=createMockReading(),
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z17createMockReadingbc>
    1ebc:	29 87       	std	Y+9, r18	; 0x09
    1ebe:	3a 87       	std	Y+10, r19	; 0x0a
    1ec0:	4b 87       	std	Y+11, r20	; 0x0b
    1ec2:	5c 87       	std	Y+12, r21	; 0x0c
    1ec4:	6d 87       	std	Y+13, r22	; 0x0d
    1ec6:	7e 87       	std	Y+14, r23	; 0x0e
    1ec8:	8f 87       	std	Y+15, r24	; 0x0f
    1eca:	98 8b       	std	Y+16, r25	; 0x10
		r2=createMockReading(),
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z17createMockReadingbc>
    1ed4:	29 8b       	std	Y+17, r18	; 0x11
    1ed6:	3a 8b       	std	Y+18, r19	; 0x12
    1ed8:	4b 8b       	std	Y+19, r20	; 0x13
    1eda:	5c 8b       	std	Y+20, r21	; 0x14
    1edc:	6d 8b       	std	Y+21, r22	; 0x15
    1ede:	7e 8b       	std	Y+22, r23	; 0x16
    1ee0:	8f 8b       	std	Y+23, r24	; 0x17
    1ee2:	98 8f       	std	Y+24, r25	; 0x18
		r3=createMockReading(),
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z17createMockReadingbc>
    1eec:	29 8f       	std	Y+25, r18	; 0x19
    1eee:	3a 8f       	std	Y+26, r19	; 0x1a
    1ef0:	4b 8f       	std	Y+27, r20	; 0x1b
    1ef2:	5c 8f       	std	Y+28, r21	; 0x1c
    1ef4:	6d 8f       	std	Y+29, r22	; 0x1d
    1ef6:	7e 8f       	std	Y+30, r23	; 0x1e
    1ef8:	8f 8f       	std	Y+31, r24	; 0x1f
    1efa:	98 a3       	std	Y+32, r25	; 0x20
		r4=createMockReading();
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z17createMockReadingbc>
    1f04:	29 a3       	std	Y+33, r18	; 0x21
    1f06:	3a a3       	std	Y+34, r19	; 0x22
    1f08:	4b a3       	std	Y+35, r20	; 0x23
    1f0a:	5c a3       	std	Y+36, r21	; 0x24
    1f0c:	6d a3       	std	Y+37, r22	; 0x25
    1f0e:	7e a3       	std	Y+38, r23	; 0x26
    1f10:	8f a3       	std	Y+39, r24	; 0x27
    1f12:	98 a7       	std	Y+40, r25	; 0x28
		
	SensorData buffer[10];
    1f14:	0f 2e       	mov	r0, r31
    1f16:	f0 e5       	ldi	r31, 0x50	; 80
    1f18:	7f 2e       	mov	r7, r31
    1f1a:	f0 2d       	mov	r31, r0
    1f1c:	4e 01       	movw	r8, r28
    1f1e:	89 e2       	ldi	r24, 0x29	; 41
    1f20:	88 0e       	add	r8, r24
    1f22:	91 1c       	adc	r9, r1
    1f24:	f4 01       	movw	r30, r8
    1f26:	87 2d       	mov	r24, r7
    1f28:	11 92       	st	Z+, r1
    1f2a:	8a 95       	dec	r24
    1f2c:	e9 f7       	brne	.-6      	; 0x1f28 <_Z11runLoadTestv+0xb8>
	unsigned long loadedTo;
	
	assert(5, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT));
    1f2e:	64 e6       	ldi	r22, 0x64	; 100
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	89 e6       	ldi	r24, 0x69	; 105
    1f34:	95 e0       	ldi	r25, 0x05	; 5
    1f36:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	00 e0       	ldi	r16, 0x00	; 0
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	65 e0       	ldi	r22, 0x05	; 5
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	//Requested for 3, sent-to=0 => return last 3
	loadedTo=0;
    1f4e:	ed 96       	adiw	r28, 0x3d	; 61
    1f50:	1c ae       	std	Y+60, r1	; 0x3c
    1f52:	1d ae       	std	Y+61, r1	; 0x3d
    1f54:	1e ae       	std	Y+62, r1	; 0x3e
    1f56:	1f ae       	std	Y+63, r1	; 0x3f
    1f58:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    1f5a:	f4 01       	movw	r30, r8
    1f5c:	87 2d       	mov	r24, r7
    1f5e:	11 92       	st	Z+, r1
    1f60:	8a 95       	dec	r24
    1f62:	e9 f7       	brne	.-6      	; 0x1f5e <_Z11runLoadTestv+0xee>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	a9 01       	movw	r20, r18
    1f6a:	6c e0       	ldi	r22, 0x0C	; 12
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	89 e6       	ldi	r24, 0x69	; 105
    1f70:	95 e0       	ldi	r25, 0x05	; 5
    1f72:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.loadSensorData(buffer, 3, &loadedTo);
    1f76:	9e 01       	movw	r18, r28
    1f78:	27 58       	subi	r18, 0x87	; 135
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	43 e0       	ldi	r20, 0x03	; 3
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	b4 01       	movw	r22, r8
    1f82:	89 e6       	ldi	r24, 0x69	; 105
    1f84:	95 e0       	ldi	r25, 0x05	; 5
    1f86:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
	assert(5, loadedTo);
    1f8a:	ed 96       	adiw	r28, 0x3d	; 61
    1f8c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f8e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f90:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f92:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f94:	ed 97       	sbiw	r28, 0x3d	; 61
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertReadingsIdentical(r2, buffer[0]);
    1fa2:	a9 a4       	ldd	r10, Y+41	; 0x29
    1fa4:	ba a4       	ldd	r11, Y+42	; 0x2a
    1fa6:	cb a4       	ldd	r12, Y+43	; 0x2b
    1fa8:	dc a4       	ldd	r13, Y+44	; 0x2c
    1faa:	ed a4       	ldd	r14, Y+45	; 0x2d
    1fac:	fe a4       	ldd	r15, Y+46	; 0x2e
    1fae:	0f a5       	ldd	r16, Y+47	; 0x2f
    1fb0:	18 a9       	ldd	r17, Y+48	; 0x30
    1fb2:	29 89       	ldd	r18, Y+17	; 0x11
    1fb4:	3a 89       	ldd	r19, Y+18	; 0x12
    1fb6:	4b 89       	ldd	r20, Y+19	; 0x13
    1fb8:	5c 89       	ldd	r21, Y+20	; 0x14
    1fba:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r3, buffer[1]);
    1fc6:	a9 a8       	ldd	r10, Y+49	; 0x31
    1fc8:	ba a8       	ldd	r11, Y+50	; 0x32
    1fca:	cb a8       	ldd	r12, Y+51	; 0x33
    1fcc:	dc a8       	ldd	r13, Y+52	; 0x34
    1fce:	ed a8       	ldd	r14, Y+53	; 0x35
    1fd0:	fe a8       	ldd	r15, Y+54	; 0x36
    1fd2:	0f a9       	ldd	r16, Y+55	; 0x37
    1fd4:	18 ad       	ldd	r17, Y+56	; 0x38
    1fd6:	29 8d       	ldd	r18, Y+25	; 0x19
    1fd8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1fda:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1fdc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1fde:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fe0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1fe2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe4:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[2]);
    1fea:	a9 ac       	ldd	r10, Y+57	; 0x39
    1fec:	ba ac       	ldd	r11, Y+58	; 0x3a
    1fee:	cb ac       	ldd	r12, Y+59	; 0x3b
    1ff0:	dc ac       	ldd	r13, Y+60	; 0x3c
    1ff2:	ed ac       	ldd	r14, Y+61	; 0x3d
    1ff4:	fe ac       	ldd	r15, Y+62	; 0x3e
    1ff6:	0f ad       	ldd	r16, Y+63	; 0x3f
    1ff8:	21 96       	adiw	r28, 0x01	; 1
    1ffa:	1f ad       	ldd	r17, Y+63	; 0x3f
    1ffc:	21 97       	sbiw	r28, 0x01	; 1
    1ffe:	29 a1       	ldd	r18, Y+33	; 0x21
    2000:	3a a1       	ldd	r19, Y+34	; 0x22
    2002:	4b a1       	ldd	r20, Y+35	; 0x23
    2004:	5c a1       	ldd	r21, Y+36	; 0x24
    2006:	6d a1       	ldd	r22, Y+37	; 0x25
    2008:	7e a1       	ldd	r23, Y+38	; 0x26
    200a:	8f a1       	ldd	r24, Y+39	; 0x27
    200c:	98 a5       	ldd	r25, Y+40	; 0x28
    200e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[3].BattVoltage); //Sanity check - no others populated
    2012:	23 96       	adiw	r28, 0x03	; 3
    2014:	2e ad       	ldd	r18, Y+62	; 0x3e
    2016:	3f ad       	ldd	r19, Y+63	; 0x3f
    2018:	23 97       	sbiw	r28, 0x03	; 3
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	cb 01       	movw	r24, r22
    2028:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>

	//Requested for 3, sent-upto=3 => return last 2
	loadedTo=0;
    202c:	ed 96       	adiw	r28, 0x3d	; 61
    202e:	1c ae       	std	Y+60, r1	; 0x3c
    2030:	1d ae       	std	Y+61, r1	; 0x3d
    2032:	1e ae       	std	Y+62, r1	; 0x3e
    2034:	1f ae       	std	Y+63, r1	; 0x3f
    2036:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2038:	f4 01       	movw	r30, r8
    203a:	87 2d       	mov	r24, r7
    203c:	11 92       	st	Z+, r1
    203e:	8a 95       	dec	r24
    2040:	e9 f7       	brne	.-6      	; 0x203c <_Z11runLoadTestv+0x1cc>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 3);
    2042:	23 e0       	ldi	r18, 0x03	; 3
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	6c e0       	ldi	r22, 0x0C	; 12
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	89 e6       	ldi	r24, 0x69	; 105
    2050:	95 e0       	ldi	r25, 0x05	; 5
    2052:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(2,mem.loadSensorData(buffer, 3, &loadedTo));
    2056:	9e 01       	movw	r18, r28
    2058:	27 58       	subi	r18, 0x87	; 135
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	43 e0       	ldi	r20, 0x03	; 3
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	b4 01       	movw	r22, r8
    2062:	89 e6       	ldi	r24, 0x69	; 105
    2064:	95 e0       	ldi	r25, 0x05	; 5
    2066:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    206a:	9b 01       	movw	r18, r22
    206c:	ac 01       	movw	r20, r24
    206e:	62 e0       	ldi	r22, 0x02	; 2
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(5, loadedTo);
    207a:	ed 96       	adiw	r28, 0x3d	; 61
    207c:	2c ad       	ldd	r18, Y+60	; 0x3c
    207e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2080:	4e ad       	ldd	r20, Y+62	; 0x3e
    2082:	5f ad       	ldd	r21, Y+63	; 0x3f
    2084:	ed 97       	sbiw	r28, 0x3d	; 61
    2086:	65 e0       	ldi	r22, 0x05	; 5
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertReadingsIdentical(r3, buffer[0]);
    2092:	a9 a4       	ldd	r10, Y+41	; 0x29
    2094:	ba a4       	ldd	r11, Y+42	; 0x2a
    2096:	cb a4       	ldd	r12, Y+43	; 0x2b
    2098:	dc a4       	ldd	r13, Y+44	; 0x2c
    209a:	ed a4       	ldd	r14, Y+45	; 0x2d
    209c:	fe a4       	ldd	r15, Y+46	; 0x2e
    209e:	0f a5       	ldd	r16, Y+47	; 0x2f
    20a0:	18 a9       	ldd	r17, Y+48	; 0x30
    20a2:	29 8d       	ldd	r18, Y+25	; 0x19
    20a4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    20a6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    20a8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    20aa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20ac:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20b0:	98 a1       	ldd	r25, Y+32	; 0x20
    20b2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[1]);
    20b6:	a9 a8       	ldd	r10, Y+49	; 0x31
    20b8:	ba a8       	ldd	r11, Y+50	; 0x32
    20ba:	cb a8       	ldd	r12, Y+51	; 0x33
    20bc:	dc a8       	ldd	r13, Y+52	; 0x34
    20be:	ed a8       	ldd	r14, Y+53	; 0x35
    20c0:	fe a8       	ldd	r15, Y+54	; 0x36
    20c2:	0f a9       	ldd	r16, Y+55	; 0x37
    20c4:	18 ad       	ldd	r17, Y+56	; 0x38
    20c6:	29 a1       	ldd	r18, Y+33	; 0x21
    20c8:	3a a1       	ldd	r19, Y+34	; 0x22
    20ca:	4b a1       	ldd	r20, Y+35	; 0x23
    20cc:	5c a1       	ldd	r21, Y+36	; 0x24
    20ce:	6d a1       	ldd	r22, Y+37	; 0x25
    20d0:	7e a1       	ldd	r23, Y+38	; 0x26
    20d2:	8f a1       	ldd	r24, Y+39	; 0x27
    20d4:	98 a5       	ldd	r25, Y+40	; 0x28
    20d6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[2].BattVoltage); //Sanity check - no others populated
    20da:	29 ad       	ldd	r18, Y+57	; 0x39
    20dc:	3a ad       	ldd	r19, Y+58	; 0x3a
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	00 e0       	ldi	r16, 0x00	; 0
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	cb 01       	movw	r24, r22
    20ec:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	//Requested for 8, sent-to=0 => return all 4
	loadedTo=0;
    20f0:	ed 96       	adiw	r28, 0x3d	; 61
    20f2:	1c ae       	std	Y+60, r1	; 0x3c
    20f4:	1d ae       	std	Y+61, r1	; 0x3d
    20f6:	1e ae       	std	Y+62, r1	; 0x3e
    20f8:	1f ae       	std	Y+63, r1	; 0x3f
    20fa:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    20fc:	f4 01       	movw	r30, r8
    20fe:	87 2d       	mov	r24, r7
    2100:	11 92       	st	Z+, r1
    2102:	8a 95       	dec	r24
    2104:	e9 f7       	brne	.-6      	; 0x2100 <_Z11runLoadTestv+0x290>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	6c e0       	ldi	r22, 0x0C	; 12
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	89 e6       	ldi	r24, 0x69	; 105
    2112:	95 e0       	ldi	r25, 0x05	; 5
    2114:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(5,mem.loadSensorData(buffer, 8, &loadedTo));
    2118:	9e 01       	movw	r18, r28
    211a:	27 58       	subi	r18, 0x87	; 135
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	48 e0       	ldi	r20, 0x08	; 8
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	b4 01       	movw	r22, r8
    2124:	89 e6       	ldi	r24, 0x69	; 105
    2126:	95 e0       	ldi	r25, 0x05	; 5
    2128:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    212c:	9b 01       	movw	r18, r22
    212e:	ac 01       	movw	r20, r24
    2130:	65 e0       	ldi	r22, 0x05	; 5
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(5, loadedTo);
    213c:	ed 96       	adiw	r28, 0x3d	; 61
    213e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2140:	3d ad       	ldd	r19, Y+61	; 0x3d
    2142:	4e ad       	ldd	r20, Y+62	; 0x3e
    2144:	5f ad       	ldd	r21, Y+63	; 0x3f
    2146:	ed 97       	sbiw	r28, 0x3d	; 61
    2148:	65 e0       	ldi	r22, 0x05	; 5
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertReadingsIdentical(r0, buffer[0]);
    2154:	a9 a4       	ldd	r10, Y+41	; 0x29
    2156:	ba a4       	ldd	r11, Y+42	; 0x2a
    2158:	cb a4       	ldd	r12, Y+43	; 0x2b
    215a:	dc a4       	ldd	r13, Y+44	; 0x2c
    215c:	ed a4       	ldd	r14, Y+45	; 0x2d
    215e:	fe a4       	ldd	r15, Y+46	; 0x2e
    2160:	0f a5       	ldd	r16, Y+47	; 0x2f
    2162:	18 a9       	ldd	r17, Y+48	; 0x30
    2164:	29 81       	ldd	r18, Y+1	; 0x01
    2166:	3a 81       	ldd	r19, Y+2	; 0x02
    2168:	4b 81       	ldd	r20, Y+3	; 0x03
    216a:	5c 81       	ldd	r21, Y+4	; 0x04
    216c:	6d 81       	ldd	r22, Y+5	; 0x05
    216e:	7e 81       	ldd	r23, Y+6	; 0x06
    2170:	8f 81       	ldd	r24, Y+7	; 0x07
    2172:	98 85       	ldd	r25, Y+8	; 0x08
    2174:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r1, buffer[1]);
    2178:	a9 a8       	ldd	r10, Y+49	; 0x31
    217a:	ba a8       	ldd	r11, Y+50	; 0x32
    217c:	cb a8       	ldd	r12, Y+51	; 0x33
    217e:	dc a8       	ldd	r13, Y+52	; 0x34
    2180:	ed a8       	ldd	r14, Y+53	; 0x35
    2182:	fe a8       	ldd	r15, Y+54	; 0x36
    2184:	0f a9       	ldd	r16, Y+55	; 0x37
    2186:	18 ad       	ldd	r17, Y+56	; 0x38
    2188:	29 85       	ldd	r18, Y+9	; 0x09
    218a:	3a 85       	ldd	r19, Y+10	; 0x0a
    218c:	4b 85       	ldd	r20, Y+11	; 0x0b
    218e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2190:	6d 85       	ldd	r22, Y+13	; 0x0d
    2192:	7e 85       	ldd	r23, Y+14	; 0x0e
    2194:	8f 85       	ldd	r24, Y+15	; 0x0f
    2196:	98 89       	ldd	r25, Y+16	; 0x10
    2198:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r2, buffer[2]);
    219c:	a9 ac       	ldd	r10, Y+57	; 0x39
    219e:	ba ac       	ldd	r11, Y+58	; 0x3a
    21a0:	cb ac       	ldd	r12, Y+59	; 0x3b
    21a2:	dc ac       	ldd	r13, Y+60	; 0x3c
    21a4:	ed ac       	ldd	r14, Y+61	; 0x3d
    21a6:	fe ac       	ldd	r15, Y+62	; 0x3e
    21a8:	0f ad       	ldd	r16, Y+63	; 0x3f
    21aa:	21 96       	adiw	r28, 0x01	; 1
    21ac:	1f ad       	ldd	r17, Y+63	; 0x3f
    21ae:	21 97       	sbiw	r28, 0x01	; 1
    21b0:	29 89       	ldd	r18, Y+17	; 0x11
    21b2:	3a 89       	ldd	r19, Y+18	; 0x12
    21b4:	4b 89       	ldd	r20, Y+19	; 0x13
    21b6:	5c 89       	ldd	r21, Y+20	; 0x14
    21b8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ba:	7e 89       	ldd	r23, Y+22	; 0x16
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	98 8d       	ldd	r25, Y+24	; 0x18
    21c0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r3, buffer[3]);
    21c4:	22 96       	adiw	r28, 0x02	; 2
    21c6:	af ac       	ldd	r10, Y+63	; 0x3f
    21c8:	22 97       	sbiw	r28, 0x02	; 2
    21ca:	23 96       	adiw	r28, 0x03	; 3
    21cc:	bf ac       	ldd	r11, Y+63	; 0x3f
    21ce:	23 97       	sbiw	r28, 0x03	; 3
    21d0:	24 96       	adiw	r28, 0x04	; 4
    21d2:	cf ac       	ldd	r12, Y+63	; 0x3f
    21d4:	24 97       	sbiw	r28, 0x04	; 4
    21d6:	25 96       	adiw	r28, 0x05	; 5
    21d8:	df ac       	ldd	r13, Y+63	; 0x3f
    21da:	25 97       	sbiw	r28, 0x05	; 5
    21dc:	26 96       	adiw	r28, 0x06	; 6
    21de:	ef ac       	ldd	r14, Y+63	; 0x3f
    21e0:	26 97       	sbiw	r28, 0x06	; 6
    21e2:	27 96       	adiw	r28, 0x07	; 7
    21e4:	ff ac       	ldd	r15, Y+63	; 0x3f
    21e6:	27 97       	sbiw	r28, 0x07	; 7
    21e8:	28 96       	adiw	r28, 0x08	; 8
    21ea:	0f ad       	ldd	r16, Y+63	; 0x3f
    21ec:	28 97       	sbiw	r28, 0x08	; 8
    21ee:	29 96       	adiw	r28, 0x09	; 9
    21f0:	1f ad       	ldd	r17, Y+63	; 0x3f
    21f2:	29 97       	sbiw	r28, 0x09	; 9
    21f4:	29 8d       	ldd	r18, Y+25	; 0x19
    21f6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    21f8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    21fa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    21fc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21fe:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2200:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2202:	98 a1       	ldd	r25, Y+32	; 0x20
    2204:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[4]);
    2208:	2a 96       	adiw	r28, 0x0a	; 10
    220a:	af ac       	ldd	r10, Y+63	; 0x3f
    220c:	2a 97       	sbiw	r28, 0x0a	; 10
    220e:	2b 96       	adiw	r28, 0x0b	; 11
    2210:	bf ac       	ldd	r11, Y+63	; 0x3f
    2212:	2b 97       	sbiw	r28, 0x0b	; 11
    2214:	2c 96       	adiw	r28, 0x0c	; 12
    2216:	cf ac       	ldd	r12, Y+63	; 0x3f
    2218:	2c 97       	sbiw	r28, 0x0c	; 12
    221a:	2d 96       	adiw	r28, 0x0d	; 13
    221c:	df ac       	ldd	r13, Y+63	; 0x3f
    221e:	2d 97       	sbiw	r28, 0x0d	; 13
    2220:	2e 96       	adiw	r28, 0x0e	; 14
    2222:	ef ac       	ldd	r14, Y+63	; 0x3f
    2224:	2e 97       	sbiw	r28, 0x0e	; 14
    2226:	2f 96       	adiw	r28, 0x0f	; 15
    2228:	ff ac       	ldd	r15, Y+63	; 0x3f
    222a:	2f 97       	sbiw	r28, 0x0f	; 15
    222c:	60 96       	adiw	r28, 0x10	; 16
    222e:	0f ad       	ldd	r16, Y+63	; 0x3f
    2230:	60 97       	sbiw	r28, 0x10	; 16
    2232:	61 96       	adiw	r28, 0x11	; 17
    2234:	1f ad       	ldd	r17, Y+63	; 0x3f
    2236:	61 97       	sbiw	r28, 0x11	; 17
    2238:	29 a1       	ldd	r18, Y+33	; 0x21
    223a:	3a a1       	ldd	r19, Y+34	; 0x22
    223c:	4b a1       	ldd	r20, Y+35	; 0x23
    223e:	5c a1       	ldd	r21, Y+36	; 0x24
    2240:	6d a1       	ldd	r22, Y+37	; 0x25
    2242:	7e a1       	ldd	r23, Y+38	; 0x26
    2244:	8f a1       	ldd	r24, Y+39	; 0x27
    2246:	98 a5       	ldd	r25, Y+40	; 0x28
    2248:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[5].BattVoltage); //Sanity check - no others populated
    224c:	63 96       	adiw	r28, 0x13	; 19
    224e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2250:	3f ad       	ldd	r19, Y+63	; 0x3f
    2252:	63 97       	sbiw	r28, 0x13	; 19
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	cb 01       	movw	r24, r22
    2262:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	//Requested for 5, sent-to=5 => return none
	loadedTo=0;
    2266:	ed 96       	adiw	r28, 0x3d	; 61
    2268:	1c ae       	std	Y+60, r1	; 0x3c
    226a:	1d ae       	std	Y+61, r1	; 0x3d
    226c:	1e ae       	std	Y+62, r1	; 0x3e
    226e:	1f ae       	std	Y+63, r1	; 0x3f
    2270:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2272:	f4 01       	movw	r30, r8
    2274:	87 2d       	mov	r24, r7
    2276:	11 92       	st	Z+, r1
    2278:	8a 95       	dec	r24
    227a:	e9 f7       	brne	.-6      	; 0x2276 <_Z11runLoadTestv+0x406>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    227c:	25 e0       	ldi	r18, 0x05	; 5
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	6c e0       	ldi	r22, 0x0C	; 12
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	89 e6       	ldi	r24, 0x69	; 105
    228a:	95 e0       	ldi	r25, 0x05	; 5
    228c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(0, mem.loadSensorData(buffer, 5, &loadedTo));
    2290:	9e 01       	movw	r18, r28
    2292:	27 58       	subi	r18, 0x87	; 135
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
    2296:	45 e0       	ldi	r20, 0x05	; 5
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	b4 01       	movw	r22, r8
    229c:	89 e6       	ldi	r24, 0x69	; 105
    229e:	95 e0       	ldi	r25, 0x05	; 5
    22a0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    22a4:	9b 01       	movw	r18, r22
    22a6:	ac 01       	movw	r20, r24
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	cb 01       	movw	r24, r22
    22ae:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(5, loadedTo); //Loaded becomes sent-to as no extra readings input
    22b2:	ed 96       	adiw	r28, 0x3d	; 61
    22b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    22b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    22b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    22ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    22bc:	ed 97       	sbiw	r28, 0x3d	; 61
    22be:	65 e0       	ldi	r22, 0x05	; 5
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    22ca:	29 a5       	ldd	r18, Y+41	; 0x29
    22cc:	3a a5       	ldd	r19, Y+42	; 0x2a
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	cb 01       	movw	r24, r22
    22d8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	//Requested for 9, sent-to=5 => return none
	loadedTo=0;
    22dc:	ed 96       	adiw	r28, 0x3d	; 61
    22de:	1c ae       	std	Y+60, r1	; 0x3c
    22e0:	1d ae       	std	Y+61, r1	; 0x3d
    22e2:	1e ae       	std	Y+62, r1	; 0x3e
    22e4:	1f ae       	std	Y+63, r1	; 0x3f
    22e6:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    22e8:	f4 01       	movw	r30, r8
    22ea:	87 2d       	mov	r24, r7
    22ec:	11 92       	st	Z+, r1
    22ee:	8a 95       	dec	r24
    22f0:	e9 f7       	brne	.-6      	; 0x22ec <_Z11runLoadTestv+0x47c>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    22f2:	25 e0       	ldi	r18, 0x05	; 5
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	6c e0       	ldi	r22, 0x0C	; 12
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	89 e6       	ldi	r24, 0x69	; 105
    2300:	95 e0       	ldi	r25, 0x05	; 5
    2302:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(0,mem.loadSensorData(buffer, 9, &loadedTo));
    2306:	9e 01       	movw	r18, r28
    2308:	27 58       	subi	r18, 0x87	; 135
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	49 e0       	ldi	r20, 0x09	; 9
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	b4 01       	movw	r22, r8
    2312:	89 e6       	ldi	r24, 0x69	; 105
    2314:	95 e0       	ldi	r25, 0x05	; 5
    2316:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	cb 01       	movw	r24, r22
    2324:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(5, loadedTo);
    2328:	ed 96       	adiw	r28, 0x3d	; 61
    232a:	2c ad       	ldd	r18, Y+60	; 0x3c
    232c:	3d ad       	ldd	r19, Y+61	; 0x3d
    232e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2330:	5f ad       	ldd	r21, Y+63	; 0x3f
    2332:	ed 97       	sbiw	r28, 0x3d	; 61
    2334:	65 e0       	ldi	r22, 0x05	; 5
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    2340:	29 a5       	ldd	r18, Y+41	; 0x29
    2342:	3a a5       	ldd	r19, Y+42	; 0x2a
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	cb 01       	movw	r24, r22
    234e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>

	//NONE loaded, requested for 5, sent-to=0 => return none
	initialiseModulePristine(1); //Clear existing loads
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	0e 94 0e 08 	call	0x101c	; 0x101c <_Z24initialiseModulePristinej>
	loadedTo=0;
    235a:	ed 96       	adiw	r28, 0x3d	; 61
    235c:	1c ae       	std	Y+60, r1	; 0x3c
    235e:	1d ae       	std	Y+61, r1	; 0x3d
    2360:	1e ae       	std	Y+62, r1	; 0x3e
    2362:	1f ae       	std	Y+63, r1	; 0x3f
    2364:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2366:	f4 01       	movw	r30, r8
    2368:	11 92       	st	Z+, r1
    236a:	7a 94       	dec	r7
    236c:	e9 f7       	brne	.-6      	; 0x2368 <_Z11runLoadTestv+0x4f8>
	assert(0, mem.loadSensorData(buffer, 5, &loadedTo));
    236e:	9e 01       	movw	r18, r28
    2370:	27 58       	subi	r18, 0x87	; 135
    2372:	3f 4f       	sbci	r19, 0xFF	; 255
    2374:	45 e0       	ldi	r20, 0x05	; 5
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	b4 01       	movw	r22, r8
    237a:	89 e6       	ldi	r24, 0x69	; 105
    237c:	95 e0       	ldi	r25, 0x05	; 5
    237e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2382:	9b 01       	movw	r18, r22
    2384:	ac 01       	movw	r20, r24
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	cb 01       	movw	r24, r22
    238c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(0, loadedTo);
    2390:	ed 96       	adiw	r28, 0x3d	; 61
    2392:	2c ad       	ldd	r18, Y+60	; 0x3c
    2394:	3d ad       	ldd	r19, Y+61	; 0x3d
    2396:	4e ad       	ldd	r20, Y+62	; 0x3e
    2398:	5f ad       	ldd	r21, Y+63	; 0x3f
    239a:	ed 97       	sbiw	r28, 0x3d	; 61
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	cb 01       	movw	r24, r22
    23a2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    23a6:	29 a5       	ldd	r18, Y+41	; 0x29
    23a8:	3a a5       	ldd	r19, Y+42	; 0x2a
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	cb 01       	movw	r24, r22
    23b4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
}
    23b8:	c4 58       	subi	r28, 0x84	; 132
    23ba:	df 4f       	sbci	r29, 0xFF	; 255
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	bf 90       	pop	r11
    23d8:	af 90       	pop	r10
    23da:	9f 90       	pop	r9
    23dc:	8f 90       	pop	r8
    23de:	7f 90       	pop	r7
    23e0:	08 95       	ret

000023e2 <_Z10runPadTestv>:

void runPadTest()
{
    23e2:	df 92       	push	r13
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	6d 97       	sbiw	r28, 0x1d	; 29
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
	byte buffSz=16;
	char buff[buffSz];

	//Integer test
	assert(1, writeWithPad(buff, 0, 0));
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	ce 01       	movw	r24, r28
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	7c 01       	movw	r14, r24
    240c:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	00 e0       	ldi	r16, 0x00	; 0
    241a:	10 e0       	ldi	r17, 0x00	; 0
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0", buff);
    2428:	4f ef       	ldi	r20, 0xFF	; 255
    242a:	5f ef       	ldi	r21, 0xFF	; 255
    242c:	b7 01       	movw	r22, r14
    242e:	8e eb       	ldi	r24, 0xBE	; 190
    2430:	92 e0       	ldi	r25, 0x02	; 2
    2432:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2436:	68 94       	set
    2438:	dd 24       	eor	r13, r13
    243a:	d4 f8       	bld	r13, 4
    243c:	f7 01       	movw	r30, r14
    243e:	8d 2d       	mov	r24, r13
    2440:	11 92       	st	Z+, r1
    2442:	8a 95       	dec	r24
    2444:	e9 f7       	brne	.-6      	; 0x2440 <_Z10runPadTestv+0x5e>
	
	assert(3,writeWithPad(buff, 456, 0));
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	68 ec       	ldi	r22, 0xC8	; 200
    244a:	71 e0       	ldi	r23, 0x01	; 1
    244c:	c7 01       	movw	r24, r14
    244e:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("456", buff);
    2466:	4f ef       	ldi	r20, 0xFF	; 255
    2468:	5f ef       	ldi	r21, 0xFF	; 255
    246a:	b7 01       	movw	r22, r14
    246c:	85 e9       	ldi	r24, 0x95	; 149
    246e:	92 e0       	ldi	r25, 0x02	; 2
    2470:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2474:	f7 01       	movw	r30, r14
    2476:	8d 2d       	mov	r24, r13
    2478:	11 92       	st	Z+, r1
    247a:	8a 95       	dec	r24
    247c:	e9 f7       	brne	.-6      	; 0x2478 <_Z10runPadTestv+0x96>
	
	assert(4, writeWithPad(buff, 6, 4));
    247e:	44 e0       	ldi	r20, 0x04	; 4
    2480:	66 e0       	ldi	r22, 0x06	; 6
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	c7 01       	movw	r24, r14
    2486:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0006", buff);
    249e:	4f ef       	ldi	r20, 0xFF	; 255
    24a0:	5f ef       	ldi	r21, 0xFF	; 255
    24a2:	b7 01       	movw	r22, r14
    24a4:	89 e9       	ldi	r24, 0x99	; 153
    24a6:	92 e0       	ldi	r25, 0x02	; 2
    24a8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    24ac:	f7 01       	movw	r30, r14
    24ae:	8d 2d       	mov	r24, r13
    24b0:	11 92       	st	Z+, r1
    24b2:	8a 95       	dec	r24
    24b4:	e9 f7       	brne	.-6      	; 0x24b0 <_Z10runPadTestv+0xce>
	
	assert(4, writeWithPad(buff, 23, 4));
    24b6:	44 e0       	ldi	r20, 0x04	; 4
    24b8:	67 e1       	ldi	r22, 0x17	; 23
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	c7 01       	movw	r24, r14
    24be:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	64 e0       	ldi	r22, 0x04	; 4
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0023", buff);
    24d6:	4f ef       	ldi	r20, 0xFF	; 255
    24d8:	5f ef       	ldi	r21, 0xFF	; 255
    24da:	b7 01       	movw	r22, r14
    24dc:	8e e9       	ldi	r24, 0x9E	; 158
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    24e4:	f7 01       	movw	r30, r14
    24e6:	8d 2d       	mov	r24, r13
    24e8:	11 92       	st	Z+, r1
    24ea:	8a 95       	dec	r24
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <_Z10runPadTestv+0x106>
	
	assert(4, writeWithPad(buff, 785, 4));
    24ee:	44 e0       	ldi	r20, 0x04	; 4
    24f0:	61 e1       	ldi	r22, 0x11	; 17
    24f2:	73 e0       	ldi	r23, 0x03	; 3
    24f4:	c7 01       	movw	r24, r14
    24f6:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	64 e0       	ldi	r22, 0x04	; 4
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0785", buff);
    250e:	4f ef       	ldi	r20, 0xFF	; 255
    2510:	5f ef       	ldi	r21, 0xFF	; 255
    2512:	b7 01       	movw	r22, r14
    2514:	83 ea       	ldi	r24, 0xA3	; 163
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    251c:	f7 01       	movw	r30, r14
    251e:	8d 2d       	mov	r24, r13
    2520:	11 92       	st	Z+, r1
    2522:	8a 95       	dec	r24
    2524:	e9 f7       	brne	.-6      	; 0x2520 <_Z10runPadTestv+0x13e>
	
	assert(4, writeWithPad(buff, 1022, 4));
    2526:	44 e0       	ldi	r20, 0x04	; 4
    2528:	6e ef       	ldi	r22, 0xFE	; 254
    252a:	73 e0       	ldi	r23, 0x03	; 3
    252c:	c7 01       	movw	r24, r14
    252e:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	64 e0       	ldi	r22, 0x04	; 4
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("1022", buff);
    2546:	4f ef       	ldi	r20, 0xFF	; 255
    2548:	5f ef       	ldi	r21, 0xFF	; 255
    254a:	b7 01       	movw	r22, r14
    254c:	88 ea       	ldi	r24, 0xA8	; 168
    254e:	92 e0       	ldi	r25, 0x02	; 2
    2550:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2554:	f7 01       	movw	r30, r14
    2556:	8d 2d       	mov	r24, r13
    2558:	11 92       	st	Z+, r1
    255a:	8a 95       	dec	r24
    255c:	e9 f7       	brne	.-6      	; 0x2558 <_Z10runPadTestv+0x176>
	
	assert(5, writeWithPad(buff, 10100, 4));
    255e:	44 e0       	ldi	r20, 0x04	; 4
    2560:	64 e7       	ldi	r22, 0x74	; 116
    2562:	77 e2       	ldi	r23, 0x27	; 39
    2564:	c7 01       	movw	r24, r14
    2566:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	65 e0       	ldi	r22, 0x05	; 5
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("10100", buff);
    257e:	4f ef       	ldi	r20, 0xFF	; 255
    2580:	5f ef       	ldi	r21, 0xFF	; 255
    2582:	b7 01       	movw	r22, r14
    2584:	8d ea       	ldi	r24, 0xAD	; 173
    2586:	92 e0       	ldi	r25, 0x02	; 2
    2588:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    258c:	f7 01       	movw	r30, r14
    258e:	8d 2d       	mov	r24, r13
    2590:	11 92       	st	Z+, r1
    2592:	8a 95       	dec	r24
    2594:	e9 f7       	brne	.-6      	; 0x2590 <_Z10runPadTestv+0x1ae>


	//byte test
	assert(1, writeByteWithPad(buff, 0, 0));
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	c7 01       	movw	r24, r14
    259c:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0", buff);
    25b4:	4f ef       	ldi	r20, 0xFF	; 255
    25b6:	5f ef       	ldi	r21, 0xFF	; 255
    25b8:	b7 01       	movw	r22, r14
    25ba:	8e eb       	ldi	r24, 0xBE	; 190
    25bc:	92 e0       	ldi	r25, 0x02	; 2
    25be:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    25c2:	f7 01       	movw	r30, r14
    25c4:	8d 2d       	mov	r24, r13
    25c6:	11 92       	st	Z+, r1
    25c8:	8a 95       	dec	r24
    25ca:	e9 f7       	brne	.-6      	; 0x25c6 <_Z10runPadTestv+0x1e4>
	
	assert(3, writeByteWithPad(buff, 138, 2));
    25cc:	42 e0       	ldi	r20, 0x02	; 2
    25ce:	6a e8       	ldi	r22, 0x8A	; 138
    25d0:	c7 01       	movw	r24, r14
    25d2:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	63 e0       	ldi	r22, 0x03	; 3
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("138", buff);
    25ea:	4f ef       	ldi	r20, 0xFF	; 255
    25ec:	5f ef       	ldi	r21, 0xFF	; 255
    25ee:	b7 01       	movw	r22, r14
    25f0:	83 eb       	ldi	r24, 0xB3	; 179
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    25f8:	f7 01       	movw	r30, r14
    25fa:	8d 2d       	mov	r24, r13
    25fc:	11 92       	st	Z+, r1
    25fe:	8a 95       	dec	r24
    2600:	e9 f7       	brne	.-6      	; 0x25fc <_Z10runPadTestv+0x21a>
	
	assert(4, writeByteWithPad(buff, 6, 4));
    2602:	44 e0       	ldi	r20, 0x04	; 4
    2604:	66 e0       	ldi	r22, 0x06	; 6
    2606:	c7 01       	movw	r24, r14
    2608:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	64 e0       	ldi	r22, 0x04	; 4
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0006", buff);
    2620:	4f ef       	ldi	r20, 0xFF	; 255
    2622:	5f ef       	ldi	r21, 0xFF	; 255
    2624:	b7 01       	movw	r22, r14
    2626:	89 e9       	ldi	r24, 0x99	; 153
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    262e:	f7 01       	movw	r30, r14
    2630:	8d 2d       	mov	r24, r13
    2632:	11 92       	st	Z+, r1
    2634:	8a 95       	dec	r24
    2636:	e9 f7       	brne	.-6      	; 0x2632 <_Z10runPadTestv+0x250>
	
	//char* from string test
	assert(1, writeCharArrWithPad(buff, "T", 0));
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	68 eb       	ldi	r22, 0xB8	; 184
    263c:	72 e0       	ldi	r23, 0x02	; 2
    263e:	c7 01       	movw	r24, r14
    2640:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("T", buff);
    2658:	4f ef       	ldi	r20, 0xFF	; 255
    265a:	5f ef       	ldi	r21, 0xFF	; 255
    265c:	b7 01       	movw	r22, r14
    265e:	88 eb       	ldi	r24, 0xB8	; 184
    2660:	92 e0       	ldi	r25, 0x02	; 2
    2662:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2666:	f7 01       	movw	r30, r14
    2668:	8d 2d       	mov	r24, r13
    266a:	11 92       	st	Z+, r1
    266c:	8a 95       	dec	r24
    266e:	e9 f7       	brne	.-6      	; 0x266a <_Z10runPadTestv+0x288>
	
	assert(2, writeCharArrWithPad(buff, "T", 2));
    2670:	42 e0       	ldi	r20, 0x02	; 2
    2672:	68 eb       	ldi	r22, 0xB8	; 184
    2674:	72 e0       	ldi	r23, 0x02	; 2
    2676:	c7 01       	movw	r24, r14
    2678:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    2690:	4f ef       	ldi	r20, 0xFF	; 255
    2692:	5f ef       	ldi	r21, 0xFF	; 255
    2694:	b7 01       	movw	r22, r14
    2696:	87 eb       	ldi	r24, 0xB7	; 183
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    269e:	f7 01       	movw	r30, r14
    26a0:	8d 2d       	mov	r24, r13
    26a2:	11 92       	st	Z+, r1
    26a4:	8a 95       	dec	r24
    26a6:	e9 f7       	brne	.-6      	; 0x26a2 <_Z10runPadTestv+0x2c0>
	
	assert(5, writeCharArrWithPad(buff, "", 5));
    26a8:	45 e0       	ldi	r20, 0x05	; 5
    26aa:	64 e8       	ldi	r22, 0x84	; 132
    26ac:	73 e0       	ldi	r23, 0x03	; 3
    26ae:	c7 01       	movw	r24, r14
    26b0:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	65 e0       	ldi	r22, 0x05	; 5
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("00000", buff);
    26c8:	4f ef       	ldi	r20, 0xFF	; 255
    26ca:	5f ef       	ldi	r21, 0xFF	; 255
    26cc:	b7 01       	movw	r22, r14
    26ce:	8a eb       	ldi	r24, 0xBA	; 186
    26d0:	92 e0       	ldi	r25, 0x02	; 2
    26d2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    26d6:	f7 01       	movw	r30, r14
    26d8:	8d 2d       	mov	r24, r13
    26da:	11 92       	st	Z+, r1
    26dc:	8a 95       	dec	r24
    26de:	e9 f7       	brne	.-6      	; 0x26da <_Z10runPadTestv+0x2f8>
	
	assert(13, writeCharArrWithPad(buff, "Serious Error", 2));
    26e0:	42 e0       	ldi	r20, 0x02	; 2
    26e2:	60 ec       	ldi	r22, 0xC0	; 192
    26e4:	72 e0       	ldi	r23, 0x02	; 2
    26e6:	c7 01       	movw	r24, r14
    26e8:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	6d e0       	ldi	r22, 0x0D	; 13
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("Serious Error", buff);
    2700:	4f ef       	ldi	r20, 0xFF	; 255
    2702:	5f ef       	ldi	r21, 0xFF	; 255
    2704:	b7 01       	movw	r22, r14
    2706:	80 ec       	ldi	r24, 0xC0	; 192
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    270e:	f7 01       	movw	r30, r14
    2710:	8d 2d       	mov	r24, r13
    2712:	11 92       	st	Z+, r1
    2714:	8a 95       	dec	r24
    2716:	e9 f7       	brne	.-6      	; 0x2712 <_Z10runPadTestv+0x330>
//	String test((const char*)"T");
//	assert(1, writeStrToStrWithPad(strDest,0, test, 0));
//	assertRealStringsIdentical("T", strDest);
		
	//Char* test
	char testMsg[]={'T', '\0'};
    2718:	84 e5       	ldi	r24, 0x54	; 84
    271a:	89 8b       	std	Y+17, r24	; 0x11
    271c:	1a 8a       	std	Y+18, r1	; 0x12
	assert(2, writeCharArrWithPad(buff, testMsg, 2));
    271e:	42 e0       	ldi	r20, 0x02	; 2
    2720:	be 01       	movw	r22, r28
    2722:	6f 5e       	subi	r22, 0xEF	; 239
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	c7 01       	movw	r24, r14
    2728:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    2740:	4f ef       	ldi	r20, 0xFF	; 255
    2742:	5f ef       	ldi	r21, 0xFF	; 255
    2744:	b7 01       	movw	r22, r14
    2746:	87 eb       	ldi	r24, 0xB7	; 183
    2748:	92 e0       	ldi	r25, 0x02	; 2
    274a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    274e:	f7 01       	movw	r30, r14
    2750:	8d 2d       	mov	r24, r13
    2752:	11 92       	st	Z+, r1
    2754:	8a 95       	dec	r24
    2756:	e9 f7       	brne	.-6      	; 0x2752 <_Z10runPadTestv+0x370>
	
	char testMsg2[]={'E','r','r','o','r',' ','S','o','m','e','\0'};
    2758:	8b e0       	ldi	r24, 0x0B	; 11
    275a:	e5 e3       	ldi	r30, 0x35	; 53
    275c:	f1 e0       	ldi	r31, 0x01	; 1
    275e:	de 01       	movw	r26, r28
    2760:	53 96       	adiw	r26, 0x13	; 19
    2762:	01 90       	ld	r0, Z+
    2764:	0d 92       	st	X+, r0
    2766:	8a 95       	dec	r24
    2768:	e1 f7       	brne	.-8      	; 0x2762 <_Z10runPadTestv+0x380>
	assert(10, writeCharArrWithPad(buff, testMsg2, 2));
    276a:	42 e0       	ldi	r20, 0x02	; 2
    276c:	be 01       	movw	r22, r28
    276e:	6d 5e       	subi	r22, 0xED	; 237
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	c7 01       	movw	r24, r14
    2774:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	6a e0       	ldi	r22, 0x0A	; 10
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("Error Some", buff);
    278c:	4f ef       	ldi	r20, 0xFF	; 255
    278e:	5f ef       	ldi	r21, 0xFF	; 255
    2790:	b7 01       	movw	r22, r14
    2792:	8e ec       	ldi	r24, 0xCE	; 206
    2794:	92 e0       	ldi	r25, 0x02	; 2
    2796:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    279a:	f7 01       	movw	r30, r14
    279c:	8d 2d       	mov	r24, r13
    279e:	11 92       	st	Z+, r1
    27a0:	8a 95       	dec	r24
    27a2:	e9 f7       	brne	.-6      	; 0x279e <_Z10runPadTestv+0x3bc>
	
	assert(2, writeCharArrWithPad(buff, "T", 2));
    27a4:	42 e0       	ldi	r20, 0x02	; 2
    27a6:	68 eb       	ldi	r22, 0xB8	; 184
    27a8:	72 e0       	ldi	r23, 0x02	; 2
    27aa:	c7 01       	movw	r24, r14
    27ac:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    27c4:	4f ef       	ldi	r20, 0xFF	; 255
    27c6:	5f ef       	ldi	r21, 0xFF	; 255
    27c8:	b7 01       	movw	r22, r14
    27ca:	87 eb       	ldi	r24, 0xB7	; 183
    27cc:	92 e0       	ldi	r25, 0x02	; 2
    27ce:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    27d2:	f7 01       	movw	r30, r14
    27d4:	8d 2d       	mov	r24, r13
    27d6:	11 92       	st	Z+, r1
    27d8:	8a 95       	dec	r24
    27da:	e9 f7       	brne	.-6      	; 0x27d6 <_Z10runPadTestv+0x3f4>
	
	assert(13, writeCharArrWithPad(buff, "Serious Error", 2));
    27dc:	42 e0       	ldi	r20, 0x02	; 2
    27de:	60 ec       	ldi	r22, 0xC0	; 192
    27e0:	72 e0       	ldi	r23, 0x02	; 2
    27e2:	c7 01       	movw	r24, r14
    27e4:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	6d e0       	ldi	r22, 0x0D	; 13
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertCharStringsIdentical("Serious Error", buff);
    27fc:	4f ef       	ldi	r20, 0xFF	; 255
    27fe:	5f ef       	ldi	r21, 0xFF	; 255
    2800:	b7 01       	movw	r22, r14
    2802:	80 ec       	ldi	r24, 0xC0	; 192
    2804:	92 e0       	ldi	r25, 0x02	; 2
    2806:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    280a:	f7 01       	movw	r30, r14
    280c:	11 92       	st	Z+, r1
    280e:	da 94       	dec	r13
    2810:	e9 f7       	brne	.-6      	; 0x280c <_Z10runPadTestv+0x42a>
}
    2812:	6d 96       	adiw	r28, 0x1d	; 29
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	08 95       	ret

0000282e <_Z11runSendTestv>:

void runSendTest()
{
    282e:	3f 92       	push	r3
    2830:	4f 92       	push	r4
    2832:	5f 92       	push	r5
    2834:	6f 92       	push	r6
    2836:	7f 92       	push	r7
    2838:	8f 92       	push	r8
    283a:	9f 92       	push	r9
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	c7 5a       	subi	r28, 0xA7	; 167
    2856:	d1 09       	sbc	r29, r1
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
	
	//Check numbers save and load OK in correct endian order
	unsigned long testCases[7] = {0, 1, 100, 262144, 2048, 4+32+128+1024+2048,4};
    2862:	8c e1       	ldi	r24, 0x1C	; 28
    2864:	e0 e4       	ldi	r30, 0x40	; 64
    2866:	f1 e0       	ldi	r31, 0x01	; 1
    2868:	de 01       	movw	r26, r28
    286a:	1d 96       	adiw	r26, 0x0d	; 13
    286c:	01 90       	ld	r0, Z+
    286e:	0d 92       	st	X+, r0
    2870:	8a 95       	dec	r24
    2872:	e1 f7       	brne	.-8      	; 0x286c <_Z11runSendTestv+0x3e>
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
    2874:	e1 2c       	mov	r14, r1
    2876:	f1 2c       	mov	r15, r1
    2878:	87 e0       	ldi	r24, 0x07	; 7
    287a:	e8 16       	cp	r14, r24
    287c:	f1 04       	cpc	r15, r1
    287e:	ec f4       	brge	.+58     	; 0x28ba <_Z11runSendTestv+0x8c>
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
    2880:	b7 01       	movw	r22, r14
    2882:	66 0f       	add	r22, r22
    2884:	77 1f       	adc	r23, r23
    2886:	66 0f       	add	r22, r22
    2888:	77 1f       	adc	r23, r23
    288a:	e1 e0       	ldi	r30, 0x01	; 1
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	ec 0f       	add	r30, r28
    2890:	fd 1f       	adc	r31, r29
    2892:	e6 0f       	add	r30, r22
    2894:	f7 1f       	adc	r31, r23
    2896:	24 85       	ldd	r18, Z+12	; 0x0c
    2898:	35 85       	ldd	r19, Z+13	; 0x0d
    289a:	46 85       	ldd	r20, Z+14	; 0x0e
    289c:	57 85       	ldd	r21, Z+15	; 0x0f
    289e:	a9 e2       	ldi	r26, 0x29	; 41
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ac 0f       	add	r26, r28
    28a4:	bd 1f       	adc	r27, r29
    28a6:	6a 0f       	add	r22, r26
    28a8:	7b 1f       	adc	r23, r27
    28aa:	89 e6       	ldi	r24, 0x69	; 105
    28ac:	95 e0       	ldi	r25, 0x05	; 5
    28ae:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	
	//Check numbers save and load OK in correct endian order
	unsigned long testCases[7] = {0, 1, 100, 262144, 2048, 4+32+128+1024+2048,4};
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
    28b2:	bf ef       	ldi	r27, 0xFF	; 255
    28b4:	eb 1a       	sub	r14, r27
    28b6:	fb 0a       	sbc	r15, r27
    28b8:	df cf       	rjmp	.-66     	; 0x2878 <_Z11runSendTestv+0x4a>
    28ba:	e1 2c       	mov	r14, r1
    28bc:	f1 2c       	mov	r15, r1
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
	
	for(int t=0 ; t<7 ; t++)
    28be:	e7 e0       	ldi	r30, 0x07	; 7
    28c0:	ee 16       	cp	r14, r30
    28c2:	f1 04       	cpc	r15, r1
    28c4:	9c f5       	brge	.+102    	; 0x292c <_Z11runSendTestv+0xfe>
	{
		long test = testCases[t];
    28c6:	b7 01       	movw	r22, r14
    28c8:	66 0f       	add	r22, r22
    28ca:	77 1f       	adc	r23, r23
    28cc:	66 0f       	add	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	e1 e0       	ldi	r30, 0x01	; 1
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	ec 0f       	add	r30, r28
    28d6:	fd 1f       	adc	r31, r29
    28d8:	e6 0f       	add	r30, r22
    28da:	f7 1f       	adc	r31, r23
    28dc:	44 84       	ldd	r4, Z+12	; 0x0c
    28de:	55 84       	ldd	r5, Z+13	; 0x0d
    28e0:	66 84       	ldd	r6, Z+14	; 0x0e
    28e2:	77 84       	ldd	r7, Z+15	; 0x0f
		volatile unsigned long readValue = mem.getLongFromMemory((int)(bufferTest+t));
    28e4:	89 e2       	ldi	r24, 0x29	; 41
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	8c 0f       	add	r24, r28
    28ea:	9d 1f       	adc	r25, r29
    28ec:	68 0f       	add	r22, r24
    28ee:	79 1f       	adc	r23, r25
    28f0:	89 e6       	ldi	r24, 0x69	; 105
    28f2:	95 e0       	ldi	r25, 0x05	; 5
    28f4:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    28f8:	cc 55       	subi	r28, 0x5C	; 92
    28fa:	df 4f       	sbci	r29, 0xFF	; 255
    28fc:	68 83       	st	Y, r22
    28fe:	79 83       	std	Y+1, r23	; 0x01
    2900:	8a 83       	std	Y+2, r24	; 0x02
    2902:	9b 83       	std	Y+3, r25	; 0x03
    2904:	c4 5a       	subi	r28, 0xA4	; 164
    2906:	d0 40       	sbci	r29, 0x00	; 0
		assert(test, readValue, "long test");
    2908:	cc 55       	subi	r28, 0x5C	; 92
    290a:	df 4f       	sbci	r29, 0xFF	; 255
    290c:	28 81       	ld	r18, Y
    290e:	39 81       	ldd	r19, Y+1	; 0x01
    2910:	4a 81       	ldd	r20, Y+2	; 0x02
    2912:	5b 81       	ldd	r21, Y+3	; 0x03
    2914:	c4 5a       	subi	r28, 0xA4	; 164
    2916:	d0 40       	sbci	r29, 0x00	; 0
    2918:	09 ed       	ldi	r16, 0xD9	; 217
    291a:	12 e0       	ldi	r17, 0x02	; 2
    291c:	c3 01       	movw	r24, r6
    291e:	b2 01       	movw	r22, r4
    2920:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
	
	for(int t=0 ; t<7 ; t++)
    2924:	9f ef       	ldi	r25, 0xFF	; 255
    2926:	e9 1a       	sub	r14, r25
    2928:	f9 0a       	sbc	r15, r25
    292a:	c9 cf       	rjmp	.-110    	; 0x28be <_Z11runSendTestv+0x90>
		volatile unsigned long readValue = mem.getLongFromMemory((int)(bufferTest+t));
		assert(test, readValue, "long test");
	}
	
	//Check values set at address are ok and don't overwrite each other
	mem.setLongToMemory(MEMLOC_MODULE_ID, 5);
    292c:	25 e0       	ldi	r18, 0x05	; 5
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	89 e6       	ldi	r24, 0x69	; 105
    293a:	95 e0       	ldi	r25, 0x05	; 5
    293c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_BOOTCOUNT, 343); //TODO: Test for overflow - if continues ok, leave it
    2940:	27 e5       	ldi	r18, 0x57	; 87
    2942:	31 e0       	ldi	r19, 0x01	; 1
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	68 e0       	ldi	r22, 0x08	; 8
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	89 e6       	ldi	r24, 0x69	; 105
    294e:	95 e0       	ldi	r25, 0x05	; 5
    2950:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_VERSION, 843);
    2954:	2b e4       	ldi	r18, 0x4B	; 75
    2956:	33 e0       	ldi	r19, 0x03	; 3
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	64 e0       	ldi	r22, 0x04	; 4
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	89 e6       	ldi	r24, 0x69	; 105
    2962:	95 e0       	ldi	r25, 0x05	; 5
    2964:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    2968:	25 e0       	ldi	r18, 0x05	; 5
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	6c e0       	ldi	r22, 0x0C	; 12
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	89 e6       	ldi	r24, 0x69	; 105
    2976:	95 e0       	ldi	r25, 0x05	; 5
    2978:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(5, mem.getLongFromMemory(MEMLOC_MODULE_ID), "module id test");
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	89 e6       	ldi	r24, 0x69	; 105
    2982:	95 e0       	ldi	r25, 0x05	; 5
    2984:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2988:	9b 01       	movw	r18, r22
    298a:	ac 01       	movw	r20, r24
    298c:	03 ee       	ldi	r16, 0xE3	; 227
    298e:	12 e0       	ldi	r17, 0x02	; 2
    2990:	65 e0       	ldi	r22, 0x05	; 5
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(343, mem.getLongFromMemory(MEMLOC_BOOTCOUNT), "bootcount test");
    299c:	68 e0       	ldi	r22, 0x08	; 8
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	89 e6       	ldi	r24, 0x69	; 105
    29a2:	95 e0       	ldi	r25, 0x05	; 5
    29a4:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    29a8:	9b 01       	movw	r18, r22
    29aa:	ac 01       	movw	r20, r24
    29ac:	02 ef       	ldi	r16, 0xF2	; 242
    29ae:	12 e0       	ldi	r17, 0x02	; 2
    29b0:	67 e5       	ldi	r22, 0x57	; 87
    29b2:	71 e0       	ldi	r23, 0x01	; 1
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(843, mem.getLongFromMemory(MEMLOC_VERSION), "version test");
    29bc:	64 e0       	ldi	r22, 0x04	; 4
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	89 e6       	ldi	r24, 0x69	; 105
    29c2:	95 e0       	ldi	r25, 0x05	; 5
    29c4:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    29c8:	9b 01       	movw	r18, r22
    29ca:	ac 01       	movw	r20, r24
    29cc:	01 e0       	ldi	r16, 0x01	; 1
    29ce:	13 e0       	ldi	r17, 0x03	; 3
    29d0:	6b e4       	ldi	r22, 0x4B	; 75
    29d2:	73 e0       	ldi	r23, 0x03	; 3
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>

	_currCycleNumber = 343; //Normally done in loop() setup
    29dc:	87 e5       	ldi	r24, 0x57	; 87
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	a0 e0       	ldi	r26, 0x00	; 0
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <_currCycleNumber>
    29e8:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <_currCycleNumber+0x1>
    29ec:	a0 93 1e 04 	sts	0x041E, r26	; 0x80041e <_currCycleNumber+0x2>
    29f0:	b0 93 1f 04 	sts	0x041F, r27	; 0x80041f <_currCycleNumber+0x3>
	
	//Test a single reading save
	//Simulate 5 entries already being present
	int expNoOfReadings = 5;
	mem.setLongToMemory(MEMLOC_READING_ENTRY_COUNT, expNoOfReadings);
    29f4:	25 e0       	ldi	r18, 0x05	; 5
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	64 e6       	ldi	r22, 0x64	; 100
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	89 e6       	ldi	r24, 0x69	; 105
    2a02:	95 e0       	ldi	r25, 0x05	; 5
    2a04:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	
	SensorData r1;
    2a08:	3e 01       	movw	r6, r28
    2a0a:	a5 e4       	ldi	r26, 0x45	; 69
    2a0c:	6a 0e       	add	r6, r26
    2a0e:	71 1c       	adc	r7, r1
    2a10:	68 94       	set
    2a12:	33 24       	eor	r3, r3
    2a14:	33 f8       	bld	r3, 3
    2a16:	f3 01       	movw	r30, r6
    2a18:	83 2d       	mov	r24, r3
    2a1a:	11 92       	st	Z+, r1
    2a1c:	8a 95       	dec	r24
    2a1e:	e9 f7       	brne	.-6      	; 0x2a1a <_Z11runSendTestv+0x1ec>
	r1.BattVoltage=1088;
    2a20:	80 e4       	ldi	r24, 0x40	; 64
    2a22:	94 e0       	ldi	r25, 0x04	; 4
    2a24:	d3 01       	movw	r26, r6
    2a26:	11 96       	adiw	r26, 0x01	; 1
    2a28:	9c 93       	st	X, r25
    2a2a:	8e 93       	st	-X, r24
	r1.Current=433;
    2a2c:	81 eb       	ldi	r24, 0xB1	; 177
    2a2e:	91 e0       	ldi	r25, 0x01	; 1
    2a30:	13 96       	adiw	r26, 0x03	; 3
    2a32:	9c 93       	st	X, r25
    2a34:	8e 93       	st	-X, r24
    2a36:	12 97       	sbiw	r26, 0x02	; 2
	r1.PVVoltage=1045;
    2a38:	85 e1       	ldi	r24, 0x15	; 21
    2a3a:	94 e0       	ldi	r25, 0x04	; 4
    2a3c:	15 96       	adiw	r26, 0x05	; 5
    2a3e:	9c 93       	st	X, r25
    2a40:	8e 93       	st	-X, r24
    2a42:	14 97       	sbiw	r26, 0x04	; 4
	r1.Temperature=308;
    2a44:	84 e3       	ldi	r24, 0x34	; 52
    2a46:	91 e0       	ldi	r25, 0x01	; 1
    2a48:	17 96       	adiw	r26, 0x07	; 7
    2a4a:	9c 93       	st	X, r25
    2a4c:	8e 93       	st	-X, r24
    2a4e:	16 97       	sbiw	r26, 0x06	; 6
	mem.appendSensorEntry(&r1);
    2a50:	b3 01       	movw	r22, r6
    2a52:	89 e6       	ldi	r24, 0x69	; 105
    2a54:	95 e0       	ldi	r25, 0x05	; 5
    2a56:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	
	//Check reading and should have increased entry count by now
	SensorData dszReading[1];
    2a5a:	4e 01       	movw	r8, r28
    2a5c:	bd e4       	ldi	r27, 0x4D	; 77
    2a5e:	8b 0e       	add	r8, r27
    2a60:	91 1c       	adc	r9, r1
    2a62:	f4 01       	movw	r30, r8
    2a64:	83 2d       	mov	r24, r3
    2a66:	11 92       	st	Z+, r1
    2a68:	8a 95       	dec	r24
    2a6a:	e9 f7       	brne	.-6      	; 0x2a66 <_Z11runSendTestv+0x238>
	unsigned long loadedTo;
	unsigned int loadCount = mem.loadSensorData(dszReading, 1, &loadedTo);
    2a6c:	9e 01       	movw	r18, r28
    2a6e:	2b 5a       	subi	r18, 0xAB	; 171
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	b4 01       	movw	r22, r8
    2a78:	89 e6       	ldi	r24, 0x69	; 105
    2a7a:	95 e0       	ldi	r25, 0x05	; 5
    2a7c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2a80:	6b 01       	movw	r12, r22
    2a82:	7c 01       	movw	r14, r24
	assert(++expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2a84:	64 e6       	ldi	r22, 0x64	; 100
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	89 e6       	ldi	r24, 0x69	; 105
    2a8a:	95 e0       	ldi	r25, 0x05	; 5
    2a8c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2a90:	9b 01       	movw	r18, r22
    2a92:	ac 01       	movw	r20, r24
    2a94:	0e e0       	ldi	r16, 0x0E	; 14
    2a96:	13 e0       	ldi	r17, 0x03	; 3
    2a98:	66 e0       	ldi	r22, 0x06	; 6
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(1, loadCount, "load count");
    2aa4:	a7 01       	movw	r20, r14
    2aa6:	96 01       	movw	r18, r12
    2aa8:	44 27       	eor	r20, r20
    2aaa:	55 27       	eor	r21, r21
    2aac:	09 e1       	ldi	r16, 0x19	; 25
    2aae:	13 e0       	ldi	r17, 0x03	; 3
    2ab0:	61 e0       	ldi	r22, 0x01	; 1
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertReadingsIdentical(r1, (SensorData)dszReading[0]);
    2abc:	d4 01       	movw	r26, r8
    2abe:	ac 90       	ld	r10, X
    2ac0:	11 96       	adiw	r26, 0x01	; 1
    2ac2:	bc 90       	ld	r11, X
    2ac4:	11 97       	sbiw	r26, 0x01	; 1
    2ac6:	12 96       	adiw	r26, 0x02	; 2
    2ac8:	cc 90       	ld	r12, X
    2aca:	12 97       	sbiw	r26, 0x02	; 2
    2acc:	13 96       	adiw	r26, 0x03	; 3
    2ace:	dc 90       	ld	r13, X
    2ad0:	13 97       	sbiw	r26, 0x03	; 3
    2ad2:	14 96       	adiw	r26, 0x04	; 4
    2ad4:	ec 90       	ld	r14, X
    2ad6:	14 97       	sbiw	r26, 0x04	; 4
    2ad8:	15 96       	adiw	r26, 0x05	; 5
    2ada:	fc 90       	ld	r15, X
    2adc:	15 97       	sbiw	r26, 0x05	; 5
    2ade:	16 96       	adiw	r26, 0x06	; 6
    2ae0:	0c 91       	ld	r16, X
    2ae2:	16 97       	sbiw	r26, 0x06	; 6
    2ae4:	17 96       	adiw	r26, 0x07	; 7
    2ae6:	1c 91       	ld	r17, X
    2ae8:	f3 01       	movw	r30, r6
    2aea:	20 81       	ld	r18, Z
    2aec:	31 81       	ldd	r19, Z+1	; 0x01
    2aee:	42 81       	ldd	r20, Z+2	; 0x02
    2af0:	53 81       	ldd	r21, Z+3	; 0x03
    2af2:	64 81       	ldd	r22, Z+4	; 0x04
    2af4:	75 81       	ldd	r23, Z+5	; 0x05
    2af6:	86 81       	ldd	r24, Z+6	; 0x06
    2af8:	97 81       	ldd	r25, Z+7	; 0x07
    2afa:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>

	SensorData r2;
    2afe:	4e 01       	movw	r8, r28
    2b00:	f9 e5       	ldi	r31, 0x59	; 89
    2b02:	8f 0e       	add	r8, r31
    2b04:	91 1c       	adc	r9, r1
    2b06:	d4 01       	movw	r26, r8
    2b08:	e3 2d       	mov	r30, r3
    2b0a:	1d 92       	st	X+, r1
    2b0c:	ea 95       	dec	r30
    2b0e:	e9 f7       	brne	.-6      	; 0x2b0a <_Z11runSendTestv+0x2dc>
	r2.BattVoltage=7456;
    2b10:	80 e2       	ldi	r24, 0x20	; 32
    2b12:	9d e1       	ldi	r25, 0x1D	; 29
    2b14:	d4 01       	movw	r26, r8
    2b16:	11 96       	adiw	r26, 0x01	; 1
    2b18:	9c 93       	st	X, r25
    2b1a:	8e 93       	st	-X, r24
	r2.Current=1785;
    2b1c:	89 ef       	ldi	r24, 0xF9	; 249
    2b1e:	96 e0       	ldi	r25, 0x06	; 6
    2b20:	13 96       	adiw	r26, 0x03	; 3
    2b22:	9c 93       	st	X, r25
    2b24:	8e 93       	st	-X, r24
    2b26:	12 97       	sbiw	r26, 0x02	; 2
	r2.PVVoltage=8943;
    2b28:	8f ee       	ldi	r24, 0xEF	; 239
    2b2a:	92 e2       	ldi	r25, 0x22	; 34
    2b2c:	15 96       	adiw	r26, 0x05	; 5
    2b2e:	9c 93       	st	X, r25
    2b30:	8e 93       	st	-X, r24
    2b32:	14 97       	sbiw	r26, 0x04	; 4
	r2.Temperature=1866;
    2b34:	8a e4       	ldi	r24, 0x4A	; 74
    2b36:	97 e0       	ldi	r25, 0x07	; 7
    2b38:	17 96       	adiw	r26, 0x07	; 7
    2b3a:	9c 93       	st	X, r25
    2b3c:	8e 93       	st	-X, r24
    2b3e:	16 97       	sbiw	r26, 0x06	; 6
	//r2.ErrorChar='T';
	mem.appendSensorEntry(&r2);
    2b40:	b4 01       	movw	r22, r8
    2b42:	89 e6       	ldi	r24, 0x69	; 105
    2b44:	95 e0       	ldi	r25, 0x05	; 5
    2b46:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	
	
	//Check reading and should have increased entry count by now
	SensorData dszReading2[1];
    2b4a:	2e 01       	movw	r4, r28
    2b4c:	b1 e6       	ldi	r27, 0x61	; 97
    2b4e:	4b 0e       	add	r4, r27
    2b50:	51 1c       	adc	r5, r1
    2b52:	f2 01       	movw	r30, r4
    2b54:	11 92       	st	Z+, r1
    2b56:	3a 94       	dec	r3
    2b58:	e9 f7       	brne	.-6      	; 0x2b54 <_Z11runSendTestv+0x326>
	loadCount = mem.loadSensorData(dszReading2, 1, &loadedTo);
    2b5a:	9e 01       	movw	r18, r28
    2b5c:	2b 5a       	subi	r18, 0xAB	; 171
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	b2 01       	movw	r22, r4
    2b66:	89 e6       	ldi	r24, 0x69	; 105
    2b68:	95 e0       	ldi	r25, 0x05	; 5
    2b6a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2b6e:	6b 01       	movw	r12, r22
    2b70:	7c 01       	movw	r14, r24
	assert(++expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2b72:	64 e6       	ldi	r22, 0x64	; 100
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	89 e6       	ldi	r24, 0x69	; 105
    2b78:	95 e0       	ldi	r25, 0x05	; 5
    2b7a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2b7e:	9b 01       	movw	r18, r22
    2b80:	ac 01       	movw	r20, r24
    2b82:	0e e0       	ldi	r16, 0x0E	; 14
    2b84:	13 e0       	ldi	r17, 0x03	; 3
    2b86:	67 e0       	ldi	r22, 0x07	; 7
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(1, loadCount, "load count");
    2b92:	a7 01       	movw	r20, r14
    2b94:	96 01       	movw	r18, r12
    2b96:	44 27       	eor	r20, r20
    2b98:	55 27       	eor	r21, r21
    2b9a:	09 e1       	ldi	r16, 0x19	; 25
    2b9c:	13 e0       	ldi	r17, 0x03	; 3
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	//assert(r2.Sent, (byte)0);//TODO
	assertReadingsIdentical(r2, (SensorData)dszReading2[0]);
    2baa:	d2 01       	movw	r26, r4
    2bac:	ac 90       	ld	r10, X
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	bc 90       	ld	r11, X
    2bb2:	11 97       	sbiw	r26, 0x01	; 1
    2bb4:	12 96       	adiw	r26, 0x02	; 2
    2bb6:	cc 90       	ld	r12, X
    2bb8:	12 97       	sbiw	r26, 0x02	; 2
    2bba:	13 96       	adiw	r26, 0x03	; 3
    2bbc:	dc 90       	ld	r13, X
    2bbe:	13 97       	sbiw	r26, 0x03	; 3
    2bc0:	14 96       	adiw	r26, 0x04	; 4
    2bc2:	ec 90       	ld	r14, X
    2bc4:	14 97       	sbiw	r26, 0x04	; 4
    2bc6:	15 96       	adiw	r26, 0x05	; 5
    2bc8:	fc 90       	ld	r15, X
    2bca:	15 97       	sbiw	r26, 0x05	; 5
    2bcc:	16 96       	adiw	r26, 0x06	; 6
    2bce:	0c 91       	ld	r16, X
    2bd0:	16 97       	sbiw	r26, 0x06	; 6
    2bd2:	17 96       	adiw	r26, 0x07	; 7
    2bd4:	1c 91       	ld	r17, X
    2bd6:	f4 01       	movw	r30, r8
    2bd8:	20 81       	ld	r18, Z
    2bda:	31 81       	ldd	r19, Z+1	; 0x01
    2bdc:	42 81       	ldd	r20, Z+2	; 0x02
    2bde:	53 81       	ldd	r21, Z+3	; 0x03
    2be0:	64 81       	ldd	r22, Z+4	; 0x04
    2be2:	75 81       	ldd	r23, Z+5	; 0x05
    2be4:	86 81       	ldd	r24, Z+6	; 0x06
    2be6:	97 81       	ldd	r25, Z+7	; 0x07
    2be8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	
	volatile int stop5=0;
    2bec:	ab 96       	adiw	r28, 0x2b	; 43
    2bee:	1f ae       	std	Y+63, r1	; 0x3f
    2bf0:	1e ae       	std	Y+62, r1	; 0x3e
    2bf2:	ab 97       	sbiw	r28, 0x2b	; 43
	
	//Now get last 2 readings and ensure order preserved
	SensorData dszReadings[2];
    2bf4:	2e 01       	movw	r4, r28
    2bf6:	fb e6       	ldi	r31, 0x6B	; 107
    2bf8:	4f 0e       	add	r4, r31
    2bfa:	51 1c       	adc	r5, r1
    2bfc:	80 e1       	ldi	r24, 0x10	; 16
    2bfe:	d2 01       	movw	r26, r4
    2c00:	1d 92       	st	X+, r1
    2c02:	8a 95       	dec	r24
    2c04:	e9 f7       	brne	.-6      	; 0x2c00 <_Z11runSendTestv+0x3d2>
	loadCount = mem.loadSensorData(dszReadings, 2, &loadedTo);
    2c06:	9e 01       	movw	r18, r28
    2c08:	2b 5a       	subi	r18, 0xAB	; 171
    2c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0c:	42 e0       	ldi	r20, 0x02	; 2
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	b2 01       	movw	r22, r4
    2c12:	89 e6       	ldi	r24, 0x69	; 105
    2c14:	95 e0       	ldi	r25, 0x05	; 5
    2c16:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2c1a:	6b 01       	movw	r12, r22
    2c1c:	7c 01       	movw	r14, r24
	assert(expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2c1e:	64 e6       	ldi	r22, 0x64	; 100
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	89 e6       	ldi	r24, 0x69	; 105
    2c24:	95 e0       	ldi	r25, 0x05	; 5
    2c26:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2c2a:	9b 01       	movw	r18, r22
    2c2c:	ac 01       	movw	r20, r24
    2c2e:	0e e0       	ldi	r16, 0x0E	; 14
    2c30:	13 e0       	ldi	r17, 0x03	; 3
    2c32:	67 e0       	ldi	r22, 0x07	; 7
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assert(2, loadCount, "load count");
    2c3e:	a7 01       	movw	r20, r14
    2c40:	96 01       	movw	r18, r12
    2c42:	44 27       	eor	r20, r20
    2c44:	55 27       	eor	r21, r21
    2c46:	09 e1       	ldi	r16, 0x19	; 25
    2c48:	13 e0       	ldi	r17, 0x03	; 3
    2c4a:	62 e0       	ldi	r22, 0x02	; 2
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	assertReadingsIdentical(r1, (SensorData)dszReadings[0]); //Make sure 1 isn't clobbered !
    2c56:	f2 01       	movw	r30, r4
    2c58:	a0 80       	ld	r10, Z
    2c5a:	b1 80       	ldd	r11, Z+1	; 0x01
    2c5c:	c2 80       	ldd	r12, Z+2	; 0x02
    2c5e:	d3 80       	ldd	r13, Z+3	; 0x03
    2c60:	e4 80       	ldd	r14, Z+4	; 0x04
    2c62:	f5 80       	ldd	r15, Z+5	; 0x05
    2c64:	06 81       	ldd	r16, Z+6	; 0x06
    2c66:	17 81       	ldd	r17, Z+7	; 0x07
    2c68:	d3 01       	movw	r26, r6
    2c6a:	2c 91       	ld	r18, X
    2c6c:	11 96       	adiw	r26, 0x01	; 1
    2c6e:	3c 91       	ld	r19, X
    2c70:	11 97       	sbiw	r26, 0x01	; 1
    2c72:	12 96       	adiw	r26, 0x02	; 2
    2c74:	4c 91       	ld	r20, X
    2c76:	12 97       	sbiw	r26, 0x02	; 2
    2c78:	13 96       	adiw	r26, 0x03	; 3
    2c7a:	5c 91       	ld	r21, X
    2c7c:	13 97       	sbiw	r26, 0x03	; 3
    2c7e:	14 96       	adiw	r26, 0x04	; 4
    2c80:	6c 91       	ld	r22, X
    2c82:	14 97       	sbiw	r26, 0x04	; 4
    2c84:	15 96       	adiw	r26, 0x05	; 5
    2c86:	7c 91       	ld	r23, X
    2c88:	15 97       	sbiw	r26, 0x05	; 5
    2c8a:	16 96       	adiw	r26, 0x06	; 6
    2c8c:	8c 91       	ld	r24, X
    2c8e:	16 97       	sbiw	r26, 0x06	; 6
    2c90:	17 96       	adiw	r26, 0x07	; 7
    2c92:	9c 91       	ld	r25, X
    2c94:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r2, (SensorData)dszReadings[1]);
    2c98:	f2 01       	movw	r30, r4
    2c9a:	a0 84       	ldd	r10, Z+8	; 0x08
    2c9c:	b1 84       	ldd	r11, Z+9	; 0x09
    2c9e:	c2 84       	ldd	r12, Z+10	; 0x0a
    2ca0:	d3 84       	ldd	r13, Z+11	; 0x0b
    2ca2:	e4 84       	ldd	r14, Z+12	; 0x0c
    2ca4:	f5 84       	ldd	r15, Z+13	; 0x0d
    2ca6:	06 85       	ldd	r16, Z+14	; 0x0e
    2ca8:	17 85       	ldd	r17, Z+15	; 0x0f
    2caa:	d4 01       	movw	r26, r8
    2cac:	2c 91       	ld	r18, X
    2cae:	11 96       	adiw	r26, 0x01	; 1
    2cb0:	3c 91       	ld	r19, X
    2cb2:	11 97       	sbiw	r26, 0x01	; 1
    2cb4:	12 96       	adiw	r26, 0x02	; 2
    2cb6:	4c 91       	ld	r20, X
    2cb8:	12 97       	sbiw	r26, 0x02	; 2
    2cba:	13 96       	adiw	r26, 0x03	; 3
    2cbc:	5c 91       	ld	r21, X
    2cbe:	13 97       	sbiw	r26, 0x03	; 3
    2cc0:	14 96       	adiw	r26, 0x04	; 4
    2cc2:	6c 91       	ld	r22, X
    2cc4:	14 97       	sbiw	r26, 0x04	; 4
    2cc6:	15 96       	adiw	r26, 0x05	; 5
    2cc8:	7c 91       	ld	r23, X
    2cca:	15 97       	sbiw	r26, 0x05	; 5
    2ccc:	16 96       	adiw	r26, 0x06	; 6
    2cce:	8c 91       	ld	r24, X
    2cd0:	16 97       	sbiw	r26, 0x06	; 6
    2cd2:	17 96       	adiw	r26, 0x07	; 7
    2cd4:	9c 91       	ld	r25, X
    2cd6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_Z23assertReadingsIdentical10SensorDataS_>
	
	//Before GPRS sending, just verify last-sent-to flag value
	assert(5, mem.getLongFromMemory(MEMLOC_SENT_UPTO));
    2cda:	6c e0       	ldi	r22, 0x0C	; 12
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	89 e6       	ldi	r24, 0x69	; 105
    2ce0:	95 e0       	ldi	r25, 0x05	; 5
    2ce2:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2ce6:	9b 01       	movw	r18, r22
    2ce8:	ac 01       	movw	r20, r24
    2cea:	00 e0       	ldi	r16, 0x00	; 0
    2cec:	10 e0       	ldi	r17, 0x00	; 0
    2cee:	65 e0       	ldi	r22, 0x05	; 5
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>

	//Send another batch of readings
	execTransmitReadings(_dailyCycleData);
    2cfa:	88 e0       	ldi	r24, 0x08	; 8
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z20execTransmitReadingsR14DailyCycleData>
	
	//First check data sent is as expected
	String actualStr = gsm.MOCK_DATA_SENT_GPRS;
    2d02:	0f 2e       	mov	r0, r31
    2d04:	f8 e4       	ldi	r31, 0x48	; 72
    2d06:	ef 2e       	mov	r14, r31
    2d08:	f4 e0       	ldi	r31, 0x04	; 4
    2d0a:	ff 2e       	mov	r15, r31
    2d0c:	f0 2d       	mov	r31, r0
    2d0e:	f7 01       	movw	r30, r14
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	ce 01       	movw	r24, r28
    2d16:	85 58       	subi	r24, 0x85	; 133
    2d18:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1a:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN6StringC1EPKc>
	String expectedStr = "5-343-7-21-99-1088043310450308,7456178589431866";
    2d1e:	64 e2       	ldi	r22, 0x24	; 36
    2d20:	73 e0       	ldi	r23, 0x03	; 3
    2d22:	ce 01       	movw	r24, r28
    2d24:	8f 57       	subi	r24, 0x7F	; 127
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN6StringC1EPKc>
	assertRealStringsIdentical(expectedStr, actualStr);
    2d2c:	be 01       	movw	r22, r28
    2d2e:	65 58       	subi	r22, 0x85	; 133
    2d30:	7f 4f       	sbci	r23, 0xFF	; 255
    2d32:	ce 01       	movw	r24, r28
    2d34:	8f 57       	subi	r24, 0x7F	; 127
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_Z26assertRealStringsIdenticalRK6StringS1_>

volatile int fake=1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	c9 57       	subi	r28, 0x79	; 121
    2d42:	df 4f       	sbci	r29, 0xFF	; 255
    2d44:	99 83       	std	Y+1, r25	; 0x01
    2d46:	88 83       	st	Y, r24
    2d48:	c7 58       	subi	r28, 0x87	; 135
    2d4a:	d0 40       	sbci	r29, 0x00	; 0
	//Ensure sent-to flag updated
	assert(5+2, mem.getLongFromMemory(MEMLOC_SENT_UPTO));
    2d4c:	6c e0       	ldi	r22, 0x0C	; 12
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	89 e6       	ldi	r24, 0x69	; 105
    2d52:	95 e0       	ldi	r25, 0x05	; 5
    2d54:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2d58:	9b 01       	movw	r18, r22
    2d5a:	ac 01       	movw	r20, r24
    2d5c:	67 e0       	ldi	r22, 0x07	; 7
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	//Send again. No data but still expect to receive base-level data.
	DailyCycleData reset;
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e7 57       	subi	r30, 0x77	; 119
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	81 e1       	ldi	r24, 0x11	; 17
    2d70:	df 01       	movw	r26, r30
    2d72:	1d 92       	st	X+, r1
    2d74:	8a 95       	dec	r24
    2d76:	e9 f7       	brne	.-6      	; 0x2d72 <_Z11runSendTestv+0x544>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e4       	ldi	r25, 0x40	; 64
    2d7c:	90 8b       	std	Z+16, r25	; 0x10
    2d7e:	87 87       	std	Z+15, r24	; 0x0f
	_dailyCycleData = reset;
    2d80:	81 e1       	ldi	r24, 0x11	; 17
    2d82:	a8 e0       	ldi	r26, 0x08	; 8
    2d84:	b1 e0       	ldi	r27, 0x01	; 1
    2d86:	01 90       	ld	r0, Z+
    2d88:	0d 92       	st	X+, r0
    2d8a:	8a 95       	dec	r24
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <_Z11runSendTestv+0x558>
	gsm.MOCK_DATA_SENT_GPRS = (""); //reset mock
    2d8e:	0f 2e       	mov	r0, r31
    2d90:	f4 e8       	ldi	r31, 0x84	; 132
    2d92:	cf 2e       	mov	r12, r31
    2d94:	f3 e0       	ldi	r31, 0x03	; 3
    2d96:	df 2e       	mov	r13, r31
    2d98:	f0 2d       	mov	r31, r0
    2d9a:	f7 01       	movw	r30, r14
    2d9c:	d1 82       	std	Z+1, r13	; 0x01
    2d9e:	c0 82       	st	Z, r12
	execTransmitReadings(_dailyCycleData);
    2da0:	88 e0       	ldi	r24, 0x08	; 8
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z20execTransmitReadingsR14DailyCycleData>
	assertRealStringsIdentical("5-343-7-21-99", gsm.MOCK_DATA_SENT_GPRS);
    2da8:	d7 01       	movw	r26, r14
    2daa:	6d 91       	ld	r22, X+
    2dac:	7c 91       	ld	r23, X
    2dae:	ce 01       	movw	r24, r28
    2db0:	07 96       	adiw	r24, 0x07	; 7
    2db2:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN6StringC1EPKc>
    2db6:	64 e5       	ldi	r22, 0x54	; 84
    2db8:	73 e0       	ldi	r23, 0x03	; 3
    2dba:	ce 01       	movw	r24, r28
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN6StringC1EPKc>
    2dc2:	be 01       	movw	r22, r28
    2dc4:	69 5f       	subi	r22, 0xF9	; 249
    2dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc8:	ce 01       	movw	r24, r28
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_Z26assertRealStringsIdenticalRK6StringS1_>
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN6StringD1Ev>
    2dd8:	ce 01       	movw	r24, r28
    2dda:	07 96       	adiw	r24, 0x07	; 7
    2ddc:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN6StringD1Ev>
	assert(5+2, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
    2de0:	6c e0       	ldi	r22, 0x0C	; 12
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	89 e6       	ldi	r24, 0x69	; 105
    2de6:	95 e0       	ldi	r25, 0x05	; 5
    2de8:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2dec:	9b 01       	movw	r18, r22
    2dee:	ac 01       	movw	r20, r24
    2df0:	67 e0       	ldi	r22, 0x07	; 7
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	//Add a new reading and ONLY that reading should've been sent
	gsm.MOCK_DATA_SENT_GPRS = (""); //reset mock
    2dfc:	f7 01       	movw	r30, r14
    2dfe:	d1 82       	std	Z+1, r13	; 0x01
    2e00:	c0 82       	st	Z, r12
	SensorData newReading = createMockReading();
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z17createMockReadingbc>
    2e0a:	c6 56       	subi	r28, 0x66	; 102
    2e0c:	df 4f       	sbci	r29, 0xFF	; 255
    2e0e:	28 83       	st	Y, r18
    2e10:	ca 59       	subi	r28, 0x9A	; 154
    2e12:	d0 40       	sbci	r29, 0x00	; 0
    2e14:	c5 56       	subi	r28, 0x65	; 101
    2e16:	df 4f       	sbci	r29, 0xFF	; 255
    2e18:	38 83       	st	Y, r19
    2e1a:	cb 59       	subi	r28, 0x9B	; 155
    2e1c:	d0 40       	sbci	r29, 0x00	; 0
    2e1e:	c4 56       	subi	r28, 0x64	; 100
    2e20:	df 4f       	sbci	r29, 0xFF	; 255
    2e22:	48 83       	st	Y, r20
    2e24:	cc 59       	subi	r28, 0x9C	; 156
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	c3 56       	subi	r28, 0x63	; 99
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	58 83       	st	Y, r21
    2e2e:	cd 59       	subi	r28, 0x9D	; 157
    2e30:	d0 40       	sbci	r29, 0x00	; 0
    2e32:	c2 56       	subi	r28, 0x62	; 98
    2e34:	df 4f       	sbci	r29, 0xFF	; 255
    2e36:	68 83       	st	Y, r22
    2e38:	ce 59       	subi	r28, 0x9E	; 158
    2e3a:	d0 40       	sbci	r29, 0x00	; 0
    2e3c:	c1 56       	subi	r28, 0x61	; 97
    2e3e:	df 4f       	sbci	r29, 0xFF	; 255
    2e40:	78 83       	st	Y, r23
    2e42:	cf 59       	subi	r28, 0x9F	; 159
    2e44:	d0 40       	sbci	r29, 0x00	; 0
    2e46:	c0 56       	subi	r28, 0x60	; 96
    2e48:	df 4f       	sbci	r29, 0xFF	; 255
    2e4a:	88 83       	st	Y, r24
    2e4c:	c0 5a       	subi	r28, 0xA0	; 160
    2e4e:	d0 40       	sbci	r29, 0x00	; 0
    2e50:	cf 55       	subi	r28, 0x5F	; 95
    2e52:	df 4f       	sbci	r29, 0xFF	; 255
    2e54:	98 83       	st	Y, r25
    2e56:	c1 5a       	subi	r28, 0xA1	; 161
    2e58:	d0 40       	sbci	r29, 0x00	; 0
	execTransmitReadings(_dailyCycleData);
    2e5a:	88 e0       	ldi	r24, 0x08	; 8
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z20execTransmitReadingsR14DailyCycleData>
	volatile int len = strlen(gsm.MOCK_DATA_SENT_GPRS);
    2e62:	f7 01       	movw	r30, r14
    2e64:	a0 81       	ld	r26, Z
    2e66:	b1 81       	ldd	r27, Z+1	; 0x01
    2e68:	fd 01       	movw	r30, r26
    2e6a:	01 90       	ld	r0, Z+
    2e6c:	00 20       	and	r0, r0
    2e6e:	e9 f7       	brne	.-6      	; 0x2e6a <_Z11runSendTestv+0x63c>
    2e70:	31 97       	sbiw	r30, 0x01	; 1
    2e72:	ea 1b       	sub	r30, r26
    2e74:	fb 0b       	sbc	r31, r27
    2e76:	ce 55       	subi	r28, 0x5E	; 94
    2e78:	df 4f       	sbci	r29, 0xFF	; 255
    2e7a:	f9 83       	std	Y+1, r31	; 0x01
    2e7c:	e8 83       	st	Y, r30
    2e7e:	c2 5a       	subi	r28, 0xA2	; 162
    2e80:	d0 40       	sbci	r29, 0x00	; 0
	assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS) < 35); //Could also check for commas
    2e82:	fd 01       	movw	r30, r26
    2e84:	01 90       	ld	r0, Z+
    2e86:	00 20       	and	r0, r0
    2e88:	e9 f7       	brne	.-6      	; 0x2e84 <_Z11runSendTestv+0x656>
    2e8a:	31 97       	sbiw	r30, 0x01	; 1
    2e8c:	ea 1b       	sub	r30, r26
    2e8e:	fb 0b       	sbc	r31, r27
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	b3 97       	sbiw	r30, 0x23	; 35
    2e94:	08 f0       	brcs	.+2      	; 0x2e98 <_Z11runSendTestv+0x66a>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
	assert(5+3, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
    2e9c:	6c e0       	ldi	r22, 0x0C	; 12
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	89 e6       	ldi	r24, 0x69	; 105
    2ea2:	95 e0       	ldi	r25, 0x05	; 5
    2ea4:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2ea8:	9b 01       	movw	r18, r22
    2eaa:	ac 01       	movw	r20, r24
    2eac:	00 e0       	ldi	r16, 0x00	; 0
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	68 e0       	ldi	r22, 0x08	; 8
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	//Send another batch of readings
	execTransmitReadings(_dailyCycleData);
	
	//First check data sent is as expected
	String actualStr = gsm.MOCK_DATA_SENT_GPRS;
	String expectedStr = "5-343-7-21-99-1088043310450308,7456178589431866";
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	8f 57       	subi	r24, 0x7F	; 127
    2ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec2:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN6StringD1Ev>

	//Send another batch of readings
	execTransmitReadings(_dailyCycleData);
	
	//First check data sent is as expected
	String actualStr = gsm.MOCK_DATA_SENT_GPRS;
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	85 58       	subi	r24, 0x85	; 133
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN6StringD1Ev>
	SensorData newReading = createMockReading();
	execTransmitReadings(_dailyCycleData);
	volatile int len = strlen(gsm.MOCK_DATA_SENT_GPRS);
	assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS) < 35); //Could also check for commas
	assert(5+3, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
}
    2ed0:	c9 55       	subi	r28, 0x59	; 89
    2ed2:	df 4f       	sbci	r29, 0xFF	; 255
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	df 90       	pop	r13
    2eec:	cf 90       	pop	r12
    2eee:	bf 90       	pop	r11
    2ef0:	af 90       	pop	r10
    2ef2:	9f 90       	pop	r9
    2ef4:	8f 90       	pop	r8
    2ef6:	7f 90       	pop	r7
    2ef8:	6f 90       	pop	r6
    2efa:	5f 90       	pop	r5
    2efc:	4f 90       	pop	r4
    2efe:	3f 90       	pop	r3
    2f00:	08 95       	ret

00002f02 <_Z16runFullCycleTestv>:
	
//TODO: Test timing flags

uint16_t _testFullCycleLoopCount=0;
boolean runFullCycleTest()
{	
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
    2f0a:	0f 93       	push	r16
    2f0c:	1f 93       	push	r17
    2f0e:	cf 93       	push	r28
    2f10:	df 93       	push	r29
	//TODO: Calculate time per cycle
	
	if(++_testFullCycleLoopCount < 10) {
    2f12:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_testFullCycleLoopCount>
    2f16:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <_testFullCycleLoopCount+0x1>
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <_testFullCycleLoopCount+0x1>
    2f20:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <_testFullCycleLoopCount>
    2f24:	0a 97       	sbiw	r24, 0x0a	; 10
    2f26:	18 f4       	brcc	.+6      	; 0x2f2e <_Z16runFullCycleTestv+0x2c>
	
		//Call normal looping function
		boolean doContinue = loopCycle();
    2f28:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_Z9loopCyclev>
		return true;
    2f2c:	66 c0       	rjmp	.+204    	; 0x2ffa <_Z16runFullCycleTestv+0xf8>
    2f2e:	c1 2c       	mov	r12, r1
    2f30:	d1 2c       	mov	r13, r1
	}
		
	boolean ret = true;
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
    2f32:	84 e6       	ldi	r24, 0x64	; 100
    2f34:	c8 16       	cp	r12, r24
    2f36:	d1 04       	cpc	r13, r1
    2f38:	0c f0       	brlt	.+2      	; 0x2f3c <_Z16runFullCycleTestv+0x3a>
    2f3a:	5f c0       	rjmp	.+190    	; 0x2ffa <_Z16runFullCycleTestv+0xf8>
    2f3c:	e1 2c       	mov	r14, r1
    2f3e:	f1 2c       	mov	r15, r1
	{
		//Let 23 hours pass, should end up with ?? readings
		for(int hrCtr=0;hrCtr<23;hrCtr++)
    2f40:	87 e1       	ldi	r24, 0x17	; 23
    2f42:	e8 16       	cp	r14, r24
    2f44:	f1 04       	cpc	r15, r1
    2f46:	94 f5       	brge	.+100    	; 0x2fac <_Z16runFullCycleTestv+0xaa>
		{
			loopCycle();
    2f48:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_Z9loopCyclev>
			assert(0, strlen(gsm.MOCK_DATA_SENT_GPRS));
    2f4c:	c8 e4       	ldi	r28, 0x48	; 72
    2f4e:	d4 e0       	ldi	r29, 0x04	; 4
    2f50:	a8 81       	ld	r26, Y
    2f52:	b9 81       	ldd	r27, Y+1	; 0x01
    2f54:	fd 01       	movw	r30, r26
    2f56:	01 90       	ld	r0, Z+
    2f58:	00 20       	and	r0, r0
    2f5a:	e9 f7       	brne	.-6      	; 0x2f56 <_Z16runFullCycleTestv+0x54>
    2f5c:	31 97       	sbiw	r30, 0x01	; 1
    2f5e:	9f 01       	movw	r18, r30
    2f60:	2a 1b       	sub	r18, r26
    2f62:	3b 0b       	sbc	r19, r27
    2f64:	40 e0       	ldi	r20, 0x00	; 0
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	00 e0       	ldi	r16, 0x00	; 0
    2f6a:	10 e0       	ldi	r17, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	cb 01       	movw	r24, r22
    2f72:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
			assert(0, strlen(gsm.MOCK_DATA_SENT_SMS));
    2f76:	aa 81       	ldd	r26, Y+2	; 0x02
    2f78:	bb 81       	ldd	r27, Y+3	; 0x03
    2f7a:	fd 01       	movw	r30, r26
    2f7c:	01 90       	ld	r0, Z+
    2f7e:	00 20       	and	r0, r0
    2f80:	e9 f7       	brne	.-6      	; 0x2f7c <_Z16runFullCycleTestv+0x7a>
    2f82:	31 97       	sbiw	r30, 0x01	; 1
    2f84:	9f 01       	movw	r18, r30
    2f86:	2a 1b       	sub	r18, r26
    2f88:	3b 0b       	sbc	r19, r27
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	cb 01       	movw	r24, r22
    2f94:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
			assertTrue(!_isDailyCycle);
    2f98:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <_isDailyCycle>
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	89 27       	eor	r24, r25
    2fa0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
	{
		//Let 23 hours pass, should end up with ?? readings
		for(int hrCtr=0;hrCtr<23;hrCtr++)
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	e8 1a       	sub	r14, r24
    2fa8:	f8 0a       	sbc	r15, r24
    2faa:	ca cf       	rjmp	.-108    	; 0x2f40 <_Z16runFullCycleTestv+0x3e>
			assert(0, strlen(gsm.MOCK_DATA_SENT_SMS));
			assertTrue(!_isDailyCycle);
		}
		
		//EOD loop - after 1 day, should've transmitted
		loopCycle();
    2fac:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_Z9loopCyclev>
		assertTrue(_isDailyCycle);
    2fb0:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_isDailyCycle>
    2fb4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS)>0);
    2fb8:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <gsm>
    2fbc:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <gsm+0x1>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 81       	ld	r25, Z
    2fc4:	91 11       	cpse	r25, r1
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <_Z16runFullCycleTestv+0xc8>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_SMS)==0);
    2fce:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <gsm+0x2>
    2fd2:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <gsm+0x3>
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 81       	ld	r25, Z
    2fda:	91 11       	cpse	r25, r1
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z10assertTrueb>

		//Reset
		gsm.MOCK_DATA_SENT_GPRS = "";
    2fe2:	e8 e4       	ldi	r30, 0x48	; 72
    2fe4:	f4 e0       	ldi	r31, 0x04	; 4
    2fe6:	84 e8       	ldi	r24, 0x84	; 132
    2fe8:	93 e0       	ldi	r25, 0x03	; 3
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24
		gsm.MOCK_DATA_SENT_SMS = "";
    2fee:	93 83       	std	Z+3, r25	; 0x03
    2ff0:	82 83       	std	Z+2, r24	; 0x02
	}
		
	boolean ret = true;
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
    2ff2:	8f ef       	ldi	r24, 0xFF	; 255
    2ff4:	c8 1a       	sub	r12, r24
    2ff6:	d8 0a       	sbc	r13, r24
    2ff8:	9c cf       	rjmp	.-200    	; 0x2f32 <_Z16runFullCycleTestv+0x30>
		gsm.MOCK_DATA_SENT_GPRS = "";
		gsm.MOCK_DATA_SENT_SMS = "";
	}
	
	return ret;
}
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	08 95       	ret

0000300e <_Z12runTimerTestv>:

#endif //End define UNIT_TESTS

boolean runTimerTest(){
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	a5 97       	sbiw	r28, 0x25	; 37
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
	
	Timing testTimer(true, 3*60); //say module wakes every 3 minutes
    3026:	24 eb       	ldi	r18, 0xB4	; 180
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	61 e0       	ldi	r22, 0x01	; 1
    3030:	ce 01       	movw	r24, r28
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	0e 94 16 1b 	call	0x362c	; 0x362c <_ZN6TimingC1Ehm>
	
	testTimer.MOCK_ADVANCE_TIME(9*1000);  //not early
    3038:	48 e2       	ldi	r20, 0x28	; 40
    303a:	53 e2       	ldi	r21, 0x23	; 35
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	70 e0       	ldi	r23, 0x00	; 0
    3040:	ce 01       	movw	r24, r28
    3042:	01 96       	adiw	r24, 0x01	; 1
    3044:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    3048:	ce 01       	movw	r24, r28
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <_ZN6Timing11onCycleLoopEv>
	assert(false, testTimer._at10Secs);
    3050:	2d 81       	ldd	r18, Y+5	; 0x05
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	00 e0       	ldi	r16, 0x00	; 0
    305a:	10 e0       	ldi	r17, 0x00	; 0
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	cb 01       	movw	r24, r22
    3062:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	testTimer.MOCK_ADVANCE_TIME(11*1000); //even if time passed
    3066:	48 ef       	ldi	r20, 0xF8	; 248
    3068:	5a e2       	ldi	r21, 0x2A	; 42
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	ce 01       	movw	r24, r28
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    3076:	ce 01       	movw	r24, r28
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <_ZN6Timing11onCycleLoopEv>
	assert(true, testTimer._at10Secs);
    307e:	2d 81       	ldd	r18, Y+5	; 0x05
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	61 e0       	ldi	r22, 0x01	; 1
    3088:	70 e0       	ldi	r23, 0x00	; 0
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>
	
	testTimer.MOCK_ADVANCE_TIME(12*1000); //only once
    3092:	40 ee       	ldi	r20, 0xE0	; 224
    3094:	5e e2       	ldi	r21, 0x2E	; 46
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	70 e0       	ldi	r23, 0x00	; 0
    309a:	ce 01       	movw	r24, r28
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	0e 94 26 1b 	call	0x364c	; 0x364c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    30a2:	ce 01       	movw	r24, r28
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <_ZN6Timing11onCycleLoopEv>
	assert(false, testTimer._at10Secs);
    30aa:	2d 81       	ldd	r18, Y+5	; 0x05
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	cb 01       	movw	r24, r22
    30b8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_Z6assertmmPc>

#endif //End define UNIT_TESTS

boolean runTimerTest(){
	
	Timing testTimer(true, 3*60); //say module wakes every 3 minutes
    30bc:	ce 01       	movw	r24, r28
    30be:	01 96       	adiw	r24, 0x01	; 1
    30c0:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN6TimingD1Ev>
	
	
	//testTimer.isDailyCycle()
	
	//volatile long millis = testTimer.getMillis();
}
    30c4:	a5 96       	adiw	r28, 0x25	; 37
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <_Z11runAllTestsv>:
bool runAllTests()
{
#ifdef UNIT_TESTS

	//Non-looping run-once tests
	if (_isAtCycleStart)
    30da:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_isAtCycleStart>
    30de:	88 23       	and	r24, r24
    30e0:	e1 f0       	breq	.+56     	; 0x311a <_Z11runAllTestsv+0x40>
	{
		initialiseModulePristine(1);
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	0e 94 0e 08 	call	0x101c	; 0x101c <_Z24initialiseModulePristinej>
		runTimerTest();
    30ea:	0e 94 07 18 	call	0x300e	; 0x300e <_Z12runTimerTestv>
		
		initialiseModulePristine(1);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 0e 08 	call	0x101c	; 0x101c <_Z24initialiseModulePristinej>
		runSendTest();
    30f6:	0e 94 17 14 	call	0x282e	; 0x282e <_Z11runSendTestv>
	
		initialiseModulePristine(1);
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 0e 08 	call	0x101c	; 0x101c <_Z24initialiseModulePristinej>
		runPadTest();
    3102:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_Z10runPadTestv>
	
		initialiseModulePristine(1);
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 0e 08 	call	0x101c	; 0x101c <_Z24initialiseModulePristinej>
		runLoadTest();
    310e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <_Z11runLoadTestv>

		initialiseModulePristine(1);
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 0e 08 	call	0x101c	; 0x101c <_Z24initialiseModulePristinej>
	
	
	//custom initialise timing()
	
	//Looping test
	bool doContinue = runFullCycleTest();
    311a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_Z16runFullCycleTestv>
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    311e:	08 95       	ret

00003120 <loop>:
//boolean _isWeeklyCycle;   //Will be true ONLY once in 1 particular loop in 1 particular cycle

boolean _moduleHasShutdown;
unsigned long _currCycleNumber = 0;

void loop() {
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	00 d0       	rcall	.+0      	; 0x3126 <loop+0x6>
    3126:	00 d0       	rcall	.+0      	; 0x3128 <loop+0x8>
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62

	if (_moduleHasShutdown)
    312c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_moduleHasShutdown>
    3130:	81 11       	cpse	r24, r1
    3132:	52 c0       	rjmp	.+164    	; 0x31d8 <loop+0xb8>
		return;

	volatile unsigned long currentMillis = timer.getMillis();
    3134:	83 e2       	ldi	r24, 0x23	; 35
    3136:	94 e0       	ldi	r25, 0x04	; 4
    3138:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN6Timing9getMillisEv>
    313c:	69 83       	std	Y+1, r22	; 0x01
    313e:	7a 83       	std	Y+2, r23	; 0x02
    3140:	8b 83       	std	Y+3, r24	; 0x03
    3142:	9c 83       	std	Y+4, r25	; 0x04

	//If board being powered up for the first time, start timer before running 1st cycle
	if (_isAtCycleStart) {
    3144:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_isAtCycleStart>
    3148:	88 23       	and	r24, r24
    314a:	51 f1       	breq	.+84     	; 0x31a0 <loop+0x80>
				
		//Update bootcount
		_currCycleNumber = 1 + mem.getLongFromMemory(MEMLOC_BOOTCOUNT);
    314c:	68 e0       	ldi	r22, 0x08	; 8
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	89 e6       	ldi	r24, 0x69	; 105
    3152:	95 e0       	ldi	r25, 0x05	; 5
    3154:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    3158:	9b 01       	movw	r18, r22
    315a:	ac 01       	movw	r20, r24
    315c:	2f 5f       	subi	r18, 0xFF	; 255
    315e:	3f 4f       	sbci	r19, 0xFF	; 255
    3160:	4f 4f       	sbci	r20, 0xFF	; 255
    3162:	5f 4f       	sbci	r21, 0xFF	; 255
    3164:	20 93 1c 04 	sts	0x041C, r18	; 0x80041c <_currCycleNumber>
    3168:	30 93 1d 04 	sts	0x041D, r19	; 0x80041d <_currCycleNumber+0x1>
    316c:	40 93 1e 04 	sts	0x041E, r20	; 0x80041e <_currCycleNumber+0x2>
    3170:	50 93 1f 04 	sts	0x041F, r21	; 0x80041f <_currCycleNumber+0x3>
		mem.setLongToMemory(MEMLOC_BOOTCOUNT, _currCycleNumber);
    3174:	68 e0       	ldi	r22, 0x08	; 8
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	89 e6       	ldi	r24, 0x69	; 105
    317a:	95 e0       	ldi	r25, 0x05	; 5
    317c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
					
		_isDailyCycle = timer.isDailyCycle(_currCycleNumber);
    3180:	40 91 1c 04 	lds	r20, 0x041C	; 0x80041c <_currCycleNumber>
    3184:	50 91 1d 04 	lds	r21, 0x041D	; 0x80041d <_currCycleNumber+0x1>
    3188:	60 91 1e 04 	lds	r22, 0x041E	; 0x80041e <_currCycleNumber+0x2>
    318c:	70 91 1f 04 	lds	r23, 0x041F	; 0x80041f <_currCycleNumber+0x3>
    3190:	83 e2       	ldi	r24, 0x23	; 35
    3192:	94 e0       	ldi	r25, 0x04	; 4
    3194:	0e 94 0f 1c 	call	0x381e	; 0x381e <_ZN6Timing12isDailyCycleEm>
    3198:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_isDailyCycle>
		
		//Reset all data before new cycle begins
		//Strictly not necessary as it gets re-booted each time
		resetAtCycleStart();
    319c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z17resetAtCycleStartv>
	}

	timer.onCycleLoop();
    31a0:	83 e2       	ldi	r24, 0x23	; 35
    31a2:	94 e0       	ldi	r25, 0x04	; 4
    31a4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <_ZN6Timing11onCycleLoopEv>
	//Run the cycle !
	boolean doContinue = false;
	
	//Toggle LED flash first to show any error conditions etc. incase next loop errors out
	//and we can't call flash
	mem.flashLED();
    31a8:	89 e6       	ldi	r24, 0x69	; 105
    31aa:	95 e0       	ldi	r25, 0x05	; 5
    31ac:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN12RmMemManager8flashLEDEv>
	
	#ifdef UNIT_TESTS
		doContinue = runAllTests();
    31b0:	0e 94 6d 18 	call	0x30da	; 0x30da <_Z11runAllTestsv>
			doContinue = loopSystemTest();
		else
			doContinue = loopCycle();
	#endif
	
	_isAtCycleStart = false;
    31b4:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_isAtCycleStart>

	//If all work done, shut down
	if (!doContinue) {
    31b8:	81 11       	cpse	r24, r1
    31ba:	08 c0       	rjmp	.+16     	; 0x31cc <loop+0xac>
		
		RM_LOG(F("END CYCLE"));
    31bc:	62 e3       	ldi	r22, 0x32	; 50
    31be:	73 e0       	ldi	r23, 0x03	; 3
    31c0:	89 e2       	ldi	r24, 0x29	; 41
    31c2:	96 e0       	ldi	r25, 0x06	; 6
    31c4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		shutdown();
    31c8:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z8shutdownv>
	}

	//Try POST to site with large timeout
	//(2 minutes)

	delay(LOOP_DELAY);
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
}
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	08 95       	ret

000031e6 <_GLOBAL__sub_I__isSystemTest>:
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    31e6:	6f ef       	ldi	r22, 0xFF	; 255
    31e8:	7f ef       	ldi	r23, 0xFF	; 255
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 bb 07 	call	0xf76	; 0xf76 <_Z41__static_initialization_and_destruction_0ii>
    31f2:	08 95       	ret

000031f4 <_GLOBAL__sub_D__isSystemTest>:
    31f4:	6f ef       	ldi	r22, 0xFF	; 255
    31f6:	7f ef       	ldi	r23, 0xFF	; 255
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 bb 07 	call	0xf76	; 0xf76 <_Z41__static_initialization_and_destruction_0ii>
    3200:	08 95       	ret

00003202 <twi_transmit>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    3202:	ac 01       	movw	r20, r24
    3204:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <twi_txBufferLength>
    3208:	26 2f       	mov	r18, r22
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	29 0f       	add	r18, r25
    320e:	31 1d       	adc	r19, r1
    3210:	21 32       	cpi	r18, 0x21	; 33
    3212:	31 05       	cpc	r19, r1
    3214:	f4 f4       	brge	.+60     	; 0x3252 <twi_transmit+0x50>
    3216:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <twi_state>
    321a:	84 30       	cpi	r24, 0x04	; 4
    321c:	e1 f4       	brne	.+56     	; 0x3256 <twi_transmit+0x54>
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	0f c0       	rjmp	.+30     	; 0x3240 <twi_transmit+0x3e>
    3222:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <twi_txBufferLength>
    3226:	29 2f       	mov	r18, r25
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	f9 01       	movw	r30, r18
    322c:	e8 0f       	add	r30, r24
    322e:	f1 1d       	adc	r31, r1
    3230:	da 01       	movw	r26, r20
    3232:	a2 0f       	add	r26, r18
    3234:	b3 1f       	adc	r27, r19
    3236:	8c 91       	ld	r24, X
    3238:	e2 57       	subi	r30, 0x72	; 114
    323a:	fa 4f       	sbci	r31, 0xFA	; 250
    323c:	80 83       	st	Z, r24
    323e:	9f 5f       	subi	r25, 0xFF	; 255
    3240:	96 17       	cp	r25, r22
    3242:	78 f3       	brcs	.-34     	; 0x3222 <twi_transmit+0x20>
    3244:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <twi_txBufferLength>
    3248:	68 0f       	add	r22, r24
    324a:	60 93 8c 05 	sts	0x058C, r22	; 0x80058c <twi_txBufferLength>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	08 95       	ret
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	08 95       	ret
    3256:	82 e0       	ldi	r24, 0x02	; 2
    3258:	08 95       	ret

0000325a <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    325a:	88 23       	and	r24, r24
    325c:	21 f0       	breq	.+8      	; 0x3266 <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    325e:	85 ec       	ldi	r24, 0xC5	; 197
    3260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3264:	08 95       	ret
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3266:	85 e8       	ldi	r24, 0x85	; 133
    3268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    326c:	08 95       	ret

0000326e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    326e:	85 ed       	ldi	r24, 0xD5	; 213
    3270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3274:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3278:	84 fd       	sbrc	r24, 4
    327a:	fc cf       	rjmp	.-8      	; 0x3274 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    327c:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <twi_state>
    3280:	08 95       	ret

00003282 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3282:	85 ec       	ldi	r24, 0xC5	; 197
    3284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3288:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <twi_state>
    328c:	08 95       	ret

0000328e <__vector_24>:
}

ISR(TWI_vect)
{
    328e:	1f 92       	push	r1
    3290:	0f 92       	push	r0
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	0f 92       	push	r0
    3296:	11 24       	eor	r1, r1
    3298:	2f 93       	push	r18
    329a:	3f 93       	push	r19
    329c:	4f 93       	push	r20
    329e:	5f 93       	push	r21
    32a0:	6f 93       	push	r22
    32a2:	7f 93       	push	r23
    32a4:	8f 93       	push	r24
    32a6:	9f 93       	push	r25
    32a8:	af 93       	push	r26
    32aa:	bf 93       	push	r27
    32ac:	ef 93       	push	r30
    32ae:	ff 93       	push	r31
  switch(TW_STATUS){
    32b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    32b4:	e8 2f       	mov	r30, r24
    32b6:	e8 7f       	andi	r30, 0xF8	; 248
    32b8:	8e 2f       	mov	r24, r30
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	89 3c       	cpi	r24, 0xC9	; 201
    32be:	91 05       	cpc	r25, r1
    32c0:	08 f0       	brcs	.+2      	; 0x32c4 <__vector_24+0x36>
    32c2:	f5 c0       	rjmp	.+490    	; 0x34ae <__vector_24+0x220>
    32c4:	fc 01       	movw	r30, r24
    32c6:	ec 5c       	subi	r30, 0xCC	; 204
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	0c 94 3e 32 	jmp	0x647c	; 0x647c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    32ce:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <twi_slarw>
    32d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      twi_reply(1);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
      break;
    32dc:	e8 c0       	rjmp	.+464    	; 0x34ae <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    32de:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <twi_masterBufferIndex>
    32e2:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <twi_masterBufferLength>
    32e6:	98 17       	cp	r25, r24
    32e8:	80 f4       	brcc	.+32     	; 0x330a <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    32ea:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <twi_masterBufferIndex>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	8e 0f       	add	r24, r30
    32f2:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <twi_masterBufferIndex>
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	e0 55       	subi	r30, 0x50	; 80
    32fa:	fa 4f       	sbci	r31, 0xFA	; 250
    32fc:	80 81       	ld	r24, Z
    32fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        twi_reply(1);
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    3308:	d2 c0       	rjmp	.+420    	; 0x34ae <__vector_24+0x220>
      }else{
	if (twi_sendStop)
    330a:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <twi_sendStop>
    330e:	88 23       	and	r24, r24
    3310:	19 f0       	breq	.+6      	; 0x3318 <__vector_24+0x8a>
          twi_stop();
    3312:	0e 94 37 19 	call	0x326e	; 0x326e <twi_stop>
    3316:	cb c0       	rjmp	.+406    	; 0x34ae <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    331e:	84 ea       	ldi	r24, 0xA4	; 164
    3320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
    3324:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <twi_state>
    3328:	c2 c0       	rjmp	.+388    	; 0x34ae <__vector_24+0x220>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    332a:	80 e2       	ldi	r24, 0x20	; 32
    332c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_error>
      twi_stop();
    3330:	0e 94 37 19 	call	0x326e	; 0x326e <twi_stop>
      break;
    3334:	bc c0       	rjmp	.+376    	; 0x34ae <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3336:	80 e3       	ldi	r24, 0x30	; 48
    3338:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_error>
      twi_stop();
    333c:	0e 94 37 19 	call	0x326e	; 0x326e <twi_stop>
      break;
    3340:	b6 c0       	rjmp	.+364    	; 0x34ae <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3342:	88 e3       	ldi	r24, 0x38	; 56
    3344:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_error>
      twi_releaseBus();
    3348:	0e 94 41 19 	call	0x3282	; 0x3282 <twi_releaseBus>
      break;
    334c:	b0 c0       	rjmp	.+352    	; 0x34ae <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    334e:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <twi_masterBufferIndex>
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	8e 0f       	add	r24, r30
    3356:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <twi_masterBufferIndex>
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3360:	e0 55       	subi	r30, 0x50	; 80
    3362:	fa 4f       	sbci	r31, 0xFA	; 250
    3364:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3366:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <twi_masterBufferIndex>
    336a:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <twi_masterBufferLength>
    336e:	98 17       	cp	r25, r24
    3370:	20 f4       	brcc	.+8      	; 0x337a <__vector_24+0xec>
        twi_reply(1);
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    3378:	9a c0       	rjmp	.+308    	; 0x34ae <__vector_24+0x220>
      }else{
        twi_reply(0);
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    3380:	96 c0       	rjmp	.+300    	; 0x34ae <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3382:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <twi_masterBufferIndex>
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	8e 0f       	add	r24, r30
    338a:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <twi_masterBufferIndex>
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3394:	e0 55       	subi	r30, 0x50	; 80
    3396:	fa 4f       	sbci	r31, 0xFA	; 250
    3398:	80 83       	st	Z, r24
	if (twi_sendStop)
    339a:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <twi_sendStop>
    339e:	88 23       	and	r24, r24
    33a0:	19 f0       	breq	.+6      	; 0x33a8 <__vector_24+0x11a>
          twi_stop();
    33a2:	0e 94 37 19 	call	0x326e	; 0x326e <twi_stop>
    33a6:	83 c0       	rjmp	.+262    	; 0x34ae <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    33ae:	84 ea       	ldi	r24, 0xA4	; 164
    33b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
    33b4:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <twi_state>
    33b8:	7a c0       	rjmp	.+244    	; 0x34ae <__vector_24+0x220>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    33ba:	0e 94 37 19 	call	0x326e	; 0x326e <twi_stop>
      break;
    33be:	77 c0       	rjmp	.+238    	; 0x34ae <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    33c6:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <twi_rxBufferIndex>
      twi_reply(1);
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
      break;
    33d0:	6e c0       	rjmp	.+220    	; 0x34ae <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    33d2:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <twi_rxBufferIndex>
    33d6:	80 32       	cpi	r24, 0x20	; 32
    33d8:	80 f4       	brcc	.+32     	; 0x33fa <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    33da:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <twi_rxBufferIndex>
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	8e 0f       	add	r24, r30
    33e2:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi_rxBufferIndex>
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33ec:	e4 59       	subi	r30, 0x94	; 148
    33ee:	fa 4f       	sbci	r31, 0xFA	; 250
    33f0:	80 83       	st	Z, r24
        twi_reply(1);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    33f8:	5a c0       	rjmp	.+180    	; 0x34ae <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    3400:	56 c0       	rjmp	.+172    	; 0x34ae <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3402:	0e 94 41 19 	call	0x3282	; 0x3282 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3406:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <twi_rxBufferIndex>
    340a:	80 32       	cpi	r24, 0x20	; 32
    340c:	30 f4       	brcc	.+12     	; 0x341a <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    340e:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <twi_rxBufferIndex>
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	e4 59       	subi	r30, 0x94	; 148
    3416:	fa 4f       	sbci	r31, 0xFA	; 250
    3418:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    341a:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <twi_rxBufferIndex>
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <twi_onSlaveReceive>
    3424:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <twi_onSlaveReceive+0x1>
    3428:	8c e6       	ldi	r24, 0x6C	; 108
    342a:	95 e0       	ldi	r25, 0x05	; 5
    342c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    342e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <twi_rxBufferIndex>
      break;
    3432:	3d c0       	rjmp	.+122    	; 0x34ae <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
      break;
    343a:	39 c0       	rjmp	.+114    	; 0x34ae <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    343c:	84 e0       	ldi	r24, 0x04	; 4
    343e:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3442:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3446:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    344a:	e0 91 d2 05 	lds	r30, 0x05D2	; 0x8005d2 <twi_onSlaveTransmit>
    344e:	f0 91 d3 05 	lds	r31, 0x05D3	; 0x8005d3 <twi_onSlaveTransmit+0x1>
    3452:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3454:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <twi_txBufferLength>
    3458:	81 11       	cpse	r24, r1
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3462:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3466:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <twi_txBufferIndex>
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	8e 0f       	add	r24, r30
    346e:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <twi_txBufferIndex>
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	e2 57       	subi	r30, 0x72	; 114
    3476:	fa 4f       	sbci	r31, 0xFA	; 250
    3478:	80 81       	ld	r24, Z
    347a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    347e:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <twi_txBufferIndex>
    3482:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <twi_txBufferLength>
    3486:	98 17       	cp	r25, r24
    3488:	20 f4       	brcc	.+8      	; 0x3492 <__vector_24+0x204>
        twi_reply(1);
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    3490:	0e c0       	rjmp	.+28     	; 0x34ae <__vector_24+0x220>
      }else{
        twi_reply(0);
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
    3498:	0a c0       	rjmp	.+20     	; 0x34ae <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	0e 94 2d 19 	call	0x325a	; 0x325a <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    34a0:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <twi_state>
      break;
    34a4:	04 c0       	rjmp	.+8      	; 0x34ae <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    34a6:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <twi_error>
      twi_stop();
    34aa:	0e 94 37 19 	call	0x326e	; 0x326e <twi_stop>
      break;
  }
}
    34ae:	ff 91       	pop	r31
    34b0:	ef 91       	pop	r30
    34b2:	bf 91       	pop	r27
    34b4:	af 91       	pop	r26
    34b6:	9f 91       	pop	r25
    34b8:	8f 91       	pop	r24
    34ba:	7f 91       	pop	r23
    34bc:	6f 91       	pop	r22
    34be:	5f 91       	pop	r21
    34c0:	4f 91       	pop	r20
    34c2:	3f 91       	pop	r19
    34c4:	2f 91       	pop	r18
    34c6:	0f 90       	pop	r0
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	0f 90       	pop	r0
    34cc:	1f 90       	pop	r1
    34ce:	18 95       	reti

000034d0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    34d0:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <_ZN7TwoWire14rxBufferLengthE>
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	20 91 08 06 	lds	r18, 0x0608	; 0x800608 <_ZN7TwoWire13rxBufferIndexE>
    34da:	82 1b       	sub	r24, r18
    34dc:	91 09       	sbc	r25, r1
    34de:	08 95       	ret

000034e0 <_ZN7TwoWire4readEv>:
    34e0:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <_ZN7TwoWire13rxBufferIndexE>
    34e4:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <_ZN7TwoWire14rxBufferLengthE>
    34e8:	98 17       	cp	r25, r24
    34ea:	50 f4       	brcc	.+20     	; 0x3500 <_ZN7TwoWire4readEv+0x20>
    34ec:	e9 2f       	mov	r30, r25
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	e7 5f       	subi	r30, 0xF7	; 247
    34f2:	f9 4f       	sbci	r31, 0xF9	; 249
    34f4:	20 81       	ld	r18, Z
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	9f 5f       	subi	r25, 0xFF	; 255
    34fa:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <_ZN7TwoWire13rxBufferIndexE>
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <_ZN7TwoWire4readEv+0x24>
    3500:	2f ef       	ldi	r18, 0xFF	; 255
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	c9 01       	movw	r24, r18
    3506:	08 95       	ret

00003508 <_ZN7TwoWire4peekEv>:
    3508:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <_ZN7TwoWire13rxBufferIndexE>
    350c:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <_ZN7TwoWire14rxBufferLengthE>
    3510:	e8 17       	cp	r30, r24
    3512:	30 f4       	brcc	.+12     	; 0x3520 <_ZN7TwoWire4peekEv+0x18>
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	e7 5f       	subi	r30, 0xF7	; 247
    3518:	f9 4f       	sbci	r31, 0xF9	; 249
    351a:	80 81       	ld	r24, Z
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	08 95       	ret
    3520:	8f ef       	ldi	r24, 0xFF	; 255
    3522:	9f ef       	ldi	r25, 0xFF	; 255
    3524:	08 95       	ret

00003526 <_ZN7TwoWire5flushEv>:
    3526:	08 95       	ret

00003528 <_ZN7TwoWire5writeEPKhj>:
    3528:	cf 92       	push	r12
    352a:	df 92       	push	r13
    352c:	ef 92       	push	r14
    352e:	ff 92       	push	r15
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	8c 01       	movw	r16, r24
    353a:	6b 01       	movw	r12, r22
    353c:	7a 01       	movw	r14, r20
    353e:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <_ZN7TwoWire12transmittingE>
    3542:	88 23       	and	r24, r24
    3544:	99 f0       	breq	.+38     	; 0x356c <_ZN7TwoWire5writeEPKhj+0x44>
    3546:	c0 e0       	ldi	r28, 0x00	; 0
    3548:	d0 e0       	ldi	r29, 0x00	; 0
    354a:	ce 15       	cp	r28, r14
    354c:	df 05       	cpc	r29, r15
    354e:	90 f4       	brcc	.+36     	; 0x3574 <_ZN7TwoWire5writeEPKhj+0x4c>
    3550:	d8 01       	movw	r26, r16
    3552:	ed 91       	ld	r30, X+
    3554:	fc 91       	ld	r31, X
    3556:	01 90       	ld	r0, Z+
    3558:	f0 81       	ld	r31, Z
    355a:	e0 2d       	mov	r30, r0
    355c:	d6 01       	movw	r26, r12
    355e:	ac 0f       	add	r26, r28
    3560:	bd 1f       	adc	r27, r29
    3562:	6c 91       	ld	r22, X
    3564:	c8 01       	movw	r24, r16
    3566:	09 95       	icall
    3568:	21 96       	adiw	r28, 0x01	; 1
    356a:	ef cf       	rjmp	.-34     	; 0x354a <_ZN7TwoWire5writeEPKhj+0x22>
    356c:	64 2f       	mov	r22, r20
    356e:	c6 01       	movw	r24, r12
    3570:	0e 94 01 19 	call	0x3202	; 0x3202 <twi_transmit>
    3574:	c7 01       	movw	r24, r14
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	1f 91       	pop	r17
    357c:	0f 91       	pop	r16
    357e:	ff 90       	pop	r15
    3580:	ef 90       	pop	r14
    3582:	df 90       	pop	r13
    3584:	cf 90       	pop	r12
    3586:	08 95       	ret

00003588 <_ZN7TwoWire5writeEh>:
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	1f 92       	push	r1
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	fc 01       	movw	r30, r24
    3594:	69 83       	std	Y+1, r22	; 0x01
    3596:	90 91 e4 05 	lds	r25, 0x05E4	; 0x8005e4 <_ZN7TwoWire12transmittingE>
    359a:	99 23       	and	r25, r25
    359c:	d9 f0       	breq	.+54     	; 0x35d4 <_ZN7TwoWire5writeEh+0x4c>
    359e:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <_ZN7TwoWire14txBufferLengthE>
    35a2:	90 32       	cpi	r25, 0x20	; 32
    35a4:	38 f0       	brcs	.+14     	; 0x35b4 <_ZN7TwoWire5writeEh+0x2c>
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	93 83       	std	Z+3, r25	; 0x03
    35ac:	82 83       	std	Z+2, r24	; 0x02
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	17 c0       	rjmp	.+46     	; 0x35e2 <_ZN7TwoWire5writeEh+0x5a>
    35b4:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <_ZN7TwoWire13txBufferIndexE>
    35b8:	e8 2f       	mov	r30, r24
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	e9 51       	subi	r30, 0x19	; 25
    35be:	fa 4f       	sbci	r31, 0xFA	; 250
    35c0:	99 81       	ldd	r25, Y+1	; 0x01
    35c2:	90 83       	st	Z, r25
    35c4:	8f 5f       	subi	r24, 0xFF	; 255
    35c6:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <_ZN7TwoWire13txBufferIndexE>
    35ca:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <_ZN7TwoWire14txBufferLengthE>
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	07 c0       	rjmp	.+14     	; 0x35e2 <_ZN7TwoWire5writeEh+0x5a>
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	ce 01       	movw	r24, r28
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	0e 94 01 19 	call	0x3202	; 0x3202 <twi_transmit>
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0f 90       	pop	r0
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	08 95       	ret

000035ea <_ZN7TwoWireC1Ev>:
    35ea:	fc 01       	movw	r30, r24
    35ec:	13 82       	std	Z+3, r1	; 0x03
    35ee:	12 82       	std	Z+2, r1	; 0x02
    35f0:	88 ee       	ldi	r24, 0xE8	; 232
    35f2:	93 e0       	ldi	r25, 0x03	; 3
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	84 83       	std	Z+4, r24	; 0x04
    35fa:	95 83       	std	Z+5, r25	; 0x05
    35fc:	a6 83       	std	Z+6, r26	; 0x06
    35fe:	b7 83       	std	Z+7, r27	; 0x07
    3600:	86 e6       	ldi	r24, 0x66	; 102
    3602:	93 e0       	ldi	r25, 0x03	; 3
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
    3608:	08 95       	ret

0000360a <_Z41__static_initialization_and_destruction_0ii>:
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	39 f4       	brne	.+14     	; 0x361c <_Z41__static_initialization_and_destruction_0ii+0x12>
    360e:	6f 3f       	cpi	r22, 0xFF	; 255
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	21 f4       	brne	.+8      	; 0x361c <_Z41__static_initialization_and_destruction_0ii+0x12>
    3614:	88 ed       	ldi	r24, 0xD8	; 216
    3616:	95 e0       	ldi	r25, 0x05	; 5
    3618:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <_ZN7TwoWireC1Ev>
    361c:	08 95       	ret

0000361e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    361e:	6f ef       	ldi	r22, 0xFF	; 255
    3620:	7f ef       	ldi	r23, 0xFF	; 255
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	0e 94 05 1b 	call	0x360a	; 0x360a <_Z41__static_initialization_and_destruction_0ii>
    362a:	08 95       	ret

0000362c <_ZN6TimingC1Ehm>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "Timing.h"

Timing::Timing(uint8_t isMock, unsigned long intercycleDownTime)
    362c:	fc 01       	movw	r30, r24
    362e:	11 8a       	std	Z+17, r1	; 0x11
    3630:	12 8a       	std	Z+18, r1	; 0x12
    3632:	13 8a       	std	Z+19, r1	; 0x13
    3634:	14 8a       	std	Z+20, r1	; 0x14
    3636:	15 8a       	std	Z+21, r1	; 0x15
    3638:	16 8a       	std	Z+22, r1	; 0x16
    363a:	17 8a       	std	Z+23, r1	; 0x17
    363c:	10 8e       	std	Z+24, r1	; 0x18
{
	_intercycleDownTime = intercycleDownTime;
    363e:	20 83       	st	Z, r18
    3640:	31 83       	std	Z+1, r19	; 0x01
    3642:	42 83       	std	Z+2, r20	; 0x02
    3644:	53 83       	std	Z+3, r21	; 0x03
	_isMock = isMock;
    3646:	60 8b       	std	Z+16, r22	; 0x10
    3648:	08 95       	ret

0000364a <_ZN6TimingD1Ev>:
}

Timing::~Timing() {}
    364a:	08 95       	ret

0000364c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>:

void Timing::MOCK_ADVANCE_TIME(unsigned long milliseconds){
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
	_MOCK_ADVANCED_BY += milliseconds;
    3650:	fc 01       	movw	r30, r24
    3652:	01 89       	ldd	r16, Z+17	; 0x11
    3654:	12 89       	ldd	r17, Z+18	; 0x12
    3656:	23 89       	ldd	r18, Z+19	; 0x13
    3658:	34 89       	ldd	r19, Z+20	; 0x14
    365a:	40 0f       	add	r20, r16
    365c:	51 1f       	adc	r21, r17
    365e:	62 1f       	adc	r22, r18
    3660:	73 1f       	adc	r23, r19
    3662:	41 8b       	std	Z+17, r20	; 0x11
    3664:	52 8b       	std	Z+18, r21	; 0x12
    3666:	63 8b       	std	Z+19, r22	; 0x13
    3668:	74 8b       	std	Z+20, r23	; 0x14
}
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	08 95       	ret

00003670 <_ZN6Timing9getMillisEv>:
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}

unsigned long Timing::getMillis()
{
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
    3678:	ec 01       	movw	r28, r24
	if (_isMock)
    367a:	88 89       	ldd	r24, Y+16	; 0x10
    367c:	88 23       	and	r24, r24
    367e:	59 f0       	breq	.+22     	; 0x3696 <_ZN6Timing9getMillisEv+0x26>
	{
		//Speed up time in DEBUG mode ! // Each second=>x minutes
		unsigned long currentMillis = millis();
    3680:	0e 94 66 23 	call	0x46cc	; 0x46cc <millis>
		currentMillis += _MOCK_ADVANCED_BY;
    3684:	09 89       	ldd	r16, Y+17	; 0x11
    3686:	1a 89       	ldd	r17, Y+18	; 0x12
    3688:	2b 89       	ldd	r18, Y+19	; 0x13
    368a:	3c 89       	ldd	r19, Y+20	; 0x14
		return currentMillis;
    368c:	60 0f       	add	r22, r16
    368e:	71 1f       	adc	r23, r17
    3690:	82 1f       	adc	r24, r18
    3692:	93 1f       	adc	r25, r19
    3694:	02 c0       	rjmp	.+4      	; 0x369a <_ZN6Timing9getMillisEv+0x2a>
		//currentMillis = 1L*40*60*1000*secsFromStart;
		//return currentMillis;
	}
	else
	{
		return millis();
    3696:	0e 94 66 23 	call	0x46cc	; 0x46cc <millis>
	}
}
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	08 95       	ret

000036a4 <_ZN6Timing11onCycleLoopEv>:

void Timing::MOCK_ADVANCE_TIME(unsigned long milliseconds){
	_MOCK_ADVANCED_BY += milliseconds;
}

void Timing::onCycleLoop(){
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <_ZN6Timing11onCycleLoopEv+0xa>
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <_ZN6Timing11onCycleLoopEv+0xc>
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	8c 01       	movw	r16, r24
	
	volatile unsigned long currentMillis = getMillis();
    36b6:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN6Timing9getMillisEv>
    36ba:	69 83       	std	Y+1, r22	; 0x01
    36bc:	7a 83       	std	Y+2, r23	; 0x02
    36be:	8b 83       	std	Y+3, r24	; 0x03
    36c0:	9c 83       	std	Y+4, r25	; 0x04
	
	if (_currCycleStartTime == 0)
    36c2:	f8 01       	movw	r30, r16
    36c4:	85 89       	ldd	r24, Z+21	; 0x15
    36c6:	96 89       	ldd	r25, Z+22	; 0x16
    36c8:	a7 89       	ldd	r26, Z+23	; 0x17
    36ca:	b0 8d       	ldd	r27, Z+24	; 0x18
    36cc:	89 2b       	or	r24, r25
    36ce:	8a 2b       	or	r24, r26
    36d0:	8b 2b       	or	r24, r27
    36d2:	41 f4       	brne	.+16     	; 0x36e4 <_ZN6Timing11onCycleLoopEv+0x40>
		_currCycleStartTime = currentMillis;
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	9a 81       	ldd	r25, Y+2	; 0x02
    36d8:	ab 81       	ldd	r26, Y+3	; 0x03
    36da:	bc 81       	ldd	r27, Y+4	; 0x04
    36dc:	85 8b       	std	Z+21, r24	; 0x15
    36de:	96 8b       	std	Z+22, r25	; 0x16
    36e0:	a7 8b       	std	Z+23, r26	; 0x17
    36e2:	b0 8f       	std	Z+24, r27	; 0x18
	
	//How long has this cycle been running for ?
	unsigned long currCycleDuration = currentMillis - _currCycleStartTime;
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	ab 81       	ldd	r26, Y+3	; 0x03
    36ea:	bc 81       	ldd	r27, Y+4	; 0x04
    36ec:	f8 01       	movw	r30, r16
    36ee:	45 89       	ldd	r20, Z+21	; 0x15
    36f0:	56 89       	ldd	r21, Z+22	; 0x16
    36f2:	67 89       	ldd	r22, Z+23	; 0x17
    36f4:	70 8d       	ldd	r23, Z+24	; 0x18
    36f6:	84 1b       	sub	r24, r20
    36f8:	95 0b       	sbc	r25, r21
    36fa:	a6 0b       	sbc	r26, r22
    36fc:	b7 0b       	sbc	r27, r23
	//RM_LOG2(F("CurrCycleDuration"), currCycleDuration);
		
	//Some don't latch, so reset them
	_at10Secs = false;
    36fe:	14 82       	std	Z+4, r1	; 0x04
	_at1Min = false;
    3700:	15 82       	std	Z+5, r1	; 0x05
	_at1Min30Secs = false;
    3702:	16 82       	std	Z+6, r1	; 0x06
	_at2Mins = false;
    3704:	17 82       	std	Z+7, r1	; 0x07
	_at30SecInterval = false;
    3706:	11 86       	std	Z+9, r1	; 0x09
	_at1SecInterval = false;
    3708:	10 86       	std	Z+8, r1	; 0x08
	__is10SecsTriggered = false;
    370a:	14 8e       	std	Z+28, r1	; 0x1c
	__is1MinTriggered = false;
    370c:	11 8e       	std	Z+25, r1	; 0x19
	__is2MinTriggered = false;
    370e:	13 8e       	std	Z+27, r1	; 0x1b


	//10 seconds
	if (currCycleDuration >= 10*1000) {
    3710:	80 31       	cpi	r24, 0x10	; 16
    3712:	f7 e2       	ldi	r31, 0x27	; 39
    3714:	9f 07       	cpc	r25, r31
    3716:	a1 05       	cpc	r26, r1
    3718:	b1 05       	cpc	r27, r1
    371a:	28 f0       	brcs	.+10     	; 0x3726 <_ZN6Timing11onCycleLoopEv+0x82>
		_has10SecsElapsed = true;
    371c:	21 e0       	ldi	r18, 0x01	; 1
    371e:	f8 01       	movw	r30, r16
    3720:	26 87       	std	Z+14, r18	; 0x0e
			
		//One-Time @10-Secs triggered
		if (!__is10SecsTriggered) {
				
			_at10Secs = true;
    3722:	24 83       	std	Z+4, r18	; 0x04
			__is10SecsTriggered = true;
    3724:	24 8f       	std	Z+28, r18	; 0x1c
		}
	}
		
	//1 minute
	if (currCycleDuration >= 1L*60*1000) {
    3726:	80 36       	cpi	r24, 0x60	; 96
    3728:	fa ee       	ldi	r31, 0xEA	; 234
    372a:	9f 07       	cpc	r25, r31
    372c:	a1 05       	cpc	r26, r1
    372e:	b1 05       	cpc	r27, r1
    3730:	28 f0       	brcs	.+10     	; 0x373c <_ZN6Timing11onCycleLoopEv+0x98>
		_has1MinElapsed = true;
    3732:	21 e0       	ldi	r18, 0x01	; 1
    3734:	f8 01       	movw	r30, r16
    3736:	22 87       	std	Z+10, r18	; 0x0a
			
		//One-Time @1-Min triggered
		if (!__is1MinTriggered) {
				
			_at1Min = true;
    3738:	25 83       	std	Z+5, r18	; 0x05
			__is1MinTriggered = true;
    373a:	21 8f       	std	Z+25, r18	; 0x19
		}
	}
		
	//1 minute 30 secs
	if (currCycleDuration >= 3L*60*1000/2) {
    373c:	80 39       	cpi	r24, 0x90	; 144
    373e:	ff e5       	ldi	r31, 0x5F	; 95
    3740:	9f 07       	cpc	r25, r31
    3742:	f1 e0       	ldi	r31, 0x01	; 1
    3744:	af 07       	cpc	r26, r31
    3746:	b1 05       	cpc	r27, r1
    3748:	48 f0       	brcs	.+18     	; 0x375c <_ZN6Timing11onCycleLoopEv+0xb8>
		_has1Min30SecsElapsed = true;
    374a:	21 e0       	ldi	r18, 0x01	; 1
    374c:	f8 01       	movw	r30, r16
    374e:	23 87       	std	Z+11, r18	; 0x0b
			
		//One-Time @1-Min triggered
		if (!__is1Min30SecsTriggered) {
    3750:	22 8d       	ldd	r18, Z+26	; 0x1a
    3752:	21 11       	cpse	r18, r1
    3754:	03 c0       	rjmp	.+6      	; 0x375c <_ZN6Timing11onCycleLoopEv+0xb8>
				
			_at1Min30Secs = true;
    3756:	21 e0       	ldi	r18, 0x01	; 1
    3758:	26 83       	std	Z+6, r18	; 0x06
			__is1Min30SecsTriggered = true;
    375a:	22 8f       	std	Z+26, r18	; 0x1a
		}
	}
		
	//2 minutes
	if (currCycleDuration >= 2L*60*1000) {
    375c:	80 3c       	cpi	r24, 0xC0	; 192
    375e:	f4 ed       	ldi	r31, 0xD4	; 212
    3760:	9f 07       	cpc	r25, r31
    3762:	f1 e0       	ldi	r31, 0x01	; 1
    3764:	af 07       	cpc	r26, r31
    3766:	b1 05       	cpc	r27, r1
    3768:	28 f0       	brcs	.+10     	; 0x3774 <_ZN6Timing11onCycleLoopEv+0xd0>
		_has2MinElapsed = true;
    376a:	21 e0       	ldi	r18, 0x01	; 1
    376c:	f8 01       	movw	r30, r16
    376e:	25 87       	std	Z+13, r18	; 0x0d
			
		//One-Time @2-Min triggered
		if (!__is2MinTriggered) {
				
			_at2Mins = true;
    3770:	27 83       	std	Z+7, r18	; 0x07
			__is2MinTriggered = true;
    3772:	23 8f       	std	Z+27, r18	; 0x1b
		}
	}
		
	//5 mins
	if (currCycleDuration >= 5L*60*1000)
    3774:	80 3e       	cpi	r24, 0xE0	; 224
    3776:	f3 e9       	ldi	r31, 0x93	; 147
    3778:	9f 07       	cpc	r25, r31
    377a:	f4 e0       	ldi	r31, 0x04	; 4
    377c:	af 07       	cpc	r26, r31
    377e:	b1 05       	cpc	r27, r1
    3780:	18 f0       	brcs	.+6      	; 0x3788 <_ZN6Timing11onCycleLoopEv+0xe4>
	_has5MinElapsed=true;
    3782:	21 e0       	ldi	r18, 0x01	; 1
    3784:	f8 01       	movw	r30, r16
    3786:	24 87       	std	Z+12, r18	; 0x0c
		
	//15 mins
	if (currCycleDuration >= 15L*60*1000)
    3788:	80 3a       	cpi	r24, 0xA0	; 160
    378a:	9b 4b       	sbci	r25, 0xBB	; 187
    378c:	ad 40       	sbci	r26, 0x0D	; 13
    378e:	b1 05       	cpc	r27, r1
    3790:	18 f0       	brcs	.+6      	; 0x3798 <_ZN6Timing11onCycleLoopEv+0xf4>
	_has15MinElapsed=true;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	f8 01       	movw	r30, r16
    3796:	87 87       	std	Z+15, r24	; 0x0f
		
	//1 sec interval
	if ( (currentMillis - __last1SecInterval) >= 1L*1000) {
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	9a 81       	ldd	r25, Y+2	; 0x02
    379c:	ab 81       	ldd	r26, Y+3	; 0x03
    379e:	bc 81       	ldd	r27, Y+4	; 0x04
    37a0:	f8 01       	movw	r30, r16
    37a2:	45 8d       	ldd	r20, Z+29	; 0x1d
    37a4:	56 8d       	ldd	r21, Z+30	; 0x1e
    37a6:	67 8d       	ldd	r22, Z+31	; 0x1f
    37a8:	70 a1       	ldd	r23, Z+32	; 0x20
    37aa:	84 1b       	sub	r24, r20
    37ac:	95 0b       	sbc	r25, r21
    37ae:	a6 0b       	sbc	r26, r22
    37b0:	b7 0b       	sbc	r27, r23
    37b2:	88 3e       	cpi	r24, 0xE8	; 232
    37b4:	93 40       	sbci	r25, 0x03	; 3
    37b6:	a1 05       	cpc	r26, r1
    37b8:	b1 05       	cpc	r27, r1
    37ba:	58 f0       	brcs	.+22     	; 0x37d2 <_ZN6Timing11onCycleLoopEv+0x12e>
		_at1SecInterval = true;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	f8 01       	movw	r30, r16
    37c0:	80 87       	std	Z+8, r24	; 0x08
		__last1SecInterval = currentMillis;
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	ab 81       	ldd	r26, Y+3	; 0x03
    37c8:	bc 81       	ldd	r27, Y+4	; 0x04
    37ca:	85 8f       	std	Z+29, r24	; 0x1d
    37cc:	96 8f       	std	Z+30, r25	; 0x1e
    37ce:	a7 8f       	std	Z+31, r26	; 0x1f
    37d0:	b0 a3       	std	Z+32, r27	; 0x20
	}
		
	//30 sec interval
	if ( (currentMillis - __last30SecInterval) >= 30L*1000) {
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	ab 81       	ldd	r26, Y+3	; 0x03
    37d8:	bc 81       	ldd	r27, Y+4	; 0x04
    37da:	f8 01       	movw	r30, r16
    37dc:	41 a1       	ldd	r20, Z+33	; 0x21
    37de:	52 a1       	ldd	r21, Z+34	; 0x22
    37e0:	63 a1       	ldd	r22, Z+35	; 0x23
    37e2:	74 a1       	ldd	r23, Z+36	; 0x24
    37e4:	84 1b       	sub	r24, r20
    37e6:	95 0b       	sbc	r25, r21
    37e8:	a6 0b       	sbc	r26, r22
    37ea:	b7 0b       	sbc	r27, r23
    37ec:	80 33       	cpi	r24, 0x30	; 48
    37ee:	95 47       	sbci	r25, 0x75	; 117
    37f0:	a1 05       	cpc	r26, r1
    37f2:	b1 05       	cpc	r27, r1
    37f4:	58 f0       	brcs	.+22     	; 0x380c <_ZN6Timing11onCycleLoopEv+0x168>
		_at30SecInterval = true;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	f8 01       	movw	r30, r16
    37fa:	81 87       	std	Z+9, r24	; 0x09
		__last30SecInterval = currentMillis;
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	ab 81       	ldd	r26, Y+3	; 0x03
    3802:	bc 81       	ldd	r27, Y+4	; 0x04
    3804:	81 a3       	std	Z+33, r24	; 0x21
    3806:	92 a3       	std	Z+34, r25	; 0x22
    3808:	a3 a3       	std	Z+35, r26	; 0x23
    380a:	b4 a3       	std	Z+36, r27	; 0x24
	//RM_LOG("_is30SecInterval",_is30SecInterval);
	//RM_LOG("_at1SecInterval",_is1SecInterval);
	//RM_LOG2("_gpsFetchInProgress",_gpsFetchInProgress);
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	08 95       	ret

0000381e <_ZN6Timing12isDailyCycleEm>:
		return millis();
	}
}

boolean Timing::isDailyCycle(unsigned long currCycleNumber)
{
    381e:	4f 92       	push	r4
    3820:	5f 92       	push	r5
    3822:	6f 92       	push	r6
    3824:	7f 92       	push	r7
    3826:	8f 92       	push	r8
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	00 d0       	rcall	.+0      	; 0x383c <_ZN6Timing12isDailyCycleEm+0x1e>
    383c:	00 d0       	rcall	.+0      	; 0x383e <_ZN6Timing12isDailyCycleEm+0x20>
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	6a 01       	movw	r12, r20
    3844:	7b 01       	movw	r14, r22
	//Calc approximate time (in ms) between cycles.
	unsigned long durationPerCycleInSecs =
		_intercycleDownTime + 10; //10 secs for readings - MATCH-R-TIME
    3846:	fc 01       	movw	r30, r24
    3848:	80 80       	ld	r8, Z
    384a:	91 80       	ldd	r9, Z+1	; 0x01
    384c:	a2 80       	ldd	r10, Z+2	; 0x02
    384e:	b3 80       	ldd	r11, Z+3	; 0x03
    3850:	fa e0       	ldi	r31, 0x0A	; 10
    3852:	8f 0e       	add	r8, r31
    3854:	91 1c       	adc	r9, r1
    3856:	a1 1c       	adc	r10, r1
    3858:	b1 1c       	adc	r11, r1
	//- todo: if kept up by battery? whilst sending? add a EEPROM entry when cycle finishes?
		
	//Calc current time since module was installed
	long totalDurationHrs = (currCycleNumber*durationPerCycleInSecs)/(60*60);
    385a:	a5 01       	movw	r20, r10
    385c:	94 01       	movw	r18, r8
    385e:	c7 01       	movw	r24, r14
    3860:	b6 01       	movw	r22, r12
    3862:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <__mulsi3>
    3866:	0f 2e       	mov	r0, r31
    3868:	f0 e1       	ldi	r31, 0x10	; 16
    386a:	4f 2e       	mov	r4, r31
    386c:	fe e0       	ldi	r31, 0x0E	; 14
    386e:	5f 2e       	mov	r5, r31
    3870:	61 2c       	mov	r6, r1
    3872:	71 2c       	mov	r7, r1
    3874:	f0 2d       	mov	r31, r0
    3876:	a3 01       	movw	r20, r6
    3878:	92 01       	movw	r18, r4
    387a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    387e:	29 83       	std	Y+1, r18	; 0x01
    3880:	3a 83       	std	Y+2, r19	; 0x02
    3882:	4b 83       	std	Y+3, r20	; 0x03
    3884:	5c 83       	std	Y+4, r21	; 0x04
		
	//Check if 1 hour is almost up by looking at totalDuration of next cycle
	long nextDurationHrs = ((currCycleNumber+1)*durationPerCycleInSecs)/(60*60);
    3886:	c7 01       	movw	r24, r14
    3888:	b6 01       	movw	r22, r12
    388a:	6f 5f       	subi	r22, 0xFF	; 255
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	8f 4f       	sbci	r24, 0xFF	; 255
    3890:	9f 4f       	sbci	r25, 0xFF	; 255
    3892:	a5 01       	movw	r20, r10
    3894:	94 01       	movw	r18, r8
    3896:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <__mulsi3>
    389a:	a3 01       	movw	r20, r6
    389c:	92 01       	movw	r18, r4
    389e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    38a2:	49 01       	movw	r8, r18
    38a4:	5a 01       	movw	r10, r20
		
	//Check if it's a daily/weekly cycle by seeing if next cycle will rollover
	if ((int)totalDurationHrs/HOURS_IN_DAY < (int)nextDurationHrs/HOURS_IN_DAY)
    38a6:	e8 e1       	ldi	r30, 0x18	; 24
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	9a 81       	ldd	r25, Y+2	; 0x02
    38ae:	bf 01       	movw	r22, r30
    38b0:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__divmodhi4>
    38b4:	7b 01       	movw	r14, r22
    38b6:	c4 01       	movw	r24, r8
    38b8:	bf 01       	movw	r22, r30
    38ba:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__divmodhi4>
    38be:	e6 16       	cp	r14, r22
    38c0:	f7 06       	cpc	r15, r23
    38c2:	14 f4       	brge	.+4      	; 0x38c8 <_ZN6Timing12isDailyCycleEm+0xaa>
		return true;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	01 c0       	rjmp	.+2      	; 0x38ca <_ZN6Timing12isDailyCycleEm+0xac>
	else
		return false;	
    38c8:	80 e0       	ldi	r24, 0x00	; 0
}
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	df 90       	pop	r13
    38dc:	cf 90       	pop	r12
    38de:	bf 90       	pop	r11
    38e0:	af 90       	pop	r10
    38e2:	9f 90       	pop	r9
    38e4:	8f 90       	pop	r8
    38e6:	7f 90       	pop	r7
    38e8:	6f 90       	pop	r6
    38ea:	5f 90       	pop	r5
    38ec:	4f 90       	pop	r4
    38ee:	08 95       	ret

000038f0 <__subsf3>:
    38f0:	50 58       	subi	r21, 0x80	; 128

000038f2 <__addsf3>:
    38f2:	bb 27       	eor	r27, r27
    38f4:	aa 27       	eor	r26, r26
    38f6:	0e 94 90 1c 	call	0x3920	; 0x3920 <__addsf3x>
    38fa:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_round>
    38fe:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__fp_pscA>
    3902:	38 f0       	brcs	.+14     	; 0x3912 <__addsf3+0x20>
    3904:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fp_pscB>
    3908:	20 f0       	brcs	.+8      	; 0x3912 <__addsf3+0x20>
    390a:	39 f4       	brne	.+14     	; 0x391a <__addsf3+0x28>
    390c:	9f 3f       	cpi	r25, 0xFF	; 255
    390e:	19 f4       	brne	.+6      	; 0x3916 <__addsf3+0x24>
    3910:	26 f4       	brtc	.+8      	; 0x391a <__addsf3+0x28>
    3912:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__fp_nan>
    3916:	0e f4       	brtc	.+2      	; 0x391a <__addsf3+0x28>
    3918:	e0 95       	com	r30
    391a:	e7 fb       	bst	r30, 7
    391c:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__fp_inf>

00003920 <__addsf3x>:
    3920:	e9 2f       	mov	r30, r25
    3922:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fp_split3>
    3926:	58 f3       	brcs	.-42     	; 0x38fe <__addsf3+0xc>
    3928:	ba 17       	cp	r27, r26
    392a:	62 07       	cpc	r22, r18
    392c:	73 07       	cpc	r23, r19
    392e:	84 07       	cpc	r24, r20
    3930:	95 07       	cpc	r25, r21
    3932:	20 f0       	brcs	.+8      	; 0x393c <__addsf3x+0x1c>
    3934:	79 f4       	brne	.+30     	; 0x3954 <__addsf3x+0x34>
    3936:	a6 f5       	brtc	.+104    	; 0x39a0 <__addsf3x+0x80>
    3938:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__fp_zero>
    393c:	0e f4       	brtc	.+2      	; 0x3940 <__addsf3x+0x20>
    393e:	e0 95       	com	r30
    3940:	0b 2e       	mov	r0, r27
    3942:	ba 2f       	mov	r27, r26
    3944:	a0 2d       	mov	r26, r0
    3946:	0b 01       	movw	r0, r22
    3948:	b9 01       	movw	r22, r18
    394a:	90 01       	movw	r18, r0
    394c:	0c 01       	movw	r0, r24
    394e:	ca 01       	movw	r24, r20
    3950:	a0 01       	movw	r20, r0
    3952:	11 24       	eor	r1, r1
    3954:	ff 27       	eor	r31, r31
    3956:	59 1b       	sub	r21, r25
    3958:	99 f0       	breq	.+38     	; 0x3980 <__addsf3x+0x60>
    395a:	59 3f       	cpi	r21, 0xF9	; 249
    395c:	50 f4       	brcc	.+20     	; 0x3972 <__addsf3x+0x52>
    395e:	50 3e       	cpi	r21, 0xE0	; 224
    3960:	68 f1       	brcs	.+90     	; 0x39bc <__addsf3x+0x9c>
    3962:	1a 16       	cp	r1, r26
    3964:	f0 40       	sbci	r31, 0x00	; 0
    3966:	a2 2f       	mov	r26, r18
    3968:	23 2f       	mov	r18, r19
    396a:	34 2f       	mov	r19, r20
    396c:	44 27       	eor	r20, r20
    396e:	58 5f       	subi	r21, 0xF8	; 248
    3970:	f3 cf       	rjmp	.-26     	; 0x3958 <__addsf3x+0x38>
    3972:	46 95       	lsr	r20
    3974:	37 95       	ror	r19
    3976:	27 95       	ror	r18
    3978:	a7 95       	ror	r26
    397a:	f0 40       	sbci	r31, 0x00	; 0
    397c:	53 95       	inc	r21
    397e:	c9 f7       	brne	.-14     	; 0x3972 <__addsf3x+0x52>
    3980:	7e f4       	brtc	.+30     	; 0x39a0 <__addsf3x+0x80>
    3982:	1f 16       	cp	r1, r31
    3984:	ba 0b       	sbc	r27, r26
    3986:	62 0b       	sbc	r22, r18
    3988:	73 0b       	sbc	r23, r19
    398a:	84 0b       	sbc	r24, r20
    398c:	ba f0       	brmi	.+46     	; 0x39bc <__addsf3x+0x9c>
    398e:	91 50       	subi	r25, 0x01	; 1
    3990:	a1 f0       	breq	.+40     	; 0x39ba <__addsf3x+0x9a>
    3992:	ff 0f       	add	r31, r31
    3994:	bb 1f       	adc	r27, r27
    3996:	66 1f       	adc	r22, r22
    3998:	77 1f       	adc	r23, r23
    399a:	88 1f       	adc	r24, r24
    399c:	c2 f7       	brpl	.-16     	; 0x398e <__addsf3x+0x6e>
    399e:	0e c0       	rjmp	.+28     	; 0x39bc <__addsf3x+0x9c>
    39a0:	ba 0f       	add	r27, r26
    39a2:	62 1f       	adc	r22, r18
    39a4:	73 1f       	adc	r23, r19
    39a6:	84 1f       	adc	r24, r20
    39a8:	48 f4       	brcc	.+18     	; 0x39bc <__addsf3x+0x9c>
    39aa:	87 95       	ror	r24
    39ac:	77 95       	ror	r23
    39ae:	67 95       	ror	r22
    39b0:	b7 95       	ror	r27
    39b2:	f7 95       	ror	r31
    39b4:	9e 3f       	cpi	r25, 0xFE	; 254
    39b6:	08 f0       	brcs	.+2      	; 0x39ba <__addsf3x+0x9a>
    39b8:	b0 cf       	rjmp	.-160    	; 0x391a <__addsf3+0x28>
    39ba:	93 95       	inc	r25
    39bc:	88 0f       	add	r24, r24
    39be:	08 f0       	brcs	.+2      	; 0x39c2 <__addsf3x+0xa2>
    39c0:	99 27       	eor	r25, r25
    39c2:	ee 0f       	add	r30, r30
    39c4:	97 95       	ror	r25
    39c6:	87 95       	ror	r24
    39c8:	08 95       	ret

000039ca <__divsf3>:
    39ca:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__divsf3x>
    39ce:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_round>
    39d2:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fp_pscB>
    39d6:	58 f0       	brcs	.+22     	; 0x39ee <__divsf3+0x24>
    39d8:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__fp_pscA>
    39dc:	40 f0       	brcs	.+16     	; 0x39ee <__divsf3+0x24>
    39de:	29 f4       	brne	.+10     	; 0x39ea <__divsf3+0x20>
    39e0:	5f 3f       	cpi	r21, 0xFF	; 255
    39e2:	29 f0       	breq	.+10     	; 0x39ee <__divsf3+0x24>
    39e4:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__fp_inf>
    39e8:	51 11       	cpse	r21, r1
    39ea:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__fp_szero>
    39ee:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__fp_nan>

000039f2 <__divsf3x>:
    39f2:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fp_split3>
    39f6:	68 f3       	brcs	.-38     	; 0x39d2 <__divsf3+0x8>

000039f8 <__divsf3_pse>:
    39f8:	99 23       	and	r25, r25
    39fa:	b1 f3       	breq	.-20     	; 0x39e8 <__divsf3+0x1e>
    39fc:	55 23       	and	r21, r21
    39fe:	91 f3       	breq	.-28     	; 0x39e4 <__divsf3+0x1a>
    3a00:	95 1b       	sub	r25, r21
    3a02:	55 0b       	sbc	r21, r21
    3a04:	bb 27       	eor	r27, r27
    3a06:	aa 27       	eor	r26, r26
    3a08:	62 17       	cp	r22, r18
    3a0a:	73 07       	cpc	r23, r19
    3a0c:	84 07       	cpc	r24, r20
    3a0e:	38 f0       	brcs	.+14     	; 0x3a1e <__divsf3_pse+0x26>
    3a10:	9f 5f       	subi	r25, 0xFF	; 255
    3a12:	5f 4f       	sbci	r21, 0xFF	; 255
    3a14:	22 0f       	add	r18, r18
    3a16:	33 1f       	adc	r19, r19
    3a18:	44 1f       	adc	r20, r20
    3a1a:	aa 1f       	adc	r26, r26
    3a1c:	a9 f3       	breq	.-22     	; 0x3a08 <__divsf3_pse+0x10>
    3a1e:	35 d0       	rcall	.+106    	; 0x3a8a <__divsf3_pse+0x92>
    3a20:	0e 2e       	mov	r0, r30
    3a22:	3a f0       	brmi	.+14     	; 0x3a32 <__divsf3_pse+0x3a>
    3a24:	e0 e8       	ldi	r30, 0x80	; 128
    3a26:	32 d0       	rcall	.+100    	; 0x3a8c <__divsf3_pse+0x94>
    3a28:	91 50       	subi	r25, 0x01	; 1
    3a2a:	50 40       	sbci	r21, 0x00	; 0
    3a2c:	e6 95       	lsr	r30
    3a2e:	00 1c       	adc	r0, r0
    3a30:	ca f7       	brpl	.-14     	; 0x3a24 <__divsf3_pse+0x2c>
    3a32:	2b d0       	rcall	.+86     	; 0x3a8a <__divsf3_pse+0x92>
    3a34:	fe 2f       	mov	r31, r30
    3a36:	29 d0       	rcall	.+82     	; 0x3a8a <__divsf3_pse+0x92>
    3a38:	66 0f       	add	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	88 1f       	adc	r24, r24
    3a3e:	bb 1f       	adc	r27, r27
    3a40:	26 17       	cp	r18, r22
    3a42:	37 07       	cpc	r19, r23
    3a44:	48 07       	cpc	r20, r24
    3a46:	ab 07       	cpc	r26, r27
    3a48:	b0 e8       	ldi	r27, 0x80	; 128
    3a4a:	09 f0       	breq	.+2      	; 0x3a4e <__divsf3_pse+0x56>
    3a4c:	bb 0b       	sbc	r27, r27
    3a4e:	80 2d       	mov	r24, r0
    3a50:	bf 01       	movw	r22, r30
    3a52:	ff 27       	eor	r31, r31
    3a54:	93 58       	subi	r25, 0x83	; 131
    3a56:	5f 4f       	sbci	r21, 0xFF	; 255
    3a58:	3a f0       	brmi	.+14     	; 0x3a68 <__divsf3_pse+0x70>
    3a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a5c:	51 05       	cpc	r21, r1
    3a5e:	78 f0       	brcs	.+30     	; 0x3a7e <__divsf3_pse+0x86>
    3a60:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__fp_inf>
    3a64:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__fp_szero>
    3a68:	5f 3f       	cpi	r21, 0xFF	; 255
    3a6a:	e4 f3       	brlt	.-8      	; 0x3a64 <__divsf3_pse+0x6c>
    3a6c:	98 3e       	cpi	r25, 0xE8	; 232
    3a6e:	d4 f3       	brlt	.-12     	; 0x3a64 <__divsf3_pse+0x6c>
    3a70:	86 95       	lsr	r24
    3a72:	77 95       	ror	r23
    3a74:	67 95       	ror	r22
    3a76:	b7 95       	ror	r27
    3a78:	f7 95       	ror	r31
    3a7a:	9f 5f       	subi	r25, 0xFF	; 255
    3a7c:	c9 f7       	brne	.-14     	; 0x3a70 <__divsf3_pse+0x78>
    3a7e:	88 0f       	add	r24, r24
    3a80:	91 1d       	adc	r25, r1
    3a82:	96 95       	lsr	r25
    3a84:	87 95       	ror	r24
    3a86:	97 f9       	bld	r25, 7
    3a88:	08 95       	ret
    3a8a:	e1 e0       	ldi	r30, 0x01	; 1
    3a8c:	66 0f       	add	r22, r22
    3a8e:	77 1f       	adc	r23, r23
    3a90:	88 1f       	adc	r24, r24
    3a92:	bb 1f       	adc	r27, r27
    3a94:	62 17       	cp	r22, r18
    3a96:	73 07       	cpc	r23, r19
    3a98:	84 07       	cpc	r24, r20
    3a9a:	ba 07       	cpc	r27, r26
    3a9c:	20 f0       	brcs	.+8      	; 0x3aa6 <__divsf3_pse+0xae>
    3a9e:	62 1b       	sub	r22, r18
    3aa0:	73 0b       	sbc	r23, r19
    3aa2:	84 0b       	sbc	r24, r20
    3aa4:	ba 0b       	sbc	r27, r26
    3aa6:	ee 1f       	adc	r30, r30
    3aa8:	88 f7       	brcc	.-30     	; 0x3a8c <__divsf3_pse+0x94>
    3aaa:	e0 95       	com	r30
    3aac:	08 95       	ret

00003aae <__fixsfsi>:
    3aae:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__fixunssfsi>
    3ab2:	68 94       	set
    3ab4:	b1 11       	cpse	r27, r1
    3ab6:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__fp_szero>
    3aba:	08 95       	ret

00003abc <__fixunssfsi>:
    3abc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__fp_splitA>
    3ac0:	88 f0       	brcs	.+34     	; 0x3ae4 <__fixunssfsi+0x28>
    3ac2:	9f 57       	subi	r25, 0x7F	; 127
    3ac4:	98 f0       	brcs	.+38     	; 0x3aec <__fixunssfsi+0x30>
    3ac6:	b9 2f       	mov	r27, r25
    3ac8:	99 27       	eor	r25, r25
    3aca:	b7 51       	subi	r27, 0x17	; 23
    3acc:	b0 f0       	brcs	.+44     	; 0x3afa <__fixunssfsi+0x3e>
    3ace:	e1 f0       	breq	.+56     	; 0x3b08 <__fixunssfsi+0x4c>
    3ad0:	66 0f       	add	r22, r22
    3ad2:	77 1f       	adc	r23, r23
    3ad4:	88 1f       	adc	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	1a f0       	brmi	.+6      	; 0x3ae0 <__fixunssfsi+0x24>
    3ada:	ba 95       	dec	r27
    3adc:	c9 f7       	brne	.-14     	; 0x3ad0 <__fixunssfsi+0x14>
    3ade:	14 c0       	rjmp	.+40     	; 0x3b08 <__fixunssfsi+0x4c>
    3ae0:	b1 30       	cpi	r27, 0x01	; 1
    3ae2:	91 f0       	breq	.+36     	; 0x3b08 <__fixunssfsi+0x4c>
    3ae4:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__fp_zero>
    3ae8:	b1 e0       	ldi	r27, 0x01	; 1
    3aea:	08 95       	ret
    3aec:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__fp_zero>
    3af0:	67 2f       	mov	r22, r23
    3af2:	78 2f       	mov	r23, r24
    3af4:	88 27       	eor	r24, r24
    3af6:	b8 5f       	subi	r27, 0xF8	; 248
    3af8:	39 f0       	breq	.+14     	; 0x3b08 <__fixunssfsi+0x4c>
    3afa:	b9 3f       	cpi	r27, 0xF9	; 249
    3afc:	cc f3       	brlt	.-14     	; 0x3af0 <__fixunssfsi+0x34>
    3afe:	86 95       	lsr	r24
    3b00:	77 95       	ror	r23
    3b02:	67 95       	ror	r22
    3b04:	b3 95       	inc	r27
    3b06:	d9 f7       	brne	.-10     	; 0x3afe <__fixunssfsi+0x42>
    3b08:	3e f4       	brtc	.+14     	; 0x3b18 <__fixunssfsi+0x5c>
    3b0a:	90 95       	com	r25
    3b0c:	80 95       	com	r24
    3b0e:	70 95       	com	r23
    3b10:	61 95       	neg	r22
    3b12:	7f 4f       	sbci	r23, 0xFF	; 255
    3b14:	8f 4f       	sbci	r24, 0xFF	; 255
    3b16:	9f 4f       	sbci	r25, 0xFF	; 255
    3b18:	08 95       	ret

00003b1a <__floatunsisf>:
    3b1a:	e8 94       	clt
    3b1c:	09 c0       	rjmp	.+18     	; 0x3b30 <__floatsisf+0x12>

00003b1e <__floatsisf>:
    3b1e:	97 fb       	bst	r25, 7
    3b20:	3e f4       	brtc	.+14     	; 0x3b30 <__floatsisf+0x12>
    3b22:	90 95       	com	r25
    3b24:	80 95       	com	r24
    3b26:	70 95       	com	r23
    3b28:	61 95       	neg	r22
    3b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b30:	99 23       	and	r25, r25
    3b32:	a9 f0       	breq	.+42     	; 0x3b5e <__floatsisf+0x40>
    3b34:	f9 2f       	mov	r31, r25
    3b36:	96 e9       	ldi	r25, 0x96	; 150
    3b38:	bb 27       	eor	r27, r27
    3b3a:	93 95       	inc	r25
    3b3c:	f6 95       	lsr	r31
    3b3e:	87 95       	ror	r24
    3b40:	77 95       	ror	r23
    3b42:	67 95       	ror	r22
    3b44:	b7 95       	ror	r27
    3b46:	f1 11       	cpse	r31, r1
    3b48:	f8 cf       	rjmp	.-16     	; 0x3b3a <__floatsisf+0x1c>
    3b4a:	fa f4       	brpl	.+62     	; 0x3b8a <__floatsisf+0x6c>
    3b4c:	bb 0f       	add	r27, r27
    3b4e:	11 f4       	brne	.+4      	; 0x3b54 <__floatsisf+0x36>
    3b50:	60 ff       	sbrs	r22, 0
    3b52:	1b c0       	rjmp	.+54     	; 0x3b8a <__floatsisf+0x6c>
    3b54:	6f 5f       	subi	r22, 0xFF	; 255
    3b56:	7f 4f       	sbci	r23, 0xFF	; 255
    3b58:	8f 4f       	sbci	r24, 0xFF	; 255
    3b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5c:	16 c0       	rjmp	.+44     	; 0x3b8a <__floatsisf+0x6c>
    3b5e:	88 23       	and	r24, r24
    3b60:	11 f0       	breq	.+4      	; 0x3b66 <__floatsisf+0x48>
    3b62:	96 e9       	ldi	r25, 0x96	; 150
    3b64:	11 c0       	rjmp	.+34     	; 0x3b88 <__floatsisf+0x6a>
    3b66:	77 23       	and	r23, r23
    3b68:	21 f0       	breq	.+8      	; 0x3b72 <__floatsisf+0x54>
    3b6a:	9e e8       	ldi	r25, 0x8E	; 142
    3b6c:	87 2f       	mov	r24, r23
    3b6e:	76 2f       	mov	r23, r22
    3b70:	05 c0       	rjmp	.+10     	; 0x3b7c <__floatsisf+0x5e>
    3b72:	66 23       	and	r22, r22
    3b74:	71 f0       	breq	.+28     	; 0x3b92 <__floatsisf+0x74>
    3b76:	96 e8       	ldi	r25, 0x86	; 134
    3b78:	86 2f       	mov	r24, r22
    3b7a:	70 e0       	ldi	r23, 0x00	; 0
    3b7c:	60 e0       	ldi	r22, 0x00	; 0
    3b7e:	2a f0       	brmi	.+10     	; 0x3b8a <__floatsisf+0x6c>
    3b80:	9a 95       	dec	r25
    3b82:	66 0f       	add	r22, r22
    3b84:	77 1f       	adc	r23, r23
    3b86:	88 1f       	adc	r24, r24
    3b88:	da f7       	brpl	.-10     	; 0x3b80 <__floatsisf+0x62>
    3b8a:	88 0f       	add	r24, r24
    3b8c:	96 95       	lsr	r25
    3b8e:	87 95       	ror	r24
    3b90:	97 f9       	bld	r25, 7
    3b92:	08 95       	ret

00003b94 <__fp_inf>:
    3b94:	97 f9       	bld	r25, 7
    3b96:	9f 67       	ori	r25, 0x7F	; 127
    3b98:	80 e8       	ldi	r24, 0x80	; 128
    3b9a:	70 e0       	ldi	r23, 0x00	; 0
    3b9c:	60 e0       	ldi	r22, 0x00	; 0
    3b9e:	08 95       	ret

00003ba0 <__fp_nan>:
    3ba0:	9f ef       	ldi	r25, 0xFF	; 255
    3ba2:	80 ec       	ldi	r24, 0xC0	; 192
    3ba4:	08 95       	ret

00003ba6 <__fp_pscA>:
    3ba6:	00 24       	eor	r0, r0
    3ba8:	0a 94       	dec	r0
    3baa:	16 16       	cp	r1, r22
    3bac:	17 06       	cpc	r1, r23
    3bae:	18 06       	cpc	r1, r24
    3bb0:	09 06       	cpc	r0, r25
    3bb2:	08 95       	ret

00003bb4 <__fp_pscB>:
    3bb4:	00 24       	eor	r0, r0
    3bb6:	0a 94       	dec	r0
    3bb8:	12 16       	cp	r1, r18
    3bba:	13 06       	cpc	r1, r19
    3bbc:	14 06       	cpc	r1, r20
    3bbe:	05 06       	cpc	r0, r21
    3bc0:	08 95       	ret

00003bc2 <__fp_round>:
    3bc2:	09 2e       	mov	r0, r25
    3bc4:	03 94       	inc	r0
    3bc6:	00 0c       	add	r0, r0
    3bc8:	11 f4       	brne	.+4      	; 0x3bce <__fp_round+0xc>
    3bca:	88 23       	and	r24, r24
    3bcc:	52 f0       	brmi	.+20     	; 0x3be2 <__fp_round+0x20>
    3bce:	bb 0f       	add	r27, r27
    3bd0:	40 f4       	brcc	.+16     	; 0x3be2 <__fp_round+0x20>
    3bd2:	bf 2b       	or	r27, r31
    3bd4:	11 f4       	brne	.+4      	; 0x3bda <__fp_round+0x18>
    3bd6:	60 ff       	sbrs	r22, 0
    3bd8:	04 c0       	rjmp	.+8      	; 0x3be2 <__fp_round+0x20>
    3bda:	6f 5f       	subi	r22, 0xFF	; 255
    3bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bde:	8f 4f       	sbci	r24, 0xFF	; 255
    3be0:	9f 4f       	sbci	r25, 0xFF	; 255
    3be2:	08 95       	ret

00003be4 <__fp_split3>:
    3be4:	57 fd       	sbrc	r21, 7
    3be6:	90 58       	subi	r25, 0x80	; 128
    3be8:	44 0f       	add	r20, r20
    3bea:	55 1f       	adc	r21, r21
    3bec:	59 f0       	breq	.+22     	; 0x3c04 <__fp_splitA+0x10>
    3bee:	5f 3f       	cpi	r21, 0xFF	; 255
    3bf0:	71 f0       	breq	.+28     	; 0x3c0e <__fp_splitA+0x1a>
    3bf2:	47 95       	ror	r20

00003bf4 <__fp_splitA>:
    3bf4:	88 0f       	add	r24, r24
    3bf6:	97 fb       	bst	r25, 7
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	61 f0       	breq	.+24     	; 0x3c14 <__fp_splitA+0x20>
    3bfc:	9f 3f       	cpi	r25, 0xFF	; 255
    3bfe:	79 f0       	breq	.+30     	; 0x3c1e <__fp_splitA+0x2a>
    3c00:	87 95       	ror	r24
    3c02:	08 95       	ret
    3c04:	12 16       	cp	r1, r18
    3c06:	13 06       	cpc	r1, r19
    3c08:	14 06       	cpc	r1, r20
    3c0a:	55 1f       	adc	r21, r21
    3c0c:	f2 cf       	rjmp	.-28     	; 0x3bf2 <__fp_split3+0xe>
    3c0e:	46 95       	lsr	r20
    3c10:	f1 df       	rcall	.-30     	; 0x3bf4 <__fp_splitA>
    3c12:	08 c0       	rjmp	.+16     	; 0x3c24 <__fp_splitA+0x30>
    3c14:	16 16       	cp	r1, r22
    3c16:	17 06       	cpc	r1, r23
    3c18:	18 06       	cpc	r1, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	f1 cf       	rjmp	.-30     	; 0x3c00 <__fp_splitA+0xc>
    3c1e:	86 95       	lsr	r24
    3c20:	71 05       	cpc	r23, r1
    3c22:	61 05       	cpc	r22, r1
    3c24:	08 94       	sec
    3c26:	08 95       	ret

00003c28 <__fp_zero>:
    3c28:	e8 94       	clt

00003c2a <__fp_szero>:
    3c2a:	bb 27       	eor	r27, r27
    3c2c:	66 27       	eor	r22, r22
    3c2e:	77 27       	eor	r23, r23
    3c30:	cb 01       	movw	r24, r22
    3c32:	97 f9       	bld	r25, 7
    3c34:	08 95       	ret

00003c36 <__gesf2>:
    3c36:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__fp_cmp>
    3c3a:	08 f4       	brcc	.+2      	; 0x3c3e <__gesf2+0x8>
    3c3c:	8f ef       	ldi	r24, 0xFF	; 255
    3c3e:	08 95       	ret

00003c40 <__mulsf3>:
    3c40:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__mulsf3x>
    3c44:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__fp_round>
    3c48:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__fp_pscA>
    3c4c:	38 f0       	brcs	.+14     	; 0x3c5c <__mulsf3+0x1c>
    3c4e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fp_pscB>
    3c52:	20 f0       	brcs	.+8      	; 0x3c5c <__mulsf3+0x1c>
    3c54:	95 23       	and	r25, r21
    3c56:	11 f0       	breq	.+4      	; 0x3c5c <__mulsf3+0x1c>
    3c58:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__fp_inf>
    3c5c:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__fp_nan>
    3c60:	11 24       	eor	r1, r1
    3c62:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__fp_szero>

00003c66 <__mulsf3x>:
    3c66:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fp_split3>
    3c6a:	70 f3       	brcs	.-36     	; 0x3c48 <__mulsf3+0x8>

00003c6c <__mulsf3_pse>:
    3c6c:	95 9f       	mul	r25, r21
    3c6e:	c1 f3       	breq	.-16     	; 0x3c60 <__mulsf3+0x20>
    3c70:	95 0f       	add	r25, r21
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	55 1f       	adc	r21, r21
    3c76:	62 9f       	mul	r22, r18
    3c78:	f0 01       	movw	r30, r0
    3c7a:	72 9f       	mul	r23, r18
    3c7c:	bb 27       	eor	r27, r27
    3c7e:	f0 0d       	add	r31, r0
    3c80:	b1 1d       	adc	r27, r1
    3c82:	63 9f       	mul	r22, r19
    3c84:	aa 27       	eor	r26, r26
    3c86:	f0 0d       	add	r31, r0
    3c88:	b1 1d       	adc	r27, r1
    3c8a:	aa 1f       	adc	r26, r26
    3c8c:	64 9f       	mul	r22, r20
    3c8e:	66 27       	eor	r22, r22
    3c90:	b0 0d       	add	r27, r0
    3c92:	a1 1d       	adc	r26, r1
    3c94:	66 1f       	adc	r22, r22
    3c96:	82 9f       	mul	r24, r18
    3c98:	22 27       	eor	r18, r18
    3c9a:	b0 0d       	add	r27, r0
    3c9c:	a1 1d       	adc	r26, r1
    3c9e:	62 1f       	adc	r22, r18
    3ca0:	73 9f       	mul	r23, r19
    3ca2:	b0 0d       	add	r27, r0
    3ca4:	a1 1d       	adc	r26, r1
    3ca6:	62 1f       	adc	r22, r18
    3ca8:	83 9f       	mul	r24, r19
    3caa:	a0 0d       	add	r26, r0
    3cac:	61 1d       	adc	r22, r1
    3cae:	22 1f       	adc	r18, r18
    3cb0:	74 9f       	mul	r23, r20
    3cb2:	33 27       	eor	r19, r19
    3cb4:	a0 0d       	add	r26, r0
    3cb6:	61 1d       	adc	r22, r1
    3cb8:	23 1f       	adc	r18, r19
    3cba:	84 9f       	mul	r24, r20
    3cbc:	60 0d       	add	r22, r0
    3cbe:	21 1d       	adc	r18, r1
    3cc0:	82 2f       	mov	r24, r18
    3cc2:	76 2f       	mov	r23, r22
    3cc4:	6a 2f       	mov	r22, r26
    3cc6:	11 24       	eor	r1, r1
    3cc8:	9f 57       	subi	r25, 0x7F	; 127
    3cca:	50 40       	sbci	r21, 0x00	; 0
    3ccc:	9a f0       	brmi	.+38     	; 0x3cf4 <__mulsf3_pse+0x88>
    3cce:	f1 f0       	breq	.+60     	; 0x3d0c <__mulsf3_pse+0xa0>
    3cd0:	88 23       	and	r24, r24
    3cd2:	4a f0       	brmi	.+18     	; 0x3ce6 <__mulsf3_pse+0x7a>
    3cd4:	ee 0f       	add	r30, r30
    3cd6:	ff 1f       	adc	r31, r31
    3cd8:	bb 1f       	adc	r27, r27
    3cda:	66 1f       	adc	r22, r22
    3cdc:	77 1f       	adc	r23, r23
    3cde:	88 1f       	adc	r24, r24
    3ce0:	91 50       	subi	r25, 0x01	; 1
    3ce2:	50 40       	sbci	r21, 0x00	; 0
    3ce4:	a9 f7       	brne	.-22     	; 0x3cd0 <__mulsf3_pse+0x64>
    3ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ce8:	51 05       	cpc	r21, r1
    3cea:	80 f0       	brcs	.+32     	; 0x3d0c <__mulsf3_pse+0xa0>
    3cec:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__fp_inf>
    3cf0:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__fp_szero>
    3cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf6:	e4 f3       	brlt	.-8      	; 0x3cf0 <__mulsf3_pse+0x84>
    3cf8:	98 3e       	cpi	r25, 0xE8	; 232
    3cfa:	d4 f3       	brlt	.-12     	; 0x3cf0 <__mulsf3_pse+0x84>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b7 95       	ror	r27
    3d04:	f7 95       	ror	r31
    3d06:	e7 95       	ror	r30
    3d08:	9f 5f       	subi	r25, 0xFF	; 255
    3d0a:	c1 f7       	brne	.-16     	; 0x3cfc <__mulsf3_pse+0x90>
    3d0c:	fe 2b       	or	r31, r30
    3d0e:	88 0f       	add	r24, r24
    3d10:	91 1d       	adc	r25, r1
    3d12:	96 95       	lsr	r25
    3d14:	87 95       	ror	r24
    3d16:	97 f9       	bld	r25, 7
    3d18:	08 95       	ret

00003d1a <__fp_cmp>:
    3d1a:	99 0f       	add	r25, r25
    3d1c:	00 08       	sbc	r0, r0
    3d1e:	55 0f       	add	r21, r21
    3d20:	aa 0b       	sbc	r26, r26
    3d22:	e0 e8       	ldi	r30, 0x80	; 128
    3d24:	fe ef       	ldi	r31, 0xFE	; 254
    3d26:	16 16       	cp	r1, r22
    3d28:	17 06       	cpc	r1, r23
    3d2a:	e8 07       	cpc	r30, r24
    3d2c:	f9 07       	cpc	r31, r25
    3d2e:	c0 f0       	brcs	.+48     	; 0x3d60 <__fp_cmp+0x46>
    3d30:	12 16       	cp	r1, r18
    3d32:	13 06       	cpc	r1, r19
    3d34:	e4 07       	cpc	r30, r20
    3d36:	f5 07       	cpc	r31, r21
    3d38:	98 f0       	brcs	.+38     	; 0x3d60 <__fp_cmp+0x46>
    3d3a:	62 1b       	sub	r22, r18
    3d3c:	73 0b       	sbc	r23, r19
    3d3e:	84 0b       	sbc	r24, r20
    3d40:	95 0b       	sbc	r25, r21
    3d42:	39 f4       	brne	.+14     	; 0x3d52 <__fp_cmp+0x38>
    3d44:	0a 26       	eor	r0, r26
    3d46:	61 f0       	breq	.+24     	; 0x3d60 <__fp_cmp+0x46>
    3d48:	23 2b       	or	r18, r19
    3d4a:	24 2b       	or	r18, r20
    3d4c:	25 2b       	or	r18, r21
    3d4e:	21 f4       	brne	.+8      	; 0x3d58 <__fp_cmp+0x3e>
    3d50:	08 95       	ret
    3d52:	0a 26       	eor	r0, r26
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <__fp_cmp+0x3e>
    3d56:	a1 40       	sbci	r26, 0x01	; 1
    3d58:	a6 95       	lsr	r26
    3d5a:	8f ef       	ldi	r24, 0xFF	; 255
    3d5c:	81 1d       	adc	r24, r1
    3d5e:	81 1d       	adc	r24, r1
    3d60:	08 95       	ret

00003d62 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3d62:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3d64:	91 8d       	ldd	r25, Z+25	; 0x19
    3d66:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d68:	89 2f       	mov	r24, r25
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	80 5c       	subi	r24, 0xC0	; 192
    3d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d70:	82 1b       	sub	r24, r18
    3d72:	91 09       	sbc	r25, r1
}
    3d74:	8f 73       	andi	r24, 0x3F	; 63
    3d76:	99 27       	eor	r25, r25
    3d78:	08 95       	ret

00003d7a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3d7a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d7c:	91 8d       	ldd	r25, Z+25	; 0x19
    3d7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d80:	98 17       	cp	r25, r24
    3d82:	31 f0       	breq	.+12     	; 0x3d90 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3d84:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d86:	e8 0f       	add	r30, r24
    3d88:	f1 1d       	adc	r31, r1
    3d8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d90:	8f ef       	ldi	r24, 0xFF	; 255
    3d92:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3d94:	08 95       	ret

00003d96 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3d96:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d98:	91 8d       	ldd	r25, Z+25	; 0x19
    3d9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d9c:	98 17       	cp	r25, r24
    3d9e:	61 f0       	breq	.+24     	; 0x3db8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3da0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3da2:	df 01       	movw	r26, r30
    3da4:	a8 0f       	add	r26, r24
    3da6:	b1 1d       	adc	r27, r1
    3da8:	5d 96       	adiw	r26, 0x1d	; 29
    3daa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3dac:	92 8d       	ldd	r25, Z+26	; 0x1a
    3dae:	9f 5f       	subi	r25, 0xFF	; 255
    3db0:	9f 73       	andi	r25, 0x3F	; 63
    3db2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3db8:	8f ef       	ldi	r24, 0xFF	; 255
    3dba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3dbc:	08 95       	ret

00003dbe <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3dbe:	84 e3       	ldi	r24, 0x34	; 52
    3dc0:	90 e2       	ldi	r25, 0x20	; 32
    3dc2:	89 2b       	or	r24, r25
    3dc4:	49 f0       	breq	.+18     	; 0x3dd8 <_Z14serialEventRunv+0x1a>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	89 2b       	or	r24, r25
    3dcc:	29 f0       	breq	.+10     	; 0x3dd8 <_Z14serialEventRunv+0x1a>
    3dce:	0e 94 34 20 	call	0x4068	; 0x4068 <_Z17Serial0_availablev>
    3dd2:	81 11       	cpse	r24, r1
    3dd4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3dd8:	08 95       	ret

00003dda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3dda:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3ddc:	84 8d       	ldd	r24, Z+28	; 0x1c
    3dde:	df 01       	movw	r26, r30
    3de0:	a8 0f       	add	r26, r24
    3de2:	b1 1d       	adc	r27, r1
    3de4:	a3 5a       	subi	r26, 0xA3	; 163
    3de6:	bf 4f       	sbci	r27, 0xFF	; 255
    3de8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3dea:	84 8d       	ldd	r24, Z+28	; 0x1c
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	01 96       	adiw	r24, 0x01	; 1
    3df0:	8f 73       	andi	r24, 0x3F	; 63
    3df2:	99 27       	eor	r25, r25
    3df4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3df6:	a6 89       	ldd	r26, Z+22	; 0x16
    3df8:	b7 89       	ldd	r27, Z+23	; 0x17
    3dfa:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3dfc:	a0 89       	ldd	r26, Z+16	; 0x10
    3dfe:	b1 89       	ldd	r27, Z+17	; 0x11
    3e00:	8c 91       	ld	r24, X
    3e02:	80 64       	ori	r24, 0x40	; 64
    3e04:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3e06:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e08:	84 8d       	ldd	r24, Z+28	; 0x1c
    3e0a:	98 13       	cpse	r25, r24
    3e0c:	06 c0       	rjmp	.+12     	; 0x3e1a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3e0e:	02 88       	ldd	r0, Z+18	; 0x12
    3e10:	f3 89       	ldd	r31, Z+19	; 0x13
    3e12:	e0 2d       	mov	r30, r0
    3e14:	80 81       	ld	r24, Z
    3e16:	8f 7d       	andi	r24, 0xDF	; 223
    3e18:	80 83       	st	Z, r24
    3e1a:	08 95       	ret

00003e1c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3e1c:	ef 92       	push	r14
    3e1e:	ff 92       	push	r15
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	cf 93       	push	r28
    3e26:	df 93       	push	r29
    3e28:	ec 01       	movw	r28, r24
  _written = true;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3e2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e32:	98 13       	cpse	r25, r24
    3e34:	05 c0       	rjmp	.+10     	; 0x3e40 <_ZN14HardwareSerial5writeEh+0x24>
    3e36:	e8 89       	ldd	r30, Y+16	; 0x10
    3e38:	f9 89       	ldd	r31, Y+17	; 0x11
    3e3a:	80 81       	ld	r24, Z
    3e3c:	85 fd       	sbrc	r24, 5
    3e3e:	24 c0       	rjmp	.+72     	; 0x3e88 <_ZN14HardwareSerial5writeEh+0x6c>
    3e40:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3e42:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3e44:	10 e0       	ldi	r17, 0x00	; 0
    3e46:	0f 5f       	subi	r16, 0xFF	; 255
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4a:	0f 73       	andi	r16, 0x3F	; 63
    3e4c:	11 27       	eor	r17, r17
    3e4e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3e50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e52:	e8 12       	cpse	r14, r24
    3e54:	0c c0       	rjmp	.+24     	; 0x3e6e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	07 fc       	sbrc	r0, 7
    3e5a:	fa cf       	rjmp	.-12     	; 0x3e50 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3e5c:	e8 89       	ldd	r30, Y+16	; 0x10
    3e5e:	f9 89       	ldd	r31, Y+17	; 0x11
    3e60:	80 81       	ld	r24, Z
    3e62:	85 ff       	sbrs	r24, 5
    3e64:	f5 cf       	rjmp	.-22     	; 0x3e50 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3e66:	ce 01       	movw	r24, r28
    3e68:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e6c:	f1 cf       	rjmp	.-30     	; 0x3e50 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e70:	fe 01       	movw	r30, r28
    3e72:	e8 0f       	add	r30, r24
    3e74:	f1 1d       	adc	r31, r1
    3e76:	e3 5a       	subi	r30, 0xA3	; 163
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3e7c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3e7e:	ea 89       	ldd	r30, Y+18	; 0x12
    3e80:	fb 89       	ldd	r31, Y+19	; 0x13
    3e82:	80 81       	ld	r24, Z
    3e84:	80 62       	ori	r24, 0x20	; 32
    3e86:	07 c0       	rjmp	.+14     	; 0x3e96 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3e88:	ee 89       	ldd	r30, Y+22	; 0x16
    3e8a:	ff 89       	ldd	r31, Y+23	; 0x17
    3e8c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3e8e:	e8 89       	ldd	r30, Y+16	; 0x10
    3e90:	f9 89       	ldd	r31, Y+17	; 0x11
    3e92:	80 81       	ld	r24, Z
    3e94:	80 64       	ori	r24, 0x40	; 64
    3e96:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	1f 91       	pop	r17
    3ea2:	0f 91       	pop	r16
    3ea4:	ff 90       	pop	r15
    3ea6:	ef 90       	pop	r14
    3ea8:	08 95       	ret

00003eaa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3eb0:	88 8d       	ldd	r24, Y+24	; 0x18
    3eb2:	88 23       	and	r24, r24
    3eb4:	c9 f0       	breq	.+50     	; 0x3ee8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3eb6:	ea 89       	ldd	r30, Y+18	; 0x12
    3eb8:	fb 89       	ldd	r31, Y+19	; 0x13
    3eba:	80 81       	ld	r24, Z
    3ebc:	85 fd       	sbrc	r24, 5
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <_ZN14HardwareSerial5flushEv+0x20>
    3ec0:	a8 89       	ldd	r26, Y+16	; 0x10
    3ec2:	b9 89       	ldd	r27, Y+17	; 0x11
    3ec4:	8c 91       	ld	r24, X
    3ec6:	86 fd       	sbrc	r24, 6
    3ec8:	0f c0       	rjmp	.+30     	; 0x3ee8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	07 fc       	sbrc	r0, 7
    3ece:	f5 cf       	rjmp	.-22     	; 0x3eba <_ZN14HardwareSerial5flushEv+0x10>
    3ed0:	80 81       	ld	r24, Z
    3ed2:	85 ff       	sbrs	r24, 5
    3ed4:	f2 cf       	rjmp	.-28     	; 0x3eba <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3ed6:	a8 89       	ldd	r26, Y+16	; 0x10
    3ed8:	b9 89       	ldd	r27, Y+17	; 0x11
    3eda:	8c 91       	ld	r24, X
    3edc:	85 ff       	sbrs	r24, 5
    3ede:	ed cf       	rjmp	.-38     	; 0x3eba <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ee6:	e7 cf       	rjmp	.-50     	; 0x3eb6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	08 95       	ret

00003eee <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3eee:	cf 92       	push	r12
    3ef0:	df 92       	push	r13
    3ef2:	ef 92       	push	r14
    3ef4:	ff 92       	push	r15
    3ef6:	1f 93       	push	r17
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	ec 01       	movw	r28, r24
    3efe:	6a 01       	movw	r12, r20
    3f00:	7b 01       	movw	r14, r22
    3f02:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3f04:	e8 89       	ldd	r30, Y+16	; 0x10
    3f06:	f9 89       	ldd	r31, Y+17	; 0x11
    3f08:	82 e0       	ldi	r24, 0x02	; 2
    3f0a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3f0c:	41 15       	cp	r20, r1
    3f0e:	51 4e       	sbci	r21, 0xE1	; 225
    3f10:	61 05       	cpc	r22, r1
    3f12:	71 05       	cpc	r23, r1
    3f14:	b1 f0       	breq	.+44     	; 0x3f42 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3f16:	60 e0       	ldi	r22, 0x00	; 0
    3f18:	79 e0       	ldi	r23, 0x09	; 9
    3f1a:	8d e3       	ldi	r24, 0x3D	; 61
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	a7 01       	movw	r20, r14
    3f20:	96 01       	movw	r18, r12
    3f22:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    3f26:	da 01       	movw	r26, r20
    3f28:	c9 01       	movw	r24, r18
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	a1 09       	sbc	r26, r1
    3f2e:	b1 09       	sbc	r27, r1
    3f30:	b6 95       	lsr	r27
    3f32:	a7 95       	ror	r26
    3f34:	97 95       	ror	r25
    3f36:	87 95       	ror	r24
    3f38:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3f3a:	21 15       	cp	r18, r1
    3f3c:	80 e1       	ldi	r24, 0x10	; 16
    3f3e:	38 07       	cpc	r19, r24
    3f40:	a8 f0       	brcs	.+42     	; 0x3f6c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3f42:	e8 89       	ldd	r30, Y+16	; 0x10
    3f44:	f9 89       	ldd	r31, Y+17	; 0x11
    3f46:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3f48:	60 e8       	ldi	r22, 0x80	; 128
    3f4a:	74 e8       	ldi	r23, 0x84	; 132
    3f4c:	8e e1       	ldi	r24, 0x1E	; 30
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	a7 01       	movw	r20, r14
    3f52:	96 01       	movw	r18, r12
    3f54:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    3f58:	da 01       	movw	r26, r20
    3f5a:	c9 01       	movw	r24, r18
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	a1 09       	sbc	r26, r1
    3f60:	b1 09       	sbc	r27, r1
    3f62:	b6 95       	lsr	r27
    3f64:	a7 95       	ror	r26
    3f66:	97 95       	ror	r25
    3f68:	87 95       	ror	r24
    3f6a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3f6c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f6e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f70:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3f72:	ee 85       	ldd	r30, Y+14	; 0x0e
    3f74:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f76:	20 83       	st	Z, r18

  _written = false;
    3f78:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3f7a:	ec 89       	ldd	r30, Y+20	; 0x14
    3f7c:	fd 89       	ldd	r31, Y+21	; 0x15
    3f7e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3f80:	ea 89       	ldd	r30, Y+18	; 0x12
    3f82:	fb 89       	ldd	r31, Y+19	; 0x13
    3f84:	80 81       	ld	r24, Z
    3f86:	80 61       	ori	r24, 0x10	; 16
    3f88:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3f8a:	ea 89       	ldd	r30, Y+18	; 0x12
    3f8c:	fb 89       	ldd	r31, Y+19	; 0x13
    3f8e:	80 81       	ld	r24, Z
    3f90:	88 60       	ori	r24, 0x08	; 8
    3f92:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3f94:	ea 89       	ldd	r30, Y+18	; 0x12
    3f96:	fb 89       	ldd	r31, Y+19	; 0x13
    3f98:	80 81       	ld	r24, Z
    3f9a:	80 68       	ori	r24, 0x80	; 128
    3f9c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3f9e:	ea 89       	ldd	r30, Y+18	; 0x12
    3fa0:	fb 89       	ldd	r31, Y+19	; 0x13
    3fa2:	80 81       	ld	r24, Z
    3fa4:	8f 7d       	andi	r24, 0xDF	; 223
    3fa6:	80 83       	st	Z, r24
}
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	ff 90       	pop	r15
    3fb0:	ef 90       	pop	r14
    3fb2:	df 90       	pop	r13
    3fb4:	cf 90       	pop	r12
    3fb6:	08 95       	ret

00003fb8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3fb8:	1f 92       	push	r1
    3fba:	0f 92       	push	r0
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	0f 92       	push	r0
    3fc0:	11 24       	eor	r1, r1
    3fc2:	2f 93       	push	r18
    3fc4:	8f 93       	push	r24
    3fc6:	9f 93       	push	r25
    3fc8:	ef 93       	push	r30
    3fca:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3fcc:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <Serial+0x10>
    3fd0:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <Serial+0x11>
    3fd4:	80 81       	ld	r24, Z
    3fd6:	e0 91 3f 06 	lds	r30, 0x063F	; 0x80063f <Serial+0x16>
    3fda:	f0 91 40 06 	lds	r31, 0x0640	; 0x800640 <Serial+0x17>
    3fde:	82 fd       	sbrc	r24, 2
    3fe0:	12 c0       	rjmp	.+36     	; 0x4006 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3fe2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3fe4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <Serial+0x19>
    3fe8:	8f 5f       	subi	r24, 0xFF	; 255
    3fea:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3fec:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <Serial+0x1a>
    3ff0:	82 17       	cp	r24, r18
    3ff2:	51 f0       	breq	.+20     	; 0x4008 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3ff4:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <Serial+0x19>
    3ff8:	f0 e0       	ldi	r31, 0x00	; 0
    3ffa:	e7 5d       	subi	r30, 0xD7	; 215
    3ffc:	f9 4f       	sbci	r31, 0xF9	; 249
    3ffe:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4000:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <Serial+0x19>
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4006:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4008:	ff 91       	pop	r31
    400a:	ef 91       	pop	r30
    400c:	9f 91       	pop	r25
    400e:	8f 91       	pop	r24
    4010:	2f 91       	pop	r18
    4012:	0f 90       	pop	r0
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	0f 90       	pop	r0
    4018:	1f 90       	pop	r1
    401a:	18 95       	reti

0000401c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    401c:	1f 92       	push	r1
    401e:	0f 92       	push	r0
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	0f 92       	push	r0
    4024:	11 24       	eor	r1, r1
    4026:	2f 93       	push	r18
    4028:	3f 93       	push	r19
    402a:	4f 93       	push	r20
    402c:	5f 93       	push	r21
    402e:	6f 93       	push	r22
    4030:	7f 93       	push	r23
    4032:	8f 93       	push	r24
    4034:	9f 93       	push	r25
    4036:	af 93       	push	r26
    4038:	bf 93       	push	r27
    403a:	ef 93       	push	r30
    403c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    403e:	89 e2       	ldi	r24, 0x29	; 41
    4040:	96 e0       	ldi	r25, 0x06	; 6
    4042:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4046:	ff 91       	pop	r31
    4048:	ef 91       	pop	r30
    404a:	bf 91       	pop	r27
    404c:	af 91       	pop	r26
    404e:	9f 91       	pop	r25
    4050:	8f 91       	pop	r24
    4052:	7f 91       	pop	r23
    4054:	6f 91       	pop	r22
    4056:	5f 91       	pop	r21
    4058:	4f 91       	pop	r20
    405a:	3f 91       	pop	r19
    405c:	2f 91       	pop	r18
    405e:	0f 90       	pop	r0
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	0f 90       	pop	r0
    4064:	1f 90       	pop	r1
    4066:	18 95       	reti

00004068 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4068:	89 e2       	ldi	r24, 0x29	; 41
    406a:	96 e0       	ldi	r25, 0x06	; 6
    406c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <_ZN14HardwareSerial9availableEv>
    4070:	21 e0       	ldi	r18, 0x01	; 1
    4072:	89 2b       	or	r24, r25
    4074:	09 f4       	brne	.+2      	; 0x4078 <_Z17Serial0_availablev+0x10>
    4076:	20 e0       	ldi	r18, 0x00	; 0
}
    4078:	82 2f       	mov	r24, r18
    407a:	08 95       	ret

0000407c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    407c:	e9 e2       	ldi	r30, 0x29	; 41
    407e:	f6 e0       	ldi	r31, 0x06	; 6
    4080:	13 82       	std	Z+3, r1	; 0x03
    4082:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4084:	88 ee       	ldi	r24, 0xE8	; 232
    4086:	93 e0       	ldi	r25, 0x03	; 3
    4088:	a0 e0       	ldi	r26, 0x00	; 0
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	84 83       	std	Z+4, r24	; 0x04
    408e:	95 83       	std	Z+5, r25	; 0x05
    4090:	a6 83       	std	Z+6, r26	; 0x06
    4092:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4094:	86 e7       	ldi	r24, 0x76	; 118
    4096:	93 e0       	ldi	r25, 0x03	; 3
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    409c:	85 ec       	ldi	r24, 0xC5	; 197
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	95 87       	std	Z+13, r25	; 0x0d
    40a2:	84 87       	std	Z+12, r24	; 0x0c
    40a4:	84 ec       	ldi	r24, 0xC4	; 196
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	97 87       	std	Z+15, r25	; 0x0f
    40aa:	86 87       	std	Z+14, r24	; 0x0e
    40ac:	80 ec       	ldi	r24, 0xC0	; 192
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	91 8b       	std	Z+17, r25	; 0x11
    40b2:	80 8b       	std	Z+16, r24	; 0x10
    40b4:	81 ec       	ldi	r24, 0xC1	; 193
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	93 8b       	std	Z+19, r25	; 0x13
    40ba:	82 8b       	std	Z+18, r24	; 0x12
    40bc:	82 ec       	ldi	r24, 0xC2	; 194
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	95 8b       	std	Z+21, r25	; 0x15
    40c2:	84 8b       	std	Z+20, r24	; 0x14
    40c4:	86 ec       	ldi	r24, 0xC6	; 198
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	97 8b       	std	Z+23, r25	; 0x17
    40ca:	86 8b       	std	Z+22, r24	; 0x16
    40cc:	11 8e       	std	Z+25, r1	; 0x19
    40ce:	12 8e       	std	Z+26, r1	; 0x1a
    40d0:	13 8e       	std	Z+27, r1	; 0x1b
    40d2:	14 8e       	std	Z+28, r1	; 0x1c
    40d4:	08 95       	ret

000040d6 <initVariant>:
    40d6:	08 95       	ret

000040d8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    40d8:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <init>

	initVariant();
    40dc:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    40e0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    40e4:	cf ed       	ldi	r28, 0xDF	; 223
    40e6:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    40e8:	0e 94 90 18 	call	0x3120	; 0x3120 <loop>
		if (serialEventRun) serialEventRun();
    40ec:	20 97       	sbiw	r28, 0x00	; 0
    40ee:	e1 f3       	breq	.-8      	; 0x40e8 <main+0x10>
    40f0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z14serialEventRunv>
    40f4:	f9 cf       	rjmp	.-14     	; 0x40e8 <main+0x10>

000040f6 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	6c 01       	movw	r12, r24
    4108:	7a 01       	movw	r14, r20
    410a:	8b 01       	movw	r16, r22
    410c:	c0 e0       	ldi	r28, 0x00	; 0
    410e:	d0 e0       	ldi	r29, 0x00	; 0
    4110:	ce 15       	cp	r28, r14
    4112:	df 05       	cpc	r29, r15
    4114:	81 f0       	breq	.+32     	; 0x4136 <_ZN5Print5writeEPKhj+0x40>
    4116:	d8 01       	movw	r26, r16
    4118:	6d 91       	ld	r22, X+
    411a:	8d 01       	movw	r16, r26
    411c:	d6 01       	movw	r26, r12
    411e:	ed 91       	ld	r30, X+
    4120:	fc 91       	ld	r31, X
    4122:	01 90       	ld	r0, Z+
    4124:	f0 81       	ld	r31, Z
    4126:	e0 2d       	mov	r30, r0
    4128:	c6 01       	movw	r24, r12
    412a:	09 95       	icall
    412c:	89 2b       	or	r24, r25
    412e:	11 f0       	breq	.+4      	; 0x4134 <_ZN5Print5writeEPKhj+0x3e>
    4130:	21 96       	adiw	r28, 0x01	; 1
    4132:	ee cf       	rjmp	.-36     	; 0x4110 <_ZN5Print5writeEPKhj+0x1a>
    4134:	7e 01       	movw	r14, r28
    4136:	c7 01       	movw	r24, r14
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	1f 91       	pop	r17
    413e:	0f 91       	pop	r16
    4140:	ff 90       	pop	r15
    4142:	ef 90       	pop	r14
    4144:	df 90       	pop	r13
    4146:	cf 90       	pop	r12
    4148:	08 95       	ret

0000414a <_ZN5Print5writeEPKc>:
    414a:	61 15       	cp	r22, r1
    414c:	71 05       	cpc	r23, r1
    414e:	79 f0       	breq	.+30     	; 0x416e <_ZN5Print5writeEPKc+0x24>
    4150:	fb 01       	movw	r30, r22
    4152:	01 90       	ld	r0, Z+
    4154:	00 20       	and	r0, r0
    4156:	e9 f7       	brne	.-6      	; 0x4152 <_ZN5Print5writeEPKc+0x8>
    4158:	31 97       	sbiw	r30, 0x01	; 1
    415a:	af 01       	movw	r20, r30
    415c:	46 1b       	sub	r20, r22
    415e:	57 0b       	sbc	r21, r23
    4160:	dc 01       	movw	r26, r24
    4162:	ed 91       	ld	r30, X+
    4164:	fc 91       	ld	r31, X
    4166:	02 80       	ldd	r0, Z+2	; 0x02
    4168:	f3 81       	ldd	r31, Z+3	; 0x03
    416a:	e0 2d       	mov	r30, r0
    416c:	09 94       	ijmp
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	08 95       	ret

00004174 <_ZN5Print5printEPK19__FlashStringHelper>:
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	8c 01       	movw	r16, r24
    4182:	7b 01       	movw	r14, r22
    4184:	c0 e0       	ldi	r28, 0x00	; 0
    4186:	d0 e0       	ldi	r29, 0x00	; 0
    4188:	f7 01       	movw	r30, r14
    418a:	ec 0f       	add	r30, r28
    418c:	fd 1f       	adc	r31, r29
    418e:	64 91       	lpm	r22, Z
    4190:	66 23       	and	r22, r22
    4192:	61 f0       	breq	.+24     	; 0x41ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4194:	d8 01       	movw	r26, r16
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	01 90       	ld	r0, Z+
    419c:	f0 81       	ld	r31, Z
    419e:	e0 2d       	mov	r30, r0
    41a0:	c8 01       	movw	r24, r16
    41a2:	09 95       	icall
    41a4:	89 2b       	or	r24, r25
    41a6:	11 f0       	breq	.+4      	; 0x41ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    41a8:	21 96       	adiw	r28, 0x01	; 1
    41aa:	ee cf       	rjmp	.-36     	; 0x4188 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    41ac:	ce 01       	movw	r24, r28
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	1f 91       	pop	r17
    41b4:	0f 91       	pop	r16
    41b6:	ff 90       	pop	r15
    41b8:	ef 90       	pop	r14
    41ba:	08 95       	ret

000041bc <_ZN5Print5printEPKc>:
    41bc:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN5Print5writeEPKc>

000041c0 <_ZN5Print5printEc>:
    41c0:	dc 01       	movw	r26, r24
    41c2:	ed 91       	ld	r30, X+
    41c4:	fc 91       	ld	r31, X
    41c6:	01 90       	ld	r0, Z+
    41c8:	f0 81       	ld	r31, Z
    41ca:	e0 2d       	mov	r30, r0
    41cc:	09 94       	ijmp

000041ce <_ZN5Print7printlnEv>:
    41ce:	62 e8       	ldi	r22, 0x82	; 130
    41d0:	73 e0       	ldi	r23, 0x03	; 3
    41d2:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN5Print5writeEPKc>

000041d6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	ec 01       	movw	r28, r24
    41e0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    41e4:	8c 01       	movw	r16, r24
    41e6:	ce 01       	movw	r24, r28
    41e8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    41ec:	80 0f       	add	r24, r16
    41ee:	91 1f       	adc	r25, r17
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	0f 91       	pop	r16
    41f8:	08 95       	ret

000041fa <_ZN5Print7printlnEPKc>:
    41fa:	0f 93       	push	r16
    41fc:	1f 93       	push	r17
    41fe:	cf 93       	push	r28
    4200:	df 93       	push	r29
    4202:	ec 01       	movw	r28, r24
    4204:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    4208:	8c 01       	movw	r16, r24
    420a:	ce 01       	movw	r24, r28
    420c:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4210:	80 0f       	add	r24, r16
    4212:	91 1f       	adc	r25, r17
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	08 95       	ret

0000421e <_ZN5Print7printlnEc>:
    421e:	0f 93       	push	r16
    4220:	1f 93       	push	r17
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	ec 01       	movw	r28, r24
    4228:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    422c:	8c 01       	movw	r16, r24
    422e:	ce 01       	movw	r24, r28
    4230:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4234:	80 0f       	add	r24, r16
    4236:	91 1f       	adc	r25, r17
    4238:	df 91       	pop	r29
    423a:	cf 91       	pop	r28
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	08 95       	ret

00004242 <_ZN5Print11printNumberEmh>:
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	ef 92       	push	r14
    424c:	ff 92       	push	r15
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	cf 93       	push	r28
    4254:	df 93       	push	r29
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	a1 97       	sbiw	r28, 0x21	; 33
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	f8 94       	cli
    4260:	de bf       	out	0x3e, r29	; 62
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	cd bf       	out	0x3d, r28	; 61
    4266:	7c 01       	movw	r14, r24
    4268:	fa 01       	movw	r30, r20
    426a:	cb 01       	movw	r24, r22
    426c:	19 a2       	std	Y+33, r1	; 0x21
    426e:	22 30       	cpi	r18, 0x02	; 2
    4270:	08 f4       	brcc	.+2      	; 0x4274 <_ZN5Print11printNumberEmh+0x32>
    4272:	2a e0       	ldi	r18, 0x0A	; 10
    4274:	8e 01       	movw	r16, r28
    4276:	0f 5d       	subi	r16, 0xDF	; 223
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	82 2e       	mov	r8, r18
    427c:	91 2c       	mov	r9, r1
    427e:	a1 2c       	mov	r10, r1
    4280:	b1 2c       	mov	r11, r1
    4282:	bf 01       	movw	r22, r30
    4284:	a5 01       	movw	r20, r10
    4286:	94 01       	movw	r18, r8
    4288:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    428c:	f9 01       	movw	r30, r18
    428e:	ca 01       	movw	r24, r20
    4290:	01 50       	subi	r16, 0x01	; 1
    4292:	11 09       	sbc	r17, r1
    4294:	6a 30       	cpi	r22, 0x0A	; 10
    4296:	10 f4       	brcc	.+4      	; 0x429c <_ZN5Print11printNumberEmh+0x5a>
    4298:	60 5d       	subi	r22, 0xD0	; 208
    429a:	01 c0       	rjmp	.+2      	; 0x429e <_ZN5Print11printNumberEmh+0x5c>
    429c:	69 5c       	subi	r22, 0xC9	; 201
    429e:	d8 01       	movw	r26, r16
    42a0:	6c 93       	st	X, r22
    42a2:	23 2b       	or	r18, r19
    42a4:	24 2b       	or	r18, r20
    42a6:	25 2b       	or	r18, r21
    42a8:	61 f7       	brne	.-40     	; 0x4282 <_ZN5Print11printNumberEmh+0x40>
    42aa:	b8 01       	movw	r22, r16
    42ac:	c7 01       	movw	r24, r14
    42ae:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    42b2:	a1 96       	adiw	r28, 0x21	; 33
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	1f 91       	pop	r17
    42c4:	0f 91       	pop	r16
    42c6:	ff 90       	pop	r15
    42c8:	ef 90       	pop	r14
    42ca:	bf 90       	pop	r11
    42cc:	af 90       	pop	r10
    42ce:	9f 90       	pop	r9
    42d0:	8f 90       	pop	r8
    42d2:	08 95       	ret

000042d4 <_ZN5Print5printEmi>:
    42d4:	21 15       	cp	r18, r1
    42d6:	31 05       	cpc	r19, r1
    42d8:	41 f4       	brne	.+16     	; 0x42ea <_ZN5Print5printEmi+0x16>
    42da:	dc 01       	movw	r26, r24
    42dc:	ed 91       	ld	r30, X+
    42de:	fc 91       	ld	r31, X
    42e0:	01 90       	ld	r0, Z+
    42e2:	f0 81       	ld	r31, Z
    42e4:	e0 2d       	mov	r30, r0
    42e6:	64 2f       	mov	r22, r20
    42e8:	09 94       	ijmp
    42ea:	0c 94 21 21 	jmp	0x4242	; 0x4242 <_ZN5Print11printNumberEmh>

000042ee <_ZN5Print5printEhi>:
    42ee:	9a 01       	movw	r18, r20
    42f0:	46 2f       	mov	r20, r22
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <_ZN5Print5printEmi>

000042fc <_ZN5Print7printlnEhi>:
    42fc:	0f 93       	push	r16
    42fe:	1f 93       	push	r17
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	ec 01       	movw	r28, r24
    4306:	0e 94 77 21 	call	0x42ee	; 0x42ee <_ZN5Print5printEhi>
    430a:	8c 01       	movw	r16, r24
    430c:	ce 01       	movw	r24, r28
    430e:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4312:	80 0f       	add	r24, r16
    4314:	91 1f       	adc	r25, r17
    4316:	df 91       	pop	r29
    4318:	cf 91       	pop	r28
    431a:	1f 91       	pop	r17
    431c:	0f 91       	pop	r16
    431e:	08 95       	ret

00004320 <_ZN5Print5printEji>:
    4320:	9a 01       	movw	r18, r20
    4322:	ab 01       	movw	r20, r22
    4324:	60 e0       	ldi	r22, 0x00	; 0
    4326:	70 e0       	ldi	r23, 0x00	; 0
    4328:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <_ZN5Print5printEmi>

0000432c <_ZN5Print7printlnEji>:
    432c:	0f 93       	push	r16
    432e:	1f 93       	push	r17
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	ec 01       	movw	r28, r24
    4336:	0e 94 90 21 	call	0x4320	; 0x4320 <_ZN5Print5printEji>
    433a:	8c 01       	movw	r16, r24
    433c:	ce 01       	movw	r24, r28
    433e:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4342:	80 0f       	add	r24, r16
    4344:	91 1f       	adc	r25, r17
    4346:	df 91       	pop	r29
    4348:	cf 91       	pop	r28
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	08 95       	ret

00004350 <_ZN5Print7printlnEmi>:
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	ec 01       	movw	r28, r24
    435a:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <_ZN5Print5printEmi>
    435e:	8c 01       	movw	r16, r24
    4360:	ce 01       	movw	r24, r28
    4362:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4366:	80 0f       	add	r24, r16
    4368:	91 1f       	adc	r25, r17
    436a:	df 91       	pop	r29
    436c:	cf 91       	pop	r28
    436e:	1f 91       	pop	r17
    4370:	0f 91       	pop	r16
    4372:	08 95       	ret

00004374 <_ZN5Print5printEli>:
    4374:	cf 92       	push	r12
    4376:	df 92       	push	r13
    4378:	ef 92       	push	r14
    437a:	ff 92       	push	r15
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	21 15       	cp	r18, r1
    4386:	31 05       	cpc	r19, r1
    4388:	81 f4       	brne	.+32     	; 0x43aa <_ZN5Print5printEli+0x36>
    438a:	dc 01       	movw	r26, r24
    438c:	ed 91       	ld	r30, X+
    438e:	fc 91       	ld	r31, X
    4390:	01 90       	ld	r0, Z+
    4392:	f0 81       	ld	r31, Z
    4394:	e0 2d       	mov	r30, r0
    4396:	64 2f       	mov	r22, r20
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	1f 91       	pop	r17
    439e:	0f 91       	pop	r16
    43a0:	ff 90       	pop	r15
    43a2:	ef 90       	pop	r14
    43a4:	df 90       	pop	r13
    43a6:	cf 90       	pop	r12
    43a8:	09 94       	ijmp
    43aa:	2a 30       	cpi	r18, 0x0A	; 10
    43ac:	31 05       	cpc	r19, r1
    43ae:	01 f5       	brne	.+64     	; 0x43f0 <_ZN5Print5printEli+0x7c>
    43b0:	77 ff       	sbrs	r23, 7
    43b2:	1d c0       	rjmp	.+58     	; 0x43ee <_ZN5Print5printEli+0x7a>
    43b4:	6a 01       	movw	r12, r20
    43b6:	7b 01       	movw	r14, r22
    43b8:	ec 01       	movw	r28, r24
    43ba:	6d e2       	ldi	r22, 0x2D	; 45
    43bc:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    43c0:	8c 01       	movw	r16, r24
    43c2:	44 27       	eor	r20, r20
    43c4:	55 27       	eor	r21, r21
    43c6:	ba 01       	movw	r22, r20
    43c8:	4c 19       	sub	r20, r12
    43ca:	5d 09       	sbc	r21, r13
    43cc:	6e 09       	sbc	r22, r14
    43ce:	7f 09       	sbc	r23, r15
    43d0:	2a e0       	ldi	r18, 0x0A	; 10
    43d2:	ce 01       	movw	r24, r28
    43d4:	0e 94 21 21 	call	0x4242	; 0x4242 <_ZN5Print11printNumberEmh>
    43d8:	80 0f       	add	r24, r16
    43da:	91 1f       	adc	r25, r17
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	ff 90       	pop	r15
    43e6:	ef 90       	pop	r14
    43e8:	df 90       	pop	r13
    43ea:	cf 90       	pop	r12
    43ec:	08 95       	ret
    43ee:	2a e0       	ldi	r18, 0x0A	; 10
    43f0:	df 91       	pop	r29
    43f2:	cf 91       	pop	r28
    43f4:	1f 91       	pop	r17
    43f6:	0f 91       	pop	r16
    43f8:	ff 90       	pop	r15
    43fa:	ef 90       	pop	r14
    43fc:	df 90       	pop	r13
    43fe:	cf 90       	pop	r12
    4400:	0c 94 21 21 	jmp	0x4242	; 0x4242 <_ZN5Print11printNumberEmh>

00004404 <_ZN5Print5printEii>:
    4404:	9a 01       	movw	r18, r20
    4406:	ab 01       	movw	r20, r22
    4408:	77 0f       	add	r23, r23
    440a:	66 0b       	sbc	r22, r22
    440c:	77 0b       	sbc	r23, r23
    440e:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <_ZN5Print5printEli>

00004412 <_ZN5Print7printlnEii>:
    4412:	0f 93       	push	r16
    4414:	1f 93       	push	r17
    4416:	cf 93       	push	r28
    4418:	df 93       	push	r29
    441a:	ec 01       	movw	r28, r24
    441c:	0e 94 02 22 	call	0x4404	; 0x4404 <_ZN5Print5printEii>
    4420:	8c 01       	movw	r16, r24
    4422:	ce 01       	movw	r24, r28
    4424:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4428:	80 0f       	add	r24, r16
    442a:	91 1f       	adc	r25, r17
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	08 95       	ret

00004436 <_ZN5Print7printlnEli>:
    4436:	0f 93       	push	r16
    4438:	1f 93       	push	r17
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	ec 01       	movw	r28, r24
    4440:	0e 94 ba 21 	call	0x4374	; 0x4374 <_ZN5Print5printEli>
    4444:	8c 01       	movw	r16, r24
    4446:	ce 01       	movw	r24, r28
    4448:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    444c:	80 0f       	add	r24, r16
    444e:	91 1f       	adc	r25, r17
    4450:	df 91       	pop	r29
    4452:	cf 91       	pop	r28
    4454:	1f 91       	pop	r17
    4456:	0f 91       	pop	r16
    4458:	08 95       	ret

0000445a <_ZN5Print10printFloatEdh>:
    445a:	7f 92       	push	r7
    445c:	8f 92       	push	r8
    445e:	9f 92       	push	r9
    4460:	af 92       	push	r10
    4462:	bf 92       	push	r11
    4464:	cf 92       	push	r12
    4466:	df 92       	push	r13
    4468:	ef 92       	push	r14
    446a:	ff 92       	push	r15
    446c:	0f 93       	push	r16
    446e:	1f 93       	push	r17
    4470:	cf 93       	push	r28
    4472:	df 93       	push	r29
    4474:	8c 01       	movw	r16, r24
    4476:	6a 01       	movw	r12, r20
    4478:	7b 01       	movw	r14, r22
    447a:	72 2e       	mov	r7, r18
    447c:	9a 01       	movw	r18, r20
    447e:	ab 01       	movw	r20, r22
    4480:	c7 01       	movw	r24, r14
    4482:	b6 01       	movw	r22, r12
    4484:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__unordsf2>
    4488:	88 23       	and	r24, r24
    448a:	19 f0       	breq	.+6      	; 0x4492 <_ZN5Print10printFloatEdh+0x38>
    448c:	65 e8       	ldi	r22, 0x85	; 133
    448e:	73 e0       	ldi	r23, 0x03	; 3
    4490:	27 c0       	rjmp	.+78     	; 0x44e0 <_ZN5Print10printFloatEdh+0x86>
    4492:	46 01       	movw	r8, r12
    4494:	57 01       	movw	r10, r14
    4496:	e8 94       	clt
    4498:	b7 f8       	bld	r11, 7
    449a:	2f ef       	ldi	r18, 0xFF	; 255
    449c:	3f ef       	ldi	r19, 0xFF	; 255
    449e:	4f e7       	ldi	r20, 0x7F	; 127
    44a0:	5f e7       	ldi	r21, 0x7F	; 127
    44a2:	c5 01       	movw	r24, r10
    44a4:	b4 01       	movw	r22, r8
    44a6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__unordsf2>
    44aa:	81 11       	cpse	r24, r1
    44ac:	0d c0       	rjmp	.+26     	; 0x44c8 <_ZN5Print10printFloatEdh+0x6e>
    44ae:	2f ef       	ldi	r18, 0xFF	; 255
    44b0:	3f ef       	ldi	r19, 0xFF	; 255
    44b2:	4f e7       	ldi	r20, 0x7F	; 127
    44b4:	5f e7       	ldi	r21, 0x7F	; 127
    44b6:	c5 01       	movw	r24, r10
    44b8:	b4 01       	movw	r22, r8
    44ba:	0e 94 cf 31 	call	0x639e	; 0x639e <__cmpsf2>
    44be:	18 16       	cp	r1, r24
    44c0:	1c f4       	brge	.+6      	; 0x44c8 <_ZN5Print10printFloatEdh+0x6e>
    44c2:	69 e8       	ldi	r22, 0x89	; 137
    44c4:	73 e0       	ldi	r23, 0x03	; 3
    44c6:	0c c0       	rjmp	.+24     	; 0x44e0 <_ZN5Print10printFloatEdh+0x86>
    44c8:	2f ef       	ldi	r18, 0xFF	; 255
    44ca:	3f ef       	ldi	r19, 0xFF	; 255
    44cc:	4f e7       	ldi	r20, 0x7F	; 127
    44ce:	5f e4       	ldi	r21, 0x4F	; 79
    44d0:	c7 01       	movw	r24, r14
    44d2:	b6 01       	movw	r22, r12
    44d4:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__gesf2>
    44d8:	18 16       	cp	r1, r24
    44da:	94 f4       	brge	.+36     	; 0x4500 <_ZN5Print10printFloatEdh+0xa6>
    44dc:	6d e8       	ldi	r22, 0x8D	; 141
    44de:	73 e0       	ldi	r23, 0x03	; 3
    44e0:	c8 01       	movw	r24, r16
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	1f 91       	pop	r17
    44e8:	0f 91       	pop	r16
    44ea:	ff 90       	pop	r15
    44ec:	ef 90       	pop	r14
    44ee:	df 90       	pop	r13
    44f0:	cf 90       	pop	r12
    44f2:	bf 90       	pop	r11
    44f4:	af 90       	pop	r10
    44f6:	9f 90       	pop	r9
    44f8:	8f 90       	pop	r8
    44fa:	7f 90       	pop	r7
    44fc:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    4500:	2f ef       	ldi	r18, 0xFF	; 255
    4502:	3f ef       	ldi	r19, 0xFF	; 255
    4504:	4f e7       	ldi	r20, 0x7F	; 127
    4506:	5f ec       	ldi	r21, 0xCF	; 207
    4508:	c7 01       	movw	r24, r14
    450a:	b6 01       	movw	r22, r12
    450c:	0e 94 cf 31 	call	0x639e	; 0x639e <__cmpsf2>
    4510:	87 fd       	sbrc	r24, 7
    4512:	e4 cf       	rjmp	.-56     	; 0x44dc <_ZN5Print10printFloatEdh+0x82>
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	a9 01       	movw	r20, r18
    451a:	c7 01       	movw	r24, r14
    451c:	b6 01       	movw	r22, r12
    451e:	0e 94 cf 31 	call	0x639e	; 0x639e <__cmpsf2>
    4522:	87 ff       	sbrs	r24, 7
    4524:	0a c0       	rjmp	.+20     	; 0x453a <_ZN5Print10printFloatEdh+0xe0>
    4526:	6d e2       	ldi	r22, 0x2D	; 45
    4528:	c8 01       	movw	r24, r16
    452a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    452e:	ec 01       	movw	r28, r24
    4530:	f7 fa       	bst	r15, 7
    4532:	f0 94       	com	r15
    4534:	f7 f8       	bld	r15, 7
    4536:	f0 94       	com	r15
    4538:	02 c0       	rjmp	.+4      	; 0x453e <_ZN5Print10printFloatEdh+0xe4>
    453a:	c0 e0       	ldi	r28, 0x00	; 0
    453c:	d0 e0       	ldi	r29, 0x00	; 0
    453e:	b1 2c       	mov	r11, r1
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	70 e0       	ldi	r23, 0x00	; 0
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	9f e3       	ldi	r25, 0x3F	; 63
    4548:	7b 14       	cp	r7, r11
    454a:	41 f0       	breq	.+16     	; 0x455c <_ZN5Print10printFloatEdh+0x102>
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e2       	ldi	r20, 0x20	; 32
    4552:	51 e4       	ldi	r21, 0x41	; 65
    4554:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__divsf3>
    4558:	b3 94       	inc	r11
    455a:	f6 cf       	rjmp	.-20     	; 0x4548 <_ZN5Print10printFloatEdh+0xee>
    455c:	a7 01       	movw	r20, r14
    455e:	96 01       	movw	r18, r12
    4560:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__addsf3>
    4564:	6b 01       	movw	r12, r22
    4566:	7c 01       	movw	r14, r24
    4568:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__fixunssfsi>
    456c:	4b 01       	movw	r8, r22
    456e:	5c 01       	movw	r10, r24
    4570:	2a e0       	ldi	r18, 0x0A	; 10
    4572:	ab 01       	movw	r20, r22
    4574:	bc 01       	movw	r22, r24
    4576:	c8 01       	movw	r24, r16
    4578:	0e 94 21 21 	call	0x4242	; 0x4242 <_ZN5Print11printNumberEmh>
    457c:	c8 0f       	add	r28, r24
    457e:	d9 1f       	adc	r29, r25
    4580:	77 20       	and	r7, r7
    4582:	c9 f1       	breq	.+114    	; 0x45f6 <_ZN5Print10printFloatEdh+0x19c>
    4584:	c5 01       	movw	r24, r10
    4586:	b4 01       	movw	r22, r8
    4588:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__floatunsisf>
    458c:	9b 01       	movw	r18, r22
    458e:	ac 01       	movw	r20, r24
    4590:	c7 01       	movw	r24, r14
    4592:	b6 01       	movw	r22, r12
    4594:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__subsf3>
    4598:	6b 01       	movw	r12, r22
    459a:	7c 01       	movw	r14, r24
    459c:	61 e9       	ldi	r22, 0x91	; 145
    459e:	73 e0       	ldi	r23, 0x03	; 3
    45a0:	c8 01       	movw	r24, r16
    45a2:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    45a6:	c8 0f       	add	r28, r24
    45a8:	d9 1f       	adc	r29, r25
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	40 e2       	ldi	r20, 0x20	; 32
    45b0:	51 e4       	ldi	r21, 0x41	; 65
    45b2:	c7 01       	movw	r24, r14
    45b4:	b6 01       	movw	r22, r12
    45b6:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    45ba:	4b 01       	movw	r8, r22
    45bc:	5c 01       	movw	r10, r24
    45be:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__fixsfsi>
    45c2:	6b 01       	movw	r12, r22
    45c4:	7c 01       	movw	r14, r24
    45c6:	4a e0       	ldi	r20, 0x0A	; 10
    45c8:	50 e0       	ldi	r21, 0x00	; 0
    45ca:	c8 01       	movw	r24, r16
    45cc:	0e 94 02 22 	call	0x4404	; 0x4404 <_ZN5Print5printEii>
    45d0:	c8 0f       	add	r28, r24
    45d2:	d9 1f       	adc	r29, r25
    45d4:	b6 01       	movw	r22, r12
    45d6:	dd 0c       	add	r13, r13
    45d8:	88 0b       	sbc	r24, r24
    45da:	99 0b       	sbc	r25, r25
    45dc:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__floatsisf>
    45e0:	9b 01       	movw	r18, r22
    45e2:	ac 01       	movw	r20, r24
    45e4:	c5 01       	movw	r24, r10
    45e6:	b4 01       	movw	r22, r8
    45e8:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__subsf3>
    45ec:	6b 01       	movw	r12, r22
    45ee:	7c 01       	movw	r14, r24
    45f0:	7a 94       	dec	r7
    45f2:	71 10       	cpse	r7, r1
    45f4:	da cf       	rjmp	.-76     	; 0x45aa <_ZN5Print10printFloatEdh+0x150>
    45f6:	ce 01       	movw	r24, r28
    45f8:	df 91       	pop	r29
    45fa:	cf 91       	pop	r28
    45fc:	1f 91       	pop	r17
    45fe:	0f 91       	pop	r16
    4600:	ff 90       	pop	r15
    4602:	ef 90       	pop	r14
    4604:	df 90       	pop	r13
    4606:	cf 90       	pop	r12
    4608:	bf 90       	pop	r11
    460a:	af 90       	pop	r10
    460c:	9f 90       	pop	r9
    460e:	8f 90       	pop	r8
    4610:	7f 90       	pop	r7
    4612:	08 95       	ret

00004614 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    4614:	0f 93       	push	r16
    4616:	1f 93       	push	r17
    4618:	cf 93       	push	r28
    461a:	df 93       	push	r29
    461c:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    461e:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN5Print10printFloatEdh>
    4622:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    4624:	ce 01       	movw	r24, r28
    4626:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
  return n;
}
    462a:	80 0f       	add	r24, r16
    462c:	91 1f       	adc	r25, r17
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	08 95       	ret

00004638 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4638:	1f 92       	push	r1
    463a:	0f 92       	push	r0
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	0f 92       	push	r0
    4640:	11 24       	eor	r1, r1
    4642:	2f 93       	push	r18
    4644:	3f 93       	push	r19
    4646:	8f 93       	push	r24
    4648:	9f 93       	push	r25
    464a:	af 93       	push	r26
    464c:	bf 93       	push	r27
    464e:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <timer0_millis>
    4652:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <timer0_millis+0x1>
    4656:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <timer0_millis+0x2>
    465a:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <timer0_millis+0x3>
    465e:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <timer0_fract>
    4662:	23 e0       	ldi	r18, 0x03	; 3
    4664:	23 0f       	add	r18, r19
    4666:	2d 37       	cpi	r18, 0x7D	; 125
    4668:	20 f4       	brcc	.+8      	; 0x4672 <__vector_16+0x3a>
    466a:	01 96       	adiw	r24, 0x01	; 1
    466c:	a1 1d       	adc	r26, r1
    466e:	b1 1d       	adc	r27, r1
    4670:	05 c0       	rjmp	.+10     	; 0x467c <__vector_16+0x44>
    4672:	26 e8       	ldi	r18, 0x86	; 134
    4674:	23 0f       	add	r18, r19
    4676:	02 96       	adiw	r24, 0x02	; 2
    4678:	a1 1d       	adc	r26, r1
    467a:	b1 1d       	adc	r27, r1
    467c:	20 93 c6 06 	sts	0x06C6, r18	; 0x8006c6 <timer0_fract>
    4680:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <timer0_millis>
    4684:	90 93 c8 06 	sts	0x06C8, r25	; 0x8006c8 <timer0_millis+0x1>
    4688:	a0 93 c9 06 	sts	0x06C9, r26	; 0x8006c9 <timer0_millis+0x2>
    468c:	b0 93 ca 06 	sts	0x06CA, r27	; 0x8006ca <timer0_millis+0x3>
    4690:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <timer0_overflow_count>
    4694:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <timer0_overflow_count+0x1>
    4698:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <timer0_overflow_count+0x2>
    469c:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <timer0_overflow_count+0x3>
    46a0:	01 96       	adiw	r24, 0x01	; 1
    46a2:	a1 1d       	adc	r26, r1
    46a4:	b1 1d       	adc	r27, r1
    46a6:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <timer0_overflow_count>
    46aa:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <timer0_overflow_count+0x1>
    46ae:	a0 93 cd 06 	sts	0x06CD, r26	; 0x8006cd <timer0_overflow_count+0x2>
    46b2:	b0 93 ce 06 	sts	0x06CE, r27	; 0x8006ce <timer0_overflow_count+0x3>
    46b6:	bf 91       	pop	r27
    46b8:	af 91       	pop	r26
    46ba:	9f 91       	pop	r25
    46bc:	8f 91       	pop	r24
    46be:	3f 91       	pop	r19
    46c0:	2f 91       	pop	r18
    46c2:	0f 90       	pop	r0
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	0f 90       	pop	r0
    46c8:	1f 90       	pop	r1
    46ca:	18 95       	reti

000046cc <millis>:
    46cc:	2f b7       	in	r18, 0x3f	; 63
    46ce:	f8 94       	cli
    46d0:	60 91 c7 06 	lds	r22, 0x06C7	; 0x8006c7 <timer0_millis>
    46d4:	70 91 c8 06 	lds	r23, 0x06C8	; 0x8006c8 <timer0_millis+0x1>
    46d8:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <timer0_millis+0x2>
    46dc:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <timer0_millis+0x3>
    46e0:	2f bf       	out	0x3f, r18	; 63
    46e2:	08 95       	ret

000046e4 <micros>:
    46e4:	3f b7       	in	r19, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <timer0_overflow_count>
    46ec:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <timer0_overflow_count+0x1>
    46f0:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <timer0_overflow_count+0x2>
    46f4:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <timer0_overflow_count+0x3>
    46f8:	26 b5       	in	r18, 0x26	; 38
    46fa:	a8 9b       	sbis	0x15, 0	; 21
    46fc:	05 c0       	rjmp	.+10     	; 0x4708 <micros+0x24>
    46fe:	2f 3f       	cpi	r18, 0xFF	; 255
    4700:	19 f0       	breq	.+6      	; 0x4708 <micros+0x24>
    4702:	01 96       	adiw	r24, 0x01	; 1
    4704:	a1 1d       	adc	r26, r1
    4706:	b1 1d       	adc	r27, r1
    4708:	3f bf       	out	0x3f, r19	; 63
    470a:	ba 2f       	mov	r27, r26
    470c:	a9 2f       	mov	r26, r25
    470e:	98 2f       	mov	r25, r24
    4710:	88 27       	eor	r24, r24
    4712:	82 0f       	add	r24, r18
    4714:	91 1d       	adc	r25, r1
    4716:	a1 1d       	adc	r26, r1
    4718:	b1 1d       	adc	r27, r1
    471a:	bc 01       	movw	r22, r24
    471c:	cd 01       	movw	r24, r26
    471e:	42 e0       	ldi	r20, 0x02	; 2
    4720:	66 0f       	add	r22, r22
    4722:	77 1f       	adc	r23, r23
    4724:	88 1f       	adc	r24, r24
    4726:	99 1f       	adc	r25, r25
    4728:	4a 95       	dec	r20
    472a:	d1 f7       	brne	.-12     	; 0x4720 <micros+0x3c>
    472c:	08 95       	ret

0000472e <delay>:
    472e:	8f 92       	push	r8
    4730:	9f 92       	push	r9
    4732:	af 92       	push	r10
    4734:	bf 92       	push	r11
    4736:	cf 92       	push	r12
    4738:	df 92       	push	r13
    473a:	ef 92       	push	r14
    473c:	ff 92       	push	r15
    473e:	6b 01       	movw	r12, r22
    4740:	7c 01       	movw	r14, r24
    4742:	0e 94 72 23 	call	0x46e4	; 0x46e4 <micros>
    4746:	4b 01       	movw	r8, r22
    4748:	5c 01       	movw	r10, r24
    474a:	c1 14       	cp	r12, r1
    474c:	d1 04       	cpc	r13, r1
    474e:	e1 04       	cpc	r14, r1
    4750:	f1 04       	cpc	r15, r1
    4752:	01 f1       	breq	.+64     	; 0x4794 <delay+0x66>
    4754:	0e 94 7f 31 	call	0x62fe	; 0x62fe <yield>
    4758:	0e 94 72 23 	call	0x46e4	; 0x46e4 <micros>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	88 19       	sub	r24, r8
    4762:	99 09       	sbc	r25, r9
    4764:	aa 09       	sbc	r26, r10
    4766:	bb 09       	sbc	r27, r11
    4768:	88 3e       	cpi	r24, 0xE8	; 232
    476a:	93 40       	sbci	r25, 0x03	; 3
    476c:	a1 05       	cpc	r26, r1
    476e:	b1 05       	cpc	r27, r1
    4770:	60 f3       	brcs	.-40     	; 0x474a <delay+0x1c>
    4772:	21 e0       	ldi	r18, 0x01	; 1
    4774:	c2 1a       	sub	r12, r18
    4776:	d1 08       	sbc	r13, r1
    4778:	e1 08       	sbc	r14, r1
    477a:	f1 08       	sbc	r15, r1
    477c:	88 ee       	ldi	r24, 0xE8	; 232
    477e:	88 0e       	add	r8, r24
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	98 1e       	adc	r9, r24
    4784:	a1 1c       	adc	r10, r1
    4786:	b1 1c       	adc	r11, r1
    4788:	c1 14       	cp	r12, r1
    478a:	d1 04       	cpc	r13, r1
    478c:	e1 04       	cpc	r14, r1
    478e:	f1 04       	cpc	r15, r1
    4790:	19 f7       	brne	.-58     	; 0x4758 <delay+0x2a>
    4792:	db cf       	rjmp	.-74     	; 0x474a <delay+0x1c>
    4794:	ff 90       	pop	r15
    4796:	ef 90       	pop	r14
    4798:	df 90       	pop	r13
    479a:	cf 90       	pop	r12
    479c:	bf 90       	pop	r11
    479e:	af 90       	pop	r10
    47a0:	9f 90       	pop	r9
    47a2:	8f 90       	pop	r8
    47a4:	08 95       	ret

000047a6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    47a6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    47a8:	84 b5       	in	r24, 0x24	; 36
    47aa:	82 60       	ori	r24, 0x02	; 2
    47ac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    47ae:	84 b5       	in	r24, 0x24	; 36
    47b0:	81 60       	ori	r24, 0x01	; 1
    47b2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    47b4:	85 b5       	in	r24, 0x25	; 37
    47b6:	82 60       	ori	r24, 0x02	; 2
    47b8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    47ba:	85 b5       	in	r24, 0x25	; 37
    47bc:	81 60       	ori	r24, 0x01	; 1
    47be:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    47c0:	ee e6       	ldi	r30, 0x6E	; 110
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	81 60       	ori	r24, 0x01	; 1
    47c8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    47ca:	e1 e8       	ldi	r30, 0x81	; 129
    47cc:	f0 e0       	ldi	r31, 0x00	; 0
    47ce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    47d0:	80 81       	ld	r24, Z
    47d2:	82 60       	ori	r24, 0x02	; 2
    47d4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    47d6:	80 81       	ld	r24, Z
    47d8:	81 60       	ori	r24, 0x01	; 1
    47da:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    47dc:	e0 e8       	ldi	r30, 0x80	; 128
    47de:	f0 e0       	ldi	r31, 0x00	; 0
    47e0:	80 81       	ld	r24, Z
    47e2:	81 60       	ori	r24, 0x01	; 1
    47e4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    47e6:	e1 eb       	ldi	r30, 0xB1	; 177
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	84 60       	ori	r24, 0x04	; 4
    47ee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    47f0:	e0 eb       	ldi	r30, 0xB0	; 176
    47f2:	f0 e0       	ldi	r31, 0x00	; 0
    47f4:	80 81       	ld	r24, Z
    47f6:	81 60       	ori	r24, 0x01	; 1
    47f8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    47fa:	ea e7       	ldi	r30, 0x7A	; 122
    47fc:	f0 e0       	ldi	r31, 0x00	; 0
    47fe:	80 81       	ld	r24, Z
    4800:	84 60       	ori	r24, 0x04	; 4
    4802:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4804:	80 81       	ld	r24, Z
    4806:	82 60       	ori	r24, 0x02	; 2
    4808:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    480a:	80 81       	ld	r24, Z
    480c:	81 60       	ori	r24, 0x01	; 1
    480e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4810:	80 81       	ld	r24, Z
    4812:	80 68       	ori	r24, 0x80	; 128
    4814:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4816:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    481a:	08 95       	ret

0000481c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    481c:	8e 30       	cpi	r24, 0x0E	; 14
    481e:	08 f0       	brcs	.+2      	; 0x4822 <analogRead+0x6>
    4820:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4822:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <analog_reference>
    4826:	90 e4       	ldi	r25, 0x40	; 64
    4828:	29 9f       	mul	r18, r25
    482a:	90 01       	movw	r18, r0
    482c:	11 24       	eor	r1, r1
    482e:	87 70       	andi	r24, 0x07	; 7
    4830:	82 2b       	or	r24, r18
    4832:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4836:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    483a:	80 64       	ori	r24, 0x40	; 64
    483c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4840:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4844:	86 fd       	sbrc	r24, 6
    4846:	fc cf       	rjmp	.-8      	; 0x4840 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4848:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    484c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4850:	90 e0       	ldi	r25, 0x00	; 0
}
    4852:	92 2b       	or	r25, r18
    4854:	08 95       	ret

00004856 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4856:	83 30       	cpi	r24, 0x03	; 3
    4858:	81 f0       	breq	.+32     	; 0x487a <turnOffPWM+0x24>
    485a:	28 f4       	brcc	.+10     	; 0x4866 <turnOffPWM+0x10>
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	99 f0       	breq	.+38     	; 0x4886 <turnOffPWM+0x30>
    4860:	82 30       	cpi	r24, 0x02	; 2
    4862:	a1 f0       	breq	.+40     	; 0x488c <turnOffPWM+0x36>
    4864:	08 95       	ret
    4866:	87 30       	cpi	r24, 0x07	; 7
    4868:	a9 f0       	breq	.+42     	; 0x4894 <turnOffPWM+0x3e>
    486a:	88 30       	cpi	r24, 0x08	; 8
    486c:	b9 f0       	breq	.+46     	; 0x489c <turnOffPWM+0x46>
    486e:	84 30       	cpi	r24, 0x04	; 4
    4870:	d1 f4       	brne	.+52     	; 0x48a6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4872:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4876:	8f 7d       	andi	r24, 0xDF	; 223
    4878:	03 c0       	rjmp	.+6      	; 0x4880 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    487a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    487e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4880:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4884:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4886:	84 b5       	in	r24, 0x24	; 36
    4888:	8f 77       	andi	r24, 0x7F	; 127
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    488c:	84 b5       	in	r24, 0x24	; 36
    488e:	8f 7d       	andi	r24, 0xDF	; 223
    4890:	84 bd       	out	0x24, r24	; 36
    4892:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4894:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4898:	8f 77       	andi	r24, 0x7F	; 127
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    489c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    48a0:	8f 7d       	andi	r24, 0xDF	; 223
    48a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    48a6:	08 95       	ret

000048a8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    48a8:	cf 93       	push	r28
    48aa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	fc 01       	movw	r30, r24
    48b0:	e8 5a       	subi	r30, 0xA8	; 168
    48b2:	fc 4f       	sbci	r31, 0xFC	; 252
    48b4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    48b6:	fc 01       	movw	r30, r24
    48b8:	e4 59       	subi	r30, 0x94	; 148
    48ba:	fc 4f       	sbci	r31, 0xFC	; 252
    48bc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    48be:	88 23       	and	r24, r24
    48c0:	61 f1       	breq	.+88     	; 0x491a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	88 0f       	add	r24, r24
    48c6:	99 1f       	adc	r25, r25
    48c8:	fc 01       	movw	r30, r24
    48ca:	ec 56       	subi	r30, 0x6C	; 108
    48cc:	fc 4f       	sbci	r31, 0xFC	; 252
    48ce:	c5 91       	lpm	r28, Z+
    48d0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    48d2:	fc 01       	movw	r30, r24
    48d4:	e6 57       	subi	r30, 0x76	; 118
    48d6:	fc 4f       	sbci	r31, 0xFC	; 252
    48d8:	a5 91       	lpm	r26, Z+
    48da:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    48dc:	61 11       	cpse	r22, r1
    48de:	09 c0       	rjmp	.+18     	; 0x48f2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    48e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    48e2:	f8 94       	cli
		*reg &= ~bit;
    48e4:	88 81       	ld	r24, Y
    48e6:	20 95       	com	r18
    48e8:	82 23       	and	r24, r18
    48ea:	88 83       	st	Y, r24
		*out &= ~bit;
    48ec:	ec 91       	ld	r30, X
    48ee:	2e 23       	and	r18, r30
    48f0:	0b c0       	rjmp	.+22     	; 0x4908 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    48f2:	62 30       	cpi	r22, 0x02	; 2
    48f4:	61 f4       	brne	.+24     	; 0x490e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    48f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    48f8:	f8 94       	cli
		*reg &= ~bit;
    48fa:	88 81       	ld	r24, Y
    48fc:	32 2f       	mov	r19, r18
    48fe:	30 95       	com	r19
    4900:	83 23       	and	r24, r19
    4902:	88 83       	st	Y, r24
		*out |= bit;
    4904:	ec 91       	ld	r30, X
    4906:	2e 2b       	or	r18, r30
    4908:	2c 93       	st	X, r18
		SREG = oldSREG;
    490a:	9f bf       	out	0x3f, r25	; 63
    490c:	06 c0       	rjmp	.+12     	; 0x491a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    490e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4910:	f8 94       	cli
		*reg |= bit;
    4912:	e8 81       	ld	r30, Y
    4914:	2e 2b       	or	r18, r30
    4916:	28 83       	st	Y, r18
		SREG = oldSREG;
    4918:	8f bf       	out	0x3f, r24	; 63
	}
}
    491a:	df 91       	pop	r29
    491c:	cf 91       	pop	r28
    491e:	08 95       	ret

00004920 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4920:	1f 93       	push	r17
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4926:	28 2f       	mov	r18, r24
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	f9 01       	movw	r30, r18
    492c:	ec 5b       	subi	r30, 0xBC	; 188
    492e:	fc 4f       	sbci	r31, 0xFC	; 252
    4930:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4932:	f9 01       	movw	r30, r18
    4934:	e8 5a       	subi	r30, 0xA8	; 168
    4936:	fc 4f       	sbci	r31, 0xFC	; 252
    4938:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    493a:	f9 01       	movw	r30, r18
    493c:	e4 59       	subi	r30, 0x94	; 148
    493e:	fc 4f       	sbci	r31, 0xFC	; 252
    4940:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4942:	cc 23       	and	r28, r28
    4944:	c1 f0       	breq	.+48     	; 0x4976 <digitalWrite+0x56>
    4946:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4948:	81 11       	cpse	r24, r1
    494a:	0e 94 2b 24 	call	0x4856	; 0x4856 <turnOffPWM>

	out = portOutputRegister(port);
    494e:	ec 2f       	mov	r30, r28
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	ee 0f       	add	r30, r30
    4954:	ff 1f       	adc	r31, r31
    4956:	e6 57       	subi	r30, 0x76	; 118
    4958:	fc 4f       	sbci	r31, 0xFC	; 252
    495a:	a5 91       	lpm	r26, Z+
    495c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    495e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4960:	f8 94       	cli

	if (val == LOW) {
    4962:	11 11       	cpse	r17, r1
    4964:	04 c0       	rjmp	.+8      	; 0x496e <digitalWrite+0x4e>
		*out &= ~bit;
    4966:	8c 91       	ld	r24, X
    4968:	d0 95       	com	r29
    496a:	d8 23       	and	r29, r24
    496c:	02 c0       	rjmp	.+4      	; 0x4972 <digitalWrite+0x52>
	} else {
		*out |= bit;
    496e:	ec 91       	ld	r30, X
    4970:	de 2b       	or	r29, r30
    4972:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4974:	9f bf       	out	0x3f, r25	; 63
}
    4976:	df 91       	pop	r29
    4978:	cf 91       	pop	r28
    497a:	1f 91       	pop	r17
    497c:	08 95       	ret

0000497e <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    497e:	fc 01       	movw	r30, r24
    4980:	80 81       	ld	r24, Z
    4982:	91 81       	ldd	r25, Z+1	; 0x01
    4984:	0c 94 0a 33 	jmp	0x6614	; 0x6614 <free>

00004988 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    498e:	88 81       	ld	r24, Y
    4990:	99 81       	ldd	r25, Y+1	; 0x01
    4992:	00 97       	sbiw	r24, 0x00	; 0
    4994:	11 f0       	breq	.+4      	; 0x499a <_ZN6String10invalidateEv+0x12>
    4996:	0e 94 0a 33 	call	0x6614	; 0x6614 <free>
	buffer = NULL;
    499a:	19 82       	std	Y+1, r1	; 0x01
    499c:	18 82       	st	Y, r1
	capacity = len = 0;
    499e:	1d 82       	std	Y+5, r1	; 0x05
    49a0:	1c 82       	std	Y+4, r1	; 0x04
    49a2:	1b 82       	std	Y+3, r1	; 0x03
    49a4:	1a 82       	std	Y+2, r1	; 0x02
}
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	08 95       	ret

000049ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    49ac:	0f 93       	push	r16
    49ae:	1f 93       	push	r17
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	ec 01       	movw	r28, r24
    49b6:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    49b8:	6f 5f       	subi	r22, 0xFF	; 255
    49ba:	7f 4f       	sbci	r23, 0xFF	; 255
    49bc:	88 81       	ld	r24, Y
    49be:	99 81       	ldd	r25, Y+1	; 0x01
    49c0:	0e 94 93 33 	call	0x6726	; 0x6726 <realloc>
	if (newbuffer) {
    49c4:	00 97       	sbiw	r24, 0x00	; 0
    49c6:	31 f0       	breq	.+12     	; 0x49d4 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    49c8:	99 83       	std	Y+1, r25	; 0x01
    49ca:	88 83       	st	Y, r24
		capacity = maxStrLen;
    49cc:	1b 83       	std	Y+3, r17	; 0x03
    49ce:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	01 c0       	rjmp	.+2      	; 0x49d6 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    49d4:	80 e0       	ldi	r24, 0x00	; 0
}
    49d6:	df 91       	pop	r29
    49d8:	cf 91       	pop	r28
    49da:	1f 91       	pop	r17
    49dc:	0f 91       	pop	r16
    49de:	08 95       	ret

000049e0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    49e0:	cf 93       	push	r28
    49e2:	df 93       	push	r29
    49e4:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    49e6:	88 81       	ld	r24, Y
    49e8:	99 81       	ldd	r25, Y+1	; 0x01
    49ea:	89 2b       	or	r24, r25
    49ec:	29 f0       	breq	.+10     	; 0x49f8 <_ZN6String7reserveEj+0x18>
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	9b 81       	ldd	r25, Y+3	; 0x03
    49f2:	86 17       	cp	r24, r22
    49f4:	97 07       	cpc	r25, r23
    49f6:	60 f4       	brcc	.+24     	; 0x4a10 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    49f8:	ce 01       	movw	r24, r28
    49fa:	0e 94 d6 24 	call	0x49ac	; 0x49ac <_ZN6String12changeBufferEj>
    49fe:	88 23       	and	r24, r24
    4a00:	41 f0       	breq	.+16     	; 0x4a12 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    4a02:	8c 81       	ldd	r24, Y+4	; 0x04
    4a04:	9d 81       	ldd	r25, Y+5	; 0x05
    4a06:	89 2b       	or	r24, r25
    4a08:	19 f4       	brne	.+6      	; 0x4a10 <_ZN6String7reserveEj+0x30>
    4a0a:	e8 81       	ld	r30, Y
    4a0c:	f9 81       	ldd	r31, Y+1	; 0x01
    4a0e:	10 82       	st	Z, r1
    4a10:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	ec 01       	movw	r28, r24
    4a26:	7b 01       	movw	r14, r22
    4a28:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    4a2a:	ba 01       	movw	r22, r20
    4a2c:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <_ZN6String7reserveEj>
    4a30:	81 11       	cpse	r24, r1
    4a32:	04 c0       	rjmp	.+8      	; 0x4a3c <_ZN6String4copyEPKcj+0x24>
		invalidate();
    4a34:	ce 01       	movw	r24, r28
    4a36:	0e 94 c4 24 	call	0x4988	; 0x4988 <_ZN6String10invalidateEv>
		return *this;
    4a3a:	07 c0       	rjmp	.+14     	; 0x4a4a <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    4a3c:	1d 83       	std	Y+5, r17	; 0x05
    4a3e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    4a40:	b7 01       	movw	r22, r14
    4a42:	88 81       	ld	r24, Y
    4a44:	99 81       	ldd	r25, Y+1	; 0x01
    4a46:	0e 94 c0 34 	call	0x6980	; 0x6980 <strcpy>
	return *this;
}
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	df 91       	pop	r29
    4a4e:	cf 91       	pop	r28
    4a50:	1f 91       	pop	r17
    4a52:	0f 91       	pop	r16
    4a54:	ff 90       	pop	r15
    4a56:	ef 90       	pop	r14
    4a58:	08 95       	ret

00004a5a <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	11 82       	std	Z+1, r1	; 0x01
    4a5e:	10 82       	st	Z, r1
	capacity = 0;
    4a60:	13 82       	std	Z+3, r1	; 0x03
    4a62:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4a64:	15 82       	std	Z+5, r1	; 0x05
    4a66:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    4a68:	61 15       	cp	r22, r1
    4a6a:	71 05       	cpc	r23, r1
    4a6c:	51 f0       	breq	.+20     	; 0x4a82 <_ZN6StringC1EPKc+0x28>
    4a6e:	fb 01       	movw	r30, r22
    4a70:	01 90       	ld	r0, Z+
    4a72:	00 20       	and	r0, r0
    4a74:	e9 f7       	brne	.-6      	; 0x4a70 <_ZN6StringC1EPKc+0x16>
    4a76:	31 97       	sbiw	r30, 0x01	; 1
    4a78:	af 01       	movw	r20, r30
    4a7a:	46 1b       	sub	r20, r22
    4a7c:	57 0b       	sbc	r21, r23
    4a7e:	0c 94 0c 25 	jmp	0x4a18	; 0x4a18 <_ZN6String4copyEPKcj>
    4a82:	08 95       	ret

00004a84 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    4a84:	88 5e       	subi	r24, 0xE8	; 232
    4a86:	9e 4f       	sbci	r25, 0xFE	; 254
    4a88:	dc 01       	movw	r26, r24
    4a8a:	8d 91       	ld	r24, X+
    4a8c:	9c 91       	ld	r25, X
    4a8e:	dc 01       	movw	r26, r24
    4a90:	ed 91       	ld	r30, X+
    4a92:	fc 91       	ld	r31, X
    4a94:	04 80       	ldd	r0, Z+4	; 0x04
    4a96:	f5 81       	ldd	r31, Z+5	; 0x05
    4a98:	e0 2d       	mov	r30, r0
    4a9a:	09 94       	ijmp

00004a9c <_ZN13Adafruit_FONA5writeEh>:
    4a9c:	88 5e       	subi	r24, 0xE8	; 232
    4a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    4aa0:	dc 01       	movw	r26, r24
    4aa2:	8d 91       	ld	r24, X+
    4aa4:	9c 91       	ld	r25, X
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	ed 91       	ld	r30, X+
    4aaa:	fc 91       	ld	r31, X
    4aac:	01 90       	ld	r0, Z+
    4aae:	f0 81       	ld	r31, Z
    4ab0:	e0 2d       	mov	r30, r0
    4ab2:	09 94       	ijmp

00004ab4 <_ZN13Adafruit_FONA4readEv>:
    4ab4:	88 5e       	subi	r24, 0xE8	; 232
    4ab6:	9e 4f       	sbci	r25, 0xFE	; 254
    4ab8:	dc 01       	movw	r26, r24
    4aba:	8d 91       	ld	r24, X+
    4abc:	9c 91       	ld	r25, X
    4abe:	dc 01       	movw	r26, r24
    4ac0:	ed 91       	ld	r30, X+
    4ac2:	fc 91       	ld	r31, X
    4ac4:	06 80       	ldd	r0, Z+6	; 0x06
    4ac6:	f7 81       	ldd	r31, Z+7	; 0x07
    4ac8:	e0 2d       	mov	r30, r0
    4aca:	09 94       	ijmp

00004acc <_ZN13Adafruit_FONA4peekEv>:
    4acc:	88 5e       	subi	r24, 0xE8	; 232
    4ace:	9e 4f       	sbci	r25, 0xFE	; 254
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	8d 91       	ld	r24, X+
    4ad4:	9c 91       	ld	r25, X
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	ed 91       	ld	r30, X+
    4ada:	fc 91       	ld	r31, X
    4adc:	00 84       	ldd	r0, Z+8	; 0x08
    4ade:	f1 85       	ldd	r31, Z+9	; 0x09
    4ae0:	e0 2d       	mov	r30, r0
    4ae2:	09 94       	ijmp

00004ae4 <_ZN13Adafruit_FONA5flushEv>:
    4ae4:	88 5e       	subi	r24, 0xE8	; 232
    4ae6:	9e 4f       	sbci	r25, 0xFE	; 254
    4ae8:	dc 01       	movw	r26, r24
    4aea:	8d 91       	ld	r24, X+
    4aec:	9c 91       	ld	r25, X
    4aee:	dc 01       	movw	r26, r24
    4af0:	ed 91       	ld	r30, X+
    4af2:	fc 91       	ld	r31, X
    4af4:	02 84       	ldd	r0, Z+10	; 0x0a
    4af6:	f3 85       	ldd	r31, Z+11	; 0x0b
    4af8:	e0 2d       	mov	r30, r0
    4afa:	09 94       	ijmp

00004afc <_ZN13Adafruit_FONAC1Ea>:
    4afc:	fc 01       	movw	r30, r24
    4afe:	13 82       	std	Z+3, r1	; 0x03
    4b00:	12 82       	std	Z+2, r1	; 0x02
    4b02:	88 ee       	ldi	r24, 0xE8	; 232
    4b04:	93 e0       	ldi	r25, 0x03	; 3
    4b06:	a0 e0       	ldi	r26, 0x00	; 0
    4b08:	b0 e0       	ldi	r27, 0x00	; 0
    4b0a:	84 83       	std	Z+4, r24	; 0x04
    4b0c:	95 83       	std	Z+5, r25	; 0x05
    4b0e:	a6 83       	std	Z+6, r26	; 0x06
    4b10:	b7 83       	std	Z+7, r27	; 0x07
    4b12:	80 ef       	ldi	r24, 0xF0	; 240
    4b14:	93 e0       	ldi	r25, 0x03	; 3
    4b16:	91 83       	std	Z+1, r25	; 0x01
    4b18:	80 83       	st	Z, r24
    4b1a:	64 87       	std	Z+12, r22	; 0x0c
    4b1c:	df 01       	movw	r26, r30
    4b1e:	a3 5f       	subi	r26, 0xF3	; 243
    4b20:	be 4f       	sbci	r27, 0xFE	; 254
    4b22:	88 ed       	ldi	r24, 0xD8	; 216
    4b24:	96 e0       	ldi	r25, 0x06	; 6
    4b26:	11 96       	adiw	r26, 0x01	; 1
    4b28:	9c 93       	st	X, r25
    4b2a:	8e 93       	st	-X, r24
    4b2c:	12 96       	adiw	r26, 0x02	; 2
    4b2e:	11 96       	adiw	r26, 0x01	; 1
    4b30:	1c 92       	st	X, r1
    4b32:	1e 92       	st	-X, r1
    4b34:	12 96       	adiw	r26, 0x02	; 2
    4b36:	11 96       	adiw	r26, 0x01	; 1
    4b38:	1c 92       	st	X, r1
    4b3a:	1e 92       	st	-X, r1
    4b3c:	17 96       	adiw	r26, 0x07	; 7
    4b3e:	11 96       	adiw	r26, 0x01	; 1
    4b40:	1c 92       	st	X, r1
    4b42:	1e 92       	st	-X, r1
    4b44:	15 97       	sbiw	r26, 0x05	; 5
    4b46:	1c 92       	st	X, r1
    4b48:	11 96       	adiw	r26, 0x01	; 1
    4b4a:	83 ed       	ldi	r24, 0xD3	; 211
    4b4c:	96 e0       	ldi	r25, 0x06	; 6
    4b4e:	8d 93       	st	X+, r24
    4b50:	9c 93       	st	X, r25
    4b52:	ea 5e       	subi	r30, 0xEA	; 234
    4b54:	fe 4f       	sbci	r31, 0xFE	; 254
    4b56:	80 ed       	ldi	r24, 0xD0	; 208
    4b58:	96 e0       	ldi	r25, 0x06	; 6
    4b5a:	91 83       	std	Z+1, r25	; 0x01
    4b5c:	80 83       	st	Z, r24
    4b5e:	08 95       	ret

00004b60 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    4b60:	fc 01       	movw	r30, r24
    4b62:	e3 5f       	subi	r30, 0xF3	; 243
    4b64:	fe 4f       	sbci	r31, 0xFE	; 254
    4b66:	71 83       	std	Z+1, r23	; 0x01
    4b68:	60 83       	st	Z, r22
    4b6a:	32 96       	adiw	r30, 0x02	; 2
    4b6c:	51 83       	std	Z+1, r21	; 0x01
    4b6e:	40 83       	st	Z, r20
    4b70:	32 96       	adiw	r30, 0x02	; 2
    4b72:	31 83       	std	Z+1, r19	; 0x01
    4b74:	20 83       	st	Z, r18
    4b76:	08 95       	ret

00004b78 <_ZN13Adafruit_FONA10flushInputEv>:
    4b78:	0f 93       	push	r16
    4b7a:	1f 93       	push	r17
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	ec 01       	movw	r28, r24
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	8c 01       	movw	r16, r24
    4b88:	0f 5f       	subi	r16, 0xFF	; 255
    4b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b8c:	88 97       	sbiw	r24, 0x28	; 40
    4b8e:	d8 f4       	brcc	.+54     	; 0x4bc6 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    4b90:	e8 81       	ld	r30, Y
    4b92:	f9 81       	ldd	r31, Y+1	; 0x01
    4b94:	04 80       	ldd	r0, Z+4	; 0x04
    4b96:	f5 81       	ldd	r31, Z+5	; 0x05
    4b98:	e0 2d       	mov	r30, r0
    4b9a:	ce 01       	movw	r24, r28
    4b9c:	09 95       	icall
    4b9e:	89 2b       	or	r24, r25
    4ba0:	51 f0       	breq	.+20     	; 0x4bb6 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    4ba2:	e8 81       	ld	r30, Y
    4ba4:	f9 81       	ldd	r31, Y+1	; 0x01
    4ba6:	06 80       	ldd	r0, Z+6	; 0x06
    4ba8:	f7 81       	ldd	r31, Z+7	; 0x07
    4baa:	e0 2d       	mov	r30, r0
    4bac:	ce 01       	movw	r24, r28
    4bae:	09 95       	icall
    4bb0:	00 e0       	ldi	r16, 0x00	; 0
    4bb2:	10 e0       	ldi	r17, 0x00	; 0
    4bb4:	ed cf       	rjmp	.-38     	; 0x4b90 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    4bb6:	61 e0       	ldi	r22, 0x01	; 1
    4bb8:	70 e0       	ldi	r23, 0x00	; 0
    4bba:	80 e0       	ldi	r24, 0x00	; 0
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    4bc2:	c8 01       	movw	r24, r16
    4bc4:	e0 cf       	rjmp	.-64     	; 0x4b86 <_ZN13Adafruit_FONA10flushInputEv+0xe>
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	1f 91       	pop	r17
    4bcc:	0f 91       	pop	r16
    4bce:	08 95       	ret

00004bd0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    4bd0:	ff 92       	push	r15
    4bd2:	0f 93       	push	r16
    4bd4:	1f 93       	push	r17
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	ec 01       	movw	r28, r24
    4bdc:	8b 01       	movw	r16, r22
    4bde:	f4 2e       	mov	r15, r20
    4be0:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    4be4:	6c ea       	ldi	r22, 0xAC	; 172
    4be6:	74 e0       	ldi	r23, 0x04	; 4
    4be8:	89 e2       	ldi	r24, 0x29	; 41
    4bea:	96 e0       	ldi	r25, 0x06	; 6
    4bec:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4bf0:	6e e9       	ldi	r22, 0x9E	; 158
    4bf2:	74 e0       	ldi	r23, 0x04	; 4
    4bf4:	89 e2       	ldi	r24, 0x29	; 41
    4bf6:	96 e0       	ldi	r25, 0x06	; 6
    4bf8:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4bfc:	b8 01       	movw	r22, r16
    4bfe:	89 e2       	ldi	r24, 0x29	; 41
    4c00:	96 e0       	ldi	r25, 0x06	; 6
    4c02:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4c06:	62 e2       	ldi	r22, 0x22	; 34
    4c08:	89 e2       	ldi	r24, 0x29	; 41
    4c0a:	96 e0       	ldi	r25, 0x06	; 6
    4c0c:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print7printlnEc>
    4c10:	c8 5e       	subi	r28, 0xE8	; 232
    4c12:	de 4f       	sbci	r29, 0xFE	; 254
    4c14:	60 e9       	ldi	r22, 0x90	; 144
    4c16:	74 e0       	ldi	r23, 0x04	; 4
    4c18:	88 81       	ld	r24, Y
    4c1a:	99 81       	ldd	r25, Y+1	; 0x01
    4c1c:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4c20:	b8 01       	movw	r22, r16
    4c22:	88 81       	ld	r24, Y
    4c24:	99 81       	ldd	r25, Y+1	; 0x01
    4c26:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4c2a:	88 81       	ld	r24, Y
    4c2c:	99 81       	ldd	r25, Y+1	; 0x01
    4c2e:	ff 20       	and	r15, r15
    4c30:	19 f0       	breq	.+6      	; 0x4c38 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    4c32:	6c e8       	ldi	r22, 0x8C	; 140
    4c34:	74 e0       	ldi	r23, 0x04	; 4
    4c36:	02 c0       	rjmp	.+4      	; 0x4c3c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    4c38:	69 e8       	ldi	r22, 0x89	; 137
    4c3a:	74 e0       	ldi	r23, 0x04	; 4
    4c3c:	df 91       	pop	r29
    4c3e:	cf 91       	pop	r28
    4c40:	1f 91       	pop	r17
    4c42:	0f 91       	pop	r16
    4c44:	ff 90       	pop	r15
    4c46:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>

00004c4a <_ZN13Adafruit_FONA8readlineEjb>:
    4c4a:	9f 92       	push	r9
    4c4c:	af 92       	push	r10
    4c4e:	bf 92       	push	r11
    4c50:	cf 92       	push	r12
    4c52:	df 92       	push	r13
    4c54:	ef 92       	push	r14
    4c56:	ff 92       	push	r15
    4c58:	0f 93       	push	r16
    4c5a:	1f 93       	push	r17
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	7c 01       	movw	r14, r24
    4c62:	94 2e       	mov	r9, r20
    4c64:	8b 01       	movw	r16, r22
    4c66:	00 0f       	add	r16, r16
    4c68:	11 1f       	adc	r17, r17
    4c6a:	00 0f       	add	r16, r16
    4c6c:	11 1f       	adc	r17, r17
    4c6e:	c0 e0       	ldi	r28, 0x00	; 0
    4c70:	d0 e0       	ldi	r29, 0x00	; 0
    4c72:	57 01       	movw	r10, r14
    4c74:	88 ee       	ldi	r24, 0xE8	; 232
    4c76:	a8 1a       	sub	r10, r24
    4c78:	8e ef       	ldi	r24, 0xFE	; 254
    4c7a:	b8 0a       	sbc	r11, r24
    4c7c:	01 15       	cp	r16, r1
    4c7e:	11 05       	cpc	r17, r1
    4c80:	09 f4       	brne	.+2      	; 0x4c84 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    4c82:	50 c0       	rjmp	.+160    	; 0x4d24 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4c84:	ce 3f       	cpi	r28, 0xFE	; 254
    4c86:	d1 05       	cpc	r29, r1
    4c88:	80 f0       	brcs	.+32     	; 0x4caa <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4c8a:	6e ed       	ldi	r22, 0xDE	; 222
    4c8c:	73 e0       	ldi	r23, 0x03	; 3
    4c8e:	22 c0       	rjmp	.+68     	; 0x4cd4 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    4c90:	f5 01       	movw	r30, r10
    4c92:	80 81       	ld	r24, Z
    4c94:	91 81       	ldd	r25, Z+1	; 0x01
    4c96:	dc 01       	movw	r26, r24
    4c98:	ed 91       	ld	r30, X+
    4c9a:	fc 91       	ld	r31, X
    4c9c:	06 80       	ldd	r0, Z+6	; 0x06
    4c9e:	f7 81       	ldd	r31, Z+7	; 0x07
    4ca0:	e0 2d       	mov	r30, r0
    4ca2:	09 95       	icall
    4ca4:	6c 01       	movw	r12, r24
    4ca6:	8d 30       	cpi	r24, 0x0D	; 13
    4ca8:	69 f4       	brne	.+26     	; 0x4cc4 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    4caa:	d5 01       	movw	r26, r10
    4cac:	8d 91       	ld	r24, X+
    4cae:	9c 91       	ld	r25, X
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	ed 91       	ld	r30, X+
    4cb4:	fc 91       	ld	r31, X
    4cb6:	04 80       	ldd	r0, Z+4	; 0x04
    4cb8:	f5 81       	ldd	r31, Z+5	; 0x05
    4cba:	e0 2d       	mov	r30, r0
    4cbc:	09 95       	icall
    4cbe:	89 2b       	or	r24, r25
    4cc0:	39 f7       	brne	.-50     	; 0x4c90 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    4cc2:	26 c0       	rjmp	.+76     	; 0x4d10 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    4cc4:	8a 30       	cpi	r24, 0x0A	; 10
    4cc6:	59 f4       	brne	.+22     	; 0x4cde <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4cc8:	20 97       	sbiw	r28, 0x00	; 0
    4cca:	79 f3       	breq	.-34     	; 0x4caa <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4ccc:	91 10       	cpse	r9, r1
    4cce:	07 c0       	rjmp	.+14     	; 0x4cde <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4cd0:	66 ed       	ldi	r22, 0xD6	; 214
    4cd2:	73 e0       	ldi	r23, 0x03	; 3
    4cd4:	89 e2       	ldi	r24, 0x29	; 41
    4cd6:	96 e0       	ldi	r25, 0x06	; 6
    4cd8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4cdc:	23 c0       	rjmp	.+70     	; 0x4d24 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4cde:	f7 01       	movw	r30, r14
    4ce0:	ec 0f       	add	r30, r28
    4ce2:	fd 1f       	adc	r31, r29
    4ce4:	c6 86       	std	Z+14, r12	; 0x0e
    4ce6:	b6 01       	movw	r22, r12
    4ce8:	77 27       	eor	r23, r23
    4cea:	40 e1       	ldi	r20, 0x10	; 16
    4cec:	50 e0       	ldi	r21, 0x00	; 0
    4cee:	89 e2       	ldi	r24, 0x29	; 41
    4cf0:	96 e0       	ldi	r25, 0x06	; 6
    4cf2:	0e 94 02 22 	call	0x4404	; 0x4404 <_ZN5Print5printEii>
    4cf6:	63 e9       	ldi	r22, 0x93	; 147
    4cf8:	73 e0       	ldi	r23, 0x03	; 3
    4cfa:	89 e2       	ldi	r24, 0x29	; 41
    4cfc:	96 e0       	ldi	r25, 0x06	; 6
    4cfe:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    4d02:	6c 2d       	mov	r22, r12
    4d04:	89 e2       	ldi	r24, 0x29	; 41
    4d06:	96 e0       	ldi	r25, 0x06	; 6
    4d08:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print7printlnEc>
    4d0c:	21 96       	adiw	r28, 0x01	; 1
    4d0e:	cd cf       	rjmp	.-102    	; 0x4caa <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4d10:	01 50       	subi	r16, 0x01	; 1
    4d12:	11 09       	sbc	r17, r1
    4d14:	e9 f2       	breq	.-70     	; 0x4cd0 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    4d16:	61 e0       	ldi	r22, 0x01	; 1
    4d18:	70 e0       	ldi	r23, 0x00	; 0
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    4d22:	ac cf       	rjmp	.-168    	; 0x4c7c <_ZN13Adafruit_FONA8readlineEjb+0x32>
    4d24:	f7 01       	movw	r30, r14
    4d26:	ec 0f       	add	r30, r28
    4d28:	fd 1f       	adc	r31, r29
    4d2a:	16 86       	std	Z+14, r1	; 0x0e
    4d2c:	8c 2f       	mov	r24, r28
    4d2e:	df 91       	pop	r29
    4d30:	cf 91       	pop	r28
    4d32:	1f 91       	pop	r17
    4d34:	0f 91       	pop	r16
    4d36:	ff 90       	pop	r15
    4d38:	ef 90       	pop	r14
    4d3a:	df 90       	pop	r13
    4d3c:	cf 90       	pop	r12
    4d3e:	bf 90       	pop	r11
    4d40:	af 90       	pop	r10
    4d42:	9f 90       	pop	r9
    4d44:	08 95       	ret

00004d46 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    4d46:	0f 93       	push	r16
    4d48:	1f 93       	push	r17
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	ec 01       	movw	r28, r24
    4d50:	8b 01       	movw	r16, r22
    4d52:	ba 01       	movw	r22, r20
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    4d5a:	64 ee       	ldi	r22, 0xE4	; 228
    4d5c:	73 e0       	ldi	r23, 0x03	; 3
    4d5e:	89 e2       	ldi	r24, 0x29	; 41
    4d60:	96 e0       	ldi	r25, 0x06	; 6
    4d62:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4d66:	2e 96       	adiw	r28, 0x0e	; 14
    4d68:	be 01       	movw	r22, r28
    4d6a:	89 e2       	ldi	r24, 0x29	; 41
    4d6c:	96 e0       	ldi	r25, 0x06	; 6
    4d6e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    4d72:	b8 01       	movw	r22, r16
    4d74:	ce 01       	movw	r24, r28
    4d76:	0e 94 77 34 	call	0x68ee	; 0x68ee <strcmp_P>
    4d7a:	21 e0       	ldi	r18, 0x01	; 1
    4d7c:	89 2b       	or	r24, r25
    4d7e:	09 f0       	breq	.+2      	; 0x4d82 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	82 2f       	mov	r24, r18
    4d84:	df 91       	pop	r29
    4d86:	cf 91       	pop	r28
    4d88:	1f 91       	pop	r17
    4d8a:	0f 91       	pop	r16
    4d8c:	08 95       	ret

00004d8e <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	ec 01       	movw	r28, r24
    4d94:	fc 01       	movw	r30, r24
    4d96:	e8 5e       	subi	r30, 0xE8	; 232
    4d98:	fe 4f       	sbci	r31, 0xFE	; 254
    4d9a:	66 23       	and	r22, r22
    4d9c:	31 f0       	breq	.+12     	; 0x4daa <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    4d9e:	62 e2       	ldi	r22, 0x22	; 34
    4da0:	80 81       	ld	r24, Z
    4da2:	91 81       	ldd	r25, Z+1	; 0x01
    4da4:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print7printlnEc>
    4da8:	04 c0       	rjmp	.+8      	; 0x4db2 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    4daa:	80 81       	ld	r24, Z
    4dac:	91 81       	ldd	r25, Z+1	; 0x01
    4dae:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4db2:	fe 01       	movw	r30, r28
    4db4:	ea 5e       	subi	r30, 0xEA	; 234
    4db6:	fe 4f       	sbci	r31, 0xFE	; 254
    4db8:	60 81       	ld	r22, Z
    4dba:	71 81       	ldd	r23, Z+1	; 0x01
    4dbc:	40 e1       	ldi	r20, 0x10	; 16
    4dbe:	57 e2       	ldi	r21, 0x27	; 39
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004dca <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    4dca:	0f 93       	push	r16
    4dcc:	1f 93       	push	r17
    4dce:	cf 93       	push	r28
    4dd0:	df 93       	push	r29
    4dd2:	ec 01       	movw	r28, r24
    4dd4:	8a 01       	movw	r16, r20
    4dd6:	41 e0       	ldi	r20, 0x01	; 1
    4dd8:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e8 5e       	subi	r30, 0xE8	; 232
    4de0:	fe 4f       	sbci	r31, 0xFE	; 254
    4de2:	b8 01       	movw	r22, r16
    4de4:	80 81       	ld	r24, Z
    4de6:	91 81       	ldd	r25, Z+1	; 0x01
    4de8:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    4dec:	61 e0       	ldi	r22, 0x01	; 1
    4dee:	ce 01       	movw	r24, r28
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	1f 91       	pop	r17
    4df6:	0f 91       	pop	r16
    4df8:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004dfc <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    4dfc:	0f 93       	push	r16
    4dfe:	1f 93       	push	r17
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	ec 01       	movw	r28, r24
    4e06:	8a 01       	movw	r16, r20
    4e08:	41 e0       	ldi	r20, 0x01	; 1
    4e0a:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4e0e:	fe 01       	movw	r30, r28
    4e10:	e8 5e       	subi	r30, 0xE8	; 232
    4e12:	fe 4f       	sbci	r31, 0xFE	; 254
    4e14:	b8 01       	movw	r22, r16
    4e16:	80 81       	ld	r24, Z
    4e18:	91 81       	ldd	r25, Z+1	; 0x01
    4e1a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4e1e:	61 e0       	ldi	r22, 0x01	; 1
    4e20:	ce 01       	movw	r24, r28
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004e2e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    4e2e:	cf 92       	push	r12
    4e30:	df 92       	push	r13
    4e32:	ef 92       	push	r14
    4e34:	ff 92       	push	r15
    4e36:	cf 93       	push	r28
    4e38:	df 93       	push	r29
    4e3a:	ec 01       	movw	r28, r24
    4e3c:	69 01       	movw	r12, r18
    4e3e:	7a 01       	movw	r14, r20
    4e40:	40 e0       	ldi	r20, 0x00	; 0
    4e42:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4e46:	fe 01       	movw	r30, r28
    4e48:	e8 5e       	subi	r30, 0xE8	; 232
    4e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e4c:	2a e0       	ldi	r18, 0x0A	; 10
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	b7 01       	movw	r22, r14
    4e52:	a6 01       	movw	r20, r12
    4e54:	80 81       	ld	r24, Z
    4e56:	91 81       	ldd	r25, Z+1	; 0x01
    4e58:	0e 94 ba 21 	call	0x4374	; 0x4374 <_ZN5Print5printEli>
    4e5c:	60 e0       	ldi	r22, 0x00	; 0
    4e5e:	ce 01       	movw	r24, r28
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	ff 90       	pop	r15
    4e66:	ef 90       	pop	r14
    4e68:	df 90       	pop	r13
    4e6a:	cf 90       	pop	r12
    4e6c:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004e70 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    4e70:	4f 92       	push	r4
    4e72:	5f 92       	push	r5
    4e74:	6f 92       	push	r6
    4e76:	7f 92       	push	r7
    4e78:	8f 92       	push	r8
    4e7a:	9f 92       	push	r9
    4e7c:	af 92       	push	r10
    4e7e:	bf 92       	push	r11
    4e80:	ef 92       	push	r14
    4e82:	ff 92       	push	r15
    4e84:	0f 93       	push	r16
    4e86:	1f 93       	push	r17
    4e88:	cf 93       	push	r28
    4e8a:	df 93       	push	r29
    4e8c:	7c 01       	movw	r14, r24
    4e8e:	2a 01       	movw	r4, r20
    4e90:	3b 01       	movw	r6, r22
    4e92:	48 01       	movw	r8, r16
    4e94:	59 01       	movw	r10, r18
    4e96:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    4e9a:	62 e8       	ldi	r22, 0x82	; 130
    4e9c:	74 e0       	ldi	r23, 0x04	; 4
    4e9e:	89 e2       	ldi	r24, 0x29	; 41
    4ea0:	96 e0       	ldi	r25, 0x06	; 6
    4ea2:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4ea6:	65 e7       	ldi	r22, 0x75	; 117
    4ea8:	74 e0       	ldi	r23, 0x04	; 4
    4eaa:	89 e2       	ldi	r24, 0x29	; 41
    4eac:	96 e0       	ldi	r25, 0x06	; 6
    4eae:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4eb2:	2a e0       	ldi	r18, 0x0A	; 10
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	b3 01       	movw	r22, r6
    4eb8:	a2 01       	movw	r20, r4
    4eba:	89 e2       	ldi	r24, 0x29	; 41
    4ebc:	96 e0       	ldi	r25, 0x06	; 6
    4ebe:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <_ZN5Print5printEmi>
    4ec2:	6c e2       	ldi	r22, 0x2C	; 44
    4ec4:	89 e2       	ldi	r24, 0x29	; 41
    4ec6:	96 e0       	ldi	r25, 0x06	; 6
    4ec8:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    4ecc:	2a e0       	ldi	r18, 0x0A	; 10
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	b5 01       	movw	r22, r10
    4ed2:	a4 01       	movw	r20, r8
    4ed4:	89 e2       	ldi	r24, 0x29	; 41
    4ed6:	96 e0       	ldi	r25, 0x06	; 6
    4ed8:	0e 94 a8 21 	call	0x4350	; 0x4350 <_ZN5Print7printlnEmi>
    4edc:	e7 01       	movw	r28, r14
    4ede:	c8 5e       	subi	r28, 0xE8	; 232
    4ee0:	de 4f       	sbci	r29, 0xFE	; 254
    4ee2:	68 e6       	ldi	r22, 0x68	; 104
    4ee4:	74 e0       	ldi	r23, 0x04	; 4
    4ee6:	88 81       	ld	r24, Y
    4ee8:	99 81       	ldd	r25, Y+1	; 0x01
    4eea:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4eee:	2a e0       	ldi	r18, 0x0A	; 10
    4ef0:	30 e0       	ldi	r19, 0x00	; 0
    4ef2:	b3 01       	movw	r22, r6
    4ef4:	a2 01       	movw	r20, r4
    4ef6:	88 81       	ld	r24, Y
    4ef8:	99 81       	ldd	r25, Y+1	; 0x01
    4efa:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <_ZN5Print5printEmi>
    4efe:	6d e9       	ldi	r22, 0x9D	; 157
    4f00:	73 e0       	ldi	r23, 0x03	; 3
    4f02:	88 81       	ld	r24, Y
    4f04:	99 81       	ldd	r25, Y+1	; 0x01
    4f06:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    4f0a:	2a e0       	ldi	r18, 0x0A	; 10
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	b5 01       	movw	r22, r10
    4f10:	a4 01       	movw	r20, r8
    4f12:	88 81       	ld	r24, Y
    4f14:	99 81       	ldd	r25, Y+1	; 0x01
    4f16:	0e 94 a8 21 	call	0x4350	; 0x4350 <_ZN5Print7printlnEmi>
    4f1a:	40 e1       	ldi	r20, 0x10	; 16
    4f1c:	57 e2       	ldi	r21, 0x27	; 39
    4f1e:	6f e5       	ldi	r22, 0x5F	; 95
    4f20:	74 e0       	ldi	r23, 0x04	; 4
    4f22:	c7 01       	movw	r24, r14
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	ff 90       	pop	r15
    4f2e:	ef 90       	pop	r14
    4f30:	bf 90       	pop	r11
    4f32:	af 90       	pop	r10
    4f34:	9f 90       	pop	r9
    4f36:	8f 90       	pop	r8
    4f38:	7f 90       	pop	r7
    4f3a:	6f 90       	pop	r6
    4f3c:	5f 90       	pop	r5
    4f3e:	4f 90       	pop	r4
    4f40:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004f44 <_ZN13Adafruit_FONA8getReplyEPcj>:
    4f44:	ef 92       	push	r14
    4f46:	ff 92       	push	r15
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	ec 01       	movw	r28, r24
    4f52:	8b 01       	movw	r16, r22
    4f54:	7a 01       	movw	r14, r20
    4f56:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    4f5a:	6f ec       	ldi	r22, 0xCF	; 207
    4f5c:	73 e0       	ldi	r23, 0x03	; 3
    4f5e:	89 e2       	ldi	r24, 0x29	; 41
    4f60:	96 e0       	ldi	r25, 0x06	; 6
    4f62:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4f66:	b8 01       	movw	r22, r16
    4f68:	89 e2       	ldi	r24, 0x29	; 41
    4f6a:	96 e0       	ldi	r25, 0x06	; 6
    4f6c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    4f70:	fe 01       	movw	r30, r28
    4f72:	e8 5e       	subi	r30, 0xE8	; 232
    4f74:	fe 4f       	sbci	r31, 0xFE	; 254
    4f76:	b8 01       	movw	r22, r16
    4f78:	80 81       	ld	r24, Z
    4f7a:	91 81       	ldd	r25, Z+1	; 0x01
    4f7c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	b7 01       	movw	r22, r14
    4f84:	ce 01       	movw	r24, r28
    4f86:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    4f8a:	18 2f       	mov	r17, r24
    4f8c:	68 ec       	ldi	r22, 0xC8	; 200
    4f8e:	73 e0       	ldi	r23, 0x03	; 3
    4f90:	89 e2       	ldi	r24, 0x29	; 41
    4f92:	96 e0       	ldi	r25, 0x06	; 6
    4f94:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4f98:	be 01       	movw	r22, r28
    4f9a:	62 5f       	subi	r22, 0xF2	; 242
    4f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f9e:	89 e2       	ldi	r24, 0x29	; 41
    4fa0:	96 e0       	ldi	r25, 0x06	; 6
    4fa2:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    4fa6:	81 2f       	mov	r24, r17
    4fa8:	df 91       	pop	r29
    4faa:	cf 91       	pop	r28
    4fac:	1f 91       	pop	r17
    4fae:	0f 91       	pop	r16
    4fb0:	ff 90       	pop	r15
    4fb2:	ef 90       	pop	r14
    4fb4:	08 95       	ret

00004fb6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    4fb6:	ef 92       	push	r14
    4fb8:	ff 92       	push	r15
    4fba:	0f 93       	push	r16
    4fbc:	1f 93       	push	r17
    4fbe:	cf 93       	push	r28
    4fc0:	df 93       	push	r29
    4fc2:	ec 01       	movw	r28, r24
    4fc4:	8b 01       	movw	r16, r22
    4fc6:	7a 01       	movw	r14, r20
    4fc8:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    4fcc:	61 ec       	ldi	r22, 0xC1	; 193
    4fce:	73 e0       	ldi	r23, 0x03	; 3
    4fd0:	89 e2       	ldi	r24, 0x29	; 41
    4fd2:	96 e0       	ldi	r25, 0x06	; 6
    4fd4:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    4fd8:	b8 01       	movw	r22, r16
    4fda:	89 e2       	ldi	r24, 0x29	; 41
    4fdc:	96 e0       	ldi	r25, 0x06	; 6
    4fde:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	e8 5e       	subi	r30, 0xE8	; 232
    4fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe8:	b8 01       	movw	r22, r16
    4fea:	80 81       	ld	r24, Z
    4fec:	91 81       	ldd	r25, Z+1	; 0x01
    4fee:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4ff2:	40 e0       	ldi	r20, 0x00	; 0
    4ff4:	b7 01       	movw	r22, r14
    4ff6:	ce 01       	movw	r24, r28
    4ff8:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    4ffc:	18 2f       	mov	r17, r24
    4ffe:	6a eb       	ldi	r22, 0xBA	; 186
    5000:	73 e0       	ldi	r23, 0x03	; 3
    5002:	89 e2       	ldi	r24, 0x29	; 41
    5004:	96 e0       	ldi	r25, 0x06	; 6
    5006:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    500a:	be 01       	movw	r22, r28
    500c:	62 5f       	subi	r22, 0xF2	; 242
    500e:	7f 4f       	sbci	r23, 0xFF	; 255
    5010:	89 e2       	ldi	r24, 0x29	; 41
    5012:	96 e0       	ldi	r25, 0x06	; 6
    5014:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    5018:	81 2f       	mov	r24, r17
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	ff 90       	pop	r15
    5024:	ef 90       	pop	r14
    5026:	08 95       	ret

00005028 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    5028:	8f 92       	push	r8
    502a:	9f 92       	push	r9
    502c:	af 92       	push	r10
    502e:	bf 92       	push	r11
    5030:	cf 92       	push	r12
    5032:	df 92       	push	r13
    5034:	ef 92       	push	r14
    5036:	ff 92       	push	r15
    5038:	0f 93       	push	r16
    503a:	1f 93       	push	r17
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
    5040:	ec 01       	movw	r28, r24
    5042:	6b 01       	movw	r12, r22
    5044:	49 01       	movw	r8, r18
    5046:	5a 01       	movw	r10, r20
    5048:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    504c:	63 eb       	ldi	r22, 0xB3	; 179
    504e:	73 e0       	ldi	r23, 0x03	; 3
    5050:	89 e2       	ldi	r24, 0x29	; 41
    5052:	96 e0       	ldi	r25, 0x06	; 6
    5054:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5058:	b6 01       	movw	r22, r12
    505a:	89 e2       	ldi	r24, 0x29	; 41
    505c:	96 e0       	ldi	r25, 0x06	; 6
    505e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5062:	2a e0       	ldi	r18, 0x0A	; 10
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	b5 01       	movw	r22, r10
    5068:	a4 01       	movw	r20, r8
    506a:	89 e2       	ldi	r24, 0x29	; 41
    506c:	96 e0       	ldi	r25, 0x06	; 6
    506e:	0e 94 1b 22 	call	0x4436	; 0x4436 <_ZN5Print7printlnEli>
    5072:	7e 01       	movw	r14, r28
    5074:	88 ee       	ldi	r24, 0xE8	; 232
    5076:	e8 1a       	sub	r14, r24
    5078:	8e ef       	ldi	r24, 0xFE	; 254
    507a:	f8 0a       	sbc	r15, r24
    507c:	b6 01       	movw	r22, r12
    507e:	f7 01       	movw	r30, r14
    5080:	80 81       	ld	r24, Z
    5082:	91 81       	ldd	r25, Z+1	; 0x01
    5084:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5088:	2a e0       	ldi	r18, 0x0A	; 10
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	b5 01       	movw	r22, r10
    508e:	a4 01       	movw	r20, r8
    5090:	f7 01       	movw	r30, r14
    5092:	80 81       	ld	r24, Z
    5094:	91 81       	ldd	r25, Z+1	; 0x01
    5096:	0e 94 1b 22 	call	0x4436	; 0x4436 <_ZN5Print7printlnEli>
    509a:	40 e0       	ldi	r20, 0x00	; 0
    509c:	b8 01       	movw	r22, r16
    509e:	ce 01       	movw	r24, r28
    50a0:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    50a4:	18 2f       	mov	r17, r24
    50a6:	6c ea       	ldi	r22, 0xAC	; 172
    50a8:	73 e0       	ldi	r23, 0x03	; 3
    50aa:	89 e2       	ldi	r24, 0x29	; 41
    50ac:	96 e0       	ldi	r25, 0x06	; 6
    50ae:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    50b2:	be 01       	movw	r22, r28
    50b4:	62 5f       	subi	r22, 0xF2	; 242
    50b6:	7f 4f       	sbci	r23, 0xFF	; 255
    50b8:	89 e2       	ldi	r24, 0x29	; 41
    50ba:	96 e0       	ldi	r25, 0x06	; 6
    50bc:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    50c0:	81 2f       	mov	r24, r17
    50c2:	df 91       	pop	r29
    50c4:	cf 91       	pop	r28
    50c6:	1f 91       	pop	r17
    50c8:	0f 91       	pop	r16
    50ca:	ff 90       	pop	r15
    50cc:	ef 90       	pop	r14
    50ce:	df 90       	pop	r13
    50d0:	cf 90       	pop	r12
    50d2:	bf 90       	pop	r11
    50d4:	af 90       	pop	r10
    50d6:	9f 90       	pop	r9
    50d8:	8f 90       	pop	r8
    50da:	08 95       	ret

000050dc <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    50dc:	af 92       	push	r10
    50de:	bf 92       	push	r11
    50e0:	cf 92       	push	r12
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	ff 92       	push	r15
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	ec 01       	movw	r28, r24
    50f2:	6b 01       	movw	r12, r22
    50f4:	7a 01       	movw	r14, r20
    50f6:	59 01       	movw	r10, r18
    50f8:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    50fc:	65 ea       	ldi	r22, 0xA5	; 165
    50fe:	73 e0       	ldi	r23, 0x03	; 3
    5100:	89 e2       	ldi	r24, 0x29	; 41
    5102:	96 e0       	ldi	r25, 0x06	; 6
    5104:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5108:	b6 01       	movw	r22, r12
    510a:	89 e2       	ldi	r24, 0x29	; 41
    510c:	96 e0       	ldi	r25, 0x06	; 6
    510e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5112:	62 e2       	ldi	r22, 0x22	; 34
    5114:	89 e2       	ldi	r24, 0x29	; 41
    5116:	96 e0       	ldi	r25, 0x06	; 6
    5118:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    511c:	b7 01       	movw	r22, r14
    511e:	89 e2       	ldi	r24, 0x29	; 41
    5120:	96 e0       	ldi	r25, 0x06	; 6
    5122:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5126:	62 e2       	ldi	r22, 0x22	; 34
    5128:	89 e2       	ldi	r24, 0x29	; 41
    512a:	96 e0       	ldi	r25, 0x06	; 6
    512c:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print7printlnEc>
    5130:	8e 01       	movw	r16, r28
    5132:	08 5e       	subi	r16, 0xE8	; 232
    5134:	1e 4f       	sbci	r17, 0xFE	; 254
    5136:	b6 01       	movw	r22, r12
    5138:	f8 01       	movw	r30, r16
    513a:	80 81       	ld	r24, Z
    513c:	91 81       	ldd	r25, Z+1	; 0x01
    513e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5142:	62 e2       	ldi	r22, 0x22	; 34
    5144:	f8 01       	movw	r30, r16
    5146:	80 81       	ld	r24, Z
    5148:	91 81       	ldd	r25, Z+1	; 0x01
    514a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    514e:	b7 01       	movw	r22, r14
    5150:	f8 01       	movw	r30, r16
    5152:	80 81       	ld	r24, Z
    5154:	91 81       	ldd	r25, Z+1	; 0x01
    5156:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    515a:	62 e2       	ldi	r22, 0x22	; 34
    515c:	f8 01       	movw	r30, r16
    515e:	80 81       	ld	r24, Z
    5160:	91 81       	ldd	r25, Z+1	; 0x01
    5162:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print7printlnEc>
    5166:	40 e0       	ldi	r20, 0x00	; 0
    5168:	b5 01       	movw	r22, r10
    516a:	ce 01       	movw	r24, r28
    516c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    5170:	18 2f       	mov	r17, r24
    5172:	6e e9       	ldi	r22, 0x9E	; 158
    5174:	73 e0       	ldi	r23, 0x03	; 3
    5176:	89 e2       	ldi	r24, 0x29	; 41
    5178:	96 e0       	ldi	r25, 0x06	; 6
    517a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    517e:	be 01       	movw	r22, r28
    5180:	62 5f       	subi	r22, 0xF2	; 242
    5182:	7f 4f       	sbci	r23, 0xFF	; 255
    5184:	89 e2       	ldi	r24, 0x29	; 41
    5186:	96 e0       	ldi	r25, 0x06	; 6
    5188:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    518c:	81 2f       	mov	r24, r17
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	1f 91       	pop	r17
    5194:	0f 91       	pop	r16
    5196:	ff 90       	pop	r15
    5198:	ef 90       	pop	r14
    519a:	df 90       	pop	r13
    519c:	cf 90       	pop	r12
    519e:	bf 90       	pop	r11
    51a0:	af 90       	pop	r10
    51a2:	08 95       	ret

000051a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    51a4:	0f 93       	push	r16
    51a6:	1f 93       	push	r17
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	ec 01       	movw	r28, r24
    51ae:	8a 01       	movw	r16, r20
    51b0:	a9 01       	movw	r20, r18
    51b2:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    51b6:	88 23       	and	r24, r24
    51b8:	41 f0       	breq	.+16     	; 0x51ca <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    51ba:	b8 01       	movw	r22, r16
    51bc:	ce 01       	movw	r24, r28
    51be:	0e 96       	adiw	r24, 0x0e	; 14
    51c0:	0e 94 77 34 	call	0x68ee	; 0x68ee <strcmp_P>
    51c4:	21 e0       	ldi	r18, 0x01	; 1
    51c6:	89 2b       	or	r24, r25
    51c8:	09 f0       	breq	.+2      	; 0x51cc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	82 2f       	mov	r24, r18
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	1f 91       	pop	r17
    51d4:	0f 91       	pop	r16
    51d6:	08 95       	ret

000051d8 <_ZN13Adafruit_FONA5beginER6Stream>:
    51d8:	cf 92       	push	r12
    51da:	df 92       	push	r13
    51dc:	ef 92       	push	r14
    51de:	ff 92       	push	r15
    51e0:	0f 93       	push	r16
    51e2:	1f 93       	push	r17
    51e4:	cf 93       	push	r28
    51e6:	df 93       	push	r29
    51e8:	ec 01       	movw	r28, r24
    51ea:	7c 01       	movw	r14, r24
    51ec:	88 ee       	ldi	r24, 0xE8	; 232
    51ee:	e8 1a       	sub	r14, r24
    51f0:	8e ef       	ldi	r24, 0xFE	; 254
    51f2:	f8 0a       	sbc	r15, r24
    51f4:	d7 01       	movw	r26, r14
    51f6:	6d 93       	st	X+, r22
    51f8:	7c 93       	st	X, r23
    51fa:	61 e0       	ldi	r22, 0x01	; 1
    51fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    51fe:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    5202:	61 e0       	ldi	r22, 0x01	; 1
    5204:	8c 85       	ldd	r24, Y+12	; 0x0c
    5206:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
    520a:	6a e0       	ldi	r22, 0x0A	; 10
    520c:	70 e0       	ldi	r23, 0x00	; 0
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    5216:	60 e0       	ldi	r22, 0x00	; 0
    5218:	8c 85       	ldd	r24, Y+12	; 0x0c
    521a:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
    521e:	64 e6       	ldi	r22, 0x64	; 100
    5220:	70 e0       	ldi	r23, 0x00	; 0
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    522a:	61 e0       	ldi	r22, 0x01	; 1
    522c:	8c 85       	ldd	r24, Y+12	; 0x0c
    522e:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
    5232:	6f ea       	ldi	r22, 0xAF	; 175
    5234:	76 e0       	ldi	r23, 0x06	; 6
    5236:	89 e2       	ldi	r24, 0x29	; 41
    5238:	96 e0       	ldi	r25, 0x06	; 6
    523a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    523e:	8e e0       	ldi	r24, 0x0E	; 14
    5240:	c8 2e       	mov	r12, r24
    5242:	d1 2c       	mov	r13, r1
    5244:	8e 01       	movw	r16, r28
    5246:	0a 5e       	subi	r16, 0xEA	; 234
    5248:	1e 4f       	sbci	r17, 0xFE	; 254
    524a:	f7 01       	movw	r30, r14
    524c:	80 81       	ld	r24, Z
    524e:	91 81       	ldd	r25, Z+1	; 0x01
    5250:	dc 01       	movw	r26, r24
    5252:	ed 91       	ld	r30, X+
    5254:	fc 91       	ld	r31, X
    5256:	04 80       	ldd	r0, Z+4	; 0x04
    5258:	f5 81       	ldd	r31, Z+5	; 0x05
    525a:	e0 2d       	mov	r30, r0
    525c:	09 95       	icall
    525e:	89 2b       	or	r24, r25
    5260:	89 f0       	breq	.+34     	; 0x5284 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    5262:	6a e9       	ldi	r22, 0x9A	; 154
    5264:	76 e0       	ldi	r23, 0x06	; 6
    5266:	89 e2       	ldi	r24, 0x29	; 41
    5268:	96 e0       	ldi	r25, 0x06	; 6
    526a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    526e:	f7 01       	movw	r30, r14
    5270:	80 81       	ld	r24, Z
    5272:	91 81       	ldd	r25, Z+1	; 0x01
    5274:	dc 01       	movw	r26, r24
    5276:	ed 91       	ld	r30, X+
    5278:	fc 91       	ld	r31, X
    527a:	06 80       	ldd	r0, Z+6	; 0x06
    527c:	f7 81       	ldd	r31, Z+7	; 0x07
    527e:	e0 2d       	mov	r30, r0
    5280:	09 95       	icall
    5282:	e3 cf       	rjmp	.-58     	; 0x524a <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    5284:	f8 01       	movw	r30, r16
    5286:	40 81       	ld	r20, Z
    5288:	51 81       	ldd	r21, Z+1	; 0x01
    528a:	24 ef       	ldi	r18, 0xF4	; 244
    528c:	31 e0       	ldi	r19, 0x01	; 1
    528e:	67 e9       	ldi	r22, 0x97	; 151
    5290:	76 e0       	ldi	r23, 0x06	; 6
    5292:	ce 01       	movw	r24, r28
    5294:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5298:	81 11       	cpse	r24, r1
    529a:	63 c0       	rjmp	.+198    	; 0x5362 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    529c:	d7 01       	movw	r26, r14
    529e:	8d 91       	ld	r24, X+
    52a0:	9c 91       	ld	r25, X
    52a2:	dc 01       	movw	r26, r24
    52a4:	ed 91       	ld	r30, X+
    52a6:	fc 91       	ld	r31, X
    52a8:	04 80       	ldd	r0, Z+4	; 0x04
    52aa:	f5 81       	ldd	r31, Z+5	; 0x05
    52ac:	e0 2d       	mov	r30, r0
    52ae:	09 95       	icall
    52b0:	89 2b       	or	r24, r25
    52b2:	59 f0       	breq	.+22     	; 0x52ca <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    52b4:	f7 01       	movw	r30, r14
    52b6:	80 81       	ld	r24, Z
    52b8:	91 81       	ldd	r25, Z+1	; 0x01
    52ba:	dc 01       	movw	r26, r24
    52bc:	ed 91       	ld	r30, X+
    52be:	fc 91       	ld	r31, X
    52c0:	06 80       	ldd	r0, Z+6	; 0x06
    52c2:	f7 81       	ldd	r31, Z+7	; 0x07
    52c4:	e0 2d       	mov	r30, r0
    52c6:	09 95       	icall
    52c8:	e9 cf       	rjmp	.-46     	; 0x529c <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    52ca:	24 ef       	ldi	r18, 0xF4	; 244
    52cc:	31 e0       	ldi	r19, 0x01	; 1
    52ce:	44 e9       	ldi	r20, 0x94	; 148
    52d0:	56 e0       	ldi	r21, 0x06	; 6
    52d2:	61 e9       	ldi	r22, 0x91	; 145
    52d4:	76 e0       	ldi	r23, 0x06	; 6
    52d6:	ce 01       	movw	r24, r28
    52d8:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    52dc:	81 11       	cpse	r24, r1
    52de:	41 c0       	rjmp	.+130    	; 0x5362 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    52e0:	64 ef       	ldi	r22, 0xF4	; 244
    52e2:	71 e0       	ldi	r23, 0x01	; 1
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    52ec:	b1 e0       	ldi	r27, 0x01	; 1
    52ee:	cb 1a       	sub	r12, r27
    52f0:	d1 08       	sbc	r13, r1
    52f2:	09 f0       	breq	.+2      	; 0x52f6 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    52f4:	aa cf       	rjmp	.-172    	; 0x524a <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    52f6:	6f e5       	ldi	r22, 0x5F	; 95
    52f8:	76 e0       	ldi	r23, 0x06	; 6
    52fa:	89 e2       	ldi	r24, 0x29	; 41
    52fc:	96 e0       	ldi	r25, 0x06	; 6
    52fe:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5302:	d8 01       	movw	r26, r16
    5304:	4d 91       	ld	r20, X+
    5306:	5c 91       	ld	r21, X
    5308:	24 ef       	ldi	r18, 0xF4	; 244
    530a:	31 e0       	ldi	r19, 0x01	; 1
    530c:	6c e5       	ldi	r22, 0x5C	; 92
    530e:	76 e0       	ldi	r23, 0x06	; 6
    5310:	ce 01       	movw	r24, r28
    5312:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5316:	64 e6       	ldi	r22, 0x64	; 100
    5318:	70 e0       	ldi	r23, 0x00	; 0
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    5322:	f8 01       	movw	r30, r16
    5324:	40 81       	ld	r20, Z
    5326:	51 81       	ldd	r21, Z+1	; 0x01
    5328:	24 ef       	ldi	r18, 0xF4	; 244
    532a:	31 e0       	ldi	r19, 0x01	; 1
    532c:	69 e5       	ldi	r22, 0x59	; 89
    532e:	76 e0       	ldi	r23, 0x06	; 6
    5330:	ce 01       	movw	r24, r28
    5332:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5336:	64 e6       	ldi	r22, 0x64	; 100
    5338:	70 e0       	ldi	r23, 0x00	; 0
    533a:	80 e0       	ldi	r24, 0x00	; 0
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    5342:	d8 01       	movw	r26, r16
    5344:	4d 91       	ld	r20, X+
    5346:	5c 91       	ld	r21, X
    5348:	24 ef       	ldi	r18, 0xF4	; 244
    534a:	31 e0       	ldi	r19, 0x01	; 1
    534c:	66 e5       	ldi	r22, 0x56	; 86
    534e:	76 e0       	ldi	r23, 0x06	; 6
    5350:	ce 01       	movw	r24, r28
    5352:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5356:	64 e6       	ldi	r22, 0x64	; 100
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    5362:	f8 01       	movw	r30, r16
    5364:	40 81       	ld	r20, Z
    5366:	51 81       	ldd	r21, Z+1	; 0x01
    5368:	24 ef       	ldi	r18, 0xF4	; 244
    536a:	31 e0       	ldi	r19, 0x01	; 1
    536c:	61 e5       	ldi	r22, 0x51	; 81
    536e:	76 e0       	ldi	r23, 0x06	; 6
    5370:	ce 01       	movw	r24, r28
    5372:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5376:	64 e6       	ldi	r22, 0x64	; 100
    5378:	70 e0       	ldi	r23, 0x00	; 0
    537a:	80 e0       	ldi	r24, 0x00	; 0
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    5382:	d8 01       	movw	r26, r16
    5384:	4d 91       	ld	r20, X+
    5386:	5c 91       	ld	r21, X
    5388:	24 ef       	ldi	r18, 0xF4	; 244
    538a:	31 e0       	ldi	r19, 0x01	; 1
    538c:	6c e4       	ldi	r22, 0x4C	; 76
    538e:	76 e0       	ldi	r23, 0x06	; 6
    5390:	ce 01       	movw	r24, r28
    5392:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5396:	d8 2e       	mov	r13, r24
    5398:	88 23       	and	r24, r24
    539a:	09 f4       	brne	.+2      	; 0x539e <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    539c:	97 c0       	rjmp	.+302    	; 0x54cc <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    539e:	f8 01       	movw	r30, r16
    53a0:	40 81       	ld	r20, Z
    53a2:	51 81       	ldd	r21, Z+1	; 0x01
    53a4:	24 ef       	ldi	r18, 0xF4	; 244
    53a6:	31 e0       	ldi	r19, 0x01	; 1
    53a8:	62 e4       	ldi	r22, 0x42	; 66
    53aa:	76 e0       	ldi	r23, 0x06	; 6
    53ac:	ce 01       	movw	r24, r28
    53ae:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    53b2:	64 e6       	ldi	r22, 0x64	; 100
    53b4:	70 e0       	ldi	r23, 0x00	; 0
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	0e 94 97 23 	call	0x472e	; 0x472e <delay>
    53be:	ce 01       	movw	r24, r28
    53c0:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    53c4:	6b e3       	ldi	r22, 0x3B	; 59
    53c6:	76 e0       	ldi	r23, 0x06	; 6
    53c8:	89 e2       	ldi	r24, 0x29	; 41
    53ca:	96 e0       	ldi	r25, 0x06	; 6
    53cc:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    53d0:	67 ea       	ldi	r22, 0xA7	; 167
    53d2:	73 e0       	ldi	r23, 0x03	; 3
    53d4:	89 e2       	ldi	r24, 0x29	; 41
    53d6:	96 e0       	ldi	r25, 0x06	; 6
    53d8:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    53dc:	67 ea       	ldi	r22, 0xA7	; 167
    53de:	73 e0       	ldi	r23, 0x03	; 3
    53e0:	d7 01       	movw	r26, r14
    53e2:	8d 91       	ld	r24, X+
    53e4:	9c 91       	ld	r25, X
    53e6:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    53ea:	41 e0       	ldi	r20, 0x01	; 1
    53ec:	64 ef       	ldi	r22, 0xF4	; 244
    53ee:	71 e0       	ldi	r23, 0x01	; 1
    53f0:	ce 01       	movw	r24, r28
    53f2:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    53f6:	64 e3       	ldi	r22, 0x34	; 52
    53f8:	76 e0       	ldi	r23, 0x06	; 6
    53fa:	89 e2       	ldi	r24, 0x29	; 41
    53fc:	96 e0       	ldi	r25, 0x06	; 6
    53fe:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5402:	8e 01       	movw	r16, r28
    5404:	02 5f       	subi	r16, 0xF2	; 242
    5406:	1f 4f       	sbci	r17, 0xFF	; 255
    5408:	b8 01       	movw	r22, r16
    540a:	89 e2       	ldi	r24, 0x29	; 41
    540c:	96 e0       	ldi	r25, 0x06	; 6
    540e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    5412:	69 e2       	ldi	r22, 0x29	; 41
    5414:	76 e0       	ldi	r23, 0x06	; 6
    5416:	c8 01       	movw	r24, r16
    5418:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    541c:	89 2b       	or	r24, r25
    541e:	11 f0       	breq	.+4      	; 0x5424 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    5420:	83 e0       	ldi	r24, 0x03	; 3
    5422:	23 c0       	rjmp	.+70     	; 0x546a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    5424:	6e e1       	ldi	r22, 0x1E	; 30
    5426:	76 e0       	ldi	r23, 0x06	; 6
    5428:	c8 01       	movw	r24, r16
    542a:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    542e:	89 2b       	or	r24, r25
    5430:	11 f0       	breq	.+4      	; 0x5436 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    5432:	82 e0       	ldi	r24, 0x02	; 2
    5434:	1a c0       	rjmp	.+52     	; 0x546a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    5436:	63 e1       	ldi	r22, 0x13	; 19
    5438:	76 e0       	ldi	r23, 0x06	; 6
    543a:	c8 01       	movw	r24, r16
    543c:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    5440:	89 2b       	or	r24, r25
    5442:	11 f0       	breq	.+4      	; 0x5448 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	11 c0       	rjmp	.+34     	; 0x546a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    5448:	63 e0       	ldi	r22, 0x03	; 3
    544a:	76 e0       	ldi	r23, 0x06	; 6
    544c:	c8 01       	movw	r24, r16
    544e:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    5452:	89 2b       	or	r24, r25
    5454:	11 f0       	breq	.+4      	; 0x545a <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    5456:	84 e0       	ldi	r24, 0x04	; 4
    5458:	08 c0       	rjmp	.+16     	; 0x546a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    545a:	63 ef       	ldi	r22, 0xF3	; 243
    545c:	75 e0       	ldi	r23, 0x05	; 5
    545e:	c8 01       	movw	r24, r16
    5460:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    5464:	89 2b       	or	r24, r25
    5466:	11 f0       	breq	.+4      	; 0x546c <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    5468:	85 e0       	ldi	r24, 0x05	; 5
    546a:	8d 87       	std	Y+13, r24	; 0x0d
    546c:	8d 85       	ldd	r24, Y+13	; 0x0d
    546e:	81 30       	cpi	r24, 0x01	; 1
    5470:	69 f5       	brne	.+90     	; 0x54cc <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    5472:	6c ee       	ldi	r22, 0xEC	; 236
    5474:	75 e0       	ldi	r23, 0x05	; 5
    5476:	89 e2       	ldi	r24, 0x29	; 41
    5478:	96 e0       	ldi	r25, 0x06	; 6
    547a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    547e:	6b ea       	ldi	r22, 0xAB	; 171
    5480:	73 e0       	ldi	r23, 0x03	; 3
    5482:	89 e2       	ldi	r24, 0x29	; 41
    5484:	96 e0       	ldi	r25, 0x06	; 6
    5486:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    548a:	6b ea       	ldi	r22, 0xAB	; 171
    548c:	73 e0       	ldi	r23, 0x03	; 3
    548e:	f7 01       	movw	r30, r14
    5490:	80 81       	ld	r24, Z
    5492:	91 81       	ldd	r25, Z+1	; 0x01
    5494:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    5498:	41 e0       	ldi	r20, 0x01	; 1
    549a:	64 ef       	ldi	r22, 0xF4	; 244
    549c:	71 e0       	ldi	r23, 0x01	; 1
    549e:	ce 01       	movw	r24, r28
    54a0:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    54a4:	65 ee       	ldi	r22, 0xE5	; 229
    54a6:	75 e0       	ldi	r23, 0x05	; 5
    54a8:	89 e2       	ldi	r24, 0x29	; 41
    54aa:	96 e0       	ldi	r25, 0x06	; 6
    54ac:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    54b0:	b8 01       	movw	r22, r16
    54b2:	89 e2       	ldi	r24, 0x29	; 41
    54b4:	96 e0       	ldi	r25, 0x06	; 6
    54b6:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    54ba:	6d ed       	ldi	r22, 0xDD	; 221
    54bc:	75 e0       	ldi	r23, 0x05	; 5
    54be:	c8 01       	movw	r24, r16
    54c0:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    54c4:	89 2b       	or	r24, r25
    54c6:	11 f0       	breq	.+4      	; 0x54cc <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    54c8:	86 e0       	ldi	r24, 0x06	; 6
    54ca:	8d 87       	std	Y+13, r24	; 0x0d
    54cc:	8d 2d       	mov	r24, r13
    54ce:	df 91       	pop	r29
    54d0:	cf 91       	pop	r28
    54d2:	1f 91       	pop	r17
    54d4:	0f 91       	pop	r16
    54d6:	ff 90       	pop	r15
    54d8:	ef 90       	pop	r14
    54da:	df 90       	pop	r13
    54dc:	cf 90       	pop	r12
    54de:	08 95       	ret

000054e0 <_ZN13Adafruit_FONA9HTTP_initEv>:
    54e0:	fc 01       	movw	r30, r24
    54e2:	ea 5e       	subi	r30, 0xEA	; 234
    54e4:	fe 4f       	sbci	r31, 0xFE	; 254
    54e6:	40 81       	ld	r20, Z
    54e8:	51 81       	ldd	r21, Z+1	; 0x01
    54ea:	24 ef       	ldi	r18, 0xF4	; 244
    54ec:	31 e0       	ldi	r19, 0x01	; 1
    54ee:	6f eb       	ldi	r22, 0xBF	; 191
    54f0:	74 e0       	ldi	r23, 0x04	; 4
    54f2:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000054f6 <_ZN13Adafruit_FONA9HTTP_termEv>:
    54f6:	fc 01       	movw	r30, r24
    54f8:	ea 5e       	subi	r30, 0xEA	; 234
    54fa:	fe 4f       	sbci	r31, 0xFE	; 254
    54fc:	40 81       	ld	r20, Z
    54fe:	51 81       	ldd	r21, Z+1	; 0x01
    5500:	24 ef       	ldi	r18, 0xF4	; 244
    5502:	31 e0       	ldi	r19, 0x01	; 1
    5504:	63 eb       	ldi	r22, 0xB3	; 179
    5506:	74 e0       	ldi	r23, 0x04	; 4
    5508:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000550c <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    550c:	0c 94 7b 2a 	jmp	0x54f6	; 0x54f6 <_ZN13Adafruit_FONA9HTTP_termEv>

00005510 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    5510:	0f 93       	push	r16
    5512:	1f 93       	push	r17
    5514:	cf 93       	push	r28
    5516:	df 93       	push	r29
    5518:	ec 01       	movw	r28, r24
    551a:	8a 01       	movw	r16, r20
    551c:	a9 01       	movw	r20, r18
    551e:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <_ZN13Adafruit_FONA8getReplyEPcj>
    5522:	88 23       	and	r24, r24
    5524:	41 f0       	breq	.+16     	; 0x5536 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    5526:	b8 01       	movw	r22, r16
    5528:	ce 01       	movw	r24, r28
    552a:	0e 96       	adiw	r24, 0x0e	; 14
    552c:	0e 94 77 34 	call	0x68ee	; 0x68ee <strcmp_P>
    5530:	21 e0       	ldi	r18, 0x01	; 1
    5532:	89 2b       	or	r24, r25
    5534:	09 f0       	breq	.+2      	; 0x5538 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    5536:	20 e0       	ldi	r18, 0x00	; 0
    5538:	82 2f       	mov	r24, r18
    553a:	df 91       	pop	r29
    553c:	cf 91       	pop	r28
    553e:	1f 91       	pop	r17
    5540:	0f 91       	pop	r16
    5542:	08 95       	ret

00005544 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    5544:	af 92       	push	r10
    5546:	bf 92       	push	r11
    5548:	cf 92       	push	r12
    554a:	df 92       	push	r13
    554c:	ef 92       	push	r14
    554e:	ff 92       	push	r15
    5550:	0f 93       	push	r16
    5552:	1f 93       	push	r17
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	cd b7       	in	r28, 0x3d	; 61
    555a:	de b7       	in	r29, 0x3e	; 62
    555c:	6e 97       	sbiw	r28, 0x1e	; 30
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	cd bf       	out	0x3d, r28	; 61
    5568:	8c 01       	movw	r16, r24
    556a:	5b 01       	movw	r10, r22
    556c:	6a 01       	movw	r12, r20
    556e:	fc 01       	movw	r30, r24
    5570:	ea 5e       	subi	r30, 0xEA	; 234
    5572:	fe 4f       	sbci	r31, 0xFE	; 254
    5574:	40 81       	ld	r20, Z
    5576:	51 81       	ldd	r21, Z+1	; 0x01
    5578:	24 ef       	ldi	r18, 0xF4	; 244
    557a:	31 e0       	ldi	r19, 0x01	; 1
    557c:	66 ea       	ldi	r22, 0xA6	; 166
    557e:	75 e0       	ldi	r23, 0x05	; 5
    5580:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5584:	88 23       	and	r24, r24
    5586:	09 f4       	brne	.+2      	; 0x558a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    5588:	88 c0       	rjmp	.+272    	; 0x569a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    558a:	8a e0       	ldi	r24, 0x0A	; 10
    558c:	ed e8       	ldi	r30, 0x8D	; 141
    558e:	f1 e0       	ldi	r31, 0x01	; 1
    5590:	9e 01       	movw	r18, r28
    5592:	2f 5f       	subi	r18, 0xFF	; 255
    5594:	3f 4f       	sbci	r19, 0xFF	; 255
    5596:	79 01       	movw	r14, r18
    5598:	d9 01       	movw	r26, r18
    559a:	01 90       	ld	r0, Z+
    559c:	0d 92       	st	X+, r0
    559e:	8a 95       	dec	r24
    55a0:	e1 f7       	brne	.-8      	; 0x559a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    55a2:	fe 01       	movw	r30, r28
    55a4:	3b 96       	adiw	r30, 0x0b	; 11
    55a6:	84 e1       	ldi	r24, 0x14	; 20
    55a8:	df 01       	movw	r26, r30
    55aa:	1d 92       	st	X+, r1
    55ac:	8a 95       	dec	r24
    55ae:	e9 f7       	brne	.-6      	; 0x55aa <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    55b0:	43 e1       	ldi	r20, 0x13	; 19
    55b2:	50 e0       	ldi	r21, 0x00	; 0
    55b4:	b5 01       	movw	r22, r10
    55b6:	ce 01       	movw	r24, r28
    55b8:	0a 96       	adiw	r24, 0x0a	; 10
    55ba:	0e 94 c7 34 	call	0x698e	; 0x698e <strncpy>
    55be:	f7 01       	movw	r30, r14
    55c0:	01 90       	ld	r0, Z+
    55c2:	00 20       	and	r0, r0
    55c4:	e9 f7       	brne	.-6      	; 0x55c0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    55c6:	31 97       	sbiw	r30, 0x01	; 1
    55c8:	82 e2       	ldi	r24, 0x22	; 34
    55ca:	80 83       	st	Z, r24
    55cc:	24 ef       	ldi	r18, 0xF4	; 244
    55ce:	31 e0       	ldi	r19, 0x01	; 1
    55d0:	43 ea       	ldi	r20, 0xA3	; 163
    55d2:	55 e0       	ldi	r21, 0x05	; 5
    55d4:	b7 01       	movw	r22, r14
    55d6:	c8 01       	movw	r24, r16
    55d8:	0e 94 88 2a 	call	0x5510	; 0x5510 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    55dc:	88 23       	and	r24, r24
    55de:	09 f4       	brne	.+2      	; 0x55e2 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    55e0:	5c c0       	rjmp	.+184    	; 0x569a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    55e2:	60 ea       	ldi	r22, 0xA0	; 160
    55e4:	75 e0       	ldi	r23, 0x05	; 5
    55e6:	89 e2       	ldi	r24, 0x29	; 41
    55e8:	96 e0       	ldi	r25, 0x06	; 6
    55ea:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    55ee:	b6 01       	movw	r22, r12
    55f0:	89 e2       	ldi	r24, 0x29	; 41
    55f2:	96 e0       	ldi	r25, 0x06	; 6
    55f4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    55f8:	b6 01       	movw	r22, r12
    55fa:	78 01       	movw	r14, r16
    55fc:	b8 ee       	ldi	r27, 0xE8	; 232
    55fe:	eb 1a       	sub	r14, r27
    5600:	be ef       	ldi	r27, 0xFE	; 254
    5602:	fb 0a       	sbc	r15, r27
    5604:	f7 01       	movw	r30, r14
    5606:	80 81       	ld	r24, Z
    5608:	91 81       	ldd	r25, Z+1	; 0x01
    560a:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    560e:	d7 01       	movw	r26, r14
    5610:	8d 91       	ld	r24, X+
    5612:	9c 91       	ld	r25, X
    5614:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    5618:	f7 01       	movw	r30, r14
    561a:	80 81       	ld	r24, Z
    561c:	91 81       	ldd	r25, Z+1	; 0x01
    561e:	dc 01       	movw	r26, r24
    5620:	ed 91       	ld	r30, X+
    5622:	fc 91       	ld	r31, X
    5624:	01 90       	ld	r0, Z+
    5626:	f0 81       	ld	r31, Z
    5628:	e0 2d       	mov	r30, r0
    562a:	6a e1       	ldi	r22, 0x1A	; 26
    562c:	09 95       	icall
    562e:	64 ec       	ldi	r22, 0xC4	; 196
    5630:	73 e0       	ldi	r23, 0x03	; 3
    5632:	89 e2       	ldi	r24, 0x29	; 41
    5634:	96 e0       	ldi	r25, 0x06	; 6
    5636:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    563a:	f8 01       	movw	r30, r16
    563c:	85 85       	ldd	r24, Z+13	; 0x0d
    563e:	84 50       	subi	r24, 0x04	; 4
    5640:	82 30       	cpi	r24, 0x02	; 2
    5642:	60 f4       	brcc	.+24     	; 0x565c <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    5644:	40 e0       	ldi	r20, 0x00	; 0
    5646:	68 ec       	ldi	r22, 0xC8	; 200
    5648:	70 e0       	ldi	r23, 0x00	; 0
    564a:	c8 01       	movw	r24, r16
    564c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    5650:	40 e0       	ldi	r20, 0x00	; 0
    5652:	68 ec       	ldi	r22, 0xC8	; 200
    5654:	70 e0       	ldi	r23, 0x00	; 0
    5656:	c8 01       	movw	r24, r16
    5658:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    565c:	40 e0       	ldi	r20, 0x00	; 0
    565e:	60 e1       	ldi	r22, 0x10	; 16
    5660:	77 e2       	ldi	r23, 0x27	; 39
    5662:	c8 01       	movw	r24, r16
    5664:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    5668:	78 01       	movw	r14, r16
    566a:	fe e0       	ldi	r31, 0x0E	; 14
    566c:	ef 0e       	add	r14, r31
    566e:	f1 1c       	adc	r15, r1
    5670:	67 ec       	ldi	r22, 0xC7	; 199
    5672:	73 e0       	ldi	r23, 0x03	; 3
    5674:	c7 01       	movw	r24, r14
    5676:	0e 94 d6 34 	call	0x69ac	; 0x69ac <strstr>
    567a:	89 2b       	or	r24, r25
    567c:	71 f0       	breq	.+28     	; 0x569a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    567e:	40 e0       	ldi	r20, 0x00	; 0
    5680:	68 ee       	ldi	r22, 0xE8	; 232
    5682:	73 e0       	ldi	r23, 0x03	; 3
    5684:	c8 01       	movw	r24, r16
    5686:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    568a:	6a e9       	ldi	r22, 0x9A	; 154
    568c:	73 e0       	ldi	r23, 0x03	; 3
    568e:	c7 01       	movw	r24, r14
    5690:	0e 94 b7 34 	call	0x696e	; 0x696e <strcmp>
    5694:	21 e0       	ldi	r18, 0x01	; 1
    5696:	89 2b       	or	r24, r25
    5698:	09 f0       	breq	.+2      	; 0x569c <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    569a:	20 e0       	ldi	r18, 0x00	; 0
    569c:	82 2f       	mov	r24, r18
    569e:	6e 96       	adiw	r28, 0x1e	; 30
    56a0:	0f b6       	in	r0, 0x3f	; 63
    56a2:	f8 94       	cli
    56a4:	de bf       	out	0x3e, r29	; 62
    56a6:	0f be       	out	0x3f, r0	; 63
    56a8:	cd bf       	out	0x3d, r28	; 61
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	1f 91       	pop	r17
    56b0:	0f 91       	pop	r16
    56b2:	ff 90       	pop	r15
    56b4:	ef 90       	pop	r14
    56b6:	df 90       	pop	r13
    56b8:	cf 90       	pop	r12
    56ba:	bf 90       	pop	r11
    56bc:	af 90       	pop	r10
    56be:	08 95       	ret

000056c0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    56c0:	cf 92       	push	r12
    56c2:	df 92       	push	r13
    56c4:	ef 92       	push	r14
    56c6:	ff 92       	push	r15
    56c8:	0f 93       	push	r16
    56ca:	1f 93       	push	r17
    56cc:	cf 93       	push	r28
    56ce:	df 93       	push	r29
    56d0:	ec 01       	movw	r28, r24
    56d2:	68 01       	movw	r12, r16
    56d4:	87 01       	movw	r16, r14
    56d6:	0e 94 14 28 	call	0x5028	; 0x5028 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    56da:	b6 01       	movw	r22, r12
    56dc:	ce 01       	movw	r24, r28
    56de:	0e 96       	adiw	r24, 0x0e	; 14
    56e0:	0e 94 77 34 	call	0x68ee	; 0x68ee <strcmp_P>
    56e4:	21 e0       	ldi	r18, 0x01	; 1
    56e6:	89 2b       	or	r24, r25
    56e8:	09 f0       	breq	.+2      	; 0x56ec <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	82 2f       	mov	r24, r18
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	1f 91       	pop	r17
    56f4:	0f 91       	pop	r16
    56f6:	ff 90       	pop	r15
    56f8:	ef 90       	pop	r14
    56fa:	df 90       	pop	r13
    56fc:	cf 90       	pop	r12
    56fe:	08 95       	ret

00005700 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    5700:	ef 92       	push	r14
    5702:	ff 92       	push	r15
    5704:	0f 93       	push	r16
    5706:	1f 93       	push	r17
    5708:	fc 01       	movw	r30, r24
    570a:	ea 5e       	subi	r30, 0xEA	; 234
    570c:	fe 4f       	sbci	r31, 0xFE	; 254
    570e:	00 81       	ld	r16, Z
    5710:	11 81       	ldd	r17, Z+1	; 0x01
    5712:	26 2f       	mov	r18, r22
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	40 e0       	ldi	r20, 0x00	; 0
    5718:	50 e0       	ldi	r21, 0x00	; 0
    571a:	64 ef       	ldi	r22, 0xF4	; 244
    571c:	e6 2e       	mov	r14, r22
    571e:	ff 24       	eor	r15, r15
    5720:	f3 94       	inc	r15
    5722:	63 e1       	ldi	r22, 0x13	; 19
    5724:	74 e0       	ldi	r23, 0x04	; 4
    5726:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    572a:	1f 91       	pop	r17
    572c:	0f 91       	pop	r16
    572e:	ff 90       	pop	r15
    5730:	ef 90       	pop	r14
    5732:	08 95       	ret

00005734 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    5734:	0f 93       	push	r16
    5736:	1f 93       	push	r17
    5738:	cf 93       	push	r28
    573a:	df 93       	push	r29
    573c:	ec 01       	movw	r28, r24
    573e:	8b 01       	movw	r16, r22
    5740:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <_ZN13Adafruit_FONA9HTTP_termEv>
    5744:	ce 01       	movw	r24, r28
    5746:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <_ZN13Adafruit_FONA9HTTP_initEv>
    574a:	81 11       	cpse	r24, r1
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	38 c0       	rjmp	.+112    	; 0x57c2 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    5752:	21 e0       	ldi	r18, 0x01	; 1
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	40 e0       	ldi	r20, 0x00	; 0
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	68 ef       	ldi	r22, 0xF8	; 248
    575c:	73 e0       	ldi	r23, 0x03	; 3
    575e:	ce 01       	movw	r24, r28
    5760:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    5764:	88 23       	and	r24, r24
    5766:	99 f3       	breq	.-26     	; 0x574e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5768:	fe 01       	movw	r30, r28
    576a:	ec 5e       	subi	r30, 0xEC	; 236
    576c:	fe 4f       	sbci	r31, 0xFE	; 254
    576e:	40 81       	ld	r20, Z
    5770:	51 81       	ldd	r21, Z+1	; 0x01
    5772:	65 ef       	ldi	r22, 0xF5	; 245
    5774:	73 e0       	ldi	r23, 0x03	; 3
    5776:	ce 01       	movw	r24, r28
    5778:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    577c:	88 23       	and	r24, r24
    577e:	39 f3       	breq	.-50     	; 0x574e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5780:	a8 01       	movw	r20, r16
    5782:	61 ef       	ldi	r22, 0xF1	; 241
    5784:	73 e0       	ldi	r23, 0x03	; 3
    5786:	ce 01       	movw	r24, r28
    5788:	0e 94 e5 26 	call	0x4dca	; 0x4dca <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    578c:	88 23       	and	r24, r24
    578e:	f9 f2       	breq	.-66     	; 0x574e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5790:	fe 01       	movw	r30, r28
    5792:	ed 5e       	subi	r30, 0xED	; 237
    5794:	fe 4f       	sbci	r31, 0xFE	; 254
    5796:	90 81       	ld	r25, Z
    5798:	99 23       	and	r25, r25
    579a:	99 f0       	breq	.+38     	; 0x57c2 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    579c:	21 e0       	ldi	r18, 0x01	; 1
    579e:	30 e0       	ldi	r19, 0x00	; 0
    57a0:	40 e0       	ldi	r20, 0x00	; 0
    57a2:	50 e0       	ldi	r21, 0x00	; 0
    57a4:	6b ee       	ldi	r22, 0xEB	; 235
    57a6:	73 e0       	ldi	r23, 0x03	; 3
    57a8:	ce 01       	movw	r24, r28
    57aa:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    57ae:	88 23       	and	r24, r24
    57b0:	71 f2       	breq	.-100    	; 0x574e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    57b2:	61 e0       	ldi	r22, 0x01	; 1
    57b4:	ce 01       	movw	r24, r28
    57b6:	df 91       	pop	r29
    57b8:	cf 91       	pop	r28
    57ba:	1f 91       	pop	r17
    57bc:	0f 91       	pop	r16
    57be:	0c 94 80 2b 	jmp	0x5700	; 0x5700 <_ZN13Adafruit_FONA8HTTP_sslEb>
    57c2:	df 91       	pop	r29
    57c4:	cf 91       	pop	r28
    57c6:	1f 91       	pop	r17
    57c8:	0f 91       	pop	r16
    57ca:	08 95       	ret

000057cc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    57cc:	ef 92       	push	r14
    57ce:	ff 92       	push	r15
    57d0:	0f 93       	push	r16
    57d2:	1f 93       	push	r17
    57d4:	cf 93       	push	r28
    57d6:	df 93       	push	r29
    57d8:	ec 01       	movw	r28, r24
    57da:	79 01       	movw	r14, r18
    57dc:	98 01       	movw	r18, r16
    57de:	0e 94 6e 28 	call	0x50dc	; 0x50dc <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    57e2:	b7 01       	movw	r22, r14
    57e4:	ce 01       	movw	r24, r28
    57e6:	0e 96       	adiw	r24, 0x0e	; 14
    57e8:	0e 94 77 34 	call	0x68ee	; 0x68ee <strcmp_P>
    57ec:	21 e0       	ldi	r18, 0x01	; 1
    57ee:	89 2b       	or	r24, r25
    57f0:	09 f0       	breq	.+2      	; 0x57f4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	82 2f       	mov	r24, r18
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	1f 91       	pop	r17
    57fc:	0f 91       	pop	r16
    57fe:	ff 90       	pop	r15
    5800:	ef 90       	pop	r14
    5802:	08 95       	ret

00005804 <_ZN13Adafruit_FONA10enableGPRSEb>:
    5804:	8f 92       	push	r8
    5806:	9f 92       	push	r9
    5808:	af 92       	push	r10
    580a:	bf 92       	push	r11
    580c:	cf 92       	push	r12
    580e:	df 92       	push	r13
    5810:	ef 92       	push	r14
    5812:	ff 92       	push	r15
    5814:	0f 93       	push	r16
    5816:	1f 93       	push	r17
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	ec 01       	movw	r28, r24
    581e:	20 e2       	ldi	r18, 0x20	; 32
    5820:	3e e4       	ldi	r19, 0x4E	; 78
    5822:	66 23       	and	r22, r22
    5824:	09 f4       	brne	.+2      	; 0x5828 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    5826:	0f c1       	rjmp	.+542    	; 0x5a46 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    5828:	48 e9       	ldi	r20, 0x98	; 152
    582a:	55 e0       	ldi	r21, 0x05	; 5
    582c:	6d e8       	ldi	r22, 0x8D	; 141
    582e:	75 e0       	ldi	r23, 0x05	; 5
    5830:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5834:	7e 01       	movw	r14, r28
    5836:	8a ee       	ldi	r24, 0xEA	; 234
    5838:	e8 1a       	sub	r14, r24
    583a:	8e ef       	ldi	r24, 0xFE	; 254
    583c:	f8 0a       	sbc	r15, r24
    583e:	f7 01       	movw	r30, r14
    5840:	40 81       	ld	r20, Z
    5842:	51 81       	ldd	r21, Z+1	; 0x01
    5844:	20 e1       	ldi	r18, 0x10	; 16
    5846:	37 e2       	ldi	r19, 0x27	; 39
    5848:	62 e8       	ldi	r22, 0x82	; 130
    584a:	75 e0       	ldi	r23, 0x05	; 5
    584c:	ce 01       	movw	r24, r28
    584e:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5852:	88 23       	and	r24, r24
    5854:	09 f4       	brne	.+2      	; 0x5858 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    5856:	24 c1       	rjmp	.+584    	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5858:	f7 01       	movw	r30, r14
    585a:	40 81       	ld	r20, Z
    585c:	51 81       	ldd	r21, Z+1	; 0x01
    585e:	20 e1       	ldi	r18, 0x10	; 16
    5860:	37 e2       	ldi	r19, 0x27	; 39
    5862:	64 e6       	ldi	r22, 0x64	; 100
    5864:	75 e0       	ldi	r23, 0x05	; 5
    5866:	ce 01       	movw	r24, r28
    5868:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    586c:	88 23       	and	r24, r24
    586e:	09 f4       	brne	.+2      	; 0x5872 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    5870:	17 c1       	rjmp	.+558    	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5872:	4e 01       	movw	r8, r28
    5874:	f3 ef       	ldi	r31, 0xF3	; 243
    5876:	8f 1a       	sub	r8, r31
    5878:	fe ef       	ldi	r31, 0xFE	; 254
    587a:	9f 0a       	sbc	r9, r31
    587c:	f4 01       	movw	r30, r8
    587e:	40 81       	ld	r20, Z
    5880:	51 81       	ldd	r21, Z+1	; 0x01
    5882:	41 15       	cp	r20, r1
    5884:	51 05       	cpc	r21, r1
    5886:	a9 f4       	brne	.+42     	; 0x58b2 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    5888:	f7 01       	movw	r30, r14
    588a:	40 81       	ld	r20, Z
    588c:	51 81       	ldd	r21, Z+1	; 0x01
    588e:	20 e3       	ldi	r18, 0x30	; 48
    5890:	35 e7       	ldi	r19, 0x75	; 117
    5892:	6f ef       	ldi	r22, 0xFF	; 255
    5894:	74 e0       	ldi	r23, 0x04	; 4
    5896:	ce 01       	movw	r24, r28
    5898:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    589c:	88 23       	and	r24, r24
    589e:	09 f4       	brne	.+2      	; 0x58a2 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    58a0:	ff c0       	rjmp	.+510    	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    58a2:	f7 01       	movw	r30, r14
    58a4:	40 81       	ld	r20, Z
    58a6:	51 81       	ldd	r21, Z+1	; 0x01
    58a8:	20 e1       	ldi	r18, 0x10	; 16
    58aa:	37 e2       	ldi	r19, 0x27	; 39
    58ac:	66 ef       	ldi	r22, 0xF6	; 246
    58ae:	74 e0       	ldi	r23, 0x04	; 4
    58b0:	e8 c0       	rjmp	.+464    	; 0x5a82 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    58b2:	f7 01       	movw	r30, r14
    58b4:	20 81       	ld	r18, Z
    58b6:	31 81       	ldd	r19, Z+1	; 0x01
    58b8:	00 e1       	ldi	r16, 0x10	; 16
    58ba:	17 e2       	ldi	r17, 0x27	; 39
    58bc:	60 e5       	ldi	r22, 0x50	; 80
    58be:	75 e0       	ldi	r23, 0x05	; 5
    58c0:	ce 01       	movw	r24, r28
    58c2:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    58c6:	88 23       	and	r24, r24
    58c8:	09 f4       	brne	.+2      	; 0x58cc <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    58ca:	ea c0       	rjmp	.+468    	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    58cc:	ce 01       	movw	r24, r28
    58ce:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN13Adafruit_FONA10flushInputEv>
    58d2:	8e 01       	movw	r16, r28
    58d4:	08 5e       	subi	r16, 0xE8	; 232
    58d6:	1e 4f       	sbci	r17, 0xFE	; 254
    58d8:	66 e4       	ldi	r22, 0x46	; 70
    58da:	75 e0       	ldi	r23, 0x05	; 5
    58dc:	f8 01       	movw	r30, r16
    58de:	80 81       	ld	r24, Z
    58e0:	91 81       	ldd	r25, Z+1	; 0x01
    58e2:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    58e6:	f4 01       	movw	r30, r8
    58e8:	60 81       	ld	r22, Z
    58ea:	71 81       	ldd	r23, Z+1	; 0x01
    58ec:	f8 01       	movw	r30, r16
    58ee:	80 81       	ld	r24, Z
    58f0:	91 81       	ldd	r25, Z+1	; 0x01
    58f2:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    58f6:	5e 01       	movw	r10, r28
    58f8:	f1 ef       	ldi	r31, 0xF1	; 241
    58fa:	af 1a       	sub	r10, r31
    58fc:	fe ef       	ldi	r31, 0xFE	; 254
    58fe:	bf 0a       	sbc	r11, r31
    5900:	f5 01       	movw	r30, r10
    5902:	80 81       	ld	r24, Z
    5904:	91 81       	ldd	r25, Z+1	; 0x01
    5906:	89 2b       	or	r24, r25
    5908:	79 f0       	breq	.+30     	; 0x5928 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    590a:	68 ee       	ldi	r22, 0xE8	; 232
    590c:	73 e0       	ldi	r23, 0x03	; 3
    590e:	f8 01       	movw	r30, r16
    5910:	80 81       	ld	r24, Z
    5912:	91 81       	ldd	r25, Z+1	; 0x01
    5914:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    5918:	f5 01       	movw	r30, r10
    591a:	60 81       	ld	r22, Z
    591c:	71 81       	ldd	r23, Z+1	; 0x01
    591e:	f8 01       	movw	r30, r16
    5920:	80 81       	ld	r24, Z
    5922:	91 81       	ldd	r25, Z+1	; 0x01
    5924:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5928:	6e 01       	movw	r12, r28
    592a:	ff ee       	ldi	r31, 0xEF	; 239
    592c:	cf 1a       	sub	r12, r31
    592e:	fe ef       	ldi	r31, 0xFE	; 254
    5930:	df 0a       	sbc	r13, r31
    5932:	f6 01       	movw	r30, r12
    5934:	80 81       	ld	r24, Z
    5936:	91 81       	ldd	r25, Z+1	; 0x01
    5938:	89 2b       	or	r24, r25
    593a:	79 f0       	breq	.+30     	; 0x595a <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    593c:	68 ee       	ldi	r22, 0xE8	; 232
    593e:	73 e0       	ldi	r23, 0x03	; 3
    5940:	f8 01       	movw	r30, r16
    5942:	80 81       	ld	r24, Z
    5944:	91 81       	ldd	r25, Z+1	; 0x01
    5946:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    594a:	f6 01       	movw	r30, r12
    594c:	60 81       	ld	r22, Z
    594e:	71 81       	ldd	r23, Z+1	; 0x01
    5950:	f8 01       	movw	r30, r16
    5952:	80 81       	ld	r24, Z
    5954:	91 81       	ldd	r25, Z+1	; 0x01
    5956:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    595a:	6a ee       	ldi	r22, 0xEA	; 234
    595c:	73 e0       	ldi	r23, 0x03	; 3
    595e:	f8 01       	movw	r30, r16
    5960:	80 81       	ld	r24, Z
    5962:	91 81       	ldd	r25, Z+1	; 0x01
    5964:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    5968:	6f e3       	ldi	r22, 0x3F	; 63
    596a:	75 e0       	ldi	r23, 0x05	; 5
    596c:	89 e2       	ldi	r24, 0x29	; 41
    596e:	96 e0       	ldi	r25, 0x06	; 6
    5970:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5974:	65 e3       	ldi	r22, 0x35	; 53
    5976:	75 e0       	ldi	r23, 0x05	; 5
    5978:	89 e2       	ldi	r24, 0x29	; 41
    597a:	96 e0       	ldi	r25, 0x06	; 6
    597c:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5980:	f4 01       	movw	r30, r8
    5982:	60 81       	ld	r22, Z
    5984:	71 81       	ldd	r23, Z+1	; 0x01
    5986:	89 e2       	ldi	r24, 0x29	; 41
    5988:	96 e0       	ldi	r25, 0x06	; 6
    598a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    598e:	f5 01       	movw	r30, r10
    5990:	80 81       	ld	r24, Z
    5992:	91 81       	ldd	r25, Z+1	; 0x01
    5994:	89 2b       	or	r24, r25
    5996:	69 f0       	breq	.+26     	; 0x59b2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    5998:	68 ee       	ldi	r22, 0xE8	; 232
    599a:	73 e0       	ldi	r23, 0x03	; 3
    599c:	89 e2       	ldi	r24, 0x29	; 41
    599e:	96 e0       	ldi	r25, 0x06	; 6
    59a0:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    59a4:	f5 01       	movw	r30, r10
    59a6:	60 81       	ld	r22, Z
    59a8:	71 81       	ldd	r23, Z+1	; 0x01
    59aa:	89 e2       	ldi	r24, 0x29	; 41
    59ac:	96 e0       	ldi	r25, 0x06	; 6
    59ae:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    59b2:	f6 01       	movw	r30, r12
    59b4:	80 81       	ld	r24, Z
    59b6:	91 81       	ldd	r25, Z+1	; 0x01
    59b8:	89 2b       	or	r24, r25
    59ba:	69 f0       	breq	.+26     	; 0x59d6 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    59bc:	68 ee       	ldi	r22, 0xE8	; 232
    59be:	73 e0       	ldi	r23, 0x03	; 3
    59c0:	89 e2       	ldi	r24, 0x29	; 41
    59c2:	96 e0       	ldi	r25, 0x06	; 6
    59c4:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
    59c8:	f6 01       	movw	r30, r12
    59ca:	60 81       	ld	r22, Z
    59cc:	71 81       	ldd	r23, Z+1	; 0x01
    59ce:	89 e2       	ldi	r24, 0x29	; 41
    59d0:	96 e0       	ldi	r25, 0x06	; 6
    59d2:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    59d6:	6a ee       	ldi	r22, 0xEA	; 234
    59d8:	73 e0       	ldi	r23, 0x03	; 3
    59da:	89 e2       	ldi	r24, 0x29	; 41
    59dc:	96 e0       	ldi	r25, 0x06	; 6
    59de:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
    59e2:	f7 01       	movw	r30, r14
    59e4:	60 81       	ld	r22, Z
    59e6:	71 81       	ldd	r23, Z+1	; 0x01
    59e8:	40 e1       	ldi	r20, 0x10	; 16
    59ea:	57 e2       	ldi	r21, 0x27	; 39
    59ec:	ce 01       	movw	r24, r28
    59ee:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    59f2:	88 23       	and	r24, r24
    59f4:	09 f4       	brne	.+2      	; 0x59f8 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    59f6:	54 c0       	rjmp	.+168    	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    59f8:	f5 01       	movw	r30, r10
    59fa:	40 81       	ld	r20, Z
    59fc:	51 81       	ldd	r21, Z+1	; 0x01
    59fe:	41 15       	cp	r20, r1
    5a00:	51 05       	cpc	r21, r1
    5a02:	39 f4       	brne	.+14     	; 0x5a12 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    5a04:	f6 01       	movw	r30, r12
    5a06:	40 81       	ld	r20, Z
    5a08:	51 81       	ldd	r21, Z+1	; 0x01
    5a0a:	41 15       	cp	r20, r1
    5a0c:	51 05       	cpc	r21, r1
    5a0e:	71 f4       	brne	.+28     	; 0x5a2c <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    5a10:	3b cf       	rjmp	.-394    	; 0x5888 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5a12:	f7 01       	movw	r30, r14
    5a14:	20 81       	ld	r18, Z
    5a16:	31 81       	ldd	r19, Z+1	; 0x01
    5a18:	00 e1       	ldi	r16, 0x10	; 16
    5a1a:	17 e2       	ldi	r17, 0x27	; 39
    5a1c:	60 e2       	ldi	r22, 0x20	; 32
    5a1e:	75 e0       	ldi	r23, 0x05	; 5
    5a20:	ce 01       	movw	r24, r28
    5a22:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5a26:	81 11       	cpse	r24, r1
    5a28:	ed cf       	rjmp	.-38     	; 0x5a04 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    5a2a:	3a c0       	rjmp	.+116    	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5a2c:	f7 01       	movw	r30, r14
    5a2e:	20 81       	ld	r18, Z
    5a30:	31 81       	ldd	r19, Z+1	; 0x01
    5a32:	00 e1       	ldi	r16, 0x10	; 16
    5a34:	17 e2       	ldi	r17, 0x27	; 39
    5a36:	6c e0       	ldi	r22, 0x0C	; 12
    5a38:	75 e0       	ldi	r23, 0x05	; 5
    5a3a:	ce 01       	movw	r24, r28
    5a3c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5a40:	81 11       	cpse	r24, r1
    5a42:	22 cf       	rjmp	.-444    	; 0x5888 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5a44:	2d c0       	rjmp	.+90     	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5a46:	4e ee       	ldi	r20, 0xEE	; 238
    5a48:	54 e0       	ldi	r21, 0x04	; 4
    5a4a:	63 ee       	ldi	r22, 0xE3	; 227
    5a4c:	74 e0       	ldi	r23, 0x04	; 4
    5a4e:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5a52:	88 23       	and	r24, r24
    5a54:	29 f1       	breq	.+74     	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5a56:	8e 01       	movw	r16, r28
    5a58:	0a 5e       	subi	r16, 0xEA	; 234
    5a5a:	1e 4f       	sbci	r17, 0xFE	; 254
    5a5c:	f8 01       	movw	r30, r16
    5a5e:	40 81       	ld	r20, Z
    5a60:	51 81       	ldd	r21, Z+1	; 0x01
    5a62:	20 e1       	ldi	r18, 0x10	; 16
    5a64:	37 e2       	ldi	r19, 0x27	; 39
    5a66:	66 ed       	ldi	r22, 0xD6	; 214
    5a68:	74 e0       	ldi	r23, 0x04	; 4
    5a6a:	ce 01       	movw	r24, r28
    5a6c:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5a70:	88 23       	and	r24, r24
    5a72:	b1 f0       	breq	.+44     	; 0x5aa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5a74:	f8 01       	movw	r30, r16
    5a76:	40 81       	ld	r20, Z
    5a78:	51 81       	ldd	r21, Z+1	; 0x01
    5a7a:	20 e1       	ldi	r18, 0x10	; 16
    5a7c:	37 e2       	ldi	r19, 0x27	; 39
    5a7e:	6b ec       	ldi	r22, 0xCB	; 203
    5a80:	74 e0       	ldi	r23, 0x04	; 4
    5a82:	ce 01       	movw	r24, r28
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	1f 91       	pop	r17
    5a8a:	0f 91       	pop	r16
    5a8c:	ff 90       	pop	r15
    5a8e:	ef 90       	pop	r14
    5a90:	df 90       	pop	r13
    5a92:	cf 90       	pop	r12
    5a94:	bf 90       	pop	r11
    5a96:	af 90       	pop	r10
    5a98:	9f 90       	pop	r9
    5a9a:	8f 90       	pop	r8
    5a9c:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	df 91       	pop	r29
    5aa4:	cf 91       	pop	r28
    5aa6:	1f 91       	pop	r17
    5aa8:	0f 91       	pop	r16
    5aaa:	ff 90       	pop	r15
    5aac:	ef 90       	pop	r14
    5aae:	df 90       	pop	r13
    5ab0:	cf 90       	pop	r12
    5ab2:	bf 90       	pop	r11
    5ab4:	af 90       	pop	r10
    5ab6:	9f 90       	pop	r9
    5ab8:	8f 90       	pop	r8
    5aba:	08 95       	ret

00005abc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    5abc:	af 92       	push	r10
    5abe:	bf 92       	push	r11
    5ac0:	cf 92       	push	r12
    5ac2:	df 92       	push	r13
    5ac4:	ef 92       	push	r14
    5ac6:	ff 92       	push	r15
    5ac8:	0f 93       	push	r16
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	5b 01       	movw	r10, r22
    5ad0:	6a 01       	movw	r12, r20
    5ad2:	e2 2e       	mov	r14, r18
    5ad4:	0e 96       	adiw	r24, 0x0e	; 14
    5ad6:	0e 94 89 34 	call	0x6912	; 0x6912 <strstr_P>
    5ada:	ec 01       	movw	r28, r24
    5adc:	89 2b       	or	r24, r25
    5ade:	c1 f0       	breq	.+48     	; 0x5b10 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5ae0:	c5 01       	movw	r24, r10
    5ae2:	0e 94 80 34 	call	0x6900	; 0x6900 <__strlen_P>
    5ae6:	8c 0f       	add	r24, r28
    5ae8:	9d 1f       	adc	r25, r29
    5aea:	c0 e0       	ldi	r28, 0x00	; 0
    5aec:	f1 2c       	mov	r15, r1
    5aee:	c0 17       	cp	r28, r16
    5af0:	41 f0       	breq	.+16     	; 0x5b02 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    5af2:	b7 01       	movw	r22, r14
    5af4:	0e 94 ac 34 	call	0x6958	; 0x6958 <strchr>
    5af8:	00 97       	sbiw	r24, 0x00	; 0
    5afa:	51 f0       	breq	.+20     	; 0x5b10 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5afc:	01 96       	adiw	r24, 0x01	; 1
    5afe:	cf 5f       	subi	r28, 0xFF	; 255
    5b00:	f6 cf       	rjmp	.-20     	; 0x5aee <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    5b02:	0e 94 59 34 	call	0x68b2	; 0x68b2 <atoi>
    5b06:	f6 01       	movw	r30, r12
    5b08:	91 83       	std	Z+1, r25	; 0x01
    5b0a:	80 83       	st	Z, r24
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	01 c0       	rjmp	.+2      	; 0x5b12 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    5b10:	80 e0       	ldi	r24, 0x00	; 0
    5b12:	df 91       	pop	r29
    5b14:	cf 91       	pop	r28
    5b16:	0f 91       	pop	r16
    5b18:	ff 90       	pop	r15
    5b1a:	ef 90       	pop	r14
    5b1c:	df 90       	pop	r13
    5b1e:	cf 90       	pop	r12
    5b20:	bf 90       	pop	r11
    5b22:	af 90       	pop	r10
    5b24:	08 95       	ret

00005b26 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    5b26:	ef 92       	push	r14
    5b28:	ff 92       	push	r15
    5b2a:	0f 93       	push	r16
    5b2c:	cf 93       	push	r28
    5b2e:	df 93       	push	r29
    5b30:	ec 01       	movw	r28, r24
    5b32:	7b 01       	movw	r14, r22
    5b34:	44 ef       	ldi	r20, 0xF4	; 244
    5b36:	51 e0       	ldi	r21, 0x01	; 1
    5b38:	6a e2       	ldi	r22, 0x2A	; 42
    5b3a:	74 e0       	ldi	r23, 0x04	; 4
    5b3c:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5b40:	00 e0       	ldi	r16, 0x00	; 0
    5b42:	2c e2       	ldi	r18, 0x2C	; 44
    5b44:	a7 01       	movw	r20, r14
    5b46:	6f e1       	ldi	r22, 0x1F	; 31
    5b48:	74 e0       	ldi	r23, 0x04	; 4
    5b4a:	ce 01       	movw	r24, r28
    5b4c:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5b50:	df 91       	pop	r29
    5b52:	cf 91       	pop	r28
    5b54:	0f 91       	pop	r16
    5b56:	ff 90       	pop	r15
    5b58:	ef 90       	pop	r14
    5b5a:	08 95       	ret

00005b5c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    5b5c:	4f 92       	push	r4
    5b5e:	5f 92       	push	r5
    5b60:	6f 92       	push	r6
    5b62:	7f 92       	push	r7
    5b64:	af 92       	push	r10
    5b66:	bf 92       	push	r11
    5b68:	cf 92       	push	r12
    5b6a:	df 92       	push	r13
    5b6c:	ef 92       	push	r14
    5b6e:	ff 92       	push	r15
    5b70:	0f 93       	push	r16
    5b72:	1f 93       	push	r17
    5b74:	cf 93       	push	r28
    5b76:	df 93       	push	r29
    5b78:	ec 01       	movw	r28, r24
    5b7a:	5a 01       	movw	r10, r20
    5b7c:	69 01       	movw	r12, r18
    5b7e:	27 01       	movw	r4, r14
    5b80:	38 01       	movw	r6, r16
    5b82:	fc 01       	movw	r30, r24
    5b84:	ea 5e       	subi	r30, 0xEA	; 234
    5b86:	fe 4f       	sbci	r31, 0xFE	; 254
    5b88:	00 81       	ld	r16, Z
    5b8a:	11 81       	ldd	r17, Z+1	; 0x01
    5b8c:	26 2f       	mov	r18, r22
    5b8e:	30 e0       	ldi	r19, 0x00	; 0
    5b90:	40 e0       	ldi	r20, 0x00	; 0
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	84 ef       	ldi	r24, 0xF4	; 244
    5b96:	e8 2e       	mov	r14, r24
    5b98:	ff 24       	eor	r15, r15
    5b9a:	f3 94       	inc	r15
    5b9c:	60 e5       	ldi	r22, 0x50	; 80
    5b9e:	74 e0       	ldi	r23, 0x04	; 4
    5ba0:	ce 01       	movw	r24, r28
    5ba2:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    5ba6:	81 11       	cpse	r24, r1
    5ba8:	02 c0       	rjmp	.+4      	; 0x5bae <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	17 c0       	rjmp	.+46     	; 0x5bdc <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    5bae:	40 e0       	ldi	r20, 0x00	; 0
    5bb0:	b2 01       	movw	r22, r4
    5bb2:	ce 01       	movw	r24, r28
    5bb4:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    5bb8:	01 e0       	ldi	r16, 0x01	; 1
    5bba:	2c e2       	ldi	r18, 0x2C	; 44
    5bbc:	a5 01       	movw	r20, r10
    5bbe:	63 e4       	ldi	r22, 0x43	; 67
    5bc0:	74 e0       	ldi	r23, 0x04	; 4
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5bc8:	88 23       	and	r24, r24
    5bca:	79 f3       	breq	.-34     	; 0x5baa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    5bcc:	02 e0       	ldi	r16, 0x02	; 2
    5bce:	2c e2       	ldi	r18, 0x2C	; 44
    5bd0:	a6 01       	movw	r20, r12
    5bd2:	66 e3       	ldi	r22, 0x36	; 54
    5bd4:	74 e0       	ldi	r23, 0x04	; 4
    5bd6:	ce 01       	movw	r24, r28
    5bd8:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	1f 91       	pop	r17
    5be2:	0f 91       	pop	r16
    5be4:	ff 90       	pop	r15
    5be6:	ef 90       	pop	r14
    5be8:	df 90       	pop	r13
    5bea:	cf 90       	pop	r12
    5bec:	bf 90       	pop	r11
    5bee:	af 90       	pop	r10
    5bf0:	7f 90       	pop	r7
    5bf2:	6f 90       	pop	r6
    5bf4:	5f 90       	pop	r5
    5bf6:	4f 90       	pop	r4
    5bf8:	08 95       	ret

00005bfa <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    5bfa:	4f 92       	push	r4
    5bfc:	5f 92       	push	r5
    5bfe:	6f 92       	push	r6
    5c00:	7f 92       	push	r7
    5c02:	8f 92       	push	r8
    5c04:	9f 92       	push	r9
    5c06:	af 92       	push	r10
    5c08:	bf 92       	push	r11
    5c0a:	cf 92       	push	r12
    5c0c:	df 92       	push	r13
    5c0e:	ef 92       	push	r14
    5c10:	ff 92       	push	r15
    5c12:	0f 93       	push	r16
    5c14:	1f 93       	push	r17
    5c16:	cf 93       	push	r28
    5c18:	df 93       	push	r29
    5c1a:	ec 01       	movw	r28, r24
    5c1c:	2a 01       	movw	r4, r20
    5c1e:	39 01       	movw	r6, r18
    5c20:	48 01       	movw	r8, r16
    5c22:	57 01       	movw	r10, r14
    5c24:	0e 94 9a 2b 	call	0x5734	; 0x5734 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    5c28:	88 23       	and	r24, r24
    5c2a:	09 f4       	brne	.+2      	; 0x5c2e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    5c2c:	71 c0       	rjmp	.+226    	; 0x5d10 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5c2e:	a2 01       	movw	r20, r4
    5c30:	6b e0       	ldi	r22, 0x0B	; 11
    5c32:	74 e0       	ldi	r23, 0x04	; 4
    5c34:	ce 01       	movw	r24, r28
    5c36:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5c3a:	88 23       	and	r24, r24
    5c3c:	09 f4       	brne	.+2      	; 0x5c40 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    5c3e:	68 c0       	rjmp	.+208    	; 0x5d10 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5c40:	a8 01       	movw	r20, r16
    5c42:	60 e0       	ldi	r22, 0x00	; 0
    5c44:	70 e0       	ldi	r23, 0x00	; 0
    5c46:	00 e1       	ldi	r16, 0x10	; 16
    5c48:	17 e2       	ldi	r17, 0x27	; 39
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	ce 01       	movw	r24, r28
    5c50:	0e 94 38 27 	call	0x4e70	; 0x4e70 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    5c54:	88 23       	and	r24, r24
    5c56:	09 f4       	brne	.+2      	; 0x5c5a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    5c58:	5b c0       	rjmp	.+182    	; 0x5d10 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5c5a:	fe 01       	movw	r30, r28
    5c5c:	e8 5e       	subi	r30, 0xE8	; 232
    5c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c60:	80 81       	ld	r24, Z
    5c62:	91 81       	ldd	r25, Z+1	; 0x01
    5c64:	dc 01       	movw	r26, r24
    5c66:	ed 91       	ld	r30, X+
    5c68:	fc 91       	ld	r31, X
    5c6a:	02 80       	ldd	r0, Z+2	; 0x02
    5c6c:	f3 81       	ldd	r31, Z+3	; 0x03
    5c6e:	e0 2d       	mov	r30, r0
    5c70:	a4 01       	movw	r20, r8
    5c72:	b3 01       	movw	r22, r6
    5c74:	09 95       	icall
    5c76:	fe 01       	movw	r30, r28
    5c78:	ea 5e       	subi	r30, 0xEA	; 234
    5c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c7c:	60 81       	ld	r22, Z
    5c7e:	71 81       	ldd	r23, Z+1	; 0x01
    5c80:	40 e1       	ldi	r20, 0x10	; 16
    5c82:	57 e2       	ldi	r21, 0x27	; 39
    5c84:	ce 01       	movw	r24, r28
    5c86:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5c8a:	88 23       	and	r24, r24
    5c8c:	09 f4       	brne	.+2      	; 0x5c90 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    5c8e:	40 c0       	rjmp	.+128    	; 0x5d10 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5c90:	10 e1       	ldi	r17, 0x10	; 16
    5c92:	e1 2e       	mov	r14, r17
    5c94:	17 e2       	ldi	r17, 0x27	; 39
    5c96:	f1 2e       	mov	r15, r17
    5c98:	00 e0       	ldi	r16, 0x00	; 0
    5c9a:	10 e0       	ldi	r17, 0x00	; 0
    5c9c:	96 01       	movw	r18, r12
    5c9e:	a5 01       	movw	r20, r10
    5ca0:	61 e0       	ldi	r22, 0x01	; 1
    5ca2:	ce 01       	movw	r24, r28
    5ca4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    5ca8:	88 23       	and	r24, r24
    5caa:	91 f1       	breq	.+100    	; 0x5d10 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5cac:	62 e0       	ldi	r22, 0x02	; 2
    5cae:	74 e0       	ldi	r23, 0x04	; 4
    5cb0:	89 e2       	ldi	r24, 0x29	; 41
    5cb2:	96 e0       	ldi	r25, 0x06	; 6
    5cb4:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5cb8:	f5 01       	movw	r30, r10
    5cba:	60 81       	ld	r22, Z
    5cbc:	71 81       	ldd	r23, Z+1	; 0x01
    5cbe:	4a e0       	ldi	r20, 0x0A	; 10
    5cc0:	50 e0       	ldi	r21, 0x00	; 0
    5cc2:	89 e2       	ldi	r24, 0x29	; 41
    5cc4:	96 e0       	ldi	r25, 0x06	; 6
    5cc6:	0e 94 96 21 	call	0x432c	; 0x432c <_ZN5Print7printlnEji>
    5cca:	6c ef       	ldi	r22, 0xFC	; 252
    5ccc:	73 e0       	ldi	r23, 0x03	; 3
    5cce:	89 e2       	ldi	r24, 0x29	; 41
    5cd0:	96 e0       	ldi	r25, 0x06	; 6
    5cd2:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    5cd6:	d6 01       	movw	r26, r12
    5cd8:	6d 91       	ld	r22, X+
    5cda:	7c 91       	ld	r23, X
    5cdc:	4a e0       	ldi	r20, 0x0A	; 10
    5cde:	50 e0       	ldi	r21, 0x00	; 0
    5ce0:	89 e2       	ldi	r24, 0x29	; 41
    5ce2:	96 e0       	ldi	r25, 0x06	; 6
    5ce4:	0e 94 96 21 	call	0x432c	; 0x432c <_ZN5Print7printlnEji>
    5ce8:	b6 01       	movw	r22, r12
    5cea:	ce 01       	movw	r24, r28
    5cec:	df 91       	pop	r29
    5cee:	cf 91       	pop	r28
    5cf0:	1f 91       	pop	r17
    5cf2:	0f 91       	pop	r16
    5cf4:	ff 90       	pop	r15
    5cf6:	ef 90       	pop	r14
    5cf8:	df 90       	pop	r13
    5cfa:	cf 90       	pop	r12
    5cfc:	bf 90       	pop	r11
    5cfe:	af 90       	pop	r10
    5d00:	9f 90       	pop	r9
    5d02:	8f 90       	pop	r8
    5d04:	7f 90       	pop	r7
    5d06:	6f 90       	pop	r6
    5d08:	5f 90       	pop	r5
    5d0a:	4f 90       	pop	r4
    5d0c:	0c 94 93 2d 	jmp	0x5b26	; 0x5b26 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	df 91       	pop	r29
    5d14:	cf 91       	pop	r28
    5d16:	1f 91       	pop	r17
    5d18:	0f 91       	pop	r16
    5d1a:	ff 90       	pop	r15
    5d1c:	ef 90       	pop	r14
    5d1e:	df 90       	pop	r13
    5d20:	cf 90       	pop	r12
    5d22:	bf 90       	pop	r11
    5d24:	af 90       	pop	r10
    5d26:	9f 90       	pop	r9
    5d28:	8f 90       	pop	r8
    5d2a:	7f 90       	pop	r7
    5d2c:	6f 90       	pop	r6
    5d2e:	5f 90       	pop	r5
    5d30:	4f 90       	pop	r4
    5d32:	08 95       	ret

00005d34 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    5d34:	af 92       	push	r10
    5d36:	bf 92       	push	r11
    5d38:	cf 92       	push	r12
    5d3a:	df 92       	push	r13
    5d3c:	ef 92       	push	r14
    5d3e:	0f 93       	push	r16
    5d40:	1f 93       	push	r17
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	ec 01       	movw	r28, r24
    5d48:	6a 01       	movw	r12, r20
    5d4a:	59 01       	movw	r10, r18
    5d4c:	10 2f       	mov	r17, r16
    5d4e:	0e 2d       	mov	r16, r14
    5d50:	44 ef       	ldi	r20, 0xF4	; 244
    5d52:	51 e0       	ldi	r21, 0x01	; 1
    5d54:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5d58:	21 2f       	mov	r18, r17
    5d5a:	a5 01       	movw	r20, r10
    5d5c:	b6 01       	movw	r22, r12
    5d5e:	ce 01       	movw	r24, r28
    5d60:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5d64:	18 2f       	mov	r17, r24
    5d66:	88 23       	and	r24, r24
    5d68:	31 f0       	breq	.+12     	; 0x5d76 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5d6a:	40 e0       	ldi	r20, 0x00	; 0
    5d6c:	64 ef       	ldi	r22, 0xF4	; 244
    5d6e:	71 e0       	ldi	r23, 0x01	; 1
    5d70:	ce 01       	movw	r24, r28
    5d72:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN13Adafruit_FONA8readlineEjb>
    5d76:	81 2f       	mov	r24, r17
    5d78:	df 91       	pop	r29
    5d7a:	cf 91       	pop	r28
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	ef 90       	pop	r14
    5d82:	df 90       	pop	r13
    5d84:	cf 90       	pop	r12
    5d86:	bf 90       	pop	r11
    5d88:	af 90       	pop	r10
    5d8a:	08 95       	ret

00005d8c <_ZN13Adafruit_FONA14getBattPercentEPj>:
    5d8c:	ef 92       	push	r14
    5d8e:	0f 93       	push	r16
    5d90:	9b 01       	movw	r18, r22
    5d92:	ee 24       	eor	r14, r14
    5d94:	e3 94       	inc	r14
    5d96:	0c e2       	ldi	r16, 0x2C	; 44
    5d98:	46 ed       	ldi	r20, 0xD6	; 214
    5d9a:	55 e0       	ldi	r21, 0x05	; 5
    5d9c:	6f ec       	ldi	r22, 0xCF	; 207
    5d9e:	75 e0       	ldi	r23, 0x05	; 5
    5da0:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5da4:	0f 91       	pop	r16
    5da6:	ef 90       	pop	r14
    5da8:	08 95       	ret

00005daa <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    5daa:	ef 92       	push	r14
    5dac:	0f 93       	push	r16
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	00 d0       	rcall	.+0      	; 0x5db4 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    5db4:	cd b7       	in	r28, 0x3d	; 61
    5db6:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5db8:	ee 24       	eor	r14, r14
    5dba:	e3 94       	inc	r14
    5dbc:	0c e2       	ldi	r16, 0x2C	; 44
    5dbe:	9e 01       	movw	r18, r28
    5dc0:	2f 5f       	subi	r18, 0xFF	; 255
    5dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc4:	47 ec       	ldi	r20, 0xC7	; 199
    5dc6:	55 e0       	ldi	r21, 0x05	; 5
    5dc8:	6e eb       	ldi	r22, 0xBE	; 190
    5dca:	75 e0       	ldi	r23, 0x05	; 5
    5dcc:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5dd0:	88 23       	and	r24, r24
    5dd2:	11 f0       	breq	.+4      	; 0x5dd8 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    5dd4:	89 81       	ldd	r24, Y+1	; 0x01
    5dd6:	01 c0       	rjmp	.+2      	; 0x5dda <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5dd8:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    5dda:	0f 90       	pop	r0
    5ddc:	0f 90       	pop	r0
    5dde:	df 91       	pop	r29
    5de0:	cf 91       	pop	r28
    5de2:	0f 91       	pop	r16
    5de4:	ef 90       	pop	r14
    5de6:	08 95       	ret

00005de8 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    5de8:	ef 92       	push	r14
    5dea:	0f 93       	push	r16
    5dec:	cf 93       	push	r28
    5dee:	df 93       	push	r29
    5df0:	00 d0       	rcall	.+0      	; 0x5df2 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    5df2:	cd b7       	in	r28, 0x3d	; 61
    5df4:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5df6:	e1 2c       	mov	r14, r1
    5df8:	0c e2       	ldi	r16, 0x2C	; 44
    5dfa:	9e 01       	movw	r18, r28
    5dfc:	2f 5f       	subi	r18, 0xFF	; 255
    5dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    5e00:	47 eb       	ldi	r20, 0xB7	; 183
    5e02:	55 e0       	ldi	r21, 0x05	; 5
    5e04:	60 eb       	ldi	r22, 0xB0	; 176
    5e06:	75 e0       	ldi	r23, 0x05	; 5
    5e08:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5e0c:	88 23       	and	r24, r24
    5e0e:	11 f0       	breq	.+4      	; 0x5e14 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    5e10:	89 81       	ldd	r24, Y+1	; 0x01
    5e12:	01 c0       	rjmp	.+2      	; 0x5e16 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5e14:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    5e16:	0f 90       	pop	r0
    5e18:	0f 90       	pop	r0
    5e1a:	df 91       	pop	r29
    5e1c:	cf 91       	pop	r28
    5e1e:	0f 91       	pop	r16
    5e20:	ef 90       	pop	r14
    5e22:	08 95       	ret

00005e24 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    5e24:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5e28:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5e2c:	28 17       	cp	r18, r24
    5e2e:	39 07       	cpc	r19, r25
    5e30:	b9 f4       	brne	.+46     	; 0x5e60 <_ZN14SoftwareSerial4readEv+0x3c>
    5e32:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5e36:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5e3a:	98 17       	cp	r25, r24
    5e3c:	89 f0       	breq	.+34     	; 0x5e60 <_ZN14SoftwareSerial4readEv+0x3c>
    5e3e:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5e42:	f0 e0       	ldi	r31, 0x00	; 0
    5e44:	ef 52       	subi	r30, 0x2F	; 47
    5e46:	f9 4f       	sbci	r31, 0xF9	; 249
    5e48:	80 81       	ld	r24, Z
    5e4a:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	2f 5f       	subi	r18, 0xFF	; 255
    5e52:	3f 4f       	sbci	r19, 0xFF	; 255
    5e54:	2f 73       	andi	r18, 0x3F	; 63
    5e56:	33 27       	eor	r19, r19
    5e58:	20 93 cf 06 	sts	0x06CF, r18	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	08 95       	ret
    5e60:	8f ef       	ldi	r24, 0xFF	; 255
    5e62:	9f ef       	ldi	r25, 0xFF	; 255
    5e64:	08 95       	ret

00005e66 <_ZN14SoftwareSerial5writeEh>:
    5e66:	1f 93       	push	r17
    5e68:	cf 93       	push	r28
    5e6a:	df 93       	push	r29
    5e6c:	dc 01       	movw	r26, r24
    5e6e:	5c 96       	adiw	r26, 0x1c	; 28
    5e70:	8d 91       	ld	r24, X+
    5e72:	9c 91       	ld	r25, X
    5e74:	5d 97       	sbiw	r26, 0x1d	; 29
    5e76:	00 97       	sbiw	r24, 0x00	; 0
    5e78:	39 f4       	brne	.+14     	; 0x5e88 <_ZN14SoftwareSerial5writeEh+0x22>
    5e7a:	21 e0       	ldi	r18, 0x01	; 1
    5e7c:	30 e0       	ldi	r19, 0x00	; 0
    5e7e:	13 96       	adiw	r26, 0x03	; 3
    5e80:	3c 93       	st	X, r19
    5e82:	2e 93       	st	-X, r18
    5e84:	12 97       	sbiw	r26, 0x02	; 2
    5e86:	3b c0       	rjmp	.+118    	; 0x5efe <_ZN14SoftwareSerial5writeEh+0x98>
    5e88:	51 96       	adiw	r26, 0x11	; 17
    5e8a:	ed 91       	ld	r30, X+
    5e8c:	fc 91       	ld	r31, X
    5e8e:	52 97       	sbiw	r26, 0x12	; 18
    5e90:	50 96       	adiw	r26, 0x10	; 16
    5e92:	2c 91       	ld	r18, X
    5e94:	50 97       	sbiw	r26, 0x10	; 16
    5e96:	32 2f       	mov	r19, r18
    5e98:	30 95       	com	r19
    5e9a:	1f b7       	in	r17, 0x3f	; 63
    5e9c:	5e 96       	adiw	r26, 0x1e	; 30
    5e9e:	4c 91       	ld	r20, X
    5ea0:	5e 97       	sbiw	r26, 0x1e	; 30
    5ea2:	74 2f       	mov	r23, r20
    5ea4:	72 70       	andi	r23, 0x02	; 2
    5ea6:	41 fd       	sbrc	r20, 1
    5ea8:	60 95       	com	r22
    5eaa:	f8 94       	cli
    5eac:	40 81       	ld	r20, Z
    5eae:	77 23       	and	r23, r23
    5eb0:	11 f0       	breq	.+4      	; 0x5eb6 <_ZN14SoftwareSerial5writeEh+0x50>
    5eb2:	42 2b       	or	r20, r18
    5eb4:	01 c0       	rjmp	.+2      	; 0x5eb8 <_ZN14SoftwareSerial5writeEh+0x52>
    5eb6:	43 23       	and	r20, r19
    5eb8:	40 83       	st	Z, r20
    5eba:	ec 01       	movw	r28, r24
    5ebc:	21 97       	sbiw	r28, 0x01	; 1
    5ebe:	f1 f7       	brne	.-4      	; 0x5ebc <_ZN14SoftwareSerial5writeEh+0x56>
    5ec0:	48 e0       	ldi	r20, 0x08	; 8
    5ec2:	50 81       	ld	r21, Z
    5ec4:	60 ff       	sbrs	r22, 0
    5ec6:	02 c0       	rjmp	.+4      	; 0x5ecc <_ZN14SoftwareSerial5writeEh+0x66>
    5ec8:	52 2b       	or	r21, r18
    5eca:	01 c0       	rjmp	.+2      	; 0x5ece <_ZN14SoftwareSerial5writeEh+0x68>
    5ecc:	53 23       	and	r21, r19
    5ece:	50 83       	st	Z, r21
    5ed0:	ec 01       	movw	r28, r24
    5ed2:	21 97       	sbiw	r28, 0x01	; 1
    5ed4:	f1 f7       	brne	.-4      	; 0x5ed2 <_ZN14SoftwareSerial5writeEh+0x6c>
    5ed6:	66 95       	lsr	r22
    5ed8:	41 50       	subi	r20, 0x01	; 1
    5eda:	99 f7       	brne	.-26     	; 0x5ec2 <_ZN14SoftwareSerial5writeEh+0x5c>
    5edc:	80 81       	ld	r24, Z
    5ede:	77 23       	and	r23, r23
    5ee0:	19 f0       	breq	.+6      	; 0x5ee8 <_ZN14SoftwareSerial5writeEh+0x82>
    5ee2:	83 23       	and	r24, r19
    5ee4:	80 83       	st	Z, r24
    5ee6:	02 c0       	rjmp	.+4      	; 0x5eec <_ZN14SoftwareSerial5writeEh+0x86>
    5ee8:	28 2b       	or	r18, r24
    5eea:	20 83       	st	Z, r18
    5eec:	1f bf       	out	0x3f, r17	; 63
    5eee:	5c 96       	adiw	r26, 0x1c	; 28
    5ef0:	8d 91       	ld	r24, X+
    5ef2:	9c 91       	ld	r25, X
    5ef4:	5d 97       	sbiw	r26, 0x1d	; 29
    5ef6:	01 97       	sbiw	r24, 0x01	; 1
    5ef8:	f1 f7       	brne	.-4      	; 0x5ef6 <_ZN14SoftwareSerial5writeEh+0x90>
    5efa:	81 e0       	ldi	r24, 0x01	; 1
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	df 91       	pop	r29
    5f00:	cf 91       	pop	r28
    5f02:	1f 91       	pop	r17
    5f04:	08 95       	ret

00005f06 <_ZN14SoftwareSerial5flushEv>:
    5f06:	08 95       	ret

00005f08 <_ZN14SoftwareSerial4peekEv>:
    5f08:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5f0c:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5f10:	28 17       	cp	r18, r24
    5f12:	39 07       	cpc	r19, r25
    5f14:	71 f4       	brne	.+28     	; 0x5f32 <_ZN14SoftwareSerial4peekEv+0x2a>
    5f16:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5f1a:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5f1e:	98 17       	cp	r25, r24
    5f20:	41 f0       	breq	.+16     	; 0x5f32 <_ZN14SoftwareSerial4peekEv+0x2a>
    5f22:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5f26:	f0 e0       	ldi	r31, 0x00	; 0
    5f28:	ef 52       	subi	r30, 0x2F	; 47
    5f2a:	f9 4f       	sbci	r31, 0xF9	; 249
    5f2c:	80 81       	ld	r24, Z
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	08 95       	ret
    5f32:	8f ef       	ldi	r24, 0xFF	; 255
    5f34:	9f ef       	ldi	r25, 0xFF	; 255
    5f36:	08 95       	ret

00005f38 <_ZN14SoftwareSerial9availableEv>:
    5f38:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5f3c:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5f40:	28 17       	cp	r18, r24
    5f42:	39 07       	cpc	r19, r25
    5f44:	71 f4       	brne	.+28     	; 0x5f62 <_ZN14SoftwareSerial9availableEv+0x2a>
    5f46:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5f4a:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	80 5c       	subi	r24, 0xC0	; 192
    5f52:	9f 4f       	sbci	r25, 0xFF	; 255
    5f54:	82 1b       	sub	r24, r18
    5f56:	91 09       	sbc	r25, r1
    5f58:	60 e4       	ldi	r22, 0x40	; 64
    5f5a:	70 e0       	ldi	r23, 0x00	; 0
    5f5c:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__divmodhi4>
    5f60:	08 95       	ret
    5f62:	80 e0       	ldi	r24, 0x00	; 0
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	08 95       	ret

00005f68 <_ZN14SoftwareSerial13stopListeningEv>:
    5f68:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5f6c:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5f70:	e8 17       	cp	r30, r24
    5f72:	f9 07       	cpc	r31, r25
    5f74:	69 f4       	brne	.+26     	; 0x5f90 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    5f76:	a3 89       	ldd	r26, Z+19	; 0x13
    5f78:	b4 89       	ldd	r27, Z+20	; 0x14
    5f7a:	9c 91       	ld	r25, X
    5f7c:	85 89       	ldd	r24, Z+21	; 0x15
    5f7e:	80 95       	com	r24
    5f80:	89 23       	and	r24, r25
    5f82:	8c 93       	st	X, r24
    5f84:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5f88:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	08 95       	ret
    5f90:	80 e0       	ldi	r24, 0x00	; 0
    5f92:	08 95       	ret

00005f94 <_ZN14SoftwareSerial6listenEv>:
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	ec 01       	movw	r28, r24
    5f9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f9c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f9e:	89 2b       	or	r24, r25
    5fa0:	f1 f0       	breq	.+60     	; 0x5fde <_ZN14SoftwareSerial6listenEv+0x4a>
    5fa2:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5fa6:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5faa:	c8 17       	cp	r28, r24
    5fac:	d9 07       	cpc	r29, r25
    5fae:	b9 f0       	breq	.+46     	; 0x5fde <_ZN14SoftwareSerial6listenEv+0x4a>
    5fb0:	00 97       	sbiw	r24, 0x00	; 0
    5fb2:	11 f0       	breq	.+4      	; 0x5fb8 <_ZN14SoftwareSerial6listenEv+0x24>
    5fb4:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_ZN14SoftwareSerial13stopListeningEv>
    5fb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5fba:	8e 7f       	andi	r24, 0xFE	; 254
    5fbc:	8e 8f       	std	Y+30, r24	; 0x1e
    5fbe:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5fc2:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    5fc6:	d0 93 12 07 	sts	0x0712, r29	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    5fca:	c0 93 11 07 	sts	0x0711, r28	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    5fce:	eb 89       	ldd	r30, Y+19	; 0x13
    5fd0:	fc 89       	ldd	r31, Y+20	; 0x14
    5fd2:	90 81       	ld	r25, Z
    5fd4:	8d 89       	ldd	r24, Y+21	; 0x15
    5fd6:	89 2b       	or	r24, r25
    5fd8:	80 83       	st	Z, r24
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	01 c0       	rjmp	.+2      	; 0x5fe0 <_ZN14SoftwareSerial6listenEv+0x4c>
    5fde:	80 e0       	ldi	r24, 0x00	; 0
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	08 95       	ret

00005fe6 <__vector_3>:
    5fe6:	1f 92       	push	r1
    5fe8:	0f 92       	push	r0
    5fea:	0f b6       	in	r0, 0x3f	; 63
    5fec:	0f 92       	push	r0
    5fee:	11 24       	eor	r1, r1
    5ff0:	2f 93       	push	r18
    5ff2:	3f 93       	push	r19
    5ff4:	4f 93       	push	r20
    5ff6:	5f 93       	push	r21
    5ff8:	6f 93       	push	r22
    5ffa:	7f 93       	push	r23
    5ffc:	8f 93       	push	r24
    5ffe:	9f 93       	push	r25
    6000:	af 93       	push	r26
    6002:	bf 93       	push	r27
    6004:	ef 93       	push	r30
    6006:	ff 93       	push	r31
    6008:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <_ZN14SoftwareSerial13active_objectE>
    600c:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <_ZN14SoftwareSerial13active_objectE+0x1>
    6010:	30 97       	sbiw	r30, 0x00	; 0
    6012:	09 f4       	brne	.+2      	; 0x6016 <__vector_3+0x30>
    6014:	51 c0       	rjmp	.+162    	; 0x60b8 <__vector_3+0xd2>
    6016:	96 8d       	ldd	r25, Z+30	; 0x1e
    6018:	a6 85       	ldd	r26, Z+14	; 0x0e
    601a:	b7 85       	ldd	r27, Z+15	; 0x0f
    601c:	85 85       	ldd	r24, Z+13	; 0x0d
    601e:	91 ff       	sbrs	r25, 1
    6020:	04 c0       	rjmp	.+8      	; 0x602a <__vector_3+0x44>
    6022:	9c 91       	ld	r25, X
    6024:	89 23       	and	r24, r25
    6026:	29 f4       	brne	.+10     	; 0x6032 <__vector_3+0x4c>
    6028:	47 c0       	rjmp	.+142    	; 0x60b8 <__vector_3+0xd2>
    602a:	9c 91       	ld	r25, X
    602c:	89 23       	and	r24, r25
    602e:	09 f0       	breq	.+2      	; 0x6032 <__vector_3+0x4c>
    6030:	43 c0       	rjmp	.+134    	; 0x60b8 <__vector_3+0xd2>
    6032:	a3 89       	ldd	r26, Z+19	; 0x13
    6034:	b4 89       	ldd	r27, Z+20	; 0x14
    6036:	9c 91       	ld	r25, X
    6038:	85 89       	ldd	r24, Z+21	; 0x15
    603a:	80 95       	com	r24
    603c:	89 23       	and	r24, r25
    603e:	8c 93       	st	X, r24
    6040:	86 89       	ldd	r24, Z+22	; 0x16
    6042:	97 89       	ldd	r25, Z+23	; 0x17
    6044:	01 97       	sbiw	r24, 0x01	; 1
    6046:	f1 f7       	brne	.-4      	; 0x6044 <__vector_3+0x5e>
    6048:	60 8d       	ldd	r22, Z+24	; 0x18
    604a:	71 8d       	ldd	r23, Z+25	; 0x19
    604c:	a6 85       	ldd	r26, Z+14	; 0x0e
    604e:	b7 85       	ldd	r27, Z+15	; 0x0f
    6050:	55 85       	ldd	r21, Z+13	; 0x0d
    6052:	38 e0       	ldi	r19, 0x08	; 8
    6054:	20 e0       	ldi	r18, 0x00	; 0
    6056:	cb 01       	movw	r24, r22
    6058:	01 97       	sbiw	r24, 0x01	; 1
    605a:	f1 f7       	brne	.-4      	; 0x6058 <__vector_3+0x72>
    605c:	82 2f       	mov	r24, r18
    605e:	90 e0       	ldi	r25, 0x00	; 0
    6060:	95 95       	asr	r25
    6062:	87 95       	ror	r24
    6064:	28 2f       	mov	r18, r24
    6066:	4c 91       	ld	r20, X
    6068:	45 23       	and	r20, r21
    606a:	09 f0       	breq	.+2      	; 0x606e <__vector_3+0x88>
    606c:	20 68       	ori	r18, 0x80	; 128
    606e:	31 50       	subi	r19, 0x01	; 1
    6070:	91 f7       	brne	.-28     	; 0x6056 <__vector_3+0x70>
    6072:	86 8d       	ldd	r24, Z+30	; 0x1e
    6074:	81 fd       	sbrc	r24, 1
    6076:	20 95       	com	r18
    6078:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	01 96       	adiw	r24, 0x01	; 1
    6080:	8f 73       	andi	r24, 0x3F	; 63
    6082:	99 27       	eor	r25, r25
    6084:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <_ZN14SoftwareSerial20_receive_buffer_headE>
    6088:	38 17       	cp	r19, r24
    608a:	49 f0       	breq	.+18     	; 0x609e <__vector_3+0xb8>
    608c:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6090:	b0 e0       	ldi	r27, 0x00	; 0
    6092:	af 52       	subi	r26, 0x2F	; 47
    6094:	b9 4f       	sbci	r27, 0xF9	; 249
    6096:	2c 93       	st	X, r18
    6098:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    609c:	03 c0       	rjmp	.+6      	; 0x60a4 <__vector_3+0xbe>
    609e:	86 8d       	ldd	r24, Z+30	; 0x1e
    60a0:	81 60       	ori	r24, 0x01	; 1
    60a2:	86 8f       	std	Z+30, r24	; 0x1e
    60a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    60a6:	93 8d       	ldd	r25, Z+27	; 0x1b
    60a8:	01 97       	sbiw	r24, 0x01	; 1
    60aa:	f1 f7       	brne	.-4      	; 0x60a8 <__vector_3+0xc2>
    60ac:	a3 89       	ldd	r26, Z+19	; 0x13
    60ae:	b4 89       	ldd	r27, Z+20	; 0x14
    60b0:	9c 91       	ld	r25, X
    60b2:	85 89       	ldd	r24, Z+21	; 0x15
    60b4:	89 2b       	or	r24, r25
    60b6:	8c 93       	st	X, r24
    60b8:	ff 91       	pop	r31
    60ba:	ef 91       	pop	r30
    60bc:	bf 91       	pop	r27
    60be:	af 91       	pop	r26
    60c0:	9f 91       	pop	r25
    60c2:	8f 91       	pop	r24
    60c4:	7f 91       	pop	r23
    60c6:	6f 91       	pop	r22
    60c8:	5f 91       	pop	r21
    60ca:	4f 91       	pop	r20
    60cc:	3f 91       	pop	r19
    60ce:	2f 91       	pop	r18
    60d0:	0f 90       	pop	r0
    60d2:	0f be       	out	0x3f, r0	; 63
    60d4:	0f 90       	pop	r0
    60d6:	1f 90       	pop	r1
    60d8:	18 95       	reti

000060da <_ZN14SoftwareSerialD1Ev>:
    60da:	20 e0       	ldi	r18, 0x00	; 0
    60dc:	34 e0       	ldi	r19, 0x04	; 4
    60de:	fc 01       	movw	r30, r24
    60e0:	31 83       	std	Z+1, r19	; 0x01
    60e2:	20 83       	st	Z, r18
    60e4:	0c 94 b4 2f 	jmp	0x5f68	; 0x5f68 <_ZN14SoftwareSerial13stopListeningEv>

000060e8 <_ZN14SoftwareSerial5setTXEh>:
    60e8:	1f 93       	push	r17
    60ea:	cf 93       	push	r28
    60ec:	df 93       	push	r29
    60ee:	ec 01       	movw	r28, r24
    60f0:	16 2f       	mov	r17, r22
    60f2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    60f4:	66 95       	lsr	r22
    60f6:	61 70       	andi	r22, 0x01	; 1
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	68 27       	eor	r22, r24
    60fc:	81 2f       	mov	r24, r17
    60fe:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
    6102:	61 e0       	ldi	r22, 0x01	; 1
    6104:	81 2f       	mov	r24, r17
    6106:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    610a:	81 2f       	mov	r24, r17
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	fc 01       	movw	r30, r24
    6110:	e8 5a       	subi	r30, 0xA8	; 168
    6112:	fc 4f       	sbci	r31, 0xFC	; 252
    6114:	e4 91       	lpm	r30, Z
    6116:	e8 8b       	std	Y+16, r30	; 0x10
    6118:	fc 01       	movw	r30, r24
    611a:	e4 59       	subi	r30, 0x94	; 148
    611c:	fc 4f       	sbci	r31, 0xFC	; 252
    611e:	e4 91       	lpm	r30, Z
    6120:	f0 e0       	ldi	r31, 0x00	; 0
    6122:	ee 0f       	add	r30, r30
    6124:	ff 1f       	adc	r31, r31
    6126:	e6 57       	subi	r30, 0x76	; 118
    6128:	fc 4f       	sbci	r31, 0xFC	; 252
    612a:	85 91       	lpm	r24, Z+
    612c:	94 91       	lpm	r25, Z
    612e:	9a 8b       	std	Y+18, r25	; 0x12
    6130:	89 8b       	std	Y+17, r24	; 0x11
    6132:	df 91       	pop	r29
    6134:	cf 91       	pop	r28
    6136:	1f 91       	pop	r17
    6138:	08 95       	ret

0000613a <_ZN14SoftwareSerial5setRXEh>:
    613a:	1f 93       	push	r17
    613c:	cf 93       	push	r28
    613e:	df 93       	push	r29
    6140:	ec 01       	movw	r28, r24
    6142:	16 2f       	mov	r17, r22
    6144:	60 e0       	ldi	r22, 0x00	; 0
    6146:	81 2f       	mov	r24, r17
    6148:	0e 94 54 24 	call	0x48a8	; 0x48a8 <pinMode>
    614c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    614e:	81 fd       	sbrc	r24, 1
    6150:	04 c0       	rjmp	.+8      	; 0x615a <_ZN14SoftwareSerial5setRXEh+0x20>
    6152:	61 e0       	ldi	r22, 0x01	; 1
    6154:	81 2f       	mov	r24, r17
    6156:	0e 94 90 24 	call	0x4920	; 0x4920 <digitalWrite>
    615a:	1c 87       	std	Y+12, r17	; 0x0c
    615c:	81 2f       	mov	r24, r17
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	fc 01       	movw	r30, r24
    6162:	e8 5a       	subi	r30, 0xA8	; 168
    6164:	fc 4f       	sbci	r31, 0xFC	; 252
    6166:	e4 91       	lpm	r30, Z
    6168:	ed 87       	std	Y+13, r30	; 0x0d
    616a:	fc 01       	movw	r30, r24
    616c:	e4 59       	subi	r30, 0x94	; 148
    616e:	fc 4f       	sbci	r31, 0xFC	; 252
    6170:	e4 91       	lpm	r30, Z
    6172:	f0 e0       	ldi	r31, 0x00	; 0
    6174:	ee 0f       	add	r30, r30
    6176:	ff 1f       	adc	r31, r31
    6178:	e0 58       	subi	r30, 0x80	; 128
    617a:	fc 4f       	sbci	r31, 0xFC	; 252
    617c:	85 91       	lpm	r24, Z+
    617e:	94 91       	lpm	r25, Z
    6180:	9f 87       	std	Y+15, r25	; 0x0f
    6182:	8e 87       	std	Y+14, r24	; 0x0e
    6184:	df 91       	pop	r29
    6186:	cf 91       	pop	r28
    6188:	1f 91       	pop	r17
    618a:	08 95       	ret

0000618c <_ZN14SoftwareSerialC1Ehhb>:
    618c:	1f 93       	push	r17
    618e:	cf 93       	push	r28
    6190:	df 93       	push	r29
    6192:	ec 01       	movw	r28, r24
    6194:	16 2f       	mov	r17, r22
    6196:	1b 82       	std	Y+3, r1	; 0x03
    6198:	1a 82       	std	Y+2, r1	; 0x02
    619a:	88 ee       	ldi	r24, 0xE8	; 232
    619c:	93 e0       	ldi	r25, 0x03	; 3
    619e:	a0 e0       	ldi	r26, 0x00	; 0
    61a0:	b0 e0       	ldi	r27, 0x00	; 0
    61a2:	8c 83       	std	Y+4, r24	; 0x04
    61a4:	9d 83       	std	Y+5, r25	; 0x05
    61a6:	ae 83       	std	Y+6, r26	; 0x06
    61a8:	bf 83       	std	Y+7, r27	; 0x07
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	94 e0       	ldi	r25, 0x04	; 4
    61ae:	99 83       	std	Y+1, r25	; 0x01
    61b0:	88 83       	st	Y, r24
    61b2:	1f 8a       	std	Y+23, r1	; 0x17
    61b4:	1e 8a       	std	Y+22, r1	; 0x16
    61b6:	19 8e       	std	Y+25, r1	; 0x19
    61b8:	18 8e       	std	Y+24, r1	; 0x18
    61ba:	1b 8e       	std	Y+27, r1	; 0x1b
    61bc:	1a 8e       	std	Y+26, r1	; 0x1a
    61be:	1d 8e       	std	Y+29, r1	; 0x1d
    61c0:	1c 8e       	std	Y+28, r1	; 0x1c
    61c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    61c4:	8e 7f       	andi	r24, 0xFE	; 254
    61c6:	20 fb       	bst	r18, 0
    61c8:	81 f9       	bld	r24, 1
    61ca:	8e 8f       	std	Y+30, r24	; 0x1e
    61cc:	64 2f       	mov	r22, r20
    61ce:	ce 01       	movw	r24, r28
    61d0:	0e 94 74 30 	call	0x60e8	; 0x60e8 <_ZN14SoftwareSerial5setTXEh>
    61d4:	61 2f       	mov	r22, r17
    61d6:	ce 01       	movw	r24, r28
    61d8:	df 91       	pop	r29
    61da:	cf 91       	pop	r28
    61dc:	1f 91       	pop	r17
    61de:	0c 94 9d 30 	jmp	0x613a	; 0x613a <_ZN14SoftwareSerial5setRXEh>

000061e2 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    61e2:	cf 93       	push	r28
    61e4:	df 93       	push	r29
    61e6:	ec 01       	movw	r28, r24
    61e8:	9a 01       	movw	r18, r20
    61ea:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    61ec:	1b 8e       	std	Y+27, r1	; 0x1b
    61ee:	1a 8e       	std	Y+26, r1	; 0x1a
    61f0:	19 8e       	std	Y+25, r1	; 0x19
    61f2:	18 8e       	std	Y+24, r1	; 0x18
    61f4:	1f 8a       	std	Y+23, r1	; 0x17
    61f6:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    61f8:	60 e0       	ldi	r22, 0x00	; 0
    61fa:	79 e0       	ldi	r23, 0x09	; 9
    61fc:	8d e3       	ldi	r24, 0x3D	; 61
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	0e 94 1f 32 	call	0x643e	; 0x643e <__divmodsi4>
    6204:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    6206:	24 30       	cpi	r18, 0x04	; 4
    6208:	31 05       	cpc	r19, r1
    620a:	18 f0       	brcs	.+6      	; 0x6212 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    620c:	c9 01       	movw	r24, r18
    620e:	03 97       	sbiw	r24, 0x03	; 3
    6210:	02 c0       	rjmp	.+4      	; 0x6216 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    6216:	9d 8f       	std	Y+29, r25	; 0x1d
    6218:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    621a:	6c 85       	ldd	r22, Y+12	; 0x0c
    621c:	66 31       	cpi	r22, 0x16	; 22
    621e:	08 f0       	brcs	.+2      	; 0x6222 <_ZN14SoftwareSerial5beginEl+0x40>
    6220:	69 c0       	rjmp	.+210    	; 0x62f4 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    6222:	c9 01       	movw	r24, r18
    6224:	96 95       	lsr	r25
    6226:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    6228:	84 31       	cpi	r24, 0x14	; 20
    622a:	91 05       	cpc	r25, r1
    622c:	10 f0       	brcs	.+4      	; 0x6232 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    622e:	43 97       	sbiw	r24, 0x13	; 19
    6230:	02 c0       	rjmp	.+4      	; 0x6236 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    6232:	81 e0       	ldi	r24, 0x01	; 1
    6234:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    6236:	9f 8b       	std	Y+23, r25	; 0x17
    6238:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    623a:	36 97       	sbiw	r30, 0x06	; 6
    623c:	18 f0       	brcs	.+6      	; 0x6244 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    623e:	c9 01       	movw	r24, r18
    6240:	05 97       	sbiw	r24, 0x05	; 5
    6242:	02 c0       	rjmp	.+4      	; 0x6248 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    6248:	99 8f       	std	Y+25, r25	; 0x19
    624a:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    624c:	c9 01       	movw	r24, r18
    624e:	88 0f       	add	r24, r24
    6250:	99 1f       	adc	r25, r25
    6252:	28 0f       	add	r18, r24
    6254:	39 1f       	adc	r19, r25
    6256:	36 95       	lsr	r19
    6258:	27 95       	ror	r18
    625a:	36 95       	lsr	r19
    625c:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    625e:	2d 30       	cpi	r18, 0x0D	; 13
    6260:	31 05       	cpc	r19, r1
    6262:	18 f0       	brcs	.+6      	; 0x626a <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    6264:	2c 50       	subi	r18, 0x0C	; 12
    6266:	31 09       	sbc	r19, r1
    6268:	02 c0       	rjmp	.+4      	; 0x626e <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    626a:	21 e0       	ldi	r18, 0x01	; 1
    626c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    626e:	3b 8f       	std	Y+27, r19	; 0x1b
    6270:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    6272:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    6276:	68 30       	cpi	r22, 0x08	; 8
    6278:	50 f0       	brcs	.+20     	; 0x628e <_ZN14SoftwareSerial5beginEl+0xac>
    627a:	21 e0       	ldi	r18, 0x01	; 1
    627c:	6e 30       	cpi	r22, 0x0E	; 14
    627e:	08 f4       	brcc	.+2      	; 0x6282 <_ZN14SoftwareSerial5beginEl+0xa0>
    6280:	20 e0       	ldi	r18, 0x00	; 0
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	01 c0       	rjmp	.+2      	; 0x6288 <_ZN14SoftwareSerial5beginEl+0xa6>
    6286:	88 0f       	add	r24, r24
    6288:	2a 95       	dec	r18
    628a:	ea f7       	brpl	.-6      	; 0x6286 <_ZN14SoftwareSerial5beginEl+0xa4>
    628c:	01 c0       	rjmp	.+2      	; 0x6290 <_ZN14SoftwareSerial5beginEl+0xae>
    628e:	84 e0       	ldi	r24, 0x04	; 4
    6290:	89 2b       	or	r24, r25
    6292:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    6296:	9c 85       	ldd	r25, Y+12	; 0x0c
    6298:	98 30       	cpi	r25, 0x08	; 8
    629a:	38 f0       	brcs	.+14     	; 0x62aa <_ZN14SoftwareSerial5beginEl+0xc8>
    629c:	9e 30       	cpi	r25, 0x0E	; 14
    629e:	40 f0       	brcs	.+16     	; 0x62b0 <_ZN14SoftwareSerial5beginEl+0xce>
    62a0:	96 31       	cpi	r25, 0x16	; 22
    62a2:	48 f0       	brcs	.+18     	; 0x62b6 <_ZN14SoftwareSerial5beginEl+0xd4>
    62a4:	20 e0       	ldi	r18, 0x00	; 0
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	08 c0       	rjmp	.+16     	; 0x62ba <_ZN14SoftwareSerial5beginEl+0xd8>
    62aa:	2d e6       	ldi	r18, 0x6D	; 109
    62ac:	30 e0       	ldi	r19, 0x00	; 0
    62ae:	05 c0       	rjmp	.+10     	; 0x62ba <_ZN14SoftwareSerial5beginEl+0xd8>
    62b0:	2b e6       	ldi	r18, 0x6B	; 107
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	02 c0       	rjmp	.+4      	; 0x62ba <_ZN14SoftwareSerial5beginEl+0xd8>
    62b6:	2c e6       	ldi	r18, 0x6C	; 108
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	3c 8b       	std	Y+20, r19	; 0x14
    62bc:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    62be:	98 30       	cpi	r25, 0x08	; 8
    62c0:	30 f4       	brcc	.+12     	; 0x62ce <_ZN14SoftwareSerial5beginEl+0xec>
    62c2:	81 e0       	ldi	r24, 0x01	; 1
    62c4:	01 c0       	rjmp	.+2      	; 0x62c8 <_ZN14SoftwareSerial5beginEl+0xe6>
    62c6:	88 0f       	add	r24, r24
    62c8:	9a 95       	dec	r25
    62ca:	ea f7       	brpl	.-6      	; 0x62c6 <_ZN14SoftwareSerial5beginEl+0xe4>
    62cc:	0e c0       	rjmp	.+28     	; 0x62ea <_ZN14SoftwareSerial5beginEl+0x108>
    62ce:	29 2f       	mov	r18, r25
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	9e 30       	cpi	r25, 0x0E	; 14
    62d4:	18 f4       	brcc	.+6      	; 0x62dc <_ZN14SoftwareSerial5beginEl+0xfa>
    62d6:	28 50       	subi	r18, 0x08	; 8
    62d8:	31 09       	sbc	r19, r1
    62da:	02 c0       	rjmp	.+4      	; 0x62e0 <_ZN14SoftwareSerial5beginEl+0xfe>
    62dc:	2e 50       	subi	r18, 0x0E	; 14
    62de:	31 09       	sbc	r19, r1
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	01 c0       	rjmp	.+2      	; 0x62e6 <_ZN14SoftwareSerial5beginEl+0x104>
    62e4:	88 0f       	add	r24, r24
    62e6:	2a 95       	dec	r18
    62e8:	ea f7       	brpl	.-6      	; 0x62e4 <_ZN14SoftwareSerial5beginEl+0x102>
    62ea:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    62ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    62ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    62f0:	01 97       	sbiw	r24, 0x01	; 1
    62f2:	f1 f7       	brne	.-4      	; 0x62f0 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    62f4:	ce 01       	movw	r24, r28
}
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    62fa:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <_ZN14SoftwareSerial6listenEv>

000062fe <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    62fe:	08 95       	ret

00006300 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    6300:	08 95       	ret

00006302 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    6302:	1f 92       	push	r1
    6304:	0f 92       	push	r0
    6306:	0f b6       	in	r0, 0x3f	; 63
    6308:	0f 92       	push	r0
    630a:	11 24       	eor	r1, r1
    630c:	2f 93       	push	r18
    630e:	3f 93       	push	r19
    6310:	4f 93       	push	r20
    6312:	5f 93       	push	r21
    6314:	6f 93       	push	r22
    6316:	7f 93       	push	r23
    6318:	8f 93       	push	r24
    631a:	9f 93       	push	r25
    631c:	af 93       	push	r26
    631e:	bf 93       	push	r27
    6320:	ef 93       	push	r30
    6322:	ff 93       	push	r31
    6324:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <intFunc>
    6328:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <intFunc+0x1>
    632c:	09 95       	icall
    632e:	ff 91       	pop	r31
    6330:	ef 91       	pop	r30
    6332:	bf 91       	pop	r27
    6334:	af 91       	pop	r26
    6336:	9f 91       	pop	r25
    6338:	8f 91       	pop	r24
    633a:	7f 91       	pop	r23
    633c:	6f 91       	pop	r22
    633e:	5f 91       	pop	r21
    6340:	4f 91       	pop	r20
    6342:	3f 91       	pop	r19
    6344:	2f 91       	pop	r18
    6346:	0f 90       	pop	r0
    6348:	0f be       	out	0x3f, r0	; 63
    634a:	0f 90       	pop	r0
    634c:	1f 90       	pop	r1
    634e:	18 95       	reti

00006350 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    6350:	1f 92       	push	r1
    6352:	0f 92       	push	r0
    6354:	0f b6       	in	r0, 0x3f	; 63
    6356:	0f 92       	push	r0
    6358:	11 24       	eor	r1, r1
    635a:	2f 93       	push	r18
    635c:	3f 93       	push	r19
    635e:	4f 93       	push	r20
    6360:	5f 93       	push	r21
    6362:	6f 93       	push	r22
    6364:	7f 93       	push	r23
    6366:	8f 93       	push	r24
    6368:	9f 93       	push	r25
    636a:	af 93       	push	r26
    636c:	bf 93       	push	r27
    636e:	ef 93       	push	r30
    6370:	ff 93       	push	r31
    6372:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <intFunc+0x2>
    6376:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <intFunc+0x3>
    637a:	09 95       	icall
    637c:	ff 91       	pop	r31
    637e:	ef 91       	pop	r30
    6380:	bf 91       	pop	r27
    6382:	af 91       	pop	r26
    6384:	9f 91       	pop	r25
    6386:	8f 91       	pop	r24
    6388:	7f 91       	pop	r23
    638a:	6f 91       	pop	r22
    638c:	5f 91       	pop	r21
    638e:	4f 91       	pop	r20
    6390:	3f 91       	pop	r19
    6392:	2f 91       	pop	r18
    6394:	0f 90       	pop	r0
    6396:	0f be       	out	0x3f, r0	; 63
    6398:	0f 90       	pop	r0
    639a:	1f 90       	pop	r1
    639c:	18 95       	reti

0000639e <__cmpsf2>:
    639e:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__fp_cmp>
    63a2:	08 f4       	brcc	.+2      	; 0x63a6 <__cmpsf2+0x8>
    63a4:	81 e0       	ldi	r24, 0x01	; 1
    63a6:	08 95       	ret

000063a8 <__unordsf2>:
    63a8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__fp_cmp>
    63ac:	88 0b       	sbc	r24, r24
    63ae:	99 0b       	sbc	r25, r25
    63b0:	08 95       	ret

000063b2 <__mulsi3>:
    63b2:	db 01       	movw	r26, r22
    63b4:	8f 93       	push	r24
    63b6:	9f 93       	push	r25
    63b8:	0e 94 44 32 	call	0x6488	; 0x6488 <__muluhisi3>
    63bc:	bf 91       	pop	r27
    63be:	af 91       	pop	r26
    63c0:	a2 9f       	mul	r26, r18
    63c2:	80 0d       	add	r24, r0
    63c4:	91 1d       	adc	r25, r1
    63c6:	a3 9f       	mul	r26, r19
    63c8:	90 0d       	add	r25, r0
    63ca:	b2 9f       	mul	r27, r18
    63cc:	90 0d       	add	r25, r0
    63ce:	11 24       	eor	r1, r1
    63d0:	08 95       	ret

000063d2 <__divmodhi4>:
    63d2:	97 fb       	bst	r25, 7
    63d4:	07 2e       	mov	r0, r23
    63d6:	16 f4       	brtc	.+4      	; 0x63dc <__divmodhi4+0xa>
    63d8:	00 94       	com	r0
    63da:	07 d0       	rcall	.+14     	; 0x63ea <__divmodhi4_neg1>
    63dc:	77 fd       	sbrc	r23, 7
    63de:	09 d0       	rcall	.+18     	; 0x63f2 <__divmodhi4_neg2>
    63e0:	0e 94 4f 32 	call	0x649e	; 0x649e <__udivmodhi4>
    63e4:	07 fc       	sbrc	r0, 7
    63e6:	05 d0       	rcall	.+10     	; 0x63f2 <__divmodhi4_neg2>
    63e8:	3e f4       	brtc	.+14     	; 0x63f8 <__divmodhi4_exit>

000063ea <__divmodhi4_neg1>:
    63ea:	90 95       	com	r25
    63ec:	81 95       	neg	r24
    63ee:	9f 4f       	sbci	r25, 0xFF	; 255
    63f0:	08 95       	ret

000063f2 <__divmodhi4_neg2>:
    63f2:	70 95       	com	r23
    63f4:	61 95       	neg	r22
    63f6:	7f 4f       	sbci	r23, 0xFF	; 255

000063f8 <__divmodhi4_exit>:
    63f8:	08 95       	ret

000063fa <__udivmodsi4>:
    63fa:	a1 e2       	ldi	r26, 0x21	; 33
    63fc:	1a 2e       	mov	r1, r26
    63fe:	aa 1b       	sub	r26, r26
    6400:	bb 1b       	sub	r27, r27
    6402:	fd 01       	movw	r30, r26
    6404:	0d c0       	rjmp	.+26     	; 0x6420 <__udivmodsi4_ep>

00006406 <__udivmodsi4_loop>:
    6406:	aa 1f       	adc	r26, r26
    6408:	bb 1f       	adc	r27, r27
    640a:	ee 1f       	adc	r30, r30
    640c:	ff 1f       	adc	r31, r31
    640e:	a2 17       	cp	r26, r18
    6410:	b3 07       	cpc	r27, r19
    6412:	e4 07       	cpc	r30, r20
    6414:	f5 07       	cpc	r31, r21
    6416:	20 f0       	brcs	.+8      	; 0x6420 <__udivmodsi4_ep>
    6418:	a2 1b       	sub	r26, r18
    641a:	b3 0b       	sbc	r27, r19
    641c:	e4 0b       	sbc	r30, r20
    641e:	f5 0b       	sbc	r31, r21

00006420 <__udivmodsi4_ep>:
    6420:	66 1f       	adc	r22, r22
    6422:	77 1f       	adc	r23, r23
    6424:	88 1f       	adc	r24, r24
    6426:	99 1f       	adc	r25, r25
    6428:	1a 94       	dec	r1
    642a:	69 f7       	brne	.-38     	; 0x6406 <__udivmodsi4_loop>
    642c:	60 95       	com	r22
    642e:	70 95       	com	r23
    6430:	80 95       	com	r24
    6432:	90 95       	com	r25
    6434:	9b 01       	movw	r18, r22
    6436:	ac 01       	movw	r20, r24
    6438:	bd 01       	movw	r22, r26
    643a:	cf 01       	movw	r24, r30
    643c:	08 95       	ret

0000643e <__divmodsi4>:
    643e:	05 2e       	mov	r0, r21
    6440:	97 fb       	bst	r25, 7
    6442:	1e f4       	brtc	.+6      	; 0x644a <__divmodsi4+0xc>
    6444:	00 94       	com	r0
    6446:	0e 94 36 32 	call	0x646c	; 0x646c <__negsi2>
    644a:	57 fd       	sbrc	r21, 7
    644c:	07 d0       	rcall	.+14     	; 0x645c <__divmodsi4_neg2>
    644e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    6452:	07 fc       	sbrc	r0, 7
    6454:	03 d0       	rcall	.+6      	; 0x645c <__divmodsi4_neg2>
    6456:	4e f4       	brtc	.+18     	; 0x646a <__divmodsi4_exit>
    6458:	0c 94 36 32 	jmp	0x646c	; 0x646c <__negsi2>

0000645c <__divmodsi4_neg2>:
    645c:	50 95       	com	r21
    645e:	40 95       	com	r20
    6460:	30 95       	com	r19
    6462:	21 95       	neg	r18
    6464:	3f 4f       	sbci	r19, 0xFF	; 255
    6466:	4f 4f       	sbci	r20, 0xFF	; 255
    6468:	5f 4f       	sbci	r21, 0xFF	; 255

0000646a <__divmodsi4_exit>:
    646a:	08 95       	ret

0000646c <__negsi2>:
    646c:	90 95       	com	r25
    646e:	80 95       	com	r24
    6470:	70 95       	com	r23
    6472:	61 95       	neg	r22
    6474:	7f 4f       	sbci	r23, 0xFF	; 255
    6476:	8f 4f       	sbci	r24, 0xFF	; 255
    6478:	9f 4f       	sbci	r25, 0xFF	; 255
    647a:	08 95       	ret

0000647c <__tablejump2__>:
    647c:	ee 0f       	add	r30, r30
    647e:	ff 1f       	adc	r31, r31
    6480:	05 90       	lpm	r0, Z+
    6482:	f4 91       	lpm	r31, Z
    6484:	e0 2d       	mov	r30, r0
    6486:	09 94       	ijmp

00006488 <__muluhisi3>:
    6488:	0e 94 63 32 	call	0x64c6	; 0x64c6 <__umulhisi3>
    648c:	a5 9f       	mul	r26, r21
    648e:	90 0d       	add	r25, r0
    6490:	b4 9f       	mul	r27, r20
    6492:	90 0d       	add	r25, r0
    6494:	a4 9f       	mul	r26, r20
    6496:	80 0d       	add	r24, r0
    6498:	91 1d       	adc	r25, r1
    649a:	11 24       	eor	r1, r1
    649c:	08 95       	ret

0000649e <__udivmodhi4>:
    649e:	aa 1b       	sub	r26, r26
    64a0:	bb 1b       	sub	r27, r27
    64a2:	51 e1       	ldi	r21, 0x11	; 17
    64a4:	07 c0       	rjmp	.+14     	; 0x64b4 <__udivmodhi4_ep>

000064a6 <__udivmodhi4_loop>:
    64a6:	aa 1f       	adc	r26, r26
    64a8:	bb 1f       	adc	r27, r27
    64aa:	a6 17       	cp	r26, r22
    64ac:	b7 07       	cpc	r27, r23
    64ae:	10 f0       	brcs	.+4      	; 0x64b4 <__udivmodhi4_ep>
    64b0:	a6 1b       	sub	r26, r22
    64b2:	b7 0b       	sbc	r27, r23

000064b4 <__udivmodhi4_ep>:
    64b4:	88 1f       	adc	r24, r24
    64b6:	99 1f       	adc	r25, r25
    64b8:	5a 95       	dec	r21
    64ba:	a9 f7       	brne	.-22     	; 0x64a6 <__udivmodhi4_loop>
    64bc:	80 95       	com	r24
    64be:	90 95       	com	r25
    64c0:	bc 01       	movw	r22, r24
    64c2:	cd 01       	movw	r24, r26
    64c4:	08 95       	ret

000064c6 <__umulhisi3>:
    64c6:	a2 9f       	mul	r26, r18
    64c8:	b0 01       	movw	r22, r0
    64ca:	b3 9f       	mul	r27, r19
    64cc:	c0 01       	movw	r24, r0
    64ce:	a3 9f       	mul	r26, r19
    64d0:	70 0d       	add	r23, r0
    64d2:	81 1d       	adc	r24, r1
    64d4:	11 24       	eor	r1, r1
    64d6:	91 1d       	adc	r25, r1
    64d8:	b2 9f       	mul	r27, r18
    64da:	70 0d       	add	r23, r0
    64dc:	81 1d       	adc	r24, r1
    64de:	11 24       	eor	r1, r1
    64e0:	91 1d       	adc	r25, r1
    64e2:	08 95       	ret

000064e4 <malloc>:
    64e4:	0f 93       	push	r16
    64e6:	1f 93       	push	r17
    64e8:	cf 93       	push	r28
    64ea:	df 93       	push	r29
    64ec:	82 30       	cpi	r24, 0x02	; 2
    64ee:	91 05       	cpc	r25, r1
    64f0:	10 f4       	brcc	.+4      	; 0x64f6 <malloc+0x12>
    64f2:	82 e0       	ldi	r24, 0x02	; 2
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <__flp>
    64fa:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <__flp+0x1>
    64fe:	20 e0       	ldi	r18, 0x00	; 0
    6500:	30 e0       	ldi	r19, 0x00	; 0
    6502:	a0 e0       	ldi	r26, 0x00	; 0
    6504:	b0 e0       	ldi	r27, 0x00	; 0
    6506:	30 97       	sbiw	r30, 0x00	; 0
    6508:	19 f1       	breq	.+70     	; 0x6550 <malloc+0x6c>
    650a:	40 81       	ld	r20, Z
    650c:	51 81       	ldd	r21, Z+1	; 0x01
    650e:	02 81       	ldd	r16, Z+2	; 0x02
    6510:	13 81       	ldd	r17, Z+3	; 0x03
    6512:	48 17       	cp	r20, r24
    6514:	59 07       	cpc	r21, r25
    6516:	c8 f0       	brcs	.+50     	; 0x654a <malloc+0x66>
    6518:	84 17       	cp	r24, r20
    651a:	95 07       	cpc	r25, r21
    651c:	69 f4       	brne	.+26     	; 0x6538 <malloc+0x54>
    651e:	10 97       	sbiw	r26, 0x00	; 0
    6520:	31 f0       	breq	.+12     	; 0x652e <malloc+0x4a>
    6522:	12 96       	adiw	r26, 0x02	; 2
    6524:	0c 93       	st	X, r16
    6526:	12 97       	sbiw	r26, 0x02	; 2
    6528:	13 96       	adiw	r26, 0x03	; 3
    652a:	1c 93       	st	X, r17
    652c:	27 c0       	rjmp	.+78     	; 0x657c <malloc+0x98>
    652e:	00 93 15 07 	sts	0x0715, r16	; 0x800715 <__flp>
    6532:	10 93 16 07 	sts	0x0716, r17	; 0x800716 <__flp+0x1>
    6536:	22 c0       	rjmp	.+68     	; 0x657c <malloc+0x98>
    6538:	21 15       	cp	r18, r1
    653a:	31 05       	cpc	r19, r1
    653c:	19 f0       	breq	.+6      	; 0x6544 <malloc+0x60>
    653e:	42 17       	cp	r20, r18
    6540:	53 07       	cpc	r21, r19
    6542:	18 f4       	brcc	.+6      	; 0x654a <malloc+0x66>
    6544:	9a 01       	movw	r18, r20
    6546:	bd 01       	movw	r22, r26
    6548:	ef 01       	movw	r28, r30
    654a:	df 01       	movw	r26, r30
    654c:	f8 01       	movw	r30, r16
    654e:	db cf       	rjmp	.-74     	; 0x6506 <malloc+0x22>
    6550:	21 15       	cp	r18, r1
    6552:	31 05       	cpc	r19, r1
    6554:	f9 f0       	breq	.+62     	; 0x6594 <malloc+0xb0>
    6556:	28 1b       	sub	r18, r24
    6558:	39 0b       	sbc	r19, r25
    655a:	24 30       	cpi	r18, 0x04	; 4
    655c:	31 05       	cpc	r19, r1
    655e:	80 f4       	brcc	.+32     	; 0x6580 <malloc+0x9c>
    6560:	8a 81       	ldd	r24, Y+2	; 0x02
    6562:	9b 81       	ldd	r25, Y+3	; 0x03
    6564:	61 15       	cp	r22, r1
    6566:	71 05       	cpc	r23, r1
    6568:	21 f0       	breq	.+8      	; 0x6572 <malloc+0x8e>
    656a:	fb 01       	movw	r30, r22
    656c:	93 83       	std	Z+3, r25	; 0x03
    656e:	82 83       	std	Z+2, r24	; 0x02
    6570:	04 c0       	rjmp	.+8      	; 0x657a <malloc+0x96>
    6572:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <__flp+0x1>
    6576:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <__flp>
    657a:	fe 01       	movw	r30, r28
    657c:	32 96       	adiw	r30, 0x02	; 2
    657e:	44 c0       	rjmp	.+136    	; 0x6608 <malloc+0x124>
    6580:	fe 01       	movw	r30, r28
    6582:	e2 0f       	add	r30, r18
    6584:	f3 1f       	adc	r31, r19
    6586:	81 93       	st	Z+, r24
    6588:	91 93       	st	Z+, r25
    658a:	22 50       	subi	r18, 0x02	; 2
    658c:	31 09       	sbc	r19, r1
    658e:	39 83       	std	Y+1, r19	; 0x01
    6590:	28 83       	st	Y, r18
    6592:	3a c0       	rjmp	.+116    	; 0x6608 <malloc+0x124>
    6594:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <__brkval>
    6598:	30 91 14 07 	lds	r19, 0x0714	; 0x800714 <__brkval+0x1>
    659c:	23 2b       	or	r18, r19
    659e:	41 f4       	brne	.+16     	; 0x65b0 <malloc+0xcc>
    65a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    65a4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    65a8:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <__brkval+0x1>
    65ac:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <__brkval>
    65b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    65b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    65b8:	21 15       	cp	r18, r1
    65ba:	31 05       	cpc	r19, r1
    65bc:	41 f4       	brne	.+16     	; 0x65ce <malloc+0xea>
    65be:	2d b7       	in	r18, 0x3d	; 61
    65c0:	3e b7       	in	r19, 0x3e	; 62
    65c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    65c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    65ca:	24 1b       	sub	r18, r20
    65cc:	35 0b       	sbc	r19, r21
    65ce:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <__brkval>
    65d2:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <__brkval+0x1>
    65d6:	e2 17       	cp	r30, r18
    65d8:	f3 07       	cpc	r31, r19
    65da:	a0 f4       	brcc	.+40     	; 0x6604 <malloc+0x120>
    65dc:	2e 1b       	sub	r18, r30
    65de:	3f 0b       	sbc	r19, r31
    65e0:	28 17       	cp	r18, r24
    65e2:	39 07       	cpc	r19, r25
    65e4:	78 f0       	brcs	.+30     	; 0x6604 <malloc+0x120>
    65e6:	ac 01       	movw	r20, r24
    65e8:	4e 5f       	subi	r20, 0xFE	; 254
    65ea:	5f 4f       	sbci	r21, 0xFF	; 255
    65ec:	24 17       	cp	r18, r20
    65ee:	35 07       	cpc	r19, r21
    65f0:	48 f0       	brcs	.+18     	; 0x6604 <malloc+0x120>
    65f2:	4e 0f       	add	r20, r30
    65f4:	5f 1f       	adc	r21, r31
    65f6:	50 93 14 07 	sts	0x0714, r21	; 0x800714 <__brkval+0x1>
    65fa:	40 93 13 07 	sts	0x0713, r20	; 0x800713 <__brkval>
    65fe:	81 93       	st	Z+, r24
    6600:	91 93       	st	Z+, r25
    6602:	02 c0       	rjmp	.+4      	; 0x6608 <malloc+0x124>
    6604:	e0 e0       	ldi	r30, 0x00	; 0
    6606:	f0 e0       	ldi	r31, 0x00	; 0
    6608:	cf 01       	movw	r24, r30
    660a:	df 91       	pop	r29
    660c:	cf 91       	pop	r28
    660e:	1f 91       	pop	r17
    6610:	0f 91       	pop	r16
    6612:	08 95       	ret

00006614 <free>:
    6614:	cf 93       	push	r28
    6616:	df 93       	push	r29
    6618:	00 97       	sbiw	r24, 0x00	; 0
    661a:	09 f4       	brne	.+2      	; 0x661e <free+0xa>
    661c:	81 c0       	rjmp	.+258    	; 0x6720 <free+0x10c>
    661e:	fc 01       	movw	r30, r24
    6620:	32 97       	sbiw	r30, 0x02	; 2
    6622:	13 82       	std	Z+3, r1	; 0x03
    6624:	12 82       	std	Z+2, r1	; 0x02
    6626:	a0 91 15 07 	lds	r26, 0x0715	; 0x800715 <__flp>
    662a:	b0 91 16 07 	lds	r27, 0x0716	; 0x800716 <__flp+0x1>
    662e:	10 97       	sbiw	r26, 0x00	; 0
    6630:	81 f4       	brne	.+32     	; 0x6652 <free+0x3e>
    6632:	20 81       	ld	r18, Z
    6634:	31 81       	ldd	r19, Z+1	; 0x01
    6636:	82 0f       	add	r24, r18
    6638:	93 1f       	adc	r25, r19
    663a:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <__brkval>
    663e:	30 91 14 07 	lds	r19, 0x0714	; 0x800714 <__brkval+0x1>
    6642:	28 17       	cp	r18, r24
    6644:	39 07       	cpc	r19, r25
    6646:	51 f5       	brne	.+84     	; 0x669c <free+0x88>
    6648:	f0 93 14 07 	sts	0x0714, r31	; 0x800714 <__brkval+0x1>
    664c:	e0 93 13 07 	sts	0x0713, r30	; 0x800713 <__brkval>
    6650:	67 c0       	rjmp	.+206    	; 0x6720 <free+0x10c>
    6652:	ed 01       	movw	r28, r26
    6654:	20 e0       	ldi	r18, 0x00	; 0
    6656:	30 e0       	ldi	r19, 0x00	; 0
    6658:	ce 17       	cp	r28, r30
    665a:	df 07       	cpc	r29, r31
    665c:	40 f4       	brcc	.+16     	; 0x666e <free+0x5a>
    665e:	4a 81       	ldd	r20, Y+2	; 0x02
    6660:	5b 81       	ldd	r21, Y+3	; 0x03
    6662:	9e 01       	movw	r18, r28
    6664:	41 15       	cp	r20, r1
    6666:	51 05       	cpc	r21, r1
    6668:	f1 f0       	breq	.+60     	; 0x66a6 <free+0x92>
    666a:	ea 01       	movw	r28, r20
    666c:	f5 cf       	rjmp	.-22     	; 0x6658 <free+0x44>
    666e:	d3 83       	std	Z+3, r29	; 0x03
    6670:	c2 83       	std	Z+2, r28	; 0x02
    6672:	40 81       	ld	r20, Z
    6674:	51 81       	ldd	r21, Z+1	; 0x01
    6676:	84 0f       	add	r24, r20
    6678:	95 1f       	adc	r25, r21
    667a:	c8 17       	cp	r28, r24
    667c:	d9 07       	cpc	r29, r25
    667e:	59 f4       	brne	.+22     	; 0x6696 <free+0x82>
    6680:	88 81       	ld	r24, Y
    6682:	99 81       	ldd	r25, Y+1	; 0x01
    6684:	84 0f       	add	r24, r20
    6686:	95 1f       	adc	r25, r21
    6688:	02 96       	adiw	r24, 0x02	; 2
    668a:	91 83       	std	Z+1, r25	; 0x01
    668c:	80 83       	st	Z, r24
    668e:	8a 81       	ldd	r24, Y+2	; 0x02
    6690:	9b 81       	ldd	r25, Y+3	; 0x03
    6692:	93 83       	std	Z+3, r25	; 0x03
    6694:	82 83       	std	Z+2, r24	; 0x02
    6696:	21 15       	cp	r18, r1
    6698:	31 05       	cpc	r19, r1
    669a:	29 f4       	brne	.+10     	; 0x66a6 <free+0x92>
    669c:	f0 93 16 07 	sts	0x0716, r31	; 0x800716 <__flp+0x1>
    66a0:	e0 93 15 07 	sts	0x0715, r30	; 0x800715 <__flp>
    66a4:	3d c0       	rjmp	.+122    	; 0x6720 <free+0x10c>
    66a6:	e9 01       	movw	r28, r18
    66a8:	fb 83       	std	Y+3, r31	; 0x03
    66aa:	ea 83       	std	Y+2, r30	; 0x02
    66ac:	49 91       	ld	r20, Y+
    66ae:	59 91       	ld	r21, Y+
    66b0:	c4 0f       	add	r28, r20
    66b2:	d5 1f       	adc	r29, r21
    66b4:	ec 17       	cp	r30, r28
    66b6:	fd 07       	cpc	r31, r29
    66b8:	61 f4       	brne	.+24     	; 0x66d2 <free+0xbe>
    66ba:	80 81       	ld	r24, Z
    66bc:	91 81       	ldd	r25, Z+1	; 0x01
    66be:	84 0f       	add	r24, r20
    66c0:	95 1f       	adc	r25, r21
    66c2:	02 96       	adiw	r24, 0x02	; 2
    66c4:	e9 01       	movw	r28, r18
    66c6:	99 83       	std	Y+1, r25	; 0x01
    66c8:	88 83       	st	Y, r24
    66ca:	82 81       	ldd	r24, Z+2	; 0x02
    66cc:	93 81       	ldd	r25, Z+3	; 0x03
    66ce:	9b 83       	std	Y+3, r25	; 0x03
    66d0:	8a 83       	std	Y+2, r24	; 0x02
    66d2:	e0 e0       	ldi	r30, 0x00	; 0
    66d4:	f0 e0       	ldi	r31, 0x00	; 0
    66d6:	12 96       	adiw	r26, 0x02	; 2
    66d8:	8d 91       	ld	r24, X+
    66da:	9c 91       	ld	r25, X
    66dc:	13 97       	sbiw	r26, 0x03	; 3
    66de:	00 97       	sbiw	r24, 0x00	; 0
    66e0:	19 f0       	breq	.+6      	; 0x66e8 <free+0xd4>
    66e2:	fd 01       	movw	r30, r26
    66e4:	dc 01       	movw	r26, r24
    66e6:	f7 cf       	rjmp	.-18     	; 0x66d6 <free+0xc2>
    66e8:	8d 91       	ld	r24, X+
    66ea:	9c 91       	ld	r25, X
    66ec:	11 97       	sbiw	r26, 0x01	; 1
    66ee:	9d 01       	movw	r18, r26
    66f0:	2e 5f       	subi	r18, 0xFE	; 254
    66f2:	3f 4f       	sbci	r19, 0xFF	; 255
    66f4:	82 0f       	add	r24, r18
    66f6:	93 1f       	adc	r25, r19
    66f8:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <__brkval>
    66fc:	30 91 14 07 	lds	r19, 0x0714	; 0x800714 <__brkval+0x1>
    6700:	28 17       	cp	r18, r24
    6702:	39 07       	cpc	r19, r25
    6704:	69 f4       	brne	.+26     	; 0x6720 <free+0x10c>
    6706:	30 97       	sbiw	r30, 0x00	; 0
    6708:	29 f4       	brne	.+10     	; 0x6714 <free+0x100>
    670a:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <__flp+0x1>
    670e:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <__flp>
    6712:	02 c0       	rjmp	.+4      	; 0x6718 <free+0x104>
    6714:	13 82       	std	Z+3, r1	; 0x03
    6716:	12 82       	std	Z+2, r1	; 0x02
    6718:	b0 93 14 07 	sts	0x0714, r27	; 0x800714 <__brkval+0x1>
    671c:	a0 93 13 07 	sts	0x0713, r26	; 0x800713 <__brkval>
    6720:	df 91       	pop	r29
    6722:	cf 91       	pop	r28
    6724:	08 95       	ret

00006726 <realloc>:
    6726:	a0 e0       	ldi	r26, 0x00	; 0
    6728:	b0 e0       	ldi	r27, 0x00	; 0
    672a:	e9 e9       	ldi	r30, 0x99	; 153
    672c:	f3 e3       	ldi	r31, 0x33	; 51
    672e:	0c 94 3c 35 	jmp	0x6a78	; 0x6a78 <__prologue_saves__+0x8>
    6732:	ec 01       	movw	r28, r24
    6734:	00 97       	sbiw	r24, 0x00	; 0
    6736:	21 f4       	brne	.+8      	; 0x6740 <realloc+0x1a>
    6738:	cb 01       	movw	r24, r22
    673a:	0e 94 72 32 	call	0x64e4	; 0x64e4 <malloc>
    673e:	b4 c0       	rjmp	.+360    	; 0x68a8 <realloc+0x182>
    6740:	fc 01       	movw	r30, r24
    6742:	e6 0f       	add	r30, r22
    6744:	f7 1f       	adc	r31, r23
    6746:	9c 01       	movw	r18, r24
    6748:	22 50       	subi	r18, 0x02	; 2
    674a:	31 09       	sbc	r19, r1
    674c:	e2 17       	cp	r30, r18
    674e:	f3 07       	cpc	r31, r19
    6750:	08 f4       	brcc	.+2      	; 0x6754 <realloc+0x2e>
    6752:	a8 c0       	rjmp	.+336    	; 0x68a4 <realloc+0x17e>
    6754:	d9 01       	movw	r26, r18
    6756:	0d 91       	ld	r16, X+
    6758:	1c 91       	ld	r17, X
    675a:	11 97       	sbiw	r26, 0x01	; 1
    675c:	06 17       	cp	r16, r22
    675e:	17 07       	cpc	r17, r23
    6760:	b0 f0       	brcs	.+44     	; 0x678e <realloc+0x68>
    6762:	05 30       	cpi	r16, 0x05	; 5
    6764:	11 05       	cpc	r17, r1
    6766:	08 f4       	brcc	.+2      	; 0x676a <realloc+0x44>
    6768:	9b c0       	rjmp	.+310    	; 0x68a0 <realloc+0x17a>
    676a:	c8 01       	movw	r24, r16
    676c:	04 97       	sbiw	r24, 0x04	; 4
    676e:	86 17       	cp	r24, r22
    6770:	97 07       	cpc	r25, r23
    6772:	08 f4       	brcc	.+2      	; 0x6776 <realloc+0x50>
    6774:	95 c0       	rjmp	.+298    	; 0x68a0 <realloc+0x17a>
    6776:	02 50       	subi	r16, 0x02	; 2
    6778:	11 09       	sbc	r17, r1
    677a:	06 1b       	sub	r16, r22
    677c:	17 0b       	sbc	r17, r23
    677e:	01 93       	st	Z+, r16
    6780:	11 93       	st	Z+, r17
    6782:	6d 93       	st	X+, r22
    6784:	7c 93       	st	X, r23
    6786:	cf 01       	movw	r24, r30
    6788:	0e 94 0a 33 	call	0x6614	; 0x6614 <free>
    678c:	89 c0       	rjmp	.+274    	; 0x68a0 <realloc+0x17a>
    678e:	5b 01       	movw	r10, r22
    6790:	a0 1a       	sub	r10, r16
    6792:	b1 0a       	sbc	r11, r17
    6794:	4c 01       	movw	r8, r24
    6796:	80 0e       	add	r8, r16
    6798:	91 1e       	adc	r9, r17
    679a:	a0 91 15 07 	lds	r26, 0x0715	; 0x800715 <__flp>
    679e:	b0 91 16 07 	lds	r27, 0x0716	; 0x800716 <__flp+0x1>
    67a2:	61 2c       	mov	r6, r1
    67a4:	71 2c       	mov	r7, r1
    67a6:	e1 2c       	mov	r14, r1
    67a8:	f1 2c       	mov	r15, r1
    67aa:	10 97       	sbiw	r26, 0x00	; 0
    67ac:	09 f4       	brne	.+2      	; 0x67b0 <realloc+0x8a>
    67ae:	46 c0       	rjmp	.+140    	; 0x683c <realloc+0x116>
    67b0:	8d 91       	ld	r24, X+
    67b2:	9c 91       	ld	r25, X
    67b4:	11 97       	sbiw	r26, 0x01	; 1
    67b6:	a8 15       	cp	r26, r8
    67b8:	b9 05       	cpc	r27, r9
    67ba:	b1 f5       	brne	.+108    	; 0x6828 <realloc+0x102>
    67bc:	6c 01       	movw	r12, r24
    67be:	42 e0       	ldi	r20, 0x02	; 2
    67c0:	c4 0e       	add	r12, r20
    67c2:	d1 1c       	adc	r13, r1
    67c4:	ca 14       	cp	r12, r10
    67c6:	db 04       	cpc	r13, r11
    67c8:	78 f1       	brcs	.+94     	; 0x6828 <realloc+0x102>
    67ca:	4c 01       	movw	r8, r24
    67cc:	8a 18       	sub	r8, r10
    67ce:	9b 08       	sbc	r9, r11
    67d0:	64 01       	movw	r12, r8
    67d2:	42 e0       	ldi	r20, 0x02	; 2
    67d4:	c4 0e       	add	r12, r20
    67d6:	d1 1c       	adc	r13, r1
    67d8:	12 96       	adiw	r26, 0x02	; 2
    67da:	bc 90       	ld	r11, X
    67dc:	12 97       	sbiw	r26, 0x02	; 2
    67de:	13 96       	adiw	r26, 0x03	; 3
    67e0:	ac 91       	ld	r26, X
    67e2:	b5 e0       	ldi	r27, 0x05	; 5
    67e4:	cb 16       	cp	r12, r27
    67e6:	d1 04       	cpc	r13, r1
    67e8:	40 f0       	brcs	.+16     	; 0x67fa <realloc+0xd4>
    67ea:	b2 82       	std	Z+2, r11	; 0x02
    67ec:	a3 83       	std	Z+3, r26	; 0x03
    67ee:	91 82       	std	Z+1, r9	; 0x01
    67f0:	80 82       	st	Z, r8
    67f2:	d9 01       	movw	r26, r18
    67f4:	6d 93       	st	X+, r22
    67f6:	7c 93       	st	X, r23
    67f8:	09 c0       	rjmp	.+18     	; 0x680c <realloc+0xe6>
    67fa:	0e 5f       	subi	r16, 0xFE	; 254
    67fc:	1f 4f       	sbci	r17, 0xFF	; 255
    67fe:	80 0f       	add	r24, r16
    6800:	91 1f       	adc	r25, r17
    6802:	f9 01       	movw	r30, r18
    6804:	91 83       	std	Z+1, r25	; 0x01
    6806:	80 83       	st	Z, r24
    6808:	eb 2d       	mov	r30, r11
    680a:	fa 2f       	mov	r31, r26
    680c:	e1 14       	cp	r14, r1
    680e:	f1 04       	cpc	r15, r1
    6810:	31 f0       	breq	.+12     	; 0x681e <realloc+0xf8>
    6812:	d7 01       	movw	r26, r14
    6814:	13 96       	adiw	r26, 0x03	; 3
    6816:	fc 93       	st	X, r31
    6818:	ee 93       	st	-X, r30
    681a:	12 97       	sbiw	r26, 0x02	; 2
    681c:	41 c0       	rjmp	.+130    	; 0x68a0 <realloc+0x17a>
    681e:	f0 93 16 07 	sts	0x0716, r31	; 0x800716 <__flp+0x1>
    6822:	e0 93 15 07 	sts	0x0715, r30	; 0x800715 <__flp>
    6826:	3c c0       	rjmp	.+120    	; 0x68a0 <realloc+0x17a>
    6828:	68 16       	cp	r6, r24
    682a:	79 06       	cpc	r7, r25
    682c:	08 f4       	brcc	.+2      	; 0x6830 <realloc+0x10a>
    682e:	3c 01       	movw	r6, r24
    6830:	7d 01       	movw	r14, r26
    6832:	12 96       	adiw	r26, 0x02	; 2
    6834:	0d 90       	ld	r0, X+
    6836:	bc 91       	ld	r27, X
    6838:	a0 2d       	mov	r26, r0
    683a:	b7 cf       	rjmp	.-146    	; 0x67aa <realloc+0x84>
    683c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <__brkval>
    6840:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <__brkval+0x1>
    6844:	88 16       	cp	r8, r24
    6846:	99 06       	cpc	r9, r25
    6848:	e1 f4       	brne	.+56     	; 0x6882 <realloc+0x15c>
    684a:	66 16       	cp	r6, r22
    684c:	77 06       	cpc	r7, r23
    684e:	c8 f4       	brcc	.+50     	; 0x6882 <realloc+0x15c>
    6850:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6854:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6858:	00 97       	sbiw	r24, 0x00	; 0
    685a:	41 f4       	brne	.+16     	; 0x686c <realloc+0x146>
    685c:	8d b7       	in	r24, 0x3d	; 61
    685e:	9e b7       	in	r25, 0x3e	; 62
    6860:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6864:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6868:	84 1b       	sub	r24, r20
    686a:	95 0b       	sbc	r25, r21
    686c:	e8 17       	cp	r30, r24
    686e:	f9 07       	cpc	r31, r25
    6870:	c8 f4       	brcc	.+50     	; 0x68a4 <realloc+0x17e>
    6872:	f0 93 14 07 	sts	0x0714, r31	; 0x800714 <__brkval+0x1>
    6876:	e0 93 13 07 	sts	0x0713, r30	; 0x800713 <__brkval>
    687a:	f9 01       	movw	r30, r18
    687c:	71 83       	std	Z+1, r23	; 0x01
    687e:	60 83       	st	Z, r22
    6880:	0f c0       	rjmp	.+30     	; 0x68a0 <realloc+0x17a>
    6882:	cb 01       	movw	r24, r22
    6884:	0e 94 72 32 	call	0x64e4	; 0x64e4 <malloc>
    6888:	7c 01       	movw	r14, r24
    688a:	00 97       	sbiw	r24, 0x00	; 0
    688c:	59 f0       	breq	.+22     	; 0x68a4 <realloc+0x17e>
    688e:	a8 01       	movw	r20, r16
    6890:	be 01       	movw	r22, r28
    6892:	0e 94 a3 34 	call	0x6946	; 0x6946 <memcpy>
    6896:	ce 01       	movw	r24, r28
    6898:	0e 94 0a 33 	call	0x6614	; 0x6614 <free>
    689c:	c7 01       	movw	r24, r14
    689e:	04 c0       	rjmp	.+8      	; 0x68a8 <realloc+0x182>
    68a0:	ce 01       	movw	r24, r28
    68a2:	02 c0       	rjmp	.+4      	; 0x68a8 <realloc+0x182>
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	90 e0       	ldi	r25, 0x00	; 0
    68a8:	cd b7       	in	r28, 0x3d	; 61
    68aa:	de b7       	in	r29, 0x3e	; 62
    68ac:	ee e0       	ldi	r30, 0x0E	; 14
    68ae:	0c 94 58 35 	jmp	0x6ab0	; 0x6ab0 <__epilogue_restores__+0x8>

000068b2 <atoi>:
    68b2:	fc 01       	movw	r30, r24
    68b4:	88 27       	eor	r24, r24
    68b6:	99 27       	eor	r25, r25
    68b8:	e8 94       	clt
    68ba:	21 91       	ld	r18, Z+
    68bc:	20 32       	cpi	r18, 0x20	; 32
    68be:	e9 f3       	breq	.-6      	; 0x68ba <atoi+0x8>
    68c0:	29 30       	cpi	r18, 0x09	; 9
    68c2:	10 f0       	brcs	.+4      	; 0x68c8 <atoi+0x16>
    68c4:	2e 30       	cpi	r18, 0x0E	; 14
    68c6:	c8 f3       	brcs	.-14     	; 0x68ba <atoi+0x8>
    68c8:	2b 32       	cpi	r18, 0x2B	; 43
    68ca:	41 f0       	breq	.+16     	; 0x68dc <atoi+0x2a>
    68cc:	2d 32       	cpi	r18, 0x2D	; 45
    68ce:	39 f4       	brne	.+14     	; 0x68de <atoi+0x2c>
    68d0:	68 94       	set
    68d2:	04 c0       	rjmp	.+8      	; 0x68dc <atoi+0x2a>
    68d4:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <__mulhi_const_10>
    68d8:	82 0f       	add	r24, r18
    68da:	91 1d       	adc	r25, r1
    68dc:	21 91       	ld	r18, Z+
    68de:	20 53       	subi	r18, 0x30	; 48
    68e0:	2a 30       	cpi	r18, 0x0A	; 10
    68e2:	c0 f3       	brcs	.-16     	; 0x68d4 <atoi+0x22>
    68e4:	1e f4       	brtc	.+6      	; 0x68ec <atoi+0x3a>
    68e6:	90 95       	com	r25
    68e8:	81 95       	neg	r24
    68ea:	9f 4f       	sbci	r25, 0xFF	; 255
    68ec:	08 95       	ret

000068ee <strcmp_P>:
    68ee:	fb 01       	movw	r30, r22
    68f0:	dc 01       	movw	r26, r24
    68f2:	8d 91       	ld	r24, X+
    68f4:	05 90       	lpm	r0, Z+
    68f6:	80 19       	sub	r24, r0
    68f8:	01 10       	cpse	r0, r1
    68fa:	d9 f3       	breq	.-10     	; 0x68f2 <strcmp_P+0x4>
    68fc:	99 0b       	sbc	r25, r25
    68fe:	08 95       	ret

00006900 <__strlen_P>:
    6900:	fc 01       	movw	r30, r24
    6902:	05 90       	lpm	r0, Z+
    6904:	00 20       	and	r0, r0
    6906:	e9 f7       	brne	.-6      	; 0x6902 <__strlen_P+0x2>
    6908:	80 95       	com	r24
    690a:	90 95       	com	r25
    690c:	8e 0f       	add	r24, r30
    690e:	9f 1f       	adc	r25, r31
    6910:	08 95       	ret

00006912 <strstr_P>:
    6912:	fb 01       	movw	r30, r22
    6914:	55 91       	lpm	r21, Z+
    6916:	55 23       	and	r21, r21
    6918:	a9 f0       	breq	.+42     	; 0x6944 <strstr_P+0x32>
    691a:	bf 01       	movw	r22, r30
    691c:	dc 01       	movw	r26, r24
    691e:	4d 91       	ld	r20, X+
    6920:	45 17       	cp	r20, r21
    6922:	41 11       	cpse	r20, r1
    6924:	e1 f7       	brne	.-8      	; 0x691e <strstr_P+0xc>
    6926:	59 f4       	brne	.+22     	; 0x693e <strstr_P+0x2c>
    6928:	cd 01       	movw	r24, r26
    692a:	05 90       	lpm	r0, Z+
    692c:	00 20       	and	r0, r0
    692e:	49 f0       	breq	.+18     	; 0x6942 <strstr_P+0x30>
    6930:	4d 91       	ld	r20, X+
    6932:	40 15       	cp	r20, r0
    6934:	41 11       	cpse	r20, r1
    6936:	c9 f3       	breq	.-14     	; 0x692a <strstr_P+0x18>
    6938:	fb 01       	movw	r30, r22
    693a:	41 11       	cpse	r20, r1
    693c:	ef cf       	rjmp	.-34     	; 0x691c <strstr_P+0xa>
    693e:	81 e0       	ldi	r24, 0x01	; 1
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	01 97       	sbiw	r24, 0x01	; 1
    6944:	08 95       	ret

00006946 <memcpy>:
    6946:	fb 01       	movw	r30, r22
    6948:	dc 01       	movw	r26, r24
    694a:	02 c0       	rjmp	.+4      	; 0x6950 <memcpy+0xa>
    694c:	01 90       	ld	r0, Z+
    694e:	0d 92       	st	X+, r0
    6950:	41 50       	subi	r20, 0x01	; 1
    6952:	50 40       	sbci	r21, 0x00	; 0
    6954:	d8 f7       	brcc	.-10     	; 0x694c <memcpy+0x6>
    6956:	08 95       	ret

00006958 <strchr>:
    6958:	fc 01       	movw	r30, r24
    695a:	81 91       	ld	r24, Z+
    695c:	86 17       	cp	r24, r22
    695e:	21 f0       	breq	.+8      	; 0x6968 <strchr+0x10>
    6960:	88 23       	and	r24, r24
    6962:	d9 f7       	brne	.-10     	; 0x695a <strchr+0x2>
    6964:	99 27       	eor	r25, r25
    6966:	08 95       	ret
    6968:	31 97       	sbiw	r30, 0x01	; 1
    696a:	cf 01       	movw	r24, r30
    696c:	08 95       	ret

0000696e <strcmp>:
    696e:	fb 01       	movw	r30, r22
    6970:	dc 01       	movw	r26, r24
    6972:	8d 91       	ld	r24, X+
    6974:	01 90       	ld	r0, Z+
    6976:	80 19       	sub	r24, r0
    6978:	01 10       	cpse	r0, r1
    697a:	d9 f3       	breq	.-10     	; 0x6972 <strcmp+0x4>
    697c:	99 0b       	sbc	r25, r25
    697e:	08 95       	ret

00006980 <strcpy>:
    6980:	fb 01       	movw	r30, r22
    6982:	dc 01       	movw	r26, r24
    6984:	01 90       	ld	r0, Z+
    6986:	0d 92       	st	X+, r0
    6988:	00 20       	and	r0, r0
    698a:	e1 f7       	brne	.-8      	; 0x6984 <strcpy+0x4>
    698c:	08 95       	ret

0000698e <strncpy>:
    698e:	fb 01       	movw	r30, r22
    6990:	dc 01       	movw	r26, r24
    6992:	41 50       	subi	r20, 0x01	; 1
    6994:	50 40       	sbci	r21, 0x00	; 0
    6996:	48 f0       	brcs	.+18     	; 0x69aa <strncpy+0x1c>
    6998:	01 90       	ld	r0, Z+
    699a:	0d 92       	st	X+, r0
    699c:	00 20       	and	r0, r0
    699e:	c9 f7       	brne	.-14     	; 0x6992 <strncpy+0x4>
    69a0:	01 c0       	rjmp	.+2      	; 0x69a4 <strncpy+0x16>
    69a2:	1d 92       	st	X+, r1
    69a4:	41 50       	subi	r20, 0x01	; 1
    69a6:	50 40       	sbci	r21, 0x00	; 0
    69a8:	e0 f7       	brcc	.-8      	; 0x69a2 <strncpy+0x14>
    69aa:	08 95       	ret

000069ac <strstr>:
    69ac:	fb 01       	movw	r30, r22
    69ae:	51 91       	ld	r21, Z+
    69b0:	55 23       	and	r21, r21
    69b2:	a9 f0       	breq	.+42     	; 0x69de <strstr+0x32>
    69b4:	bf 01       	movw	r22, r30
    69b6:	dc 01       	movw	r26, r24
    69b8:	4d 91       	ld	r20, X+
    69ba:	45 17       	cp	r20, r21
    69bc:	41 11       	cpse	r20, r1
    69be:	e1 f7       	brne	.-8      	; 0x69b8 <strstr+0xc>
    69c0:	59 f4       	brne	.+22     	; 0x69d8 <strstr+0x2c>
    69c2:	cd 01       	movw	r24, r26
    69c4:	01 90       	ld	r0, Z+
    69c6:	00 20       	and	r0, r0
    69c8:	49 f0       	breq	.+18     	; 0x69dc <strstr+0x30>
    69ca:	4d 91       	ld	r20, X+
    69cc:	40 15       	cp	r20, r0
    69ce:	41 11       	cpse	r20, r1
    69d0:	c9 f3       	breq	.-14     	; 0x69c4 <strstr+0x18>
    69d2:	fb 01       	movw	r30, r22
    69d4:	41 11       	cpse	r20, r1
    69d6:	ef cf       	rjmp	.-34     	; 0x69b6 <strstr+0xa>
    69d8:	81 e0       	ldi	r24, 0x01	; 1
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	01 97       	sbiw	r24, 0x01	; 1
    69de:	08 95       	ret

000069e0 <__mulhi_const_10>:
    69e0:	7a e0       	ldi	r23, 0x0A	; 10
    69e2:	97 9f       	mul	r25, r23
    69e4:	90 2d       	mov	r25, r0
    69e6:	87 9f       	mul	r24, r23
    69e8:	80 2d       	mov	r24, r0
    69ea:	91 0d       	add	r25, r1
    69ec:	11 24       	eor	r1, r1
    69ee:	08 95       	ret

000069f0 <__utoa_ncheck>:
    69f0:	bb 27       	eor	r27, r27

000069f2 <__utoa_common>:
    69f2:	fb 01       	movw	r30, r22
    69f4:	55 27       	eor	r21, r21
    69f6:	aa 27       	eor	r26, r26
    69f8:	88 0f       	add	r24, r24
    69fa:	99 1f       	adc	r25, r25
    69fc:	aa 1f       	adc	r26, r26
    69fe:	a4 17       	cp	r26, r20
    6a00:	10 f0       	brcs	.+4      	; 0x6a06 <__utoa_common+0x14>
    6a02:	a4 1b       	sub	r26, r20
    6a04:	83 95       	inc	r24
    6a06:	50 51       	subi	r21, 0x10	; 16
    6a08:	b9 f7       	brne	.-18     	; 0x69f8 <__utoa_common+0x6>
    6a0a:	a0 5d       	subi	r26, 0xD0	; 208
    6a0c:	aa 33       	cpi	r26, 0x3A	; 58
    6a0e:	08 f0       	brcs	.+2      	; 0x6a12 <__utoa_common+0x20>
    6a10:	a9 5d       	subi	r26, 0xD9	; 217
    6a12:	a1 93       	st	Z+, r26
    6a14:	00 97       	sbiw	r24, 0x00	; 0
    6a16:	79 f7       	brne	.-34     	; 0x69f6 <__utoa_common+0x4>
    6a18:	b1 11       	cpse	r27, r1
    6a1a:	b1 93       	st	Z+, r27
    6a1c:	11 92       	st	Z+, r1
    6a1e:	cb 01       	movw	r24, r22
    6a20:	0c 94 12 35 	jmp	0x6a24	; 0x6a24 <strrev>

00006a24 <strrev>:
    6a24:	dc 01       	movw	r26, r24
    6a26:	fc 01       	movw	r30, r24
    6a28:	67 2f       	mov	r22, r23
    6a2a:	71 91       	ld	r23, Z+
    6a2c:	77 23       	and	r23, r23
    6a2e:	e1 f7       	brne	.-8      	; 0x6a28 <strrev+0x4>
    6a30:	32 97       	sbiw	r30, 0x02	; 2
    6a32:	04 c0       	rjmp	.+8      	; 0x6a3c <strrev+0x18>
    6a34:	7c 91       	ld	r23, X
    6a36:	6d 93       	st	X+, r22
    6a38:	70 83       	st	Z, r23
    6a3a:	62 91       	ld	r22, -Z
    6a3c:	ae 17       	cp	r26, r30
    6a3e:	bf 07       	cpc	r27, r31
    6a40:	c8 f3       	brcs	.-14     	; 0x6a34 <strrev+0x10>
    6a42:	08 95       	ret

00006a44 <eeprom_read_byte>:
    6a44:	f9 99       	sbic	0x1f, 1	; 31
    6a46:	fe cf       	rjmp	.-4      	; 0x6a44 <eeprom_read_byte>
    6a48:	92 bd       	out	0x22, r25	; 34
    6a4a:	81 bd       	out	0x21, r24	; 33
    6a4c:	f8 9a       	sbi	0x1f, 0	; 31
    6a4e:	99 27       	eor	r25, r25
    6a50:	80 b5       	in	r24, 0x20	; 32
    6a52:	08 95       	ret

00006a54 <eeprom_write_byte>:
    6a54:	26 2f       	mov	r18, r22

00006a56 <eeprom_write_r18>:
    6a56:	f9 99       	sbic	0x1f, 1	; 31
    6a58:	fe cf       	rjmp	.-4      	; 0x6a56 <eeprom_write_r18>
    6a5a:	1f ba       	out	0x1f, r1	; 31
    6a5c:	92 bd       	out	0x22, r25	; 34
    6a5e:	81 bd       	out	0x21, r24	; 33
    6a60:	20 bd       	out	0x20, r18	; 32
    6a62:	0f b6       	in	r0, 0x3f	; 63
    6a64:	f8 94       	cli
    6a66:	fa 9a       	sbi	0x1f, 2	; 31
    6a68:	f9 9a       	sbi	0x1f, 1	; 31
    6a6a:	0f be       	out	0x3f, r0	; 63
    6a6c:	01 96       	adiw	r24, 0x01	; 1
    6a6e:	08 95       	ret

00006a70 <__prologue_saves__>:
    6a70:	2f 92       	push	r2
    6a72:	3f 92       	push	r3
    6a74:	4f 92       	push	r4
    6a76:	5f 92       	push	r5
    6a78:	6f 92       	push	r6
    6a7a:	7f 92       	push	r7
    6a7c:	8f 92       	push	r8
    6a7e:	9f 92       	push	r9
    6a80:	af 92       	push	r10
    6a82:	bf 92       	push	r11
    6a84:	cf 92       	push	r12
    6a86:	df 92       	push	r13
    6a88:	ef 92       	push	r14
    6a8a:	ff 92       	push	r15
    6a8c:	0f 93       	push	r16
    6a8e:	1f 93       	push	r17
    6a90:	cf 93       	push	r28
    6a92:	df 93       	push	r29
    6a94:	cd b7       	in	r28, 0x3d	; 61
    6a96:	de b7       	in	r29, 0x3e	; 62
    6a98:	ca 1b       	sub	r28, r26
    6a9a:	db 0b       	sbc	r29, r27
    6a9c:	0f b6       	in	r0, 0x3f	; 63
    6a9e:	f8 94       	cli
    6aa0:	de bf       	out	0x3e, r29	; 62
    6aa2:	0f be       	out	0x3f, r0	; 63
    6aa4:	cd bf       	out	0x3d, r28	; 61
    6aa6:	09 94       	ijmp

00006aa8 <__epilogue_restores__>:
    6aa8:	2a 88       	ldd	r2, Y+18	; 0x12
    6aaa:	39 88       	ldd	r3, Y+17	; 0x11
    6aac:	48 88       	ldd	r4, Y+16	; 0x10
    6aae:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
    6ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    6ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
    6ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
    6aba:	b9 84       	ldd	r11, Y+9	; 0x09
    6abc:	c8 84       	ldd	r12, Y+8	; 0x08
    6abe:	df 80       	ldd	r13, Y+7	; 0x07
    6ac0:	ee 80       	ldd	r14, Y+6	; 0x06
    6ac2:	fd 80       	ldd	r15, Y+5	; 0x05
    6ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    6ac6:	1b 81       	ldd	r17, Y+3	; 0x03
    6ac8:	aa 81       	ldd	r26, Y+2	; 0x02
    6aca:	b9 81       	ldd	r27, Y+1	; 0x01
    6acc:	ce 0f       	add	r28, r30
    6ace:	d1 1d       	adc	r29, r1
    6ad0:	0f b6       	in	r0, 0x3f	; 63
    6ad2:	f8 94       	cli
    6ad4:	de bf       	out	0x3e, r29	; 62
    6ad6:	0f be       	out	0x3f, r0	; 63
    6ad8:	cd bf       	out	0x3d, r28	; 61
    6ada:	ed 01       	movw	r28, r26
    6adc:	08 95       	ret

00006ade <__do_global_dtors>:
    6ade:	13 e0       	ldi	r17, 0x03	; 3
    6ae0:	c3 e7       	ldi	r28, 0x73	; 115
    6ae2:	d3 e0       	ldi	r29, 0x03	; 3
    6ae4:	04 c0       	rjmp	.+8      	; 0x6aee <__do_global_dtors+0x10>
    6ae6:	fe 01       	movw	r30, r28
    6ae8:	0e 94 3e 32 	call	0x647c	; 0x647c <__tablejump2__>
    6aec:	21 96       	adiw	r28, 0x01	; 1
    6aee:	c4 37       	cpi	r28, 0x74	; 116
    6af0:	d1 07       	cpc	r29, r17
    6af2:	c9 f7       	brne	.-14     	; 0x6ae6 <__do_global_dtors+0x8>
    6af4:	f8 94       	cli

00006af6 <__stop_program>:
    6af6:	ff cf       	rjmp	.-2      	; 0x6af6 <__stop_program>
