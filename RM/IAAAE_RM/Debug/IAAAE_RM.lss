
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ac  00800100  000063f8  0000648c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051a  008003ac  008003ac  00006738  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c523  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c95  00000000  00000000  00023587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000777f  00000000  00000000  0002721c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f88  00000000  00000000  0002e99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011c29  00000000  00000000  00031924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d473  00000000  00000000  0004354d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000820  00000000  00000000  000509c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005de2  00000000  00000000  000511e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 03 	jmp	0x712	; 0x712 <__dtors_end>
       4:	0c 94 75 2c 	jmp	0x58ea	; 0x58ea <__vector_1>
       8:	0c 94 9c 2c 	jmp	0x5938	; 0x5938 <__vector_2>
       c:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__vector_3>
      10:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__vector_3>
      14:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__vector_3>
      18:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      1c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      20:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      24:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      28:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      2c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      30:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      34:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      38:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      3c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      40:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__vector_16>
      44:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      48:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__vector_18>
      4c:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__vector_19>
      50:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      54:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      58:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      5c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      60:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__vector_24>
      64:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
      68:	50 14       	cp	r5, r0
      6a:	56 14       	cp	r5, r6
      6c:	56 14       	cp	r5, r6
      6e:	56 14       	cp	r5, r6
      70:	56 14       	cp	r5, r6
      72:	56 14       	cp	r5, r6
      74:	56 14       	cp	r5, r6
      76:	56 14       	cp	r5, r6
      78:	44 13       	cpse	r20, r20
      7a:	56 14       	cp	r5, r6
      7c:	56 14       	cp	r5, r6
      7e:	56 14       	cp	r5, r6
      80:	56 14       	cp	r5, r6
      82:	56 14       	cp	r5, r6
      84:	56 14       	cp	r5, r6
      86:	56 14       	cp	r5, r6
      88:	44 13       	cpse	r20, r20
      8a:	56 14       	cp	r5, r6
      8c:	56 14       	cp	r5, r6
      8e:	56 14       	cp	r5, r6
      90:	56 14       	cp	r5, r6
      92:	56 14       	cp	r5, r6
      94:	56 14       	cp	r5, r6
      96:	56 14       	cp	r5, r6
      98:	4e 13       	cpse	r20, r30
      9a:	56 14       	cp	r5, r6
      9c:	56 14       	cp	r5, r6
      9e:	56 14       	cp	r5, r6
      a0:	56 14       	cp	r5, r6
      a2:	56 14       	cp	r5, r6
      a4:	56 14       	cp	r5, r6
      a6:	56 14       	cp	r5, r6
      a8:	7a 13       	cpse	r23, r26
      aa:	56 14       	cp	r5, r6
      ac:	56 14       	cp	r5, r6
      ae:	56 14       	cp	r5, r6
      b0:	56 14       	cp	r5, r6
      b2:	56 14       	cp	r5, r6
      b4:	56 14       	cp	r5, r6
      b6:	56 14       	cp	r5, r6
      b8:	4e 13       	cpse	r20, r30
      ba:	56 14       	cp	r5, r6
      bc:	56 14       	cp	r5, r6
      be:	56 14       	cp	r5, r6
      c0:	56 14       	cp	r5, r6
      c2:	56 14       	cp	r5, r6
      c4:	56 14       	cp	r5, r6
      c6:	56 14       	cp	r5, r6
      c8:	80 13       	cpse	r24, r16
      ca:	56 14       	cp	r5, r6
      cc:	56 14       	cp	r5, r6
      ce:	56 14       	cp	r5, r6
      d0:	56 14       	cp	r5, r6
      d2:	56 14       	cp	r5, r6
      d4:	56 14       	cp	r5, r6
      d6:	56 14       	cp	r5, r6
      d8:	86 13       	cpse	r24, r22
      da:	56 14       	cp	r5, r6
      dc:	56 14       	cp	r5, r6
      de:	56 14       	cp	r5, r6
      e0:	56 14       	cp	r5, r6
      e2:	56 14       	cp	r5, r6
      e4:	56 14       	cp	r5, r6
      e6:	56 14       	cp	r5, r6
      e8:	9c 13       	cpse	r25, r28
      ea:	56 14       	cp	r5, r6
      ec:	56 14       	cp	r5, r6
      ee:	56 14       	cp	r5, r6
      f0:	56 14       	cp	r5, r6
      f2:	56 14       	cp	r5, r6
      f4:	56 14       	cp	r5, r6
      f6:	56 14       	cp	r5, r6
      f8:	cc 13       	cpse	r28, r28
      fa:	56 14       	cp	r5, r6
      fc:	56 14       	cp	r5, r6
      fe:	56 14       	cp	r5, r6
     100:	56 14       	cp	r5, r6
     102:	56 14       	cp	r5, r6
     104:	56 14       	cp	r5, r6
     106:	56 14       	cp	r5, r6
     108:	8c 13       	cpse	r24, r28
     10a:	56 14       	cp	r5, r6
     10c:	56 14       	cp	r5, r6
     10e:	56 14       	cp	r5, r6
     110:	56 14       	cp	r5, r6
     112:	56 14       	cp	r5, r6
     114:	56 14       	cp	r5, r6
     116:	56 14       	cp	r5, r6
     118:	aa 13       	cpse	r26, r26
     11a:	56 14       	cp	r5, r6
     11c:	56 14       	cp	r5, r6
     11e:	56 14       	cp	r5, r6
     120:	56 14       	cp	r5, r6
     122:	56 14       	cp	r5, r6
     124:	56 14       	cp	r5, r6
     126:	56 14       	cp	r5, r6
     128:	cf 13       	cpse	r28, r31
     12a:	56 14       	cp	r5, r6
     12c:	56 14       	cp	r5, r6
     12e:	56 14       	cp	r5, r6
     130:	56 14       	cp	r5, r6
     132:	56 14       	cp	r5, r6
     134:	56 14       	cp	r5, r6
     136:	56 14       	cp	r5, r6
     138:	cf 13       	cpse	r28, r31
     13a:	56 14       	cp	r5, r6
     13c:	56 14       	cp	r5, r6
     13e:	56 14       	cp	r5, r6
     140:	56 14       	cp	r5, r6
     142:	56 14       	cp	r5, r6
     144:	56 14       	cp	r5, r6
     146:	56 14       	cp	r5, r6
     148:	cf 13       	cpse	r28, r31
     14a:	56 14       	cp	r5, r6
     14c:	56 14       	cp	r5, r6
     14e:	56 14       	cp	r5, r6
     150:	56 14       	cp	r5, r6
     152:	56 14       	cp	r5, r6
     154:	56 14       	cp	r5, r6
     156:	56 14       	cp	r5, r6
     158:	cf 13       	cpse	r28, r31
     15a:	56 14       	cp	r5, r6
     15c:	56 14       	cp	r5, r6
     15e:	56 14       	cp	r5, r6
     160:	56 14       	cp	r5, r6
     162:	56 14       	cp	r5, r6
     164:	56 14       	cp	r5, r6
     166:	56 14       	cp	r5, r6
     168:	d8 13       	cpse	r29, r24
     16a:	56 14       	cp	r5, r6
     16c:	56 14       	cp	r5, r6
     16e:	56 14       	cp	r5, r6
     170:	56 14       	cp	r5, r6
     172:	56 14       	cp	r5, r6
     174:	56 14       	cp	r5, r6
     176:	56 14       	cp	r5, r6
     178:	12 14       	cp	r1, r2
     17a:	56 14       	cp	r5, r6
     17c:	56 14       	cp	r5, r6
     17e:	56 14       	cp	r5, r6
     180:	56 14       	cp	r5, r6
     182:	56 14       	cp	r5, r6
     184:	56 14       	cp	r5, r6
     186:	56 14       	cp	r5, r6
     188:	d8 13       	cpse	r29, r24
     18a:	56 14       	cp	r5, r6
     18c:	56 14       	cp	r5, r6
     18e:	56 14       	cp	r5, r6
     190:	56 14       	cp	r5, r6
     192:	56 14       	cp	r5, r6
     194:	56 14       	cp	r5, r6
     196:	56 14       	cp	r5, r6
     198:	12 14       	cp	r1, r2
     19a:	56 14       	cp	r5, r6
     19c:	56 14       	cp	r5, r6
     19e:	56 14       	cp	r5, r6
     1a0:	56 14       	cp	r5, r6
     1a2:	56 14       	cp	r5, r6
     1a4:	56 14       	cp	r5, r6
     1a6:	56 14       	cp	r5, r6
     1a8:	f4 13       	cpse	r31, r20
     1aa:	56 14       	cp	r5, r6
     1ac:	56 14       	cp	r5, r6
     1ae:	56 14       	cp	r5, r6
     1b0:	56 14       	cp	r5, r6
     1b2:	56 14       	cp	r5, r6
     1b4:	56 14       	cp	r5, r6
     1b6:	56 14       	cp	r5, r6
     1b8:	16 14       	cp	r1, r6
     1ba:	56 14       	cp	r5, r6
     1bc:	56 14       	cp	r5, r6
     1be:	56 14       	cp	r5, r6
     1c0:	56 14       	cp	r5, r6
     1c2:	56 14       	cp	r5, r6
     1c4:	56 14       	cp	r5, r6
     1c6:	56 14       	cp	r5, r6
     1c8:	16 14       	cp	r1, r6
     1ca:	56 14       	cp	r5, r6
     1cc:	56 14       	cp	r5, r6
     1ce:	56 14       	cp	r5, r6
     1d0:	56 14       	cp	r5, r6
     1d2:	56 14       	cp	r5, r6
     1d4:	56 14       	cp	r5, r6
     1d6:	56 14       	cp	r5, r6
     1d8:	2c 14       	cp	r2, r12
     1da:	56 14       	cp	r5, r6
     1dc:	56 14       	cp	r5, r6
     1de:	56 14       	cp	r5, r6
     1e0:	56 14       	cp	r5, r6
     1e2:	56 14       	cp	r5, r6
     1e4:	56 14       	cp	r5, r6
     1e6:	56 14       	cp	r5, r6
     1e8:	4a 14       	cp	r4, r10
     1ea:	56 14       	cp	r5, r6
     1ec:	56 14       	cp	r5, r6
     1ee:	56 14       	cp	r5, r6
     1f0:	56 14       	cp	r5, r6
     1f2:	56 14       	cp	r5, r6
     1f4:	56 14       	cp	r5, r6
     1f6:	56 14       	cp	r5, r6
     1f8:	4a 14       	cp	r4, r10
     1fa:	56 14       	cp	r5, r6
     1fc:	56 14       	cp	r5, r6
     1fe:	56 14       	cp	r5, r6
     200:	56 14       	cp	r5, r6
     202:	56 14       	cp	r5, r6
     204:	56 14       	cp	r5, r6
     206:	56 14       	cp	r5, r6
     208:	56 14       	cp	r5, r6
     20a:	56 14       	cp	r5, r6
     20c:	56 14       	cp	r5, r6
     20e:	56 14       	cp	r5, r6
     210:	56 14       	cp	r5, r6
     212:	56 14       	cp	r5, r6
     214:	56 14       	cp	r5, r6
     216:	56 14       	cp	r5, r6
     218:	56 14       	cp	r5, r6
     21a:	56 14       	cp	r5, r6
     21c:	56 14       	cp	r5, r6
     21e:	56 14       	cp	r5, r6
     220:	56 14       	cp	r5, r6
     222:	56 14       	cp	r5, r6
     224:	56 14       	cp	r5, r6
     226:	56 14       	cp	r5, r6
     228:	56 14       	cp	r5, r6
     22a:	56 14       	cp	r5, r6
     22c:	56 14       	cp	r5, r6
     22e:	56 14       	cp	r5, r6
     230:	56 14       	cp	r5, r6
     232:	56 14       	cp	r5, r6
     234:	56 14       	cp	r5, r6
     236:	56 14       	cp	r5, r6
     238:	56 14       	cp	r5, r6
     23a:	56 14       	cp	r5, r6
     23c:	56 14       	cp	r5, r6
     23e:	56 14       	cp	r5, r6
     240:	56 14       	cp	r5, r6
     242:	56 14       	cp	r5, r6
     244:	56 14       	cp	r5, r6
     246:	56 14       	cp	r5, r6
     248:	56 14       	cp	r5, r6
     24a:	56 14       	cp	r5, r6
     24c:	56 14       	cp	r5, r6
     24e:	56 14       	cp	r5, r6
     250:	56 14       	cp	r5, r6
     252:	56 14       	cp	r5, r6
     254:	56 14       	cp	r5, r6
     256:	56 14       	cp	r5, r6
     258:	55 14       	cp	r5, r5

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000295 <_ZZN10GsmManager11sendViaGprsEPKcE3__c>:
     295:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002a0 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
	...

000002a1 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
	...

000002a2 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     2a2:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

000002ad <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
     2ad:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002b8 <_ZZ5setupE3__c>:
     2b8:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000002c4 <_ZZ5setupE3__c_0>:
     2c4:	42 6f 6f 74 20 43 6f 75 6e 74 20 49 73 20 4e 6f     Boot Count Is No
     2d4:	77 00                                               w.

000002d6 <_ZZ4loopE3__c>:
     2d6:	42 65 68 61 76 69 6f 75 72 20 69 73 20 00           Behaviour is .

000002e4 <_ZZN12RmMemManager12verifyEepRomEvE3__c>:
     2e4:	45 45 50 52 4f 4d 20 54 65 73 74 3a 20 4c 6f 6e     EEPROM Test: Lon
     2f4:	67 3d 00                                            g=.

000002f7 <_ZZN12RmMemManager12verifyEepRomEvE3__c_0>:
     2f7:	2c 20 49 6e 74 3d 00                                , Int=.

000002fe <_ZZN12RmMemManager12verifyEepRomEvE3__c_1>:
     2fe:	2c 20 53 68 6f 72 74 3d 00                          , Short=.

00000307 <_ZZN12RmMemManager12verifyEepRomEvE3__c_2>:
     307:	2c 20 43 68 61 72 3d 00                             , Char=.

0000030f <_ZZN12RmMemManager9printDataEvE3__c>:
     30f:	4d 6f 64 75 6c 65 20 23 00                          Module #.

00000318 <_ZZN12RmMemManager9printDataEvE3__c_0>:
     318:	23 20 42 6f 6f 74 73 00                             # Boots.

00000320 <_ZZN12RmMemManager9printDataEvE3__c_1>:
     320:	4e 65 78 74 20 41 64 64 72 00                       Next Addr.

0000032a <_ZZ9printDataP10SensorDataE3__c>:
     32a:	42 61 74 74 2d 56 3a 00                             Batt-V:.

00000332 <_ZZ9printDataP10SensorDataE3__c_0>:
     332:	50 56 2d 56 3a 00                                   PV-V:.

00000338 <_ZZ9printDataP10SensorDataE3__c_1>:
     338:	43 75 72 72 65 6e 74 3a 00                          Current:.

00000341 <_ZZ9printDataP10SensorDataE3__c_2>:
     341:	54 65 6d 70 3a 00                                   Temp:.

00000347 <digital_pin_to_timer_PGM>:
     347:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     357:	00 00 00 00                                         ....

0000035b <digital_pin_to_bit_mask_PGM>:
     35b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     36b:	04 08 10 20                                         ... 

0000036f <digital_pin_to_port_PGM>:
     36f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     37f:	03 03 03 03                                         ....

00000383 <port_to_input_PGM>:
     383:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000038d <port_to_output_PGM>:
     38d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000397 <port_to_mode_PGM>:
     397:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003a1 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     3a1:	09 3c 2d 2d 2d 20 00                                .<--- .

000003a8 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     3a8:	09 2d 2d 2d 3e 20 00                                .---> .

000003af <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     3af:	09 3c 2d 2d 2d 20 00                                .<--- .

000003b6 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     3b6:	09 2d 2d 2d 3e 20 00                                .---> .

000003bd <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     3bd:	09 3c 2d 2d 2d 20 00                                .<--- .

000003c4 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     3c4:	09 2d 2d 2d 3e 20 00                                .---> .

000003cb <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     3cb:	09 3c 2d 2d 2d 20 00                                .<--- .

000003d2 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     3d2:	09 2d 2d 2d 3e 20 00                                .---> .

000003d9 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     3d9:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000003e1 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     3e1:	53 50 41 43 45 00                                   SPACE.

000003e7 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     3e7:	09 3c 2d 2d 2d 20 00                                .<--- .

000003ee <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     3ee:	52 45 44 49 52 00                                   REDIR.

000003f4 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     3f4:	55 52 4c 00                                         URL.

000003f8 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     3f8:	55 41 00                                            UA.

000003fb <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     3fb:	43 49 44 00                                         CID.

000003ff <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     3ff:	4c 65 6e 3a 20 00                                   Len: .

00000405 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     405:	53 74 61 74 75 73 3a 20 00                          Status: .

0000040e <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     40e:	43 4f 4e 54 45 4e 54 00                             CONTENT.

00000416 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     416:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

00000422 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     422:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000042d <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     42d:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000439 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     439:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000446 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     446:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000453 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     453:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000462 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     462:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000046b <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     46b:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000478 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     478:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000485 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     485:	09 2d 2d 2d 3e 20 00                                .---> .

0000048c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     48c:	22 2c 00                                            ",.

0000048f <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     48f:	22 2c 22 00                                         ",".

00000493 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     493:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004a1 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     4a1:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004af <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     4af:	09 2d 2d 2d 3e 20 00                                .---> .

000004b6 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     4b6:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

000004c2 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     4c2:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000004ce <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     4ce:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000004d9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     4d9:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000004e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     4e6:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000004f1 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     4f1:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000004f9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     4f9:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000502 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     502:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

0000050f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     50f:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     51f:	44 22 2c 00                                         D",.

00000523 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     523:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     533:	45 52 22 2c 00                                      ER",.

00000538 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     538:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000542 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     542:	09 2d 2d 2d 3e 20 00                                .---> .

00000549 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     549:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000553 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     553:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     563:	4e 22 2c 00                                         N",.

00000567 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     567:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     577:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000585 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     585:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000590 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     590:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000059b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     59b:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005a3 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c_0>:
     5a3:	53 49 4e 46 00                                      SINF.

000005a8 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c>:
     5a8:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

000005b3 <_ZZN13Adafruit_FONA9GPSstatusEvE3__c_0>:
     5b3:	2b 43 47 4e 53 49 4e 46 3a 20 00                    +CGNSINF: .

000005be <_ZZN13Adafruit_FONA9GPSstatusEvE3__c>:
     5be:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

000005c9 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     5c9:	3e 20 00                                            > .

000005cc <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     5cc:	3e 20 00                                            > .

000005cf <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     5cf:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000005d9 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     5d9:	41 54 2b 43 53 51 00                                AT+CSQ.

000005e0 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     5e0:	2b 43 53 51 3a 20 00                                +CSQ: .

000005e7 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     5e7:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000005f0 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     5f0:	2b 43 52 45 47 3a 20 00                             +CREG: .

000005f8 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     5f8:	41 54 2b 43 42 43 00                                AT+CBC.

000005ff <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     5ff:	2b 43 42 43 3a 20 00                                +CBC: .

00000606 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     606:	53 49 4d 38 30 30 48 00                             SIM800H.

0000060e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     60e:	09 3c 2d 2d 2d 20 00                                .<--- .

00000615 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     615:	09 2d 2d 2d 3e 20 00                                .---> .

0000061c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     61c:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

0000062c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     62c:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

0000063c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     63c:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

00000647 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     647:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000652 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     652:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000065d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     65d:	09 3c 2d 2d 2d 20 00                                .<--- .

00000664 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     664:	09 2d 2d 2d 3e 20 00                                .---> .

0000066b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     66b:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

00000675 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     675:	41 54 45 30 00                                      ATE0.

0000067a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     67a:	41 54 45 30 00                                      ATE0.

0000067f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     67f:	41 54 00                                            AT.

00000682 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     682:	41 54 00                                            AT.

00000685 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     685:	41 54 00                                            AT.

00000688 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     688:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     698:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     6a8:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     6b8:	2e 00                                               ..

000006ba <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     6ba:	41 54 00                                            AT.

000006bd <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     6bd:	41 54 00                                            AT.

000006c0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     6c0:	41 54 00                                            AT.

000006c3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     6c3:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     6d3:	61 62 6c 65 00                                      able.

000006d8 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     6d8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     6e8:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000006f9 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     6f9:	4f 4b 00                                            OK.

000006fc <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     6fc:	46 4f 4e 41 00                                      FONA.

00000701 <_ZZN13Adafruit_FONAC4EaE3__c>:
     701:	46 4f 4e 41 6e 65 74 00 00                          FONAnet..

0000070a <__ctors_start>:
     70a:	d5 08       	sbc	r13, r5
     70c:	0e 18       	sub	r0, r14
     70e:	86 1b       	sub	r24, r22

00000710 <__ctors_end>:
     710:	e2 08       	sbc	r14, r2

00000712 <__dtors_end>:
     712:	11 24       	eor	r1, r1
     714:	1f be       	out	0x3f, r1	; 63
     716:	cf ef       	ldi	r28, 0xFF	; 255
     718:	d8 e0       	ldi	r29, 0x08	; 8
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	cd bf       	out	0x3d, r28	; 61

0000071e <__do_copy_data>:
     71e:	13 e0       	ldi	r17, 0x03	; 3
     720:	a0 e0       	ldi	r26, 0x00	; 0
     722:	b1 e0       	ldi	r27, 0x01	; 1
     724:	e8 ef       	ldi	r30, 0xF8	; 248
     726:	f3 e6       	ldi	r31, 0x63	; 99
     728:	02 c0       	rjmp	.+4      	; 0x72e <__do_copy_data+0x10>
     72a:	05 90       	lpm	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	ac 3a       	cpi	r26, 0xAC	; 172
     730:	b1 07       	cpc	r27, r17
     732:	d9 f7       	brne	.-10     	; 0x72a <__do_copy_data+0xc>

00000734 <__do_clear_bss>:
     734:	28 e0       	ldi	r18, 0x08	; 8
     736:	ac ea       	ldi	r26, 0xAC	; 172
     738:	b3 e0       	ldi	r27, 0x03	; 3
     73a:	01 c0       	rjmp	.+2      	; 0x73e <.do_clear_bss_start>

0000073c <.do_clear_bss_loop>:
     73c:	1d 92       	st	X+, r1

0000073e <.do_clear_bss_start>:
     73e:	a6 3c       	cpi	r26, 0xC6	; 198
     740:	b2 07       	cpc	r27, r18
     742:	e1 f7       	brne	.-8      	; 0x73c <.do_clear_bss_loop>

00000744 <__do_global_ctors>:
     744:	13 e0       	ldi	r17, 0x03	; 3
     746:	c8 e8       	ldi	r28, 0x88	; 136
     748:	d3 e0       	ldi	r29, 0x03	; 3
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__do_global_ctors+0x10>
     74c:	21 97       	sbiw	r28, 0x01	; 1
     74e:	fe 01       	movw	r30, r28
     750:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <__tablejump2__>
     754:	c5 38       	cpi	r28, 0x85	; 133
     756:	d1 07       	cpc	r29, r17
     758:	c9 f7       	brne	.-14     	; 0x74c <__do_global_ctors+0x8>
     75a:	0e 94 b4 1b 	call	0x3768	; 0x3768 <main>
     75e:	0c 94 ef 31 	jmp	0x63de	; 0x63de <__do_global_dtors>

00000762 <__bad_interrupt>:
     762:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000766 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	00 d0       	rcall	.+0      	; 0x76c <_ZN10GpsManagerC1Eh+0x6>
     76c:	1f 92       	push	r1
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	9a 83       	std	Y+2, r25	; 0x02
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <_ZN13Adafruit_FONAC1Ea>
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	86 5e       	subi	r24, 0xE6	; 230
     788:	9e 4f       	sbci	r25, 0xFE	; 254
     78a:	2b 81       	ldd	r18, Y+3	; 0x03
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
{
}
     790:	00 00       	nop
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <_ZN10GpsManagerD1Ev+0x6>
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	00 00       	nop
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	7c 83       	std	Y+4, r23	; 0x04
     7ca:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	2b 81       	ldd	r18, Y+3	; 0x03
     7d2:	3c 81       	ldd	r19, Y+4	; 0x04
     7d4:	b9 01       	movw	r22, r18
     7d6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN13Adafruit_FONAaSERKS_>
}
     7da:	00 00       	nop
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <_ZN10GpsManager9toggleGpsEb+0x6>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <_ZN10GpsManager9toggleGpsEb+0x8>
     7f2:	1f 92       	push	r1
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	9c 83       	std	Y+4, r25	; 0x04
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	86 5e       	subi	r24, 0xE6	; 230
     804:	9e 4f       	sbci	r25, 0xFE	; 254
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	88 23       	and	r24, r24
     80c:	11 f0       	breq	.+4      	; 0x812 <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	04 c0       	rjmp	.+8      	; 0x81a <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     812:	8f e9       	ldi	r24, 0x9F	; 159
     814:	96 e8       	ldi	r25, 0x86	; 134
     816:	9a 83       	std	Y+2, r25	; 0x02
     818:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <_ZN10GpsManager9gpsStatusEv+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     838:	00 00       	nop
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x12>
     856:	00 d0       	rcall	.+0      	; 0x858 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x14>
     858:	00 d0       	rcall	.+0      	; 0x85a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x16>
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	8b 83       	std	Y+3, r24	; 0x03
     862:	7e 83       	std	Y+6, r23	; 0x06
     864:	6d 83       	std	Y+5, r22	; 0x05

	if (_isMock)
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	86 5e       	subi	r24, 0xE6	; 230
     86c:	9e 4f       	sbci	r25, 0xFE	; 254
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	88 23       	and	r24, r24
     874:	09 f4       	brne	.+2      	; 0x878 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x34>
     876:	48 c0       	rjmp	.+144    	; 0x908 <__stack+0x9>
	{
		info.altitude = 10;
     878:	2d 81       	ldd	r18, Y+5	; 0x05
     87a:	3e 81       	ldd	r19, Y+6	; 0x06
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a0 e2       	ldi	r26, 0x20	; 32
     882:	b1 e4       	ldi	r27, 0x41	; 65
     884:	f9 01       	movw	r30, r18
     886:	82 8b       	std	Z+18, r24	; 0x12
     888:	93 8b       	std	Z+19, r25	; 0x13
     88a:	a4 8b       	std	Z+20, r26	; 0x14
     88c:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	9e 81       	ldd	r25, Y+6	; 0x06
     892:	46 96       	adiw	r24, 0x16	; 22
     894:	2f e0       	ldi	r18, 0x0F	; 15
     896:	ee e1       	ldi	r30, 0x1E	; 30
     898:	f1 e0       	ldi	r31, 0x01	; 1
     89a:	dc 01       	movw	r26, r24
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	2a 95       	dec	r18
     8a2:	e1 f7       	brne	.-8      	; 0x89c <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x58>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	9e 81       	ldd	r25, Y+6	; 0x06
     8a8:	2e e1       	ldi	r18, 0x1E	; 30
     8aa:	fc 01       	movw	r30, r24
     8ac:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     8ae:	2d 81       	ldd	r18, Y+5	; 0x05
     8b0:	3e 81       	ldd	r19, Y+6	; 0x06
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	a0 e2       	ldi	r26, 0x20	; 32
     8b8:	b2 e4       	ldi	r27, 0x42	; 66
     8ba:	f9 01       	movw	r30, r18
     8bc:	86 87       	std	Z+14, r24	; 0x0e
     8be:	97 87       	std	Z+15, r25	; 0x0f
     8c0:	a0 8b       	std	Z+16, r26	; 0x10
     8c2:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     8c4:	2d 81       	ldd	r18, Y+5	; 0x05
     8c6:	3e 81       	ldd	r19, Y+6	; 0x06
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	a8 e4       	ldi	r26, 0x48	; 72
     8ce:	b2 e4       	ldi	r27, 0x42	; 66
     8d0:	f9 01       	movw	r30, r18
     8d2:	82 83       	std	Z+2, r24	; 0x02
     8d4:	93 83       	std	Z+3, r25	; 0x03
     8d6:	a4 83       	std	Z+4, r26	; 0x04
     8d8:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     8da:	2d 81       	ldd	r18, Y+5	; 0x05
     8dc:	3e 81       	ldd	r19, Y+6	; 0x06
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e7       	ldi	r26, 0x70	; 112
     8e4:	b2 e4       	ldi	r27, 0x42	; 66
     8e6:	f9 01       	movw	r30, r18
     8e8:	86 83       	std	Z+6, r24	; 0x06
     8ea:	97 83       	std	Z+7, r25	; 0x07
     8ec:	a0 87       	std	Z+8, r26	; 0x08
     8ee:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     8f0:	2d 81       	ldd	r18, Y+5	; 0x05
     8f2:	3e 81       	ldd	r19, Y+6	; 0x06
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	ac e8       	ldi	r26, 0x8C	; 140
     8fa:	b2 e4       	ldi	r27, 0x42	; 66
     8fc:	f9 01       	movw	r30, r18
     8fe:	82 87       	std	Z+10, r24	; 0x0a
     900:	93 87       	std	Z+11, r25	; 0x0b
     902:	a4 87       	std	Z+12, r26	; 0x0c
     904:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     906:	42 c0       	rjmp	.+132    	; 0x98c <__stack+0x8d>
	}

	int8_t gpsStatus = fona.GPSstatus();
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	0e 94 ce 21 	call	0x439c	; 0x439c <_ZN13Adafruit_FONA9GPSstatusEv>
     910:	89 83       	std	Y+1, r24	; 0x01
	
	//Store the status regardless
	info.gpsStatus = gpsStatus;
     912:	8d 81       	ldd	r24, Y+5	; 0x05
     914:	9e 81       	ldd	r25, Y+6	; 0x06
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	fc 01       	movw	r30, r24
     91a:	21 83       	std	Z+1, r18	; 0x01
	
	// we need at least a 2D fix
	if (gpsStatus < 2) {
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	34 f4       	brge	.+12     	; 0x92e <__stack+0x2f>
		info.errorCode = ERR_GPS_NO_FIX;
     922:	8d 81       	ldd	r24, Y+5	; 0x05
     924:	9e 81       	ldd	r25, Y+6	; 0x06
     926:	2a e0       	ldi	r18, 0x0A	; 10
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
		return;
     92c:	2f c0       	rjmp	.+94     	; 0x98c <__stack+0x8d>
	}

	//We know the date won't be >20 from it's format
	boolean success = fona.getGPS(&info.lat, &info.lon, 
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	9e 81       	ldd	r25, Y+6	; 0x06
     932:	8c 01       	movw	r16, r24
     934:	0a 5e       	subi	r16, 0xEA	; 234
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	8d 81       	ldd	r24, Y+5	; 0x05
     93a:	9e 81       	ldd	r25, Y+6	; 0x06
     93c:	dc 01       	movw	r26, r24
     93e:	52 96       	adiw	r26, 0x12	; 18
     940:	8d 81       	ldd	r24, Y+5	; 0x05
     942:	9e 81       	ldd	r25, Y+6	; 0x06
     944:	fc 01       	movw	r30, r24
     946:	3e 96       	adiw	r30, 0x0e	; 14
     948:	8d 81       	ldd	r24, Y+5	; 0x05
     94a:	9e 81       	ldd	r25, Y+6	; 0x06
     94c:	9c 01       	movw	r18, r24
     94e:	26 5f       	subi	r18, 0xF6	; 246
     950:	3f 4f       	sbci	r19, 0xFF	; 255
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	ac 01       	movw	r20, r24
     958:	4a 5f       	subi	r20, 0xFA	; 250
     95a:	5f 4f       	sbci	r21, 0xFF	; 255
     95c:	8d 81       	ldd	r24, Y+5	; 0x05
     95e:	9e 81       	ldd	r25, Y+6	; 0x06
     960:	bc 01       	movw	r22, r24
     962:	6e 5f       	subi	r22, 0xFE	; 254
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	8b 81       	ldd	r24, Y+3	; 0x03
     968:	9c 81       	ldd	r25, Y+4	; 0x04
		&info.speed_kph, &info.heading, &info.altitude, (char*)info.date);
     96a:	68 01       	movw	r12, r16
     96c:	7d 01       	movw	r14, r26
     96e:	8f 01       	movw	r16, r30
     970:	0e 94 42 22 	call	0x4484	; 0x4484 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>
     974:	8a 83       	std	Y+2, r24	; 0x02

	// make sure we have a response
	if (!success){
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	89 27       	eor	r24, r25
     97c:	88 23       	and	r24, r24
     97e:	31 f0       	breq	.+12     	; 0x98c <__stack+0x8d>
		info.errorCode = ERR_GPS_BAD_FIELD;
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	2c e0       	ldi	r18, 0x0C	; 12
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
		return;
     98a:	00 00       	nop
	}
}
     98c:	26 96       	adiw	r28, 0x06	; 6
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	08 95       	ret

000009aa <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <_ZN10GsmManagerC1Eh+0x6>
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	9a 83       	std	Y+2, r25	; 0x02
     9b8:	89 83       	std	Y+1, r24	; 0x01
     9ba:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	2b 81       	ldd	r18, Y+3	; 0x03
     9c2:	fc 01       	movw	r30, r24
     9c4:	24 83       	std	Z+4, r18	; 0x04
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	05 96       	adiw	r24, 0x05	; 5
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <_ZN13Adafruit_FONAC1Ea>
{
}
     9d2:	00 00       	nop
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <_ZN10GsmManagerD1Ev+0x6>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	00 00       	nop
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     a00:	00 d0       	rcall	.+0      	; 0xa02 <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	7c 83       	std	Y+4, r23	; 0x04
     a0c:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	05 96       	adiw	r24, 0x05	; 5
     a14:	2b 81       	ldd	r18, Y+3	; 0x03
     a16:	3c 81       	ldd	r19, Y+4	; 0x04
     a18:	b9 01       	movw	r22, r18
     a1a:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN13Adafruit_FONAaSERKS_>
}
     a1e:	00 00       	nop
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	00 d0       	rcall	.+0      	; 0xa34 <_ZN10GsmManager5resetEv+0x6>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	fc 01       	movw	r30, r24
     a42:	11 82       	std	Z+1, r1	; 0x01
     a44:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	fc 01       	movw	r30, r24
     a4c:	13 82       	std	Z+3, r1	; 0x03
     a4e:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     a50:	00 00       	nop
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <_ZN10GsmManager5beginEv+0xa>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	fc 01       	movw	r30, r24
     a74:	94 81       	ldd	r25, Z+4	; 0x04
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	99 23       	and	r25, r25
     a7a:	09 f4       	brne	.+2      	; 0xa7e <_ZN10GsmManager5beginEv+0x22>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	88 23       	and	r24, r24
     a80:	11 f0       	breq	.+4      	; 0xa86 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	2d c0       	rjmp	.+90     	; 0xae0 <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     a86:	8f e1       	ldi	r24, 0x1F	; 31
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_Znwj>
     a8e:	8c 01       	movw	r16, r24
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	42 e0       	ldi	r20, 0x02	; 2
     a94:	63 e0       	ldi	r22, 0x03	; 3
     a96:	c8 01       	movw	r24, r16
     a98:	0e 94 ba 2b 	call	0x5774	; 0x5774 <_ZN14SoftwareSerialC1Ehhb>
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	81 5e       	subi	r24, 0xE1	; 225
     aa2:	9e 4f       	sbci	r25, 0xFE	; 254
     aa4:	fc 01       	movw	r30, r24
     aa6:	11 83       	std	Z+1, r17	; 0x01
     aa8:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	81 5e       	subi	r24, 0xE1	; 225
     ab0:	9e 4f       	sbci	r25, 0xFE	; 254
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	40 ec       	ldi	r20, 0xC0	; 192
     aba:	52 e1       	ldi	r21, 0x12	; 18
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	81 5e       	subi	r24, 0xE1	; 225
     aca:	9e 4f       	sbci	r25, 0xFE	; 254
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	9c 01       	movw	r18, r24
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	05 96       	adiw	r24, 0x05	; 5
     ada:	b9 01       	movw	r22, r18
     adc:	0e 94 e7 23 	call	0x47ce	; 0x47ce <_ZN13Adafruit_FONA5beginER6Stream>
}
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <_ZN10GsmManager14getBattPercentEPj+0x6>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <_ZN10GsmManager14getBattPercentEPj+0x8>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	7c 83       	std	Y+4, r23	; 0x04
     b00:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	fc 01       	movw	r30, r24
     b08:	94 81       	ldd	r25, Z+4	; 0x04
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	99 23       	and	r25, r25
     b0e:	09 f4       	brne	.+2      	; 0xb12 <_ZN10GsmManager14getBattPercentEPj+0x24>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	88 23       	and	r24, r24
     b14:	49 f0       	breq	.+18     	; 0xb28 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	23 e6       	ldi	r18, 0x63	; 99
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	31 83       	std	Z+1, r19	; 0x01
     b22:	20 83       	st	Z, r18
		return true;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	05 96       	adiw	r24, 0x05	; 5
     b2e:	2b 81       	ldd	r18, Y+3	; 0x03
     b30:	3c 81       	ldd	r19, Y+4	; 0x04
     b32:	b9 01       	movw	r22, r18
     b34:	0e 94 c1 29 	call	0x5382	; 0x5382 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9f 8b       	std	Y+23, r25	; 0x17
     b5c:	8e 8b       	std	Y+22, r24	; 0x16
     b5e:	79 8f       	std	Y+25, r23	; 0x19
     b60:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     b62:	8e 89       	ldd	r24, Y+22	; 0x16
     b64:	9f 89       	ldd	r25, Y+23	; 0x17
     b66:	fc 01       	movw	r30, r24
     b68:	94 81       	ldd	r25, Z+4	; 0x04
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	99 23       	and	r25, r25
     b6e:	09 f4       	brne	.+2      	; 0xb72 <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	88 23       	and	r24, r24
     b74:	11 f0       	breq	.+4      	; 0xb7a <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	26 c0       	rjmp	.+76     	; 0xbc6 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     b7a:	2e e0       	ldi	r18, 0x0E	; 14
     b7c:	eb e3       	ldi	r30, 0x3B	; 59
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	dc 01       	movw	r26, r24
     b86:	01 90       	ld	r0, Z+
     b88:	0d 92       	st	X+, r0
     b8a:	2a 95       	dec	r18
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     b8e:	27 e0       	ldi	r18, 0x07	; 7
     b90:	ce 01       	movw	r24, r28
     b92:	0f 96       	adiw	r24, 0x0f	; 15
     b94:	fc 01       	movw	r30, r24
     b96:	32 2f       	mov	r19, r18
     b98:	11 92       	st	Z+, r1
     b9a:	3a 95       	dec	r19
     b9c:	e9 f7       	brne	.-6      	; 0xb98 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     b9e:	8e 89       	ldd	r24, Y+22	; 0x16
     ba0:	9f 89       	ldd	r25, Y+23	; 0x17
     ba2:	05 96       	adiw	r24, 0x05	; 5
     ba4:	28 8d       	ldd	r18, Y+24	; 0x18
     ba6:	39 8d       	ldd	r19, Y+25	; 0x19
     ba8:	a9 01       	movw	r20, r18
     baa:	9e 01       	movw	r18, r28
     bac:	2f 5f       	subi	r18, 0xFF	; 255
     bae:	3f 4f       	sbci	r19, 0xFF	; 255
     bb0:	b9 01       	movw	r22, r18
     bb2:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     bb6:	98 2f       	mov	r25, r24
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	89 27       	eor	r24, r25
     bbc:	88 23       	and	r24, r24
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     bc6:	69 96       	adiw	r28, 0x19	; 25
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	00 d0       	rcall	.+0      	; 0xbde <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	7c 83       	std	Y+4, r23	; 0x04
     bea:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus();
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN10GsmManager16getNetworkStatusEv>
     bf4:	28 2f       	mov	r18, r24
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	fc 01       	movw	r30, r24
     bfc:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN10GsmManager7getRSSIEv>
     c06:	28 2f       	mov	r18, r24
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	fc 01       	movw	r30, r24
     c0e:	21 83       	std	Z+1, r18	; 0x01
}
     c10:	00 00       	nop
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	fc 01       	movw	r30, r24
     c34:	94 81       	ldd	r25, Z+4	; 0x04
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	99 23       	and	r25, r25
     c3a:	09 f4       	brne	.+2      	; 0xc3e <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	88 23       	and	r24, r24
     c40:	11 f0       	breq	.+4      	; 0xc46 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	05 96       	adiw	r24, 0x05	; 5
     c4c:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <_ZN10GsmManager7getRSSIEv+0x6>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	fc 01       	movw	r30, r24
     c6e:	94 81       	ldd	r25, Z+4	; 0x04
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	99 23       	and	r25, r25
     c74:	09 f4       	brne	.+2      	; 0xc78 <_ZN10GsmManager7getRSSIEv+0x1e>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	88 23       	and	r24, r24
     c7a:	11 f0       	breq	.+4      	; 0xc80 <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     c7c:	85 e1       	ldi	r24, 0x15	; 21
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	05 96       	adiw	r24, 0x05	; 5
     c86:	0e 94 ef 29 	call	0x53de	; 0x53de <_ZN13Adafruit_FONA7getRSSIEv>
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <_ZN10GsmManager10enableGPRSEb+0x6>
     c9a:	1f 92       	push	r1
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	05 96       	adiw	r24, 0x05	; 5
     cac:	6b 81       	ldd	r22, Y+3	; 0x03
     cae:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <_ZN13Adafruit_FONA10enableGPRSEb>
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	2e 97       	sbiw	r28, 0x0e	; 14
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
     ce2:	7e 87       	std	Y+14, r23	; 0x0e
     ce4:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     ce6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cea:	fc 01       	movw	r30, r24
     cec:	94 81       	ldd	r25, Z+4	; 0x04
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	99 23       	and	r25, r25
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	88 23       	and	r24, r24
     cf8:	19 f0       	breq	.+6      	; 0xd00 <_ZN10GsmManager11sendViaGprsEPKc+0x42>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	99 c0       	rjmp	.+306    	; 0xe32 <_ZN10GsmManager11sendViaGprsEPKc+0x174>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);

	uint16_t ret = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/r.php"; //TODO: check should not require https!
     d08:	80 e5       	ldi	r24, 0x50	; 80
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	9d 83       	std	Y+5, r25	; 0x05
     d0e:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strlen>
     d18:	8c 01       	movw	r16, r24
     d1a:	45 e9       	ldi	r20, 0x95	; 149
     d1c:	52 e0       	ldi	r21, 0x02	; 2
     d1e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d20:	9c 85       	ldd	r25, Y+12	; 0x0c
     d22:	05 96       	adiw	r24, 0x05	; 5
     d24:	de 01       	movw	r26, r28
     d26:	19 96       	adiw	r26, 0x09	; 9
     d28:	fe 01       	movw	r30, r28
     d2a:	37 96       	adiw	r30, 0x07	; 7
     d2c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d30:	6c 81       	ldd	r22, Y+4	; 0x04
     d32:	7d 81       	ldd	r23, Y+5	; 0x05
     d34:	6d 01       	movw	r12, r26
     d36:	7f 01       	movw	r14, r30
     d38:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     d3c:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	89 27       	eor	r24, r25
     d44:	88 23       	and	r24, r24
     d46:	11 f1       	breq	.+68     	; 0xd8c <_ZN10GsmManager11sendViaGprsEPKc+0xce>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     d48:	20 ea       	ldi	r18, 0xA0	; 160
     d4a:	32 e0       	ldi	r19, 0x02	; 2
     d4c:	41 ea       	ldi	r20, 0xA1	; 161
     d4e:	52 e0       	ldi	r21, 0x02	; 2
     d50:	62 ea       	ldi	r22, 0xA2	; 162
     d52:	72 e0       	ldi	r23, 0x02	; 2
     d54:	8b 85       	ldd	r24, Y+11	; 0x0b
     d56:	9c 85       	ldd	r25, Y+12	; 0x0c
     d58:	05 96       	adiw	r24, 0x05	; 5
     d5a:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d60:	9e 85       	ldd	r25, Y+14	; 0x0e
     d62:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strlen>
     d66:	8c 01       	movw	r16, r24
     d68:	4d ea       	ldi	r20, 0xAD	; 173
     d6a:	52 e0       	ldi	r21, 0x02	; 2
     d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d70:	05 96       	adiw	r24, 0x05	; 5
     d72:	de 01       	movw	r26, r28
     d74:	19 96       	adiw	r26, 0x09	; 9
     d76:	fe 01       	movw	r30, r28
     d78:	37 96       	adiw	r30, 0x07	; 7
     d7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d7e:	6c 81       	ldd	r22, Y+4	; 0x04
     d80:	7d 81       	ldd	r23, Y+5	; 0x05
     d82:	6d 01       	movw	r12, r26
     d84:	7f 01       	movw	r14, r30
     d86:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     d8a:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	89 27       	eor	r24, r25
     d92:	88 23       	and	r24, r24
     d94:	29 f0       	breq	.+10     	; 0xda0 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
	{
		ret = 999;
     d96:	87 ee       	ldi	r24, 0xE7	; 231
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	47 c0       	rjmp	.+142    	; 0xe2e <_ZN10GsmManager11sendViaGprsEPKc+0x170>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	18 16       	cp	r1, r24
     da6:	19 06       	cpc	r1, r25
     da8:	8c f5       	brge	.+98     	; 0xe0c <_ZN10GsmManager11sendViaGprsEPKc+0x14e>
			while (fona.available()) {
     daa:	8b 85       	ldd	r24, Y+11	; 0x0b
     dac:	9c 85       	ldd	r25, Y+12	; 0x0c
     dae:	05 96       	adiw	r24, 0x05	; 5
     db0:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_ZN13Adafruit_FONA9availableEv>
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	89 2b       	or	r24, r25
     db8:	09 f4       	brne	.+2      	; 0xdbc <_ZN10GsmManager11sendViaGprsEPKc+0xfe>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	22 23       	and	r18, r18
     dbe:	81 f3       	breq	.-32     	; 0xda0 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
				char c = fona.read();
     dc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc4:	05 96       	adiw	r24, 0x05	; 5
     dc6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN13Adafruit_FONA4readEv>
     dca:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     dcc:	80 ec       	ldi	r24, 0xC0	; 192
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	80 72       	andi	r24, 0x20	; 32
     dda:	99 27       	eor	r25, r25
     ddc:	21 e0       	ldi	r18, 0x01	; 1
     dde:	89 2b       	or	r24, r25
     de0:	09 f0       	breq	.+2      	; 0xde4 <_ZN10GsmManager11sendViaGprsEPKc+0x126>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	22 23       	and	r18, r18
     de6:	09 f0       	breq	.+2      	; 0xdea <_ZN10GsmManager11sendViaGprsEPKc+0x12c>
     de8:	f1 cf       	rjmp	.-30     	; 0xdcc <_ZN10GsmManager11sendViaGprsEPKc+0x10e>
				UDR0 = c;
     dea:	86 ec       	ldi	r24, 0xC6	; 198
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	2e 81       	ldd	r18, Y+6	; 0x06
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
					                                                      
				length--;
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	9a 87       	std	Y+10, r25	; 0x0a
     dfc:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	89 2b       	or	r24, r25
     e04:	09 f0       	breq	.+2      	; 0xe08 <_ZN10GsmManager11sendViaGprsEPKc+0x14a>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     e06:	d1 cf       	rjmp	.-94     	; 0xdaa <_ZN10GsmManager11sendViaGprsEPKc+0xec>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     e08:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     e0a:	ca cf       	rjmp	.-108    	; 0xda0 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     e0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e10:	05 96       	adiw	r24, 0x05	; 5
     e12:	0e 94 81 25 	call	0x4b02	; 0x4b02 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	88 3c       	cpi	r24, 0xC8	; 200
     e1c:	91 05       	cpc	r25, r1
     e1e:	19 f0       	breq	.+6      	; 0xe26 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
     e22:	98 85       	ldd	r25, Y+8	; 0x08
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <_ZN10GsmManager11sendViaGprsEPKc+0x16c>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e32:	2e 96       	adiw	r28, 0x0e	; 14
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	08 95       	ret

00000e50 <setup>:
void printData();
void initSubsystems();

uint8_t _behaviour = SYS_BEHAVIOUR::DoNothing;

void setup() {
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	00 d0       	rcall	.+0      	; 0xe56 <setup+0x6>
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);


	//Must immediately run as this pin in LOW switches off the system
	pinMode(PIN_SHUTDOWN, OUTPUT);
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	85 e0       	ldi	r24, 0x05	; 5
     e5e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <pinMode>
	digitalWrite(PIN_SHUTDOWN, HIGH);
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	85 e0       	ldi	r24, 0x05	; 5
     e66:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>

	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
     e6a:	68 eb       	ldi	r22, 0xB8	; 184
     e6c:	7b e0       	ldi	r23, 0x0B	; 11
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
	
	//Turn off redundant Arduino board notification LED controlled by pin 13
	pinMode(13, OUTPUT);
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	8d e0       	ldi	r24, 0x0D	; 13
     e7a:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <pinMode>
	
	#ifdef OUTPUT_DEBUG
		Serial.begin(9600); //Writes to Serial output
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	55 e2       	ldi	r21, 0x25	; 37
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	86 ed       	ldi	r24, 0xD6	; 214
     e88:	97 e0       	ldi	r25, 0x07	; 7
     e8a:	0e 94 11 19 	call	0x3222	; 0x3222 <_ZN14HardwareSerial5beginEm>
	#endif
	
	RM_LOGLN(F("Starting..."));
     e8e:	88 eb       	ldi	r24, 0xB8	; 184
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	bc 01       	movw	r22, r24
     e94:	86 ed       	ldi	r24, 0xD6	; 214
     e96:	97 e0       	ldi	r25, 0x07	; 7
     e98:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	initSubsystems();
     e9c:	0e 94 a2 07 	call	0xf44	; 0xf44 <_Z14initSubsystemsv>

	uint16_t currBootCount;
	if (INITIALISE_MODULE) {
     ea0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <__data_end>
     ea4:	88 23       	and	r24, r24
     ea6:	39 f0       	breq	.+14     	; 0xeb6 <setup+0x66>
		initModule(INIT_MODULE_ID);
     ea8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <INIT_MODULE_ID>
     eac:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_Z10initModuleh>
		currBootCount = 0;
     eb0:	1a 82       	std	Y+2, r1	; 0x02
     eb2:	19 82       	std	Y+1, r1	; 0x01
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <setup+0x72>
	} else {
		currBootCount = mem.incrementBootCount();
     eb6:	89 ec       	ldi	r24, 0xC9	; 201
     eb8:	94 e0       	ldi	r25, 0x04	; 4
     eba:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN12RmMemManager18incrementBootCountEv>
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	RM_LOG2(F("Boot Count Is Now"), currBootCount);
     ec2:	84 ec       	ldi	r24, 0xC4	; 196
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	bc 01       	movw	r22, r24
     ec8:	86 ed       	ldi	r24, 0xD6	; 214
     eca:	97 e0       	ldi	r25, 0x07	; 7
     ecc:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
     ed0:	6f e7       	ldi	r22, 0x7F	; 127
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	86 ed       	ldi	r24, 0xD6	; 214
     ed6:	97 e0       	ldi	r25, 0x07	; 7
     ed8:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	4a e0       	ldi	r20, 0x0A	; 10
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	bc 01       	movw	r22, r24
     ee6:	86 ed       	ldi	r24, 0xD6	; 214
     ee8:	97 e0       	ldi	r25, 0x07	; 7
     eea:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
		//TODO !!
		
		return;
	}
	
	if (IS_MEM_TEST) {
     eee:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <IS_MEM_TEST>
     ef2:	88 23       	and	r24, r24
     ef4:	29 f0       	breq	.+10     	; 0xf00 <setup+0xb0>
		mem.verifyEepRom();
     ef6:	89 ec       	ldi	r24, 0xC9	; 201
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN12RmMemManager12verifyEepRomEv>
		return;
     efe:	1d c0       	rjmp	.+58     	; 0xf3a <setup+0xea>
	}
	
	if (ONLY_PRINT_DATA) {
     f00:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <ONLY_PRINT_DATA>
     f04:	88 23       	and	r24, r24
     f06:	29 f0       	breq	.+10     	; 0xf12 <setup+0xc2>
		mem.printData();
     f08:	89 ec       	ldi	r24, 0xC9	; 201
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN12RmMemManager9printDataEv>
		return;
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <setup+0xea>
	}
	
	//Take reading every 5 hours so it's a scattered time reading throughout the week
	_behaviour |= SYS_BEHAVIOUR::TakeReadings;
     f12:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
     f16:	81 60       	ori	r24, 0x01	; 1
     f18:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <_behaviour>
	
	//Send to HQ every 20 hours so it's 
	if (currBootCount > 0 && currBootCount%4 == 0) { //TODO: Overflow?
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	89 2b       	or	r24, r25
     f22:	59 f0       	breq	.+22     	; 0xf3a <setup+0xea>
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	83 70       	andi	r24, 0x03	; 3
     f2a:	99 27       	eor	r25, r25
     f2c:	89 2b       	or	r24, r25
     f2e:	29 f4       	brne	.+10     	; 0xf3a <setup+0xea>
		
		_behaviour |= SYS_BEHAVIOUR::SendData;
     f30:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <_behaviour>
	}
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <_Z14initSubsystemsv>:

void initSubsystems() {
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62

	gps.setFona(fona);
     f4c:	6f ea       	ldi	r22, 0xAF	; 175
     f4e:	73 e0       	ldi	r23, 0x03	; 3
     f50:	8a ec       	ldi	r24, 0xCA	; 202
     f52:	94 e0       	ldi	r25, 0x04	; 4
     f54:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
     f58:	6f ea       	ldi	r22, 0xAF	; 175
     f5a:	73 e0       	ldi	r23, 0x03	; 3
     f5c:	85 ee       	ldi	r24, 0xE5	; 229
     f5e:	95 e0       	ldi	r25, 0x05	; 5
     f60:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (!gsm.begin()) {
     f64:	85 ee       	ldi	r24, 0xE5	; 229
     f66:	95 e0       	ldi	r25, 0x05	; 5
     f68:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN10GsmManager5beginEv>
     f6c:	98 2f       	mov	r25, r24
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 27       	eor	r24, r25
     f72:	88 23       	and	r24, r24
     f74:	31 f4       	brne	.+12     	; 0xf82 <_Z14initSubsystemsv+0x3e>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)){
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	8a ec       	ldi	r24, 0xCA	; 202
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN10GpsManager9toggleGpsEb>
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <_Z14initSubsystemsv+0x40>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
     f82:	00 00       	nop
	if (!gps.toggleGps(true)){
	
		//TODO: store in ROM
		return;
	}
}
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <_Z10initModuleh>:

void initModule(uint8_t moduleId) {
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	1f 92       	push	r1
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	
	mem.initialiseModule(moduleId);
     f96:	69 81       	ldd	r22, Y+1	; 0x01
     f98:	89 ec       	ldi	r24, 0xC9	; 201
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12RmMemManager16initialiseModuleEh>

	RM_LOG2("Initialised with id ", moduleId);
     fa0:	61 e8       	ldi	r22, 0x81	; 129
     fa2:	71 e0       	ldi	r23, 0x01	; 1
     fa4:	86 ed       	ldi	r24, 0xD6	; 214
     fa6:	97 e0       	ldi	r25, 0x07	; 7
     fa8:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
     fac:	6f e7       	ldi	r22, 0x7F	; 127
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	86 ed       	ldi	r24, 0xD6	; 214
     fb2:	97 e0       	ldi	r25, 0x07	; 7
     fb4:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
     fb8:	4a e0       	ldi	r20, 0x0A	; 10
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	69 81       	ldd	r22, Y+1	; 0x01
     fbe:	86 ed       	ldi	r24, 0xD6	; 214
     fc0:	97 e0       	ldi	r25, 0x07	; 7
     fc2:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN5Print7printlnEhi>
}
     fc6:	00 00       	nop
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <_Z15switchOffSystemv>:

void switchOffSystem() {
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN("Switching off...");
     fd8:	66 e9       	ldi	r22, 0x96	; 150
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	86 ed       	ldi	r24, 0xD6	; 214
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
	
	digitalWrite(PIN_SHUTDOWN, LOW);
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
	
	delay(3000); //To allow serial to purge the shutdown message
     fec:	68 eb       	ldi	r22, 0xB8	; 184
     fee:	7b e0       	ldi	r23, 0x0B	; 11
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
}
     ff8:	00 00       	nop
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite) {
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	1f 92       	push	r1
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	89 83       	std	Y+1, r24	; 0x01
	//
	////gsm.sendViaSms(sm.c_str()); //TO: local number !
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
    100c:	00 00       	nop
    100e:	0f 90       	pop	r0
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <_Z12takeReadingsv>:

boolean takeReadings() {
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	2a 97       	sbiw	r28, 0x0a	; 10
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN("Taking reading...");
    102a:	67 ea       	ldi	r22, 0xA7	; 167
    102c:	71 e0       	ldi	r23, 0x01	; 1
    102e:	86 ed       	ldi	r24, 0xD6	; 214
    1030:	97 e0       	ldi	r25, 0x07	; 7
    1032:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
	
	SensorData sd = sensorMgr.readData();
    1036:	66 e0       	ldi	r22, 0x06	; 6
    1038:	77 e0       	ldi	r23, 0x07	; 7
    103a:	ce 01       	movw	r24, r28
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13SensorManager8readDataEv>
	
	return true;
    1042:	81 e0       	ldi	r24, 0x01	; 1
}
    1044:	2a 96       	adiw	r28, 0x0a	; 10
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <_Z8sendDatav>:

boolean sendData() {
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN("Sending data...");
    105e:	69 eb       	ldi	r22, 0xB9	; 185
    1060:	71 e0       	ldi	r23, 0x01	; 1
    1062:	86 ed       	ldi	r24, 0xD6	; 214
    1064:	97 e0       	ldi	r25, 0x07	; 7
    1066:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
	return false;
    106a:	80 e0       	ldi	r24, 0x00	; 0
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62

	delay(1000);
    107a:	68 ee       	ldi	r22, 0xE8	; 232
    107c:	73 e0       	ldi	r23, 0x03	; 3
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
	++_timerCounter;
    1086:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <_timerCounter>
    108a:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <_timerCounter+0x1>
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <_timerCounter+0x1>
    1094:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <_timerCounter>

	RM_LOG2(F("Behaviour is "), _behaviour);
    1098:	86 ed       	ldi	r24, 0xD6	; 214
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	bc 01       	movw	r22, r24
    109e:	86 ed       	ldi	r24, 0xD6	; 214
    10a0:	97 e0       	ldi	r25, 0x07	; 7
    10a2:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    10a6:	6f e7       	ldi	r22, 0x7F	; 127
    10a8:	71 e0       	ldi	r23, 0x01	; 1
    10aa:	86 ed       	ldi	r24, 0xD6	; 214
    10ac:	97 e0       	ldi	r25, 0x07	; 7
    10ae:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    10b2:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
    10b6:	4a e0       	ldi	r20, 0x0A	; 10
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	68 2f       	mov	r22, r24
    10bc:	86 ed       	ldi	r24, 0xD6	; 214
    10be:	97 e0       	ldi	r25, 0x07	; 7
    10c0:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    10c4:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	99 27       	eor	r25, r25
    10d0:	89 2b       	or	r24, r25
    10d2:	49 f0       	breq	.+18     	; 0x10e6 <loop+0x74>
		
		if (takeReadings())
    10d4:	0e 94 0b 08 	call	0x1016	; 0x1016 <_Z12takeReadingsv>
    10d8:	88 23       	and	r24, r24
    10da:	29 f0       	breq	.+10     	; 0x10e6 <loop+0x74>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    10dc:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
    10e0:	8e 7f       	andi	r24, 0xFE	; 254
    10e2:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    10e6:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	82 70       	andi	r24, 0x02	; 2
    10f0:	99 27       	eor	r25, r25
    10f2:	89 2b       	or	r24, r25
    10f4:	49 f0       	breq	.+18     	; 0x1108 <loop+0x96>
		
		if (sendData())
    10f6:	0e 94 2b 08 	call	0x1056	; 0x1056 <_Z8sendDatav>
    10fa:	88 23       	and	r24, r24
    10fc:	29 f0       	breq	.+10     	; 0x1108 <loop+0x96>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    10fe:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
    1102:	8d 7f       	andi	r24, 0xFD	; 253
    1104:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1108:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_behaviour>
    110c:	88 23       	and	r24, r24
    110e:	11 f4       	brne	.+4      	; 0x1114 <loop+0xa2>
		
		switchOffSystem();
    1110:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_Z15switchOffSystemv>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    1114:	00 00       	nop
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <_Z41__static_initialization_and_destruction_0ii>:
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	7c 83       	std	Y+4, r23	; 0x04
    112e:	6b 83       	std	Y+3, r22	; 0x03
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	09 f5       	brne	.+66     	; 0x117a <_Z41__static_initialization_and_destruction_0ii+0x5e>
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	e9 f4       	brne	.+58     	; 0x117a <_Z41__static_initialization_and_destruction_0ii+0x5e>
#include "RmMemManager.h"
#include "SensorManager.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    1140:	64 e0       	ldi	r22, 0x04	; 4
    1142:	8f ea       	ldi	r24, 0xAF	; 175
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <_ZN13Adafruit_FONAC1Ea>
RmMemManager mem(false);
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	89 ec       	ldi	r24, 0xC9	; 201
    114e:	94 e0       	ldi	r25, 0x04	; 4
    1150:	0e 94 ef 08 	call	0x11de	; 0x11de <_ZN12RmMemManagerC1Eb>
GpsManager gps(IS_GPS_MOCK);
    1154:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <IS_GPS_MOCK>
    1158:	68 2f       	mov	r22, r24
    115a:	8a ec       	ldi	r24, 0xCA	; 202
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN10GpsManagerC1Eh>
GsmManager gsm(IS_GSM_MOCK);
    1162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <IS_GSM_MOCK>
    1166:	68 2f       	mov	r22, r24
    1168:	85 ee       	ldi	r24, 0xE5	; 229
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN10GsmManagerC1Eh>
SensorManager sensorMgr(true);
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	97 e0       	ldi	r25, 0x07	; 7
    1176:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN13SensorManagerC1Eb>
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	89 2b       	or	r24, r25
    1180:	61 f4       	brne	.+24     	; 0x119a <_Z41__static_initialization_and_destruction_0ii+0x7e>
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	41 f4       	brne	.+16     	; 0x119a <_Z41__static_initialization_and_destruction_0ii+0x7e>

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem(false);
GpsManager gps(IS_GPS_MOCK);
GsmManager gsm(IS_GSM_MOCK);
    118a:	85 ee       	ldi	r24, 0xE5	; 229
    118c:	95 e0       	ldi	r25, 0x05	; 5
    118e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN10GsmManagerD1Ev>


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem(false);
GpsManager gps(IS_GPS_MOCK);
    1192:	8a ec       	ldi	r24, 0xCA	; 202
    1194:	94 e0       	ldi	r25, 0x04	; 4
    1196:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN10GpsManagerD1Ev>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    119a:	00 00       	nop
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <_GLOBAL__sub_I_IS_GSM_MOCK>:
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	6f ef       	ldi	r22, 0xFF	; 255
    11b4:	7f ef       	ldi	r23, 0xFF	; 255
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 8e 08 	call	0x111c	; 0x111c <_Z41__static_initialization_and_destruction_0ii>
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <_GLOBAL__sub_D_IS_GSM_MOCK>:
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	6f ef       	ldi	r22, 0xFF	; 255
    11ce:	7f ef       	ldi	r23, 0xFF	; 255
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 8e 08 	call	0x111c	; 0x111c <_Z41__static_initialization_and_destruction_0ii>
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <_ZN12RmMemManagerC1Eb>:
boolean _ledTopPinGreen=false;
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock){
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <_ZN12RmMemManagerC1Eb+0x6>
    11e4:	1f 92       	push	r1
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
	
	if (!_isMock)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	fc 01       	movw	r30, r24
    1200:	90 81       	ld	r25, Z
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 27       	eor	r24, r25
    1206:	88 23       	and	r24, r24
    1208:	21 f0       	breq	.+8      	; 0x1212 <_ZN12RmMemManagerC1Eb+0x34>
		Wire.begin();
    120a:	88 ec       	ldi	r24, 0xC8	; 200
    120c:	97 e0       	ldi	r25, 0x07	; 7
    120e:	0e 94 83 14 	call	0x2906	; 0x2906 <_ZN7TwoWire5beginEv>
}
    1212:	00 00       	nop
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <_Z13internalWriteiPhh>:

void internalWrite(int16_t address, uint8_t* data, uint8_t numBytes){
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	28 97       	sbiw	r28, 0x08	; 8
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	9d 83       	std	Y+5, r25	; 0x05
    1236:	8c 83       	std	Y+4, r24	; 0x04
    1238:	7f 83       	std	Y+7, r23	; 0x07
    123a:	6e 83       	std	Y+6, r22	; 0x06
    123c:	48 87       	std	Y+8, r20	; 0x08
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    123e:	19 82       	std	Y+1, r1	; 0x01
    1240:	99 81       	ldd	r25, Y+1	; 0x01
    1242:	88 85       	ldd	r24, Y+8	; 0x08
    1244:	98 17       	cp	r25, r24
    1246:	e0 f5       	brcc	.+120    	; 0x12c0 <_Z13internalWriteiPhh+0xa0>
	
		uint16_t thisByteAddr = address+i;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		RM_LOGMEMLN(*(data+i));
	
		Wire.beginTransmission(0x50);
    125a:	60 e5       	ldi	r22, 0x50	; 80
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	88 ec       	ldi	r24, 0xC8	; 200
    1260:	97 e0       	ldi	r25, 0x07	; 7
    1262:	0e 94 11 16 	call	0x2c22	; 0x2c22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	9b 81       	ldd	r25, Y+3	; 0x03
    126a:	89 2f       	mov	r24, r25
    126c:	99 27       	eor	r25, r25
    126e:	bc 01       	movw	r22, r24
    1270:	88 ec       	ldi	r24, 0xC8	; 200
    1272:	97 e0       	ldi	r25, 0x07	; 7
    1274:	0e 94 34 19 	call	0x3268	; 0x3268 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	99 27       	eor	r25, r25
    127e:	bc 01       	movw	r22, r24
    1280:	88 ec       	ldi	r24, 0xC8	; 200
    1282:	97 e0       	ldi	r25, 0x07	; 7
    1284:	0e 94 34 19 	call	0x3268	; 0x3268 <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	2e 81       	ldd	r18, Y+6	; 0x06
    1290:	3f 81       	ldd	r19, Y+7	; 0x07
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	fc 01       	movw	r30, r24
    1298:	80 81       	ld	r24, Z
    129a:	68 2f       	mov	r22, r24
    129c:	88 ec       	ldi	r24, 0xC8	; 200
    129e:	97 e0       	ldi	r25, 0x07	; 7
    12a0:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    12a4:	88 ec       	ldi	r24, 0xC8	; 200
    12a6:	97 e0       	ldi	r25, 0x07	; 7
    12a8:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <_ZN7TwoWire15endTransmissionEv>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
    12ac:	6f e0       	ldi	r22, 0x0F	; 15
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	c0 cf       	rjmp	.-128    	; 0x1240 <_Z13internalWriteiPhh+0x20>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    12c0:	00 00       	nop
    12c2:	28 96       	adiw	r28, 0x08	; 8
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <_Z12internalReadiPhh>:

void internalRead(int16_t address, uint8_t* data, uint8_t numBytes){
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	29 97       	sbiw	r28, 0x09	; 9
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	78 87       	std	Y+8, r23	; 0x08
    12ee:	6f 83       	std	Y+7, r22	; 0x07
    12f0:	49 87       	std	Y+9, r20	; 0x09
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    12f2:	19 82       	std	Y+1, r1	; 0x01
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	98 17       	cp	r25, r24
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <_Z12internalReadiPhh+0x2a>
    12fc:	4b c0       	rjmp	.+150    	; 0x1394 <_Z12internalReadiPhh+0xc0>
		
		uint16_t thisByteAddr = address+i;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	8b 83       	std	Y+3, r24	; 0x03
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1310:	60 e5       	ldi	r22, 0x50	; 80
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	97 e0       	ldi	r25, 0x07	; 7
    1318:	0e 94 11 16 	call	0x2c22	; 0x2c22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	89 2f       	mov	r24, r25
    1322:	99 27       	eor	r25, r25
    1324:	bc 01       	movw	r22, r24
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	97 e0       	ldi	r25, 0x07	; 7
    132a:	0e 94 34 19 	call	0x3268	; 0x3268 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	99 27       	eor	r25, r25
    1334:	bc 01       	movw	r22, r24
    1336:	88 ec       	ldi	r24, 0xC8	; 200
    1338:	97 e0       	ldi	r25, 0x07	; 7
    133a:	0e 94 34 19 	call	0x3268	; 0x3268 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    133e:	88 ec       	ldi	r24, 0xC8	; 200
    1340:	97 e0       	ldi	r25, 0x07	; 7
    1342:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	60 e5       	ldi	r22, 0x50	; 80
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	88 ec       	ldi	r24, 0xC8	; 200
    1350:	97 e0       	ldi	r25, 0x07	; 7
    1352:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
    135a:	88 ec       	ldi	r24, 0xC8	; 200
    135c:	97 e0       	ldi	r25, 0x07	; 7
    135e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <_ZN7TwoWire9availableEv>
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	89 2b       	or	r24, r25
    1366:	09 f4       	brne	.+2      	; 0x136a <_Z12internalReadiPhh+0x96>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	22 23       	and	r18, r18
    136c:	29 f0       	breq	.+10     	; 0x1378 <_Z12internalReadiPhh+0xa4>
			readByte = Wire.read();
    136e:	88 ec       	ldi	r24, 0xC8	; 200
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN7TwoWire4readEv>
    1376:	8a 83       	std	Y+2, r24	; 0x02
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	2f 81       	ldd	r18, Y+7	; 0x07
    1380:	38 85       	ldd	r19, Y+8	; 0x08
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	2a 81       	ldd	r18, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	20 83       	st	Z, r18
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	b0 cf       	rjmp	.-160    	; 0x12f4 <_Z12internalReadiPhh+0x20>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1394:	00 00       	nop
    1396:	29 96       	adiw	r28, 0x09	; 9
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address)
{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <_ZN12RmMemManager18getUCharFromMemoryEj+0x6>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_ZN12RmMemManager18getUCharFromMemoryEj+0x8>
    13b0:	1f 92       	push	r1
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	9b 83       	std	Y+3, r25	; 0x03
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	7d 83       	std	Y+5, r23	; 0x05
    13bc:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	42 2f       	mov	r20, r18
    13c6:	9e 01       	movw	r18, r28
    13c8:	2f 5f       	subi	r18, 0xFF	; 255
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	b9 01       	movw	r22, r18
    13ce:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z12internalReadiPhh>
	return value;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <_ZN12RmMemManager19getUShortFromMemoryEj>:

uint16_t RmMemManager::getUShortFromMemory(uint16_t address)
{
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <_ZN12RmMemManager19getUShortFromMemoryEj+0x8>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <_ZN12RmMemManager19getUShortFromMemoryEj+0xa>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
    13f6:	7e 83       	std	Y+6, r23	; 0x06
    13f8:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    13fa:	22 e0       	ldi	r18, 0x02	; 2
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	42 2f       	mov	r20, r18
    1402:	9e 01       	movw	r18, r28
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	b9 01       	movw	r22, r18
    140a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z12internalReadiPhh>
	return value;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1412:	26 96       	adiw	r28, 0x06	; 6
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <_ZN12RmMemManager17getUIntFromMemoryEj>:

uint32_t RmMemManager::getUIntFromMemory(uint16_t address)
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	28 97       	sbiw	r28, 0x08	; 8
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	78 87       	std	Y+8, r23	; 0x08
    143e:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1440:	24 e0       	ldi	r18, 0x04	; 4
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 85       	ldd	r25, Y+8	; 0x08
    1446:	42 2f       	mov	r20, r18
    1448:	9e 01       	movw	r18, r28
    144a:	2f 5f       	subi	r18, 0xFF	; 255
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	b9 01       	movw	r22, r18
    1450:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z12internalReadiPhh>
	return value;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	ab 81       	ldd	r26, Y+3	; 0x03
    145a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	28 96       	adiw	r28, 0x08	; 8
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <_ZN12RmMemManager18getULongFromMemoryEj>:

uint64_t RmMemManager::getULongFromMemory(uint16_t address)
{
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	2c 97       	sbiw	r28, 0x0c	; 12
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9a 87       	std	Y+10, r25	; 0x0a
    1498:	89 87       	std	Y+9, r24	; 0x09
    149a:	7c 87       	std	Y+12, r23	; 0x0c
    149c:	6b 87       	std	Y+11, r22	; 0x0b
	uint64_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    149e:	28 e0       	ldi	r18, 0x08	; 8
    14a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a4:	42 2f       	mov	r20, r18
    14a6:	9e 01       	movw	r18, r28
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	b9 01       	movw	r22, r18
    14ae:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z12internalReadiPhh>
	return value;
    14b2:	29 81       	ldd	r18, Y+1	; 0x01
    14b4:	3a 81       	ldd	r19, Y+2	; 0x02
    14b6:	4b 81       	ldd	r20, Y+3	; 0x03
    14b8:	5c 81       	ldd	r21, Y+4	; 0x04
    14ba:	6d 81       	ldd	r22, Y+5	; 0x05
    14bc:	7e 81       	ldd	r23, Y+6	; 0x06
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	a2 2e       	mov	r10, r18
    14c4:	b3 2e       	mov	r11, r19
    14c6:	c4 2e       	mov	r12, r20
    14c8:	d5 2e       	mov	r13, r21
    14ca:	e6 2e       	mov	r14, r22
    14cc:	f7 2e       	mov	r15, r23
    14ce:	08 2f       	mov	r16, r24
    14d0:	19 2f       	mov	r17, r25
}
    14d2:	2a 2d       	mov	r18, r10
    14d4:	3b 2d       	mov	r19, r11
    14d6:	4c 2d       	mov	r20, r12
    14d8:	5d 2d       	mov	r21, r13
    14da:	6e 2d       	mov	r22, r14
    14dc:	7f 2d       	mov	r23, r15
    14de:	80 2f       	mov	r24, r16
    14e0:	91 2f       	mov	r25, r17
    14e2:	2c 96       	adiw	r28, 0x0c	; 12
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	08 95       	ret

00001504 <_ZN12RmMemManager16setUCharToMemoryEjh>:

void RmMemManager::setUCharToMemory(uint16_t address, uint8_t value)
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 d0       	rcall	.+0      	; 0x150a <_ZN12RmMemManager16setUCharToMemoryEjh+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <_ZN12RmMemManager16setUCharToMemoryEjh+0x8>
    150c:	1f 92       	push	r1
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	7c 83       	std	Y+4, r23	; 0x04
    1518:	6b 83       	std	Y+3, r22	; 0x03
    151a:	4d 83       	std	Y+5, r20	; 0x05
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	9e 01       	movw	r18, r28
    1524:	2b 5f       	subi	r18, 0xFB	; 251
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	b9 01       	movw	r22, r18
    152a:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z13internalWriteiPhh>
}
    152e:	00 00       	nop
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <_ZN12RmMemManager17setUShortToMemoryEjj>:

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value)
{
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	00 d0       	rcall	.+0      	; 0x1546 <_ZN12RmMemManager17setUShortToMemoryEjj+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <_ZN12RmMemManager17setUShortToMemoryEjj+0x8>
    1548:	00 d0       	rcall	.+0      	; 0x154a <_ZN12RmMemManager17setUShortToMemoryEjj+0xa>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	7c 83       	std	Y+4, r23	; 0x04
    1554:	6b 83       	std	Y+3, r22	; 0x03
    1556:	5e 83       	std	Y+6, r21	; 0x06
    1558:	4d 83       	std	Y+5, r20	; 0x05
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    155a:	42 e0       	ldi	r20, 0x02	; 2
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	9e 01       	movw	r18, r28
    1562:	2b 5f       	subi	r18, 0xFB	; 251
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z13internalWriteiPhh>
}
    156c:	00 00       	nop
    156e:	26 96       	adiw	r28, 0x06	; 6
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <_ZN12RmMemManager15setUIntToMemoryEjm>:

void RmMemManager::setUIntToMemory(uint16_t address, uint32_t value)
{
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	28 97       	sbiw	r28, 0x08	; 8
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	7c 83       	std	Y+4, r23	; 0x04
    159a:	6b 83       	std	Y+3, r22	; 0x03
    159c:	2d 83       	std	Y+5, r18	; 0x05
    159e:	3e 83       	std	Y+6, r19	; 0x06
    15a0:	4f 83       	std	Y+7, r20	; 0x07
    15a2:	58 87       	std	Y+8, r21	; 0x08
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    15a4:	44 e0       	ldi	r20, 0x04	; 4
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	9e 01       	movw	r18, r28
    15ac:	2b 5f       	subi	r18, 0xFB	; 251
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	b9 01       	movw	r22, r18
    15b2:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z13internalWriteiPhh>
}
    15b6:	00 00       	nop
    15b8:	28 96       	adiw	r28, 0x08	; 8
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <_ZN12RmMemManager16setULongToMemoryEjy>:

void RmMemManager::setULongToMemory(uint16_t address, uint64_t value)
{
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	2c 97       	sbiw	r28, 0x0c	; 12
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	7c 83       	std	Y+4, r23	; 0x04
    15ec:	6b 83       	std	Y+3, r22	; 0x03
    15ee:	ed 82       	std	Y+5, r14	; 0x05
    15f0:	fe 82       	std	Y+6, r15	; 0x06
    15f2:	0f 83       	std	Y+7, r16	; 0x07
    15f4:	18 87       	std	Y+8, r17	; 0x08
    15f6:	29 87       	std	Y+9, r18	; 0x09
    15f8:	3a 87       	std	Y+10, r19	; 0x0a
    15fa:	4b 87       	std	Y+11, r20	; 0x0b
    15fc:	5c 87       	std	Y+12, r21	; 0x0c
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    15fe:	48 e0       	ldi	r20, 0x08	; 8
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	9e 01       	movw	r18, r28
    1606:	2b 5f       	subi	r18, 0xFB	; 251
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	b9 01       	movw	r22, r18
    160c:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z13internalWriteiPhh>
}
    1610:	00 00       	nop
    1612:	2c 96       	adiw	r28, 0x0c	; 12
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	08 95       	ret

0000162c <_ZN12RmMemManager16initialiseModuleEh>:

void RmMemManager::initialiseModule(uint8_t moduleId){
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	a0 97       	sbiw	r28, 0x20	; 32
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	9f 8f       	std	Y+31, r25	; 0x1f
    1642:	8e 8f       	std	Y+30, r24	; 0x1e
    1644:	68 a3       	std	Y+32, r22	; 0x20

	ModuleMeta meta;
	meta.moduleId = moduleId;
    1646:	88 a1       	ldd	r24, Y+32	; 0x20
    1648:	89 83       	std	Y+1, r24	; 0x01
	meta.bootCount = 0;
    164a:	1b 82       	std	Y+3, r1	; 0x03
    164c:	1a 82       	std	Y+2, r1	; 0x02
	meta.eepromTestArea = 0;
    164e:	1e 82       	std	Y+6, r1	; 0x06
    1650:	1f 82       	std	Y+7, r1	; 0x07
    1652:	18 86       	std	Y+8, r1	; 0x08
    1654:	19 86       	std	Y+9, r1	; 0x09
    1656:	1a 86       	std	Y+10, r1	; 0x0a
    1658:	1b 86       	std	Y+11, r1	; 0x0b
    165a:	1c 86       	std	Y+12, r1	; 0x0c
    165c:	1d 86       	std	Y+13, r1	; 0x0d
	meta.nextFreeWriteAddr = MEMLOC_START + sizeof(ModuleMeta);
    165e:	8d e1       	ldi	r24, 0x1D	; 29
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9d 83       	std	Y+5, r25	; 0x05
    1664:	8c 83       	std	Y+4, r24	; 0x04
	memset(meta.spareBuffer, 0, sizeof(meta.spareBuffer));
    1666:	ce 01       	movw	r24, r28
    1668:	0e 96       	adiw	r24, 0x0e	; 14
    166a:	40 e1       	ldi	r20, 0x10	; 16
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <memset>
	
	//TODO: Blank out rest of eeprom too?
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    1676:	8d e1       	ldi	r24, 0x1D	; 29
    1678:	48 2f       	mov	r20, r24
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	bc 01       	movw	r22, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z13internalWriteiPhh>
}
    1688:	00 00       	nop
    168a:	a0 96       	adiw	r28, 0x20	; 32
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <_ZN12RmMemManager18incrementBootCountEv>:

uint16_t RmMemManager::incrementBootCount(){
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <_ZN12RmMemManager18incrementBootCountEv+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <_ZN12RmMemManager18incrementBootCountEv+0x8>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <_ZN12RmMemManager18incrementBootCountEv+0xa>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
	
	//TODO: Somehow verify Wire is working?
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	uint16_t currVal = getUShortFromMemory(addr);
    16b6:	29 81       	ldd	r18, Y+1	; 0x01
    16b8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	b9 01       	movw	r22, r18
    16c0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN12RmMemManager19getUShortFromMemoryEj>
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
	++currVal;
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	8b 83       	std	Y+3, r24	; 0x03
	setUShortToMemory(addr, currVal);
    16d2:	4b 81       	ldd	r20, Y+3	; 0x03
    16d4:	5c 81       	ldd	r21, Y+4	; 0x04
    16d6:	29 81       	ldd	r18, Y+1	; 0x01
    16d8:	3a 81       	ldd	r19, Y+2	; 0x02
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	b9 01       	movw	r22, r18
    16e0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN12RmMemManager17setUShortToMemoryEjj>
	return currVal;
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    16e8:	26 96       	adiw	r28, 0x06	; 6
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <_ZN12RmMemManager12verifyEepRomEv>:

uint16_t RmMemManager::verifyEepRom(){
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	6e 97       	sbiw	r28, 0x1e	; 30
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	9e 8f       	std	Y+30, r25	; 0x1e
    1720:	8d 8f       	std	Y+29, r24	; 0x1d
	
	//TODO: Verify of spill over 64-bit boundary what to do
	//TODO: Roll-over verification
	//TODO: Don't have strings of messages, return code which translate in a #if NOT_ENCODED_ON_DEVICE block
	
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
    1722:	85 e0       	ldi	r24, 0x05	; 5
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9d 83       	std	Y+5, r25	; 0x05
    1728:	8c 83       	std	Y+4, r24	; 0x04
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++)
    172a:	1b 82       	std	Y+3, r1	; 0x03
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	8e 31       	cpi	r24, 0x1E	; 30
    1730:	08 f0       	brcs	.+2      	; 0x1734 <_ZN12RmMemManager12verifyEepRomEv+0x3a>
    1732:	29 c1       	rjmp	.+594    	; 0x1986 <_ZN12RmMemManager12verifyEepRomEv+0x28c>
	{
		//No intersection of values so we'll know straight away if wrong bits picked
		this->setULongToMemory(MEM_TEST_LOC, 0xA946F7D8C941F9A8);
    1734:	6c 81       	ldd	r22, Y+4	; 0x04
    1736:	7d 81       	ldd	r23, Y+5	; 0x05
    1738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    173c:	0f 2e       	mov	r0, r31
    173e:	f8 ea       	ldi	r31, 0xA8	; 168
    1740:	ef 2e       	mov	r14, r31
    1742:	f0 2d       	mov	r31, r0
    1744:	0f 2e       	mov	r0, r31
    1746:	f9 ef       	ldi	r31, 0xF9	; 249
    1748:	ff 2e       	mov	r15, r31
    174a:	f0 2d       	mov	r31, r0
    174c:	01 e4       	ldi	r16, 0x41	; 65
    174e:	19 ec       	ldi	r17, 0xC9	; 201
    1750:	28 ed       	ldi	r18, 0xD8	; 216
    1752:	37 ef       	ldi	r19, 0xF7	; 247
    1754:	46 e4       	ldi	r20, 0x46	; 70
    1756:	59 ea       	ldi	r21, 0xA9	; 169
    1758:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN12RmMemManager16setULongToMemoryEjy>
		uint64_t val8 = this->getULongFromMemory(MEM_TEST_LOC);
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1762:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1764:	b9 01       	movw	r22, r18
    1766:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN12RmMemManager18getULongFromMemoryEj>
    176a:	a2 2e       	mov	r10, r18
    176c:	b3 2e       	mov	r11, r19
    176e:	c4 2e       	mov	r12, r20
    1770:	d5 2e       	mov	r13, r21
    1772:	e6 2e       	mov	r14, r22
    1774:	f7 2e       	mov	r15, r23
    1776:	08 2f       	mov	r16, r24
    1778:	19 2f       	mov	r17, r25
    177a:	ae 82       	std	Y+6, r10	; 0x06
    177c:	bf 82       	std	Y+7, r11	; 0x07
    177e:	c8 86       	std	Y+8, r12	; 0x08
    1780:	d9 86       	std	Y+9, r13	; 0x09
    1782:	ea 86       	std	Y+10, r14	; 0x0a
    1784:	fb 86       	std	Y+11, r15	; 0x0b
    1786:	0c 87       	std	Y+12, r16	; 0x0c
    1788:	1d 87       	std	Y+13, r17	; 0x0d
		if (val8 != 0xA946F7D8C941F9A8)
    178a:	ae 80       	ldd	r10, Y+6	; 0x06
    178c:	bf 80       	ldd	r11, Y+7	; 0x07
    178e:	c8 84       	ldd	r12, Y+8	; 0x08
    1790:	d9 84       	ldd	r13, Y+9	; 0x09
    1792:	ea 84       	ldd	r14, Y+10	; 0x0a
    1794:	fb 84       	ldd	r15, Y+11	; 0x0b
    1796:	0c 85       	ldd	r16, Y+12	; 0x0c
    1798:	1d 85       	ldd	r17, Y+13	; 0x0d
    179a:	2a 2d       	mov	r18, r10
    179c:	3b 2d       	mov	r19, r11
    179e:	4c 2d       	mov	r20, r12
    17a0:	5d 2d       	mov	r21, r13
    17a2:	6e 2d       	mov	r22, r14
    17a4:	7f 2d       	mov	r23, r15
    17a6:	80 2f       	mov	r24, r16
    17a8:	91 2f       	mov	r25, r17
    17aa:	28 3a       	cpi	r18, 0xA8	; 168
    17ac:	39 4f       	sbci	r19, 0xF9	; 249
    17ae:	41 44       	sbci	r20, 0x41	; 65
    17b0:	59 4c       	sbci	r21, 0xC9	; 201
    17b2:	68 4d       	sbci	r22, 0xD8	; 216
    17b4:	77 4f       	sbci	r23, 0xF7	; 247
    17b6:	86 44       	sbci	r24, 0x46	; 70
    17b8:	99 4a       	sbci	r25, 0xA9	; 169
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <_ZN12RmMemManager12verifyEepRomEv+0xd8>
		{
			RM_LOGLN("FAILED LONG");
    17bc:	67 ed       	ldi	r22, 0xD7	; 215
    17be:	71 e0       	ldi	r23, 0x01	; 1
    17c0:	86 ed       	ldi	r24, 0xD6	; 214
    17c2:	97 e0       	ldi	r25, 0x07	; 7
    17c4:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
			++numFailures;
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUIntToMemory(MEM_TEST_LOC, 0xC911F948);
    17d2:	6c 81       	ldd	r22, Y+4	; 0x04
    17d4:	7d 81       	ldd	r23, Y+5	; 0x05
    17d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17da:	28 e4       	ldi	r18, 0x48	; 72
    17dc:	39 ef       	ldi	r19, 0xF9	; 249
    17de:	41 e1       	ldi	r20, 0x11	; 17
    17e0:	59 ec       	ldi	r21, 0xC9	; 201
    17e2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN12RmMemManager15setUIntToMemoryEjm>
		uint32_t val4 = this->getUIntFromMemory(MEM_TEST_LOC);
    17e6:	2c 81       	ldd	r18, Y+4	; 0x04
    17e8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ee:	b9 01       	movw	r22, r18
    17f0:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN12RmMemManager17getUIntFromMemoryEj>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8e 87       	std	Y+14, r24	; 0x0e
    17fa:	9f 87       	std	Y+15, r25	; 0x0f
    17fc:	a8 8b       	std	Y+16, r26	; 0x10
    17fe:	b9 8b       	std	Y+17, r27	; 0x11
		if (val4 != 0xC911F948)
    1800:	8e 85       	ldd	r24, Y+14	; 0x0e
    1802:	9f 85       	ldd	r25, Y+15	; 0x0f
    1804:	a8 89       	ldd	r26, Y+16	; 0x10
    1806:	b9 89       	ldd	r27, Y+17	; 0x11
    1808:	88 34       	cpi	r24, 0x48	; 72
    180a:	99 4f       	sbci	r25, 0xF9	; 249
    180c:	a1 41       	sbci	r26, 0x11	; 17
    180e:	b9 4c       	sbci	r27, 0xC9	; 201
    1810:	59 f0       	breq	.+22     	; 0x1828 <_ZN12RmMemManager12verifyEepRomEv+0x12e>
		{
			RM_LOGLN("FAILED INT");
    1812:	63 ee       	ldi	r22, 0xE3	; 227
    1814:	71 e0       	ldi	r23, 0x01	; 1
    1816:	86 ed       	ldi	r24, 0xD6	; 214
    1818:	97 e0       	ldi	r25, 0x07	; 7
    181a:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
			++numFailures;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUShortToMemory(MEM_TEST_LOC, 0x5C3A);
    1828:	2c 81       	ldd	r18, Y+4	; 0x04
    182a:	3d 81       	ldd	r19, Y+5	; 0x05
    182c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    182e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1830:	4a e3       	ldi	r20, 0x3A	; 58
    1832:	5c e5       	ldi	r21, 0x5C	; 92
    1834:	b9 01       	movw	r22, r18
    1836:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN12RmMemManager17setUShortToMemoryEjj>
		uint16_t val2 = this->getUShortFromMemory(MEM_TEST_LOC);
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1840:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1842:	b9 01       	movw	r22, r18
    1844:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN12RmMemManager19getUShortFromMemoryEj>
    1848:	9b 8b       	std	Y+19, r25	; 0x13
    184a:	8a 8b       	std	Y+18, r24	; 0x12
		if (val2 != 0x5C3A)
    184c:	8a 89       	ldd	r24, Y+18	; 0x12
    184e:	9b 89       	ldd	r25, Y+19	; 0x13
    1850:	8a 33       	cpi	r24, 0x3A	; 58
    1852:	9c 45       	sbci	r25, 0x5C	; 92
    1854:	59 f0       	breq	.+22     	; 0x186c <_ZN12RmMemManager12verifyEepRomEv+0x172>
		{
			RM_LOGLN("FAILED SHORT");
    1856:	6e ee       	ldi	r22, 0xEE	; 238
    1858:	71 e0       	ldi	r23, 0x01	; 1
    185a:	86 ed       	ldi	r24, 0xD6	; 214
    185c:	97 e0       	ldi	r25, 0x07	; 7
    185e:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
			++numFailures;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUCharToMemory(MEM_TEST_LOC, 0xE1);
    186c:	2c 81       	ldd	r18, Y+4	; 0x04
    186e:	3d 81       	ldd	r19, Y+5	; 0x05
    1870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1874:	41 ee       	ldi	r20, 0xE1	; 225
    1876:	b9 01       	movw	r22, r18
    1878:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN12RmMemManager16setUCharToMemoryEjh>
		uint8_t val1 = this->getUCharFromMemory(MEM_TEST_LOC);
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1884:	b9 01       	movw	r22, r18
    1886:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_ZN12RmMemManager18getUCharFromMemoryEj>
    188a:	8c 8b       	std	Y+20, r24	; 0x14
		if (val1 != 0xE1)
    188c:	8c 89       	ldd	r24, Y+20	; 0x14
    188e:	81 3e       	cpi	r24, 0xE1	; 225
    1890:	59 f0       	breq	.+22     	; 0x18a8 <_ZN12RmMemManager12verifyEepRomEv+0x1ae>
		{
			RM_LOGLN("FAILED CHAR");
    1892:	6b ef       	ldi	r22, 0xFB	; 251
    1894:	71 e0       	ldi	r23, 0x01	; 1
    1896:	86 ed       	ldi	r24, 0xD6	; 214
    1898:	97 e0       	ldi	r25, 0x07	; 7
    189a:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
			++numFailures;
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
		}
		
		RM_LOG(F("EEPROM Test: Long="));
    18a8:	84 ee       	ldi	r24, 0xE4	; 228
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	bc 01       	movw	r22, r24
    18ae:	86 ed       	ldi	r24, 0xD6	; 214
    18b0:	97 e0       	ldi	r25, 0x07	; 7
    18b2:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLONG(val8, HEX);
    18b6:	2e 81       	ldd	r18, Y+6	; 0x06
    18b8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ba:	48 85       	ldd	r20, Y+8	; 0x08
    18bc:	59 85       	ldd	r21, Y+9	; 0x09
    18be:	6a 85       	ldd	r22, Y+10	; 0x0a
    18c0:	7b 85       	ldd	r23, Y+11	; 0x0b
    18c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c6:	00 e2       	ldi	r16, 0x20	; 32
    18c8:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__lshrdi3>
    18cc:	a2 2e       	mov	r10, r18
    18ce:	b3 2e       	mov	r11, r19
    18d0:	c4 2e       	mov	r12, r20
    18d2:	d5 2e       	mov	r13, r21
    18d4:	e6 2e       	mov	r14, r22
    18d6:	f7 2e       	mov	r15, r23
    18d8:	08 2f       	mov	r16, r24
    18da:	19 2f       	mov	r17, r25
    18dc:	ad 8a       	std	Y+21, r10	; 0x15
    18de:	be 8a       	std	Y+22, r11	; 0x16
    18e0:	cf 8a       	std	Y+23, r12	; 0x17
    18e2:	d8 8e       	std	Y+24, r13	; 0x18
    18e4:	e9 8e       	std	Y+25, r14	; 0x19
    18e6:	fa 8e       	std	Y+26, r15	; 0x1a
    18e8:	0b 8f       	std	Y+27, r16	; 0x1b
    18ea:	1c 8f       	std	Y+28, r17	; 0x1c
    18ec:	8d 89       	ldd	r24, Y+21	; 0x15
    18ee:	9e 89       	ldd	r25, Y+22	; 0x16
    18f0:	af 89       	ldd	r26, Y+23	; 0x17
    18f2:	b8 8d       	ldd	r27, Y+24	; 0x18
    18f4:	20 e1       	ldi	r18, 0x10	; 16
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	ac 01       	movw	r20, r24
    18fa:	bd 01       	movw	r22, r26
    18fc:	86 ed       	ldi	r24, 0xD6	; 214
    18fe:	97 e0       	ldi	r25, 0x07	; 7
    1900:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN5Print5printEmi>
    1904:	8e 81       	ldd	r24, Y+6	; 0x06
    1906:	9f 81       	ldd	r25, Y+7	; 0x07
    1908:	a8 85       	ldd	r26, Y+8	; 0x08
    190a:	b9 85       	ldd	r27, Y+9	; 0x09
    190c:	20 e1       	ldi	r18, 0x10	; 16
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ac 01       	movw	r20, r24
    1912:	bd 01       	movw	r22, r26
    1914:	86 ed       	ldi	r24, 0xD6	; 214
    1916:	97 e0       	ldi	r25, 0x07	; 7
    1918:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN5Print5printEmi>
		RM_LOG(F(", Int="));
    191c:	87 ef       	ldi	r24, 0xF7	; 247
    191e:	92 e0       	ldi	r25, 0x02	; 2
    1920:	bc 01       	movw	r22, r24
    1922:	86 ed       	ldi	r24, 0xD6	; 214
    1924:	97 e0       	ldi	r25, 0x07	; 7
    1926:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val4, HEX);
    192a:	8e 85       	ldd	r24, Y+14	; 0x0e
    192c:	9f 85       	ldd	r25, Y+15	; 0x0f
    192e:	a8 89       	ldd	r26, Y+16	; 0x10
    1930:	b9 89       	ldd	r27, Y+17	; 0x11
    1932:	20 e1       	ldi	r18, 0x10	; 16
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	ac 01       	movw	r20, r24
    1938:	bd 01       	movw	r22, r26
    193a:	86 ed       	ldi	r24, 0xD6	; 214
    193c:	97 e0       	ldi	r25, 0x07	; 7
    193e:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN5Print5printEmi>
		RM_LOG(F(", Short="));
    1942:	8e ef       	ldi	r24, 0xFE	; 254
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	bc 01       	movw	r22, r24
    1948:	86 ed       	ldi	r24, 0xD6	; 214
    194a:	97 e0       	ldi	r25, 0x07	; 7
    194c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val2, HEX);
    1950:	8a 89       	ldd	r24, Y+18	; 0x12
    1952:	9b 89       	ldd	r25, Y+19	; 0x13
    1954:	40 e1       	ldi	r20, 0x10	; 16
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	bc 01       	movw	r22, r24
    195a:	86 ed       	ldi	r24, 0xD6	; 214
    195c:	97 e0       	ldi	r25, 0x07	; 7
    195e:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN5Print5printEji>
		RM_LOG(F(", Char="));
    1962:	87 e0       	ldi	r24, 0x07	; 7
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	bc 01       	movw	r22, r24
    1968:	86 ed       	ldi	r24, 0xD6	; 214
    196a:	97 e0       	ldi	r25, 0x07	; 7
    196c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLNFMT(val1, HEX);
    1970:	40 e1       	ldi	r20, 0x10	; 16
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	6c 89       	ldd	r22, Y+20	; 0x14
    1976:	86 ed       	ldi	r24, 0xD6	; 214
    1978:	97 e0       	ldi	r25, 0x07	; 7
    197a:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN5Print7printlnEhi>
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++)
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	8b 83       	std	Y+3, r24	; 0x03
    1984:	d3 ce       	rjmp	.-602    	; 0x172c <_ZN12RmMemManager12verifyEepRomEv+0x32>
		RM_LOGFMT(val2, HEX);
		RM_LOG(F(", Char="));
		RM_LOGLNFMT(val1, HEX);
	}
	
	return numFailures;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
}
    198a:	6e 96       	adiw	r28, 0x1e	; 30
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	df 90       	pop	r13
    19a4:	cf 90       	pop	r12
    19a6:	bf 90       	pop	r11
    19a8:	af 90       	pop	r10
    19aa:	08 95       	ret

000019ac <_ZN12RmMemManager9printDataEv>:

//TODO: Only in PC_BEHAVIOUR 
void RmMemManager::printData(){
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	6f 97       	sbiw	r28, 0x1f	; 31
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	9f 8f       	std	Y+31, r25	; 0x1f
    19c2:	8e 8f       	std	Y+30, r24	; 0x1e

	//Get last reading
	ModuleMeta meta;
	internalRead(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    19c4:	8d e1       	ldi	r24, 0x1D	; 29
    19c6:	48 2f       	mov	r20, r24
    19c8:	ce 01       	movw	r24, r28
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	bc 01       	movw	r22, r24
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z12internalReadiPhh>
	
	RM_LOG2(F("Module #"), meta.moduleId);
    19d6:	8f e0       	ldi	r24, 0x0F	; 15
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	bc 01       	movw	r22, r24
    19dc:	86 ed       	ldi	r24, 0xD6	; 214
    19de:	97 e0       	ldi	r25, 0x07	; 7
    19e0:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    19e4:	67 e0       	ldi	r22, 0x07	; 7
    19e6:	72 e0       	ldi	r23, 0x02	; 2
    19e8:	86 ed       	ldi	r24, 0xD6	; 214
    19ea:	97 e0       	ldi	r25, 0x07	; 7
    19ec:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	4a e0       	ldi	r20, 0x0A	; 10
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	68 2f       	mov	r22, r24
    19f8:	86 ed       	ldi	r24, 0xD6	; 214
    19fa:	97 e0       	ldi	r25, 0x07	; 7
    19fc:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN5Print7printlnEhi>
	RM_LOG2(F("# Boots"), meta.bootCount);
    1a00:	88 e1       	ldi	r24, 0x18	; 24
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	bc 01       	movw	r22, r24
    1a06:	86 ed       	ldi	r24, 0xD6	; 214
    1a08:	97 e0       	ldi	r25, 0x07	; 7
    1a0a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    1a0e:	67 e0       	ldi	r22, 0x07	; 7
    1a10:	72 e0       	ldi	r23, 0x02	; 2
    1a12:	86 ed       	ldi	r24, 0xD6	; 214
    1a14:	97 e0       	ldi	r25, 0x07	; 7
    1a16:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	4a e0       	ldi	r20, 0x0A	; 10
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	bc 01       	movw	r22, r24
    1a24:	86 ed       	ldi	r24, 0xD6	; 214
    1a26:	97 e0       	ldi	r25, 0x07	; 7
    1a28:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
	RM_LOG2(F("Next Addr"), meta.nextFreeWriteAddr);
    1a2c:	80 e2       	ldi	r24, 0x20	; 32
    1a2e:	93 e0       	ldi	r25, 0x03	; 3
    1a30:	bc 01       	movw	r22, r24
    1a32:	86 ed       	ldi	r24, 0xD6	; 214
    1a34:	97 e0       	ldi	r25, 0x07	; 7
    1a36:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    1a3a:	67 e0       	ldi	r22, 0x07	; 7
    1a3c:	72 e0       	ldi	r23, 0x02	; 2
    1a3e:	86 ed       	ldi	r24, 0xD6	; 214
    1a40:	97 e0       	ldi	r25, 0x07	; 7
    1a42:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	4a e0       	ldi	r20, 0x0A	; 10
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	bc 01       	movw	r22, r24
    1a50:	86 ed       	ldi	r24, 0xD6	; 214
    1a52:	97 e0       	ldi	r25, 0x07	; 7
    1a54:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
	//RM_LOG(F(", Gps-Heading: "));
	//RM_LOG(session.gpsInfo.heading);
	//RM_LOG(F(", Gps-Speed: "));
	//RM_LOGLN(session.gpsInfo.speed_kph);
	//}
}
    1a58:	00 00       	nop
    1a5a:	6f 96       	adiw	r28, 0x1f	; 31
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	28 97       	sbiw	r28, 0x08	; 8
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	7c 83       	std	Y+4, r23	; 0x04
    1a86:	6b 83       	std	Y+3, r22	; 0x03
    1a88:	5e 83       	std	Y+6, r21	; 0x06
    1a8a:	4d 83       	std	Y+5, r20	; 0x05
    1a8c:	38 87       	std	Y+8, r19	; 0x08
    1a8e:	2f 83       	std	Y+7, r18	; 0x07
	return 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
		//}
	//
	//
	//*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
	//return numOfLastReadings;
}
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	28 96       	adiw	r28, 0x08	; 8
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <_ZN12RmMemManager12markDataSentEy>:

void RmMemManager::markDataSent(uint64_t sentUpTo)
{
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	2a 97       	sbiw	r28, 0x0a	; 10
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	0b 83       	std	Y+3, r16	; 0x03
    1acc:	1c 83       	std	Y+4, r17	; 0x04
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	3e 83       	std	Y+6, r19	; 0x06
    1ad2:	4f 83       	std	Y+7, r20	; 0x07
    1ad4:	58 87       	std	Y+8, r21	; 0x08
    1ad6:	69 87       	std	Y+9, r22	; 0x09
    1ad8:	7a 87       	std	Y+10, r23	; 0x0a
	//this->setULongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
}
    1ada:	00 00       	nop
    1adc:	2a 96       	adiw	r28, 0x0a	; 10
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	7c 83       	std	Y+4, r23	; 0x04
    1b04:	6b 83       	std	Y+3, r22	; 0x03
	//TODO
}
    1b06:	00 00       	nop
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <_Z27internalWriteEntryAtAddressP10SensorDatam>:

void internalWriteEntryAtAddress(SensorData* r, unsigned long address){
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <_Z27internalWriteEntryAtAddressP10SensorDatam+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <_Z27internalWriteEntryAtAddressP10SensorDatam+0x8>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <_Z27internalWriteEntryAtAddressP10SensorDatam+0xa>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	4b 83       	std	Y+3, r20	; 0x03
    1b2a:	5c 83       	std	Y+4, r21	; 0x04
    1b2c:	6d 83       	std	Y+5, r22	; 0x05
    1b2e:	7e 83       	std	Y+6, r23	; 0x06
	
	//byte* rPtr = (byte*)r;
//
	//for(int i=0;i<sizeof(SensorData);i++)
		//EEPROM.write(address+i, *(rPtr+i));
}
    1b30:	00 00       	nop
    1b32:	26 96       	adiw	r28, 0x06	; 6
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>:

void RmMemManager::replaceLastSensorEntry(SensorData* r)
{
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x6>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x8>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	7c 83       	std	Y+4, r23	; 0x04
    1b56:	6b 83       	std	Y+3, r22	; 0x03
	//volatile unsigned long entryCount = this->getULongFromMemory(MEMLOC_READING_ENTRY_COUNT);
	//volatile unsigned long lastEntryOffset = max(0,entryCount-1) * sizeof(SensorData);
	//volatile unsigned long lastEntryAddress = MEMADDR_READING_DATA_START + lastEntryOffset;
	//
	//internalWriteEntryAtAddress(r, lastEntryAddress);
}
    1b58:	00 00       	nop
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:

void RmMemManager::appendSensorEntry(SensorData* r)
{
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x8>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	7c 83       	std	Y+4, r23	; 0x04
    1b7a:	6b 83       	std	Y+3, r22	; 0x03
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
    1b7c:	00 00       	nop
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <_ZN12RmMemManager5resetEv>:



/* LED mgmt - Not strictly memory related */

void RmMemManager::reset(){
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <_ZN12RmMemManager5resetEv+0x6>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
	_flashCallCount=0;
    1b9a:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <_flashCallCount>
	toggleLED(Bottom, All_Clear);
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    1bb6:	00 00       	nop
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <_Z13internalFlashRbS_9LED_STATEb>:
/* Flashes for a single LED */
void internalFlash(
	boolean& greenPinVal, boolean& redPinVal,
	LED_STATE currLedState, boolean atSlowInterval
	)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <_Z13internalFlashRbS_9LED_STATEb+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <_Z13internalFlashRbS_9LED_STATEb+0x8>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <_Z13internalFlashRbS_9LED_STATEb+0xa>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	7c 83       	std	Y+4, r23	; 0x04
    1bd6:	6b 83       	std	Y+3, r22	; 0x03
    1bd8:	4d 83       	std	Y+5, r20	; 0x05
    1bda:	2e 83       	std	Y+6, r18	; 0x06
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	80 32       	cpi	r24, 0x20	; 32
    1be0:	61 f4       	brne	.+24     	; 0x1bfa <_Z13internalFlashRbS_9LED_STATEb+0x38>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	fc 01       	movw	r30, r24
    1be8:	90 81       	ld	r25, Z
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	29 2f       	mov	r18, r25
    1bee:	28 27       	eor	r18, r24
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	20 83       	st	Z, r18
    1bf8:	19 c0       	rjmp	.+50     	; 0x1c2c <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Slow) {
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	80 34       	cpi	r24, 0x40	; 64
    1bfe:	31 f4       	brne	.+12     	; 0x1c0c <_Z13internalFlashRbS_9LED_STATEb+0x4a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	2e 81       	ldd	r18, Y+6	; 0x06
    1c06:	fc 01       	movw	r30, r24
    1c08:	20 83       	st	Z, r18
    1c0a:	10 c0       	rjmp	.+32     	; 0x1c2c <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Solid) {
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	80 31       	cpi	r24, 0x10	; 16
    1c10:	31 f4       	brne	.+12     	; 0x1c1e <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	21 e0       	ldi	r18, 0x01	; 1
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == All_Clear) {
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	80 38       	cpi	r24, 0x80	; 128
    1c22:	21 f4       	brne	.+8      	; 0x1c2c <_Z13internalFlashRbS_9LED_STATEb+0x6a>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	fc 01       	movw	r30, r24
    1c2a:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	61 f4       	brne	.+24     	; 0x1c4a <_Z13internalFlashRbS_9LED_STATEb+0x88>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	fc 01       	movw	r30, r24
    1c38:	90 81       	ld	r25, Z
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	29 2f       	mov	r18, r25
    1c3e:	28 27       	eor	r18, r24
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1c48:	19 c0       	rjmp	.+50     	; 0x1c7c <_Z13internalFlashRbS_9LED_STATEb+0xba>
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <_Z13internalFlashRbS_9LED_STATEb+0x9a>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	2e 81       	ldd	r18, Y+6	; 0x06
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1c5a:	10 c0       	rjmp	.+32     	; 0x1c7c <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	31 f4       	brne	.+12     	; 0x1c6e <_Z13internalFlashRbS_9LED_STATEb+0xac>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	21 e0       	ldi	r18, 0x01	; 1
    1c68:	fc 01       	movw	r30, r24
    1c6a:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1c6c:	07 c0       	rjmp	.+14     	; 0x1c7c <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
	}
	else if (currLedState == All_Clear) {
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	80 38       	cpi	r24, 0x80	; 128
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	fc 01       	movw	r30, r24
    1c7a:	10 82       	st	Z, r1
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1c7c:	00 00       	nop
    1c7e:	26 96       	adiw	r28, 0x06	; 6
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <_ZN12RmMemManager8flashLEDEv>:


//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <_ZN12RmMemManager8flashLEDEv+0x6>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
    1c9e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <_flashCallCount>
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <_flashCallCount>
    1ca8:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <_flashCallCount>
    1cac:	8b ea       	ldi	r24, 0xAB	; 171
    1cae:	28 9f       	mul	r18, r24
    1cb0:	81 2d       	mov	r24, r1
    1cb2:	11 24       	eor	r1, r1
    1cb4:	98 2f       	mov	r25, r24
    1cb6:	96 95       	lsr	r25
    1cb8:	89 2f       	mov	r24, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	89 0f       	add	r24, r25
    1cbe:	92 2f       	mov	r25, r18
    1cc0:	98 1b       	sub	r25, r24
    1cc2:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <_flashCallCount>

	//Flash Bottom LED	
	internalFlash(
    1cc6:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <_flashCallCount>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	99 23       	and	r25, r25
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <_ZN12RmMemManager8flashLEDEv+0x42>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1cd2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_ledBottomState>
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	49 2f       	mov	r20, r25
    1cda:	6b e0       	ldi	r22, 0x0B	; 11
    1cdc:	77 e0       	ldi	r23, 0x07	; 7
    1cde:	8a e0       	ldi	r24, 0x0A	; 10
    1ce0:	97 e0       	ldi	r25, 0x07	; 7
    1ce2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1ce6:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <_ledBottomPinGreen>
    1cea:	68 2f       	mov	r22, r24
    1cec:	89 e0       	ldi	r24, 0x09	; 9
    1cee:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    1cf2:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ledBottomPinRed>
    1cf6:	68 2f       	mov	r22, r24
    1cf8:	88 e0       	ldi	r24, 0x08	; 8
    1cfa:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    1cfe:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <_flashCallCount>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	99 23       	and	r25, r25
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <_ZN12RmMemManager8flashLEDEv+0x7a>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    1d0a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ledTopState>
    1d0e:	28 2f       	mov	r18, r24
    1d10:	49 2f       	mov	r20, r25
    1d12:	6c e0       	ldi	r22, 0x0C	; 12
    1d14:	77 e0       	ldi	r23, 0x07	; 7
    1d16:	8d e0       	ldi	r24, 0x0D	; 13
    1d18:	97 e0       	ldi	r25, 0x07	; 7
    1d1a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    1d1e:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <_ledTopPinGreen>
    1d22:	68 2f       	mov	r22, r24
    1d24:	8b e0       	ldi	r24, 0x0B	; 11
    1d26:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    1d2a:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <_ledTopPinRed>
    1d2e:	68 2f       	mov	r22, r24
    1d30:	8a e0       	ldi	r24, 0x0A	; 10
    1d32:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
}
    1d36:	00 00       	nop
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x6>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x8>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	6b 83       	std	Y+3, r22	; 0x03
    1d54:	4c 83       	std	Y+4, r20	; 0x04
	if (led_num == Bottom)
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x22>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ledBottomState>
		_ledTopState = state;

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
	if (led_num == Bottom)
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
	else if (led_num == Top)
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	88 23       	and	r24, r24
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
		_ledTopState = state;
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ledTopState>

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1d70:	00 00       	nop
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <_ZN13SensorManagerC1Eb>:

#include <Arduino.h>
#include "DataTypes.h"
#include "SensorManager.h"

SensorManager::SensorManager(boolean isMock) {
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <_ZN13SensorManagerC1Eb+0x6>
    1d86:	1f 92       	push	r1
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	fc 01       	movw	r30, r24
    1d9a:	20 83       	st	Z, r18
}
    1d9c:	00 00       	nop
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <_ZN13SensorManager7readVccEv>:

float SensorManager::readVcc() {
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <_ZN13SensorManager7readVccEv+0x6>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <_ZN13SensorManager7readVccEv+0x8>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <_ZN13SensorManager7readVccEv+0xa>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
	long result;
	// Read 1.1V reference against AVcc - TODO: does this even work ?!
	ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1dbc:	8c e7       	ldi	r24, 0x7C	; 124
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	2e e4       	ldi	r18, 0x4E	; 78
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	20 83       	st	Z, r18
	delay(2); // Wait for Vref to settle
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
	ADCSRA |= _BV(ADSC); // Convert
    1dd2:	8a e7       	ldi	r24, 0x7A	; 122
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	2a e7       	ldi	r18, 0x7A	; 122
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	f9 01       	movw	r30, r18
    1ddc:	20 81       	ld	r18, Z
    1dde:	20 64       	ori	r18, 0x40	; 64
    1de0:	fc 01       	movw	r30, r24
    1de2:	20 83       	st	Z, r18
	while (bit_is_set(ADCSRA,ADSC));
    1de4:	8a e7       	ldi	r24, 0x7A	; 122
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	80 74       	andi	r24, 0x40	; 64
    1df2:	99 27       	eor	r25, r25
    1df4:	21 e0       	ldi	r18, 0x01	; 1
    1df6:	89 2b       	or	r24, r25
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <_ZN13SensorManager7readVccEv+0x52>
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	22 23       	and	r18, r18
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <_ZN13SensorManager7readVccEv+0x58>
    1e00:	f1 cf       	rjmp	.-30     	; 0x1de4 <_ZN13SensorManager7readVccEv+0x3a>
	result = ADCL;
    1e02:	88 e7       	ldi	r24, 0x78	; 120
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e0       	ldi	r26, 0x00	; 0
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	ab 83       	std	Y+3, r26	; 0x03
    1e18:	bc 83       	std	Y+4, r27	; 0x04
	result |= ADCH<<8;
    1e1a:	89 e7       	ldi	r24, 0x79	; 121
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	80 81       	ld	r24, Z
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	98 2f       	mov	r25, r24
    1e28:	88 27       	eor	r24, r24
    1e2a:	09 2e       	mov	r0, r25
    1e2c:	00 0c       	add	r0, r0
    1e2e:	aa 0b       	sbc	r26, r26
    1e30:	bb 0b       	sbc	r27, r27
    1e32:	29 81       	ldd	r18, Y+1	; 0x01
    1e34:	3a 81       	ldd	r19, Y+2	; 0x02
    1e36:	4b 81       	ldd	r20, Y+3	; 0x03
    1e38:	5c 81       	ldd	r21, Y+4	; 0x04
    1e3a:	82 2b       	or	r24, r18
    1e3c:	93 2b       	or	r25, r19
    1e3e:	a4 2b       	or	r26, r20
    1e40:	b5 2b       	or	r27, r21
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	ab 83       	std	Y+3, r26	; 0x03
    1e48:	bc 83       	std	Y+4, r27	; 0x04
	result = 1125300L / result; // Back-calculate AVcc in mV
    1e4a:	84 eb       	ldi	r24, 0xB4	; 180
    1e4c:	9b e2       	ldi	r25, 0x2B	; 43
    1e4e:	a1 e1       	ldi	r26, 0x11	; 17
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	29 81       	ldd	r18, Y+1	; 0x01
    1e54:	3a 81       	ldd	r19, Y+2	; 0x02
    1e56:	4b 81       	ldd	r20, Y+3	; 0x03
    1e58:	5c 81       	ldd	r21, Y+4	; 0x04
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__divmodsi4>
    1e62:	da 01       	movw	r26, r20
    1e64:	c9 01       	movw	r24, r18
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	ab 83       	std	Y+3, r26	; 0x03
    1e6c:	bc 83       	std	Y+4, r27	; 0x04
	return result / 1000;
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	ab 81       	ldd	r26, Y+3	; 0x03
    1e74:	bc 81       	ldd	r27, Y+4	; 0x04
    1e76:	28 ee       	ldi	r18, 0xE8	; 232
    1e78:	33 e0       	ldi	r19, 0x03	; 3
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__divmodsi4>
    1e86:	da 01       	movw	r26, r20
    1e88:	c9 01       	movw	r24, r18
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 bc 19 	call	0x3378	; 0x3378 <__floatsisf>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
}
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	26 96       	adiw	r28, 0x06	; 6
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	08 95       	ret

00001eac <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <_ZN13SensorManager16takeSampleAnalogEh+0x6>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <_ZN13SensorManager16takeSampleAnalogEh+0x8>
    1eb4:	1f 92       	push	r1
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 23       	and	r24, r24
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <_ZN13SensorManager16takeSampleAnalogEh+0x26>
		return 5;
    1ecc:	85 e0       	ldi	r24, 0x05	; 5
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	07 c0       	rjmp	.+14     	; 0x1ee0 <_ZN13SensorManager16takeSampleAnalogEh+0x34>
	
	uint16_t batt = analogRead(pinNo);
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <analogRead>
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
	//TODO: Look into !
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <_Z9printDataP10SensorData>:

void printData(SensorData* sd){
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <_Z9printDataP10SensorData+0x6>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01

	RM_LOG2(F("Batt-V:"), sd->battVoltage);
    1efe:	8a e2       	ldi	r24, 0x2A	; 42
    1f00:	93 e0       	ldi	r25, 0x03	; 3
    1f02:	bc 01       	movw	r22, r24
    1f04:	86 ed       	ldi	r24, 0xD6	; 214
    1f06:	97 e0       	ldi	r25, 0x07	; 7
    1f08:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    1f0c:	67 e1       	ldi	r22, 0x17	; 23
    1f0e:	72 e0       	ldi	r23, 0x02	; 2
    1f10:	86 ed       	ldi	r24, 0xD6	; 214
    1f12:	97 e0       	ldi	r25, 0x07	; 7
    1f14:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	81 81       	ldd	r24, Z+1	; 0x01
    1f20:	92 81       	ldd	r25, Z+2	; 0x02
    1f22:	4a e0       	ldi	r20, 0x0A	; 10
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	bc 01       	movw	r22, r24
    1f28:	86 ed       	ldi	r24, 0xD6	; 214
    1f2a:	97 e0       	ldi	r25, 0x07	; 7
    1f2c:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
	RM_LOG2(F("PV-V:"), sd->pVVoltage);
    1f30:	82 e3       	ldi	r24, 0x32	; 50
    1f32:	93 e0       	ldi	r25, 0x03	; 3
    1f34:	bc 01       	movw	r22, r24
    1f36:	86 ed       	ldi	r24, 0xD6	; 214
    1f38:	97 e0       	ldi	r25, 0x07	; 7
    1f3a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    1f3e:	67 e1       	ldi	r22, 0x17	; 23
    1f40:	72 e0       	ldi	r23, 0x02	; 2
    1f42:	86 ed       	ldi	r24, 0xD6	; 214
    1f44:	97 e0       	ldi	r25, 0x07	; 7
    1f46:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	fc 01       	movw	r30, r24
    1f50:	85 81       	ldd	r24, Z+5	; 0x05
    1f52:	96 81       	ldd	r25, Z+6	; 0x06
    1f54:	4a e0       	ldi	r20, 0x0A	; 10
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	bc 01       	movw	r22, r24
    1f5a:	86 ed       	ldi	r24, 0xD6	; 214
    1f5c:	97 e0       	ldi	r25, 0x07	; 7
    1f5e:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
	RM_LOG2(F("Current:"), sd->current);
    1f62:	88 e3       	ldi	r24, 0x38	; 56
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	bc 01       	movw	r22, r24
    1f68:	86 ed       	ldi	r24, 0xD6	; 214
    1f6a:	97 e0       	ldi	r25, 0x07	; 7
    1f6c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    1f70:	67 e1       	ldi	r22, 0x17	; 23
    1f72:	72 e0       	ldi	r23, 0x02	; 2
    1f74:	86 ed       	ldi	r24, 0xD6	; 214
    1f76:	97 e0       	ldi	r25, 0x07	; 7
    1f78:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	fc 01       	movw	r30, r24
    1f82:	83 81       	ldd	r24, Z+3	; 0x03
    1f84:	94 81       	ldd	r25, Z+4	; 0x04
    1f86:	4a e0       	ldi	r20, 0x0A	; 10
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	86 ed       	ldi	r24, 0xD6	; 214
    1f8e:	97 e0       	ldi	r25, 0x07	; 7
    1f90:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
	RM_LOG2(F("Temp:"), sd->temperature);
    1f94:	81 e4       	ldi	r24, 0x41	; 65
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	bc 01       	movw	r22, r24
    1f9a:	86 ed       	ldi	r24, 0xD6	; 214
    1f9c:	97 e0       	ldi	r25, 0x07	; 7
    1f9e:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    1fa2:	67 e1       	ldi	r22, 0x17	; 23
    1fa4:	72 e0       	ldi	r23, 0x02	; 2
    1fa6:	86 ed       	ldi	r24, 0xD6	; 214
    1fa8:	97 e0       	ldi	r25, 0x07	; 7
    1faa:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	87 81       	ldd	r24, Z+7	; 0x07
    1fb6:	90 85       	ldd	r25, Z+8	; 0x08
    1fb8:	4a e0       	ldi	r20, 0x0A	; 10
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	86 ed       	ldi	r24, 0xD6	; 214
    1fc0:	97 e0       	ldi	r25, 0x07	; 7
    1fc2:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
}
    1fc6:	00 00       	nop
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <_Z11getMockDatav>:

uint8_t __mockDataCounter;
SensorData getMockData(){
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <_Z11getMockDatav+0x6>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1fe0:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <__mockDataCounter>
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <__mockDataCounter>
	
	SensorData ret;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	0e 94 53 19 	call	0x32a6	; 0x32a6 <_ZN10SensorDataC1Ev>
	ret.battVoltage = __mockDataCounter;
    1ff2:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <__mockDataCounter>
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	fc 01       	movw	r30, r24
    2000:	32 83       	std	Z+2, r19	; 0x02
    2002:	21 83       	std	Z+1, r18	; 0x01
	ret.pVVoltage = __mockDataCounter*10;
    2004:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <__mockDataCounter>
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	9c 01       	movw	r18, r24
    2012:	22 0f       	add	r18, r18
    2014:	33 1f       	adc	r19, r19
    2016:	22 0f       	add	r18, r18
    2018:	33 1f       	adc	r19, r19
    201a:	82 0f       	add	r24, r18
    201c:	93 1f       	adc	r25, r19
    201e:	9c 01       	movw	r18, r24
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	fc 01       	movw	r30, r24
    2026:	36 83       	std	Z+6, r19	; 0x06
    2028:	25 83       	std	Z+5, r18	; 0x05
	ret.current = __mockDataCounter%7;
    202a:	20 91 0f 07 	lds	r18, 0x070F	; 0x80070f <__mockDataCounter>
    202e:	85 e2       	ldi	r24, 0x25	; 37
    2030:	28 9f       	mul	r18, r24
    2032:	81 2d       	mov	r24, r1
    2034:	11 24       	eor	r1, r1
    2036:	92 2f       	mov	r25, r18
    2038:	98 1b       	sub	r25, r24
    203a:	96 95       	lsr	r25
    203c:	89 0f       	add	r24, r25
    203e:	98 2f       	mov	r25, r24
    2040:	96 95       	lsr	r25
    2042:	96 95       	lsr	r25
    2044:	89 2f       	mov	r24, r25
    2046:	88 0f       	add	r24, r24
    2048:	88 0f       	add	r24, r24
    204a:	88 0f       	add	r24, r24
    204c:	89 1b       	sub	r24, r25
    204e:	92 2f       	mov	r25, r18
    2050:	98 1b       	sub	r25, r24
    2052:	29 2f       	mov	r18, r25
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	fc 01       	movw	r30, r24
    205c:	34 83       	std	Z+4, r19	; 0x04
    205e:	23 83       	std	Z+3, r18	; 0x03
	ret.temperature = __mockDataCounter*100;
    2060:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <__mockDataCounter>
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	44 e6       	ldi	r20, 0x64	; 100
    206a:	48 9f       	mul	r20, r24
    206c:	90 01       	movw	r18, r0
    206e:	49 9f       	mul	r20, r25
    2070:	30 0d       	add	r19, r0
    2072:	11 24       	eor	r1, r1
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	fc 01       	movw	r30, r24
    207a:	30 87       	std	Z+8, r19	; 0x08
    207c:	27 83       	std	Z+7, r18	; 0x07
	
	return ret;
    207e:	00 00       	nop
}
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <_ZN13SensorManager8readDataEv>:

SensorData SensorManager::readData() {
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	66 97       	sbiw	r28, 0x16	; 22
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	9a 87       	std	Y+10, r25	; 0x0a
    20a8:	89 87       	std	Y+9, r24	; 0x09
    20aa:	7c 87       	std	Y+12, r23	; 0x0c
    20ac:	6b 87       	std	Y+11, r22	; 0x0b
	
	SensorData ret;
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <_ZN10SensorDataC1Ev>
	
	if (_isMock) {
    20b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ba:	fc 01       	movw	r30, r24
    20bc:	80 81       	ld	r24, Z
    20be:	88 23       	and	r24, r24
    20c0:	79 f0       	breq	.+30     	; 0x20e0 <_ZN13SensorManager8readDataEv+0x52>
		ret = getMockData();
    20c2:	09 85       	ldd	r16, Y+9	; 0x09
    20c4:	1a 85       	ldd	r17, Y+10	; 0x0a
    20c6:	ce 01       	movw	r24, r28
    20c8:	0d 96       	adiw	r24, 0x0d	; 13
    20ca:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_Z11getMockDatav>
    20ce:	8a e0       	ldi	r24, 0x0A	; 10
    20d0:	fe 01       	movw	r30, r28
    20d2:	3d 96       	adiw	r30, 0x0d	; 13
    20d4:	d8 01       	movw	r26, r16
    20d6:	01 90       	ld	r0, Z+
    20d8:	0d 92       	st	X+, r0
    20da:	8a 95       	dec	r24
    20dc:	e1 f7       	brne	.-8      	; 0x20d6 <_ZN13SensorManager8readDataEv+0x48>
    20de:	38 c0       	rjmp	.+112    	; 0x2150 <_ZN13SensorManager8readDataEv+0xc2>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    20e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20e4:	6e e0       	ldi	r22, 0x0E	; 14
    20e6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN13SensorManager16takeSampleAnalogEh>
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	89 83       	std	Y+1, r24	; 0x01
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    20ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    20f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20f2:	6f e0       	ldi	r22, 0x0F	; 15
    20f4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN13SensorManager16takeSampleAnalogEh>
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    20fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    20fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2100:	61 e1       	ldi	r22, 0x11	; 17
    2102:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN13SensorManager16takeSampleAnalogEh>
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    210a:	8b 85       	ldd	r24, Y+11	; 0x0b
    210c:	9c 85       	ldd	r25, Y+12	; 0x0c
    210e:	60 e1       	ldi	r22, 0x10	; 16
    2110:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN13SensorManager16takeSampleAnalogEh>
    2114:	98 87       	std	Y+8, r25	; 0x08
    2116:	8f 83       	std	Y+7, r24	; 0x07

		ret.battVoltage = battRaw;
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	3c 81       	ldd	r19, Y+4	; 0x04
    2120:	fc 01       	movw	r30, r24
    2122:	32 83       	std	Z+2, r19	; 0x02
    2124:	21 83       	std	Z+1, r18	; 0x01
		ret.pVVoltage = pvRaw;
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	29 81       	ldd	r18, Y+1	; 0x01
    212c:	3a 81       	ldd	r19, Y+2	; 0x02
    212e:	fc 01       	movw	r30, r24
    2130:	36 83       	std	Z+6, r19	; 0x06
    2132:	25 83       	std	Z+5, r18	; 0x05
		ret.current = currentRaw;
    2134:	89 85       	ldd	r24, Y+9	; 0x09
    2136:	9a 85       	ldd	r25, Y+10	; 0x0a
    2138:	2d 81       	ldd	r18, Y+5	; 0x05
    213a:	3e 81       	ldd	r19, Y+6	; 0x06
    213c:	fc 01       	movw	r30, r24
    213e:	34 83       	std	Z+4, r19	; 0x04
    2140:	23 83       	std	Z+3, r18	; 0x03
		ret.temperature = tempRaw;
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	2f 81       	ldd	r18, Y+7	; 0x07
    2148:	38 85       	ldd	r19, Y+8	; 0x08
    214a:	fc 01       	movw	r30, r24
    214c:	30 87       	std	Z+8, r19	; 0x08
    214e:	27 83       	std	Z+7, r18	; 0x07
	}
	
	printData(&ret);
    2150:	89 85       	ldd	r24, Y+9	; 0x09
    2152:	9a 85       	ldd	r25, Y+10	; 0x0a
    2154:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_Z9printDataP10SensorData>
	
	return ret;
    2158:	00 00       	nop
}
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	66 96       	adiw	r28, 0x16	; 22
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    217c:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <twi_state>
  twi_sendStop = true;		// default value
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <twi_sendStop>
  twi_inRepStart = false;
    2186:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    218a:	82 e1       	ldi	r24, 0x12	; 18
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
  digitalWrite(SCL, 1);
    2192:	83 e1       	ldi	r24, 0x13	; 19
    2194:	61 e0       	ldi	r22, 0x01	; 1
    2196:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    219a:	89 eb       	ldi	r24, 0xB9	; 185
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	29 eb       	ldi	r18, 0xB9	; 185
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	f9 01       	movw	r30, r18
    21a4:	20 81       	ld	r18, Z
    21a6:	2e 7f       	andi	r18, 0xFE	; 254
    21a8:	fc 01       	movw	r30, r24
    21aa:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    21ac:	89 eb       	ldi	r24, 0xB9	; 185
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	29 eb       	ldi	r18, 0xB9	; 185
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	f9 01       	movw	r30, r18
    21b6:	20 81       	ld	r18, Z
    21b8:	2d 7f       	andi	r18, 0xFD	; 253
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    21be:	88 eb       	ldi	r24, 0xB8	; 184
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	28 e4       	ldi	r18, 0x48	; 72
    21c4:	fc 01       	movw	r30, r24
    21c6:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    21c8:	8c eb       	ldi	r24, 0xBC	; 188
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	25 e4       	ldi	r18, 0x45	; 69
    21ce:	fc 01       	movw	r30, r24
    21d0:	20 83       	st	Z, r18
}
    21d2:	00 00       	nop
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    21e2:	8c eb       	ldi	r24, 0xBC	; 188
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	2c eb       	ldi	r18, 0xBC	; 188
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	f9 01       	movw	r30, r18
    21ec:	20 81       	ld	r18, Z
    21ee:	2a 7b       	andi	r18, 0xBA	; 186
    21f0:	fc 01       	movw	r30, r24
    21f2:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    21f4:	82 e1       	ldi	r24, 0x12	; 18
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
  digitalWrite(SCL, 0);
    21fc:	83 e1       	ldi	r24, 0x13	; 19
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
}
    2204:	00 00       	nop
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	08 95       	ret

0000220c <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	1f 92       	push	r1
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    2218:	8a eb       	ldi	r24, 0xBA	; 186
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	29 81       	ldd	r18, Y+1	; 0x01
    221e:	22 0f       	add	r18, r18
    2220:	fc 01       	movw	r30, r24
    2222:	20 83       	st	Z, r18
}
    2224:	00 00       	nop
    2226:	0f 90       	pop	r0
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	00 d0       	rcall	.+0      	; 0x2238 <twi_setFrequency+0xa>
    2238:	00 d0       	rcall	.+0      	; 0x223a <twi_setFrequency+0xc>
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	69 83       	std	Y+1, r22	; 0x01
    2240:	7a 83       	std	Y+2, r23	; 0x02
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    2246:	08 eb       	ldi	r16, 0xB8	; 184
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	94 e2       	ldi	r25, 0x24	; 36
    224e:	a4 ef       	ldi	r26, 0xF4	; 244
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	29 81       	ldd	r18, Y+1	; 0x01
    2254:	3a 81       	ldd	r19, Y+2	; 0x02
    2256:	4b 81       	ldd	r20, Y+3	; 0x03
    2258:	5c 81       	ldd	r21, Y+4	; 0x04
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__udivmodsi4>
    2262:	da 01       	movw	r26, r20
    2264:	c9 01       	movw	r24, r18
    2266:	40 97       	sbiw	r24, 0x10	; 16
    2268:	a1 09       	sbc	r26, r1
    226a:	b1 09       	sbc	r27, r1
    226c:	b6 95       	lsr	r27
    226e:	a7 95       	ror	r26
    2270:	97 95       	ror	r25
    2272:	87 95       	ror	r24
    2274:	f8 01       	movw	r30, r16
    2276:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    2278:	00 00       	nop
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	08 95       	ret

0000228c <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <twi_readFrom+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <twi_readFrom+0x8>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <twi_readFrom+0xa>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	8a 83       	std	Y+2, r24	; 0x02
    229c:	7c 83       	std	Y+4, r23	; 0x04
    229e:	6b 83       	std	Y+3, r22	; 0x03
    22a0:	4d 83       	std	Y+5, r20	; 0x05
    22a2:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	81 32       	cpi	r24, 0x21	; 33
    22a8:	18 f0       	brcs	.+6      	; 0x22b0 <twi_readFrom+0x24>
    return 0;
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	6b c0       	rjmp	.+214    	; 0x2384 <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    22ae:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    22b0:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <twi_state>
    22b4:	88 23       	and	r24, r24
    22b6:	d9 f7       	brne	.-10     	; 0x22ae <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <twi_state>
  twi_sendStop = sendStop;
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    22ca:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	81 50       	subi	r24, 0x01	; 1
    22d2:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <twi_slarw>
  twi_slarw |= address << 1;
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	98 2f       	mov	r25, r24
    22e8:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <twi_slarw>
    22ec:	89 2b       	or	r24, r25
    22ee:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <twi_slarw>

  if (true == twi_inRepStart) {
    22f2:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <twi_inRepStart>
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	c1 f4       	brne	.+48     	; 0x232a <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    22fa:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    22fe:	8b eb       	ldi	r24, 0xBB	; 187
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <twi_slarw>
    2306:	fc 01       	movw	r30, r24
    2308:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    230a:	8c eb       	ldi	r24, 0xBC	; 188
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	fc 01       	movw	r30, r24
    2310:	80 81       	ld	r24, Z
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	88 70       	andi	r24, 0x08	; 8
    2318:	99 27       	eor	r25, r25
    231a:	89 2b       	or	r24, r25
    231c:	81 f7       	brne	.-32     	; 0x22fe <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    231e:	8c eb       	ldi	r24, 0xBC	; 188
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	25 ec       	ldi	r18, 0xC5	; 197
    2324:	fc 01       	movw	r30, r24
    2326:	20 83       	st	Z, r18
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    232a:	8c eb       	ldi	r24, 0xBC	; 188
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	25 ee       	ldi	r18, 0xE5	; 229
    2330:	fc 01       	movw	r30, r24
    2332:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <twi_readFrom+0xac>
    continue;
    2336:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2338:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <twi_state>
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	d9 f3       	breq	.-10     	; 0x2336 <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    2340:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <twi_masterBufferIndex>
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	98 17       	cp	r25, r24
    2348:	18 f4       	brcc	.+6      	; 0x2350 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    234a:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <twi_masterBufferIndex>
    234e:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2350:	19 82       	std	Y+1, r1	; 0x01
    2352:	13 c0       	rjmp	.+38     	; 0x237a <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	29 81       	ldd	r18, Y+1	; 0x01
    2364:	22 2f       	mov	r18, r18
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	28 5e       	subi	r18, 0xE8	; 232
    236a:	38 4f       	sbci	r19, 0xF8	; 248
    236c:	f9 01       	movw	r30, r18
    236e:	20 81       	ld	r18, Z
    2370:	fc 01       	movw	r30, r24
    2372:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	99 81       	ldd	r25, Y+1	; 0x01
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	98 17       	cp	r25, r24
    2380:	48 f3       	brcs	.-46     	; 0x2354 <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2384:	26 96       	adiw	r28, 0x06	; 6
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2396:	0f 93       	push	r16
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	27 97       	sbiw	r28, 0x07	; 7
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	7c 83       	std	Y+4, r23	; 0x04
    23b0:	6b 83       	std	Y+3, r22	; 0x03
    23b2:	4d 83       	std	Y+5, r20	; 0x05
    23b4:	2e 83       	std	Y+6, r18	; 0x06
    23b6:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	81 32       	cpi	r24, 0x21	; 33
    23bc:	18 f0       	brcs	.+6      	; 0x23c4 <twi_writeTo+0x2e>
    return 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	76 c0       	rjmp	.+236    	; 0x24ae <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    23c2:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    23c4:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <twi_state>
    23c8:	88 23       	and	r24, r24
    23ca:	d9 f7       	brne	.-10     	; 0x23c2 <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <twi_state>
  twi_sendStop = sendStop;
    23d2:	8f 81       	ldd	r24, Y+7	; 0x07
    23d4:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    23de:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    23e8:	19 82       	std	Y+1, r1	; 0x01
    23ea:	13 c0       	rjmp	.+38     	; 0x2412 <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	29 81       	ldd	r18, Y+1	; 0x01
    23f4:	22 2f       	mov	r18, r18
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4b 81       	ldd	r20, Y+3	; 0x03
    23fa:	5c 81       	ldd	r21, Y+4	; 0x04
    23fc:	24 0f       	add	r18, r20
    23fe:	35 1f       	adc	r19, r21
    2400:	f9 01       	movw	r30, r18
    2402:	20 81       	ld	r18, Z
    2404:	88 5e       	subi	r24, 0xE8	; 232
    2406:	98 4f       	sbci	r25, 0xF8	; 248
    2408:	fc 01       	movw	r30, r24
    240a:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	99 81       	ldd	r25, Y+1	; 0x01
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	98 17       	cp	r25, r24
    2418:	48 f3       	brcs	.-46     	; 0x23ec <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    241a:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <twi_slarw>
  twi_slarw |= address << 1;
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	98 2f       	mov	r25, r24
    242a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <twi_slarw>
    242e:	89 2b       	or	r24, r25
    2430:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2434:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <twi_inRepStart>
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	c1 f4       	brne	.+48     	; 0x246c <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    243c:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    2440:	8b eb       	ldi	r24, 0xBB	; 187
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <twi_slarw>
    2448:	fc 01       	movw	r30, r24
    244a:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    244c:	8c eb       	ldi	r24, 0xBC	; 188
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	fc 01       	movw	r30, r24
    2452:	80 81       	ld	r24, Z
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	88 70       	andi	r24, 0x08	; 8
    245a:	99 27       	eor	r25, r25
    245c:	89 2b       	or	r24, r25
    245e:	81 f7       	brne	.-32     	; 0x2440 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2460:	8c eb       	ldi	r24, 0xBC	; 188
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	25 ec       	ldi	r18, 0xC5	; 197
    2466:	fc 01       	movw	r30, r24
    2468:	20 83       	st	Z, r18
    246a:	07 c0       	rjmp	.+14     	; 0x247a <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    246c:	8c eb       	ldi	r24, 0xBC	; 188
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	25 ee       	ldi	r18, 0xE5	; 229
    2472:	fc 01       	movw	r30, r24
    2474:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2476:	01 c0       	rjmp	.+2      	; 0x247a <twi_writeTo+0xe4>
    continue;
    2478:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
    247c:	88 23       	and	r24, r24
    247e:	21 f0       	breq	.+8      	; 0x2488 <twi_writeTo+0xf2>
    2480:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <twi_state>
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	c1 f3       	breq	.-16     	; 0x2478 <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    2488:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <twi_error>
    248c:	8f 3f       	cpi	r24, 0xFF	; 255
    248e:	11 f4       	brne	.+4      	; 0x2494 <twi_writeTo+0xfe>
    return 0;	// success
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	0d c0       	rjmp	.+26     	; 0x24ae <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    2494:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <twi_error>
    2498:	80 32       	cpi	r24, 0x20	; 32
    249a:	11 f4       	brne	.+4      	; 0x24a0 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    24a0:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <twi_error>
    24a4:	80 33       	cpi	r24, 0x30	; 48
    24a6:	11 f4       	brne	.+4      	; 0x24ac <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    24ac:	84 e0       	ldi	r24, 0x04	; 4
}
    24ae:	27 96       	adiw	r28, 0x07	; 7
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	0f 91       	pop	r16
    24c0:	08 95       	ret

000024c2 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <twi_transmit+0x6>
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <twi_transmit+0x8>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9b 83       	std	Y+3, r25	; 0x03
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    24d4:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	81 97       	sbiw	r24, 0x21	; 33
    24e8:	14 f0       	brlt	.+4      	; 0x24ee <twi_transmit+0x2c>
    return 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	2c c0       	rjmp	.+88     	; 0x2546 <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    24ee:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <twi_state>
    24f2:	84 30       	cpi	r24, 0x04	; 4
    24f4:	11 f0       	breq	.+4      	; 0x24fa <twi_transmit+0x38>
    return 2;
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	26 c0       	rjmp	.+76     	; 0x2546 <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	19 c0       	rjmp	.+50     	; 0x2530 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    24fe:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	29 81       	ldd	r18, Y+1	; 0x01
    2512:	22 2f       	mov	r18, r18
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a 81       	ldd	r20, Y+2	; 0x02
    2518:	5b 81       	ldd	r21, Y+3	; 0x03
    251a:	24 0f       	add	r18, r20
    251c:	35 1f       	adc	r19, r21
    251e:	f9 01       	movw	r30, r18
    2520:	20 81       	ld	r18, Z
    2522:	86 5c       	subi	r24, 0xC6	; 198
    2524:	98 4f       	sbci	r25, 0xF8	; 248
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	99 81       	ldd	r25, Y+1	; 0x01
    2532:	8c 81       	ldd	r24, Y+4	; 0x04
    2534:	98 17       	cp	r25, r24
    2536:	18 f3       	brcs	.-58     	; 0x24fe <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    2538:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <twi_txBufferLength>
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	89 0f       	add	r24, r25
    2540:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <twi_txBufferLength>
  
  return 0;
    2544:	80 e0       	ldi	r24, 0x00	; 0
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	00 d0       	rcall	.+0      	; 0x255a <twi_attachSlaveRxEvent+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <twi_onSlaveReceive+0x1>
    256a:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <twi_onSlaveReceive>
}
    256e:	00 00       	nop
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 d0       	rcall	.+0      	; 0x2580 <twi_attachSlaveTxEvent+0x6>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <twi_onSlaveTransmit+0x1>
    2590:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <twi_onSlaveTransmit>
}
    2594:	00 00       	nop
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

000025a0 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	1f 92       	push	r1
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	88 23       	and	r24, r24
    25b0:	31 f0       	breq	.+12     	; 0x25be <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25b2:	8c eb       	ldi	r24, 0xBC	; 188
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	25 ec       	ldi	r18, 0xC5	; 197
    25b8:	fc 01       	movw	r30, r24
    25ba:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    25bc:	05 c0       	rjmp	.+10     	; 0x25c8 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25be:	8c eb       	ldi	r24, 0xBC	; 188
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	25 e8       	ldi	r18, 0x85	; 133
    25c4:	fc 01       	movw	r30, r24
    25c6:	20 83       	st	Z, r18
  }
}
    25c8:	00 00       	nop
    25ca:	0f 90       	pop	r0
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	08 95       	ret

000025d2 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    25da:	8c eb       	ldi	r24, 0xBC	; 188
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	25 ed       	ldi	r18, 0xD5	; 213
    25e0:	fc 01       	movw	r30, r24
    25e2:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <twi_stop+0x16>
    continue;
    25e6:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    25e8:	8c eb       	ldi	r24, 0xBC	; 188
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	fc 01       	movw	r30, r24
    25ee:	80 81       	ld	r24, Z
    25f0:	88 2f       	mov	r24, r24
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	80 71       	andi	r24, 0x10	; 16
    25f6:	99 27       	eor	r25, r25
    25f8:	89 2b       	or	r24, r25
    25fa:	a9 f7       	brne	.-22     	; 0x25e6 <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    25fc:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <twi_state>
}
    2600:	00 00       	nop
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2610:	8c eb       	ldi	r24, 0xBC	; 188
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	25 ec       	ldi	r18, 0xC5	; 197
    2616:	fc 01       	movw	r30, r24
    2618:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    261a:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <twi_state>
}
    261e:	00 00       	nop
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <__vector_24>:

ISR(TWI_vect)
{
    2626:	1f 92       	push	r1
    2628:	0f 92       	push	r0
    262a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    262e:	0f 92       	push	r0
    2630:	11 24       	eor	r1, r1
    2632:	2f 93       	push	r18
    2634:	3f 93       	push	r19
    2636:	4f 93       	push	r20
    2638:	5f 93       	push	r21
    263a:	6f 93       	push	r22
    263c:	7f 93       	push	r23
    263e:	8f 93       	push	r24
    2640:	9f 93       	push	r25
    2642:	af 93       	push	r26
    2644:	bf 93       	push	r27
    2646:	ef 93       	push	r30
    2648:	ff 93       	push	r31
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    2652:	89 eb       	ldi	r24, 0xB9	; 185
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	fc 01       	movw	r30, r24
    2658:	80 81       	ld	r24, Z
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	88 7f       	andi	r24, 0xF8	; 248
    2660:	99 27       	eor	r25, r25
    2662:	09 2e       	mov	r0, r25
    2664:	00 0c       	add	r0, r0
    2666:	aa 0b       	sbc	r26, r26
    2668:	bb 0b       	sbc	r27, r27
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	28 ef       	ldi	r18, 0xF8	; 248
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	84 1b       	sub	r24, r20
    2674:	95 0b       	sbc	r25, r21
    2676:	28 17       	cp	r18, r24
    2678:	39 07       	cpc	r19, r25
    267a:	08 f4       	brcc	.+2      	; 0x267e <__vector_24+0x58>
    267c:	17 c1       	rjmp	.+558    	; 0x28ac <__vector_24+0x286>
    267e:	8c 5c       	subi	r24, 0xCC	; 204
    2680:	9f 4f       	sbci	r25, 0xFF	; 255
    2682:	fc 01       	movw	r30, r24
    2684:	0c 94 ff 2d 	jmp	0x5bfe	; 0x5bfe <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2688:	8b eb       	ldi	r24, 0xBB	; 187
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <twi_slarw>
    2690:	fc 01       	movw	r30, r24
    2692:	20 83       	st	Z, r18
      twi_reply(1);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      break;
    269a:	08 c1       	rjmp	.+528    	; 0x28ac <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    269c:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <twi_masterBufferIndex>
    26a0:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <twi_masterBufferLength>
    26a4:	98 17       	cp	r25, r24
    26a6:	a0 f4       	brcc	.+40     	; 0x26d0 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    26a8:	8b eb       	ldi	r24, 0xBB	; 187
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <twi_masterBufferIndex>
    26b0:	31 e0       	ldi	r19, 0x01	; 1
    26b2:	32 0f       	add	r19, r18
    26b4:	30 93 38 07 	sts	0x0738, r19	; 0x800738 <twi_masterBufferIndex>
    26b8:	22 2f       	mov	r18, r18
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	28 5e       	subi	r18, 0xE8	; 232
    26be:	38 4f       	sbci	r19, 0xF8	; 248
    26c0:	f9 01       	movw	r30, r18
    26c2:	20 81       	ld	r18, Z
    26c4:	fc 01       	movw	r30, r24
    26c6:	20 83       	st	Z, r18
        twi_reply(1);
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    26ce:	ee c0       	rjmp	.+476    	; 0x28ac <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    26d0:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <twi_sendStop>
    26d4:	88 23       	and	r24, r24
    26d6:	19 f0       	breq	.+6      	; 0x26de <__vector_24+0xb8>
          twi_stop();
    26d8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    26dc:	e7 c0       	rjmp	.+462    	; 0x28ac <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    26e4:	8c eb       	ldi	r24, 0xBC	; 188
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	24 ea       	ldi	r18, 0xA4	; 164
    26ea:	fc 01       	movw	r30, r24
    26ec:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    26ee:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <twi_state>
	}
      }
      break;
    26f2:	dc c0       	rjmp	.+440    	; 0x28ac <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    26f4:	80 e2       	ldi	r24, 0x20	; 32
    26f6:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <twi_error>
      twi_stop();
    26fa:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_stop>
      break;
    26fe:	d6 c0       	rjmp	.+428    	; 0x28ac <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2700:	80 e3       	ldi	r24, 0x30	; 48
    2702:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <twi_error>
      twi_stop();
    2706:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_stop>
      break;
    270a:	d0 c0       	rjmp	.+416    	; 0x28ac <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    270c:	88 e3       	ldi	r24, 0x38	; 56
    270e:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <twi_error>
      twi_releaseBus();
    2712:	0e 94 04 13 	call	0x2608	; 0x2608 <twi_releaseBus>
      break;
    2716:	ca c0       	rjmp	.+404    	; 0x28ac <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2718:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <twi_masterBufferIndex>
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	98 0f       	add	r25, r24
    2720:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <twi_masterBufferIndex>
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	2b eb       	ldi	r18, 0xBB	; 187
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	f9 01       	movw	r30, r18
    272e:	20 81       	ld	r18, Z
    2730:	88 5e       	subi	r24, 0xE8	; 232
    2732:	98 4f       	sbci	r25, 0xF8	; 248
    2734:	fc 01       	movw	r30, r24
    2736:	20 83       	st	Z, r18
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2738:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <twi_masterBufferIndex>
    273c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <twi_masterBufferLength>
    2740:	98 17       	cp	r25, r24
    2742:	20 f4       	brcc	.+8      	; 0x274c <__vector_24+0x126>
        twi_reply(1);
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    274a:	b0 c0       	rjmp	.+352    	; 0x28ac <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      }
      break;
    2752:	ac c0       	rjmp	.+344    	; 0x28ac <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2754:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <twi_masterBufferIndex>
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	98 0f       	add	r25, r24
    275c:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <twi_masterBufferIndex>
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	2b eb       	ldi	r18, 0xBB	; 187
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	f9 01       	movw	r30, r18
    276a:	20 81       	ld	r18, Z
    276c:	88 5e       	subi	r24, 0xE8	; 232
    276e:	98 4f       	sbci	r25, 0xF8	; 248
    2770:	fc 01       	movw	r30, r24
    2772:	20 83       	st	Z, r18
	if (twi_sendStop)
    2774:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <twi_sendStop>
    2778:	88 23       	and	r24, r24
    277a:	19 f0       	breq	.+6      	; 0x2782 <__vector_24+0x15c>
          twi_stop();
    277c:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    2780:	95 c0       	rjmp	.+298    	; 0x28ac <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2788:	8c eb       	ldi	r24, 0xBC	; 188
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	24 ea       	ldi	r18, 0xA4	; 164
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    2792:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <twi_state>
	}    
	break;
    2796:	8a c0       	rjmp	.+276    	; 0x28ac <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2798:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_stop>
      break;
    279c:	87 c0       	rjmp	.+270    	; 0x28ac <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    27a4:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <twi_rxBufferIndex>
      twi_reply(1);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      break;
    27ae:	7e c0       	rjmp	.+252    	; 0x28ac <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    27b0:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <twi_rxBufferIndex>
    27b4:	80 32       	cpi	r24, 0x20	; 32
    27b6:	a0 f4       	brcc	.+40     	; 0x27e0 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    27b8:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <twi_rxBufferIndex>
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	98 0f       	add	r25, r24
    27c0:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <twi_rxBufferIndex>
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	2b eb       	ldi	r18, 0xBB	; 187
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	f9 01       	movw	r30, r18
    27ce:	20 81       	ld	r18, Z
    27d0:	84 5a       	subi	r24, 0xA4	; 164
    27d2:	98 4f       	sbci	r25, 0xF8	; 248
    27d4:	fc 01       	movw	r30, r24
    27d6:	20 83       	st	Z, r18
        twi_reply(1);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    27de:	66 c0       	rjmp	.+204    	; 0x28ac <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      }
      break;
    27e6:	62 c0       	rjmp	.+196    	; 0x28ac <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    27e8:	0e 94 04 13 	call	0x2608	; 0x2608 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    27ec:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <twi_rxBufferIndex>
    27f0:	80 32       	cpi	r24, 0x20	; 32
    27f2:	40 f4       	brcc	.+16     	; 0x2804 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    27f4:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <twi_rxBufferIndex>
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	84 5a       	subi	r24, 0xA4	; 164
    27fe:	98 4f       	sbci	r25, 0xF8	; 248
    2800:	fc 01       	movw	r30, r24
    2802:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2804:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <twi_onSlaveReceive>
    2808:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <twi_onSlaveReceive+0x1>
    280c:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <twi_rxBufferIndex>
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	bc 01       	movw	r22, r24
    2816:	8c e5       	ldi	r24, 0x5C	; 92
    2818:	97 e0       	ldi	r25, 0x07	; 7
    281a:	f9 01       	movw	r30, r18
    281c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    281e:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <twi_rxBufferIndex>
      break;
    2822:	44 c0       	rjmp	.+136    	; 0x28ac <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      break;
    282a:	40 c0       	rjmp	.+128    	; 0x28ac <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    282c:	84 e0       	ldi	r24, 0x04	; 4
    282e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2832:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2836:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    283a:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <twi_onSlaveTransmit>
    283e:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <twi_onSlaveTransmit+0x1>
    2842:	fc 01       	movw	r30, r24
    2844:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2846:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    284a:	88 23       	and	r24, r24
    284c:	29 f4       	brne	.+10     	; 0x2858 <__vector_24+0x232>
        twi_txBufferLength = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2854:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2858:	8b eb       	ldi	r24, 0xBB	; 187
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	20 91 5a 07 	lds	r18, 0x075A	; 0x80075a <twi_txBufferIndex>
    2860:	31 e0       	ldi	r19, 0x01	; 1
    2862:	32 0f       	add	r19, r18
    2864:	30 93 5a 07 	sts	0x075A, r19	; 0x80075a <twi_txBufferIndex>
    2868:	22 2f       	mov	r18, r18
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	26 5c       	subi	r18, 0xC6	; 198
    286e:	38 4f       	sbci	r19, 0xF8	; 248
    2870:	f9 01       	movw	r30, r18
    2872:	20 81       	ld	r18, Z
    2874:	fc 01       	movw	r30, r24
    2876:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2878:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <twi_txBufferIndex>
    287c:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    2880:	98 17       	cp	r25, r24
    2882:	20 f4       	brcc	.+8      	; 0x288c <__vector_24+0x266>
        twi_reply(1);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    288a:	10 c0       	rjmp	.+32     	; 0x28ac <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      }
      break;
    2892:	0c c0       	rjmp	.+24     	; 0x28ac <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    289a:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <twi_state>
      break;
    289e:	06 c0       	rjmp	.+12     	; 0x28ac <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    28a0:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <twi_error>
      twi_stop();
    28a4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_stop>
      break;
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    28aa:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    28ac:	00 00       	nop
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	ff 91       	pop	r31
    28b4:	ef 91       	pop	r30
    28b6:	bf 91       	pop	r27
    28b8:	af 91       	pop	r26
    28ba:	9f 91       	pop	r25
    28bc:	8f 91       	pop	r24
    28be:	7f 91       	pop	r23
    28c0:	6f 91       	pop	r22
    28c2:	5f 91       	pop	r21
    28c4:	4f 91       	pop	r20
    28c6:	3f 91       	pop	r19
    28c8:	2f 91       	pop	r18
    28ca:	0f 90       	pop	r0
    28cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    28d0:	0f 90       	pop	r0
    28d2:	1f 90       	pop	r1
    28d4:	18 95       	reti

000028d6 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	00 d0       	rcall	.+0      	; 0x28dc <_ZN7TwoWireC1Ev+0x6>
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	0e 94 97 19 	call	0x332e	; 0x332e <_ZN6StreamC1Ev>
    28ec:	2e ee       	ldi	r18, 0xEE	; 238
    28ee:	32 e0       	ldi	r19, 0x02	; 2
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	fc 01       	movw	r30, r24
    28f6:	31 83       	std	Z+1, r19	; 0x01
    28f8:	20 83       	st	Z, r18
{
}
    28fa:	00 00       	nop
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	08 95       	ret

00002906 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	00 d0       	rcall	.+0      	; 0x290c <_ZN7TwoWire5beginEv+0x6>
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    2914:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    2918:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    291c:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2920:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    2924:	0e 94 ba 10 	call	0x2174	; 0x2174 <twi_init>
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
    2928:	87 ea       	ldi	r24, 0xA7	; 167
    292a:	97 e1       	ldi	r25, 0x17	; 23
    292c:	0e 94 bd 12 	call	0x257a	; 0x257a <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
    2930:	8a e5       	ldi	r24, 0x5A	; 90
    2932:	97 e1       	ldi	r25, 0x17	; 23
    2934:	0e 94 aa 12 	call	0x2554	; 0x2554 <twi_attachSlaveRxEvent>
}
    2938:	00 00       	nop
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	00 d0       	rcall	.+0      	; 0x294a <_ZN7TwoWire5beginEh+0x6>
    294a:	1f 92       	push	r1
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	6b 83       	std	Y+3, r22	; 0x03
  begin();
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	0e 94 83 14 	call	0x2906	; 0x2906 <_ZN7TwoWire5beginEv>
  twi_setAddress(address);
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	0e 94 06 11 	call	0x220c	; 0x220c <twi_setAddress>
}
    2964:	00 00       	nop
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	00 d0       	rcall	.+0      	; 0x2978 <_ZN7TwoWire5beginEi+0x6>
    2978:	00 d0       	rcall	.+0      	; 0x297a <_ZN7TwoWire5beginEi+0x8>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	7c 83       	std	Y+4, r23	; 0x04
    2984:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    2986:	2b 81       	ldd	r18, Y+3	; 0x03
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	62 2f       	mov	r22, r18
    298e:	0e 94 a2 14 	call	0x2944	; 0x2944 <_ZN7TwoWire5beginEh>
}
    2992:	00 00       	nop
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <_ZN7TwoWire3endEv+0x6>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    29b0:	0e 94 ed 10 	call	0x21da	; 0x21da <twi_disable>
}
    29b4:	00 00       	nop
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <_ZN7TwoWire8setClockEm+0x6>
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <_ZN7TwoWire8setClockEm+0x8>
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <_ZN7TwoWire8setClockEm+0xa>
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	4b 83       	std	Y+3, r20	; 0x03
    29d4:	5c 83       	std	Y+4, r21	; 0x04
    29d6:	6d 83       	std	Y+5, r22	; 0x05
    29d8:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	ad 81       	ldd	r26, Y+5	; 0x05
    29e0:	be 81       	ldd	r27, Y+6	; 0x06
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 17 11 	call	0x222e	; 0x222e <twi_setFrequency>
}
    29ea:	00 00       	nop
    29ec:	26 96       	adiw	r28, 0x06	; 6
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	08 95       	ret

000029fe <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    29fe:	cf 92       	push	r12
    2a00:	ef 92       	push	r14
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	2b 97       	sbiw	r28, 0x0b	; 11
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	9b 83       	std	Y+3, r25	; 0x03
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
    2a1e:	6c 83       	std	Y+4, r22	; 0x04
    2a20:	4d 83       	std	Y+5, r20	; 0x05
    2a22:	0e 83       	std	Y+6, r16	; 0x06
    2a24:	1f 83       	std	Y+7, r17	; 0x07
    2a26:	28 87       	std	Y+8, r18	; 0x08
    2a28:	39 87       	std	Y+9, r19	; 0x09
    2a2a:	ea 86       	std	Y+10, r14	; 0x0a
    2a2c:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    2a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a30:	88 23       	and	r24, r24
    2a32:	e9 f1       	breq	.+122    	; 0x2aae <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	6c 81       	ldd	r22, Y+4	; 0x04
    2a3a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    2a3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a40:	84 30       	cpi	r24, 0x04	; 4
    2a42:	10 f0       	brcs	.+4      	; 0x2a48 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2a48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a4a:	9f ef       	ldi	r25, 0xFF	; 255
    2a4c:	98 0f       	add	r25, r24
    2a4e:	9a 87       	std	Y+10, r25	; 0x0a
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	88 23       	and	r24, r24
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	99 23       	and	r25, r25
    2a5a:	21 f1       	breq	.+72     	; 0x2aa4 <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	fc 01       	movw	r30, r24
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	fc 01       	movw	r30, r24
    2a68:	20 81       	ld	r18, Z
    2a6a:	31 81       	ldd	r19, Z+1	; 0x01
    2a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	ac 01       	movw	r20, r24
    2a74:	44 0f       	add	r20, r20
    2a76:	55 1f       	adc	r21, r21
    2a78:	44 0f       	add	r20, r20
    2a7a:	55 1f       	adc	r21, r21
    2a7c:	44 0f       	add	r20, r20
    2a7e:	55 1f       	adc	r21, r21
    2a80:	8e 81       	ldd	r24, Y+6	; 0x06
    2a82:	9f 81       	ldd	r25, Y+7	; 0x07
    2a84:	a8 85       	ldd	r26, Y+8	; 0x08
    2a86:	b9 85       	ldd	r27, Y+9	; 0x09
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <_ZN7TwoWire11requestFromEhhmhh+0x94>
    2a8a:	b6 95       	lsr	r27
    2a8c:	a7 95       	ror	r26
    2a8e:	97 95       	ror	r25
    2a90:	87 95       	ror	r24
    2a92:	4a 95       	dec	r20
    2a94:	d2 f7       	brpl	.-12     	; 0x2a8a <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    2a96:	48 2f       	mov	r20, r24
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	64 2f       	mov	r22, r20
    2a9e:	f9 01       	movw	r30, r18
    2aa0:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2aa2:	d2 cf       	rjmp	.-92     	; 0x2a48 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	81 32       	cpi	r24, 0x21	; 33
    2ab2:	10 f0       	brcs	.+4      	; 0x2ab8 <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    2ab4:	80 e2       	ldi	r24, 0x20	; 32
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2ab8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aba:	4d 81       	ldd	r20, Y+5	; 0x05
    2abc:	6e e7       	ldi	r22, 0x7E	; 126
    2abe:	77 e0       	ldi	r23, 0x07	; 7
    2ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac2:	0e 94 46 11 	call	0x228c	; 0x228c <twi_readFrom>
    2ac6:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2ac8:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>

  return read;
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad4:	2b 96       	adiw	r28, 0x0b	; 11
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ef 90       	pop	r14
    2aea:	cf 90       	pop	r12
    2aec:	08 95       	ret

00002aee <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    2aee:	cf 92       	push	r12
    2af0:	ef 92       	push	r14
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <_ZN7TwoWire11requestFromEhhh+0xe>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <_ZN7TwoWire11requestFromEhhh+0x10>
    2afe:	1f 92       	push	r1
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	6b 83       	std	Y+3, r22	; 0x03
    2b0a:	4c 83       	std	Y+4, r20	; 0x04
    2b0c:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	cd 80       	ldd	r12, Y+5	; 0x05
    2b14:	e1 2c       	mov	r14, r1
    2b16:	00 e0       	ldi	r16, 0x00	; 0
    2b18:	10 e0       	ldi	r17, 0x00	; 0
    2b1a:	98 01       	movw	r18, r16
    2b1c:	4c 81       	ldd	r20, Y+4	; 0x04
    2b1e:	6b 81       	ldd	r22, Y+3	; 0x03
    2b20:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN7TwoWire11requestFromEhhmhh>
}
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ef 90       	pop	r14
    2b38:	cf 90       	pop	r12
    2b3a:	08 95       	ret

00002b3c <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <_ZN7TwoWire11requestFromEhh+0x6>
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <_ZN7TwoWire11requestFromEhh+0x8>
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	6b 83       	std	Y+3, r22	; 0x03
    2b4e:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	21 e0       	ldi	r18, 0x01	; 1
    2b56:	4c 81       	ldd	r20, Y+4	; 0x04
    2b58:	6b 81       	ldd	r22, Y+3	; 0x03
    2b5a:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN7TwoWire11requestFromEhhh>
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <_ZN7TwoWire11requestFromEii+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <_ZN7TwoWire11requestFromEii+0x8>
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <_ZN7TwoWire11requestFromEii+0xa>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	7c 83       	std	Y+4, r23	; 0x04
    2b80:	6b 83       	std	Y+3, r22	; 0x03
    2b82:	5e 83       	std	Y+6, r21	; 0x06
    2b84:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2b86:	4d 81       	ldd	r20, Y+5	; 0x05
    2b88:	3b 81       	ldd	r19, Y+3	; 0x03
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	21 e0       	ldi	r18, 0x01	; 1
    2b90:	63 2f       	mov	r22, r19
    2b92:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN7TwoWire11requestFromEhhh>
}
    2b96:	26 96       	adiw	r28, 0x06	; 6
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	08 95       	ret

00002ba8 <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	28 97       	sbiw	r28, 0x08	; 8
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	7c 83       	std	Y+4, r23	; 0x04
    2bc2:	6b 83       	std	Y+3, r22	; 0x03
    2bc4:	5e 83       	std	Y+6, r21	; 0x06
    2bc6:	4d 83       	std	Y+5, r20	; 0x05
    2bc8:	38 87       	std	Y+8, r19	; 0x08
    2bca:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    2bcc:	2f 81       	ldd	r18, Y+7	; 0x07
    2bce:	4d 81       	ldd	r20, Y+5	; 0x05
    2bd0:	3b 81       	ldd	r19, Y+3	; 0x03
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	63 2f       	mov	r22, r19
    2bd8:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN7TwoWire11requestFromEhhh>
}
    2bdc:	28 96       	adiw	r28, 0x08	; 8
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret

00002bee <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <_ZN7TwoWire17beginTransmissionEh+0x6>
    2bf4:	1f 92       	push	r1
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2c0c:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2c10:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>
}
    2c14:	00 00       	nop
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	08 95       	ret

00002c22 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <_ZN7TwoWire17beginTransmissionEi+0x6>
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <_ZN7TwoWire17beginTransmissionEi+0x8>
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	7c 83       	std	Y+4, r23	; 0x04
    2c34:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    2c36:	2b 81       	ldd	r18, Y+3	; 0x03
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	62 2f       	mov	r22, r18
    2c3e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire17beginTransmissionEh>
}
    2c42:	00 00       	nop
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	08 95       	ret

00002c52 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2c52:	0f 93       	push	r16
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <_ZN7TwoWire15endTransmissionEh+0x8>
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <_ZN7TwoWire15endTransmissionEh+0xa>
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	9b 83       	std	Y+3, r25	; 0x03
    2c62:	8a 83       	std	Y+2, r24	; 0x02
    2c64:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2c66:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>
    2c6a:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <_ZN7TwoWire9txAddressE>
    2c6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c70:	21 e0       	ldi	r18, 0x01	; 1
    2c72:	49 2f       	mov	r20, r25
    2c74:	61 ea       	ldi	r22, 0xA1	; 161
    2c76:	77 e0       	ldi	r23, 0x07	; 7
    2c78:	0e 94 cb 11 	call	0x2396	; 0x2396 <twi_writeTo>
    2c7c:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2c7e:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2c82:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    2c86:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <_ZN7TwoWire12transmittingE>
  return ret;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	0f 91       	pop	r16
    2c9a:	08 95       	ret

00002c9c <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <_ZN7TwoWire15endTransmissionEv+0x6>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN7TwoWire15endTransmissionEh>
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <_ZN7TwoWire5writeEh+0x6>
    2cc4:	1f 92       	push	r1
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2cd0:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <_ZN7TwoWire12transmittingE>
    2cd4:	88 23       	and	r24, r24
    2cd6:	01 f1       	breq	.+64     	; 0x2d18 <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2cd8:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>
    2cdc:	80 32       	cpi	r24, 0x20	; 32
    2cde:	48 f0       	brcs	.+18     	; 0x2cf2 <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN5Print13setWriteErrorEi>
      return 0;
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	1a c0       	rjmp	.+52     	; 0x2d26 <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2cf2:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
    2cf6:	88 2f       	mov	r24, r24
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cfc:	8f 55       	subi	r24, 0x5F	; 95
    2cfe:	98 4f       	sbci	r25, 0xF8	; 248
    2d00:	fc 01       	movw	r30, r24
    2d02:	20 83       	st	Z, r18
    ++txBufferIndex;
    2d04:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
    2d08:	8f 5f       	subi	r24, 0xFF	; 255
    2d0a:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2d0e:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
    2d12:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>
    2d16:	05 c0       	rjmp	.+10     	; 0x2d22 <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2d18:	ce 01       	movw	r24, r28
    2d1a:	03 96       	adiw	r24, 0x03	; 3
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <twi_transmit>
  }
  return 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	28 97       	sbiw	r28, 0x08	; 8
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	7e 83       	std	Y+6, r23	; 0x06
    2d4c:	6d 83       	std	Y+5, r22	; 0x05
    2d4e:	58 87       	std	Y+8, r21	; 0x08
    2d50:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    2d52:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <_ZN7TwoWire12transmittingE>
    2d56:	88 23       	and	r24, r24
    2d58:	21 f1       	breq	.+72     	; 0x2da2 <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2d5a:	1a 82       	std	Y+2, r1	; 0x02
    2d5c:	19 82       	std	Y+1, r1	; 0x01
    2d5e:	29 81       	ldd	r18, Y+1	; 0x01
    2d60:	3a 81       	ldd	r19, Y+2	; 0x02
    2d62:	8f 81       	ldd	r24, Y+7	; 0x07
    2d64:	98 85       	ldd	r25, Y+8	; 0x08
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	08 f5       	brcc	.+66     	; 0x2dae <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	fc 01       	movw	r30, r24
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	fc 01       	movw	r30, r24
    2d78:	20 81       	ld	r18, Z
    2d7a:	31 81       	ldd	r19, Z+1	; 0x01
    2d7c:	4d 81       	ldd	r20, Y+5	; 0x05
    2d7e:	5e 81       	ldd	r21, Y+6	; 0x06
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	84 0f       	add	r24, r20
    2d86:	95 1f       	adc	r25, r21
    2d88:	fc 01       	movw	r30, r24
    2d8a:	40 81       	ld	r20, Z
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d90:	64 2f       	mov	r22, r20
    2d92:	f9 01       	movw	r30, r18
    2d94:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	01 96       	adiw	r24, 0x01	; 1
    2d9c:	9a 83       	std	Y+2, r25	; 0x02
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	de cf       	rjmp	.-68     	; 0x2d5e <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2da2:	2f 81       	ldd	r18, Y+7	; 0x07
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	62 2f       	mov	r22, r18
    2daa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <twi_transmit>
  }
  return quantity;
    2dae:	8f 81       	ldd	r24, Y+7	; 0x07
    2db0:	98 85       	ldd	r25, Y+8	; 0x08
}
    2db2:	28 96       	adiw	r28, 0x08	; 8
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	08 95       	ret

00002dc4 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <_ZN7TwoWire9availableEv+0x6>
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	9a 83       	std	Y+2, r25	; 0x02
    2dd0:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2dd2:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2dde:	88 2f       	mov	r24, r24
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	a9 01       	movw	r20, r18
    2de4:	48 1b       	sub	r20, r24
    2de6:	59 0b       	sbc	r21, r25
    2de8:	ca 01       	movw	r24, r20
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	08 95       	ret

00002df4 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <_ZN7TwoWire4readEv+0x6>
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <_ZN7TwoWire4readEv+0x8>
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2e04:	8f ef       	ldi	r24, 0xFF	; 255
    2e06:	9f ef       	ldi	r25, 0xFF	; 255
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2e0c:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2e10:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>
    2e14:	98 17       	cp	r25, r24
    2e16:	88 f4       	brcc	.+34     	; 0x2e3a <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    2e18:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	82 58       	subi	r24, 0x82	; 130
    2e22:	98 4f       	sbci	r25, 0xF8	; 248
    2e24:	fc 01       	movw	r30, r24
    2e26:	80 81       	ld	r24, Z
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9a 83       	std	Y+2, r25	; 0x02
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    2e30:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2e34:	8f 5f       	subi	r24, 0xFF	; 255
    2e36:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	08 95       	ret

00002e4c <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <_ZN7TwoWire4peekEv+0x6>
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <_ZN7TwoWire4peekEv+0x8>
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	9c 83       	std	Y+4, r25	; 0x04
    2e5a:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2e5c:	8f ef       	ldi	r24, 0xFF	; 255
    2e5e:	9f ef       	ldi	r25, 0xFF	; 255
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    2e64:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2e68:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>
    2e6c:	98 17       	cp	r25, r24
    2e6e:	60 f4       	brcc	.+24     	; 0x2e88 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    2e70:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2e74:	88 2f       	mov	r24, r24
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	82 58       	subi	r24, 0x82	; 130
    2e7a:	98 4f       	sbci	r25, 0xF8	; 248
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	80 81       	ld	r24, Z
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	08 95       	ret

00002e9a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <_ZN7TwoWire5flushEv+0x6>
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    2ea8:	00 00       	nop
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	08 95       	ret

00002eb4 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2ebc:	1f 92       	push	r1
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	9b 83       	std	Y+3, r25	; 0x03
    2ec4:	8a 83       	std	Y+2, r24	; 0x02
    2ec6:	7d 83       	std	Y+5, r23	; 0x05
    2ec8:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2eca:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <_ZN7TwoWire14user_onReceiveE>
    2ece:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <_ZN7TwoWire14user_onReceiveE+0x1>
    2ed2:	89 2b       	or	r24, r25
    2ed4:	89 f1       	breq	.+98     	; 0x2f38 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2ed6:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
    2eda:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>
    2ede:	98 17       	cp	r25, r24
    2ee0:	68 f1       	brcs	.+90     	; 0x2f3c <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2ee2:	19 82       	std	Y+1, r1	; 0x01
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	8c 81       	ldd	r24, Y+4	; 0x04
    2eec:	9d 81       	ldd	r25, Y+5	; 0x05
    2eee:	28 17       	cp	r18, r24
    2ef0:	39 07       	cpc	r19, r25
    2ef2:	a4 f4       	brge	.+40     	; 0x2f1c <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	29 81       	ldd	r18, Y+1	; 0x01
    2efc:	22 2f       	mov	r18, r18
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a 81       	ldd	r20, Y+2	; 0x02
    2f02:	5b 81       	ldd	r21, Y+3	; 0x03
    2f04:	24 0f       	add	r18, r20
    2f06:	35 1f       	adc	r19, r21
    2f08:	f9 01       	movw	r30, r18
    2f0a:	20 81       	ld	r18, Z
    2f0c:	82 58       	subi	r24, 0x82	; 130
    2f0e:	98 4f       	sbci	r25, 0xF8	; 248
    2f10:	fc 01       	movw	r30, r24
    2f12:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	89 83       	std	Y+1, r24	; 0x01
    2f1a:	e4 cf       	rjmp	.-56     	; 0x2ee4 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2f1c:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2f20:	8c 81       	ldd	r24, Y+4	; 0x04
    2f22:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    2f26:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <_ZN7TwoWire14user_onReceiveE>
    2f2a:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <_ZN7TwoWire14user_onReceiveE+0x1>
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	9d 81       	ldd	r25, Y+5	; 0x05
    2f32:	f9 01       	movw	r30, r18
    2f34:	09 95       	icall
    2f36:	03 c0       	rjmp	.+6      	; 0x2f3e <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    2f38:	00 00       	nop
    2f3a:	01 c0       	rjmp	.+2      	; 0x2f3e <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    2f3c:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	08 95       	ret

00002f4e <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    2f56:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <_ZN7TwoWire14user_onRequestE>
    2f5a:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <_ZN7TwoWire14user_onRequestE+0x1>
    2f5e:	89 2b       	or	r24, r25
    2f60:	59 f0       	breq	.+22     	; 0x2f78 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2f62:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2f66:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    2f6a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <_ZN7TwoWire14user_onRequestE>
    2f6e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <_ZN7TwoWire14user_onRequestE+0x1>
    2f72:	fc 01       	movw	r30, r24
    2f74:	09 95       	icall
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    2f78:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	08 95       	ret

00002f80 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <_ZN7TwoWire9onReceiveEPFviE+0x6>
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <_ZN7TwoWire9onReceiveEPFviE+0x8>
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	9a 83       	std	Y+2, r25	; 0x02
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	7c 83       	std	Y+4, r23	; 0x04
    2f92:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <_ZN7TwoWire14user_onReceiveE+0x1>
    2f9c:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <_ZN7TwoWire14user_onReceiveE>
}
    2fa0:	00 00       	nop
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	08 95       	ret

00002fb0 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <_ZN7TwoWire9onRequestEPFvvE+0x6>
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <_ZN7TwoWire9onRequestEPFvvE+0x8>
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	7c 83       	std	Y+4, r23	; 0x04
    2fc2:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc8:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <_ZN7TwoWire14user_onRequestE+0x1>
    2fcc:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <_ZN7TwoWire14user_onRequestE>
}
    2fd0:	00 00       	nop
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	08 95       	ret

00002fe0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	7c 83       	std	Y+4, r23	; 0x04
    2ff2:	6b 83       	std	Y+3, r22	; 0x03
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	41 f4       	brne	.+16     	; 0x300c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	21 f4       	brne	.+8      	; 0x300c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	97 e0       	ldi	r25, 0x07	; 7
    3008:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN7TwoWireC1Ev>
    300c:	00 00       	nop
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	08 95       	ret

0000301c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	6f ef       	ldi	r22, 0xFF	; 255
    3026:	7f ef       	ldi	r23, 0xFF	; 255
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_Z41__static_initialization_and_destruction_0ii>
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	08 95       	ret

00003036 <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	00 d0       	rcall	.+0      	; 0x303c <_ZN5PrintaSERKS_+0x6>
    303c:	00 d0       	rcall	.+0      	; 0x303e <_ZN5PrintaSERKS_+0x8>
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
    3046:	7c 83       	std	Y+4, r23	; 0x04
    3048:	6b 83       	std	Y+3, r22	; 0x03
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	fc 01       	movw	r30, r24
    3050:	22 81       	ldd	r18, Z+2	; 0x02
    3052:	33 81       	ldd	r19, Z+3	; 0x03
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	9a 81       	ldd	r25, Y+2	; 0x02
    3058:	fc 01       	movw	r30, r24
    305a:	33 83       	std	Z+3, r19	; 0x03
    305c:	22 83       	std	Z+2, r18	; 0x02
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	9a 81       	ldd	r25, Y+2	; 0x02
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	08 95       	ret

00003070 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	00 d0       	rcall	.+0      	; 0x3076 <_ZN6StreamaSERKS_+0x6>
    3076:	00 d0       	rcall	.+0      	; 0x3078 <_ZN6StreamaSERKS_+0x8>
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
    3080:	7c 83       	std	Y+4, r23	; 0x04
    3082:	6b 83       	std	Y+3, r22	; 0x03
    3084:	2b 81       	ldd	r18, Y+3	; 0x03
    3086:	3c 81       	ldd	r19, Y+4	; 0x04
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	b9 01       	movw	r22, r18
    308e:	0e 94 1b 18 	call	0x3036	; 0x3036 <_ZN5PrintaSERKS_>
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	fc 01       	movw	r30, r24
    3098:	84 81       	ldd	r24, Z+4	; 0x04
    309a:	95 81       	ldd	r25, Z+5	; 0x05
    309c:	a6 81       	ldd	r26, Z+6	; 0x06
    309e:	b7 81       	ldd	r27, Z+7	; 0x07
    30a0:	29 81       	ldd	r18, Y+1	; 0x01
    30a2:	3a 81       	ldd	r19, Y+2	; 0x02
    30a4:	f9 01       	movw	r30, r18
    30a6:	84 83       	std	Z+4, r24	; 0x04
    30a8:	95 83       	std	Z+5, r25	; 0x05
    30aa:	a6 83       	std	Z+6, r26	; 0x06
    30ac:	b7 83       	std	Z+7, r27	; 0x07
    30ae:	8b 81       	ldd	r24, Y+3	; 0x03
    30b0:	9c 81       	ldd	r25, Y+4	; 0x04
    30b2:	fc 01       	movw	r30, r24
    30b4:	80 85       	ldd	r24, Z+8	; 0x08
    30b6:	91 85       	ldd	r25, Z+9	; 0x09
    30b8:	a2 85       	ldd	r26, Z+10	; 0x0a
    30ba:	b3 85       	ldd	r27, Z+11	; 0x0b
    30bc:	29 81       	ldd	r18, Y+1	; 0x01
    30be:	3a 81       	ldd	r19, Y+2	; 0x02
    30c0:	f9 01       	movw	r30, r18
    30c2:	80 87       	std	Z+8, r24	; 0x08
    30c4:	91 87       	std	Z+9, r25	; 0x09
    30c6:	a2 87       	std	Z+10, r26	; 0x0a
    30c8:	b3 87       	std	Z+11, r27	; 0x0b
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	9a 81       	ldd	r25, Y+2	; 0x02
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	08 95       	ret

000030dc <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <_ZN13Adafruit_FONAaSERKS_+0x6>
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <_ZN13Adafruit_FONAaSERKS_+0x8>
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	9a 83       	std	Y+2, r25	; 0x02
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	7c 83       	std	Y+4, r23	; 0x04
    30ee:	6b 83       	std	Y+3, r22	; 0x03
    30f0:	2b 81       	ldd	r18, Y+3	; 0x03
    30f2:	3c 81       	ldd	r19, Y+4	; 0x04
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	b9 01       	movw	r22, r18
    30fa:	0e 94 38 18 	call	0x3070	; 0x3070 <_ZN6StreamaSERKS_>
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	9c 81       	ldd	r25, Y+4	; 0x04
    3102:	fc 01       	movw	r30, r24
    3104:	24 85       	ldd	r18, Z+12	; 0x0c
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	fc 01       	movw	r30, r24
    310c:	24 87       	std	Z+12, r18	; 0x0c
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	fc 01       	movw	r30, r24
    3114:	25 85       	ldd	r18, Z+13	; 0x0d
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	fc 01       	movw	r30, r24
    311c:	25 87       	std	Z+13, r18	; 0x0d
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	ac 01       	movw	r20, r24
    3124:	42 5f       	subi	r20, 0xF2	; 242
    3126:	5f 4f       	sbci	r21, 0xFF	; 255
    3128:	8e ef       	ldi	r24, 0xFE	; 254
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	22 5f       	subi	r18, 0xF2	; 242
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	8f 3f       	cpi	r24, 0xFF	; 255
    3136:	ff ef       	ldi	r31, 0xFF	; 255
    3138:	9f 07       	cpc	r25, r31
    313a:	51 f0       	breq	.+20     	; 0x3150 <_ZN13Adafruit_FONAaSERKS_+0x74>
    313c:	f9 01       	movw	r30, r18
    313e:	60 81       	ld	r22, Z
    3140:	fa 01       	movw	r30, r20
    3142:	60 83       	st	Z, r22
    3144:	4f 5f       	subi	r20, 0xFF	; 255
    3146:	5f 4f       	sbci	r21, 0xFF	; 255
    3148:	2f 5f       	subi	r18, 0xFF	; 255
    314a:	3f 4f       	sbci	r19, 0xFF	; 255
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f2 cf       	rjmp	.-28     	; 0x3134 <_ZN13Adafruit_FONAaSERKS_+0x58>
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	83 5f       	subi	r24, 0xF3	; 243
    3156:	9e 4f       	sbci	r25, 0xFE	; 254
    3158:	fc 01       	movw	r30, r24
    315a:	20 81       	ld	r18, Z
    315c:	31 81       	ldd	r19, Z+1	; 0x01
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	9a 81       	ldd	r25, Y+2	; 0x02
    3162:	83 5f       	subi	r24, 0xF3	; 243
    3164:	9e 4f       	sbci	r25, 0xFE	; 254
    3166:	fc 01       	movw	r30, r24
    3168:	31 83       	std	Z+1, r19	; 0x01
    316a:	20 83       	st	Z, r18
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	81 5f       	subi	r24, 0xF1	; 241
    3172:	9e 4f       	sbci	r25, 0xFE	; 254
    3174:	fc 01       	movw	r30, r24
    3176:	20 81       	ld	r18, Z
    3178:	31 81       	ldd	r19, Z+1	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	81 5f       	subi	r24, 0xF1	; 241
    3180:	9e 4f       	sbci	r25, 0xFE	; 254
    3182:	fc 01       	movw	r30, r24
    3184:	31 83       	std	Z+1, r19	; 0x01
    3186:	20 83       	st	Z, r18
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	8f 5e       	subi	r24, 0xEF	; 239
    318e:	9e 4f       	sbci	r25, 0xFE	; 254
    3190:	fc 01       	movw	r30, r24
    3192:	20 81       	ld	r18, Z
    3194:	31 81       	ldd	r19, Z+1	; 0x01
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	8f 5e       	subi	r24, 0xEF	; 239
    319c:	9e 4f       	sbci	r25, 0xFE	; 254
    319e:	fc 01       	movw	r30, r24
    31a0:	31 83       	std	Z+1, r19	; 0x01
    31a2:	20 83       	st	Z, r18
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	9c 81       	ldd	r25, Y+4	; 0x04
    31a8:	8d 5e       	subi	r24, 0xED	; 237
    31aa:	9e 4f       	sbci	r25, 0xFE	; 254
    31ac:	fc 01       	movw	r30, r24
    31ae:	20 81       	ld	r18, Z
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	8d 5e       	subi	r24, 0xED	; 237
    31b6:	9e 4f       	sbci	r25, 0xFE	; 254
    31b8:	fc 01       	movw	r30, r24
    31ba:	20 83       	st	Z, r18
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	8c 5e       	subi	r24, 0xEC	; 236
    31c2:	9e 4f       	sbci	r25, 0xFE	; 254
    31c4:	fc 01       	movw	r30, r24
    31c6:	20 81       	ld	r18, Z
    31c8:	31 81       	ldd	r19, Z+1	; 0x01
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9a 81       	ldd	r25, Y+2	; 0x02
    31ce:	8c 5e       	subi	r24, 0xEC	; 236
    31d0:	9e 4f       	sbci	r25, 0xFE	; 254
    31d2:	fc 01       	movw	r30, r24
    31d4:	31 83       	std	Z+1, r19	; 0x01
    31d6:	20 83       	st	Z, r18
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	8a 5e       	subi	r24, 0xEA	; 234
    31de:	9e 4f       	sbci	r25, 0xFE	; 254
    31e0:	fc 01       	movw	r30, r24
    31e2:	20 81       	ld	r18, Z
    31e4:	31 81       	ldd	r19, Z+1	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	8a 5e       	subi	r24, 0xEA	; 234
    31ec:	9e 4f       	sbci	r25, 0xFE	; 254
    31ee:	fc 01       	movw	r30, r24
    31f0:	31 83       	std	Z+1, r19	; 0x01
    31f2:	20 83       	st	Z, r18
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	88 5e       	subi	r24, 0xE8	; 232
    31fa:	9e 4f       	sbci	r25, 0xFE	; 254
    31fc:	fc 01       	movw	r30, r24
    31fe:	20 81       	ld	r18, Z
    3200:	31 81       	ldd	r19, Z+1	; 0x01
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	9a 81       	ldd	r25, Y+2	; 0x02
    3206:	88 5e       	subi	r24, 0xE8	; 232
    3208:	9e 4f       	sbci	r25, 0xFE	; 254
    320a:	fc 01       	movw	r30, r24
    320c:	31 83       	std	Z+1, r19	; 0x01
    320e:	20 83       	st	Z, r18
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	08 95       	ret

00003222 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	00 d0       	rcall	.+0      	; 0x3228 <_ZN14HardwareSerial5beginEm+0x6>
    3228:	00 d0       	rcall	.+0      	; 0x322a <_ZN14HardwareSerial5beginEm+0x8>
    322a:	00 d0       	rcall	.+0      	; 0x322c <_ZN14HardwareSerial5beginEm+0xa>
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	4b 83       	std	Y+3, r20	; 0x03
    3236:	5c 83       	std	Y+4, r21	; 0x04
    3238:	6d 83       	std	Y+5, r22	; 0x05
    323a:	7e 83       	std	Y+6, r23	; 0x06
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	9c 81       	ldd	r25, Y+4	; 0x04
    3240:	ad 81       	ldd	r26, Y+5	; 0x05
    3242:	be 81       	ldd	r27, Y+6	; 0x06
    3244:	e9 81       	ldd	r30, Y+1	; 0x01
    3246:	fa 81       	ldd	r31, Y+2	; 0x02
    3248:	26 e0       	ldi	r18, 0x06	; 6
    324a:	ac 01       	movw	r20, r24
    324c:	bd 01       	movw	r22, r26
    324e:	cf 01       	movw	r24, r30
    3250:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN14HardwareSerial5beginEmh>
    3254:	00 00       	nop
    3256:	26 96       	adiw	r28, 0x06	; 6
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	08 95       	ret

00003268 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	00 d0       	rcall	.+0      	; 0x326e <_ZN7TwoWire5writeEi+0x6>
    326e:	00 d0       	rcall	.+0      	; 0x3270 <_ZN7TwoWire5writeEi+0x8>
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	9a 83       	std	Y+2, r25	; 0x02
    3276:	89 83       	std	Y+1, r24	; 0x01
    3278:	7c 83       	std	Y+4, r23	; 0x04
    327a:	6b 83       	std	Y+3, r22	; 0x03
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	fc 01       	movw	r30, r24
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	fc 01       	movw	r30, r24
    3288:	20 81       	ld	r18, Z
    328a:	31 81       	ldd	r19, Z+1	; 0x01
    328c:	4b 81       	ldd	r20, Y+3	; 0x03
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	64 2f       	mov	r22, r20
    3294:	f9 01       	movw	r30, r18
    3296:	09 95       	icall
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	08 95       	ret

000032a6 <_ZN10SensorDataC1Ev>:
//};


//TODO: All these to be uint16_t ?

struct SensorData{
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <_ZN10SensorDataC1Ev+0x6>
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	21 e0       	ldi	r18, 0x01	; 1
    32ba:	fc 01       	movw	r30, r24
    32bc:	20 83       	st	Z, r18
    32be:	00 00       	nop
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	08 95       	ret

000032ca <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <_ZN5Print13setWriteErrorEi+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <_ZN5Print13setWriteErrorEi+0x8>
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	7c 83       	std	Y+4, r23	; 0x04
    32dc:	6b 83       	std	Y+3, r22	; 0x03
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	2b 81       	ldd	r18, Y+3	; 0x03
    32e4:	3c 81       	ldd	r19, Y+4	; 0x04
    32e6:	fc 01       	movw	r30, r24
    32e8:	33 83       	std	Z+3, r19	; 0x03
    32ea:	22 83       	std	Z+2, r18	; 0x02
    32ec:	00 00       	nop
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	08 95       	ret

000032fc <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	00 d0       	rcall	.+0      	; 0x3302 <_ZN5PrintC1Ev+0x6>
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	9a 83       	std	Y+2, r25	; 0x02
    3308:	89 83       	std	Y+1, r24	; 0x01
    330a:	2f e2       	ldi	r18, 0x2F	; 47
    330c:	33 e0       	ldi	r19, 0x03	; 3
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	fc 01       	movw	r30, r24
    3314:	31 83       	std	Z+1, r19	; 0x01
    3316:	20 83       	st	Z, r18
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	fc 01       	movw	r30, r24
    331e:	13 82       	std	Z+3, r1	; 0x03
    3320:	12 82       	std	Z+2, r1	; 0x02
    3322:	00 00       	nop
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	df 91       	pop	r29
    332a:	cf 91       	pop	r28
    332c:	08 95       	ret

0000332e <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
    3332:	00 d0       	rcall	.+0      	; 0x3334 <_ZN6StreamC1Ev+0x6>
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	9a 83       	std	Y+2, r25	; 0x02
    333a:	89 83       	std	Y+1, r24	; 0x01
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	9a 81       	ldd	r25, Y+2	; 0x02
    3340:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5PrintC1Ev>
    3344:	2e ef       	ldi	r18, 0xFE	; 254
    3346:	32 e0       	ldi	r19, 0x02	; 2
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	9a 81       	ldd	r25, Y+2	; 0x02
    334c:	fc 01       	movw	r30, r24
    334e:	31 83       	std	Z+1, r19	; 0x01
    3350:	20 83       	st	Z, r18
    3352:	29 81       	ldd	r18, Y+1	; 0x01
    3354:	3a 81       	ldd	r19, Y+2	; 0x02
    3356:	88 ee       	ldi	r24, 0xE8	; 232
    3358:	93 e0       	ldi	r25, 0x03	; 3
    335a:	a0 e0       	ldi	r26, 0x00	; 0
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	f9 01       	movw	r30, r18
    3360:	84 83       	std	Z+4, r24	; 0x04
    3362:	95 83       	std	Z+5, r25	; 0x05
    3364:	a6 83       	std	Z+6, r26	; 0x06
    3366:	b7 83       	std	Z+7, r27	; 0x07
    3368:	00 00       	nop
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	08 95       	ret

00003374 <__floatunsisf>:
    3374:	e8 94       	clt
    3376:	09 c0       	rjmp	.+18     	; 0x338a <__floatsisf+0x12>

00003378 <__floatsisf>:
    3378:	97 fb       	bst	r25, 7
    337a:	3e f4       	brtc	.+14     	; 0x338a <__floatsisf+0x12>
    337c:	90 95       	com	r25
    337e:	80 95       	com	r24
    3380:	70 95       	com	r23
    3382:	61 95       	neg	r22
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	8f 4f       	sbci	r24, 0xFF	; 255
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	99 23       	and	r25, r25
    338c:	a9 f0       	breq	.+42     	; 0x33b8 <__floatsisf+0x40>
    338e:	f9 2f       	mov	r31, r25
    3390:	96 e9       	ldi	r25, 0x96	; 150
    3392:	bb 27       	eor	r27, r27
    3394:	93 95       	inc	r25
    3396:	f6 95       	lsr	r31
    3398:	87 95       	ror	r24
    339a:	77 95       	ror	r23
    339c:	67 95       	ror	r22
    339e:	b7 95       	ror	r27
    33a0:	f1 11       	cpse	r31, r1
    33a2:	f8 cf       	rjmp	.-16     	; 0x3394 <__floatsisf+0x1c>
    33a4:	fa f4       	brpl	.+62     	; 0x33e4 <__floatsisf+0x6c>
    33a6:	bb 0f       	add	r27, r27
    33a8:	11 f4       	brne	.+4      	; 0x33ae <__floatsisf+0x36>
    33aa:	60 ff       	sbrs	r22, 0
    33ac:	1b c0       	rjmp	.+54     	; 0x33e4 <__floatsisf+0x6c>
    33ae:	6f 5f       	subi	r22, 0xFF	; 255
    33b0:	7f 4f       	sbci	r23, 0xFF	; 255
    33b2:	8f 4f       	sbci	r24, 0xFF	; 255
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	16 c0       	rjmp	.+44     	; 0x33e4 <__floatsisf+0x6c>
    33b8:	88 23       	and	r24, r24
    33ba:	11 f0       	breq	.+4      	; 0x33c0 <__floatsisf+0x48>
    33bc:	96 e9       	ldi	r25, 0x96	; 150
    33be:	11 c0       	rjmp	.+34     	; 0x33e2 <__floatsisf+0x6a>
    33c0:	77 23       	and	r23, r23
    33c2:	21 f0       	breq	.+8      	; 0x33cc <__floatsisf+0x54>
    33c4:	9e e8       	ldi	r25, 0x8E	; 142
    33c6:	87 2f       	mov	r24, r23
    33c8:	76 2f       	mov	r23, r22
    33ca:	05 c0       	rjmp	.+10     	; 0x33d6 <__floatsisf+0x5e>
    33cc:	66 23       	and	r22, r22
    33ce:	71 f0       	breq	.+28     	; 0x33ec <__floatsisf+0x74>
    33d0:	96 e8       	ldi	r25, 0x86	; 134
    33d2:	86 2f       	mov	r24, r22
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	60 e0       	ldi	r22, 0x00	; 0
    33d8:	2a f0       	brmi	.+10     	; 0x33e4 <__floatsisf+0x6c>
    33da:	9a 95       	dec	r25
    33dc:	66 0f       	add	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	88 1f       	adc	r24, r24
    33e2:	da f7       	brpl	.-10     	; 0x33da <__floatsisf+0x62>
    33e4:	88 0f       	add	r24, r24
    33e6:	96 95       	lsr	r25
    33e8:	87 95       	ror	r24
    33ea:	97 f9       	bld	r25, 7
    33ec:	08 95       	ret

000033ee <__cxa_pure_virtual>:
    33ee:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <abort>

000033f2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    33f2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    33f4:	91 8d       	ldd	r25, Z+25	; 0x19
    33f6:	22 8d       	ldd	r18, Z+26	; 0x1a
    33f8:	89 2f       	mov	r24, r25
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	80 5c       	subi	r24, 0xC0	; 192
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	82 1b       	sub	r24, r18
    3402:	91 09       	sbc	r25, r1
}
    3404:	8f 73       	andi	r24, 0x3F	; 63
    3406:	99 27       	eor	r25, r25
    3408:	08 95       	ret

0000340a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    340a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    340c:	91 8d       	ldd	r25, Z+25	; 0x19
    340e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3410:	98 17       	cp	r25, r24
    3412:	31 f0       	breq	.+12     	; 0x3420 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3414:	82 8d       	ldd	r24, Z+26	; 0x1a
    3416:	e8 0f       	add	r30, r24
    3418:	f1 1d       	adc	r31, r1
    341a:	85 8d       	ldd	r24, Z+29	; 0x1d
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3420:	8f ef       	ldi	r24, 0xFF	; 255
    3422:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3424:	08 95       	ret

00003426 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3426:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3428:	91 8d       	ldd	r25, Z+25	; 0x19
    342a:	82 8d       	ldd	r24, Z+26	; 0x1a
    342c:	98 17       	cp	r25, r24
    342e:	61 f0       	breq	.+24     	; 0x3448 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3430:	82 8d       	ldd	r24, Z+26	; 0x1a
    3432:	df 01       	movw	r26, r30
    3434:	a8 0f       	add	r26, r24
    3436:	b1 1d       	adc	r27, r1
    3438:	5d 96       	adiw	r26, 0x1d	; 29
    343a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    343c:	92 8d       	ldd	r25, Z+26	; 0x1a
    343e:	9f 5f       	subi	r25, 0xFF	; 255
    3440:	9f 73       	andi	r25, 0x3F	; 63
    3442:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    344c:	08 95       	ret

0000344e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    344e:	8c e7       	ldi	r24, 0x7C	; 124
    3450:	9b e1       	ldi	r25, 0x1B	; 27
    3452:	89 2b       	or	r24, r25
    3454:	49 f0       	breq	.+18     	; 0x3468 <_Z14serialEventRunv+0x1a>
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	89 2b       	or	r24, r25
    345c:	29 f0       	breq	.+10     	; 0x3468 <_Z14serialEventRunv+0x1a>
    345e:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <_Z17Serial0_availablev>
    3462:	81 11       	cpse	r24, r1
    3464:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3468:	08 95       	ret

0000346a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    346a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    346c:	84 8d       	ldd	r24, Z+28	; 0x1c
    346e:	df 01       	movw	r26, r30
    3470:	a8 0f       	add	r26, r24
    3472:	b1 1d       	adc	r27, r1
    3474:	a3 5a       	subi	r26, 0xA3	; 163
    3476:	bf 4f       	sbci	r27, 0xFF	; 255
    3478:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    347a:	84 8d       	ldd	r24, Z+28	; 0x1c
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	01 96       	adiw	r24, 0x01	; 1
    3480:	8f 73       	andi	r24, 0x3F	; 63
    3482:	99 27       	eor	r25, r25
    3484:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3486:	a6 89       	ldd	r26, Z+22	; 0x16
    3488:	b7 89       	ldd	r27, Z+23	; 0x17
    348a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    348c:	a0 89       	ldd	r26, Z+16	; 0x10
    348e:	b1 89       	ldd	r27, Z+17	; 0x11
    3490:	8c 91       	ld	r24, X
    3492:	80 64       	ori	r24, 0x40	; 64
    3494:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3496:	93 8d       	ldd	r25, Z+27	; 0x1b
    3498:	84 8d       	ldd	r24, Z+28	; 0x1c
    349a:	98 13       	cpse	r25, r24
    349c:	06 c0       	rjmp	.+12     	; 0x34aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    349e:	02 88       	ldd	r0, Z+18	; 0x12
    34a0:	f3 89       	ldd	r31, Z+19	; 0x13
    34a2:	e0 2d       	mov	r30, r0
    34a4:	80 81       	ld	r24, Z
    34a6:	8f 7d       	andi	r24, 0xDF	; 223
    34a8:	80 83       	st	Z, r24
    34aa:	08 95       	ret

000034ac <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    34ac:	ef 92       	push	r14
    34ae:	ff 92       	push	r15
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	ec 01       	movw	r28, r24
  _written = true;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    34be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34c2:	98 13       	cpse	r25, r24
    34c4:	05 c0       	rjmp	.+10     	; 0x34d0 <_ZN14HardwareSerial5writeEh+0x24>
    34c6:	e8 89       	ldd	r30, Y+16	; 0x10
    34c8:	f9 89       	ldd	r31, Y+17	; 0x11
    34ca:	80 81       	ld	r24, Z
    34cc:	85 fd       	sbrc	r24, 5
    34ce:	24 c0       	rjmp	.+72     	; 0x3518 <_ZN14HardwareSerial5writeEh+0x6c>
    34d0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    34d2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    34d4:	10 e0       	ldi	r17, 0x00	; 0
    34d6:	0f 5f       	subi	r16, 0xFF	; 255
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	0f 73       	andi	r16, 0x3F	; 63
    34dc:	11 27       	eor	r17, r17
    34de:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    34e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34e2:	e8 12       	cpse	r14, r24
    34e4:	0c c0       	rjmp	.+24     	; 0x34fe <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	07 fc       	sbrc	r0, 7
    34ea:	fa cf       	rjmp	.-12     	; 0x34e0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    34ec:	e8 89       	ldd	r30, Y+16	; 0x10
    34ee:	f9 89       	ldd	r31, Y+17	; 0x11
    34f0:	80 81       	ld	r24, Z
    34f2:	85 ff       	sbrs	r24, 5
    34f4:	f5 cf       	rjmp	.-22     	; 0x34e0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    34f6:	ce 01       	movw	r24, r28
    34f8:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    34fc:	f1 cf       	rjmp	.-30     	; 0x34e0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    34fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3500:	fe 01       	movw	r30, r28
    3502:	e8 0f       	add	r30, r24
    3504:	f1 1d       	adc	r31, r1
    3506:	e3 5a       	subi	r30, 0xA3	; 163
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    350c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    350e:	ea 89       	ldd	r30, Y+18	; 0x12
    3510:	fb 89       	ldd	r31, Y+19	; 0x13
    3512:	80 81       	ld	r24, Z
    3514:	80 62       	ori	r24, 0x20	; 32
    3516:	07 c0       	rjmp	.+14     	; 0x3526 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3518:	ee 89       	ldd	r30, Y+22	; 0x16
    351a:	ff 89       	ldd	r31, Y+23	; 0x17
    351c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    351e:	e8 89       	ldd	r30, Y+16	; 0x10
    3520:	f9 89       	ldd	r31, Y+17	; 0x11
    3522:	80 81       	ld	r24, Z
    3524:	80 64       	ori	r24, 0x40	; 64
    3526:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	ef 90       	pop	r14
    3538:	08 95       	ret

0000353a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3540:	88 8d       	ldd	r24, Y+24	; 0x18
    3542:	88 23       	and	r24, r24
    3544:	c9 f0       	breq	.+50     	; 0x3578 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3546:	ea 89       	ldd	r30, Y+18	; 0x12
    3548:	fb 89       	ldd	r31, Y+19	; 0x13
    354a:	80 81       	ld	r24, Z
    354c:	85 fd       	sbrc	r24, 5
    354e:	05 c0       	rjmp	.+10     	; 0x355a <_ZN14HardwareSerial5flushEv+0x20>
    3550:	a8 89       	ldd	r26, Y+16	; 0x10
    3552:	b9 89       	ldd	r27, Y+17	; 0x11
    3554:	8c 91       	ld	r24, X
    3556:	86 fd       	sbrc	r24, 6
    3558:	0f c0       	rjmp	.+30     	; 0x3578 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	07 fc       	sbrc	r0, 7
    355e:	f5 cf       	rjmp	.-22     	; 0x354a <_ZN14HardwareSerial5flushEv+0x10>
    3560:	80 81       	ld	r24, Z
    3562:	85 ff       	sbrs	r24, 5
    3564:	f2 cf       	rjmp	.-28     	; 0x354a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3566:	a8 89       	ldd	r26, Y+16	; 0x10
    3568:	b9 89       	ldd	r27, Y+17	; 0x11
    356a:	8c 91       	ld	r24, X
    356c:	85 ff       	sbrs	r24, 5
    356e:	ed cf       	rjmp	.-38     	; 0x354a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3570:	ce 01       	movw	r24, r28
    3572:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3576:	e7 cf       	rjmp	.-50     	; 0x3546 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	08 95       	ret

0000357e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    357e:	cf 92       	push	r12
    3580:	df 92       	push	r13
    3582:	ef 92       	push	r14
    3584:	ff 92       	push	r15
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	ec 01       	movw	r28, r24
    358e:	6a 01       	movw	r12, r20
    3590:	7b 01       	movw	r14, r22
    3592:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3594:	e8 89       	ldd	r30, Y+16	; 0x10
    3596:	f9 89       	ldd	r31, Y+17	; 0x11
    3598:	82 e0       	ldi	r24, 0x02	; 2
    359a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    359c:	41 15       	cp	r20, r1
    359e:	51 4e       	sbci	r21, 0xE1	; 225
    35a0:	61 05       	cpc	r22, r1
    35a2:	71 05       	cpc	r23, r1
    35a4:	b1 f0       	breq	.+44     	; 0x35d2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	79 e0       	ldi	r23, 0x09	; 9
    35aa:	8d e3       	ldi	r24, 0x3D	; 61
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	a7 01       	movw	r20, r14
    35b0:	96 01       	movw	r18, r12
    35b2:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__udivmodsi4>
    35b6:	da 01       	movw	r26, r20
    35b8:	c9 01       	movw	r24, r18
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	a1 09       	sbc	r26, r1
    35be:	b1 09       	sbc	r27, r1
    35c0:	b6 95       	lsr	r27
    35c2:	a7 95       	ror	r26
    35c4:	97 95       	ror	r25
    35c6:	87 95       	ror	r24
    35c8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    35ca:	21 15       	cp	r18, r1
    35cc:	80 e1       	ldi	r24, 0x10	; 16
    35ce:	38 07       	cpc	r19, r24
    35d0:	a8 f0       	brcs	.+42     	; 0x35fc <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    35d2:	e8 89       	ldd	r30, Y+16	; 0x10
    35d4:	f9 89       	ldd	r31, Y+17	; 0x11
    35d6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    35d8:	60 e8       	ldi	r22, 0x80	; 128
    35da:	74 e8       	ldi	r23, 0x84	; 132
    35dc:	8e e1       	ldi	r24, 0x1E	; 30
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a7 01       	movw	r20, r14
    35e2:	96 01       	movw	r18, r12
    35e4:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__udivmodsi4>
    35e8:	da 01       	movw	r26, r20
    35ea:	c9 01       	movw	r24, r18
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	a1 09       	sbc	r26, r1
    35f0:	b1 09       	sbc	r27, r1
    35f2:	b6 95       	lsr	r27
    35f4:	a7 95       	ror	r26
    35f6:	97 95       	ror	r25
    35f8:	87 95       	ror	r24
    35fa:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    35fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    35fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    3600:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3602:	ee 85       	ldd	r30, Y+14	; 0x0e
    3604:	ff 85       	ldd	r31, Y+15	; 0x0f
    3606:	20 83       	st	Z, r18

  _written = false;
    3608:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    360a:	ec 89       	ldd	r30, Y+20	; 0x14
    360c:	fd 89       	ldd	r31, Y+21	; 0x15
    360e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3610:	ea 89       	ldd	r30, Y+18	; 0x12
    3612:	fb 89       	ldd	r31, Y+19	; 0x13
    3614:	80 81       	ld	r24, Z
    3616:	80 61       	ori	r24, 0x10	; 16
    3618:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    361a:	ea 89       	ldd	r30, Y+18	; 0x12
    361c:	fb 89       	ldd	r31, Y+19	; 0x13
    361e:	80 81       	ld	r24, Z
    3620:	88 60       	ori	r24, 0x08	; 8
    3622:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3624:	ea 89       	ldd	r30, Y+18	; 0x12
    3626:	fb 89       	ldd	r31, Y+19	; 0x13
    3628:	80 81       	ld	r24, Z
    362a:	80 68       	ori	r24, 0x80	; 128
    362c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    362e:	ea 89       	ldd	r30, Y+18	; 0x12
    3630:	fb 89       	ldd	r31, Y+19	; 0x13
    3632:	80 81       	ld	r24, Z
    3634:	8f 7d       	andi	r24, 0xDF	; 223
    3636:	80 83       	st	Z, r24
}
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	ff 90       	pop	r15
    3640:	ef 90       	pop	r14
    3642:	df 90       	pop	r13
    3644:	cf 90       	pop	r12
    3646:	08 95       	ret

00003648 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3648:	1f 92       	push	r1
    364a:	0f 92       	push	r0
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	0f 92       	push	r0
    3650:	11 24       	eor	r1, r1
    3652:	2f 93       	push	r18
    3654:	8f 93       	push	r24
    3656:	9f 93       	push	r25
    3658:	ef 93       	push	r30
    365a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    365c:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <Serial+0x10>
    3660:	f0 91 e7 07 	lds	r31, 0x07E7	; 0x8007e7 <Serial+0x11>
    3664:	80 81       	ld	r24, Z
    3666:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <Serial+0x16>
    366a:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <Serial+0x17>
    366e:	82 fd       	sbrc	r24, 2
    3670:	12 c0       	rjmp	.+36     	; 0x3696 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3672:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3674:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <Serial+0x19>
    3678:	8f 5f       	subi	r24, 0xFF	; 255
    367a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    367c:	20 91 f0 07 	lds	r18, 0x07F0	; 0x8007f0 <Serial+0x1a>
    3680:	82 17       	cp	r24, r18
    3682:	51 f0       	breq	.+20     	; 0x3698 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3684:	e0 91 ef 07 	lds	r30, 0x07EF	; 0x8007ef <Serial+0x19>
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	ea 52       	subi	r30, 0x2A	; 42
    368c:	f8 4f       	sbci	r31, 0xF8	; 248
    368e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3690:	80 93 ef 07 	sts	0x07EF, r24	; 0x8007ef <Serial+0x19>
    3694:	01 c0       	rjmp	.+2      	; 0x3698 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3696:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3698:	ff 91       	pop	r31
    369a:	ef 91       	pop	r30
    369c:	9f 91       	pop	r25
    369e:	8f 91       	pop	r24
    36a0:	2f 91       	pop	r18
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	0f 90       	pop	r0
    36a8:	1f 90       	pop	r1
    36aa:	18 95       	reti

000036ac <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    36ac:	1f 92       	push	r1
    36ae:	0f 92       	push	r0
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	0f 92       	push	r0
    36b4:	11 24       	eor	r1, r1
    36b6:	2f 93       	push	r18
    36b8:	3f 93       	push	r19
    36ba:	4f 93       	push	r20
    36bc:	5f 93       	push	r21
    36be:	6f 93       	push	r22
    36c0:	7f 93       	push	r23
    36c2:	8f 93       	push	r24
    36c4:	9f 93       	push	r25
    36c6:	af 93       	push	r26
    36c8:	bf 93       	push	r27
    36ca:	ef 93       	push	r30
    36cc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    36ce:	86 ed       	ldi	r24, 0xD6	; 214
    36d0:	97 e0       	ldi	r25, 0x07	; 7
    36d2:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    36d6:	ff 91       	pop	r31
    36d8:	ef 91       	pop	r30
    36da:	bf 91       	pop	r27
    36dc:	af 91       	pop	r26
    36de:	9f 91       	pop	r25
    36e0:	8f 91       	pop	r24
    36e2:	7f 91       	pop	r23
    36e4:	6f 91       	pop	r22
    36e6:	5f 91       	pop	r21
    36e8:	4f 91       	pop	r20
    36ea:	3f 91       	pop	r19
    36ec:	2f 91       	pop	r18
    36ee:	0f 90       	pop	r0
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	0f 90       	pop	r0
    36f4:	1f 90       	pop	r1
    36f6:	18 95       	reti

000036f8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    36f8:	86 ed       	ldi	r24, 0xD6	; 214
    36fa:	97 e0       	ldi	r25, 0x07	; 7
    36fc:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_ZN14HardwareSerial9availableEv>
    3700:	21 e0       	ldi	r18, 0x01	; 1
    3702:	89 2b       	or	r24, r25
    3704:	09 f4       	brne	.+2      	; 0x3708 <_Z17Serial0_availablev+0x10>
    3706:	20 e0       	ldi	r18, 0x00	; 0
}
    3708:	82 2f       	mov	r24, r18
    370a:	08 95       	ret

0000370c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    370c:	e6 ed       	ldi	r30, 0xD6	; 214
    370e:	f7 e0       	ldi	r31, 0x07	; 7
    3710:	13 82       	std	Z+3, r1	; 0x03
    3712:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3714:	88 ee       	ldi	r24, 0xE8	; 232
    3716:	93 e0       	ldi	r25, 0x03	; 3
    3718:	a0 e0       	ldi	r26, 0x00	; 0
    371a:	b0 e0       	ldi	r27, 0x00	; 0
    371c:	84 83       	std	Z+4, r24	; 0x04
    371e:	95 83       	std	Z+5, r25	; 0x05
    3720:	a6 83       	std	Z+6, r26	; 0x06
    3722:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3724:	8e e0       	ldi	r24, 0x0E	; 14
    3726:	93 e0       	ldi	r25, 0x03	; 3
    3728:	91 83       	std	Z+1, r25	; 0x01
    372a:	80 83       	st	Z, r24
    372c:	85 ec       	ldi	r24, 0xC5	; 197
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	95 87       	std	Z+13, r25	; 0x0d
    3732:	84 87       	std	Z+12, r24	; 0x0c
    3734:	84 ec       	ldi	r24, 0xC4	; 196
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	97 87       	std	Z+15, r25	; 0x0f
    373a:	86 87       	std	Z+14, r24	; 0x0e
    373c:	80 ec       	ldi	r24, 0xC0	; 192
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	91 8b       	std	Z+17, r25	; 0x11
    3742:	80 8b       	std	Z+16, r24	; 0x10
    3744:	81 ec       	ldi	r24, 0xC1	; 193
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	93 8b       	std	Z+19, r25	; 0x13
    374a:	82 8b       	std	Z+18, r24	; 0x12
    374c:	82 ec       	ldi	r24, 0xC2	; 194
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	95 8b       	std	Z+21, r25	; 0x15
    3752:	84 8b       	std	Z+20, r24	; 0x14
    3754:	86 ec       	ldi	r24, 0xC6	; 198
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	97 8b       	std	Z+23, r25	; 0x17
    375a:	86 8b       	std	Z+22, r24	; 0x16
    375c:	11 8e       	std	Z+25, r1	; 0x19
    375e:	12 8e       	std	Z+26, r1	; 0x1a
    3760:	13 8e       	std	Z+27, r1	; 0x1b
    3762:	14 8e       	std	Z+28, r1	; 0x1c
    3764:	08 95       	ret

00003766 <initVariant>:
    3766:	08 95       	ret

00003768 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3768:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <init>

	initVariant();
    376c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3770:	0e 94 28 07 	call	0xe50	; 0xe50 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3774:	c7 e2       	ldi	r28, 0x27	; 39
    3776:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
    3778:	0e 94 39 08 	call	0x1072	; 0x1072 <loop>
		if (serialEventRun) serialEventRun();
    377c:	20 97       	sbiw	r28, 0x00	; 0
    377e:	e1 f3       	breq	.-8      	; 0x3778 <main+0x10>
    3780:	0e 94 27 1a 	call	0x344e	; 0x344e <_Z14serialEventRunv>
    3784:	f9 cf       	rjmp	.-14     	; 0x3778 <main+0x10>

00003786 <_Znwj>:
    3786:	0c 94 37 2e 	jmp	0x5c6e	; 0x5c6e <malloc>

0000378a <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    378a:	cf 92       	push	r12
    378c:	df 92       	push	r13
    378e:	ef 92       	push	r14
    3790:	ff 92       	push	r15
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	6c 01       	movw	r12, r24
    379c:	7a 01       	movw	r14, r20
    379e:	8b 01       	movw	r16, r22
    37a0:	c0 e0       	ldi	r28, 0x00	; 0
    37a2:	d0 e0       	ldi	r29, 0x00	; 0
    37a4:	ce 15       	cp	r28, r14
    37a6:	df 05       	cpc	r29, r15
    37a8:	81 f0       	breq	.+32     	; 0x37ca <_ZN5Print5writeEPKhj+0x40>
    37aa:	d8 01       	movw	r26, r16
    37ac:	6d 91       	ld	r22, X+
    37ae:	8d 01       	movw	r16, r26
    37b0:	d6 01       	movw	r26, r12
    37b2:	ed 91       	ld	r30, X+
    37b4:	fc 91       	ld	r31, X
    37b6:	01 90       	ld	r0, Z+
    37b8:	f0 81       	ld	r31, Z
    37ba:	e0 2d       	mov	r30, r0
    37bc:	c6 01       	movw	r24, r12
    37be:	09 95       	icall
    37c0:	89 2b       	or	r24, r25
    37c2:	11 f0       	breq	.+4      	; 0x37c8 <_ZN5Print5writeEPKhj+0x3e>
    37c4:	21 96       	adiw	r28, 0x01	; 1
    37c6:	ee cf       	rjmp	.-36     	; 0x37a4 <_ZN5Print5writeEPKhj+0x1a>
    37c8:	7e 01       	movw	r14, r28
    37ca:	c7 01       	movw	r24, r14
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	1f 91       	pop	r17
    37d2:	0f 91       	pop	r16
    37d4:	ff 90       	pop	r15
    37d6:	ef 90       	pop	r14
    37d8:	df 90       	pop	r13
    37da:	cf 90       	pop	r12
    37dc:	08 95       	ret

000037de <_ZN5Print5writeEPKc>:
    37de:	61 15       	cp	r22, r1
    37e0:	71 05       	cpc	r23, r1
    37e2:	79 f0       	breq	.+30     	; 0x3802 <_ZN5Print5writeEPKc+0x24>
    37e4:	fb 01       	movw	r30, r22
    37e6:	01 90       	ld	r0, Z+
    37e8:	00 20       	and	r0, r0
    37ea:	e9 f7       	brne	.-6      	; 0x37e6 <_ZN5Print5writeEPKc+0x8>
    37ec:	31 97       	sbiw	r30, 0x01	; 1
    37ee:	af 01       	movw	r20, r30
    37f0:	46 1b       	sub	r20, r22
    37f2:	57 0b       	sbc	r21, r23
    37f4:	dc 01       	movw	r26, r24
    37f6:	ed 91       	ld	r30, X+
    37f8:	fc 91       	ld	r31, X
    37fa:	02 80       	ldd	r0, Z+2	; 0x02
    37fc:	f3 81       	ldd	r31, Z+3	; 0x03
    37fe:	e0 2d       	mov	r30, r0
    3800:	09 94       	ijmp
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	08 95       	ret

00003808 <_ZN5Print5printEPK19__FlashStringHelper>:
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	8c 01       	movw	r16, r24
    3816:	7b 01       	movw	r14, r22
    3818:	c0 e0       	ldi	r28, 0x00	; 0
    381a:	d0 e0       	ldi	r29, 0x00	; 0
    381c:	f7 01       	movw	r30, r14
    381e:	ec 0f       	add	r30, r28
    3820:	fd 1f       	adc	r31, r29
    3822:	64 91       	lpm	r22, Z
    3824:	66 23       	and	r22, r22
    3826:	61 f0       	breq	.+24     	; 0x3840 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3828:	d8 01       	movw	r26, r16
    382a:	ed 91       	ld	r30, X+
    382c:	fc 91       	ld	r31, X
    382e:	01 90       	ld	r0, Z+
    3830:	f0 81       	ld	r31, Z
    3832:	e0 2d       	mov	r30, r0
    3834:	c8 01       	movw	r24, r16
    3836:	09 95       	icall
    3838:	89 2b       	or	r24, r25
    383a:	11 f0       	breq	.+4      	; 0x3840 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    383c:	21 96       	adiw	r28, 0x01	; 1
    383e:	ee cf       	rjmp	.-36     	; 0x381c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3840:	ce 01       	movw	r24, r28
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <_ZN5Print5printEPKc>:
    3850:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <_ZN5Print5writeEPKc>

00003854 <_ZN5Print5printEc>:
    3854:	dc 01       	movw	r26, r24
    3856:	ed 91       	ld	r30, X+
    3858:	fc 91       	ld	r31, X
    385a:	01 90       	ld	r0, Z+
    385c:	f0 81       	ld	r31, Z
    385e:	e0 2d       	mov	r30, r0
    3860:	09 94       	ijmp

00003862 <_ZN5Print7printlnEv>:
    3862:	6a e1       	ldi	r22, 0x1A	; 26
    3864:	73 e0       	ldi	r23, 0x03	; 3
    3866:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <_ZN5Print5writeEPKc>

0000386a <_ZN5Print7printlnEPK19__FlashStringHelper>:
    386a:	0f 93       	push	r16
    386c:	1f 93       	push	r17
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	ec 01       	movw	r28, r24
    3874:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    3878:	8c 01       	movw	r16, r24
    387a:	ce 01       	movw	r24, r28
    387c:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    3880:	80 0f       	add	r24, r16
    3882:	91 1f       	adc	r25, r17
    3884:	df 91       	pop	r29
    3886:	cf 91       	pop	r28
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	08 95       	ret

0000388e <_ZN5Print7printlnEPKc>:
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	ec 01       	movw	r28, r24
    3898:	0e 94 ef 1b 	call	0x37de	; 0x37de <_ZN5Print5writeEPKc>
    389c:	8c 01       	movw	r16, r24
    389e:	ce 01       	movw	r24, r28
    38a0:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    38a4:	80 0f       	add	r24, r16
    38a6:	91 1f       	adc	r25, r17
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	08 95       	ret

000038b2 <_ZN5Print7printlnEc>:
    38b2:	0f 93       	push	r16
    38b4:	1f 93       	push	r17
    38b6:	cf 93       	push	r28
    38b8:	df 93       	push	r29
    38ba:	ec 01       	movw	r28, r24
    38bc:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_ZN5Print5printEc>
    38c0:	8c 01       	movw	r16, r24
    38c2:	ce 01       	movw	r24, r28
    38c4:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    38c8:	80 0f       	add	r24, r16
    38ca:	91 1f       	adc	r25, r17
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	08 95       	ret

000038d6 <_ZN5Print11printNumberEmh>:
    38d6:	8f 92       	push	r8
    38d8:	9f 92       	push	r9
    38da:	af 92       	push	r10
    38dc:	bf 92       	push	r11
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	a1 97       	sbiw	r28, 0x21	; 33
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	7c 01       	movw	r14, r24
    38fc:	fa 01       	movw	r30, r20
    38fe:	cb 01       	movw	r24, r22
    3900:	19 a2       	std	Y+33, r1	; 0x21
    3902:	22 30       	cpi	r18, 0x02	; 2
    3904:	08 f4       	brcc	.+2      	; 0x3908 <_ZN5Print11printNumberEmh+0x32>
    3906:	2a e0       	ldi	r18, 0x0A	; 10
    3908:	8e 01       	movw	r16, r28
    390a:	0f 5d       	subi	r16, 0xDF	; 223
    390c:	1f 4f       	sbci	r17, 0xFF	; 255
    390e:	82 2e       	mov	r8, r18
    3910:	91 2c       	mov	r9, r1
    3912:	a1 2c       	mov	r10, r1
    3914:	b1 2c       	mov	r11, r1
    3916:	bf 01       	movw	r22, r30
    3918:	a5 01       	movw	r20, r10
    391a:	94 01       	movw	r18, r8
    391c:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__udivmodsi4>
    3920:	f9 01       	movw	r30, r18
    3922:	ca 01       	movw	r24, r20
    3924:	01 50       	subi	r16, 0x01	; 1
    3926:	11 09       	sbc	r17, r1
    3928:	6a 30       	cpi	r22, 0x0A	; 10
    392a:	10 f4       	brcc	.+4      	; 0x3930 <_ZN5Print11printNumberEmh+0x5a>
    392c:	60 5d       	subi	r22, 0xD0	; 208
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <_ZN5Print11printNumberEmh+0x5c>
    3930:	69 5c       	subi	r22, 0xC9	; 201
    3932:	d8 01       	movw	r26, r16
    3934:	6c 93       	st	X, r22
    3936:	23 2b       	or	r18, r19
    3938:	24 2b       	or	r18, r20
    393a:	25 2b       	or	r18, r21
    393c:	61 f7       	brne	.-40     	; 0x3916 <_ZN5Print11printNumberEmh+0x40>
    393e:	b8 01       	movw	r22, r16
    3940:	c7 01       	movw	r24, r14
    3942:	0e 94 ef 1b 	call	0x37de	; 0x37de <_ZN5Print5writeEPKc>
    3946:	a1 96       	adiw	r28, 0x21	; 33
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	bf 90       	pop	r11
    3960:	af 90       	pop	r10
    3962:	9f 90       	pop	r9
    3964:	8f 90       	pop	r8
    3966:	08 95       	ret

00003968 <_ZN5Print5printEmi>:
    3968:	21 15       	cp	r18, r1
    396a:	31 05       	cpc	r19, r1
    396c:	41 f4       	brne	.+16     	; 0x397e <_ZN5Print5printEmi+0x16>
    396e:	dc 01       	movw	r26, r24
    3970:	ed 91       	ld	r30, X+
    3972:	fc 91       	ld	r31, X
    3974:	01 90       	ld	r0, Z+
    3976:	f0 81       	ld	r31, Z
    3978:	e0 2d       	mov	r30, r0
    397a:	64 2f       	mov	r22, r20
    397c:	09 94       	ijmp
    397e:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <_ZN5Print11printNumberEmh>

00003982 <_ZN5Print5printEhi>:
    3982:	9a 01       	movw	r18, r20
    3984:	46 2f       	mov	r20, r22
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <_ZN5Print5printEmi>

00003990 <_ZN5Print7printlnEhi>:
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	ec 01       	movw	r28, r24
    399a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <_ZN5Print5printEhi>
    399e:	8c 01       	movw	r16, r24
    39a0:	ce 01       	movw	r24, r28
    39a2:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    39a6:	80 0f       	add	r24, r16
    39a8:	91 1f       	adc	r25, r17
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	08 95       	ret

000039b4 <_ZN5Print5printEji>:
    39b4:	9a 01       	movw	r18, r20
    39b6:	ab 01       	movw	r20, r22
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <_ZN5Print5printEmi>

000039c0 <_ZN5Print7printlnEji>:
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	ec 01       	movw	r28, r24
    39ca:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN5Print5printEji>
    39ce:	8c 01       	movw	r16, r24
    39d0:	ce 01       	movw	r24, r28
    39d2:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    39d6:	80 0f       	add	r24, r16
    39d8:	91 1f       	adc	r25, r17
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	08 95       	ret

000039e4 <_ZN5Print7printlnEmi>:
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	ec 01       	movw	r28, r24
    39ee:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN5Print5printEmi>
    39f2:	8c 01       	movw	r16, r24
    39f4:	ce 01       	movw	r24, r28
    39f6:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    39fa:	80 0f       	add	r24, r16
    39fc:	91 1f       	adc	r25, r17
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	08 95       	ret

00003a08 <_ZN5Print5printEli>:
    3a08:	cf 92       	push	r12
    3a0a:	df 92       	push	r13
    3a0c:	ef 92       	push	r14
    3a0e:	ff 92       	push	r15
    3a10:	0f 93       	push	r16
    3a12:	1f 93       	push	r17
    3a14:	cf 93       	push	r28
    3a16:	df 93       	push	r29
    3a18:	21 15       	cp	r18, r1
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	81 f4       	brne	.+32     	; 0x3a3e <_ZN5Print5printEli+0x36>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	ed 91       	ld	r30, X+
    3a22:	fc 91       	ld	r31, X
    3a24:	01 90       	ld	r0, Z+
    3a26:	f0 81       	ld	r31, Z
    3a28:	e0 2d       	mov	r30, r0
    3a2a:	64 2f       	mov	r22, r20
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	ff 90       	pop	r15
    3a36:	ef 90       	pop	r14
    3a38:	df 90       	pop	r13
    3a3a:	cf 90       	pop	r12
    3a3c:	09 94       	ijmp
    3a3e:	2a 30       	cpi	r18, 0x0A	; 10
    3a40:	31 05       	cpc	r19, r1
    3a42:	01 f5       	brne	.+64     	; 0x3a84 <_ZN5Print5printEli+0x7c>
    3a44:	77 ff       	sbrs	r23, 7
    3a46:	1d c0       	rjmp	.+58     	; 0x3a82 <_ZN5Print5printEli+0x7a>
    3a48:	6a 01       	movw	r12, r20
    3a4a:	7b 01       	movw	r14, r22
    3a4c:	ec 01       	movw	r28, r24
    3a4e:	6d e2       	ldi	r22, 0x2D	; 45
    3a50:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_ZN5Print5printEc>
    3a54:	8c 01       	movw	r16, r24
    3a56:	44 27       	eor	r20, r20
    3a58:	55 27       	eor	r21, r21
    3a5a:	ba 01       	movw	r22, r20
    3a5c:	4c 19       	sub	r20, r12
    3a5e:	5d 09       	sbc	r21, r13
    3a60:	6e 09       	sbc	r22, r14
    3a62:	7f 09       	sbc	r23, r15
    3a64:	2a e0       	ldi	r18, 0x0A	; 10
    3a66:	ce 01       	movw	r24, r28
    3a68:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <_ZN5Print11printNumberEmh>
    3a6c:	80 0f       	add	r24, r16
    3a6e:	91 1f       	adc	r25, r17
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	ff 90       	pop	r15
    3a7a:	ef 90       	pop	r14
    3a7c:	df 90       	pop	r13
    3a7e:	cf 90       	pop	r12
    3a80:	08 95       	ret
    3a82:	2a e0       	ldi	r18, 0x0A	; 10
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	0f 91       	pop	r16
    3a8c:	ff 90       	pop	r15
    3a8e:	ef 90       	pop	r14
    3a90:	df 90       	pop	r13
    3a92:	cf 90       	pop	r12
    3a94:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <_ZN5Print11printNumberEmh>

00003a98 <_ZN5Print5printEii>:
    3a98:	9a 01       	movw	r18, r20
    3a9a:	ab 01       	movw	r20, r22
    3a9c:	77 0f       	add	r23, r23
    3a9e:	66 0b       	sbc	r22, r22
    3aa0:	77 0b       	sbc	r23, r23
    3aa2:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <_ZN5Print5printEli>

00003aa6 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3ab0:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <_ZN5Print5printEli>
    3ab4:	8c 01       	movw	r16, r24
  n += println();
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
  return n;
}
    3abc:	80 0f       	add	r24, r16
    3abe:	91 1f       	adc	r25, r17
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	08 95       	ret

00003aca <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3aca:	1f 92       	push	r1
    3acc:	0f 92       	push	r0
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	0f 92       	push	r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	2f 93       	push	r18
    3ad6:	3f 93       	push	r19
    3ad8:	8f 93       	push	r24
    3ada:	9f 93       	push	r25
    3adc:	af 93       	push	r26
    3ade:	bf 93       	push	r27
    3ae0:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <timer0_millis>
    3ae4:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <timer0_millis+0x1>
    3ae8:	a0 91 76 08 	lds	r26, 0x0876	; 0x800876 <timer0_millis+0x2>
    3aec:	b0 91 77 08 	lds	r27, 0x0877	; 0x800877 <timer0_millis+0x3>
    3af0:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <timer0_fract>
    3af4:	23 e0       	ldi	r18, 0x03	; 3
    3af6:	23 0f       	add	r18, r19
    3af8:	2d 37       	cpi	r18, 0x7D	; 125
    3afa:	20 f4       	brcc	.+8      	; 0x3b04 <__vector_16+0x3a>
    3afc:	01 96       	adiw	r24, 0x01	; 1
    3afe:	a1 1d       	adc	r26, r1
    3b00:	b1 1d       	adc	r27, r1
    3b02:	05 c0       	rjmp	.+10     	; 0x3b0e <__vector_16+0x44>
    3b04:	26 e8       	ldi	r18, 0x86	; 134
    3b06:	23 0f       	add	r18, r19
    3b08:	02 96       	adiw	r24, 0x02	; 2
    3b0a:	a1 1d       	adc	r26, r1
    3b0c:	b1 1d       	adc	r27, r1
    3b0e:	20 93 73 08 	sts	0x0873, r18	; 0x800873 <timer0_fract>
    3b12:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <timer0_millis>
    3b16:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <timer0_millis+0x1>
    3b1a:	a0 93 76 08 	sts	0x0876, r26	; 0x800876 <timer0_millis+0x2>
    3b1e:	b0 93 77 08 	sts	0x0877, r27	; 0x800877 <timer0_millis+0x3>
    3b22:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <timer0_overflow_count>
    3b26:	90 91 79 08 	lds	r25, 0x0879	; 0x800879 <timer0_overflow_count+0x1>
    3b2a:	a0 91 7a 08 	lds	r26, 0x087A	; 0x80087a <timer0_overflow_count+0x2>
    3b2e:	b0 91 7b 08 	lds	r27, 0x087B	; 0x80087b <timer0_overflow_count+0x3>
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	a1 1d       	adc	r26, r1
    3b36:	b1 1d       	adc	r27, r1
    3b38:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <timer0_overflow_count>
    3b3c:	90 93 79 08 	sts	0x0879, r25	; 0x800879 <timer0_overflow_count+0x1>
    3b40:	a0 93 7a 08 	sts	0x087A, r26	; 0x80087a <timer0_overflow_count+0x2>
    3b44:	b0 93 7b 08 	sts	0x087B, r27	; 0x80087b <timer0_overflow_count+0x3>
    3b48:	bf 91       	pop	r27
    3b4a:	af 91       	pop	r26
    3b4c:	9f 91       	pop	r25
    3b4e:	8f 91       	pop	r24
    3b50:	3f 91       	pop	r19
    3b52:	2f 91       	pop	r18
    3b54:	0f 90       	pop	r0
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	0f 90       	pop	r0
    3b5a:	1f 90       	pop	r1
    3b5c:	18 95       	reti

00003b5e <micros>:
    3b5e:	3f b7       	in	r19, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <timer0_overflow_count>
    3b66:	90 91 79 08 	lds	r25, 0x0879	; 0x800879 <timer0_overflow_count+0x1>
    3b6a:	a0 91 7a 08 	lds	r26, 0x087A	; 0x80087a <timer0_overflow_count+0x2>
    3b6e:	b0 91 7b 08 	lds	r27, 0x087B	; 0x80087b <timer0_overflow_count+0x3>
    3b72:	26 b5       	in	r18, 0x26	; 38
    3b74:	a8 9b       	sbis	0x15, 0	; 21
    3b76:	05 c0       	rjmp	.+10     	; 0x3b82 <micros+0x24>
    3b78:	2f 3f       	cpi	r18, 0xFF	; 255
    3b7a:	19 f0       	breq	.+6      	; 0x3b82 <micros+0x24>
    3b7c:	01 96       	adiw	r24, 0x01	; 1
    3b7e:	a1 1d       	adc	r26, r1
    3b80:	b1 1d       	adc	r27, r1
    3b82:	3f bf       	out	0x3f, r19	; 63
    3b84:	ba 2f       	mov	r27, r26
    3b86:	a9 2f       	mov	r26, r25
    3b88:	98 2f       	mov	r25, r24
    3b8a:	88 27       	eor	r24, r24
    3b8c:	82 0f       	add	r24, r18
    3b8e:	91 1d       	adc	r25, r1
    3b90:	a1 1d       	adc	r26, r1
    3b92:	b1 1d       	adc	r27, r1
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	42 e0       	ldi	r20, 0x02	; 2
    3b9a:	66 0f       	add	r22, r22
    3b9c:	77 1f       	adc	r23, r23
    3b9e:	88 1f       	adc	r24, r24
    3ba0:	99 1f       	adc	r25, r25
    3ba2:	4a 95       	dec	r20
    3ba4:	d1 f7       	brne	.-12     	; 0x3b9a <micros+0x3c>
    3ba6:	08 95       	ret

00003ba8 <delay>:
    3ba8:	8f 92       	push	r8
    3baa:	9f 92       	push	r9
    3bac:	af 92       	push	r10
    3bae:	bf 92       	push	r11
    3bb0:	cf 92       	push	r12
    3bb2:	df 92       	push	r13
    3bb4:	ef 92       	push	r14
    3bb6:	ff 92       	push	r15
    3bb8:	6b 01       	movw	r12, r22
    3bba:	7c 01       	movw	r14, r24
    3bbc:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <micros>
    3bc0:	4b 01       	movw	r8, r22
    3bc2:	5c 01       	movw	r10, r24
    3bc4:	c1 14       	cp	r12, r1
    3bc6:	d1 04       	cpc	r13, r1
    3bc8:	e1 04       	cpc	r14, r1
    3bca:	f1 04       	cpc	r15, r1
    3bcc:	01 f1       	breq	.+64     	; 0x3c0e <delay+0x66>
    3bce:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <yield>
    3bd2:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <micros>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	88 19       	sub	r24, r8
    3bdc:	99 09       	sbc	r25, r9
    3bde:	aa 09       	sbc	r26, r10
    3be0:	bb 09       	sbc	r27, r11
    3be2:	88 3e       	cpi	r24, 0xE8	; 232
    3be4:	93 40       	sbci	r25, 0x03	; 3
    3be6:	a1 05       	cpc	r26, r1
    3be8:	b1 05       	cpc	r27, r1
    3bea:	60 f3       	brcs	.-40     	; 0x3bc4 <delay+0x1c>
    3bec:	21 e0       	ldi	r18, 0x01	; 1
    3bee:	c2 1a       	sub	r12, r18
    3bf0:	d1 08       	sbc	r13, r1
    3bf2:	e1 08       	sbc	r14, r1
    3bf4:	f1 08       	sbc	r15, r1
    3bf6:	88 ee       	ldi	r24, 0xE8	; 232
    3bf8:	88 0e       	add	r8, r24
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	98 1e       	adc	r9, r24
    3bfe:	a1 1c       	adc	r10, r1
    3c00:	b1 1c       	adc	r11, r1
    3c02:	c1 14       	cp	r12, r1
    3c04:	d1 04       	cpc	r13, r1
    3c06:	e1 04       	cpc	r14, r1
    3c08:	f1 04       	cpc	r15, r1
    3c0a:	19 f7       	brne	.-58     	; 0x3bd2 <delay+0x2a>
    3c0c:	db cf       	rjmp	.-74     	; 0x3bc4 <delay+0x1c>
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	df 90       	pop	r13
    3c14:	cf 90       	pop	r12
    3c16:	bf 90       	pop	r11
    3c18:	af 90       	pop	r10
    3c1a:	9f 90       	pop	r9
    3c1c:	8f 90       	pop	r8
    3c1e:	08 95       	ret

00003c20 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3c20:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3c22:	84 b5       	in	r24, 0x24	; 36
    3c24:	82 60       	ori	r24, 0x02	; 2
    3c26:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3c28:	84 b5       	in	r24, 0x24	; 36
    3c2a:	81 60       	ori	r24, 0x01	; 1
    3c2c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3c2e:	85 b5       	in	r24, 0x25	; 37
    3c30:	82 60       	ori	r24, 0x02	; 2
    3c32:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3c34:	85 b5       	in	r24, 0x25	; 37
    3c36:	81 60       	ori	r24, 0x01	; 1
    3c38:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3c3a:	ee e6       	ldi	r30, 0x6E	; 110
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	81 60       	ori	r24, 0x01	; 1
    3c42:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3c44:	e1 e8       	ldi	r30, 0x81	; 129
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3c4a:	80 81       	ld	r24, Z
    3c4c:	82 60       	ori	r24, 0x02	; 2
    3c4e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3c50:	80 81       	ld	r24, Z
    3c52:	81 60       	ori	r24, 0x01	; 1
    3c54:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3c56:	e0 e8       	ldi	r30, 0x80	; 128
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	81 60       	ori	r24, 0x01	; 1
    3c5e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3c60:	e1 eb       	ldi	r30, 0xB1	; 177
    3c62:	f0 e0       	ldi	r31, 0x00	; 0
    3c64:	80 81       	ld	r24, Z
    3c66:	84 60       	ori	r24, 0x04	; 4
    3c68:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3c6a:	e0 eb       	ldi	r30, 0xB0	; 176
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	81 60       	ori	r24, 0x01	; 1
    3c72:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3c74:	ea e7       	ldi	r30, 0x7A	; 122
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	84 60       	ori	r24, 0x04	; 4
    3c7c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3c7e:	80 81       	ld	r24, Z
    3c80:	82 60       	ori	r24, 0x02	; 2
    3c82:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3c84:	80 81       	ld	r24, Z
    3c86:	81 60       	ori	r24, 0x01	; 1
    3c88:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3c8a:	80 81       	ld	r24, Z
    3c8c:	80 68       	ori	r24, 0x80	; 128
    3c8e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3c90:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3c94:	08 95       	ret

00003c96 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3c96:	8e 30       	cpi	r24, 0x0E	; 14
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <analogRead+0x6>
    3c9a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3c9c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <analog_reference>
    3ca0:	90 e4       	ldi	r25, 0x40	; 64
    3ca2:	29 9f       	mul	r18, r25
    3ca4:	90 01       	movw	r18, r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	87 70       	andi	r24, 0x07	; 7
    3caa:	82 2b       	or	r24, r18
    3cac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3cb0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3cb4:	80 64       	ori	r24, 0x40	; 64
    3cb6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3cba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3cbe:	86 fd       	sbrc	r24, 6
    3cc0:	fc cf       	rjmp	.-8      	; 0x3cba <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3cc2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3cc6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3cca:	90 e0       	ldi	r25, 0x00	; 0
}
    3ccc:	92 2b       	or	r25, r18
    3cce:	08 95       	ret

00003cd0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3cd0:	83 30       	cpi	r24, 0x03	; 3
    3cd2:	81 f0       	breq	.+32     	; 0x3cf4 <turnOffPWM+0x24>
    3cd4:	28 f4       	brcc	.+10     	; 0x3ce0 <turnOffPWM+0x10>
    3cd6:	81 30       	cpi	r24, 0x01	; 1
    3cd8:	99 f0       	breq	.+38     	; 0x3d00 <turnOffPWM+0x30>
    3cda:	82 30       	cpi	r24, 0x02	; 2
    3cdc:	a1 f0       	breq	.+40     	; 0x3d06 <turnOffPWM+0x36>
    3cde:	08 95       	ret
    3ce0:	87 30       	cpi	r24, 0x07	; 7
    3ce2:	a9 f0       	breq	.+42     	; 0x3d0e <turnOffPWM+0x3e>
    3ce4:	88 30       	cpi	r24, 0x08	; 8
    3ce6:	b9 f0       	breq	.+46     	; 0x3d16 <turnOffPWM+0x46>
    3ce8:	84 30       	cpi	r24, 0x04	; 4
    3cea:	d1 f4       	brne	.+52     	; 0x3d20 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3cec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3cf0:	8f 7d       	andi	r24, 0xDF	; 223
    3cf2:	03 c0       	rjmp	.+6      	; 0x3cfa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3cf4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3cf8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3cfa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3cfe:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3d00:	84 b5       	in	r24, 0x24	; 36
    3d02:	8f 77       	andi	r24, 0x7F	; 127
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3d06:	84 b5       	in	r24, 0x24	; 36
    3d08:	8f 7d       	andi	r24, 0xDF	; 223
    3d0a:	84 bd       	out	0x24, r24	; 36
    3d0c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3d0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3d12:	8f 77       	andi	r24, 0x7F	; 127
    3d14:	03 c0       	rjmp	.+6      	; 0x3d1c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3d16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3d1a:	8f 7d       	andi	r24, 0xDF	; 223
    3d1c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3d20:	08 95       	ret

00003d22 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	fc 01       	movw	r30, r24
    3d2a:	e5 5a       	subi	r30, 0xA5	; 165
    3d2c:	fc 4f       	sbci	r31, 0xFC	; 252
    3d2e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3d30:	fc 01       	movw	r30, r24
    3d32:	e1 59       	subi	r30, 0x91	; 145
    3d34:	fc 4f       	sbci	r31, 0xFC	; 252
    3d36:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3d38:	88 23       	and	r24, r24
    3d3a:	61 f1       	breq	.+88     	; 0x3d94 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	fc 01       	movw	r30, r24
    3d44:	e9 56       	subi	r30, 0x69	; 105
    3d46:	fc 4f       	sbci	r31, 0xFC	; 252
    3d48:	c5 91       	lpm	r28, Z+
    3d4a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	e3 57       	subi	r30, 0x73	; 115
    3d50:	fc 4f       	sbci	r31, 0xFC	; 252
    3d52:	a5 91       	lpm	r26, Z+
    3d54:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3d56:	61 11       	cpse	r22, r1
    3d58:	09 c0       	rjmp	.+18     	; 0x3d6c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3d5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3d5c:	f8 94       	cli
		*reg &= ~bit;
    3d5e:	88 81       	ld	r24, Y
    3d60:	20 95       	com	r18
    3d62:	82 23       	and	r24, r18
    3d64:	88 83       	st	Y, r24
		*out &= ~bit;
    3d66:	ec 91       	ld	r30, X
    3d68:	2e 23       	and	r18, r30
    3d6a:	0b c0       	rjmp	.+22     	; 0x3d82 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3d6c:	62 30       	cpi	r22, 0x02	; 2
    3d6e:	61 f4       	brne	.+24     	; 0x3d88 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3d70:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3d72:	f8 94       	cli
		*reg &= ~bit;
    3d74:	88 81       	ld	r24, Y
    3d76:	32 2f       	mov	r19, r18
    3d78:	30 95       	com	r19
    3d7a:	83 23       	and	r24, r19
    3d7c:	88 83       	st	Y, r24
		*out |= bit;
    3d7e:	ec 91       	ld	r30, X
    3d80:	2e 2b       	or	r18, r30
    3d82:	2c 93       	st	X, r18
		SREG = oldSREG;
    3d84:	9f bf       	out	0x3f, r25	; 63
    3d86:	06 c0       	rjmp	.+12     	; 0x3d94 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3d88:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3d8a:	f8 94       	cli
		*reg |= bit;
    3d8c:	e8 81       	ld	r30, Y
    3d8e:	2e 2b       	or	r18, r30
    3d90:	28 83       	st	Y, r18
		SREG = oldSREG;
    3d92:	8f bf       	out	0x3f, r24	; 63
	}
}
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	08 95       	ret

00003d9a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3d9a:	1f 93       	push	r17
    3d9c:	cf 93       	push	r28
    3d9e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3da0:	28 2f       	mov	r18, r24
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	f9 01       	movw	r30, r18
    3da6:	e9 5b       	subi	r30, 0xB9	; 185
    3da8:	fc 4f       	sbci	r31, 0xFC	; 252
    3daa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3dac:	f9 01       	movw	r30, r18
    3dae:	e5 5a       	subi	r30, 0xA5	; 165
    3db0:	fc 4f       	sbci	r31, 0xFC	; 252
    3db2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3db4:	f9 01       	movw	r30, r18
    3db6:	e1 59       	subi	r30, 0x91	; 145
    3db8:	fc 4f       	sbci	r31, 0xFC	; 252
    3dba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3dbc:	cc 23       	and	r28, r28
    3dbe:	c1 f0       	breq	.+48     	; 0x3df0 <digitalWrite+0x56>
    3dc0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3dc2:	81 11       	cpse	r24, r1
    3dc4:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <turnOffPWM>

	out = portOutputRegister(port);
    3dc8:	ec 2f       	mov	r30, r28
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	ee 0f       	add	r30, r30
    3dce:	ff 1f       	adc	r31, r31
    3dd0:	e3 57       	subi	r30, 0x73	; 115
    3dd2:	fc 4f       	sbci	r31, 0xFC	; 252
    3dd4:	a5 91       	lpm	r26, Z+
    3dd6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3dd8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3dda:	f8 94       	cli

	if (val == LOW) {
    3ddc:	11 11       	cpse	r17, r1
    3dde:	04 c0       	rjmp	.+8      	; 0x3de8 <digitalWrite+0x4e>
		*out &= ~bit;
    3de0:	8c 91       	ld	r24, X
    3de2:	d0 95       	com	r29
    3de4:	d8 23       	and	r29, r24
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <digitalWrite+0x52>
	} else {
		*out |= bit;
    3de8:	ec 91       	ld	r30, X
    3dea:	de 2b       	or	r29, r30
    3dec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3dee:	9f bf       	out	0x3f, r25	; 63
}
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	1f 91       	pop	r17
    3df6:	08 95       	ret

00003df8 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3df8:	88 5e       	subi	r24, 0xE8	; 232
    3dfa:	9e 4f       	sbci	r25, 0xFE	; 254
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	8d 91       	ld	r24, X+
    3e00:	9c 91       	ld	r25, X
    3e02:	dc 01       	movw	r26, r24
    3e04:	ed 91       	ld	r30, X+
    3e06:	fc 91       	ld	r31, X
    3e08:	04 80       	ldd	r0, Z+4	; 0x04
    3e0a:	f5 81       	ldd	r31, Z+5	; 0x05
    3e0c:	e0 2d       	mov	r30, r0
    3e0e:	09 94       	ijmp

00003e10 <_ZN13Adafruit_FONA5writeEh>:
    3e10:	88 5e       	subi	r24, 0xE8	; 232
    3e12:	9e 4f       	sbci	r25, 0xFE	; 254
    3e14:	dc 01       	movw	r26, r24
    3e16:	8d 91       	ld	r24, X+
    3e18:	9c 91       	ld	r25, X
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	ed 91       	ld	r30, X+
    3e1e:	fc 91       	ld	r31, X
    3e20:	01 90       	ld	r0, Z+
    3e22:	f0 81       	ld	r31, Z
    3e24:	e0 2d       	mov	r30, r0
    3e26:	09 94       	ijmp

00003e28 <_ZN13Adafruit_FONA4readEv>:
    3e28:	88 5e       	subi	r24, 0xE8	; 232
    3e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	8d 91       	ld	r24, X+
    3e30:	9c 91       	ld	r25, X
    3e32:	dc 01       	movw	r26, r24
    3e34:	ed 91       	ld	r30, X+
    3e36:	fc 91       	ld	r31, X
    3e38:	06 80       	ldd	r0, Z+6	; 0x06
    3e3a:	f7 81       	ldd	r31, Z+7	; 0x07
    3e3c:	e0 2d       	mov	r30, r0
    3e3e:	09 94       	ijmp

00003e40 <_ZN13Adafruit_FONA4peekEv>:
    3e40:	88 5e       	subi	r24, 0xE8	; 232
    3e42:	9e 4f       	sbci	r25, 0xFE	; 254
    3e44:	dc 01       	movw	r26, r24
    3e46:	8d 91       	ld	r24, X+
    3e48:	9c 91       	ld	r25, X
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	ed 91       	ld	r30, X+
    3e4e:	fc 91       	ld	r31, X
    3e50:	00 84       	ldd	r0, Z+8	; 0x08
    3e52:	f1 85       	ldd	r31, Z+9	; 0x09
    3e54:	e0 2d       	mov	r30, r0
    3e56:	09 94       	ijmp

00003e58 <_ZN13Adafruit_FONA5flushEv>:
    3e58:	88 5e       	subi	r24, 0xE8	; 232
    3e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	8d 91       	ld	r24, X+
    3e60:	9c 91       	ld	r25, X
    3e62:	dc 01       	movw	r26, r24
    3e64:	ed 91       	ld	r30, X+
    3e66:	fc 91       	ld	r31, X
    3e68:	02 84       	ldd	r0, Z+10	; 0x0a
    3e6a:	f3 85       	ldd	r31, Z+11	; 0x0b
    3e6c:	e0 2d       	mov	r30, r0
    3e6e:	09 94       	ijmp

00003e70 <_ZN13Adafruit_FONAC1Ea>:
    3e70:	fc 01       	movw	r30, r24
    3e72:	13 82       	std	Z+3, r1	; 0x03
    3e74:	12 82       	std	Z+2, r1	; 0x02
    3e76:	88 ee       	ldi	r24, 0xE8	; 232
    3e78:	93 e0       	ldi	r25, 0x03	; 3
    3e7a:	a0 e0       	ldi	r26, 0x00	; 0
    3e7c:	b0 e0       	ldi	r27, 0x00	; 0
    3e7e:	84 83       	std	Z+4, r24	; 0x04
    3e80:	95 83       	std	Z+5, r25	; 0x05
    3e82:	a6 83       	std	Z+6, r26	; 0x06
    3e84:	b7 83       	std	Z+7, r27	; 0x07
    3e86:	80 e9       	ldi	r24, 0x90	; 144
    3e88:	93 e0       	ldi	r25, 0x03	; 3
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	80 83       	st	Z, r24
    3e8e:	64 87       	std	Z+12, r22	; 0x0c
    3e90:	df 01       	movw	r26, r30
    3e92:	a3 5f       	subi	r26, 0xF3	; 243
    3e94:	be 4f       	sbci	r27, 0xFE	; 254
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	97 e0       	ldi	r25, 0x07	; 7
    3e9a:	11 96       	adiw	r26, 0x01	; 1
    3e9c:	9c 93       	st	X, r25
    3e9e:	8e 93       	st	-X, r24
    3ea0:	12 96       	adiw	r26, 0x02	; 2
    3ea2:	11 96       	adiw	r26, 0x01	; 1
    3ea4:	1c 92       	st	X, r1
    3ea6:	1e 92       	st	-X, r1
    3ea8:	12 96       	adiw	r26, 0x02	; 2
    3eaa:	11 96       	adiw	r26, 0x01	; 1
    3eac:	1c 92       	st	X, r1
    3eae:	1e 92       	st	-X, r1
    3eb0:	17 96       	adiw	r26, 0x07	; 7
    3eb2:	11 96       	adiw	r26, 0x01	; 1
    3eb4:	1c 92       	st	X, r1
    3eb6:	1e 92       	st	-X, r1
    3eb8:	15 97       	sbiw	r26, 0x05	; 5
    3eba:	1c 92       	st	X, r1
    3ebc:	11 96       	adiw	r26, 0x01	; 1
    3ebe:	8c ef       	ldi	r24, 0xFC	; 252
    3ec0:	96 e0       	ldi	r25, 0x06	; 6
    3ec2:	8d 93       	st	X+, r24
    3ec4:	9c 93       	st	X, r25
    3ec6:	ea 5e       	subi	r30, 0xEA	; 234
    3ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eca:	89 ef       	ldi	r24, 0xF9	; 249
    3ecc:	96 e0       	ldi	r25, 0x06	; 6
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	08 95       	ret

00003ed4 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	e3 5f       	subi	r30, 0xF3	; 243
    3ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eda:	71 83       	std	Z+1, r23	; 0x01
    3edc:	60 83       	st	Z, r22
    3ede:	32 96       	adiw	r30, 0x02	; 2
    3ee0:	51 83       	std	Z+1, r21	; 0x01
    3ee2:	40 83       	st	Z, r20
    3ee4:	32 96       	adiw	r30, 0x02	; 2
    3ee6:	31 83       	std	Z+1, r19	; 0x01
    3ee8:	20 83       	st	Z, r18
    3eea:	08 95       	ret

00003eec <_ZN13Adafruit_FONA10flushInputEv>:
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	ec 01       	movw	r28, r24
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	8c 01       	movw	r16, r24
    3efc:	0f 5f       	subi	r16, 0xFF	; 255
    3efe:	1f 4f       	sbci	r17, 0xFF	; 255
    3f00:	88 97       	sbiw	r24, 0x28	; 40
    3f02:	d8 f4       	brcc	.+54     	; 0x3f3a <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    3f04:	e8 81       	ld	r30, Y
    3f06:	f9 81       	ldd	r31, Y+1	; 0x01
    3f08:	04 80       	ldd	r0, Z+4	; 0x04
    3f0a:	f5 81       	ldd	r31, Z+5	; 0x05
    3f0c:	e0 2d       	mov	r30, r0
    3f0e:	ce 01       	movw	r24, r28
    3f10:	09 95       	icall
    3f12:	89 2b       	or	r24, r25
    3f14:	51 f0       	breq	.+20     	; 0x3f2a <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    3f16:	e8 81       	ld	r30, Y
    3f18:	f9 81       	ldd	r31, Y+1	; 0x01
    3f1a:	06 80       	ldd	r0, Z+6	; 0x06
    3f1c:	f7 81       	ldd	r31, Z+7	; 0x07
    3f1e:	e0 2d       	mov	r30, r0
    3f20:	ce 01       	movw	r24, r28
    3f22:	09 95       	icall
    3f24:	00 e0       	ldi	r16, 0x00	; 0
    3f26:	10 e0       	ldi	r17, 0x00	; 0
    3f28:	ed cf       	rjmp	.-38     	; 0x3f04 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    3f2a:	61 e0       	ldi	r22, 0x01	; 1
    3f2c:	70 e0       	ldi	r23, 0x00	; 0
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    3f36:	c8 01       	movw	r24, r16
    3f38:	e0 cf       	rjmp	.-64     	; 0x3efa <_ZN13Adafruit_FONA10flushInputEv+0xe>
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	1f 91       	pop	r17
    3f40:	0f 91       	pop	r16
    3f42:	08 95       	ret

00003f44 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    3f44:	ff 92       	push	r15
    3f46:	0f 93       	push	r16
    3f48:	1f 93       	push	r17
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
    3f4e:	ec 01       	movw	r28, r24
    3f50:	8b 01       	movw	r16, r22
    3f52:	f4 2e       	mov	r15, r20
    3f54:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    3f58:	6f ea       	ldi	r22, 0xAF	; 175
    3f5a:	74 e0       	ldi	r23, 0x04	; 4
    3f5c:	86 ed       	ldi	r24, 0xD6	; 214
    3f5e:	97 e0       	ldi	r25, 0x07	; 7
    3f60:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    3f64:	61 ea       	ldi	r22, 0xA1	; 161
    3f66:	74 e0       	ldi	r23, 0x04	; 4
    3f68:	86 ed       	ldi	r24, 0xD6	; 214
    3f6a:	97 e0       	ldi	r25, 0x07	; 7
    3f6c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    3f70:	b8 01       	movw	r22, r16
    3f72:	86 ed       	ldi	r24, 0xD6	; 214
    3f74:	97 e0       	ldi	r25, 0x07	; 7
    3f76:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    3f7a:	62 e2       	ldi	r22, 0x22	; 34
    3f7c:	86 ed       	ldi	r24, 0xD6	; 214
    3f7e:	97 e0       	ldi	r25, 0x07	; 7
    3f80:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <_ZN5Print7printlnEc>
    3f84:	c8 5e       	subi	r28, 0xE8	; 232
    3f86:	de 4f       	sbci	r29, 0xFE	; 254
    3f88:	63 e9       	ldi	r22, 0x93	; 147
    3f8a:	74 e0       	ldi	r23, 0x04	; 4
    3f8c:	88 81       	ld	r24, Y
    3f8e:	99 81       	ldd	r25, Y+1	; 0x01
    3f90:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    3f94:	b8 01       	movw	r22, r16
    3f96:	88 81       	ld	r24, Y
    3f98:	99 81       	ldd	r25, Y+1	; 0x01
    3f9a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    3f9e:	88 81       	ld	r24, Y
    3fa0:	99 81       	ldd	r25, Y+1	; 0x01
    3fa2:	ff 20       	and	r15, r15
    3fa4:	19 f0       	breq	.+6      	; 0x3fac <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    3fa6:	6f e8       	ldi	r22, 0x8F	; 143
    3fa8:	74 e0       	ldi	r23, 0x04	; 4
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    3fac:	6c e8       	ldi	r22, 0x8C	; 140
    3fae:	74 e0       	ldi	r23, 0x04	; 4
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	1f 91       	pop	r17
    3fb6:	0f 91       	pop	r16
    3fb8:	ff 90       	pop	r15
    3fba:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>

00003fbe <_ZN13Adafruit_FONA8readlineEjb>:
    3fbe:	9f 92       	push	r9
    3fc0:	af 92       	push	r10
    3fc2:	bf 92       	push	r11
    3fc4:	cf 92       	push	r12
    3fc6:	df 92       	push	r13
    3fc8:	ef 92       	push	r14
    3fca:	ff 92       	push	r15
    3fcc:	0f 93       	push	r16
    3fce:	1f 93       	push	r17
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
    3fd4:	7c 01       	movw	r14, r24
    3fd6:	94 2e       	mov	r9, r20
    3fd8:	8b 01       	movw	r16, r22
    3fda:	00 0f       	add	r16, r16
    3fdc:	11 1f       	adc	r17, r17
    3fde:	00 0f       	add	r16, r16
    3fe0:	11 1f       	adc	r17, r17
    3fe2:	c0 e0       	ldi	r28, 0x00	; 0
    3fe4:	d0 e0       	ldi	r29, 0x00	; 0
    3fe6:	57 01       	movw	r10, r14
    3fe8:	88 ee       	ldi	r24, 0xE8	; 232
    3fea:	a8 1a       	sub	r10, r24
    3fec:	8e ef       	ldi	r24, 0xFE	; 254
    3fee:	b8 0a       	sbc	r11, r24
    3ff0:	01 15       	cp	r16, r1
    3ff2:	11 05       	cpc	r17, r1
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    3ff6:	50 c0       	rjmp	.+160    	; 0x4098 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3ff8:	ce 3f       	cpi	r28, 0xFE	; 254
    3ffa:	d1 05       	cpc	r29, r1
    3ffc:	80 f0       	brcs	.+32     	; 0x401e <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3ffe:	61 ee       	ldi	r22, 0xE1	; 225
    4000:	73 e0       	ldi	r23, 0x03	; 3
    4002:	22 c0       	rjmp	.+68     	; 0x4048 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    4004:	f5 01       	movw	r30, r10
    4006:	80 81       	ld	r24, Z
    4008:	91 81       	ldd	r25, Z+1	; 0x01
    400a:	dc 01       	movw	r26, r24
    400c:	ed 91       	ld	r30, X+
    400e:	fc 91       	ld	r31, X
    4010:	06 80       	ldd	r0, Z+6	; 0x06
    4012:	f7 81       	ldd	r31, Z+7	; 0x07
    4014:	e0 2d       	mov	r30, r0
    4016:	09 95       	icall
    4018:	6c 01       	movw	r12, r24
    401a:	8d 30       	cpi	r24, 0x0D	; 13
    401c:	69 f4       	brne	.+26     	; 0x4038 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    401e:	d5 01       	movw	r26, r10
    4020:	8d 91       	ld	r24, X+
    4022:	9c 91       	ld	r25, X
    4024:	dc 01       	movw	r26, r24
    4026:	ed 91       	ld	r30, X+
    4028:	fc 91       	ld	r31, X
    402a:	04 80       	ldd	r0, Z+4	; 0x04
    402c:	f5 81       	ldd	r31, Z+5	; 0x05
    402e:	e0 2d       	mov	r30, r0
    4030:	09 95       	icall
    4032:	89 2b       	or	r24, r25
    4034:	39 f7       	brne	.-50     	; 0x4004 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    4036:	26 c0       	rjmp	.+76     	; 0x4084 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    4038:	8a 30       	cpi	r24, 0x0A	; 10
    403a:	59 f4       	brne	.+22     	; 0x4052 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    403c:	20 97       	sbiw	r28, 0x00	; 0
    403e:	79 f3       	breq	.-34     	; 0x401e <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4040:	91 10       	cpse	r9, r1
    4042:	07 c0       	rjmp	.+14     	; 0x4052 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4044:	69 ed       	ldi	r22, 0xD9	; 217
    4046:	73 e0       	ldi	r23, 0x03	; 3
    4048:	86 ed       	ldi	r24, 0xD6	; 214
    404a:	97 e0       	ldi	r25, 0x07	; 7
    404c:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
    4050:	23 c0       	rjmp	.+70     	; 0x4098 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4052:	f7 01       	movw	r30, r14
    4054:	ec 0f       	add	r30, r28
    4056:	fd 1f       	adc	r31, r29
    4058:	c6 86       	std	Z+14, r12	; 0x0e
    405a:	b6 01       	movw	r22, r12
    405c:	77 27       	eor	r23, r23
    405e:	40 e1       	ldi	r20, 0x10	; 16
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	86 ed       	ldi	r24, 0xD6	; 214
    4064:	97 e0       	ldi	r25, 0x07	; 7
    4066:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <_ZN5Print5printEii>
    406a:	63 e3       	ldi	r22, 0x33	; 51
    406c:	73 e0       	ldi	r23, 0x03	; 3
    406e:	86 ed       	ldi	r24, 0xD6	; 214
    4070:	97 e0       	ldi	r25, 0x07	; 7
    4072:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    4076:	6c 2d       	mov	r22, r12
    4078:	86 ed       	ldi	r24, 0xD6	; 214
    407a:	97 e0       	ldi	r25, 0x07	; 7
    407c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <_ZN5Print7printlnEc>
    4080:	21 96       	adiw	r28, 0x01	; 1
    4082:	cd cf       	rjmp	.-102    	; 0x401e <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4084:	01 50       	subi	r16, 0x01	; 1
    4086:	11 09       	sbc	r17, r1
    4088:	e9 f2       	breq	.-70     	; 0x4044 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    408a:	61 e0       	ldi	r22, 0x01	; 1
    408c:	70 e0       	ldi	r23, 0x00	; 0
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    4096:	ac cf       	rjmp	.-168    	; 0x3ff0 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    4098:	f7 01       	movw	r30, r14
    409a:	ec 0f       	add	r30, r28
    409c:	fd 1f       	adc	r31, r29
    409e:	16 86       	std	Z+14, r1	; 0x0e
    40a0:	8c 2f       	mov	r24, r28
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	1f 91       	pop	r17
    40a8:	0f 91       	pop	r16
    40aa:	ff 90       	pop	r15
    40ac:	ef 90       	pop	r14
    40ae:	df 90       	pop	r13
    40b0:	cf 90       	pop	r12
    40b2:	bf 90       	pop	r11
    40b4:	af 90       	pop	r10
    40b6:	9f 90       	pop	r9
    40b8:	08 95       	ret

000040ba <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    40ba:	0f 93       	push	r16
    40bc:	1f 93       	push	r17
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	ec 01       	movw	r28, r24
    40c4:	8b 01       	movw	r16, r22
    40c6:	ba 01       	movw	r22, r20
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    40ce:	67 ee       	ldi	r22, 0xE7	; 231
    40d0:	73 e0       	ldi	r23, 0x03	; 3
    40d2:	86 ed       	ldi	r24, 0xD6	; 214
    40d4:	97 e0       	ldi	r25, 0x07	; 7
    40d6:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    40da:	2e 96       	adiw	r28, 0x0e	; 14
    40dc:	be 01       	movw	r22, r28
    40de:	86 ed       	ldi	r24, 0xD6	; 214
    40e0:	97 e0       	ldi	r25, 0x07	; 7
    40e2:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    40e6:	b8 01       	movw	r22, r16
    40e8:	ce 01       	movw	r24, r28
    40ea:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strcmp_P>
    40ee:	21 e0       	ldi	r18, 0x01	; 1
    40f0:	89 2b       	or	r24, r25
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	82 2f       	mov	r24, r18
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	1f 91       	pop	r17
    40fe:	0f 91       	pop	r16
    4100:	08 95       	ret

00004102 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	ec 01       	movw	r28, r24
    4108:	fc 01       	movw	r30, r24
    410a:	e8 5e       	subi	r30, 0xE8	; 232
    410c:	fe 4f       	sbci	r31, 0xFE	; 254
    410e:	66 23       	and	r22, r22
    4110:	31 f0       	breq	.+12     	; 0x411e <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    4112:	62 e2       	ldi	r22, 0x22	; 34
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <_ZN5Print7printlnEc>
    411c:	04 c0       	rjmp	.+8      	; 0x4126 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    4126:	fe 01       	movw	r30, r28
    4128:	ea 5e       	subi	r30, 0xEA	; 234
    412a:	fe 4f       	sbci	r31, 0xFE	; 254
    412c:	60 81       	ld	r22, Z
    412e:	71 81       	ldd	r23, Z+1	; 0x01
    4130:	40 e1       	ldi	r20, 0x10	; 16
    4132:	57 e2       	ldi	r21, 0x27	; 39
    4134:	ce 01       	movw	r24, r28
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

0000413e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	cf 93       	push	r28
    4144:	df 93       	push	r29
    4146:	ec 01       	movw	r28, r24
    4148:	8a 01       	movw	r16, r20
    414a:	41 e0       	ldi	r20, 0x01	; 1
    414c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4150:	fe 01       	movw	r30, r28
    4152:	e8 5e       	subi	r30, 0xE8	; 232
    4154:	fe 4f       	sbci	r31, 0xFE	; 254
    4156:	b8 01       	movw	r22, r16
    4158:	80 81       	ld	r24, Z
    415a:	91 81       	ldd	r25, Z+1	; 0x01
    415c:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    4160:	61 e0       	ldi	r22, 0x01	; 1
    4162:	ce 01       	movw	r24, r28
    4164:	df 91       	pop	r29
    4166:	cf 91       	pop	r28
    4168:	1f 91       	pop	r17
    416a:	0f 91       	pop	r16
    416c:	0c 94 81 20 	jmp	0x4102	; 0x4102 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00004170 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    4170:	0f 93       	push	r16
    4172:	1f 93       	push	r17
    4174:	cf 93       	push	r28
    4176:	df 93       	push	r29
    4178:	ec 01       	movw	r28, r24
    417a:	8a 01       	movw	r16, r20
    417c:	41 e0       	ldi	r20, 0x01	; 1
    417e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4182:	fe 01       	movw	r30, r28
    4184:	e8 5e       	subi	r30, 0xE8	; 232
    4186:	fe 4f       	sbci	r31, 0xFE	; 254
    4188:	b8 01       	movw	r22, r16
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4192:	61 e0       	ldi	r22, 0x01	; 1
    4194:	ce 01       	movw	r24, r28
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	1f 91       	pop	r17
    419c:	0f 91       	pop	r16
    419e:	0c 94 81 20 	jmp	0x4102	; 0x4102 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000041a2 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    41a2:	cf 92       	push	r12
    41a4:	df 92       	push	r13
    41a6:	ef 92       	push	r14
    41a8:	ff 92       	push	r15
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	ec 01       	movw	r28, r24
    41b0:	69 01       	movw	r12, r18
    41b2:	7a 01       	movw	r14, r20
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    41ba:	fe 01       	movw	r30, r28
    41bc:	e8 5e       	subi	r30, 0xE8	; 232
    41be:	fe 4f       	sbci	r31, 0xFE	; 254
    41c0:	2a e0       	ldi	r18, 0x0A	; 10
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	b7 01       	movw	r22, r14
    41c6:	a6 01       	movw	r20, r12
    41c8:	80 81       	ld	r24, Z
    41ca:	91 81       	ldd	r25, Z+1	; 0x01
    41cc:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <_ZN5Print5printEli>
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	ce 01       	movw	r24, r28
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	ff 90       	pop	r15
    41da:	ef 90       	pop	r14
    41dc:	df 90       	pop	r13
    41de:	cf 90       	pop	r12
    41e0:	0c 94 81 20 	jmp	0x4102	; 0x4102 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000041e4 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    41e4:	4f 92       	push	r4
    41e6:	5f 92       	push	r5
    41e8:	6f 92       	push	r6
    41ea:	7f 92       	push	r7
    41ec:	8f 92       	push	r8
    41ee:	9f 92       	push	r9
    41f0:	af 92       	push	r10
    41f2:	bf 92       	push	r11
    41f4:	ef 92       	push	r14
    41f6:	ff 92       	push	r15
    41f8:	0f 93       	push	r16
    41fa:	1f 93       	push	r17
    41fc:	cf 93       	push	r28
    41fe:	df 93       	push	r29
    4200:	7c 01       	movw	r14, r24
    4202:	2a 01       	movw	r4, r20
    4204:	3b 01       	movw	r6, r22
    4206:	48 01       	movw	r8, r16
    4208:	59 01       	movw	r10, r18
    420a:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    420e:	65 e8       	ldi	r22, 0x85	; 133
    4210:	74 e0       	ldi	r23, 0x04	; 4
    4212:	86 ed       	ldi	r24, 0xD6	; 214
    4214:	97 e0       	ldi	r25, 0x07	; 7
    4216:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    421a:	68 e7       	ldi	r22, 0x78	; 120
    421c:	74 e0       	ldi	r23, 0x04	; 4
    421e:	86 ed       	ldi	r24, 0xD6	; 214
    4220:	97 e0       	ldi	r25, 0x07	; 7
    4222:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4226:	2a e0       	ldi	r18, 0x0A	; 10
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	b3 01       	movw	r22, r6
    422c:	a2 01       	movw	r20, r4
    422e:	86 ed       	ldi	r24, 0xD6	; 214
    4230:	97 e0       	ldi	r25, 0x07	; 7
    4232:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN5Print5printEmi>
    4236:	6c e2       	ldi	r22, 0x2C	; 44
    4238:	86 ed       	ldi	r24, 0xD6	; 214
    423a:	97 e0       	ldi	r25, 0x07	; 7
    423c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_ZN5Print5printEc>
    4240:	2a e0       	ldi	r18, 0x0A	; 10
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	b5 01       	movw	r22, r10
    4246:	a4 01       	movw	r20, r8
    4248:	86 ed       	ldi	r24, 0xD6	; 214
    424a:	97 e0       	ldi	r25, 0x07	; 7
    424c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_ZN5Print7printlnEmi>
    4250:	e7 01       	movw	r28, r14
    4252:	c8 5e       	subi	r28, 0xE8	; 232
    4254:	de 4f       	sbci	r29, 0xFE	; 254
    4256:	6b e6       	ldi	r22, 0x6B	; 107
    4258:	74 e0       	ldi	r23, 0x04	; 4
    425a:	88 81       	ld	r24, Y
    425c:	99 81       	ldd	r25, Y+1	; 0x01
    425e:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4262:	2a e0       	ldi	r18, 0x0A	; 10
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	b3 01       	movw	r22, r6
    4268:	a2 01       	movw	r20, r4
    426a:	88 81       	ld	r24, Y
    426c:	99 81       	ldd	r25, Y+1	; 0x01
    426e:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN5Print5printEmi>
    4272:	6d e3       	ldi	r22, 0x3D	; 61
    4274:	73 e0       	ldi	r23, 0x03	; 3
    4276:	88 81       	ld	r24, Y
    4278:	99 81       	ldd	r25, Y+1	; 0x01
    427a:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    427e:	2a e0       	ldi	r18, 0x0A	; 10
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	b5 01       	movw	r22, r10
    4284:	a4 01       	movw	r20, r8
    4286:	88 81       	ld	r24, Y
    4288:	99 81       	ldd	r25, Y+1	; 0x01
    428a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_ZN5Print7printlnEmi>
    428e:	40 e1       	ldi	r20, 0x10	; 16
    4290:	57 e2       	ldi	r21, 0x27	; 39
    4292:	62 e6       	ldi	r22, 0x62	; 98
    4294:	74 e0       	ldi	r23, 0x04	; 4
    4296:	c7 01       	movw	r24, r14
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	bf 90       	pop	r11
    42a6:	af 90       	pop	r10
    42a8:	9f 90       	pop	r9
    42aa:	8f 90       	pop	r8
    42ac:	7f 90       	pop	r7
    42ae:	6f 90       	pop	r6
    42b0:	5f 90       	pop	r5
    42b2:	4f 90       	pop	r4
    42b4:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

000042b8 <_ZN13Adafruit_FONA8getReplyEPcj>:
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	ec 01       	movw	r28, r24
    42c6:	8b 01       	movw	r16, r22
    42c8:	7a 01       	movw	r14, r20
    42ca:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    42ce:	62 ed       	ldi	r22, 0xD2	; 210
    42d0:	73 e0       	ldi	r23, 0x03	; 3
    42d2:	86 ed       	ldi	r24, 0xD6	; 214
    42d4:	97 e0       	ldi	r25, 0x07	; 7
    42d6:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    42da:	b8 01       	movw	r22, r16
    42dc:	86 ed       	ldi	r24, 0xD6	; 214
    42de:	97 e0       	ldi	r25, 0x07	; 7
    42e0:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    42e4:	fe 01       	movw	r30, r28
    42e6:	e8 5e       	subi	r30, 0xE8	; 232
    42e8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ea:	b8 01       	movw	r22, r16
    42ec:	80 81       	ld	r24, Z
    42ee:	91 81       	ldd	r25, Z+1	; 0x01
    42f0:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    42f4:	40 e0       	ldi	r20, 0x00	; 0
    42f6:	b7 01       	movw	r22, r14
    42f8:	ce 01       	movw	r24, r28
    42fa:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    42fe:	18 2f       	mov	r17, r24
    4300:	6b ec       	ldi	r22, 0xCB	; 203
    4302:	73 e0       	ldi	r23, 0x03	; 3
    4304:	86 ed       	ldi	r24, 0xD6	; 214
    4306:	97 e0       	ldi	r25, 0x07	; 7
    4308:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    430c:	be 01       	movw	r22, r28
    430e:	62 5f       	subi	r22, 0xF2	; 242
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	86 ed       	ldi	r24, 0xD6	; 214
    4314:	97 e0       	ldi	r25, 0x07	; 7
    4316:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    431a:	81 2f       	mov	r24, r17
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	ff 90       	pop	r15
    4326:	ef 90       	pop	r14
    4328:	08 95       	ret

0000432a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	ec 01       	movw	r28, r24
    4338:	8b 01       	movw	r16, r22
    433a:	7a 01       	movw	r14, r20
    433c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    4340:	64 ec       	ldi	r22, 0xC4	; 196
    4342:	73 e0       	ldi	r23, 0x03	; 3
    4344:	86 ed       	ldi	r24, 0xD6	; 214
    4346:	97 e0       	ldi	r25, 0x07	; 7
    4348:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    434c:	b8 01       	movw	r22, r16
    434e:	86 ed       	ldi	r24, 0xD6	; 214
    4350:	97 e0       	ldi	r25, 0x07	; 7
    4352:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
    4356:	fe 01       	movw	r30, r28
    4358:	e8 5e       	subi	r30, 0xE8	; 232
    435a:	fe 4f       	sbci	r31, 0xFE	; 254
    435c:	b8 01       	movw	r22, r16
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	b7 01       	movw	r22, r14
    436a:	ce 01       	movw	r24, r28
    436c:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4370:	18 2f       	mov	r17, r24
    4372:	6d eb       	ldi	r22, 0xBD	; 189
    4374:	73 e0       	ldi	r23, 0x03	; 3
    4376:	86 ed       	ldi	r24, 0xD6	; 214
    4378:	97 e0       	ldi	r25, 0x07	; 7
    437a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    437e:	be 01       	movw	r22, r28
    4380:	62 5f       	subi	r22, 0xF2	; 242
    4382:	7f 4f       	sbci	r23, 0xFF	; 255
    4384:	86 ed       	ldi	r24, 0xD6	; 214
    4386:	97 e0       	ldi	r25, 0x07	; 7
    4388:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    438c:	81 2f       	mov	r24, r17
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	ff 90       	pop	r15
    4398:	ef 90       	pop	r14
    439a:	08 95       	ret

0000439c <_ZN13Adafruit_FONA9GPSstatusEv>:
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	8c 01       	movw	r16, r24
    43a6:	44 ef       	ldi	r20, 0xF4	; 244
    43a8:	51 e0       	ldi	r21, 0x01	; 1
    43aa:	6e eb       	ldi	r22, 0xBE	; 190
    43ac:	75 e0       	ldi	r23, 0x05	; 5
    43ae:	0e 94 95 21 	call	0x432a	; 0x432a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    43b2:	63 eb       	ldi	r22, 0xB3	; 179
    43b4:	75 e0       	ldi	r23, 0x05	; 5
    43b6:	c8 01       	movw	r24, r16
    43b8:	0e 96       	adiw	r24, 0x0e	; 14
    43ba:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    43be:	ec 01       	movw	r28, r24
    43c0:	89 2b       	or	r24, r25
    43c2:	71 f0       	breq	.+28     	; 0x43e0 <_ZN13Adafruit_FONA9GPSstatusEv+0x44>
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	64 ef       	ldi	r22, 0xF4	; 244
    43c8:	71 e0       	ldi	r23, 0x01	; 1
    43ca:	c8 01       	movw	r24, r16
    43cc:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    43d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43d2:	80 33       	cpi	r24, 0x30	; 48
    43d4:	39 f0       	breq	.+14     	; 0x43e4 <_ZN13Adafruit_FONA9GPSstatusEv+0x48>
    43d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    43d8:	81 33       	cpi	r24, 0x31	; 49
    43da:	31 f0       	breq	.+12     	; 0x43e8 <_ZN13Adafruit_FONA9GPSstatusEv+0x4c>
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	05 c0       	rjmp	.+10     	; 0x43ea <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    43e0:	8f ef       	ldi	r24, 0xFF	; 255
    43e2:	03 c0       	rjmp	.+6      	; 0x43ea <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	01 c0       	rjmp	.+2      	; 0x43ea <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    43e8:	83 e0       	ldi	r24, 0x03	; 3
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	08 95       	ret

000043f4 <_ZN13Adafruit_FONA6getGPSEhPch>:
    43f4:	cf 92       	push	r12
    43f6:	df 92       	push	r13
    43f8:	ef 92       	push	r14
    43fa:	ff 92       	push	r15
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	8c 01       	movw	r16, r24
    4404:	7a 01       	movw	r14, r20
    4406:	c2 2f       	mov	r28, r18
    4408:	44 ef       	ldi	r20, 0xF4	; 244
    440a:	51 e0       	ldi	r21, 0x01	; 1
    440c:	68 ea       	ldi	r22, 0xA8	; 168
    440e:	75 e0       	ldi	r23, 0x05	; 5
    4410:	0e 94 95 21 	call	0x432a	; 0x432a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4414:	63 ea       	ldi	r22, 0xA3	; 163
    4416:	75 e0       	ldi	r23, 0x05	; 5
    4418:	c8 01       	movw	r24, r16
    441a:	0e 96       	adiw	r24, 0x0e	; 14
    441c:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4420:	00 97       	sbiw	r24, 0x00	; 0
    4422:	21 f4       	brne	.+8      	; 0x442c <_ZN13Adafruit_FONA6getGPSEhPch+0x38>
    4424:	f7 01       	movw	r30, r14
    4426:	10 82       	st	Z, r1
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	24 c0       	rjmp	.+72     	; 0x4474 <_ZN13Adafruit_FONA6getGPSEhPch+0x80>
    442c:	bc 01       	movw	r22, r24
    442e:	6a 5f       	subi	r22, 0xFA	; 250
    4430:	7f 4f       	sbci	r23, 0xFF	; 255
    4432:	fb 01       	movw	r30, r22
    4434:	01 90       	ld	r0, Z+
    4436:	00 20       	and	r0, r0
    4438:	e9 f7       	brne	.-6      	; 0x4434 <_ZN13Adafruit_FONA6getGPSEhPch+0x40>
    443a:	31 97       	sbiw	r30, 0x01	; 1
    443c:	e6 1b       	sub	r30, r22
    443e:	f7 0b       	sbc	r31, r23
    4440:	8c 2f       	mov	r24, r28
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	e8 17       	cp	r30, r24
    4448:	f9 07       	cpc	r31, r25
    444a:	10 f4       	brcc	.+4      	; 0x4450 <_ZN13Adafruit_FONA6getGPSEhPch+0x5c>
    444c:	c1 50       	subi	r28, 0x01	; 1
    444e:	01 c0       	rjmp	.+2      	; 0x4452 <_ZN13Adafruit_FONA6getGPSEhPch+0x5e>
    4450:	ce 2f       	mov	r28, r30
    4452:	cc 2e       	mov	r12, r28
    4454:	d1 2c       	mov	r13, r1
    4456:	a6 01       	movw	r20, r12
    4458:	c7 01       	movw	r24, r14
    445a:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <strncpy>
    445e:	f7 01       	movw	r30, r14
    4460:	ec 0d       	add	r30, r12
    4462:	fd 1d       	adc	r31, r13
    4464:	10 82       	st	Z, r1
    4466:	40 e0       	ldi	r20, 0x00	; 0
    4468:	64 ef       	ldi	r22, 0xF4	; 244
    446a:	71 e0       	ldi	r23, 0x01	; 1
    446c:	c8 01       	movw	r24, r16
    446e:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4472:	8c 2f       	mov	r24, r28
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	ff 90       	pop	r15
    447c:	ef 90       	pop	r14
    447e:	df 90       	pop	r13
    4480:	cf 90       	pop	r12
    4482:	08 95       	ret

00004484 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>:
    4484:	2f 92       	push	r2
    4486:	3f 92       	push	r3
    4488:	4f 92       	push	r4
    448a:	5f 92       	push	r5
    448c:	6f 92       	push	r6
    448e:	7f 92       	push	r7
    4490:	8f 92       	push	r8
    4492:	9f 92       	push	r9
    4494:	af 92       	push	r10
    4496:	bf 92       	push	r11
    4498:	cf 92       	push	r12
    449a:	df 92       	push	r13
    449c:	ef 92       	push	r14
    449e:	ff 92       	push	r15
    44a0:	0f 93       	push	r16
    44a2:	1f 93       	push	r17
    44a4:	cf 93       	push	r28
    44a6:	df 93       	push	r29
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
    44ac:	ca 57       	subi	r28, 0x7A	; 122
    44ae:	d1 09       	sbc	r29, r1
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	5c 01       	movw	r10, r24
    44bc:	1b 01       	movw	r2, r22
    44be:	eb 96       	adiw	r28, 0x3b	; 59
    44c0:	5f af       	std	Y+63, r21	; 0x3f
    44c2:	4e af       	std	Y+62, r20	; 0x3e
    44c4:	eb 97       	sbiw	r28, 0x3b	; 59
    44c6:	39 01       	movw	r6, r18
    44c8:	28 01       	movw	r4, r16
    44ca:	0e 94 ce 21 	call	0x439c	; 0x439c <_ZN13Adafruit_FONA9GPSstatusEv>
    44ce:	82 30       	cpi	r24, 0x02	; 2
    44d0:	14 f4       	brge	.+4      	; 0x44d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x52>
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	8a c0       	rjmp	.+276    	; 0x45ea <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x166>
    44d6:	28 e7       	ldi	r18, 0x78	; 120
    44d8:	ae 01       	movw	r20, r28
    44da:	4f 5f       	subi	r20, 0xFF	; 255
    44dc:	5f 4f       	sbci	r21, 0xFF	; 255
    44de:	60 e2       	ldi	r22, 0x20	; 32
    44e0:	c5 01       	movw	r24, r10
    44e2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <_ZN13Adafruit_FONA6getGPSEhPch>
    44e6:	88 23       	and	r24, r24
    44e8:	a1 f3       	breq	.-24     	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    44ea:	6d e3       	ldi	r22, 0x3D	; 61
    44ec:	73 e0       	ldi	r23, 0x03	; 3
    44ee:	ce 01       	movw	r24, r28
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    44f6:	89 2b       	or	r24, r25
    44f8:	61 f3       	breq	.-40     	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    44fa:	6d e3       	ldi	r22, 0x3D	; 61
    44fc:	73 e0       	ldi	r23, 0x03	; 3
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    4506:	89 2b       	or	r24, r25
    4508:	21 f3       	breq	.-56     	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    450a:	6d e3       	ldi	r22, 0x3D	; 61
    450c:	73 e0       	ldi	r23, 0x03	; 3
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    4516:	4c 01       	movw	r8, r24
    4518:	89 2b       	or	r24, r25
    451a:	d9 f2       	breq	.-74     	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    451c:	6d e3       	ldi	r22, 0x3D	; 61
    451e:	73 e0       	ldi	r23, 0x03	; 3
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    4528:	5c 01       	movw	r10, r24
    452a:	89 2b       	or	r24, r25
    452c:	91 f2       	breq	.-92     	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    452e:	6d e3       	ldi	r22, 0x3D	; 61
    4530:	73 e0       	ldi	r23, 0x03	; 3
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    453a:	8c 01       	movw	r16, r24
    453c:	89 2b       	or	r24, r25
    453e:	49 f2       	breq	.-110    	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4540:	4e e0       	ldi	r20, 0x0E	; 14
    4542:	50 e0       	ldi	r21, 0x00	; 0
    4544:	b4 01       	movw	r22, r8
    4546:	c6 01       	movw	r24, r12
    4548:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <strncpy>
    454c:	f6 01       	movw	r30, r12
    454e:	16 86       	std	Z+14, r1	; 0x0e
    4550:	c5 01       	movw	r24, r10
    4552:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <atof>
    4556:	f1 01       	movw	r30, r2
    4558:	60 83       	st	Z, r22
    455a:	71 83       	std	Z+1, r23	; 0x01
    455c:	82 83       	std	Z+2, r24	; 0x02
    455e:	93 83       	std	Z+3, r25	; 0x03
    4560:	c8 01       	movw	r24, r16
    4562:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <atof>
    4566:	eb 96       	adiw	r28, 0x3b	; 59
    4568:	ee ad       	ldd	r30, Y+62	; 0x3e
    456a:	ff ad       	ldd	r31, Y+63	; 0x3f
    456c:	eb 97       	sbiw	r28, 0x3b	; 59
    456e:	60 83       	st	Z, r22
    4570:	71 83       	std	Z+1, r23	; 0x01
    4572:	82 83       	std	Z+2, r24	; 0x02
    4574:	93 83       	std	Z+3, r25	; 0x03
    4576:	e1 14       	cp	r14, r1
    4578:	f1 04       	cpc	r15, r1
    457a:	81 f0       	breq	.+32     	; 0x459c <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x118>
    457c:	6d e3       	ldi	r22, 0x3D	; 61
    457e:	73 e0       	ldi	r23, 0x03	; 3
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	09 f4       	brne	.+2      	; 0x458e <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x10a>
    458c:	a2 cf       	rjmp	.-188    	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    458e:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <atof>
    4592:	f7 01       	movw	r30, r14
    4594:	60 83       	st	Z, r22
    4596:	71 83       	std	Z+1, r23	; 0x01
    4598:	82 83       	std	Z+2, r24	; 0x02
    459a:	93 83       	std	Z+3, r25	; 0x03
    459c:	61 14       	cp	r6, r1
    459e:	71 04       	cpc	r7, r1
    45a0:	81 f0       	breq	.+32     	; 0x45c2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x13e>
    45a2:	6d e3       	ldi	r22, 0x3D	; 61
    45a4:	73 e0       	ldi	r23, 0x03	; 3
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x130>
    45b2:	8f cf       	rjmp	.-226    	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45b4:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <atof>
    45b8:	f3 01       	movw	r30, r6
    45ba:	60 83       	st	Z, r22
    45bc:	71 83       	std	Z+1, r23	; 0x01
    45be:	82 83       	std	Z+2, r24	; 0x02
    45c0:	93 83       	std	Z+3, r25	; 0x03
    45c2:	41 14       	cp	r4, r1
    45c4:	51 04       	cpc	r5, r1
    45c6:	81 f0       	breq	.+32     	; 0x45e8 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x164>
    45c8:	6d e3       	ldi	r22, 0x3D	; 61
    45ca:	73 e0       	ldi	r23, 0x03	; 3
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strtok>
    45d4:	00 97       	sbiw	r24, 0x00	; 0
    45d6:	09 f4       	brne	.+2      	; 0x45da <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x156>
    45d8:	7c cf       	rjmp	.-264    	; 0x44d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    45da:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <atof>
    45de:	f2 01       	movw	r30, r4
    45e0:	60 83       	st	Z, r22
    45e2:	71 83       	std	Z+1, r23	; 0x01
    45e4:	82 83       	std	Z+2, r24	; 0x02
    45e6:	93 83       	std	Z+3, r25	; 0x03
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	c6 58       	subi	r28, 0x86	; 134
    45ec:	df 4f       	sbci	r29, 0xFF	; 255
    45ee:	0f b6       	in	r0, 0x3f	; 63
    45f0:	f8 94       	cli
    45f2:	de bf       	out	0x3e, r29	; 62
    45f4:	0f be       	out	0x3f, r0	; 63
    45f6:	cd bf       	out	0x3d, r28	; 61
    45f8:	df 91       	pop	r29
    45fa:	cf 91       	pop	r28
    45fc:	1f 91       	pop	r17
    45fe:	0f 91       	pop	r16
    4600:	ff 90       	pop	r15
    4602:	ef 90       	pop	r14
    4604:	df 90       	pop	r13
    4606:	cf 90       	pop	r12
    4608:	bf 90       	pop	r11
    460a:	af 90       	pop	r10
    460c:	9f 90       	pop	r9
    460e:	8f 90       	pop	r8
    4610:	7f 90       	pop	r7
    4612:	6f 90       	pop	r6
    4614:	5f 90       	pop	r5
    4616:	4f 90       	pop	r4
    4618:	3f 90       	pop	r3
    461a:	2f 90       	pop	r2
    461c:	08 95       	ret

0000461e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    461e:	8f 92       	push	r8
    4620:	9f 92       	push	r9
    4622:	af 92       	push	r10
    4624:	bf 92       	push	r11
    4626:	cf 92       	push	r12
    4628:	df 92       	push	r13
    462a:	ef 92       	push	r14
    462c:	ff 92       	push	r15
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
    4636:	ec 01       	movw	r28, r24
    4638:	6b 01       	movw	r12, r22
    463a:	49 01       	movw	r8, r18
    463c:	5a 01       	movw	r10, r20
    463e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    4642:	66 eb       	ldi	r22, 0xB6	; 182
    4644:	73 e0       	ldi	r23, 0x03	; 3
    4646:	86 ed       	ldi	r24, 0xD6	; 214
    4648:	97 e0       	ldi	r25, 0x07	; 7
    464a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    464e:	b6 01       	movw	r22, r12
    4650:	86 ed       	ldi	r24, 0xD6	; 214
    4652:	97 e0       	ldi	r25, 0x07	; 7
    4654:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4658:	2a e0       	ldi	r18, 0x0A	; 10
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	b5 01       	movw	r22, r10
    465e:	a4 01       	movw	r20, r8
    4660:	86 ed       	ldi	r24, 0xD6	; 214
    4662:	97 e0       	ldi	r25, 0x07	; 7
    4664:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN5Print7printlnEli>
    4668:	7e 01       	movw	r14, r28
    466a:	88 ee       	ldi	r24, 0xE8	; 232
    466c:	e8 1a       	sub	r14, r24
    466e:	8e ef       	ldi	r24, 0xFE	; 254
    4670:	f8 0a       	sbc	r15, r24
    4672:	b6 01       	movw	r22, r12
    4674:	f7 01       	movw	r30, r14
    4676:	80 81       	ld	r24, Z
    4678:	91 81       	ldd	r25, Z+1	; 0x01
    467a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    467e:	2a e0       	ldi	r18, 0x0A	; 10
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	b5 01       	movw	r22, r10
    4684:	a4 01       	movw	r20, r8
    4686:	f7 01       	movw	r30, r14
    4688:	80 81       	ld	r24, Z
    468a:	91 81       	ldd	r25, Z+1	; 0x01
    468c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN5Print7printlnEli>
    4690:	40 e0       	ldi	r20, 0x00	; 0
    4692:	b8 01       	movw	r22, r16
    4694:	ce 01       	movw	r24, r28
    4696:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    469a:	18 2f       	mov	r17, r24
    469c:	6f ea       	ldi	r22, 0xAF	; 175
    469e:	73 e0       	ldi	r23, 0x03	; 3
    46a0:	86 ed       	ldi	r24, 0xD6	; 214
    46a2:	97 e0       	ldi	r25, 0x07	; 7
    46a4:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    46a8:	be 01       	movw	r22, r28
    46aa:	62 5f       	subi	r22, 0xF2	; 242
    46ac:	7f 4f       	sbci	r23, 0xFF	; 255
    46ae:	86 ed       	ldi	r24, 0xD6	; 214
    46b0:	97 e0       	ldi	r25, 0x07	; 7
    46b2:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    46b6:	81 2f       	mov	r24, r17
    46b8:	df 91       	pop	r29
    46ba:	cf 91       	pop	r28
    46bc:	1f 91       	pop	r17
    46be:	0f 91       	pop	r16
    46c0:	ff 90       	pop	r15
    46c2:	ef 90       	pop	r14
    46c4:	df 90       	pop	r13
    46c6:	cf 90       	pop	r12
    46c8:	bf 90       	pop	r11
    46ca:	af 90       	pop	r10
    46cc:	9f 90       	pop	r9
    46ce:	8f 90       	pop	r8
    46d0:	08 95       	ret

000046d2 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    46d2:	af 92       	push	r10
    46d4:	bf 92       	push	r11
    46d6:	cf 92       	push	r12
    46d8:	df 92       	push	r13
    46da:	ef 92       	push	r14
    46dc:	ff 92       	push	r15
    46de:	0f 93       	push	r16
    46e0:	1f 93       	push	r17
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	ec 01       	movw	r28, r24
    46e8:	6b 01       	movw	r12, r22
    46ea:	7a 01       	movw	r14, r20
    46ec:	59 01       	movw	r10, r18
    46ee:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    46f2:	68 ea       	ldi	r22, 0xA8	; 168
    46f4:	73 e0       	ldi	r23, 0x03	; 3
    46f6:	86 ed       	ldi	r24, 0xD6	; 214
    46f8:	97 e0       	ldi	r25, 0x07	; 7
    46fa:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    46fe:	b6 01       	movw	r22, r12
    4700:	86 ed       	ldi	r24, 0xD6	; 214
    4702:	97 e0       	ldi	r25, 0x07	; 7
    4704:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4708:	62 e2       	ldi	r22, 0x22	; 34
    470a:	86 ed       	ldi	r24, 0xD6	; 214
    470c:	97 e0       	ldi	r25, 0x07	; 7
    470e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_ZN5Print5printEc>
    4712:	b7 01       	movw	r22, r14
    4714:	86 ed       	ldi	r24, 0xD6	; 214
    4716:	97 e0       	ldi	r25, 0x07	; 7
    4718:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    471c:	62 e2       	ldi	r22, 0x22	; 34
    471e:	86 ed       	ldi	r24, 0xD6	; 214
    4720:	97 e0       	ldi	r25, 0x07	; 7
    4722:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <_ZN5Print7printlnEc>
    4726:	8e 01       	movw	r16, r28
    4728:	08 5e       	subi	r16, 0xE8	; 232
    472a:	1e 4f       	sbci	r17, 0xFE	; 254
    472c:	b6 01       	movw	r22, r12
    472e:	f8 01       	movw	r30, r16
    4730:	80 81       	ld	r24, Z
    4732:	91 81       	ldd	r25, Z+1	; 0x01
    4734:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4738:	62 e2       	ldi	r22, 0x22	; 34
    473a:	f8 01       	movw	r30, r16
    473c:	80 81       	ld	r24, Z
    473e:	91 81       	ldd	r25, Z+1	; 0x01
    4740:	0e 94 2a 1c 	call	0x3854	; 0x3854 <_ZN5Print5printEc>
    4744:	b7 01       	movw	r22, r14
    4746:	f8 01       	movw	r30, r16
    4748:	80 81       	ld	r24, Z
    474a:	91 81       	ldd	r25, Z+1	; 0x01
    474c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4750:	62 e2       	ldi	r22, 0x22	; 34
    4752:	f8 01       	movw	r30, r16
    4754:	80 81       	ld	r24, Z
    4756:	91 81       	ldd	r25, Z+1	; 0x01
    4758:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <_ZN5Print7printlnEc>
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	b5 01       	movw	r22, r10
    4760:	ce 01       	movw	r24, r28
    4762:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4766:	18 2f       	mov	r17, r24
    4768:	61 ea       	ldi	r22, 0xA1	; 161
    476a:	73 e0       	ldi	r23, 0x03	; 3
    476c:	86 ed       	ldi	r24, 0xD6	; 214
    476e:	97 e0       	ldi	r25, 0x07	; 7
    4770:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4774:	be 01       	movw	r22, r28
    4776:	62 5f       	subi	r22, 0xF2	; 242
    4778:	7f 4f       	sbci	r23, 0xFF	; 255
    477a:	86 ed       	ldi	r24, 0xD6	; 214
    477c:	97 e0       	ldi	r25, 0x07	; 7
    477e:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4782:	81 2f       	mov	r24, r17
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	df 90       	pop	r13
    4792:	cf 90       	pop	r12
    4794:	bf 90       	pop	r11
    4796:	af 90       	pop	r10
    4798:	08 95       	ret

0000479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    479a:	0f 93       	push	r16
    479c:	1f 93       	push	r17
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	ec 01       	movw	r28, r24
    47a4:	8a 01       	movw	r16, r20
    47a6:	a9 01       	movw	r20, r18
    47a8:	0e 94 95 21 	call	0x432a	; 0x432a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    47ac:	88 23       	and	r24, r24
    47ae:	41 f0       	breq	.+16     	; 0x47c0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    47b0:	b8 01       	movw	r22, r16
    47b2:	ce 01       	movw	r24, r28
    47b4:	0e 96       	adiw	r24, 0x0e	; 14
    47b6:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strcmp_P>
    47ba:	21 e0       	ldi	r18, 0x01	; 1
    47bc:	89 2b       	or	r24, r25
    47be:	09 f0       	breq	.+2      	; 0x47c2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	82 2f       	mov	r24, r18
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	1f 91       	pop	r17
    47ca:	0f 91       	pop	r16
    47cc:	08 95       	ret

000047ce <_ZN13Adafruit_FONA5beginER6Stream>:
    47ce:	cf 92       	push	r12
    47d0:	df 92       	push	r13
    47d2:	ef 92       	push	r14
    47d4:	ff 92       	push	r15
    47d6:	0f 93       	push	r16
    47d8:	1f 93       	push	r17
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	ec 01       	movw	r28, r24
    47e0:	7c 01       	movw	r14, r24
    47e2:	88 ee       	ldi	r24, 0xE8	; 232
    47e4:	e8 1a       	sub	r14, r24
    47e6:	8e ef       	ldi	r24, 0xFE	; 254
    47e8:	f8 0a       	sbc	r15, r24
    47ea:	d7 01       	movw	r26, r14
    47ec:	6d 93       	st	X+, r22
    47ee:	7c 93       	st	X, r23
    47f0:	61 e0       	ldi	r22, 0x01	; 1
    47f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    47f4:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <pinMode>
    47f8:	61 e0       	ldi	r22, 0x01	; 1
    47fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    47fc:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
    4800:	6a e0       	ldi	r22, 0x0A	; 10
    4802:	70 e0       	ldi	r23, 0x00	; 0
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    480c:	60 e0       	ldi	r22, 0x00	; 0
    480e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4810:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
    4814:	64 e6       	ldi	r22, 0x64	; 100
    4816:	70 e0       	ldi	r23, 0x00	; 0
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    4820:	61 e0       	ldi	r22, 0x01	; 1
    4822:	8c 85       	ldd	r24, Y+12	; 0x0c
    4824:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
    4828:	68 ed       	ldi	r22, 0xD8	; 216
    482a:	76 e0       	ldi	r23, 0x06	; 6
    482c:	86 ed       	ldi	r24, 0xD6	; 214
    482e:	97 e0       	ldi	r25, 0x07	; 7
    4830:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
    4834:	8e e0       	ldi	r24, 0x0E	; 14
    4836:	c8 2e       	mov	r12, r24
    4838:	d1 2c       	mov	r13, r1
    483a:	8e 01       	movw	r16, r28
    483c:	0a 5e       	subi	r16, 0xEA	; 234
    483e:	1e 4f       	sbci	r17, 0xFE	; 254
    4840:	f7 01       	movw	r30, r14
    4842:	80 81       	ld	r24, Z
    4844:	91 81       	ldd	r25, Z+1	; 0x01
    4846:	dc 01       	movw	r26, r24
    4848:	ed 91       	ld	r30, X+
    484a:	fc 91       	ld	r31, X
    484c:	04 80       	ldd	r0, Z+4	; 0x04
    484e:	f5 81       	ldd	r31, Z+5	; 0x05
    4850:	e0 2d       	mov	r30, r0
    4852:	09 95       	icall
    4854:	89 2b       	or	r24, r25
    4856:	89 f0       	breq	.+34     	; 0x487a <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    4858:	63 ec       	ldi	r22, 0xC3	; 195
    485a:	76 e0       	ldi	r23, 0x06	; 6
    485c:	86 ed       	ldi	r24, 0xD6	; 214
    485e:	97 e0       	ldi	r25, 0x07	; 7
    4860:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
    4864:	f7 01       	movw	r30, r14
    4866:	80 81       	ld	r24, Z
    4868:	91 81       	ldd	r25, Z+1	; 0x01
    486a:	dc 01       	movw	r26, r24
    486c:	ed 91       	ld	r30, X+
    486e:	fc 91       	ld	r31, X
    4870:	06 80       	ldd	r0, Z+6	; 0x06
    4872:	f7 81       	ldd	r31, Z+7	; 0x07
    4874:	e0 2d       	mov	r30, r0
    4876:	09 95       	icall
    4878:	e3 cf       	rjmp	.-58     	; 0x4840 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    487a:	f8 01       	movw	r30, r16
    487c:	40 81       	ld	r20, Z
    487e:	51 81       	ldd	r21, Z+1	; 0x01
    4880:	24 ef       	ldi	r18, 0xF4	; 244
    4882:	31 e0       	ldi	r19, 0x01	; 1
    4884:	60 ec       	ldi	r22, 0xC0	; 192
    4886:	76 e0       	ldi	r23, 0x06	; 6
    4888:	ce 01       	movw	r24, r28
    488a:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    488e:	81 11       	cpse	r24, r1
    4890:	63 c0       	rjmp	.+198    	; 0x4958 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    4892:	d7 01       	movw	r26, r14
    4894:	8d 91       	ld	r24, X+
    4896:	9c 91       	ld	r25, X
    4898:	dc 01       	movw	r26, r24
    489a:	ed 91       	ld	r30, X+
    489c:	fc 91       	ld	r31, X
    489e:	04 80       	ldd	r0, Z+4	; 0x04
    48a0:	f5 81       	ldd	r31, Z+5	; 0x05
    48a2:	e0 2d       	mov	r30, r0
    48a4:	09 95       	icall
    48a6:	89 2b       	or	r24, r25
    48a8:	59 f0       	breq	.+22     	; 0x48c0 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    48aa:	f7 01       	movw	r30, r14
    48ac:	80 81       	ld	r24, Z
    48ae:	91 81       	ldd	r25, Z+1	; 0x01
    48b0:	dc 01       	movw	r26, r24
    48b2:	ed 91       	ld	r30, X+
    48b4:	fc 91       	ld	r31, X
    48b6:	06 80       	ldd	r0, Z+6	; 0x06
    48b8:	f7 81       	ldd	r31, Z+7	; 0x07
    48ba:	e0 2d       	mov	r30, r0
    48bc:	09 95       	icall
    48be:	e9 cf       	rjmp	.-46     	; 0x4892 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    48c0:	24 ef       	ldi	r18, 0xF4	; 244
    48c2:	31 e0       	ldi	r19, 0x01	; 1
    48c4:	4d eb       	ldi	r20, 0xBD	; 189
    48c6:	56 e0       	ldi	r21, 0x06	; 6
    48c8:	6a eb       	ldi	r22, 0xBA	; 186
    48ca:	76 e0       	ldi	r23, 0x06	; 6
    48cc:	ce 01       	movw	r24, r28
    48ce:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    48d2:	81 11       	cpse	r24, r1
    48d4:	41 c0       	rjmp	.+130    	; 0x4958 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    48d6:	64 ef       	ldi	r22, 0xF4	; 244
    48d8:	71 e0       	ldi	r23, 0x01	; 1
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    48e2:	b1 e0       	ldi	r27, 0x01	; 1
    48e4:	cb 1a       	sub	r12, r27
    48e6:	d1 08       	sbc	r13, r1
    48e8:	09 f0       	breq	.+2      	; 0x48ec <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    48ea:	aa cf       	rjmp	.-172    	; 0x4840 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    48ec:	68 e8       	ldi	r22, 0x88	; 136
    48ee:	76 e0       	ldi	r23, 0x06	; 6
    48f0:	86 ed       	ldi	r24, 0xD6	; 214
    48f2:	97 e0       	ldi	r25, 0x07	; 7
    48f4:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN5Print7printlnEPK19__FlashStringHelper>
    48f8:	d8 01       	movw	r26, r16
    48fa:	4d 91       	ld	r20, X+
    48fc:	5c 91       	ld	r21, X
    48fe:	24 ef       	ldi	r18, 0xF4	; 244
    4900:	31 e0       	ldi	r19, 0x01	; 1
    4902:	65 e8       	ldi	r22, 0x85	; 133
    4904:	76 e0       	ldi	r23, 0x06	; 6
    4906:	ce 01       	movw	r24, r28
    4908:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    490c:	64 e6       	ldi	r22, 0x64	; 100
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    4918:	f8 01       	movw	r30, r16
    491a:	40 81       	ld	r20, Z
    491c:	51 81       	ldd	r21, Z+1	; 0x01
    491e:	24 ef       	ldi	r18, 0xF4	; 244
    4920:	31 e0       	ldi	r19, 0x01	; 1
    4922:	62 e8       	ldi	r22, 0x82	; 130
    4924:	76 e0       	ldi	r23, 0x06	; 6
    4926:	ce 01       	movw	r24, r28
    4928:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    492c:	64 e6       	ldi	r22, 0x64	; 100
    492e:	70 e0       	ldi	r23, 0x00	; 0
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    4938:	d8 01       	movw	r26, r16
    493a:	4d 91       	ld	r20, X+
    493c:	5c 91       	ld	r21, X
    493e:	24 ef       	ldi	r18, 0xF4	; 244
    4940:	31 e0       	ldi	r19, 0x01	; 1
    4942:	6f e7       	ldi	r22, 0x7F	; 127
    4944:	76 e0       	ldi	r23, 0x06	; 6
    4946:	ce 01       	movw	r24, r28
    4948:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    494c:	64 e6       	ldi	r22, 0x64	; 100
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    4958:	f8 01       	movw	r30, r16
    495a:	40 81       	ld	r20, Z
    495c:	51 81       	ldd	r21, Z+1	; 0x01
    495e:	24 ef       	ldi	r18, 0xF4	; 244
    4960:	31 e0       	ldi	r19, 0x01	; 1
    4962:	6a e7       	ldi	r22, 0x7A	; 122
    4964:	76 e0       	ldi	r23, 0x06	; 6
    4966:	ce 01       	movw	r24, r28
    4968:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    496c:	64 e6       	ldi	r22, 0x64	; 100
    496e:	70 e0       	ldi	r23, 0x00	; 0
    4970:	80 e0       	ldi	r24, 0x00	; 0
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    4978:	d8 01       	movw	r26, r16
    497a:	4d 91       	ld	r20, X+
    497c:	5c 91       	ld	r21, X
    497e:	24 ef       	ldi	r18, 0xF4	; 244
    4980:	31 e0       	ldi	r19, 0x01	; 1
    4982:	65 e7       	ldi	r22, 0x75	; 117
    4984:	76 e0       	ldi	r23, 0x06	; 6
    4986:	ce 01       	movw	r24, r28
    4988:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    498c:	d8 2e       	mov	r13, r24
    498e:	88 23       	and	r24, r24
    4990:	09 f4       	brne	.+2      	; 0x4994 <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    4992:	97 c0       	rjmp	.+302    	; 0x4ac2 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4994:	f8 01       	movw	r30, r16
    4996:	40 81       	ld	r20, Z
    4998:	51 81       	ldd	r21, Z+1	; 0x01
    499a:	24 ef       	ldi	r18, 0xF4	; 244
    499c:	31 e0       	ldi	r19, 0x01	; 1
    499e:	6b e6       	ldi	r22, 0x6B	; 107
    49a0:	76 e0       	ldi	r23, 0x06	; 6
    49a2:	ce 01       	movw	r24, r28
    49a4:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49a8:	64 e6       	ldi	r22, 0x64	; 100
    49aa:	70 e0       	ldi	r23, 0x00	; 0
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <delay>
    49b4:	ce 01       	movw	r24, r28
    49b6:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    49ba:	64 e6       	ldi	r22, 0x64	; 100
    49bc:	76 e0       	ldi	r23, 0x06	; 6
    49be:	86 ed       	ldi	r24, 0xD6	; 214
    49c0:	97 e0       	ldi	r25, 0x07	; 7
    49c2:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    49c6:	67 e4       	ldi	r22, 0x47	; 71
    49c8:	73 e0       	ldi	r23, 0x03	; 3
    49ca:	86 ed       	ldi	r24, 0xD6	; 214
    49cc:	97 e0       	ldi	r25, 0x07	; 7
    49ce:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    49d2:	67 e4       	ldi	r22, 0x47	; 71
    49d4:	73 e0       	ldi	r23, 0x03	; 3
    49d6:	d7 01       	movw	r26, r14
    49d8:	8d 91       	ld	r24, X+
    49da:	9c 91       	ld	r25, X
    49dc:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    49e0:	41 e0       	ldi	r20, 0x01	; 1
    49e2:	64 ef       	ldi	r22, 0xF4	; 244
    49e4:	71 e0       	ldi	r23, 0x01	; 1
    49e6:	ce 01       	movw	r24, r28
    49e8:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    49ec:	6d e5       	ldi	r22, 0x5D	; 93
    49ee:	76 e0       	ldi	r23, 0x06	; 6
    49f0:	86 ed       	ldi	r24, 0xD6	; 214
    49f2:	97 e0       	ldi	r25, 0x07	; 7
    49f4:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    49f8:	8e 01       	movw	r16, r28
    49fa:	02 5f       	subi	r16, 0xF2	; 242
    49fc:	1f 4f       	sbci	r17, 0xFF	; 255
    49fe:	b8 01       	movw	r22, r16
    4a00:	86 ed       	ldi	r24, 0xD6	; 214
    4a02:	97 e0       	ldi	r25, 0x07	; 7
    4a04:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4a08:	62 e5       	ldi	r22, 0x52	; 82
    4a0a:	76 e0       	ldi	r23, 0x06	; 6
    4a0c:	c8 01       	movw	r24, r16
    4a0e:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4a12:	89 2b       	or	r24, r25
    4a14:	11 f0       	breq	.+4      	; 0x4a1a <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    4a16:	83 e0       	ldi	r24, 0x03	; 3
    4a18:	23 c0       	rjmp	.+70     	; 0x4a60 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4a1a:	67 e4       	ldi	r22, 0x47	; 71
    4a1c:	76 e0       	ldi	r23, 0x06	; 6
    4a1e:	c8 01       	movw	r24, r16
    4a20:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4a24:	89 2b       	or	r24, r25
    4a26:	11 f0       	breq	.+4      	; 0x4a2c <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    4a28:	82 e0       	ldi	r24, 0x02	; 2
    4a2a:	1a c0       	rjmp	.+52     	; 0x4a60 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4a2c:	6c e3       	ldi	r22, 0x3C	; 60
    4a2e:	76 e0       	ldi	r23, 0x06	; 6
    4a30:	c8 01       	movw	r24, r16
    4a32:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4a36:	89 2b       	or	r24, r25
    4a38:	11 f0       	breq	.+4      	; 0x4a3e <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	11 c0       	rjmp	.+34     	; 0x4a60 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4a3e:	6c e2       	ldi	r22, 0x2C	; 44
    4a40:	76 e0       	ldi	r23, 0x06	; 6
    4a42:	c8 01       	movw	r24, r16
    4a44:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4a48:	89 2b       	or	r24, r25
    4a4a:	11 f0       	breq	.+4      	; 0x4a50 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    4a4c:	84 e0       	ldi	r24, 0x04	; 4
    4a4e:	08 c0       	rjmp	.+16     	; 0x4a60 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4a50:	6c e1       	ldi	r22, 0x1C	; 28
    4a52:	76 e0       	ldi	r23, 0x06	; 6
    4a54:	c8 01       	movw	r24, r16
    4a56:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4a5a:	89 2b       	or	r24, r25
    4a5c:	11 f0       	breq	.+4      	; 0x4a62 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    4a5e:	85 e0       	ldi	r24, 0x05	; 5
    4a60:	8d 87       	std	Y+13, r24	; 0x0d
    4a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a64:	81 30       	cpi	r24, 0x01	; 1
    4a66:	69 f5       	brne	.+90     	; 0x4ac2 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4a68:	65 e1       	ldi	r22, 0x15	; 21
    4a6a:	76 e0       	ldi	r23, 0x06	; 6
    4a6c:	86 ed       	ldi	r24, 0xD6	; 214
    4a6e:	97 e0       	ldi	r25, 0x07	; 7
    4a70:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4a74:	6b e4       	ldi	r22, 0x4B	; 75
    4a76:	73 e0       	ldi	r23, 0x03	; 3
    4a78:	86 ed       	ldi	r24, 0xD6	; 214
    4a7a:	97 e0       	ldi	r25, 0x07	; 7
    4a7c:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4a80:	6b e4       	ldi	r22, 0x4B	; 75
    4a82:	73 e0       	ldi	r23, 0x03	; 3
    4a84:	f7 01       	movw	r30, r14
    4a86:	80 81       	ld	r24, Z
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4a8e:	41 e0       	ldi	r20, 0x01	; 1
    4a90:	64 ef       	ldi	r22, 0xF4	; 244
    4a92:	71 e0       	ldi	r23, 0x01	; 1
    4a94:	ce 01       	movw	r24, r28
    4a96:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4a9a:	6e e0       	ldi	r22, 0x0E	; 14
    4a9c:	76 e0       	ldi	r23, 0x06	; 6
    4a9e:	86 ed       	ldi	r24, 0xD6	; 214
    4aa0:	97 e0       	ldi	r25, 0x07	; 7
    4aa2:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4aa6:	b8 01       	movw	r22, r16
    4aa8:	86 ed       	ldi	r24, 0xD6	; 214
    4aaa:	97 e0       	ldi	r25, 0x07	; 7
    4aac:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4ab0:	66 e0       	ldi	r22, 0x06	; 6
    4ab2:	76 e0       	ldi	r23, 0x06	; 6
    4ab4:	c8 01       	movw	r24, r16
    4ab6:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    4aba:	89 2b       	or	r24, r25
    4abc:	11 f0       	breq	.+4      	; 0x4ac2 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4abe:	86 e0       	ldi	r24, 0x06	; 6
    4ac0:	8d 87       	std	Y+13, r24	; 0x0d
    4ac2:	8d 2d       	mov	r24, r13
    4ac4:	df 91       	pop	r29
    4ac6:	cf 91       	pop	r28
    4ac8:	1f 91       	pop	r17
    4aca:	0f 91       	pop	r16
    4acc:	ff 90       	pop	r15
    4ace:	ef 90       	pop	r14
    4ad0:	df 90       	pop	r13
    4ad2:	cf 90       	pop	r12
    4ad4:	08 95       	ret

00004ad6 <_ZN13Adafruit_FONA9HTTP_initEv>:
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	ea 5e       	subi	r30, 0xEA	; 234
    4ada:	fe 4f       	sbci	r31, 0xFE	; 254
    4adc:	40 81       	ld	r20, Z
    4ade:	51 81       	ldd	r21, Z+1	; 0x01
    4ae0:	24 ef       	ldi	r18, 0xF4	; 244
    4ae2:	31 e0       	ldi	r19, 0x01	; 1
    4ae4:	62 ec       	ldi	r22, 0xC2	; 194
    4ae6:	74 e0       	ldi	r23, 0x04	; 4
    4ae8:	0c 94 cd 23 	jmp	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004aec <_ZN13Adafruit_FONA9HTTP_termEv>:
    4aec:	fc 01       	movw	r30, r24
    4aee:	ea 5e       	subi	r30, 0xEA	; 234
    4af0:	fe 4f       	sbci	r31, 0xFE	; 254
    4af2:	40 81       	ld	r20, Z
    4af4:	51 81       	ldd	r21, Z+1	; 0x01
    4af6:	24 ef       	ldi	r18, 0xF4	; 244
    4af8:	31 e0       	ldi	r19, 0x01	; 1
    4afa:	66 eb       	ldi	r22, 0xB6	; 182
    4afc:	74 e0       	ldi	r23, 0x04	; 4
    4afe:	0c 94 cd 23 	jmp	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004b02 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    4b02:	0c 94 76 25 	jmp	0x4aec	; 0x4aec <_ZN13Adafruit_FONA9HTTP_termEv>

00004b06 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	ec 01       	movw	r28, r24
    4b10:	8a 01       	movw	r16, r20
    4b12:	a9 01       	movw	r20, r18
    4b14:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <_ZN13Adafruit_FONA8getReplyEPcj>
    4b18:	88 23       	and	r24, r24
    4b1a:	41 f0       	breq	.+16     	; 0x4b2c <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    4b1c:	b8 01       	movw	r22, r16
    4b1e:	ce 01       	movw	r24, r28
    4b20:	0e 96       	adiw	r24, 0x0e	; 14
    4b22:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strcmp_P>
    4b26:	21 e0       	ldi	r18, 0x01	; 1
    4b28:	89 2b       	or	r24, r25
    4b2a:	09 f0       	breq	.+2      	; 0x4b2e <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	82 2f       	mov	r24, r18
    4b30:	df 91       	pop	r29
    4b32:	cf 91       	pop	r28
    4b34:	1f 91       	pop	r17
    4b36:	0f 91       	pop	r16
    4b38:	08 95       	ret

00004b3a <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    4b3a:	af 92       	push	r10
    4b3c:	bf 92       	push	r11
    4b3e:	cf 92       	push	r12
    4b40:	df 92       	push	r13
    4b42:	ef 92       	push	r14
    4b44:	ff 92       	push	r15
    4b46:	0f 93       	push	r16
    4b48:	1f 93       	push	r17
    4b4a:	cf 93       	push	r28
    4b4c:	df 93       	push	r29
    4b4e:	cd b7       	in	r28, 0x3d	; 61
    4b50:	de b7       	in	r29, 0x3e	; 62
    4b52:	6e 97       	sbiw	r28, 0x1e	; 30
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	f8 94       	cli
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	cd bf       	out	0x3d, r28	; 61
    4b5e:	8c 01       	movw	r16, r24
    4b60:	5b 01       	movw	r10, r22
    4b62:	6a 01       	movw	r12, r20
    4b64:	fc 01       	movw	r30, r24
    4b66:	ea 5e       	subi	r30, 0xEA	; 234
    4b68:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6a:	40 81       	ld	r20, Z
    4b6c:	51 81       	ldd	r21, Z+1	; 0x01
    4b6e:	24 ef       	ldi	r18, 0xF4	; 244
    4b70:	31 e0       	ldi	r19, 0x01	; 1
    4b72:	6f ec       	ldi	r22, 0xCF	; 207
    4b74:	75 e0       	ldi	r23, 0x05	; 5
    4b76:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4b7a:	88 23       	and	r24, r24
    4b7c:	09 f4       	brne	.+2      	; 0x4b80 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4b7e:	88 c0       	rjmp	.+272    	; 0x4c90 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4b80:	8a e0       	ldi	r24, 0x0A	; 10
    4b82:	ea e4       	ldi	r30, 0x4A	; 74
    4b84:	f2 e0       	ldi	r31, 0x02	; 2
    4b86:	9e 01       	movw	r18, r28
    4b88:	2f 5f       	subi	r18, 0xFF	; 255
    4b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8c:	79 01       	movw	r14, r18
    4b8e:	d9 01       	movw	r26, r18
    4b90:	01 90       	ld	r0, Z+
    4b92:	0d 92       	st	X+, r0
    4b94:	8a 95       	dec	r24
    4b96:	e1 f7       	brne	.-8      	; 0x4b90 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    4b98:	fe 01       	movw	r30, r28
    4b9a:	3b 96       	adiw	r30, 0x0b	; 11
    4b9c:	84 e1       	ldi	r24, 0x14	; 20
    4b9e:	df 01       	movw	r26, r30
    4ba0:	1d 92       	st	X+, r1
    4ba2:	8a 95       	dec	r24
    4ba4:	e9 f7       	brne	.-6      	; 0x4ba0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    4ba6:	43 e1       	ldi	r20, 0x13	; 19
    4ba8:	50 e0       	ldi	r21, 0x00	; 0
    4baa:	b5 01       	movw	r22, r10
    4bac:	ce 01       	movw	r24, r28
    4bae:	0a 96       	adiw	r24, 0x0a	; 10
    4bb0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <strncpy>
    4bb4:	f7 01       	movw	r30, r14
    4bb6:	01 90       	ld	r0, Z+
    4bb8:	00 20       	and	r0, r0
    4bba:	e9 f7       	brne	.-6      	; 0x4bb6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    4bbc:	31 97       	sbiw	r30, 0x01	; 1
    4bbe:	82 e2       	ldi	r24, 0x22	; 34
    4bc0:	80 83       	st	Z, r24
    4bc2:	24 ef       	ldi	r18, 0xF4	; 244
    4bc4:	31 e0       	ldi	r19, 0x01	; 1
    4bc6:	4c ec       	ldi	r20, 0xCC	; 204
    4bc8:	55 e0       	ldi	r21, 0x05	; 5
    4bca:	b7 01       	movw	r22, r14
    4bcc:	c8 01       	movw	r24, r16
    4bce:	0e 94 83 25 	call	0x4b06	; 0x4b06 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    4bd2:	88 23       	and	r24, r24
    4bd4:	09 f4       	brne	.+2      	; 0x4bd8 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    4bd6:	5c c0       	rjmp	.+184    	; 0x4c90 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4bd8:	69 ec       	ldi	r22, 0xC9	; 201
    4bda:	75 e0       	ldi	r23, 0x05	; 5
    4bdc:	86 ed       	ldi	r24, 0xD6	; 214
    4bde:	97 e0       	ldi	r25, 0x07	; 7
    4be0:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4be4:	b6 01       	movw	r22, r12
    4be6:	86 ed       	ldi	r24, 0xD6	; 214
    4be8:	97 e0       	ldi	r25, 0x07	; 7
    4bea:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4bee:	b6 01       	movw	r22, r12
    4bf0:	78 01       	movw	r14, r16
    4bf2:	b8 ee       	ldi	r27, 0xE8	; 232
    4bf4:	eb 1a       	sub	r14, r27
    4bf6:	be ef       	ldi	r27, 0xFE	; 254
    4bf8:	fb 0a       	sbc	r15, r27
    4bfa:	f7 01       	movw	r30, r14
    4bfc:	80 81       	ld	r24, Z
    4bfe:	91 81       	ldd	r25, Z+1	; 0x01
    4c00:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4c04:	d7 01       	movw	r26, r14
    4c06:	8d 91       	ld	r24, X+
    4c08:	9c 91       	ld	r25, X
    4c0a:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN5Print7printlnEv>
    4c0e:	f7 01       	movw	r30, r14
    4c10:	80 81       	ld	r24, Z
    4c12:	91 81       	ldd	r25, Z+1	; 0x01
    4c14:	dc 01       	movw	r26, r24
    4c16:	ed 91       	ld	r30, X+
    4c18:	fc 91       	ld	r31, X
    4c1a:	01 90       	ld	r0, Z+
    4c1c:	f0 81       	ld	r31, Z
    4c1e:	e0 2d       	mov	r30, r0
    4c20:	6a e1       	ldi	r22, 0x1A	; 26
    4c22:	09 95       	icall
    4c24:	64 e6       	ldi	r22, 0x64	; 100
    4c26:	73 e0       	ldi	r23, 0x03	; 3
    4c28:	86 ed       	ldi	r24, 0xD6	; 214
    4c2a:	97 e0       	ldi	r25, 0x07	; 7
    4c2c:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4c30:	f8 01       	movw	r30, r16
    4c32:	85 85       	ldd	r24, Z+13	; 0x0d
    4c34:	84 50       	subi	r24, 0x04	; 4
    4c36:	82 30       	cpi	r24, 0x02	; 2
    4c38:	60 f4       	brcc	.+24     	; 0x4c52 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    4c3a:	40 e0       	ldi	r20, 0x00	; 0
    4c3c:	68 ec       	ldi	r22, 0xC8	; 200
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	c8 01       	movw	r24, r16
    4c42:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4c46:	40 e0       	ldi	r20, 0x00	; 0
    4c48:	68 ec       	ldi	r22, 0xC8	; 200
    4c4a:	70 e0       	ldi	r23, 0x00	; 0
    4c4c:	c8 01       	movw	r24, r16
    4c4e:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4c52:	40 e0       	ldi	r20, 0x00	; 0
    4c54:	60 e1       	ldi	r22, 0x10	; 16
    4c56:	77 e2       	ldi	r23, 0x27	; 39
    4c58:	c8 01       	movw	r24, r16
    4c5a:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4c5e:	78 01       	movw	r14, r16
    4c60:	fe e0       	ldi	r31, 0x0E	; 14
    4c62:	ef 0e       	add	r14, r31
    4c64:	f1 1c       	adc	r15, r1
    4c66:	67 e6       	ldi	r22, 0x67	; 103
    4c68:	73 e0       	ldi	r23, 0x03	; 3
    4c6a:	c7 01       	movw	r24, r14
    4c6c:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <strstr>
    4c70:	89 2b       	or	r24, r25
    4c72:	71 f0       	breq	.+28     	; 0x4c90 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4c74:	40 e0       	ldi	r20, 0x00	; 0
    4c76:	68 ee       	ldi	r22, 0xE8	; 232
    4c78:	73 e0       	ldi	r23, 0x03	; 3
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    4c80:	6a e3       	ldi	r22, 0x3A	; 58
    4c82:	73 e0       	ldi	r23, 0x03	; 3
    4c84:	c7 01       	movw	r24, r14
    4c86:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <strcmp>
    4c8a:	21 e0       	ldi	r18, 0x01	; 1
    4c8c:	89 2b       	or	r24, r25
    4c8e:	09 f0       	breq	.+2      	; 0x4c92 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	82 2f       	mov	r24, r18
    4c94:	6e 96       	adiw	r28, 0x1e	; 30
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	1f 91       	pop	r17
    4ca6:	0f 91       	pop	r16
    4ca8:	ff 90       	pop	r15
    4caa:	ef 90       	pop	r14
    4cac:	df 90       	pop	r13
    4cae:	cf 90       	pop	r12
    4cb0:	bf 90       	pop	r11
    4cb2:	af 90       	pop	r10
    4cb4:	08 95       	ret

00004cb6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    4cb6:	cf 92       	push	r12
    4cb8:	df 92       	push	r13
    4cba:	ef 92       	push	r14
    4cbc:	ff 92       	push	r15
    4cbe:	0f 93       	push	r16
    4cc0:	1f 93       	push	r17
    4cc2:	cf 93       	push	r28
    4cc4:	df 93       	push	r29
    4cc6:	ec 01       	movw	r28, r24
    4cc8:	68 01       	movw	r12, r16
    4cca:	87 01       	movw	r16, r14
    4ccc:	0e 94 0f 23 	call	0x461e	; 0x461e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4cd0:	b6 01       	movw	r22, r12
    4cd2:	ce 01       	movw	r24, r28
    4cd4:	0e 96       	adiw	r24, 0x0e	; 14
    4cd6:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strcmp_P>
    4cda:	21 e0       	ldi	r18, 0x01	; 1
    4cdc:	89 2b       	or	r24, r25
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	82 2f       	mov	r24, r18
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	ff 90       	pop	r15
    4cee:	ef 90       	pop	r14
    4cf0:	df 90       	pop	r13
    4cf2:	cf 90       	pop	r12
    4cf4:	08 95       	ret

00004cf6 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    4cf6:	ef 92       	push	r14
    4cf8:	ff 92       	push	r15
    4cfa:	0f 93       	push	r16
    4cfc:	1f 93       	push	r17
    4cfe:	fc 01       	movw	r30, r24
    4d00:	ea 5e       	subi	r30, 0xEA	; 234
    4d02:	fe 4f       	sbci	r31, 0xFE	; 254
    4d04:	00 81       	ld	r16, Z
    4d06:	11 81       	ldd	r17, Z+1	; 0x01
    4d08:	26 2f       	mov	r18, r22
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e0       	ldi	r20, 0x00	; 0
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	64 ef       	ldi	r22, 0xF4	; 244
    4d12:	e6 2e       	mov	r14, r22
    4d14:	ff 24       	eor	r15, r15
    4d16:	f3 94       	inc	r15
    4d18:	66 e1       	ldi	r22, 0x16	; 22
    4d1a:	74 e0       	ldi	r23, 0x04	; 4
    4d1c:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4d20:	1f 91       	pop	r17
    4d22:	0f 91       	pop	r16
    4d24:	ff 90       	pop	r15
    4d26:	ef 90       	pop	r14
    4d28:	08 95       	ret

00004d2a <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    4d2a:	0f 93       	push	r16
    4d2c:	1f 93       	push	r17
    4d2e:	cf 93       	push	r28
    4d30:	df 93       	push	r29
    4d32:	ec 01       	movw	r28, r24
    4d34:	8b 01       	movw	r16, r22
    4d36:	0e 94 76 25 	call	0x4aec	; 0x4aec <_ZN13Adafruit_FONA9HTTP_termEv>
    4d3a:	ce 01       	movw	r24, r28
    4d3c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <_ZN13Adafruit_FONA9HTTP_initEv>
    4d40:	81 11       	cpse	r24, r1
    4d42:	02 c0       	rjmp	.+4      	; 0x4d48 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	38 c0       	rjmp	.+112    	; 0x4db8 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4d48:	21 e0       	ldi	r18, 0x01	; 1
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	40 e0       	ldi	r20, 0x00	; 0
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	6b ef       	ldi	r22, 0xFB	; 251
    4d52:	73 e0       	ldi	r23, 0x03	; 3
    4d54:	ce 01       	movw	r24, r28
    4d56:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4d5a:	88 23       	and	r24, r24
    4d5c:	99 f3       	breq	.-26     	; 0x4d44 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4d5e:	fe 01       	movw	r30, r28
    4d60:	ec 5e       	subi	r30, 0xEC	; 236
    4d62:	fe 4f       	sbci	r31, 0xFE	; 254
    4d64:	40 81       	ld	r20, Z
    4d66:	51 81       	ldd	r21, Z+1	; 0x01
    4d68:	68 ef       	ldi	r22, 0xF8	; 248
    4d6a:	73 e0       	ldi	r23, 0x03	; 3
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	0e 94 b8 20 	call	0x4170	; 0x4170 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4d72:	88 23       	and	r24, r24
    4d74:	39 f3       	breq	.-50     	; 0x4d44 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4d76:	a8 01       	movw	r20, r16
    4d78:	64 ef       	ldi	r22, 0xF4	; 244
    4d7a:	73 e0       	ldi	r23, 0x03	; 3
    4d7c:	ce 01       	movw	r24, r28
    4d7e:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    4d82:	88 23       	and	r24, r24
    4d84:	f9 f2       	breq	.-66     	; 0x4d44 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4d86:	fe 01       	movw	r30, r28
    4d88:	ed 5e       	subi	r30, 0xED	; 237
    4d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d8c:	90 81       	ld	r25, Z
    4d8e:	99 23       	and	r25, r25
    4d90:	99 f0       	breq	.+38     	; 0x4db8 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4d92:	21 e0       	ldi	r18, 0x01	; 1
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	6e ee       	ldi	r22, 0xEE	; 238
    4d9c:	73 e0       	ldi	r23, 0x03	; 3
    4d9e:	ce 01       	movw	r24, r28
    4da0:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4da4:	88 23       	and	r24, r24
    4da6:	71 f2       	breq	.-100    	; 0x4d44 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4da8:	61 e0       	ldi	r22, 0x01	; 1
    4daa:	ce 01       	movw	r24, r28
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	1f 91       	pop	r17
    4db2:	0f 91       	pop	r16
    4db4:	0c 94 7b 26 	jmp	0x4cf6	; 0x4cf6 <_ZN13Adafruit_FONA8HTTP_sslEb>
    4db8:	df 91       	pop	r29
    4dba:	cf 91       	pop	r28
    4dbc:	1f 91       	pop	r17
    4dbe:	0f 91       	pop	r16
    4dc0:	08 95       	ret

00004dc2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4dc2:	ef 92       	push	r14
    4dc4:	ff 92       	push	r15
    4dc6:	0f 93       	push	r16
    4dc8:	1f 93       	push	r17
    4dca:	cf 93       	push	r28
    4dcc:	df 93       	push	r29
    4dce:	ec 01       	movw	r28, r24
    4dd0:	79 01       	movw	r14, r18
    4dd2:	98 01       	movw	r18, r16
    4dd4:	0e 94 69 23 	call	0x46d2	; 0x46d2 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    4dd8:	b7 01       	movw	r22, r14
    4dda:	ce 01       	movw	r24, r28
    4ddc:	0e 96       	adiw	r24, 0x0e	; 14
    4dde:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strcmp_P>
    4de2:	21 e0       	ldi	r18, 0x01	; 1
    4de4:	89 2b       	or	r24, r25
    4de6:	09 f0       	breq	.+2      	; 0x4dea <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	82 2f       	mov	r24, r18
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	1f 91       	pop	r17
    4df2:	0f 91       	pop	r16
    4df4:	ff 90       	pop	r15
    4df6:	ef 90       	pop	r14
    4df8:	08 95       	ret

00004dfa <_ZN13Adafruit_FONA10enableGPRSEb>:
    4dfa:	8f 92       	push	r8
    4dfc:	9f 92       	push	r9
    4dfe:	af 92       	push	r10
    4e00:	bf 92       	push	r11
    4e02:	cf 92       	push	r12
    4e04:	df 92       	push	r13
    4e06:	ef 92       	push	r14
    4e08:	ff 92       	push	r15
    4e0a:	0f 93       	push	r16
    4e0c:	1f 93       	push	r17
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	ec 01       	movw	r28, r24
    4e14:	20 e2       	ldi	r18, 0x20	; 32
    4e16:	3e e4       	ldi	r19, 0x4E	; 78
    4e18:	66 23       	and	r22, r22
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    4e1c:	0f c1       	rjmp	.+542    	; 0x503c <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    4e1e:	4b e9       	ldi	r20, 0x9B	; 155
    4e20:	55 e0       	ldi	r21, 0x05	; 5
    4e22:	60 e9       	ldi	r22, 0x90	; 144
    4e24:	75 e0       	ldi	r23, 0x05	; 5
    4e26:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e2a:	7e 01       	movw	r14, r28
    4e2c:	8a ee       	ldi	r24, 0xEA	; 234
    4e2e:	e8 1a       	sub	r14, r24
    4e30:	8e ef       	ldi	r24, 0xFE	; 254
    4e32:	f8 0a       	sbc	r15, r24
    4e34:	f7 01       	movw	r30, r14
    4e36:	40 81       	ld	r20, Z
    4e38:	51 81       	ldd	r21, Z+1	; 0x01
    4e3a:	20 e1       	ldi	r18, 0x10	; 16
    4e3c:	37 e2       	ldi	r19, 0x27	; 39
    4e3e:	65 e8       	ldi	r22, 0x85	; 133
    4e40:	75 e0       	ldi	r23, 0x05	; 5
    4e42:	ce 01       	movw	r24, r28
    4e44:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e48:	88 23       	and	r24, r24
    4e4a:	09 f4       	brne	.+2      	; 0x4e4e <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    4e4c:	24 c1       	rjmp	.+584    	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e4e:	f7 01       	movw	r30, r14
    4e50:	40 81       	ld	r20, Z
    4e52:	51 81       	ldd	r21, Z+1	; 0x01
    4e54:	20 e1       	ldi	r18, 0x10	; 16
    4e56:	37 e2       	ldi	r19, 0x27	; 39
    4e58:	67 e6       	ldi	r22, 0x67	; 103
    4e5a:	75 e0       	ldi	r23, 0x05	; 5
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e62:	88 23       	and	r24, r24
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    4e66:	17 c1       	rjmp	.+558    	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e68:	4e 01       	movw	r8, r28
    4e6a:	f3 ef       	ldi	r31, 0xF3	; 243
    4e6c:	8f 1a       	sub	r8, r31
    4e6e:	fe ef       	ldi	r31, 0xFE	; 254
    4e70:	9f 0a       	sbc	r9, r31
    4e72:	f4 01       	movw	r30, r8
    4e74:	40 81       	ld	r20, Z
    4e76:	51 81       	ldd	r21, Z+1	; 0x01
    4e78:	41 15       	cp	r20, r1
    4e7a:	51 05       	cpc	r21, r1
    4e7c:	a9 f4       	brne	.+42     	; 0x4ea8 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4e7e:	f7 01       	movw	r30, r14
    4e80:	40 81       	ld	r20, Z
    4e82:	51 81       	ldd	r21, Z+1	; 0x01
    4e84:	20 e3       	ldi	r18, 0x30	; 48
    4e86:	35 e7       	ldi	r19, 0x75	; 117
    4e88:	62 e0       	ldi	r22, 0x02	; 2
    4e8a:	75 e0       	ldi	r23, 0x05	; 5
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e92:	88 23       	and	r24, r24
    4e94:	09 f4       	brne	.+2      	; 0x4e98 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    4e96:	ff c0       	rjmp	.+510    	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e98:	f7 01       	movw	r30, r14
    4e9a:	40 81       	ld	r20, Z
    4e9c:	51 81       	ldd	r21, Z+1	; 0x01
    4e9e:	20 e1       	ldi	r18, 0x10	; 16
    4ea0:	37 e2       	ldi	r19, 0x27	; 39
    4ea2:	69 ef       	ldi	r22, 0xF9	; 249
    4ea4:	74 e0       	ldi	r23, 0x04	; 4
    4ea6:	e8 c0       	rjmp	.+464    	; 0x5078 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    4ea8:	f7 01       	movw	r30, r14
    4eaa:	20 81       	ld	r18, Z
    4eac:	31 81       	ldd	r19, Z+1	; 0x01
    4eae:	00 e1       	ldi	r16, 0x10	; 16
    4eb0:	17 e2       	ldi	r17, 0x27	; 39
    4eb2:	63 e5       	ldi	r22, 0x53	; 83
    4eb4:	75 e0       	ldi	r23, 0x05	; 5
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4ebc:	88 23       	and	r24, r24
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4ec0:	ea c0       	rjmp	.+468    	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4ec2:	ce 01       	movw	r24, r28
    4ec4:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN13Adafruit_FONA10flushInputEv>
    4ec8:	8e 01       	movw	r16, r28
    4eca:	08 5e       	subi	r16, 0xE8	; 232
    4ecc:	1e 4f       	sbci	r17, 0xFE	; 254
    4ece:	69 e4       	ldi	r22, 0x49	; 73
    4ed0:	75 e0       	ldi	r23, 0x05	; 5
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4edc:	f4 01       	movw	r30, r8
    4ede:	60 81       	ld	r22, Z
    4ee0:	71 81       	ldd	r23, Z+1	; 0x01
    4ee2:	f8 01       	movw	r30, r16
    4ee4:	80 81       	ld	r24, Z
    4ee6:	91 81       	ldd	r25, Z+1	; 0x01
    4ee8:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4eec:	5e 01       	movw	r10, r28
    4eee:	f1 ef       	ldi	r31, 0xF1	; 241
    4ef0:	af 1a       	sub	r10, r31
    4ef2:	fe ef       	ldi	r31, 0xFE	; 254
    4ef4:	bf 0a       	sbc	r11, r31
    4ef6:	f5 01       	movw	r30, r10
    4ef8:	80 81       	ld	r24, Z
    4efa:	91 81       	ldd	r25, Z+1	; 0x01
    4efc:	89 2b       	or	r24, r25
    4efe:	79 f0       	breq	.+30     	; 0x4f1e <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    4f00:	68 e8       	ldi	r22, 0x88	; 136
    4f02:	73 e0       	ldi	r23, 0x03	; 3
    4f04:	f8 01       	movw	r30, r16
    4f06:	80 81       	ld	r24, Z
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    4f0e:	f5 01       	movw	r30, r10
    4f10:	60 81       	ld	r22, Z
    4f12:	71 81       	ldd	r23, Z+1	; 0x01
    4f14:	f8 01       	movw	r30, r16
    4f16:	80 81       	ld	r24, Z
    4f18:	91 81       	ldd	r25, Z+1	; 0x01
    4f1a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4f1e:	6e 01       	movw	r12, r28
    4f20:	ff ee       	ldi	r31, 0xEF	; 239
    4f22:	cf 1a       	sub	r12, r31
    4f24:	fe ef       	ldi	r31, 0xFE	; 254
    4f26:	df 0a       	sbc	r13, r31
    4f28:	f6 01       	movw	r30, r12
    4f2a:	80 81       	ld	r24, Z
    4f2c:	91 81       	ldd	r25, Z+1	; 0x01
    4f2e:	89 2b       	or	r24, r25
    4f30:	79 f0       	breq	.+30     	; 0x4f50 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    4f32:	68 e8       	ldi	r22, 0x88	; 136
    4f34:	73 e0       	ldi	r23, 0x03	; 3
    4f36:	f8 01       	movw	r30, r16
    4f38:	80 81       	ld	r24, Z
    4f3a:	91 81       	ldd	r25, Z+1	; 0x01
    4f3c:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    4f40:	f6 01       	movw	r30, r12
    4f42:	60 81       	ld	r22, Z
    4f44:	71 81       	ldd	r23, Z+1	; 0x01
    4f46:	f8 01       	movw	r30, r16
    4f48:	80 81       	ld	r24, Z
    4f4a:	91 81       	ldd	r25, Z+1	; 0x01
    4f4c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4f50:	6a e8       	ldi	r22, 0x8A	; 138
    4f52:	73 e0       	ldi	r23, 0x03	; 3
    4f54:	f8 01       	movw	r30, r16
    4f56:	80 81       	ld	r24, Z
    4f58:	91 81       	ldd	r25, Z+1	; 0x01
    4f5a:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4f5e:	62 e4       	ldi	r22, 0x42	; 66
    4f60:	75 e0       	ldi	r23, 0x05	; 5
    4f62:	86 ed       	ldi	r24, 0xD6	; 214
    4f64:	97 e0       	ldi	r25, 0x07	; 7
    4f66:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4f6a:	68 e3       	ldi	r22, 0x38	; 56
    4f6c:	75 e0       	ldi	r23, 0x05	; 5
    4f6e:	86 ed       	ldi	r24, 0xD6	; 214
    4f70:	97 e0       	ldi	r25, 0x07	; 7
    4f72:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4f76:	f4 01       	movw	r30, r8
    4f78:	60 81       	ld	r22, Z
    4f7a:	71 81       	ldd	r23, Z+1	; 0x01
    4f7c:	86 ed       	ldi	r24, 0xD6	; 214
    4f7e:	97 e0       	ldi	r25, 0x07	; 7
    4f80:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4f84:	f5 01       	movw	r30, r10
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	89 2b       	or	r24, r25
    4f8c:	69 f0       	breq	.+26     	; 0x4fa8 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    4f8e:	68 e8       	ldi	r22, 0x88	; 136
    4f90:	73 e0       	ldi	r23, 0x03	; 3
    4f92:	86 ed       	ldi	r24, 0xD6	; 214
    4f94:	97 e0       	ldi	r25, 0x07	; 7
    4f96:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    4f9a:	f5 01       	movw	r30, r10
    4f9c:	60 81       	ld	r22, Z
    4f9e:	71 81       	ldd	r23, Z+1	; 0x01
    4fa0:	86 ed       	ldi	r24, 0xD6	; 214
    4fa2:	97 e0       	ldi	r25, 0x07	; 7
    4fa4:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4fa8:	f6 01       	movw	r30, r12
    4faa:	80 81       	ld	r24, Z
    4fac:	91 81       	ldd	r25, Z+1	; 0x01
    4fae:	89 2b       	or	r24, r25
    4fb0:	69 f0       	breq	.+26     	; 0x4fcc <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    4fb2:	68 e8       	ldi	r22, 0x88	; 136
    4fb4:	73 e0       	ldi	r23, 0x03	; 3
    4fb6:	86 ed       	ldi	r24, 0xD6	; 214
    4fb8:	97 e0       	ldi	r25, 0x07	; 7
    4fba:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN5Print5printEPKc>
    4fbe:	f6 01       	movw	r30, r12
    4fc0:	60 81       	ld	r22, Z
    4fc2:	71 81       	ldd	r23, Z+1	; 0x01
    4fc4:	86 ed       	ldi	r24, 0xD6	; 214
    4fc6:	97 e0       	ldi	r25, 0x07	; 7
    4fc8:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    4fcc:	6a e8       	ldi	r22, 0x8A	; 138
    4fce:	73 e0       	ldi	r23, 0x03	; 3
    4fd0:	86 ed       	ldi	r24, 0xD6	; 214
    4fd2:	97 e0       	ldi	r25, 0x07	; 7
    4fd4:	0e 94 47 1c 	call	0x388e	; 0x388e <_ZN5Print7printlnEPKc>
    4fd8:	f7 01       	movw	r30, r14
    4fda:	60 81       	ld	r22, Z
    4fdc:	71 81       	ldd	r23, Z+1	; 0x01
    4fde:	40 e1       	ldi	r20, 0x10	; 16
    4fe0:	57 e2       	ldi	r21, 0x27	; 39
    4fe2:	ce 01       	movw	r24, r28
    4fe4:	0e 94 5d 20 	call	0x40ba	; 0x40ba <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    4fe8:	88 23       	and	r24, r24
    4fea:	09 f4       	brne	.+2      	; 0x4fee <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    4fec:	54 c0       	rjmp	.+168    	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4fee:	f5 01       	movw	r30, r10
    4ff0:	40 81       	ld	r20, Z
    4ff2:	51 81       	ldd	r21, Z+1	; 0x01
    4ff4:	41 15       	cp	r20, r1
    4ff6:	51 05       	cpc	r21, r1
    4ff8:	39 f4       	brne	.+14     	; 0x5008 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    4ffa:	f6 01       	movw	r30, r12
    4ffc:	40 81       	ld	r20, Z
    4ffe:	51 81       	ldd	r21, Z+1	; 0x01
    5000:	41 15       	cp	r20, r1
    5002:	51 05       	cpc	r21, r1
    5004:	71 f4       	brne	.+28     	; 0x5022 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    5006:	3b cf       	rjmp	.-394    	; 0x4e7e <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5008:	f7 01       	movw	r30, r14
    500a:	20 81       	ld	r18, Z
    500c:	31 81       	ldd	r19, Z+1	; 0x01
    500e:	00 e1       	ldi	r16, 0x10	; 16
    5010:	17 e2       	ldi	r17, 0x27	; 39
    5012:	63 e2       	ldi	r22, 0x23	; 35
    5014:	75 e0       	ldi	r23, 0x05	; 5
    5016:	ce 01       	movw	r24, r28
    5018:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    501c:	81 11       	cpse	r24, r1
    501e:	ed cf       	rjmp	.-38     	; 0x4ffa <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    5020:	3a c0       	rjmp	.+116    	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5022:	f7 01       	movw	r30, r14
    5024:	20 81       	ld	r18, Z
    5026:	31 81       	ldd	r19, Z+1	; 0x01
    5028:	00 e1       	ldi	r16, 0x10	; 16
    502a:	17 e2       	ldi	r17, 0x27	; 39
    502c:	6f e0       	ldi	r22, 0x0F	; 15
    502e:	75 e0       	ldi	r23, 0x05	; 5
    5030:	ce 01       	movw	r24, r28
    5032:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5036:	81 11       	cpse	r24, r1
    5038:	22 cf       	rjmp	.-444    	; 0x4e7e <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    503a:	2d c0       	rjmp	.+90     	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    503c:	41 ef       	ldi	r20, 0xF1	; 241
    503e:	54 e0       	ldi	r21, 0x04	; 4
    5040:	66 ee       	ldi	r22, 0xE6	; 230
    5042:	74 e0       	ldi	r23, 0x04	; 4
    5044:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5048:	88 23       	and	r24, r24
    504a:	29 f1       	breq	.+74     	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    504c:	8e 01       	movw	r16, r28
    504e:	0a 5e       	subi	r16, 0xEA	; 234
    5050:	1e 4f       	sbci	r17, 0xFE	; 254
    5052:	f8 01       	movw	r30, r16
    5054:	40 81       	ld	r20, Z
    5056:	51 81       	ldd	r21, Z+1	; 0x01
    5058:	20 e1       	ldi	r18, 0x10	; 16
    505a:	37 e2       	ldi	r19, 0x27	; 39
    505c:	69 ed       	ldi	r22, 0xD9	; 217
    505e:	74 e0       	ldi	r23, 0x04	; 4
    5060:	ce 01       	movw	r24, r28
    5062:	0e 94 cd 23 	call	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5066:	88 23       	and	r24, r24
    5068:	b1 f0       	breq	.+44     	; 0x5096 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    506a:	f8 01       	movw	r30, r16
    506c:	40 81       	ld	r20, Z
    506e:	51 81       	ldd	r21, Z+1	; 0x01
    5070:	20 e1       	ldi	r18, 0x10	; 16
    5072:	37 e2       	ldi	r19, 0x27	; 39
    5074:	6e ec       	ldi	r22, 0xCE	; 206
    5076:	74 e0       	ldi	r23, 0x04	; 4
    5078:	ce 01       	movw	r24, r28
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	ff 90       	pop	r15
    5084:	ef 90       	pop	r14
    5086:	df 90       	pop	r13
    5088:	cf 90       	pop	r12
    508a:	bf 90       	pop	r11
    508c:	af 90       	pop	r10
    508e:	9f 90       	pop	r9
    5090:	8f 90       	pop	r8
    5092:	0c 94 cd 23 	jmp	0x479a	; 0x479a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	df 91       	pop	r29
    509a:	cf 91       	pop	r28
    509c:	1f 91       	pop	r17
    509e:	0f 91       	pop	r16
    50a0:	ff 90       	pop	r15
    50a2:	ef 90       	pop	r14
    50a4:	df 90       	pop	r13
    50a6:	cf 90       	pop	r12
    50a8:	bf 90       	pop	r11
    50aa:	af 90       	pop	r10
    50ac:	9f 90       	pop	r9
    50ae:	8f 90       	pop	r8
    50b0:	08 95       	ret

000050b2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    50b2:	af 92       	push	r10
    50b4:	bf 92       	push	r11
    50b6:	cf 92       	push	r12
    50b8:	df 92       	push	r13
    50ba:	ef 92       	push	r14
    50bc:	ff 92       	push	r15
    50be:	0f 93       	push	r16
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	5b 01       	movw	r10, r22
    50c6:	6a 01       	movw	r12, r20
    50c8:	e2 2e       	mov	r14, r18
    50ca:	0e 96       	adiw	r24, 0x0e	; 14
    50cc:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strstr_P>
    50d0:	ec 01       	movw	r28, r24
    50d2:	89 2b       	or	r24, r25
    50d4:	c1 f0       	breq	.+48     	; 0x5106 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    50d6:	c5 01       	movw	r24, r10
    50d8:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__strlen_P>
    50dc:	8c 0f       	add	r24, r28
    50de:	9d 1f       	adc	r25, r29
    50e0:	c0 e0       	ldi	r28, 0x00	; 0
    50e2:	f1 2c       	mov	r15, r1
    50e4:	c0 17       	cp	r28, r16
    50e6:	41 f0       	breq	.+16     	; 0x50f8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    50e8:	b7 01       	movw	r22, r14
    50ea:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <strchr>
    50ee:	00 97       	sbiw	r24, 0x00	; 0
    50f0:	51 f0       	breq	.+20     	; 0x5106 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    50f2:	01 96       	adiw	r24, 0x01	; 1
    50f4:	cf 5f       	subi	r28, 0xFF	; 255
    50f6:	f6 cf       	rjmp	.-20     	; 0x50e4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    50f8:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <atoi>
    50fc:	f6 01       	movw	r30, r12
    50fe:	91 83       	std	Z+1, r25	; 0x01
    5100:	80 83       	st	Z, r24
    5102:	81 e0       	ldi	r24, 0x01	; 1
    5104:	01 c0       	rjmp	.+2      	; 0x5108 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	df 91       	pop	r29
    510a:	cf 91       	pop	r28
    510c:	0f 91       	pop	r16
    510e:	ff 90       	pop	r15
    5110:	ef 90       	pop	r14
    5112:	df 90       	pop	r13
    5114:	cf 90       	pop	r12
    5116:	bf 90       	pop	r11
    5118:	af 90       	pop	r10
    511a:	08 95       	ret

0000511c <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    511c:	ef 92       	push	r14
    511e:	ff 92       	push	r15
    5120:	0f 93       	push	r16
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	ec 01       	movw	r28, r24
    5128:	7b 01       	movw	r14, r22
    512a:	44 ef       	ldi	r20, 0xF4	; 244
    512c:	51 e0       	ldi	r21, 0x01	; 1
    512e:	6d e2       	ldi	r22, 0x2D	; 45
    5130:	74 e0       	ldi	r23, 0x04	; 4
    5132:	0e 94 95 21 	call	0x432a	; 0x432a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5136:	00 e0       	ldi	r16, 0x00	; 0
    5138:	2c e2       	ldi	r18, 0x2C	; 44
    513a:	a7 01       	movw	r20, r14
    513c:	62 e2       	ldi	r22, 0x22	; 34
    513e:	74 e0       	ldi	r23, 0x04	; 4
    5140:	ce 01       	movw	r24, r28
    5142:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	0f 91       	pop	r16
    514c:	ff 90       	pop	r15
    514e:	ef 90       	pop	r14
    5150:	08 95       	ret

00005152 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    5152:	4f 92       	push	r4
    5154:	5f 92       	push	r5
    5156:	6f 92       	push	r6
    5158:	7f 92       	push	r7
    515a:	af 92       	push	r10
    515c:	bf 92       	push	r11
    515e:	cf 92       	push	r12
    5160:	df 92       	push	r13
    5162:	ef 92       	push	r14
    5164:	ff 92       	push	r15
    5166:	0f 93       	push	r16
    5168:	1f 93       	push	r17
    516a:	cf 93       	push	r28
    516c:	df 93       	push	r29
    516e:	ec 01       	movw	r28, r24
    5170:	5a 01       	movw	r10, r20
    5172:	69 01       	movw	r12, r18
    5174:	27 01       	movw	r4, r14
    5176:	38 01       	movw	r6, r16
    5178:	fc 01       	movw	r30, r24
    517a:	ea 5e       	subi	r30, 0xEA	; 234
    517c:	fe 4f       	sbci	r31, 0xFE	; 254
    517e:	00 81       	ld	r16, Z
    5180:	11 81       	ldd	r17, Z+1	; 0x01
    5182:	26 2f       	mov	r18, r22
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	50 e0       	ldi	r21, 0x00	; 0
    518a:	84 ef       	ldi	r24, 0xF4	; 244
    518c:	e8 2e       	mov	r14, r24
    518e:	ff 24       	eor	r15, r15
    5190:	f3 94       	inc	r15
    5192:	63 e5       	ldi	r22, 0x53	; 83
    5194:	74 e0       	ldi	r23, 0x04	; 4
    5196:	ce 01       	movw	r24, r28
    5198:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    519c:	81 11       	cpse	r24, r1
    519e:	02 c0       	rjmp	.+4      	; 0x51a4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	17 c0       	rjmp	.+46     	; 0x51d2 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    51a4:	40 e0       	ldi	r20, 0x00	; 0
    51a6:	b2 01       	movw	r22, r4
    51a8:	ce 01       	movw	r24, r28
    51aa:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    51ae:	01 e0       	ldi	r16, 0x01	; 1
    51b0:	2c e2       	ldi	r18, 0x2C	; 44
    51b2:	a5 01       	movw	r20, r10
    51b4:	66 e4       	ldi	r22, 0x46	; 70
    51b6:	74 e0       	ldi	r23, 0x04	; 4
    51b8:	ce 01       	movw	r24, r28
    51ba:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    51be:	88 23       	and	r24, r24
    51c0:	79 f3       	breq	.-34     	; 0x51a0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    51c2:	02 e0       	ldi	r16, 0x02	; 2
    51c4:	2c e2       	ldi	r18, 0x2C	; 44
    51c6:	a6 01       	movw	r20, r12
    51c8:	69 e3       	ldi	r22, 0x39	; 57
    51ca:	74 e0       	ldi	r23, 0x04	; 4
    51cc:	ce 01       	movw	r24, r28
    51ce:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    51d2:	df 91       	pop	r29
    51d4:	cf 91       	pop	r28
    51d6:	1f 91       	pop	r17
    51d8:	0f 91       	pop	r16
    51da:	ff 90       	pop	r15
    51dc:	ef 90       	pop	r14
    51de:	df 90       	pop	r13
    51e0:	cf 90       	pop	r12
    51e2:	bf 90       	pop	r11
    51e4:	af 90       	pop	r10
    51e6:	7f 90       	pop	r7
    51e8:	6f 90       	pop	r6
    51ea:	5f 90       	pop	r5
    51ec:	4f 90       	pop	r4
    51ee:	08 95       	ret

000051f0 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    51f0:	4f 92       	push	r4
    51f2:	5f 92       	push	r5
    51f4:	6f 92       	push	r6
    51f6:	7f 92       	push	r7
    51f8:	8f 92       	push	r8
    51fa:	9f 92       	push	r9
    51fc:	af 92       	push	r10
    51fe:	bf 92       	push	r11
    5200:	cf 92       	push	r12
    5202:	df 92       	push	r13
    5204:	ef 92       	push	r14
    5206:	ff 92       	push	r15
    5208:	0f 93       	push	r16
    520a:	1f 93       	push	r17
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	ec 01       	movw	r28, r24
    5212:	2a 01       	movw	r4, r20
    5214:	39 01       	movw	r6, r18
    5216:	48 01       	movw	r8, r16
    5218:	57 01       	movw	r10, r14
    521a:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <_ZN13Adafruit_FONA10HTTP_setupEPc>
    521e:	88 23       	and	r24, r24
    5220:	09 f4       	brne	.+2      	; 0x5224 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    5222:	71 c0       	rjmp	.+226    	; 0x5306 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5224:	a2 01       	movw	r20, r4
    5226:	6e e0       	ldi	r22, 0x0E	; 14
    5228:	74 e0       	ldi	r23, 0x04	; 4
    522a:	ce 01       	movw	r24, r28
    522c:	0e 94 b8 20 	call	0x4170	; 0x4170 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5230:	88 23       	and	r24, r24
    5232:	09 f4       	brne	.+2      	; 0x5236 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    5234:	68 c0       	rjmp	.+208    	; 0x5306 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5236:	a8 01       	movw	r20, r16
    5238:	60 e0       	ldi	r22, 0x00	; 0
    523a:	70 e0       	ldi	r23, 0x00	; 0
    523c:	00 e1       	ldi	r16, 0x10	; 16
    523e:	17 e2       	ldi	r17, 0x27	; 39
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	ce 01       	movw	r24, r28
    5246:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    524a:	88 23       	and	r24, r24
    524c:	09 f4       	brne	.+2      	; 0x5250 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    524e:	5b c0       	rjmp	.+182    	; 0x5306 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5250:	fe 01       	movw	r30, r28
    5252:	e8 5e       	subi	r30, 0xE8	; 232
    5254:	fe 4f       	sbci	r31, 0xFE	; 254
    5256:	80 81       	ld	r24, Z
    5258:	91 81       	ldd	r25, Z+1	; 0x01
    525a:	dc 01       	movw	r26, r24
    525c:	ed 91       	ld	r30, X+
    525e:	fc 91       	ld	r31, X
    5260:	02 80       	ldd	r0, Z+2	; 0x02
    5262:	f3 81       	ldd	r31, Z+3	; 0x03
    5264:	e0 2d       	mov	r30, r0
    5266:	a4 01       	movw	r20, r8
    5268:	b3 01       	movw	r22, r6
    526a:	09 95       	icall
    526c:	fe 01       	movw	r30, r28
    526e:	ea 5e       	subi	r30, 0xEA	; 234
    5270:	fe 4f       	sbci	r31, 0xFE	; 254
    5272:	60 81       	ld	r22, Z
    5274:	71 81       	ldd	r23, Z+1	; 0x01
    5276:	40 e1       	ldi	r20, 0x10	; 16
    5278:	57 e2       	ldi	r21, 0x27	; 39
    527a:	ce 01       	movw	r24, r28
    527c:	0e 94 5d 20 	call	0x40ba	; 0x40ba <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5280:	88 23       	and	r24, r24
    5282:	09 f4       	brne	.+2      	; 0x5286 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    5284:	40 c0       	rjmp	.+128    	; 0x5306 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5286:	10 e1       	ldi	r17, 0x10	; 16
    5288:	e1 2e       	mov	r14, r17
    528a:	17 e2       	ldi	r17, 0x27	; 39
    528c:	f1 2e       	mov	r15, r17
    528e:	00 e0       	ldi	r16, 0x00	; 0
    5290:	10 e0       	ldi	r17, 0x00	; 0
    5292:	96 01       	movw	r18, r12
    5294:	a5 01       	movw	r20, r10
    5296:	61 e0       	ldi	r22, 0x01	; 1
    5298:	ce 01       	movw	r24, r28
    529a:	0e 94 a9 28 	call	0x5152	; 0x5152 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    529e:	88 23       	and	r24, r24
    52a0:	91 f1       	breq	.+100    	; 0x5306 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    52a2:	65 e0       	ldi	r22, 0x05	; 5
    52a4:	74 e0       	ldi	r23, 0x04	; 4
    52a6:	86 ed       	ldi	r24, 0xD6	; 214
    52a8:	97 e0       	ldi	r25, 0x07	; 7
    52aa:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    52ae:	f5 01       	movw	r30, r10
    52b0:	60 81       	ld	r22, Z
    52b2:	71 81       	ldd	r23, Z+1	; 0x01
    52b4:	4a e0       	ldi	r20, 0x0A	; 10
    52b6:	50 e0       	ldi	r21, 0x00	; 0
    52b8:	86 ed       	ldi	r24, 0xD6	; 214
    52ba:	97 e0       	ldi	r25, 0x07	; 7
    52bc:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
    52c0:	6f ef       	ldi	r22, 0xFF	; 255
    52c2:	73 e0       	ldi	r23, 0x03	; 3
    52c4:	86 ed       	ldi	r24, 0xD6	; 214
    52c6:	97 e0       	ldi	r25, 0x07	; 7
    52c8:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN5Print5printEPK19__FlashStringHelper>
    52cc:	d6 01       	movw	r26, r12
    52ce:	6d 91       	ld	r22, X+
    52d0:	7c 91       	ld	r23, X
    52d2:	4a e0       	ldi	r20, 0x0A	; 10
    52d4:	50 e0       	ldi	r21, 0x00	; 0
    52d6:	86 ed       	ldi	r24, 0xD6	; 214
    52d8:	97 e0       	ldi	r25, 0x07	; 7
    52da:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN5Print7printlnEji>
    52de:	b6 01       	movw	r22, r12
    52e0:	ce 01       	movw	r24, r28
    52e2:	df 91       	pop	r29
    52e4:	cf 91       	pop	r28
    52e6:	1f 91       	pop	r17
    52e8:	0f 91       	pop	r16
    52ea:	ff 90       	pop	r15
    52ec:	ef 90       	pop	r14
    52ee:	df 90       	pop	r13
    52f0:	cf 90       	pop	r12
    52f2:	bf 90       	pop	r11
    52f4:	af 90       	pop	r10
    52f6:	9f 90       	pop	r9
    52f8:	8f 90       	pop	r8
    52fa:	7f 90       	pop	r7
    52fc:	6f 90       	pop	r6
    52fe:	5f 90       	pop	r5
    5300:	4f 90       	pop	r4
    5302:	0c 94 8e 28 	jmp	0x511c	; 0x511c <_ZN13Adafruit_FONA12HTTP_readallEPj>
    5306:	80 e0       	ldi	r24, 0x00	; 0
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	1f 91       	pop	r17
    530e:	0f 91       	pop	r16
    5310:	ff 90       	pop	r15
    5312:	ef 90       	pop	r14
    5314:	df 90       	pop	r13
    5316:	cf 90       	pop	r12
    5318:	bf 90       	pop	r11
    531a:	af 90       	pop	r10
    531c:	9f 90       	pop	r9
    531e:	8f 90       	pop	r8
    5320:	7f 90       	pop	r7
    5322:	6f 90       	pop	r6
    5324:	5f 90       	pop	r5
    5326:	4f 90       	pop	r4
    5328:	08 95       	ret

0000532a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    532a:	af 92       	push	r10
    532c:	bf 92       	push	r11
    532e:	cf 92       	push	r12
    5330:	df 92       	push	r13
    5332:	ef 92       	push	r14
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	ec 01       	movw	r28, r24
    533e:	6a 01       	movw	r12, r20
    5340:	59 01       	movw	r10, r18
    5342:	10 2f       	mov	r17, r16
    5344:	0e 2d       	mov	r16, r14
    5346:	44 ef       	ldi	r20, 0xF4	; 244
    5348:	51 e0       	ldi	r21, 0x01	; 1
    534a:	0e 94 95 21 	call	0x432a	; 0x432a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    534e:	21 2f       	mov	r18, r17
    5350:	a5 01       	movw	r20, r10
    5352:	b6 01       	movw	r22, r12
    5354:	ce 01       	movw	r24, r28
    5356:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    535a:	18 2f       	mov	r17, r24
    535c:	88 23       	and	r24, r24
    535e:	31 f0       	breq	.+12     	; 0x536c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5360:	40 e0       	ldi	r20, 0x00	; 0
    5362:	64 ef       	ldi	r22, 0xF4	; 244
    5364:	71 e0       	ldi	r23, 0x01	; 1
    5366:	ce 01       	movw	r24, r28
    5368:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <_ZN13Adafruit_FONA8readlineEjb>
    536c:	81 2f       	mov	r24, r17
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	1f 91       	pop	r17
    5374:	0f 91       	pop	r16
    5376:	ef 90       	pop	r14
    5378:	df 90       	pop	r13
    537a:	cf 90       	pop	r12
    537c:	bf 90       	pop	r11
    537e:	af 90       	pop	r10
    5380:	08 95       	ret

00005382 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    5382:	ef 92       	push	r14
    5384:	0f 93       	push	r16
    5386:	9b 01       	movw	r18, r22
    5388:	ee 24       	eor	r14, r14
    538a:	e3 94       	inc	r14
    538c:	0c e2       	ldi	r16, 0x2C	; 44
    538e:	4f ef       	ldi	r20, 0xFF	; 255
    5390:	55 e0       	ldi	r21, 0x05	; 5
    5392:	68 ef       	ldi	r22, 0xF8	; 248
    5394:	75 e0       	ldi	r23, 0x05	; 5
    5396:	0e 94 95 29 	call	0x532a	; 0x532a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    539a:	0f 91       	pop	r16
    539c:	ef 90       	pop	r14
    539e:	08 95       	ret

000053a0 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    53a0:	ef 92       	push	r14
    53a2:	0f 93       	push	r16
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	00 d0       	rcall	.+0      	; 0x53aa <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    53aa:	cd b7       	in	r28, 0x3d	; 61
    53ac:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    53ae:	ee 24       	eor	r14, r14
    53b0:	e3 94       	inc	r14
    53b2:	0c e2       	ldi	r16, 0x2C	; 44
    53b4:	9e 01       	movw	r18, r28
    53b6:	2f 5f       	subi	r18, 0xFF	; 255
    53b8:	3f 4f       	sbci	r19, 0xFF	; 255
    53ba:	40 ef       	ldi	r20, 0xF0	; 240
    53bc:	55 e0       	ldi	r21, 0x05	; 5
    53be:	67 ee       	ldi	r22, 0xE7	; 231
    53c0:	75 e0       	ldi	r23, 0x05	; 5
    53c2:	0e 94 95 29 	call	0x532a	; 0x532a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    53c6:	88 23       	and	r24, r24
    53c8:	11 f0       	breq	.+4      	; 0x53ce <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	01 c0       	rjmp	.+2      	; 0x53d0 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    53ce:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    53d0:	0f 90       	pop	r0
    53d2:	0f 90       	pop	r0
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	0f 91       	pop	r16
    53da:	ef 90       	pop	r14
    53dc:	08 95       	ret

000053de <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    53de:	ef 92       	push	r14
    53e0:	0f 93       	push	r16
    53e2:	cf 93       	push	r28
    53e4:	df 93       	push	r29
    53e6:	00 d0       	rcall	.+0      	; 0x53e8 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    53e8:	cd b7       	in	r28, 0x3d	; 61
    53ea:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    53ec:	e1 2c       	mov	r14, r1
    53ee:	0c e2       	ldi	r16, 0x2C	; 44
    53f0:	9e 01       	movw	r18, r28
    53f2:	2f 5f       	subi	r18, 0xFF	; 255
    53f4:	3f 4f       	sbci	r19, 0xFF	; 255
    53f6:	40 ee       	ldi	r20, 0xE0	; 224
    53f8:	55 e0       	ldi	r21, 0x05	; 5
    53fa:	69 ed       	ldi	r22, 0xD9	; 217
    53fc:	75 e0       	ldi	r23, 0x05	; 5
    53fe:	0e 94 95 29 	call	0x532a	; 0x532a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5402:	88 23       	and	r24, r24
    5404:	11 f0       	breq	.+4      	; 0x540a <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    5406:	89 81       	ldd	r24, Y+1	; 0x01
    5408:	01 c0       	rjmp	.+2      	; 0x540c <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    540a:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    540c:	0f 90       	pop	r0
    540e:	0f 90       	pop	r0
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	0f 91       	pop	r16
    5416:	ef 90       	pop	r14
    5418:	08 95       	ret

0000541a <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    541a:	20 91 be 08 	lds	r18, 0x08BE	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    541e:	30 91 bf 08 	lds	r19, 0x08BF	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    5422:	28 17       	cp	r18, r24
    5424:	39 07       	cpc	r19, r25
    5426:	b9 f4       	brne	.+46     	; 0x5456 <_ZN14SoftwareSerial4readEv+0x3c>
    5428:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    542c:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5430:	98 17       	cp	r25, r24
    5432:	89 f0       	breq	.+34     	; 0x5456 <_ZN14SoftwareSerial4readEv+0x3c>
    5434:	e0 91 7c 08 	lds	r30, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    5438:	f0 e0       	ldi	r31, 0x00	; 0
    543a:	e2 58       	subi	r30, 0x82	; 130
    543c:	f7 4f       	sbci	r31, 0xF7	; 247
    543e:	80 81       	ld	r24, Z
    5440:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	2f 5f       	subi	r18, 0xFF	; 255
    5448:	3f 4f       	sbci	r19, 0xFF	; 255
    544a:	2f 73       	andi	r18, 0x3F	; 63
    544c:	33 27       	eor	r19, r19
    544e:	20 93 7c 08 	sts	0x087C, r18	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	08 95       	ret
    5456:	8f ef       	ldi	r24, 0xFF	; 255
    5458:	9f ef       	ldi	r25, 0xFF	; 255
    545a:	08 95       	ret

0000545c <_ZN14SoftwareSerial5writeEh>:
    545c:	1f 93       	push	r17
    545e:	cf 93       	push	r28
    5460:	df 93       	push	r29
    5462:	dc 01       	movw	r26, r24
    5464:	5c 96       	adiw	r26, 0x1c	; 28
    5466:	8d 91       	ld	r24, X+
    5468:	9c 91       	ld	r25, X
    546a:	5d 97       	sbiw	r26, 0x1d	; 29
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	39 f4       	brne	.+14     	; 0x547e <_ZN14SoftwareSerial5writeEh+0x22>
    5470:	21 e0       	ldi	r18, 0x01	; 1
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	13 96       	adiw	r26, 0x03	; 3
    5476:	3c 93       	st	X, r19
    5478:	2e 93       	st	-X, r18
    547a:	12 97       	sbiw	r26, 0x02	; 2
    547c:	3b c0       	rjmp	.+118    	; 0x54f4 <_ZN14SoftwareSerial5writeEh+0x98>
    547e:	51 96       	adiw	r26, 0x11	; 17
    5480:	ed 91       	ld	r30, X+
    5482:	fc 91       	ld	r31, X
    5484:	52 97       	sbiw	r26, 0x12	; 18
    5486:	50 96       	adiw	r26, 0x10	; 16
    5488:	2c 91       	ld	r18, X
    548a:	50 97       	sbiw	r26, 0x10	; 16
    548c:	32 2f       	mov	r19, r18
    548e:	30 95       	com	r19
    5490:	1f b7       	in	r17, 0x3f	; 63
    5492:	5e 96       	adiw	r26, 0x1e	; 30
    5494:	4c 91       	ld	r20, X
    5496:	5e 97       	sbiw	r26, 0x1e	; 30
    5498:	74 2f       	mov	r23, r20
    549a:	72 70       	andi	r23, 0x02	; 2
    549c:	41 fd       	sbrc	r20, 1
    549e:	60 95       	com	r22
    54a0:	f8 94       	cli
    54a2:	40 81       	ld	r20, Z
    54a4:	77 23       	and	r23, r23
    54a6:	11 f0       	breq	.+4      	; 0x54ac <_ZN14SoftwareSerial5writeEh+0x50>
    54a8:	42 2b       	or	r20, r18
    54aa:	01 c0       	rjmp	.+2      	; 0x54ae <_ZN14SoftwareSerial5writeEh+0x52>
    54ac:	43 23       	and	r20, r19
    54ae:	40 83       	st	Z, r20
    54b0:	ec 01       	movw	r28, r24
    54b2:	21 97       	sbiw	r28, 0x01	; 1
    54b4:	f1 f7       	brne	.-4      	; 0x54b2 <_ZN14SoftwareSerial5writeEh+0x56>
    54b6:	48 e0       	ldi	r20, 0x08	; 8
    54b8:	50 81       	ld	r21, Z
    54ba:	60 ff       	sbrs	r22, 0
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <_ZN14SoftwareSerial5writeEh+0x66>
    54be:	52 2b       	or	r21, r18
    54c0:	01 c0       	rjmp	.+2      	; 0x54c4 <_ZN14SoftwareSerial5writeEh+0x68>
    54c2:	53 23       	and	r21, r19
    54c4:	50 83       	st	Z, r21
    54c6:	ec 01       	movw	r28, r24
    54c8:	21 97       	sbiw	r28, 0x01	; 1
    54ca:	f1 f7       	brne	.-4      	; 0x54c8 <_ZN14SoftwareSerial5writeEh+0x6c>
    54cc:	66 95       	lsr	r22
    54ce:	41 50       	subi	r20, 0x01	; 1
    54d0:	99 f7       	brne	.-26     	; 0x54b8 <_ZN14SoftwareSerial5writeEh+0x5c>
    54d2:	80 81       	ld	r24, Z
    54d4:	77 23       	and	r23, r23
    54d6:	19 f0       	breq	.+6      	; 0x54de <_ZN14SoftwareSerial5writeEh+0x82>
    54d8:	83 23       	and	r24, r19
    54da:	80 83       	st	Z, r24
    54dc:	02 c0       	rjmp	.+4      	; 0x54e2 <_ZN14SoftwareSerial5writeEh+0x86>
    54de:	28 2b       	or	r18, r24
    54e0:	20 83       	st	Z, r18
    54e2:	1f bf       	out	0x3f, r17	; 63
    54e4:	5c 96       	adiw	r26, 0x1c	; 28
    54e6:	8d 91       	ld	r24, X+
    54e8:	9c 91       	ld	r25, X
    54ea:	5d 97       	sbiw	r26, 0x1d	; 29
    54ec:	01 97       	sbiw	r24, 0x01	; 1
    54ee:	f1 f7       	brne	.-4      	; 0x54ec <_ZN14SoftwareSerial5writeEh+0x90>
    54f0:	81 e0       	ldi	r24, 0x01	; 1
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	df 91       	pop	r29
    54f6:	cf 91       	pop	r28
    54f8:	1f 91       	pop	r17
    54fa:	08 95       	ret

000054fc <_ZN14SoftwareSerial5flushEv>:
    54fc:	08 95       	ret

000054fe <_ZN14SoftwareSerial4peekEv>:
    54fe:	20 91 be 08 	lds	r18, 0x08BE	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    5502:	30 91 bf 08 	lds	r19, 0x08BF	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    5506:	28 17       	cp	r18, r24
    5508:	39 07       	cpc	r19, r25
    550a:	71 f4       	brne	.+28     	; 0x5528 <_ZN14SoftwareSerial4peekEv+0x2a>
    550c:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    5510:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5514:	98 17       	cp	r25, r24
    5516:	41 f0       	breq	.+16     	; 0x5528 <_ZN14SoftwareSerial4peekEv+0x2a>
    5518:	e0 91 7c 08 	lds	r30, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	e2 58       	subi	r30, 0x82	; 130
    5520:	f7 4f       	sbci	r31, 0xF7	; 247
    5522:	80 81       	ld	r24, Z
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	08 95       	ret
    5528:	8f ef       	ldi	r24, 0xFF	; 255
    552a:	9f ef       	ldi	r25, 0xFF	; 255
    552c:	08 95       	ret

0000552e <_ZN14SoftwareSerial9availableEv>:
    552e:	20 91 be 08 	lds	r18, 0x08BE	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    5532:	30 91 bf 08 	lds	r19, 0x08BF	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    5536:	28 17       	cp	r18, r24
    5538:	39 07       	cpc	r19, r25
    553a:	71 f4       	brne	.+28     	; 0x5558 <_ZN14SoftwareSerial9availableEv+0x2a>
    553c:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5540:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	80 5c       	subi	r24, 0xC0	; 192
    5548:	9f 4f       	sbci	r25, 0xFF	; 255
    554a:	82 1b       	sub	r24, r18
    554c:	91 09       	sbc	r25, r1
    554e:	60 e4       	ldi	r22, 0x40	; 64
    5550:	70 e0       	ldi	r23, 0x00	; 0
    5552:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <__divmodhi4>
    5556:	08 95       	ret
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	08 95       	ret

0000555e <_ZN14SoftwareSerial13stopListeningEv>:
    555e:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    5562:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    5566:	e8 17       	cp	r30, r24
    5568:	f9 07       	cpc	r31, r25
    556a:	69 f4       	brne	.+26     	; 0x5586 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    556c:	a3 89       	ldd	r26, Z+19	; 0x13
    556e:	b4 89       	ldd	r27, Z+20	; 0x14
    5570:	9c 91       	ld	r25, X
    5572:	85 89       	ldd	r24, Z+21	; 0x15
    5574:	80 95       	com	r24
    5576:	89 23       	and	r24, r25
    5578:	8c 93       	st	X, r24
    557a:	10 92 bf 08 	sts	0x08BF, r1	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    557e:	10 92 be 08 	sts	0x08BE, r1	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	08 95       	ret
    5586:	80 e0       	ldi	r24, 0x00	; 0
    5588:	08 95       	ret

0000558a <_ZN14SoftwareSerial6listenEv>:
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	ec 01       	movw	r28, r24
    5590:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5592:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5594:	89 2b       	or	r24, r25
    5596:	f1 f0       	breq	.+60     	; 0x55d4 <_ZN14SoftwareSerial6listenEv+0x4a>
    5598:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    559c:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    55a0:	c8 17       	cp	r28, r24
    55a2:	d9 07       	cpc	r29, r25
    55a4:	b9 f0       	breq	.+46     	; 0x55d4 <_ZN14SoftwareSerial6listenEv+0x4a>
    55a6:	00 97       	sbiw	r24, 0x00	; 0
    55a8:	11 f0       	breq	.+4      	; 0x55ae <_ZN14SoftwareSerial6listenEv+0x24>
    55aa:	0e 94 af 2a 	call	0x555e	; 0x555e <_ZN14SoftwareSerial13stopListeningEv>
    55ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    55b0:	8e 7f       	andi	r24, 0xFE	; 254
    55b2:	8e 8f       	std	Y+30, r24	; 0x1e
    55b4:	10 92 7d 08 	sts	0x087D, r1	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    55b8:	10 92 7c 08 	sts	0x087C, r1	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    55bc:	d0 93 bf 08 	sts	0x08BF, r29	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    55c0:	c0 93 be 08 	sts	0x08BE, r28	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    55c4:	eb 89       	ldd	r30, Y+19	; 0x13
    55c6:	fc 89       	ldd	r31, Y+20	; 0x14
    55c8:	90 81       	ld	r25, Z
    55ca:	8d 89       	ldd	r24, Y+21	; 0x15
    55cc:	89 2b       	or	r24, r25
    55ce:	80 83       	st	Z, r24
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	01 c0       	rjmp	.+2      	; 0x55d6 <_ZN14SoftwareSerial6listenEv+0x4c>
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	df 91       	pop	r29
    55d8:	cf 91       	pop	r28
    55da:	08 95       	ret

000055dc <__vector_3>:
    55dc:	1f 92       	push	r1
    55de:	0f 92       	push	r0
    55e0:	0f b6       	in	r0, 0x3f	; 63
    55e2:	0f 92       	push	r0
    55e4:	11 24       	eor	r1, r1
    55e6:	2f 93       	push	r18
    55e8:	3f 93       	push	r19
    55ea:	4f 93       	push	r20
    55ec:	5f 93       	push	r21
    55ee:	6f 93       	push	r22
    55f0:	7f 93       	push	r23
    55f2:	8f 93       	push	r24
    55f4:	9f 93       	push	r25
    55f6:	af 93       	push	r26
    55f8:	bf 93       	push	r27
    55fa:	ef 93       	push	r30
    55fc:	ff 93       	push	r31
    55fe:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <_ZN14SoftwareSerial13active_objectE>
    5602:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <_ZN14SoftwareSerial13active_objectE+0x1>
    5606:	30 97       	sbiw	r30, 0x00	; 0
    5608:	09 f4       	brne	.+2      	; 0x560c <__vector_3+0x30>
    560a:	51 c0       	rjmp	.+162    	; 0x56ae <__vector_3+0xd2>
    560c:	96 8d       	ldd	r25, Z+30	; 0x1e
    560e:	a6 85       	ldd	r26, Z+14	; 0x0e
    5610:	b7 85       	ldd	r27, Z+15	; 0x0f
    5612:	85 85       	ldd	r24, Z+13	; 0x0d
    5614:	91 ff       	sbrs	r25, 1
    5616:	04 c0       	rjmp	.+8      	; 0x5620 <__vector_3+0x44>
    5618:	9c 91       	ld	r25, X
    561a:	89 23       	and	r24, r25
    561c:	29 f4       	brne	.+10     	; 0x5628 <__vector_3+0x4c>
    561e:	47 c0       	rjmp	.+142    	; 0x56ae <__vector_3+0xd2>
    5620:	9c 91       	ld	r25, X
    5622:	89 23       	and	r24, r25
    5624:	09 f0       	breq	.+2      	; 0x5628 <__vector_3+0x4c>
    5626:	43 c0       	rjmp	.+134    	; 0x56ae <__vector_3+0xd2>
    5628:	a3 89       	ldd	r26, Z+19	; 0x13
    562a:	b4 89       	ldd	r27, Z+20	; 0x14
    562c:	9c 91       	ld	r25, X
    562e:	85 89       	ldd	r24, Z+21	; 0x15
    5630:	80 95       	com	r24
    5632:	89 23       	and	r24, r25
    5634:	8c 93       	st	X, r24
    5636:	86 89       	ldd	r24, Z+22	; 0x16
    5638:	97 89       	ldd	r25, Z+23	; 0x17
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	f1 f7       	brne	.-4      	; 0x563a <__vector_3+0x5e>
    563e:	60 8d       	ldd	r22, Z+24	; 0x18
    5640:	71 8d       	ldd	r23, Z+25	; 0x19
    5642:	a6 85       	ldd	r26, Z+14	; 0x0e
    5644:	b7 85       	ldd	r27, Z+15	; 0x0f
    5646:	55 85       	ldd	r21, Z+13	; 0x0d
    5648:	38 e0       	ldi	r19, 0x08	; 8
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	cb 01       	movw	r24, r22
    564e:	01 97       	sbiw	r24, 0x01	; 1
    5650:	f1 f7       	brne	.-4      	; 0x564e <__vector_3+0x72>
    5652:	82 2f       	mov	r24, r18
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	95 95       	asr	r25
    5658:	87 95       	ror	r24
    565a:	28 2f       	mov	r18, r24
    565c:	4c 91       	ld	r20, X
    565e:	45 23       	and	r20, r21
    5660:	09 f0       	breq	.+2      	; 0x5664 <__vector_3+0x88>
    5662:	20 68       	ori	r18, 0x80	; 128
    5664:	31 50       	subi	r19, 0x01	; 1
    5666:	91 f7       	brne	.-28     	; 0x564c <__vector_3+0x70>
    5668:	86 8d       	ldd	r24, Z+30	; 0x1e
    566a:	81 fd       	sbrc	r24, 1
    566c:	20 95       	com	r18
    566e:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	01 96       	adiw	r24, 0x01	; 1
    5676:	8f 73       	andi	r24, 0x3F	; 63
    5678:	99 27       	eor	r25, r25
    567a:	30 91 7c 08 	lds	r19, 0x087C	; 0x80087c <_ZN14SoftwareSerial20_receive_buffer_headE>
    567e:	38 17       	cp	r19, r24
    5680:	49 f0       	breq	.+18     	; 0x5694 <__vector_3+0xb8>
    5682:	a0 91 7d 08 	lds	r26, 0x087D	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5686:	b0 e0       	ldi	r27, 0x00	; 0
    5688:	a2 58       	subi	r26, 0x82	; 130
    568a:	b7 4f       	sbci	r27, 0xF7	; 247
    568c:	2c 93       	st	X, r18
    568e:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5692:	03 c0       	rjmp	.+6      	; 0x569a <__vector_3+0xbe>
    5694:	86 8d       	ldd	r24, Z+30	; 0x1e
    5696:	81 60       	ori	r24, 0x01	; 1
    5698:	86 8f       	std	Z+30, r24	; 0x1e
    569a:	82 8d       	ldd	r24, Z+26	; 0x1a
    569c:	93 8d       	ldd	r25, Z+27	; 0x1b
    569e:	01 97       	sbiw	r24, 0x01	; 1
    56a0:	f1 f7       	brne	.-4      	; 0x569e <__vector_3+0xc2>
    56a2:	a3 89       	ldd	r26, Z+19	; 0x13
    56a4:	b4 89       	ldd	r27, Z+20	; 0x14
    56a6:	9c 91       	ld	r25, X
    56a8:	85 89       	ldd	r24, Z+21	; 0x15
    56aa:	89 2b       	or	r24, r25
    56ac:	8c 93       	st	X, r24
    56ae:	ff 91       	pop	r31
    56b0:	ef 91       	pop	r30
    56b2:	bf 91       	pop	r27
    56b4:	af 91       	pop	r26
    56b6:	9f 91       	pop	r25
    56b8:	8f 91       	pop	r24
    56ba:	7f 91       	pop	r23
    56bc:	6f 91       	pop	r22
    56be:	5f 91       	pop	r21
    56c0:	4f 91       	pop	r20
    56c2:	3f 91       	pop	r19
    56c4:	2f 91       	pop	r18
    56c6:	0f 90       	pop	r0
    56c8:	0f be       	out	0x3f, r0	; 63
    56ca:	0f 90       	pop	r0
    56cc:	1f 90       	pop	r1
    56ce:	18 95       	reti

000056d0 <_ZN14SoftwareSerial5setTXEh>:
    56d0:	1f 93       	push	r17
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
    56d6:	ec 01       	movw	r28, r24
    56d8:	16 2f       	mov	r17, r22
    56da:	6e 8d       	ldd	r22, Y+30	; 0x1e
    56dc:	66 95       	lsr	r22
    56de:	61 70       	andi	r22, 0x01	; 1
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	68 27       	eor	r22, r24
    56e4:	81 2f       	mov	r24, r17
    56e6:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
    56ea:	61 e0       	ldi	r22, 0x01	; 1
    56ec:	81 2f       	mov	r24, r17
    56ee:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <pinMode>
    56f2:	81 2f       	mov	r24, r17
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	fc 01       	movw	r30, r24
    56f8:	e5 5a       	subi	r30, 0xA5	; 165
    56fa:	fc 4f       	sbci	r31, 0xFC	; 252
    56fc:	e4 91       	lpm	r30, Z
    56fe:	e8 8b       	std	Y+16, r30	; 0x10
    5700:	fc 01       	movw	r30, r24
    5702:	e1 59       	subi	r30, 0x91	; 145
    5704:	fc 4f       	sbci	r31, 0xFC	; 252
    5706:	e4 91       	lpm	r30, Z
    5708:	f0 e0       	ldi	r31, 0x00	; 0
    570a:	ee 0f       	add	r30, r30
    570c:	ff 1f       	adc	r31, r31
    570e:	e3 57       	subi	r30, 0x73	; 115
    5710:	fc 4f       	sbci	r31, 0xFC	; 252
    5712:	85 91       	lpm	r24, Z+
    5714:	94 91       	lpm	r25, Z
    5716:	9a 8b       	std	Y+18, r25	; 0x12
    5718:	89 8b       	std	Y+17, r24	; 0x11
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	1f 91       	pop	r17
    5720:	08 95       	ret

00005722 <_ZN14SoftwareSerial5setRXEh>:
    5722:	1f 93       	push	r17
    5724:	cf 93       	push	r28
    5726:	df 93       	push	r29
    5728:	ec 01       	movw	r28, r24
    572a:	16 2f       	mov	r17, r22
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	81 2f       	mov	r24, r17
    5730:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <pinMode>
    5734:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5736:	81 fd       	sbrc	r24, 1
    5738:	04 c0       	rjmp	.+8      	; 0x5742 <_ZN14SoftwareSerial5setRXEh+0x20>
    573a:	61 e0       	ldi	r22, 0x01	; 1
    573c:	81 2f       	mov	r24, r17
    573e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <digitalWrite>
    5742:	1c 87       	std	Y+12, r17	; 0x0c
    5744:	81 2f       	mov	r24, r17
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	fc 01       	movw	r30, r24
    574a:	e5 5a       	subi	r30, 0xA5	; 165
    574c:	fc 4f       	sbci	r31, 0xFC	; 252
    574e:	e4 91       	lpm	r30, Z
    5750:	ed 87       	std	Y+13, r30	; 0x0d
    5752:	fc 01       	movw	r30, r24
    5754:	e1 59       	subi	r30, 0x91	; 145
    5756:	fc 4f       	sbci	r31, 0xFC	; 252
    5758:	e4 91       	lpm	r30, Z
    575a:	f0 e0       	ldi	r31, 0x00	; 0
    575c:	ee 0f       	add	r30, r30
    575e:	ff 1f       	adc	r31, r31
    5760:	ed 57       	subi	r30, 0x7D	; 125
    5762:	fc 4f       	sbci	r31, 0xFC	; 252
    5764:	85 91       	lpm	r24, Z+
    5766:	94 91       	lpm	r25, Z
    5768:	9f 87       	std	Y+15, r25	; 0x0f
    576a:	8e 87       	std	Y+14, r24	; 0x0e
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	1f 91       	pop	r17
    5772:	08 95       	ret

00005774 <_ZN14SoftwareSerialC1Ehhb>:
    5774:	1f 93       	push	r17
    5776:	cf 93       	push	r28
    5778:	df 93       	push	r29
    577a:	ec 01       	movw	r28, r24
    577c:	16 2f       	mov	r17, r22
    577e:	1b 82       	std	Y+3, r1	; 0x03
    5780:	1a 82       	std	Y+2, r1	; 0x02
    5782:	88 ee       	ldi	r24, 0xE8	; 232
    5784:	93 e0       	ldi	r25, 0x03	; 3
    5786:	a0 e0       	ldi	r26, 0x00	; 0
    5788:	b0 e0       	ldi	r27, 0x00	; 0
    578a:	8c 83       	std	Y+4, r24	; 0x04
    578c:	9d 83       	std	Y+5, r25	; 0x05
    578e:	ae 83       	std	Y+6, r26	; 0x06
    5790:	bf 83       	std	Y+7, r27	; 0x07
    5792:	80 ea       	ldi	r24, 0xA0	; 160
    5794:	93 e0       	ldi	r25, 0x03	; 3
    5796:	99 83       	std	Y+1, r25	; 0x01
    5798:	88 83       	st	Y, r24
    579a:	1f 8a       	std	Y+23, r1	; 0x17
    579c:	1e 8a       	std	Y+22, r1	; 0x16
    579e:	19 8e       	std	Y+25, r1	; 0x19
    57a0:	18 8e       	std	Y+24, r1	; 0x18
    57a2:	1b 8e       	std	Y+27, r1	; 0x1b
    57a4:	1a 8e       	std	Y+26, r1	; 0x1a
    57a6:	1d 8e       	std	Y+29, r1	; 0x1d
    57a8:	1c 8e       	std	Y+28, r1	; 0x1c
    57aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    57ac:	8e 7f       	andi	r24, 0xFE	; 254
    57ae:	20 fb       	bst	r18, 0
    57b0:	81 f9       	bld	r24, 1
    57b2:	8e 8f       	std	Y+30, r24	; 0x1e
    57b4:	64 2f       	mov	r22, r20
    57b6:	ce 01       	movw	r24, r28
    57b8:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <_ZN14SoftwareSerial5setTXEh>
    57bc:	61 2f       	mov	r22, r17
    57be:	ce 01       	movw	r24, r28
    57c0:	df 91       	pop	r29
    57c2:	cf 91       	pop	r28
    57c4:	1f 91       	pop	r17
    57c6:	0c 94 91 2b 	jmp	0x5722	; 0x5722 <_ZN14SoftwareSerial5setRXEh>

000057ca <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	ec 01       	movw	r28, r24
    57d0:	9a 01       	movw	r18, r20
    57d2:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    57d4:	1b 8e       	std	Y+27, r1	; 0x1b
    57d6:	1a 8e       	std	Y+26, r1	; 0x1a
    57d8:	19 8e       	std	Y+25, r1	; 0x19
    57da:	18 8e       	std	Y+24, r1	; 0x18
    57dc:	1f 8a       	std	Y+23, r1	; 0x17
    57de:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    57e0:	60 e0       	ldi	r22, 0x00	; 0
    57e2:	79 e0       	ldi	r23, 0x09	; 9
    57e4:	8d e3       	ldi	r24, 0x3D	; 61
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__divmodsi4>
    57ec:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    57ee:	24 30       	cpi	r18, 0x04	; 4
    57f0:	31 05       	cpc	r19, r1
    57f2:	18 f0       	brcs	.+6      	; 0x57fa <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    57f4:	c9 01       	movw	r24, r18
    57f6:	03 97       	sbiw	r24, 0x03	; 3
    57f8:	02 c0       	rjmp	.+4      	; 0x57fe <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    57fe:	9d 8f       	std	Y+29, r25	; 0x1d
    5800:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    5802:	6c 85       	ldd	r22, Y+12	; 0x0c
    5804:	66 31       	cpi	r22, 0x16	; 22
    5806:	08 f0       	brcs	.+2      	; 0x580a <_ZN14SoftwareSerial5beginEl+0x40>
    5808:	69 c0       	rjmp	.+210    	; 0x58dc <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    580a:	c9 01       	movw	r24, r18
    580c:	96 95       	lsr	r25
    580e:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5810:	84 31       	cpi	r24, 0x14	; 20
    5812:	91 05       	cpc	r25, r1
    5814:	10 f0       	brcs	.+4      	; 0x581a <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    5816:	43 97       	sbiw	r24, 0x13	; 19
    5818:	02 c0       	rjmp	.+4      	; 0x581e <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    581e:	9f 8b       	std	Y+23, r25	; 0x17
    5820:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5822:	36 97       	sbiw	r30, 0x06	; 6
    5824:	18 f0       	brcs	.+6      	; 0x582c <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    5826:	c9 01       	movw	r24, r18
    5828:	05 97       	sbiw	r24, 0x05	; 5
    582a:	02 c0       	rjmp	.+4      	; 0x5830 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    582c:	81 e0       	ldi	r24, 0x01	; 1
    582e:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    5830:	99 8f       	std	Y+25, r25	; 0x19
    5832:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    5834:	c9 01       	movw	r24, r18
    5836:	88 0f       	add	r24, r24
    5838:	99 1f       	adc	r25, r25
    583a:	28 0f       	add	r18, r24
    583c:	39 1f       	adc	r19, r25
    583e:	36 95       	lsr	r19
    5840:	27 95       	ror	r18
    5842:	36 95       	lsr	r19
    5844:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5846:	2d 30       	cpi	r18, 0x0D	; 13
    5848:	31 05       	cpc	r19, r1
    584a:	18 f0       	brcs	.+6      	; 0x5852 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    584c:	2c 50       	subi	r18, 0x0C	; 12
    584e:	31 09       	sbc	r19, r1
    5850:	02 c0       	rjmp	.+4      	; 0x5856 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    5852:	21 e0       	ldi	r18, 0x01	; 1
    5854:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    5856:	3b 8f       	std	Y+27, r19	; 0x1b
    5858:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    585a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    585e:	68 30       	cpi	r22, 0x08	; 8
    5860:	50 f0       	brcs	.+20     	; 0x5876 <_ZN14SoftwareSerial5beginEl+0xac>
    5862:	21 e0       	ldi	r18, 0x01	; 1
    5864:	6e 30       	cpi	r22, 0x0E	; 14
    5866:	08 f4       	brcc	.+2      	; 0x586a <_ZN14SoftwareSerial5beginEl+0xa0>
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	01 c0       	rjmp	.+2      	; 0x5870 <_ZN14SoftwareSerial5beginEl+0xa6>
    586e:	88 0f       	add	r24, r24
    5870:	2a 95       	dec	r18
    5872:	ea f7       	brpl	.-6      	; 0x586e <_ZN14SoftwareSerial5beginEl+0xa4>
    5874:	01 c0       	rjmp	.+2      	; 0x5878 <_ZN14SoftwareSerial5beginEl+0xae>
    5876:	84 e0       	ldi	r24, 0x04	; 4
    5878:	89 2b       	or	r24, r25
    587a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    587e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5880:	98 30       	cpi	r25, 0x08	; 8
    5882:	38 f0       	brcs	.+14     	; 0x5892 <_ZN14SoftwareSerial5beginEl+0xc8>
    5884:	9e 30       	cpi	r25, 0x0E	; 14
    5886:	40 f0       	brcs	.+16     	; 0x5898 <_ZN14SoftwareSerial5beginEl+0xce>
    5888:	96 31       	cpi	r25, 0x16	; 22
    588a:	48 f0       	brcs	.+18     	; 0x589e <_ZN14SoftwareSerial5beginEl+0xd4>
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	08 c0       	rjmp	.+16     	; 0x58a2 <_ZN14SoftwareSerial5beginEl+0xd8>
    5892:	2d e6       	ldi	r18, 0x6D	; 109
    5894:	30 e0       	ldi	r19, 0x00	; 0
    5896:	05 c0       	rjmp	.+10     	; 0x58a2 <_ZN14SoftwareSerial5beginEl+0xd8>
    5898:	2b e6       	ldi	r18, 0x6B	; 107
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <_ZN14SoftwareSerial5beginEl+0xd8>
    589e:	2c e6       	ldi	r18, 0x6C	; 108
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	3c 8b       	std	Y+20, r19	; 0x14
    58a4:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    58a6:	98 30       	cpi	r25, 0x08	; 8
    58a8:	30 f4       	brcc	.+12     	; 0x58b6 <_ZN14SoftwareSerial5beginEl+0xec>
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	01 c0       	rjmp	.+2      	; 0x58b0 <_ZN14SoftwareSerial5beginEl+0xe6>
    58ae:	88 0f       	add	r24, r24
    58b0:	9a 95       	dec	r25
    58b2:	ea f7       	brpl	.-6      	; 0x58ae <_ZN14SoftwareSerial5beginEl+0xe4>
    58b4:	0e c0       	rjmp	.+28     	; 0x58d2 <_ZN14SoftwareSerial5beginEl+0x108>
    58b6:	29 2f       	mov	r18, r25
    58b8:	30 e0       	ldi	r19, 0x00	; 0
    58ba:	9e 30       	cpi	r25, 0x0E	; 14
    58bc:	18 f4       	brcc	.+6      	; 0x58c4 <_ZN14SoftwareSerial5beginEl+0xfa>
    58be:	28 50       	subi	r18, 0x08	; 8
    58c0:	31 09       	sbc	r19, r1
    58c2:	02 c0       	rjmp	.+4      	; 0x58c8 <_ZN14SoftwareSerial5beginEl+0xfe>
    58c4:	2e 50       	subi	r18, 0x0E	; 14
    58c6:	31 09       	sbc	r19, r1
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	01 c0       	rjmp	.+2      	; 0x58ce <_ZN14SoftwareSerial5beginEl+0x104>
    58cc:	88 0f       	add	r24, r24
    58ce:	2a 95       	dec	r18
    58d0:	ea f7       	brpl	.-6      	; 0x58cc <_ZN14SoftwareSerial5beginEl+0x102>
    58d2:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    58d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    58d8:	01 97       	sbiw	r24, 0x01	; 1
    58da:	f1 f7       	brne	.-4      	; 0x58d8 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    58dc:	ce 01       	movw	r24, r28
}
    58de:	df 91       	pop	r29
    58e0:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    58e2:	0c 94 c5 2a 	jmp	0x558a	; 0x558a <_ZN14SoftwareSerial6listenEv>

000058e6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    58e6:	08 95       	ret

000058e8 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    58e8:	08 95       	ret

000058ea <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    58ea:	1f 92       	push	r1
    58ec:	0f 92       	push	r0
    58ee:	0f b6       	in	r0, 0x3f	; 63
    58f0:	0f 92       	push	r0
    58f2:	11 24       	eor	r1, r1
    58f4:	2f 93       	push	r18
    58f6:	3f 93       	push	r19
    58f8:	4f 93       	push	r20
    58fa:	5f 93       	push	r21
    58fc:	6f 93       	push	r22
    58fe:	7f 93       	push	r23
    5900:	8f 93       	push	r24
    5902:	9f 93       	push	r25
    5904:	af 93       	push	r26
    5906:	bf 93       	push	r27
    5908:	ef 93       	push	r30
    590a:	ff 93       	push	r31
    590c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <intFunc>
    5910:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <intFunc+0x1>
    5914:	09 95       	icall
    5916:	ff 91       	pop	r31
    5918:	ef 91       	pop	r30
    591a:	bf 91       	pop	r27
    591c:	af 91       	pop	r26
    591e:	9f 91       	pop	r25
    5920:	8f 91       	pop	r24
    5922:	7f 91       	pop	r23
    5924:	6f 91       	pop	r22
    5926:	5f 91       	pop	r21
    5928:	4f 91       	pop	r20
    592a:	3f 91       	pop	r19
    592c:	2f 91       	pop	r18
    592e:	0f 90       	pop	r0
    5930:	0f be       	out	0x3f, r0	; 63
    5932:	0f 90       	pop	r0
    5934:	1f 90       	pop	r1
    5936:	18 95       	reti

00005938 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    5938:	1f 92       	push	r1
    593a:	0f 92       	push	r0
    593c:	0f b6       	in	r0, 0x3f	; 63
    593e:	0f 92       	push	r0
    5940:	11 24       	eor	r1, r1
    5942:	2f 93       	push	r18
    5944:	3f 93       	push	r19
    5946:	4f 93       	push	r20
    5948:	5f 93       	push	r21
    594a:	6f 93       	push	r22
    594c:	7f 93       	push	r23
    594e:	8f 93       	push	r24
    5950:	9f 93       	push	r25
    5952:	af 93       	push	r26
    5954:	bf 93       	push	r27
    5956:	ef 93       	push	r30
    5958:	ff 93       	push	r31
    595a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <intFunc+0x2>
    595e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <intFunc+0x3>
    5962:	09 95       	icall
    5964:	ff 91       	pop	r31
    5966:	ef 91       	pop	r30
    5968:	bf 91       	pop	r27
    596a:	af 91       	pop	r26
    596c:	9f 91       	pop	r25
    596e:	8f 91       	pop	r24
    5970:	7f 91       	pop	r23
    5972:	6f 91       	pop	r22
    5974:	5f 91       	pop	r21
    5976:	4f 91       	pop	r20
    5978:	3f 91       	pop	r19
    597a:	2f 91       	pop	r18
    597c:	0f 90       	pop	r0
    597e:	0f be       	out	0x3f, r0	; 63
    5980:	0f 90       	pop	r0
    5982:	1f 90       	pop	r1
    5984:	18 95       	reti

00005986 <__cmpsf2>:
    5986:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__fp_cmp>
    598a:	08 f4       	brcc	.+2      	; 0x598e <__cmpsf2+0x8>
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	08 95       	ret

00005990 <__fp_cmp>:
    5990:	99 0f       	add	r25, r25
    5992:	00 08       	sbc	r0, r0
    5994:	55 0f       	add	r21, r21
    5996:	aa 0b       	sbc	r26, r26
    5998:	e0 e8       	ldi	r30, 0x80	; 128
    599a:	fe ef       	ldi	r31, 0xFE	; 254
    599c:	16 16       	cp	r1, r22
    599e:	17 06       	cpc	r1, r23
    59a0:	e8 07       	cpc	r30, r24
    59a2:	f9 07       	cpc	r31, r25
    59a4:	c0 f0       	brcs	.+48     	; 0x59d6 <__fp_cmp+0x46>
    59a6:	12 16       	cp	r1, r18
    59a8:	13 06       	cpc	r1, r19
    59aa:	e4 07       	cpc	r30, r20
    59ac:	f5 07       	cpc	r31, r21
    59ae:	98 f0       	brcs	.+38     	; 0x59d6 <__fp_cmp+0x46>
    59b0:	62 1b       	sub	r22, r18
    59b2:	73 0b       	sbc	r23, r19
    59b4:	84 0b       	sbc	r24, r20
    59b6:	95 0b       	sbc	r25, r21
    59b8:	39 f4       	brne	.+14     	; 0x59c8 <__fp_cmp+0x38>
    59ba:	0a 26       	eor	r0, r26
    59bc:	61 f0       	breq	.+24     	; 0x59d6 <__fp_cmp+0x46>
    59be:	23 2b       	or	r18, r19
    59c0:	24 2b       	or	r18, r20
    59c2:	25 2b       	or	r18, r21
    59c4:	21 f4       	brne	.+8      	; 0x59ce <__fp_cmp+0x3e>
    59c6:	08 95       	ret
    59c8:	0a 26       	eor	r0, r26
    59ca:	09 f4       	brne	.+2      	; 0x59ce <__fp_cmp+0x3e>
    59cc:	a1 40       	sbci	r26, 0x01	; 1
    59ce:	a6 95       	lsr	r26
    59d0:	8f ef       	ldi	r24, 0xFF	; 255
    59d2:	81 1d       	adc	r24, r1
    59d4:	81 1d       	adc	r24, r1
    59d6:	08 95       	ret

000059d8 <__fp_inf>:
    59d8:	97 f9       	bld	r25, 7
    59da:	9f 67       	ori	r25, 0x7F	; 127
    59dc:	80 e8       	ldi	r24, 0x80	; 128
    59de:	70 e0       	ldi	r23, 0x00	; 0
    59e0:	60 e0       	ldi	r22, 0x00	; 0
    59e2:	08 95       	ret

000059e4 <__fp_nan>:
    59e4:	9f ef       	ldi	r25, 0xFF	; 255
    59e6:	80 ec       	ldi	r24, 0xC0	; 192
    59e8:	08 95       	ret

000059ea <__fp_pscA>:
    59ea:	00 24       	eor	r0, r0
    59ec:	0a 94       	dec	r0
    59ee:	16 16       	cp	r1, r22
    59f0:	17 06       	cpc	r1, r23
    59f2:	18 06       	cpc	r1, r24
    59f4:	09 06       	cpc	r0, r25
    59f6:	08 95       	ret

000059f8 <__fp_pscB>:
    59f8:	00 24       	eor	r0, r0
    59fa:	0a 94       	dec	r0
    59fc:	12 16       	cp	r1, r18
    59fe:	13 06       	cpc	r1, r19
    5a00:	14 06       	cpc	r1, r20
    5a02:	05 06       	cpc	r0, r21
    5a04:	08 95       	ret

00005a06 <__fp_round>:
    5a06:	09 2e       	mov	r0, r25
    5a08:	03 94       	inc	r0
    5a0a:	00 0c       	add	r0, r0
    5a0c:	11 f4       	brne	.+4      	; 0x5a12 <__fp_round+0xc>
    5a0e:	88 23       	and	r24, r24
    5a10:	52 f0       	brmi	.+20     	; 0x5a26 <__fp_round+0x20>
    5a12:	bb 0f       	add	r27, r27
    5a14:	40 f4       	brcc	.+16     	; 0x5a26 <__fp_round+0x20>
    5a16:	bf 2b       	or	r27, r31
    5a18:	11 f4       	brne	.+4      	; 0x5a1e <__fp_round+0x18>
    5a1a:	60 ff       	sbrs	r22, 0
    5a1c:	04 c0       	rjmp	.+8      	; 0x5a26 <__fp_round+0x20>
    5a1e:	6f 5f       	subi	r22, 0xFF	; 255
    5a20:	7f 4f       	sbci	r23, 0xFF	; 255
    5a22:	8f 4f       	sbci	r24, 0xFF	; 255
    5a24:	9f 4f       	sbci	r25, 0xFF	; 255
    5a26:	08 95       	ret

00005a28 <__fp_split3>:
    5a28:	57 fd       	sbrc	r21, 7
    5a2a:	90 58       	subi	r25, 0x80	; 128
    5a2c:	44 0f       	add	r20, r20
    5a2e:	55 1f       	adc	r21, r21
    5a30:	59 f0       	breq	.+22     	; 0x5a48 <__fp_splitA+0x10>
    5a32:	5f 3f       	cpi	r21, 0xFF	; 255
    5a34:	71 f0       	breq	.+28     	; 0x5a52 <__fp_splitA+0x1a>
    5a36:	47 95       	ror	r20

00005a38 <__fp_splitA>:
    5a38:	88 0f       	add	r24, r24
    5a3a:	97 fb       	bst	r25, 7
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	61 f0       	breq	.+24     	; 0x5a58 <__fp_splitA+0x20>
    5a40:	9f 3f       	cpi	r25, 0xFF	; 255
    5a42:	79 f0       	breq	.+30     	; 0x5a62 <__fp_splitA+0x2a>
    5a44:	87 95       	ror	r24
    5a46:	08 95       	ret
    5a48:	12 16       	cp	r1, r18
    5a4a:	13 06       	cpc	r1, r19
    5a4c:	14 06       	cpc	r1, r20
    5a4e:	55 1f       	adc	r21, r21
    5a50:	f2 cf       	rjmp	.-28     	; 0x5a36 <__fp_split3+0xe>
    5a52:	46 95       	lsr	r20
    5a54:	f1 df       	rcall	.-30     	; 0x5a38 <__fp_splitA>
    5a56:	08 c0       	rjmp	.+16     	; 0x5a68 <__fp_splitA+0x30>
    5a58:	16 16       	cp	r1, r22
    5a5a:	17 06       	cpc	r1, r23
    5a5c:	18 06       	cpc	r1, r24
    5a5e:	99 1f       	adc	r25, r25
    5a60:	f1 cf       	rjmp	.-30     	; 0x5a44 <__fp_splitA+0xc>
    5a62:	86 95       	lsr	r24
    5a64:	71 05       	cpc	r23, r1
    5a66:	61 05       	cpc	r22, r1
    5a68:	08 94       	sec
    5a6a:	08 95       	ret

00005a6c <__fp_zero>:
    5a6c:	e8 94       	clt

00005a6e <__fp_szero>:
    5a6e:	bb 27       	eor	r27, r27
    5a70:	66 27       	eor	r22, r22
    5a72:	77 27       	eor	r23, r23
    5a74:	cb 01       	movw	r24, r22
    5a76:	97 f9       	bld	r25, 7
    5a78:	08 95       	ret

00005a7a <__mulsf3>:
    5a7a:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <__mulsf3x>
    5a7e:	0c 94 03 2d 	jmp	0x5a06	; 0x5a06 <__fp_round>
    5a82:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__fp_pscA>
    5a86:	38 f0       	brcs	.+14     	; 0x5a96 <__mulsf3+0x1c>
    5a88:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fp_pscB>
    5a8c:	20 f0       	brcs	.+8      	; 0x5a96 <__mulsf3+0x1c>
    5a8e:	95 23       	and	r25, r21
    5a90:	11 f0       	breq	.+4      	; 0x5a96 <__mulsf3+0x1c>
    5a92:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__fp_inf>
    5a96:	0c 94 f2 2c 	jmp	0x59e4	; 0x59e4 <__fp_nan>
    5a9a:	11 24       	eor	r1, r1
    5a9c:	0c 94 37 2d 	jmp	0x5a6e	; 0x5a6e <__fp_szero>

00005aa0 <__mulsf3x>:
    5aa0:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__fp_split3>
    5aa4:	70 f3       	brcs	.-36     	; 0x5a82 <__mulsf3+0x8>

00005aa6 <__mulsf3_pse>:
    5aa6:	95 9f       	mul	r25, r21
    5aa8:	c1 f3       	breq	.-16     	; 0x5a9a <__mulsf3+0x20>
    5aaa:	95 0f       	add	r25, r21
    5aac:	50 e0       	ldi	r21, 0x00	; 0
    5aae:	55 1f       	adc	r21, r21
    5ab0:	62 9f       	mul	r22, r18
    5ab2:	f0 01       	movw	r30, r0
    5ab4:	72 9f       	mul	r23, r18
    5ab6:	bb 27       	eor	r27, r27
    5ab8:	f0 0d       	add	r31, r0
    5aba:	b1 1d       	adc	r27, r1
    5abc:	63 9f       	mul	r22, r19
    5abe:	aa 27       	eor	r26, r26
    5ac0:	f0 0d       	add	r31, r0
    5ac2:	b1 1d       	adc	r27, r1
    5ac4:	aa 1f       	adc	r26, r26
    5ac6:	64 9f       	mul	r22, r20
    5ac8:	66 27       	eor	r22, r22
    5aca:	b0 0d       	add	r27, r0
    5acc:	a1 1d       	adc	r26, r1
    5ace:	66 1f       	adc	r22, r22
    5ad0:	82 9f       	mul	r24, r18
    5ad2:	22 27       	eor	r18, r18
    5ad4:	b0 0d       	add	r27, r0
    5ad6:	a1 1d       	adc	r26, r1
    5ad8:	62 1f       	adc	r22, r18
    5ada:	73 9f       	mul	r23, r19
    5adc:	b0 0d       	add	r27, r0
    5ade:	a1 1d       	adc	r26, r1
    5ae0:	62 1f       	adc	r22, r18
    5ae2:	83 9f       	mul	r24, r19
    5ae4:	a0 0d       	add	r26, r0
    5ae6:	61 1d       	adc	r22, r1
    5ae8:	22 1f       	adc	r18, r18
    5aea:	74 9f       	mul	r23, r20
    5aec:	33 27       	eor	r19, r19
    5aee:	a0 0d       	add	r26, r0
    5af0:	61 1d       	adc	r22, r1
    5af2:	23 1f       	adc	r18, r19
    5af4:	84 9f       	mul	r24, r20
    5af6:	60 0d       	add	r22, r0
    5af8:	21 1d       	adc	r18, r1
    5afa:	82 2f       	mov	r24, r18
    5afc:	76 2f       	mov	r23, r22
    5afe:	6a 2f       	mov	r22, r26
    5b00:	11 24       	eor	r1, r1
    5b02:	9f 57       	subi	r25, 0x7F	; 127
    5b04:	50 40       	sbci	r21, 0x00	; 0
    5b06:	9a f0       	brmi	.+38     	; 0x5b2e <__mulsf3_pse+0x88>
    5b08:	f1 f0       	breq	.+60     	; 0x5b46 <__mulsf3_pse+0xa0>
    5b0a:	88 23       	and	r24, r24
    5b0c:	4a f0       	brmi	.+18     	; 0x5b20 <__mulsf3_pse+0x7a>
    5b0e:	ee 0f       	add	r30, r30
    5b10:	ff 1f       	adc	r31, r31
    5b12:	bb 1f       	adc	r27, r27
    5b14:	66 1f       	adc	r22, r22
    5b16:	77 1f       	adc	r23, r23
    5b18:	88 1f       	adc	r24, r24
    5b1a:	91 50       	subi	r25, 0x01	; 1
    5b1c:	50 40       	sbci	r21, 0x00	; 0
    5b1e:	a9 f7       	brne	.-22     	; 0x5b0a <__mulsf3_pse+0x64>
    5b20:	9e 3f       	cpi	r25, 0xFE	; 254
    5b22:	51 05       	cpc	r21, r1
    5b24:	80 f0       	brcs	.+32     	; 0x5b46 <__mulsf3_pse+0xa0>
    5b26:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__fp_inf>
    5b2a:	0c 94 37 2d 	jmp	0x5a6e	; 0x5a6e <__fp_szero>
    5b2e:	5f 3f       	cpi	r21, 0xFF	; 255
    5b30:	e4 f3       	brlt	.-8      	; 0x5b2a <__mulsf3_pse+0x84>
    5b32:	98 3e       	cpi	r25, 0xE8	; 232
    5b34:	d4 f3       	brlt	.-12     	; 0x5b2a <__mulsf3_pse+0x84>
    5b36:	86 95       	lsr	r24
    5b38:	77 95       	ror	r23
    5b3a:	67 95       	ror	r22
    5b3c:	b7 95       	ror	r27
    5b3e:	f7 95       	ror	r31
    5b40:	e7 95       	ror	r30
    5b42:	9f 5f       	subi	r25, 0xFF	; 255
    5b44:	c1 f7       	brne	.-16     	; 0x5b36 <__mulsf3_pse+0x90>
    5b46:	fe 2b       	or	r31, r30
    5b48:	88 0f       	add	r24, r24
    5b4a:	91 1d       	adc	r25, r1
    5b4c:	96 95       	lsr	r25
    5b4e:	87 95       	ror	r24
    5b50:	97 f9       	bld	r25, 7
    5b52:	08 95       	ret

00005b54 <__divmodhi4>:
    5b54:	97 fb       	bst	r25, 7
    5b56:	07 2e       	mov	r0, r23
    5b58:	16 f4       	brtc	.+4      	; 0x5b5e <__divmodhi4+0xa>
    5b5a:	00 94       	com	r0
    5b5c:	07 d0       	rcall	.+14     	; 0x5b6c <__divmodhi4_neg1>
    5b5e:	77 fd       	sbrc	r23, 7
    5b60:	09 d0       	rcall	.+18     	; 0x5b74 <__divmodhi4_neg2>
    5b62:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodhi4>
    5b66:	07 fc       	sbrc	r0, 7
    5b68:	05 d0       	rcall	.+10     	; 0x5b74 <__divmodhi4_neg2>
    5b6a:	3e f4       	brtc	.+14     	; 0x5b7a <__divmodhi4_exit>

00005b6c <__divmodhi4_neg1>:
    5b6c:	90 95       	com	r25
    5b6e:	81 95       	neg	r24
    5b70:	9f 4f       	sbci	r25, 0xFF	; 255
    5b72:	08 95       	ret

00005b74 <__divmodhi4_neg2>:
    5b74:	70 95       	com	r23
    5b76:	61 95       	neg	r22
    5b78:	7f 4f       	sbci	r23, 0xFF	; 255

00005b7a <__divmodhi4_exit>:
    5b7a:	08 95       	ret

00005b7c <__udivmodsi4>:
    5b7c:	a1 e2       	ldi	r26, 0x21	; 33
    5b7e:	1a 2e       	mov	r1, r26
    5b80:	aa 1b       	sub	r26, r26
    5b82:	bb 1b       	sub	r27, r27
    5b84:	fd 01       	movw	r30, r26
    5b86:	0d c0       	rjmp	.+26     	; 0x5ba2 <__udivmodsi4_ep>

00005b88 <__udivmodsi4_loop>:
    5b88:	aa 1f       	adc	r26, r26
    5b8a:	bb 1f       	adc	r27, r27
    5b8c:	ee 1f       	adc	r30, r30
    5b8e:	ff 1f       	adc	r31, r31
    5b90:	a2 17       	cp	r26, r18
    5b92:	b3 07       	cpc	r27, r19
    5b94:	e4 07       	cpc	r30, r20
    5b96:	f5 07       	cpc	r31, r21
    5b98:	20 f0       	brcs	.+8      	; 0x5ba2 <__udivmodsi4_ep>
    5b9a:	a2 1b       	sub	r26, r18
    5b9c:	b3 0b       	sbc	r27, r19
    5b9e:	e4 0b       	sbc	r30, r20
    5ba0:	f5 0b       	sbc	r31, r21

00005ba2 <__udivmodsi4_ep>:
    5ba2:	66 1f       	adc	r22, r22
    5ba4:	77 1f       	adc	r23, r23
    5ba6:	88 1f       	adc	r24, r24
    5ba8:	99 1f       	adc	r25, r25
    5baa:	1a 94       	dec	r1
    5bac:	69 f7       	brne	.-38     	; 0x5b88 <__udivmodsi4_loop>
    5bae:	60 95       	com	r22
    5bb0:	70 95       	com	r23
    5bb2:	80 95       	com	r24
    5bb4:	90 95       	com	r25
    5bb6:	9b 01       	movw	r18, r22
    5bb8:	ac 01       	movw	r20, r24
    5bba:	bd 01       	movw	r22, r26
    5bbc:	cf 01       	movw	r24, r30
    5bbe:	08 95       	ret

00005bc0 <__divmodsi4>:
    5bc0:	05 2e       	mov	r0, r21
    5bc2:	97 fb       	bst	r25, 7
    5bc4:	1e f4       	brtc	.+6      	; 0x5bcc <__divmodsi4+0xc>
    5bc6:	00 94       	com	r0
    5bc8:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <__negsi2>
    5bcc:	57 fd       	sbrc	r21, 7
    5bce:	07 d0       	rcall	.+14     	; 0x5bde <__divmodsi4_neg2>
    5bd0:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__udivmodsi4>
    5bd4:	07 fc       	sbrc	r0, 7
    5bd6:	03 d0       	rcall	.+6      	; 0x5bde <__divmodsi4_neg2>
    5bd8:	4e f4       	brtc	.+18     	; 0x5bec <__divmodsi4_exit>
    5bda:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__negsi2>

00005bde <__divmodsi4_neg2>:
    5bde:	50 95       	com	r21
    5be0:	40 95       	com	r20
    5be2:	30 95       	com	r19
    5be4:	21 95       	neg	r18
    5be6:	3f 4f       	sbci	r19, 0xFF	; 255
    5be8:	4f 4f       	sbci	r20, 0xFF	; 255
    5bea:	5f 4f       	sbci	r21, 0xFF	; 255

00005bec <__divmodsi4_exit>:
    5bec:	08 95       	ret

00005bee <__negsi2>:
    5bee:	90 95       	com	r25
    5bf0:	80 95       	com	r24
    5bf2:	70 95       	com	r23
    5bf4:	61 95       	neg	r22
    5bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfc:	08 95       	ret

00005bfe <__tablejump2__>:
    5bfe:	ee 0f       	add	r30, r30
    5c00:	ff 1f       	adc	r31, r31
    5c02:	05 90       	lpm	r0, Z+
    5c04:	f4 91       	lpm	r31, Z
    5c06:	e0 2d       	mov	r30, r0
    5c08:	09 94       	ijmp

00005c0a <__ashrdi3>:
    5c0a:	97 fb       	bst	r25, 7
    5c0c:	10 f8       	bld	r1, 0

00005c0e <__lshrdi3>:
    5c0e:	16 94       	lsr	r1
    5c10:	00 08       	sbc	r0, r0
    5c12:	0f 93       	push	r16
    5c14:	08 30       	cpi	r16, 0x08	; 8
    5c16:	98 f0       	brcs	.+38     	; 0x5c3e <__lshrdi3+0x30>
    5c18:	08 50       	subi	r16, 0x08	; 8
    5c1a:	23 2f       	mov	r18, r19
    5c1c:	34 2f       	mov	r19, r20
    5c1e:	45 2f       	mov	r20, r21
    5c20:	56 2f       	mov	r21, r22
    5c22:	67 2f       	mov	r22, r23
    5c24:	78 2f       	mov	r23, r24
    5c26:	89 2f       	mov	r24, r25
    5c28:	90 2d       	mov	r25, r0
    5c2a:	f4 cf       	rjmp	.-24     	; 0x5c14 <__lshrdi3+0x6>
    5c2c:	05 94       	asr	r0
    5c2e:	97 95       	ror	r25
    5c30:	87 95       	ror	r24
    5c32:	77 95       	ror	r23
    5c34:	67 95       	ror	r22
    5c36:	57 95       	ror	r21
    5c38:	47 95       	ror	r20
    5c3a:	37 95       	ror	r19
    5c3c:	27 95       	ror	r18
    5c3e:	0a 95       	dec	r16
    5c40:	aa f7       	brpl	.-22     	; 0x5c2c <__lshrdi3+0x1e>
    5c42:	0f 91       	pop	r16
    5c44:	08 95       	ret

00005c46 <__udivmodhi4>:
    5c46:	aa 1b       	sub	r26, r26
    5c48:	bb 1b       	sub	r27, r27
    5c4a:	51 e1       	ldi	r21, 0x11	; 17
    5c4c:	07 c0       	rjmp	.+14     	; 0x5c5c <__udivmodhi4_ep>

00005c4e <__udivmodhi4_loop>:
    5c4e:	aa 1f       	adc	r26, r26
    5c50:	bb 1f       	adc	r27, r27
    5c52:	a6 17       	cp	r26, r22
    5c54:	b7 07       	cpc	r27, r23
    5c56:	10 f0       	brcs	.+4      	; 0x5c5c <__udivmodhi4_ep>
    5c58:	a6 1b       	sub	r26, r22
    5c5a:	b7 0b       	sbc	r27, r23

00005c5c <__udivmodhi4_ep>:
    5c5c:	88 1f       	adc	r24, r24
    5c5e:	99 1f       	adc	r25, r25
    5c60:	5a 95       	dec	r21
    5c62:	a9 f7       	brne	.-22     	; 0x5c4e <__udivmodhi4_loop>
    5c64:	80 95       	com	r24
    5c66:	90 95       	com	r25
    5c68:	bc 01       	movw	r22, r24
    5c6a:	cd 01       	movw	r24, r26
    5c6c:	08 95       	ret

00005c6e <malloc>:
    5c6e:	0f 93       	push	r16
    5c70:	1f 93       	push	r17
    5c72:	cf 93       	push	r28
    5c74:	df 93       	push	r29
    5c76:	82 30       	cpi	r24, 0x02	; 2
    5c78:	91 05       	cpc	r25, r1
    5c7a:	10 f4       	brcc	.+4      	; 0x5c80 <malloc+0x12>
    5c7c:	82 e0       	ldi	r24, 0x02	; 2
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	e0 91 c2 08 	lds	r30, 0x08C2	; 0x8008c2 <__flp>
    5c84:	f0 91 c3 08 	lds	r31, 0x08C3	; 0x8008c3 <__flp+0x1>
    5c88:	20 e0       	ldi	r18, 0x00	; 0
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	a0 e0       	ldi	r26, 0x00	; 0
    5c8e:	b0 e0       	ldi	r27, 0x00	; 0
    5c90:	30 97       	sbiw	r30, 0x00	; 0
    5c92:	19 f1       	breq	.+70     	; 0x5cda <malloc+0x6c>
    5c94:	40 81       	ld	r20, Z
    5c96:	51 81       	ldd	r21, Z+1	; 0x01
    5c98:	02 81       	ldd	r16, Z+2	; 0x02
    5c9a:	13 81       	ldd	r17, Z+3	; 0x03
    5c9c:	48 17       	cp	r20, r24
    5c9e:	59 07       	cpc	r21, r25
    5ca0:	c8 f0       	brcs	.+50     	; 0x5cd4 <malloc+0x66>
    5ca2:	84 17       	cp	r24, r20
    5ca4:	95 07       	cpc	r25, r21
    5ca6:	69 f4       	brne	.+26     	; 0x5cc2 <malloc+0x54>
    5ca8:	10 97       	sbiw	r26, 0x00	; 0
    5caa:	31 f0       	breq	.+12     	; 0x5cb8 <malloc+0x4a>
    5cac:	12 96       	adiw	r26, 0x02	; 2
    5cae:	0c 93       	st	X, r16
    5cb0:	12 97       	sbiw	r26, 0x02	; 2
    5cb2:	13 96       	adiw	r26, 0x03	; 3
    5cb4:	1c 93       	st	X, r17
    5cb6:	27 c0       	rjmp	.+78     	; 0x5d06 <malloc+0x98>
    5cb8:	00 93 c2 08 	sts	0x08C2, r16	; 0x8008c2 <__flp>
    5cbc:	10 93 c3 08 	sts	0x08C3, r17	; 0x8008c3 <__flp+0x1>
    5cc0:	22 c0       	rjmp	.+68     	; 0x5d06 <malloc+0x98>
    5cc2:	21 15       	cp	r18, r1
    5cc4:	31 05       	cpc	r19, r1
    5cc6:	19 f0       	breq	.+6      	; 0x5cce <malloc+0x60>
    5cc8:	42 17       	cp	r20, r18
    5cca:	53 07       	cpc	r21, r19
    5ccc:	18 f4       	brcc	.+6      	; 0x5cd4 <malloc+0x66>
    5cce:	9a 01       	movw	r18, r20
    5cd0:	bd 01       	movw	r22, r26
    5cd2:	ef 01       	movw	r28, r30
    5cd4:	df 01       	movw	r26, r30
    5cd6:	f8 01       	movw	r30, r16
    5cd8:	db cf       	rjmp	.-74     	; 0x5c90 <malloc+0x22>
    5cda:	21 15       	cp	r18, r1
    5cdc:	31 05       	cpc	r19, r1
    5cde:	f9 f0       	breq	.+62     	; 0x5d1e <malloc+0xb0>
    5ce0:	28 1b       	sub	r18, r24
    5ce2:	39 0b       	sbc	r19, r25
    5ce4:	24 30       	cpi	r18, 0x04	; 4
    5ce6:	31 05       	cpc	r19, r1
    5ce8:	80 f4       	brcc	.+32     	; 0x5d0a <malloc+0x9c>
    5cea:	8a 81       	ldd	r24, Y+2	; 0x02
    5cec:	9b 81       	ldd	r25, Y+3	; 0x03
    5cee:	61 15       	cp	r22, r1
    5cf0:	71 05       	cpc	r23, r1
    5cf2:	21 f0       	breq	.+8      	; 0x5cfc <malloc+0x8e>
    5cf4:	fb 01       	movw	r30, r22
    5cf6:	93 83       	std	Z+3, r25	; 0x03
    5cf8:	82 83       	std	Z+2, r24	; 0x02
    5cfa:	04 c0       	rjmp	.+8      	; 0x5d04 <malloc+0x96>
    5cfc:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <__flp+0x1>
    5d00:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <__flp>
    5d04:	fe 01       	movw	r30, r28
    5d06:	32 96       	adiw	r30, 0x02	; 2
    5d08:	44 c0       	rjmp	.+136    	; 0x5d92 <malloc+0x124>
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	e2 0f       	add	r30, r18
    5d0e:	f3 1f       	adc	r31, r19
    5d10:	81 93       	st	Z+, r24
    5d12:	91 93       	st	Z+, r25
    5d14:	22 50       	subi	r18, 0x02	; 2
    5d16:	31 09       	sbc	r19, r1
    5d18:	39 83       	std	Y+1, r19	; 0x01
    5d1a:	28 83       	st	Y, r18
    5d1c:	3a c0       	rjmp	.+116    	; 0x5d92 <malloc+0x124>
    5d1e:	20 91 c0 08 	lds	r18, 0x08C0	; 0x8008c0 <__brkval>
    5d22:	30 91 c1 08 	lds	r19, 0x08C1	; 0x8008c1 <__brkval+0x1>
    5d26:	23 2b       	or	r18, r19
    5d28:	41 f4       	brne	.+16     	; 0x5d3a <malloc+0xcc>
    5d2a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_start>
    5d2e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_start+0x1>
    5d32:	30 93 c1 08 	sts	0x08C1, r19	; 0x8008c1 <__brkval+0x1>
    5d36:	20 93 c0 08 	sts	0x08C0, r18	; 0x8008c0 <__brkval>
    5d3a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <__malloc_heap_end>
    5d3e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    5d42:	21 15       	cp	r18, r1
    5d44:	31 05       	cpc	r19, r1
    5d46:	41 f4       	brne	.+16     	; 0x5d58 <malloc+0xea>
    5d48:	2d b7       	in	r18, 0x3d	; 61
    5d4a:	3e b7       	in	r19, 0x3e	; 62
    5d4c:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    5d50:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    5d54:	24 1b       	sub	r18, r20
    5d56:	35 0b       	sbc	r19, r21
    5d58:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <__brkval>
    5d5c:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <__brkval+0x1>
    5d60:	e2 17       	cp	r30, r18
    5d62:	f3 07       	cpc	r31, r19
    5d64:	a0 f4       	brcc	.+40     	; 0x5d8e <malloc+0x120>
    5d66:	2e 1b       	sub	r18, r30
    5d68:	3f 0b       	sbc	r19, r31
    5d6a:	28 17       	cp	r18, r24
    5d6c:	39 07       	cpc	r19, r25
    5d6e:	78 f0       	brcs	.+30     	; 0x5d8e <malloc+0x120>
    5d70:	ac 01       	movw	r20, r24
    5d72:	4e 5f       	subi	r20, 0xFE	; 254
    5d74:	5f 4f       	sbci	r21, 0xFF	; 255
    5d76:	24 17       	cp	r18, r20
    5d78:	35 07       	cpc	r19, r21
    5d7a:	48 f0       	brcs	.+18     	; 0x5d8e <malloc+0x120>
    5d7c:	4e 0f       	add	r20, r30
    5d7e:	5f 1f       	adc	r21, r31
    5d80:	50 93 c1 08 	sts	0x08C1, r21	; 0x8008c1 <__brkval+0x1>
    5d84:	40 93 c0 08 	sts	0x08C0, r20	; 0x8008c0 <__brkval>
    5d88:	81 93       	st	Z+, r24
    5d8a:	91 93       	st	Z+, r25
    5d8c:	02 c0       	rjmp	.+4      	; 0x5d92 <malloc+0x124>
    5d8e:	e0 e0       	ldi	r30, 0x00	; 0
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	cf 01       	movw	r24, r30
    5d94:	df 91       	pop	r29
    5d96:	cf 91       	pop	r28
    5d98:	1f 91       	pop	r17
    5d9a:	0f 91       	pop	r16
    5d9c:	08 95       	ret

00005d9e <free>:
    5d9e:	cf 93       	push	r28
    5da0:	df 93       	push	r29
    5da2:	00 97       	sbiw	r24, 0x00	; 0
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <free+0xa>
    5da6:	81 c0       	rjmp	.+258    	; 0x5eaa <free+0x10c>
    5da8:	fc 01       	movw	r30, r24
    5daa:	32 97       	sbiw	r30, 0x02	; 2
    5dac:	13 82       	std	Z+3, r1	; 0x03
    5dae:	12 82       	std	Z+2, r1	; 0x02
    5db0:	a0 91 c2 08 	lds	r26, 0x08C2	; 0x8008c2 <__flp>
    5db4:	b0 91 c3 08 	lds	r27, 0x08C3	; 0x8008c3 <__flp+0x1>
    5db8:	10 97       	sbiw	r26, 0x00	; 0
    5dba:	81 f4       	brne	.+32     	; 0x5ddc <free+0x3e>
    5dbc:	20 81       	ld	r18, Z
    5dbe:	31 81       	ldd	r19, Z+1	; 0x01
    5dc0:	82 0f       	add	r24, r18
    5dc2:	93 1f       	adc	r25, r19
    5dc4:	20 91 c0 08 	lds	r18, 0x08C0	; 0x8008c0 <__brkval>
    5dc8:	30 91 c1 08 	lds	r19, 0x08C1	; 0x8008c1 <__brkval+0x1>
    5dcc:	28 17       	cp	r18, r24
    5dce:	39 07       	cpc	r19, r25
    5dd0:	51 f5       	brne	.+84     	; 0x5e26 <free+0x88>
    5dd2:	f0 93 c1 08 	sts	0x08C1, r31	; 0x8008c1 <__brkval+0x1>
    5dd6:	e0 93 c0 08 	sts	0x08C0, r30	; 0x8008c0 <__brkval>
    5dda:	67 c0       	rjmp	.+206    	; 0x5eaa <free+0x10c>
    5ddc:	ed 01       	movw	r28, r26
    5dde:	20 e0       	ldi	r18, 0x00	; 0
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	ce 17       	cp	r28, r30
    5de4:	df 07       	cpc	r29, r31
    5de6:	40 f4       	brcc	.+16     	; 0x5df8 <free+0x5a>
    5de8:	4a 81       	ldd	r20, Y+2	; 0x02
    5dea:	5b 81       	ldd	r21, Y+3	; 0x03
    5dec:	9e 01       	movw	r18, r28
    5dee:	41 15       	cp	r20, r1
    5df0:	51 05       	cpc	r21, r1
    5df2:	f1 f0       	breq	.+60     	; 0x5e30 <free+0x92>
    5df4:	ea 01       	movw	r28, r20
    5df6:	f5 cf       	rjmp	.-22     	; 0x5de2 <free+0x44>
    5df8:	d3 83       	std	Z+3, r29	; 0x03
    5dfa:	c2 83       	std	Z+2, r28	; 0x02
    5dfc:	40 81       	ld	r20, Z
    5dfe:	51 81       	ldd	r21, Z+1	; 0x01
    5e00:	84 0f       	add	r24, r20
    5e02:	95 1f       	adc	r25, r21
    5e04:	c8 17       	cp	r28, r24
    5e06:	d9 07       	cpc	r29, r25
    5e08:	59 f4       	brne	.+22     	; 0x5e20 <free+0x82>
    5e0a:	88 81       	ld	r24, Y
    5e0c:	99 81       	ldd	r25, Y+1	; 0x01
    5e0e:	84 0f       	add	r24, r20
    5e10:	95 1f       	adc	r25, r21
    5e12:	02 96       	adiw	r24, 0x02	; 2
    5e14:	91 83       	std	Z+1, r25	; 0x01
    5e16:	80 83       	st	Z, r24
    5e18:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1c:	93 83       	std	Z+3, r25	; 0x03
    5e1e:	82 83       	std	Z+2, r24	; 0x02
    5e20:	21 15       	cp	r18, r1
    5e22:	31 05       	cpc	r19, r1
    5e24:	29 f4       	brne	.+10     	; 0x5e30 <free+0x92>
    5e26:	f0 93 c3 08 	sts	0x08C3, r31	; 0x8008c3 <__flp+0x1>
    5e2a:	e0 93 c2 08 	sts	0x08C2, r30	; 0x8008c2 <__flp>
    5e2e:	3d c0       	rjmp	.+122    	; 0x5eaa <free+0x10c>
    5e30:	e9 01       	movw	r28, r18
    5e32:	fb 83       	std	Y+3, r31	; 0x03
    5e34:	ea 83       	std	Y+2, r30	; 0x02
    5e36:	49 91       	ld	r20, Y+
    5e38:	59 91       	ld	r21, Y+
    5e3a:	c4 0f       	add	r28, r20
    5e3c:	d5 1f       	adc	r29, r21
    5e3e:	ec 17       	cp	r30, r28
    5e40:	fd 07       	cpc	r31, r29
    5e42:	61 f4       	brne	.+24     	; 0x5e5c <free+0xbe>
    5e44:	80 81       	ld	r24, Z
    5e46:	91 81       	ldd	r25, Z+1	; 0x01
    5e48:	84 0f       	add	r24, r20
    5e4a:	95 1f       	adc	r25, r21
    5e4c:	02 96       	adiw	r24, 0x02	; 2
    5e4e:	e9 01       	movw	r28, r18
    5e50:	99 83       	std	Y+1, r25	; 0x01
    5e52:	88 83       	st	Y, r24
    5e54:	82 81       	ldd	r24, Z+2	; 0x02
    5e56:	93 81       	ldd	r25, Z+3	; 0x03
    5e58:	9b 83       	std	Y+3, r25	; 0x03
    5e5a:	8a 83       	std	Y+2, r24	; 0x02
    5e5c:	e0 e0       	ldi	r30, 0x00	; 0
    5e5e:	f0 e0       	ldi	r31, 0x00	; 0
    5e60:	12 96       	adiw	r26, 0x02	; 2
    5e62:	8d 91       	ld	r24, X+
    5e64:	9c 91       	ld	r25, X
    5e66:	13 97       	sbiw	r26, 0x03	; 3
    5e68:	00 97       	sbiw	r24, 0x00	; 0
    5e6a:	19 f0       	breq	.+6      	; 0x5e72 <free+0xd4>
    5e6c:	fd 01       	movw	r30, r26
    5e6e:	dc 01       	movw	r26, r24
    5e70:	f7 cf       	rjmp	.-18     	; 0x5e60 <free+0xc2>
    5e72:	8d 91       	ld	r24, X+
    5e74:	9c 91       	ld	r25, X
    5e76:	11 97       	sbiw	r26, 0x01	; 1
    5e78:	9d 01       	movw	r18, r26
    5e7a:	2e 5f       	subi	r18, 0xFE	; 254
    5e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7e:	82 0f       	add	r24, r18
    5e80:	93 1f       	adc	r25, r19
    5e82:	20 91 c0 08 	lds	r18, 0x08C0	; 0x8008c0 <__brkval>
    5e86:	30 91 c1 08 	lds	r19, 0x08C1	; 0x8008c1 <__brkval+0x1>
    5e8a:	28 17       	cp	r18, r24
    5e8c:	39 07       	cpc	r19, r25
    5e8e:	69 f4       	brne	.+26     	; 0x5eaa <free+0x10c>
    5e90:	30 97       	sbiw	r30, 0x00	; 0
    5e92:	29 f4       	brne	.+10     	; 0x5e9e <free+0x100>
    5e94:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__flp+0x1>
    5e98:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__flp>
    5e9c:	02 c0       	rjmp	.+4      	; 0x5ea2 <free+0x104>
    5e9e:	13 82       	std	Z+3, r1	; 0x03
    5ea0:	12 82       	std	Z+2, r1	; 0x02
    5ea2:	b0 93 c1 08 	sts	0x08C1, r27	; 0x8008c1 <__brkval+0x1>
    5ea6:	a0 93 c0 08 	sts	0x08C0, r26	; 0x8008c0 <__brkval>
    5eaa:	df 91       	pop	r29
    5eac:	cf 91       	pop	r28
    5eae:	08 95       	ret

00005eb0 <abort>:
    5eb0:	81 e0       	ldi	r24, 0x01	; 1
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
    5eb4:	f8 94       	cli
    5eb6:	0c 94 ef 31 	jmp	0x63de	; 0x63de <__do_global_dtors>

00005eba <atof>:
    5eba:	66 27       	eor	r22, r22
    5ebc:	77 27       	eor	r23, r23
    5ebe:	0c 94 2c 30 	jmp	0x6058	; 0x6058 <strtod>

00005ec2 <atoi>:
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	88 27       	eor	r24, r24
    5ec6:	99 27       	eor	r25, r25
    5ec8:	e8 94       	clt
    5eca:	21 91       	ld	r18, Z+
    5ecc:	20 32       	cpi	r18, 0x20	; 32
    5ece:	e9 f3       	breq	.-6      	; 0x5eca <atoi+0x8>
    5ed0:	29 30       	cpi	r18, 0x09	; 9
    5ed2:	10 f0       	brcs	.+4      	; 0x5ed8 <atoi+0x16>
    5ed4:	2e 30       	cpi	r18, 0x0E	; 14
    5ed6:	c8 f3       	brcs	.-14     	; 0x5eca <atoi+0x8>
    5ed8:	2b 32       	cpi	r18, 0x2B	; 43
    5eda:	41 f0       	breq	.+16     	; 0x5eec <atoi+0x2a>
    5edc:	2d 32       	cpi	r18, 0x2D	; 45
    5ede:	39 f4       	brne	.+14     	; 0x5eee <atoi+0x2c>
    5ee0:	68 94       	set
    5ee2:	04 c0       	rjmp	.+8      	; 0x5eec <atoi+0x2a>
    5ee4:	0e 94 24 30 	call	0x6048	; 0x6048 <__mulhi_const_10>
    5ee8:	82 0f       	add	r24, r18
    5eea:	91 1d       	adc	r25, r1
    5eec:	21 91       	ld	r18, Z+
    5eee:	20 53       	subi	r18, 0x30	; 48
    5ef0:	2a 30       	cpi	r18, 0x0A	; 10
    5ef2:	c0 f3       	brcs	.-16     	; 0x5ee4 <atoi+0x22>
    5ef4:	1e f4       	brtc	.+6      	; 0x5efc <atoi+0x3a>
    5ef6:	90 95       	com	r25
    5ef8:	81 95       	neg	r24
    5efa:	9f 4f       	sbci	r25, 0xFF	; 255
    5efc:	08 95       	ret

00005efe <strcmp_P>:
    5efe:	fb 01       	movw	r30, r22
    5f00:	dc 01       	movw	r26, r24
    5f02:	8d 91       	ld	r24, X+
    5f04:	05 90       	lpm	r0, Z+
    5f06:	80 19       	sub	r24, r0
    5f08:	01 10       	cpse	r0, r1
    5f0a:	d9 f3       	breq	.-10     	; 0x5f02 <strcmp_P+0x4>
    5f0c:	99 0b       	sbc	r25, r25
    5f0e:	08 95       	ret

00005f10 <__strlen_P>:
    5f10:	fc 01       	movw	r30, r24
    5f12:	05 90       	lpm	r0, Z+
    5f14:	00 20       	and	r0, r0
    5f16:	e9 f7       	brne	.-6      	; 0x5f12 <__strlen_P+0x2>
    5f18:	80 95       	com	r24
    5f1a:	90 95       	com	r25
    5f1c:	8e 0f       	add	r24, r30
    5f1e:	9f 1f       	adc	r25, r31
    5f20:	08 95       	ret

00005f22 <strstr_P>:
    5f22:	fb 01       	movw	r30, r22
    5f24:	55 91       	lpm	r21, Z+
    5f26:	55 23       	and	r21, r21
    5f28:	a9 f0       	breq	.+42     	; 0x5f54 <strstr_P+0x32>
    5f2a:	bf 01       	movw	r22, r30
    5f2c:	dc 01       	movw	r26, r24
    5f2e:	4d 91       	ld	r20, X+
    5f30:	45 17       	cp	r20, r21
    5f32:	41 11       	cpse	r20, r1
    5f34:	e1 f7       	brne	.-8      	; 0x5f2e <strstr_P+0xc>
    5f36:	59 f4       	brne	.+22     	; 0x5f4e <strstr_P+0x2c>
    5f38:	cd 01       	movw	r24, r26
    5f3a:	05 90       	lpm	r0, Z+
    5f3c:	00 20       	and	r0, r0
    5f3e:	49 f0       	breq	.+18     	; 0x5f52 <strstr_P+0x30>
    5f40:	4d 91       	ld	r20, X+
    5f42:	40 15       	cp	r20, r0
    5f44:	41 11       	cpse	r20, r1
    5f46:	c9 f3       	breq	.-14     	; 0x5f3a <strstr_P+0x18>
    5f48:	fb 01       	movw	r30, r22
    5f4a:	41 11       	cpse	r20, r1
    5f4c:	ef cf       	rjmp	.-34     	; 0x5f2c <strstr_P+0xa>
    5f4e:	81 e0       	ldi	r24, 0x01	; 1
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	01 97       	sbiw	r24, 0x01	; 1
    5f54:	08 95       	ret

00005f56 <strtok>:
    5f56:	44 ed       	ldi	r20, 0xD4	; 212
    5f58:	57 e0       	ldi	r21, 0x07	; 7
    5f5a:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <strtok_r>
    5f5e:	08 95       	ret

00005f60 <memset>:
    5f60:	dc 01       	movw	r26, r24
    5f62:	01 c0       	rjmp	.+2      	; 0x5f66 <memset+0x6>
    5f64:	6d 93       	st	X+, r22
    5f66:	41 50       	subi	r20, 0x01	; 1
    5f68:	50 40       	sbci	r21, 0x00	; 0
    5f6a:	e0 f7       	brcc	.-8      	; 0x5f64 <memset+0x4>
    5f6c:	08 95       	ret

00005f6e <strchr>:
    5f6e:	fc 01       	movw	r30, r24
    5f70:	81 91       	ld	r24, Z+
    5f72:	86 17       	cp	r24, r22
    5f74:	21 f0       	breq	.+8      	; 0x5f7e <strchr+0x10>
    5f76:	88 23       	and	r24, r24
    5f78:	d9 f7       	brne	.-10     	; 0x5f70 <strchr+0x2>
    5f7a:	99 27       	eor	r25, r25
    5f7c:	08 95       	ret
    5f7e:	31 97       	sbiw	r30, 0x01	; 1
    5f80:	cf 01       	movw	r24, r30
    5f82:	08 95       	ret

00005f84 <strcmp>:
    5f84:	fb 01       	movw	r30, r22
    5f86:	dc 01       	movw	r26, r24
    5f88:	8d 91       	ld	r24, X+
    5f8a:	01 90       	ld	r0, Z+
    5f8c:	80 19       	sub	r24, r0
    5f8e:	01 10       	cpse	r0, r1
    5f90:	d9 f3       	breq	.-10     	; 0x5f88 <strcmp+0x4>
    5f92:	99 0b       	sbc	r25, r25
    5f94:	08 95       	ret

00005f96 <strlen>:
    5f96:	fc 01       	movw	r30, r24
    5f98:	01 90       	ld	r0, Z+
    5f9a:	00 20       	and	r0, r0
    5f9c:	e9 f7       	brne	.-6      	; 0x5f98 <strlen+0x2>
    5f9e:	80 95       	com	r24
    5fa0:	90 95       	com	r25
    5fa2:	8e 0f       	add	r24, r30
    5fa4:	9f 1f       	adc	r25, r31
    5fa6:	08 95       	ret

00005fa8 <strncpy>:
    5fa8:	fb 01       	movw	r30, r22
    5faa:	dc 01       	movw	r26, r24
    5fac:	41 50       	subi	r20, 0x01	; 1
    5fae:	50 40       	sbci	r21, 0x00	; 0
    5fb0:	48 f0       	brcs	.+18     	; 0x5fc4 <strncpy+0x1c>
    5fb2:	01 90       	ld	r0, Z+
    5fb4:	0d 92       	st	X+, r0
    5fb6:	00 20       	and	r0, r0
    5fb8:	c9 f7       	brne	.-14     	; 0x5fac <strncpy+0x4>
    5fba:	01 c0       	rjmp	.+2      	; 0x5fbe <strncpy+0x16>
    5fbc:	1d 92       	st	X+, r1
    5fbe:	41 50       	subi	r20, 0x01	; 1
    5fc0:	50 40       	sbci	r21, 0x00	; 0
    5fc2:	e0 f7       	brcc	.-8      	; 0x5fbc <strncpy+0x14>
    5fc4:	08 95       	ret

00005fc6 <strstr>:
    5fc6:	fb 01       	movw	r30, r22
    5fc8:	51 91       	ld	r21, Z+
    5fca:	55 23       	and	r21, r21
    5fcc:	a9 f0       	breq	.+42     	; 0x5ff8 <strstr+0x32>
    5fce:	bf 01       	movw	r22, r30
    5fd0:	dc 01       	movw	r26, r24
    5fd2:	4d 91       	ld	r20, X+
    5fd4:	45 17       	cp	r20, r21
    5fd6:	41 11       	cpse	r20, r1
    5fd8:	e1 f7       	brne	.-8      	; 0x5fd2 <strstr+0xc>
    5fda:	59 f4       	brne	.+22     	; 0x5ff2 <strstr+0x2c>
    5fdc:	cd 01       	movw	r24, r26
    5fde:	01 90       	ld	r0, Z+
    5fe0:	00 20       	and	r0, r0
    5fe2:	49 f0       	breq	.+18     	; 0x5ff6 <strstr+0x30>
    5fe4:	4d 91       	ld	r20, X+
    5fe6:	40 15       	cp	r20, r0
    5fe8:	41 11       	cpse	r20, r1
    5fea:	c9 f3       	breq	.-14     	; 0x5fde <strstr+0x18>
    5fec:	fb 01       	movw	r30, r22
    5fee:	41 11       	cpse	r20, r1
    5ff0:	ef cf       	rjmp	.-34     	; 0x5fd0 <strstr+0xa>
    5ff2:	81 e0       	ldi	r24, 0x01	; 1
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	01 97       	sbiw	r24, 0x01	; 1
    5ff8:	08 95       	ret

00005ffa <strtok_r>:
    5ffa:	fa 01       	movw	r30, r20
    5ffc:	a1 91       	ld	r26, Z+
    5ffe:	b0 81       	ld	r27, Z
    6000:	00 97       	sbiw	r24, 0x00	; 0
    6002:	19 f4       	brne	.+6      	; 0x600a <strtok_r+0x10>
    6004:	10 97       	sbiw	r26, 0x00	; 0
    6006:	e1 f0       	breq	.+56     	; 0x6040 <strtok_r+0x46>
    6008:	cd 01       	movw	r24, r26
    600a:	dc 01       	movw	r26, r24
    600c:	cd 01       	movw	r24, r26
    600e:	0d 90       	ld	r0, X+
    6010:	00 20       	and	r0, r0
    6012:	11 f4       	brne	.+4      	; 0x6018 <strtok_r+0x1e>
    6014:	c0 01       	movw	r24, r0
    6016:	13 c0       	rjmp	.+38     	; 0x603e <strtok_r+0x44>
    6018:	fb 01       	movw	r30, r22
    601a:	21 91       	ld	r18, Z+
    601c:	22 23       	and	r18, r18
    601e:	19 f0       	breq	.+6      	; 0x6026 <strtok_r+0x2c>
    6020:	20 15       	cp	r18, r0
    6022:	d9 f7       	brne	.-10     	; 0x601a <strtok_r+0x20>
    6024:	f3 cf       	rjmp	.-26     	; 0x600c <strtok_r+0x12>
    6026:	fb 01       	movw	r30, r22
    6028:	21 91       	ld	r18, Z+
    602a:	20 15       	cp	r18, r0
    602c:	19 f4       	brne	.+6      	; 0x6034 <strtok_r+0x3a>
    602e:	1e 92       	st	-X, r1
    6030:	11 96       	adiw	r26, 0x01	; 1
    6032:	06 c0       	rjmp	.+12     	; 0x6040 <strtok_r+0x46>
    6034:	22 23       	and	r18, r18
    6036:	c1 f7       	brne	.-16     	; 0x6028 <strtok_r+0x2e>
    6038:	0d 90       	ld	r0, X+
    603a:	00 20       	and	r0, r0
    603c:	a1 f7       	brne	.-24     	; 0x6026 <strtok_r+0x2c>
    603e:	d0 01       	movw	r26, r0
    6040:	fa 01       	movw	r30, r20
    6042:	a1 93       	st	Z+, r26
    6044:	b0 83       	st	Z, r27
    6046:	08 95       	ret

00006048 <__mulhi_const_10>:
    6048:	7a e0       	ldi	r23, 0x0A	; 10
    604a:	97 9f       	mul	r25, r23
    604c:	90 2d       	mov	r25, r0
    604e:	87 9f       	mul	r24, r23
    6050:	80 2d       	mov	r24, r0
    6052:	91 0d       	add	r25, r1
    6054:	11 24       	eor	r1, r1
    6056:	08 95       	ret

00006058 <strtod>:
    6058:	a0 e0       	ldi	r26, 0x00	; 0
    605a:	b0 e0       	ldi	r27, 0x00	; 0
    605c:	e2 e3       	ldi	r30, 0x32	; 50
    605e:	f0 e3       	ldi	r31, 0x30	; 48
    6060:	0c 94 af 31 	jmp	0x635e	; 0x635e <__prologue_saves__+0xc>
    6064:	ec 01       	movw	r28, r24
    6066:	6b 01       	movw	r12, r22
    6068:	61 15       	cp	r22, r1
    606a:	71 05       	cpc	r23, r1
    606c:	19 f0       	breq	.+6      	; 0x6074 <strtod+0x1c>
    606e:	fb 01       	movw	r30, r22
    6070:	91 83       	std	Z+1, r25	; 0x01
    6072:	80 83       	st	Z, r24
    6074:	7e 01       	movw	r14, r28
    6076:	ff ef       	ldi	r31, 0xFF	; 255
    6078:	ef 1a       	sub	r14, r31
    607a:	ff 0a       	sbc	r15, r31
    607c:	08 81       	ld	r16, Y
    607e:	80 2f       	mov	r24, r16
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <isspace>
    6086:	89 2b       	or	r24, r25
    6088:	11 f0       	breq	.+4      	; 0x608e <strtod+0x36>
    608a:	e7 01       	movw	r28, r14
    608c:	f3 cf       	rjmp	.-26     	; 0x6074 <strtod+0x1c>
    608e:	0d 32       	cpi	r16, 0x2D	; 45
    6090:	39 f4       	brne	.+14     	; 0x60a0 <strtod+0x48>
    6092:	7e 01       	movw	r14, r28
    6094:	82 e0       	ldi	r24, 0x02	; 2
    6096:	e8 0e       	add	r14, r24
    6098:	f1 1c       	adc	r15, r1
    609a:	09 81       	ldd	r16, Y+1	; 0x01
    609c:	11 e0       	ldi	r17, 0x01	; 1
    609e:	08 c0       	rjmp	.+16     	; 0x60b0 <strtod+0x58>
    60a0:	0b 32       	cpi	r16, 0x2B	; 43
    60a2:	29 f4       	brne	.+10     	; 0x60ae <strtod+0x56>
    60a4:	7e 01       	movw	r14, r28
    60a6:	92 e0       	ldi	r25, 0x02	; 2
    60a8:	e9 0e       	add	r14, r25
    60aa:	f1 1c       	adc	r15, r1
    60ac:	09 81       	ldd	r16, Y+1	; 0x01
    60ae:	10 e0       	ldi	r17, 0x00	; 0
    60b0:	e7 01       	movw	r28, r14
    60b2:	21 97       	sbiw	r28, 0x01	; 1
    60b4:	43 e0       	ldi	r20, 0x03	; 3
    60b6:	50 e0       	ldi	r21, 0x00	; 0
    60b8:	62 e6       	ldi	r22, 0x62	; 98
    60ba:	72 e0       	ldi	r23, 0x02	; 2
    60bc:	ce 01       	movw	r24, r28
    60be:	0e 94 83 31 	call	0x6306	; 0x6306 <strncasecmp_P>
    60c2:	89 2b       	or	r24, r25
    60c4:	c1 f4       	brne	.+48     	; 0x60f6 <strtod+0x9e>
    60c6:	23 96       	adiw	r28, 0x03	; 3
    60c8:	45 e0       	ldi	r20, 0x05	; 5
    60ca:	50 e0       	ldi	r21, 0x00	; 0
    60cc:	6d e5       	ldi	r22, 0x5D	; 93
    60ce:	72 e0       	ldi	r23, 0x02	; 2
    60d0:	ce 01       	movw	r24, r28
    60d2:	0e 94 83 31 	call	0x6306	; 0x6306 <strncasecmp_P>
    60d6:	89 2b       	or	r24, r25
    60d8:	09 f4       	brne	.+2      	; 0x60dc <strtod+0x84>
    60da:	25 96       	adiw	r28, 0x05	; 5
    60dc:	c1 14       	cp	r12, r1
    60de:	d1 04       	cpc	r13, r1
    60e0:	19 f0       	breq	.+6      	; 0x60e8 <strtod+0x90>
    60e2:	f6 01       	movw	r30, r12
    60e4:	d1 83       	std	Z+1, r29	; 0x01
    60e6:	c0 83       	st	Z, r28
    60e8:	11 11       	cpse	r17, r1
    60ea:	f6 c0       	rjmp	.+492    	; 0x62d8 <strtod+0x280>
    60ec:	60 e0       	ldi	r22, 0x00	; 0
    60ee:	70 e0       	ldi	r23, 0x00	; 0
    60f0:	80 e8       	ldi	r24, 0x80	; 128
    60f2:	9f e7       	ldi	r25, 0x7F	; 127
    60f4:	fa c0       	rjmp	.+500    	; 0x62ea <strtod+0x292>
    60f6:	43 e0       	ldi	r20, 0x03	; 3
    60f8:	50 e0       	ldi	r21, 0x00	; 0
    60fa:	6a e5       	ldi	r22, 0x5A	; 90
    60fc:	72 e0       	ldi	r23, 0x02	; 2
    60fe:	ce 01       	movw	r24, r28
    6100:	0e 94 83 31 	call	0x6306	; 0x6306 <strncasecmp_P>
    6104:	89 2b       	or	r24, r25
    6106:	59 f4       	brne	.+22     	; 0x611e <strtod+0xc6>
    6108:	c1 14       	cp	r12, r1
    610a:	d1 04       	cpc	r13, r1
    610c:	09 f4       	brne	.+2      	; 0x6110 <strtod+0xb8>
    610e:	e9 c0       	rjmp	.+466    	; 0x62e2 <strtod+0x28a>
    6110:	f2 e0       	ldi	r31, 0x02	; 2
    6112:	ef 0e       	add	r14, r31
    6114:	f1 1c       	adc	r15, r1
    6116:	f6 01       	movw	r30, r12
    6118:	f1 82       	std	Z+1, r15	; 0x01
    611a:	e0 82       	st	Z, r14
    611c:	e2 c0       	rjmp	.+452    	; 0x62e2 <strtod+0x28a>
    611e:	20 e0       	ldi	r18, 0x00	; 0
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	a9 01       	movw	r20, r18
    6124:	c0 e0       	ldi	r28, 0x00	; 0
    6126:	d0 e0       	ldi	r29, 0x00	; 0
    6128:	f7 01       	movw	r30, r14
    612a:	80 ed       	ldi	r24, 0xD0	; 208
    612c:	a8 2e       	mov	r10, r24
    612e:	a0 0e       	add	r10, r16
    6130:	89 e0       	ldi	r24, 0x09	; 9
    6132:	8a 15       	cp	r24, r10
    6134:	30 f1       	brcs	.+76     	; 0x6182 <strtod+0x12a>
    6136:	91 2f       	mov	r25, r17
    6138:	92 60       	ori	r25, 0x02	; 2
    613a:	b9 2e       	mov	r11, r25
    613c:	81 2f       	mov	r24, r17
    613e:	88 70       	andi	r24, 0x08	; 8
    6140:	12 ff       	sbrs	r17, 2
    6142:	04 c0       	rjmp	.+8      	; 0x614c <strtod+0xf4>
    6144:	81 11       	cpse	r24, r1
    6146:	24 c0       	rjmp	.+72     	; 0x6190 <strtod+0x138>
    6148:	21 96       	adiw	r28, 0x01	; 1
    614a:	22 c0       	rjmp	.+68     	; 0x6190 <strtod+0x138>
    614c:	81 11       	cpse	r24, r1
    614e:	21 97       	sbiw	r28, 0x01	; 1
    6150:	a5 e0       	ldi	r26, 0x05	; 5
    6152:	b0 e0       	ldi	r27, 0x00	; 0
    6154:	0e 94 9e 31 	call	0x633c	; 0x633c <__muluhisi3>
    6158:	dc 01       	movw	r26, r24
    615a:	cb 01       	movw	r24, r22
    615c:	88 0f       	add	r24, r24
    615e:	99 1f       	adc	r25, r25
    6160:	aa 1f       	adc	r26, r26
    6162:	bb 1f       	adc	r27, r27
    6164:	9c 01       	movw	r18, r24
    6166:	ad 01       	movw	r20, r26
    6168:	2a 0d       	add	r18, r10
    616a:	31 1d       	adc	r19, r1
    616c:	41 1d       	adc	r20, r1
    616e:	51 1d       	adc	r21, r1
    6170:	28 39       	cpi	r18, 0x98	; 152
    6172:	89 e9       	ldi	r24, 0x99	; 153
    6174:	38 07       	cpc	r19, r24
    6176:	48 07       	cpc	r20, r24
    6178:	89 e1       	ldi	r24, 0x19	; 25
    617a:	58 07       	cpc	r21, r24
    617c:	48 f0       	brcs	.+18     	; 0x6190 <strtod+0x138>
    617e:	16 60       	ori	r17, 0x06	; 6
    6180:	06 c0       	rjmp	.+12     	; 0x618e <strtod+0x136>
    6182:	9e ef       	ldi	r25, 0xFE	; 254
    6184:	a9 12       	cpse	r10, r25
    6186:	0a c0       	rjmp	.+20     	; 0x619c <strtod+0x144>
    6188:	13 fd       	sbrc	r17, 3
    618a:	40 c0       	rjmp	.+128    	; 0x620c <strtod+0x1b4>
    618c:	18 60       	ori	r17, 0x08	; 8
    618e:	b1 2e       	mov	r11, r17
    6190:	8f ef       	ldi	r24, 0xFF	; 255
    6192:	e8 1a       	sub	r14, r24
    6194:	f8 0a       	sbc	r15, r24
    6196:	00 81       	ld	r16, Z
    6198:	1b 2d       	mov	r17, r11
    619a:	c6 cf       	rjmp	.-116    	; 0x6128 <strtod+0xd0>
    619c:	80 2f       	mov	r24, r16
    619e:	8f 7d       	andi	r24, 0xDF	; 223
    61a0:	85 34       	cpi	r24, 0x45	; 69
    61a2:	a1 f5       	brne	.+104    	; 0x620c <strtod+0x1b4>
    61a4:	80 81       	ld	r24, Z
    61a6:	8d 32       	cpi	r24, 0x2D	; 45
    61a8:	11 f4       	brne	.+4      	; 0x61ae <strtod+0x156>
    61aa:	10 61       	ori	r17, 0x10	; 16
    61ac:	06 c0       	rjmp	.+12     	; 0x61ba <strtod+0x162>
    61ae:	8b 32       	cpi	r24, 0x2B	; 43
    61b0:	21 f0       	breq	.+8      	; 0x61ba <strtod+0x162>
    61b2:	31 96       	adiw	r30, 0x01	; 1
    61b4:	61 e0       	ldi	r22, 0x01	; 1
    61b6:	70 e0       	ldi	r23, 0x00	; 0
    61b8:	04 c0       	rjmp	.+8      	; 0x61c2 <strtod+0x16a>
    61ba:	81 81       	ldd	r24, Z+1	; 0x01
    61bc:	32 96       	adiw	r30, 0x02	; 2
    61be:	62 e0       	ldi	r22, 0x02	; 2
    61c0:	70 e0       	ldi	r23, 0x00	; 0
    61c2:	80 53       	subi	r24, 0x30	; 48
    61c4:	8a 30       	cpi	r24, 0x0A	; 10
    61c6:	18 f0       	brcs	.+6      	; 0x61ce <strtod+0x176>
    61c8:	e6 1b       	sub	r30, r22
    61ca:	f7 0b       	sbc	r31, r23
    61cc:	1f c0       	rjmp	.+62     	; 0x620c <strtod+0x1b4>
    61ce:	60 e0       	ldi	r22, 0x00	; 0
    61d0:	70 e0       	ldi	r23, 0x00	; 0
    61d2:	60 38       	cpi	r22, 0x80	; 128
    61d4:	9c e0       	ldi	r25, 0x0C	; 12
    61d6:	79 07       	cpc	r23, r25
    61d8:	5c f4       	brge	.+22     	; 0x61f0 <strtod+0x198>
    61da:	db 01       	movw	r26, r22
    61dc:	aa 0f       	add	r26, r26
    61de:	bb 1f       	adc	r27, r27
    61e0:	aa 0f       	add	r26, r26
    61e2:	bb 1f       	adc	r27, r27
    61e4:	6a 0f       	add	r22, r26
    61e6:	7b 1f       	adc	r23, r27
    61e8:	66 0f       	add	r22, r22
    61ea:	77 1f       	adc	r23, r23
    61ec:	68 0f       	add	r22, r24
    61ee:	71 1d       	adc	r23, r1
    61f0:	31 96       	adiw	r30, 0x01	; 1
    61f2:	df 01       	movw	r26, r30
    61f4:	11 97       	sbiw	r26, 0x01	; 1
    61f6:	8c 91       	ld	r24, X
    61f8:	80 53       	subi	r24, 0x30	; 48
    61fa:	8a 30       	cpi	r24, 0x0A	; 10
    61fc:	50 f3       	brcs	.-44     	; 0x61d2 <strtod+0x17a>
    61fe:	14 ff       	sbrs	r17, 4
    6200:	03 c0       	rjmp	.+6      	; 0x6208 <strtod+0x1b0>
    6202:	71 95       	neg	r23
    6204:	61 95       	neg	r22
    6206:	71 09       	sbc	r23, r1
    6208:	c6 0f       	add	r28, r22
    620a:	d7 1f       	adc	r29, r23
    620c:	11 ff       	sbrs	r17, 1
    620e:	08 c0       	rjmp	.+16     	; 0x6220 <strtod+0x1c8>
    6210:	c1 14       	cp	r12, r1
    6212:	d1 04       	cpc	r13, r1
    6214:	29 f0       	breq	.+10     	; 0x6220 <strtod+0x1c8>
    6216:	cf 01       	movw	r24, r30
    6218:	01 97       	sbiw	r24, 0x01	; 1
    621a:	f6 01       	movw	r30, r12
    621c:	91 83       	std	Z+1, r25	; 0x01
    621e:	80 83       	st	Z, r24
    6220:	ca 01       	movw	r24, r20
    6222:	b9 01       	movw	r22, r18
    6224:	0e 94 ba 19 	call	0x3374	; 0x3374 <__floatunsisf>
    6228:	21 2f       	mov	r18, r17
    622a:	23 70       	andi	r18, 0x03	; 3
    622c:	23 30       	cpi	r18, 0x03	; 3
    622e:	19 f0       	breq	.+6      	; 0x6236 <strtod+0x1de>
    6230:	4b 01       	movw	r8, r22
    6232:	5c 01       	movw	r10, r24
    6234:	06 c0       	rjmp	.+12     	; 0x6242 <strtod+0x1ea>
    6236:	4b 01       	movw	r8, r22
    6238:	5c 01       	movw	r10, r24
    623a:	b7 fa       	bst	r11, 7
    623c:	b0 94       	com	r11
    623e:	b7 f8       	bld	r11, 7
    6240:	b0 94       	com	r11
    6242:	20 e0       	ldi	r18, 0x00	; 0
    6244:	30 e0       	ldi	r19, 0x00	; 0
    6246:	a9 01       	movw	r20, r18
    6248:	c5 01       	movw	r24, r10
    624a:	b4 01       	movw	r22, r8
    624c:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__cmpsf2>
    6250:	88 23       	and	r24, r24
    6252:	09 f4       	brne	.+2      	; 0x6256 <strtod+0x1fe>
    6254:	3e c0       	rjmp	.+124    	; 0x62d2 <strtod+0x27a>
    6256:	d7 ff       	sbrs	r29, 7
    6258:	06 c0       	rjmp	.+12     	; 0x6266 <strtod+0x20e>
    625a:	d1 95       	neg	r29
    625c:	c1 95       	neg	r28
    625e:	d1 09       	sbc	r29, r1
    6260:	09 e7       	ldi	r16, 0x79	; 121
    6262:	12 e0       	ldi	r17, 0x02	; 2
    6264:	02 c0       	rjmp	.+4      	; 0x626a <strtod+0x212>
    6266:	01 e9       	ldi	r16, 0x91	; 145
    6268:	12 e0       	ldi	r17, 0x02	; 2
    626a:	68 01       	movw	r12, r16
    626c:	f8 e1       	ldi	r31, 0x18	; 24
    626e:	cf 1a       	sub	r12, r31
    6270:	d1 08       	sbc	r13, r1
    6272:	90 e2       	ldi	r25, 0x20	; 32
    6274:	e9 2e       	mov	r14, r25
    6276:	f1 2c       	mov	r15, r1
    6278:	ce 15       	cp	r28, r14
    627a:	df 05       	cpc	r29, r15
    627c:	74 f0       	brlt	.+28     	; 0x629a <strtod+0x242>
    627e:	f8 01       	movw	r30, r16
    6280:	25 91       	lpm	r18, Z+
    6282:	35 91       	lpm	r19, Z+
    6284:	45 91       	lpm	r20, Z+
    6286:	54 91       	lpm	r21, Z
    6288:	c5 01       	movw	r24, r10
    628a:	b4 01       	movw	r22, r8
    628c:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__mulsf3>
    6290:	4b 01       	movw	r8, r22
    6292:	5c 01       	movw	r10, r24
    6294:	ce 19       	sub	r28, r14
    6296:	df 09       	sbc	r29, r15
    6298:	ef cf       	rjmp	.-34     	; 0x6278 <strtod+0x220>
    629a:	04 50       	subi	r16, 0x04	; 4
    629c:	11 09       	sbc	r17, r1
    629e:	f5 94       	asr	r15
    62a0:	e7 94       	ror	r14
    62a2:	0c 15       	cp	r16, r12
    62a4:	1d 05       	cpc	r17, r13
    62a6:	41 f7       	brne	.-48     	; 0x6278 <strtod+0x220>
    62a8:	8a 2d       	mov	r24, r10
    62aa:	88 0f       	add	r24, r24
    62ac:	8b 2d       	mov	r24, r11
    62ae:	88 1f       	adc	r24, r24
    62b0:	8f 3f       	cpi	r24, 0xFF	; 255
    62b2:	49 f0       	breq	.+18     	; 0x62c6 <strtod+0x26e>
    62b4:	20 e0       	ldi	r18, 0x00	; 0
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    62b8:	a9 01       	movw	r20, r18
    62ba:	c5 01       	movw	r24, r10
    62bc:	b4 01       	movw	r22, r8
    62be:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__cmpsf2>
    62c2:	81 11       	cpse	r24, r1
    62c4:	06 c0       	rjmp	.+12     	; 0x62d2 <strtod+0x27a>
    62c6:	82 e2       	ldi	r24, 0x22	; 34
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	90 93 c5 08 	sts	0x08C5, r25	; 0x8008c5 <errno+0x1>
    62ce:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <errno>
    62d2:	c5 01       	movw	r24, r10
    62d4:	b4 01       	movw	r22, r8
    62d6:	09 c0       	rjmp	.+18     	; 0x62ea <strtod+0x292>
    62d8:	60 e0       	ldi	r22, 0x00	; 0
    62da:	70 e0       	ldi	r23, 0x00	; 0
    62dc:	80 e8       	ldi	r24, 0x80	; 128
    62de:	9f ef       	ldi	r25, 0xFF	; 255
    62e0:	04 c0       	rjmp	.+8      	; 0x62ea <strtod+0x292>
    62e2:	60 e0       	ldi	r22, 0x00	; 0
    62e4:	70 e0       	ldi	r23, 0x00	; 0
    62e6:	80 ec       	ldi	r24, 0xC0	; 192
    62e8:	9f e7       	ldi	r25, 0x7F	; 127
    62ea:	cd b7       	in	r28, 0x3d	; 61
    62ec:	de b7       	in	r29, 0x3e	; 62
    62ee:	ec e0       	ldi	r30, 0x0C	; 12
    62f0:	0c 94 cb 31 	jmp	0x6396	; 0x6396 <__epilogue_restores__+0xc>

000062f4 <isspace>:
    62f4:	91 11       	cpse	r25, r1
    62f6:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__ctype_isfalse>
    62fa:	80 32       	cpi	r24, 0x20	; 32
    62fc:	19 f0       	breq	.+6      	; 0x6304 <isspace+0x10>
    62fe:	89 50       	subi	r24, 0x09	; 9
    6300:	85 50       	subi	r24, 0x05	; 5
    6302:	c8 f7       	brcc	.-14     	; 0x62f6 <isspace+0x2>
    6304:	08 95       	ret

00006306 <strncasecmp_P>:
    6306:	fb 01       	movw	r30, r22
    6308:	dc 01       	movw	r26, r24
    630a:	41 50       	subi	r20, 0x01	; 1
    630c:	50 40       	sbci	r21, 0x00	; 0
    630e:	88 f0       	brcs	.+34     	; 0x6332 <strncasecmp_P+0x2c>
    6310:	8d 91       	ld	r24, X+
    6312:	81 34       	cpi	r24, 0x41	; 65
    6314:	1c f0       	brlt	.+6      	; 0x631c <strncasecmp_P+0x16>
    6316:	8b 35       	cpi	r24, 0x5B	; 91
    6318:	0c f4       	brge	.+2      	; 0x631c <strncasecmp_P+0x16>
    631a:	80 5e       	subi	r24, 0xE0	; 224
    631c:	65 91       	lpm	r22, Z+
    631e:	61 34       	cpi	r22, 0x41	; 65
    6320:	1c f0       	brlt	.+6      	; 0x6328 <strncasecmp_P+0x22>
    6322:	6b 35       	cpi	r22, 0x5B	; 91
    6324:	0c f4       	brge	.+2      	; 0x6328 <strncasecmp_P+0x22>
    6326:	60 5e       	subi	r22, 0xE0	; 224
    6328:	86 1b       	sub	r24, r22
    632a:	61 11       	cpse	r22, r1
    632c:	71 f3       	breq	.-36     	; 0x630a <strncasecmp_P+0x4>
    632e:	99 0b       	sbc	r25, r25
    6330:	08 95       	ret
    6332:	88 1b       	sub	r24, r24
    6334:	fc cf       	rjmp	.-8      	; 0x632e <strncasecmp_P+0x28>

00006336 <__ctype_isfalse>:
    6336:	99 27       	eor	r25, r25
    6338:	88 27       	eor	r24, r24

0000633a <__ctype_istrue>:
    633a:	08 95       	ret

0000633c <__muluhisi3>:
    633c:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__umulhisi3>
    6340:	a5 9f       	mul	r26, r21
    6342:	90 0d       	add	r25, r0
    6344:	b4 9f       	mul	r27, r20
    6346:	90 0d       	add	r25, r0
    6348:	a4 9f       	mul	r26, r20
    634a:	80 0d       	add	r24, r0
    634c:	91 1d       	adc	r25, r1
    634e:	11 24       	eor	r1, r1
    6350:	08 95       	ret

00006352 <__prologue_saves__>:
    6352:	2f 92       	push	r2
    6354:	3f 92       	push	r3
    6356:	4f 92       	push	r4
    6358:	5f 92       	push	r5
    635a:	6f 92       	push	r6
    635c:	7f 92       	push	r7
    635e:	8f 92       	push	r8
    6360:	9f 92       	push	r9
    6362:	af 92       	push	r10
    6364:	bf 92       	push	r11
    6366:	cf 92       	push	r12
    6368:	df 92       	push	r13
    636a:	ef 92       	push	r14
    636c:	ff 92       	push	r15
    636e:	0f 93       	push	r16
    6370:	1f 93       	push	r17
    6372:	cf 93       	push	r28
    6374:	df 93       	push	r29
    6376:	cd b7       	in	r28, 0x3d	; 61
    6378:	de b7       	in	r29, 0x3e	; 62
    637a:	ca 1b       	sub	r28, r26
    637c:	db 0b       	sbc	r29, r27
    637e:	0f b6       	in	r0, 0x3f	; 63
    6380:	f8 94       	cli
    6382:	de bf       	out	0x3e, r29	; 62
    6384:	0f be       	out	0x3f, r0	; 63
    6386:	cd bf       	out	0x3d, r28	; 61
    6388:	09 94       	ijmp

0000638a <__epilogue_restores__>:
    638a:	2a 88       	ldd	r2, Y+18	; 0x12
    638c:	39 88       	ldd	r3, Y+17	; 0x11
    638e:	48 88       	ldd	r4, Y+16	; 0x10
    6390:	5f 84       	ldd	r5, Y+15	; 0x0f
    6392:	6e 84       	ldd	r6, Y+14	; 0x0e
    6394:	7d 84       	ldd	r7, Y+13	; 0x0d
    6396:	8c 84       	ldd	r8, Y+12	; 0x0c
    6398:	9b 84       	ldd	r9, Y+11	; 0x0b
    639a:	aa 84       	ldd	r10, Y+10	; 0x0a
    639c:	b9 84       	ldd	r11, Y+9	; 0x09
    639e:	c8 84       	ldd	r12, Y+8	; 0x08
    63a0:	df 80       	ldd	r13, Y+7	; 0x07
    63a2:	ee 80       	ldd	r14, Y+6	; 0x06
    63a4:	fd 80       	ldd	r15, Y+5	; 0x05
    63a6:	0c 81       	ldd	r16, Y+4	; 0x04
    63a8:	1b 81       	ldd	r17, Y+3	; 0x03
    63aa:	aa 81       	ldd	r26, Y+2	; 0x02
    63ac:	b9 81       	ldd	r27, Y+1	; 0x01
    63ae:	ce 0f       	add	r28, r30
    63b0:	d1 1d       	adc	r29, r1
    63b2:	0f b6       	in	r0, 0x3f	; 63
    63b4:	f8 94       	cli
    63b6:	de bf       	out	0x3e, r29	; 62
    63b8:	0f be       	out	0x3f, r0	; 63
    63ba:	cd bf       	out	0x3d, r28	; 61
    63bc:	ed 01       	movw	r28, r26
    63be:	08 95       	ret

000063c0 <__umulhisi3>:
    63c0:	a2 9f       	mul	r26, r18
    63c2:	b0 01       	movw	r22, r0
    63c4:	b3 9f       	mul	r27, r19
    63c6:	c0 01       	movw	r24, r0
    63c8:	a3 9f       	mul	r26, r19
    63ca:	70 0d       	add	r23, r0
    63cc:	81 1d       	adc	r24, r1
    63ce:	11 24       	eor	r1, r1
    63d0:	91 1d       	adc	r25, r1
    63d2:	b2 9f       	mul	r27, r18
    63d4:	70 0d       	add	r23, r0
    63d6:	81 1d       	adc	r24, r1
    63d8:	11 24       	eor	r1, r1
    63da:	91 1d       	adc	r25, r1
    63dc:	08 95       	ret

000063de <__do_global_dtors>:
    63de:	13 e0       	ldi	r17, 0x03	; 3
    63e0:	c8 e8       	ldi	r28, 0x88	; 136
    63e2:	d3 e0       	ldi	r29, 0x03	; 3
    63e4:	04 c0       	rjmp	.+8      	; 0x63ee <__do_global_dtors+0x10>
    63e6:	fe 01       	movw	r30, r28
    63e8:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <__tablejump2__>
    63ec:	21 96       	adiw	r28, 0x01	; 1
    63ee:	c9 38       	cpi	r28, 0x89	; 137
    63f0:	d1 07       	cpc	r29, r17
    63f2:	c9 f7       	brne	.-14     	; 0x63e6 <__do_global_dtors+0x8>
    63f4:	f8 94       	cli

000063f6 <__stop_program>:
    63f6:	ff cf       	rjmp	.-2      	; 0x63f6 <__stop_program>
