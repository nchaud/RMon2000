
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00005bd0  00005c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050c  00800342  00800342  00005ea6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005ea6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ac8  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ffff  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b4b  00000000  00000000  000269df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007cff  00000000  00000000  0002a52a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000034f0  00000000  00000000  0003222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011352  00000000  00000000  0003571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010bdc  00000000  00000000  00046a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab0  00000000  00000000  0005764a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005953  00000000  00000000  000580fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 04 	jmp	0x840	; 0x840 <__dtors_end>
       4:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__vector_1>
       8:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__vector_2>
       c:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <__vector_3>
      10:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <__vector_3>
      14:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <__vector_3>
      18:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      1c:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      20:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      24:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      28:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      2c:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      30:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      34:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      38:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      3c:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      40:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__vector_16>
      44:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      48:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__vector_18>
      4c:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__vector_19>
      50:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      54:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      58:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      5c:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      60:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_24>
      64:	0c 94 48 04 	jmp	0x890	; 0x890 <__bad_interrupt>
      68:	13 10       	cpse	r1, r3
      6a:	19 10       	cpse	r1, r9
      6c:	19 10       	cpse	r1, r9
      6e:	19 10       	cpse	r1, r9
      70:	19 10       	cpse	r1, r9
      72:	19 10       	cpse	r1, r9
      74:	19 10       	cpse	r1, r9
      76:	19 10       	cpse	r1, r9
      78:	07 0f       	add	r16, r23
      7a:	19 10       	cpse	r1, r9
      7c:	19 10       	cpse	r1, r9
      7e:	19 10       	cpse	r1, r9
      80:	19 10       	cpse	r1, r9
      82:	19 10       	cpse	r1, r9
      84:	19 10       	cpse	r1, r9
      86:	19 10       	cpse	r1, r9
      88:	07 0f       	add	r16, r23
      8a:	19 10       	cpse	r1, r9
      8c:	19 10       	cpse	r1, r9
      8e:	19 10       	cpse	r1, r9
      90:	19 10       	cpse	r1, r9
      92:	19 10       	cpse	r1, r9
      94:	19 10       	cpse	r1, r9
      96:	19 10       	cpse	r1, r9
      98:	11 0f       	add	r17, r17
      9a:	19 10       	cpse	r1, r9
      9c:	19 10       	cpse	r1, r9
      9e:	19 10       	cpse	r1, r9
      a0:	19 10       	cpse	r1, r9
      a2:	19 10       	cpse	r1, r9
      a4:	19 10       	cpse	r1, r9
      a6:	19 10       	cpse	r1, r9
      a8:	3d 0f       	add	r19, r29
      aa:	19 10       	cpse	r1, r9
      ac:	19 10       	cpse	r1, r9
      ae:	19 10       	cpse	r1, r9
      b0:	19 10       	cpse	r1, r9
      b2:	19 10       	cpse	r1, r9
      b4:	19 10       	cpse	r1, r9
      b6:	19 10       	cpse	r1, r9
      b8:	11 0f       	add	r17, r17
      ba:	19 10       	cpse	r1, r9
      bc:	19 10       	cpse	r1, r9
      be:	19 10       	cpse	r1, r9
      c0:	19 10       	cpse	r1, r9
      c2:	19 10       	cpse	r1, r9
      c4:	19 10       	cpse	r1, r9
      c6:	19 10       	cpse	r1, r9
      c8:	43 0f       	add	r20, r19
      ca:	19 10       	cpse	r1, r9
      cc:	19 10       	cpse	r1, r9
      ce:	19 10       	cpse	r1, r9
      d0:	19 10       	cpse	r1, r9
      d2:	19 10       	cpse	r1, r9
      d4:	19 10       	cpse	r1, r9
      d6:	19 10       	cpse	r1, r9
      d8:	49 0f       	add	r20, r25
      da:	19 10       	cpse	r1, r9
      dc:	19 10       	cpse	r1, r9
      de:	19 10       	cpse	r1, r9
      e0:	19 10       	cpse	r1, r9
      e2:	19 10       	cpse	r1, r9
      e4:	19 10       	cpse	r1, r9
      e6:	19 10       	cpse	r1, r9
      e8:	5f 0f       	add	r21, r31
      ea:	19 10       	cpse	r1, r9
      ec:	19 10       	cpse	r1, r9
      ee:	19 10       	cpse	r1, r9
      f0:	19 10       	cpse	r1, r9
      f2:	19 10       	cpse	r1, r9
      f4:	19 10       	cpse	r1, r9
      f6:	19 10       	cpse	r1, r9
      f8:	8f 0f       	add	r24, r31
      fa:	19 10       	cpse	r1, r9
      fc:	19 10       	cpse	r1, r9
      fe:	19 10       	cpse	r1, r9
     100:	19 10       	cpse	r1, r9
     102:	19 10       	cpse	r1, r9
     104:	19 10       	cpse	r1, r9
     106:	19 10       	cpse	r1, r9
     108:	4f 0f       	add	r20, r31
     10a:	19 10       	cpse	r1, r9
     10c:	19 10       	cpse	r1, r9
     10e:	19 10       	cpse	r1, r9
     110:	19 10       	cpse	r1, r9
     112:	19 10       	cpse	r1, r9
     114:	19 10       	cpse	r1, r9
     116:	19 10       	cpse	r1, r9
     118:	6d 0f       	add	r22, r29
     11a:	19 10       	cpse	r1, r9
     11c:	19 10       	cpse	r1, r9
     11e:	19 10       	cpse	r1, r9
     120:	19 10       	cpse	r1, r9
     122:	19 10       	cpse	r1, r9
     124:	19 10       	cpse	r1, r9
     126:	19 10       	cpse	r1, r9
     128:	92 0f       	add	r25, r18
     12a:	19 10       	cpse	r1, r9
     12c:	19 10       	cpse	r1, r9
     12e:	19 10       	cpse	r1, r9
     130:	19 10       	cpse	r1, r9
     132:	19 10       	cpse	r1, r9
     134:	19 10       	cpse	r1, r9
     136:	19 10       	cpse	r1, r9
     138:	92 0f       	add	r25, r18
     13a:	19 10       	cpse	r1, r9
     13c:	19 10       	cpse	r1, r9
     13e:	19 10       	cpse	r1, r9
     140:	19 10       	cpse	r1, r9
     142:	19 10       	cpse	r1, r9
     144:	19 10       	cpse	r1, r9
     146:	19 10       	cpse	r1, r9
     148:	92 0f       	add	r25, r18
     14a:	19 10       	cpse	r1, r9
     14c:	19 10       	cpse	r1, r9
     14e:	19 10       	cpse	r1, r9
     150:	19 10       	cpse	r1, r9
     152:	19 10       	cpse	r1, r9
     154:	19 10       	cpse	r1, r9
     156:	19 10       	cpse	r1, r9
     158:	92 0f       	add	r25, r18
     15a:	19 10       	cpse	r1, r9
     15c:	19 10       	cpse	r1, r9
     15e:	19 10       	cpse	r1, r9
     160:	19 10       	cpse	r1, r9
     162:	19 10       	cpse	r1, r9
     164:	19 10       	cpse	r1, r9
     166:	19 10       	cpse	r1, r9
     168:	9b 0f       	add	r25, r27
     16a:	19 10       	cpse	r1, r9
     16c:	19 10       	cpse	r1, r9
     16e:	19 10       	cpse	r1, r9
     170:	19 10       	cpse	r1, r9
     172:	19 10       	cpse	r1, r9
     174:	19 10       	cpse	r1, r9
     176:	19 10       	cpse	r1, r9
     178:	d5 0f       	add	r29, r21
     17a:	19 10       	cpse	r1, r9
     17c:	19 10       	cpse	r1, r9
     17e:	19 10       	cpse	r1, r9
     180:	19 10       	cpse	r1, r9
     182:	19 10       	cpse	r1, r9
     184:	19 10       	cpse	r1, r9
     186:	19 10       	cpse	r1, r9
     188:	9b 0f       	add	r25, r27
     18a:	19 10       	cpse	r1, r9
     18c:	19 10       	cpse	r1, r9
     18e:	19 10       	cpse	r1, r9
     190:	19 10       	cpse	r1, r9
     192:	19 10       	cpse	r1, r9
     194:	19 10       	cpse	r1, r9
     196:	19 10       	cpse	r1, r9
     198:	d5 0f       	add	r29, r21
     19a:	19 10       	cpse	r1, r9
     19c:	19 10       	cpse	r1, r9
     19e:	19 10       	cpse	r1, r9
     1a0:	19 10       	cpse	r1, r9
     1a2:	19 10       	cpse	r1, r9
     1a4:	19 10       	cpse	r1, r9
     1a6:	19 10       	cpse	r1, r9
     1a8:	b7 0f       	add	r27, r23
     1aa:	19 10       	cpse	r1, r9
     1ac:	19 10       	cpse	r1, r9
     1ae:	19 10       	cpse	r1, r9
     1b0:	19 10       	cpse	r1, r9
     1b2:	19 10       	cpse	r1, r9
     1b4:	19 10       	cpse	r1, r9
     1b6:	19 10       	cpse	r1, r9
     1b8:	d9 0f       	add	r29, r25
     1ba:	19 10       	cpse	r1, r9
     1bc:	19 10       	cpse	r1, r9
     1be:	19 10       	cpse	r1, r9
     1c0:	19 10       	cpse	r1, r9
     1c2:	19 10       	cpse	r1, r9
     1c4:	19 10       	cpse	r1, r9
     1c6:	19 10       	cpse	r1, r9
     1c8:	d9 0f       	add	r29, r25
     1ca:	19 10       	cpse	r1, r9
     1cc:	19 10       	cpse	r1, r9
     1ce:	19 10       	cpse	r1, r9
     1d0:	19 10       	cpse	r1, r9
     1d2:	19 10       	cpse	r1, r9
     1d4:	19 10       	cpse	r1, r9
     1d6:	19 10       	cpse	r1, r9
     1d8:	ef 0f       	add	r30, r31
     1da:	19 10       	cpse	r1, r9
     1dc:	19 10       	cpse	r1, r9
     1de:	19 10       	cpse	r1, r9
     1e0:	19 10       	cpse	r1, r9
     1e2:	19 10       	cpse	r1, r9
     1e4:	19 10       	cpse	r1, r9
     1e6:	19 10       	cpse	r1, r9
     1e8:	0d 10       	cpse	r0, r13
     1ea:	19 10       	cpse	r1, r9
     1ec:	19 10       	cpse	r1, r9
     1ee:	19 10       	cpse	r1, r9
     1f0:	19 10       	cpse	r1, r9
     1f2:	19 10       	cpse	r1, r9
     1f4:	19 10       	cpse	r1, r9
     1f6:	19 10       	cpse	r1, r9
     1f8:	0d 10       	cpse	r0, r13
     1fa:	19 10       	cpse	r1, r9
     1fc:	19 10       	cpse	r1, r9
     1fe:	19 10       	cpse	r1, r9
     200:	19 10       	cpse	r1, r9
     202:	19 10       	cpse	r1, r9
     204:	19 10       	cpse	r1, r9
     206:	19 10       	cpse	r1, r9
     208:	19 10       	cpse	r1, r9
     20a:	19 10       	cpse	r1, r9
     20c:	19 10       	cpse	r1, r9
     20e:	19 10       	cpse	r1, r9
     210:	19 10       	cpse	r1, r9
     212:	19 10       	cpse	r1, r9
     214:	19 10       	cpse	r1, r9
     216:	19 10       	cpse	r1, r9
     218:	19 10       	cpse	r1, r9
     21a:	19 10       	cpse	r1, r9
     21c:	19 10       	cpse	r1, r9
     21e:	19 10       	cpse	r1, r9
     220:	19 10       	cpse	r1, r9
     222:	19 10       	cpse	r1, r9
     224:	19 10       	cpse	r1, r9
     226:	19 10       	cpse	r1, r9
     228:	19 10       	cpse	r1, r9
     22a:	19 10       	cpse	r1, r9
     22c:	19 10       	cpse	r1, r9
     22e:	19 10       	cpse	r1, r9
     230:	19 10       	cpse	r1, r9
     232:	19 10       	cpse	r1, r9
     234:	19 10       	cpse	r1, r9
     236:	19 10       	cpse	r1, r9
     238:	19 10       	cpse	r1, r9
     23a:	19 10       	cpse	r1, r9
     23c:	19 10       	cpse	r1, r9
     23e:	19 10       	cpse	r1, r9
     240:	19 10       	cpse	r1, r9
     242:	19 10       	cpse	r1, r9
     244:	19 10       	cpse	r1, r9
     246:	19 10       	cpse	r1, r9
     248:	19 10       	cpse	r1, r9
     24a:	19 10       	cpse	r1, r9
     24c:	19 10       	cpse	r1, r9
     24e:	19 10       	cpse	r1, r9
     250:	19 10       	cpse	r1, r9
     252:	19 10       	cpse	r1, r9
     254:	19 10       	cpse	r1, r9
     256:	19 10       	cpse	r1, r9
     258:	18 10       	cpse	r1, r8

0000025a <__trampolines_end>:
     25a:	74 65       	ori	r23, 0x54	; 84
     25c:	78 74       	andi	r23, 0x48	; 72
     25e:	2f 70       	andi	r18, 0x0F	; 15
     260:	6c 61       	ori	r22, 0x1C	; 28
     262:	69 6e       	ori	r22, 0xE9	; 233
	...

00000265 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
	...

00000266 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
	...

00000267 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     267:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000272 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
     272:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000027d <_ZZ5setupE3__c>:
     27d:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000289 <_ZZ7readMemiPhhE3__c>:
     289:	52 65 61 64 69 6e 67 20 6d 65 6d 6f 72 79 20 61     Reading memory a
     299:	74 20 61 64 64 72 65 73 73 20 00                    t address .

000002a4 <_ZZ7readMemiPhhE3__c_0>:
     2a4:	20 74 6f 20 61 64 64 72 65 73 73 20 00               to address .

000002b1 <_ZZ7readMemiPhhE3__c_1>:
     2b1:	20 6f 66 20 73 69 7a 65 20 00                        of size .

000002bb <_ZZ7readMemiPhhE3__c_2>:
     2bb:	52 65 61 64 69 6e 67 20 62 79 74 65 20 61 74 20     Reading byte at 
     2cb:	61 64 64 72 65 73 73 20 00                          address .

000002d4 <_ZZ7readMemiPhhE3__c_3>:
     2d4:	2e 2e 2e 77 69 74 68 20 4d 53 42 20 00              ...with MSB .

000002e1 <_ZZ7readMemiPhhE3__c_4>:
     2e1:	20 61 6e 64 20 4c 53 42 20 00                        and LSB .

000002eb <_ZZ7readMemiPhhE3__c_5>:
     2eb:	20 3a 20 00                                          : .

000002ef <_ZZ7readMemiPhhE3__c_6>:
     2ef:	52 61 77 20 62 79 74 65 20 72 65 61 64 3a 00        Raw byte read:.

000002fe <_ZZ8writeMemiPhhE3__c>:
     2fe:	57 72 69 74 69 6e 67 20 6d 65 6d 6f 72 79 20 61     Writing memory a
     30e:	74 20 61 64 64 72 65 73 73 20 00                    t address .

00000319 <_ZZ8writeMemiPhhE3__c_0>:
     319:	20 66 72 6f 6d 20 61 64 64 72 65 73 73 20 00         from address .

00000328 <_ZZ8writeMemiPhhE3__c_1>:
     328:	20 6f 66 20 73 69 7a 65 20 00                        of size .

00000332 <_ZZ8writeMemiPhhE3__c_2>:
     332:	57 72 69 74 69 6e 67 20 62 79 74 65 20 61 74 20     Writing byte at 
     342:	61 64 64 72 65 73 73 20 00                          address .

0000034b <_ZZ8writeMemiPhhE3__c_3>:
     34b:	2e 2e 2e 77 69 74 68 20 4d 53 42 20 00              ...with MSB .

00000358 <_ZZ8writeMemiPhhE3__c_4>:
     358:	20 61 6e 64 20 4c 53 42 20 00                        and LSB .

00000362 <_ZZ8writeMemiPhhE3__c_5>:
     362:	20 3a 20 00                                          : .

00000366 <_ZZ9printDatavE3__c>:
     366:	4d 6f 64 75 6c 65 20 23 00                          Module #.

0000036f <_ZZ9printDatavE3__c_0>:
     36f:	2c 20 54 6f 74 61 6c 20 23 52 65 61 64 69 6e 67     , Total #Reading
     37f:	73 3a 20 00                                         s: .

00000383 <_ZZ9printDatavE3__c_1>:
     383:	52 65 61 64 69 6e 67 20 23 00                       Reading #.

0000038d <_ZZ9printDatavE3__c_2>:
     38d:	47 73 6d 2d 53 74 61 74 75 73 3a 20 00              Gsm-Status: .

0000039a <_ZZ9printDatavE3__c_3>:
     39a:	2c 20 47 73 6d 2d 52 53 53 49 3a 20 00              , Gsm-RSSI: .

000003a7 <_ZZ9printDatavE3__c_4>:
     3a7:	2c 20 47 73 6d 2d 45 72 72 6f 72 20 43 6f 64 65     , Gsm-Error Code
     3b7:	3a 20 00                                            : .

000003ba <_ZZ9printDatavE3__c_5>:
     3ba:	2c 20 47 70 73 2d 53 74 61 74 75 73 3a 20 00        , Gps-Status: .

000003c9 <_ZZ9printDatavE3__c_6>:
     3c9:	2c 20 47 70 73 2d 45 72 72 6f 72 20 43 6f 64 65     , Gps-Error Code
     3d9:	3a 20 00                                            : .

000003dc <_ZZ9printDatavE3__c_7>:
     3dc:	2c 20 47 70 73 2d 4c 61 74 3a 20 00                 , Gps-Lat: .

000003e8 <_ZZ9printDatavE3__c_8>:
     3e8:	2c 20 47 70 73 2d 4c 6f 6e 3a 20 00                 , Gps-Lon: .

000003f4 <_ZZ9printDatavE3__c_9>:
     3f4:	2c 20 47 70 73 2d 44 61 74 65 3a 20 00              , Gps-Date: .

00000401 <_ZZ9printDatavE3__c_10>:
     401:	44 61 74 65 20 4c 65 6e 3a 20 00                    Date Len: .

0000040c <_ZZ9printDatavE3__c_11>:
     40c:	2c 20 47 70 73 2d 48 65 61 64 69 6e 67 3a 20 00     , Gps-Heading: .

0000041c <_ZZ9printDatavE3__c_12>:
     41c:	2c 20 47 70 73 2d 53 70 65 65 64 3a 20 00           , Gps-Speed: .

0000042a <_ZZ17on3MinutesElapsedbE3__c>:
     42a:	33 20 6d 69 6e 75 74 65 73 20 65 6c 61 70 73 65     3 minutes elapse
     43a:	64 20 2d 20 6c 6f 67 67 69 6e 67 2e 2e 2e 00        d - logging....

00000449 <_ZZ17on3MinutesElapsedbE3__c_0>:
     449:	4d 6f 64 75 6c 65 20 23 00                          Module #.

00000452 <_ZZ17on3MinutesElapsedbE3__c_1>:
     452:	2c 20 43 75 72 72 65 6e 74 20 23 52 65 61 64 69     , Current #Readi
     462:	6e 67 73 3a 20 00                                   ngs: .

00000468 <_ZZ17on3MinutesElapsedbE3__c_2>:
     468:	47 6f 74 20 47 50 53 20 69 6e 66 6f 2c 20 6c 61     Got GPS info, la
     478:	74 3d 00                                            t=.

0000047b <_ZZ17on3MinutesElapsedbE3__c_3>:
     47b:	20 6c 6f 6e 3d 00                                    lon=.

00000481 <_ZZ17on3MinutesElapsedbE3__c_4>:
     481:	20 64 61 74 65 3d 00                                 date=.

00000488 <_ZZ17on3MinutesElapsedbE3__c_5>:
     488:	20 73 74 61 74 75 73 3d 00                           status=.

00000491 <_ZZ17on3MinutesElapsedbE3__c_6>:
     491:	20 65 72 72 43 6f 64 65 3d 00                        errCode=.

0000049b <digital_pin_to_timer_PGM>:
     49b:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     4ab:	00 00 00 00                                         ....

000004af <digital_pin_to_bit_mask_PGM>:
     4af:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4bf:	04 08 10 20                                         ... 

000004c3 <digital_pin_to_port_PGM>:
     4c3:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4d3:	03 03 03 03                                         ....

000004d7 <port_to_input_PGM>:
     4d7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004e1 <port_to_output_PGM>:
     4e1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004eb <port_to_mode_PGM>:
     4eb:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004f5 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     4f5:	09 3c 2d 2d 2d 20 00                                .<--- .

000004fc <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     4fc:	09 2d 2d 2d 3e 20 00                                .---> .

00000503 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     503:	09 3c 2d 2d 2d 20 00                                .<--- .

0000050a <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     50a:	09 2d 2d 2d 3e 20 00                                .---> .

00000511 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     511:	09 3c 2d 2d 2d 20 00                                .<--- .

00000518 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     518:	09 2d 2d 2d 3e 20 00                                .---> .

0000051f <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     51f:	09 3c 2d 2d 2d 20 00                                .<--- .

00000526 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     526:	09 2d 2d 2d 3e 20 00                                .---> .

0000052d <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     52d:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

00000535 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     535:	53 50 41 43 45 00                                   SPACE.

0000053b <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     53b:	09 3c 2d 2d 2d 20 00                                .<--- .

00000542 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     542:	52 45 44 49 52 00                                   REDIR.

00000548 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     548:	55 52 4c 00                                         URL.

0000054c <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     54c:	55 41 00                                            UA.

0000054f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     54f:	43 49 44 00                                         CID.

00000553 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     553:	4c 65 6e 3a 20 00                                   Len: .

00000559 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     559:	53 74 61 74 75 73 3a 20 00                          Status: .

00000562 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     562:	43 4f 4e 54 45 4e 54 00                             CONTENT.

0000056a <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     56a:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

00000576 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     576:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

00000581 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     581:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

0000058d <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     58d:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

0000059a <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     59a:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000005a7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     5a7:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000005b6 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     5b6:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000005bf <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     5bf:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000005cc <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     5cc:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000005d9 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     5d9:	09 2d 2d 2d 3e 20 00                                .---> .

000005e0 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     5e0:	22 2c 00                                            ",.

000005e3 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     5e3:	22 2c 22 00                                         ",".

000005e7 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     5e7:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000005f5 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     5f5:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000603 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     603:	09 2d 2d 2d 3e 20 00                                .---> .

0000060a <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     60a:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000616 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     616:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000622 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     622:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000062d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     62d:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

0000063a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     63a:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000645 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     645:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000064d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     64d:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000656 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     656:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000663 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     663:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     673:	44 22 2c 00                                         D",.

00000677 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     677:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     687:	45 52 22 2c 00                                      ER",.

0000068c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     68c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000696 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     696:	09 2d 2d 2d 3e 20 00                                .---> .

0000069d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     69d:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000006a7 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     6a7:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     6b7:	4e 22 2c 00                                         N",.

000006bb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     6bb:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     6cb:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000006d9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     6d9:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000006e4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     6e4:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000006ef <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     6ef:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000006f7 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     6f7:	3e 20 00                                            > .

000006fa <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     6fa:	3e 20 00                                            > .

000006fd <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     6fd:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

00000707 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     707:	41 54 2b 43 53 51 00                                AT+CSQ.

0000070e <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     70e:	2b 43 53 51 3a 20 00                                +CSQ: .

00000715 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     715:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000071e <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     71e:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000726 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     726:	41 54 2b 43 42 43 00                                AT+CBC.

0000072d <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     72d:	2b 43 42 43 3a 20 00                                +CBC: .

00000734 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     734:	53 49 4d 38 30 30 48 00                             SIM800H.

0000073c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     73c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000743 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     743:	09 2d 2d 2d 3e 20 00                                .---> .

0000074a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     74a:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

0000075a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     75a:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

0000076a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     76a:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

00000775 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     775:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000780 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     780:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000078b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     78b:	09 3c 2d 2d 2d 20 00                                .<--- .

00000792 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     792:	09 2d 2d 2d 3e 20 00                                .---> .

00000799 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     799:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

000007a3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     7a3:	41 54 45 30 00                                      ATE0.

000007a8 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     7a8:	41 54 45 30 00                                      ATE0.

000007ad <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     7ad:	41 54 00                                            AT.

000007b0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     7b0:	41 54 00                                            AT.

000007b3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     7b3:	41 54 00                                            AT.

000007b6 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     7b6:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     7c6:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     7d6:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     7e6:	2e 00                                               ..

000007e8 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     7e8:	41 54 00                                            AT.

000007eb <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     7eb:	41 54 00                                            AT.

000007ee <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     7ee:	41 54 00                                            AT.

000007f1 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     7f1:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     801:	61 62 6c 65 00                                      able.

00000806 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     806:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     816:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000827 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     827:	4f 4b 00                                            OK.

0000082a <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     82a:	46 4f 4e 41 00                                      FONA.

0000082f <_ZZN13Adafruit_FONAC4EaE3__c>:
     82f:	46 4f 4e 41 6e 65 74 00 00                          FONAnet..

00000838 <__ctors_start>:
     838:	63 0c       	add	r6, r3
     83a:	d1 13       	cpse	r29, r17
     83c:	3c 18       	sub	r3, r12

0000083e <__ctors_end>:
     83e:	70 0c       	add	r7, r0

00000840 <__dtors_end>:
     840:	11 24       	eor	r1, r1
     842:	1f be       	out	0x3f, r1	; 63
     844:	cf ef       	ldi	r28, 0xFF	; 255
     846:	d8 e0       	ldi	r29, 0x08	; 8
     848:	de bf       	out	0x3e, r29	; 62
     84a:	cd bf       	out	0x3d, r28	; 61

0000084c <__do_copy_data>:
     84c:	13 e0       	ldi	r17, 0x03	; 3
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	b1 e0       	ldi	r27, 0x01	; 1
     852:	e0 ed       	ldi	r30, 0xD0	; 208
     854:	fb e5       	ldi	r31, 0x5B	; 91
     856:	02 c0       	rjmp	.+4      	; 0x85c <__do_copy_data+0x10>
     858:	05 90       	lpm	r0, Z+
     85a:	0d 92       	st	X+, r0
     85c:	a2 34       	cpi	r26, 0x42	; 66
     85e:	b1 07       	cpc	r27, r17
     860:	d9 f7       	brne	.-10     	; 0x858 <__do_copy_data+0xc>

00000862 <__do_clear_bss>:
     862:	28 e0       	ldi	r18, 0x08	; 8
     864:	a2 e4       	ldi	r26, 0x42	; 66
     866:	b3 e0       	ldi	r27, 0x03	; 3
     868:	01 c0       	rjmp	.+2      	; 0x86c <.do_clear_bss_start>

0000086a <.do_clear_bss_loop>:
     86a:	1d 92       	st	X+, r1

0000086c <.do_clear_bss_start>:
     86c:	ae 34       	cpi	r26, 0x4E	; 78
     86e:	b2 07       	cpc	r27, r18
     870:	e1 f7       	brne	.-8      	; 0x86a <.do_clear_bss_loop>

00000872 <__do_global_ctors>:
     872:	14 e0       	ldi	r17, 0x04	; 4
     874:	cf e1       	ldi	r28, 0x1F	; 31
     876:	d4 e0       	ldi	r29, 0x04	; 4
     878:	04 c0       	rjmp	.+8      	; 0x882 <__do_global_ctors+0x10>
     87a:	21 97       	sbiw	r28, 0x01	; 1
     87c:	fe 01       	movw	r30, r28
     87e:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__tablejump2__>
     882:	cc 31       	cpi	r28, 0x1C	; 28
     884:	d1 07       	cpc	r29, r17
     886:	c9 f7       	brne	.-14     	; 0x87a <__do_global_ctors+0x8>
     888:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <main>
     88c:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__do_global_dtors>

00000890 <__bad_interrupt>:
     890:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000894 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <_ZN10GpsManagerC1Eh+0x6>
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN13Adafruit_FONAC1Ea>
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	86 5e       	subi	r24, 0xE6	; 230
     8b6:	9e 4f       	sbci	r25, 0xFE	; 254
     8b8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
{
}
     8be:	00 00       	nop
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <_ZN10GpsManagerD1Ev+0x6>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	9a 83       	std	Y+2, r25	; 0x02
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	00 00       	nop
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	7c 83       	std	Y+4, r23	; 0x04
     8f8:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	3c 81       	ldd	r19, Y+4	; 0x04
     902:	b9 01       	movw	r22, r18
     904:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN13Adafruit_FONAaSERKS_>
}
     908:	00 00       	nop
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	00 d0       	rcall	.+0      	; 0x91e <_ZN10GpsManager9toggleGpsEb+0x6>
     91e:	00 d0       	rcall	.+0      	; 0x920 <_ZN10GpsManager9toggleGpsEb+0x8>
     920:	1f 92       	push	r1
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	9c 83       	std	Y+4, r25	; 0x04
     928:	8b 83       	std	Y+3, r24	; 0x03
     92a:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	9c 81       	ldd	r25, Y+4	; 0x04
     930:	86 5e       	subi	r24, 0xE6	; 230
     932:	9e 4f       	sbci	r25, 0xFE	; 254
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	88 23       	and	r24, r24
     93a:	11 f0       	breq	.+4      	; 0x940 <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	04 c0       	rjmp	.+8      	; 0x948 <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     940:	8f e9       	ldi	r24, 0x9F	; 159
     942:	96 e8       	ldi	r25, 0x86	; 134
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	00 d0       	rcall	.+0      	; 0x95e <_ZN10GpsManager9gpsStatusEv+0x6>
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     966:	00 00       	nop
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	00 d0       	rcall	.+0      	; 0x978 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x6>
     978:	00 d0       	rcall	.+0      	; 0x97a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x8>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	7c 83       	std	Y+4, r23	; 0x04
     984:	6b 83       	std	Y+3, r22	; 0x03

	if (_isMock)
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	86 5e       	subi	r24, 0xE6	; 230
     98c:	9e 4f       	sbci	r25, 0xFE	; 254
     98e:	fc 01       	movw	r30, r24
     990:	80 81       	ld	r24, Z
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x26>
     996:	48 c0       	rjmp	.+144    	; 0xa28 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xb6>
	{
		info.altitude = 10;
     998:	2b 81       	ldd	r18, Y+3	; 0x03
     99a:	3c 81       	ldd	r19, Y+4	; 0x04
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	a0 e2       	ldi	r26, 0x20	; 32
     9a2:	b1 e4       	ldi	r27, 0x41	; 65
     9a4:	f9 01       	movw	r30, r18
     9a6:	82 8b       	std	Z+18, r24	; 0x12
     9a8:	93 8b       	std	Z+19, r25	; 0x13
     9aa:	a4 8b       	std	Z+20, r26	; 0x14
     9ac:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	9c 81       	ldd	r25, Y+4	; 0x04
     9b2:	46 96       	adiw	r24, 0x16	; 22
     9b4:	2f e0       	ldi	r18, 0x0F	; 15
     9b6:	e1 e2       	ldi	r30, 0x21	; 33
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	dc 01       	movw	r26, r24
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	2a 95       	dec	r18
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x4a>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	2e e1       	ldi	r18, 0x1E	; 30
     9ca:	fc 01       	movw	r30, r24
     9cc:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     9ce:	2b 81       	ldd	r18, Y+3	; 0x03
     9d0:	3c 81       	ldd	r19, Y+4	; 0x04
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e2       	ldi	r26, 0x20	; 32
     9d8:	b2 e4       	ldi	r27, 0x42	; 66
     9da:	f9 01       	movw	r30, r18
     9dc:	86 87       	std	Z+14, r24	; 0x0e
     9de:	97 87       	std	Z+15, r25	; 0x0f
     9e0:	a0 8b       	std	Z+16, r26	; 0x10
     9e2:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     9e4:	2b 81       	ldd	r18, Y+3	; 0x03
     9e6:	3c 81       	ldd	r19, Y+4	; 0x04
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	a8 e4       	ldi	r26, 0x48	; 72
     9ee:	b2 e4       	ldi	r27, 0x42	; 66
     9f0:	f9 01       	movw	r30, r18
     9f2:	82 83       	std	Z+2, r24	; 0x02
     9f4:	93 83       	std	Z+3, r25	; 0x03
     9f6:	a4 83       	std	Z+4, r26	; 0x04
     9f8:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     9fa:	2b 81       	ldd	r18, Y+3	; 0x03
     9fc:	3c 81       	ldd	r19, Y+4	; 0x04
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e7       	ldi	r26, 0x70	; 112
     a04:	b2 e4       	ldi	r27, 0x42	; 66
     a06:	f9 01       	movw	r30, r18
     a08:	86 83       	std	Z+6, r24	; 0x06
     a0a:	97 83       	std	Z+7, r25	; 0x07
     a0c:	a0 87       	std	Z+8, r26	; 0x08
     a0e:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     a10:	2b 81       	ldd	r18, Y+3	; 0x03
     a12:	3c 81       	ldd	r19, Y+4	; 0x04
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	ac e8       	ldi	r26, 0x8C	; 140
     a1a:	b2 e4       	ldi	r27, 0x42	; 66
     a1c:	f9 01       	movw	r30, r18
     a1e:	82 87       	std	Z+10, r24	; 0x0a
     a20:	93 87       	std	Z+11, r25	; 0x0b
     a22:	a4 87       	std	Z+12, r26	; 0x0c
     a24:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     a26:	00 00       	nop
	//// make sure we have a response
	//if (!success){
		//info.errorCode = ERR_GPS_BAD_FIELD;
		//return;
	//}
}
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_ZN10GsmManagerC1Eh+0x6>
     a3c:	1f 92       	push	r1
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	2b 81       	ldd	r18, Y+3	; 0x03
     a4e:	fc 01       	movw	r30, r24
     a50:	24 83       	std	Z+4, r18	; 0x04
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	05 96       	adiw	r24, 0x05	; 5
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN13Adafruit_FONAC1Ea>
{
}
     a5e:	00 00       	nop
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	00 d0       	rcall	.+0      	; 0xa72 <_ZN10GsmManagerD1Ev+0x6>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	9a 83       	std	Y+2, r25	; 0x02
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	00 00       	nop
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	7c 83       	std	Y+4, r23	; 0x04
     a98:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	05 96       	adiw	r24, 0x05	; 5
     aa0:	2b 81       	ldd	r18, Y+3	; 0x03
     aa2:	3c 81       	ldd	r19, Y+4	; 0x04
     aa4:	b9 01       	movw	r22, r18
     aa6:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN13Adafruit_FONAaSERKS_>
}
     aaa:	00 00       	nop
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <_ZN10GsmManager5resetEv+0x6>
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	fc 01       	movw	r30, r24
     ace:	11 82       	std	Z+1, r1	; 0x01
     ad0:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	fc 01       	movw	r30, r24
     ad8:	13 82       	std	Z+3, r1	; 0x03
     ada:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     adc:	00 00       	nop
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <_ZN10GsmManager5beginEv+0xa>
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	9a 83       	std	Y+2, r25	; 0x02
     af8:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	fc 01       	movw	r30, r24
     b00:	94 81       	ldd	r25, Z+4	; 0x04
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	99 23       	and	r25, r25
     b06:	09 f4       	brne	.+2      	; 0xb0a <_ZN10GsmManager5beginEv+0x22>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	88 23       	and	r24, r24
     b0c:	11 f0       	breq	.+4      	; 0xb12 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	2d c0       	rjmp	.+90     	; 0xb6c <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     b12:	8f e1       	ldi	r24, 0x1F	; 31
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_Znwj>
     b1a:	8c 01       	movw	r16, r24
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	42 e0       	ldi	r20, 0x02	; 2
     b20:	63 e0       	ldi	r22, 0x03	; 3
     b22:	c8 01       	movw	r24, r16
     b24:	0e 94 86 28 	call	0x510c	; 0x510c <_ZN14SoftwareSerialC1Ehhb>
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	81 5e       	subi	r24, 0xE1	; 225
     b2e:	9e 4f       	sbci	r25, 0xFE	; 254
     b30:	fc 01       	movw	r30, r24
     b32:	11 83       	std	Z+1, r17	; 0x01
     b34:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	9a 81       	ldd	r25, Y+2	; 0x02
     b3a:	81 5e       	subi	r24, 0xE1	; 225
     b3c:	9e 4f       	sbci	r25, 0xFE	; 254
     b3e:	fc 01       	movw	r30, r24
     b40:	80 81       	ld	r24, Z
     b42:	91 81       	ldd	r25, Z+1	; 0x01
     b44:	40 ec       	ldi	r20, 0xC0	; 192
     b46:	52 e1       	ldi	r21, 0x12	; 18
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	81 5e       	subi	r24, 0xE1	; 225
     b56:	9e 4f       	sbci	r25, 0xFE	; 254
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	9c 01       	movw	r18, r24
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	05 96       	adiw	r24, 0x05	; 5
     b66:	b9 01       	movw	r22, r18
     b68:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN13Adafruit_FONA5beginER6Stream>
}
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <_ZN10GsmManager14getBattPercentEPj+0x6>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <_ZN10GsmManager14getBattPercentEPj+0x8>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	7c 83       	std	Y+4, r23	; 0x04
     b8c:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	fc 01       	movw	r30, r24
     b94:	94 81       	ldd	r25, Z+4	; 0x04
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	99 23       	and	r25, r25
     b9a:	09 f4       	brne	.+2      	; 0xb9e <_ZN10GsmManager14getBattPercentEPj+0x24>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	88 23       	and	r24, r24
     ba0:	49 f0       	breq	.+18     	; 0xbb4 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	23 e6       	ldi	r18, 0x63	; 99
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	31 83       	std	Z+1, r19	; 0x01
     bae:	20 83       	st	Z, r18
		return true;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	05 96       	adiw	r24, 0x05	; 5
     bba:	2b 81       	ldd	r18, Y+3	; 0x03
     bbc:	3c 81       	ldd	r19, Y+4	; 0x04
     bbe:	b9 01       	movw	r22, r18
     bc0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	69 97       	sbiw	r28, 0x19	; 25
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	9f 8b       	std	Y+23, r25	; 0x17
     be8:	8e 8b       	std	Y+22, r24	; 0x16
     bea:	79 8f       	std	Y+25, r23	; 0x19
     bec:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     bee:	8e 89       	ldd	r24, Y+22	; 0x16
     bf0:	9f 89       	ldd	r25, Y+23	; 0x17
     bf2:	fc 01       	movw	r30, r24
     bf4:	94 81       	ldd	r25, Z+4	; 0x04
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	99 23       	and	r25, r25
     bfa:	09 f4       	brne	.+2      	; 0xbfe <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	88 23       	and	r24, r24
     c00:	11 f0       	breq	.+4      	; 0xc06 <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	26 c0       	rjmp	.+76     	; 0xc52 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     c06:	2e e0       	ldi	r18, 0x0E	; 14
     c08:	e1 e4       	ldi	r30, 0x41	; 65
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	dc 01       	movw	r26, r24
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	2a 95       	dec	r18
     c18:	e1 f7       	brne	.-8      	; 0xc12 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     c1a:	27 e0       	ldi	r18, 0x07	; 7
     c1c:	ce 01       	movw	r24, r28
     c1e:	0f 96       	adiw	r24, 0x0f	; 15
     c20:	fc 01       	movw	r30, r24
     c22:	32 2f       	mov	r19, r18
     c24:	11 92       	st	Z+, r1
     c26:	3a 95       	dec	r19
     c28:	e9 f7       	brne	.-6      	; 0xc24 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     c2a:	8e 89       	ldd	r24, Y+22	; 0x16
     c2c:	9f 89       	ldd	r25, Y+23	; 0x17
     c2e:	05 96       	adiw	r24, 0x05	; 5
     c30:	28 8d       	ldd	r18, Y+24	; 0x18
     c32:	39 8d       	ldd	r19, Y+25	; 0x19
     c34:	a9 01       	movw	r20, r18
     c36:	9e 01       	movw	r18, r28
     c38:	2f 5f       	subi	r18, 0xFF	; 255
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	b9 01       	movw	r22, r18
     c3e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     c42:	98 2f       	mov	r25, r24
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	89 27       	eor	r24, r25
     c48:	88 23       	and	r24, r24
     c4a:	11 f0       	breq	.+4      	; 0xc50 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     c50:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c52:	69 96       	adiw	r28, 0x19	; 25
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 d0       	rcall	.+0      	; 0xc6a <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	7c 83       	std	Y+4, r23	; 0x04
     c76:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus(); //?TODO: ERRORS?
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN10GsmManager16getNetworkStatusEv>
     c80:	28 2f       	mov	r18, r24
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	fc 01       	movw	r30, r24
     c88:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN10GsmManager7getRSSIEv>
     c92:	28 2f       	mov	r18, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	fc 01       	movw	r30, r24
     c9a:	21 83       	std	Z+1, r18	; 0x01
}
     c9c:	00 00       	nop
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	fc 01       	movw	r30, r24
     cc0:	94 81       	ldd	r25, Z+4	; 0x04
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	99 23       	and	r25, r25
     cc6:	09 f4       	brne	.+2      	; 0xcca <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	88 23       	and	r24, r24
     ccc:	11 f0       	breq	.+4      	; 0xcd2 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	05 96       	adiw	r24, 0x05	; 5
     cd8:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <_ZN10GsmManager7getRSSIEv+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	fc 01       	movw	r30, r24
     cfa:	94 81       	ldd	r25, Z+4	; 0x04
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	99 23       	and	r25, r25
     d00:	09 f4       	brne	.+2      	; 0xd04 <_ZN10GsmManager7getRSSIEv+0x1e>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	88 23       	and	r24, r24
     d06:	11 f0       	breq	.+4      	; 0xd0c <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     d08:	85 e1       	ldi	r24, 0x15	; 21
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	05 96       	adiw	r24, 0x05	; 5
     d12:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <_ZN13Adafruit_FONA7getRSSIEv>
}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 d0       	rcall	.+0      	; 0xd26 <_ZN10GsmManager10enableGPRSEb+0x6>
     d26:	1f 92       	push	r1
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	05 96       	adiw	r24, 0x05	; 5
     d38:	6b 81       	ldd	r22, Y+3	; 0x03
     d3a:	0e 94 c9 23 	call	0x4792	; 0x4792 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	2e 97       	sbiw	r28, 0x0e	; 14
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	9c 87       	std	Y+12, r25	; 0x0c
     d6c:	8b 87       	std	Y+11, r24	; 0x0b
     d6e:	7e 87       	std	Y+14, r23	; 0x0e
     d70:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     d72:	8b 85       	ldd	r24, Y+11	; 0x0b
     d74:	9c 85       	ldd	r25, Y+12	; 0x0c
     d76:	fc 01       	movw	r30, r24
     d78:	94 81       	ldd	r25, Z+4	; 0x04
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	99 23       	and	r25, r25
     d7e:	09 f4       	brne	.+2      	; 0xd82 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	88 23       	and	r24, r24
     d84:	19 f0       	breq	.+6      	; 0xd8c <_ZN10GsmManager11sendViaGprsEPKc+0x42>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	99 c0       	rjmp	.+306    	; 0xebe <_ZN10GsmManager11sendViaGprsEPKc+0x174>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);

	uint16_t ret = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/do.php"; //TODO: check should not require https!
     d94:	86 e5       	ldi	r24, 0x56	; 86
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9d 83       	std	Y+5, r25	; 0x05
     d9a:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     da0:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <strlen>
     da4:	8c 01       	movw	r16, r24
     da6:	4a e5       	ldi	r20, 0x5A	; 90
     da8:	52 e0       	ldi	r21, 0x02	; 2
     daa:	8b 85       	ldd	r24, Y+11	; 0x0b
     dac:	9c 85       	ldd	r25, Y+12	; 0x0c
     dae:	05 96       	adiw	r24, 0x05	; 5
     db0:	de 01       	movw	r26, r28
     db2:	19 96       	adiw	r26, 0x09	; 9
     db4:	fe 01       	movw	r30, r28
     db6:	37 96       	adiw	r30, 0x07	; 7
     db8:	2d 85       	ldd	r18, Y+13	; 0x0d
     dba:	3e 85       	ldd	r19, Y+14	; 0x0e
     dbc:	6c 81       	ldd	r22, Y+4	; 0x04
     dbe:	7d 81       	ldd	r23, Y+5	; 0x05
     dc0:	6d 01       	movw	r12, r26
     dc2:	7f 01       	movw	r14, r30
     dc4:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     dc8:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	89 27       	eor	r24, r25
     dd0:	88 23       	and	r24, r24
     dd2:	11 f1       	breq	.+68     	; 0xe18 <_ZN10GsmManager11sendViaGprsEPKc+0xce>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     dd4:	25 e6       	ldi	r18, 0x65	; 101
     dd6:	32 e0       	ldi	r19, 0x02	; 2
     dd8:	46 e6       	ldi	r20, 0x66	; 102
     dda:	52 e0       	ldi	r21, 0x02	; 2
     ddc:	67 e6       	ldi	r22, 0x67	; 103
     dde:	72 e0       	ldi	r23, 0x02	; 2
     de0:	8b 85       	ldd	r24, Y+11	; 0x0b
     de2:	9c 85       	ldd	r25, Y+12	; 0x0c
     de4:	05 96       	adiw	r24, 0x05	; 5
     de6:	0e 94 77 1d 	call	0x3aee	; 0x3aee <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     dea:	8d 85       	ldd	r24, Y+13	; 0x0d
     dec:	9e 85       	ldd	r25, Y+14	; 0x0e
     dee:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <strlen>
     df2:	8c 01       	movw	r16, r24
     df4:	42 e7       	ldi	r20, 0x72	; 114
     df6:	52 e0       	ldi	r21, 0x02	; 2
     df8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dfa:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfc:	05 96       	adiw	r24, 0x05	; 5
     dfe:	de 01       	movw	r26, r28
     e00:	19 96       	adiw	r26, 0x09	; 9
     e02:	fe 01       	movw	r30, r28
     e04:	37 96       	adiw	r30, 0x07	; 7
     e06:	2d 85       	ldd	r18, Y+13	; 0x0d
     e08:	3e 85       	ldd	r19, Y+14	; 0x0e
     e0a:	6c 81       	ldd	r22, Y+4	; 0x04
     e0c:	7d 81       	ldd	r23, Y+5	; 0x05
     e0e:	6d 01       	movw	r12, r26
     e10:	7f 01       	movw	r14, r30
     e12:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     e16:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 27       	eor	r24, r25
     e1e:	88 23       	and	r24, r24
     e20:	29 f0       	breq	.+10     	; 0xe2c <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
	{
		ret = 999;
     e22:	87 ee       	ldi	r24, 0xE7	; 231
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	47 c0       	rjmp	.+142    	; 0xeba <_ZN10GsmManager11sendViaGprsEPKc+0x170>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	18 16       	cp	r1, r24
     e32:	19 06       	cpc	r1, r25
     e34:	8c f5       	brge	.+98     	; 0xe98 <_ZN10GsmManager11sendViaGprsEPKc+0x14e>
			while (fona.available()) {
     e36:	8b 85       	ldd	r24, Y+11	; 0x0b
     e38:	9c 85       	ldd	r25, Y+12	; 0x0c
     e3a:	05 96       	adiw	r24, 0x05	; 5
     e3c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <_ZN13Adafruit_FONA9availableEv>
     e40:	21 e0       	ldi	r18, 0x01	; 1
     e42:	89 2b       	or	r24, r25
     e44:	09 f4       	brne	.+2      	; 0xe48 <_ZN10GsmManager11sendViaGprsEPKc+0xfe>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	22 23       	and	r18, r18
     e4a:	81 f3       	breq	.-32     	; 0xe2c <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
				char c = fona.read();
     e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e50:	05 96       	adiw	r24, 0x05	; 5
     e52:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <_ZN13Adafruit_FONA4readEv>
     e56:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     e58:	80 ec       	ldi	r24, 0xC0	; 192
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	80 72       	andi	r24, 0x20	; 32
     e66:	99 27       	eor	r25, r25
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	89 2b       	or	r24, r25
     e6c:	09 f0       	breq	.+2      	; 0xe70 <_ZN10GsmManager11sendViaGprsEPKc+0x126>
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	22 23       	and	r18, r18
     e72:	09 f0       	breq	.+2      	; 0xe76 <_ZN10GsmManager11sendViaGprsEPKc+0x12c>
     e74:	f1 cf       	rjmp	.-30     	; 0xe58 <_ZN10GsmManager11sendViaGprsEPKc+0x10e>
				UDR0 = c;
     e76:	86 ec       	ldi	r24, 0xC6	; 198
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2e 81       	ldd	r18, Y+6	; 0x06
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
					                                                      
				length--;
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	9a 87       	std	Y+10, r25	; 0x0a
     e88:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	89 2b       	or	r24, r25
     e90:	09 f0       	breq	.+2      	; 0xe94 <_ZN10GsmManager11sendViaGprsEPKc+0x14a>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     e92:	d1 cf       	rjmp	.-94     	; 0xe36 <_ZN10GsmManager11sendViaGprsEPKc+0xec>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     e94:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     e96:	ca cf       	rjmp	.-108    	; 0xe2c <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     e98:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e9c:	05 96       	adiw	r24, 0x05	; 5
     e9e:	0e 94 4d 22 	call	0x449a	; 0x449a <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	88 3c       	cpi	r24, 0xC8	; 200
     ea8:	91 05       	cpc	r25, r1
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <_ZN10GsmManager11sendViaGprsEPKc+0x16c>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ebe:	2e 96       	adiw	r28, 0x0e	; 14
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	08 95       	ret

00000edc <setup>:
void initModule(uint8_t moduleId);
void on3MinutesElapsed(bool doWrite);
void printData();
void initSubsystems();

void setup() {
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	// Optionally configure HTTP gets to follow redirects over SSL.
	// Default is not to follow SSL redirects, however if you uncomment
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);

	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
     ee4:	68 eb       	ldi	r22, 0xB8	; 184
     ee6:	7b e0       	ldi	r23, 0x0B	; 11
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
	
	Wire.begin();
     ef0:	84 e5       	ldi	r24, 0x54	; 84
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire5beginEv>
	
	#ifdef DEBUG
		Serial.begin(9600); //Writes to Serial output
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	55 e2       	ldi	r21, 0x25	; 37
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e6       	ldi	r24, 0x60	; 96
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <_ZN14HardwareSerial5beginEm>
		Serial.println(F("Starting..."));
     f08:	8d e7       	ldi	r24, 0x7D	; 125
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	bc 01       	movw	r22, r24
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	#endif

	gps.setFona(fona);
     f16:	64 e4       	ldi	r22, 0x44	; 68
     f18:	73 e0       	ldi	r23, 0x03	; 3
     f1a:	8e e5       	ldi	r24, 0x5E	; 94
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
     f22:	64 e4       	ldi	r22, 0x44	; 68
     f24:	73 e0       	ldi	r23, 0x03	; 3
     f26:	89 e7       	ldi	r24, 0x79	; 121
     f28:	95 e0       	ldi	r25, 0x05	; 5
     f2a:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (INITIALISE_MODULE) {
     f2e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <INITIALISE_MODULE>
     f32:	88 23       	and	r24, r24
     f34:	21 f0       	breq	.+8      	; 0xf3e <setup+0x62>
		initModule(INIT_MODULE_ID);
     f36:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <INIT_MODULE_ID>
     f3a:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z10initModuleh>
	}

	initSubsystems();
     f3e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z14initSubsystemsv>
}
     f42:	00 00       	nop
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <_Z14initSubsystemsv>:

void initSubsystems(){
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62

	if (!gsm.begin()) {
     f52:	89 e7       	ldi	r24, 0x79	; 121
     f54:	95 e0       	ldi	r25, 0x05	; 5
     f56:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN10GsmManager5beginEv>
     f5a:	98 2f       	mov	r25, r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	89 27       	eor	r24, r25
     f60:	88 23       	and	r24, r24
     f62:	31 f4       	brne	.+12     	; 0xf70 <_Z14initSubsystemsv+0x26>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)){
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	8e e5       	ldi	r24, 0x5E	; 94
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN10GpsManager9toggleGpsEb>
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <_Z14initSubsystemsv+0x28>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
     f70:	00 00       	nop
	if (!gps.toggleGps(true)){
	
		//TODO: store in ROM
		return;
	}
}
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <_Z17getReadingAddressh>:

uint16_t getReadingAddress(uint8_t readingNum){
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <_Z17getReadingAddressh+0x6>
     f7e:	1f 92       	push	r1
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	8b 83       	std	Y+3, r24	; 0x03
	
	uint16_t writeAddress =
		MEM_START +
     f86:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEM_START>
     f8a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MEM_START+0x1>
     f8e:	9c 01       	movw	r18, r24
     f90:	2e 5f       	subi	r18, 0xFE	; 254
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
		sizeof(ModuleMeta) + //Skip metadata area
		readingNum*sizeof(SingleSession);
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	48 2f       	mov	r20, r24
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	68 e2       	ldi	r22, 0x28	; 40
     f9c:	64 9f       	mul	r22, r20
     f9e:	c0 01       	movw	r24, r0
     fa0:	65 9f       	mul	r22, r21
     fa2:	90 0d       	add	r25, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
		
	return writeAddress;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <_Z7readMemiPhh>:

void readMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	29 97       	sbiw	r28, 0x09	; 9
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	78 87       	std	Y+8, r23	; 0x08
     fd8:	6f 83       	std	Y+7, r22	; 0x07
     fda:	49 87       	std	Y+9, r20	; 0x09

	Serial.print(F("Reading memory at address "));
     fdc:	89 e8       	ldi	r24, 0x89	; 137
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	bc 01       	movw	r22, r24
     fe2:	80 e6       	ldi	r24, 0x60	; 96
     fe4:	97 e0       	ldi	r25, 0x07	; 7
     fe6:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(address);
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	4a e0       	ldi	r20, 0x0A	; 10
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	bc 01       	movw	r22, r24
     ff4:	80 e6       	ldi	r24, 0x60	; 96
     ff6:	97 e0       	ldi	r25, 0x07	; 7
     ff8:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
	Serial.print(F(" to address "));
     ffc:	84 ea       	ldi	r24, 0xA4	; 164
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	bc 01       	movw	r22, r24
    1002:	80 e6       	ldi	r24, 0x60	; 96
    1004:	97 e0       	ldi	r25, 0x07	; 7
    1006:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	//Serial.print((uint8_t)data);//TODO
	Serial.print(F(" of size "));
    100a:	81 eb       	ldi	r24, 0xB1	; 177
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	bc 01       	movw	r22, r24
    1010:	80 e6       	ldi	r24, 0x60	; 96
    1012:	97 e0       	ldi	r25, 0x07	; 7
    1014:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(numBytes);
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	4a e0       	ldi	r20, 0x0A	; 10
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	68 2f       	mov	r22, r24
    1020:	80 e6       	ldi	r24, 0x60	; 96
    1022:	97 e0       	ldi	r25, 0x07	; 7
    1024:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
	
	for(uint8_t i=0;i<numBytes;i++) {
    1028:	19 82       	std	Y+1, r1	; 0x01
    102a:	99 85       	ldd	r25, Y+9	; 0x09
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	29 81       	ldd	r18, Y+1	; 0x01
    1030:	29 17       	cp	r18, r25
    1032:	08 f0       	brcs	.+2      	; 0x1036 <_Z7readMemiPhh+0x78>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	88 23       	and	r24, r24
    1038:	09 f4       	brne	.+2      	; 0x103c <_Z7readMemiPhh+0x7e>
    103a:	94 c0       	rjmp	.+296    	; 0x1164 <_Z7readMemiPhh+0x1a6>
		
		uint16_t thisByteAddr = address+i;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	82 0f       	add	r24, r18
    1048:	93 1f       	adc	r25, r19
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
		
		Serial.print(F("Reading byte at address "));
    104e:	8b eb       	ldi	r24, 0xBB	; 187
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	bc 01       	movw	r22, r24
    1054:	80 e6       	ldi	r24, 0x60	; 96
    1056:	97 e0       	ldi	r25, 0x07	; 7
    1058:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(thisByteAddr);
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	4a e0       	ldi	r20, 0x0A	; 10
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	bc 01       	movw	r22, r24
    1066:	80 e6       	ldi	r24, 0x60	; 96
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print5printEji>
		
		Serial.print(F("...with MSB "));
    106e:	84 ed       	ldi	r24, 0xD4	; 212
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	bc 01       	movw	r22, r24
    1074:	80 e6       	ldi	r24, 0x60	; 96
    1076:	97 e0       	ldi	r25, 0x07	; 7
    1078:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print((int) (thisByteAddr>>8) );
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	89 2f       	mov	r24, r25
    1082:	99 27       	eor	r25, r25
    1084:	4a e0       	ldi	r20, 0x0A	; 10
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	bc 01       	movw	r22, r24
    108a:	80 e6       	ldi	r24, 0x60	; 96
    108c:	97 e0       	ldi	r25, 0x07	; 7
    108e:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
		Serial.print(F(" and LSB "));
    1092:	81 ee       	ldi	r24, 0xE1	; 225
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	bc 01       	movw	r22, r24
    1098:	80 e6       	ldi	r24, 0x60	; 96
    109a:	97 e0       	ldi	r25, 0x07	; 7
    109c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print((int) (thisByteAddr&0xFF) );
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	99 27       	eor	r25, r25
    10a6:	4a e0       	ldi	r20, 0x0A	; 10
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	bc 01       	movw	r22, r24
    10ac:	80 e6       	ldi	r24, 0x60	; 96
    10ae:	97 e0       	ldi	r25, 0x07	; 7
    10b0:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
		Serial.print(F(" : "));
    10b4:	8b ee       	ldi	r24, 0xEB	; 235
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	bc 01       	movw	r22, r24
    10ba:	80 e6       	ldi	r24, 0x60	; 96
    10bc:	97 e0       	ldi	r25, 0x07	; 7
    10be:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		
		Wire.beginTransmission(0x50);
    10c2:	60 e5       	ldi	r22, 0x50	; 80
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	84 e5       	ldi	r24, 0x54	; 84
    10c8:	97 e0       	ldi	r25, 0x07	; 7
    10ca:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int)thisByteAddr>>8); // msb
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	89 2f       	mov	r24, r25
    10d4:	99 0f       	add	r25, r25
    10d6:	99 0b       	sbc	r25, r25
    10d8:	bc 01       	movw	r22, r24
    10da:	84 e5       	ldi	r24, 0x54	; 84
    10dc:	97 e0       	ldi	r25, 0x07	; 7
    10de:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire5writeEi>
		Wire.write((int)thisByteAddr&0xFF); // lsb
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	99 27       	eor	r25, r25
    10e8:	bc 01       	movw	r22, r24
    10ea:	84 e5       	ldi	r24, 0x54	; 84
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    10ee:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    10f2:	84 e5       	ldi	r24, 0x54	; 84
    10f4:	97 e0       	ldi	r25, 0x07	; 7
    10f6:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire15endTransmissionEv>
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	60 e5       	ldi	r22, 0x50	; 80
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	84 e5       	ldi	r24, 0x54	; 84
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
    110e:	84 e5       	ldi	r24, 0x54	; 84
    1110:	97 e0       	ldi	r25, 0x07	; 7
    1112:	0e 94 a5 12 	call	0x254a	; 0x254a <_ZN7TwoWire9availableEv>
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	89 2b       	or	r24, r25
    111a:	09 f4       	brne	.+2      	; 0x111e <_Z7readMemiPhh+0x160>
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	22 23       	and	r18, r18
    1120:	29 f0       	breq	.+10     	; 0x112c <_Z7readMemiPhh+0x16e>
			readByte = Wire.read();
    1122:	84 e5       	ldi	r24, 0x54	; 84
    1124:	97 e0       	ldi	r25, 0x07	; 7
    1126:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN7TwoWire4readEv>
    112a:	8a 83       	std	Y+2, r24	; 0x02
		
		Serial.print(F("Raw byte read:"));
    112c:	8f ee       	ldi	r24, 0xEF	; 239
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	bc 01       	movw	r22, r24
    1132:	80 e6       	ldi	r24, 0x60	; 96
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(readByte);
    113a:	4a e0       	ldi	r20, 0x0A	; 10
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	6a 81       	ldd	r22, Y+2	; 0x02
    1140:	80 e6       	ldi	r24, 0x60	; 96
    1142:	97 e0       	ldi	r25, 0x07	; 7
    1144:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
		
		*(data+i) = readByte;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	2f 81       	ldd	r18, Y+7	; 0x07
    1150:	38 85       	ldd	r19, Y+8	; 0x08
    1152:	82 0f       	add	r24, r18
    1154:	93 1f       	adc	r25, r19
    1156:	2a 81       	ldd	r18, Y+2	; 0x02
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
	Serial.print(F(" to address "));
	//Serial.print((uint8_t)data);//TODO
	Serial.print(F(" of size "));
	Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	63 cf       	rjmp	.-314    	; 0x102a <_Z7readMemiPhh+0x6c>
		Serial.print(F("Raw byte read:"));
		Serial.println(readByte);
		
		*(data+i) = readByte;
	}
}
    1164:	00 00       	nop
    1166:	29 96       	adiw	r28, 0x09	; 9
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <_Z8writeMemiPhh>:

void writeMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	28 97       	sbiw	r28, 0x08	; 8
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	9d 83       	std	Y+5, r25	; 0x05
    118e:	8c 83       	std	Y+4, r24	; 0x04
    1190:	7f 83       	std	Y+7, r23	; 0x07
    1192:	6e 83       	std	Y+6, r22	; 0x06
    1194:	48 87       	std	Y+8, r20	; 0x08
	
	Serial.print(F("Writing memory at address "));
    1196:	8e ef       	ldi	r24, 0xFE	; 254
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	bc 01       	movw	r22, r24
    119c:	80 e6       	ldi	r24, 0x60	; 96
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(address);
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	4a e0       	ldi	r20, 0x0A	; 10
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	bc 01       	movw	r22, r24
    11ae:	80 e6       	ldi	r24, 0x60	; 96
    11b0:	97 e0       	ldi	r25, 0x07	; 7
    11b2:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
	Serial.print(F(" from address "));
    11b6:	89 e1       	ldi	r24, 0x19	; 25
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	bc 01       	movw	r22, r24
    11bc:	80 e6       	ldi	r24, 0x60	; 96
    11be:	97 e0       	ldi	r25, 0x07	; 7
    11c0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	//Serial.print((uint8_t)data); //TODO
	Serial.print(F(" of size "));
    11c4:	88 e2       	ldi	r24, 0x28	; 40
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	bc 01       	movw	r22, r24
    11ca:	80 e6       	ldi	r24, 0x60	; 96
    11cc:	97 e0       	ldi	r25, 0x07	; 7
    11ce:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(numBytes);
    11d2:	88 85       	ldd	r24, Y+8	; 0x08
    11d4:	4a e0       	ldi	r20, 0x0A	; 10
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	68 2f       	mov	r22, r24
    11da:	80 e6       	ldi	r24, 0x60	; 96
    11dc:	97 e0       	ldi	r25, 0x07	; 7
    11de:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
	
	for(uint8_t i=0;i<numBytes;i++) {
    11e2:	19 82       	std	Y+1, r1	; 0x01
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	29 17       	cp	r18, r25
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <_Z8writeMemiPhh+0x78>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <_Z8writeMemiPhh+0x7e>
    11f4:	87 c0       	rjmp	.+270    	; 0x1304 <_Z8writeMemiPhh+0x18c>

		uint16_t thisByteAddr = address+i;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	82 0f       	add	r24, r18
    1202:	93 1f       	adc	r25, r19
    1204:	9b 83       	std	Y+3, r25	; 0x03
    1206:	8a 83       	std	Y+2, r24	; 0x02
				
		Serial.print(F("Writing byte at address "));
    1208:	82 e3       	ldi	r24, 0x32	; 50
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	bc 01       	movw	r22, r24
    120e:	80 e6       	ldi	r24, 0x60	; 96
    1210:	97 e0       	ldi	r25, 0x07	; 7
    1212:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(thisByteAddr);
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	9b 81       	ldd	r25, Y+3	; 0x03
    121a:	4a e0       	ldi	r20, 0x0A	; 10
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	bc 01       	movw	r22, r24
    1220:	80 e6       	ldi	r24, 0x60	; 96
    1222:	97 e0       	ldi	r25, 0x07	; 7
    1224:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print5printEji>
		
		Serial.print(F("...with MSB "));
    1228:	8b e4       	ldi	r24, 0x4B	; 75
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	bc 01       	movw	r22, r24
    122e:	80 e6       	ldi	r24, 0x60	; 96
    1230:	97 e0       	ldi	r25, 0x07	; 7
    1232:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print((int) (thisByteAddr>>8) );
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	89 2f       	mov	r24, r25
    123c:	99 27       	eor	r25, r25
    123e:	4a e0       	ldi	r20, 0x0A	; 10
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	bc 01       	movw	r22, r24
    1244:	80 e6       	ldi	r24, 0x60	; 96
    1246:	97 e0       	ldi	r25, 0x07	; 7
    1248:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
		Serial.print(F(" and LSB "));
    124c:	88 e5       	ldi	r24, 0x58	; 88
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	bc 01       	movw	r22, r24
    1252:	80 e6       	ldi	r24, 0x60	; 96
    1254:	97 e0       	ldi	r25, 0x07	; 7
    1256:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print((int) (thisByteAddr&0xFF) );
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	99 27       	eor	r25, r25
    1260:	4a e0       	ldi	r20, 0x0A	; 10
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	bc 01       	movw	r22, r24
    1266:	80 e6       	ldi	r24, 0x60	; 96
    1268:	97 e0       	ldi	r25, 0x07	; 7
    126a:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
		Serial.print(F(" : "));
    126e:	82 e6       	ldi	r24, 0x62	; 98
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	bc 01       	movw	r22, r24
    1274:	80 e6       	ldi	r24, 0x60	; 96
    1276:	97 e0       	ldi	r25, 0x07	; 7
    1278:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(*(data+i));
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	2e 81       	ldd	r18, Y+6	; 0x06
    1284:	3f 81       	ldd	r19, Y+7	; 0x07
    1286:	82 0f       	add	r24, r18
    1288:	93 1f       	adc	r25, r19
    128a:	fc 01       	movw	r30, r24
    128c:	80 81       	ld	r24, Z
    128e:	4a e0       	ldi	r20, 0x0A	; 10
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	68 2f       	mov	r22, r24
    1294:	80 e6       	ldi	r24, 0x60	; 96
    1296:	97 e0       	ldi	r25, 0x07	; 7
    1298:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
		
		Wire.beginTransmission(0x50);
    129c:	60 e5       	ldi	r22, 0x50	; 80
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	84 e5       	ldi	r24, 0x54	; 84
    12a2:	97 e0       	ldi	r25, 0x07	; 7
    12a4:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int)thisByteAddr>>8); // msb
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	89 2f       	mov	r24, r25
    12ae:	99 0f       	add	r25, r25
    12b0:	99 0b       	sbc	r25, r25
    12b2:	bc 01       	movw	r22, r24
    12b4:	84 e5       	ldi	r24, 0x54	; 84
    12b6:	97 e0       	ldi	r25, 0x07	; 7
    12b8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire5writeEi>
		Wire.write((int)thisByteAddr&0xFF); // lsb
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	9b 81       	ldd	r25, Y+3	; 0x03
    12c0:	99 27       	eor	r25, r25
    12c2:	bc 01       	movw	r22, r24
    12c4:	84 e5       	ldi	r24, 0x54	; 84
    12c6:	97 e0       	ldi	r25, 0x07	; 7
    12c8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	2e 81       	ldd	r18, Y+6	; 0x06
    12d4:	3f 81       	ldd	r19, Y+7	; 0x07
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	68 2f       	mov	r22, r24
    12e0:	84 e5       	ldi	r24, 0x54	; 84
    12e2:	97 e0       	ldi	r25, 0x07	; 7
    12e4:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    12e8:	84 e5       	ldi	r24, 0x54	; 84
    12ea:	97 e0       	ldi	r25, 0x07	; 7
    12ec:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN7TwoWire15endTransmissionEv>
	
		delay(20); //Spec says 5 but that causes intermittent random reads at higher temperatures
    12f0:	64 e1       	ldi	r22, 0x14	; 20
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
	Serial.print(F(" from address "));
	//Serial.print((uint8_t)data); //TODO
	Serial.print(F(" of size "));
	Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	70 cf       	rjmp	.-288    	; 0x11e4 <_Z8writeMemiPhh+0x6c>
		Wire.write(*(data+i)); //go byte by byte
		Wire.endTransmission();
	
		delay(20); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    1304:	00 00       	nop
    1306:	28 96       	adiw	r28, 0x08	; 8
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <_Z10initModuleh>:

void initModule(uint8_t moduleId){
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	00 d0       	rcall	.+0      	; 0x131e <_Z10initModuleh+0x6>
    131e:	1f 92       	push	r1
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	8b 83       	std	Y+3, r24	; 0x03
	
	//Get last reading
	ModuleMeta meta;
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZN10ModuleMetaC1Ev>
	meta.moduleId = moduleId;
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	89 83       	std	Y+1, r24	; 0x01
	meta.numReadings = 0;
    1332:	1a 82       	std	Y+2, r1	; 0x02
	writeMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    1334:	42 e0       	ldi	r20, 0x02	; 2
    1336:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEM_START>
    133a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MEM_START+0x1>
    133e:	9c 01       	movw	r18, r24
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	bc 01       	movw	r22, r24
    1346:	c9 01       	movw	r24, r18
    1348:	0e 94 bc 08 	call	0x1178	; 0x1178 <_Z8writeMemiPhh>

	#ifdef DEBUG
		Serial.print("Module initialised with id ");
    134c:	69 e8       	ldi	r22, 0x89	; 137
    134e:	71 e0       	ldi	r23, 0x01	; 1
    1350:	80 e6       	ldi	r24, 0x60	; 96
    1352:	97 e0       	ldi	r25, 0x07	; 7
    1354:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
		Serial.println(moduleId);
    1358:	4a e0       	ldi	r20, 0x0A	; 10
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	6b 81       	ldd	r22, Y+3	; 0x03
    135e:	80 e6       	ldi	r24, 0x60	; 96
    1360:	97 e0       	ldi	r25, 0x07	; 7
    1362:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
	#endif
}
    1366:	00 00       	nop
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <_Z9printDatav>:

void printData(){
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	af 97       	sbiw	r28, 0x2f	; 47
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61

	//Get last reading
	ModuleMeta meta;
    1388:	ce 01       	movw	r24, r28
    138a:	06 96       	adiw	r24, 0x06	; 6
    138c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZN10ModuleMetaC1Ev>
	readMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    1390:	42 e0       	ldi	r20, 0x02	; 2
    1392:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEM_START>
    1396:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MEM_START+0x1>
    139a:	9c 01       	movw	r18, r24
    139c:	ce 01       	movw	r24, r28
    139e:	06 96       	adiw	r24, 0x06	; 6
    13a0:	bc 01       	movw	r22, r24
    13a2:	c9 01       	movw	r24, r18
    13a4:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z7readMemiPhh>

	Serial.print(F("Module #"));
    13a8:	86 e6       	ldi	r24, 0x66	; 102
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	bc 01       	movw	r22, r24
    13ae:	80 e6       	ldi	r24, 0x60	; 96
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(meta.moduleId);
    13b6:	8e 81       	ldd	r24, Y+6	; 0x06
    13b8:	4a e0       	ldi	r20, 0x0A	; 10
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	68 2f       	mov	r22, r24
    13be:	80 e6       	ldi	r24, 0x60	; 96
    13c0:	97 e0       	ldi	r25, 0x07	; 7
    13c2:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
	Serial.print(F(", Total #Readings: "));
    13c6:	8f e6       	ldi	r24, 0x6F	; 111
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	bc 01       	movw	r22, r24
    13cc:	80 e6       	ldi	r24, 0x60	; 96
    13ce:	97 e0       	ldi	r25, 0x07	; 7
    13d0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(meta.numReadings);
    13d4:	8f 81       	ldd	r24, Y+7	; 0x07
    13d6:	4a e0       	ldi	r20, 0x0A	; 10
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	68 2f       	mov	r22, r24
    13dc:	80 e6       	ldi	r24, 0x60	; 96
    13de:	97 e0       	ldi	r25, 0x07	; 7
    13e0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
		
	for(uint8_t i=0;i<meta.numReadings;i++){
    13e4:	19 82       	std	Y+1, r1	; 0x01
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	89 17       	cp	r24, r25
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <_Z9printDatav+0x7c>
    13ee:	f6 c0       	rjmp	.+492    	; 0x15dc <_Z9printDatav+0x268>
		
		Serial.print(F("Reading #"));
    13f0:	83 e8       	ldi	r24, 0x83	; 131
    13f2:	93 e0       	ldi	r25, 0x03	; 3
    13f4:	bc 01       	movw	r22, r24
    13f6:	80 e6       	ldi	r24, 0x60	; 96
    13f8:	97 e0       	ldi	r25, 0x07	; 7
    13fa:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(i);
    13fe:	4a e0       	ldi	r20, 0x0A	; 10
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	80 e6       	ldi	r24, 0x60	; 96
    1406:	97 e0       	ldi	r25, 0x07	; 7
    1408:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
		
		uint16_t readingAddr = getReadingAddress(i);
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	0e 94 bc 07 	call	0xf78	; 0xf78 <_Z17getReadingAddressh>
    1412:	9d 83       	std	Y+5, r25	; 0x05
    1414:	8c 83       	std	Y+4, r24	; 0x04
		SingleSession session;
		readMem(readingAddr, (uint8_t*)&session, sizeof(SingleSession));
    1416:	48 e2       	ldi	r20, 0x28	; 40
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	9e 01       	movw	r18, r28
    141e:	28 5f       	subi	r18, 0xF8	; 248
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z7readMemiPhh>
		
		Serial.print(F("Gsm-Status: "));
    1428:	8d e8       	ldi	r24, 0x8D	; 141
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	bc 01       	movw	r22, r24
    142e:	80 e6       	ldi	r24, 0x60	; 96
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gsmInfo.networkStatus);
    1436:	8a 85       	ldd	r24, Y+10	; 0x0a
    1438:	4a e0       	ldi	r20, 0x0A	; 10
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	68 2f       	mov	r22, r24
    143e:	80 e6       	ldi	r24, 0x60	; 96
    1440:	97 e0       	ldi	r25, 0x07	; 7
    1442:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
		Serial.print(F(", Gsm-RSSI: "));
    1446:	8a e9       	ldi	r24, 0x9A	; 154
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	bc 01       	movw	r22, r24
    144c:	80 e6       	ldi	r24, 0x60	; 96
    144e:	97 e0       	ldi	r25, 0x07	; 7
    1450:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gsmInfo.rssi);
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	4a e0       	ldi	r20, 0x0A	; 10
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	68 2f       	mov	r22, r24
    145c:	80 e6       	ldi	r24, 0x60	; 96
    145e:	97 e0       	ldi	r25, 0x07	; 7
    1460:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
		Serial.print(F(", Gsm-Error Code: "));
    1464:	87 ea       	ldi	r24, 0xA7	; 167
    1466:	93 e0       	ldi	r25, 0x03	; 3
    1468:	bc 01       	movw	r22, r24
    146a:	80 e6       	ldi	r24, 0x60	; 96
    146c:	97 e0       	ldi	r25, 0x07	; 7
    146e:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gsmInfo.errorCode);
    1472:	88 85       	ldd	r24, Y+8	; 0x08
    1474:	4a e0       	ldi	r20, 0x0A	; 10
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	68 2f       	mov	r22, r24
    147a:	80 e6       	ldi	r24, 0x60	; 96
    147c:	97 e0       	ldi	r25, 0x07	; 7
    147e:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
		
		Serial.print(F(", Gps-Status: "));
    1482:	8a eb       	ldi	r24, 0xBA	; 186
    1484:	93 e0       	ldi	r25, 0x03	; 3
    1486:	bc 01       	movw	r22, r24
    1488:	80 e6       	ldi	r24, 0x60	; 96
    148a:	97 e0       	ldi	r25, 0x07	; 7
    148c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.gpsStatus);
    1490:	8c 85       	ldd	r24, Y+12	; 0x0c
    1492:	08 2e       	mov	r0, r24
    1494:	00 0c       	add	r0, r0
    1496:	99 0b       	sbc	r25, r25
    1498:	4a e0       	ldi	r20, 0x0A	; 10
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	bc 01       	movw	r22, r24
    149e:	80 e6       	ldi	r24, 0x60	; 96
    14a0:	97 e0       	ldi	r25, 0x07	; 7
    14a2:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
		Serial.print(F(", Gps-Error Code: "));
    14a6:	89 ec       	ldi	r24, 0xC9	; 201
    14a8:	93 e0       	ldi	r25, 0x03	; 3
    14aa:	bc 01       	movw	r22, r24
    14ac:	80 e6       	ldi	r24, 0x60	; 96
    14ae:	97 e0       	ldi	r25, 0x07	; 7
    14b0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.errorCode);
    14b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b6:	4a e0       	ldi	r20, 0x0A	; 10
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	68 2f       	mov	r22, r24
    14bc:	80 e6       	ldi	r24, 0x60	; 96
    14be:	97 e0       	ldi	r25, 0x07	; 7
    14c0:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
		Serial.print(F(", Gps-Lat: "));
    14c4:	8c ed       	ldi	r24, 0xDC	; 220
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	bc 01       	movw	r22, r24
    14ca:	80 e6       	ldi	r24, 0x60	; 96
    14cc:	97 e0       	ldi	r25, 0x07	; 7
    14ce:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.lat);
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	af 85       	ldd	r26, Y+15	; 0x0f
    14d8:	b8 89       	ldd	r27, Y+16	; 0x10
    14da:	22 e0       	ldi	r18, 0x02	; 2
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	80 e6       	ldi	r24, 0x60	; 96
    14e4:	97 e0       	ldi	r25, 0x07	; 7
    14e6:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN5Print5printEdi>
		Serial.print(F(", Gps-Lon: "));
    14ea:	88 ee       	ldi	r24, 0xE8	; 232
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	bc 01       	movw	r22, r24
    14f0:	80 e6       	ldi	r24, 0x60	; 96
    14f2:	97 e0       	ldi	r25, 0x07	; 7
    14f4:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.lon);
    14f8:	89 89       	ldd	r24, Y+17	; 0x11
    14fa:	9a 89       	ldd	r25, Y+18	; 0x12
    14fc:	ab 89       	ldd	r26, Y+19	; 0x13
    14fe:	bc 89       	ldd	r27, Y+20	; 0x14
    1500:	22 e0       	ldi	r18, 0x02	; 2
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	ac 01       	movw	r20, r24
    1506:	bd 01       	movw	r22, r26
    1508:	80 e6       	ldi	r24, 0x60	; 96
    150a:	97 e0       	ldi	r25, 0x07	; 7
    150c:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN5Print5printEdi>
		Serial.print(F(", Gps-Date: "));
    1510:	84 ef       	ldi	r24, 0xF4	; 244
    1512:	93 e0       	ldi	r25, 0x03	; 3
    1514:	bc 01       	movw	r22, r24
    1516:	80 e6       	ldi	r24, 0x60	; 96
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.date);
    151e:	ce 01       	movw	r24, r28
    1520:	08 96       	adiw	r24, 0x08	; 8
    1522:	49 96       	adiw	r24, 0x19	; 25
    1524:	bc 01       	movw	r22, r24
    1526:	80 e6       	ldi	r24, 0x60	; 96
    1528:	97 e0       	ldi	r25, 0x07	; 7
    152a:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>


		
		Serial.println(F("Date Len: "));
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	94 e0       	ldi	r25, 0x04	; 4
    1532:	bc 01       	movw	r22, r24
    1534:	80 e6       	ldi	r24, 0x60	; 96
    1536:	97 e0       	ldi	r25, 0x07	; 7
    1538:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(strlen(session.gpsInfo.date));
    153c:	ce 01       	movw	r24, r28
    153e:	08 96       	adiw	r24, 0x08	; 8
    1540:	49 96       	adiw	r24, 0x19	; 25
    1542:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <strlen>
    1546:	4a e0       	ldi	r20, 0x0A	; 10
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	bc 01       	movw	r22, r24
    154c:	80 e6       	ldi	r24, 0x60	; 96
    154e:	97 e0       	ldi	r25, 0x07	; 7
    1550:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN5Print7printlnEji>
		
		for(int i=0;i<15;i++)
    1554:	1b 82       	std	Y+3, r1	; 0x03
    1556:	1a 82       	std	Y+2, r1	; 0x02
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	0f 97       	sbiw	r24, 0x0f	; 15
    155e:	a4 f4       	brge	.+40     	; 0x1588 <_Z9printDatav+0x214>
			Serial.println(session.gpsInfo.date[i]);
    1560:	9e 01       	movw	r18, r28
    1562:	2f 5d       	subi	r18, 0xDF	; 223
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	9b 81       	ldd	r25, Y+3	; 0x03
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	fc 01       	movw	r30, r24
    1570:	80 81       	ld	r24, Z
    1572:	68 2f       	mov	r22, r24
    1574:	80 e6       	ldi	r24, 0x60	; 96
    1576:	97 e0       	ldi	r25, 0x07	; 7
    1578:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEc>

		
		Serial.println(F("Date Len: "));
		Serial.println(strlen(session.gpsInfo.date));
		
		for(int i=0;i<15;i++)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	9b 83       	std	Y+3, r25	; 0x03
    1584:	8a 83       	std	Y+2, r24	; 0x02
    1586:	e8 cf       	rjmp	.-48     	; 0x1558 <_Z9printDatav+0x1e4>
			Serial.println(session.gpsInfo.date[i]);
			
			
		
		Serial.print(F(", Gps-Heading: "));
    1588:	8c e0       	ldi	r24, 0x0C	; 12
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	bc 01       	movw	r22, r24
    158e:	80 e6       	ldi	r24, 0x60	; 96
    1590:	97 e0       	ldi	r25, 0x07	; 7
    1592:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.heading);
    1596:	89 8d       	ldd	r24, Y+25	; 0x19
    1598:	9a 8d       	ldd	r25, Y+26	; 0x1a
    159a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    159c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    159e:	22 e0       	ldi	r18, 0x02	; 2
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	ac 01       	movw	r20, r24
    15a4:	bd 01       	movw	r22, r26
    15a6:	80 e6       	ldi	r24, 0x60	; 96
    15a8:	97 e0       	ldi	r25, 0x07	; 7
    15aa:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN5Print5printEdi>
		Serial.print(F(", Gps-Speed: "));
    15ae:	8c e1       	ldi	r24, 0x1C	; 28
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	bc 01       	movw	r22, r24
    15b4:	80 e6       	ldi	r24, 0x60	; 96
    15b6:	97 e0       	ldi	r25, 0x07	; 7
    15b8:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.speed_kph);
    15bc:	8d 89       	ldd	r24, Y+21	; 0x15
    15be:	9e 89       	ldd	r25, Y+22	; 0x16
    15c0:	af 89       	ldd	r26, Y+23	; 0x17
    15c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    15c4:	22 e0       	ldi	r18, 0x02	; 2
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	ac 01       	movw	r20, r24
    15ca:	bd 01       	movw	r22, r26
    15cc:	80 e6       	ldi	r24, 0x60	; 96
    15ce:	97 e0       	ldi	r25, 0x07	; 7
    15d0:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <_ZN5Print7printlnEdi>
	Serial.print(F("Module #"));
	Serial.print(meta.moduleId);
	Serial.print(F(", Total #Readings: "));
	Serial.println(meta.numReadings);
		
	for(uint8_t i=0;i<meta.numReadings;i++){
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	05 cf       	rjmp	.-502    	; 0x13e6 <_Z9printDatav+0x72>
		Serial.print(F(", Gps-Heading: "));
		Serial.print(session.gpsInfo.heading);
		Serial.print(F(", Gps-Speed: "));
		Serial.println(session.gpsInfo.speed_kph);
	}
}
    15dc:	00 00       	nop
    15de:	af 96       	adiw	r28, 0x2f	; 47
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite){
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	e5 97       	sbiw	r28, 0x35	; 53
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	8d ab       	std	Y+53, r24	; 0x35

	#ifdef DEBUG
		Serial.println(F("3 minutes elapsed - logging..."));
    1606:	8a e2       	ldi	r24, 0x2A	; 42
    1608:	94 e0       	ldi	r25, 0x04	; 4
    160a:	bc 01       	movw	r22, r24
    160c:	80 e6       	ldi	r24, 0x60	; 96
    160e:	97 e0       	ldi	r25, 0x07	; 7
    1610:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	#endif	
	
	byte META_SZ = sizeof(ModuleMeta);
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	89 83       	std	Y+1, r24	; 0x01
	byte SESSION_SZ = sizeof(SingleSession);
    1618:	88 e2       	ldi	r24, 0x28	; 40
    161a:	8a 83       	std	Y+2, r24	; 0x02
	
	//Get last reading
	ModuleMeta meta;
    161c:	ce 01       	movw	r24, r28
    161e:	05 96       	adiw	r24, 0x05	; 5
    1620:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZN10ModuleMetaC1Ev>
	readMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    1624:	42 e0       	ldi	r20, 0x02	; 2
    1626:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEM_START>
    162a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MEM_START+0x1>
    162e:	9c 01       	movw	r18, r24
    1630:	ce 01       	movw	r24, r28
    1632:	05 96       	adiw	r24, 0x05	; 5
    1634:	bc 01       	movw	r22, r24
    1636:	c9 01       	movw	r24, r18
    1638:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z7readMemiPhh>
	
	#ifdef DEBUG
		Serial.print(F("Module #"));
    163c:	89 e4       	ldi	r24, 0x49	; 73
    163e:	94 e0       	ldi	r25, 0x04	; 4
    1640:	bc 01       	movw	r22, r24
    1642:	80 e6       	ldi	r24, 0x60	; 96
    1644:	97 e0       	ldi	r25, 0x07	; 7
    1646:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(meta.moduleId);
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	4a e0       	ldi	r20, 0x0A	; 10
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	68 2f       	mov	r22, r24
    1652:	80 e6       	ldi	r24, 0x60	; 96
    1654:	97 e0       	ldi	r25, 0x07	; 7
    1656:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
		Serial.print(F(", Current #Readings: "));
    165a:	82 e5       	ldi	r24, 0x52	; 82
    165c:	94 e0       	ldi	r25, 0x04	; 4
    165e:	bc 01       	movw	r22, r24
    1660:	80 e6       	ldi	r24, 0x60	; 96
    1662:	97 e0       	ldi	r25, 0x07	; 7
    1664:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(meta.numReadings);
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	4a e0       	ldi	r20, 0x0A	; 10
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	68 2f       	mov	r22, r24
    1670:	80 e6       	ldi	r24, 0x60	; 96
    1672:	97 e0       	ldi	r25, 0x07	; 7
    1674:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
	#endif

	if (!doWrite)
    1678:	9d a9       	ldd	r25, Y+53	; 0x35
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 27       	eor	r24, r25
    167e:	88 23       	and	r24, r24
    1680:	09 f0       	breq	.+2      	; 0x1684 <_Z17on3MinutesElapsedb+0x94>
    1682:	8d c0       	rjmp	.+282    	; 0x179e <_Z17on3MinutesElapsedb+0x1ae>
		return;

	//Update the number of readings in metadata first so no matter what happens, existing data isnt overwritten
	meta.numReadings++;
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	8e 83       	std	Y+6, r24	; 0x06
	writeMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    168a:	42 e0       	ldi	r20, 0x02	; 2
    168c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEM_START>
    1690:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MEM_START+0x1>
    1694:	9c 01       	movw	r18, r24
    1696:	ce 01       	movw	r24, r28
    1698:	05 96       	adiw	r24, 0x05	; 5
    169a:	bc 01       	movw	r22, r24
    169c:	c9 01       	movw	r24, r18
    169e:	0e 94 bc 08 	call	0x1178	; 0x1178 <_Z8writeMemiPhh>
	
	SingleSession session;
	gps.getGpsInfo(session.gpsInfo);
    16a2:	ce 01       	movw	r24, r28
    16a4:	07 96       	adiw	r24, 0x07	; 7
    16a6:	03 96       	adiw	r24, 0x03	; 3
    16a8:	bc 01       	movw	r22, r24
    16aa:	8e e5       	ldi	r24, 0x5E	; 94
    16ac:	94 e0       	ldi	r25, 0x04	; 4
    16ae:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN10GpsManager10getGpsInfoER7GpsInfo>
	gsm.getGsmInfo(session.gsmInfo);
    16b2:	ce 01       	movw	r24, r28
    16b4:	07 96       	adiw	r24, 0x07	; 7
    16b6:	bc 01       	movw	r22, r24
    16b8:	89 e7       	ldi	r24, 0x79	; 121
    16ba:	95 e0       	ldi	r25, 0x05	; 5
    16bc:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN10GsmManager10getGsmInfoER7GsmInfo>

	
	Serial.print(F("Got GPS info, lat="));
    16c0:	88 e6       	ldi	r24, 0x68	; 104
    16c2:	94 e0       	ldi	r25, 0x04	; 4
    16c4:	bc 01       	movw	r22, r24
    16c6:	80 e6       	ldi	r24, 0x60	; 96
    16c8:	97 e0       	ldi	r25, 0x07	; 7
    16ca:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(session.gpsInfo.lat);
    16ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d2:	ae 85       	ldd	r26, Y+14	; 0x0e
    16d4:	bf 85       	ldd	r27, Y+15	; 0x0f
    16d6:	22 e0       	ldi	r18, 0x02	; 2
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	ac 01       	movw	r20, r24
    16dc:	bd 01       	movw	r22, r26
    16de:	80 e6       	ldi	r24, 0x60	; 96
    16e0:	97 e0       	ldi	r25, 0x07	; 7
    16e2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN5Print5printEdi>
	Serial.print(F(" lon="));
    16e6:	8b e7       	ldi	r24, 0x7B	; 123
    16e8:	94 e0       	ldi	r25, 0x04	; 4
    16ea:	bc 01       	movw	r22, r24
    16ec:	80 e6       	ldi	r24, 0x60	; 96
    16ee:	97 e0       	ldi	r25, 0x07	; 7
    16f0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(session.gpsInfo.lon);
    16f4:	88 89       	ldd	r24, Y+16	; 0x10
    16f6:	99 89       	ldd	r25, Y+17	; 0x11
    16f8:	aa 89       	ldd	r26, Y+18	; 0x12
    16fa:	bb 89       	ldd	r27, Y+19	; 0x13
    16fc:	22 e0       	ldi	r18, 0x02	; 2
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	ac 01       	movw	r20, r24
    1702:	bd 01       	movw	r22, r26
    1704:	80 e6       	ldi	r24, 0x60	; 96
    1706:	97 e0       	ldi	r25, 0x07	; 7
    1708:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN5Print5printEdi>
	Serial.print(F(" date="));
    170c:	81 e8       	ldi	r24, 0x81	; 129
    170e:	94 e0       	ldi	r25, 0x04	; 4
    1710:	bc 01       	movw	r22, r24
    1712:	80 e6       	ldi	r24, 0x60	; 96
    1714:	97 e0       	ldi	r25, 0x07	; 7
    1716:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(session.gpsInfo.date);
    171a:	ce 01       	movw	r24, r28
    171c:	07 96       	adiw	r24, 0x07	; 7
    171e:	49 96       	adiw	r24, 0x19	; 25
    1720:	bc 01       	movw	r22, r24
    1722:	80 e6       	ldi	r24, 0x60	; 96
    1724:	97 e0       	ldi	r25, 0x07	; 7
    1726:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
	Serial.print(F(" status="));
    172a:	88 e8       	ldi	r24, 0x88	; 136
    172c:	94 e0       	ldi	r25, 0x04	; 4
    172e:	bc 01       	movw	r22, r24
    1730:	80 e6       	ldi	r24, 0x60	; 96
    1732:	97 e0       	ldi	r25, 0x07	; 7
    1734:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(session.gpsInfo.gpsStatus);
    1738:	8b 85       	ldd	r24, Y+11	; 0x0b
    173a:	08 2e       	mov	r0, r24
    173c:	00 0c       	add	r0, r0
    173e:	99 0b       	sbc	r25, r25
    1740:	4a e0       	ldi	r20, 0x0A	; 10
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	bc 01       	movw	r22, r24
    1746:	80 e6       	ldi	r24, 0x60	; 96
    1748:	97 e0       	ldi	r25, 0x07	; 7
    174a:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
	Serial.print(F(" errCode="));
    174e:	81 e9       	ldi	r24, 0x91	; 145
    1750:	94 e0       	ldi	r25, 0x04	; 4
    1752:	bc 01       	movw	r22, r24
    1754:	80 e6       	ldi	r24, 0x60	; 96
    1756:	97 e0       	ldi	r25, 0x07	; 7
    1758:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(session.gpsInfo.errorCode);
    175c:	8a 85       	ldd	r24, Y+10	; 0x0a
    175e:	4a e0       	ldi	r20, 0x0A	; 10
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	68 2f       	mov	r22, r24
    1764:	80 e6       	ldi	r24, 0x60	; 96
    1766:	97 e0       	ldi	r25, 0x07	; 7
    1768:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEhi>
	

	
	uint16_t writeAddress = getReadingAddress(meta.numReadings);
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	0e 94 bc 07 	call	0xf78	; 0xf78 <_Z17getReadingAddressh>
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
//	Serial.print(F("Calculated next address for data to be written to: "));
//	Serial.println(writeAddress);
	
	//Run 2 tests
	//gsm.setGPRSNetworkSettings
	String sm = "";//"Module ID:"+ModuleMeta.moduleId+" transmitting.";
    1776:	ce 01       	movw	r24, r28
    1778:	8f 96       	adiw	r24, 0x2f	; 47
    177a:	65 ea       	ldi	r22, 0xA5	; 165
    177c:	71 e0       	ldi	r23, 0x01	; 1
    177e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN6StringC1EPKc>
	
	//gsm.sendViaSms(sm.c_str()); //TO: local number !
	//gsm.sendViaGprs(sm.c_str());
	
	writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	9e 01       	movw	r18, r28
    1788:	29 5f       	subi	r18, 0xF9	; 249
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	4a 81       	ldd	r20, Y+2	; 0x02
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 bc 08 	call	0x1178	; 0x1178 <_Z8writeMemiPhh>
//	Serial.print(F("Calculated next address for data to be written to: "));
//	Serial.println(writeAddress);
	
	//Run 2 tests
	//gsm.setGPRSNetworkSettings
	String sm = "";//"Module ID:"+ModuleMeta.moduleId+" transmitting.";
    1794:	ce 01       	movw	r24, r28
    1796:	8f 96       	adiw	r24, 0x2f	; 47
    1798:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN6StringD1Ev>
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <_Z17on3MinutesElapsedb+0x1b0>
		Serial.print(F(", Current #Readings: "));
		Serial.println(meta.numReadings);
	#endif

	if (!doWrite)
		return;
    179e:	00 00       	nop
	
	//gsm.sendViaSms(sm.c_str()); //TO: local number !
	//gsm.sendViaGprs(sm.c_str());
	
	writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
    17a0:	e5 96       	adiw	r28, 0x35	; 53
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <loop>:


volatile int _timerCounter = 0;
void loop() {
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62

	++_timerCounter;
    17ba:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <_timerCounter>
    17be:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <_timerCounter+0x1>
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	90 93 9b 06 	sts	0x069B, r25	; 0x80069b <_timerCounter+0x1>
    17c8:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <_timerCounter>
		
	delay(1000);
    17cc:	68 ee       	ldi	r22, 0xE8	; 232
    17ce:	73 e0       	ldi	r23, 0x03	; 3
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
	
	if (ONLY_PRINT_DATA) {
    17d8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ONLY_PRINT_DATA>
    17dc:	88 23       	and	r24, r24
    17de:	69 f0       	breq	.+26     	; 0x17fa <loop+0x48>
		
		if (_timerCounter==1)
    17e0:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <_timerCounter>
    17e4:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <_timerCounter+0x1>
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <loop+0x3e>
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	22 23       	and	r18, r18
    17f2:	31 f1       	breq	.+76     	; 0x1840 <loop+0x8e>
			printData();
    17f4:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z9printDatav>
		return; //No writes, informational only
    17f8:	23 c0       	rjmp	.+70     	; 0x1840 <loop+0x8e>
	}
	
	if (INITIALISE_MODULE){
    17fa:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <INITIALISE_MODULE>
    17fe:	88 23       	and	r24, r24
    1800:	09 f5       	brne	.+66     	; 0x1844 <loop+0x92>
		
		return; //Should be initialising the module once and writing to it with amended firmware
	}
	
	#ifdef DEBUG
		Serial.println("Looping");
    1802:	66 ea       	ldi	r22, 0xA6	; 166
    1804:	71 e0       	ldi	r23, 0x01	; 1
    1806:	80 e6       	ldi	r24, 0x60	; 96
    1808:	97 e0       	ldi	r25, 0x07	; 7
    180a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
	#endif
	
	if (DIAGNOSTIC_TEST) {
    180e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1812:	88 23       	and	r24, r24
    1814:	31 f0       	breq	.+12     	; 0x1822 <loop+0x70>
	
		//Write and print every second
		on3MinutesElapsed(true);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_Z17on3MinutesElapsedb>
		printData();
    181c:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z9printDatav>
		return;
    1820:	12 c0       	rjmp	.+36     	; 0x1846 <loop+0x94>
	}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins
    1822:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <_timerCounter>
    1826:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <_timerCounter+0x1>
    182a:	21 e0       	ldi	r18, 0x01	; 1
    182c:	84 3b       	cpi	r24, 0xB4	; 180
    182e:	91 05       	cpc	r25, r1
    1830:	09 f0       	breq	.+2      	; 0x1834 <loop+0x82>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	22 23       	and	r18, r18
    1836:	39 f0       	breq	.+14     	; 0x1846 <loop+0x94>
		on3MinutesElapsed(true);
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_Z17on3MinutesElapsedb>
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <loop+0x94>
	
	if (ONLY_PRINT_DATA) {
		
		if (_timerCounter==1)
			printData();
		return; //No writes, informational only
    1840:	00 00       	nop
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <loop+0x94>
	}
	
	if (INITIALISE_MODULE){
		
		return; //Should be initialising the module once and writing to it with amended firmware
    1844:	00 00       	nop
		return;
	}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins
		on3MinutesElapsed(true);
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <_Z41__static_initialization_and_destruction_0ii>:
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	00 d0       	rcall	.+0      	; 0x1852 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	7c 83       	std	Y+4, r23	; 0x04
    185e:	6b 83       	std	Y+3, r22	; 0x03
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	b9 f4       	brne	.+46     	; 0x1896 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	99 f4       	brne	.+38     	; 0x1896 <_Z41__static_initialization_and_destruction_0ii+0x4a>
//Have seen address 0 is typically worn out from testing in EEPROM and gives bogus reads at times 
//so start higher up on another cell, which is more reliable
uint16_t MEM_START = 170;

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    1870:	64 e0       	ldi	r22, 0x04	; 4
    1872:	84 e4       	ldi	r24, 0x44	; 68
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN13Adafruit_FONAC1Ea>
//RmMemManager mem(IS_SENSOR_MOCK);
GpsManager gps(IS_GPS_MOCK);
    187a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <IS_GPS_MOCK>
    187e:	68 2f       	mov	r22, r24
    1880:	8e e5       	ldi	r24, 0x5E	; 94
    1882:	94 e0       	ldi	r25, 0x04	; 4
    1884:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN10GpsManagerC1Eh>
GsmManager gsm(IS_GSM_MOCK);
    1888:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <IS_GSM_MOCK>
    188c:	68 2f       	mov	r22, r24
    188e:	89 e7       	ldi	r24, 0x79	; 121
    1890:	95 e0       	ldi	r25, 0x05	; 5
    1892:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN10GsmManagerC1Eh>
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	89 2b       	or	r24, r25
    189c:	61 f4       	brne	.+24     	; 0x18b6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	41 f4       	brne	.+16     	; 0x18b6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    18a6:	89 e7       	ldi	r24, 0x79	; 121
    18a8:	95 e0       	ldi	r25, 0x05	; 5
    18aa:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN10GsmManagerD1Ev>
uint16_t MEM_START = 170;

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
//RmMemManager mem(IS_SENSOR_MOCK);
GpsManager gps(IS_GPS_MOCK);
    18ae:	8e e5       	ldi	r24, 0x5E	; 94
    18b0:	94 e0       	ldi	r25, 0x04	; 4
    18b2:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN10GpsManagerD1Ev>
		return;
	}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins
		on3MinutesElapsed(true);
}
    18b6:	00 00       	nop
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <_GLOBAL__sub_I_DIAGNOSTIC_TEST>:
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	6f ef       	ldi	r22, 0xFF	; 255
    18d0:	7f ef       	ldi	r23, 0xFF	; 255
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 26 0c 	call	0x184c	; 0x184c <_Z41__static_initialization_and_destruction_0ii>
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <_GLOBAL__sub_D_DIAGNOSTIC_TEST>:
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
    18ea:	7f ef       	ldi	r23, 0xFF	; 255
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 26 0c 	call	0x184c	; 0x184c <_Z41__static_initialization_and_destruction_0ii>
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    1902:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_state>
  twi_sendStop = true;		// default value
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <twi_sendStop>
  twi_inRepStart = false;
    190c:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    1910:	82 e1       	ldi	r24, 0x12	; 18
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
  digitalWrite(SCL, 1);
    1918:	83 e1       	ldi	r24, 0x13	; 19
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    1920:	89 eb       	ldi	r24, 0xB9	; 185
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	29 eb       	ldi	r18, 0xB9	; 185
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	f9 01       	movw	r30, r18
    192a:	20 81       	ld	r18, Z
    192c:	2e 7f       	andi	r18, 0xFE	; 254
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    1932:	89 eb       	ldi	r24, 0xB9	; 185
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	29 eb       	ldi	r18, 0xB9	; 185
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	f9 01       	movw	r30, r18
    193c:	20 81       	ld	r18, Z
    193e:	2d 7f       	andi	r18, 0xFD	; 253
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    1944:	88 eb       	ldi	r24, 0xB8	; 184
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	28 e4       	ldi	r18, 0x48	; 72
    194a:	fc 01       	movw	r30, r24
    194c:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    194e:	8c eb       	ldi	r24, 0xBC	; 188
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	25 e4       	ldi	r18, 0x45	; 69
    1954:	fc 01       	movw	r30, r24
    1956:	20 83       	st	Z, r18
}
    1958:	00 00       	nop
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    1968:	8c eb       	ldi	r24, 0xBC	; 188
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	2c eb       	ldi	r18, 0xBC	; 188
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	f9 01       	movw	r30, r18
    1972:	20 81       	ld	r18, Z
    1974:	2a 7b       	andi	r18, 0xBA	; 186
    1976:	fc 01       	movw	r30, r24
    1978:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    197a:	82 e1       	ldi	r24, 0x12	; 18
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
  digitalWrite(SCL, 0);
    1982:	83 e1       	ldi	r24, 0x13	; 19
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
}
    198a:	00 00       	nop
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

00001992 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	1f 92       	push	r1
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    199e:	8a eb       	ldi	r24, 0xBA	; 186
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	29 81       	ldd	r18, Y+1	; 0x01
    19a4:	22 0f       	add	r18, r18
    19a6:	fc 01       	movw	r30, r24
    19a8:	20 83       	st	Z, r18
}
    19aa:	00 00       	nop
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	00 d0       	rcall	.+0      	; 0x19be <twi_setFrequency+0xa>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <twi_setFrequency+0xc>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	69 83       	std	Y+1, r22	; 0x01
    19c6:	7a 83       	std	Y+2, r23	; 0x02
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    19ca:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    19cc:	08 eb       	ldi	r16, 0xB8	; 184
    19ce:	10 e0       	ldi	r17, 0x00	; 0
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	94 e2       	ldi	r25, 0x24	; 36
    19d4:	a4 ef       	ldi	r26, 0xF4	; 244
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	29 81       	ldd	r18, Y+1	; 0x01
    19da:	3a 81       	ldd	r19, Y+2	; 0x02
    19dc:	4b 81       	ldd	r20, Y+3	; 0x03
    19de:	5c 81       	ldd	r21, Y+4	; 0x04
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 b5 2a 	call	0x556a	; 0x556a <__udivmodsi4>
    19e8:	da 01       	movw	r26, r20
    19ea:	c9 01       	movw	r24, r18
    19ec:	40 97       	sbiw	r24, 0x10	; 16
    19ee:	a1 09       	sbc	r26, r1
    19f0:	b1 09       	sbc	r27, r1
    19f2:	b6 95       	lsr	r27
    19f4:	a7 95       	ror	r26
    19f6:	97 95       	ror	r25
    19f8:	87 95       	ror	r24
    19fa:	f8 01       	movw	r30, r16
    19fc:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    19fe:	00 00       	nop
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <twi_readFrom+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <twi_readFrom+0x8>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <twi_readFrom+0xa>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    1a22:	7c 83       	std	Y+4, r23	; 0x04
    1a24:	6b 83       	std	Y+3, r22	; 0x03
    1a26:	4d 83       	std	Y+5, r20	; 0x05
    1a28:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	81 32       	cpi	r24, 0x21	; 33
    1a2e:	18 f0       	brcs	.+6      	; 0x1a36 <twi_readFrom+0x24>
    return 0;
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	6b c0       	rjmp	.+214    	; 0x1b0a <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    1a34:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1a36:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_state>
    1a3a:	88 23       	and	r24, r24
    1a3c:	d9 f7       	brne	.-10     	; 0x1a34 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_state>
  twi_sendStop = sendStop;
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1a50:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	81 50       	subi	r24, 0x01	; 1
    1a58:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <twi_slarw>
  twi_slarw |= address << 1;
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <twi_slarw>
    1a72:	89 2b       	or	r24, r25
    1a74:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <twi_slarw>

  if (true == twi_inRepStart) {
    1a78:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <twi_inRepStart>
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	c1 f4       	brne	.+48     	; 0x1ab0 <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1a80:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    1a84:	8b eb       	ldi	r24, 0xBB	; 187
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <twi_slarw>
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    1a90:	8c eb       	ldi	r24, 0xBC	; 188
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 81       	ld	r24, Z
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	88 70       	andi	r24, 0x08	; 8
    1a9e:	99 27       	eor	r25, r25
    1aa0:	89 2b       	or	r24, r25
    1aa2:	81 f7       	brne	.-32     	; 0x1a84 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1aa4:	8c eb       	ldi	r24, 0xBC	; 188
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	25 ec       	ldi	r18, 0xC5	; 197
    1aaa:	fc 01       	movw	r30, r24
    1aac:	20 83       	st	Z, r18
    1aae:	07 c0       	rjmp	.+14     	; 0x1abe <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1ab0:	8c eb       	ldi	r24, 0xBC	; 188
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	25 ee       	ldi	r18, 0xE5	; 229
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <twi_readFrom+0xac>
    continue;
    1abc:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1abe:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_state>
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	d9 f3       	breq	.-10     	; 0x1abc <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    1ac6:	90 91 c4 06 	lds	r25, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	98 17       	cp	r25, r24
    1ace:	18 f4       	brcc	.+6      	; 0x1ad6 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    1ad0:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1ad4:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	82 0f       	add	r24, r18
    1ae6:	93 1f       	adc	r25, r19
    1ae8:	29 81       	ldd	r18, Y+1	; 0x01
    1aea:	22 2f       	mov	r18, r18
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	2c 55       	subi	r18, 0x5C	; 92
    1af0:	39 4f       	sbci	r19, 0xF9	; 249
    1af2:	f9 01       	movw	r30, r18
    1af4:	20 81       	ld	r18, Z
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	8f 5f       	subi	r24, 0xFF	; 255
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	99 81       	ldd	r25, Y+1	; 0x01
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	98 17       	cp	r25, r24
    1b06:	48 f3       	brcs	.-46     	; 0x1ada <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b0a:	26 96       	adiw	r28, 0x06	; 6
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    1b1c:	0f 93       	push	r16
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	27 97       	sbiw	r28, 0x07	; 7
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	8a 83       	std	Y+2, r24	; 0x02
    1b34:	7c 83       	std	Y+4, r23	; 0x04
    1b36:	6b 83       	std	Y+3, r22	; 0x03
    1b38:	4d 83       	std	Y+5, r20	; 0x05
    1b3a:	2e 83       	std	Y+6, r18	; 0x06
    1b3c:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	81 32       	cpi	r24, 0x21	; 33
    1b42:	18 f0       	brcs	.+6      	; 0x1b4a <twi_writeTo+0x2e>
    return 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	76 c0       	rjmp	.+236    	; 0x1c34 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    1b48:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    1b4a:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_state>
    1b4e:	88 23       	and	r24, r24
    1b50:	d9 f7       	brne	.-10     	; 0x1b48 <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_state>
  twi_sendStop = sendStop;
    1b58:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5a:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1b64:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	13 c0       	rjmp	.+38     	; 0x1b98 <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	29 81       	ldd	r18, Y+1	; 0x01
    1b7a:	22 2f       	mov	r18, r18
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b80:	5c 81       	ldd	r21, Y+4	; 0x04
    1b82:	24 0f       	add	r18, r20
    1b84:	35 1f       	adc	r19, r21
    1b86:	f9 01       	movw	r30, r18
    1b88:	20 81       	ld	r18, Z
    1b8a:	8c 55       	subi	r24, 0x5C	; 92
    1b8c:	99 4f       	sbci	r25, 0xF9	; 249
    1b8e:	fc 01       	movw	r30, r24
    1b90:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	99 81       	ldd	r25, Y+1	; 0x01
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	98 17       	cp	r25, r24
    1b9e:	48 f3       	brcs	.-46     	; 0x1b72 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    1ba0:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <twi_slarw>
  twi_slarw |= address << 1;
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	98 2f       	mov	r25, r24
    1bb0:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <twi_slarw>
    1bb4:	89 2b       	or	r24, r25
    1bb6:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    1bba:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <twi_inRepStart>
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	c1 f4       	brne	.+48     	; 0x1bf2 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1bc2:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    1bc6:	8b eb       	ldi	r24, 0xBB	; 187
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <twi_slarw>
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    1bd2:	8c eb       	ldi	r24, 0xBC	; 188
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	88 70       	andi	r24, 0x08	; 8
    1be0:	99 27       	eor	r25, r25
    1be2:	89 2b       	or	r24, r25
    1be4:	81 f7       	brne	.-32     	; 0x1bc6 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1be6:	8c eb       	ldi	r24, 0xBC	; 188
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	25 ec       	ldi	r18, 0xC5	; 197
    1bec:	fc 01       	movw	r30, r24
    1bee:	20 83       	st	Z, r18
    1bf0:	07 c0       	rjmp	.+14     	; 0x1c00 <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    1bf2:	8c eb       	ldi	r24, 0xBC	; 188
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	25 ee       	ldi	r18, 0xE5	; 229
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <twi_writeTo+0xe4>
    continue;
    1bfe:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    1c00:	8e 81       	ldd	r24, Y+6	; 0x06
    1c02:	88 23       	and	r24, r24
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <twi_writeTo+0xf2>
    1c06:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_state>
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	c1 f3       	breq	.-16     	; 0x1bfe <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    1c0e:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <twi_error>
    1c12:	8f 3f       	cpi	r24, 0xFF	; 255
    1c14:	11 f4       	brne	.+4      	; 0x1c1a <twi_writeTo+0xfe>
    return 0;	// success
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    1c1a:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <twi_error>
    1c1e:	80 32       	cpi	r24, 0x20	; 32
    1c20:	11 f4       	brne	.+4      	; 0x1c26 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	07 c0       	rjmp	.+14     	; 0x1c34 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    1c26:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <twi_error>
    1c2a:	80 33       	cpi	r24, 0x30	; 48
    1c2c:	11 f4       	brne	.+4      	; 0x1c32 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    1c32:	84 e0       	ldi	r24, 0x04	; 4
}
    1c34:	27 96       	adiw	r28, 0x07	; 7
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <twi_transmit+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <twi_transmit+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9b 83       	std	Y+3, r25	; 0x03
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    1c5a:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <twi_txBufferLength>
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	82 0f       	add	r24, r18
    1c6a:	93 1f       	adc	r25, r19
    1c6c:	81 97       	sbiw	r24, 0x21	; 33
    1c6e:	14 f0       	brlt	.+4      	; 0x1c74 <twi_transmit+0x2c>
    return 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	2c c0       	rjmp	.+88     	; 0x1ccc <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1c74:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_state>
    1c78:	84 30       	cpi	r24, 0x04	; 4
    1c7a:	11 f0       	breq	.+4      	; 0x1c80 <twi_transmit+0x38>
    return 2;
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	26 c0       	rjmp	.+76     	; 0x1ccc <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    1c80:	19 82       	std	Y+1, r1	; 0x01
    1c82:	19 c0       	rjmp	.+50     	; 0x1cb6 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    1c84:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <twi_txBufferLength>
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	82 0f       	add	r24, r18
    1c94:	93 1f       	adc	r25, r19
    1c96:	29 81       	ldd	r18, Y+1	; 0x01
    1c98:	22 2f       	mov	r18, r18
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a 81       	ldd	r20, Y+2	; 0x02
    1c9e:	5b 81       	ldd	r21, Y+3	; 0x03
    1ca0:	24 0f       	add	r18, r20
    1ca2:	35 1f       	adc	r19, r21
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	20 81       	ld	r18, Z
    1ca8:	8a 53       	subi	r24, 0x3A	; 58
    1caa:	99 4f       	sbci	r25, 0xF9	; 249
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	8f 5f       	subi	r24, 0xFF	; 255
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	99 81       	ldd	r25, Y+1	; 0x01
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	98 17       	cp	r25, r24
    1cbc:	18 f3       	brcs	.-58     	; 0x1c84 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    1cbe:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <twi_txBufferLength>
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	89 0f       	add	r24, r25
    1cc6:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <twi_txBufferLength>
  
  return 0;
    1cca:	80 e0       	ldi	r24, 0x00	; 0
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <twi_attachSlaveRxEvent+0x6>
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <twi_onSlaveReceive+0x1>
    1cf0:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <twi_onSlaveReceive>
}
    1cf4:	00 00       	nop
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <twi_attachSlaveTxEvent+0x6>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	90 93 a1 06 	sts	0x06A1, r25	; 0x8006a1 <twi_onSlaveTransmit+0x1>
    1d16:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <twi_onSlaveTransmit>
}
    1d1a:	00 00       	nop
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	1f 92       	push	r1
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	88 23       	and	r24, r24
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1d38:	8c eb       	ldi	r24, 0xBC	; 188
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	25 ec       	ldi	r18, 0xC5	; 197
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1d44:	8c eb       	ldi	r24, 0xBC	; 188
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	25 e8       	ldi	r18, 0x85	; 133
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
  }
}
    1d4e:	00 00       	nop
    1d50:	0f 90       	pop	r0
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1d60:	8c eb       	ldi	r24, 0xBC	; 188
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	25 ed       	ldi	r18, 0xD5	; 213
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <twi_stop+0x16>
    continue;
    1d6c:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1d6e:	8c eb       	ldi	r24, 0xBC	; 188
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	fc 01       	movw	r30, r24
    1d74:	80 81       	ld	r24, Z
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	80 71       	andi	r24, 0x10	; 16
    1d7c:	99 27       	eor	r25, r25
    1d7e:	89 2b       	or	r24, r25
    1d80:	a9 f7       	brne	.-22     	; 0x1d6c <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1d82:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_state>
}
    1d86:	00 00       	nop
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1d96:	8c eb       	ldi	r24, 0xBC	; 188
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	25 ec       	ldi	r18, 0xC5	; 197
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    1da0:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_state>
}
    1da4:	00 00       	nop
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <__vector_24>:

ISR(TWI_vect)
{
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    1dd8:	89 eb       	ldi	r24, 0xB9	; 185
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 7f       	andi	r24, 0xF8	; 248
    1de6:	99 27       	eor	r25, r25
    1de8:	09 2e       	mov	r0, r25
    1dea:	00 0c       	add	r0, r0
    1dec:	aa 0b       	sbc	r26, r26
    1dee:	bb 0b       	sbc	r27, r27
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	28 ef       	ldi	r18, 0xF8	; 248
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	84 1b       	sub	r24, r20
    1dfa:	95 0b       	sbc	r25, r21
    1dfc:	28 17       	cp	r18, r24
    1dfe:	39 07       	cpc	r19, r25
    1e00:	08 f4       	brcc	.+2      	; 0x1e04 <__vector_24+0x58>
    1e02:	17 c1       	rjmp	.+558    	; 0x2032 <__vector_24+0x286>
    1e04:	8c 5c       	subi	r24, 0xCC	; 204
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	fc 01       	movw	r30, r24
    1e0a:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1e0e:	8b eb       	ldi	r24, 0xBB	; 187
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <twi_slarw>
    1e16:	fc 01       	movw	r30, r24
    1e18:	20 83       	st	Z, r18
      twi_reply(1);
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      break;
    1e20:	08 c1       	rjmp	.+528    	; 0x2032 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e22:	90 91 c4 06 	lds	r25, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1e26:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <twi_masterBufferLength>
    1e2a:	98 17       	cp	r25, r24
    1e2c:	a0 f4       	brcc	.+40     	; 0x1e56 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1e2e:	8b eb       	ldi	r24, 0xBB	; 187
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	20 91 c4 06 	lds	r18, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1e36:	31 e0       	ldi	r19, 0x01	; 1
    1e38:	32 0f       	add	r19, r18
    1e3a:	30 93 c4 06 	sts	0x06C4, r19	; 0x8006c4 <twi_masterBufferIndex>
    1e3e:	22 2f       	mov	r18, r18
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	2c 55       	subi	r18, 0x5C	; 92
    1e44:	39 4f       	sbci	r19, 0xF9	; 249
    1e46:	f9 01       	movw	r30, r18
    1e48:	20 81       	ld	r18, Z
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	20 83       	st	Z, r18
        twi_reply(1);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    1e54:	ee c0       	rjmp	.+476    	; 0x2032 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1e56:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <twi_sendStop>
    1e5a:	88 23       	and	r24, r24
    1e5c:	19 f0       	breq	.+6      	; 0x1e64 <__vector_24+0xb8>
          twi_stop();
    1e5e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    1e62:	e7 c0       	rjmp	.+462    	; 0x2032 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1e6a:	8c eb       	ldi	r24, 0xBC	; 188
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	24 ea       	ldi	r18, 0xA4	; 164
    1e70:	fc 01       	movw	r30, r24
    1e72:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    1e74:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_state>
	}
      }
      break;
    1e78:	dc c0       	rjmp	.+440    	; 0x2032 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1e7a:	80 e2       	ldi	r24, 0x20	; 32
    1e7c:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <twi_error>
      twi_stop();
    1e80:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <twi_stop>
      break;
    1e84:	d6 c0       	rjmp	.+428    	; 0x2032 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e86:	80 e3       	ldi	r24, 0x30	; 48
    1e88:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <twi_error>
      twi_stop();
    1e8c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <twi_stop>
      break;
    1e90:	d0 c0       	rjmp	.+416    	; 0x2032 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e92:	88 e3       	ldi	r24, 0x38	; 56
    1e94:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <twi_error>
      twi_releaseBus();
    1e98:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <twi_releaseBus>
      break;
    1e9c:	ca c0       	rjmp	.+404    	; 0x2032 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e9e:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	98 0f       	add	r25, r24
    1ea6:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <twi_masterBufferIndex>
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	2b eb       	ldi	r18, 0xBB	; 187
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	20 81       	ld	r18, Z
    1eb6:	8c 55       	subi	r24, 0x5C	; 92
    1eb8:	99 4f       	sbci	r25, 0xF9	; 249
    1eba:	fc 01       	movw	r30, r24
    1ebc:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ebe:	90 91 c4 06 	lds	r25, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1ec2:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <twi_masterBufferLength>
    1ec6:	98 17       	cp	r25, r24
    1ec8:	20 f4       	brcc	.+8      	; 0x1ed2 <__vector_24+0x126>
        twi_reply(1);
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    1ed0:	b0 c0       	rjmp	.+352    	; 0x2032 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      }
      break;
    1ed8:	ac c0       	rjmp	.+344    	; 0x2032 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1eda:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferIndex>
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	98 0f       	add	r25, r24
    1ee2:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <twi_masterBufferIndex>
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	2b eb       	ldi	r18, 0xBB	; 187
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	20 81       	ld	r18, Z
    1ef2:	8c 55       	subi	r24, 0x5C	; 92
    1ef4:	99 4f       	sbci	r25, 0xF9	; 249
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18
	if (twi_sendStop)
    1efa:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <twi_sendStop>
    1efe:	88 23       	and	r24, r24
    1f00:	19 f0       	breq	.+6      	; 0x1f08 <__vector_24+0x15c>
          twi_stop();
    1f02:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    1f06:	95 c0       	rjmp	.+298    	; 0x2032 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f0e:	8c eb       	ldi	r24, 0xBC	; 188
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	24 ea       	ldi	r18, 0xA4	; 164
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    1f18:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_state>
	}    
	break;
    1f1c:	8a c0       	rjmp	.+276    	; 0x2032 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    1f1e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <twi_stop>
      break;
    1f22:	87 c0       	rjmp	.+270    	; 0x2032 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f2a:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <twi_rxBufferIndex>
      twi_reply(1);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      break;
    1f34:	7e c0       	rjmp	.+252    	; 0x2032 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f36:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_rxBufferIndex>
    1f3a:	80 32       	cpi	r24, 0x20	; 32
    1f3c:	a0 f4       	brcc	.+40     	; 0x1f66 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1f3e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_rxBufferIndex>
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	98 0f       	add	r25, r24
    1f46:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <twi_rxBufferIndex>
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	2b eb       	ldi	r18, 0xBB	; 187
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	f9 01       	movw	r30, r18
    1f54:	20 81       	ld	r18, Z
    1f56:	88 51       	subi	r24, 0x18	; 24
    1f58:	99 4f       	sbci	r25, 0xF9	; 249
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	20 83       	st	Z, r18
        twi_reply(1);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    1f64:	66 c0       	rjmp	.+204    	; 0x2032 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      }
      break;
    1f6c:	62 c0       	rjmp	.+196    	; 0x2032 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1f6e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f72:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_rxBufferIndex>
    1f76:	80 32       	cpi	r24, 0x20	; 32
    1f78:	40 f4       	brcc	.+16     	; 0x1f8a <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1f7a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_rxBufferIndex>
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 51       	subi	r24, 0x18	; 24
    1f84:	99 4f       	sbci	r25, 0xF9	; 249
    1f86:	fc 01       	movw	r30, r24
    1f88:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1f8a:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <twi_onSlaveReceive>
    1f8e:	30 91 a3 06 	lds	r19, 0x06A3	; 0x8006a3 <twi_onSlaveReceive+0x1>
    1f92:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_rxBufferIndex>
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	88 ee       	ldi	r24, 0xE8	; 232
    1f9e:	96 e0       	ldi	r25, 0x06	; 6
    1fa0:	f9 01       	movw	r30, r18
    1fa2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1fa4:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <twi_rxBufferIndex>
      break;
    1fa8:	44 c0       	rjmp	.+136    	; 0x2032 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      break;
    1fb0:	40 c0       	rjmp	.+128    	; 0x2032 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1fb8:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1fbc:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1fc0:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <twi_onSlaveTransmit>
    1fc4:	90 91 a1 06 	lds	r25, 0x06A1	; 0x8006a1 <twi_onSlaveTransmit+0x1>
    1fc8:	fc 01       	movw	r30, r24
    1fca:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1fcc:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <twi_txBufferLength>
    1fd0:	88 23       	and	r24, r24
    1fd2:	29 f4       	brne	.+10     	; 0x1fde <__vector_24+0x232>
        twi_txBufferLength = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1fda:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1fde:	8b eb       	ldi	r24, 0xBB	; 187
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	20 91 e6 06 	lds	r18, 0x06E6	; 0x8006e6 <twi_txBufferIndex>
    1fe6:	31 e0       	ldi	r19, 0x01	; 1
    1fe8:	32 0f       	add	r19, r18
    1fea:	30 93 e6 06 	sts	0x06E6, r19	; 0x8006e6 <twi_txBufferIndex>
    1fee:	22 2f       	mov	r18, r18
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	2a 53       	subi	r18, 0x3A	; 58
    1ff4:	39 4f       	sbci	r19, 0xF9	; 249
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	20 81       	ld	r18, Z
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1ffe:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <twi_txBufferIndex>
    2002:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <twi_txBufferLength>
    2006:	98 17       	cp	r25, r24
    2008:	20 f4       	brcc	.+8      	; 0x2012 <__vector_24+0x266>
        twi_reply(1);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    2010:	10 c0       	rjmp	.+32     	; 0x2032 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      }
      break;
    2018:	0c c0       	rjmp	.+24     	; 0x2032 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    2020:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_state>
      break;
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2026:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <twi_error>
      twi_stop();
    202a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <twi_stop>
      break;
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    2030:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2032:	00 00       	nop
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	ff 91       	pop	r31
    203a:	ef 91       	pop	r30
    203c:	bf 91       	pop	r27
    203e:	af 91       	pop	r26
    2040:	9f 91       	pop	r25
    2042:	8f 91       	pop	r24
    2044:	7f 91       	pop	r23
    2046:	6f 91       	pop	r22
    2048:	5f 91       	pop	r21
    204a:	4f 91       	pop	r20
    204c:	3f 91       	pop	r19
    204e:	2f 91       	pop	r18
    2050:	0f 90       	pop	r0
    2052:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	00 d0       	rcall	.+0      	; 0x2062 <_ZN7TwoWireC1Ev+0x6>
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_ZN6StreamC1Ev>
    2072:	23 e8       	ldi	r18, 0x83	; 131
    2074:	32 e0       	ldi	r19, 0x02	; 2
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	fc 01       	movw	r30, r24
    207c:	31 83       	std	Z+1, r19	; 0x01
    207e:	20 83       	st	Z, r18
{
}
    2080:	00 00       	nop
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	08 95       	ret

0000208c <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	00 d0       	rcall	.+0      	; 0x2092 <_ZN7TwoWire5beginEv+0x6>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    209a:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    209e:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    20a2:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    20a6:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    20aa:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <twi_init>
}
    20ae:	00 00       	nop
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <_ZN7TwoWire5beginEh+0x6>
    20c0:	1f 92       	push	r1
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	6b 83       	std	Y+3, r22	; 0x03
  twi_setAddress(address);
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	0e 94 c9 0c 	call	0x1992	; 0x1992 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    20d2:	8a e6       	ldi	r24, 0x6A	; 106
    20d4:	93 e1       	ldi	r25, 0x13	; 19
    20d6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    20da:	8d e1       	ldi	r24, 0x1D	; 29
    20dc:	93 e1       	ldi	r25, 0x13	; 19
    20de:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <twi_attachSlaveRxEvent>
  begin();
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire5beginEv>
}
    20ea:	00 00       	nop
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	08 95       	ret

000020f8 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <_ZN7TwoWire5beginEi+0x6>
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <_ZN7TwoWire5beginEi+0x8>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	7c 83       	std	Y+4, r23	; 0x04
    210a:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	62 2f       	mov	r22, r18
    2114:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN7TwoWire5beginEh>
}
    2118:	00 00       	nop
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	00 d0       	rcall	.+0      	; 0x212e <_ZN7TwoWire3endEv+0x6>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    2136:	0e 94 b0 0c 	call	0x1960	; 0x1960 <twi_disable>
}
    213a:	00 00       	nop
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	08 95       	ret

00002146 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	00 d0       	rcall	.+0      	; 0x214c <_ZN7TwoWire8setClockEm+0x6>
    214c:	00 d0       	rcall	.+0      	; 0x214e <_ZN7TwoWire8setClockEm+0x8>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <_ZN7TwoWire8setClockEm+0xa>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	4b 83       	std	Y+3, r20	; 0x03
    215a:	5c 83       	std	Y+4, r21	; 0x04
    215c:	6d 83       	std	Y+5, r22	; 0x05
    215e:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	ad 81       	ldd	r26, Y+5	; 0x05
    2166:	be 81       	ldd	r27, Y+6	; 0x06
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <twi_setFrequency>
}
    2170:	00 00       	nop
    2172:	26 96       	adiw	r28, 0x06	; 6
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    2184:	cf 92       	push	r12
    2186:	ef 92       	push	r14
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	2b 97       	sbiw	r28, 0x0b	; 11
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	9b 83       	std	Y+3, r25	; 0x03
    21a2:	8a 83       	std	Y+2, r24	; 0x02
    21a4:	6c 83       	std	Y+4, r22	; 0x04
    21a6:	4d 83       	std	Y+5, r20	; 0x05
    21a8:	0e 83       	std	Y+6, r16	; 0x06
    21aa:	1f 83       	std	Y+7, r17	; 0x07
    21ac:	28 87       	std	Y+8, r18	; 0x08
    21ae:	39 87       	std	Y+9, r19	; 0x09
    21b0:	ea 86       	std	Y+10, r14	; 0x0a
    21b2:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    21b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b6:	88 23       	and	r24, r24
    21b8:	e9 f1       	breq	.+122    	; 0x2234 <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	6c 81       	ldd	r22, Y+4	; 0x04
    21c0:	0e 94 ba 11 	call	0x2374	; 0x2374 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    21c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c6:	84 30       	cpi	r24, 0x04	; 4
    21c8:	10 f0       	brcs	.+4      	; 0x21ce <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    21ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d0:	9f ef       	ldi	r25, 0xFF	; 255
    21d2:	98 0f       	add	r25, r24
    21d4:	9a 87       	std	Y+10, r25	; 0x0a
    21d6:	91 e0       	ldi	r25, 0x01	; 1
    21d8:	88 23       	and	r24, r24
    21da:	09 f4       	brne	.+2      	; 0x21de <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	99 23       	and	r25, r25
    21e0:	21 f1       	breq	.+72     	; 0x222a <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	fc 01       	movw	r30, r24
    21e8:	80 81       	ld	r24, Z
    21ea:	91 81       	ldd	r25, Z+1	; 0x01
    21ec:	fc 01       	movw	r30, r24
    21ee:	20 81       	ld	r18, Z
    21f0:	31 81       	ldd	r19, Z+1	; 0x01
    21f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	ac 01       	movw	r20, r24
    21fa:	44 0f       	add	r20, r20
    21fc:	55 1f       	adc	r21, r21
    21fe:	44 0f       	add	r20, r20
    2200:	55 1f       	adc	r21, r21
    2202:	44 0f       	add	r20, r20
    2204:	55 1f       	adc	r21, r21
    2206:	8e 81       	ldd	r24, Y+6	; 0x06
    2208:	9f 81       	ldd	r25, Y+7	; 0x07
    220a:	a8 85       	ldd	r26, Y+8	; 0x08
    220c:	b9 85       	ldd	r27, Y+9	; 0x09
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <_ZN7TwoWire11requestFromEhhmhh+0x94>
    2210:	b6 95       	lsr	r27
    2212:	a7 95       	ror	r26
    2214:	97 95       	ror	r25
    2216:	87 95       	ror	r24
    2218:	4a 95       	dec	r20
    221a:	d2 f7       	brpl	.-12     	; 0x2210 <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    221c:	48 2f       	mov	r20, r24
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	64 2f       	mov	r22, r20
    2224:	f9 01       	movw	r30, r18
    2226:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2228:	d2 cf       	rjmp	.-92     	; 0x21ce <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	81 32       	cpi	r24, 0x21	; 33
    2238:	10 f0       	brcs	.+4      	; 0x223e <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    223a:	80 e2       	ldi	r24, 0x20	; 32
    223c:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    223e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2240:	4d 81       	ldd	r20, Y+5	; 0x05
    2242:	6a e0       	ldi	r22, 0x0A	; 10
    2244:	77 e0       	ldi	r23, 0x07	; 7
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <twi_readFrom>
    224c:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    224e:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>

  return read;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
}
    225a:	2b 96       	adiw	r28, 0x0b	; 11
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ef 90       	pop	r14
    2270:	cf 90       	pop	r12
    2272:	08 95       	ret

00002274 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    2274:	cf 92       	push	r12
    2276:	ef 92       	push	r14
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 d0       	rcall	.+0      	; 0x2282 <_ZN7TwoWire11requestFromEhhh+0xe>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <_ZN7TwoWire11requestFromEhhh+0x10>
    2284:	1f 92       	push	r1
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	6b 83       	std	Y+3, r22	; 0x03
    2290:	4c 83       	std	Y+4, r20	; 0x04
    2292:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	cd 80       	ldd	r12, Y+5	; 0x05
    229a:	e1 2c       	mov	r14, r1
    229c:	00 e0       	ldi	r16, 0x00	; 0
    229e:	10 e0       	ldi	r17, 0x00	; 0
    22a0:	98 01       	movw	r18, r16
    22a2:	4c 81       	ldd	r20, Y+4	; 0x04
    22a4:	6b 81       	ldd	r22, Y+3	; 0x03
    22a6:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN7TwoWire11requestFromEhhmhh>
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ef 90       	pop	r14
    22be:	cf 90       	pop	r12
    22c0:	08 95       	ret

000022c2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <_ZN7TwoWire11requestFromEhh+0x6>
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <_ZN7TwoWire11requestFromEhh+0x8>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	6b 83       	std	Y+3, r22	; 0x03
    22d4:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	21 e0       	ldi	r18, 0x01	; 1
    22dc:	4c 81       	ldd	r20, Y+4	; 0x04
    22de:	6b 81       	ldd	r22, Y+3	; 0x03
    22e0:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7TwoWire11requestFromEhhh>
}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	08 95       	ret

000022f2 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <_ZN7TwoWire11requestFromEii+0x6>
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <_ZN7TwoWire11requestFromEii+0x8>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <_ZN7TwoWire11requestFromEii+0xa>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	7c 83       	std	Y+4, r23	; 0x04
    2306:	6b 83       	std	Y+3, r22	; 0x03
    2308:	5e 83       	std	Y+6, r21	; 0x06
    230a:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    230c:	4d 81       	ldd	r20, Y+5	; 0x05
    230e:	3b 81       	ldd	r19, Y+3	; 0x03
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	21 e0       	ldi	r18, 0x01	; 1
    2316:	63 2f       	mov	r22, r19
    2318:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7TwoWire11requestFromEhhh>
}
    231c:	26 96       	adiw	r28, 0x06	; 6
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	28 97       	sbiw	r28, 0x08	; 8
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	7c 83       	std	Y+4, r23	; 0x04
    2348:	6b 83       	std	Y+3, r22	; 0x03
    234a:	5e 83       	std	Y+6, r21	; 0x06
    234c:	4d 83       	std	Y+5, r20	; 0x05
    234e:	38 87       	std	Y+8, r19	; 0x08
    2350:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    2352:	2f 81       	ldd	r18, Y+7	; 0x07
    2354:	4d 81       	ldd	r20, Y+5	; 0x05
    2356:	3b 81       	ldd	r19, Y+3	; 0x03
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	63 2f       	mov	r22, r19
    235e:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7TwoWire11requestFromEhhh>
}
    2362:	28 96       	adiw	r28, 0x08	; 8
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	08 95       	ret

00002374 <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	00 d0       	rcall	.+0      	; 0x237a <_ZN7TwoWire17beginTransmissionEh+0x6>
    237a:	1f 92       	push	r1
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2392:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2396:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <_ZN7TwoWire14txBufferLengthE>
}
    239a:	00 00       	nop
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <_ZN7TwoWire17beginTransmissionEi+0x6>
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <_ZN7TwoWire17beginTransmissionEi+0x8>
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	9a 83       	std	Y+2, r25	; 0x02
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	7c 83       	std	Y+4, r23	; 0x04
    23ba:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	62 2f       	mov	r22, r18
    23c4:	0e 94 ba 11 	call	0x2374	; 0x2374 <_ZN7TwoWire17beginTransmissionEh>
}
    23c8:	00 00       	nop
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	08 95       	ret

000023d8 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    23d8:	0f 93       	push	r16
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <_ZN7TwoWire15endTransmissionEh+0x8>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <_ZN7TwoWire15endTransmissionEh+0xa>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	9b 83       	std	Y+3, r25	; 0x03
    23e8:	8a 83       	std	Y+2, r24	; 0x02
    23ea:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    23ec:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ZN7TwoWire14txBufferLengthE>
    23f0:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <_ZN7TwoWire9txAddressE>
    23f4:	0c 81       	ldd	r16, Y+4	; 0x04
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	49 2f       	mov	r20, r25
    23fa:	6d e2       	ldi	r22, 0x2D	; 45
    23fc:	77 e0       	ldi	r23, 0x07	; 7
    23fe:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <twi_writeTo>
    2402:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2404:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2408:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    240c:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <_ZN7TwoWire12transmittingE>
  return ret;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	0f 91       	pop	r16
    2420:	08 95       	ret

00002422 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	00 d0       	rcall	.+0      	; 0x2428 <_ZN7TwoWire15endTransmissionEv+0x6>
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	9a 81       	ldd	r25, Y+2	; 0x02
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_ZN7TwoWire15endTransmissionEh>
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	08 95       	ret

00002444 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	00 d0       	rcall	.+0      	; 0x244a <_ZN7TwoWire5writeEh+0x6>
    244a:	1f 92       	push	r1
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2456:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN7TwoWire12transmittingE>
    245a:	88 23       	and	r24, r24
    245c:	01 f1       	breq	.+64     	; 0x249e <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    245e:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <_ZN7TwoWire14txBufferLengthE>
    2462:	80 32       	cpi	r24, 0x20	; 32
    2464:	48 f0       	brcs	.+18     	; 0x2478 <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	61 e0       	ldi	r22, 0x01	; 1
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN5Print13setWriteErrorEi>
      return 0;
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	1a c0       	rjmp	.+52     	; 0x24ac <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2478:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	2b 81       	ldd	r18, Y+3	; 0x03
    2482:	83 5d       	subi	r24, 0xD3	; 211
    2484:	98 4f       	sbci	r25, 0xF8	; 248
    2486:	fc 01       	movw	r30, r24
    2488:	20 83       	st	Z, r18
    ++txBufferIndex;
    248a:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
    248e:	8f 5f       	subi	r24, 0xFF	; 255
    2490:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2494:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
    2498:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <_ZN7TwoWire14txBufferLengthE>
    249c:	05 c0       	rjmp	.+10     	; 0x24a8 <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    249e:	ce 01       	movw	r24, r28
    24a0:	03 96       	adiw	r24, 0x03	; 3
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <twi_transmit>
  }
  return 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	08 95       	ret

000024b8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	28 97       	sbiw	r28, 0x08	; 8
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	9c 83       	std	Y+4, r25	; 0x04
    24ce:	8b 83       	std	Y+3, r24	; 0x03
    24d0:	7e 83       	std	Y+6, r23	; 0x06
    24d2:	6d 83       	std	Y+5, r22	; 0x05
    24d4:	58 87       	std	Y+8, r21	; 0x08
    24d6:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    24d8:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN7TwoWire12transmittingE>
    24dc:	88 23       	and	r24, r24
    24de:	21 f1       	breq	.+72     	; 0x2528 <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    24e0:	1a 82       	std	Y+2, r1	; 0x02
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	29 81       	ldd	r18, Y+1	; 0x01
    24e6:	3a 81       	ldd	r19, Y+2	; 0x02
    24e8:	8f 81       	ldd	r24, Y+7	; 0x07
    24ea:	98 85       	ldd	r25, Y+8	; 0x08
    24ec:	28 17       	cp	r18, r24
    24ee:	39 07       	cpc	r19, r25
    24f0:	08 f5       	brcc	.+66     	; 0x2534 <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	4d 81       	ldd	r20, Y+5	; 0x05
    2504:	5e 81       	ldd	r21, Y+6	; 0x06
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	84 0f       	add	r24, r20
    250c:	95 1f       	adc	r25, r21
    250e:	fc 01       	movw	r30, r24
    2510:	40 81       	ld	r20, Z
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	64 2f       	mov	r22, r20
    2518:	f9 01       	movw	r30, r18
    251a:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	de cf       	rjmp	.-68     	; 0x24e4 <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2528:	2f 81       	ldd	r18, Y+7	; 0x07
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	62 2f       	mov	r22, r18
    2530:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <twi_transmit>
  }
  return quantity;
    2534:	8f 81       	ldd	r24, Y+7	; 0x07
    2536:	98 85       	ldd	r25, Y+8	; 0x08
}
    2538:	28 96       	adiw	r28, 0x08	; 8
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	00 d0       	rcall	.+0      	; 0x2550 <_ZN7TwoWire9availableEv+0x6>
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2558:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a9 01       	movw	r20, r18
    256a:	48 1b       	sub	r20, r24
    256c:	59 0b       	sbc	r21, r25
    256e:	ca 01       	movw	r24, r20
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 d0       	rcall	.+0      	; 0x2580 <_ZN7TwoWire4readEv+0x6>
    2580:	00 d0       	rcall	.+0      	; 0x2582 <_ZN7TwoWire4readEv+0x8>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	9f ef       	ldi	r25, 0xFF	; 255
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2592:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    2596:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>
    259a:	98 17       	cp	r25, r24
    259c:	88 f4       	brcc	.+34     	; 0x25c0 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    259e:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	86 5f       	subi	r24, 0xF6	; 246
    25a8:	98 4f       	sbci	r25, 0xF8	; 248
    25aa:	fc 01       	movw	r30, r24
    25ac:	80 81       	ld	r24, Z
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    25b6:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	08 95       	ret

000025d2 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <_ZN7TwoWire4peekEv+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <_ZN7TwoWire4peekEv+0x8>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	9f ef       	ldi	r25, 0xFF	; 255
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    25ea:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    25ee:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>
    25f2:	98 17       	cp	r25, r24
    25f4:	60 f4       	brcc	.+24     	; 0x260e <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    25f6:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	86 5f       	subi	r24, 0xF6	; 246
    2600:	98 4f       	sbci	r25, 0xF8	; 248
    2602:	fc 01       	movw	r30, r24
    2604:	80 81       	ld	r24, Z
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	00 d0       	rcall	.+0      	; 0x2626 <_ZN7TwoWire5flushEv+0x6>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    262e:	00 00       	nop
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	08 95       	ret

0000263a <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	00 d0       	rcall	.+0      	; 0x2640 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2640:	00 d0       	rcall	.+0      	; 0x2642 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2642:	1f 92       	push	r1
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9b 83       	std	Y+3, r25	; 0x03
    264a:	8a 83       	std	Y+2, r24	; 0x02
    264c:	7d 83       	std	Y+5, r23	; 0x05
    264e:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2650:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <_ZN7TwoWire14user_onReceiveE>
    2654:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <_ZN7TwoWire14user_onReceiveE+0x1>
    2658:	89 2b       	or	r24, r25
    265a:	89 f1       	breq	.+98     	; 0x26be <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    265c:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
    2660:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>
    2664:	98 17       	cp	r25, r24
    2666:	68 f1       	brcs	.+90     	; 0x26c2 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	9d 81       	ldd	r25, Y+5	; 0x05
    2674:	28 17       	cp	r18, r24
    2676:	39 07       	cpc	r19, r25
    2678:	a4 f4       	brge	.+40     	; 0x26a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	29 81       	ldd	r18, Y+1	; 0x01
    2682:	22 2f       	mov	r18, r18
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a 81       	ldd	r20, Y+2	; 0x02
    2688:	5b 81       	ldd	r21, Y+3	; 0x03
    268a:	24 0f       	add	r18, r20
    268c:	35 1f       	adc	r19, r21
    268e:	f9 01       	movw	r30, r18
    2690:	20 81       	ld	r18, Z
    2692:	86 5f       	subi	r24, 0xF6	; 246
    2694:	98 4f       	sbci	r25, 0xF8	; 248
    2696:	fc 01       	movw	r30, r24
    2698:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	e4 cf       	rjmp	.-56     	; 0x266a <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    26a2:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    26ac:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <_ZN7TwoWire14user_onReceiveE>
    26b0:	30 91 53 07 	lds	r19, 0x0753	; 0x800753 <_ZN7TwoWire14user_onReceiveE+0x1>
    26b4:	8c 81       	ldd	r24, Y+4	; 0x04
    26b6:	9d 81       	ldd	r25, Y+5	; 0x05
    26b8:	f9 01       	movw	r30, r18
    26ba:	09 95       	icall
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    26be:	00 00       	nop
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    26c2:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    26dc:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <_ZN7TwoWire14user_onRequestE>
    26e0:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <_ZN7TwoWire14user_onRequestE+0x1>
    26e4:	89 2b       	or	r24, r25
    26e6:	59 f0       	breq	.+22     	; 0x26fe <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    26e8:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    26ec:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    26f0:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <_ZN7TwoWire14user_onRequestE>
    26f4:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <_ZN7TwoWire14user_onRequestE+0x1>
    26f8:	fc 01       	movw	r30, r24
    26fa:	09 95       	icall
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    26fe:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	00 d0       	rcall	.+0      	; 0x270c <_ZN7TwoWire9onReceiveEPFviE+0x6>
    270c:	00 d0       	rcall	.+0      	; 0x270e <_ZN7TwoWire9onReceiveEPFviE+0x8>
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	7c 83       	std	Y+4, r23	; 0x04
    2718:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <_ZN7TwoWire14user_onReceiveE+0x1>
    2722:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <_ZN7TwoWire14user_onReceiveE>
}
    2726:	00 00       	nop
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	00 d0       	rcall	.+0      	; 0x273c <_ZN7TwoWire9onRequestEPFvvE+0x6>
    273c:	00 d0       	rcall	.+0      	; 0x273e <_ZN7TwoWire9onRequestEPFvvE+0x8>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	7c 83       	std	Y+4, r23	; 0x04
    2748:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <_ZN7TwoWire14user_onRequestE+0x1>
    2752:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <_ZN7TwoWire14user_onRequestE>
}
    2756:	00 00       	nop
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	00 d0       	rcall	.+0      	; 0x276c <_Z41__static_initialization_and_destruction_0ii+0x6>
    276c:	00 d0       	rcall	.+0      	; 0x276e <_Z41__static_initialization_and_destruction_0ii+0x8>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	7c 83       	std	Y+4, r23	; 0x04
    2778:	6b 83       	std	Y+3, r22	; 0x03
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	41 f4       	brne	.+16     	; 0x2792 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	21 f4       	brne	.+8      	; 0x2792 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    278a:	84 e5       	ldi	r24, 0x54	; 84
    278c:	97 e0       	ldi	r25, 0x07	; 7
    278e:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN7TwoWireC1Ev>
    2792:	00 00       	nop
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	08 95       	ret

000027a2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	6f ef       	ldi	r22, 0xFF	; 255
    27ac:	7f ef       	ldi	r23, 0xFF	; 255
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z41__static_initialization_and_destruction_0ii>
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <_ZN5PrintaSERKS_+0x6>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <_ZN5PrintaSERKS_+0x8>
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	7c 83       	std	Y+4, r23	; 0x04
    27ce:	6b 83       	std	Y+3, r22	; 0x03
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	fc 01       	movw	r30, r24
    27d6:	22 81       	ldd	r18, Z+2	; 0x02
    27d8:	33 81       	ldd	r19, Z+3	; 0x03
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	fc 01       	movw	r30, r24
    27e0:	33 83       	std	Z+3, r19	; 0x03
    27e2:	22 83       	std	Z+2, r18	; 0x02
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <_ZN6StreamaSERKS_+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <_ZN6StreamaSERKS_+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	7c 83       	std	Y+4, r23	; 0x04
    2808:	6b 83       	std	Y+3, r22	; 0x03
    280a:	2b 81       	ldd	r18, Y+3	; 0x03
    280c:	3c 81       	ldd	r19, Y+4	; 0x04
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	b9 01       	movw	r22, r18
    2814:	0e 94 de 13 	call	0x27bc	; 0x27bc <_ZN5PrintaSERKS_>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	fc 01       	movw	r30, r24
    281e:	84 81       	ldd	r24, Z+4	; 0x04
    2820:	95 81       	ldd	r25, Z+5	; 0x05
    2822:	a6 81       	ldd	r26, Z+6	; 0x06
    2824:	b7 81       	ldd	r27, Z+7	; 0x07
    2826:	29 81       	ldd	r18, Y+1	; 0x01
    2828:	3a 81       	ldd	r19, Y+2	; 0x02
    282a:	f9 01       	movw	r30, r18
    282c:	84 83       	std	Z+4, r24	; 0x04
    282e:	95 83       	std	Z+5, r25	; 0x05
    2830:	a6 83       	std	Z+6, r26	; 0x06
    2832:	b7 83       	std	Z+7, r27	; 0x07
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04
    2838:	fc 01       	movw	r30, r24
    283a:	80 85       	ldd	r24, Z+8	; 0x08
    283c:	91 85       	ldd	r25, Z+9	; 0x09
    283e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2840:	b3 85       	ldd	r27, Z+11	; 0x0b
    2842:	29 81       	ldd	r18, Y+1	; 0x01
    2844:	3a 81       	ldd	r19, Y+2	; 0x02
    2846:	f9 01       	movw	r30, r18
    2848:	80 87       	std	Z+8, r24	; 0x08
    284a:	91 87       	std	Z+9, r25	; 0x09
    284c:	a2 87       	std	Z+10, r26	; 0x0a
    284e:	b3 87       	std	Z+11, r27	; 0x0b
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	08 95       	ret

00002862 <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	00 d0       	rcall	.+0      	; 0x2868 <_ZN13Adafruit_FONAaSERKS_+0x6>
    2868:	00 d0       	rcall	.+0      	; 0x286a <_ZN13Adafruit_FONAaSERKS_+0x8>
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	7c 83       	std	Y+4, r23	; 0x04
    2874:	6b 83       	std	Y+3, r22	; 0x03
    2876:	2b 81       	ldd	r18, Y+3	; 0x03
    2878:	3c 81       	ldd	r19, Y+4	; 0x04
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	b9 01       	movw	r22, r18
    2880:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN6StreamaSERKS_>
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	fc 01       	movw	r30, r24
    288a:	24 85       	ldd	r18, Z+12	; 0x0c
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	9a 81       	ldd	r25, Y+2	; 0x02
    2890:	fc 01       	movw	r30, r24
    2892:	24 87       	std	Z+12, r18	; 0x0c
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	fc 01       	movw	r30, r24
    289a:	25 85       	ldd	r18, Z+13	; 0x0d
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	fc 01       	movw	r30, r24
    28a2:	25 87       	std	Z+13, r18	; 0x0d
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	9a 81       	ldd	r25, Y+2	; 0x02
    28a8:	ac 01       	movw	r20, r24
    28aa:	42 5f       	subi	r20, 0xF2	; 242
    28ac:	5f 4f       	sbci	r21, 0xFF	; 255
    28ae:	8e ef       	ldi	r24, 0xFE	; 254
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	2b 81       	ldd	r18, Y+3	; 0x03
    28b4:	3c 81       	ldd	r19, Y+4	; 0x04
    28b6:	22 5f       	subi	r18, 0xF2	; 242
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	8f 3f       	cpi	r24, 0xFF	; 255
    28bc:	ff ef       	ldi	r31, 0xFF	; 255
    28be:	9f 07       	cpc	r25, r31
    28c0:	51 f0       	breq	.+20     	; 0x28d6 <_ZN13Adafruit_FONAaSERKS_+0x74>
    28c2:	f9 01       	movw	r30, r18
    28c4:	60 81       	ld	r22, Z
    28c6:	fa 01       	movw	r30, r20
    28c8:	60 83       	st	Z, r22
    28ca:	4f 5f       	subi	r20, 0xFF	; 255
    28cc:	5f 4f       	sbci	r21, 0xFF	; 255
    28ce:	2f 5f       	subi	r18, 0xFF	; 255
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f2 cf       	rjmp	.-28     	; 0x28ba <_ZN13Adafruit_FONAaSERKS_+0x58>
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	83 5f       	subi	r24, 0xF3	; 243
    28dc:	9e 4f       	sbci	r25, 0xFE	; 254
    28de:	fc 01       	movw	r30, r24
    28e0:	20 81       	ld	r18, Z
    28e2:	31 81       	ldd	r19, Z+1	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	83 5f       	subi	r24, 0xF3	; 243
    28ea:	9e 4f       	sbci	r25, 0xFE	; 254
    28ec:	fc 01       	movw	r30, r24
    28ee:	31 83       	std	Z+1, r19	; 0x01
    28f0:	20 83       	st	Z, r18
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	81 5f       	subi	r24, 0xF1	; 241
    28f8:	9e 4f       	sbci	r25, 0xFE	; 254
    28fa:	fc 01       	movw	r30, r24
    28fc:	20 81       	ld	r18, Z
    28fe:	31 81       	ldd	r19, Z+1	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	81 5f       	subi	r24, 0xF1	; 241
    2906:	9e 4f       	sbci	r25, 0xFE	; 254
    2908:	fc 01       	movw	r30, r24
    290a:	31 83       	std	Z+1, r19	; 0x01
    290c:	20 83       	st	Z, r18
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	9c 81       	ldd	r25, Y+4	; 0x04
    2912:	8f 5e       	subi	r24, 0xEF	; 239
    2914:	9e 4f       	sbci	r25, 0xFE	; 254
    2916:	fc 01       	movw	r30, r24
    2918:	20 81       	ld	r18, Z
    291a:	31 81       	ldd	r19, Z+1	; 0x01
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	9a 81       	ldd	r25, Y+2	; 0x02
    2920:	8f 5e       	subi	r24, 0xEF	; 239
    2922:	9e 4f       	sbci	r25, 0xFE	; 254
    2924:	fc 01       	movw	r30, r24
    2926:	31 83       	std	Z+1, r19	; 0x01
    2928:	20 83       	st	Z, r18
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	8d 5e       	subi	r24, 0xED	; 237
    2930:	9e 4f       	sbci	r25, 0xFE	; 254
    2932:	fc 01       	movw	r30, r24
    2934:	20 81       	ld	r18, Z
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	8d 5e       	subi	r24, 0xED	; 237
    293c:	9e 4f       	sbci	r25, 0xFE	; 254
    293e:	fc 01       	movw	r30, r24
    2940:	20 83       	st	Z, r18
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	8c 5e       	subi	r24, 0xEC	; 236
    2948:	9e 4f       	sbci	r25, 0xFE	; 254
    294a:	fc 01       	movw	r30, r24
    294c:	20 81       	ld	r18, Z
    294e:	31 81       	ldd	r19, Z+1	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	8c 5e       	subi	r24, 0xEC	; 236
    2956:	9e 4f       	sbci	r25, 0xFE	; 254
    2958:	fc 01       	movw	r30, r24
    295a:	31 83       	std	Z+1, r19	; 0x01
    295c:	20 83       	st	Z, r18
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	8a 5e       	subi	r24, 0xEA	; 234
    2964:	9e 4f       	sbci	r25, 0xFE	; 254
    2966:	fc 01       	movw	r30, r24
    2968:	20 81       	ld	r18, Z
    296a:	31 81       	ldd	r19, Z+1	; 0x01
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	8a 5e       	subi	r24, 0xEA	; 234
    2972:	9e 4f       	sbci	r25, 0xFE	; 254
    2974:	fc 01       	movw	r30, r24
    2976:	31 83       	std	Z+1, r19	; 0x01
    2978:	20 83       	st	Z, r18
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	88 5e       	subi	r24, 0xE8	; 232
    2980:	9e 4f       	sbci	r25, 0xFE	; 254
    2982:	fc 01       	movw	r30, r24
    2984:	20 81       	ld	r18, Z
    2986:	31 81       	ldd	r19, Z+1	; 0x01
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	88 5e       	subi	r24, 0xE8	; 232
    298e:	9e 4f       	sbci	r25, 0xFE	; 254
    2990:	fc 01       	movw	r30, r24
    2992:	31 83       	std	Z+1, r19	; 0x01
    2994:	20 83       	st	Z, r18
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	08 95       	ret

000029a8 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <_ZN14HardwareSerial5beginEm+0x6>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <_ZN14HardwareSerial5beginEm+0x8>
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <_ZN14HardwareSerial5beginEm+0xa>
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	4b 83       	std	Y+3, r20	; 0x03
    29bc:	5c 83       	std	Y+4, r21	; 0x04
    29be:	6d 83       	std	Y+5, r22	; 0x05
    29c0:	7e 83       	std	Y+6, r23	; 0x06
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	ad 81       	ldd	r26, Y+5	; 0x05
    29c8:	be 81       	ldd	r27, Y+6	; 0x06
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	26 e0       	ldi	r18, 0x06	; 6
    29d0:	ac 01       	movw	r20, r24
    29d2:	bd 01       	movw	r22, r26
    29d4:	cf 01       	movw	r24, r30
    29d6:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN14HardwareSerial5beginEmh>
    29da:	00 00       	nop
    29dc:	26 96       	adiw	r28, 0x06	; 6
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <_ZN7TwoWire5writeEi+0x6>
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <_ZN7TwoWire5writeEi+0x8>
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	7c 83       	std	Y+4, r23	; 0x04
    2a00:	6b 83       	std	Y+3, r22	; 0x03
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	fc 01       	movw	r30, r24
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	20 81       	ld	r18, Z
    2a10:	31 81       	ldd	r19, Z+1	; 0x01
    2a12:	4b 81       	ldd	r20, Y+3	; 0x03
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	64 2f       	mov	r22, r20
    2a1a:	f9 01       	movw	r30, r18
    2a1c:	09 95       	icall
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	08 95       	ret

00002a2c <_ZN10ModuleMetaC1Ev>:
	//boolean HasDataToSend=false;
	//uint16_t GsmResultCode=0;
	//uint16_t SmsResultCode=0;
//}

struct ModuleMeta{
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <_ZN10ModuleMetaC1Ev+0x6>
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	fc 01       	movw	r30, r24
    2a40:	11 82       	std	Z+1, r1	; 0x01
    2a42:	00 00       	nop
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	08 95       	ret

00002a4e <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <_ZN5Print13setWriteErrorEi+0x6>
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <_ZN5Print13setWriteErrorEi+0x8>
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	7c 83       	std	Y+4, r23	; 0x04
    2a60:	6b 83       	std	Y+3, r22	; 0x03
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	2b 81       	ldd	r18, Y+3	; 0x03
    2a68:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	33 83       	std	Z+3, r19	; 0x03
    2a6e:	22 83       	std	Z+2, r18	; 0x02
    2a70:	00 00       	nop
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	08 95       	ret

00002a80 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <_ZN5PrintC1Ev+0x6>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	24 ec       	ldi	r18, 0xC4	; 196
    2a90:	32 e0       	ldi	r19, 0x02	; 2
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	fc 01       	movw	r30, r24
    2a98:	31 83       	std	Z+1, r19	; 0x01
    2a9a:	20 83       	st	Z, r18
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	13 82       	std	Z+3, r1	; 0x03
    2aa4:	12 82       	std	Z+2, r1	; 0x02
    2aa6:	00 00       	nop
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	08 95       	ret

00002ab2 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <_ZN6StreamC1Ev+0x6>
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <_ZN5PrintC1Ev>
    2ac8:	23 e9       	ldi	r18, 0x93	; 147
    2aca:	32 e0       	ldi	r19, 0x02	; 2
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	31 83       	std	Z+1, r19	; 0x01
    2ad4:	20 83       	st	Z, r18
    2ad6:	29 81       	ldd	r18, Y+1	; 0x01
    2ad8:	3a 81       	ldd	r19, Y+2	; 0x02
    2ada:	88 ee       	ldi	r24, 0xE8	; 232
    2adc:	93 e0       	ldi	r25, 0x03	; 3
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	f9 01       	movw	r30, r18
    2ae4:	84 83       	std	Z+4, r24	; 0x04
    2ae6:	95 83       	std	Z+5, r25	; 0x05
    2ae8:	a6 83       	std	Z+6, r26	; 0x06
    2aea:	b7 83       	std	Z+7, r27	; 0x07
    2aec:	00 00       	nop
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <__fixsfsi>:
    2af8:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixunssfsi>
    2afc:	68 94       	set
    2afe:	b1 11       	cpse	r27, r1
    2b00:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_szero>
    2b04:	08 95       	ret

00002b06 <__fixunssfsi>:
    2b06:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__fp_splitA>
    2b0a:	88 f0       	brcs	.+34     	; 0x2b2e <__fixunssfsi+0x28>
    2b0c:	9f 57       	subi	r25, 0x7F	; 127
    2b0e:	98 f0       	brcs	.+38     	; 0x2b36 <__fixunssfsi+0x30>
    2b10:	b9 2f       	mov	r27, r25
    2b12:	99 27       	eor	r25, r25
    2b14:	b7 51       	subi	r27, 0x17	; 23
    2b16:	b0 f0       	brcs	.+44     	; 0x2b44 <__fixunssfsi+0x3e>
    2b18:	e1 f0       	breq	.+56     	; 0x2b52 <__fixunssfsi+0x4c>
    2b1a:	66 0f       	add	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	88 1f       	adc	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	1a f0       	brmi	.+6      	; 0x2b2a <__fixunssfsi+0x24>
    2b24:	ba 95       	dec	r27
    2b26:	c9 f7       	brne	.-14     	; 0x2b1a <__fixunssfsi+0x14>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <__fixunssfsi+0x4c>
    2b2a:	b1 30       	cpi	r27, 0x01	; 1
    2b2c:	91 f0       	breq	.+36     	; 0x2b52 <__fixunssfsi+0x4c>
    2b2e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_zero>
    2b32:	b1 e0       	ldi	r27, 0x01	; 1
    2b34:	08 95       	ret
    2b36:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__fp_zero>
    2b3a:	67 2f       	mov	r22, r23
    2b3c:	78 2f       	mov	r23, r24
    2b3e:	88 27       	eor	r24, r24
    2b40:	b8 5f       	subi	r27, 0xF8	; 248
    2b42:	39 f0       	breq	.+14     	; 0x2b52 <__fixunssfsi+0x4c>
    2b44:	b9 3f       	cpi	r27, 0xF9	; 249
    2b46:	cc f3       	brlt	.-14     	; 0x2b3a <__fixunssfsi+0x34>
    2b48:	86 95       	lsr	r24
    2b4a:	77 95       	ror	r23
    2b4c:	67 95       	ror	r22
    2b4e:	b3 95       	inc	r27
    2b50:	d9 f7       	brne	.-10     	; 0x2b48 <__fixunssfsi+0x42>
    2b52:	3e f4       	brtc	.+14     	; 0x2b62 <__fixunssfsi+0x5c>
    2b54:	90 95       	com	r25
    2b56:	80 95       	com	r24
    2b58:	70 95       	com	r23
    2b5a:	61 95       	neg	r22
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	08 95       	ret

00002b64 <__floatunsisf>:
    2b64:	e8 94       	clt
    2b66:	09 c0       	rjmp	.+18     	; 0x2b7a <__floatsisf+0x12>

00002b68 <__floatsisf>:
    2b68:	97 fb       	bst	r25, 7
    2b6a:	3e f4       	brtc	.+14     	; 0x2b7a <__floatsisf+0x12>
    2b6c:	90 95       	com	r25
    2b6e:	80 95       	com	r24
    2b70:	70 95       	com	r23
    2b72:	61 95       	neg	r22
    2b74:	7f 4f       	sbci	r23, 0xFF	; 255
    2b76:	8f 4f       	sbci	r24, 0xFF	; 255
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	99 23       	and	r25, r25
    2b7c:	a9 f0       	breq	.+42     	; 0x2ba8 <__floatsisf+0x40>
    2b7e:	f9 2f       	mov	r31, r25
    2b80:	96 e9       	ldi	r25, 0x96	; 150
    2b82:	bb 27       	eor	r27, r27
    2b84:	93 95       	inc	r25
    2b86:	f6 95       	lsr	r31
    2b88:	87 95       	ror	r24
    2b8a:	77 95       	ror	r23
    2b8c:	67 95       	ror	r22
    2b8e:	b7 95       	ror	r27
    2b90:	f1 11       	cpse	r31, r1
    2b92:	f8 cf       	rjmp	.-16     	; 0x2b84 <__floatsisf+0x1c>
    2b94:	fa f4       	brpl	.+62     	; 0x2bd4 <__floatsisf+0x6c>
    2b96:	bb 0f       	add	r27, r27
    2b98:	11 f4       	brne	.+4      	; 0x2b9e <__floatsisf+0x36>
    2b9a:	60 ff       	sbrs	r22, 0
    2b9c:	1b c0       	rjmp	.+54     	; 0x2bd4 <__floatsisf+0x6c>
    2b9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba6:	16 c0       	rjmp	.+44     	; 0x2bd4 <__floatsisf+0x6c>
    2ba8:	88 23       	and	r24, r24
    2baa:	11 f0       	breq	.+4      	; 0x2bb0 <__floatsisf+0x48>
    2bac:	96 e9       	ldi	r25, 0x96	; 150
    2bae:	11 c0       	rjmp	.+34     	; 0x2bd2 <__floatsisf+0x6a>
    2bb0:	77 23       	and	r23, r23
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <__floatsisf+0x54>
    2bb4:	9e e8       	ldi	r25, 0x8E	; 142
    2bb6:	87 2f       	mov	r24, r23
    2bb8:	76 2f       	mov	r23, r22
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <__floatsisf+0x5e>
    2bbc:	66 23       	and	r22, r22
    2bbe:	71 f0       	breq	.+28     	; 0x2bdc <__floatsisf+0x74>
    2bc0:	96 e8       	ldi	r25, 0x86	; 134
    2bc2:	86 2f       	mov	r24, r22
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	2a f0       	brmi	.+10     	; 0x2bd4 <__floatsisf+0x6c>
    2bca:	9a 95       	dec	r25
    2bcc:	66 0f       	add	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	da f7       	brpl	.-10     	; 0x2bca <__floatsisf+0x62>
    2bd4:	88 0f       	add	r24, r24
    2bd6:	96 95       	lsr	r25
    2bd8:	87 95       	ror	r24
    2bda:	97 f9       	bld	r25, 7
    2bdc:	08 95       	ret

00002bde <__fp_split3>:
    2bde:	57 fd       	sbrc	r21, 7
    2be0:	90 58       	subi	r25, 0x80	; 128
    2be2:	44 0f       	add	r20, r20
    2be4:	55 1f       	adc	r21, r21
    2be6:	59 f0       	breq	.+22     	; 0x2bfe <__fp_splitA+0x10>
    2be8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bea:	71 f0       	breq	.+28     	; 0x2c08 <__fp_splitA+0x1a>
    2bec:	47 95       	ror	r20

00002bee <__fp_splitA>:
    2bee:	88 0f       	add	r24, r24
    2bf0:	97 fb       	bst	r25, 7
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	61 f0       	breq	.+24     	; 0x2c0e <__fp_splitA+0x20>
    2bf6:	9f 3f       	cpi	r25, 0xFF	; 255
    2bf8:	79 f0       	breq	.+30     	; 0x2c18 <__fp_splitA+0x2a>
    2bfa:	87 95       	ror	r24
    2bfc:	08 95       	ret
    2bfe:	12 16       	cp	r1, r18
    2c00:	13 06       	cpc	r1, r19
    2c02:	14 06       	cpc	r1, r20
    2c04:	55 1f       	adc	r21, r21
    2c06:	f2 cf       	rjmp	.-28     	; 0x2bec <__fp_split3+0xe>
    2c08:	46 95       	lsr	r20
    2c0a:	f1 df       	rcall	.-30     	; 0x2bee <__fp_splitA>
    2c0c:	08 c0       	rjmp	.+16     	; 0x2c1e <__fp_splitA+0x30>
    2c0e:	16 16       	cp	r1, r22
    2c10:	17 06       	cpc	r1, r23
    2c12:	18 06       	cpc	r1, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	f1 cf       	rjmp	.-30     	; 0x2bfa <__fp_splitA+0xc>
    2c18:	86 95       	lsr	r24
    2c1a:	71 05       	cpc	r23, r1
    2c1c:	61 05       	cpc	r22, r1
    2c1e:	08 94       	sec
    2c20:	08 95       	ret

00002c22 <__fp_zero>:
    2c22:	e8 94       	clt

00002c24 <__fp_szero>:
    2c24:	bb 27       	eor	r27, r27
    2c26:	66 27       	eor	r22, r22
    2c28:	77 27       	eor	r23, r23
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	97 f9       	bld	r25, 7
    2c2e:	08 95       	ret

00002c30 <__mulsf3>:
    2c30:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3x>
    2c34:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__fp_round>
    2c38:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__fp_pscA>
    2c3c:	38 f0       	brcs	.+14     	; 0x2c4c <__mulsf3+0x1c>
    2c3e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__fp_pscB>
    2c42:	20 f0       	brcs	.+8      	; 0x2c4c <__mulsf3+0x1c>
    2c44:	95 23       	and	r25, r21
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <__mulsf3+0x1c>
    2c48:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_inf>
    2c4c:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_nan>
    2c50:	11 24       	eor	r1, r1
    2c52:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_szero>

00002c56 <__mulsf3x>:
    2c56:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__fp_split3>
    2c5a:	70 f3       	brcs	.-36     	; 0x2c38 <__mulsf3+0x8>

00002c5c <__mulsf3_pse>:
    2c5c:	95 9f       	mul	r25, r21
    2c5e:	c1 f3       	breq	.-16     	; 0x2c50 <__mulsf3+0x20>
    2c60:	95 0f       	add	r25, r21
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	55 1f       	adc	r21, r21
    2c66:	62 9f       	mul	r22, r18
    2c68:	f0 01       	movw	r30, r0
    2c6a:	72 9f       	mul	r23, r18
    2c6c:	bb 27       	eor	r27, r27
    2c6e:	f0 0d       	add	r31, r0
    2c70:	b1 1d       	adc	r27, r1
    2c72:	63 9f       	mul	r22, r19
    2c74:	aa 27       	eor	r26, r26
    2c76:	f0 0d       	add	r31, r0
    2c78:	b1 1d       	adc	r27, r1
    2c7a:	aa 1f       	adc	r26, r26
    2c7c:	64 9f       	mul	r22, r20
    2c7e:	66 27       	eor	r22, r22
    2c80:	b0 0d       	add	r27, r0
    2c82:	a1 1d       	adc	r26, r1
    2c84:	66 1f       	adc	r22, r22
    2c86:	82 9f       	mul	r24, r18
    2c88:	22 27       	eor	r18, r18
    2c8a:	b0 0d       	add	r27, r0
    2c8c:	a1 1d       	adc	r26, r1
    2c8e:	62 1f       	adc	r22, r18
    2c90:	73 9f       	mul	r23, r19
    2c92:	b0 0d       	add	r27, r0
    2c94:	a1 1d       	adc	r26, r1
    2c96:	62 1f       	adc	r22, r18
    2c98:	83 9f       	mul	r24, r19
    2c9a:	a0 0d       	add	r26, r0
    2c9c:	61 1d       	adc	r22, r1
    2c9e:	22 1f       	adc	r18, r18
    2ca0:	74 9f       	mul	r23, r20
    2ca2:	33 27       	eor	r19, r19
    2ca4:	a0 0d       	add	r26, r0
    2ca6:	61 1d       	adc	r22, r1
    2ca8:	23 1f       	adc	r18, r19
    2caa:	84 9f       	mul	r24, r20
    2cac:	60 0d       	add	r22, r0
    2cae:	21 1d       	adc	r18, r1
    2cb0:	82 2f       	mov	r24, r18
    2cb2:	76 2f       	mov	r23, r22
    2cb4:	6a 2f       	mov	r22, r26
    2cb6:	11 24       	eor	r1, r1
    2cb8:	9f 57       	subi	r25, 0x7F	; 127
    2cba:	50 40       	sbci	r21, 0x00	; 0
    2cbc:	9a f0       	brmi	.+38     	; 0x2ce4 <__mulsf3_pse+0x88>
    2cbe:	f1 f0       	breq	.+60     	; 0x2cfc <__mulsf3_pse+0xa0>
    2cc0:	88 23       	and	r24, r24
    2cc2:	4a f0       	brmi	.+18     	; 0x2cd6 <__mulsf3_pse+0x7a>
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	bb 1f       	adc	r27, r27
    2cca:	66 1f       	adc	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	88 1f       	adc	r24, r24
    2cd0:	91 50       	subi	r25, 0x01	; 1
    2cd2:	50 40       	sbci	r21, 0x00	; 0
    2cd4:	a9 f7       	brne	.-22     	; 0x2cc0 <__mulsf3_pse+0x64>
    2cd6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cd8:	51 05       	cpc	r21, r1
    2cda:	80 f0       	brcs	.+32     	; 0x2cfc <__mulsf3_pse+0xa0>
    2cdc:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_inf>
    2ce0:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_szero>
    2ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ce6:	e4 f3       	brlt	.-8      	; 0x2ce0 <__mulsf3_pse+0x84>
    2ce8:	98 3e       	cpi	r25, 0xE8	; 232
    2cea:	d4 f3       	brlt	.-12     	; 0x2ce0 <__mulsf3_pse+0x84>
    2cec:	86 95       	lsr	r24
    2cee:	77 95       	ror	r23
    2cf0:	67 95       	ror	r22
    2cf2:	b7 95       	ror	r27
    2cf4:	f7 95       	ror	r31
    2cf6:	e7 95       	ror	r30
    2cf8:	9f 5f       	subi	r25, 0xFF	; 255
    2cfa:	c1 f7       	brne	.-16     	; 0x2cec <__mulsf3_pse+0x90>
    2cfc:	fe 2b       	or	r31, r30
    2cfe:	88 0f       	add	r24, r24
    2d00:	91 1d       	adc	r25, r1
    2d02:	96 95       	lsr	r25
    2d04:	87 95       	ror	r24
    2d06:	97 f9       	bld	r25, 7
    2d08:	08 95       	ret

00002d0a <__fp_inf>:
    2d0a:	97 f9       	bld	r25, 7
    2d0c:	9f 67       	ori	r25, 0x7F	; 127
    2d0e:	80 e8       	ldi	r24, 0x80	; 128
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	08 95       	ret

00002d16 <__fp_nan>:
    2d16:	9f ef       	ldi	r25, 0xFF	; 255
    2d18:	80 ec       	ldi	r24, 0xC0	; 192
    2d1a:	08 95       	ret

00002d1c <__fp_pscA>:
    2d1c:	00 24       	eor	r0, r0
    2d1e:	0a 94       	dec	r0
    2d20:	16 16       	cp	r1, r22
    2d22:	17 06       	cpc	r1, r23
    2d24:	18 06       	cpc	r1, r24
    2d26:	09 06       	cpc	r0, r25
    2d28:	08 95       	ret

00002d2a <__fp_pscB>:
    2d2a:	00 24       	eor	r0, r0
    2d2c:	0a 94       	dec	r0
    2d2e:	12 16       	cp	r1, r18
    2d30:	13 06       	cpc	r1, r19
    2d32:	14 06       	cpc	r1, r20
    2d34:	05 06       	cpc	r0, r21
    2d36:	08 95       	ret

00002d38 <__fp_round>:
    2d38:	09 2e       	mov	r0, r25
    2d3a:	03 94       	inc	r0
    2d3c:	00 0c       	add	r0, r0
    2d3e:	11 f4       	brne	.+4      	; 0x2d44 <__fp_round+0xc>
    2d40:	88 23       	and	r24, r24
    2d42:	52 f0       	brmi	.+20     	; 0x2d58 <__fp_round+0x20>
    2d44:	bb 0f       	add	r27, r27
    2d46:	40 f4       	brcc	.+16     	; 0x2d58 <__fp_round+0x20>
    2d48:	bf 2b       	or	r27, r31
    2d4a:	11 f4       	brne	.+4      	; 0x2d50 <__fp_round+0x18>
    2d4c:	60 ff       	sbrs	r22, 0
    2d4e:	04 c0       	rjmp	.+8      	; 0x2d58 <__fp_round+0x20>
    2d50:	6f 5f       	subi	r22, 0xFF	; 255
    2d52:	7f 4f       	sbci	r23, 0xFF	; 255
    2d54:	8f 4f       	sbci	r24, 0xFF	; 255
    2d56:	9f 4f       	sbci	r25, 0xFF	; 255
    2d58:	08 95       	ret

00002d5a <__cxa_pure_virtual>:
    2d5a:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <abort>

00002d5e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2d5e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2d60:	91 8d       	ldd	r25, Z+25	; 0x19
    2d62:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d64:	89 2f       	mov	r24, r25
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	80 5c       	subi	r24, 0xC0	; 192
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	82 1b       	sub	r24, r18
    2d6e:	91 09       	sbc	r25, r1
}
    2d70:	8f 73       	andi	r24, 0x3F	; 63
    2d72:	99 27       	eor	r25, r25
    2d74:	08 95       	ret

00002d76 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2d76:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2d78:	91 8d       	ldd	r25, Z+25	; 0x19
    2d7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d7c:	98 17       	cp	r25, r24
    2d7e:	31 f0       	breq	.+12     	; 0x2d8c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2d80:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d82:	e8 0f       	add	r30, r24
    2d84:	f1 1d       	adc	r31, r1
    2d86:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2d90:	08 95       	ret

00002d92 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2d92:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2d94:	91 8d       	ldd	r25, Z+25	; 0x19
    2d96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d98:	98 17       	cp	r25, r24
    2d9a:	61 f0       	breq	.+24     	; 0x2db4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2d9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d9e:	df 01       	movw	r26, r30
    2da0:	a8 0f       	add	r26, r24
    2da2:	b1 1d       	adc	r27, r1
    2da4:	5d 96       	adiw	r26, 0x1d	; 29
    2da6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2da8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2daa:	9f 5f       	subi	r25, 0xFF	; 255
    2dac:	9f 73       	andi	r25, 0x3F	; 63
    2dae:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2db8:	08 95       	ret

00002dba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2dba:	82 e3       	ldi	r24, 0x32	; 50
    2dbc:	98 e1       	ldi	r25, 0x18	; 24
    2dbe:	89 2b       	or	r24, r25
    2dc0:	49 f0       	breq	.+18     	; 0x2dd4 <_Z14serialEventRunv+0x1a>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	89 2b       	or	r24, r25
    2dc8:	29 f0       	breq	.+10     	; 0x2dd4 <_Z14serialEventRunv+0x1a>
    2dca:	0e 94 32 18 	call	0x3064	; 0x3064 <_Z17Serial0_availablev>
    2dce:	81 11       	cpse	r24, r1
    2dd0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2dd4:	08 95       	ret

00002dd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2dd6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2dd8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2dda:	df 01       	movw	r26, r30
    2ddc:	a8 0f       	add	r26, r24
    2dde:	b1 1d       	adc	r27, r1
    2de0:	a3 5a       	subi	r26, 0xA3	; 163
    2de2:	bf 4f       	sbci	r27, 0xFF	; 255
    2de4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2de6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	01 96       	adiw	r24, 0x01	; 1
    2dec:	8f 73       	andi	r24, 0x3F	; 63
    2dee:	99 27       	eor	r25, r25
    2df0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2df2:	a6 89       	ldd	r26, Z+22	; 0x16
    2df4:	b7 89       	ldd	r27, Z+23	; 0x17
    2df6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2df8:	a0 89       	ldd	r26, Z+16	; 0x10
    2dfa:	b1 89       	ldd	r27, Z+17	; 0x11
    2dfc:	8c 91       	ld	r24, X
    2dfe:	80 64       	ori	r24, 0x40	; 64
    2e00:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2e02:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e04:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e06:	98 13       	cpse	r25, r24
    2e08:	06 c0       	rjmp	.+12     	; 0x2e16 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2e0a:	02 88       	ldd	r0, Z+18	; 0x12
    2e0c:	f3 89       	ldd	r31, Z+19	; 0x13
    2e0e:	e0 2d       	mov	r30, r0
    2e10:	80 81       	ld	r24, Z
    2e12:	8f 7d       	andi	r24, 0xDF	; 223
    2e14:	80 83       	st	Z, r24
    2e16:	08 95       	ret

00002e18 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	ec 01       	movw	r28, r24
  _written = true;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2e2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e2e:	98 13       	cpse	r25, r24
    2e30:	05 c0       	rjmp	.+10     	; 0x2e3c <_ZN14HardwareSerial5writeEh+0x24>
    2e32:	e8 89       	ldd	r30, Y+16	; 0x10
    2e34:	f9 89       	ldd	r31, Y+17	; 0x11
    2e36:	80 81       	ld	r24, Z
    2e38:	85 fd       	sbrc	r24, 5
    2e3a:	24 c0       	rjmp	.+72     	; 0x2e84 <_ZN14HardwareSerial5writeEh+0x6c>
    2e3c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2e3e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2e40:	10 e0       	ldi	r17, 0x00	; 0
    2e42:	0f 5f       	subi	r16, 0xFF	; 255
    2e44:	1f 4f       	sbci	r17, 0xFF	; 255
    2e46:	0f 73       	andi	r16, 0x3F	; 63
    2e48:	11 27       	eor	r17, r17
    2e4a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e4e:	e8 12       	cpse	r14, r24
    2e50:	0c c0       	rjmp	.+24     	; 0x2e6a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	07 fc       	sbrc	r0, 7
    2e56:	fa cf       	rjmp	.-12     	; 0x2e4c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2e58:	e8 89       	ldd	r30, Y+16	; 0x10
    2e5a:	f9 89       	ldd	r31, Y+17	; 0x11
    2e5c:	80 81       	ld	r24, Z
    2e5e:	85 ff       	sbrs	r24, 5
    2e60:	f5 cf       	rjmp	.-22     	; 0x2e4c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2e62:	ce 01       	movw	r24, r28
    2e64:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e68:	f1 cf       	rjmp	.-30     	; 0x2e4c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e8 0f       	add	r30, r24
    2e70:	f1 1d       	adc	r31, r1
    2e72:	e3 5a       	subi	r30, 0xA3	; 163
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2e78:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2e7a:	ea 89       	ldd	r30, Y+18	; 0x12
    2e7c:	fb 89       	ldd	r31, Y+19	; 0x13
    2e7e:	80 81       	ld	r24, Z
    2e80:	80 62       	ori	r24, 0x20	; 32
    2e82:	07 c0       	rjmp	.+14     	; 0x2e92 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2e84:	ee 89       	ldd	r30, Y+22	; 0x16
    2e86:	ff 89       	ldd	r31, Y+23	; 0x17
    2e88:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2e8a:	e8 89       	ldd	r30, Y+16	; 0x10
    2e8c:	f9 89       	ldd	r31, Y+17	; 0x11
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 64       	ori	r24, 0x40	; 64
    2e92:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	08 95       	ret

00002ea6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2eac:	88 8d       	ldd	r24, Y+24	; 0x18
    2eae:	88 23       	and	r24, r24
    2eb0:	c9 f0       	breq	.+50     	; 0x2ee4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2eb2:	ea 89       	ldd	r30, Y+18	; 0x12
    2eb4:	fb 89       	ldd	r31, Y+19	; 0x13
    2eb6:	80 81       	ld	r24, Z
    2eb8:	85 fd       	sbrc	r24, 5
    2eba:	05 c0       	rjmp	.+10     	; 0x2ec6 <_ZN14HardwareSerial5flushEv+0x20>
    2ebc:	a8 89       	ldd	r26, Y+16	; 0x10
    2ebe:	b9 89       	ldd	r27, Y+17	; 0x11
    2ec0:	8c 91       	ld	r24, X
    2ec2:	86 fd       	sbrc	r24, 6
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	07 fc       	sbrc	r0, 7
    2eca:	f5 cf       	rjmp	.-22     	; 0x2eb6 <_ZN14HardwareSerial5flushEv+0x10>
    2ecc:	80 81       	ld	r24, Z
    2ece:	85 ff       	sbrs	r24, 5
    2ed0:	f2 cf       	rjmp	.-28     	; 0x2eb6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2ed2:	a8 89       	ldd	r26, Y+16	; 0x10
    2ed4:	b9 89       	ldd	r27, Y+17	; 0x11
    2ed6:	8c 91       	ld	r24, X
    2ed8:	85 ff       	sbrs	r24, 5
    2eda:	ed cf       	rjmp	.-38     	; 0x2eb6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2edc:	ce 01       	movw	r24, r28
    2ede:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2ee2:	e7 cf       	rjmp	.-50     	; 0x2eb2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	08 95       	ret

00002eea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2eea:	cf 92       	push	r12
    2eec:	df 92       	push	r13
    2eee:	ef 92       	push	r14
    2ef0:	ff 92       	push	r15
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	ec 01       	movw	r28, r24
    2efa:	6a 01       	movw	r12, r20
    2efc:	7b 01       	movw	r14, r22
    2efe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2f00:	e8 89       	ldd	r30, Y+16	; 0x10
    2f02:	f9 89       	ldd	r31, Y+17	; 0x11
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2f08:	41 15       	cp	r20, r1
    2f0a:	51 4e       	sbci	r21, 0xE1	; 225
    2f0c:	61 05       	cpc	r22, r1
    2f0e:	71 05       	cpc	r23, r1
    2f10:	b1 f0       	breq	.+44     	; 0x2f3e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	79 e0       	ldi	r23, 0x09	; 9
    2f16:	8d e3       	ldi	r24, 0x3D	; 61
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	a7 01       	movw	r20, r14
    2f1c:	96 01       	movw	r18, r12
    2f1e:	0e 94 b5 2a 	call	0x556a	; 0x556a <__udivmodsi4>
    2f22:	da 01       	movw	r26, r20
    2f24:	c9 01       	movw	r24, r18
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	a1 09       	sbc	r26, r1
    2f2a:	b1 09       	sbc	r27, r1
    2f2c:	b6 95       	lsr	r27
    2f2e:	a7 95       	ror	r26
    2f30:	97 95       	ror	r25
    2f32:	87 95       	ror	r24
    2f34:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2f36:	21 15       	cp	r18, r1
    2f38:	80 e1       	ldi	r24, 0x10	; 16
    2f3a:	38 07       	cpc	r19, r24
    2f3c:	a8 f0       	brcs	.+42     	; 0x2f68 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2f3e:	e8 89       	ldd	r30, Y+16	; 0x10
    2f40:	f9 89       	ldd	r31, Y+17	; 0x11
    2f42:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2f44:	60 e8       	ldi	r22, 0x80	; 128
    2f46:	74 e8       	ldi	r23, 0x84	; 132
    2f48:	8e e1       	ldi	r24, 0x1E	; 30
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a7 01       	movw	r20, r14
    2f4e:	96 01       	movw	r18, r12
    2f50:	0e 94 b5 2a 	call	0x556a	; 0x556a <__udivmodsi4>
    2f54:	da 01       	movw	r26, r20
    2f56:	c9 01       	movw	r24, r18
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	a1 09       	sbc	r26, r1
    2f5c:	b1 09       	sbc	r27, r1
    2f5e:	b6 95       	lsr	r27
    2f60:	a7 95       	ror	r26
    2f62:	97 95       	ror	r25
    2f64:	87 95       	ror	r24
    2f66:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2f68:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f6a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2f6c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2f6e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f70:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f72:	20 83       	st	Z, r18

  _written = false;
    2f74:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2f76:	ec 89       	ldd	r30, Y+20	; 0x14
    2f78:	fd 89       	ldd	r31, Y+21	; 0x15
    2f7a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2f7c:	ea 89       	ldd	r30, Y+18	; 0x12
    2f7e:	fb 89       	ldd	r31, Y+19	; 0x13
    2f80:	80 81       	ld	r24, Z
    2f82:	80 61       	ori	r24, 0x10	; 16
    2f84:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2f86:	ea 89       	ldd	r30, Y+18	; 0x12
    2f88:	fb 89       	ldd	r31, Y+19	; 0x13
    2f8a:	80 81       	ld	r24, Z
    2f8c:	88 60       	ori	r24, 0x08	; 8
    2f8e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2f90:	ea 89       	ldd	r30, Y+18	; 0x12
    2f92:	fb 89       	ldd	r31, Y+19	; 0x13
    2f94:	80 81       	ld	r24, Z
    2f96:	80 68       	ori	r24, 0x80	; 128
    2f98:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2f9a:	ea 89       	ldd	r30, Y+18	; 0x12
    2f9c:	fb 89       	ldd	r31, Y+19	; 0x13
    2f9e:	80 81       	ld	r24, Z
    2fa0:	8f 7d       	andi	r24, 0xDF	; 223
    2fa2:	80 83       	st	Z, r24
}
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	df 90       	pop	r13
    2fb0:	cf 90       	pop	r12
    2fb2:	08 95       	ret

00002fb4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2fb4:	1f 92       	push	r1
    2fb6:	0f 92       	push	r0
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	0f 92       	push	r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	2f 93       	push	r18
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	ef 93       	push	r30
    2fc6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2fc8:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <Serial+0x10>
    2fcc:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <Serial+0x11>
    2fd0:	80 81       	ld	r24, Z
    2fd2:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <Serial+0x16>
    2fd6:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <Serial+0x17>
    2fda:	82 fd       	sbrc	r24, 2
    2fdc:	12 c0       	rjmp	.+36     	; 0x3002 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2fde:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2fe0:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <Serial+0x19>
    2fe4:	8f 5f       	subi	r24, 0xFF	; 255
    2fe6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2fe8:	20 91 7a 07 	lds	r18, 0x077A	; 0x80077a <Serial+0x1a>
    2fec:	82 17       	cp	r24, r18
    2fee:	51 f0       	breq	.+20     	; 0x3004 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2ff0:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <Serial+0x19>
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	e0 5a       	subi	r30, 0xA0	; 160
    2ff8:	f8 4f       	sbci	r31, 0xF8	; 248
    2ffa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2ffc:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <Serial+0x19>
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3002:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3004:	ff 91       	pop	r31
    3006:	ef 91       	pop	r30
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	2f 91       	pop	r18
    300e:	0f 90       	pop	r0
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	0f 90       	pop	r0
    3014:	1f 90       	pop	r1
    3016:	18 95       	reti

00003018 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3018:	1f 92       	push	r1
    301a:	0f 92       	push	r0
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	0f 92       	push	r0
    3020:	11 24       	eor	r1, r1
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    303a:	80 e6       	ldi	r24, 0x60	; 96
    303c:	97 e0       	ldi	r25, 0x07	; 7
    303e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	7f 91       	pop	r23
    3050:	6f 91       	pop	r22
    3052:	5f 91       	pop	r21
    3054:	4f 91       	pop	r20
    3056:	3f 91       	pop	r19
    3058:	2f 91       	pop	r18
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	0f 90       	pop	r0
    3060:	1f 90       	pop	r1
    3062:	18 95       	reti

00003064 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3064:	80 e6       	ldi	r24, 0x60	; 96
    3066:	97 e0       	ldi	r25, 0x07	; 7
    3068:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_ZN14HardwareSerial9availableEv>
    306c:	21 e0       	ldi	r18, 0x01	; 1
    306e:	89 2b       	or	r24, r25
    3070:	09 f4       	brne	.+2      	; 0x3074 <_Z17Serial0_availablev+0x10>
    3072:	20 e0       	ldi	r18, 0x00	; 0
}
    3074:	82 2f       	mov	r24, r18
    3076:	08 95       	ret

00003078 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3078:	e0 e6       	ldi	r30, 0x60	; 96
    307a:	f7 e0       	ldi	r31, 0x07	; 7
    307c:	13 82       	std	Z+3, r1	; 0x03
    307e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3080:	88 ee       	ldi	r24, 0xE8	; 232
    3082:	93 e0       	ldi	r25, 0x03	; 3
    3084:	a0 e0       	ldi	r26, 0x00	; 0
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	84 83       	std	Z+4, r24	; 0x04
    308a:	95 83       	std	Z+5, r25	; 0x05
    308c:	a6 83       	std	Z+6, r26	; 0x06
    308e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3090:	83 ea       	ldi	r24, 0xA3	; 163
    3092:	92 e0       	ldi	r25, 0x02	; 2
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    3098:	85 ec       	ldi	r24, 0xC5	; 197
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	95 87       	std	Z+13, r25	; 0x0d
    309e:	84 87       	std	Z+12, r24	; 0x0c
    30a0:	84 ec       	ldi	r24, 0xC4	; 196
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	97 87       	std	Z+15, r25	; 0x0f
    30a6:	86 87       	std	Z+14, r24	; 0x0e
    30a8:	80 ec       	ldi	r24, 0xC0	; 192
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	91 8b       	std	Z+17, r25	; 0x11
    30ae:	80 8b       	std	Z+16, r24	; 0x10
    30b0:	81 ec       	ldi	r24, 0xC1	; 193
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	93 8b       	std	Z+19, r25	; 0x13
    30b6:	82 8b       	std	Z+18, r24	; 0x12
    30b8:	82 ec       	ldi	r24, 0xC2	; 194
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	95 8b       	std	Z+21, r25	; 0x15
    30be:	84 8b       	std	Z+20, r24	; 0x14
    30c0:	86 ec       	ldi	r24, 0xC6	; 198
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	97 8b       	std	Z+23, r25	; 0x17
    30c6:	86 8b       	std	Z+22, r24	; 0x16
    30c8:	11 8e       	std	Z+25, r1	; 0x19
    30ca:	12 8e       	std	Z+26, r1	; 0x1a
    30cc:	13 8e       	std	Z+27, r1	; 0x1b
    30ce:	14 8e       	std	Z+28, r1	; 0x1c
    30d0:	08 95       	ret

000030d2 <initVariant>:
    30d2:	08 95       	ret

000030d4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    30d4:	0e 94 b7 1b 	call	0x376e	; 0x376e <init>

	initVariant();
    30d8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    30dc:	0e 94 6e 07 	call	0xedc	; 0xedc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    30e0:	cd ed       	ldi	r28, 0xDD	; 221
    30e2:	d6 e1       	ldi	r29, 0x16	; 22
#endif
	
	setup();
    
	for (;;) {
		loop();
    30e4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <loop>
		if (serialEventRun) serialEventRun();
    30e8:	20 97       	sbiw	r28, 0x00	; 0
    30ea:	e1 f3       	breq	.-8      	; 0x30e4 <main+0x10>
    30ec:	0e 94 dd 16 	call	0x2dba	; 0x2dba <_Z14serialEventRunv>
    30f0:	f9 cf       	rjmp	.-14     	; 0x30e4 <main+0x10>

000030f2 <_Znwj>:
    30f2:	0c 94 10 2b 	jmp	0x5620	; 0x5620 <malloc>

000030f6 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	6c 01       	movw	r12, r24
    3108:	7a 01       	movw	r14, r20
    310a:	8b 01       	movw	r16, r22
    310c:	c0 e0       	ldi	r28, 0x00	; 0
    310e:	d0 e0       	ldi	r29, 0x00	; 0
    3110:	ce 15       	cp	r28, r14
    3112:	df 05       	cpc	r29, r15
    3114:	81 f0       	breq	.+32     	; 0x3136 <_ZN5Print5writeEPKhj+0x40>
    3116:	d8 01       	movw	r26, r16
    3118:	6d 91       	ld	r22, X+
    311a:	8d 01       	movw	r16, r26
    311c:	d6 01       	movw	r26, r12
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	01 90       	ld	r0, Z+
    3124:	f0 81       	ld	r31, Z
    3126:	e0 2d       	mov	r30, r0
    3128:	c6 01       	movw	r24, r12
    312a:	09 95       	icall
    312c:	89 2b       	or	r24, r25
    312e:	11 f0       	breq	.+4      	; 0x3134 <_ZN5Print5writeEPKhj+0x3e>
    3130:	21 96       	adiw	r28, 0x01	; 1
    3132:	ee cf       	rjmp	.-36     	; 0x3110 <_ZN5Print5writeEPKhj+0x1a>
    3134:	7e 01       	movw	r14, r28
    3136:	c7 01       	movw	r24, r14
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	df 90       	pop	r13
    3146:	cf 90       	pop	r12
    3148:	08 95       	ret

0000314a <_ZN5Print5writeEPKc>:
    314a:	61 15       	cp	r22, r1
    314c:	71 05       	cpc	r23, r1
    314e:	79 f0       	breq	.+30     	; 0x316e <_ZN5Print5writeEPKc+0x24>
    3150:	fb 01       	movw	r30, r22
    3152:	01 90       	ld	r0, Z+
    3154:	00 20       	and	r0, r0
    3156:	e9 f7       	brne	.-6      	; 0x3152 <_ZN5Print5writeEPKc+0x8>
    3158:	31 97       	sbiw	r30, 0x01	; 1
    315a:	af 01       	movw	r20, r30
    315c:	46 1b       	sub	r20, r22
    315e:	57 0b       	sbc	r21, r23
    3160:	dc 01       	movw	r26, r24
    3162:	ed 91       	ld	r30, X+
    3164:	fc 91       	ld	r31, X
    3166:	02 80       	ldd	r0, Z+2	; 0x02
    3168:	f3 81       	ldd	r31, Z+3	; 0x03
    316a:	e0 2d       	mov	r30, r0
    316c:	09 94       	ijmp
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	08 95       	ret

00003174 <_ZN5Print5printEPK19__FlashStringHelper>:
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	8c 01       	movw	r16, r24
    3182:	7b 01       	movw	r14, r22
    3184:	c0 e0       	ldi	r28, 0x00	; 0
    3186:	d0 e0       	ldi	r29, 0x00	; 0
    3188:	f7 01       	movw	r30, r14
    318a:	ec 0f       	add	r30, r28
    318c:	fd 1f       	adc	r31, r29
    318e:	64 91       	lpm	r22, Z
    3190:	66 23       	and	r22, r22
    3192:	61 f0       	breq	.+24     	; 0x31ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3194:	d8 01       	movw	r26, r16
    3196:	ed 91       	ld	r30, X+
    3198:	fc 91       	ld	r31, X
    319a:	01 90       	ld	r0, Z+
    319c:	f0 81       	ld	r31, Z
    319e:	e0 2d       	mov	r30, r0
    31a0:	c8 01       	movw	r24, r16
    31a2:	09 95       	icall
    31a4:	89 2b       	or	r24, r25
    31a6:	11 f0       	breq	.+4      	; 0x31ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    31a8:	21 96       	adiw	r28, 0x01	; 1
    31aa:	ee cf       	rjmp	.-36     	; 0x3188 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    31ac:	ce 01       	movw	r24, r28
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	08 95       	ret

000031bc <_ZN5Print5printEPKc>:
    31bc:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_ZN5Print5writeEPKc>

000031c0 <_ZN5Print5printEc>:
    31c0:	dc 01       	movw	r26, r24
    31c2:	ed 91       	ld	r30, X+
    31c4:	fc 91       	ld	r31, X
    31c6:	01 90       	ld	r0, Z+
    31c8:	f0 81       	ld	r31, Z
    31ca:	e0 2d       	mov	r30, r0
    31cc:	09 94       	ijmp

000031ce <_ZN5Print7printlnEv>:
    31ce:	6f ea       	ldi	r22, 0xAF	; 175
    31d0:	72 e0       	ldi	r23, 0x02	; 2
    31d2:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_ZN5Print5writeEPKc>

000031d6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	ec 01       	movw	r28, r24
    31e0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    31e4:	8c 01       	movw	r16, r24
    31e6:	ce 01       	movw	r24, r28
    31e8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    31ec:	80 0f       	add	r24, r16
    31ee:	91 1f       	adc	r25, r17
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	08 95       	ret

000031fa <_ZN5Print7printlnEPKc>:
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	ec 01       	movw	r28, r24
    3204:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN5Print5writeEPKc>
    3208:	8c 01       	movw	r16, r24
    320a:	ce 01       	movw	r24, r28
    320c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    3210:	80 0f       	add	r24, r16
    3212:	91 1f       	adc	r25, r17
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	08 95       	ret

0000321e <_ZN5Print7printlnEc>:
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	ec 01       	movw	r28, r24
    3228:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN5Print5printEc>
    322c:	8c 01       	movw	r16, r24
    322e:	ce 01       	movw	r24, r28
    3230:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    3234:	80 0f       	add	r24, r16
    3236:	91 1f       	adc	r25, r17
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	08 95       	ret

00003242 <_ZN5Print11printNumberEmh>:
    3242:	8f 92       	push	r8
    3244:	9f 92       	push	r9
    3246:	af 92       	push	r10
    3248:	bf 92       	push	r11
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	a1 97       	sbiw	r28, 0x21	; 33
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	7c 01       	movw	r14, r24
    3268:	fa 01       	movw	r30, r20
    326a:	cb 01       	movw	r24, r22
    326c:	19 a2       	std	Y+33, r1	; 0x21
    326e:	22 30       	cpi	r18, 0x02	; 2
    3270:	08 f4       	brcc	.+2      	; 0x3274 <_ZN5Print11printNumberEmh+0x32>
    3272:	2a e0       	ldi	r18, 0x0A	; 10
    3274:	8e 01       	movw	r16, r28
    3276:	0f 5d       	subi	r16, 0xDF	; 223
    3278:	1f 4f       	sbci	r17, 0xFF	; 255
    327a:	82 2e       	mov	r8, r18
    327c:	91 2c       	mov	r9, r1
    327e:	a1 2c       	mov	r10, r1
    3280:	b1 2c       	mov	r11, r1
    3282:	bf 01       	movw	r22, r30
    3284:	a5 01       	movw	r20, r10
    3286:	94 01       	movw	r18, r8
    3288:	0e 94 b5 2a 	call	0x556a	; 0x556a <__udivmodsi4>
    328c:	f9 01       	movw	r30, r18
    328e:	ca 01       	movw	r24, r20
    3290:	01 50       	subi	r16, 0x01	; 1
    3292:	11 09       	sbc	r17, r1
    3294:	6a 30       	cpi	r22, 0x0A	; 10
    3296:	10 f4       	brcc	.+4      	; 0x329c <_ZN5Print11printNumberEmh+0x5a>
    3298:	60 5d       	subi	r22, 0xD0	; 208
    329a:	01 c0       	rjmp	.+2      	; 0x329e <_ZN5Print11printNumberEmh+0x5c>
    329c:	69 5c       	subi	r22, 0xC9	; 201
    329e:	d8 01       	movw	r26, r16
    32a0:	6c 93       	st	X, r22
    32a2:	23 2b       	or	r18, r19
    32a4:	24 2b       	or	r18, r20
    32a6:	25 2b       	or	r18, r21
    32a8:	61 f7       	brne	.-40     	; 0x3282 <_ZN5Print11printNumberEmh+0x40>
    32aa:	b8 01       	movw	r22, r16
    32ac:	c7 01       	movw	r24, r14
    32ae:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN5Print5writeEPKc>
    32b2:	a1 96       	adiw	r28, 0x21	; 33
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	f8 94       	cli
    32b8:	de bf       	out	0x3e, r29	; 62
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	ff 90       	pop	r15
    32c8:	ef 90       	pop	r14
    32ca:	bf 90       	pop	r11
    32cc:	af 90       	pop	r10
    32ce:	9f 90       	pop	r9
    32d0:	8f 90       	pop	r8
    32d2:	08 95       	ret

000032d4 <_ZN5Print5printEmi>:
    32d4:	21 15       	cp	r18, r1
    32d6:	31 05       	cpc	r19, r1
    32d8:	41 f4       	brne	.+16     	; 0x32ea <_ZN5Print5printEmi+0x16>
    32da:	dc 01       	movw	r26, r24
    32dc:	ed 91       	ld	r30, X+
    32de:	fc 91       	ld	r31, X
    32e0:	01 90       	ld	r0, Z+
    32e2:	f0 81       	ld	r31, Z
    32e4:	e0 2d       	mov	r30, r0
    32e6:	64 2f       	mov	r22, r20
    32e8:	09 94       	ijmp
    32ea:	0c 94 21 19 	jmp	0x3242	; 0x3242 <_ZN5Print11printNumberEmh>

000032ee <_ZN5Print5printEhi>:
    32ee:	9a 01       	movw	r18, r20
    32f0:	46 2f       	mov	r20, r22
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <_ZN5Print5printEmi>

000032fc <_ZN5Print7printlnEhi>:
    32fc:	0f 93       	push	r16
    32fe:	1f 93       	push	r17
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	ec 01       	movw	r28, r24
    3306:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEhi>
    330a:	8c 01       	movw	r16, r24
    330c:	ce 01       	movw	r24, r28
    330e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    3312:	80 0f       	add	r24, r16
    3314:	91 1f       	adc	r25, r17
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	08 95       	ret

00003320 <_ZN5Print5printEji>:
    3320:	9a 01       	movw	r18, r20
    3322:	ab 01       	movw	r20, r22
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	70 e0       	ldi	r23, 0x00	; 0
    3328:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <_ZN5Print5printEmi>

0000332c <_ZN5Print7printlnEji>:
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	ec 01       	movw	r28, r24
    3336:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print5printEji>
    333a:	8c 01       	movw	r16, r24
    333c:	ce 01       	movw	r24, r28
    333e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    3342:	80 0f       	add	r24, r16
    3344:	91 1f       	adc	r25, r17
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	08 95       	ret

00003350 <_ZN5Print7printlnEmi>:
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	ec 01       	movw	r28, r24
    335a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEmi>
    335e:	8c 01       	movw	r16, r24
    3360:	ce 01       	movw	r24, r28
    3362:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    3366:	80 0f       	add	r24, r16
    3368:	91 1f       	adc	r25, r17
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	08 95       	ret

00003374 <_ZN5Print5printEli>:
    3374:	cf 92       	push	r12
    3376:	df 92       	push	r13
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	21 15       	cp	r18, r1
    3386:	31 05       	cpc	r19, r1
    3388:	81 f4       	brne	.+32     	; 0x33aa <_ZN5Print5printEli+0x36>
    338a:	dc 01       	movw	r26, r24
    338c:	ed 91       	ld	r30, X+
    338e:	fc 91       	ld	r31, X
    3390:	01 90       	ld	r0, Z+
    3392:	f0 81       	ld	r31, Z
    3394:	e0 2d       	mov	r30, r0
    3396:	64 2f       	mov	r22, r20
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	df 90       	pop	r13
    33a6:	cf 90       	pop	r12
    33a8:	09 94       	ijmp
    33aa:	2a 30       	cpi	r18, 0x0A	; 10
    33ac:	31 05       	cpc	r19, r1
    33ae:	01 f5       	brne	.+64     	; 0x33f0 <_ZN5Print5printEli+0x7c>
    33b0:	77 ff       	sbrs	r23, 7
    33b2:	1d c0       	rjmp	.+58     	; 0x33ee <_ZN5Print5printEli+0x7a>
    33b4:	6a 01       	movw	r12, r20
    33b6:	7b 01       	movw	r14, r22
    33b8:	ec 01       	movw	r28, r24
    33ba:	6d e2       	ldi	r22, 0x2D	; 45
    33bc:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN5Print5printEc>
    33c0:	8c 01       	movw	r16, r24
    33c2:	44 27       	eor	r20, r20
    33c4:	55 27       	eor	r21, r21
    33c6:	ba 01       	movw	r22, r20
    33c8:	4c 19       	sub	r20, r12
    33ca:	5d 09       	sbc	r21, r13
    33cc:	6e 09       	sbc	r22, r14
    33ce:	7f 09       	sbc	r23, r15
    33d0:	2a e0       	ldi	r18, 0x0A	; 10
    33d2:	ce 01       	movw	r24, r28
    33d4:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN5Print11printNumberEmh>
    33d8:	80 0f       	add	r24, r16
    33da:	91 1f       	adc	r25, r17
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	df 90       	pop	r13
    33ea:	cf 90       	pop	r12
    33ec:	08 95       	ret
    33ee:	2a e0       	ldi	r18, 0x0A	; 10
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	ff 90       	pop	r15
    33fa:	ef 90       	pop	r14
    33fc:	df 90       	pop	r13
    33fe:	cf 90       	pop	r12
    3400:	0c 94 21 19 	jmp	0x3242	; 0x3242 <_ZN5Print11printNumberEmh>

00003404 <_ZN5Print5printEii>:
    3404:	9a 01       	movw	r18, r20
    3406:	ab 01       	movw	r20, r22
    3408:	77 0f       	add	r23, r23
    340a:	66 0b       	sbc	r22, r22
    340c:	77 0b       	sbc	r23, r23
    340e:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <_ZN5Print5printEli>

00003412 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    341c:	0e 94 ba 19 	call	0x3374	; 0x3374 <_ZN5Print5printEli>
    3420:	8c 01       	movw	r16, r24
  n += println();
    3422:	ce 01       	movw	r24, r28
    3424:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
  return n;
}
    3428:	80 0f       	add	r24, r16
    342a:	91 1f       	adc	r25, r17
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	08 95       	ret

00003436 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3436:	7f 92       	push	r7
    3438:	8f 92       	push	r8
    343a:	9f 92       	push	r9
    343c:	af 92       	push	r10
    343e:	bf 92       	push	r11
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	8c 01       	movw	r16, r24
    3452:	6a 01       	movw	r12, r20
    3454:	7b 01       	movw	r14, r22
    3456:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3458:	9a 01       	movw	r18, r20
    345a:	ab 01       	movw	r20, r22
    345c:	c7 01       	movw	r24, r14
    345e:	b6 01       	movw	r22, r12
    3460:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__unordsf2>
    3464:	88 23       	and	r24, r24
    3466:	19 f0       	breq	.+6      	; 0x346e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3468:	62 eb       	ldi	r22, 0xB2	; 178
    346a:	72 e0       	ldi	r23, 0x02	; 2
    346c:	27 c0       	rjmp	.+78     	; 0x34bc <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    346e:	46 01       	movw	r8, r12
    3470:	57 01       	movw	r10, r14
    3472:	e8 94       	clt
    3474:	b7 f8       	bld	r11, 7
    3476:	2f ef       	ldi	r18, 0xFF	; 255
    3478:	3f ef       	ldi	r19, 0xFF	; 255
    347a:	4f e7       	ldi	r20, 0x7F	; 127
    347c:	5f e7       	ldi	r21, 0x7F	; 127
    347e:	c5 01       	movw	r24, r10
    3480:	b4 01       	movw	r22, r8
    3482:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__unordsf2>
    3486:	81 11       	cpse	r24, r1
    3488:	0d c0       	rjmp	.+26     	; 0x34a4 <_ZN5Print10printFloatEdh+0x6e>
    348a:	2f ef       	ldi	r18, 0xFF	; 255
    348c:	3f ef       	ldi	r19, 0xFF	; 255
    348e:	4f e7       	ldi	r20, 0x7F	; 127
    3490:	5f e7       	ldi	r21, 0x7F	; 127
    3492:	c5 01       	movw	r24, r10
    3494:	b4 01       	movw	r22, r8
    3496:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <__cmpsf2>
    349a:	18 16       	cp	r1, r24
    349c:	1c f4       	brge	.+6      	; 0x34a4 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    349e:	66 eb       	ldi	r22, 0xB6	; 182
    34a0:	72 e0       	ldi	r23, 0x02	; 2
    34a2:	0c c0       	rjmp	.+24     	; 0x34bc <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    34a4:	2f ef       	ldi	r18, 0xFF	; 255
    34a6:	3f ef       	ldi	r19, 0xFF	; 255
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	5f e4       	ldi	r21, 0x4F	; 79
    34ac:	c7 01       	movw	r24, r14
    34ae:	b6 01       	movw	r22, r12
    34b0:	0e 94 97 2a 	call	0x552e	; 0x552e <__gesf2>
    34b4:	18 16       	cp	r1, r24
    34b6:	94 f4       	brge	.+36     	; 0x34dc <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    34b8:	6a eb       	ldi	r22, 0xBA	; 186
    34ba:	72 e0       	ldi	r23, 0x02	; 2
    34bc:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	ef 90       	pop	r14
    34ca:	df 90       	pop	r13
    34cc:	cf 90       	pop	r12
    34ce:	bf 90       	pop	r11
    34d0:	af 90       	pop	r10
    34d2:	9f 90       	pop	r9
    34d4:	8f 90       	pop	r8
    34d6:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    34d8:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    34dc:	2f ef       	ldi	r18, 0xFF	; 255
    34de:	3f ef       	ldi	r19, 0xFF	; 255
    34e0:	4f e7       	ldi	r20, 0x7F	; 127
    34e2:	5f ec       	ldi	r21, 0xCF	; 207
    34e4:	c7 01       	movw	r24, r14
    34e6:	b6 01       	movw	r22, r12
    34e8:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <__cmpsf2>
    34ec:	87 fd       	sbrc	r24, 7
    34ee:	e4 cf       	rjmp	.-56     	; 0x34b8 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	a9 01       	movw	r20, r18
    34f6:	c7 01       	movw	r24, r14
    34f8:	b6 01       	movw	r22, r12
    34fa:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <__cmpsf2>
    34fe:	87 ff       	sbrs	r24, 7
    3500:	0a c0       	rjmp	.+20     	; 0x3516 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3502:	6d e2       	ldi	r22, 0x2D	; 45
    3504:	c8 01       	movw	r24, r16
    3506:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN5Print5printEc>
    350a:	ec 01       	movw	r28, r24
     number = -number;
    350c:	f7 fa       	bst	r15, 7
    350e:	f0 94       	com	r15
    3510:	f7 f8       	bld	r15, 7
    3512:	f0 94       	com	r15
    3514:	02 c0       	rjmp	.+4      	; 0x351a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3516:	c0 e0       	ldi	r28, 0x00	; 0
    3518:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    351a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3524:	7b 14       	cp	r7, r11
    3526:	41 f0       	breq	.+16     	; 0x3538 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e2       	ldi	r20, 0x20	; 32
    352e:	51 e4       	ldi	r21, 0x41	; 65
    3530:	0e 94 01 2a 	call	0x5402	; 0x5402 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3534:	b3 94       	inc	r11
    3536:	f6 cf       	rjmp	.-20     	; 0x3524 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    3538:	a7 01       	movw	r20, r14
    353a:	96 01       	movw	r18, r12
    353c:	0e 94 90 29 	call	0x5320	; 0x5320 <__addsf3>
    3540:	6b 01       	movw	r12, r22
    3542:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3544:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixunssfsi>
    3548:	4b 01       	movw	r8, r22
    354a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    354c:	2a e0       	ldi	r18, 0x0A	; 10
    354e:	ab 01       	movw	r20, r22
    3550:	bc 01       	movw	r22, r24
    3552:	c8 01       	movw	r24, r16
    3554:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3558:	c8 0f       	add	r28, r24
    355a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    355c:	77 20       	and	r7, r7
    355e:	c9 f1       	breq	.+114    	; 0x35d2 <_ZN5Print10printFloatEdh+0x19c>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3560:	c5 01       	movw	r24, r10
    3562:	b4 01       	movw	r22, r8
    3564:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__floatunsisf>
    3568:	9b 01       	movw	r18, r22
    356a:	ac 01       	movw	r20, r24
    356c:	c7 01       	movw	r24, r14
    356e:	b6 01       	movw	r22, r12
    3570:	0e 94 8f 29 	call	0x531e	; 0x531e <__subsf3>
    3574:	6b 01       	movw	r12, r22
    3576:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3578:	6e eb       	ldi	r22, 0xBE	; 190
    357a:	72 e0       	ldi	r23, 0x02	; 2
    357c:	c8 01       	movw	r24, r16
    357e:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    3582:	c8 0f       	add	r28, r24
    3584:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	c7 01       	movw	r24, r14
    3590:	b6 01       	movw	r22, r12
    3592:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    3596:	4b 01       	movw	r8, r22
    3598:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    359a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__fixsfsi>
    359e:	6b 01       	movw	r12, r22
    35a0:	7c 01       	movw	r14, r24
    n += print(toPrint);
    35a2:	4a e0       	ldi	r20, 0x0A	; 10
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	c8 01       	movw	r24, r16
    35a8:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
    35ac:	c8 0f       	add	r28, r24
    35ae:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    35b0:	b6 01       	movw	r22, r12
    35b2:	dd 0c       	add	r13, r13
    35b4:	88 0b       	sbc	r24, r24
    35b6:	99 0b       	sbc	r25, r25
    35b8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__floatsisf>
    35bc:	9b 01       	movw	r18, r22
    35be:	ac 01       	movw	r20, r24
    35c0:	c5 01       	movw	r24, r10
    35c2:	b4 01       	movw	r22, r8
    35c4:	0e 94 8f 29 	call	0x531e	; 0x531e <__subsf3>
    35c8:	6b 01       	movw	r12, r22
    35ca:	7c 01       	movw	r14, r24
    35cc:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    35ce:	71 10       	cpse	r7, r1
    35d0:	da cf       	rjmp	.-76     	; 0x3586 <_ZN5Print10printFloatEdh+0x150>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    35d2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	bf 90       	pop	r11
    35e6:	af 90       	pop	r10
    35e8:	9f 90       	pop	r9
    35ea:	8f 90       	pop	r8
    35ec:	7f 90       	pop	r7
    35ee:	08 95       	ret

000035f0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    35f0:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <_ZN5Print10printFloatEdh>

000035f4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    35f4:	0f 93       	push	r16
    35f6:	1f 93       	push	r17
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    35fe:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZN5Print10printFloatEdh>
    3602:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3604:	ce 01       	movw	r24, r28
    3606:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
  return n;
}
    360a:	80 0f       	add	r24, r16
    360c:	91 1f       	adc	r25, r17
    360e:	df 91       	pop	r29
    3610:	cf 91       	pop	r28
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	08 95       	ret

00003618 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3618:	1f 92       	push	r1
    361a:	0f 92       	push	r0
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	0f 92       	push	r0
    3620:	11 24       	eor	r1, r1
    3622:	2f 93       	push	r18
    3624:	3f 93       	push	r19
    3626:	8f 93       	push	r24
    3628:	9f 93       	push	r25
    362a:	af 93       	push	r26
    362c:	bf 93       	push	r27
    362e:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <timer0_millis>
    3632:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <timer0_millis+0x1>
    3636:	a0 91 00 08 	lds	r26, 0x0800	; 0x800800 <timer0_millis+0x2>
    363a:	b0 91 01 08 	lds	r27, 0x0801	; 0x800801 <timer0_millis+0x3>
    363e:	30 91 fd 07 	lds	r19, 0x07FD	; 0x8007fd <timer0_fract>
    3642:	23 e0       	ldi	r18, 0x03	; 3
    3644:	23 0f       	add	r18, r19
    3646:	2d 37       	cpi	r18, 0x7D	; 125
    3648:	20 f4       	brcc	.+8      	; 0x3652 <__vector_16+0x3a>
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	a1 1d       	adc	r26, r1
    364e:	b1 1d       	adc	r27, r1
    3650:	05 c0       	rjmp	.+10     	; 0x365c <__vector_16+0x44>
    3652:	26 e8       	ldi	r18, 0x86	; 134
    3654:	23 0f       	add	r18, r19
    3656:	02 96       	adiw	r24, 0x02	; 2
    3658:	a1 1d       	adc	r26, r1
    365a:	b1 1d       	adc	r27, r1
    365c:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <timer0_fract>
    3660:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <timer0_millis>
    3664:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <timer0_millis+0x1>
    3668:	a0 93 00 08 	sts	0x0800, r26	; 0x800800 <timer0_millis+0x2>
    366c:	b0 93 01 08 	sts	0x0801, r27	; 0x800801 <timer0_millis+0x3>
    3670:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <timer0_overflow_count>
    3674:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <timer0_overflow_count+0x1>
    3678:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <timer0_overflow_count+0x2>
    367c:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <timer0_overflow_count+0x3>
    3680:	01 96       	adiw	r24, 0x01	; 1
    3682:	a1 1d       	adc	r26, r1
    3684:	b1 1d       	adc	r27, r1
    3686:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <timer0_overflow_count>
    368a:	90 93 03 08 	sts	0x0803, r25	; 0x800803 <timer0_overflow_count+0x1>
    368e:	a0 93 04 08 	sts	0x0804, r26	; 0x800804 <timer0_overflow_count+0x2>
    3692:	b0 93 05 08 	sts	0x0805, r27	; 0x800805 <timer0_overflow_count+0x3>
    3696:	bf 91       	pop	r27
    3698:	af 91       	pop	r26
    369a:	9f 91       	pop	r25
    369c:	8f 91       	pop	r24
    369e:	3f 91       	pop	r19
    36a0:	2f 91       	pop	r18
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	0f 90       	pop	r0
    36a8:	1f 90       	pop	r1
    36aa:	18 95       	reti

000036ac <micros>:
    36ac:	3f b7       	in	r19, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <timer0_overflow_count>
    36b4:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <timer0_overflow_count+0x1>
    36b8:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <timer0_overflow_count+0x2>
    36bc:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <timer0_overflow_count+0x3>
    36c0:	26 b5       	in	r18, 0x26	; 38
    36c2:	a8 9b       	sbis	0x15, 0	; 21
    36c4:	05 c0       	rjmp	.+10     	; 0x36d0 <micros+0x24>
    36c6:	2f 3f       	cpi	r18, 0xFF	; 255
    36c8:	19 f0       	breq	.+6      	; 0x36d0 <micros+0x24>
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	a1 1d       	adc	r26, r1
    36ce:	b1 1d       	adc	r27, r1
    36d0:	3f bf       	out	0x3f, r19	; 63
    36d2:	ba 2f       	mov	r27, r26
    36d4:	a9 2f       	mov	r26, r25
    36d6:	98 2f       	mov	r25, r24
    36d8:	88 27       	eor	r24, r24
    36da:	82 0f       	add	r24, r18
    36dc:	91 1d       	adc	r25, r1
    36de:	a1 1d       	adc	r26, r1
    36e0:	b1 1d       	adc	r27, r1
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	42 e0       	ldi	r20, 0x02	; 2
    36e8:	66 0f       	add	r22, r22
    36ea:	77 1f       	adc	r23, r23
    36ec:	88 1f       	adc	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	4a 95       	dec	r20
    36f2:	d1 f7       	brne	.-12     	; 0x36e8 <micros+0x3c>
    36f4:	08 95       	ret

000036f6 <delay>:
    36f6:	8f 92       	push	r8
    36f8:	9f 92       	push	r9
    36fa:	af 92       	push	r10
    36fc:	bf 92       	push	r11
    36fe:	cf 92       	push	r12
    3700:	df 92       	push	r13
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	6b 01       	movw	r12, r22
    3708:	7c 01       	movw	r14, r24
    370a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <micros>
    370e:	4b 01       	movw	r8, r22
    3710:	5c 01       	movw	r10, r24
    3712:	c1 14       	cp	r12, r1
    3714:	d1 04       	cpc	r13, r1
    3716:	e1 04       	cpc	r14, r1
    3718:	f1 04       	cpc	r15, r1
    371a:	01 f1       	breq	.+64     	; 0x375c <delay+0x66>
    371c:	0e 94 3f 29 	call	0x527e	; 0x527e <yield>
    3720:	0e 94 56 1b 	call	0x36ac	; 0x36ac <micros>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	88 19       	sub	r24, r8
    372a:	99 09       	sbc	r25, r9
    372c:	aa 09       	sbc	r26, r10
    372e:	bb 09       	sbc	r27, r11
    3730:	88 3e       	cpi	r24, 0xE8	; 232
    3732:	93 40       	sbci	r25, 0x03	; 3
    3734:	a1 05       	cpc	r26, r1
    3736:	b1 05       	cpc	r27, r1
    3738:	60 f3       	brcs	.-40     	; 0x3712 <delay+0x1c>
    373a:	21 e0       	ldi	r18, 0x01	; 1
    373c:	c2 1a       	sub	r12, r18
    373e:	d1 08       	sbc	r13, r1
    3740:	e1 08       	sbc	r14, r1
    3742:	f1 08       	sbc	r15, r1
    3744:	88 ee       	ldi	r24, 0xE8	; 232
    3746:	88 0e       	add	r8, r24
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	98 1e       	adc	r9, r24
    374c:	a1 1c       	adc	r10, r1
    374e:	b1 1c       	adc	r11, r1
    3750:	c1 14       	cp	r12, r1
    3752:	d1 04       	cpc	r13, r1
    3754:	e1 04       	cpc	r14, r1
    3756:	f1 04       	cpc	r15, r1
    3758:	19 f7       	brne	.-58     	; 0x3720 <delay+0x2a>
    375a:	db cf       	rjmp	.-74     	; 0x3712 <delay+0x1c>
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	df 90       	pop	r13
    3762:	cf 90       	pop	r12
    3764:	bf 90       	pop	r11
    3766:	af 90       	pop	r10
    3768:	9f 90       	pop	r9
    376a:	8f 90       	pop	r8
    376c:	08 95       	ret

0000376e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    376e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3770:	84 b5       	in	r24, 0x24	; 36
    3772:	82 60       	ori	r24, 0x02	; 2
    3774:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3776:	84 b5       	in	r24, 0x24	; 36
    3778:	81 60       	ori	r24, 0x01	; 1
    377a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    377c:	85 b5       	in	r24, 0x25	; 37
    377e:	82 60       	ori	r24, 0x02	; 2
    3780:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3782:	85 b5       	in	r24, 0x25	; 37
    3784:	81 60       	ori	r24, 0x01	; 1
    3786:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3788:	ee e6       	ldi	r30, 0x6E	; 110
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	81 60       	ori	r24, 0x01	; 1
    3790:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3792:	e1 e8       	ldi	r30, 0x81	; 129
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3798:	80 81       	ld	r24, Z
    379a:	82 60       	ori	r24, 0x02	; 2
    379c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    379e:	80 81       	ld	r24, Z
    37a0:	81 60       	ori	r24, 0x01	; 1
    37a2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    37a4:	e0 e8       	ldi	r30, 0x80	; 128
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	81 60       	ori	r24, 0x01	; 1
    37ac:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    37ae:	e1 eb       	ldi	r30, 0xB1	; 177
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	84 60       	ori	r24, 0x04	; 4
    37b6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    37b8:	e0 eb       	ldi	r30, 0xB0	; 176
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	81 60       	ori	r24, 0x01	; 1
    37c0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    37c2:	ea e7       	ldi	r30, 0x7A	; 122
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	84 60       	ori	r24, 0x04	; 4
    37ca:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    37cc:	80 81       	ld	r24, Z
    37ce:	82 60       	ori	r24, 0x02	; 2
    37d0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    37d2:	80 81       	ld	r24, Z
    37d4:	81 60       	ori	r24, 0x01	; 1
    37d6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    37d8:	80 81       	ld	r24, Z
    37da:	80 68       	ori	r24, 0x80	; 128
    37dc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    37de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    37e2:	08 95       	ret

000037e4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    37e4:	83 30       	cpi	r24, 0x03	; 3
    37e6:	81 f0       	breq	.+32     	; 0x3808 <turnOffPWM+0x24>
    37e8:	28 f4       	brcc	.+10     	; 0x37f4 <turnOffPWM+0x10>
    37ea:	81 30       	cpi	r24, 0x01	; 1
    37ec:	99 f0       	breq	.+38     	; 0x3814 <turnOffPWM+0x30>
    37ee:	82 30       	cpi	r24, 0x02	; 2
    37f0:	a1 f0       	breq	.+40     	; 0x381a <turnOffPWM+0x36>
    37f2:	08 95       	ret
    37f4:	87 30       	cpi	r24, 0x07	; 7
    37f6:	a9 f0       	breq	.+42     	; 0x3822 <turnOffPWM+0x3e>
    37f8:	88 30       	cpi	r24, 0x08	; 8
    37fa:	b9 f0       	breq	.+46     	; 0x382a <turnOffPWM+0x46>
    37fc:	84 30       	cpi	r24, 0x04	; 4
    37fe:	d1 f4       	brne	.+52     	; 0x3834 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3800:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3804:	8f 7d       	andi	r24, 0xDF	; 223
    3806:	03 c0       	rjmp	.+6      	; 0x380e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3808:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    380c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    380e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3812:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3814:	84 b5       	in	r24, 0x24	; 36
    3816:	8f 77       	andi	r24, 0x7F	; 127
    3818:	02 c0       	rjmp	.+4      	; 0x381e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    381a:	84 b5       	in	r24, 0x24	; 36
    381c:	8f 7d       	andi	r24, 0xDF	; 223
    381e:	84 bd       	out	0x24, r24	; 36
    3820:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3822:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3826:	8f 77       	andi	r24, 0x7F	; 127
    3828:	03 c0       	rjmp	.+6      	; 0x3830 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    382a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    382e:	8f 7d       	andi	r24, 0xDF	; 223
    3830:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3834:	08 95       	ret

00003836 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	fc 01       	movw	r30, r24
    383e:	e1 55       	subi	r30, 0x51	; 81
    3840:	fb 4f       	sbci	r31, 0xFB	; 251
    3842:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3844:	fc 01       	movw	r30, r24
    3846:	ed 53       	subi	r30, 0x3D	; 61
    3848:	fb 4f       	sbci	r31, 0xFB	; 251
    384a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    384c:	88 23       	and	r24, r24
    384e:	61 f1       	breq	.+88     	; 0x38a8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	88 0f       	add	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	fc 01       	movw	r30, r24
    3858:	e5 51       	subi	r30, 0x15	; 21
    385a:	fb 4f       	sbci	r31, 0xFB	; 251
    385c:	c5 91       	lpm	r28, Z+
    385e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3860:	fc 01       	movw	r30, r24
    3862:	ef 51       	subi	r30, 0x1F	; 31
    3864:	fb 4f       	sbci	r31, 0xFB	; 251
    3866:	a5 91       	lpm	r26, Z+
    3868:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    386a:	61 11       	cpse	r22, r1
    386c:	09 c0       	rjmp	.+18     	; 0x3880 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    386e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3870:	f8 94       	cli
		*reg &= ~bit;
    3872:	88 81       	ld	r24, Y
    3874:	20 95       	com	r18
    3876:	82 23       	and	r24, r18
    3878:	88 83       	st	Y, r24
		*out &= ~bit;
    387a:	ec 91       	ld	r30, X
    387c:	2e 23       	and	r18, r30
    387e:	0b c0       	rjmp	.+22     	; 0x3896 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3880:	62 30       	cpi	r22, 0x02	; 2
    3882:	61 f4       	brne	.+24     	; 0x389c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3884:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3886:	f8 94       	cli
		*reg &= ~bit;
    3888:	88 81       	ld	r24, Y
    388a:	32 2f       	mov	r19, r18
    388c:	30 95       	com	r19
    388e:	83 23       	and	r24, r19
    3890:	88 83       	st	Y, r24
		*out |= bit;
    3892:	ec 91       	ld	r30, X
    3894:	2e 2b       	or	r18, r30
    3896:	2c 93       	st	X, r18
		SREG = oldSREG;
    3898:	9f bf       	out	0x3f, r25	; 63
    389a:	06 c0       	rjmp	.+12     	; 0x38a8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    389c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    389e:	f8 94       	cli
		*reg |= bit;
    38a0:	e8 81       	ld	r30, Y
    38a2:	2e 2b       	or	r18, r30
    38a4:	28 83       	st	Y, r18
		SREG = oldSREG;
    38a6:	8f bf       	out	0x3f, r24	; 63
	}
}
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	08 95       	ret

000038ae <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    38ae:	1f 93       	push	r17
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	f9 01       	movw	r30, r18
    38ba:	e5 56       	subi	r30, 0x65	; 101
    38bc:	fb 4f       	sbci	r31, 0xFB	; 251
    38be:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    38c0:	f9 01       	movw	r30, r18
    38c2:	e1 55       	subi	r30, 0x51	; 81
    38c4:	fb 4f       	sbci	r31, 0xFB	; 251
    38c6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    38c8:	f9 01       	movw	r30, r18
    38ca:	ed 53       	subi	r30, 0x3D	; 61
    38cc:	fb 4f       	sbci	r31, 0xFB	; 251
    38ce:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    38d0:	cc 23       	and	r28, r28
    38d2:	c1 f0       	breq	.+48     	; 0x3904 <digitalWrite+0x56>
    38d4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    38d6:	81 11       	cpse	r24, r1
    38d8:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <turnOffPWM>

	out = portOutputRegister(port);
    38dc:	ec 2f       	mov	r30, r28
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	ee 0f       	add	r30, r30
    38e2:	ff 1f       	adc	r31, r31
    38e4:	ef 51       	subi	r30, 0x1F	; 31
    38e6:	fb 4f       	sbci	r31, 0xFB	; 251
    38e8:	a5 91       	lpm	r26, Z+
    38ea:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    38ec:	9f b7       	in	r25, 0x3f	; 63
	cli();
    38ee:	f8 94       	cli

	if (val == LOW) {
    38f0:	11 11       	cpse	r17, r1
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <digitalWrite+0x4e>
		*out &= ~bit;
    38f4:	8c 91       	ld	r24, X
    38f6:	d0 95       	com	r29
    38f8:	d8 23       	and	r29, r24
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <digitalWrite+0x52>
	} else {
		*out |= bit;
    38fc:	ec 91       	ld	r30, X
    38fe:	de 2b       	or	r29, r30
    3900:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3902:	9f bf       	out	0x3f, r25	; 63
}
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	1f 91       	pop	r17
    390a:	08 95       	ret

0000390c <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    390c:	fc 01       	movw	r30, r24
    390e:	80 81       	ld	r24, Z
    3910:	91 81       	ldd	r25, Z+1	; 0x01
    3912:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <free>

00003916 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    391c:	88 81       	ld	r24, Y
    391e:	99 81       	ldd	r25, Y+1	; 0x01
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	11 f0       	breq	.+4      	; 0x3928 <_ZN6String10invalidateEv+0x12>
    3924:	0e 94 a8 2b 	call	0x5750	; 0x5750 <free>
	buffer = NULL;
    3928:	19 82       	std	Y+1, r1	; 0x01
    392a:	18 82       	st	Y, r1
	capacity = len = 0;
    392c:	1d 82       	std	Y+5, r1	; 0x05
    392e:	1c 82       	std	Y+4, r1	; 0x04
    3930:	1b 82       	std	Y+3, r1	; 0x03
    3932:	1a 82       	std	Y+2, r1	; 0x02
}
    3934:	df 91       	pop	r29
    3936:	cf 91       	pop	r28
    3938:	08 95       	ret

0000393a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	ec 01       	movw	r28, r24
    3944:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3946:	6f 5f       	subi	r22, 0xFF	; 255
    3948:	7f 4f       	sbci	r23, 0xFF	; 255
    394a:	88 81       	ld	r24, Y
    394c:	99 81       	ldd	r25, Y+1	; 0x01
    394e:	0e 94 31 2c 	call	0x5862	; 0x5862 <realloc>
	if (newbuffer) {
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	31 f0       	breq	.+12     	; 0x3962 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3956:	99 83       	std	Y+1, r25	; 0x01
    3958:	88 83       	st	Y, r24
		capacity = maxStrLen;
    395a:	1b 83       	std	Y+3, r17	; 0x03
    395c:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3962:	80 e0       	ldi	r24, 0x00	; 0
}
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	1f 91       	pop	r17
    396a:	0f 91       	pop	r16
    396c:	08 95       	ret

0000396e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3974:	88 81       	ld	r24, Y
    3976:	99 81       	ldd	r25, Y+1	; 0x01
    3978:	89 2b       	or	r24, r25
    397a:	29 f0       	breq	.+10     	; 0x3986 <_ZN6String7reserveEj+0x18>
    397c:	8a 81       	ldd	r24, Y+2	; 0x02
    397e:	9b 81       	ldd	r25, Y+3	; 0x03
    3980:	86 17       	cp	r24, r22
    3982:	97 07       	cpc	r25, r23
    3984:	60 f4       	brcc	.+24     	; 0x399e <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    3986:	ce 01       	movw	r24, r28
    3988:	0e 94 9d 1c 	call	0x393a	; 0x393a <_ZN6String12changeBufferEj>
    398c:	88 23       	and	r24, r24
    398e:	41 f0       	breq	.+16     	; 0x39a0 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    3990:	8c 81       	ldd	r24, Y+4	; 0x04
    3992:	9d 81       	ldd	r25, Y+5	; 0x05
    3994:	89 2b       	or	r24, r25
    3996:	19 f4       	brne	.+6      	; 0x399e <_ZN6String7reserveEj+0x30>
    3998:	e8 81       	ld	r30, Y
    399a:	f9 81       	ldd	r31, Y+1	; 0x01
    399c:	10 82       	st	Z, r1
    399e:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	08 95       	ret

000039a6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	ec 01       	movw	r28, r24
    39b4:	7b 01       	movw	r14, r22
    39b6:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    39b8:	ba 01       	movw	r22, r20
    39ba:	0e 94 b7 1c 	call	0x396e	; 0x396e <_ZN6String7reserveEj>
    39be:	81 11       	cpse	r24, r1
    39c0:	04 c0       	rjmp	.+8      	; 0x39ca <_ZN6String4copyEPKcj+0x24>
		invalidate();
    39c2:	ce 01       	movw	r24, r28
    39c4:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String10invalidateEv>
		return *this;
    39c8:	07 c0       	rjmp	.+14     	; 0x39d8 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    39ca:	1d 83       	std	Y+5, r17	; 0x05
    39cc:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    39ce:	b7 01       	movw	r22, r14
    39d0:	88 81       	ld	r24, Y
    39d2:	99 81       	ldd	r25, Y+1	; 0x01
    39d4:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <strcpy>
	return *this;
}
    39d8:	ce 01       	movw	r24, r28
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	ff 90       	pop	r15
    39e4:	ef 90       	pop	r14
    39e6:	08 95       	ret

000039e8 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    39e8:	fc 01       	movw	r30, r24
    39ea:	11 82       	std	Z+1, r1	; 0x01
    39ec:	10 82       	st	Z, r1
	capacity = 0;
    39ee:	13 82       	std	Z+3, r1	; 0x03
    39f0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    39f2:	15 82       	std	Z+5, r1	; 0x05
    39f4:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    39f6:	61 15       	cp	r22, r1
    39f8:	71 05       	cpc	r23, r1
    39fa:	51 f0       	breq	.+20     	; 0x3a10 <_ZN6StringC1EPKc+0x28>
    39fc:	fb 01       	movw	r30, r22
    39fe:	01 90       	ld	r0, Z+
    3a00:	00 20       	and	r0, r0
    3a02:	e9 f7       	brne	.-6      	; 0x39fe <_ZN6StringC1EPKc+0x16>
    3a04:	31 97       	sbiw	r30, 0x01	; 1
    3a06:	af 01       	movw	r20, r30
    3a08:	46 1b       	sub	r20, r22
    3a0a:	57 0b       	sbc	r21, r23
    3a0c:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <_ZN6String4copyEPKcj>
    3a10:	08 95       	ret

00003a12 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3a12:	88 5e       	subi	r24, 0xE8	; 232
    3a14:	9e 4f       	sbci	r25, 0xFE	; 254
    3a16:	dc 01       	movw	r26, r24
    3a18:	8d 91       	ld	r24, X+
    3a1a:	9c 91       	ld	r25, X
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	ed 91       	ld	r30, X+
    3a20:	fc 91       	ld	r31, X
    3a22:	04 80       	ldd	r0, Z+4	; 0x04
    3a24:	f5 81       	ldd	r31, Z+5	; 0x05
    3a26:	e0 2d       	mov	r30, r0
    3a28:	09 94       	ijmp

00003a2a <_ZN13Adafruit_FONA5writeEh>:
    3a2a:	88 5e       	subi	r24, 0xE8	; 232
    3a2c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a2e:	dc 01       	movw	r26, r24
    3a30:	8d 91       	ld	r24, X+
    3a32:	9c 91       	ld	r25, X
    3a34:	dc 01       	movw	r26, r24
    3a36:	ed 91       	ld	r30, X+
    3a38:	fc 91       	ld	r31, X
    3a3a:	01 90       	ld	r0, Z+
    3a3c:	f0 81       	ld	r31, Z
    3a3e:	e0 2d       	mov	r30, r0
    3a40:	09 94       	ijmp

00003a42 <_ZN13Adafruit_FONA4readEv>:
    3a42:	88 5e       	subi	r24, 0xE8	; 232
    3a44:	9e 4f       	sbci	r25, 0xFE	; 254
    3a46:	dc 01       	movw	r26, r24
    3a48:	8d 91       	ld	r24, X+
    3a4a:	9c 91       	ld	r25, X
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	ed 91       	ld	r30, X+
    3a50:	fc 91       	ld	r31, X
    3a52:	06 80       	ldd	r0, Z+6	; 0x06
    3a54:	f7 81       	ldd	r31, Z+7	; 0x07
    3a56:	e0 2d       	mov	r30, r0
    3a58:	09 94       	ijmp

00003a5a <_ZN13Adafruit_FONA4peekEv>:
    3a5a:	88 5e       	subi	r24, 0xE8	; 232
    3a5c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a5e:	dc 01       	movw	r26, r24
    3a60:	8d 91       	ld	r24, X+
    3a62:	9c 91       	ld	r25, X
    3a64:	dc 01       	movw	r26, r24
    3a66:	ed 91       	ld	r30, X+
    3a68:	fc 91       	ld	r31, X
    3a6a:	00 84       	ldd	r0, Z+8	; 0x08
    3a6c:	f1 85       	ldd	r31, Z+9	; 0x09
    3a6e:	e0 2d       	mov	r30, r0
    3a70:	09 94       	ijmp

00003a72 <_ZN13Adafruit_FONA5flushEv>:
    3a72:	88 5e       	subi	r24, 0xE8	; 232
    3a74:	9e 4f       	sbci	r25, 0xFE	; 254
    3a76:	dc 01       	movw	r26, r24
    3a78:	8d 91       	ld	r24, X+
    3a7a:	9c 91       	ld	r25, X
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	ed 91       	ld	r30, X+
    3a80:	fc 91       	ld	r31, X
    3a82:	02 84       	ldd	r0, Z+10	; 0x0a
    3a84:	f3 85       	ldd	r31, Z+11	; 0x0b
    3a86:	e0 2d       	mov	r30, r0
    3a88:	09 94       	ijmp

00003a8a <_ZN13Adafruit_FONAC1Ea>:
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	13 82       	std	Z+3, r1	; 0x03
    3a8e:	12 82       	std	Z+2, r1	; 0x02
    3a90:	88 ee       	ldi	r24, 0xE8	; 232
    3a92:	93 e0       	ldi	r25, 0x03	; 3
    3a94:	a0 e0       	ldi	r26, 0x00	; 0
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	84 83       	std	Z+4, r24	; 0x04
    3a9a:	95 83       	std	Z+5, r25	; 0x05
    3a9c:	a6 83       	std	Z+6, r26	; 0x06
    3a9e:	b7 83       	std	Z+7, r27	; 0x07
    3aa0:	85 e2       	ldi	r24, 0x25	; 37
    3aa2:	93 e0       	ldi	r25, 0x03	; 3
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
    3aa8:	64 87       	std	Z+12, r22	; 0x0c
    3aaa:	df 01       	movw	r26, r30
    3aac:	a3 5f       	subi	r26, 0xF3	; 243
    3aae:	be 4f       	sbci	r27, 0xFE	; 254
    3ab0:	8f e2       	ldi	r24, 0x2F	; 47
    3ab2:	98 e0       	ldi	r25, 0x08	; 8
    3ab4:	11 96       	adiw	r26, 0x01	; 1
    3ab6:	9c 93       	st	X, r25
    3ab8:	8e 93       	st	-X, r24
    3aba:	12 96       	adiw	r26, 0x02	; 2
    3abc:	11 96       	adiw	r26, 0x01	; 1
    3abe:	1c 92       	st	X, r1
    3ac0:	1e 92       	st	-X, r1
    3ac2:	12 96       	adiw	r26, 0x02	; 2
    3ac4:	11 96       	adiw	r26, 0x01	; 1
    3ac6:	1c 92       	st	X, r1
    3ac8:	1e 92       	st	-X, r1
    3aca:	17 96       	adiw	r26, 0x07	; 7
    3acc:	11 96       	adiw	r26, 0x01	; 1
    3ace:	1c 92       	st	X, r1
    3ad0:	1e 92       	st	-X, r1
    3ad2:	15 97       	sbiw	r26, 0x05	; 5
    3ad4:	1c 92       	st	X, r1
    3ad6:	11 96       	adiw	r26, 0x01	; 1
    3ad8:	8a e2       	ldi	r24, 0x2A	; 42
    3ada:	98 e0       	ldi	r25, 0x08	; 8
    3adc:	8d 93       	st	X+, r24
    3ade:	9c 93       	st	X, r25
    3ae0:	ea 5e       	subi	r30, 0xEA	; 234
    3ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae4:	87 e2       	ldi	r24, 0x27	; 39
    3ae6:	98 e0       	ldi	r25, 0x08	; 8
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
    3aec:	08 95       	ret

00003aee <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    3aee:	fc 01       	movw	r30, r24
    3af0:	e3 5f       	subi	r30, 0xF3	; 243
    3af2:	fe 4f       	sbci	r31, 0xFE	; 254
    3af4:	71 83       	std	Z+1, r23	; 0x01
    3af6:	60 83       	st	Z, r22
    3af8:	32 96       	adiw	r30, 0x02	; 2
    3afa:	51 83       	std	Z+1, r21	; 0x01
    3afc:	40 83       	st	Z, r20
    3afe:	32 96       	adiw	r30, 0x02	; 2
    3b00:	31 83       	std	Z+1, r19	; 0x01
    3b02:	20 83       	st	Z, r18
    3b04:	08 95       	ret

00003b06 <_ZN13Adafruit_FONA10flushInputEv>:
    3b06:	0f 93       	push	r16
    3b08:	1f 93       	push	r17
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	ec 01       	movw	r28, r24
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	8c 01       	movw	r16, r24
    3b16:	0f 5f       	subi	r16, 0xFF	; 255
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	88 97       	sbiw	r24, 0x28	; 40
    3b1c:	d8 f4       	brcc	.+54     	; 0x3b54 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    3b1e:	e8 81       	ld	r30, Y
    3b20:	f9 81       	ldd	r31, Y+1	; 0x01
    3b22:	04 80       	ldd	r0, Z+4	; 0x04
    3b24:	f5 81       	ldd	r31, Z+5	; 0x05
    3b26:	e0 2d       	mov	r30, r0
    3b28:	ce 01       	movw	r24, r28
    3b2a:	09 95       	icall
    3b2c:	89 2b       	or	r24, r25
    3b2e:	51 f0       	breq	.+20     	; 0x3b44 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    3b30:	e8 81       	ld	r30, Y
    3b32:	f9 81       	ldd	r31, Y+1	; 0x01
    3b34:	06 80       	ldd	r0, Z+6	; 0x06
    3b36:	f7 81       	ldd	r31, Z+7	; 0x07
    3b38:	e0 2d       	mov	r30, r0
    3b3a:	ce 01       	movw	r24, r28
    3b3c:	09 95       	icall
    3b3e:	00 e0       	ldi	r16, 0x00	; 0
    3b40:	10 e0       	ldi	r17, 0x00	; 0
    3b42:	ed cf       	rjmp	.-38     	; 0x3b1e <_ZN13Adafruit_FONA10flushInputEv+0x18>
    3b44:	61 e0       	ldi	r22, 0x01	; 1
    3b46:	70 e0       	ldi	r23, 0x00	; 0
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    3b50:	c8 01       	movw	r24, r16
    3b52:	e0 cf       	rjmp	.-64     	; 0x3b14 <_ZN13Adafruit_FONA10flushInputEv+0xe>
    3b54:	df 91       	pop	r29
    3b56:	cf 91       	pop	r28
    3b58:	1f 91       	pop	r17
    3b5a:	0f 91       	pop	r16
    3b5c:	08 95       	ret

00003b5e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    3b5e:	ff 92       	push	r15
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	cf 93       	push	r28
    3b66:	df 93       	push	r29
    3b68:	ec 01       	movw	r28, r24
    3b6a:	8b 01       	movw	r16, r22
    3b6c:	f4 2e       	mov	r15, r20
    3b6e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    3b72:	63 e0       	ldi	r22, 0x03	; 3
    3b74:	76 e0       	ldi	r23, 0x06	; 6
    3b76:	80 e6       	ldi	r24, 0x60	; 96
    3b78:	97 e0       	ldi	r25, 0x07	; 7
    3b7a:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3b7e:	65 ef       	ldi	r22, 0xF5	; 245
    3b80:	75 e0       	ldi	r23, 0x05	; 5
    3b82:	80 e6       	ldi	r24, 0x60	; 96
    3b84:	97 e0       	ldi	r25, 0x07	; 7
    3b86:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3b8a:	b8 01       	movw	r22, r16
    3b8c:	80 e6       	ldi	r24, 0x60	; 96
    3b8e:	97 e0       	ldi	r25, 0x07	; 7
    3b90:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3b94:	62 e2       	ldi	r22, 0x22	; 34
    3b96:	80 e6       	ldi	r24, 0x60	; 96
    3b98:	97 e0       	ldi	r25, 0x07	; 7
    3b9a:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEc>
    3b9e:	c8 5e       	subi	r28, 0xE8	; 232
    3ba0:	de 4f       	sbci	r29, 0xFE	; 254
    3ba2:	67 ee       	ldi	r22, 0xE7	; 231
    3ba4:	75 e0       	ldi	r23, 0x05	; 5
    3ba6:	88 81       	ld	r24, Y
    3ba8:	99 81       	ldd	r25, Y+1	; 0x01
    3baa:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3bae:	b8 01       	movw	r22, r16
    3bb0:	88 81       	ld	r24, Y
    3bb2:	99 81       	ldd	r25, Y+1	; 0x01
    3bb4:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3bb8:	88 81       	ld	r24, Y
    3bba:	99 81       	ldd	r25, Y+1	; 0x01
    3bbc:	ff 20       	and	r15, r15
    3bbe:	19 f0       	breq	.+6      	; 0x3bc6 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    3bc0:	63 ee       	ldi	r22, 0xE3	; 227
    3bc2:	75 e0       	ldi	r23, 0x05	; 5
    3bc4:	02 c0       	rjmp	.+4      	; 0x3bca <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    3bc6:	60 ee       	ldi	r22, 0xE0	; 224
    3bc8:	75 e0       	ldi	r23, 0x05	; 5
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
    3bd2:	ff 90       	pop	r15
    3bd4:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>

00003bd8 <_ZN13Adafruit_FONA8readlineEjb>:
    3bd8:	9f 92       	push	r9
    3bda:	af 92       	push	r10
    3bdc:	bf 92       	push	r11
    3bde:	cf 92       	push	r12
    3be0:	df 92       	push	r13
    3be2:	ef 92       	push	r14
    3be4:	ff 92       	push	r15
    3be6:	0f 93       	push	r16
    3be8:	1f 93       	push	r17
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	7c 01       	movw	r14, r24
    3bf0:	94 2e       	mov	r9, r20
    3bf2:	8b 01       	movw	r16, r22
    3bf4:	00 0f       	add	r16, r16
    3bf6:	11 1f       	adc	r17, r17
    3bf8:	00 0f       	add	r16, r16
    3bfa:	11 1f       	adc	r17, r17
    3bfc:	c0 e0       	ldi	r28, 0x00	; 0
    3bfe:	d0 e0       	ldi	r29, 0x00	; 0
    3c00:	57 01       	movw	r10, r14
    3c02:	88 ee       	ldi	r24, 0xE8	; 232
    3c04:	a8 1a       	sub	r10, r24
    3c06:	8e ef       	ldi	r24, 0xFE	; 254
    3c08:	b8 0a       	sbc	r11, r24
    3c0a:	01 15       	cp	r16, r1
    3c0c:	11 05       	cpc	r17, r1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    3c10:	50 c0       	rjmp	.+160    	; 0x3cb2 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3c12:	ce 3f       	cpi	r28, 0xFE	; 254
    3c14:	d1 05       	cpc	r29, r1
    3c16:	80 f0       	brcs	.+32     	; 0x3c38 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3c18:	65 e3       	ldi	r22, 0x35	; 53
    3c1a:	75 e0       	ldi	r23, 0x05	; 5
    3c1c:	22 c0       	rjmp	.+68     	; 0x3c62 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    3c1e:	f5 01       	movw	r30, r10
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	dc 01       	movw	r26, r24
    3c26:	ed 91       	ld	r30, X+
    3c28:	fc 91       	ld	r31, X
    3c2a:	06 80       	ldd	r0, Z+6	; 0x06
    3c2c:	f7 81       	ldd	r31, Z+7	; 0x07
    3c2e:	e0 2d       	mov	r30, r0
    3c30:	09 95       	icall
    3c32:	6c 01       	movw	r12, r24
    3c34:	8d 30       	cpi	r24, 0x0D	; 13
    3c36:	69 f4       	brne	.+26     	; 0x3c52 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    3c38:	d5 01       	movw	r26, r10
    3c3a:	8d 91       	ld	r24, X+
    3c3c:	9c 91       	ld	r25, X
    3c3e:	dc 01       	movw	r26, r24
    3c40:	ed 91       	ld	r30, X+
    3c42:	fc 91       	ld	r31, X
    3c44:	04 80       	ldd	r0, Z+4	; 0x04
    3c46:	f5 81       	ldd	r31, Z+5	; 0x05
    3c48:	e0 2d       	mov	r30, r0
    3c4a:	09 95       	icall
    3c4c:	89 2b       	or	r24, r25
    3c4e:	39 f7       	brne	.-50     	; 0x3c1e <_ZN13Adafruit_FONA8readlineEjb+0x46>
    3c50:	26 c0       	rjmp	.+76     	; 0x3c9e <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    3c52:	8a 30       	cpi	r24, 0x0A	; 10
    3c54:	59 f4       	brne	.+22     	; 0x3c6c <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3c56:	20 97       	sbiw	r28, 0x00	; 0
    3c58:	79 f3       	breq	.-34     	; 0x3c38 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3c5a:	91 10       	cpse	r9, r1
    3c5c:	07 c0       	rjmp	.+14     	; 0x3c6c <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3c5e:	6d e2       	ldi	r22, 0x2D	; 45
    3c60:	75 e0       	ldi	r23, 0x05	; 5
    3c62:	80 e6       	ldi	r24, 0x60	; 96
    3c64:	97 e0       	ldi	r25, 0x07	; 7
    3c66:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3c6a:	23 c0       	rjmp	.+70     	; 0x3cb2 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3c6c:	f7 01       	movw	r30, r14
    3c6e:	ec 0f       	add	r30, r28
    3c70:	fd 1f       	adc	r31, r29
    3c72:	c6 86       	std	Z+14, r12	; 0x0e
    3c74:	b6 01       	movw	r22, r12
    3c76:	77 27       	eor	r23, r23
    3c78:	40 e1       	ldi	r20, 0x10	; 16
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	80 e6       	ldi	r24, 0x60	; 96
    3c7e:	97 e0       	ldi	r25, 0x07	; 7
    3c80:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN5Print5printEii>
    3c84:	68 ec       	ldi	r22, 0xC8	; 200
    3c86:	72 e0       	ldi	r23, 0x02	; 2
    3c88:	80 e6       	ldi	r24, 0x60	; 96
    3c8a:	97 e0       	ldi	r25, 0x07	; 7
    3c8c:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    3c90:	6c 2d       	mov	r22, r12
    3c92:	80 e6       	ldi	r24, 0x60	; 96
    3c94:	97 e0       	ldi	r25, 0x07	; 7
    3c96:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEc>
    3c9a:	21 96       	adiw	r28, 0x01	; 1
    3c9c:	cd cf       	rjmp	.-102    	; 0x3c38 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3c9e:	01 50       	subi	r16, 0x01	; 1
    3ca0:	11 09       	sbc	r17, r1
    3ca2:	e9 f2       	breq	.-70     	; 0x3c5e <_ZN13Adafruit_FONA8readlineEjb+0x86>
    3ca4:	61 e0       	ldi	r22, 0x01	; 1
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    3cb0:	ac cf       	rjmp	.-168    	; 0x3c0a <_ZN13Adafruit_FONA8readlineEjb+0x32>
    3cb2:	f7 01       	movw	r30, r14
    3cb4:	ec 0f       	add	r30, r28
    3cb6:	fd 1f       	adc	r31, r29
    3cb8:	16 86       	std	Z+14, r1	; 0x0e
    3cba:	8c 2f       	mov	r24, r28
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	1f 91       	pop	r17
    3cc2:	0f 91       	pop	r16
    3cc4:	ff 90       	pop	r15
    3cc6:	ef 90       	pop	r14
    3cc8:	df 90       	pop	r13
    3cca:	cf 90       	pop	r12
    3ccc:	bf 90       	pop	r11
    3cce:	af 90       	pop	r10
    3cd0:	9f 90       	pop	r9
    3cd2:	08 95       	ret

00003cd4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    3cd4:	0f 93       	push	r16
    3cd6:	1f 93       	push	r17
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	ec 01       	movw	r28, r24
    3cde:	8b 01       	movw	r16, r22
    3ce0:	ba 01       	movw	r22, r20
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    3ce8:	6b e3       	ldi	r22, 0x3B	; 59
    3cea:	75 e0       	ldi	r23, 0x05	; 5
    3cec:	80 e6       	ldi	r24, 0x60	; 96
    3cee:	97 e0       	ldi	r25, 0x07	; 7
    3cf0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3cf4:	2e 96       	adiw	r28, 0x0e	; 14
    3cf6:	be 01       	movw	r22, r28
    3cf8:	80 e6       	ldi	r24, 0x60	; 96
    3cfa:	97 e0       	ldi	r25, 0x07	; 7
    3cfc:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    3d00:	b8 01       	movw	r22, r16
    3d02:	ce 01       	movw	r24, r28
    3d04:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <strcmp_P>
    3d08:	21 e0       	ldi	r18, 0x01	; 1
    3d0a:	89 2b       	or	r24, r25
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	82 2f       	mov	r24, r18
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	08 95       	ret

00003d1c <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	ec 01       	movw	r28, r24
    3d22:	fc 01       	movw	r30, r24
    3d24:	e8 5e       	subi	r30, 0xE8	; 232
    3d26:	fe 4f       	sbci	r31, 0xFE	; 254
    3d28:	66 23       	and	r22, r22
    3d2a:	31 f0       	breq	.+12     	; 0x3d38 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    3d2c:	62 e2       	ldi	r22, 0x22	; 34
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEc>
    3d36:	04 c0       	rjmp	.+8      	; 0x3d40 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    3d38:	80 81       	ld	r24, Z
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    3d40:	fe 01       	movw	r30, r28
    3d42:	ea 5e       	subi	r30, 0xEA	; 234
    3d44:	fe 4f       	sbci	r31, 0xFE	; 254
    3d46:	60 81       	ld	r22, Z
    3d48:	71 81       	ldd	r23, Z+1	; 0x01
    3d4a:	40 e1       	ldi	r20, 0x10	; 16
    3d4c:	57 e2       	ldi	r21, 0x27	; 39
    3d4e:	ce 01       	movw	r24, r28
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00003d58 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    3d58:	0f 93       	push	r16
    3d5a:	1f 93       	push	r17
    3d5c:	cf 93       	push	r28
    3d5e:	df 93       	push	r29
    3d60:	ec 01       	movw	r28, r24
    3d62:	8a 01       	movw	r16, r20
    3d64:	41 e0       	ldi	r20, 0x01	; 1
    3d66:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e8 5e       	subi	r30, 0xE8	; 232
    3d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d70:	b8 01       	movw	r22, r16
    3d72:	80 81       	ld	r24, Z
    3d74:	91 81       	ldd	r25, Z+1	; 0x01
    3d76:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    3d7a:	61 e0       	ldi	r22, 0x01	; 1
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	1f 91       	pop	r17
    3d84:	0f 91       	pop	r16
    3d86:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003d8a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	ec 01       	movw	r28, r24
    3d94:	8a 01       	movw	r16, r20
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e8 5e       	subi	r30, 0xE8	; 232
    3da0:	fe 4f       	sbci	r31, 0xFE	; 254
    3da2:	b8 01       	movw	r22, r16
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3dac:	61 e0       	ldi	r22, 0x01	; 1
    3dae:	ce 01       	movw	r24, r28
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003dbc <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    3dbc:	cf 92       	push	r12
    3dbe:	df 92       	push	r13
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	ec 01       	movw	r28, r24
    3dca:	69 01       	movw	r12, r18
    3dcc:	7a 01       	movw	r14, r20
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	e8 5e       	subi	r30, 0xE8	; 232
    3dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dda:	2a e0       	ldi	r18, 0x0A	; 10
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	b7 01       	movw	r22, r14
    3de0:	a6 01       	movw	r20, r12
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	0e 94 ba 19 	call	0x3374	; 0x3374 <_ZN5Print5printEli>
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	ce 01       	movw	r24, r28
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	df 90       	pop	r13
    3df8:	cf 90       	pop	r12
    3dfa:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003dfe <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    3dfe:	4f 92       	push	r4
    3e00:	5f 92       	push	r5
    3e02:	6f 92       	push	r6
    3e04:	7f 92       	push	r7
    3e06:	8f 92       	push	r8
    3e08:	9f 92       	push	r9
    3e0a:	af 92       	push	r10
    3e0c:	bf 92       	push	r11
    3e0e:	ef 92       	push	r14
    3e10:	ff 92       	push	r15
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	7c 01       	movw	r14, r24
    3e1c:	2a 01       	movw	r4, r20
    3e1e:	3b 01       	movw	r6, r22
    3e20:	48 01       	movw	r8, r16
    3e22:	59 01       	movw	r10, r18
    3e24:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    3e28:	69 ed       	ldi	r22, 0xD9	; 217
    3e2a:	75 e0       	ldi	r23, 0x05	; 5
    3e2c:	80 e6       	ldi	r24, 0x60	; 96
    3e2e:	97 e0       	ldi	r25, 0x07	; 7
    3e30:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3e34:	6c ec       	ldi	r22, 0xCC	; 204
    3e36:	75 e0       	ldi	r23, 0x05	; 5
    3e38:	80 e6       	ldi	r24, 0x60	; 96
    3e3a:	97 e0       	ldi	r25, 0x07	; 7
    3e3c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3e40:	2a e0       	ldi	r18, 0x0A	; 10
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	b3 01       	movw	r22, r6
    3e46:	a2 01       	movw	r20, r4
    3e48:	80 e6       	ldi	r24, 0x60	; 96
    3e4a:	97 e0       	ldi	r25, 0x07	; 7
    3e4c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEmi>
    3e50:	6c e2       	ldi	r22, 0x2C	; 44
    3e52:	80 e6       	ldi	r24, 0x60	; 96
    3e54:	97 e0       	ldi	r25, 0x07	; 7
    3e56:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN5Print5printEc>
    3e5a:	2a e0       	ldi	r18, 0x0A	; 10
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	b5 01       	movw	r22, r10
    3e60:	a4 01       	movw	r20, r8
    3e62:	80 e6       	ldi	r24, 0x60	; 96
    3e64:	97 e0       	ldi	r25, 0x07	; 7
    3e66:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print7printlnEmi>
    3e6a:	e7 01       	movw	r28, r14
    3e6c:	c8 5e       	subi	r28, 0xE8	; 232
    3e6e:	de 4f       	sbci	r29, 0xFE	; 254
    3e70:	6f eb       	ldi	r22, 0xBF	; 191
    3e72:	75 e0       	ldi	r23, 0x05	; 5
    3e74:	88 81       	ld	r24, Y
    3e76:	99 81       	ldd	r25, Y+1	; 0x01
    3e78:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3e7c:	2a e0       	ldi	r18, 0x0A	; 10
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	b3 01       	movw	r22, r6
    3e82:	a2 01       	movw	r20, r4
    3e84:	88 81       	ld	r24, Y
    3e86:	99 81       	ldd	r25, Y+1	; 0x01
    3e88:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEmi>
    3e8c:	62 ed       	ldi	r22, 0xD2	; 210
    3e8e:	72 e0       	ldi	r23, 0x02	; 2
    3e90:	88 81       	ld	r24, Y
    3e92:	99 81       	ldd	r25, Y+1	; 0x01
    3e94:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    3e98:	2a e0       	ldi	r18, 0x0A	; 10
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	b5 01       	movw	r22, r10
    3e9e:	a4 01       	movw	r20, r8
    3ea0:	88 81       	ld	r24, Y
    3ea2:	99 81       	ldd	r25, Y+1	; 0x01
    3ea4:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print7printlnEmi>
    3ea8:	40 e1       	ldi	r20, 0x10	; 16
    3eaa:	57 e2       	ldi	r21, 0x27	; 39
    3eac:	66 eb       	ldi	r22, 0xB6	; 182
    3eae:	75 e0       	ldi	r23, 0x05	; 5
    3eb0:	c7 01       	movw	r24, r14
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	1f 91       	pop	r17
    3eb8:	0f 91       	pop	r16
    3eba:	ff 90       	pop	r15
    3ebc:	ef 90       	pop	r14
    3ebe:	bf 90       	pop	r11
    3ec0:	af 90       	pop	r10
    3ec2:	9f 90       	pop	r9
    3ec4:	8f 90       	pop	r8
    3ec6:	7f 90       	pop	r7
    3ec8:	6f 90       	pop	r6
    3eca:	5f 90       	pop	r5
    3ecc:	4f 90       	pop	r4
    3ece:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00003ed2 <_ZN13Adafruit_FONA8getReplyEPcj>:
    3ed2:	ef 92       	push	r14
    3ed4:	ff 92       	push	r15
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	ec 01       	movw	r28, r24
    3ee0:	8b 01       	movw	r16, r22
    3ee2:	7a 01       	movw	r14, r20
    3ee4:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    3ee8:	66 e2       	ldi	r22, 0x26	; 38
    3eea:	75 e0       	ldi	r23, 0x05	; 5
    3eec:	80 e6       	ldi	r24, 0x60	; 96
    3eee:	97 e0       	ldi	r25, 0x07	; 7
    3ef0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3ef4:	b8 01       	movw	r22, r16
    3ef6:	80 e6       	ldi	r24, 0x60	; 96
    3ef8:	97 e0       	ldi	r25, 0x07	; 7
    3efa:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    3efe:	fe 01       	movw	r30, r28
    3f00:	e8 5e       	subi	r30, 0xE8	; 232
    3f02:	fe 4f       	sbci	r31, 0xFE	; 254
    3f04:	b8 01       	movw	r22, r16
    3f06:	80 81       	ld	r24, Z
    3f08:	91 81       	ldd	r25, Z+1	; 0x01
    3f0a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    3f0e:	40 e0       	ldi	r20, 0x00	; 0
    3f10:	b7 01       	movw	r22, r14
    3f12:	ce 01       	movw	r24, r28
    3f14:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    3f18:	18 2f       	mov	r17, r24
    3f1a:	6f e1       	ldi	r22, 0x1F	; 31
    3f1c:	75 e0       	ldi	r23, 0x05	; 5
    3f1e:	80 e6       	ldi	r24, 0x60	; 96
    3f20:	97 e0       	ldi	r25, 0x07	; 7
    3f22:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3f26:	be 01       	movw	r22, r28
    3f28:	62 5f       	subi	r22, 0xF2	; 242
    3f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f2c:	80 e6       	ldi	r24, 0x60	; 96
    3f2e:	97 e0       	ldi	r25, 0x07	; 7
    3f30:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    3f34:	81 2f       	mov	r24, r17
    3f36:	df 91       	pop	r29
    3f38:	cf 91       	pop	r28
    3f3a:	1f 91       	pop	r17
    3f3c:	0f 91       	pop	r16
    3f3e:	ff 90       	pop	r15
    3f40:	ef 90       	pop	r14
    3f42:	08 95       	ret

00003f44 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	ec 01       	movw	r28, r24
    3f52:	8b 01       	movw	r16, r22
    3f54:	7a 01       	movw	r14, r20
    3f56:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    3f5a:	68 e1       	ldi	r22, 0x18	; 24
    3f5c:	75 e0       	ldi	r23, 0x05	; 5
    3f5e:	80 e6       	ldi	r24, 0x60	; 96
    3f60:	97 e0       	ldi	r25, 0x07	; 7
    3f62:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3f66:	b8 01       	movw	r22, r16
    3f68:	80 e6       	ldi	r24, 0x60	; 96
    3f6a:	97 e0       	ldi	r25, 0x07	; 7
    3f6c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3f70:	fe 01       	movw	r30, r28
    3f72:	e8 5e       	subi	r30, 0xE8	; 232
    3f74:	fe 4f       	sbci	r31, 0xFE	; 254
    3f76:	b8 01       	movw	r22, r16
    3f78:	80 81       	ld	r24, Z
    3f7a:	91 81       	ldd	r25, Z+1	; 0x01
    3f7c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	b7 01       	movw	r22, r14
    3f84:	ce 01       	movw	r24, r28
    3f86:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    3f8a:	18 2f       	mov	r17, r24
    3f8c:	61 e1       	ldi	r22, 0x11	; 17
    3f8e:	75 e0       	ldi	r23, 0x05	; 5
    3f90:	80 e6       	ldi	r24, 0x60	; 96
    3f92:	97 e0       	ldi	r25, 0x07	; 7
    3f94:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3f98:	be 01       	movw	r22, r28
    3f9a:	62 5f       	subi	r22, 0xF2	; 242
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	80 e6       	ldi	r24, 0x60	; 96
    3fa0:	97 e0       	ldi	r25, 0x07	; 7
    3fa2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    3fa6:	81 2f       	mov	r24, r17
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	0f 91       	pop	r16
    3fb0:	ff 90       	pop	r15
    3fb2:	ef 90       	pop	r14
    3fb4:	08 95       	ret

00003fb6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    3fb6:	8f 92       	push	r8
    3fb8:	9f 92       	push	r9
    3fba:	af 92       	push	r10
    3fbc:	bf 92       	push	r11
    3fbe:	cf 92       	push	r12
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	ec 01       	movw	r28, r24
    3fd0:	6b 01       	movw	r12, r22
    3fd2:	49 01       	movw	r8, r18
    3fd4:	5a 01       	movw	r10, r20
    3fd6:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    3fda:	6a e0       	ldi	r22, 0x0A	; 10
    3fdc:	75 e0       	ldi	r23, 0x05	; 5
    3fde:	80 e6       	ldi	r24, 0x60	; 96
    3fe0:	97 e0       	ldi	r25, 0x07	; 7
    3fe2:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3fe6:	b6 01       	movw	r22, r12
    3fe8:	80 e6       	ldi	r24, 0x60	; 96
    3fea:	97 e0       	ldi	r25, 0x07	; 7
    3fec:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    3ff0:	2a e0       	ldi	r18, 0x0A	; 10
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	b5 01       	movw	r22, r10
    3ff6:	a4 01       	movw	r20, r8
    3ff8:	80 e6       	ldi	r24, 0x60	; 96
    3ffa:	97 e0       	ldi	r25, 0x07	; 7
    3ffc:	0e 94 09 1a 	call	0x3412	; 0x3412 <_ZN5Print7printlnEli>
    4000:	7e 01       	movw	r14, r28
    4002:	88 ee       	ldi	r24, 0xE8	; 232
    4004:	e8 1a       	sub	r14, r24
    4006:	8e ef       	ldi	r24, 0xFE	; 254
    4008:	f8 0a       	sbc	r15, r24
    400a:	b6 01       	movw	r22, r12
    400c:	f7 01       	movw	r30, r14
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4016:	2a e0       	ldi	r18, 0x0A	; 10
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	b5 01       	movw	r22, r10
    401c:	a4 01       	movw	r20, r8
    401e:	f7 01       	movw	r30, r14
    4020:	80 81       	ld	r24, Z
    4022:	91 81       	ldd	r25, Z+1	; 0x01
    4024:	0e 94 09 1a 	call	0x3412	; 0x3412 <_ZN5Print7printlnEli>
    4028:	40 e0       	ldi	r20, 0x00	; 0
    402a:	b8 01       	movw	r22, r16
    402c:	ce 01       	movw	r24, r28
    402e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    4032:	18 2f       	mov	r17, r24
    4034:	63 e0       	ldi	r22, 0x03	; 3
    4036:	75 e0       	ldi	r23, 0x05	; 5
    4038:	80 e6       	ldi	r24, 0x60	; 96
    403a:	97 e0       	ldi	r25, 0x07	; 7
    403c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4040:	be 01       	movw	r22, r28
    4042:	62 5f       	subi	r22, 0xF2	; 242
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	80 e6       	ldi	r24, 0x60	; 96
    4048:	97 e0       	ldi	r25, 0x07	; 7
    404a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    404e:	81 2f       	mov	r24, r17
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	ff 90       	pop	r15
    405a:	ef 90       	pop	r14
    405c:	df 90       	pop	r13
    405e:	cf 90       	pop	r12
    4060:	bf 90       	pop	r11
    4062:	af 90       	pop	r10
    4064:	9f 90       	pop	r9
    4066:	8f 90       	pop	r8
    4068:	08 95       	ret

0000406a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    406a:	af 92       	push	r10
    406c:	bf 92       	push	r11
    406e:	cf 92       	push	r12
    4070:	df 92       	push	r13
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	ec 01       	movw	r28, r24
    4080:	6b 01       	movw	r12, r22
    4082:	7a 01       	movw	r14, r20
    4084:	59 01       	movw	r10, r18
    4086:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    408a:	6c ef       	ldi	r22, 0xFC	; 252
    408c:	74 e0       	ldi	r23, 0x04	; 4
    408e:	80 e6       	ldi	r24, 0x60	; 96
    4090:	97 e0       	ldi	r25, 0x07	; 7
    4092:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4096:	b6 01       	movw	r22, r12
    4098:	80 e6       	ldi	r24, 0x60	; 96
    409a:	97 e0       	ldi	r25, 0x07	; 7
    409c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    40a0:	62 e2       	ldi	r22, 0x22	; 34
    40a2:	80 e6       	ldi	r24, 0x60	; 96
    40a4:	97 e0       	ldi	r25, 0x07	; 7
    40a6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN5Print5printEc>
    40aa:	b7 01       	movw	r22, r14
    40ac:	80 e6       	ldi	r24, 0x60	; 96
    40ae:	97 e0       	ldi	r25, 0x07	; 7
    40b0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    40b4:	62 e2       	ldi	r22, 0x22	; 34
    40b6:	80 e6       	ldi	r24, 0x60	; 96
    40b8:	97 e0       	ldi	r25, 0x07	; 7
    40ba:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEc>
    40be:	8e 01       	movw	r16, r28
    40c0:	08 5e       	subi	r16, 0xE8	; 232
    40c2:	1e 4f       	sbci	r17, 0xFE	; 254
    40c4:	b6 01       	movw	r22, r12
    40c6:	f8 01       	movw	r30, r16
    40c8:	80 81       	ld	r24, Z
    40ca:	91 81       	ldd	r25, Z+1	; 0x01
    40cc:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    40d0:	62 e2       	ldi	r22, 0x22	; 34
    40d2:	f8 01       	movw	r30, r16
    40d4:	80 81       	ld	r24, Z
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_ZN5Print5printEc>
    40dc:	b7 01       	movw	r22, r14
    40de:	f8 01       	movw	r30, r16
    40e0:	80 81       	ld	r24, Z
    40e2:	91 81       	ldd	r25, Z+1	; 0x01
    40e4:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    40e8:	62 e2       	ldi	r22, 0x22	; 34
    40ea:	f8 01       	movw	r30, r16
    40ec:	80 81       	ld	r24, Z
    40ee:	91 81       	ldd	r25, Z+1	; 0x01
    40f0:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEc>
    40f4:	40 e0       	ldi	r20, 0x00	; 0
    40f6:	b5 01       	movw	r22, r10
    40f8:	ce 01       	movw	r24, r28
    40fa:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    40fe:	18 2f       	mov	r17, r24
    4100:	65 ef       	ldi	r22, 0xF5	; 245
    4102:	74 e0       	ldi	r23, 0x04	; 4
    4104:	80 e6       	ldi	r24, 0x60	; 96
    4106:	97 e0       	ldi	r25, 0x07	; 7
    4108:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    410c:	be 01       	movw	r22, r28
    410e:	62 5f       	subi	r22, 0xF2	; 242
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	80 e6       	ldi	r24, 0x60	; 96
    4114:	97 e0       	ldi	r25, 0x07	; 7
    4116:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    411a:	81 2f       	mov	r24, r17
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	ff 90       	pop	r15
    4126:	ef 90       	pop	r14
    4128:	df 90       	pop	r13
    412a:	cf 90       	pop	r12
    412c:	bf 90       	pop	r11
    412e:	af 90       	pop	r10
    4130:	08 95       	ret

00004132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	ec 01       	movw	r28, r24
    413c:	8a 01       	movw	r16, r20
    413e:	a9 01       	movw	r20, r18
    4140:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4144:	88 23       	and	r24, r24
    4146:	41 f0       	breq	.+16     	; 0x4158 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    4148:	b8 01       	movw	r22, r16
    414a:	ce 01       	movw	r24, r28
    414c:	0e 96       	adiw	r24, 0x0e	; 14
    414e:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <strcmp_P>
    4152:	21 e0       	ldi	r18, 0x01	; 1
    4154:	89 2b       	or	r24, r25
    4156:	09 f0       	breq	.+2      	; 0x415a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	82 2f       	mov	r24, r18
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	1f 91       	pop	r17
    4162:	0f 91       	pop	r16
    4164:	08 95       	ret

00004166 <_ZN13Adafruit_FONA5beginER6Stream>:
    4166:	cf 92       	push	r12
    4168:	df 92       	push	r13
    416a:	ef 92       	push	r14
    416c:	ff 92       	push	r15
    416e:	0f 93       	push	r16
    4170:	1f 93       	push	r17
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	ec 01       	movw	r28, r24
    4178:	7c 01       	movw	r14, r24
    417a:	88 ee       	ldi	r24, 0xE8	; 232
    417c:	e8 1a       	sub	r14, r24
    417e:	8e ef       	ldi	r24, 0xFE	; 254
    4180:	f8 0a       	sbc	r15, r24
    4182:	d7 01       	movw	r26, r14
    4184:	6d 93       	st	X+, r22
    4186:	7c 93       	st	X, r23
    4188:	61 e0       	ldi	r22, 0x01	; 1
    418a:	8c 85       	ldd	r24, Y+12	; 0x0c
    418c:	0e 94 1b 1c 	call	0x3836	; 0x3836 <pinMode>
    4190:	61 e0       	ldi	r22, 0x01	; 1
    4192:	8c 85       	ldd	r24, Y+12	; 0x0c
    4194:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
    4198:	6a e0       	ldi	r22, 0x0A	; 10
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    41a8:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
    41ac:	64 e6       	ldi	r22, 0x64	; 100
    41ae:	70 e0       	ldi	r23, 0x00	; 0
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    41b8:	61 e0       	ldi	r22, 0x01	; 1
    41ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    41bc:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
    41c0:	66 e0       	ldi	r22, 0x06	; 6
    41c2:	78 e0       	ldi	r23, 0x08	; 8
    41c4:	80 e6       	ldi	r24, 0x60	; 96
    41c6:	97 e0       	ldi	r25, 0x07	; 7
    41c8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    41cc:	8e e0       	ldi	r24, 0x0E	; 14
    41ce:	c8 2e       	mov	r12, r24
    41d0:	d1 2c       	mov	r13, r1
    41d2:	8e 01       	movw	r16, r28
    41d4:	0a 5e       	subi	r16, 0xEA	; 234
    41d6:	1e 4f       	sbci	r17, 0xFE	; 254
    41d8:	f7 01       	movw	r30, r14
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	dc 01       	movw	r26, r24
    41e0:	ed 91       	ld	r30, X+
    41e2:	fc 91       	ld	r31, X
    41e4:	04 80       	ldd	r0, Z+4	; 0x04
    41e6:	f5 81       	ldd	r31, Z+5	; 0x05
    41e8:	e0 2d       	mov	r30, r0
    41ea:	09 95       	icall
    41ec:	89 2b       	or	r24, r25
    41ee:	89 f0       	breq	.+34     	; 0x4212 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    41f0:	61 ef       	ldi	r22, 0xF1	; 241
    41f2:	77 e0       	ldi	r23, 0x07	; 7
    41f4:	80 e6       	ldi	r24, 0x60	; 96
    41f6:	97 e0       	ldi	r25, 0x07	; 7
    41f8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    41fc:	f7 01       	movw	r30, r14
    41fe:	80 81       	ld	r24, Z
    4200:	91 81       	ldd	r25, Z+1	; 0x01
    4202:	dc 01       	movw	r26, r24
    4204:	ed 91       	ld	r30, X+
    4206:	fc 91       	ld	r31, X
    4208:	06 80       	ldd	r0, Z+6	; 0x06
    420a:	f7 81       	ldd	r31, Z+7	; 0x07
    420c:	e0 2d       	mov	r30, r0
    420e:	09 95       	icall
    4210:	e3 cf       	rjmp	.-58     	; 0x41d8 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    4212:	f8 01       	movw	r30, r16
    4214:	40 81       	ld	r20, Z
    4216:	51 81       	ldd	r21, Z+1	; 0x01
    4218:	24 ef       	ldi	r18, 0xF4	; 244
    421a:	31 e0       	ldi	r19, 0x01	; 1
    421c:	6e ee       	ldi	r22, 0xEE	; 238
    421e:	77 e0       	ldi	r23, 0x07	; 7
    4220:	ce 01       	movw	r24, r28
    4222:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4226:	81 11       	cpse	r24, r1
    4228:	63 c0       	rjmp	.+198    	; 0x42f0 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    422a:	d7 01       	movw	r26, r14
    422c:	8d 91       	ld	r24, X+
    422e:	9c 91       	ld	r25, X
    4230:	dc 01       	movw	r26, r24
    4232:	ed 91       	ld	r30, X+
    4234:	fc 91       	ld	r31, X
    4236:	04 80       	ldd	r0, Z+4	; 0x04
    4238:	f5 81       	ldd	r31, Z+5	; 0x05
    423a:	e0 2d       	mov	r30, r0
    423c:	09 95       	icall
    423e:	89 2b       	or	r24, r25
    4240:	59 f0       	breq	.+22     	; 0x4258 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    4242:	f7 01       	movw	r30, r14
    4244:	80 81       	ld	r24, Z
    4246:	91 81       	ldd	r25, Z+1	; 0x01
    4248:	dc 01       	movw	r26, r24
    424a:	ed 91       	ld	r30, X+
    424c:	fc 91       	ld	r31, X
    424e:	06 80       	ldd	r0, Z+6	; 0x06
    4250:	f7 81       	ldd	r31, Z+7	; 0x07
    4252:	e0 2d       	mov	r30, r0
    4254:	09 95       	icall
    4256:	e9 cf       	rjmp	.-46     	; 0x422a <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    4258:	24 ef       	ldi	r18, 0xF4	; 244
    425a:	31 e0       	ldi	r19, 0x01	; 1
    425c:	4b ee       	ldi	r20, 0xEB	; 235
    425e:	57 e0       	ldi	r21, 0x07	; 7
    4260:	68 ee       	ldi	r22, 0xE8	; 232
    4262:	77 e0       	ldi	r23, 0x07	; 7
    4264:	ce 01       	movw	r24, r28
    4266:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    426a:	81 11       	cpse	r24, r1
    426c:	41 c0       	rjmp	.+130    	; 0x42f0 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    426e:	64 ef       	ldi	r22, 0xF4	; 244
    4270:	71 e0       	ldi	r23, 0x01	; 1
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    427a:	b1 e0       	ldi	r27, 0x01	; 1
    427c:	cb 1a       	sub	r12, r27
    427e:	d1 08       	sbc	r13, r1
    4280:	09 f0       	breq	.+2      	; 0x4284 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    4282:	aa cf       	rjmp	.-172    	; 0x41d8 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    4284:	66 eb       	ldi	r22, 0xB6	; 182
    4286:	77 e0       	ldi	r23, 0x07	; 7
    4288:	80 e6       	ldi	r24, 0x60	; 96
    428a:	97 e0       	ldi	r25, 0x07	; 7
    428c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4290:	d8 01       	movw	r26, r16
    4292:	4d 91       	ld	r20, X+
    4294:	5c 91       	ld	r21, X
    4296:	24 ef       	ldi	r18, 0xF4	; 244
    4298:	31 e0       	ldi	r19, 0x01	; 1
    429a:	63 eb       	ldi	r22, 0xB3	; 179
    429c:	77 e0       	ldi	r23, 0x07	; 7
    429e:	ce 01       	movw	r24, r28
    42a0:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    42a4:	64 e6       	ldi	r22, 0x64	; 100
    42a6:	70 e0       	ldi	r23, 0x00	; 0
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    42b0:	f8 01       	movw	r30, r16
    42b2:	40 81       	ld	r20, Z
    42b4:	51 81       	ldd	r21, Z+1	; 0x01
    42b6:	24 ef       	ldi	r18, 0xF4	; 244
    42b8:	31 e0       	ldi	r19, 0x01	; 1
    42ba:	60 eb       	ldi	r22, 0xB0	; 176
    42bc:	77 e0       	ldi	r23, 0x07	; 7
    42be:	ce 01       	movw	r24, r28
    42c0:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    42c4:	64 e6       	ldi	r22, 0x64	; 100
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    42d0:	d8 01       	movw	r26, r16
    42d2:	4d 91       	ld	r20, X+
    42d4:	5c 91       	ld	r21, X
    42d6:	24 ef       	ldi	r18, 0xF4	; 244
    42d8:	31 e0       	ldi	r19, 0x01	; 1
    42da:	6d ea       	ldi	r22, 0xAD	; 173
    42dc:	77 e0       	ldi	r23, 0x07	; 7
    42de:	ce 01       	movw	r24, r28
    42e0:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    42e4:	64 e6       	ldi	r22, 0x64	; 100
    42e6:	70 e0       	ldi	r23, 0x00	; 0
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    42f0:	f8 01       	movw	r30, r16
    42f2:	40 81       	ld	r20, Z
    42f4:	51 81       	ldd	r21, Z+1	; 0x01
    42f6:	24 ef       	ldi	r18, 0xF4	; 244
    42f8:	31 e0       	ldi	r19, 0x01	; 1
    42fa:	68 ea       	ldi	r22, 0xA8	; 168
    42fc:	77 e0       	ldi	r23, 0x07	; 7
    42fe:	ce 01       	movw	r24, r28
    4300:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4304:	64 e6       	ldi	r22, 0x64	; 100
    4306:	70 e0       	ldi	r23, 0x00	; 0
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    4310:	d8 01       	movw	r26, r16
    4312:	4d 91       	ld	r20, X+
    4314:	5c 91       	ld	r21, X
    4316:	24 ef       	ldi	r18, 0xF4	; 244
    4318:	31 e0       	ldi	r19, 0x01	; 1
    431a:	63 ea       	ldi	r22, 0xA3	; 163
    431c:	77 e0       	ldi	r23, 0x07	; 7
    431e:	ce 01       	movw	r24, r28
    4320:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4324:	d8 2e       	mov	r13, r24
    4326:	88 23       	and	r24, r24
    4328:	09 f4       	brne	.+2      	; 0x432c <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    432a:	97 c0       	rjmp	.+302    	; 0x445a <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    432c:	f8 01       	movw	r30, r16
    432e:	40 81       	ld	r20, Z
    4330:	51 81       	ldd	r21, Z+1	; 0x01
    4332:	24 ef       	ldi	r18, 0xF4	; 244
    4334:	31 e0       	ldi	r19, 0x01	; 1
    4336:	69 e9       	ldi	r22, 0x99	; 153
    4338:	77 e0       	ldi	r23, 0x07	; 7
    433a:	ce 01       	movw	r24, r28
    433c:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4340:	64 e6       	ldi	r22, 0x64	; 100
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <delay>
    434c:	ce 01       	movw	r24, r28
    434e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    4352:	62 e9       	ldi	r22, 0x92	; 146
    4354:	77 e0       	ldi	r23, 0x07	; 7
    4356:	80 e6       	ldi	r24, 0x60	; 96
    4358:	97 e0       	ldi	r25, 0x07	; 7
    435a:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    435e:	6c ed       	ldi	r22, 0xDC	; 220
    4360:	72 e0       	ldi	r23, 0x02	; 2
    4362:	80 e6       	ldi	r24, 0x60	; 96
    4364:	97 e0       	ldi	r25, 0x07	; 7
    4366:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    436a:	6c ed       	ldi	r22, 0xDC	; 220
    436c:	72 e0       	ldi	r23, 0x02	; 2
    436e:	d7 01       	movw	r26, r14
    4370:	8d 91       	ld	r24, X+
    4372:	9c 91       	ld	r25, X
    4374:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    4378:	41 e0       	ldi	r20, 0x01	; 1
    437a:	64 ef       	ldi	r22, 0xF4	; 244
    437c:	71 e0       	ldi	r23, 0x01	; 1
    437e:	ce 01       	movw	r24, r28
    4380:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    4384:	6b e8       	ldi	r22, 0x8B	; 139
    4386:	77 e0       	ldi	r23, 0x07	; 7
    4388:	80 e6       	ldi	r24, 0x60	; 96
    438a:	97 e0       	ldi	r25, 0x07	; 7
    438c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4390:	8e 01       	movw	r16, r28
    4392:	02 5f       	subi	r16, 0xF2	; 242
    4394:	1f 4f       	sbci	r17, 0xFF	; 255
    4396:	b8 01       	movw	r22, r16
    4398:	80 e6       	ldi	r24, 0x60	; 96
    439a:	97 e0       	ldi	r25, 0x07	; 7
    439c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    43a0:	60 e8       	ldi	r22, 0x80	; 128
    43a2:	77 e0       	ldi	r23, 0x07	; 7
    43a4:	c8 01       	movw	r24, r16
    43a6:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    43aa:	89 2b       	or	r24, r25
    43ac:	11 f0       	breq	.+4      	; 0x43b2 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    43ae:	83 e0       	ldi	r24, 0x03	; 3
    43b0:	23 c0       	rjmp	.+70     	; 0x43f8 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    43b2:	65 e7       	ldi	r22, 0x75	; 117
    43b4:	77 e0       	ldi	r23, 0x07	; 7
    43b6:	c8 01       	movw	r24, r16
    43b8:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    43bc:	89 2b       	or	r24, r25
    43be:	11 f0       	breq	.+4      	; 0x43c4 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    43c0:	82 e0       	ldi	r24, 0x02	; 2
    43c2:	1a c0       	rjmp	.+52     	; 0x43f8 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    43c4:	6a e6       	ldi	r22, 0x6A	; 106
    43c6:	77 e0       	ldi	r23, 0x07	; 7
    43c8:	c8 01       	movw	r24, r16
    43ca:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    43ce:	89 2b       	or	r24, r25
    43d0:	11 f0       	breq	.+4      	; 0x43d6 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	11 c0       	rjmp	.+34     	; 0x43f8 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    43d6:	6a e5       	ldi	r22, 0x5A	; 90
    43d8:	77 e0       	ldi	r23, 0x07	; 7
    43da:	c8 01       	movw	r24, r16
    43dc:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    43e0:	89 2b       	or	r24, r25
    43e2:	11 f0       	breq	.+4      	; 0x43e8 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    43e4:	84 e0       	ldi	r24, 0x04	; 4
    43e6:	08 c0       	rjmp	.+16     	; 0x43f8 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    43e8:	6a e4       	ldi	r22, 0x4A	; 74
    43ea:	77 e0       	ldi	r23, 0x07	; 7
    43ec:	c8 01       	movw	r24, r16
    43ee:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    43f2:	89 2b       	or	r24, r25
    43f4:	11 f0       	breq	.+4      	; 0x43fa <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    43f6:	85 e0       	ldi	r24, 0x05	; 5
    43f8:	8d 87       	std	Y+13, r24	; 0x0d
    43fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fc:	81 30       	cpi	r24, 0x01	; 1
    43fe:	69 f5       	brne	.+90     	; 0x445a <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4400:	63 e4       	ldi	r22, 0x43	; 67
    4402:	77 e0       	ldi	r23, 0x07	; 7
    4404:	80 e6       	ldi	r24, 0x60	; 96
    4406:	97 e0       	ldi	r25, 0x07	; 7
    4408:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    440c:	60 ee       	ldi	r22, 0xE0	; 224
    440e:	72 e0       	ldi	r23, 0x02	; 2
    4410:	80 e6       	ldi	r24, 0x60	; 96
    4412:	97 e0       	ldi	r25, 0x07	; 7
    4414:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    4418:	60 ee       	ldi	r22, 0xE0	; 224
    441a:	72 e0       	ldi	r23, 0x02	; 2
    441c:	f7 01       	movw	r30, r14
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    4426:	41 e0       	ldi	r20, 0x01	; 1
    4428:	64 ef       	ldi	r22, 0xF4	; 244
    442a:	71 e0       	ldi	r23, 0x01	; 1
    442c:	ce 01       	movw	r24, r28
    442e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    4432:	6c e3       	ldi	r22, 0x3C	; 60
    4434:	77 e0       	ldi	r23, 0x07	; 7
    4436:	80 e6       	ldi	r24, 0x60	; 96
    4438:	97 e0       	ldi	r25, 0x07	; 7
    443a:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    443e:	b8 01       	movw	r22, r16
    4440:	80 e6       	ldi	r24, 0x60	; 96
    4442:	97 e0       	ldi	r25, 0x07	; 7
    4444:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    4448:	64 e3       	ldi	r22, 0x34	; 52
    444a:	77 e0       	ldi	r23, 0x07	; 7
    444c:	c8 01       	movw	r24, r16
    444e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    4452:	89 2b       	or	r24, r25
    4454:	11 f0       	breq	.+4      	; 0x445a <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4456:	86 e0       	ldi	r24, 0x06	; 6
    4458:	8d 87       	std	Y+13, r24	; 0x0d
    445a:	8d 2d       	mov	r24, r13
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	1f 91       	pop	r17
    4462:	0f 91       	pop	r16
    4464:	ff 90       	pop	r15
    4466:	ef 90       	pop	r14
    4468:	df 90       	pop	r13
    446a:	cf 90       	pop	r12
    446c:	08 95       	ret

0000446e <_ZN13Adafruit_FONA9HTTP_initEv>:
    446e:	fc 01       	movw	r30, r24
    4470:	ea 5e       	subi	r30, 0xEA	; 234
    4472:	fe 4f       	sbci	r31, 0xFE	; 254
    4474:	40 81       	ld	r20, Z
    4476:	51 81       	ldd	r21, Z+1	; 0x01
    4478:	24 ef       	ldi	r18, 0xF4	; 244
    447a:	31 e0       	ldi	r19, 0x01	; 1
    447c:	66 e1       	ldi	r22, 0x16	; 22
    447e:	76 e0       	ldi	r23, 0x06	; 6
    4480:	0c 94 99 20 	jmp	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004484 <_ZN13Adafruit_FONA9HTTP_termEv>:
    4484:	fc 01       	movw	r30, r24
    4486:	ea 5e       	subi	r30, 0xEA	; 234
    4488:	fe 4f       	sbci	r31, 0xFE	; 254
    448a:	40 81       	ld	r20, Z
    448c:	51 81       	ldd	r21, Z+1	; 0x01
    448e:	24 ef       	ldi	r18, 0xF4	; 244
    4490:	31 e0       	ldi	r19, 0x01	; 1
    4492:	6a e0       	ldi	r22, 0x0A	; 10
    4494:	76 e0       	ldi	r23, 0x06	; 6
    4496:	0c 94 99 20 	jmp	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000449a <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    449a:	0c 94 42 22 	jmp	0x4484	; 0x4484 <_ZN13Adafruit_FONA9HTTP_termEv>

0000449e <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    449e:	0f 93       	push	r16
    44a0:	1f 93       	push	r17
    44a2:	cf 93       	push	r28
    44a4:	df 93       	push	r29
    44a6:	ec 01       	movw	r28, r24
    44a8:	8a 01       	movw	r16, r20
    44aa:	a9 01       	movw	r20, r18
    44ac:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN13Adafruit_FONA8getReplyEPcj>
    44b0:	88 23       	and	r24, r24
    44b2:	41 f0       	breq	.+16     	; 0x44c4 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    44b4:	b8 01       	movw	r22, r16
    44b6:	ce 01       	movw	r24, r28
    44b8:	0e 96       	adiw	r24, 0x0e	; 14
    44ba:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <strcmp_P>
    44be:	21 e0       	ldi	r18, 0x01	; 1
    44c0:	89 2b       	or	r24, r25
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	82 2f       	mov	r24, r18
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	1f 91       	pop	r17
    44ce:	0f 91       	pop	r16
    44d0:	08 95       	ret

000044d2 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    44d2:	af 92       	push	r10
    44d4:	bf 92       	push	r11
    44d6:	cf 92       	push	r12
    44d8:	df 92       	push	r13
    44da:	ef 92       	push	r14
    44dc:	ff 92       	push	r15
    44de:	0f 93       	push	r16
    44e0:	1f 93       	push	r17
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	6e 97       	sbiw	r28, 0x1e	; 30
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	f8 94       	cli
    44f0:	de bf       	out	0x3e, r29	; 62
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	8c 01       	movw	r16, r24
    44f8:	5b 01       	movw	r10, r22
    44fa:	6a 01       	movw	r12, r20
    44fc:	fc 01       	movw	r30, r24
    44fe:	ea 5e       	subi	r30, 0xEA	; 234
    4500:	fe 4f       	sbci	r31, 0xFE	; 254
    4502:	40 81       	ld	r20, Z
    4504:	51 81       	ldd	r21, Z+1	; 0x01
    4506:	24 ef       	ldi	r18, 0xF4	; 244
    4508:	31 e0       	ldi	r19, 0x01	; 1
    450a:	6d ef       	ldi	r22, 0xFD	; 253
    450c:	76 e0       	ldi	r23, 0x06	; 6
    450e:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4512:	88 23       	and	r24, r24
    4514:	09 f4       	brne	.+2      	; 0x4518 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4516:	88 c0       	rjmp	.+272    	; 0x4628 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4518:	8a e0       	ldi	r24, 0x0A	; 10
    451a:	ef ed       	ldi	r30, 0xDF	; 223
    451c:	f1 e0       	ldi	r31, 0x01	; 1
    451e:	9e 01       	movw	r18, r28
    4520:	2f 5f       	subi	r18, 0xFF	; 255
    4522:	3f 4f       	sbci	r19, 0xFF	; 255
    4524:	79 01       	movw	r14, r18
    4526:	d9 01       	movw	r26, r18
    4528:	01 90       	ld	r0, Z+
    452a:	0d 92       	st	X+, r0
    452c:	8a 95       	dec	r24
    452e:	e1 f7       	brne	.-8      	; 0x4528 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    4530:	fe 01       	movw	r30, r28
    4532:	3b 96       	adiw	r30, 0x0b	; 11
    4534:	84 e1       	ldi	r24, 0x14	; 20
    4536:	df 01       	movw	r26, r30
    4538:	1d 92       	st	X+, r1
    453a:	8a 95       	dec	r24
    453c:	e9 f7       	brne	.-6      	; 0x4538 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    453e:	43 e1       	ldi	r20, 0x13	; 19
    4540:	50 e0       	ldi	r21, 0x00	; 0
    4542:	b5 01       	movw	r22, r10
    4544:	ce 01       	movw	r24, r28
    4546:	0a 96       	adiw	r24, 0x0a	; 10
    4548:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <strncpy>
    454c:	f7 01       	movw	r30, r14
    454e:	01 90       	ld	r0, Z+
    4550:	00 20       	and	r0, r0
    4552:	e9 f7       	brne	.-6      	; 0x454e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    4554:	31 97       	sbiw	r30, 0x01	; 1
    4556:	82 e2       	ldi	r24, 0x22	; 34
    4558:	80 83       	st	Z, r24
    455a:	24 ef       	ldi	r18, 0xF4	; 244
    455c:	31 e0       	ldi	r19, 0x01	; 1
    455e:	4a ef       	ldi	r20, 0xFA	; 250
    4560:	56 e0       	ldi	r21, 0x06	; 6
    4562:	b7 01       	movw	r22, r14
    4564:	c8 01       	movw	r24, r16
    4566:	0e 94 4f 22 	call	0x449e	; 0x449e <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    456a:	88 23       	and	r24, r24
    456c:	09 f4       	brne	.+2      	; 0x4570 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    456e:	5c c0       	rjmp	.+184    	; 0x4628 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4570:	67 ef       	ldi	r22, 0xF7	; 247
    4572:	76 e0       	ldi	r23, 0x06	; 6
    4574:	80 e6       	ldi	r24, 0x60	; 96
    4576:	97 e0       	ldi	r25, 0x07	; 7
    4578:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    457c:	b6 01       	movw	r22, r12
    457e:	80 e6       	ldi	r24, 0x60	; 96
    4580:	97 e0       	ldi	r25, 0x07	; 7
    4582:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    4586:	b6 01       	movw	r22, r12
    4588:	78 01       	movw	r14, r16
    458a:	b8 ee       	ldi	r27, 0xE8	; 232
    458c:	eb 1a       	sub	r14, r27
    458e:	be ef       	ldi	r27, 0xFE	; 254
    4590:	fb 0a       	sbc	r15, r27
    4592:	f7 01       	movw	r30, r14
    4594:	80 81       	ld	r24, Z
    4596:	91 81       	ldd	r25, Z+1	; 0x01
    4598:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    459c:	d7 01       	movw	r26, r14
    459e:	8d 91       	ld	r24, X+
    45a0:	9c 91       	ld	r25, X
    45a2:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN5Print7printlnEv>
    45a6:	f7 01       	movw	r30, r14
    45a8:	80 81       	ld	r24, Z
    45aa:	91 81       	ldd	r25, Z+1	; 0x01
    45ac:	dc 01       	movw	r26, r24
    45ae:	ed 91       	ld	r30, X+
    45b0:	fc 91       	ld	r31, X
    45b2:	01 90       	ld	r0, Z+
    45b4:	f0 81       	ld	r31, Z
    45b6:	e0 2d       	mov	r30, r0
    45b8:	6a e1       	ldi	r22, 0x1A	; 26
    45ba:	09 95       	icall
    45bc:	69 ef       	ldi	r22, 0xF9	; 249
    45be:	72 e0       	ldi	r23, 0x02	; 2
    45c0:	80 e6       	ldi	r24, 0x60	; 96
    45c2:	97 e0       	ldi	r25, 0x07	; 7
    45c4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    45c8:	f8 01       	movw	r30, r16
    45ca:	85 85       	ldd	r24, Z+13	; 0x0d
    45cc:	84 50       	subi	r24, 0x04	; 4
    45ce:	82 30       	cpi	r24, 0x02	; 2
    45d0:	60 f4       	brcc	.+24     	; 0x45ea <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    45d2:	40 e0       	ldi	r20, 0x00	; 0
    45d4:	68 ec       	ldi	r22, 0xC8	; 200
    45d6:	70 e0       	ldi	r23, 0x00	; 0
    45d8:	c8 01       	movw	r24, r16
    45da:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    45de:	40 e0       	ldi	r20, 0x00	; 0
    45e0:	68 ec       	ldi	r22, 0xC8	; 200
    45e2:	70 e0       	ldi	r23, 0x00	; 0
    45e4:	c8 01       	movw	r24, r16
    45e6:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    45ea:	40 e0       	ldi	r20, 0x00	; 0
    45ec:	60 e1       	ldi	r22, 0x10	; 16
    45ee:	77 e2       	ldi	r23, 0x27	; 39
    45f0:	c8 01       	movw	r24, r16
    45f2:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    45f6:	78 01       	movw	r14, r16
    45f8:	fe e0       	ldi	r31, 0x0E	; 14
    45fa:	ef 0e       	add	r14, r31
    45fc:	f1 1c       	adc	r15, r1
    45fe:	6c ef       	ldi	r22, 0xFC	; 252
    4600:	72 e0       	ldi	r23, 0x02	; 2
    4602:	c7 01       	movw	r24, r14
    4604:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <strstr>
    4608:	89 2b       	or	r24, r25
    460a:	71 f0       	breq	.+28     	; 0x4628 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    460c:	40 e0       	ldi	r20, 0x00	; 0
    460e:	68 ee       	ldi	r22, 0xE8	; 232
    4610:	73 e0       	ldi	r23, 0x03	; 3
    4612:	c8 01       	movw	r24, r16
    4614:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    4618:	6f ec       	ldi	r22, 0xCF	; 207
    461a:	72 e0       	ldi	r23, 0x02	; 2
    461c:	c7 01       	movw	r24, r14
    461e:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <strcmp>
    4622:	21 e0       	ldi	r18, 0x01	; 1
    4624:	89 2b       	or	r24, r25
    4626:	09 f0       	breq	.+2      	; 0x462a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	82 2f       	mov	r24, r18
    462c:	6e 96       	adiw	r28, 0x1e	; 30
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	df 91       	pop	r29
    463a:	cf 91       	pop	r28
    463c:	1f 91       	pop	r17
    463e:	0f 91       	pop	r16
    4640:	ff 90       	pop	r15
    4642:	ef 90       	pop	r14
    4644:	df 90       	pop	r13
    4646:	cf 90       	pop	r12
    4648:	bf 90       	pop	r11
    464a:	af 90       	pop	r10
    464c:	08 95       	ret

0000464e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    464e:	cf 92       	push	r12
    4650:	df 92       	push	r13
    4652:	ef 92       	push	r14
    4654:	ff 92       	push	r15
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	ec 01       	movw	r28, r24
    4660:	68 01       	movw	r12, r16
    4662:	87 01       	movw	r16, r14
    4664:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4668:	b6 01       	movw	r22, r12
    466a:	ce 01       	movw	r24, r28
    466c:	0e 96       	adiw	r24, 0x0e	; 14
    466e:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <strcmp_P>
    4672:	21 e0       	ldi	r18, 0x01	; 1
    4674:	89 2b       	or	r24, r25
    4676:	09 f0       	breq	.+2      	; 0x467a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	82 2f       	mov	r24, r18
    467c:	df 91       	pop	r29
    467e:	cf 91       	pop	r28
    4680:	1f 91       	pop	r17
    4682:	0f 91       	pop	r16
    4684:	ff 90       	pop	r15
    4686:	ef 90       	pop	r14
    4688:	df 90       	pop	r13
    468a:	cf 90       	pop	r12
    468c:	08 95       	ret

0000468e <_ZN13Adafruit_FONA8HTTP_sslEb>:
    468e:	ef 92       	push	r14
    4690:	ff 92       	push	r15
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	fc 01       	movw	r30, r24
    4698:	ea 5e       	subi	r30, 0xEA	; 234
    469a:	fe 4f       	sbci	r31, 0xFE	; 254
    469c:	00 81       	ld	r16, Z
    469e:	11 81       	ldd	r17, Z+1	; 0x01
    46a0:	26 2f       	mov	r18, r22
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	40 e0       	ldi	r20, 0x00	; 0
    46a6:	50 e0       	ldi	r21, 0x00	; 0
    46a8:	64 ef       	ldi	r22, 0xF4	; 244
    46aa:	e6 2e       	mov	r14, r22
    46ac:	ff 24       	eor	r15, r15
    46ae:	f3 94       	inc	r15
    46b0:	6a e6       	ldi	r22, 0x6A	; 106
    46b2:	75 e0       	ldi	r23, 0x05	; 5
    46b4:	0e 94 27 23 	call	0x464e	; 0x464e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    46b8:	1f 91       	pop	r17
    46ba:	0f 91       	pop	r16
    46bc:	ff 90       	pop	r15
    46be:	ef 90       	pop	r14
    46c0:	08 95       	ret

000046c2 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    46c2:	0f 93       	push	r16
    46c4:	1f 93       	push	r17
    46c6:	cf 93       	push	r28
    46c8:	df 93       	push	r29
    46ca:	ec 01       	movw	r28, r24
    46cc:	8b 01       	movw	r16, r22
    46ce:	0e 94 42 22 	call	0x4484	; 0x4484 <_ZN13Adafruit_FONA9HTTP_termEv>
    46d2:	ce 01       	movw	r24, r28
    46d4:	0e 94 37 22 	call	0x446e	; 0x446e <_ZN13Adafruit_FONA9HTTP_initEv>
    46d8:	81 11       	cpse	r24, r1
    46da:	02 c0       	rjmp	.+4      	; 0x46e0 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	38 c0       	rjmp	.+112    	; 0x4750 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    46e0:	21 e0       	ldi	r18, 0x01	; 1
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e0       	ldi	r20, 0x00	; 0
    46e6:	50 e0       	ldi	r21, 0x00	; 0
    46e8:	6f e4       	ldi	r22, 0x4F	; 79
    46ea:	75 e0       	ldi	r23, 0x05	; 5
    46ec:	ce 01       	movw	r24, r28
    46ee:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    46f2:	88 23       	and	r24, r24
    46f4:	99 f3       	breq	.-26     	; 0x46dc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    46f6:	fe 01       	movw	r30, r28
    46f8:	ec 5e       	subi	r30, 0xEC	; 236
    46fa:	fe 4f       	sbci	r31, 0xFE	; 254
    46fc:	40 81       	ld	r20, Z
    46fe:	51 81       	ldd	r21, Z+1	; 0x01
    4700:	6c e4       	ldi	r22, 0x4C	; 76
    4702:	75 e0       	ldi	r23, 0x05	; 5
    4704:	ce 01       	movw	r24, r28
    4706:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    470a:	88 23       	and	r24, r24
    470c:	39 f3       	breq	.-50     	; 0x46dc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    470e:	a8 01       	movw	r20, r16
    4710:	68 e4       	ldi	r22, 0x48	; 72
    4712:	75 e0       	ldi	r23, 0x05	; 5
    4714:	ce 01       	movw	r24, r28
    4716:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    471a:	88 23       	and	r24, r24
    471c:	f9 f2       	breq	.-66     	; 0x46dc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    471e:	fe 01       	movw	r30, r28
    4720:	ed 5e       	subi	r30, 0xED	; 237
    4722:	fe 4f       	sbci	r31, 0xFE	; 254
    4724:	90 81       	ld	r25, Z
    4726:	99 23       	and	r25, r25
    4728:	99 f0       	breq	.+38     	; 0x4750 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    472a:	21 e0       	ldi	r18, 0x01	; 1
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	40 e0       	ldi	r20, 0x00	; 0
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	62 e4       	ldi	r22, 0x42	; 66
    4734:	75 e0       	ldi	r23, 0x05	; 5
    4736:	ce 01       	movw	r24, r28
    4738:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    473c:	88 23       	and	r24, r24
    473e:	71 f2       	breq	.-100    	; 0x46dc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4740:	61 e0       	ldi	r22, 0x01	; 1
    4742:	ce 01       	movw	r24, r28
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	0c 94 47 23 	jmp	0x468e	; 0x468e <_ZN13Adafruit_FONA8HTTP_sslEb>
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	1f 91       	pop	r17
    4756:	0f 91       	pop	r16
    4758:	08 95       	ret

0000475a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
    4766:	ec 01       	movw	r28, r24
    4768:	79 01       	movw	r14, r18
    476a:	98 01       	movw	r18, r16
    476c:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    4770:	b7 01       	movw	r22, r14
    4772:	ce 01       	movw	r24, r28
    4774:	0e 96       	adiw	r24, 0x0e	; 14
    4776:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <strcmp_P>
    477a:	21 e0       	ldi	r18, 0x01	; 1
    477c:	89 2b       	or	r24, r25
    477e:	09 f0       	breq	.+2      	; 0x4782 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	82 2f       	mov	r24, r18
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	08 95       	ret

00004792 <_ZN13Adafruit_FONA10enableGPRSEb>:
    4792:	8f 92       	push	r8
    4794:	9f 92       	push	r9
    4796:	af 92       	push	r10
    4798:	bf 92       	push	r11
    479a:	cf 92       	push	r12
    479c:	df 92       	push	r13
    479e:	ef 92       	push	r14
    47a0:	ff 92       	push	r15
    47a2:	0f 93       	push	r16
    47a4:	1f 93       	push	r17
    47a6:	cf 93       	push	r28
    47a8:	df 93       	push	r29
    47aa:	ec 01       	movw	r28, r24
    47ac:	20 e2       	ldi	r18, 0x20	; 32
    47ae:	3e e4       	ldi	r19, 0x4E	; 78
    47b0:	66 23       	and	r22, r22
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    47b4:	0f c1       	rjmp	.+542    	; 0x49d4 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    47b6:	4f ee       	ldi	r20, 0xEF	; 239
    47b8:	56 e0       	ldi	r21, 0x06	; 6
    47ba:	64 ee       	ldi	r22, 0xE4	; 228
    47bc:	76 e0       	ldi	r23, 0x06	; 6
    47be:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    47c2:	7e 01       	movw	r14, r28
    47c4:	8a ee       	ldi	r24, 0xEA	; 234
    47c6:	e8 1a       	sub	r14, r24
    47c8:	8e ef       	ldi	r24, 0xFE	; 254
    47ca:	f8 0a       	sbc	r15, r24
    47cc:	f7 01       	movw	r30, r14
    47ce:	40 81       	ld	r20, Z
    47d0:	51 81       	ldd	r21, Z+1	; 0x01
    47d2:	20 e1       	ldi	r18, 0x10	; 16
    47d4:	37 e2       	ldi	r19, 0x27	; 39
    47d6:	69 ed       	ldi	r22, 0xD9	; 217
    47d8:	76 e0       	ldi	r23, 0x06	; 6
    47da:	ce 01       	movw	r24, r28
    47dc:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    47e0:	88 23       	and	r24, r24
    47e2:	09 f4       	brne	.+2      	; 0x47e6 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    47e4:	24 c1       	rjmp	.+584    	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    47e6:	f7 01       	movw	r30, r14
    47e8:	40 81       	ld	r20, Z
    47ea:	51 81       	ldd	r21, Z+1	; 0x01
    47ec:	20 e1       	ldi	r18, 0x10	; 16
    47ee:	37 e2       	ldi	r19, 0x27	; 39
    47f0:	6b eb       	ldi	r22, 0xBB	; 187
    47f2:	76 e0       	ldi	r23, 0x06	; 6
    47f4:	ce 01       	movw	r24, r28
    47f6:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    47fa:	88 23       	and	r24, r24
    47fc:	09 f4       	brne	.+2      	; 0x4800 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    47fe:	17 c1       	rjmp	.+558    	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4800:	4e 01       	movw	r8, r28
    4802:	f3 ef       	ldi	r31, 0xF3	; 243
    4804:	8f 1a       	sub	r8, r31
    4806:	fe ef       	ldi	r31, 0xFE	; 254
    4808:	9f 0a       	sbc	r9, r31
    480a:	f4 01       	movw	r30, r8
    480c:	40 81       	ld	r20, Z
    480e:	51 81       	ldd	r21, Z+1	; 0x01
    4810:	41 15       	cp	r20, r1
    4812:	51 05       	cpc	r21, r1
    4814:	a9 f4       	brne	.+42     	; 0x4840 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4816:	f7 01       	movw	r30, r14
    4818:	40 81       	ld	r20, Z
    481a:	51 81       	ldd	r21, Z+1	; 0x01
    481c:	20 e3       	ldi	r18, 0x30	; 48
    481e:	35 e7       	ldi	r19, 0x75	; 117
    4820:	66 e5       	ldi	r22, 0x56	; 86
    4822:	76 e0       	ldi	r23, 0x06	; 6
    4824:	ce 01       	movw	r24, r28
    4826:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    482a:	88 23       	and	r24, r24
    482c:	09 f4       	brne	.+2      	; 0x4830 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    482e:	ff c0       	rjmp	.+510    	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4830:	f7 01       	movw	r30, r14
    4832:	40 81       	ld	r20, Z
    4834:	51 81       	ldd	r21, Z+1	; 0x01
    4836:	20 e1       	ldi	r18, 0x10	; 16
    4838:	37 e2       	ldi	r19, 0x27	; 39
    483a:	6d e4       	ldi	r22, 0x4D	; 77
    483c:	76 e0       	ldi	r23, 0x06	; 6
    483e:	e8 c0       	rjmp	.+464    	; 0x4a10 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    4840:	f7 01       	movw	r30, r14
    4842:	20 81       	ld	r18, Z
    4844:	31 81       	ldd	r19, Z+1	; 0x01
    4846:	00 e1       	ldi	r16, 0x10	; 16
    4848:	17 e2       	ldi	r17, 0x27	; 39
    484a:	67 ea       	ldi	r22, 0xA7	; 167
    484c:	76 e0       	ldi	r23, 0x06	; 6
    484e:	ce 01       	movw	r24, r28
    4850:	0e 94 ad 23 	call	0x475a	; 0x475a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4854:	88 23       	and	r24, r24
    4856:	09 f4       	brne	.+2      	; 0x485a <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4858:	ea c0       	rjmp	.+468    	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    485a:	ce 01       	movw	r24, r28
    485c:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13Adafruit_FONA10flushInputEv>
    4860:	8e 01       	movw	r16, r28
    4862:	08 5e       	subi	r16, 0xE8	; 232
    4864:	1e 4f       	sbci	r17, 0xFE	; 254
    4866:	6d e9       	ldi	r22, 0x9D	; 157
    4868:	76 e0       	ldi	r23, 0x06	; 6
    486a:	f8 01       	movw	r30, r16
    486c:	80 81       	ld	r24, Z
    486e:	91 81       	ldd	r25, Z+1	; 0x01
    4870:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4874:	f4 01       	movw	r30, r8
    4876:	60 81       	ld	r22, Z
    4878:	71 81       	ldd	r23, Z+1	; 0x01
    487a:	f8 01       	movw	r30, r16
    487c:	80 81       	ld	r24, Z
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4884:	5e 01       	movw	r10, r28
    4886:	f1 ef       	ldi	r31, 0xF1	; 241
    4888:	af 1a       	sub	r10, r31
    488a:	fe ef       	ldi	r31, 0xFE	; 254
    488c:	bf 0a       	sbc	r11, r31
    488e:	f5 01       	movw	r30, r10
    4890:	80 81       	ld	r24, Z
    4892:	91 81       	ldd	r25, Z+1	; 0x01
    4894:	89 2b       	or	r24, r25
    4896:	79 f0       	breq	.+30     	; 0x48b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    4898:	6d e1       	ldi	r22, 0x1D	; 29
    489a:	73 e0       	ldi	r23, 0x03	; 3
    489c:	f8 01       	movw	r30, r16
    489e:	80 81       	ld	r24, Z
    48a0:	91 81       	ldd	r25, Z+1	; 0x01
    48a2:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    48a6:	f5 01       	movw	r30, r10
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	f8 01       	movw	r30, r16
    48ae:	80 81       	ld	r24, Z
    48b0:	91 81       	ldd	r25, Z+1	; 0x01
    48b2:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    48b6:	6e 01       	movw	r12, r28
    48b8:	ff ee       	ldi	r31, 0xEF	; 239
    48ba:	cf 1a       	sub	r12, r31
    48bc:	fe ef       	ldi	r31, 0xFE	; 254
    48be:	df 0a       	sbc	r13, r31
    48c0:	f6 01       	movw	r30, r12
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	89 2b       	or	r24, r25
    48c8:	79 f0       	breq	.+30     	; 0x48e8 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    48ca:	6d e1       	ldi	r22, 0x1D	; 29
    48cc:	73 e0       	ldi	r23, 0x03	; 3
    48ce:	f8 01       	movw	r30, r16
    48d0:	80 81       	ld	r24, Z
    48d2:	91 81       	ldd	r25, Z+1	; 0x01
    48d4:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    48d8:	f6 01       	movw	r30, r12
    48da:	60 81       	ld	r22, Z
    48dc:	71 81       	ldd	r23, Z+1	; 0x01
    48de:	f8 01       	movw	r30, r16
    48e0:	80 81       	ld	r24, Z
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    48e8:	6f e1       	ldi	r22, 0x1F	; 31
    48ea:	73 e0       	ldi	r23, 0x03	; 3
    48ec:	f8 01       	movw	r30, r16
    48ee:	80 81       	ld	r24, Z
    48f0:	91 81       	ldd	r25, Z+1	; 0x01
    48f2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    48f6:	66 e9       	ldi	r22, 0x96	; 150
    48f8:	76 e0       	ldi	r23, 0x06	; 6
    48fa:	80 e6       	ldi	r24, 0x60	; 96
    48fc:	97 e0       	ldi	r25, 0x07	; 7
    48fe:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4902:	6c e8       	ldi	r22, 0x8C	; 140
    4904:	76 e0       	ldi	r23, 0x06	; 6
    4906:	80 e6       	ldi	r24, 0x60	; 96
    4908:	97 e0       	ldi	r25, 0x07	; 7
    490a:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    490e:	f4 01       	movw	r30, r8
    4910:	60 81       	ld	r22, Z
    4912:	71 81       	ldd	r23, Z+1	; 0x01
    4914:	80 e6       	ldi	r24, 0x60	; 96
    4916:	97 e0       	ldi	r25, 0x07	; 7
    4918:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    491c:	f5 01       	movw	r30, r10
    491e:	80 81       	ld	r24, Z
    4920:	91 81       	ldd	r25, Z+1	; 0x01
    4922:	89 2b       	or	r24, r25
    4924:	69 f0       	breq	.+26     	; 0x4940 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    4926:	6d e1       	ldi	r22, 0x1D	; 29
    4928:	73 e0       	ldi	r23, 0x03	; 3
    492a:	80 e6       	ldi	r24, 0x60	; 96
    492c:	97 e0       	ldi	r25, 0x07	; 7
    492e:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    4932:	f5 01       	movw	r30, r10
    4934:	60 81       	ld	r22, Z
    4936:	71 81       	ldd	r23, Z+1	; 0x01
    4938:	80 e6       	ldi	r24, 0x60	; 96
    493a:	97 e0       	ldi	r25, 0x07	; 7
    493c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4940:	f6 01       	movw	r30, r12
    4942:	80 81       	ld	r24, Z
    4944:	91 81       	ldd	r25, Z+1	; 0x01
    4946:	89 2b       	or	r24, r25
    4948:	69 f0       	breq	.+26     	; 0x4964 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    494a:	6d e1       	ldi	r22, 0x1D	; 29
    494c:	73 e0       	ldi	r23, 0x03	; 3
    494e:	80 e6       	ldi	r24, 0x60	; 96
    4950:	97 e0       	ldi	r25, 0x07	; 7
    4952:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEPKc>
    4956:	f6 01       	movw	r30, r12
    4958:	60 81       	ld	r22, Z
    495a:	71 81       	ldd	r23, Z+1	; 0x01
    495c:	80 e6       	ldi	r24, 0x60	; 96
    495e:	97 e0       	ldi	r25, 0x07	; 7
    4960:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4964:	6f e1       	ldi	r22, 0x1F	; 31
    4966:	73 e0       	ldi	r23, 0x03	; 3
    4968:	80 e6       	ldi	r24, 0x60	; 96
    496a:	97 e0       	ldi	r25, 0x07	; 7
    496c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPKc>
    4970:	f7 01       	movw	r30, r14
    4972:	60 81       	ld	r22, Z
    4974:	71 81       	ldd	r23, Z+1	; 0x01
    4976:	40 e1       	ldi	r20, 0x10	; 16
    4978:	57 e2       	ldi	r21, 0x27	; 39
    497a:	ce 01       	movw	r24, r28
    497c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    4980:	88 23       	and	r24, r24
    4982:	09 f4       	brne	.+2      	; 0x4986 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    4984:	54 c0       	rjmp	.+168    	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4986:	f5 01       	movw	r30, r10
    4988:	40 81       	ld	r20, Z
    498a:	51 81       	ldd	r21, Z+1	; 0x01
    498c:	41 15       	cp	r20, r1
    498e:	51 05       	cpc	r21, r1
    4990:	39 f4       	brne	.+14     	; 0x49a0 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    4992:	f6 01       	movw	r30, r12
    4994:	40 81       	ld	r20, Z
    4996:	51 81       	ldd	r21, Z+1	; 0x01
    4998:	41 15       	cp	r20, r1
    499a:	51 05       	cpc	r21, r1
    499c:	71 f4       	brne	.+28     	; 0x49ba <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    499e:	3b cf       	rjmp	.-394    	; 0x4816 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    49a0:	f7 01       	movw	r30, r14
    49a2:	20 81       	ld	r18, Z
    49a4:	31 81       	ldd	r19, Z+1	; 0x01
    49a6:	00 e1       	ldi	r16, 0x10	; 16
    49a8:	17 e2       	ldi	r17, 0x27	; 39
    49aa:	67 e7       	ldi	r22, 0x77	; 119
    49ac:	76 e0       	ldi	r23, 0x06	; 6
    49ae:	ce 01       	movw	r24, r28
    49b0:	0e 94 ad 23 	call	0x475a	; 0x475a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    49b4:	81 11       	cpse	r24, r1
    49b6:	ed cf       	rjmp	.-38     	; 0x4992 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    49b8:	3a c0       	rjmp	.+116    	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    49ba:	f7 01       	movw	r30, r14
    49bc:	20 81       	ld	r18, Z
    49be:	31 81       	ldd	r19, Z+1	; 0x01
    49c0:	00 e1       	ldi	r16, 0x10	; 16
    49c2:	17 e2       	ldi	r17, 0x27	; 39
    49c4:	63 e6       	ldi	r22, 0x63	; 99
    49c6:	76 e0       	ldi	r23, 0x06	; 6
    49c8:	ce 01       	movw	r24, r28
    49ca:	0e 94 ad 23 	call	0x475a	; 0x475a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    49ce:	81 11       	cpse	r24, r1
    49d0:	22 cf       	rjmp	.-444    	; 0x4816 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    49d2:	2d c0       	rjmp	.+90     	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    49d4:	45 e4       	ldi	r20, 0x45	; 69
    49d6:	56 e0       	ldi	r21, 0x06	; 6
    49d8:	6a e3       	ldi	r22, 0x3A	; 58
    49da:	76 e0       	ldi	r23, 0x06	; 6
    49dc:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49e0:	88 23       	and	r24, r24
    49e2:	29 f1       	breq	.+74     	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    49e4:	8e 01       	movw	r16, r28
    49e6:	0a 5e       	subi	r16, 0xEA	; 234
    49e8:	1e 4f       	sbci	r17, 0xFE	; 254
    49ea:	f8 01       	movw	r30, r16
    49ec:	40 81       	ld	r20, Z
    49ee:	51 81       	ldd	r21, Z+1	; 0x01
    49f0:	20 e1       	ldi	r18, 0x10	; 16
    49f2:	37 e2       	ldi	r19, 0x27	; 39
    49f4:	6d e2       	ldi	r22, 0x2D	; 45
    49f6:	76 e0       	ldi	r23, 0x06	; 6
    49f8:	ce 01       	movw	r24, r28
    49fa:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49fe:	88 23       	and	r24, r24
    4a00:	b1 f0       	breq	.+44     	; 0x4a2e <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4a02:	f8 01       	movw	r30, r16
    4a04:	40 81       	ld	r20, Z
    4a06:	51 81       	ldd	r21, Z+1	; 0x01
    4a08:	20 e1       	ldi	r18, 0x10	; 16
    4a0a:	37 e2       	ldi	r19, 0x27	; 39
    4a0c:	62 e2       	ldi	r22, 0x22	; 34
    4a0e:	76 e0       	ldi	r23, 0x06	; 6
    4a10:	ce 01       	movw	r24, r28
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	ff 90       	pop	r15
    4a1c:	ef 90       	pop	r14
    4a1e:	df 90       	pop	r13
    4a20:	cf 90       	pop	r12
    4a22:	bf 90       	pop	r11
    4a24:	af 90       	pop	r10
    4a26:	9f 90       	pop	r9
    4a28:	8f 90       	pop	r8
    4a2a:	0c 94 99 20 	jmp	0x4132	; 0x4132 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	ff 90       	pop	r15
    4a3a:	ef 90       	pop	r14
    4a3c:	df 90       	pop	r13
    4a3e:	cf 90       	pop	r12
    4a40:	bf 90       	pop	r11
    4a42:	af 90       	pop	r10
    4a44:	9f 90       	pop	r9
    4a46:	8f 90       	pop	r8
    4a48:	08 95       	ret

00004a4a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    4a4a:	af 92       	push	r10
    4a4c:	bf 92       	push	r11
    4a4e:	cf 92       	push	r12
    4a50:	df 92       	push	r13
    4a52:	ef 92       	push	r14
    4a54:	ff 92       	push	r15
    4a56:	0f 93       	push	r16
    4a58:	cf 93       	push	r28
    4a5a:	df 93       	push	r29
    4a5c:	5b 01       	movw	r10, r22
    4a5e:	6a 01       	movw	r12, r20
    4a60:	e2 2e       	mov	r14, r18
    4a62:	0e 96       	adiw	r24, 0x0e	; 14
    4a64:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <strstr_P>
    4a68:	ec 01       	movw	r28, r24
    4a6a:	89 2b       	or	r24, r25
    4a6c:	c1 f0       	breq	.+48     	; 0x4a9e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    4a6e:	c5 01       	movw	r24, r10
    4a70:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <__strlen_P>
    4a74:	8c 0f       	add	r24, r28
    4a76:	9d 1f       	adc	r25, r29
    4a78:	c0 e0       	ldi	r28, 0x00	; 0
    4a7a:	f1 2c       	mov	r15, r1
    4a7c:	c0 17       	cp	r28, r16
    4a7e:	41 f0       	breq	.+16     	; 0x4a90 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    4a80:	b7 01       	movw	r22, r14
    4a82:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <strchr>
    4a86:	00 97       	sbiw	r24, 0x00	; 0
    4a88:	51 f0       	breq	.+20     	; 0x4a9e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    4a8a:	01 96       	adiw	r24, 0x01	; 1
    4a8c:	cf 5f       	subi	r28, 0xFF	; 255
    4a8e:	f6 cf       	rjmp	.-20     	; 0x4a7c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    4a90:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <atoi>
    4a94:	f6 01       	movw	r30, r12
    4a96:	91 83       	std	Z+1, r25	; 0x01
    4a98:	80 83       	st	Z, r24
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	01 c0       	rjmp	.+2      	; 0x4aa0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	0f 91       	pop	r16
    4aa6:	ff 90       	pop	r15
    4aa8:	ef 90       	pop	r14
    4aaa:	df 90       	pop	r13
    4aac:	cf 90       	pop	r12
    4aae:	bf 90       	pop	r11
    4ab0:	af 90       	pop	r10
    4ab2:	08 95       	ret

00004ab4 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    4ab4:	ef 92       	push	r14
    4ab6:	ff 92       	push	r15
    4ab8:	0f 93       	push	r16
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	ec 01       	movw	r28, r24
    4ac0:	7b 01       	movw	r14, r22
    4ac2:	44 ef       	ldi	r20, 0xF4	; 244
    4ac4:	51 e0       	ldi	r21, 0x01	; 1
    4ac6:	61 e8       	ldi	r22, 0x81	; 129
    4ac8:	75 e0       	ldi	r23, 0x05	; 5
    4aca:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4ace:	00 e0       	ldi	r16, 0x00	; 0
    4ad0:	2c e2       	ldi	r18, 0x2C	; 44
    4ad2:	a7 01       	movw	r20, r14
    4ad4:	66 e7       	ldi	r22, 0x76	; 118
    4ad6:	75 e0       	ldi	r23, 0x05	; 5
    4ad8:	ce 01       	movw	r24, r28
    4ada:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	0f 91       	pop	r16
    4ae4:	ff 90       	pop	r15
    4ae6:	ef 90       	pop	r14
    4ae8:	08 95       	ret

00004aea <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    4aea:	4f 92       	push	r4
    4aec:	5f 92       	push	r5
    4aee:	6f 92       	push	r6
    4af0:	7f 92       	push	r7
    4af2:	af 92       	push	r10
    4af4:	bf 92       	push	r11
    4af6:	cf 92       	push	r12
    4af8:	df 92       	push	r13
    4afa:	ef 92       	push	r14
    4afc:	ff 92       	push	r15
    4afe:	0f 93       	push	r16
    4b00:	1f 93       	push	r17
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	ec 01       	movw	r28, r24
    4b08:	5a 01       	movw	r10, r20
    4b0a:	69 01       	movw	r12, r18
    4b0c:	27 01       	movw	r4, r14
    4b0e:	38 01       	movw	r6, r16
    4b10:	fc 01       	movw	r30, r24
    4b12:	ea 5e       	subi	r30, 0xEA	; 234
    4b14:	fe 4f       	sbci	r31, 0xFE	; 254
    4b16:	00 81       	ld	r16, Z
    4b18:	11 81       	ldd	r17, Z+1	; 0x01
    4b1a:	26 2f       	mov	r18, r22
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	40 e0       	ldi	r20, 0x00	; 0
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	84 ef       	ldi	r24, 0xF4	; 244
    4b24:	e8 2e       	mov	r14, r24
    4b26:	ff 24       	eor	r15, r15
    4b28:	f3 94       	inc	r15
    4b2a:	67 ea       	ldi	r22, 0xA7	; 167
    4b2c:	75 e0       	ldi	r23, 0x05	; 5
    4b2e:	ce 01       	movw	r24, r28
    4b30:	0e 94 27 23 	call	0x464e	; 0x464e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4b34:	81 11       	cpse	r24, r1
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	17 c0       	rjmp	.+46     	; 0x4b6a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    4b3c:	40 e0       	ldi	r20, 0x00	; 0
    4b3e:	b2 01       	movw	r22, r4
    4b40:	ce 01       	movw	r24, r28
    4b42:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    4b46:	01 e0       	ldi	r16, 0x01	; 1
    4b48:	2c e2       	ldi	r18, 0x2C	; 44
    4b4a:	a5 01       	movw	r20, r10
    4b4c:	6a e9       	ldi	r22, 0x9A	; 154
    4b4e:	75 e0       	ldi	r23, 0x05	; 5
    4b50:	ce 01       	movw	r24, r28
    4b52:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4b56:	88 23       	and	r24, r24
    4b58:	79 f3       	breq	.-34     	; 0x4b38 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    4b5a:	02 e0       	ldi	r16, 0x02	; 2
    4b5c:	2c e2       	ldi	r18, 0x2C	; 44
    4b5e:	a6 01       	movw	r20, r12
    4b60:	6d e8       	ldi	r22, 0x8D	; 141
    4b62:	75 e0       	ldi	r23, 0x05	; 5
    4b64:	ce 01       	movw	r24, r28
    4b66:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4b6a:	df 91       	pop	r29
    4b6c:	cf 91       	pop	r28
    4b6e:	1f 91       	pop	r17
    4b70:	0f 91       	pop	r16
    4b72:	ff 90       	pop	r15
    4b74:	ef 90       	pop	r14
    4b76:	df 90       	pop	r13
    4b78:	cf 90       	pop	r12
    4b7a:	bf 90       	pop	r11
    4b7c:	af 90       	pop	r10
    4b7e:	7f 90       	pop	r7
    4b80:	6f 90       	pop	r6
    4b82:	5f 90       	pop	r5
    4b84:	4f 90       	pop	r4
    4b86:	08 95       	ret

00004b88 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    4b88:	4f 92       	push	r4
    4b8a:	5f 92       	push	r5
    4b8c:	6f 92       	push	r6
    4b8e:	7f 92       	push	r7
    4b90:	8f 92       	push	r8
    4b92:	9f 92       	push	r9
    4b94:	af 92       	push	r10
    4b96:	bf 92       	push	r11
    4b98:	cf 92       	push	r12
    4b9a:	df 92       	push	r13
    4b9c:	ef 92       	push	r14
    4b9e:	ff 92       	push	r15
    4ba0:	0f 93       	push	r16
    4ba2:	1f 93       	push	r17
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	ec 01       	movw	r28, r24
    4baa:	2a 01       	movw	r4, r20
    4bac:	39 01       	movw	r6, r18
    4bae:	48 01       	movw	r8, r16
    4bb0:	57 01       	movw	r10, r14
    4bb2:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    4bb6:	88 23       	and	r24, r24
    4bb8:	09 f4       	brne	.+2      	; 0x4bbc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    4bba:	71 c0       	rjmp	.+226    	; 0x4c9e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4bbc:	a2 01       	movw	r20, r4
    4bbe:	62 e6       	ldi	r22, 0x62	; 98
    4bc0:	75 e0       	ldi	r23, 0x05	; 5
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4bc8:	88 23       	and	r24, r24
    4bca:	09 f4       	brne	.+2      	; 0x4bce <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    4bcc:	68 c0       	rjmp	.+208    	; 0x4c9e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4bce:	a8 01       	movw	r20, r16
    4bd0:	60 e0       	ldi	r22, 0x00	; 0
    4bd2:	70 e0       	ldi	r23, 0x00	; 0
    4bd4:	00 e1       	ldi	r16, 0x10	; 16
    4bd6:	17 e2       	ldi	r17, 0x27	; 39
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	ce 01       	movw	r24, r28
    4bde:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <_ZN13Adafruit_FONA9HTTP_dataEmm>
    4be2:	88 23       	and	r24, r24
    4be4:	09 f4       	brne	.+2      	; 0x4be8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    4be6:	5b c0       	rjmp	.+182    	; 0x4c9e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4be8:	fe 01       	movw	r30, r28
    4bea:	e8 5e       	subi	r30, 0xE8	; 232
    4bec:	fe 4f       	sbci	r31, 0xFE	; 254
    4bee:	80 81       	ld	r24, Z
    4bf0:	91 81       	ldd	r25, Z+1	; 0x01
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	ed 91       	ld	r30, X+
    4bf6:	fc 91       	ld	r31, X
    4bf8:	02 80       	ldd	r0, Z+2	; 0x02
    4bfa:	f3 81       	ldd	r31, Z+3	; 0x03
    4bfc:	e0 2d       	mov	r30, r0
    4bfe:	a4 01       	movw	r20, r8
    4c00:	b3 01       	movw	r22, r6
    4c02:	09 95       	icall
    4c04:	fe 01       	movw	r30, r28
    4c06:	ea 5e       	subi	r30, 0xEA	; 234
    4c08:	fe 4f       	sbci	r31, 0xFE	; 254
    4c0a:	60 81       	ld	r22, Z
    4c0c:	71 81       	ldd	r23, Z+1	; 0x01
    4c0e:	40 e1       	ldi	r20, 0x10	; 16
    4c10:	57 e2       	ldi	r21, 0x27	; 39
    4c12:	ce 01       	movw	r24, r28
    4c14:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    4c18:	88 23       	and	r24, r24
    4c1a:	09 f4       	brne	.+2      	; 0x4c1e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    4c1c:	40 c0       	rjmp	.+128    	; 0x4c9e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4c1e:	10 e1       	ldi	r17, 0x10	; 16
    4c20:	e1 2e       	mov	r14, r17
    4c22:	17 e2       	ldi	r17, 0x27	; 39
    4c24:	f1 2e       	mov	r15, r17
    4c26:	00 e0       	ldi	r16, 0x00	; 0
    4c28:	10 e0       	ldi	r17, 0x00	; 0
    4c2a:	96 01       	movw	r18, r12
    4c2c:	a5 01       	movw	r20, r10
    4c2e:	61 e0       	ldi	r22, 0x01	; 1
    4c30:	ce 01       	movw	r24, r28
    4c32:	0e 94 75 25 	call	0x4aea	; 0x4aea <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    4c36:	88 23       	and	r24, r24
    4c38:	91 f1       	breq	.+100    	; 0x4c9e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4c3a:	69 e5       	ldi	r22, 0x59	; 89
    4c3c:	75 e0       	ldi	r23, 0x05	; 5
    4c3e:	80 e6       	ldi	r24, 0x60	; 96
    4c40:	97 e0       	ldi	r25, 0x07	; 7
    4c42:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4c46:	f5 01       	movw	r30, r10
    4c48:	60 81       	ld	r22, Z
    4c4a:	71 81       	ldd	r23, Z+1	; 0x01
    4c4c:	4a e0       	ldi	r20, 0x0A	; 10
    4c4e:	50 e0       	ldi	r21, 0x00	; 0
    4c50:	80 e6       	ldi	r24, 0x60	; 96
    4c52:	97 e0       	ldi	r25, 0x07	; 7
    4c54:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN5Print7printlnEji>
    4c58:	63 e5       	ldi	r22, 0x53	; 83
    4c5a:	75 e0       	ldi	r23, 0x05	; 5
    4c5c:	80 e6       	ldi	r24, 0x60	; 96
    4c5e:	97 e0       	ldi	r25, 0x07	; 7
    4c60:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    4c64:	d6 01       	movw	r26, r12
    4c66:	6d 91       	ld	r22, X+
    4c68:	7c 91       	ld	r23, X
    4c6a:	4a e0       	ldi	r20, 0x0A	; 10
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	80 e6       	ldi	r24, 0x60	; 96
    4c70:	97 e0       	ldi	r25, 0x07	; 7
    4c72:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN5Print7printlnEji>
    4c76:	b6 01       	movw	r22, r12
    4c78:	ce 01       	movw	r24, r28
    4c7a:	df 91       	pop	r29
    4c7c:	cf 91       	pop	r28
    4c7e:	1f 91       	pop	r17
    4c80:	0f 91       	pop	r16
    4c82:	ff 90       	pop	r15
    4c84:	ef 90       	pop	r14
    4c86:	df 90       	pop	r13
    4c88:	cf 90       	pop	r12
    4c8a:	bf 90       	pop	r11
    4c8c:	af 90       	pop	r10
    4c8e:	9f 90       	pop	r9
    4c90:	8f 90       	pop	r8
    4c92:	7f 90       	pop	r7
    4c94:	6f 90       	pop	r6
    4c96:	5f 90       	pop	r5
    4c98:	4f 90       	pop	r4
    4c9a:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	1f 91       	pop	r17
    4ca6:	0f 91       	pop	r16
    4ca8:	ff 90       	pop	r15
    4caa:	ef 90       	pop	r14
    4cac:	df 90       	pop	r13
    4cae:	cf 90       	pop	r12
    4cb0:	bf 90       	pop	r11
    4cb2:	af 90       	pop	r10
    4cb4:	9f 90       	pop	r9
    4cb6:	8f 90       	pop	r8
    4cb8:	7f 90       	pop	r7
    4cba:	6f 90       	pop	r6
    4cbc:	5f 90       	pop	r5
    4cbe:	4f 90       	pop	r4
    4cc0:	08 95       	ret

00004cc2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    4cc2:	af 92       	push	r10
    4cc4:	bf 92       	push	r11
    4cc6:	cf 92       	push	r12
    4cc8:	df 92       	push	r13
    4cca:	ef 92       	push	r14
    4ccc:	0f 93       	push	r16
    4cce:	1f 93       	push	r17
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
    4cd4:	ec 01       	movw	r28, r24
    4cd6:	6a 01       	movw	r12, r20
    4cd8:	59 01       	movw	r10, r18
    4cda:	10 2f       	mov	r17, r16
    4cdc:	0e 2d       	mov	r16, r14
    4cde:	44 ef       	ldi	r20, 0xF4	; 244
    4ce0:	51 e0       	ldi	r21, 0x01	; 1
    4ce2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4ce6:	21 2f       	mov	r18, r17
    4ce8:	a5 01       	movw	r20, r10
    4cea:	b6 01       	movw	r22, r12
    4cec:	ce 01       	movw	r24, r28
    4cee:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4cf2:	18 2f       	mov	r17, r24
    4cf4:	88 23       	and	r24, r24
    4cf6:	31 f0       	breq	.+12     	; 0x4d04 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    4cf8:	40 e0       	ldi	r20, 0x00	; 0
    4cfa:	64 ef       	ldi	r22, 0xF4	; 244
    4cfc:	71 e0       	ldi	r23, 0x01	; 1
    4cfe:	ce 01       	movw	r24, r28
    4d00:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN13Adafruit_FONA8readlineEjb>
    4d04:	81 2f       	mov	r24, r17
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	1f 91       	pop	r17
    4d0c:	0f 91       	pop	r16
    4d0e:	ef 90       	pop	r14
    4d10:	df 90       	pop	r13
    4d12:	cf 90       	pop	r12
    4d14:	bf 90       	pop	r11
    4d16:	af 90       	pop	r10
    4d18:	08 95       	ret

00004d1a <_ZN13Adafruit_FONA14getBattPercentEPj>:
    4d1a:	ef 92       	push	r14
    4d1c:	0f 93       	push	r16
    4d1e:	9b 01       	movw	r18, r22
    4d20:	ee 24       	eor	r14, r14
    4d22:	e3 94       	inc	r14
    4d24:	0c e2       	ldi	r16, 0x2C	; 44
    4d26:	4d e2       	ldi	r20, 0x2D	; 45
    4d28:	57 e0       	ldi	r21, 0x07	; 7
    4d2a:	66 e2       	ldi	r22, 0x26	; 38
    4d2c:	77 e0       	ldi	r23, 0x07	; 7
    4d2e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    4d32:	0f 91       	pop	r16
    4d34:	ef 90       	pop	r14
    4d36:	08 95       	ret

00004d38 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    4d38:	ef 92       	push	r14
    4d3a:	0f 93       	push	r16
    4d3c:	cf 93       	push	r28
    4d3e:	df 93       	push	r29
    4d40:	00 d0       	rcall	.+0      	; 0x4d42 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    4d42:	cd b7       	in	r28, 0x3d	; 61
    4d44:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    4d46:	ee 24       	eor	r14, r14
    4d48:	e3 94       	inc	r14
    4d4a:	0c e2       	ldi	r16, 0x2C	; 44
    4d4c:	9e 01       	movw	r18, r28
    4d4e:	2f 5f       	subi	r18, 0xFF	; 255
    4d50:	3f 4f       	sbci	r19, 0xFF	; 255
    4d52:	4e e1       	ldi	r20, 0x1E	; 30
    4d54:	57 e0       	ldi	r21, 0x07	; 7
    4d56:	65 e1       	ldi	r22, 0x15	; 21
    4d58:	77 e0       	ldi	r23, 0x07	; 7
    4d5a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    4d5e:	88 23       	and	r24, r24
    4d60:	11 f0       	breq	.+4      	; 0x4d66 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    4d62:	89 81       	ldd	r24, Y+1	; 0x01
    4d64:	01 c0       	rjmp	.+2      	; 0x4d68 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    4d66:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    4d68:	0f 90       	pop	r0
    4d6a:	0f 90       	pop	r0
    4d6c:	df 91       	pop	r29
    4d6e:	cf 91       	pop	r28
    4d70:	0f 91       	pop	r16
    4d72:	ef 90       	pop	r14
    4d74:	08 95       	ret

00004d76 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    4d76:	ef 92       	push	r14
    4d78:	0f 93       	push	r16
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	00 d0       	rcall	.+0      	; 0x4d80 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    4d80:	cd b7       	in	r28, 0x3d	; 61
    4d82:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    4d84:	e1 2c       	mov	r14, r1
    4d86:	0c e2       	ldi	r16, 0x2C	; 44
    4d88:	9e 01       	movw	r18, r28
    4d8a:	2f 5f       	subi	r18, 0xFF	; 255
    4d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8e:	4e e0       	ldi	r20, 0x0E	; 14
    4d90:	57 e0       	ldi	r21, 0x07	; 7
    4d92:	67 e0       	ldi	r22, 0x07	; 7
    4d94:	77 e0       	ldi	r23, 0x07	; 7
    4d96:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    4d9a:	88 23       	and	r24, r24
    4d9c:	11 f0       	breq	.+4      	; 0x4da2 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    4d9e:	89 81       	ldd	r24, Y+1	; 0x01
    4da0:	01 c0       	rjmp	.+2      	; 0x4da4 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    4da2:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    4da4:	0f 90       	pop	r0
    4da6:	0f 90       	pop	r0
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	0f 91       	pop	r16
    4dae:	ef 90       	pop	r14
    4db0:	08 95       	ret

00004db2 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    4db2:	20 91 48 08 	lds	r18, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4db6:	30 91 49 08 	lds	r19, 0x0849	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4dba:	28 17       	cp	r18, r24
    4dbc:	39 07       	cpc	r19, r25
    4dbe:	b9 f4       	brne	.+46     	; 0x4dee <_ZN14SoftwareSerial4readEv+0x3c>
    4dc0:	90 91 06 08 	lds	r25, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4dc4:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4dc8:	98 17       	cp	r25, r24
    4dca:	89 f0       	breq	.+34     	; 0x4dee <_ZN14SoftwareSerial4readEv+0x3c>
    4dcc:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4dd0:	f0 e0       	ldi	r31, 0x00	; 0
    4dd2:	e8 5f       	subi	r30, 0xF8	; 248
    4dd4:	f7 4f       	sbci	r31, 0xF7	; 247
    4dd6:	80 81       	ld	r24, Z
    4dd8:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	2f 5f       	subi	r18, 0xFF	; 255
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	2f 73       	andi	r18, 0x3F	; 63
    4de4:	33 27       	eor	r19, r19
    4de6:	20 93 06 08 	sts	0x0806, r18	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	08 95       	ret
    4dee:	8f ef       	ldi	r24, 0xFF	; 255
    4df0:	9f ef       	ldi	r25, 0xFF	; 255
    4df2:	08 95       	ret

00004df4 <_ZN14SoftwareSerial5writeEh>:
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	5c 96       	adiw	r26, 0x1c	; 28
    4dfe:	8d 91       	ld	r24, X+
    4e00:	9c 91       	ld	r25, X
    4e02:	5d 97       	sbiw	r26, 0x1d	; 29
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	39 f4       	brne	.+14     	; 0x4e16 <_ZN14SoftwareSerial5writeEh+0x22>
    4e08:	21 e0       	ldi	r18, 0x01	; 1
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	13 96       	adiw	r26, 0x03	; 3
    4e0e:	3c 93       	st	X, r19
    4e10:	2e 93       	st	-X, r18
    4e12:	12 97       	sbiw	r26, 0x02	; 2
    4e14:	3b c0       	rjmp	.+118    	; 0x4e8c <_ZN14SoftwareSerial5writeEh+0x98>
    4e16:	51 96       	adiw	r26, 0x11	; 17
    4e18:	ed 91       	ld	r30, X+
    4e1a:	fc 91       	ld	r31, X
    4e1c:	52 97       	sbiw	r26, 0x12	; 18
    4e1e:	50 96       	adiw	r26, 0x10	; 16
    4e20:	2c 91       	ld	r18, X
    4e22:	50 97       	sbiw	r26, 0x10	; 16
    4e24:	32 2f       	mov	r19, r18
    4e26:	30 95       	com	r19
    4e28:	1f b7       	in	r17, 0x3f	; 63
    4e2a:	5e 96       	adiw	r26, 0x1e	; 30
    4e2c:	4c 91       	ld	r20, X
    4e2e:	5e 97       	sbiw	r26, 0x1e	; 30
    4e30:	74 2f       	mov	r23, r20
    4e32:	72 70       	andi	r23, 0x02	; 2
    4e34:	41 fd       	sbrc	r20, 1
    4e36:	60 95       	com	r22
    4e38:	f8 94       	cli
    4e3a:	40 81       	ld	r20, Z
    4e3c:	77 23       	and	r23, r23
    4e3e:	11 f0       	breq	.+4      	; 0x4e44 <_ZN14SoftwareSerial5writeEh+0x50>
    4e40:	42 2b       	or	r20, r18
    4e42:	01 c0       	rjmp	.+2      	; 0x4e46 <_ZN14SoftwareSerial5writeEh+0x52>
    4e44:	43 23       	and	r20, r19
    4e46:	40 83       	st	Z, r20
    4e48:	ec 01       	movw	r28, r24
    4e4a:	21 97       	sbiw	r28, 0x01	; 1
    4e4c:	f1 f7       	brne	.-4      	; 0x4e4a <_ZN14SoftwareSerial5writeEh+0x56>
    4e4e:	48 e0       	ldi	r20, 0x08	; 8
    4e50:	50 81       	ld	r21, Z
    4e52:	60 ff       	sbrs	r22, 0
    4e54:	02 c0       	rjmp	.+4      	; 0x4e5a <_ZN14SoftwareSerial5writeEh+0x66>
    4e56:	52 2b       	or	r21, r18
    4e58:	01 c0       	rjmp	.+2      	; 0x4e5c <_ZN14SoftwareSerial5writeEh+0x68>
    4e5a:	53 23       	and	r21, r19
    4e5c:	50 83       	st	Z, r21
    4e5e:	ec 01       	movw	r28, r24
    4e60:	21 97       	sbiw	r28, 0x01	; 1
    4e62:	f1 f7       	brne	.-4      	; 0x4e60 <_ZN14SoftwareSerial5writeEh+0x6c>
    4e64:	66 95       	lsr	r22
    4e66:	41 50       	subi	r20, 0x01	; 1
    4e68:	99 f7       	brne	.-26     	; 0x4e50 <_ZN14SoftwareSerial5writeEh+0x5c>
    4e6a:	80 81       	ld	r24, Z
    4e6c:	77 23       	and	r23, r23
    4e6e:	19 f0       	breq	.+6      	; 0x4e76 <_ZN14SoftwareSerial5writeEh+0x82>
    4e70:	83 23       	and	r24, r19
    4e72:	80 83       	st	Z, r24
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <_ZN14SoftwareSerial5writeEh+0x86>
    4e76:	28 2b       	or	r18, r24
    4e78:	20 83       	st	Z, r18
    4e7a:	1f bf       	out	0x3f, r17	; 63
    4e7c:	5c 96       	adiw	r26, 0x1c	; 28
    4e7e:	8d 91       	ld	r24, X+
    4e80:	9c 91       	ld	r25, X
    4e82:	5d 97       	sbiw	r26, 0x1d	; 29
    4e84:	01 97       	sbiw	r24, 0x01	; 1
    4e86:	f1 f7       	brne	.-4      	; 0x4e84 <_ZN14SoftwareSerial5writeEh+0x90>
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	df 91       	pop	r29
    4e8e:	cf 91       	pop	r28
    4e90:	1f 91       	pop	r17
    4e92:	08 95       	ret

00004e94 <_ZN14SoftwareSerial5flushEv>:
    4e94:	08 95       	ret

00004e96 <_ZN14SoftwareSerial4peekEv>:
    4e96:	20 91 48 08 	lds	r18, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4e9a:	30 91 49 08 	lds	r19, 0x0849	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4e9e:	28 17       	cp	r18, r24
    4ea0:	39 07       	cpc	r19, r25
    4ea2:	71 f4       	brne	.+28     	; 0x4ec0 <_ZN14SoftwareSerial4peekEv+0x2a>
    4ea4:	90 91 06 08 	lds	r25, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4ea8:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4eac:	98 17       	cp	r25, r24
    4eae:	41 f0       	breq	.+16     	; 0x4ec0 <_ZN14SoftwareSerial4peekEv+0x2a>
    4eb0:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4eb4:	f0 e0       	ldi	r31, 0x00	; 0
    4eb6:	e8 5f       	subi	r30, 0xF8	; 248
    4eb8:	f7 4f       	sbci	r31, 0xF7	; 247
    4eba:	80 81       	ld	r24, Z
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	08 95       	ret
    4ec0:	8f ef       	ldi	r24, 0xFF	; 255
    4ec2:	9f ef       	ldi	r25, 0xFF	; 255
    4ec4:	08 95       	ret

00004ec6 <_ZN14SoftwareSerial9availableEv>:
    4ec6:	20 91 48 08 	lds	r18, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4eca:	30 91 49 08 	lds	r19, 0x0849	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4ece:	28 17       	cp	r18, r24
    4ed0:	39 07       	cpc	r19, r25
    4ed2:	71 f4       	brne	.+28     	; 0x4ef0 <_ZN14SoftwareSerial9availableEv+0x2a>
    4ed4:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4ed8:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	80 5c       	subi	r24, 0xC0	; 192
    4ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee2:	82 1b       	sub	r24, r18
    4ee4:	91 09       	sbc	r25, r1
    4ee6:	60 e4       	ldi	r22, 0x40	; 64
    4ee8:	70 e0       	ldi	r23, 0x00	; 0
    4eea:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divmodhi4>
    4eee:	08 95       	ret
    4ef0:	80 e0       	ldi	r24, 0x00	; 0
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	08 95       	ret

00004ef6 <_ZN14SoftwareSerial13stopListeningEv>:
    4ef6:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4efa:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4efe:	e8 17       	cp	r30, r24
    4f00:	f9 07       	cpc	r31, r25
    4f02:	69 f4       	brne	.+26     	; 0x4f1e <_ZN14SoftwareSerial13stopListeningEv+0x28>
    4f04:	a3 89       	ldd	r26, Z+19	; 0x13
    4f06:	b4 89       	ldd	r27, Z+20	; 0x14
    4f08:	9c 91       	ld	r25, X
    4f0a:	85 89       	ldd	r24, Z+21	; 0x15
    4f0c:	80 95       	com	r24
    4f0e:	89 23       	and	r24, r25
    4f10:	8c 93       	st	X, r24
    4f12:	10 92 49 08 	sts	0x0849, r1	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4f16:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	08 95       	ret
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	08 95       	ret

00004f22 <_ZN14SoftwareSerial6listenEv>:
    4f22:	cf 93       	push	r28
    4f24:	df 93       	push	r29
    4f26:	ec 01       	movw	r28, r24
    4f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f2c:	89 2b       	or	r24, r25
    4f2e:	f1 f0       	breq	.+60     	; 0x4f6c <_ZN14SoftwareSerial6listenEv+0x4a>
    4f30:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4f34:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4f38:	c8 17       	cp	r28, r24
    4f3a:	d9 07       	cpc	r29, r25
    4f3c:	b9 f0       	breq	.+46     	; 0x4f6c <_ZN14SoftwareSerial6listenEv+0x4a>
    4f3e:	00 97       	sbiw	r24, 0x00	; 0
    4f40:	11 f0       	breq	.+4      	; 0x4f46 <_ZN14SoftwareSerial6listenEv+0x24>
    4f42:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <_ZN14SoftwareSerial13stopListeningEv>
    4f46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f48:	8e 7f       	andi	r24, 0xFE	; 254
    4f4a:	8e 8f       	std	Y+30, r24	; 0x1e
    4f4c:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4f50:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4f54:	d0 93 49 08 	sts	0x0849, r29	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4f58:	c0 93 48 08 	sts	0x0848, r28	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4f5c:	eb 89       	ldd	r30, Y+19	; 0x13
    4f5e:	fc 89       	ldd	r31, Y+20	; 0x14
    4f60:	90 81       	ld	r25, Z
    4f62:	8d 89       	ldd	r24, Y+21	; 0x15
    4f64:	89 2b       	or	r24, r25
    4f66:	80 83       	st	Z, r24
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	01 c0       	rjmp	.+2      	; 0x4f6e <_ZN14SoftwareSerial6listenEv+0x4c>
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	08 95       	ret

00004f74 <__vector_3>:
    4f74:	1f 92       	push	r1
    4f76:	0f 92       	push	r0
    4f78:	0f b6       	in	r0, 0x3f	; 63
    4f7a:	0f 92       	push	r0
    4f7c:	11 24       	eor	r1, r1
    4f7e:	2f 93       	push	r18
    4f80:	3f 93       	push	r19
    4f82:	4f 93       	push	r20
    4f84:	5f 93       	push	r21
    4f86:	6f 93       	push	r22
    4f88:	7f 93       	push	r23
    4f8a:	8f 93       	push	r24
    4f8c:	9f 93       	push	r25
    4f8e:	af 93       	push	r26
    4f90:	bf 93       	push	r27
    4f92:	ef 93       	push	r30
    4f94:	ff 93       	push	r31
    4f96:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE>
    4f9a:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <_ZN14SoftwareSerial13active_objectE+0x1>
    4f9e:	30 97       	sbiw	r30, 0x00	; 0
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <__vector_3+0x30>
    4fa2:	51 c0       	rjmp	.+162    	; 0x5046 <__vector_3+0xd2>
    4fa4:	96 8d       	ldd	r25, Z+30	; 0x1e
    4fa6:	a6 85       	ldd	r26, Z+14	; 0x0e
    4fa8:	b7 85       	ldd	r27, Z+15	; 0x0f
    4faa:	85 85       	ldd	r24, Z+13	; 0x0d
    4fac:	91 ff       	sbrs	r25, 1
    4fae:	04 c0       	rjmp	.+8      	; 0x4fb8 <__vector_3+0x44>
    4fb0:	9c 91       	ld	r25, X
    4fb2:	89 23       	and	r24, r25
    4fb4:	29 f4       	brne	.+10     	; 0x4fc0 <__vector_3+0x4c>
    4fb6:	47 c0       	rjmp	.+142    	; 0x5046 <__vector_3+0xd2>
    4fb8:	9c 91       	ld	r25, X
    4fba:	89 23       	and	r24, r25
    4fbc:	09 f0       	breq	.+2      	; 0x4fc0 <__vector_3+0x4c>
    4fbe:	43 c0       	rjmp	.+134    	; 0x5046 <__vector_3+0xd2>
    4fc0:	a3 89       	ldd	r26, Z+19	; 0x13
    4fc2:	b4 89       	ldd	r27, Z+20	; 0x14
    4fc4:	9c 91       	ld	r25, X
    4fc6:	85 89       	ldd	r24, Z+21	; 0x15
    4fc8:	80 95       	com	r24
    4fca:	89 23       	and	r24, r25
    4fcc:	8c 93       	st	X, r24
    4fce:	86 89       	ldd	r24, Z+22	; 0x16
    4fd0:	97 89       	ldd	r25, Z+23	; 0x17
    4fd2:	01 97       	sbiw	r24, 0x01	; 1
    4fd4:	f1 f7       	brne	.-4      	; 0x4fd2 <__vector_3+0x5e>
    4fd6:	60 8d       	ldd	r22, Z+24	; 0x18
    4fd8:	71 8d       	ldd	r23, Z+25	; 0x19
    4fda:	a6 85       	ldd	r26, Z+14	; 0x0e
    4fdc:	b7 85       	ldd	r27, Z+15	; 0x0f
    4fde:	55 85       	ldd	r21, Z+13	; 0x0d
    4fe0:	38 e0       	ldi	r19, 0x08	; 8
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	cb 01       	movw	r24, r22
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	f1 f7       	brne	.-4      	; 0x4fe6 <__vector_3+0x72>
    4fea:	82 2f       	mov	r24, r18
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	95 95       	asr	r25
    4ff0:	87 95       	ror	r24
    4ff2:	28 2f       	mov	r18, r24
    4ff4:	4c 91       	ld	r20, X
    4ff6:	45 23       	and	r20, r21
    4ff8:	09 f0       	breq	.+2      	; 0x4ffc <__vector_3+0x88>
    4ffa:	20 68       	ori	r18, 0x80	; 128
    4ffc:	31 50       	subi	r19, 0x01	; 1
    4ffe:	91 f7       	brne	.-28     	; 0x4fe4 <__vector_3+0x70>
    5000:	86 8d       	ldd	r24, Z+30	; 0x1e
    5002:	81 fd       	sbrc	r24, 1
    5004:	20 95       	com	r18
    5006:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	8f 73       	andi	r24, 0x3F	; 63
    5010:	99 27       	eor	r25, r25
    5012:	30 91 06 08 	lds	r19, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5016:	38 17       	cp	r19, r24
    5018:	49 f0       	breq	.+18     	; 0x502c <__vector_3+0xb8>
    501a:	a0 91 07 08 	lds	r26, 0x0807	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    501e:	b0 e0       	ldi	r27, 0x00	; 0
    5020:	a8 5f       	subi	r26, 0xF8	; 248
    5022:	b7 4f       	sbci	r27, 0xF7	; 247
    5024:	2c 93       	st	X, r18
    5026:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    502a:	03 c0       	rjmp	.+6      	; 0x5032 <__vector_3+0xbe>
    502c:	86 8d       	ldd	r24, Z+30	; 0x1e
    502e:	81 60       	ori	r24, 0x01	; 1
    5030:	86 8f       	std	Z+30, r24	; 0x1e
    5032:	82 8d       	ldd	r24, Z+26	; 0x1a
    5034:	93 8d       	ldd	r25, Z+27	; 0x1b
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <__vector_3+0xc2>
    503a:	a3 89       	ldd	r26, Z+19	; 0x13
    503c:	b4 89       	ldd	r27, Z+20	; 0x14
    503e:	9c 91       	ld	r25, X
    5040:	85 89       	ldd	r24, Z+21	; 0x15
    5042:	89 2b       	or	r24, r25
    5044:	8c 93       	st	X, r24
    5046:	ff 91       	pop	r31
    5048:	ef 91       	pop	r30
    504a:	bf 91       	pop	r27
    504c:	af 91       	pop	r26
    504e:	9f 91       	pop	r25
    5050:	8f 91       	pop	r24
    5052:	7f 91       	pop	r23
    5054:	6f 91       	pop	r22
    5056:	5f 91       	pop	r21
    5058:	4f 91       	pop	r20
    505a:	3f 91       	pop	r19
    505c:	2f 91       	pop	r18
    505e:	0f 90       	pop	r0
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	0f 90       	pop	r0
    5064:	1f 90       	pop	r1
    5066:	18 95       	reti

00005068 <_ZN14SoftwareSerial5setTXEh>:
    5068:	1f 93       	push	r17
    506a:	cf 93       	push	r28
    506c:	df 93       	push	r29
    506e:	ec 01       	movw	r28, r24
    5070:	16 2f       	mov	r17, r22
    5072:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5074:	66 95       	lsr	r22
    5076:	61 70       	andi	r22, 0x01	; 1
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	68 27       	eor	r22, r24
    507c:	81 2f       	mov	r24, r17
    507e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
    5082:	61 e0       	ldi	r22, 0x01	; 1
    5084:	81 2f       	mov	r24, r17
    5086:	0e 94 1b 1c 	call	0x3836	; 0x3836 <pinMode>
    508a:	81 2f       	mov	r24, r17
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	fc 01       	movw	r30, r24
    5090:	e1 55       	subi	r30, 0x51	; 81
    5092:	fb 4f       	sbci	r31, 0xFB	; 251
    5094:	e4 91       	lpm	r30, Z
    5096:	e8 8b       	std	Y+16, r30	; 0x10
    5098:	fc 01       	movw	r30, r24
    509a:	ed 53       	subi	r30, 0x3D	; 61
    509c:	fb 4f       	sbci	r31, 0xFB	; 251
    509e:	e4 91       	lpm	r30, Z
    50a0:	f0 e0       	ldi	r31, 0x00	; 0
    50a2:	ee 0f       	add	r30, r30
    50a4:	ff 1f       	adc	r31, r31
    50a6:	ef 51       	subi	r30, 0x1F	; 31
    50a8:	fb 4f       	sbci	r31, 0xFB	; 251
    50aa:	85 91       	lpm	r24, Z+
    50ac:	94 91       	lpm	r25, Z
    50ae:	9a 8b       	std	Y+18, r25	; 0x12
    50b0:	89 8b       	std	Y+17, r24	; 0x11
    50b2:	df 91       	pop	r29
    50b4:	cf 91       	pop	r28
    50b6:	1f 91       	pop	r17
    50b8:	08 95       	ret

000050ba <_ZN14SoftwareSerial5setRXEh>:
    50ba:	1f 93       	push	r17
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	ec 01       	movw	r28, r24
    50c2:	16 2f       	mov	r17, r22
    50c4:	60 e0       	ldi	r22, 0x00	; 0
    50c6:	81 2f       	mov	r24, r17
    50c8:	0e 94 1b 1c 	call	0x3836	; 0x3836 <pinMode>
    50cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    50ce:	81 fd       	sbrc	r24, 1
    50d0:	04 c0       	rjmp	.+8      	; 0x50da <_ZN14SoftwareSerial5setRXEh+0x20>
    50d2:	61 e0       	ldi	r22, 0x01	; 1
    50d4:	81 2f       	mov	r24, r17
    50d6:	0e 94 57 1c 	call	0x38ae	; 0x38ae <digitalWrite>
    50da:	1c 87       	std	Y+12, r17	; 0x0c
    50dc:	81 2f       	mov	r24, r17
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	fc 01       	movw	r30, r24
    50e2:	e1 55       	subi	r30, 0x51	; 81
    50e4:	fb 4f       	sbci	r31, 0xFB	; 251
    50e6:	e4 91       	lpm	r30, Z
    50e8:	ed 87       	std	Y+13, r30	; 0x0d
    50ea:	fc 01       	movw	r30, r24
    50ec:	ed 53       	subi	r30, 0x3D	; 61
    50ee:	fb 4f       	sbci	r31, 0xFB	; 251
    50f0:	e4 91       	lpm	r30, Z
    50f2:	f0 e0       	ldi	r31, 0x00	; 0
    50f4:	ee 0f       	add	r30, r30
    50f6:	ff 1f       	adc	r31, r31
    50f8:	e9 52       	subi	r30, 0x29	; 41
    50fa:	fb 4f       	sbci	r31, 0xFB	; 251
    50fc:	85 91       	lpm	r24, Z+
    50fe:	94 91       	lpm	r25, Z
    5100:	9f 87       	std	Y+15, r25	; 0x0f
    5102:	8e 87       	std	Y+14, r24	; 0x0e
    5104:	df 91       	pop	r29
    5106:	cf 91       	pop	r28
    5108:	1f 91       	pop	r17
    510a:	08 95       	ret

0000510c <_ZN14SoftwareSerialC1Ehhb>:
    510c:	1f 93       	push	r17
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	ec 01       	movw	r28, r24
    5114:	16 2f       	mov	r17, r22
    5116:	1b 82       	std	Y+3, r1	; 0x03
    5118:	1a 82       	std	Y+2, r1	; 0x02
    511a:	88 ee       	ldi	r24, 0xE8	; 232
    511c:	93 e0       	ldi	r25, 0x03	; 3
    511e:	a0 e0       	ldi	r26, 0x00	; 0
    5120:	b0 e0       	ldi	r27, 0x00	; 0
    5122:	8c 83       	std	Y+4, r24	; 0x04
    5124:	9d 83       	std	Y+5, r25	; 0x05
    5126:	ae 83       	std	Y+6, r26	; 0x06
    5128:	bf 83       	std	Y+7, r27	; 0x07
    512a:	85 e3       	ldi	r24, 0x35	; 53
    512c:	93 e0       	ldi	r25, 0x03	; 3
    512e:	99 83       	std	Y+1, r25	; 0x01
    5130:	88 83       	st	Y, r24
    5132:	1f 8a       	std	Y+23, r1	; 0x17
    5134:	1e 8a       	std	Y+22, r1	; 0x16
    5136:	19 8e       	std	Y+25, r1	; 0x19
    5138:	18 8e       	std	Y+24, r1	; 0x18
    513a:	1b 8e       	std	Y+27, r1	; 0x1b
    513c:	1a 8e       	std	Y+26, r1	; 0x1a
    513e:	1d 8e       	std	Y+29, r1	; 0x1d
    5140:	1c 8e       	std	Y+28, r1	; 0x1c
    5142:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5144:	8e 7f       	andi	r24, 0xFE	; 254
    5146:	20 fb       	bst	r18, 0
    5148:	81 f9       	bld	r24, 1
    514a:	8e 8f       	std	Y+30, r24	; 0x1e
    514c:	64 2f       	mov	r22, r20
    514e:	ce 01       	movw	r24, r28
    5150:	0e 94 34 28 	call	0x5068	; 0x5068 <_ZN14SoftwareSerial5setTXEh>
    5154:	61 2f       	mov	r22, r17
    5156:	ce 01       	movw	r24, r28
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	1f 91       	pop	r17
    515e:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <_ZN14SoftwareSerial5setRXEh>

00005162 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    5162:	cf 93       	push	r28
    5164:	df 93       	push	r29
    5166:	ec 01       	movw	r28, r24
    5168:	9a 01       	movw	r18, r20
    516a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    516c:	1b 8e       	std	Y+27, r1	; 0x1b
    516e:	1a 8e       	std	Y+26, r1	; 0x1a
    5170:	19 8e       	std	Y+25, r1	; 0x19
    5172:	18 8e       	std	Y+24, r1	; 0x18
    5174:	1f 8a       	std	Y+23, r1	; 0x17
    5176:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    5178:	60 e0       	ldi	r22, 0x00	; 0
    517a:	79 e0       	ldi	r23, 0x09	; 9
    517c:	8d e3       	ldi	r24, 0x3D	; 61
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__divmodsi4>
    5184:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5186:	24 30       	cpi	r18, 0x04	; 4
    5188:	31 05       	cpc	r19, r1
    518a:	18 f0       	brcs	.+6      	; 0x5192 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    518c:	c9 01       	movw	r24, r18
    518e:	03 97       	sbiw	r24, 0x03	; 3
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    5196:	9d 8f       	std	Y+29, r25	; 0x1d
    5198:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    519a:	6c 85       	ldd	r22, Y+12	; 0x0c
    519c:	66 31       	cpi	r22, 0x16	; 22
    519e:	08 f0       	brcs	.+2      	; 0x51a2 <_ZN14SoftwareSerial5beginEl+0x40>
    51a0:	69 c0       	rjmp	.+210    	; 0x5274 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    51a2:	c9 01       	movw	r24, r18
    51a4:	96 95       	lsr	r25
    51a6:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    51a8:	84 31       	cpi	r24, 0x14	; 20
    51aa:	91 05       	cpc	r25, r1
    51ac:	10 f0       	brcs	.+4      	; 0x51b2 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    51ae:	43 97       	sbiw	r24, 0x13	; 19
    51b0:	02 c0       	rjmp	.+4      	; 0x51b6 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    51b6:	9f 8b       	std	Y+23, r25	; 0x17
    51b8:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    51ba:	36 97       	sbiw	r30, 0x06	; 6
    51bc:	18 f0       	brcs	.+6      	; 0x51c4 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    51be:	c9 01       	movw	r24, r18
    51c0:	05 97       	sbiw	r24, 0x05	; 5
    51c2:	02 c0       	rjmp	.+4      	; 0x51c8 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    51c8:	99 8f       	std	Y+25, r25	; 0x19
    51ca:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    51cc:	c9 01       	movw	r24, r18
    51ce:	88 0f       	add	r24, r24
    51d0:	99 1f       	adc	r25, r25
    51d2:	28 0f       	add	r18, r24
    51d4:	39 1f       	adc	r19, r25
    51d6:	36 95       	lsr	r19
    51d8:	27 95       	ror	r18
    51da:	36 95       	lsr	r19
    51dc:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    51de:	2d 30       	cpi	r18, 0x0D	; 13
    51e0:	31 05       	cpc	r19, r1
    51e2:	18 f0       	brcs	.+6      	; 0x51ea <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    51e4:	2c 50       	subi	r18, 0x0C	; 12
    51e6:	31 09       	sbc	r19, r1
    51e8:	02 c0       	rjmp	.+4      	; 0x51ee <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    51ea:	21 e0       	ldi	r18, 0x01	; 1
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    51ee:	3b 8f       	std	Y+27, r19	; 0x1b
    51f0:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    51f2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    51f6:	68 30       	cpi	r22, 0x08	; 8
    51f8:	50 f0       	brcs	.+20     	; 0x520e <_ZN14SoftwareSerial5beginEl+0xac>
    51fa:	21 e0       	ldi	r18, 0x01	; 1
    51fc:	6e 30       	cpi	r22, 0x0E	; 14
    51fe:	08 f4       	brcc	.+2      	; 0x5202 <_ZN14SoftwareSerial5beginEl+0xa0>
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	81 e0       	ldi	r24, 0x01	; 1
    5204:	01 c0       	rjmp	.+2      	; 0x5208 <_ZN14SoftwareSerial5beginEl+0xa6>
    5206:	88 0f       	add	r24, r24
    5208:	2a 95       	dec	r18
    520a:	ea f7       	brpl	.-6      	; 0x5206 <_ZN14SoftwareSerial5beginEl+0xa4>
    520c:	01 c0       	rjmp	.+2      	; 0x5210 <_ZN14SoftwareSerial5beginEl+0xae>
    520e:	84 e0       	ldi	r24, 0x04	; 4
    5210:	89 2b       	or	r24, r25
    5212:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    5216:	9c 85       	ldd	r25, Y+12	; 0x0c
    5218:	98 30       	cpi	r25, 0x08	; 8
    521a:	38 f0       	brcs	.+14     	; 0x522a <_ZN14SoftwareSerial5beginEl+0xc8>
    521c:	9e 30       	cpi	r25, 0x0E	; 14
    521e:	40 f0       	brcs	.+16     	; 0x5230 <_ZN14SoftwareSerial5beginEl+0xce>
    5220:	96 31       	cpi	r25, 0x16	; 22
    5222:	48 f0       	brcs	.+18     	; 0x5236 <_ZN14SoftwareSerial5beginEl+0xd4>
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	08 c0       	rjmp	.+16     	; 0x523a <_ZN14SoftwareSerial5beginEl+0xd8>
    522a:	2d e6       	ldi	r18, 0x6D	; 109
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	05 c0       	rjmp	.+10     	; 0x523a <_ZN14SoftwareSerial5beginEl+0xd8>
    5230:	2b e6       	ldi	r18, 0x6B	; 107
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	02 c0       	rjmp	.+4      	; 0x523a <_ZN14SoftwareSerial5beginEl+0xd8>
    5236:	2c e6       	ldi	r18, 0x6C	; 108
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	3c 8b       	std	Y+20, r19	; 0x14
    523c:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    523e:	98 30       	cpi	r25, 0x08	; 8
    5240:	30 f4       	brcc	.+12     	; 0x524e <_ZN14SoftwareSerial5beginEl+0xec>
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	01 c0       	rjmp	.+2      	; 0x5248 <_ZN14SoftwareSerial5beginEl+0xe6>
    5246:	88 0f       	add	r24, r24
    5248:	9a 95       	dec	r25
    524a:	ea f7       	brpl	.-6      	; 0x5246 <_ZN14SoftwareSerial5beginEl+0xe4>
    524c:	0e c0       	rjmp	.+28     	; 0x526a <_ZN14SoftwareSerial5beginEl+0x108>
    524e:	29 2f       	mov	r18, r25
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	9e 30       	cpi	r25, 0x0E	; 14
    5254:	18 f4       	brcc	.+6      	; 0x525c <_ZN14SoftwareSerial5beginEl+0xfa>
    5256:	28 50       	subi	r18, 0x08	; 8
    5258:	31 09       	sbc	r19, r1
    525a:	02 c0       	rjmp	.+4      	; 0x5260 <_ZN14SoftwareSerial5beginEl+0xfe>
    525c:	2e 50       	subi	r18, 0x0E	; 14
    525e:	31 09       	sbc	r19, r1
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	01 c0       	rjmp	.+2      	; 0x5266 <_ZN14SoftwareSerial5beginEl+0x104>
    5264:	88 0f       	add	r24, r24
    5266:	2a 95       	dec	r18
    5268:	ea f7       	brpl	.-6      	; 0x5264 <_ZN14SoftwareSerial5beginEl+0x102>
    526a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    526c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    526e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5270:	01 97       	sbiw	r24, 0x01	; 1
    5272:	f1 f7       	brne	.-4      	; 0x5270 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    5274:	ce 01       	movw	r24, r28
}
    5276:	df 91       	pop	r29
    5278:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    527a:	0c 94 91 27 	jmp	0x4f22	; 0x4f22 <_ZN14SoftwareSerial6listenEv>

0000527e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    527e:	08 95       	ret

00005280 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    5280:	08 95       	ret

00005282 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    5282:	1f 92       	push	r1
    5284:	0f 92       	push	r0
    5286:	0f b6       	in	r0, 0x3f	; 63
    5288:	0f 92       	push	r0
    528a:	11 24       	eor	r1, r1
    528c:	2f 93       	push	r18
    528e:	3f 93       	push	r19
    5290:	4f 93       	push	r20
    5292:	5f 93       	push	r21
    5294:	6f 93       	push	r22
    5296:	7f 93       	push	r23
    5298:	8f 93       	push	r24
    529a:	9f 93       	push	r25
    529c:	af 93       	push	r26
    529e:	bf 93       	push	r27
    52a0:	ef 93       	push	r30
    52a2:	ff 93       	push	r31
    52a4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <intFunc>
    52a8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <intFunc+0x1>
    52ac:	09 95       	icall
    52ae:	ff 91       	pop	r31
    52b0:	ef 91       	pop	r30
    52b2:	bf 91       	pop	r27
    52b4:	af 91       	pop	r26
    52b6:	9f 91       	pop	r25
    52b8:	8f 91       	pop	r24
    52ba:	7f 91       	pop	r23
    52bc:	6f 91       	pop	r22
    52be:	5f 91       	pop	r21
    52c0:	4f 91       	pop	r20
    52c2:	3f 91       	pop	r19
    52c4:	2f 91       	pop	r18
    52c6:	0f 90       	pop	r0
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	0f 90       	pop	r0
    52cc:	1f 90       	pop	r1
    52ce:	18 95       	reti

000052d0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    52d0:	1f 92       	push	r1
    52d2:	0f 92       	push	r0
    52d4:	0f b6       	in	r0, 0x3f	; 63
    52d6:	0f 92       	push	r0
    52d8:	11 24       	eor	r1, r1
    52da:	2f 93       	push	r18
    52dc:	3f 93       	push	r19
    52de:	4f 93       	push	r20
    52e0:	5f 93       	push	r21
    52e2:	6f 93       	push	r22
    52e4:	7f 93       	push	r23
    52e6:	8f 93       	push	r24
    52e8:	9f 93       	push	r25
    52ea:	af 93       	push	r26
    52ec:	bf 93       	push	r27
    52ee:	ef 93       	push	r30
    52f0:	ff 93       	push	r31
    52f2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <intFunc+0x2>
    52f6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <intFunc+0x3>
    52fa:	09 95       	icall
    52fc:	ff 91       	pop	r31
    52fe:	ef 91       	pop	r30
    5300:	bf 91       	pop	r27
    5302:	af 91       	pop	r26
    5304:	9f 91       	pop	r25
    5306:	8f 91       	pop	r24
    5308:	7f 91       	pop	r23
    530a:	6f 91       	pop	r22
    530c:	5f 91       	pop	r21
    530e:	4f 91       	pop	r20
    5310:	3f 91       	pop	r19
    5312:	2f 91       	pop	r18
    5314:	0f 90       	pop	r0
    5316:	0f be       	out	0x3f, r0	; 63
    5318:	0f 90       	pop	r0
    531a:	1f 90       	pop	r1
    531c:	18 95       	reti

0000531e <__subsf3>:
    531e:	50 58       	subi	r21, 0x80	; 128

00005320 <__addsf3>:
    5320:	bb 27       	eor	r27, r27
    5322:	aa 27       	eor	r26, r26
    5324:	0e 94 a7 29 	call	0x534e	; 0x534e <__addsf3x>
    5328:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__fp_round>
    532c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__fp_pscA>
    5330:	38 f0       	brcs	.+14     	; 0x5340 <__addsf3+0x20>
    5332:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__fp_pscB>
    5336:	20 f0       	brcs	.+8      	; 0x5340 <__addsf3+0x20>
    5338:	39 f4       	brne	.+14     	; 0x5348 <__addsf3+0x28>
    533a:	9f 3f       	cpi	r25, 0xFF	; 255
    533c:	19 f4       	brne	.+6      	; 0x5344 <__addsf3+0x24>
    533e:	26 f4       	brtc	.+8      	; 0x5348 <__addsf3+0x28>
    5340:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_nan>
    5344:	0e f4       	brtc	.+2      	; 0x5348 <__addsf3+0x28>
    5346:	e0 95       	com	r30
    5348:	e7 fb       	bst	r30, 7
    534a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_inf>

0000534e <__addsf3x>:
    534e:	e9 2f       	mov	r30, r25
    5350:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__fp_split3>
    5354:	58 f3       	brcs	.-42     	; 0x532c <__addsf3+0xc>
    5356:	ba 17       	cp	r27, r26
    5358:	62 07       	cpc	r22, r18
    535a:	73 07       	cpc	r23, r19
    535c:	84 07       	cpc	r24, r20
    535e:	95 07       	cpc	r25, r21
    5360:	20 f0       	brcs	.+8      	; 0x536a <__addsf3x+0x1c>
    5362:	79 f4       	brne	.+30     	; 0x5382 <__addsf3x+0x34>
    5364:	a6 f5       	brtc	.+104    	; 0x53ce <__addsf3x+0x80>
    5366:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__fp_zero>
    536a:	0e f4       	brtc	.+2      	; 0x536e <__addsf3x+0x20>
    536c:	e0 95       	com	r30
    536e:	0b 2e       	mov	r0, r27
    5370:	ba 2f       	mov	r27, r26
    5372:	a0 2d       	mov	r26, r0
    5374:	0b 01       	movw	r0, r22
    5376:	b9 01       	movw	r22, r18
    5378:	90 01       	movw	r18, r0
    537a:	0c 01       	movw	r0, r24
    537c:	ca 01       	movw	r24, r20
    537e:	a0 01       	movw	r20, r0
    5380:	11 24       	eor	r1, r1
    5382:	ff 27       	eor	r31, r31
    5384:	59 1b       	sub	r21, r25
    5386:	99 f0       	breq	.+38     	; 0x53ae <__addsf3x+0x60>
    5388:	59 3f       	cpi	r21, 0xF9	; 249
    538a:	50 f4       	brcc	.+20     	; 0x53a0 <__addsf3x+0x52>
    538c:	50 3e       	cpi	r21, 0xE0	; 224
    538e:	68 f1       	brcs	.+90     	; 0x53ea <__addsf3x+0x9c>
    5390:	1a 16       	cp	r1, r26
    5392:	f0 40       	sbci	r31, 0x00	; 0
    5394:	a2 2f       	mov	r26, r18
    5396:	23 2f       	mov	r18, r19
    5398:	34 2f       	mov	r19, r20
    539a:	44 27       	eor	r20, r20
    539c:	58 5f       	subi	r21, 0xF8	; 248
    539e:	f3 cf       	rjmp	.-26     	; 0x5386 <__addsf3x+0x38>
    53a0:	46 95       	lsr	r20
    53a2:	37 95       	ror	r19
    53a4:	27 95       	ror	r18
    53a6:	a7 95       	ror	r26
    53a8:	f0 40       	sbci	r31, 0x00	; 0
    53aa:	53 95       	inc	r21
    53ac:	c9 f7       	brne	.-14     	; 0x53a0 <__addsf3x+0x52>
    53ae:	7e f4       	brtc	.+30     	; 0x53ce <__addsf3x+0x80>
    53b0:	1f 16       	cp	r1, r31
    53b2:	ba 0b       	sbc	r27, r26
    53b4:	62 0b       	sbc	r22, r18
    53b6:	73 0b       	sbc	r23, r19
    53b8:	84 0b       	sbc	r24, r20
    53ba:	ba f0       	brmi	.+46     	; 0x53ea <__addsf3x+0x9c>
    53bc:	91 50       	subi	r25, 0x01	; 1
    53be:	a1 f0       	breq	.+40     	; 0x53e8 <__addsf3x+0x9a>
    53c0:	ff 0f       	add	r31, r31
    53c2:	bb 1f       	adc	r27, r27
    53c4:	66 1f       	adc	r22, r22
    53c6:	77 1f       	adc	r23, r23
    53c8:	88 1f       	adc	r24, r24
    53ca:	c2 f7       	brpl	.-16     	; 0x53bc <__addsf3x+0x6e>
    53cc:	0e c0       	rjmp	.+28     	; 0x53ea <__addsf3x+0x9c>
    53ce:	ba 0f       	add	r27, r26
    53d0:	62 1f       	adc	r22, r18
    53d2:	73 1f       	adc	r23, r19
    53d4:	84 1f       	adc	r24, r20
    53d6:	48 f4       	brcc	.+18     	; 0x53ea <__addsf3x+0x9c>
    53d8:	87 95       	ror	r24
    53da:	77 95       	ror	r23
    53dc:	67 95       	ror	r22
    53de:	b7 95       	ror	r27
    53e0:	f7 95       	ror	r31
    53e2:	9e 3f       	cpi	r25, 0xFE	; 254
    53e4:	08 f0       	brcs	.+2      	; 0x53e8 <__addsf3x+0x9a>
    53e6:	b0 cf       	rjmp	.-160    	; 0x5348 <__addsf3+0x28>
    53e8:	93 95       	inc	r25
    53ea:	88 0f       	add	r24, r24
    53ec:	08 f0       	brcs	.+2      	; 0x53f0 <__addsf3x+0xa2>
    53ee:	99 27       	eor	r25, r25
    53f0:	ee 0f       	add	r30, r30
    53f2:	97 95       	ror	r25
    53f4:	87 95       	ror	r24
    53f6:	08 95       	ret

000053f8 <__cmpsf2>:
    53f8:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <__fp_cmp>
    53fc:	08 f4       	brcc	.+2      	; 0x5400 <__cmpsf2+0x8>
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	08 95       	ret

00005402 <__divsf3>:
    5402:	0e 94 15 2a 	call	0x542a	; 0x542a <__divsf3x>
    5406:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__fp_round>
    540a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__fp_pscB>
    540e:	58 f0       	brcs	.+22     	; 0x5426 <__divsf3+0x24>
    5410:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__fp_pscA>
    5414:	40 f0       	brcs	.+16     	; 0x5426 <__divsf3+0x24>
    5416:	29 f4       	brne	.+10     	; 0x5422 <__divsf3+0x20>
    5418:	5f 3f       	cpi	r21, 0xFF	; 255
    541a:	29 f0       	breq	.+10     	; 0x5426 <__divsf3+0x24>
    541c:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_inf>
    5420:	51 11       	cpse	r21, r1
    5422:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_szero>
    5426:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__fp_nan>

0000542a <__divsf3x>:
    542a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__fp_split3>
    542e:	68 f3       	brcs	.-38     	; 0x540a <__divsf3+0x8>

00005430 <__divsf3_pse>:
    5430:	99 23       	and	r25, r25
    5432:	b1 f3       	breq	.-20     	; 0x5420 <__divsf3+0x1e>
    5434:	55 23       	and	r21, r21
    5436:	91 f3       	breq	.-28     	; 0x541c <__divsf3+0x1a>
    5438:	95 1b       	sub	r25, r21
    543a:	55 0b       	sbc	r21, r21
    543c:	bb 27       	eor	r27, r27
    543e:	aa 27       	eor	r26, r26
    5440:	62 17       	cp	r22, r18
    5442:	73 07       	cpc	r23, r19
    5444:	84 07       	cpc	r24, r20
    5446:	38 f0       	brcs	.+14     	; 0x5456 <__divsf3_pse+0x26>
    5448:	9f 5f       	subi	r25, 0xFF	; 255
    544a:	5f 4f       	sbci	r21, 0xFF	; 255
    544c:	22 0f       	add	r18, r18
    544e:	33 1f       	adc	r19, r19
    5450:	44 1f       	adc	r20, r20
    5452:	aa 1f       	adc	r26, r26
    5454:	a9 f3       	breq	.-22     	; 0x5440 <__divsf3_pse+0x10>
    5456:	35 d0       	rcall	.+106    	; 0x54c2 <__divsf3_pse+0x92>
    5458:	0e 2e       	mov	r0, r30
    545a:	3a f0       	brmi	.+14     	; 0x546a <__divsf3_pse+0x3a>
    545c:	e0 e8       	ldi	r30, 0x80	; 128
    545e:	32 d0       	rcall	.+100    	; 0x54c4 <__divsf3_pse+0x94>
    5460:	91 50       	subi	r25, 0x01	; 1
    5462:	50 40       	sbci	r21, 0x00	; 0
    5464:	e6 95       	lsr	r30
    5466:	00 1c       	adc	r0, r0
    5468:	ca f7       	brpl	.-14     	; 0x545c <__divsf3_pse+0x2c>
    546a:	2b d0       	rcall	.+86     	; 0x54c2 <__divsf3_pse+0x92>
    546c:	fe 2f       	mov	r31, r30
    546e:	29 d0       	rcall	.+82     	; 0x54c2 <__divsf3_pse+0x92>
    5470:	66 0f       	add	r22, r22
    5472:	77 1f       	adc	r23, r23
    5474:	88 1f       	adc	r24, r24
    5476:	bb 1f       	adc	r27, r27
    5478:	26 17       	cp	r18, r22
    547a:	37 07       	cpc	r19, r23
    547c:	48 07       	cpc	r20, r24
    547e:	ab 07       	cpc	r26, r27
    5480:	b0 e8       	ldi	r27, 0x80	; 128
    5482:	09 f0       	breq	.+2      	; 0x5486 <__divsf3_pse+0x56>
    5484:	bb 0b       	sbc	r27, r27
    5486:	80 2d       	mov	r24, r0
    5488:	bf 01       	movw	r22, r30
    548a:	ff 27       	eor	r31, r31
    548c:	93 58       	subi	r25, 0x83	; 131
    548e:	5f 4f       	sbci	r21, 0xFF	; 255
    5490:	3a f0       	brmi	.+14     	; 0x54a0 <__divsf3_pse+0x70>
    5492:	9e 3f       	cpi	r25, 0xFE	; 254
    5494:	51 05       	cpc	r21, r1
    5496:	78 f0       	brcs	.+30     	; 0x54b6 <__divsf3_pse+0x86>
    5498:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_inf>
    549c:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_szero>
    54a0:	5f 3f       	cpi	r21, 0xFF	; 255
    54a2:	e4 f3       	brlt	.-8      	; 0x549c <__divsf3_pse+0x6c>
    54a4:	98 3e       	cpi	r25, 0xE8	; 232
    54a6:	d4 f3       	brlt	.-12     	; 0x549c <__divsf3_pse+0x6c>
    54a8:	86 95       	lsr	r24
    54aa:	77 95       	ror	r23
    54ac:	67 95       	ror	r22
    54ae:	b7 95       	ror	r27
    54b0:	f7 95       	ror	r31
    54b2:	9f 5f       	subi	r25, 0xFF	; 255
    54b4:	c9 f7       	brne	.-14     	; 0x54a8 <__divsf3_pse+0x78>
    54b6:	88 0f       	add	r24, r24
    54b8:	91 1d       	adc	r25, r1
    54ba:	96 95       	lsr	r25
    54bc:	87 95       	ror	r24
    54be:	97 f9       	bld	r25, 7
    54c0:	08 95       	ret
    54c2:	e1 e0       	ldi	r30, 0x01	; 1
    54c4:	66 0f       	add	r22, r22
    54c6:	77 1f       	adc	r23, r23
    54c8:	88 1f       	adc	r24, r24
    54ca:	bb 1f       	adc	r27, r27
    54cc:	62 17       	cp	r22, r18
    54ce:	73 07       	cpc	r23, r19
    54d0:	84 07       	cpc	r24, r20
    54d2:	ba 07       	cpc	r27, r26
    54d4:	20 f0       	brcs	.+8      	; 0x54de <__divsf3_pse+0xae>
    54d6:	62 1b       	sub	r22, r18
    54d8:	73 0b       	sbc	r23, r19
    54da:	84 0b       	sbc	r24, r20
    54dc:	ba 0b       	sbc	r27, r26
    54de:	ee 1f       	adc	r30, r30
    54e0:	88 f7       	brcc	.-30     	; 0x54c4 <__divsf3_pse+0x94>
    54e2:	e0 95       	com	r30
    54e4:	08 95       	ret

000054e6 <__fp_cmp>:
    54e6:	99 0f       	add	r25, r25
    54e8:	00 08       	sbc	r0, r0
    54ea:	55 0f       	add	r21, r21
    54ec:	aa 0b       	sbc	r26, r26
    54ee:	e0 e8       	ldi	r30, 0x80	; 128
    54f0:	fe ef       	ldi	r31, 0xFE	; 254
    54f2:	16 16       	cp	r1, r22
    54f4:	17 06       	cpc	r1, r23
    54f6:	e8 07       	cpc	r30, r24
    54f8:	f9 07       	cpc	r31, r25
    54fa:	c0 f0       	brcs	.+48     	; 0x552c <__fp_cmp+0x46>
    54fc:	12 16       	cp	r1, r18
    54fe:	13 06       	cpc	r1, r19
    5500:	e4 07       	cpc	r30, r20
    5502:	f5 07       	cpc	r31, r21
    5504:	98 f0       	brcs	.+38     	; 0x552c <__fp_cmp+0x46>
    5506:	62 1b       	sub	r22, r18
    5508:	73 0b       	sbc	r23, r19
    550a:	84 0b       	sbc	r24, r20
    550c:	95 0b       	sbc	r25, r21
    550e:	39 f4       	brne	.+14     	; 0x551e <__fp_cmp+0x38>
    5510:	0a 26       	eor	r0, r26
    5512:	61 f0       	breq	.+24     	; 0x552c <__fp_cmp+0x46>
    5514:	23 2b       	or	r18, r19
    5516:	24 2b       	or	r18, r20
    5518:	25 2b       	or	r18, r21
    551a:	21 f4       	brne	.+8      	; 0x5524 <__fp_cmp+0x3e>
    551c:	08 95       	ret
    551e:	0a 26       	eor	r0, r26
    5520:	09 f4       	brne	.+2      	; 0x5524 <__fp_cmp+0x3e>
    5522:	a1 40       	sbci	r26, 0x01	; 1
    5524:	a6 95       	lsr	r26
    5526:	8f ef       	ldi	r24, 0xFF	; 255
    5528:	81 1d       	adc	r24, r1
    552a:	81 1d       	adc	r24, r1
    552c:	08 95       	ret

0000552e <__gesf2>:
    552e:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <__fp_cmp>
    5532:	08 f4       	brcc	.+2      	; 0x5536 <__gesf2+0x8>
    5534:	8f ef       	ldi	r24, 0xFF	; 255
    5536:	08 95       	ret

00005538 <__unordsf2>:
    5538:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <__fp_cmp>
    553c:	88 0b       	sbc	r24, r24
    553e:	99 0b       	sbc	r25, r25
    5540:	08 95       	ret

00005542 <__divmodhi4>:
    5542:	97 fb       	bst	r25, 7
    5544:	07 2e       	mov	r0, r23
    5546:	16 f4       	brtc	.+4      	; 0x554c <__divmodhi4+0xa>
    5548:	00 94       	com	r0
    554a:	07 d0       	rcall	.+14     	; 0x555a <__divmodhi4_neg1>
    554c:	77 fd       	sbrc	r23, 7
    554e:	09 d0       	rcall	.+18     	; 0x5562 <__divmodhi4_neg2>
    5550:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__udivmodhi4>
    5554:	07 fc       	sbrc	r0, 7
    5556:	05 d0       	rcall	.+10     	; 0x5562 <__divmodhi4_neg2>
    5558:	3e f4       	brtc	.+14     	; 0x5568 <__divmodhi4_exit>

0000555a <__divmodhi4_neg1>:
    555a:	90 95       	com	r25
    555c:	81 95       	neg	r24
    555e:	9f 4f       	sbci	r25, 0xFF	; 255
    5560:	08 95       	ret

00005562 <__divmodhi4_neg2>:
    5562:	70 95       	com	r23
    5564:	61 95       	neg	r22
    5566:	7f 4f       	sbci	r23, 0xFF	; 255

00005568 <__divmodhi4_exit>:
    5568:	08 95       	ret

0000556a <__udivmodsi4>:
    556a:	a1 e2       	ldi	r26, 0x21	; 33
    556c:	1a 2e       	mov	r1, r26
    556e:	aa 1b       	sub	r26, r26
    5570:	bb 1b       	sub	r27, r27
    5572:	fd 01       	movw	r30, r26
    5574:	0d c0       	rjmp	.+26     	; 0x5590 <__udivmodsi4_ep>

00005576 <__udivmodsi4_loop>:
    5576:	aa 1f       	adc	r26, r26
    5578:	bb 1f       	adc	r27, r27
    557a:	ee 1f       	adc	r30, r30
    557c:	ff 1f       	adc	r31, r31
    557e:	a2 17       	cp	r26, r18
    5580:	b3 07       	cpc	r27, r19
    5582:	e4 07       	cpc	r30, r20
    5584:	f5 07       	cpc	r31, r21
    5586:	20 f0       	brcs	.+8      	; 0x5590 <__udivmodsi4_ep>
    5588:	a2 1b       	sub	r26, r18
    558a:	b3 0b       	sbc	r27, r19
    558c:	e4 0b       	sbc	r30, r20
    558e:	f5 0b       	sbc	r31, r21

00005590 <__udivmodsi4_ep>:
    5590:	66 1f       	adc	r22, r22
    5592:	77 1f       	adc	r23, r23
    5594:	88 1f       	adc	r24, r24
    5596:	99 1f       	adc	r25, r25
    5598:	1a 94       	dec	r1
    559a:	69 f7       	brne	.-38     	; 0x5576 <__udivmodsi4_loop>
    559c:	60 95       	com	r22
    559e:	70 95       	com	r23
    55a0:	80 95       	com	r24
    55a2:	90 95       	com	r25
    55a4:	9b 01       	movw	r18, r22
    55a6:	ac 01       	movw	r20, r24
    55a8:	bd 01       	movw	r22, r26
    55aa:	cf 01       	movw	r24, r30
    55ac:	08 95       	ret

000055ae <__divmodsi4>:
    55ae:	05 2e       	mov	r0, r21
    55b0:	97 fb       	bst	r25, 7
    55b2:	1e f4       	brtc	.+6      	; 0x55ba <__divmodsi4+0xc>
    55b4:	00 94       	com	r0
    55b6:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <__negsi2>
    55ba:	57 fd       	sbrc	r21, 7
    55bc:	07 d0       	rcall	.+14     	; 0x55cc <__divmodsi4_neg2>
    55be:	0e 94 b5 2a 	call	0x556a	; 0x556a <__udivmodsi4>
    55c2:	07 fc       	sbrc	r0, 7
    55c4:	03 d0       	rcall	.+6      	; 0x55cc <__divmodsi4_neg2>
    55c6:	4e f4       	brtc	.+18     	; 0x55da <__divmodsi4_exit>
    55c8:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__negsi2>

000055cc <__divmodsi4_neg2>:
    55cc:	50 95       	com	r21
    55ce:	40 95       	com	r20
    55d0:	30 95       	com	r19
    55d2:	21 95       	neg	r18
    55d4:	3f 4f       	sbci	r19, 0xFF	; 255
    55d6:	4f 4f       	sbci	r20, 0xFF	; 255
    55d8:	5f 4f       	sbci	r21, 0xFF	; 255

000055da <__divmodsi4_exit>:
    55da:	08 95       	ret

000055dc <__negsi2>:
    55dc:	90 95       	com	r25
    55de:	80 95       	com	r24
    55e0:	70 95       	com	r23
    55e2:	61 95       	neg	r22
    55e4:	7f 4f       	sbci	r23, 0xFF	; 255
    55e6:	8f 4f       	sbci	r24, 0xFF	; 255
    55e8:	9f 4f       	sbci	r25, 0xFF	; 255
    55ea:	08 95       	ret

000055ec <__tablejump2__>:
    55ec:	ee 0f       	add	r30, r30
    55ee:	ff 1f       	adc	r31, r31
    55f0:	05 90       	lpm	r0, Z+
    55f2:	f4 91       	lpm	r31, Z
    55f4:	e0 2d       	mov	r30, r0
    55f6:	09 94       	ijmp

000055f8 <__udivmodhi4>:
    55f8:	aa 1b       	sub	r26, r26
    55fa:	bb 1b       	sub	r27, r27
    55fc:	51 e1       	ldi	r21, 0x11	; 17
    55fe:	07 c0       	rjmp	.+14     	; 0x560e <__udivmodhi4_ep>

00005600 <__udivmodhi4_loop>:
    5600:	aa 1f       	adc	r26, r26
    5602:	bb 1f       	adc	r27, r27
    5604:	a6 17       	cp	r26, r22
    5606:	b7 07       	cpc	r27, r23
    5608:	10 f0       	brcs	.+4      	; 0x560e <__udivmodhi4_ep>
    560a:	a6 1b       	sub	r26, r22
    560c:	b7 0b       	sbc	r27, r23

0000560e <__udivmodhi4_ep>:
    560e:	88 1f       	adc	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	5a 95       	dec	r21
    5614:	a9 f7       	brne	.-22     	; 0x5600 <__udivmodhi4_loop>
    5616:	80 95       	com	r24
    5618:	90 95       	com	r25
    561a:	bc 01       	movw	r22, r24
    561c:	cd 01       	movw	r24, r26
    561e:	08 95       	ret

00005620 <malloc>:
    5620:	0f 93       	push	r16
    5622:	1f 93       	push	r17
    5624:	cf 93       	push	r28
    5626:	df 93       	push	r29
    5628:	82 30       	cpi	r24, 0x02	; 2
    562a:	91 05       	cpc	r25, r1
    562c:	10 f4       	brcc	.+4      	; 0x5632 <malloc+0x12>
    562e:	82 e0       	ldi	r24, 0x02	; 2
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	e0 91 4c 08 	lds	r30, 0x084C	; 0x80084c <__flp>
    5636:	f0 91 4d 08 	lds	r31, 0x084D	; 0x80084d <__flp+0x1>
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	a0 e0       	ldi	r26, 0x00	; 0
    5640:	b0 e0       	ldi	r27, 0x00	; 0
    5642:	30 97       	sbiw	r30, 0x00	; 0
    5644:	19 f1       	breq	.+70     	; 0x568c <malloc+0x6c>
    5646:	40 81       	ld	r20, Z
    5648:	51 81       	ldd	r21, Z+1	; 0x01
    564a:	02 81       	ldd	r16, Z+2	; 0x02
    564c:	13 81       	ldd	r17, Z+3	; 0x03
    564e:	48 17       	cp	r20, r24
    5650:	59 07       	cpc	r21, r25
    5652:	c8 f0       	brcs	.+50     	; 0x5686 <malloc+0x66>
    5654:	84 17       	cp	r24, r20
    5656:	95 07       	cpc	r25, r21
    5658:	69 f4       	brne	.+26     	; 0x5674 <malloc+0x54>
    565a:	10 97       	sbiw	r26, 0x00	; 0
    565c:	31 f0       	breq	.+12     	; 0x566a <malloc+0x4a>
    565e:	12 96       	adiw	r26, 0x02	; 2
    5660:	0c 93       	st	X, r16
    5662:	12 97       	sbiw	r26, 0x02	; 2
    5664:	13 96       	adiw	r26, 0x03	; 3
    5666:	1c 93       	st	X, r17
    5668:	27 c0       	rjmp	.+78     	; 0x56b8 <malloc+0x98>
    566a:	00 93 4c 08 	sts	0x084C, r16	; 0x80084c <__flp>
    566e:	10 93 4d 08 	sts	0x084D, r17	; 0x80084d <__flp+0x1>
    5672:	22 c0       	rjmp	.+68     	; 0x56b8 <malloc+0x98>
    5674:	21 15       	cp	r18, r1
    5676:	31 05       	cpc	r19, r1
    5678:	19 f0       	breq	.+6      	; 0x5680 <malloc+0x60>
    567a:	42 17       	cp	r20, r18
    567c:	53 07       	cpc	r21, r19
    567e:	18 f4       	brcc	.+6      	; 0x5686 <malloc+0x66>
    5680:	9a 01       	movw	r18, r20
    5682:	bd 01       	movw	r22, r26
    5684:	ef 01       	movw	r28, r30
    5686:	df 01       	movw	r26, r30
    5688:	f8 01       	movw	r30, r16
    568a:	db cf       	rjmp	.-74     	; 0x5642 <malloc+0x22>
    568c:	21 15       	cp	r18, r1
    568e:	31 05       	cpc	r19, r1
    5690:	f9 f0       	breq	.+62     	; 0x56d0 <malloc+0xb0>
    5692:	28 1b       	sub	r18, r24
    5694:	39 0b       	sbc	r19, r25
    5696:	24 30       	cpi	r18, 0x04	; 4
    5698:	31 05       	cpc	r19, r1
    569a:	80 f4       	brcc	.+32     	; 0x56bc <malloc+0x9c>
    569c:	8a 81       	ldd	r24, Y+2	; 0x02
    569e:	9b 81       	ldd	r25, Y+3	; 0x03
    56a0:	61 15       	cp	r22, r1
    56a2:	71 05       	cpc	r23, r1
    56a4:	21 f0       	breq	.+8      	; 0x56ae <malloc+0x8e>
    56a6:	fb 01       	movw	r30, r22
    56a8:	93 83       	std	Z+3, r25	; 0x03
    56aa:	82 83       	std	Z+2, r24	; 0x02
    56ac:	04 c0       	rjmp	.+8      	; 0x56b6 <malloc+0x96>
    56ae:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <__flp+0x1>
    56b2:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <__flp>
    56b6:	fe 01       	movw	r30, r28
    56b8:	32 96       	adiw	r30, 0x02	; 2
    56ba:	44 c0       	rjmp	.+136    	; 0x5744 <malloc+0x124>
    56bc:	fe 01       	movw	r30, r28
    56be:	e2 0f       	add	r30, r18
    56c0:	f3 1f       	adc	r31, r19
    56c2:	81 93       	st	Z+, r24
    56c4:	91 93       	st	Z+, r25
    56c6:	22 50       	subi	r18, 0x02	; 2
    56c8:	31 09       	sbc	r19, r1
    56ca:	39 83       	std	Y+1, r19	; 0x01
    56cc:	28 83       	st	Y, r18
    56ce:	3a c0       	rjmp	.+116    	; 0x5744 <malloc+0x124>
    56d0:	20 91 4a 08 	lds	r18, 0x084A	; 0x80084a <__brkval>
    56d4:	30 91 4b 08 	lds	r19, 0x084B	; 0x80084b <__brkval+0x1>
    56d8:	23 2b       	or	r18, r19
    56da:	41 f4       	brne	.+16     	; 0x56ec <malloc+0xcc>
    56dc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_start>
    56e0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    56e4:	30 93 4b 08 	sts	0x084B, r19	; 0x80084b <__brkval+0x1>
    56e8:	20 93 4a 08 	sts	0x084A, r18	; 0x80084a <__brkval>
    56ec:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_end>
    56f0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    56f4:	21 15       	cp	r18, r1
    56f6:	31 05       	cpc	r19, r1
    56f8:	41 f4       	brne	.+16     	; 0x570a <malloc+0xea>
    56fa:	2d b7       	in	r18, 0x3d	; 61
    56fc:	3e b7       	in	r19, 0x3e	; 62
    56fe:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    5702:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    5706:	24 1b       	sub	r18, r20
    5708:	35 0b       	sbc	r19, r21
    570a:	e0 91 4a 08 	lds	r30, 0x084A	; 0x80084a <__brkval>
    570e:	f0 91 4b 08 	lds	r31, 0x084B	; 0x80084b <__brkval+0x1>
    5712:	e2 17       	cp	r30, r18
    5714:	f3 07       	cpc	r31, r19
    5716:	a0 f4       	brcc	.+40     	; 0x5740 <malloc+0x120>
    5718:	2e 1b       	sub	r18, r30
    571a:	3f 0b       	sbc	r19, r31
    571c:	28 17       	cp	r18, r24
    571e:	39 07       	cpc	r19, r25
    5720:	78 f0       	brcs	.+30     	; 0x5740 <malloc+0x120>
    5722:	ac 01       	movw	r20, r24
    5724:	4e 5f       	subi	r20, 0xFE	; 254
    5726:	5f 4f       	sbci	r21, 0xFF	; 255
    5728:	24 17       	cp	r18, r20
    572a:	35 07       	cpc	r19, r21
    572c:	48 f0       	brcs	.+18     	; 0x5740 <malloc+0x120>
    572e:	4e 0f       	add	r20, r30
    5730:	5f 1f       	adc	r21, r31
    5732:	50 93 4b 08 	sts	0x084B, r21	; 0x80084b <__brkval+0x1>
    5736:	40 93 4a 08 	sts	0x084A, r20	; 0x80084a <__brkval>
    573a:	81 93       	st	Z+, r24
    573c:	91 93       	st	Z+, r25
    573e:	02 c0       	rjmp	.+4      	; 0x5744 <malloc+0x124>
    5740:	e0 e0       	ldi	r30, 0x00	; 0
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	cf 01       	movw	r24, r30
    5746:	df 91       	pop	r29
    5748:	cf 91       	pop	r28
    574a:	1f 91       	pop	r17
    574c:	0f 91       	pop	r16
    574e:	08 95       	ret

00005750 <free>:
    5750:	cf 93       	push	r28
    5752:	df 93       	push	r29
    5754:	00 97       	sbiw	r24, 0x00	; 0
    5756:	09 f4       	brne	.+2      	; 0x575a <free+0xa>
    5758:	81 c0       	rjmp	.+258    	; 0x585c <free+0x10c>
    575a:	fc 01       	movw	r30, r24
    575c:	32 97       	sbiw	r30, 0x02	; 2
    575e:	13 82       	std	Z+3, r1	; 0x03
    5760:	12 82       	std	Z+2, r1	; 0x02
    5762:	a0 91 4c 08 	lds	r26, 0x084C	; 0x80084c <__flp>
    5766:	b0 91 4d 08 	lds	r27, 0x084D	; 0x80084d <__flp+0x1>
    576a:	10 97       	sbiw	r26, 0x00	; 0
    576c:	81 f4       	brne	.+32     	; 0x578e <free+0x3e>
    576e:	20 81       	ld	r18, Z
    5770:	31 81       	ldd	r19, Z+1	; 0x01
    5772:	82 0f       	add	r24, r18
    5774:	93 1f       	adc	r25, r19
    5776:	20 91 4a 08 	lds	r18, 0x084A	; 0x80084a <__brkval>
    577a:	30 91 4b 08 	lds	r19, 0x084B	; 0x80084b <__brkval+0x1>
    577e:	28 17       	cp	r18, r24
    5780:	39 07       	cpc	r19, r25
    5782:	51 f5       	brne	.+84     	; 0x57d8 <free+0x88>
    5784:	f0 93 4b 08 	sts	0x084B, r31	; 0x80084b <__brkval+0x1>
    5788:	e0 93 4a 08 	sts	0x084A, r30	; 0x80084a <__brkval>
    578c:	67 c0       	rjmp	.+206    	; 0x585c <free+0x10c>
    578e:	ed 01       	movw	r28, r26
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	ce 17       	cp	r28, r30
    5796:	df 07       	cpc	r29, r31
    5798:	40 f4       	brcc	.+16     	; 0x57aa <free+0x5a>
    579a:	4a 81       	ldd	r20, Y+2	; 0x02
    579c:	5b 81       	ldd	r21, Y+3	; 0x03
    579e:	9e 01       	movw	r18, r28
    57a0:	41 15       	cp	r20, r1
    57a2:	51 05       	cpc	r21, r1
    57a4:	f1 f0       	breq	.+60     	; 0x57e2 <free+0x92>
    57a6:	ea 01       	movw	r28, r20
    57a8:	f5 cf       	rjmp	.-22     	; 0x5794 <free+0x44>
    57aa:	d3 83       	std	Z+3, r29	; 0x03
    57ac:	c2 83       	std	Z+2, r28	; 0x02
    57ae:	40 81       	ld	r20, Z
    57b0:	51 81       	ldd	r21, Z+1	; 0x01
    57b2:	84 0f       	add	r24, r20
    57b4:	95 1f       	adc	r25, r21
    57b6:	c8 17       	cp	r28, r24
    57b8:	d9 07       	cpc	r29, r25
    57ba:	59 f4       	brne	.+22     	; 0x57d2 <free+0x82>
    57bc:	88 81       	ld	r24, Y
    57be:	99 81       	ldd	r25, Y+1	; 0x01
    57c0:	84 0f       	add	r24, r20
    57c2:	95 1f       	adc	r25, r21
    57c4:	02 96       	adiw	r24, 0x02	; 2
    57c6:	91 83       	std	Z+1, r25	; 0x01
    57c8:	80 83       	st	Z, r24
    57ca:	8a 81       	ldd	r24, Y+2	; 0x02
    57cc:	9b 81       	ldd	r25, Y+3	; 0x03
    57ce:	93 83       	std	Z+3, r25	; 0x03
    57d0:	82 83       	std	Z+2, r24	; 0x02
    57d2:	21 15       	cp	r18, r1
    57d4:	31 05       	cpc	r19, r1
    57d6:	29 f4       	brne	.+10     	; 0x57e2 <free+0x92>
    57d8:	f0 93 4d 08 	sts	0x084D, r31	; 0x80084d <__flp+0x1>
    57dc:	e0 93 4c 08 	sts	0x084C, r30	; 0x80084c <__flp>
    57e0:	3d c0       	rjmp	.+122    	; 0x585c <free+0x10c>
    57e2:	e9 01       	movw	r28, r18
    57e4:	fb 83       	std	Y+3, r31	; 0x03
    57e6:	ea 83       	std	Y+2, r30	; 0x02
    57e8:	49 91       	ld	r20, Y+
    57ea:	59 91       	ld	r21, Y+
    57ec:	c4 0f       	add	r28, r20
    57ee:	d5 1f       	adc	r29, r21
    57f0:	ec 17       	cp	r30, r28
    57f2:	fd 07       	cpc	r31, r29
    57f4:	61 f4       	brne	.+24     	; 0x580e <free+0xbe>
    57f6:	80 81       	ld	r24, Z
    57f8:	91 81       	ldd	r25, Z+1	; 0x01
    57fa:	84 0f       	add	r24, r20
    57fc:	95 1f       	adc	r25, r21
    57fe:	02 96       	adiw	r24, 0x02	; 2
    5800:	e9 01       	movw	r28, r18
    5802:	99 83       	std	Y+1, r25	; 0x01
    5804:	88 83       	st	Y, r24
    5806:	82 81       	ldd	r24, Z+2	; 0x02
    5808:	93 81       	ldd	r25, Z+3	; 0x03
    580a:	9b 83       	std	Y+3, r25	; 0x03
    580c:	8a 83       	std	Y+2, r24	; 0x02
    580e:	e0 e0       	ldi	r30, 0x00	; 0
    5810:	f0 e0       	ldi	r31, 0x00	; 0
    5812:	12 96       	adiw	r26, 0x02	; 2
    5814:	8d 91       	ld	r24, X+
    5816:	9c 91       	ld	r25, X
    5818:	13 97       	sbiw	r26, 0x03	; 3
    581a:	00 97       	sbiw	r24, 0x00	; 0
    581c:	19 f0       	breq	.+6      	; 0x5824 <free+0xd4>
    581e:	fd 01       	movw	r30, r26
    5820:	dc 01       	movw	r26, r24
    5822:	f7 cf       	rjmp	.-18     	; 0x5812 <free+0xc2>
    5824:	8d 91       	ld	r24, X+
    5826:	9c 91       	ld	r25, X
    5828:	11 97       	sbiw	r26, 0x01	; 1
    582a:	9d 01       	movw	r18, r26
    582c:	2e 5f       	subi	r18, 0xFE	; 254
    582e:	3f 4f       	sbci	r19, 0xFF	; 255
    5830:	82 0f       	add	r24, r18
    5832:	93 1f       	adc	r25, r19
    5834:	20 91 4a 08 	lds	r18, 0x084A	; 0x80084a <__brkval>
    5838:	30 91 4b 08 	lds	r19, 0x084B	; 0x80084b <__brkval+0x1>
    583c:	28 17       	cp	r18, r24
    583e:	39 07       	cpc	r19, r25
    5840:	69 f4       	brne	.+26     	; 0x585c <free+0x10c>
    5842:	30 97       	sbiw	r30, 0x00	; 0
    5844:	29 f4       	brne	.+10     	; 0x5850 <free+0x100>
    5846:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <__flp+0x1>
    584a:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <__flp>
    584e:	02 c0       	rjmp	.+4      	; 0x5854 <free+0x104>
    5850:	13 82       	std	Z+3, r1	; 0x03
    5852:	12 82       	std	Z+2, r1	; 0x02
    5854:	b0 93 4b 08 	sts	0x084B, r27	; 0x80084b <__brkval+0x1>
    5858:	a0 93 4a 08 	sts	0x084A, r26	; 0x80084a <__brkval>
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	08 95       	ret

00005862 <realloc>:
    5862:	a0 e0       	ldi	r26, 0x00	; 0
    5864:	b0 e0       	ldi	r27, 0x00	; 0
    5866:	e7 e3       	ldi	r30, 0x37	; 55
    5868:	fc e2       	ldi	r31, 0x2C	; 44
    586a:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__prologue_saves__+0x8>
    586e:	ec 01       	movw	r28, r24
    5870:	00 97       	sbiw	r24, 0x00	; 0
    5872:	21 f4       	brne	.+8      	; 0x587c <realloc+0x1a>
    5874:	cb 01       	movw	r24, r22
    5876:	0e 94 10 2b 	call	0x5620	; 0x5620 <malloc>
    587a:	b4 c0       	rjmp	.+360    	; 0x59e4 <realloc+0x182>
    587c:	fc 01       	movw	r30, r24
    587e:	e6 0f       	add	r30, r22
    5880:	f7 1f       	adc	r31, r23
    5882:	9c 01       	movw	r18, r24
    5884:	22 50       	subi	r18, 0x02	; 2
    5886:	31 09       	sbc	r19, r1
    5888:	e2 17       	cp	r30, r18
    588a:	f3 07       	cpc	r31, r19
    588c:	08 f4       	brcc	.+2      	; 0x5890 <realloc+0x2e>
    588e:	a8 c0       	rjmp	.+336    	; 0x59e0 <realloc+0x17e>
    5890:	d9 01       	movw	r26, r18
    5892:	0d 91       	ld	r16, X+
    5894:	1c 91       	ld	r17, X
    5896:	11 97       	sbiw	r26, 0x01	; 1
    5898:	06 17       	cp	r16, r22
    589a:	17 07       	cpc	r17, r23
    589c:	b0 f0       	brcs	.+44     	; 0x58ca <realloc+0x68>
    589e:	05 30       	cpi	r16, 0x05	; 5
    58a0:	11 05       	cpc	r17, r1
    58a2:	08 f4       	brcc	.+2      	; 0x58a6 <realloc+0x44>
    58a4:	9b c0       	rjmp	.+310    	; 0x59dc <realloc+0x17a>
    58a6:	c8 01       	movw	r24, r16
    58a8:	04 97       	sbiw	r24, 0x04	; 4
    58aa:	86 17       	cp	r24, r22
    58ac:	97 07       	cpc	r25, r23
    58ae:	08 f4       	brcc	.+2      	; 0x58b2 <realloc+0x50>
    58b0:	95 c0       	rjmp	.+298    	; 0x59dc <realloc+0x17a>
    58b2:	02 50       	subi	r16, 0x02	; 2
    58b4:	11 09       	sbc	r17, r1
    58b6:	06 1b       	sub	r16, r22
    58b8:	17 0b       	sbc	r17, r23
    58ba:	01 93       	st	Z+, r16
    58bc:	11 93       	st	Z+, r17
    58be:	6d 93       	st	X+, r22
    58c0:	7c 93       	st	X, r23
    58c2:	cf 01       	movw	r24, r30
    58c4:	0e 94 a8 2b 	call	0x5750	; 0x5750 <free>
    58c8:	89 c0       	rjmp	.+274    	; 0x59dc <realloc+0x17a>
    58ca:	5b 01       	movw	r10, r22
    58cc:	a0 1a       	sub	r10, r16
    58ce:	b1 0a       	sbc	r11, r17
    58d0:	4c 01       	movw	r8, r24
    58d2:	80 0e       	add	r8, r16
    58d4:	91 1e       	adc	r9, r17
    58d6:	a0 91 4c 08 	lds	r26, 0x084C	; 0x80084c <__flp>
    58da:	b0 91 4d 08 	lds	r27, 0x084D	; 0x80084d <__flp+0x1>
    58de:	61 2c       	mov	r6, r1
    58e0:	71 2c       	mov	r7, r1
    58e2:	e1 2c       	mov	r14, r1
    58e4:	f1 2c       	mov	r15, r1
    58e6:	10 97       	sbiw	r26, 0x00	; 0
    58e8:	09 f4       	brne	.+2      	; 0x58ec <realloc+0x8a>
    58ea:	46 c0       	rjmp	.+140    	; 0x5978 <realloc+0x116>
    58ec:	8d 91       	ld	r24, X+
    58ee:	9c 91       	ld	r25, X
    58f0:	11 97       	sbiw	r26, 0x01	; 1
    58f2:	a8 15       	cp	r26, r8
    58f4:	b9 05       	cpc	r27, r9
    58f6:	b1 f5       	brne	.+108    	; 0x5964 <realloc+0x102>
    58f8:	6c 01       	movw	r12, r24
    58fa:	42 e0       	ldi	r20, 0x02	; 2
    58fc:	c4 0e       	add	r12, r20
    58fe:	d1 1c       	adc	r13, r1
    5900:	ca 14       	cp	r12, r10
    5902:	db 04       	cpc	r13, r11
    5904:	78 f1       	brcs	.+94     	; 0x5964 <realloc+0x102>
    5906:	4c 01       	movw	r8, r24
    5908:	8a 18       	sub	r8, r10
    590a:	9b 08       	sbc	r9, r11
    590c:	64 01       	movw	r12, r8
    590e:	42 e0       	ldi	r20, 0x02	; 2
    5910:	c4 0e       	add	r12, r20
    5912:	d1 1c       	adc	r13, r1
    5914:	12 96       	adiw	r26, 0x02	; 2
    5916:	bc 90       	ld	r11, X
    5918:	12 97       	sbiw	r26, 0x02	; 2
    591a:	13 96       	adiw	r26, 0x03	; 3
    591c:	ac 91       	ld	r26, X
    591e:	b5 e0       	ldi	r27, 0x05	; 5
    5920:	cb 16       	cp	r12, r27
    5922:	d1 04       	cpc	r13, r1
    5924:	40 f0       	brcs	.+16     	; 0x5936 <realloc+0xd4>
    5926:	b2 82       	std	Z+2, r11	; 0x02
    5928:	a3 83       	std	Z+3, r26	; 0x03
    592a:	91 82       	std	Z+1, r9	; 0x01
    592c:	80 82       	st	Z, r8
    592e:	d9 01       	movw	r26, r18
    5930:	6d 93       	st	X+, r22
    5932:	7c 93       	st	X, r23
    5934:	09 c0       	rjmp	.+18     	; 0x5948 <realloc+0xe6>
    5936:	0e 5f       	subi	r16, 0xFE	; 254
    5938:	1f 4f       	sbci	r17, 0xFF	; 255
    593a:	80 0f       	add	r24, r16
    593c:	91 1f       	adc	r25, r17
    593e:	f9 01       	movw	r30, r18
    5940:	91 83       	std	Z+1, r25	; 0x01
    5942:	80 83       	st	Z, r24
    5944:	eb 2d       	mov	r30, r11
    5946:	fa 2f       	mov	r31, r26
    5948:	e1 14       	cp	r14, r1
    594a:	f1 04       	cpc	r15, r1
    594c:	31 f0       	breq	.+12     	; 0x595a <realloc+0xf8>
    594e:	d7 01       	movw	r26, r14
    5950:	13 96       	adiw	r26, 0x03	; 3
    5952:	fc 93       	st	X, r31
    5954:	ee 93       	st	-X, r30
    5956:	12 97       	sbiw	r26, 0x02	; 2
    5958:	41 c0       	rjmp	.+130    	; 0x59dc <realloc+0x17a>
    595a:	f0 93 4d 08 	sts	0x084D, r31	; 0x80084d <__flp+0x1>
    595e:	e0 93 4c 08 	sts	0x084C, r30	; 0x80084c <__flp>
    5962:	3c c0       	rjmp	.+120    	; 0x59dc <realloc+0x17a>
    5964:	68 16       	cp	r6, r24
    5966:	79 06       	cpc	r7, r25
    5968:	08 f4       	brcc	.+2      	; 0x596c <realloc+0x10a>
    596a:	3c 01       	movw	r6, r24
    596c:	7d 01       	movw	r14, r26
    596e:	12 96       	adiw	r26, 0x02	; 2
    5970:	0d 90       	ld	r0, X+
    5972:	bc 91       	ld	r27, X
    5974:	a0 2d       	mov	r26, r0
    5976:	b7 cf       	rjmp	.-146    	; 0x58e6 <realloc+0x84>
    5978:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <__brkval>
    597c:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <__brkval+0x1>
    5980:	88 16       	cp	r8, r24
    5982:	99 06       	cpc	r9, r25
    5984:	e1 f4       	brne	.+56     	; 0x59be <realloc+0x15c>
    5986:	66 16       	cp	r6, r22
    5988:	77 06       	cpc	r7, r23
    598a:	c8 f4       	brcc	.+50     	; 0x59be <realloc+0x15c>
    598c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__malloc_heap_end>
    5990:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    5994:	00 97       	sbiw	r24, 0x00	; 0
    5996:	41 f4       	brne	.+16     	; 0x59a8 <realloc+0x146>
    5998:	8d b7       	in	r24, 0x3d	; 61
    599a:	9e b7       	in	r25, 0x3e	; 62
    599c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    59a0:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    59a4:	84 1b       	sub	r24, r20
    59a6:	95 0b       	sbc	r25, r21
    59a8:	e8 17       	cp	r30, r24
    59aa:	f9 07       	cpc	r31, r25
    59ac:	c8 f4       	brcc	.+50     	; 0x59e0 <realloc+0x17e>
    59ae:	f0 93 4b 08 	sts	0x084B, r31	; 0x80084b <__brkval+0x1>
    59b2:	e0 93 4a 08 	sts	0x084A, r30	; 0x80084a <__brkval>
    59b6:	f9 01       	movw	r30, r18
    59b8:	71 83       	std	Z+1, r23	; 0x01
    59ba:	60 83       	st	Z, r22
    59bc:	0f c0       	rjmp	.+30     	; 0x59dc <realloc+0x17a>
    59be:	cb 01       	movw	r24, r22
    59c0:	0e 94 10 2b 	call	0x5620	; 0x5620 <malloc>
    59c4:	7c 01       	movw	r14, r24
    59c6:	00 97       	sbiw	r24, 0x00	; 0
    59c8:	59 f0       	breq	.+22     	; 0x59e0 <realloc+0x17e>
    59ca:	a8 01       	movw	r20, r16
    59cc:	be 01       	movw	r22, r28
    59ce:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <memcpy>
    59d2:	ce 01       	movw	r24, r28
    59d4:	0e 94 a8 2b 	call	0x5750	; 0x5750 <free>
    59d8:	c7 01       	movw	r24, r14
    59da:	04 c0       	rjmp	.+8      	; 0x59e4 <realloc+0x182>
    59dc:	ce 01       	movw	r24, r28
    59de:	02 c0       	rjmp	.+4      	; 0x59e4 <realloc+0x182>
    59e0:	80 e0       	ldi	r24, 0x00	; 0
    59e2:	90 e0       	ldi	r25, 0x00	; 0
    59e4:	cd b7       	in	r28, 0x3d	; 61
    59e6:	de b7       	in	r29, 0x3e	; 62
    59e8:	ee e0       	ldi	r30, 0x0E	; 14
    59ea:	0c 94 c4 2d 	jmp	0x5b88	; 0x5b88 <__epilogue_restores__+0x8>

000059ee <abort>:
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	f8 94       	cli
    59f4:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__do_global_dtors>

000059f8 <atoi>:
    59f8:	fc 01       	movw	r30, r24
    59fa:	88 27       	eor	r24, r24
    59fc:	99 27       	eor	r25, r25
    59fe:	e8 94       	clt
    5a00:	21 91       	ld	r18, Z+
    5a02:	20 32       	cpi	r18, 0x20	; 32
    5a04:	e9 f3       	breq	.-6      	; 0x5a00 <atoi+0x8>
    5a06:	29 30       	cpi	r18, 0x09	; 9
    5a08:	10 f0       	brcs	.+4      	; 0x5a0e <atoi+0x16>
    5a0a:	2e 30       	cpi	r18, 0x0E	; 14
    5a0c:	c8 f3       	brcs	.-14     	; 0x5a00 <atoi+0x8>
    5a0e:	2b 32       	cpi	r18, 0x2B	; 43
    5a10:	41 f0       	breq	.+16     	; 0x5a22 <atoi+0x2a>
    5a12:	2d 32       	cpi	r18, 0x2D	; 45
    5a14:	39 f4       	brne	.+14     	; 0x5a24 <atoi+0x2c>
    5a16:	68 94       	set
    5a18:	04 c0       	rjmp	.+8      	; 0x5a22 <atoi+0x2a>
    5a1a:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__mulhi_const_10>
    5a1e:	82 0f       	add	r24, r18
    5a20:	91 1d       	adc	r25, r1
    5a22:	21 91       	ld	r18, Z+
    5a24:	20 53       	subi	r18, 0x30	; 48
    5a26:	2a 30       	cpi	r18, 0x0A	; 10
    5a28:	c0 f3       	brcs	.-16     	; 0x5a1a <atoi+0x22>
    5a2a:	1e f4       	brtc	.+6      	; 0x5a32 <atoi+0x3a>
    5a2c:	90 95       	com	r25
    5a2e:	81 95       	neg	r24
    5a30:	9f 4f       	sbci	r25, 0xFF	; 255
    5a32:	08 95       	ret

00005a34 <strcmp_P>:
    5a34:	fb 01       	movw	r30, r22
    5a36:	dc 01       	movw	r26, r24
    5a38:	8d 91       	ld	r24, X+
    5a3a:	05 90       	lpm	r0, Z+
    5a3c:	80 19       	sub	r24, r0
    5a3e:	01 10       	cpse	r0, r1
    5a40:	d9 f3       	breq	.-10     	; 0x5a38 <strcmp_P+0x4>
    5a42:	99 0b       	sbc	r25, r25
    5a44:	08 95       	ret

00005a46 <__strlen_P>:
    5a46:	fc 01       	movw	r30, r24
    5a48:	05 90       	lpm	r0, Z+
    5a4a:	00 20       	and	r0, r0
    5a4c:	e9 f7       	brne	.-6      	; 0x5a48 <__strlen_P+0x2>
    5a4e:	80 95       	com	r24
    5a50:	90 95       	com	r25
    5a52:	8e 0f       	add	r24, r30
    5a54:	9f 1f       	adc	r25, r31
    5a56:	08 95       	ret

00005a58 <strstr_P>:
    5a58:	fb 01       	movw	r30, r22
    5a5a:	55 91       	lpm	r21, Z+
    5a5c:	55 23       	and	r21, r21
    5a5e:	a9 f0       	breq	.+42     	; 0x5a8a <strstr_P+0x32>
    5a60:	bf 01       	movw	r22, r30
    5a62:	dc 01       	movw	r26, r24
    5a64:	4d 91       	ld	r20, X+
    5a66:	45 17       	cp	r20, r21
    5a68:	41 11       	cpse	r20, r1
    5a6a:	e1 f7       	brne	.-8      	; 0x5a64 <strstr_P+0xc>
    5a6c:	59 f4       	brne	.+22     	; 0x5a84 <strstr_P+0x2c>
    5a6e:	cd 01       	movw	r24, r26
    5a70:	05 90       	lpm	r0, Z+
    5a72:	00 20       	and	r0, r0
    5a74:	49 f0       	breq	.+18     	; 0x5a88 <strstr_P+0x30>
    5a76:	4d 91       	ld	r20, X+
    5a78:	40 15       	cp	r20, r0
    5a7a:	41 11       	cpse	r20, r1
    5a7c:	c9 f3       	breq	.-14     	; 0x5a70 <strstr_P+0x18>
    5a7e:	fb 01       	movw	r30, r22
    5a80:	41 11       	cpse	r20, r1
    5a82:	ef cf       	rjmp	.-34     	; 0x5a62 <strstr_P+0xa>
    5a84:	81 e0       	ldi	r24, 0x01	; 1
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	01 97       	sbiw	r24, 0x01	; 1
    5a8a:	08 95       	ret

00005a8c <memcpy>:
    5a8c:	fb 01       	movw	r30, r22
    5a8e:	dc 01       	movw	r26, r24
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <memcpy+0xa>
    5a92:	01 90       	ld	r0, Z+
    5a94:	0d 92       	st	X+, r0
    5a96:	41 50       	subi	r20, 0x01	; 1
    5a98:	50 40       	sbci	r21, 0x00	; 0
    5a9a:	d8 f7       	brcc	.-10     	; 0x5a92 <memcpy+0x6>
    5a9c:	08 95       	ret

00005a9e <strchr>:
    5a9e:	fc 01       	movw	r30, r24
    5aa0:	81 91       	ld	r24, Z+
    5aa2:	86 17       	cp	r24, r22
    5aa4:	21 f0       	breq	.+8      	; 0x5aae <strchr+0x10>
    5aa6:	88 23       	and	r24, r24
    5aa8:	d9 f7       	brne	.-10     	; 0x5aa0 <strchr+0x2>
    5aaa:	99 27       	eor	r25, r25
    5aac:	08 95       	ret
    5aae:	31 97       	sbiw	r30, 0x01	; 1
    5ab0:	cf 01       	movw	r24, r30
    5ab2:	08 95       	ret

00005ab4 <strcmp>:
    5ab4:	fb 01       	movw	r30, r22
    5ab6:	dc 01       	movw	r26, r24
    5ab8:	8d 91       	ld	r24, X+
    5aba:	01 90       	ld	r0, Z+
    5abc:	80 19       	sub	r24, r0
    5abe:	01 10       	cpse	r0, r1
    5ac0:	d9 f3       	breq	.-10     	; 0x5ab8 <strcmp+0x4>
    5ac2:	99 0b       	sbc	r25, r25
    5ac4:	08 95       	ret

00005ac6 <strcpy>:
    5ac6:	fb 01       	movw	r30, r22
    5ac8:	dc 01       	movw	r26, r24
    5aca:	01 90       	ld	r0, Z+
    5acc:	0d 92       	st	X+, r0
    5ace:	00 20       	and	r0, r0
    5ad0:	e1 f7       	brne	.-8      	; 0x5aca <strcpy+0x4>
    5ad2:	08 95       	ret

00005ad4 <strlen>:
    5ad4:	fc 01       	movw	r30, r24
    5ad6:	01 90       	ld	r0, Z+
    5ad8:	00 20       	and	r0, r0
    5ada:	e9 f7       	brne	.-6      	; 0x5ad6 <strlen+0x2>
    5adc:	80 95       	com	r24
    5ade:	90 95       	com	r25
    5ae0:	8e 0f       	add	r24, r30
    5ae2:	9f 1f       	adc	r25, r31
    5ae4:	08 95       	ret

00005ae6 <strncpy>:
    5ae6:	fb 01       	movw	r30, r22
    5ae8:	dc 01       	movw	r26, r24
    5aea:	41 50       	subi	r20, 0x01	; 1
    5aec:	50 40       	sbci	r21, 0x00	; 0
    5aee:	48 f0       	brcs	.+18     	; 0x5b02 <strncpy+0x1c>
    5af0:	01 90       	ld	r0, Z+
    5af2:	0d 92       	st	X+, r0
    5af4:	00 20       	and	r0, r0
    5af6:	c9 f7       	brne	.-14     	; 0x5aea <strncpy+0x4>
    5af8:	01 c0       	rjmp	.+2      	; 0x5afc <strncpy+0x16>
    5afa:	1d 92       	st	X+, r1
    5afc:	41 50       	subi	r20, 0x01	; 1
    5afe:	50 40       	sbci	r21, 0x00	; 0
    5b00:	e0 f7       	brcc	.-8      	; 0x5afa <strncpy+0x14>
    5b02:	08 95       	ret

00005b04 <strstr>:
    5b04:	fb 01       	movw	r30, r22
    5b06:	51 91       	ld	r21, Z+
    5b08:	55 23       	and	r21, r21
    5b0a:	a9 f0       	breq	.+42     	; 0x5b36 <strstr+0x32>
    5b0c:	bf 01       	movw	r22, r30
    5b0e:	dc 01       	movw	r26, r24
    5b10:	4d 91       	ld	r20, X+
    5b12:	45 17       	cp	r20, r21
    5b14:	41 11       	cpse	r20, r1
    5b16:	e1 f7       	brne	.-8      	; 0x5b10 <strstr+0xc>
    5b18:	59 f4       	brne	.+22     	; 0x5b30 <strstr+0x2c>
    5b1a:	cd 01       	movw	r24, r26
    5b1c:	01 90       	ld	r0, Z+
    5b1e:	00 20       	and	r0, r0
    5b20:	49 f0       	breq	.+18     	; 0x5b34 <strstr+0x30>
    5b22:	4d 91       	ld	r20, X+
    5b24:	40 15       	cp	r20, r0
    5b26:	41 11       	cpse	r20, r1
    5b28:	c9 f3       	breq	.-14     	; 0x5b1c <strstr+0x18>
    5b2a:	fb 01       	movw	r30, r22
    5b2c:	41 11       	cpse	r20, r1
    5b2e:	ef cf       	rjmp	.-34     	; 0x5b0e <strstr+0xa>
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	01 97       	sbiw	r24, 0x01	; 1
    5b36:	08 95       	ret

00005b38 <__mulhi_const_10>:
    5b38:	7a e0       	ldi	r23, 0x0A	; 10
    5b3a:	97 9f       	mul	r25, r23
    5b3c:	90 2d       	mov	r25, r0
    5b3e:	87 9f       	mul	r24, r23
    5b40:	80 2d       	mov	r24, r0
    5b42:	91 0d       	add	r25, r1
    5b44:	11 24       	eor	r1, r1
    5b46:	08 95       	ret

00005b48 <__prologue_saves__>:
    5b48:	2f 92       	push	r2
    5b4a:	3f 92       	push	r3
    5b4c:	4f 92       	push	r4
    5b4e:	5f 92       	push	r5
    5b50:	6f 92       	push	r6
    5b52:	7f 92       	push	r7
    5b54:	8f 92       	push	r8
    5b56:	9f 92       	push	r9
    5b58:	af 92       	push	r10
    5b5a:	bf 92       	push	r11
    5b5c:	cf 92       	push	r12
    5b5e:	df 92       	push	r13
    5b60:	ef 92       	push	r14
    5b62:	ff 92       	push	r15
    5b64:	0f 93       	push	r16
    5b66:	1f 93       	push	r17
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
    5b70:	ca 1b       	sub	r28, r26
    5b72:	db 0b       	sbc	r29, r27
    5b74:	0f b6       	in	r0, 0x3f	; 63
    5b76:	f8 94       	cli
    5b78:	de bf       	out	0x3e, r29	; 62
    5b7a:	0f be       	out	0x3f, r0	; 63
    5b7c:	cd bf       	out	0x3d, r28	; 61
    5b7e:	09 94       	ijmp

00005b80 <__epilogue_restores__>:
    5b80:	2a 88       	ldd	r2, Y+18	; 0x12
    5b82:	39 88       	ldd	r3, Y+17	; 0x11
    5b84:	48 88       	ldd	r4, Y+16	; 0x10
    5b86:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b88:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b90:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b92:	b9 84       	ldd	r11, Y+9	; 0x09
    5b94:	c8 84       	ldd	r12, Y+8	; 0x08
    5b96:	df 80       	ldd	r13, Y+7	; 0x07
    5b98:	ee 80       	ldd	r14, Y+6	; 0x06
    5b9a:	fd 80       	ldd	r15, Y+5	; 0x05
    5b9c:	0c 81       	ldd	r16, Y+4	; 0x04
    5b9e:	1b 81       	ldd	r17, Y+3	; 0x03
    5ba0:	aa 81       	ldd	r26, Y+2	; 0x02
    5ba2:	b9 81       	ldd	r27, Y+1	; 0x01
    5ba4:	ce 0f       	add	r28, r30
    5ba6:	d1 1d       	adc	r29, r1
    5ba8:	0f b6       	in	r0, 0x3f	; 63
    5baa:	f8 94       	cli
    5bac:	de bf       	out	0x3e, r29	; 62
    5bae:	0f be       	out	0x3f, r0	; 63
    5bb0:	cd bf       	out	0x3d, r28	; 61
    5bb2:	ed 01       	movw	r28, r26
    5bb4:	08 95       	ret

00005bb6 <__do_global_dtors>:
    5bb6:	14 e0       	ldi	r17, 0x04	; 4
    5bb8:	cf e1       	ldi	r28, 0x1F	; 31
    5bba:	d4 e0       	ldi	r29, 0x04	; 4
    5bbc:	04 c0       	rjmp	.+8      	; 0x5bc6 <__do_global_dtors+0x10>
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__tablejump2__>
    5bc4:	21 96       	adiw	r28, 0x01	; 1
    5bc6:	c0 32       	cpi	r28, 0x20	; 32
    5bc8:	d1 07       	cpc	r29, r17
    5bca:	c9 f7       	brne	.-14     	; 0x5bbe <__do_global_dtors+0x8>
    5bcc:	f8 94       	cli

00005bce <__stop_program>:
    5bce:	ff cf       	rjmp	.-2      	; 0x5bce <__stop_program>
