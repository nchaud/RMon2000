
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  000046c6  0000475a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000046c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ef  008001ba  008001ba  00004814  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004814  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce8  00000000  00000000  00004884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000200dd  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049bd  00000000  00000000  00025649  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007107  00000000  00000000  0002a006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f88  00000000  00000000  00031110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c00  00000000  00000000  00034098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011060  00000000  00000000  00039c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  0004acf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__dtors_end>
       4:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
       8:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
       c:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__vector_3>
      10:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__vector_3>
      14:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__vector_3>
      18:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      1c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      20:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      24:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      28:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      2c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      30:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      34:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      38:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      3c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      40:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__vector_16>
      44:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      48:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__vector_18>
      4c:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__vector_19>
      50:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      54:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      58:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      5c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>
      60:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__vector_24>
      64:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
      aa:	4c 65 6e 3a 20 00                                   Len: .

000000b0 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
      b0:	53 74 61 74 75 73 3a 20 00                          Status: .

000000b9 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
      b9:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000c1 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
      c1:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000000cc <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
      cc:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

000000d8 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      d8:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000e5 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      e5:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000f2 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
      f2:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000101 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     101:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000010a <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     10a:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000117 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     117:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000124 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     124:	09 2d 2d 2d 3e 20 00                                .---> .

0000012b <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     12b:	22 2c 00                                            ",.

0000012e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     12e:	22 2c 22 00                                         ",".

00000132 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     132:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000140 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     140:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000014e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     14e:	09 2d 2d 2d 3e 20 00                                .---> .

00000155 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     155:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000161 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     161:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

0000016d <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c_0>:
     16d:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     17d:	61 74 61 3a 20 00                                   ata: .

00000183 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c>:
     183:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000018e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     18e:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000199 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     199:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000001a6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     1a6:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000001b1 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     1b1:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000001b9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     1b9:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000001c2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     1c2:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000001cf <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     1cf:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     1df:	44 22 2c 00                                         D",.

000001e3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     1e3:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     1f3:	45 52 22 2c 00                                      ER",.

000001f8 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     1f8:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000202 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     202:	09 2d 2d 2d 3e 20 00                                .---> .

00000209 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     209:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000213 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     213:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     223:	4e 22 2c 00                                         N",.

00000227 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     227:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     237:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000245 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     245:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000250 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     250:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000025b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     25b:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000263 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     263:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000026c <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     26c:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000274 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     274:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000027d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     27d:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000285 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     285:	41 54 2b 43 53 51 00                                AT+CSQ.

0000028c <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     28c:	2b 43 53 51 3a 20 00                                +CSQ: .

00000293 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     293:	41 54 2b 43 53 51 00                                AT+CSQ.

0000029a <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     29a:	2b 43 53 51 3a 20 00                                +CSQ: .

000002a1 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     2a1:	41 54 2b 43 42 43 00                                AT+CBC.

000002a8 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     2a8:	2b 43 42 43 3a 20 00                                +CBC: .

000002af <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     2af:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000002ba <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     2ba:	09 3c 2d 2d 2d 20 00                                .<--- .

000002c1 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     2c1:	09 2d 2d 2d 3e 20 00                                .---> .

000002c8 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     2c8:	41 54 45 30 00                                      ATE0.

000002cd <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     2cd:	41 54 45 30 00                                      ATE0.

000002d2 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     2d2:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     2e2:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000002f1 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     2f1:	41 54 00                                            AT.

000002f4 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     2f4:	41 54 00                                            AT.

000002f7 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     2f7:	41 54 00                                            AT.

000002fa <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     2fa:	41 54 00                                            AT.

000002fd <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     2fd:	41 54 00                                            AT.

00000300 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     300:	41 54 00                                            AT.

00000303 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     303:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     313:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000324 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     324:	4f 4b 00                                            OK.

00000327 <_ZZN13Adafruit_FONAC4EabE3__c>:
     327:	46 4f 4e 41 6e 65 74 00                             FONAnet.

0000032f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     32f:	45 72 72 6f 72 3d 00                                Error=.

00000336 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     336:	20 7c 20 00                                          | .

0000033a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     33a:	54 65 6d 70 3d 00                                   Temp=.

00000340 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     340:	20 7c 20 00                                          | .

00000344 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     344:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000034d <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     34d:	20 7c 20 00                                          | .

00000351 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     351:	50 56 2d 56 3d 00                                   PV-V=.

00000357 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     357:	20 7c 20 00                                          | .

0000035b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     35b:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000363 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     363:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000370 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     370:	20 7c 20 00                                          | .

00000374 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     374:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000037d <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     37d:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000387 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     387:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     397:	6f 64 65 3d 00                                      ode=.

0000039c <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     39c:	20 7c 20 00                                          | .

000003a0 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     3a0:	42 45 52 3d 00                                      BER=.

000003a5 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     3a5:	20 7c 20 00                                          | .

000003a9 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     3a9:	52 53 53 49 3d 00                                   RSSI=.

000003af <_ZL12b64_alphabet>:
     3af:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     3bf:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     3cf:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     3df:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000003f0 <_ZZ4loopE3__c>:
     3f0:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000003fa <_ZZ8sendDatavE3__c_2>:
     3fa:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     40a:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     41a:	6f 72 20 73 65 6e 64 3a 00                          or send:.

00000423 <_ZZ8sendDatavE3__c_1>:
     423:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     433:	52 29 00                                            R).

00000436 <_ZZ8sendDatavE3__c_0>:
     436:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     446:	69 6e 67 2e 2e 2e 29 00                             ing...).

0000044e <_ZZ8sendDatavE3__c>:
     44e:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     45e:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

0000046d <_ZZ17createEncodedDataP13Adafruit_FONAPchP14DailyCycleDataE3__c>:
     46d:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     47d:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     48d:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

0000049d <_ZZ12takeReadingsvE3__c>:
     49d:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     4ad:	2e 2e 00                                            ...

000004b0 <_ZZ21ensureFonaInitialisedbPbE3__c_9>:
     4b0:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     4c0:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     4d0:	64 6f 6e 65 29 00                                   done).

000004d6 <_ZZ21ensureFonaInitialisedbPbE3__c_8>:
     4d6:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     4e6:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     4f6:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     506:	75 65 20 6e 6f 77 29 00                             ue now).

0000050e <_ZZ21ensureFonaInitialisedbPbE3__c_7>:
     50e:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     51e:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     52e:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

0000053d <_ZZ21ensureFonaInitialisedbPbE3__c_6>:
     53d:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     54d:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

00000558 <_ZZ21ensureFonaInitialisedbPbE3__c_5>:
     558:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     568:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000578 <_ZZ21ensureFonaInitialisedbPbE3__c_4>:
     578:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     588:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     598:	65 64 00                                            ed.

0000059b <_ZZ21ensureFonaInitialisedbPbE3__c_3>:
     59b:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     5ab:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     5bb:	6f 72 74 6c 79 00                                   ortly.

000005c1 <_ZZ21ensureFonaInitialisedbPbE3__c_2>:
     5c1:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     5d1:	6e 67 20 47 50 52 53 00                             ng GPRS.

000005d9 <_ZZ21ensureFonaInitialisedbPbE3__c_1>:
     5d9:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     5e9:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

000005f6 <_ZZ21ensureFonaInitialisedbPbE3__c_0>:
     5f6:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     606:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000611 <_ZZ21ensureFonaInitialisedbPbE3__c>:
     611:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     621:	61 2e 2e 2e 00                                      a....

00000626 <_ZZ5setupE3__c>:
     626:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000632 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     632:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     642:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     652:	73 73 69 6f 6e 3a 00                                ssion:.

00000659 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     659:	2a 2a 2a 2a 00                                      ****.

0000065e <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     65e:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     66e:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     67e:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     68e:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

00000699 <digital_pin_to_timer_PGM>:
     699:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     6a9:	00 00 00 00                                         ....

000006ad <digital_pin_to_bit_mask_PGM>:
     6ad:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6bd:	04 08 10 20                                         ... 

000006c1 <digital_pin_to_port_PGM>:
     6c1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6d1:	03 03 03 03                                         ....

000006d5 <port_to_input_PGM>:
     6d5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000006df <port_to_output_PGM>:
     6df:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006e9 <port_to_mode_PGM>:
     6e9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000006f4 <__ctors_start>:
     6f4:	8e 12       	cpse	r8, r30
     6f6:	32 17       	cp	r19, r18
     6f8:	22 19       	sub	r18, r2

000006fa <__ctors_end>:
     6fa:	a4 12       	cpse	r10, r20

000006fc <__dtors_end>:
     6fc:	11 24       	eor	r1, r1
     6fe:	1f be       	out	0x3f, r1	; 63
     700:	cf ef       	ldi	r28, 0xFF	; 255
     702:	d8 e0       	ldi	r29, 0x08	; 8
     704:	de bf       	out	0x3e, r29	; 62
     706:	cd bf       	out	0x3d, r28	; 61

00000708 <__do_copy_data>:
     708:	11 e0       	ldi	r17, 0x01	; 1
     70a:	a0 e0       	ldi	r26, 0x00	; 0
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	e6 ec       	ldi	r30, 0xC6	; 198
     710:	f6 e4       	ldi	r31, 0x46	; 70
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x10>
     714:	05 90       	lpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	aa 3b       	cpi	r26, 0xBA	; 186
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0xc>

0000071e <__do_clear_bss>:
     71e:	24 e0       	ldi	r18, 0x04	; 4
     720:	aa eb       	ldi	r26, 0xBA	; 186
     722:	b1 e0       	ldi	r27, 0x01	; 1
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a9 3a       	cpi	r26, 0xA9	; 169
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>

0000072e <__do_global_ctors>:
     72e:	13 e0       	ldi	r17, 0x03	; 3
     730:	cd e7       	ldi	r28, 0x7D	; 125
     732:	d3 e0       	ldi	r29, 0x03	; 3
     734:	04 c0       	rjmp	.+8      	; 0x73e <__do_global_ctors+0x10>
     736:	21 97       	sbiw	r28, 0x01	; 1
     738:	fe 01       	movw	r30, r28
     73a:	0e 94 90 20 	call	0x4120	; 0x4120 <__tablejump2__>
     73e:	ca 37       	cpi	r28, 0x7A	; 122
     740:	d1 07       	cpc	r29, r17
     742:	c9 f7       	brne	.-14     	; 0x736 <__do_global_ctors+0x8>
     744:	0e 94 50 19 	call	0x32a0	; 0x32a0 <main>
     748:	0c 94 56 23 	jmp	0x46ac	; 0x46ac <__do_global_dtors>

0000074c <__bad_interrupt>:
     74c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000750 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     750:	83 5e       	subi	r24, 0xE3	; 227
     752:	9e 4f       	sbci	r25, 0xFE	; 254
     754:	dc 01       	movw	r26, r24
     756:	8d 91       	ld	r24, X+
     758:	9c 91       	ld	r25, X
     75a:	dc 01       	movw	r26, r24
     75c:	ed 91       	ld	r30, X+
     75e:	fc 91       	ld	r31, X
     760:	04 80       	ldd	r0, Z+4	; 0x04
     762:	f5 81       	ldd	r31, Z+5	; 0x05
     764:	e0 2d       	mov	r30, r0
     766:	09 94       	ijmp

00000768 <_ZN13Adafruit_FONA5writeEh>:
     768:	83 5e       	subi	r24, 0xE3	; 227
     76a:	9e 4f       	sbci	r25, 0xFE	; 254
     76c:	dc 01       	movw	r26, r24
     76e:	8d 91       	ld	r24, X+
     770:	9c 91       	ld	r25, X
     772:	dc 01       	movw	r26, r24
     774:	ed 91       	ld	r30, X+
     776:	fc 91       	ld	r31, X
     778:	01 90       	ld	r0, Z+
     77a:	f0 81       	ld	r31, Z
     77c:	e0 2d       	mov	r30, r0
     77e:	09 94       	ijmp

00000780 <_ZN13Adafruit_FONA4readEv>:
     780:	83 5e       	subi	r24, 0xE3	; 227
     782:	9e 4f       	sbci	r25, 0xFE	; 254
     784:	dc 01       	movw	r26, r24
     786:	8d 91       	ld	r24, X+
     788:	9c 91       	ld	r25, X
     78a:	dc 01       	movw	r26, r24
     78c:	ed 91       	ld	r30, X+
     78e:	fc 91       	ld	r31, X
     790:	06 80       	ldd	r0, Z+6	; 0x06
     792:	f7 81       	ldd	r31, Z+7	; 0x07
     794:	e0 2d       	mov	r30, r0
     796:	09 94       	ijmp

00000798 <_ZN13Adafruit_FONA4peekEv>:
     798:	83 5e       	subi	r24, 0xE3	; 227
     79a:	9e 4f       	sbci	r25, 0xFE	; 254
     79c:	dc 01       	movw	r26, r24
     79e:	8d 91       	ld	r24, X+
     7a0:	9c 91       	ld	r25, X
     7a2:	dc 01       	movw	r26, r24
     7a4:	ed 91       	ld	r30, X+
     7a6:	fc 91       	ld	r31, X
     7a8:	00 84       	ldd	r0, Z+8	; 0x08
     7aa:	f1 85       	ldd	r31, Z+9	; 0x09
     7ac:	e0 2d       	mov	r30, r0
     7ae:	09 94       	ijmp

000007b0 <_ZN13Adafruit_FONA5flushEv>:
     7b0:	83 5e       	subi	r24, 0xE3	; 227
     7b2:	9e 4f       	sbci	r25, 0xFE	; 254
     7b4:	dc 01       	movw	r26, r24
     7b6:	8d 91       	ld	r24, X+
     7b8:	9c 91       	ld	r25, X
     7ba:	dc 01       	movw	r26, r24
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	02 84       	ldd	r0, Z+10	; 0x0a
     7c2:	f3 85       	ldd	r31, Z+11	; 0x0b
     7c4:	e0 2d       	mov	r30, r0
     7c6:	09 94       	ijmp

000007c8 <_ZN13Adafruit_FONAC1Eab>:
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	ec 01       	movw	r28, r24
     7d2:	06 2f       	mov	r16, r22
     7d4:	14 2f       	mov	r17, r20
     7d6:	1b 82       	std	Y+3, r1	; 0x03
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	88 ee       	ldi	r24, 0xE8	; 232
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	a0 e0       	ldi	r26, 0x00	; 0
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	8c 83       	std	Y+4, r24	; 0x04
     7e4:	9d 83       	std	Y+5, r25	; 0x05
     7e6:	ae 83       	std	Y+6, r26	; 0x06
     7e8:	bf 83       	std	Y+7, r27	; 0x07
     7ea:	8d e4       	ldi	r24, 0x4D	; 77
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	99 83       	std	Y+1, r25	; 0x01
     7f0:	88 83       	st	Y, r24
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	8e 87       	std	Y+14, r24	; 0x0e
     7f6:	6c e9       	ldi	r22, 0x9C	; 156
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	ce 01       	movw	r24, r28
     7fc:	8b 5e       	subi	r24, 0xEB	; 235
     7fe:	9e 4f       	sbci	r25, 0xFE	; 254
     800:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <_ZN6StringC1EPKc>
     804:	0c 87       	std	Y+12, r16	; 0x0c
     806:	1d 87       	std	Y+13, r17	; 0x0d
     808:	fe 01       	movw	r30, r28
     80a:	e2 5f       	subi	r30, 0xF2	; 242
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	87 e2       	ldi	r24, 0x27	; 39
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
     816:	32 96       	adiw	r30, 0x02	; 2
     818:	11 82       	std	Z+1, r1	; 0x01
     81a:	10 82       	st	Z, r1
     81c:	32 96       	adiw	r30, 0x02	; 2
     81e:	11 82       	std	Z+1, r1	; 0x01
     820:	10 82       	st	Z, r1
     822:	3b 96       	adiw	r30, 0x0b	; 11
     824:	11 82       	std	Z+1, r1	; 0x01
     826:	10 82       	st	Z, r1
     828:	39 97       	sbiw	r30, 0x09	; 9
     82a:	10 82       	st	Z, r1
     82c:	c5 5e       	subi	r28, 0xE5	; 229
     82e:	de 4f       	sbci	r29, 0xFE	; 254
     830:	84 e2       	ldi	r24, 0x24	; 36
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	99 83       	std	Y+1, r25	; 0x01
     836:	88 83       	st	Y, r24
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     842:	8b 5e       	subi	r24, 0xEB	; 235
     844:	9e 4f       	sbci	r25, 0xFE	; 254
     846:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <_ZN6StringaSERKS_>

0000084a <_ZN13Adafruit_FONA10flushInputEv>:
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	8c 01       	movw	r16, r24
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	88 97       	sbiw	r24, 0x28	; 40
     860:	d8 f4       	brcc	.+54     	; 0x898 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     862:	e8 81       	ld	r30, Y
     864:	f9 81       	ldd	r31, Y+1	; 0x01
     866:	04 80       	ldd	r0, Z+4	; 0x04
     868:	f5 81       	ldd	r31, Z+5	; 0x05
     86a:	e0 2d       	mov	r30, r0
     86c:	ce 01       	movw	r24, r28
     86e:	09 95       	icall
     870:	89 2b       	or	r24, r25
     872:	51 f0       	breq	.+20     	; 0x888 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     874:	e8 81       	ld	r30, Y
     876:	f9 81       	ldd	r31, Y+1	; 0x01
     878:	06 80       	ldd	r0, Z+6	; 0x06
     87a:	f7 81       	ldd	r31, Z+7	; 0x07
     87c:	e0 2d       	mov	r30, r0
     87e:	ce 01       	movw	r24, r28
     880:	09 95       	icall
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	ed cf       	rjmp	.-38     	; 0x862 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     894:	c8 01       	movw	r24, r16
     896:	e0 cf       	rjmp	.-64     	; 0x858 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	08 95       	ret

000008a2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	8b 01       	movw	r16, r22
     8b0:	f4 2e       	mov	r15, r20
     8b2:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
     8b6:	6e e4       	ldi	r22, 0x4E	; 78
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	8b eb       	ldi	r24, 0xBB	; 187
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     8c2:	60 e4       	ldi	r22, 0x40	; 64
     8c4:	71 e0       	ldi	r23, 0x01	; 1
     8c6:	8b eb       	ldi	r24, 0xBB	; 187
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     8ce:	b8 01       	movw	r22, r16
     8d0:	8b eb       	ldi	r24, 0xBB	; 187
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     8d8:	62 e2       	ldi	r22, 0x22	; 34
     8da:	8b eb       	ldi	r24, 0xBB	; 187
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print7printlnEc>
     8e2:	c3 5e       	subi	r28, 0xE3	; 227
     8e4:	de 4f       	sbci	r29, 0xFE	; 254
     8e6:	62 e3       	ldi	r22, 0x32	; 50
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	88 81       	ld	r24, Y
     8ec:	99 81       	ldd	r25, Y+1	; 0x01
     8ee:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     8f2:	b8 01       	movw	r22, r16
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     8fc:	88 81       	ld	r24, Y
     8fe:	99 81       	ldd	r25, Y+1	; 0x01
     900:	ff 20       	and	r15, r15
     902:	19 f0       	breq	.+6      	; 0x90a <__stack+0xb>
     904:	6e e2       	ldi	r22, 0x2E	; 46
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
     90a:	6b e2       	ldi	r22, 0x2B	; 43
     90c:	71 e0       	ldi	r23, 0x01	; 1
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>

0000091c <_ZN13Adafruit_FONA8readlineEjb>:
     91c:	bf 92       	push	r11
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	7c 01       	movw	r14, r24
     930:	b4 2e       	mov	r11, r20
     932:	8b 01       	movw	r16, r22
     934:	00 0f       	add	r16, r16
     936:	11 1f       	adc	r17, r17
     938:	00 0f       	add	r16, r16
     93a:	11 1f       	adc	r17, r17
     93c:	c0 e0       	ldi	r28, 0x00	; 0
     93e:	d0 e0       	ldi	r29, 0x00	; 0
     940:	67 01       	movw	r12, r14
     942:	83 ee       	ldi	r24, 0xE3	; 227
     944:	c8 1a       	sub	r12, r24
     946:	8e ef       	ldi	r24, 0xFE	; 254
     948:	d8 0a       	sbc	r13, r24
     94a:	01 15       	cp	r16, r1
     94c:	11 05       	cpc	r17, r1
     94e:	c9 f1       	breq	.+114    	; 0x9c2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     950:	ce 3f       	cpi	r28, 0xFE	; 254
     952:	d1 05       	cpc	r29, r1
     954:	98 f0       	brcs	.+38     	; 0x97c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     956:	62 e9       	ldi	r22, 0x92	; 146
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	8b eb       	ldi	r24, 0xBB	; 187
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
     962:	2f c0       	rjmp	.+94     	; 0x9c2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     964:	f6 01       	movw	r30, r12
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	dc 01       	movw	r26, r24
     96c:	ed 91       	ld	r30, X+
     96e:	fc 91       	ld	r31, X
     970:	06 80       	ldd	r0, Z+6	; 0x06
     972:	f7 81       	ldd	r31, Z+7	; 0x07
     974:	e0 2d       	mov	r30, r0
     976:	09 95       	icall
     978:	8d 30       	cpi	r24, 0x0D	; 13
     97a:	69 f4       	brne	.+26     	; 0x996 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     97c:	d6 01       	movw	r26, r12
     97e:	8d 91       	ld	r24, X+
     980:	9c 91       	ld	r25, X
     982:	dc 01       	movw	r26, r24
     984:	ed 91       	ld	r30, X+
     986:	fc 91       	ld	r31, X
     988:	04 80       	ldd	r0, Z+4	; 0x04
     98a:	f5 81       	ldd	r31, Z+5	; 0x05
     98c:	e0 2d       	mov	r30, r0
     98e:	09 95       	icall
     990:	89 2b       	or	r24, r25
     992:	41 f7       	brne	.-48     	; 0x964 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     994:	0c c0       	rjmp	.+24     	; 0x9ae <_ZN13Adafruit_FONA8readlineEjb+0x92>
     996:	8a 30       	cpi	r24, 0x0A	; 10
     998:	21 f4       	brne	.+8      	; 0x9a2 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     99a:	20 97       	sbiw	r28, 0x00	; 0
     99c:	79 f3       	breq	.-34     	; 0x97c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     99e:	bb 20       	and	r11, r11
     9a0:	81 f0       	breq	.+32     	; 0x9c2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9a2:	f7 01       	movw	r30, r14
     9a4:	ec 0f       	add	r30, r28
     9a6:	fd 1f       	adc	r31, r29
     9a8:	87 87       	std	Z+15, r24	; 0x0f
     9aa:	21 96       	adiw	r28, 0x01	; 1
     9ac:	e7 cf       	rjmp	.-50     	; 0x97c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9ae:	01 50       	subi	r16, 0x01	; 1
     9b0:	11 09       	sbc	r17, r1
     9b2:	39 f0       	breq	.+14     	; 0x9c2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     9c0:	c4 cf       	rjmp	.-120    	; 0x94a <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     9c2:	f7 01       	movw	r30, r14
     9c4:	ec 0f       	add	r30, r28
     9c6:	fd 1f       	adc	r31, r29
     9c8:	17 86       	std	Z+15, r1	; 0x0f
     9ca:	8c 2f       	mov	r24, r28
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	08 95       	ret

000009e0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
     9ea:	8b 01       	movw	r16, r22
     9ec:	ba 01       	movw	r22, r20
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
     9f4:	68 e9       	ldi	r22, 0x98	; 152
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	8b eb       	ldi	r24, 0xBB	; 187
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     a00:	2f 96       	adiw	r28, 0x0f	; 15
     a02:	be 01       	movw	r22, r28
     a04:	8b eb       	ldi	r24, 0xBB	; 187
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
     a0c:	b8 01       	movw	r22, r16
     a0e:	ce 01       	movw	r24, r28
     a10:	0e 94 9b 22 	call	0x4536	; 0x4536 <strcmp_P>
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	89 2b       	or	r24, r25
     a18:	09 f0       	breq	.+2      	; 0xa1c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	82 2f       	mov	r24, r18
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	ec 01       	movw	r28, r24
     a2e:	fc 01       	movw	r30, r24
     a30:	e3 5e       	subi	r30, 0xE3	; 227
     a32:	fe 4f       	sbci	r31, 0xFE	; 254
     a34:	66 23       	and	r22, r22
     a36:	31 f0       	breq	.+12     	; 0xa44 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     a38:	62 e2       	ldi	r22, 0x22	; 34
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print7printlnEc>
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
     a4c:	fe 01       	movw	r30, r28
     a4e:	e5 5e       	subi	r30, 0xE5	; 229
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	60 81       	ld	r22, Z
     a54:	71 81       	ldd	r23, Z+1	; 0x01
     a56:	40 e1       	ldi	r20, 0x10	; 16
     a58:	57 e2       	ldi	r21, 0x27	; 39
     a5a:	ce 01       	movw	r24, r28
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000a64 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	ec 01       	movw	r28, r24
     a6e:	8a 01       	movw	r16, r20
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a76:	fe 01       	movw	r30, r28
     a78:	e3 5e       	subi	r30, 0xE3	; 227
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	b8 01       	movw	r22, r16
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	ce 01       	movw	r24, r28
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000a96 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	ec 01       	movw	r28, r24
     aa0:	8a 01       	movw	r16, r20
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     aa8:	fe 01       	movw	r30, r28
     aaa:	e3 5e       	subi	r30, 0xE3	; 227
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	b8 01       	movw	r22, r16
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN5Print5printERK6String>
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	ce 01       	movw	r24, r28
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000ac8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
     ad2:	8a 01       	movw	r16, r20
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     ada:	fe 01       	movw	r30, r28
     adc:	e3 5e       	subi	r30, 0xE3	; 227
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	b8 01       	movw	r22, r16
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	ce 01       	movw	r24, r28
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000afa <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	ec 01       	movw	r28, r24
     b08:	69 01       	movw	r12, r18
     b0a:	7a 01       	movw	r14, r20
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b12:	fe 01       	movw	r30, r28
     b14:	e3 5e       	subi	r30, 0xE3	; 227
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	2a e0       	ldi	r18, 0x0A	; 10
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	b7 01       	movw	r22, r14
     b1e:	a6 01       	movw	r20, r12
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	0e 94 ae 1a 	call	0x355c	; 0x355c <_ZN5Print5printEli>
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	ce 01       	movw	r24, r28
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b3c <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     b3c:	4f 92       	push	r4
     b3e:	5f 92       	push	r5
     b40:	6f 92       	push	r6
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	7c 01       	movw	r14, r24
     b5a:	2a 01       	movw	r4, r20
     b5c:	3b 01       	movw	r6, r22
     b5e:	48 01       	movw	r8, r16
     b60:	59 01       	movw	r10, r18
     b62:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
     b66:	64 e2       	ldi	r22, 0x24	; 36
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	8b eb       	ldi	r24, 0xBB	; 187
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     b72:	67 e1       	ldi	r22, 0x17	; 23
     b74:	71 e0       	ldi	r23, 0x01	; 1
     b76:	8b eb       	ldi	r24, 0xBB	; 187
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     b7e:	2a e0       	ldi	r18, 0x0A	; 10
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	b3 01       	movw	r22, r6
     b84:	a2 01       	movw	r20, r4
     b86:	8b eb       	ldi	r24, 0xBB	; 187
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN5Print5printEmi>
     b8e:	6c e2       	ldi	r22, 0x2C	; 44
     b90:	8b eb       	ldi	r24, 0xBB	; 187
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_ZN5Print5printEc>
     b98:	2a e0       	ldi	r18, 0x0A	; 10
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	b5 01       	movw	r22, r10
     b9e:	a4 01       	movw	r20, r8
     ba0:	8b eb       	ldi	r24, 0xBB	; 187
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN5Print7printlnEmi>
     ba8:	e7 01       	movw	r28, r14
     baa:	c3 5e       	subi	r28, 0xE3	; 227
     bac:	de 4f       	sbci	r29, 0xFE	; 254
     bae:	6a e0       	ldi	r22, 0x0A	; 10
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	88 81       	ld	r24, Y
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     bba:	2a e0       	ldi	r18, 0x0A	; 10
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	b3 01       	movw	r22, r6
     bc0:	a2 01       	movw	r20, r4
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN5Print5printEmi>
     bca:	67 e0       	ldi	r22, 0x07	; 7
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	88 81       	ld	r24, Y
     bd0:	99 81       	ldd	r25, Y+1	; 0x01
     bd2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
     bd6:	2a e0       	ldi	r18, 0x0A	; 10
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	b5 01       	movw	r22, r10
     bdc:	a4 01       	movw	r20, r8
     bde:	88 81       	ld	r24, Y
     be0:	99 81       	ldd	r25, Y+1	; 0x01
     be2:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN5Print7printlnEmi>
     be6:	40 e1       	ldi	r20, 0x10	; 16
     be8:	57 e2       	ldi	r21, 0x27	; 39
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	c7 01       	movw	r24, r14
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	5f 90       	pop	r5
     c0a:	4f 90       	pop	r4
     c0c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000c10 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
     c1e:	8b 01       	movw	r16, r22
     c20:	7a 01       	movw	r14, r20
     c22:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
     c26:	6b e8       	ldi	r22, 0x8B	; 139
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	8b eb       	ldi	r24, 0xBB	; 187
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     c32:	b8 01       	movw	r22, r16
     c34:	8b eb       	ldi	r24, 0xBB	; 187
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
     c3c:	fe 01       	movw	r30, r28
     c3e:	e3 5e       	subi	r30, 0xE3	; 227
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	b8 01       	movw	r22, r16
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	b7 01       	movw	r22, r14
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
     c56:	18 2f       	mov	r17, r24
     c58:	64 e8       	ldi	r22, 0x84	; 132
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	8b eb       	ldi	r24, 0xBB	; 187
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     c64:	be 01       	movw	r22, r28
     c66:	61 5f       	subi	r22, 0xF1	; 241
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	8b eb       	ldi	r24, 0xBB	; 187
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
     c72:	81 2f       	mov	r24, r17
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
     c9c:	6b 01       	movw	r12, r22
     c9e:	49 01       	movw	r8, r18
     ca0:	5a 01       	movw	r10, r20
     ca2:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
     ca6:	6d e7       	ldi	r22, 0x7D	; 125
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	8b eb       	ldi	r24, 0xBB	; 187
     cac:	93 e0       	ldi	r25, 0x03	; 3
     cae:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     cb2:	b6 01       	movw	r22, r12
     cb4:	8b eb       	ldi	r24, 0xBB	; 187
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     cbc:	2a e0       	ldi	r18, 0x0A	; 10
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b5 01       	movw	r22, r10
     cc2:	a4 01       	movw	r20, r8
     cc4:	8b eb       	ldi	r24, 0xBB	; 187
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEli>
     ccc:	7e 01       	movw	r14, r28
     cce:	83 ee       	ldi	r24, 0xE3	; 227
     cd0:	e8 1a       	sub	r14, r24
     cd2:	8e ef       	ldi	r24, 0xFE	; 254
     cd4:	f8 0a       	sbc	r15, r24
     cd6:	b6 01       	movw	r22, r12
     cd8:	f7 01       	movw	r30, r14
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     ce2:	2a e0       	ldi	r18, 0x0A	; 10
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	b5 01       	movw	r22, r10
     ce8:	a4 01       	movw	r20, r8
     cea:	f7 01       	movw	r30, r14
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEli>
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	b8 01       	movw	r22, r16
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
     cfe:	18 2f       	mov	r17, r24
     d00:	66 e7       	ldi	r22, 0x76	; 118
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	8b eb       	ldi	r24, 0xBB	; 187
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     d0c:	be 01       	movw	r22, r28
     d0e:	61 5f       	subi	r22, 0xF1	; 241
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	8b eb       	ldi	r24, 0xBB	; 187
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
     d1a:	81 2f       	mov	r24, r17
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	08 95       	ret

00000d36 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
     d4c:	6b 01       	movw	r12, r22
     d4e:	7a 01       	movw	r14, r20
     d50:	59 01       	movw	r10, r18
     d52:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
     d56:	6f e6       	ldi	r22, 0x6F	; 111
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	8b eb       	ldi	r24, 0xBB	; 187
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     d62:	b6 01       	movw	r22, r12
     d64:	8b eb       	ldi	r24, 0xBB	; 187
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     d6c:	62 e2       	ldi	r22, 0x22	; 34
     d6e:	8b eb       	ldi	r24, 0xBB	; 187
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_ZN5Print5printEc>
     d76:	b7 01       	movw	r22, r14
     d78:	8b eb       	ldi	r24, 0xBB	; 187
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     d80:	62 e2       	ldi	r22, 0x22	; 34
     d82:	8b eb       	ldi	r24, 0xBB	; 187
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print7printlnEc>
     d8a:	8e 01       	movw	r16, r28
     d8c:	03 5e       	subi	r16, 0xE3	; 227
     d8e:	1e 4f       	sbci	r17, 0xFE	; 254
     d90:	b6 01       	movw	r22, r12
     d92:	f8 01       	movw	r30, r16
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     d9c:	62 e2       	ldi	r22, 0x22	; 34
     d9e:	f8 01       	movw	r30, r16
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_ZN5Print5printEc>
     da8:	b7 01       	movw	r22, r14
     daa:	f8 01       	movw	r30, r16
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     db4:	62 e2       	ldi	r22, 0x22	; 34
     db6:	f8 01       	movw	r30, r16
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print7printlnEc>
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	b5 01       	movw	r22, r10
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
     dca:	18 2f       	mov	r17, r24
     dcc:	68 e6       	ldi	r22, 0x68	; 104
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	8b eb       	ldi	r24, 0xBB	; 187
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     dd8:	be 01       	movw	r22, r28
     dda:	61 5f       	subi	r22, 0xF1	; 241
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8b eb       	ldi	r24, 0xBB	; 187
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
     de6:	81 2f       	mov	r24, r17
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	08 95       	ret

00000dfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
     e08:	8a 01       	movw	r16, r20
     e0a:	a9 01       	movw	r20, r18
     e0c:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e10:	88 23       	and	r24, r24
     e12:	41 f0       	breq	.+16     	; 0xe24 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     e14:	b8 01       	movw	r22, r16
     e16:	ce 01       	movw	r24, r28
     e18:	0f 96       	adiw	r24, 0x0f	; 15
     e1a:	0e 94 9b 22 	call	0x4536	; 0x4536 <strcmp_P>
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	89 2b       	or	r24, r25
     e22:	09 f0       	breq	.+2      	; 0xe26 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	82 2f       	mov	r24, r18
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret

00000e32 <_ZN13Adafruit_FONA5beginEhh>:
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ec 01       	movw	r28, r24
     e44:	f6 2e       	mov	r15, r22
     e46:	e4 2e       	mov	r14, r20
     e48:	8f e1       	ldi	r24, 0x1F	; 31
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 5f 19 	call	0x32be	; 0x32be <_Znwj>
     e50:	8c 01       	movw	r16, r24
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	4e 2d       	mov	r20, r14
     e56:	6f 2d       	mov	r22, r15
     e58:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_ZN14SoftwareSerialC1Ehhb>
     e5c:	7e 01       	movw	r14, r28
     e5e:	83 ee       	ldi	r24, 0xE3	; 227
     e60:	e8 1a       	sub	r14, r24
     e62:	8e ef       	ldi	r24, 0xFE	; 254
     e64:	f8 0a       	sbc	r15, r24
     e66:	d7 01       	movw	r26, r14
     e68:	0d 93       	st	X+, r16
     e6a:	1c 93       	st	X, r17
     e6c:	40 ec       	ldi	r20, 0xC0	; 192
     e6e:	52 e1       	ldi	r21, 0x12	; 18
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	c8 01       	movw	r24, r16
     e76:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN14SoftwareSerial5beginEl>
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e7e:	0e 94 4d 1c 	call	0x389a	; 0x389a <pinMode>
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	8c 85       	ldd	r24, Y+12	; 0x0c
     e86:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
     e8a:	6a e0       	ldi	r22, 0x0A	; 10
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	8c 85       	ldd	r24, Y+12	; 0x0c
     e9a:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
     e9e:	64 e6       	ldi	r22, 0x64	; 100
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	8c 85       	ldd	r24, Y+12	; 0x0c
     eae:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	73 e0       	ldi	r23, 0x03	; 3
     eb6:	8b eb       	ldi	r24, 0xBB	; 187
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
     ebe:	8e e0       	ldi	r24, 0x0E	; 14
     ec0:	c8 2e       	mov	r12, r24
     ec2:	d1 2c       	mov	r13, r1
     ec4:	8e 01       	movw	r16, r28
     ec6:	05 5e       	subi	r16, 0xE5	; 229
     ec8:	1e 4f       	sbci	r17, 0xFE	; 254
     eca:	f7 01       	movw	r30, r14
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	dc 01       	movw	r26, r24
     ed2:	ed 91       	ld	r30, X+
     ed4:	fc 91       	ld	r31, X
     ed6:	04 80       	ldd	r0, Z+4	; 0x04
     ed8:	f5 81       	ldd	r31, Z+5	; 0x05
     eda:	e0 2d       	mov	r30, r0
     edc:	09 95       	icall
     ede:	89 2b       	or	r24, r25
     ee0:	59 f0       	breq	.+22     	; 0xef8 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     ee2:	f7 01       	movw	r30, r14
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	dc 01       	movw	r26, r24
     eea:	ed 91       	ld	r30, X+
     eec:	fc 91       	ld	r31, X
     eee:	06 80       	ldd	r0, Z+6	; 0x06
     ef0:	f7 81       	ldd	r31, Z+7	; 0x07
     ef2:	e0 2d       	mov	r30, r0
     ef4:	09 95       	icall
     ef6:	e9 cf       	rjmp	.-46     	; 0xeca <_ZN13Adafruit_FONA5beginEhh+0x98>
     ef8:	f8 01       	movw	r30, r16
     efa:	40 81       	ld	r20, Z
     efc:	51 81       	ldd	r21, Z+1	; 0x01
     efe:	24 ef       	ldi	r18, 0xF4	; 244
     f00:	31 e0       	ldi	r19, 0x01	; 1
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	73 e0       	ldi	r23, 0x03	; 3
     f06:	ce 01       	movw	r24, r28
     f08:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f0c:	81 11       	cpse	r24, r1
     f0e:	34 c0       	rjmp	.+104    	; 0xf78 <_ZN13Adafruit_FONA5beginEhh+0x146>
     f10:	d7 01       	movw	r26, r14
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	dc 01       	movw	r26, r24
     f18:	ed 91       	ld	r30, X+
     f1a:	fc 91       	ld	r31, X
     f1c:	04 80       	ldd	r0, Z+4	; 0x04
     f1e:	f5 81       	ldd	r31, Z+5	; 0x05
     f20:	e0 2d       	mov	r30, r0
     f22:	09 95       	icall
     f24:	89 2b       	or	r24, r25
     f26:	59 f0       	breq	.+22     	; 0xf3e <_ZN13Adafruit_FONA5beginEhh+0x10c>
     f28:	f7 01       	movw	r30, r14
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	dc 01       	movw	r26, r24
     f30:	ed 91       	ld	r30, X+
     f32:	fc 91       	ld	r31, X
     f34:	06 80       	ldd	r0, Z+6	; 0x06
     f36:	f7 81       	ldd	r31, Z+7	; 0x07
     f38:	e0 2d       	mov	r30, r0
     f3a:	09 95       	icall
     f3c:	e9 cf       	rjmp	.-46     	; 0xf10 <_ZN13Adafruit_FONA5beginEhh+0xde>
     f3e:	24 ef       	ldi	r18, 0xF4	; 244
     f40:	31 e0       	ldi	r19, 0x01	; 1
     f42:	4d ef       	ldi	r20, 0xFD	; 253
     f44:	52 e0       	ldi	r21, 0x02	; 2
     f46:	6a ef       	ldi	r22, 0xFA	; 250
     f48:	72 e0       	ldi	r23, 0x02	; 2
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f50:	81 11       	cpse	r24, r1
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <_ZN13Adafruit_FONA5beginEhh+0x146>
     f54:	64 ef       	ldi	r22, 0xF4	; 244
     f56:	71 e0       	ldi	r23, 0x01	; 1
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	cb 1a       	sub	r12, r27
     f64:	d1 08       	sbc	r13, r1
     f66:	09 f0       	breq	.+2      	; 0xf6a <_ZN13Adafruit_FONA5beginEhh+0x138>
     f68:	b0 cf       	rjmp	.-160    	; 0xeca <_ZN13Adafruit_FONA5beginEhh+0x98>
     f6a:	5e c0       	rjmp	.+188    	; 0x1028 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     f6c:	64 e6       	ldi	r22, 0x64	; 100
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     f78:	f8 01       	movw	r30, r16
     f7a:	40 81       	ld	r20, Z
     f7c:	51 81       	ldd	r21, Z+1	; 0x01
     f7e:	24 ef       	ldi	r18, 0xF4	; 244
     f80:	31 e0       	ldi	r19, 0x01	; 1
     f82:	6d ec       	ldi	r22, 0xCD	; 205
     f84:	72 e0       	ldi	r23, 0x02	; 2
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f8c:	64 e6       	ldi	r22, 0x64	; 100
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     f98:	d8 01       	movw	r26, r16
     f9a:	4d 91       	ld	r20, X+
     f9c:	5c 91       	ld	r21, X
     f9e:	24 ef       	ldi	r18, 0xF4	; 244
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	68 ec       	ldi	r22, 0xC8	; 200
     fa4:	72 e0       	ldi	r23, 0x02	; 2
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fac:	81 11       	cpse	r24, r1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <_ZN13Adafruit_FONA5beginEhh+0x182>
     fb0:	12 e0       	ldi	r17, 0x02	; 2
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_ZN13Adafruit_FONA5beginEhh+0x184>
     fb4:	11 e0       	ldi	r17, 0x01	; 1
     fb6:	64 e6       	ldi	r22, 0x64	; 100
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
     fc8:	61 ec       	ldi	r22, 0xC1	; 193
     fca:	72 e0       	ldi	r23, 0x02	; 2
     fcc:	8b eb       	ldi	r24, 0xBB	; 187
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
     fd4:	69 e0       	ldi	r22, 0x09	; 9
     fd6:	71 e0       	ldi	r23, 0x01	; 1
     fd8:	8b eb       	ldi	r24, 0xBB	; 187
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
     fe0:	69 e0       	ldi	r22, 0x09	; 9
     fe2:	71 e0       	ldi	r23, 0x01	; 1
     fe4:	f7 01       	movw	r30, r14
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	64 ef       	ldi	r22, 0xF4	; 244
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	ce 01       	movw	r24, r28
     ff6:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
     ffa:	6a eb       	ldi	r22, 0xBA	; 186
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	8b eb       	ldi	r24, 0xBB	; 187
    1000:	93 e0       	ldi	r25, 0x03	; 3
    1002:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1006:	2f 96       	adiw	r28, 0x0f	; 15
    1008:	be 01       	movw	r22, r28
    100a:	8b eb       	ldi	r24, 0xBB	; 187
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
    1012:	6f ea       	ldi	r22, 0xAF	; 175
    1014:	72 e0       	ldi	r23, 0x02	; 2
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 ad 22 	call	0x455a	; 0x455a <strstr_P>
    101c:	89 2b       	or	r24, r25
    101e:	11 f4       	brne	.+4      	; 0x1024 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	35 c0       	rjmp	.+106    	; 0x108e <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1024:	81 2f       	mov	r24, r17
    1026:	33 c0       	rjmp	.+102    	; 0x108e <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1028:	d8 01       	movw	r26, r16
    102a:	4d 91       	ld	r20, X+
    102c:	5c 91       	ld	r21, X
    102e:	24 ef       	ldi	r18, 0xF4	; 244
    1030:	31 e0       	ldi	r19, 0x01	; 1
    1032:	67 ef       	ldi	r22, 0xF7	; 247
    1034:	72 e0       	ldi	r23, 0x02	; 2
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    103c:	64 e6       	ldi	r22, 0x64	; 100
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
    1048:	f8 01       	movw	r30, r16
    104a:	40 81       	ld	r20, Z
    104c:	51 81       	ldd	r21, Z+1	; 0x01
    104e:	24 ef       	ldi	r18, 0xF4	; 244
    1050:	31 e0       	ldi	r19, 0x01	; 1
    1052:	64 ef       	ldi	r22, 0xF4	; 244
    1054:	72 e0       	ldi	r23, 0x02	; 2
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    105c:	64 e6       	ldi	r22, 0x64	; 100
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
    1068:	d8 01       	movw	r26, r16
    106a:	4d 91       	ld	r20, X+
    106c:	5c 91       	ld	r21, X
    106e:	24 ef       	ldi	r18, 0xF4	; 244
    1070:	31 e0       	ldi	r19, 0x01	; 1
    1072:	61 ef       	ldi	r22, 0xF1	; 241
    1074:	72 e0       	ldi	r23, 0x02	; 2
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    107c:	81 11       	cpse	r24, r1
    107e:	76 cf       	rjmp	.-276    	; 0xf6c <_ZN13Adafruit_FONA5beginEhh+0x13a>
    1080:	62 ed       	ldi	r22, 0xD2	; 210
    1082:	72 e0       	ldi	r23, 0x02	; 2
    1084:	8b eb       	ldi	r24, 0xBB	; 187
    1086:	93 e0       	ldi	r25, 0x03	; 3
    1088:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	08 95       	ret

000010a0 <_ZN13Adafruit_FONA9HTTP_initEv>:
    10a0:	fc 01       	movw	r30, r24
    10a2:	e5 5e       	subi	r30, 0xE5	; 229
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	24 ef       	ldi	r18, 0xF4	; 244
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	61 e6       	ldi	r22, 0x61	; 97
    10b0:	71 e0       	ldi	r23, 0x01	; 1
    10b2:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000010b6 <_ZN13Adafruit_FONA9HTTP_termEv>:
    10b6:	fc 01       	movw	r30, r24
    10b8:	e5 5e       	subi	r30, 0xE5	; 229
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	40 81       	ld	r20, Z
    10be:	51 81       	ldd	r21, Z+1	; 0x01
    10c0:	24 ef       	ldi	r18, 0xF4	; 244
    10c2:	31 e0       	ldi	r19, 0x01	; 1
    10c4:	65 e5       	ldi	r22, 0x55	; 85
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000010cc <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <_ZN13Adafruit_FONA10HTTP_setupEPc+0xe>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x10>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <_ZN13Adafruit_FONA10HTTP_setupEPc+0x12>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	8c 01       	movw	r16, r24
    10e4:	7b 01       	movw	r14, r22
    10e6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN13Adafruit_FONA9HTTP_termEv>
    10ea:	c8 01       	movw	r24, r16
    10ec:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN13Adafruit_FONA9HTTP_initEv>
    10f0:	88 23       	and	r24, r24
    10f2:	59 f1       	breq	.+86     	; 0x114a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x7e>
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	66 ea       	ldi	r22, 0xA6	; 166
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	c8 01       	movw	r24, r16
    1102:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1106:	88 23       	and	r24, r24
    1108:	11 f1       	breq	.+68     	; 0x114e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x82>
    110a:	a7 01       	movw	r20, r14
    110c:	62 ea       	ldi	r22, 0xA2	; 162
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	c8 01       	movw	r24, r16
    1112:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    1116:	88 23       	and	r24, r24
    1118:	e1 f0       	breq	.+56     	; 0x1152 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x86>
    111a:	b8 01       	movw	r22, r16
    111c:	6b 5e       	subi	r22, 0xEB	; 235
    111e:	7e 4f       	sbci	r23, 0xFE	; 254
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN6StringC1ERKS_>
    1128:	ae 01       	movw	r20, r28
    112a:	4f 5f       	subi	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	6f e9       	ldi	r22, 0x9F	; 159
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	c8 01       	movw	r24, r16
    1134:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1138:	18 2f       	mov	r17, r24
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN6StringD1Ev>
    1142:	11 23       	and	r17, r17
    1144:	41 f0       	breq	.+16     	; 0x1156 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8a>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    1152:	84 e0       	ldi	r24, 0x04	; 4
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	ec 01       	movw	r28, r24
    1184:	68 01       	movw	r12, r16
    1186:	87 01       	movw	r16, r14
    1188:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    118c:	b6 01       	movw	r22, r12
    118e:	ce 01       	movw	r24, r28
    1190:	0f 96       	adiw	r24, 0x0f	; 15
    1192:	0e 94 9b 22 	call	0x4536	; 0x4536 <strcmp_P>
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	89 2b       	or	r24, r25
    119a:	09 f0       	breq	.+2      	; 0x119e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	82 2f       	mov	r24, r18
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	08 95       	ret

000011b2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	ec 01       	movw	r28, r24
    11c0:	79 01       	movw	r14, r18
    11c2:	98 01       	movw	r18, r16
    11c4:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    11c8:	b7 01       	movw	r22, r14
    11ca:	ce 01       	movw	r24, r28
    11cc:	0f 96       	adiw	r24, 0x0f	; 15
    11ce:	0e 94 9b 22 	call	0x4536	; 0x4536 <strcmp_P>
    11d2:	21 e0       	ldi	r18, 0x01	; 1
    11d4:	89 2b       	or	r24, r25
    11d6:	09 f0       	breq	.+2      	; 0x11da <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	82 2f       	mov	r24, r18
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	08 95       	ret

000011ea <_ZN13Adafruit_FONA10enableGPRSEb>:
    11ea:	7f 92       	push	r7
    11ec:	8f 92       	push	r8
    11ee:	9f 92       	push	r9
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
    1206:	28 ee       	ldi	r18, 0xE8	; 232
    1208:	3d ef       	ldi	r19, 0xFD	; 253
    120a:	66 23       	and	r22, r22
    120c:	09 f4       	brne	.+2      	; 0x1210 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    120e:	1f c1       	rjmp	.+574    	; 0x144e <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    1210:	4b e5       	ldi	r20, 0x5B	; 91
    1212:	52 e0       	ldi	r21, 0x02	; 2
    1214:	60 e5       	ldi	r22, 0x50	; 80
    1216:	72 e0       	ldi	r23, 0x02	; 2
    1218:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    121c:	81 11       	cpse	r24, r1
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	78 2e       	mov	r7, r24
    1224:	02 c0       	rjmp	.+4      	; 0x122a <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1226:	77 24       	eor	r7, r7
    1228:	73 94       	inc	r7
    122a:	7e 01       	movw	r14, r28
    122c:	85 ee       	ldi	r24, 0xE5	; 229
    122e:	e8 1a       	sub	r14, r24
    1230:	8e ef       	ldi	r24, 0xFE	; 254
    1232:	f8 0a       	sbc	r15, r24
    1234:	f7 01       	movw	r30, r14
    1236:	40 81       	ld	r20, Z
    1238:	51 81       	ldd	r21, Z+1	; 0x01
    123a:	20 e1       	ldi	r18, 0x10	; 16
    123c:	37 e2       	ldi	r19, 0x27	; 39
    123e:	65 e4       	ldi	r22, 0x45	; 69
    1240:	72 e0       	ldi	r23, 0x02	; 2
    1242:	ce 01       	movw	r24, r28
    1244:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    124c:	25 c1       	rjmp	.+586    	; 0x1498 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    124e:	f7 01       	movw	r30, r14
    1250:	40 81       	ld	r20, Z
    1252:	51 81       	ldd	r21, Z+1	; 0x01
    1254:	20 e1       	ldi	r18, 0x10	; 16
    1256:	37 e2       	ldi	r19, 0x27	; 39
    1258:	67 e2       	ldi	r22, 0x27	; 39
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	ce 01       	movw	r24, r28
    125e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    1266:	1a c1       	rjmp	.+564    	; 0x149c <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    1268:	4e 01       	movw	r8, r28
    126a:	f2 ef       	ldi	r31, 0xF2	; 242
    126c:	8f 1a       	sub	r8, r31
    126e:	fe ef       	ldi	r31, 0xFE	; 254
    1270:	9f 0a       	sbc	r9, r31
    1272:	f4 01       	movw	r30, r8
    1274:	40 81       	ld	r20, Z
    1276:	51 81       	ldd	r21, Z+1	; 0x01
    1278:	41 15       	cp	r20, r1
    127a:	51 05       	cpc	r21, r1
    127c:	71 f4       	brne	.+28     	; 0x129a <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    127e:	f7 01       	movw	r30, r14
    1280:	40 81       	ld	r20, Z
    1282:	51 81       	ldd	r21, Z+1	; 0x01
    1284:	2f ef       	ldi	r18, 0xFF	; 255
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	62 ec       	ldi	r22, 0xC2	; 194
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	ce 01       	movw	r24, r28
    128e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1292:	81 11       	cpse	r24, r1
    1294:	ce c0       	rjmp	.+412    	; 0x1432 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    1296:	89 e0       	ldi	r24, 0x09	; 9
    1298:	0e c1       	rjmp	.+540    	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    129a:	f7 01       	movw	r30, r14
    129c:	20 81       	ld	r18, Z
    129e:	31 81       	ldd	r19, Z+1	; 0x01
    12a0:	00 e1       	ldi	r16, 0x10	; 16
    12a2:	17 e2       	ldi	r17, 0x27	; 39
    12a4:	63 e1       	ldi	r22, 0x13	; 19
    12a6:	72 e0       	ldi	r23, 0x02	; 2
    12a8:	ce 01       	movw	r24, r28
    12aa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    12b2:	f6 c0       	rjmp	.+492    	; 0x14a0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    12b4:	ce 01       	movw	r24, r28
    12b6:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN13Adafruit_FONA10flushInputEv>
    12ba:	8e 01       	movw	r16, r28
    12bc:	03 5e       	subi	r16, 0xE3	; 227
    12be:	1e 4f       	sbci	r17, 0xFE	; 254
    12c0:	69 e0       	ldi	r22, 0x09	; 9
    12c2:	72 e0       	ldi	r23, 0x02	; 2
    12c4:	f8 01       	movw	r30, r16
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    12ce:	f4 01       	movw	r30, r8
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    12de:	5e 01       	movw	r10, r28
    12e0:	f0 ef       	ldi	r31, 0xF0	; 240
    12e2:	af 1a       	sub	r10, r31
    12e4:	fe ef       	ldi	r31, 0xFE	; 254
    12e6:	bf 0a       	sbc	r11, r31
    12e8:	f5 01       	movw	r30, r10
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	89 2b       	or	r24, r25
    12f0:	79 f0       	breq	.+30     	; 0x1310 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    12f2:	65 e2       	ldi	r22, 0x25	; 37
    12f4:	71 e0       	ldi	r23, 0x01	; 1
    12f6:	f8 01       	movw	r30, r16
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    1300:	f5 01       	movw	r30, r10
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	f8 01       	movw	r30, r16
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1310:	6e 01       	movw	r12, r28
    1312:	fe ee       	ldi	r31, 0xEE	; 238
    1314:	cf 1a       	sub	r12, r31
    1316:	fe ef       	ldi	r31, 0xFE	; 254
    1318:	df 0a       	sbc	r13, r31
    131a:	f6 01       	movw	r30, r12
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	89 2b       	or	r24, r25
    1322:	79 f0       	breq	.+30     	; 0x1342 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1324:	65 e2       	ldi	r22, 0x25	; 37
    1326:	71 e0       	ldi	r23, 0x01	; 1
    1328:	f8 01       	movw	r30, r16
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    1332:	f6 01       	movw	r30, r12
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	f8 01       	movw	r30, r16
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1342:	67 e2       	ldi	r22, 0x27	; 39
    1344:	71 e0       	ldi	r23, 0x01	; 1
    1346:	f8 01       	movw	r30, r16
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	72 e0       	ldi	r23, 0x02	; 2
    1354:	8b eb       	ldi	r24, 0xBB	; 187
    1356:	93 e0       	ldi	r25, 0x03	; 3
    1358:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    135c:	68 ef       	ldi	r22, 0xF8	; 248
    135e:	71 e0       	ldi	r23, 0x01	; 1
    1360:	8b eb       	ldi	r24, 0xBB	; 187
    1362:	93 e0       	ldi	r25, 0x03	; 3
    1364:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1368:	f4 01       	movw	r30, r8
    136a:	60 81       	ld	r22, Z
    136c:	71 81       	ldd	r23, Z+1	; 0x01
    136e:	8b eb       	ldi	r24, 0xBB	; 187
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1376:	f5 01       	movw	r30, r10
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	89 2b       	or	r24, r25
    137e:	69 f0       	breq	.+26     	; 0x139a <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    1380:	65 e2       	ldi	r22, 0x25	; 37
    1382:	71 e0       	ldi	r23, 0x01	; 1
    1384:	8b eb       	ldi	r24, 0xBB	; 187
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    138c:	f5 01       	movw	r30, r10
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	8b eb       	ldi	r24, 0xBB	; 187
    1394:	93 e0       	ldi	r25, 0x03	; 3
    1396:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    139a:	f6 01       	movw	r30, r12
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	89 2b       	or	r24, r25
    13a2:	69 f0       	breq	.+26     	; 0x13be <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    13a4:	65 e2       	ldi	r22, 0x25	; 37
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	8b eb       	ldi	r24, 0xBB	; 187
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    13b0:	f6 01       	movw	r30, r12
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	8b eb       	ldi	r24, 0xBB	; 187
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    13be:	67 e2       	ldi	r22, 0x27	; 39
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	8b eb       	ldi	r24, 0xBB	; 187
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
    13ca:	f7 01       	movw	r30, r14
    13cc:	60 81       	ld	r22, Z
    13ce:	71 81       	ldd	r23, Z+1	; 0x01
    13d0:	40 e1       	ldi	r20, 0x10	; 16
    13d2:	57 e2       	ldi	r21, 0x27	; 39
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    13da:	88 23       	and	r24, r24
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    13de:	62 c0       	rjmp	.+196    	; 0x14a4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    13e0:	f5 01       	movw	r30, r10
    13e2:	40 81       	ld	r20, Z
    13e4:	51 81       	ldd	r21, Z+1	; 0x01
    13e6:	41 15       	cp	r20, r1
    13e8:	51 05       	cpc	r21, r1
    13ea:	39 f4       	brne	.+14     	; 0x13fa <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    13ec:	f6 01       	movw	r30, r12
    13ee:	40 81       	ld	r20, Z
    13f0:	51 81       	ldd	r21, Z+1	; 0x01
    13f2:	41 15       	cp	r20, r1
    13f4:	51 05       	cpc	r21, r1
    13f6:	79 f4       	brne	.+30     	; 0x1416 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    13f8:	42 cf       	rjmp	.-380    	; 0x127e <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    13fa:	f7 01       	movw	r30, r14
    13fc:	20 81       	ld	r18, Z
    13fe:	31 81       	ldd	r19, Z+1	; 0x01
    1400:	00 e1       	ldi	r16, 0x10	; 16
    1402:	17 e2       	ldi	r17, 0x27	; 39
    1404:	63 ee       	ldi	r22, 0xE3	; 227
    1406:	71 e0       	ldi	r23, 0x01	; 1
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    140e:	81 11       	cpse	r24, r1
    1410:	ed cf       	rjmp	.-38     	; 0x13ec <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1412:	87 e0       	ldi	r24, 0x07	; 7
    1414:	50 c0       	rjmp	.+160    	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1416:	f7 01       	movw	r30, r14
    1418:	20 81       	ld	r18, Z
    141a:	31 81       	ldd	r19, Z+1	; 0x01
    141c:	00 e1       	ldi	r16, 0x10	; 16
    141e:	17 e2       	ldi	r17, 0x27	; 39
    1420:	6f ec       	ldi	r22, 0xCF	; 207
    1422:	71 e0       	ldi	r23, 0x01	; 1
    1424:	ce 01       	movw	r24, r28
    1426:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    142a:	81 11       	cpse	r24, r1
    142c:	28 cf       	rjmp	.-432    	; 0x127e <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    142e:	88 e0       	ldi	r24, 0x08	; 8
    1430:	42 c0       	rjmp	.+132    	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1432:	f7 01       	movw	r30, r14
    1434:	40 81       	ld	r20, Z
    1436:	51 81       	ldd	r21, Z+1	; 0x01
    1438:	2f ef       	ldi	r18, 0xFF	; 255
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	69 eb       	ldi	r22, 0xB9	; 185
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	ce 01       	movw	r24, r28
    1442:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1446:	88 23       	and	r24, r24
    1448:	79 f1       	breq	.+94     	; 0x14a8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    144a:	87 2d       	mov	r24, r7
    144c:	34 c0       	rjmp	.+104    	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    144e:	41 eb       	ldi	r20, 0xB1	; 177
    1450:	51 e0       	ldi	r21, 0x01	; 1
    1452:	66 ea       	ldi	r22, 0xA6	; 166
    1454:	71 e0       	ldi	r23, 0x01	; 1
    1456:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    145a:	88 23       	and	r24, r24
    145c:	39 f1       	breq	.+78     	; 0x14ac <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    145e:	8e 01       	movw	r16, r28
    1460:	05 5e       	subi	r16, 0xE5	; 229
    1462:	1e 4f       	sbci	r17, 0xFE	; 254
    1464:	f8 01       	movw	r30, r16
    1466:	40 81       	ld	r20, Z
    1468:	51 81       	ldd	r21, Z+1	; 0x01
    146a:	20 e1       	ldi	r18, 0x10	; 16
    146c:	37 e2       	ldi	r19, 0x27	; 39
    146e:	69 e9       	ldi	r22, 0x99	; 153
    1470:	71 e0       	ldi	r23, 0x01	; 1
    1472:	ce 01       	movw	r24, r28
    1474:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1478:	88 23       	and	r24, r24
    147a:	d1 f0       	breq	.+52     	; 0x14b0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    147c:	f8 01       	movw	r30, r16
    147e:	40 81       	ld	r20, Z
    1480:	51 81       	ldd	r21, Z+1	; 0x01
    1482:	20 e1       	ldi	r18, 0x10	; 16
    1484:	37 e2       	ldi	r19, 0x27	; 39
    1486:	6e e8       	ldi	r22, 0x8E	; 142
    1488:	71 e0       	ldi	r23, 0x01	; 1
    148a:	ce 01       	movw	r24, r28
    148c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1490:	88 23       	and	r24, r24
    1492:	81 f0       	breq	.+32     	; 0x14b4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	0b c0       	rjmp	.+22     	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14a0:	85 e0       	ldi	r24, 0x05	; 5
    14a2:	09 c0       	rjmp	.+18     	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14a4:	86 e0       	ldi	r24, 0x06	; 6
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14a8:	8a e0       	ldi	r24, 0x0A	; 10
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ac:	8b e0       	ldi	r24, 0x0B	; 11
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b0:	8c e0       	ldi	r24, 0x0C	; 12
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b4:	8d e0       	ldi	r24, 0x0D	; 13
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	af 90       	pop	r10
    14ca:	9f 90       	pop	r9
    14cc:	8f 90       	pop	r8
    14ce:	7f 90       	pop	r7
    14d0:	08 95       	ret

000014d2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    14d2:	af 92       	push	r10
    14d4:	bf 92       	push	r11
    14d6:	cf 92       	push	r12
    14d8:	df 92       	push	r13
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	0f 93       	push	r16
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	5b 01       	movw	r10, r22
    14e6:	6a 01       	movw	r12, r20
    14e8:	e2 2e       	mov	r14, r18
    14ea:	0f 96       	adiw	r24, 0x0f	; 15
    14ec:	0e 94 ad 22 	call	0x455a	; 0x455a <strstr_P>
    14f0:	ec 01       	movw	r28, r24
    14f2:	89 2b       	or	r24, r25
    14f4:	c1 f0       	breq	.+48     	; 0x1526 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 94 a4 22 	call	0x4548	; 0x4548 <__strlen_P>
    14fc:	8c 0f       	add	r24, r28
    14fe:	9d 1f       	adc	r25, r29
    1500:	c0 e0       	ldi	r28, 0x00	; 0
    1502:	f1 2c       	mov	r15, r1
    1504:	c0 17       	cp	r28, r16
    1506:	41 f0       	breq	.+16     	; 0x1518 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1508:	b7 01       	movw	r22, r14
    150a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <strchr>
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	51 f0       	breq	.+20     	; 0x1526 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	cf 5f       	subi	r28, 0xFF	; 255
    1516:	f6 cf       	rjmp	.-20     	; 0x1504 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1518:	0e 94 7d 22 	call	0x44fa	; 0x44fa <atoi>
    151c:	f6 01       	movw	r30, r12
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	08 95       	ret

0000153c <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
    1548:	7b 01       	movw	r14, r22
    154a:	44 ef       	ldi	r20, 0xF4	; 244
    154c:	51 e0       	ldi	r21, 0x01	; 1
    154e:	6c ec       	ldi	r22, 0xCC	; 204
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1556:	00 e0       	ldi	r16, 0x00	; 0
    1558:	2c e2       	ldi	r18, 0x2C	; 44
    155a:	a7 01       	movw	r20, r14
    155c:	61 ec       	ldi	r22, 0xC1	; 193
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	ce 01       	movw	r24, r28
    1562:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	08 95       	ret

00001572 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    1572:	4f 92       	push	r4
    1574:	5f 92       	push	r5
    1576:	6f 92       	push	r6
    1578:	7f 92       	push	r7
    157a:	af 92       	push	r10
    157c:	bf 92       	push	r11
    157e:	cf 92       	push	r12
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
    1590:	5a 01       	movw	r10, r20
    1592:	69 01       	movw	r12, r18
    1594:	27 01       	movw	r4, r14
    1596:	38 01       	movw	r6, r16
    1598:	fc 01       	movw	r30, r24
    159a:	e5 5e       	subi	r30, 0xE5	; 229
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	00 81       	ld	r16, Z
    15a0:	11 81       	ldd	r17, Z+1	; 0x01
    15a2:	26 2f       	mov	r18, r22
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	84 ef       	ldi	r24, 0xF4	; 244
    15ac:	e8 2e       	mov	r14, r24
    15ae:	ff 24       	eor	r15, r15
    15b0:	f3 94       	inc	r15
    15b2:	62 ef       	ldi	r22, 0xF2	; 242
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	ce 01       	movw	r24, r28
    15b8:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    15bc:	88 23       	and	r24, r24
    15be:	d9 f0       	breq	.+54     	; 0x15f6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x84>
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	b2 01       	movw	r22, r4
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
    15ca:	01 e0       	ldi	r16, 0x01	; 1
    15cc:	2c e2       	ldi	r18, 0x2C	; 44
    15ce:	a5 01       	movw	r20, r10
    15d0:	65 ee       	ldi	r22, 0xE5	; 229
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15da:	88 23       	and	r24, r24
    15dc:	71 f0       	breq	.+28     	; 0x15fa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x88>
    15de:	02 e0       	ldi	r16, 0x02	; 2
    15e0:	2c e2       	ldi	r18, 0x2C	; 44
    15e2:	a6 01       	movw	r20, r12
    15e4:	68 ed       	ldi	r22, 0xD8	; 216
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	ce 01       	movw	r24, r28
    15ea:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15ee:	88 23       	and	r24, r24
    15f0:	31 f0       	breq	.+12     	; 0x15fe <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8c>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8e>
    15f6:	87 e0       	ldi	r24, 0x07	; 7
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8e>
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8e>
    15fe:	89 e0       	ldi	r24, 0x09	; 9
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	7f 90       	pop	r7
    1616:	6f 90       	pop	r6
    1618:	5f 90       	pop	r5
    161a:	4f 90       	pop	r4
    161c:	08 95       	ret

0000161e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    161e:	3f 92       	push	r3
    1620:	4f 92       	push	r4
    1622:	5f 92       	push	r5
    1624:	6f 92       	push	r6
    1626:	7f 92       	push	r7
    1628:	8f 92       	push	r8
    162a:	9f 92       	push	r9
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	ec 01       	movw	r28, r24
    1642:	2a 01       	movw	r4, r20
    1644:	39 01       	movw	r6, r18
    1646:	48 01       	movw	r8, r16
    1648:	57 01       	movw	r10, r14
    164a:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN13Adafruit_FONA10HTTP_setupEPc>
    164e:	38 2e       	mov	r3, r24
    1650:	8f 70       	andi	r24, 0x0F	; 15
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	08 f0       	brcs	.+2      	; 0x1658 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x3a>
    1656:	73 c0       	rjmp	.+230    	; 0x173e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x120>
    1658:	a2 01       	movw	r20, r4
    165a:	69 eb       	ldi	r22, 0xB9	; 185
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	ce 01       	movw	r24, r28
    1660:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1664:	81 11       	cpse	r24, r1
    1666:	03 c0       	rjmp	.+6      	; 0x166e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x50>
    1668:	83 2d       	mov	r24, r3
    166a:	80 61       	ori	r24, 0x10	; 16
    166c:	38 2e       	mov	r3, r24
    166e:	a4 01       	movw	r20, r8
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	00 ec       	ldi	r16, 0xC0	; 192
    1676:	14 ed       	ldi	r17, 0xD4	; 212
    1678:	2f ef       	ldi	r18, 0xFF	; 255
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	ce 01       	movw	r24, r28
    167e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN13Adafruit_FONA9HTTP_dataEmm>
    1682:	81 11       	cpse	r24, r1
    1684:	03 c0       	rjmp	.+6      	; 0x168c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x6e>
    1686:	83 2d       	mov	r24, r3
    1688:	85 60       	ori	r24, 0x05	; 5
    168a:	5a c0       	rjmp	.+180    	; 0x1740 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x122>
    168c:	fe 01       	movw	r30, r28
    168e:	e3 5e       	subi	r30, 0xE3	; 227
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	dc 01       	movw	r26, r24
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	02 80       	ldd	r0, Z+2	; 0x02
    169e:	f3 81       	ldd	r31, Z+3	; 0x03
    16a0:	e0 2d       	mov	r30, r0
    16a2:	a4 01       	movw	r20, r8
    16a4:	b3 01       	movw	r22, r6
    16a6:	09 95       	icall
    16a8:	fe 01       	movw	r30, r28
    16aa:	e5 5e       	subi	r30, 0xE5	; 229
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	40 e1       	ldi	r20, 0x10	; 16
    16b4:	57 e2       	ldi	r21, 0x27	; 39
    16b6:	ce 01       	movw	r24, r28
    16b8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    16bc:	81 11       	cpse	r24, r1
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0xa8>
    16c0:	83 2d       	mov	r24, r3
    16c2:	86 60       	ori	r24, 0x06	; 6
    16c4:	3d c0       	rjmp	.+122    	; 0x1740 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x122>
    16c6:	10 e1       	ldi	r17, 0x10	; 16
    16c8:	e1 2e       	mov	r14, r17
    16ca:	17 e2       	ldi	r17, 0x27	; 39
    16cc:	f1 2e       	mov	r15, r17
    16ce:	00 e0       	ldi	r16, 0x00	; 0
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	96 01       	movw	r18, r12
    16d4:	a5 01       	movw	r20, r10
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	ce 01       	movw	r24, r28
    16da:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    16de:	98 2f       	mov	r25, r24
    16e0:	9f 70       	andi	r25, 0x0F	; 15
    16e2:	92 30       	cpi	r25, 0x02	; 2
    16e4:	10 f0       	brcs	.+4      	; 0x16ea <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0xcc>
    16e6:	83 29       	or	r24, r3
    16e8:	2b c0       	rjmp	.+86     	; 0x1740 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x122>
    16ea:	60 eb       	ldi	r22, 0xB0	; 176
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	8b eb       	ldi	r24, 0xBB	; 187
    16f0:	93 e0       	ldi	r25, 0x03	; 3
    16f2:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    16f6:	f5 01       	movw	r30, r10
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	4a e0       	ldi	r20, 0x0A	; 10
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	8b eb       	ldi	r24, 0xBB	; 187
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_ZN5Print7printlnEji>
    1708:	6a ea       	ldi	r22, 0xAA	; 170
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	8b eb       	ldi	r24, 0xBB	; 187
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1714:	d6 01       	movw	r26, r12
    1716:	6d 91       	ld	r22, X+
    1718:	7c 91       	ld	r23, X
    171a:	4a e0       	ldi	r20, 0x0A	; 10
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	8b eb       	ldi	r24, 0xBB	; 187
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_ZN5Print7printlnEji>
    1726:	b6 01       	movw	r22, r12
    1728:	ce 01       	movw	r24, r28
    172a:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN13Adafruit_FONA12HTTP_readallEPj>
    172e:	81 11       	cpse	r24, r1
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x11a>
    1732:	b3 2d       	mov	r27, r3
    1734:	b0 62       	ori	r27, 0x20	; 32
    1736:	3b 2e       	mov	r3, r27
    1738:	83 2d       	mov	r24, r3
    173a:	81 60       	ori	r24, 0x01	; 1
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x122>
    173e:	83 2d       	mov	r24, r3
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	9f 90       	pop	r9
    1756:	8f 90       	pop	r8
    1758:	7f 90       	pop	r7
    175a:	6f 90       	pop	r6
    175c:	5f 90       	pop	r5
    175e:	4f 90       	pop	r4
    1760:	3f 90       	pop	r3
    1762:	08 95       	ret

00001764 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>:
    1764:	8f 92       	push	r8
    1766:	9f 92       	push	r9
    1768:	af 92       	push	r10
    176a:	bf 92       	push	r11
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	a2 97       	sbiw	r28, 0x22	; 34
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	5c 01       	movw	r10, r24
    178e:	4a 01       	movw	r8, r20
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	e9 e2       	ldi	r30, 0x29	; 41
    1794:	f1 e0       	ldi	r31, 0x01	; 1
    1796:	de 01       	movw	r26, r28
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	01 90       	ld	r0, Z+
    179c:	0d 92       	st	X+, r0
    179e:	8a 95       	dec	r24
    17a0:	e1 f7       	brne	.-8      	; 0x179a <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x36>
    17a2:	ce 01       	movw	r24, r28
    17a4:	81 96       	adiw	r24, 0x21	; 33
    17a6:	6c 01       	movw	r12, r24
    17a8:	79 01       	movw	r14, r18
    17aa:	8a 01       	movw	r16, r20
    17ac:	9b 01       	movw	r18, r22
    17ae:	43 e8       	ldi	r20, 0x83	; 131
    17b0:	51 e0       	ldi	r21, 0x01	; 1
    17b2:	be 01       	movw	r22, r28
    17b4:	6f 5f       	subi	r22, 0xFF	; 255
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	c5 01       	movw	r24, r10
    17ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
    17be:	18 2f       	mov	r17, r24
    17c0:	8f 70       	andi	r24, 0x0F	; 15
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	58 f1       	brcs	.+86     	; 0x181c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb8>
    17c6:	6d e6       	ldi	r22, 0x6D	; 109
    17c8:	71 e0       	ldi	r23, 0x01	; 1
    17ca:	8b eb       	ldi	r24, 0xBB	; 187
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    17d2:	61 2f       	mov	r22, r17
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	4a e0       	ldi	r20, 0x0A	; 10
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	8b eb       	ldi	r24, 0xBB	; 187
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEii>
    17e2:	22 c0       	rjmp	.+68     	; 0x1828 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xc4>
    17e4:	d5 01       	movw	r26, r10
    17e6:	ed 91       	ld	r30, X+
    17e8:	fc 91       	ld	r31, X
    17ea:	04 80       	ldd	r0, Z+4	; 0x04
    17ec:	f5 81       	ldd	r31, Z+5	; 0x05
    17ee:	e0 2d       	mov	r30, r0
    17f0:	c5 01       	movw	r24, r10
    17f2:	09 95       	icall
    17f4:	89 2b       	or	r24, r25
    17f6:	91 f0       	breq	.+36     	; 0x181c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb8>
    17f8:	d5 01       	movw	r26, r10
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X
    17fe:	06 80       	ldd	r0, Z+6	; 0x06
    1800:	f7 81       	ldd	r31, Z+7	; 0x07
    1802:	e0 2d       	mov	r30, r0
    1804:	c5 01       	movw	r24, r10
    1806:	09 95       	icall
    1808:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    180c:	95 ff       	sbrs	r25, 5
    180e:	fc cf       	rjmp	.-8      	; 0x1808 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    1810:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1814:	b1 e0       	ldi	r27, 0x01	; 1
    1816:	8b 1a       	sub	r8, r27
    1818:	91 08       	sbc	r9, r1
    181a:	21 f7       	brne	.-56     	; 0x17e4 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x80>
    181c:	81 14       	cp	r8, r1
    181e:	91 04       	cpc	r9, r1
    1820:	09 f7       	brne	.-62     	; 0x17e4 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x80>
    1822:	c5 01       	movw	r24, r10
    1824:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN13Adafruit_FONA9HTTP_termEv>
    1828:	81 2f       	mov	r24, r17
    182a:	a2 96       	adiw	r28, 0x22	; 34
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	9f 90       	pop	r9
    184c:	8f 90       	pop	r8
    184e:	08 95       	ret

00001850 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    1864:	6a 01       	movw	r12, r20
    1866:	59 01       	movw	r10, r18
    1868:	10 2f       	mov	r17, r16
    186a:	0e 2d       	mov	r16, r14
    186c:	44 ef       	ldi	r20, 0xF4	; 244
    186e:	51 e0       	ldi	r21, 0x01	; 1
    1870:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1874:	21 2f       	mov	r18, r17
    1876:	a5 01       	movw	r20, r10
    1878:	b6 01       	movw	r22, r12
    187a:	ce 01       	movw	r24, r28
    187c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1880:	18 2f       	mov	r17, r24
    1882:	88 23       	and	r24, r24
    1884:	31 f0       	breq	.+12     	; 0x1892 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	64 ef       	ldi	r22, 0xF4	; 244
    188a:	71 e0       	ldi	r23, 0x01	; 1
    188c:	ce 01       	movw	r24, r28
    188e:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13Adafruit_FONA8readlineEjb>
    1892:	81 2f       	mov	r24, r17
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	08 95       	ret

000018a8 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    18a8:	ef 92       	push	r14
    18aa:	0f 93       	push	r16
    18ac:	9b 01       	movw	r18, r22
    18ae:	ee 24       	eor	r14, r14
    18b0:	e3 94       	inc	r14
    18b2:	0c e2       	ldi	r16, 0x2C	; 44
    18b4:	48 ea       	ldi	r20, 0xA8	; 168
    18b6:	52 e0       	ldi	r21, 0x02	; 2
    18b8:	61 ea       	ldi	r22, 0xA1	; 161
    18ba:	72 e0       	ldi	r23, 0x02	; 2
    18bc:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    18c0:	0f 91       	pop	r16
    18c2:	ef 90       	pop	r14
    18c4:	08 95       	ret

000018c6 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	28 97       	sbiw	r28, 0x08	; 8
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    18e8:	18 86       	std	Y+8, r1	; 0x08
    18ea:	1f 82       	std	Y+7, r1	; 0x07
    18ec:	1e 82       	std	Y+6, r1	; 0x06
    18ee:	1d 82       	std	Y+5, r1	; 0x05
    18f0:	1c 82       	std	Y+4, r1	; 0x04
    18f2:	1b 82       	std	Y+3, r1	; 0x03
    18f4:	1a 82       	std	Y+2, r1	; 0x02
    18f6:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    18f8:	e1 2c       	mov	r14, r1
    18fa:	0c e2       	ldi	r16, 0x2C	; 44
    18fc:	9e 01       	movw	r18, r28
    18fe:	29 5f       	subi	r18, 0xF9	; 249
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	4a e9       	ldi	r20, 0x9A	; 154
    1904:	52 e0       	ldi	r21, 0x02	; 2
    1906:	63 e9       	ldi	r22, 0x93	; 147
    1908:	72 e0       	ldi	r23, 0x02	; 2
    190a:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    190e:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1910:	ee 24       	eor	r14, r14
    1912:	e3 94       	inc	r14
    1914:	9e 01       	movw	r18, r28
    1916:	2b 5f       	subi	r18, 0xFB	; 251
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	4c e8       	ldi	r20, 0x8C	; 140
    191c:	52 e0       	ldi	r21, 0x02	; 2
    191e:	65 e8       	ldi	r22, 0x85	; 133
    1920:	72 e0       	ldi	r23, 0x02	; 2
    1922:	c6 01       	movw	r24, r12
    1924:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1928:	88 23       	and	r24, r24
    192a:	19 f0       	breq	.+6      	; 0x1932 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	f8 26       	eor	r15, r24
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1932:	ff 24       	eor	r15, r15
    1934:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1936:	e1 2c       	mov	r14, r1
    1938:	0c e2       	ldi	r16, 0x2C	; 44
    193a:	9e 01       	movw	r18, r28
    193c:	2d 5f       	subi	r18, 0xFD	; 253
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	4d e7       	ldi	r20, 0x7D	; 125
    1942:	52 e0       	ldi	r21, 0x02	; 2
    1944:	64 e7       	ldi	r22, 0x74	; 116
    1946:	72 e0       	ldi	r23, 0x02	; 2
    1948:	c6 01       	movw	r24, r12
    194a:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    194e:	88 23       	and	r24, r24
    1950:	11 f0       	breq	.+4      	; 0x1956 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1952:	1b 81       	ldd	r17, Y+3	; 0x03
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1956:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1958:	ee 24       	eor	r14, r14
    195a:	e3 94       	inc	r14
    195c:	0c e2       	ldi	r16, 0x2C	; 44
    195e:	9e 01       	movw	r18, r28
    1960:	2f 5f       	subi	r18, 0xFF	; 255
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	4c e6       	ldi	r20, 0x6C	; 108
    1966:	52 e0       	ldi	r21, 0x02	; 2
    1968:	63 e6       	ldi	r22, 0x63	; 99
    196a:	72 e0       	ldi	r23, 0x02	; 2
    196c:	c6 01       	movw	r24, r12
    196e:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1972:	81 11       	cpse	r24, r1
    1974:	03 c0       	rjmp	.+6      	; 0x197c <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1976:	91 2f       	mov	r25, r17
    1978:	90 62       	ori	r25, 0x20	; 32
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    197c:	99 81       	ldd	r25, Y+1	; 0x01
    197e:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1980:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1984:	8f 2d       	mov	r24, r15
    1986:	28 96       	adiw	r28, 0x08	; 8
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	cf 90       	pop	r12
    19a2:	08 95       	ret

000019a4 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    19a4:	fc 01       	movw	r30, r24
    19a6:	10 82       	st	Z, r1
    19a8:	12 82       	std	Z+2, r1	; 0x02
    19aa:	11 82       	std	Z+1, r1	; 0x01
    19ac:	13 82       	std	Z+3, r1	; 0x03
    19ae:	14 82       	std	Z+4, r1	; 0x04
    19b0:	15 82       	std	Z+5, r1	; 0x05
    19b2:	16 82       	std	Z+6, r1	; 0x06
    19b4:	17 82       	std	Z+7, r1	; 0x07
    19b6:	12 86       	std	Z+10, r1	; 0x0a
    19b8:	11 86       	std	Z+9, r1	; 0x09
    19ba:	14 86       	std	Z+12, r1	; 0x0c
    19bc:	13 86       	std	Z+11, r1	; 0x0b
    19be:	08 95       	ret

000019c0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    19c0:	2a e0       	ldi	r18, 0x0A	; 10
    19c2:	82 9f       	mul	r24, r18
    19c4:	c0 01       	movw	r24, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	09 96       	adiw	r24, 0x09	; 9
    19ca:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <_ZN7Helpers14base64_enc_lenEi>

000019ce <_ZN10GsmPayload16createRawPayloadEPh>:
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	ec 01       	movw	r28, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	29 e0       	ldi	r18, 0x09	; 9
    19d8:	fe 01       	movw	r30, r28
    19da:	db 01       	movw	r26, r22
    19dc:	01 90       	ld	r0, Z+
    19de:	0d 92       	st	X+, r0
    19e0:	2a 95       	dec	r18
    19e2:	e1 f7       	brne	.-8      	; 0x19dc <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    19e4:	4b 81       	ldd	r20, Y+3	; 0x03
    19e6:	2a e0       	ldi	r18, 0x0A	; 10
    19e8:	42 9f       	mul	r20, r18
    19ea:	a0 01       	movw	r20, r0
    19ec:	11 24       	eor	r1, r1
    19ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f2:	09 96       	adiw	r24, 0x09	; 9
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	0c 94 c7 22 	jmp	0x458e	; 0x458e <memcpy>

000019fc <_ZN10GsmPayload20createEncodedPayloadEPc>:
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	6b 01       	movw	r12, r22
    1a16:	ed b6       	in	r14, 0x3d	; 61
    1a18:	fe b6       	in	r15, 0x3e	; 62
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	03 81       	ldd	r16, Z+3	; 0x03
    1a1e:	fa e0       	ldi	r31, 0x0A	; 10
    1a20:	0f 9f       	mul	r16, r31
    1a22:	80 01       	movw	r16, r0
    1a24:	11 24       	eor	r1, r1
    1a26:	07 5f       	subi	r16, 0xF7	; 247
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	2d b7       	in	r18, 0x3d	; 61
    1a2c:	3e b7       	in	r19, 0x3e	; 62
    1a2e:	20 1b       	sub	r18, r16
    1a30:	31 0b       	sbc	r19, r17
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	3e bf       	out	0x3e, r19	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	2d bf       	out	0x3d, r18	; 61
    1a3c:	ed b7       	in	r30, 0x3d	; 61
    1a3e:	fe b7       	in	r31, 0x3e	; 62
    1a40:	31 96       	adiw	r30, 0x01	; 1
    1a42:	5f 01       	movw	r10, r30
    1a44:	bf 01       	movw	r22, r30
    1a46:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN10GsmPayload16createRawPayloadEPh>
    1a4a:	a8 01       	movw	r20, r16
    1a4c:	b5 01       	movw	r22, r10
    1a4e:	c6 01       	movw	r24, r12
    1a50:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7Helpers13base64_encodeEPcPhi>
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	fe be       	out	0x3e, r15	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	ed be       	out	0x3d, r14	; 61
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	bf 90       	pop	r11
    1a70:	af 90       	pop	r10
    1a72:	08 95       	ret

00001a74 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1a74:	fc 01       	movw	r30, r24
    1a76:	74 87       	std	Z+12, r23	; 0x0c
    1a78:	63 87       	std	Z+11, r22	; 0x0b
    1a7a:	43 83       	std	Z+3, r20	; 0x03
    1a7c:	08 95       	ret

00001a7e <_ZN10GsmPayload11setModuleIdEh>:
    1a7e:	fc 01       	movw	r30, r24
    1a80:	60 83       	st	Z, r22
    1a82:	08 95       	ret

00001a84 <_ZN10GsmPayload13getBootNumberEv>:
    1a84:	fc 01       	movw	r30, r24
    1a86:	81 81       	ldd	r24, Z+1	; 0x01
    1a88:	92 81       	ldd	r25, Z+2	; 0x02
    1a8a:	08 95       	ret

00001a8c <_ZN10GsmPayload13setBootNumberEj>:
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	72 83       	std	Z+2, r23	; 0x02
    1a90:	61 83       	std	Z+1, r22	; 0x01
    1a92:	08 95       	ret

00001a94 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1a94:	fc 01       	movw	r30, r24
    1a96:	45 83       	std	Z+5, r20	; 0x05
    1a98:	56 83       	std	Z+6, r21	; 0x06
    1a9a:	67 83       	std	Z+7, r22	; 0x07
    1a9c:	70 87       	std	Z+8, r23	; 0x08
    1a9e:	08 95       	ret

00001aa0 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	ec 01       	movw	r28, r24
    1aa6:	69 ea       	ldi	r22, 0xA9	; 169
    1aa8:	73 e0       	ldi	r23, 0x03	; 3
    1aaa:	8b eb       	ldi	r24, 0xBB	; 187
    1aac:	93 e0       	ldi	r25, 0x03	; 3
    1aae:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1ab2:	4a e0       	ldi	r20, 0x0A	; 10
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	68 81       	ld	r22, Y
    1ab8:	8b eb       	ldi	r24, 0xBB	; 187
    1aba:	93 e0       	ldi	r25, 0x03	; 3
    1abc:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN5Print5printEhi>
    1ac0:	65 ea       	ldi	r22, 0xA5	; 165
    1ac2:	73 e0       	ldi	r23, 0x03	; 3
    1ac4:	8b eb       	ldi	r24, 0xBB	; 187
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1acc:	60 ea       	ldi	r22, 0xA0	; 160
    1ace:	73 e0       	ldi	r23, 0x03	; 3
    1ad0:	8b eb       	ldi	r24, 0xBB	; 187
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1ad8:	4a e0       	ldi	r20, 0x0A	; 10
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	69 81       	ldd	r22, Y+1	; 0x01
    1ade:	8b eb       	ldi	r24, 0xBB	; 187
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN5Print5printEhi>
    1ae6:	6c e9       	ldi	r22, 0x9C	; 156
    1ae8:	73 e0       	ldi	r23, 0x03	; 3
    1aea:	8b eb       	ldi	r24, 0xBB	; 187
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1af2:	67 e8       	ldi	r22, 0x87	; 135
    1af4:	73 e0       	ldi	r23, 0x03	; 3
    1af6:	8b eb       	ldi	r24, 0xBB	; 187
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1afe:	6b 81       	ldd	r22, Y+3	; 0x03
    1b00:	63 70       	andi	r22, 0x03	; 3
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	4a e0       	ldi	r20, 0x0A	; 10
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	8b eb       	ldi	r24, 0xBB	; 187
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <_ZN5Print5printEii>
    1b10:	6d e7       	ldi	r22, 0x7D	; 125
    1b12:	73 e0       	ldi	r23, 0x03	; 3
    1b14:	8b eb       	ldi	r24, 0xBB	; 187
    1b16:	93 e0       	ldi	r25, 0x03	; 3
    1b18:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1b1c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b1e:	6c 71       	andi	r22, 0x1C	; 28
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	75 95       	asr	r23
    1b24:	67 95       	ror	r22
    1b26:	75 95       	asr	r23
    1b28:	67 95       	ror	r22
    1b2a:	4a e0       	ldi	r20, 0x0A	; 10
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	8b eb       	ldi	r24, 0xBB	; 187
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <_ZN5Print5printEii>
    1b36:	64 e7       	ldi	r22, 0x74	; 116
    1b38:	73 e0       	ldi	r23, 0x03	; 3
    1b3a:	8b eb       	ldi	r24, 0xBB	; 187
    1b3c:	93 e0       	ldi	r25, 0x03	; 3
    1b3e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1b42:	6b 81       	ldd	r22, Y+3	; 0x03
    1b44:	65 fb       	bst	r22, 5
    1b46:	66 27       	eor	r22, r22
    1b48:	60 f9       	bld	r22, 0
    1b4a:	4a e0       	ldi	r20, 0x0A	; 10
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	8b eb       	ldi	r24, 0xBB	; 187
    1b52:	93 e0       	ldi	r25, 0x03	; 3
    1b54:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <_ZN5Print5printEii>
    1b58:	60 e7       	ldi	r22, 0x70	; 112
    1b5a:	73 e0       	ldi	r23, 0x03	; 3
    1b5c:	8b eb       	ldi	r24, 0xBB	; 187
    1b5e:	93 e0       	ldi	r25, 0x03	; 3
    1b60:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1b64:	63 e6       	ldi	r22, 0x63	; 99
    1b66:	73 e0       	ldi	r23, 0x03	; 3
    1b68:	8b eb       	ldi	r24, 0xBB	; 187
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1b70:	4a e0       	ldi	r20, 0x0A	; 10
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	6a 81       	ldd	r22, Y+2	; 0x02
    1b76:	8b eb       	ldi	r24, 0xBB	; 187
    1b78:	93 e0       	ldi	r25, 0x03	; 3
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <_ZN5Print7printlnEhi>

00001b82 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1b82:	fc 01       	movw	r30, r24
    1b84:	22 81       	ldd	r18, Z+2	; 0x02
    1b86:	21 11       	cpse	r18, r1
    1b88:	06 c0       	rjmp	.+12     	; 0x1b96 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1b8a:	90 81       	ld	r25, Z
    1b8c:	93 36       	cpi	r25, 0x63	; 99
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	97 30       	cpi	r25, 0x07	; 7
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	08 95       	ret

00001b9a <_ZN7Helpers15printSensorDataEP10SensorData>:
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
    1ba0:	6b e5       	ldi	r22, 0x5B	; 91
    1ba2:	73 e0       	ldi	r23, 0x03	; 3
    1ba4:	8b eb       	ldi	r24, 0xBB	; 187
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1bac:	69 81       	ldd	r22, Y+1	; 0x01
    1bae:	7a 81       	ldd	r23, Y+2	; 0x02
    1bb0:	4a e0       	ldi	r20, 0x0A	; 10
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	8b eb       	ldi	r24, 0xBB	; 187
    1bb6:	93 e0       	ldi	r25, 0x03	; 3
    1bb8:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN5Print5printEji>
    1bbc:	67 e5       	ldi	r22, 0x57	; 87
    1bbe:	73 e0       	ldi	r23, 0x03	; 3
    1bc0:	8b eb       	ldi	r24, 0xBB	; 187
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1bc8:	61 e5       	ldi	r22, 0x51	; 81
    1bca:	73 e0       	ldi	r23, 0x03	; 3
    1bcc:	8b eb       	ldi	r24, 0xBB	; 187
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1bd4:	6b 81       	ldd	r22, Y+3	; 0x03
    1bd6:	7c 81       	ldd	r23, Y+4	; 0x04
    1bd8:	4a e0       	ldi	r20, 0x0A	; 10
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	8b eb       	ldi	r24, 0xBB	; 187
    1bde:	93 e0       	ldi	r25, 0x03	; 3
    1be0:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN5Print5printEji>
    1be4:	6d e4       	ldi	r22, 0x4D	; 77
    1be6:	73 e0       	ldi	r23, 0x03	; 3
    1be8:	8b eb       	ldi	r24, 0xBB	; 187
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1bf0:	64 e4       	ldi	r22, 0x44	; 68
    1bf2:	73 e0       	ldi	r23, 0x03	; 3
    1bf4:	8b eb       	ldi	r24, 0xBB	; 187
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1bfc:	6d 81       	ldd	r22, Y+5	; 0x05
    1bfe:	7e 81       	ldd	r23, Y+6	; 0x06
    1c00:	4a e0       	ldi	r20, 0x0A	; 10
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	8b eb       	ldi	r24, 0xBB	; 187
    1c06:	93 e0       	ldi	r25, 0x03	; 3
    1c08:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN5Print5printEji>
    1c0c:	60 e4       	ldi	r22, 0x40	; 64
    1c0e:	73 e0       	ldi	r23, 0x03	; 3
    1c10:	8b eb       	ldi	r24, 0xBB	; 187
    1c12:	93 e0       	ldi	r25, 0x03	; 3
    1c14:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1c18:	6a e3       	ldi	r22, 0x3A	; 58
    1c1a:	73 e0       	ldi	r23, 0x03	; 3
    1c1c:	8b eb       	ldi	r24, 0xBB	; 187
    1c1e:	93 e0       	ldi	r25, 0x03	; 3
    1c20:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	4a e0       	ldi	r20, 0x0A	; 10
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	8b eb       	ldi	r24, 0xBB	; 187
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN5Print5printEji>
    1c34:	66 e3       	ldi	r22, 0x36	; 54
    1c36:	73 e0       	ldi	r23, 0x03	; 3
    1c38:	8b eb       	ldi	r24, 0xBB	; 187
    1c3a:	93 e0       	ldi	r25, 0x03	; 3
    1c3c:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1c40:	6f e2       	ldi	r22, 0x2F	; 47
    1c42:	73 e0       	ldi	r23, 0x03	; 3
    1c44:	8b eb       	ldi	r24, 0xBB	; 187
    1c46:	93 e0       	ldi	r25, 0x03	; 3
    1c48:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1c4c:	4a e0       	ldi	r20, 0x0A	; 10
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	69 85       	ldd	r22, Y+9	; 0x09
    1c52:	8b eb       	ldi	r24, 0xBB	; 187
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <_ZN5Print7printlnEhi>

00001c5e <_ZN7Helpers12freeListSizeEv>:
    1c5e:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <__flp>
    1c62:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <__flp+0x1>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	30 97       	sbiw	r30, 0x00	; 0
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <_ZN7Helpers12freeListSizeEv+0x22>
    1c6e:	02 96       	adiw	r24, 0x02	; 2
    1c70:	20 81       	ld	r18, Z
    1c72:	31 81       	ldd	r19, Z+1	; 0x01
    1c74:	82 0f       	add	r24, r18
    1c76:	93 1f       	adc	r25, r19
    1c78:	02 80       	ldd	r0, Z+2	; 0x02
    1c7a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c7c:	e0 2d       	mov	r30, r0
    1c7e:	f5 cf       	rjmp	.-22     	; 0x1c6a <_ZN7Helpers12freeListSizeEv+0xc>
    1c80:	08 95       	ret

00001c82 <_ZN7Helpers10freeMemoryEv>:
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <_ZN7Helpers10freeMemoryEv+0xa>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <__brkval>
    1c94:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <__brkval+0x1>
    1c98:	8e 01       	movw	r16, r28
    1c9a:	0f 5f       	subi	r16, 0xFF	; 255
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <_ZN7Helpers10freeMemoryEv+0x2a>
    1ca2:	09 5a       	subi	r16, 0xA9	; 169
    1ca4:	14 40       	sbci	r17, 0x04	; 4
    1ca6:	1a 83       	std	Y+2, r17	; 0x02
    1ca8:	09 83       	std	Y+1, r16	; 0x01
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <_ZN7Helpers10freeMemoryEv+0x3e>
    1cac:	08 1b       	sub	r16, r24
    1cae:	19 0b       	sbc	r17, r25
    1cb0:	1a 83       	std	Y+2, r17	; 0x02
    1cb2:	09 83       	std	Y+1, r16	; 0x01
    1cb4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <_ZN7Helpers12freeListSizeEv>
    1cb8:	80 0f       	add	r24, r16
    1cba:	91 1f       	adc	r25, r17
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <_ZN7Helpers14base64_enc_lenEi>:
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	2e 5f       	subi	r18, 0xFE	; 254
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	e3 e0       	ldi	r30, 0x03	; 3
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	c9 01       	movw	r24, r18
    1cde:	bf 01       	movw	r22, r30
    1ce0:	0e 94 3b 20 	call	0x4076	; 0x4076 <__divmodhi4>
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	48 1b       	sub	r20, r24
    1ce8:	59 0b       	sbc	r21, r25
    1cea:	ca 01       	movw	r24, r20
    1cec:	bf 01       	movw	r22, r30
    1cee:	0e 94 3b 20 	call	0x4076	; 0x4076 <__divmodhi4>
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	08 95       	ret

00001d00 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1d00:	dc 01       	movw	r26, r24
    1d02:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1d04:	80 81       	ld	r24, Z
    1d06:	86 95       	lsr	r24
    1d08:	86 95       	lsr	r24
    1d0a:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1d0c:	80 81       	ld	r24, Z
    1d0e:	83 70       	andi	r24, 0x03	; 3
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	92 95       	swap	r25
    1d14:	9f 70       	andi	r25, 0x0F	; 15
    1d16:	20 e1       	ldi	r18, 0x10	; 16
    1d18:	82 9f       	mul	r24, r18
    1d1a:	90 0d       	add	r25, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	11 96       	adiw	r26, 0x01	; 1
    1d20:	9c 93       	st	X, r25
    1d22:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	9f 70       	andi	r25, 0x0F	; 15
    1d28:	99 0f       	add	r25, r25
    1d2a:	99 0f       	add	r25, r25
    1d2c:	22 81       	ldd	r18, Z+2	; 0x02
    1d2e:	22 95       	swap	r18
    1d30:	26 95       	lsr	r18
    1d32:	26 95       	lsr	r18
    1d34:	23 70       	andi	r18, 0x03	; 3
    1d36:	92 0f       	add	r25, r18
    1d38:	12 96       	adiw	r26, 0x02	; 2
    1d3a:	9c 93       	st	X, r25
    1d3c:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	8f 73       	andi	r24, 0x3F	; 63
    1d42:	13 96       	adiw	r26, 0x03	; 3
    1d44:	8c 93       	st	X, r24
    1d46:	08 95       	ret

00001d48 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1d48:	6f 92       	push	r6
    1d4a:	7f 92       	push	r7
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	27 97       	sbiw	r28, 0x07	; 7
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	6c 01       	movw	r12, r24
    1d76:	5b 01       	movw	r10, r22
    1d78:	3b 01       	movw	r6, r22
    1d7a:	64 0e       	add	r6, r20
    1d7c:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1d7e:	e1 2c       	mov	r14, r1
    1d80:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1d82:	00 e0       	ldi	r16, 0x00	; 0
    1d84:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1d86:	4e 01       	movw	r8, r28
    1d88:	85 e0       	ldi	r24, 0x05	; 5
    1d8a:	88 0e       	add	r8, r24
    1d8c:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1d8e:	6a 14       	cp	r6, r10
    1d90:	7b 04       	cpc	r7, r11
    1d92:	49 f1       	breq	.+82     	; 0x1de6 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1d94:	c8 01       	movw	r24, r16
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	f5 01       	movw	r30, r10
    1d9a:	21 91       	ld	r18, Z+
    1d9c:	5f 01       	movw	r10, r30
    1d9e:	f4 01       	movw	r30, r8
    1da0:	e0 0f       	add	r30, r16
    1da2:	f1 1f       	adc	r31, r17
    1da4:	20 83       	st	Z, r18
		if(i == 3) {
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1dac:	8c 01       	movw	r16, r24
    1dae:	ef cf       	rjmp	.-34     	; 0x1d8e <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1db0:	b4 01       	movw	r22, r8
    1db2:	ce 01       	movw	r24, r28
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_Z8a3_to_a4PhS_>
    1dba:	de 01       	movw	r26, r28
    1dbc:	11 96       	adiw	r26, 0x01	; 1
    1dbe:	c6 01       	movw	r24, r12
    1dc0:	8e 0d       	add	r24, r14
    1dc2:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	e1 55       	subi	r30, 0x51	; 81
    1dca:	fc 4f       	sbci	r31, 0xFC	; 252
    1dcc:	24 91       	lpm	r18, Z
    1dce:	fc 01       	movw	r30, r24
    1dd0:	21 93       	st	Z+, r18
    1dd2:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1dd4:	a8 15       	cp	r26, r8
    1dd6:	b9 05       	cpc	r27, r9
    1dd8:	a9 f7       	brne	.-22     	; 0x1dc4 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1dda:	f4 e0       	ldi	r31, 0x04	; 4
    1ddc:	ef 0e       	add	r14, r31
    1dde:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	e3 cf       	rjmp	.-58     	; 0x1dac <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1de6:	01 15       	cp	r16, r1
    1de8:	11 05       	cpc	r17, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1dec:	3c c0       	rjmp	.+120    	; 0x1e66 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1dee:	be 01       	movw	r22, r28
    1df0:	6b 5f       	subi	r22, 0xFB	; 251
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	fb 01       	movw	r30, r22
    1df6:	e0 0f       	add	r30, r16
    1df8:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1dfa:	cf 01       	movw	r24, r30
    1dfc:	86 1b       	sub	r24, r22
    1dfe:	97 0b       	sbc	r25, r23
    1e00:	03 97       	sbiw	r24, 0x03	; 3
    1e02:	14 f4       	brge	.+4      	; 0x1e08 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1e04:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1e06:	f9 cf       	rjmp	.-14     	; 0x1dfa <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1e08:	ce 01       	movw	r24, r28
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	5c 01       	movw	r10, r24
    1e0e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_Z8a3_to_a4PhS_>
    1e12:	c6 01       	movw	r24, r12
    1e14:	8e 0d       	add	r24, r14
    1e16:	9f 1d       	adc	r25, r15
    1e18:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1e1a:	ed 91       	ld	r30, X+
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	e1 55       	subi	r30, 0x51	; 81
    1e20:	fc 4f       	sbci	r31, 0xFC	; 252
    1e22:	24 91       	lpm	r18, Z
    1e24:	fc 01       	movw	r30, r24
    1e26:	21 93       	st	Z+, r18
    1e28:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1e2a:	9d 01       	movw	r18, r26
    1e2c:	2a 19       	sub	r18, r10
    1e2e:	3b 09       	sbc	r19, r11
    1e30:	02 17       	cp	r16, r18
    1e32:	13 07       	cpc	r17, r19
    1e34:	94 f7       	brge	.-28     	; 0x1e1a <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1e36:	ff ef       	ldi	r31, 0xFF	; 255
    1e38:	ef 1a       	sub	r14, r31
    1e3a:	ff 0a       	sbc	r15, r31
    1e3c:	e0 0e       	add	r14, r16
    1e3e:	f1 1e       	adc	r15, r17
    1e40:	f6 01       	movw	r30, r12
    1e42:	ee 0d       	add	r30, r14
    1e44:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e46:	0c 19       	sub	r16, r12
    1e48:	1d 09       	sbc	r17, r13
    1e4a:	0e 19       	sub	r16, r14
    1e4c:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1e4e:	8d e3       	ldi	r24, 0x3D	; 61
    1e50:	7f 01       	movw	r14, r30
    1e52:	ec 18       	sub	r14, r12
    1e54:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e56:	98 01       	movw	r18, r16
    1e58:	2e 0f       	add	r18, r30
    1e5a:	3f 1f       	adc	r19, r31
    1e5c:	23 30       	cpi	r18, 0x03	; 3
    1e5e:	31 05       	cpc	r19, r1
    1e60:	14 f4       	brge	.+4      	; 0x1e66 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1e62:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e64:	f5 cf       	rjmp	.-22     	; 0x1e50 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1e66:	f6 01       	movw	r30, r12
    1e68:	ee 0d       	add	r30, r14
    1e6a:	ff 1d       	adc	r31, r15
    1e6c:	10 82       	st	Z, r1
	
	return encLen;
}
    1e6e:	c7 01       	movw	r24, r14
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	27 96       	adiw	r28, 0x07	; 7
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	df 90       	pop	r13
    1e8c:	cf 90       	pop	r12
    1e8e:	bf 90       	pop	r11
    1e90:	af 90       	pop	r10
    1e92:	9f 90       	pop	r9
    1e94:	8f 90       	pop	r8
    1e96:	7f 90       	pop	r7
    1e98:	6f 90       	pop	r6
    1e9a:	08 95       	ret

00001e9c <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	85 e0       	ldi	r24, 0x05	; 5
    1ea0:	0e 94 4d 1c 	call	0x389a	; 0x389a <pinMode>
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	85 e0       	ldi	r24, 0x05	; 5
    1ea8:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
    1eac:	68 eb       	ldi	r22, 0xB8	; 184
    1eae:	7b e0       	ldi	r23, 0x0B	; 11
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	8d e0       	ldi	r24, 0x0D	; 13
    1ebc:	0e 94 4d 1c 	call	0x389a	; 0x389a <pinMode>
    1ec0:	26 e0       	ldi	r18, 0x06	; 6
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	55 e2       	ldi	r21, 0x25	; 37
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	8b eb       	ldi	r24, 0xBB	; 187
    1ecc:	93 e0       	ldi	r25, 0x03	; 3
    1ece:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN14HardwareSerial5beginEmh>
    1ed2:	66 e2       	ldi	r22, 0x26	; 38
    1ed4:	76 e0       	ldi	r23, 0x06	; 6
    1ed6:	8b eb       	ldi	r24, 0xBB	; 187
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ede:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    1ee2:	84 60       	ori	r24, 0x04	; 4
    1ee4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_behaviour>
    1ee8:	08 95       	ret

00001eea <_Z21ensureFonaInitialisedbPb>:
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	2c 97       	sbiw	r28, 0x0c	; 12
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	f8 2e       	mov	r15, r24
    1f08:	8b 01       	movw	r16, r22
    1f0a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_initFonaLoopCount>
    1f0e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_initFonaLoopCount+0x1>
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <_initFonaLoopCount+0x1>
    1f18:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <_initFonaLoopCount>
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	fb 01       	movw	r30, r22
    1f20:	80 83       	st	Z, r24
    1f22:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <_fonaStatusInit>
    1f26:	81 11       	cpse	r24, r1
    1f28:	34 c0       	rjmp	.+104    	; 0x1f92 <_Z21ensureFonaInitialisedbPb+0xa8>
    1f2a:	61 e1       	ldi	r22, 0x11	; 17
    1f2c:	76 e0       	ldi	r23, 0x06	; 6
    1f2e:	8b eb       	ldi	r24, 0xBB	; 187
    1f30:	93 e0       	ldi	r25, 0x03	; 3
    1f32:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f36:	42 e0       	ldi	r20, 0x02	; 2
    1f38:	63 e0       	ldi	r22, 0x03	; 3
    1f3a:	86 ed       	ldi	r24, 0xD6	; 214
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN13Adafruit_FONA5beginEhh>
    1f42:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <_fonaStatusInit>
    1f46:	8b ec       	ldi	r24, 0xCB	; 203
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_ZN12RmMemManager11getModuleIdEv>
    1f4e:	e8 2e       	mov	r14, r24
    1f50:	69 e5       	ldi	r22, 0x59	; 89
    1f52:	71 e0       	ldi	r23, 0x01	; 1
    1f54:	ce 01       	movw	r24, r28
    1f56:	07 96       	adiw	r24, 0x07	; 7
    1f58:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <_ZN6StringC1EPKc>
    1f5c:	6e 2d       	mov	r22, r14
    1f5e:	ce 01       	movw	r24, r28
    1f60:	07 96       	adiw	r24, 0x07	; 7
    1f62:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_ZN6String6concatEh>
    1f66:	be 01       	movw	r22, r28
    1f68:	69 5f       	subi	r22, 0xF9	; 249
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN6StringC1ERKS_>
    1f74:	be 01       	movw	r22, r28
    1f76:	6f 5f       	subi	r22, 0xFF	; 255
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	86 ed       	ldi	r24, 0xD6	; 214
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	0e 94 21 04 	call	0x842	; 0x842 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1f82:	ce 01       	movw	r24, r28
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN6StringD1Ev>
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	07 96       	adiw	r24, 0x07	; 7
    1f8e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN6StringD1Ev>
    1f92:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <_fonaStatusInit>
    1f96:	83 50       	subi	r24, 0x03	; 3
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	a8 f4       	brcc	.+42     	; 0x1fc6 <_Z21ensureFonaInitialisedbPb+0xdc>
    1f9c:	66 ef       	ldi	r22, 0xF6	; 246
    1f9e:	75 e0       	ldi	r23, 0x05	; 5
    1fa0:	8b eb       	ldi	r24, 0xBB	; 187
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    1fa8:	67 e6       	ldi	r22, 0x67	; 103
    1faa:	71 e0       	ldi	r23, 0x01	; 1
    1fac:	8b eb       	ldi	r24, 0xBB	; 187
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    1fb4:	4a e0       	ldi	r20, 0x0A	; 10
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <_fonaStatusInit>
    1fbc:	8b eb       	ldi	r24, 0xBB	; 187
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN5Print7printlnEhi>
    1fc4:	b2 c0       	rjmp	.+356    	; 0x212a <_Z21ensureFonaInitialisedbPb+0x240>
    1fc6:	ff 20       	and	r15, r15
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_Z21ensureFonaInitialisedbPb+0xe2>
    1fca:	ac c0       	rjmp	.+344    	; 0x2124 <_Z21ensureFonaInitialisedbPb+0x23a>
    1fcc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_gprsStatusInit>
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	49 c0       	rjmp	.+146    	; 0x2066 <_Z21ensureFonaInitialisedbPb+0x17c>
    1fd4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_initFonaLoopCount>
    1fd8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_initFonaLoopCount+0x1>
    1fdc:	6a e0       	ldi	r22, 0x0A	; 10
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	0e 94 27 20 	call	0x404e	; 0x404e <__udivmodhi4>
    1fe4:	89 2b       	or	r24, r25
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <_Z21ensureFonaInitialisedbPb+0x104>
    1fe8:	f8 01       	movw	r30, r16
    1fea:	10 82       	st	Z, r1
    1fec:	3c c0       	rjmp	.+120    	; 0x2066 <_Z21ensureFonaInitialisedbPb+0x17c>
    1fee:	69 ed       	ldi	r22, 0xD9	; 217
    1ff0:	75 e0       	ldi	r23, 0x05	; 5
    1ff2:	8b eb       	ldi	r24, 0xBB	; 187
    1ff4:	93 e0       	ldi	r25, 0x03	; 3
    1ff6:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ffa:	61 e0       	ldi	r22, 0x01	; 1
    1ffc:	86 ed       	ldi	r24, 0xD6	; 214
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN13Adafruit_FONA10enableGPRSEb>
    2004:	f8 2e       	mov	r15, r24
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	8f 0d       	add	r24, r15
    200a:	82 30       	cpi	r24, 0x02	; 2
    200c:	20 f1       	brcs	.+72     	; 0x2056 <_Z21ensureFonaInitialisedbPb+0x16c>
    200e:	61 ec       	ldi	r22, 0xC1	; 193
    2010:	75 e0       	ldi	r23, 0x05	; 5
    2012:	8b eb       	ldi	r24, 0xBB	; 187
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    201a:	67 e6       	ldi	r22, 0x67	; 103
    201c:	71 e0       	ldi	r23, 0x01	; 1
    201e:	8b eb       	ldi	r24, 0xBB	; 187
    2020:	93 e0       	ldi	r25, 0x03	; 3
    2022:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    2026:	6f 2d       	mov	r22, r15
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	4a e0       	ldi	r20, 0x0A	; 10
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	8b eb       	ldi	r24, 0xBB	; 187
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEii>
    2036:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_initFonaLoopCount>
    203a:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_initFonaLoopCount+0x1>
    203e:	cc 97       	sbiw	r24, 0x3c	; 60
    2040:	28 f4       	brcc	.+10     	; 0x204c <_Z21ensureFonaInitialisedbPb+0x162>
    2042:	f8 01       	movw	r30, r16
    2044:	10 82       	st	Z, r1
    2046:	6b e9       	ldi	r22, 0x9B	; 155
    2048:	75 e0       	ldi	r23, 0x05	; 5
    204a:	09 c0       	rjmp	.+18     	; 0x205e <_Z21ensureFonaInitialisedbPb+0x174>
    204c:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <_gprsStatusInit>
    2050:	68 e7       	ldi	r22, 0x78	; 120
    2052:	75 e0       	ldi	r23, 0x05	; 5
    2054:	04 c0       	rjmp	.+8      	; 0x205e <_Z21ensureFonaInitialisedbPb+0x174>
    2056:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <_gprsStatusInit>
    205a:	68 e5       	ldi	r22, 0x58	; 88
    205c:	75 e0       	ldi	r23, 0x05	; 5
    205e:	8b eb       	ldi	r24, 0xBB	; 187
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    2066:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_gprsStatusInit>
    206a:	81 50       	subi	r24, 0x01	; 1
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	08 f0       	brcs	.+2      	; 0x2072 <_Z21ensureFonaInitialisedbPb+0x188>
    2070:	5c c0       	rjmp	.+184    	; 0x212a <_Z21ensureFonaInitialisedbPb+0x240>
    2072:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_gprsSignalLoopCount>
    2076:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_gprsSignalLoopCount+0x1>
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <_gprsSignalLoopCount+0x1>
    2080:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <_gprsSignalLoopCount>
    2084:	82 ec       	ldi	r24, 0xC2	; 194
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    208c:	81 11       	cpse	r24, r1
    208e:	4a c0       	rjmp	.+148    	; 0x2124 <_Z21ensureFonaInitialisedbPb+0x23a>
    2090:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_gprsSignalLoopCount>
    2094:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_gprsSignalLoopCount+0x1>
    2098:	6a e0       	ldi	r22, 0x0A	; 10
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	0e 94 27 20 	call	0x404e	; 0x404e <__udivmodhi4>
    20a0:	89 2b       	or	r24, r25
    20a2:	19 f0       	breq	.+6      	; 0x20aa <_Z21ensureFonaInitialisedbPb+0x1c0>
    20a4:	f8 01       	movw	r30, r16
    20a6:	10 82       	st	Z, r1
    20a8:	3d c0       	rjmp	.+122    	; 0x2124 <_Z21ensureFonaInitialisedbPb+0x23a>
    20aa:	6d e3       	ldi	r22, 0x3D	; 61
    20ac:	75 e0       	ldi	r23, 0x05	; 5
    20ae:	8b eb       	ldi	r24, 0xBB	; 187
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    20b6:	86 ed       	ldi	r24, 0xD6	; 214
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_ZN13Adafruit_FONA7getRSSIEv>
    20be:	69 83       	std	Y+1, r22	; 0x01
    20c0:	7a 83       	std	Y+2, r23	; 0x02
    20c2:	8b 83       	std	Y+3, r24	; 0x03
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    20ce:	ce 01       	movw	r24, r28
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    20d6:	81 11       	cpse	r24, r1
    20d8:	13 c0       	rjmp	.+38     	; 0x2100 <_Z21ensureFonaInitialisedbPb+0x216>
    20da:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_gprsSignalLoopCount>
    20de:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_gprsSignalLoopCount+0x1>
    20e2:	8c 32       	cpi	r24, 0x2C	; 44
    20e4:	91 40       	sbci	r25, 0x01	; 1
    20e6:	48 f4       	brcc	.+18     	; 0x20fa <_Z21ensureFonaInitialisedbPb+0x210>
    20e8:	f8 01       	movw	r30, r16
    20ea:	10 82       	st	Z, r1
    20ec:	6e e0       	ldi	r22, 0x0E	; 14
    20ee:	75 e0       	ldi	r23, 0x05	; 5
    20f0:	8b eb       	ldi	r24, 0xBB	; 187
    20f2:	93 e0       	ldi	r25, 0x03	; 3
    20f4:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    20f8:	15 c0       	rjmp	.+42     	; 0x2124 <_Z21ensureFonaInitialisedbPb+0x23a>
    20fa:	66 ed       	ldi	r22, 0xD6	; 214
    20fc:	74 e0       	ldi	r23, 0x04	; 4
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <_Z21ensureFonaInitialisedbPb+0x21a>
    2100:	60 eb       	ldi	r22, 0xB0	; 176
    2102:	74 e0       	ldi	r23, 0x04	; 4
    2104:	8b eb       	ldi	r24, 0xBB	; 187
    2106:	93 e0       	ldi	r25, 0x03	; 3
    2108:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	ab 81       	ldd	r26, Y+3	; 0x03
    2112:	bc 81       	ldd	r27, Y+4	; 0x04
    2114:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <_rssiStatusInit>
    2118:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <_rssiStatusInit+0x1>
    211c:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <_rssiStatusInit+0x2>
    2120:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <_rssiStatusInit+0x3>
    2124:	86 ed       	ldi	r24, 0xD6	; 214
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	02 c0       	rjmp	.+4      	; 0x212e <_Z21ensureFonaInitialisedbPb+0x244>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	2c 96       	adiw	r28, 0x0c	; 12
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	08 95       	ret

00002148 <_Z15switchOffSystemv>:
    2148:	69 e6       	ldi	r22, 0x69	; 105
    214a:	71 e0       	ldi	r23, 0x01	; 1
    214c:	8b eb       	ldi	r24, 0xBB	; 187
    214e:	93 e0       	ldi	r25, 0x03	; 3
    2150:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	85 e0       	ldi	r24, 0x05	; 5
    2158:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
    215c:	68 eb       	ldi	r22, 0xB8	; 184
    215e:	7b e0       	ldi	r23, 0x0B	; 11
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <delay>

00002168 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	2a 97       	sbiw	r28, 0x0a	; 10
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    217c:	6d e9       	ldi	r22, 0x9D	; 157
    217e:	74 e0       	ldi	r23, 0x04	; 4
    2180:	8b eb       	ldi	r24, 0xBB	; 187
    2182:	93 e0       	ldi	r25, 0x03	; 3
    2184:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	1b 82       	std	Y+3, r1	; 0x03
    218e:	1a 82       	std	Y+2, r1	; 0x02
    2190:	1d 82       	std	Y+5, r1	; 0x05
    2192:	1c 82       	std	Y+4, r1	; 0x04
    2194:	1f 82       	std	Y+7, r1	; 0x07
    2196:	1e 82       	std	Y+6, r1	; 0x06
    2198:	19 86       	std	Y+9, r1	; 0x09
    219a:	18 86       	std	Y+8, r1	; 0x08
    219c:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    219e:	be 01       	movw	r22, r28
    21a0:	6f 5f       	subi	r22, 0xFF	; 255
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	89 ec       	ldi	r24, 0xC9	; 201
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	2a 96       	adiw	r28, 0x0a	; 10
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData>:

void createEncodedData(Adafruit_FONA* fona, char* encodedOutput, uint8_t maxReadings, DailyCycleData* cycleData) {
    21c0:	3f 92       	push	r3
    21c2:	4f 92       	push	r4
    21c4:	5f 92       	push	r5
    21c6:	6f 92       	push	r6
    21c8:	7f 92       	push	r7
    21ca:	8f 92       	push	r8
    21cc:	9f 92       	push	r9
    21ce:	af 92       	push	r10
    21d0:	bf 92       	push	r11
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	2f 97       	sbiw	r28, 0x0f	; 15
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	6c 01       	movw	r12, r24
    21f4:	4b 01       	movw	r8, r22
    21f6:	34 2e       	mov	r3, r20
    21f8:	89 01       	movw	r16, r18
	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
		cycleData->BattPct = -1;
	else
		cycleData->BattPct = battPct;
}
    21fa:	ad b6       	in	r10, 0x3d	; 61
    21fc:	be b6       	in	r11, 0x3e	; 62
}

void createEncodedData(Adafruit_FONA* fona, char* encodedOutput, uint8_t maxReadings, DailyCycleData* cycleData) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int8_t freeRAM = Helpers::freeMemory();
    21fe:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_ZN7Helpers10freeMemoryEv>
    2202:	f8 2e       	mov	r15, r24
	int8_t minRAM = (sizeof(SensorData)*maxReadings)
					+sizeof(FONA_GET_RSSI)
					+sizeof(GsmPayload)
					+100; //Buffer
					
	if (freeRAM < minRAM)
    2204:	93 2d       	mov	r25, r3
    2206:	99 0f       	add	r25, r25
    2208:	89 2f       	mov	r24, r25
    220a:	88 0f       	add	r24, r24
    220c:	88 0f       	add	r24, r24
    220e:	89 0f       	add	r24, r25
    2210:	8b 58       	subi	r24, 0x8B	; 139
    2212:	f8 16       	cp	r15, r24
    2214:	34 f4       	brge	.+12     	; 0x2222 <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData+0x62>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    2216:	6d e6       	ldi	r22, 0x6D	; 109
    2218:	74 e0       	ldi	r23, 0x04	; 4
    221a:	8b eb       	ldi	r24, 0xBB	; 187
    221c:	93 e0       	ldi	r25, 0x03	; 3
    221e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    2222:	67 e6       	ldi	r22, 0x67	; 103
    2224:	71 e0       	ldi	r23, 0x01	; 1
    2226:	8b eb       	ldi	r24, 0xBB	; 187
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    222e:	6f 2d       	mov	r22, r15
    2230:	ff 0c       	add	r15, r15
    2232:	77 0b       	sbc	r23, r23
    2234:	4a e0       	ldi	r20, 0x0A	; 10
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	8b eb       	ldi	r24, 0xBB	; 187
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEii>
	
	FONA_GET_RSSI rssi = fona->getRSSI();
    2240:	c6 01       	movw	r24, r12
    2242:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_ZN13Adafruit_FONA7getRSSIEv>
    2246:	2b 01       	movw	r4, r22
    2248:	3c 01       	movw	r6, r24
	
	SensorData sData[maxReadings];
    224a:	2d b7       	in	r18, 0x3d	; 61
    224c:	3e b7       	in	r19, 0x3e	; 62
    224e:	8a e0       	ldi	r24, 0x0A	; 10
    2250:	38 9e       	mul	r3, r24
    2252:	20 19       	sub	r18, r0
    2254:	31 09       	sbc	r19, r1
    2256:	11 24       	eor	r1, r1
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	3e bf       	out	0x3e, r19	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	2d bf       	out	0x3d, r18	; 61
    2262:	ed b7       	in	r30, 0x3d	; 61
    2264:	fe b7       	in	r31, 0x3e	; 62
    2266:	31 96       	adiw	r30, 0x01	; 1
    2268:	7f 01       	movw	r14, r30
    226a:	83 2d       	mov	r24, r3
    226c:	90 e0       	ldi	r25, 0x00	; 0
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    226e:	21 e0       	ldi	r18, 0x01	; 1
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	60 f0       	brcs	.+24     	; 0x228c <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData+0xcc>
    2274:	20 83       	st	Z, r18
    2276:	12 82       	std	Z+2, r1	; 0x02
    2278:	11 82       	std	Z+1, r1	; 0x01
    227a:	14 82       	std	Z+4, r1	; 0x04
    227c:	13 82       	std	Z+3, r1	; 0x03
    227e:	16 82       	std	Z+6, r1	; 0x06
    2280:	15 82       	std	Z+5, r1	; 0x05
    2282:	10 86       	std	Z+8, r1	; 0x08
    2284:	17 82       	std	Z+7, r1	; 0x07
    2286:	11 86       	std	Z+9, r1	; 0x09
    2288:	3a 96       	adiw	r30, 0x0a	; 10
    228a:	f2 cf       	rjmp	.-28     	; 0x2270 <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData+0xb0>
	uint8_t numLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    228c:	43 2d       	mov	r20, r3
    228e:	b7 01       	movw	r22, r14
    2290:	8b ec       	ldi	r24, 0xCB	; 203
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 c6 12 	call	0x258c	; 0x258c <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    2298:	38 2e       	mov	r3, r24
	
	GsmPayload payload;
    229a:	ce 01       	movw	r24, r28
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    22a2:	67 ee       	ldi	r22, 0xE7	; 231
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    22ac:	61 e2       	ldi	r22, 0x21	; 33
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	ce 01       	movw	r24, r28
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, numLoaded);
    22b8:	43 2d       	mov	r20, r3
    22ba:	b7 01       	movw	r22, r14
    22bc:	ce 01       	movw	r24, r28
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(rssi);
    22c4:	b3 01       	movw	r22, r6
    22c6:	a2 01       	movw	r20, r4
    22c8:	ce 01       	movw	r24, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    22d0:	b4 01       	movw	r22, r8
    22d2:	ce 01       	movw	r24, r28
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN10GsmPayload20createEncodedPayloadEPc>
	
	cycleData->BootNo = payload.getBootNumber();
    22da:	ce 01       	movw	r24, r28
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN10GsmPayload13getBootNumberEv>
    22e2:	f8 01       	movw	r30, r16
    22e4:	93 83       	std	Z+3, r25	; 0x03
    22e6:	82 83       	std	Z+2, r24	; 0x02
	cycleData->NoOfReadings = numLoaded;
    22e8:	34 82       	std	Z+4, r3	; 0x04
	cycleData->RSSI = rssi;
    22ea:	41 86       	std	Z+9, r4	; 0x09
    22ec:	52 86       	std	Z+10, r5	; 0x0a
    22ee:	63 86       	std	Z+11, r6	; 0x0b
    22f0:	74 86       	std	Z+12, r7	; 0x0c
	
	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    22f2:	be 01       	movw	r22, r28
    22f4:	62 5f       	subi	r22, 0xF2	; 242
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	c6 01       	movw	r24, r12
    22fa:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN13Adafruit_FONA14getBattPercentEPj>
    22fe:	81 11       	cpse	r24, r1
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData+0x146>
		cycleData->BattPct = -1;
    2302:	8f ef       	ldi	r24, 0xFF	; 255
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData+0x148>
	else
		cycleData->BattPct = battPct;
    2306:	8e 85       	ldd	r24, Y+14	; 0x0e
    2308:	f8 01       	movw	r30, r16
    230a:	81 83       	std	Z+1, r24	; 0x01
}
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	be be       	out	0x3e, r11	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	ad be       	out	0x3d, r10	; 61
    2316:	2f 96       	adiw	r28, 0x0f	; 15
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
    2342:	3f 90       	pop	r3
    2344:	08 95       	ret

00002346 <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    2346:	8f 92       	push	r8
    2348:	9f 92       	push	r9
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	60 97       	sbiw	r28, 0x10	; 16
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
		
		
		
		
	return true;
}
    236c:	ad b6       	in	r10, 0x3d	; 61
    236e:	be b6       	in	r11, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2370:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_sendDataLoopCount>
    2374:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_sendDataLoopCount+0x1>
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <_sendDataLoopCount+0x1>
    237e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	31 f4       	brne	.+12     	; 0x2392 <_Z8sendDatav+0x4c>
		RM_LOGLN(F("Initialising Fona to send data"));
    2386:	6e e4       	ldi	r22, 0x4E	; 78
    2388:	74 e0       	ldi	r23, 0x04	; 4
    238a:	8b eb       	ldi	r24, 0xBB	; 187
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	boolean isComplete;
	Adafruit_FONA* sendDataFona = ensureFonaInitialised(true, &isComplete);
    2392:	be 01       	movw	r22, r28
    2394:	60 5f       	subi	r22, 0xF0	; 240
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <_Z21ensureFonaInitialisedbPb>
    239e:	8c 01       	movw	r16, r24
	
	if (!isComplete) {
    23a0:	d8 88       	ldd	r13, Y+16	; 0x10
    23a2:	d1 10       	cpse	r13, r1
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <_Z8sendDatav+0x66>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    23a6:	66 e3       	ldi	r22, 0x36	; 54
    23a8:	74 e0       	ldi	r23, 0x04	; 4
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <_Z8sendDatav+0x6e>
		return false; //Still waiting to initialise
	}
		
	if (sendDataFona == NULL) {
    23ac:	89 2b       	or	r24, r25
    23ae:	39 f4       	brne	.+14     	; 0x23be <_Z8sendDatav+0x78>
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    23b0:	63 e2       	ldi	r22, 0x23	; 35
    23b2:	74 e0       	ldi	r23, 0x04	; 4
    23b4:	8b eb       	ldi	r24, 0xBB	; 187
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
    23bc:	38 c0       	rjmp	.+112    	; 0x242e <_Z8sendDatav+0xe8>
		return true; //Error initialising
	}
	
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    23be:	84 e1       	ldi	r24, 0x14	; 20
    23c0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    23c4:	4c 01       	movw	r8, r24
	char encodedData[encodedSz];
    23c6:	8d b7       	in	r24, 0x3d	; 61
    23c8:	9e b7       	in	r25, 0x3e	; 62
    23ca:	88 19       	sub	r24, r8
    23cc:	99 09       	sbc	r25, r9
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	9e bf       	out	0x3e, r25	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	8d bf       	out	0x3d, r24	; 61
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	7c 01       	movw	r14, r24
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	1a 82       	std	Y+2, r1	; 0x02
    23e2:	1c 82       	std	Y+4, r1	; 0x04
    23e4:	1b 82       	std	Y+3, r1	; 0x03
    23e6:	1d 82       	std	Y+5, r1	; 0x05
    23e8:	1e 82       	std	Y+6, r1	; 0x06
    23ea:	18 86       	std	Y+8, r1	; 0x08
    23ec:	1f 82       	std	Y+7, r1	; 0x07
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    23ee:	1a 86       	std	Y+10, r1	; 0x0a
    23f0:	1b 86       	std	Y+11, r1	; 0x0b
    23f2:	1c 86       	std	Y+12, r1	; 0x0c
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	DailyCycleData sendData;
	createEncodedData(sendDataFona, encodedData, GPRS_MAX_READINGS_FOR_SEND, &sendData);
    23f4:	9e 01       	movw	r18, r28
    23f6:	2f 5f       	subi	r18, 0xFF	; 255
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	44 e1       	ldi	r20, 0x14	; 20
    23fc:	b7 01       	movw	r22, r14
    23fe:	c8 01       	movw	r24, r16
    2400:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_Z17createEncodedDataP13Adafruit_FONAPchP14DailyCycleData>

	RM_LOGLN(F("Encoded data created and ready for send:"));
    2404:	6a ef       	ldi	r22, 0xFA	; 250
    2406:	73 e0       	ldi	r23, 0x03	; 3
    2408:	8b eb       	ldi	r24, 0xBB	; 187
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    2410:	b7 01       	movw	r22, r14
    2412:	8b eb       	ldi	r24, 0xBB	; 187
    2414:	93 e0       	ldi	r25, 0x03	; 3
    2416:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN5Print7printlnEPKc>

	uint16_t statuscode=0;
    241a:	1f 86       	std	Y+15, r1	; 0x0f
    241c:	1e 86       	std	Y+14, r1	; 0x0e
	FONA_STATUS_GPRS_SEND status = 
		sendDataFona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);
    241e:	9e 01       	movw	r18, r28
    2420:	22 5f       	subi	r18, 0xF2	; 242
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	a4 01       	movw	r20, r8
    2426:	b7 01       	movw	r22, r14
    2428:	c8 01       	movw	r24, r16
    242a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>
		
		
		
		
	return true;
}
    242e:	8d 2d       	mov	r24, r13
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	be be       	out	0x3e, r11	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	ad be       	out	0x3d, r10	; 61
    243a:	60 96       	adiw	r28, 0x10	; 16
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	bf 90       	pop	r11
    2456:	af 90       	pop	r10
    2458:	9f 90       	pop	r9
    245a:	8f 90       	pop	r8
    245c:	08 95       	ret

0000245e <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    245e:	68 ee       	ldi	r22, 0xE8	; 232
    2460:	73 e0       	ldi	r23, 0x03	; 3
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 90 1b 	call	0x3720	; 0x3720 <delay>
	++_timerCounter;
    246a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
    246e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x1>
    2478:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    247c:	60 ef       	ldi	r22, 0xF0	; 240
    247e:	73 e0       	ldi	r23, 0x03	; 3
    2480:	8b eb       	ldi	r24, 0xBB	; 187
    2482:	93 e0       	ldi	r25, 0x03	; 3
    2484:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    2488:	67 e6       	ldi	r22, 0x67	; 103
    248a:	71 e0       	ldi	r23, 0x01	; 1
    248c:	8b eb       	ldi	r24, 0xBB	; 187
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPKc>
    2494:	4a e0       	ldi	r20, 0x0A	; 10
    2496:	50 e0       	ldi	r21, 0x00	; 0
    2498:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <_behaviour>
    249c:	8b eb       	ldi	r24, 0xBB	; 187
    249e:	93 e0       	ldi	r25, 0x03	; 3
    24a0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    24a4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    24a8:	80 ff       	sbrs	r24, 0
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <loop+0x60>
		
		if (takeReadings())
    24ac:	0e 94 b4 10 	call	0x2168	; 0x2168 <_Z12takeReadingsv>
    24b0:	88 23       	and	r24, r24
    24b2:	29 f0       	breq	.+10     	; 0x24be <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    24b4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    24b8:	8e 7f       	andi	r24, 0xFE	; 254
    24ba:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    24be:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    24c2:	81 ff       	sbrs	r24, 1
    24c4:	09 c0       	rjmp	.+18     	; 0x24d8 <loop+0x7a>
		
		if (sendData())
    24c6:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z8sendDatav>
    24ca:	88 23       	and	r24, r24
    24cc:	29 f0       	breq	.+10     	; 0x24d8 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    24ce:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    24d2:	8d 7f       	andi	r24, 0xFD	; 253
    24d4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    24d8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    24dc:	82 ff       	sbrs	r24, 2
    24de:	17 c0       	rjmp	.+46     	; 0x250e <loop+0xb0>
	
		if (_timerCounter == 1)
    24e0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
    24e4:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	31 f4       	brne	.+12     	; 0x24f8 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    24ec:	6b ec       	ldi	r22, 0xCB	; 203
    24ee:	71 e0       	ldi	r23, 0x01	; 1
    24f0:	86 ed       	ldi	r24, 0xD6	; 214
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    24f8:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z8sendDatav>
    24fc:	88 23       	and	r24, r24
    24fe:	39 f0       	breq	.+14     	; 0x250e <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    2500:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    2504:	8b 7f       	andi	r24, 0xFB	; 251
    2506:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    250a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    250e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_behaviour>
    2512:	81 11       	cpse	r24, r1
    2514:	02 c0       	rjmp	.+4      	; 0x251a <loop+0xbc>
		
		switchOffSystem();
    2516:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <_Z15switchOffSystemv>
    251a:	08 95       	ret

0000251c <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	64 e0       	ldi	r22, 0x04	; 4
    2520:	86 ed       	ldi	r24, 0xD6	; 214
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	8b ec       	ldi	r24, 0xCB	; 203
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	89 ec       	ldi	r24, 0xC9	; 201
    2536:	91 e0       	ldi	r25, 0x01	; 1
    2538:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN13SensorManagerC1Eb>
    253c:	e2 ec       	ldi	r30, 0xC2	; 194
    253e:	f1 e0       	ldi	r31, 0x01	; 1
    2540:	10 82       	st	Z, r1
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	12 82       	std	Z+2, r1	; 0x02
    2546:	08 95       	ret

00002548 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    2548:	8d e4       	ldi	r24, 0x4D	; 77
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__fona+0x1>
    2550:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__fona>
    2554:	8b ee       	ldi	r24, 0xEB	; 235
    2556:	92 e0       	ldi	r25, 0x02	; 2
    2558:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <_ZN6StringD1Ev>

0000255c <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    255c:	dc 01       	movw	r26, r24
    255e:	ed 91       	ld	r30, X+
    2560:	fc 91       	ld	r31, X
    2562:	01 90       	ld	r0, Z+
    2564:	f0 81       	ld	r31, Z
    2566:	e0 2d       	mov	r30, r0
    2568:	09 94       	ijmp

0000256a <_ZN12RmMemManagerC1Eb>:
    256a:	fc 01       	movw	r30, r24
    256c:	14 82       	std	Z+4, r1	; 0x04
    256e:	15 82       	std	Z+5, r1	; 0x05
    2570:	16 82       	std	Z+6, r1	; 0x06
    2572:	17 82       	std	Z+7, r1	; 0x07
    2574:	80 e8       	ldi	r24, 0x80	; 128
    2576:	80 87       	std	Z+8, r24	; 0x08
    2578:	81 87       	std	Z+9, r24	; 0x09
    257a:	12 86       	std	Z+10, r1	; 0x0a
    257c:	63 83       	std	Z+3, r22	; 0x03
    257e:	61 11       	cpse	r22, r1
    2580:	04 c0       	rjmp	.+8      	; 0x258a <_ZN12RmMemManagerC1Eb+0x20>
    2582:	83 e6       	ldi	r24, 0x63	; 99
    2584:	93 e0       	ldi	r25, 0x03	; 3
    2586:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <_ZN7TwoWire5beginEv>
    258a:	08 95       	ret

0000258c <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    258c:	fc 01       	movw	r30, r24
    258e:	cb 01       	movw	r24, r22
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	61 15       	cp	r22, r1
    2596:	71 05       	cpc	r23, r1
    2598:	39 f0       	breq	.+14     	; 0x25a8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    259a:	42 81       	ldd	r20, Z+2	; 0x02
    259c:	2a e0       	ldi	r18, 0x0A	; 10
    259e:	42 9f       	mul	r20, r18
    25a0:	a0 01       	movw	r20, r0
    25a2:	11 24       	eor	r1, r1
    25a4:	0e 94 c7 22 	call	0x458e	; 0x458e <memcpy>
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	08 95       	ret

000025ac <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	eb 01       	movw	r28, r22
    25ba:	7b 01       	movw	r14, r22
    25bc:	e4 0e       	add	r14, r20
    25be:	f1 1c       	adc	r15, r1
    25c0:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    25c2:	ce 15       	cp	r28, r14
    25c4:	df 05       	cpc	r29, r15
    25c6:	71 f1       	breq	.+92     	; 0x2624 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    25c8:	60 e5       	ldi	r22, 0x50	; 80
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	83 e6       	ldi	r24, 0x63	; 99
    25ce:	93 e0       	ldi	r25, 0x03	; 3
    25d0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    25d4:	61 2f       	mov	r22, r17
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	83 e6       	ldi	r24, 0x63	; 99
    25da:	93 e0       	ldi	r25, 0x03	; 3
    25dc:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    25e0:	b8 01       	movw	r22, r16
    25e2:	77 27       	eor	r23, r23
    25e4:	83 e6       	ldi	r24, 0x63	; 99
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    25ec:	83 e6       	ldi	r24, 0x63	; 99
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	60 e5       	ldi	r22, 0x50	; 80
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	83 e6       	ldi	r24, 0x63	; 99
    25fe:	93 e0       	ldi	r25, 0x03	; 3
    2600:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    2604:	83 e6       	ldi	r24, 0x63	; 99
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN7TwoWire9availableEv>
    260c:	89 2b       	or	r24, r25
    260e:	29 f0       	breq	.+10     	; 0x261a <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    2610:	83 e6       	ldi	r24, 0x63	; 99
    2612:	93 e0       	ldi	r25, 0x03	; 3
    2614:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN7TwoWire4readEv>
    2618:	01 c0       	rjmp	.+2      	; 0x261c <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    261a:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    261c:	89 93       	st	Y+, r24
    261e:	0f 5f       	subi	r16, 0xFF	; 255
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2622:	cf cf       	rjmp	.-98     	; 0x25c2 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	08 95       	ret

00002632 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	1f 92       	push	r1
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	be 01       	movw	r22, r28
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_Z12internalReadjPhh>
	return value;
}
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	0f 90       	pop	r0
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	08 95       	ret

00002654 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	0c 94 19 13 	jmp	0x2632	; 0x2632 <_ZN12RmMemManager18getUCharFromMemoryEj>

0000265c <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    265c:	fc 01       	movw	r30, r24
    265e:	60 83       	st	Z, r22
    2660:	08 95       	ret

00002662 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    2662:	fc 01       	movw	r30, r24
    2664:	80 81       	ld	r24, Z
    2666:	81 11       	cpse	r24, r1
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    266a:	86 2f       	mov	r24, r22
    266c:	0c 94 07 1c 	jmp	0x380e	; 0x380e <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    2670:	85 e0       	ldi	r24, 0x05	; 5
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	08 95       	ret

00002676 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    2676:	fc 01       	movw	r30, r24
    2678:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    267a:	81 81       	ldd	r24, Z+1	; 0x01
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	12 96       	adiw	r26, 0x02	; 2
    2684:	9c 93       	st	X, r25
    2686:	8e 93       	st	-X, r24
    2688:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    268a:	81 81       	ldd	r24, Z+1	; 0x01
    268c:	2a e0       	ldi	r18, 0x0A	; 10
    268e:	82 9f       	mul	r24, r18
    2690:	c0 01       	movw	r24, r0
    2692:	11 24       	eor	r1, r1
    2694:	14 96       	adiw	r26, 0x04	; 4
    2696:	9c 93       	st	X, r25
    2698:	8e 93       	st	-X, r24
    269a:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    269c:	81 81       	ldd	r24, Z+1	; 0x01
    269e:	67 e0       	ldi	r22, 0x07	; 7
    26a0:	0e 94 1b 20 	call	0x4036	; 0x4036 <__udivmodqi4>
    26a4:	89 2f       	mov	r24, r25
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	16 96       	adiw	r26, 0x06	; 6
    26aa:	9c 93       	st	X, r25
    26ac:	8e 93       	st	-X, r24
    26ae:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    26b0:	81 81       	ldd	r24, Z+1	; 0x01
    26b2:	24 e6       	ldi	r18, 0x64	; 100
    26b4:	82 9f       	mul	r24, r18
    26b6:	c0 01       	movw	r24, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	18 96       	adiw	r26, 0x08	; 8
    26bc:	9c 93       	st	X, r25
    26be:	8e 93       	st	-X, r24
    26c0:	17 97       	sbiw	r26, 0x07	; 7
    26c2:	08 95       	ret

000026c4 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    26c4:	af 92       	push	r10
    26c6:	bf 92       	push	r11
    26c8:	cf 92       	push	r12
    26ca:	df 92       	push	r13
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	8c 01       	movw	r16, r24
    26da:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    26dc:	fc 01       	movw	r30, r24
    26de:	80 81       	ld	r24, Z
    26e0:	88 23       	and	r24, r24
    26e2:	21 f0       	breq	.+8      	; 0x26ec <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    26e4:	c8 01       	movw	r24, r16
    26e6:	0e 94 3b 13 	call	0x2676	; 0x2676 <_ZN13SensorManager11getMockDataEP10SensorData>
    26ea:	1b c0       	rjmp	.+54     	; 0x2722 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    26ec:	6e e0       	ldi	r22, 0x0E	; 14
    26ee:	c8 01       	movw	r24, r16
    26f0:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN13SensorManager16takeSampleAnalogEh>
    26f4:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    26f6:	6f e0       	ldi	r22, 0x0F	; 15
    26f8:	c8 01       	movw	r24, r16
    26fa:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN13SensorManager16takeSampleAnalogEh>
    26fe:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2700:	61 e1       	ldi	r22, 0x11	; 17
    2702:	c8 01       	movw	r24, r16
    2704:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN13SensorManager16takeSampleAnalogEh>
    2708:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    270a:	60 e1       	ldi	r22, 0x10	; 16
    270c:	c8 01       	movw	r24, r16
    270e:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    2712:	ba 82       	std	Y+2, r11	; 0x02
    2714:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    2716:	dc 82       	std	Y+4, r13	; 0x04
    2718:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    271a:	fe 82       	std	Y+6, r15	; 0x06
    271c:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2722:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	cf 90       	pop	r12
    2734:	bf 90       	pop	r11
    2736:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    2738:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <_ZN7Helpers15printSensorDataEP10SensorData>

0000273c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    273c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_state>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <twi_sendStop>
    2746:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <twi_inRepStart>
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	82 e1       	ldi	r24, 0x12	; 18
    274e:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
    2752:	61 e0       	ldi	r22, 0x01	; 1
    2754:	83 e1       	ldi	r24, 0x13	; 19
    2756:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
    275a:	e9 eb       	ldi	r30, 0xB9	; 185
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8e 7f       	andi	r24, 0xFE	; 254
    2762:	80 83       	st	Z, r24
    2764:	80 81       	ld	r24, Z
    2766:	8d 7f       	andi	r24, 0xFD	; 253
    2768:	80 83       	st	Z, r24
    276a:	88 e4       	ldi	r24, 0x48	; 72
    276c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2770:	85 e4       	ldi	r24, 0x45	; 69
    2772:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2776:	08 95       	ret

00002778 <twi_readFrom>:
    2778:	41 32       	cpi	r20, 0x21	; 33
    277a:	08 f0       	brcs	.+2      	; 0x277e <twi_readFrom+0x6>
    277c:	43 c0       	rjmp	.+134    	; 0x2804 <twi_readFrom+0x8c>
    277e:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <twi_state>
    2782:	91 11       	cpse	r25, r1
    2784:	fc cf       	rjmp	.-8      	; 0x277e <twi_readFrom+0x6>
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <twi_state>
    278c:	20 93 60 03 	sts	0x0360, r18	; 0x800360 <twi_sendStop>
    2790:	2f ef       	ldi	r18, 0xFF	; 255
    2792:	20 93 f5 02 	sts	0x02F5, r18	; 0x8002f5 <twi_error>
    2796:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <twi_masterBufferIndex>
    279a:	24 0f       	add	r18, r20
    279c:	20 93 39 03 	sts	0x0339, r18	; 0x800339 <twi_masterBufferLength>
    27a0:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <twi_slarw>
    27a4:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <twi_slarw>
    27a8:	88 0f       	add	r24, r24
    27aa:	89 2b       	or	r24, r25
    27ac:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <twi_slarw>
    27b0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_inRepStart>
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	61 f4       	brne	.+24     	; 0x27d0 <twi_readFrom+0x58>
    27b8:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <twi_inRepStart>
    27bc:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <twi_slarw>
    27c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    27c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    27c8:	83 fd       	sbrc	r24, 3
    27ca:	f8 cf       	rjmp	.-16     	; 0x27bc <twi_readFrom+0x44>
    27cc:	85 ec       	ldi	r24, 0xC5	; 197
    27ce:	01 c0       	rjmp	.+2      	; 0x27d2 <twi_readFrom+0x5a>
    27d0:	85 ee       	ldi	r24, 0xE5	; 229
    27d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    27d6:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_state>
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	e1 f3       	breq	.-8      	; 0x27d6 <twi_readFrom+0x5e>
    27de:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <twi_masterBufferIndex>
    27e2:	84 17       	cp	r24, r20
    27e4:	10 f4       	brcc	.+4      	; 0x27ea <twi_readFrom+0x72>
    27e6:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <twi_masterBufferIndex>
    27ea:	ab e3       	ldi	r26, 0x3B	; 59
    27ec:	b3 e0       	ldi	r27, 0x03	; 3
    27ee:	96 2f       	mov	r25, r22
    27f0:	fb 01       	movw	r30, r22
    27f2:	8e 2f       	mov	r24, r30
    27f4:	89 1b       	sub	r24, r25
    27f6:	84 17       	cp	r24, r20
    27f8:	18 f4       	brcc	.+6      	; 0x2800 <twi_readFrom+0x88>
    27fa:	8d 91       	ld	r24, X+
    27fc:	81 93       	st	Z+, r24
    27fe:	f9 cf       	rjmp	.-14     	; 0x27f2 <twi_readFrom+0x7a>
    2800:	84 2f       	mov	r24, r20
    2802:	08 95       	ret
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	08 95       	ret

00002808 <twi_writeTo>:
    2808:	0f 93       	push	r16
    280a:	41 32       	cpi	r20, 0x21	; 33
    280c:	08 f0       	brcs	.+2      	; 0x2810 <twi_writeTo+0x8>
    280e:	4a c0       	rjmp	.+148    	; 0x28a4 <twi_writeTo+0x9c>
    2810:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <twi_state>
    2814:	91 11       	cpse	r25, r1
    2816:	fc cf       	rjmp	.-8      	; 0x2810 <twi_writeTo+0x8>
    2818:	32 e0       	ldi	r19, 0x02	; 2
    281a:	30 93 62 03 	sts	0x0362, r19	; 0x800362 <twi_state>
    281e:	00 93 60 03 	sts	0x0360, r16	; 0x800360 <twi_sendStop>
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	30 93 f5 02 	sts	0x02F5, r19	; 0x8002f5 <twi_error>
    2828:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <twi_masterBufferIndex>
    282c:	40 93 39 03 	sts	0x0339, r20	; 0x800339 <twi_masterBufferLength>
    2830:	56 2f       	mov	r21, r22
    2832:	ab e3       	ldi	r26, 0x3B	; 59
    2834:	b3 e0       	ldi	r27, 0x03	; 3
    2836:	fb 01       	movw	r30, r22
    2838:	3e 2f       	mov	r19, r30
    283a:	35 1b       	sub	r19, r21
    283c:	34 17       	cp	r19, r20
    283e:	18 f4       	brcc	.+6      	; 0x2846 <twi_writeTo+0x3e>
    2840:	31 91       	ld	r19, Z+
    2842:	3d 93       	st	X+, r19
    2844:	f9 cf       	rjmp	.-14     	; 0x2838 <twi_writeTo+0x30>
    2846:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <twi_slarw>
    284a:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <twi_slarw>
    284e:	88 0f       	add	r24, r24
    2850:	83 2b       	or	r24, r19
    2852:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <twi_slarw>
    2856:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_inRepStart>
    285a:	81 30       	cpi	r24, 0x01	; 1
    285c:	61 f4       	brne	.+24     	; 0x2876 <twi_writeTo+0x6e>
    285e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <twi_inRepStart>
    2862:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <twi_slarw>
    2866:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    286a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    286e:	83 fd       	sbrc	r24, 3
    2870:	f8 cf       	rjmp	.-16     	; 0x2862 <twi_writeTo+0x5a>
    2872:	85 ec       	ldi	r24, 0xC5	; 197
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <twi_writeTo+0x70>
    2876:	85 ee       	ldi	r24, 0xE5	; 229
    2878:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    287c:	22 23       	and	r18, r18
    287e:	21 f0       	breq	.+8      	; 0x2888 <twi_writeTo+0x80>
    2880:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_state>
    2884:	82 30       	cpi	r24, 0x02	; 2
    2886:	d1 f3       	breq	.-12     	; 0x287c <twi_writeTo+0x74>
    2888:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_error>
    288c:	8f 3f       	cpi	r24, 0xFF	; 255
    288e:	79 f0       	breq	.+30     	; 0x28ae <twi_writeTo+0xa6>
    2890:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_error>
    2894:	80 32       	cpi	r24, 0x20	; 32
    2896:	41 f0       	breq	.+16     	; 0x28a8 <twi_writeTo+0xa0>
    2898:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_error>
    289c:	80 33       	cpi	r24, 0x30	; 48
    289e:	31 f0       	breq	.+12     	; 0x28ac <twi_writeTo+0xa4>
    28a0:	94 e0       	ldi	r25, 0x04	; 4
    28a2:	05 c0       	rjmp	.+10     	; 0x28ae <twi_writeTo+0xa6>
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <twi_writeTo+0xa6>
    28a8:	92 e0       	ldi	r25, 0x02	; 2
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <twi_writeTo+0xa6>
    28ac:	93 e0       	ldi	r25, 0x03	; 3
    28ae:	89 2f       	mov	r24, r25
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <twi_transmit>:
    28b4:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <twi_txBufferLength>
    28b8:	26 2f       	mov	r18, r22
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	24 0f       	add	r18, r20
    28be:	31 1d       	adc	r19, r1
    28c0:	21 32       	cpi	r18, 0x21	; 33
    28c2:	31 05       	cpc	r19, r1
    28c4:	dc f4       	brge	.+54     	; 0x28fc <twi_transmit+0x48>
    28c6:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <twi_state>
    28ca:	24 30       	cpi	r18, 0x04	; 4
    28cc:	c9 f4       	brne	.+50     	; 0x2900 <twi_transmit+0x4c>
    28ce:	fc 01       	movw	r30, r24
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	86 17       	cp	r24, r22
    28d6:	58 f4       	brcc	.+22     	; 0x28ee <twi_transmit+0x3a>
    28d8:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <twi_txBufferLength>
    28dc:	21 91       	ld	r18, Z+
    28de:	dc 01       	movw	r26, r24
    28e0:	a7 5e       	subi	r26, 0xE7	; 231
    28e2:	bc 4f       	sbci	r27, 0xFC	; 252
    28e4:	a3 0f       	add	r26, r19
    28e6:	b1 1d       	adc	r27, r1
    28e8:	2c 93       	st	X, r18
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	f3 cf       	rjmp	.-26     	; 0x28d4 <twi_transmit+0x20>
    28ee:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_txBufferLength>
    28f2:	68 0f       	add	r22, r24
    28f4:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <twi_txBufferLength>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	08 95       	ret
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	08 95       	ret
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	08 95       	ret

00002904 <twi_attachSlaveRxEvent>:
    2904:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <twi_onSlaveReceive+0x1>
    2908:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <twi_onSlaveReceive>
    290c:	08 95       	ret

0000290e <twi_attachSlaveTxEvent>:
    290e:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <twi_onSlaveTransmit+0x1>
    2912:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <twi_onSlaveTransmit>
    2916:	08 95       	ret

00002918 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2918:	85 ed       	ldi	r24, 0xD5	; 213
    291a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    291e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2922:	84 fd       	sbrc	r24, 4
    2924:	fc cf       	rjmp	.-8      	; 0x291e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2926:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_state>
    292a:	08 95       	ret

0000292c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    292c:	85 ec       	ldi	r24, 0xC5	; 197
    292e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2932:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_state>
    2936:	08 95       	ret

00002938 <__vector_24>:
}

ISR(TWI_vect)
{
    2938:	1f 92       	push	r1
    293a:	0f 92       	push	r0
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	0f 92       	push	r0
    2940:	11 24       	eor	r1, r1
    2942:	2f 93       	push	r18
    2944:	3f 93       	push	r19
    2946:	4f 93       	push	r20
    2948:	5f 93       	push	r21
    294a:	6f 93       	push	r22
    294c:	7f 93       	push	r23
    294e:	8f 93       	push	r24
    2950:	9f 93       	push	r25
    2952:	af 93       	push	r26
    2954:	bf 93       	push	r27
    2956:	ef 93       	push	r30
    2958:	ff 93       	push	r31
  switch(TW_STATUS){
    295a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    295e:	88 7f       	andi	r24, 0xF8	; 248
    2960:	80 36       	cpi	r24, 0x60	; 96
    2962:	09 f4       	brne	.+2      	; 0x2966 <__vector_24+0x2e>
    2964:	9e c0       	rjmp	.+316    	; 0x2aa2 <__vector_24+0x16a>
    2966:	78 f5       	brcc	.+94     	; 0x29c6 <__vector_24+0x8e>
    2968:	88 32       	cpi	r24, 0x28	; 40
    296a:	09 f4       	brne	.+2      	; 0x296e <__vector_24+0x36>
    296c:	5d c0       	rjmp	.+186    	; 0x2a28 <__vector_24+0xf0>
    296e:	90 f4       	brcc	.+36     	; 0x2994 <__vector_24+0x5c>
    2970:	80 31       	cpi	r24, 0x10	; 16
    2972:	09 f4       	brne	.+2      	; 0x2976 <__vector_24+0x3e>
    2974:	56 c0       	rjmp	.+172    	; 0x2a22 <__vector_24+0xea>
    2976:	38 f4       	brcc	.+14     	; 0x2986 <__vector_24+0x4e>
    2978:	88 23       	and	r24, r24
    297a:	09 f4       	brne	.+2      	; 0x297e <__vector_24+0x46>
    297c:	f5 c0       	rjmp	.+490    	; 0x2b68 <__vector_24+0x230>
    297e:	88 30       	cpi	r24, 0x08	; 8
    2980:	09 f4       	brne	.+2      	; 0x2984 <__vector_24+0x4c>
    2982:	4f c0       	rjmp	.+158    	; 0x2a22 <__vector_24+0xea>
    2984:	f5 c0       	rjmp	.+490    	; 0x2b70 <__vector_24+0x238>
    2986:	88 31       	cpi	r24, 0x18	; 24
    2988:	09 f4       	brne	.+2      	; 0x298c <__vector_24+0x54>
    298a:	4e c0       	rjmp	.+156    	; 0x2a28 <__vector_24+0xf0>
    298c:	80 32       	cpi	r24, 0x20	; 32
    298e:	09 f4       	brne	.+2      	; 0x2992 <__vector_24+0x5a>
    2990:	5f c0       	rjmp	.+190    	; 0x2a50 <__vector_24+0x118>
    2992:	ee c0       	rjmp	.+476    	; 0x2b70 <__vector_24+0x238>
    2994:	80 34       	cpi	r24, 0x40	; 64
    2996:	09 f4       	brne	.+2      	; 0x299a <__vector_24+0x62>
    2998:	6a c0       	rjmp	.+212    	; 0x2a6e <__vector_24+0x136>
    299a:	58 f4       	brcc	.+22     	; 0x29b2 <__vector_24+0x7a>
    299c:	80 33       	cpi	r24, 0x30	; 48
    299e:	09 f4       	brne	.+2      	; 0x29a2 <__vector_24+0x6a>
    29a0:	57 c0       	rjmp	.+174    	; 0x2a50 <__vector_24+0x118>
    29a2:	88 33       	cpi	r24, 0x38	; 56
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <__vector_24+0x70>
    29a6:	e4 c0       	rjmp	.+456    	; 0x2b70 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    29a8:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <twi_error>
      twi_releaseBus();
    29ac:	0e 94 96 14 	call	0x292c	; 0x292c <twi_releaseBus>
      break;
    29b0:	df c0       	rjmp	.+446    	; 0x2b70 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    29b2:	80 35       	cpi	r24, 0x50	; 80
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <__vector_24+0x80>
    29b6:	4f c0       	rjmp	.+158    	; 0x2a56 <__vector_24+0x11e>
    29b8:	88 35       	cpi	r24, 0x58	; 88
    29ba:	09 f4       	brne	.+2      	; 0x29be <__vector_24+0x86>
    29bc:	5d c0       	rjmp	.+186    	; 0x2a78 <__vector_24+0x140>
    29be:	88 34       	cpi	r24, 0x48	; 72
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <__vector_24+0x8c>
    29c2:	d6 c0       	rjmp	.+428    	; 0x2b70 <__vector_24+0x238>
    29c4:	d3 c0       	rjmp	.+422    	; 0x2b6c <__vector_24+0x234>
    29c6:	88 39       	cpi	r24, 0x98	; 152
    29c8:	09 f4       	brne	.+2      	; 0x29cc <__vector_24+0x94>
    29ca:	c4 c0       	rjmp	.+392    	; 0x2b54 <__vector_24+0x21c>
    29cc:	a8 f4       	brcc	.+42     	; 0x29f8 <__vector_24+0xc0>
    29ce:	88 37       	cpi	r24, 0x78	; 120
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <__vector_24+0x9c>
    29d2:	67 c0       	rjmp	.+206    	; 0x2aa2 <__vector_24+0x16a>
    29d4:	38 f4       	brcc	.+14     	; 0x29e4 <__vector_24+0xac>
    29d6:	88 36       	cpi	r24, 0x68	; 104
    29d8:	09 f4       	brne	.+2      	; 0x29dc <__vector_24+0xa4>
    29da:	63 c0       	rjmp	.+198    	; 0x2aa2 <__vector_24+0x16a>
    29dc:	80 37       	cpi	r24, 0x70	; 112
    29de:	09 f4       	brne	.+2      	; 0x29e2 <__vector_24+0xaa>
    29e0:	60 c0       	rjmp	.+192    	; 0x2aa2 <__vector_24+0x16a>
    29e2:	c6 c0       	rjmp	.+396    	; 0x2b70 <__vector_24+0x238>
    29e4:	88 38       	cpi	r24, 0x88	; 136
    29e6:	09 f4       	brne	.+2      	; 0x29ea <__vector_24+0xb2>
    29e8:	b5 c0       	rjmp	.+362    	; 0x2b54 <__vector_24+0x21c>
    29ea:	80 39       	cpi	r24, 0x90	; 144
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <__vector_24+0xb8>
    29ee:	5f c0       	rjmp	.+190    	; 0x2aae <__vector_24+0x176>
    29f0:	80 38       	cpi	r24, 0x80	; 128
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <__vector_24+0xbe>
    29f4:	bd c0       	rjmp	.+378    	; 0x2b70 <__vector_24+0x238>
    29f6:	5b c0       	rjmp	.+182    	; 0x2aae <__vector_24+0x176>
    29f8:	80 3b       	cpi	r24, 0xB0	; 176
    29fa:	09 f4       	brne	.+2      	; 0x29fe <__vector_24+0xc6>
    29fc:	83 c0       	rjmp	.+262    	; 0x2b04 <__vector_24+0x1cc>
    29fe:	38 f4       	brcc	.+14     	; 0x2a0e <__vector_24+0xd6>
    2a00:	80 3a       	cpi	r24, 0xA0	; 160
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <__vector_24+0xce>
    2a04:	66 c0       	rjmp	.+204    	; 0x2ad2 <__vector_24+0x19a>
    2a06:	88 3a       	cpi	r24, 0xA8	; 168
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <__vector_24+0xd4>
    2a0a:	7c c0       	rjmp	.+248    	; 0x2b04 <__vector_24+0x1cc>
    2a0c:	b1 c0       	rjmp	.+354    	; 0x2b70 <__vector_24+0x238>
    2a0e:	80 3c       	cpi	r24, 0xC0	; 192
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <__vector_24+0xdc>
    2a12:	a4 c0       	rjmp	.+328    	; 0x2b5c <__vector_24+0x224>
    2a14:	88 3c       	cpi	r24, 0xC8	; 200
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <__vector_24+0xe2>
    2a18:	a1 c0       	rjmp	.+322    	; 0x2b5c <__vector_24+0x224>
    2a1a:	88 3b       	cpi	r24, 0xB8	; 184
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <__vector_24+0xe8>
    2a1e:	87 c0       	rjmp	.+270    	; 0x2b2e <__vector_24+0x1f6>
    2a20:	a7 c0       	rjmp	.+334    	; 0x2b70 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2a22:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <twi_slarw>
    2a26:	10 c0       	rjmp	.+32     	; 0x2a48 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a28:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <twi_masterBufferIndex>
    2a2c:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_masterBufferLength>
    2a30:	98 17       	cp	r25, r24
    2a32:	70 f5       	brcc	.+92     	; 0x2a90 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2a34:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <twi_masterBufferIndex>
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	8e 0f       	add	r24, r30
    2a3c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <twi_masterBufferIndex>
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	e5 5c       	subi	r30, 0xC5	; 197
    2a44:	fc 4f       	sbci	r31, 0xFC	; 252
    2a46:	80 81       	ld	r24, Z
    2a48:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2a4c:	85 ec       	ldi	r24, 0xC5	; 197
    2a4e:	83 c0       	rjmp	.+262    	; 0x2b56 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2a50:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <twi_error>
    2a54:	8b c0       	rjmp	.+278    	; 0x2b6c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2a56:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <twi_masterBufferIndex>
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	8e 0f       	add	r24, r30
    2a5e:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <twi_masterBufferIndex>
    2a62:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	e5 5c       	subi	r30, 0xC5	; 197
    2a6a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a6c:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a6e:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <twi_masterBufferIndex>
    2a72:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_masterBufferLength>
    2a76:	6b c0       	rjmp	.+214    	; 0x2b4e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2a78:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <twi_masterBufferIndex>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	8e 0f       	add	r24, r30
    2a80:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <twi_masterBufferIndex>
    2a84:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	e5 5c       	subi	r30, 0xC5	; 197
    2a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a8e:	80 83       	st	Z, r24
	if (twi_sendStop)
    2a90:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <twi_sendStop>
    2a94:	81 11       	cpse	r24, r1
    2a96:	6a c0       	rjmp	.+212    	; 0x2b6c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2a9e:	84 ea       	ldi	r24, 0xA4	; 164
    2aa0:	5e c0       	rjmp	.+188    	; 0x2b5e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2aa2:	83 e0       	ldi	r24, 0x03	; 3
    2aa4:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2aa8:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <twi_rxBufferIndex>
    2aac:	cf cf       	rjmp	.-98     	; 0x2a4c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2aae:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <twi_rxBufferIndex>
    2ab2:	80 32       	cpi	r24, 0x20	; 32
    2ab4:	08 f0       	brcs	.+2      	; 0x2ab8 <__vector_24+0x180>
    2ab6:	4e c0       	rjmp	.+156    	; 0x2b54 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ab8:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <twi_rxBufferIndex>
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	8e 0f       	add	r24, r30
    2ac0:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <twi_rxBufferIndex>
    2ac4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	e9 50       	subi	r30, 0x09	; 9
    2acc:	fd 4f       	sbci	r31, 0xFD	; 253
    2ace:	80 83       	st	Z, r24
    2ad0:	bd cf       	rjmp	.-134    	; 0x2a4c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2ad2:	0e 94 96 14 	call	0x292c	; 0x292c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2ad6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <twi_rxBufferIndex>
    2ada:	80 32       	cpi	r24, 0x20	; 32
    2adc:	30 f4       	brcc	.+12     	; 0x2aea <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2ade:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <twi_rxBufferIndex>
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	e9 50       	subi	r30, 0x09	; 9
    2ae6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2aea:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <twi_rxBufferIndex>
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <twi_onSlaveReceive>
    2af4:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <twi_onSlaveReceive+0x1>
    2af8:	87 ef       	ldi	r24, 0xF7	; 247
    2afa:	92 e0       	ldi	r25, 0x02	; 2
    2afc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2afe:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <twi_rxBufferIndex>
      break;
    2b02:	36 c0       	rjmp	.+108    	; 0x2b70 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2b04:	84 e0       	ldi	r24, 0x04	; 4
    2b06:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2b0a:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2b0e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2b12:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <twi_onSlaveTransmit>
    2b16:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <twi_onSlaveTransmit+0x1>
    2b1a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2b1c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_txBufferLength>
    2b20:	81 11       	cpse	r24, r1
    2b22:	05 c0       	rjmp	.+10     	; 0x2b2e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2b2a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2b2e:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <twi_txBufferIndex>
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	8e 0f       	add	r24, r30
    2b36:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <twi_txBufferIndex>
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	e7 5e       	subi	r30, 0xE7	; 231
    2b3e:	fc 4f       	sbci	r31, 0xFC	; 252
    2b40:	80 81       	ld	r24, Z
    2b42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2b46:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <twi_txBufferIndex>
    2b4a:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_txBufferLength>
    2b4e:	98 17       	cp	r25, r24
    2b50:	08 f4       	brcc	.+2      	; 0x2b54 <__vector_24+0x21c>
    2b52:	7c cf       	rjmp	.-264    	; 0x2a4c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b54:	85 e8       	ldi	r24, 0x85	; 133
    2b56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2b5a:	0a c0       	rjmp	.+20     	; 0x2b70 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2b5c:	85 ec       	ldi	r24, 0xC5	; 197
    2b5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2b62:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_state>
      break;
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2b68:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <twi_error>
      twi_stop();
    2b6c:	0e 94 8c 14 	call	0x2918	; 0x2918 <twi_stop>
      break;
  }
}
    2b70:	ff 91       	pop	r31
    2b72:	ef 91       	pop	r30
    2b74:	bf 91       	pop	r27
    2b76:	af 91       	pop	r26
    2b78:	9f 91       	pop	r25
    2b7a:	8f 91       	pop	r24
    2b7c:	7f 91       	pop	r23
    2b7e:	6f 91       	pop	r22
    2b80:	5f 91       	pop	r21
    2b82:	4f 91       	pop	r20
    2b84:	3f 91       	pop	r19
    2b86:	2f 91       	pop	r18
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2b92:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2b9c:	82 1b       	sub	r24, r18
    2b9e:	91 09       	sbc	r25, r1
    2ba0:	08 95       	ret

00002ba2 <_ZN7TwoWire4readEv>:
    2ba2:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2ba6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2baa:	98 17       	cp	r25, r24
    2bac:	50 f4       	brcc	.+20     	; 0x2bc2 <_ZN7TwoWire4readEv+0x20>
    2bae:	e9 2f       	mov	r30, r25
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	e7 56       	subi	r30, 0x67	; 103
    2bb4:	fc 4f       	sbci	r31, 0xFC	; 252
    2bb6:	20 81       	ld	r18, Z
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	9f 5f       	subi	r25, 0xFF	; 255
    2bbc:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <_ZN7TwoWire4readEv+0x24>
    2bc2:	2f ef       	ldi	r18, 0xFF	; 255
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	c9 01       	movw	r24, r18
    2bc8:	08 95       	ret

00002bca <_ZN7TwoWire4peekEv>:
    2bca:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2bce:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2bd2:	e8 17       	cp	r30, r24
    2bd4:	30 f4       	brcc	.+12     	; 0x2be2 <_ZN7TwoWire4peekEv+0x18>
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	e7 56       	subi	r30, 0x67	; 103
    2bda:	fc 4f       	sbci	r31, 0xFC	; 252
    2bdc:	80 81       	ld	r24, Z
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	08 95       	ret
    2be2:	8f ef       	ldi	r24, 0xFF	; 255
    2be4:	9f ef       	ldi	r25, 0xFF	; 255
    2be6:	08 95       	ret

00002be8 <_ZN7TwoWire5flushEv>:
    2be8:	08 95       	ret

00002bea <_ZN7TwoWire16onReceiveServiceEPhi>:
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	ec 01       	movw	r28, r24
    2bf0:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <_ZN7TwoWire14user_onReceiveE>
    2bf4:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <_ZN7TwoWire14user_onReceiveE+0x1>
    2bf8:	30 97       	sbiw	r30, 0x00	; 0
    2bfa:	f1 f0       	breq	.+60     	; 0x2c38 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2bfc:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2c00:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2c04:	98 17       	cp	r25, r24
    2c06:	c0 f0       	brcs	.+48     	; 0x2c38 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	29 2f       	mov	r18, r25
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	26 17       	cp	r18, r22
    2c10:	37 07       	cpc	r19, r23
    2c12:	54 f4       	brge	.+20     	; 0x2c28 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2c14:	de 01       	movw	r26, r28
    2c16:	a2 0f       	add	r26, r18
    2c18:	b3 1f       	adc	r27, r19
    2c1a:	4c 91       	ld	r20, X
    2c1c:	d9 01       	movw	r26, r18
    2c1e:	a7 56       	subi	r26, 0x67	; 103
    2c20:	bc 4f       	sbci	r27, 0xFC	; 252
    2c22:	4c 93       	st	X, r20
    2c24:	9f 5f       	subi	r25, 0xFF	; 255
    2c26:	f1 cf       	rjmp	.-30     	; 0x2c0a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2c28:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2c2c:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2c30:	cb 01       	movw	r24, r22
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	09 94       	ijmp
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	08 95       	ret

00002c3e <_ZN7TwoWire16onRequestServiceEv>:
    2c3e:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <_ZN7TwoWire14user_onRequestE>
    2c42:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <_ZN7TwoWire14user_onRequestE+0x1>
    2c46:	30 97       	sbiw	r30, 0x00	; 0
    2c48:	29 f0       	breq	.+10     	; 0x2c54 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2c4a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <_ZN7TwoWire13txBufferIndexE>
    2c4e:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2c52:	09 94       	ijmp
    2c54:	08 95       	ret

00002c56 <_ZN7TwoWire5writeEPKhj>:
    2c56:	cf 92       	push	r12
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	7c 01       	movw	r14, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	8a 01       	movw	r16, r20
    2c6c:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <_ZN7TwoWire12transmittingE>
    2c70:	22 23       	and	r18, r18
    2c72:	89 f0       	breq	.+34     	; 0x2c96 <_ZN7TwoWire5writeEPKhj+0x40>
    2c74:	eb 01       	movw	r28, r22
    2c76:	6b 01       	movw	r12, r22
    2c78:	c4 0e       	add	r12, r20
    2c7a:	d5 1e       	adc	r13, r21
    2c7c:	cc 15       	cp	r28, r12
    2c7e:	dd 05       	cpc	r29, r13
    2c80:	69 f0       	breq	.+26     	; 0x2c9c <_ZN7TwoWire5writeEPKhj+0x46>
    2c82:	69 91       	ld	r22, Y+
    2c84:	d7 01       	movw	r26, r14
    2c86:	ed 91       	ld	r30, X+
    2c88:	fc 91       	ld	r31, X
    2c8a:	01 90       	ld	r0, Z+
    2c8c:	f0 81       	ld	r31, Z
    2c8e:	e0 2d       	mov	r30, r0
    2c90:	c7 01       	movw	r24, r14
    2c92:	09 95       	icall
    2c94:	f3 cf       	rjmp	.-26     	; 0x2c7c <_ZN7TwoWire5writeEPKhj+0x26>
    2c96:	64 2f       	mov	r22, r20
    2c98:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <twi_transmit>
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	08 95       	ret

00002cb0 <_ZN7TwoWire5writeEh>:
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	1f 92       	push	r1
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	69 83       	std	Y+1, r22	; 0x01
    2cbc:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <_ZN7TwoWire12transmittingE>
    2cc0:	22 23       	and	r18, r18
    2cc2:	d1 f0       	breq	.+52     	; 0x2cf8 <_ZN7TwoWire5writeEh+0x48>
    2cc4:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2cc8:	20 32       	cpi	r18, 0x20	; 32
    2cca:	40 f0       	brcs	.+16     	; 0x2cdc <_ZN7TwoWire5writeEh+0x2c>
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	33 83       	std	Z+3, r19	; 0x03
    2cd4:	22 83       	std	Z+2, r18	; 0x02
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	15 c0       	rjmp	.+42     	; 0x2d06 <_ZN7TwoWire5writeEh+0x56>
    2cdc:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <_ZN7TwoWire13txBufferIndexE>
    2ce0:	e8 2f       	mov	r30, r24
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	ea 58       	subi	r30, 0x8A	; 138
    2ce6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ce8:	99 81       	ldd	r25, Y+1	; 0x01
    2cea:	90 83       	st	Z, r25
    2cec:	8f 5f       	subi	r24, 0xFF	; 255
    2cee:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <_ZN7TwoWire13txBufferIndexE>
    2cf2:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <_ZN7TwoWire5writeEh+0x52>
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <twi_transmit>
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0f 90       	pop	r0
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <_ZN7TwoWireC1Ev>:
    2d0e:	fc 01       	movw	r30, r24
    2d10:	13 82       	std	Z+3, r1	; 0x03
    2d12:	12 82       	std	Z+2, r1	; 0x02
    2d14:	88 ee       	ldi	r24, 0xE8	; 232
    2d16:	93 e0       	ldi	r25, 0x03	; 3
    2d18:	a0 e0       	ldi	r26, 0x00	; 0
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	84 83       	std	Z+4, r24	; 0x04
    2d1e:	95 83       	std	Z+5, r25	; 0x05
    2d20:	a6 83       	std	Z+6, r26	; 0x06
    2d22:	b7 83       	std	Z+7, r27	; 0x07
    2d24:	8e e7       	ldi	r24, 0x7E	; 126
    2d26:	91 e0       	ldi	r25, 0x01	; 1
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	80 83       	st	Z, r24
    2d2c:	08 95       	ret

00002d2e <_ZN7TwoWire5beginEv>:
    2d2e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2d32:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2d36:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <_ZN7TwoWire13txBufferIndexE>
    2d3a:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2d3e:	0e 94 9e 13 	call	0x273c	; 0x273c <twi_init>
    2d42:	8f e1       	ldi	r24, 0x1F	; 31
    2d44:	96 e1       	ldi	r25, 0x16	; 22
    2d46:	0e 94 87 14 	call	0x290e	; 0x290e <twi_attachSlaveTxEvent>
    2d4a:	85 ef       	ldi	r24, 0xF5	; 245
    2d4c:	95 e1       	ldi	r25, 0x15	; 21
    2d4e:	0c 94 82 14 	jmp	0x2904	; 0x2904 <twi_attachSlaveRxEvent>

00002d52 <_ZN7TwoWire17beginTransmissionEh>:
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_ZN7TwoWire12transmittingE>
    2d58:	60 93 96 03 	sts	0x0396, r22	; 0x800396 <_ZN7TwoWire9txAddressE>
    2d5c:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <_ZN7TwoWire13txBufferIndexE>
    2d60:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2d64:	08 95       	ret

00002d66 <_ZN7TwoWire17beginTransmissionEi>:
    2d66:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <_ZN7TwoWire17beginTransmissionEh>

00002d6a <_ZN7TwoWire15endTransmissionEh>:
    2d6a:	0f 93       	push	r16
    2d6c:	06 2f       	mov	r16, r22
    2d6e:	21 e0       	ldi	r18, 0x01	; 1
    2d70:	40 91 74 03 	lds	r20, 0x0374	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2d74:	66 e7       	ldi	r22, 0x76	; 118
    2d76:	73 e0       	ldi	r23, 0x03	; 3
    2d78:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <_ZN7TwoWire9txAddressE>
    2d7c:	0e 94 04 14 	call	0x2808	; 0x2808 <twi_writeTo>
    2d80:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <_ZN7TwoWire13txBufferIndexE>
    2d84:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <_ZN7TwoWire14txBufferLengthE>
    2d88:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <_ZN7TwoWire12transmittingE>
    2d8c:	0f 91       	pop	r16
    2d8e:	08 95       	ret

00002d90 <_ZN7TwoWire11requestFromEhhmhh>:
    2d90:	4f 92       	push	r4
    2d92:	5f 92       	push	r5
    2d94:	6f 92       	push	r6
    2d96:	7f 92       	push	r7
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	5c 01       	movw	r10, r24
    2dac:	f6 2e       	mov	r15, r22
    2dae:	d4 2f       	mov	r29, r20
    2db0:	28 01       	movw	r4, r16
    2db2:	39 01       	movw	r6, r18
    2db4:	ee 20       	and	r14, r14
    2db6:	21 f1       	breq	.+72     	; 0x2e00 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2db8:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_ZN7TwoWire17beginTransmissionEh>
    2dbc:	ce 2d       	mov	r28, r14
    2dbe:	c4 30       	cpi	r28, 0x04	; 4
    2dc0:	08 f0       	brcs	.+2      	; 0x2dc4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2dc2:	c3 e0       	ldi	r28, 0x03	; 3
    2dc4:	c1 50       	subi	r28, 0x01	; 1
    2dc6:	c0 f0       	brcs	.+48     	; 0x2df8 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2dc8:	28 e0       	ldi	r18, 0x08	; 8
    2dca:	c2 9f       	mul	r28, r18
    2dcc:	c0 01       	movw	r24, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	a3 01       	movw	r20, r6
    2dd2:	92 01       	movw	r18, r4
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2dd6:	56 95       	lsr	r21
    2dd8:	47 95       	ror	r20
    2dda:	37 95       	ror	r19
    2ddc:	27 95       	ror	r18
    2dde:	8a 95       	dec	r24
    2de0:	d2 f7       	brpl	.-12     	; 0x2dd6 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2de2:	ca 01       	movw	r24, r20
    2de4:	b9 01       	movw	r22, r18
    2de6:	d5 01       	movw	r26, r10
    2de8:	ed 91       	ld	r30, X+
    2dea:	fc 91       	ld	r31, X
    2dec:	01 90       	ld	r0, Z+
    2dee:	f0 81       	ld	r31, Z
    2df0:	e0 2d       	mov	r30, r0
    2df2:	c5 01       	movw	r24, r10
    2df4:	09 95       	icall
    2df6:	e6 cf       	rjmp	.-52     	; 0x2dc4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	c5 01       	movw	r24, r10
    2dfc:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <_ZN7TwoWire15endTransmissionEh>
    2e00:	4d 2f       	mov	r20, r29
    2e02:	d1 32       	cpi	r29, 0x21	; 33
    2e04:	08 f0       	brcs	.+2      	; 0x2e08 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	2c 2d       	mov	r18, r12
    2e0a:	69 e9       	ldi	r22, 0x99	; 153
    2e0c:	73 e0       	ldi	r23, 0x03	; 3
    2e0e:	8f 2d       	mov	r24, r15
    2e10:	0e 94 bc 13 	call	0x2778	; 0x2778 <twi_readFrom>
    2e14:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13rxBufferIndexE>
    2e18:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <_ZN7TwoWire14rxBufferLengthE>
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
    2e24:	ff 90       	pop	r15
    2e26:	ef 90       	pop	r14
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	af 90       	pop	r10
    2e2e:	7f 90       	pop	r7
    2e30:	6f 90       	pop	r6
    2e32:	5f 90       	pop	r5
    2e34:	4f 90       	pop	r4
    2e36:	08 95       	ret

00002e38 <_ZN7TwoWire11requestFromEhhh>:
    2e38:	cf 92       	push	r12
    2e3a:	ef 92       	push	r14
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	c2 2e       	mov	r12, r18
    2e42:	e1 2c       	mov	r14, r1
    2e44:	00 e0       	ldi	r16, 0x00	; 0
    2e46:	10 e0       	ldi	r17, 0x00	; 0
    2e48:	98 01       	movw	r18, r16
    2e4a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <_ZN7TwoWire11requestFromEhhmhh>
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ef 90       	pop	r14
    2e54:	cf 90       	pop	r12
    2e56:	08 95       	ret

00002e58 <_ZN7TwoWire11requestFromEii>:
    2e58:	21 e0       	ldi	r18, 0x01	; 1
    2e5a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <_ZN7TwoWire11requestFromEhhh>

00002e5e <_ZN7TwoWire15endTransmissionEv>:
    2e5e:	61 e0       	ldi	r22, 0x01	; 1
    2e60:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <_ZN7TwoWire15endTransmissionEh>

00002e64 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2e64:	83 e6       	ldi	r24, 0x63	; 99
    2e66:	93 e0       	ldi	r25, 0x03	; 3
    2e68:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <_ZN7TwoWireC1Ev>

00002e6c <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    2e6c:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_mockData>
    2e70:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <_mockData+0x1>
    2e74:	0e 94 2e 21 	call	0x425c	; 0x425c <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    2e78:	6e e5       	ldi	r22, 0x5E	; 94
    2e7a:	76 e0       	ldi	r23, 0x06	; 6
    2e7c:	8b eb       	ldi	r24, 0xBB	; 187
    2e7e:	93 e0       	ldi	r25, 0x03	; 3
    2e80:	0c 94 df 19 	jmp	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>

00002e84 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    2e8a:	69 e5       	ldi	r22, 0x59	; 89
    2e8c:	76 e0       	ldi	r23, 0x06	; 6
    2e8e:	8b eb       	ldi	r24, 0xBB	; 187
    2e90:	93 e0       	ldi	r25, 0x03	; 3
    2e92:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    2e96:	84 e1       	ldi	r24, 0x14	; 20
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	0e 94 96 20 	call	0x412c	; 0x412c <malloc>
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <_mockData+0x1>
    2ea4:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	92 83       	std	Z+2, r25	; 0x02
    2eae:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    2eb0:	8a e0       	ldi	r24, 0x0A	; 10
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	96 83       	std	Z+6, r25	; 0x06
    2eb6:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    2eb8:	84 e6       	ldi	r24, 0x64	; 100
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	94 83       	std	Z+4, r25	; 0x04
    2ebe:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    2ec0:	83 e3       	ldi	r24, 0x33	; 51
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	90 87       	std	Z+8, r25	; 0x08
    2ec6:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2ec8:	83 e0       	ldi	r24, 0x03	; 3
    2eca:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2ecc:	82 e0       	ldi	r24, 0x02	; 2
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	94 87       	std	Z+12, r25	; 0x0c
    2ed2:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    2ed4:	84 e1       	ldi	r24, 0x14	; 20
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	90 8b       	std	Z+16, r25	; 0x10
    2eda:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    2edc:	88 ec       	ldi	r24, 0xC8	; 200
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	96 87       	std	Z+14, r25	; 0x0e
    2ee2:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    2ee4:	84 e3       	ldi	r24, 0x34	; 52
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	92 8b       	std	Z+18, r25	; 0x12
    2eea:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    2eec:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    2eee:	62 e3       	ldi	r22, 0x32	; 50
    2ef0:	76 e0       	ldi	r23, 0x06	; 6
    2ef2:	8b eb       	ldi	r24, 0xBB	; 187
    2ef4:	93 e0       	ldi	r25, 0x03	; 3
    2ef6:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    2efa:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_mockData>
    2efe:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <_mockData+0x1>
    2f02:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    2f06:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_mockData>
    2f0a:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <_mockData+0x1>
    2f0e:	0a 96       	adiw	r24, 0x0a	; 10
    2f10:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    2f14:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_mockData>
    2f18:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <_mockData+0x1>
    2f1c:	99 83       	std	Y+1, r25	; 0x01
    2f1e:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    2f20:	82 e0       	ldi	r24, 0x02	; 2
    2f22:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2f2a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2f2c:	91 8d       	ldd	r25, Z+25	; 0x19
    2f2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f30:	89 2f       	mov	r24, r25
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	80 5c       	subi	r24, 0xC0	; 192
    2f36:	9f 4f       	sbci	r25, 0xFF	; 255
    2f38:	82 1b       	sub	r24, r18
    2f3a:	91 09       	sbc	r25, r1
}
    2f3c:	8f 73       	andi	r24, 0x3F	; 63
    2f3e:	99 27       	eor	r25, r25
    2f40:	08 95       	ret

00002f42 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2f42:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2f44:	91 8d       	ldd	r25, Z+25	; 0x19
    2f46:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f48:	98 17       	cp	r25, r24
    2f4a:	31 f0       	breq	.+12     	; 0x2f58 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2f4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f4e:	e8 0f       	add	r30, r24
    2f50:	f1 1d       	adc	r31, r1
    2f52:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2f58:	8f ef       	ldi	r24, 0xFF	; 255
    2f5a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2f5c:	08 95       	ret

00002f5e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2f5e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2f60:	91 8d       	ldd	r25, Z+25	; 0x19
    2f62:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f64:	98 17       	cp	r25, r24
    2f66:	61 f0       	breq	.+24     	; 0x2f80 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2f68:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f6a:	df 01       	movw	r26, r30
    2f6c:	a8 0f       	add	r26, r24
    2f6e:	b1 1d       	adc	r27, r1
    2f70:	5d 96       	adiw	r26, 0x1d	; 29
    2f72:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2f74:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f76:	9f 5f       	subi	r25, 0xFF	; 255
    2f78:	9f 73       	andi	r25, 0x3F	; 63
    2f7a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2f80:	8f ef       	ldi	r24, 0xFF	; 255
    2f82:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2f84:	08 95       	ret

00002f86 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2f86:	88 e1       	ldi	r24, 0x18	; 24
    2f88:	99 e1       	ldi	r25, 0x19	; 25
    2f8a:	89 2b       	or	r24, r25
    2f8c:	49 f0       	breq	.+18     	; 0x2fa0 <_Z14serialEventRunv+0x1a>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	89 2b       	or	r24, r25
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <_Z14serialEventRunv+0x1a>
    2f96:	0e 94 18 19 	call	0x3230	; 0x3230 <_Z17Serial0_availablev>
    2f9a:	81 11       	cpse	r24, r1
    2f9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2fa0:	08 95       	ret

00002fa2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2fa2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2fa4:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fa6:	df 01       	movw	r26, r30
    2fa8:	a8 0f       	add	r26, r24
    2faa:	b1 1d       	adc	r27, r1
    2fac:	a3 5a       	subi	r26, 0xA3	; 163
    2fae:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2fb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	01 96       	adiw	r24, 0x01	; 1
    2fb8:	8f 73       	andi	r24, 0x3F	; 63
    2fba:	99 27       	eor	r25, r25
    2fbc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2fbe:	a6 89       	ldd	r26, Z+22	; 0x16
    2fc0:	b7 89       	ldd	r27, Z+23	; 0x17
    2fc2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2fc4:	a0 89       	ldd	r26, Z+16	; 0x10
    2fc6:	b1 89       	ldd	r27, Z+17	; 0x11
    2fc8:	8c 91       	ld	r24, X
    2fca:	80 64       	ori	r24, 0x40	; 64
    2fcc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2fce:	93 8d       	ldd	r25, Z+27	; 0x1b
    2fd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fd2:	98 13       	cpse	r25, r24
    2fd4:	06 c0       	rjmp	.+12     	; 0x2fe2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2fd6:	02 88       	ldd	r0, Z+18	; 0x12
    2fd8:	f3 89       	ldd	r31, Z+19	; 0x13
    2fda:	e0 2d       	mov	r30, r0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8f 7d       	andi	r24, 0xDF	; 223
    2fe0:	80 83       	st	Z, r24
    2fe2:	08 95       	ret

00002fe4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	ec 01       	movw	r28, r24
  _written = true;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2ff6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ff8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ffa:	98 13       	cpse	r25, r24
    2ffc:	05 c0       	rjmp	.+10     	; 0x3008 <_ZN14HardwareSerial5writeEh+0x24>
    2ffe:	e8 89       	ldd	r30, Y+16	; 0x10
    3000:	f9 89       	ldd	r31, Y+17	; 0x11
    3002:	80 81       	ld	r24, Z
    3004:	85 fd       	sbrc	r24, 5
    3006:	24 c0       	rjmp	.+72     	; 0x3050 <_ZN14HardwareSerial5writeEh+0x6c>
    3008:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    300a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    300c:	10 e0       	ldi	r17, 0x00	; 0
    300e:	0f 5f       	subi	r16, 0xFF	; 255
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
    3012:	0f 73       	andi	r16, 0x3F	; 63
    3014:	11 27       	eor	r17, r17
    3016:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3018:	8c 8d       	ldd	r24, Y+28	; 0x1c
    301a:	e8 12       	cpse	r14, r24
    301c:	0c c0       	rjmp	.+24     	; 0x3036 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	07 fc       	sbrc	r0, 7
    3022:	fa cf       	rjmp	.-12     	; 0x3018 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3024:	e8 89       	ldd	r30, Y+16	; 0x10
    3026:	f9 89       	ldd	r31, Y+17	; 0x11
    3028:	80 81       	ld	r24, Z
    302a:	85 ff       	sbrs	r24, 5
    302c:	f5 cf       	rjmp	.-22     	; 0x3018 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    302e:	ce 01       	movw	r24, r28
    3030:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3034:	f1 cf       	rjmp	.-30     	; 0x3018 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3038:	fe 01       	movw	r30, r28
    303a:	e8 0f       	add	r30, r24
    303c:	f1 1d       	adc	r31, r1
    303e:	e3 5a       	subi	r30, 0xA3	; 163
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3044:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3046:	ea 89       	ldd	r30, Y+18	; 0x12
    3048:	fb 89       	ldd	r31, Y+19	; 0x13
    304a:	80 81       	ld	r24, Z
    304c:	80 62       	ori	r24, 0x20	; 32
    304e:	07 c0       	rjmp	.+14     	; 0x305e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3050:	ee 89       	ldd	r30, Y+22	; 0x16
    3052:	ff 89       	ldd	r31, Y+23	; 0x17
    3054:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3056:	e8 89       	ldd	r30, Y+16	; 0x10
    3058:	f9 89       	ldd	r31, Y+17	; 0x11
    305a:	80 81       	ld	r24, Z
    305c:	80 64       	ori	r24, 0x40	; 64
    305e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	08 95       	ret

00003072 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3078:	88 8d       	ldd	r24, Y+24	; 0x18
    307a:	88 23       	and	r24, r24
    307c:	c9 f0       	breq	.+50     	; 0x30b0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    307e:	ea 89       	ldd	r30, Y+18	; 0x12
    3080:	fb 89       	ldd	r31, Y+19	; 0x13
    3082:	80 81       	ld	r24, Z
    3084:	85 fd       	sbrc	r24, 5
    3086:	05 c0       	rjmp	.+10     	; 0x3092 <_ZN14HardwareSerial5flushEv+0x20>
    3088:	a8 89       	ldd	r26, Y+16	; 0x10
    308a:	b9 89       	ldd	r27, Y+17	; 0x11
    308c:	8c 91       	ld	r24, X
    308e:	86 fd       	sbrc	r24, 6
    3090:	0f c0       	rjmp	.+30     	; 0x30b0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	07 fc       	sbrc	r0, 7
    3096:	f5 cf       	rjmp	.-22     	; 0x3082 <_ZN14HardwareSerial5flushEv+0x10>
    3098:	80 81       	ld	r24, Z
    309a:	85 ff       	sbrs	r24, 5
    309c:	f2 cf       	rjmp	.-28     	; 0x3082 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    309e:	a8 89       	ldd	r26, Y+16	; 0x10
    30a0:	b9 89       	ldd	r27, Y+17	; 0x11
    30a2:	8c 91       	ld	r24, X
    30a4:	85 ff       	sbrs	r24, 5
    30a6:	ed cf       	rjmp	.-38     	; 0x3082 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    30a8:	ce 01       	movw	r24, r28
    30aa:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    30ae:	e7 cf       	rjmp	.-50     	; 0x307e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    30b6:	cf 92       	push	r12
    30b8:	df 92       	push	r13
    30ba:	ef 92       	push	r14
    30bc:	ff 92       	push	r15
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	ec 01       	movw	r28, r24
    30c6:	6a 01       	movw	r12, r20
    30c8:	7b 01       	movw	r14, r22
    30ca:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    30cc:	e8 89       	ldd	r30, Y+16	; 0x10
    30ce:	f9 89       	ldd	r31, Y+17	; 0x11
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    30d4:	41 15       	cp	r20, r1
    30d6:	51 4e       	sbci	r21, 0xE1	; 225
    30d8:	61 05       	cpc	r22, r1
    30da:	71 05       	cpc	r23, r1
    30dc:	b1 f0       	breq	.+44     	; 0x310a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	79 e0       	ldi	r23, 0x09	; 9
    30e2:	8d e3       	ldi	r24, 0x3D	; 61
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a7 01       	movw	r20, r14
    30e8:	96 01       	movw	r18, r12
    30ea:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodsi4>
    30ee:	da 01       	movw	r26, r20
    30f0:	c9 01       	movw	r24, r18
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	a1 09       	sbc	r26, r1
    30f6:	b1 09       	sbc	r27, r1
    30f8:	b6 95       	lsr	r27
    30fa:	a7 95       	ror	r26
    30fc:	97 95       	ror	r25
    30fe:	87 95       	ror	r24
    3100:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3102:	21 15       	cp	r18, r1
    3104:	80 e1       	ldi	r24, 0x10	; 16
    3106:	38 07       	cpc	r19, r24
    3108:	a8 f0       	brcs	.+42     	; 0x3134 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    310a:	e8 89       	ldd	r30, Y+16	; 0x10
    310c:	f9 89       	ldd	r31, Y+17	; 0x11
    310e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3110:	60 e8       	ldi	r22, 0x80	; 128
    3112:	74 e8       	ldi	r23, 0x84	; 132
    3114:	8e e1       	ldi	r24, 0x1E	; 30
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	a7 01       	movw	r20, r14
    311a:	96 01       	movw	r18, r12
    311c:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodsi4>
    3120:	da 01       	movw	r26, r20
    3122:	c9 01       	movw	r24, r18
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	a1 09       	sbc	r26, r1
    3128:	b1 09       	sbc	r27, r1
    312a:	b6 95       	lsr	r27
    312c:	a7 95       	ror	r26
    312e:	97 95       	ror	r25
    3130:	87 95       	ror	r24
    3132:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3134:	ec 85       	ldd	r30, Y+12	; 0x0c
    3136:	fd 85       	ldd	r31, Y+13	; 0x0d
    3138:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    313a:	ee 85       	ldd	r30, Y+14	; 0x0e
    313c:	ff 85       	ldd	r31, Y+15	; 0x0f
    313e:	20 83       	st	Z, r18

  _written = false;
    3140:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3142:	ec 89       	ldd	r30, Y+20	; 0x14
    3144:	fd 89       	ldd	r31, Y+21	; 0x15
    3146:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3148:	ea 89       	ldd	r30, Y+18	; 0x12
    314a:	fb 89       	ldd	r31, Y+19	; 0x13
    314c:	80 81       	ld	r24, Z
    314e:	80 61       	ori	r24, 0x10	; 16
    3150:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3152:	ea 89       	ldd	r30, Y+18	; 0x12
    3154:	fb 89       	ldd	r31, Y+19	; 0x13
    3156:	80 81       	ld	r24, Z
    3158:	88 60       	ori	r24, 0x08	; 8
    315a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    315c:	ea 89       	ldd	r30, Y+18	; 0x12
    315e:	fb 89       	ldd	r31, Y+19	; 0x13
    3160:	80 81       	ld	r24, Z
    3162:	80 68       	ori	r24, 0x80	; 128
    3164:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3166:	ea 89       	ldd	r30, Y+18	; 0x12
    3168:	fb 89       	ldd	r31, Y+19	; 0x13
    316a:	80 81       	ld	r24, Z
    316c:	8f 7d       	andi	r24, 0xDF	; 223
    316e:	80 83       	st	Z, r24
}
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	08 95       	ret

00003180 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3180:	1f 92       	push	r1
    3182:	0f 92       	push	r0
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	0f 92       	push	r0
    3188:	11 24       	eor	r1, r1
    318a:	2f 93       	push	r18
    318c:	8f 93       	push	r24
    318e:	9f 93       	push	r25
    3190:	ef 93       	push	r30
    3192:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3194:	e0 91 cb 03 	lds	r30, 0x03CB	; 0x8003cb <Serial+0x10>
    3198:	f0 91 cc 03 	lds	r31, 0x03CC	; 0x8003cc <Serial+0x11>
    319c:	80 81       	ld	r24, Z
    319e:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <Serial+0x16>
    31a2:	f0 91 d2 03 	lds	r31, 0x03D2	; 0x8003d2 <Serial+0x17>
    31a6:	82 fd       	sbrc	r24, 2
    31a8:	12 c0       	rjmp	.+36     	; 0x31ce <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    31aa:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    31ac:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <Serial+0x19>
    31b0:	8f 5f       	subi	r24, 0xFF	; 255
    31b2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    31b4:	20 91 d5 03 	lds	r18, 0x03D5	; 0x8003d5 <Serial+0x1a>
    31b8:	82 17       	cp	r24, r18
    31ba:	51 f0       	breq	.+20     	; 0x31d0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    31bc:	e0 91 d4 03 	lds	r30, 0x03D4	; 0x8003d4 <Serial+0x19>
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	e5 54       	subi	r30, 0x45	; 69
    31c4:	fc 4f       	sbci	r31, 0xFC	; 252
    31c6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    31c8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <Serial+0x19>
    31cc:	01 c0       	rjmp	.+2      	; 0x31d0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    31ce:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    31d0:	ff 91       	pop	r31
    31d2:	ef 91       	pop	r30
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	2f 91       	pop	r18
    31da:	0f 90       	pop	r0
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	0f 90       	pop	r0
    31e0:	1f 90       	pop	r1
    31e2:	18 95       	reti

000031e4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    31e4:	1f 92       	push	r1
    31e6:	0f 92       	push	r0
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	0f 92       	push	r0
    31ec:	11 24       	eor	r1, r1
    31ee:	2f 93       	push	r18
    31f0:	3f 93       	push	r19
    31f2:	4f 93       	push	r20
    31f4:	5f 93       	push	r21
    31f6:	6f 93       	push	r22
    31f8:	7f 93       	push	r23
    31fa:	8f 93       	push	r24
    31fc:	9f 93       	push	r25
    31fe:	af 93       	push	r26
    3200:	bf 93       	push	r27
    3202:	ef 93       	push	r30
    3204:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3206:	8b eb       	ldi	r24, 0xBB	; 187
    3208:	93 e0       	ldi	r25, 0x03	; 3
    320a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    320e:	ff 91       	pop	r31
    3210:	ef 91       	pop	r30
    3212:	bf 91       	pop	r27
    3214:	af 91       	pop	r26
    3216:	9f 91       	pop	r25
    3218:	8f 91       	pop	r24
    321a:	7f 91       	pop	r23
    321c:	6f 91       	pop	r22
    321e:	5f 91       	pop	r21
    3220:	4f 91       	pop	r20
    3222:	3f 91       	pop	r19
    3224:	2f 91       	pop	r18
    3226:	0f 90       	pop	r0
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	0f 90       	pop	r0
    322c:	1f 90       	pop	r1
    322e:	18 95       	reti

00003230 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3230:	8b eb       	ldi	r24, 0xBB	; 187
    3232:	93 e0       	ldi	r25, 0x03	; 3
    3234:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN14HardwareSerial9availableEv>
    3238:	21 e0       	ldi	r18, 0x01	; 1
    323a:	89 2b       	or	r24, r25
    323c:	09 f4       	brne	.+2      	; 0x3240 <_Z17Serial0_availablev+0x10>
    323e:	20 e0       	ldi	r18, 0x00	; 0
}
    3240:	82 2f       	mov	r24, r18
    3242:	08 95       	ret

00003244 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3244:	eb eb       	ldi	r30, 0xBB	; 187
    3246:	f3 e0       	ldi	r31, 0x03	; 3
    3248:	13 82       	std	Z+3, r1	; 0x03
    324a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    324c:	88 ee       	ldi	r24, 0xE8	; 232
    324e:	93 e0       	ldi	r25, 0x03	; 3
    3250:	a0 e0       	ldi	r26, 0x00	; 0
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	84 83       	std	Z+4, r24	; 0x04
    3256:	95 83       	std	Z+5, r25	; 0x05
    3258:	a6 83       	std	Z+6, r26	; 0x06
    325a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    325c:	8e e8       	ldi	r24, 0x8E	; 142
    325e:	91 e0       	ldi	r25, 0x01	; 1
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
    3264:	85 ec       	ldi	r24, 0xC5	; 197
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	95 87       	std	Z+13, r25	; 0x0d
    326a:	84 87       	std	Z+12, r24	; 0x0c
    326c:	84 ec       	ldi	r24, 0xC4	; 196
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	97 87       	std	Z+15, r25	; 0x0f
    3272:	86 87       	std	Z+14, r24	; 0x0e
    3274:	80 ec       	ldi	r24, 0xC0	; 192
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	91 8b       	std	Z+17, r25	; 0x11
    327a:	80 8b       	std	Z+16, r24	; 0x10
    327c:	81 ec       	ldi	r24, 0xC1	; 193
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	93 8b       	std	Z+19, r25	; 0x13
    3282:	82 8b       	std	Z+18, r24	; 0x12
    3284:	82 ec       	ldi	r24, 0xC2	; 194
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	95 8b       	std	Z+21, r25	; 0x15
    328a:	84 8b       	std	Z+20, r24	; 0x14
    328c:	86 ec       	ldi	r24, 0xC6	; 198
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	97 8b       	std	Z+23, r25	; 0x17
    3292:	86 8b       	std	Z+22, r24	; 0x16
    3294:	11 8e       	std	Z+25, r1	; 0x19
    3296:	12 8e       	std	Z+26, r1	; 0x1a
    3298:	13 8e       	std	Z+27, r1	; 0x1b
    329a:	14 8e       	std	Z+28, r1	; 0x1c
    329c:	08 95       	ret

0000329e <initVariant>:
    329e:	08 95       	ret

000032a0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    32a0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <init>

	initVariant();
    32a4:	0e 94 4f 19 	call	0x329e	; 0x329e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    32a8:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    32ac:	c3 ec       	ldi	r28, 0xC3	; 195
    32ae:	d7 e1       	ldi	r29, 0x17	; 23
#endif
	
	setup();
    
	for (;;) {
		loop();
    32b0:	0e 94 2f 12 	call	0x245e	; 0x245e <loop>
		if (serialEventRun) serialEventRun();
    32b4:	20 97       	sbiw	r28, 0x00	; 0
    32b6:	e1 f3       	breq	.-8      	; 0x32b0 <main+0x10>
    32b8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z14serialEventRunv>
    32bc:	f9 cf       	rjmp	.-14     	; 0x32b0 <main+0x10>

000032be <_Znwj>:
    32be:	0c 94 96 20 	jmp	0x412c	; 0x412c <malloc>

000032c2 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    32c2:	cf 92       	push	r12
    32c4:	df 92       	push	r13
    32c6:	ef 92       	push	r14
    32c8:	ff 92       	push	r15
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	6c 01       	movw	r12, r24
    32d4:	7a 01       	movw	r14, r20
    32d6:	8b 01       	movw	r16, r22
    32d8:	c0 e0       	ldi	r28, 0x00	; 0
    32da:	d0 e0       	ldi	r29, 0x00	; 0
    32dc:	ce 15       	cp	r28, r14
    32de:	df 05       	cpc	r29, r15
    32e0:	81 f0       	breq	.+32     	; 0x3302 <_ZN5Print5writeEPKhj+0x40>
    32e2:	d8 01       	movw	r26, r16
    32e4:	6d 91       	ld	r22, X+
    32e6:	8d 01       	movw	r16, r26
    32e8:	d6 01       	movw	r26, r12
    32ea:	ed 91       	ld	r30, X+
    32ec:	fc 91       	ld	r31, X
    32ee:	01 90       	ld	r0, Z+
    32f0:	f0 81       	ld	r31, Z
    32f2:	e0 2d       	mov	r30, r0
    32f4:	c6 01       	movw	r24, r12
    32f6:	09 95       	icall
    32f8:	89 2b       	or	r24, r25
    32fa:	11 f0       	breq	.+4      	; 0x3300 <_ZN5Print5writeEPKhj+0x3e>
    32fc:	21 96       	adiw	r28, 0x01	; 1
    32fe:	ee cf       	rjmp	.-36     	; 0x32dc <_ZN5Print5writeEPKhj+0x1a>
    3300:	7e 01       	movw	r14, r28
    3302:	c7 01       	movw	r24, r14
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	df 90       	pop	r13
    3312:	cf 90       	pop	r12
    3314:	08 95       	ret

00003316 <_ZN5Print5writeEPKc>:
    3316:	61 15       	cp	r22, r1
    3318:	71 05       	cpc	r23, r1
    331a:	79 f0       	breq	.+30     	; 0x333a <_ZN5Print5writeEPKc+0x24>
    331c:	fb 01       	movw	r30, r22
    331e:	01 90       	ld	r0, Z+
    3320:	00 20       	and	r0, r0
    3322:	e9 f7       	brne	.-6      	; 0x331e <_ZN5Print5writeEPKc+0x8>
    3324:	31 97       	sbiw	r30, 0x01	; 1
    3326:	af 01       	movw	r20, r30
    3328:	46 1b       	sub	r20, r22
    332a:	57 0b       	sbc	r21, r23
    332c:	dc 01       	movw	r26, r24
    332e:	ed 91       	ld	r30, X+
    3330:	fc 91       	ld	r31, X
    3332:	02 80       	ldd	r0, Z+2	; 0x02
    3334:	f3 81       	ldd	r31, Z+3	; 0x03
    3336:	e0 2d       	mov	r30, r0
    3338:	09 94       	ijmp
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	08 95       	ret

00003340 <_ZN5Print5printEPK19__FlashStringHelper>:
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	8c 01       	movw	r16, r24
    334e:	7b 01       	movw	r14, r22
    3350:	c0 e0       	ldi	r28, 0x00	; 0
    3352:	d0 e0       	ldi	r29, 0x00	; 0
    3354:	f7 01       	movw	r30, r14
    3356:	ec 0f       	add	r30, r28
    3358:	fd 1f       	adc	r31, r29
    335a:	64 91       	lpm	r22, Z
    335c:	66 23       	and	r22, r22
    335e:	61 f0       	breq	.+24     	; 0x3378 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3360:	d8 01       	movw	r26, r16
    3362:	ed 91       	ld	r30, X+
    3364:	fc 91       	ld	r31, X
    3366:	01 90       	ld	r0, Z+
    3368:	f0 81       	ld	r31, Z
    336a:	e0 2d       	mov	r30, r0
    336c:	c8 01       	movw	r24, r16
    336e:	09 95       	icall
    3370:	89 2b       	or	r24, r25
    3372:	11 f0       	breq	.+4      	; 0x3378 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3374:	21 96       	adiw	r28, 0x01	; 1
    3376:	ee cf       	rjmp	.-36     	; 0x3354 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3378:	ce 01       	movw	r24, r28
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	08 95       	ret

00003388 <_ZN5Print5printERK6String>:
    3388:	db 01       	movw	r26, r22
    338a:	14 96       	adiw	r26, 0x04	; 4
    338c:	4d 91       	ld	r20, X+
    338e:	5c 91       	ld	r21, X
    3390:	15 97       	sbiw	r26, 0x05	; 5
    3392:	6d 91       	ld	r22, X+
    3394:	7c 91       	ld	r23, X
    3396:	dc 01       	movw	r26, r24
    3398:	ed 91       	ld	r30, X+
    339a:	fc 91       	ld	r31, X
    339c:	02 80       	ldd	r0, Z+2	; 0x02
    339e:	f3 81       	ldd	r31, Z+3	; 0x03
    33a0:	e0 2d       	mov	r30, r0
    33a2:	09 94       	ijmp

000033a4 <_ZN5Print5printEPKc>:
    33a4:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <_ZN5Print5writeEPKc>

000033a8 <_ZN5Print5printEc>:
    33a8:	dc 01       	movw	r26, r24
    33aa:	ed 91       	ld	r30, X+
    33ac:	fc 91       	ld	r31, X
    33ae:	01 90       	ld	r0, Z+
    33b0:	f0 81       	ld	r31, Z
    33b2:	e0 2d       	mov	r30, r0
    33b4:	09 94       	ijmp

000033b6 <_ZN5Print7printlnEv>:
    33b6:	6a e9       	ldi	r22, 0x9A	; 154
    33b8:	71 e0       	ldi	r23, 0x01	; 1
    33ba:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <_ZN5Print5writeEPKc>

000033be <_ZN5Print7printlnEPK19__FlashStringHelper>:
    33be:	0f 93       	push	r16
    33c0:	1f 93       	push	r17
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	ec 01       	movw	r28, r24
    33c8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN5Print5printEPK19__FlashStringHelper>
    33cc:	8c 01       	movw	r16, r24
    33ce:	ce 01       	movw	r24, r28
    33d0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
    33d4:	80 0f       	add	r24, r16
    33d6:	91 1f       	adc	r25, r17
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	08 95       	ret

000033e2 <_ZN5Print7printlnEPKc>:
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	ec 01       	movw	r28, r24
    33ec:	0e 94 8b 19 	call	0x3316	; 0x3316 <_ZN5Print5writeEPKc>
    33f0:	8c 01       	movw	r16, r24
    33f2:	ce 01       	movw	r24, r28
    33f4:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
    33f8:	80 0f       	add	r24, r16
    33fa:	91 1f       	adc	r25, r17
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	08 95       	ret

00003406 <_ZN5Print7printlnEc>:
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	ec 01       	movw	r28, r24
    3410:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_ZN5Print5printEc>
    3414:	8c 01       	movw	r16, r24
    3416:	ce 01       	movw	r24, r28
    3418:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
    341c:	80 0f       	add	r24, r16
    341e:	91 1f       	adc	r25, r17
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	08 95       	ret

0000342a <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    342a:	8f 92       	push	r8
    342c:	9f 92       	push	r9
    342e:	af 92       	push	r10
    3430:	bf 92       	push	r11
    3432:	ef 92       	push	r14
    3434:	ff 92       	push	r15
    3436:	0f 93       	push	r16
    3438:	1f 93       	push	r17
    343a:	cf 93       	push	r28
    343c:	df 93       	push	r29
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	a1 97       	sbiw	r28, 0x21	; 33
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	7c 01       	movw	r14, r24
    3450:	fa 01       	movw	r30, r20
    3452:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3454:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3456:	22 30       	cpi	r18, 0x02	; 2
    3458:	08 f4       	brcc	.+2      	; 0x345c <_ZN5Print11printNumberEmh+0x32>
    345a:	2a e0       	ldi	r18, 0x0A	; 10
    345c:	8e 01       	movw	r16, r28
    345e:	0f 5d       	subi	r16, 0xDF	; 223
    3460:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    3462:	82 2e       	mov	r8, r18
    3464:	91 2c       	mov	r9, r1
    3466:	a1 2c       	mov	r10, r1
    3468:	b1 2c       	mov	r11, r1
    346a:	bf 01       	movw	r22, r30
    346c:	a5 01       	movw	r20, r10
    346e:	94 01       	movw	r18, r8
    3470:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodsi4>
    n /= base;
    3474:	f9 01       	movw	r30, r18
    3476:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3478:	01 50       	subi	r16, 0x01	; 1
    347a:	11 09       	sbc	r17, r1
    347c:	6a 30       	cpi	r22, 0x0A	; 10
    347e:	10 f4       	brcc	.+4      	; 0x3484 <_ZN5Print11printNumberEmh+0x5a>
    3480:	60 5d       	subi	r22, 0xD0	; 208
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <_ZN5Print11printNumberEmh+0x5c>
    3484:	69 5c       	subi	r22, 0xC9	; 201
    3486:	d8 01       	movw	r26, r16
    3488:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    348a:	23 2b       	or	r18, r19
    348c:	24 2b       	or	r18, r20
    348e:	25 2b       	or	r18, r21
    3490:	61 f7       	brne	.-40     	; 0x346a <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3492:	b8 01       	movw	r22, r16
    3494:	c7 01       	movw	r24, r14
    3496:	0e 94 8b 19 	call	0x3316	; 0x3316 <_ZN5Print5writeEPKc>
}
    349a:	a1 96       	adiw	r28, 0x21	; 33
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
    34ae:	ff 90       	pop	r15
    34b0:	ef 90       	pop	r14
    34b2:	bf 90       	pop	r11
    34b4:	af 90       	pop	r10
    34b6:	9f 90       	pop	r9
    34b8:	8f 90       	pop	r8
    34ba:	08 95       	ret

000034bc <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    34bc:	21 15       	cp	r18, r1
    34be:	31 05       	cpc	r19, r1
    34c0:	41 f4       	brne	.+16     	; 0x34d2 <_ZN5Print5printEmi+0x16>
    34c2:	dc 01       	movw	r26, r24
    34c4:	ed 91       	ld	r30, X+
    34c6:	fc 91       	ld	r31, X
    34c8:	01 90       	ld	r0, Z+
    34ca:	f0 81       	ld	r31, Z
    34cc:	e0 2d       	mov	r30, r0
    34ce:	64 2f       	mov	r22, r20
    34d0:	09 94       	ijmp
  else return printNumber(n, base);
    34d2:	0c 94 15 1a 	jmp	0x342a	; 0x342a <_ZN5Print11printNumberEmh>

000034d6 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    34d6:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    34d8:	46 2f       	mov	r20, r22
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <_ZN5Print5printEmi>

000034e4 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    34ee:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN5Print5printEhi>
    34f2:	8c 01       	movw	r16, r24
  n += println();
    34f4:	ce 01       	movw	r24, r28
    34f6:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
  return n;
}
    34fa:	80 0f       	add	r24, r16
    34fc:	91 1f       	adc	r25, r17
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	08 95       	ret

00003508 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3508:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    350a:	ab 01       	movw	r20, r22
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <_ZN5Print5printEmi>

00003514 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    351e:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN5Print5printEji>
    3522:	8c 01       	movw	r16, r24
  n += println();
    3524:	ce 01       	movw	r24, r28
    3526:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
  return n;
}
    352a:	80 0f       	add	r24, r16
    352c:	91 1f       	adc	r25, r17
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	08 95       	ret

00003538 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3542:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN5Print5printEmi>
    3546:	8c 01       	movw	r16, r24
  n += println();
    3548:	ce 01       	movw	r24, r28
    354a:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
  return n;
}
    354e:	80 0f       	add	r24, r16
    3550:	91 1f       	adc	r25, r17
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    355c:	cf 92       	push	r12
    355e:	df 92       	push	r13
    3560:	ef 92       	push	r14
    3562:	ff 92       	push	r15
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
  if (base == 0) {
    356c:	21 15       	cp	r18, r1
    356e:	31 05       	cpc	r19, r1
    3570:	81 f4       	brne	.+32     	; 0x3592 <_ZN5Print5printEli+0x36>
    return write(n);
    3572:	dc 01       	movw	r26, r24
    3574:	ed 91       	ld	r30, X+
    3576:	fc 91       	ld	r31, X
    3578:	01 90       	ld	r0, Z+
    357a:	f0 81       	ld	r31, Z
    357c:	e0 2d       	mov	r30, r0
    357e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	df 90       	pop	r13
    358e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3590:	09 94       	ijmp
  } else if (base == 10) {
    3592:	2a 30       	cpi	r18, 0x0A	; 10
    3594:	31 05       	cpc	r19, r1
    3596:	01 f5       	brne	.+64     	; 0x35d8 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3598:	77 ff       	sbrs	r23, 7
    359a:	1d c0       	rjmp	.+58     	; 0x35d6 <_ZN5Print5printEli+0x7a>
    359c:	6a 01       	movw	r12, r20
    359e:	7b 01       	movw	r14, r22
    35a0:	ec 01       	movw	r28, r24
      int t = print('-');
    35a2:	6d e2       	ldi	r22, 0x2D	; 45
    35a4:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_ZN5Print5printEc>
    35a8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    35aa:	44 27       	eor	r20, r20
    35ac:	55 27       	eor	r21, r21
    35ae:	ba 01       	movw	r22, r20
    35b0:	4c 19       	sub	r20, r12
    35b2:	5d 09       	sbc	r21, r13
    35b4:	6e 09       	sbc	r22, r14
    35b6:	7f 09       	sbc	r23, r15
    35b8:	2a e0       	ldi	r18, 0x0A	; 10
    35ba:	ce 01       	movw	r24, r28
    35bc:	0e 94 15 1a 	call	0x342a	; 0x342a <_ZN5Print11printNumberEmh>
    35c0:	80 0f       	add	r24, r16
    35c2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    35c4:	df 91       	pop	r29
    35c6:	cf 91       	pop	r28
    35c8:	1f 91       	pop	r17
    35ca:	0f 91       	pop	r16
    35cc:	ff 90       	pop	r15
    35ce:	ef 90       	pop	r14
    35d0:	df 90       	pop	r13
    35d2:	cf 90       	pop	r12
    35d4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    35d6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	ff 90       	pop	r15
    35e2:	ef 90       	pop	r14
    35e4:	df 90       	pop	r13
    35e6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    35e8:	0c 94 15 1a 	jmp	0x342a	; 0x342a <_ZN5Print11printNumberEmh>

000035ec <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    35ec:	9a 01       	movw	r18, r20
  return print((long) n, base);
    35ee:	ab 01       	movw	r20, r22
    35f0:	77 0f       	add	r23, r23
    35f2:	66 0b       	sbc	r22, r22
    35f4:	77 0b       	sbc	r23, r23
    35f6:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <_ZN5Print5printEli>

000035fa <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3604:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <_ZN5Print5printEii>
    3608:	8c 01       	movw	r16, r24
  n += println();
    360a:	ce 01       	movw	r24, r28
    360c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
  return n;
}
    3610:	80 0f       	add	r24, r16
    3612:	91 1f       	adc	r25, r17
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	08 95       	ret

0000361e <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3628:	0e 94 ae 1a 	call	0x355c	; 0x355c <_ZN5Print5printEli>
    362c:	8c 01       	movw	r16, r24
  n += println();
    362e:	ce 01       	movw	r24, r28
    3630:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZN5Print7printlnEv>
  return n;
}
    3634:	80 0f       	add	r24, r16
    3636:	91 1f       	adc	r25, r17
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	08 95       	ret

00003642 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3642:	1f 92       	push	r1
    3644:	0f 92       	push	r0
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	0f 92       	push	r0
    364a:	11 24       	eor	r1, r1
    364c:	2f 93       	push	r18
    364e:	3f 93       	push	r19
    3650:	8f 93       	push	r24
    3652:	9f 93       	push	r25
    3654:	af 93       	push	r26
    3656:	bf 93       	push	r27
    3658:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <timer0_millis>
    365c:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <timer0_millis+0x1>
    3660:	a0 91 5b 04 	lds	r26, 0x045B	; 0x80045b <timer0_millis+0x2>
    3664:	b0 91 5c 04 	lds	r27, 0x045C	; 0x80045c <timer0_millis+0x3>
    3668:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <timer0_fract>
    366c:	23 e0       	ldi	r18, 0x03	; 3
    366e:	23 0f       	add	r18, r19
    3670:	2d 37       	cpi	r18, 0x7D	; 125
    3672:	20 f4       	brcc	.+8      	; 0x367c <__vector_16+0x3a>
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	a1 1d       	adc	r26, r1
    3678:	b1 1d       	adc	r27, r1
    367a:	05 c0       	rjmp	.+10     	; 0x3686 <__vector_16+0x44>
    367c:	26 e8       	ldi	r18, 0x86	; 134
    367e:	23 0f       	add	r18, r19
    3680:	02 96       	adiw	r24, 0x02	; 2
    3682:	a1 1d       	adc	r26, r1
    3684:	b1 1d       	adc	r27, r1
    3686:	20 93 58 04 	sts	0x0458, r18	; 0x800458 <timer0_fract>
    368a:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <timer0_millis>
    368e:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <timer0_millis+0x1>
    3692:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <timer0_millis+0x2>
    3696:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <timer0_millis+0x3>
    369a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <timer0_overflow_count>
    369e:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <timer0_overflow_count+0x1>
    36a2:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <timer0_overflow_count+0x2>
    36a6:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <timer0_overflow_count+0x3>
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	a1 1d       	adc	r26, r1
    36ae:	b1 1d       	adc	r27, r1
    36b0:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <timer0_overflow_count>
    36b4:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <timer0_overflow_count+0x1>
    36b8:	a0 93 5f 04 	sts	0x045F, r26	; 0x80045f <timer0_overflow_count+0x2>
    36bc:	b0 93 60 04 	sts	0x0460, r27	; 0x800460 <timer0_overflow_count+0x3>
    36c0:	bf 91       	pop	r27
    36c2:	af 91       	pop	r26
    36c4:	9f 91       	pop	r25
    36c6:	8f 91       	pop	r24
    36c8:	3f 91       	pop	r19
    36ca:	2f 91       	pop	r18
    36cc:	0f 90       	pop	r0
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	0f 90       	pop	r0
    36d2:	1f 90       	pop	r1
    36d4:	18 95       	reti

000036d6 <micros>:
    36d6:	3f b7       	in	r19, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <timer0_overflow_count>
    36de:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <timer0_overflow_count+0x1>
    36e2:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <timer0_overflow_count+0x2>
    36e6:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <timer0_overflow_count+0x3>
    36ea:	26 b5       	in	r18, 0x26	; 38
    36ec:	a8 9b       	sbis	0x15, 0	; 21
    36ee:	05 c0       	rjmp	.+10     	; 0x36fa <micros+0x24>
    36f0:	2f 3f       	cpi	r18, 0xFF	; 255
    36f2:	19 f0       	breq	.+6      	; 0x36fa <micros+0x24>
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	a1 1d       	adc	r26, r1
    36f8:	b1 1d       	adc	r27, r1
    36fa:	3f bf       	out	0x3f, r19	; 63
    36fc:	ba 2f       	mov	r27, r26
    36fe:	a9 2f       	mov	r26, r25
    3700:	98 2f       	mov	r25, r24
    3702:	88 27       	eor	r24, r24
    3704:	82 0f       	add	r24, r18
    3706:	91 1d       	adc	r25, r1
    3708:	a1 1d       	adc	r26, r1
    370a:	b1 1d       	adc	r27, r1
    370c:	bc 01       	movw	r22, r24
    370e:	cd 01       	movw	r24, r26
    3710:	42 e0       	ldi	r20, 0x02	; 2
    3712:	66 0f       	add	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	88 1f       	adc	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	4a 95       	dec	r20
    371c:	d1 f7       	brne	.-12     	; 0x3712 <micros+0x3c>
    371e:	08 95       	ret

00003720 <delay>:
    3720:	8f 92       	push	r8
    3722:	9f 92       	push	r9
    3724:	af 92       	push	r10
    3726:	bf 92       	push	r11
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	6b 01       	movw	r12, r22
    3732:	7c 01       	movw	r14, r24
    3734:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <micros>
    3738:	4b 01       	movw	r8, r22
    373a:	5c 01       	movw	r10, r24
    373c:	c1 14       	cp	r12, r1
    373e:	d1 04       	cpc	r13, r1
    3740:	e1 04       	cpc	r14, r1
    3742:	f1 04       	cpc	r15, r1
    3744:	01 f1       	breq	.+64     	; 0x3786 <delay+0x66>
    3746:	0e 94 1a 20 	call	0x4034	; 0x4034 <yield>
    374a:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <micros>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	88 19       	sub	r24, r8
    3754:	99 09       	sbc	r25, r9
    3756:	aa 09       	sbc	r26, r10
    3758:	bb 09       	sbc	r27, r11
    375a:	88 3e       	cpi	r24, 0xE8	; 232
    375c:	93 40       	sbci	r25, 0x03	; 3
    375e:	a1 05       	cpc	r26, r1
    3760:	b1 05       	cpc	r27, r1
    3762:	60 f3       	brcs	.-40     	; 0x373c <delay+0x1c>
    3764:	21 e0       	ldi	r18, 0x01	; 1
    3766:	c2 1a       	sub	r12, r18
    3768:	d1 08       	sbc	r13, r1
    376a:	e1 08       	sbc	r14, r1
    376c:	f1 08       	sbc	r15, r1
    376e:	88 ee       	ldi	r24, 0xE8	; 232
    3770:	88 0e       	add	r8, r24
    3772:	83 e0       	ldi	r24, 0x03	; 3
    3774:	98 1e       	adc	r9, r24
    3776:	a1 1c       	adc	r10, r1
    3778:	b1 1c       	adc	r11, r1
    377a:	c1 14       	cp	r12, r1
    377c:	d1 04       	cpc	r13, r1
    377e:	e1 04       	cpc	r14, r1
    3780:	f1 04       	cpc	r15, r1
    3782:	19 f7       	brne	.-58     	; 0x374a <delay+0x2a>
    3784:	db cf       	rjmp	.-74     	; 0x373c <delay+0x1c>
    3786:	ff 90       	pop	r15
    3788:	ef 90       	pop	r14
    378a:	df 90       	pop	r13
    378c:	cf 90       	pop	r12
    378e:	bf 90       	pop	r11
    3790:	af 90       	pop	r10
    3792:	9f 90       	pop	r9
    3794:	8f 90       	pop	r8
    3796:	08 95       	ret

00003798 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3798:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    379a:	84 b5       	in	r24, 0x24	; 36
    379c:	82 60       	ori	r24, 0x02	; 2
    379e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    37a0:	84 b5       	in	r24, 0x24	; 36
    37a2:	81 60       	ori	r24, 0x01	; 1
    37a4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    37a6:	85 b5       	in	r24, 0x25	; 37
    37a8:	82 60       	ori	r24, 0x02	; 2
    37aa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    37ac:	85 b5       	in	r24, 0x25	; 37
    37ae:	81 60       	ori	r24, 0x01	; 1
    37b0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    37b2:	ee e6       	ldi	r30, 0x6E	; 110
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	81 60       	ori	r24, 0x01	; 1
    37ba:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    37bc:	e1 e8       	ldi	r30, 0x81	; 129
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    37c2:	80 81       	ld	r24, Z
    37c4:	82 60       	ori	r24, 0x02	; 2
    37c6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    37c8:	80 81       	ld	r24, Z
    37ca:	81 60       	ori	r24, 0x01	; 1
    37cc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    37ce:	e0 e8       	ldi	r30, 0x80	; 128
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	81 60       	ori	r24, 0x01	; 1
    37d6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    37d8:	e1 eb       	ldi	r30, 0xB1	; 177
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	84 60       	ori	r24, 0x04	; 4
    37e0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    37e2:	e0 eb       	ldi	r30, 0xB0	; 176
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	80 81       	ld	r24, Z
    37e8:	81 60       	ori	r24, 0x01	; 1
    37ea:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    37ec:	ea e7       	ldi	r30, 0x7A	; 122
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	84 60       	ori	r24, 0x04	; 4
    37f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    37f6:	80 81       	ld	r24, Z
    37f8:	82 60       	ori	r24, 0x02	; 2
    37fa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    37fc:	80 81       	ld	r24, Z
    37fe:	81 60       	ori	r24, 0x01	; 1
    3800:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3802:	80 81       	ld	r24, Z
    3804:	80 68       	ori	r24, 0x80	; 128
    3806:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3808:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    380c:	08 95       	ret

0000380e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    380e:	8e 30       	cpi	r24, 0x0E	; 14
    3810:	08 f0       	brcs	.+2      	; 0x3814 <analogRead+0x6>
    3812:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3814:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3818:	90 e4       	ldi	r25, 0x40	; 64
    381a:	29 9f       	mul	r18, r25
    381c:	90 01       	movw	r18, r0
    381e:	11 24       	eor	r1, r1
    3820:	87 70       	andi	r24, 0x07	; 7
    3822:	82 2b       	or	r24, r18
    3824:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3828:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    382c:	80 64       	ori	r24, 0x40	; 64
    382e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3832:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3836:	86 fd       	sbrc	r24, 6
    3838:	fc cf       	rjmp	.-8      	; 0x3832 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    383a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    383e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3842:	90 e0       	ldi	r25, 0x00	; 0
}
    3844:	92 2b       	or	r25, r18
    3846:	08 95       	ret

00003848 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3848:	83 30       	cpi	r24, 0x03	; 3
    384a:	81 f0       	breq	.+32     	; 0x386c <turnOffPWM+0x24>
    384c:	28 f4       	brcc	.+10     	; 0x3858 <turnOffPWM+0x10>
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	99 f0       	breq	.+38     	; 0x3878 <turnOffPWM+0x30>
    3852:	82 30       	cpi	r24, 0x02	; 2
    3854:	a1 f0       	breq	.+40     	; 0x387e <turnOffPWM+0x36>
    3856:	08 95       	ret
    3858:	87 30       	cpi	r24, 0x07	; 7
    385a:	a9 f0       	breq	.+42     	; 0x3886 <turnOffPWM+0x3e>
    385c:	88 30       	cpi	r24, 0x08	; 8
    385e:	b9 f0       	breq	.+46     	; 0x388e <turnOffPWM+0x46>
    3860:	84 30       	cpi	r24, 0x04	; 4
    3862:	d1 f4       	brne	.+52     	; 0x3898 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3864:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3868:	8f 7d       	andi	r24, 0xDF	; 223
    386a:	03 c0       	rjmp	.+6      	; 0x3872 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    386c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3870:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3872:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3876:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3878:	84 b5       	in	r24, 0x24	; 36
    387a:	8f 77       	andi	r24, 0x7F	; 127
    387c:	02 c0       	rjmp	.+4      	; 0x3882 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    387e:	84 b5       	in	r24, 0x24	; 36
    3880:	8f 7d       	andi	r24, 0xDF	; 223
    3882:	84 bd       	out	0x24, r24	; 36
    3884:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3886:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    388a:	8f 77       	andi	r24, 0x7F	; 127
    388c:	03 c0       	rjmp	.+6      	; 0x3894 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    388e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3892:	8f 7d       	andi	r24, 0xDF	; 223
    3894:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3898:	08 95       	ret

0000389a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	fc 01       	movw	r30, r24
    38a2:	e3 55       	subi	r30, 0x53	; 83
    38a4:	f9 4f       	sbci	r31, 0xF9	; 249
    38a6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    38a8:	fc 01       	movw	r30, r24
    38aa:	ef 53       	subi	r30, 0x3F	; 63
    38ac:	f9 4f       	sbci	r31, 0xF9	; 249
    38ae:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    38b0:	88 23       	and	r24, r24
    38b2:	61 f1       	breq	.+88     	; 0x390c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	fc 01       	movw	r30, r24
    38bc:	e7 51       	subi	r30, 0x17	; 23
    38be:	f9 4f       	sbci	r31, 0xF9	; 249
    38c0:	c5 91       	lpm	r28, Z+
    38c2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    38c4:	fc 01       	movw	r30, r24
    38c6:	e1 52       	subi	r30, 0x21	; 33
    38c8:	f9 4f       	sbci	r31, 0xF9	; 249
    38ca:	a5 91       	lpm	r26, Z+
    38cc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    38ce:	61 11       	cpse	r22, r1
    38d0:	09 c0       	rjmp	.+18     	; 0x38e4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    38d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38d4:	f8 94       	cli
		*reg &= ~bit;
    38d6:	88 81       	ld	r24, Y
    38d8:	20 95       	com	r18
    38da:	82 23       	and	r24, r18
    38dc:	88 83       	st	Y, r24
		*out &= ~bit;
    38de:	ec 91       	ld	r30, X
    38e0:	2e 23       	and	r18, r30
    38e2:	0b c0       	rjmp	.+22     	; 0x38fa <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    38e4:	62 30       	cpi	r22, 0x02	; 2
    38e6:	61 f4       	brne	.+24     	; 0x3900 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    38e8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38ea:	f8 94       	cli
		*reg &= ~bit;
    38ec:	88 81       	ld	r24, Y
    38ee:	32 2f       	mov	r19, r18
    38f0:	30 95       	com	r19
    38f2:	83 23       	and	r24, r19
    38f4:	88 83       	st	Y, r24
		*out |= bit;
    38f6:	ec 91       	ld	r30, X
    38f8:	2e 2b       	or	r18, r30
    38fa:	2c 93       	st	X, r18
		SREG = oldSREG;
    38fc:	9f bf       	out	0x3f, r25	; 63
    38fe:	06 c0       	rjmp	.+12     	; 0x390c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3900:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3902:	f8 94       	cli
		*reg |= bit;
    3904:	e8 81       	ld	r30, Y
    3906:	2e 2b       	or	r18, r30
    3908:	28 83       	st	Y, r18
		SREG = oldSREG;
    390a:	8f bf       	out	0x3f, r24	; 63
	}
}
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	08 95       	ret

00003912 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3912:	1f 93       	push	r17
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3918:	28 2f       	mov	r18, r24
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	f9 01       	movw	r30, r18
    391e:	e7 56       	subi	r30, 0x67	; 103
    3920:	f9 4f       	sbci	r31, 0xF9	; 249
    3922:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3924:	f9 01       	movw	r30, r18
    3926:	e3 55       	subi	r30, 0x53	; 83
    3928:	f9 4f       	sbci	r31, 0xF9	; 249
    392a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    392c:	f9 01       	movw	r30, r18
    392e:	ef 53       	subi	r30, 0x3F	; 63
    3930:	f9 4f       	sbci	r31, 0xF9	; 249
    3932:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3934:	cc 23       	and	r28, r28
    3936:	c1 f0       	breq	.+48     	; 0x3968 <digitalWrite+0x56>
    3938:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    393a:	81 11       	cpse	r24, r1
    393c:	0e 94 24 1c 	call	0x3848	; 0x3848 <turnOffPWM>

	out = portOutputRegister(port);
    3940:	ec 2f       	mov	r30, r28
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	ee 0f       	add	r30, r30
    3946:	ff 1f       	adc	r31, r31
    3948:	e1 52       	subi	r30, 0x21	; 33
    394a:	f9 4f       	sbci	r31, 0xF9	; 249
    394c:	a5 91       	lpm	r26, Z+
    394e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3950:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3952:	f8 94       	cli

	if (val == LOW) {
    3954:	11 11       	cpse	r17, r1
    3956:	04 c0       	rjmp	.+8      	; 0x3960 <digitalWrite+0x4e>
		*out &= ~bit;
    3958:	8c 91       	ld	r24, X
    395a:	d0 95       	com	r29
    395c:	d8 23       	and	r29, r24
    395e:	02 c0       	rjmp	.+4      	; 0x3964 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3960:	ec 91       	ld	r30, X
    3962:	de 2b       	or	r29, r30
    3964:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3966:	9f bf       	out	0x3f, r25	; 63
}
    3968:	df 91       	pop	r29
    396a:	cf 91       	pop	r28
    396c:	1f 91       	pop	r17
    396e:	08 95       	ret

00003970 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3970:	fc 01       	movw	r30, r24
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	0c 94 2e 21 	jmp	0x425c	; 0x425c <free>

0000397a <_ZN6String10invalidateEv>:
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	ec 01       	movw	r28, r24
    3980:	88 81       	ld	r24, Y
    3982:	99 81       	ldd	r25, Y+1	; 0x01
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	11 f0       	breq	.+4      	; 0x398c <_ZN6String10invalidateEv+0x12>
    3988:	0e 94 2e 21 	call	0x425c	; 0x425c <free>
    398c:	19 82       	std	Y+1, r1	; 0x01
    398e:	18 82       	st	Y, r1
    3990:	1d 82       	std	Y+5, r1	; 0x05
    3992:	1c 82       	std	Y+4, r1	; 0x04
    3994:	1b 82       	std	Y+3, r1	; 0x03
    3996:	1a 82       	std	Y+2, r1	; 0x02
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	08 95       	ret

0000399e <_ZN6String12changeBufferEj>:
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	ec 01       	movw	r28, r24
    39a8:	8b 01       	movw	r16, r22
    39aa:	6f 5f       	subi	r22, 0xFF	; 255
    39ac:	7f 4f       	sbci	r23, 0xFF	; 255
    39ae:	88 81       	ld	r24, Y
    39b0:	99 81       	ldd	r25, Y+1	; 0x01
    39b2:	0e 94 b7 21 	call	0x436e	; 0x436e <realloc>
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	31 f0       	breq	.+12     	; 0x39c6 <_ZN6String12changeBufferEj+0x28>
    39ba:	99 83       	std	Y+1, r25	; 0x01
    39bc:	88 83       	st	Y, r24
    39be:	1b 83       	std	Y+3, r17	; 0x03
    39c0:	0a 83       	std	Y+2, r16	; 0x02
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	01 c0       	rjmp	.+2      	; 0x39c8 <_ZN6String12changeBufferEj+0x2a>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	08 95       	ret

000039d2 <_ZN6String7reserveEj>:
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
    39d6:	ec 01       	movw	r28, r24
    39d8:	88 81       	ld	r24, Y
    39da:	99 81       	ldd	r25, Y+1	; 0x01
    39dc:	89 2b       	or	r24, r25
    39de:	29 f0       	breq	.+10     	; 0x39ea <_ZN6String7reserveEj+0x18>
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	9b 81       	ldd	r25, Y+3	; 0x03
    39e4:	86 17       	cp	r24, r22
    39e6:	97 07       	cpc	r25, r23
    39e8:	60 f4       	brcc	.+24     	; 0x3a02 <_ZN6String7reserveEj+0x30>
    39ea:	ce 01       	movw	r24, r28
    39ec:	0e 94 cf 1c 	call	0x399e	; 0x399e <_ZN6String12changeBufferEj>
    39f0:	88 23       	and	r24, r24
    39f2:	41 f0       	breq	.+16     	; 0x3a04 <_ZN6String7reserveEj+0x32>
    39f4:	8c 81       	ldd	r24, Y+4	; 0x04
    39f6:	9d 81       	ldd	r25, Y+5	; 0x05
    39f8:	89 2b       	or	r24, r25
    39fa:	19 f4       	brne	.+6      	; 0x3a02 <_ZN6String7reserveEj+0x30>
    39fc:	e8 81       	ld	r30, Y
    39fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3a00:	10 82       	st	Z, r1
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	08 95       	ret

00003a0a <_ZN6String4copyEPKcj>:
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	ec 01       	movw	r28, r24
    3a18:	7b 01       	movw	r14, r22
    3a1a:	8a 01       	movw	r16, r20
    3a1c:	ba 01       	movw	r22, r20
    3a1e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <_ZN6String7reserveEj>
    3a22:	81 11       	cpse	r24, r1
    3a24:	04 c0       	rjmp	.+8      	; 0x3a2e <_ZN6String4copyEPKcj+0x24>
    3a26:	ce 01       	movw	r24, r28
    3a28:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6String10invalidateEv>
    3a2c:	07 c0       	rjmp	.+14     	; 0x3a3c <_ZN6String4copyEPKcj+0x32>
    3a2e:	1d 83       	std	Y+5, r17	; 0x05
    3a30:	0c 83       	std	Y+4, r16	; 0x04
    3a32:	b7 01       	movw	r22, r14
    3a34:	88 81       	ld	r24, Y
    3a36:	99 81       	ldd	r25, Y+1	; 0x01
    3a38:	0e 94 db 22 	call	0x45b6	; 0x45b6 <strcpy>
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	08 95       	ret

00003a4c <_ZN6StringC1EPKc>:
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	11 82       	std	Z+1, r1	; 0x01
    3a50:	10 82       	st	Z, r1
    3a52:	13 82       	std	Z+3, r1	; 0x03
    3a54:	12 82       	std	Z+2, r1	; 0x02
    3a56:	15 82       	std	Z+5, r1	; 0x05
    3a58:	14 82       	std	Z+4, r1	; 0x04
    3a5a:	61 15       	cp	r22, r1
    3a5c:	71 05       	cpc	r23, r1
    3a5e:	51 f0       	breq	.+20     	; 0x3a74 <_ZN6StringC1EPKc+0x28>
    3a60:	fb 01       	movw	r30, r22
    3a62:	01 90       	ld	r0, Z+
    3a64:	00 20       	and	r0, r0
    3a66:	e9 f7       	brne	.-6      	; 0x3a62 <_ZN6StringC1EPKc+0x16>
    3a68:	31 97       	sbiw	r30, 0x01	; 1
    3a6a:	af 01       	movw	r20, r30
    3a6c:	46 1b       	sub	r20, r22
    3a6e:	57 0b       	sbc	r21, r23
    3a70:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <_ZN6String4copyEPKcj>
    3a74:	08 95       	ret

00003a76 <_ZN6StringaSERKS_>:
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	ec 01       	movw	r28, r24
    3a7c:	fb 01       	movw	r30, r22
    3a7e:	86 17       	cp	r24, r22
    3a80:	97 07       	cpc	r25, r23
    3a82:	61 f0       	breq	.+24     	; 0x3a9c <_ZN6StringaSERKS_+0x26>
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	61 15       	cp	r22, r1
    3a8a:	71 05       	cpc	r23, r1
    3a8c:	29 f0       	breq	.+10     	; 0x3a98 <_ZN6StringaSERKS_+0x22>
    3a8e:	44 81       	ldd	r20, Z+4	; 0x04
    3a90:	55 81       	ldd	r21, Z+5	; 0x05
    3a92:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <_ZN6String4copyEPKcj>
    3a96:	02 c0       	rjmp	.+4      	; 0x3a9c <_ZN6StringaSERKS_+0x26>
    3a98:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6String10invalidateEv>
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	08 95       	ret

00003aa4 <_ZN6StringC1ERKS_>:
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	11 82       	std	Z+1, r1	; 0x01
    3aa8:	10 82       	st	Z, r1
    3aaa:	13 82       	std	Z+3, r1	; 0x03
    3aac:	12 82       	std	Z+2, r1	; 0x02
    3aae:	15 82       	std	Z+5, r1	; 0x05
    3ab0:	14 82       	std	Z+4, r1	; 0x04
    3ab2:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <_ZN6StringaSERKS_>

00003ab6 <_ZN6String6concatEPKcj>:
    3ab6:	ef 92       	push	r14
    3ab8:	ff 92       	push	r15
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	61 15       	cp	r22, r1
    3ac4:	71 05       	cpc	r23, r1
    3ac6:	11 f4       	brne	.+4      	; 0x3acc <_ZN6String6concatEPKcj+0x16>
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	1c c0       	rjmp	.+56     	; 0x3b04 <_ZN6String6concatEPKcj+0x4e>
    3acc:	41 15       	cp	r20, r1
    3ace:	51 05       	cpc	r21, r1
    3ad0:	c1 f0       	breq	.+48     	; 0x3b02 <_ZN6String6concatEPKcj+0x4c>
    3ad2:	7b 01       	movw	r14, r22
    3ad4:	ec 01       	movw	r28, r24
    3ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    3ada:	8a 01       	movw	r16, r20
    3adc:	08 0f       	add	r16, r24
    3ade:	19 1f       	adc	r17, r25
    3ae0:	b8 01       	movw	r22, r16
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <_ZN6String7reserveEj>
    3ae8:	88 23       	and	r24, r24
    3aea:	71 f3       	breq	.-36     	; 0x3ac8 <_ZN6String6concatEPKcj+0x12>
    3aec:	28 81       	ld	r18, Y
    3aee:	39 81       	ldd	r19, Y+1	; 0x01
    3af0:	8c 81       	ldd	r24, Y+4	; 0x04
    3af2:	9d 81       	ldd	r25, Y+5	; 0x05
    3af4:	b7 01       	movw	r22, r14
    3af6:	82 0f       	add	r24, r18
    3af8:	93 1f       	adc	r25, r19
    3afa:	0e 94 db 22 	call	0x45b6	; 0x45b6 <strcpy>
    3afe:	1d 83       	std	Y+5, r17	; 0x05
    3b00:	0c 83       	std	Y+4, r16	; 0x04
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	08 95       	ret

00003b12 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <_ZN6String6concatEh+0xe>
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <_ZN6String6concatEh+0x10>
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	7c 01       	movw	r14, r24
    3b28:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3b2a:	4a e0       	ldi	r20, 0x0A	; 10
    3b2c:	8e 01       	movw	r16, r28
    3b2e:	0f 5f       	subi	r16, 0xFF	; 255
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
    3b32:	b8 01       	movw	r22, r16
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	01 90       	ld	r0, Z+
    3b3e:	00 20       	and	r0, r0
    3b40:	e9 f7       	brne	.-6      	; 0x3b3c <_ZN6String6concatEh+0x2a>
    3b42:	31 97       	sbiw	r30, 0x01	; 1
    3b44:	af 01       	movw	r20, r30
    3b46:	40 1b       	sub	r20, r16
    3b48:	51 0b       	sbc	r21, r17
    3b4a:	b8 01       	movw	r22, r16
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <_ZN6String6concatEPKcj>
}
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	08 95       	ret

00003b68 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3b68:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3b6c:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3b70:	28 17       	cp	r18, r24
    3b72:	39 07       	cpc	r19, r25
    3b74:	b9 f4       	brne	.+46     	; 0x3ba4 <_ZN14SoftwareSerial4readEv+0x3c>
    3b76:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b7a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3b7e:	98 17       	cp	r25, r24
    3b80:	89 f0       	breq	.+34     	; 0x3ba4 <_ZN14SoftwareSerial4readEv+0x3c>
    3b82:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	ed 59       	subi	r30, 0x9D	; 157
    3b8a:	fb 4f       	sbci	r31, 0xFB	; 251
    3b8c:	80 81       	ld	r24, Z
    3b8e:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	2f 5f       	subi	r18, 0xFF	; 255
    3b96:	3f 4f       	sbci	r19, 0xFF	; 255
    3b98:	2f 73       	andi	r18, 0x3F	; 63
    3b9a:	33 27       	eor	r19, r19
    3b9c:	20 93 61 04 	sts	0x0461, r18	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	08 95       	ret
    3ba4:	8f ef       	ldi	r24, 0xFF	; 255
    3ba6:	9f ef       	ldi	r25, 0xFF	; 255
    3ba8:	08 95       	ret

00003baa <_ZN14SoftwareSerial5writeEh>:
    3baa:	1f 93       	push	r17
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	5c 96       	adiw	r26, 0x1c	; 28
    3bb4:	8d 91       	ld	r24, X+
    3bb6:	9c 91       	ld	r25, X
    3bb8:	5d 97       	sbiw	r26, 0x1d	; 29
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	39 f4       	brne	.+14     	; 0x3bcc <_ZN14SoftwareSerial5writeEh+0x22>
    3bbe:	21 e0       	ldi	r18, 0x01	; 1
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	13 96       	adiw	r26, 0x03	; 3
    3bc4:	3c 93       	st	X, r19
    3bc6:	2e 93       	st	-X, r18
    3bc8:	12 97       	sbiw	r26, 0x02	; 2
    3bca:	3b c0       	rjmp	.+118    	; 0x3c42 <_ZN14SoftwareSerial5writeEh+0x98>
    3bcc:	51 96       	adiw	r26, 0x11	; 17
    3bce:	ed 91       	ld	r30, X+
    3bd0:	fc 91       	ld	r31, X
    3bd2:	52 97       	sbiw	r26, 0x12	; 18
    3bd4:	50 96       	adiw	r26, 0x10	; 16
    3bd6:	2c 91       	ld	r18, X
    3bd8:	50 97       	sbiw	r26, 0x10	; 16
    3bda:	32 2f       	mov	r19, r18
    3bdc:	30 95       	com	r19
    3bde:	1f b7       	in	r17, 0x3f	; 63
    3be0:	5e 96       	adiw	r26, 0x1e	; 30
    3be2:	4c 91       	ld	r20, X
    3be4:	5e 97       	sbiw	r26, 0x1e	; 30
    3be6:	74 2f       	mov	r23, r20
    3be8:	72 70       	andi	r23, 0x02	; 2
    3bea:	41 fd       	sbrc	r20, 1
    3bec:	60 95       	com	r22
    3bee:	f8 94       	cli
    3bf0:	40 81       	ld	r20, Z
    3bf2:	77 23       	and	r23, r23
    3bf4:	11 f0       	breq	.+4      	; 0x3bfa <_ZN14SoftwareSerial5writeEh+0x50>
    3bf6:	42 2b       	or	r20, r18
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <_ZN14SoftwareSerial5writeEh+0x52>
    3bfa:	43 23       	and	r20, r19
    3bfc:	40 83       	st	Z, r20
    3bfe:	ec 01       	movw	r28, r24
    3c00:	21 97       	sbiw	r28, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <_ZN14SoftwareSerial5writeEh+0x56>
    3c04:	48 e0       	ldi	r20, 0x08	; 8
    3c06:	50 81       	ld	r21, Z
    3c08:	60 ff       	sbrs	r22, 0
    3c0a:	02 c0       	rjmp	.+4      	; 0x3c10 <_ZN14SoftwareSerial5writeEh+0x66>
    3c0c:	52 2b       	or	r21, r18
    3c0e:	01 c0       	rjmp	.+2      	; 0x3c12 <_ZN14SoftwareSerial5writeEh+0x68>
    3c10:	53 23       	and	r21, r19
    3c12:	50 83       	st	Z, r21
    3c14:	ec 01       	movw	r28, r24
    3c16:	21 97       	sbiw	r28, 0x01	; 1
    3c18:	f1 f7       	brne	.-4      	; 0x3c16 <_ZN14SoftwareSerial5writeEh+0x6c>
    3c1a:	66 95       	lsr	r22
    3c1c:	41 50       	subi	r20, 0x01	; 1
    3c1e:	99 f7       	brne	.-26     	; 0x3c06 <_ZN14SoftwareSerial5writeEh+0x5c>
    3c20:	80 81       	ld	r24, Z
    3c22:	77 23       	and	r23, r23
    3c24:	19 f0       	breq	.+6      	; 0x3c2c <_ZN14SoftwareSerial5writeEh+0x82>
    3c26:	83 23       	and	r24, r19
    3c28:	80 83       	st	Z, r24
    3c2a:	02 c0       	rjmp	.+4      	; 0x3c30 <_ZN14SoftwareSerial5writeEh+0x86>
    3c2c:	28 2b       	or	r18, r24
    3c2e:	20 83       	st	Z, r18
    3c30:	1f bf       	out	0x3f, r17	; 63
    3c32:	5c 96       	adiw	r26, 0x1c	; 28
    3c34:	8d 91       	ld	r24, X+
    3c36:	9c 91       	ld	r25, X
    3c38:	5d 97       	sbiw	r26, 0x1d	; 29
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	f1 f7       	brne	.-4      	; 0x3c3a <_ZN14SoftwareSerial5writeEh+0x90>
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	08 95       	ret

00003c4a <_ZN14SoftwareSerial5flushEv>:
    3c4a:	08 95       	ret

00003c4c <_ZN14SoftwareSerial4peekEv>:
    3c4c:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3c50:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3c54:	28 17       	cp	r18, r24
    3c56:	39 07       	cpc	r19, r25
    3c58:	71 f4       	brne	.+28     	; 0x3c76 <_ZN14SoftwareSerial4peekEv+0x2a>
    3c5a:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c5e:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c62:	98 17       	cp	r25, r24
    3c64:	41 f0       	breq	.+16     	; 0x3c76 <_ZN14SoftwareSerial4peekEv+0x2a>
    3c66:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	ed 59       	subi	r30, 0x9D	; 157
    3c6e:	fb 4f       	sbci	r31, 0xFB	; 251
    3c70:	80 81       	ld	r24, Z
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	08 95       	ret
    3c76:	8f ef       	ldi	r24, 0xFF	; 255
    3c78:	9f ef       	ldi	r25, 0xFF	; 255
    3c7a:	08 95       	ret

00003c7c <_ZN14SoftwareSerial9availableEv>:
    3c7c:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3c80:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3c84:	28 17       	cp	r18, r24
    3c86:	39 07       	cpc	r19, r25
    3c88:	71 f4       	brne	.+28     	; 0x3ca6 <_ZN14SoftwareSerial9availableEv+0x2a>
    3c8a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c8e:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	80 5c       	subi	r24, 0xC0	; 192
    3c96:	9f 4f       	sbci	r25, 0xFF	; 255
    3c98:	82 1b       	sub	r24, r18
    3c9a:	91 09       	sbc	r25, r1
    3c9c:	60 e4       	ldi	r22, 0x40	; 64
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	0e 94 3b 20 	call	0x4076	; 0x4076 <__divmodhi4>
    3ca4:	08 95       	ret
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	08 95       	ret

00003cac <_ZN14SoftwareSerial13stopListeningEv>:
    3cac:	e0 91 a3 04 	lds	r30, 0x04A3	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3cb0:	f0 91 a4 04 	lds	r31, 0x04A4	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3cb4:	e8 17       	cp	r30, r24
    3cb6:	f9 07       	cpc	r31, r25
    3cb8:	69 f4       	brne	.+26     	; 0x3cd4 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3cba:	a3 89       	ldd	r26, Z+19	; 0x13
    3cbc:	b4 89       	ldd	r27, Z+20	; 0x14
    3cbe:	9c 91       	ld	r25, X
    3cc0:	85 89       	ldd	r24, Z+21	; 0x15
    3cc2:	80 95       	com	r24
    3cc4:	89 23       	and	r24, r25
    3cc6:	8c 93       	st	X, r24
    3cc8:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ccc:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	08 95       	ret
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	08 95       	ret

00003cd8 <_ZN14SoftwareSerial6listenEv>:
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	ec 01       	movw	r28, r24
    3cde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ce0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ce2:	89 2b       	or	r24, r25
    3ce4:	f1 f0       	breq	.+60     	; 0x3d22 <_ZN14SoftwareSerial6listenEv+0x4a>
    3ce6:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3cea:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3cee:	c8 17       	cp	r28, r24
    3cf0:	d9 07       	cpc	r29, r25
    3cf2:	b9 f0       	breq	.+46     	; 0x3d22 <_ZN14SoftwareSerial6listenEv+0x4a>
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	11 f0       	breq	.+4      	; 0x3cfc <_ZN14SoftwareSerial6listenEv+0x24>
    3cf8:	0e 94 56 1e 	call	0x3cac	; 0x3cac <_ZN14SoftwareSerial13stopListeningEv>
    3cfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cfe:	8e 7f       	andi	r24, 0xFE	; 254
    3d00:	8e 8f       	std	Y+30, r24	; 0x1e
    3d02:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d06:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d0a:	d0 93 a4 04 	sts	0x04A4, r29	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d0e:	c0 93 a3 04 	sts	0x04A3, r28	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3d12:	eb 89       	ldd	r30, Y+19	; 0x13
    3d14:	fc 89       	ldd	r31, Y+20	; 0x14
    3d16:	90 81       	ld	r25, Z
    3d18:	8d 89       	ldd	r24, Y+21	; 0x15
    3d1a:	89 2b       	or	r24, r25
    3d1c:	80 83       	st	Z, r24
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	01 c0       	rjmp	.+2      	; 0x3d24 <_ZN14SoftwareSerial6listenEv+0x4c>
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	08 95       	ret

00003d2a <__vector_3>:
    3d2a:	1f 92       	push	r1
    3d2c:	0f 92       	push	r0
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	0f 92       	push	r0
    3d32:	11 24       	eor	r1, r1
    3d34:	2f 93       	push	r18
    3d36:	3f 93       	push	r19
    3d38:	4f 93       	push	r20
    3d3a:	5f 93       	push	r21
    3d3c:	6f 93       	push	r22
    3d3e:	7f 93       	push	r23
    3d40:	8f 93       	push	r24
    3d42:	9f 93       	push	r25
    3d44:	af 93       	push	r26
    3d46:	bf 93       	push	r27
    3d48:	ef 93       	push	r30
    3d4a:	ff 93       	push	r31
    3d4c:	e0 91 a3 04 	lds	r30, 0x04A3	; 0x8004a3 <_ZN14SoftwareSerial13active_objectE>
    3d50:	f0 91 a4 04 	lds	r31, 0x04A4	; 0x8004a4 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d54:	30 97       	sbiw	r30, 0x00	; 0
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <__vector_3+0x30>
    3d58:	51 c0       	rjmp	.+162    	; 0x3dfc <__vector_3+0xd2>
    3d5a:	96 8d       	ldd	r25, Z+30	; 0x1e
    3d5c:	a6 85       	ldd	r26, Z+14	; 0x0e
    3d5e:	b7 85       	ldd	r27, Z+15	; 0x0f
    3d60:	85 85       	ldd	r24, Z+13	; 0x0d
    3d62:	91 ff       	sbrs	r25, 1
    3d64:	04 c0       	rjmp	.+8      	; 0x3d6e <__vector_3+0x44>
    3d66:	9c 91       	ld	r25, X
    3d68:	89 23       	and	r24, r25
    3d6a:	29 f4       	brne	.+10     	; 0x3d76 <__vector_3+0x4c>
    3d6c:	47 c0       	rjmp	.+142    	; 0x3dfc <__vector_3+0xd2>
    3d6e:	9c 91       	ld	r25, X
    3d70:	89 23       	and	r24, r25
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <__vector_3+0x4c>
    3d74:	43 c0       	rjmp	.+134    	; 0x3dfc <__vector_3+0xd2>
    3d76:	a3 89       	ldd	r26, Z+19	; 0x13
    3d78:	b4 89       	ldd	r27, Z+20	; 0x14
    3d7a:	9c 91       	ld	r25, X
    3d7c:	85 89       	ldd	r24, Z+21	; 0x15
    3d7e:	80 95       	com	r24
    3d80:	89 23       	and	r24, r25
    3d82:	8c 93       	st	X, r24
    3d84:	86 89       	ldd	r24, Z+22	; 0x16
    3d86:	97 89       	ldd	r25, Z+23	; 0x17
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <__vector_3+0x5e>
    3d8c:	60 8d       	ldd	r22, Z+24	; 0x18
    3d8e:	71 8d       	ldd	r23, Z+25	; 0x19
    3d90:	a6 85       	ldd	r26, Z+14	; 0x0e
    3d92:	b7 85       	ldd	r27, Z+15	; 0x0f
    3d94:	55 85       	ldd	r21, Z+13	; 0x0d
    3d96:	38 e0       	ldi	r19, 0x08	; 8
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	01 97       	sbiw	r24, 0x01	; 1
    3d9e:	f1 f7       	brne	.-4      	; 0x3d9c <__vector_3+0x72>
    3da0:	82 2f       	mov	r24, r18
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	95 95       	asr	r25
    3da6:	87 95       	ror	r24
    3da8:	28 2f       	mov	r18, r24
    3daa:	4c 91       	ld	r20, X
    3dac:	45 23       	and	r20, r21
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <__vector_3+0x88>
    3db0:	20 68       	ori	r18, 0x80	; 128
    3db2:	31 50       	subi	r19, 0x01	; 1
    3db4:	91 f7       	brne	.-28     	; 0x3d9a <__vector_3+0x70>
    3db6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3db8:	81 fd       	sbrc	r24, 1
    3dba:	20 95       	com	r18
    3dbc:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	01 96       	adiw	r24, 0x01	; 1
    3dc4:	8f 73       	andi	r24, 0x3F	; 63
    3dc6:	99 27       	eor	r25, r25
    3dc8:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3dcc:	38 17       	cp	r19, r24
    3dce:	49 f0       	breq	.+18     	; 0x3de2 <__vector_3+0xb8>
    3dd0:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	ad 59       	subi	r26, 0x9D	; 157
    3dd8:	bb 4f       	sbci	r27, 0xFB	; 251
    3dda:	2c 93       	st	X, r18
    3ddc:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3de0:	03 c0       	rjmp	.+6      	; 0x3de8 <__vector_3+0xbe>
    3de2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3de4:	81 60       	ori	r24, 0x01	; 1
    3de6:	86 8f       	std	Z+30, r24	; 0x1e
    3de8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dea:	93 8d       	ldd	r25, Z+27	; 0x1b
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <__vector_3+0xc2>
    3df0:	a3 89       	ldd	r26, Z+19	; 0x13
    3df2:	b4 89       	ldd	r27, Z+20	; 0x14
    3df4:	9c 91       	ld	r25, X
    3df6:	85 89       	ldd	r24, Z+21	; 0x15
    3df8:	89 2b       	or	r24, r25
    3dfa:	8c 93       	st	X, r24
    3dfc:	ff 91       	pop	r31
    3dfe:	ef 91       	pop	r30
    3e00:	bf 91       	pop	r27
    3e02:	af 91       	pop	r26
    3e04:	9f 91       	pop	r25
    3e06:	8f 91       	pop	r24
    3e08:	7f 91       	pop	r23
    3e0a:	6f 91       	pop	r22
    3e0c:	5f 91       	pop	r21
    3e0e:	4f 91       	pop	r20
    3e10:	3f 91       	pop	r19
    3e12:	2f 91       	pop	r18
    3e14:	0f 90       	pop	r0
    3e16:	0f be       	out	0x3f, r0	; 63
    3e18:	0f 90       	pop	r0
    3e1a:	1f 90       	pop	r1
    3e1c:	18 95       	reti

00003e1e <_ZN14SoftwareSerial5setTXEh>:
    3e1e:	1f 93       	push	r17
    3e20:	cf 93       	push	r28
    3e22:	df 93       	push	r29
    3e24:	ec 01       	movw	r28, r24
    3e26:	16 2f       	mov	r17, r22
    3e28:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3e2a:	66 95       	lsr	r22
    3e2c:	61 70       	andi	r22, 0x01	; 1
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	68 27       	eor	r22, r24
    3e32:	81 2f       	mov	r24, r17
    3e34:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
    3e38:	61 e0       	ldi	r22, 0x01	; 1
    3e3a:	81 2f       	mov	r24, r17
    3e3c:	0e 94 4d 1c 	call	0x389a	; 0x389a <pinMode>
    3e40:	81 2f       	mov	r24, r17
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	fc 01       	movw	r30, r24
    3e46:	e3 55       	subi	r30, 0x53	; 83
    3e48:	f9 4f       	sbci	r31, 0xF9	; 249
    3e4a:	e4 91       	lpm	r30, Z
    3e4c:	e8 8b       	std	Y+16, r30	; 0x10
    3e4e:	fc 01       	movw	r30, r24
    3e50:	ef 53       	subi	r30, 0x3F	; 63
    3e52:	f9 4f       	sbci	r31, 0xF9	; 249
    3e54:	e4 91       	lpm	r30, Z
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	ee 0f       	add	r30, r30
    3e5a:	ff 1f       	adc	r31, r31
    3e5c:	e1 52       	subi	r30, 0x21	; 33
    3e5e:	f9 4f       	sbci	r31, 0xF9	; 249
    3e60:	85 91       	lpm	r24, Z+
    3e62:	94 91       	lpm	r25, Z
    3e64:	9a 8b       	std	Y+18, r25	; 0x12
    3e66:	89 8b       	std	Y+17, r24	; 0x11
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	1f 91       	pop	r17
    3e6e:	08 95       	ret

00003e70 <_ZN14SoftwareSerial5setRXEh>:
    3e70:	1f 93       	push	r17
    3e72:	cf 93       	push	r28
    3e74:	df 93       	push	r29
    3e76:	ec 01       	movw	r28, r24
    3e78:	16 2f       	mov	r17, r22
    3e7a:	60 e0       	ldi	r22, 0x00	; 0
    3e7c:	81 2f       	mov	r24, r17
    3e7e:	0e 94 4d 1c 	call	0x389a	; 0x389a <pinMode>
    3e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e84:	81 fd       	sbrc	r24, 1
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <_ZN14SoftwareSerial5setRXEh+0x20>
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	81 2f       	mov	r24, r17
    3e8c:	0e 94 89 1c 	call	0x3912	; 0x3912 <digitalWrite>
    3e90:	1c 87       	std	Y+12, r17	; 0x0c
    3e92:	81 2f       	mov	r24, r17
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	fc 01       	movw	r30, r24
    3e98:	e3 55       	subi	r30, 0x53	; 83
    3e9a:	f9 4f       	sbci	r31, 0xF9	; 249
    3e9c:	e4 91       	lpm	r30, Z
    3e9e:	ed 87       	std	Y+13, r30	; 0x0d
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	ef 53       	subi	r30, 0x3F	; 63
    3ea4:	f9 4f       	sbci	r31, 0xF9	; 249
    3ea6:	e4 91       	lpm	r30, Z
    3ea8:	f0 e0       	ldi	r31, 0x00	; 0
    3eaa:	ee 0f       	add	r30, r30
    3eac:	ff 1f       	adc	r31, r31
    3eae:	eb 52       	subi	r30, 0x2B	; 43
    3eb0:	f9 4f       	sbci	r31, 0xF9	; 249
    3eb2:	85 91       	lpm	r24, Z+
    3eb4:	94 91       	lpm	r25, Z
    3eb6:	9f 87       	std	Y+15, r25	; 0x0f
    3eb8:	8e 87       	std	Y+14, r24	; 0x0e
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	08 95       	ret

00003ec2 <_ZN14SoftwareSerialC1Ehhb>:
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	ec 01       	movw	r28, r24
    3eca:	16 2f       	mov	r17, r22
    3ecc:	1b 82       	std	Y+3, r1	; 0x03
    3ece:	1a 82       	std	Y+2, r1	; 0x02
    3ed0:	88 ee       	ldi	r24, 0xE8	; 232
    3ed2:	93 e0       	ldi	r25, 0x03	; 3
    3ed4:	a0 e0       	ldi	r26, 0x00	; 0
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	8c 83       	std	Y+4, r24	; 0x04
    3eda:	9d 83       	std	Y+5, r25	; 0x05
    3edc:	ae 83       	std	Y+6, r26	; 0x06
    3ede:	bf 83       	std	Y+7, r27	; 0x07
    3ee0:	8d ea       	ldi	r24, 0xAD	; 173
    3ee2:	91 e0       	ldi	r25, 0x01	; 1
    3ee4:	99 83       	std	Y+1, r25	; 0x01
    3ee6:	88 83       	st	Y, r24
    3ee8:	1f 8a       	std	Y+23, r1	; 0x17
    3eea:	1e 8a       	std	Y+22, r1	; 0x16
    3eec:	19 8e       	std	Y+25, r1	; 0x19
    3eee:	18 8e       	std	Y+24, r1	; 0x18
    3ef0:	1b 8e       	std	Y+27, r1	; 0x1b
    3ef2:	1a 8e       	std	Y+26, r1	; 0x1a
    3ef4:	1d 8e       	std	Y+29, r1	; 0x1d
    3ef6:	1c 8e       	std	Y+28, r1	; 0x1c
    3ef8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3efa:	8e 7f       	andi	r24, 0xFE	; 254
    3efc:	20 fb       	bst	r18, 0
    3efe:	81 f9       	bld	r24, 1
    3f00:	8e 8f       	std	Y+30, r24	; 0x1e
    3f02:	64 2f       	mov	r22, r20
    3f04:	ce 01       	movw	r24, r28
    3f06:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <_ZN14SoftwareSerial5setTXEh>
    3f0a:	61 2f       	mov	r22, r17
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
    3f12:	1f 91       	pop	r17
    3f14:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <_ZN14SoftwareSerial5setRXEh>

00003f18 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	ec 01       	movw	r28, r24
    3f1e:	9a 01       	movw	r18, r20
    3f20:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3f22:	1b 8e       	std	Y+27, r1	; 0x1b
    3f24:	1a 8e       	std	Y+26, r1	; 0x1a
    3f26:	19 8e       	std	Y+25, r1	; 0x19
    3f28:	18 8e       	std	Y+24, r1	; 0x18
    3f2a:	1f 8a       	std	Y+23, r1	; 0x17
    3f2c:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	79 e0       	ldi	r23, 0x09	; 9
    3f32:	8d e3       	ldi	r24, 0x3D	; 61
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 71 20 	call	0x40e2	; 0x40e2 <__divmodsi4>
    3f3a:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3f3c:	24 30       	cpi	r18, 0x04	; 4
    3f3e:	31 05       	cpc	r19, r1
    3f40:	18 f0       	brcs	.+6      	; 0x3f48 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3f42:	c9 01       	movw	r24, r18
    3f44:	03 97       	sbiw	r24, 0x03	; 3
    3f46:	02 c0       	rjmp	.+4      	; 0x3f4c <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3f4c:	9d 8f       	std	Y+29, r25	; 0x1d
    3f4e:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3f50:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f52:	66 31       	cpi	r22, 0x16	; 22
    3f54:	08 f0       	brcs	.+2      	; 0x3f58 <_ZN14SoftwareSerial5beginEl+0x40>
    3f56:	69 c0       	rjmp	.+210    	; 0x402a <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3f58:	c9 01       	movw	r24, r18
    3f5a:	96 95       	lsr	r25
    3f5c:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3f5e:	84 31       	cpi	r24, 0x14	; 20
    3f60:	91 05       	cpc	r25, r1
    3f62:	10 f0       	brcs	.+4      	; 0x3f68 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3f64:	43 97       	sbiw	r24, 0x13	; 19
    3f66:	02 c0       	rjmp	.+4      	; 0x3f6c <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3f6c:	9f 8b       	std	Y+23, r25	; 0x17
    3f6e:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3f70:	36 97       	sbiw	r30, 0x06	; 6
    3f72:	18 f0       	brcs	.+6      	; 0x3f7a <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3f74:	c9 01       	movw	r24, r18
    3f76:	05 97       	sbiw	r24, 0x05	; 5
    3f78:	02 c0       	rjmp	.+4      	; 0x3f7e <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3f7e:	99 8f       	std	Y+25, r25	; 0x19
    3f80:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3f82:	c9 01       	movw	r24, r18
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	28 0f       	add	r18, r24
    3f8a:	39 1f       	adc	r19, r25
    3f8c:	36 95       	lsr	r19
    3f8e:	27 95       	ror	r18
    3f90:	36 95       	lsr	r19
    3f92:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3f94:	2d 30       	cpi	r18, 0x0D	; 13
    3f96:	31 05       	cpc	r19, r1
    3f98:	18 f0       	brcs	.+6      	; 0x3fa0 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3f9a:	2c 50       	subi	r18, 0x0C	; 12
    3f9c:	31 09       	sbc	r19, r1
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3fa0:	21 e0       	ldi	r18, 0x01	; 1
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3fa4:	3b 8f       	std	Y+27, r19	; 0x1b
    3fa6:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3fa8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3fac:	68 30       	cpi	r22, 0x08	; 8
    3fae:	50 f0       	brcs	.+20     	; 0x3fc4 <_ZN14SoftwareSerial5beginEl+0xac>
    3fb0:	21 e0       	ldi	r18, 0x01	; 1
    3fb2:	6e 30       	cpi	r22, 0x0E	; 14
    3fb4:	08 f4       	brcc	.+2      	; 0x3fb8 <_ZN14SoftwareSerial5beginEl+0xa0>
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	01 c0       	rjmp	.+2      	; 0x3fbe <_ZN14SoftwareSerial5beginEl+0xa6>
    3fbc:	88 0f       	add	r24, r24
    3fbe:	2a 95       	dec	r18
    3fc0:	ea f7       	brpl	.-6      	; 0x3fbc <_ZN14SoftwareSerial5beginEl+0xa4>
    3fc2:	01 c0       	rjmp	.+2      	; 0x3fc6 <_ZN14SoftwareSerial5beginEl+0xae>
    3fc4:	84 e0       	ldi	r24, 0x04	; 4
    3fc6:	89 2b       	or	r24, r25
    3fc8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    3fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fce:	98 30       	cpi	r25, 0x08	; 8
    3fd0:	38 f0       	brcs	.+14     	; 0x3fe0 <_ZN14SoftwareSerial5beginEl+0xc8>
    3fd2:	9e 30       	cpi	r25, 0x0E	; 14
    3fd4:	40 f0       	brcs	.+16     	; 0x3fe6 <_ZN14SoftwareSerial5beginEl+0xce>
    3fd6:	96 31       	cpi	r25, 0x16	; 22
    3fd8:	48 f0       	brcs	.+18     	; 0x3fec <_ZN14SoftwareSerial5beginEl+0xd4>
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	08 c0       	rjmp	.+16     	; 0x3ff0 <_ZN14SoftwareSerial5beginEl+0xd8>
    3fe0:	2d e6       	ldi	r18, 0x6D	; 109
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	05 c0       	rjmp	.+10     	; 0x3ff0 <_ZN14SoftwareSerial5beginEl+0xd8>
    3fe6:	2b e6       	ldi	r18, 0x6B	; 107
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <_ZN14SoftwareSerial5beginEl+0xd8>
    3fec:	2c e6       	ldi	r18, 0x6C	; 108
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	3c 8b       	std	Y+20, r19	; 0x14
    3ff2:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3ff4:	98 30       	cpi	r25, 0x08	; 8
    3ff6:	30 f4       	brcc	.+12     	; 0x4004 <_ZN14SoftwareSerial5beginEl+0xec>
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	01 c0       	rjmp	.+2      	; 0x3ffe <_ZN14SoftwareSerial5beginEl+0xe6>
    3ffc:	88 0f       	add	r24, r24
    3ffe:	9a 95       	dec	r25
    4000:	ea f7       	brpl	.-6      	; 0x3ffc <_ZN14SoftwareSerial5beginEl+0xe4>
    4002:	0e c0       	rjmp	.+28     	; 0x4020 <_ZN14SoftwareSerial5beginEl+0x108>
    4004:	29 2f       	mov	r18, r25
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	9e 30       	cpi	r25, 0x0E	; 14
    400a:	18 f4       	brcc	.+6      	; 0x4012 <_ZN14SoftwareSerial5beginEl+0xfa>
    400c:	28 50       	subi	r18, 0x08	; 8
    400e:	31 09       	sbc	r19, r1
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <_ZN14SoftwareSerial5beginEl+0xfe>
    4012:	2e 50       	subi	r18, 0x0E	; 14
    4014:	31 09       	sbc	r19, r1
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	01 c0       	rjmp	.+2      	; 0x401c <_ZN14SoftwareSerial5beginEl+0x104>
    401a:	88 0f       	add	r24, r24
    401c:	2a 95       	dec	r18
    401e:	ea f7       	brpl	.-6      	; 0x401a <_ZN14SoftwareSerial5beginEl+0x102>
    4020:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4022:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4024:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f1 f7       	brne	.-4      	; 0x4026 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    402a:	ce 01       	movw	r24, r28
}
    402c:	df 91       	pop	r29
    402e:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4030:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <_ZN14SoftwareSerial6listenEv>

00004034 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4034:	08 95       	ret

00004036 <__udivmodqi4>:
    4036:	99 1b       	sub	r25, r25
    4038:	79 e0       	ldi	r23, 0x09	; 9
    403a:	04 c0       	rjmp	.+8      	; 0x4044 <__udivmodqi4_ep>

0000403c <__udivmodqi4_loop>:
    403c:	99 1f       	adc	r25, r25
    403e:	96 17       	cp	r25, r22
    4040:	08 f0       	brcs	.+2      	; 0x4044 <__udivmodqi4_ep>
    4042:	96 1b       	sub	r25, r22

00004044 <__udivmodqi4_ep>:
    4044:	88 1f       	adc	r24, r24
    4046:	7a 95       	dec	r23
    4048:	c9 f7       	brne	.-14     	; 0x403c <__udivmodqi4_loop>
    404a:	80 95       	com	r24
    404c:	08 95       	ret

0000404e <__udivmodhi4>:
    404e:	aa 1b       	sub	r26, r26
    4050:	bb 1b       	sub	r27, r27
    4052:	51 e1       	ldi	r21, 0x11	; 17
    4054:	07 c0       	rjmp	.+14     	; 0x4064 <__udivmodhi4_ep>

00004056 <__udivmodhi4_loop>:
    4056:	aa 1f       	adc	r26, r26
    4058:	bb 1f       	adc	r27, r27
    405a:	a6 17       	cp	r26, r22
    405c:	b7 07       	cpc	r27, r23
    405e:	10 f0       	brcs	.+4      	; 0x4064 <__udivmodhi4_ep>
    4060:	a6 1b       	sub	r26, r22
    4062:	b7 0b       	sbc	r27, r23

00004064 <__udivmodhi4_ep>:
    4064:	88 1f       	adc	r24, r24
    4066:	99 1f       	adc	r25, r25
    4068:	5a 95       	dec	r21
    406a:	a9 f7       	brne	.-22     	; 0x4056 <__udivmodhi4_loop>
    406c:	80 95       	com	r24
    406e:	90 95       	com	r25
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	08 95       	ret

00004076 <__divmodhi4>:
    4076:	97 fb       	bst	r25, 7
    4078:	07 2e       	mov	r0, r23
    407a:	16 f4       	brtc	.+4      	; 0x4080 <__divmodhi4+0xa>
    407c:	00 94       	com	r0
    407e:	07 d0       	rcall	.+14     	; 0x408e <__divmodhi4_neg1>
    4080:	77 fd       	sbrc	r23, 7
    4082:	09 d0       	rcall	.+18     	; 0x4096 <__divmodhi4_neg2>
    4084:	0e 94 27 20 	call	0x404e	; 0x404e <__udivmodhi4>
    4088:	07 fc       	sbrc	r0, 7
    408a:	05 d0       	rcall	.+10     	; 0x4096 <__divmodhi4_neg2>
    408c:	3e f4       	brtc	.+14     	; 0x409c <__divmodhi4_exit>

0000408e <__divmodhi4_neg1>:
    408e:	90 95       	com	r25
    4090:	81 95       	neg	r24
    4092:	9f 4f       	sbci	r25, 0xFF	; 255
    4094:	08 95       	ret

00004096 <__divmodhi4_neg2>:
    4096:	70 95       	com	r23
    4098:	61 95       	neg	r22
    409a:	7f 4f       	sbci	r23, 0xFF	; 255

0000409c <__divmodhi4_exit>:
    409c:	08 95       	ret

0000409e <__udivmodsi4>:
    409e:	a1 e2       	ldi	r26, 0x21	; 33
    40a0:	1a 2e       	mov	r1, r26
    40a2:	aa 1b       	sub	r26, r26
    40a4:	bb 1b       	sub	r27, r27
    40a6:	fd 01       	movw	r30, r26
    40a8:	0d c0       	rjmp	.+26     	; 0x40c4 <__udivmodsi4_ep>

000040aa <__udivmodsi4_loop>:
    40aa:	aa 1f       	adc	r26, r26
    40ac:	bb 1f       	adc	r27, r27
    40ae:	ee 1f       	adc	r30, r30
    40b0:	ff 1f       	adc	r31, r31
    40b2:	a2 17       	cp	r26, r18
    40b4:	b3 07       	cpc	r27, r19
    40b6:	e4 07       	cpc	r30, r20
    40b8:	f5 07       	cpc	r31, r21
    40ba:	20 f0       	brcs	.+8      	; 0x40c4 <__udivmodsi4_ep>
    40bc:	a2 1b       	sub	r26, r18
    40be:	b3 0b       	sbc	r27, r19
    40c0:	e4 0b       	sbc	r30, r20
    40c2:	f5 0b       	sbc	r31, r21

000040c4 <__udivmodsi4_ep>:
    40c4:	66 1f       	adc	r22, r22
    40c6:	77 1f       	adc	r23, r23
    40c8:	88 1f       	adc	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	1a 94       	dec	r1
    40ce:	69 f7       	brne	.-38     	; 0x40aa <__udivmodsi4_loop>
    40d0:	60 95       	com	r22
    40d2:	70 95       	com	r23
    40d4:	80 95       	com	r24
    40d6:	90 95       	com	r25
    40d8:	9b 01       	movw	r18, r22
    40da:	ac 01       	movw	r20, r24
    40dc:	bd 01       	movw	r22, r26
    40de:	cf 01       	movw	r24, r30
    40e0:	08 95       	ret

000040e2 <__divmodsi4>:
    40e2:	05 2e       	mov	r0, r21
    40e4:	97 fb       	bst	r25, 7
    40e6:	1e f4       	brtc	.+6      	; 0x40ee <__divmodsi4+0xc>
    40e8:	00 94       	com	r0
    40ea:	0e 94 88 20 	call	0x4110	; 0x4110 <__negsi2>
    40ee:	57 fd       	sbrc	r21, 7
    40f0:	07 d0       	rcall	.+14     	; 0x4100 <__divmodsi4_neg2>
    40f2:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodsi4>
    40f6:	07 fc       	sbrc	r0, 7
    40f8:	03 d0       	rcall	.+6      	; 0x4100 <__divmodsi4_neg2>
    40fa:	4e f4       	brtc	.+18     	; 0x410e <__divmodsi4_exit>
    40fc:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__negsi2>

00004100 <__divmodsi4_neg2>:
    4100:	50 95       	com	r21
    4102:	40 95       	com	r20
    4104:	30 95       	com	r19
    4106:	21 95       	neg	r18
    4108:	3f 4f       	sbci	r19, 0xFF	; 255
    410a:	4f 4f       	sbci	r20, 0xFF	; 255
    410c:	5f 4f       	sbci	r21, 0xFF	; 255

0000410e <__divmodsi4_exit>:
    410e:	08 95       	ret

00004110 <__negsi2>:
    4110:	90 95       	com	r25
    4112:	80 95       	com	r24
    4114:	70 95       	com	r23
    4116:	61 95       	neg	r22
    4118:	7f 4f       	sbci	r23, 0xFF	; 255
    411a:	8f 4f       	sbci	r24, 0xFF	; 255
    411c:	9f 4f       	sbci	r25, 0xFF	; 255
    411e:	08 95       	ret

00004120 <__tablejump2__>:
    4120:	ee 0f       	add	r30, r30
    4122:	ff 1f       	adc	r31, r31
    4124:	05 90       	lpm	r0, Z+
    4126:	f4 91       	lpm	r31, Z
    4128:	e0 2d       	mov	r30, r0
    412a:	09 94       	ijmp

0000412c <malloc>:
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	82 30       	cpi	r24, 0x02	; 2
    4136:	91 05       	cpc	r25, r1
    4138:	10 f4       	brcc	.+4      	; 0x413e <malloc+0x12>
    413a:	82 e0       	ldi	r24, 0x02	; 2
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <__flp>
    4142:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <__flp+0x1>
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	a0 e0       	ldi	r26, 0x00	; 0
    414c:	b0 e0       	ldi	r27, 0x00	; 0
    414e:	30 97       	sbiw	r30, 0x00	; 0
    4150:	19 f1       	breq	.+70     	; 0x4198 <malloc+0x6c>
    4152:	40 81       	ld	r20, Z
    4154:	51 81       	ldd	r21, Z+1	; 0x01
    4156:	02 81       	ldd	r16, Z+2	; 0x02
    4158:	13 81       	ldd	r17, Z+3	; 0x03
    415a:	48 17       	cp	r20, r24
    415c:	59 07       	cpc	r21, r25
    415e:	c8 f0       	brcs	.+50     	; 0x4192 <malloc+0x66>
    4160:	84 17       	cp	r24, r20
    4162:	95 07       	cpc	r25, r21
    4164:	69 f4       	brne	.+26     	; 0x4180 <malloc+0x54>
    4166:	10 97       	sbiw	r26, 0x00	; 0
    4168:	31 f0       	breq	.+12     	; 0x4176 <malloc+0x4a>
    416a:	12 96       	adiw	r26, 0x02	; 2
    416c:	0c 93       	st	X, r16
    416e:	12 97       	sbiw	r26, 0x02	; 2
    4170:	13 96       	adiw	r26, 0x03	; 3
    4172:	1c 93       	st	X, r17
    4174:	27 c0       	rjmp	.+78     	; 0x41c4 <malloc+0x98>
    4176:	00 93 a7 04 	sts	0x04A7, r16	; 0x8004a7 <__flp>
    417a:	10 93 a8 04 	sts	0x04A8, r17	; 0x8004a8 <__flp+0x1>
    417e:	22 c0       	rjmp	.+68     	; 0x41c4 <malloc+0x98>
    4180:	21 15       	cp	r18, r1
    4182:	31 05       	cpc	r19, r1
    4184:	19 f0       	breq	.+6      	; 0x418c <malloc+0x60>
    4186:	42 17       	cp	r20, r18
    4188:	53 07       	cpc	r21, r19
    418a:	18 f4       	brcc	.+6      	; 0x4192 <malloc+0x66>
    418c:	9a 01       	movw	r18, r20
    418e:	bd 01       	movw	r22, r26
    4190:	ef 01       	movw	r28, r30
    4192:	df 01       	movw	r26, r30
    4194:	f8 01       	movw	r30, r16
    4196:	db cf       	rjmp	.-74     	; 0x414e <malloc+0x22>
    4198:	21 15       	cp	r18, r1
    419a:	31 05       	cpc	r19, r1
    419c:	f9 f0       	breq	.+62     	; 0x41dc <malloc+0xb0>
    419e:	28 1b       	sub	r18, r24
    41a0:	39 0b       	sbc	r19, r25
    41a2:	24 30       	cpi	r18, 0x04	; 4
    41a4:	31 05       	cpc	r19, r1
    41a6:	80 f4       	brcc	.+32     	; 0x41c8 <malloc+0x9c>
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	9b 81       	ldd	r25, Y+3	; 0x03
    41ac:	61 15       	cp	r22, r1
    41ae:	71 05       	cpc	r23, r1
    41b0:	21 f0       	breq	.+8      	; 0x41ba <malloc+0x8e>
    41b2:	fb 01       	movw	r30, r22
    41b4:	93 83       	std	Z+3, r25	; 0x03
    41b6:	82 83       	std	Z+2, r24	; 0x02
    41b8:	04 c0       	rjmp	.+8      	; 0x41c2 <malloc+0x96>
    41ba:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <__flp+0x1>
    41be:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__flp>
    41c2:	fe 01       	movw	r30, r28
    41c4:	32 96       	adiw	r30, 0x02	; 2
    41c6:	44 c0       	rjmp	.+136    	; 0x4250 <malloc+0x124>
    41c8:	fe 01       	movw	r30, r28
    41ca:	e2 0f       	add	r30, r18
    41cc:	f3 1f       	adc	r31, r19
    41ce:	81 93       	st	Z+, r24
    41d0:	91 93       	st	Z+, r25
    41d2:	22 50       	subi	r18, 0x02	; 2
    41d4:	31 09       	sbc	r19, r1
    41d6:	39 83       	std	Y+1, r19	; 0x01
    41d8:	28 83       	st	Y, r18
    41da:	3a c0       	rjmp	.+116    	; 0x4250 <malloc+0x124>
    41dc:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <__brkval>
    41e0:	30 91 a6 04 	lds	r19, 0x04A6	; 0x8004a6 <__brkval+0x1>
    41e4:	23 2b       	or	r18, r19
    41e6:	41 f4       	brne	.+16     	; 0x41f8 <malloc+0xcc>
    41e8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    41ec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    41f0:	30 93 a6 04 	sts	0x04A6, r19	; 0x8004a6 <__brkval+0x1>
    41f4:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__brkval>
    41f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    41fc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4200:	21 15       	cp	r18, r1
    4202:	31 05       	cpc	r19, r1
    4204:	41 f4       	brne	.+16     	; 0x4216 <malloc+0xea>
    4206:	2d b7       	in	r18, 0x3d	; 61
    4208:	3e b7       	in	r19, 0x3e	; 62
    420a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    420e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4212:	24 1b       	sub	r18, r20
    4214:	35 0b       	sbc	r19, r21
    4216:	e0 91 a5 04 	lds	r30, 0x04A5	; 0x8004a5 <__brkval>
    421a:	f0 91 a6 04 	lds	r31, 0x04A6	; 0x8004a6 <__brkval+0x1>
    421e:	e2 17       	cp	r30, r18
    4220:	f3 07       	cpc	r31, r19
    4222:	a0 f4       	brcc	.+40     	; 0x424c <malloc+0x120>
    4224:	2e 1b       	sub	r18, r30
    4226:	3f 0b       	sbc	r19, r31
    4228:	28 17       	cp	r18, r24
    422a:	39 07       	cpc	r19, r25
    422c:	78 f0       	brcs	.+30     	; 0x424c <malloc+0x120>
    422e:	ac 01       	movw	r20, r24
    4230:	4e 5f       	subi	r20, 0xFE	; 254
    4232:	5f 4f       	sbci	r21, 0xFF	; 255
    4234:	24 17       	cp	r18, r20
    4236:	35 07       	cpc	r19, r21
    4238:	48 f0       	brcs	.+18     	; 0x424c <malloc+0x120>
    423a:	4e 0f       	add	r20, r30
    423c:	5f 1f       	adc	r21, r31
    423e:	50 93 a6 04 	sts	0x04A6, r21	; 0x8004a6 <__brkval+0x1>
    4242:	40 93 a5 04 	sts	0x04A5, r20	; 0x8004a5 <__brkval>
    4246:	81 93       	st	Z+, r24
    4248:	91 93       	st	Z+, r25
    424a:	02 c0       	rjmp	.+4      	; 0x4250 <malloc+0x124>
    424c:	e0 e0       	ldi	r30, 0x00	; 0
    424e:	f0 e0       	ldi	r31, 0x00	; 0
    4250:	cf 01       	movw	r24, r30
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	08 95       	ret

0000425c <free>:
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	00 97       	sbiw	r24, 0x00	; 0
    4262:	09 f4       	brne	.+2      	; 0x4266 <free+0xa>
    4264:	81 c0       	rjmp	.+258    	; 0x4368 <free+0x10c>
    4266:	fc 01       	movw	r30, r24
    4268:	32 97       	sbiw	r30, 0x02	; 2
    426a:	13 82       	std	Z+3, r1	; 0x03
    426c:	12 82       	std	Z+2, r1	; 0x02
    426e:	a0 91 a7 04 	lds	r26, 0x04A7	; 0x8004a7 <__flp>
    4272:	b0 91 a8 04 	lds	r27, 0x04A8	; 0x8004a8 <__flp+0x1>
    4276:	10 97       	sbiw	r26, 0x00	; 0
    4278:	81 f4       	brne	.+32     	; 0x429a <free+0x3e>
    427a:	20 81       	ld	r18, Z
    427c:	31 81       	ldd	r19, Z+1	; 0x01
    427e:	82 0f       	add	r24, r18
    4280:	93 1f       	adc	r25, r19
    4282:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <__brkval>
    4286:	30 91 a6 04 	lds	r19, 0x04A6	; 0x8004a6 <__brkval+0x1>
    428a:	28 17       	cp	r18, r24
    428c:	39 07       	cpc	r19, r25
    428e:	51 f5       	brne	.+84     	; 0x42e4 <free+0x88>
    4290:	f0 93 a6 04 	sts	0x04A6, r31	; 0x8004a6 <__brkval+0x1>
    4294:	e0 93 a5 04 	sts	0x04A5, r30	; 0x8004a5 <__brkval>
    4298:	67 c0       	rjmp	.+206    	; 0x4368 <free+0x10c>
    429a:	ed 01       	movw	r28, r26
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	ce 17       	cp	r28, r30
    42a2:	df 07       	cpc	r29, r31
    42a4:	40 f4       	brcc	.+16     	; 0x42b6 <free+0x5a>
    42a6:	4a 81       	ldd	r20, Y+2	; 0x02
    42a8:	5b 81       	ldd	r21, Y+3	; 0x03
    42aa:	9e 01       	movw	r18, r28
    42ac:	41 15       	cp	r20, r1
    42ae:	51 05       	cpc	r21, r1
    42b0:	f1 f0       	breq	.+60     	; 0x42ee <free+0x92>
    42b2:	ea 01       	movw	r28, r20
    42b4:	f5 cf       	rjmp	.-22     	; 0x42a0 <free+0x44>
    42b6:	d3 83       	std	Z+3, r29	; 0x03
    42b8:	c2 83       	std	Z+2, r28	; 0x02
    42ba:	40 81       	ld	r20, Z
    42bc:	51 81       	ldd	r21, Z+1	; 0x01
    42be:	84 0f       	add	r24, r20
    42c0:	95 1f       	adc	r25, r21
    42c2:	c8 17       	cp	r28, r24
    42c4:	d9 07       	cpc	r29, r25
    42c6:	59 f4       	brne	.+22     	; 0x42de <free+0x82>
    42c8:	88 81       	ld	r24, Y
    42ca:	99 81       	ldd	r25, Y+1	; 0x01
    42cc:	84 0f       	add	r24, r20
    42ce:	95 1f       	adc	r25, r21
    42d0:	02 96       	adiw	r24, 0x02	; 2
    42d2:	91 83       	std	Z+1, r25	; 0x01
    42d4:	80 83       	st	Z, r24
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	9b 81       	ldd	r25, Y+3	; 0x03
    42da:	93 83       	std	Z+3, r25	; 0x03
    42dc:	82 83       	std	Z+2, r24	; 0x02
    42de:	21 15       	cp	r18, r1
    42e0:	31 05       	cpc	r19, r1
    42e2:	29 f4       	brne	.+10     	; 0x42ee <free+0x92>
    42e4:	f0 93 a8 04 	sts	0x04A8, r31	; 0x8004a8 <__flp+0x1>
    42e8:	e0 93 a7 04 	sts	0x04A7, r30	; 0x8004a7 <__flp>
    42ec:	3d c0       	rjmp	.+122    	; 0x4368 <free+0x10c>
    42ee:	e9 01       	movw	r28, r18
    42f0:	fb 83       	std	Y+3, r31	; 0x03
    42f2:	ea 83       	std	Y+2, r30	; 0x02
    42f4:	49 91       	ld	r20, Y+
    42f6:	59 91       	ld	r21, Y+
    42f8:	c4 0f       	add	r28, r20
    42fa:	d5 1f       	adc	r29, r21
    42fc:	ec 17       	cp	r30, r28
    42fe:	fd 07       	cpc	r31, r29
    4300:	61 f4       	brne	.+24     	; 0x431a <free+0xbe>
    4302:	80 81       	ld	r24, Z
    4304:	91 81       	ldd	r25, Z+1	; 0x01
    4306:	84 0f       	add	r24, r20
    4308:	95 1f       	adc	r25, r21
    430a:	02 96       	adiw	r24, 0x02	; 2
    430c:	e9 01       	movw	r28, r18
    430e:	99 83       	std	Y+1, r25	; 0x01
    4310:	88 83       	st	Y, r24
    4312:	82 81       	ldd	r24, Z+2	; 0x02
    4314:	93 81       	ldd	r25, Z+3	; 0x03
    4316:	9b 83       	std	Y+3, r25	; 0x03
    4318:	8a 83       	std	Y+2, r24	; 0x02
    431a:	e0 e0       	ldi	r30, 0x00	; 0
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	12 96       	adiw	r26, 0x02	; 2
    4320:	8d 91       	ld	r24, X+
    4322:	9c 91       	ld	r25, X
    4324:	13 97       	sbiw	r26, 0x03	; 3
    4326:	00 97       	sbiw	r24, 0x00	; 0
    4328:	19 f0       	breq	.+6      	; 0x4330 <free+0xd4>
    432a:	fd 01       	movw	r30, r26
    432c:	dc 01       	movw	r26, r24
    432e:	f7 cf       	rjmp	.-18     	; 0x431e <free+0xc2>
    4330:	8d 91       	ld	r24, X+
    4332:	9c 91       	ld	r25, X
    4334:	11 97       	sbiw	r26, 0x01	; 1
    4336:	9d 01       	movw	r18, r26
    4338:	2e 5f       	subi	r18, 0xFE	; 254
    433a:	3f 4f       	sbci	r19, 0xFF	; 255
    433c:	82 0f       	add	r24, r18
    433e:	93 1f       	adc	r25, r19
    4340:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <__brkval>
    4344:	30 91 a6 04 	lds	r19, 0x04A6	; 0x8004a6 <__brkval+0x1>
    4348:	28 17       	cp	r18, r24
    434a:	39 07       	cpc	r19, r25
    434c:	69 f4       	brne	.+26     	; 0x4368 <free+0x10c>
    434e:	30 97       	sbiw	r30, 0x00	; 0
    4350:	29 f4       	brne	.+10     	; 0x435c <free+0x100>
    4352:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <__flp+0x1>
    4356:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <__flp>
    435a:	02 c0       	rjmp	.+4      	; 0x4360 <free+0x104>
    435c:	13 82       	std	Z+3, r1	; 0x03
    435e:	12 82       	std	Z+2, r1	; 0x02
    4360:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <__brkval+0x1>
    4364:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <__brkval>
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	08 95       	ret

0000436e <realloc>:
    436e:	a0 e0       	ldi	r26, 0x00	; 0
    4370:	b0 e0       	ldi	r27, 0x00	; 0
    4372:	ed eb       	ldi	r30, 0xBD	; 189
    4374:	f1 e2       	ldi	r31, 0x21	; 33
    4376:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__prologue_saves__+0x8>
    437a:	ec 01       	movw	r28, r24
    437c:	00 97       	sbiw	r24, 0x00	; 0
    437e:	21 f4       	brne	.+8      	; 0x4388 <realloc+0x1a>
    4380:	cb 01       	movw	r24, r22
    4382:	0e 94 96 20 	call	0x412c	; 0x412c <malloc>
    4386:	b4 c0       	rjmp	.+360    	; 0x44f0 <realloc+0x182>
    4388:	fc 01       	movw	r30, r24
    438a:	e6 0f       	add	r30, r22
    438c:	f7 1f       	adc	r31, r23
    438e:	9c 01       	movw	r18, r24
    4390:	22 50       	subi	r18, 0x02	; 2
    4392:	31 09       	sbc	r19, r1
    4394:	e2 17       	cp	r30, r18
    4396:	f3 07       	cpc	r31, r19
    4398:	08 f4       	brcc	.+2      	; 0x439c <realloc+0x2e>
    439a:	a8 c0       	rjmp	.+336    	; 0x44ec <realloc+0x17e>
    439c:	d9 01       	movw	r26, r18
    439e:	0d 91       	ld	r16, X+
    43a0:	1c 91       	ld	r17, X
    43a2:	11 97       	sbiw	r26, 0x01	; 1
    43a4:	06 17       	cp	r16, r22
    43a6:	17 07       	cpc	r17, r23
    43a8:	b0 f0       	brcs	.+44     	; 0x43d6 <realloc+0x68>
    43aa:	05 30       	cpi	r16, 0x05	; 5
    43ac:	11 05       	cpc	r17, r1
    43ae:	08 f4       	brcc	.+2      	; 0x43b2 <realloc+0x44>
    43b0:	9b c0       	rjmp	.+310    	; 0x44e8 <realloc+0x17a>
    43b2:	c8 01       	movw	r24, r16
    43b4:	04 97       	sbiw	r24, 0x04	; 4
    43b6:	86 17       	cp	r24, r22
    43b8:	97 07       	cpc	r25, r23
    43ba:	08 f4       	brcc	.+2      	; 0x43be <realloc+0x50>
    43bc:	95 c0       	rjmp	.+298    	; 0x44e8 <realloc+0x17a>
    43be:	02 50       	subi	r16, 0x02	; 2
    43c0:	11 09       	sbc	r17, r1
    43c2:	06 1b       	sub	r16, r22
    43c4:	17 0b       	sbc	r17, r23
    43c6:	01 93       	st	Z+, r16
    43c8:	11 93       	st	Z+, r17
    43ca:	6d 93       	st	X+, r22
    43cc:	7c 93       	st	X, r23
    43ce:	cf 01       	movw	r24, r30
    43d0:	0e 94 2e 21 	call	0x425c	; 0x425c <free>
    43d4:	89 c0       	rjmp	.+274    	; 0x44e8 <realloc+0x17a>
    43d6:	5b 01       	movw	r10, r22
    43d8:	a0 1a       	sub	r10, r16
    43da:	b1 0a       	sbc	r11, r17
    43dc:	4c 01       	movw	r8, r24
    43de:	80 0e       	add	r8, r16
    43e0:	91 1e       	adc	r9, r17
    43e2:	a0 91 a7 04 	lds	r26, 0x04A7	; 0x8004a7 <__flp>
    43e6:	b0 91 a8 04 	lds	r27, 0x04A8	; 0x8004a8 <__flp+0x1>
    43ea:	61 2c       	mov	r6, r1
    43ec:	71 2c       	mov	r7, r1
    43ee:	e1 2c       	mov	r14, r1
    43f0:	f1 2c       	mov	r15, r1
    43f2:	10 97       	sbiw	r26, 0x00	; 0
    43f4:	09 f4       	brne	.+2      	; 0x43f8 <realloc+0x8a>
    43f6:	46 c0       	rjmp	.+140    	; 0x4484 <realloc+0x116>
    43f8:	8d 91       	ld	r24, X+
    43fa:	9c 91       	ld	r25, X
    43fc:	11 97       	sbiw	r26, 0x01	; 1
    43fe:	a8 15       	cp	r26, r8
    4400:	b9 05       	cpc	r27, r9
    4402:	b1 f5       	brne	.+108    	; 0x4470 <realloc+0x102>
    4404:	6c 01       	movw	r12, r24
    4406:	42 e0       	ldi	r20, 0x02	; 2
    4408:	c4 0e       	add	r12, r20
    440a:	d1 1c       	adc	r13, r1
    440c:	ca 14       	cp	r12, r10
    440e:	db 04       	cpc	r13, r11
    4410:	78 f1       	brcs	.+94     	; 0x4470 <realloc+0x102>
    4412:	4c 01       	movw	r8, r24
    4414:	8a 18       	sub	r8, r10
    4416:	9b 08       	sbc	r9, r11
    4418:	64 01       	movw	r12, r8
    441a:	42 e0       	ldi	r20, 0x02	; 2
    441c:	c4 0e       	add	r12, r20
    441e:	d1 1c       	adc	r13, r1
    4420:	12 96       	adiw	r26, 0x02	; 2
    4422:	bc 90       	ld	r11, X
    4424:	12 97       	sbiw	r26, 0x02	; 2
    4426:	13 96       	adiw	r26, 0x03	; 3
    4428:	ac 91       	ld	r26, X
    442a:	b5 e0       	ldi	r27, 0x05	; 5
    442c:	cb 16       	cp	r12, r27
    442e:	d1 04       	cpc	r13, r1
    4430:	40 f0       	brcs	.+16     	; 0x4442 <realloc+0xd4>
    4432:	b2 82       	std	Z+2, r11	; 0x02
    4434:	a3 83       	std	Z+3, r26	; 0x03
    4436:	91 82       	std	Z+1, r9	; 0x01
    4438:	80 82       	st	Z, r8
    443a:	d9 01       	movw	r26, r18
    443c:	6d 93       	st	X+, r22
    443e:	7c 93       	st	X, r23
    4440:	09 c0       	rjmp	.+18     	; 0x4454 <realloc+0xe6>
    4442:	0e 5f       	subi	r16, 0xFE	; 254
    4444:	1f 4f       	sbci	r17, 0xFF	; 255
    4446:	80 0f       	add	r24, r16
    4448:	91 1f       	adc	r25, r17
    444a:	f9 01       	movw	r30, r18
    444c:	91 83       	std	Z+1, r25	; 0x01
    444e:	80 83       	st	Z, r24
    4450:	eb 2d       	mov	r30, r11
    4452:	fa 2f       	mov	r31, r26
    4454:	e1 14       	cp	r14, r1
    4456:	f1 04       	cpc	r15, r1
    4458:	31 f0       	breq	.+12     	; 0x4466 <realloc+0xf8>
    445a:	d7 01       	movw	r26, r14
    445c:	13 96       	adiw	r26, 0x03	; 3
    445e:	fc 93       	st	X, r31
    4460:	ee 93       	st	-X, r30
    4462:	12 97       	sbiw	r26, 0x02	; 2
    4464:	41 c0       	rjmp	.+130    	; 0x44e8 <realloc+0x17a>
    4466:	f0 93 a8 04 	sts	0x04A8, r31	; 0x8004a8 <__flp+0x1>
    446a:	e0 93 a7 04 	sts	0x04A7, r30	; 0x8004a7 <__flp>
    446e:	3c c0       	rjmp	.+120    	; 0x44e8 <realloc+0x17a>
    4470:	68 16       	cp	r6, r24
    4472:	79 06       	cpc	r7, r25
    4474:	08 f4       	brcc	.+2      	; 0x4478 <realloc+0x10a>
    4476:	3c 01       	movw	r6, r24
    4478:	7d 01       	movw	r14, r26
    447a:	12 96       	adiw	r26, 0x02	; 2
    447c:	0d 90       	ld	r0, X+
    447e:	bc 91       	ld	r27, X
    4480:	a0 2d       	mov	r26, r0
    4482:	b7 cf       	rjmp	.-146    	; 0x43f2 <realloc+0x84>
    4484:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <__brkval>
    4488:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <__brkval+0x1>
    448c:	88 16       	cp	r8, r24
    448e:	99 06       	cpc	r9, r25
    4490:	e1 f4       	brne	.+56     	; 0x44ca <realloc+0x15c>
    4492:	66 16       	cp	r6, r22
    4494:	77 06       	cpc	r7, r23
    4496:	c8 f4       	brcc	.+50     	; 0x44ca <realloc+0x15c>
    4498:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    449c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	41 f4       	brne	.+16     	; 0x44b4 <realloc+0x146>
    44a4:	8d b7       	in	r24, 0x3d	; 61
    44a6:	9e b7       	in	r25, 0x3e	; 62
    44a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    44ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    44b0:	84 1b       	sub	r24, r20
    44b2:	95 0b       	sbc	r25, r21
    44b4:	e8 17       	cp	r30, r24
    44b6:	f9 07       	cpc	r31, r25
    44b8:	c8 f4       	brcc	.+50     	; 0x44ec <realloc+0x17e>
    44ba:	f0 93 a6 04 	sts	0x04A6, r31	; 0x8004a6 <__brkval+0x1>
    44be:	e0 93 a5 04 	sts	0x04A5, r30	; 0x8004a5 <__brkval>
    44c2:	f9 01       	movw	r30, r18
    44c4:	71 83       	std	Z+1, r23	; 0x01
    44c6:	60 83       	st	Z, r22
    44c8:	0f c0       	rjmp	.+30     	; 0x44e8 <realloc+0x17a>
    44ca:	cb 01       	movw	r24, r22
    44cc:	0e 94 96 20 	call	0x412c	; 0x412c <malloc>
    44d0:	7c 01       	movw	r14, r24
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	59 f0       	breq	.+22     	; 0x44ec <realloc+0x17e>
    44d6:	a8 01       	movw	r20, r16
    44d8:	be 01       	movw	r22, r28
    44da:	0e 94 c7 22 	call	0x458e	; 0x458e <memcpy>
    44de:	ce 01       	movw	r24, r28
    44e0:	0e 94 2e 21 	call	0x425c	; 0x425c <free>
    44e4:	c7 01       	movw	r24, r14
    44e6:	04 c0       	rjmp	.+8      	; 0x44f0 <realloc+0x182>
    44e8:	ce 01       	movw	r24, r28
    44ea:	02 c0       	rjmp	.+4      	; 0x44f0 <realloc+0x182>
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	ee e0       	ldi	r30, 0x0E	; 14
    44f6:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__epilogue_restores__+0x8>

000044fa <atoi>:
    44fa:	fc 01       	movw	r30, r24
    44fc:	88 27       	eor	r24, r24
    44fe:	99 27       	eor	r25, r25
    4500:	e8 94       	clt
    4502:	21 91       	ld	r18, Z+
    4504:	20 32       	cpi	r18, 0x20	; 32
    4506:	e9 f3       	breq	.-6      	; 0x4502 <atoi+0x8>
    4508:	29 30       	cpi	r18, 0x09	; 9
    450a:	10 f0       	brcs	.+4      	; 0x4510 <atoi+0x16>
    450c:	2e 30       	cpi	r18, 0x0E	; 14
    450e:	c8 f3       	brcs	.-14     	; 0x4502 <atoi+0x8>
    4510:	2b 32       	cpi	r18, 0x2B	; 43
    4512:	41 f0       	breq	.+16     	; 0x4524 <atoi+0x2a>
    4514:	2d 32       	cpi	r18, 0x2D	; 45
    4516:	39 f4       	brne	.+14     	; 0x4526 <atoi+0x2c>
    4518:	68 94       	set
    451a:	04 c0       	rjmp	.+8      	; 0x4524 <atoi+0x2a>
    451c:	0e 94 ed 22 	call	0x45da	; 0x45da <__mulhi_const_10>
    4520:	82 0f       	add	r24, r18
    4522:	91 1d       	adc	r25, r1
    4524:	21 91       	ld	r18, Z+
    4526:	20 53       	subi	r18, 0x30	; 48
    4528:	2a 30       	cpi	r18, 0x0A	; 10
    452a:	c0 f3       	brcs	.-16     	; 0x451c <atoi+0x22>
    452c:	1e f4       	brtc	.+6      	; 0x4534 <atoi+0x3a>
    452e:	90 95       	com	r25
    4530:	81 95       	neg	r24
    4532:	9f 4f       	sbci	r25, 0xFF	; 255
    4534:	08 95       	ret

00004536 <strcmp_P>:
    4536:	fb 01       	movw	r30, r22
    4538:	dc 01       	movw	r26, r24
    453a:	8d 91       	ld	r24, X+
    453c:	05 90       	lpm	r0, Z+
    453e:	80 19       	sub	r24, r0
    4540:	01 10       	cpse	r0, r1
    4542:	d9 f3       	breq	.-10     	; 0x453a <strcmp_P+0x4>
    4544:	99 0b       	sbc	r25, r25
    4546:	08 95       	ret

00004548 <__strlen_P>:
    4548:	fc 01       	movw	r30, r24
    454a:	05 90       	lpm	r0, Z+
    454c:	00 20       	and	r0, r0
    454e:	e9 f7       	brne	.-6      	; 0x454a <__strlen_P+0x2>
    4550:	80 95       	com	r24
    4552:	90 95       	com	r25
    4554:	8e 0f       	add	r24, r30
    4556:	9f 1f       	adc	r25, r31
    4558:	08 95       	ret

0000455a <strstr_P>:
    455a:	fb 01       	movw	r30, r22
    455c:	55 91       	lpm	r21, Z+
    455e:	55 23       	and	r21, r21
    4560:	a9 f0       	breq	.+42     	; 0x458c <strstr_P+0x32>
    4562:	bf 01       	movw	r22, r30
    4564:	dc 01       	movw	r26, r24
    4566:	4d 91       	ld	r20, X+
    4568:	45 17       	cp	r20, r21
    456a:	41 11       	cpse	r20, r1
    456c:	e1 f7       	brne	.-8      	; 0x4566 <strstr_P+0xc>
    456e:	59 f4       	brne	.+22     	; 0x4586 <strstr_P+0x2c>
    4570:	cd 01       	movw	r24, r26
    4572:	05 90       	lpm	r0, Z+
    4574:	00 20       	and	r0, r0
    4576:	49 f0       	breq	.+18     	; 0x458a <strstr_P+0x30>
    4578:	4d 91       	ld	r20, X+
    457a:	40 15       	cp	r20, r0
    457c:	41 11       	cpse	r20, r1
    457e:	c9 f3       	breq	.-14     	; 0x4572 <strstr_P+0x18>
    4580:	fb 01       	movw	r30, r22
    4582:	41 11       	cpse	r20, r1
    4584:	ef cf       	rjmp	.-34     	; 0x4564 <strstr_P+0xa>
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	08 95       	ret

0000458e <memcpy>:
    458e:	fb 01       	movw	r30, r22
    4590:	dc 01       	movw	r26, r24
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <memcpy+0xa>
    4594:	01 90       	ld	r0, Z+
    4596:	0d 92       	st	X+, r0
    4598:	41 50       	subi	r20, 0x01	; 1
    459a:	50 40       	sbci	r21, 0x00	; 0
    459c:	d8 f7       	brcc	.-10     	; 0x4594 <memcpy+0x6>
    459e:	08 95       	ret

000045a0 <strchr>:
    45a0:	fc 01       	movw	r30, r24
    45a2:	81 91       	ld	r24, Z+
    45a4:	86 17       	cp	r24, r22
    45a6:	21 f0       	breq	.+8      	; 0x45b0 <strchr+0x10>
    45a8:	88 23       	and	r24, r24
    45aa:	d9 f7       	brne	.-10     	; 0x45a2 <strchr+0x2>
    45ac:	99 27       	eor	r25, r25
    45ae:	08 95       	ret
    45b0:	31 97       	sbiw	r30, 0x01	; 1
    45b2:	cf 01       	movw	r24, r30
    45b4:	08 95       	ret

000045b6 <strcpy>:
    45b6:	fb 01       	movw	r30, r22
    45b8:	dc 01       	movw	r26, r24
    45ba:	01 90       	ld	r0, Z+
    45bc:	0d 92       	st	X+, r0
    45be:	00 20       	and	r0, r0
    45c0:	e1 f7       	brne	.-8      	; 0x45ba <strcpy+0x4>
    45c2:	08 95       	ret

000045c4 <__itoa_ncheck>:
    45c4:	bb 27       	eor	r27, r27
    45c6:	4a 30       	cpi	r20, 0x0A	; 10
    45c8:	31 f4       	brne	.+12     	; 0x45d6 <__itoa_ncheck+0x12>
    45ca:	99 23       	and	r25, r25
    45cc:	22 f4       	brpl	.+8      	; 0x45d6 <__itoa_ncheck+0x12>
    45ce:	bd e2       	ldi	r27, 0x2D	; 45
    45d0:	90 95       	com	r25
    45d2:	81 95       	neg	r24
    45d4:	9f 4f       	sbci	r25, 0xFF	; 255
    45d6:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__utoa_common>

000045da <__mulhi_const_10>:
    45da:	7a e0       	ldi	r23, 0x0A	; 10
    45dc:	97 9f       	mul	r25, r23
    45de:	90 2d       	mov	r25, r0
    45e0:	87 9f       	mul	r24, r23
    45e2:	80 2d       	mov	r24, r0
    45e4:	91 0d       	add	r25, r1
    45e6:	11 24       	eor	r1, r1
    45e8:	08 95       	ret

000045ea <__utoa_ncheck>:
    45ea:	bb 27       	eor	r27, r27

000045ec <__utoa_common>:
    45ec:	fb 01       	movw	r30, r22
    45ee:	55 27       	eor	r21, r21
    45f0:	aa 27       	eor	r26, r26
    45f2:	88 0f       	add	r24, r24
    45f4:	99 1f       	adc	r25, r25
    45f6:	aa 1f       	adc	r26, r26
    45f8:	a4 17       	cp	r26, r20
    45fa:	10 f0       	brcs	.+4      	; 0x4600 <__utoa_common+0x14>
    45fc:	a4 1b       	sub	r26, r20
    45fe:	83 95       	inc	r24
    4600:	50 51       	subi	r21, 0x10	; 16
    4602:	b9 f7       	brne	.-18     	; 0x45f2 <__utoa_common+0x6>
    4604:	a0 5d       	subi	r26, 0xD0	; 208
    4606:	aa 33       	cpi	r26, 0x3A	; 58
    4608:	08 f0       	brcs	.+2      	; 0x460c <__utoa_common+0x20>
    460a:	a9 5d       	subi	r26, 0xD9	; 217
    460c:	a1 93       	st	Z+, r26
    460e:	00 97       	sbiw	r24, 0x00	; 0
    4610:	79 f7       	brne	.-34     	; 0x45f0 <__utoa_common+0x4>
    4612:	b1 11       	cpse	r27, r1
    4614:	b1 93       	st	Z+, r27
    4616:	11 92       	st	Z+, r1
    4618:	cb 01       	movw	r24, r22
    461a:	0c 94 0f 23 	jmp	0x461e	; 0x461e <strrev>

0000461e <strrev>:
    461e:	dc 01       	movw	r26, r24
    4620:	fc 01       	movw	r30, r24
    4622:	67 2f       	mov	r22, r23
    4624:	71 91       	ld	r23, Z+
    4626:	77 23       	and	r23, r23
    4628:	e1 f7       	brne	.-8      	; 0x4622 <strrev+0x4>
    462a:	32 97       	sbiw	r30, 0x02	; 2
    462c:	04 c0       	rjmp	.+8      	; 0x4636 <strrev+0x18>
    462e:	7c 91       	ld	r23, X
    4630:	6d 93       	st	X+, r22
    4632:	70 83       	st	Z, r23
    4634:	62 91       	ld	r22, -Z
    4636:	ae 17       	cp	r26, r30
    4638:	bf 07       	cpc	r27, r31
    463a:	c8 f3       	brcs	.-14     	; 0x462e <strrev+0x10>
    463c:	08 95       	ret

0000463e <__prologue_saves__>:
    463e:	2f 92       	push	r2
    4640:	3f 92       	push	r3
    4642:	4f 92       	push	r4
    4644:	5f 92       	push	r5
    4646:	6f 92       	push	r6
    4648:	7f 92       	push	r7
    464a:	8f 92       	push	r8
    464c:	9f 92       	push	r9
    464e:	af 92       	push	r10
    4650:	bf 92       	push	r11
    4652:	cf 92       	push	r12
    4654:	df 92       	push	r13
    4656:	ef 92       	push	r14
    4658:	ff 92       	push	r15
    465a:	0f 93       	push	r16
    465c:	1f 93       	push	r17
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	cd b7       	in	r28, 0x3d	; 61
    4664:	de b7       	in	r29, 0x3e	; 62
    4666:	ca 1b       	sub	r28, r26
    4668:	db 0b       	sbc	r29, r27
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	09 94       	ijmp

00004676 <__epilogue_restores__>:
    4676:	2a 88       	ldd	r2, Y+18	; 0x12
    4678:	39 88       	ldd	r3, Y+17	; 0x11
    467a:	48 88       	ldd	r4, Y+16	; 0x10
    467c:	5f 84       	ldd	r5, Y+15	; 0x0f
    467e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4680:	7d 84       	ldd	r7, Y+13	; 0x0d
    4682:	8c 84       	ldd	r8, Y+12	; 0x0c
    4684:	9b 84       	ldd	r9, Y+11	; 0x0b
    4686:	aa 84       	ldd	r10, Y+10	; 0x0a
    4688:	b9 84       	ldd	r11, Y+9	; 0x09
    468a:	c8 84       	ldd	r12, Y+8	; 0x08
    468c:	df 80       	ldd	r13, Y+7	; 0x07
    468e:	ee 80       	ldd	r14, Y+6	; 0x06
    4690:	fd 80       	ldd	r15, Y+5	; 0x05
    4692:	0c 81       	ldd	r16, Y+4	; 0x04
    4694:	1b 81       	ldd	r17, Y+3	; 0x03
    4696:	aa 81       	ldd	r26, Y+2	; 0x02
    4698:	b9 81       	ldd	r27, Y+1	; 0x01
    469a:	ce 0f       	add	r28, r30
    469c:	d1 1d       	adc	r29, r1
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	ed 01       	movw	r28, r26
    46aa:	08 95       	ret

000046ac <__do_global_dtors>:
    46ac:	13 e0       	ldi	r17, 0x03	; 3
    46ae:	cd e7       	ldi	r28, 0x7D	; 125
    46b0:	d3 e0       	ldi	r29, 0x03	; 3
    46b2:	04 c0       	rjmp	.+8      	; 0x46bc <__do_global_dtors+0x10>
    46b4:	fe 01       	movw	r30, r28
    46b6:	0e 94 90 20 	call	0x4120	; 0x4120 <__tablejump2__>
    46ba:	21 96       	adiw	r28, 0x01	; 1
    46bc:	ce 37       	cpi	r28, 0x7E	; 126
    46be:	d1 07       	cpc	r29, r17
    46c0:	c9 f7       	brne	.-14     	; 0x46b4 <__do_global_dtors+0x8>
    46c2:	f8 94       	cli

000046c4 <__stop_program>:
    46c4:	ff cf       	rjmp	.-2      	; 0x46c4 <__stop_program>
