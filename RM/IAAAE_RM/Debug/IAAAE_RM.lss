
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00004afa  00004b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  0080019a  0080019a  00004c28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004c28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d00  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020f7b  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a0e  00000000  00000000  00026913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000072a8  00000000  00000000  0002b321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000304c  00000000  00000000  000325cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005dd9  00000000  00000000  00035618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000116d8  00000000  00000000  0003b3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d00  00000000  00000000  0004cac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 04 	jmp	0x804	; 0x804 <__dtors_end>
       4:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
       8:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
       c:	0c 94 af 20 	jmp	0x415e	; 0x415e <__vector_3>
      10:	0c 94 af 20 	jmp	0x415e	; 0x415e <__vector_3>
      14:	0c 94 af 20 	jmp	0x415e	; 0x415e <__vector_3>
      18:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      1c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      20:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      24:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      28:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      2c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      30:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      34:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      38:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      3c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      40:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__vector_16>
      44:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      48:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__vector_18>
      4c:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__vector_19>
      50:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      54:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      58:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      5c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>
      60:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__vector_24>
      64:	0c 94 2a 04 	jmp	0x854	; 0x854 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_PcE3__c>:
      aa:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000b2 <_ZZN13Adafruit_FONA12HTTP_readallEjPcE3__c_0>:
      b2:	2b 48 54 54 50 52 45 41 44 3a 20 00                 +HTTPREAD: .

000000be <_ZZN13Adafruit_FONA12HTTP_readallEjPcE3__c>:
      be:	41 54 2b 48 54 54 50 52 45 41 44 3d 30 2c 00        AT+HTTPREAD=0,.

000000cd <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      cd:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000da <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      da:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000e7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
      e7:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000000f6 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
      f6:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000000ff <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
      ff:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000010c <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     10c:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000119 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     119:	09 2d 2d 2d 3e 20 00                                .---> .

00000120 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     120:	22 2c 00                                            ",.

00000123 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     123:	22 2c 22 00                                         ",".

00000127 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     127:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000135 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     135:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000143 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     143:	09 2d 2d 2d 3e 20 00                                .---> .

0000014a <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     14a:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000156 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     156:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000162 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_4>:
     162:	2c 20 77 65 27 76 65 20 72 65 61 64 20 00           , we've read .

00000170 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_3>:
     170:	2c 20 77 69 74 68 20 6f 75 72 20 6d 61 78 20 6f     , with our max o
     180:	66 20 00                                            f .

00000183 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_2>:
     183:	52 65 63 65 69 76 65 64 20 72 65 73 70 6f 6e 73     Received respons
     193:	65 20 6f 66 20 6c 65 6e 67 74 68 20 00              e of length .

000001a0 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_1>:
     1a0:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     1b0:	61 74 61 2c 20 73 74 61 74 75 73 20 63 6f 64 65     ata, status code
     1c0:	3a 20 00                                            : .

000001c3 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_0>:
     1c3:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000001ce <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c>:
     1ce:	68 74 74 70 3a 2f 2f 72 6d 6f 6e 2e 6b 68 75 64     http://rmon.khud
     1de:	64 61 6d 2e 6f 72 67 2e 75 6b 2f 3f 61 3d 61 64     dam.org.uk/?a=ad
     1ee:	64 00                                               d.

000001f0 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     1f0:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     1fb:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000208 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     208:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000213 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     213:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000021b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     21b:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000224 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     224:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000231 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     231:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     241:	44 22 2c 00                                         D",.

00000245 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     245:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     255:	45 52 22 2c 00                                      ER",.

0000025a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     25a:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000264 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     264:	09 2d 2d 2d 3e 20 00                                .---> .

0000026b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     26b:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000275 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     275:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     285:	4e 22 2c 00                                         N",.

00000289 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     289:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     299:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000002a7 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     2a7:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000002b2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     2b2:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000002bd <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     2bd:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000002c5 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     2c5:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002ce <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     2ce:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002d6 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     2d6:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002df <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     2df:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002e7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     2e7:	41 54 2b 43 53 51 00                                AT+CSQ.

000002ee <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     2ee:	2b 43 53 51 3a 20 00                                +CSQ: .

000002f5 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     2f5:	41 54 2b 43 53 51 00                                AT+CSQ.

000002fc <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     2fc:	2b 43 53 51 3a 20 00                                +CSQ: .

00000303 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     303:	41 54 2b 43 42 43 00                                AT+CBC.

0000030a <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     30a:	2b 43 42 43 3a 20 00                                +CBC: .

00000311 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     311:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000031c <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     31c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000323 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     323:	09 2d 2d 2d 3e 20 00                                .---> .

0000032a <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     32a:	41 54 45 30 00                                      ATE0.

0000032f <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     32f:	41 54 45 30 00                                      ATE0.

00000334 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     334:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     344:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

00000353 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     353:	41 54 00                                            AT.

00000356 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     356:	41 54 00                                            AT.

00000359 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     359:	41 54 00                                            AT.

0000035c <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     35c:	41 54 00                                            AT.

0000035f <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     35f:	41 54 00                                            AT.

00000362 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     362:	41 54 00                                            AT.

00000365 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     365:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     375:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000386 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     386:	4f 4b 00                                            OK.

00000389 <_ZZN13Adafruit_FONAC4EabE3__c>:
     389:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000391 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_17>:
     391:	20 7c 20 00                                          | .

00000395 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_16>:
     395:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 3d 00        Response Code=.

000003a4 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_15>:
     3a4:	20 7c 20 00                                          | .

000003a8 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_14>:
     3a8:	52 65 73 70 6f 6e 73 65 20 4c 65 6e 3d 00           Response Len=.

000003b6 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_13>:
     3b6:	20 7c 20 00                                          | .

000003ba <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_12>:
     3ba:	09 52 65 73 70 6f 6e 73 65 20 49 64 3d 00           .Response Id=.

000003c8 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_11>:
     3c8:	20 7c 20 00                                          | .

000003cc <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_10>:
     3cc:	53 65 6e 64 20 53 74 61 74 2e 3d 00                 Send Stat.=.

000003d8 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_9>:
     3d8:	20 7c 20 00                                          | .

000003dc <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_8>:
     3dc:	47 50 52 53 20 53 74 61 74 2e 3d 00                 GPRS Stat.=.

000003e8 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_7>:
     3e8:	20 7c 20 00                                          | .

000003ec <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_6>:
     3ec:	09 49 6e 69 74 20 53 74 61 74 2e 3d 00              .Init Stat.=.

000003f9 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_5>:
     3f9:	09 00                                               ..

000003fb <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_4>:
     3fb:	20 7c 20 00                                          | .

000003ff <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_3>:
     3ff:	42 61 74 74 25 3d 00                                Batt%=.

00000406 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_2>:
     406:	20 7c 20 00                                          | .

0000040a <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_1>:
     40a:	23 52 65 61 64 69 6e 67 73 3d 00                    #Readings=.

00000415 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c_0>:
     415:	20 7c 20 00                                          | .

00000419 <_ZZN7Helpers18printDailySendDataEP14DailyCycleDataE3__c>:
     419:	09 42 6f 6f 74 23 3d 00                             .Boot#=.

00000421 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     421:	45 72 72 6f 72 3d 00                                Error=.

00000428 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     428:	20 7c 20 00                                          | .

0000042c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     42c:	54 65 6d 70 3d 00                                   Temp=.

00000432 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     432:	20 7c 20 00                                          | .

00000436 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     436:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000043f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     43f:	20 7c 20 00                                          | .

00000443 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     443:	50 56 2d 56 3d 00                                   PV-V=.

00000449 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     449:	20 7c 20 00                                          | .

0000044d <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     44d:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000455 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     455:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000462 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     462:	20 7c 20 00                                          | .

00000466 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     466:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000046f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     46f:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000479 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     479:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     489:	6f 64 65 3d 00                                      ode=.

0000048e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     48e:	20 7c 20 00                                          | .

00000492 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     492:	42 45 52 3d 00                                      BER=.

00000497 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     497:	20 7c 20 00                                          | .

0000049b <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     49b:	52 53 53 49 3d 00                                   RSSI=.

000004a1 <_ZL12b64_alphabet>:
     4a1:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     4b1:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     4c1:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     4d1:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000004e2 <_ZZ4loopE3__c>:
     4e2:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000004ec <_ZZ8sendDatavE3__c_3>:
     4ec:	53 65 6e 64 2d 44 61 74 61 20 53 74 61 74 75 73     Send-Data Status
     4fc:	20 53 6c 6f 74 3a 00                                 Slot:.

00000503 <_ZZ8sendDatavE3__c_2>:
     503:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     513:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     523:	6f 72 20 73 65 6e 64 3a 00                          or send:.

0000052c <_ZZ8sendDatavE3__c_1>:
     52c:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     53c:	52 29 00                                            R).

0000053f <_ZZ8sendDatavE3__c_0>:
     53f:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     54f:	69 6e 67 2e 2e 2e 29 00                             ing...).

00000557 <_ZZ8sendDatavE3__c>:
     557:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     567:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

00000576 <_ZZ17createEncodedDataPcPhh13FONA_GET_RSSIE3__c>:
     576:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     586:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     596:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

000005a6 <_ZZ12takeReadingsvE3__c>:
     5a6:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     5b6:	2e 2e 00                                            ...

000005b9 <_ZZ21ensureFonaInitialisedbE3__c_9>:
     5b9:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     5c9:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     5d9:	64 6f 6e 65 29 00                                   done).

000005df <_ZZ21ensureFonaInitialisedbE3__c_8>:
     5df:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     5ef:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     5ff:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     60f:	75 65 20 6e 6f 77 29 00                             ue now).

00000617 <_ZZ21ensureFonaInitialisedbE3__c_7>:
     617:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     627:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     637:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

00000646 <_ZZ21ensureFonaInitialisedbE3__c_6>:
     646:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     656:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

00000661 <_ZZ21ensureFonaInitialisedbE3__c_5>:
     661:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     671:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000681 <_ZZ21ensureFonaInitialisedbE3__c_4>:
     681:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     691:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     6a1:	65 64 00                                            ed.

000006a4 <_ZZ21ensureFonaInitialisedbE3__c_3>:
     6a4:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     6b4:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     6c4:	6f 72 74 6c 79 00                                   ortly.

000006ca <_ZZ21ensureFonaInitialisedbE3__c_2>:
     6ca:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     6da:	6e 67 20 47 50 52 53 00                             ng GPRS.

000006e2 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     6e2:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     6f2:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

000006ff <_ZZ21ensureFonaInitialisedbE3__c_0>:
     6ff:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     70f:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

0000071a <_ZZ21ensureFonaInitialisedbE3__c>:
     71a:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     72a:	61 2e 2e 2e 00                                      a....

0000072f <_ZZ5setupE3__c>:
     72f:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

0000073b <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     73b:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     74b:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     75b:	73 73 69 6f 6e 3a 00                                ssion:.

00000762 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     762:	2a 2a 2a 2a 00                                      ****.

00000767 <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     767:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     777:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     787:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     797:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

000007a2 <digital_pin_to_timer_PGM>:
     7a2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     7b2:	00 00 00 00                                         ....

000007b6 <digital_pin_to_bit_mask_PGM>:
     7b6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     7c6:	04 08 10 20                                         ... 

000007ca <digital_pin_to_port_PGM>:
     7ca:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     7da:	03 03 03 03                                         ....

000007de <port_to_input_PGM>:
     7de:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000007e8 <port_to_output_PGM>:
     7e8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000007f2 <port_to_mode_PGM>:
     7f2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000007fc <__ctors_start>:
     7fc:	85 14       	cp	r8, r5
     7fe:	4c 19       	sub	r20, r12
     800:	3c 1b       	sub	r19, r28

00000802 <__ctors_end>:
     802:	a0 14       	cp	r10, r0

00000804 <__dtors_end>:
     804:	11 24       	eor	r1, r1
     806:	1f be       	out	0x3f, r1	; 63
     808:	cf ef       	ldi	r28, 0xFF	; 255
     80a:	d8 e0       	ldi	r29, 0x08	; 8
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	cd bf       	out	0x3d, r28	; 61

00000810 <__do_copy_data>:
     810:	11 e0       	ldi	r17, 0x01	; 1
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b1 e0       	ldi	r27, 0x01	; 1
     816:	ea ef       	ldi	r30, 0xFA	; 250
     818:	fa e4       	ldi	r31, 0x4A	; 74
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__do_copy_data+0x10>
     81c:	05 90       	lpm	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	aa 39       	cpi	r26, 0x9A	; 154
     822:	b1 07       	cpc	r27, r17
     824:	d9 f7       	brne	.-10     	; 0x81c <__do_copy_data+0xc>

00000826 <__do_clear_bss>:
     826:	24 e0       	ldi	r18, 0x04	; 4
     828:	aa e9       	ldi	r26, 0x9A	; 154
     82a:	b1 e0       	ldi	r27, 0x01	; 1
     82c:	01 c0       	rjmp	.+2      	; 0x830 <.do_clear_bss_start>

0000082e <.do_clear_bss_loop>:
     82e:	1d 92       	st	X+, r1

00000830 <.do_clear_bss_start>:
     830:	ac 38       	cpi	r26, 0x8C	; 140
     832:	b2 07       	cpc	r27, r18
     834:	e1 f7       	brne	.-8      	; 0x82e <.do_clear_bss_loop>

00000836 <__do_global_ctors>:
     836:	13 e0       	ldi	r17, 0x03	; 3
     838:	c1 e0       	ldi	r28, 0x01	; 1
     83a:	d4 e0       	ldi	r29, 0x04	; 4
     83c:	04 c0       	rjmp	.+8      	; 0x846 <__do_global_ctors+0x10>
     83e:	21 97       	sbiw	r28, 0x01	; 1
     840:	fe 01       	movw	r30, r28
     842:	0e 94 aa 22 	call	0x4554	; 0x4554 <__tablejump2__>
     846:	ce 3f       	cpi	r28, 0xFE	; 254
     848:	d1 07       	cpc	r29, r17
     84a:	c9 f7       	brne	.-14     	; 0x83e <__do_global_ctors+0x8>
     84c:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <main>
     850:	0c 94 70 25 	jmp	0x4ae0	; 0x4ae0 <__do_global_dtors>

00000854 <__bad_interrupt>:
     854:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000858 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     858:	83 5e       	subi	r24, 0xE3	; 227
     85a:	9e 4f       	sbci	r25, 0xFE	; 254
     85c:	dc 01       	movw	r26, r24
     85e:	8d 91       	ld	r24, X+
     860:	9c 91       	ld	r25, X
     862:	dc 01       	movw	r26, r24
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	04 80       	ldd	r0, Z+4	; 0x04
     86a:	f5 81       	ldd	r31, Z+5	; 0x05
     86c:	e0 2d       	mov	r30, r0
     86e:	09 94       	ijmp

00000870 <_ZN13Adafruit_FONA5writeEh>:
     870:	83 5e       	subi	r24, 0xE3	; 227
     872:	9e 4f       	sbci	r25, 0xFE	; 254
     874:	dc 01       	movw	r26, r24
     876:	8d 91       	ld	r24, X+
     878:	9c 91       	ld	r25, X
     87a:	dc 01       	movw	r26, r24
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	01 90       	ld	r0, Z+
     882:	f0 81       	ld	r31, Z
     884:	e0 2d       	mov	r30, r0
     886:	09 94       	ijmp

00000888 <_ZN13Adafruit_FONA4readEv>:
     888:	83 5e       	subi	r24, 0xE3	; 227
     88a:	9e 4f       	sbci	r25, 0xFE	; 254
     88c:	dc 01       	movw	r26, r24
     88e:	8d 91       	ld	r24, X+
     890:	9c 91       	ld	r25, X
     892:	dc 01       	movw	r26, r24
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	06 80       	ldd	r0, Z+6	; 0x06
     89a:	f7 81       	ldd	r31, Z+7	; 0x07
     89c:	e0 2d       	mov	r30, r0
     89e:	09 94       	ijmp

000008a0 <_ZN13Adafruit_FONA4peekEv>:
     8a0:	83 5e       	subi	r24, 0xE3	; 227
     8a2:	9e 4f       	sbci	r25, 0xFE	; 254
     8a4:	dc 01       	movw	r26, r24
     8a6:	8d 91       	ld	r24, X+
     8a8:	9c 91       	ld	r25, X
     8aa:	dc 01       	movw	r26, r24
     8ac:	ed 91       	ld	r30, X+
     8ae:	fc 91       	ld	r31, X
     8b0:	00 84       	ldd	r0, Z+8	; 0x08
     8b2:	f1 85       	ldd	r31, Z+9	; 0x09
     8b4:	e0 2d       	mov	r30, r0
     8b6:	09 94       	ijmp

000008b8 <_ZN13Adafruit_FONA5flushEv>:
     8b8:	83 5e       	subi	r24, 0xE3	; 227
     8ba:	9e 4f       	sbci	r25, 0xFE	; 254
     8bc:	dc 01       	movw	r26, r24
     8be:	8d 91       	ld	r24, X+
     8c0:	9c 91       	ld	r25, X
     8c2:	dc 01       	movw	r26, r24
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	02 84       	ldd	r0, Z+10	; 0x0a
     8ca:	f3 85       	ldd	r31, Z+11	; 0x0b
     8cc:	e0 2d       	mov	r30, r0
     8ce:	09 94       	ijmp

000008d0 <_ZN13Adafruit_FONAC1Eab>:
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	ec 01       	movw	r28, r24
     8da:	06 2f       	mov	r16, r22
     8dc:	14 2f       	mov	r17, r20
     8de:	1b 82       	std	Y+3, r1	; 0x03
     8e0:	1a 82       	std	Y+2, r1	; 0x02
     8e2:	88 ee       	ldi	r24, 0xE8	; 232
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	8c 83       	std	Y+4, r24	; 0x04
     8ec:	9d 83       	std	Y+5, r25	; 0x05
     8ee:	ae 83       	std	Y+6, r26	; 0x06
     8f0:	bf 83       	std	Y+7, r27	; 0x07
     8f2:	8d e2       	ldi	r24, 0x2D	; 45
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	99 83       	std	Y+1, r25	; 0x01
     8f8:	88 83       	st	Y, r24
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	8e 87       	std	Y+14, r24	; 0x0e
     8fe:	6c e7       	ldi	r22, 0x7C	; 124
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	ce 01       	movw	r24, r28
     904:	8b 5e       	subi	r24, 0xEB	; 235
     906:	9e 4f       	sbci	r25, 0xFE	; 254
     908:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <_ZN6StringC1EPKc>
     90c:	0c 87       	std	Y+12, r16	; 0x0c
     90e:	1d 87       	std	Y+13, r17	; 0x0d
     910:	fe 01       	movw	r30, r28
     912:	e2 5f       	subi	r30, 0xF2	; 242
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	89 e8       	ldi	r24, 0x89	; 137
     918:	93 e0       	ldi	r25, 0x03	; 3
     91a:	91 83       	std	Z+1, r25	; 0x01
     91c:	80 83       	st	Z, r24
     91e:	32 96       	adiw	r30, 0x02	; 2
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	10 82       	st	Z, r1
     924:	32 96       	adiw	r30, 0x02	; 2
     926:	11 82       	std	Z+1, r1	; 0x01
     928:	10 82       	st	Z, r1
     92a:	3b 96       	adiw	r30, 0x0b	; 11
     92c:	11 82       	std	Z+1, r1	; 0x01
     92e:	10 82       	st	Z, r1
     930:	39 97       	sbiw	r30, 0x09	; 9
     932:	10 82       	st	Z, r1
     934:	c5 5e       	subi	r28, 0xE5	; 229
     936:	de 4f       	sbci	r29, 0xFE	; 254
     938:	86 e8       	ldi	r24, 0x86	; 134
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	99 83       	std	Y+1, r25	; 0x01
     93e:	88 83       	st	Y, r24
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	08 95       	ret

0000094a <_ZN13Adafruit_FONA19internalReadRawDataEPcj>:
     94a:	af 92       	push	r10
     94c:	bf 92       	push	r11
     94e:	cf 92       	push	r12
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	8c 01       	movw	r16, r24
     960:	5b 01       	movw	r10, r22
     962:	7a 01       	movw	r14, r20
     964:	c1 2c       	mov	r12, r1
     966:	d1 2c       	mov	r13, r1
     968:	e5 01       	movw	r28, r10
     96a:	cc 0d       	add	r28, r12
     96c:	dd 1d       	adc	r29, r13
     96e:	e1 14       	cp	r14, r1
     970:	f1 04       	cpc	r15, r1
     972:	09 f1       	breq	.+66     	; 0x9b6 <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x6c>
     974:	d8 01       	movw	r26, r16
     976:	ed 91       	ld	r30, X+
     978:	fc 91       	ld	r31, X
     97a:	04 80       	ldd	r0, Z+4	; 0x04
     97c:	f5 81       	ldd	r31, Z+5	; 0x05
     97e:	e0 2d       	mov	r30, r0
     980:	c8 01       	movw	r24, r16
     982:	09 95       	icall
     984:	89 2b       	or	r24, r25
     986:	81 f3       	breq	.-32     	; 0x968 <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x1e>
     988:	d8 01       	movw	r26, r16
     98a:	ed 91       	ld	r30, X+
     98c:	fc 91       	ld	r31, X
     98e:	06 80       	ldd	r0, Z+6	; 0x06
     990:	f7 81       	ldd	r31, Z+7	; 0x07
     992:	e0 2d       	mov	r30, r0
     994:	c8 01       	movw	r24, r16
     996:	09 95       	icall
     998:	89 93       	st	Y+, r24
     99a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     99e:	95 ff       	sbrs	r25, 5
     9a0:	fc cf       	rjmp	.-8      	; 0x99a <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x50>
     9a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     9a6:	bf ef       	ldi	r27, 0xFF	; 255
     9a8:	cb 1a       	sub	r12, r27
     9aa:	db 0a       	sbc	r13, r27
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	e8 1a       	sub	r14, r24
     9b0:	f1 08       	sbc	r15, r1
     9b2:	01 f7       	brne	.-64     	; 0x974 <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x2a>
     9b4:	d9 cf       	rjmp	.-78     	; 0x968 <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x1e>
     9b6:	18 82       	st	Y, r1
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	08 95       	ret

000009ce <_ZN13Adafruit_FONA12setUserAgentE6String>:
     9ce:	8b 5e       	subi	r24, 0xEB	; 235
     9d0:	9e 4f       	sbci	r25, 0xFE	; 254
     9d2:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <_ZN6StringaSERKS_>

000009d6 <_ZN13Adafruit_FONA10flushInputEv>:
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	8c 01       	movw	r16, r24
     9e6:	0f 5f       	subi	r16, 0xFF	; 255
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	88 97       	sbiw	r24, 0x28	; 40
     9ec:	d8 f4       	brcc	.+54     	; 0xa24 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     9ee:	e8 81       	ld	r30, Y
     9f0:	f9 81       	ldd	r31, Y+1	; 0x01
     9f2:	04 80       	ldd	r0, Z+4	; 0x04
     9f4:	f5 81       	ldd	r31, Z+5	; 0x05
     9f6:	e0 2d       	mov	r30, r0
     9f8:	ce 01       	movw	r24, r28
     9fa:	09 95       	icall
     9fc:	89 2b       	or	r24, r25
     9fe:	51 f0       	breq	.+20     	; 0xa14 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     a00:	e8 81       	ld	r30, Y
     a02:	f9 81       	ldd	r31, Y+1	; 0x01
     a04:	06 80       	ldd	r0, Z+6	; 0x06
     a06:	f7 81       	ldd	r31, Z+7	; 0x07
     a08:	e0 2d       	mov	r30, r0
     a0a:	ce 01       	movw	r24, r28
     a0c:	09 95       	icall
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	ed cf       	rjmp	.-38     	; 0x9ee <_ZN13Adafruit_FONA10flushInputEv+0x18>
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
     a20:	c8 01       	movw	r24, r16
     a22:	e0 cf       	rjmp	.-64     	; 0x9e4 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	ec 01       	movw	r28, r24
     a3a:	8b 01       	movw	r16, r22
     a3c:	f4 2e       	mov	r15, r20
     a3e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
     a42:	63 e4       	ldi	r22, 0x43	; 67
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	8e e9       	ldi	r24, 0x9E	; 158
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     a4e:	65 e3       	ldi	r22, 0x35	; 53
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	8e e9       	ldi	r24, 0x9E	; 158
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     a5a:	b8 01       	movw	r22, r16
     a5c:	8e e9       	ldi	r24, 0x9E	; 158
     a5e:	93 e0       	ldi	r25, 0x03	; 3
     a60:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     a64:	62 e2       	ldi	r22, 0x22	; 34
     a66:	8e e9       	ldi	r24, 0x9E	; 158
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN5Print7printlnEc>
     a6e:	c3 5e       	subi	r28, 0xE3	; 227
     a70:	de 4f       	sbci	r29, 0xFE	; 254
     a72:	67 e2       	ldi	r22, 0x27	; 39
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	88 81       	ld	r24, Y
     a78:	99 81       	ldd	r25, Y+1	; 0x01
     a7a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     a7e:	b8 01       	movw	r22, r16
     a80:	88 81       	ld	r24, Y
     a82:	99 81       	ldd	r25, Y+1	; 0x01
     a84:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     a88:	88 81       	ld	r24, Y
     a8a:	99 81       	ldd	r25, Y+1	; 0x01
     a8c:	ff 20       	and	r15, r15
     a8e:	19 f0       	breq	.+6      	; 0xa96 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     a90:	63 e2       	ldi	r22, 0x23	; 35
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     a96:	60 e2       	ldi	r22, 0x20	; 32
     a98:	71 e0       	ldi	r23, 0x01	; 1
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>

00000aa8 <_ZN13Adafruit_FONA8readlineEjb>:
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	7c 01       	movw	r14, r24
     abc:	b4 2e       	mov	r11, r20
     abe:	8b 01       	movw	r16, r22
     ac0:	00 0f       	add	r16, r16
     ac2:	11 1f       	adc	r17, r17
     ac4:	00 0f       	add	r16, r16
     ac6:	11 1f       	adc	r17, r17
     ac8:	c0 e0       	ldi	r28, 0x00	; 0
     aca:	d0 e0       	ldi	r29, 0x00	; 0
     acc:	67 01       	movw	r12, r14
     ace:	83 ee       	ldi	r24, 0xE3	; 227
     ad0:	c8 1a       	sub	r12, r24
     ad2:	8e ef       	ldi	r24, 0xFE	; 254
     ad4:	d8 0a       	sbc	r13, r24
     ad6:	01 15       	cp	r16, r1
     ad8:	11 05       	cpc	r17, r1
     ada:	c9 f1       	breq	.+114    	; 0xb4e <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     adc:	ce 3f       	cpi	r28, 0xFE	; 254
     ade:	d1 05       	cpc	r29, r1
     ae0:	98 f0       	brcs	.+38     	; 0xb08 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     ae2:	62 e9       	ldi	r22, 0x92	; 146
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	8e e9       	ldi	r24, 0x9E	; 158
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     aee:	2f c0       	rjmp	.+94     	; 0xb4e <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     af0:	f6 01       	movw	r30, r12
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	dc 01       	movw	r26, r24
     af8:	ed 91       	ld	r30, X+
     afa:	fc 91       	ld	r31, X
     afc:	06 80       	ldd	r0, Z+6	; 0x06
     afe:	f7 81       	ldd	r31, Z+7	; 0x07
     b00:	e0 2d       	mov	r30, r0
     b02:	09 95       	icall
     b04:	8d 30       	cpi	r24, 0x0D	; 13
     b06:	69 f4       	brne	.+26     	; 0xb22 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     b08:	d6 01       	movw	r26, r12
     b0a:	8d 91       	ld	r24, X+
     b0c:	9c 91       	ld	r25, X
     b0e:	dc 01       	movw	r26, r24
     b10:	ed 91       	ld	r30, X+
     b12:	fc 91       	ld	r31, X
     b14:	04 80       	ldd	r0, Z+4	; 0x04
     b16:	f5 81       	ldd	r31, Z+5	; 0x05
     b18:	e0 2d       	mov	r30, r0
     b1a:	09 95       	icall
     b1c:	89 2b       	or	r24, r25
     b1e:	41 f7       	brne	.-48     	; 0xaf0 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     b20:	0c c0       	rjmp	.+24     	; 0xb3a <_ZN13Adafruit_FONA8readlineEjb+0x92>
     b22:	8a 30       	cpi	r24, 0x0A	; 10
     b24:	21 f4       	brne	.+8      	; 0xb2e <_ZN13Adafruit_FONA8readlineEjb+0x86>
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	79 f3       	breq	.-34     	; 0xb08 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     b2a:	bb 20       	and	r11, r11
     b2c:	81 f0       	breq	.+32     	; 0xb4e <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     b2e:	f7 01       	movw	r30, r14
     b30:	ec 0f       	add	r30, r28
     b32:	fd 1f       	adc	r31, r29
     b34:	87 87       	std	Z+15, r24	; 0x0f
     b36:	21 96       	adiw	r28, 0x01	; 1
     b38:	e7 cf       	rjmp	.-50     	; 0xb08 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     b3a:	01 50       	subi	r16, 0x01	; 1
     b3c:	11 09       	sbc	r17, r1
     b3e:	39 f0       	breq	.+14     	; 0xb4e <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
     b4c:	c4 cf       	rjmp	.-120    	; 0xad6 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     b4e:	f7 01       	movw	r30, r14
     b50:	ec 0f       	add	r30, r28
     b52:	fd 1f       	adc	r31, r29
     b54:	17 86       	std	Z+15, r1	; 0x0f
     b56:	8c 2f       	mov	r24, r28
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	08 95       	ret

00000b6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
     b76:	8b 01       	movw	r16, r22
     b78:	ba 01       	movw	r22, r20
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
     b80:	68 e9       	ldi	r22, 0x98	; 152
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	8e e9       	ldi	r24, 0x9E	; 158
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     b8c:	2f 96       	adiw	r28, 0x0f	; 15
     b8e:	be 01       	movw	r22, r28
     b90:	8e e9       	ldi	r24, 0x9E	; 158
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
     b98:	b8 01       	movw	r22, r16
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 b5 24 	call	0x496a	; 0x496a <strcmp_P>
     ba0:	21 e0       	ldi	r18, 0x01	; 1
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f0       	breq	.+2      	; 0xba8 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	82 2f       	mov	r24, r18
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
     bba:	fc 01       	movw	r30, r24
     bbc:	e3 5e       	subi	r30, 0xE3	; 227
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	66 23       	and	r22, r22
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     bc4:	62 e2       	ldi	r22, 0x22	; 34
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN5Print7printlnEc>
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
     bd8:	fe 01       	movw	r30, r28
     bda:	e5 5e       	subi	r30, 0xE5	; 229
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	40 e1       	ldi	r20, 0x10	; 16
     be4:	57 e2       	ldi	r21, 0x27	; 39
     be6:	ce 01       	movw	r24, r28
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000bf0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
     bfa:	8a 01       	movw	r16, r20
     bfc:	41 e0       	ldi	r20, 0x01	; 1
     bfe:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     c02:	fe 01       	movw	r30, r28
     c04:	e3 5e       	subi	r30, 0xE3	; 227
     c06:	fe 4f       	sbci	r31, 0xFE	; 254
     c08:	b8 01       	movw	r22, r16
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN5Print5printERK6String>
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	ce 01       	movw	r24, r28
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000c22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	8a 01       	movw	r16, r20
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     c34:	fe 01       	movw	r30, r28
     c36:	e3 5e       	subi	r30, 0xE3	; 227
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	b8 01       	movw	r22, r16
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	ce 01       	movw	r24, r28
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000c54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	69 01       	movw	r12, r18
     c64:	7a 01       	movw	r14, r20
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     c6c:	fe 01       	movw	r30, r28
     c6e:	e3 5e       	subi	r30, 0xE3	; 227
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	2a e0       	ldi	r18, 0x0A	; 10
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	b7 01       	movw	r22, r14
     c78:	a6 01       	movw	r20, r12
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN5Print5printEli>
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	ce 01       	movw	r24, r28
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000c96 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     c96:	4f 92       	push	r4
     c98:	5f 92       	push	r5
     c9a:	6f 92       	push	r6
     c9c:	7f 92       	push	r7
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	7c 01       	movw	r14, r24
     cb4:	2a 01       	movw	r4, r20
     cb6:	3b 01       	movw	r6, r22
     cb8:	48 01       	movw	r8, r16
     cba:	59 01       	movw	r10, r18
     cbc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
     cc0:	69 e1       	ldi	r22, 0x19	; 25
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	8e e9       	ldi	r24, 0x9E	; 158
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     ccc:	6c e0       	ldi	r22, 0x0C	; 12
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	8e e9       	ldi	r24, 0x9E	; 158
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     cd8:	2a e0       	ldi	r18, 0x0A	; 10
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	b3 01       	movw	r22, r6
     cde:	a2 01       	movw	r20, r4
     ce0:	8e e9       	ldi	r24, 0x9E	; 158
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_ZN5Print5printEmi>
     ce8:	6c e2       	ldi	r22, 0x2C	; 44
     cea:	8e e9       	ldi	r24, 0x9E	; 158
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_ZN5Print5printEc>
     cf2:	2a e0       	ldi	r18, 0x0A	; 10
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	b5 01       	movw	r22, r10
     cf8:	a4 01       	movw	r20, r8
     cfa:	8e e9       	ldi	r24, 0x9E	; 158
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 b6 1c 	call	0x396c	; 0x396c <_ZN5Print7printlnEmi>
     d02:	e7 01       	movw	r28, r14
     d04:	c3 5e       	subi	r28, 0xE3	; 227
     d06:	de 4f       	sbci	r29, 0xFE	; 254
     d08:	6f ef       	ldi	r22, 0xFF	; 255
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	88 81       	ld	r24, Y
     d0e:	99 81       	ldd	r25, Y+1	; 0x01
     d10:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     d14:	2a e0       	ldi	r18, 0x0A	; 10
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	b3 01       	movw	r22, r6
     d1a:	a2 01       	movw	r20, r4
     d1c:	88 81       	ld	r24, Y
     d1e:	99 81       	ldd	r25, Y+1	; 0x01
     d20:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_ZN5Print5printEmi>
     d24:	67 e0       	ldi	r22, 0x07	; 7
     d26:	71 e0       	ldi	r23, 0x01	; 1
     d28:	88 81       	ld	r24, Y
     d2a:	99 81       	ldd	r25, Y+1	; 0x01
     d2c:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
     d30:	2a e0       	ldi	r18, 0x0A	; 10
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	b5 01       	movw	r22, r10
     d36:	a4 01       	movw	r20, r8
     d38:	88 81       	ld	r24, Y
     d3a:	99 81       	ldd	r25, Y+1	; 0x01
     d3c:	0e 94 b6 1c 	call	0x396c	; 0x396c <_ZN5Print7printlnEmi>
     d40:	40 e1       	ldi	r20, 0x10	; 16
     d42:	57 e2       	ldi	r21, 0x27	; 39
     d44:	66 ef       	ldi	r22, 0xF6	; 246
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	c7 01       	movw	r24, r14
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	bf 90       	pop	r11
     d58:	af 90       	pop	r10
     d5a:	9f 90       	pop	r9
     d5c:	8f 90       	pop	r8
     d5e:	7f 90       	pop	r7
     d60:	6f 90       	pop	r6
     d62:	5f 90       	pop	r5
     d64:	4f 90       	pop	r4
     d66:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000d6a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
     d78:	8b 01       	movw	r16, r22
     d7a:	7a 01       	movw	r14, r20
     d7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
     d80:	6b e8       	ldi	r22, 0x8B	; 139
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	8e e9       	ldi	r24, 0x9E	; 158
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     d8c:	b8 01       	movw	r22, r16
     d8e:	8e e9       	ldi	r24, 0x9E	; 158
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d96:	fe 01       	movw	r30, r28
     d98:	e3 5e       	subi	r30, 0xE3	; 227
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	b8 01       	movw	r22, r16
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	b7 01       	movw	r22, r14
     daa:	ce 01       	movw	r24, r28
     dac:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
     db0:	18 2f       	mov	r17, r24
     db2:	64 e8       	ldi	r22, 0x84	; 132
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	8e e9       	ldi	r24, 0x9E	; 158
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     dbe:	be 01       	movw	r22, r28
     dc0:	61 5f       	subi	r22, 0xF1	; 241
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	8e e9       	ldi	r24, 0x9E	; 158
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
     dcc:	81 2f       	mov	r24, r17
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ec 01       	movw	r28, r24
     df6:	6b 01       	movw	r12, r22
     df8:	49 01       	movw	r8, r18
     dfa:	5a 01       	movw	r10, r20
     dfc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
     e00:	6d e7       	ldi	r22, 0x7D	; 125
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	8e e9       	ldi	r24, 0x9E	; 158
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     e0c:	b6 01       	movw	r22, r12
     e0e:	8e e9       	ldi	r24, 0x9E	; 158
     e10:	93 e0       	ldi	r25, 0x03	; 3
     e12:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     e16:	2a e0       	ldi	r18, 0x0A	; 10
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	b5 01       	movw	r22, r10
     e1c:	a4 01       	movw	r20, r8
     e1e:	8e e9       	ldi	r24, 0x9E	; 158
     e20:	93 e0       	ldi	r25, 0x03	; 3
     e22:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN5Print7printlnEli>
     e26:	7e 01       	movw	r14, r28
     e28:	83 ee       	ldi	r24, 0xE3	; 227
     e2a:	e8 1a       	sub	r14, r24
     e2c:	8e ef       	ldi	r24, 0xFE	; 254
     e2e:	f8 0a       	sbc	r15, r24
     e30:	b6 01       	movw	r22, r12
     e32:	f7 01       	movw	r30, r14
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     e3c:	2a e0       	ldi	r18, 0x0A	; 10
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	b5 01       	movw	r22, r10
     e42:	a4 01       	movw	r20, r8
     e44:	f7 01       	movw	r30, r14
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN5Print7printlnEli>
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	b8 01       	movw	r22, r16
     e52:	ce 01       	movw	r24, r28
     e54:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
     e58:	18 2f       	mov	r17, r24
     e5a:	66 e7       	ldi	r22, 0x76	; 118
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	8e e9       	ldi	r24, 0x9E	; 158
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     e66:	be 01       	movw	r22, r28
     e68:	61 5f       	subi	r22, 0xF1	; 241
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	8e e9       	ldi	r24, 0x9E	; 158
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
     e74:	81 2f       	mov	r24, r17
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	8f 90       	pop	r8
     e8e:	08 95       	ret

00000e90 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
     ea6:	6b 01       	movw	r12, r22
     ea8:	7a 01       	movw	r14, r20
     eaa:	59 01       	movw	r10, r18
     eac:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
     eb0:	6f e6       	ldi	r22, 0x6F	; 111
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	8e e9       	ldi	r24, 0x9E	; 158
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     ebc:	b6 01       	movw	r22, r12
     ebe:	8e e9       	ldi	r24, 0x9E	; 158
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     ec6:	62 e2       	ldi	r22, 0x22	; 34
     ec8:	8e e9       	ldi	r24, 0x9E	; 158
     eca:	93 e0       	ldi	r25, 0x03	; 3
     ecc:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_ZN5Print5printEc>
     ed0:	b7 01       	movw	r22, r14
     ed2:	8e e9       	ldi	r24, 0x9E	; 158
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     eda:	62 e2       	ldi	r22, 0x22	; 34
     edc:	8e e9       	ldi	r24, 0x9E	; 158
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN5Print7printlnEc>
     ee4:	8e 01       	movw	r16, r28
     ee6:	03 5e       	subi	r16, 0xE3	; 227
     ee8:	1e 4f       	sbci	r17, 0xFE	; 254
     eea:	b6 01       	movw	r22, r12
     eec:	f8 01       	movw	r30, r16
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     ef6:	62 e2       	ldi	r22, 0x22	; 34
     ef8:	f8 01       	movw	r30, r16
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_ZN5Print5printEc>
     f02:	b7 01       	movw	r22, r14
     f04:	f8 01       	movw	r30, r16
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     f0e:	62 e2       	ldi	r22, 0x22	; 34
     f10:	f8 01       	movw	r30, r16
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN5Print7printlnEc>
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	b5 01       	movw	r22, r10
     f1e:	ce 01       	movw	r24, r28
     f20:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
     f24:	18 2f       	mov	r17, r24
     f26:	68 e6       	ldi	r22, 0x68	; 104
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	8e e9       	ldi	r24, 0x9E	; 158
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
     f32:	be 01       	movw	r22, r28
     f34:	61 5f       	subi	r22, 0xF1	; 241
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8e e9       	ldi	r24, 0x9E	; 158
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
     f40:	81 2f       	mov	r24, r17
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	08 95       	ret

00000f58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
     f62:	8a 01       	movw	r16, r20
     f64:	a9 01       	movw	r20, r18
     f66:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     f6a:	88 23       	and	r24, r24
     f6c:	41 f0       	breq	.+16     	; 0xf7e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     f6e:	b8 01       	movw	r22, r16
     f70:	ce 01       	movw	r24, r28
     f72:	0f 96       	adiw	r24, 0x0f	; 15
     f74:	0e 94 b5 24 	call	0x496a	; 0x496a <strcmp_P>
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	89 2b       	or	r24, r25
     f7c:	09 f0       	breq	.+2      	; 0xf80 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	82 2f       	mov	r24, r18
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	08 95       	ret

00000f8c <_ZN13Adafruit_FONA5beginEhh>:
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	f6 2e       	mov	r15, r22
     fa0:	e4 2e       	mov	r14, r20
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <_Znwj>
     faa:	8c 01       	movw	r16, r24
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	4e 2d       	mov	r20, r14
     fb0:	6f 2d       	mov	r22, r15
     fb2:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN14SoftwareSerialC1Ehhb>
     fb6:	7e 01       	movw	r14, r28
     fb8:	83 ee       	ldi	r24, 0xE3	; 227
     fba:	e8 1a       	sub	r14, r24
     fbc:	8e ef       	ldi	r24, 0xFE	; 254
     fbe:	f8 0a       	sbc	r15, r24
     fc0:	d7 01       	movw	r26, r14
     fc2:	0d 93       	st	X+, r16
     fc4:	1c 93       	st	X, r17
     fc6:	40 ec       	ldi	r20, 0xC0	; 192
     fc8:	52 e1       	ldi	r21, 0x12	; 18
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	c8 01       	movw	r24, r16
     fd0:	0e 94 a6 21 	call	0x434c	; 0x434c <_ZN14SoftwareSerial5beginEl>
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd8:	0e 94 67 1e 	call	0x3cce	; 0x3cce <pinMode>
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	8c 85       	ldd	r24, Y+12	; 0x0c
     fe0:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
     fe4:	6a e0       	ldi	r22, 0x0A	; 10
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff4:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
     ff8:	64 e6       	ldi	r22, 0x64	; 100
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	8c 85       	ldd	r24, Y+12	; 0x0c
    1008:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    100c:	65 e6       	ldi	r22, 0x65	; 101
    100e:	73 e0       	ldi	r23, 0x03	; 3
    1010:	8e e9       	ldi	r24, 0x9E	; 158
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1018:	8e e0       	ldi	r24, 0x0E	; 14
    101a:	c8 2e       	mov	r12, r24
    101c:	d1 2c       	mov	r13, r1
    101e:	8e 01       	movw	r16, r28
    1020:	05 5e       	subi	r16, 0xE5	; 229
    1022:	1e 4f       	sbci	r17, 0xFE	; 254
    1024:	f7 01       	movw	r30, r14
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	04 80       	ldd	r0, Z+4	; 0x04
    1032:	f5 81       	ldd	r31, Z+5	; 0x05
    1034:	e0 2d       	mov	r30, r0
    1036:	09 95       	icall
    1038:	89 2b       	or	r24, r25
    103a:	59 f0       	breq	.+22     	; 0x1052 <_ZN13Adafruit_FONA5beginEhh+0xc6>
    103c:	f7 01       	movw	r30, r14
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	dc 01       	movw	r26, r24
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	06 80       	ldd	r0, Z+6	; 0x06
    104a:	f7 81       	ldd	r31, Z+7	; 0x07
    104c:	e0 2d       	mov	r30, r0
    104e:	09 95       	icall
    1050:	e9 cf       	rjmp	.-46     	; 0x1024 <_ZN13Adafruit_FONA5beginEhh+0x98>
    1052:	f8 01       	movw	r30, r16
    1054:	40 81       	ld	r20, Z
    1056:	51 81       	ldd	r21, Z+1	; 0x01
    1058:	24 ef       	ldi	r18, 0xF4	; 244
    105a:	31 e0       	ldi	r19, 0x01	; 1
    105c:	62 e6       	ldi	r22, 0x62	; 98
    105e:	73 e0       	ldi	r23, 0x03	; 3
    1060:	ce 01       	movw	r24, r28
    1062:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1066:	81 11       	cpse	r24, r1
    1068:	34 c0       	rjmp	.+104    	; 0x10d2 <_ZN13Adafruit_FONA5beginEhh+0x146>
    106a:	d7 01       	movw	r26, r14
    106c:	8d 91       	ld	r24, X+
    106e:	9c 91       	ld	r25, X
    1070:	dc 01       	movw	r26, r24
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	04 80       	ldd	r0, Z+4	; 0x04
    1078:	f5 81       	ldd	r31, Z+5	; 0x05
    107a:	e0 2d       	mov	r30, r0
    107c:	09 95       	icall
    107e:	89 2b       	or	r24, r25
    1080:	59 f0       	breq	.+22     	; 0x1098 <_ZN13Adafruit_FONA5beginEhh+0x10c>
    1082:	f7 01       	movw	r30, r14
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	dc 01       	movw	r26, r24
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	06 80       	ldd	r0, Z+6	; 0x06
    1090:	f7 81       	ldd	r31, Z+7	; 0x07
    1092:	e0 2d       	mov	r30, r0
    1094:	09 95       	icall
    1096:	e9 cf       	rjmp	.-46     	; 0x106a <_ZN13Adafruit_FONA5beginEhh+0xde>
    1098:	24 ef       	ldi	r18, 0xF4	; 244
    109a:	31 e0       	ldi	r19, 0x01	; 1
    109c:	4f e5       	ldi	r20, 0x5F	; 95
    109e:	53 e0       	ldi	r21, 0x03	; 3
    10a0:	6c e5       	ldi	r22, 0x5C	; 92
    10a2:	73 e0       	ldi	r23, 0x03	; 3
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10aa:	81 11       	cpse	r24, r1
    10ac:	12 c0       	rjmp	.+36     	; 0x10d2 <_ZN13Adafruit_FONA5beginEhh+0x146>
    10ae:	64 ef       	ldi	r22, 0xF4	; 244
    10b0:	71 e0       	ldi	r23, 0x01	; 1
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    10ba:	b1 e0       	ldi	r27, 0x01	; 1
    10bc:	cb 1a       	sub	r12, r27
    10be:	d1 08       	sbc	r13, r1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <_ZN13Adafruit_FONA5beginEhh+0x138>
    10c2:	b0 cf       	rjmp	.-160    	; 0x1024 <_ZN13Adafruit_FONA5beginEhh+0x98>
    10c4:	5e c0       	rjmp	.+188    	; 0x1182 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
    10c6:	64 e6       	ldi	r22, 0x64	; 100
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    10d2:	f8 01       	movw	r30, r16
    10d4:	40 81       	ld	r20, Z
    10d6:	51 81       	ldd	r21, Z+1	; 0x01
    10d8:	24 ef       	ldi	r18, 0xF4	; 244
    10da:	31 e0       	ldi	r19, 0x01	; 1
    10dc:	6f e2       	ldi	r22, 0x2F	; 47
    10de:	73 e0       	ldi	r23, 0x03	; 3
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10e6:	64 e6       	ldi	r22, 0x64	; 100
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    10f2:	d8 01       	movw	r26, r16
    10f4:	4d 91       	ld	r20, X+
    10f6:	5c 91       	ld	r21, X
    10f8:	24 ef       	ldi	r18, 0xF4	; 244
    10fa:	31 e0       	ldi	r19, 0x01	; 1
    10fc:	6a e2       	ldi	r22, 0x2A	; 42
    10fe:	73 e0       	ldi	r23, 0x03	; 3
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1106:	81 11       	cpse	r24, r1
    1108:	02 c0       	rjmp	.+4      	; 0x110e <_ZN13Adafruit_FONA5beginEhh+0x182>
    110a:	12 e0       	ldi	r17, 0x02	; 2
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <_ZN13Adafruit_FONA5beginEhh+0x184>
    110e:	11 e0       	ldi	r17, 0x01	; 1
    1110:	64 e6       	ldi	r22, 0x64	; 100
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    111c:	ce 01       	movw	r24, r28
    111e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
    1122:	63 e2       	ldi	r22, 0x23	; 35
    1124:	73 e0       	ldi	r23, 0x03	; 3
    1126:	8e e9       	ldi	r24, 0x9E	; 158
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    112e:	69 e0       	ldi	r22, 0x09	; 9
    1130:	71 e0       	ldi	r23, 0x01	; 1
    1132:	8e e9       	ldi	r24, 0x9E	; 158
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
    113a:	69 e0       	ldi	r22, 0x09	; 9
    113c:	71 e0       	ldi	r23, 0x01	; 1
    113e:	f7 01       	movw	r30, r14
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	64 ef       	ldi	r22, 0xF4	; 244
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	ce 01       	movw	r24, r28
    1150:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
    1154:	6c e1       	ldi	r22, 0x1C	; 28
    1156:	73 e0       	ldi	r23, 0x03	; 3
    1158:	8e e9       	ldi	r24, 0x9E	; 158
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1160:	2f 96       	adiw	r28, 0x0f	; 15
    1162:	be 01       	movw	r22, r28
    1164:	8e e9       	ldi	r24, 0x9E	; 158
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
    116c:	61 e1       	ldi	r22, 0x11	; 17
    116e:	73 e0       	ldi	r23, 0x03	; 3
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 c7 24 	call	0x498e	; 0x498e <strstr_P>
    1176:	89 2b       	or	r24, r25
    1178:	11 f4       	brne	.+4      	; 0x117e <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	35 c0       	rjmp	.+106    	; 0x11e8 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    117e:	81 2f       	mov	r24, r17
    1180:	33 c0       	rjmp	.+102    	; 0x11e8 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1182:	d8 01       	movw	r26, r16
    1184:	4d 91       	ld	r20, X+
    1186:	5c 91       	ld	r21, X
    1188:	24 ef       	ldi	r18, 0xF4	; 244
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	69 e5       	ldi	r22, 0x59	; 89
    118e:	73 e0       	ldi	r23, 0x03	; 3
    1190:	ce 01       	movw	r24, r28
    1192:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1196:	64 e6       	ldi	r22, 0x64	; 100
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    11a2:	f8 01       	movw	r30, r16
    11a4:	40 81       	ld	r20, Z
    11a6:	51 81       	ldd	r21, Z+1	; 0x01
    11a8:	24 ef       	ldi	r18, 0xF4	; 244
    11aa:	31 e0       	ldi	r19, 0x01	; 1
    11ac:	66 e5       	ldi	r22, 0x56	; 86
    11ae:	73 e0       	ldi	r23, 0x03	; 3
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11b6:	64 e6       	ldi	r22, 0x64	; 100
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    11c2:	d8 01       	movw	r26, r16
    11c4:	4d 91       	ld	r20, X+
    11c6:	5c 91       	ld	r21, X
    11c8:	24 ef       	ldi	r18, 0xF4	; 244
    11ca:	31 e0       	ldi	r19, 0x01	; 1
    11cc:	63 e5       	ldi	r22, 0x53	; 83
    11ce:	73 e0       	ldi	r23, 0x03	; 3
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11d6:	81 11       	cpse	r24, r1
    11d8:	76 cf       	rjmp	.-276    	; 0x10c6 <_ZN13Adafruit_FONA5beginEhh+0x13a>
    11da:	64 e3       	ldi	r22, 0x34	; 52
    11dc:	73 e0       	ldi	r23, 0x03	; 3
    11de:	8e e9       	ldi	r24, 0x9E	; 158
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	08 95       	ret

000011fa <_ZN13Adafruit_FONA9HTTP_initEv>:
    11fa:	fc 01       	movw	r30, r24
    11fc:	e5 5e       	subi	r30, 0xE5	; 229
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	40 81       	ld	r20, Z
    1202:	51 81       	ldd	r21, Z+1	; 0x01
    1204:	24 ef       	ldi	r18, 0xF4	; 244
    1206:	31 e0       	ldi	r19, 0x01	; 1
    1208:	66 e5       	ldi	r22, 0x56	; 86
    120a:	71 e0       	ldi	r23, 0x01	; 1
    120c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001210 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1210:	fc 01       	movw	r30, r24
    1212:	e5 5e       	subi	r30, 0xE5	; 229
    1214:	fe 4f       	sbci	r31, 0xFE	; 254
    1216:	40 81       	ld	r20, Z
    1218:	51 81       	ldd	r21, Z+1	; 0x01
    121a:	24 ef       	ldi	r18, 0xF4	; 244
    121c:	31 e0       	ldi	r19, 0x01	; 1
    121e:	6a e4       	ldi	r22, 0x4A	; 74
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001226 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>:
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	00 d0       	rcall	.+0      	; 0x1234 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0xe>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x10>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x12>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	8c 01       	movw	r16, r24
    123e:	7b 01       	movw	r14, r22
    1240:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN13Adafruit_FONA9HTTP_termEv>
    1244:	c8 01       	movw	r24, r16
    1246:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN13Adafruit_FONA9HTTP_initEv>
    124a:	88 23       	and	r24, r24
    124c:	59 f1       	breq	.+86     	; 0x12a4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x7e>
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	66 ea       	ldi	r22, 0xA6	; 166
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	c8 01       	movw	r24, r16
    125c:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1260:	88 23       	and	r24, r24
    1262:	11 f1       	breq	.+68     	; 0x12a8 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x82>
    1264:	a7 01       	movw	r20, r14
    1266:	62 ea       	ldi	r22, 0xA2	; 162
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	c8 01       	movw	r24, r16
    126c:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1270:	88 23       	and	r24, r24
    1272:	e1 f0       	breq	.+56     	; 0x12ac <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x86>
    1274:	b8 01       	movw	r22, r16
    1276:	6b 5e       	subi	r22, 0xEB	; 235
    1278:	7e 4f       	sbci	r23, 0xFE	; 254
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <_ZN6StringC1ERKS_>
    1282:	ae 01       	movw	r20, r28
    1284:	4f 5f       	subi	r20, 0xFF	; 255
    1286:	5f 4f       	sbci	r21, 0xFF	; 255
    1288:	6f e9       	ldi	r22, 0x9F	; 159
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	c8 01       	movw	r24, r16
    128e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1292:	18 2f       	mov	r17, r24
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <_ZN6StringD1Ev>
    129c:	11 23       	and	r17, r17
    129e:	41 f0       	breq	.+16     	; 0x12b0 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8a>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    12b0:	80 e4       	ldi	r24, 0x40	; 64
    12b2:	26 96       	adiw	r28, 0x06	; 6
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	08 95       	ret

000012cc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
    12de:	68 01       	movw	r12, r16
    12e0:	87 01       	movw	r16, r14
    12e2:	0e 94 ee 06 	call	0xddc	; 0xddc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    12e6:	b6 01       	movw	r22, r12
    12e8:	ce 01       	movw	r24, r28
    12ea:	0f 96       	adiw	r24, 0x0f	; 15
    12ec:	0e 94 b5 24 	call	0x496a	; 0x496a <strcmp_P>
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	89 2b       	or	r24, r25
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	82 2f       	mov	r24, r18
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	ec 01       	movw	r28, r24
    131a:	79 01       	movw	r14, r18
    131c:	98 01       	movw	r18, r16
    131e:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    1322:	b7 01       	movw	r22, r14
    1324:	ce 01       	movw	r24, r28
    1326:	0f 96       	adiw	r24, 0x0f	; 15
    1328:	0e 94 b5 24 	call	0x496a	; 0x496a <strcmp_P>
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	89 2b       	or	r24, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	82 2f       	mov	r24, r18
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	08 95       	ret

00001344 <_ZN13Adafruit_FONA10enableGPRSEb>:
    1344:	7f 92       	push	r7
    1346:	8f 92       	push	r8
    1348:	9f 92       	push	r9
    134a:	af 92       	push	r10
    134c:	bf 92       	push	r11
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
    1360:	28 ee       	ldi	r18, 0xE8	; 232
    1362:	3d ef       	ldi	r19, 0xFD	; 253
    1364:	66 23       	and	r22, r22
    1366:	09 f4       	brne	.+2      	; 0x136a <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    1368:	1f c1       	rjmp	.+574    	; 0x15a8 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    136a:	4d eb       	ldi	r20, 0xBD	; 189
    136c:	52 e0       	ldi	r21, 0x02	; 2
    136e:	62 eb       	ldi	r22, 0xB2	; 178
    1370:	72 e0       	ldi	r23, 0x02	; 2
    1372:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1376:	81 11       	cpse	r24, r1
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	78 2e       	mov	r7, r24
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1380:	77 24       	eor	r7, r7
    1382:	73 94       	inc	r7
    1384:	7e 01       	movw	r14, r28
    1386:	85 ee       	ldi	r24, 0xE5	; 229
    1388:	e8 1a       	sub	r14, r24
    138a:	8e ef       	ldi	r24, 0xFE	; 254
    138c:	f8 0a       	sbc	r15, r24
    138e:	f7 01       	movw	r30, r14
    1390:	40 81       	ld	r20, Z
    1392:	51 81       	ldd	r21, Z+1	; 0x01
    1394:	20 e1       	ldi	r18, 0x10	; 16
    1396:	37 e2       	ldi	r19, 0x27	; 39
    1398:	67 ea       	ldi	r22, 0xA7	; 167
    139a:	72 e0       	ldi	r23, 0x02	; 2
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    13a2:	88 23       	and	r24, r24
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    13a6:	25 c1       	rjmp	.+586    	; 0x15f2 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    13a8:	f7 01       	movw	r30, r14
    13aa:	40 81       	ld	r20, Z
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	20 e1       	ldi	r18, 0x10	; 16
    13b0:	37 e2       	ldi	r19, 0x27	; 39
    13b2:	69 e8       	ldi	r22, 0x89	; 137
    13b4:	72 e0       	ldi	r23, 0x02	; 2
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    13c0:	1a c1       	rjmp	.+564    	; 0x15f6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    13c2:	4e 01       	movw	r8, r28
    13c4:	f2 ef       	ldi	r31, 0xF2	; 242
    13c6:	8f 1a       	sub	r8, r31
    13c8:	fe ef       	ldi	r31, 0xFE	; 254
    13ca:	9f 0a       	sbc	r9, r31
    13cc:	f4 01       	movw	r30, r8
    13ce:	40 81       	ld	r20, Z
    13d0:	51 81       	ldd	r21, Z+1	; 0x01
    13d2:	41 15       	cp	r20, r1
    13d4:	51 05       	cpc	r21, r1
    13d6:	71 f4       	brne	.+28     	; 0x13f4 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    13d8:	f7 01       	movw	r30, r14
    13da:	40 81       	ld	r20, Z
    13dc:	51 81       	ldd	r21, Z+1	; 0x01
    13de:	2f ef       	ldi	r18, 0xFF	; 255
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	64 e2       	ldi	r22, 0x24	; 36
    13e4:	72 e0       	ldi	r23, 0x02	; 2
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    13ec:	81 11       	cpse	r24, r1
    13ee:	ce c0       	rjmp	.+412    	; 0x158c <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    13f0:	89 e0       	ldi	r24, 0x09	; 9
    13f2:	0e c1       	rjmp	.+540    	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    13f4:	f7 01       	movw	r30, r14
    13f6:	20 81       	ld	r18, Z
    13f8:	31 81       	ldd	r19, Z+1	; 0x01
    13fa:	00 e1       	ldi	r16, 0x10	; 16
    13fc:	17 e2       	ldi	r17, 0x27	; 39
    13fe:	65 e7       	ldi	r22, 0x75	; 117
    1400:	72 e0       	ldi	r23, 0x02	; 2
    1402:	ce 01       	movw	r24, r28
    1404:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1408:	88 23       	and	r24, r24
    140a:	09 f4       	brne	.+2      	; 0x140e <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    140c:	f6 c0       	rjmp	.+492    	; 0x15fa <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    140e:	ce 01       	movw	r24, r28
    1410:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN13Adafruit_FONA10flushInputEv>
    1414:	8e 01       	movw	r16, r28
    1416:	03 5e       	subi	r16, 0xE3	; 227
    1418:	1e 4f       	sbci	r17, 0xFE	; 254
    141a:	6b e6       	ldi	r22, 0x6B	; 107
    141c:	72 e0       	ldi	r23, 0x02	; 2
    141e:	f8 01       	movw	r30, r16
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1428:	f4 01       	movw	r30, r8
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	f8 01       	movw	r30, r16
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1438:	5e 01       	movw	r10, r28
    143a:	f0 ef       	ldi	r31, 0xF0	; 240
    143c:	af 1a       	sub	r10, r31
    143e:	fe ef       	ldi	r31, 0xFE	; 254
    1440:	bf 0a       	sbc	r11, r31
    1442:	f5 01       	movw	r30, r10
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	89 2b       	or	r24, r25
    144a:	79 f0       	breq	.+30     	; 0x146a <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    144c:	65 e2       	ldi	r22, 0x25	; 37
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	f8 01       	movw	r30, r16
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    145a:	f5 01       	movw	r30, r10
    145c:	60 81       	ld	r22, Z
    145e:	71 81       	ldd	r23, Z+1	; 0x01
    1460:	f8 01       	movw	r30, r16
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    146a:	6e 01       	movw	r12, r28
    146c:	fe ee       	ldi	r31, 0xEE	; 238
    146e:	cf 1a       	sub	r12, r31
    1470:	fe ef       	ldi	r31, 0xFE	; 254
    1472:	df 0a       	sbc	r13, r31
    1474:	f6 01       	movw	r30, r12
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	89 2b       	or	r24, r25
    147c:	79 f0       	breq	.+30     	; 0x149c <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    147e:	65 e2       	ldi	r22, 0x25	; 37
    1480:	71 e0       	ldi	r23, 0x01	; 1
    1482:	f8 01       	movw	r30, r16
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    148c:	f6 01       	movw	r30, r12
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	f8 01       	movw	r30, r16
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    149c:	67 e2       	ldi	r22, 0x27	; 39
    149e:	71 e0       	ldi	r23, 0x01	; 1
    14a0:	f8 01       	movw	r30, r16
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
    14aa:	64 e6       	ldi	r22, 0x64	; 100
    14ac:	72 e0       	ldi	r23, 0x02	; 2
    14ae:	8e e9       	ldi	r24, 0x9E	; 158
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    14b6:	6a e5       	ldi	r22, 0x5A	; 90
    14b8:	72 e0       	ldi	r23, 0x02	; 2
    14ba:	8e e9       	ldi	r24, 0x9E	; 158
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    14c2:	f4 01       	movw	r30, r8
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	8e e9       	ldi	r24, 0x9E	; 158
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    14d0:	f5 01       	movw	r30, r10
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	89 2b       	or	r24, r25
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    14da:	65 e2       	ldi	r22, 0x25	; 37
    14dc:	71 e0       	ldi	r23, 0x01	; 1
    14de:	8e e9       	ldi	r24, 0x9E	; 158
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    14e6:	f5 01       	movw	r30, r10
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	8e e9       	ldi	r24, 0x9E	; 158
    14ee:	93 e0       	ldi	r25, 0x03	; 3
    14f0:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    14f4:	f6 01       	movw	r30, r12
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	89 2b       	or	r24, r25
    14fc:	69 f0       	breq	.+26     	; 0x1518 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    14fe:	65 e2       	ldi	r22, 0x25	; 37
    1500:	71 e0       	ldi	r23, 0x01	; 1
    1502:	8e e9       	ldi	r24, 0x9E	; 158
    1504:	93 e0       	ldi	r25, 0x03	; 3
    1506:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    150a:	f6 01       	movw	r30, r12
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	8e e9       	ldi	r24, 0x9E	; 158
    1512:	93 e0       	ldi	r25, 0x03	; 3
    1514:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1518:	67 e2       	ldi	r22, 0x27	; 39
    151a:	71 e0       	ldi	r23, 0x01	; 1
    151c:	8e e9       	ldi	r24, 0x9E	; 158
    151e:	93 e0       	ldi	r25, 0x03	; 3
    1520:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
    1524:	f7 01       	movw	r30, r14
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	40 e1       	ldi	r20, 0x10	; 16
    152c:	57 e2       	ldi	r21, 0x27	; 39
    152e:	ce 01       	movw	r24, r28
    1530:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1534:	88 23       	and	r24, r24
    1536:	09 f4       	brne	.+2      	; 0x153a <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    1538:	62 c0       	rjmp	.+196    	; 0x15fe <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    153a:	f5 01       	movw	r30, r10
    153c:	40 81       	ld	r20, Z
    153e:	51 81       	ldd	r21, Z+1	; 0x01
    1540:	41 15       	cp	r20, r1
    1542:	51 05       	cpc	r21, r1
    1544:	39 f4       	brne	.+14     	; 0x1554 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    1546:	f6 01       	movw	r30, r12
    1548:	40 81       	ld	r20, Z
    154a:	51 81       	ldd	r21, Z+1	; 0x01
    154c:	41 15       	cp	r20, r1
    154e:	51 05       	cpc	r21, r1
    1550:	79 f4       	brne	.+30     	; 0x1570 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    1552:	42 cf       	rjmp	.-380    	; 0x13d8 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1554:	f7 01       	movw	r30, r14
    1556:	20 81       	ld	r18, Z
    1558:	31 81       	ldd	r19, Z+1	; 0x01
    155a:	00 e1       	ldi	r16, 0x10	; 16
    155c:	17 e2       	ldi	r17, 0x27	; 39
    155e:	65 e4       	ldi	r22, 0x45	; 69
    1560:	72 e0       	ldi	r23, 0x02	; 2
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1568:	81 11       	cpse	r24, r1
    156a:	ed cf       	rjmp	.-38     	; 0x1546 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    156c:	87 e0       	ldi	r24, 0x07	; 7
    156e:	50 c0       	rjmp	.+160    	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1570:	f7 01       	movw	r30, r14
    1572:	20 81       	ld	r18, Z
    1574:	31 81       	ldd	r19, Z+1	; 0x01
    1576:	00 e1       	ldi	r16, 0x10	; 16
    1578:	17 e2       	ldi	r17, 0x27	; 39
    157a:	61 e3       	ldi	r22, 0x31	; 49
    157c:	72 e0       	ldi	r23, 0x02	; 2
    157e:	ce 01       	movw	r24, r28
    1580:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1584:	81 11       	cpse	r24, r1
    1586:	28 cf       	rjmp	.-432    	; 0x13d8 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1588:	88 e0       	ldi	r24, 0x08	; 8
    158a:	42 c0       	rjmp	.+132    	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    158c:	f7 01       	movw	r30, r14
    158e:	40 81       	ld	r20, Z
    1590:	51 81       	ldd	r21, Z+1	; 0x01
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	6b e1       	ldi	r22, 0x1B	; 27
    1598:	72 e0       	ldi	r23, 0x02	; 2
    159a:	ce 01       	movw	r24, r28
    159c:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    15a0:	88 23       	and	r24, r24
    15a2:	79 f1       	breq	.+94     	; 0x1602 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    15a4:	87 2d       	mov	r24, r7
    15a6:	34 c0       	rjmp	.+104    	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    15a8:	43 e1       	ldi	r20, 0x13	; 19
    15aa:	52 e0       	ldi	r21, 0x02	; 2
    15ac:	68 e0       	ldi	r22, 0x08	; 8
    15ae:	72 e0       	ldi	r23, 0x02	; 2
    15b0:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    15b4:	88 23       	and	r24, r24
    15b6:	39 f1       	breq	.+78     	; 0x1606 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    15b8:	8e 01       	movw	r16, r28
    15ba:	05 5e       	subi	r16, 0xE5	; 229
    15bc:	1e 4f       	sbci	r17, 0xFE	; 254
    15be:	f8 01       	movw	r30, r16
    15c0:	40 81       	ld	r20, Z
    15c2:	51 81       	ldd	r21, Z+1	; 0x01
    15c4:	20 e1       	ldi	r18, 0x10	; 16
    15c6:	37 e2       	ldi	r19, 0x27	; 39
    15c8:	6b ef       	ldi	r22, 0xFB	; 251
    15ca:	71 e0       	ldi	r23, 0x01	; 1
    15cc:	ce 01       	movw	r24, r28
    15ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    15d2:	88 23       	and	r24, r24
    15d4:	d1 f0       	breq	.+52     	; 0x160a <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    15d6:	f8 01       	movw	r30, r16
    15d8:	40 81       	ld	r20, Z
    15da:	51 81       	ldd	r21, Z+1	; 0x01
    15dc:	20 e1       	ldi	r18, 0x10	; 16
    15de:	37 e2       	ldi	r19, 0x27	; 39
    15e0:	60 ef       	ldi	r22, 0xF0	; 240
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    15ea:	88 23       	and	r24, r24
    15ec:	81 f0       	breq	.+32     	; 0x160e <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    15f6:	84 e0       	ldi	r24, 0x04	; 4
    15f8:	0b c0       	rjmp	.+22     	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    15fa:	85 e0       	ldi	r24, 0x05	; 5
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    15fe:	86 e0       	ldi	r24, 0x06	; 6
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1602:	8a e0       	ldi	r24, 0x0A	; 10
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1606:	8b e0       	ldi	r24, 0x0B	; 11
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    160a:	8c e0       	ldi	r24, 0x0C	; 12
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    160e:	8d e0       	ldi	r24, 0x0D	; 13
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	bf 90       	pop	r11
    1622:	af 90       	pop	r10
    1624:	9f 90       	pop	r9
    1626:	8f 90       	pop	r8
    1628:	7f 90       	pop	r7
    162a:	08 95       	ret

0000162c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	5b 01       	movw	r10, r22
    1640:	6a 01       	movw	r12, r20
    1642:	e2 2e       	mov	r14, r18
    1644:	0f 96       	adiw	r24, 0x0f	; 15
    1646:	0e 94 c7 24 	call	0x498e	; 0x498e <strstr_P>
    164a:	ec 01       	movw	r28, r24
    164c:	89 2b       	or	r24, r25
    164e:	c1 f0       	breq	.+48     	; 0x1680 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1650:	c5 01       	movw	r24, r10
    1652:	0e 94 be 24 	call	0x497c	; 0x497c <__strlen_P>
    1656:	8c 0f       	add	r24, r28
    1658:	9d 1f       	adc	r25, r29
    165a:	c0 e0       	ldi	r28, 0x00	; 0
    165c:	f1 2c       	mov	r15, r1
    165e:	c0 17       	cp	r28, r16
    1660:	41 f0       	breq	.+16     	; 0x1672 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1662:	b7 01       	movw	r22, r14
    1664:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <strchr>
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	51 f0       	breq	.+20     	; 0x1680 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	cf 5f       	subi	r28, 0xFF	; 255
    1670:	f6 cf       	rjmp	.-20     	; 0x165e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1672:	0e 94 97 24 	call	0x492e	; 0x492e <atoi>
    1676:	f6 01       	movw	r30, r12
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	cf 90       	pop	r12
    1690:	bf 90       	pop	r11
    1692:	af 90       	pop	r10
    1694:	08 95       	ret

00001696 <_ZN13Adafruit_FONA12HTTP_readallEjPc>:
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <_ZN13Adafruit_FONA12HTTP_readallEjPc+0x12>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	7c 01       	movw	r14, r24
    16ae:	6a 01       	movw	r12, r20
    16b0:	9b 01       	movw	r18, r22
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	31 09       	sbc	r19, r1
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	04 ef       	ldi	r16, 0xF4	; 244
    16bc:	11 e0       	ldi	r17, 0x01	; 1
    16be:	6e eb       	ldi	r22, 0xBE	; 190
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	0e 94 ee 06 	call	0xddc	; 0xddc <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    16c6:	00 e0       	ldi	r16, 0x00	; 0
    16c8:	2c e2       	ldi	r18, 0x2C	; 44
    16ca:	ae 01       	movw	r20, r28
    16cc:	4f 5f       	subi	r20, 0xFF	; 255
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	62 eb       	ldi	r22, 0xB2	; 178
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	c7 01       	movw	r24, r14
    16d6:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    16da:	88 23       	and	r24, r24
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <_ZN13Adafruit_FONA12HTTP_readallEjPc+0x60>
    16de:	49 81       	ldd	r20, Y+1	; 0x01
    16e0:	5a 81       	ldd	r21, Y+2	; 0x02
    16e2:	b6 01       	movw	r22, r12
    16e4:	c7 01       	movw	r24, r14
    16e6:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN13Adafruit_FONA19internalReadRawDataEPcj>
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	64 ef       	ldi	r22, 0xF4	; 244
    16ee:	71 e0       	ldi	r23, 0x01	; 1
    16f0:	c7 01       	movw	r24, r14
    16f2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	cf 90       	pop	r12
    170a:	08 95       	ret

0000170c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    170c:	4f 92       	push	r4
    170e:	5f 92       	push	r5
    1710:	6f 92       	push	r6
    1712:	7f 92       	push	r7
    1714:	af 92       	push	r10
    1716:	bf 92       	push	r11
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	ec 01       	movw	r28, r24
    172a:	6a 01       	movw	r12, r20
    172c:	59 01       	movw	r10, r18
    172e:	27 01       	movw	r4, r14
    1730:	38 01       	movw	r6, r16
    1732:	fc 01       	movw	r30, r24
    1734:	e5 5e       	subi	r30, 0xE5	; 229
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	00 81       	ld	r16, Z
    173a:	11 81       	ldd	r17, Z+1	; 0x01
    173c:	26 2f       	mov	r18, r22
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	84 ef       	ldi	r24, 0xF4	; 244
    1746:	e8 2e       	mov	r14, r24
    1748:	ff 24       	eor	r15, r15
    174a:	f3 94       	inc	r15
    174c:	67 ee       	ldi	r22, 0xE7	; 231
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    1756:	88 23       	and	r24, r24
    1758:	09 f1       	breq	.+66     	; 0x179c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x90>
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	b2 01       	movw	r22, r4
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
    1764:	01 e0       	ldi	r16, 0x01	; 1
    1766:	2c e2       	ldi	r18, 0x2C	; 44
    1768:	a6 01       	movw	r20, r12
    176a:	6a ed       	ldi	r22, 0xDA	; 218
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1774:	88 23       	and	r24, r24
    1776:	a1 f0       	breq	.+40     	; 0x17a0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x94>
    1778:	02 e0       	ldi	r16, 0x02	; 2
    177a:	2c e2       	ldi	r18, 0x2C	; 44
    177c:	a5 01       	movw	r20, r10
    177e:	6d ec       	ldi	r22, 0xCD	; 205
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	ce 01       	movw	r24, r28
    1784:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1788:	88 23       	and	r24, r24
    178a:	61 f0       	breq	.+24     	; 0x17a4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x98>
    178c:	f6 01       	movw	r30, r12
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	88 3c       	cpi	r24, 0xC8	; 200
    1794:	91 05       	cpc	r25, r1
    1796:	41 f4       	brne	.+16     	; 0x17a8 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9c>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    179c:	87 e0       	ldi	r24, 0x07	; 7
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    17a0:	88 e0       	ldi	r24, 0x08	; 8
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    17a4:	89 e0       	ldi	r24, 0x09	; 9
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    17a8:	80 e8       	ldi	r24, 0x80	; 128
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	7f 90       	pop	r7
    17c0:	6f 90       	pop	r6
    17c2:	5f 90       	pop	r5
    17c4:	4f 90       	pop	r4
    17c6:	08 95       	ret

000017c8 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc>:
    17c8:	2f 92       	push	r2
    17ca:	3f 92       	push	r3
    17cc:	4f 92       	push	r4
    17ce:	5f 92       	push	r5
    17d0:	6f 92       	push	r6
    17d2:	7f 92       	push	r7
    17d4:	8f 92       	push	r8
    17d6:	9f 92       	push	r9
    17d8:	af 92       	push	r10
    17da:	bf 92       	push	r11
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x26>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x28>
    17f0:	1f 92       	push	r1
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	3c 01       	movw	r6, r24
    17f8:	5b 83       	std	Y+3, r21	; 0x03
    17fa:	4a 83       	std	Y+2, r20	; 0x02
    17fc:	19 01       	movw	r2, r18
    17fe:	28 01       	movw	r4, r16
    1800:	fd 82       	std	Y+5, r15	; 0x05
    1802:	ec 82       	std	Y+4, r14	; 0x04
    1804:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	8f 70       	andi	r24, 0x0F	; 15
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	08 f0       	brcs	.+2      	; 0x1812 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x4a>
    1810:	59 c0       	rjmp	.+178    	; 0x18c4 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfc>
    1812:	4a 81       	ldd	r20, Y+2	; 0x02
    1814:	5b 81       	ldd	r21, Y+3	; 0x03
    1816:	6a ea       	ldi	r22, 0xAA	; 170
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	c3 01       	movw	r24, r6
    181c:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1820:	81 11       	cpse	r24, r1
    1822:	03 c0       	rjmp	.+6      	; 0x182a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x62>
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	80 61       	ori	r24, 0x10	; 16
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	a2 01       	movw	r20, r4
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	00 ec       	ldi	r16, 0xC0	; 192
    1832:	14 ed       	ldi	r17, 0xD4	; 212
    1834:	21 e0       	ldi	r18, 0x01	; 1
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	c3 01       	movw	r24, r6
    183a:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    183e:	81 11       	cpse	r24, r1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x80>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	85 60       	ori	r24, 0x05	; 5
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    1848:	f3 01       	movw	r30, r6
    184a:	e3 5e       	subi	r30, 0xE3	; 227
    184c:	fe 4f       	sbci	r31, 0xFE	; 254
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	dc 01       	movw	r26, r24
    1854:	ed 91       	ld	r30, X+
    1856:	fc 91       	ld	r31, X
    1858:	02 80       	ldd	r0, Z+2	; 0x02
    185a:	f3 81       	ldd	r31, Z+3	; 0x03
    185c:	e0 2d       	mov	r30, r0
    185e:	a2 01       	movw	r20, r4
    1860:	b1 01       	movw	r22, r2
    1862:	09 95       	icall
    1864:	f3 01       	movw	r30, r6
    1866:	e5 5e       	subi	r30, 0xE5	; 229
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	40 e1       	ldi	r20, 0x10	; 16
    1870:	57 e2       	ldi	r21, 0x27	; 39
    1872:	c3 01       	movw	r24, r6
    1874:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1878:	81 11       	cpse	r24, r1
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xba>
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	86 60       	ori	r24, 0x06	; 6
    1880:	22 c0       	rjmp	.+68     	; 0x18c6 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    1882:	10 e1       	ldi	r17, 0x10	; 16
    1884:	e1 2e       	mov	r14, r17
    1886:	17 e2       	ldi	r17, 0x27	; 39
    1888:	f1 2e       	mov	r15, r17
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	10 e0       	ldi	r17, 0x00	; 0
    188e:	95 01       	movw	r18, r10
    1890:	4c 81       	ldd	r20, Y+4	; 0x04
    1892:	5d 81       	ldd	r21, Y+5	; 0x05
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	c3 01       	movw	r24, r6
    1898:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    189c:	98 2f       	mov	r25, r24
    189e:	9f 70       	andi	r25, 0x0F	; 15
    18a0:	92 30       	cpi	r25, 0x02	; 2
    18a2:	18 f0       	brcs	.+6      	; 0x18aa <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xe2>
    18a4:	b9 81       	ldd	r27, Y+1	; 0x01
    18a6:	8b 2b       	or	r24, r27
    18a8:	0e c0       	rjmp	.+28     	; 0x18c6 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    18aa:	a4 01       	movw	r20, r8
    18ac:	b6 01       	movw	r22, r12
    18ae:	c3 01       	movw	r24, r6
    18b0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN13Adafruit_FONA12HTTP_readallEjPc>
    18b4:	81 11       	cpse	r24, r1
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xf6>
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	80 62       	ori	r24, 0x20	; 32
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	bf 90       	pop	r11
    18e2:	af 90       	pop	r10
    18e4:	9f 90       	pop	r9
    18e6:	8f 90       	pop	r8
    18e8:	7f 90       	pop	r7
    18ea:	6f 90       	pop	r6
    18ec:	5f 90       	pop	r5
    18ee:	4f 90       	pop	r4
    18f0:	3f 90       	pop	r3
    18f2:	2f 90       	pop	r2
    18f4:	08 95       	ret

000018f6 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_>:
    18f6:	2f 92       	push	r2
    18f8:	3f 92       	push	r3
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	3c 01       	movw	r6, r24
    191c:	e9 01       	movw	r28, r18
    191e:	28 01       	movw	r4, r16
    1920:	17 01       	movw	r2, r14
    1922:	76 01       	movw	r14, r12
    1924:	49 01       	movw	r8, r18
    1926:	51 01       	movw	r10, r2
    1928:	68 01       	movw	r12, r16
    192a:	8a 01       	movw	r16, r20
    192c:	9b 01       	movw	r18, r22
    192e:	43 ec       	ldi	r20, 0xC3	; 195
    1930:	51 e0       	ldi	r21, 0x01	; 1
    1932:	6e ec       	ldi	r22, 0xCE	; 206
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc>
    193a:	18 2f       	mov	r17, r24
    193c:	8f 70       	andi	r24, 0x0F	; 15
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	78 f0       	brcs	.+30     	; 0x1960 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x6a>
    1942:	60 ea       	ldi	r22, 0xA0	; 160
    1944:	71 e0       	ldi	r23, 0x01	; 1
    1946:	8e e9       	ldi	r24, 0x9E	; 158
    1948:	93 e0       	ldi	r25, 0x03	; 3
    194a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    194e:	61 2f       	mov	r22, r17
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	4a e0       	ldi	r20, 0x0A	; 10
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	8e e9       	ldi	r24, 0x9E	; 158
    1958:	93 e0       	ldi	r25, 0x03	; 3
    195a:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN5Print7printlnEii>
    195e:	33 c0       	rjmp	.+102    	; 0x19c6 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xd0>
    1960:	63 e8       	ldi	r22, 0x83	; 131
    1962:	71 e0       	ldi	r23, 0x01	; 1
    1964:	8e e9       	ldi	r24, 0x9E	; 158
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    196c:	f1 01       	movw	r30, r2
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	4a e0       	ldi	r20, 0x0A	; 10
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	8e e9       	ldi	r24, 0x9E	; 158
    1978:	93 e0       	ldi	r25, 0x03	; 3
    197a:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    197e:	60 e7       	ldi	r22, 0x70	; 112
    1980:	71 e0       	ldi	r23, 0x01	; 1
    1982:	8e e9       	ldi	r24, 0x9E	; 158
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    198a:	4a e0       	ldi	r20, 0x0A	; 10
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	b2 01       	movw	r22, r4
    1990:	8e e9       	ldi	r24, 0x9E	; 158
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1998:	62 e6       	ldi	r22, 0x62	; 98
    199a:	71 e0       	ldi	r23, 0x01	; 1
    199c:	8e e9       	ldi	r24, 0x9E	; 158
    199e:	93 e0       	ldi	r25, 0x03	; 3
    19a0:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    19a4:	fe 01       	movw	r30, r28
    19a6:	01 90       	ld	r0, Z+
    19a8:	00 20       	and	r0, r0
    19aa:	e9 f7       	brne	.-6      	; 0x19a6 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xb0>
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	bf 01       	movw	r22, r30
    19b0:	6c 1b       	sub	r22, r28
    19b2:	7d 0b       	sbc	r23, r29
    19b4:	4a e0       	ldi	r20, 0x0A	; 10
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	8e e9       	ldi	r24, 0x9E	; 158
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	0e 94 a4 1c 	call	0x3948	; 0x3948 <_ZN5Print7printlnEji>
    19c0:	c3 01       	movw	r24, r6
    19c2:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN13Adafruit_FONA9HTTP_termEv>
    19c6:	81 2f       	mov	r24, r17
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	7f 90       	pop	r7
    19e2:	6f 90       	pop	r6
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	3f 90       	pop	r3
    19ea:	2f 90       	pop	r2
    19ec:	08 95       	ret

000019ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    19ee:	af 92       	push	r10
    19f0:	bf 92       	push	r11
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	ec 01       	movw	r28, r24
    1a02:	6a 01       	movw	r12, r20
    1a04:	59 01       	movw	r10, r18
    1a06:	10 2f       	mov	r17, r16
    1a08:	0e 2d       	mov	r16, r14
    1a0a:	44 ef       	ldi	r20, 0xF4	; 244
    1a0c:	51 e0       	ldi	r21, 0x01	; 1
    1a0e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1a12:	21 2f       	mov	r18, r17
    1a14:	a5 01       	movw	r20, r10
    1a16:	b6 01       	movw	r22, r12
    1a18:	ce 01       	movw	r24, r28
    1a1a:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1a1e:	18 2f       	mov	r17, r24
    1a20:	88 23       	and	r24, r24
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	64 ef       	ldi	r22, 0xF4	; 244
    1a28:	71 e0       	ldi	r23, 0x01	; 1
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN13Adafruit_FONA8readlineEjb>
    1a30:	81 2f       	mov	r24, r17
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	bf 90       	pop	r11
    1a42:	af 90       	pop	r10
    1a44:	08 95       	ret

00001a46 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    1a46:	ef 92       	push	r14
    1a48:	0f 93       	push	r16
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ee 24       	eor	r14, r14
    1a4e:	e3 94       	inc	r14
    1a50:	0c e2       	ldi	r16, 0x2C	; 44
    1a52:	4a e0       	ldi	r20, 0x0A	; 10
    1a54:	53 e0       	ldi	r21, 0x03	; 3
    1a56:	63 e0       	ldi	r22, 0x03	; 3
    1a58:	73 e0       	ldi	r23, 0x03	; 3
    1a5a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a5e:	0f 91       	pop	r16
    1a60:	ef 90       	pop	r14
    1a62:	08 95       	ret

00001a64 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	28 97       	sbiw	r28, 0x08	; 8
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1a86:	18 86       	std	Y+8, r1	; 0x08
    1a88:	1f 82       	std	Y+7, r1	; 0x07
    1a8a:	1e 82       	std	Y+6, r1	; 0x06
    1a8c:	1d 82       	std	Y+5, r1	; 0x05
    1a8e:	1c 82       	std	Y+4, r1	; 0x04
    1a90:	1b 82       	std	Y+3, r1	; 0x03
    1a92:	1a 82       	std	Y+2, r1	; 0x02
    1a94:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1a96:	e1 2c       	mov	r14, r1
    1a98:	0c e2       	ldi	r16, 0x2C	; 44
    1a9a:	9e 01       	movw	r18, r28
    1a9c:	29 5f       	subi	r18, 0xF9	; 249
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	4c ef       	ldi	r20, 0xFC	; 252
    1aa2:	52 e0       	ldi	r21, 0x02	; 2
    1aa4:	65 ef       	ldi	r22, 0xF5	; 245
    1aa6:	72 e0       	ldi	r23, 0x02	; 2
    1aa8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1aac:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1aae:	ee 24       	eor	r14, r14
    1ab0:	e3 94       	inc	r14
    1ab2:	9e 01       	movw	r18, r28
    1ab4:	2b 5f       	subi	r18, 0xFB	; 251
    1ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab8:	4e ee       	ldi	r20, 0xEE	; 238
    1aba:	52 e0       	ldi	r21, 0x02	; 2
    1abc:	67 ee       	ldi	r22, 0xE7	; 231
    1abe:	72 e0       	ldi	r23, 0x02	; 2
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1ac6:	88 23       	and	r24, r24
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	f8 26       	eor	r15, r24
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1ad0:	ff 24       	eor	r15, r15
    1ad2:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1ad4:	e1 2c       	mov	r14, r1
    1ad6:	0c e2       	ldi	r16, 0x2C	; 44
    1ad8:	9e 01       	movw	r18, r28
    1ada:	2d 5f       	subi	r18, 0xFD	; 253
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	4f ed       	ldi	r20, 0xDF	; 223
    1ae0:	52 e0       	ldi	r21, 0x02	; 2
    1ae2:	66 ed       	ldi	r22, 0xD6	; 214
    1ae4:	72 e0       	ldi	r23, 0x02	; 2
    1ae6:	c6 01       	movw	r24, r12
    1ae8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1aec:	88 23       	and	r24, r24
    1aee:	11 f0       	breq	.+4      	; 0x1af4 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1af0:	1b 81       	ldd	r17, Y+3	; 0x03
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1af4:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1af6:	ee 24       	eor	r14, r14
    1af8:	e3 94       	inc	r14
    1afa:	0c e2       	ldi	r16, 0x2C	; 44
    1afc:	9e 01       	movw	r18, r28
    1afe:	2f 5f       	subi	r18, 0xFF	; 255
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
    1b02:	4e ec       	ldi	r20, 0xCE	; 206
    1b04:	52 e0       	ldi	r21, 0x02	; 2
    1b06:	65 ec       	ldi	r22, 0xC5	; 197
    1b08:	72 e0       	ldi	r23, 0x02	; 2
    1b0a:	c6 01       	movw	r24, r12
    1b0c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1b10:	81 11       	cpse	r24, r1
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1b14:	91 2f       	mov	r25, r17
    1b16:	90 62       	ori	r25, 0x20	; 32
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1b1a:	99 81       	ldd	r25, Y+1	; 0x01
    1b1c:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1b1e:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1b22:	8f 2d       	mov	r24, r15
    1b24:	28 96       	adiw	r28, 0x08	; 8
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	df 90       	pop	r13
    1b3e:	cf 90       	pop	r12
    1b40:	08 95       	ret

00001b42 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1b42:	fc 01       	movw	r30, r24
    1b44:	10 82       	st	Z, r1
    1b46:	12 82       	std	Z+2, r1	; 0x02
    1b48:	11 82       	std	Z+1, r1	; 0x01
    1b4a:	13 82       	std	Z+3, r1	; 0x03
    1b4c:	14 82       	std	Z+4, r1	; 0x04
    1b4e:	15 82       	std	Z+5, r1	; 0x05
    1b50:	16 82       	std	Z+6, r1	; 0x06
    1b52:	17 82       	std	Z+7, r1	; 0x07
    1b54:	12 86       	std	Z+10, r1	; 0x0a
    1b56:	11 86       	std	Z+9, r1	; 0x09
    1b58:	14 86       	std	Z+12, r1	; 0x0c
    1b5a:	13 86       	std	Z+11, r1	; 0x0b
    1b5c:	08 95       	ret

00001b5e <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1b5e:	2a e0       	ldi	r18, 0x0A	; 10
    1b60:	82 9f       	mul	r24, r18
    1b62:	c0 01       	movw	r24, r0
    1b64:	11 24       	eor	r1, r1
    1b66:	09 96       	adiw	r24, 0x09	; 9
    1b68:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <_ZN7Helpers14base64_enc_lenEi>

00001b6c <_ZN10GsmPayload16createRawPayloadEPh>:
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	ec 01       	movw	r28, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	29 e0       	ldi	r18, 0x09	; 9
    1b76:	fe 01       	movw	r30, r28
    1b78:	db 01       	movw	r26, r22
    1b7a:	01 90       	ld	r0, Z+
    1b7c:	0d 92       	st	X+, r0
    1b7e:	2a 95       	dec	r18
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1b82:	4b 81       	ldd	r20, Y+3	; 0x03
    1b84:	2a e0       	ldi	r18, 0x0A	; 10
    1b86:	42 9f       	mul	r20, r18
    1b88:	a0 01       	movw	r20, r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b90:	09 96       	adiw	r24, 0x09	; 9
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <memcpy>

00001b9a <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	6b 01       	movw	r12, r22
    1bb4:	ed b6       	in	r14, 0x3d	; 61
    1bb6:	fe b6       	in	r15, 0x3e	; 62
    1bb8:	fc 01       	movw	r30, r24
    1bba:	03 81       	ldd	r16, Z+3	; 0x03
    1bbc:	fa e0       	ldi	r31, 0x0A	; 10
    1bbe:	0f 9f       	mul	r16, r31
    1bc0:	80 01       	movw	r16, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	07 5f       	subi	r16, 0xF7	; 247
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	2d b7       	in	r18, 0x3d	; 61
    1bca:	3e b7       	in	r19, 0x3e	; 62
    1bcc:	20 1b       	sub	r18, r16
    1bce:	31 0b       	sbc	r19, r17
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	3e bf       	out	0x3e, r19	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	2d bf       	out	0x3d, r18	; 61
    1bda:	ed b7       	in	r30, 0x3d	; 61
    1bdc:	fe b7       	in	r31, 0x3e	; 62
    1bde:	31 96       	adiw	r30, 0x01	; 1
    1be0:	5f 01       	movw	r10, r30
    1be2:	bf 01       	movw	r22, r30
    1be4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <_ZN10GsmPayload16createRawPayloadEPh>
    1be8:	a8 01       	movw	r20, r16
    1bea:	b5 01       	movw	r22, r10
    1bec:	c6 01       	movw	r24, r12
    1bee:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN7Helpers13base64_encodeEPcPhi>
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	fe be       	out	0x3e, r15	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	ed be       	out	0x3d, r14	; 61
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	08 95       	ret

00001c12 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1c12:	fc 01       	movw	r30, r24
    1c14:	74 87       	std	Z+12, r23	; 0x0c
    1c16:	63 87       	std	Z+11, r22	; 0x0b
    1c18:	43 83       	std	Z+3, r20	; 0x03
    1c1a:	08 95       	ret

00001c1c <_ZN10GsmPayload11setModuleIdEh>:
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	60 83       	st	Z, r22
    1c20:	08 95       	ret

00001c22 <_ZN10GsmPayload13setBootNumberEj>:
    1c22:	fc 01       	movw	r30, r24
    1c24:	72 83       	std	Z+2, r23	; 0x02
    1c26:	61 83       	std	Z+1, r22	; 0x01
    1c28:	08 95       	ret

00001c2a <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	45 83       	std	Z+5, r20	; 0x05
    1c2e:	56 83       	std	Z+6, r21	; 0x06
    1c30:	67 83       	std	Z+7, r22	; 0x07
    1c32:	70 87       	std	Z+8, r23	; 0x08
    1c34:	08 95       	ret

00001c36 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	6b e9       	ldi	r22, 0x9B	; 155
    1c3e:	74 e0       	ldi	r23, 0x04	; 4
    1c40:	8e e9       	ldi	r24, 0x9E	; 158
    1c42:	93 e0       	ldi	r25, 0x03	; 3
    1c44:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1c48:	4a e0       	ldi	r20, 0x0A	; 10
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	68 81       	ld	r22, Y
    1c4e:	8e e9       	ldi	r24, 0x9E	; 158
    1c50:	93 e0       	ldi	r25, 0x03	; 3
    1c52:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print5printEhi>
    1c56:	67 e9       	ldi	r22, 0x97	; 151
    1c58:	74 e0       	ldi	r23, 0x04	; 4
    1c5a:	8e e9       	ldi	r24, 0x9E	; 158
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1c62:	62 e9       	ldi	r22, 0x92	; 146
    1c64:	74 e0       	ldi	r23, 0x04	; 4
    1c66:	8e e9       	ldi	r24, 0x9E	; 158
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1c6e:	4a e0       	ldi	r20, 0x0A	; 10
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	69 81       	ldd	r22, Y+1	; 0x01
    1c74:	8e e9       	ldi	r24, 0x9E	; 158
    1c76:	93 e0       	ldi	r25, 0x03	; 3
    1c78:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print5printEhi>
    1c7c:	6e e8       	ldi	r22, 0x8E	; 142
    1c7e:	74 e0       	ldi	r23, 0x04	; 4
    1c80:	8e e9       	ldi	r24, 0x9E	; 158
    1c82:	93 e0       	ldi	r25, 0x03	; 3
    1c84:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1c88:	69 e7       	ldi	r22, 0x79	; 121
    1c8a:	74 e0       	ldi	r23, 0x04	; 4
    1c8c:	8e e9       	ldi	r24, 0x9E	; 158
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1c94:	6b 81       	ldd	r22, Y+3	; 0x03
    1c96:	63 70       	andi	r22, 0x03	; 3
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	4a e0       	ldi	r20, 0x0A	; 10
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	8e e9       	ldi	r24, 0x9E	; 158
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1ca6:	6f e6       	ldi	r22, 0x6F	; 111
    1ca8:	74 e0       	ldi	r23, 0x04	; 4
    1caa:	8e e9       	ldi	r24, 0x9E	; 158
    1cac:	93 e0       	ldi	r25, 0x03	; 3
    1cae:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1cb2:	6b 81       	ldd	r22, Y+3	; 0x03
    1cb4:	6c 71       	andi	r22, 0x1C	; 28
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	75 95       	asr	r23
    1cba:	67 95       	ror	r22
    1cbc:	75 95       	asr	r23
    1cbe:	67 95       	ror	r22
    1cc0:	4a e0       	ldi	r20, 0x0A	; 10
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	8e e9       	ldi	r24, 0x9E	; 158
    1cc6:	93 e0       	ldi	r25, 0x03	; 3
    1cc8:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1ccc:	66 e6       	ldi	r22, 0x66	; 102
    1cce:	74 e0       	ldi	r23, 0x04	; 4
    1cd0:	8e e9       	ldi	r24, 0x9E	; 158
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1cd8:	6b 81       	ldd	r22, Y+3	; 0x03
    1cda:	65 fb       	bst	r22, 5
    1cdc:	66 27       	eor	r22, r22
    1cde:	60 f9       	bld	r22, 0
    1ce0:	4a e0       	ldi	r20, 0x0A	; 10
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	8e e9       	ldi	r24, 0x9E	; 158
    1ce8:	93 e0       	ldi	r25, 0x03	; 3
    1cea:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1cee:	62 e6       	ldi	r22, 0x62	; 98
    1cf0:	74 e0       	ldi	r23, 0x04	; 4
    1cf2:	8e e9       	ldi	r24, 0x9E	; 158
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1cfa:	65 e5       	ldi	r22, 0x55	; 85
    1cfc:	74 e0       	ldi	r23, 0x04	; 4
    1cfe:	8e e9       	ldi	r24, 0x9E	; 158
    1d00:	93 e0       	ldi	r25, 0x03	; 3
    1d02:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1d06:	4a e0       	ldi	r20, 0x0A	; 10
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d0c:	8e e9       	ldi	r24, 0x9E	; 158
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <_ZN5Print7printlnEhi>

00001d18 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1d18:	fc 01       	movw	r30, r24
    1d1a:	22 81       	ldd	r18, Z+2	; 0x02
    1d1c:	21 11       	cpse	r18, r1
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1d20:	90 81       	ld	r25, Z
    1d22:	93 36       	cpi	r25, 0x63	; 99
    1d24:	19 f0       	breq	.+6      	; 0x1d2c <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	97 30       	cpi	r25, 0x07	; 7
    1d2a:	08 f4       	brcc	.+2      	; 0x1d2e <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	08 95       	ret

00001d30 <_ZN7Helpers15printSensorDataEP10SensorData>:
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	ec 01       	movw	r28, r24
    1d36:	6d e4       	ldi	r22, 0x4D	; 77
    1d38:	74 e0       	ldi	r23, 0x04	; 4
    1d3a:	8e e9       	ldi	r24, 0x9E	; 158
    1d3c:	93 e0       	ldi	r25, 0x03	; 3
    1d3e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1d42:	69 81       	ldd	r22, Y+1	; 0x01
    1d44:	7a 81       	ldd	r23, Y+2	; 0x02
    1d46:	4a e0       	ldi	r20, 0x0A	; 10
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	8e e9       	ldi	r24, 0x9E	; 158
    1d4c:	93 e0       	ldi	r25, 0x03	; 3
    1d4e:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1d52:	69 e4       	ldi	r22, 0x49	; 73
    1d54:	74 e0       	ldi	r23, 0x04	; 4
    1d56:	8e e9       	ldi	r24, 0x9E	; 158
    1d58:	93 e0       	ldi	r25, 0x03	; 3
    1d5a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1d5e:	63 e4       	ldi	r22, 0x43	; 67
    1d60:	74 e0       	ldi	r23, 0x04	; 4
    1d62:	8e e9       	ldi	r24, 0x9E	; 158
    1d64:	93 e0       	ldi	r25, 0x03	; 3
    1d66:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1d6a:	6b 81       	ldd	r22, Y+3	; 0x03
    1d6c:	7c 81       	ldd	r23, Y+4	; 0x04
    1d6e:	4a e0       	ldi	r20, 0x0A	; 10
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	8e e9       	ldi	r24, 0x9E	; 158
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1d7a:	6f e3       	ldi	r22, 0x3F	; 63
    1d7c:	74 e0       	ldi	r23, 0x04	; 4
    1d7e:	8e e9       	ldi	r24, 0x9E	; 158
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1d86:	66 e3       	ldi	r22, 0x36	; 54
    1d88:	74 e0       	ldi	r23, 0x04	; 4
    1d8a:	8e e9       	ldi	r24, 0x9E	; 158
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1d92:	6d 81       	ldd	r22, Y+5	; 0x05
    1d94:	7e 81       	ldd	r23, Y+6	; 0x06
    1d96:	4a e0       	ldi	r20, 0x0A	; 10
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	8e e9       	ldi	r24, 0x9E	; 158
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1da2:	62 e3       	ldi	r22, 0x32	; 50
    1da4:	74 e0       	ldi	r23, 0x04	; 4
    1da6:	8e e9       	ldi	r24, 0x9E	; 158
    1da8:	93 e0       	ldi	r25, 0x03	; 3
    1daa:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1dae:	6c e2       	ldi	r22, 0x2C	; 44
    1db0:	74 e0       	ldi	r23, 0x04	; 4
    1db2:	8e e9       	ldi	r24, 0x9E	; 158
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	4a e0       	ldi	r20, 0x0A	; 10
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	8e e9       	ldi	r24, 0x9E	; 158
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1dca:	68 e2       	ldi	r22, 0x28	; 40
    1dcc:	74 e0       	ldi	r23, 0x04	; 4
    1dce:	8e e9       	ldi	r24, 0x9E	; 158
    1dd0:	93 e0       	ldi	r25, 0x03	; 3
    1dd2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1dd6:	61 e2       	ldi	r22, 0x21	; 33
    1dd8:	74 e0       	ldi	r23, 0x04	; 4
    1dda:	8e e9       	ldi	r24, 0x9E	; 158
    1ddc:	93 e0       	ldi	r25, 0x03	; 3
    1dde:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1de2:	4a e0       	ldi	r20, 0x0A	; 10
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	69 85       	ldd	r22, Y+9	; 0x09
    1de8:	8e e9       	ldi	r24, 0x9E	; 158
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <_ZN5Print7printlnEhi>

00001df4 <_ZN7Helpers18printDailySendDataEP14DailyCycleData>:
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	ec 01       	movw	r28, r24
    1dfa:	69 e1       	ldi	r22, 0x19	; 25
    1dfc:	74 e0       	ldi	r23, 0x04	; 4
    1dfe:	8e e9       	ldi	r24, 0x9E	; 158
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e06:	6a 81       	ldd	r22, Y+2	; 0x02
    1e08:	7b 81       	ldd	r23, Y+3	; 0x03
    1e0a:	4a e0       	ldi	r20, 0x0A	; 10
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	8e e9       	ldi	r24, 0x9E	; 158
    1e10:	93 e0       	ldi	r25, 0x03	; 3
    1e12:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1e16:	65 e1       	ldi	r22, 0x15	; 21
    1e18:	74 e0       	ldi	r23, 0x04	; 4
    1e1a:	8e e9       	ldi	r24, 0x9E	; 158
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e22:	6a e0       	ldi	r22, 0x0A	; 10
    1e24:	74 e0       	ldi	r23, 0x04	; 4
    1e26:	8e e9       	ldi	r24, 0x9E	; 158
    1e28:	93 e0       	ldi	r25, 0x03	; 3
    1e2a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e2e:	4a e0       	ldi	r20, 0x0A	; 10
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	6c 81       	ldd	r22, Y+4	; 0x04
    1e34:	8e e9       	ldi	r24, 0x9E	; 158
    1e36:	93 e0       	ldi	r25, 0x03	; 3
    1e38:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print5printEhi>
    1e3c:	66 e0       	ldi	r22, 0x06	; 6
    1e3e:	74 e0       	ldi	r23, 0x04	; 4
    1e40:	8e e9       	ldi	r24, 0x9E	; 158
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e48:	6f ef       	ldi	r22, 0xFF	; 255
    1e4a:	73 e0       	ldi	r23, 0x03	; 3
    1e4c:	8e e9       	ldi	r24, 0x9E	; 158
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e54:	69 81       	ldd	r22, Y+1	; 0x01
    1e56:	06 2e       	mov	r0, r22
    1e58:	00 0c       	add	r0, r0
    1e5a:	77 0b       	sbc	r23, r23
    1e5c:	4a e0       	ldi	r20, 0x0A	; 10
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	8e e9       	ldi	r24, 0x9E	; 158
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1e68:	6b ef       	ldi	r22, 0xFB	; 251
    1e6a:	73 e0       	ldi	r23, 0x03	; 3
    1e6c:	8e e9       	ldi	r24, 0x9E	; 158
    1e6e:	93 e0       	ldi	r25, 0x03	; 3
    1e70:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1e74:	69 ef       	ldi	r22, 0xF9	; 249
    1e76:	73 e0       	ldi	r23, 0x03	; 3
    1e78:	8e e9       	ldi	r24, 0x9E	; 158
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    1e88:	6c ee       	ldi	r22, 0xEC	; 236
    1e8a:	73 e0       	ldi	r23, 0x03	; 3
    1e8c:	8e e9       	ldi	r24, 0x9E	; 158
    1e8e:	93 e0       	ldi	r25, 0x03	; 3
    1e90:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1e94:	69 85       	ldd	r22, Y+9	; 0x09
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	42 e0       	ldi	r20, 0x02	; 2
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	8e e9       	ldi	r24, 0x9E	; 158
    1e9e:	93 e0       	ldi	r25, 0x03	; 3
    1ea0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1ea4:	68 ee       	ldi	r22, 0xE8	; 232
    1ea6:	73 e0       	ldi	r23, 0x03	; 3
    1ea8:	8e e9       	ldi	r24, 0x9E	; 158
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1eb0:	6c ed       	ldi	r22, 0xDC	; 220
    1eb2:	73 e0       	ldi	r23, 0x03	; 3
    1eb4:	8e e9       	ldi	r24, 0x9E	; 158
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1ebc:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	42 e0       	ldi	r20, 0x02	; 2
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	8e e9       	ldi	r24, 0x9E	; 158
    1ec6:	93 e0       	ldi	r25, 0x03	; 3
    1ec8:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1ecc:	68 ed       	ldi	r22, 0xD8	; 216
    1ece:	73 e0       	ldi	r23, 0x03	; 3
    1ed0:	8e e9       	ldi	r24, 0x9E	; 158
    1ed2:	93 e0       	ldi	r25, 0x03	; 3
    1ed4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1ed8:	6c ec       	ldi	r22, 0xCC	; 204
    1eda:	73 e0       	ldi	r23, 0x03	; 3
    1edc:	8e e9       	ldi	r24, 0x9E	; 158
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	42 e0       	ldi	r20, 0x02	; 2
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	8e e9       	ldi	r24, 0x9E	; 158
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    1ef4:	68 ec       	ldi	r22, 0xC8	; 200
    1ef6:	73 e0       	ldi	r23, 0x03	; 3
    1ef8:	8e e9       	ldi	r24, 0x9E	; 158
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f00:	6a eb       	ldi	r22, 0xBA	; 186
    1f02:	73 e0       	ldi	r23, 0x03	; 3
    1f04:	8e e9       	ldi	r24, 0x9E	; 158
    1f06:	93 e0       	ldi	r25, 0x03	; 3
    1f08:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1f0c:	68 89       	ldd	r22, Y+16	; 0x10
    1f0e:	79 89       	ldd	r23, Y+17	; 0x11
    1f10:	4a e0       	ldi	r20, 0x0A	; 10
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	8e e9       	ldi	r24, 0x9E	; 158
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1f1c:	66 eb       	ldi	r22, 0xB6	; 182
    1f1e:	73 e0       	ldi	r23, 0x03	; 3
    1f20:	8e e9       	ldi	r24, 0x9E	; 158
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1f28:	68 ea       	ldi	r22, 0xA8	; 168
    1f2a:	73 e0       	ldi	r23, 0x03	; 3
    1f2c:	8e e9       	ldi	r24, 0x9E	; 158
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1f34:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f36:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f38:	4a e0       	ldi	r20, 0x0A	; 10
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	8e e9       	ldi	r24, 0x9E	; 158
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1f44:	64 ea       	ldi	r22, 0xA4	; 164
    1f46:	73 e0       	ldi	r23, 0x03	; 3
    1f48:	8e e9       	ldi	r24, 0x9E	; 158
    1f4a:	93 e0       	ldi	r25, 0x03	; 3
    1f4c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1f50:	65 e9       	ldi	r22, 0x95	; 149
    1f52:	73 e0       	ldi	r23, 0x03	; 3
    1f54:	8e e9       	ldi	r24, 0x9E	; 158
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    1f5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f60:	4a e0       	ldi	r20, 0x0A	; 10
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	8e e9       	ldi	r24, 0x9E	; 158
    1f66:	93 e0       	ldi	r25, 0x03	; 3
    1f68:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    1f6c:	61 e9       	ldi	r22, 0x91	; 145
    1f6e:	73 e0       	ldi	r23, 0x03	; 3
    1f70:	8e e9       	ldi	r24, 0x9E	; 158
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>

00001f7c <_ZN7Helpers12freeListSizeEv>:
    1f7c:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    1f80:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	30 97       	sbiw	r30, 0x00	; 0
    1f8a:	49 f0       	breq	.+18     	; 0x1f9e <_ZN7Helpers12freeListSizeEv+0x22>
    1f8c:	02 96       	adiw	r24, 0x02	; 2
    1f8e:	20 81       	ld	r18, Z
    1f90:	31 81       	ldd	r19, Z+1	; 0x01
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	02 80       	ldd	r0, Z+2	; 0x02
    1f98:	f3 81       	ldd	r31, Z+3	; 0x03
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	f5 cf       	rjmp	.-22     	; 0x1f88 <_ZN7Helpers12freeListSizeEv+0xc>
    1f9e:	08 95       	ret

00001fa0 <_ZN7Helpers10freeMemoryEv>:
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <_ZN7Helpers10freeMemoryEv+0xa>
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    1fb2:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	0f 5f       	subi	r16, 0xFF	; 255
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	29 f4       	brne	.+10     	; 0x1fca <_ZN7Helpers10freeMemoryEv+0x2a>
    1fc0:	0c 58       	subi	r16, 0x8C	; 140
    1fc2:	14 40       	sbci	r17, 0x04	; 4
    1fc4:	1a 83       	std	Y+2, r17	; 0x02
    1fc6:	09 83       	std	Y+1, r16	; 0x01
    1fc8:	0a c0       	rjmp	.+20     	; 0x1fde <_ZN7Helpers10freeMemoryEv+0x3e>
    1fca:	08 1b       	sub	r16, r24
    1fcc:	19 0b       	sbc	r17, r25
    1fce:	1a 83       	std	Y+2, r17	; 0x02
    1fd0:	09 83       	std	Y+1, r16	; 0x01
    1fd2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN7Helpers12freeListSizeEv>
    1fd6:	80 0f       	add	r24, r16
    1fd8:	91 1f       	adc	r25, r17
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	08 95       	ret

00001ff0 <_ZN7Helpers14base64_enc_lenEi>:
    1ff0:	9c 01       	movw	r18, r24
    1ff2:	2e 5f       	subi	r18, 0xFE	; 254
    1ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff6:	e3 e0       	ldi	r30, 0x03	; 3
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	c9 01       	movw	r24, r18
    1ffc:	bf 01       	movw	r22, r30
    1ffe:	0e 94 55 22 	call	0x44aa	; 0x44aa <__divmodhi4>
    2002:	a9 01       	movw	r20, r18
    2004:	48 1b       	sub	r20, r24
    2006:	59 0b       	sbc	r21, r25
    2008:	ca 01       	movw	r24, r20
    200a:	bf 01       	movw	r22, r30
    200c:	0e 94 55 22 	call	0x44aa	; 0x44aa <__divmodhi4>
    2010:	cb 01       	movw	r24, r22
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	08 95       	ret

0000201e <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    201e:	dc 01       	movw	r26, r24
    2020:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    2022:	80 81       	ld	r24, Z
    2024:	86 95       	lsr	r24
    2026:	86 95       	lsr	r24
    2028:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    202a:	80 81       	ld	r24, Z
    202c:	83 70       	andi	r24, 0x03	; 3
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	92 95       	swap	r25
    2032:	9f 70       	andi	r25, 0x0F	; 15
    2034:	20 e1       	ldi	r18, 0x10	; 16
    2036:	82 9f       	mul	r24, r18
    2038:	90 0d       	add	r25, r0
    203a:	11 24       	eor	r1, r1
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	9c 93       	st	X, r25
    2040:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	9f 70       	andi	r25, 0x0F	; 15
    2046:	99 0f       	add	r25, r25
    2048:	99 0f       	add	r25, r25
    204a:	22 81       	ldd	r18, Z+2	; 0x02
    204c:	22 95       	swap	r18
    204e:	26 95       	lsr	r18
    2050:	26 95       	lsr	r18
    2052:	23 70       	andi	r18, 0x03	; 3
    2054:	92 0f       	add	r25, r18
    2056:	12 96       	adiw	r26, 0x02	; 2
    2058:	9c 93       	st	X, r25
    205a:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	8f 73       	andi	r24, 0x3F	; 63
    2060:	13 96       	adiw	r26, 0x03	; 3
    2062:	8c 93       	st	X, r24
    2064:	08 95       	ret

00002066 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    2066:	6f 92       	push	r6
    2068:	7f 92       	push	r7
    206a:	8f 92       	push	r8
    206c:	9f 92       	push	r9
    206e:	af 92       	push	r10
    2070:	bf 92       	push	r11
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	27 97       	sbiw	r28, 0x07	; 7
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	6c 01       	movw	r12, r24
    2094:	5b 01       	movw	r10, r22
    2096:	3b 01       	movw	r6, r22
    2098:	64 0e       	add	r6, r20
    209a:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    209c:	e1 2c       	mov	r14, r1
    209e:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    20a0:	00 e0       	ldi	r16, 0x00	; 0
    20a2:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    20a4:	4e 01       	movw	r8, r28
    20a6:	85 e0       	ldi	r24, 0x05	; 5
    20a8:	88 0e       	add	r8, r24
    20aa:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    20ac:	6a 14       	cp	r6, r10
    20ae:	7b 04       	cpc	r7, r11
    20b0:	49 f1       	breq	.+82     	; 0x2104 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    20b2:	c8 01       	movw	r24, r16
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	f5 01       	movw	r30, r10
    20b8:	21 91       	ld	r18, Z+
    20ba:	5f 01       	movw	r10, r30
    20bc:	f4 01       	movw	r30, r8
    20be:	e0 0f       	add	r30, r16
    20c0:	f1 1f       	adc	r31, r17
    20c2:	20 83       	st	Z, r18
		if(i == 3) {
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	11 f0       	breq	.+4      	; 0x20ce <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    20ca:	8c 01       	movw	r16, r24
    20cc:	ef cf       	rjmp	.-34     	; 0x20ac <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    20ce:	b4 01       	movw	r22, r8
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	0e 94 0f 10 	call	0x201e	; 0x201e <_Z8a3_to_a4PhS_>
    20d8:	de 01       	movw	r26, r28
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	c6 01       	movw	r24, r12
    20de:	8e 0d       	add	r24, r14
    20e0:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    20e2:	ed 91       	ld	r30, X+
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	ef 55       	subi	r30, 0x5F	; 95
    20e8:	fb 4f       	sbci	r31, 0xFB	; 251
    20ea:	24 91       	lpm	r18, Z
    20ec:	fc 01       	movw	r30, r24
    20ee:	21 93       	st	Z+, r18
    20f0:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    20f2:	a8 15       	cp	r26, r8
    20f4:	b9 05       	cpc	r27, r9
    20f6:	a9 f7       	brne	.-22     	; 0x20e2 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    20f8:	f4 e0       	ldi	r31, 0x04	; 4
    20fa:	ef 0e       	add	r14, r31
    20fc:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	e3 cf       	rjmp	.-58     	; 0x20ca <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    2104:	01 15       	cp	r16, r1
    2106:	11 05       	cpc	r17, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    210a:	3c c0       	rjmp	.+120    	; 0x2184 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    210c:	be 01       	movw	r22, r28
    210e:	6b 5f       	subi	r22, 0xFB	; 251
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	fb 01       	movw	r30, r22
    2114:	e0 0f       	add	r30, r16
    2116:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    2118:	cf 01       	movw	r24, r30
    211a:	86 1b       	sub	r24, r22
    211c:	97 0b       	sbc	r25, r23
    211e:	03 97       	sbiw	r24, 0x03	; 3
    2120:	14 f4       	brge	.+4      	; 0x2126 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    2122:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    2124:	f9 cf       	rjmp	.-14     	; 0x2118 <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    2126:	ce 01       	movw	r24, r28
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	5c 01       	movw	r10, r24
    212c:	0e 94 0f 10 	call	0x201e	; 0x201e <_Z8a3_to_a4PhS_>
    2130:	c6 01       	movw	r24, r12
    2132:	8e 0d       	add	r24, r14
    2134:	9f 1d       	adc	r25, r15
    2136:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    2138:	ed 91       	ld	r30, X+
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	ef 55       	subi	r30, 0x5F	; 95
    213e:	fb 4f       	sbci	r31, 0xFB	; 251
    2140:	24 91       	lpm	r18, Z
    2142:	fc 01       	movw	r30, r24
    2144:	21 93       	st	Z+, r18
    2146:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    2148:	9d 01       	movw	r18, r26
    214a:	2a 19       	sub	r18, r10
    214c:	3b 09       	sbc	r19, r11
    214e:	02 17       	cp	r16, r18
    2150:	13 07       	cpc	r17, r19
    2152:	94 f7       	brge	.-28     	; 0x2138 <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    2154:	ff ef       	ldi	r31, 0xFF	; 255
    2156:	ef 1a       	sub	r14, r31
    2158:	ff 0a       	sbc	r15, r31
    215a:	e0 0e       	add	r14, r16
    215c:	f1 1e       	adc	r15, r17
    215e:	f6 01       	movw	r30, r12
    2160:	ee 0d       	add	r30, r14
    2162:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    2164:	0c 19       	sub	r16, r12
    2166:	1d 09       	sbc	r17, r13
    2168:	0e 19       	sub	r16, r14
    216a:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    216c:	8d e3       	ldi	r24, 0x3D	; 61
    216e:	7f 01       	movw	r14, r30
    2170:	ec 18       	sub	r14, r12
    2172:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    2174:	98 01       	movw	r18, r16
    2176:	2e 0f       	add	r18, r30
    2178:	3f 1f       	adc	r19, r31
    217a:	23 30       	cpi	r18, 0x03	; 3
    217c:	31 05       	cpc	r19, r1
    217e:	14 f4       	brge	.+4      	; 0x2184 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    2180:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    2182:	f5 cf       	rjmp	.-22     	; 0x216e <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    2184:	f6 01       	movw	r30, r12
    2186:	ee 0d       	add	r30, r14
    2188:	ff 1d       	adc	r31, r15
    218a:	10 82       	st	Z, r1
	
	return encLen;
}
    218c:	c7 01       	movw	r24, r14
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	27 96       	adiw	r28, 0x07	; 7
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	df 90       	pop	r13
    21aa:	cf 90       	pop	r12
    21ac:	bf 90       	pop	r11
    21ae:	af 90       	pop	r10
    21b0:	9f 90       	pop	r9
    21b2:	8f 90       	pop	r8
    21b4:	7f 90       	pop	r7
    21b6:	6f 90       	pop	r6
    21b8:	08 95       	ret

000021ba <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	85 e0       	ldi	r24, 0x05	; 5
    21be:	0e 94 67 1e 	call	0x3cce	; 0x3cce <pinMode>
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	85 e0       	ldi	r24, 0x05	; 5
    21c6:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    21ca:	68 eb       	ldi	r22, 0xB8	; 184
    21cc:	7b e0       	ldi	r23, 0x0B	; 11
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	8d e0       	ldi	r24, 0x0D	; 13
    21da:	0e 94 67 1e 	call	0x3cce	; 0x3cce <pinMode>
    21de:	26 e0       	ldi	r18, 0x06	; 6
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	55 e2       	ldi	r21, 0x25	; 37
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	8e e9       	ldi	r24, 0x9E	; 158
    21ea:	93 e0       	ldi	r25, 0x03	; 3
    21ec:	0e 94 75 1a 	call	0x34ea	; 0x34ea <_ZN14HardwareSerial5beginEmh>
    21f0:	6f e2       	ldi	r22, 0x2F	; 47
    21f2:	77 e0       	ldi	r23, 0x07	; 7
    21f4:	8e e9       	ldi	r24, 0x9E	; 158
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    21fc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2200:	84 60       	ori	r24, 0x04	; 4
    2202:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
    2206:	08 95       	ret

00002208 <_Z21ensureFonaInitialisedb>:
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	2c 97       	sbiw	r28, 0x0c	; 12
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	18 2f       	mov	r17, r24
    2222:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2226:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__initState+0xa>
    2230:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__initState+0x9>
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__initState+0x2>
    223a:	89 eb       	ldi	r24, 0xB9	; 185
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__initState+0x1>
    2242:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__initState>
    2246:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    224a:	81 11       	cpse	r24, r1
    224c:	34 c0       	rjmp	.+104    	; 0x22b6 <_Z21ensureFonaInitialisedb+0xae>
    224e:	6a e1       	ldi	r22, 0x1A	; 26
    2250:	77 e0       	ldi	r23, 0x07	; 7
    2252:	8e e9       	ldi	r24, 0x9E	; 158
    2254:	93 e0       	ldi	r25, 0x03	; 3
    2256:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    225a:	42 e0       	ldi	r20, 0x02	; 2
    225c:	63 e0       	ldi	r22, 0x03	; 3
    225e:	89 eb       	ldi	r24, 0xB9	; 185
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN13Adafruit_FONA5beginEhh>
    2266:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__initState+0x3>
    226a:	8e ea       	ldi	r24, 0xAE	; 174
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN12RmMemManager11getModuleIdEv>
    2272:	08 2f       	mov	r16, r24
    2274:	69 e3       	ldi	r22, 0x39	; 57
    2276:	71 e0       	ldi	r23, 0x01	; 1
    2278:	ce 01       	movw	r24, r28
    227a:	07 96       	adiw	r24, 0x07	; 7
    227c:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <_ZN6StringC1EPKc>
    2280:	60 2f       	mov	r22, r16
    2282:	ce 01       	movw	r24, r28
    2284:	07 96       	adiw	r24, 0x07	; 7
    2286:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <_ZN6String6concatEh>
    228a:	be 01       	movw	r22, r28
    228c:	69 5f       	subi	r22, 0xF9	; 249
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	ce 01       	movw	r24, r28
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <_ZN6StringC1ERKS_>
    2298:	be 01       	movw	r22, r28
    229a:	6f 5f       	subi	r22, 0xFF	; 255
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	89 eb       	ldi	r24, 0xB9	; 185
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN13Adafruit_FONA12setUserAgentE6String>
    22a6:	ce 01       	movw	r24, r28
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <_ZN6StringD1Ev>
    22ae:	ce 01       	movw	r24, r28
    22b0:	07 96       	adiw	r24, 0x07	; 7
    22b2:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <_ZN6StringD1Ev>
    22b6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    22ba:	83 50       	subi	r24, 0x03	; 3
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	b0 f4       	brcc	.+44     	; 0x22ec <_Z21ensureFonaInitialisedb+0xe4>
    22c0:	6f ef       	ldi	r22, 0xFF	; 255
    22c2:	76 e0       	ldi	r23, 0x06	; 6
    22c4:	8e e9       	ldi	r24, 0x9E	; 158
    22c6:	93 e0       	ldi	r25, 0x03	; 3
    22c8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    22cc:	67 e4       	ldi	r22, 0x47	; 71
    22ce:	71 e0       	ldi	r23, 0x01	; 1
    22d0:	8e e9       	ldi	r24, 0x9E	; 158
    22d2:	93 e0       	ldi	r25, 0x03	; 3
    22d4:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    22d8:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <__initState+0x3>
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	4a e0       	ldi	r20, 0x0A	; 10
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	8e e9       	ldi	r24, 0x9E	; 158
    22e4:	93 e0       	ldi	r25, 0x03	; 3
    22e6:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN5Print7printlnEii>
    22ea:	65 c0       	rjmp	.+202    	; 0x23b6 <_Z21ensureFonaInitialisedb+0x1ae>
    22ec:	11 23       	and	r17, r17
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <_Z21ensureFonaInitialisedb+0xea>
    22f0:	b1 c0       	rjmp	.+354    	; 0x2454 <_Z21ensureFonaInitialisedb+0x24c>
    22f2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    22f6:	81 11       	cpse	r24, r1
    22f8:	49 c0       	rjmp	.+146    	; 0x238c <_Z21ensureFonaInitialisedb+0x184>
    22fa:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    22fe:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    2302:	6a e0       	ldi	r22, 0x0A	; 10
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodhi4>
    230a:	89 2b       	or	r24, r25
    230c:	19 f0       	breq	.+6      	; 0x2314 <_Z21ensureFonaInitialisedb+0x10c>
    230e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2312:	3c c0       	rjmp	.+120    	; 0x238c <_Z21ensureFonaInitialisedb+0x184>
    2314:	62 ee       	ldi	r22, 0xE2	; 226
    2316:	76 e0       	ldi	r23, 0x06	; 6
    2318:	8e e9       	ldi	r24, 0x9E	; 158
    231a:	93 e0       	ldi	r25, 0x03	; 3
    231c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	89 eb       	ldi	r24, 0xB9	; 185
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 a2 09 	call	0x1344	; 0x1344 <_ZN13Adafruit_FONA10enableGPRSEb>
    232a:	18 2f       	mov	r17, r24
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	81 0f       	add	r24, r17
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	20 f1       	brcs	.+72     	; 0x237c <_Z21ensureFonaInitialisedb+0x174>
    2334:	6a ec       	ldi	r22, 0xCA	; 202
    2336:	76 e0       	ldi	r23, 0x06	; 6
    2338:	8e e9       	ldi	r24, 0x9E	; 158
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    2340:	67 e4       	ldi	r22, 0x47	; 71
    2342:	71 e0       	ldi	r23, 0x01	; 1
    2344:	8e e9       	ldi	r24, 0x9E	; 158
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    234c:	61 2f       	mov	r22, r17
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	4a e0       	ldi	r20, 0x0A	; 10
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	8e e9       	ldi	r24, 0x9E	; 158
    2356:	93 e0       	ldi	r25, 0x03	; 3
    2358:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN5Print7printlnEii>
    235c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2360:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    2364:	cc 97       	sbiw	r24, 0x3c	; 60
    2366:	28 f4       	brcc	.+10     	; 0x2372 <_Z21ensureFonaInitialisedb+0x16a>
    2368:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    236c:	64 ea       	ldi	r22, 0xA4	; 164
    236e:	76 e0       	ldi	r23, 0x06	; 6
    2370:	09 c0       	rjmp	.+18     	; 0x2384 <_Z21ensureFonaInitialisedb+0x17c>
    2372:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    2376:	61 e8       	ldi	r22, 0x81	; 129
    2378:	76 e0       	ldi	r23, 0x06	; 6
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <_Z21ensureFonaInitialisedb+0x17c>
    237c:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    2380:	61 e6       	ldi	r22, 0x61	; 97
    2382:	76 e0       	ldi	r23, 0x06	; 6
    2384:	8e e9       	ldi	r24, 0x9E	; 158
    2386:	93 e0       	ldi	r25, 0x03	; 3
    2388:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    238c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    2390:	81 50       	subi	r24, 0x01	; 1
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	80 f4       	brcc	.+32     	; 0x23b6 <_Z21ensureFonaInitialisedb+0x1ae>
    2396:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    239a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__initState+0xc>
    23a4:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__initState+0xb>
    23a8:	83 ea       	ldi	r24, 0xA3	; 163
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    23b0:	88 23       	and	r24, r24
    23b2:	31 f0       	breq	.+12     	; 0x23c0 <_Z21ensureFonaInitialisedb+0x1b8>
    23b4:	4f c0       	rjmp	.+158    	; 0x2454 <_Z21ensureFonaInitialisedb+0x24c>
    23b6:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__initState+0x1>
    23ba:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__initState>
    23be:	4a c0       	rjmp	.+148    	; 0x2454 <_Z21ensureFonaInitialisedb+0x24c>
    23c0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    23c4:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    23c8:	6a e0       	ldi	r22, 0x0A	; 10
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodhi4>
    23d0:	89 2b       	or	r24, r25
    23d2:	19 f0       	breq	.+6      	; 0x23da <_Z21ensureFonaInitialisedb+0x1d2>
    23d4:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    23d8:	3d c0       	rjmp	.+122    	; 0x2454 <_Z21ensureFonaInitialisedb+0x24c>
    23da:	66 e4       	ldi	r22, 0x46	; 70
    23dc:	76 e0       	ldi	r23, 0x06	; 6
    23de:	8e e9       	ldi	r24, 0x9E	; 158
    23e0:	93 e0       	ldi	r25, 0x03	; 3
    23e2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    23e6:	89 eb       	ldi	r24, 0xB9	; 185
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN13Adafruit_FONA7getRSSIEv>
    23ee:	69 83       	std	Y+1, r22	; 0x01
    23f0:	7a 83       	std	Y+2, r23	; 0x02
    23f2:	8b 83       	std	Y+3, r24	; 0x03
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	ce 01       	movw	r24, r28
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    2406:	81 11       	cpse	r24, r1
    2408:	13 c0       	rjmp	.+38     	; 0x2430 <_Z21ensureFonaInitialisedb+0x228>
    240a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    240e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    2412:	8c 32       	cpi	r24, 0x2C	; 44
    2414:	91 40       	sbci	r25, 0x01	; 1
    2416:	48 f4       	brcc	.+18     	; 0x242a <_Z21ensureFonaInitialisedb+0x222>
    2418:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    241c:	67 e1       	ldi	r22, 0x17	; 23
    241e:	76 e0       	ldi	r23, 0x06	; 6
    2420:	8e e9       	ldi	r24, 0x9E	; 158
    2422:	93 e0       	ldi	r25, 0x03	; 3
    2424:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2428:	15 c0       	rjmp	.+42     	; 0x2454 <_Z21ensureFonaInitialisedb+0x24c>
    242a:	6f ed       	ldi	r22, 0xDF	; 223
    242c:	75 e0       	ldi	r23, 0x05	; 5
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <_Z21ensureFonaInitialisedb+0x22c>
    2430:	69 eb       	ldi	r22, 0xB9	; 185
    2432:	75 e0       	ldi	r23, 0x05	; 5
    2434:	8e e9       	ldi	r24, 0x9E	; 158
    2436:	93 e0       	ldi	r25, 0x03	; 3
    2438:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	ab 81       	ldd	r26, Y+3	; 0x03
    2442:	bc 81       	ldd	r27, Y+4	; 0x04
    2444:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__initState+0x5>
    2448:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__initState+0x6>
    244c:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__initState+0x7>
    2450:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__initState+0x8>
    2454:	8e e9       	ldi	r24, 0x9E	; 158
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	2c 96       	adiw	r28, 0x0c	; 12
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret

0000246e <_Z15switchOffSystemv>:
    246e:	69 e4       	ldi	r22, 0x49	; 73
    2470:	71 e0       	ldi	r23, 0x01	; 1
    2472:	8e e9       	ldi	r24, 0x9E	; 158
    2474:	93 e0       	ldi	r25, 0x03	; 3
    2476:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	85 e0       	ldi	r24, 0x05	; 5
    247e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    2482:	68 eb       	ldi	r22, 0xB8	; 184
    2484:	7b e0       	ldi	r23, 0x0B	; 11
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <delay>

0000248e <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	2a 97       	sbiw	r28, 0x0a	; 10
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    24a2:	66 ea       	ldi	r22, 0xA6	; 166
    24a4:	75 e0       	ldi	r23, 0x05	; 5
    24a6:	8e e9       	ldi	r24, 0x9E	; 158
    24a8:	93 e0       	ldi	r25, 0x03	; 3
    24aa:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	1b 82       	std	Y+3, r1	; 0x03
    24b4:	1a 82       	std	Y+2, r1	; 0x02
    24b6:	1d 82       	std	Y+5, r1	; 0x05
    24b8:	1c 82       	std	Y+4, r1	; 0x04
    24ba:	1f 82       	std	Y+7, r1	; 0x07
    24bc:	1e 82       	std	Y+6, r1	; 0x06
    24be:	19 86       	std	Y+9, r1	; 0x09
    24c0:	18 86       	std	Y+8, r1	; 0x08
    24c2:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    24c4:	be 01       	movw	r22, r28
    24c6:	6f 5f       	subi	r22, 0xFF	; 255
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	8c ea       	ldi	r24, 0xAC	; 172
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	2a 96       	adiw	r28, 0x0a	; 10
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	08 95       	ret

000024e6 <_Z17createEncodedDataPcPhh13FONA_GET_RSSI>:

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, 
					   FONA_GET_RSSI rssi) {
    24e6:	2f 92       	push	r2
    24e8:	3f 92       	push	r3
    24ea:	4f 92       	push	r4
    24ec:	5f 92       	push	r5
    24ee:	6f 92       	push	r6
    24f0:	7f 92       	push	r7
    24f2:	8f 92       	push	r8
    24f4:	9f 92       	push	r9
    24f6:	af 92       	push	r10
    24f8:	bf 92       	push	r11
    24fa:	df 92       	push	r13
    24fc:	ef 92       	push	r14
    24fe:	ff 92       	push	r15
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	2d 97       	sbiw	r28, 0x0d	; 13
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	4c 01       	movw	r8, r24
    251a:	5b 01       	movw	r10, r22
    251c:	d4 2e       	mov	r13, r20
    251e:	28 01       	movw	r4, r16
    2520:	39 01       	movw	r6, r18
	payload.setModuleId(mem.getModuleId());
	payload.setBootNumber(mem.getBootCount());
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
	payload.setRSSI(rssi);
	payload.createEncodedPayload(encodedOutput);
}
    2522:	2d b6       	in	r2, 0x3d	; 61
    2524:	3e b6       	in	r3, 0x3e	; 62

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, 
					   FONA_GET_RSSI rssi) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int16_t freeRAM = Helpers::freeMemory();
    2526:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN7Helpers10freeMemoryEv>
    252a:	7c 01       	movw	r14, r24
	int16_t minRAM = (sizeof(SensorData)*maxReadings)
    252c:	0d 2d       	mov	r16, r13
    252e:	10 e0       	ldi	r17, 0x00	; 0
					+sizeof(GsmPayload)
					+100; //Buffer

	if (freeRAM < minRAM)
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	d2 9e       	mul	r13, r18
    2534:	c0 01       	movw	r24, r0
    2536:	11 24       	eor	r1, r1
    2538:	8f 58       	subi	r24, 0x8F	; 143
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	e8 16       	cp	r14, r24
    253e:	f9 06       	cpc	r15, r25
    2540:	34 f4       	brge	.+12     	; 0x254e <_Z17createEncodedDataPcPhh13FONA_GET_RSSI+0x68>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    2542:	66 e7       	ldi	r22, 0x76	; 118
    2544:	75 e0       	ldi	r23, 0x05	; 5
    2546:	8e e9       	ldi	r24, 0x9E	; 158
    2548:	93 e0       	ldi	r25, 0x03	; 3
    254a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    254e:	67 e4       	ldi	r22, 0x47	; 71
    2550:	71 e0       	ldi	r23, 0x01	; 1
    2552:	8e e9       	ldi	r24, 0x9E	; 158
    2554:	93 e0       	ldi	r25, 0x03	; 3
    2556:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    255a:	4a e0       	ldi	r20, 0x0A	; 10
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	b7 01       	movw	r22, r14
    2560:	8e e9       	ldi	r24, 0x9E	; 158
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN5Print7printlnEii>
	
	SensorData sData[maxReadings];
    2568:	2a e0       	ldi	r18, 0x0A	; 10
    256a:	20 9f       	mul	r18, r16
    256c:	c0 01       	movw	r24, r0
    256e:	21 9f       	mul	r18, r17
    2570:	90 0d       	add	r25, r0
    2572:	11 24       	eor	r1, r1
    2574:	ed b7       	in	r30, 0x3d	; 61
    2576:	fe b7       	in	r31, 0x3e	; 62
    2578:	e8 1b       	sub	r30, r24
    257a:	f9 0b       	sbc	r31, r25
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	fe bf       	out	0x3e, r31	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	ed bf       	out	0x3d, r30	; 61
    2586:	2d b7       	in	r18, 0x3d	; 61
    2588:	3e b7       	in	r19, 0x3e	; 62
    258a:	2f 5f       	subi	r18, 0xFF	; 255
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	79 01       	movw	r14, r18
    2590:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	01 50       	subi	r16, 0x01	; 1
    2596:	11 09       	sbc	r17, r1
    2598:	60 f0       	brcs	.+24     	; 0x25b2 <_Z17createEncodedDataPcPhh13FONA_GET_RSSI+0xcc>
    259a:	80 83       	st	Z, r24
    259c:	12 82       	std	Z+2, r1	; 0x02
    259e:	11 82       	std	Z+1, r1	; 0x01
    25a0:	14 82       	std	Z+4, r1	; 0x04
    25a2:	13 82       	std	Z+3, r1	; 0x03
    25a4:	16 82       	std	Z+6, r1	; 0x06
    25a6:	15 82       	std	Z+5, r1	; 0x05
    25a8:	10 86       	std	Z+8, r1	; 0x08
    25aa:	17 82       	std	Z+7, r1	; 0x07
    25ac:	11 86       	std	Z+9, r1	; 0x09
    25ae:	3a 96       	adiw	r30, 0x0a	; 10
    25b0:	f1 cf       	rjmp	.-30     	; 0x2594 <_Z17createEncodedDataPcPhh13FONA_GET_RSSI+0xae>
	*outputNumLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    25b2:	4d 2d       	mov	r20, r13
    25b4:	b7 01       	movw	r22, r14
    25b6:	8e ea       	ldi	r24, 0xAE	; 174
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    25be:	f5 01       	movw	r30, r10
    25c0:	80 83       	st	Z, r24
	
	GsmPayload payload;
    25c2:	ce 01       	movw	r24, r28
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(mem.getModuleId());
    25ca:	8e ea       	ldi	r24, 0xAE	; 174
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN12RmMemManager11getModuleIdEv>
    25d2:	68 2f       	mov	r22, r24
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(mem.getBootCount());
    25dc:	8e ea       	ldi	r24, 0xAE	; 174
    25de:	91 e0       	ldi	r25, 0x01	; 1
    25e0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZN12RmMemManager12getBootCountEv>
    25e4:	bc 01       	movw	r22, r24
    25e6:	ce 01       	movw	r24, r28
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
    25ee:	f5 01       	movw	r30, r10
    25f0:	40 81       	ld	r20, Z
    25f2:	b7 01       	movw	r22, r14
    25f4:	ce 01       	movw	r24, r28
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(rssi);
    25fc:	b3 01       	movw	r22, r6
    25fe:	a2 01       	movw	r20, r4
    2600:	ce 01       	movw	r24, r28
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    2608:	b4 01       	movw	r22, r8
    260a:	ce 01       	movw	r24, r28
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN10GsmPayload20createEncodedPayloadEPc>
}
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	3e be       	out	0x3e, r3	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	2d be       	out	0x3d, r2	; 61
    261c:	2d 96       	adiw	r28, 0x0d	; 13
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	ff 90       	pop	r15
    2632:	ef 90       	pop	r14
    2634:	df 90       	pop	r13
    2636:	bf 90       	pop	r11
    2638:	af 90       	pop	r10
    263a:	9f 90       	pop	r9
    263c:	8f 90       	pop	r8
    263e:	7f 90       	pop	r7
    2640:	6f 90       	pop	r6
    2642:	5f 90       	pop	r5
    2644:	4f 90       	pop	r4
    2646:	3f 90       	pop	r3
    2648:	2f 90       	pop	r2
    264a:	08 95       	ret

0000264c <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    264c:	3f 92       	push	r3
    264e:	4f 92       	push	r4
    2650:	5f 92       	push	r5
    2652:	6f 92       	push	r6
    2654:	7f 92       	push	r7
    2656:	8f 92       	push	r8
    2658:	9f 92       	push	r9
    265a:	af 92       	push	r10
    265c:	bf 92       	push	r11
    265e:	cf 92       	push	r12
    2660:	df 92       	push	r13
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	a3 97       	sbiw	r28, 0x23	; 35
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
	Helpers::printDailySendData(&sendData);
		
	mem.appendDailyEntry(&sendData);
		
	return true;
}
    267e:	4d b6       	in	r4, 0x3d	; 61
    2680:	5e b6       	in	r5, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2682:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_sendDataLoopCount>
    2686:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_sendDataLoopCount+0x1>
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_sendDataLoopCount+0x1>
    2690:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	31 f4       	brne	.+12     	; 0x26a4 <_Z8sendDatav+0x58>
		RM_LOGLN(F("Initialising Fona to send data"));
    2698:	67 e5       	ldi	r22, 0x57	; 87
    269a:	75 e0       	ldi	r23, 0x05	; 5
    269c:	8e e9       	ldi	r24, 0x9E	; 158
    269e:	93 e0       	ldi	r25, 0x03	; 3
    26a0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	INITIALISING_STATE* sendDataFona = ensureFonaInitialised(true);
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	0e 94 04 11 	call	0x2208	; 0x2208 <_Z21ensureFonaInitialisedb>
    26aa:	5c 01       	movw	r10, r24
	
	if (!sendDataFona->isComplete) {
    26ac:	fc 01       	movw	r30, r24
    26ae:	32 80       	ldd	r3, Z+2	; 0x02
    26b0:	31 10       	cpse	r3, r1
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <_Z8sendDatav+0x76>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    26b4:	6f e3       	ldi	r22, 0x3F	; 63
    26b6:	75 e0       	ldi	r23, 0x05	; 5
    26b8:	8e e9       	ldi	r24, 0x9E	; 158
    26ba:	93 e0       	ldi	r25, 0x03	; 3
    26bc:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return false; //Still waiting to initialise
    26c0:	a7 c0       	rjmp	.+334    	; 0x2810 <_Z8sendDatav+0x1c4>
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	1a 82       	std	Y+2, r1	; 0x02
    26c8:	1c 82       	std	Y+4, r1	; 0x04
    26ca:	1b 82       	std	Y+3, r1	; 0x03
    26cc:	1d 82       	std	Y+5, r1	; 0x05
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    26ce:	1e 82       	std	Y+6, r1	; 0x06
    26d0:	1f 82       	std	Y+7, r1	; 0x07
    26d2:	18 86       	std	Y+8, r1	; 0x08
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    26d4:	1a 86       	std	Y+10, r1	; 0x0a
    26d6:	1b 86       	std	Y+11, r1	; 0x0b
    26d8:	1c 86       	std	Y+12, r1	; 0x0c
    26da:	1e 86       	std	Y+14, r1	; 0x0e
    26dc:	1d 86       	std	Y+13, r1	; 0x0d
    26de:	18 8a       	std	Y+16, r1	; 0x10
    26e0:	1f 86       	std	Y+15, r1	; 0x0f
    26e2:	1a 8a       	std	Y+18, r1	; 0x12
    26e4:	19 8a       	std	Y+17, r1	; 0x11
	}
		
	DailyCycleData sendData;
	sendData.BootNo = mem.getBootCount();
    26e6:	8e ea       	ldi	r24, 0xAE	; 174
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZN12RmMemManager12getBootCountEv>
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
	sendData.InitStatus = sendDataFona->_fonaStatusInit;
    26f2:	f5 01       	movw	r30, r10
    26f4:	83 81       	ldd	r24, Z+3	; 0x03
    26f6:	8a 87       	std	Y+10, r24	; 0x0a
	sendData.GPRSInitStatus = sendDataFona->_gprsStatusInit;
    26f8:	84 81       	ldd	r24, Z+4	; 0x04
    26fa:	8b 87       	std	Y+11, r24	; 0x0b
	sendData.RSSI = sendDataFona->_rssiStatusInit;
    26fc:	85 81       	ldd	r24, Z+5	; 0x05
    26fe:	96 81       	ldd	r25, Z+6	; 0x06
    2700:	a7 81       	ldd	r26, Z+7	; 0x07
    2702:	b0 85       	ldd	r27, Z+8	; 0x08
    2704:	8e 83       	std	Y+6, r24	; 0x06
    2706:	9f 83       	std	Y+7, r25	; 0x07
    2708:	a8 87       	std	Y+8, r26	; 0x08
    270a:	b9 87       	std	Y+9, r27	; 0x09
		
	if (sendDataFona->fona == NULL) {
    270c:	a0 80       	ld	r10, Z
    270e:	b1 80       	ldd	r11, Z+1	; 0x01
    2710:	a1 14       	cp	r10, r1
    2712:	b1 04       	cpc	r11, r1
    2714:	39 f4       	brne	.+14     	; 0x2724 <_Z8sendDatav+0xd8>
		
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    2716:	6c e2       	ldi	r22, 0x2C	; 44
    2718:	75 e0       	ldi	r23, 0x05	; 5
    271a:	8e e9       	ldi	r24, 0x9E	; 158
    271c:	93 e0       	ldi	r25, 0x03	; 3
    271e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2722:	6f c0       	rjmp	.+222    	; 0x2802 <_Z8sendDatav+0x1b6>
	
	Adafruit_FONA* fona = (Adafruit_FONA*)sendDataFona->fona;
	
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t fullEncodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    2724:	84 e1       	ldi	r24, 0x14	; 20
    2726:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
	char encodedData[fullEncodedSz];
    272a:	2d b7       	in	r18, 0x3d	; 61
    272c:	3e b7       	in	r19, 0x3e	; 62
    272e:	28 1b       	sub	r18, r24
    2730:	39 0b       	sbc	r19, r25
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	3e bf       	out	0x3e, r19	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	2d bf       	out	0x3d, r18	; 61
    273c:	8d b7       	in	r24, 0x3d	; 61
    273e:	9e b7       	in	r25, 0x3e	; 62
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	4c 01       	movw	r8, r24
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	uint8_t numReadingsLoaded;
	createEncodedData(encodedData, &numReadingsLoaded, GPRS_MAX_READINGS_FOR_SEND, sendData.RSSI);
    2744:	0e 81       	ldd	r16, Y+6	; 0x06
    2746:	1f 81       	ldd	r17, Y+7	; 0x07
    2748:	28 85       	ldd	r18, Y+8	; 0x08
    274a:	39 85       	ldd	r19, Y+9	; 0x09
    274c:	44 e1       	ldi	r20, 0x14	; 20
    274e:	be 01       	movw	r22, r28
    2750:	6d 5d       	subi	r22, 0xDD	; 221
    2752:	7f 4f       	sbci	r23, 0xFF	; 255
    2754:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_Z17createEncodedDataPcPhh13FONA_GET_RSSI>
	sendData.NoOfReadings = numReadingsLoaded;
    2758:	8b a1       	ldd	r24, Y+35	; 0x23
    275a:	8d 83       	std	Y+5, r24	; 0x05
	
	uint16_t actualEncodedSz = GsmPayload::getEncodedPayloadSize_S(numReadingsLoaded);
    275c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    2760:	3c 01       	movw	r6, r24

	RM_LOGLN(F("Encoded data created and ready for send:"));
    2762:	63 e0       	ldi	r22, 0x03	; 3
    2764:	75 e0       	ldi	r23, 0x05	; 5
    2766:	8e e9       	ldi	r24, 0x9E	; 158
    2768:	93 e0       	ldi	r25, 0x03	; 3
    276a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    276e:	b4 01       	movw	r22, r8
    2770:	8e e9       	ldi	r24, 0x9E	; 158
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN5Print7printlnEPKc>
	
	uint8_t maxResponseSz = 10;
	char response[maxResponseSz] = {0};
    2778:	1b 8a       	std	Y+19, r1	; 0x13
    277a:	1c 8a       	std	Y+20, r1	; 0x14
    277c:	1d 8a       	std	Y+21, r1	; 0x15
    277e:	1e 8a       	std	Y+22, r1	; 0x16
    2780:	1f 8a       	std	Y+23, r1	; 0x17
    2782:	18 8e       	std	Y+24, r1	; 0x18
    2784:	19 8e       	std	Y+25, r1	; 0x19
    2786:	1a 8e       	std	Y+26, r1	; 0x1a
    2788:	1b 8e       	std	Y+27, r1	; 0x1b
    278a:	1c 8e       	std	Y+28, r1	; 0x1c
	uint16_t statuscode=0;
    278c:	1a a2       	std	Y+34, r1	; 0x22
    278e:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t actualResponseLen=0;
    2790:	18 a2       	std	Y+32, r1	; 0x20
    2792:	1f 8e       	std	Y+31, r1	; 0x1f
	FONA_STATUS_GPRS_SEND status =  fona->sendDataOverGprs(
		(uint8_t*)encodedData, actualEncodedSz, 
		response, maxResponseSz, &actualResponseLen, &statuscode);
    2794:	fe 01       	movw	r30, r28
    2796:	b1 96       	adiw	r30, 0x21	; 33
    2798:	6f 01       	movw	r12, r30
    279a:	9e 01       	movw	r18, r28
    279c:	21 5e       	subi	r18, 0xE1	; 225
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	79 01       	movw	r14, r18
    27a2:	0a e0       	ldi	r16, 0x0A	; 10
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	2c 50       	subi	r18, 0x0C	; 12
    27a8:	31 09       	sbc	r19, r1
    27aa:	a3 01       	movw	r20, r6
    27ac:	b4 01       	movw	r22, r8
    27ae:	c5 01       	movw	r24, r10
    27b0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_>
    27b4:	78 2e       	mov	r7, r24

	uint16_t responseId = atoi(response);
    27b6:	ce 01       	movw	r24, r28
    27b8:	43 96       	adiw	r24, 0x13	; 19
    27ba:	0e 94 97 24 	call	0x492e	; 0x492e <atoi>
    27be:	4c 01       	movw	r8, r24

	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    27c0:	be 01       	movw	r22, r28
    27c2:	63 5e       	subi	r22, 0xE3	; 227
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	c5 01       	movw	r24, r10
    27c8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN13Adafruit_FONA14getBattPercentEPj>
    27cc:	81 11       	cpse	r24, r1
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <_Z8sendDatav+0x188>
		sendData.BattPct = -1;
    27d0:	8f ef       	ldi	r24, 0xFF	; 255
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <_Z8sendDatav+0x18a>
	else
		sendData.BattPct = battPct;
    27d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d6:	8a 83       	std	Y+2, r24	; 0x02
	
	sendData.SendStatus = status;
    27d8:	7c 86       	std	Y+12, r7	; 0x0c
	sendData.ResponseHTMLCode = statuscode;
    27da:	89 a1       	ldd	r24, Y+33	; 0x21
    27dc:	9a a1       	ldd	r25, Y+34	; 0x22
    27de:	9e 87       	std	Y+14, r25	; 0x0e
    27e0:	8d 87       	std	Y+13, r24	; 0x0d
	sendData.ResponseLength = actualResponseLen;
    27e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e4:	98 a1       	ldd	r25, Y+32	; 0x20
    27e6:	98 8b       	std	Y+16, r25	; 0x10
    27e8:	8f 87       	std	Y+15, r24	; 0x0f
	sendData.ResponseId = responseId;
    27ea:	9a 8a       	std	Y+18, r9	; 0x12
    27ec:	89 8a       	std	Y+17, r8	; 0x11
	
	RM_LOGLN(F("Send-Data Status Slot:"));
    27ee:	6c ee       	ldi	r22, 0xEC	; 236
    27f0:	74 e0       	ldi	r23, 0x04	; 4
    27f2:	8e e9       	ldi	r24, 0x9E	; 158
    27f4:	93 e0       	ldi	r25, 0x03	; 3
    27f6:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printDailySendData(&sendData);
    27fa:	ce 01       	movw	r24, r28
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_ZN7Helpers18printDailySendDataEP14DailyCycleData>
		
	mem.appendDailyEntry(&sendData);
    2802:	be 01       	movw	r22, r28
    2804:	6f 5f       	subi	r22, 0xFF	; 255
    2806:	7f 4f       	sbci	r23, 0xFF	; 255
    2808:	8e ea       	ldi	r24, 0xAE	; 174
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
	return true;
}
    2810:	83 2d       	mov	r24, r3
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	5e be       	out	0x3e, r5	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	4d be       	out	0x3d, r4	; 61
    281c:	a3 96       	adiw	r28, 0x23	; 35
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
    2838:	bf 90       	pop	r11
    283a:	af 90       	pop	r10
    283c:	9f 90       	pop	r9
    283e:	8f 90       	pop	r8
    2840:	7f 90       	pop	r7
    2842:	6f 90       	pop	r6
    2844:	5f 90       	pop	r5
    2846:	4f 90       	pop	r4
    2848:	3f 90       	pop	r3
    284a:	08 95       	ret

0000284c <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    284c:	68 ee       	ldi	r22, 0xE8	; 232
    284e:	73 e0       	ldi	r23, 0x03	; 3
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <delay>
	++_timerCounter;
    2858:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    285c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    2866:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    286a:	62 ee       	ldi	r22, 0xE2	; 226
    286c:	74 e0       	ldi	r23, 0x04	; 4
    286e:	8e e9       	ldi	r24, 0x9E	; 158
    2870:	93 e0       	ldi	r25, 0x03	; 3
    2872:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    2876:	67 e4       	ldi	r22, 0x47	; 71
    2878:	71 e0       	ldi	r23, 0x01	; 1
    287a:	8e e9       	ldi	r24, 0x9E	; 158
    287c:	93 e0       	ldi	r25, 0x03	; 3
    287e:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print5printEPKc>
    2882:	4a e0       	ldi	r20, 0x0A	; 10
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <_behaviour>
    288a:	8e e9       	ldi	r24, 0x9E	; 158
    288c:	93 e0       	ldi	r25, 0x03	; 3
    288e:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    2892:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2896:	80 ff       	sbrs	r24, 0
    2898:	09 c0       	rjmp	.+18     	; 0x28ac <loop+0x60>
		
		if (takeReadings())
    289a:	0e 94 47 12 	call	0x248e	; 0x248e <_Z12takeReadingsv>
    289e:	88 23       	and	r24, r24
    28a0:	29 f0       	breq	.+10     	; 0x28ac <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    28a2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    28a6:	8e 7f       	andi	r24, 0xFE	; 254
    28a8:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    28ac:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    28b0:	81 ff       	sbrs	r24, 1
    28b2:	09 c0       	rjmp	.+18     	; 0x28c6 <loop+0x7a>
		
		if (sendData())
    28b4:	0e 94 26 13 	call	0x264c	; 0x264c <_Z8sendDatav>
    28b8:	88 23       	and	r24, r24
    28ba:	29 f0       	breq	.+10     	; 0x28c6 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    28bc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    28c0:	8d 7f       	andi	r24, 0xFD	; 253
    28c2:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    28c6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    28ca:	82 ff       	sbrs	r24, 2
    28cc:	17 c0       	rjmp	.+46     	; 0x28fc <loop+0xb0>
	
		if (_timerCounter == 1)
    28ce:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    28d2:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	31 f4       	brne	.+12     	; 0x28e6 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    28da:	6e ea       	ldi	r22, 0xAE	; 174
    28dc:	71 e0       	ldi	r23, 0x01	; 1
    28de:	89 eb       	ldi	r24, 0xB9	; 185
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    28e6:	0e 94 26 13 	call	0x264c	; 0x264c <_Z8sendDatav>
    28ea:	88 23       	and	r24, r24
    28ec:	39 f0       	breq	.+14     	; 0x28fc <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    28ee:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    28f2:	8b 7f       	andi	r24, 0xFB	; 251
    28f4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    28f8:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    28fc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2900:	81 11       	cpse	r24, r1
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <loop+0xbc>
		
		switchOffSystem();
    2904:	0c 94 37 12 	jmp	0x246e	; 0x246e <_Z15switchOffSystemv>
    2908:	08 95       	ret

0000290a <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	64 e0       	ldi	r22, 0x04	; 4
    290e:	89 eb       	ldi	r24, 0xB9	; 185
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	8e ea       	ldi	r24, 0xAE	; 174
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    2920:	61 e0       	ldi	r22, 0x01	; 1
    2922:	8c ea       	ldi	r24, 0xAC	; 172
    2924:	91 e0       	ldi	r25, 0x01	; 1
    2926:	0e 94 48 15 	call	0x2a90	; 0x2a90 <_ZN13SensorManagerC1Eb>
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    292a:	ee e9       	ldi	r30, 0x9E	; 158
    292c:	f1 e0       	ldi	r31, 0x01	; 1
    292e:	12 82       	std	Z+2, r1	; 0x02
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    2930:	15 82       	std	Z+5, r1	; 0x05
    2932:	16 82       	std	Z+6, r1	; 0x06
    2934:	17 82       	std	Z+7, r1	; 0x07
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2936:	12 86       	std	Z+10, r1	; 0x0a
    2938:	11 86       	std	Z+9, r1	; 0x09
    293a:	14 86       	std	Z+12, r1	; 0x0c
    293c:	13 86       	std	Z+11, r1	; 0x0b
    293e:	08 95       	ret

00002940 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    2940:	8d e2       	ldi	r24, 0x2D	; 45
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <__fona+0x1>
    2948:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <__fona>
    294c:	8e ec       	ldi	r24, 0xCE	; 206
    294e:	92 e0       	ldi	r25, 0x02	; 2
    2950:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <_ZN6StringD1Ev>

00002954 <_ZN7TwoWire5writeEi>:
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
	uint16_t currVal = getUShortFromMemory(addr);
	++currVal;
	setUShortToMemory(addr, currVal);
	return currVal;
}
    2954:	dc 01       	movw	r26, r24
    2956:	ed 91       	ld	r30, X+
    2958:	fc 91       	ld	r31, X
    295a:	01 90       	ld	r0, Z+
    295c:	f0 81       	ld	r31, Z
    295e:	e0 2d       	mov	r30, r0
    2960:	09 94       	ijmp

00002962 <_ZN12RmMemManagerC1Eb>:
    2962:	fc 01       	movw	r30, r24
    2964:	14 82       	std	Z+4, r1	; 0x04
    2966:	15 82       	std	Z+5, r1	; 0x05
    2968:	16 82       	std	Z+6, r1	; 0x06
    296a:	17 82       	std	Z+7, r1	; 0x07
    296c:	80 e8       	ldi	r24, 0x80	; 128
    296e:	80 87       	std	Z+8, r24	; 0x08
    2970:	81 87       	std	Z+9, r24	; 0x09
    2972:	12 86       	std	Z+10, r1	; 0x0a
    2974:	63 83       	std	Z+3, r22	; 0x03
    2976:	61 11       	cpse	r22, r1
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <_ZN12RmMemManagerC1Eb+0x20>
    297a:	86 e4       	ldi	r24, 0x46	; 70
    297c:	93 e0       	ldi	r25, 0x03	; 3
    297e:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <_ZN7TwoWire5beginEv>
    2982:	08 95       	ret

00002984 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	ec 01       	movw	r28, r24
    298a:	cb 01       	movw	r24, r22
    298c:	68 81       	ld	r22, Y
    298e:	79 81       	ldd	r23, Y+1	; 0x01
    2990:	61 15       	cp	r22, r1
    2992:	71 05       	cpc	r23, r1
    2994:	49 f0       	breq	.+18     	; 0x29a8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x24>
    2996:	4a 81       	ldd	r20, Y+2	; 0x02
    2998:	2a e0       	ldi	r18, 0x0A	; 10
    299a:	42 9f       	mul	r20, r18
    299c:	a0 01       	movw	r20, r0
    299e:	11 24       	eor	r1, r1
    29a0:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <memcpy>
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	01 c0       	rjmp	.+2      	; 0x29aa <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x26>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
    29b0:	08 95       	ret

000029b2 <_Z12internalReadjPhh>:
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	eb 01       	movw	r28, r22
    29c0:	7b 01       	movw	r14, r22
    29c2:	e4 0e       	add	r14, r20
    29c4:	f1 1c       	adc	r15, r1
    29c6:	8c 01       	movw	r16, r24
    29c8:	ce 15       	cp	r28, r14
    29ca:	df 05       	cpc	r29, r15
    29cc:	71 f1       	breq	.+92     	; 0x2a2a <_Z12internalReadjPhh+0x78>
    29ce:	60 e5       	ldi	r22, 0x50	; 80
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	86 e4       	ldi	r24, 0x46	; 70
    29d4:	93 e0       	ldi	r25, 0x03	; 3
    29d6:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN7TwoWire17beginTransmissionEi>
    29da:	61 2f       	mov	r22, r17
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	86 e4       	ldi	r24, 0x46	; 70
    29e0:	93 e0       	ldi	r25, 0x03	; 3
    29e2:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN7TwoWire5writeEi>
    29e6:	b8 01       	movw	r22, r16
    29e8:	77 27       	eor	r23, r23
    29ea:	86 e4       	ldi	r24, 0x46	; 70
    29ec:	93 e0       	ldi	r25, 0x03	; 3
    29ee:	0e 94 aa 14 	call	0x2954	; 0x2954 <_ZN7TwoWire5writeEi>
    29f2:	86 e4       	ldi	r24, 0x46	; 70
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	0e 94 49 19 	call	0x3292	; 0x3292 <_ZN7TwoWire15endTransmissionEv>
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	60 e5       	ldi	r22, 0x50	; 80
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	86 e4       	ldi	r24, 0x46	; 70
    2a04:	93 e0       	ldi	r25, 0x03	; 3
    2a06:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7TwoWire11requestFromEii>
    2a0a:	86 e4       	ldi	r24, 0x46	; 70
    2a0c:	93 e0       	ldi	r25, 0x03	; 3
    2a0e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN7TwoWire9availableEv>
    2a12:	89 2b       	or	r24, r25
    2a14:	29 f0       	breq	.+10     	; 0x2a20 <_Z12internalReadjPhh+0x6e>
    2a16:	86 e4       	ldi	r24, 0x46	; 70
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <_ZN7TwoWire4readEv>
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <_Z12internalReadjPhh+0x70>
    2a20:	8f ef       	ldi	r24, 0xFF	; 255
    2a22:	89 93       	st	Y+, r24
    2a24:	0f 5f       	subi	r16, 0xFF	; 255
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	cf cf       	rjmp	.-98     	; 0x29c8 <_Z12internalReadjPhh+0x16>
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	ff 90       	pop	r15
    2a34:	ef 90       	pop	r14
    2a36:	08 95       	ret

00002a38 <_ZN12RmMemManager18getUCharFromMemoryEj>:
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	1f 92       	push	r1
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	cb 01       	movw	r24, r22
    2a44:	41 e0       	ldi	r20, 0x01	; 1
    2a46:	be 01       	movw	r22, r28
    2a48:	6f 5f       	subi	r22, 0xFF	; 255
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z12internalReadjPhh>
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	0f 90       	pop	r0
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	08 95       	ret

00002a5a <_ZN12RmMemManager11getModuleIdEv>:
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <_ZN12RmMemManager18getUCharFromMemoryEj>

00002a62 <_ZN12RmMemManager19getUShortFromMemoryEj>:
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	42 e0       	ldi	r20, 0x02	; 2
    2a70:	be 01       	movw	r22, r28
    2a72:	6f 5f       	subi	r22, 0xFF	; 255
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255
    2a76:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z12internalReadjPhh>
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	08 95       	ret

00002a88 <_ZN12RmMemManager12getBootCountEv>:

uint16_t RmMemManager::getBootCount() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
	uint16_t currVal = getUShortFromMemory(addr);
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <_ZN12RmMemManager19getUShortFromMemoryEj>

00002a90 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    2a90:	fc 01       	movw	r30, r24
    2a92:	60 83       	st	Z, r22
    2a94:	08 95       	ret

00002a96 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    2a96:	fc 01       	movw	r30, r24
    2a98:	80 81       	ld	r24, Z
    2a9a:	81 11       	cpse	r24, r1
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    2a9e:	86 2f       	mov	r24, r22
    2aa0:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    2aa4:	85 e0       	ldi	r24, 0x05	; 5
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	08 95       	ret

00002aaa <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    2aaa:	fc 01       	movw	r30, r24
    2aac:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    2aae:	81 81       	ldd	r24, Z+1	; 0x01
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	12 96       	adiw	r26, 0x02	; 2
    2ab8:	9c 93       	st	X, r25
    2aba:	8e 93       	st	-X, r24
    2abc:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    2abe:	81 81       	ldd	r24, Z+1	; 0x01
    2ac0:	2a e0       	ldi	r18, 0x0A	; 10
    2ac2:	82 9f       	mul	r24, r18
    2ac4:	c0 01       	movw	r24, r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	14 96       	adiw	r26, 0x04	; 4
    2aca:	9c 93       	st	X, r25
    2acc:	8e 93       	st	-X, r24
    2ace:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    2ad0:	81 81       	ldd	r24, Z+1	; 0x01
    2ad2:	67 e0       	ldi	r22, 0x07	; 7
    2ad4:	0e 94 35 22 	call	0x446a	; 0x446a <__udivmodqi4>
    2ad8:	89 2f       	mov	r24, r25
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	16 96       	adiw	r26, 0x06	; 6
    2ade:	9c 93       	st	X, r25
    2ae0:	8e 93       	st	-X, r24
    2ae2:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    2ae4:	81 81       	ldd	r24, Z+1	; 0x01
    2ae6:	24 e6       	ldi	r18, 0x64	; 100
    2ae8:	82 9f       	mul	r24, r18
    2aea:	c0 01       	movw	r24, r0
    2aec:	11 24       	eor	r1, r1
    2aee:	18 96       	adiw	r26, 0x08	; 8
    2af0:	9c 93       	st	X, r25
    2af2:	8e 93       	st	-X, r24
    2af4:	17 97       	sbiw	r26, 0x07	; 7
    2af6:	08 95       	ret

00002af8 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    2af8:	af 92       	push	r10
    2afa:	bf 92       	push	r11
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	8c 01       	movw	r16, r24
    2b0e:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    2b10:	fc 01       	movw	r30, r24
    2b12:	80 81       	ld	r24, Z
    2b14:	88 23       	and	r24, r24
    2b16:	21 f0       	breq	.+8      	; 0x2b20 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    2b18:	c8 01       	movw	r24, r16
    2b1a:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_ZN13SensorManager11getMockDataEP10SensorData>
    2b1e:	1b c0       	rjmp	.+54     	; 0x2b56 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2b20:	6e e0       	ldi	r22, 0x0E	; 14
    2b22:	c8 01       	movw	r24, r16
    2b24:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_ZN13SensorManager16takeSampleAnalogEh>
    2b28:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    2b2a:	6f e0       	ldi	r22, 0x0F	; 15
    2b2c:	c8 01       	movw	r24, r16
    2b2e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_ZN13SensorManager16takeSampleAnalogEh>
    2b32:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2b34:	61 e1       	ldi	r22, 0x11	; 17
    2b36:	c8 01       	movw	r24, r16
    2b38:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_ZN13SensorManager16takeSampleAnalogEh>
    2b3c:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    2b3e:	60 e1       	ldi	r22, 0x10	; 16
    2b40:	c8 01       	movw	r24, r16
    2b42:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    2b46:	ba 82       	std	Y+2, r11	; 0x02
    2b48:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    2b4a:	dc 82       	std	Y+4, r13	; 0x04
    2b4c:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    2b4e:	fe 82       	std	Y+6, r15	; 0x06
    2b50:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    2b52:	98 87       	std	Y+8, r25	; 0x08
    2b54:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2b56:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	df 90       	pop	r13
    2b66:	cf 90       	pop	r12
    2b68:	bf 90       	pop	r11
    2b6a:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    2b6c:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <_ZN7Helpers15printSensorDataEP10SensorData>

00002b70 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b70:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <twi_sendStop>
    2b7a:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	82 e1       	ldi	r24, 0x12	; 18
    2b82:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    2b86:	61 e0       	ldi	r22, 0x01	; 1
    2b88:	83 e1       	ldi	r24, 0x13	; 19
    2b8a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    2b8e:	e9 eb       	ldi	r30, 0xB9	; 185
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8e 7f       	andi	r24, 0xFE	; 254
    2b96:	80 83       	st	Z, r24
    2b98:	80 81       	ld	r24, Z
    2b9a:	8d 7f       	andi	r24, 0xFD	; 253
    2b9c:	80 83       	st	Z, r24
    2b9e:	88 e4       	ldi	r24, 0x48	; 72
    2ba0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2ba4:	85 e4       	ldi	r24, 0x45	; 69
    2ba6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2baa:	08 95       	ret

00002bac <twi_readFrom>:
    2bac:	41 32       	cpi	r20, 0x21	; 33
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <twi_readFrom+0x6>
    2bb0:	43 c0       	rjmp	.+134    	; 0x2c38 <twi_readFrom+0x8c>
    2bb2:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    2bb6:	91 11       	cpse	r25, r1
    2bb8:	fc cf       	rjmp	.-8      	; 0x2bb2 <twi_readFrom+0x6>
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <twi_state>
    2bc0:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <twi_sendStop>
    2bc4:	2f ef       	ldi	r18, 0xFF	; 255
    2bc6:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_error>
    2bca:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    2bce:	24 0f       	add	r18, r20
    2bd0:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <twi_masterBufferLength>
    2bd4:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <twi_slarw>
    2bd8:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <twi_slarw>
    2bdc:	88 0f       	add	r24, r24
    2bde:	89 2b       	or	r24, r25
    2be0:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    2be4:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	61 f4       	brne	.+24     	; 0x2c04 <twi_readFrom+0x58>
    2bec:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2bf0:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2bf4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2bf8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2bfc:	83 fd       	sbrc	r24, 3
    2bfe:	f8 cf       	rjmp	.-16     	; 0x2bf0 <twi_readFrom+0x44>
    2c00:	85 ec       	ldi	r24, 0xC5	; 197
    2c02:	01 c0       	rjmp	.+2      	; 0x2c06 <twi_readFrom+0x5a>
    2c04:	85 ee       	ldi	r24, 0xE5	; 229
    2c06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2c0a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	e1 f3       	breq	.-8      	; 0x2c0a <twi_readFrom+0x5e>
    2c12:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c16:	84 17       	cp	r24, r20
    2c18:	10 f4       	brcc	.+4      	; 0x2c1e <twi_readFrom+0x72>
    2c1a:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c1e:	ae e1       	ldi	r26, 0x1E	; 30
    2c20:	b3 e0       	ldi	r27, 0x03	; 3
    2c22:	96 2f       	mov	r25, r22
    2c24:	fb 01       	movw	r30, r22
    2c26:	8e 2f       	mov	r24, r30
    2c28:	89 1b       	sub	r24, r25
    2c2a:	84 17       	cp	r24, r20
    2c2c:	18 f4       	brcc	.+6      	; 0x2c34 <twi_readFrom+0x88>
    2c2e:	8d 91       	ld	r24, X+
    2c30:	81 93       	st	Z+, r24
    2c32:	f9 cf       	rjmp	.-14     	; 0x2c26 <twi_readFrom+0x7a>
    2c34:	84 2f       	mov	r24, r20
    2c36:	08 95       	ret
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	08 95       	ret

00002c3c <twi_writeTo>:
    2c3c:	0f 93       	push	r16
    2c3e:	41 32       	cpi	r20, 0x21	; 33
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <twi_writeTo+0x8>
    2c42:	4a c0       	rjmp	.+148    	; 0x2cd8 <twi_writeTo+0x9c>
    2c44:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    2c48:	91 11       	cpse	r25, r1
    2c4a:	fc cf       	rjmp	.-8      	; 0x2c44 <twi_writeTo+0x8>
    2c4c:	32 e0       	ldi	r19, 0x02	; 2
    2c4e:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <twi_state>
    2c52:	00 93 43 03 	sts	0x0343, r16	; 0x800343 <twi_sendStop>
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <twi_error>
    2c5c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    2c60:	40 93 1c 03 	sts	0x031C, r20	; 0x80031c <twi_masterBufferLength>
    2c64:	56 2f       	mov	r21, r22
    2c66:	ae e1       	ldi	r26, 0x1E	; 30
    2c68:	b3 e0       	ldi	r27, 0x03	; 3
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	3e 2f       	mov	r19, r30
    2c6e:	35 1b       	sub	r19, r21
    2c70:	34 17       	cp	r19, r20
    2c72:	18 f4       	brcc	.+6      	; 0x2c7a <twi_writeTo+0x3e>
    2c74:	31 91       	ld	r19, Z+
    2c76:	3d 93       	st	X+, r19
    2c78:	f9 cf       	rjmp	.-14     	; 0x2c6c <twi_writeTo+0x30>
    2c7a:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_slarw>
    2c7e:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <twi_slarw>
    2c82:	88 0f       	add	r24, r24
    2c84:	83 2b       	or	r24, r19
    2c86:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    2c8a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	61 f4       	brne	.+24     	; 0x2caa <twi_writeTo+0x6e>
    2c92:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2c96:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2c9a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c9e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2ca2:	83 fd       	sbrc	r24, 3
    2ca4:	f8 cf       	rjmp	.-16     	; 0x2c96 <twi_writeTo+0x5a>
    2ca6:	85 ec       	ldi	r24, 0xC5	; 197
    2ca8:	01 c0       	rjmp	.+2      	; 0x2cac <twi_writeTo+0x70>
    2caa:	85 ee       	ldi	r24, 0xE5	; 229
    2cac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2cb0:	22 23       	and	r18, r18
    2cb2:	21 f0       	breq	.+8      	; 0x2cbc <twi_writeTo+0x80>
    2cb4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2cb8:	82 30       	cpi	r24, 0x02	; 2
    2cba:	d1 f3       	breq	.-12     	; 0x2cb0 <twi_writeTo+0x74>
    2cbc:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc2:	79 f0       	breq	.+30     	; 0x2ce2 <twi_writeTo+0xa6>
    2cc4:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2cc8:	80 32       	cpi	r24, 0x20	; 32
    2cca:	41 f0       	breq	.+16     	; 0x2cdc <twi_writeTo+0xa0>
    2ccc:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2cd0:	80 33       	cpi	r24, 0x30	; 48
    2cd2:	31 f0       	breq	.+12     	; 0x2ce0 <twi_writeTo+0xa4>
    2cd4:	94 e0       	ldi	r25, 0x04	; 4
    2cd6:	05 c0       	rjmp	.+10     	; 0x2ce2 <twi_writeTo+0xa6>
    2cd8:	91 e0       	ldi	r25, 0x01	; 1
    2cda:	03 c0       	rjmp	.+6      	; 0x2ce2 <twi_writeTo+0xa6>
    2cdc:	92 e0       	ldi	r25, 0x02	; 2
    2cde:	01 c0       	rjmp	.+2      	; 0x2ce2 <twi_writeTo+0xa6>
    2ce0:	93 e0       	ldi	r25, 0x03	; 3
    2ce2:	89 2f       	mov	r24, r25
    2ce4:	0f 91       	pop	r16
    2ce6:	08 95       	ret

00002ce8 <twi_transmit>:
    2ce8:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2cec:	26 2f       	mov	r18, r22
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	24 0f       	add	r18, r20
    2cf2:	31 1d       	adc	r19, r1
    2cf4:	21 32       	cpi	r18, 0x21	; 33
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	dc f4       	brge	.+54     	; 0x2d30 <twi_transmit+0x48>
    2cfa:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <twi_state>
    2cfe:	24 30       	cpi	r18, 0x04	; 4
    2d00:	c9 f4       	brne	.+50     	; 0x2d34 <twi_transmit+0x4c>
    2d02:	fc 01       	movw	r30, r24
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	86 17       	cp	r24, r22
    2d0a:	58 f4       	brcc	.+22     	; 0x2d22 <twi_transmit+0x3a>
    2d0c:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2d10:	21 91       	ld	r18, Z+
    2d12:	dc 01       	movw	r26, r24
    2d14:	a4 50       	subi	r26, 0x04	; 4
    2d16:	bd 4f       	sbci	r27, 0xFD	; 253
    2d18:	a3 0f       	add	r26, r19
    2d1a:	b1 1d       	adc	r27, r1
    2d1c:	2c 93       	st	X, r18
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	f3 cf       	rjmp	.-26     	; 0x2d08 <twi_transmit+0x20>
    2d22:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2d26:	68 0f       	add	r22, r24
    2d28:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <twi_txBufferLength>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	08 95       	ret
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	08 95       	ret
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	08 95       	ret

00002d38 <twi_attachSlaveRxEvent>:
    2d38:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <twi_onSlaveReceive+0x1>
    2d3c:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_onSlaveReceive>
    2d40:	08 95       	ret

00002d42 <twi_attachSlaveTxEvent>:
    2d42:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_onSlaveTransmit+0x1>
    2d46:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_onSlaveTransmit>
    2d4a:	08 95       	ret

00002d4c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2d4c:	85 ed       	ldi	r24, 0xD5	; 213
    2d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2d52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2d56:	84 fd       	sbrc	r24, 4
    2d58:	fc cf       	rjmp	.-8      	; 0x2d52 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2d5a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2d5e:	08 95       	ret

00002d60 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2d60:	85 ec       	ldi	r24, 0xC5	; 197
    2d62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2d66:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2d6a:	08 95       	ret

00002d6c <__vector_24>:
}

ISR(TWI_vect)
{
    2d6c:	1f 92       	push	r1
    2d6e:	0f 92       	push	r0
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	0f 92       	push	r0
    2d74:	11 24       	eor	r1, r1
    2d76:	2f 93       	push	r18
    2d78:	3f 93       	push	r19
    2d7a:	4f 93       	push	r20
    2d7c:	5f 93       	push	r21
    2d7e:	6f 93       	push	r22
    2d80:	7f 93       	push	r23
    2d82:	8f 93       	push	r24
    2d84:	9f 93       	push	r25
    2d86:	af 93       	push	r26
    2d88:	bf 93       	push	r27
    2d8a:	ef 93       	push	r30
    2d8c:	ff 93       	push	r31
  switch(TW_STATUS){
    2d8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2d92:	88 7f       	andi	r24, 0xF8	; 248
    2d94:	80 36       	cpi	r24, 0x60	; 96
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <__vector_24+0x2e>
    2d98:	9e c0       	rjmp	.+316    	; 0x2ed6 <__vector_24+0x16a>
    2d9a:	78 f5       	brcc	.+94     	; 0x2dfa <__vector_24+0x8e>
    2d9c:	88 32       	cpi	r24, 0x28	; 40
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <__vector_24+0x36>
    2da0:	5d c0       	rjmp	.+186    	; 0x2e5c <__vector_24+0xf0>
    2da2:	90 f4       	brcc	.+36     	; 0x2dc8 <__vector_24+0x5c>
    2da4:	80 31       	cpi	r24, 0x10	; 16
    2da6:	09 f4       	brne	.+2      	; 0x2daa <__vector_24+0x3e>
    2da8:	56 c0       	rjmp	.+172    	; 0x2e56 <__vector_24+0xea>
    2daa:	38 f4       	brcc	.+14     	; 0x2dba <__vector_24+0x4e>
    2dac:	88 23       	and	r24, r24
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <__vector_24+0x46>
    2db0:	f5 c0       	rjmp	.+490    	; 0x2f9c <__vector_24+0x230>
    2db2:	88 30       	cpi	r24, 0x08	; 8
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <__vector_24+0x4c>
    2db6:	4f c0       	rjmp	.+158    	; 0x2e56 <__vector_24+0xea>
    2db8:	f5 c0       	rjmp	.+490    	; 0x2fa4 <__vector_24+0x238>
    2dba:	88 31       	cpi	r24, 0x18	; 24
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <__vector_24+0x54>
    2dbe:	4e c0       	rjmp	.+156    	; 0x2e5c <__vector_24+0xf0>
    2dc0:	80 32       	cpi	r24, 0x20	; 32
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <__vector_24+0x5a>
    2dc4:	5f c0       	rjmp	.+190    	; 0x2e84 <__vector_24+0x118>
    2dc6:	ee c0       	rjmp	.+476    	; 0x2fa4 <__vector_24+0x238>
    2dc8:	80 34       	cpi	r24, 0x40	; 64
    2dca:	09 f4       	brne	.+2      	; 0x2dce <__vector_24+0x62>
    2dcc:	6a c0       	rjmp	.+212    	; 0x2ea2 <__vector_24+0x136>
    2dce:	58 f4       	brcc	.+22     	; 0x2de6 <__vector_24+0x7a>
    2dd0:	80 33       	cpi	r24, 0x30	; 48
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <__vector_24+0x6a>
    2dd4:	57 c0       	rjmp	.+174    	; 0x2e84 <__vector_24+0x118>
    2dd6:	88 33       	cpi	r24, 0x38	; 56
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <__vector_24+0x70>
    2dda:	e4 c0       	rjmp	.+456    	; 0x2fa4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2ddc:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
      twi_releaseBus();
    2de0:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <twi_releaseBus>
      break;
    2de4:	df c0       	rjmp	.+446    	; 0x2fa4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2de6:	80 35       	cpi	r24, 0x50	; 80
    2de8:	09 f4       	brne	.+2      	; 0x2dec <__vector_24+0x80>
    2dea:	4f c0       	rjmp	.+158    	; 0x2e8a <__vector_24+0x11e>
    2dec:	88 35       	cpi	r24, 0x58	; 88
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <__vector_24+0x86>
    2df0:	5d c0       	rjmp	.+186    	; 0x2eac <__vector_24+0x140>
    2df2:	88 34       	cpi	r24, 0x48	; 72
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <__vector_24+0x8c>
    2df6:	d6 c0       	rjmp	.+428    	; 0x2fa4 <__vector_24+0x238>
    2df8:	d3 c0       	rjmp	.+422    	; 0x2fa0 <__vector_24+0x234>
    2dfa:	88 39       	cpi	r24, 0x98	; 152
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <__vector_24+0x94>
    2dfe:	c4 c0       	rjmp	.+392    	; 0x2f88 <__vector_24+0x21c>
    2e00:	a8 f4       	brcc	.+42     	; 0x2e2c <__vector_24+0xc0>
    2e02:	88 37       	cpi	r24, 0x78	; 120
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <__vector_24+0x9c>
    2e06:	67 c0       	rjmp	.+206    	; 0x2ed6 <__vector_24+0x16a>
    2e08:	38 f4       	brcc	.+14     	; 0x2e18 <__vector_24+0xac>
    2e0a:	88 36       	cpi	r24, 0x68	; 104
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <__vector_24+0xa4>
    2e0e:	63 c0       	rjmp	.+198    	; 0x2ed6 <__vector_24+0x16a>
    2e10:	80 37       	cpi	r24, 0x70	; 112
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <__vector_24+0xaa>
    2e14:	60 c0       	rjmp	.+192    	; 0x2ed6 <__vector_24+0x16a>
    2e16:	c6 c0       	rjmp	.+396    	; 0x2fa4 <__vector_24+0x238>
    2e18:	88 38       	cpi	r24, 0x88	; 136
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <__vector_24+0xb2>
    2e1c:	b5 c0       	rjmp	.+362    	; 0x2f88 <__vector_24+0x21c>
    2e1e:	80 39       	cpi	r24, 0x90	; 144
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <__vector_24+0xb8>
    2e22:	5f c0       	rjmp	.+190    	; 0x2ee2 <__vector_24+0x176>
    2e24:	80 38       	cpi	r24, 0x80	; 128
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <__vector_24+0xbe>
    2e28:	bd c0       	rjmp	.+378    	; 0x2fa4 <__vector_24+0x238>
    2e2a:	5b c0       	rjmp	.+182    	; 0x2ee2 <__vector_24+0x176>
    2e2c:	80 3b       	cpi	r24, 0xB0	; 176
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <__vector_24+0xc6>
    2e30:	83 c0       	rjmp	.+262    	; 0x2f38 <__vector_24+0x1cc>
    2e32:	38 f4       	brcc	.+14     	; 0x2e42 <__vector_24+0xd6>
    2e34:	80 3a       	cpi	r24, 0xA0	; 160
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <__vector_24+0xce>
    2e38:	66 c0       	rjmp	.+204    	; 0x2f06 <__vector_24+0x19a>
    2e3a:	88 3a       	cpi	r24, 0xA8	; 168
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <__vector_24+0xd4>
    2e3e:	7c c0       	rjmp	.+248    	; 0x2f38 <__vector_24+0x1cc>
    2e40:	b1 c0       	rjmp	.+354    	; 0x2fa4 <__vector_24+0x238>
    2e42:	80 3c       	cpi	r24, 0xC0	; 192
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <__vector_24+0xdc>
    2e46:	a4 c0       	rjmp	.+328    	; 0x2f90 <__vector_24+0x224>
    2e48:	88 3c       	cpi	r24, 0xC8	; 200
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <__vector_24+0xe2>
    2e4c:	a1 c0       	rjmp	.+322    	; 0x2f90 <__vector_24+0x224>
    2e4e:	88 3b       	cpi	r24, 0xB8	; 184
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <__vector_24+0xe8>
    2e52:	87 c0       	rjmp	.+270    	; 0x2f62 <__vector_24+0x1f6>
    2e54:	a7 c0       	rjmp	.+334    	; 0x2fa4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2e56:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2e5a:	10 c0       	rjmp	.+32     	; 0x2e7c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2e5c:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2e60:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2e64:	98 17       	cp	r25, r24
    2e66:	70 f5       	brcc	.+92     	; 0x2ec4 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2e68:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	8e 0f       	add	r24, r30
    2e70:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	e2 5e       	subi	r30, 0xE2	; 226
    2e78:	fc 4f       	sbci	r31, 0xFC	; 252
    2e7a:	80 81       	ld	r24, Z
    2e7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e80:	85 ec       	ldi	r24, 0xC5	; 197
    2e82:	83 c0       	rjmp	.+262    	; 0x2f8a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2e84:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
    2e88:	8b c0       	rjmp	.+278    	; 0x2fa0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e8a:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	8e 0f       	add	r24, r30
    2e92:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2e96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	e2 5e       	subi	r30, 0xE2	; 226
    2e9e:	fc 4f       	sbci	r31, 0xFC	; 252
    2ea0:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ea2:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2ea6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2eaa:	6b c0       	rjmp	.+214    	; 0x2f82 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2eac:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	8e 0f       	add	r24, r30
    2eb4:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2eb8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	e2 5e       	subi	r30, 0xE2	; 226
    2ec0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ec2:	80 83       	st	Z, r24
	if (twi_sendStop)
    2ec4:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <twi_sendStop>
    2ec8:	81 11       	cpse	r24, r1
    2eca:	6a c0       	rjmp	.+212    	; 0x2fa0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2ed2:	84 ea       	ldi	r24, 0xA4	; 164
    2ed4:	5e c0       	rjmp	.+188    	; 0x2f92 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2ed6:	83 e0       	ldi	r24, 0x03	; 3
    2ed8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2edc:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
    2ee0:	cf cf       	rjmp	.-98     	; 0x2e80 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2ee2:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2ee6:	80 32       	cpi	r24, 0x20	; 32
    2ee8:	08 f0       	brcs	.+2      	; 0x2eec <__vector_24+0x180>
    2eea:	4e c0       	rjmp	.+156    	; 0x2f88 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2eec:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	8e 0f       	add	r24, r30
    2ef4:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_rxBufferIndex>
    2ef8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	e6 52       	subi	r30, 0x26	; 38
    2f00:	fd 4f       	sbci	r31, 0xFD	; 253
    2f02:	80 83       	st	Z, r24
    2f04:	bd cf       	rjmp	.-134    	; 0x2e80 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2f06:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2f0a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2f0e:	80 32       	cpi	r24, 0x20	; 32
    2f10:	30 f4       	brcc	.+12     	; 0x2f1e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2f12:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	e6 52       	subi	r30, 0x26	; 38
    2f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f1c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2f1e:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_onSlaveReceive>
    2f28:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <twi_onSlaveReceive+0x1>
    2f2c:	8a ed       	ldi	r24, 0xDA	; 218
    2f2e:	92 e0       	ldi	r25, 0x02	; 2
    2f30:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2f32:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
      break;
    2f36:	36 c0       	rjmp	.+108    	; 0x2fa4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2f38:	84 e0       	ldi	r24, 0x04	; 4
    2f3a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2f3e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2f42:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2f46:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <twi_onSlaveTransmit>
    2f4a:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <twi_onSlaveTransmit+0x1>
    2f4e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2f50:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2f54:	81 11       	cpse	r24, r1
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2f5e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2f62:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	8e 0f       	add	r24, r30
    2f6a:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_txBufferIndex>
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	e4 50       	subi	r30, 0x04	; 4
    2f72:	fd 4f       	sbci	r31, 0xFD	; 253
    2f74:	80 81       	ld	r24, Z
    2f76:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2f7a:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2f7e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2f82:	98 17       	cp	r25, r24
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <__vector_24+0x21c>
    2f86:	7c cf       	rjmp	.-264    	; 0x2e80 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f88:	85 e8       	ldi	r24, 0x85	; 133
    2f8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2f8e:	0a c0       	rjmp	.+20     	; 0x2fa4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f90:	85 ec       	ldi	r24, 0xC5	; 197
    2f92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2f96:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
      break;
    2f9a:	04 c0       	rjmp	.+8      	; 0x2fa4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2f9c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_error>
      twi_stop();
    2fa0:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <twi_stop>
      break;
  }
}
    2fa4:	ff 91       	pop	r31
    2fa6:	ef 91       	pop	r30
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	7f 91       	pop	r23
    2fb2:	6f 91       	pop	r22
    2fb4:	5f 91       	pop	r21
    2fb6:	4f 91       	pop	r20
    2fb8:	3f 91       	pop	r19
    2fba:	2f 91       	pop	r18
    2fbc:	0f 90       	pop	r0
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	0f 90       	pop	r0
    2fc2:	1f 90       	pop	r1
    2fc4:	18 95       	reti

00002fc6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2fc6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2fd0:	82 1b       	sub	r24, r18
    2fd2:	91 09       	sbc	r25, r1
    2fd4:	08 95       	ret

00002fd6 <_ZN7TwoWire4readEv>:
    2fd6:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2fda:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2fde:	98 17       	cp	r25, r24
    2fe0:	50 f4       	brcc	.+20     	; 0x2ff6 <_ZN7TwoWire4readEv+0x20>
    2fe2:	e9 2f       	mov	r30, r25
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	e4 58       	subi	r30, 0x84	; 132
    2fe8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fea:	20 81       	ld	r18, Z
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	9f 5f       	subi	r25, 0xFF	; 255
    2ff0:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <_ZN7TwoWire4readEv+0x24>
    2ff6:	2f ef       	ldi	r18, 0xFF	; 255
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	c9 01       	movw	r24, r18
    2ffc:	08 95       	ret

00002ffe <_ZN7TwoWire4peekEv>:
    2ffe:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    3002:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    3006:	e8 17       	cp	r30, r24
    3008:	30 f4       	brcc	.+12     	; 0x3016 <_ZN7TwoWire4peekEv+0x18>
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	e4 58       	subi	r30, 0x84	; 132
    300e:	fc 4f       	sbci	r31, 0xFC	; 252
    3010:	80 81       	ld	r24, Z
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	08 95       	ret
    3016:	8f ef       	ldi	r24, 0xFF	; 255
    3018:	9f ef       	ldi	r25, 0xFF	; 255
    301a:	08 95       	ret

0000301c <_ZN7TwoWire5flushEv>:
    301c:	08 95       	ret

0000301e <_ZN7TwoWire16onReceiveServiceEPhi>:
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	ec 01       	movw	r28, r24
    3024:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <_ZN7TwoWire14user_onReceiveE>
    3028:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <_ZN7TwoWire14user_onReceiveE+0x1>
    302c:	30 97       	sbiw	r30, 0x00	; 0
    302e:	f1 f0       	breq	.+60     	; 0x306c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3030:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    3034:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    3038:	98 17       	cp	r25, r24
    303a:	c0 f0       	brcs	.+48     	; 0x306c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	29 2f       	mov	r18, r25
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	26 17       	cp	r18, r22
    3044:	37 07       	cpc	r19, r23
    3046:	54 f4       	brge	.+20     	; 0x305c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3048:	de 01       	movw	r26, r28
    304a:	a2 0f       	add	r26, r18
    304c:	b3 1f       	adc	r27, r19
    304e:	4c 91       	ld	r20, X
    3050:	d9 01       	movw	r26, r18
    3052:	a4 58       	subi	r26, 0x84	; 132
    3054:	bc 4f       	sbci	r27, 0xFC	; 252
    3056:	4c 93       	st	X, r20
    3058:	9f 5f       	subi	r25, 0xFF	; 255
    305a:	f1 cf       	rjmp	.-30     	; 0x303e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    305c:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    3060:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    3064:	cb 01       	movw	r24, r22
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	09 94       	ijmp
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	08 95       	ret

00003072 <_ZN7TwoWire16onRequestServiceEv>:
    3072:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZN7TwoWire14user_onRequestE>
    3076:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZN7TwoWire14user_onRequestE+0x1>
    307a:	30 97       	sbiw	r30, 0x00	; 0
    307c:	29 f0       	breq	.+10     	; 0x3088 <_ZN7TwoWire16onRequestServiceEv+0x16>
    307e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    3082:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    3086:	09 94       	ijmp
    3088:	08 95       	ret

0000308a <_ZN7TwoWire5writeEPKhj>:
    308a:	cf 92       	push	r12
    308c:	df 92       	push	r13
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	7c 01       	movw	r14, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8a 01       	movw	r16, r20
    30a0:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    30a4:	22 23       	and	r18, r18
    30a6:	89 f0       	breq	.+34     	; 0x30ca <_ZN7TwoWire5writeEPKhj+0x40>
    30a8:	eb 01       	movw	r28, r22
    30aa:	6b 01       	movw	r12, r22
    30ac:	c4 0e       	add	r12, r20
    30ae:	d5 1e       	adc	r13, r21
    30b0:	cc 15       	cp	r28, r12
    30b2:	dd 05       	cpc	r29, r13
    30b4:	69 f0       	breq	.+26     	; 0x30d0 <_ZN7TwoWire5writeEPKhj+0x46>
    30b6:	69 91       	ld	r22, Y+
    30b8:	d7 01       	movw	r26, r14
    30ba:	ed 91       	ld	r30, X+
    30bc:	fc 91       	ld	r31, X
    30be:	01 90       	ld	r0, Z+
    30c0:	f0 81       	ld	r31, Z
    30c2:	e0 2d       	mov	r30, r0
    30c4:	c7 01       	movw	r24, r14
    30c6:	09 95       	icall
    30c8:	f3 cf       	rjmp	.-26     	; 0x30b0 <_ZN7TwoWire5writeEPKhj+0x26>
    30ca:	64 2f       	mov	r22, r20
    30cc:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <twi_transmit>
    30d0:	c8 01       	movw	r24, r16
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	ff 90       	pop	r15
    30dc:	ef 90       	pop	r14
    30de:	df 90       	pop	r13
    30e0:	cf 90       	pop	r12
    30e2:	08 95       	ret

000030e4 <_ZN7TwoWire5writeEh>:
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	1f 92       	push	r1
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	69 83       	std	Y+1, r22	; 0x01
    30f0:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    30f4:	22 23       	and	r18, r18
    30f6:	d1 f0       	breq	.+52     	; 0x312c <_ZN7TwoWire5writeEh+0x48>
    30f8:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    30fc:	20 32       	cpi	r18, 0x20	; 32
    30fe:	40 f0       	brcs	.+16     	; 0x3110 <_ZN7TwoWire5writeEh+0x2c>
    3100:	21 e0       	ldi	r18, 0x01	; 1
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	fc 01       	movw	r30, r24
    3106:	33 83       	std	Z+3, r19	; 0x03
    3108:	22 83       	std	Z+2, r18	; 0x02
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	15 c0       	rjmp	.+42     	; 0x313a <_ZN7TwoWire5writeEh+0x56>
    3110:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    3114:	e8 2f       	mov	r30, r24
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	e7 5a       	subi	r30, 0xA7	; 167
    311a:	fc 4f       	sbci	r31, 0xFC	; 252
    311c:	99 81       	ldd	r25, Y+1	; 0x01
    311e:	90 83       	st	Z, r25
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    3126:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    312a:	05 c0       	rjmp	.+10     	; 0x3136 <_ZN7TwoWire5writeEh+0x52>
    312c:	61 e0       	ldi	r22, 0x01	; 1
    312e:	ce 01       	movw	r24, r28
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <twi_transmit>
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0f 90       	pop	r0
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <_ZN7TwoWireC1Ev>:
    3142:	fc 01       	movw	r30, r24
    3144:	13 82       	std	Z+3, r1	; 0x03
    3146:	12 82       	std	Z+2, r1	; 0x02
    3148:	88 ee       	ldi	r24, 0xE8	; 232
    314a:	93 e0       	ldi	r25, 0x03	; 3
    314c:	a0 e0       	ldi	r26, 0x00	; 0
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	84 83       	std	Z+4, r24	; 0x04
    3152:	95 83       	std	Z+5, r25	; 0x05
    3154:	a6 83       	std	Z+6, r26	; 0x06
    3156:	b7 83       	std	Z+7, r27	; 0x07
    3158:	8e e5       	ldi	r24, 0x5E	; 94
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    3160:	08 95       	ret

00003162 <_ZN7TwoWire5beginEv>:
    3162:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    3166:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    316a:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    316e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    3172:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <twi_init>
    3176:	89 e3       	ldi	r24, 0x39	; 57
    3178:	98 e1       	ldi	r25, 0x18	; 24
    317a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <twi_attachSlaveTxEvent>
    317e:	8f e0       	ldi	r24, 0x0F	; 15
    3180:	98 e1       	ldi	r25, 0x18	; 24
    3182:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <twi_attachSlaveRxEvent>

00003186 <_ZN7TwoWire17beginTransmissionEh>:
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZN7TwoWire12transmittingE>
    318c:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <_ZN7TwoWire9txAddressE>
    3190:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    3194:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    3198:	08 95       	ret

0000319a <_ZN7TwoWire17beginTransmissionEi>:
    319a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <_ZN7TwoWire17beginTransmissionEh>

0000319e <_ZN7TwoWire15endTransmissionEh>:
    319e:	0f 93       	push	r16
    31a0:	06 2f       	mov	r16, r22
    31a2:	21 e0       	ldi	r18, 0x01	; 1
    31a4:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    31a8:	69 e5       	ldi	r22, 0x59	; 89
    31aa:	73 e0       	ldi	r23, 0x03	; 3
    31ac:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <_ZN7TwoWire9txAddressE>
    31b0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <twi_writeTo>
    31b4:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    31b8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    31bc:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN7TwoWire12transmittingE>
    31c0:	0f 91       	pop	r16
    31c2:	08 95       	ret

000031c4 <_ZN7TwoWire11requestFromEhhmhh>:
    31c4:	4f 92       	push	r4
    31c6:	5f 92       	push	r5
    31c8:	6f 92       	push	r6
    31ca:	7f 92       	push	r7
    31cc:	af 92       	push	r10
    31ce:	bf 92       	push	r11
    31d0:	cf 92       	push	r12
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	5c 01       	movw	r10, r24
    31e0:	f6 2e       	mov	r15, r22
    31e2:	d4 2f       	mov	r29, r20
    31e4:	28 01       	movw	r4, r16
    31e6:	39 01       	movw	r6, r18
    31e8:	ee 20       	and	r14, r14
    31ea:	21 f1       	breq	.+72     	; 0x3234 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    31ec:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire17beginTransmissionEh>
    31f0:	ce 2d       	mov	r28, r14
    31f2:	c4 30       	cpi	r28, 0x04	; 4
    31f4:	08 f0       	brcs	.+2      	; 0x31f8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    31f6:	c3 e0       	ldi	r28, 0x03	; 3
    31f8:	c1 50       	subi	r28, 0x01	; 1
    31fa:	c0 f0       	brcs	.+48     	; 0x322c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    31fc:	28 e0       	ldi	r18, 0x08	; 8
    31fe:	c2 9f       	mul	r28, r18
    3200:	c0 01       	movw	r24, r0
    3202:	11 24       	eor	r1, r1
    3204:	a3 01       	movw	r20, r6
    3206:	92 01       	movw	r18, r4
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    320a:	56 95       	lsr	r21
    320c:	47 95       	ror	r20
    320e:	37 95       	ror	r19
    3210:	27 95       	ror	r18
    3212:	8a 95       	dec	r24
    3214:	d2 f7       	brpl	.-12     	; 0x320a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3216:	ca 01       	movw	r24, r20
    3218:	b9 01       	movw	r22, r18
    321a:	d5 01       	movw	r26, r10
    321c:	ed 91       	ld	r30, X+
    321e:	fc 91       	ld	r31, X
    3220:	01 90       	ld	r0, Z+
    3222:	f0 81       	ld	r31, Z
    3224:	e0 2d       	mov	r30, r0
    3226:	c5 01       	movw	r24, r10
    3228:	09 95       	icall
    322a:	e6 cf       	rjmp	.-52     	; 0x31f8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	c5 01       	movw	r24, r10
    3230:	0e 94 cf 18 	call	0x319e	; 0x319e <_ZN7TwoWire15endTransmissionEh>
    3234:	4d 2f       	mov	r20, r29
    3236:	d1 32       	cpi	r29, 0x21	; 33
    3238:	08 f0       	brcs	.+2      	; 0x323c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	2c 2d       	mov	r18, r12
    323e:	6c e7       	ldi	r22, 0x7C	; 124
    3240:	73 e0       	ldi	r23, 0x03	; 3
    3242:	8f 2d       	mov	r24, r15
    3244:	0e 94 d6 15 	call	0x2bac	; 0x2bac <twi_readFrom>
    3248:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    324c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	ff 90       	pop	r15
    325a:	ef 90       	pop	r14
    325c:	cf 90       	pop	r12
    325e:	bf 90       	pop	r11
    3260:	af 90       	pop	r10
    3262:	7f 90       	pop	r7
    3264:	6f 90       	pop	r6
    3266:	5f 90       	pop	r5
    3268:	4f 90       	pop	r4
    326a:	08 95       	ret

0000326c <_ZN7TwoWire11requestFromEhhh>:
    326c:	cf 92       	push	r12
    326e:	ef 92       	push	r14
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	c2 2e       	mov	r12, r18
    3276:	e1 2c       	mov	r14, r1
    3278:	00 e0       	ldi	r16, 0x00	; 0
    327a:	10 e0       	ldi	r17, 0x00	; 0
    327c:	98 01       	movw	r18, r16
    327e:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <_ZN7TwoWire11requestFromEhhmhh>
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	ef 90       	pop	r14
    3288:	cf 90       	pop	r12
    328a:	08 95       	ret

0000328c <_ZN7TwoWire11requestFromEii>:
    328c:	21 e0       	ldi	r18, 0x01	; 1
    328e:	0c 94 36 19 	jmp	0x326c	; 0x326c <_ZN7TwoWire11requestFromEhhh>

00003292 <_ZN7TwoWire15endTransmissionEv>:
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	0c 94 cf 18 	jmp	0x319e	; 0x319e <_ZN7TwoWire15endTransmissionEh>

00003298 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3298:	86 e4       	ldi	r24, 0x46	; 70
    329a:	93 e0       	ldi	r25, 0x03	; 3
    329c:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <_ZN7TwoWireC1Ev>

000032a0 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    32a0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    32a4:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    32a8:	0e 94 48 23 	call	0x4690	; 0x4690 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    32ac:	67 e6       	ldi	r22, 0x67	; 103
    32ae:	77 e0       	ldi	r23, 0x07	; 7
    32b0:	8e e9       	ldi	r24, 0x9E	; 158
    32b2:	93 e0       	ldi	r25, 0x03	; 3
    32b4:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>

000032b8 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    32be:	62 e6       	ldi	r22, 0x62	; 98
    32c0:	77 e0       	ldi	r23, 0x07	; 7
    32c2:	8e e9       	ldi	r24, 0x9E	; 158
    32c4:	93 e0       	ldi	r25, 0x03	; 3
    32c6:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    32ca:	84 e1       	ldi	r24, 0x14	; 20
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 b0 22 	call	0x4560	; 0x4560 <malloc>
    32d2:	fc 01       	movw	r30, r24
    32d4:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <_mockData+0x1>
    32d8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	92 83       	std	Z+2, r25	; 0x02
    32e2:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    32e4:	8a e0       	ldi	r24, 0x0A	; 10
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	96 83       	std	Z+6, r25	; 0x06
    32ea:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    32ec:	84 e6       	ldi	r24, 0x64	; 100
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	94 83       	std	Z+4, r25	; 0x04
    32f2:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    32f4:	83 e3       	ldi	r24, 0x33	; 51
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	90 87       	std	Z+8, r25	; 0x08
    32fa:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    32fc:	83 e0       	ldi	r24, 0x03	; 3
    32fe:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	94 87       	std	Z+12, r25	; 0x0c
    3306:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    3308:	84 e1       	ldi	r24, 0x14	; 20
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	90 8b       	std	Z+16, r25	; 0x10
    330e:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    3310:	88 ec       	ldi	r24, 0xC8	; 200
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	96 87       	std	Z+14, r25	; 0x0e
    3316:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    3318:	84 e3       	ldi	r24, 0x34	; 52
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	92 8b       	std	Z+18, r25	; 0x12
    331e:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    3320:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    3322:	6b e3       	ldi	r22, 0x3B	; 59
    3324:	77 e0       	ldi	r23, 0x07	; 7
    3326:	8e e9       	ldi	r24, 0x9E	; 158
    3328:	93 e0       	ldi	r25, 0x03	; 3
    332a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    332e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    3332:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3336:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    333a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    333e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3342:	0a 96       	adiw	r24, 0x0a	; 10
    3344:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    3348:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    334c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3350:	99 83       	std	Y+1, r25	; 0x01
    3352:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	08 95       	ret

0000335e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    335e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3360:	91 8d       	ldd	r25, Z+25	; 0x19
    3362:	22 8d       	ldd	r18, Z+26	; 0x1a
    3364:	89 2f       	mov	r24, r25
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	80 5c       	subi	r24, 0xC0	; 192
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	82 1b       	sub	r24, r18
    336e:	91 09       	sbc	r25, r1
}
    3370:	8f 73       	andi	r24, 0x3F	; 63
    3372:	99 27       	eor	r25, r25
    3374:	08 95       	ret

00003376 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3376:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3378:	91 8d       	ldd	r25, Z+25	; 0x19
    337a:	82 8d       	ldd	r24, Z+26	; 0x1a
    337c:	98 17       	cp	r25, r24
    337e:	31 f0       	breq	.+12     	; 0x338c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3380:	82 8d       	ldd	r24, Z+26	; 0x1a
    3382:	e8 0f       	add	r30, r24
    3384:	f1 1d       	adc	r31, r1
    3386:	85 8d       	ldd	r24, Z+29	; 0x1d
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    338c:	8f ef       	ldi	r24, 0xFF	; 255
    338e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3390:	08 95       	ret

00003392 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3392:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3394:	91 8d       	ldd	r25, Z+25	; 0x19
    3396:	82 8d       	ldd	r24, Z+26	; 0x1a
    3398:	98 17       	cp	r25, r24
    339a:	61 f0       	breq	.+24     	; 0x33b4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    339c:	82 8d       	ldd	r24, Z+26	; 0x1a
    339e:	df 01       	movw	r26, r30
    33a0:	a8 0f       	add	r26, r24
    33a2:	b1 1d       	adc	r27, r1
    33a4:	5d 96       	adiw	r26, 0x1d	; 29
    33a6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    33a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    33aa:	9f 5f       	subi	r25, 0xFF	; 255
    33ac:	9f 73       	andi	r25, 0x3F	; 63
    33ae:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    33b4:	8f ef       	ldi	r24, 0xFF	; 255
    33b6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    33b8:	08 95       	ret

000033ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    33ba:	82 e3       	ldi	r24, 0x32	; 50
    33bc:	9b e1       	ldi	r25, 0x1B	; 27
    33be:	89 2b       	or	r24, r25
    33c0:	49 f0       	breq	.+18     	; 0x33d4 <_Z14serialEventRunv+0x1a>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	89 2b       	or	r24, r25
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <_Z14serialEventRunv+0x1a>
    33ca:	0e 94 32 1b 	call	0x3664	; 0x3664 <_Z17Serial0_availablev>
    33ce:	81 11       	cpse	r24, r1
    33d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    33d4:	08 95       	ret

000033d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    33d6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    33d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    33da:	df 01       	movw	r26, r30
    33dc:	a8 0f       	add	r26, r24
    33de:	b1 1d       	adc	r27, r1
    33e0:	a3 5a       	subi	r26, 0xA3	; 163
    33e2:	bf 4f       	sbci	r27, 0xFF	; 255
    33e4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    33e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	8f 73       	andi	r24, 0x3F	; 63
    33ee:	99 27       	eor	r25, r25
    33f0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    33f2:	a6 89       	ldd	r26, Z+22	; 0x16
    33f4:	b7 89       	ldd	r27, Z+23	; 0x17
    33f6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    33f8:	a0 89       	ldd	r26, Z+16	; 0x10
    33fa:	b1 89       	ldd	r27, Z+17	; 0x11
    33fc:	8c 91       	ld	r24, X
    33fe:	80 64       	ori	r24, 0x40	; 64
    3400:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3402:	93 8d       	ldd	r25, Z+27	; 0x1b
    3404:	84 8d       	ldd	r24, Z+28	; 0x1c
    3406:	98 13       	cpse	r25, r24
    3408:	06 c0       	rjmp	.+12     	; 0x3416 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    340a:	02 88       	ldd	r0, Z+18	; 0x12
    340c:	f3 89       	ldd	r31, Z+19	; 0x13
    340e:	e0 2d       	mov	r30, r0
    3410:	80 81       	ld	r24, Z
    3412:	8f 7d       	andi	r24, 0xDF	; 223
    3414:	80 83       	st	Z, r24
    3416:	08 95       	ret

00003418 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	ec 01       	movw	r28, r24
  _written = true;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    342a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    342c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    342e:	98 13       	cpse	r25, r24
    3430:	05 c0       	rjmp	.+10     	; 0x343c <_ZN14HardwareSerial5writeEh+0x24>
    3432:	e8 89       	ldd	r30, Y+16	; 0x10
    3434:	f9 89       	ldd	r31, Y+17	; 0x11
    3436:	80 81       	ld	r24, Z
    3438:	85 fd       	sbrc	r24, 5
    343a:	24 c0       	rjmp	.+72     	; 0x3484 <_ZN14HardwareSerial5writeEh+0x6c>
    343c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    343e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3440:	10 e0       	ldi	r17, 0x00	; 0
    3442:	0f 5f       	subi	r16, 0xFF	; 255
    3444:	1f 4f       	sbci	r17, 0xFF	; 255
    3446:	0f 73       	andi	r16, 0x3F	; 63
    3448:	11 27       	eor	r17, r17
    344a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    344c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    344e:	e8 12       	cpse	r14, r24
    3450:	0c c0       	rjmp	.+24     	; 0x346a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	07 fc       	sbrc	r0, 7
    3456:	fa cf       	rjmp	.-12     	; 0x344c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3458:	e8 89       	ldd	r30, Y+16	; 0x10
    345a:	f9 89       	ldd	r31, Y+17	; 0x11
    345c:	80 81       	ld	r24, Z
    345e:	85 ff       	sbrs	r24, 5
    3460:	f5 cf       	rjmp	.-22     	; 0x344c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3462:	ce 01       	movw	r24, r28
    3464:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3468:	f1 cf       	rjmp	.-30     	; 0x344c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    346a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    346c:	fe 01       	movw	r30, r28
    346e:	e8 0f       	add	r30, r24
    3470:	f1 1d       	adc	r31, r1
    3472:	e3 5a       	subi	r30, 0xA3	; 163
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3478:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    347a:	ea 89       	ldd	r30, Y+18	; 0x12
    347c:	fb 89       	ldd	r31, Y+19	; 0x13
    347e:	80 81       	ld	r24, Z
    3480:	80 62       	ori	r24, 0x20	; 32
    3482:	07 c0       	rjmp	.+14     	; 0x3492 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3484:	ee 89       	ldd	r30, Y+22	; 0x16
    3486:	ff 89       	ldd	r31, Y+23	; 0x17
    3488:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    348a:	e8 89       	ldd	r30, Y+16	; 0x10
    348c:	f9 89       	ldd	r31, Y+17	; 0x11
    348e:	80 81       	ld	r24, Z
    3490:	80 64       	ori	r24, 0x40	; 64
    3492:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	08 95       	ret

000034a6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    34a6:	cf 93       	push	r28
    34a8:	df 93       	push	r29
    34aa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    34ac:	88 8d       	ldd	r24, Y+24	; 0x18
    34ae:	88 23       	and	r24, r24
    34b0:	c9 f0       	breq	.+50     	; 0x34e4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    34b2:	ea 89       	ldd	r30, Y+18	; 0x12
    34b4:	fb 89       	ldd	r31, Y+19	; 0x13
    34b6:	80 81       	ld	r24, Z
    34b8:	85 fd       	sbrc	r24, 5
    34ba:	05 c0       	rjmp	.+10     	; 0x34c6 <_ZN14HardwareSerial5flushEv+0x20>
    34bc:	a8 89       	ldd	r26, Y+16	; 0x10
    34be:	b9 89       	ldd	r27, Y+17	; 0x11
    34c0:	8c 91       	ld	r24, X
    34c2:	86 fd       	sbrc	r24, 6
    34c4:	0f c0       	rjmp	.+30     	; 0x34e4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	07 fc       	sbrc	r0, 7
    34ca:	f5 cf       	rjmp	.-22     	; 0x34b6 <_ZN14HardwareSerial5flushEv+0x10>
    34cc:	80 81       	ld	r24, Z
    34ce:	85 ff       	sbrs	r24, 5
    34d0:	f2 cf       	rjmp	.-28     	; 0x34b6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    34d2:	a8 89       	ldd	r26, Y+16	; 0x10
    34d4:	b9 89       	ldd	r27, Y+17	; 0x11
    34d6:	8c 91       	ld	r24, X
    34d8:	85 ff       	sbrs	r24, 5
    34da:	ed cf       	rjmp	.-38     	; 0x34b6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    34dc:	ce 01       	movw	r24, r28
    34de:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    34e2:	e7 cf       	rjmp	.-50     	; 0x34b2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    34ea:	cf 92       	push	r12
    34ec:	df 92       	push	r13
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	ec 01       	movw	r28, r24
    34fa:	6a 01       	movw	r12, r20
    34fc:	7b 01       	movw	r14, r22
    34fe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3500:	e8 89       	ldd	r30, Y+16	; 0x10
    3502:	f9 89       	ldd	r31, Y+17	; 0x11
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3508:	41 15       	cp	r20, r1
    350a:	51 4e       	sbci	r21, 0xE1	; 225
    350c:	61 05       	cpc	r22, r1
    350e:	71 05       	cpc	r23, r1
    3510:	b1 f0       	breq	.+44     	; 0x353e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	79 e0       	ldi	r23, 0x09	; 9
    3516:	8d e3       	ldi	r24, 0x3D	; 61
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a7 01       	movw	r20, r14
    351c:	96 01       	movw	r18, r12
    351e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__udivmodsi4>
    3522:	da 01       	movw	r26, r20
    3524:	c9 01       	movw	r24, r18
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	a1 09       	sbc	r26, r1
    352a:	b1 09       	sbc	r27, r1
    352c:	b6 95       	lsr	r27
    352e:	a7 95       	ror	r26
    3530:	97 95       	ror	r25
    3532:	87 95       	ror	r24
    3534:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3536:	21 15       	cp	r18, r1
    3538:	80 e1       	ldi	r24, 0x10	; 16
    353a:	38 07       	cpc	r19, r24
    353c:	a8 f0       	brcs	.+42     	; 0x3568 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    353e:	e8 89       	ldd	r30, Y+16	; 0x10
    3540:	f9 89       	ldd	r31, Y+17	; 0x11
    3542:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3544:	60 e8       	ldi	r22, 0x80	; 128
    3546:	74 e8       	ldi	r23, 0x84	; 132
    3548:	8e e1       	ldi	r24, 0x1E	; 30
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	a7 01       	movw	r20, r14
    354e:	96 01       	movw	r18, r12
    3550:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__udivmodsi4>
    3554:	da 01       	movw	r26, r20
    3556:	c9 01       	movw	r24, r18
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	a1 09       	sbc	r26, r1
    355c:	b1 09       	sbc	r27, r1
    355e:	b6 95       	lsr	r27
    3560:	a7 95       	ror	r26
    3562:	97 95       	ror	r25
    3564:	87 95       	ror	r24
    3566:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3568:	ec 85       	ldd	r30, Y+12	; 0x0c
    356a:	fd 85       	ldd	r31, Y+13	; 0x0d
    356c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    356e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3570:	ff 85       	ldd	r31, Y+15	; 0x0f
    3572:	20 83       	st	Z, r18

  _written = false;
    3574:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3576:	ec 89       	ldd	r30, Y+20	; 0x14
    3578:	fd 89       	ldd	r31, Y+21	; 0x15
    357a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    357c:	ea 89       	ldd	r30, Y+18	; 0x12
    357e:	fb 89       	ldd	r31, Y+19	; 0x13
    3580:	80 81       	ld	r24, Z
    3582:	80 61       	ori	r24, 0x10	; 16
    3584:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3586:	ea 89       	ldd	r30, Y+18	; 0x12
    3588:	fb 89       	ldd	r31, Y+19	; 0x13
    358a:	80 81       	ld	r24, Z
    358c:	88 60       	ori	r24, 0x08	; 8
    358e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3590:	ea 89       	ldd	r30, Y+18	; 0x12
    3592:	fb 89       	ldd	r31, Y+19	; 0x13
    3594:	80 81       	ld	r24, Z
    3596:	80 68       	ori	r24, 0x80	; 128
    3598:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    359a:	ea 89       	ldd	r30, Y+18	; 0x12
    359c:	fb 89       	ldd	r31, Y+19	; 0x13
    359e:	80 81       	ld	r24, Z
    35a0:	8f 7d       	andi	r24, 0xDF	; 223
    35a2:	80 83       	st	Z, r24
}
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	df 90       	pop	r13
    35b0:	cf 90       	pop	r12
    35b2:	08 95       	ret

000035b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    35b4:	1f 92       	push	r1
    35b6:	0f 92       	push	r0
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	0f 92       	push	r0
    35bc:	11 24       	eor	r1, r1
    35be:	2f 93       	push	r18
    35c0:	8f 93       	push	r24
    35c2:	9f 93       	push	r25
    35c4:	ef 93       	push	r30
    35c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    35c8:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <Serial+0x10>
    35cc:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <Serial+0x11>
    35d0:	80 81       	ld	r24, Z
    35d2:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <Serial+0x16>
    35d6:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <Serial+0x17>
    35da:	82 fd       	sbrc	r24, 2
    35dc:	12 c0       	rjmp	.+36     	; 0x3602 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    35de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    35e0:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <Serial+0x19>
    35e4:	8f 5f       	subi	r24, 0xFF	; 255
    35e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    35e8:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <Serial+0x1a>
    35ec:	82 17       	cp	r24, r18
    35ee:	51 f0       	breq	.+20     	; 0x3604 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    35f0:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <Serial+0x19>
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	e2 56       	subi	r30, 0x62	; 98
    35f8:	fc 4f       	sbci	r31, 0xFC	; 252
    35fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    35fc:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <Serial+0x19>
    3600:	01 c0       	rjmp	.+2      	; 0x3604 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3602:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3604:	ff 91       	pop	r31
    3606:	ef 91       	pop	r30
    3608:	9f 91       	pop	r25
    360a:	8f 91       	pop	r24
    360c:	2f 91       	pop	r18
    360e:	0f 90       	pop	r0
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	0f 90       	pop	r0
    3614:	1f 90       	pop	r1
    3616:	18 95       	reti

00003618 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3618:	1f 92       	push	r1
    361a:	0f 92       	push	r0
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	0f 92       	push	r0
    3620:	11 24       	eor	r1, r1
    3622:	2f 93       	push	r18
    3624:	3f 93       	push	r19
    3626:	4f 93       	push	r20
    3628:	5f 93       	push	r21
    362a:	6f 93       	push	r22
    362c:	7f 93       	push	r23
    362e:	8f 93       	push	r24
    3630:	9f 93       	push	r25
    3632:	af 93       	push	r26
    3634:	bf 93       	push	r27
    3636:	ef 93       	push	r30
    3638:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    363a:	8e e9       	ldi	r24, 0x9E	; 158
    363c:	93 e0       	ldi	r25, 0x03	; 3
    363e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	bf 91       	pop	r27
    3648:	af 91       	pop	r26
    364a:	9f 91       	pop	r25
    364c:	8f 91       	pop	r24
    364e:	7f 91       	pop	r23
    3650:	6f 91       	pop	r22
    3652:	5f 91       	pop	r21
    3654:	4f 91       	pop	r20
    3656:	3f 91       	pop	r19
    3658:	2f 91       	pop	r18
    365a:	0f 90       	pop	r0
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	0f 90       	pop	r0
    3660:	1f 90       	pop	r1
    3662:	18 95       	reti

00003664 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3664:	8e e9       	ldi	r24, 0x9E	; 158
    3666:	93 e0       	ldi	r25, 0x03	; 3
    3668:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN14HardwareSerial9availableEv>
    366c:	21 e0       	ldi	r18, 0x01	; 1
    366e:	89 2b       	or	r24, r25
    3670:	09 f4       	brne	.+2      	; 0x3674 <_Z17Serial0_availablev+0x10>
    3672:	20 e0       	ldi	r18, 0x00	; 0
}
    3674:	82 2f       	mov	r24, r18
    3676:	08 95       	ret

00003678 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3678:	ee e9       	ldi	r30, 0x9E	; 158
    367a:	f3 e0       	ldi	r31, 0x03	; 3
    367c:	13 82       	std	Z+3, r1	; 0x03
    367e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3680:	88 ee       	ldi	r24, 0xE8	; 232
    3682:	93 e0       	ldi	r25, 0x03	; 3
    3684:	a0 e0       	ldi	r26, 0x00	; 0
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	84 83       	std	Z+4, r24	; 0x04
    368a:	95 83       	std	Z+5, r25	; 0x05
    368c:	a6 83       	std	Z+6, r26	; 0x06
    368e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3690:	8e e6       	ldi	r24, 0x6E	; 110
    3692:	91 e0       	ldi	r25, 0x01	; 1
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	85 ec       	ldi	r24, 0xC5	; 197
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	95 87       	std	Z+13, r25	; 0x0d
    369e:	84 87       	std	Z+12, r24	; 0x0c
    36a0:	84 ec       	ldi	r24, 0xC4	; 196
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	97 87       	std	Z+15, r25	; 0x0f
    36a6:	86 87       	std	Z+14, r24	; 0x0e
    36a8:	80 ec       	ldi	r24, 0xC0	; 192
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	91 8b       	std	Z+17, r25	; 0x11
    36ae:	80 8b       	std	Z+16, r24	; 0x10
    36b0:	81 ec       	ldi	r24, 0xC1	; 193
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	93 8b       	std	Z+19, r25	; 0x13
    36b6:	82 8b       	std	Z+18, r24	; 0x12
    36b8:	82 ec       	ldi	r24, 0xC2	; 194
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	95 8b       	std	Z+21, r25	; 0x15
    36be:	84 8b       	std	Z+20, r24	; 0x14
    36c0:	86 ec       	ldi	r24, 0xC6	; 198
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	97 8b       	std	Z+23, r25	; 0x17
    36c6:	86 8b       	std	Z+22, r24	; 0x16
    36c8:	11 8e       	std	Z+25, r1	; 0x19
    36ca:	12 8e       	std	Z+26, r1	; 0x1a
    36cc:	13 8e       	std	Z+27, r1	; 0x1b
    36ce:	14 8e       	std	Z+28, r1	; 0x1c
    36d0:	08 95       	ret

000036d2 <initVariant>:
    36d2:	08 95       	ret

000036d4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    36d4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <init>

	initVariant();
    36d8:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    36dc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    36e0:	cd ed       	ldi	r28, 0xDD	; 221
    36e2:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    36e4:	0e 94 26 14 	call	0x284c	; 0x284c <loop>
		if (serialEventRun) serialEventRun();
    36e8:	20 97       	sbiw	r28, 0x00	; 0
    36ea:	e1 f3       	breq	.-8      	; 0x36e4 <main+0x10>
    36ec:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_Z14serialEventRunv>
    36f0:	f9 cf       	rjmp	.-14     	; 0x36e4 <main+0x10>

000036f2 <_Znwj>:
    36f2:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <malloc>

000036f6 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    36f6:	cf 92       	push	r12
    36f8:	df 92       	push	r13
    36fa:	ef 92       	push	r14
    36fc:	ff 92       	push	r15
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	6c 01       	movw	r12, r24
    3708:	7a 01       	movw	r14, r20
    370a:	8b 01       	movw	r16, r22
    370c:	c0 e0       	ldi	r28, 0x00	; 0
    370e:	d0 e0       	ldi	r29, 0x00	; 0
    3710:	ce 15       	cp	r28, r14
    3712:	df 05       	cpc	r29, r15
    3714:	81 f0       	breq	.+32     	; 0x3736 <_ZN5Print5writeEPKhj+0x40>
    3716:	d8 01       	movw	r26, r16
    3718:	6d 91       	ld	r22, X+
    371a:	8d 01       	movw	r16, r26
    371c:	d6 01       	movw	r26, r12
    371e:	ed 91       	ld	r30, X+
    3720:	fc 91       	ld	r31, X
    3722:	01 90       	ld	r0, Z+
    3724:	f0 81       	ld	r31, Z
    3726:	e0 2d       	mov	r30, r0
    3728:	c6 01       	movw	r24, r12
    372a:	09 95       	icall
    372c:	89 2b       	or	r24, r25
    372e:	11 f0       	breq	.+4      	; 0x3734 <_ZN5Print5writeEPKhj+0x3e>
    3730:	21 96       	adiw	r28, 0x01	; 1
    3732:	ee cf       	rjmp	.-36     	; 0x3710 <_ZN5Print5writeEPKhj+0x1a>
    3734:	7e 01       	movw	r14, r28
    3736:	c7 01       	movw	r24, r14
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	ff 90       	pop	r15
    3742:	ef 90       	pop	r14
    3744:	df 90       	pop	r13
    3746:	cf 90       	pop	r12
    3748:	08 95       	ret

0000374a <_ZN5Print5writeEPKc>:
    374a:	61 15       	cp	r22, r1
    374c:	71 05       	cpc	r23, r1
    374e:	79 f0       	breq	.+30     	; 0x376e <_ZN5Print5writeEPKc+0x24>
    3750:	fb 01       	movw	r30, r22
    3752:	01 90       	ld	r0, Z+
    3754:	00 20       	and	r0, r0
    3756:	e9 f7       	brne	.-6      	; 0x3752 <_ZN5Print5writeEPKc+0x8>
    3758:	31 97       	sbiw	r30, 0x01	; 1
    375a:	af 01       	movw	r20, r30
    375c:	46 1b       	sub	r20, r22
    375e:	57 0b       	sbc	r21, r23
    3760:	dc 01       	movw	r26, r24
    3762:	ed 91       	ld	r30, X+
    3764:	fc 91       	ld	r31, X
    3766:	02 80       	ldd	r0, Z+2	; 0x02
    3768:	f3 81       	ldd	r31, Z+3	; 0x03
    376a:	e0 2d       	mov	r30, r0
    376c:	09 94       	ijmp
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	08 95       	ret

00003774 <_ZN5Print5printEPK19__FlashStringHelper>:
    3774:	ef 92       	push	r14
    3776:	ff 92       	push	r15
    3778:	0f 93       	push	r16
    377a:	1f 93       	push	r17
    377c:	cf 93       	push	r28
    377e:	df 93       	push	r29
    3780:	8c 01       	movw	r16, r24
    3782:	7b 01       	movw	r14, r22
    3784:	c0 e0       	ldi	r28, 0x00	; 0
    3786:	d0 e0       	ldi	r29, 0x00	; 0
    3788:	f7 01       	movw	r30, r14
    378a:	ec 0f       	add	r30, r28
    378c:	fd 1f       	adc	r31, r29
    378e:	64 91       	lpm	r22, Z
    3790:	66 23       	and	r22, r22
    3792:	61 f0       	breq	.+24     	; 0x37ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3794:	d8 01       	movw	r26, r16
    3796:	ed 91       	ld	r30, X+
    3798:	fc 91       	ld	r31, X
    379a:	01 90       	ld	r0, Z+
    379c:	f0 81       	ld	r31, Z
    379e:	e0 2d       	mov	r30, r0
    37a0:	c8 01       	movw	r24, r16
    37a2:	09 95       	icall
    37a4:	89 2b       	or	r24, r25
    37a6:	11 f0       	breq	.+4      	; 0x37ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    37a8:	21 96       	adiw	r28, 0x01	; 1
    37aa:	ee cf       	rjmp	.-36     	; 0x3788 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    37ac:	ce 01       	movw	r24, r28
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	08 95       	ret

000037bc <_ZN5Print5printERK6String>:
    37bc:	db 01       	movw	r26, r22
    37be:	14 96       	adiw	r26, 0x04	; 4
    37c0:	4d 91       	ld	r20, X+
    37c2:	5c 91       	ld	r21, X
    37c4:	15 97       	sbiw	r26, 0x05	; 5
    37c6:	6d 91       	ld	r22, X+
    37c8:	7c 91       	ld	r23, X
    37ca:	dc 01       	movw	r26, r24
    37cc:	ed 91       	ld	r30, X+
    37ce:	fc 91       	ld	r31, X
    37d0:	02 80       	ldd	r0, Z+2	; 0x02
    37d2:	f3 81       	ldd	r31, Z+3	; 0x03
    37d4:	e0 2d       	mov	r30, r0
    37d6:	09 94       	ijmp

000037d8 <_ZN5Print5printEPKc>:
    37d8:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <_ZN5Print5writeEPKc>

000037dc <_ZN5Print5printEc>:
    37dc:	dc 01       	movw	r26, r24
    37de:	ed 91       	ld	r30, X+
    37e0:	fc 91       	ld	r31, X
    37e2:	01 90       	ld	r0, Z+
    37e4:	f0 81       	ld	r31, Z
    37e6:	e0 2d       	mov	r30, r0
    37e8:	09 94       	ijmp

000037ea <_ZN5Print7printlnEv>:
    37ea:	6a e7       	ldi	r22, 0x7A	; 122
    37ec:	71 e0       	ldi	r23, 0x01	; 1
    37ee:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <_ZN5Print5writeEPKc>

000037f2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	ec 01       	movw	r28, r24
    37fc:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEPK19__FlashStringHelper>
    3800:	8c 01       	movw	r16, r24
    3802:	ce 01       	movw	r24, r28
    3804:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
    3808:	80 0f       	add	r24, r16
    380a:	91 1f       	adc	r25, r17
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	08 95       	ret

00003816 <_ZN5Print7printlnEPKc>:
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	ec 01       	movw	r28, r24
    3820:	0e 94 a5 1b 	call	0x374a	; 0x374a <_ZN5Print5writeEPKc>
    3824:	8c 01       	movw	r16, r24
    3826:	ce 01       	movw	r24, r28
    3828:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
    382c:	80 0f       	add	r24, r16
    382e:	91 1f       	adc	r25, r17
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	08 95       	ret

0000383a <_ZN5Print7printlnEc>:
    383a:	0f 93       	push	r16
    383c:	1f 93       	push	r17
    383e:	cf 93       	push	r28
    3840:	df 93       	push	r29
    3842:	ec 01       	movw	r28, r24
    3844:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_ZN5Print5printEc>
    3848:	8c 01       	movw	r16, r24
    384a:	ce 01       	movw	r24, r28
    384c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
    3850:	80 0f       	add	r24, r16
    3852:	91 1f       	adc	r25, r17
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	08 95       	ret

0000385e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    385e:	8f 92       	push	r8
    3860:	9f 92       	push	r9
    3862:	af 92       	push	r10
    3864:	bf 92       	push	r11
    3866:	ef 92       	push	r14
    3868:	ff 92       	push	r15
    386a:	0f 93       	push	r16
    386c:	1f 93       	push	r17
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	a1 97       	sbiw	r28, 0x21	; 33
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	7c 01       	movw	r14, r24
    3884:	fa 01       	movw	r30, r20
    3886:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3888:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    388a:	22 30       	cpi	r18, 0x02	; 2
    388c:	08 f4       	brcc	.+2      	; 0x3890 <_ZN5Print11printNumberEmh+0x32>
    388e:	2a e0       	ldi	r18, 0x0A	; 10
    3890:	8e 01       	movw	r16, r28
    3892:	0f 5d       	subi	r16, 0xDF	; 223
    3894:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    3896:	82 2e       	mov	r8, r18
    3898:	91 2c       	mov	r9, r1
    389a:	a1 2c       	mov	r10, r1
    389c:	b1 2c       	mov	r11, r1
    389e:	bf 01       	movw	r22, r30
    38a0:	a5 01       	movw	r20, r10
    38a2:	94 01       	movw	r18, r8
    38a4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__udivmodsi4>
    n /= base;
    38a8:	f9 01       	movw	r30, r18
    38aa:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    38ac:	01 50       	subi	r16, 0x01	; 1
    38ae:	11 09       	sbc	r17, r1
    38b0:	6a 30       	cpi	r22, 0x0A	; 10
    38b2:	10 f4       	brcc	.+4      	; 0x38b8 <_ZN5Print11printNumberEmh+0x5a>
    38b4:	60 5d       	subi	r22, 0xD0	; 208
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <_ZN5Print11printNumberEmh+0x5c>
    38b8:	69 5c       	subi	r22, 0xC9	; 201
    38ba:	d8 01       	movw	r26, r16
    38bc:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    38be:	23 2b       	or	r18, r19
    38c0:	24 2b       	or	r18, r20
    38c2:	25 2b       	or	r18, r21
    38c4:	61 f7       	brne	.-40     	; 0x389e <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    38c6:	b8 01       	movw	r22, r16
    38c8:	c7 01       	movw	r24, r14
    38ca:	0e 94 a5 1b 	call	0x374a	; 0x374a <_ZN5Print5writeEPKc>
}
    38ce:	a1 96       	adiw	r28, 0x21	; 33
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	1f 91       	pop	r17
    38e0:	0f 91       	pop	r16
    38e2:	ff 90       	pop	r15
    38e4:	ef 90       	pop	r14
    38e6:	bf 90       	pop	r11
    38e8:	af 90       	pop	r10
    38ea:	9f 90       	pop	r9
    38ec:	8f 90       	pop	r8
    38ee:	08 95       	ret

000038f0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    38f0:	21 15       	cp	r18, r1
    38f2:	31 05       	cpc	r19, r1
    38f4:	41 f4       	brne	.+16     	; 0x3906 <_ZN5Print5printEmi+0x16>
    38f6:	dc 01       	movw	r26, r24
    38f8:	ed 91       	ld	r30, X+
    38fa:	fc 91       	ld	r31, X
    38fc:	01 90       	ld	r0, Z+
    38fe:	f0 81       	ld	r31, Z
    3900:	e0 2d       	mov	r30, r0
    3902:	64 2f       	mov	r22, r20
    3904:	09 94       	ijmp
  else return printNumber(n, base);
    3906:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <_ZN5Print11printNumberEmh>

0000390a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    390a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    390c:	46 2f       	mov	r20, r22
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	60 e0       	ldi	r22, 0x00	; 0
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <_ZN5Print5printEmi>

00003918 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3922:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print5printEhi>
    3926:	8c 01       	movw	r16, r24
  n += println();
    3928:	ce 01       	movw	r24, r28
    392a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
  return n;
}
    392e:	80 0f       	add	r24, r16
    3930:	91 1f       	adc	r25, r17
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	08 95       	ret

0000393c <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    393c:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    393e:	ab 01       	movw	r20, r22
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <_ZN5Print5printEmi>

00003948 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3952:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN5Print5printEji>
    3956:	8c 01       	movw	r16, r24
  n += println();
    3958:	ce 01       	movw	r24, r28
    395a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
  return n;
}
    395e:	80 0f       	add	r24, r16
    3960:	91 1f       	adc	r25, r17
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    396c:	0f 93       	push	r16
    396e:	1f 93       	push	r17
    3970:	cf 93       	push	r28
    3972:	df 93       	push	r29
    3974:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3976:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_ZN5Print5printEmi>
    397a:	8c 01       	movw	r16, r24
  n += println();
    397c:	ce 01       	movw	r24, r28
    397e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
  return n;
}
    3982:	80 0f       	add	r24, r16
    3984:	91 1f       	adc	r25, r17
    3986:	df 91       	pop	r29
    3988:	cf 91       	pop	r28
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	08 95       	ret

00003990 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3990:	cf 92       	push	r12
    3992:	df 92       	push	r13
    3994:	ef 92       	push	r14
    3996:	ff 92       	push	r15
    3998:	0f 93       	push	r16
    399a:	1f 93       	push	r17
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
  if (base == 0) {
    39a0:	21 15       	cp	r18, r1
    39a2:	31 05       	cpc	r19, r1
    39a4:	81 f4       	brne	.+32     	; 0x39c6 <_ZN5Print5printEli+0x36>
    return write(n);
    39a6:	dc 01       	movw	r26, r24
    39a8:	ed 91       	ld	r30, X+
    39aa:	fc 91       	ld	r31, X
    39ac:	01 90       	ld	r0, Z+
    39ae:	f0 81       	ld	r31, Z
    39b0:	e0 2d       	mov	r30, r0
    39b2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    39b4:	df 91       	pop	r29
    39b6:	cf 91       	pop	r28
    39b8:	1f 91       	pop	r17
    39ba:	0f 91       	pop	r16
    39bc:	ff 90       	pop	r15
    39be:	ef 90       	pop	r14
    39c0:	df 90       	pop	r13
    39c2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    39c4:	09 94       	ijmp
  } else if (base == 10) {
    39c6:	2a 30       	cpi	r18, 0x0A	; 10
    39c8:	31 05       	cpc	r19, r1
    39ca:	01 f5       	brne	.+64     	; 0x3a0c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    39cc:	77 ff       	sbrs	r23, 7
    39ce:	1d c0       	rjmp	.+58     	; 0x3a0a <_ZN5Print5printEli+0x7a>
    39d0:	6a 01       	movw	r12, r20
    39d2:	7b 01       	movw	r14, r22
    39d4:	ec 01       	movw	r28, r24
      int t = print('-');
    39d6:	6d e2       	ldi	r22, 0x2D	; 45
    39d8:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_ZN5Print5printEc>
    39dc:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    39de:	44 27       	eor	r20, r20
    39e0:	55 27       	eor	r21, r21
    39e2:	ba 01       	movw	r22, r20
    39e4:	4c 19       	sub	r20, r12
    39e6:	5d 09       	sbc	r21, r13
    39e8:	6e 09       	sbc	r22, r14
    39ea:	7f 09       	sbc	r23, r15
    39ec:	2a e0       	ldi	r18, 0x0A	; 10
    39ee:	ce 01       	movw	r24, r28
    39f0:	0e 94 2f 1c 	call	0x385e	; 0x385e <_ZN5Print11printNumberEmh>
    39f4:	80 0f       	add	r24, r16
    39f6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	df 90       	pop	r13
    3a06:	cf 90       	pop	r12
    3a08:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3a0a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	df 90       	pop	r13
    3a1a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3a1c:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <_ZN5Print11printNumberEmh>

00003a20 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3a20:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3a22:	ab 01       	movw	r20, r22
    3a24:	77 0f       	add	r23, r23
    3a26:	66 0b       	sbc	r22, r22
    3a28:	77 0b       	sbc	r23, r23
    3a2a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <_ZN5Print5printEli>

00003a2e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3a2e:	0f 93       	push	r16
    3a30:	1f 93       	push	r17
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3a38:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_ZN5Print5printEii>
    3a3c:	8c 01       	movw	r16, r24
  n += println();
    3a3e:	ce 01       	movw	r24, r28
    3a40:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
  return n;
}
    3a44:	80 0f       	add	r24, r16
    3a46:	91 1f       	adc	r25, r17
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	08 95       	ret

00003a52 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3a52:	0f 93       	push	r16
    3a54:	1f 93       	push	r17
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3a5c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN5Print5printEli>
    3a60:	8c 01       	movw	r16, r24
  n += println();
    3a62:	ce 01       	movw	r24, r28
    3a64:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN5Print7printlnEv>
  return n;
}
    3a68:	80 0f       	add	r24, r16
    3a6a:	91 1f       	adc	r25, r17
    3a6c:	df 91       	pop	r29
    3a6e:	cf 91       	pop	r28
    3a70:	1f 91       	pop	r17
    3a72:	0f 91       	pop	r16
    3a74:	08 95       	ret

00003a76 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3a76:	1f 92       	push	r1
    3a78:	0f 92       	push	r0
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	0f 92       	push	r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	2f 93       	push	r18
    3a82:	3f 93       	push	r19
    3a84:	8f 93       	push	r24
    3a86:	9f 93       	push	r25
    3a88:	af 93       	push	r26
    3a8a:	bf 93       	push	r27
    3a8c:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <timer0_millis>
    3a90:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <timer0_millis+0x1>
    3a94:	a0 91 3e 04 	lds	r26, 0x043E	; 0x80043e <timer0_millis+0x2>
    3a98:	b0 91 3f 04 	lds	r27, 0x043F	; 0x80043f <timer0_millis+0x3>
    3a9c:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <timer0_fract>
    3aa0:	23 e0       	ldi	r18, 0x03	; 3
    3aa2:	23 0f       	add	r18, r19
    3aa4:	2d 37       	cpi	r18, 0x7D	; 125
    3aa6:	20 f4       	brcc	.+8      	; 0x3ab0 <__vector_16+0x3a>
    3aa8:	01 96       	adiw	r24, 0x01	; 1
    3aaa:	a1 1d       	adc	r26, r1
    3aac:	b1 1d       	adc	r27, r1
    3aae:	05 c0       	rjmp	.+10     	; 0x3aba <__vector_16+0x44>
    3ab0:	26 e8       	ldi	r18, 0x86	; 134
    3ab2:	23 0f       	add	r18, r19
    3ab4:	02 96       	adiw	r24, 0x02	; 2
    3ab6:	a1 1d       	adc	r26, r1
    3ab8:	b1 1d       	adc	r27, r1
    3aba:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <timer0_fract>
    3abe:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <timer0_millis>
    3ac2:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <timer0_millis+0x1>
    3ac6:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <timer0_millis+0x2>
    3aca:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <timer0_millis+0x3>
    3ace:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    3ad2:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    3ad6:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    3ada:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    3ade:	01 96       	adiw	r24, 0x01	; 1
    3ae0:	a1 1d       	adc	r26, r1
    3ae2:	b1 1d       	adc	r27, r1
    3ae4:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <timer0_overflow_count>
    3ae8:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <timer0_overflow_count+0x1>
    3aec:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <timer0_overflow_count+0x2>
    3af0:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <timer0_overflow_count+0x3>
    3af4:	bf 91       	pop	r27
    3af6:	af 91       	pop	r26
    3af8:	9f 91       	pop	r25
    3afa:	8f 91       	pop	r24
    3afc:	3f 91       	pop	r19
    3afe:	2f 91       	pop	r18
    3b00:	0f 90       	pop	r0
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	0f 90       	pop	r0
    3b06:	1f 90       	pop	r1
    3b08:	18 95       	reti

00003b0a <micros>:
    3b0a:	3f b7       	in	r19, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    3b12:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    3b16:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    3b1a:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    3b1e:	26 b5       	in	r18, 0x26	; 38
    3b20:	a8 9b       	sbis	0x15, 0	; 21
    3b22:	05 c0       	rjmp	.+10     	; 0x3b2e <micros+0x24>
    3b24:	2f 3f       	cpi	r18, 0xFF	; 255
    3b26:	19 f0       	breq	.+6      	; 0x3b2e <micros+0x24>
    3b28:	01 96       	adiw	r24, 0x01	; 1
    3b2a:	a1 1d       	adc	r26, r1
    3b2c:	b1 1d       	adc	r27, r1
    3b2e:	3f bf       	out	0x3f, r19	; 63
    3b30:	ba 2f       	mov	r27, r26
    3b32:	a9 2f       	mov	r26, r25
    3b34:	98 2f       	mov	r25, r24
    3b36:	88 27       	eor	r24, r24
    3b38:	82 0f       	add	r24, r18
    3b3a:	91 1d       	adc	r25, r1
    3b3c:	a1 1d       	adc	r26, r1
    3b3e:	b1 1d       	adc	r27, r1
    3b40:	bc 01       	movw	r22, r24
    3b42:	cd 01       	movw	r24, r26
    3b44:	42 e0       	ldi	r20, 0x02	; 2
    3b46:	66 0f       	add	r22, r22
    3b48:	77 1f       	adc	r23, r23
    3b4a:	88 1f       	adc	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	4a 95       	dec	r20
    3b50:	d1 f7       	brne	.-12     	; 0x3b46 <micros+0x3c>
    3b52:	08 95       	ret

00003b54 <delay>:
    3b54:	8f 92       	push	r8
    3b56:	9f 92       	push	r9
    3b58:	af 92       	push	r10
    3b5a:	bf 92       	push	r11
    3b5c:	cf 92       	push	r12
    3b5e:	df 92       	push	r13
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	6b 01       	movw	r12, r22
    3b66:	7c 01       	movw	r14, r24
    3b68:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <micros>
    3b6c:	4b 01       	movw	r8, r22
    3b6e:	5c 01       	movw	r10, r24
    3b70:	c1 14       	cp	r12, r1
    3b72:	d1 04       	cpc	r13, r1
    3b74:	e1 04       	cpc	r14, r1
    3b76:	f1 04       	cpc	r15, r1
    3b78:	01 f1       	breq	.+64     	; 0x3bba <delay+0x66>
    3b7a:	0e 94 34 22 	call	0x4468	; 0x4468 <yield>
    3b7e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <micros>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	88 19       	sub	r24, r8
    3b88:	99 09       	sbc	r25, r9
    3b8a:	aa 09       	sbc	r26, r10
    3b8c:	bb 09       	sbc	r27, r11
    3b8e:	88 3e       	cpi	r24, 0xE8	; 232
    3b90:	93 40       	sbci	r25, 0x03	; 3
    3b92:	a1 05       	cpc	r26, r1
    3b94:	b1 05       	cpc	r27, r1
    3b96:	60 f3       	brcs	.-40     	; 0x3b70 <delay+0x1c>
    3b98:	21 e0       	ldi	r18, 0x01	; 1
    3b9a:	c2 1a       	sub	r12, r18
    3b9c:	d1 08       	sbc	r13, r1
    3b9e:	e1 08       	sbc	r14, r1
    3ba0:	f1 08       	sbc	r15, r1
    3ba2:	88 ee       	ldi	r24, 0xE8	; 232
    3ba4:	88 0e       	add	r8, r24
    3ba6:	83 e0       	ldi	r24, 0x03	; 3
    3ba8:	98 1e       	adc	r9, r24
    3baa:	a1 1c       	adc	r10, r1
    3bac:	b1 1c       	adc	r11, r1
    3bae:	c1 14       	cp	r12, r1
    3bb0:	d1 04       	cpc	r13, r1
    3bb2:	e1 04       	cpc	r14, r1
    3bb4:	f1 04       	cpc	r15, r1
    3bb6:	19 f7       	brne	.-58     	; 0x3b7e <delay+0x2a>
    3bb8:	db cf       	rjmp	.-74     	; 0x3b70 <delay+0x1c>
    3bba:	ff 90       	pop	r15
    3bbc:	ef 90       	pop	r14
    3bbe:	df 90       	pop	r13
    3bc0:	cf 90       	pop	r12
    3bc2:	bf 90       	pop	r11
    3bc4:	af 90       	pop	r10
    3bc6:	9f 90       	pop	r9
    3bc8:	8f 90       	pop	r8
    3bca:	08 95       	ret

00003bcc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3bcc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3bce:	84 b5       	in	r24, 0x24	; 36
    3bd0:	82 60       	ori	r24, 0x02	; 2
    3bd2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3bd4:	84 b5       	in	r24, 0x24	; 36
    3bd6:	81 60       	ori	r24, 0x01	; 1
    3bd8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3bda:	85 b5       	in	r24, 0x25	; 37
    3bdc:	82 60       	ori	r24, 0x02	; 2
    3bde:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3be0:	85 b5       	in	r24, 0x25	; 37
    3be2:	81 60       	ori	r24, 0x01	; 1
    3be4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3be6:	ee e6       	ldi	r30, 0x6E	; 110
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	81 60       	ori	r24, 0x01	; 1
    3bee:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3bf0:	e1 e8       	ldi	r30, 0x81	; 129
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3bf6:	80 81       	ld	r24, Z
    3bf8:	82 60       	ori	r24, 0x02	; 2
    3bfa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3bfc:	80 81       	ld	r24, Z
    3bfe:	81 60       	ori	r24, 0x01	; 1
    3c00:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3c02:	e0 e8       	ldi	r30, 0x80	; 128
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	80 81       	ld	r24, Z
    3c08:	81 60       	ori	r24, 0x01	; 1
    3c0a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3c0c:	e1 eb       	ldi	r30, 0xB1	; 177
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	80 81       	ld	r24, Z
    3c12:	84 60       	ori	r24, 0x04	; 4
    3c14:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3c16:	e0 eb       	ldi	r30, 0xB0	; 176
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	81 60       	ori	r24, 0x01	; 1
    3c1e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3c20:	ea e7       	ldi	r30, 0x7A	; 122
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	84 60       	ori	r24, 0x04	; 4
    3c28:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3c2a:	80 81       	ld	r24, Z
    3c2c:	82 60       	ori	r24, 0x02	; 2
    3c2e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3c30:	80 81       	ld	r24, Z
    3c32:	81 60       	ori	r24, 0x01	; 1
    3c34:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3c36:	80 81       	ld	r24, Z
    3c38:	80 68       	ori	r24, 0x80	; 128
    3c3a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3c3c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3c40:	08 95       	ret

00003c42 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3c42:	8e 30       	cpi	r24, 0x0E	; 14
    3c44:	08 f0       	brcs	.+2      	; 0x3c48 <analogRead+0x6>
    3c46:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3c48:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3c4c:	90 e4       	ldi	r25, 0x40	; 64
    3c4e:	29 9f       	mul	r18, r25
    3c50:	90 01       	movw	r18, r0
    3c52:	11 24       	eor	r1, r1
    3c54:	87 70       	andi	r24, 0x07	; 7
    3c56:	82 2b       	or	r24, r18
    3c58:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3c5c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3c60:	80 64       	ori	r24, 0x40	; 64
    3c62:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3c66:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3c6a:	86 fd       	sbrc	r24, 6
    3c6c:	fc cf       	rjmp	.-8      	; 0x3c66 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3c6e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3c72:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3c76:	90 e0       	ldi	r25, 0x00	; 0
}
    3c78:	92 2b       	or	r25, r18
    3c7a:	08 95       	ret

00003c7c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3c7c:	83 30       	cpi	r24, 0x03	; 3
    3c7e:	81 f0       	breq	.+32     	; 0x3ca0 <turnOffPWM+0x24>
    3c80:	28 f4       	brcc	.+10     	; 0x3c8c <turnOffPWM+0x10>
    3c82:	81 30       	cpi	r24, 0x01	; 1
    3c84:	99 f0       	breq	.+38     	; 0x3cac <turnOffPWM+0x30>
    3c86:	82 30       	cpi	r24, 0x02	; 2
    3c88:	a1 f0       	breq	.+40     	; 0x3cb2 <turnOffPWM+0x36>
    3c8a:	08 95       	ret
    3c8c:	87 30       	cpi	r24, 0x07	; 7
    3c8e:	a9 f0       	breq	.+42     	; 0x3cba <turnOffPWM+0x3e>
    3c90:	88 30       	cpi	r24, 0x08	; 8
    3c92:	b9 f0       	breq	.+46     	; 0x3cc2 <turnOffPWM+0x46>
    3c94:	84 30       	cpi	r24, 0x04	; 4
    3c96:	d1 f4       	brne	.+52     	; 0x3ccc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3c98:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3c9c:	8f 7d       	andi	r24, 0xDF	; 223
    3c9e:	03 c0       	rjmp	.+6      	; 0x3ca6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3ca0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3ca4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3ca6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3caa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3cac:	84 b5       	in	r24, 0x24	; 36
    3cae:	8f 77       	andi	r24, 0x7F	; 127
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3cb2:	84 b5       	in	r24, 0x24	; 36
    3cb4:	8f 7d       	andi	r24, 0xDF	; 223
    3cb6:	84 bd       	out	0x24, r24	; 36
    3cb8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3cba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3cbe:	8f 77       	andi	r24, 0x7F	; 127
    3cc0:	03 c0       	rjmp	.+6      	; 0x3cc8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3cc2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3cc6:	8f 7d       	andi	r24, 0xDF	; 223
    3cc8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3ccc:	08 95       	ret

00003cce <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	ea 54       	subi	r30, 0x4A	; 74
    3cd8:	f8 4f       	sbci	r31, 0xF8	; 248
    3cda:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3cdc:	fc 01       	movw	r30, r24
    3cde:	e6 53       	subi	r30, 0x36	; 54
    3ce0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ce2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3ce4:	88 23       	and	r24, r24
    3ce6:	61 f1       	breq	.+88     	; 0x3d40 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	fc 01       	movw	r30, r24
    3cf0:	ee 50       	subi	r30, 0x0E	; 14
    3cf2:	f8 4f       	sbci	r31, 0xF8	; 248
    3cf4:	c5 91       	lpm	r28, Z+
    3cf6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	e8 51       	subi	r30, 0x18	; 24
    3cfc:	f8 4f       	sbci	r31, 0xF8	; 248
    3cfe:	a5 91       	lpm	r26, Z+
    3d00:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3d02:	61 11       	cpse	r22, r1
    3d04:	09 c0       	rjmp	.+18     	; 0x3d18 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3d06:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3d08:	f8 94       	cli
		*reg &= ~bit;
    3d0a:	88 81       	ld	r24, Y
    3d0c:	20 95       	com	r18
    3d0e:	82 23       	and	r24, r18
    3d10:	88 83       	st	Y, r24
		*out &= ~bit;
    3d12:	ec 91       	ld	r30, X
    3d14:	2e 23       	and	r18, r30
    3d16:	0b c0       	rjmp	.+22     	; 0x3d2e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3d18:	62 30       	cpi	r22, 0x02	; 2
    3d1a:	61 f4       	brne	.+24     	; 0x3d34 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3d1c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3d1e:	f8 94       	cli
		*reg &= ~bit;
    3d20:	88 81       	ld	r24, Y
    3d22:	32 2f       	mov	r19, r18
    3d24:	30 95       	com	r19
    3d26:	83 23       	and	r24, r19
    3d28:	88 83       	st	Y, r24
		*out |= bit;
    3d2a:	ec 91       	ld	r30, X
    3d2c:	2e 2b       	or	r18, r30
    3d2e:	2c 93       	st	X, r18
		SREG = oldSREG;
    3d30:	9f bf       	out	0x3f, r25	; 63
    3d32:	06 c0       	rjmp	.+12     	; 0x3d40 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3d34:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3d36:	f8 94       	cli
		*reg |= bit;
    3d38:	e8 81       	ld	r30, Y
    3d3a:	2e 2b       	or	r18, r30
    3d3c:	28 83       	st	Y, r18
		SREG = oldSREG;
    3d3e:	8f bf       	out	0x3f, r24	; 63
	}
}
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	08 95       	ret

00003d46 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3d46:	1f 93       	push	r17
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	f9 01       	movw	r30, r18
    3d52:	ee 55       	subi	r30, 0x5E	; 94
    3d54:	f8 4f       	sbci	r31, 0xF8	; 248
    3d56:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3d58:	f9 01       	movw	r30, r18
    3d5a:	ea 54       	subi	r30, 0x4A	; 74
    3d5c:	f8 4f       	sbci	r31, 0xF8	; 248
    3d5e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3d60:	f9 01       	movw	r30, r18
    3d62:	e6 53       	subi	r30, 0x36	; 54
    3d64:	f8 4f       	sbci	r31, 0xF8	; 248
    3d66:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3d68:	cc 23       	and	r28, r28
    3d6a:	c1 f0       	breq	.+48     	; 0x3d9c <digitalWrite+0x56>
    3d6c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3d6e:	81 11       	cpse	r24, r1
    3d70:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <turnOffPWM>

	out = portOutputRegister(port);
    3d74:	ec 2f       	mov	r30, r28
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	ee 0f       	add	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	e8 51       	subi	r30, 0x18	; 24
    3d7e:	f8 4f       	sbci	r31, 0xF8	; 248
    3d80:	a5 91       	lpm	r26, Z+
    3d82:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3d84:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3d86:	f8 94       	cli

	if (val == LOW) {
    3d88:	11 11       	cpse	r17, r1
    3d8a:	04 c0       	rjmp	.+8      	; 0x3d94 <digitalWrite+0x4e>
		*out &= ~bit;
    3d8c:	8c 91       	ld	r24, X
    3d8e:	d0 95       	com	r29
    3d90:	d8 23       	and	r29, r24
    3d92:	02 c0       	rjmp	.+4      	; 0x3d98 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3d94:	ec 91       	ld	r30, X
    3d96:	de 2b       	or	r29, r30
    3d98:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3d9a:	9f bf       	out	0x3f, r25	; 63
}
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	08 95       	ret

00003da4 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3da4:	fc 01       	movw	r30, r24
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	0c 94 48 23 	jmp	0x4690	; 0x4690 <free>

00003dae <_ZN6String10invalidateEv>:
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	ec 01       	movw	r28, r24
    3db4:	88 81       	ld	r24, Y
    3db6:	99 81       	ldd	r25, Y+1	; 0x01
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	11 f0       	breq	.+4      	; 0x3dc0 <_ZN6String10invalidateEv+0x12>
    3dbc:	0e 94 48 23 	call	0x4690	; 0x4690 <free>
    3dc0:	19 82       	std	Y+1, r1	; 0x01
    3dc2:	18 82       	st	Y, r1
    3dc4:	1d 82       	std	Y+5, r1	; 0x05
    3dc6:	1c 82       	std	Y+4, r1	; 0x04
    3dc8:	1b 82       	std	Y+3, r1	; 0x03
    3dca:	1a 82       	std	Y+2, r1	; 0x02
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	08 95       	ret

00003dd2 <_ZN6String12changeBufferEj>:
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	ec 01       	movw	r28, r24
    3ddc:	8b 01       	movw	r16, r22
    3dde:	6f 5f       	subi	r22, 0xFF	; 255
    3de0:	7f 4f       	sbci	r23, 0xFF	; 255
    3de2:	88 81       	ld	r24, Y
    3de4:	99 81       	ldd	r25, Y+1	; 0x01
    3de6:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <realloc>
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	31 f0       	breq	.+12     	; 0x3dfa <_ZN6String12changeBufferEj+0x28>
    3dee:	99 83       	std	Y+1, r25	; 0x01
    3df0:	88 83       	st	Y, r24
    3df2:	1b 83       	std	Y+3, r17	; 0x03
    3df4:	0a 83       	std	Y+2, r16	; 0x02
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	01 c0       	rjmp	.+2      	; 0x3dfc <_ZN6String12changeBufferEj+0x2a>
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <_ZN6String7reserveEj>:
    3e06:	cf 93       	push	r28
    3e08:	df 93       	push	r29
    3e0a:	ec 01       	movw	r28, r24
    3e0c:	88 81       	ld	r24, Y
    3e0e:	99 81       	ldd	r25, Y+1	; 0x01
    3e10:	89 2b       	or	r24, r25
    3e12:	29 f0       	breq	.+10     	; 0x3e1e <_ZN6String7reserveEj+0x18>
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	9b 81       	ldd	r25, Y+3	; 0x03
    3e18:	86 17       	cp	r24, r22
    3e1a:	97 07       	cpc	r25, r23
    3e1c:	60 f4       	brcc	.+24     	; 0x3e36 <_ZN6String7reserveEj+0x30>
    3e1e:	ce 01       	movw	r24, r28
    3e20:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <_ZN6String12changeBufferEj>
    3e24:	88 23       	and	r24, r24
    3e26:	41 f0       	breq	.+16     	; 0x3e38 <_ZN6String7reserveEj+0x32>
    3e28:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e2c:	89 2b       	or	r24, r25
    3e2e:	19 f4       	brne	.+6      	; 0x3e36 <_ZN6String7reserveEj+0x30>
    3e30:	e8 81       	ld	r30, Y
    3e32:	f9 81       	ldd	r31, Y+1	; 0x01
    3e34:	10 82       	st	Z, r1
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	08 95       	ret

00003e3e <_ZN6String4copyEPKcj>:
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	ec 01       	movw	r28, r24
    3e4c:	7b 01       	movw	r14, r22
    3e4e:	8a 01       	movw	r16, r20
    3e50:	ba 01       	movw	r22, r20
    3e52:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <_ZN6String7reserveEj>
    3e56:	81 11       	cpse	r24, r1
    3e58:	04 c0       	rjmp	.+8      	; 0x3e62 <_ZN6String4copyEPKcj+0x24>
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN6String10invalidateEv>
    3e60:	07 c0       	rjmp	.+14     	; 0x3e70 <_ZN6String4copyEPKcj+0x32>
    3e62:	1d 83       	std	Y+5, r17	; 0x05
    3e64:	0c 83       	std	Y+4, r16	; 0x04
    3e66:	b7 01       	movw	r22, r14
    3e68:	88 81       	ld	r24, Y
    3e6a:	99 81       	ldd	r25, Y+1	; 0x01
    3e6c:	0e 94 f5 24 	call	0x49ea	; 0x49ea <strcpy>
    3e70:	ce 01       	movw	r24, r28
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	1f 91       	pop	r17
    3e78:	0f 91       	pop	r16
    3e7a:	ff 90       	pop	r15
    3e7c:	ef 90       	pop	r14
    3e7e:	08 95       	ret

00003e80 <_ZN6StringC1EPKc>:
    3e80:	fc 01       	movw	r30, r24
    3e82:	11 82       	std	Z+1, r1	; 0x01
    3e84:	10 82       	st	Z, r1
    3e86:	13 82       	std	Z+3, r1	; 0x03
    3e88:	12 82       	std	Z+2, r1	; 0x02
    3e8a:	15 82       	std	Z+5, r1	; 0x05
    3e8c:	14 82       	std	Z+4, r1	; 0x04
    3e8e:	61 15       	cp	r22, r1
    3e90:	71 05       	cpc	r23, r1
    3e92:	51 f0       	breq	.+20     	; 0x3ea8 <_ZN6StringC1EPKc+0x28>
    3e94:	fb 01       	movw	r30, r22
    3e96:	01 90       	ld	r0, Z+
    3e98:	00 20       	and	r0, r0
    3e9a:	e9 f7       	brne	.-6      	; 0x3e96 <_ZN6StringC1EPKc+0x16>
    3e9c:	31 97       	sbiw	r30, 0x01	; 1
    3e9e:	af 01       	movw	r20, r30
    3ea0:	46 1b       	sub	r20, r22
    3ea2:	57 0b       	sbc	r21, r23
    3ea4:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <_ZN6String4copyEPKcj>
    3ea8:	08 95       	ret

00003eaa <_ZN6StringaSERKS_>:
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	ec 01       	movw	r28, r24
    3eb0:	fb 01       	movw	r30, r22
    3eb2:	86 17       	cp	r24, r22
    3eb4:	97 07       	cpc	r25, r23
    3eb6:	61 f0       	breq	.+24     	; 0x3ed0 <_ZN6StringaSERKS_+0x26>
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	61 15       	cp	r22, r1
    3ebe:	71 05       	cpc	r23, r1
    3ec0:	29 f0       	breq	.+10     	; 0x3ecc <_ZN6StringaSERKS_+0x22>
    3ec2:	44 81       	ldd	r20, Z+4	; 0x04
    3ec4:	55 81       	ldd	r21, Z+5	; 0x05
    3ec6:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN6String4copyEPKcj>
    3eca:	02 c0       	rjmp	.+4      	; 0x3ed0 <_ZN6StringaSERKS_+0x26>
    3ecc:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN6String10invalidateEv>
    3ed0:	ce 01       	movw	r24, r28
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	08 95       	ret

00003ed8 <_ZN6StringC1ERKS_>:
    3ed8:	fc 01       	movw	r30, r24
    3eda:	11 82       	std	Z+1, r1	; 0x01
    3edc:	10 82       	st	Z, r1
    3ede:	13 82       	std	Z+3, r1	; 0x03
    3ee0:	12 82       	std	Z+2, r1	; 0x02
    3ee2:	15 82       	std	Z+5, r1	; 0x05
    3ee4:	14 82       	std	Z+4, r1	; 0x04
    3ee6:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <_ZN6StringaSERKS_>

00003eea <_ZN6String6concatEPKcj>:
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	61 15       	cp	r22, r1
    3ef8:	71 05       	cpc	r23, r1
    3efa:	11 f4       	brne	.+4      	; 0x3f00 <_ZN6String6concatEPKcj+0x16>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	1c c0       	rjmp	.+56     	; 0x3f38 <_ZN6String6concatEPKcj+0x4e>
    3f00:	41 15       	cp	r20, r1
    3f02:	51 05       	cpc	r21, r1
    3f04:	c1 f0       	breq	.+48     	; 0x3f36 <_ZN6String6concatEPKcj+0x4c>
    3f06:	7b 01       	movw	r14, r22
    3f08:	ec 01       	movw	r28, r24
    3f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f0e:	8a 01       	movw	r16, r20
    3f10:	08 0f       	add	r16, r24
    3f12:	19 1f       	adc	r17, r25
    3f14:	b8 01       	movw	r22, r16
    3f16:	ce 01       	movw	r24, r28
    3f18:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <_ZN6String7reserveEj>
    3f1c:	88 23       	and	r24, r24
    3f1e:	71 f3       	breq	.-36     	; 0x3efc <_ZN6String6concatEPKcj+0x12>
    3f20:	28 81       	ld	r18, Y
    3f22:	39 81       	ldd	r19, Y+1	; 0x01
    3f24:	8c 81       	ldd	r24, Y+4	; 0x04
    3f26:	9d 81       	ldd	r25, Y+5	; 0x05
    3f28:	b7 01       	movw	r22, r14
    3f2a:	82 0f       	add	r24, r18
    3f2c:	93 1f       	adc	r25, r19
    3f2e:	0e 94 f5 24 	call	0x49ea	; 0x49ea <strcpy>
    3f32:	1d 83       	std	Y+5, r17	; 0x05
    3f34:	0c 83       	std	Y+4, r16	; 0x04
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	df 91       	pop	r29
    3f3a:	cf 91       	pop	r28
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	ff 90       	pop	r15
    3f42:	ef 90       	pop	r14
    3f44:	08 95       	ret

00003f46 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3f46:	ef 92       	push	r14
    3f48:	ff 92       	push	r15
    3f4a:	0f 93       	push	r16
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <_ZN6String6concatEh+0xe>
    3f54:	00 d0       	rcall	.+0      	; 0x3f56 <_ZN6String6concatEh+0x10>
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	7c 01       	movw	r14, r24
    3f5c:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3f5e:	4a e0       	ldi	r20, 0x0A	; 10
    3f60:	8e 01       	movw	r16, r28
    3f62:	0f 5f       	subi	r16, 0xFF	; 255
    3f64:	1f 4f       	sbci	r17, 0xFF	; 255
    3f66:	b8 01       	movw	r22, r16
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3f6e:	f8 01       	movw	r30, r16
    3f70:	01 90       	ld	r0, Z+
    3f72:	00 20       	and	r0, r0
    3f74:	e9 f7       	brne	.-6      	; 0x3f70 <_ZN6String6concatEh+0x2a>
    3f76:	31 97       	sbiw	r30, 0x01	; 1
    3f78:	af 01       	movw	r20, r30
    3f7a:	40 1b       	sub	r20, r16
    3f7c:	51 0b       	sbc	r21, r17
    3f7e:	b8 01       	movw	r22, r16
    3f80:	c7 01       	movw	r24, r14
    3f82:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN6String6concatEPKcj>
}
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
    3f92:	1f 91       	pop	r17
    3f94:	0f 91       	pop	r16
    3f96:	ff 90       	pop	r15
    3f98:	ef 90       	pop	r14
    3f9a:	08 95       	ret

00003f9c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3f9c:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3fa0:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3fa4:	28 17       	cp	r18, r24
    3fa6:	39 07       	cpc	r19, r25
    3fa8:	b9 f4       	brne	.+46     	; 0x3fd8 <_ZN14SoftwareSerial4readEv+0x3c>
    3faa:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fae:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fb2:	98 17       	cp	r25, r24
    3fb4:	89 f0       	breq	.+34     	; 0x3fd8 <_ZN14SoftwareSerial4readEv+0x3c>
    3fb6:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	ea 5b       	subi	r30, 0xBA	; 186
    3fbe:	fb 4f       	sbci	r31, 0xFB	; 251
    3fc0:	80 81       	ld	r24, Z
    3fc2:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	2f 5f       	subi	r18, 0xFF	; 255
    3fca:	3f 4f       	sbci	r19, 0xFF	; 255
    3fcc:	2f 73       	andi	r18, 0x3F	; 63
    3fce:	33 27       	eor	r19, r19
    3fd0:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	08 95       	ret
    3fd8:	8f ef       	ldi	r24, 0xFF	; 255
    3fda:	9f ef       	ldi	r25, 0xFF	; 255
    3fdc:	08 95       	ret

00003fde <_ZN14SoftwareSerial5writeEh>:
    3fde:	1f 93       	push	r17
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	5c 96       	adiw	r26, 0x1c	; 28
    3fe8:	8d 91       	ld	r24, X+
    3fea:	9c 91       	ld	r25, X
    3fec:	5d 97       	sbiw	r26, 0x1d	; 29
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	39 f4       	brne	.+14     	; 0x4000 <_ZN14SoftwareSerial5writeEh+0x22>
    3ff2:	21 e0       	ldi	r18, 0x01	; 1
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	13 96       	adiw	r26, 0x03	; 3
    3ff8:	3c 93       	st	X, r19
    3ffa:	2e 93       	st	-X, r18
    3ffc:	12 97       	sbiw	r26, 0x02	; 2
    3ffe:	3b c0       	rjmp	.+118    	; 0x4076 <_ZN14SoftwareSerial5writeEh+0x98>
    4000:	51 96       	adiw	r26, 0x11	; 17
    4002:	ed 91       	ld	r30, X+
    4004:	fc 91       	ld	r31, X
    4006:	52 97       	sbiw	r26, 0x12	; 18
    4008:	50 96       	adiw	r26, 0x10	; 16
    400a:	2c 91       	ld	r18, X
    400c:	50 97       	sbiw	r26, 0x10	; 16
    400e:	32 2f       	mov	r19, r18
    4010:	30 95       	com	r19
    4012:	1f b7       	in	r17, 0x3f	; 63
    4014:	5e 96       	adiw	r26, 0x1e	; 30
    4016:	4c 91       	ld	r20, X
    4018:	5e 97       	sbiw	r26, 0x1e	; 30
    401a:	74 2f       	mov	r23, r20
    401c:	72 70       	andi	r23, 0x02	; 2
    401e:	41 fd       	sbrc	r20, 1
    4020:	60 95       	com	r22
    4022:	f8 94       	cli
    4024:	40 81       	ld	r20, Z
    4026:	77 23       	and	r23, r23
    4028:	11 f0       	breq	.+4      	; 0x402e <_ZN14SoftwareSerial5writeEh+0x50>
    402a:	42 2b       	or	r20, r18
    402c:	01 c0       	rjmp	.+2      	; 0x4030 <_ZN14SoftwareSerial5writeEh+0x52>
    402e:	43 23       	and	r20, r19
    4030:	40 83       	st	Z, r20
    4032:	ec 01       	movw	r28, r24
    4034:	21 97       	sbiw	r28, 0x01	; 1
    4036:	f1 f7       	brne	.-4      	; 0x4034 <_ZN14SoftwareSerial5writeEh+0x56>
    4038:	48 e0       	ldi	r20, 0x08	; 8
    403a:	50 81       	ld	r21, Z
    403c:	60 ff       	sbrs	r22, 0
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <_ZN14SoftwareSerial5writeEh+0x66>
    4040:	52 2b       	or	r21, r18
    4042:	01 c0       	rjmp	.+2      	; 0x4046 <_ZN14SoftwareSerial5writeEh+0x68>
    4044:	53 23       	and	r21, r19
    4046:	50 83       	st	Z, r21
    4048:	ec 01       	movw	r28, r24
    404a:	21 97       	sbiw	r28, 0x01	; 1
    404c:	f1 f7       	brne	.-4      	; 0x404a <_ZN14SoftwareSerial5writeEh+0x6c>
    404e:	66 95       	lsr	r22
    4050:	41 50       	subi	r20, 0x01	; 1
    4052:	99 f7       	brne	.-26     	; 0x403a <_ZN14SoftwareSerial5writeEh+0x5c>
    4054:	80 81       	ld	r24, Z
    4056:	77 23       	and	r23, r23
    4058:	19 f0       	breq	.+6      	; 0x4060 <_ZN14SoftwareSerial5writeEh+0x82>
    405a:	83 23       	and	r24, r19
    405c:	80 83       	st	Z, r24
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <_ZN14SoftwareSerial5writeEh+0x86>
    4060:	28 2b       	or	r18, r24
    4062:	20 83       	st	Z, r18
    4064:	1f bf       	out	0x3f, r17	; 63
    4066:	5c 96       	adiw	r26, 0x1c	; 28
    4068:	8d 91       	ld	r24, X+
    406a:	9c 91       	ld	r25, X
    406c:	5d 97       	sbiw	r26, 0x1d	; 29
    406e:	01 97       	sbiw	r24, 0x01	; 1
    4070:	f1 f7       	brne	.-4      	; 0x406e <_ZN14SoftwareSerial5writeEh+0x90>
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	1f 91       	pop	r17
    407c:	08 95       	ret

0000407e <_ZN14SoftwareSerial5flushEv>:
    407e:	08 95       	ret

00004080 <_ZN14SoftwareSerial4peekEv>:
    4080:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    4084:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    4088:	28 17       	cp	r18, r24
    408a:	39 07       	cpc	r19, r25
    408c:	71 f4       	brne	.+28     	; 0x40aa <_ZN14SoftwareSerial4peekEv+0x2a>
    408e:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4092:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4096:	98 17       	cp	r25, r24
    4098:	41 f0       	breq	.+16     	; 0x40aa <_ZN14SoftwareSerial4peekEv+0x2a>
    409a:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	ea 5b       	subi	r30, 0xBA	; 186
    40a2:	fb 4f       	sbci	r31, 0xFB	; 251
    40a4:	80 81       	ld	r24, Z
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	08 95       	ret
    40aa:	8f ef       	ldi	r24, 0xFF	; 255
    40ac:	9f ef       	ldi	r25, 0xFF	; 255
    40ae:	08 95       	ret

000040b0 <_ZN14SoftwareSerial9availableEv>:
    40b0:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    40b4:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    40b8:	28 17       	cp	r18, r24
    40ba:	39 07       	cpc	r19, r25
    40bc:	71 f4       	brne	.+28     	; 0x40da <_ZN14SoftwareSerial9availableEv+0x2a>
    40be:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    40c2:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	80 5c       	subi	r24, 0xC0	; 192
    40ca:	9f 4f       	sbci	r25, 0xFF	; 255
    40cc:	82 1b       	sub	r24, r18
    40ce:	91 09       	sbc	r25, r1
    40d0:	60 e4       	ldi	r22, 0x40	; 64
    40d2:	70 e0       	ldi	r23, 0x00	; 0
    40d4:	0e 94 55 22 	call	0x44aa	; 0x44aa <__divmodhi4>
    40d8:	08 95       	ret
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	08 95       	ret

000040e0 <_ZN14SoftwareSerial13stopListeningEv>:
    40e0:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    40e4:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    40e8:	e8 17       	cp	r30, r24
    40ea:	f9 07       	cpc	r31, r25
    40ec:	69 f4       	brne	.+26     	; 0x4108 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    40ee:	a3 89       	ldd	r26, Z+19	; 0x13
    40f0:	b4 89       	ldd	r27, Z+20	; 0x14
    40f2:	9c 91       	ld	r25, X
    40f4:	85 89       	ldd	r24, Z+21	; 0x15
    40f6:	80 95       	com	r24
    40f8:	89 23       	and	r24, r25
    40fa:	8c 93       	st	X, r24
    40fc:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    4100:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	08 95       	ret
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	08 95       	ret

0000410c <_ZN14SoftwareSerial6listenEv>:
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	ec 01       	movw	r28, r24
    4112:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4114:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4116:	89 2b       	or	r24, r25
    4118:	f1 f0       	breq	.+60     	; 0x4156 <_ZN14SoftwareSerial6listenEv+0x4a>
    411a:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    411e:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    4122:	c8 17       	cp	r28, r24
    4124:	d9 07       	cpc	r29, r25
    4126:	b9 f0       	breq	.+46     	; 0x4156 <_ZN14SoftwareSerial6listenEv+0x4a>
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	11 f0       	breq	.+4      	; 0x4130 <_ZN14SoftwareSerial6listenEv+0x24>
    412c:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN14SoftwareSerial13stopListeningEv>
    4130:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4132:	8e 7f       	andi	r24, 0xFE	; 254
    4134:	8e 8f       	std	Y+30, r24	; 0x1e
    4136:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    413a:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    413e:	d0 93 87 04 	sts	0x0487, r29	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    4142:	c0 93 86 04 	sts	0x0486, r28	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    4146:	eb 89       	ldd	r30, Y+19	; 0x13
    4148:	fc 89       	ldd	r31, Y+20	; 0x14
    414a:	90 81       	ld	r25, Z
    414c:	8d 89       	ldd	r24, Y+21	; 0x15
    414e:	89 2b       	or	r24, r25
    4150:	80 83       	st	Z, r24
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	01 c0       	rjmp	.+2      	; 0x4158 <_ZN14SoftwareSerial6listenEv+0x4c>
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	08 95       	ret

0000415e <__vector_3>:
    415e:	1f 92       	push	r1
    4160:	0f 92       	push	r0
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	0f 92       	push	r0
    4166:	11 24       	eor	r1, r1
    4168:	2f 93       	push	r18
    416a:	3f 93       	push	r19
    416c:	4f 93       	push	r20
    416e:	5f 93       	push	r21
    4170:	6f 93       	push	r22
    4172:	7f 93       	push	r23
    4174:	8f 93       	push	r24
    4176:	9f 93       	push	r25
    4178:	af 93       	push	r26
    417a:	bf 93       	push	r27
    417c:	ef 93       	push	r30
    417e:	ff 93       	push	r31
    4180:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    4184:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    4188:	30 97       	sbiw	r30, 0x00	; 0
    418a:	09 f4       	brne	.+2      	; 0x418e <__vector_3+0x30>
    418c:	51 c0       	rjmp	.+162    	; 0x4230 <__vector_3+0xd2>
    418e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4190:	a6 85       	ldd	r26, Z+14	; 0x0e
    4192:	b7 85       	ldd	r27, Z+15	; 0x0f
    4194:	85 85       	ldd	r24, Z+13	; 0x0d
    4196:	91 ff       	sbrs	r25, 1
    4198:	04 c0       	rjmp	.+8      	; 0x41a2 <__vector_3+0x44>
    419a:	9c 91       	ld	r25, X
    419c:	89 23       	and	r24, r25
    419e:	29 f4       	brne	.+10     	; 0x41aa <__vector_3+0x4c>
    41a0:	47 c0       	rjmp	.+142    	; 0x4230 <__vector_3+0xd2>
    41a2:	9c 91       	ld	r25, X
    41a4:	89 23       	and	r24, r25
    41a6:	09 f0       	breq	.+2      	; 0x41aa <__vector_3+0x4c>
    41a8:	43 c0       	rjmp	.+134    	; 0x4230 <__vector_3+0xd2>
    41aa:	a3 89       	ldd	r26, Z+19	; 0x13
    41ac:	b4 89       	ldd	r27, Z+20	; 0x14
    41ae:	9c 91       	ld	r25, X
    41b0:	85 89       	ldd	r24, Z+21	; 0x15
    41b2:	80 95       	com	r24
    41b4:	89 23       	and	r24, r25
    41b6:	8c 93       	st	X, r24
    41b8:	86 89       	ldd	r24, Z+22	; 0x16
    41ba:	97 89       	ldd	r25, Z+23	; 0x17
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <__vector_3+0x5e>
    41c0:	60 8d       	ldd	r22, Z+24	; 0x18
    41c2:	71 8d       	ldd	r23, Z+25	; 0x19
    41c4:	a6 85       	ldd	r26, Z+14	; 0x0e
    41c6:	b7 85       	ldd	r27, Z+15	; 0x0f
    41c8:	55 85       	ldd	r21, Z+13	; 0x0d
    41ca:	38 e0       	ldi	r19, 0x08	; 8
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	cb 01       	movw	r24, r22
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <__vector_3+0x72>
    41d4:	82 2f       	mov	r24, r18
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	95 95       	asr	r25
    41da:	87 95       	ror	r24
    41dc:	28 2f       	mov	r18, r24
    41de:	4c 91       	ld	r20, X
    41e0:	45 23       	and	r20, r21
    41e2:	09 f0       	breq	.+2      	; 0x41e6 <__vector_3+0x88>
    41e4:	20 68       	ori	r18, 0x80	; 128
    41e6:	31 50       	subi	r19, 0x01	; 1
    41e8:	91 f7       	brne	.-28     	; 0x41ce <__vector_3+0x70>
    41ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    41ec:	81 fd       	sbrc	r24, 1
    41ee:	20 95       	com	r18
    41f0:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	01 96       	adiw	r24, 0x01	; 1
    41f8:	8f 73       	andi	r24, 0x3F	; 63
    41fa:	99 27       	eor	r25, r25
    41fc:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4200:	38 17       	cp	r19, r24
    4202:	49 f0       	breq	.+18     	; 0x4216 <__vector_3+0xb8>
    4204:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	aa 5b       	subi	r26, 0xBA	; 186
    420c:	bb 4f       	sbci	r27, 0xFB	; 251
    420e:	2c 93       	st	X, r18
    4210:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4214:	03 c0       	rjmp	.+6      	; 0x421c <__vector_3+0xbe>
    4216:	86 8d       	ldd	r24, Z+30	; 0x1e
    4218:	81 60       	ori	r24, 0x01	; 1
    421a:	86 8f       	std	Z+30, r24	; 0x1e
    421c:	82 8d       	ldd	r24, Z+26	; 0x1a
    421e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	f1 f7       	brne	.-4      	; 0x4220 <__vector_3+0xc2>
    4224:	a3 89       	ldd	r26, Z+19	; 0x13
    4226:	b4 89       	ldd	r27, Z+20	; 0x14
    4228:	9c 91       	ld	r25, X
    422a:	85 89       	ldd	r24, Z+21	; 0x15
    422c:	89 2b       	or	r24, r25
    422e:	8c 93       	st	X, r24
    4230:	ff 91       	pop	r31
    4232:	ef 91       	pop	r30
    4234:	bf 91       	pop	r27
    4236:	af 91       	pop	r26
    4238:	9f 91       	pop	r25
    423a:	8f 91       	pop	r24
    423c:	7f 91       	pop	r23
    423e:	6f 91       	pop	r22
    4240:	5f 91       	pop	r21
    4242:	4f 91       	pop	r20
    4244:	3f 91       	pop	r19
    4246:	2f 91       	pop	r18
    4248:	0f 90       	pop	r0
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	0f 90       	pop	r0
    424e:	1f 90       	pop	r1
    4250:	18 95       	reti

00004252 <_ZN14SoftwareSerial5setTXEh>:
    4252:	1f 93       	push	r17
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	ec 01       	movw	r28, r24
    425a:	16 2f       	mov	r17, r22
    425c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    425e:	66 95       	lsr	r22
    4260:	61 70       	andi	r22, 0x01	; 1
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	68 27       	eor	r22, r24
    4266:	81 2f       	mov	r24, r17
    4268:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    426c:	61 e0       	ldi	r22, 0x01	; 1
    426e:	81 2f       	mov	r24, r17
    4270:	0e 94 67 1e 	call	0x3cce	; 0x3cce <pinMode>
    4274:	81 2f       	mov	r24, r17
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	fc 01       	movw	r30, r24
    427a:	ea 54       	subi	r30, 0x4A	; 74
    427c:	f8 4f       	sbci	r31, 0xF8	; 248
    427e:	e4 91       	lpm	r30, Z
    4280:	e8 8b       	std	Y+16, r30	; 0x10
    4282:	fc 01       	movw	r30, r24
    4284:	e6 53       	subi	r30, 0x36	; 54
    4286:	f8 4f       	sbci	r31, 0xF8	; 248
    4288:	e4 91       	lpm	r30, Z
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	ee 0f       	add	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	e8 51       	subi	r30, 0x18	; 24
    4292:	f8 4f       	sbci	r31, 0xF8	; 248
    4294:	85 91       	lpm	r24, Z+
    4296:	94 91       	lpm	r25, Z
    4298:	9a 8b       	std	Y+18, r25	; 0x12
    429a:	89 8b       	std	Y+17, r24	; 0x11
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	08 95       	ret

000042a4 <_ZN14SoftwareSerial5setRXEh>:
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	ec 01       	movw	r28, r24
    42ac:	16 2f       	mov	r17, r22
    42ae:	60 e0       	ldi	r22, 0x00	; 0
    42b0:	81 2f       	mov	r24, r17
    42b2:	0e 94 67 1e 	call	0x3cce	; 0x3cce <pinMode>
    42b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42b8:	81 fd       	sbrc	r24, 1
    42ba:	04 c0       	rjmp	.+8      	; 0x42c4 <_ZN14SoftwareSerial5setRXEh+0x20>
    42bc:	61 e0       	ldi	r22, 0x01	; 1
    42be:	81 2f       	mov	r24, r17
    42c0:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <digitalWrite>
    42c4:	1c 87       	std	Y+12, r17	; 0x0c
    42c6:	81 2f       	mov	r24, r17
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	fc 01       	movw	r30, r24
    42cc:	ea 54       	subi	r30, 0x4A	; 74
    42ce:	f8 4f       	sbci	r31, 0xF8	; 248
    42d0:	e4 91       	lpm	r30, Z
    42d2:	ed 87       	std	Y+13, r30	; 0x0d
    42d4:	fc 01       	movw	r30, r24
    42d6:	e6 53       	subi	r30, 0x36	; 54
    42d8:	f8 4f       	sbci	r31, 0xF8	; 248
    42da:	e4 91       	lpm	r30, Z
    42dc:	f0 e0       	ldi	r31, 0x00	; 0
    42de:	ee 0f       	add	r30, r30
    42e0:	ff 1f       	adc	r31, r31
    42e2:	e2 52       	subi	r30, 0x22	; 34
    42e4:	f8 4f       	sbci	r31, 0xF8	; 248
    42e6:	85 91       	lpm	r24, Z+
    42e8:	94 91       	lpm	r25, Z
    42ea:	9f 87       	std	Y+15, r25	; 0x0f
    42ec:	8e 87       	std	Y+14, r24	; 0x0e
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	08 95       	ret

000042f6 <_ZN14SoftwareSerialC1Ehhb>:
    42f6:	1f 93       	push	r17
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	ec 01       	movw	r28, r24
    42fe:	16 2f       	mov	r17, r22
    4300:	1b 82       	std	Y+3, r1	; 0x03
    4302:	1a 82       	std	Y+2, r1	; 0x02
    4304:	88 ee       	ldi	r24, 0xE8	; 232
    4306:	93 e0       	ldi	r25, 0x03	; 3
    4308:	a0 e0       	ldi	r26, 0x00	; 0
    430a:	b0 e0       	ldi	r27, 0x00	; 0
    430c:	8c 83       	std	Y+4, r24	; 0x04
    430e:	9d 83       	std	Y+5, r25	; 0x05
    4310:	ae 83       	std	Y+6, r26	; 0x06
    4312:	bf 83       	std	Y+7, r27	; 0x07
    4314:	8d e8       	ldi	r24, 0x8D	; 141
    4316:	91 e0       	ldi	r25, 0x01	; 1
    4318:	99 83       	std	Y+1, r25	; 0x01
    431a:	88 83       	st	Y, r24
    431c:	1f 8a       	std	Y+23, r1	; 0x17
    431e:	1e 8a       	std	Y+22, r1	; 0x16
    4320:	19 8e       	std	Y+25, r1	; 0x19
    4322:	18 8e       	std	Y+24, r1	; 0x18
    4324:	1b 8e       	std	Y+27, r1	; 0x1b
    4326:	1a 8e       	std	Y+26, r1	; 0x1a
    4328:	1d 8e       	std	Y+29, r1	; 0x1d
    432a:	1c 8e       	std	Y+28, r1	; 0x1c
    432c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    432e:	8e 7f       	andi	r24, 0xFE	; 254
    4330:	20 fb       	bst	r18, 0
    4332:	81 f9       	bld	r24, 1
    4334:	8e 8f       	std	Y+30, r24	; 0x1e
    4336:	64 2f       	mov	r22, r20
    4338:	ce 01       	movw	r24, r28
    433a:	0e 94 29 21 	call	0x4252	; 0x4252 <_ZN14SoftwareSerial5setTXEh>
    433e:	61 2f       	mov	r22, r17
    4340:	ce 01       	movw	r24, r28
    4342:	df 91       	pop	r29
    4344:	cf 91       	pop	r28
    4346:	1f 91       	pop	r17
    4348:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <_ZN14SoftwareSerial5setRXEh>

0000434c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    434c:	cf 93       	push	r28
    434e:	df 93       	push	r29
    4350:	ec 01       	movw	r28, r24
    4352:	9a 01       	movw	r18, r20
    4354:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4356:	1b 8e       	std	Y+27, r1	; 0x1b
    4358:	1a 8e       	std	Y+26, r1	; 0x1a
    435a:	19 8e       	std	Y+25, r1	; 0x19
    435c:	18 8e       	std	Y+24, r1	; 0x18
    435e:	1f 8a       	std	Y+23, r1	; 0x17
    4360:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	79 e0       	ldi	r23, 0x09	; 9
    4366:	8d e3       	ldi	r24, 0x3D	; 61
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__divmodsi4>
    436e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4370:	24 30       	cpi	r18, 0x04	; 4
    4372:	31 05       	cpc	r19, r1
    4374:	18 f0       	brcs	.+6      	; 0x437c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    4376:	c9 01       	movw	r24, r18
    4378:	03 97       	sbiw	r24, 0x03	; 3
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4380:	9d 8f       	std	Y+29, r25	; 0x1d
    4382:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4384:	6c 85       	ldd	r22, Y+12	; 0x0c
    4386:	66 31       	cpi	r22, 0x16	; 22
    4388:	08 f0       	brcs	.+2      	; 0x438c <_ZN14SoftwareSerial5beginEl+0x40>
    438a:	69 c0       	rjmp	.+210    	; 0x445e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    438c:	c9 01       	movw	r24, r18
    438e:	96 95       	lsr	r25
    4390:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4392:	84 31       	cpi	r24, 0x14	; 20
    4394:	91 05       	cpc	r25, r1
    4396:	10 f0       	brcs	.+4      	; 0x439c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    4398:	43 97       	sbiw	r24, 0x13	; 19
    439a:	02 c0       	rjmp	.+4      	; 0x43a0 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    439c:	81 e0       	ldi	r24, 0x01	; 1
    439e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    43a0:	9f 8b       	std	Y+23, r25	; 0x17
    43a2:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    43a4:	36 97       	sbiw	r30, 0x06	; 6
    43a6:	18 f0       	brcs	.+6      	; 0x43ae <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    43a8:	c9 01       	movw	r24, r18
    43aa:	05 97       	sbiw	r24, 0x05	; 5
    43ac:	02 c0       	rjmp	.+4      	; 0x43b2 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    43b2:	99 8f       	std	Y+25, r25	; 0x19
    43b4:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    43b6:	c9 01       	movw	r24, r18
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	28 0f       	add	r18, r24
    43be:	39 1f       	adc	r19, r25
    43c0:	36 95       	lsr	r19
    43c2:	27 95       	ror	r18
    43c4:	36 95       	lsr	r19
    43c6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    43c8:	2d 30       	cpi	r18, 0x0D	; 13
    43ca:	31 05       	cpc	r19, r1
    43cc:	18 f0       	brcs	.+6      	; 0x43d4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    43ce:	2c 50       	subi	r18, 0x0C	; 12
    43d0:	31 09       	sbc	r19, r1
    43d2:	02 c0       	rjmp	.+4      	; 0x43d8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    43d4:	21 e0       	ldi	r18, 0x01	; 1
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    43d8:	3b 8f       	std	Y+27, r19	; 0x1b
    43da:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    43dc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    43e0:	68 30       	cpi	r22, 0x08	; 8
    43e2:	50 f0       	brcs	.+20     	; 0x43f8 <_ZN14SoftwareSerial5beginEl+0xac>
    43e4:	21 e0       	ldi	r18, 0x01	; 1
    43e6:	6e 30       	cpi	r22, 0x0E	; 14
    43e8:	08 f4       	brcc	.+2      	; 0x43ec <_ZN14SoftwareSerial5beginEl+0xa0>
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <_ZN14SoftwareSerial5beginEl+0xa6>
    43f0:	88 0f       	add	r24, r24
    43f2:	2a 95       	dec	r18
    43f4:	ea f7       	brpl	.-6      	; 0x43f0 <_ZN14SoftwareSerial5beginEl+0xa4>
    43f6:	01 c0       	rjmp	.+2      	; 0x43fa <_ZN14SoftwareSerial5beginEl+0xae>
    43f8:	84 e0       	ldi	r24, 0x04	; 4
    43fa:	89 2b       	or	r24, r25
    43fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4400:	9c 85       	ldd	r25, Y+12	; 0x0c
    4402:	98 30       	cpi	r25, 0x08	; 8
    4404:	38 f0       	brcs	.+14     	; 0x4414 <_ZN14SoftwareSerial5beginEl+0xc8>
    4406:	9e 30       	cpi	r25, 0x0E	; 14
    4408:	40 f0       	brcs	.+16     	; 0x441a <_ZN14SoftwareSerial5beginEl+0xce>
    440a:	96 31       	cpi	r25, 0x16	; 22
    440c:	48 f0       	brcs	.+18     	; 0x4420 <_ZN14SoftwareSerial5beginEl+0xd4>
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	08 c0       	rjmp	.+16     	; 0x4424 <_ZN14SoftwareSerial5beginEl+0xd8>
    4414:	2d e6       	ldi	r18, 0x6D	; 109
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	05 c0       	rjmp	.+10     	; 0x4424 <_ZN14SoftwareSerial5beginEl+0xd8>
    441a:	2b e6       	ldi	r18, 0x6B	; 107
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	02 c0       	rjmp	.+4      	; 0x4424 <_ZN14SoftwareSerial5beginEl+0xd8>
    4420:	2c e6       	ldi	r18, 0x6C	; 108
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	3c 8b       	std	Y+20, r19	; 0x14
    4426:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4428:	98 30       	cpi	r25, 0x08	; 8
    442a:	30 f4       	brcc	.+12     	; 0x4438 <_ZN14SoftwareSerial5beginEl+0xec>
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	01 c0       	rjmp	.+2      	; 0x4432 <_ZN14SoftwareSerial5beginEl+0xe6>
    4430:	88 0f       	add	r24, r24
    4432:	9a 95       	dec	r25
    4434:	ea f7       	brpl	.-6      	; 0x4430 <_ZN14SoftwareSerial5beginEl+0xe4>
    4436:	0e c0       	rjmp	.+28     	; 0x4454 <_ZN14SoftwareSerial5beginEl+0x108>
    4438:	29 2f       	mov	r18, r25
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	9e 30       	cpi	r25, 0x0E	; 14
    443e:	18 f4       	brcc	.+6      	; 0x4446 <_ZN14SoftwareSerial5beginEl+0xfa>
    4440:	28 50       	subi	r18, 0x08	; 8
    4442:	31 09       	sbc	r19, r1
    4444:	02 c0       	rjmp	.+4      	; 0x444a <_ZN14SoftwareSerial5beginEl+0xfe>
    4446:	2e 50       	subi	r18, 0x0E	; 14
    4448:	31 09       	sbc	r19, r1
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	01 c0       	rjmp	.+2      	; 0x4450 <_ZN14SoftwareSerial5beginEl+0x104>
    444e:	88 0f       	add	r24, r24
    4450:	2a 95       	dec	r18
    4452:	ea f7       	brpl	.-6      	; 0x444e <_ZN14SoftwareSerial5beginEl+0x102>
    4454:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4458:	9d 8d       	ldd	r25, Y+29	; 0x1d
    445a:	01 97       	sbiw	r24, 0x01	; 1
    445c:	f1 f7       	brne	.-4      	; 0x445a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    445e:	ce 01       	movw	r24, r28
}
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4464:	0c 94 86 20 	jmp	0x410c	; 0x410c <_ZN14SoftwareSerial6listenEv>

00004468 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4468:	08 95       	ret

0000446a <__udivmodqi4>:
    446a:	99 1b       	sub	r25, r25
    446c:	79 e0       	ldi	r23, 0x09	; 9
    446e:	04 c0       	rjmp	.+8      	; 0x4478 <__udivmodqi4_ep>

00004470 <__udivmodqi4_loop>:
    4470:	99 1f       	adc	r25, r25
    4472:	96 17       	cp	r25, r22
    4474:	08 f0       	brcs	.+2      	; 0x4478 <__udivmodqi4_ep>
    4476:	96 1b       	sub	r25, r22

00004478 <__udivmodqi4_ep>:
    4478:	88 1f       	adc	r24, r24
    447a:	7a 95       	dec	r23
    447c:	c9 f7       	brne	.-14     	; 0x4470 <__udivmodqi4_loop>
    447e:	80 95       	com	r24
    4480:	08 95       	ret

00004482 <__udivmodhi4>:
    4482:	aa 1b       	sub	r26, r26
    4484:	bb 1b       	sub	r27, r27
    4486:	51 e1       	ldi	r21, 0x11	; 17
    4488:	07 c0       	rjmp	.+14     	; 0x4498 <__udivmodhi4_ep>

0000448a <__udivmodhi4_loop>:
    448a:	aa 1f       	adc	r26, r26
    448c:	bb 1f       	adc	r27, r27
    448e:	a6 17       	cp	r26, r22
    4490:	b7 07       	cpc	r27, r23
    4492:	10 f0       	brcs	.+4      	; 0x4498 <__udivmodhi4_ep>
    4494:	a6 1b       	sub	r26, r22
    4496:	b7 0b       	sbc	r27, r23

00004498 <__udivmodhi4_ep>:
    4498:	88 1f       	adc	r24, r24
    449a:	99 1f       	adc	r25, r25
    449c:	5a 95       	dec	r21
    449e:	a9 f7       	brne	.-22     	; 0x448a <__udivmodhi4_loop>
    44a0:	80 95       	com	r24
    44a2:	90 95       	com	r25
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	08 95       	ret

000044aa <__divmodhi4>:
    44aa:	97 fb       	bst	r25, 7
    44ac:	07 2e       	mov	r0, r23
    44ae:	16 f4       	brtc	.+4      	; 0x44b4 <__divmodhi4+0xa>
    44b0:	00 94       	com	r0
    44b2:	07 d0       	rcall	.+14     	; 0x44c2 <__divmodhi4_neg1>
    44b4:	77 fd       	sbrc	r23, 7
    44b6:	09 d0       	rcall	.+18     	; 0x44ca <__divmodhi4_neg2>
    44b8:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodhi4>
    44bc:	07 fc       	sbrc	r0, 7
    44be:	05 d0       	rcall	.+10     	; 0x44ca <__divmodhi4_neg2>
    44c0:	3e f4       	brtc	.+14     	; 0x44d0 <__divmodhi4_exit>

000044c2 <__divmodhi4_neg1>:
    44c2:	90 95       	com	r25
    44c4:	81 95       	neg	r24
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	08 95       	ret

000044ca <__divmodhi4_neg2>:
    44ca:	70 95       	com	r23
    44cc:	61 95       	neg	r22
    44ce:	7f 4f       	sbci	r23, 0xFF	; 255

000044d0 <__divmodhi4_exit>:
    44d0:	08 95       	ret

000044d2 <__udivmodsi4>:
    44d2:	a1 e2       	ldi	r26, 0x21	; 33
    44d4:	1a 2e       	mov	r1, r26
    44d6:	aa 1b       	sub	r26, r26
    44d8:	bb 1b       	sub	r27, r27
    44da:	fd 01       	movw	r30, r26
    44dc:	0d c0       	rjmp	.+26     	; 0x44f8 <__udivmodsi4_ep>

000044de <__udivmodsi4_loop>:
    44de:	aa 1f       	adc	r26, r26
    44e0:	bb 1f       	adc	r27, r27
    44e2:	ee 1f       	adc	r30, r30
    44e4:	ff 1f       	adc	r31, r31
    44e6:	a2 17       	cp	r26, r18
    44e8:	b3 07       	cpc	r27, r19
    44ea:	e4 07       	cpc	r30, r20
    44ec:	f5 07       	cpc	r31, r21
    44ee:	20 f0       	brcs	.+8      	; 0x44f8 <__udivmodsi4_ep>
    44f0:	a2 1b       	sub	r26, r18
    44f2:	b3 0b       	sbc	r27, r19
    44f4:	e4 0b       	sbc	r30, r20
    44f6:	f5 0b       	sbc	r31, r21

000044f8 <__udivmodsi4_ep>:
    44f8:	66 1f       	adc	r22, r22
    44fa:	77 1f       	adc	r23, r23
    44fc:	88 1f       	adc	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	1a 94       	dec	r1
    4502:	69 f7       	brne	.-38     	; 0x44de <__udivmodsi4_loop>
    4504:	60 95       	com	r22
    4506:	70 95       	com	r23
    4508:	80 95       	com	r24
    450a:	90 95       	com	r25
    450c:	9b 01       	movw	r18, r22
    450e:	ac 01       	movw	r20, r24
    4510:	bd 01       	movw	r22, r26
    4512:	cf 01       	movw	r24, r30
    4514:	08 95       	ret

00004516 <__divmodsi4>:
    4516:	05 2e       	mov	r0, r21
    4518:	97 fb       	bst	r25, 7
    451a:	1e f4       	brtc	.+6      	; 0x4522 <__divmodsi4+0xc>
    451c:	00 94       	com	r0
    451e:	0e 94 a2 22 	call	0x4544	; 0x4544 <__negsi2>
    4522:	57 fd       	sbrc	r21, 7
    4524:	07 d0       	rcall	.+14     	; 0x4534 <__divmodsi4_neg2>
    4526:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__udivmodsi4>
    452a:	07 fc       	sbrc	r0, 7
    452c:	03 d0       	rcall	.+6      	; 0x4534 <__divmodsi4_neg2>
    452e:	4e f4       	brtc	.+18     	; 0x4542 <__divmodsi4_exit>
    4530:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__negsi2>

00004534 <__divmodsi4_neg2>:
    4534:	50 95       	com	r21
    4536:	40 95       	com	r20
    4538:	30 95       	com	r19
    453a:	21 95       	neg	r18
    453c:	3f 4f       	sbci	r19, 0xFF	; 255
    453e:	4f 4f       	sbci	r20, 0xFF	; 255
    4540:	5f 4f       	sbci	r21, 0xFF	; 255

00004542 <__divmodsi4_exit>:
    4542:	08 95       	ret

00004544 <__negsi2>:
    4544:	90 95       	com	r25
    4546:	80 95       	com	r24
    4548:	70 95       	com	r23
    454a:	61 95       	neg	r22
    454c:	7f 4f       	sbci	r23, 0xFF	; 255
    454e:	8f 4f       	sbci	r24, 0xFF	; 255
    4550:	9f 4f       	sbci	r25, 0xFF	; 255
    4552:	08 95       	ret

00004554 <__tablejump2__>:
    4554:	ee 0f       	add	r30, r30
    4556:	ff 1f       	adc	r31, r31
    4558:	05 90       	lpm	r0, Z+
    455a:	f4 91       	lpm	r31, Z
    455c:	e0 2d       	mov	r30, r0
    455e:	09 94       	ijmp

00004560 <malloc>:
    4560:	0f 93       	push	r16
    4562:	1f 93       	push	r17
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	82 30       	cpi	r24, 0x02	; 2
    456a:	91 05       	cpc	r25, r1
    456c:	10 f4       	brcc	.+4      	; 0x4572 <malloc+0x12>
    456e:	82 e0       	ldi	r24, 0x02	; 2
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    4576:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	a0 e0       	ldi	r26, 0x00	; 0
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	30 97       	sbiw	r30, 0x00	; 0
    4584:	19 f1       	breq	.+70     	; 0x45cc <malloc+0x6c>
    4586:	40 81       	ld	r20, Z
    4588:	51 81       	ldd	r21, Z+1	; 0x01
    458a:	02 81       	ldd	r16, Z+2	; 0x02
    458c:	13 81       	ldd	r17, Z+3	; 0x03
    458e:	48 17       	cp	r20, r24
    4590:	59 07       	cpc	r21, r25
    4592:	c8 f0       	brcs	.+50     	; 0x45c6 <malloc+0x66>
    4594:	84 17       	cp	r24, r20
    4596:	95 07       	cpc	r25, r21
    4598:	69 f4       	brne	.+26     	; 0x45b4 <malloc+0x54>
    459a:	10 97       	sbiw	r26, 0x00	; 0
    459c:	31 f0       	breq	.+12     	; 0x45aa <malloc+0x4a>
    459e:	12 96       	adiw	r26, 0x02	; 2
    45a0:	0c 93       	st	X, r16
    45a2:	12 97       	sbiw	r26, 0x02	; 2
    45a4:	13 96       	adiw	r26, 0x03	; 3
    45a6:	1c 93       	st	X, r17
    45a8:	27 c0       	rjmp	.+78     	; 0x45f8 <malloc+0x98>
    45aa:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <__flp>
    45ae:	10 93 8b 04 	sts	0x048B, r17	; 0x80048b <__flp+0x1>
    45b2:	22 c0       	rjmp	.+68     	; 0x45f8 <malloc+0x98>
    45b4:	21 15       	cp	r18, r1
    45b6:	31 05       	cpc	r19, r1
    45b8:	19 f0       	breq	.+6      	; 0x45c0 <malloc+0x60>
    45ba:	42 17       	cp	r20, r18
    45bc:	53 07       	cpc	r21, r19
    45be:	18 f4       	brcc	.+6      	; 0x45c6 <malloc+0x66>
    45c0:	9a 01       	movw	r18, r20
    45c2:	bd 01       	movw	r22, r26
    45c4:	ef 01       	movw	r28, r30
    45c6:	df 01       	movw	r26, r30
    45c8:	f8 01       	movw	r30, r16
    45ca:	db cf       	rjmp	.-74     	; 0x4582 <malloc+0x22>
    45cc:	21 15       	cp	r18, r1
    45ce:	31 05       	cpc	r19, r1
    45d0:	f9 f0       	breq	.+62     	; 0x4610 <malloc+0xb0>
    45d2:	28 1b       	sub	r18, r24
    45d4:	39 0b       	sbc	r19, r25
    45d6:	24 30       	cpi	r18, 0x04	; 4
    45d8:	31 05       	cpc	r19, r1
    45da:	80 f4       	brcc	.+32     	; 0x45fc <malloc+0x9c>
    45dc:	8a 81       	ldd	r24, Y+2	; 0x02
    45de:	9b 81       	ldd	r25, Y+3	; 0x03
    45e0:	61 15       	cp	r22, r1
    45e2:	71 05       	cpc	r23, r1
    45e4:	21 f0       	breq	.+8      	; 0x45ee <malloc+0x8e>
    45e6:	fb 01       	movw	r30, r22
    45e8:	93 83       	std	Z+3, r25	; 0x03
    45ea:	82 83       	std	Z+2, r24	; 0x02
    45ec:	04 c0       	rjmp	.+8      	; 0x45f6 <malloc+0x96>
    45ee:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <__flp+0x1>
    45f2:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <__flp>
    45f6:	fe 01       	movw	r30, r28
    45f8:	32 96       	adiw	r30, 0x02	; 2
    45fa:	44 c0       	rjmp	.+136    	; 0x4684 <malloc+0x124>
    45fc:	fe 01       	movw	r30, r28
    45fe:	e2 0f       	add	r30, r18
    4600:	f3 1f       	adc	r31, r19
    4602:	81 93       	st	Z+, r24
    4604:	91 93       	st	Z+, r25
    4606:	22 50       	subi	r18, 0x02	; 2
    4608:	31 09       	sbc	r19, r1
    460a:	39 83       	std	Y+1, r19	; 0x01
    460c:	28 83       	st	Y, r18
    460e:	3a c0       	rjmp	.+116    	; 0x4684 <malloc+0x124>
    4610:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    4614:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    4618:	23 2b       	or	r18, r19
    461a:	41 f4       	brne	.+16     	; 0x462c <malloc+0xcc>
    461c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4620:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4624:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <__brkval+0x1>
    4628:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <__brkval>
    462c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4630:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4634:	21 15       	cp	r18, r1
    4636:	31 05       	cpc	r19, r1
    4638:	41 f4       	brne	.+16     	; 0x464a <malloc+0xea>
    463a:	2d b7       	in	r18, 0x3d	; 61
    463c:	3e b7       	in	r19, 0x3e	; 62
    463e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4642:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4646:	24 1b       	sub	r18, r20
    4648:	35 0b       	sbc	r19, r21
    464a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <__brkval>
    464e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <__brkval+0x1>
    4652:	e2 17       	cp	r30, r18
    4654:	f3 07       	cpc	r31, r19
    4656:	a0 f4       	brcc	.+40     	; 0x4680 <malloc+0x120>
    4658:	2e 1b       	sub	r18, r30
    465a:	3f 0b       	sbc	r19, r31
    465c:	28 17       	cp	r18, r24
    465e:	39 07       	cpc	r19, r25
    4660:	78 f0       	brcs	.+30     	; 0x4680 <malloc+0x120>
    4662:	ac 01       	movw	r20, r24
    4664:	4e 5f       	subi	r20, 0xFE	; 254
    4666:	5f 4f       	sbci	r21, 0xFF	; 255
    4668:	24 17       	cp	r18, r20
    466a:	35 07       	cpc	r19, r21
    466c:	48 f0       	brcs	.+18     	; 0x4680 <malloc+0x120>
    466e:	4e 0f       	add	r20, r30
    4670:	5f 1f       	adc	r21, r31
    4672:	50 93 89 04 	sts	0x0489, r21	; 0x800489 <__brkval+0x1>
    4676:	40 93 88 04 	sts	0x0488, r20	; 0x800488 <__brkval>
    467a:	81 93       	st	Z+, r24
    467c:	91 93       	st	Z+, r25
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <malloc+0x124>
    4680:	e0 e0       	ldi	r30, 0x00	; 0
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	cf 01       	movw	r24, r30
    4686:	df 91       	pop	r29
    4688:	cf 91       	pop	r28
    468a:	1f 91       	pop	r17
    468c:	0f 91       	pop	r16
    468e:	08 95       	ret

00004690 <free>:
    4690:	cf 93       	push	r28
    4692:	df 93       	push	r29
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	09 f4       	brne	.+2      	; 0x469a <free+0xa>
    4698:	81 c0       	rjmp	.+258    	; 0x479c <free+0x10c>
    469a:	fc 01       	movw	r30, r24
    469c:	32 97       	sbiw	r30, 0x02	; 2
    469e:	13 82       	std	Z+3, r1	; 0x03
    46a0:	12 82       	std	Z+2, r1	; 0x02
    46a2:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    46a6:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    46aa:	10 97       	sbiw	r26, 0x00	; 0
    46ac:	81 f4       	brne	.+32     	; 0x46ce <free+0x3e>
    46ae:	20 81       	ld	r18, Z
    46b0:	31 81       	ldd	r19, Z+1	; 0x01
    46b2:	82 0f       	add	r24, r18
    46b4:	93 1f       	adc	r25, r19
    46b6:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    46ba:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    46be:	28 17       	cp	r18, r24
    46c0:	39 07       	cpc	r19, r25
    46c2:	51 f5       	brne	.+84     	; 0x4718 <free+0x88>
    46c4:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    46c8:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    46cc:	67 c0       	rjmp	.+206    	; 0x479c <free+0x10c>
    46ce:	ed 01       	movw	r28, r26
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	ce 17       	cp	r28, r30
    46d6:	df 07       	cpc	r29, r31
    46d8:	40 f4       	brcc	.+16     	; 0x46ea <free+0x5a>
    46da:	4a 81       	ldd	r20, Y+2	; 0x02
    46dc:	5b 81       	ldd	r21, Y+3	; 0x03
    46de:	9e 01       	movw	r18, r28
    46e0:	41 15       	cp	r20, r1
    46e2:	51 05       	cpc	r21, r1
    46e4:	f1 f0       	breq	.+60     	; 0x4722 <free+0x92>
    46e6:	ea 01       	movw	r28, r20
    46e8:	f5 cf       	rjmp	.-22     	; 0x46d4 <free+0x44>
    46ea:	d3 83       	std	Z+3, r29	; 0x03
    46ec:	c2 83       	std	Z+2, r28	; 0x02
    46ee:	40 81       	ld	r20, Z
    46f0:	51 81       	ldd	r21, Z+1	; 0x01
    46f2:	84 0f       	add	r24, r20
    46f4:	95 1f       	adc	r25, r21
    46f6:	c8 17       	cp	r28, r24
    46f8:	d9 07       	cpc	r29, r25
    46fa:	59 f4       	brne	.+22     	; 0x4712 <free+0x82>
    46fc:	88 81       	ld	r24, Y
    46fe:	99 81       	ldd	r25, Y+1	; 0x01
    4700:	84 0f       	add	r24, r20
    4702:	95 1f       	adc	r25, r21
    4704:	02 96       	adiw	r24, 0x02	; 2
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
    470a:	8a 81       	ldd	r24, Y+2	; 0x02
    470c:	9b 81       	ldd	r25, Y+3	; 0x03
    470e:	93 83       	std	Z+3, r25	; 0x03
    4710:	82 83       	std	Z+2, r24	; 0x02
    4712:	21 15       	cp	r18, r1
    4714:	31 05       	cpc	r19, r1
    4716:	29 f4       	brne	.+10     	; 0x4722 <free+0x92>
    4718:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    471c:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    4720:	3d c0       	rjmp	.+122    	; 0x479c <free+0x10c>
    4722:	e9 01       	movw	r28, r18
    4724:	fb 83       	std	Y+3, r31	; 0x03
    4726:	ea 83       	std	Y+2, r30	; 0x02
    4728:	49 91       	ld	r20, Y+
    472a:	59 91       	ld	r21, Y+
    472c:	c4 0f       	add	r28, r20
    472e:	d5 1f       	adc	r29, r21
    4730:	ec 17       	cp	r30, r28
    4732:	fd 07       	cpc	r31, r29
    4734:	61 f4       	brne	.+24     	; 0x474e <free+0xbe>
    4736:	80 81       	ld	r24, Z
    4738:	91 81       	ldd	r25, Z+1	; 0x01
    473a:	84 0f       	add	r24, r20
    473c:	95 1f       	adc	r25, r21
    473e:	02 96       	adiw	r24, 0x02	; 2
    4740:	e9 01       	movw	r28, r18
    4742:	99 83       	std	Y+1, r25	; 0x01
    4744:	88 83       	st	Y, r24
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	93 81       	ldd	r25, Z+3	; 0x03
    474a:	9b 83       	std	Y+3, r25	; 0x03
    474c:	8a 83       	std	Y+2, r24	; 0x02
    474e:	e0 e0       	ldi	r30, 0x00	; 0
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	12 96       	adiw	r26, 0x02	; 2
    4754:	8d 91       	ld	r24, X+
    4756:	9c 91       	ld	r25, X
    4758:	13 97       	sbiw	r26, 0x03	; 3
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	19 f0       	breq	.+6      	; 0x4764 <free+0xd4>
    475e:	fd 01       	movw	r30, r26
    4760:	dc 01       	movw	r26, r24
    4762:	f7 cf       	rjmp	.-18     	; 0x4752 <free+0xc2>
    4764:	8d 91       	ld	r24, X+
    4766:	9c 91       	ld	r25, X
    4768:	11 97       	sbiw	r26, 0x01	; 1
    476a:	9d 01       	movw	r18, r26
    476c:	2e 5f       	subi	r18, 0xFE	; 254
    476e:	3f 4f       	sbci	r19, 0xFF	; 255
    4770:	82 0f       	add	r24, r18
    4772:	93 1f       	adc	r25, r19
    4774:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    4778:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    477c:	28 17       	cp	r18, r24
    477e:	39 07       	cpc	r19, r25
    4780:	69 f4       	brne	.+26     	; 0x479c <free+0x10c>
    4782:	30 97       	sbiw	r30, 0x00	; 0
    4784:	29 f4       	brne	.+10     	; 0x4790 <free+0x100>
    4786:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <__flp+0x1>
    478a:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <__flp>
    478e:	02 c0       	rjmp	.+4      	; 0x4794 <free+0x104>
    4790:	13 82       	std	Z+3, r1	; 0x03
    4792:	12 82       	std	Z+2, r1	; 0x02
    4794:	b0 93 89 04 	sts	0x0489, r27	; 0x800489 <__brkval+0x1>
    4798:	a0 93 88 04 	sts	0x0488, r26	; 0x800488 <__brkval>
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	08 95       	ret

000047a2 <realloc>:
    47a2:	a0 e0       	ldi	r26, 0x00	; 0
    47a4:	b0 e0       	ldi	r27, 0x00	; 0
    47a6:	e7 ed       	ldi	r30, 0xD7	; 215
    47a8:	f3 e2       	ldi	r31, 0x23	; 35
    47aa:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__prologue_saves__+0x8>
    47ae:	ec 01       	movw	r28, r24
    47b0:	00 97       	sbiw	r24, 0x00	; 0
    47b2:	21 f4       	brne	.+8      	; 0x47bc <realloc+0x1a>
    47b4:	cb 01       	movw	r24, r22
    47b6:	0e 94 b0 22 	call	0x4560	; 0x4560 <malloc>
    47ba:	b4 c0       	rjmp	.+360    	; 0x4924 <realloc+0x182>
    47bc:	fc 01       	movw	r30, r24
    47be:	e6 0f       	add	r30, r22
    47c0:	f7 1f       	adc	r31, r23
    47c2:	9c 01       	movw	r18, r24
    47c4:	22 50       	subi	r18, 0x02	; 2
    47c6:	31 09       	sbc	r19, r1
    47c8:	e2 17       	cp	r30, r18
    47ca:	f3 07       	cpc	r31, r19
    47cc:	08 f4       	brcc	.+2      	; 0x47d0 <realloc+0x2e>
    47ce:	a8 c0       	rjmp	.+336    	; 0x4920 <realloc+0x17e>
    47d0:	d9 01       	movw	r26, r18
    47d2:	0d 91       	ld	r16, X+
    47d4:	1c 91       	ld	r17, X
    47d6:	11 97       	sbiw	r26, 0x01	; 1
    47d8:	06 17       	cp	r16, r22
    47da:	17 07       	cpc	r17, r23
    47dc:	b0 f0       	brcs	.+44     	; 0x480a <realloc+0x68>
    47de:	05 30       	cpi	r16, 0x05	; 5
    47e0:	11 05       	cpc	r17, r1
    47e2:	08 f4       	brcc	.+2      	; 0x47e6 <realloc+0x44>
    47e4:	9b c0       	rjmp	.+310    	; 0x491c <realloc+0x17a>
    47e6:	c8 01       	movw	r24, r16
    47e8:	04 97       	sbiw	r24, 0x04	; 4
    47ea:	86 17       	cp	r24, r22
    47ec:	97 07       	cpc	r25, r23
    47ee:	08 f4       	brcc	.+2      	; 0x47f2 <realloc+0x50>
    47f0:	95 c0       	rjmp	.+298    	; 0x491c <realloc+0x17a>
    47f2:	02 50       	subi	r16, 0x02	; 2
    47f4:	11 09       	sbc	r17, r1
    47f6:	06 1b       	sub	r16, r22
    47f8:	17 0b       	sbc	r17, r23
    47fa:	01 93       	st	Z+, r16
    47fc:	11 93       	st	Z+, r17
    47fe:	6d 93       	st	X+, r22
    4800:	7c 93       	st	X, r23
    4802:	cf 01       	movw	r24, r30
    4804:	0e 94 48 23 	call	0x4690	; 0x4690 <free>
    4808:	89 c0       	rjmp	.+274    	; 0x491c <realloc+0x17a>
    480a:	5b 01       	movw	r10, r22
    480c:	a0 1a       	sub	r10, r16
    480e:	b1 0a       	sbc	r11, r17
    4810:	4c 01       	movw	r8, r24
    4812:	80 0e       	add	r8, r16
    4814:	91 1e       	adc	r9, r17
    4816:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    481a:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    481e:	61 2c       	mov	r6, r1
    4820:	71 2c       	mov	r7, r1
    4822:	e1 2c       	mov	r14, r1
    4824:	f1 2c       	mov	r15, r1
    4826:	10 97       	sbiw	r26, 0x00	; 0
    4828:	09 f4       	brne	.+2      	; 0x482c <realloc+0x8a>
    482a:	46 c0       	rjmp	.+140    	; 0x48b8 <realloc+0x116>
    482c:	8d 91       	ld	r24, X+
    482e:	9c 91       	ld	r25, X
    4830:	11 97       	sbiw	r26, 0x01	; 1
    4832:	a8 15       	cp	r26, r8
    4834:	b9 05       	cpc	r27, r9
    4836:	b1 f5       	brne	.+108    	; 0x48a4 <realloc+0x102>
    4838:	6c 01       	movw	r12, r24
    483a:	42 e0       	ldi	r20, 0x02	; 2
    483c:	c4 0e       	add	r12, r20
    483e:	d1 1c       	adc	r13, r1
    4840:	ca 14       	cp	r12, r10
    4842:	db 04       	cpc	r13, r11
    4844:	78 f1       	brcs	.+94     	; 0x48a4 <realloc+0x102>
    4846:	4c 01       	movw	r8, r24
    4848:	8a 18       	sub	r8, r10
    484a:	9b 08       	sbc	r9, r11
    484c:	64 01       	movw	r12, r8
    484e:	42 e0       	ldi	r20, 0x02	; 2
    4850:	c4 0e       	add	r12, r20
    4852:	d1 1c       	adc	r13, r1
    4854:	12 96       	adiw	r26, 0x02	; 2
    4856:	bc 90       	ld	r11, X
    4858:	12 97       	sbiw	r26, 0x02	; 2
    485a:	13 96       	adiw	r26, 0x03	; 3
    485c:	ac 91       	ld	r26, X
    485e:	b5 e0       	ldi	r27, 0x05	; 5
    4860:	cb 16       	cp	r12, r27
    4862:	d1 04       	cpc	r13, r1
    4864:	40 f0       	brcs	.+16     	; 0x4876 <realloc+0xd4>
    4866:	b2 82       	std	Z+2, r11	; 0x02
    4868:	a3 83       	std	Z+3, r26	; 0x03
    486a:	91 82       	std	Z+1, r9	; 0x01
    486c:	80 82       	st	Z, r8
    486e:	d9 01       	movw	r26, r18
    4870:	6d 93       	st	X+, r22
    4872:	7c 93       	st	X, r23
    4874:	09 c0       	rjmp	.+18     	; 0x4888 <realloc+0xe6>
    4876:	0e 5f       	subi	r16, 0xFE	; 254
    4878:	1f 4f       	sbci	r17, 0xFF	; 255
    487a:	80 0f       	add	r24, r16
    487c:	91 1f       	adc	r25, r17
    487e:	f9 01       	movw	r30, r18
    4880:	91 83       	std	Z+1, r25	; 0x01
    4882:	80 83       	st	Z, r24
    4884:	eb 2d       	mov	r30, r11
    4886:	fa 2f       	mov	r31, r26
    4888:	e1 14       	cp	r14, r1
    488a:	f1 04       	cpc	r15, r1
    488c:	31 f0       	breq	.+12     	; 0x489a <realloc+0xf8>
    488e:	d7 01       	movw	r26, r14
    4890:	13 96       	adiw	r26, 0x03	; 3
    4892:	fc 93       	st	X, r31
    4894:	ee 93       	st	-X, r30
    4896:	12 97       	sbiw	r26, 0x02	; 2
    4898:	41 c0       	rjmp	.+130    	; 0x491c <realloc+0x17a>
    489a:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    489e:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    48a2:	3c c0       	rjmp	.+120    	; 0x491c <realloc+0x17a>
    48a4:	68 16       	cp	r6, r24
    48a6:	79 06       	cpc	r7, r25
    48a8:	08 f4       	brcc	.+2      	; 0x48ac <realloc+0x10a>
    48aa:	3c 01       	movw	r6, r24
    48ac:	7d 01       	movw	r14, r26
    48ae:	12 96       	adiw	r26, 0x02	; 2
    48b0:	0d 90       	ld	r0, X+
    48b2:	bc 91       	ld	r27, X
    48b4:	a0 2d       	mov	r26, r0
    48b6:	b7 cf       	rjmp	.-146    	; 0x4826 <realloc+0x84>
    48b8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    48bc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    48c0:	88 16       	cp	r8, r24
    48c2:	99 06       	cpc	r9, r25
    48c4:	e1 f4       	brne	.+56     	; 0x48fe <realloc+0x15c>
    48c6:	66 16       	cp	r6, r22
    48c8:	77 06       	cpc	r7, r23
    48ca:	c8 f4       	brcc	.+50     	; 0x48fe <realloc+0x15c>
    48cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    48d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    48d4:	00 97       	sbiw	r24, 0x00	; 0
    48d6:	41 f4       	brne	.+16     	; 0x48e8 <realloc+0x146>
    48d8:	8d b7       	in	r24, 0x3d	; 61
    48da:	9e b7       	in	r25, 0x3e	; 62
    48dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    48e0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    48e4:	84 1b       	sub	r24, r20
    48e6:	95 0b       	sbc	r25, r21
    48e8:	e8 17       	cp	r30, r24
    48ea:	f9 07       	cpc	r31, r25
    48ec:	c8 f4       	brcc	.+50     	; 0x4920 <realloc+0x17e>
    48ee:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    48f2:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    48f6:	f9 01       	movw	r30, r18
    48f8:	71 83       	std	Z+1, r23	; 0x01
    48fa:	60 83       	st	Z, r22
    48fc:	0f c0       	rjmp	.+30     	; 0x491c <realloc+0x17a>
    48fe:	cb 01       	movw	r24, r22
    4900:	0e 94 b0 22 	call	0x4560	; 0x4560 <malloc>
    4904:	7c 01       	movw	r14, r24
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	59 f0       	breq	.+22     	; 0x4920 <realloc+0x17e>
    490a:	a8 01       	movw	r20, r16
    490c:	be 01       	movw	r22, r28
    490e:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <memcpy>
    4912:	ce 01       	movw	r24, r28
    4914:	0e 94 48 23 	call	0x4690	; 0x4690 <free>
    4918:	c7 01       	movw	r24, r14
    491a:	04 c0       	rjmp	.+8      	; 0x4924 <realloc+0x182>
    491c:	ce 01       	movw	r24, r28
    491e:	02 c0       	rjmp	.+4      	; 0x4924 <realloc+0x182>
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	cd b7       	in	r28, 0x3d	; 61
    4926:	de b7       	in	r29, 0x3e	; 62
    4928:	ee e0       	ldi	r30, 0x0E	; 14
    492a:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <__epilogue_restores__+0x8>

0000492e <atoi>:
    492e:	fc 01       	movw	r30, r24
    4930:	88 27       	eor	r24, r24
    4932:	99 27       	eor	r25, r25
    4934:	e8 94       	clt
    4936:	21 91       	ld	r18, Z+
    4938:	20 32       	cpi	r18, 0x20	; 32
    493a:	e9 f3       	breq	.-6      	; 0x4936 <atoi+0x8>
    493c:	29 30       	cpi	r18, 0x09	; 9
    493e:	10 f0       	brcs	.+4      	; 0x4944 <atoi+0x16>
    4940:	2e 30       	cpi	r18, 0x0E	; 14
    4942:	c8 f3       	brcs	.-14     	; 0x4936 <atoi+0x8>
    4944:	2b 32       	cpi	r18, 0x2B	; 43
    4946:	41 f0       	breq	.+16     	; 0x4958 <atoi+0x2a>
    4948:	2d 32       	cpi	r18, 0x2D	; 45
    494a:	39 f4       	brne	.+14     	; 0x495a <atoi+0x2c>
    494c:	68 94       	set
    494e:	04 c0       	rjmp	.+8      	; 0x4958 <atoi+0x2a>
    4950:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <__mulhi_const_10>
    4954:	82 0f       	add	r24, r18
    4956:	91 1d       	adc	r25, r1
    4958:	21 91       	ld	r18, Z+
    495a:	20 53       	subi	r18, 0x30	; 48
    495c:	2a 30       	cpi	r18, 0x0A	; 10
    495e:	c0 f3       	brcs	.-16     	; 0x4950 <atoi+0x22>
    4960:	1e f4       	brtc	.+6      	; 0x4968 <atoi+0x3a>
    4962:	90 95       	com	r25
    4964:	81 95       	neg	r24
    4966:	9f 4f       	sbci	r25, 0xFF	; 255
    4968:	08 95       	ret

0000496a <strcmp_P>:
    496a:	fb 01       	movw	r30, r22
    496c:	dc 01       	movw	r26, r24
    496e:	8d 91       	ld	r24, X+
    4970:	05 90       	lpm	r0, Z+
    4972:	80 19       	sub	r24, r0
    4974:	01 10       	cpse	r0, r1
    4976:	d9 f3       	breq	.-10     	; 0x496e <strcmp_P+0x4>
    4978:	99 0b       	sbc	r25, r25
    497a:	08 95       	ret

0000497c <__strlen_P>:
    497c:	fc 01       	movw	r30, r24
    497e:	05 90       	lpm	r0, Z+
    4980:	00 20       	and	r0, r0
    4982:	e9 f7       	brne	.-6      	; 0x497e <__strlen_P+0x2>
    4984:	80 95       	com	r24
    4986:	90 95       	com	r25
    4988:	8e 0f       	add	r24, r30
    498a:	9f 1f       	adc	r25, r31
    498c:	08 95       	ret

0000498e <strstr_P>:
    498e:	fb 01       	movw	r30, r22
    4990:	55 91       	lpm	r21, Z+
    4992:	55 23       	and	r21, r21
    4994:	a9 f0       	breq	.+42     	; 0x49c0 <strstr_P+0x32>
    4996:	bf 01       	movw	r22, r30
    4998:	dc 01       	movw	r26, r24
    499a:	4d 91       	ld	r20, X+
    499c:	45 17       	cp	r20, r21
    499e:	41 11       	cpse	r20, r1
    49a0:	e1 f7       	brne	.-8      	; 0x499a <strstr_P+0xc>
    49a2:	59 f4       	brne	.+22     	; 0x49ba <strstr_P+0x2c>
    49a4:	cd 01       	movw	r24, r26
    49a6:	05 90       	lpm	r0, Z+
    49a8:	00 20       	and	r0, r0
    49aa:	49 f0       	breq	.+18     	; 0x49be <strstr_P+0x30>
    49ac:	4d 91       	ld	r20, X+
    49ae:	40 15       	cp	r20, r0
    49b0:	41 11       	cpse	r20, r1
    49b2:	c9 f3       	breq	.-14     	; 0x49a6 <strstr_P+0x18>
    49b4:	fb 01       	movw	r30, r22
    49b6:	41 11       	cpse	r20, r1
    49b8:	ef cf       	rjmp	.-34     	; 0x4998 <strstr_P+0xa>
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	01 97       	sbiw	r24, 0x01	; 1
    49c0:	08 95       	ret

000049c2 <memcpy>:
    49c2:	fb 01       	movw	r30, r22
    49c4:	dc 01       	movw	r26, r24
    49c6:	02 c0       	rjmp	.+4      	; 0x49cc <memcpy+0xa>
    49c8:	01 90       	ld	r0, Z+
    49ca:	0d 92       	st	X+, r0
    49cc:	41 50       	subi	r20, 0x01	; 1
    49ce:	50 40       	sbci	r21, 0x00	; 0
    49d0:	d8 f7       	brcc	.-10     	; 0x49c8 <memcpy+0x6>
    49d2:	08 95       	ret

000049d4 <strchr>:
    49d4:	fc 01       	movw	r30, r24
    49d6:	81 91       	ld	r24, Z+
    49d8:	86 17       	cp	r24, r22
    49da:	21 f0       	breq	.+8      	; 0x49e4 <strchr+0x10>
    49dc:	88 23       	and	r24, r24
    49de:	d9 f7       	brne	.-10     	; 0x49d6 <strchr+0x2>
    49e0:	99 27       	eor	r25, r25
    49e2:	08 95       	ret
    49e4:	31 97       	sbiw	r30, 0x01	; 1
    49e6:	cf 01       	movw	r24, r30
    49e8:	08 95       	ret

000049ea <strcpy>:
    49ea:	fb 01       	movw	r30, r22
    49ec:	dc 01       	movw	r26, r24
    49ee:	01 90       	ld	r0, Z+
    49f0:	0d 92       	st	X+, r0
    49f2:	00 20       	and	r0, r0
    49f4:	e1 f7       	brne	.-8      	; 0x49ee <strcpy+0x4>
    49f6:	08 95       	ret

000049f8 <__itoa_ncheck>:
    49f8:	bb 27       	eor	r27, r27
    49fa:	4a 30       	cpi	r20, 0x0A	; 10
    49fc:	31 f4       	brne	.+12     	; 0x4a0a <__itoa_ncheck+0x12>
    49fe:	99 23       	and	r25, r25
    4a00:	22 f4       	brpl	.+8      	; 0x4a0a <__itoa_ncheck+0x12>
    4a02:	bd e2       	ldi	r27, 0x2D	; 45
    4a04:	90 95       	com	r25
    4a06:	81 95       	neg	r24
    4a08:	9f 4f       	sbci	r25, 0xFF	; 255
    4a0a:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__utoa_common>

00004a0e <__mulhi_const_10>:
    4a0e:	7a e0       	ldi	r23, 0x0A	; 10
    4a10:	97 9f       	mul	r25, r23
    4a12:	90 2d       	mov	r25, r0
    4a14:	87 9f       	mul	r24, r23
    4a16:	80 2d       	mov	r24, r0
    4a18:	91 0d       	add	r25, r1
    4a1a:	11 24       	eor	r1, r1
    4a1c:	08 95       	ret

00004a1e <__utoa_ncheck>:
    4a1e:	bb 27       	eor	r27, r27

00004a20 <__utoa_common>:
    4a20:	fb 01       	movw	r30, r22
    4a22:	55 27       	eor	r21, r21
    4a24:	aa 27       	eor	r26, r26
    4a26:	88 0f       	add	r24, r24
    4a28:	99 1f       	adc	r25, r25
    4a2a:	aa 1f       	adc	r26, r26
    4a2c:	a4 17       	cp	r26, r20
    4a2e:	10 f0       	brcs	.+4      	; 0x4a34 <__utoa_common+0x14>
    4a30:	a4 1b       	sub	r26, r20
    4a32:	83 95       	inc	r24
    4a34:	50 51       	subi	r21, 0x10	; 16
    4a36:	b9 f7       	brne	.-18     	; 0x4a26 <__utoa_common+0x6>
    4a38:	a0 5d       	subi	r26, 0xD0	; 208
    4a3a:	aa 33       	cpi	r26, 0x3A	; 58
    4a3c:	08 f0       	brcs	.+2      	; 0x4a40 <__utoa_common+0x20>
    4a3e:	a9 5d       	subi	r26, 0xD9	; 217
    4a40:	a1 93       	st	Z+, r26
    4a42:	00 97       	sbiw	r24, 0x00	; 0
    4a44:	79 f7       	brne	.-34     	; 0x4a24 <__utoa_common+0x4>
    4a46:	b1 11       	cpse	r27, r1
    4a48:	b1 93       	st	Z+, r27
    4a4a:	11 92       	st	Z+, r1
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <strrev>

00004a52 <strrev>:
    4a52:	dc 01       	movw	r26, r24
    4a54:	fc 01       	movw	r30, r24
    4a56:	67 2f       	mov	r22, r23
    4a58:	71 91       	ld	r23, Z+
    4a5a:	77 23       	and	r23, r23
    4a5c:	e1 f7       	brne	.-8      	; 0x4a56 <strrev+0x4>
    4a5e:	32 97       	sbiw	r30, 0x02	; 2
    4a60:	04 c0       	rjmp	.+8      	; 0x4a6a <strrev+0x18>
    4a62:	7c 91       	ld	r23, X
    4a64:	6d 93       	st	X+, r22
    4a66:	70 83       	st	Z, r23
    4a68:	62 91       	ld	r22, -Z
    4a6a:	ae 17       	cp	r26, r30
    4a6c:	bf 07       	cpc	r27, r31
    4a6e:	c8 f3       	brcs	.-14     	; 0x4a62 <strrev+0x10>
    4a70:	08 95       	ret

00004a72 <__prologue_saves__>:
    4a72:	2f 92       	push	r2
    4a74:	3f 92       	push	r3
    4a76:	4f 92       	push	r4
    4a78:	5f 92       	push	r5
    4a7a:	6f 92       	push	r6
    4a7c:	7f 92       	push	r7
    4a7e:	8f 92       	push	r8
    4a80:	9f 92       	push	r9
    4a82:	af 92       	push	r10
    4a84:	bf 92       	push	r11
    4a86:	cf 92       	push	r12
    4a88:	df 92       	push	r13
    4a8a:	ef 92       	push	r14
    4a8c:	ff 92       	push	r15
    4a8e:	0f 93       	push	r16
    4a90:	1f 93       	push	r17
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	ca 1b       	sub	r28, r26
    4a9c:	db 0b       	sbc	r29, r27
    4a9e:	0f b6       	in	r0, 0x3f	; 63
    4aa0:	f8 94       	cli
    4aa2:	de bf       	out	0x3e, r29	; 62
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	cd bf       	out	0x3d, r28	; 61
    4aa8:	09 94       	ijmp

00004aaa <__epilogue_restores__>:
    4aaa:	2a 88       	ldd	r2, Y+18	; 0x12
    4aac:	39 88       	ldd	r3, Y+17	; 0x11
    4aae:	48 88       	ldd	r4, Y+16	; 0x10
    4ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4aba:	aa 84       	ldd	r10, Y+10	; 0x0a
    4abc:	b9 84       	ldd	r11, Y+9	; 0x09
    4abe:	c8 84       	ldd	r12, Y+8	; 0x08
    4ac0:	df 80       	ldd	r13, Y+7	; 0x07
    4ac2:	ee 80       	ldd	r14, Y+6	; 0x06
    4ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    4ac6:	0c 81       	ldd	r16, Y+4	; 0x04
    4ac8:	1b 81       	ldd	r17, Y+3	; 0x03
    4aca:	aa 81       	ldd	r26, Y+2	; 0x02
    4acc:	b9 81       	ldd	r27, Y+1	; 0x01
    4ace:	ce 0f       	add	r28, r30
    4ad0:	d1 1d       	adc	r29, r1
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	ed 01       	movw	r28, r26
    4ade:	08 95       	ret

00004ae0 <__do_global_dtors>:
    4ae0:	14 e0       	ldi	r17, 0x04	; 4
    4ae2:	c1 e0       	ldi	r28, 0x01	; 1
    4ae4:	d4 e0       	ldi	r29, 0x04	; 4
    4ae6:	04 c0       	rjmp	.+8      	; 0x4af0 <__do_global_dtors+0x10>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	0e 94 aa 22 	call	0x4554	; 0x4554 <__tablejump2__>
    4aee:	21 96       	adiw	r28, 0x01	; 1
    4af0:	c2 30       	cpi	r28, 0x02	; 2
    4af2:	d1 07       	cpc	r29, r17
    4af4:	c9 f7       	brne	.-14     	; 0x4ae8 <__do_global_dtors+0x8>
    4af6:	f8 94       	cli

00004af8 <__stop_program>:
    4af8:	ff cf       	rjmp	.-2      	; 0x4af8 <__stop_program>
