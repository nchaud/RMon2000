
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00004880  00004914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  0080019a  0080019a  000049ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000049ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000049e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce8  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020595  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049a8  00000000  00000000  00025c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007184  00000000  00000000  0002a645  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fbc  00000000  00000000  000317cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d33  00000000  00000000  00034788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001144f  00000000  00000000  0003a4bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  0004b90a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__dtors_end>
       4:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
       8:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
       c:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__vector_3>
      10:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__vector_3>
      14:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__vector_3>
      18:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      1c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      20:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      24:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      28:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      2c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      30:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      34:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      38:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      3c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      40:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__vector_16>
      44:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      48:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__vector_18>
      4c:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__vector_19>
      50:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      54:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      58:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      5c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>
      60:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__vector_24>
      64:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_E3__c>:
      aa:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000b2 <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c_0>:
      b2:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000000bd <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c>:
      bd:	41 54 2b 48 54 54 50 52 45 41 44 3d 00              AT+HTTPREAD=.

000000ca <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      ca:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000d7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      d7:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000e4 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
      e4:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000000f3 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
      f3:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000000fc <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
      fc:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000109 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     109:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000116 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     116:	09 2d 2d 2d 3e 20 00                                .---> .

0000011d <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     11d:	22 2c 00                                            ",.

00000120 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     120:	22 2c 22 00                                         ",".

00000124 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     124:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000132 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     132:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000140 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     140:	09 2d 2d 2d 3e 20 00                                .---> .

00000147 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     147:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000153 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     153:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

0000015f <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_5>:
     15f:	57 52 49 54 49 4e 47 20 00                          WRITING .

00000168 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_4>:
     168:	2c 20 66 69 6e 61 6c 20 6c 65 6e 67 74 68 20 77     , final length w
     178:	65 27 6c 6c 20 72 65 61 64 3a 20 20 00              e'll read:  .

00000185 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_3>:
     185:	2c 20 77 69 74 20 6d 61 78 20 6c 65 6e 67 74 68     , wit max length
     195:	20 6f 66 20 00                                       of .

0000019a <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_2>:
     19a:	52 65 63 65 69 76 65 64 20 72 65 73 70 6f 6e 73     Received respons
     1aa:	65 20 6f 66 20 6c 65 6e 67 74 68 20 00              e of length .

000001b7 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_1>:
     1b7:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     1c7:	61 74 61 2c 20 73 74 61 74 75 73 20 63 6f 64 65     ata, status code
     1d7:	3a 20 00                                            : .

000001da <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_0>:
     1da:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000001e5 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c>:
     1e5:	68 74 74 70 3a 2f 2f 72 6d 6f 6e 2e 6b 68 75 64     http://rmon.khud
     1f5:	64 61 6d 2e 6f 72 67 2e 75 6b 2f 3f 61 3d 76 69     dam.org.uk/?a=vi
     205:	65 77 00                                            ew.

00000208 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     208:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000213 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     213:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000220 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     220:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000022b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     22b:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000233 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     233:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000023c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     23c:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000249 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     249:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     259:	44 22 2c 00                                         D",.

0000025d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     25d:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     26d:	45 52 22 2c 00                                      ER",.

00000272 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     272:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000027c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     27c:	09 2d 2d 2d 3e 20 00                                .---> .

00000283 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     283:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000028d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     28d:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     29d:	4e 22 2c 00                                         N",.

000002a1 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     2a1:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     2b1:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000002bf <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     2bf:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000002ca <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     2ca:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000002d5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     2d5:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000002dd <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     2dd:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002e6 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     2e6:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002ee <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     2ee:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002f7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     2f7:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002ff <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     2ff:	41 54 2b 43 53 51 00                                AT+CSQ.

00000306 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     306:	2b 43 53 51 3a 20 00                                +CSQ: .

0000030d <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     30d:	41 54 2b 43 53 51 00                                AT+CSQ.

00000314 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     314:	2b 43 53 51 3a 20 00                                +CSQ: .

0000031b <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     31b:	41 54 2b 43 42 43 00                                AT+CBC.

00000322 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     322:	2b 43 42 43 3a 20 00                                +CBC: .

00000329 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     329:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000334 <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     334:	09 3c 2d 2d 2d 20 00                                .<--- .

0000033b <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     33b:	09 2d 2d 2d 3e 20 00                                .---> .

00000342 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     342:	41 54 45 30 00                                      ATE0.

00000347 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     347:	41 54 45 30 00                                      ATE0.

0000034c <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     34c:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     35c:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

0000036b <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     36b:	41 54 00                                            AT.

0000036e <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     36e:	41 54 00                                            AT.

00000371 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     371:	41 54 00                                            AT.

00000374 <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     374:	41 54 00                                            AT.

00000377 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     377:	41 54 00                                            AT.

0000037a <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     37a:	41 54 00                                            AT.

0000037d <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     37d:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     38d:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

0000039e <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     39e:	4f 4b 00                                            OK.

000003a1 <_ZZN13Adafruit_FONAC4EabE3__c>:
     3a1:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000003a9 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     3a9:	45 72 72 6f 72 3d 00                                Error=.

000003b0 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     3b0:	20 7c 20 00                                          | .

000003b4 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     3b4:	54 65 6d 70 3d 00                                   Temp=.

000003ba <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     3ba:	20 7c 20 00                                          | .

000003be <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     3be:	43 75 72 72 65 6e 74 3d 00                          Current=.

000003c7 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     3c7:	20 7c 20 00                                          | .

000003cb <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     3cb:	50 56 2d 56 3d 00                                   PV-V=.

000003d1 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     3d1:	20 7c 20 00                                          | .

000003d5 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     3d5:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000003dd <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     3dd:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

000003ea <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     3ea:	20 7c 20 00                                          | .

000003ee <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     3ee:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

000003f7 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     3f7:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000401 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     401:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     411:	6f 64 65 3d 00                                      ode=.

00000416 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     416:	20 7c 20 00                                          | .

0000041a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     41a:	42 45 52 3d 00                                      BER=.

0000041f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     41f:	20 7c 20 00                                          | .

00000423 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     423:	52 53 53 49 3d 00                                   RSSI=.

00000429 <_ZL12b64_alphabet>:
     429:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     439:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     449:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     459:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

0000046a <_ZZ4loopE3__c>:
     46a:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

00000474 <_ZZ8sendDatavE3__c_3>:
     474:	52 65 73 70 6f 6e 73 65 20 66 72 6f 6d 20 73 65     Response from se
     484:	6e 64 3a 00                                         nd:.

00000488 <_ZZ8sendDatavE3__c_2>:
     488:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     498:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     4a8:	6f 72 20 73 65 6e 64 3a 00                          or send:.

000004b1 <_ZZ8sendDatavE3__c_1>:
     4b1:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     4c1:	52 29 00                                            R).

000004c4 <_ZZ8sendDatavE3__c_0>:
     4c4:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     4d4:	69 6e 67 2e 2e 2e 29 00                             ing...).

000004dc <_ZZ8sendDatavE3__c>:
     4dc:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     4ec:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

000004fb <_ZZ17createEncodedDataPcPhhP14DailyCycleDataE3__c>:
     4fb:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     50b:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     51b:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

0000052b <_ZZ12takeReadingsvE3__c>:
     52b:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     53b:	2e 2e 00                                            ...

0000053e <_ZZ21ensureFonaInitialisedbE3__c_9>:
     53e:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     54e:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     55e:	64 6f 6e 65 29 00                                   done).

00000564 <_ZZ21ensureFonaInitialisedbE3__c_8>:
     564:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     574:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     584:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     594:	75 65 20 6e 6f 77 29 00                             ue now).

0000059c <_ZZ21ensureFonaInitialisedbE3__c_7>:
     59c:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     5ac:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     5bc:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

000005cb <_ZZ21ensureFonaInitialisedbE3__c_6>:
     5cb:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     5db:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

000005e6 <_ZZ21ensureFonaInitialisedbE3__c_5>:
     5e6:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     5f6:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000606 <_ZZ21ensureFonaInitialisedbE3__c_4>:
     606:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     616:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     626:	65 64 00                                            ed.

00000629 <_ZZ21ensureFonaInitialisedbE3__c_3>:
     629:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     639:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     649:	6f 72 74 6c 79 00                                   ortly.

0000064f <_ZZ21ensureFonaInitialisedbE3__c_2>:
     64f:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     65f:	6e 67 20 47 50 52 53 00                             ng GPRS.

00000667 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     667:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     677:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

00000684 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     684:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     694:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

0000069f <_ZZ21ensureFonaInitialisedbE3__c>:
     69f:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     6af:	61 2e 2e 2e 00                                      a....

000006b4 <_ZZ5setupE3__c>:
     6b4:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000006c0 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     6c0:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     6d0:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     6e0:	73 73 69 6f 6e 3a 00                                ssion:.

000006e7 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     6e7:	2a 2a 2a 2a 00                                      ****.

000006ec <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     6ec:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     6fc:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     70c:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     71c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

00000727 <digital_pin_to_timer_PGM>:
     727:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     737:	00 00 00 00                                         ....

0000073b <digital_pin_to_bit_mask_PGM>:
     73b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     74b:	04 08 10 20                                         ... 

0000074f <digital_pin_to_port_PGM>:
     74f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     75f:	03 03 03 03                                         ....

00000763 <port_to_input_PGM>:
     763:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000076d <port_to_output_PGM>:
     76d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000777 <port_to_mode_PGM>:
     777:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000782 <__ctors_start>:
     782:	65 13       	cpse	r22, r21
     784:	0f 18       	sub	r0, r15
     786:	ff 19       	sub	r31, r15

00000788 <__ctors_end>:
     788:	80 13       	cpse	r24, r16

0000078a <__dtors_end>:
     78a:	11 24       	eor	r1, r1
     78c:	1f be       	out	0x3f, r1	; 63
     78e:	cf ef       	ldi	r28, 0xFF	; 255
     790:	d8 e0       	ldi	r29, 0x08	; 8
     792:	de bf       	out	0x3e, r29	; 62
     794:	cd bf       	out	0x3d, r28	; 61

00000796 <__do_copy_data>:
     796:	11 e0       	ldi	r17, 0x01	; 1
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	b1 e0       	ldi	r27, 0x01	; 1
     79c:	e0 e8       	ldi	r30, 0x80	; 128
     79e:	f8 e4       	ldi	r31, 0x48	; 72
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <__do_copy_data+0x10>
     7a2:	05 90       	lpm	r0, Z+
     7a4:	0d 92       	st	X+, r0
     7a6:	aa 39       	cpi	r26, 0x9A	; 154
     7a8:	b1 07       	cpc	r27, r17
     7aa:	d9 f7       	brne	.-10     	; 0x7a2 <__do_copy_data+0xc>

000007ac <__do_clear_bss>:
     7ac:	24 e0       	ldi	r18, 0x04	; 4
     7ae:	aa e9       	ldi	r26, 0x9A	; 154
     7b0:	b1 e0       	ldi	r27, 0x01	; 1
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <.do_clear_bss_start>

000007b4 <.do_clear_bss_loop>:
     7b4:	1d 92       	st	X+, r1

000007b6 <.do_clear_bss_start>:
     7b6:	ac 38       	cpi	r26, 0x8C	; 140
     7b8:	b2 07       	cpc	r27, r18
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <.do_clear_bss_loop>

000007bc <__do_global_ctors>:
     7bc:	13 e0       	ldi	r17, 0x03	; 3
     7be:	c4 ec       	ldi	r28, 0xC4	; 196
     7c0:	d3 e0       	ldi	r29, 0x03	; 3
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__do_global_ctors+0x10>
     7c4:	21 97       	sbiw	r28, 0x01	; 1
     7c6:	fe 01       	movw	r30, r28
     7c8:	0e 94 6d 21 	call	0x42da	; 0x42da <__tablejump2__>
     7cc:	c1 3c       	cpi	r28, 0xC1	; 193
     7ce:	d1 07       	cpc	r29, r17
     7d0:	c9 f7       	brne	.-14     	; 0x7c4 <__do_global_ctors+0x8>
     7d2:	0e 94 2d 1a 	call	0x345a	; 0x345a <main>
     7d6:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__do_global_dtors>

000007da <__bad_interrupt>:
     7da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007de <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     7de:	83 5e       	subi	r24, 0xE3	; 227
     7e0:	9e 4f       	sbci	r25, 0xFE	; 254
     7e2:	dc 01       	movw	r26, r24
     7e4:	8d 91       	ld	r24, X+
     7e6:	9c 91       	ld	r25, X
     7e8:	dc 01       	movw	r26, r24
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	04 80       	ldd	r0, Z+4	; 0x04
     7f0:	f5 81       	ldd	r31, Z+5	; 0x05
     7f2:	e0 2d       	mov	r30, r0
     7f4:	09 94       	ijmp

000007f6 <_ZN13Adafruit_FONA5writeEh>:
     7f6:	83 5e       	subi	r24, 0xE3	; 227
     7f8:	9e 4f       	sbci	r25, 0xFE	; 254
     7fa:	dc 01       	movw	r26, r24
     7fc:	8d 91       	ld	r24, X+
     7fe:	9c 91       	ld	r25, X
     800:	dc 01       	movw	r26, r24
     802:	ed 91       	ld	r30, X+
     804:	fc 91       	ld	r31, X
     806:	01 90       	ld	r0, Z+
     808:	f0 81       	ld	r31, Z
     80a:	e0 2d       	mov	r30, r0
     80c:	09 94       	ijmp

0000080e <_ZN13Adafruit_FONA4readEv>:
     80e:	83 5e       	subi	r24, 0xE3	; 227
     810:	9e 4f       	sbci	r25, 0xFE	; 254
     812:	dc 01       	movw	r26, r24
     814:	8d 91       	ld	r24, X+
     816:	9c 91       	ld	r25, X
     818:	dc 01       	movw	r26, r24
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	06 80       	ldd	r0, Z+6	; 0x06
     820:	f7 81       	ldd	r31, Z+7	; 0x07
     822:	e0 2d       	mov	r30, r0
     824:	09 94       	ijmp

00000826 <_ZN13Adafruit_FONA4peekEv>:
     826:	83 5e       	subi	r24, 0xE3	; 227
     828:	9e 4f       	sbci	r25, 0xFE	; 254
     82a:	dc 01       	movw	r26, r24
     82c:	8d 91       	ld	r24, X+
     82e:	9c 91       	ld	r25, X
     830:	dc 01       	movw	r26, r24
     832:	ed 91       	ld	r30, X+
     834:	fc 91       	ld	r31, X
     836:	00 84       	ldd	r0, Z+8	; 0x08
     838:	f1 85       	ldd	r31, Z+9	; 0x09
     83a:	e0 2d       	mov	r30, r0
     83c:	09 94       	ijmp

0000083e <_ZN13Adafruit_FONA5flushEv>:
     83e:	83 5e       	subi	r24, 0xE3	; 227
     840:	9e 4f       	sbci	r25, 0xFE	; 254
     842:	dc 01       	movw	r26, r24
     844:	8d 91       	ld	r24, X+
     846:	9c 91       	ld	r25, X
     848:	dc 01       	movw	r26, r24
     84a:	ed 91       	ld	r30, X+
     84c:	fc 91       	ld	r31, X
     84e:	02 84       	ldd	r0, Z+10	; 0x0a
     850:	f3 85       	ldd	r31, Z+11	; 0x0b
     852:	e0 2d       	mov	r30, r0
     854:	09 94       	ijmp

00000856 <_ZN13Adafruit_FONAC1Eab>:
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ec 01       	movw	r28, r24
     860:	06 2f       	mov	r16, r22
     862:	14 2f       	mov	r17, r20
     864:	1b 82       	std	Y+3, r1	; 0x03
     866:	1a 82       	std	Y+2, r1	; 0x02
     868:	88 ee       	ldi	r24, 0xE8	; 232
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	a0 e0       	ldi	r26, 0x00	; 0
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	8c 83       	std	Y+4, r24	; 0x04
     872:	9d 83       	std	Y+5, r25	; 0x05
     874:	ae 83       	std	Y+6, r26	; 0x06
     876:	bf 83       	std	Y+7, r27	; 0x07
     878:	8f e2       	ldi	r24, 0x2F	; 47
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	99 83       	std	Y+1, r25	; 0x01
     87e:	88 83       	st	Y, r24
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8e 87       	std	Y+14, r24	; 0x0e
     884:	6c e7       	ldi	r22, 0x7C	; 124
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	ce 01       	movw	r24, r28
     88a:	8b 5e       	subi	r24, 0xEB	; 235
     88c:	9e 4f       	sbci	r25, 0xFE	; 254
     88e:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <_ZN6StringC1EPKc>
     892:	0c 87       	std	Y+12, r16	; 0x0c
     894:	1d 87       	std	Y+13, r17	; 0x0d
     896:	fe 01       	movw	r30, r28
     898:	e2 5f       	subi	r30, 0xF2	; 242
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	81 ea       	ldi	r24, 0xA1	; 161
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	91 83       	std	Z+1, r25	; 0x01
     8a2:	80 83       	st	Z, r24
     8a4:	32 96       	adiw	r30, 0x02	; 2
     8a6:	11 82       	std	Z+1, r1	; 0x01
     8a8:	10 82       	st	Z, r1
     8aa:	32 96       	adiw	r30, 0x02	; 2
     8ac:	11 82       	std	Z+1, r1	; 0x01
     8ae:	10 82       	st	Z, r1
     8b0:	3b 96       	adiw	r30, 0x0b	; 11
     8b2:	11 82       	std	Z+1, r1	; 0x01
     8b4:	10 82       	st	Z, r1
     8b6:	39 97       	sbiw	r30, 0x09	; 9
     8b8:	10 82       	st	Z, r1
     8ba:	c5 5e       	subi	r28, 0xE5	; 229
     8bc:	de 4f       	sbci	r29, 0xFE	; 254
     8be:	8e e9       	ldi	r24, 0x9E	; 158
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	99 83       	std	Y+1, r25	; 0x01
     8c4:	88 83       	st	Y, r24
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	08 95       	ret

000008d0 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     8d0:	8b 5e       	subi	r24, 0xEB	; 235
     8d2:	9e 4f       	sbci	r25, 0xFE	; 254
     8d4:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <_ZN6StringaSERKS_>

000008d8 <_ZN13Adafruit_FONA10flushInputEv>:
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	8c 01       	movw	r16, r24
     8e8:	0f 5f       	subi	r16, 0xFF	; 255
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	88 97       	sbiw	r24, 0x28	; 40
     8ee:	d8 f4       	brcc	.+54     	; 0x926 <__stack+0x27>
     8f0:	e8 81       	ld	r30, Y
     8f2:	f9 81       	ldd	r31, Y+1	; 0x01
     8f4:	04 80       	ldd	r0, Z+4	; 0x04
     8f6:	f5 81       	ldd	r31, Z+5	; 0x05
     8f8:	e0 2d       	mov	r30, r0
     8fa:	ce 01       	movw	r24, r28
     8fc:	09 95       	icall
     8fe:	89 2b       	or	r24, r25
     900:	51 f0       	breq	.+20     	; 0x916 <__stack+0x17>
     902:	e8 81       	ld	r30, Y
     904:	f9 81       	ldd	r31, Y+1	; 0x01
     906:	06 80       	ldd	r0, Z+6	; 0x06
     908:	f7 81       	ldd	r31, Z+7	; 0x07
     90a:	e0 2d       	mov	r30, r0
     90c:	ce 01       	movw	r24, r28
     90e:	09 95       	icall
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	ed cf       	rjmp	.-38     	; 0x8f0 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     922:	c8 01       	movw	r24, r16
     924:	e0 cf       	rjmp	.-64     	; 0x8e6 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	8b 01       	movw	r16, r22
     93e:	f4 2e       	mov	r15, r20
     940:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
     944:	60 e4       	ldi	r22, 0x40	; 64
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	8e e9       	ldi	r24, 0x9E	; 158
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     950:	62 e3       	ldi	r22, 0x32	; 50
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	8e e9       	ldi	r24, 0x9E	; 158
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     95c:	b8 01       	movw	r22, r16
     95e:	8e e9       	ldi	r24, 0x9E	; 158
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     966:	62 e2       	ldi	r22, 0x22	; 34
     968:	8e e9       	ldi	r24, 0x9E	; 158
     96a:	93 e0       	ldi	r25, 0x03	; 3
     96c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print7printlnEc>
     970:	c3 5e       	subi	r28, 0xE3	; 227
     972:	de 4f       	sbci	r29, 0xFE	; 254
     974:	64 e2       	ldi	r22, 0x24	; 36
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	88 81       	ld	r24, Y
     97a:	99 81       	ldd	r25, Y+1	; 0x01
     97c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     980:	b8 01       	movw	r22, r16
     982:	88 81       	ld	r24, Y
     984:	99 81       	ldd	r25, Y+1	; 0x01
     986:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     98a:	88 81       	ld	r24, Y
     98c:	99 81       	ldd	r25, Y+1	; 0x01
     98e:	ff 20       	and	r15, r15
     990:	19 f0       	breq	.+6      	; 0x998 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     992:	60 e2       	ldi	r22, 0x20	; 32
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	02 c0       	rjmp	.+4      	; 0x99c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     998:	6d e1       	ldi	r22, 0x1D	; 29
     99a:	71 e0       	ldi	r23, 0x01	; 1
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>

000009aa <_ZN13Adafruit_FONA8readlineEjb>:
     9aa:	bf 92       	push	r11
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	7c 01       	movw	r14, r24
     9be:	b4 2e       	mov	r11, r20
     9c0:	8b 01       	movw	r16, r22
     9c2:	00 0f       	add	r16, r16
     9c4:	11 1f       	adc	r17, r17
     9c6:	00 0f       	add	r16, r16
     9c8:	11 1f       	adc	r17, r17
     9ca:	c0 e0       	ldi	r28, 0x00	; 0
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	67 01       	movw	r12, r14
     9d0:	83 ee       	ldi	r24, 0xE3	; 227
     9d2:	c8 1a       	sub	r12, r24
     9d4:	8e ef       	ldi	r24, 0xFE	; 254
     9d6:	d8 0a       	sbc	r13, r24
     9d8:	01 15       	cp	r16, r1
     9da:	11 05       	cpc	r17, r1
     9dc:	c9 f1       	breq	.+114    	; 0xa50 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9de:	ce 3f       	cpi	r28, 0xFE	; 254
     9e0:	d1 05       	cpc	r29, r1
     9e2:	98 f0       	brcs	.+38     	; 0xa0a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9e4:	62 e9       	ldi	r22, 0x92	; 146
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	8e e9       	ldi	r24, 0x9E	; 158
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
     9f0:	2f c0       	rjmp	.+94     	; 0xa50 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9f2:	f6 01       	movw	r30, r12
     9f4:	80 81       	ld	r24, Z
     9f6:	91 81       	ldd	r25, Z+1	; 0x01
     9f8:	dc 01       	movw	r26, r24
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	06 80       	ldd	r0, Z+6	; 0x06
     a00:	f7 81       	ldd	r31, Z+7	; 0x07
     a02:	e0 2d       	mov	r30, r0
     a04:	09 95       	icall
     a06:	8d 30       	cpi	r24, 0x0D	; 13
     a08:	69 f4       	brne	.+26     	; 0xa24 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     a0a:	d6 01       	movw	r26, r12
     a0c:	8d 91       	ld	r24, X+
     a0e:	9c 91       	ld	r25, X
     a10:	dc 01       	movw	r26, r24
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	04 80       	ldd	r0, Z+4	; 0x04
     a18:	f5 81       	ldd	r31, Z+5	; 0x05
     a1a:	e0 2d       	mov	r30, r0
     a1c:	09 95       	icall
     a1e:	89 2b       	or	r24, r25
     a20:	41 f7       	brne	.-48     	; 0x9f2 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <_ZN13Adafruit_FONA8readlineEjb+0x92>
     a24:	8a 30       	cpi	r24, 0x0A	; 10
     a26:	21 f4       	brne	.+8      	; 0xa30 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     a28:	20 97       	sbiw	r28, 0x00	; 0
     a2a:	79 f3       	breq	.-34     	; 0xa0a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a2c:	bb 20       	and	r11, r11
     a2e:	81 f0       	breq	.+32     	; 0xa50 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a30:	f7 01       	movw	r30, r14
     a32:	ec 0f       	add	r30, r28
     a34:	fd 1f       	adc	r31, r29
     a36:	87 87       	std	Z+15, r24	; 0x0f
     a38:	21 96       	adiw	r28, 0x01	; 1
     a3a:	e7 cf       	rjmp	.-50     	; 0xa0a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a3c:	01 50       	subi	r16, 0x01	; 1
     a3e:	11 09       	sbc	r17, r1
     a40:	39 f0       	breq	.+14     	; 0xa50 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     a4e:	c4 cf       	rjmp	.-120    	; 0x9d8 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     a50:	f7 01       	movw	r30, r14
     a52:	ec 0f       	add	r30, r28
     a54:	fd 1f       	adc	r31, r29
     a56:	17 86       	std	Z+15, r1	; 0x0f
     a58:	8c 2f       	mov	r24, r28
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	bf 90       	pop	r11
     a6c:	08 95       	ret

00000a6e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
     a78:	8b 01       	movw	r16, r22
     a7a:	ba 01       	movw	r22, r20
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
     a82:	68 e9       	ldi	r22, 0x98	; 152
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	8e e9       	ldi	r24, 0x9E	; 158
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     a8e:	2f 96       	adiw	r28, 0x0f	; 15
     a90:	be 01       	movw	r22, r28
     a92:	8e e9       	ldi	r24, 0x9E	; 158
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
     a9a:	b8 01       	movw	r22, r16
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strcmp_P>
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	89 2b       	or	r24, r25
     aa6:	09 f0       	breq	.+2      	; 0xaaa <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	82 2f       	mov	r24, r18
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	fc 01       	movw	r30, r24
     abe:	e3 5e       	subi	r30, 0xE3	; 227
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	66 23       	and	r22, r22
     ac4:	31 f0       	breq	.+12     	; 0xad2 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     ac6:	62 e2       	ldi	r22, 0x22	; 34
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print7printlnEc>
     ad0:	04 c0       	rjmp	.+8      	; 0xada <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
     ada:	fe 01       	movw	r30, r28
     adc:	e5 5e       	subi	r30, 0xE5	; 229
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	60 81       	ld	r22, Z
     ae2:	71 81       	ldd	r23, Z+1	; 0x01
     ae4:	40 e1       	ldi	r20, 0x10	; 16
     ae6:	57 e2       	ldi	r21, 0x27	; 39
     ae8:	ce 01       	movw	r24, r28
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000af2 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	8a 01       	movw	r16, r20
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	0e 94 98 04 	call	0x930	; 0x930 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b04:	fe 01       	movw	r30, r28
     b06:	e3 5e       	subi	r30, 0xE3	; 227
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	b8 01       	movw	r22, r16
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	0e 94 a1 1a 	call	0x3542	; 0x3542 <_ZN5Print5printERK6String>
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	ce 01       	movw	r24, r28
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b24 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	ec 01       	movw	r28, r24
     b2e:	8a 01       	movw	r16, r20
     b30:	41 e0       	ldi	r20, 0x01	; 1
     b32:	0e 94 98 04 	call	0x930	; 0x930 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b36:	fe 01       	movw	r30, r28
     b38:	e3 5e       	subi	r30, 0xE3	; 227
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	b8 01       	movw	r22, r16
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	ce 01       	movw	r24, r28
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b56 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
     b64:	69 01       	movw	r12, r18
     b66:	7a 01       	movw	r14, r20
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 98 04 	call	0x930	; 0x930 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b6e:	fe 01       	movw	r30, r28
     b70:	e3 5e       	subi	r30, 0xE3	; 227
     b72:	fe 4f       	sbci	r31, 0xFE	; 254
     b74:	2a e0       	ldi	r18, 0x0A	; 10
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	b7 01       	movw	r22, r14
     b7a:	a6 01       	movw	r20, r12
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print5printEli>
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	ce 01       	movw	r24, r28
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b98 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     b98:	4f 92       	push	r4
     b9a:	5f 92       	push	r5
     b9c:	6f 92       	push	r6
     b9e:	7f 92       	push	r7
     ba0:	8f 92       	push	r8
     ba2:	9f 92       	push	r9
     ba4:	af 92       	push	r10
     ba6:	bf 92       	push	r11
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	7c 01       	movw	r14, r24
     bb6:	2a 01       	movw	r4, r20
     bb8:	3b 01       	movw	r6, r22
     bba:	48 01       	movw	r8, r16
     bbc:	59 01       	movw	r10, r18
     bbe:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
     bc2:	66 e1       	ldi	r22, 0x16	; 22
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	8e e9       	ldi	r24, 0x9E	; 158
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     bce:	69 e0       	ldi	r22, 0x09	; 9
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	8e e9       	ldi	r24, 0x9E	; 158
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     bda:	2a e0       	ldi	r18, 0x0A	; 10
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	b3 01       	movw	r22, r6
     be0:	a2 01       	movw	r20, r4
     be2:	8e e9       	ldi	r24, 0x9E	; 158
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN5Print5printEmi>
     bea:	6c e2       	ldi	r22, 0x2C	; 44
     bec:	8e e9       	ldi	r24, 0x9E	; 158
     bee:	93 e0       	ldi	r25, 0x03	; 3
     bf0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN5Print5printEc>
     bf4:	2a e0       	ldi	r18, 0x0A	; 10
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	b5 01       	movw	r22, r10
     bfa:	a4 01       	movw	r20, r8
     bfc:	8e e9       	ldi	r24, 0x9E	; 158
     bfe:	93 e0       	ldi	r25, 0x03	; 3
     c00:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <_ZN5Print7printlnEmi>
     c04:	e7 01       	movw	r28, r14
     c06:	c3 5e       	subi	r28, 0xE3	; 227
     c08:	de 4f       	sbci	r29, 0xFE	; 254
     c0a:	6c ef       	ldi	r22, 0xFC	; 252
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	88 81       	ld	r24, Y
     c10:	99 81       	ldd	r25, Y+1	; 0x01
     c12:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     c16:	2a e0       	ldi	r18, 0x0A	; 10
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	b3 01       	movw	r22, r6
     c1c:	a2 01       	movw	r20, r4
     c1e:	88 81       	ld	r24, Y
     c20:	99 81       	ldd	r25, Y+1	; 0x01
     c22:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN5Print5printEmi>
     c26:	67 e0       	ldi	r22, 0x07	; 7
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	88 81       	ld	r24, Y
     c2c:	99 81       	ldd	r25, Y+1	; 0x01
     c2e:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
     c32:	2a e0       	ldi	r18, 0x0A	; 10
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	b5 01       	movw	r22, r10
     c38:	a4 01       	movw	r20, r8
     c3a:	88 81       	ld	r24, Y
     c3c:	99 81       	ldd	r25, Y+1	; 0x01
     c3e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <_ZN5Print7printlnEmi>
     c42:	40 e1       	ldi	r20, 0x10	; 16
     c44:	57 e2       	ldi	r21, 0x27	; 39
     c46:	63 ef       	ldi	r22, 0xF3	; 243
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	c7 01       	movw	r24, r14
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	8f 90       	pop	r8
     c60:	7f 90       	pop	r7
     c62:	6f 90       	pop	r6
     c64:	5f 90       	pop	r5
     c66:	4f 90       	pop	r4
     c68:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000c6c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	ec 01       	movw	r28, r24
     c7a:	8b 01       	movw	r16, r22
     c7c:	7a 01       	movw	r14, r20
     c7e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
     c82:	6b e8       	ldi	r22, 0x8B	; 139
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	8e e9       	ldi	r24, 0x9E	; 158
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     c8e:	b8 01       	movw	r22, r16
     c90:	8e e9       	ldi	r24, 0x9E	; 158
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c98:	fe 01       	movw	r30, r28
     c9a:	e3 5e       	subi	r30, 0xE3	; 227
     c9c:	fe 4f       	sbci	r31, 0xFE	; 254
     c9e:	b8 01       	movw	r22, r16
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	b7 01       	movw	r22, r14
     cac:	ce 01       	movw	r24, r28
     cae:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
     cb2:	18 2f       	mov	r17, r24
     cb4:	64 e8       	ldi	r22, 0x84	; 132
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	8e e9       	ldi	r24, 0x9E	; 158
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     cc0:	be 01       	movw	r22, r28
     cc2:	61 5f       	subi	r22, 0xF1	; 241
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8e e9       	ldi	r24, 0x9E	; 158
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
     cce:	81 2f       	mov	r24, r17
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	08 95       	ret

00000cde <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	6b 01       	movw	r12, r22
     cfa:	49 01       	movw	r8, r18
     cfc:	5a 01       	movw	r10, r20
     cfe:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
     d02:	6d e7       	ldi	r22, 0x7D	; 125
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	8e e9       	ldi	r24, 0x9E	; 158
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     d0e:	b6 01       	movw	r22, r12
     d10:	8e e9       	ldi	r24, 0x9E	; 158
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     d18:	2a e0       	ldi	r18, 0x0A	; 10
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	b5 01       	movw	r22, r10
     d1e:	a4 01       	movw	r20, r8
     d20:	8e e9       	ldi	r24, 0x9E	; 158
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print7printlnEli>
     d28:	7e 01       	movw	r14, r28
     d2a:	83 ee       	ldi	r24, 0xE3	; 227
     d2c:	e8 1a       	sub	r14, r24
     d2e:	8e ef       	ldi	r24, 0xFE	; 254
     d30:	f8 0a       	sbc	r15, r24
     d32:	b6 01       	movw	r22, r12
     d34:	f7 01       	movw	r30, r14
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     d3e:	2a e0       	ldi	r18, 0x0A	; 10
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	b5 01       	movw	r22, r10
     d44:	a4 01       	movw	r20, r8
     d46:	f7 01       	movw	r30, r14
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN5Print7printlnEli>
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	b8 01       	movw	r22, r16
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
     d5a:	18 2f       	mov	r17, r24
     d5c:	66 e7       	ldi	r22, 0x76	; 118
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	8e e9       	ldi	r24, 0x9E	; 158
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     d68:	be 01       	movw	r22, r28
     d6a:	61 5f       	subi	r22, 0xF1	; 241
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8e e9       	ldi	r24, 0x9E	; 158
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
     d76:	81 2f       	mov	r24, r17
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	08 95       	ret

00000d92 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     d92:	af 92       	push	r10
     d94:	bf 92       	push	r11
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
     da8:	6b 01       	movw	r12, r22
     daa:	7a 01       	movw	r14, r20
     dac:	59 01       	movw	r10, r18
     dae:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
     db2:	6f e6       	ldi	r22, 0x6F	; 111
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	8e e9       	ldi	r24, 0x9E	; 158
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     dbe:	b6 01       	movw	r22, r12
     dc0:	8e e9       	ldi	r24, 0x9E	; 158
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     dc8:	62 e2       	ldi	r22, 0x22	; 34
     dca:	8e e9       	ldi	r24, 0x9E	; 158
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN5Print5printEc>
     dd2:	b7 01       	movw	r22, r14
     dd4:	8e e9       	ldi	r24, 0x9E	; 158
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     ddc:	62 e2       	ldi	r22, 0x22	; 34
     dde:	8e e9       	ldi	r24, 0x9E	; 158
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print7printlnEc>
     de6:	8e 01       	movw	r16, r28
     de8:	03 5e       	subi	r16, 0xE3	; 227
     dea:	1e 4f       	sbci	r17, 0xFE	; 254
     dec:	b6 01       	movw	r22, r12
     dee:	f8 01       	movw	r30, r16
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     df8:	62 e2       	ldi	r22, 0x22	; 34
     dfa:	f8 01       	movw	r30, r16
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN5Print5printEc>
     e04:	b7 01       	movw	r22, r14
     e06:	f8 01       	movw	r30, r16
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     e10:	62 e2       	ldi	r22, 0x22	; 34
     e12:	f8 01       	movw	r30, r16
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print7printlnEc>
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	b5 01       	movw	r22, r10
     e20:	ce 01       	movw	r24, r28
     e22:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
     e26:	18 2f       	mov	r17, r24
     e28:	68 e6       	ldi	r22, 0x68	; 104
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	8e e9       	ldi	r24, 0x9E	; 158
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
     e34:	be 01       	movw	r22, r28
     e36:	61 5f       	subi	r22, 0xF1	; 241
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8e e9       	ldi	r24, 0x9E	; 158
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
     e42:	81 2f       	mov	r24, r17
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	08 95       	ret

00000e5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
     e64:	8a 01       	movw	r16, r20
     e66:	a9 01       	movw	r20, r18
     e68:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e6c:	88 23       	and	r24, r24
     e6e:	41 f0       	breq	.+16     	; 0xe80 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     e70:	b8 01       	movw	r22, r16
     e72:	ce 01       	movw	r24, r28
     e74:	0f 96       	adiw	r24, 0x0f	; 15
     e76:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strcmp_P>
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	89 2b       	or	r24, r25
     e7e:	09 f0       	breq	.+2      	; 0xe82 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	82 2f       	mov	r24, r18
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	08 95       	ret

00000e8e <_ZN13Adafruit_FONA5beginEhh>:
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	ec 01       	movw	r28, r24
     ea0:	f6 2e       	mov	r15, r22
     ea2:	e4 2e       	mov	r14, r20
     ea4:	8f e1       	ldi	r24, 0x1F	; 31
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 3c 1a 	call	0x3478	; 0x3478 <_Znwj>
     eac:	8c 01       	movw	r16, r24
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	4e 2d       	mov	r20, r14
     eb2:	6f 2d       	mov	r22, r15
     eb4:	0e 94 3e 20 	call	0x407c	; 0x407c <_ZN14SoftwareSerialC1Ehhb>
     eb8:	7e 01       	movw	r14, r28
     eba:	83 ee       	ldi	r24, 0xE3	; 227
     ebc:	e8 1a       	sub	r14, r24
     ebe:	8e ef       	ldi	r24, 0xFE	; 254
     ec0:	f8 0a       	sbc	r15, r24
     ec2:	d7 01       	movw	r26, r14
     ec4:	0d 93       	st	X+, r16
     ec6:	1c 93       	st	X, r17
     ec8:	40 ec       	ldi	r20, 0xC0	; 192
     eca:	52 e1       	ldi	r21, 0x12	; 18
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	c8 01       	movw	r24, r16
     ed2:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_ZN14SoftwareSerial5beginEl>
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eda:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <pinMode>
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee2:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
     ee6:	6a e0       	ldi	r22, 0x0A	; 10
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef6:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
     efa:	64 e6       	ldi	r22, 0x64	; 100
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0a:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
     f0e:	6d e7       	ldi	r22, 0x7D	; 125
     f10:	73 e0       	ldi	r23, 0x03	; 3
     f12:	8e e9       	ldi	r24, 0x9E	; 158
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
     f1a:	8e e0       	ldi	r24, 0x0E	; 14
     f1c:	c8 2e       	mov	r12, r24
     f1e:	d1 2c       	mov	r13, r1
     f20:	8e 01       	movw	r16, r28
     f22:	05 5e       	subi	r16, 0xE5	; 229
     f24:	1e 4f       	sbci	r17, 0xFE	; 254
     f26:	f7 01       	movw	r30, r14
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	dc 01       	movw	r26, r24
     f2e:	ed 91       	ld	r30, X+
     f30:	fc 91       	ld	r31, X
     f32:	04 80       	ldd	r0, Z+4	; 0x04
     f34:	f5 81       	ldd	r31, Z+5	; 0x05
     f36:	e0 2d       	mov	r30, r0
     f38:	09 95       	icall
     f3a:	89 2b       	or	r24, r25
     f3c:	59 f0       	breq	.+22     	; 0xf54 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     f3e:	f7 01       	movw	r30, r14
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	dc 01       	movw	r26, r24
     f46:	ed 91       	ld	r30, X+
     f48:	fc 91       	ld	r31, X
     f4a:	06 80       	ldd	r0, Z+6	; 0x06
     f4c:	f7 81       	ldd	r31, Z+7	; 0x07
     f4e:	e0 2d       	mov	r30, r0
     f50:	09 95       	icall
     f52:	e9 cf       	rjmp	.-46     	; 0xf26 <_ZN13Adafruit_FONA5beginEhh+0x98>
     f54:	f8 01       	movw	r30, r16
     f56:	40 81       	ld	r20, Z
     f58:	51 81       	ldd	r21, Z+1	; 0x01
     f5a:	24 ef       	ldi	r18, 0xF4	; 244
     f5c:	31 e0       	ldi	r19, 0x01	; 1
     f5e:	6a e7       	ldi	r22, 0x7A	; 122
     f60:	73 e0       	ldi	r23, 0x03	; 3
     f62:	ce 01       	movw	r24, r28
     f64:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f68:	81 11       	cpse	r24, r1
     f6a:	34 c0       	rjmp	.+104    	; 0xfd4 <_ZN13Adafruit_FONA5beginEhh+0x146>
     f6c:	d7 01       	movw	r26, r14
     f6e:	8d 91       	ld	r24, X+
     f70:	9c 91       	ld	r25, X
     f72:	dc 01       	movw	r26, r24
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	04 80       	ldd	r0, Z+4	; 0x04
     f7a:	f5 81       	ldd	r31, Z+5	; 0x05
     f7c:	e0 2d       	mov	r30, r0
     f7e:	09 95       	icall
     f80:	89 2b       	or	r24, r25
     f82:	59 f0       	breq	.+22     	; 0xf9a <_ZN13Adafruit_FONA5beginEhh+0x10c>
     f84:	f7 01       	movw	r30, r14
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	dc 01       	movw	r26, r24
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	06 80       	ldd	r0, Z+6	; 0x06
     f92:	f7 81       	ldd	r31, Z+7	; 0x07
     f94:	e0 2d       	mov	r30, r0
     f96:	09 95       	icall
     f98:	e9 cf       	rjmp	.-46     	; 0xf6c <_ZN13Adafruit_FONA5beginEhh+0xde>
     f9a:	24 ef       	ldi	r18, 0xF4	; 244
     f9c:	31 e0       	ldi	r19, 0x01	; 1
     f9e:	47 e7       	ldi	r20, 0x77	; 119
     fa0:	53 e0       	ldi	r21, 0x03	; 3
     fa2:	64 e7       	ldi	r22, 0x74	; 116
     fa4:	73 e0       	ldi	r23, 0x03	; 3
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fac:	81 11       	cpse	r24, r1
     fae:	12 c0       	rjmp	.+36     	; 0xfd4 <_ZN13Adafruit_FONA5beginEhh+0x146>
     fb0:	64 ef       	ldi	r22, 0xF4	; 244
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	cb 1a       	sub	r12, r27
     fc0:	d1 08       	sbc	r13, r1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <_ZN13Adafruit_FONA5beginEhh+0x138>
     fc4:	b0 cf       	rjmp	.-160    	; 0xf26 <_ZN13Adafruit_FONA5beginEhh+0x98>
     fc6:	5e c0       	rjmp	.+188    	; 0x1084 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     fc8:	64 e6       	ldi	r22, 0x64	; 100
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     fd4:	f8 01       	movw	r30, r16
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
     fda:	24 ef       	ldi	r18, 0xF4	; 244
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	67 e4       	ldi	r22, 0x47	; 71
     fe0:	73 e0       	ldi	r23, 0x03	; 3
     fe2:	ce 01       	movw	r24, r28
     fe4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fe8:	64 e6       	ldi	r22, 0x64	; 100
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
     ff4:	d8 01       	movw	r26, r16
     ff6:	4d 91       	ld	r20, X+
     ff8:	5c 91       	ld	r21, X
     ffa:	24 ef       	ldi	r18, 0xF4	; 244
     ffc:	31 e0       	ldi	r19, 0x01	; 1
     ffe:	62 e4       	ldi	r22, 0x42	; 66
    1000:	73 e0       	ldi	r23, 0x03	; 3
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1008:	81 11       	cpse	r24, r1
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <_ZN13Adafruit_FONA5beginEhh+0x182>
    100c:	12 e0       	ldi	r17, 0x02	; 2
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <_ZN13Adafruit_FONA5beginEhh+0x184>
    1010:	11 e0       	ldi	r17, 0x01	; 1
    1012:	64 e6       	ldi	r22, 0x64	; 100
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
    1024:	6b e3       	ldi	r22, 0x3B	; 59
    1026:	73 e0       	ldi	r23, 0x03	; 3
    1028:	8e e9       	ldi	r24, 0x9E	; 158
    102a:	93 e0       	ldi	r25, 0x03	; 3
    102c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1030:	69 e0       	ldi	r22, 0x09	; 9
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	8e e9       	ldi	r24, 0x9E	; 158
    1036:	93 e0       	ldi	r25, 0x03	; 3
    1038:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    103c:	69 e0       	ldi	r22, 0x09	; 9
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	f7 01       	movw	r30, r14
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	64 ef       	ldi	r22, 0xF4	; 244
    104e:	71 e0       	ldi	r23, 0x01	; 1
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
    1056:	64 e3       	ldi	r22, 0x34	; 52
    1058:	73 e0       	ldi	r23, 0x03	; 3
    105a:	8e e9       	ldi	r24, 0x9E	; 158
    105c:	93 e0       	ldi	r25, 0x03	; 3
    105e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1062:	2f 96       	adiw	r28, 0x0f	; 15
    1064:	be 01       	movw	r22, r28
    1066:	8e e9       	ldi	r24, 0x9E	; 158
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    106e:	69 e2       	ldi	r22, 0x29	; 41
    1070:	73 e0       	ldi	r23, 0x03	; 3
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 8a 23 	call	0x4714	; 0x4714 <strstr_P>
    1078:	89 2b       	or	r24, r25
    107a:	11 f4       	brne	.+4      	; 0x1080 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	35 c0       	rjmp	.+106    	; 0x10ea <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1080:	81 2f       	mov	r24, r17
    1082:	33 c0       	rjmp	.+102    	; 0x10ea <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1084:	d8 01       	movw	r26, r16
    1086:	4d 91       	ld	r20, X+
    1088:	5c 91       	ld	r21, X
    108a:	24 ef       	ldi	r18, 0xF4	; 244
    108c:	31 e0       	ldi	r19, 0x01	; 1
    108e:	61 e7       	ldi	r22, 0x71	; 113
    1090:	73 e0       	ldi	r23, 0x03	; 3
    1092:	ce 01       	movw	r24, r28
    1094:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1098:	64 e6       	ldi	r22, 0x64	; 100
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
    10a4:	f8 01       	movw	r30, r16
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	24 ef       	ldi	r18, 0xF4	; 244
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	6e e6       	ldi	r22, 0x6E	; 110
    10b0:	73 e0       	ldi	r23, 0x03	; 3
    10b2:	ce 01       	movw	r24, r28
    10b4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10b8:	64 e6       	ldi	r22, 0x64	; 100
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
    10c4:	d8 01       	movw	r26, r16
    10c6:	4d 91       	ld	r20, X+
    10c8:	5c 91       	ld	r21, X
    10ca:	24 ef       	ldi	r18, 0xF4	; 244
    10cc:	31 e0       	ldi	r19, 0x01	; 1
    10ce:	6b e6       	ldi	r22, 0x6B	; 107
    10d0:	73 e0       	ldi	r23, 0x03	; 3
    10d2:	ce 01       	movw	r24, r28
    10d4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10d8:	81 11       	cpse	r24, r1
    10da:	76 cf       	rjmp	.-276    	; 0xfc8 <_ZN13Adafruit_FONA5beginEhh+0x13a>
    10dc:	6c e4       	ldi	r22, 0x4C	; 76
    10de:	73 e0       	ldi	r23, 0x03	; 3
    10e0:	8e e9       	ldi	r24, 0x9E	; 158
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	08 95       	ret

000010fc <_ZN13Adafruit_FONA9HTTP_initEv>:
    10fc:	fc 01       	movw	r30, r24
    10fe:	e5 5e       	subi	r30, 0xE5	; 229
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	40 81       	ld	r20, Z
    1104:	51 81       	ldd	r21, Z+1	; 0x01
    1106:	24 ef       	ldi	r18, 0xF4	; 244
    1108:	31 e0       	ldi	r19, 0x01	; 1
    110a:	63 e5       	ldi	r22, 0x53	; 83
    110c:	71 e0       	ldi	r23, 0x01	; 1
    110e:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001112 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1112:	fc 01       	movw	r30, r24
    1114:	e5 5e       	subi	r30, 0xE5	; 229
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	40 81       	ld	r20, Z
    111a:	51 81       	ldd	r21, Z+1	; 0x01
    111c:	24 ef       	ldi	r18, 0xF4	; 244
    111e:	31 e0       	ldi	r19, 0x01	; 1
    1120:	67 e4       	ldi	r22, 0x47	; 71
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001128 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>:
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	00 d0       	rcall	.+0      	; 0x1136 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0xe>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x10>
    1138:	00 d0       	rcall	.+0      	; 0x113a <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x12>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	8c 01       	movw	r16, r24
    1140:	7b 01       	movw	r14, r22
    1142:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN13Adafruit_FONA9HTTP_termEv>
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN13Adafruit_FONA9HTTP_initEv>
    114c:	88 23       	and	r24, r24
    114e:	59 f1       	breq	.+86     	; 0x11a6 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x7e>
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	66 ea       	ldi	r22, 0xA6	; 166
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1162:	88 23       	and	r24, r24
    1164:	11 f1       	breq	.+68     	; 0x11aa <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x82>
    1166:	a7 01       	movw	r20, r14
    1168:	62 ea       	ldi	r22, 0xA2	; 162
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	c8 01       	movw	r24, r16
    116e:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1172:	88 23       	and	r24, r24
    1174:	e1 f0       	breq	.+56     	; 0x11ae <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x86>
    1176:	b8 01       	movw	r22, r16
    1178:	6b 5e       	subi	r22, 0xEB	; 235
    117a:	7e 4f       	sbci	r23, 0xFE	; 254
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN6StringC1ERKS_>
    1184:	ae 01       	movw	r20, r28
    1186:	4f 5f       	subi	r20, 0xFF	; 255
    1188:	5f 4f       	sbci	r21, 0xFF	; 255
    118a:	6f e9       	ldi	r22, 0x9F	; 159
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	c8 01       	movw	r24, r16
    1190:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1194:	18 2f       	mov	r17, r24
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <_ZN6StringD1Ev>
    119e:	11 23       	and	r17, r17
    11a0:	41 f0       	breq	.+16     	; 0x11b2 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8a>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	07 c0       	rjmp	.+14     	; 0x11b4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11aa:	83 e0       	ldi	r24, 0x03	; 3
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11ae:	84 e0       	ldi	r24, 0x04	; 4
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11b2:	80 e4       	ldi	r24, 0x40	; 64
    11b4:	26 96       	adiw	r28, 0x06	; 6
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	08 95       	ret

000011ce <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
    11e0:	68 01       	movw	r12, r16
    11e2:	87 01       	movw	r16, r14
    11e4:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    11e8:	b6 01       	movw	r22, r12
    11ea:	ce 01       	movw	r24, r28
    11ec:	0f 96       	adiw	r24, 0x0f	; 15
    11ee:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strcmp_P>
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	89 2b       	or	r24, r25
    11f6:	09 f0       	breq	.+2      	; 0x11fa <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	82 2f       	mov	r24, r18
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	08 95       	ret

0000120e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	79 01       	movw	r14, r18
    121e:	98 01       	movw	r18, r16
    1220:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    1224:	b7 01       	movw	r22, r14
    1226:	ce 01       	movw	r24, r28
    1228:	0f 96       	adiw	r24, 0x0f	; 15
    122a:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strcmp_P>
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	89 2b       	or	r24, r25
    1232:	09 f0       	breq	.+2      	; 0x1236 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	82 2f       	mov	r24, r18
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <_ZN13Adafruit_FONA10enableGPRSEb>:
    1246:	7f 92       	push	r7
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
    1262:	28 ee       	ldi	r18, 0xE8	; 232
    1264:	3d ef       	ldi	r19, 0xFD	; 253
    1266:	66 23       	and	r22, r22
    1268:	09 f4       	brne	.+2      	; 0x126c <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    126a:	1f c1       	rjmp	.+574    	; 0x14aa <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    126c:	45 ed       	ldi	r20, 0xD5	; 213
    126e:	52 e0       	ldi	r21, 0x02	; 2
    1270:	6a ec       	ldi	r22, 0xCA	; 202
    1272:	72 e0       	ldi	r23, 0x02	; 2
    1274:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1278:	81 11       	cpse	r24, r1
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	78 2e       	mov	r7, r24
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1282:	77 24       	eor	r7, r7
    1284:	73 94       	inc	r7
    1286:	7e 01       	movw	r14, r28
    1288:	85 ee       	ldi	r24, 0xE5	; 229
    128a:	e8 1a       	sub	r14, r24
    128c:	8e ef       	ldi	r24, 0xFE	; 254
    128e:	f8 0a       	sbc	r15, r24
    1290:	f7 01       	movw	r30, r14
    1292:	40 81       	ld	r20, Z
    1294:	51 81       	ldd	r21, Z+1	; 0x01
    1296:	20 e1       	ldi	r18, 0x10	; 16
    1298:	37 e2       	ldi	r19, 0x27	; 39
    129a:	6f eb       	ldi	r22, 0xBF	; 191
    129c:	72 e0       	ldi	r23, 0x02	; 2
    129e:	ce 01       	movw	r24, r28
    12a0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    12a8:	25 c1       	rjmp	.+586    	; 0x14f4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    12aa:	f7 01       	movw	r30, r14
    12ac:	40 81       	ld	r20, Z
    12ae:	51 81       	ldd	r21, Z+1	; 0x01
    12b0:	20 e1       	ldi	r18, 0x10	; 16
    12b2:	37 e2       	ldi	r19, 0x27	; 39
    12b4:	61 ea       	ldi	r22, 0xA1	; 161
    12b6:	72 e0       	ldi	r23, 0x02	; 2
    12b8:	ce 01       	movw	r24, r28
    12ba:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    12c2:	1a c1       	rjmp	.+564    	; 0x14f8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    12c4:	4e 01       	movw	r8, r28
    12c6:	f2 ef       	ldi	r31, 0xF2	; 242
    12c8:	8f 1a       	sub	r8, r31
    12ca:	fe ef       	ldi	r31, 0xFE	; 254
    12cc:	9f 0a       	sbc	r9, r31
    12ce:	f4 01       	movw	r30, r8
    12d0:	40 81       	ld	r20, Z
    12d2:	51 81       	ldd	r21, Z+1	; 0x01
    12d4:	41 15       	cp	r20, r1
    12d6:	51 05       	cpc	r21, r1
    12d8:	71 f4       	brne	.+28     	; 0x12f6 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    12da:	f7 01       	movw	r30, r14
    12dc:	40 81       	ld	r20, Z
    12de:	51 81       	ldd	r21, Z+1	; 0x01
    12e0:	2f ef       	ldi	r18, 0xFF	; 255
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	6c e3       	ldi	r22, 0x3C	; 60
    12e6:	72 e0       	ldi	r23, 0x02	; 2
    12e8:	ce 01       	movw	r24, r28
    12ea:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12ee:	81 11       	cpse	r24, r1
    12f0:	ce c0       	rjmp	.+412    	; 0x148e <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    12f2:	89 e0       	ldi	r24, 0x09	; 9
    12f4:	0e c1       	rjmp	.+540    	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    12f6:	f7 01       	movw	r30, r14
    12f8:	20 81       	ld	r18, Z
    12fa:	31 81       	ldd	r19, Z+1	; 0x01
    12fc:	00 e1       	ldi	r16, 0x10	; 16
    12fe:	17 e2       	ldi	r17, 0x27	; 39
    1300:	6d e8       	ldi	r22, 0x8D	; 141
    1302:	72 e0       	ldi	r23, 0x02	; 2
    1304:	ce 01       	movw	r24, r28
    1306:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    130a:	88 23       	and	r24, r24
    130c:	09 f4       	brne	.+2      	; 0x1310 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    130e:	f6 c0       	rjmp	.+492    	; 0x14fc <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    1310:	ce 01       	movw	r24, r28
    1312:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN13Adafruit_FONA10flushInputEv>
    1316:	8e 01       	movw	r16, r28
    1318:	03 5e       	subi	r16, 0xE3	; 227
    131a:	1e 4f       	sbci	r17, 0xFE	; 254
    131c:	63 e8       	ldi	r22, 0x83	; 131
    131e:	72 e0       	ldi	r23, 0x02	; 2
    1320:	f8 01       	movw	r30, r16
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    132a:	f4 01       	movw	r30, r8
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	f8 01       	movw	r30, r16
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    133a:	5e 01       	movw	r10, r28
    133c:	f0 ef       	ldi	r31, 0xF0	; 240
    133e:	af 1a       	sub	r10, r31
    1340:	fe ef       	ldi	r31, 0xFE	; 254
    1342:	bf 0a       	sbc	r11, r31
    1344:	f5 01       	movw	r30, r10
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	89 2b       	or	r24, r25
    134c:	79 f0       	breq	.+30     	; 0x136c <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    134e:	65 e2       	ldi	r22, 0x25	; 37
    1350:	71 e0       	ldi	r23, 0x01	; 1
    1352:	f8 01       	movw	r30, r16
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    135c:	f5 01       	movw	r30, r10
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	f8 01       	movw	r30, r16
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    136c:	6e 01       	movw	r12, r28
    136e:	fe ee       	ldi	r31, 0xEE	; 238
    1370:	cf 1a       	sub	r12, r31
    1372:	fe ef       	ldi	r31, 0xFE	; 254
    1374:	df 0a       	sbc	r13, r31
    1376:	f6 01       	movw	r30, r12
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	89 2b       	or	r24, r25
    137e:	79 f0       	breq	.+30     	; 0x139e <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1380:	65 e2       	ldi	r22, 0x25	; 37
    1382:	71 e0       	ldi	r23, 0x01	; 1
    1384:	f8 01       	movw	r30, r16
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    138e:	f6 01       	movw	r30, r12
    1390:	60 81       	ld	r22, Z
    1392:	71 81       	ldd	r23, Z+1	; 0x01
    1394:	f8 01       	movw	r30, r16
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    139e:	67 e2       	ldi	r22, 0x27	; 39
    13a0:	71 e0       	ldi	r23, 0x01	; 1
    13a2:	f8 01       	movw	r30, r16
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    13ac:	6c e7       	ldi	r22, 0x7C	; 124
    13ae:	72 e0       	ldi	r23, 0x02	; 2
    13b0:	8e e9       	ldi	r24, 0x9E	; 158
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    13b8:	62 e7       	ldi	r22, 0x72	; 114
    13ba:	72 e0       	ldi	r23, 0x02	; 2
    13bc:	8e e9       	ldi	r24, 0x9E	; 158
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    13c4:	f4 01       	movw	r30, r8
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	8e e9       	ldi	r24, 0x9E	; 158
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    13d2:	f5 01       	movw	r30, r10
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	89 2b       	or	r24, r25
    13da:	69 f0       	breq	.+26     	; 0x13f6 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    13dc:	65 e2       	ldi	r22, 0x25	; 37
    13de:	71 e0       	ldi	r23, 0x01	; 1
    13e0:	8e e9       	ldi	r24, 0x9E	; 158
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    13e8:	f5 01       	movw	r30, r10
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	8e e9       	ldi	r24, 0x9E	; 158
    13f0:	93 e0       	ldi	r25, 0x03	; 3
    13f2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    13f6:	f6 01       	movw	r30, r12
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	89 2b       	or	r24, r25
    13fe:	69 f0       	breq	.+26     	; 0x141a <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    1400:	65 e2       	ldi	r22, 0x25	; 37
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	8e e9       	ldi	r24, 0x9E	; 158
    1406:	93 e0       	ldi	r25, 0x03	; 3
    1408:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    140c:	f6 01       	movw	r30, r12
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	8e e9       	ldi	r24, 0x9E	; 158
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    141a:	67 e2       	ldi	r22, 0x27	; 39
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	8e e9       	ldi	r24, 0x9E	; 158
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    1426:	f7 01       	movw	r30, r14
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	40 e1       	ldi	r20, 0x10	; 16
    142e:	57 e2       	ldi	r21, 0x27	; 39
    1430:	ce 01       	movw	r24, r28
    1432:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1436:	88 23       	and	r24, r24
    1438:	09 f4       	brne	.+2      	; 0x143c <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    143a:	62 c0       	rjmp	.+196    	; 0x1500 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    143c:	f5 01       	movw	r30, r10
    143e:	40 81       	ld	r20, Z
    1440:	51 81       	ldd	r21, Z+1	; 0x01
    1442:	41 15       	cp	r20, r1
    1444:	51 05       	cpc	r21, r1
    1446:	39 f4       	brne	.+14     	; 0x1456 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    1448:	f6 01       	movw	r30, r12
    144a:	40 81       	ld	r20, Z
    144c:	51 81       	ldd	r21, Z+1	; 0x01
    144e:	41 15       	cp	r20, r1
    1450:	51 05       	cpc	r21, r1
    1452:	79 f4       	brne	.+30     	; 0x1472 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    1454:	42 cf       	rjmp	.-380    	; 0x12da <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1456:	f7 01       	movw	r30, r14
    1458:	20 81       	ld	r18, Z
    145a:	31 81       	ldd	r19, Z+1	; 0x01
    145c:	00 e1       	ldi	r16, 0x10	; 16
    145e:	17 e2       	ldi	r17, 0x27	; 39
    1460:	6d e5       	ldi	r22, 0x5D	; 93
    1462:	72 e0       	ldi	r23, 0x02	; 2
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    146a:	81 11       	cpse	r24, r1
    146c:	ed cf       	rjmp	.-38     	; 0x1448 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	50 c0       	rjmp	.+160    	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1472:	f7 01       	movw	r30, r14
    1474:	20 81       	ld	r18, Z
    1476:	31 81       	ldd	r19, Z+1	; 0x01
    1478:	00 e1       	ldi	r16, 0x10	; 16
    147a:	17 e2       	ldi	r17, 0x27	; 39
    147c:	69 e4       	ldi	r22, 0x49	; 73
    147e:	72 e0       	ldi	r23, 0x02	; 2
    1480:	ce 01       	movw	r24, r28
    1482:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1486:	81 11       	cpse	r24, r1
    1488:	28 cf       	rjmp	.-432    	; 0x12da <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    148a:	88 e0       	ldi	r24, 0x08	; 8
    148c:	42 c0       	rjmp	.+132    	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    148e:	f7 01       	movw	r30, r14
    1490:	40 81       	ld	r20, Z
    1492:	51 81       	ldd	r21, Z+1	; 0x01
    1494:	2f ef       	ldi	r18, 0xFF	; 255
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	63 e3       	ldi	r22, 0x33	; 51
    149a:	72 e0       	ldi	r23, 0x02	; 2
    149c:	ce 01       	movw	r24, r28
    149e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14a2:	88 23       	and	r24, r24
    14a4:	79 f1       	breq	.+94     	; 0x1504 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    14a6:	87 2d       	mov	r24, r7
    14a8:	34 c0       	rjmp	.+104    	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14aa:	4b e2       	ldi	r20, 0x2B	; 43
    14ac:	52 e0       	ldi	r21, 0x02	; 2
    14ae:	60 e2       	ldi	r22, 0x20	; 32
    14b0:	72 e0       	ldi	r23, 0x02	; 2
    14b2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14b6:	88 23       	and	r24, r24
    14b8:	39 f1       	breq	.+78     	; 0x1508 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    14ba:	8e 01       	movw	r16, r28
    14bc:	05 5e       	subi	r16, 0xE5	; 229
    14be:	1e 4f       	sbci	r17, 0xFE	; 254
    14c0:	f8 01       	movw	r30, r16
    14c2:	40 81       	ld	r20, Z
    14c4:	51 81       	ldd	r21, Z+1	; 0x01
    14c6:	20 e1       	ldi	r18, 0x10	; 16
    14c8:	37 e2       	ldi	r19, 0x27	; 39
    14ca:	63 e1       	ldi	r22, 0x13	; 19
    14cc:	72 e0       	ldi	r23, 0x02	; 2
    14ce:	ce 01       	movw	r24, r28
    14d0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14d4:	88 23       	and	r24, r24
    14d6:	d1 f0       	breq	.+52     	; 0x150c <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    14d8:	f8 01       	movw	r30, r16
    14da:	40 81       	ld	r20, Z
    14dc:	51 81       	ldd	r21, Z+1	; 0x01
    14de:	20 e1       	ldi	r18, 0x10	; 16
    14e0:	37 e2       	ldi	r19, 0x27	; 39
    14e2:	68 e0       	ldi	r22, 0x08	; 8
    14e4:	72 e0       	ldi	r23, 0x02	; 2
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14ec:	88 23       	and	r24, r24
    14ee:	81 f0       	breq	.+32     	; 0x1510 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14fc:	85 e0       	ldi	r24, 0x05	; 5
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1500:	86 e0       	ldi	r24, 0x06	; 6
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1504:	8a e0       	ldi	r24, 0x0A	; 10
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1508:	8b e0       	ldi	r24, 0x0B	; 11
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    150c:	8c e0       	ldi	r24, 0x0C	; 12
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1510:	8d e0       	ldi	r24, 0x0D	; 13
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	bf 90       	pop	r11
    1524:	af 90       	pop	r10
    1526:	9f 90       	pop	r9
    1528:	8f 90       	pop	r8
    152a:	7f 90       	pop	r7
    152c:	08 95       	ret

0000152e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	5b 01       	movw	r10, r22
    1542:	6a 01       	movw	r12, r20
    1544:	e2 2e       	mov	r14, r18
    1546:	0f 96       	adiw	r24, 0x0f	; 15
    1548:	0e 94 8a 23 	call	0x4714	; 0x4714 <strstr_P>
    154c:	ec 01       	movw	r28, r24
    154e:	89 2b       	or	r24, r25
    1550:	c1 f0       	breq	.+48     	; 0x1582 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1552:	c5 01       	movw	r24, r10
    1554:	0e 94 81 23 	call	0x4702	; 0x4702 <__strlen_P>
    1558:	8c 0f       	add	r24, r28
    155a:	9d 1f       	adc	r25, r29
    155c:	c0 e0       	ldi	r28, 0x00	; 0
    155e:	f1 2c       	mov	r15, r1
    1560:	c0 17       	cp	r28, r16
    1562:	41 f0       	breq	.+16     	; 0x1574 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1564:	b7 01       	movw	r22, r14
    1566:	0e 94 ad 23 	call	0x475a	; 0x475a <strchr>
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	51 f0       	breq	.+20     	; 0x1582 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	cf 5f       	subi	r28, 0xFF	; 255
    1572:	f6 cf       	rjmp	.-20     	; 0x1560 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1574:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <atoi>
    1578:	f6 01       	movw	r30, r12
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	08 95       	ret

00001598 <_ZN13Adafruit_FONA12HTTP_readallEjPj>:
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
    15a4:	9b 01       	movw	r18, r22
    15a6:	7a 01       	movw	r14, r20
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	6d eb       	ldi	r22, 0xBD	; 189
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    15b4:	88 23       	and	r24, r24
    15b6:	51 f0       	breq	.+20     	; 0x15cc <_ZN13Adafruit_FONA12HTTP_readallEjPj+0x34>
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	2c e2       	ldi	r18, 0x2C	; 44
    15bc:	a7 01       	movw	r20, r14
    15be:	62 eb       	ldi	r22, 0xB2	; 178
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	ce 01       	movw	r24, r28
    15c4:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15c8:	81 11       	cpse	r24, r1
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <_ZN13Adafruit_FONA12HTTP_readallEjPj+0x36>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret

000015da <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    15da:	4f 92       	push	r4
    15dc:	5f 92       	push	r5
    15de:	6f 92       	push	r6
    15e0:	7f 92       	push	r7
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	ec 01       	movw	r28, r24
    15f8:	6a 01       	movw	r12, r20
    15fa:	59 01       	movw	r10, r18
    15fc:	27 01       	movw	r4, r14
    15fe:	38 01       	movw	r6, r16
    1600:	fc 01       	movw	r30, r24
    1602:	e5 5e       	subi	r30, 0xE5	; 229
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	00 81       	ld	r16, Z
    1608:	11 81       	ldd	r17, Z+1	; 0x01
    160a:	26 2f       	mov	r18, r22
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	84 ef       	ldi	r24, 0xF4	; 244
    1614:	e8 2e       	mov	r14, r24
    1616:	ff 24       	eor	r15, r15
    1618:	f3 94       	inc	r15
    161a:	64 ee       	ldi	r22, 0xE4	; 228
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	ce 01       	movw	r24, r28
    1620:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    1624:	88 23       	and	r24, r24
    1626:	09 f1       	breq	.+66     	; 0x166a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x90>
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	b2 01       	movw	r22, r4
    162c:	ce 01       	movw	r24, r28
    162e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
    1632:	01 e0       	ldi	r16, 0x01	; 1
    1634:	2c e2       	ldi	r18, 0x2C	; 44
    1636:	a6 01       	movw	r20, r12
    1638:	67 ed       	ldi	r22, 0xD7	; 215
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	ce 01       	movw	r24, r28
    163e:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1642:	88 23       	and	r24, r24
    1644:	a1 f0       	breq	.+40     	; 0x166e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x94>
    1646:	02 e0       	ldi	r16, 0x02	; 2
    1648:	2c e2       	ldi	r18, 0x2C	; 44
    164a:	a5 01       	movw	r20, r10
    164c:	6a ec       	ldi	r22, 0xCA	; 202
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1656:	88 23       	and	r24, r24
    1658:	61 f0       	breq	.+24     	; 0x1672 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x98>
    165a:	f6 01       	movw	r30, r12
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	88 3c       	cpi	r24, 0xC8	; 200
    1662:	91 05       	cpc	r25, r1
    1664:	41 f4       	brne	.+16     	; 0x1676 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9c>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    166a:	87 e0       	ldi	r24, 0x07	; 7
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    166e:	88 e0       	ldi	r24, 0x08	; 8
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1672:	89 e0       	ldi	r24, 0x09	; 9
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1676:	80 e8       	ldi	r24, 0x80	; 128
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	08 95       	ret

00001696 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_>:
    1696:	2f 92       	push	r2
    1698:	3f 92       	push	r3
    169a:	4f 92       	push	r4
    169c:	5f 92       	push	r5
    169e:	6f 92       	push	r6
    16a0:	7f 92       	push	r7
    16a2:	8f 92       	push	r8
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x26>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x28>
    16be:	1f 92       	push	r1
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	3c 01       	movw	r6, r24
    16c6:	5b 83       	std	Y+3, r21	; 0x03
    16c8:	4a 83       	std	Y+2, r20	; 0x02
    16ca:	19 01       	movw	r2, r18
    16cc:	28 01       	movw	r4, r16
    16ce:	fd 82       	std	Y+5, r15	; 0x05
    16d0:	ec 82       	std	Y+4, r14	; 0x04
    16d2:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	8f 70       	andi	r24, 0x0F	; 15
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x4a>
    16de:	59 c0       	rjmp	.+178    	; 0x1792 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfc>
    16e0:	4a 81       	ldd	r20, Y+2	; 0x02
    16e2:	5b 81       	ldd	r21, Y+3	; 0x03
    16e4:	6a ea       	ldi	r22, 0xAA	; 170
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	c3 01       	movw	r24, r6
    16ea:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    16ee:	81 11       	cpse	r24, r1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x62>
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	80 61       	ori	r24, 0x10	; 16
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	a2 01       	movw	r20, r4
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	00 ec       	ldi	r16, 0xC0	; 192
    1700:	14 ed       	ldi	r17, 0xD4	; 212
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	c3 01       	movw	r24, r6
    1708:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    170c:	81 11       	cpse	r24, r1
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x80>
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	85 60       	ori	r24, 0x05	; 5
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1716:	f3 01       	movw	r30, r6
    1718:	e3 5e       	subi	r30, 0xE3	; 227
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	dc 01       	movw	r26, r24
    1722:	ed 91       	ld	r30, X+
    1724:	fc 91       	ld	r31, X
    1726:	02 80       	ldd	r0, Z+2	; 0x02
    1728:	f3 81       	ldd	r31, Z+3	; 0x03
    172a:	e0 2d       	mov	r30, r0
    172c:	a2 01       	movw	r20, r4
    172e:	b1 01       	movw	r22, r2
    1730:	09 95       	icall
    1732:	f3 01       	movw	r30, r6
    1734:	e5 5e       	subi	r30, 0xE5	; 229
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	40 e1       	ldi	r20, 0x10	; 16
    173e:	57 e2       	ldi	r21, 0x27	; 39
    1740:	c3 01       	movw	r24, r6
    1742:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1746:	81 11       	cpse	r24, r1
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xba>
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	86 60       	ori	r24, 0x06	; 6
    174e:	22 c0       	rjmp	.+68     	; 0x1794 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1750:	10 e1       	ldi	r17, 0x10	; 16
    1752:	e1 2e       	mov	r14, r17
    1754:	17 e2       	ldi	r17, 0x27	; 39
    1756:	f1 2e       	mov	r15, r17
    1758:	00 e0       	ldi	r16, 0x00	; 0
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	95 01       	movw	r18, r10
    175e:	4c 81       	ldd	r20, Y+4	; 0x04
    1760:	5d 81       	ldd	r21, Y+5	; 0x05
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	c3 01       	movw	r24, r6
    1766:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    176a:	98 2f       	mov	r25, r24
    176c:	9f 70       	andi	r25, 0x0F	; 15
    176e:	92 30       	cpi	r25, 0x02	; 2
    1770:	18 f0       	brcs	.+6      	; 0x1778 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xe2>
    1772:	b9 81       	ldd	r27, Y+1	; 0x01
    1774:	8b 2b       	or	r24, r27
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1778:	a4 01       	movw	r20, r8
    177a:	b6 01       	movw	r22, r12
    177c:	c3 01       	movw	r24, r6
    177e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <_ZN13Adafruit_FONA12HTTP_readallEjPj>
    1782:	81 11       	cpse	r24, r1
    1784:	03 c0       	rjmp	.+6      	; 0x178c <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xf6>
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	80 62       	ori	r24, 0x20	; 32
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	bf 90       	pop	r11
    17b0:	af 90       	pop	r10
    17b2:	9f 90       	pop	r9
    17b4:	8f 90       	pop	r8
    17b6:	7f 90       	pop	r7
    17b8:	6f 90       	pop	r6
    17ba:	5f 90       	pop	r5
    17bc:	4f 90       	pop	r4
    17be:	3f 90       	pop	r3
    17c0:	2f 90       	pop	r2
    17c2:	08 95       	ret

000017c4 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_>:
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x26>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x28>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	19 01       	movw	r2, r18
    17f6:	28 01       	movw	r4, r16
    17f8:	fa 82       	std	Y+2, r15	; 0x02
    17fa:	e9 82       	std	Y+1, r14	; 0x01
    17fc:	36 01       	movw	r6, r12
    17fe:	75 01       	movw	r14, r10
    1800:	46 01       	movw	r8, r12
    1802:	a9 80       	ldd	r10, Y+1	; 0x01
    1804:	ba 80       	ldd	r11, Y+2	; 0x02
    1806:	68 01       	movw	r12, r16
    1808:	8a 01       	movw	r16, r20
    180a:	9b 01       	movw	r18, r22
    180c:	4a ed       	ldi	r20, 0xDA	; 218
    180e:	51 e0       	ldi	r21, 0x01	; 1
    1810:	65 ee       	ldi	r22, 0xE5	; 229
    1812:	71 e0       	ldi	r23, 0x01	; 1
    1814:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_>
    1818:	f8 2e       	mov	r15, r24
    181a:	8f 70       	andi	r24, 0x0F	; 15
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	78 f0       	brcs	.+30     	; 0x183e <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x7a>
    1820:	67 eb       	ldi	r22, 0xB7	; 183
    1822:	71 e0       	ldi	r23, 0x01	; 1
    1824:	8e e9       	ldi	r24, 0x9E	; 158
    1826:	93 e0       	ldi	r25, 0x03	; 3
    1828:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    182c:	6f 2d       	mov	r22, r15
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	4a e0       	ldi	r20, 0x0A	; 10
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	8e e9       	ldi	r24, 0x9E	; 158
    1836:	93 e0       	ldi	r25, 0x03	; 3
    1838:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <_ZN5Print7printlnEii>
    183c:	7b c0       	rjmp	.+246    	; 0x1934 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x170>
    183e:	6a e9       	ldi	r22, 0x9A	; 154
    1840:	71 e0       	ldi	r23, 0x01	; 1
    1842:	8e e9       	ldi	r24, 0x9E	; 158
    1844:	93 e0       	ldi	r25, 0x03	; 3
    1846:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    184a:	a9 81       	ldd	r26, Y+1	; 0x01
    184c:	ba 81       	ldd	r27, Y+2	; 0x02
    184e:	6d 91       	ld	r22, X+
    1850:	7c 91       	ld	r23, X
    1852:	4a e0       	ldi	r20, 0x0A	; 10
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	8e e9       	ldi	r24, 0x9E	; 158
    1858:	93 e0       	ldi	r25, 0x03	; 3
    185a:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    185e:	65 e8       	ldi	r22, 0x85	; 133
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	8e e9       	ldi	r24, 0x9E	; 158
    1864:	93 e0       	ldi	r25, 0x03	; 3
    1866:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    186a:	4a e0       	ldi	r20, 0x0A	; 10
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	b2 01       	movw	r22, r4
    1870:	8e e9       	ldi	r24, 0x9E	; 158
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    1878:	68 e6       	ldi	r22, 0x68	; 104
    187a:	71 e0       	ldi	r23, 0x01	; 1
    187c:	8e e9       	ldi	r24, 0x9E	; 158
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1884:	f3 01       	movw	r30, r6
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	4a e0       	ldi	r20, 0x0A	; 10
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	8e e9       	ldi	r24, 0x9E	; 158
    1890:	93 e0       	ldi	r25, 0x03	; 3
    1892:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_ZN5Print7printlnEji>
    1896:	00 e0       	ldi	r16, 0x00	; 0
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	61 14       	cp	r6, r1
    189c:	71 04       	cpc	r7, r1
    189e:	e1 f1       	breq	.+120    	; 0x1918 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x154>
    18a0:	ab 81       	ldd	r26, Y+3	; 0x03
    18a2:	bc 81       	ldd	r27, Y+4	; 0x04
    18a4:	ed 91       	ld	r30, X+
    18a6:	fc 91       	ld	r31, X
    18a8:	11 97       	sbiw	r26, 0x01	; 1
    18aa:	04 80       	ldd	r0, Z+4	; 0x04
    18ac:	f5 81       	ldd	r31, Z+5	; 0x05
    18ae:	e0 2d       	mov	r30, r0
    18b0:	cd 01       	movw	r24, r26
    18b2:	09 95       	icall
    18b4:	89 2b       	or	r24, r25
    18b6:	89 f3       	breq	.-30     	; 0x189a <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0xd6>
    18b8:	ab 81       	ldd	r26, Y+3	; 0x03
    18ba:	bc 81       	ldd	r27, Y+4	; 0x04
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	11 97       	sbiw	r26, 0x01	; 1
    18c2:	06 80       	ldd	r0, Z+6	; 0x06
    18c4:	f7 81       	ldd	r31, Z+7	; 0x07
    18c6:	e0 2d       	mov	r30, r0
    18c8:	cd 01       	movw	r24, r26
    18ca:	09 95       	icall
    18cc:	e8 2e       	mov	r14, r24
    18ce:	04 15       	cp	r16, r4
    18d0:	15 05       	cpc	r17, r5
    18d2:	a8 f4       	brcc	.+42     	; 0x18fe <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x13a>
    18d4:	6f e5       	ldi	r22, 0x5F	; 95
    18d6:	71 e0       	ldi	r23, 0x01	; 1
    18d8:	8e e9       	ldi	r24, 0x9E	; 158
    18da:	93 e0       	ldi	r25, 0x03	; 3
    18dc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    18e0:	69 e2       	ldi	r22, 0x29	; 41
    18e2:	71 e0       	ldi	r23, 0x01	; 1
    18e4:	8e e9       	ldi	r24, 0x9E	; 158
    18e6:	93 e0       	ldi	r25, 0x03	; 3
    18e8:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    18ec:	6e 2d       	mov	r22, r14
    18ee:	8e e9       	ldi	r24, 0x9E	; 158
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print7printlnEc>
    18f6:	f1 01       	movw	r30, r2
    18f8:	e0 0f       	add	r30, r16
    18fa:	f1 1f       	adc	r31, r17
    18fc:	e0 82       	st	Z, r14
    18fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1902:	85 ff       	sbrs	r24, 5
    1904:	fc cf       	rjmp	.-8      	; 0x18fe <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x13a>
    1906:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    190a:	0f 5f       	subi	r16, 0xFF	; 255
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	b2 e0       	ldi	r27, 0x02	; 2
    1910:	6b 1a       	sub	r6, r27
    1912:	71 08       	sbc	r7, r1
    1914:	29 f6       	brne	.-118    	; 0x18a0 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0xdc>
    1916:	c1 cf       	rjmp	.-126    	; 0x189a <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0xd6>
    1918:	f1 01       	movw	r30, r2
    191a:	e0 0f       	add	r30, r16
    191c:	f1 1f       	adc	r31, r17
    191e:	10 82       	st	Z, r1
    1920:	6c e7       	ldi	r22, 0x7C	; 124
    1922:	71 e0       	ldi	r23, 0x01	; 1
    1924:	8e e9       	ldi	r24, 0x9E	; 158
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN13Adafruit_FONA9HTTP_termEv>
    1934:	8f 2d       	mov	r24, r15
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	7f 90       	pop	r7
    1958:	6f 90       	pop	r6
    195a:	5f 90       	pop	r5
    195c:	4f 90       	pop	r4
    195e:	3f 90       	pop	r3
    1960:	2f 90       	pop	r2
    1962:	08 95       	ret

00001964 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1964:	af 92       	push	r10
    1966:	bf 92       	push	r11
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	ec 01       	movw	r28, r24
    1978:	6a 01       	movw	r12, r20
    197a:	59 01       	movw	r10, r18
    197c:	10 2f       	mov	r17, r16
    197e:	0e 2d       	mov	r16, r14
    1980:	44 ef       	ldi	r20, 0xF4	; 244
    1982:	51 e0       	ldi	r21, 0x01	; 1
    1984:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1988:	21 2f       	mov	r18, r17
    198a:	a5 01       	movw	r20, r10
    198c:	b6 01       	movw	r22, r12
    198e:	ce 01       	movw	r24, r28
    1990:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1994:	18 2f       	mov	r17, r24
    1996:	88 23       	and	r24, r24
    1998:	31 f0       	breq	.+12     	; 0x19a6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	64 ef       	ldi	r22, 0xF4	; 244
    199e:	71 e0       	ldi	r23, 0x01	; 1
    19a0:	ce 01       	movw	r24, r28
    19a2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN13Adafruit_FONA8readlineEjb>
    19a6:	81 2f       	mov	r24, r17
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	08 95       	ret

000019bc <_ZN13Adafruit_FONA14getBattPercentEPj>:
    19bc:	ef 92       	push	r14
    19be:	0f 93       	push	r16
    19c0:	9b 01       	movw	r18, r22
    19c2:	ee 24       	eor	r14, r14
    19c4:	e3 94       	inc	r14
    19c6:	0c e2       	ldi	r16, 0x2C	; 44
    19c8:	42 e2       	ldi	r20, 0x22	; 34
    19ca:	53 e0       	ldi	r21, 0x03	; 3
    19cc:	6b e1       	ldi	r22, 0x1B	; 27
    19ce:	73 e0       	ldi	r23, 0x03	; 3
    19d0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    19d4:	0f 91       	pop	r16
    19d6:	ef 90       	pop	r14
    19d8:	08 95       	ret

000019da <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	28 97       	sbiw	r28, 0x08	; 8
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    19fc:	18 86       	std	Y+8, r1	; 0x08
    19fe:	1f 82       	std	Y+7, r1	; 0x07
    1a00:	1e 82       	std	Y+6, r1	; 0x06
    1a02:	1d 82       	std	Y+5, r1	; 0x05
    1a04:	1c 82       	std	Y+4, r1	; 0x04
    1a06:	1b 82       	std	Y+3, r1	; 0x03
    1a08:	1a 82       	std	Y+2, r1	; 0x02
    1a0a:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1a0c:	e1 2c       	mov	r14, r1
    1a0e:	0c e2       	ldi	r16, 0x2C	; 44
    1a10:	9e 01       	movw	r18, r28
    1a12:	29 5f       	subi	r18, 0xF9	; 249
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	44 e1       	ldi	r20, 0x14	; 20
    1a18:	53 e0       	ldi	r21, 0x03	; 3
    1a1a:	6d e0       	ldi	r22, 0x0D	; 13
    1a1c:	73 e0       	ldi	r23, 0x03	; 3
    1a1e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a22:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1a24:	ee 24       	eor	r14, r14
    1a26:	e3 94       	inc	r14
    1a28:	9e 01       	movw	r18, r28
    1a2a:	2b 5f       	subi	r18, 0xFB	; 251
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	46 e0       	ldi	r20, 0x06	; 6
    1a30:	53 e0       	ldi	r21, 0x03	; 3
    1a32:	6f ef       	ldi	r22, 0xFF	; 255
    1a34:	72 e0       	ldi	r23, 0x02	; 2
    1a36:	c6 01       	movw	r24, r12
    1a38:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a3c:	88 23       	and	r24, r24
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	f8 26       	eor	r15, r24
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1a46:	ff 24       	eor	r15, r15
    1a48:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1a4a:	e1 2c       	mov	r14, r1
    1a4c:	0c e2       	ldi	r16, 0x2C	; 44
    1a4e:	9e 01       	movw	r18, r28
    1a50:	2d 5f       	subi	r18, 0xFD	; 253
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	47 ef       	ldi	r20, 0xF7	; 247
    1a56:	52 e0       	ldi	r21, 0x02	; 2
    1a58:	6e ee       	ldi	r22, 0xEE	; 238
    1a5a:	72 e0       	ldi	r23, 0x02	; 2
    1a5c:	c6 01       	movw	r24, r12
    1a5e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a62:	88 23       	and	r24, r24
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1a66:	1b 81       	ldd	r17, Y+3	; 0x03
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a6a:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	e3 94       	inc	r14
    1a70:	0c e2       	ldi	r16, 0x2C	; 44
    1a72:	9e 01       	movw	r18, r28
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
    1a78:	46 ee       	ldi	r20, 0xE6	; 230
    1a7a:	52 e0       	ldi	r21, 0x02	; 2
    1a7c:	6d ed       	ldi	r22, 0xDD	; 221
    1a7e:	72 e0       	ldi	r23, 0x02	; 2
    1a80:	c6 01       	movw	r24, r12
    1a82:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a86:	81 11       	cpse	r24, r1
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a8a:	91 2f       	mov	r25, r17
    1a8c:	90 62       	ori	r25, 0x20	; 32
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1a90:	99 81       	ldd	r25, Y+1	; 0x01
    1a92:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1a94:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1a98:	8f 2d       	mov	r24, r15
    1a9a:	28 96       	adiw	r28, 0x08	; 8
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	08 95       	ret

00001ab8 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1ab8:	fc 01       	movw	r30, r24
    1aba:	10 82       	st	Z, r1
    1abc:	12 82       	std	Z+2, r1	; 0x02
    1abe:	11 82       	std	Z+1, r1	; 0x01
    1ac0:	13 82       	std	Z+3, r1	; 0x03
    1ac2:	14 82       	std	Z+4, r1	; 0x04
    1ac4:	15 82       	std	Z+5, r1	; 0x05
    1ac6:	16 82       	std	Z+6, r1	; 0x06
    1ac8:	17 82       	std	Z+7, r1	; 0x07
    1aca:	12 86       	std	Z+10, r1	; 0x0a
    1acc:	11 86       	std	Z+9, r1	; 0x09
    1ace:	14 86       	std	Z+12, r1	; 0x0c
    1ad0:	13 86       	std	Z+11, r1	; 0x0b
    1ad2:	08 95       	ret

00001ad4 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1ad4:	2a e0       	ldi	r18, 0x0A	; 10
    1ad6:	82 9f       	mul	r24, r18
    1ad8:	c0 01       	movw	r24, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	09 96       	adiw	r24, 0x09	; 9
    1ade:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <_ZN7Helpers14base64_enc_lenEi>

00001ae2 <_ZN10GsmPayload16createRawPayloadEPh>:
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	ec 01       	movw	r28, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	29 e0       	ldi	r18, 0x09	; 9
    1aec:	fe 01       	movw	r30, r28
    1aee:	db 01       	movw	r26, r22
    1af0:	01 90       	ld	r0, Z+
    1af2:	0d 92       	st	X+, r0
    1af4:	2a 95       	dec	r18
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1af8:	4b 81       	ldd	r20, Y+3	; 0x03
    1afa:	2a e0       	ldi	r18, 0x0A	; 10
    1afc:	42 9f       	mul	r20, r18
    1afe:	a0 01       	movw	r20, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	09 96       	adiw	r24, 0x09	; 9
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <memcpy>

00001b10 <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1b10:	af 92       	push	r10
    1b12:	bf 92       	push	r11
    1b14:	cf 92       	push	r12
    1b16:	df 92       	push	r13
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	6b 01       	movw	r12, r22
    1b2a:	ed b6       	in	r14, 0x3d	; 61
    1b2c:	fe b6       	in	r15, 0x3e	; 62
    1b2e:	fc 01       	movw	r30, r24
    1b30:	03 81       	ldd	r16, Z+3	; 0x03
    1b32:	fa e0       	ldi	r31, 0x0A	; 10
    1b34:	0f 9f       	mul	r16, r31
    1b36:	80 01       	movw	r16, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	07 5f       	subi	r16, 0xF7	; 247
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	2d b7       	in	r18, 0x3d	; 61
    1b40:	3e b7       	in	r19, 0x3e	; 62
    1b42:	20 1b       	sub	r18, r16
    1b44:	31 0b       	sbc	r19, r17
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	3e bf       	out	0x3e, r19	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	2d bf       	out	0x3d, r18	; 61
    1b50:	ed b7       	in	r30, 0x3d	; 61
    1b52:	fe b7       	in	r31, 0x3e	; 62
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	5f 01       	movw	r10, r30
    1b58:	bf 01       	movw	r22, r30
    1b5a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_ZN10GsmPayload16createRawPayloadEPh>
    1b5e:	a8 01       	movw	r20, r16
    1b60:	b5 01       	movw	r22, r10
    1b62:	c6 01       	movw	r24, r12
    1b64:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN7Helpers13base64_encodeEPcPhi>
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	fe be       	out	0x3e, r15	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	ed be       	out	0x3d, r14	; 61
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	08 95       	ret

00001b88 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1b88:	fc 01       	movw	r30, r24
    1b8a:	74 87       	std	Z+12, r23	; 0x0c
    1b8c:	63 87       	std	Z+11, r22	; 0x0b
    1b8e:	43 83       	std	Z+3, r20	; 0x03
    1b90:	08 95       	ret

00001b92 <_ZN10GsmPayload11setModuleIdEh>:
    1b92:	fc 01       	movw	r30, r24
    1b94:	60 83       	st	Z, r22
    1b96:	08 95       	ret

00001b98 <_ZN10GsmPayload13getBootNumberEv>:
    1b98:	fc 01       	movw	r30, r24
    1b9a:	81 81       	ldd	r24, Z+1	; 0x01
    1b9c:	92 81       	ldd	r25, Z+2	; 0x02
    1b9e:	08 95       	ret

00001ba0 <_ZN10GsmPayload13setBootNumberEj>:
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	72 83       	std	Z+2, r23	; 0x02
    1ba4:	61 83       	std	Z+1, r22	; 0x01
    1ba6:	08 95       	ret

00001ba8 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1ba8:	fc 01       	movw	r30, r24
    1baa:	45 83       	std	Z+5, r20	; 0x05
    1bac:	56 83       	std	Z+6, r21	; 0x06
    1bae:	67 83       	std	Z+7, r22	; 0x07
    1bb0:	70 87       	std	Z+8, r23	; 0x08
    1bb2:	08 95       	ret

00001bb4 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	ec 01       	movw	r28, r24
    1bba:	63 e2       	ldi	r22, 0x23	; 35
    1bbc:	74 e0       	ldi	r23, 0x04	; 4
    1bbe:	8e e9       	ldi	r24, 0x9E	; 158
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1bc6:	4a e0       	ldi	r20, 0x0A	; 10
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	68 81       	ld	r22, Y
    1bcc:	8e e9       	ldi	r24, 0x9E	; 158
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN5Print5printEhi>
    1bd4:	6f e1       	ldi	r22, 0x1F	; 31
    1bd6:	74 e0       	ldi	r23, 0x04	; 4
    1bd8:	8e e9       	ldi	r24, 0x9E	; 158
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1be0:	6a e1       	ldi	r22, 0x1A	; 26
    1be2:	74 e0       	ldi	r23, 0x04	; 4
    1be4:	8e e9       	ldi	r24, 0x9E	; 158
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1bec:	4a e0       	ldi	r20, 0x0A	; 10
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	69 81       	ldd	r22, Y+1	; 0x01
    1bf2:	8e e9       	ldi	r24, 0x9E	; 158
    1bf4:	93 e0       	ldi	r25, 0x03	; 3
    1bf6:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN5Print5printEhi>
    1bfa:	66 e1       	ldi	r22, 0x16	; 22
    1bfc:	74 e0       	ldi	r23, 0x04	; 4
    1bfe:	8e e9       	ldi	r24, 0x9E	; 158
    1c00:	93 e0       	ldi	r25, 0x03	; 3
    1c02:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	74 e0       	ldi	r23, 0x04	; 4
    1c0a:	8e e9       	ldi	r24, 0x9E	; 158
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1c12:	6b 81       	ldd	r22, Y+3	; 0x03
    1c14:	63 70       	andi	r22, 0x03	; 3
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	4a e0       	ldi	r20, 0x0A	; 10
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	8e e9       	ldi	r24, 0x9E	; 158
    1c1e:	93 e0       	ldi	r25, 0x03	; 3
    1c20:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN5Print5printEii>
    1c24:	67 ef       	ldi	r22, 0xF7	; 247
    1c26:	73 e0       	ldi	r23, 0x03	; 3
    1c28:	8e e9       	ldi	r24, 0x9E	; 158
    1c2a:	93 e0       	ldi	r25, 0x03	; 3
    1c2c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1c30:	6b 81       	ldd	r22, Y+3	; 0x03
    1c32:	6c 71       	andi	r22, 0x1C	; 28
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	75 95       	asr	r23
    1c38:	67 95       	ror	r22
    1c3a:	75 95       	asr	r23
    1c3c:	67 95       	ror	r22
    1c3e:	4a e0       	ldi	r20, 0x0A	; 10
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	8e e9       	ldi	r24, 0x9E	; 158
    1c44:	93 e0       	ldi	r25, 0x03	; 3
    1c46:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN5Print5printEii>
    1c4a:	6e ee       	ldi	r22, 0xEE	; 238
    1c4c:	73 e0       	ldi	r23, 0x03	; 3
    1c4e:	8e e9       	ldi	r24, 0x9E	; 158
    1c50:	93 e0       	ldi	r25, 0x03	; 3
    1c52:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1c56:	6b 81       	ldd	r22, Y+3	; 0x03
    1c58:	65 fb       	bst	r22, 5
    1c5a:	66 27       	eor	r22, r22
    1c5c:	60 f9       	bld	r22, 0
    1c5e:	4a e0       	ldi	r20, 0x0A	; 10
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	8e e9       	ldi	r24, 0x9E	; 158
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN5Print5printEii>
    1c6c:	6a ee       	ldi	r22, 0xEA	; 234
    1c6e:	73 e0       	ldi	r23, 0x03	; 3
    1c70:	8e e9       	ldi	r24, 0x9E	; 158
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1c78:	6d ed       	ldi	r22, 0xDD	; 221
    1c7a:	73 e0       	ldi	r23, 0x03	; 3
    1c7c:	8e e9       	ldi	r24, 0x9E	; 158
    1c7e:	93 e0       	ldi	r25, 0x03	; 3
    1c80:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1c84:	4a e0       	ldi	r20, 0x0A	; 10
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	6a 81       	ldd	r22, Y+2	; 0x02
    1c8a:	8e e9       	ldi	r24, 0x9E	; 158
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <_ZN5Print7printlnEhi>

00001c96 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1c96:	fc 01       	movw	r30, r24
    1c98:	22 81       	ldd	r18, Z+2	; 0x02
    1c9a:	21 11       	cpse	r18, r1
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1c9e:	90 81       	ld	r25, Z
    1ca0:	93 36       	cpi	r25, 0x63	; 99
    1ca2:	19 f0       	breq	.+6      	; 0x1caa <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	97 30       	cpi	r25, 0x07	; 7
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	08 95       	ret

00001cae <_ZN7Helpers15printSensorDataEP10SensorData>:
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	65 ed       	ldi	r22, 0xD5	; 213
    1cb6:	73 e0       	ldi	r23, 0x03	; 3
    1cb8:	8e e9       	ldi	r24, 0x9E	; 158
    1cba:	93 e0       	ldi	r25, 0x03	; 3
    1cbc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cc4:	4a e0       	ldi	r20, 0x0A	; 10
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	8e e9       	ldi	r24, 0x9E	; 158
    1cca:	93 e0       	ldi	r25, 0x03	; 3
    1ccc:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    1cd0:	61 ed       	ldi	r22, 0xD1	; 209
    1cd2:	73 e0       	ldi	r23, 0x03	; 3
    1cd4:	8e e9       	ldi	r24, 0x9E	; 158
    1cd6:	93 e0       	ldi	r25, 0x03	; 3
    1cd8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1cdc:	6b ec       	ldi	r22, 0xCB	; 203
    1cde:	73 e0       	ldi	r23, 0x03	; 3
    1ce0:	8e e9       	ldi	r24, 0x9E	; 158
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1ce8:	6b 81       	ldd	r22, Y+3	; 0x03
    1cea:	7c 81       	ldd	r23, Y+4	; 0x04
    1cec:	4a e0       	ldi	r20, 0x0A	; 10
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	8e e9       	ldi	r24, 0x9E	; 158
    1cf2:	93 e0       	ldi	r25, 0x03	; 3
    1cf4:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    1cf8:	67 ec       	ldi	r22, 0xC7	; 199
    1cfa:	73 e0       	ldi	r23, 0x03	; 3
    1cfc:	8e e9       	ldi	r24, 0x9E	; 158
    1cfe:	93 e0       	ldi	r25, 0x03	; 3
    1d00:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1d04:	6e eb       	ldi	r22, 0xBE	; 190
    1d06:	73 e0       	ldi	r23, 0x03	; 3
    1d08:	8e e9       	ldi	r24, 0x9E	; 158
    1d0a:	93 e0       	ldi	r25, 0x03	; 3
    1d0c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1d10:	6d 81       	ldd	r22, Y+5	; 0x05
    1d12:	7e 81       	ldd	r23, Y+6	; 0x06
    1d14:	4a e0       	ldi	r20, 0x0A	; 10
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	8e e9       	ldi	r24, 0x9E	; 158
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    1d20:	6a eb       	ldi	r22, 0xBA	; 186
    1d22:	73 e0       	ldi	r23, 0x03	; 3
    1d24:	8e e9       	ldi	r24, 0x9E	; 158
    1d26:	93 e0       	ldi	r25, 0x03	; 3
    1d28:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1d2c:	64 eb       	ldi	r22, 0xB4	; 180
    1d2e:	73 e0       	ldi	r23, 0x03	; 3
    1d30:	8e e9       	ldi	r24, 0x9E	; 158
    1d32:	93 e0       	ldi	r25, 0x03	; 3
    1d34:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	4a e0       	ldi	r20, 0x0A	; 10
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	8e e9       	ldi	r24, 0x9E	; 158
    1d42:	93 e0       	ldi	r25, 0x03	; 3
    1d44:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    1d48:	60 eb       	ldi	r22, 0xB0	; 176
    1d4a:	73 e0       	ldi	r23, 0x03	; 3
    1d4c:	8e e9       	ldi	r24, 0x9E	; 158
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1d54:	69 ea       	ldi	r22, 0xA9	; 169
    1d56:	73 e0       	ldi	r23, 0x03	; 3
    1d58:	8e e9       	ldi	r24, 0x9E	; 158
    1d5a:	93 e0       	ldi	r25, 0x03	; 3
    1d5c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    1d60:	4a e0       	ldi	r20, 0x0A	; 10
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	69 85       	ldd	r22, Y+9	; 0x09
    1d66:	8e e9       	ldi	r24, 0x9E	; 158
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <_ZN5Print7printlnEhi>

00001d72 <_ZN7Helpers12freeListSizeEv>:
    1d72:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    1d76:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	30 97       	sbiw	r30, 0x00	; 0
    1d80:	49 f0       	breq	.+18     	; 0x1d94 <_ZN7Helpers12freeListSizeEv+0x22>
    1d82:	02 96       	adiw	r24, 0x02	; 2
    1d84:	20 81       	ld	r18, Z
    1d86:	31 81       	ldd	r19, Z+1	; 0x01
    1d88:	82 0f       	add	r24, r18
    1d8a:	93 1f       	adc	r25, r19
    1d8c:	02 80       	ldd	r0, Z+2	; 0x02
    1d8e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d90:	e0 2d       	mov	r30, r0
    1d92:	f5 cf       	rjmp	.-22     	; 0x1d7e <_ZN7Helpers12freeListSizeEv+0xc>
    1d94:	08 95       	ret

00001d96 <_ZN7Helpers10freeMemoryEv>:
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <_ZN7Helpers10freeMemoryEv+0xa>
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    1da8:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5f       	subi	r16, 0xFF	; 255
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	29 f4       	brne	.+10     	; 0x1dc0 <_ZN7Helpers10freeMemoryEv+0x2a>
    1db6:	0c 58       	subi	r16, 0x8C	; 140
    1db8:	14 40       	sbci	r17, 0x04	; 4
    1dba:	1a 83       	std	Y+2, r17	; 0x02
    1dbc:	09 83       	std	Y+1, r16	; 0x01
    1dbe:	0a c0       	rjmp	.+20     	; 0x1dd4 <_ZN7Helpers10freeMemoryEv+0x3e>
    1dc0:	08 1b       	sub	r16, r24
    1dc2:	19 0b       	sbc	r17, r25
    1dc4:	1a 83       	std	Y+2, r17	; 0x02
    1dc6:	09 83       	std	Y+1, r16	; 0x01
    1dc8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <_ZN7Helpers12freeListSizeEv>
    1dcc:	80 0f       	add	r24, r16
    1dce:	91 1f       	adc	r25, r17
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	08 95       	ret

00001de6 <_ZN7Helpers14base64_enc_lenEi>:
    1de6:	9c 01       	movw	r18, r24
    1de8:	2e 5f       	subi	r18, 0xFE	; 254
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	e3 e0       	ldi	r30, 0x03	; 3
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	c9 01       	movw	r24, r18
    1df2:	bf 01       	movw	r22, r30
    1df4:	0e 94 18 21 	call	0x4230	; 0x4230 <__divmodhi4>
    1df8:	a9 01       	movw	r20, r18
    1dfa:	48 1b       	sub	r20, r24
    1dfc:	59 0b       	sbc	r21, r25
    1dfe:	ca 01       	movw	r24, r20
    1e00:	bf 01       	movw	r22, r30
    1e02:	0e 94 18 21 	call	0x4230	; 0x4230 <__divmodhi4>
    1e06:	cb 01       	movw	r24, r22
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	08 95       	ret

00001e14 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1e14:	dc 01       	movw	r26, r24
    1e16:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1e18:	80 81       	ld	r24, Z
    1e1a:	86 95       	lsr	r24
    1e1c:	86 95       	lsr	r24
    1e1e:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1e20:	80 81       	ld	r24, Z
    1e22:	83 70       	andi	r24, 0x03	; 3
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	92 95       	swap	r25
    1e28:	9f 70       	andi	r25, 0x0F	; 15
    1e2a:	20 e1       	ldi	r18, 0x10	; 16
    1e2c:	82 9f       	mul	r24, r18
    1e2e:	90 0d       	add	r25, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	9c 93       	st	X, r25
    1e36:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	9f 70       	andi	r25, 0x0F	; 15
    1e3c:	99 0f       	add	r25, r25
    1e3e:	99 0f       	add	r25, r25
    1e40:	22 81       	ldd	r18, Z+2	; 0x02
    1e42:	22 95       	swap	r18
    1e44:	26 95       	lsr	r18
    1e46:	26 95       	lsr	r18
    1e48:	23 70       	andi	r18, 0x03	; 3
    1e4a:	92 0f       	add	r25, r18
    1e4c:	12 96       	adiw	r26, 0x02	; 2
    1e4e:	9c 93       	st	X, r25
    1e50:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	8f 73       	andi	r24, 0x3F	; 63
    1e56:	13 96       	adiw	r26, 0x03	; 3
    1e58:	8c 93       	st	X, r24
    1e5a:	08 95       	ret

00001e5c <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1e5c:	6f 92       	push	r6
    1e5e:	7f 92       	push	r7
    1e60:	8f 92       	push	r8
    1e62:	9f 92       	push	r9
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	27 97       	sbiw	r28, 0x07	; 7
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	6c 01       	movw	r12, r24
    1e8a:	5b 01       	movw	r10, r22
    1e8c:	3b 01       	movw	r6, r22
    1e8e:	64 0e       	add	r6, r20
    1e90:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1e92:	e1 2c       	mov	r14, r1
    1e94:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1e96:	00 e0       	ldi	r16, 0x00	; 0
    1e98:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1e9a:	4e 01       	movw	r8, r28
    1e9c:	85 e0       	ldi	r24, 0x05	; 5
    1e9e:	88 0e       	add	r8, r24
    1ea0:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1ea2:	6a 14       	cp	r6, r10
    1ea4:	7b 04       	cpc	r7, r11
    1ea6:	49 f1       	breq	.+82     	; 0x1efa <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1ea8:	c8 01       	movw	r24, r16
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	f5 01       	movw	r30, r10
    1eae:	21 91       	ld	r18, Z+
    1eb0:	5f 01       	movw	r10, r30
    1eb2:	f4 01       	movw	r30, r8
    1eb4:	e0 0f       	add	r30, r16
    1eb6:	f1 1f       	adc	r31, r17
    1eb8:	20 83       	st	Z, r18
		if(i == 3) {
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	11 f0       	breq	.+4      	; 0x1ec4 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	ef cf       	rjmp	.-34     	; 0x1ea2 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1ec4:	b4 01       	movw	r22, r8
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_Z8a3_to_a4PhS_>
    1ece:	de 01       	movw	r26, r28
    1ed0:	11 96       	adiw	r26, 0x01	; 1
    1ed2:	c6 01       	movw	r24, r12
    1ed4:	8e 0d       	add	r24, r14
    1ed6:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1ed8:	ed 91       	ld	r30, X+
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	e7 5d       	subi	r30, 0xD7	; 215
    1ede:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee0:	24 91       	lpm	r18, Z
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	21 93       	st	Z+, r18
    1ee6:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1ee8:	a8 15       	cp	r26, r8
    1eea:	b9 05       	cpc	r27, r9
    1eec:	a9 f7       	brne	.-22     	; 0x1ed8 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1eee:	f4 e0       	ldi	r31, 0x04	; 4
    1ef0:	ef 0e       	add	r14, r31
    1ef2:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	e3 cf       	rjmp	.-58     	; 0x1ec0 <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1efa:	01 15       	cp	r16, r1
    1efc:	11 05       	cpc	r17, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1f00:	3c c0       	rjmp	.+120    	; 0x1f7a <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1f02:	be 01       	movw	r22, r28
    1f04:	6b 5f       	subi	r22, 0xFB	; 251
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	fb 01       	movw	r30, r22
    1f0a:	e0 0f       	add	r30, r16
    1f0c:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1f0e:	cf 01       	movw	r24, r30
    1f10:	86 1b       	sub	r24, r22
    1f12:	97 0b       	sbc	r25, r23
    1f14:	03 97       	sbiw	r24, 0x03	; 3
    1f16:	14 f4       	brge	.+4      	; 0x1f1c <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1f18:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1f1a:	f9 cf       	rjmp	.-14     	; 0x1f0e <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	5c 01       	movw	r10, r24
    1f22:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_Z8a3_to_a4PhS_>
    1f26:	c6 01       	movw	r24, r12
    1f28:	8e 0d       	add	r24, r14
    1f2a:	9f 1d       	adc	r25, r15
    1f2c:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1f2e:	ed 91       	ld	r30, X+
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	e7 5d       	subi	r30, 0xD7	; 215
    1f34:	fb 4f       	sbci	r31, 0xFB	; 251
    1f36:	24 91       	lpm	r18, Z
    1f38:	fc 01       	movw	r30, r24
    1f3a:	21 93       	st	Z+, r18
    1f3c:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1f3e:	9d 01       	movw	r18, r26
    1f40:	2a 19       	sub	r18, r10
    1f42:	3b 09       	sbc	r19, r11
    1f44:	02 17       	cp	r16, r18
    1f46:	13 07       	cpc	r17, r19
    1f48:	94 f7       	brge	.-28     	; 0x1f2e <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1f4a:	ff ef       	ldi	r31, 0xFF	; 255
    1f4c:	ef 1a       	sub	r14, r31
    1f4e:	ff 0a       	sbc	r15, r31
    1f50:	e0 0e       	add	r14, r16
    1f52:	f1 1e       	adc	r15, r17
    1f54:	f6 01       	movw	r30, r12
    1f56:	ee 0d       	add	r30, r14
    1f58:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f5a:	0c 19       	sub	r16, r12
    1f5c:	1d 09       	sbc	r17, r13
    1f5e:	0e 19       	sub	r16, r14
    1f60:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1f62:	8d e3       	ldi	r24, 0x3D	; 61
    1f64:	7f 01       	movw	r14, r30
    1f66:	ec 18       	sub	r14, r12
    1f68:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f6a:	98 01       	movw	r18, r16
    1f6c:	2e 0f       	add	r18, r30
    1f6e:	3f 1f       	adc	r19, r31
    1f70:	23 30       	cpi	r18, 0x03	; 3
    1f72:	31 05       	cpc	r19, r1
    1f74:	14 f4       	brge	.+4      	; 0x1f7a <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1f76:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f78:	f5 cf       	rjmp	.-22     	; 0x1f64 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1f7a:	f6 01       	movw	r30, r12
    1f7c:	ee 0d       	add	r30, r14
    1f7e:	ff 1d       	adc	r31, r15
    1f80:	10 82       	st	Z, r1
	
	return encLen;
}
    1f82:	c7 01       	movw	r24, r14
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	27 96       	adiw	r28, 0x07	; 7
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	9f 90       	pop	r9
    1fa8:	8f 90       	pop	r8
    1faa:	7f 90       	pop	r7
    1fac:	6f 90       	pop	r6
    1fae:	08 95       	ret

00001fb0 <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	85 e0       	ldi	r24, 0x05	; 5
    1fb4:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <pinMode>
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	85 e0       	ldi	r24, 0x05	; 5
    1fbc:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
    1fc0:	68 eb       	ldi	r22, 0xB8	; 184
    1fc2:	7b e0       	ldi	r23, 0x0B	; 11
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	8d e0       	ldi	r24, 0x0D	; 13
    1fd0:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <pinMode>
    1fd4:	26 e0       	ldi	r18, 0x06	; 6
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	55 e2       	ldi	r21, 0x25	; 37
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	8e e9       	ldi	r24, 0x9E	; 158
    1fe0:	93 e0       	ldi	r25, 0x03	; 3
    1fe2:	0e 94 38 19 	call	0x3270	; 0x3270 <_ZN14HardwareSerial5beginEmh>
    1fe6:	64 eb       	ldi	r22, 0xB4	; 180
    1fe8:	76 e0       	ldi	r23, 0x06	; 6
    1fea:	8e e9       	ldi	r24, 0x9E	; 158
    1fec:	93 e0       	ldi	r25, 0x03	; 3
    1fee:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ff2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    1ff6:	84 60       	ori	r24, 0x04	; 4
    1ff8:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
    1ffc:	08 95       	ret

00001ffe <_Z21ensureFonaInitialisedb>:
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	2c 97       	sbiw	r28, 0x0c	; 12
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	18 2f       	mov	r17, r24
    2018:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    201c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__initState+0xa>
    2026:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__initState+0x9>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__initState+0x2>
    2030:	89 eb       	ldi	r24, 0xB9	; 185
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__initState+0x1>
    2038:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__initState>
    203c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    2040:	81 11       	cpse	r24, r1
    2042:	34 c0       	rjmp	.+104    	; 0x20ac <_Z21ensureFonaInitialisedb+0xae>
    2044:	6f e9       	ldi	r22, 0x9F	; 159
    2046:	76 e0       	ldi	r23, 0x06	; 6
    2048:	8e e9       	ldi	r24, 0x9E	; 158
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	63 e0       	ldi	r22, 0x03	; 3
    2054:	89 eb       	ldi	r24, 0xB9	; 185
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN13Adafruit_FONA5beginEhh>
    205c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__initState+0x3>
    2060:	8e ea       	ldi	r24, 0xAE	; 174
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN12RmMemManager11getModuleIdEv>
    2068:	08 2f       	mov	r16, r24
    206a:	6b e3       	ldi	r22, 0x3B	; 59
    206c:	71 e0       	ldi	r23, 0x01	; 1
    206e:	ce 01       	movw	r24, r28
    2070:	07 96       	adiw	r24, 0x07	; 7
    2072:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <_ZN6StringC1EPKc>
    2076:	60 2f       	mov	r22, r16
    2078:	ce 01       	movw	r24, r28
    207a:	07 96       	adiw	r24, 0x07	; 7
    207c:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN6String6concatEh>
    2080:	be 01       	movw	r22, r28
    2082:	69 5f       	subi	r22, 0xF9	; 249
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	ce 01       	movw	r24, r28
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN6StringC1ERKS_>
    208e:	be 01       	movw	r22, r28
    2090:	6f 5f       	subi	r22, 0xFF	; 255
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	89 eb       	ldi	r24, 0xB9	; 185
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN13Adafruit_FONA12setUserAgentE6String>
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <_ZN6StringD1Ev>
    20a4:	ce 01       	movw	r24, r28
    20a6:	07 96       	adiw	r24, 0x07	; 7
    20a8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <_ZN6StringD1Ev>
    20ac:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    20b0:	83 50       	subi	r24, 0x03	; 3
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	b0 f4       	brcc	.+44     	; 0x20e2 <_Z21ensureFonaInitialisedb+0xe4>
    20b6:	64 e8       	ldi	r22, 0x84	; 132
    20b8:	76 e0       	ldi	r23, 0x06	; 6
    20ba:	8e e9       	ldi	r24, 0x9E	; 158
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    20c2:	69 e2       	ldi	r22, 0x29	; 41
    20c4:	71 e0       	ldi	r23, 0x01	; 1
    20c6:	8e e9       	ldi	r24, 0x9E	; 158
    20c8:	93 e0       	ldi	r25, 0x03	; 3
    20ca:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    20ce:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <__initState+0x3>
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	4a e0       	ldi	r20, 0x0A	; 10
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	8e e9       	ldi	r24, 0x9E	; 158
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <_ZN5Print7printlnEii>
    20e0:	65 c0       	rjmp	.+202    	; 0x21ac <_Z21ensureFonaInitialisedb+0x1ae>
    20e2:	11 23       	and	r17, r17
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <_Z21ensureFonaInitialisedb+0xea>
    20e6:	b1 c0       	rjmp	.+354    	; 0x224a <_Z21ensureFonaInitialisedb+0x24c>
    20e8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    20ec:	81 11       	cpse	r24, r1
    20ee:	49 c0       	rjmp	.+146    	; 0x2182 <_Z21ensureFonaInitialisedb+0x184>
    20f0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    20f4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    20f8:	6a e0       	ldi	r22, 0x0A	; 10
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodhi4>
    2100:	89 2b       	or	r24, r25
    2102:	19 f0       	breq	.+6      	; 0x210a <_Z21ensureFonaInitialisedb+0x10c>
    2104:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2108:	3c c0       	rjmp	.+120    	; 0x2182 <_Z21ensureFonaInitialisedb+0x184>
    210a:	67 e6       	ldi	r22, 0x67	; 103
    210c:	76 e0       	ldi	r23, 0x06	; 6
    210e:	8e e9       	ldi	r24, 0x9E	; 158
    2110:	93 e0       	ldi	r25, 0x03	; 3
    2112:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	89 eb       	ldi	r24, 0xB9	; 185
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	0e 94 23 09 	call	0x1246	; 0x1246 <_ZN13Adafruit_FONA10enableGPRSEb>
    2120:	18 2f       	mov	r17, r24
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	81 0f       	add	r24, r17
    2126:	82 30       	cpi	r24, 0x02	; 2
    2128:	20 f1       	brcs	.+72     	; 0x2172 <_Z21ensureFonaInitialisedb+0x174>
    212a:	6f e4       	ldi	r22, 0x4F	; 79
    212c:	76 e0       	ldi	r23, 0x06	; 6
    212e:	8e e9       	ldi	r24, 0x9E	; 158
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    2136:	69 e2       	ldi	r22, 0x29	; 41
    2138:	71 e0       	ldi	r23, 0x01	; 1
    213a:	8e e9       	ldi	r24, 0x9E	; 158
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    2142:	61 2f       	mov	r22, r17
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	4a e0       	ldi	r20, 0x0A	; 10
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	8e e9       	ldi	r24, 0x9E	; 158
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <_ZN5Print7printlnEii>
    2152:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2156:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    215a:	cc 97       	sbiw	r24, 0x3c	; 60
    215c:	28 f4       	brcc	.+10     	; 0x2168 <_Z21ensureFonaInitialisedb+0x16a>
    215e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2162:	69 e2       	ldi	r22, 0x29	; 41
    2164:	76 e0       	ldi	r23, 0x06	; 6
    2166:	09 c0       	rjmp	.+18     	; 0x217a <_Z21ensureFonaInitialisedb+0x17c>
    2168:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    216c:	66 e0       	ldi	r22, 0x06	; 6
    216e:	76 e0       	ldi	r23, 0x06	; 6
    2170:	04 c0       	rjmp	.+8      	; 0x217a <_Z21ensureFonaInitialisedb+0x17c>
    2172:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    2176:	66 ee       	ldi	r22, 0xE6	; 230
    2178:	75 e0       	ldi	r23, 0x05	; 5
    217a:	8e e9       	ldi	r24, 0x9E	; 158
    217c:	93 e0       	ldi	r25, 0x03	; 3
    217e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2182:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    2186:	81 50       	subi	r24, 0x01	; 1
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	80 f4       	brcc	.+32     	; 0x21ac <_Z21ensureFonaInitialisedb+0x1ae>
    218c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    2190:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__initState+0xc>
    219a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__initState+0xb>
    219e:	83 ea       	ldi	r24, 0xA3	; 163
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    21a6:	88 23       	and	r24, r24
    21a8:	31 f0       	breq	.+12     	; 0x21b6 <_Z21ensureFonaInitialisedb+0x1b8>
    21aa:	4f c0       	rjmp	.+158    	; 0x224a <_Z21ensureFonaInitialisedb+0x24c>
    21ac:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__initState+0x1>
    21b0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__initState>
    21b4:	4a c0       	rjmp	.+148    	; 0x224a <_Z21ensureFonaInitialisedb+0x24c>
    21b6:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    21ba:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    21be:	6a e0       	ldi	r22, 0x0A	; 10
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodhi4>
    21c6:	89 2b       	or	r24, r25
    21c8:	19 f0       	breq	.+6      	; 0x21d0 <_Z21ensureFonaInitialisedb+0x1d2>
    21ca:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    21ce:	3d c0       	rjmp	.+122    	; 0x224a <_Z21ensureFonaInitialisedb+0x24c>
    21d0:	6b ec       	ldi	r22, 0xCB	; 203
    21d2:	75 e0       	ldi	r23, 0x05	; 5
    21d4:	8e e9       	ldi	r24, 0x9E	; 158
    21d6:	93 e0       	ldi	r25, 0x03	; 3
    21d8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    21dc:	89 eb       	ldi	r24, 0xB9	; 185
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN13Adafruit_FONA7getRSSIEv>
    21e4:	69 83       	std	Y+1, r22	; 0x01
    21e6:	7a 83       	std	Y+2, r23	; 0x02
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	ce 01       	movw	r24, r28
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    21f4:	ce 01       	movw	r24, r28
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    21fc:	81 11       	cpse	r24, r1
    21fe:	13 c0       	rjmp	.+38     	; 0x2226 <_Z21ensureFonaInitialisedb+0x228>
    2200:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    2204:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    2208:	8c 32       	cpi	r24, 0x2C	; 44
    220a:	91 40       	sbci	r25, 0x01	; 1
    220c:	48 f4       	brcc	.+18     	; 0x2220 <_Z21ensureFonaInitialisedb+0x222>
    220e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2212:	6c e9       	ldi	r22, 0x9C	; 156
    2214:	75 e0       	ldi	r23, 0x05	; 5
    2216:	8e e9       	ldi	r24, 0x9E	; 158
    2218:	93 e0       	ldi	r25, 0x03	; 3
    221a:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    221e:	15 c0       	rjmp	.+42     	; 0x224a <_Z21ensureFonaInitialisedb+0x24c>
    2220:	64 e6       	ldi	r22, 0x64	; 100
    2222:	75 e0       	ldi	r23, 0x05	; 5
    2224:	02 c0       	rjmp	.+4      	; 0x222a <_Z21ensureFonaInitialisedb+0x22c>
    2226:	6e e3       	ldi	r22, 0x3E	; 62
    2228:	75 e0       	ldi	r23, 0x05	; 5
    222a:	8e e9       	ldi	r24, 0x9E	; 158
    222c:	93 e0       	ldi	r25, 0x03	; 3
    222e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	ab 81       	ldd	r26, Y+3	; 0x03
    2238:	bc 81       	ldd	r27, Y+4	; 0x04
    223a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__initState+0x5>
    223e:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__initState+0x6>
    2242:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__initState+0x7>
    2246:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__initState+0x8>
    224a:	8e e9       	ldi	r24, 0x9E	; 158
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	2c 96       	adiw	r28, 0x0c	; 12
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <_Z15switchOffSystemv>:
    2264:	69 e4       	ldi	r22, 0x49	; 73
    2266:	71 e0       	ldi	r23, 0x01	; 1
    2268:	8e e9       	ldi	r24, 0x9E	; 158
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	85 e0       	ldi	r24, 0x05	; 5
    2274:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
    2278:	68 eb       	ldi	r22, 0xB8	; 184
    227a:	7b e0       	ldi	r23, 0x0B	; 11
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <delay>

00002284 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	2a 97       	sbiw	r28, 0x0a	; 10
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    2298:	6b e2       	ldi	r22, 0x2B	; 43
    229a:	75 e0       	ldi	r23, 0x05	; 5
    229c:	8e e9       	ldi	r24, 0x9E	; 158
    229e:	93 e0       	ldi	r25, 0x03	; 3
    22a0:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	1b 82       	std	Y+3, r1	; 0x03
    22aa:	1a 82       	std	Y+2, r1	; 0x02
    22ac:	1d 82       	std	Y+5, r1	; 0x05
    22ae:	1c 82       	std	Y+4, r1	; 0x04
    22b0:	1f 82       	std	Y+7, r1	; 0x07
    22b2:	1e 82       	std	Y+6, r1	; 0x06
    22b4:	19 86       	std	Y+9, r1	; 0x09
    22b6:	18 86       	std	Y+8, r1	; 0x08
    22b8:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    22ba:	be 01       	movw	r22, r28
    22bc:	6f 5f       	subi	r22, 0xFF	; 255
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8c ea       	ldi	r24, 0xAC	; 172
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	2a 96       	adiw	r28, 0x0a	; 10
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <_Z17createEncodedDataPcPhhP14DailyCycleData>:

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
    22dc:	5f 92       	push	r5
    22de:	6f 92       	push	r6
    22e0:	7f 92       	push	r7
    22e2:	8f 92       	push	r8
    22e4:	9f 92       	push	r9
    22e6:	af 92       	push	r10
    22e8:	bf 92       	push	r11
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	2d 97       	sbiw	r28, 0x0d	; 13
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	4c 01       	movw	r8, r24
    230c:	5b 01       	movw	r10, r22
    230e:	54 2e       	mov	r5, r20
    2310:	69 01       	movw	r12, r18
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
	payload.setRSSI(cycleData->RSSI);
	payload.createEncodedPayload(encodedOutput);
	
	cycleData->BootNo = payload.getBootNumber();
}
    2312:	6d b6       	in	r6, 0x3d	; 61
    2314:	7e b6       	in	r7, 0x3e	; 62
}

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int16_t freeRAM = Helpers::freeMemory();
    2316:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN7Helpers10freeMemoryEv>
    231a:	7c 01       	movw	r14, r24
	int16_t minRAM = (sizeof(SensorData)*maxReadings)
    231c:	05 2d       	mov	r16, r5
    231e:	10 e0       	ldi	r17, 0x00	; 0
					+sizeof(GsmPayload)
					+100; //Buffer

	if (freeRAM < minRAM)
    2320:	2a e0       	ldi	r18, 0x0A	; 10
    2322:	52 9e       	mul	r5, r18
    2324:	c0 01       	movw	r24, r0
    2326:	11 24       	eor	r1, r1
    2328:	8f 58       	subi	r24, 0x8F	; 143
    232a:	9f 4f       	sbci	r25, 0xFF	; 255
    232c:	e8 16       	cp	r14, r24
    232e:	f9 06       	cpc	r15, r25
    2330:	34 f4       	brge	.+12     	; 0x233e <_Z17createEncodedDataPcPhhP14DailyCycleData+0x62>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    2332:	6b ef       	ldi	r22, 0xFB	; 251
    2334:	74 e0       	ldi	r23, 0x04	; 4
    2336:	8e e9       	ldi	r24, 0x9E	; 158
    2338:	93 e0       	ldi	r25, 0x03	; 3
    233a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    233e:	69 e2       	ldi	r22, 0x29	; 41
    2340:	71 e0       	ldi	r23, 0x01	; 1
    2342:	8e e9       	ldi	r24, 0x9E	; 158
    2344:	93 e0       	ldi	r25, 0x03	; 3
    2346:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    234a:	4a e0       	ldi	r20, 0x0A	; 10
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	b7 01       	movw	r22, r14
    2350:	8e e9       	ldi	r24, 0x9E	; 158
    2352:	93 e0       	ldi	r25, 0x03	; 3
    2354:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <_ZN5Print7printlnEii>
	
	SensorData sData[maxReadings];
    2358:	2a e0       	ldi	r18, 0x0A	; 10
    235a:	20 9f       	mul	r18, r16
    235c:	c0 01       	movw	r24, r0
    235e:	21 9f       	mul	r18, r17
    2360:	90 0d       	add	r25, r0
    2362:	11 24       	eor	r1, r1
    2364:	ed b7       	in	r30, 0x3d	; 61
    2366:	fe b7       	in	r31, 0x3e	; 62
    2368:	e8 1b       	sub	r30, r24
    236a:	f9 0b       	sbc	r31, r25
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	fe bf       	out	0x3e, r31	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	ed bf       	out	0x3d, r30	; 61
    2376:	2d b7       	in	r18, 0x3d	; 61
    2378:	3e b7       	in	r19, 0x3e	; 62
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	79 01       	movw	r14, r18
    2380:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	01 50       	subi	r16, 0x01	; 1
    2386:	11 09       	sbc	r17, r1
    2388:	60 f0       	brcs	.+24     	; 0x23a2 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xc6>
    238a:	80 83       	st	Z, r24
    238c:	12 82       	std	Z+2, r1	; 0x02
    238e:	11 82       	std	Z+1, r1	; 0x01
    2390:	14 82       	std	Z+4, r1	; 0x04
    2392:	13 82       	std	Z+3, r1	; 0x03
    2394:	16 82       	std	Z+6, r1	; 0x06
    2396:	15 82       	std	Z+5, r1	; 0x05
    2398:	10 86       	std	Z+8, r1	; 0x08
    239a:	17 82       	std	Z+7, r1	; 0x07
    239c:	11 86       	std	Z+9, r1	; 0x09
    239e:	3a 96       	adiw	r30, 0x0a	; 10
    23a0:	f1 cf       	rjmp	.-30     	; 0x2384 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xa8>
	*outputNumLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    23a2:	45 2d       	mov	r20, r5
    23a4:	b7 01       	movw	r22, r14
    23a6:	8e ea       	ldi	r24, 0xAE	; 174
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	0e 94 a2 13 	call	0x2744	; 0x2744 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    23ae:	f5 01       	movw	r30, r10
    23b0:	80 83       	st	Z, r24
	
	GsmPayload payload;
    23b2:	ce 01       	movw	r24, r28
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    23ba:	67 ee       	ldi	r22, 0xE7	; 231
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    23c4:	61 e2       	ldi	r22, 0x21	; 33
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	ce 01       	movw	r24, r28
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
    23d0:	f5 01       	movw	r30, r10
    23d2:	40 81       	ld	r20, Z
    23d4:	b7 01       	movw	r22, r14
    23d6:	ce 01       	movw	r24, r28
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(cycleData->RSSI);
    23de:	f6 01       	movw	r30, r12
    23e0:	42 85       	ldd	r20, Z+10	; 0x0a
    23e2:	53 85       	ldd	r21, Z+11	; 0x0b
    23e4:	64 85       	ldd	r22, Z+12	; 0x0c
    23e6:	75 85       	ldd	r23, Z+13	; 0x0d
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    23f0:	b4 01       	movw	r22, r8
    23f2:	ce 01       	movw	r24, r28
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN10GsmPayload20createEncodedPayloadEPc>
	
	cycleData->BootNo = payload.getBootNumber();
    23fa:	ce 01       	movw	r24, r28
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN10GsmPayload13getBootNumberEv>
    2402:	f6 01       	movw	r30, r12
    2404:	93 83       	std	Z+3, r25	; 0x03
    2406:	82 83       	std	Z+2, r24	; 0x02
}
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	7e be       	out	0x3e, r7	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	6d be       	out	0x3d, r6	; 61
    2412:	2d 96       	adiw	r28, 0x0d	; 13
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	bf 90       	pop	r11
    2430:	af 90       	pop	r10
    2432:	9f 90       	pop	r9
    2434:	8f 90       	pop	r8
    2436:	7f 90       	pop	r7
    2438:	6f 90       	pop	r6
    243a:	5f 90       	pop	r5
    243c:	08 95       	ret

0000243e <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    243e:	2f 92       	push	r2
    2440:	3f 92       	push	r3
    2442:	4f 92       	push	r4
    2444:	5f 92       	push	r5
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	a2 97       	sbiw	r28, 0x22	; 34
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
	sendData.HTMLStatusCode = statuscode;
		
	mem.appendDailyEntry(&sendData);
		
	return true;
}
    2472:	2d b6       	in	r2, 0x3d	; 61
    2474:	3e b6       	in	r3, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2476:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_sendDataLoopCount>
    247a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_sendDataLoopCount+0x1>
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_sendDataLoopCount+0x1>
    2484:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	31 f4       	brne	.+12     	; 0x2498 <_Z8sendDatav+0x5a>
		RM_LOGLN(F("Initialising Fona to send data"));
    248c:	6c ed       	ldi	r22, 0xDC	; 220
    248e:	74 e0       	ldi	r23, 0x04	; 4
    2490:	8e e9       	ldi	r24, 0x9E	; 158
    2492:	93 e0       	ldi	r25, 0x03	; 3
    2494:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	INITIALISING_STATE* sendDataFona = ensureFonaInitialised(true);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_Z21ensureFonaInitialisedb>
    249e:	fc 01       	movw	r30, r24
	
	if (!sendDataFona->isComplete) {
    24a0:	22 81       	ldd	r18, Z+2	; 0x02
    24a2:	2a a3       	std	Y+34, r18	; 0x22
    24a4:	21 11       	cpse	r18, r1
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <_Z8sendDatav+0x78>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    24a8:	64 ec       	ldi	r22, 0xC4	; 196
    24aa:	74 e0       	ldi	r23, 0x04	; 4
    24ac:	8e e9       	ldi	r24, 0x9E	; 158
    24ae:	93 e0       	ldi	r25, 0x03	; 3
    24b0:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return false; //Still waiting to initialise
    24b4:	8c c0       	rjmp	.+280    	; 0x25ce <_Z8sendDatav+0x190>
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	1a 82       	std	Y+2, r1	; 0x02
    24bc:	1c 82       	std	Y+4, r1	; 0x04
    24be:	1b 82       	std	Y+3, r1	; 0x03
    24c0:	1d 82       	std	Y+5, r1	; 0x05
    24c2:	18 86       	std	Y+8, r1	; 0x08
    24c4:	1a 86       	std	Y+10, r1	; 0x0a
    24c6:	19 86       	std	Y+9, r1	; 0x09
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    24c8:	1b 86       	std	Y+11, r1	; 0x0b
    24ca:	1c 86       	std	Y+12, r1	; 0x0c
    24cc:	1d 86       	std	Y+13, r1	; 0x0d
	}
		
	DailyCycleData sendData;
	sendData.InitStatus = sendDataFona->_fonaStatusInit;
    24ce:	83 81       	ldd	r24, Z+3	; 0x03
    24d0:	8e 83       	std	Y+6, r24	; 0x06
	sendData.GPRSInitStatus = sendDataFona->_gprsStatusInit;
    24d2:	84 81       	ldd	r24, Z+4	; 0x04
    24d4:	8f 83       	std	Y+7, r24	; 0x07
	sendData.RSSI = sendDataFona->_rssiStatusInit;
    24d6:	85 81       	ldd	r24, Z+5	; 0x05
    24d8:	96 81       	ldd	r25, Z+6	; 0x06
    24da:	a7 81       	ldd	r26, Z+7	; 0x07
    24dc:	b0 85       	ldd	r27, Z+8	; 0x08
    24de:	8b 87       	std	Y+11, r24	; 0x0b
    24e0:	9c 87       	std	Y+12, r25	; 0x0c
    24e2:	ad 87       	std	Y+13, r26	; 0x0d
    24e4:	be 87       	std	Y+14, r27	; 0x0e
		
	if (sendDataFona->fona == NULL) {
    24e6:	80 80       	ld	r8, Z
    24e8:	91 80       	ldd	r9, Z+1	; 0x01
    24ea:	81 14       	cp	r8, r1
    24ec:	91 04       	cpc	r9, r1
    24ee:	39 f4       	brne	.+14     	; 0x24fe <_Z8sendDatav+0xc0>
		
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    24f0:	61 eb       	ldi	r22, 0xB1	; 177
    24f2:	74 e0       	ldi	r23, 0x04	; 4
    24f4:	8e e9       	ldi	r24, 0x9E	; 158
    24f6:	93 e0       	ldi	r25, 0x03	; 3
    24f8:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
    24fc:	61 c0       	rjmp	.+194    	; 0x25c0 <_Z8sendDatav+0x182>
	
	Adafruit_FONA* fona = (Adafruit_FONA*)sendDataFona->fona;
	
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t fullEncodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    24fe:	84 e1       	ldi	r24, 0x14	; 20
    2500:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
	char encodedData[fullEncodedSz];
    2504:	2d b7       	in	r18, 0x3d	; 61
    2506:	3e b7       	in	r19, 0x3e	; 62
    2508:	28 1b       	sub	r18, r24
    250a:	39 0b       	sbc	r19, r25
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	3e bf       	out	0x3e, r19	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	2d bf       	out	0x3d, r18	; 61
    2516:	8d b7       	in	r24, 0x3d	; 61
    2518:	9e b7       	in	r25, 0x3e	; 62
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	3c 01       	movw	r6, r24
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	uint8_t numReadingsLoaded;
	createEncodedData(encodedData, &numReadingsLoaded, GPRS_MAX_READINGS_FOR_SEND, &sendData);
    251e:	9e 01       	movw	r18, r28
    2520:	2f 5f       	subi	r18, 0xFF	; 255
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	44 e1       	ldi	r20, 0x14	; 20
    2526:	be 01       	movw	r22, r28
    2528:	6f 5d       	subi	r22, 0xDF	; 223
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_Z17createEncodedDataPcPhhP14DailyCycleData>
	sendData.NoOfReadings = numReadingsLoaded;
    2530:	89 a1       	ldd	r24, Y+33	; 0x21
    2532:	8d 83       	std	Y+5, r24	; 0x05
	
	uint16_t actualEncodedSz = GsmPayload::getEncodedPayloadSize_S(numReadingsLoaded);
    2534:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    2538:	2c 01       	movw	r4, r24

	RM_LOGLN(F("Encoded data created and ready for send:"));
    253a:	68 e8       	ldi	r22, 0x88	; 136
    253c:	74 e0       	ldi	r23, 0x04	; 4
    253e:	8e e9       	ldi	r24, 0x9E	; 158
    2540:	93 e0       	ldi	r25, 0x03	; 3
    2542:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    2546:	b3 01       	movw	r22, r6
    2548:	8e e9       	ldi	r24, 0x9E	; 158
    254a:	93 e0       	ldi	r25, 0x03	; 3
    254c:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>
	
	char response[10];
	uint16_t statuscode=0;
    2550:	18 a2       	std	Y+32, r1	; 0x20
    2552:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t actualResponseLen=0;
    2554:	1e 8e       	std	Y+30, r1	; 0x1e
    2556:	1d 8e       	std	Y+29, r1	; 0x1d
	uint16_t finalResponseLen=0; //Probably don't need this here
    2558:	1c 8e       	std	Y+28, r1	; 0x1c
    255a:	1b 8e       	std	Y+27, r1	; 0x1b
	FONA_STATUS_GPRS_SEND status =  fona->sendDataOverGprs(
		(uint8_t*)encodedData, actualEncodedSz, 
		response, 10, &actualResponseLen, &finalResponseLen, &statuscode);
    255c:	9e 01       	movw	r18, r28
    255e:	21 5e       	subi	r18, 0xE1	; 225
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	59 01       	movw	r10, r18
    2564:	ce 01       	movw	r24, r28
    2566:	4b 96       	adiw	r24, 0x1b	; 27
    2568:	6c 01       	movw	r12, r24
    256a:	22 50       	subi	r18, 0x02	; 2
    256c:	31 09       	sbc	r19, r1
    256e:	79 01       	movw	r14, r18
    2570:	0a e0       	ldi	r16, 0x0A	; 10
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	2e 50       	subi	r18, 0x0E	; 14
    2576:	31 09       	sbc	r19, r1
    2578:	a2 01       	movw	r20, r4
    257a:	b3 01       	movw	r22, r6
    257c:	c4 01       	movw	r24, r8
    257e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_>
    2582:	78 2e       	mov	r7, r24

	RM_LOGLN(F("Response from send:"));
    2584:	64 e7       	ldi	r22, 0x74	; 116
    2586:	74 e0       	ldi	r23, 0x04	; 4
    2588:	8e e9       	ldi	r24, 0x9E	; 158
    258a:	93 e0       	ldi	r25, 0x03	; 3
    258c:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(response);
    2590:	be 01       	movw	r22, r28
    2592:	61 5f       	subi	r22, 0xF1	; 241
    2594:	7f 4f       	sbci	r23, 0xFF	; 255
    2596:	8e e9       	ldi	r24, 0x9E	; 158
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEPKc>

	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    259e:	be 01       	movw	r22, r28
    25a0:	67 5e       	subi	r22, 0xE7	; 231
    25a2:	7f 4f       	sbci	r23, 0xFF	; 255
    25a4:	c4 01       	movw	r24, r8
    25a6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN13Adafruit_FONA14getBattPercentEPj>
    25aa:	81 11       	cpse	r24, r1
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <_Z8sendDatav+0x174>
		sendData.BattPct = -1;
    25ae:	8f ef       	ldi	r24, 0xFF	; 255
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <_Z8sendDatav+0x176>
	else
		sendData.BattPct = battPct;
    25b2:	89 8d       	ldd	r24, Y+25	; 0x19
    25b4:	8a 83       	std	Y+2, r24	; 0x02
	
	sendData.SendStatus = status;
    25b6:	78 86       	std	Y+8, r7	; 0x08
	sendData.HTMLStatusCode = statuscode;
    25b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ba:	98 a1       	ldd	r25, Y+32	; 0x20
    25bc:	9a 87       	std	Y+10, r25	; 0x0a
    25be:	89 87       	std	Y+9, r24	; 0x09
		
	mem.appendDailyEntry(&sendData);
    25c0:	be 01       	movw	r22, r28
    25c2:	6f 5f       	subi	r22, 0xFF	; 255
    25c4:	7f 4f       	sbci	r23, 0xFF	; 255
    25c6:	8e ea       	ldi	r24, 0xAE	; 174
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	0e 94 b2 13 	call	0x2764	; 0x2764 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
	return true;
}
    25ce:	8a a1       	ldd	r24, Y+34	; 0x22
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	3e be       	out	0x3e, r3	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	2d be       	out	0x3d, r2	; 61
    25da:	a2 96       	adiw	r28, 0x22	; 34
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	df 90       	pop	r13
    25f4:	cf 90       	pop	r12
    25f6:	bf 90       	pop	r11
    25f8:	af 90       	pop	r10
    25fa:	9f 90       	pop	r9
    25fc:	8f 90       	pop	r8
    25fe:	7f 90       	pop	r7
    2600:	6f 90       	pop	r6
    2602:	5f 90       	pop	r5
    2604:	4f 90       	pop	r4
    2606:	3f 90       	pop	r3
    2608:	2f 90       	pop	r2
    260a:	08 95       	ret

0000260c <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    260c:	68 ee       	ldi	r22, 0xE8	; 232
    260e:	73 e0       	ldi	r23, 0x03	; 3
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
	++_timerCounter;
    2618:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    261c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    2626:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    262a:	6a e6       	ldi	r22, 0x6A	; 106
    262c:	74 e0       	ldi	r23, 0x04	; 4
    262e:	8e e9       	ldi	r24, 0x9E	; 158
    2630:	93 e0       	ldi	r25, 0x03	; 3
    2632:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    2636:	69 e2       	ldi	r22, 0x29	; 41
    2638:	71 e0       	ldi	r23, 0x01	; 1
    263a:	8e e9       	ldi	r24, 0x9E	; 158
    263c:	93 e0       	ldi	r25, 0x03	; 3
    263e:	0e 94 af 1a 	call	0x355e	; 0x355e <_ZN5Print5printEPKc>
    2642:	4a e0       	ldi	r20, 0x0A	; 10
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <_behaviour>
    264a:	8e e9       	ldi	r24, 0x9E	; 158
    264c:	93 e0       	ldi	r25, 0x03	; 3
    264e:	0e 94 4f 1b 	call	0x369e	; 0x369e <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    2652:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2656:	80 ff       	sbrs	r24, 0
    2658:	09 c0       	rjmp	.+18     	; 0x266c <loop+0x60>
		
		if (takeReadings())
    265a:	0e 94 42 11 	call	0x2284	; 0x2284 <_Z12takeReadingsv>
    265e:	88 23       	and	r24, r24
    2660:	29 f0       	breq	.+10     	; 0x266c <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    2662:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2666:	8e 7f       	andi	r24, 0xFE	; 254
    2668:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    266c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2670:	81 ff       	sbrs	r24, 1
    2672:	09 c0       	rjmp	.+18     	; 0x2686 <loop+0x7a>
		
		if (sendData())
    2674:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z8sendDatav>
    2678:	88 23       	and	r24, r24
    267a:	29 f0       	breq	.+10     	; 0x2686 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    267c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2680:	8d 7f       	andi	r24, 0xFD	; 253
    2682:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    2686:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    268a:	82 ff       	sbrs	r24, 2
    268c:	17 c0       	rjmp	.+46     	; 0x26bc <loop+0xb0>
	
		if (_timerCounter == 1)
    268e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    2692:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	31 f4       	brne	.+12     	; 0x26a6 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    269a:	6e ea       	ldi	r22, 0xAE	; 174
    269c:	71 e0       	ldi	r23, 0x01	; 1
    269e:	89 eb       	ldi	r24, 0xB9	; 185
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    26a6:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z8sendDatav>
    26aa:	88 23       	and	r24, r24
    26ac:	39 f0       	breq	.+14     	; 0x26bc <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    26ae:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26b2:	8b 7f       	andi	r24, 0xFB	; 251
    26b4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    26b8:	0e 94 13 18 	call	0x3026	; 0x3026 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    26bc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26c0:	81 11       	cpse	r24, r1
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <loop+0xbc>
		
		switchOffSystem();
    26c4:	0c 94 32 11 	jmp	0x2264	; 0x2264 <_Z15switchOffSystemv>
    26c8:	08 95       	ret

000026ca <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	64 e0       	ldi	r22, 0x04	; 4
    26ce:	89 eb       	ldi	r24, 0xB9	; 185
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	8e ea       	ldi	r24, 0xAE	; 174
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    26e0:	61 e0       	ldi	r22, 0x01	; 1
    26e2:	8c ea       	ldi	r24, 0xAC	; 172
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	0e 94 0b 14 	call	0x2816	; 0x2816 <_ZN13SensorManagerC1Eb>
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    26ea:	ee e9       	ldi	r30, 0x9E	; 158
    26ec:	f1 e0       	ldi	r31, 0x01	; 1
    26ee:	12 82       	std	Z+2, r1	; 0x02
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    26f0:	15 82       	std	Z+5, r1	; 0x05
    26f2:	16 82       	std	Z+6, r1	; 0x06
    26f4:	17 82       	std	Z+7, r1	; 0x07
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    26f6:	12 86       	std	Z+10, r1	; 0x0a
    26f8:	11 86       	std	Z+9, r1	; 0x09
    26fa:	14 86       	std	Z+12, r1	; 0x0c
    26fc:	13 86       	std	Z+11, r1	; 0x0b
    26fe:	08 95       	ret

00002700 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    2700:	8f e2       	ldi	r24, 0x2F	; 47
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <__fona+0x1>
    2708:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <__fona>
    270c:	8e ec       	ldi	r24, 0xCE	; 206
    270e:	92 e0       	ldi	r25, 0x02	; 2
    2710:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <_ZN6StringD1Ev>

00002714 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    2714:	dc 01       	movw	r26, r24
    2716:	ed 91       	ld	r30, X+
    2718:	fc 91       	ld	r31, X
    271a:	01 90       	ld	r0, Z+
    271c:	f0 81       	ld	r31, Z
    271e:	e0 2d       	mov	r30, r0
    2720:	09 94       	ijmp

00002722 <_ZN12RmMemManagerC1Eb>:
    2722:	fc 01       	movw	r30, r24
    2724:	14 82       	std	Z+4, r1	; 0x04
    2726:	15 82       	std	Z+5, r1	; 0x05
    2728:	16 82       	std	Z+6, r1	; 0x06
    272a:	17 82       	std	Z+7, r1	; 0x07
    272c:	80 e8       	ldi	r24, 0x80	; 128
    272e:	80 87       	std	Z+8, r24	; 0x08
    2730:	81 87       	std	Z+9, r24	; 0x09
    2732:	12 86       	std	Z+10, r1	; 0x0a
    2734:	63 83       	std	Z+3, r22	; 0x03
    2736:	61 11       	cpse	r22, r1
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <_ZN12RmMemManagerC1Eb+0x20>
    273a:	86 e4       	ldi	r24, 0x46	; 70
    273c:	93 e0       	ldi	r25, 0x03	; 3
    273e:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <_ZN7TwoWire5beginEv>
    2742:	08 95       	ret

00002744 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    2744:	fc 01       	movw	r30, r24
    2746:	cb 01       	movw	r24, r22
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	61 15       	cp	r22, r1
    274e:	71 05       	cpc	r23, r1
    2750:	39 f0       	breq	.+14     	; 0x2760 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    2752:	42 81       	ldd	r20, Z+2	; 0x02
    2754:	2a e0       	ldi	r18, 0x0A	; 10
    2756:	42 9f       	mul	r20, r18
    2758:	a0 01       	movw	r20, r0
    275a:	11 24       	eor	r1, r1
    275c:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	08 95       	ret

00002764 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
    2764:	08 95       	ret

00002766 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	eb 01       	movw	r28, r22
    2774:	7b 01       	movw	r14, r22
    2776:	e4 0e       	add	r14, r20
    2778:	f1 1c       	adc	r15, r1
    277a:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    277c:	ce 15       	cp	r28, r14
    277e:	df 05       	cpc	r29, r15
    2780:	71 f1       	breq	.+92     	; 0x27de <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    2782:	60 e5       	ldi	r22, 0x50	; 80
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	86 e4       	ldi	r24, 0x46	; 70
    2788:	93 e0       	ldi	r25, 0x03	; 3
    278a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    278e:	61 2f       	mov	r22, r17
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	86 e4       	ldi	r24, 0x46	; 70
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    279a:	b8 01       	movw	r22, r16
    279c:	77 27       	eor	r23, r23
    279e:	86 e4       	ldi	r24, 0x46	; 70
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    27a6:	86 e4       	ldi	r24, 0x46	; 70
    27a8:	93 e0       	ldi	r25, 0x03	; 3
    27aa:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	60 e5       	ldi	r22, 0x50	; 80
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	86 e4       	ldi	r24, 0x46	; 70
    27b8:	93 e0       	ldi	r25, 0x03	; 3
    27ba:	0e 94 09 18 	call	0x3012	; 0x3012 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    27be:	86 e4       	ldi	r24, 0x46	; 70
    27c0:	93 e0       	ldi	r25, 0x03	; 3
    27c2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <_ZN7TwoWire9availableEv>
    27c6:	89 2b       	or	r24, r25
    27c8:	29 f0       	breq	.+10     	; 0x27d4 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    27ca:	86 e4       	ldi	r24, 0x46	; 70
    27cc:	93 e0       	ldi	r25, 0x03	; 3
    27ce:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZN7TwoWire4readEv>
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    27d6:	89 93       	st	Y+, r24
    27d8:	0f 5f       	subi	r16, 0xFF	; 255
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    27dc:	cf cf       	rjmp	.-98     	; 0x277c <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	08 95       	ret

000027ec <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	1f 92       	push	r1
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    27f8:	41 e0       	ldi	r20, 0x01	; 1
    27fa:	be 01       	movw	r22, r28
    27fc:	6f 5f       	subi	r22, 0xFF	; 255
    27fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2800:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z12internalReadjPhh>
	return value;
}
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	0f 90       	pop	r0
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

0000280e <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <_ZN12RmMemManager18getUCharFromMemoryEj>

00002816 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    2816:	fc 01       	movw	r30, r24
    2818:	60 83       	st	Z, r22
    281a:	08 95       	ret

0000281c <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    281c:	fc 01       	movw	r30, r24
    281e:	80 81       	ld	r24, Z
    2820:	81 11       	cpse	r24, r1
    2822:	03 c0       	rjmp	.+6      	; 0x282a <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    2824:	86 2f       	mov	r24, r22
    2826:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    282a:	85 e0       	ldi	r24, 0x05	; 5
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	08 95       	ret

00002830 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    2830:	fc 01       	movw	r30, r24
    2832:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    2834:	81 81       	ldd	r24, Z+1	; 0x01
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	12 96       	adiw	r26, 0x02	; 2
    283e:	9c 93       	st	X, r25
    2840:	8e 93       	st	-X, r24
    2842:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    2844:	81 81       	ldd	r24, Z+1	; 0x01
    2846:	2a e0       	ldi	r18, 0x0A	; 10
    2848:	82 9f       	mul	r24, r18
    284a:	c0 01       	movw	r24, r0
    284c:	11 24       	eor	r1, r1
    284e:	14 96       	adiw	r26, 0x04	; 4
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
    2854:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    2856:	81 81       	ldd	r24, Z+1	; 0x01
    2858:	67 e0       	ldi	r22, 0x07	; 7
    285a:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__udivmodqi4>
    285e:	89 2f       	mov	r24, r25
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	16 96       	adiw	r26, 0x06	; 6
    2864:	9c 93       	st	X, r25
    2866:	8e 93       	st	-X, r24
    2868:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    286a:	81 81       	ldd	r24, Z+1	; 0x01
    286c:	24 e6       	ldi	r18, 0x64	; 100
    286e:	82 9f       	mul	r24, r18
    2870:	c0 01       	movw	r24, r0
    2872:	11 24       	eor	r1, r1
    2874:	18 96       	adiw	r26, 0x08	; 8
    2876:	9c 93       	st	X, r25
    2878:	8e 93       	st	-X, r24
    287a:	17 97       	sbiw	r26, 0x07	; 7
    287c:	08 95       	ret

0000287e <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    287e:	af 92       	push	r10
    2880:	bf 92       	push	r11
    2882:	cf 92       	push	r12
    2884:	df 92       	push	r13
    2886:	ef 92       	push	r14
    2888:	ff 92       	push	r15
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	8c 01       	movw	r16, r24
    2894:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    2896:	fc 01       	movw	r30, r24
    2898:	80 81       	ld	r24, Z
    289a:	88 23       	and	r24, r24
    289c:	21 f0       	breq	.+8      	; 0x28a6 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    289e:	c8 01       	movw	r24, r16
    28a0:	0e 94 18 14 	call	0x2830	; 0x2830 <_ZN13SensorManager11getMockDataEP10SensorData>
    28a4:	1b c0       	rjmp	.+54     	; 0x28dc <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    28a6:	6e e0       	ldi	r22, 0x0E	; 14
    28a8:	c8 01       	movw	r24, r16
    28aa:	0e 94 0e 14 	call	0x281c	; 0x281c <_ZN13SensorManager16takeSampleAnalogEh>
    28ae:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    28b0:	6f e0       	ldi	r22, 0x0F	; 15
    28b2:	c8 01       	movw	r24, r16
    28b4:	0e 94 0e 14 	call	0x281c	; 0x281c <_ZN13SensorManager16takeSampleAnalogEh>
    28b8:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    28ba:	61 e1       	ldi	r22, 0x11	; 17
    28bc:	c8 01       	movw	r24, r16
    28be:	0e 94 0e 14 	call	0x281c	; 0x281c <_ZN13SensorManager16takeSampleAnalogEh>
    28c2:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    28c4:	60 e1       	ldi	r22, 0x10	; 16
    28c6:	c8 01       	movw	r24, r16
    28c8:	0e 94 0e 14 	call	0x281c	; 0x281c <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    28cc:	ba 82       	std	Y+2, r11	; 0x02
    28ce:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    28d0:	dc 82       	std	Y+4, r13	; 0x04
    28d2:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    28d4:	fe 82       	std	Y+6, r15	; 0x06
    28d6:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    28d8:	98 87       	std	Y+8, r25	; 0x08
    28da:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    28dc:	ce 01       	movw	r24, r28
	
	//return ret;
}
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	df 90       	pop	r13
    28ec:	cf 90       	pop	r12
    28ee:	bf 90       	pop	r11
    28f0:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    28f2:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <_ZN7Helpers15printSensorDataEP10SensorData>

000028f6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    28f6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <twi_sendStop>
    2900:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2904:	61 e0       	ldi	r22, 0x01	; 1
    2906:	82 e1       	ldi	r24, 0x12	; 18
    2908:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
    290c:	61 e0       	ldi	r22, 0x01	; 1
    290e:	83 e1       	ldi	r24, 0x13	; 19
    2910:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
    2914:	e9 eb       	ldi	r30, 0xB9	; 185
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8e 7f       	andi	r24, 0xFE	; 254
    291c:	80 83       	st	Z, r24
    291e:	80 81       	ld	r24, Z
    2920:	8d 7f       	andi	r24, 0xFD	; 253
    2922:	80 83       	st	Z, r24
    2924:	88 e4       	ldi	r24, 0x48	; 72
    2926:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    292a:	85 e4       	ldi	r24, 0x45	; 69
    292c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2930:	08 95       	ret

00002932 <twi_readFrom>:
    2932:	41 32       	cpi	r20, 0x21	; 33
    2934:	08 f0       	brcs	.+2      	; 0x2938 <twi_readFrom+0x6>
    2936:	43 c0       	rjmp	.+134    	; 0x29be <twi_readFrom+0x8c>
    2938:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    293c:	91 11       	cpse	r25, r1
    293e:	fc cf       	rjmp	.-8      	; 0x2938 <twi_readFrom+0x6>
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <twi_state>
    2946:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <twi_sendStop>
    294a:	2f ef       	ldi	r18, 0xFF	; 255
    294c:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_error>
    2950:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    2954:	24 0f       	add	r18, r20
    2956:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <twi_masterBufferLength>
    295a:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <twi_slarw>
    295e:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <twi_slarw>
    2962:	88 0f       	add	r24, r24
    2964:	89 2b       	or	r24, r25
    2966:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    296a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	61 f4       	brne	.+24     	; 0x298a <twi_readFrom+0x58>
    2972:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2976:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    297a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    297e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2982:	83 fd       	sbrc	r24, 3
    2984:	f8 cf       	rjmp	.-16     	; 0x2976 <twi_readFrom+0x44>
    2986:	85 ec       	ldi	r24, 0xC5	; 197
    2988:	01 c0       	rjmp	.+2      	; 0x298c <twi_readFrom+0x5a>
    298a:	85 ee       	ldi	r24, 0xE5	; 229
    298c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2990:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	e1 f3       	breq	.-8      	; 0x2990 <twi_readFrom+0x5e>
    2998:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_masterBufferIndex>
    299c:	84 17       	cp	r24, r20
    299e:	10 f4       	brcc	.+4      	; 0x29a4 <twi_readFrom+0x72>
    29a0:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <twi_masterBufferIndex>
    29a4:	ae e1       	ldi	r26, 0x1E	; 30
    29a6:	b3 e0       	ldi	r27, 0x03	; 3
    29a8:	96 2f       	mov	r25, r22
    29aa:	fb 01       	movw	r30, r22
    29ac:	8e 2f       	mov	r24, r30
    29ae:	89 1b       	sub	r24, r25
    29b0:	84 17       	cp	r24, r20
    29b2:	18 f4       	brcc	.+6      	; 0x29ba <twi_readFrom+0x88>
    29b4:	8d 91       	ld	r24, X+
    29b6:	81 93       	st	Z+, r24
    29b8:	f9 cf       	rjmp	.-14     	; 0x29ac <twi_readFrom+0x7a>
    29ba:	84 2f       	mov	r24, r20
    29bc:	08 95       	ret
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	08 95       	ret

000029c2 <twi_writeTo>:
    29c2:	0f 93       	push	r16
    29c4:	41 32       	cpi	r20, 0x21	; 33
    29c6:	08 f0       	brcs	.+2      	; 0x29ca <twi_writeTo+0x8>
    29c8:	4a c0       	rjmp	.+148    	; 0x2a5e <twi_writeTo+0x9c>
    29ca:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    29ce:	91 11       	cpse	r25, r1
    29d0:	fc cf       	rjmp	.-8      	; 0x29ca <twi_writeTo+0x8>
    29d2:	32 e0       	ldi	r19, 0x02	; 2
    29d4:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <twi_state>
    29d8:	00 93 43 03 	sts	0x0343, r16	; 0x800343 <twi_sendStop>
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <twi_error>
    29e2:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    29e6:	40 93 1c 03 	sts	0x031C, r20	; 0x80031c <twi_masterBufferLength>
    29ea:	56 2f       	mov	r21, r22
    29ec:	ae e1       	ldi	r26, 0x1E	; 30
    29ee:	b3 e0       	ldi	r27, 0x03	; 3
    29f0:	fb 01       	movw	r30, r22
    29f2:	3e 2f       	mov	r19, r30
    29f4:	35 1b       	sub	r19, r21
    29f6:	34 17       	cp	r19, r20
    29f8:	18 f4       	brcc	.+6      	; 0x2a00 <twi_writeTo+0x3e>
    29fa:	31 91       	ld	r19, Z+
    29fc:	3d 93       	st	X+, r19
    29fe:	f9 cf       	rjmp	.-14     	; 0x29f2 <twi_writeTo+0x30>
    2a00:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_slarw>
    2a04:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <twi_slarw>
    2a08:	88 0f       	add	r24, r24
    2a0a:	83 2b       	or	r24, r19
    2a0c:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    2a10:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	61 f4       	brne	.+24     	; 0x2a30 <twi_writeTo+0x6e>
    2a18:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2a1c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2a20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a28:	83 fd       	sbrc	r24, 3
    2a2a:	f8 cf       	rjmp	.-16     	; 0x2a1c <twi_writeTo+0x5a>
    2a2c:	85 ec       	ldi	r24, 0xC5	; 197
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <twi_writeTo+0x70>
    2a30:	85 ee       	ldi	r24, 0xE5	; 229
    2a32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a36:	22 23       	and	r18, r18
    2a38:	21 f0       	breq	.+8      	; 0x2a42 <twi_writeTo+0x80>
    2a3a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	d1 f3       	breq	.-12     	; 0x2a36 <twi_writeTo+0x74>
    2a42:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2a46:	8f 3f       	cpi	r24, 0xFF	; 255
    2a48:	79 f0       	breq	.+30     	; 0x2a68 <twi_writeTo+0xa6>
    2a4a:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2a4e:	80 32       	cpi	r24, 0x20	; 32
    2a50:	41 f0       	breq	.+16     	; 0x2a62 <twi_writeTo+0xa0>
    2a52:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2a56:	80 33       	cpi	r24, 0x30	; 48
    2a58:	31 f0       	breq	.+12     	; 0x2a66 <twi_writeTo+0xa4>
    2a5a:	94 e0       	ldi	r25, 0x04	; 4
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <twi_writeTo+0xa6>
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
    2a60:	03 c0       	rjmp	.+6      	; 0x2a68 <twi_writeTo+0xa6>
    2a62:	92 e0       	ldi	r25, 0x02	; 2
    2a64:	01 c0       	rjmp	.+2      	; 0x2a68 <twi_writeTo+0xa6>
    2a66:	93 e0       	ldi	r25, 0x03	; 3
    2a68:	89 2f       	mov	r24, r25
    2a6a:	0f 91       	pop	r16
    2a6c:	08 95       	ret

00002a6e <twi_transmit>:
    2a6e:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2a72:	26 2f       	mov	r18, r22
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	24 0f       	add	r18, r20
    2a78:	31 1d       	adc	r19, r1
    2a7a:	21 32       	cpi	r18, 0x21	; 33
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	dc f4       	brge	.+54     	; 0x2ab6 <twi_transmit+0x48>
    2a80:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <twi_state>
    2a84:	24 30       	cpi	r18, 0x04	; 4
    2a86:	c9 f4       	brne	.+50     	; 0x2aba <twi_transmit+0x4c>
    2a88:	fc 01       	movw	r30, r24
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	86 17       	cp	r24, r22
    2a90:	58 f4       	brcc	.+22     	; 0x2aa8 <twi_transmit+0x3a>
    2a92:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2a96:	21 91       	ld	r18, Z+
    2a98:	dc 01       	movw	r26, r24
    2a9a:	a4 50       	subi	r26, 0x04	; 4
    2a9c:	bd 4f       	sbci	r27, 0xFD	; 253
    2a9e:	a3 0f       	add	r26, r19
    2aa0:	b1 1d       	adc	r27, r1
    2aa2:	2c 93       	st	X, r18
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	f3 cf       	rjmp	.-26     	; 0x2a8e <twi_transmit+0x20>
    2aa8:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2aac:	68 0f       	add	r22, r24
    2aae:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <twi_txBufferLength>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	08 95       	ret
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	08 95       	ret
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	08 95       	ret

00002abe <twi_attachSlaveRxEvent>:
    2abe:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <twi_onSlaveReceive+0x1>
    2ac2:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_onSlaveReceive>
    2ac6:	08 95       	ret

00002ac8 <twi_attachSlaveTxEvent>:
    2ac8:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_onSlaveTransmit+0x1>
    2acc:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_onSlaveTransmit>
    2ad0:	08 95       	ret

00002ad2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ad2:	85 ed       	ldi	r24, 0xD5	; 213
    2ad4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ad8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2adc:	84 fd       	sbrc	r24, 4
    2ade:	fc cf       	rjmp	.-8      	; 0x2ad8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ae0:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2ae4:	08 95       	ret

00002ae6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2ae6:	85 ec       	ldi	r24, 0xC5	; 197
    2ae8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2aec:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2af0:	08 95       	ret

00002af2 <__vector_24>:
}

ISR(TWI_vect)
{
    2af2:	1f 92       	push	r1
    2af4:	0f 92       	push	r0
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	0f 92       	push	r0
    2afa:	11 24       	eor	r1, r1
    2afc:	2f 93       	push	r18
    2afe:	3f 93       	push	r19
    2b00:	4f 93       	push	r20
    2b02:	5f 93       	push	r21
    2b04:	6f 93       	push	r22
    2b06:	7f 93       	push	r23
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
  switch(TW_STATUS){
    2b14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2b18:	88 7f       	andi	r24, 0xF8	; 248
    2b1a:	80 36       	cpi	r24, 0x60	; 96
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <__vector_24+0x2e>
    2b1e:	9e c0       	rjmp	.+316    	; 0x2c5c <__vector_24+0x16a>
    2b20:	78 f5       	brcc	.+94     	; 0x2b80 <__vector_24+0x8e>
    2b22:	88 32       	cpi	r24, 0x28	; 40
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <__vector_24+0x36>
    2b26:	5d c0       	rjmp	.+186    	; 0x2be2 <__vector_24+0xf0>
    2b28:	90 f4       	brcc	.+36     	; 0x2b4e <__vector_24+0x5c>
    2b2a:	80 31       	cpi	r24, 0x10	; 16
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <__vector_24+0x3e>
    2b2e:	56 c0       	rjmp	.+172    	; 0x2bdc <__vector_24+0xea>
    2b30:	38 f4       	brcc	.+14     	; 0x2b40 <__vector_24+0x4e>
    2b32:	88 23       	and	r24, r24
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <__vector_24+0x46>
    2b36:	f5 c0       	rjmp	.+490    	; 0x2d22 <__vector_24+0x230>
    2b38:	88 30       	cpi	r24, 0x08	; 8
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <__vector_24+0x4c>
    2b3c:	4f c0       	rjmp	.+158    	; 0x2bdc <__vector_24+0xea>
    2b3e:	f5 c0       	rjmp	.+490    	; 0x2d2a <__vector_24+0x238>
    2b40:	88 31       	cpi	r24, 0x18	; 24
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <__vector_24+0x54>
    2b44:	4e c0       	rjmp	.+156    	; 0x2be2 <__vector_24+0xf0>
    2b46:	80 32       	cpi	r24, 0x20	; 32
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <__vector_24+0x5a>
    2b4a:	5f c0       	rjmp	.+190    	; 0x2c0a <__vector_24+0x118>
    2b4c:	ee c0       	rjmp	.+476    	; 0x2d2a <__vector_24+0x238>
    2b4e:	80 34       	cpi	r24, 0x40	; 64
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <__vector_24+0x62>
    2b52:	6a c0       	rjmp	.+212    	; 0x2c28 <__vector_24+0x136>
    2b54:	58 f4       	brcc	.+22     	; 0x2b6c <__vector_24+0x7a>
    2b56:	80 33       	cpi	r24, 0x30	; 48
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <__vector_24+0x6a>
    2b5a:	57 c0       	rjmp	.+174    	; 0x2c0a <__vector_24+0x118>
    2b5c:	88 33       	cpi	r24, 0x38	; 56
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <__vector_24+0x70>
    2b60:	e4 c0       	rjmp	.+456    	; 0x2d2a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2b62:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
      twi_releaseBus();
    2b66:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <twi_releaseBus>
      break;
    2b6a:	df c0       	rjmp	.+446    	; 0x2d2a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2b6c:	80 35       	cpi	r24, 0x50	; 80
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <__vector_24+0x80>
    2b70:	4f c0       	rjmp	.+158    	; 0x2c10 <__vector_24+0x11e>
    2b72:	88 35       	cpi	r24, 0x58	; 88
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <__vector_24+0x86>
    2b76:	5d c0       	rjmp	.+186    	; 0x2c32 <__vector_24+0x140>
    2b78:	88 34       	cpi	r24, 0x48	; 72
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <__vector_24+0x8c>
    2b7c:	d6 c0       	rjmp	.+428    	; 0x2d2a <__vector_24+0x238>
    2b7e:	d3 c0       	rjmp	.+422    	; 0x2d26 <__vector_24+0x234>
    2b80:	88 39       	cpi	r24, 0x98	; 152
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <__vector_24+0x94>
    2b84:	c4 c0       	rjmp	.+392    	; 0x2d0e <__vector_24+0x21c>
    2b86:	a8 f4       	brcc	.+42     	; 0x2bb2 <__vector_24+0xc0>
    2b88:	88 37       	cpi	r24, 0x78	; 120
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <__vector_24+0x9c>
    2b8c:	67 c0       	rjmp	.+206    	; 0x2c5c <__vector_24+0x16a>
    2b8e:	38 f4       	brcc	.+14     	; 0x2b9e <__vector_24+0xac>
    2b90:	88 36       	cpi	r24, 0x68	; 104
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <__vector_24+0xa4>
    2b94:	63 c0       	rjmp	.+198    	; 0x2c5c <__vector_24+0x16a>
    2b96:	80 37       	cpi	r24, 0x70	; 112
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <__vector_24+0xaa>
    2b9a:	60 c0       	rjmp	.+192    	; 0x2c5c <__vector_24+0x16a>
    2b9c:	c6 c0       	rjmp	.+396    	; 0x2d2a <__vector_24+0x238>
    2b9e:	88 38       	cpi	r24, 0x88	; 136
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <__vector_24+0xb2>
    2ba2:	b5 c0       	rjmp	.+362    	; 0x2d0e <__vector_24+0x21c>
    2ba4:	80 39       	cpi	r24, 0x90	; 144
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <__vector_24+0xb8>
    2ba8:	5f c0       	rjmp	.+190    	; 0x2c68 <__vector_24+0x176>
    2baa:	80 38       	cpi	r24, 0x80	; 128
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <__vector_24+0xbe>
    2bae:	bd c0       	rjmp	.+378    	; 0x2d2a <__vector_24+0x238>
    2bb0:	5b c0       	rjmp	.+182    	; 0x2c68 <__vector_24+0x176>
    2bb2:	80 3b       	cpi	r24, 0xB0	; 176
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <__vector_24+0xc6>
    2bb6:	83 c0       	rjmp	.+262    	; 0x2cbe <__vector_24+0x1cc>
    2bb8:	38 f4       	brcc	.+14     	; 0x2bc8 <__vector_24+0xd6>
    2bba:	80 3a       	cpi	r24, 0xA0	; 160
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__vector_24+0xce>
    2bbe:	66 c0       	rjmp	.+204    	; 0x2c8c <__vector_24+0x19a>
    2bc0:	88 3a       	cpi	r24, 0xA8	; 168
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <__vector_24+0xd4>
    2bc4:	7c c0       	rjmp	.+248    	; 0x2cbe <__vector_24+0x1cc>
    2bc6:	b1 c0       	rjmp	.+354    	; 0x2d2a <__vector_24+0x238>
    2bc8:	80 3c       	cpi	r24, 0xC0	; 192
    2bca:	09 f4       	brne	.+2      	; 0x2bce <__vector_24+0xdc>
    2bcc:	a4 c0       	rjmp	.+328    	; 0x2d16 <__vector_24+0x224>
    2bce:	88 3c       	cpi	r24, 0xC8	; 200
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <__vector_24+0xe2>
    2bd2:	a1 c0       	rjmp	.+322    	; 0x2d16 <__vector_24+0x224>
    2bd4:	88 3b       	cpi	r24, 0xB8	; 184
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <__vector_24+0xe8>
    2bd8:	87 c0       	rjmp	.+270    	; 0x2ce8 <__vector_24+0x1f6>
    2bda:	a7 c0       	rjmp	.+334    	; 0x2d2a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2bdc:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2be0:	10 c0       	rjmp	.+32     	; 0x2c02 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2be2:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2be6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2bea:	98 17       	cp	r25, r24
    2bec:	70 f5       	brcc	.+92     	; 0x2c4a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2bee:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	8e 0f       	add	r24, r30
    2bf6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	e2 5e       	subi	r30, 0xE2	; 226
    2bfe:	fc 4f       	sbci	r31, 0xFC	; 252
    2c00:	80 81       	ld	r24, Z
    2c02:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c06:	85 ec       	ldi	r24, 0xC5	; 197
    2c08:	83 c0       	rjmp	.+262    	; 0x2d10 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2c0a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
    2c0e:	8b c0       	rjmp	.+278    	; 0x2d26 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c10:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	8e 0f       	add	r24, r30
    2c18:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2c1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	e2 5e       	subi	r30, 0xE2	; 226
    2c24:	fc 4f       	sbci	r31, 0xFC	; 252
    2c26:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c28:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c2c:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2c30:	6b c0       	rjmp	.+214    	; 0x2d08 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c32:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	8e 0f       	add	r24, r30
    2c3a:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2c3e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	e2 5e       	subi	r30, 0xE2	; 226
    2c46:	fc 4f       	sbci	r31, 0xFC	; 252
    2c48:	80 83       	st	Z, r24
	if (twi_sendStop)
    2c4a:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <twi_sendStop>
    2c4e:	81 11       	cpse	r24, r1
    2c50:	6a c0       	rjmp	.+212    	; 0x2d26 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2c58:	84 ea       	ldi	r24, 0xA4	; 164
    2c5a:	5e c0       	rjmp	.+188    	; 0x2d18 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2c5c:	83 e0       	ldi	r24, 0x03	; 3
    2c5e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2c62:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
    2c66:	cf cf       	rjmp	.-98     	; 0x2c06 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2c68:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2c6c:	80 32       	cpi	r24, 0x20	; 32
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <__vector_24+0x180>
    2c70:	4e c0       	rjmp	.+156    	; 0x2d0e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2c72:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	8e 0f       	add	r24, r30
    2c7a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_rxBufferIndex>
    2c7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	e6 52       	subi	r30, 0x26	; 38
    2c86:	fd 4f       	sbci	r31, 0xFD	; 253
    2c88:	80 83       	st	Z, r24
    2c8a:	bd cf       	rjmp	.-134    	; 0x2c06 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2c8c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2c90:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2c94:	80 32       	cpi	r24, 0x20	; 32
    2c96:	30 f4       	brcc	.+12     	; 0x2ca4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2c98:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	e6 52       	subi	r30, 0x26	; 38
    2ca0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ca2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2ca4:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_onSlaveReceive>
    2cae:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <twi_onSlaveReceive+0x1>
    2cb2:	8a ed       	ldi	r24, 0xDA	; 218
    2cb4:	92 e0       	ldi	r25, 0x02	; 2
    2cb6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2cb8:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
      break;
    2cbc:	36 c0       	rjmp	.+108    	; 0x2d2a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2cbe:	84 e0       	ldi	r24, 0x04	; 4
    2cc0:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2cc4:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2cc8:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2ccc:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <twi_onSlaveTransmit>
    2cd0:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <twi_onSlaveTransmit+0x1>
    2cd4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2cd6:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2cda:	81 11       	cpse	r24, r1
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2ce4:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2ce8:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	8e 0f       	add	r24, r30
    2cf0:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_txBufferIndex>
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	e4 50       	subi	r30, 0x04	; 4
    2cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d00:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2d04:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2d08:	98 17       	cp	r25, r24
    2d0a:	08 f4       	brcc	.+2      	; 0x2d0e <__vector_24+0x21c>
    2d0c:	7c cf       	rjmp	.-264    	; 0x2c06 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d0e:	85 e8       	ldi	r24, 0x85	; 133
    2d10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d16:	85 ec       	ldi	r24, 0xC5	; 197
    2d18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d1c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
      break;
    2d20:	04 c0       	rjmp	.+8      	; 0x2d2a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d22:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_error>
      twi_stop();
    2d26:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <twi_stop>
      break;
  }
}
    2d2a:	ff 91       	pop	r31
    2d2c:	ef 91       	pop	r30
    2d2e:	bf 91       	pop	r27
    2d30:	af 91       	pop	r26
    2d32:	9f 91       	pop	r25
    2d34:	8f 91       	pop	r24
    2d36:	7f 91       	pop	r23
    2d38:	6f 91       	pop	r22
    2d3a:	5f 91       	pop	r21
    2d3c:	4f 91       	pop	r20
    2d3e:	3f 91       	pop	r19
    2d40:	2f 91       	pop	r18
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	0f 90       	pop	r0
    2d48:	1f 90       	pop	r1
    2d4a:	18 95       	reti

00002d4c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2d4c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2d56:	82 1b       	sub	r24, r18
    2d58:	91 09       	sbc	r25, r1
    2d5a:	08 95       	ret

00002d5c <_ZN7TwoWire4readEv>:
    2d5c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2d60:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2d64:	98 17       	cp	r25, r24
    2d66:	50 f4       	brcc	.+20     	; 0x2d7c <_ZN7TwoWire4readEv+0x20>
    2d68:	e9 2f       	mov	r30, r25
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	e4 58       	subi	r30, 0x84	; 132
    2d6e:	fc 4f       	sbci	r31, 0xFC	; 252
    2d70:	20 81       	ld	r18, Z
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	9f 5f       	subi	r25, 0xFF	; 255
    2d76:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <_ZN7TwoWire4readEv+0x24>
    2d7c:	2f ef       	ldi	r18, 0xFF	; 255
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	c9 01       	movw	r24, r18
    2d82:	08 95       	ret

00002d84 <_ZN7TwoWire4peekEv>:
    2d84:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2d88:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2d8c:	e8 17       	cp	r30, r24
    2d8e:	30 f4       	brcc	.+12     	; 0x2d9c <_ZN7TwoWire4peekEv+0x18>
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	e4 58       	subi	r30, 0x84	; 132
    2d94:	fc 4f       	sbci	r31, 0xFC	; 252
    2d96:	80 81       	ld	r24, Z
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	08 95       	ret
    2d9c:	8f ef       	ldi	r24, 0xFF	; 255
    2d9e:	9f ef       	ldi	r25, 0xFF	; 255
    2da0:	08 95       	ret

00002da2 <_ZN7TwoWire5flushEv>:
    2da2:	08 95       	ret

00002da4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	ec 01       	movw	r28, r24
    2daa:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <_ZN7TwoWire14user_onReceiveE>
    2dae:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <_ZN7TwoWire14user_onReceiveE+0x1>
    2db2:	30 97       	sbiw	r30, 0x00	; 0
    2db4:	f1 f0       	breq	.+60     	; 0x2df2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2db6:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2dba:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dbe:	98 17       	cp	r25, r24
    2dc0:	c0 f0       	brcs	.+48     	; 0x2df2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	29 2f       	mov	r18, r25
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	26 17       	cp	r18, r22
    2dca:	37 07       	cpc	r19, r23
    2dcc:	54 f4       	brge	.+20     	; 0x2de2 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2dce:	de 01       	movw	r26, r28
    2dd0:	a2 0f       	add	r26, r18
    2dd2:	b3 1f       	adc	r27, r19
    2dd4:	4c 91       	ld	r20, X
    2dd6:	d9 01       	movw	r26, r18
    2dd8:	a4 58       	subi	r26, 0x84	; 132
    2dda:	bc 4f       	sbci	r27, 0xFC	; 252
    2ddc:	4c 93       	st	X, r20
    2dde:	9f 5f       	subi	r25, 0xFF	; 255
    2de0:	f1 cf       	rjmp	.-30     	; 0x2dc4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2de2:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2de6:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dea:	cb 01       	movw	r24, r22
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	09 94       	ijmp
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	08 95       	ret

00002df8 <_ZN7TwoWire16onRequestServiceEv>:
    2df8:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZN7TwoWire14user_onRequestE>
    2dfc:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZN7TwoWire14user_onRequestE+0x1>
    2e00:	30 97       	sbiw	r30, 0x00	; 0
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <_ZN7TwoWire16onRequestServiceEv+0x16>
    2e04:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2e08:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2e0c:	09 94       	ijmp
    2e0e:	08 95       	ret

00002e10 <_ZN7TwoWire5writeEPKhj>:
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	7c 01       	movw	r14, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8a 01       	movw	r16, r20
    2e26:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    2e2a:	22 23       	and	r18, r18
    2e2c:	89 f0       	breq	.+34     	; 0x2e50 <_ZN7TwoWire5writeEPKhj+0x40>
    2e2e:	eb 01       	movw	r28, r22
    2e30:	6b 01       	movw	r12, r22
    2e32:	c4 0e       	add	r12, r20
    2e34:	d5 1e       	adc	r13, r21
    2e36:	cc 15       	cp	r28, r12
    2e38:	dd 05       	cpc	r29, r13
    2e3a:	69 f0       	breq	.+26     	; 0x2e56 <_ZN7TwoWire5writeEPKhj+0x46>
    2e3c:	69 91       	ld	r22, Y+
    2e3e:	d7 01       	movw	r26, r14
    2e40:	ed 91       	ld	r30, X+
    2e42:	fc 91       	ld	r31, X
    2e44:	01 90       	ld	r0, Z+
    2e46:	f0 81       	ld	r31, Z
    2e48:	e0 2d       	mov	r30, r0
    2e4a:	c7 01       	movw	r24, r14
    2e4c:	09 95       	icall
    2e4e:	f3 cf       	rjmp	.-26     	; 0x2e36 <_ZN7TwoWire5writeEPKhj+0x26>
    2e50:	64 2f       	mov	r22, r20
    2e52:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <twi_transmit>
    2e56:	c8 01       	movw	r24, r16
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	08 95       	ret

00002e6a <_ZN7TwoWire5writeEh>:
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	1f 92       	push	r1
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	69 83       	std	Y+1, r22	; 0x01
    2e76:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    2e7a:	22 23       	and	r18, r18
    2e7c:	d1 f0       	breq	.+52     	; 0x2eb2 <_ZN7TwoWire5writeEh+0x48>
    2e7e:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2e82:	20 32       	cpi	r18, 0x20	; 32
    2e84:	40 f0       	brcs	.+16     	; 0x2e96 <_ZN7TwoWire5writeEh+0x2c>
    2e86:	21 e0       	ldi	r18, 0x01	; 1
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	33 83       	std	Z+3, r19	; 0x03
    2e8e:	22 83       	std	Z+2, r18	; 0x02
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	15 c0       	rjmp	.+42     	; 0x2ec0 <_ZN7TwoWire5writeEh+0x56>
    2e96:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2e9a:	e8 2f       	mov	r30, r24
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ea0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ea2:	99 81       	ldd	r25, Y+1	; 0x01
    2ea4:	90 83       	st	Z, r25
    2ea6:	8f 5f       	subi	r24, 0xFF	; 255
    2ea8:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2eac:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2eb0:	05 c0       	rjmp	.+10     	; 0x2ebc <_ZN7TwoWire5writeEh+0x52>
    2eb2:	61 e0       	ldi	r22, 0x01	; 1
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	01 96       	adiw	r24, 0x01	; 1
    2eb8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <twi_transmit>
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0f 90       	pop	r0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	08 95       	ret

00002ec8 <_ZN7TwoWireC1Ev>:
    2ec8:	fc 01       	movw	r30, r24
    2eca:	13 82       	std	Z+3, r1	; 0x03
    2ecc:	12 82       	std	Z+2, r1	; 0x02
    2ece:	88 ee       	ldi	r24, 0xE8	; 232
    2ed0:	93 e0       	ldi	r25, 0x03	; 3
    2ed2:	a0 e0       	ldi	r26, 0x00	; 0
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	84 83       	std	Z+4, r24	; 0x04
    2ed8:	95 83       	std	Z+5, r25	; 0x05
    2eda:	a6 83       	std	Z+6, r26	; 0x06
    2edc:	b7 83       	std	Z+7, r27	; 0x07
    2ede:	8e e5       	ldi	r24, 0x5E	; 94
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
    2ee6:	08 95       	ret

00002ee8 <_ZN7TwoWire5beginEv>:
    2ee8:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2eec:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2ef0:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2ef4:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2ef8:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <twi_init>
    2efc:	8c ef       	ldi	r24, 0xFC	; 252
    2efe:	96 e1       	ldi	r25, 0x16	; 22
    2f00:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <twi_attachSlaveTxEvent>
    2f04:	82 ed       	ldi	r24, 0xD2	; 210
    2f06:	96 e1       	ldi	r25, 0x16	; 22
    2f08:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <twi_attachSlaveRxEvent>

00002f0c <_ZN7TwoWire17beginTransmissionEh>:
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZN7TwoWire12transmittingE>
    2f12:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <_ZN7TwoWire9txAddressE>
    2f16:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f1a:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f1e:	08 95       	ret

00002f20 <_ZN7TwoWire17beginTransmissionEi>:
    2f20:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <_ZN7TwoWire17beginTransmissionEh>

00002f24 <_ZN7TwoWire15endTransmissionEh>:
    2f24:	0f 93       	push	r16
    2f26:	06 2f       	mov	r16, r22
    2f28:	21 e0       	ldi	r18, 0x01	; 1
    2f2a:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f2e:	69 e5       	ldi	r22, 0x59	; 89
    2f30:	73 e0       	ldi	r23, 0x03	; 3
    2f32:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <_ZN7TwoWire9txAddressE>
    2f36:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <twi_writeTo>
    2f3a:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f3e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f42:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN7TwoWire12transmittingE>
    2f46:	0f 91       	pop	r16
    2f48:	08 95       	ret

00002f4a <_ZN7TwoWire11requestFromEhhmhh>:
    2f4a:	4f 92       	push	r4
    2f4c:	5f 92       	push	r5
    2f4e:	6f 92       	push	r6
    2f50:	7f 92       	push	r7
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	cf 92       	push	r12
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	5c 01       	movw	r10, r24
    2f66:	f6 2e       	mov	r15, r22
    2f68:	d4 2f       	mov	r29, r20
    2f6a:	28 01       	movw	r4, r16
    2f6c:	39 01       	movw	r6, r18
    2f6e:	ee 20       	and	r14, r14
    2f70:	21 f1       	breq	.+72     	; 0x2fba <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2f72:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN7TwoWire17beginTransmissionEh>
    2f76:	ce 2d       	mov	r28, r14
    2f78:	c4 30       	cpi	r28, 0x04	; 4
    2f7a:	08 f0       	brcs	.+2      	; 0x2f7e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2f7c:	c3 e0       	ldi	r28, 0x03	; 3
    2f7e:	c1 50       	subi	r28, 0x01	; 1
    2f80:	c0 f0       	brcs	.+48     	; 0x2fb2 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2f82:	28 e0       	ldi	r18, 0x08	; 8
    2f84:	c2 9f       	mul	r28, r18
    2f86:	c0 01       	movw	r24, r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	a3 01       	movw	r20, r6
    2f8c:	92 01       	movw	r18, r4
    2f8e:	04 c0       	rjmp	.+8      	; 0x2f98 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2f90:	56 95       	lsr	r21
    2f92:	47 95       	ror	r20
    2f94:	37 95       	ror	r19
    2f96:	27 95       	ror	r18
    2f98:	8a 95       	dec	r24
    2f9a:	d2 f7       	brpl	.-12     	; 0x2f90 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2f9c:	ca 01       	movw	r24, r20
    2f9e:	b9 01       	movw	r22, r18
    2fa0:	d5 01       	movw	r26, r10
    2fa2:	ed 91       	ld	r30, X+
    2fa4:	fc 91       	ld	r31, X
    2fa6:	01 90       	ld	r0, Z+
    2fa8:	f0 81       	ld	r31, Z
    2faa:	e0 2d       	mov	r30, r0
    2fac:	c5 01       	movw	r24, r10
    2fae:	09 95       	icall
    2fb0:	e6 cf       	rjmp	.-52     	; 0x2f7e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	0e 94 92 17 	call	0x2f24	; 0x2f24 <_ZN7TwoWire15endTransmissionEh>
    2fba:	4d 2f       	mov	r20, r29
    2fbc:	d1 32       	cpi	r29, 0x21	; 33
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	2c 2d       	mov	r18, r12
    2fc4:	6c e7       	ldi	r22, 0x7C	; 124
    2fc6:	73 e0       	ldi	r23, 0x03	; 3
    2fc8:	8f 2d       	mov	r24, r15
    2fca:	0e 94 99 14 	call	0x2932	; 0x2932 <twi_readFrom>
    2fce:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2fd2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	cf 90       	pop	r12
    2fe4:	bf 90       	pop	r11
    2fe6:	af 90       	pop	r10
    2fe8:	7f 90       	pop	r7
    2fea:	6f 90       	pop	r6
    2fec:	5f 90       	pop	r5
    2fee:	4f 90       	pop	r4
    2ff0:	08 95       	ret

00002ff2 <_ZN7TwoWire11requestFromEhhh>:
    2ff2:	cf 92       	push	r12
    2ff4:	ef 92       	push	r14
    2ff6:	0f 93       	push	r16
    2ff8:	1f 93       	push	r17
    2ffa:	c2 2e       	mov	r12, r18
    2ffc:	e1 2c       	mov	r14, r1
    2ffe:	00 e0       	ldi	r16, 0x00	; 0
    3000:	10 e0       	ldi	r17, 0x00	; 0
    3002:	98 01       	movw	r18, r16
    3004:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZN7TwoWire11requestFromEhhmhh>
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ef 90       	pop	r14
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <_ZN7TwoWire11requestFromEii>:
    3012:	21 e0       	ldi	r18, 0x01	; 1
    3014:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <_ZN7TwoWire11requestFromEhhh>

00003018 <_ZN7TwoWire15endTransmissionEv>:
    3018:	61 e0       	ldi	r22, 0x01	; 1
    301a:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <_ZN7TwoWire15endTransmissionEh>

0000301e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    301e:	86 e4       	ldi	r24, 0x46	; 70
    3020:	93 e0       	ldi	r25, 0x03	; 3
    3022:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <_ZN7TwoWireC1Ev>

00003026 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    3026:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    302a:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    302e:	0e 94 0b 22 	call	0x4416	; 0x4416 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    3032:	6c ee       	ldi	r22, 0xEC	; 236
    3034:	76 e0       	ldi	r23, 0x06	; 6
    3036:	8e e9       	ldi	r24, 0x9E	; 158
    3038:	93 e0       	ldi	r25, 0x03	; 3
    303a:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>

0000303e <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    303e:	cf 93       	push	r28
    3040:	df 93       	push	r29
    3042:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    3044:	67 ee       	ldi	r22, 0xE7	; 231
    3046:	76 e0       	ldi	r23, 0x06	; 6
    3048:	8e e9       	ldi	r24, 0x9E	; 158
    304a:	93 e0       	ldi	r25, 0x03	; 3
    304c:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    3050:	84 e1       	ldi	r24, 0x14	; 20
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 73 21 	call	0x42e6	; 0x42e6 <malloc>
    3058:	fc 01       	movw	r30, r24
    305a:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <_mockData+0x1>
    305e:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	92 83       	std	Z+2, r25	; 0x02
    3068:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    306a:	8a e0       	ldi	r24, 0x0A	; 10
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	96 83       	std	Z+6, r25	; 0x06
    3070:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    3072:	84 e6       	ldi	r24, 0x64	; 100
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	94 83       	std	Z+4, r25	; 0x04
    3078:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    307a:	83 e3       	ldi	r24, 0x33	; 51
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	90 87       	std	Z+8, r25	; 0x08
    3080:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    3082:	83 e0       	ldi	r24, 0x03	; 3
    3084:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	94 87       	std	Z+12, r25	; 0x0c
    308c:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    308e:	84 e1       	ldi	r24, 0x14	; 20
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	90 8b       	std	Z+16, r25	; 0x10
    3094:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	96 87       	std	Z+14, r25	; 0x0e
    309c:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    309e:	84 e3       	ldi	r24, 0x34	; 52
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	92 8b       	std	Z+18, r25	; 0x12
    30a4:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    30a6:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    30a8:	60 ec       	ldi	r22, 0xC0	; 192
    30aa:	76 e0       	ldi	r23, 0x06	; 6
    30ac:	8e e9       	ldi	r24, 0x9E	; 158
    30ae:	93 e0       	ldi	r25, 0x03	; 3
    30b0:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    30b4:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    30b8:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    30bc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    30c0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    30c4:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    30c8:	0a 96       	adiw	r24, 0x0a	; 10
    30ca:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    30ce:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    30d2:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    30d6:	99 83       	std	Y+1, r25	; 0x01
    30d8:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    30e4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    30e6:	91 8d       	ldd	r25, Z+25	; 0x19
    30e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    30ea:	89 2f       	mov	r24, r25
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	80 5c       	subi	r24, 0xC0	; 192
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	82 1b       	sub	r24, r18
    30f4:	91 09       	sbc	r25, r1
}
    30f6:	8f 73       	andi	r24, 0x3F	; 63
    30f8:	99 27       	eor	r25, r25
    30fa:	08 95       	ret

000030fc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    30fc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    30fe:	91 8d       	ldd	r25, Z+25	; 0x19
    3100:	82 8d       	ldd	r24, Z+26	; 0x1a
    3102:	98 17       	cp	r25, r24
    3104:	31 f0       	breq	.+12     	; 0x3112 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3106:	82 8d       	ldd	r24, Z+26	; 0x1a
    3108:	e8 0f       	add	r30, r24
    310a:	f1 1d       	adc	r31, r1
    310c:	85 8d       	ldd	r24, Z+29	; 0x1d
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3112:	8f ef       	ldi	r24, 0xFF	; 255
    3114:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3116:	08 95       	ret

00003118 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3118:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    311a:	91 8d       	ldd	r25, Z+25	; 0x19
    311c:	82 8d       	ldd	r24, Z+26	; 0x1a
    311e:	98 17       	cp	r25, r24
    3120:	61 f0       	breq	.+24     	; 0x313a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3122:	82 8d       	ldd	r24, Z+26	; 0x1a
    3124:	df 01       	movw	r26, r30
    3126:	a8 0f       	add	r26, r24
    3128:	b1 1d       	adc	r27, r1
    312a:	5d 96       	adiw	r26, 0x1d	; 29
    312c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    312e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3130:	9f 5f       	subi	r25, 0xFF	; 255
    3132:	9f 73       	andi	r25, 0x3F	; 63
    3134:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    313a:	8f ef       	ldi	r24, 0xFF	; 255
    313c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    313e:	08 95       	ret

00003140 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3140:	85 ef       	ldi	r24, 0xF5	; 245
    3142:	99 e1       	ldi	r25, 0x19	; 25
    3144:	89 2b       	or	r24, r25
    3146:	49 f0       	breq	.+18     	; 0x315a <_Z14serialEventRunv+0x1a>
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	89 2b       	or	r24, r25
    314e:	29 f0       	breq	.+10     	; 0x315a <_Z14serialEventRunv+0x1a>
    3150:	0e 94 f5 19 	call	0x33ea	; 0x33ea <_Z17Serial0_availablev>
    3154:	81 11       	cpse	r24, r1
    3156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    315a:	08 95       	ret

0000315c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    315c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    315e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3160:	df 01       	movw	r26, r30
    3162:	a8 0f       	add	r26, r24
    3164:	b1 1d       	adc	r27, r1
    3166:	a3 5a       	subi	r26, 0xA3	; 163
    3168:	bf 4f       	sbci	r27, 0xFF	; 255
    316a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    316c:	84 8d       	ldd	r24, Z+28	; 0x1c
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	8f 73       	andi	r24, 0x3F	; 63
    3174:	99 27       	eor	r25, r25
    3176:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3178:	a6 89       	ldd	r26, Z+22	; 0x16
    317a:	b7 89       	ldd	r27, Z+23	; 0x17
    317c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    317e:	a0 89       	ldd	r26, Z+16	; 0x10
    3180:	b1 89       	ldd	r27, Z+17	; 0x11
    3182:	8c 91       	ld	r24, X
    3184:	80 64       	ori	r24, 0x40	; 64
    3186:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3188:	93 8d       	ldd	r25, Z+27	; 0x1b
    318a:	84 8d       	ldd	r24, Z+28	; 0x1c
    318c:	98 13       	cpse	r25, r24
    318e:	06 c0       	rjmp	.+12     	; 0x319c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3190:	02 88       	ldd	r0, Z+18	; 0x12
    3192:	f3 89       	ldd	r31, Z+19	; 0x13
    3194:	e0 2d       	mov	r30, r0
    3196:	80 81       	ld	r24, Z
    3198:	8f 7d       	andi	r24, 0xDF	; 223
    319a:	80 83       	st	Z, r24
    319c:	08 95       	ret

0000319e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	ec 01       	movw	r28, r24
  _written = true;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    31b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31b4:	98 13       	cpse	r25, r24
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <_ZN14HardwareSerial5writeEh+0x24>
    31b8:	e8 89       	ldd	r30, Y+16	; 0x10
    31ba:	f9 89       	ldd	r31, Y+17	; 0x11
    31bc:	80 81       	ld	r24, Z
    31be:	85 fd       	sbrc	r24, 5
    31c0:	24 c0       	rjmp	.+72     	; 0x320a <_ZN14HardwareSerial5writeEh+0x6c>
    31c2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    31c4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	0f 5f       	subi	r16, 0xFF	; 255
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	0f 73       	andi	r16, 0x3F	; 63
    31ce:	11 27       	eor	r17, r17
    31d0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    31d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31d4:	e8 12       	cpse	r14, r24
    31d6:	0c c0       	rjmp	.+24     	; 0x31f0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	07 fc       	sbrc	r0, 7
    31dc:	fa cf       	rjmp	.-12     	; 0x31d2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    31de:	e8 89       	ldd	r30, Y+16	; 0x10
    31e0:	f9 89       	ldd	r31, Y+17	; 0x11
    31e2:	80 81       	ld	r24, Z
    31e4:	85 ff       	sbrs	r24, 5
    31e6:	f5 cf       	rjmp	.-22     	; 0x31d2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    31e8:	ce 01       	movw	r24, r28
    31ea:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    31ee:	f1 cf       	rjmp	.-30     	; 0x31d2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    31f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f2:	fe 01       	movw	r30, r28
    31f4:	e8 0f       	add	r30, r24
    31f6:	f1 1d       	adc	r31, r1
    31f8:	e3 5a       	subi	r30, 0xA3	; 163
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    31fe:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3200:	ea 89       	ldd	r30, Y+18	; 0x12
    3202:	fb 89       	ldd	r31, Y+19	; 0x13
    3204:	80 81       	ld	r24, Z
    3206:	80 62       	ori	r24, 0x20	; 32
    3208:	07 c0       	rjmp	.+14     	; 0x3218 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    320a:	ee 89       	ldd	r30, Y+22	; 0x16
    320c:	ff 89       	ldd	r31, Y+23	; 0x17
    320e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3210:	e8 89       	ldd	r30, Y+16	; 0x10
    3212:	f9 89       	ldd	r31, Y+17	; 0x11
    3214:	80 81       	ld	r24, Z
    3216:	80 64       	ori	r24, 0x40	; 64
    3218:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	ff 90       	pop	r15
    3228:	ef 90       	pop	r14
    322a:	08 95       	ret

0000322c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3232:	88 8d       	ldd	r24, Y+24	; 0x18
    3234:	88 23       	and	r24, r24
    3236:	c9 f0       	breq	.+50     	; 0x326a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3238:	ea 89       	ldd	r30, Y+18	; 0x12
    323a:	fb 89       	ldd	r31, Y+19	; 0x13
    323c:	80 81       	ld	r24, Z
    323e:	85 fd       	sbrc	r24, 5
    3240:	05 c0       	rjmp	.+10     	; 0x324c <_ZN14HardwareSerial5flushEv+0x20>
    3242:	a8 89       	ldd	r26, Y+16	; 0x10
    3244:	b9 89       	ldd	r27, Y+17	; 0x11
    3246:	8c 91       	ld	r24, X
    3248:	86 fd       	sbrc	r24, 6
    324a:	0f c0       	rjmp	.+30     	; 0x326a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	07 fc       	sbrc	r0, 7
    3250:	f5 cf       	rjmp	.-22     	; 0x323c <_ZN14HardwareSerial5flushEv+0x10>
    3252:	80 81       	ld	r24, Z
    3254:	85 ff       	sbrs	r24, 5
    3256:	f2 cf       	rjmp	.-28     	; 0x323c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3258:	a8 89       	ldd	r26, Y+16	; 0x10
    325a:	b9 89       	ldd	r27, Y+17	; 0x11
    325c:	8c 91       	ld	r24, X
    325e:	85 ff       	sbrs	r24, 5
    3260:	ed cf       	rjmp	.-38     	; 0x323c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3262:	ce 01       	movw	r24, r28
    3264:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3268:	e7 cf       	rjmp	.-50     	; 0x3238 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	08 95       	ret

00003270 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3270:	cf 92       	push	r12
    3272:	df 92       	push	r13
    3274:	ef 92       	push	r14
    3276:	ff 92       	push	r15
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	ec 01       	movw	r28, r24
    3280:	6a 01       	movw	r12, r20
    3282:	7b 01       	movw	r14, r22
    3284:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3286:	e8 89       	ldd	r30, Y+16	; 0x10
    3288:	f9 89       	ldd	r31, Y+17	; 0x11
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    328e:	41 15       	cp	r20, r1
    3290:	51 4e       	sbci	r21, 0xE1	; 225
    3292:	61 05       	cpc	r22, r1
    3294:	71 05       	cpc	r23, r1
    3296:	b1 f0       	breq	.+44     	; 0x32c4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3298:	60 e0       	ldi	r22, 0x00	; 0
    329a:	79 e0       	ldi	r23, 0x09	; 9
    329c:	8d e3       	ldi	r24, 0x3D	; 61
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a7 01       	movw	r20, r14
    32a2:	96 01       	movw	r18, r12
    32a4:	0e 94 2c 21 	call	0x4258	; 0x4258 <__udivmodsi4>
    32a8:	da 01       	movw	r26, r20
    32aa:	c9 01       	movw	r24, r18
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	a1 09       	sbc	r26, r1
    32b0:	b1 09       	sbc	r27, r1
    32b2:	b6 95       	lsr	r27
    32b4:	a7 95       	ror	r26
    32b6:	97 95       	ror	r25
    32b8:	87 95       	ror	r24
    32ba:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32bc:	21 15       	cp	r18, r1
    32be:	80 e1       	ldi	r24, 0x10	; 16
    32c0:	38 07       	cpc	r19, r24
    32c2:	a8 f0       	brcs	.+42     	; 0x32ee <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    32c4:	e8 89       	ldd	r30, Y+16	; 0x10
    32c6:	f9 89       	ldd	r31, Y+17	; 0x11
    32c8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    32ca:	60 e8       	ldi	r22, 0x80	; 128
    32cc:	74 e8       	ldi	r23, 0x84	; 132
    32ce:	8e e1       	ldi	r24, 0x1E	; 30
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a7 01       	movw	r20, r14
    32d4:	96 01       	movw	r18, r12
    32d6:	0e 94 2c 21 	call	0x4258	; 0x4258 <__udivmodsi4>
    32da:	da 01       	movw	r26, r20
    32dc:	c9 01       	movw	r24, r18
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	a1 09       	sbc	r26, r1
    32e2:	b1 09       	sbc	r27, r1
    32e4:	b6 95       	lsr	r27
    32e6:	a7 95       	ror	r26
    32e8:	97 95       	ror	r25
    32ea:	87 95       	ror	r24
    32ec:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    32ee:	ec 85       	ldd	r30, Y+12	; 0x0c
    32f0:	fd 85       	ldd	r31, Y+13	; 0x0d
    32f2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    32f4:	ee 85       	ldd	r30, Y+14	; 0x0e
    32f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    32f8:	20 83       	st	Z, r18

  _written = false;
    32fa:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    32fc:	ec 89       	ldd	r30, Y+20	; 0x14
    32fe:	fd 89       	ldd	r31, Y+21	; 0x15
    3300:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3302:	ea 89       	ldd	r30, Y+18	; 0x12
    3304:	fb 89       	ldd	r31, Y+19	; 0x13
    3306:	80 81       	ld	r24, Z
    3308:	80 61       	ori	r24, 0x10	; 16
    330a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    330c:	ea 89       	ldd	r30, Y+18	; 0x12
    330e:	fb 89       	ldd	r31, Y+19	; 0x13
    3310:	80 81       	ld	r24, Z
    3312:	88 60       	ori	r24, 0x08	; 8
    3314:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3316:	ea 89       	ldd	r30, Y+18	; 0x12
    3318:	fb 89       	ldd	r31, Y+19	; 0x13
    331a:	80 81       	ld	r24, Z
    331c:	80 68       	ori	r24, 0x80	; 128
    331e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3320:	ea 89       	ldd	r30, Y+18	; 0x12
    3322:	fb 89       	ldd	r31, Y+19	; 0x13
    3324:	80 81       	ld	r24, Z
    3326:	8f 7d       	andi	r24, 0xDF	; 223
    3328:	80 83       	st	Z, r24
}
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	ff 90       	pop	r15
    3332:	ef 90       	pop	r14
    3334:	df 90       	pop	r13
    3336:	cf 90       	pop	r12
    3338:	08 95       	ret

0000333a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    333a:	1f 92       	push	r1
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	0f 92       	push	r0
    3342:	11 24       	eor	r1, r1
    3344:	2f 93       	push	r18
    3346:	8f 93       	push	r24
    3348:	9f 93       	push	r25
    334a:	ef 93       	push	r30
    334c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    334e:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <Serial+0x10>
    3352:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <Serial+0x11>
    3356:	80 81       	ld	r24, Z
    3358:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <Serial+0x16>
    335c:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <Serial+0x17>
    3360:	82 fd       	sbrc	r24, 2
    3362:	12 c0       	rjmp	.+36     	; 0x3388 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3364:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3366:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <Serial+0x19>
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    336e:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <Serial+0x1a>
    3372:	82 17       	cp	r24, r18
    3374:	51 f0       	breq	.+20     	; 0x338a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3376:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <Serial+0x19>
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	e2 56       	subi	r30, 0x62	; 98
    337e:	fc 4f       	sbci	r31, 0xFC	; 252
    3380:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3382:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <Serial+0x19>
    3386:	01 c0       	rjmp	.+2      	; 0x338a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3388:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    338a:	ff 91       	pop	r31
    338c:	ef 91       	pop	r30
    338e:	9f 91       	pop	r25
    3390:	8f 91       	pop	r24
    3392:	2f 91       	pop	r18
    3394:	0f 90       	pop	r0
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	0f 90       	pop	r0
    339a:	1f 90       	pop	r1
    339c:	18 95       	reti

0000339e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    339e:	1f 92       	push	r1
    33a0:	0f 92       	push	r0
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	0f 92       	push	r0
    33a6:	11 24       	eor	r1, r1
    33a8:	2f 93       	push	r18
    33aa:	3f 93       	push	r19
    33ac:	4f 93       	push	r20
    33ae:	5f 93       	push	r21
    33b0:	6f 93       	push	r22
    33b2:	7f 93       	push	r23
    33b4:	8f 93       	push	r24
    33b6:	9f 93       	push	r25
    33b8:	af 93       	push	r26
    33ba:	bf 93       	push	r27
    33bc:	ef 93       	push	r30
    33be:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    33c0:	8e e9       	ldi	r24, 0x9E	; 158
    33c2:	93 e0       	ldi	r25, 0x03	; 3
    33c4:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    33c8:	ff 91       	pop	r31
    33ca:	ef 91       	pop	r30
    33cc:	bf 91       	pop	r27
    33ce:	af 91       	pop	r26
    33d0:	9f 91       	pop	r25
    33d2:	8f 91       	pop	r24
    33d4:	7f 91       	pop	r23
    33d6:	6f 91       	pop	r22
    33d8:	5f 91       	pop	r21
    33da:	4f 91       	pop	r20
    33dc:	3f 91       	pop	r19
    33de:	2f 91       	pop	r18
    33e0:	0f 90       	pop	r0
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	0f 90       	pop	r0
    33e6:	1f 90       	pop	r1
    33e8:	18 95       	reti

000033ea <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    33ea:	8e e9       	ldi	r24, 0x9E	; 158
    33ec:	93 e0       	ldi	r25, 0x03	; 3
    33ee:	0e 94 72 18 	call	0x30e4	; 0x30e4 <_ZN14HardwareSerial9availableEv>
    33f2:	21 e0       	ldi	r18, 0x01	; 1
    33f4:	89 2b       	or	r24, r25
    33f6:	09 f4       	brne	.+2      	; 0x33fa <_Z17Serial0_availablev+0x10>
    33f8:	20 e0       	ldi	r18, 0x00	; 0
}
    33fa:	82 2f       	mov	r24, r18
    33fc:	08 95       	ret

000033fe <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    33fe:	ee e9       	ldi	r30, 0x9E	; 158
    3400:	f3 e0       	ldi	r31, 0x03	; 3
    3402:	13 82       	std	Z+3, r1	; 0x03
    3404:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3406:	88 ee       	ldi	r24, 0xE8	; 232
    3408:	93 e0       	ldi	r25, 0x03	; 3
    340a:	a0 e0       	ldi	r26, 0x00	; 0
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	84 83       	std	Z+4, r24	; 0x04
    3410:	95 83       	std	Z+5, r25	; 0x05
    3412:	a6 83       	std	Z+6, r26	; 0x06
    3414:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3416:	8e e6       	ldi	r24, 0x6E	; 110
    3418:	91 e0       	ldi	r25, 0x01	; 1
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	85 ec       	ldi	r24, 0xC5	; 197
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	95 87       	std	Z+13, r25	; 0x0d
    3424:	84 87       	std	Z+12, r24	; 0x0c
    3426:	84 ec       	ldi	r24, 0xC4	; 196
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	97 87       	std	Z+15, r25	; 0x0f
    342c:	86 87       	std	Z+14, r24	; 0x0e
    342e:	80 ec       	ldi	r24, 0xC0	; 192
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	91 8b       	std	Z+17, r25	; 0x11
    3434:	80 8b       	std	Z+16, r24	; 0x10
    3436:	81 ec       	ldi	r24, 0xC1	; 193
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	93 8b       	std	Z+19, r25	; 0x13
    343c:	82 8b       	std	Z+18, r24	; 0x12
    343e:	82 ec       	ldi	r24, 0xC2	; 194
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	95 8b       	std	Z+21, r25	; 0x15
    3444:	84 8b       	std	Z+20, r24	; 0x14
    3446:	86 ec       	ldi	r24, 0xC6	; 198
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	97 8b       	std	Z+23, r25	; 0x17
    344c:	86 8b       	std	Z+22, r24	; 0x16
    344e:	11 8e       	std	Z+25, r1	; 0x19
    3450:	12 8e       	std	Z+26, r1	; 0x1a
    3452:	13 8e       	std	Z+27, r1	; 0x1b
    3454:	14 8e       	std	Z+28, r1	; 0x1c
    3456:	08 95       	ret

00003458 <initVariant>:
    3458:	08 95       	ret

0000345a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    345a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <init>

	initVariant();
    345e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3462:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3466:	c0 ea       	ldi	r28, 0xA0	; 160
    3468:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    346a:	0e 94 06 13 	call	0x260c	; 0x260c <loop>
		if (serialEventRun) serialEventRun();
    346e:	20 97       	sbiw	r28, 0x00	; 0
    3470:	e1 f3       	breq	.-8      	; 0x346a <main+0x10>
    3472:	0e 94 a0 18 	call	0x3140	; 0x3140 <_Z14serialEventRunv>
    3476:	f9 cf       	rjmp	.-14     	; 0x346a <main+0x10>

00003478 <_Znwj>:
    3478:	0c 94 73 21 	jmp	0x42e6	; 0x42e6 <malloc>

0000347c <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	6c 01       	movw	r12, r24
    348e:	7a 01       	movw	r14, r20
    3490:	8b 01       	movw	r16, r22
    3492:	c0 e0       	ldi	r28, 0x00	; 0
    3494:	d0 e0       	ldi	r29, 0x00	; 0
    3496:	ce 15       	cp	r28, r14
    3498:	df 05       	cpc	r29, r15
    349a:	81 f0       	breq	.+32     	; 0x34bc <_ZN5Print5writeEPKhj+0x40>
    349c:	d8 01       	movw	r26, r16
    349e:	6d 91       	ld	r22, X+
    34a0:	8d 01       	movw	r16, r26
    34a2:	d6 01       	movw	r26, r12
    34a4:	ed 91       	ld	r30, X+
    34a6:	fc 91       	ld	r31, X
    34a8:	01 90       	ld	r0, Z+
    34aa:	f0 81       	ld	r31, Z
    34ac:	e0 2d       	mov	r30, r0
    34ae:	c6 01       	movw	r24, r12
    34b0:	09 95       	icall
    34b2:	89 2b       	or	r24, r25
    34b4:	11 f0       	breq	.+4      	; 0x34ba <_ZN5Print5writeEPKhj+0x3e>
    34b6:	21 96       	adiw	r28, 0x01	; 1
    34b8:	ee cf       	rjmp	.-36     	; 0x3496 <_ZN5Print5writeEPKhj+0x1a>
    34ba:	7e 01       	movw	r14, r28
    34bc:	c7 01       	movw	r24, r14
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	ef 90       	pop	r14
    34ca:	df 90       	pop	r13
    34cc:	cf 90       	pop	r12
    34ce:	08 95       	ret

000034d0 <_ZN5Print5writeEPKc>:
    34d0:	61 15       	cp	r22, r1
    34d2:	71 05       	cpc	r23, r1
    34d4:	79 f0       	breq	.+30     	; 0x34f4 <_ZN5Print5writeEPKc+0x24>
    34d6:	fb 01       	movw	r30, r22
    34d8:	01 90       	ld	r0, Z+
    34da:	00 20       	and	r0, r0
    34dc:	e9 f7       	brne	.-6      	; 0x34d8 <_ZN5Print5writeEPKc+0x8>
    34de:	31 97       	sbiw	r30, 0x01	; 1
    34e0:	af 01       	movw	r20, r30
    34e2:	46 1b       	sub	r20, r22
    34e4:	57 0b       	sbc	r21, r23
    34e6:	dc 01       	movw	r26, r24
    34e8:	ed 91       	ld	r30, X+
    34ea:	fc 91       	ld	r31, X
    34ec:	02 80       	ldd	r0, Z+2	; 0x02
    34ee:	f3 81       	ldd	r31, Z+3	; 0x03
    34f0:	e0 2d       	mov	r30, r0
    34f2:	09 94       	ijmp
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	08 95       	ret

000034fa <_ZN5Print5printEPK19__FlashStringHelper>:
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	8c 01       	movw	r16, r24
    3508:	7b 01       	movw	r14, r22
    350a:	c0 e0       	ldi	r28, 0x00	; 0
    350c:	d0 e0       	ldi	r29, 0x00	; 0
    350e:	f7 01       	movw	r30, r14
    3510:	ec 0f       	add	r30, r28
    3512:	fd 1f       	adc	r31, r29
    3514:	64 91       	lpm	r22, Z
    3516:	66 23       	and	r22, r22
    3518:	61 f0       	breq	.+24     	; 0x3532 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    351a:	d8 01       	movw	r26, r16
    351c:	ed 91       	ld	r30, X+
    351e:	fc 91       	ld	r31, X
    3520:	01 90       	ld	r0, Z+
    3522:	f0 81       	ld	r31, Z
    3524:	e0 2d       	mov	r30, r0
    3526:	c8 01       	movw	r24, r16
    3528:	09 95       	icall
    352a:	89 2b       	or	r24, r25
    352c:	11 f0       	breq	.+4      	; 0x3532 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    352e:	21 96       	adiw	r28, 0x01	; 1
    3530:	ee cf       	rjmp	.-36     	; 0x350e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3532:	ce 01       	movw	r24, r28
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
    353e:	ef 90       	pop	r14
    3540:	08 95       	ret

00003542 <_ZN5Print5printERK6String>:
    3542:	db 01       	movw	r26, r22
    3544:	14 96       	adiw	r26, 0x04	; 4
    3546:	4d 91       	ld	r20, X+
    3548:	5c 91       	ld	r21, X
    354a:	15 97       	sbiw	r26, 0x05	; 5
    354c:	6d 91       	ld	r22, X+
    354e:	7c 91       	ld	r23, X
    3550:	dc 01       	movw	r26, r24
    3552:	ed 91       	ld	r30, X+
    3554:	fc 91       	ld	r31, X
    3556:	02 80       	ldd	r0, Z+2	; 0x02
    3558:	f3 81       	ldd	r31, Z+3	; 0x03
    355a:	e0 2d       	mov	r30, r0
    355c:	09 94       	ijmp

0000355e <_ZN5Print5printEPKc>:
    355e:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <_ZN5Print5writeEPKc>

00003562 <_ZN5Print5printEc>:
    3562:	dc 01       	movw	r26, r24
    3564:	ed 91       	ld	r30, X+
    3566:	fc 91       	ld	r31, X
    3568:	01 90       	ld	r0, Z+
    356a:	f0 81       	ld	r31, Z
    356c:	e0 2d       	mov	r30, r0
    356e:	09 94       	ijmp

00003570 <_ZN5Print7printlnEv>:
    3570:	6a e7       	ldi	r22, 0x7A	; 122
    3572:	71 e0       	ldi	r23, 0x01	; 1
    3574:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <_ZN5Print5writeEPKc>

00003578 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3578:	0f 93       	push	r16
    357a:	1f 93       	push	r17
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
    3580:	ec 01       	movw	r28, r24
    3582:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEPK19__FlashStringHelper>
    3586:	8c 01       	movw	r16, r24
    3588:	ce 01       	movw	r24, r28
    358a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
    358e:	80 0f       	add	r24, r16
    3590:	91 1f       	adc	r25, r17
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	08 95       	ret

0000359c <_ZN5Print7printlnEPKc>:
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	ec 01       	movw	r28, r24
    35a6:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN5Print5writeEPKc>
    35aa:	8c 01       	movw	r16, r24
    35ac:	ce 01       	movw	r24, r28
    35ae:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
    35b2:	80 0f       	add	r24, r16
    35b4:	91 1f       	adc	r25, r17
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <_ZN5Print7printlnEc>:
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	ec 01       	movw	r28, r24
    35ca:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN5Print5printEc>
    35ce:	8c 01       	movw	r16, r24
    35d0:	ce 01       	movw	r24, r28
    35d2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
    35d6:	80 0f       	add	r24, r16
    35d8:	91 1f       	adc	r25, r17
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	08 95       	ret

000035e4 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    35e4:	8f 92       	push	r8
    35e6:	9f 92       	push	r9
    35e8:	af 92       	push	r10
    35ea:	bf 92       	push	r11
    35ec:	ef 92       	push	r14
    35ee:	ff 92       	push	r15
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	a1 97       	sbiw	r28, 0x21	; 33
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	7c 01       	movw	r14, r24
    360a:	fa 01       	movw	r30, r20
    360c:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    360e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3610:	22 30       	cpi	r18, 0x02	; 2
    3612:	08 f4       	brcc	.+2      	; 0x3616 <_ZN5Print11printNumberEmh+0x32>
    3614:	2a e0       	ldi	r18, 0x0A	; 10
    3616:	8e 01       	movw	r16, r28
    3618:	0f 5d       	subi	r16, 0xDF	; 223
    361a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    361c:	82 2e       	mov	r8, r18
    361e:	91 2c       	mov	r9, r1
    3620:	a1 2c       	mov	r10, r1
    3622:	b1 2c       	mov	r11, r1
    3624:	bf 01       	movw	r22, r30
    3626:	a5 01       	movw	r20, r10
    3628:	94 01       	movw	r18, r8
    362a:	0e 94 2c 21 	call	0x4258	; 0x4258 <__udivmodsi4>
    n /= base;
    362e:	f9 01       	movw	r30, r18
    3630:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3632:	01 50       	subi	r16, 0x01	; 1
    3634:	11 09       	sbc	r17, r1
    3636:	6a 30       	cpi	r22, 0x0A	; 10
    3638:	10 f4       	brcc	.+4      	; 0x363e <_ZN5Print11printNumberEmh+0x5a>
    363a:	60 5d       	subi	r22, 0xD0	; 208
    363c:	01 c0       	rjmp	.+2      	; 0x3640 <_ZN5Print11printNumberEmh+0x5c>
    363e:	69 5c       	subi	r22, 0xC9	; 201
    3640:	d8 01       	movw	r26, r16
    3642:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3644:	23 2b       	or	r18, r19
    3646:	24 2b       	or	r18, r20
    3648:	25 2b       	or	r18, r21
    364a:	61 f7       	brne	.-40     	; 0x3624 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    364c:	b8 01       	movw	r22, r16
    364e:	c7 01       	movw	r24, r14
    3650:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN5Print5writeEPKc>
}
    3654:	a1 96       	adiw	r28, 0x21	; 33
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	bf 90       	pop	r11
    366e:	af 90       	pop	r10
    3670:	9f 90       	pop	r9
    3672:	8f 90       	pop	r8
    3674:	08 95       	ret

00003676 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    3676:	21 15       	cp	r18, r1
    3678:	31 05       	cpc	r19, r1
    367a:	41 f4       	brne	.+16     	; 0x368c <_ZN5Print5printEmi+0x16>
    367c:	dc 01       	movw	r26, r24
    367e:	ed 91       	ld	r30, X+
    3680:	fc 91       	ld	r31, X
    3682:	01 90       	ld	r0, Z+
    3684:	f0 81       	ld	r31, Z
    3686:	e0 2d       	mov	r30, r0
    3688:	64 2f       	mov	r22, r20
    368a:	09 94       	ijmp
  else return printNumber(n, base);
    368c:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <_ZN5Print11printNumberEmh>

00003690 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    3690:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    3692:	46 2f       	mov	r20, r22
    3694:	50 e0       	ldi	r21, 0x00	; 0
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <_ZN5Print5printEmi>

0000369e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    36a8:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN5Print5printEhi>
    36ac:	8c 01       	movw	r16, r24
  n += println();
    36ae:	ce 01       	movw	r24, r28
    36b0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
  return n;
}
    36b4:	80 0f       	add	r24, r16
    36b6:	91 1f       	adc	r25, r17
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	08 95       	ret

000036c2 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    36c2:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    36c4:	ab 01       	movw	r20, r22
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <_ZN5Print5printEmi>

000036ce <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    36d8:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print5printEji>
    36dc:	8c 01       	movw	r16, r24
  n += println();
    36de:	ce 01       	movw	r24, r28
    36e0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
  return n;
}
    36e4:	80 0f       	add	r24, r16
    36e6:	91 1f       	adc	r25, r17
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	08 95       	ret

000036f2 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    36f2:	0f 93       	push	r16
    36f4:	1f 93       	push	r17
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    36fc:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN5Print5printEmi>
    3700:	8c 01       	movw	r16, r24
  n += println();
    3702:	ce 01       	movw	r24, r28
    3704:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
  return n;
}
    3708:	80 0f       	add	r24, r16
    370a:	91 1f       	adc	r25, r17
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	0f 91       	pop	r16
    3714:	08 95       	ret

00003716 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3716:	cf 92       	push	r12
    3718:	df 92       	push	r13
    371a:	ef 92       	push	r14
    371c:	ff 92       	push	r15
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
  if (base == 0) {
    3726:	21 15       	cp	r18, r1
    3728:	31 05       	cpc	r19, r1
    372a:	81 f4       	brne	.+32     	; 0x374c <_ZN5Print5printEli+0x36>
    return write(n);
    372c:	dc 01       	movw	r26, r24
    372e:	ed 91       	ld	r30, X+
    3730:	fc 91       	ld	r31, X
    3732:	01 90       	ld	r0, Z+
    3734:	f0 81       	ld	r31, Z
    3736:	e0 2d       	mov	r30, r0
    3738:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	df 90       	pop	r13
    3748:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    374a:	09 94       	ijmp
  } else if (base == 10) {
    374c:	2a 30       	cpi	r18, 0x0A	; 10
    374e:	31 05       	cpc	r19, r1
    3750:	01 f5       	brne	.+64     	; 0x3792 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3752:	77 ff       	sbrs	r23, 7
    3754:	1d c0       	rjmp	.+58     	; 0x3790 <_ZN5Print5printEli+0x7a>
    3756:	6a 01       	movw	r12, r20
    3758:	7b 01       	movw	r14, r22
    375a:	ec 01       	movw	r28, r24
      int t = print('-');
    375c:	6d e2       	ldi	r22, 0x2D	; 45
    375e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN5Print5printEc>
    3762:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    3764:	44 27       	eor	r20, r20
    3766:	55 27       	eor	r21, r21
    3768:	ba 01       	movw	r22, r20
    376a:	4c 19       	sub	r20, r12
    376c:	5d 09       	sbc	r21, r13
    376e:	6e 09       	sbc	r22, r14
    3770:	7f 09       	sbc	r23, r15
    3772:	2a e0       	ldi	r18, 0x0A	; 10
    3774:	ce 01       	movw	r24, r28
    3776:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <_ZN5Print11printNumberEmh>
    377a:	80 0f       	add	r24, r16
    377c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	ff 90       	pop	r15
    3788:	ef 90       	pop	r14
    378a:	df 90       	pop	r13
    378c:	cf 90       	pop	r12
    378e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3790:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	df 90       	pop	r13
    37a0:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    37a2:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <_ZN5Print11printNumberEmh>

000037a6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    37a6:	9a 01       	movw	r18, r20
  return print((long) n, base);
    37a8:	ab 01       	movw	r20, r22
    37aa:	77 0f       	add	r23, r23
    37ac:	66 0b       	sbc	r22, r22
    37ae:	77 0b       	sbc	r23, r23
    37b0:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <_ZN5Print5printEli>

000037b4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    37be:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN5Print5printEii>
    37c2:	8c 01       	movw	r16, r24
  n += println();
    37c4:	ce 01       	movw	r24, r28
    37c6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
  return n;
}
    37ca:	80 0f       	add	r24, r16
    37cc:	91 1f       	adc	r25, r17
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    37e2:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print5printEli>
    37e6:	8c 01       	movw	r16, r24
  n += println();
    37e8:	ce 01       	movw	r24, r28
    37ea:	0e 94 b8 1a 	call	0x3570	; 0x3570 <_ZN5Print7printlnEv>
  return n;
}
    37ee:	80 0f       	add	r24, r16
    37f0:	91 1f       	adc	r25, r17
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	08 95       	ret

000037fc <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    37fc:	1f 92       	push	r1
    37fe:	0f 92       	push	r0
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	0f 92       	push	r0
    3804:	11 24       	eor	r1, r1
    3806:	2f 93       	push	r18
    3808:	3f 93       	push	r19
    380a:	8f 93       	push	r24
    380c:	9f 93       	push	r25
    380e:	af 93       	push	r26
    3810:	bf 93       	push	r27
    3812:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <timer0_millis>
    3816:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <timer0_millis+0x1>
    381a:	a0 91 3e 04 	lds	r26, 0x043E	; 0x80043e <timer0_millis+0x2>
    381e:	b0 91 3f 04 	lds	r27, 0x043F	; 0x80043f <timer0_millis+0x3>
    3822:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <timer0_fract>
    3826:	23 e0       	ldi	r18, 0x03	; 3
    3828:	23 0f       	add	r18, r19
    382a:	2d 37       	cpi	r18, 0x7D	; 125
    382c:	20 f4       	brcc	.+8      	; 0x3836 <__vector_16+0x3a>
    382e:	01 96       	adiw	r24, 0x01	; 1
    3830:	a1 1d       	adc	r26, r1
    3832:	b1 1d       	adc	r27, r1
    3834:	05 c0       	rjmp	.+10     	; 0x3840 <__vector_16+0x44>
    3836:	26 e8       	ldi	r18, 0x86	; 134
    3838:	23 0f       	add	r18, r19
    383a:	02 96       	adiw	r24, 0x02	; 2
    383c:	a1 1d       	adc	r26, r1
    383e:	b1 1d       	adc	r27, r1
    3840:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <timer0_fract>
    3844:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <timer0_millis>
    3848:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <timer0_millis+0x1>
    384c:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <timer0_millis+0x2>
    3850:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <timer0_millis+0x3>
    3854:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    3858:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    385c:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    3860:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    3864:	01 96       	adiw	r24, 0x01	; 1
    3866:	a1 1d       	adc	r26, r1
    3868:	b1 1d       	adc	r27, r1
    386a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <timer0_overflow_count>
    386e:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <timer0_overflow_count+0x1>
    3872:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <timer0_overflow_count+0x2>
    3876:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <timer0_overflow_count+0x3>
    387a:	bf 91       	pop	r27
    387c:	af 91       	pop	r26
    387e:	9f 91       	pop	r25
    3880:	8f 91       	pop	r24
    3882:	3f 91       	pop	r19
    3884:	2f 91       	pop	r18
    3886:	0f 90       	pop	r0
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	0f 90       	pop	r0
    388c:	1f 90       	pop	r1
    388e:	18 95       	reti

00003890 <micros>:
    3890:	3f b7       	in	r19, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    3898:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    389c:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    38a0:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    38a4:	26 b5       	in	r18, 0x26	; 38
    38a6:	a8 9b       	sbis	0x15, 0	; 21
    38a8:	05 c0       	rjmp	.+10     	; 0x38b4 <micros+0x24>
    38aa:	2f 3f       	cpi	r18, 0xFF	; 255
    38ac:	19 f0       	breq	.+6      	; 0x38b4 <micros+0x24>
    38ae:	01 96       	adiw	r24, 0x01	; 1
    38b0:	a1 1d       	adc	r26, r1
    38b2:	b1 1d       	adc	r27, r1
    38b4:	3f bf       	out	0x3f, r19	; 63
    38b6:	ba 2f       	mov	r27, r26
    38b8:	a9 2f       	mov	r26, r25
    38ba:	98 2f       	mov	r25, r24
    38bc:	88 27       	eor	r24, r24
    38be:	82 0f       	add	r24, r18
    38c0:	91 1d       	adc	r25, r1
    38c2:	a1 1d       	adc	r26, r1
    38c4:	b1 1d       	adc	r27, r1
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	42 e0       	ldi	r20, 0x02	; 2
    38cc:	66 0f       	add	r22, r22
    38ce:	77 1f       	adc	r23, r23
    38d0:	88 1f       	adc	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	4a 95       	dec	r20
    38d6:	d1 f7       	brne	.-12     	; 0x38cc <micros+0x3c>
    38d8:	08 95       	ret

000038da <delay>:
    38da:	8f 92       	push	r8
    38dc:	9f 92       	push	r9
    38de:	af 92       	push	r10
    38e0:	bf 92       	push	r11
    38e2:	cf 92       	push	r12
    38e4:	df 92       	push	r13
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	6b 01       	movw	r12, r22
    38ec:	7c 01       	movw	r14, r24
    38ee:	0e 94 48 1c 	call	0x3890	; 0x3890 <micros>
    38f2:	4b 01       	movw	r8, r22
    38f4:	5c 01       	movw	r10, r24
    38f6:	c1 14       	cp	r12, r1
    38f8:	d1 04       	cpc	r13, r1
    38fa:	e1 04       	cpc	r14, r1
    38fc:	f1 04       	cpc	r15, r1
    38fe:	01 f1       	breq	.+64     	; 0x3940 <delay+0x66>
    3900:	0e 94 f7 20 	call	0x41ee	; 0x41ee <yield>
    3904:	0e 94 48 1c 	call	0x3890	; 0x3890 <micros>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	88 19       	sub	r24, r8
    390e:	99 09       	sbc	r25, r9
    3910:	aa 09       	sbc	r26, r10
    3912:	bb 09       	sbc	r27, r11
    3914:	88 3e       	cpi	r24, 0xE8	; 232
    3916:	93 40       	sbci	r25, 0x03	; 3
    3918:	a1 05       	cpc	r26, r1
    391a:	b1 05       	cpc	r27, r1
    391c:	60 f3       	brcs	.-40     	; 0x38f6 <delay+0x1c>
    391e:	21 e0       	ldi	r18, 0x01	; 1
    3920:	c2 1a       	sub	r12, r18
    3922:	d1 08       	sbc	r13, r1
    3924:	e1 08       	sbc	r14, r1
    3926:	f1 08       	sbc	r15, r1
    3928:	88 ee       	ldi	r24, 0xE8	; 232
    392a:	88 0e       	add	r8, r24
    392c:	83 e0       	ldi	r24, 0x03	; 3
    392e:	98 1e       	adc	r9, r24
    3930:	a1 1c       	adc	r10, r1
    3932:	b1 1c       	adc	r11, r1
    3934:	c1 14       	cp	r12, r1
    3936:	d1 04       	cpc	r13, r1
    3938:	e1 04       	cpc	r14, r1
    393a:	f1 04       	cpc	r15, r1
    393c:	19 f7       	brne	.-58     	; 0x3904 <delay+0x2a>
    393e:	db cf       	rjmp	.-74     	; 0x38f6 <delay+0x1c>
    3940:	ff 90       	pop	r15
    3942:	ef 90       	pop	r14
    3944:	df 90       	pop	r13
    3946:	cf 90       	pop	r12
    3948:	bf 90       	pop	r11
    394a:	af 90       	pop	r10
    394c:	9f 90       	pop	r9
    394e:	8f 90       	pop	r8
    3950:	08 95       	ret

00003952 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3952:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3954:	84 b5       	in	r24, 0x24	; 36
    3956:	82 60       	ori	r24, 0x02	; 2
    3958:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    395a:	84 b5       	in	r24, 0x24	; 36
    395c:	81 60       	ori	r24, 0x01	; 1
    395e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3960:	85 b5       	in	r24, 0x25	; 37
    3962:	82 60       	ori	r24, 0x02	; 2
    3964:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3966:	85 b5       	in	r24, 0x25	; 37
    3968:	81 60       	ori	r24, 0x01	; 1
    396a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    396c:	ee e6       	ldi	r30, 0x6E	; 110
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	81 60       	ori	r24, 0x01	; 1
    3974:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3976:	e1 e8       	ldi	r30, 0x81	; 129
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    397c:	80 81       	ld	r24, Z
    397e:	82 60       	ori	r24, 0x02	; 2
    3980:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3982:	80 81       	ld	r24, Z
    3984:	81 60       	ori	r24, 0x01	; 1
    3986:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3988:	e0 e8       	ldi	r30, 0x80	; 128
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	81 60       	ori	r24, 0x01	; 1
    3990:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3992:	e1 eb       	ldi	r30, 0xB1	; 177
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	84 60       	ori	r24, 0x04	; 4
    399a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    399c:	e0 eb       	ldi	r30, 0xB0	; 176
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	81 60       	ori	r24, 0x01	; 1
    39a4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    39a6:	ea e7       	ldi	r30, 0x7A	; 122
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	84 60       	ori	r24, 0x04	; 4
    39ae:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    39b0:	80 81       	ld	r24, Z
    39b2:	82 60       	ori	r24, 0x02	; 2
    39b4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    39b6:	80 81       	ld	r24, Z
    39b8:	81 60       	ori	r24, 0x01	; 1
    39ba:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    39bc:	80 81       	ld	r24, Z
    39be:	80 68       	ori	r24, 0x80	; 128
    39c0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    39c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    39c6:	08 95       	ret

000039c8 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    39c8:	8e 30       	cpi	r24, 0x0E	; 14
    39ca:	08 f0       	brcs	.+2      	; 0x39ce <analogRead+0x6>
    39cc:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    39ce:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    39d2:	90 e4       	ldi	r25, 0x40	; 64
    39d4:	29 9f       	mul	r18, r25
    39d6:	90 01       	movw	r18, r0
    39d8:	11 24       	eor	r1, r1
    39da:	87 70       	andi	r24, 0x07	; 7
    39dc:	82 2b       	or	r24, r18
    39de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    39e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    39e6:	80 64       	ori	r24, 0x40	; 64
    39e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    39ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    39f0:	86 fd       	sbrc	r24, 6
    39f2:	fc cf       	rjmp	.-8      	; 0x39ec <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    39f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    39f8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    39fc:	90 e0       	ldi	r25, 0x00	; 0
}
    39fe:	92 2b       	or	r25, r18
    3a00:	08 95       	ret

00003a02 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3a02:	83 30       	cpi	r24, 0x03	; 3
    3a04:	81 f0       	breq	.+32     	; 0x3a26 <turnOffPWM+0x24>
    3a06:	28 f4       	brcc	.+10     	; 0x3a12 <turnOffPWM+0x10>
    3a08:	81 30       	cpi	r24, 0x01	; 1
    3a0a:	99 f0       	breq	.+38     	; 0x3a32 <turnOffPWM+0x30>
    3a0c:	82 30       	cpi	r24, 0x02	; 2
    3a0e:	a1 f0       	breq	.+40     	; 0x3a38 <turnOffPWM+0x36>
    3a10:	08 95       	ret
    3a12:	87 30       	cpi	r24, 0x07	; 7
    3a14:	a9 f0       	breq	.+42     	; 0x3a40 <turnOffPWM+0x3e>
    3a16:	88 30       	cpi	r24, 0x08	; 8
    3a18:	b9 f0       	breq	.+46     	; 0x3a48 <turnOffPWM+0x46>
    3a1a:	84 30       	cpi	r24, 0x04	; 4
    3a1c:	d1 f4       	brne	.+52     	; 0x3a52 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a1e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a22:	8f 7d       	andi	r24, 0xDF	; 223
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3a26:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a2a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a2c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a30:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3a32:	84 b5       	in	r24, 0x24	; 36
    3a34:	8f 77       	andi	r24, 0x7F	; 127
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3a38:	84 b5       	in	r24, 0x24	; 36
    3a3a:	8f 7d       	andi	r24, 0xDF	; 223
    3a3c:	84 bd       	out	0x24, r24	; 36
    3a3e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3a40:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a44:	8f 77       	andi	r24, 0x7F	; 127
    3a46:	03 c0       	rjmp	.+6      	; 0x3a4e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3a48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a4c:	8f 7d       	andi	r24, 0xDF	; 223
    3a4e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a52:	08 95       	ret

00003a54 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	e5 5c       	subi	r30, 0xC5	; 197
    3a5e:	f8 4f       	sbci	r31, 0xF8	; 248
    3a60:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3a62:	fc 01       	movw	r30, r24
    3a64:	e1 5b       	subi	r30, 0xB1	; 177
    3a66:	f8 4f       	sbci	r31, 0xF8	; 248
    3a68:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3a6a:	88 23       	and	r24, r24
    3a6c:	61 f1       	breq	.+88     	; 0x3ac6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	88 0f       	add	r24, r24
    3a72:	99 1f       	adc	r25, r25
    3a74:	fc 01       	movw	r30, r24
    3a76:	e9 58       	subi	r30, 0x89	; 137
    3a78:	f8 4f       	sbci	r31, 0xF8	; 248
    3a7a:	c5 91       	lpm	r28, Z+
    3a7c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3a7e:	fc 01       	movw	r30, r24
    3a80:	e3 59       	subi	r30, 0x93	; 147
    3a82:	f8 4f       	sbci	r31, 0xF8	; 248
    3a84:	a5 91       	lpm	r26, Z+
    3a86:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3a88:	61 11       	cpse	r22, r1
    3a8a:	09 c0       	rjmp	.+18     	; 0x3a9e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3a8c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a8e:	f8 94       	cli
		*reg &= ~bit;
    3a90:	88 81       	ld	r24, Y
    3a92:	20 95       	com	r18
    3a94:	82 23       	and	r24, r18
    3a96:	88 83       	st	Y, r24
		*out &= ~bit;
    3a98:	ec 91       	ld	r30, X
    3a9a:	2e 23       	and	r18, r30
    3a9c:	0b c0       	rjmp	.+22     	; 0x3ab4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3a9e:	62 30       	cpi	r22, 0x02	; 2
    3aa0:	61 f4       	brne	.+24     	; 0x3aba <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3aa2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3aa4:	f8 94       	cli
		*reg &= ~bit;
    3aa6:	88 81       	ld	r24, Y
    3aa8:	32 2f       	mov	r19, r18
    3aaa:	30 95       	com	r19
    3aac:	83 23       	and	r24, r19
    3aae:	88 83       	st	Y, r24
		*out |= bit;
    3ab0:	ec 91       	ld	r30, X
    3ab2:	2e 2b       	or	r18, r30
    3ab4:	2c 93       	st	X, r18
		SREG = oldSREG;
    3ab6:	9f bf       	out	0x3f, r25	; 63
    3ab8:	06 c0       	rjmp	.+12     	; 0x3ac6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3aba:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3abc:	f8 94       	cli
		*reg |= bit;
    3abe:	e8 81       	ld	r30, Y
    3ac0:	2e 2b       	or	r18, r30
    3ac2:	28 83       	st	Y, r18
		SREG = oldSREG;
    3ac4:	8f bf       	out	0x3f, r24	; 63
	}
}
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	08 95       	ret

00003acc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3ad2:	28 2f       	mov	r18, r24
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	f9 01       	movw	r30, r18
    3ad8:	e9 5d       	subi	r30, 0xD9	; 217
    3ada:	f8 4f       	sbci	r31, 0xF8	; 248
    3adc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3ade:	f9 01       	movw	r30, r18
    3ae0:	e5 5c       	subi	r30, 0xC5	; 197
    3ae2:	f8 4f       	sbci	r31, 0xF8	; 248
    3ae4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3ae6:	f9 01       	movw	r30, r18
    3ae8:	e1 5b       	subi	r30, 0xB1	; 177
    3aea:	f8 4f       	sbci	r31, 0xF8	; 248
    3aec:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3aee:	cc 23       	and	r28, r28
    3af0:	c1 f0       	breq	.+48     	; 0x3b22 <digitalWrite+0x56>
    3af2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3af4:	81 11       	cpse	r24, r1
    3af6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <turnOffPWM>

	out = portOutputRegister(port);
    3afa:	ec 2f       	mov	r30, r28
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	ee 0f       	add	r30, r30
    3b00:	ff 1f       	adc	r31, r31
    3b02:	e3 59       	subi	r30, 0x93	; 147
    3b04:	f8 4f       	sbci	r31, 0xF8	; 248
    3b06:	a5 91       	lpm	r26, Z+
    3b08:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3b0a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3b0c:	f8 94       	cli

	if (val == LOW) {
    3b0e:	11 11       	cpse	r17, r1
    3b10:	04 c0       	rjmp	.+8      	; 0x3b1a <digitalWrite+0x4e>
		*out &= ~bit;
    3b12:	8c 91       	ld	r24, X
    3b14:	d0 95       	com	r29
    3b16:	d8 23       	and	r29, r24
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <digitalWrite+0x52>
	} else {
		*out |= bit;
    3b1a:	ec 91       	ld	r30, X
    3b1c:	de 2b       	or	r29, r30
    3b1e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3b20:	9f bf       	out	0x3f, r25	; 63
}
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	1f 91       	pop	r17
    3b28:	08 95       	ret

00003b2a <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <free>

00003b34 <_ZN6String10invalidateEv>:
    3b34:	cf 93       	push	r28
    3b36:	df 93       	push	r29
    3b38:	ec 01       	movw	r28, r24
    3b3a:	88 81       	ld	r24, Y
    3b3c:	99 81       	ldd	r25, Y+1	; 0x01
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	11 f0       	breq	.+4      	; 0x3b46 <_ZN6String10invalidateEv+0x12>
    3b42:	0e 94 0b 22 	call	0x4416	; 0x4416 <free>
    3b46:	19 82       	std	Y+1, r1	; 0x01
    3b48:	18 82       	st	Y, r1
    3b4a:	1d 82       	std	Y+5, r1	; 0x05
    3b4c:	1c 82       	std	Y+4, r1	; 0x04
    3b4e:	1b 82       	std	Y+3, r1	; 0x03
    3b50:	1a 82       	std	Y+2, r1	; 0x02
    3b52:	df 91       	pop	r29
    3b54:	cf 91       	pop	r28
    3b56:	08 95       	ret

00003b58 <_ZN6String12changeBufferEj>:
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	ec 01       	movw	r28, r24
    3b62:	8b 01       	movw	r16, r22
    3b64:	6f 5f       	subi	r22, 0xFF	; 255
    3b66:	7f 4f       	sbci	r23, 0xFF	; 255
    3b68:	88 81       	ld	r24, Y
    3b6a:	99 81       	ldd	r25, Y+1	; 0x01
    3b6c:	0e 94 94 22 	call	0x4528	; 0x4528 <realloc>
    3b70:	00 97       	sbiw	r24, 0x00	; 0
    3b72:	31 f0       	breq	.+12     	; 0x3b80 <_ZN6String12changeBufferEj+0x28>
    3b74:	99 83       	std	Y+1, r25	; 0x01
    3b76:	88 83       	st	Y, r24
    3b78:	1b 83       	std	Y+3, r17	; 0x03
    3b7a:	0a 83       	std	Y+2, r16	; 0x02
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	01 c0       	rjmp	.+2      	; 0x3b82 <_ZN6String12changeBufferEj+0x2a>
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	08 95       	ret

00003b8c <_ZN6String7reserveEj>:
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	ec 01       	movw	r28, r24
    3b92:	88 81       	ld	r24, Y
    3b94:	99 81       	ldd	r25, Y+1	; 0x01
    3b96:	89 2b       	or	r24, r25
    3b98:	29 f0       	breq	.+10     	; 0x3ba4 <_ZN6String7reserveEj+0x18>
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9e:	86 17       	cp	r24, r22
    3ba0:	97 07       	cpc	r25, r23
    3ba2:	60 f4       	brcc	.+24     	; 0x3bbc <_ZN6String7reserveEj+0x30>
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <_ZN6String12changeBufferEj>
    3baa:	88 23       	and	r24, r24
    3bac:	41 f0       	breq	.+16     	; 0x3bbe <_ZN6String7reserveEj+0x32>
    3bae:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb2:	89 2b       	or	r24, r25
    3bb4:	19 f4       	brne	.+6      	; 0x3bbc <_ZN6String7reserveEj+0x30>
    3bb6:	e8 81       	ld	r30, Y
    3bb8:	f9 81       	ldd	r31, Y+1	; 0x01
    3bba:	10 82       	st	Z, r1
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	08 95       	ret

00003bc4 <_ZN6String4copyEPKcj>:
    3bc4:	ef 92       	push	r14
    3bc6:	ff 92       	push	r15
    3bc8:	0f 93       	push	r16
    3bca:	1f 93       	push	r17
    3bcc:	cf 93       	push	r28
    3bce:	df 93       	push	r29
    3bd0:	ec 01       	movw	r28, r24
    3bd2:	7b 01       	movw	r14, r22
    3bd4:	8a 01       	movw	r16, r20
    3bd6:	ba 01       	movw	r22, r20
    3bd8:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <_ZN6String7reserveEj>
    3bdc:	81 11       	cpse	r24, r1
    3bde:	04 c0       	rjmp	.+8      	; 0x3be8 <_ZN6String4copyEPKcj+0x24>
    3be0:	ce 01       	movw	r24, r28
    3be2:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <_ZN6String10invalidateEv>
    3be6:	07 c0       	rjmp	.+14     	; 0x3bf6 <_ZN6String4copyEPKcj+0x32>
    3be8:	1d 83       	std	Y+5, r17	; 0x05
    3bea:	0c 83       	std	Y+4, r16	; 0x04
    3bec:	b7 01       	movw	r22, r14
    3bee:	88 81       	ld	r24, Y
    3bf0:	99 81       	ldd	r25, Y+1	; 0x01
    3bf2:	0e 94 b8 23 	call	0x4770	; 0x4770 <strcpy>
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	1f 91       	pop	r17
    3bfe:	0f 91       	pop	r16
    3c00:	ff 90       	pop	r15
    3c02:	ef 90       	pop	r14
    3c04:	08 95       	ret

00003c06 <_ZN6StringC1EPKc>:
    3c06:	fc 01       	movw	r30, r24
    3c08:	11 82       	std	Z+1, r1	; 0x01
    3c0a:	10 82       	st	Z, r1
    3c0c:	13 82       	std	Z+3, r1	; 0x03
    3c0e:	12 82       	std	Z+2, r1	; 0x02
    3c10:	15 82       	std	Z+5, r1	; 0x05
    3c12:	14 82       	std	Z+4, r1	; 0x04
    3c14:	61 15       	cp	r22, r1
    3c16:	71 05       	cpc	r23, r1
    3c18:	51 f0       	breq	.+20     	; 0x3c2e <_ZN6StringC1EPKc+0x28>
    3c1a:	fb 01       	movw	r30, r22
    3c1c:	01 90       	ld	r0, Z+
    3c1e:	00 20       	and	r0, r0
    3c20:	e9 f7       	brne	.-6      	; 0x3c1c <_ZN6StringC1EPKc+0x16>
    3c22:	31 97       	sbiw	r30, 0x01	; 1
    3c24:	af 01       	movw	r20, r30
    3c26:	46 1b       	sub	r20, r22
    3c28:	57 0b       	sbc	r21, r23
    3c2a:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <_ZN6String4copyEPKcj>
    3c2e:	08 95       	ret

00003c30 <_ZN6StringaSERKS_>:
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	ec 01       	movw	r28, r24
    3c36:	fb 01       	movw	r30, r22
    3c38:	86 17       	cp	r24, r22
    3c3a:	97 07       	cpc	r25, r23
    3c3c:	61 f0       	breq	.+24     	; 0x3c56 <_ZN6StringaSERKS_+0x26>
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	61 15       	cp	r22, r1
    3c44:	71 05       	cpc	r23, r1
    3c46:	29 f0       	breq	.+10     	; 0x3c52 <_ZN6StringaSERKS_+0x22>
    3c48:	44 81       	ldd	r20, Z+4	; 0x04
    3c4a:	55 81       	ldd	r21, Z+5	; 0x05
    3c4c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN6String4copyEPKcj>
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <_ZN6StringaSERKS_+0x26>
    3c52:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <_ZN6String10invalidateEv>
    3c56:	ce 01       	movw	r24, r28
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	08 95       	ret

00003c5e <_ZN6StringC1ERKS_>:
    3c5e:	fc 01       	movw	r30, r24
    3c60:	11 82       	std	Z+1, r1	; 0x01
    3c62:	10 82       	st	Z, r1
    3c64:	13 82       	std	Z+3, r1	; 0x03
    3c66:	12 82       	std	Z+2, r1	; 0x02
    3c68:	15 82       	std	Z+5, r1	; 0x05
    3c6a:	14 82       	std	Z+4, r1	; 0x04
    3c6c:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <_ZN6StringaSERKS_>

00003c70 <_ZN6String6concatEPKcj>:
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	0f 93       	push	r16
    3c76:	1f 93       	push	r17
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	61 15       	cp	r22, r1
    3c7e:	71 05       	cpc	r23, r1
    3c80:	11 f4       	brne	.+4      	; 0x3c86 <_ZN6String6concatEPKcj+0x16>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	1c c0       	rjmp	.+56     	; 0x3cbe <_ZN6String6concatEPKcj+0x4e>
    3c86:	41 15       	cp	r20, r1
    3c88:	51 05       	cpc	r21, r1
    3c8a:	c1 f0       	breq	.+48     	; 0x3cbc <_ZN6String6concatEPKcj+0x4c>
    3c8c:	7b 01       	movw	r14, r22
    3c8e:	ec 01       	movw	r28, r24
    3c90:	8c 81       	ldd	r24, Y+4	; 0x04
    3c92:	9d 81       	ldd	r25, Y+5	; 0x05
    3c94:	8a 01       	movw	r16, r20
    3c96:	08 0f       	add	r16, r24
    3c98:	19 1f       	adc	r17, r25
    3c9a:	b8 01       	movw	r22, r16
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <_ZN6String7reserveEj>
    3ca2:	88 23       	and	r24, r24
    3ca4:	71 f3       	breq	.-36     	; 0x3c82 <_ZN6String6concatEPKcj+0x12>
    3ca6:	28 81       	ld	r18, Y
    3ca8:	39 81       	ldd	r19, Y+1	; 0x01
    3caa:	8c 81       	ldd	r24, Y+4	; 0x04
    3cac:	9d 81       	ldd	r25, Y+5	; 0x05
    3cae:	b7 01       	movw	r22, r14
    3cb0:	82 0f       	add	r24, r18
    3cb2:	93 1f       	adc	r25, r19
    3cb4:	0e 94 b8 23 	call	0x4770	; 0x4770 <strcpy>
    3cb8:	1d 83       	std	Y+5, r17	; 0x05
    3cba:	0c 83       	std	Y+4, r16	; 0x04
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	08 95       	ret

00003ccc <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <_ZN6String6concatEh+0xe>
    3cda:	00 d0       	rcall	.+0      	; 0x3cdc <_ZN6String6concatEh+0x10>
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
    3ce0:	7c 01       	movw	r14, r24
    3ce2:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3ce4:	4a e0       	ldi	r20, 0x0A	; 10
    3ce6:	8e 01       	movw	r16, r28
    3ce8:	0f 5f       	subi	r16, 0xFF	; 255
    3cea:	1f 4f       	sbci	r17, 0xFF	; 255
    3cec:	b8 01       	movw	r22, r16
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	0e 94 bf 23 	call	0x477e	; 0x477e <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	01 90       	ld	r0, Z+
    3cf8:	00 20       	and	r0, r0
    3cfa:	e9 f7       	brne	.-6      	; 0x3cf6 <_ZN6String6concatEh+0x2a>
    3cfc:	31 97       	sbiw	r30, 0x01	; 1
    3cfe:	af 01       	movw	r20, r30
    3d00:	40 1b       	sub	r20, r16
    3d02:	51 0b       	sbc	r21, r17
    3d04:	b8 01       	movw	r22, r16
    3d06:	c7 01       	movw	r24, r14
    3d08:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <_ZN6String6concatEPKcj>
}
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	08 95       	ret

00003d22 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3d22:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3d26:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d2a:	28 17       	cp	r18, r24
    3d2c:	39 07       	cpc	r19, r25
    3d2e:	b9 f4       	brne	.+46     	; 0x3d5e <_ZN14SoftwareSerial4readEv+0x3c>
    3d30:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d34:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d38:	98 17       	cp	r25, r24
    3d3a:	89 f0       	breq	.+34     	; 0x3d5e <_ZN14SoftwareSerial4readEv+0x3c>
    3d3c:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	ea 5b       	subi	r30, 0xBA	; 186
    3d44:	fb 4f       	sbci	r31, 0xFB	; 251
    3d46:	80 81       	ld	r24, Z
    3d48:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	2f 5f       	subi	r18, 0xFF	; 255
    3d50:	3f 4f       	sbci	r19, 0xFF	; 255
    3d52:	2f 73       	andi	r18, 0x3F	; 63
    3d54:	33 27       	eor	r19, r19
    3d56:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	08 95       	ret
    3d5e:	8f ef       	ldi	r24, 0xFF	; 255
    3d60:	9f ef       	ldi	r25, 0xFF	; 255
    3d62:	08 95       	ret

00003d64 <_ZN14SoftwareSerial5writeEh>:
    3d64:	1f 93       	push	r17
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	5c 96       	adiw	r26, 0x1c	; 28
    3d6e:	8d 91       	ld	r24, X+
    3d70:	9c 91       	ld	r25, X
    3d72:	5d 97       	sbiw	r26, 0x1d	; 29
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	39 f4       	brne	.+14     	; 0x3d86 <_ZN14SoftwareSerial5writeEh+0x22>
    3d78:	21 e0       	ldi	r18, 0x01	; 1
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	13 96       	adiw	r26, 0x03	; 3
    3d7e:	3c 93       	st	X, r19
    3d80:	2e 93       	st	-X, r18
    3d82:	12 97       	sbiw	r26, 0x02	; 2
    3d84:	3b c0       	rjmp	.+118    	; 0x3dfc <_ZN14SoftwareSerial5writeEh+0x98>
    3d86:	51 96       	adiw	r26, 0x11	; 17
    3d88:	ed 91       	ld	r30, X+
    3d8a:	fc 91       	ld	r31, X
    3d8c:	52 97       	sbiw	r26, 0x12	; 18
    3d8e:	50 96       	adiw	r26, 0x10	; 16
    3d90:	2c 91       	ld	r18, X
    3d92:	50 97       	sbiw	r26, 0x10	; 16
    3d94:	32 2f       	mov	r19, r18
    3d96:	30 95       	com	r19
    3d98:	1f b7       	in	r17, 0x3f	; 63
    3d9a:	5e 96       	adiw	r26, 0x1e	; 30
    3d9c:	4c 91       	ld	r20, X
    3d9e:	5e 97       	sbiw	r26, 0x1e	; 30
    3da0:	74 2f       	mov	r23, r20
    3da2:	72 70       	andi	r23, 0x02	; 2
    3da4:	41 fd       	sbrc	r20, 1
    3da6:	60 95       	com	r22
    3da8:	f8 94       	cli
    3daa:	40 81       	ld	r20, Z
    3dac:	77 23       	and	r23, r23
    3dae:	11 f0       	breq	.+4      	; 0x3db4 <_ZN14SoftwareSerial5writeEh+0x50>
    3db0:	42 2b       	or	r20, r18
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <_ZN14SoftwareSerial5writeEh+0x52>
    3db4:	43 23       	and	r20, r19
    3db6:	40 83       	st	Z, r20
    3db8:	ec 01       	movw	r28, r24
    3dba:	21 97       	sbiw	r28, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <_ZN14SoftwareSerial5writeEh+0x56>
    3dbe:	48 e0       	ldi	r20, 0x08	; 8
    3dc0:	50 81       	ld	r21, Z
    3dc2:	60 ff       	sbrs	r22, 0
    3dc4:	02 c0       	rjmp	.+4      	; 0x3dca <_ZN14SoftwareSerial5writeEh+0x66>
    3dc6:	52 2b       	or	r21, r18
    3dc8:	01 c0       	rjmp	.+2      	; 0x3dcc <_ZN14SoftwareSerial5writeEh+0x68>
    3dca:	53 23       	and	r21, r19
    3dcc:	50 83       	st	Z, r21
    3dce:	ec 01       	movw	r28, r24
    3dd0:	21 97       	sbiw	r28, 0x01	; 1
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <_ZN14SoftwareSerial5writeEh+0x6c>
    3dd4:	66 95       	lsr	r22
    3dd6:	41 50       	subi	r20, 0x01	; 1
    3dd8:	99 f7       	brne	.-26     	; 0x3dc0 <_ZN14SoftwareSerial5writeEh+0x5c>
    3dda:	80 81       	ld	r24, Z
    3ddc:	77 23       	and	r23, r23
    3dde:	19 f0       	breq	.+6      	; 0x3de6 <_ZN14SoftwareSerial5writeEh+0x82>
    3de0:	83 23       	and	r24, r19
    3de2:	80 83       	st	Z, r24
    3de4:	02 c0       	rjmp	.+4      	; 0x3dea <_ZN14SoftwareSerial5writeEh+0x86>
    3de6:	28 2b       	or	r18, r24
    3de8:	20 83       	st	Z, r18
    3dea:	1f bf       	out	0x3f, r17	; 63
    3dec:	5c 96       	adiw	r26, 0x1c	; 28
    3dee:	8d 91       	ld	r24, X+
    3df0:	9c 91       	ld	r25, X
    3df2:	5d 97       	sbiw	r26, 0x1d	; 29
    3df4:	01 97       	sbiw	r24, 0x01	; 1
    3df6:	f1 f7       	brne	.-4      	; 0x3df4 <_ZN14SoftwareSerial5writeEh+0x90>
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	08 95       	ret

00003e04 <_ZN14SoftwareSerial5flushEv>:
    3e04:	08 95       	ret

00003e06 <_ZN14SoftwareSerial4peekEv>:
    3e06:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3e0a:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e0e:	28 17       	cp	r18, r24
    3e10:	39 07       	cpc	r19, r25
    3e12:	71 f4       	brne	.+28     	; 0x3e30 <_ZN14SoftwareSerial4peekEv+0x2a>
    3e14:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e18:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e1c:	98 17       	cp	r25, r24
    3e1e:	41 f0       	breq	.+16     	; 0x3e30 <_ZN14SoftwareSerial4peekEv+0x2a>
    3e20:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	ea 5b       	subi	r30, 0xBA	; 186
    3e28:	fb 4f       	sbci	r31, 0xFB	; 251
    3e2a:	80 81       	ld	r24, Z
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	08 95       	ret
    3e30:	8f ef       	ldi	r24, 0xFF	; 255
    3e32:	9f ef       	ldi	r25, 0xFF	; 255
    3e34:	08 95       	ret

00003e36 <_ZN14SoftwareSerial9availableEv>:
    3e36:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3e3a:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e3e:	28 17       	cp	r18, r24
    3e40:	39 07       	cpc	r19, r25
    3e42:	71 f4       	brne	.+28     	; 0x3e60 <_ZN14SoftwareSerial9availableEv+0x2a>
    3e44:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e48:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	80 5c       	subi	r24, 0xC0	; 192
    3e50:	9f 4f       	sbci	r25, 0xFF	; 255
    3e52:	82 1b       	sub	r24, r18
    3e54:	91 09       	sbc	r25, r1
    3e56:	60 e4       	ldi	r22, 0x40	; 64
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	0e 94 18 21 	call	0x4230	; 0x4230 <__divmodhi4>
    3e5e:	08 95       	ret
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	08 95       	ret

00003e66 <_ZN14SoftwareSerial13stopListeningEv>:
    3e66:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3e6a:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e6e:	e8 17       	cp	r30, r24
    3e70:	f9 07       	cpc	r31, r25
    3e72:	69 f4       	brne	.+26     	; 0x3e8e <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3e74:	a3 89       	ldd	r26, Z+19	; 0x13
    3e76:	b4 89       	ldd	r27, Z+20	; 0x14
    3e78:	9c 91       	ld	r25, X
    3e7a:	85 89       	ldd	r24, Z+21	; 0x15
    3e7c:	80 95       	com	r24
    3e7e:	89 23       	and	r24, r25
    3e80:	8c 93       	st	X, r24
    3e82:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e86:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	08 95       	ret
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	08 95       	ret

00003e92 <_ZN14SoftwareSerial6listenEv>:
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	ec 01       	movw	r28, r24
    3e98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e9c:	89 2b       	or	r24, r25
    3e9e:	f1 f0       	breq	.+60     	; 0x3edc <_ZN14SoftwareSerial6listenEv+0x4a>
    3ea0:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3ea4:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ea8:	c8 17       	cp	r28, r24
    3eaa:	d9 07       	cpc	r29, r25
    3eac:	b9 f0       	breq	.+46     	; 0x3edc <_ZN14SoftwareSerial6listenEv+0x4a>
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	11 f0       	breq	.+4      	; 0x3eb6 <_ZN14SoftwareSerial6listenEv+0x24>
    3eb2:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN14SoftwareSerial13stopListeningEv>
    3eb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3eb8:	8e 7f       	andi	r24, 0xFE	; 254
    3eba:	8e 8f       	std	Y+30, r24	; 0x1e
    3ebc:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3ec0:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ec4:	d0 93 87 04 	sts	0x0487, r29	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ec8:	c0 93 86 04 	sts	0x0486, r28	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3ecc:	eb 89       	ldd	r30, Y+19	; 0x13
    3ece:	fc 89       	ldd	r31, Y+20	; 0x14
    3ed0:	90 81       	ld	r25, Z
    3ed2:	8d 89       	ldd	r24, Y+21	; 0x15
    3ed4:	89 2b       	or	r24, r25
    3ed6:	80 83       	st	Z, r24
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <_ZN14SoftwareSerial6listenEv+0x4c>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	08 95       	ret

00003ee4 <__vector_3>:
    3ee4:	1f 92       	push	r1
    3ee6:	0f 92       	push	r0
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	0f 92       	push	r0
    3eec:	11 24       	eor	r1, r1
    3eee:	2f 93       	push	r18
    3ef0:	3f 93       	push	r19
    3ef2:	4f 93       	push	r20
    3ef4:	5f 93       	push	r21
    3ef6:	6f 93       	push	r22
    3ef8:	7f 93       	push	r23
    3efa:	8f 93       	push	r24
    3efc:	9f 93       	push	r25
    3efe:	af 93       	push	r26
    3f00:	bf 93       	push	r27
    3f02:	ef 93       	push	r30
    3f04:	ff 93       	push	r31
    3f06:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f0a:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f0e:	30 97       	sbiw	r30, 0x00	; 0
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <__vector_3+0x30>
    3f12:	51 c0       	rjmp	.+162    	; 0x3fb6 <__vector_3+0xd2>
    3f14:	96 8d       	ldd	r25, Z+30	; 0x1e
    3f16:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f18:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f1a:	85 85       	ldd	r24, Z+13	; 0x0d
    3f1c:	91 ff       	sbrs	r25, 1
    3f1e:	04 c0       	rjmp	.+8      	; 0x3f28 <__vector_3+0x44>
    3f20:	9c 91       	ld	r25, X
    3f22:	89 23       	and	r24, r25
    3f24:	29 f4       	brne	.+10     	; 0x3f30 <__vector_3+0x4c>
    3f26:	47 c0       	rjmp	.+142    	; 0x3fb6 <__vector_3+0xd2>
    3f28:	9c 91       	ld	r25, X
    3f2a:	89 23       	and	r24, r25
    3f2c:	09 f0       	breq	.+2      	; 0x3f30 <__vector_3+0x4c>
    3f2e:	43 c0       	rjmp	.+134    	; 0x3fb6 <__vector_3+0xd2>
    3f30:	a3 89       	ldd	r26, Z+19	; 0x13
    3f32:	b4 89       	ldd	r27, Z+20	; 0x14
    3f34:	9c 91       	ld	r25, X
    3f36:	85 89       	ldd	r24, Z+21	; 0x15
    3f38:	80 95       	com	r24
    3f3a:	89 23       	and	r24, r25
    3f3c:	8c 93       	st	X, r24
    3f3e:	86 89       	ldd	r24, Z+22	; 0x16
    3f40:	97 89       	ldd	r25, Z+23	; 0x17
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <__vector_3+0x5e>
    3f46:	60 8d       	ldd	r22, Z+24	; 0x18
    3f48:	71 8d       	ldd	r23, Z+25	; 0x19
    3f4a:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f4c:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f4e:	55 85       	ldd	r21, Z+13	; 0x0d
    3f50:	38 e0       	ldi	r19, 0x08	; 8
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	cb 01       	movw	r24, r22
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <__vector_3+0x72>
    3f5a:	82 2f       	mov	r24, r18
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	95 95       	asr	r25
    3f60:	87 95       	ror	r24
    3f62:	28 2f       	mov	r18, r24
    3f64:	4c 91       	ld	r20, X
    3f66:	45 23       	and	r20, r21
    3f68:	09 f0       	breq	.+2      	; 0x3f6c <__vector_3+0x88>
    3f6a:	20 68       	ori	r18, 0x80	; 128
    3f6c:	31 50       	subi	r19, 0x01	; 1
    3f6e:	91 f7       	brne	.-28     	; 0x3f54 <__vector_3+0x70>
    3f70:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f72:	81 fd       	sbrc	r24, 1
    3f74:	20 95       	com	r18
    3f76:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	01 96       	adiw	r24, 0x01	; 1
    3f7e:	8f 73       	andi	r24, 0x3F	; 63
    3f80:	99 27       	eor	r25, r25
    3f82:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f86:	38 17       	cp	r19, r24
    3f88:	49 f0       	breq	.+18     	; 0x3f9c <__vector_3+0xb8>
    3f8a:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f8e:	b0 e0       	ldi	r27, 0x00	; 0
    3f90:	aa 5b       	subi	r26, 0xBA	; 186
    3f92:	bb 4f       	sbci	r27, 0xFB	; 251
    3f94:	2c 93       	st	X, r18
    3f96:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f9a:	03 c0       	rjmp	.+6      	; 0x3fa2 <__vector_3+0xbe>
    3f9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f9e:	81 60       	ori	r24, 0x01	; 1
    3fa0:	86 8f       	std	Z+30, r24	; 0x1e
    3fa2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3fa4:	93 8d       	ldd	r25, Z+27	; 0x1b
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <__vector_3+0xc2>
    3faa:	a3 89       	ldd	r26, Z+19	; 0x13
    3fac:	b4 89       	ldd	r27, Z+20	; 0x14
    3fae:	9c 91       	ld	r25, X
    3fb0:	85 89       	ldd	r24, Z+21	; 0x15
    3fb2:	89 2b       	or	r24, r25
    3fb4:	8c 93       	st	X, r24
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	9f 91       	pop	r25
    3fc0:	8f 91       	pop	r24
    3fc2:	7f 91       	pop	r23
    3fc4:	6f 91       	pop	r22
    3fc6:	5f 91       	pop	r21
    3fc8:	4f 91       	pop	r20
    3fca:	3f 91       	pop	r19
    3fcc:	2f 91       	pop	r18
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti

00003fd8 <_ZN14SoftwareSerial5setTXEh>:
    3fd8:	1f 93       	push	r17
    3fda:	cf 93       	push	r28
    3fdc:	df 93       	push	r29
    3fde:	ec 01       	movw	r28, r24
    3fe0:	16 2f       	mov	r17, r22
    3fe2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3fe4:	66 95       	lsr	r22
    3fe6:	61 70       	andi	r22, 0x01	; 1
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	68 27       	eor	r22, r24
    3fec:	81 2f       	mov	r24, r17
    3fee:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
    3ff2:	61 e0       	ldi	r22, 0x01	; 1
    3ff4:	81 2f       	mov	r24, r17
    3ff6:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <pinMode>
    3ffa:	81 2f       	mov	r24, r17
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	fc 01       	movw	r30, r24
    4000:	e5 5c       	subi	r30, 0xC5	; 197
    4002:	f8 4f       	sbci	r31, 0xF8	; 248
    4004:	e4 91       	lpm	r30, Z
    4006:	e8 8b       	std	Y+16, r30	; 0x10
    4008:	fc 01       	movw	r30, r24
    400a:	e1 5b       	subi	r30, 0xB1	; 177
    400c:	f8 4f       	sbci	r31, 0xF8	; 248
    400e:	e4 91       	lpm	r30, Z
    4010:	f0 e0       	ldi	r31, 0x00	; 0
    4012:	ee 0f       	add	r30, r30
    4014:	ff 1f       	adc	r31, r31
    4016:	e3 59       	subi	r30, 0x93	; 147
    4018:	f8 4f       	sbci	r31, 0xF8	; 248
    401a:	85 91       	lpm	r24, Z+
    401c:	94 91       	lpm	r25, Z
    401e:	9a 8b       	std	Y+18, r25	; 0x12
    4020:	89 8b       	std	Y+17, r24	; 0x11
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	08 95       	ret

0000402a <_ZN14SoftwareSerial5setRXEh>:
    402a:	1f 93       	push	r17
    402c:	cf 93       	push	r28
    402e:	df 93       	push	r29
    4030:	ec 01       	movw	r28, r24
    4032:	16 2f       	mov	r17, r22
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	81 2f       	mov	r24, r17
    4038:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <pinMode>
    403c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    403e:	81 fd       	sbrc	r24, 1
    4040:	04 c0       	rjmp	.+8      	; 0x404a <_ZN14SoftwareSerial5setRXEh+0x20>
    4042:	61 e0       	ldi	r22, 0x01	; 1
    4044:	81 2f       	mov	r24, r17
    4046:	0e 94 66 1d 	call	0x3acc	; 0x3acc <digitalWrite>
    404a:	1c 87       	std	Y+12, r17	; 0x0c
    404c:	81 2f       	mov	r24, r17
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	fc 01       	movw	r30, r24
    4052:	e5 5c       	subi	r30, 0xC5	; 197
    4054:	f8 4f       	sbci	r31, 0xF8	; 248
    4056:	e4 91       	lpm	r30, Z
    4058:	ed 87       	std	Y+13, r30	; 0x0d
    405a:	fc 01       	movw	r30, r24
    405c:	e1 5b       	subi	r30, 0xB1	; 177
    405e:	f8 4f       	sbci	r31, 0xF8	; 248
    4060:	e4 91       	lpm	r30, Z
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	ee 0f       	add	r30, r30
    4066:	ff 1f       	adc	r31, r31
    4068:	ed 59       	subi	r30, 0x9D	; 157
    406a:	f8 4f       	sbci	r31, 0xF8	; 248
    406c:	85 91       	lpm	r24, Z+
    406e:	94 91       	lpm	r25, Z
    4070:	9f 87       	std	Y+15, r25	; 0x0f
    4072:	8e 87       	std	Y+14, r24	; 0x0e
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	1f 91       	pop	r17
    407a:	08 95       	ret

0000407c <_ZN14SoftwareSerialC1Ehhb>:
    407c:	1f 93       	push	r17
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	ec 01       	movw	r28, r24
    4084:	16 2f       	mov	r17, r22
    4086:	1b 82       	std	Y+3, r1	; 0x03
    4088:	1a 82       	std	Y+2, r1	; 0x02
    408a:	88 ee       	ldi	r24, 0xE8	; 232
    408c:	93 e0       	ldi	r25, 0x03	; 3
    408e:	a0 e0       	ldi	r26, 0x00	; 0
    4090:	b0 e0       	ldi	r27, 0x00	; 0
    4092:	8c 83       	std	Y+4, r24	; 0x04
    4094:	9d 83       	std	Y+5, r25	; 0x05
    4096:	ae 83       	std	Y+6, r26	; 0x06
    4098:	bf 83       	std	Y+7, r27	; 0x07
    409a:	8d e8       	ldi	r24, 0x8D	; 141
    409c:	91 e0       	ldi	r25, 0x01	; 1
    409e:	99 83       	std	Y+1, r25	; 0x01
    40a0:	88 83       	st	Y, r24
    40a2:	1f 8a       	std	Y+23, r1	; 0x17
    40a4:	1e 8a       	std	Y+22, r1	; 0x16
    40a6:	19 8e       	std	Y+25, r1	; 0x19
    40a8:	18 8e       	std	Y+24, r1	; 0x18
    40aa:	1b 8e       	std	Y+27, r1	; 0x1b
    40ac:	1a 8e       	std	Y+26, r1	; 0x1a
    40ae:	1d 8e       	std	Y+29, r1	; 0x1d
    40b0:	1c 8e       	std	Y+28, r1	; 0x1c
    40b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40b4:	8e 7f       	andi	r24, 0xFE	; 254
    40b6:	20 fb       	bst	r18, 0
    40b8:	81 f9       	bld	r24, 1
    40ba:	8e 8f       	std	Y+30, r24	; 0x1e
    40bc:	64 2f       	mov	r22, r20
    40be:	ce 01       	movw	r24, r28
    40c0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <_ZN14SoftwareSerial5setTXEh>
    40c4:	61 2f       	mov	r22, r17
    40c6:	ce 01       	movw	r24, r28
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0c 94 15 20 	jmp	0x402a	; 0x402a <_ZN14SoftwareSerial5setRXEh>

000040d2 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	ec 01       	movw	r28, r24
    40d8:	9a 01       	movw	r18, r20
    40da:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    40dc:	1b 8e       	std	Y+27, r1	; 0x1b
    40de:	1a 8e       	std	Y+26, r1	; 0x1a
    40e0:	19 8e       	std	Y+25, r1	; 0x19
    40e2:	18 8e       	std	Y+24, r1	; 0x18
    40e4:	1f 8a       	std	Y+23, r1	; 0x17
    40e6:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    40e8:	60 e0       	ldi	r22, 0x00	; 0
    40ea:	79 e0       	ldi	r23, 0x09	; 9
    40ec:	8d e3       	ldi	r24, 0x3D	; 61
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	0e 94 4e 21 	call	0x429c	; 0x429c <__divmodsi4>
    40f4:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    40f6:	24 30       	cpi	r18, 0x04	; 4
    40f8:	31 05       	cpc	r19, r1
    40fa:	18 f0       	brcs	.+6      	; 0x4102 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    40fc:	c9 01       	movw	r24, r18
    40fe:	03 97       	sbiw	r24, 0x03	; 3
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4106:	9d 8f       	std	Y+29, r25	; 0x1d
    4108:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    410a:	6c 85       	ldd	r22, Y+12	; 0x0c
    410c:	66 31       	cpi	r22, 0x16	; 22
    410e:	08 f0       	brcs	.+2      	; 0x4112 <_ZN14SoftwareSerial5beginEl+0x40>
    4110:	69 c0       	rjmp	.+210    	; 0x41e4 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4112:	c9 01       	movw	r24, r18
    4114:	96 95       	lsr	r25
    4116:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4118:	84 31       	cpi	r24, 0x14	; 20
    411a:	91 05       	cpc	r25, r1
    411c:	10 f0       	brcs	.+4      	; 0x4122 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    411e:	43 97       	sbiw	r24, 0x13	; 19
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4126:	9f 8b       	std	Y+23, r25	; 0x17
    4128:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    412a:	36 97       	sbiw	r30, 0x06	; 6
    412c:	18 f0       	brcs	.+6      	; 0x4134 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    412e:	c9 01       	movw	r24, r18
    4130:	05 97       	sbiw	r24, 0x05	; 5
    4132:	02 c0       	rjmp	.+4      	; 0x4138 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4138:	99 8f       	std	Y+25, r25	; 0x19
    413a:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    413c:	c9 01       	movw	r24, r18
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	28 0f       	add	r18, r24
    4144:	39 1f       	adc	r19, r25
    4146:	36 95       	lsr	r19
    4148:	27 95       	ror	r18
    414a:	36 95       	lsr	r19
    414c:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    414e:	2d 30       	cpi	r18, 0x0D	; 13
    4150:	31 05       	cpc	r19, r1
    4152:	18 f0       	brcs	.+6      	; 0x415a <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    4154:	2c 50       	subi	r18, 0x0C	; 12
    4156:	31 09       	sbc	r19, r1
    4158:	02 c0       	rjmp	.+4      	; 0x415e <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    415a:	21 e0       	ldi	r18, 0x01	; 1
    415c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    415e:	3b 8f       	std	Y+27, r19	; 0x1b
    4160:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    4162:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    4166:	68 30       	cpi	r22, 0x08	; 8
    4168:	50 f0       	brcs	.+20     	; 0x417e <_ZN14SoftwareSerial5beginEl+0xac>
    416a:	21 e0       	ldi	r18, 0x01	; 1
    416c:	6e 30       	cpi	r22, 0x0E	; 14
    416e:	08 f4       	brcc	.+2      	; 0x4172 <_ZN14SoftwareSerial5beginEl+0xa0>
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	01 c0       	rjmp	.+2      	; 0x4178 <_ZN14SoftwareSerial5beginEl+0xa6>
    4176:	88 0f       	add	r24, r24
    4178:	2a 95       	dec	r18
    417a:	ea f7       	brpl	.-6      	; 0x4176 <_ZN14SoftwareSerial5beginEl+0xa4>
    417c:	01 c0       	rjmp	.+2      	; 0x4180 <_ZN14SoftwareSerial5beginEl+0xae>
    417e:	84 e0       	ldi	r24, 0x04	; 4
    4180:	89 2b       	or	r24, r25
    4182:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4186:	9c 85       	ldd	r25, Y+12	; 0x0c
    4188:	98 30       	cpi	r25, 0x08	; 8
    418a:	38 f0       	brcs	.+14     	; 0x419a <_ZN14SoftwareSerial5beginEl+0xc8>
    418c:	9e 30       	cpi	r25, 0x0E	; 14
    418e:	40 f0       	brcs	.+16     	; 0x41a0 <_ZN14SoftwareSerial5beginEl+0xce>
    4190:	96 31       	cpi	r25, 0x16	; 22
    4192:	48 f0       	brcs	.+18     	; 0x41a6 <_ZN14SoftwareSerial5beginEl+0xd4>
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	08 c0       	rjmp	.+16     	; 0x41aa <_ZN14SoftwareSerial5beginEl+0xd8>
    419a:	2d e6       	ldi	r18, 0x6D	; 109
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	05 c0       	rjmp	.+10     	; 0x41aa <_ZN14SoftwareSerial5beginEl+0xd8>
    41a0:	2b e6       	ldi	r18, 0x6B	; 107
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <_ZN14SoftwareSerial5beginEl+0xd8>
    41a6:	2c e6       	ldi	r18, 0x6C	; 108
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	3c 8b       	std	Y+20, r19	; 0x14
    41ac:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    41ae:	98 30       	cpi	r25, 0x08	; 8
    41b0:	30 f4       	brcc	.+12     	; 0x41be <_ZN14SoftwareSerial5beginEl+0xec>
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <_ZN14SoftwareSerial5beginEl+0xe6>
    41b6:	88 0f       	add	r24, r24
    41b8:	9a 95       	dec	r25
    41ba:	ea f7       	brpl	.-6      	; 0x41b6 <_ZN14SoftwareSerial5beginEl+0xe4>
    41bc:	0e c0       	rjmp	.+28     	; 0x41da <_ZN14SoftwareSerial5beginEl+0x108>
    41be:	29 2f       	mov	r18, r25
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	9e 30       	cpi	r25, 0x0E	; 14
    41c4:	18 f4       	brcc	.+6      	; 0x41cc <_ZN14SoftwareSerial5beginEl+0xfa>
    41c6:	28 50       	subi	r18, 0x08	; 8
    41c8:	31 09       	sbc	r19, r1
    41ca:	02 c0       	rjmp	.+4      	; 0x41d0 <_ZN14SoftwareSerial5beginEl+0xfe>
    41cc:	2e 50       	subi	r18, 0x0E	; 14
    41ce:	31 09       	sbc	r19, r1
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <_ZN14SoftwareSerial5beginEl+0x104>
    41d4:	88 0f       	add	r24, r24
    41d6:	2a 95       	dec	r18
    41d8:	ea f7       	brpl	.-6      	; 0x41d4 <_ZN14SoftwareSerial5beginEl+0x102>
    41da:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    41dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    41e4:	ce 01       	movw	r24, r28
}
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    41ea:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <_ZN14SoftwareSerial6listenEv>

000041ee <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    41ee:	08 95       	ret

000041f0 <__udivmodqi4>:
    41f0:	99 1b       	sub	r25, r25
    41f2:	79 e0       	ldi	r23, 0x09	; 9
    41f4:	04 c0       	rjmp	.+8      	; 0x41fe <__udivmodqi4_ep>

000041f6 <__udivmodqi4_loop>:
    41f6:	99 1f       	adc	r25, r25
    41f8:	96 17       	cp	r25, r22
    41fa:	08 f0       	brcs	.+2      	; 0x41fe <__udivmodqi4_ep>
    41fc:	96 1b       	sub	r25, r22

000041fe <__udivmodqi4_ep>:
    41fe:	88 1f       	adc	r24, r24
    4200:	7a 95       	dec	r23
    4202:	c9 f7       	brne	.-14     	; 0x41f6 <__udivmodqi4_loop>
    4204:	80 95       	com	r24
    4206:	08 95       	ret

00004208 <__udivmodhi4>:
    4208:	aa 1b       	sub	r26, r26
    420a:	bb 1b       	sub	r27, r27
    420c:	51 e1       	ldi	r21, 0x11	; 17
    420e:	07 c0       	rjmp	.+14     	; 0x421e <__udivmodhi4_ep>

00004210 <__udivmodhi4_loop>:
    4210:	aa 1f       	adc	r26, r26
    4212:	bb 1f       	adc	r27, r27
    4214:	a6 17       	cp	r26, r22
    4216:	b7 07       	cpc	r27, r23
    4218:	10 f0       	brcs	.+4      	; 0x421e <__udivmodhi4_ep>
    421a:	a6 1b       	sub	r26, r22
    421c:	b7 0b       	sbc	r27, r23

0000421e <__udivmodhi4_ep>:
    421e:	88 1f       	adc	r24, r24
    4220:	99 1f       	adc	r25, r25
    4222:	5a 95       	dec	r21
    4224:	a9 f7       	brne	.-22     	; 0x4210 <__udivmodhi4_loop>
    4226:	80 95       	com	r24
    4228:	90 95       	com	r25
    422a:	bc 01       	movw	r22, r24
    422c:	cd 01       	movw	r24, r26
    422e:	08 95       	ret

00004230 <__divmodhi4>:
    4230:	97 fb       	bst	r25, 7
    4232:	07 2e       	mov	r0, r23
    4234:	16 f4       	brtc	.+4      	; 0x423a <__divmodhi4+0xa>
    4236:	00 94       	com	r0
    4238:	07 d0       	rcall	.+14     	; 0x4248 <__divmodhi4_neg1>
    423a:	77 fd       	sbrc	r23, 7
    423c:	09 d0       	rcall	.+18     	; 0x4250 <__divmodhi4_neg2>
    423e:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodhi4>
    4242:	07 fc       	sbrc	r0, 7
    4244:	05 d0       	rcall	.+10     	; 0x4250 <__divmodhi4_neg2>
    4246:	3e f4       	brtc	.+14     	; 0x4256 <__divmodhi4_exit>

00004248 <__divmodhi4_neg1>:
    4248:	90 95       	com	r25
    424a:	81 95       	neg	r24
    424c:	9f 4f       	sbci	r25, 0xFF	; 255
    424e:	08 95       	ret

00004250 <__divmodhi4_neg2>:
    4250:	70 95       	com	r23
    4252:	61 95       	neg	r22
    4254:	7f 4f       	sbci	r23, 0xFF	; 255

00004256 <__divmodhi4_exit>:
    4256:	08 95       	ret

00004258 <__udivmodsi4>:
    4258:	a1 e2       	ldi	r26, 0x21	; 33
    425a:	1a 2e       	mov	r1, r26
    425c:	aa 1b       	sub	r26, r26
    425e:	bb 1b       	sub	r27, r27
    4260:	fd 01       	movw	r30, r26
    4262:	0d c0       	rjmp	.+26     	; 0x427e <__udivmodsi4_ep>

00004264 <__udivmodsi4_loop>:
    4264:	aa 1f       	adc	r26, r26
    4266:	bb 1f       	adc	r27, r27
    4268:	ee 1f       	adc	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	a2 17       	cp	r26, r18
    426e:	b3 07       	cpc	r27, r19
    4270:	e4 07       	cpc	r30, r20
    4272:	f5 07       	cpc	r31, r21
    4274:	20 f0       	brcs	.+8      	; 0x427e <__udivmodsi4_ep>
    4276:	a2 1b       	sub	r26, r18
    4278:	b3 0b       	sbc	r27, r19
    427a:	e4 0b       	sbc	r30, r20
    427c:	f5 0b       	sbc	r31, r21

0000427e <__udivmodsi4_ep>:
    427e:	66 1f       	adc	r22, r22
    4280:	77 1f       	adc	r23, r23
    4282:	88 1f       	adc	r24, r24
    4284:	99 1f       	adc	r25, r25
    4286:	1a 94       	dec	r1
    4288:	69 f7       	brne	.-38     	; 0x4264 <__udivmodsi4_loop>
    428a:	60 95       	com	r22
    428c:	70 95       	com	r23
    428e:	80 95       	com	r24
    4290:	90 95       	com	r25
    4292:	9b 01       	movw	r18, r22
    4294:	ac 01       	movw	r20, r24
    4296:	bd 01       	movw	r22, r26
    4298:	cf 01       	movw	r24, r30
    429a:	08 95       	ret

0000429c <__divmodsi4>:
    429c:	05 2e       	mov	r0, r21
    429e:	97 fb       	bst	r25, 7
    42a0:	1e f4       	brtc	.+6      	; 0x42a8 <__divmodsi4+0xc>
    42a2:	00 94       	com	r0
    42a4:	0e 94 65 21 	call	0x42ca	; 0x42ca <__negsi2>
    42a8:	57 fd       	sbrc	r21, 7
    42aa:	07 d0       	rcall	.+14     	; 0x42ba <__divmodsi4_neg2>
    42ac:	0e 94 2c 21 	call	0x4258	; 0x4258 <__udivmodsi4>
    42b0:	07 fc       	sbrc	r0, 7
    42b2:	03 d0       	rcall	.+6      	; 0x42ba <__divmodsi4_neg2>
    42b4:	4e f4       	brtc	.+18     	; 0x42c8 <__divmodsi4_exit>
    42b6:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__negsi2>

000042ba <__divmodsi4_neg2>:
    42ba:	50 95       	com	r21
    42bc:	40 95       	com	r20
    42be:	30 95       	com	r19
    42c0:	21 95       	neg	r18
    42c2:	3f 4f       	sbci	r19, 0xFF	; 255
    42c4:	4f 4f       	sbci	r20, 0xFF	; 255
    42c6:	5f 4f       	sbci	r21, 0xFF	; 255

000042c8 <__divmodsi4_exit>:
    42c8:	08 95       	ret

000042ca <__negsi2>:
    42ca:	90 95       	com	r25
    42cc:	80 95       	com	r24
    42ce:	70 95       	com	r23
    42d0:	61 95       	neg	r22
    42d2:	7f 4f       	sbci	r23, 0xFF	; 255
    42d4:	8f 4f       	sbci	r24, 0xFF	; 255
    42d6:	9f 4f       	sbci	r25, 0xFF	; 255
    42d8:	08 95       	ret

000042da <__tablejump2__>:
    42da:	ee 0f       	add	r30, r30
    42dc:	ff 1f       	adc	r31, r31
    42de:	05 90       	lpm	r0, Z+
    42e0:	f4 91       	lpm	r31, Z
    42e2:	e0 2d       	mov	r30, r0
    42e4:	09 94       	ijmp

000042e6 <malloc>:
    42e6:	0f 93       	push	r16
    42e8:	1f 93       	push	r17
    42ea:	cf 93       	push	r28
    42ec:	df 93       	push	r29
    42ee:	82 30       	cpi	r24, 0x02	; 2
    42f0:	91 05       	cpc	r25, r1
    42f2:	10 f4       	brcc	.+4      	; 0x42f8 <malloc+0x12>
    42f4:	82 e0       	ldi	r24, 0x02	; 2
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    42fc:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	a0 e0       	ldi	r26, 0x00	; 0
    4306:	b0 e0       	ldi	r27, 0x00	; 0
    4308:	30 97       	sbiw	r30, 0x00	; 0
    430a:	19 f1       	breq	.+70     	; 0x4352 <malloc+0x6c>
    430c:	40 81       	ld	r20, Z
    430e:	51 81       	ldd	r21, Z+1	; 0x01
    4310:	02 81       	ldd	r16, Z+2	; 0x02
    4312:	13 81       	ldd	r17, Z+3	; 0x03
    4314:	48 17       	cp	r20, r24
    4316:	59 07       	cpc	r21, r25
    4318:	c8 f0       	brcs	.+50     	; 0x434c <malloc+0x66>
    431a:	84 17       	cp	r24, r20
    431c:	95 07       	cpc	r25, r21
    431e:	69 f4       	brne	.+26     	; 0x433a <malloc+0x54>
    4320:	10 97       	sbiw	r26, 0x00	; 0
    4322:	31 f0       	breq	.+12     	; 0x4330 <malloc+0x4a>
    4324:	12 96       	adiw	r26, 0x02	; 2
    4326:	0c 93       	st	X, r16
    4328:	12 97       	sbiw	r26, 0x02	; 2
    432a:	13 96       	adiw	r26, 0x03	; 3
    432c:	1c 93       	st	X, r17
    432e:	27 c0       	rjmp	.+78     	; 0x437e <malloc+0x98>
    4330:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <__flp>
    4334:	10 93 8b 04 	sts	0x048B, r17	; 0x80048b <__flp+0x1>
    4338:	22 c0       	rjmp	.+68     	; 0x437e <malloc+0x98>
    433a:	21 15       	cp	r18, r1
    433c:	31 05       	cpc	r19, r1
    433e:	19 f0       	breq	.+6      	; 0x4346 <malloc+0x60>
    4340:	42 17       	cp	r20, r18
    4342:	53 07       	cpc	r21, r19
    4344:	18 f4       	brcc	.+6      	; 0x434c <malloc+0x66>
    4346:	9a 01       	movw	r18, r20
    4348:	bd 01       	movw	r22, r26
    434a:	ef 01       	movw	r28, r30
    434c:	df 01       	movw	r26, r30
    434e:	f8 01       	movw	r30, r16
    4350:	db cf       	rjmp	.-74     	; 0x4308 <malloc+0x22>
    4352:	21 15       	cp	r18, r1
    4354:	31 05       	cpc	r19, r1
    4356:	f9 f0       	breq	.+62     	; 0x4396 <malloc+0xb0>
    4358:	28 1b       	sub	r18, r24
    435a:	39 0b       	sbc	r19, r25
    435c:	24 30       	cpi	r18, 0x04	; 4
    435e:	31 05       	cpc	r19, r1
    4360:	80 f4       	brcc	.+32     	; 0x4382 <malloc+0x9c>
    4362:	8a 81       	ldd	r24, Y+2	; 0x02
    4364:	9b 81       	ldd	r25, Y+3	; 0x03
    4366:	61 15       	cp	r22, r1
    4368:	71 05       	cpc	r23, r1
    436a:	21 f0       	breq	.+8      	; 0x4374 <malloc+0x8e>
    436c:	fb 01       	movw	r30, r22
    436e:	93 83       	std	Z+3, r25	; 0x03
    4370:	82 83       	std	Z+2, r24	; 0x02
    4372:	04 c0       	rjmp	.+8      	; 0x437c <malloc+0x96>
    4374:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <__flp+0x1>
    4378:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <__flp>
    437c:	fe 01       	movw	r30, r28
    437e:	32 96       	adiw	r30, 0x02	; 2
    4380:	44 c0       	rjmp	.+136    	; 0x440a <malloc+0x124>
    4382:	fe 01       	movw	r30, r28
    4384:	e2 0f       	add	r30, r18
    4386:	f3 1f       	adc	r31, r19
    4388:	81 93       	st	Z+, r24
    438a:	91 93       	st	Z+, r25
    438c:	22 50       	subi	r18, 0x02	; 2
    438e:	31 09       	sbc	r19, r1
    4390:	39 83       	std	Y+1, r19	; 0x01
    4392:	28 83       	st	Y, r18
    4394:	3a c0       	rjmp	.+116    	; 0x440a <malloc+0x124>
    4396:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    439a:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    439e:	23 2b       	or	r18, r19
    43a0:	41 f4       	brne	.+16     	; 0x43b2 <malloc+0xcc>
    43a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    43a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    43aa:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <__brkval+0x1>
    43ae:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <__brkval>
    43b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    43b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    43ba:	21 15       	cp	r18, r1
    43bc:	31 05       	cpc	r19, r1
    43be:	41 f4       	brne	.+16     	; 0x43d0 <malloc+0xea>
    43c0:	2d b7       	in	r18, 0x3d	; 61
    43c2:	3e b7       	in	r19, 0x3e	; 62
    43c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    43c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    43cc:	24 1b       	sub	r18, r20
    43ce:	35 0b       	sbc	r19, r21
    43d0:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <__brkval>
    43d4:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <__brkval+0x1>
    43d8:	e2 17       	cp	r30, r18
    43da:	f3 07       	cpc	r31, r19
    43dc:	a0 f4       	brcc	.+40     	; 0x4406 <malloc+0x120>
    43de:	2e 1b       	sub	r18, r30
    43e0:	3f 0b       	sbc	r19, r31
    43e2:	28 17       	cp	r18, r24
    43e4:	39 07       	cpc	r19, r25
    43e6:	78 f0       	brcs	.+30     	; 0x4406 <malloc+0x120>
    43e8:	ac 01       	movw	r20, r24
    43ea:	4e 5f       	subi	r20, 0xFE	; 254
    43ec:	5f 4f       	sbci	r21, 0xFF	; 255
    43ee:	24 17       	cp	r18, r20
    43f0:	35 07       	cpc	r19, r21
    43f2:	48 f0       	brcs	.+18     	; 0x4406 <malloc+0x120>
    43f4:	4e 0f       	add	r20, r30
    43f6:	5f 1f       	adc	r21, r31
    43f8:	50 93 89 04 	sts	0x0489, r21	; 0x800489 <__brkval+0x1>
    43fc:	40 93 88 04 	sts	0x0488, r20	; 0x800488 <__brkval>
    4400:	81 93       	st	Z+, r24
    4402:	91 93       	st	Z+, r25
    4404:	02 c0       	rjmp	.+4      	; 0x440a <malloc+0x124>
    4406:	e0 e0       	ldi	r30, 0x00	; 0
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	cf 01       	movw	r24, r30
    440c:	df 91       	pop	r29
    440e:	cf 91       	pop	r28
    4410:	1f 91       	pop	r17
    4412:	0f 91       	pop	r16
    4414:	08 95       	ret

00004416 <free>:
    4416:	cf 93       	push	r28
    4418:	df 93       	push	r29
    441a:	00 97       	sbiw	r24, 0x00	; 0
    441c:	09 f4       	brne	.+2      	; 0x4420 <free+0xa>
    441e:	81 c0       	rjmp	.+258    	; 0x4522 <free+0x10c>
    4420:	fc 01       	movw	r30, r24
    4422:	32 97       	sbiw	r30, 0x02	; 2
    4424:	13 82       	std	Z+3, r1	; 0x03
    4426:	12 82       	std	Z+2, r1	; 0x02
    4428:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    442c:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    4430:	10 97       	sbiw	r26, 0x00	; 0
    4432:	81 f4       	brne	.+32     	; 0x4454 <free+0x3e>
    4434:	20 81       	ld	r18, Z
    4436:	31 81       	ldd	r19, Z+1	; 0x01
    4438:	82 0f       	add	r24, r18
    443a:	93 1f       	adc	r25, r19
    443c:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    4440:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    4444:	28 17       	cp	r18, r24
    4446:	39 07       	cpc	r19, r25
    4448:	51 f5       	brne	.+84     	; 0x449e <free+0x88>
    444a:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    444e:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    4452:	67 c0       	rjmp	.+206    	; 0x4522 <free+0x10c>
    4454:	ed 01       	movw	r28, r26
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	ce 17       	cp	r28, r30
    445c:	df 07       	cpc	r29, r31
    445e:	40 f4       	brcc	.+16     	; 0x4470 <free+0x5a>
    4460:	4a 81       	ldd	r20, Y+2	; 0x02
    4462:	5b 81       	ldd	r21, Y+3	; 0x03
    4464:	9e 01       	movw	r18, r28
    4466:	41 15       	cp	r20, r1
    4468:	51 05       	cpc	r21, r1
    446a:	f1 f0       	breq	.+60     	; 0x44a8 <free+0x92>
    446c:	ea 01       	movw	r28, r20
    446e:	f5 cf       	rjmp	.-22     	; 0x445a <free+0x44>
    4470:	d3 83       	std	Z+3, r29	; 0x03
    4472:	c2 83       	std	Z+2, r28	; 0x02
    4474:	40 81       	ld	r20, Z
    4476:	51 81       	ldd	r21, Z+1	; 0x01
    4478:	84 0f       	add	r24, r20
    447a:	95 1f       	adc	r25, r21
    447c:	c8 17       	cp	r28, r24
    447e:	d9 07       	cpc	r29, r25
    4480:	59 f4       	brne	.+22     	; 0x4498 <free+0x82>
    4482:	88 81       	ld	r24, Y
    4484:	99 81       	ldd	r25, Y+1	; 0x01
    4486:	84 0f       	add	r24, r20
    4488:	95 1f       	adc	r25, r21
    448a:	02 96       	adiw	r24, 0x02	; 2
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
    4490:	8a 81       	ldd	r24, Y+2	; 0x02
    4492:	9b 81       	ldd	r25, Y+3	; 0x03
    4494:	93 83       	std	Z+3, r25	; 0x03
    4496:	82 83       	std	Z+2, r24	; 0x02
    4498:	21 15       	cp	r18, r1
    449a:	31 05       	cpc	r19, r1
    449c:	29 f4       	brne	.+10     	; 0x44a8 <free+0x92>
    449e:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    44a2:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    44a6:	3d c0       	rjmp	.+122    	; 0x4522 <free+0x10c>
    44a8:	e9 01       	movw	r28, r18
    44aa:	fb 83       	std	Y+3, r31	; 0x03
    44ac:	ea 83       	std	Y+2, r30	; 0x02
    44ae:	49 91       	ld	r20, Y+
    44b0:	59 91       	ld	r21, Y+
    44b2:	c4 0f       	add	r28, r20
    44b4:	d5 1f       	adc	r29, r21
    44b6:	ec 17       	cp	r30, r28
    44b8:	fd 07       	cpc	r31, r29
    44ba:	61 f4       	brne	.+24     	; 0x44d4 <free+0xbe>
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	84 0f       	add	r24, r20
    44c2:	95 1f       	adc	r25, r21
    44c4:	02 96       	adiw	r24, 0x02	; 2
    44c6:	e9 01       	movw	r28, r18
    44c8:	99 83       	std	Y+1, r25	; 0x01
    44ca:	88 83       	st	Y, r24
    44cc:	82 81       	ldd	r24, Z+2	; 0x02
    44ce:	93 81       	ldd	r25, Z+3	; 0x03
    44d0:	9b 83       	std	Y+3, r25	; 0x03
    44d2:	8a 83       	std	Y+2, r24	; 0x02
    44d4:	e0 e0       	ldi	r30, 0x00	; 0
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	12 96       	adiw	r26, 0x02	; 2
    44da:	8d 91       	ld	r24, X+
    44dc:	9c 91       	ld	r25, X
    44de:	13 97       	sbiw	r26, 0x03	; 3
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	19 f0       	breq	.+6      	; 0x44ea <free+0xd4>
    44e4:	fd 01       	movw	r30, r26
    44e6:	dc 01       	movw	r26, r24
    44e8:	f7 cf       	rjmp	.-18     	; 0x44d8 <free+0xc2>
    44ea:	8d 91       	ld	r24, X+
    44ec:	9c 91       	ld	r25, X
    44ee:	11 97       	sbiw	r26, 0x01	; 1
    44f0:	9d 01       	movw	r18, r26
    44f2:	2e 5f       	subi	r18, 0xFE	; 254
    44f4:	3f 4f       	sbci	r19, 0xFF	; 255
    44f6:	82 0f       	add	r24, r18
    44f8:	93 1f       	adc	r25, r19
    44fa:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    44fe:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    4502:	28 17       	cp	r18, r24
    4504:	39 07       	cpc	r19, r25
    4506:	69 f4       	brne	.+26     	; 0x4522 <free+0x10c>
    4508:	30 97       	sbiw	r30, 0x00	; 0
    450a:	29 f4       	brne	.+10     	; 0x4516 <free+0x100>
    450c:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <__flp+0x1>
    4510:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <__flp>
    4514:	02 c0       	rjmp	.+4      	; 0x451a <free+0x104>
    4516:	13 82       	std	Z+3, r1	; 0x03
    4518:	12 82       	std	Z+2, r1	; 0x02
    451a:	b0 93 89 04 	sts	0x0489, r27	; 0x800489 <__brkval+0x1>
    451e:	a0 93 88 04 	sts	0x0488, r26	; 0x800488 <__brkval>
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	08 95       	ret

00004528 <realloc>:
    4528:	a0 e0       	ldi	r26, 0x00	; 0
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	ea e9       	ldi	r30, 0x9A	; 154
    452e:	f2 e2       	ldi	r31, 0x22	; 34
    4530:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__prologue_saves__+0x8>
    4534:	ec 01       	movw	r28, r24
    4536:	00 97       	sbiw	r24, 0x00	; 0
    4538:	21 f4       	brne	.+8      	; 0x4542 <realloc+0x1a>
    453a:	cb 01       	movw	r24, r22
    453c:	0e 94 73 21 	call	0x42e6	; 0x42e6 <malloc>
    4540:	b4 c0       	rjmp	.+360    	; 0x46aa <realloc+0x182>
    4542:	fc 01       	movw	r30, r24
    4544:	e6 0f       	add	r30, r22
    4546:	f7 1f       	adc	r31, r23
    4548:	9c 01       	movw	r18, r24
    454a:	22 50       	subi	r18, 0x02	; 2
    454c:	31 09       	sbc	r19, r1
    454e:	e2 17       	cp	r30, r18
    4550:	f3 07       	cpc	r31, r19
    4552:	08 f4       	brcc	.+2      	; 0x4556 <realloc+0x2e>
    4554:	a8 c0       	rjmp	.+336    	; 0x46a6 <realloc+0x17e>
    4556:	d9 01       	movw	r26, r18
    4558:	0d 91       	ld	r16, X+
    455a:	1c 91       	ld	r17, X
    455c:	11 97       	sbiw	r26, 0x01	; 1
    455e:	06 17       	cp	r16, r22
    4560:	17 07       	cpc	r17, r23
    4562:	b0 f0       	brcs	.+44     	; 0x4590 <realloc+0x68>
    4564:	05 30       	cpi	r16, 0x05	; 5
    4566:	11 05       	cpc	r17, r1
    4568:	08 f4       	brcc	.+2      	; 0x456c <realloc+0x44>
    456a:	9b c0       	rjmp	.+310    	; 0x46a2 <realloc+0x17a>
    456c:	c8 01       	movw	r24, r16
    456e:	04 97       	sbiw	r24, 0x04	; 4
    4570:	86 17       	cp	r24, r22
    4572:	97 07       	cpc	r25, r23
    4574:	08 f4       	brcc	.+2      	; 0x4578 <realloc+0x50>
    4576:	95 c0       	rjmp	.+298    	; 0x46a2 <realloc+0x17a>
    4578:	02 50       	subi	r16, 0x02	; 2
    457a:	11 09       	sbc	r17, r1
    457c:	06 1b       	sub	r16, r22
    457e:	17 0b       	sbc	r17, r23
    4580:	01 93       	st	Z+, r16
    4582:	11 93       	st	Z+, r17
    4584:	6d 93       	st	X+, r22
    4586:	7c 93       	st	X, r23
    4588:	cf 01       	movw	r24, r30
    458a:	0e 94 0b 22 	call	0x4416	; 0x4416 <free>
    458e:	89 c0       	rjmp	.+274    	; 0x46a2 <realloc+0x17a>
    4590:	5b 01       	movw	r10, r22
    4592:	a0 1a       	sub	r10, r16
    4594:	b1 0a       	sbc	r11, r17
    4596:	4c 01       	movw	r8, r24
    4598:	80 0e       	add	r8, r16
    459a:	91 1e       	adc	r9, r17
    459c:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    45a0:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    45a4:	61 2c       	mov	r6, r1
    45a6:	71 2c       	mov	r7, r1
    45a8:	e1 2c       	mov	r14, r1
    45aa:	f1 2c       	mov	r15, r1
    45ac:	10 97       	sbiw	r26, 0x00	; 0
    45ae:	09 f4       	brne	.+2      	; 0x45b2 <realloc+0x8a>
    45b0:	46 c0       	rjmp	.+140    	; 0x463e <realloc+0x116>
    45b2:	8d 91       	ld	r24, X+
    45b4:	9c 91       	ld	r25, X
    45b6:	11 97       	sbiw	r26, 0x01	; 1
    45b8:	a8 15       	cp	r26, r8
    45ba:	b9 05       	cpc	r27, r9
    45bc:	b1 f5       	brne	.+108    	; 0x462a <realloc+0x102>
    45be:	6c 01       	movw	r12, r24
    45c0:	42 e0       	ldi	r20, 0x02	; 2
    45c2:	c4 0e       	add	r12, r20
    45c4:	d1 1c       	adc	r13, r1
    45c6:	ca 14       	cp	r12, r10
    45c8:	db 04       	cpc	r13, r11
    45ca:	78 f1       	brcs	.+94     	; 0x462a <realloc+0x102>
    45cc:	4c 01       	movw	r8, r24
    45ce:	8a 18       	sub	r8, r10
    45d0:	9b 08       	sbc	r9, r11
    45d2:	64 01       	movw	r12, r8
    45d4:	42 e0       	ldi	r20, 0x02	; 2
    45d6:	c4 0e       	add	r12, r20
    45d8:	d1 1c       	adc	r13, r1
    45da:	12 96       	adiw	r26, 0x02	; 2
    45dc:	bc 90       	ld	r11, X
    45de:	12 97       	sbiw	r26, 0x02	; 2
    45e0:	13 96       	adiw	r26, 0x03	; 3
    45e2:	ac 91       	ld	r26, X
    45e4:	b5 e0       	ldi	r27, 0x05	; 5
    45e6:	cb 16       	cp	r12, r27
    45e8:	d1 04       	cpc	r13, r1
    45ea:	40 f0       	brcs	.+16     	; 0x45fc <realloc+0xd4>
    45ec:	b2 82       	std	Z+2, r11	; 0x02
    45ee:	a3 83       	std	Z+3, r26	; 0x03
    45f0:	91 82       	std	Z+1, r9	; 0x01
    45f2:	80 82       	st	Z, r8
    45f4:	d9 01       	movw	r26, r18
    45f6:	6d 93       	st	X+, r22
    45f8:	7c 93       	st	X, r23
    45fa:	09 c0       	rjmp	.+18     	; 0x460e <realloc+0xe6>
    45fc:	0e 5f       	subi	r16, 0xFE	; 254
    45fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4600:	80 0f       	add	r24, r16
    4602:	91 1f       	adc	r25, r17
    4604:	f9 01       	movw	r30, r18
    4606:	91 83       	std	Z+1, r25	; 0x01
    4608:	80 83       	st	Z, r24
    460a:	eb 2d       	mov	r30, r11
    460c:	fa 2f       	mov	r31, r26
    460e:	e1 14       	cp	r14, r1
    4610:	f1 04       	cpc	r15, r1
    4612:	31 f0       	breq	.+12     	; 0x4620 <realloc+0xf8>
    4614:	d7 01       	movw	r26, r14
    4616:	13 96       	adiw	r26, 0x03	; 3
    4618:	fc 93       	st	X, r31
    461a:	ee 93       	st	-X, r30
    461c:	12 97       	sbiw	r26, 0x02	; 2
    461e:	41 c0       	rjmp	.+130    	; 0x46a2 <realloc+0x17a>
    4620:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    4624:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    4628:	3c c0       	rjmp	.+120    	; 0x46a2 <realloc+0x17a>
    462a:	68 16       	cp	r6, r24
    462c:	79 06       	cpc	r7, r25
    462e:	08 f4       	brcc	.+2      	; 0x4632 <realloc+0x10a>
    4630:	3c 01       	movw	r6, r24
    4632:	7d 01       	movw	r14, r26
    4634:	12 96       	adiw	r26, 0x02	; 2
    4636:	0d 90       	ld	r0, X+
    4638:	bc 91       	ld	r27, X
    463a:	a0 2d       	mov	r26, r0
    463c:	b7 cf       	rjmp	.-146    	; 0x45ac <realloc+0x84>
    463e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    4642:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    4646:	88 16       	cp	r8, r24
    4648:	99 06       	cpc	r9, r25
    464a:	e1 f4       	brne	.+56     	; 0x4684 <realloc+0x15c>
    464c:	66 16       	cp	r6, r22
    464e:	77 06       	cpc	r7, r23
    4650:	c8 f4       	brcc	.+50     	; 0x4684 <realloc+0x15c>
    4652:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4656:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	41 f4       	brne	.+16     	; 0x466e <realloc+0x146>
    465e:	8d b7       	in	r24, 0x3d	; 61
    4660:	9e b7       	in	r25, 0x3e	; 62
    4662:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4666:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    466a:	84 1b       	sub	r24, r20
    466c:	95 0b       	sbc	r25, r21
    466e:	e8 17       	cp	r30, r24
    4670:	f9 07       	cpc	r31, r25
    4672:	c8 f4       	brcc	.+50     	; 0x46a6 <realloc+0x17e>
    4674:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    4678:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    467c:	f9 01       	movw	r30, r18
    467e:	71 83       	std	Z+1, r23	; 0x01
    4680:	60 83       	st	Z, r22
    4682:	0f c0       	rjmp	.+30     	; 0x46a2 <realloc+0x17a>
    4684:	cb 01       	movw	r24, r22
    4686:	0e 94 73 21 	call	0x42e6	; 0x42e6 <malloc>
    468a:	7c 01       	movw	r14, r24
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	59 f0       	breq	.+22     	; 0x46a6 <realloc+0x17e>
    4690:	a8 01       	movw	r20, r16
    4692:	be 01       	movw	r22, r28
    4694:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
    4698:	ce 01       	movw	r24, r28
    469a:	0e 94 0b 22 	call	0x4416	; 0x4416 <free>
    469e:	c7 01       	movw	r24, r14
    46a0:	04 c0       	rjmp	.+8      	; 0x46aa <realloc+0x182>
    46a2:	ce 01       	movw	r24, r28
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <realloc+0x182>
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
    46ae:	ee e0       	ldi	r30, 0x0E	; 14
    46b0:	0c 94 1c 24 	jmp	0x4838	; 0x4838 <__epilogue_restores__+0x8>

000046b4 <atoi>:
    46b4:	fc 01       	movw	r30, r24
    46b6:	88 27       	eor	r24, r24
    46b8:	99 27       	eor	r25, r25
    46ba:	e8 94       	clt
    46bc:	21 91       	ld	r18, Z+
    46be:	20 32       	cpi	r18, 0x20	; 32
    46c0:	e9 f3       	breq	.-6      	; 0x46bc <atoi+0x8>
    46c2:	29 30       	cpi	r18, 0x09	; 9
    46c4:	10 f0       	brcs	.+4      	; 0x46ca <atoi+0x16>
    46c6:	2e 30       	cpi	r18, 0x0E	; 14
    46c8:	c8 f3       	brcs	.-14     	; 0x46bc <atoi+0x8>
    46ca:	2b 32       	cpi	r18, 0x2B	; 43
    46cc:	41 f0       	breq	.+16     	; 0x46de <atoi+0x2a>
    46ce:	2d 32       	cpi	r18, 0x2D	; 45
    46d0:	39 f4       	brne	.+14     	; 0x46e0 <atoi+0x2c>
    46d2:	68 94       	set
    46d4:	04 c0       	rjmp	.+8      	; 0x46de <atoi+0x2a>
    46d6:	0e 94 ca 23 	call	0x4794	; 0x4794 <__mulhi_const_10>
    46da:	82 0f       	add	r24, r18
    46dc:	91 1d       	adc	r25, r1
    46de:	21 91       	ld	r18, Z+
    46e0:	20 53       	subi	r18, 0x30	; 48
    46e2:	2a 30       	cpi	r18, 0x0A	; 10
    46e4:	c0 f3       	brcs	.-16     	; 0x46d6 <atoi+0x22>
    46e6:	1e f4       	brtc	.+6      	; 0x46ee <atoi+0x3a>
    46e8:	90 95       	com	r25
    46ea:	81 95       	neg	r24
    46ec:	9f 4f       	sbci	r25, 0xFF	; 255
    46ee:	08 95       	ret

000046f0 <strcmp_P>:
    46f0:	fb 01       	movw	r30, r22
    46f2:	dc 01       	movw	r26, r24
    46f4:	8d 91       	ld	r24, X+
    46f6:	05 90       	lpm	r0, Z+
    46f8:	80 19       	sub	r24, r0
    46fa:	01 10       	cpse	r0, r1
    46fc:	d9 f3       	breq	.-10     	; 0x46f4 <strcmp_P+0x4>
    46fe:	99 0b       	sbc	r25, r25
    4700:	08 95       	ret

00004702 <__strlen_P>:
    4702:	fc 01       	movw	r30, r24
    4704:	05 90       	lpm	r0, Z+
    4706:	00 20       	and	r0, r0
    4708:	e9 f7       	brne	.-6      	; 0x4704 <__strlen_P+0x2>
    470a:	80 95       	com	r24
    470c:	90 95       	com	r25
    470e:	8e 0f       	add	r24, r30
    4710:	9f 1f       	adc	r25, r31
    4712:	08 95       	ret

00004714 <strstr_P>:
    4714:	fb 01       	movw	r30, r22
    4716:	55 91       	lpm	r21, Z+
    4718:	55 23       	and	r21, r21
    471a:	a9 f0       	breq	.+42     	; 0x4746 <strstr_P+0x32>
    471c:	bf 01       	movw	r22, r30
    471e:	dc 01       	movw	r26, r24
    4720:	4d 91       	ld	r20, X+
    4722:	45 17       	cp	r20, r21
    4724:	41 11       	cpse	r20, r1
    4726:	e1 f7       	brne	.-8      	; 0x4720 <strstr_P+0xc>
    4728:	59 f4       	brne	.+22     	; 0x4740 <strstr_P+0x2c>
    472a:	cd 01       	movw	r24, r26
    472c:	05 90       	lpm	r0, Z+
    472e:	00 20       	and	r0, r0
    4730:	49 f0       	breq	.+18     	; 0x4744 <strstr_P+0x30>
    4732:	4d 91       	ld	r20, X+
    4734:	40 15       	cp	r20, r0
    4736:	41 11       	cpse	r20, r1
    4738:	c9 f3       	breq	.-14     	; 0x472c <strstr_P+0x18>
    473a:	fb 01       	movw	r30, r22
    473c:	41 11       	cpse	r20, r1
    473e:	ef cf       	rjmp	.-34     	; 0x471e <strstr_P+0xa>
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	01 97       	sbiw	r24, 0x01	; 1
    4746:	08 95       	ret

00004748 <memcpy>:
    4748:	fb 01       	movw	r30, r22
    474a:	dc 01       	movw	r26, r24
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <memcpy+0xa>
    474e:	01 90       	ld	r0, Z+
    4750:	0d 92       	st	X+, r0
    4752:	41 50       	subi	r20, 0x01	; 1
    4754:	50 40       	sbci	r21, 0x00	; 0
    4756:	d8 f7       	brcc	.-10     	; 0x474e <memcpy+0x6>
    4758:	08 95       	ret

0000475a <strchr>:
    475a:	fc 01       	movw	r30, r24
    475c:	81 91       	ld	r24, Z+
    475e:	86 17       	cp	r24, r22
    4760:	21 f0       	breq	.+8      	; 0x476a <strchr+0x10>
    4762:	88 23       	and	r24, r24
    4764:	d9 f7       	brne	.-10     	; 0x475c <strchr+0x2>
    4766:	99 27       	eor	r25, r25
    4768:	08 95       	ret
    476a:	31 97       	sbiw	r30, 0x01	; 1
    476c:	cf 01       	movw	r24, r30
    476e:	08 95       	ret

00004770 <strcpy>:
    4770:	fb 01       	movw	r30, r22
    4772:	dc 01       	movw	r26, r24
    4774:	01 90       	ld	r0, Z+
    4776:	0d 92       	st	X+, r0
    4778:	00 20       	and	r0, r0
    477a:	e1 f7       	brne	.-8      	; 0x4774 <strcpy+0x4>
    477c:	08 95       	ret

0000477e <__itoa_ncheck>:
    477e:	bb 27       	eor	r27, r27
    4780:	4a 30       	cpi	r20, 0x0A	; 10
    4782:	31 f4       	brne	.+12     	; 0x4790 <__itoa_ncheck+0x12>
    4784:	99 23       	and	r25, r25
    4786:	22 f4       	brpl	.+8      	; 0x4790 <__itoa_ncheck+0x12>
    4788:	bd e2       	ldi	r27, 0x2D	; 45
    478a:	90 95       	com	r25
    478c:	81 95       	neg	r24
    478e:	9f 4f       	sbci	r25, 0xFF	; 255
    4790:	0c 94 d3 23 	jmp	0x47a6	; 0x47a6 <__utoa_common>

00004794 <__mulhi_const_10>:
    4794:	7a e0       	ldi	r23, 0x0A	; 10
    4796:	97 9f       	mul	r25, r23
    4798:	90 2d       	mov	r25, r0
    479a:	87 9f       	mul	r24, r23
    479c:	80 2d       	mov	r24, r0
    479e:	91 0d       	add	r25, r1
    47a0:	11 24       	eor	r1, r1
    47a2:	08 95       	ret

000047a4 <__utoa_ncheck>:
    47a4:	bb 27       	eor	r27, r27

000047a6 <__utoa_common>:
    47a6:	fb 01       	movw	r30, r22
    47a8:	55 27       	eor	r21, r21
    47aa:	aa 27       	eor	r26, r26
    47ac:	88 0f       	add	r24, r24
    47ae:	99 1f       	adc	r25, r25
    47b0:	aa 1f       	adc	r26, r26
    47b2:	a4 17       	cp	r26, r20
    47b4:	10 f0       	brcs	.+4      	; 0x47ba <__utoa_common+0x14>
    47b6:	a4 1b       	sub	r26, r20
    47b8:	83 95       	inc	r24
    47ba:	50 51       	subi	r21, 0x10	; 16
    47bc:	b9 f7       	brne	.-18     	; 0x47ac <__utoa_common+0x6>
    47be:	a0 5d       	subi	r26, 0xD0	; 208
    47c0:	aa 33       	cpi	r26, 0x3A	; 58
    47c2:	08 f0       	brcs	.+2      	; 0x47c6 <__utoa_common+0x20>
    47c4:	a9 5d       	subi	r26, 0xD9	; 217
    47c6:	a1 93       	st	Z+, r26
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	79 f7       	brne	.-34     	; 0x47aa <__utoa_common+0x4>
    47cc:	b1 11       	cpse	r27, r1
    47ce:	b1 93       	st	Z+, r27
    47d0:	11 92       	st	Z+, r1
    47d2:	cb 01       	movw	r24, r22
    47d4:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <strrev>

000047d8 <strrev>:
    47d8:	dc 01       	movw	r26, r24
    47da:	fc 01       	movw	r30, r24
    47dc:	67 2f       	mov	r22, r23
    47de:	71 91       	ld	r23, Z+
    47e0:	77 23       	and	r23, r23
    47e2:	e1 f7       	brne	.-8      	; 0x47dc <strrev+0x4>
    47e4:	32 97       	sbiw	r30, 0x02	; 2
    47e6:	04 c0       	rjmp	.+8      	; 0x47f0 <strrev+0x18>
    47e8:	7c 91       	ld	r23, X
    47ea:	6d 93       	st	X+, r22
    47ec:	70 83       	st	Z, r23
    47ee:	62 91       	ld	r22, -Z
    47f0:	ae 17       	cp	r26, r30
    47f2:	bf 07       	cpc	r27, r31
    47f4:	c8 f3       	brcs	.-14     	; 0x47e8 <strrev+0x10>
    47f6:	08 95       	ret

000047f8 <__prologue_saves__>:
    47f8:	2f 92       	push	r2
    47fa:	3f 92       	push	r3
    47fc:	4f 92       	push	r4
    47fe:	5f 92       	push	r5
    4800:	6f 92       	push	r6
    4802:	7f 92       	push	r7
    4804:	8f 92       	push	r8
    4806:	9f 92       	push	r9
    4808:	af 92       	push	r10
    480a:	bf 92       	push	r11
    480c:	cf 92       	push	r12
    480e:	df 92       	push	r13
    4810:	ef 92       	push	r14
    4812:	ff 92       	push	r15
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	ca 1b       	sub	r28, r26
    4822:	db 0b       	sbc	r29, r27
    4824:	0f b6       	in	r0, 0x3f	; 63
    4826:	f8 94       	cli
    4828:	de bf       	out	0x3e, r29	; 62
    482a:	0f be       	out	0x3f, r0	; 63
    482c:	cd bf       	out	0x3d, r28	; 61
    482e:	09 94       	ijmp

00004830 <__epilogue_restores__>:
    4830:	2a 88       	ldd	r2, Y+18	; 0x12
    4832:	39 88       	ldd	r3, Y+17	; 0x11
    4834:	48 88       	ldd	r4, Y+16	; 0x10
    4836:	5f 84       	ldd	r5, Y+15	; 0x0f
    4838:	6e 84       	ldd	r6, Y+14	; 0x0e
    483a:	7d 84       	ldd	r7, Y+13	; 0x0d
    483c:	8c 84       	ldd	r8, Y+12	; 0x0c
    483e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4840:	aa 84       	ldd	r10, Y+10	; 0x0a
    4842:	b9 84       	ldd	r11, Y+9	; 0x09
    4844:	c8 84       	ldd	r12, Y+8	; 0x08
    4846:	df 80       	ldd	r13, Y+7	; 0x07
    4848:	ee 80       	ldd	r14, Y+6	; 0x06
    484a:	fd 80       	ldd	r15, Y+5	; 0x05
    484c:	0c 81       	ldd	r16, Y+4	; 0x04
    484e:	1b 81       	ldd	r17, Y+3	; 0x03
    4850:	aa 81       	ldd	r26, Y+2	; 0x02
    4852:	b9 81       	ldd	r27, Y+1	; 0x01
    4854:	ce 0f       	add	r28, r30
    4856:	d1 1d       	adc	r29, r1
    4858:	0f b6       	in	r0, 0x3f	; 63
    485a:	f8 94       	cli
    485c:	de bf       	out	0x3e, r29	; 62
    485e:	0f be       	out	0x3f, r0	; 63
    4860:	cd bf       	out	0x3d, r28	; 61
    4862:	ed 01       	movw	r28, r26
    4864:	08 95       	ret

00004866 <__do_global_dtors>:
    4866:	13 e0       	ldi	r17, 0x03	; 3
    4868:	c4 ec       	ldi	r28, 0xC4	; 196
    486a:	d3 e0       	ldi	r29, 0x03	; 3
    486c:	04 c0       	rjmp	.+8      	; 0x4876 <__do_global_dtors+0x10>
    486e:	fe 01       	movw	r30, r28
    4870:	0e 94 6d 21 	call	0x42da	; 0x42da <__tablejump2__>
    4874:	21 96       	adiw	r28, 0x01	; 1
    4876:	c5 3c       	cpi	r28, 0xC5	; 197
    4878:	d1 07       	cpc	r29, r17
    487a:	c9 f7       	brne	.-14     	; 0x486e <__do_global_dtors+0x8>
    487c:	f8 94       	cli

0000487e <__stop_program>:
    487e:	ff cf       	rjmp	.-2      	; 0x487e <__stop_program>
