
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  0000652e  000065c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000652e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000517  00800334  00800334  000067f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000067f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d8  00000000  00000000  00006894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001d41d  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004010  00000000  00000000  00024589  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000802b  00000000  00000000  00028599  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003004  00000000  00000000  000305c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011d94  00000000  00000000  000335c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d523  00000000  00000000  0004535c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  0005287f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000611a  00000000  00000000  000530a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__dtors_end>
       4:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__vector_1>
       8:	0c 94 37 2d 	jmp	0x5a6e	; 0x5a6e <__vector_2>
       c:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <__vector_3>
      10:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <__vector_3>
      14:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <__vector_3>
      18:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      1c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      20:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      24:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      28:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      2c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      30:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      34:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      38:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      3c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      40:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__vector_16>
      44:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      48:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__vector_18>
      4c:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__vector_19>
      50:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      54:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      58:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      5c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      60:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__vector_24>
      64:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__bad_interrupt>
      68:	b4 14       	cp	r11, r4
      6a:	ba 14       	cp	r11, r10
      6c:	ba 14       	cp	r11, r10
      6e:	ba 14       	cp	r11, r10
      70:	ba 14       	cp	r11, r10
      72:	ba 14       	cp	r11, r10
      74:	ba 14       	cp	r11, r10
      76:	ba 14       	cp	r11, r10
      78:	a8 13       	cpse	r26, r24
      7a:	ba 14       	cp	r11, r10
      7c:	ba 14       	cp	r11, r10
      7e:	ba 14       	cp	r11, r10
      80:	ba 14       	cp	r11, r10
      82:	ba 14       	cp	r11, r10
      84:	ba 14       	cp	r11, r10
      86:	ba 14       	cp	r11, r10
      88:	a8 13       	cpse	r26, r24
      8a:	ba 14       	cp	r11, r10
      8c:	ba 14       	cp	r11, r10
      8e:	ba 14       	cp	r11, r10
      90:	ba 14       	cp	r11, r10
      92:	ba 14       	cp	r11, r10
      94:	ba 14       	cp	r11, r10
      96:	ba 14       	cp	r11, r10
      98:	b2 13       	cpse	r27, r18
      9a:	ba 14       	cp	r11, r10
      9c:	ba 14       	cp	r11, r10
      9e:	ba 14       	cp	r11, r10
      a0:	ba 14       	cp	r11, r10
      a2:	ba 14       	cp	r11, r10
      a4:	ba 14       	cp	r11, r10
      a6:	ba 14       	cp	r11, r10
      a8:	de 13       	cpse	r29, r30
      aa:	ba 14       	cp	r11, r10
      ac:	ba 14       	cp	r11, r10
      ae:	ba 14       	cp	r11, r10
      b0:	ba 14       	cp	r11, r10
      b2:	ba 14       	cp	r11, r10
      b4:	ba 14       	cp	r11, r10
      b6:	ba 14       	cp	r11, r10
      b8:	b2 13       	cpse	r27, r18
      ba:	ba 14       	cp	r11, r10
      bc:	ba 14       	cp	r11, r10
      be:	ba 14       	cp	r11, r10
      c0:	ba 14       	cp	r11, r10
      c2:	ba 14       	cp	r11, r10
      c4:	ba 14       	cp	r11, r10
      c6:	ba 14       	cp	r11, r10
      c8:	e4 13       	cpse	r30, r20
      ca:	ba 14       	cp	r11, r10
      cc:	ba 14       	cp	r11, r10
      ce:	ba 14       	cp	r11, r10
      d0:	ba 14       	cp	r11, r10
      d2:	ba 14       	cp	r11, r10
      d4:	ba 14       	cp	r11, r10
      d6:	ba 14       	cp	r11, r10
      d8:	ea 13       	cpse	r30, r26
      da:	ba 14       	cp	r11, r10
      dc:	ba 14       	cp	r11, r10
      de:	ba 14       	cp	r11, r10
      e0:	ba 14       	cp	r11, r10
      e2:	ba 14       	cp	r11, r10
      e4:	ba 14       	cp	r11, r10
      e6:	ba 14       	cp	r11, r10
      e8:	00 14       	cp	r0, r0
      ea:	ba 14       	cp	r11, r10
      ec:	ba 14       	cp	r11, r10
      ee:	ba 14       	cp	r11, r10
      f0:	ba 14       	cp	r11, r10
      f2:	ba 14       	cp	r11, r10
      f4:	ba 14       	cp	r11, r10
      f6:	ba 14       	cp	r11, r10
      f8:	30 14       	cp	r3, r0
      fa:	ba 14       	cp	r11, r10
      fc:	ba 14       	cp	r11, r10
      fe:	ba 14       	cp	r11, r10
     100:	ba 14       	cp	r11, r10
     102:	ba 14       	cp	r11, r10
     104:	ba 14       	cp	r11, r10
     106:	ba 14       	cp	r11, r10
     108:	f0 13       	cpse	r31, r16
     10a:	ba 14       	cp	r11, r10
     10c:	ba 14       	cp	r11, r10
     10e:	ba 14       	cp	r11, r10
     110:	ba 14       	cp	r11, r10
     112:	ba 14       	cp	r11, r10
     114:	ba 14       	cp	r11, r10
     116:	ba 14       	cp	r11, r10
     118:	0e 14       	cp	r0, r14
     11a:	ba 14       	cp	r11, r10
     11c:	ba 14       	cp	r11, r10
     11e:	ba 14       	cp	r11, r10
     120:	ba 14       	cp	r11, r10
     122:	ba 14       	cp	r11, r10
     124:	ba 14       	cp	r11, r10
     126:	ba 14       	cp	r11, r10
     128:	33 14       	cp	r3, r3
     12a:	ba 14       	cp	r11, r10
     12c:	ba 14       	cp	r11, r10
     12e:	ba 14       	cp	r11, r10
     130:	ba 14       	cp	r11, r10
     132:	ba 14       	cp	r11, r10
     134:	ba 14       	cp	r11, r10
     136:	ba 14       	cp	r11, r10
     138:	33 14       	cp	r3, r3
     13a:	ba 14       	cp	r11, r10
     13c:	ba 14       	cp	r11, r10
     13e:	ba 14       	cp	r11, r10
     140:	ba 14       	cp	r11, r10
     142:	ba 14       	cp	r11, r10
     144:	ba 14       	cp	r11, r10
     146:	ba 14       	cp	r11, r10
     148:	33 14       	cp	r3, r3
     14a:	ba 14       	cp	r11, r10
     14c:	ba 14       	cp	r11, r10
     14e:	ba 14       	cp	r11, r10
     150:	ba 14       	cp	r11, r10
     152:	ba 14       	cp	r11, r10
     154:	ba 14       	cp	r11, r10
     156:	ba 14       	cp	r11, r10
     158:	33 14       	cp	r3, r3
     15a:	ba 14       	cp	r11, r10
     15c:	ba 14       	cp	r11, r10
     15e:	ba 14       	cp	r11, r10
     160:	ba 14       	cp	r11, r10
     162:	ba 14       	cp	r11, r10
     164:	ba 14       	cp	r11, r10
     166:	ba 14       	cp	r11, r10
     168:	3c 14       	cp	r3, r12
     16a:	ba 14       	cp	r11, r10
     16c:	ba 14       	cp	r11, r10
     16e:	ba 14       	cp	r11, r10
     170:	ba 14       	cp	r11, r10
     172:	ba 14       	cp	r11, r10
     174:	ba 14       	cp	r11, r10
     176:	ba 14       	cp	r11, r10
     178:	76 14       	cp	r7, r6
     17a:	ba 14       	cp	r11, r10
     17c:	ba 14       	cp	r11, r10
     17e:	ba 14       	cp	r11, r10
     180:	ba 14       	cp	r11, r10
     182:	ba 14       	cp	r11, r10
     184:	ba 14       	cp	r11, r10
     186:	ba 14       	cp	r11, r10
     188:	3c 14       	cp	r3, r12
     18a:	ba 14       	cp	r11, r10
     18c:	ba 14       	cp	r11, r10
     18e:	ba 14       	cp	r11, r10
     190:	ba 14       	cp	r11, r10
     192:	ba 14       	cp	r11, r10
     194:	ba 14       	cp	r11, r10
     196:	ba 14       	cp	r11, r10
     198:	76 14       	cp	r7, r6
     19a:	ba 14       	cp	r11, r10
     19c:	ba 14       	cp	r11, r10
     19e:	ba 14       	cp	r11, r10
     1a0:	ba 14       	cp	r11, r10
     1a2:	ba 14       	cp	r11, r10
     1a4:	ba 14       	cp	r11, r10
     1a6:	ba 14       	cp	r11, r10
     1a8:	58 14       	cp	r5, r8
     1aa:	ba 14       	cp	r11, r10
     1ac:	ba 14       	cp	r11, r10
     1ae:	ba 14       	cp	r11, r10
     1b0:	ba 14       	cp	r11, r10
     1b2:	ba 14       	cp	r11, r10
     1b4:	ba 14       	cp	r11, r10
     1b6:	ba 14       	cp	r11, r10
     1b8:	7a 14       	cp	r7, r10
     1ba:	ba 14       	cp	r11, r10
     1bc:	ba 14       	cp	r11, r10
     1be:	ba 14       	cp	r11, r10
     1c0:	ba 14       	cp	r11, r10
     1c2:	ba 14       	cp	r11, r10
     1c4:	ba 14       	cp	r11, r10
     1c6:	ba 14       	cp	r11, r10
     1c8:	7a 14       	cp	r7, r10
     1ca:	ba 14       	cp	r11, r10
     1cc:	ba 14       	cp	r11, r10
     1ce:	ba 14       	cp	r11, r10
     1d0:	ba 14       	cp	r11, r10
     1d2:	ba 14       	cp	r11, r10
     1d4:	ba 14       	cp	r11, r10
     1d6:	ba 14       	cp	r11, r10
     1d8:	90 14       	cp	r9, r0
     1da:	ba 14       	cp	r11, r10
     1dc:	ba 14       	cp	r11, r10
     1de:	ba 14       	cp	r11, r10
     1e0:	ba 14       	cp	r11, r10
     1e2:	ba 14       	cp	r11, r10
     1e4:	ba 14       	cp	r11, r10
     1e6:	ba 14       	cp	r11, r10
     1e8:	ae 14       	cp	r10, r14
     1ea:	ba 14       	cp	r11, r10
     1ec:	ba 14       	cp	r11, r10
     1ee:	ba 14       	cp	r11, r10
     1f0:	ba 14       	cp	r11, r10
     1f2:	ba 14       	cp	r11, r10
     1f4:	ba 14       	cp	r11, r10
     1f6:	ba 14       	cp	r11, r10
     1f8:	ae 14       	cp	r10, r14
     1fa:	ba 14       	cp	r11, r10
     1fc:	ba 14       	cp	r11, r10
     1fe:	ba 14       	cp	r11, r10
     200:	ba 14       	cp	r11, r10
     202:	ba 14       	cp	r11, r10
     204:	ba 14       	cp	r11, r10
     206:	ba 14       	cp	r11, r10
     208:	ba 14       	cp	r11, r10
     20a:	ba 14       	cp	r11, r10
     20c:	ba 14       	cp	r11, r10
     20e:	ba 14       	cp	r11, r10
     210:	ba 14       	cp	r11, r10
     212:	ba 14       	cp	r11, r10
     214:	ba 14       	cp	r11, r10
     216:	ba 14       	cp	r11, r10
     218:	ba 14       	cp	r11, r10
     21a:	ba 14       	cp	r11, r10
     21c:	ba 14       	cp	r11, r10
     21e:	ba 14       	cp	r11, r10
     220:	ba 14       	cp	r11, r10
     222:	ba 14       	cp	r11, r10
     224:	ba 14       	cp	r11, r10
     226:	ba 14       	cp	r11, r10
     228:	ba 14       	cp	r11, r10
     22a:	ba 14       	cp	r11, r10
     22c:	ba 14       	cp	r11, r10
     22e:	ba 14       	cp	r11, r10
     230:	ba 14       	cp	r11, r10
     232:	ba 14       	cp	r11, r10
     234:	ba 14       	cp	r11, r10
     236:	ba 14       	cp	r11, r10
     238:	ba 14       	cp	r11, r10
     23a:	ba 14       	cp	r11, r10
     23c:	ba 14       	cp	r11, r10
     23e:	ba 14       	cp	r11, r10
     240:	ba 14       	cp	r11, r10
     242:	ba 14       	cp	r11, r10
     244:	ba 14       	cp	r11, r10
     246:	ba 14       	cp	r11, r10
     248:	ba 14       	cp	r11, r10
     24a:	ba 14       	cp	r11, r10
     24c:	ba 14       	cp	r11, r10
     24e:	ba 14       	cp	r11, r10
     250:	ba 14       	cp	r11, r10
     252:	ba 14       	cp	r11, r10
     254:	ba 14       	cp	r11, r10
     256:	ba 14       	cp	r11, r10
     258:	b9 14       	cp	r11, r9

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000295 <_ZZN10GsmManager11sendViaGprsEPKcE3__c>:
     295:	4d 6f 63 6b 69 6e 67 20 47 50 52 53 2d 53 65 6e     Mocking GPRS-Sen
     2a5:	64 00                                               d.

000002a7 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     2a7:	53 65 6e 64 69 6e 67 20 41 63 74 75 61 6c 20 64     Sending Actual d
     2b7:	61 74 61 20 76 69 61 20 47 50 52 53 00              ata via GPRS.

000002c4 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
     2c4:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002cf <_ZZN10GsmManager11sendViaGprsEPKcE3__c_4>:
	...

000002d0 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
	...

000002d1 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
     2d1:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

000002dc <_ZZN10GsmManager11sendViaGprsEPKcE3__c_5>:
     2dc:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002e7 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_6>:
     2e7:	47 50 52 53 20 53 74 61 74 75 73 3a 00              GPRS Status:.

000002f4 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     2f4:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000002fc <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     2fc:	20 7c 20 00                                          | .

00000300 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     300:	50 56 2d 56 3d 00                                   PV-V=.

00000306 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     306:	20 7c 20 00                                          | .

0000030a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     30a:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000313 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     313:	20 7c 20 00                                          | .

00000317 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     317:	54 65 6d 70 3d 00                                   Temp=.

0000031d <_ZZ5setupE3__c>:
     31d:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000329 <_ZZ5setupE3__c_0>:
     329:	42 6f 6f 74 20 43 6f 75 6e 74 00                    Boot Count.

00000334 <_ZZ8sendDatavE3__c>:
     334:	53 65 6e 64 69 6e 67 20 64 61 74 61 2e 2e 2e 00     Sending data....

00000344 <_ZZ4loopE3__c>:
     344:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000034e <_ZZN12RmMemManager16initialiseModuleEhE3__c>:
     34e:	49 6e 69 74 20 4d 6f 64 75 6c 65 00                 Init Module.

0000035a <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c>:
     35a:	42 61 73 69 63 20 45 45 50 52 4f 4d 20 54 65 73     Basic EEPROM Tes
     36a:	74 00                                               t.

0000036c <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_0>:
     36c:	46 41 49 4c 45 44 20 4c 4f 4e 47 00                 FAILED LONG.

00000378 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_1>:
     378:	46 41 49 4c 45 44 20 49 4e 54 00                    FAILED INT.

00000383 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_2>:
     383:	46 41 49 4c 45 44 20 53 48 4f 52 54 00              FAILED SHORT.

00000390 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_3>:
     390:	46 41 49 4c 45 44 20 43 48 41 52 00                 FAILED CHAR.

0000039c <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_4>:
     39c:	45 45 50 52 4f 4d 20 54 65 73 74 3a 20 4c 6f 6e     EEPROM Test: Lon
     3ac:	67 3d 00                                            g=.

000003af <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_5>:
     3af:	2c 20 49 6e 74 3d 00                                , Int=.

000003b6 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_6>:
     3b6:	2c 20 53 68 6f 72 74 3d 00                          , Short=.

000003bf <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_7>:
     3bf:	2c 20 43 68 61 72 3d 00                             , Char=.

000003c7 <_ZZN12RmMemManager23runExtendedShow100BytesEvE3__c>:
     3c7:	2a 2a 2a 20 46 41 49 4c 20 53 48 4f 57 20 31 30     *** FAIL SHOW 10
     3d7:	30 20 2a 2a 2a 00                                   0 ***.

000003dd <_ZZN12RmMemManager21runExtendedDumpOutputEvE3__c>:
     3dd:	2a 2a 2a 20 46 41 49 4c 20 50 52 49 4e 54 20 2a     *** FAIL PRINT *
     3ed:	2a 2a 00                                            **.

000003f0 <_ZZN12RmMemManager17appendSensorEntryEP10SensorDataE3__c>:
     3f0:	57 72 69 74 69 6e 67 20 54 6f 20 41 64 64 72 00     Writing To Addr.

00000400 <_ZZN12RmMemManager17appendSensorEntryEP10SensorDataE3__c_0>:
     400:	46 72 65 65 20 41 64 64 72 20 4e 6f 77 20 49 73     Free Addr Now Is
	...

00000411 <_ZZN13SensorManager8readDataEP10SensorDataE3__c>:
     411:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     421:	2e 2e 00                                            ...

00000424 <digital_pin_to_timer_PGM>:
     424:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     434:	00 00 00 00                                         ....

00000438 <digital_pin_to_bit_mask_PGM>:
     438:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     448:	04 08 10 20                                         ... 

0000044c <digital_pin_to_port_PGM>:
     44c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     45c:	03 03 03 03                                         ....

00000460 <port_to_input_PGM>:
     460:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000046a <port_to_output_PGM>:
     46a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000474 <port_to_mode_PGM>:
     474:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000047e <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     47e:	09 3c 2d 2d 2d 20 00                                .<--- .

00000485 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     485:	09 2d 2d 2d 3e 20 00                                .---> .

0000048c <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     48c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000493 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     493:	09 2d 2d 2d 3e 20 00                                .---> .

0000049a <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     49a:	09 3c 2d 2d 2d 20 00                                .<--- .

000004a1 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     4a1:	09 2d 2d 2d 3e 20 00                                .---> .

000004a8 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     4a8:	09 3c 2d 2d 2d 20 00                                .<--- .

000004af <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     4af:	09 2d 2d 2d 3e 20 00                                .---> .

000004b6 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     4b6:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000004be <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     4be:	53 50 41 43 45 00                                   SPACE.

000004c4 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     4c4:	09 3c 2d 2d 2d 20 00                                .<--- .

000004cb <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     4cb:	52 45 44 49 52 00                                   REDIR.

000004d1 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     4d1:	55 52 4c 00                                         URL.

000004d5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     4d5:	55 41 00                                            UA.

000004d8 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     4d8:	43 49 44 00                                         CID.

000004dc <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     4dc:	4c 65 6e 3a 20 00                                   Len: .

000004e2 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     4e2:	53 74 61 74 75 73 3a 20 00                          Status: .

000004eb <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     4eb:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000004f3 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     4f3:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

000004ff <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     4ff:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000050a <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     50a:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000516 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     516:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000523 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     523:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000530 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     530:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

0000053f <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     53f:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

00000548 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     548:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000555 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     555:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000562 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     562:	09 2d 2d 2d 3e 20 00                                .---> .

00000569 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     569:	22 2c 00                                            ",.

0000056c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     56c:	22 2c 22 00                                         ",".

00000570 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     570:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000057e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     57e:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000058c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     58c:	09 2d 2d 2d 3e 20 00                                .---> .

00000593 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     593:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

0000059f <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     59f:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000005ab <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     5ab:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000005b6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     5b6:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000005c3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     5c3:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000005ce <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     5ce:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005d6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     5d6:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000005df <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     5df:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000005ec <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     5ec:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     5fc:	44 22 2c 00                                         D",.

00000600 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     600:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     610:	45 52 22 2c 00                                      ER",.

00000615 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     615:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000061f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     61f:	09 2d 2d 2d 3e 20 00                                .---> .

00000626 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     626:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000630 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     630:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     640:	4e 22 2c 00                                         N",.

00000644 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     644:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     654:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000662 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     662:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000066d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     66d:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000678 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     678:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000680 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c_0>:
     680:	53 49 4e 46 00                                      SINF.

00000685 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c>:
     685:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

00000690 <_ZZN13Adafruit_FONA9GPSstatusEvE3__c_0>:
     690:	2b 43 47 4e 53 49 4e 46 3a 20 00                    +CGNSINF: .

0000069b <_ZZN13Adafruit_FONA9GPSstatusEvE3__c>:
     69b:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

000006a6 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     6a6:	3e 20 00                                            > .

000006a9 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     6a9:	3e 20 00                                            > .

000006ac <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     6ac:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000006b6 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     6b6:	41 54 2b 43 53 51 00                                AT+CSQ.

000006bd <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     6bd:	2b 43 53 51 3a 20 00                                +CSQ: .

000006c4 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     6c4:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000006cd <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     6cd:	2b 43 52 45 47 3a 20 00                             +CREG: .

000006d5 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     6d5:	41 54 2b 43 42 43 00                                AT+CBC.

000006dc <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     6dc:	2b 43 42 43 3a 20 00                                +CBC: .

000006e3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     6e3:	53 49 4d 38 30 30 48 00                             SIM800H.

000006eb <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     6eb:	09 3c 2d 2d 2d 20 00                                .<--- .

000006f2 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     6f2:	09 2d 2d 2d 3e 20 00                                .---> .

000006f9 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     6f9:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000709 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     709:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000719 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     719:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

00000724 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     724:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

0000072f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     72f:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000073a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     73a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000741 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     741:	09 2d 2d 2d 3e 20 00                                .---> .

00000748 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     748:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

00000752 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     752:	41 54 45 30 00                                      ATE0.

00000757 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     757:	41 54 45 30 00                                      ATE0.

0000075c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     75c:	41 54 00                                            AT.

0000075f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     75f:	41 54 00                                            AT.

00000762 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     762:	41 54 00                                            AT.

00000765 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     765:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     775:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     785:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     795:	2e 00                                               ..

00000797 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     797:	41 54 00                                            AT.

0000079a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     79a:	41 54 00                                            AT.

0000079d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     79d:	41 54 00                                            AT.

000007a0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     7a0:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     7b0:	61 62 6c 65 00                                      able.

000007b5 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     7b5:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     7c5:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000007d6 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     7d6:	4f 4b 00                                            OK.

000007d9 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     7d9:	46 4f 4e 41 00                                      FONA.

000007de <_ZZN13Adafruit_FONAC4EaE3__c>:
     7de:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000007e6 <__ctors_start>:
     7e6:	81 09       	sbc	r24, r1
     7e8:	72 18       	sub	r7, r2
     7ea:	21 1c       	adc	r2, r1

000007ec <__ctors_end>:
     7ec:	8e 09       	sbc	r24, r14

000007ee <__dtors_end>:
     7ee:	11 24       	eor	r1, r1
     7f0:	1f be       	out	0x3f, r1	; 63
     7f2:	cf ef       	ldi	r28, 0xFF	; 255
     7f4:	d8 e0       	ldi	r29, 0x08	; 8
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	cd bf       	out	0x3d, r28	; 61

000007fa <__do_copy_data>:
     7fa:	13 e0       	ldi	r17, 0x03	; 3
     7fc:	a0 e0       	ldi	r26, 0x00	; 0
     7fe:	b1 e0       	ldi	r27, 0x01	; 1
     800:	ee e2       	ldi	r30, 0x2E	; 46
     802:	f5 e6       	ldi	r31, 0x65	; 101
     804:	02 c0       	rjmp	.+4      	; 0x80a <__do_copy_data+0x10>
     806:	05 90       	lpm	r0, Z+
     808:	0d 92       	st	X+, r0
     80a:	a4 33       	cpi	r26, 0x34	; 52
     80c:	b1 07       	cpc	r27, r17
     80e:	d9 f7       	brne	.-10     	; 0x806 <__do_copy_data+0xc>

00000810 <__do_clear_bss>:
     810:	28 e0       	ldi	r18, 0x08	; 8
     812:	a4 e3       	ldi	r26, 0x34	; 52
     814:	b3 e0       	ldi	r27, 0x03	; 3
     816:	01 c0       	rjmp	.+2      	; 0x81a <.do_clear_bss_start>

00000818 <.do_clear_bss_loop>:
     818:	1d 92       	st	X+, r1

0000081a <.do_clear_bss_start>:
     81a:	ab 34       	cpi	r26, 0x4B	; 75
     81c:	b2 07       	cpc	r27, r18
     81e:	e1 f7       	brne	.-8      	; 0x818 <.do_clear_bss_loop>

00000820 <__do_global_ctors>:
     820:	13 e0       	ldi	r17, 0x03	; 3
     822:	c6 ef       	ldi	r28, 0xF6	; 246
     824:	d3 e0       	ldi	r29, 0x03	; 3
     826:	04 c0       	rjmp	.+8      	; 0x830 <__do_global_ctors+0x10>
     828:	21 97       	sbiw	r28, 0x01	; 1
     82a:	fe 01       	movw	r30, r28
     82c:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__tablejump2__>
     830:	c3 3f       	cpi	r28, 0xF3	; 243
     832:	d1 07       	cpc	r29, r17
     834:	c9 f7       	brne	.-14     	; 0x828 <__do_global_ctors+0x8>
     836:	0e 94 4f 1c 	call	0x389e	; 0x389e <main>
     83a:	0c 94 8a 32 	jmp	0x6514	; 0x6514 <__do_global_dtors>

0000083e <__bad_interrupt>:
     83e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000842 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
//#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <_ZN10GpsManagerC1Eh+0x6>
     848:	1f 92       	push	r1
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN13Adafruit_FONAC1Ea>
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	9a 81       	ldd	r25, Y+2	; 0x02
     862:	86 5e       	subi	r24, 0xE6	; 230
     864:	9e 4f       	sbci	r25, 0xFE	; 254
     866:	2b 81       	ldd	r18, Y+3	; 0x03
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
{
}
     86c:	00 00       	nop
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <_ZN10GpsManagerD1Ev+0x6>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	00 00       	nop
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     89a:	00 d0       	rcall	.+0      	; 0x89c <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	7c 83       	std	Y+4, r23	; 0x04
     8a6:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	2b 81       	ldd	r18, Y+3	; 0x03
     8ae:	3c 81       	ldd	r19, Y+4	; 0x04
     8b0:	b9 01       	movw	r22, r18
     8b2:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN13Adafruit_FONAaSERKS_>
}
     8b6:	00 00       	nop
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <_ZN10GpsManager9toggleGpsEb+0x6>
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <_ZN10GpsManager9toggleGpsEb+0x8>
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	9c 83       	std	Y+4, r25	; 0x04
     8d6:	8b 83       	std	Y+3, r24	; 0x03
     8d8:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	86 5e       	subi	r24, 0xE6	; 230
     8e0:	9e 4f       	sbci	r25, 0xFE	; 254
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	88 23       	and	r24, r24
     8e8:	11 f0       	breq	.+4      	; 0x8ee <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     8ee:	8f e9       	ldi	r24, 0x9F	; 159
     8f0:	96 e8       	ldi	r25, 0x86	; 134
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <_ZN10GpsManager9gpsStatusEv+0x6>
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     914:	00 00       	nop
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	00 d0       	rcall	.+0      	; 0x932 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x12>
     932:	00 d0       	rcall	.+0      	; 0x934 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x14>
     934:	00 d0       	rcall	.+0      	; 0x936 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x16>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
     93e:	7e 83       	std	Y+6, r23	; 0x06
     940:	6d 83       	std	Y+5, r22	; 0x05

	if (_isMock)
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	86 5e       	subi	r24, 0xE6	; 230
     948:	9e 4f       	sbci	r25, 0xFE	; 254
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x34>
     952:	48 c0       	rjmp	.+144    	; 0x9e4 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xc4>
	{
		info.altitude = 10;
     954:	2d 81       	ldd	r18, Y+5	; 0x05
     956:	3e 81       	ldd	r19, Y+6	; 0x06
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	a0 e2       	ldi	r26, 0x20	; 32
     95e:	b1 e4       	ldi	r27, 0x41	; 65
     960:	f9 01       	movw	r30, r18
     962:	82 8b       	std	Z+18, r24	; 0x12
     964:	93 8b       	std	Z+19, r25	; 0x13
     966:	a4 8b       	std	Z+20, r26	; 0x14
     968:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     96a:	8d 81       	ldd	r24, Y+5	; 0x05
     96c:	9e 81       	ldd	r25, Y+6	; 0x06
     96e:	46 96       	adiw	r24, 0x16	; 22
     970:	2f e0       	ldi	r18, 0x0F	; 15
     972:	eb e1       	ldi	r30, 0x1B	; 27
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	dc 01       	movw	r26, r24
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	2a 95       	dec	r18
     97e:	e1 f7       	brne	.-8      	; 0x978 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x58>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	2e e1       	ldi	r18, 0x1E	; 30
     986:	fc 01       	movw	r30, r24
     988:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	3e 81       	ldd	r19, Y+6	; 0x06
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e2       	ldi	r26, 0x20	; 32
     994:	b2 e4       	ldi	r27, 0x42	; 66
     996:	f9 01       	movw	r30, r18
     998:	86 87       	std	Z+14, r24	; 0x0e
     99a:	97 87       	std	Z+15, r25	; 0x0f
     99c:	a0 8b       	std	Z+16, r26	; 0x10
     99e:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     9a0:	2d 81       	ldd	r18, Y+5	; 0x05
     9a2:	3e 81       	ldd	r19, Y+6	; 0x06
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	a8 e4       	ldi	r26, 0x48	; 72
     9aa:	b2 e4       	ldi	r27, 0x42	; 66
     9ac:	f9 01       	movw	r30, r18
     9ae:	82 83       	std	Z+2, r24	; 0x02
     9b0:	93 83       	std	Z+3, r25	; 0x03
     9b2:	a4 83       	std	Z+4, r26	; 0x04
     9b4:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     9b6:	2d 81       	ldd	r18, Y+5	; 0x05
     9b8:	3e 81       	ldd	r19, Y+6	; 0x06
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e7       	ldi	r26, 0x70	; 112
     9c0:	b2 e4       	ldi	r27, 0x42	; 66
     9c2:	f9 01       	movw	r30, r18
     9c4:	86 83       	std	Z+6, r24	; 0x06
     9c6:	97 83       	std	Z+7, r25	; 0x07
     9c8:	a0 87       	std	Z+8, r26	; 0x08
     9ca:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     9cc:	2d 81       	ldd	r18, Y+5	; 0x05
     9ce:	3e 81       	ldd	r19, Y+6	; 0x06
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	ac e8       	ldi	r26, 0x8C	; 140
     9d6:	b2 e4       	ldi	r27, 0x42	; 66
     9d8:	f9 01       	movw	r30, r18
     9da:	82 87       	std	Z+10, r24	; 0x0a
     9dc:	93 87       	std	Z+11, r25	; 0x0b
     9de:	a4 87       	std	Z+12, r26	; 0x0c
     9e0:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     9e2:	42 c0       	rjmp	.+132    	; 0xa68 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x148>
	}

	int8_t gpsStatus = fona.GPSstatus();
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN13Adafruit_FONA9GPSstatusEv>
     9ec:	89 83       	std	Y+1, r24	; 0x01
	
	//Store the status regardless
	info.gpsStatus = gpsStatus;
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	9e 81       	ldd	r25, Y+6	; 0x06
     9f2:	29 81       	ldd	r18, Y+1	; 0x01
     9f4:	fc 01       	movw	r30, r24
     9f6:	21 83       	std	Z+1, r18	; 0x01
	
	// we need at least a 2D fix
	if (gpsStatus < 2) {
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	34 f4       	brge	.+12     	; 0xa0a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xea>
		info.errorCode = ERR_GPS_NO_FIX;
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
		return;
     a08:	2f c0       	rjmp	.+94     	; 0xa68 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x148>
	}

	//We know the date won't be >20 from it's format
	boolean success = fona.getGPS(&info.lat, &info.lon, 
     a0a:	8d 81       	ldd	r24, Y+5	; 0x05
     a0c:	9e 81       	ldd	r25, Y+6	; 0x06
     a0e:	8c 01       	movw	r16, r24
     a10:	0a 5e       	subi	r16, 0xEA	; 234
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	dc 01       	movw	r26, r24
     a1a:	52 96       	adiw	r26, 0x12	; 18
     a1c:	8d 81       	ldd	r24, Y+5	; 0x05
     a1e:	9e 81       	ldd	r25, Y+6	; 0x06
     a20:	fc 01       	movw	r30, r24
     a22:	3e 96       	adiw	r30, 0x0e	; 14
     a24:	8d 81       	ldd	r24, Y+5	; 0x05
     a26:	9e 81       	ldd	r25, Y+6	; 0x06
     a28:	9c 01       	movw	r18, r24
     a2a:	26 5f       	subi	r18, 0xF6	; 246
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	ac 01       	movw	r20, r24
     a34:	4a 5f       	subi	r20, 0xFA	; 250
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	bc 01       	movw	r22, r24
     a3e:	6e 5f       	subi	r22, 0xFE	; 254
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
		&info.speed_kph, &info.heading, &info.altitude, (char*)info.date);
     a46:	68 01       	movw	r12, r16
     a48:	7d 01       	movw	r14, r26
     a4a:	8f 01       	movw	r16, r30
     a4c:	0e 94 dd 22 	call	0x45ba	; 0x45ba <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>
     a50:	8a 83       	std	Y+2, r24	; 0x02

	// make sure we have a response
	if (!success){
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	89 27       	eor	r24, r25
     a58:	88 23       	and	r24, r24
     a5a:	31 f0       	breq	.+12     	; 0xa68 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x148>
		info.errorCode = ERR_GPS_BAD_FIELD;
     a5c:	8d 81       	ldd	r24, Y+5	; 0x05
     a5e:	9e 81       	ldd	r25, Y+6	; 0x06
     a60:	2c e0       	ldi	r18, 0x0C	; 12
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
		return;
     a66:	00 00       	nop
	}
}
     a68:	26 96       	adiw	r28, 0x06	; 6
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
//#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <_ZN10GsmManagerC1Eh+0x6>
     a8c:	1f 92       	push	r1
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	2b 81       	ldd	r18, Y+3	; 0x03
     a9e:	fc 01       	movw	r30, r24
     aa0:	24 83       	std	Z+4, r18	; 0x04
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	05 96       	adiw	r24, 0x05	; 5
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN13Adafruit_FONAC1Ea>
{
}
     aae:	00 00       	nop
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <_ZN10GsmManagerD1Ev+0x6>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	00 00       	nop
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     adc:	00 d0       	rcall	.+0      	; 0xade <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	7c 83       	std	Y+4, r23	; 0x04
     ae8:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	05 96       	adiw	r24, 0x05	; 5
     af0:	2b 81       	ldd	r18, Y+3	; 0x03
     af2:	3c 81       	ldd	r19, Y+4	; 0x04
     af4:	b9 01       	movw	r22, r18
     af6:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN13Adafruit_FONAaSERKS_>
}
     afa:	00 00       	nop
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <_ZN10GsmManager5resetEv+0x6>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	fc 01       	movw	r30, r24
     b1e:	11 82       	std	Z+1, r1	; 0x01
     b20:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	fc 01       	movw	r30, r24
     b28:	13 82       	std	Z+3, r1	; 0x03
     b2a:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     b2c:	00 00       	nop
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	00 d0       	rcall	.+0      	; 0xb42 <_ZN10GsmManager5beginEv+0xa>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	fc 01       	movw	r30, r24
     b50:	94 81       	ldd	r25, Z+4	; 0x04
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	99 23       	and	r25, r25
     b56:	09 f4       	brne	.+2      	; 0xb5a <_ZN10GsmManager5beginEv+0x22>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	88 23       	and	r24, r24
     b5c:	11 f0       	breq	.+4      	; 0xb62 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	2d c0       	rjmp	.+90     	; 0xbbc <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     b62:	8f e1       	ldi	r24, 0x1F	; 31
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_Znwj>
     b6a:	8c 01       	movw	r16, r24
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	42 e0       	ldi	r20, 0x02	; 2
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 55 2c 	call	0x58aa	; 0x58aa <_ZN14SoftwareSerialC1Ehhb>
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	81 5e       	subi	r24, 0xE1	; 225
     b7e:	9e 4f       	sbci	r25, 0xFE	; 254
     b80:	fc 01       	movw	r30, r24
     b82:	11 83       	std	Z+1, r17	; 0x01
     b84:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	81 5e       	subi	r24, 0xE1	; 225
     b8c:	9e 4f       	sbci	r25, 0xFE	; 254
     b8e:	fc 01       	movw	r30, r24
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	40 ec       	ldi	r20, 0xC0	; 192
     b96:	52 e1       	ldi	r21, 0x12	; 18
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	81 5e       	subi	r24, 0xE1	; 225
     ba6:	9e 4f       	sbci	r25, 0xFE	; 254
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	9c 01       	movw	r18, r24
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	05 96       	adiw	r24, 0x05	; 5
     bb6:	b9 01       	movw	r22, r18
     bb8:	0e 94 82 24 	call	0x4904	; 0x4904 <_ZN13Adafruit_FONA5beginER6Stream>
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <_ZN10GsmManager14getBattPercentEPj+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <_ZN10GsmManager14getBattPercentEPj+0x8>
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	7c 83       	std	Y+4, r23	; 0x04
     bdc:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	fc 01       	movw	r30, r24
     be4:	94 81       	ldd	r25, Z+4	; 0x04
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	99 23       	and	r25, r25
     bea:	09 f4       	brne	.+2      	; 0xbee <_ZN10GsmManager14getBattPercentEPj+0x24>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	88 23       	and	r24, r24
     bf0:	49 f0       	breq	.+18     	; 0xc04 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	23 e6       	ldi	r18, 0x63	; 99
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	fc 01       	movw	r30, r24
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	20 83       	st	Z, r18
		return true;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	05 96       	adiw	r24, 0x05	; 5
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	b9 01       	movw	r22, r18
     c10:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	69 97       	sbiw	r28, 0x19	; 25
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	9f 8b       	std	Y+23, r25	; 0x17
     c38:	8e 8b       	std	Y+22, r24	; 0x16
     c3a:	79 8f       	std	Y+25, r23	; 0x19
     c3c:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     c3e:	8e 89       	ldd	r24, Y+22	; 0x16
     c40:	9f 89       	ldd	r25, Y+23	; 0x17
     c42:	fc 01       	movw	r30, r24
     c44:	94 81       	ldd	r25, Z+4	; 0x04
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	99 23       	and	r25, r25
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	88 23       	and	r24, r24
     c50:	11 f0       	breq	.+4      	; 0xc56 <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	26 c0       	rjmp	.+76     	; 0xca2 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     c56:	2e e0       	ldi	r18, 0x0E	; 14
     c58:	e8 e3       	ldi	r30, 0x38	; 56
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	dc 01       	movw	r26, r24
     c62:	01 90       	ld	r0, Z+
     c64:	0d 92       	st	X+, r0
     c66:	2a 95       	dec	r18
     c68:	e1 f7       	brne	.-8      	; 0xc62 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     c6a:	27 e0       	ldi	r18, 0x07	; 7
     c6c:	ce 01       	movw	r24, r28
     c6e:	0f 96       	adiw	r24, 0x0f	; 15
     c70:	fc 01       	movw	r30, r24
     c72:	32 2f       	mov	r19, r18
     c74:	11 92       	st	Z+, r1
     c76:	3a 95       	dec	r19
     c78:	e9 f7       	brne	.-6      	; 0xc74 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     c7a:	8e 89       	ldd	r24, Y+22	; 0x16
     c7c:	9f 89       	ldd	r25, Y+23	; 0x17
     c7e:	05 96       	adiw	r24, 0x05	; 5
     c80:	28 8d       	ldd	r18, Y+24	; 0x18
     c82:	39 8d       	ldd	r19, Y+25	; 0x19
     c84:	a9 01       	movw	r20, r18
     c86:	9e 01       	movw	r18, r28
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	b9 01       	movw	r22, r18
     c8e:	0e 94 38 26 	call	0x4c70	; 0x4c70 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     c92:	98 2f       	mov	r25, r24
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	89 27       	eor	r24, r25
     c98:	88 23       	and	r24, r24
     c9a:	11 f0       	breq	.+4      	; 0xca0 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	00 d0       	rcall	.+0      	; 0xcba <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	7c 83       	std	Y+4, r23	; 0x04
     cc6:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus();
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN10GsmManager16getNetworkStatusEv>
     cd0:	28 2f       	mov	r18, r24
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	fc 01       	movw	r30, r24
     cd8:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN10GsmManager7getRSSIEv>
     ce2:	28 2f       	mov	r18, r24
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	fc 01       	movw	r30, r24
     cea:	21 83       	std	Z+1, r18	; 0x01
}
     cec:	00 00       	nop
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	00 d0       	rcall	.+0      	; 0xd02 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	fc 01       	movw	r30, r24
     d10:	94 81       	ldd	r25, Z+4	; 0x04
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	99 23       	and	r25, r25
     d16:	09 f4       	brne	.+2      	; 0xd1a <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	88 23       	and	r24, r24
     d1c:	11 f0       	breq	.+4      	; 0xd22 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	05 96       	adiw	r24, 0x05	; 5
     d28:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <_ZN10GsmManager7getRSSIEv+0x6>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	fc 01       	movw	r30, r24
     d4a:	94 81       	ldd	r25, Z+4	; 0x04
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	99 23       	and	r25, r25
     d50:	09 f4       	brne	.+2      	; 0xd54 <_ZN10GsmManager7getRSSIEv+0x1e>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	88 23       	and	r24, r24
     d56:	11 f0       	breq	.+4      	; 0xd5c <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     d58:	85 e1       	ldi	r24, 0x15	; 21
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	05 96       	adiw	r24, 0x05	; 5
     d62:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN13Adafruit_FONA7getRSSIEv>
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	00 d0       	rcall	.+0      	; 0xd76 <_ZN10GsmManager10enableGPRSEb+0x6>
     d76:	1f 92       	push	r1
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	05 96       	adiw	r24, 0x05	; 5
     d88:	6b 81       	ldd	r22, Y+3	; 0x03
     d8a:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	2e 97       	sbiw	r28, 0x0e	; 14
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	9c 87       	std	Y+12, r25	; 0x0c
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	7e 87       	std	Y+14, r23	; 0x0e
     dc0:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc6:	fc 01       	movw	r30, r24
     dc8:	94 81       	ldd	r25, Z+4	; 0x04
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	99 23       	and	r25, r25
     dce:	09 f4       	brne	.+2      	; 0xdd2 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	b9 f0       	breq	.+46     	; 0xe04 <_ZN10GsmManager11sendViaGprsEPKc+0x6a>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
     dd6:	85 e9       	ldi	r24, 0x95	; 149
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	bc 01       	movw	r22, r24
     ddc:	8b e5       	ldi	r24, 0x5B	; 91
     dde:	97 e0       	ldi	r25, 0x07	; 7
     de0:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
     de4:	6d e4       	ldi	r22, 0x4D	; 77
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	8b e5       	ldi	r24, 0x5B	; 91
     dea:	97 e0       	ldi	r25, 0x07	; 7
     dec:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	bc 01       	movw	r22, r24
     df6:	8b e5       	ldi	r24, 0x5B	; 91
     df8:	97 e0       	ldi	r25, 0x07	; 7
     dfa:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	c3 c0       	rjmp	.+390    	; 0xf8a <_ZN10GsmManager11sendViaGprsEPKc+0x1f0>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);
     e04:	87 ea       	ldi	r24, 0xA7	; 167
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	bc 01       	movw	r22, r24
     e0a:	8b e5       	ldi	r24, 0x5B	; 91
     e0c:	97 e0       	ldi	r25, 0x07	; 7
     e0e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
     e12:	6d e4       	ldi	r22, 0x4D	; 77
     e14:	71 e0       	ldi	r23, 0x01	; 1
     e16:	8b e5       	ldi	r24, 0x5B	; 91
     e18:	97 e0       	ldi	r25, 0x07	; 7
     e1a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	bc 01       	movw	r22, r24
     e24:	8b e5       	ldi	r24, 0x5B	; 91
     e26:	97 e0       	ldi	r25, 0x07	; 7
     e28:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>

	uint16_t ret = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/r.php"; //TODO: check should not require https!
     e34:	8f e4       	ldi	r24, 0x4F	; 79
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	9d 83       	std	Y+5, r25	; 0x05
     e3a:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	0e 94 66 30 	call	0x60cc	; 0x60cc <strlen>
     e44:	8c 01       	movw	r16, r24
     e46:	44 ec       	ldi	r20, 0xC4	; 196
     e48:	52 e0       	ldi	r21, 0x02	; 2
     e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4e:	05 96       	adiw	r24, 0x05	; 5
     e50:	de 01       	movw	r26, r28
     e52:	19 96       	adiw	r26, 0x09	; 9
     e54:	fe 01       	movw	r30, r28
     e56:	37 96       	adiw	r30, 0x07	; 7
     e58:	2d 85       	ldd	r18, Y+13	; 0x0d
     e5a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e5c:	6c 81       	ldd	r22, Y+4	; 0x04
     e5e:	7d 81       	ldd	r23, Y+5	; 0x05
     e60:	6d 01       	movw	r12, r26
     e62:	7f 01       	movw	r14, r30
     e64:	0e 94 93 29 	call	0x5326	; 0x5326 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     e68:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     e6a:	9b 81       	ldd	r25, Y+3	; 0x03
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	89 27       	eor	r24, r25
     e70:	88 23       	and	r24, r24
     e72:	11 f1       	breq	.+68     	; 0xeb8 <_ZN10GsmManager11sendViaGprsEPKc+0x11e>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     e74:	2f ec       	ldi	r18, 0xCF	; 207
     e76:	32 e0       	ldi	r19, 0x02	; 2
     e78:	40 ed       	ldi	r20, 0xD0	; 208
     e7a:	52 e0       	ldi	r21, 0x02	; 2
     e7c:	61 ed       	ldi	r22, 0xD1	; 209
     e7e:	72 e0       	ldi	r23, 0x02	; 2
     e80:	8b 85       	ldd	r24, Y+11	; 0x0b
     e82:	9c 85       	ldd	r25, Y+12	; 0x0c
     e84:	05 96       	adiw	r24, 0x05	; 5
     e86:	0e 94 05 20 	call	0x400a	; 0x400a <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	0e 94 66 30 	call	0x60cc	; 0x60cc <strlen>
     e92:	8c 01       	movw	r16, r24
     e94:	4c ed       	ldi	r20, 0xDC	; 220
     e96:	52 e0       	ldi	r21, 0x02	; 2
     e98:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e9c:	05 96       	adiw	r24, 0x05	; 5
     e9e:	de 01       	movw	r26, r28
     ea0:	19 96       	adiw	r26, 0x09	; 9
     ea2:	fe 01       	movw	r30, r28
     ea4:	37 96       	adiw	r30, 0x07	; 7
     ea6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ea8:	3e 85       	ldd	r19, Y+14	; 0x0e
     eaa:	6c 81       	ldd	r22, Y+4	; 0x04
     eac:	7d 81       	ldd	r23, Y+5	; 0x05
     eae:	6d 01       	movw	r12, r26
     eb0:	7f 01       	movw	r14, r30
     eb2:	0e 94 93 29 	call	0x5326	; 0x5326 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     eb6:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 27       	eor	r24, r25
     ebe:	88 23       	and	r24, r24
     ec0:	29 f0       	breq	.+10     	; 0xecc <_ZN10GsmManager11sendViaGprsEPKc+0x132>
	{
		ret = 999;
     ec2:	87 ee       	ldi	r24, 0xE7	; 231
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	5d c0       	rjmp	.+186    	; 0xf86 <_ZN10GsmManager11sendViaGprsEPKc+0x1ec>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
     ecc:	87 ee       	ldi	r24, 0xE7	; 231
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	bc 01       	movw	r22, r24
     ed2:	8b e5       	ldi	r24, 0x5B	; 91
     ed4:	97 e0       	ldi	r25, 0x07	; 7
     ed6:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
     eda:	6d e4       	ldi	r22, 0x4D	; 77
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	8b e5       	ldi	r24, 0x5B	; 91
     ee0:	97 e0       	ldi	r25, 0x07	; 7
     ee2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	4a e0       	ldi	r20, 0x0A	; 10
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	bc 01       	movw	r22, r24
     ef0:	8b e5       	ldi	r24, 0x5B	; 91
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN5Print7printlnEji>
			                                                      
		while (length > 0) {
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	18 16       	cp	r1, r24
     efe:	19 06       	cpc	r1, r25
     f00:	8c f5       	brge	.+98     	; 0xf64 <_ZN10GsmManager11sendViaGprsEPKc+0x1ca>
			while (fona.available()) {
     f02:	8b 85       	ldd	r24, Y+11	; 0x0b
     f04:	9c 85       	ldd	r25, Y+12	; 0x0c
     f06:	05 96       	adiw	r24, 0x05	; 5
     f08:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN13Adafruit_FONA9availableEv>
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	89 2b       	or	r24, r25
     f10:	09 f4       	brne	.+2      	; 0xf14 <_ZN10GsmManager11sendViaGprsEPKc+0x17a>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	22 23       	and	r18, r18
     f16:	81 f3       	breq	.-32     	; 0xef8 <_ZN10GsmManager11sendViaGprsEPKc+0x15e>
				char c = fona.read();
     f18:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f1c:	05 96       	adiw	r24, 0x05	; 5
     f1e:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_ZN13Adafruit_FONA4readEv>
     f22:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     f24:	80 ec       	ldi	r24, 0xC0	; 192
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	80 81       	ld	r24, Z
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	80 72       	andi	r24, 0x20	; 32
     f32:	99 27       	eor	r25, r25
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	89 2b       	or	r24, r25
     f38:	09 f0       	breq	.+2      	; 0xf3c <_ZN10GsmManager11sendViaGprsEPKc+0x1a2>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	22 23       	and	r18, r18
     f3e:	09 f0       	breq	.+2      	; 0xf42 <_ZN10GsmManager11sendViaGprsEPKc+0x1a8>
     f40:	f1 cf       	rjmp	.-30     	; 0xf24 <_ZN10GsmManager11sendViaGprsEPKc+0x18a>
				UDR0 = c;
     f42:	86 ec       	ldi	r24, 0xC6	; 198
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
					                                                      
				length--;
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f0       	breq	.+2      	; 0xf60 <_ZN10GsmManager11sendViaGprsEPKc+0x1c6>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     f5e:	d1 cf       	rjmp	.-94     	; 0xf02 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     f60:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     f62:	ca cf       	rjmp	.-108    	; 0xef8 <_ZN10GsmManager11sendViaGprsEPKc+0x15e>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     f64:	8b 85       	ldd	r24, Y+11	; 0x0b
     f66:	9c 85       	ldd	r25, Y+12	; 0x0c
     f68:	05 96       	adiw	r24, 0x05	; 5
     f6a:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     f6e:	8f 81       	ldd	r24, Y+7	; 0x07
     f70:	98 85       	ldd	r25, Y+8	; 0x08
     f72:	88 3c       	cpi	r24, 0xC8	; 200
     f74:	91 05       	cpc	r25, r1
     f76:	19 f0       	breq	.+6      	; 0xf7e <_ZN10GsmManager11sendViaGprsEPKc+0x1e4>
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <_ZN10GsmManager11sendViaGprsEPKc+0x1e8>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f8a:	2e 96       	adiw	r28, 0x0e	; 14
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <_ZN7Helpers15printSensorDataEP10SensorData>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"

void Helpers::printSensorData(SensorData* sd) {
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <_ZN7Helpers15printSensorDataEP10SensorData+0x6>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01

	RM_LOG(F("Batt-V="));
     fb6:	84 ef       	ldi	r24, 0xF4	; 244
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	bc 01       	movw	r22, r24
     fbc:	8b e5       	ldi	r24, 0x5B	; 91
     fbe:	97 e0       	ldi	r25, 0x07	; 7
     fc0:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	fc 01       	movw	r30, r24
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	92 81       	ldd	r25, Z+2	; 0x02
     fce:	4a e0       	ldi	r20, 0x0A	; 10
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	bc 01       	movw	r22, r24
     fd4:	8b e5       	ldi	r24, 0x5B	; 91
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     fdc:	8c ef       	ldi	r24, 0xFC	; 252
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	bc 01       	movw	r22, r24
     fe2:	8b e5       	ldi	r24, 0x5B	; 91
     fe4:	97 e0       	ldi	r25, 0x07	; 7
     fe6:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	bc 01       	movw	r22, r24
     ff0:	8b e5       	ldi	r24, 0x5B	; 91
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	fc 01       	movw	r30, r24
     ffe:	85 81       	ldd	r24, Z+5	; 0x05
    1000:	96 81       	ldd	r25, Z+6	; 0x06
    1002:	4a e0       	ldi	r20, 0x0A	; 10
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	bc 01       	movw	r22, r24
    1008:	8b e5       	ldi	r24, 0x5B	; 91
    100a:	97 e0       	ldi	r25, 0x07	; 7
    100c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	bc 01       	movw	r22, r24
    1016:	8b e5       	ldi	r24, 0x5B	; 91
    1018:	97 e0       	ldi	r25, 0x07	; 7
    101a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	bc 01       	movw	r22, r24
    1024:	8b e5       	ldi	r24, 0x5B	; 91
    1026:	97 e0       	ldi	r25, 0x07	; 7
    1028:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	fc 01       	movw	r30, r24
    1032:	83 81       	ldd	r24, Z+3	; 0x03
    1034:	94 81       	ldd	r25, Z+4	; 0x04
    1036:	4a e0       	ldi	r20, 0x0A	; 10
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	bc 01       	movw	r22, r24
    103c:	8b e5       	ldi	r24, 0x5B	; 91
    103e:	97 e0       	ldi	r25, 0x07	; 7
    1040:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1044:	83 e1       	ldi	r24, 0x13	; 19
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	bc 01       	movw	r22, r24
    104a:	8b e5       	ldi	r24, 0x5B	; 91
    104c:	97 e0       	ldi	r25, 0x07	; 7
    104e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    1052:	87 e1       	ldi	r24, 0x17	; 23
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	bc 01       	movw	r22, r24
    1058:	8b e5       	ldi	r24, 0x5B	; 91
    105a:	97 e0       	ldi	r25, 0x07	; 7
    105c:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->temperature);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	fc 01       	movw	r30, r24
    1066:	87 81       	ldd	r24, Z+7	; 0x07
    1068:	90 85       	ldd	r25, Z+8	; 0x08
    106a:	4a e0       	ldi	r20, 0x0A	; 10
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	bc 01       	movw	r22, r24
    1070:	8b e5       	ldi	r24, 0x5B	; 91
    1072:	97 e0       	ldi	r25, 0x07	; 7
    1074:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN5Print7printlnEji>
}
    1078:	00 00       	nop
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <setup>:
void printData();
void initSubsystems();

uint8_t _behaviour = SYS_BEHAVIOUR::DoNothing;

void setup() {
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);


	//Must immediately run as this pin in LOW switches off the system
	pinMode(PIN_SHUTDOWN, OUTPUT);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <pinMode>
	digitalWrite(PIN_SHUTDOWN, HIGH);
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>



	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
    109c:	68 eb       	ldi	r22, 0xB8	; 184
    109e:	7b e0       	ldi	r23, 0x0B	; 11
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
	
	
	
	//Turn off redundant Arduino board notification LED controlled by pin 13
	pinMode(13, OUTPUT);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	8d e0       	ldi	r24, 0x0D	; 13
    10ac:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <pinMode>
	
	#ifdef OUTPUT_DEBUG
		Serial.begin(9600); //Writes to Serial output
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	55 e2       	ldi	r21, 0x25	; 37
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	8b e5       	ldi	r24, 0x5B	; 91
    10ba:	97 e0       	ldi	r25, 0x07	; 7
    10bc:	0e 94 ac 19 	call	0x3358	; 0x3358 <_ZN14HardwareSerial5beginEm>
	#endif
	
	RM_LOGLN(F("Starting..."));
    10c0:	8d e1       	ldi	r24, 0x1D	; 29
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	bc 01       	movw	r22, r24
    10c6:	8b e5       	ldi	r24, 0x5B	; 91
    10c8:	97 e0       	ldi	r25, 0x07	; 7
    10ca:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	initSubsystems();
    10ce:	0e 94 75 08 	call	0x10ea	; 0x10ea <_Z14initSubsystemsv>
		return;
	}
	
	if (IS_EXTENDED_MEM_TEST) {
		
		ExtendedTests::runExtendedMemTest(mem, sensorMgr);
    10d2:	60 91 8b 06 	lds	r22, 0x068B	; 0x80068b <sensorMgr>
    10d6:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <mem>
    10da:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN13ExtendedTests18runExtendedMemTestE12RmMemManager13SensorManager>
		
		switchOffSystem();
    10de:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z15switchOffSystemv>
		return;
    10e2:	00 00       	nop
	//Send to HQ every 20 hours
	if (currBootCount > 0 && currBootCount%4 == 0) { //TODO: Overflow?
		
		_behaviour |= SYS_BEHAVIOUR::SendData;
	}
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <_Z14initSubsystemsv>:

void initSubsystems() {
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62

	gps.setFona(fona);
    10f2:	64 e3       	ldi	r22, 0x34	; 52
    10f4:	73 e0       	ldi	r23, 0x03	; 3
    10f6:	8f e4       	ldi	r24, 0x4F	; 79
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
    10fe:	64 e3       	ldi	r22, 0x34	; 52
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	8a e6       	ldi	r24, 0x6A	; 106
    1104:	95 e0       	ldi	r25, 0x05	; 5
    1106:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (!gsm.begin()) {
    110a:	8a e6       	ldi	r24, 0x6A	; 106
    110c:	95 e0       	ldi	r25, 0x05	; 5
    110e:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN10GsmManager5beginEv>
    1112:	98 2f       	mov	r25, r24
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 27       	eor	r24, r25
    1118:	88 23       	and	r24, r24
    111a:	31 f4       	brne	.+12     	; 0x1128 <_Z14initSubsystemsv+0x3e>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)) {
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	8f e4       	ldi	r24, 0x4F	; 79
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN10GpsManager9toggleGpsEb>
    1126:	01 c0       	rjmp	.+2      	; 0x112a <_Z14initSubsystemsv+0x40>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
    1128:	00 00       	nop
	if (!gps.toggleGps(true)) {
	
		//TODO: store in ROM
		return;
	}
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <_Z15switchOffSystemv>:


void switchOffSystem() {
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN("Switching off...");
    1138:	6e e7       	ldi	r22, 0x7E	; 126
    113a:	71 e0       	ldi	r23, 0x01	; 1
    113c:	8b e5       	ldi	r24, 0x5B	; 91
    113e:	97 e0       	ldi	r25, 0x07	; 7
    1140:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
	
	digitalWrite(PIN_SHUTDOWN, LOW);
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	85 e0       	ldi	r24, 0x05	; 5
    1148:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
	
	delay(3000); //To allow serial to purge the shutdown message
    114c:	68 eb       	ldi	r22, 0xB8	; 184
    114e:	7b e0       	ldi	r23, 0x0B	; 11
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
}
    1158:	00 00       	nop
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite) {
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	1f 92       	push	r1
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
	//
	////gsm.sendViaSms(sm.c_str()); //TO: local number !
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
    116c:	00 00       	nop
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <_Z12takeReadingsv>:

boolean takeReadings() {
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	2a 97       	sbiw	r28, 0x0a	; 10
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
	
	SensorData sd;
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	0e 94 cf 19 	call	0x339e	; 0x339e <_ZN10SensorDataC1Ev>
	sensorMgr.readData(&sd);
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	bc 01       	movw	r22, r24
    1198:	8b e8       	ldi	r24, 0x8B	; 139
    119a:	96 e0       	ldi	r25, 0x06	; 6
    119c:	0e 94 b8 10 	call	0x2170	; 0x2170 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
}
    11a2:	2a 96       	adiw	r28, 0x0a	; 10
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <_Z8sendDatav>:

boolean sendData() {
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	
	RM_LOGLN(F("Sending data..."));
    11bc:	84 e3       	ldi	r24, 0x34	; 52
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	bc 01       	movw	r22, r24
    11c2:	8b e5       	ldi	r24, 0x5B	; 91
    11c4:	97 e0       	ldi	r25, 0x07	; 7
    11c6:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	return false;
    11ca:	80 e0       	ldi	r24, 0x00	; 0
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62

	delay(1000);
    11da:	68 ee       	ldi	r22, 0xE8	; 232
    11dc:	73 e0       	ldi	r23, 0x03	; 3
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
	++_timerCounter;
    11e6:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <_timerCounter>
    11ea:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <_timerCounter+0x1>
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <_timerCounter+0x1>
    11f4:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <_timerCounter>

	RM_LOG2(F("Behaviour"), _behaviour);
    11f8:	84 e4       	ldi	r24, 0x44	; 68
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	bc 01       	movw	r22, r24
    11fe:	8b e5       	ldi	r24, 0x5B	; 91
    1200:	97 e0       	ldi	r25, 0x07	; 7
    1202:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    1206:	6f e8       	ldi	r22, 0x8F	; 143
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	8b e5       	ldi	r24, 0x5B	; 91
    120c:	97 e0       	ldi	r25, 0x07	; 7
    120e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    1212:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <_behaviour>
    1216:	4a e0       	ldi	r20, 0x0A	; 10
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	68 2f       	mov	r22, r24
    121c:	8b e5       	ldi	r24, 0x5B	; 91
    121e:	97 e0       	ldi	r25, 0x07	; 7
    1220:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1224:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <_behaviour>
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	99 27       	eor	r25, r25
    1230:	89 2b       	or	r24, r25
    1232:	49 f0       	breq	.+18     	; 0x1246 <loop+0x74>
		
		if (takeReadings())
    1234:	0e 94 bb 08 	call	0x1176	; 0x1176 <_Z12takeReadingsv>
    1238:	88 23       	and	r24, r24
    123a:	29 f0       	breq	.+10     	; 0x1246 <loop+0x74>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    123c:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <_behaviour>
    1240:	8e 7f       	andi	r24, 0xFE	; 254
    1242:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1246:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <_behaviour>
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	82 70       	andi	r24, 0x02	; 2
    1250:	99 27       	eor	r25, r25
    1252:	89 2b       	or	r24, r25
    1254:	49 f0       	breq	.+18     	; 0x1268 <loop+0x96>
		
		if (sendData())
    1256:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_Z8sendDatav>
    125a:	88 23       	and	r24, r24
    125c:	29 f0       	breq	.+10     	; 0x1268 <loop+0x96>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    125e:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <_behaviour>
    1262:	8d 7f       	andi	r24, 0xFD	; 253
    1264:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1268:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <_behaviour>
    126c:	88 23       	and	r24, r24
    126e:	11 f4       	brne	.+4      	; 0x1274 <loop+0xa2>
		
		switchOffSystem();
    1270:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z15switchOffSystemv>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    1274:	00 00       	nop
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <_Z41__static_initialization_and_destruction_0ii>:
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	00 d0       	rcall	.+0      	; 0x1282 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	7c 83       	std	Y+4, r23	; 0x04
    128e:	6b 83       	std	Y+3, r22	; 0x03
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	e9 f4       	brne	.+58     	; 0x12d2 <_Z41__static_initialization_and_destruction_0ii+0x56>
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	c9 f4       	brne	.+50     	; 0x12d2 <_Z41__static_initialization_and_destruction_0ii+0x56>
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    12a0:	64 e0       	ldi	r22, 0x04	; 4
    12a2:	84 e3       	ldi	r24, 0x34	; 52
    12a4:	93 e0       	ldi	r25, 0x03	; 3
    12a6:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN13Adafruit_FONAC1Ea>
RmMemManager mem = RmMemManager(false);
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	8e e4       	ldi	r24, 0x4E	; 78
    12ae:	94 e0       	ldi	r25, 0x04	; 4
    12b0:	0e 94 9b 09 	call	0x1336	; 0x1336 <_ZN12RmMemManagerC1Eb>
GpsManager gps = GpsManager(IS_GPS_MOCK);
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	8f e4       	ldi	r24, 0x4F	; 79
    12b8:	94 e0       	ldi	r25, 0x04	; 4
    12ba:	0e 94 21 04 	call	0x842	; 0x842 <_ZN10GpsManagerC1Eh>
GsmManager gsm = GsmManager(IS_GSM_MOCK);
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	8a e6       	ldi	r24, 0x6A	; 106
    12c2:	95 e0       	ldi	r25, 0x05	; 5
    12c4:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN10GsmManagerC1Eh>
SensorManager sensorMgr = SensorManager(true);
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	8b e8       	ldi	r24, 0x8B	; 139
    12cc:	96 e0       	ldi	r25, 0x06	; 6
    12ce:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN13SensorManagerC1Eb>
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	89 2b       	or	r24, r25
    12d8:	61 f4       	brne	.+24     	; 0x12f2 <_Z41__static_initialization_and_destruction_0ii+0x76>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	41 f4       	brne	.+16     	; 0x12f2 <_Z41__static_initialization_and_destruction_0ii+0x76>

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem = RmMemManager(false);
GpsManager gps = GpsManager(IS_GPS_MOCK);
GsmManager gsm = GsmManager(IS_GSM_MOCK);
    12e2:	8a e6       	ldi	r24, 0x6A	; 106
    12e4:	95 e0       	ldi	r25, 0x05	; 5
    12e6:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN10GsmManagerD1Ev>


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem = RmMemManager(false);
GpsManager gps = GpsManager(IS_GPS_MOCK);
    12ea:	8f e4       	ldi	r24, 0x4F	; 79
    12ec:	94 e0       	ldi	r25, 0x04	; 4
    12ee:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN10GpsManagerD1Ev>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

}
    12f2:	00 00       	nop
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <_GLOBAL__sub_I_fona>:
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	6f ef       	ldi	r22, 0xFF	; 255
    130c:	7f ef       	ldi	r23, 0xFF	; 255
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z41__static_initialization_and_destruction_0ii>
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <_GLOBAL__sub_D_fona>:
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	6f ef       	ldi	r22, 0xFF	; 255
    1326:	7f ef       	ldi	r23, 0xFF	; 255
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z41__static_initialization_and_destruction_0ii>
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <_ZN12RmMemManagerC1Eb>:
boolean _ledTopPinGreen=false;
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock) {
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	00 d0       	rcall	.+0      	; 0x133c <_ZN12RmMemManagerC1Eb+0x6>
    133c:	1f 92       	push	r1
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	2b 81       	ldd	r18, Y+3	; 0x03
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
	
	if (!_isMock)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	fc 01       	movw	r30, r24
    1358:	90 81       	ld	r25, Z
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 27       	eor	r24, r25
    135e:	88 23       	and	r24, r24
    1360:	21 f0       	breq	.+8      	; 0x136a <_ZN12RmMemManagerC1Eb+0x34>
		Wire.begin();
    1362:	8d e4       	ldi	r24, 0x4D	; 77
    1364:	97 e0       	ldi	r25, 0x07	; 7
    1366:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN7TwoWire5beginEv>
}
    136a:	00 00       	nop
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <_Z13internalWritejPhh>:

void internalWrite(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	28 97       	sbiw	r28, 0x08	; 8
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	9d 83       	std	Y+5, r25	; 0x05
    138e:	8c 83       	std	Y+4, r24	; 0x04
    1390:	7f 83       	std	Y+7, r23	; 0x07
    1392:	6e 83       	std	Y+6, r22	; 0x06
    1394:	48 87       	std	Y+8, r20	; 0x08
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1396:	19 82       	std	Y+1, r1	; 0x01
    1398:	99 81       	ldd	r25, Y+1	; 0x01
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	98 17       	cp	r25, r24
    139e:	e0 f5       	brcc	.+120    	; 0x1418 <_Z13internalWritejPhh+0xa0>
	
		uint16_t thisByteAddr = address+i;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	9b 83       	std	Y+3, r25	; 0x03
    13b0:	8a 83       	std	Y+2, r24	; 0x02
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		RM_LOGMEMLN(*(data+i));
	
		Wire.beginTransmission(0x50);
    13b2:	60 e5       	ldi	r22, 0x50	; 80
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	8d e4       	ldi	r24, 0x4D	; 77
    13b8:	97 e0       	ldi	r25, 0x07	; 7
    13ba:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	89 2f       	mov	r24, r25
    13c4:	99 27       	eor	r25, r25
    13c6:	bc 01       	movw	r22, r24
    13c8:	8d e4       	ldi	r24, 0x4D	; 77
    13ca:	97 e0       	ldi	r25, 0x07	; 7
    13cc:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	99 27       	eor	r25, r25
    13d6:	bc 01       	movw	r22, r24
    13d8:	8d e4       	ldi	r24, 0x4D	; 77
    13da:	97 e0       	ldi	r25, 0x07	; 7
    13dc:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	2e 81       	ldd	r18, Y+6	; 0x06
    13e8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	fc 01       	movw	r30, r24
    13f0:	80 81       	ld	r24, Z
    13f2:	68 2f       	mov	r22, r24
    13f4:	8d e4       	ldi	r24, 0x4D	; 77
    13f6:	97 e0       	ldi	r25, 0x07	; 7
    13f8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    13fc:	8d e4       	ldi	r24, 0x4D	; 77
    13fe:	97 e0       	ldi	r25, 0x07	; 7
    1400:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZN7TwoWire15endTransmissionEv>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
    1404:	6f e0       	ldi	r22, 0x0F	; 15
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	c0 cf       	rjmp	.-128    	; 0x1398 <_Z13internalWritejPhh+0x20>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    1418:	00 00       	nop
    141a:	28 96       	adiw	r28, 0x08	; 8
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <_Z12internalReadjPhh>:

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	29 97       	sbiw	r28, 0x09	; 9
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	78 87       	std	Y+8, r23	; 0x08
    1446:	6f 83       	std	Y+7, r22	; 0x07
    1448:	49 87       	std	Y+9, r20	; 0x09
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	99 81       	ldd	r25, Y+1	; 0x01
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	98 17       	cp	r25, r24
    1452:	08 f0       	brcs	.+2      	; 0x1456 <_Z12internalReadjPhh+0x2a>
    1454:	4b c0       	rjmp	.+150    	; 0x14ec <_Z12internalReadjPhh+0xc0>
		
		uint16_t thisByteAddr = address+i;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1468:	60 e5       	ldi	r22, 0x50	; 80
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	8d e4       	ldi	r24, 0x4D	; 77
    146e:	97 e0       	ldi	r25, 0x07	; 7
    1470:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	89 2f       	mov	r24, r25
    147a:	99 27       	eor	r25, r25
    147c:	bc 01       	movw	r22, r24
    147e:	8d e4       	ldi	r24, 0x4D	; 77
    1480:	97 e0       	ldi	r25, 0x07	; 7
    1482:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	99 27       	eor	r25, r25
    148c:	bc 01       	movw	r22, r24
    148e:	8d e4       	ldi	r24, 0x4D	; 77
    1490:	97 e0       	ldi	r25, 0x07	; 7
    1492:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1496:	8d e4       	ldi	r24, 0x4D	; 77
    1498:	97 e0       	ldi	r25, 0x07	; 7
    149a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	60 e5       	ldi	r22, 0x50	; 80
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	8d e4       	ldi	r24, 0x4D	; 77
    14a8:	97 e0       	ldi	r25, 0x07	; 7
    14aa:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
    14b2:	8d e4       	ldi	r24, 0x4D	; 77
    14b4:	97 e0       	ldi	r25, 0x07	; 7
    14b6:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7TwoWire9availableEv>
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	89 2b       	or	r24, r25
    14be:	09 f4       	brne	.+2      	; 0x14c2 <_Z12internalReadjPhh+0x96>
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	22 23       	and	r18, r18
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <_Z12internalReadjPhh+0xa4>
			readByte = Wire.read();
    14c6:	8d e4       	ldi	r24, 0x4D	; 77
    14c8:	97 e0       	ldi	r25, 0x07	; 7
    14ca:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_ZN7TwoWire4readEv>
    14ce:	8a 83       	std	Y+2, r24	; 0x02
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	2f 81       	ldd	r18, Y+7	; 0x07
    14d8:	38 85       	ldd	r19, Y+8	; 0x08
    14da:	82 0f       	add	r24, r18
    14dc:	93 1f       	adc	r25, r19
    14de:	2a 81       	ldd	r18, Y+2	; 0x02
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	b0 cf       	rjmp	.-160    	; 0x144c <_Z12internalReadjPhh+0x20>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    14ec:	00 00       	nop
    14ee:	29 96       	adiw	r28, 0x09	; 9
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	00 d0       	rcall	.+0      	; 0x1506 <_ZN12RmMemManager18getUCharFromMemoryEj+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <_ZN12RmMemManager18getUCharFromMemoryEj+0x8>
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	7d 83       	std	Y+5, r23	; 0x05
    1514:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1516:	21 e0       	ldi	r18, 0x01	; 1
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	42 2f       	mov	r20, r18
    151e:	9e 01       	movw	r18, r28
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	b9 01       	movw	r22, r18
    1526:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12internalReadjPhh>
	return value;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <_ZN12RmMemManager19getUShortFromMemoryEj>:

uint16_t RmMemManager::getUShortFromMemory(uint16_t address) {
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	00 d0       	rcall	.+0      	; 0x1542 <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <_ZN12RmMemManager19getUShortFromMemoryEj+0x8>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <_ZN12RmMemManager19getUShortFromMemoryEj+0xa>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
    154e:	7e 83       	std	Y+6, r23	; 0x06
    1550:	6d 83       	std	Y+5, r22	; 0x05
	
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1552:	22 e0       	ldi	r18, 0x02	; 2
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	42 2f       	mov	r20, r18
    155a:	9e 01       	movw	r18, r28
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	b9 01       	movw	r22, r18
    1562:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12internalReadjPhh>
	return value;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
}
    156a:	26 96       	adiw	r28, 0x06	; 6
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <_ZN12RmMemManager17getUIntFromMemoryEj>:

uint32_t RmMemManager::getUIntFromMemory(uint16_t address) {
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	28 97       	sbiw	r28, 0x08	; 8
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	78 87       	std	Y+8, r23	; 0x08
    1596:	6f 83       	std	Y+7, r22	; 0x07
	
	uint32_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1598:	24 e0       	ldi	r18, 0x04	; 4
    159a:	8f 81       	ldd	r24, Y+7	; 0x07
    159c:	98 85       	ldd	r25, Y+8	; 0x08
    159e:	42 2f       	mov	r20, r18
    15a0:	9e 01       	movw	r18, r28
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	b9 01       	movw	r22, r18
    15a8:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12internalReadjPhh>
	return value;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	ab 81       	ldd	r26, Y+3	; 0x03
    15b2:	bc 81       	ldd	r27, Y+4	; 0x04
}
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	28 96       	adiw	r28, 0x08	; 8
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <_ZN12RmMemManager18getULongFromMemoryEj>:

uint64_t RmMemManager::getULongFromMemory(uint16_t address) {
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2c 97       	sbiw	r28, 0x0c	; 12
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	9a 87       	std	Y+10, r25	; 0x0a
    15f0:	89 87       	std	Y+9, r24	; 0x09
    15f2:	7c 87       	std	Y+12, r23	; 0x0c
    15f4:	6b 87       	std	Y+11, r22	; 0x0b
	
	uint64_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    15f6:	28 e0       	ldi	r18, 0x08	; 8
    15f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    15fc:	42 2f       	mov	r20, r18
    15fe:	9e 01       	movw	r18, r28
    1600:	2f 5f       	subi	r18, 0xFF	; 255
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12internalReadjPhh>
	return value;
    160a:	29 81       	ldd	r18, Y+1	; 0x01
    160c:	3a 81       	ldd	r19, Y+2	; 0x02
    160e:	4b 81       	ldd	r20, Y+3	; 0x03
    1610:	5c 81       	ldd	r21, Y+4	; 0x04
    1612:	6d 81       	ldd	r22, Y+5	; 0x05
    1614:	7e 81       	ldd	r23, Y+6	; 0x06
    1616:	8f 81       	ldd	r24, Y+7	; 0x07
    1618:	98 85       	ldd	r25, Y+8	; 0x08
    161a:	a2 2e       	mov	r10, r18
    161c:	b3 2e       	mov	r11, r19
    161e:	c4 2e       	mov	r12, r20
    1620:	d5 2e       	mov	r13, r21
    1622:	e6 2e       	mov	r14, r22
    1624:	f7 2e       	mov	r15, r23
    1626:	08 2f       	mov	r16, r24
    1628:	19 2f       	mov	r17, r25
}
    162a:	2a 2d       	mov	r18, r10
    162c:	3b 2d       	mov	r19, r11
    162e:	4c 2d       	mov	r20, r12
    1630:	5d 2d       	mov	r21, r13
    1632:	6e 2d       	mov	r22, r14
    1634:	7f 2d       	mov	r23, r15
    1636:	80 2f       	mov	r24, r16
    1638:	91 2f       	mov	r25, r17
    163a:	2c 96       	adiw	r28, 0x0c	; 12
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
    1656:	bf 90       	pop	r11
    1658:	af 90       	pop	r10
    165a:	08 95       	ret

0000165c <_ZN12RmMemManager16setUCharToMemoryEjh>:

void RmMemManager::setUCharToMemory(uint16_t address, uint8_t value) {
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	00 d0       	rcall	.+0      	; 0x1662 <_ZN12RmMemManager16setUCharToMemoryEjh+0x6>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <_ZN12RmMemManager16setUCharToMemoryEjh+0x8>
    1664:	1f 92       	push	r1
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	7c 83       	std	Y+4, r23	; 0x04
    1670:	6b 83       	std	Y+3, r22	; 0x03
    1672:	4d 83       	std	Y+5, r20	; 0x05
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	9e 01       	movw	r18, r28
    1678:	2b 5f       	subi	r18, 0xFB	; 251
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	b9 01       	movw	r22, r18
    1682:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z13internalWritejPhh>
}
    1686:	00 00       	nop
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <_ZN12RmMemManager17setUShortToMemoryEjj>:

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value) {
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	00 d0       	rcall	.+0      	; 0x169e <_ZN12RmMemManager17setUShortToMemoryEjj+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <_ZN12RmMemManager17setUShortToMemoryEjj+0x8>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <_ZN12RmMemManager17setUShortToMemoryEjj+0xa>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	7c 83       	std	Y+4, r23	; 0x04
    16ac:	6b 83       	std	Y+3, r22	; 0x03
    16ae:	5e 83       	std	Y+6, r21	; 0x06
    16b0:	4d 83       	std	Y+5, r20	; 0x05
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    16b2:	42 e0       	ldi	r20, 0x02	; 2
    16b4:	9e 01       	movw	r18, r28
    16b6:	2b 5f       	subi	r18, 0xFB	; 251
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	b9 01       	movw	r22, r18
    16c0:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z13internalWritejPhh>
}
    16c4:	00 00       	nop
    16c6:	26 96       	adiw	r28, 0x06	; 6
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <_ZN12RmMemManager15setUIntToMemoryEjm>:

void RmMemManager::setUIntToMemory(uint16_t address, uint32_t value) {
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	28 97       	sbiw	r28, 0x08	; 8
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	7c 83       	std	Y+4, r23	; 0x04
    16f2:	6b 83       	std	Y+3, r22	; 0x03
    16f4:	2d 83       	std	Y+5, r18	; 0x05
    16f6:	3e 83       	std	Y+6, r19	; 0x06
    16f8:	4f 83       	std	Y+7, r20	; 0x07
    16fa:	58 87       	std	Y+8, r21	; 0x08
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    16fc:	44 e0       	ldi	r20, 0x04	; 4
    16fe:	9e 01       	movw	r18, r28
    1700:	2b 5f       	subi	r18, 0xFB	; 251
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z13internalWritejPhh>
}
    170e:	00 00       	nop
    1710:	28 96       	adiw	r28, 0x08	; 8
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <_ZN12RmMemManager16setULongToMemoryEjy>:

void RmMemManager::setULongToMemory(uint16_t address, uint64_t value) {
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	2c 97       	sbiw	r28, 0x0c	; 12
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	7c 83       	std	Y+4, r23	; 0x04
    1744:	6b 83       	std	Y+3, r22	; 0x03
    1746:	ed 82       	std	Y+5, r14	; 0x05
    1748:	fe 82       	std	Y+6, r15	; 0x06
    174a:	0f 83       	std	Y+7, r16	; 0x07
    174c:	18 87       	std	Y+8, r17	; 0x08
    174e:	29 87       	std	Y+9, r18	; 0x09
    1750:	3a 87       	std	Y+10, r19	; 0x0a
    1752:	4b 87       	std	Y+11, r20	; 0x0b
    1754:	5c 87       	std	Y+12, r21	; 0x0c
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1756:	48 e0       	ldi	r20, 0x08	; 8
    1758:	9e 01       	movw	r18, r28
    175a:	2b 5f       	subi	r18, 0xFB	; 251
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	b9 01       	movw	r22, r18
    1764:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z13internalWritejPhh>
}
    1768:	00 00       	nop
    176a:	2c 96       	adiw	r28, 0x0c	; 12
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	08 95       	ret

00001784 <_ZN12RmMemManager16initialiseModuleEh>:

void RmMemManager::initialiseModule(uint8_t moduleId) {
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	a0 97       	sbiw	r28, 0x20	; 32
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	9f 8f       	std	Y+31, r25	; 0x1f
    179a:	8e 8f       	std	Y+30, r24	; 0x1e
    179c:	68 a3       	std	Y+32, r22	; 0x20

	RM_LOG2(F("Init Module"), moduleId);
    179e:	8e e4       	ldi	r24, 0x4E	; 78
    17a0:	93 e0       	ldi	r25, 0x03	; 3
    17a2:	bc 01       	movw	r22, r24
    17a4:	8b e5       	ldi	r24, 0x5B	; 91
    17a6:	97 e0       	ldi	r25, 0x07	; 7
    17a8:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    17ac:	6f e9       	ldi	r22, 0x9F	; 159
    17ae:	71 e0       	ldi	r23, 0x01	; 1
    17b0:	8b e5       	ldi	r24, 0x5B	; 91
    17b2:	97 e0       	ldi	r25, 0x07	; 7
    17b4:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    17b8:	4a e0       	ldi	r20, 0x0A	; 10
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	68 a1       	ldd	r22, Y+32	; 0x20
    17be:	8b e5       	ldi	r24, 0x5B	; 91
    17c0:	97 e0       	ldi	r25, 0x07	; 7
    17c2:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <_ZN5Print7printlnEhi>

	ModuleMeta meta;
	meta.moduleId = moduleId;
    17c6:	88 a1       	ldd	r24, Y+32	; 0x20
    17c8:	89 83       	std	Y+1, r24	; 0x01
	meta.bootCount = 0;
    17ca:	1b 82       	std	Y+3, r1	; 0x03
    17cc:	1a 82       	std	Y+2, r1	; 0x02
	meta.eepromTestArea = 0;
    17ce:	1e 82       	std	Y+6, r1	; 0x06
    17d0:	1f 82       	std	Y+7, r1	; 0x07
    17d2:	18 86       	std	Y+8, r1	; 0x08
    17d4:	19 86       	std	Y+9, r1	; 0x09
    17d6:	1a 86       	std	Y+10, r1	; 0x0a
    17d8:	1b 86       	std	Y+11, r1	; 0x0b
    17da:	1c 86       	std	Y+12, r1	; 0x0c
    17dc:	1d 86       	std	Y+13, r1	; 0x0d
	meta.nextFreeWriteAddr = MEMLOC_START + sizeof(ModuleMeta);
    17de:	8d e1       	ldi	r24, 0x1D	; 29
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9d 83       	std	Y+5, r25	; 0x05
    17e4:	8c 83       	std	Y+4, r24	; 0x04
	memset(meta.spareBuffer, 0, sizeof(meta.spareBuffer));
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 96       	adiw	r24, 0x0e	; 14
    17ea:	40 e1       	ldi	r20, 0x10	; 16
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	0e 94 4b 30 	call	0x6096	; 0x6096 <memset>
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    17f6:	8d e1       	ldi	r24, 0x1D	; 29
    17f8:	48 2f       	mov	r20, r24
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	bc 01       	movw	r22, r24
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z13internalWritejPhh>
}
    1808:	00 00       	nop
    180a:	a0 96       	adiw	r28, 0x20	; 32
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <_ZN12RmMemManager18incrementBootCountEv>:

uint16_t RmMemManager::incrementBootCount() {
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	00 d0       	rcall	.+0      	; 0x1822 <_ZN12RmMemManager18incrementBootCountEv+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <_ZN12RmMemManager18incrementBootCountEv+0x8>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <_ZN12RmMemManager18incrementBootCountEv+0xa>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
	
	//TODO: Somehow verify Wire is working?
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
	uint16_t currVal = getUShortFromMemory(addr);
    1836:	29 81       	ldd	r18, Y+1	; 0x01
    1838:	3a 81       	ldd	r19, Y+2	; 0x02
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	b9 01       	movw	r22, r18
    1840:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN12RmMemManager19getUShortFromMemoryEj>
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
	++currVal;
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
	setUShortToMemory(addr, currVal);
    1852:	4b 81       	ldd	r20, Y+3	; 0x03
    1854:	5c 81       	ldd	r21, Y+4	; 0x04
    1856:	29 81       	ldd	r18, Y+1	; 0x01
    1858:	3a 81       	ldd	r19, Y+2	; 0x02
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	b9 01       	movw	r22, r18
    1860:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN12RmMemManager17setUShortToMemoryEjj>
	return currVal;
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1868:	26 96       	adiw	r28, 0x06	; 6
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	08 95       	ret

0000187a <_ZN12RmMemManager17verifyBasicEepRomEv>:

uint16_t RmMemManager::verifyBasicEepRom() {
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	6e 97       	sbiw	r28, 0x1e	; 30
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	9e 8f       	std	Y+30, r25	; 0x1e
    18a0:	8d 8f       	std	Y+29, r24	; 0x1d
	
	//TODO: Verify of spill over 64-bit boundary what to do
	//TODO: Roll-over verification
	//TODO: Don't have strings of messages, return code which translate in a #if NOT_ENCODED_ON_DEVICE block
	
	RM_LOG(F("Basic EEPROM Test"));
    18a2:	8a e5       	ldi	r24, 0x5A	; 90
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	bc 01       	movw	r22, r24
    18a8:	8b e5       	ldi	r24, 0x5B	; 91
    18aa:	97 e0       	ldi	r25, 0x07	; 7
    18ac:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
	
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
    18b0:	85 e0       	ldi	r24, 0x05	; 5
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9d 83       	std	Y+5, r25	; 0x05
    18b6:	8c 83       	std	Y+4, r24	; 0x04
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++) {
    18b8:	1b 82       	std	Y+3, r1	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	8e 31       	cpi	r24, 0x1E	; 30
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <_ZN12RmMemManager17verifyBasicEepRomEv+0x48>
    18c0:	2d c1       	rjmp	.+602    	; 0x1b1c <_ZN12RmMemManager17verifyBasicEepRomEv+0x2a2>
		
		//No intersection of values so we'll know straight away if wrong bits picked
		this->setULongToMemory(MEM_TEST_LOC, 0xA946F7D8C941F9A8);
    18c2:	6c 81       	ldd	r22, Y+4	; 0x04
    18c4:	7d 81       	ldd	r23, Y+5	; 0x05
    18c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ca:	0f 2e       	mov	r0, r31
    18cc:	f8 ea       	ldi	r31, 0xA8	; 168
    18ce:	ef 2e       	mov	r14, r31
    18d0:	f0 2d       	mov	r31, r0
    18d2:	0f 2e       	mov	r0, r31
    18d4:	f9 ef       	ldi	r31, 0xF9	; 249
    18d6:	ff 2e       	mov	r15, r31
    18d8:	f0 2d       	mov	r31, r0
    18da:	01 e4       	ldi	r16, 0x41	; 65
    18dc:	19 ec       	ldi	r17, 0xC9	; 201
    18de:	28 ed       	ldi	r18, 0xD8	; 216
    18e0:	37 ef       	ldi	r19, 0xF7	; 247
    18e2:	46 e4       	ldi	r20, 0x46	; 70
    18e4:	59 ea       	ldi	r21, 0xA9	; 169
    18e6:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN12RmMemManager16setULongToMemoryEjy>
		uint64_t val8 = this->getULongFromMemory(MEM_TEST_LOC);
    18ea:	2c 81       	ldd	r18, Y+4	; 0x04
    18ec:	3d 81       	ldd	r19, Y+5	; 0x05
    18ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f2:	b9 01       	movw	r22, r18
    18f4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN12RmMemManager18getULongFromMemoryEj>
    18f8:	a2 2e       	mov	r10, r18
    18fa:	b3 2e       	mov	r11, r19
    18fc:	c4 2e       	mov	r12, r20
    18fe:	d5 2e       	mov	r13, r21
    1900:	e6 2e       	mov	r14, r22
    1902:	f7 2e       	mov	r15, r23
    1904:	08 2f       	mov	r16, r24
    1906:	19 2f       	mov	r17, r25
    1908:	ae 82       	std	Y+6, r10	; 0x06
    190a:	bf 82       	std	Y+7, r11	; 0x07
    190c:	c8 86       	std	Y+8, r12	; 0x08
    190e:	d9 86       	std	Y+9, r13	; 0x09
    1910:	ea 86       	std	Y+10, r14	; 0x0a
    1912:	fb 86       	std	Y+11, r15	; 0x0b
    1914:	0c 87       	std	Y+12, r16	; 0x0c
    1916:	1d 87       	std	Y+13, r17	; 0x0d
		if (val8 != 0xA946F7D8C941F9A8) {
    1918:	ae 80       	ldd	r10, Y+6	; 0x06
    191a:	bf 80       	ldd	r11, Y+7	; 0x07
    191c:	c8 84       	ldd	r12, Y+8	; 0x08
    191e:	d9 84       	ldd	r13, Y+9	; 0x09
    1920:	ea 84       	ldd	r14, Y+10	; 0x0a
    1922:	fb 84       	ldd	r15, Y+11	; 0x0b
    1924:	0c 85       	ldd	r16, Y+12	; 0x0c
    1926:	1d 85       	ldd	r17, Y+13	; 0x0d
    1928:	2a 2d       	mov	r18, r10
    192a:	3b 2d       	mov	r19, r11
    192c:	4c 2d       	mov	r20, r12
    192e:	5d 2d       	mov	r21, r13
    1930:	6e 2d       	mov	r22, r14
    1932:	7f 2d       	mov	r23, r15
    1934:	80 2f       	mov	r24, r16
    1936:	91 2f       	mov	r25, r17
    1938:	28 3a       	cpi	r18, 0xA8	; 168
    193a:	39 4f       	sbci	r19, 0xF9	; 249
    193c:	41 44       	sbci	r20, 0x41	; 65
    193e:	59 4c       	sbci	r21, 0xC9	; 201
    1940:	68 4d       	sbci	r22, 0xD8	; 216
    1942:	77 4f       	sbci	r23, 0xF7	; 247
    1944:	86 44       	sbci	r24, 0x46	; 70
    1946:	99 4a       	sbci	r25, 0xA9	; 169
    1948:	61 f0       	breq	.+24     	; 0x1962 <_ZN12RmMemManager17verifyBasicEepRomEv+0xe8>
			RM_LOGLN(F("FAILED LONG"));
    194a:	8c e6       	ldi	r24, 0x6C	; 108
    194c:	93 e0       	ldi	r25, 0x03	; 3
    194e:	bc 01       	movw	r22, r24
    1950:	8b e5       	ldi	r24, 0x5B	; 91
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUIntToMemory(MEM_TEST_LOC, 0xC911F948);
    1962:	6c 81       	ldd	r22, Y+4	; 0x04
    1964:	7d 81       	ldd	r23, Y+5	; 0x05
    1966:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1968:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196a:	28 e4       	ldi	r18, 0x48	; 72
    196c:	39 ef       	ldi	r19, 0xF9	; 249
    196e:	41 e1       	ldi	r20, 0x11	; 17
    1970:	59 ec       	ldi	r21, 0xC9	; 201
    1972:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <_ZN12RmMemManager15setUIntToMemoryEjm>
		uint32_t val4 = this->getUIntFromMemory(MEM_TEST_LOC);
    1976:	2c 81       	ldd	r18, Y+4	; 0x04
    1978:	3d 81       	ldd	r19, Y+5	; 0x05
    197a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    197c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    197e:	b9 01       	movw	r22, r18
    1980:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN12RmMemManager17getUIntFromMemoryEj>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8e 87       	std	Y+14, r24	; 0x0e
    198a:	9f 87       	std	Y+15, r25	; 0x0f
    198c:	a8 8b       	std	Y+16, r26	; 0x10
    198e:	b9 8b       	std	Y+17, r27	; 0x11
		if (val4 != 0xC911F948) {
    1990:	8e 85       	ldd	r24, Y+14	; 0x0e
    1992:	9f 85       	ldd	r25, Y+15	; 0x0f
    1994:	a8 89       	ldd	r26, Y+16	; 0x10
    1996:	b9 89       	ldd	r27, Y+17	; 0x11
    1998:	88 34       	cpi	r24, 0x48	; 72
    199a:	99 4f       	sbci	r25, 0xF9	; 249
    199c:	a1 41       	sbci	r26, 0x11	; 17
    199e:	b9 4c       	sbci	r27, 0xC9	; 201
    19a0:	61 f0       	breq	.+24     	; 0x19ba <_ZN12RmMemManager17verifyBasicEepRomEv+0x140>
			RM_LOGLN(F("FAILED INT"));
    19a2:	88 e7       	ldi	r24, 0x78	; 120
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	bc 01       	movw	r22, r24
    19a8:	8b e5       	ldi	r24, 0x5B	; 91
    19aa:	97 e0       	ldi	r25, 0x07	; 7
    19ac:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUShortToMemory(MEM_TEST_LOC, 0x5C3A);
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c2:	4a e3       	ldi	r20, 0x3A	; 58
    19c4:	5c e5       	ldi	r21, 0x5C	; 92
    19c6:	b9 01       	movw	r22, r18
    19c8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN12RmMemManager17setUShortToMemoryEjj>
		uint16_t val2 = this->getUShortFromMemory(MEM_TEST_LOC);
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19d4:	b9 01       	movw	r22, r18
    19d6:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN12RmMemManager19getUShortFromMemoryEj>
    19da:	9b 8b       	std	Y+19, r25	; 0x13
    19dc:	8a 8b       	std	Y+18, r24	; 0x12
		if (val2 != 0x5C3A) {
    19de:	8a 89       	ldd	r24, Y+18	; 0x12
    19e0:	9b 89       	ldd	r25, Y+19	; 0x13
    19e2:	8a 33       	cpi	r24, 0x3A	; 58
    19e4:	9c 45       	sbci	r25, 0x5C	; 92
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <_ZN12RmMemManager17verifyBasicEepRomEv+0x186>
			RM_LOGLN(F("FAILED SHORT"));
    19e8:	83 e8       	ldi	r24, 0x83	; 131
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	bc 01       	movw	r22, r24
    19ee:	8b e5       	ldi	r24, 0x5B	; 91
    19f0:	97 e0       	ldi	r25, 0x07	; 7
    19f2:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUCharToMemory(MEM_TEST_LOC, 0xE1);
    1a00:	2c 81       	ldd	r18, Y+4	; 0x04
    1a02:	3d 81       	ldd	r19, Y+5	; 0x05
    1a04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a08:	41 ee       	ldi	r20, 0xE1	; 225
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	0e 94 2e 0b 	call	0x165c	; 0x165c <_ZN12RmMemManager16setUCharToMemoryEjh>
		uint8_t val1 = this->getUCharFromMemory(MEM_TEST_LOC);
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a18:	b9 01       	movw	r22, r18
    1a1a:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN12RmMemManager18getUCharFromMemoryEj>
    1a1e:	8c 8b       	std	Y+20, r24	; 0x14
		if (val1 != 0xE1) {
    1a20:	8c 89       	ldd	r24, Y+20	; 0x14
    1a22:	81 3e       	cpi	r24, 0xE1	; 225
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <_ZN12RmMemManager17verifyBasicEepRomEv+0x1c4>
			RM_LOGLN(F("FAILED CHAR"));
    1a26:	80 e9       	ldi	r24, 0x90	; 144
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	8b e5       	ldi	r24, 0x5B	; 91
    1a2e:	97 e0       	ldi	r25, 0x07	; 7
    1a30:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
		}
		
		RM_LOG(F("EEPROM Test: Long="));
    1a3e:	8c e9       	ldi	r24, 0x9C	; 156
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	bc 01       	movw	r22, r24
    1a44:	8b e5       	ldi	r24, 0x5B	; 91
    1a46:	97 e0       	ldi	r25, 0x07	; 7
    1a48:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLONG(val8, HEX);
    1a4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a50:	48 85       	ldd	r20, Y+8	; 0x08
    1a52:	59 85       	ldd	r21, Y+9	; 0x09
    1a54:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a56:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a5c:	00 e2       	ldi	r16, 0x20	; 32
    1a5e:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <__lshrdi3>
    1a62:	a2 2e       	mov	r10, r18
    1a64:	b3 2e       	mov	r11, r19
    1a66:	c4 2e       	mov	r12, r20
    1a68:	d5 2e       	mov	r13, r21
    1a6a:	e6 2e       	mov	r14, r22
    1a6c:	f7 2e       	mov	r15, r23
    1a6e:	08 2f       	mov	r16, r24
    1a70:	19 2f       	mov	r17, r25
    1a72:	ad 8a       	std	Y+21, r10	; 0x15
    1a74:	be 8a       	std	Y+22, r11	; 0x16
    1a76:	cf 8a       	std	Y+23, r12	; 0x17
    1a78:	d8 8e       	std	Y+24, r13	; 0x18
    1a7a:	e9 8e       	std	Y+25, r14	; 0x19
    1a7c:	fa 8e       	std	Y+26, r15	; 0x1a
    1a7e:	0b 8f       	std	Y+27, r16	; 0x1b
    1a80:	1c 8f       	std	Y+28, r17	; 0x1c
    1a82:	8d 89       	ldd	r24, Y+21	; 0x15
    1a84:	9e 89       	ldd	r25, Y+22	; 0x16
    1a86:	af 89       	ldd	r26, Y+23	; 0x17
    1a88:	b8 8d       	ldd	r27, Y+24	; 0x18
    1a8a:	20 e1       	ldi	r18, 0x10	; 16
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	ac 01       	movw	r20, r24
    1a90:	bd 01       	movw	r22, r26
    1a92:	8b e5       	ldi	r24, 0x5B	; 91
    1a94:	97 e0       	ldi	r25, 0x07	; 7
    1a96:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9e:	a8 85       	ldd	r26, Y+8	; 0x08
    1aa0:	b9 85       	ldd	r27, Y+9	; 0x09
    1aa2:	20 e1       	ldi	r18, 0x10	; 16
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	bd 01       	movw	r22, r26
    1aaa:	8b e5       	ldi	r24, 0x5B	; 91
    1aac:	97 e0       	ldi	r25, 0x07	; 7
    1aae:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>
		RM_LOG(F(", Int="));
    1ab2:	8f ea       	ldi	r24, 0xAF	; 175
    1ab4:	93 e0       	ldi	r25, 0x03	; 3
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	8b e5       	ldi	r24, 0x5B	; 91
    1aba:	97 e0       	ldi	r25, 0x07	; 7
    1abc:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val4, HEX);
    1ac0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac4:	a8 89       	ldd	r26, Y+16	; 0x10
    1ac6:	b9 89       	ldd	r27, Y+17	; 0x11
    1ac8:	20 e1       	ldi	r18, 0x10	; 16
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	ac 01       	movw	r20, r24
    1ace:	bd 01       	movw	r22, r26
    1ad0:	8b e5       	ldi	r24, 0x5B	; 91
    1ad2:	97 e0       	ldi	r25, 0x07	; 7
    1ad4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>
		RM_LOG(F(", Short="));
    1ad8:	86 eb       	ldi	r24, 0xB6	; 182
    1ada:	93 e0       	ldi	r25, 0x03	; 3
    1adc:	bc 01       	movw	r22, r24
    1ade:	8b e5       	ldi	r24, 0x5B	; 91
    1ae0:	97 e0       	ldi	r25, 0x07	; 7
    1ae2:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val2, HEX);
    1ae6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae8:	9b 89       	ldd	r25, Y+19	; 0x13
    1aea:	40 e1       	ldi	r20, 0x10	; 16
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	bc 01       	movw	r22, r24
    1af0:	8b e5       	ldi	r24, 0x5B	; 91
    1af2:	97 e0       	ldi	r25, 0x07	; 7
    1af4:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN5Print5printEji>
		RM_LOG(F(", Char="));
    1af8:	8f eb       	ldi	r24, 0xBF	; 191
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	bc 01       	movw	r22, r24
    1afe:	8b e5       	ldi	r24, 0x5B	; 91
    1b00:	97 e0       	ldi	r25, 0x07	; 7
    1b02:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLNFMT(val1, HEX);
    1b06:	40 e1       	ldi	r20, 0x10	; 16
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	6c 89       	ldd	r22, Y+20	; 0x14
    1b0c:	8b e5       	ldi	r24, 0x5B	; 91
    1b0e:	97 e0       	ldi	r25, 0x07	; 7
    1b10:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <_ZN5Print7printlnEhi>
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++) {
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	cf ce       	rjmp	.-610    	; 0x18ba <_ZN12RmMemManager17verifyBasicEepRomEv+0x40>
		RM_LOGFMT(val2, HEX);
		RM_LOG(F(", Char="));
		RM_LOGLNFMT(val1, HEX);
	}
	
	return numFailures;
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b20:	6e 96       	adiw	r28, 0x1e	; 30
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	cf 90       	pop	r12
    1b3c:	bf 90       	pop	r11
    1b3e:	af 90       	pop	r10
    1b40:	08 95       	ret

00001b42 <_ZN12RmMemManager23runExtendedShow100BytesEv>:

void RmMemManager::runExtendedShow100Bytes() {
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <_ZN12RmMemManager23runExtendedShow100BytesEv+0x6>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	for(uint8_t i=0 ; i<sizeof(raw100)/sizeof(uint8_t) ; i++){
		RM_LOGLN(raw100[i]);
	}
	
#else
	RM_LOG(F("*** FAIL SHOW 100 ***")); //Sync Broken - inclusion of code should be sync'd with flag
    1b50:	87 ec       	ldi	r24, 0xC7	; 199
    1b52:	93 e0       	ldi	r25, 0x03	; 3
    1b54:	bc 01       	movw	r22, r24
    1b56:	8b e5       	ldi	r24, 0x5B	; 91
    1b58:	97 e0       	ldi	r25, 0x07	; 7
    1b5a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
#endif
}
    1b5e:	00 00       	nop
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <_ZN12RmMemManager21runExtendedDumpOutputEv>:

void RmMemManager::runExtendedDumpOutput() {
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <_ZN12RmMemManager21runExtendedDumpOutputEv+0x6>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
	//RM_LOG(session.gpsInfo.heading);
	//RM_LOG(F(", Gps-Speed: "));
	//RM_LOGLN(session.gpsInfo.speed_kph);
	//}
#else
	RM_LOG(F("*** FAIL PRINT ***")); //Sync Broken - inclusion of code should be sync'd with flag
    1b78:	8d ed       	ldi	r24, 0xDD	; 221
    1b7a:	93 e0       	ldi	r25, 0x03	; 3
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	8b e5       	ldi	r24, 0x5B	; 91
    1b80:	97 e0       	ldi	r25, 0x07	; 7
    1b82:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
#endif
}
    1b86:	00 00       	nop
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	08 95       	ret

00001b92 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo) {
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	28 97       	sbiw	r28, 0x08	; 8
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	7c 83       	std	Y+4, r23	; 0x04
    1bac:	6b 83       	std	Y+3, r22	; 0x03
    1bae:	5e 83       	std	Y+6, r21	; 0x06
    1bb0:	4d 83       	std	Y+5, r20	; 0x05
    1bb2:	38 87       	std	Y+8, r19	; 0x08
    1bb4:	2f 83       	std	Y+7, r18	; 0x07

	return 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e0       	ldi	r26, 0x00	; 0
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
		//}
	//
	//
	//*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
	//return numOfLastReadings;
}
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	28 96       	adiw	r28, 0x08	; 8
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <_ZN12RmMemManager12markDataSentEy>:

void RmMemManager::markDataSent(uint64_t sentUpTo) {
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	2a 97       	sbiw	r28, 0x0a	; 10
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	0b 83       	std	Y+3, r16	; 0x03
    1bf2:	1c 83       	std	Y+4, r17	; 0x04
    1bf4:	2d 83       	std	Y+5, r18	; 0x05
    1bf6:	3e 83       	std	Y+6, r19	; 0x06
    1bf8:	4f 83       	std	Y+7, r20	; 0x07
    1bfa:	58 87       	std	Y+8, r21	; 0x08
    1bfc:	69 87       	std	Y+9, r22	; 0x09
    1bfe:	7a 87       	std	Y+10, r23	; 0x0a

	//this->setULongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
}
    1c00:	00 00       	nop
    1c02:	2a 96       	adiw	r28, 0x0a	; 10
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:

void RmMemManager::appendDailyEntry(DailyCycleData* r) {
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x8>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	7c 83       	std	Y+4, r23	; 0x04
    1c2a:	6b 83       	std	Y+3, r22	; 0x03

	//TODO
}
    1c2c:	00 00       	nop
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <_Z27internalWriteEntryAtAddressP10SensorDatam>:

void internalWriteEntryAtAddress(SensorData* r, unsigned long address) {
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x8>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <_Z27internalWriteEntryAtAddressP10SensorDatam+0xa>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	4b 83       	std	Y+3, r20	; 0x03
    1c50:	5c 83       	std	Y+4, r21	; 0x04
    1c52:	6d 83       	std	Y+5, r22	; 0x05
    1c54:	7e 83       	std	Y+6, r23	; 0x06
	
	//byte* rPtr = (byte*)r;
//
	//for(int i=0;i<sizeof(SensorData);i++)
		//EEPROM.write(address+i, *(rPtr+i));
}
    1c56:	00 00       	nop
    1c58:	26 96       	adiw	r28, 0x06	; 6
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>:

void RmMemManager::replaceLastSensorEntry(SensorData* r) {
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x8>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	7c 83       	std	Y+4, r23	; 0x04
    1c7c:	6b 83       	std	Y+3, r22	; 0x03
	//volatile unsigned long entryCount = this->getULongFromMemory(MEMLOC_READING_ENTRY_COUNT);
	//volatile unsigned long lastEntryOffset = max(0,entryCount-1) * sizeof(SensorData);
	//volatile unsigned long lastEntryAddress = MEMADDR_READING_DATA_START + lastEntryOffset;
	//
	//internalWriteEntryAtAddress(r, lastEntryAddress);
}
    1c7e:	00 00       	nop
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:

void RmMemManager::appendSensorEntry(SensorData* r) {
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	2a 97       	sbiw	r28, 0x0a	; 10
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	8f 83       	std	Y+7, r24	; 0x07
    1ca6:	7a 87       	std	Y+10, r23	; 0x0a
    1ca8:	69 87       	std	Y+9, r22	; 0x09
	
	uint16_t freeMemAddress = MEMLOC_START + offsetof(ModuleMeta, nextFreeWriteAddr);
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
	
	uint16_t currFreeAddr = getUShortFromMemory(freeMemAddress);
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb8:	98 85       	ldd	r25, Y+8	; 0x08
    1cba:	b9 01       	movw	r22, r18
    1cbc:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN12RmMemManager19getUShortFromMemoryEj>
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
	
	RM_LOG2(F("Writing To Addr"), currFreeAddr);
    1cc4:	80 ef       	ldi	r24, 0xF0	; 240
    1cc6:	93 e0       	ldi	r25, 0x03	; 3
    1cc8:	bc 01       	movw	r22, r24
    1cca:	8b e5       	ldi	r24, 0x5B	; 91
    1ccc:	97 e0       	ldi	r25, 0x07	; 7
    1cce:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    1cd2:	6f e9       	ldi	r22, 0x9F	; 159
    1cd4:	71 e0       	ldi	r23, 0x01	; 1
    1cd6:	8b e5       	ldi	r24, 0x5B	; 91
    1cd8:	97 e0       	ldi	r25, 0x07	; 7
    1cda:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	4a e0       	ldi	r20, 0x0A	; 10
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	8b e5       	ldi	r24, 0x5B	; 91
    1cea:	97 e0       	ldi	r25, 0x07	; 7
    1cec:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN5Print7printlnEji>
	internalWrite(currFreeAddr, (uint8_t*)r, sizeof(SensorData));
    1cf0:	4a e0       	ldi	r20, 0x0A	; 10
    1cf2:	29 85       	ldd	r18, Y+9	; 0x09
    1cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z13internalWritejPhh>
	
	uint16_t nextFreeAddr = currFreeAddr + sizeof(SensorData);
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	0a 96       	adiw	r24, 0x0a	; 10
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
	RM_LOG2(F("Free Addr Now Is"), nextFreeAddr);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	94 e0       	ldi	r25, 0x04	; 4
    1d0e:	bc 01       	movw	r22, r24
    1d10:	8b e5       	ldi	r24, 0x5B	; 91
    1d12:	97 e0       	ldi	r25, 0x07	; 7
    1d14:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    1d18:	6f e9       	ldi	r22, 0x9F	; 159
    1d1a:	71 e0       	ldi	r23, 0x01	; 1
    1d1c:	8b e5       	ldi	r24, 0x5B	; 91
    1d1e:	97 e0       	ldi	r25, 0x07	; 7
    1d20:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	4a e0       	ldi	r20, 0x0A	; 10
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	8b e5       	ldi	r24, 0x5B	; 91
    1d30:	97 e0       	ldi	r25, 0x07	; 7
    1d32:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN5Print7printlnEji>
	
	setUShortToMemory(freeMemAddress, nextFreeAddr);
    1d36:	4d 81       	ldd	r20, Y+5	; 0x05
    1d38:	5e 81       	ldd	r21, Y+6	; 0x06
    1d3a:	29 81       	ldd	r18, Y+1	; 0x01
    1d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d40:	98 85       	ldd	r25, Y+8	; 0x08
    1d42:	b9 01       	movw	r22, r18
    1d44:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN12RmMemManager17setUShortToMemoryEjj>
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
    1d48:	00 00       	nop
    1d4a:	2a 96       	adiw	r28, 0x0a	; 10
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret

00001d5c <_ZN12RmMemManager5resetEv>:



/* LED mgmt - Not strictly memory related */

void RmMemManager::reset() {
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <_ZN12RmMemManager5resetEv+0x6>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
	
	_flashCallCount=0;
    1d6a:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <_flashCallCount>
	toggleLED(Bottom, All_Clear);
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    1d86:	00 00       	nop
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <_Z13internalFlashRbS_9LED_STATEb>:

/* Flashes for a single LED */
void internalFlash(
	boolean& greenPinVal, boolean& redPinVal,
	LED_STATE currLedState, boolean atSlowInterval
	) {
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <_Z13internalFlashRbS_9LED_STATEb+0x6>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <_Z13internalFlashRbS_9LED_STATEb+0x8>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <_Z13internalFlashRbS_9LED_STATEb+0xa>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	7c 83       	std	Y+4, r23	; 0x04
    1da6:	6b 83       	std	Y+3, r22	; 0x03
    1da8:	4d 83       	std	Y+5, r20	; 0x05
    1daa:	2e 83       	std	Y+6, r18	; 0x06

	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	80 32       	cpi	r24, 0x20	; 32
    1db0:	61 f4       	brne	.+24     	; 0x1dca <_Z13internalFlashRbS_9LED_STATEb+0x38>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	fc 01       	movw	r30, r24
    1db8:	90 81       	ld	r25, Z
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	29 2f       	mov	r18, r25
    1dbe:	28 27       	eor	r18, r24
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	20 83       	st	Z, r18
    1dc8:	19 c0       	rjmp	.+50     	; 0x1dfc <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Slow) {
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	80 34       	cpi	r24, 0x40	; 64
    1dce:	31 f4       	brne	.+12     	; 0x1ddc <_Z13internalFlashRbS_9LED_STATEb+0x4a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	20 83       	st	Z, r18
    1dda:	10 c0       	rjmp	.+32     	; 0x1dfc <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Solid) {
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	80 31       	cpi	r24, 0x10	; 16
    1de0:	31 f4       	brne	.+12     	; 0x1dee <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	21 e0       	ldi	r18, 0x01	; 1
    1de8:	fc 01       	movw	r30, r24
    1dea:	20 83       	st	Z, r18
    1dec:	07 c0       	rjmp	.+14     	; 0x1dfc <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == All_Clear) {
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	80 38       	cpi	r24, 0x80	; 128
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <_Z13internalFlashRbS_9LED_STATEb+0x6a>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	fc 01       	movw	r30, r24
    1dfa:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	61 f4       	brne	.+24     	; 0x1e1a <_Z13internalFlashRbS_9LED_STATEb+0x88>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	fc 01       	movw	r30, r24
    1e08:	90 81       	ld	r25, Z
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	29 2f       	mov	r18, r25
    1e0e:	28 27       	eor	r18, r24
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	fc 01       	movw	r30, r24
    1e16:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e18:	19 c0       	rjmp	.+50     	; 0x1e4c <_Z13internalFlashRbS_9LED_STATEb+0xba>
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	84 30       	cpi	r24, 0x04	; 4
    1e1e:	31 f4       	brne	.+12     	; 0x1e2c <_Z13internalFlashRbS_9LED_STATEb+0x9a>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	2e 81       	ldd	r18, Y+6	; 0x06
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e2a:	10 c0       	rjmp	.+32     	; 0x1e4c <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	31 f4       	brne	.+12     	; 0x1e3e <_Z13internalFlashRbS_9LED_STATEb+0xac>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e3c:	07 c0       	rjmp	.+14     	; 0x1e4c <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
	}
	else if (currLedState == All_Clear) {
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	80 38       	cpi	r24, 0x80	; 128
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	fc 01       	movw	r30, r24
    1e4a:	10 82       	st	Z, r1
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1e4c:	00 00       	nop
    1e4e:	26 96       	adiw	r28, 0x06	; 6
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <_ZN12RmMemManager8flashLEDEv>:


//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED() {
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <_ZN12RmMemManager8flashLEDEv+0x6>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01

	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
    1e6e:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <_flashCallCount>
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <_flashCallCount>
    1e78:	20 91 93 06 	lds	r18, 0x0693	; 0x800693 <_flashCallCount>
    1e7c:	8b ea       	ldi	r24, 0xAB	; 171
    1e7e:	28 9f       	mul	r18, r24
    1e80:	81 2d       	mov	r24, r1
    1e82:	11 24       	eor	r1, r1
    1e84:	98 2f       	mov	r25, r24
    1e86:	96 95       	lsr	r25
    1e88:	89 2f       	mov	r24, r25
    1e8a:	88 0f       	add	r24, r24
    1e8c:	89 0f       	add	r24, r25
    1e8e:	92 2f       	mov	r25, r18
    1e90:	98 1b       	sub	r25, r24
    1e92:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <_flashCallCount>

	//Flash Bottom LED	
	internalFlash(
    1e96:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <_flashCallCount>
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	99 23       	and	r25, r25
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <_ZN12RmMemManager8flashLEDEv+0x42>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1ea2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	49 2f       	mov	r20, r25
    1eaa:	60 e9       	ldi	r22, 0x90	; 144
    1eac:	76 e0       	ldi	r23, 0x06	; 6
    1eae:	8f e8       	ldi	r24, 0x8F	; 143
    1eb0:	96 e0       	ldi	r25, 0x06	; 6
    1eb2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1eb6:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ledBottomPinGreen>
    1eba:	68 2f       	mov	r22, r24
    1ebc:	89 e0       	ldi	r24, 0x09	; 9
    1ebe:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    1ec2:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ledBottomPinRed>
    1ec6:	68 2f       	mov	r22, r24
    1ec8:	88 e0       	ldi	r24, 0x08	; 8
    1eca:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    1ece:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <_flashCallCount>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	99 23       	and	r25, r25
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <_ZN12RmMemManager8flashLEDEv+0x7a>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    1eda:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_ledTopState>
    1ede:	28 2f       	mov	r18, r24
    1ee0:	49 2f       	mov	r20, r25
    1ee2:	61 e9       	ldi	r22, 0x91	; 145
    1ee4:	76 e0       	ldi	r23, 0x06	; 6
    1ee6:	82 e9       	ldi	r24, 0x92	; 146
    1ee8:	96 e0       	ldi	r25, 0x06	; 6
    1eea:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    1eee:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <_ledTopPinGreen>
    1ef2:	68 2f       	mov	r22, r24
    1ef4:	8b e0       	ldi	r24, 0x0B	; 11
    1ef6:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    1efa:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ledTopPinRed>
    1efe:	68 2f       	mov	r22, r24
    1f00:	8a e0       	ldi	r24, 0x0A	; 10
    1f02:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
}
    1f06:	00 00       	nop
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state) {
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x8>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	6b 83       	std	Y+3, r22	; 0x03
    1f24:	4c 83       	std	Y+4, r20	; 0x04

	if (led_num == Bottom)
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x22>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		_ledTopState = state;

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state) {

	if (led_num == Bottom)
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
	else if (led_num == Top)
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 23       	and	r24, r24
    1f38:	19 f4       	brne	.+6      	; 0x1f40 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
		_ledTopState = state;
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ledTopState>

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1f40:	00 00       	nop
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	08 95       	ret

00001f50 <_ZN13SensorManagerC1Eb>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"
#include "SensorManager.h"

SensorManager::SensorManager(boolean isMock) {
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <_ZN13SensorManagerC1Eb+0x6>
    1f56:	1f 92       	push	r1
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	9a 81       	ldd	r25, Y+2	; 0x02
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	fc 01       	movw	r30, r24
    1f6a:	20 83       	st	Z, r18
}
    1f6c:	00 00       	nop
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <_ZN13SensorManager7readVccEv>:

float SensorManager::readVcc() {
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <_ZN13SensorManager7readVccEv+0x6>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <_ZN13SensorManager7readVccEv+0x8>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <_ZN13SensorManager7readVccEv+0xa>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
	long result;
	// Read 1.1V reference against AVcc - TODO: does this even work ?!
	ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1f8c:	8c e7       	ldi	r24, 0x7C	; 124
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	2e e4       	ldi	r18, 0x4E	; 78
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
	delay(2); // Wait for Vref to settle
    1f96:	62 e0       	ldi	r22, 0x02	; 2
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
	ADCSRA |= _BV(ADSC); // Convert
    1fa2:	8a e7       	ldi	r24, 0x7A	; 122
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	2a e7       	ldi	r18, 0x7A	; 122
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	f9 01       	movw	r30, r18
    1fac:	20 81       	ld	r18, Z
    1fae:	20 64       	ori	r18, 0x40	; 64
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	20 83       	st	Z, r18
	while (bit_is_set(ADCSRA,ADSC));
    1fb4:	8a e7       	ldi	r24, 0x7A	; 122
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	fc 01       	movw	r30, r24
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	80 74       	andi	r24, 0x40	; 64
    1fc2:	99 27       	eor	r25, r25
    1fc4:	21 e0       	ldi	r18, 0x01	; 1
    1fc6:	89 2b       	or	r24, r25
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_ZN13SensorManager7readVccEv+0x52>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	22 23       	and	r18, r18
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <_ZN13SensorManager7readVccEv+0x58>
    1fd0:	f1 cf       	rjmp	.-30     	; 0x1fb4 <_ZN13SensorManager7readVccEv+0x3a>
	result = ADCL;
    1fd2:	88 e7       	ldi	r24, 0x78	; 120
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	ab 83       	std	Y+3, r26	; 0x03
    1fe8:	bc 83       	std	Y+4, r27	; 0x04
	result |= ADCH<<8;
    1fea:	89 e7       	ldi	r24, 0x79	; 121
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	fc 01       	movw	r30, r24
    1ff0:	80 81       	ld	r24, Z
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	88 27       	eor	r24, r24
    1ffa:	09 2e       	mov	r0, r25
    1ffc:	00 0c       	add	r0, r0
    1ffe:	aa 0b       	sbc	r26, r26
    2000:	bb 0b       	sbc	r27, r27
    2002:	29 81       	ldd	r18, Y+1	; 0x01
    2004:	3a 81       	ldd	r19, Y+2	; 0x02
    2006:	4b 81       	ldd	r20, Y+3	; 0x03
    2008:	5c 81       	ldd	r21, Y+4	; 0x04
    200a:	82 2b       	or	r24, r18
    200c:	93 2b       	or	r25, r19
    200e:	a4 2b       	or	r26, r20
    2010:	b5 2b       	or	r27, r21
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	ab 83       	std	Y+3, r26	; 0x03
    2018:	bc 83       	std	Y+4, r27	; 0x04
	result = 1125300L / result; // Back-calculate AVcc in mV
    201a:	84 eb       	ldi	r24, 0xB4	; 180
    201c:	9b e2       	ldi	r25, 0x2B	; 43
    201e:	a1 e1       	ldi	r26, 0x11	; 17
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	29 81       	ldd	r18, Y+1	; 0x01
    2024:	3a 81       	ldd	r19, Y+2	; 0x02
    2026:	4b 81       	ldd	r20, Y+3	; 0x03
    2028:	5c 81       	ldd	r21, Y+4	; 0x04
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__divmodsi4>
    2032:	da 01       	movw	r26, r20
    2034:	c9 01       	movw	r24, r18
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	ab 83       	std	Y+3, r26	; 0x03
    203c:	bc 83       	std	Y+4, r27	; 0x04
	return result / 1000;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	ab 81       	ldd	r26, Y+3	; 0x03
    2044:	bc 81       	ldd	r27, Y+4	; 0x04
    2046:	28 ee       	ldi	r18, 0xE8	; 232
    2048:	33 e0       	ldi	r19, 0x03	; 3
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__divmodsi4>
    2056:	da 01       	movw	r26, r20
    2058:	c9 01       	movw	r24, r18
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__floatsisf>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
}
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	26 96       	adiw	r28, 0x06	; 6
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	08 95       	ret

0000207c <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	00 d0       	rcall	.+0      	; 0x2082 <_ZN13SensorManager16takeSampleAnalogEh+0x6>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <_ZN13SensorManager16takeSampleAnalogEh+0x8>
    2084:	1f 92       	push	r1
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	9c 83       	std	Y+4, r25	; 0x04
    208c:	8b 83       	std	Y+3, r24	; 0x03
    208e:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	80 81       	ld	r24, Z
    2098:	88 23       	and	r24, r24
    209a:	19 f0       	breq	.+6      	; 0x20a2 <_ZN13SensorManager16takeSampleAnalogEh+0x26>
		return 5;
    209c:	85 e0       	ldi	r24, 0x05	; 5
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	07 c0       	rjmp	.+14     	; 0x20b0 <_ZN13SensorManager16takeSampleAnalogEh+0x34>
	
	uint16_t batt = analogRead(pinNo);
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <analogRead>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
	//TODO: Look into !
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	08 95       	ret

000020c0 <_Z11getMockDataP10SensorData>:

uint8_t __mockDataCounter;
void getMockData(SensorData* ret) {
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <_Z11getMockDataP10SensorData+0x6>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    20ce:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <__mockDataCounter>
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <__mockDataCounter>
	
	ret->battVoltage = __mockDataCounter;
    20d8:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <__mockDataCounter>
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	fc 01       	movw	r30, r24
    20e6:	32 83       	std	Z+2, r19	; 0x02
    20e8:	21 83       	std	Z+1, r18	; 0x01
	ret->pVVoltage = __mockDataCounter*10;
    20ea:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <__mockDataCounter>
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	9c 01       	movw	r18, r24
    20f8:	22 0f       	add	r18, r18
    20fa:	33 1f       	adc	r19, r19
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	9c 01       	movw	r18, r24
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	fc 01       	movw	r30, r24
    210c:	36 83       	std	Z+6, r19	; 0x06
    210e:	25 83       	std	Z+5, r18	; 0x05
	ret->current = __mockDataCounter%7;
    2110:	20 91 94 06 	lds	r18, 0x0694	; 0x800694 <__mockDataCounter>
    2114:	85 e2       	ldi	r24, 0x25	; 37
    2116:	28 9f       	mul	r18, r24
    2118:	81 2d       	mov	r24, r1
    211a:	11 24       	eor	r1, r1
    211c:	92 2f       	mov	r25, r18
    211e:	98 1b       	sub	r25, r24
    2120:	96 95       	lsr	r25
    2122:	89 0f       	add	r24, r25
    2124:	98 2f       	mov	r25, r24
    2126:	96 95       	lsr	r25
    2128:	96 95       	lsr	r25
    212a:	89 2f       	mov	r24, r25
    212c:	88 0f       	add	r24, r24
    212e:	88 0f       	add	r24, r24
    2130:	88 0f       	add	r24, r24
    2132:	89 1b       	sub	r24, r25
    2134:	92 2f       	mov	r25, r18
    2136:	98 1b       	sub	r25, r24
    2138:	29 2f       	mov	r18, r25
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	fc 01       	movw	r30, r24
    2142:	34 83       	std	Z+4, r19	; 0x04
    2144:	23 83       	std	Z+3, r18	; 0x03
	ret->temperature = __mockDataCounter*100;
    2146:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <__mockDataCounter>
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	44 e6       	ldi	r20, 0x64	; 100
    2150:	48 9f       	mul	r20, r24
    2152:	90 01       	movw	r18, r0
    2154:	49 9f       	mul	r20, r25
    2156:	30 0d       	add	r19, r0
    2158:	11 24       	eor	r1, r1
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	fc 01       	movw	r30, r24
    2160:	30 87       	std	Z+8, r19	; 0x08
    2162:	27 83       	std	Z+7, r18	; 0x07
	
	//return ret;
}
    2164:	00 00       	nop
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <_ZN13SensorManager8readDataEP10SensorData>:

void SensorManager::readData(SensorData* ret) {
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	2c 97       	sbiw	r28, 0x0c	; 12
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	9a 87       	std	Y+10, r25	; 0x0a
    2186:	89 87       	std	Y+9, r24	; 0x09
    2188:	7c 87       	std	Y+12, r23	; 0x0c
    218a:	6b 87       	std	Y+11, r22	; 0x0b
	
	RM_LOGLN(F("Reading sensors..."));
    218c:	81 e1       	ldi	r24, 0x11	; 17
    218e:	94 e0       	ldi	r25, 0x04	; 4
    2190:	bc 01       	movw	r22, r24
    2192:	8b e5       	ldi	r24, 0x5B	; 91
    2194:	97 e0       	ldi	r25, 0x07	; 7
    2196:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (_isMock) {
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	fc 01       	movw	r30, r24
    21a0:	80 81       	ld	r24, Z
    21a2:	88 23       	and	r24, r24
    21a4:	29 f0       	breq	.+10     	; 0x21b0 <_ZN13SensorManager8readDataEP10SensorData+0x40>
		getMockData(ret);
    21a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    21aa:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_Z11getMockDataP10SensorData>
    21ae:	38 c0       	rjmp	.+112    	; 0x2220 <_ZN13SensorManager8readDataEP10SensorData+0xb0>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	6e e0       	ldi	r22, 0x0E	; 14
    21b6:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN13SensorManager16takeSampleAnalogEh>
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	6f e0       	ldi	r22, 0x0F	; 15
    21c4:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN13SensorManager16takeSampleAnalogEh>
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	61 e1       	ldi	r22, 0x11	; 17
    21d2:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN13SensorManager16takeSampleAnalogEh>
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	60 e1       	ldi	r22, 0x10	; 16
    21e0:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN13SensorManager16takeSampleAnalogEh>
    21e4:	98 87       	std	Y+8, r25	; 0x08
    21e6:	8f 83       	std	Y+7, r24	; 0x07

		ret->battVoltage = battRaw;
    21e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	fc 01       	movw	r30, r24
    21f2:	32 83       	std	Z+2, r19	; 0x02
    21f4:	21 83       	std	Z+1, r18	; 0x01
		ret->pVVoltage = pvRaw;
    21f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    21fa:	29 81       	ldd	r18, Y+1	; 0x01
    21fc:	3a 81       	ldd	r19, Y+2	; 0x02
    21fe:	fc 01       	movw	r30, r24
    2200:	36 83       	std	Z+6, r19	; 0x06
    2202:	25 83       	std	Z+5, r18	; 0x05
		ret->current = currentRaw;
    2204:	8b 85       	ldd	r24, Y+11	; 0x0b
    2206:	9c 85       	ldd	r25, Y+12	; 0x0c
    2208:	2d 81       	ldd	r18, Y+5	; 0x05
    220a:	3e 81       	ldd	r19, Y+6	; 0x06
    220c:	fc 01       	movw	r30, r24
    220e:	34 83       	std	Z+4, r19	; 0x04
    2210:	23 83       	std	Z+3, r18	; 0x03
		ret->temperature = tempRaw;
    2212:	8b 85       	ldd	r24, Y+11	; 0x0b
    2214:	9c 85       	ldd	r25, Y+12	; 0x0c
    2216:	2f 81       	ldd	r18, Y+7	; 0x07
    2218:	38 85       	ldd	r19, Y+8	; 0x08
    221a:	fc 01       	movw	r30, r24
    221c:	30 87       	std	Z+8, r19	; 0x08
    221e:	27 83       	std	Z+7, r18	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2220:	8b 85       	ldd	r24, Y+11	; 0x0b
    2222:	9c 85       	ldd	r25, Y+12	; 0x0c
    2224:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	//return ret;
}
    2228:	00 00       	nop
    222a:	2c 96       	adiw	r28, 0x0c	; 12
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    2244:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <twi_state>
  twi_sendStop = true;		// default value
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_sendStop>
  twi_inRepStart = false;
    224e:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    2252:	82 e1       	ldi	r24, 0x12	; 18
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
  digitalWrite(SCL, 1);
    225a:	83 e1       	ldi	r24, 0x13	; 19
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    2262:	89 eb       	ldi	r24, 0xB9	; 185
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	29 eb       	ldi	r18, 0xB9	; 185
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	f9 01       	movw	r30, r18
    226c:	20 81       	ld	r18, Z
    226e:	2e 7f       	andi	r18, 0xFE	; 254
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    2274:	89 eb       	ldi	r24, 0xB9	; 185
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	29 eb       	ldi	r18, 0xB9	; 185
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	f9 01       	movw	r30, r18
    227e:	20 81       	ld	r18, Z
    2280:	2d 7f       	andi	r18, 0xFD	; 253
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    2286:	88 eb       	ldi	r24, 0xB8	; 184
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	28 e4       	ldi	r18, 0x48	; 72
    228c:	fc 01       	movw	r30, r24
    228e:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2290:	8c eb       	ldi	r24, 0xBC	; 188
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	25 e4       	ldi	r18, 0x45	; 69
    2296:	fc 01       	movw	r30, r24
    2298:	20 83       	st	Z, r18
}
    229a:	00 00       	nop
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    22aa:	8c eb       	ldi	r24, 0xBC	; 188
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	2c eb       	ldi	r18, 0xBC	; 188
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	f9 01       	movw	r30, r18
    22b4:	20 81       	ld	r18, Z
    22b6:	2a 7b       	andi	r18, 0xBA	; 186
    22b8:	fc 01       	movw	r30, r24
    22ba:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    22bc:	82 e1       	ldi	r24, 0x12	; 18
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
  digitalWrite(SCL, 0);
    22c4:	83 e1       	ldi	r24, 0x13	; 19
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
}
    22cc:	00 00       	nop
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

000022d4 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	1f 92       	push	r1
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    22e0:	8a eb       	ldi	r24, 0xBA	; 186
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	29 81       	ldd	r18, Y+1	; 0x01
    22e6:	22 0f       	add	r18, r18
    22e8:	fc 01       	movw	r30, r24
    22ea:	20 83       	st	Z, r18
}
    22ec:	00 00       	nop
    22ee:	0f 90       	pop	r0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	08 95       	ret

000022f6 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <twi_setFrequency+0xa>
    2300:	00 d0       	rcall	.+0      	; 0x2302 <twi_setFrequency+0xc>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	69 83       	std	Y+1, r22	; 0x01
    2308:	7a 83       	std	Y+2, r23	; 0x02
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    230e:	08 eb       	ldi	r16, 0xB8	; 184
    2310:	10 e0       	ldi	r17, 0x00	; 0
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	94 e2       	ldi	r25, 0x24	; 36
    2316:	a4 ef       	ldi	r26, 0xF4	; 244
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	29 81       	ldd	r18, Y+1	; 0x01
    231c:	3a 81       	ldd	r19, Y+2	; 0x02
    231e:	4b 81       	ldd	r20, Y+3	; 0x03
    2320:	5c 81       	ldd	r21, Y+4	; 0x04
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodsi4>
    232a:	da 01       	movw	r26, r20
    232c:	c9 01       	movw	r24, r18
    232e:	40 97       	sbiw	r24, 0x10	; 16
    2330:	a1 09       	sbc	r26, r1
    2332:	b1 09       	sbc	r27, r1
    2334:	b6 95       	lsr	r27
    2336:	a7 95       	ror	r26
    2338:	97 95       	ror	r25
    233a:	87 95       	ror	r24
    233c:	f8 01       	movw	r30, r16
    233e:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    2340:	00 00       	nop
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	00 d0       	rcall	.+0      	; 0x235a <twi_readFrom+0x6>
    235a:	00 d0       	rcall	.+0      	; 0x235c <twi_readFrom+0x8>
    235c:	00 d0       	rcall	.+0      	; 0x235e <twi_readFrom+0xa>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	8a 83       	std	Y+2, r24	; 0x02
    2364:	7c 83       	std	Y+4, r23	; 0x04
    2366:	6b 83       	std	Y+3, r22	; 0x03
    2368:	4d 83       	std	Y+5, r20	; 0x05
    236a:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	81 32       	cpi	r24, 0x21	; 33
    2370:	18 f0       	brcs	.+6      	; 0x2378 <twi_readFrom+0x24>
    return 0;
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	6b c0       	rjmp	.+214    	; 0x244c <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    2376:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2378:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <twi_state>
    237c:	88 23       	and	r24, r24
    237e:	d9 f7       	brne	.-10     	; 0x2376 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <twi_state>
  twi_sendStop = sendStop;
    2386:	8e 81       	ldd	r24, Y+6	; 0x06
    2388:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2392:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	81 50       	subi	r24, 0x01	; 1
    239a:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <twi_slarw>
  twi_slarw |= address << 1;
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	98 2f       	mov	r25, r24
    23b0:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <twi_slarw>
    23b4:	89 2b       	or	r24, r25
    23b6:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <twi_slarw>

  if (true == twi_inRepStart) {
    23ba:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <twi_inRepStart>
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	c1 f4       	brne	.+48     	; 0x23f2 <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    23c2:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    23c6:	8b eb       	ldi	r24, 0xBB	; 187
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <twi_slarw>
    23ce:	fc 01       	movw	r30, r24
    23d0:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    23d2:	8c eb       	ldi	r24, 0xBC	; 188
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	fc 01       	movw	r30, r24
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	88 70       	andi	r24, 0x08	; 8
    23e0:	99 27       	eor	r25, r25
    23e2:	89 2b       	or	r24, r25
    23e4:	81 f7       	brne	.-32     	; 0x23c6 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    23e6:	8c eb       	ldi	r24, 0xBC	; 188
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	25 ec       	ldi	r18, 0xC5	; 197
    23ec:	fc 01       	movw	r30, r24
    23ee:	20 83       	st	Z, r18
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    23f2:	8c eb       	ldi	r24, 0xBC	; 188
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	25 ee       	ldi	r18, 0xE5	; 229
    23f8:	fc 01       	movw	r30, r24
    23fa:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    23fc:	01 c0       	rjmp	.+2      	; 0x2400 <twi_readFrom+0xac>
    continue;
    23fe:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2400:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <twi_state>
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	d9 f3       	breq	.-10     	; 0x23fe <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    2408:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	98 17       	cp	r25, r24
    2410:	18 f4       	brcc	.+6      	; 0x2418 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    2412:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    2416:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2418:	19 82       	std	Y+1, r1	; 0x01
    241a:	13 c0       	rjmp	.+38     	; 0x2442 <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	2b 81       	ldd	r18, Y+3	; 0x03
    2424:	3c 81       	ldd	r19, Y+4	; 0x04
    2426:	82 0f       	add	r24, r18
    2428:	93 1f       	adc	r25, r19
    242a:	29 81       	ldd	r18, Y+1	; 0x01
    242c:	22 2f       	mov	r18, r18
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	23 56       	subi	r18, 0x63	; 99
    2432:	39 4f       	sbci	r19, 0xF9	; 249
    2434:	f9 01       	movw	r30, r18
    2436:	20 81       	ld	r18, Z
    2438:	fc 01       	movw	r30, r24
    243a:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	99 81       	ldd	r25, Y+1	; 0x01
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	98 17       	cp	r25, r24
    2448:	48 f3       	brcs	.-46     	; 0x241c <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    244c:	26 96       	adiw	r28, 0x06	; 6
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	08 95       	ret

0000245e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    245e:	0f 93       	push	r16
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	27 97       	sbiw	r28, 0x07	; 7
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	7c 83       	std	Y+4, r23	; 0x04
    2478:	6b 83       	std	Y+3, r22	; 0x03
    247a:	4d 83       	std	Y+5, r20	; 0x05
    247c:	2e 83       	std	Y+6, r18	; 0x06
    247e:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	81 32       	cpi	r24, 0x21	; 33
    2484:	18 f0       	brcs	.+6      	; 0x248c <twi_writeTo+0x2e>
    return 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	76 c0       	rjmp	.+236    	; 0x2576 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    248a:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    248c:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <twi_state>
    2490:	88 23       	and	r24, r24
    2492:	d9 f7       	brne	.-10     	; 0x248a <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <twi_state>
  twi_sendStop = sendStop;
    249a:	8f 81       	ldd	r24, Y+7	; 0x07
    249c:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    24a6:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    24b0:	19 82       	std	Y+1, r1	; 0x01
    24b2:	13 c0       	rjmp	.+38     	; 0x24da <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	29 81       	ldd	r18, Y+1	; 0x01
    24bc:	22 2f       	mov	r18, r18
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4b 81       	ldd	r20, Y+3	; 0x03
    24c2:	5c 81       	ldd	r21, Y+4	; 0x04
    24c4:	24 0f       	add	r18, r20
    24c6:	35 1f       	adc	r19, r21
    24c8:	f9 01       	movw	r30, r18
    24ca:	20 81       	ld	r18, Z
    24cc:	83 56       	subi	r24, 0x63	; 99
    24ce:	99 4f       	sbci	r25, 0xF9	; 249
    24d0:	fc 01       	movw	r30, r24
    24d2:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	99 81       	ldd	r25, Y+1	; 0x01
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	98 17       	cp	r25, r24
    24e0:	48 f3       	brcs	.-46     	; 0x24b4 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    24e2:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <twi_slarw>
  twi_slarw |= address << 1;
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	88 2f       	mov	r24, r24
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	98 2f       	mov	r25, r24
    24f2:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <twi_slarw>
    24f6:	89 2b       	or	r24, r25
    24f8:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    24fc:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <twi_inRepStart>
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	c1 f4       	brne	.+48     	; 0x2534 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2504:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    2508:	8b eb       	ldi	r24, 0xBB	; 187
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <twi_slarw>
    2510:	fc 01       	movw	r30, r24
    2512:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    2514:	8c eb       	ldi	r24, 0xBC	; 188
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	88 70       	andi	r24, 0x08	; 8
    2522:	99 27       	eor	r25, r25
    2524:	89 2b       	or	r24, r25
    2526:	81 f7       	brne	.-32     	; 0x2508 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2528:	8c eb       	ldi	r24, 0xBC	; 188
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	25 ec       	ldi	r18, 0xC5	; 197
    252e:	fc 01       	movw	r30, r24
    2530:	20 83       	st	Z, r18
    2532:	07 c0       	rjmp	.+14     	; 0x2542 <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2534:	8c eb       	ldi	r24, 0xBC	; 188
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	25 ee       	ldi	r18, 0xE5	; 229
    253a:	fc 01       	movw	r30, r24
    253c:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <twi_writeTo+0xe4>
    continue;
    2540:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2542:	8e 81       	ldd	r24, Y+6	; 0x06
    2544:	88 23       	and	r24, r24
    2546:	21 f0       	breq	.+8      	; 0x2550 <twi_writeTo+0xf2>
    2548:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <twi_state>
    254c:	82 30       	cpi	r24, 0x02	; 2
    254e:	c1 f3       	breq	.-16     	; 0x2540 <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    2550:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <twi_error>
    2554:	8f 3f       	cpi	r24, 0xFF	; 255
    2556:	11 f4       	brne	.+4      	; 0x255c <twi_writeTo+0xfe>
    return 0;	// success
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0d c0       	rjmp	.+26     	; 0x2576 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    255c:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <twi_error>
    2560:	80 32       	cpi	r24, 0x20	; 32
    2562:	11 f4       	brne	.+4      	; 0x2568 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    2568:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <twi_error>
    256c:	80 33       	cpi	r24, 0x30	; 48
    256e:	11 f4       	brne	.+4      	; 0x2574 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    2574:	84 e0       	ldi	r24, 0x04	; 4
}
    2576:	27 96       	adiw	r28, 0x07	; 7
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	0f 91       	pop	r16
    2588:	08 95       	ret

0000258a <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	00 d0       	rcall	.+0      	; 0x2590 <twi_transmit+0x6>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <twi_transmit+0x8>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	9b 83       	std	Y+3, r25	; 0x03
    2598:	8a 83       	std	Y+2, r24	; 0x02
    259a:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    259c:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	8c 81       	ldd	r24, Y+4	; 0x04
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	81 97       	sbiw	r24, 0x21	; 33
    25b0:	14 f0       	brlt	.+4      	; 0x25b6 <twi_transmit+0x2c>
    return 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	2c c0       	rjmp	.+88     	; 0x260e <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    25b6:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <twi_state>
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	11 f0       	breq	.+4      	; 0x25c2 <twi_transmit+0x38>
    return 2;
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	26 c0       	rjmp	.+76     	; 0x260e <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    25c2:	19 82       	std	Y+1, r1	; 0x01
    25c4:	19 c0       	rjmp	.+50     	; 0x25f8 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    25c6:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	29 81       	ldd	r18, Y+1	; 0x01
    25da:	22 2f       	mov	r18, r18
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a 81       	ldd	r20, Y+2	; 0x02
    25e0:	5b 81       	ldd	r21, Y+3	; 0x03
    25e2:	24 0f       	add	r18, r20
    25e4:	35 1f       	adc	r19, r21
    25e6:	f9 01       	movw	r30, r18
    25e8:	20 81       	ld	r18, Z
    25ea:	81 54       	subi	r24, 0x41	; 65
    25ec:	99 4f       	sbci	r25, 0xF9	; 249
    25ee:	fc 01       	movw	r30, r24
    25f0:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	98 17       	cp	r25, r24
    25fe:	18 f3       	brcs	.-58     	; 0x25c6 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    2600:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	89 0f       	add	r24, r25
    2608:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <twi_txBufferLength>
  
  return 0;
    260c:	80 e0       	ldi	r24, 0x00	; 0
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	00 d0       	rcall	.+0      	; 0x2622 <twi_attachSlaveRxEvent+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <twi_onSlaveReceive+0x1>
    2632:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <twi_onSlaveReceive>
}
    2636:	00 00       	nop
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	08 95       	ret

00002642 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	00 d0       	rcall	.+0      	; 0x2648 <twi_attachSlaveTxEvent+0x6>
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <twi_onSlaveTransmit+0x1>
    2658:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <twi_onSlaveTransmit>
}
    265c:	00 00       	nop
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	1f 92       	push	r1
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	88 23       	and	r24, r24
    2678:	31 f0       	breq	.+12     	; 0x2686 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    267a:	8c eb       	ldi	r24, 0xBC	; 188
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	25 ec       	ldi	r18, 0xC5	; 197
    2680:	fc 01       	movw	r30, r24
    2682:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    2684:	05 c0       	rjmp	.+10     	; 0x2690 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2686:	8c eb       	ldi	r24, 0xBC	; 188
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	25 e8       	ldi	r18, 0x85	; 133
    268c:	fc 01       	movw	r30, r24
    268e:	20 83       	st	Z, r18
  }
}
    2690:	00 00       	nop
    2692:	0f 90       	pop	r0
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    26a2:	8c eb       	ldi	r24, 0xBC	; 188
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	25 ed       	ldi	r18, 0xD5	; 213
    26a8:	fc 01       	movw	r30, r24
    26aa:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <twi_stop+0x16>
    continue;
    26ae:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    26b0:	8c eb       	ldi	r24, 0xBC	; 188
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	fc 01       	movw	r30, r24
    26b6:	80 81       	ld	r24, Z
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	80 71       	andi	r24, 0x10	; 16
    26be:	99 27       	eor	r25, r25
    26c0:	89 2b       	or	r24, r25
    26c2:	a9 f7       	brne	.-22     	; 0x26ae <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    26c4:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <twi_state>
}
    26c8:	00 00       	nop
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    26d8:	8c eb       	ldi	r24, 0xBC	; 188
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	25 ec       	ldi	r18, 0xC5	; 197
    26de:	fc 01       	movw	r30, r24
    26e0:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    26e2:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <twi_state>
}
    26e6:	00 00       	nop
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <__vector_24>:

ISR(TWI_vect)
{
    26ee:	1f 92       	push	r1
    26f0:	0f 92       	push	r0
    26f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    26f6:	0f 92       	push	r0
    26f8:	11 24       	eor	r1, r1
    26fa:	2f 93       	push	r18
    26fc:	3f 93       	push	r19
    26fe:	4f 93       	push	r20
    2700:	5f 93       	push	r21
    2702:	6f 93       	push	r22
    2704:	7f 93       	push	r23
    2706:	8f 93       	push	r24
    2708:	9f 93       	push	r25
    270a:	af 93       	push	r26
    270c:	bf 93       	push	r27
    270e:	ef 93       	push	r30
    2710:	ff 93       	push	r31
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    271a:	89 eb       	ldi	r24, 0xB9	; 185
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	fc 01       	movw	r30, r24
    2720:	80 81       	ld	r24, Z
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	88 7f       	andi	r24, 0xF8	; 248
    2728:	99 27       	eor	r25, r25
    272a:	09 2e       	mov	r0, r25
    272c:	00 0c       	add	r0, r0
    272e:	aa 0b       	sbc	r26, r26
    2730:	bb 0b       	sbc	r27, r27
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	28 ef       	ldi	r18, 0xF8	; 248
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	84 1b       	sub	r24, r20
    273c:	95 0b       	sbc	r25, r21
    273e:	28 17       	cp	r18, r24
    2740:	39 07       	cpc	r19, r25
    2742:	08 f4       	brcc	.+2      	; 0x2746 <__vector_24+0x58>
    2744:	17 c1       	rjmp	.+558    	; 0x2974 <__vector_24+0x286>
    2746:	8c 5c       	subi	r24, 0xCC	; 204
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	fc 01       	movw	r30, r24
    274c:	0c 94 9a 2e 	jmp	0x5d34	; 0x5d34 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2750:	8b eb       	ldi	r24, 0xBB	; 187
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <twi_slarw>
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
      twi_reply(1);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      break;
    2762:	08 c1       	rjmp	.+528    	; 0x2974 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2764:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    2768:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <twi_masterBufferLength>
    276c:	98 17       	cp	r25, r24
    276e:	a0 f4       	brcc	.+40     	; 0x2798 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2770:	8b eb       	ldi	r24, 0xBB	; 187
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    2778:	31 e0       	ldi	r19, 0x01	; 1
    277a:	32 0f       	add	r19, r18
    277c:	30 93 bd 06 	sts	0x06BD, r19	; 0x8006bd <twi_masterBufferIndex>
    2780:	22 2f       	mov	r18, r18
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	23 56       	subi	r18, 0x63	; 99
    2786:	39 4f       	sbci	r19, 0xF9	; 249
    2788:	f9 01       	movw	r30, r18
    278a:	20 81       	ld	r18, Z
    278c:	fc 01       	movw	r30, r24
    278e:	20 83       	st	Z, r18
        twi_reply(1);
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    2796:	ee c0       	rjmp	.+476    	; 0x2974 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2798:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <twi_sendStop>
    279c:	88 23       	and	r24, r24
    279e:	19 f0       	breq	.+6      	; 0x27a6 <__vector_24+0xb8>
          twi_stop();
    27a0:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    27a4:	e7 c0       	rjmp	.+462    	; 0x2974 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    27ac:	8c eb       	ldi	r24, 0xBC	; 188
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	24 ea       	ldi	r18, 0xA4	; 164
    27b2:	fc 01       	movw	r30, r24
    27b4:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    27b6:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <twi_state>
	}
      }
      break;
    27ba:	dc c0       	rjmp	.+440    	; 0x2974 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    27bc:	80 e2       	ldi	r24, 0x20	; 32
    27be:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <twi_error>
      twi_stop();
    27c2:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_stop>
      break;
    27c6:	d6 c0       	rjmp	.+428    	; 0x2974 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    27c8:	80 e3       	ldi	r24, 0x30	; 48
    27ca:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <twi_error>
      twi_stop();
    27ce:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_stop>
      break;
    27d2:	d0 c0       	rjmp	.+416    	; 0x2974 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    27d4:	88 e3       	ldi	r24, 0x38	; 56
    27d6:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <twi_error>
      twi_releaseBus();
    27da:	0e 94 68 13 	call	0x26d0	; 0x26d0 <twi_releaseBus>
      break;
    27de:	ca c0       	rjmp	.+404    	; 0x2974 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    27e0:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	98 0f       	add	r25, r24
    27e8:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <twi_masterBufferIndex>
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	2b eb       	ldi	r18, 0xBB	; 187
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	f9 01       	movw	r30, r18
    27f6:	20 81       	ld	r18, Z
    27f8:	83 56       	subi	r24, 0x63	; 99
    27fa:	99 4f       	sbci	r25, 0xF9	; 249
    27fc:	fc 01       	movw	r30, r24
    27fe:	20 83       	st	Z, r18
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2800:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    2804:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <twi_masterBufferLength>
    2808:	98 17       	cp	r25, r24
    280a:	20 f4       	brcc	.+8      	; 0x2814 <__vector_24+0x126>
        twi_reply(1);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    2812:	b0 c0       	rjmp	.+352    	; 0x2974 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      }
      break;
    281a:	ac c0       	rjmp	.+344    	; 0x2974 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    281c:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <twi_masterBufferIndex>
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	98 0f       	add	r25, r24
    2824:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <twi_masterBufferIndex>
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	2b eb       	ldi	r18, 0xBB	; 187
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	f9 01       	movw	r30, r18
    2832:	20 81       	ld	r18, Z
    2834:	83 56       	subi	r24, 0x63	; 99
    2836:	99 4f       	sbci	r25, 0xF9	; 249
    2838:	fc 01       	movw	r30, r24
    283a:	20 83       	st	Z, r18
	if (twi_sendStop)
    283c:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <twi_sendStop>
    2840:	88 23       	and	r24, r24
    2842:	19 f0       	breq	.+6      	; 0x284a <__vector_24+0x15c>
          twi_stop();
    2844:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    2848:	95 c0       	rjmp	.+298    	; 0x2974 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2850:	8c eb       	ldi	r24, 0xBC	; 188
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	24 ea       	ldi	r18, 0xA4	; 164
    2856:	fc 01       	movw	r30, r24
    2858:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    285a:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <twi_state>
	}    
	break;
    285e:	8a c0       	rjmp	.+276    	; 0x2974 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2860:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_stop>
      break;
    2864:	87 c0       	rjmp	.+270    	; 0x2974 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    286c:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <twi_rxBufferIndex>
      twi_reply(1);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      break;
    2876:	7e c0       	rjmp	.+252    	; 0x2974 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2878:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <twi_rxBufferIndex>
    287c:	80 32       	cpi	r24, 0x20	; 32
    287e:	a0 f4       	brcc	.+40     	; 0x28a8 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2880:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <twi_rxBufferIndex>
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	98 0f       	add	r25, r24
    2888:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <twi_rxBufferIndex>
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	2b eb       	ldi	r18, 0xBB	; 187
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	f9 01       	movw	r30, r18
    2896:	20 81       	ld	r18, Z
    2898:	8f 51       	subi	r24, 0x1F	; 31
    289a:	99 4f       	sbci	r25, 0xF9	; 249
    289c:	fc 01       	movw	r30, r24
    289e:	20 83       	st	Z, r18
        twi_reply(1);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    28a6:	66 c0       	rjmp	.+204    	; 0x2974 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      }
      break;
    28ae:	62 c0       	rjmp	.+196    	; 0x2974 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    28b0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    28b4:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <twi_rxBufferIndex>
    28b8:	80 32       	cpi	r24, 0x20	; 32
    28ba:	40 f4       	brcc	.+16     	; 0x28cc <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    28bc:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <twi_rxBufferIndex>
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	8f 51       	subi	r24, 0x1F	; 31
    28c6:	99 4f       	sbci	r25, 0xF9	; 249
    28c8:	fc 01       	movw	r30, r24
    28ca:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    28cc:	20 91 9b 06 	lds	r18, 0x069B	; 0x80069b <twi_onSlaveReceive>
    28d0:	30 91 9c 06 	lds	r19, 0x069C	; 0x80069c <twi_onSlaveReceive+0x1>
    28d4:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <twi_rxBufferIndex>
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	bc 01       	movw	r22, r24
    28de:	81 ee       	ldi	r24, 0xE1	; 225
    28e0:	96 e0       	ldi	r25, 0x06	; 6
    28e2:	f9 01       	movw	r30, r18
    28e4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    28e6:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <twi_rxBufferIndex>
      break;
    28ea:	44 c0       	rjmp	.+136    	; 0x2974 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      break;
    28f2:	40 c0       	rjmp	.+128    	; 0x2974 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    28f4:	84 e0       	ldi	r24, 0x04	; 4
    28f6:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    28fa:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    28fe:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2902:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <twi_onSlaveTransmit>
    2906:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <twi_onSlaveTransmit+0x1>
    290a:	fc 01       	movw	r30, r24
    290c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    290e:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    2912:	88 23       	and	r24, r24
    2914:	29 f4       	brne	.+10     	; 0x2920 <__vector_24+0x232>
        twi_txBufferLength = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    291c:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2920:	8b eb       	ldi	r24, 0xBB	; 187
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	20 91 df 06 	lds	r18, 0x06DF	; 0x8006df <twi_txBufferIndex>
    2928:	31 e0       	ldi	r19, 0x01	; 1
    292a:	32 0f       	add	r19, r18
    292c:	30 93 df 06 	sts	0x06DF, r19	; 0x8006df <twi_txBufferIndex>
    2930:	22 2f       	mov	r18, r18
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	21 54       	subi	r18, 0x41	; 65
    2936:	39 4f       	sbci	r19, 0xF9	; 249
    2938:	f9 01       	movw	r30, r18
    293a:	20 81       	ld	r18, Z
    293c:	fc 01       	movw	r30, r24
    293e:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2940:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <twi_txBufferIndex>
    2944:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <twi_txBufferLength>
    2948:	98 17       	cp	r25, r24
    294a:	20 f4       	brcc	.+8      	; 0x2954 <__vector_24+0x266>
        twi_reply(1);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    2952:	10 c0       	rjmp	.+32     	; 0x2974 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      }
      break;
    295a:	0c c0       	rjmp	.+24     	; 0x2974 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	0e 94 34 13 	call	0x2668	; 0x2668 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    2962:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <twi_state>
      break;
    2966:	06 c0       	rjmp	.+12     	; 0x2974 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2968:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <twi_error>
      twi_stop();
    296c:	0e 94 4d 13 	call	0x269a	; 0x269a <twi_stop>
      break;
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    2972:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2974:	00 00       	nop
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	ff 91       	pop	r31
    297c:	ef 91       	pop	r30
    297e:	bf 91       	pop	r27
    2980:	af 91       	pop	r26
    2982:	9f 91       	pop	r25
    2984:	8f 91       	pop	r24
    2986:	7f 91       	pop	r23
    2988:	6f 91       	pop	r22
    298a:	5f 91       	pop	r21
    298c:	4f 91       	pop	r20
    298e:	3f 91       	pop	r19
    2990:	2f 91       	pop	r18
    2992:	0f 90       	pop	r0
    2994:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2998:	0f 90       	pop	r0
    299a:	1f 90       	pop	r1
    299c:	18 95       	reti

0000299e <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <_ZN7TwoWireC1Ev+0x6>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN6StreamC1Ev>
    29b4:	26 e7       	ldi	r18, 0x76	; 118
    29b6:	32 e0       	ldi	r19, 0x02	; 2
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	fc 01       	movw	r30, r24
    29be:	31 83       	std	Z+1, r19	; 0x01
    29c0:	20 83       	st	Z, r18
{
}
    29c2:	00 00       	nop
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	08 95       	ret

000029ce <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <_ZN7TwoWire5beginEv+0x6>
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    29dc:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    29e0:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    29e4:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    29e8:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    29ec:	0e 94 1e 11 	call	0x223c	; 0x223c <twi_init>
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
    29f0:	8b e0       	ldi	r24, 0x0B	; 11
    29f2:	98 e1       	ldi	r25, 0x18	; 24
    29f4:	0e 94 21 13 	call	0x2642	; 0x2642 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
    29f8:	8e eb       	ldi	r24, 0xBE	; 190
    29fa:	97 e1       	ldi	r25, 0x17	; 23
    29fc:	0e 94 0e 13 	call	0x261c	; 0x261c <twi_attachSlaveRxEvent>
}
    2a00:	00 00       	nop
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <_ZN7TwoWire5beginEh+0x6>
    2a12:	1f 92       	push	r1
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	6b 83       	std	Y+3, r22	; 0x03
  begin();
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN7TwoWire5beginEv>
  twi_setAddress(address);
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_setAddress>
}
    2a2c:	00 00       	nop
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    2a3a:	cf 93       	push	r28
    2a3c:	df 93       	push	r29
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <_ZN7TwoWire5beginEi+0x6>
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <_ZN7TwoWire5beginEi+0x8>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	7c 83       	std	Y+4, r23	; 0x04
    2a4c:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	62 2f       	mov	r22, r18
    2a56:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN7TwoWire5beginEh>
}
    2a5a:	00 00       	nop
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <_ZN7TwoWire3endEv+0x6>
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    2a78:	0e 94 51 11 	call	0x22a2	; 0x22a2 <twi_disable>
}
    2a7c:	00 00       	nop
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	08 95       	ret

00002a88 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <_ZN7TwoWire8setClockEm+0x6>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <_ZN7TwoWire8setClockEm+0x8>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <_ZN7TwoWire8setClockEm+0xa>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	4b 83       	std	Y+3, r20	; 0x03
    2a9c:	5c 83       	std	Y+4, r21	; 0x04
    2a9e:	6d 83       	std	Y+5, r22	; 0x05
    2aa0:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	ad 81       	ldd	r26, Y+5	; 0x05
    2aa8:	be 81       	ldd	r27, Y+6	; 0x06
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <twi_setFrequency>
}
    2ab2:	00 00       	nop
    2ab4:	26 96       	adiw	r28, 0x06	; 6
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret

00002ac6 <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    2ac6:	cf 92       	push	r12
    2ac8:	ef 92       	push	r14
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	2b 97       	sbiw	r28, 0x0b	; 11
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	9b 83       	std	Y+3, r25	; 0x03
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
    2ae6:	6c 83       	std	Y+4, r22	; 0x04
    2ae8:	4d 83       	std	Y+5, r20	; 0x05
    2aea:	0e 83       	std	Y+6, r16	; 0x06
    2aec:	1f 83       	std	Y+7, r17	; 0x07
    2aee:	28 87       	std	Y+8, r18	; 0x08
    2af0:	39 87       	std	Y+9, r19	; 0x09
    2af2:	ea 86       	std	Y+10, r14	; 0x0a
    2af4:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    2af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af8:	88 23       	and	r24, r24
    2afa:	e9 f1       	breq	.+122    	; 0x2b76 <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	9b 81       	ldd	r25, Y+3	; 0x03
    2b00:	6c 81       	ldd	r22, Y+4	; 0x04
    2b02:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    2b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b08:	84 30       	cpi	r24, 0x04	; 4
    2b0a:	10 f0       	brcs	.+4      	; 0x2b10 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2b10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b12:	9f ef       	ldi	r25, 0xFF	; 255
    2b14:	98 0f       	add	r25, r24
    2b16:	9a 87       	std	Y+10, r25	; 0x0a
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	99 23       	and	r25, r25
    2b22:	21 f1       	breq	.+72     	; 0x2b6c <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	fc 01       	movw	r30, r24
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	fc 01       	movw	r30, r24
    2b30:	20 81       	ld	r18, Z
    2b32:	31 81       	ldd	r19, Z+1	; 0x01
    2b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	ac 01       	movw	r20, r24
    2b3c:	44 0f       	add	r20, r20
    2b3e:	55 1f       	adc	r21, r21
    2b40:	44 0f       	add	r20, r20
    2b42:	55 1f       	adc	r21, r21
    2b44:	44 0f       	add	r20, r20
    2b46:	55 1f       	adc	r21, r21
    2b48:	8e 81       	ldd	r24, Y+6	; 0x06
    2b4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b4c:	a8 85       	ldd	r26, Y+8	; 0x08
    2b4e:	b9 85       	ldd	r27, Y+9	; 0x09
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <_ZN7TwoWire11requestFromEhhmhh+0x94>
    2b52:	b6 95       	lsr	r27
    2b54:	a7 95       	ror	r26
    2b56:	97 95       	ror	r25
    2b58:	87 95       	ror	r24
    2b5a:	4a 95       	dec	r20
    2b5c:	d2 f7       	brpl	.-12     	; 0x2b52 <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    2b5e:	48 2f       	mov	r20, r24
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	9b 81       	ldd	r25, Y+3	; 0x03
    2b64:	64 2f       	mov	r22, r20
    2b66:	f9 01       	movw	r30, r18
    2b68:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2b6a:	d2 cf       	rjmp	.-92     	; 0x2b10 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	81 32       	cpi	r24, 0x21	; 33
    2b7a:	10 f0       	brcs	.+4      	; 0x2b80 <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    2b7c:	80 e2       	ldi	r24, 0x20	; 32
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2b80:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b82:	4d 81       	ldd	r20, Y+5	; 0x05
    2b84:	63 e0       	ldi	r22, 0x03	; 3
    2b86:	77 e0       	ldi	r23, 0x07	; 7
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	0e 94 aa 11 	call	0x2354	; 0x2354 <twi_readFrom>
    2b8e:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2b90:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>

  return read;
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9c:	2b 96       	adiw	r28, 0x0b	; 11
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	ef 90       	pop	r14
    2bb2:	cf 90       	pop	r12
    2bb4:	08 95       	ret

00002bb6 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    2bb6:	cf 92       	push	r12
    2bb8:	ef 92       	push	r14
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <_ZN7TwoWire11requestFromEhhh+0xe>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <_ZN7TwoWire11requestFromEhhh+0x10>
    2bc6:	1f 92       	push	r1
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	6b 83       	std	Y+3, r22	; 0x03
    2bd2:	4c 83       	std	Y+4, r20	; 0x04
    2bd4:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	cd 80       	ldd	r12, Y+5	; 0x05
    2bdc:	e1 2c       	mov	r14, r1
    2bde:	00 e0       	ldi	r16, 0x00	; 0
    2be0:	10 e0       	ldi	r17, 0x00	; 0
    2be2:	98 01       	movw	r18, r16
    2be4:	4c 81       	ldd	r20, Y+4	; 0x04
    2be6:	6b 81       	ldd	r22, Y+3	; 0x03
    2be8:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN7TwoWire11requestFromEhhmhh>
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ef 90       	pop	r14
    2c00:	cf 90       	pop	r12
    2c02:	08 95       	ret

00002c04 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <_ZN7TwoWire11requestFromEhh+0x6>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <_ZN7TwoWire11requestFromEhh+0x8>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	6b 83       	std	Y+3, r22	; 0x03
    2c16:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	21 e0       	ldi	r18, 0x01	; 1
    2c1e:	4c 81       	ldd	r20, Y+4	; 0x04
    2c20:	6b 81       	ldd	r22, Y+3	; 0x03
    2c22:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_ZN7TwoWire11requestFromEhhh>
}
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	08 95       	ret

00002c34 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <_ZN7TwoWire11requestFromEii+0x6>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <_ZN7TwoWire11requestFromEii+0x8>
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <_ZN7TwoWire11requestFromEii+0xa>
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	7c 83       	std	Y+4, r23	; 0x04
    2c48:	6b 83       	std	Y+3, r22	; 0x03
    2c4a:	5e 83       	std	Y+6, r21	; 0x06
    2c4c:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2c4e:	4d 81       	ldd	r20, Y+5	; 0x05
    2c50:	3b 81       	ldd	r19, Y+3	; 0x03
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	21 e0       	ldi	r18, 0x01	; 1
    2c58:	63 2f       	mov	r22, r19
    2c5a:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_ZN7TwoWire11requestFromEhhh>
}
    2c5e:	26 96       	adiw	r28, 0x06	; 6
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	08 95       	ret

00002c70 <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	28 97       	sbiw	r28, 0x08	; 8
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	7c 83       	std	Y+4, r23	; 0x04
    2c8a:	6b 83       	std	Y+3, r22	; 0x03
    2c8c:	5e 83       	std	Y+6, r21	; 0x06
    2c8e:	4d 83       	std	Y+5, r20	; 0x05
    2c90:	38 87       	std	Y+8, r19	; 0x08
    2c92:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    2c94:	2f 81       	ldd	r18, Y+7	; 0x07
    2c96:	4d 81       	ldd	r20, Y+5	; 0x05
    2c98:	3b 81       	ldd	r19, Y+3	; 0x03
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	63 2f       	mov	r22, r19
    2ca0:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_ZN7TwoWire11requestFromEhhh>
}
    2ca4:	28 96       	adiw	r28, 0x08	; 8
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <_ZN7TwoWire17beginTransmissionEh+0x6>
    2cbc:	1f 92       	push	r1
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2cd4:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2cd8:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <_ZN7TwoWire14txBufferLengthE>
}
    2cdc:	00 00       	nop
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	08 95       	ret

00002cea <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <_ZN7TwoWire17beginTransmissionEi+0x6>
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <_ZN7TwoWire17beginTransmissionEi+0x8>
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	7c 83       	std	Y+4, r23	; 0x04
    2cfc:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    2cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	62 2f       	mov	r22, r18
    2d06:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN7TwoWire17beginTransmissionEh>
}
    2d0a:	00 00       	nop
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	08 95       	ret

00002d1a <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2d1a:	0f 93       	push	r16
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <_ZN7TwoWire15endTransmissionEh+0x8>
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <_ZN7TwoWire15endTransmissionEh+0xa>
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9b 83       	std	Y+3, r25	; 0x03
    2d2a:	8a 83       	std	Y+2, r24	; 0x02
    2d2c:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2d2e:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <_ZN7TwoWire14txBufferLengthE>
    2d32:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <_ZN7TwoWire9txAddressE>
    2d36:	0c 81       	ldd	r16, Y+4	; 0x04
    2d38:	21 e0       	ldi	r18, 0x01	; 1
    2d3a:	49 2f       	mov	r20, r25
    2d3c:	66 e2       	ldi	r22, 0x26	; 38
    2d3e:	77 e0       	ldi	r23, 0x07	; 7
    2d40:	0e 94 2f 12 	call	0x245e	; 0x245e <twi_writeTo>
    2d44:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2d46:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2d4a:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    2d4e:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <_ZN7TwoWire12transmittingE>
  return ret;
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	0f 91       	pop	r16
    2d62:	08 95       	ret

00002d64 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <_ZN7TwoWire15endTransmissionEv+0x6>
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	61 e0       	ldi	r22, 0x01	; 1
    2d78:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN7TwoWire15endTransmissionEh>
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <_ZN7TwoWire5writeEh+0x6>
    2d8c:	1f 92       	push	r1
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2d98:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <_ZN7TwoWire12transmittingE>
    2d9c:	88 23       	and	r24, r24
    2d9e:	01 f1       	breq	.+64     	; 0x2de0 <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2da0:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <_ZN7TwoWire14txBufferLengthE>
    2da4:	80 32       	cpi	r24, 0x20	; 32
    2da6:	48 f0       	brcs	.+18     	; 0x2dba <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dac:	61 e0       	ldi	r22, 0x01	; 1
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	0e 94 00 1a 	call	0x3400	; 0x3400 <_ZN5Print13setWriteErrorEi>
      return 0;
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	1a c0       	rjmp	.+52     	; 0x2dee <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2dba:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc4:	8a 5d       	subi	r24, 0xDA	; 218
    2dc6:	98 4f       	sbci	r25, 0xF8	; 248
    2dc8:	fc 01       	movw	r30, r24
    2dca:	20 83       	st	Z, r18
    ++txBufferIndex;
    2dcc:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2dd6:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
    2dda:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <_ZN7TwoWire14txBufferLengthE>
    2dde:	05 c0       	rjmp	.+10     	; 0x2dea <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2de0:	ce 01       	movw	r24, r28
    2de2:	03 96       	adiw	r24, 0x03	; 3
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	0e 94 c5 12 	call	0x258a	; 0x258a <twi_transmit>
  }
  return 1;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
}
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	08 95       	ret

00002dfa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	28 97       	sbiw	r28, 0x08	; 8
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	7e 83       	std	Y+6, r23	; 0x06
    2e14:	6d 83       	std	Y+5, r22	; 0x05
    2e16:	58 87       	std	Y+8, r21	; 0x08
    2e18:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    2e1a:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <_ZN7TwoWire12transmittingE>
    2e1e:	88 23       	and	r24, r24
    2e20:	21 f1       	breq	.+72     	; 0x2e6a <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e22:	1a 82       	std	Y+2, r1	; 0x02
    2e24:	19 82       	std	Y+1, r1	; 0x01
    2e26:	29 81       	ldd	r18, Y+1	; 0x01
    2e28:	3a 81       	ldd	r19, Y+2	; 0x02
    2e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e2c:	98 85       	ldd	r25, Y+8	; 0x08
    2e2e:	28 17       	cp	r18, r24
    2e30:	39 07       	cpc	r19, r25
    2e32:	08 f5       	brcc	.+66     	; 0x2e76 <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	fc 01       	movw	r30, r24
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	fc 01       	movw	r30, r24
    2e40:	20 81       	ld	r18, Z
    2e42:	31 81       	ldd	r19, Z+1	; 0x01
    2e44:	4d 81       	ldd	r20, Y+5	; 0x05
    2e46:	5e 81       	ldd	r21, Y+6	; 0x06
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	84 0f       	add	r24, r20
    2e4e:	95 1f       	adc	r25, r21
    2e50:	fc 01       	movw	r30, r24
    2e52:	40 81       	ld	r20, Z
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	64 2f       	mov	r22, r20
    2e5a:	f9 01       	movw	r30, r18
    2e5c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01
    2e68:	de cf       	rjmp	.-68     	; 0x2e26 <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2e6a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	62 2f       	mov	r22, r18
    2e72:	0e 94 c5 12 	call	0x258a	; 0x258a <twi_transmit>
  }
  return quantity;
    2e76:	8f 81       	ldd	r24, Y+7	; 0x07
    2e78:	98 85       	ldd	r25, Y+8	; 0x08
}
    2e7a:	28 96       	adiw	r28, 0x08	; 8
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	08 95       	ret

00002e8c <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <_ZN7TwoWire9availableEv+0x6>
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2e9a:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2ea6:	88 2f       	mov	r24, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a9 01       	movw	r20, r18
    2eac:	48 1b       	sub	r20, r24
    2eae:	59 0b       	sbc	r21, r25
    2eb0:	ca 01       	movw	r24, r20
}
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <_ZN7TwoWire4readEv+0x6>
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <_ZN7TwoWire4readEv+0x8>
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2ecc:	8f ef       	ldi	r24, 0xFF	; 255
    2ece:	9f ef       	ldi	r25, 0xFF	; 255
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2ed4:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2ed8:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>
    2edc:	98 17       	cp	r25, r24
    2ede:	88 f4       	brcc	.+34     	; 0x2f02 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    2ee0:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2ee4:	88 2f       	mov	r24, r24
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	8d 5f       	subi	r24, 0xFD	; 253
    2eea:	98 4f       	sbci	r25, 0xF8	; 248
    2eec:	fc 01       	movw	r30, r24
    2eee:	80 81       	ld	r24, Z
    2ef0:	88 2f       	mov	r24, r24
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    2ef8:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2efc:	8f 5f       	subi	r24, 0xFF	; 255
    2efe:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	08 95       	ret

00002f14 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <_ZN7TwoWire4peekEv+0x6>
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <_ZN7TwoWire4peekEv+0x8>
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2f24:	8f ef       	ldi	r24, 0xFF	; 255
    2f26:	9f ef       	ldi	r25, 0xFF	; 255
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    2f2c:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2f30:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>
    2f34:	98 17       	cp	r25, r24
    2f36:	60 f4       	brcc	.+24     	; 0x2f50 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    2f38:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2f3c:	88 2f       	mov	r24, r24
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	8d 5f       	subi	r24, 0xFD	; 253
    2f42:	98 4f       	sbci	r25, 0xF8	; 248
    2f44:	fc 01       	movw	r30, r24
    2f46:	80 81       	ld	r24, Z
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret

00002f62 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <_ZN7TwoWire5flushEv+0x6>
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    2f70:	00 00       	nop
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2f84:	1f 92       	push	r1
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	9b 83       	std	Y+3, r25	; 0x03
    2f8c:	8a 83       	std	Y+2, r24	; 0x02
    2f8e:	7d 83       	std	Y+5, r23	; 0x05
    2f90:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2f92:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ZN7TwoWire14user_onReceiveE>
    2f96:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ZN7TwoWire14user_onReceiveE+0x1>
    2f9a:	89 2b       	or	r24, r25
    2f9c:	89 f1       	breq	.+98     	; 0x3000 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2f9e:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
    2fa2:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>
    2fa6:	98 17       	cp	r25, r24
    2fa8:	68 f1       	brcs	.+90     	; 0x3004 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2faa:	19 82       	std	Y+1, r1	; 0x01
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb6:	28 17       	cp	r18, r24
    2fb8:	39 07       	cpc	r19, r25
    2fba:	a4 f4       	brge	.+40     	; 0x2fe4 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	29 81       	ldd	r18, Y+1	; 0x01
    2fc4:	22 2f       	mov	r18, r18
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a 81       	ldd	r20, Y+2	; 0x02
    2fca:	5b 81       	ldd	r21, Y+3	; 0x03
    2fcc:	24 0f       	add	r18, r20
    2fce:	35 1f       	adc	r19, r21
    2fd0:	f9 01       	movw	r30, r18
    2fd2:	20 81       	ld	r18, Z
    2fd4:	8d 5f       	subi	r24, 0xFD	; 253
    2fd6:	98 4f       	sbci	r25, 0xF8	; 248
    2fd8:	fc 01       	movw	r30, r24
    2fda:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	8f 5f       	subi	r24, 0xFF	; 255
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	e4 cf       	rjmp	.-56     	; 0x2fac <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2fe4:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fea:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    2fee:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <_ZN7TwoWire14user_onReceiveE>
    2ff2:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <_ZN7TwoWire14user_onReceiveE+0x1>
    2ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffa:	f9 01       	movw	r30, r18
    2ffc:	09 95       	icall
    2ffe:	03 c0       	rjmp	.+6      	; 0x3006 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    3000:	00 00       	nop
    3002:	01 c0       	rjmp	.+2      	; 0x3006 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    3004:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    301e:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <_ZN7TwoWire14user_onRequestE>
    3022:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <_ZN7TwoWire14user_onRequestE+0x1>
    3026:	89 2b       	or	r24, r25
    3028:	59 f0       	breq	.+22     	; 0x3040 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    302a:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    302e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    3032:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <_ZN7TwoWire14user_onRequestE>
    3036:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <_ZN7TwoWire14user_onRequestE+0x1>
    303a:	fc 01       	movw	r30, r24
    303c:	09 95       	icall
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    3040:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	08 95       	ret

00003048 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	00 d0       	rcall	.+0      	; 0x304e <_ZN7TwoWire9onReceiveEPFviE+0x6>
    304e:	00 d0       	rcall	.+0      	; 0x3050 <_ZN7TwoWire9onReceiveEPFviE+0x8>
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	9a 83       	std	Y+2, r25	; 0x02
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	7c 83       	std	Y+4, r23	; 0x04
    305a:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	9c 81       	ldd	r25, Y+4	; 0x04
    3060:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <_ZN7TwoWire14user_onReceiveE+0x1>
    3064:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <_ZN7TwoWire14user_onReceiveE>
}
    3068:	00 00       	nop
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	08 95       	ret

00003078 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	00 d0       	rcall	.+0      	; 0x307e <_ZN7TwoWire9onRequestEPFvvE+0x6>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <_ZN7TwoWire9onRequestEPFvvE+0x8>
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	7c 83       	std	Y+4, r23	; 0x04
    308a:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <_ZN7TwoWire14user_onRequestE+0x1>
    3094:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <_ZN7TwoWire14user_onRequestE>
}
    3098:	00 00       	nop
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	08 95       	ret

000030a8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <_Z41__static_initialization_and_destruction_0ii+0x6>
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	7c 83       	std	Y+4, r23	; 0x04
    30ba:	6b 83       	std	Y+3, r22	; 0x03
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	41 f4       	brne	.+16     	; 0x30d4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	21 f4       	brne	.+8      	; 0x30d4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    30cc:	8d e4       	ldi	r24, 0x4D	; 77
    30ce:	97 e0       	ldi	r25, 0x07	; 7
    30d0:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN7TwoWireC1Ev>
    30d4:	00 00       	nop
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	6f ef       	ldi	r22, 0xFF	; 255
    30ee:	7f ef       	ldi	r23, 0xFF	; 255
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_Z41__static_initialization_and_destruction_0ii>
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <_ZN13ExtendedTestsC1Ev>:
#include <Arduino.h>
#include "DataTypes.h"
#include "ExtendedTests.h"

ExtendedTests::ExtendedTests() { }
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	00 d0       	rcall	.+0      	; 0x3104 <_ZN13ExtendedTestsC1Ev+0x6>
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	00 00       	nop
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	08 95       	ret

00003118 <_ZN13ExtendedTests18runExtendedMemTestE12RmMemManager13SensorManager>:


//Bulk read/write signals test
void ExtendedTests::runExtendedMemTest(RmMemManager mem, SensorManager sensorMgr) {
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	2c 97       	sbiw	r28, 0x0c	; 12
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	8b 87       	std	Y+11, r24	; 0x0b
    312e:	6c 87       	std	Y+12, r22	; 0x0c
	
#if IS_EXTENDED_MEM_TEST == true

	SensorData sData;
    3130:	ce 01       	movw	r24, r28
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	0e 94 cf 19 	call	0x339e	; 0x339e <_ZN10SensorDataC1Ev>
	sensorMgr.readData(&sData);
    3138:	ce 01       	movw	r24, r28
    313a:	0c 96       	adiw	r24, 0x0c	; 12
    313c:	9e 01       	movw	r18, r28
    313e:	2f 5f       	subi	r18, 0xFF	; 255
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	b9 01       	movw	r22, r18
    3144:	0e 94 b8 10 	call	0x2170	; 0x2170 <_ZN13SensorManager8readDataEP10SensorData>
	mem.appendSensorEntry(&sData);
    3148:	ce 01       	movw	r24, r28
    314a:	0b 96       	adiw	r24, 0x0b	; 11
    314c:	9e 01       	movw	r18, r28
    314e:	2f 5f       	subi	r18, 0xFF	; 255
    3150:	3f 4f       	sbci	r19, 0xFF	; 255
    3152:	b9 01       	movw	r22, r18
    3154:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	//TODO: Verify mock values match
	
#else
	RM_LOG(F("*** FAIL EMT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
    3158:	00 00       	nop
    315a:	2c 96       	adiw	r28, 0x0c	; 12
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	08 95       	ret

0000316c <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	00 d0       	rcall	.+0      	; 0x3172 <_ZN5PrintaSERKS_+0x6>
    3172:	00 d0       	rcall	.+0      	; 0x3174 <_ZN5PrintaSERKS_+0x8>
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	7c 83       	std	Y+4, r23	; 0x04
    317e:	6b 83       	std	Y+3, r22	; 0x03
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	9c 81       	ldd	r25, Y+4	; 0x04
    3184:	fc 01       	movw	r30, r24
    3186:	22 81       	ldd	r18, Z+2	; 0x02
    3188:	33 81       	ldd	r19, Z+3	; 0x03
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	fc 01       	movw	r30, r24
    3190:	33 83       	std	Z+3, r19	; 0x03
    3192:	22 83       	std	Z+2, r18	; 0x02
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	9a 81       	ldd	r25, Y+2	; 0x02
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	08 95       	ret

000031a6 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <_ZN6StreamaSERKS_+0x6>
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <_ZN6StreamaSERKS_+0x8>
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	7c 83       	std	Y+4, r23	; 0x04
    31b8:	6b 83       	std	Y+3, r22	; 0x03
    31ba:	2b 81       	ldd	r18, Y+3	; 0x03
    31bc:	3c 81       	ldd	r19, Y+4	; 0x04
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	9a 81       	ldd	r25, Y+2	; 0x02
    31c2:	b9 01       	movw	r22, r18
    31c4:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN5PrintaSERKS_>
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	fc 01       	movw	r30, r24
    31ce:	84 81       	ldd	r24, Z+4	; 0x04
    31d0:	95 81       	ldd	r25, Z+5	; 0x05
    31d2:	a6 81       	ldd	r26, Z+6	; 0x06
    31d4:	b7 81       	ldd	r27, Z+7	; 0x07
    31d6:	29 81       	ldd	r18, Y+1	; 0x01
    31d8:	3a 81       	ldd	r19, Y+2	; 0x02
    31da:	f9 01       	movw	r30, r18
    31dc:	84 83       	std	Z+4, r24	; 0x04
    31de:	95 83       	std	Z+5, r25	; 0x05
    31e0:	a6 83       	std	Z+6, r26	; 0x06
    31e2:	b7 83       	std	Z+7, r27	; 0x07
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	fc 01       	movw	r30, r24
    31ea:	80 85       	ldd	r24, Z+8	; 0x08
    31ec:	91 85       	ldd	r25, Z+9	; 0x09
    31ee:	a2 85       	ldd	r26, Z+10	; 0x0a
    31f0:	b3 85       	ldd	r27, Z+11	; 0x0b
    31f2:	29 81       	ldd	r18, Y+1	; 0x01
    31f4:	3a 81       	ldd	r19, Y+2	; 0x02
    31f6:	f9 01       	movw	r30, r18
    31f8:	80 87       	std	Z+8, r24	; 0x08
    31fa:	91 87       	std	Z+9, r25	; 0x09
    31fc:	a2 87       	std	Z+10, r26	; 0x0a
    31fe:	b3 87       	std	Z+11, r27	; 0x0b
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	08 95       	ret

00003212 <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	00 d0       	rcall	.+0      	; 0x3218 <_ZN13Adafruit_FONAaSERKS_+0x6>
    3218:	00 d0       	rcall	.+0      	; 0x321a <_ZN13Adafruit_FONAaSERKS_+0x8>
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	9a 83       	std	Y+2, r25	; 0x02
    3220:	89 83       	std	Y+1, r24	; 0x01
    3222:	7c 83       	std	Y+4, r23	; 0x04
    3224:	6b 83       	std	Y+3, r22	; 0x03
    3226:	2b 81       	ldd	r18, Y+3	; 0x03
    3228:	3c 81       	ldd	r19, Y+4	; 0x04
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	b9 01       	movw	r22, r18
    3230:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN6StreamaSERKS_>
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	9c 81       	ldd	r25, Y+4	; 0x04
    3238:	fc 01       	movw	r30, r24
    323a:	24 85       	ldd	r18, Z+12	; 0x0c
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	fc 01       	movw	r30, r24
    3242:	24 87       	std	Z+12, r18	; 0x0c
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	fc 01       	movw	r30, r24
    324a:	25 85       	ldd	r18, Z+13	; 0x0d
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	9a 81       	ldd	r25, Y+2	; 0x02
    3250:	fc 01       	movw	r30, r24
    3252:	25 87       	std	Z+13, r18	; 0x0d
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	ac 01       	movw	r20, r24
    325a:	42 5f       	subi	r20, 0xF2	; 242
    325c:	5f 4f       	sbci	r21, 0xFF	; 255
    325e:	8e ef       	ldi	r24, 0xFE	; 254
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	2b 81       	ldd	r18, Y+3	; 0x03
    3264:	3c 81       	ldd	r19, Y+4	; 0x04
    3266:	22 5f       	subi	r18, 0xF2	; 242
    3268:	3f 4f       	sbci	r19, 0xFF	; 255
    326a:	8f 3f       	cpi	r24, 0xFF	; 255
    326c:	ff ef       	ldi	r31, 0xFF	; 255
    326e:	9f 07       	cpc	r25, r31
    3270:	51 f0       	breq	.+20     	; 0x3286 <_ZN13Adafruit_FONAaSERKS_+0x74>
    3272:	f9 01       	movw	r30, r18
    3274:	60 81       	ld	r22, Z
    3276:	fa 01       	movw	r30, r20
    3278:	60 83       	st	Z, r22
    327a:	4f 5f       	subi	r20, 0xFF	; 255
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	2f 5f       	subi	r18, 0xFF	; 255
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f2 cf       	rjmp	.-28     	; 0x326a <_ZN13Adafruit_FONAaSERKS_+0x58>
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	83 5f       	subi	r24, 0xF3	; 243
    328c:	9e 4f       	sbci	r25, 0xFE	; 254
    328e:	fc 01       	movw	r30, r24
    3290:	20 81       	ld	r18, Z
    3292:	31 81       	ldd	r19, Z+1	; 0x01
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	83 5f       	subi	r24, 0xF3	; 243
    329a:	9e 4f       	sbci	r25, 0xFE	; 254
    329c:	fc 01       	movw	r30, r24
    329e:	31 83       	std	Z+1, r19	; 0x01
    32a0:	20 83       	st	Z, r18
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	81 5f       	subi	r24, 0xF1	; 241
    32a8:	9e 4f       	sbci	r25, 0xFE	; 254
    32aa:	fc 01       	movw	r30, r24
    32ac:	20 81       	ld	r18, Z
    32ae:	31 81       	ldd	r19, Z+1	; 0x01
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	81 5f       	subi	r24, 0xF1	; 241
    32b6:	9e 4f       	sbci	r25, 0xFE	; 254
    32b8:	fc 01       	movw	r30, r24
    32ba:	31 83       	std	Z+1, r19	; 0x01
    32bc:	20 83       	st	Z, r18
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	8f 5e       	subi	r24, 0xEF	; 239
    32c4:	9e 4f       	sbci	r25, 0xFE	; 254
    32c6:	fc 01       	movw	r30, r24
    32c8:	20 81       	ld	r18, Z
    32ca:	31 81       	ldd	r19, Z+1	; 0x01
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	8f 5e       	subi	r24, 0xEF	; 239
    32d2:	9e 4f       	sbci	r25, 0xFE	; 254
    32d4:	fc 01       	movw	r30, r24
    32d6:	31 83       	std	Z+1, r19	; 0x01
    32d8:	20 83       	st	Z, r18
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	8d 5e       	subi	r24, 0xED	; 237
    32e0:	9e 4f       	sbci	r25, 0xFE	; 254
    32e2:	fc 01       	movw	r30, r24
    32e4:	20 81       	ld	r18, Z
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	8d 5e       	subi	r24, 0xED	; 237
    32ec:	9e 4f       	sbci	r25, 0xFE	; 254
    32ee:	fc 01       	movw	r30, r24
    32f0:	20 83       	st	Z, r18
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	9c 81       	ldd	r25, Y+4	; 0x04
    32f6:	8c 5e       	subi	r24, 0xEC	; 236
    32f8:	9e 4f       	sbci	r25, 0xFE	; 254
    32fa:	fc 01       	movw	r30, r24
    32fc:	20 81       	ld	r18, Z
    32fe:	31 81       	ldd	r19, Z+1	; 0x01
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	9a 81       	ldd	r25, Y+2	; 0x02
    3304:	8c 5e       	subi	r24, 0xEC	; 236
    3306:	9e 4f       	sbci	r25, 0xFE	; 254
    3308:	fc 01       	movw	r30, r24
    330a:	31 83       	std	Z+1, r19	; 0x01
    330c:	20 83       	st	Z, r18
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	8a 5e       	subi	r24, 0xEA	; 234
    3314:	9e 4f       	sbci	r25, 0xFE	; 254
    3316:	fc 01       	movw	r30, r24
    3318:	20 81       	ld	r18, Z
    331a:	31 81       	ldd	r19, Z+1	; 0x01
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	9a 81       	ldd	r25, Y+2	; 0x02
    3320:	8a 5e       	subi	r24, 0xEA	; 234
    3322:	9e 4f       	sbci	r25, 0xFE	; 254
    3324:	fc 01       	movw	r30, r24
    3326:	31 83       	std	Z+1, r19	; 0x01
    3328:	20 83       	st	Z, r18
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	88 5e       	subi	r24, 0xE8	; 232
    3330:	9e 4f       	sbci	r25, 0xFE	; 254
    3332:	fc 01       	movw	r30, r24
    3334:	20 81       	ld	r18, Z
    3336:	31 81       	ldd	r19, Z+1	; 0x01
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	88 5e       	subi	r24, 0xE8	; 232
    333e:	9e 4f       	sbci	r25, 0xFE	; 254
    3340:	fc 01       	movw	r30, r24
    3342:	31 83       	std	Z+1, r19	; 0x01
    3344:	20 83       	st	Z, r18
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	08 95       	ret

00003358 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	00 d0       	rcall	.+0      	; 0x335e <_ZN14HardwareSerial5beginEm+0x6>
    335e:	00 d0       	rcall	.+0      	; 0x3360 <_ZN14HardwareSerial5beginEm+0x8>
    3360:	00 d0       	rcall	.+0      	; 0x3362 <_ZN14HardwareSerial5beginEm+0xa>
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	4b 83       	std	Y+3, r20	; 0x03
    336c:	5c 83       	std	Y+4, r21	; 0x04
    336e:	6d 83       	std	Y+5, r22	; 0x05
    3370:	7e 83       	std	Y+6, r23	; 0x06
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	ad 81       	ldd	r26, Y+5	; 0x05
    3378:	be 81       	ldd	r27, Y+6	; 0x06
    337a:	e9 81       	ldd	r30, Y+1	; 0x01
    337c:	fa 81       	ldd	r31, Y+2	; 0x02
    337e:	26 e0       	ldi	r18, 0x06	; 6
    3380:	ac 01       	movw	r20, r24
    3382:	bd 01       	movw	r22, r26
    3384:	cf 01       	movw	r24, r30
    3386:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <_ZN14HardwareSerial5beginEmh>
    338a:	00 00       	nop
    338c:	26 96       	adiw	r28, 0x06	; 6
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	08 95       	ret

0000339e <_ZN10SensorDataC1Ev>:
//};


//TODO: All these to be uint16_t ?

struct SensorData {
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <_ZN10SensorDataC1Ev+0x6>
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	9a 83       	std	Y+2, r25	; 0x02
    33aa:	89 83       	std	Y+1, r24	; 0x01
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	9a 81       	ldd	r25, Y+2	; 0x02
    33b0:	21 e0       	ldi	r18, 0x01	; 1
    33b2:	fc 01       	movw	r30, r24
    33b4:	20 83       	st	Z, r18
    33b6:	00 00       	nop
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	08 95       	ret

000033c2 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <_ZN7TwoWire5writeEi+0x6>
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <_ZN7TwoWire5writeEi+0x8>
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	7c 83       	std	Y+4, r23	; 0x04
    33d4:	6b 83       	std	Y+3, r22	; 0x03
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	fc 01       	movw	r30, r24
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	fc 01       	movw	r30, r24
    33e2:	20 81       	ld	r18, Z
    33e4:	31 81       	ldd	r19, Z+1	; 0x01
    33e6:	4b 81       	ldd	r20, Y+3	; 0x03
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	64 2f       	mov	r22, r20
    33ee:	f9 01       	movw	r30, r18
    33f0:	09 95       	icall
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	08 95       	ret

00003400 <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3400:	cf 93       	push	r28
    3402:	df 93       	push	r29
    3404:	00 d0       	rcall	.+0      	; 0x3406 <_ZN5Print13setWriteErrorEi+0x6>
    3406:	00 d0       	rcall	.+0      	; 0x3408 <_ZN5Print13setWriteErrorEi+0x8>
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	9a 83       	std	Y+2, r25	; 0x02
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	7c 83       	std	Y+4, r23	; 0x04
    3412:	6b 83       	std	Y+3, r22	; 0x03
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	9a 81       	ldd	r25, Y+2	; 0x02
    3418:	2b 81       	ldd	r18, Y+3	; 0x03
    341a:	3c 81       	ldd	r19, Y+4	; 0x04
    341c:	fc 01       	movw	r30, r24
    341e:	33 83       	std	Z+3, r19	; 0x03
    3420:	22 83       	std	Z+2, r18	; 0x02
    3422:	00 00       	nop
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	08 95       	ret

00003432 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	00 d0       	rcall	.+0      	; 0x3438 <_ZN5PrintC1Ev+0x6>
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	9a 83       	std	Y+2, r25	; 0x02
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	27 eb       	ldi	r18, 0xB7	; 183
    3442:	32 e0       	ldi	r19, 0x02	; 2
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	fc 01       	movw	r30, r24
    344a:	31 83       	std	Z+1, r19	; 0x01
    344c:	20 83       	st	Z, r18
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	9a 81       	ldd	r25, Y+2	; 0x02
    3452:	fc 01       	movw	r30, r24
    3454:	13 82       	std	Z+3, r1	; 0x03
    3456:	12 82       	std	Z+2, r1	; 0x02
    3458:	00 00       	nop
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	08 95       	ret

00003464 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	00 d0       	rcall	.+0      	; 0x346a <_ZN6StreamC1Ev+0x6>
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	0e 94 19 1a 	call	0x3432	; 0x3432 <_ZN5PrintC1Ev>
    347a:	26 e8       	ldi	r18, 0x86	; 134
    347c:	32 e0       	ldi	r19, 0x02	; 2
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	fc 01       	movw	r30, r24
    3484:	31 83       	std	Z+1, r19	; 0x01
    3486:	20 83       	st	Z, r18
    3488:	29 81       	ldd	r18, Y+1	; 0x01
    348a:	3a 81       	ldd	r19, Y+2	; 0x02
    348c:	88 ee       	ldi	r24, 0xE8	; 232
    348e:	93 e0       	ldi	r25, 0x03	; 3
    3490:	a0 e0       	ldi	r26, 0x00	; 0
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	f9 01       	movw	r30, r18
    3496:	84 83       	std	Z+4, r24	; 0x04
    3498:	95 83       	std	Z+5, r25	; 0x05
    349a:	a6 83       	std	Z+6, r26	; 0x06
    349c:	b7 83       	std	Z+7, r27	; 0x07
    349e:	00 00       	nop
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	08 95       	ret

000034aa <__floatunsisf>:
    34aa:	e8 94       	clt
    34ac:	09 c0       	rjmp	.+18     	; 0x34c0 <__floatsisf+0x12>

000034ae <__floatsisf>:
    34ae:	97 fb       	bst	r25, 7
    34b0:	3e f4       	brtc	.+14     	; 0x34c0 <__floatsisf+0x12>
    34b2:	90 95       	com	r25
    34b4:	80 95       	com	r24
    34b6:	70 95       	com	r23
    34b8:	61 95       	neg	r22
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	8f 4f       	sbci	r24, 0xFF	; 255
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	99 23       	and	r25, r25
    34c2:	a9 f0       	breq	.+42     	; 0x34ee <__floatsisf+0x40>
    34c4:	f9 2f       	mov	r31, r25
    34c6:	96 e9       	ldi	r25, 0x96	; 150
    34c8:	bb 27       	eor	r27, r27
    34ca:	93 95       	inc	r25
    34cc:	f6 95       	lsr	r31
    34ce:	87 95       	ror	r24
    34d0:	77 95       	ror	r23
    34d2:	67 95       	ror	r22
    34d4:	b7 95       	ror	r27
    34d6:	f1 11       	cpse	r31, r1
    34d8:	f8 cf       	rjmp	.-16     	; 0x34ca <__floatsisf+0x1c>
    34da:	fa f4       	brpl	.+62     	; 0x351a <__floatsisf+0x6c>
    34dc:	bb 0f       	add	r27, r27
    34de:	11 f4       	brne	.+4      	; 0x34e4 <__floatsisf+0x36>
    34e0:	60 ff       	sbrs	r22, 0
    34e2:	1b c0       	rjmp	.+54     	; 0x351a <__floatsisf+0x6c>
    34e4:	6f 5f       	subi	r22, 0xFF	; 255
    34e6:	7f 4f       	sbci	r23, 0xFF	; 255
    34e8:	8f 4f       	sbci	r24, 0xFF	; 255
    34ea:	9f 4f       	sbci	r25, 0xFF	; 255
    34ec:	16 c0       	rjmp	.+44     	; 0x351a <__floatsisf+0x6c>
    34ee:	88 23       	and	r24, r24
    34f0:	11 f0       	breq	.+4      	; 0x34f6 <__floatsisf+0x48>
    34f2:	96 e9       	ldi	r25, 0x96	; 150
    34f4:	11 c0       	rjmp	.+34     	; 0x3518 <__floatsisf+0x6a>
    34f6:	77 23       	and	r23, r23
    34f8:	21 f0       	breq	.+8      	; 0x3502 <__floatsisf+0x54>
    34fa:	9e e8       	ldi	r25, 0x8E	; 142
    34fc:	87 2f       	mov	r24, r23
    34fe:	76 2f       	mov	r23, r22
    3500:	05 c0       	rjmp	.+10     	; 0x350c <__floatsisf+0x5e>
    3502:	66 23       	and	r22, r22
    3504:	71 f0       	breq	.+28     	; 0x3522 <__floatsisf+0x74>
    3506:	96 e8       	ldi	r25, 0x86	; 134
    3508:	86 2f       	mov	r24, r22
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	2a f0       	brmi	.+10     	; 0x351a <__floatsisf+0x6c>
    3510:	9a 95       	dec	r25
    3512:	66 0f       	add	r22, r22
    3514:	77 1f       	adc	r23, r23
    3516:	88 1f       	adc	r24, r24
    3518:	da f7       	brpl	.-10     	; 0x3510 <__floatsisf+0x62>
    351a:	88 0f       	add	r24, r24
    351c:	96 95       	lsr	r25
    351e:	87 95       	ror	r24
    3520:	97 f9       	bld	r25, 7
    3522:	08 95       	ret

00003524 <__cxa_pure_virtual>:
    3524:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <abort>

00003528 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3528:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    352a:	91 8d       	ldd	r25, Z+25	; 0x19
    352c:	22 8d       	ldd	r18, Z+26	; 0x1a
    352e:	89 2f       	mov	r24, r25
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	80 5c       	subi	r24, 0xC0	; 192
    3534:	9f 4f       	sbci	r25, 0xFF	; 255
    3536:	82 1b       	sub	r24, r18
    3538:	91 09       	sbc	r25, r1
}
    353a:	8f 73       	andi	r24, 0x3F	; 63
    353c:	99 27       	eor	r25, r25
    353e:	08 95       	ret

00003540 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3540:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3542:	91 8d       	ldd	r25, Z+25	; 0x19
    3544:	82 8d       	ldd	r24, Z+26	; 0x1a
    3546:	98 17       	cp	r25, r24
    3548:	31 f0       	breq	.+12     	; 0x3556 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    354a:	82 8d       	ldd	r24, Z+26	; 0x1a
    354c:	e8 0f       	add	r30, r24
    354e:	f1 1d       	adc	r31, r1
    3550:	85 8d       	ldd	r24, Z+29	; 0x1d
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3556:	8f ef       	ldi	r24, 0xFF	; 255
    3558:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    355a:	08 95       	ret

0000355c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    355c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    355e:	91 8d       	ldd	r25, Z+25	; 0x19
    3560:	82 8d       	ldd	r24, Z+26	; 0x1a
    3562:	98 17       	cp	r25, r24
    3564:	61 f0       	breq	.+24     	; 0x357e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3566:	82 8d       	ldd	r24, Z+26	; 0x1a
    3568:	df 01       	movw	r26, r30
    356a:	a8 0f       	add	r26, r24
    356c:	b1 1d       	adc	r27, r1
    356e:	5d 96       	adiw	r26, 0x1d	; 29
    3570:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3572:	92 8d       	ldd	r25, Z+26	; 0x1a
    3574:	9f 5f       	subi	r25, 0xFF	; 255
    3576:	9f 73       	andi	r25, 0x3F	; 63
    3578:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3582:	08 95       	ret

00003584 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3584:	87 e1       	ldi	r24, 0x17	; 23
    3586:	9c e1       	ldi	r25, 0x1C	; 28
    3588:	89 2b       	or	r24, r25
    358a:	49 f0       	breq	.+18     	; 0x359e <_Z14serialEventRunv+0x1a>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	89 2b       	or	r24, r25
    3592:	29 f0       	breq	.+10     	; 0x359e <_Z14serialEventRunv+0x1a>
    3594:	0e 94 17 1c 	call	0x382e	; 0x382e <_Z17Serial0_availablev>
    3598:	81 11       	cpse	r24, r1
    359a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    359e:	08 95       	ret

000035a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    35a0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    35a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    35a4:	df 01       	movw	r26, r30
    35a6:	a8 0f       	add	r26, r24
    35a8:	b1 1d       	adc	r27, r1
    35aa:	a3 5a       	subi	r26, 0xA3	; 163
    35ac:	bf 4f       	sbci	r27, 0xFF	; 255
    35ae:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    35b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	8f 73       	andi	r24, 0x3F	; 63
    35b8:	99 27       	eor	r25, r25
    35ba:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    35bc:	a6 89       	ldd	r26, Z+22	; 0x16
    35be:	b7 89       	ldd	r27, Z+23	; 0x17
    35c0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    35c2:	a0 89       	ldd	r26, Z+16	; 0x10
    35c4:	b1 89       	ldd	r27, Z+17	; 0x11
    35c6:	8c 91       	ld	r24, X
    35c8:	80 64       	ori	r24, 0x40	; 64
    35ca:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    35cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    35ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    35d0:	98 13       	cpse	r25, r24
    35d2:	06 c0       	rjmp	.+12     	; 0x35e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    35d4:	02 88       	ldd	r0, Z+18	; 0x12
    35d6:	f3 89       	ldd	r31, Z+19	; 0x13
    35d8:	e0 2d       	mov	r30, r0
    35da:	80 81       	ld	r24, Z
    35dc:	8f 7d       	andi	r24, 0xDF	; 223
    35de:	80 83       	st	Z, r24
    35e0:	08 95       	ret

000035e2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    35e2:	ef 92       	push	r14
    35e4:	ff 92       	push	r15
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	ec 01       	movw	r28, r24
  _written = true;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    35f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35f8:	98 13       	cpse	r25, r24
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <_ZN14HardwareSerial5writeEh+0x24>
    35fc:	e8 89       	ldd	r30, Y+16	; 0x10
    35fe:	f9 89       	ldd	r31, Y+17	; 0x11
    3600:	80 81       	ld	r24, Z
    3602:	85 fd       	sbrc	r24, 5
    3604:	24 c0       	rjmp	.+72     	; 0x364e <_ZN14HardwareSerial5writeEh+0x6c>
    3606:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3608:	0b 8d       	ldd	r16, Y+27	; 0x1b
    360a:	10 e0       	ldi	r17, 0x00	; 0
    360c:	0f 5f       	subi	r16, 0xFF	; 255
    360e:	1f 4f       	sbci	r17, 0xFF	; 255
    3610:	0f 73       	andi	r16, 0x3F	; 63
    3612:	11 27       	eor	r17, r17
    3614:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3616:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3618:	e8 12       	cpse	r14, r24
    361a:	0c c0       	rjmp	.+24     	; 0x3634 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	07 fc       	sbrc	r0, 7
    3620:	fa cf       	rjmp	.-12     	; 0x3616 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3622:	e8 89       	ldd	r30, Y+16	; 0x10
    3624:	f9 89       	ldd	r31, Y+17	; 0x11
    3626:	80 81       	ld	r24, Z
    3628:	85 ff       	sbrs	r24, 5
    362a:	f5 cf       	rjmp	.-22     	; 0x3616 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    362c:	ce 01       	movw	r24, r28
    362e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3632:	f1 cf       	rjmp	.-30     	; 0x3616 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3636:	fe 01       	movw	r30, r28
    3638:	e8 0f       	add	r30, r24
    363a:	f1 1d       	adc	r31, r1
    363c:	e3 5a       	subi	r30, 0xA3	; 163
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3642:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3644:	ea 89       	ldd	r30, Y+18	; 0x12
    3646:	fb 89       	ldd	r31, Y+19	; 0x13
    3648:	80 81       	ld	r24, Z
    364a:	80 62       	ori	r24, 0x20	; 32
    364c:	07 c0       	rjmp	.+14     	; 0x365c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    364e:	ee 89       	ldd	r30, Y+22	; 0x16
    3650:	ff 89       	ldd	r31, Y+23	; 0x17
    3652:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3654:	e8 89       	ldd	r30, Y+16	; 0x10
    3656:	f9 89       	ldd	r31, Y+17	; 0x11
    3658:	80 81       	ld	r24, Z
    365a:	80 64       	ori	r24, 0x40	; 64
    365c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	08 95       	ret

00003670 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3676:	88 8d       	ldd	r24, Y+24	; 0x18
    3678:	88 23       	and	r24, r24
    367a:	c9 f0       	breq	.+50     	; 0x36ae <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    367c:	ea 89       	ldd	r30, Y+18	; 0x12
    367e:	fb 89       	ldd	r31, Y+19	; 0x13
    3680:	80 81       	ld	r24, Z
    3682:	85 fd       	sbrc	r24, 5
    3684:	05 c0       	rjmp	.+10     	; 0x3690 <_ZN14HardwareSerial5flushEv+0x20>
    3686:	a8 89       	ldd	r26, Y+16	; 0x10
    3688:	b9 89       	ldd	r27, Y+17	; 0x11
    368a:	8c 91       	ld	r24, X
    368c:	86 fd       	sbrc	r24, 6
    368e:	0f c0       	rjmp	.+30     	; 0x36ae <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	07 fc       	sbrc	r0, 7
    3694:	f5 cf       	rjmp	.-22     	; 0x3680 <_ZN14HardwareSerial5flushEv+0x10>
    3696:	80 81       	ld	r24, Z
    3698:	85 ff       	sbrs	r24, 5
    369a:	f2 cf       	rjmp	.-28     	; 0x3680 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    369c:	a8 89       	ldd	r26, Y+16	; 0x10
    369e:	b9 89       	ldd	r27, Y+17	; 0x11
    36a0:	8c 91       	ld	r24, X
    36a2:	85 ff       	sbrs	r24, 5
    36a4:	ed cf       	rjmp	.-38     	; 0x3680 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    36a6:	ce 01       	movw	r24, r28
    36a8:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    36ac:	e7 cf       	rjmp	.-50     	; 0x367c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	08 95       	ret

000036b4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	ec 01       	movw	r28, r24
    36c4:	6a 01       	movw	r12, r20
    36c6:	7b 01       	movw	r14, r22
    36c8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    36ca:	e8 89       	ldd	r30, Y+16	; 0x10
    36cc:	f9 89       	ldd	r31, Y+17	; 0x11
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    36d2:	41 15       	cp	r20, r1
    36d4:	51 4e       	sbci	r21, 0xE1	; 225
    36d6:	61 05       	cpc	r22, r1
    36d8:	71 05       	cpc	r23, r1
    36da:	b1 f0       	breq	.+44     	; 0x3708 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	79 e0       	ldi	r23, 0x09	; 9
    36e0:	8d e3       	ldi	r24, 0x3D	; 61
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a7 01       	movw	r20, r14
    36e6:	96 01       	movw	r18, r12
    36e8:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodsi4>
    36ec:	da 01       	movw	r26, r20
    36ee:	c9 01       	movw	r24, r18
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	a1 09       	sbc	r26, r1
    36f4:	b1 09       	sbc	r27, r1
    36f6:	b6 95       	lsr	r27
    36f8:	a7 95       	ror	r26
    36fa:	97 95       	ror	r25
    36fc:	87 95       	ror	r24
    36fe:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3700:	21 15       	cp	r18, r1
    3702:	80 e1       	ldi	r24, 0x10	; 16
    3704:	38 07       	cpc	r19, r24
    3706:	a8 f0       	brcs	.+42     	; 0x3732 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3708:	e8 89       	ldd	r30, Y+16	; 0x10
    370a:	f9 89       	ldd	r31, Y+17	; 0x11
    370c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    370e:	60 e8       	ldi	r22, 0x80	; 128
    3710:	74 e8       	ldi	r23, 0x84	; 132
    3712:	8e e1       	ldi	r24, 0x1E	; 30
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	a7 01       	movw	r20, r14
    3718:	96 01       	movw	r18, r12
    371a:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodsi4>
    371e:	da 01       	movw	r26, r20
    3720:	c9 01       	movw	r24, r18
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	a1 09       	sbc	r26, r1
    3726:	b1 09       	sbc	r27, r1
    3728:	b6 95       	lsr	r27
    372a:	a7 95       	ror	r26
    372c:	97 95       	ror	r25
    372e:	87 95       	ror	r24
    3730:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3732:	ec 85       	ldd	r30, Y+12	; 0x0c
    3734:	fd 85       	ldd	r31, Y+13	; 0x0d
    3736:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3738:	ee 85       	ldd	r30, Y+14	; 0x0e
    373a:	ff 85       	ldd	r31, Y+15	; 0x0f
    373c:	20 83       	st	Z, r18

  _written = false;
    373e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3740:	ec 89       	ldd	r30, Y+20	; 0x14
    3742:	fd 89       	ldd	r31, Y+21	; 0x15
    3744:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3746:	ea 89       	ldd	r30, Y+18	; 0x12
    3748:	fb 89       	ldd	r31, Y+19	; 0x13
    374a:	80 81       	ld	r24, Z
    374c:	80 61       	ori	r24, 0x10	; 16
    374e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3750:	ea 89       	ldd	r30, Y+18	; 0x12
    3752:	fb 89       	ldd	r31, Y+19	; 0x13
    3754:	80 81       	ld	r24, Z
    3756:	88 60       	ori	r24, 0x08	; 8
    3758:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    375a:	ea 89       	ldd	r30, Y+18	; 0x12
    375c:	fb 89       	ldd	r31, Y+19	; 0x13
    375e:	80 81       	ld	r24, Z
    3760:	80 68       	ori	r24, 0x80	; 128
    3762:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3764:	ea 89       	ldd	r30, Y+18	; 0x12
    3766:	fb 89       	ldd	r31, Y+19	; 0x13
    3768:	80 81       	ld	r24, Z
    376a:	8f 7d       	andi	r24, 0xDF	; 223
    376c:	80 83       	st	Z, r24
}
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	1f 91       	pop	r17
    3774:	ff 90       	pop	r15
    3776:	ef 90       	pop	r14
    3778:	df 90       	pop	r13
    377a:	cf 90       	pop	r12
    377c:	08 95       	ret

0000377e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    377e:	1f 92       	push	r1
    3780:	0f 92       	push	r0
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	0f 92       	push	r0
    3786:	11 24       	eor	r1, r1
    3788:	2f 93       	push	r18
    378a:	8f 93       	push	r24
    378c:	9f 93       	push	r25
    378e:	ef 93       	push	r30
    3790:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3792:	e0 91 6b 07 	lds	r30, 0x076B	; 0x80076b <Serial+0x10>
    3796:	f0 91 6c 07 	lds	r31, 0x076C	; 0x80076c <Serial+0x11>
    379a:	80 81       	ld	r24, Z
    379c:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <Serial+0x16>
    37a0:	f0 91 72 07 	lds	r31, 0x0772	; 0x800772 <Serial+0x17>
    37a4:	82 fd       	sbrc	r24, 2
    37a6:	12 c0       	rjmp	.+36     	; 0x37cc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    37a8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    37aa:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <Serial+0x19>
    37ae:	8f 5f       	subi	r24, 0xFF	; 255
    37b0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    37b2:	20 91 75 07 	lds	r18, 0x0775	; 0x800775 <Serial+0x1a>
    37b6:	82 17       	cp	r24, r18
    37b8:	51 f0       	breq	.+20     	; 0x37ce <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    37ba:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <Serial+0x19>
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	e5 5a       	subi	r30, 0xA5	; 165
    37c2:	f8 4f       	sbci	r31, 0xF8	; 248
    37c4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    37c6:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <Serial+0x19>
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    37cc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    37ce:	ff 91       	pop	r31
    37d0:	ef 91       	pop	r30
    37d2:	9f 91       	pop	r25
    37d4:	8f 91       	pop	r24
    37d6:	2f 91       	pop	r18
    37d8:	0f 90       	pop	r0
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	0f 90       	pop	r0
    37de:	1f 90       	pop	r1
    37e0:	18 95       	reti

000037e2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    37e2:	1f 92       	push	r1
    37e4:	0f 92       	push	r0
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	0f 92       	push	r0
    37ea:	11 24       	eor	r1, r1
    37ec:	2f 93       	push	r18
    37ee:	3f 93       	push	r19
    37f0:	4f 93       	push	r20
    37f2:	5f 93       	push	r21
    37f4:	6f 93       	push	r22
    37f6:	7f 93       	push	r23
    37f8:	8f 93       	push	r24
    37fa:	9f 93       	push	r25
    37fc:	af 93       	push	r26
    37fe:	bf 93       	push	r27
    3800:	ef 93       	push	r30
    3802:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3804:	8b e5       	ldi	r24, 0x5B	; 91
    3806:	97 e0       	ldi	r25, 0x07	; 7
    3808:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    380c:	ff 91       	pop	r31
    380e:	ef 91       	pop	r30
    3810:	bf 91       	pop	r27
    3812:	af 91       	pop	r26
    3814:	9f 91       	pop	r25
    3816:	8f 91       	pop	r24
    3818:	7f 91       	pop	r23
    381a:	6f 91       	pop	r22
    381c:	5f 91       	pop	r21
    381e:	4f 91       	pop	r20
    3820:	3f 91       	pop	r19
    3822:	2f 91       	pop	r18
    3824:	0f 90       	pop	r0
    3826:	0f be       	out	0x3f, r0	; 63
    3828:	0f 90       	pop	r0
    382a:	1f 90       	pop	r1
    382c:	18 95       	reti

0000382e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    382e:	8b e5       	ldi	r24, 0x5B	; 91
    3830:	97 e0       	ldi	r25, 0x07	; 7
    3832:	0e 94 94 1a 	call	0x3528	; 0x3528 <_ZN14HardwareSerial9availableEv>
    3836:	21 e0       	ldi	r18, 0x01	; 1
    3838:	89 2b       	or	r24, r25
    383a:	09 f4       	brne	.+2      	; 0x383e <_Z17Serial0_availablev+0x10>
    383c:	20 e0       	ldi	r18, 0x00	; 0
}
    383e:	82 2f       	mov	r24, r18
    3840:	08 95       	ret

00003842 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3842:	eb e5       	ldi	r30, 0x5B	; 91
    3844:	f7 e0       	ldi	r31, 0x07	; 7
    3846:	13 82       	std	Z+3, r1	; 0x03
    3848:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    384a:	88 ee       	ldi	r24, 0xE8	; 232
    384c:	93 e0       	ldi	r25, 0x03	; 3
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	84 83       	std	Z+4, r24	; 0x04
    3854:	95 83       	std	Z+5, r25	; 0x05
    3856:	a6 83       	std	Z+6, r26	; 0x06
    3858:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    385a:	86 e9       	ldi	r24, 0x96	; 150
    385c:	92 e0       	ldi	r25, 0x02	; 2
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	80 83       	st	Z, r24
    3862:	85 ec       	ldi	r24, 0xC5	; 197
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	95 87       	std	Z+13, r25	; 0x0d
    3868:	84 87       	std	Z+12, r24	; 0x0c
    386a:	84 ec       	ldi	r24, 0xC4	; 196
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	97 87       	std	Z+15, r25	; 0x0f
    3870:	86 87       	std	Z+14, r24	; 0x0e
    3872:	80 ec       	ldi	r24, 0xC0	; 192
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	91 8b       	std	Z+17, r25	; 0x11
    3878:	80 8b       	std	Z+16, r24	; 0x10
    387a:	81 ec       	ldi	r24, 0xC1	; 193
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	93 8b       	std	Z+19, r25	; 0x13
    3880:	82 8b       	std	Z+18, r24	; 0x12
    3882:	82 ec       	ldi	r24, 0xC2	; 194
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	95 8b       	std	Z+21, r25	; 0x15
    3888:	84 8b       	std	Z+20, r24	; 0x14
    388a:	86 ec       	ldi	r24, 0xC6	; 198
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	97 8b       	std	Z+23, r25	; 0x17
    3890:	86 8b       	std	Z+22, r24	; 0x16
    3892:	11 8e       	std	Z+25, r1	; 0x19
    3894:	12 8e       	std	Z+26, r1	; 0x1a
    3896:	13 8e       	std	Z+27, r1	; 0x1b
    3898:	14 8e       	std	Z+28, r1	; 0x1c
    389a:	08 95       	ret

0000389c <initVariant>:
    389c:	08 95       	ret

0000389e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    389e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <init>

	initVariant();
    38a2:	0e 94 4e 1c 	call	0x389c	; 0x389c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    38a6:	0e 94 42 08 	call	0x1084	; 0x1084 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    38aa:	c2 ec       	ldi	r28, 0xC2	; 194
    38ac:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
    38ae:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <loop>
		if (serialEventRun) serialEventRun();
    38b2:	20 97       	sbiw	r28, 0x00	; 0
    38b4:	e1 f3       	breq	.-8      	; 0x38ae <main+0x10>
    38b6:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_Z14serialEventRunv>
    38ba:	f9 cf       	rjmp	.-14     	; 0x38ae <main+0x10>

000038bc <_Znwj>:
    38bc:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <malloc>

000038c0 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    38c0:	cf 92       	push	r12
    38c2:	df 92       	push	r13
    38c4:	ef 92       	push	r14
    38c6:	ff 92       	push	r15
    38c8:	0f 93       	push	r16
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	6c 01       	movw	r12, r24
    38d2:	7a 01       	movw	r14, r20
    38d4:	8b 01       	movw	r16, r22
    38d6:	c0 e0       	ldi	r28, 0x00	; 0
    38d8:	d0 e0       	ldi	r29, 0x00	; 0
    38da:	ce 15       	cp	r28, r14
    38dc:	df 05       	cpc	r29, r15
    38de:	81 f0       	breq	.+32     	; 0x3900 <_ZN5Print5writeEPKhj+0x40>
    38e0:	d8 01       	movw	r26, r16
    38e2:	6d 91       	ld	r22, X+
    38e4:	8d 01       	movw	r16, r26
    38e6:	d6 01       	movw	r26, r12
    38e8:	ed 91       	ld	r30, X+
    38ea:	fc 91       	ld	r31, X
    38ec:	01 90       	ld	r0, Z+
    38ee:	f0 81       	ld	r31, Z
    38f0:	e0 2d       	mov	r30, r0
    38f2:	c6 01       	movw	r24, r12
    38f4:	09 95       	icall
    38f6:	89 2b       	or	r24, r25
    38f8:	11 f0       	breq	.+4      	; 0x38fe <_ZN5Print5writeEPKhj+0x3e>
    38fa:	21 96       	adiw	r28, 0x01	; 1
    38fc:	ee cf       	rjmp	.-36     	; 0x38da <_ZN5Print5writeEPKhj+0x1a>
    38fe:	7e 01       	movw	r14, r28
    3900:	c7 01       	movw	r24, r14
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	08 95       	ret

00003914 <_ZN5Print5writeEPKc>:
    3914:	61 15       	cp	r22, r1
    3916:	71 05       	cpc	r23, r1
    3918:	79 f0       	breq	.+30     	; 0x3938 <_ZN5Print5writeEPKc+0x24>
    391a:	fb 01       	movw	r30, r22
    391c:	01 90       	ld	r0, Z+
    391e:	00 20       	and	r0, r0
    3920:	e9 f7       	brne	.-6      	; 0x391c <_ZN5Print5writeEPKc+0x8>
    3922:	31 97       	sbiw	r30, 0x01	; 1
    3924:	af 01       	movw	r20, r30
    3926:	46 1b       	sub	r20, r22
    3928:	57 0b       	sbc	r21, r23
    392a:	dc 01       	movw	r26, r24
    392c:	ed 91       	ld	r30, X+
    392e:	fc 91       	ld	r31, X
    3930:	02 80       	ldd	r0, Z+2	; 0x02
    3932:	f3 81       	ldd	r31, Z+3	; 0x03
    3934:	e0 2d       	mov	r30, r0
    3936:	09 94       	ijmp
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	08 95       	ret

0000393e <_ZN5Print5printEPK19__FlashStringHelper>:
    393e:	ef 92       	push	r14
    3940:	ff 92       	push	r15
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	8c 01       	movw	r16, r24
    394c:	7b 01       	movw	r14, r22
    394e:	c0 e0       	ldi	r28, 0x00	; 0
    3950:	d0 e0       	ldi	r29, 0x00	; 0
    3952:	f7 01       	movw	r30, r14
    3954:	ec 0f       	add	r30, r28
    3956:	fd 1f       	adc	r31, r29
    3958:	64 91       	lpm	r22, Z
    395a:	66 23       	and	r22, r22
    395c:	61 f0       	breq	.+24     	; 0x3976 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    395e:	d8 01       	movw	r26, r16
    3960:	ed 91       	ld	r30, X+
    3962:	fc 91       	ld	r31, X
    3964:	01 90       	ld	r0, Z+
    3966:	f0 81       	ld	r31, Z
    3968:	e0 2d       	mov	r30, r0
    396a:	c8 01       	movw	r24, r16
    396c:	09 95       	icall
    396e:	89 2b       	or	r24, r25
    3970:	11 f0       	breq	.+4      	; 0x3976 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3972:	21 96       	adiw	r28, 0x01	; 1
    3974:	ee cf       	rjmp	.-36     	; 0x3952 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3976:	ce 01       	movw	r24, r28
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	ff 90       	pop	r15
    3982:	ef 90       	pop	r14
    3984:	08 95       	ret

00003986 <_ZN5Print5printEPKc>:
    3986:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <_ZN5Print5writeEPKc>

0000398a <_ZN5Print5printEc>:
    398a:	dc 01       	movw	r26, r24
    398c:	ed 91       	ld	r30, X+
    398e:	fc 91       	ld	r31, X
    3990:	01 90       	ld	r0, Z+
    3992:	f0 81       	ld	r31, Z
    3994:	e0 2d       	mov	r30, r0
    3996:	09 94       	ijmp

00003998 <_ZN5Print7printlnEv>:
    3998:	62 ea       	ldi	r22, 0xA2	; 162
    399a:	72 e0       	ldi	r23, 0x02	; 2
    399c:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <_ZN5Print5writeEPKc>

000039a0 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	ec 01       	movw	r28, r24
    39aa:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    39ae:	8c 01       	movw	r16, r24
    39b0:	ce 01       	movw	r24, r28
    39b2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    39b6:	80 0f       	add	r24, r16
    39b8:	91 1f       	adc	r25, r17
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	08 95       	ret

000039c4 <_ZN5Print7printlnEPKc>:
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	ec 01       	movw	r28, r24
    39ce:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5writeEPKc>
    39d2:	8c 01       	movw	r16, r24
    39d4:	ce 01       	movw	r24, r28
    39d6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    39da:	80 0f       	add	r24, r16
    39dc:	91 1f       	adc	r25, r17
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	1f 91       	pop	r17
    39e4:	0f 91       	pop	r16
    39e6:	08 95       	ret

000039e8 <_ZN5Print7printlnEc>:
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	ec 01       	movw	r28, r24
    39f2:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZN5Print5printEc>
    39f6:	8c 01       	movw	r16, r24
    39f8:	ce 01       	movw	r24, r28
    39fa:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    39fe:	80 0f       	add	r24, r16
    3a00:	91 1f       	adc	r25, r17
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	08 95       	ret

00003a0c <_ZN5Print11printNumberEmh>:
    3a0c:	8f 92       	push	r8
    3a0e:	9f 92       	push	r9
    3a10:	af 92       	push	r10
    3a12:	bf 92       	push	r11
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	a1 97       	sbiw	r28, 0x21	; 33
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	7c 01       	movw	r14, r24
    3a32:	fa 01       	movw	r30, r20
    3a34:	cb 01       	movw	r24, r22
    3a36:	19 a2       	std	Y+33, r1	; 0x21
    3a38:	22 30       	cpi	r18, 0x02	; 2
    3a3a:	08 f4       	brcc	.+2      	; 0x3a3e <_ZN5Print11printNumberEmh+0x32>
    3a3c:	2a e0       	ldi	r18, 0x0A	; 10
    3a3e:	8e 01       	movw	r16, r28
    3a40:	0f 5d       	subi	r16, 0xDF	; 223
    3a42:	1f 4f       	sbci	r17, 0xFF	; 255
    3a44:	82 2e       	mov	r8, r18
    3a46:	91 2c       	mov	r9, r1
    3a48:	a1 2c       	mov	r10, r1
    3a4a:	b1 2c       	mov	r11, r1
    3a4c:	bf 01       	movw	r22, r30
    3a4e:	a5 01       	movw	r20, r10
    3a50:	94 01       	movw	r18, r8
    3a52:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodsi4>
    3a56:	f9 01       	movw	r30, r18
    3a58:	ca 01       	movw	r24, r20
    3a5a:	01 50       	subi	r16, 0x01	; 1
    3a5c:	11 09       	sbc	r17, r1
    3a5e:	6a 30       	cpi	r22, 0x0A	; 10
    3a60:	10 f4       	brcc	.+4      	; 0x3a66 <_ZN5Print11printNumberEmh+0x5a>
    3a62:	60 5d       	subi	r22, 0xD0	; 208
    3a64:	01 c0       	rjmp	.+2      	; 0x3a68 <_ZN5Print11printNumberEmh+0x5c>
    3a66:	69 5c       	subi	r22, 0xC9	; 201
    3a68:	d8 01       	movw	r26, r16
    3a6a:	6c 93       	st	X, r22
    3a6c:	23 2b       	or	r18, r19
    3a6e:	24 2b       	or	r18, r20
    3a70:	25 2b       	or	r18, r21
    3a72:	61 f7       	brne	.-40     	; 0x3a4c <_ZN5Print11printNumberEmh+0x40>
    3a74:	b8 01       	movw	r22, r16
    3a76:	c7 01       	movw	r24, r14
    3a78:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN5Print5writeEPKc>
    3a7c:	a1 96       	adiw	r28, 0x21	; 33
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	bf 90       	pop	r11
    3a96:	af 90       	pop	r10
    3a98:	9f 90       	pop	r9
    3a9a:	8f 90       	pop	r8
    3a9c:	08 95       	ret

00003a9e <_ZN5Print5printEmi>:
    3a9e:	21 15       	cp	r18, r1
    3aa0:	31 05       	cpc	r19, r1
    3aa2:	41 f4       	brne	.+16     	; 0x3ab4 <_ZN5Print5printEmi+0x16>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	ed 91       	ld	r30, X+
    3aa8:	fc 91       	ld	r31, X
    3aaa:	01 90       	ld	r0, Z+
    3aac:	f0 81       	ld	r31, Z
    3aae:	e0 2d       	mov	r30, r0
    3ab0:	64 2f       	mov	r22, r20
    3ab2:	09 94       	ijmp
    3ab4:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <_ZN5Print11printNumberEmh>

00003ab8 <_ZN5Print5printEhi>:
    3ab8:	9a 01       	movw	r18, r20
    3aba:	46 2f       	mov	r20, r22
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	70 e0       	ldi	r23, 0x00	; 0
    3ac2:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>

00003ac6 <_ZN5Print7printlnEhi>:
    3ac6:	0f 93       	push	r16
    3ac8:	1f 93       	push	r17
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	ec 01       	movw	r28, r24
    3ad0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <_ZN5Print5printEhi>
    3ad4:	8c 01       	movw	r16, r24
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    3adc:	80 0f       	add	r24, r16
    3ade:	91 1f       	adc	r25, r17
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	08 95       	ret

00003aea <_ZN5Print5printEji>:
    3aea:	9a 01       	movw	r18, r20
    3aec:	ab 01       	movw	r20, r22
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>

00003af6 <_ZN5Print7printlnEji>:
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	ec 01       	movw	r28, r24
    3b00:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN5Print5printEji>
    3b04:	8c 01       	movw	r16, r24
    3b06:	ce 01       	movw	r24, r28
    3b08:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    3b0c:	80 0f       	add	r24, r16
    3b0e:	91 1f       	adc	r25, r17
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	08 95       	ret

00003b1a <_ZN5Print7printlnEmi>:
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	ec 01       	movw	r28, r24
    3b24:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>
    3b28:	8c 01       	movw	r16, r24
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    3b30:	80 0f       	add	r24, r16
    3b32:	91 1f       	adc	r25, r17
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	08 95       	ret

00003b3e <_ZN5Print5printEli>:
    3b3e:	cf 92       	push	r12
    3b40:	df 92       	push	r13
    3b42:	ef 92       	push	r14
    3b44:	ff 92       	push	r15
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
    3b4e:	21 15       	cp	r18, r1
    3b50:	31 05       	cpc	r19, r1
    3b52:	81 f4       	brne	.+32     	; 0x3b74 <_ZN5Print5printEli+0x36>
    3b54:	dc 01       	movw	r26, r24
    3b56:	ed 91       	ld	r30, X+
    3b58:	fc 91       	ld	r31, X
    3b5a:	01 90       	ld	r0, Z+
    3b5c:	f0 81       	ld	r31, Z
    3b5e:	e0 2d       	mov	r30, r0
    3b60:	64 2f       	mov	r22, r20
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	1f 91       	pop	r17
    3b68:	0f 91       	pop	r16
    3b6a:	ff 90       	pop	r15
    3b6c:	ef 90       	pop	r14
    3b6e:	df 90       	pop	r13
    3b70:	cf 90       	pop	r12
    3b72:	09 94       	ijmp
    3b74:	2a 30       	cpi	r18, 0x0A	; 10
    3b76:	31 05       	cpc	r19, r1
    3b78:	01 f5       	brne	.+64     	; 0x3bba <_ZN5Print5printEli+0x7c>
    3b7a:	77 ff       	sbrs	r23, 7
    3b7c:	1d c0       	rjmp	.+58     	; 0x3bb8 <_ZN5Print5printEli+0x7a>
    3b7e:	6a 01       	movw	r12, r20
    3b80:	7b 01       	movw	r14, r22
    3b82:	ec 01       	movw	r28, r24
    3b84:	6d e2       	ldi	r22, 0x2D	; 45
    3b86:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZN5Print5printEc>
    3b8a:	8c 01       	movw	r16, r24
    3b8c:	44 27       	eor	r20, r20
    3b8e:	55 27       	eor	r21, r21
    3b90:	ba 01       	movw	r22, r20
    3b92:	4c 19       	sub	r20, r12
    3b94:	5d 09       	sbc	r21, r13
    3b96:	6e 09       	sbc	r22, r14
    3b98:	7f 09       	sbc	r23, r15
    3b9a:	2a e0       	ldi	r18, 0x0A	; 10
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <_ZN5Print11printNumberEmh>
    3ba2:	80 0f       	add	r24, r16
    3ba4:	91 1f       	adc	r25, r17
    3ba6:	df 91       	pop	r29
    3ba8:	cf 91       	pop	r28
    3baa:	1f 91       	pop	r17
    3bac:	0f 91       	pop	r16
    3bae:	ff 90       	pop	r15
    3bb0:	ef 90       	pop	r14
    3bb2:	df 90       	pop	r13
    3bb4:	cf 90       	pop	r12
    3bb6:	08 95       	ret
    3bb8:	2a e0       	ldi	r18, 0x0A	; 10
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	ff 90       	pop	r15
    3bc4:	ef 90       	pop	r14
    3bc6:	df 90       	pop	r13
    3bc8:	cf 90       	pop	r12
    3bca:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <_ZN5Print11printNumberEmh>

00003bce <_ZN5Print5printEii>:
    3bce:	9a 01       	movw	r18, r20
    3bd0:	ab 01       	movw	r20, r22
    3bd2:	77 0f       	add	r23, r23
    3bd4:	66 0b       	sbc	r22, r22
    3bd6:	77 0b       	sbc	r23, r23
    3bd8:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <_ZN5Print5printEli>

00003bdc <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3be6:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <_ZN5Print5printEli>
    3bea:	8c 01       	movw	r16, r24
  n += println();
    3bec:	ce 01       	movw	r24, r28
    3bee:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
  return n;
}
    3bf2:	80 0f       	add	r24, r16
    3bf4:	91 1f       	adc	r25, r17
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	1f 91       	pop	r17
    3bfc:	0f 91       	pop	r16
    3bfe:	08 95       	ret

00003c00 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3c00:	1f 92       	push	r1
    3c02:	0f 92       	push	r0
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	0f 92       	push	r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	2f 93       	push	r18
    3c0c:	3f 93       	push	r19
    3c0e:	8f 93       	push	r24
    3c10:	9f 93       	push	r25
    3c12:	af 93       	push	r26
    3c14:	bf 93       	push	r27
    3c16:	80 91 f9 07 	lds	r24, 0x07F9	; 0x8007f9 <timer0_millis>
    3c1a:	90 91 fa 07 	lds	r25, 0x07FA	; 0x8007fa <timer0_millis+0x1>
    3c1e:	a0 91 fb 07 	lds	r26, 0x07FB	; 0x8007fb <timer0_millis+0x2>
    3c22:	b0 91 fc 07 	lds	r27, 0x07FC	; 0x8007fc <timer0_millis+0x3>
    3c26:	30 91 f8 07 	lds	r19, 0x07F8	; 0x8007f8 <timer0_fract>
    3c2a:	23 e0       	ldi	r18, 0x03	; 3
    3c2c:	23 0f       	add	r18, r19
    3c2e:	2d 37       	cpi	r18, 0x7D	; 125
    3c30:	20 f4       	brcc	.+8      	; 0x3c3a <__vector_16+0x3a>
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	a1 1d       	adc	r26, r1
    3c36:	b1 1d       	adc	r27, r1
    3c38:	05 c0       	rjmp	.+10     	; 0x3c44 <__vector_16+0x44>
    3c3a:	26 e8       	ldi	r18, 0x86	; 134
    3c3c:	23 0f       	add	r18, r19
    3c3e:	02 96       	adiw	r24, 0x02	; 2
    3c40:	a1 1d       	adc	r26, r1
    3c42:	b1 1d       	adc	r27, r1
    3c44:	20 93 f8 07 	sts	0x07F8, r18	; 0x8007f8 <timer0_fract>
    3c48:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <timer0_millis>
    3c4c:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <timer0_millis+0x1>
    3c50:	a0 93 fb 07 	sts	0x07FB, r26	; 0x8007fb <timer0_millis+0x2>
    3c54:	b0 93 fc 07 	sts	0x07FC, r27	; 0x8007fc <timer0_millis+0x3>
    3c58:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <timer0_overflow_count>
    3c5c:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <timer0_overflow_count+0x1>
    3c60:	a0 91 ff 07 	lds	r26, 0x07FF	; 0x8007ff <timer0_overflow_count+0x2>
    3c64:	b0 91 00 08 	lds	r27, 0x0800	; 0x800800 <timer0_overflow_count+0x3>
    3c68:	01 96       	adiw	r24, 0x01	; 1
    3c6a:	a1 1d       	adc	r26, r1
    3c6c:	b1 1d       	adc	r27, r1
    3c6e:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <timer0_overflow_count>
    3c72:	90 93 fe 07 	sts	0x07FE, r25	; 0x8007fe <timer0_overflow_count+0x1>
    3c76:	a0 93 ff 07 	sts	0x07FF, r26	; 0x8007ff <timer0_overflow_count+0x2>
    3c7a:	b0 93 00 08 	sts	0x0800, r27	; 0x800800 <timer0_overflow_count+0x3>
    3c7e:	bf 91       	pop	r27
    3c80:	af 91       	pop	r26
    3c82:	9f 91       	pop	r25
    3c84:	8f 91       	pop	r24
    3c86:	3f 91       	pop	r19
    3c88:	2f 91       	pop	r18
    3c8a:	0f 90       	pop	r0
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	0f 90       	pop	r0
    3c90:	1f 90       	pop	r1
    3c92:	18 95       	reti

00003c94 <micros>:
    3c94:	3f b7       	in	r19, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <timer0_overflow_count>
    3c9c:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <timer0_overflow_count+0x1>
    3ca0:	a0 91 ff 07 	lds	r26, 0x07FF	; 0x8007ff <timer0_overflow_count+0x2>
    3ca4:	b0 91 00 08 	lds	r27, 0x0800	; 0x800800 <timer0_overflow_count+0x3>
    3ca8:	26 b5       	in	r18, 0x26	; 38
    3caa:	a8 9b       	sbis	0x15, 0	; 21
    3cac:	05 c0       	rjmp	.+10     	; 0x3cb8 <micros+0x24>
    3cae:	2f 3f       	cpi	r18, 0xFF	; 255
    3cb0:	19 f0       	breq	.+6      	; 0x3cb8 <micros+0x24>
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	a1 1d       	adc	r26, r1
    3cb6:	b1 1d       	adc	r27, r1
    3cb8:	3f bf       	out	0x3f, r19	; 63
    3cba:	ba 2f       	mov	r27, r26
    3cbc:	a9 2f       	mov	r26, r25
    3cbe:	98 2f       	mov	r25, r24
    3cc0:	88 27       	eor	r24, r24
    3cc2:	82 0f       	add	r24, r18
    3cc4:	91 1d       	adc	r25, r1
    3cc6:	a1 1d       	adc	r26, r1
    3cc8:	b1 1d       	adc	r27, r1
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	42 e0       	ldi	r20, 0x02	; 2
    3cd0:	66 0f       	add	r22, r22
    3cd2:	77 1f       	adc	r23, r23
    3cd4:	88 1f       	adc	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	4a 95       	dec	r20
    3cda:	d1 f7       	brne	.-12     	; 0x3cd0 <micros+0x3c>
    3cdc:	08 95       	ret

00003cde <delay>:
    3cde:	8f 92       	push	r8
    3ce0:	9f 92       	push	r9
    3ce2:	af 92       	push	r10
    3ce4:	bf 92       	push	r11
    3ce6:	cf 92       	push	r12
    3ce8:	df 92       	push	r13
    3cea:	ef 92       	push	r14
    3cec:	ff 92       	push	r15
    3cee:	6b 01       	movw	r12, r22
    3cf0:	7c 01       	movw	r14, r24
    3cf2:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <micros>
    3cf6:	4b 01       	movw	r8, r22
    3cf8:	5c 01       	movw	r10, r24
    3cfa:	c1 14       	cp	r12, r1
    3cfc:	d1 04       	cpc	r13, r1
    3cfe:	e1 04       	cpc	r14, r1
    3d00:	f1 04       	cpc	r15, r1
    3d02:	01 f1       	breq	.+64     	; 0x3d44 <delay+0x66>
    3d04:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <yield>
    3d08:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <micros>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	88 19       	sub	r24, r8
    3d12:	99 09       	sbc	r25, r9
    3d14:	aa 09       	sbc	r26, r10
    3d16:	bb 09       	sbc	r27, r11
    3d18:	88 3e       	cpi	r24, 0xE8	; 232
    3d1a:	93 40       	sbci	r25, 0x03	; 3
    3d1c:	a1 05       	cpc	r26, r1
    3d1e:	b1 05       	cpc	r27, r1
    3d20:	60 f3       	brcs	.-40     	; 0x3cfa <delay+0x1c>
    3d22:	21 e0       	ldi	r18, 0x01	; 1
    3d24:	c2 1a       	sub	r12, r18
    3d26:	d1 08       	sbc	r13, r1
    3d28:	e1 08       	sbc	r14, r1
    3d2a:	f1 08       	sbc	r15, r1
    3d2c:	88 ee       	ldi	r24, 0xE8	; 232
    3d2e:	88 0e       	add	r8, r24
    3d30:	83 e0       	ldi	r24, 0x03	; 3
    3d32:	98 1e       	adc	r9, r24
    3d34:	a1 1c       	adc	r10, r1
    3d36:	b1 1c       	adc	r11, r1
    3d38:	c1 14       	cp	r12, r1
    3d3a:	d1 04       	cpc	r13, r1
    3d3c:	e1 04       	cpc	r14, r1
    3d3e:	f1 04       	cpc	r15, r1
    3d40:	19 f7       	brne	.-58     	; 0x3d08 <delay+0x2a>
    3d42:	db cf       	rjmp	.-74     	; 0x3cfa <delay+0x1c>
    3d44:	ff 90       	pop	r15
    3d46:	ef 90       	pop	r14
    3d48:	df 90       	pop	r13
    3d4a:	cf 90       	pop	r12
    3d4c:	bf 90       	pop	r11
    3d4e:	af 90       	pop	r10
    3d50:	9f 90       	pop	r9
    3d52:	8f 90       	pop	r8
    3d54:	08 95       	ret

00003d56 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3d56:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3d58:	84 b5       	in	r24, 0x24	; 36
    3d5a:	82 60       	ori	r24, 0x02	; 2
    3d5c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3d5e:	84 b5       	in	r24, 0x24	; 36
    3d60:	81 60       	ori	r24, 0x01	; 1
    3d62:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3d64:	85 b5       	in	r24, 0x25	; 37
    3d66:	82 60       	ori	r24, 0x02	; 2
    3d68:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3d6a:	85 b5       	in	r24, 0x25	; 37
    3d6c:	81 60       	ori	r24, 0x01	; 1
    3d6e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3d70:	ee e6       	ldi	r30, 0x6E	; 110
    3d72:	f0 e0       	ldi	r31, 0x00	; 0
    3d74:	80 81       	ld	r24, Z
    3d76:	81 60       	ori	r24, 0x01	; 1
    3d78:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3d7a:	e1 e8       	ldi	r30, 0x81	; 129
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3d80:	80 81       	ld	r24, Z
    3d82:	82 60       	ori	r24, 0x02	; 2
    3d84:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3d86:	80 81       	ld	r24, Z
    3d88:	81 60       	ori	r24, 0x01	; 1
    3d8a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3d8c:	e0 e8       	ldi	r30, 0x80	; 128
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	81 60       	ori	r24, 0x01	; 1
    3d94:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3d96:	e1 eb       	ldi	r30, 0xB1	; 177
    3d98:	f0 e0       	ldi	r31, 0x00	; 0
    3d9a:	80 81       	ld	r24, Z
    3d9c:	84 60       	ori	r24, 0x04	; 4
    3d9e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3da0:	e0 eb       	ldi	r30, 0xB0	; 176
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	80 81       	ld	r24, Z
    3da6:	81 60       	ori	r24, 0x01	; 1
    3da8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3daa:	ea e7       	ldi	r30, 0x7A	; 122
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	80 81       	ld	r24, Z
    3db0:	84 60       	ori	r24, 0x04	; 4
    3db2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3db4:	80 81       	ld	r24, Z
    3db6:	82 60       	ori	r24, 0x02	; 2
    3db8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3dba:	80 81       	ld	r24, Z
    3dbc:	81 60       	ori	r24, 0x01	; 1
    3dbe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3dc0:	80 81       	ld	r24, Z
    3dc2:	80 68       	ori	r24, 0x80	; 128
    3dc4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3dc6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3dca:	08 95       	ret

00003dcc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3dcc:	8e 30       	cpi	r24, 0x0E	; 14
    3dce:	08 f0       	brcs	.+2      	; 0x3dd2 <analogRead+0x6>
    3dd0:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3dd2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    3dd6:	90 e4       	ldi	r25, 0x40	; 64
    3dd8:	29 9f       	mul	r18, r25
    3dda:	90 01       	movw	r18, r0
    3ddc:	11 24       	eor	r1, r1
    3dde:	87 70       	andi	r24, 0x07	; 7
    3de0:	82 2b       	or	r24, r18
    3de2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3de6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3dea:	80 64       	ori	r24, 0x40	; 64
    3dec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3df0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3df4:	86 fd       	sbrc	r24, 6
    3df6:	fc cf       	rjmp	.-8      	; 0x3df0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3df8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3dfc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3e00:	90 e0       	ldi	r25, 0x00	; 0
}
    3e02:	92 2b       	or	r25, r18
    3e04:	08 95       	ret

00003e06 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3e06:	83 30       	cpi	r24, 0x03	; 3
    3e08:	81 f0       	breq	.+32     	; 0x3e2a <turnOffPWM+0x24>
    3e0a:	28 f4       	brcc	.+10     	; 0x3e16 <turnOffPWM+0x10>
    3e0c:	81 30       	cpi	r24, 0x01	; 1
    3e0e:	99 f0       	breq	.+38     	; 0x3e36 <turnOffPWM+0x30>
    3e10:	82 30       	cpi	r24, 0x02	; 2
    3e12:	a1 f0       	breq	.+40     	; 0x3e3c <turnOffPWM+0x36>
    3e14:	08 95       	ret
    3e16:	87 30       	cpi	r24, 0x07	; 7
    3e18:	a9 f0       	breq	.+42     	; 0x3e44 <turnOffPWM+0x3e>
    3e1a:	88 30       	cpi	r24, 0x08	; 8
    3e1c:	b9 f0       	breq	.+46     	; 0x3e4c <turnOffPWM+0x46>
    3e1e:	84 30       	cpi	r24, 0x04	; 4
    3e20:	d1 f4       	brne	.+52     	; 0x3e56 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3e22:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3e26:	8f 7d       	andi	r24, 0xDF	; 223
    3e28:	03 c0       	rjmp	.+6      	; 0x3e30 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3e2a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3e2e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3e30:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3e34:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3e36:	84 b5       	in	r24, 0x24	; 36
    3e38:	8f 77       	andi	r24, 0x7F	; 127
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3e3c:	84 b5       	in	r24, 0x24	; 36
    3e3e:	8f 7d       	andi	r24, 0xDF	; 223
    3e40:	84 bd       	out	0x24, r24	; 36
    3e42:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3e44:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3e48:	8f 77       	andi	r24, 0x7F	; 127
    3e4a:	03 c0       	rjmp	.+6      	; 0x3e52 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3e4c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3e50:	8f 7d       	andi	r24, 0xDF	; 223
    3e52:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3e56:	08 95       	ret

00003e58 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	fc 01       	movw	r30, r24
    3e60:	e8 5c       	subi	r30, 0xC8	; 200
    3e62:	fb 4f       	sbci	r31, 0xFB	; 251
    3e64:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3e66:	fc 01       	movw	r30, r24
    3e68:	e4 5b       	subi	r30, 0xB4	; 180
    3e6a:	fb 4f       	sbci	r31, 0xFB	; 251
    3e6c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3e6e:	88 23       	and	r24, r24
    3e70:	61 f1       	breq	.+88     	; 0x3eca <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	fc 01       	movw	r30, r24
    3e7a:	ec 58       	subi	r30, 0x8C	; 140
    3e7c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e7e:	c5 91       	lpm	r28, Z+
    3e80:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3e82:	fc 01       	movw	r30, r24
    3e84:	e6 59       	subi	r30, 0x96	; 150
    3e86:	fb 4f       	sbci	r31, 0xFB	; 251
    3e88:	a5 91       	lpm	r26, Z+
    3e8a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3e8c:	61 11       	cpse	r22, r1
    3e8e:	09 c0       	rjmp	.+18     	; 0x3ea2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3e90:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3e92:	f8 94       	cli
		*reg &= ~bit;
    3e94:	88 81       	ld	r24, Y
    3e96:	20 95       	com	r18
    3e98:	82 23       	and	r24, r18
    3e9a:	88 83       	st	Y, r24
		*out &= ~bit;
    3e9c:	ec 91       	ld	r30, X
    3e9e:	2e 23       	and	r18, r30
    3ea0:	0b c0       	rjmp	.+22     	; 0x3eb8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3ea2:	62 30       	cpi	r22, 0x02	; 2
    3ea4:	61 f4       	brne	.+24     	; 0x3ebe <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3ea6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3ea8:	f8 94       	cli
		*reg &= ~bit;
    3eaa:	88 81       	ld	r24, Y
    3eac:	32 2f       	mov	r19, r18
    3eae:	30 95       	com	r19
    3eb0:	83 23       	and	r24, r19
    3eb2:	88 83       	st	Y, r24
		*out |= bit;
    3eb4:	ec 91       	ld	r30, X
    3eb6:	2e 2b       	or	r18, r30
    3eb8:	2c 93       	st	X, r18
		SREG = oldSREG;
    3eba:	9f bf       	out	0x3f, r25	; 63
    3ebc:	06 c0       	rjmp	.+12     	; 0x3eca <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3ebe:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3ec0:	f8 94       	cli
		*reg |= bit;
    3ec2:	e8 81       	ld	r30, Y
    3ec4:	2e 2b       	or	r18, r30
    3ec6:	28 83       	st	Y, r18
		SREG = oldSREG;
    3ec8:	8f bf       	out	0x3f, r24	; 63
	}
}
    3eca:	df 91       	pop	r29
    3ecc:	cf 91       	pop	r28
    3ece:	08 95       	ret

00003ed0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3ed0:	1f 93       	push	r17
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3ed6:	28 2f       	mov	r18, r24
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	f9 01       	movw	r30, r18
    3edc:	ec 5d       	subi	r30, 0xDC	; 220
    3ede:	fb 4f       	sbci	r31, 0xFB	; 251
    3ee0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3ee2:	f9 01       	movw	r30, r18
    3ee4:	e8 5c       	subi	r30, 0xC8	; 200
    3ee6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ee8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3eea:	f9 01       	movw	r30, r18
    3eec:	e4 5b       	subi	r30, 0xB4	; 180
    3eee:	fb 4f       	sbci	r31, 0xFB	; 251
    3ef0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3ef2:	cc 23       	and	r28, r28
    3ef4:	c1 f0       	breq	.+48     	; 0x3f26 <digitalWrite+0x56>
    3ef6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3ef8:	81 11       	cpse	r24, r1
    3efa:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <turnOffPWM>

	out = portOutputRegister(port);
    3efe:	ec 2f       	mov	r30, r28
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	ee 0f       	add	r30, r30
    3f04:	ff 1f       	adc	r31, r31
    3f06:	e6 59       	subi	r30, 0x96	; 150
    3f08:	fb 4f       	sbci	r31, 0xFB	; 251
    3f0a:	a5 91       	lpm	r26, Z+
    3f0c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3f0e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3f10:	f8 94       	cli

	if (val == LOW) {
    3f12:	11 11       	cpse	r17, r1
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <digitalWrite+0x4e>
		*out &= ~bit;
    3f16:	8c 91       	ld	r24, X
    3f18:	d0 95       	com	r29
    3f1a:	d8 23       	and	r29, r24
    3f1c:	02 c0       	rjmp	.+4      	; 0x3f22 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3f1e:	ec 91       	ld	r30, X
    3f20:	de 2b       	or	r29, r30
    3f22:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3f24:	9f bf       	out	0x3f, r25	; 63
}
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	1f 91       	pop	r17
    3f2c:	08 95       	ret

00003f2e <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3f2e:	88 5e       	subi	r24, 0xE8	; 232
    3f30:	9e 4f       	sbci	r25, 0xFE	; 254
    3f32:	dc 01       	movw	r26, r24
    3f34:	8d 91       	ld	r24, X+
    3f36:	9c 91       	ld	r25, X
    3f38:	dc 01       	movw	r26, r24
    3f3a:	ed 91       	ld	r30, X+
    3f3c:	fc 91       	ld	r31, X
    3f3e:	04 80       	ldd	r0, Z+4	; 0x04
    3f40:	f5 81       	ldd	r31, Z+5	; 0x05
    3f42:	e0 2d       	mov	r30, r0
    3f44:	09 94       	ijmp

00003f46 <_ZN13Adafruit_FONA5writeEh>:
    3f46:	88 5e       	subi	r24, 0xE8	; 232
    3f48:	9e 4f       	sbci	r25, 0xFE	; 254
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	8d 91       	ld	r24, X+
    3f4e:	9c 91       	ld	r25, X
    3f50:	dc 01       	movw	r26, r24
    3f52:	ed 91       	ld	r30, X+
    3f54:	fc 91       	ld	r31, X
    3f56:	01 90       	ld	r0, Z+
    3f58:	f0 81       	ld	r31, Z
    3f5a:	e0 2d       	mov	r30, r0
    3f5c:	09 94       	ijmp

00003f5e <_ZN13Adafruit_FONA4readEv>:
    3f5e:	88 5e       	subi	r24, 0xE8	; 232
    3f60:	9e 4f       	sbci	r25, 0xFE	; 254
    3f62:	dc 01       	movw	r26, r24
    3f64:	8d 91       	ld	r24, X+
    3f66:	9c 91       	ld	r25, X
    3f68:	dc 01       	movw	r26, r24
    3f6a:	ed 91       	ld	r30, X+
    3f6c:	fc 91       	ld	r31, X
    3f6e:	06 80       	ldd	r0, Z+6	; 0x06
    3f70:	f7 81       	ldd	r31, Z+7	; 0x07
    3f72:	e0 2d       	mov	r30, r0
    3f74:	09 94       	ijmp

00003f76 <_ZN13Adafruit_FONA4peekEv>:
    3f76:	88 5e       	subi	r24, 0xE8	; 232
    3f78:	9e 4f       	sbci	r25, 0xFE	; 254
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	8d 91       	ld	r24, X+
    3f7e:	9c 91       	ld	r25, X
    3f80:	dc 01       	movw	r26, r24
    3f82:	ed 91       	ld	r30, X+
    3f84:	fc 91       	ld	r31, X
    3f86:	00 84       	ldd	r0, Z+8	; 0x08
    3f88:	f1 85       	ldd	r31, Z+9	; 0x09
    3f8a:	e0 2d       	mov	r30, r0
    3f8c:	09 94       	ijmp

00003f8e <_ZN13Adafruit_FONA5flushEv>:
    3f8e:	88 5e       	subi	r24, 0xE8	; 232
    3f90:	9e 4f       	sbci	r25, 0xFE	; 254
    3f92:	dc 01       	movw	r26, r24
    3f94:	8d 91       	ld	r24, X+
    3f96:	9c 91       	ld	r25, X
    3f98:	dc 01       	movw	r26, r24
    3f9a:	ed 91       	ld	r30, X+
    3f9c:	fc 91       	ld	r31, X
    3f9e:	02 84       	ldd	r0, Z+10	; 0x0a
    3fa0:	f3 85       	ldd	r31, Z+11	; 0x0b
    3fa2:	e0 2d       	mov	r30, r0
    3fa4:	09 94       	ijmp

00003fa6 <_ZN13Adafruit_FONAC1Ea>:
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	13 82       	std	Z+3, r1	; 0x03
    3faa:	12 82       	std	Z+2, r1	; 0x02
    3fac:	88 ee       	ldi	r24, 0xE8	; 232
    3fae:	93 e0       	ldi	r25, 0x03	; 3
    3fb0:	a0 e0       	ldi	r26, 0x00	; 0
    3fb2:	b0 e0       	ldi	r27, 0x00	; 0
    3fb4:	84 83       	std	Z+4, r24	; 0x04
    3fb6:	95 83       	std	Z+5, r25	; 0x05
    3fb8:	a6 83       	std	Z+6, r26	; 0x06
    3fba:	b7 83       	std	Z+7, r27	; 0x07
    3fbc:	88 e1       	ldi	r24, 0x18	; 24
    3fbe:	93 e0       	ldi	r25, 0x03	; 3
    3fc0:	91 83       	std	Z+1, r25	; 0x01
    3fc2:	80 83       	st	Z, r24
    3fc4:	64 87       	std	Z+12, r22	; 0x0c
    3fc6:	df 01       	movw	r26, r30
    3fc8:	a3 5f       	subi	r26, 0xF3	; 243
    3fca:	be 4f       	sbci	r27, 0xFE	; 254
    3fcc:	8e ed       	ldi	r24, 0xDE	; 222
    3fce:	97 e0       	ldi	r25, 0x07	; 7
    3fd0:	11 96       	adiw	r26, 0x01	; 1
    3fd2:	9c 93       	st	X, r25
    3fd4:	8e 93       	st	-X, r24
    3fd6:	12 96       	adiw	r26, 0x02	; 2
    3fd8:	11 96       	adiw	r26, 0x01	; 1
    3fda:	1c 92       	st	X, r1
    3fdc:	1e 92       	st	-X, r1
    3fde:	12 96       	adiw	r26, 0x02	; 2
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	1c 92       	st	X, r1
    3fe4:	1e 92       	st	-X, r1
    3fe6:	17 96       	adiw	r26, 0x07	; 7
    3fe8:	11 96       	adiw	r26, 0x01	; 1
    3fea:	1c 92       	st	X, r1
    3fec:	1e 92       	st	-X, r1
    3fee:	15 97       	sbiw	r26, 0x05	; 5
    3ff0:	1c 92       	st	X, r1
    3ff2:	11 96       	adiw	r26, 0x01	; 1
    3ff4:	89 ed       	ldi	r24, 0xD9	; 217
    3ff6:	97 e0       	ldi	r25, 0x07	; 7
    3ff8:	8d 93       	st	X+, r24
    3ffa:	9c 93       	st	X, r25
    3ffc:	ea 5e       	subi	r30, 0xEA	; 234
    3ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    4000:	86 ed       	ldi	r24, 0xD6	; 214
    4002:	97 e0       	ldi	r25, 0x07	; 7
    4004:	91 83       	std	Z+1, r25	; 0x01
    4006:	80 83       	st	Z, r24
    4008:	08 95       	ret

0000400a <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    400a:	fc 01       	movw	r30, r24
    400c:	e3 5f       	subi	r30, 0xF3	; 243
    400e:	fe 4f       	sbci	r31, 0xFE	; 254
    4010:	71 83       	std	Z+1, r23	; 0x01
    4012:	60 83       	st	Z, r22
    4014:	32 96       	adiw	r30, 0x02	; 2
    4016:	51 83       	std	Z+1, r21	; 0x01
    4018:	40 83       	st	Z, r20
    401a:	32 96       	adiw	r30, 0x02	; 2
    401c:	31 83       	std	Z+1, r19	; 0x01
    401e:	20 83       	st	Z, r18
    4020:	08 95       	ret

00004022 <_ZN13Adafruit_FONA10flushInputEv>:
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	ec 01       	movw	r28, r24
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	8c 01       	movw	r16, r24
    4032:	0f 5f       	subi	r16, 0xFF	; 255
    4034:	1f 4f       	sbci	r17, 0xFF	; 255
    4036:	88 97       	sbiw	r24, 0x28	; 40
    4038:	d8 f4       	brcc	.+54     	; 0x4070 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    403a:	e8 81       	ld	r30, Y
    403c:	f9 81       	ldd	r31, Y+1	; 0x01
    403e:	04 80       	ldd	r0, Z+4	; 0x04
    4040:	f5 81       	ldd	r31, Z+5	; 0x05
    4042:	e0 2d       	mov	r30, r0
    4044:	ce 01       	movw	r24, r28
    4046:	09 95       	icall
    4048:	89 2b       	or	r24, r25
    404a:	51 f0       	breq	.+20     	; 0x4060 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    404c:	e8 81       	ld	r30, Y
    404e:	f9 81       	ldd	r31, Y+1	; 0x01
    4050:	06 80       	ldd	r0, Z+6	; 0x06
    4052:	f7 81       	ldd	r31, Z+7	; 0x07
    4054:	e0 2d       	mov	r30, r0
    4056:	ce 01       	movw	r24, r28
    4058:	09 95       	icall
    405a:	00 e0       	ldi	r16, 0x00	; 0
    405c:	10 e0       	ldi	r17, 0x00	; 0
    405e:	ed cf       	rjmp	.-38     	; 0x403a <_ZN13Adafruit_FONA10flushInputEv+0x18>
    4060:	61 e0       	ldi	r22, 0x01	; 1
    4062:	70 e0       	ldi	r23, 0x00	; 0
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    406c:	c8 01       	movw	r24, r16
    406e:	e0 cf       	rjmp	.-64     	; 0x4030 <_ZN13Adafruit_FONA10flushInputEv+0xe>
    4070:	df 91       	pop	r29
    4072:	cf 91       	pop	r28
    4074:	1f 91       	pop	r17
    4076:	0f 91       	pop	r16
    4078:	08 95       	ret

0000407a <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    407a:	ff 92       	push	r15
    407c:	0f 93       	push	r16
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	ec 01       	movw	r28, r24
    4086:	8b 01       	movw	r16, r22
    4088:	f4 2e       	mov	r15, r20
    408a:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    408e:	6c e8       	ldi	r22, 0x8C	; 140
    4090:	75 e0       	ldi	r23, 0x05	; 5
    4092:	8b e5       	ldi	r24, 0x5B	; 91
    4094:	97 e0       	ldi	r25, 0x07	; 7
    4096:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    409a:	6e e7       	ldi	r22, 0x7E	; 126
    409c:	75 e0       	ldi	r23, 0x05	; 5
    409e:	8b e5       	ldi	r24, 0x5B	; 91
    40a0:	97 e0       	ldi	r25, 0x07	; 7
    40a2:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    40a6:	b8 01       	movw	r22, r16
    40a8:	8b e5       	ldi	r24, 0x5B	; 91
    40aa:	97 e0       	ldi	r25, 0x07	; 7
    40ac:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    40b0:	62 e2       	ldi	r22, 0x22	; 34
    40b2:	8b e5       	ldi	r24, 0x5B	; 91
    40b4:	97 e0       	ldi	r25, 0x07	; 7
    40b6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN5Print7printlnEc>
    40ba:	c8 5e       	subi	r28, 0xE8	; 232
    40bc:	de 4f       	sbci	r29, 0xFE	; 254
    40be:	60 e7       	ldi	r22, 0x70	; 112
    40c0:	75 e0       	ldi	r23, 0x05	; 5
    40c2:	88 81       	ld	r24, Y
    40c4:	99 81       	ldd	r25, Y+1	; 0x01
    40c6:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    40ca:	b8 01       	movw	r22, r16
    40cc:	88 81       	ld	r24, Y
    40ce:	99 81       	ldd	r25, Y+1	; 0x01
    40d0:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    40d4:	88 81       	ld	r24, Y
    40d6:	99 81       	ldd	r25, Y+1	; 0x01
    40d8:	ff 20       	and	r15, r15
    40da:	19 f0       	breq	.+6      	; 0x40e2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    40dc:	6c e6       	ldi	r22, 0x6C	; 108
    40de:	75 e0       	ldi	r23, 0x05	; 5
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    40e2:	69 e6       	ldi	r22, 0x69	; 105
    40e4:	75 e0       	ldi	r23, 0x05	; 5
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>

000040f4 <_ZN13Adafruit_FONA8readlineEjb>:
    40f4:	9f 92       	push	r9
    40f6:	af 92       	push	r10
    40f8:	bf 92       	push	r11
    40fa:	cf 92       	push	r12
    40fc:	df 92       	push	r13
    40fe:	ef 92       	push	r14
    4100:	ff 92       	push	r15
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	7c 01       	movw	r14, r24
    410c:	94 2e       	mov	r9, r20
    410e:	8b 01       	movw	r16, r22
    4110:	00 0f       	add	r16, r16
    4112:	11 1f       	adc	r17, r17
    4114:	00 0f       	add	r16, r16
    4116:	11 1f       	adc	r17, r17
    4118:	c0 e0       	ldi	r28, 0x00	; 0
    411a:	d0 e0       	ldi	r29, 0x00	; 0
    411c:	57 01       	movw	r10, r14
    411e:	88 ee       	ldi	r24, 0xE8	; 232
    4120:	a8 1a       	sub	r10, r24
    4122:	8e ef       	ldi	r24, 0xFE	; 254
    4124:	b8 0a       	sbc	r11, r24
    4126:	01 15       	cp	r16, r1
    4128:	11 05       	cpc	r17, r1
    412a:	09 f4       	brne	.+2      	; 0x412e <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    412c:	50 c0       	rjmp	.+160    	; 0x41ce <_ZN13Adafruit_FONA8readlineEjb+0xda>
    412e:	ce 3f       	cpi	r28, 0xFE	; 254
    4130:	d1 05       	cpc	r29, r1
    4132:	80 f0       	brcs	.+32     	; 0x4154 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4134:	6e eb       	ldi	r22, 0xBE	; 190
    4136:	74 e0       	ldi	r23, 0x04	; 4
    4138:	22 c0       	rjmp	.+68     	; 0x417e <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    413a:	f5 01       	movw	r30, r10
    413c:	80 81       	ld	r24, Z
    413e:	91 81       	ldd	r25, Z+1	; 0x01
    4140:	dc 01       	movw	r26, r24
    4142:	ed 91       	ld	r30, X+
    4144:	fc 91       	ld	r31, X
    4146:	06 80       	ldd	r0, Z+6	; 0x06
    4148:	f7 81       	ldd	r31, Z+7	; 0x07
    414a:	e0 2d       	mov	r30, r0
    414c:	09 95       	icall
    414e:	6c 01       	movw	r12, r24
    4150:	8d 30       	cpi	r24, 0x0D	; 13
    4152:	69 f4       	brne	.+26     	; 0x416e <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    4154:	d5 01       	movw	r26, r10
    4156:	8d 91       	ld	r24, X+
    4158:	9c 91       	ld	r25, X
    415a:	dc 01       	movw	r26, r24
    415c:	ed 91       	ld	r30, X+
    415e:	fc 91       	ld	r31, X
    4160:	04 80       	ldd	r0, Z+4	; 0x04
    4162:	f5 81       	ldd	r31, Z+5	; 0x05
    4164:	e0 2d       	mov	r30, r0
    4166:	09 95       	icall
    4168:	89 2b       	or	r24, r25
    416a:	39 f7       	brne	.-50     	; 0x413a <_ZN13Adafruit_FONA8readlineEjb+0x46>
    416c:	26 c0       	rjmp	.+76     	; 0x41ba <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    416e:	8a 30       	cpi	r24, 0x0A	; 10
    4170:	59 f4       	brne	.+22     	; 0x4188 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4172:	20 97       	sbiw	r28, 0x00	; 0
    4174:	79 f3       	breq	.-34     	; 0x4154 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4176:	91 10       	cpse	r9, r1
    4178:	07 c0       	rjmp	.+14     	; 0x4188 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    417a:	66 eb       	ldi	r22, 0xB6	; 182
    417c:	74 e0       	ldi	r23, 0x04	; 4
    417e:	8b e5       	ldi	r24, 0x5B	; 91
    4180:	97 e0       	ldi	r25, 0x07	; 7
    4182:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4186:	23 c0       	rjmp	.+70     	; 0x41ce <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4188:	f7 01       	movw	r30, r14
    418a:	ec 0f       	add	r30, r28
    418c:	fd 1f       	adc	r31, r29
    418e:	c6 86       	std	Z+14, r12	; 0x0e
    4190:	b6 01       	movw	r22, r12
    4192:	77 27       	eor	r23, r23
    4194:	40 e1       	ldi	r20, 0x10	; 16
    4196:	50 e0       	ldi	r21, 0x00	; 0
    4198:	8b e5       	ldi	r24, 0x5B	; 91
    419a:	97 e0       	ldi	r25, 0x07	; 7
    419c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN5Print5printEii>
    41a0:	6b eb       	ldi	r22, 0xBB	; 187
    41a2:	72 e0       	ldi	r23, 0x02	; 2
    41a4:	8b e5       	ldi	r24, 0x5B	; 91
    41a6:	97 e0       	ldi	r25, 0x07	; 7
    41a8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    41ac:	6c 2d       	mov	r22, r12
    41ae:	8b e5       	ldi	r24, 0x5B	; 91
    41b0:	97 e0       	ldi	r25, 0x07	; 7
    41b2:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN5Print7printlnEc>
    41b6:	21 96       	adiw	r28, 0x01	; 1
    41b8:	cd cf       	rjmp	.-102    	; 0x4154 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    41ba:	01 50       	subi	r16, 0x01	; 1
    41bc:	11 09       	sbc	r17, r1
    41be:	e9 f2       	breq	.-70     	; 0x417a <_ZN13Adafruit_FONA8readlineEjb+0x86>
    41c0:	61 e0       	ldi	r22, 0x01	; 1
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    41cc:	ac cf       	rjmp	.-168    	; 0x4126 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    41ce:	f7 01       	movw	r30, r14
    41d0:	ec 0f       	add	r30, r28
    41d2:	fd 1f       	adc	r31, r29
    41d4:	16 86       	std	Z+14, r1	; 0x0e
    41d6:	8c 2f       	mov	r24, r28
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	1f 91       	pop	r17
    41de:	0f 91       	pop	r16
    41e0:	ff 90       	pop	r15
    41e2:	ef 90       	pop	r14
    41e4:	df 90       	pop	r13
    41e6:	cf 90       	pop	r12
    41e8:	bf 90       	pop	r11
    41ea:	af 90       	pop	r10
    41ec:	9f 90       	pop	r9
    41ee:	08 95       	ret

000041f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    41f0:	0f 93       	push	r16
    41f2:	1f 93       	push	r17
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	ec 01       	movw	r28, r24
    41fa:	8b 01       	movw	r16, r22
    41fc:	ba 01       	movw	r22, r20
    41fe:	40 e0       	ldi	r20, 0x00	; 0
    4200:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4204:	64 ec       	ldi	r22, 0xC4	; 196
    4206:	74 e0       	ldi	r23, 0x04	; 4
    4208:	8b e5       	ldi	r24, 0x5B	; 91
    420a:	97 e0       	ldi	r25, 0x07	; 7
    420c:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4210:	2e 96       	adiw	r28, 0x0e	; 14
    4212:	be 01       	movw	r22, r28
    4214:	8b e5       	ldi	r24, 0x5B	; 91
    4216:	97 e0       	ldi	r25, 0x07	; 7
    4218:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    421c:	b8 01       	movw	r22, r16
    421e:	ce 01       	movw	r24, r28
    4220:	0e 94 1a 30 	call	0x6034	; 0x6034 <strcmp_P>
    4224:	21 e0       	ldi	r18, 0x01	; 1
    4226:	89 2b       	or	r24, r25
    4228:	09 f0       	breq	.+2      	; 0x422c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	82 2f       	mov	r24, r18
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	08 95       	ret

00004238 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	ec 01       	movw	r28, r24
    423e:	fc 01       	movw	r30, r24
    4240:	e8 5e       	subi	r30, 0xE8	; 232
    4242:	fe 4f       	sbci	r31, 0xFE	; 254
    4244:	66 23       	and	r22, r22
    4246:	31 f0       	breq	.+12     	; 0x4254 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    4248:	62 e2       	ldi	r22, 0x22	; 34
    424a:	80 81       	ld	r24, Z
    424c:	91 81       	ldd	r25, Z+1	; 0x01
    424e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN5Print7printlnEc>
    4252:	04 c0       	rjmp	.+8      	; 0x425c <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    4254:	80 81       	ld	r24, Z
    4256:	91 81       	ldd	r25, Z+1	; 0x01
    4258:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    425c:	fe 01       	movw	r30, r28
    425e:	ea 5e       	subi	r30, 0xEA	; 234
    4260:	fe 4f       	sbci	r31, 0xFE	; 254
    4262:	60 81       	ld	r22, Z
    4264:	71 81       	ldd	r23, Z+1	; 0x01
    4266:	40 e1       	ldi	r20, 0x10	; 16
    4268:	57 e2       	ldi	r21, 0x27	; 39
    426a:	ce 01       	movw	r24, r28
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00004274 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	ec 01       	movw	r28, r24
    427e:	8a 01       	movw	r16, r20
    4280:	41 e0       	ldi	r20, 0x01	; 1
    4282:	0e 94 3d 20 	call	0x407a	; 0x407a <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    4286:	fe 01       	movw	r30, r28
    4288:	e8 5e       	subi	r30, 0xE8	; 232
    428a:	fe 4f       	sbci	r31, 0xFE	; 254
    428c:	b8 01       	movw	r22, r16
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    4296:	61 e0       	ldi	r22, 0x01	; 1
    4298:	ce 01       	movw	r24, r28
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000042a6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	ec 01       	movw	r28, r24
    42b0:	8a 01       	movw	r16, r20
    42b2:	41 e0       	ldi	r20, 0x01	; 1
    42b4:	0e 94 3d 20 	call	0x407a	; 0x407a <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    42b8:	fe 01       	movw	r30, r28
    42ba:	e8 5e       	subi	r30, 0xE8	; 232
    42bc:	fe 4f       	sbci	r31, 0xFE	; 254
    42be:	b8 01       	movw	r22, r16
    42c0:	80 81       	ld	r24, Z
    42c2:	91 81       	ldd	r25, Z+1	; 0x01
    42c4:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    42c8:	61 e0       	ldi	r22, 0x01	; 1
    42ca:	ce 01       	movw	r24, r28
    42cc:	df 91       	pop	r29
    42ce:	cf 91       	pop	r28
    42d0:	1f 91       	pop	r17
    42d2:	0f 91       	pop	r16
    42d4:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000042d8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    42d8:	cf 92       	push	r12
    42da:	df 92       	push	r13
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	ec 01       	movw	r28, r24
    42e6:	69 01       	movw	r12, r18
    42e8:	7a 01       	movw	r14, r20
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	0e 94 3d 20 	call	0x407a	; 0x407a <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    42f0:	fe 01       	movw	r30, r28
    42f2:	e8 5e       	subi	r30, 0xE8	; 232
    42f4:	fe 4f       	sbci	r31, 0xFE	; 254
    42f6:	2a e0       	ldi	r18, 0x0A	; 10
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	b7 01       	movw	r22, r14
    42fc:	a6 01       	movw	r20, r12
    42fe:	80 81       	ld	r24, Z
    4300:	91 81       	ldd	r25, Z+1	; 0x01
    4302:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <_ZN5Print5printEli>
    4306:	60 e0       	ldi	r22, 0x00	; 0
    4308:	ce 01       	movw	r24, r28
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <_ZN13Adafruit_FONA13HTTP_para_endEb>

0000431a <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    431a:	4f 92       	push	r4
    431c:	5f 92       	push	r5
    431e:	6f 92       	push	r6
    4320:	7f 92       	push	r7
    4322:	8f 92       	push	r8
    4324:	9f 92       	push	r9
    4326:	af 92       	push	r10
    4328:	bf 92       	push	r11
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	7c 01       	movw	r14, r24
    4338:	2a 01       	movw	r4, r20
    433a:	3b 01       	movw	r6, r22
    433c:	48 01       	movw	r8, r16
    433e:	59 01       	movw	r10, r18
    4340:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4344:	62 e6       	ldi	r22, 0x62	; 98
    4346:	75 e0       	ldi	r23, 0x05	; 5
    4348:	8b e5       	ldi	r24, 0x5B	; 91
    434a:	97 e0       	ldi	r25, 0x07	; 7
    434c:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4350:	65 e5       	ldi	r22, 0x55	; 85
    4352:	75 e0       	ldi	r23, 0x05	; 5
    4354:	8b e5       	ldi	r24, 0x5B	; 91
    4356:	97 e0       	ldi	r25, 0x07	; 7
    4358:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    435c:	2a e0       	ldi	r18, 0x0A	; 10
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	b3 01       	movw	r22, r6
    4362:	a2 01       	movw	r20, r4
    4364:	8b e5       	ldi	r24, 0x5B	; 91
    4366:	97 e0       	ldi	r25, 0x07	; 7
    4368:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>
    436c:	6c e2       	ldi	r22, 0x2C	; 44
    436e:	8b e5       	ldi	r24, 0x5B	; 91
    4370:	97 e0       	ldi	r25, 0x07	; 7
    4372:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZN5Print5printEc>
    4376:	2a e0       	ldi	r18, 0x0A	; 10
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	b5 01       	movw	r22, r10
    437c:	a4 01       	movw	r20, r8
    437e:	8b e5       	ldi	r24, 0x5B	; 91
    4380:	97 e0       	ldi	r25, 0x07	; 7
    4382:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <_ZN5Print7printlnEmi>
    4386:	e7 01       	movw	r28, r14
    4388:	c8 5e       	subi	r28, 0xE8	; 232
    438a:	de 4f       	sbci	r29, 0xFE	; 254
    438c:	68 e4       	ldi	r22, 0x48	; 72
    438e:	75 e0       	ldi	r23, 0x05	; 5
    4390:	88 81       	ld	r24, Y
    4392:	99 81       	ldd	r25, Y+1	; 0x01
    4394:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4398:	2a e0       	ldi	r18, 0x0A	; 10
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	b3 01       	movw	r22, r6
    439e:	a2 01       	movw	r20, r4
    43a0:	88 81       	ld	r24, Y
    43a2:	99 81       	ldd	r25, Y+1	; 0x01
    43a4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN5Print5printEmi>
    43a8:	65 ec       	ldi	r22, 0xC5	; 197
    43aa:	72 e0       	ldi	r23, 0x02	; 2
    43ac:	88 81       	ld	r24, Y
    43ae:	99 81       	ldd	r25, Y+1	; 0x01
    43b0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    43b4:	2a e0       	ldi	r18, 0x0A	; 10
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	b5 01       	movw	r22, r10
    43ba:	a4 01       	movw	r20, r8
    43bc:	88 81       	ld	r24, Y
    43be:	99 81       	ldd	r25, Y+1	; 0x01
    43c0:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <_ZN5Print7printlnEmi>
    43c4:	40 e1       	ldi	r20, 0x10	; 16
    43c6:	57 e2       	ldi	r21, 0x27	; 39
    43c8:	6f e3       	ldi	r22, 0x3F	; 63
    43ca:	75 e0       	ldi	r23, 0x05	; 5
    43cc:	c7 01       	movw	r24, r14
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	ff 90       	pop	r15
    43d8:	ef 90       	pop	r14
    43da:	bf 90       	pop	r11
    43dc:	af 90       	pop	r10
    43de:	9f 90       	pop	r9
    43e0:	8f 90       	pop	r8
    43e2:	7f 90       	pop	r7
    43e4:	6f 90       	pop	r6
    43e6:	5f 90       	pop	r5
    43e8:	4f 90       	pop	r4
    43ea:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

000043ee <_ZN13Adafruit_FONA8getReplyEPcj>:
    43ee:	ef 92       	push	r14
    43f0:	ff 92       	push	r15
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	ec 01       	movw	r28, r24
    43fc:	8b 01       	movw	r16, r22
    43fe:	7a 01       	movw	r14, r20
    4400:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4404:	6f ea       	ldi	r22, 0xAF	; 175
    4406:	74 e0       	ldi	r23, 0x04	; 4
    4408:	8b e5       	ldi	r24, 0x5B	; 91
    440a:	97 e0       	ldi	r25, 0x07	; 7
    440c:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4410:	b8 01       	movw	r22, r16
    4412:	8b e5       	ldi	r24, 0x5B	; 91
    4414:	97 e0       	ldi	r25, 0x07	; 7
    4416:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    441a:	fe 01       	movw	r30, r28
    441c:	e8 5e       	subi	r30, 0xE8	; 232
    441e:	fe 4f       	sbci	r31, 0xFE	; 254
    4420:	b8 01       	movw	r22, r16
    4422:	80 81       	ld	r24, Z
    4424:	91 81       	ldd	r25, Z+1	; 0x01
    4426:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	b7 01       	movw	r22, r14
    442e:	ce 01       	movw	r24, r28
    4430:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4434:	18 2f       	mov	r17, r24
    4436:	68 ea       	ldi	r22, 0xA8	; 168
    4438:	74 e0       	ldi	r23, 0x04	; 4
    443a:	8b e5       	ldi	r24, 0x5B	; 91
    443c:	97 e0       	ldi	r25, 0x07	; 7
    443e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4442:	be 01       	movw	r22, r28
    4444:	62 5f       	subi	r22, 0xF2	; 242
    4446:	7f 4f       	sbci	r23, 0xFF	; 255
    4448:	8b e5       	ldi	r24, 0x5B	; 91
    444a:	97 e0       	ldi	r25, 0x07	; 7
    444c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4450:	81 2f       	mov	r24, r17
    4452:	df 91       	pop	r29
    4454:	cf 91       	pop	r28
    4456:	1f 91       	pop	r17
    4458:	0f 91       	pop	r16
    445a:	ff 90       	pop	r15
    445c:	ef 90       	pop	r14
    445e:	08 95       	ret

00004460 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    4460:	ef 92       	push	r14
    4462:	ff 92       	push	r15
    4464:	0f 93       	push	r16
    4466:	1f 93       	push	r17
    4468:	cf 93       	push	r28
    446a:	df 93       	push	r29
    446c:	ec 01       	movw	r28, r24
    446e:	8b 01       	movw	r16, r22
    4470:	7a 01       	movw	r14, r20
    4472:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4476:	61 ea       	ldi	r22, 0xA1	; 161
    4478:	74 e0       	ldi	r23, 0x04	; 4
    447a:	8b e5       	ldi	r24, 0x5B	; 91
    447c:	97 e0       	ldi	r25, 0x07	; 7
    447e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4482:	b8 01       	movw	r22, r16
    4484:	8b e5       	ldi	r24, 0x5B	; 91
    4486:	97 e0       	ldi	r25, 0x07	; 7
    4488:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    448c:	fe 01       	movw	r30, r28
    448e:	e8 5e       	subi	r30, 0xE8	; 232
    4490:	fe 4f       	sbci	r31, 0xFE	; 254
    4492:	b8 01       	movw	r22, r16
    4494:	80 81       	ld	r24, Z
    4496:	91 81       	ldd	r25, Z+1	; 0x01
    4498:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    449c:	40 e0       	ldi	r20, 0x00	; 0
    449e:	b7 01       	movw	r22, r14
    44a0:	ce 01       	movw	r24, r28
    44a2:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    44a6:	18 2f       	mov	r17, r24
    44a8:	6a e9       	ldi	r22, 0x9A	; 154
    44aa:	74 e0       	ldi	r23, 0x04	; 4
    44ac:	8b e5       	ldi	r24, 0x5B	; 91
    44ae:	97 e0       	ldi	r25, 0x07	; 7
    44b0:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    44b4:	be 01       	movw	r22, r28
    44b6:	62 5f       	subi	r22, 0xF2	; 242
    44b8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ba:	8b e5       	ldi	r24, 0x5B	; 91
    44bc:	97 e0       	ldi	r25, 0x07	; 7
    44be:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    44c2:	81 2f       	mov	r24, r17
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	1f 91       	pop	r17
    44ca:	0f 91       	pop	r16
    44cc:	ff 90       	pop	r15
    44ce:	ef 90       	pop	r14
    44d0:	08 95       	ret

000044d2 <_ZN13Adafruit_FONA9GPSstatusEv>:
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	8c 01       	movw	r16, r24
    44dc:	44 ef       	ldi	r20, 0xF4	; 244
    44de:	51 e0       	ldi	r21, 0x01	; 1
    44e0:	6b e9       	ldi	r22, 0x9B	; 155
    44e2:	76 e0       	ldi	r23, 0x06	; 6
    44e4:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    44e8:	60 e9       	ldi	r22, 0x90	; 144
    44ea:	76 e0       	ldi	r23, 0x06	; 6
    44ec:	c8 01       	movw	r24, r16
    44ee:	0e 96       	adiw	r24, 0x0e	; 14
    44f0:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    44f4:	ec 01       	movw	r28, r24
    44f6:	89 2b       	or	r24, r25
    44f8:	71 f0       	breq	.+28     	; 0x4516 <_ZN13Adafruit_FONA9GPSstatusEv+0x44>
    44fa:	40 e0       	ldi	r20, 0x00	; 0
    44fc:	64 ef       	ldi	r22, 0xF4	; 244
    44fe:	71 e0       	ldi	r23, 0x01	; 1
    4500:	c8 01       	movw	r24, r16
    4502:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4506:	8a 85       	ldd	r24, Y+10	; 0x0a
    4508:	80 33       	cpi	r24, 0x30	; 48
    450a:	39 f0       	breq	.+14     	; 0x451a <_ZN13Adafruit_FONA9GPSstatusEv+0x48>
    450c:	8c 85       	ldd	r24, Y+12	; 0x0c
    450e:	81 33       	cpi	r24, 0x31	; 49
    4510:	31 f0       	breq	.+12     	; 0x451e <_ZN13Adafruit_FONA9GPSstatusEv+0x4c>
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	05 c0       	rjmp	.+10     	; 0x4520 <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    4516:	8f ef       	ldi	r24, 0xFF	; 255
    4518:	03 c0       	rjmp	.+6      	; 0x4520 <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	01 c0       	rjmp	.+2      	; 0x4520 <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    451e:	83 e0       	ldi	r24, 0x03	; 3
    4520:	df 91       	pop	r29
    4522:	cf 91       	pop	r28
    4524:	1f 91       	pop	r17
    4526:	0f 91       	pop	r16
    4528:	08 95       	ret

0000452a <_ZN13Adafruit_FONA6getGPSEhPch>:
    452a:	cf 92       	push	r12
    452c:	df 92       	push	r13
    452e:	ef 92       	push	r14
    4530:	ff 92       	push	r15
    4532:	0f 93       	push	r16
    4534:	1f 93       	push	r17
    4536:	cf 93       	push	r28
    4538:	8c 01       	movw	r16, r24
    453a:	7a 01       	movw	r14, r20
    453c:	c2 2f       	mov	r28, r18
    453e:	44 ef       	ldi	r20, 0xF4	; 244
    4540:	51 e0       	ldi	r21, 0x01	; 1
    4542:	65 e8       	ldi	r22, 0x85	; 133
    4544:	76 e0       	ldi	r23, 0x06	; 6
    4546:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    454a:	60 e8       	ldi	r22, 0x80	; 128
    454c:	76 e0       	ldi	r23, 0x06	; 6
    454e:	c8 01       	movw	r24, r16
    4550:	0e 96       	adiw	r24, 0x0e	; 14
    4552:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4556:	00 97       	sbiw	r24, 0x00	; 0
    4558:	21 f4       	brne	.+8      	; 0x4562 <_ZN13Adafruit_FONA6getGPSEhPch+0x38>
    455a:	f7 01       	movw	r30, r14
    455c:	10 82       	st	Z, r1
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	24 c0       	rjmp	.+72     	; 0x45aa <_ZN13Adafruit_FONA6getGPSEhPch+0x80>
    4562:	bc 01       	movw	r22, r24
    4564:	6a 5f       	subi	r22, 0xFA	; 250
    4566:	7f 4f       	sbci	r23, 0xFF	; 255
    4568:	fb 01       	movw	r30, r22
    456a:	01 90       	ld	r0, Z+
    456c:	00 20       	and	r0, r0
    456e:	e9 f7       	brne	.-6      	; 0x456a <_ZN13Adafruit_FONA6getGPSEhPch+0x40>
    4570:	31 97       	sbiw	r30, 0x01	; 1
    4572:	e6 1b       	sub	r30, r22
    4574:	f7 0b       	sbc	r31, r23
    4576:	8c 2f       	mov	r24, r28
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	e8 17       	cp	r30, r24
    457e:	f9 07       	cpc	r31, r25
    4580:	10 f4       	brcc	.+4      	; 0x4586 <_ZN13Adafruit_FONA6getGPSEhPch+0x5c>
    4582:	c1 50       	subi	r28, 0x01	; 1
    4584:	01 c0       	rjmp	.+2      	; 0x4588 <_ZN13Adafruit_FONA6getGPSEhPch+0x5e>
    4586:	ce 2f       	mov	r28, r30
    4588:	cc 2e       	mov	r12, r28
    458a:	d1 2c       	mov	r13, r1
    458c:	a6 01       	movw	r20, r12
    458e:	c7 01       	movw	r24, r14
    4590:	0e 94 6f 30 	call	0x60de	; 0x60de <strncpy>
    4594:	f7 01       	movw	r30, r14
    4596:	ec 0d       	add	r30, r12
    4598:	fd 1d       	adc	r31, r13
    459a:	10 82       	st	Z, r1
    459c:	40 e0       	ldi	r20, 0x00	; 0
    459e:	64 ef       	ldi	r22, 0xF4	; 244
    45a0:	71 e0       	ldi	r23, 0x01	; 1
    45a2:	c8 01       	movw	r24, r16
    45a4:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    45a8:	8c 2f       	mov	r24, r28
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	ff 90       	pop	r15
    45b2:	ef 90       	pop	r14
    45b4:	df 90       	pop	r13
    45b6:	cf 90       	pop	r12
    45b8:	08 95       	ret

000045ba <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>:
    45ba:	2f 92       	push	r2
    45bc:	3f 92       	push	r3
    45be:	4f 92       	push	r4
    45c0:	5f 92       	push	r5
    45c2:	6f 92       	push	r6
    45c4:	7f 92       	push	r7
    45c6:	8f 92       	push	r8
    45c8:	9f 92       	push	r9
    45ca:	af 92       	push	r10
    45cc:	bf 92       	push	r11
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
    45e2:	ca 57       	subi	r28, 0x7A	; 122
    45e4:	d1 09       	sbc	r29, r1
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	5c 01       	movw	r10, r24
    45f2:	1b 01       	movw	r2, r22
    45f4:	eb 96       	adiw	r28, 0x3b	; 59
    45f6:	5f af       	std	Y+63, r21	; 0x3f
    45f8:	4e af       	std	Y+62, r20	; 0x3e
    45fa:	eb 97       	sbiw	r28, 0x3b	; 59
    45fc:	39 01       	movw	r6, r18
    45fe:	28 01       	movw	r4, r16
    4600:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN13Adafruit_FONA9GPSstatusEv>
    4604:	82 30       	cpi	r24, 0x02	; 2
    4606:	14 f4       	brge	.+4      	; 0x460c <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x52>
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	8a c0       	rjmp	.+276    	; 0x4720 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x166>
    460c:	28 e7       	ldi	r18, 0x78	; 120
    460e:	ae 01       	movw	r20, r28
    4610:	4f 5f       	subi	r20, 0xFF	; 255
    4612:	5f 4f       	sbci	r21, 0xFF	; 255
    4614:	60 e2       	ldi	r22, 0x20	; 32
    4616:	c5 01       	movw	r24, r10
    4618:	0e 94 95 22 	call	0x452a	; 0x452a <_ZN13Adafruit_FONA6getGPSEhPch>
    461c:	88 23       	and	r24, r24
    461e:	a1 f3       	breq	.-24     	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4620:	65 ec       	ldi	r22, 0xC5	; 197
    4622:	72 e0       	ldi	r23, 0x02	; 2
    4624:	ce 01       	movw	r24, r28
    4626:	01 96       	adiw	r24, 0x01	; 1
    4628:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    462c:	89 2b       	or	r24, r25
    462e:	61 f3       	breq	.-40     	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4630:	65 ec       	ldi	r22, 0xC5	; 197
    4632:	72 e0       	ldi	r23, 0x02	; 2
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    463c:	89 2b       	or	r24, r25
    463e:	21 f3       	breq	.-56     	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4640:	65 ec       	ldi	r22, 0xC5	; 197
    4642:	72 e0       	ldi	r23, 0x02	; 2
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    464c:	4c 01       	movw	r8, r24
    464e:	89 2b       	or	r24, r25
    4650:	d9 f2       	breq	.-74     	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4652:	65 ec       	ldi	r22, 0xC5	; 197
    4654:	72 e0       	ldi	r23, 0x02	; 2
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    465e:	5c 01       	movw	r10, r24
    4660:	89 2b       	or	r24, r25
    4662:	91 f2       	breq	.-92     	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4664:	65 ec       	ldi	r22, 0xC5	; 197
    4666:	72 e0       	ldi	r23, 0x02	; 2
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    4670:	8c 01       	movw	r16, r24
    4672:	89 2b       	or	r24, r25
    4674:	49 f2       	breq	.-110    	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4676:	4e e0       	ldi	r20, 0x0E	; 14
    4678:	50 e0       	ldi	r21, 0x00	; 0
    467a:	b4 01       	movw	r22, r8
    467c:	c6 01       	movw	r24, r12
    467e:	0e 94 6f 30 	call	0x60de	; 0x60de <strncpy>
    4682:	f6 01       	movw	r30, r12
    4684:	16 86       	std	Z+14, r1	; 0x0e
    4686:	c5 01       	movw	r24, r10
    4688:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <atof>
    468c:	f1 01       	movw	r30, r2
    468e:	60 83       	st	Z, r22
    4690:	71 83       	std	Z+1, r23	; 0x01
    4692:	82 83       	std	Z+2, r24	; 0x02
    4694:	93 83       	std	Z+3, r25	; 0x03
    4696:	c8 01       	movw	r24, r16
    4698:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <atof>
    469c:	eb 96       	adiw	r28, 0x3b	; 59
    469e:	ee ad       	ldd	r30, Y+62	; 0x3e
    46a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    46a2:	eb 97       	sbiw	r28, 0x3b	; 59
    46a4:	60 83       	st	Z, r22
    46a6:	71 83       	std	Z+1, r23	; 0x01
    46a8:	82 83       	std	Z+2, r24	; 0x02
    46aa:	93 83       	std	Z+3, r25	; 0x03
    46ac:	e1 14       	cp	r14, r1
    46ae:	f1 04       	cpc	r15, r1
    46b0:	81 f0       	breq	.+32     	; 0x46d2 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x118>
    46b2:	65 ec       	ldi	r22, 0xC5	; 197
    46b4:	72 e0       	ldi	r23, 0x02	; 2
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    46be:	00 97       	sbiw	r24, 0x00	; 0
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x10a>
    46c2:	a2 cf       	rjmp	.-188    	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    46c4:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <atof>
    46c8:	f7 01       	movw	r30, r14
    46ca:	60 83       	st	Z, r22
    46cc:	71 83       	std	Z+1, r23	; 0x01
    46ce:	82 83       	std	Z+2, r24	; 0x02
    46d0:	93 83       	std	Z+3, r25	; 0x03
    46d2:	61 14       	cp	r6, r1
    46d4:	71 04       	cpc	r7, r1
    46d6:	81 f0       	breq	.+32     	; 0x46f8 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x13e>
    46d8:	65 ec       	ldi	r22, 0xC5	; 197
    46da:	72 e0       	ldi	r23, 0x02	; 2
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    46e4:	00 97       	sbiw	r24, 0x00	; 0
    46e6:	09 f4       	brne	.+2      	; 0x46ea <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x130>
    46e8:	8f cf       	rjmp	.-226    	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    46ea:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <atof>
    46ee:	f3 01       	movw	r30, r6
    46f0:	60 83       	st	Z, r22
    46f2:	71 83       	std	Z+1, r23	; 0x01
    46f4:	82 83       	std	Z+2, r24	; 0x02
    46f6:	93 83       	std	Z+3, r25	; 0x03
    46f8:	41 14       	cp	r4, r1
    46fa:	51 04       	cpc	r5, r1
    46fc:	81 f0       	breq	.+32     	; 0x471e <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x164>
    46fe:	65 ec       	ldi	r22, 0xC5	; 197
    4700:	72 e0       	ldi	r23, 0x02	; 2
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	0e 94 46 30 	call	0x608c	; 0x608c <strtok>
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	09 f4       	brne	.+2      	; 0x4710 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x156>
    470e:	7c cf       	rjmp	.-264    	; 0x4608 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4710:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <atof>
    4714:	f2 01       	movw	r30, r4
    4716:	60 83       	st	Z, r22
    4718:	71 83       	std	Z+1, r23	; 0x01
    471a:	82 83       	std	Z+2, r24	; 0x02
    471c:	93 83       	std	Z+3, r25	; 0x03
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	c6 58       	subi	r28, 0x86	; 134
    4722:	df 4f       	sbci	r29, 0xFF	; 255
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	1f 91       	pop	r17
    4734:	0f 91       	pop	r16
    4736:	ff 90       	pop	r15
    4738:	ef 90       	pop	r14
    473a:	df 90       	pop	r13
    473c:	cf 90       	pop	r12
    473e:	bf 90       	pop	r11
    4740:	af 90       	pop	r10
    4742:	9f 90       	pop	r9
    4744:	8f 90       	pop	r8
    4746:	7f 90       	pop	r7
    4748:	6f 90       	pop	r6
    474a:	5f 90       	pop	r5
    474c:	4f 90       	pop	r4
    474e:	3f 90       	pop	r3
    4750:	2f 90       	pop	r2
    4752:	08 95       	ret

00004754 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    4754:	8f 92       	push	r8
    4756:	9f 92       	push	r9
    4758:	af 92       	push	r10
    475a:	bf 92       	push	r11
    475c:	cf 92       	push	r12
    475e:	df 92       	push	r13
    4760:	ef 92       	push	r14
    4762:	ff 92       	push	r15
    4764:	0f 93       	push	r16
    4766:	1f 93       	push	r17
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	ec 01       	movw	r28, r24
    476e:	6b 01       	movw	r12, r22
    4770:	49 01       	movw	r8, r18
    4772:	5a 01       	movw	r10, r20
    4774:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4778:	63 e9       	ldi	r22, 0x93	; 147
    477a:	74 e0       	ldi	r23, 0x04	; 4
    477c:	8b e5       	ldi	r24, 0x5B	; 91
    477e:	97 e0       	ldi	r25, 0x07	; 7
    4780:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4784:	b6 01       	movw	r22, r12
    4786:	8b e5       	ldi	r24, 0x5B	; 91
    4788:	97 e0       	ldi	r25, 0x07	; 7
    478a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    478e:	2a e0       	ldi	r18, 0x0A	; 10
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	b5 01       	movw	r22, r10
    4794:	a4 01       	movw	r20, r8
    4796:	8b e5       	ldi	r24, 0x5B	; 91
    4798:	97 e0       	ldi	r25, 0x07	; 7
    479a:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN5Print7printlnEli>
    479e:	7e 01       	movw	r14, r28
    47a0:	88 ee       	ldi	r24, 0xE8	; 232
    47a2:	e8 1a       	sub	r14, r24
    47a4:	8e ef       	ldi	r24, 0xFE	; 254
    47a6:	f8 0a       	sbc	r15, r24
    47a8:	b6 01       	movw	r22, r12
    47aa:	f7 01       	movw	r30, r14
    47ac:	80 81       	ld	r24, Z
    47ae:	91 81       	ldd	r25, Z+1	; 0x01
    47b0:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    47b4:	2a e0       	ldi	r18, 0x0A	; 10
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	b5 01       	movw	r22, r10
    47ba:	a4 01       	movw	r20, r8
    47bc:	f7 01       	movw	r30, r14
    47be:	80 81       	ld	r24, Z
    47c0:	91 81       	ldd	r25, Z+1	; 0x01
    47c2:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN5Print7printlnEli>
    47c6:	40 e0       	ldi	r20, 0x00	; 0
    47c8:	b8 01       	movw	r22, r16
    47ca:	ce 01       	movw	r24, r28
    47cc:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    47d0:	18 2f       	mov	r17, r24
    47d2:	6c e8       	ldi	r22, 0x8C	; 140
    47d4:	74 e0       	ldi	r23, 0x04	; 4
    47d6:	8b e5       	ldi	r24, 0x5B	; 91
    47d8:	97 e0       	ldi	r25, 0x07	; 7
    47da:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    47de:	be 01       	movw	r22, r28
    47e0:	62 5f       	subi	r22, 0xF2	; 242
    47e2:	7f 4f       	sbci	r23, 0xFF	; 255
    47e4:	8b e5       	ldi	r24, 0x5B	; 91
    47e6:	97 e0       	ldi	r25, 0x07	; 7
    47e8:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    47ec:	81 2f       	mov	r24, r17
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	1f 91       	pop	r17
    47f4:	0f 91       	pop	r16
    47f6:	ff 90       	pop	r15
    47f8:	ef 90       	pop	r14
    47fa:	df 90       	pop	r13
    47fc:	cf 90       	pop	r12
    47fe:	bf 90       	pop	r11
    4800:	af 90       	pop	r10
    4802:	9f 90       	pop	r9
    4804:	8f 90       	pop	r8
    4806:	08 95       	ret

00004808 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    4808:	af 92       	push	r10
    480a:	bf 92       	push	r11
    480c:	cf 92       	push	r12
    480e:	df 92       	push	r13
    4810:	ef 92       	push	r14
    4812:	ff 92       	push	r15
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	ec 01       	movw	r28, r24
    481e:	6b 01       	movw	r12, r22
    4820:	7a 01       	movw	r14, r20
    4822:	59 01       	movw	r10, r18
    4824:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4828:	65 e8       	ldi	r22, 0x85	; 133
    482a:	74 e0       	ldi	r23, 0x04	; 4
    482c:	8b e5       	ldi	r24, 0x5B	; 91
    482e:	97 e0       	ldi	r25, 0x07	; 7
    4830:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4834:	b6 01       	movw	r22, r12
    4836:	8b e5       	ldi	r24, 0x5B	; 91
    4838:	97 e0       	ldi	r25, 0x07	; 7
    483a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    483e:	62 e2       	ldi	r22, 0x22	; 34
    4840:	8b e5       	ldi	r24, 0x5B	; 91
    4842:	97 e0       	ldi	r25, 0x07	; 7
    4844:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZN5Print5printEc>
    4848:	b7 01       	movw	r22, r14
    484a:	8b e5       	ldi	r24, 0x5B	; 91
    484c:	97 e0       	ldi	r25, 0x07	; 7
    484e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4852:	62 e2       	ldi	r22, 0x22	; 34
    4854:	8b e5       	ldi	r24, 0x5B	; 91
    4856:	97 e0       	ldi	r25, 0x07	; 7
    4858:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN5Print7printlnEc>
    485c:	8e 01       	movw	r16, r28
    485e:	08 5e       	subi	r16, 0xE8	; 232
    4860:	1e 4f       	sbci	r17, 0xFE	; 254
    4862:	b6 01       	movw	r22, r12
    4864:	f8 01       	movw	r30, r16
    4866:	80 81       	ld	r24, Z
    4868:	91 81       	ldd	r25, Z+1	; 0x01
    486a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    486e:	62 e2       	ldi	r22, 0x22	; 34
    4870:	f8 01       	movw	r30, r16
    4872:	80 81       	ld	r24, Z
    4874:	91 81       	ldd	r25, Z+1	; 0x01
    4876:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZN5Print5printEc>
    487a:	b7 01       	movw	r22, r14
    487c:	f8 01       	movw	r30, r16
    487e:	80 81       	ld	r24, Z
    4880:	91 81       	ldd	r25, Z+1	; 0x01
    4882:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4886:	62 e2       	ldi	r22, 0x22	; 34
    4888:	f8 01       	movw	r30, r16
    488a:	80 81       	ld	r24, Z
    488c:	91 81       	ldd	r25, Z+1	; 0x01
    488e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN5Print7printlnEc>
    4892:	40 e0       	ldi	r20, 0x00	; 0
    4894:	b5 01       	movw	r22, r10
    4896:	ce 01       	movw	r24, r28
    4898:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    489c:	18 2f       	mov	r17, r24
    489e:	6e e7       	ldi	r22, 0x7E	; 126
    48a0:	74 e0       	ldi	r23, 0x04	; 4
    48a2:	8b e5       	ldi	r24, 0x5B	; 91
    48a4:	97 e0       	ldi	r25, 0x07	; 7
    48a6:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    48aa:	be 01       	movw	r22, r28
    48ac:	62 5f       	subi	r22, 0xF2	; 242
    48ae:	7f 4f       	sbci	r23, 0xFF	; 255
    48b0:	8b e5       	ldi	r24, 0x5B	; 91
    48b2:	97 e0       	ldi	r25, 0x07	; 7
    48b4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    48b8:	81 2f       	mov	r24, r17
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	1f 91       	pop	r17
    48c0:	0f 91       	pop	r16
    48c2:	ff 90       	pop	r15
    48c4:	ef 90       	pop	r14
    48c6:	df 90       	pop	r13
    48c8:	cf 90       	pop	r12
    48ca:	bf 90       	pop	r11
    48cc:	af 90       	pop	r10
    48ce:	08 95       	ret

000048d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    48d0:	0f 93       	push	r16
    48d2:	1f 93       	push	r17
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	ec 01       	movw	r28, r24
    48da:	8a 01       	movw	r16, r20
    48dc:	a9 01       	movw	r20, r18
    48de:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    48e2:	88 23       	and	r24, r24
    48e4:	41 f0       	breq	.+16     	; 0x48f6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    48e6:	b8 01       	movw	r22, r16
    48e8:	ce 01       	movw	r24, r28
    48ea:	0e 96       	adiw	r24, 0x0e	; 14
    48ec:	0e 94 1a 30 	call	0x6034	; 0x6034 <strcmp_P>
    48f0:	21 e0       	ldi	r18, 0x01	; 1
    48f2:	89 2b       	or	r24, r25
    48f4:	09 f0       	breq	.+2      	; 0x48f8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	82 2f       	mov	r24, r18
    48fa:	df 91       	pop	r29
    48fc:	cf 91       	pop	r28
    48fe:	1f 91       	pop	r17
    4900:	0f 91       	pop	r16
    4902:	08 95       	ret

00004904 <_ZN13Adafruit_FONA5beginER6Stream>:
    4904:	cf 92       	push	r12
    4906:	df 92       	push	r13
    4908:	ef 92       	push	r14
    490a:	ff 92       	push	r15
    490c:	0f 93       	push	r16
    490e:	1f 93       	push	r17
    4910:	cf 93       	push	r28
    4912:	df 93       	push	r29
    4914:	ec 01       	movw	r28, r24
    4916:	7c 01       	movw	r14, r24
    4918:	88 ee       	ldi	r24, 0xE8	; 232
    491a:	e8 1a       	sub	r14, r24
    491c:	8e ef       	ldi	r24, 0xFE	; 254
    491e:	f8 0a       	sbc	r15, r24
    4920:	d7 01       	movw	r26, r14
    4922:	6d 93       	st	X+, r22
    4924:	7c 93       	st	X, r23
    4926:	61 e0       	ldi	r22, 0x01	; 1
    4928:	8c 85       	ldd	r24, Y+12	; 0x0c
    492a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <pinMode>
    492e:	61 e0       	ldi	r22, 0x01	; 1
    4930:	8c 85       	ldd	r24, Y+12	; 0x0c
    4932:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
    4936:	6a e0       	ldi	r22, 0x0A	; 10
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	8c 85       	ldd	r24, Y+12	; 0x0c
    4946:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
    494a:	64 e6       	ldi	r22, 0x64	; 100
    494c:	70 e0       	ldi	r23, 0x00	; 0
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4956:	61 e0       	ldi	r22, 0x01	; 1
    4958:	8c 85       	ldd	r24, Y+12	; 0x0c
    495a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
    495e:	65 eb       	ldi	r22, 0xB5	; 181
    4960:	77 e0       	ldi	r23, 0x07	; 7
    4962:	8b e5       	ldi	r24, 0x5B	; 91
    4964:	97 e0       	ldi	r25, 0x07	; 7
    4966:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    496a:	8e e0       	ldi	r24, 0x0E	; 14
    496c:	c8 2e       	mov	r12, r24
    496e:	d1 2c       	mov	r13, r1
    4970:	8e 01       	movw	r16, r28
    4972:	0a 5e       	subi	r16, 0xEA	; 234
    4974:	1e 4f       	sbci	r17, 0xFE	; 254
    4976:	f7 01       	movw	r30, r14
    4978:	80 81       	ld	r24, Z
    497a:	91 81       	ldd	r25, Z+1	; 0x01
    497c:	dc 01       	movw	r26, r24
    497e:	ed 91       	ld	r30, X+
    4980:	fc 91       	ld	r31, X
    4982:	04 80       	ldd	r0, Z+4	; 0x04
    4984:	f5 81       	ldd	r31, Z+5	; 0x05
    4986:	e0 2d       	mov	r30, r0
    4988:	09 95       	icall
    498a:	89 2b       	or	r24, r25
    498c:	89 f0       	breq	.+34     	; 0x49b0 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    498e:	60 ea       	ldi	r22, 0xA0	; 160
    4990:	77 e0       	ldi	r23, 0x07	; 7
    4992:	8b e5       	ldi	r24, 0x5B	; 91
    4994:	97 e0       	ldi	r25, 0x07	; 7
    4996:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    499a:	f7 01       	movw	r30, r14
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	dc 01       	movw	r26, r24
    49a2:	ed 91       	ld	r30, X+
    49a4:	fc 91       	ld	r31, X
    49a6:	06 80       	ldd	r0, Z+6	; 0x06
    49a8:	f7 81       	ldd	r31, Z+7	; 0x07
    49aa:	e0 2d       	mov	r30, r0
    49ac:	09 95       	icall
    49ae:	e3 cf       	rjmp	.-58     	; 0x4976 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    49b0:	f8 01       	movw	r30, r16
    49b2:	40 81       	ld	r20, Z
    49b4:	51 81       	ldd	r21, Z+1	; 0x01
    49b6:	24 ef       	ldi	r18, 0xF4	; 244
    49b8:	31 e0       	ldi	r19, 0x01	; 1
    49ba:	6d e9       	ldi	r22, 0x9D	; 157
    49bc:	77 e0       	ldi	r23, 0x07	; 7
    49be:	ce 01       	movw	r24, r28
    49c0:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    49c4:	81 11       	cpse	r24, r1
    49c6:	63 c0       	rjmp	.+198    	; 0x4a8e <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    49c8:	d7 01       	movw	r26, r14
    49ca:	8d 91       	ld	r24, X+
    49cc:	9c 91       	ld	r25, X
    49ce:	dc 01       	movw	r26, r24
    49d0:	ed 91       	ld	r30, X+
    49d2:	fc 91       	ld	r31, X
    49d4:	04 80       	ldd	r0, Z+4	; 0x04
    49d6:	f5 81       	ldd	r31, Z+5	; 0x05
    49d8:	e0 2d       	mov	r30, r0
    49da:	09 95       	icall
    49dc:	89 2b       	or	r24, r25
    49de:	59 f0       	breq	.+22     	; 0x49f6 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    49e0:	f7 01       	movw	r30, r14
    49e2:	80 81       	ld	r24, Z
    49e4:	91 81       	ldd	r25, Z+1	; 0x01
    49e6:	dc 01       	movw	r26, r24
    49e8:	ed 91       	ld	r30, X+
    49ea:	fc 91       	ld	r31, X
    49ec:	06 80       	ldd	r0, Z+6	; 0x06
    49ee:	f7 81       	ldd	r31, Z+7	; 0x07
    49f0:	e0 2d       	mov	r30, r0
    49f2:	09 95       	icall
    49f4:	e9 cf       	rjmp	.-46     	; 0x49c8 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    49f6:	24 ef       	ldi	r18, 0xF4	; 244
    49f8:	31 e0       	ldi	r19, 0x01	; 1
    49fa:	4a e9       	ldi	r20, 0x9A	; 154
    49fc:	57 e0       	ldi	r21, 0x07	; 7
    49fe:	67 e9       	ldi	r22, 0x97	; 151
    4a00:	77 e0       	ldi	r23, 0x07	; 7
    4a02:	ce 01       	movw	r24, r28
    4a04:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a08:	81 11       	cpse	r24, r1
    4a0a:	41 c0       	rjmp	.+130    	; 0x4a8e <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    4a0c:	64 ef       	ldi	r22, 0xF4	; 244
    4a0e:	71 e0       	ldi	r23, 0x01	; 1
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4a18:	b1 e0       	ldi	r27, 0x01	; 1
    4a1a:	cb 1a       	sub	r12, r27
    4a1c:	d1 08       	sbc	r13, r1
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    4a20:	aa cf       	rjmp	.-172    	; 0x4976 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    4a22:	65 e6       	ldi	r22, 0x65	; 101
    4a24:	77 e0       	ldi	r23, 0x07	; 7
    4a26:	8b e5       	ldi	r24, 0x5B	; 91
    4a28:	97 e0       	ldi	r25, 0x07	; 7
    4a2a:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4a2e:	d8 01       	movw	r26, r16
    4a30:	4d 91       	ld	r20, X+
    4a32:	5c 91       	ld	r21, X
    4a34:	24 ef       	ldi	r18, 0xF4	; 244
    4a36:	31 e0       	ldi	r19, 0x01	; 1
    4a38:	62 e6       	ldi	r22, 0x62	; 98
    4a3a:	77 e0       	ldi	r23, 0x07	; 7
    4a3c:	ce 01       	movw	r24, r28
    4a3e:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a42:	64 e6       	ldi	r22, 0x64	; 100
    4a44:	70 e0       	ldi	r23, 0x00	; 0
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4a4e:	f8 01       	movw	r30, r16
    4a50:	40 81       	ld	r20, Z
    4a52:	51 81       	ldd	r21, Z+1	; 0x01
    4a54:	24 ef       	ldi	r18, 0xF4	; 244
    4a56:	31 e0       	ldi	r19, 0x01	; 1
    4a58:	6f e5       	ldi	r22, 0x5F	; 95
    4a5a:	77 e0       	ldi	r23, 0x07	; 7
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a62:	64 e6       	ldi	r22, 0x64	; 100
    4a64:	70 e0       	ldi	r23, 0x00	; 0
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4a6e:	d8 01       	movw	r26, r16
    4a70:	4d 91       	ld	r20, X+
    4a72:	5c 91       	ld	r21, X
    4a74:	24 ef       	ldi	r18, 0xF4	; 244
    4a76:	31 e0       	ldi	r19, 0x01	; 1
    4a78:	6c e5       	ldi	r22, 0x5C	; 92
    4a7a:	77 e0       	ldi	r23, 0x07	; 7
    4a7c:	ce 01       	movw	r24, r28
    4a7e:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4a82:	64 e6       	ldi	r22, 0x64	; 100
    4a84:	70 e0       	ldi	r23, 0x00	; 0
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4a8e:	f8 01       	movw	r30, r16
    4a90:	40 81       	ld	r20, Z
    4a92:	51 81       	ldd	r21, Z+1	; 0x01
    4a94:	24 ef       	ldi	r18, 0xF4	; 244
    4a96:	31 e0       	ldi	r19, 0x01	; 1
    4a98:	67 e5       	ldi	r22, 0x57	; 87
    4a9a:	77 e0       	ldi	r23, 0x07	; 7
    4a9c:	ce 01       	movw	r24, r28
    4a9e:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4aa2:	64 e6       	ldi	r22, 0x64	; 100
    4aa4:	70 e0       	ldi	r23, 0x00	; 0
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4aae:	d8 01       	movw	r26, r16
    4ab0:	4d 91       	ld	r20, X+
    4ab2:	5c 91       	ld	r21, X
    4ab4:	24 ef       	ldi	r18, 0xF4	; 244
    4ab6:	31 e0       	ldi	r19, 0x01	; 1
    4ab8:	62 e5       	ldi	r22, 0x52	; 82
    4aba:	77 e0       	ldi	r23, 0x07	; 7
    4abc:	ce 01       	movw	r24, r28
    4abe:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4ac2:	d8 2e       	mov	r13, r24
    4ac4:	88 23       	and	r24, r24
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    4ac8:	97 c0       	rjmp	.+302    	; 0x4bf8 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4aca:	f8 01       	movw	r30, r16
    4acc:	40 81       	ld	r20, Z
    4ace:	51 81       	ldd	r21, Z+1	; 0x01
    4ad0:	24 ef       	ldi	r18, 0xF4	; 244
    4ad2:	31 e0       	ldi	r19, 0x01	; 1
    4ad4:	68 e4       	ldi	r22, 0x48	; 72
    4ad6:	77 e0       	ldi	r23, 0x07	; 7
    4ad8:	ce 01       	movw	r24, r28
    4ada:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4ade:	64 e6       	ldi	r22, 0x64	; 100
    4ae0:	70 e0       	ldi	r23, 0x00	; 0
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <delay>
    4aea:	ce 01       	movw	r24, r28
    4aec:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4af0:	61 e4       	ldi	r22, 0x41	; 65
    4af2:	77 e0       	ldi	r23, 0x07	; 7
    4af4:	8b e5       	ldi	r24, 0x5B	; 91
    4af6:	97 e0       	ldi	r25, 0x07	; 7
    4af8:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4afc:	6f ec       	ldi	r22, 0xCF	; 207
    4afe:	72 e0       	ldi	r23, 0x02	; 2
    4b00:	8b e5       	ldi	r24, 0x5B	; 91
    4b02:	97 e0       	ldi	r25, 0x07	; 7
    4b04:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4b08:	6f ec       	ldi	r22, 0xCF	; 207
    4b0a:	72 e0       	ldi	r23, 0x02	; 2
    4b0c:	d7 01       	movw	r26, r14
    4b0e:	8d 91       	ld	r24, X+
    4b10:	9c 91       	ld	r25, X
    4b12:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4b16:	41 e0       	ldi	r20, 0x01	; 1
    4b18:	64 ef       	ldi	r22, 0xF4	; 244
    4b1a:	71 e0       	ldi	r23, 0x01	; 1
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4b22:	6a e3       	ldi	r22, 0x3A	; 58
    4b24:	77 e0       	ldi	r23, 0x07	; 7
    4b26:	8b e5       	ldi	r24, 0x5B	; 91
    4b28:	97 e0       	ldi	r25, 0x07	; 7
    4b2a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4b2e:	8e 01       	movw	r16, r28
    4b30:	02 5f       	subi	r16, 0xF2	; 242
    4b32:	1f 4f       	sbci	r17, 0xFF	; 255
    4b34:	b8 01       	movw	r22, r16
    4b36:	8b e5       	ldi	r24, 0x5B	; 91
    4b38:	97 e0       	ldi	r25, 0x07	; 7
    4b3a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4b3e:	6f e2       	ldi	r22, 0x2F	; 47
    4b40:	77 e0       	ldi	r23, 0x07	; 7
    4b42:	c8 01       	movw	r24, r16
    4b44:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4b48:	89 2b       	or	r24, r25
    4b4a:	11 f0       	breq	.+4      	; 0x4b50 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    4b4c:	83 e0       	ldi	r24, 0x03	; 3
    4b4e:	23 c0       	rjmp	.+70     	; 0x4b96 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4b50:	64 e2       	ldi	r22, 0x24	; 36
    4b52:	77 e0       	ldi	r23, 0x07	; 7
    4b54:	c8 01       	movw	r24, r16
    4b56:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4b5a:	89 2b       	or	r24, r25
    4b5c:	11 f0       	breq	.+4      	; 0x4b62 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    4b5e:	82 e0       	ldi	r24, 0x02	; 2
    4b60:	1a c0       	rjmp	.+52     	; 0x4b96 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4b62:	69 e1       	ldi	r22, 0x19	; 25
    4b64:	77 e0       	ldi	r23, 0x07	; 7
    4b66:	c8 01       	movw	r24, r16
    4b68:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4b6c:	89 2b       	or	r24, r25
    4b6e:	11 f0       	breq	.+4      	; 0x4b74 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	11 c0       	rjmp	.+34     	; 0x4b96 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4b74:	69 e0       	ldi	r22, 0x09	; 9
    4b76:	77 e0       	ldi	r23, 0x07	; 7
    4b78:	c8 01       	movw	r24, r16
    4b7a:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4b7e:	89 2b       	or	r24, r25
    4b80:	11 f0       	breq	.+4      	; 0x4b86 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    4b82:	84 e0       	ldi	r24, 0x04	; 4
    4b84:	08 c0       	rjmp	.+16     	; 0x4b96 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4b86:	69 ef       	ldi	r22, 0xF9	; 249
    4b88:	76 e0       	ldi	r23, 0x06	; 6
    4b8a:	c8 01       	movw	r24, r16
    4b8c:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4b90:	89 2b       	or	r24, r25
    4b92:	11 f0       	breq	.+4      	; 0x4b98 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    4b94:	85 e0       	ldi	r24, 0x05	; 5
    4b96:	8d 87       	std	Y+13, r24	; 0x0d
    4b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	69 f5       	brne	.+90     	; 0x4bf8 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4b9e:	62 ef       	ldi	r22, 0xF2	; 242
    4ba0:	76 e0       	ldi	r23, 0x06	; 6
    4ba2:	8b e5       	ldi	r24, 0x5B	; 91
    4ba4:	97 e0       	ldi	r25, 0x07	; 7
    4ba6:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4baa:	63 ed       	ldi	r22, 0xD3	; 211
    4bac:	72 e0       	ldi	r23, 0x02	; 2
    4bae:	8b e5       	ldi	r24, 0x5B	; 91
    4bb0:	97 e0       	ldi	r25, 0x07	; 7
    4bb2:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4bb6:	63 ed       	ldi	r22, 0xD3	; 211
    4bb8:	72 e0       	ldi	r23, 0x02	; 2
    4bba:	f7 01       	movw	r30, r14
    4bbc:	80 81       	ld	r24, Z
    4bbe:	91 81       	ldd	r25, Z+1	; 0x01
    4bc0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4bc4:	41 e0       	ldi	r20, 0x01	; 1
    4bc6:	64 ef       	ldi	r22, 0xF4	; 244
    4bc8:	71 e0       	ldi	r23, 0x01	; 1
    4bca:	ce 01       	movw	r24, r28
    4bcc:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4bd0:	6b ee       	ldi	r22, 0xEB	; 235
    4bd2:	76 e0       	ldi	r23, 0x06	; 6
    4bd4:	8b e5       	ldi	r24, 0x5B	; 91
    4bd6:	97 e0       	ldi	r25, 0x07	; 7
    4bd8:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4bdc:	b8 01       	movw	r22, r16
    4bde:	8b e5       	ldi	r24, 0x5B	; 91
    4be0:	97 e0       	ldi	r25, 0x07	; 7
    4be2:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4be6:	63 ee       	ldi	r22, 0xE3	; 227
    4be8:	76 e0       	ldi	r23, 0x06	; 6
    4bea:	c8 01       	movw	r24, r16
    4bec:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    4bf0:	89 2b       	or	r24, r25
    4bf2:	11 f0       	breq	.+4      	; 0x4bf8 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4bf4:	86 e0       	ldi	r24, 0x06	; 6
    4bf6:	8d 87       	std	Y+13, r24	; 0x0d
    4bf8:	8d 2d       	mov	r24, r13
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	1f 91       	pop	r17
    4c00:	0f 91       	pop	r16
    4c02:	ff 90       	pop	r15
    4c04:	ef 90       	pop	r14
    4c06:	df 90       	pop	r13
    4c08:	cf 90       	pop	r12
    4c0a:	08 95       	ret

00004c0c <_ZN13Adafruit_FONA9HTTP_initEv>:
    4c0c:	fc 01       	movw	r30, r24
    4c0e:	ea 5e       	subi	r30, 0xEA	; 234
    4c10:	fe 4f       	sbci	r31, 0xFE	; 254
    4c12:	40 81       	ld	r20, Z
    4c14:	51 81       	ldd	r21, Z+1	; 0x01
    4c16:	24 ef       	ldi	r18, 0xF4	; 244
    4c18:	31 e0       	ldi	r19, 0x01	; 1
    4c1a:	6f e9       	ldi	r22, 0x9F	; 159
    4c1c:	75 e0       	ldi	r23, 0x05	; 5
    4c1e:	0c 94 68 24 	jmp	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004c22 <_ZN13Adafruit_FONA9HTTP_termEv>:
    4c22:	fc 01       	movw	r30, r24
    4c24:	ea 5e       	subi	r30, 0xEA	; 234
    4c26:	fe 4f       	sbci	r31, 0xFE	; 254
    4c28:	40 81       	ld	r20, Z
    4c2a:	51 81       	ldd	r21, Z+1	; 0x01
    4c2c:	24 ef       	ldi	r18, 0xF4	; 244
    4c2e:	31 e0       	ldi	r19, 0x01	; 1
    4c30:	63 e9       	ldi	r22, 0x93	; 147
    4c32:	75 e0       	ldi	r23, 0x05	; 5
    4c34:	0c 94 68 24 	jmp	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004c38 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    4c38:	0c 94 11 26 	jmp	0x4c22	; 0x4c22 <_ZN13Adafruit_FONA9HTTP_termEv>

00004c3c <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    4c3c:	0f 93       	push	r16
    4c3e:	1f 93       	push	r17
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
    4c44:	ec 01       	movw	r28, r24
    4c46:	8a 01       	movw	r16, r20
    4c48:	a9 01       	movw	r20, r18
    4c4a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN13Adafruit_FONA8getReplyEPcj>
    4c4e:	88 23       	and	r24, r24
    4c50:	41 f0       	breq	.+16     	; 0x4c62 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    4c52:	b8 01       	movw	r22, r16
    4c54:	ce 01       	movw	r24, r28
    4c56:	0e 96       	adiw	r24, 0x0e	; 14
    4c58:	0e 94 1a 30 	call	0x6034	; 0x6034 <strcmp_P>
    4c5c:	21 e0       	ldi	r18, 0x01	; 1
    4c5e:	89 2b       	or	r24, r25
    4c60:	09 f0       	breq	.+2      	; 0x4c64 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	82 2f       	mov	r24, r18
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	08 95       	ret

00004c70 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    4c70:	af 92       	push	r10
    4c72:	bf 92       	push	r11
    4c74:	cf 92       	push	r12
    4c76:	df 92       	push	r13
    4c78:	ef 92       	push	r14
    4c7a:	ff 92       	push	r15
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	cd b7       	in	r28, 0x3d	; 61
    4c86:	de b7       	in	r29, 0x3e	; 62
    4c88:	6e 97       	sbiw	r28, 0x1e	; 30
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	f8 94       	cli
    4c8e:	de bf       	out	0x3e, r29	; 62
    4c90:	0f be       	out	0x3f, r0	; 63
    4c92:	cd bf       	out	0x3d, r28	; 61
    4c94:	8c 01       	movw	r16, r24
    4c96:	5b 01       	movw	r10, r22
    4c98:	6a 01       	movw	r12, r20
    4c9a:	fc 01       	movw	r30, r24
    4c9c:	ea 5e       	subi	r30, 0xEA	; 234
    4c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca0:	40 81       	ld	r20, Z
    4ca2:	51 81       	ldd	r21, Z+1	; 0x01
    4ca4:	24 ef       	ldi	r18, 0xF4	; 244
    4ca6:	31 e0       	ldi	r19, 0x01	; 1
    4ca8:	6c ea       	ldi	r22, 0xAC	; 172
    4caa:	76 e0       	ldi	r23, 0x06	; 6
    4cac:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4cb0:	88 23       	and	r24, r24
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4cb4:	88 c0       	rjmp	.+272    	; 0x4dc6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4cb6:	8a e0       	ldi	r24, 0x0A	; 10
    4cb8:	e2 ed       	ldi	r30, 0xD2	; 210
    4cba:	f1 e0       	ldi	r31, 0x01	; 1
    4cbc:	9e 01       	movw	r18, r28
    4cbe:	2f 5f       	subi	r18, 0xFF	; 255
    4cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc2:	79 01       	movw	r14, r18
    4cc4:	d9 01       	movw	r26, r18
    4cc6:	01 90       	ld	r0, Z+
    4cc8:	0d 92       	st	X+, r0
    4cca:	8a 95       	dec	r24
    4ccc:	e1 f7       	brne	.-8      	; 0x4cc6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    4cce:	fe 01       	movw	r30, r28
    4cd0:	3b 96       	adiw	r30, 0x0b	; 11
    4cd2:	84 e1       	ldi	r24, 0x14	; 20
    4cd4:	df 01       	movw	r26, r30
    4cd6:	1d 92       	st	X+, r1
    4cd8:	8a 95       	dec	r24
    4cda:	e9 f7       	brne	.-6      	; 0x4cd6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    4cdc:	43 e1       	ldi	r20, 0x13	; 19
    4cde:	50 e0       	ldi	r21, 0x00	; 0
    4ce0:	b5 01       	movw	r22, r10
    4ce2:	ce 01       	movw	r24, r28
    4ce4:	0a 96       	adiw	r24, 0x0a	; 10
    4ce6:	0e 94 6f 30 	call	0x60de	; 0x60de <strncpy>
    4cea:	f7 01       	movw	r30, r14
    4cec:	01 90       	ld	r0, Z+
    4cee:	00 20       	and	r0, r0
    4cf0:	e9 f7       	brne	.-6      	; 0x4cec <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    4cf2:	31 97       	sbiw	r30, 0x01	; 1
    4cf4:	82 e2       	ldi	r24, 0x22	; 34
    4cf6:	80 83       	st	Z, r24
    4cf8:	24 ef       	ldi	r18, 0xF4	; 244
    4cfa:	31 e0       	ldi	r19, 0x01	; 1
    4cfc:	49 ea       	ldi	r20, 0xA9	; 169
    4cfe:	56 e0       	ldi	r21, 0x06	; 6
    4d00:	b7 01       	movw	r22, r14
    4d02:	c8 01       	movw	r24, r16
    4d04:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    4d08:	88 23       	and	r24, r24
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    4d0c:	5c c0       	rjmp	.+184    	; 0x4dc6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4d0e:	66 ea       	ldi	r22, 0xA6	; 166
    4d10:	76 e0       	ldi	r23, 0x06	; 6
    4d12:	8b e5       	ldi	r24, 0x5B	; 91
    4d14:	97 e0       	ldi	r25, 0x07	; 7
    4d16:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    4d1a:	b6 01       	movw	r22, r12
    4d1c:	8b e5       	ldi	r24, 0x5B	; 91
    4d1e:	97 e0       	ldi	r25, 0x07	; 7
    4d20:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4d24:	b6 01       	movw	r22, r12
    4d26:	78 01       	movw	r14, r16
    4d28:	b8 ee       	ldi	r27, 0xE8	; 232
    4d2a:	eb 1a       	sub	r14, r27
    4d2c:	be ef       	ldi	r27, 0xFE	; 254
    4d2e:	fb 0a       	sbc	r15, r27
    4d30:	f7 01       	movw	r30, r14
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4d3a:	d7 01       	movw	r26, r14
    4d3c:	8d 91       	ld	r24, X+
    4d3e:	9c 91       	ld	r25, X
    4d40:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN5Print7printlnEv>
    4d44:	f7 01       	movw	r30, r14
    4d46:	80 81       	ld	r24, Z
    4d48:	91 81       	ldd	r25, Z+1	; 0x01
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	ed 91       	ld	r30, X+
    4d4e:	fc 91       	ld	r31, X
    4d50:	01 90       	ld	r0, Z+
    4d52:	f0 81       	ld	r31, Z
    4d54:	e0 2d       	mov	r30, r0
    4d56:	6a e1       	ldi	r22, 0x1A	; 26
    4d58:	09 95       	icall
    4d5a:	6c ee       	ldi	r22, 0xEC	; 236
    4d5c:	72 e0       	ldi	r23, 0x02	; 2
    4d5e:	8b e5       	ldi	r24, 0x5B	; 91
    4d60:	97 e0       	ldi	r25, 0x07	; 7
    4d62:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    4d66:	f8 01       	movw	r30, r16
    4d68:	85 85       	ldd	r24, Z+13	; 0x0d
    4d6a:	84 50       	subi	r24, 0x04	; 4
    4d6c:	82 30       	cpi	r24, 0x02	; 2
    4d6e:	60 f4       	brcc	.+24     	; 0x4d88 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    4d70:	40 e0       	ldi	r20, 0x00	; 0
    4d72:	68 ec       	ldi	r22, 0xC8	; 200
    4d74:	70 e0       	ldi	r23, 0x00	; 0
    4d76:	c8 01       	movw	r24, r16
    4d78:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4d7c:	40 e0       	ldi	r20, 0x00	; 0
    4d7e:	68 ec       	ldi	r22, 0xC8	; 200
    4d80:	70 e0       	ldi	r23, 0x00	; 0
    4d82:	c8 01       	movw	r24, r16
    4d84:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4d88:	40 e0       	ldi	r20, 0x00	; 0
    4d8a:	60 e1       	ldi	r22, 0x10	; 16
    4d8c:	77 e2       	ldi	r23, 0x27	; 39
    4d8e:	c8 01       	movw	r24, r16
    4d90:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4d94:	78 01       	movw	r14, r16
    4d96:	fe e0       	ldi	r31, 0x0E	; 14
    4d98:	ef 0e       	add	r14, r31
    4d9a:	f1 1c       	adc	r15, r1
    4d9c:	6f ee       	ldi	r22, 0xEF	; 239
    4d9e:	72 e0       	ldi	r23, 0x02	; 2
    4da0:	c7 01       	movw	r24, r14
    4da2:	0e 94 7e 30 	call	0x60fc	; 0x60fc <strstr>
    4da6:	89 2b       	or	r24, r25
    4da8:	71 f0       	breq	.+28     	; 0x4dc6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4daa:	40 e0       	ldi	r20, 0x00	; 0
    4dac:	68 ee       	ldi	r22, 0xE8	; 232
    4dae:	73 e0       	ldi	r23, 0x03	; 3
    4db0:	c8 01       	movw	r24, r16
    4db2:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    4db6:	62 ec       	ldi	r22, 0xC2	; 194
    4db8:	72 e0       	ldi	r23, 0x02	; 2
    4dba:	c7 01       	movw	r24, r14
    4dbc:	0e 94 5d 30 	call	0x60ba	; 0x60ba <strcmp>
    4dc0:	21 e0       	ldi	r18, 0x01	; 1
    4dc2:	89 2b       	or	r24, r25
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	82 2f       	mov	r24, r18
    4dca:	6e 96       	adiw	r28, 0x1e	; 30
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	df 91       	pop	r29
    4dd8:	cf 91       	pop	r28
    4dda:	1f 91       	pop	r17
    4ddc:	0f 91       	pop	r16
    4dde:	ff 90       	pop	r15
    4de0:	ef 90       	pop	r14
    4de2:	df 90       	pop	r13
    4de4:	cf 90       	pop	r12
    4de6:	bf 90       	pop	r11
    4de8:	af 90       	pop	r10
    4dea:	08 95       	ret

00004dec <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    4dec:	cf 92       	push	r12
    4dee:	df 92       	push	r13
    4df0:	ef 92       	push	r14
    4df2:	ff 92       	push	r15
    4df4:	0f 93       	push	r16
    4df6:	1f 93       	push	r17
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	ec 01       	movw	r28, r24
    4dfe:	68 01       	movw	r12, r16
    4e00:	87 01       	movw	r16, r14
    4e02:	0e 94 aa 23 	call	0x4754	; 0x4754 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4e06:	b6 01       	movw	r22, r12
    4e08:	ce 01       	movw	r24, r28
    4e0a:	0e 96       	adiw	r24, 0x0e	; 14
    4e0c:	0e 94 1a 30 	call	0x6034	; 0x6034 <strcmp_P>
    4e10:	21 e0       	ldi	r18, 0x01	; 1
    4e12:	89 2b       	or	r24, r25
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4e16:	20 e0       	ldi	r18, 0x00	; 0
    4e18:	82 2f       	mov	r24, r18
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	1f 91       	pop	r17
    4e20:	0f 91       	pop	r16
    4e22:	ff 90       	pop	r15
    4e24:	ef 90       	pop	r14
    4e26:	df 90       	pop	r13
    4e28:	cf 90       	pop	r12
    4e2a:	08 95       	ret

00004e2c <_ZN13Adafruit_FONA8HTTP_sslEb>:
    4e2c:	ef 92       	push	r14
    4e2e:	ff 92       	push	r15
    4e30:	0f 93       	push	r16
    4e32:	1f 93       	push	r17
    4e34:	fc 01       	movw	r30, r24
    4e36:	ea 5e       	subi	r30, 0xEA	; 234
    4e38:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3a:	00 81       	ld	r16, Z
    4e3c:	11 81       	ldd	r17, Z+1	; 0x01
    4e3e:	26 2f       	mov	r18, r22
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	40 e0       	ldi	r20, 0x00	; 0
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	64 ef       	ldi	r22, 0xF4	; 244
    4e48:	e6 2e       	mov	r14, r22
    4e4a:	ff 24       	eor	r15, r15
    4e4c:	f3 94       	inc	r15
    4e4e:	63 ef       	ldi	r22, 0xF3	; 243
    4e50:	74 e0       	ldi	r23, 0x04	; 4
    4e52:	0e 94 f6 26 	call	0x4dec	; 0x4dec <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4e56:	1f 91       	pop	r17
    4e58:	0f 91       	pop	r16
    4e5a:	ff 90       	pop	r15
    4e5c:	ef 90       	pop	r14
    4e5e:	08 95       	ret

00004e60 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    4e60:	0f 93       	push	r16
    4e62:	1f 93       	push	r17
    4e64:	cf 93       	push	r28
    4e66:	df 93       	push	r29
    4e68:	ec 01       	movw	r28, r24
    4e6a:	8b 01       	movw	r16, r22
    4e6c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN13Adafruit_FONA9HTTP_termEv>
    4e70:	ce 01       	movw	r24, r28
    4e72:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <_ZN13Adafruit_FONA9HTTP_initEv>
    4e76:	81 11       	cpse	r24, r1
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	38 c0       	rjmp	.+112    	; 0x4eee <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4e7e:	21 e0       	ldi	r18, 0x01	; 1
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	40 e0       	ldi	r20, 0x00	; 0
    4e84:	50 e0       	ldi	r21, 0x00	; 0
    4e86:	68 ed       	ldi	r22, 0xD8	; 216
    4e88:	74 e0       	ldi	r23, 0x04	; 4
    4e8a:	ce 01       	movw	r24, r28
    4e8c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4e90:	88 23       	and	r24, r24
    4e92:	99 f3       	breq	.-26     	; 0x4e7a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4e94:	fe 01       	movw	r30, r28
    4e96:	ec 5e       	subi	r30, 0xEC	; 236
    4e98:	fe 4f       	sbci	r31, 0xFE	; 254
    4e9a:	40 81       	ld	r20, Z
    4e9c:	51 81       	ldd	r21, Z+1	; 0x01
    4e9e:	65 ed       	ldi	r22, 0xD5	; 213
    4ea0:	74 e0       	ldi	r23, 0x04	; 4
    4ea2:	ce 01       	movw	r24, r28
    4ea4:	0e 94 53 21 	call	0x42a6	; 0x42a6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4ea8:	88 23       	and	r24, r24
    4eaa:	39 f3       	breq	.-50     	; 0x4e7a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4eac:	a8 01       	movw	r20, r16
    4eae:	61 ed       	ldi	r22, 0xD1	; 209
    4eb0:	74 e0       	ldi	r23, 0x04	; 4
    4eb2:	ce 01       	movw	r24, r28
    4eb4:	0e 94 3a 21 	call	0x4274	; 0x4274 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    4eb8:	88 23       	and	r24, r24
    4eba:	f9 f2       	breq	.-66     	; 0x4e7a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	ed 5e       	subi	r30, 0xED	; 237
    4ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec2:	90 81       	ld	r25, Z
    4ec4:	99 23       	and	r25, r25
    4ec6:	99 f0       	breq	.+38     	; 0x4eee <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4ec8:	21 e0       	ldi	r18, 0x01	; 1
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	40 e0       	ldi	r20, 0x00	; 0
    4ece:	50 e0       	ldi	r21, 0x00	; 0
    4ed0:	6b ec       	ldi	r22, 0xCB	; 203
    4ed2:	74 e0       	ldi	r23, 0x04	; 4
    4ed4:	ce 01       	movw	r24, r28
    4ed6:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4eda:	88 23       	and	r24, r24
    4edc:	71 f2       	breq	.-100    	; 0x4e7a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4ede:	61 e0       	ldi	r22, 0x01	; 1
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	1f 91       	pop	r17
    4ee8:	0f 91       	pop	r16
    4eea:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <_ZN13Adafruit_FONA8HTTP_sslEb>
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	08 95       	ret

00004ef8 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4ef8:	ef 92       	push	r14
    4efa:	ff 92       	push	r15
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
    4f00:	cf 93       	push	r28
    4f02:	df 93       	push	r29
    4f04:	ec 01       	movw	r28, r24
    4f06:	79 01       	movw	r14, r18
    4f08:	98 01       	movw	r18, r16
    4f0a:	0e 94 04 24 	call	0x4808	; 0x4808 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    4f0e:	b7 01       	movw	r22, r14
    4f10:	ce 01       	movw	r24, r28
    4f12:	0e 96       	adiw	r24, 0x0e	; 14
    4f14:	0e 94 1a 30 	call	0x6034	; 0x6034 <strcmp_P>
    4f18:	21 e0       	ldi	r18, 0x01	; 1
    4f1a:	89 2b       	or	r24, r25
    4f1c:	09 f0       	breq	.+2      	; 0x4f20 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    4f1e:	20 e0       	ldi	r18, 0x00	; 0
    4f20:	82 2f       	mov	r24, r18
    4f22:	df 91       	pop	r29
    4f24:	cf 91       	pop	r28
    4f26:	1f 91       	pop	r17
    4f28:	0f 91       	pop	r16
    4f2a:	ff 90       	pop	r15
    4f2c:	ef 90       	pop	r14
    4f2e:	08 95       	ret

00004f30 <_ZN13Adafruit_FONA10enableGPRSEb>:
    4f30:	8f 92       	push	r8
    4f32:	9f 92       	push	r9
    4f34:	af 92       	push	r10
    4f36:	bf 92       	push	r11
    4f38:	cf 92       	push	r12
    4f3a:	df 92       	push	r13
    4f3c:	ef 92       	push	r14
    4f3e:	ff 92       	push	r15
    4f40:	0f 93       	push	r16
    4f42:	1f 93       	push	r17
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
    4f48:	ec 01       	movw	r28, r24
    4f4a:	20 e2       	ldi	r18, 0x20	; 32
    4f4c:	3e e4       	ldi	r19, 0x4E	; 78
    4f4e:	66 23       	and	r22, r22
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    4f52:	0f c1       	rjmp	.+542    	; 0x5172 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    4f54:	48 e7       	ldi	r20, 0x78	; 120
    4f56:	56 e0       	ldi	r21, 0x06	; 6
    4f58:	6d e6       	ldi	r22, 0x6D	; 109
    4f5a:	76 e0       	ldi	r23, 0x06	; 6
    4f5c:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f60:	7e 01       	movw	r14, r28
    4f62:	8a ee       	ldi	r24, 0xEA	; 234
    4f64:	e8 1a       	sub	r14, r24
    4f66:	8e ef       	ldi	r24, 0xFE	; 254
    4f68:	f8 0a       	sbc	r15, r24
    4f6a:	f7 01       	movw	r30, r14
    4f6c:	40 81       	ld	r20, Z
    4f6e:	51 81       	ldd	r21, Z+1	; 0x01
    4f70:	20 e1       	ldi	r18, 0x10	; 16
    4f72:	37 e2       	ldi	r19, 0x27	; 39
    4f74:	62 e6       	ldi	r22, 0x62	; 98
    4f76:	76 e0       	ldi	r23, 0x06	; 6
    4f78:	ce 01       	movw	r24, r28
    4f7a:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f7e:	88 23       	and	r24, r24
    4f80:	09 f4       	brne	.+2      	; 0x4f84 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    4f82:	24 c1       	rjmp	.+584    	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f84:	f7 01       	movw	r30, r14
    4f86:	40 81       	ld	r20, Z
    4f88:	51 81       	ldd	r21, Z+1	; 0x01
    4f8a:	20 e1       	ldi	r18, 0x10	; 16
    4f8c:	37 e2       	ldi	r19, 0x27	; 39
    4f8e:	64 e4       	ldi	r22, 0x44	; 68
    4f90:	76 e0       	ldi	r23, 0x06	; 6
    4f92:	ce 01       	movw	r24, r28
    4f94:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4f98:	88 23       	and	r24, r24
    4f9a:	09 f4       	brne	.+2      	; 0x4f9e <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    4f9c:	17 c1       	rjmp	.+558    	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4f9e:	4e 01       	movw	r8, r28
    4fa0:	f3 ef       	ldi	r31, 0xF3	; 243
    4fa2:	8f 1a       	sub	r8, r31
    4fa4:	fe ef       	ldi	r31, 0xFE	; 254
    4fa6:	9f 0a       	sbc	r9, r31
    4fa8:	f4 01       	movw	r30, r8
    4faa:	40 81       	ld	r20, Z
    4fac:	51 81       	ldd	r21, Z+1	; 0x01
    4fae:	41 15       	cp	r20, r1
    4fb0:	51 05       	cpc	r21, r1
    4fb2:	a9 f4       	brne	.+42     	; 0x4fde <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4fb4:	f7 01       	movw	r30, r14
    4fb6:	40 81       	ld	r20, Z
    4fb8:	51 81       	ldd	r21, Z+1	; 0x01
    4fba:	20 e3       	ldi	r18, 0x30	; 48
    4fbc:	35 e7       	ldi	r19, 0x75	; 117
    4fbe:	6f ed       	ldi	r22, 0xDF	; 223
    4fc0:	75 e0       	ldi	r23, 0x05	; 5
    4fc2:	ce 01       	movw	r24, r28
    4fc4:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4fc8:	88 23       	and	r24, r24
    4fca:	09 f4       	brne	.+2      	; 0x4fce <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    4fcc:	ff c0       	rjmp	.+510    	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4fce:	f7 01       	movw	r30, r14
    4fd0:	40 81       	ld	r20, Z
    4fd2:	51 81       	ldd	r21, Z+1	; 0x01
    4fd4:	20 e1       	ldi	r18, 0x10	; 16
    4fd6:	37 e2       	ldi	r19, 0x27	; 39
    4fd8:	66 ed       	ldi	r22, 0xD6	; 214
    4fda:	75 e0       	ldi	r23, 0x05	; 5
    4fdc:	e8 c0       	rjmp	.+464    	; 0x51ae <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    4fde:	f7 01       	movw	r30, r14
    4fe0:	20 81       	ld	r18, Z
    4fe2:	31 81       	ldd	r19, Z+1	; 0x01
    4fe4:	00 e1       	ldi	r16, 0x10	; 16
    4fe6:	17 e2       	ldi	r17, 0x27	; 39
    4fe8:	60 e3       	ldi	r22, 0x30	; 48
    4fea:	76 e0       	ldi	r23, 0x06	; 6
    4fec:	ce 01       	movw	r24, r28
    4fee:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4ff2:	88 23       	and	r24, r24
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4ff6:	ea c0       	rjmp	.+468    	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4ff8:	ce 01       	movw	r24, r28
    4ffa:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN13Adafruit_FONA10flushInputEv>
    4ffe:	8e 01       	movw	r16, r28
    5000:	08 5e       	subi	r16, 0xE8	; 232
    5002:	1e 4f       	sbci	r17, 0xFE	; 254
    5004:	66 e2       	ldi	r22, 0x26	; 38
    5006:	76 e0       	ldi	r23, 0x06	; 6
    5008:	f8 01       	movw	r30, r16
    500a:	80 81       	ld	r24, Z
    500c:	91 81       	ldd	r25, Z+1	; 0x01
    500e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    5012:	f4 01       	movw	r30, r8
    5014:	60 81       	ld	r22, Z
    5016:	71 81       	ldd	r23, Z+1	; 0x01
    5018:	f8 01       	movw	r30, r16
    501a:	80 81       	ld	r24, Z
    501c:	91 81       	ldd	r25, Z+1	; 0x01
    501e:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    5022:	5e 01       	movw	r10, r28
    5024:	f1 ef       	ldi	r31, 0xF1	; 241
    5026:	af 1a       	sub	r10, r31
    5028:	fe ef       	ldi	r31, 0xFE	; 254
    502a:	bf 0a       	sbc	r11, r31
    502c:	f5 01       	movw	r30, r10
    502e:	80 81       	ld	r24, Z
    5030:	91 81       	ldd	r25, Z+1	; 0x01
    5032:	89 2b       	or	r24, r25
    5034:	79 f0       	breq	.+30     	; 0x5054 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    5036:	60 e1       	ldi	r22, 0x10	; 16
    5038:	73 e0       	ldi	r23, 0x03	; 3
    503a:	f8 01       	movw	r30, r16
    503c:	80 81       	ld	r24, Z
    503e:	91 81       	ldd	r25, Z+1	; 0x01
    5040:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    5044:	f5 01       	movw	r30, r10
    5046:	60 81       	ld	r22, Z
    5048:	71 81       	ldd	r23, Z+1	; 0x01
    504a:	f8 01       	movw	r30, r16
    504c:	80 81       	ld	r24, Z
    504e:	91 81       	ldd	r25, Z+1	; 0x01
    5050:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    5054:	6e 01       	movw	r12, r28
    5056:	ff ee       	ldi	r31, 0xEF	; 239
    5058:	cf 1a       	sub	r12, r31
    505a:	fe ef       	ldi	r31, 0xFE	; 254
    505c:	df 0a       	sbc	r13, r31
    505e:	f6 01       	movw	r30, r12
    5060:	80 81       	ld	r24, Z
    5062:	91 81       	ldd	r25, Z+1	; 0x01
    5064:	89 2b       	or	r24, r25
    5066:	79 f0       	breq	.+30     	; 0x5086 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    5068:	60 e1       	ldi	r22, 0x10	; 16
    506a:	73 e0       	ldi	r23, 0x03	; 3
    506c:	f8 01       	movw	r30, r16
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    5076:	f6 01       	movw	r30, r12
    5078:	60 81       	ld	r22, Z
    507a:	71 81       	ldd	r23, Z+1	; 0x01
    507c:	f8 01       	movw	r30, r16
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    5086:	62 e1       	ldi	r22, 0x12	; 18
    5088:	73 e0       	ldi	r23, 0x03	; 3
    508a:	f8 01       	movw	r30, r16
    508c:	80 81       	ld	r24, Z
    508e:	91 81       	ldd	r25, Z+1	; 0x01
    5090:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    5094:	6f e1       	ldi	r22, 0x1F	; 31
    5096:	76 e0       	ldi	r23, 0x06	; 6
    5098:	8b e5       	ldi	r24, 0x5B	; 91
    509a:	97 e0       	ldi	r25, 0x07	; 7
    509c:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    50a0:	65 e1       	ldi	r22, 0x15	; 21
    50a2:	76 e0       	ldi	r23, 0x06	; 6
    50a4:	8b e5       	ldi	r24, 0x5B	; 91
    50a6:	97 e0       	ldi	r25, 0x07	; 7
    50a8:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    50ac:	f4 01       	movw	r30, r8
    50ae:	60 81       	ld	r22, Z
    50b0:	71 81       	ldd	r23, Z+1	; 0x01
    50b2:	8b e5       	ldi	r24, 0x5B	; 91
    50b4:	97 e0       	ldi	r25, 0x07	; 7
    50b6:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    50ba:	f5 01       	movw	r30, r10
    50bc:	80 81       	ld	r24, Z
    50be:	91 81       	ldd	r25, Z+1	; 0x01
    50c0:	89 2b       	or	r24, r25
    50c2:	69 f0       	breq	.+26     	; 0x50de <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    50c4:	60 e1       	ldi	r22, 0x10	; 16
    50c6:	73 e0       	ldi	r23, 0x03	; 3
    50c8:	8b e5       	ldi	r24, 0x5B	; 91
    50ca:	97 e0       	ldi	r25, 0x07	; 7
    50cc:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    50d0:	f5 01       	movw	r30, r10
    50d2:	60 81       	ld	r22, Z
    50d4:	71 81       	ldd	r23, Z+1	; 0x01
    50d6:	8b e5       	ldi	r24, 0x5B	; 91
    50d8:	97 e0       	ldi	r25, 0x07	; 7
    50da:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    50de:	f6 01       	movw	r30, r12
    50e0:	80 81       	ld	r24, Z
    50e2:	91 81       	ldd	r25, Z+1	; 0x01
    50e4:	89 2b       	or	r24, r25
    50e6:	69 f0       	breq	.+26     	; 0x5102 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    50e8:	60 e1       	ldi	r22, 0x10	; 16
    50ea:	73 e0       	ldi	r23, 0x03	; 3
    50ec:	8b e5       	ldi	r24, 0x5B	; 91
    50ee:	97 e0       	ldi	r25, 0x07	; 7
    50f0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_ZN5Print5printEPKc>
    50f4:	f6 01       	movw	r30, r12
    50f6:	60 81       	ld	r22, Z
    50f8:	71 81       	ldd	r23, Z+1	; 0x01
    50fa:	8b e5       	ldi	r24, 0x5B	; 91
    50fc:	97 e0       	ldi	r25, 0x07	; 7
    50fe:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    5102:	62 e1       	ldi	r22, 0x12	; 18
    5104:	73 e0       	ldi	r23, 0x03	; 3
    5106:	8b e5       	ldi	r24, 0x5B	; 91
    5108:	97 e0       	ldi	r25, 0x07	; 7
    510a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN5Print7printlnEPKc>
    510e:	f7 01       	movw	r30, r14
    5110:	60 81       	ld	r22, Z
    5112:	71 81       	ldd	r23, Z+1	; 0x01
    5114:	40 e1       	ldi	r20, 0x10	; 16
    5116:	57 e2       	ldi	r21, 0x27	; 39
    5118:	ce 01       	movw	r24, r28
    511a:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    511e:	88 23       	and	r24, r24
    5120:	09 f4       	brne	.+2      	; 0x5124 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    5122:	54 c0       	rjmp	.+168    	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5124:	f5 01       	movw	r30, r10
    5126:	40 81       	ld	r20, Z
    5128:	51 81       	ldd	r21, Z+1	; 0x01
    512a:	41 15       	cp	r20, r1
    512c:	51 05       	cpc	r21, r1
    512e:	39 f4       	brne	.+14     	; 0x513e <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    5130:	f6 01       	movw	r30, r12
    5132:	40 81       	ld	r20, Z
    5134:	51 81       	ldd	r21, Z+1	; 0x01
    5136:	41 15       	cp	r20, r1
    5138:	51 05       	cpc	r21, r1
    513a:	71 f4       	brne	.+28     	; 0x5158 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    513c:	3b cf       	rjmp	.-394    	; 0x4fb4 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    513e:	f7 01       	movw	r30, r14
    5140:	20 81       	ld	r18, Z
    5142:	31 81       	ldd	r19, Z+1	; 0x01
    5144:	00 e1       	ldi	r16, 0x10	; 16
    5146:	17 e2       	ldi	r17, 0x27	; 39
    5148:	60 e0       	ldi	r22, 0x00	; 0
    514a:	76 e0       	ldi	r23, 0x06	; 6
    514c:	ce 01       	movw	r24, r28
    514e:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5152:	81 11       	cpse	r24, r1
    5154:	ed cf       	rjmp	.-38     	; 0x5130 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    5156:	3a c0       	rjmp	.+116    	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5158:	f7 01       	movw	r30, r14
    515a:	20 81       	ld	r18, Z
    515c:	31 81       	ldd	r19, Z+1	; 0x01
    515e:	00 e1       	ldi	r16, 0x10	; 16
    5160:	17 e2       	ldi	r17, 0x27	; 39
    5162:	6c ee       	ldi	r22, 0xEC	; 236
    5164:	75 e0       	ldi	r23, 0x05	; 5
    5166:	ce 01       	movw	r24, r28
    5168:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    516c:	81 11       	cpse	r24, r1
    516e:	22 cf       	rjmp	.-444    	; 0x4fb4 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5170:	2d c0       	rjmp	.+90     	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5172:	4e ec       	ldi	r20, 0xCE	; 206
    5174:	55 e0       	ldi	r21, 0x05	; 5
    5176:	63 ec       	ldi	r22, 0xC3	; 195
    5178:	75 e0       	ldi	r23, 0x05	; 5
    517a:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    517e:	88 23       	and	r24, r24
    5180:	29 f1       	breq	.+74     	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5182:	8e 01       	movw	r16, r28
    5184:	0a 5e       	subi	r16, 0xEA	; 234
    5186:	1e 4f       	sbci	r17, 0xFE	; 254
    5188:	f8 01       	movw	r30, r16
    518a:	40 81       	ld	r20, Z
    518c:	51 81       	ldd	r21, Z+1	; 0x01
    518e:	20 e1       	ldi	r18, 0x10	; 16
    5190:	37 e2       	ldi	r19, 0x27	; 39
    5192:	66 eb       	ldi	r22, 0xB6	; 182
    5194:	75 e0       	ldi	r23, 0x05	; 5
    5196:	ce 01       	movw	r24, r28
    5198:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    519c:	88 23       	and	r24, r24
    519e:	b1 f0       	breq	.+44     	; 0x51cc <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    51a0:	f8 01       	movw	r30, r16
    51a2:	40 81       	ld	r20, Z
    51a4:	51 81       	ldd	r21, Z+1	; 0x01
    51a6:	20 e1       	ldi	r18, 0x10	; 16
    51a8:	37 e2       	ldi	r19, 0x27	; 39
    51aa:	6b ea       	ldi	r22, 0xAB	; 171
    51ac:	75 e0       	ldi	r23, 0x05	; 5
    51ae:	ce 01       	movw	r24, r28
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	1f 91       	pop	r17
    51b6:	0f 91       	pop	r16
    51b8:	ff 90       	pop	r15
    51ba:	ef 90       	pop	r14
    51bc:	df 90       	pop	r13
    51be:	cf 90       	pop	r12
    51c0:	bf 90       	pop	r11
    51c2:	af 90       	pop	r10
    51c4:	9f 90       	pop	r9
    51c6:	8f 90       	pop	r8
    51c8:	0c 94 68 24 	jmp	0x48d0	; 0x48d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    51cc:	80 e0       	ldi	r24, 0x00	; 0
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	1f 91       	pop	r17
    51d4:	0f 91       	pop	r16
    51d6:	ff 90       	pop	r15
    51d8:	ef 90       	pop	r14
    51da:	df 90       	pop	r13
    51dc:	cf 90       	pop	r12
    51de:	bf 90       	pop	r11
    51e0:	af 90       	pop	r10
    51e2:	9f 90       	pop	r9
    51e4:	8f 90       	pop	r8
    51e6:	08 95       	ret

000051e8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    51e8:	af 92       	push	r10
    51ea:	bf 92       	push	r11
    51ec:	cf 92       	push	r12
    51ee:	df 92       	push	r13
    51f0:	ef 92       	push	r14
    51f2:	ff 92       	push	r15
    51f4:	0f 93       	push	r16
    51f6:	cf 93       	push	r28
    51f8:	df 93       	push	r29
    51fa:	5b 01       	movw	r10, r22
    51fc:	6a 01       	movw	r12, r20
    51fe:	e2 2e       	mov	r14, r18
    5200:	0e 96       	adiw	r24, 0x0e	; 14
    5202:	0e 94 2c 30 	call	0x6058	; 0x6058 <strstr_P>
    5206:	ec 01       	movw	r28, r24
    5208:	89 2b       	or	r24, r25
    520a:	c1 f0       	breq	.+48     	; 0x523c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    520c:	c5 01       	movw	r24, r10
    520e:	0e 94 23 30 	call	0x6046	; 0x6046 <__strlen_P>
    5212:	8c 0f       	add	r24, r28
    5214:	9d 1f       	adc	r25, r29
    5216:	c0 e0       	ldi	r28, 0x00	; 0
    5218:	f1 2c       	mov	r15, r1
    521a:	c0 17       	cp	r28, r16
    521c:	41 f0       	breq	.+16     	; 0x522e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    521e:	b7 01       	movw	r22, r14
    5220:	0e 94 52 30 	call	0x60a4	; 0x60a4 <strchr>
    5224:	00 97       	sbiw	r24, 0x00	; 0
    5226:	51 f0       	breq	.+20     	; 0x523c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5228:	01 96       	adiw	r24, 0x01	; 1
    522a:	cf 5f       	subi	r28, 0xFF	; 255
    522c:	f6 cf       	rjmp	.-20     	; 0x521a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    522e:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <atoi>
    5232:	f6 01       	movw	r30, r12
    5234:	91 83       	std	Z+1, r25	; 0x01
    5236:	80 83       	st	Z, r24
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	01 c0       	rjmp	.+2      	; 0x523e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    523c:	80 e0       	ldi	r24, 0x00	; 0
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	0f 91       	pop	r16
    5244:	ff 90       	pop	r15
    5246:	ef 90       	pop	r14
    5248:	df 90       	pop	r13
    524a:	cf 90       	pop	r12
    524c:	bf 90       	pop	r11
    524e:	af 90       	pop	r10
    5250:	08 95       	ret

00005252 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    5252:	ef 92       	push	r14
    5254:	ff 92       	push	r15
    5256:	0f 93       	push	r16
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	ec 01       	movw	r28, r24
    525e:	7b 01       	movw	r14, r22
    5260:	44 ef       	ldi	r20, 0xF4	; 244
    5262:	51 e0       	ldi	r21, 0x01	; 1
    5264:	6a e0       	ldi	r22, 0x0A	; 10
    5266:	75 e0       	ldi	r23, 0x05	; 5
    5268:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    526c:	00 e0       	ldi	r16, 0x00	; 0
    526e:	2c e2       	ldi	r18, 0x2C	; 44
    5270:	a7 01       	movw	r20, r14
    5272:	6f ef       	ldi	r22, 0xFF	; 255
    5274:	74 e0       	ldi	r23, 0x04	; 4
    5276:	ce 01       	movw	r24, r28
    5278:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    527c:	df 91       	pop	r29
    527e:	cf 91       	pop	r28
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	08 95       	ret

00005288 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    5288:	4f 92       	push	r4
    528a:	5f 92       	push	r5
    528c:	6f 92       	push	r6
    528e:	7f 92       	push	r7
    5290:	af 92       	push	r10
    5292:	bf 92       	push	r11
    5294:	cf 92       	push	r12
    5296:	df 92       	push	r13
    5298:	ef 92       	push	r14
    529a:	ff 92       	push	r15
    529c:	0f 93       	push	r16
    529e:	1f 93       	push	r17
    52a0:	cf 93       	push	r28
    52a2:	df 93       	push	r29
    52a4:	ec 01       	movw	r28, r24
    52a6:	5a 01       	movw	r10, r20
    52a8:	69 01       	movw	r12, r18
    52aa:	27 01       	movw	r4, r14
    52ac:	38 01       	movw	r6, r16
    52ae:	fc 01       	movw	r30, r24
    52b0:	ea 5e       	subi	r30, 0xEA	; 234
    52b2:	fe 4f       	sbci	r31, 0xFE	; 254
    52b4:	00 81       	ld	r16, Z
    52b6:	11 81       	ldd	r17, Z+1	; 0x01
    52b8:	26 2f       	mov	r18, r22
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	40 e0       	ldi	r20, 0x00	; 0
    52be:	50 e0       	ldi	r21, 0x00	; 0
    52c0:	84 ef       	ldi	r24, 0xF4	; 244
    52c2:	e8 2e       	mov	r14, r24
    52c4:	ff 24       	eor	r15, r15
    52c6:	f3 94       	inc	r15
    52c8:	60 e3       	ldi	r22, 0x30	; 48
    52ca:	75 e0       	ldi	r23, 0x05	; 5
    52cc:	ce 01       	movw	r24, r28
    52ce:	0e 94 f6 26 	call	0x4dec	; 0x4dec <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    52d2:	81 11       	cpse	r24, r1
    52d4:	02 c0       	rjmp	.+4      	; 0x52da <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	17 c0       	rjmp	.+46     	; 0x5308 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    52da:	40 e0       	ldi	r20, 0x00	; 0
    52dc:	b2 01       	movw	r22, r4
    52de:	ce 01       	movw	r24, r28
    52e0:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    52e4:	01 e0       	ldi	r16, 0x01	; 1
    52e6:	2c e2       	ldi	r18, 0x2C	; 44
    52e8:	a5 01       	movw	r20, r10
    52ea:	63 e2       	ldi	r22, 0x23	; 35
    52ec:	75 e0       	ldi	r23, 0x05	; 5
    52ee:	ce 01       	movw	r24, r28
    52f0:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    52f4:	88 23       	and	r24, r24
    52f6:	79 f3       	breq	.-34     	; 0x52d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    52f8:	02 e0       	ldi	r16, 0x02	; 2
    52fa:	2c e2       	ldi	r18, 0x2C	; 44
    52fc:	a6 01       	movw	r20, r12
    52fe:	66 e1       	ldi	r22, 0x16	; 22
    5300:	75 e0       	ldi	r23, 0x05	; 5
    5302:	ce 01       	movw	r24, r28
    5304:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	1f 91       	pop	r17
    530e:	0f 91       	pop	r16
    5310:	ff 90       	pop	r15
    5312:	ef 90       	pop	r14
    5314:	df 90       	pop	r13
    5316:	cf 90       	pop	r12
    5318:	bf 90       	pop	r11
    531a:	af 90       	pop	r10
    531c:	7f 90       	pop	r7
    531e:	6f 90       	pop	r6
    5320:	5f 90       	pop	r5
    5322:	4f 90       	pop	r4
    5324:	08 95       	ret

00005326 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    5326:	4f 92       	push	r4
    5328:	5f 92       	push	r5
    532a:	6f 92       	push	r6
    532c:	7f 92       	push	r7
    532e:	8f 92       	push	r8
    5330:	9f 92       	push	r9
    5332:	af 92       	push	r10
    5334:	bf 92       	push	r11
    5336:	cf 92       	push	r12
    5338:	df 92       	push	r13
    533a:	ef 92       	push	r14
    533c:	ff 92       	push	r15
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	ec 01       	movw	r28, r24
    5348:	2a 01       	movw	r4, r20
    534a:	39 01       	movw	r6, r18
    534c:	48 01       	movw	r8, r16
    534e:	57 01       	movw	r10, r14
    5350:	0e 94 30 27 	call	0x4e60	; 0x4e60 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    5354:	88 23       	and	r24, r24
    5356:	09 f4       	brne	.+2      	; 0x535a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    5358:	71 c0       	rjmp	.+226    	; 0x543c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    535a:	a2 01       	movw	r20, r4
    535c:	6b ee       	ldi	r22, 0xEB	; 235
    535e:	74 e0       	ldi	r23, 0x04	; 4
    5360:	ce 01       	movw	r24, r28
    5362:	0e 94 53 21 	call	0x42a6	; 0x42a6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5366:	88 23       	and	r24, r24
    5368:	09 f4       	brne	.+2      	; 0x536c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    536a:	68 c0       	rjmp	.+208    	; 0x543c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    536c:	a8 01       	movw	r20, r16
    536e:	60 e0       	ldi	r22, 0x00	; 0
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	00 e1       	ldi	r16, 0x10	; 16
    5374:	17 e2       	ldi	r17, 0x27	; 39
    5376:	20 e0       	ldi	r18, 0x00	; 0
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	ce 01       	movw	r24, r28
    537c:	0e 94 8d 21 	call	0x431a	; 0x431a <_ZN13Adafruit_FONA9HTTP_dataEmm>
    5380:	88 23       	and	r24, r24
    5382:	09 f4       	brne	.+2      	; 0x5386 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    5384:	5b c0       	rjmp	.+182    	; 0x543c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5386:	fe 01       	movw	r30, r28
    5388:	e8 5e       	subi	r30, 0xE8	; 232
    538a:	fe 4f       	sbci	r31, 0xFE	; 254
    538c:	80 81       	ld	r24, Z
    538e:	91 81       	ldd	r25, Z+1	; 0x01
    5390:	dc 01       	movw	r26, r24
    5392:	ed 91       	ld	r30, X+
    5394:	fc 91       	ld	r31, X
    5396:	02 80       	ldd	r0, Z+2	; 0x02
    5398:	f3 81       	ldd	r31, Z+3	; 0x03
    539a:	e0 2d       	mov	r30, r0
    539c:	a4 01       	movw	r20, r8
    539e:	b3 01       	movw	r22, r6
    53a0:	09 95       	icall
    53a2:	fe 01       	movw	r30, r28
    53a4:	ea 5e       	subi	r30, 0xEA	; 234
    53a6:	fe 4f       	sbci	r31, 0xFE	; 254
    53a8:	60 81       	ld	r22, Z
    53aa:	71 81       	ldd	r23, Z+1	; 0x01
    53ac:	40 e1       	ldi	r20, 0x10	; 16
    53ae:	57 e2       	ldi	r21, 0x27	; 39
    53b0:	ce 01       	movw	r24, r28
    53b2:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    53b6:	88 23       	and	r24, r24
    53b8:	09 f4       	brne	.+2      	; 0x53bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    53ba:	40 c0       	rjmp	.+128    	; 0x543c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    53bc:	10 e1       	ldi	r17, 0x10	; 16
    53be:	e1 2e       	mov	r14, r17
    53c0:	17 e2       	ldi	r17, 0x27	; 39
    53c2:	f1 2e       	mov	r15, r17
    53c4:	00 e0       	ldi	r16, 0x00	; 0
    53c6:	10 e0       	ldi	r17, 0x00	; 0
    53c8:	96 01       	movw	r18, r12
    53ca:	a5 01       	movw	r20, r10
    53cc:	61 e0       	ldi	r22, 0x01	; 1
    53ce:	ce 01       	movw	r24, r28
    53d0:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    53d4:	88 23       	and	r24, r24
    53d6:	91 f1       	breq	.+100    	; 0x543c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    53d8:	62 ee       	ldi	r22, 0xE2	; 226
    53da:	74 e0       	ldi	r23, 0x04	; 4
    53dc:	8b e5       	ldi	r24, 0x5B	; 91
    53de:	97 e0       	ldi	r25, 0x07	; 7
    53e0:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    53e4:	f5 01       	movw	r30, r10
    53e6:	60 81       	ld	r22, Z
    53e8:	71 81       	ldd	r23, Z+1	; 0x01
    53ea:	4a e0       	ldi	r20, 0x0A	; 10
    53ec:	50 e0       	ldi	r21, 0x00	; 0
    53ee:	8b e5       	ldi	r24, 0x5B	; 91
    53f0:	97 e0       	ldi	r25, 0x07	; 7
    53f2:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN5Print7printlnEji>
    53f6:	6c ed       	ldi	r22, 0xDC	; 220
    53f8:	74 e0       	ldi	r23, 0x04	; 4
    53fa:	8b e5       	ldi	r24, 0x5B	; 91
    53fc:	97 e0       	ldi	r25, 0x07	; 7
    53fe:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN5Print5printEPK19__FlashStringHelper>
    5402:	d6 01       	movw	r26, r12
    5404:	6d 91       	ld	r22, X+
    5406:	7c 91       	ld	r23, X
    5408:	4a e0       	ldi	r20, 0x0A	; 10
    540a:	50 e0       	ldi	r21, 0x00	; 0
    540c:	8b e5       	ldi	r24, 0x5B	; 91
    540e:	97 e0       	ldi	r25, 0x07	; 7
    5410:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN5Print7printlnEji>
    5414:	b6 01       	movw	r22, r12
    5416:	ce 01       	movw	r24, r28
    5418:	df 91       	pop	r29
    541a:	cf 91       	pop	r28
    541c:	1f 91       	pop	r17
    541e:	0f 91       	pop	r16
    5420:	ff 90       	pop	r15
    5422:	ef 90       	pop	r14
    5424:	df 90       	pop	r13
    5426:	cf 90       	pop	r12
    5428:	bf 90       	pop	r11
    542a:	af 90       	pop	r10
    542c:	9f 90       	pop	r9
    542e:	8f 90       	pop	r8
    5430:	7f 90       	pop	r7
    5432:	6f 90       	pop	r6
    5434:	5f 90       	pop	r5
    5436:	4f 90       	pop	r4
    5438:	0c 94 29 29 	jmp	0x5252	; 0x5252 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	df 91       	pop	r29
    5440:	cf 91       	pop	r28
    5442:	1f 91       	pop	r17
    5444:	0f 91       	pop	r16
    5446:	ff 90       	pop	r15
    5448:	ef 90       	pop	r14
    544a:	df 90       	pop	r13
    544c:	cf 90       	pop	r12
    544e:	bf 90       	pop	r11
    5450:	af 90       	pop	r10
    5452:	9f 90       	pop	r9
    5454:	8f 90       	pop	r8
    5456:	7f 90       	pop	r7
    5458:	6f 90       	pop	r6
    545a:	5f 90       	pop	r5
    545c:	4f 90       	pop	r4
    545e:	08 95       	ret

00005460 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    5460:	af 92       	push	r10
    5462:	bf 92       	push	r11
    5464:	cf 92       	push	r12
    5466:	df 92       	push	r13
    5468:	ef 92       	push	r14
    546a:	0f 93       	push	r16
    546c:	1f 93       	push	r17
    546e:	cf 93       	push	r28
    5470:	df 93       	push	r29
    5472:	ec 01       	movw	r28, r24
    5474:	6a 01       	movw	r12, r20
    5476:	59 01       	movw	r10, r18
    5478:	10 2f       	mov	r17, r16
    547a:	0e 2d       	mov	r16, r14
    547c:	44 ef       	ldi	r20, 0xF4	; 244
    547e:	51 e0       	ldi	r21, 0x01	; 1
    5480:	0e 94 30 22 	call	0x4460	; 0x4460 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5484:	21 2f       	mov	r18, r17
    5486:	a5 01       	movw	r20, r10
    5488:	b6 01       	movw	r22, r12
    548a:	ce 01       	movw	r24, r28
    548c:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5490:	18 2f       	mov	r17, r24
    5492:	88 23       	and	r24, r24
    5494:	31 f0       	breq	.+12     	; 0x54a2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5496:	40 e0       	ldi	r20, 0x00	; 0
    5498:	64 ef       	ldi	r22, 0xF4	; 244
    549a:	71 e0       	ldi	r23, 0x01	; 1
    549c:	ce 01       	movw	r24, r28
    549e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN13Adafruit_FONA8readlineEjb>
    54a2:	81 2f       	mov	r24, r17
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	1f 91       	pop	r17
    54aa:	0f 91       	pop	r16
    54ac:	ef 90       	pop	r14
    54ae:	df 90       	pop	r13
    54b0:	cf 90       	pop	r12
    54b2:	bf 90       	pop	r11
    54b4:	af 90       	pop	r10
    54b6:	08 95       	ret

000054b8 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    54b8:	ef 92       	push	r14
    54ba:	0f 93       	push	r16
    54bc:	9b 01       	movw	r18, r22
    54be:	ee 24       	eor	r14, r14
    54c0:	e3 94       	inc	r14
    54c2:	0c e2       	ldi	r16, 0x2C	; 44
    54c4:	4c ed       	ldi	r20, 0xDC	; 220
    54c6:	56 e0       	ldi	r21, 0x06	; 6
    54c8:	65 ed       	ldi	r22, 0xD5	; 213
    54ca:	76 e0       	ldi	r23, 0x06	; 6
    54cc:	0e 94 30 2a 	call	0x5460	; 0x5460 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    54d0:	0f 91       	pop	r16
    54d2:	ef 90       	pop	r14
    54d4:	08 95       	ret

000054d6 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    54d6:	ef 92       	push	r14
    54d8:	0f 93       	push	r16
    54da:	cf 93       	push	r28
    54dc:	df 93       	push	r29
    54de:	00 d0       	rcall	.+0      	; 0x54e0 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    54e0:	cd b7       	in	r28, 0x3d	; 61
    54e2:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    54e4:	ee 24       	eor	r14, r14
    54e6:	e3 94       	inc	r14
    54e8:	0c e2       	ldi	r16, 0x2C	; 44
    54ea:	9e 01       	movw	r18, r28
    54ec:	2f 5f       	subi	r18, 0xFF	; 255
    54ee:	3f 4f       	sbci	r19, 0xFF	; 255
    54f0:	4d ec       	ldi	r20, 0xCD	; 205
    54f2:	56 e0       	ldi	r21, 0x06	; 6
    54f4:	64 ec       	ldi	r22, 0xC4	; 196
    54f6:	76 e0       	ldi	r23, 0x06	; 6
    54f8:	0e 94 30 2a 	call	0x5460	; 0x5460 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    54fc:	88 23       	and	r24, r24
    54fe:	11 f0       	breq	.+4      	; 0x5504 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    5500:	89 81       	ldd	r24, Y+1	; 0x01
    5502:	01 c0       	rjmp	.+2      	; 0x5506 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    5504:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    5506:	0f 90       	pop	r0
    5508:	0f 90       	pop	r0
    550a:	df 91       	pop	r29
    550c:	cf 91       	pop	r28
    550e:	0f 91       	pop	r16
    5510:	ef 90       	pop	r14
    5512:	08 95       	ret

00005514 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    5514:	ef 92       	push	r14
    5516:	0f 93       	push	r16
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	00 d0       	rcall	.+0      	; 0x551e <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    551e:	cd b7       	in	r28, 0x3d	; 61
    5520:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5522:	e1 2c       	mov	r14, r1
    5524:	0c e2       	ldi	r16, 0x2C	; 44
    5526:	9e 01       	movw	r18, r28
    5528:	2f 5f       	subi	r18, 0xFF	; 255
    552a:	3f 4f       	sbci	r19, 0xFF	; 255
    552c:	4d eb       	ldi	r20, 0xBD	; 189
    552e:	56 e0       	ldi	r21, 0x06	; 6
    5530:	66 eb       	ldi	r22, 0xB6	; 182
    5532:	76 e0       	ldi	r23, 0x06	; 6
    5534:	0e 94 30 2a 	call	0x5460	; 0x5460 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5538:	88 23       	and	r24, r24
    553a:	11 f0       	breq	.+4      	; 0x5540 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    553c:	89 81       	ldd	r24, Y+1	; 0x01
    553e:	01 c0       	rjmp	.+2      	; 0x5542 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    5540:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    5542:	0f 90       	pop	r0
    5544:	0f 90       	pop	r0
    5546:	df 91       	pop	r29
    5548:	cf 91       	pop	r28
    554a:	0f 91       	pop	r16
    554c:	ef 90       	pop	r14
    554e:	08 95       	ret

00005550 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    5550:	20 91 43 08 	lds	r18, 0x0843	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    5554:	30 91 44 08 	lds	r19, 0x0844	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    5558:	28 17       	cp	r18, r24
    555a:	39 07       	cpc	r19, r25
    555c:	b9 f4       	brne	.+46     	; 0x558c <_ZN14SoftwareSerial4readEv+0x3c>
    555e:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5562:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5566:	98 17       	cp	r25, r24
    5568:	89 f0       	breq	.+34     	; 0x558c <_ZN14SoftwareSerial4readEv+0x3c>
    556a:	e0 91 01 08 	lds	r30, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    556e:	f0 e0       	ldi	r31, 0x00	; 0
    5570:	ed 5f       	subi	r30, 0xFD	; 253
    5572:	f7 4f       	sbci	r31, 0xF7	; 247
    5574:	80 81       	ld	r24, Z
    5576:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	2f 5f       	subi	r18, 0xFF	; 255
    557e:	3f 4f       	sbci	r19, 0xFF	; 255
    5580:	2f 73       	andi	r18, 0x3F	; 63
    5582:	33 27       	eor	r19, r19
    5584:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	08 95       	ret
    558c:	8f ef       	ldi	r24, 0xFF	; 255
    558e:	9f ef       	ldi	r25, 0xFF	; 255
    5590:	08 95       	ret

00005592 <_ZN14SoftwareSerial5writeEh>:
    5592:	1f 93       	push	r17
    5594:	cf 93       	push	r28
    5596:	df 93       	push	r29
    5598:	dc 01       	movw	r26, r24
    559a:	5c 96       	adiw	r26, 0x1c	; 28
    559c:	8d 91       	ld	r24, X+
    559e:	9c 91       	ld	r25, X
    55a0:	5d 97       	sbiw	r26, 0x1d	; 29
    55a2:	00 97       	sbiw	r24, 0x00	; 0
    55a4:	39 f4       	brne	.+14     	; 0x55b4 <_ZN14SoftwareSerial5writeEh+0x22>
    55a6:	21 e0       	ldi	r18, 0x01	; 1
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	13 96       	adiw	r26, 0x03	; 3
    55ac:	3c 93       	st	X, r19
    55ae:	2e 93       	st	-X, r18
    55b0:	12 97       	sbiw	r26, 0x02	; 2
    55b2:	3b c0       	rjmp	.+118    	; 0x562a <_ZN14SoftwareSerial5writeEh+0x98>
    55b4:	51 96       	adiw	r26, 0x11	; 17
    55b6:	ed 91       	ld	r30, X+
    55b8:	fc 91       	ld	r31, X
    55ba:	52 97       	sbiw	r26, 0x12	; 18
    55bc:	50 96       	adiw	r26, 0x10	; 16
    55be:	2c 91       	ld	r18, X
    55c0:	50 97       	sbiw	r26, 0x10	; 16
    55c2:	32 2f       	mov	r19, r18
    55c4:	30 95       	com	r19
    55c6:	1f b7       	in	r17, 0x3f	; 63
    55c8:	5e 96       	adiw	r26, 0x1e	; 30
    55ca:	4c 91       	ld	r20, X
    55cc:	5e 97       	sbiw	r26, 0x1e	; 30
    55ce:	74 2f       	mov	r23, r20
    55d0:	72 70       	andi	r23, 0x02	; 2
    55d2:	41 fd       	sbrc	r20, 1
    55d4:	60 95       	com	r22
    55d6:	f8 94       	cli
    55d8:	40 81       	ld	r20, Z
    55da:	77 23       	and	r23, r23
    55dc:	11 f0       	breq	.+4      	; 0x55e2 <_ZN14SoftwareSerial5writeEh+0x50>
    55de:	42 2b       	or	r20, r18
    55e0:	01 c0       	rjmp	.+2      	; 0x55e4 <_ZN14SoftwareSerial5writeEh+0x52>
    55e2:	43 23       	and	r20, r19
    55e4:	40 83       	st	Z, r20
    55e6:	ec 01       	movw	r28, r24
    55e8:	21 97       	sbiw	r28, 0x01	; 1
    55ea:	f1 f7       	brne	.-4      	; 0x55e8 <_ZN14SoftwareSerial5writeEh+0x56>
    55ec:	48 e0       	ldi	r20, 0x08	; 8
    55ee:	50 81       	ld	r21, Z
    55f0:	60 ff       	sbrs	r22, 0
    55f2:	02 c0       	rjmp	.+4      	; 0x55f8 <_ZN14SoftwareSerial5writeEh+0x66>
    55f4:	52 2b       	or	r21, r18
    55f6:	01 c0       	rjmp	.+2      	; 0x55fa <_ZN14SoftwareSerial5writeEh+0x68>
    55f8:	53 23       	and	r21, r19
    55fa:	50 83       	st	Z, r21
    55fc:	ec 01       	movw	r28, r24
    55fe:	21 97       	sbiw	r28, 0x01	; 1
    5600:	f1 f7       	brne	.-4      	; 0x55fe <_ZN14SoftwareSerial5writeEh+0x6c>
    5602:	66 95       	lsr	r22
    5604:	41 50       	subi	r20, 0x01	; 1
    5606:	99 f7       	brne	.-26     	; 0x55ee <_ZN14SoftwareSerial5writeEh+0x5c>
    5608:	80 81       	ld	r24, Z
    560a:	77 23       	and	r23, r23
    560c:	19 f0       	breq	.+6      	; 0x5614 <_ZN14SoftwareSerial5writeEh+0x82>
    560e:	83 23       	and	r24, r19
    5610:	80 83       	st	Z, r24
    5612:	02 c0       	rjmp	.+4      	; 0x5618 <_ZN14SoftwareSerial5writeEh+0x86>
    5614:	28 2b       	or	r18, r24
    5616:	20 83       	st	Z, r18
    5618:	1f bf       	out	0x3f, r17	; 63
    561a:	5c 96       	adiw	r26, 0x1c	; 28
    561c:	8d 91       	ld	r24, X+
    561e:	9c 91       	ld	r25, X
    5620:	5d 97       	sbiw	r26, 0x1d	; 29
    5622:	01 97       	sbiw	r24, 0x01	; 1
    5624:	f1 f7       	brne	.-4      	; 0x5622 <_ZN14SoftwareSerial5writeEh+0x90>
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	df 91       	pop	r29
    562c:	cf 91       	pop	r28
    562e:	1f 91       	pop	r17
    5630:	08 95       	ret

00005632 <_ZN14SoftwareSerial5flushEv>:
    5632:	08 95       	ret

00005634 <_ZN14SoftwareSerial4peekEv>:
    5634:	20 91 43 08 	lds	r18, 0x0843	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    5638:	30 91 44 08 	lds	r19, 0x0844	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    563c:	28 17       	cp	r18, r24
    563e:	39 07       	cpc	r19, r25
    5640:	71 f4       	brne	.+28     	; 0x565e <_ZN14SoftwareSerial4peekEv+0x2a>
    5642:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5646:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    564a:	98 17       	cp	r25, r24
    564c:	41 f0       	breq	.+16     	; 0x565e <_ZN14SoftwareSerial4peekEv+0x2a>
    564e:	e0 91 01 08 	lds	r30, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    5652:	f0 e0       	ldi	r31, 0x00	; 0
    5654:	ed 5f       	subi	r30, 0xFD	; 253
    5656:	f7 4f       	sbci	r31, 0xF7	; 247
    5658:	80 81       	ld	r24, Z
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	08 95       	ret
    565e:	8f ef       	ldi	r24, 0xFF	; 255
    5660:	9f ef       	ldi	r25, 0xFF	; 255
    5662:	08 95       	ret

00005664 <_ZN14SoftwareSerial9availableEv>:
    5664:	20 91 43 08 	lds	r18, 0x0843	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    5668:	30 91 44 08 	lds	r19, 0x0844	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    566c:	28 17       	cp	r18, r24
    566e:	39 07       	cpc	r19, r25
    5670:	71 f4       	brne	.+28     	; 0x568e <_ZN14SoftwareSerial9availableEv+0x2a>
    5672:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5676:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	80 5c       	subi	r24, 0xC0	; 192
    567e:	9f 4f       	sbci	r25, 0xFF	; 255
    5680:	82 1b       	sub	r24, r18
    5682:	91 09       	sbc	r25, r1
    5684:	60 e4       	ldi	r22, 0x40	; 64
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <__divmodhi4>
    568c:	08 95       	ret
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	08 95       	ret

00005694 <_ZN14SoftwareSerial13stopListeningEv>:
    5694:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    5698:	f0 91 44 08 	lds	r31, 0x0844	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    569c:	e8 17       	cp	r30, r24
    569e:	f9 07       	cpc	r31, r25
    56a0:	69 f4       	brne	.+26     	; 0x56bc <_ZN14SoftwareSerial13stopListeningEv+0x28>
    56a2:	a3 89       	ldd	r26, Z+19	; 0x13
    56a4:	b4 89       	ldd	r27, Z+20	; 0x14
    56a6:	9c 91       	ld	r25, X
    56a8:	85 89       	ldd	r24, Z+21	; 0x15
    56aa:	80 95       	com	r24
    56ac:	89 23       	and	r24, r25
    56ae:	8c 93       	st	X, r24
    56b0:	10 92 44 08 	sts	0x0844, r1	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    56b4:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    56b8:	81 e0       	ldi	r24, 0x01	; 1
    56ba:	08 95       	ret
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	08 95       	ret

000056c0 <_ZN14SoftwareSerial6listenEv>:
    56c0:	cf 93       	push	r28
    56c2:	df 93       	push	r29
    56c4:	ec 01       	movw	r28, r24
    56c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56ca:	89 2b       	or	r24, r25
    56cc:	f1 f0       	breq	.+60     	; 0x570a <_ZN14SoftwareSerial6listenEv+0x4a>
    56ce:	80 91 43 08 	lds	r24, 0x0843	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    56d2:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    56d6:	c8 17       	cp	r28, r24
    56d8:	d9 07       	cpc	r29, r25
    56da:	b9 f0       	breq	.+46     	; 0x570a <_ZN14SoftwareSerial6listenEv+0x4a>
    56dc:	00 97       	sbiw	r24, 0x00	; 0
    56de:	11 f0       	breq	.+4      	; 0x56e4 <_ZN14SoftwareSerial6listenEv+0x24>
    56e0:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_ZN14SoftwareSerial13stopListeningEv>
    56e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56e6:	8e 7f       	andi	r24, 0xFE	; 254
    56e8:	8e 8f       	std	Y+30, r24	; 0x1e
    56ea:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    56ee:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    56f2:	d0 93 44 08 	sts	0x0844, r29	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    56f6:	c0 93 43 08 	sts	0x0843, r28	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    56fa:	eb 89       	ldd	r30, Y+19	; 0x13
    56fc:	fc 89       	ldd	r31, Y+20	; 0x14
    56fe:	90 81       	ld	r25, Z
    5700:	8d 89       	ldd	r24, Y+21	; 0x15
    5702:	89 2b       	or	r24, r25
    5704:	80 83       	st	Z, r24
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	01 c0       	rjmp	.+2      	; 0x570c <_ZN14SoftwareSerial6listenEv+0x4c>
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	df 91       	pop	r29
    570e:	cf 91       	pop	r28
    5710:	08 95       	ret

00005712 <__vector_3>:
    5712:	1f 92       	push	r1
    5714:	0f 92       	push	r0
    5716:	0f b6       	in	r0, 0x3f	; 63
    5718:	0f 92       	push	r0
    571a:	11 24       	eor	r1, r1
    571c:	2f 93       	push	r18
    571e:	3f 93       	push	r19
    5720:	4f 93       	push	r20
    5722:	5f 93       	push	r21
    5724:	6f 93       	push	r22
    5726:	7f 93       	push	r23
    5728:	8f 93       	push	r24
    572a:	9f 93       	push	r25
    572c:	af 93       	push	r26
    572e:	bf 93       	push	r27
    5730:	ef 93       	push	r30
    5732:	ff 93       	push	r31
    5734:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <_ZN14SoftwareSerial13active_objectE>
    5738:	f0 91 44 08 	lds	r31, 0x0844	; 0x800844 <_ZN14SoftwareSerial13active_objectE+0x1>
    573c:	30 97       	sbiw	r30, 0x00	; 0
    573e:	09 f4       	brne	.+2      	; 0x5742 <__vector_3+0x30>
    5740:	51 c0       	rjmp	.+162    	; 0x57e4 <__vector_3+0xd2>
    5742:	96 8d       	ldd	r25, Z+30	; 0x1e
    5744:	a6 85       	ldd	r26, Z+14	; 0x0e
    5746:	b7 85       	ldd	r27, Z+15	; 0x0f
    5748:	85 85       	ldd	r24, Z+13	; 0x0d
    574a:	91 ff       	sbrs	r25, 1
    574c:	04 c0       	rjmp	.+8      	; 0x5756 <__vector_3+0x44>
    574e:	9c 91       	ld	r25, X
    5750:	89 23       	and	r24, r25
    5752:	29 f4       	brne	.+10     	; 0x575e <__vector_3+0x4c>
    5754:	47 c0       	rjmp	.+142    	; 0x57e4 <__vector_3+0xd2>
    5756:	9c 91       	ld	r25, X
    5758:	89 23       	and	r24, r25
    575a:	09 f0       	breq	.+2      	; 0x575e <__vector_3+0x4c>
    575c:	43 c0       	rjmp	.+134    	; 0x57e4 <__vector_3+0xd2>
    575e:	a3 89       	ldd	r26, Z+19	; 0x13
    5760:	b4 89       	ldd	r27, Z+20	; 0x14
    5762:	9c 91       	ld	r25, X
    5764:	85 89       	ldd	r24, Z+21	; 0x15
    5766:	80 95       	com	r24
    5768:	89 23       	and	r24, r25
    576a:	8c 93       	st	X, r24
    576c:	86 89       	ldd	r24, Z+22	; 0x16
    576e:	97 89       	ldd	r25, Z+23	; 0x17
    5770:	01 97       	sbiw	r24, 0x01	; 1
    5772:	f1 f7       	brne	.-4      	; 0x5770 <__vector_3+0x5e>
    5774:	60 8d       	ldd	r22, Z+24	; 0x18
    5776:	71 8d       	ldd	r23, Z+25	; 0x19
    5778:	a6 85       	ldd	r26, Z+14	; 0x0e
    577a:	b7 85       	ldd	r27, Z+15	; 0x0f
    577c:	55 85       	ldd	r21, Z+13	; 0x0d
    577e:	38 e0       	ldi	r19, 0x08	; 8
    5780:	20 e0       	ldi	r18, 0x00	; 0
    5782:	cb 01       	movw	r24, r22
    5784:	01 97       	sbiw	r24, 0x01	; 1
    5786:	f1 f7       	brne	.-4      	; 0x5784 <__vector_3+0x72>
    5788:	82 2f       	mov	r24, r18
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	95 95       	asr	r25
    578e:	87 95       	ror	r24
    5790:	28 2f       	mov	r18, r24
    5792:	4c 91       	ld	r20, X
    5794:	45 23       	and	r20, r21
    5796:	09 f0       	breq	.+2      	; 0x579a <__vector_3+0x88>
    5798:	20 68       	ori	r18, 0x80	; 128
    579a:	31 50       	subi	r19, 0x01	; 1
    579c:	91 f7       	brne	.-28     	; 0x5782 <__vector_3+0x70>
    579e:	86 8d       	ldd	r24, Z+30	; 0x1e
    57a0:	81 fd       	sbrc	r24, 1
    57a2:	20 95       	com	r18
    57a4:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	01 96       	adiw	r24, 0x01	; 1
    57ac:	8f 73       	andi	r24, 0x3F	; 63
    57ae:	99 27       	eor	r25, r25
    57b0:	30 91 01 08 	lds	r19, 0x0801	; 0x800801 <_ZN14SoftwareSerial20_receive_buffer_headE>
    57b4:	38 17       	cp	r19, r24
    57b6:	49 f0       	breq	.+18     	; 0x57ca <__vector_3+0xb8>
    57b8:	a0 91 02 08 	lds	r26, 0x0802	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    57bc:	b0 e0       	ldi	r27, 0x00	; 0
    57be:	ad 5f       	subi	r26, 0xFD	; 253
    57c0:	b7 4f       	sbci	r27, 0xF7	; 247
    57c2:	2c 93       	st	X, r18
    57c4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    57c8:	03 c0       	rjmp	.+6      	; 0x57d0 <__vector_3+0xbe>
    57ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    57cc:	81 60       	ori	r24, 0x01	; 1
    57ce:	86 8f       	std	Z+30, r24	; 0x1e
    57d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    57d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    57d4:	01 97       	sbiw	r24, 0x01	; 1
    57d6:	f1 f7       	brne	.-4      	; 0x57d4 <__vector_3+0xc2>
    57d8:	a3 89       	ldd	r26, Z+19	; 0x13
    57da:	b4 89       	ldd	r27, Z+20	; 0x14
    57dc:	9c 91       	ld	r25, X
    57de:	85 89       	ldd	r24, Z+21	; 0x15
    57e0:	89 2b       	or	r24, r25
    57e2:	8c 93       	st	X, r24
    57e4:	ff 91       	pop	r31
    57e6:	ef 91       	pop	r30
    57e8:	bf 91       	pop	r27
    57ea:	af 91       	pop	r26
    57ec:	9f 91       	pop	r25
    57ee:	8f 91       	pop	r24
    57f0:	7f 91       	pop	r23
    57f2:	6f 91       	pop	r22
    57f4:	5f 91       	pop	r21
    57f6:	4f 91       	pop	r20
    57f8:	3f 91       	pop	r19
    57fa:	2f 91       	pop	r18
    57fc:	0f 90       	pop	r0
    57fe:	0f be       	out	0x3f, r0	; 63
    5800:	0f 90       	pop	r0
    5802:	1f 90       	pop	r1
    5804:	18 95       	reti

00005806 <_ZN14SoftwareSerial5setTXEh>:
    5806:	1f 93       	push	r17
    5808:	cf 93       	push	r28
    580a:	df 93       	push	r29
    580c:	ec 01       	movw	r28, r24
    580e:	16 2f       	mov	r17, r22
    5810:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5812:	66 95       	lsr	r22
    5814:	61 70       	andi	r22, 0x01	; 1
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	68 27       	eor	r22, r24
    581a:	81 2f       	mov	r24, r17
    581c:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
    5820:	61 e0       	ldi	r22, 0x01	; 1
    5822:	81 2f       	mov	r24, r17
    5824:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <pinMode>
    5828:	81 2f       	mov	r24, r17
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	fc 01       	movw	r30, r24
    582e:	e8 5c       	subi	r30, 0xC8	; 200
    5830:	fb 4f       	sbci	r31, 0xFB	; 251
    5832:	e4 91       	lpm	r30, Z
    5834:	e8 8b       	std	Y+16, r30	; 0x10
    5836:	fc 01       	movw	r30, r24
    5838:	e4 5b       	subi	r30, 0xB4	; 180
    583a:	fb 4f       	sbci	r31, 0xFB	; 251
    583c:	e4 91       	lpm	r30, Z
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	ee 0f       	add	r30, r30
    5842:	ff 1f       	adc	r31, r31
    5844:	e6 59       	subi	r30, 0x96	; 150
    5846:	fb 4f       	sbci	r31, 0xFB	; 251
    5848:	85 91       	lpm	r24, Z+
    584a:	94 91       	lpm	r25, Z
    584c:	9a 8b       	std	Y+18, r25	; 0x12
    584e:	89 8b       	std	Y+17, r24	; 0x11
    5850:	df 91       	pop	r29
    5852:	cf 91       	pop	r28
    5854:	1f 91       	pop	r17
    5856:	08 95       	ret

00005858 <_ZN14SoftwareSerial5setRXEh>:
    5858:	1f 93       	push	r17
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	ec 01       	movw	r28, r24
    5860:	16 2f       	mov	r17, r22
    5862:	60 e0       	ldi	r22, 0x00	; 0
    5864:	81 2f       	mov	r24, r17
    5866:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <pinMode>
    586a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    586c:	81 fd       	sbrc	r24, 1
    586e:	04 c0       	rjmp	.+8      	; 0x5878 <_ZN14SoftwareSerial5setRXEh+0x20>
    5870:	61 e0       	ldi	r22, 0x01	; 1
    5872:	81 2f       	mov	r24, r17
    5874:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <digitalWrite>
    5878:	1c 87       	std	Y+12, r17	; 0x0c
    587a:	81 2f       	mov	r24, r17
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	fc 01       	movw	r30, r24
    5880:	e8 5c       	subi	r30, 0xC8	; 200
    5882:	fb 4f       	sbci	r31, 0xFB	; 251
    5884:	e4 91       	lpm	r30, Z
    5886:	ed 87       	std	Y+13, r30	; 0x0d
    5888:	fc 01       	movw	r30, r24
    588a:	e4 5b       	subi	r30, 0xB4	; 180
    588c:	fb 4f       	sbci	r31, 0xFB	; 251
    588e:	e4 91       	lpm	r30, Z
    5890:	f0 e0       	ldi	r31, 0x00	; 0
    5892:	ee 0f       	add	r30, r30
    5894:	ff 1f       	adc	r31, r31
    5896:	e0 5a       	subi	r30, 0xA0	; 160
    5898:	fb 4f       	sbci	r31, 0xFB	; 251
    589a:	85 91       	lpm	r24, Z+
    589c:	94 91       	lpm	r25, Z
    589e:	9f 87       	std	Y+15, r25	; 0x0f
    58a0:	8e 87       	std	Y+14, r24	; 0x0e
    58a2:	df 91       	pop	r29
    58a4:	cf 91       	pop	r28
    58a6:	1f 91       	pop	r17
    58a8:	08 95       	ret

000058aa <_ZN14SoftwareSerialC1Ehhb>:
    58aa:	1f 93       	push	r17
    58ac:	cf 93       	push	r28
    58ae:	df 93       	push	r29
    58b0:	ec 01       	movw	r28, r24
    58b2:	16 2f       	mov	r17, r22
    58b4:	1b 82       	std	Y+3, r1	; 0x03
    58b6:	1a 82       	std	Y+2, r1	; 0x02
    58b8:	88 ee       	ldi	r24, 0xE8	; 232
    58ba:	93 e0       	ldi	r25, 0x03	; 3
    58bc:	a0 e0       	ldi	r26, 0x00	; 0
    58be:	b0 e0       	ldi	r27, 0x00	; 0
    58c0:	8c 83       	std	Y+4, r24	; 0x04
    58c2:	9d 83       	std	Y+5, r25	; 0x05
    58c4:	ae 83       	std	Y+6, r26	; 0x06
    58c6:	bf 83       	std	Y+7, r27	; 0x07
    58c8:	88 e2       	ldi	r24, 0x28	; 40
    58ca:	93 e0       	ldi	r25, 0x03	; 3
    58cc:	99 83       	std	Y+1, r25	; 0x01
    58ce:	88 83       	st	Y, r24
    58d0:	1f 8a       	std	Y+23, r1	; 0x17
    58d2:	1e 8a       	std	Y+22, r1	; 0x16
    58d4:	19 8e       	std	Y+25, r1	; 0x19
    58d6:	18 8e       	std	Y+24, r1	; 0x18
    58d8:	1b 8e       	std	Y+27, r1	; 0x1b
    58da:	1a 8e       	std	Y+26, r1	; 0x1a
    58dc:	1d 8e       	std	Y+29, r1	; 0x1d
    58de:	1c 8e       	std	Y+28, r1	; 0x1c
    58e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    58e2:	8e 7f       	andi	r24, 0xFE	; 254
    58e4:	20 fb       	bst	r18, 0
    58e6:	81 f9       	bld	r24, 1
    58e8:	8e 8f       	std	Y+30, r24	; 0x1e
    58ea:	64 2f       	mov	r22, r20
    58ec:	ce 01       	movw	r24, r28
    58ee:	0e 94 03 2c 	call	0x5806	; 0x5806 <_ZN14SoftwareSerial5setTXEh>
    58f2:	61 2f       	mov	r22, r17
    58f4:	ce 01       	movw	r24, r28
    58f6:	df 91       	pop	r29
    58f8:	cf 91       	pop	r28
    58fa:	1f 91       	pop	r17
    58fc:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <_ZN14SoftwareSerial5setRXEh>

00005900 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29
    5904:	ec 01       	movw	r28, r24
    5906:	9a 01       	movw	r18, r20
    5908:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    590a:	1b 8e       	std	Y+27, r1	; 0x1b
    590c:	1a 8e       	std	Y+26, r1	; 0x1a
    590e:	19 8e       	std	Y+25, r1	; 0x19
    5910:	18 8e       	std	Y+24, r1	; 0x18
    5912:	1f 8a       	std	Y+23, r1	; 0x17
    5914:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    5916:	60 e0       	ldi	r22, 0x00	; 0
    5918:	79 e0       	ldi	r23, 0x09	; 9
    591a:	8d e3       	ldi	r24, 0x3D	; 61
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <__divmodsi4>
    5922:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5924:	24 30       	cpi	r18, 0x04	; 4
    5926:	31 05       	cpc	r19, r1
    5928:	18 f0       	brcs	.+6      	; 0x5930 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    592a:	c9 01       	movw	r24, r18
    592c:	03 97       	sbiw	r24, 0x03	; 3
    592e:	02 c0       	rjmp	.+4      	; 0x5934 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    5930:	81 e0       	ldi	r24, 0x01	; 1
    5932:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    5934:	9d 8f       	std	Y+29, r25	; 0x1d
    5936:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    5938:	6c 85       	ldd	r22, Y+12	; 0x0c
    593a:	66 31       	cpi	r22, 0x16	; 22
    593c:	08 f0       	brcs	.+2      	; 0x5940 <_ZN14SoftwareSerial5beginEl+0x40>
    593e:	69 c0       	rjmp	.+210    	; 0x5a12 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5940:	c9 01       	movw	r24, r18
    5942:	96 95       	lsr	r25
    5944:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5946:	84 31       	cpi	r24, 0x14	; 20
    5948:	91 05       	cpc	r25, r1
    594a:	10 f0       	brcs	.+4      	; 0x5950 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    594c:	43 97       	sbiw	r24, 0x13	; 19
    594e:	02 c0       	rjmp	.+4      	; 0x5954 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    5950:	81 e0       	ldi	r24, 0x01	; 1
    5952:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5954:	9f 8b       	std	Y+23, r25	; 0x17
    5956:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5958:	36 97       	sbiw	r30, 0x06	; 6
    595a:	18 f0       	brcs	.+6      	; 0x5962 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    595c:	c9 01       	movw	r24, r18
    595e:	05 97       	sbiw	r24, 0x05	; 5
    5960:	02 c0       	rjmp	.+4      	; 0x5966 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    5966:	99 8f       	std	Y+25, r25	; 0x19
    5968:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    596a:	c9 01       	movw	r24, r18
    596c:	88 0f       	add	r24, r24
    596e:	99 1f       	adc	r25, r25
    5970:	28 0f       	add	r18, r24
    5972:	39 1f       	adc	r19, r25
    5974:	36 95       	lsr	r19
    5976:	27 95       	ror	r18
    5978:	36 95       	lsr	r19
    597a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    597c:	2d 30       	cpi	r18, 0x0D	; 13
    597e:	31 05       	cpc	r19, r1
    5980:	18 f0       	brcs	.+6      	; 0x5988 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    5982:	2c 50       	subi	r18, 0x0C	; 12
    5984:	31 09       	sbc	r19, r1
    5986:	02 c0       	rjmp	.+4      	; 0x598c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    5988:	21 e0       	ldi	r18, 0x01	; 1
    598a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    598c:	3b 8f       	std	Y+27, r19	; 0x1b
    598e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    5990:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    5994:	68 30       	cpi	r22, 0x08	; 8
    5996:	50 f0       	brcs	.+20     	; 0x59ac <_ZN14SoftwareSerial5beginEl+0xac>
    5998:	21 e0       	ldi	r18, 0x01	; 1
    599a:	6e 30       	cpi	r22, 0x0E	; 14
    599c:	08 f4       	brcc	.+2      	; 0x59a0 <_ZN14SoftwareSerial5beginEl+0xa0>
    599e:	20 e0       	ldi	r18, 0x00	; 0
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	01 c0       	rjmp	.+2      	; 0x59a6 <_ZN14SoftwareSerial5beginEl+0xa6>
    59a4:	88 0f       	add	r24, r24
    59a6:	2a 95       	dec	r18
    59a8:	ea f7       	brpl	.-6      	; 0x59a4 <_ZN14SoftwareSerial5beginEl+0xa4>
    59aa:	01 c0       	rjmp	.+2      	; 0x59ae <_ZN14SoftwareSerial5beginEl+0xae>
    59ac:	84 e0       	ldi	r24, 0x04	; 4
    59ae:	89 2b       	or	r24, r25
    59b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    59b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    59b6:	98 30       	cpi	r25, 0x08	; 8
    59b8:	38 f0       	brcs	.+14     	; 0x59c8 <_ZN14SoftwareSerial5beginEl+0xc8>
    59ba:	9e 30       	cpi	r25, 0x0E	; 14
    59bc:	40 f0       	brcs	.+16     	; 0x59ce <_ZN14SoftwareSerial5beginEl+0xce>
    59be:	96 31       	cpi	r25, 0x16	; 22
    59c0:	48 f0       	brcs	.+18     	; 0x59d4 <_ZN14SoftwareSerial5beginEl+0xd4>
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	08 c0       	rjmp	.+16     	; 0x59d8 <_ZN14SoftwareSerial5beginEl+0xd8>
    59c8:	2d e6       	ldi	r18, 0x6D	; 109
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	05 c0       	rjmp	.+10     	; 0x59d8 <_ZN14SoftwareSerial5beginEl+0xd8>
    59ce:	2b e6       	ldi	r18, 0x6B	; 107
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	02 c0       	rjmp	.+4      	; 0x59d8 <_ZN14SoftwareSerial5beginEl+0xd8>
    59d4:	2c e6       	ldi	r18, 0x6C	; 108
    59d6:	30 e0       	ldi	r19, 0x00	; 0
    59d8:	3c 8b       	std	Y+20, r19	; 0x14
    59da:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    59dc:	98 30       	cpi	r25, 0x08	; 8
    59de:	30 f4       	brcc	.+12     	; 0x59ec <_ZN14SoftwareSerial5beginEl+0xec>
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	01 c0       	rjmp	.+2      	; 0x59e6 <_ZN14SoftwareSerial5beginEl+0xe6>
    59e4:	88 0f       	add	r24, r24
    59e6:	9a 95       	dec	r25
    59e8:	ea f7       	brpl	.-6      	; 0x59e4 <_ZN14SoftwareSerial5beginEl+0xe4>
    59ea:	0e c0       	rjmp	.+28     	; 0x5a08 <_ZN14SoftwareSerial5beginEl+0x108>
    59ec:	29 2f       	mov	r18, r25
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	9e 30       	cpi	r25, 0x0E	; 14
    59f2:	18 f4       	brcc	.+6      	; 0x59fa <_ZN14SoftwareSerial5beginEl+0xfa>
    59f4:	28 50       	subi	r18, 0x08	; 8
    59f6:	31 09       	sbc	r19, r1
    59f8:	02 c0       	rjmp	.+4      	; 0x59fe <_ZN14SoftwareSerial5beginEl+0xfe>
    59fa:	2e 50       	subi	r18, 0x0E	; 14
    59fc:	31 09       	sbc	r19, r1
    59fe:	81 e0       	ldi	r24, 0x01	; 1
    5a00:	01 c0       	rjmp	.+2      	; 0x5a04 <_ZN14SoftwareSerial5beginEl+0x104>
    5a02:	88 0f       	add	r24, r24
    5a04:	2a 95       	dec	r18
    5a06:	ea f7       	brpl	.-6      	; 0x5a02 <_ZN14SoftwareSerial5beginEl+0x102>
    5a08:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    5a0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5a0e:	01 97       	sbiw	r24, 0x01	; 1
    5a10:	f1 f7       	brne	.-4      	; 0x5a0e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    5a12:	ce 01       	movw	r24, r28
}
    5a14:	df 91       	pop	r29
    5a16:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    5a18:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <_ZN14SoftwareSerial6listenEv>

00005a1c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5a1c:	08 95       	ret

00005a1e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    5a1e:	08 95       	ret

00005a20 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    5a20:	1f 92       	push	r1
    5a22:	0f 92       	push	r0
    5a24:	0f b6       	in	r0, 0x3f	; 63
    5a26:	0f 92       	push	r0
    5a28:	11 24       	eor	r1, r1
    5a2a:	2f 93       	push	r18
    5a2c:	3f 93       	push	r19
    5a2e:	4f 93       	push	r20
    5a30:	5f 93       	push	r21
    5a32:	6f 93       	push	r22
    5a34:	7f 93       	push	r23
    5a36:	8f 93       	push	r24
    5a38:	9f 93       	push	r25
    5a3a:	af 93       	push	r26
    5a3c:	bf 93       	push	r27
    5a3e:	ef 93       	push	r30
    5a40:	ff 93       	push	r31
    5a42:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc>
    5a46:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x1>
    5a4a:	09 95       	icall
    5a4c:	ff 91       	pop	r31
    5a4e:	ef 91       	pop	r30
    5a50:	bf 91       	pop	r27
    5a52:	af 91       	pop	r26
    5a54:	9f 91       	pop	r25
    5a56:	8f 91       	pop	r24
    5a58:	7f 91       	pop	r23
    5a5a:	6f 91       	pop	r22
    5a5c:	5f 91       	pop	r21
    5a5e:	4f 91       	pop	r20
    5a60:	3f 91       	pop	r19
    5a62:	2f 91       	pop	r18
    5a64:	0f 90       	pop	r0
    5a66:	0f be       	out	0x3f, r0	; 63
    5a68:	0f 90       	pop	r0
    5a6a:	1f 90       	pop	r1
    5a6c:	18 95       	reti

00005a6e <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    5a6e:	1f 92       	push	r1
    5a70:	0f 92       	push	r0
    5a72:	0f b6       	in	r0, 0x3f	; 63
    5a74:	0f 92       	push	r0
    5a76:	11 24       	eor	r1, r1
    5a78:	2f 93       	push	r18
    5a7a:	3f 93       	push	r19
    5a7c:	4f 93       	push	r20
    5a7e:	5f 93       	push	r21
    5a80:	6f 93       	push	r22
    5a82:	7f 93       	push	r23
    5a84:	8f 93       	push	r24
    5a86:	9f 93       	push	r25
    5a88:	af 93       	push	r26
    5a8a:	bf 93       	push	r27
    5a8c:	ef 93       	push	r30
    5a8e:	ff 93       	push	r31
    5a90:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <intFunc+0x2>
    5a94:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <intFunc+0x3>
    5a98:	09 95       	icall
    5a9a:	ff 91       	pop	r31
    5a9c:	ef 91       	pop	r30
    5a9e:	bf 91       	pop	r27
    5aa0:	af 91       	pop	r26
    5aa2:	9f 91       	pop	r25
    5aa4:	8f 91       	pop	r24
    5aa6:	7f 91       	pop	r23
    5aa8:	6f 91       	pop	r22
    5aaa:	5f 91       	pop	r21
    5aac:	4f 91       	pop	r20
    5aae:	3f 91       	pop	r19
    5ab0:	2f 91       	pop	r18
    5ab2:	0f 90       	pop	r0
    5ab4:	0f be       	out	0x3f, r0	; 63
    5ab6:	0f 90       	pop	r0
    5ab8:	1f 90       	pop	r1
    5aba:	18 95       	reti

00005abc <__cmpsf2>:
    5abc:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__fp_cmp>
    5ac0:	08 f4       	brcc	.+2      	; 0x5ac4 <__cmpsf2+0x8>
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	08 95       	ret

00005ac6 <__fp_cmp>:
    5ac6:	99 0f       	add	r25, r25
    5ac8:	00 08       	sbc	r0, r0
    5aca:	55 0f       	add	r21, r21
    5acc:	aa 0b       	sbc	r26, r26
    5ace:	e0 e8       	ldi	r30, 0x80	; 128
    5ad0:	fe ef       	ldi	r31, 0xFE	; 254
    5ad2:	16 16       	cp	r1, r22
    5ad4:	17 06       	cpc	r1, r23
    5ad6:	e8 07       	cpc	r30, r24
    5ad8:	f9 07       	cpc	r31, r25
    5ada:	c0 f0       	brcs	.+48     	; 0x5b0c <__fp_cmp+0x46>
    5adc:	12 16       	cp	r1, r18
    5ade:	13 06       	cpc	r1, r19
    5ae0:	e4 07       	cpc	r30, r20
    5ae2:	f5 07       	cpc	r31, r21
    5ae4:	98 f0       	brcs	.+38     	; 0x5b0c <__fp_cmp+0x46>
    5ae6:	62 1b       	sub	r22, r18
    5ae8:	73 0b       	sbc	r23, r19
    5aea:	84 0b       	sbc	r24, r20
    5aec:	95 0b       	sbc	r25, r21
    5aee:	39 f4       	brne	.+14     	; 0x5afe <__fp_cmp+0x38>
    5af0:	0a 26       	eor	r0, r26
    5af2:	61 f0       	breq	.+24     	; 0x5b0c <__fp_cmp+0x46>
    5af4:	23 2b       	or	r18, r19
    5af6:	24 2b       	or	r18, r20
    5af8:	25 2b       	or	r18, r21
    5afa:	21 f4       	brne	.+8      	; 0x5b04 <__fp_cmp+0x3e>
    5afc:	08 95       	ret
    5afe:	0a 26       	eor	r0, r26
    5b00:	09 f4       	brne	.+2      	; 0x5b04 <__fp_cmp+0x3e>
    5b02:	a1 40       	sbci	r26, 0x01	; 1
    5b04:	a6 95       	lsr	r26
    5b06:	8f ef       	ldi	r24, 0xFF	; 255
    5b08:	81 1d       	adc	r24, r1
    5b0a:	81 1d       	adc	r24, r1
    5b0c:	08 95       	ret

00005b0e <__fp_inf>:
    5b0e:	97 f9       	bld	r25, 7
    5b10:	9f 67       	ori	r25, 0x7F	; 127
    5b12:	80 e8       	ldi	r24, 0x80	; 128
    5b14:	70 e0       	ldi	r23, 0x00	; 0
    5b16:	60 e0       	ldi	r22, 0x00	; 0
    5b18:	08 95       	ret

00005b1a <__fp_nan>:
    5b1a:	9f ef       	ldi	r25, 0xFF	; 255
    5b1c:	80 ec       	ldi	r24, 0xC0	; 192
    5b1e:	08 95       	ret

00005b20 <__fp_pscA>:
    5b20:	00 24       	eor	r0, r0
    5b22:	0a 94       	dec	r0
    5b24:	16 16       	cp	r1, r22
    5b26:	17 06       	cpc	r1, r23
    5b28:	18 06       	cpc	r1, r24
    5b2a:	09 06       	cpc	r0, r25
    5b2c:	08 95       	ret

00005b2e <__fp_pscB>:
    5b2e:	00 24       	eor	r0, r0
    5b30:	0a 94       	dec	r0
    5b32:	12 16       	cp	r1, r18
    5b34:	13 06       	cpc	r1, r19
    5b36:	14 06       	cpc	r1, r20
    5b38:	05 06       	cpc	r0, r21
    5b3a:	08 95       	ret

00005b3c <__fp_round>:
    5b3c:	09 2e       	mov	r0, r25
    5b3e:	03 94       	inc	r0
    5b40:	00 0c       	add	r0, r0
    5b42:	11 f4       	brne	.+4      	; 0x5b48 <__fp_round+0xc>
    5b44:	88 23       	and	r24, r24
    5b46:	52 f0       	brmi	.+20     	; 0x5b5c <__fp_round+0x20>
    5b48:	bb 0f       	add	r27, r27
    5b4a:	40 f4       	brcc	.+16     	; 0x5b5c <__fp_round+0x20>
    5b4c:	bf 2b       	or	r27, r31
    5b4e:	11 f4       	brne	.+4      	; 0x5b54 <__fp_round+0x18>
    5b50:	60 ff       	sbrs	r22, 0
    5b52:	04 c0       	rjmp	.+8      	; 0x5b5c <__fp_round+0x20>
    5b54:	6f 5f       	subi	r22, 0xFF	; 255
    5b56:	7f 4f       	sbci	r23, 0xFF	; 255
    5b58:	8f 4f       	sbci	r24, 0xFF	; 255
    5b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5c:	08 95       	ret

00005b5e <__fp_split3>:
    5b5e:	57 fd       	sbrc	r21, 7
    5b60:	90 58       	subi	r25, 0x80	; 128
    5b62:	44 0f       	add	r20, r20
    5b64:	55 1f       	adc	r21, r21
    5b66:	59 f0       	breq	.+22     	; 0x5b7e <__fp_splitA+0x10>
    5b68:	5f 3f       	cpi	r21, 0xFF	; 255
    5b6a:	71 f0       	breq	.+28     	; 0x5b88 <__fp_splitA+0x1a>
    5b6c:	47 95       	ror	r20

00005b6e <__fp_splitA>:
    5b6e:	88 0f       	add	r24, r24
    5b70:	97 fb       	bst	r25, 7
    5b72:	99 1f       	adc	r25, r25
    5b74:	61 f0       	breq	.+24     	; 0x5b8e <__fp_splitA+0x20>
    5b76:	9f 3f       	cpi	r25, 0xFF	; 255
    5b78:	79 f0       	breq	.+30     	; 0x5b98 <__fp_splitA+0x2a>
    5b7a:	87 95       	ror	r24
    5b7c:	08 95       	ret
    5b7e:	12 16       	cp	r1, r18
    5b80:	13 06       	cpc	r1, r19
    5b82:	14 06       	cpc	r1, r20
    5b84:	55 1f       	adc	r21, r21
    5b86:	f2 cf       	rjmp	.-28     	; 0x5b6c <__fp_split3+0xe>
    5b88:	46 95       	lsr	r20
    5b8a:	f1 df       	rcall	.-30     	; 0x5b6e <__fp_splitA>
    5b8c:	08 c0       	rjmp	.+16     	; 0x5b9e <__fp_splitA+0x30>
    5b8e:	16 16       	cp	r1, r22
    5b90:	17 06       	cpc	r1, r23
    5b92:	18 06       	cpc	r1, r24
    5b94:	99 1f       	adc	r25, r25
    5b96:	f1 cf       	rjmp	.-30     	; 0x5b7a <__fp_splitA+0xc>
    5b98:	86 95       	lsr	r24
    5b9a:	71 05       	cpc	r23, r1
    5b9c:	61 05       	cpc	r22, r1
    5b9e:	08 94       	sec
    5ba0:	08 95       	ret

00005ba2 <__fp_zero>:
    5ba2:	e8 94       	clt

00005ba4 <__fp_szero>:
    5ba4:	bb 27       	eor	r27, r27
    5ba6:	66 27       	eor	r22, r22
    5ba8:	77 27       	eor	r23, r23
    5baa:	cb 01       	movw	r24, r22
    5bac:	97 f9       	bld	r25, 7
    5bae:	08 95       	ret

00005bb0 <__mulsf3>:
    5bb0:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <__mulsf3x>
    5bb4:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__fp_round>
    5bb8:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <__fp_pscA>
    5bbc:	38 f0       	brcs	.+14     	; 0x5bcc <__mulsf3+0x1c>
    5bbe:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <__fp_pscB>
    5bc2:	20 f0       	brcs	.+8      	; 0x5bcc <__mulsf3+0x1c>
    5bc4:	95 23       	and	r25, r21
    5bc6:	11 f0       	breq	.+4      	; 0x5bcc <__mulsf3+0x1c>
    5bc8:	0c 94 87 2d 	jmp	0x5b0e	; 0x5b0e <__fp_inf>
    5bcc:	0c 94 8d 2d 	jmp	0x5b1a	; 0x5b1a <__fp_nan>
    5bd0:	11 24       	eor	r1, r1
    5bd2:	0c 94 d2 2d 	jmp	0x5ba4	; 0x5ba4 <__fp_szero>

00005bd6 <__mulsf3x>:
    5bd6:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__fp_split3>
    5bda:	70 f3       	brcs	.-36     	; 0x5bb8 <__mulsf3+0x8>

00005bdc <__mulsf3_pse>:
    5bdc:	95 9f       	mul	r25, r21
    5bde:	c1 f3       	breq	.-16     	; 0x5bd0 <__mulsf3+0x20>
    5be0:	95 0f       	add	r25, r21
    5be2:	50 e0       	ldi	r21, 0x00	; 0
    5be4:	55 1f       	adc	r21, r21
    5be6:	62 9f       	mul	r22, r18
    5be8:	f0 01       	movw	r30, r0
    5bea:	72 9f       	mul	r23, r18
    5bec:	bb 27       	eor	r27, r27
    5bee:	f0 0d       	add	r31, r0
    5bf0:	b1 1d       	adc	r27, r1
    5bf2:	63 9f       	mul	r22, r19
    5bf4:	aa 27       	eor	r26, r26
    5bf6:	f0 0d       	add	r31, r0
    5bf8:	b1 1d       	adc	r27, r1
    5bfa:	aa 1f       	adc	r26, r26
    5bfc:	64 9f       	mul	r22, r20
    5bfe:	66 27       	eor	r22, r22
    5c00:	b0 0d       	add	r27, r0
    5c02:	a1 1d       	adc	r26, r1
    5c04:	66 1f       	adc	r22, r22
    5c06:	82 9f       	mul	r24, r18
    5c08:	22 27       	eor	r18, r18
    5c0a:	b0 0d       	add	r27, r0
    5c0c:	a1 1d       	adc	r26, r1
    5c0e:	62 1f       	adc	r22, r18
    5c10:	73 9f       	mul	r23, r19
    5c12:	b0 0d       	add	r27, r0
    5c14:	a1 1d       	adc	r26, r1
    5c16:	62 1f       	adc	r22, r18
    5c18:	83 9f       	mul	r24, r19
    5c1a:	a0 0d       	add	r26, r0
    5c1c:	61 1d       	adc	r22, r1
    5c1e:	22 1f       	adc	r18, r18
    5c20:	74 9f       	mul	r23, r20
    5c22:	33 27       	eor	r19, r19
    5c24:	a0 0d       	add	r26, r0
    5c26:	61 1d       	adc	r22, r1
    5c28:	23 1f       	adc	r18, r19
    5c2a:	84 9f       	mul	r24, r20
    5c2c:	60 0d       	add	r22, r0
    5c2e:	21 1d       	adc	r18, r1
    5c30:	82 2f       	mov	r24, r18
    5c32:	76 2f       	mov	r23, r22
    5c34:	6a 2f       	mov	r22, r26
    5c36:	11 24       	eor	r1, r1
    5c38:	9f 57       	subi	r25, 0x7F	; 127
    5c3a:	50 40       	sbci	r21, 0x00	; 0
    5c3c:	9a f0       	brmi	.+38     	; 0x5c64 <__mulsf3_pse+0x88>
    5c3e:	f1 f0       	breq	.+60     	; 0x5c7c <__mulsf3_pse+0xa0>
    5c40:	88 23       	and	r24, r24
    5c42:	4a f0       	brmi	.+18     	; 0x5c56 <__mulsf3_pse+0x7a>
    5c44:	ee 0f       	add	r30, r30
    5c46:	ff 1f       	adc	r31, r31
    5c48:	bb 1f       	adc	r27, r27
    5c4a:	66 1f       	adc	r22, r22
    5c4c:	77 1f       	adc	r23, r23
    5c4e:	88 1f       	adc	r24, r24
    5c50:	91 50       	subi	r25, 0x01	; 1
    5c52:	50 40       	sbci	r21, 0x00	; 0
    5c54:	a9 f7       	brne	.-22     	; 0x5c40 <__mulsf3_pse+0x64>
    5c56:	9e 3f       	cpi	r25, 0xFE	; 254
    5c58:	51 05       	cpc	r21, r1
    5c5a:	80 f0       	brcs	.+32     	; 0x5c7c <__mulsf3_pse+0xa0>
    5c5c:	0c 94 87 2d 	jmp	0x5b0e	; 0x5b0e <__fp_inf>
    5c60:	0c 94 d2 2d 	jmp	0x5ba4	; 0x5ba4 <__fp_szero>
    5c64:	5f 3f       	cpi	r21, 0xFF	; 255
    5c66:	e4 f3       	brlt	.-8      	; 0x5c60 <__mulsf3_pse+0x84>
    5c68:	98 3e       	cpi	r25, 0xE8	; 232
    5c6a:	d4 f3       	brlt	.-12     	; 0x5c60 <__mulsf3_pse+0x84>
    5c6c:	86 95       	lsr	r24
    5c6e:	77 95       	ror	r23
    5c70:	67 95       	ror	r22
    5c72:	b7 95       	ror	r27
    5c74:	f7 95       	ror	r31
    5c76:	e7 95       	ror	r30
    5c78:	9f 5f       	subi	r25, 0xFF	; 255
    5c7a:	c1 f7       	brne	.-16     	; 0x5c6c <__mulsf3_pse+0x90>
    5c7c:	fe 2b       	or	r31, r30
    5c7e:	88 0f       	add	r24, r24
    5c80:	91 1d       	adc	r25, r1
    5c82:	96 95       	lsr	r25
    5c84:	87 95       	ror	r24
    5c86:	97 f9       	bld	r25, 7
    5c88:	08 95       	ret

00005c8a <__divmodhi4>:
    5c8a:	97 fb       	bst	r25, 7
    5c8c:	07 2e       	mov	r0, r23
    5c8e:	16 f4       	brtc	.+4      	; 0x5c94 <__divmodhi4+0xa>
    5c90:	00 94       	com	r0
    5c92:	07 d0       	rcall	.+14     	; 0x5ca2 <__divmodhi4_neg1>
    5c94:	77 fd       	sbrc	r23, 7
    5c96:	09 d0       	rcall	.+18     	; 0x5caa <__divmodhi4_neg2>
    5c98:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__udivmodhi4>
    5c9c:	07 fc       	sbrc	r0, 7
    5c9e:	05 d0       	rcall	.+10     	; 0x5caa <__divmodhi4_neg2>
    5ca0:	3e f4       	brtc	.+14     	; 0x5cb0 <__divmodhi4_exit>

00005ca2 <__divmodhi4_neg1>:
    5ca2:	90 95       	com	r25
    5ca4:	81 95       	neg	r24
    5ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca8:	08 95       	ret

00005caa <__divmodhi4_neg2>:
    5caa:	70 95       	com	r23
    5cac:	61 95       	neg	r22
    5cae:	7f 4f       	sbci	r23, 0xFF	; 255

00005cb0 <__divmodhi4_exit>:
    5cb0:	08 95       	ret

00005cb2 <__udivmodsi4>:
    5cb2:	a1 e2       	ldi	r26, 0x21	; 33
    5cb4:	1a 2e       	mov	r1, r26
    5cb6:	aa 1b       	sub	r26, r26
    5cb8:	bb 1b       	sub	r27, r27
    5cba:	fd 01       	movw	r30, r26
    5cbc:	0d c0       	rjmp	.+26     	; 0x5cd8 <__udivmodsi4_ep>

00005cbe <__udivmodsi4_loop>:
    5cbe:	aa 1f       	adc	r26, r26
    5cc0:	bb 1f       	adc	r27, r27
    5cc2:	ee 1f       	adc	r30, r30
    5cc4:	ff 1f       	adc	r31, r31
    5cc6:	a2 17       	cp	r26, r18
    5cc8:	b3 07       	cpc	r27, r19
    5cca:	e4 07       	cpc	r30, r20
    5ccc:	f5 07       	cpc	r31, r21
    5cce:	20 f0       	brcs	.+8      	; 0x5cd8 <__udivmodsi4_ep>
    5cd0:	a2 1b       	sub	r26, r18
    5cd2:	b3 0b       	sbc	r27, r19
    5cd4:	e4 0b       	sbc	r30, r20
    5cd6:	f5 0b       	sbc	r31, r21

00005cd8 <__udivmodsi4_ep>:
    5cd8:	66 1f       	adc	r22, r22
    5cda:	77 1f       	adc	r23, r23
    5cdc:	88 1f       	adc	r24, r24
    5cde:	99 1f       	adc	r25, r25
    5ce0:	1a 94       	dec	r1
    5ce2:	69 f7       	brne	.-38     	; 0x5cbe <__udivmodsi4_loop>
    5ce4:	60 95       	com	r22
    5ce6:	70 95       	com	r23
    5ce8:	80 95       	com	r24
    5cea:	90 95       	com	r25
    5cec:	9b 01       	movw	r18, r22
    5cee:	ac 01       	movw	r20, r24
    5cf0:	bd 01       	movw	r22, r26
    5cf2:	cf 01       	movw	r24, r30
    5cf4:	08 95       	ret

00005cf6 <__divmodsi4>:
    5cf6:	05 2e       	mov	r0, r21
    5cf8:	97 fb       	bst	r25, 7
    5cfa:	1e f4       	brtc	.+6      	; 0x5d02 <__divmodsi4+0xc>
    5cfc:	00 94       	com	r0
    5cfe:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <__negsi2>
    5d02:	57 fd       	sbrc	r21, 7
    5d04:	07 d0       	rcall	.+14     	; 0x5d14 <__divmodsi4_neg2>
    5d06:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodsi4>
    5d0a:	07 fc       	sbrc	r0, 7
    5d0c:	03 d0       	rcall	.+6      	; 0x5d14 <__divmodsi4_neg2>
    5d0e:	4e f4       	brtc	.+18     	; 0x5d22 <__divmodsi4_exit>
    5d10:	0c 94 92 2e 	jmp	0x5d24	; 0x5d24 <__negsi2>

00005d14 <__divmodsi4_neg2>:
    5d14:	50 95       	com	r21
    5d16:	40 95       	com	r20
    5d18:	30 95       	com	r19
    5d1a:	21 95       	neg	r18
    5d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d1e:	4f 4f       	sbci	r20, 0xFF	; 255
    5d20:	5f 4f       	sbci	r21, 0xFF	; 255

00005d22 <__divmodsi4_exit>:
    5d22:	08 95       	ret

00005d24 <__negsi2>:
    5d24:	90 95       	com	r25
    5d26:	80 95       	com	r24
    5d28:	70 95       	com	r23
    5d2a:	61 95       	neg	r22
    5d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	08 95       	ret

00005d34 <__tablejump2__>:
    5d34:	ee 0f       	add	r30, r30
    5d36:	ff 1f       	adc	r31, r31
    5d38:	05 90       	lpm	r0, Z+
    5d3a:	f4 91       	lpm	r31, Z
    5d3c:	e0 2d       	mov	r30, r0
    5d3e:	09 94       	ijmp

00005d40 <__ashrdi3>:
    5d40:	97 fb       	bst	r25, 7
    5d42:	10 f8       	bld	r1, 0

00005d44 <__lshrdi3>:
    5d44:	16 94       	lsr	r1
    5d46:	00 08       	sbc	r0, r0
    5d48:	0f 93       	push	r16
    5d4a:	08 30       	cpi	r16, 0x08	; 8
    5d4c:	98 f0       	brcs	.+38     	; 0x5d74 <__lshrdi3+0x30>
    5d4e:	08 50       	subi	r16, 0x08	; 8
    5d50:	23 2f       	mov	r18, r19
    5d52:	34 2f       	mov	r19, r20
    5d54:	45 2f       	mov	r20, r21
    5d56:	56 2f       	mov	r21, r22
    5d58:	67 2f       	mov	r22, r23
    5d5a:	78 2f       	mov	r23, r24
    5d5c:	89 2f       	mov	r24, r25
    5d5e:	90 2d       	mov	r25, r0
    5d60:	f4 cf       	rjmp	.-24     	; 0x5d4a <__lshrdi3+0x6>
    5d62:	05 94       	asr	r0
    5d64:	97 95       	ror	r25
    5d66:	87 95       	ror	r24
    5d68:	77 95       	ror	r23
    5d6a:	67 95       	ror	r22
    5d6c:	57 95       	ror	r21
    5d6e:	47 95       	ror	r20
    5d70:	37 95       	ror	r19
    5d72:	27 95       	ror	r18
    5d74:	0a 95       	dec	r16
    5d76:	aa f7       	brpl	.-22     	; 0x5d62 <__lshrdi3+0x1e>
    5d78:	0f 91       	pop	r16
    5d7a:	08 95       	ret

00005d7c <__udivmodhi4>:
    5d7c:	aa 1b       	sub	r26, r26
    5d7e:	bb 1b       	sub	r27, r27
    5d80:	51 e1       	ldi	r21, 0x11	; 17
    5d82:	07 c0       	rjmp	.+14     	; 0x5d92 <__udivmodhi4_ep>

00005d84 <__udivmodhi4_loop>:
    5d84:	aa 1f       	adc	r26, r26
    5d86:	bb 1f       	adc	r27, r27
    5d88:	a6 17       	cp	r26, r22
    5d8a:	b7 07       	cpc	r27, r23
    5d8c:	10 f0       	brcs	.+4      	; 0x5d92 <__udivmodhi4_ep>
    5d8e:	a6 1b       	sub	r26, r22
    5d90:	b7 0b       	sbc	r27, r23

00005d92 <__udivmodhi4_ep>:
    5d92:	88 1f       	adc	r24, r24
    5d94:	99 1f       	adc	r25, r25
    5d96:	5a 95       	dec	r21
    5d98:	a9 f7       	brne	.-22     	; 0x5d84 <__udivmodhi4_loop>
    5d9a:	80 95       	com	r24
    5d9c:	90 95       	com	r25
    5d9e:	bc 01       	movw	r22, r24
    5da0:	cd 01       	movw	r24, r26
    5da2:	08 95       	ret

00005da4 <malloc>:
    5da4:	0f 93       	push	r16
    5da6:	1f 93       	push	r17
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	82 30       	cpi	r24, 0x02	; 2
    5dae:	91 05       	cpc	r25, r1
    5db0:	10 f4       	brcc	.+4      	; 0x5db6 <malloc+0x12>
    5db2:	82 e0       	ldi	r24, 0x02	; 2
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	e0 91 47 08 	lds	r30, 0x0847	; 0x800847 <__flp>
    5dba:	f0 91 48 08 	lds	r31, 0x0848	; 0x800848 <__flp+0x1>
    5dbe:	20 e0       	ldi	r18, 0x00	; 0
    5dc0:	30 e0       	ldi	r19, 0x00	; 0
    5dc2:	a0 e0       	ldi	r26, 0x00	; 0
    5dc4:	b0 e0       	ldi	r27, 0x00	; 0
    5dc6:	30 97       	sbiw	r30, 0x00	; 0
    5dc8:	19 f1       	breq	.+70     	; 0x5e10 <malloc+0x6c>
    5dca:	40 81       	ld	r20, Z
    5dcc:	51 81       	ldd	r21, Z+1	; 0x01
    5dce:	02 81       	ldd	r16, Z+2	; 0x02
    5dd0:	13 81       	ldd	r17, Z+3	; 0x03
    5dd2:	48 17       	cp	r20, r24
    5dd4:	59 07       	cpc	r21, r25
    5dd6:	c8 f0       	brcs	.+50     	; 0x5e0a <malloc+0x66>
    5dd8:	84 17       	cp	r24, r20
    5dda:	95 07       	cpc	r25, r21
    5ddc:	69 f4       	brne	.+26     	; 0x5df8 <malloc+0x54>
    5dde:	10 97       	sbiw	r26, 0x00	; 0
    5de0:	31 f0       	breq	.+12     	; 0x5dee <malloc+0x4a>
    5de2:	12 96       	adiw	r26, 0x02	; 2
    5de4:	0c 93       	st	X, r16
    5de6:	12 97       	sbiw	r26, 0x02	; 2
    5de8:	13 96       	adiw	r26, 0x03	; 3
    5dea:	1c 93       	st	X, r17
    5dec:	27 c0       	rjmp	.+78     	; 0x5e3c <malloc+0x98>
    5dee:	00 93 47 08 	sts	0x0847, r16	; 0x800847 <__flp>
    5df2:	10 93 48 08 	sts	0x0848, r17	; 0x800848 <__flp+0x1>
    5df6:	22 c0       	rjmp	.+68     	; 0x5e3c <malloc+0x98>
    5df8:	21 15       	cp	r18, r1
    5dfa:	31 05       	cpc	r19, r1
    5dfc:	19 f0       	breq	.+6      	; 0x5e04 <malloc+0x60>
    5dfe:	42 17       	cp	r20, r18
    5e00:	53 07       	cpc	r21, r19
    5e02:	18 f4       	brcc	.+6      	; 0x5e0a <malloc+0x66>
    5e04:	9a 01       	movw	r18, r20
    5e06:	bd 01       	movw	r22, r26
    5e08:	ef 01       	movw	r28, r30
    5e0a:	df 01       	movw	r26, r30
    5e0c:	f8 01       	movw	r30, r16
    5e0e:	db cf       	rjmp	.-74     	; 0x5dc6 <malloc+0x22>
    5e10:	21 15       	cp	r18, r1
    5e12:	31 05       	cpc	r19, r1
    5e14:	f9 f0       	breq	.+62     	; 0x5e54 <malloc+0xb0>
    5e16:	28 1b       	sub	r18, r24
    5e18:	39 0b       	sbc	r19, r25
    5e1a:	24 30       	cpi	r18, 0x04	; 4
    5e1c:	31 05       	cpc	r19, r1
    5e1e:	80 f4       	brcc	.+32     	; 0x5e40 <malloc+0x9c>
    5e20:	8a 81       	ldd	r24, Y+2	; 0x02
    5e22:	9b 81       	ldd	r25, Y+3	; 0x03
    5e24:	61 15       	cp	r22, r1
    5e26:	71 05       	cpc	r23, r1
    5e28:	21 f0       	breq	.+8      	; 0x5e32 <malloc+0x8e>
    5e2a:	fb 01       	movw	r30, r22
    5e2c:	93 83       	std	Z+3, r25	; 0x03
    5e2e:	82 83       	std	Z+2, r24	; 0x02
    5e30:	04 c0       	rjmp	.+8      	; 0x5e3a <malloc+0x96>
    5e32:	90 93 48 08 	sts	0x0848, r25	; 0x800848 <__flp+0x1>
    5e36:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <__flp>
    5e3a:	fe 01       	movw	r30, r28
    5e3c:	32 96       	adiw	r30, 0x02	; 2
    5e3e:	44 c0       	rjmp	.+136    	; 0x5ec8 <malloc+0x124>
    5e40:	fe 01       	movw	r30, r28
    5e42:	e2 0f       	add	r30, r18
    5e44:	f3 1f       	adc	r31, r19
    5e46:	81 93       	st	Z+, r24
    5e48:	91 93       	st	Z+, r25
    5e4a:	22 50       	subi	r18, 0x02	; 2
    5e4c:	31 09       	sbc	r19, r1
    5e4e:	39 83       	std	Y+1, r19	; 0x01
    5e50:	28 83       	st	Y, r18
    5e52:	3a c0       	rjmp	.+116    	; 0x5ec8 <malloc+0x124>
    5e54:	20 91 45 08 	lds	r18, 0x0845	; 0x800845 <__brkval>
    5e58:	30 91 46 08 	lds	r19, 0x0846	; 0x800846 <__brkval+0x1>
    5e5c:	23 2b       	or	r18, r19
    5e5e:	41 f4       	brne	.+16     	; 0x5e70 <malloc+0xcc>
    5e60:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    5e64:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    5e68:	30 93 46 08 	sts	0x0846, r19	; 0x800846 <__brkval+0x1>
    5e6c:	20 93 45 08 	sts	0x0845, r18	; 0x800845 <__brkval>
    5e70:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    5e74:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    5e78:	21 15       	cp	r18, r1
    5e7a:	31 05       	cpc	r19, r1
    5e7c:	41 f4       	brne	.+16     	; 0x5e8e <malloc+0xea>
    5e7e:	2d b7       	in	r18, 0x3d	; 61
    5e80:	3e b7       	in	r19, 0x3e	; 62
    5e82:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    5e86:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    5e8a:	24 1b       	sub	r18, r20
    5e8c:	35 0b       	sbc	r19, r21
    5e8e:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <__brkval>
    5e92:	f0 91 46 08 	lds	r31, 0x0846	; 0x800846 <__brkval+0x1>
    5e96:	e2 17       	cp	r30, r18
    5e98:	f3 07       	cpc	r31, r19
    5e9a:	a0 f4       	brcc	.+40     	; 0x5ec4 <malloc+0x120>
    5e9c:	2e 1b       	sub	r18, r30
    5e9e:	3f 0b       	sbc	r19, r31
    5ea0:	28 17       	cp	r18, r24
    5ea2:	39 07       	cpc	r19, r25
    5ea4:	78 f0       	brcs	.+30     	; 0x5ec4 <malloc+0x120>
    5ea6:	ac 01       	movw	r20, r24
    5ea8:	4e 5f       	subi	r20, 0xFE	; 254
    5eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    5eac:	24 17       	cp	r18, r20
    5eae:	35 07       	cpc	r19, r21
    5eb0:	48 f0       	brcs	.+18     	; 0x5ec4 <malloc+0x120>
    5eb2:	4e 0f       	add	r20, r30
    5eb4:	5f 1f       	adc	r21, r31
    5eb6:	50 93 46 08 	sts	0x0846, r21	; 0x800846 <__brkval+0x1>
    5eba:	40 93 45 08 	sts	0x0845, r20	; 0x800845 <__brkval>
    5ebe:	81 93       	st	Z+, r24
    5ec0:	91 93       	st	Z+, r25
    5ec2:	02 c0       	rjmp	.+4      	; 0x5ec8 <malloc+0x124>
    5ec4:	e0 e0       	ldi	r30, 0x00	; 0
    5ec6:	f0 e0       	ldi	r31, 0x00	; 0
    5ec8:	cf 01       	movw	r24, r30
    5eca:	df 91       	pop	r29
    5ecc:	cf 91       	pop	r28
    5ece:	1f 91       	pop	r17
    5ed0:	0f 91       	pop	r16
    5ed2:	08 95       	ret

00005ed4 <free>:
    5ed4:	cf 93       	push	r28
    5ed6:	df 93       	push	r29
    5ed8:	00 97       	sbiw	r24, 0x00	; 0
    5eda:	09 f4       	brne	.+2      	; 0x5ede <free+0xa>
    5edc:	81 c0       	rjmp	.+258    	; 0x5fe0 <free+0x10c>
    5ede:	fc 01       	movw	r30, r24
    5ee0:	32 97       	sbiw	r30, 0x02	; 2
    5ee2:	13 82       	std	Z+3, r1	; 0x03
    5ee4:	12 82       	std	Z+2, r1	; 0x02
    5ee6:	a0 91 47 08 	lds	r26, 0x0847	; 0x800847 <__flp>
    5eea:	b0 91 48 08 	lds	r27, 0x0848	; 0x800848 <__flp+0x1>
    5eee:	10 97       	sbiw	r26, 0x00	; 0
    5ef0:	81 f4       	brne	.+32     	; 0x5f12 <free+0x3e>
    5ef2:	20 81       	ld	r18, Z
    5ef4:	31 81       	ldd	r19, Z+1	; 0x01
    5ef6:	82 0f       	add	r24, r18
    5ef8:	93 1f       	adc	r25, r19
    5efa:	20 91 45 08 	lds	r18, 0x0845	; 0x800845 <__brkval>
    5efe:	30 91 46 08 	lds	r19, 0x0846	; 0x800846 <__brkval+0x1>
    5f02:	28 17       	cp	r18, r24
    5f04:	39 07       	cpc	r19, r25
    5f06:	51 f5       	brne	.+84     	; 0x5f5c <free+0x88>
    5f08:	f0 93 46 08 	sts	0x0846, r31	; 0x800846 <__brkval+0x1>
    5f0c:	e0 93 45 08 	sts	0x0845, r30	; 0x800845 <__brkval>
    5f10:	67 c0       	rjmp	.+206    	; 0x5fe0 <free+0x10c>
    5f12:	ed 01       	movw	r28, r26
    5f14:	20 e0       	ldi	r18, 0x00	; 0
    5f16:	30 e0       	ldi	r19, 0x00	; 0
    5f18:	ce 17       	cp	r28, r30
    5f1a:	df 07       	cpc	r29, r31
    5f1c:	40 f4       	brcc	.+16     	; 0x5f2e <free+0x5a>
    5f1e:	4a 81       	ldd	r20, Y+2	; 0x02
    5f20:	5b 81       	ldd	r21, Y+3	; 0x03
    5f22:	9e 01       	movw	r18, r28
    5f24:	41 15       	cp	r20, r1
    5f26:	51 05       	cpc	r21, r1
    5f28:	f1 f0       	breq	.+60     	; 0x5f66 <free+0x92>
    5f2a:	ea 01       	movw	r28, r20
    5f2c:	f5 cf       	rjmp	.-22     	; 0x5f18 <free+0x44>
    5f2e:	d3 83       	std	Z+3, r29	; 0x03
    5f30:	c2 83       	std	Z+2, r28	; 0x02
    5f32:	40 81       	ld	r20, Z
    5f34:	51 81       	ldd	r21, Z+1	; 0x01
    5f36:	84 0f       	add	r24, r20
    5f38:	95 1f       	adc	r25, r21
    5f3a:	c8 17       	cp	r28, r24
    5f3c:	d9 07       	cpc	r29, r25
    5f3e:	59 f4       	brne	.+22     	; 0x5f56 <free+0x82>
    5f40:	88 81       	ld	r24, Y
    5f42:	99 81       	ldd	r25, Y+1	; 0x01
    5f44:	84 0f       	add	r24, r20
    5f46:	95 1f       	adc	r25, r21
    5f48:	02 96       	adiw	r24, 0x02	; 2
    5f4a:	91 83       	std	Z+1, r25	; 0x01
    5f4c:	80 83       	st	Z, r24
    5f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f50:	9b 81       	ldd	r25, Y+3	; 0x03
    5f52:	93 83       	std	Z+3, r25	; 0x03
    5f54:	82 83       	std	Z+2, r24	; 0x02
    5f56:	21 15       	cp	r18, r1
    5f58:	31 05       	cpc	r19, r1
    5f5a:	29 f4       	brne	.+10     	; 0x5f66 <free+0x92>
    5f5c:	f0 93 48 08 	sts	0x0848, r31	; 0x800848 <__flp+0x1>
    5f60:	e0 93 47 08 	sts	0x0847, r30	; 0x800847 <__flp>
    5f64:	3d c0       	rjmp	.+122    	; 0x5fe0 <free+0x10c>
    5f66:	e9 01       	movw	r28, r18
    5f68:	fb 83       	std	Y+3, r31	; 0x03
    5f6a:	ea 83       	std	Y+2, r30	; 0x02
    5f6c:	49 91       	ld	r20, Y+
    5f6e:	59 91       	ld	r21, Y+
    5f70:	c4 0f       	add	r28, r20
    5f72:	d5 1f       	adc	r29, r21
    5f74:	ec 17       	cp	r30, r28
    5f76:	fd 07       	cpc	r31, r29
    5f78:	61 f4       	brne	.+24     	; 0x5f92 <free+0xbe>
    5f7a:	80 81       	ld	r24, Z
    5f7c:	91 81       	ldd	r25, Z+1	; 0x01
    5f7e:	84 0f       	add	r24, r20
    5f80:	95 1f       	adc	r25, r21
    5f82:	02 96       	adiw	r24, 0x02	; 2
    5f84:	e9 01       	movw	r28, r18
    5f86:	99 83       	std	Y+1, r25	; 0x01
    5f88:	88 83       	st	Y, r24
    5f8a:	82 81       	ldd	r24, Z+2	; 0x02
    5f8c:	93 81       	ldd	r25, Z+3	; 0x03
    5f8e:	9b 83       	std	Y+3, r25	; 0x03
    5f90:	8a 83       	std	Y+2, r24	; 0x02
    5f92:	e0 e0       	ldi	r30, 0x00	; 0
    5f94:	f0 e0       	ldi	r31, 0x00	; 0
    5f96:	12 96       	adiw	r26, 0x02	; 2
    5f98:	8d 91       	ld	r24, X+
    5f9a:	9c 91       	ld	r25, X
    5f9c:	13 97       	sbiw	r26, 0x03	; 3
    5f9e:	00 97       	sbiw	r24, 0x00	; 0
    5fa0:	19 f0       	breq	.+6      	; 0x5fa8 <free+0xd4>
    5fa2:	fd 01       	movw	r30, r26
    5fa4:	dc 01       	movw	r26, r24
    5fa6:	f7 cf       	rjmp	.-18     	; 0x5f96 <free+0xc2>
    5fa8:	8d 91       	ld	r24, X+
    5faa:	9c 91       	ld	r25, X
    5fac:	11 97       	sbiw	r26, 0x01	; 1
    5fae:	9d 01       	movw	r18, r26
    5fb0:	2e 5f       	subi	r18, 0xFE	; 254
    5fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fb4:	82 0f       	add	r24, r18
    5fb6:	93 1f       	adc	r25, r19
    5fb8:	20 91 45 08 	lds	r18, 0x0845	; 0x800845 <__brkval>
    5fbc:	30 91 46 08 	lds	r19, 0x0846	; 0x800846 <__brkval+0x1>
    5fc0:	28 17       	cp	r18, r24
    5fc2:	39 07       	cpc	r19, r25
    5fc4:	69 f4       	brne	.+26     	; 0x5fe0 <free+0x10c>
    5fc6:	30 97       	sbiw	r30, 0x00	; 0
    5fc8:	29 f4       	brne	.+10     	; 0x5fd4 <free+0x100>
    5fca:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <__flp+0x1>
    5fce:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <__flp>
    5fd2:	02 c0       	rjmp	.+4      	; 0x5fd8 <free+0x104>
    5fd4:	13 82       	std	Z+3, r1	; 0x03
    5fd6:	12 82       	std	Z+2, r1	; 0x02
    5fd8:	b0 93 46 08 	sts	0x0846, r27	; 0x800846 <__brkval+0x1>
    5fdc:	a0 93 45 08 	sts	0x0845, r26	; 0x800845 <__brkval>
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	08 95       	ret

00005fe6 <abort>:
    5fe6:	81 e0       	ldi	r24, 0x01	; 1
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	f8 94       	cli
    5fec:	0c 94 8a 32 	jmp	0x6514	; 0x6514 <__do_global_dtors>

00005ff0 <atof>:
    5ff0:	66 27       	eor	r22, r22
    5ff2:	77 27       	eor	r23, r23
    5ff4:	0c 94 c7 30 	jmp	0x618e	; 0x618e <strtod>

00005ff8 <atoi>:
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	88 27       	eor	r24, r24
    5ffc:	99 27       	eor	r25, r25
    5ffe:	e8 94       	clt
    6000:	21 91       	ld	r18, Z+
    6002:	20 32       	cpi	r18, 0x20	; 32
    6004:	e9 f3       	breq	.-6      	; 0x6000 <atoi+0x8>
    6006:	29 30       	cpi	r18, 0x09	; 9
    6008:	10 f0       	brcs	.+4      	; 0x600e <atoi+0x16>
    600a:	2e 30       	cpi	r18, 0x0E	; 14
    600c:	c8 f3       	brcs	.-14     	; 0x6000 <atoi+0x8>
    600e:	2b 32       	cpi	r18, 0x2B	; 43
    6010:	41 f0       	breq	.+16     	; 0x6022 <atoi+0x2a>
    6012:	2d 32       	cpi	r18, 0x2D	; 45
    6014:	39 f4       	brne	.+14     	; 0x6024 <atoi+0x2c>
    6016:	68 94       	set
    6018:	04 c0       	rjmp	.+8      	; 0x6022 <atoi+0x2a>
    601a:	0e 94 bf 30 	call	0x617e	; 0x617e <__mulhi_const_10>
    601e:	82 0f       	add	r24, r18
    6020:	91 1d       	adc	r25, r1
    6022:	21 91       	ld	r18, Z+
    6024:	20 53       	subi	r18, 0x30	; 48
    6026:	2a 30       	cpi	r18, 0x0A	; 10
    6028:	c0 f3       	brcs	.-16     	; 0x601a <atoi+0x22>
    602a:	1e f4       	brtc	.+6      	; 0x6032 <atoi+0x3a>
    602c:	90 95       	com	r25
    602e:	81 95       	neg	r24
    6030:	9f 4f       	sbci	r25, 0xFF	; 255
    6032:	08 95       	ret

00006034 <strcmp_P>:
    6034:	fb 01       	movw	r30, r22
    6036:	dc 01       	movw	r26, r24
    6038:	8d 91       	ld	r24, X+
    603a:	05 90       	lpm	r0, Z+
    603c:	80 19       	sub	r24, r0
    603e:	01 10       	cpse	r0, r1
    6040:	d9 f3       	breq	.-10     	; 0x6038 <strcmp_P+0x4>
    6042:	99 0b       	sbc	r25, r25
    6044:	08 95       	ret

00006046 <__strlen_P>:
    6046:	fc 01       	movw	r30, r24
    6048:	05 90       	lpm	r0, Z+
    604a:	00 20       	and	r0, r0
    604c:	e9 f7       	brne	.-6      	; 0x6048 <__strlen_P+0x2>
    604e:	80 95       	com	r24
    6050:	90 95       	com	r25
    6052:	8e 0f       	add	r24, r30
    6054:	9f 1f       	adc	r25, r31
    6056:	08 95       	ret

00006058 <strstr_P>:
    6058:	fb 01       	movw	r30, r22
    605a:	55 91       	lpm	r21, Z+
    605c:	55 23       	and	r21, r21
    605e:	a9 f0       	breq	.+42     	; 0x608a <strstr_P+0x32>
    6060:	bf 01       	movw	r22, r30
    6062:	dc 01       	movw	r26, r24
    6064:	4d 91       	ld	r20, X+
    6066:	45 17       	cp	r20, r21
    6068:	41 11       	cpse	r20, r1
    606a:	e1 f7       	brne	.-8      	; 0x6064 <strstr_P+0xc>
    606c:	59 f4       	brne	.+22     	; 0x6084 <strstr_P+0x2c>
    606e:	cd 01       	movw	r24, r26
    6070:	05 90       	lpm	r0, Z+
    6072:	00 20       	and	r0, r0
    6074:	49 f0       	breq	.+18     	; 0x6088 <strstr_P+0x30>
    6076:	4d 91       	ld	r20, X+
    6078:	40 15       	cp	r20, r0
    607a:	41 11       	cpse	r20, r1
    607c:	c9 f3       	breq	.-14     	; 0x6070 <strstr_P+0x18>
    607e:	fb 01       	movw	r30, r22
    6080:	41 11       	cpse	r20, r1
    6082:	ef cf       	rjmp	.-34     	; 0x6062 <strstr_P+0xa>
    6084:	81 e0       	ldi	r24, 0x01	; 1
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	01 97       	sbiw	r24, 0x01	; 1
    608a:	08 95       	ret

0000608c <strtok>:
    608c:	49 e5       	ldi	r20, 0x59	; 89
    608e:	57 e0       	ldi	r21, 0x07	; 7
    6090:	0e 94 98 30 	call	0x6130	; 0x6130 <strtok_r>
    6094:	08 95       	ret

00006096 <memset>:
    6096:	dc 01       	movw	r26, r24
    6098:	01 c0       	rjmp	.+2      	; 0x609c <memset+0x6>
    609a:	6d 93       	st	X+, r22
    609c:	41 50       	subi	r20, 0x01	; 1
    609e:	50 40       	sbci	r21, 0x00	; 0
    60a0:	e0 f7       	brcc	.-8      	; 0x609a <memset+0x4>
    60a2:	08 95       	ret

000060a4 <strchr>:
    60a4:	fc 01       	movw	r30, r24
    60a6:	81 91       	ld	r24, Z+
    60a8:	86 17       	cp	r24, r22
    60aa:	21 f0       	breq	.+8      	; 0x60b4 <strchr+0x10>
    60ac:	88 23       	and	r24, r24
    60ae:	d9 f7       	brne	.-10     	; 0x60a6 <strchr+0x2>
    60b0:	99 27       	eor	r25, r25
    60b2:	08 95       	ret
    60b4:	31 97       	sbiw	r30, 0x01	; 1
    60b6:	cf 01       	movw	r24, r30
    60b8:	08 95       	ret

000060ba <strcmp>:
    60ba:	fb 01       	movw	r30, r22
    60bc:	dc 01       	movw	r26, r24
    60be:	8d 91       	ld	r24, X+
    60c0:	01 90       	ld	r0, Z+
    60c2:	80 19       	sub	r24, r0
    60c4:	01 10       	cpse	r0, r1
    60c6:	d9 f3       	breq	.-10     	; 0x60be <strcmp+0x4>
    60c8:	99 0b       	sbc	r25, r25
    60ca:	08 95       	ret

000060cc <strlen>:
    60cc:	fc 01       	movw	r30, r24
    60ce:	01 90       	ld	r0, Z+
    60d0:	00 20       	and	r0, r0
    60d2:	e9 f7       	brne	.-6      	; 0x60ce <strlen+0x2>
    60d4:	80 95       	com	r24
    60d6:	90 95       	com	r25
    60d8:	8e 0f       	add	r24, r30
    60da:	9f 1f       	adc	r25, r31
    60dc:	08 95       	ret

000060de <strncpy>:
    60de:	fb 01       	movw	r30, r22
    60e0:	dc 01       	movw	r26, r24
    60e2:	41 50       	subi	r20, 0x01	; 1
    60e4:	50 40       	sbci	r21, 0x00	; 0
    60e6:	48 f0       	brcs	.+18     	; 0x60fa <strncpy+0x1c>
    60e8:	01 90       	ld	r0, Z+
    60ea:	0d 92       	st	X+, r0
    60ec:	00 20       	and	r0, r0
    60ee:	c9 f7       	brne	.-14     	; 0x60e2 <strncpy+0x4>
    60f0:	01 c0       	rjmp	.+2      	; 0x60f4 <strncpy+0x16>
    60f2:	1d 92       	st	X+, r1
    60f4:	41 50       	subi	r20, 0x01	; 1
    60f6:	50 40       	sbci	r21, 0x00	; 0
    60f8:	e0 f7       	brcc	.-8      	; 0x60f2 <strncpy+0x14>
    60fa:	08 95       	ret

000060fc <strstr>:
    60fc:	fb 01       	movw	r30, r22
    60fe:	51 91       	ld	r21, Z+
    6100:	55 23       	and	r21, r21
    6102:	a9 f0       	breq	.+42     	; 0x612e <strstr+0x32>
    6104:	bf 01       	movw	r22, r30
    6106:	dc 01       	movw	r26, r24
    6108:	4d 91       	ld	r20, X+
    610a:	45 17       	cp	r20, r21
    610c:	41 11       	cpse	r20, r1
    610e:	e1 f7       	brne	.-8      	; 0x6108 <strstr+0xc>
    6110:	59 f4       	brne	.+22     	; 0x6128 <strstr+0x2c>
    6112:	cd 01       	movw	r24, r26
    6114:	01 90       	ld	r0, Z+
    6116:	00 20       	and	r0, r0
    6118:	49 f0       	breq	.+18     	; 0x612c <strstr+0x30>
    611a:	4d 91       	ld	r20, X+
    611c:	40 15       	cp	r20, r0
    611e:	41 11       	cpse	r20, r1
    6120:	c9 f3       	breq	.-14     	; 0x6114 <strstr+0x18>
    6122:	fb 01       	movw	r30, r22
    6124:	41 11       	cpse	r20, r1
    6126:	ef cf       	rjmp	.-34     	; 0x6106 <strstr+0xa>
    6128:	81 e0       	ldi	r24, 0x01	; 1
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	01 97       	sbiw	r24, 0x01	; 1
    612e:	08 95       	ret

00006130 <strtok_r>:
    6130:	fa 01       	movw	r30, r20
    6132:	a1 91       	ld	r26, Z+
    6134:	b0 81       	ld	r27, Z
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	19 f4       	brne	.+6      	; 0x6140 <strtok_r+0x10>
    613a:	10 97       	sbiw	r26, 0x00	; 0
    613c:	e1 f0       	breq	.+56     	; 0x6176 <strtok_r+0x46>
    613e:	cd 01       	movw	r24, r26
    6140:	dc 01       	movw	r26, r24
    6142:	cd 01       	movw	r24, r26
    6144:	0d 90       	ld	r0, X+
    6146:	00 20       	and	r0, r0
    6148:	11 f4       	brne	.+4      	; 0x614e <strtok_r+0x1e>
    614a:	c0 01       	movw	r24, r0
    614c:	13 c0       	rjmp	.+38     	; 0x6174 <strtok_r+0x44>
    614e:	fb 01       	movw	r30, r22
    6150:	21 91       	ld	r18, Z+
    6152:	22 23       	and	r18, r18
    6154:	19 f0       	breq	.+6      	; 0x615c <strtok_r+0x2c>
    6156:	20 15       	cp	r18, r0
    6158:	d9 f7       	brne	.-10     	; 0x6150 <strtok_r+0x20>
    615a:	f3 cf       	rjmp	.-26     	; 0x6142 <strtok_r+0x12>
    615c:	fb 01       	movw	r30, r22
    615e:	21 91       	ld	r18, Z+
    6160:	20 15       	cp	r18, r0
    6162:	19 f4       	brne	.+6      	; 0x616a <strtok_r+0x3a>
    6164:	1e 92       	st	-X, r1
    6166:	11 96       	adiw	r26, 0x01	; 1
    6168:	06 c0       	rjmp	.+12     	; 0x6176 <strtok_r+0x46>
    616a:	22 23       	and	r18, r18
    616c:	c1 f7       	brne	.-16     	; 0x615e <strtok_r+0x2e>
    616e:	0d 90       	ld	r0, X+
    6170:	00 20       	and	r0, r0
    6172:	a1 f7       	brne	.-24     	; 0x615c <strtok_r+0x2c>
    6174:	d0 01       	movw	r26, r0
    6176:	fa 01       	movw	r30, r20
    6178:	a1 93       	st	Z+, r26
    617a:	b0 83       	st	Z, r27
    617c:	08 95       	ret

0000617e <__mulhi_const_10>:
    617e:	7a e0       	ldi	r23, 0x0A	; 10
    6180:	97 9f       	mul	r25, r23
    6182:	90 2d       	mov	r25, r0
    6184:	87 9f       	mul	r24, r23
    6186:	80 2d       	mov	r24, r0
    6188:	91 0d       	add	r25, r1
    618a:	11 24       	eor	r1, r1
    618c:	08 95       	ret

0000618e <strtod>:
    618e:	a0 e0       	ldi	r26, 0x00	; 0
    6190:	b0 e0       	ldi	r27, 0x00	; 0
    6192:	ed ec       	ldi	r30, 0xCD	; 205
    6194:	f0 e3       	ldi	r31, 0x30	; 48
    6196:	0c 94 4a 32 	jmp	0x6494	; 0x6494 <__prologue_saves__+0xc>
    619a:	ec 01       	movw	r28, r24
    619c:	6b 01       	movw	r12, r22
    619e:	61 15       	cp	r22, r1
    61a0:	71 05       	cpc	r23, r1
    61a2:	19 f0       	breq	.+6      	; 0x61aa <strtod+0x1c>
    61a4:	fb 01       	movw	r30, r22
    61a6:	91 83       	std	Z+1, r25	; 0x01
    61a8:	80 83       	st	Z, r24
    61aa:	7e 01       	movw	r14, r28
    61ac:	ff ef       	ldi	r31, 0xFF	; 255
    61ae:	ef 1a       	sub	r14, r31
    61b0:	ff 0a       	sbc	r15, r31
    61b2:	08 81       	ld	r16, Y
    61b4:	80 2f       	mov	r24, r16
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	0e 94 15 32 	call	0x642a	; 0x642a <isspace>
    61bc:	89 2b       	or	r24, r25
    61be:	11 f0       	breq	.+4      	; 0x61c4 <strtod+0x36>
    61c0:	e7 01       	movw	r28, r14
    61c2:	f3 cf       	rjmp	.-26     	; 0x61aa <strtod+0x1c>
    61c4:	0d 32       	cpi	r16, 0x2D	; 45
    61c6:	39 f4       	brne	.+14     	; 0x61d6 <strtod+0x48>
    61c8:	7e 01       	movw	r14, r28
    61ca:	82 e0       	ldi	r24, 0x02	; 2
    61cc:	e8 0e       	add	r14, r24
    61ce:	f1 1c       	adc	r15, r1
    61d0:	09 81       	ldd	r16, Y+1	; 0x01
    61d2:	11 e0       	ldi	r17, 0x01	; 1
    61d4:	08 c0       	rjmp	.+16     	; 0x61e6 <strtod+0x58>
    61d6:	0b 32       	cpi	r16, 0x2B	; 43
    61d8:	29 f4       	brne	.+10     	; 0x61e4 <strtod+0x56>
    61da:	7e 01       	movw	r14, r28
    61dc:	92 e0       	ldi	r25, 0x02	; 2
    61de:	e9 0e       	add	r14, r25
    61e0:	f1 1c       	adc	r15, r1
    61e2:	09 81       	ldd	r16, Y+1	; 0x01
    61e4:	10 e0       	ldi	r17, 0x00	; 0
    61e6:	e7 01       	movw	r28, r14
    61e8:	21 97       	sbiw	r28, 0x01	; 1
    61ea:	43 e0       	ldi	r20, 0x03	; 3
    61ec:	50 e0       	ldi	r21, 0x00	; 0
    61ee:	62 e6       	ldi	r22, 0x62	; 98
    61f0:	72 e0       	ldi	r23, 0x02	; 2
    61f2:	ce 01       	movw	r24, r28
    61f4:	0e 94 1e 32 	call	0x643c	; 0x643c <strncasecmp_P>
    61f8:	89 2b       	or	r24, r25
    61fa:	c1 f4       	brne	.+48     	; 0x622c <strtod+0x9e>
    61fc:	23 96       	adiw	r28, 0x03	; 3
    61fe:	45 e0       	ldi	r20, 0x05	; 5
    6200:	50 e0       	ldi	r21, 0x00	; 0
    6202:	6d e5       	ldi	r22, 0x5D	; 93
    6204:	72 e0       	ldi	r23, 0x02	; 2
    6206:	ce 01       	movw	r24, r28
    6208:	0e 94 1e 32 	call	0x643c	; 0x643c <strncasecmp_P>
    620c:	89 2b       	or	r24, r25
    620e:	09 f4       	brne	.+2      	; 0x6212 <strtod+0x84>
    6210:	25 96       	adiw	r28, 0x05	; 5
    6212:	c1 14       	cp	r12, r1
    6214:	d1 04       	cpc	r13, r1
    6216:	19 f0       	breq	.+6      	; 0x621e <strtod+0x90>
    6218:	f6 01       	movw	r30, r12
    621a:	d1 83       	std	Z+1, r29	; 0x01
    621c:	c0 83       	st	Z, r28
    621e:	11 11       	cpse	r17, r1
    6220:	f6 c0       	rjmp	.+492    	; 0x640e <strtod+0x280>
    6222:	60 e0       	ldi	r22, 0x00	; 0
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	80 e8       	ldi	r24, 0x80	; 128
    6228:	9f e7       	ldi	r25, 0x7F	; 127
    622a:	fa c0       	rjmp	.+500    	; 0x6420 <strtod+0x292>
    622c:	43 e0       	ldi	r20, 0x03	; 3
    622e:	50 e0       	ldi	r21, 0x00	; 0
    6230:	6a e5       	ldi	r22, 0x5A	; 90
    6232:	72 e0       	ldi	r23, 0x02	; 2
    6234:	ce 01       	movw	r24, r28
    6236:	0e 94 1e 32 	call	0x643c	; 0x643c <strncasecmp_P>
    623a:	89 2b       	or	r24, r25
    623c:	59 f4       	brne	.+22     	; 0x6254 <strtod+0xc6>
    623e:	c1 14       	cp	r12, r1
    6240:	d1 04       	cpc	r13, r1
    6242:	09 f4       	brne	.+2      	; 0x6246 <strtod+0xb8>
    6244:	e9 c0       	rjmp	.+466    	; 0x6418 <strtod+0x28a>
    6246:	f2 e0       	ldi	r31, 0x02	; 2
    6248:	ef 0e       	add	r14, r31
    624a:	f1 1c       	adc	r15, r1
    624c:	f6 01       	movw	r30, r12
    624e:	f1 82       	std	Z+1, r15	; 0x01
    6250:	e0 82       	st	Z, r14
    6252:	e2 c0       	rjmp	.+452    	; 0x6418 <strtod+0x28a>
    6254:	20 e0       	ldi	r18, 0x00	; 0
    6256:	30 e0       	ldi	r19, 0x00	; 0
    6258:	a9 01       	movw	r20, r18
    625a:	c0 e0       	ldi	r28, 0x00	; 0
    625c:	d0 e0       	ldi	r29, 0x00	; 0
    625e:	f7 01       	movw	r30, r14
    6260:	80 ed       	ldi	r24, 0xD0	; 208
    6262:	a8 2e       	mov	r10, r24
    6264:	a0 0e       	add	r10, r16
    6266:	89 e0       	ldi	r24, 0x09	; 9
    6268:	8a 15       	cp	r24, r10
    626a:	30 f1       	brcs	.+76     	; 0x62b8 <strtod+0x12a>
    626c:	91 2f       	mov	r25, r17
    626e:	92 60       	ori	r25, 0x02	; 2
    6270:	b9 2e       	mov	r11, r25
    6272:	81 2f       	mov	r24, r17
    6274:	88 70       	andi	r24, 0x08	; 8
    6276:	12 ff       	sbrs	r17, 2
    6278:	04 c0       	rjmp	.+8      	; 0x6282 <strtod+0xf4>
    627a:	81 11       	cpse	r24, r1
    627c:	24 c0       	rjmp	.+72     	; 0x62c6 <strtod+0x138>
    627e:	21 96       	adiw	r28, 0x01	; 1
    6280:	22 c0       	rjmp	.+68     	; 0x62c6 <strtod+0x138>
    6282:	81 11       	cpse	r24, r1
    6284:	21 97       	sbiw	r28, 0x01	; 1
    6286:	a5 e0       	ldi	r26, 0x05	; 5
    6288:	b0 e0       	ldi	r27, 0x00	; 0
    628a:	0e 94 39 32 	call	0x6472	; 0x6472 <__muluhisi3>
    628e:	dc 01       	movw	r26, r24
    6290:	cb 01       	movw	r24, r22
    6292:	88 0f       	add	r24, r24
    6294:	99 1f       	adc	r25, r25
    6296:	aa 1f       	adc	r26, r26
    6298:	bb 1f       	adc	r27, r27
    629a:	9c 01       	movw	r18, r24
    629c:	ad 01       	movw	r20, r26
    629e:	2a 0d       	add	r18, r10
    62a0:	31 1d       	adc	r19, r1
    62a2:	41 1d       	adc	r20, r1
    62a4:	51 1d       	adc	r21, r1
    62a6:	28 39       	cpi	r18, 0x98	; 152
    62a8:	89 e9       	ldi	r24, 0x99	; 153
    62aa:	38 07       	cpc	r19, r24
    62ac:	48 07       	cpc	r20, r24
    62ae:	89 e1       	ldi	r24, 0x19	; 25
    62b0:	58 07       	cpc	r21, r24
    62b2:	48 f0       	brcs	.+18     	; 0x62c6 <strtod+0x138>
    62b4:	16 60       	ori	r17, 0x06	; 6
    62b6:	06 c0       	rjmp	.+12     	; 0x62c4 <strtod+0x136>
    62b8:	9e ef       	ldi	r25, 0xFE	; 254
    62ba:	a9 12       	cpse	r10, r25
    62bc:	0a c0       	rjmp	.+20     	; 0x62d2 <strtod+0x144>
    62be:	13 fd       	sbrc	r17, 3
    62c0:	40 c0       	rjmp	.+128    	; 0x6342 <strtod+0x1b4>
    62c2:	18 60       	ori	r17, 0x08	; 8
    62c4:	b1 2e       	mov	r11, r17
    62c6:	8f ef       	ldi	r24, 0xFF	; 255
    62c8:	e8 1a       	sub	r14, r24
    62ca:	f8 0a       	sbc	r15, r24
    62cc:	00 81       	ld	r16, Z
    62ce:	1b 2d       	mov	r17, r11
    62d0:	c6 cf       	rjmp	.-116    	; 0x625e <strtod+0xd0>
    62d2:	80 2f       	mov	r24, r16
    62d4:	8f 7d       	andi	r24, 0xDF	; 223
    62d6:	85 34       	cpi	r24, 0x45	; 69
    62d8:	a1 f5       	brne	.+104    	; 0x6342 <strtod+0x1b4>
    62da:	80 81       	ld	r24, Z
    62dc:	8d 32       	cpi	r24, 0x2D	; 45
    62de:	11 f4       	brne	.+4      	; 0x62e4 <strtod+0x156>
    62e0:	10 61       	ori	r17, 0x10	; 16
    62e2:	06 c0       	rjmp	.+12     	; 0x62f0 <strtod+0x162>
    62e4:	8b 32       	cpi	r24, 0x2B	; 43
    62e6:	21 f0       	breq	.+8      	; 0x62f0 <strtod+0x162>
    62e8:	31 96       	adiw	r30, 0x01	; 1
    62ea:	61 e0       	ldi	r22, 0x01	; 1
    62ec:	70 e0       	ldi	r23, 0x00	; 0
    62ee:	04 c0       	rjmp	.+8      	; 0x62f8 <strtod+0x16a>
    62f0:	81 81       	ldd	r24, Z+1	; 0x01
    62f2:	32 96       	adiw	r30, 0x02	; 2
    62f4:	62 e0       	ldi	r22, 0x02	; 2
    62f6:	70 e0       	ldi	r23, 0x00	; 0
    62f8:	80 53       	subi	r24, 0x30	; 48
    62fa:	8a 30       	cpi	r24, 0x0A	; 10
    62fc:	18 f0       	brcs	.+6      	; 0x6304 <strtod+0x176>
    62fe:	e6 1b       	sub	r30, r22
    6300:	f7 0b       	sbc	r31, r23
    6302:	1f c0       	rjmp	.+62     	; 0x6342 <strtod+0x1b4>
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	70 e0       	ldi	r23, 0x00	; 0
    6308:	60 38       	cpi	r22, 0x80	; 128
    630a:	9c e0       	ldi	r25, 0x0C	; 12
    630c:	79 07       	cpc	r23, r25
    630e:	5c f4       	brge	.+22     	; 0x6326 <strtod+0x198>
    6310:	db 01       	movw	r26, r22
    6312:	aa 0f       	add	r26, r26
    6314:	bb 1f       	adc	r27, r27
    6316:	aa 0f       	add	r26, r26
    6318:	bb 1f       	adc	r27, r27
    631a:	6a 0f       	add	r22, r26
    631c:	7b 1f       	adc	r23, r27
    631e:	66 0f       	add	r22, r22
    6320:	77 1f       	adc	r23, r23
    6322:	68 0f       	add	r22, r24
    6324:	71 1d       	adc	r23, r1
    6326:	31 96       	adiw	r30, 0x01	; 1
    6328:	df 01       	movw	r26, r30
    632a:	11 97       	sbiw	r26, 0x01	; 1
    632c:	8c 91       	ld	r24, X
    632e:	80 53       	subi	r24, 0x30	; 48
    6330:	8a 30       	cpi	r24, 0x0A	; 10
    6332:	50 f3       	brcs	.-44     	; 0x6308 <strtod+0x17a>
    6334:	14 ff       	sbrs	r17, 4
    6336:	03 c0       	rjmp	.+6      	; 0x633e <strtod+0x1b0>
    6338:	71 95       	neg	r23
    633a:	61 95       	neg	r22
    633c:	71 09       	sbc	r23, r1
    633e:	c6 0f       	add	r28, r22
    6340:	d7 1f       	adc	r29, r23
    6342:	11 ff       	sbrs	r17, 1
    6344:	08 c0       	rjmp	.+16     	; 0x6356 <strtod+0x1c8>
    6346:	c1 14       	cp	r12, r1
    6348:	d1 04       	cpc	r13, r1
    634a:	29 f0       	breq	.+10     	; 0x6356 <strtod+0x1c8>
    634c:	cf 01       	movw	r24, r30
    634e:	01 97       	sbiw	r24, 0x01	; 1
    6350:	f6 01       	movw	r30, r12
    6352:	91 83       	std	Z+1, r25	; 0x01
    6354:	80 83       	st	Z, r24
    6356:	ca 01       	movw	r24, r20
    6358:	b9 01       	movw	r22, r18
    635a:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__floatunsisf>
    635e:	21 2f       	mov	r18, r17
    6360:	23 70       	andi	r18, 0x03	; 3
    6362:	23 30       	cpi	r18, 0x03	; 3
    6364:	19 f0       	breq	.+6      	; 0x636c <strtod+0x1de>
    6366:	4b 01       	movw	r8, r22
    6368:	5c 01       	movw	r10, r24
    636a:	06 c0       	rjmp	.+12     	; 0x6378 <strtod+0x1ea>
    636c:	4b 01       	movw	r8, r22
    636e:	5c 01       	movw	r10, r24
    6370:	b7 fa       	bst	r11, 7
    6372:	b0 94       	com	r11
    6374:	b7 f8       	bld	r11, 7
    6376:	b0 94       	com	r11
    6378:	20 e0       	ldi	r18, 0x00	; 0
    637a:	30 e0       	ldi	r19, 0x00	; 0
    637c:	a9 01       	movw	r20, r18
    637e:	c5 01       	movw	r24, r10
    6380:	b4 01       	movw	r22, r8
    6382:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__cmpsf2>
    6386:	88 23       	and	r24, r24
    6388:	09 f4       	brne	.+2      	; 0x638c <strtod+0x1fe>
    638a:	3e c0       	rjmp	.+124    	; 0x6408 <strtod+0x27a>
    638c:	d7 ff       	sbrs	r29, 7
    638e:	06 c0       	rjmp	.+12     	; 0x639c <strtod+0x20e>
    6390:	d1 95       	neg	r29
    6392:	c1 95       	neg	r28
    6394:	d1 09       	sbc	r29, r1
    6396:	09 e7       	ldi	r16, 0x79	; 121
    6398:	12 e0       	ldi	r17, 0x02	; 2
    639a:	02 c0       	rjmp	.+4      	; 0x63a0 <strtod+0x212>
    639c:	01 e9       	ldi	r16, 0x91	; 145
    639e:	12 e0       	ldi	r17, 0x02	; 2
    63a0:	68 01       	movw	r12, r16
    63a2:	f8 e1       	ldi	r31, 0x18	; 24
    63a4:	cf 1a       	sub	r12, r31
    63a6:	d1 08       	sbc	r13, r1
    63a8:	90 e2       	ldi	r25, 0x20	; 32
    63aa:	e9 2e       	mov	r14, r25
    63ac:	f1 2c       	mov	r15, r1
    63ae:	ce 15       	cp	r28, r14
    63b0:	df 05       	cpc	r29, r15
    63b2:	74 f0       	brlt	.+28     	; 0x63d0 <strtod+0x242>
    63b4:	f8 01       	movw	r30, r16
    63b6:	25 91       	lpm	r18, Z+
    63b8:	35 91       	lpm	r19, Z+
    63ba:	45 91       	lpm	r20, Z+
    63bc:	54 91       	lpm	r21, Z
    63be:	c5 01       	movw	r24, r10
    63c0:	b4 01       	movw	r22, r8
    63c2:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__mulsf3>
    63c6:	4b 01       	movw	r8, r22
    63c8:	5c 01       	movw	r10, r24
    63ca:	ce 19       	sub	r28, r14
    63cc:	df 09       	sbc	r29, r15
    63ce:	ef cf       	rjmp	.-34     	; 0x63ae <strtod+0x220>
    63d0:	04 50       	subi	r16, 0x04	; 4
    63d2:	11 09       	sbc	r17, r1
    63d4:	f5 94       	asr	r15
    63d6:	e7 94       	ror	r14
    63d8:	0c 15       	cp	r16, r12
    63da:	1d 05       	cpc	r17, r13
    63dc:	41 f7       	brne	.-48     	; 0x63ae <strtod+0x220>
    63de:	8a 2d       	mov	r24, r10
    63e0:	88 0f       	add	r24, r24
    63e2:	8b 2d       	mov	r24, r11
    63e4:	88 1f       	adc	r24, r24
    63e6:	8f 3f       	cpi	r24, 0xFF	; 255
    63e8:	49 f0       	breq	.+18     	; 0x63fc <strtod+0x26e>
    63ea:	20 e0       	ldi	r18, 0x00	; 0
    63ec:	30 e0       	ldi	r19, 0x00	; 0
    63ee:	a9 01       	movw	r20, r18
    63f0:	c5 01       	movw	r24, r10
    63f2:	b4 01       	movw	r22, r8
    63f4:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__cmpsf2>
    63f8:	81 11       	cpse	r24, r1
    63fa:	06 c0       	rjmp	.+12     	; 0x6408 <strtod+0x27a>
    63fc:	82 e2       	ldi	r24, 0x22	; 34
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	90 93 4a 08 	sts	0x084A, r25	; 0x80084a <errno+0x1>
    6404:	80 93 49 08 	sts	0x0849, r24	; 0x800849 <errno>
    6408:	c5 01       	movw	r24, r10
    640a:	b4 01       	movw	r22, r8
    640c:	09 c0       	rjmp	.+18     	; 0x6420 <strtod+0x292>
    640e:	60 e0       	ldi	r22, 0x00	; 0
    6410:	70 e0       	ldi	r23, 0x00	; 0
    6412:	80 e8       	ldi	r24, 0x80	; 128
    6414:	9f ef       	ldi	r25, 0xFF	; 255
    6416:	04 c0       	rjmp	.+8      	; 0x6420 <strtod+0x292>
    6418:	60 e0       	ldi	r22, 0x00	; 0
    641a:	70 e0       	ldi	r23, 0x00	; 0
    641c:	80 ec       	ldi	r24, 0xC0	; 192
    641e:	9f e7       	ldi	r25, 0x7F	; 127
    6420:	cd b7       	in	r28, 0x3d	; 61
    6422:	de b7       	in	r29, 0x3e	; 62
    6424:	ec e0       	ldi	r30, 0x0C	; 12
    6426:	0c 94 66 32 	jmp	0x64cc	; 0x64cc <__epilogue_restores__+0xc>

0000642a <isspace>:
    642a:	91 11       	cpse	r25, r1
    642c:	0c 94 36 32 	jmp	0x646c	; 0x646c <__ctype_isfalse>
    6430:	80 32       	cpi	r24, 0x20	; 32
    6432:	19 f0       	breq	.+6      	; 0x643a <isspace+0x10>
    6434:	89 50       	subi	r24, 0x09	; 9
    6436:	85 50       	subi	r24, 0x05	; 5
    6438:	c8 f7       	brcc	.-14     	; 0x642c <isspace+0x2>
    643a:	08 95       	ret

0000643c <strncasecmp_P>:
    643c:	fb 01       	movw	r30, r22
    643e:	dc 01       	movw	r26, r24
    6440:	41 50       	subi	r20, 0x01	; 1
    6442:	50 40       	sbci	r21, 0x00	; 0
    6444:	88 f0       	brcs	.+34     	; 0x6468 <strncasecmp_P+0x2c>
    6446:	8d 91       	ld	r24, X+
    6448:	81 34       	cpi	r24, 0x41	; 65
    644a:	1c f0       	brlt	.+6      	; 0x6452 <strncasecmp_P+0x16>
    644c:	8b 35       	cpi	r24, 0x5B	; 91
    644e:	0c f4       	brge	.+2      	; 0x6452 <strncasecmp_P+0x16>
    6450:	80 5e       	subi	r24, 0xE0	; 224
    6452:	65 91       	lpm	r22, Z+
    6454:	61 34       	cpi	r22, 0x41	; 65
    6456:	1c f0       	brlt	.+6      	; 0x645e <strncasecmp_P+0x22>
    6458:	6b 35       	cpi	r22, 0x5B	; 91
    645a:	0c f4       	brge	.+2      	; 0x645e <strncasecmp_P+0x22>
    645c:	60 5e       	subi	r22, 0xE0	; 224
    645e:	86 1b       	sub	r24, r22
    6460:	61 11       	cpse	r22, r1
    6462:	71 f3       	breq	.-36     	; 0x6440 <strncasecmp_P+0x4>
    6464:	99 0b       	sbc	r25, r25
    6466:	08 95       	ret
    6468:	88 1b       	sub	r24, r24
    646a:	fc cf       	rjmp	.-8      	; 0x6464 <strncasecmp_P+0x28>

0000646c <__ctype_isfalse>:
    646c:	99 27       	eor	r25, r25
    646e:	88 27       	eor	r24, r24

00006470 <__ctype_istrue>:
    6470:	08 95       	ret

00006472 <__muluhisi3>:
    6472:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <__umulhisi3>
    6476:	a5 9f       	mul	r26, r21
    6478:	90 0d       	add	r25, r0
    647a:	b4 9f       	mul	r27, r20
    647c:	90 0d       	add	r25, r0
    647e:	a4 9f       	mul	r26, r20
    6480:	80 0d       	add	r24, r0
    6482:	91 1d       	adc	r25, r1
    6484:	11 24       	eor	r1, r1
    6486:	08 95       	ret

00006488 <__prologue_saves__>:
    6488:	2f 92       	push	r2
    648a:	3f 92       	push	r3
    648c:	4f 92       	push	r4
    648e:	5f 92       	push	r5
    6490:	6f 92       	push	r6
    6492:	7f 92       	push	r7
    6494:	8f 92       	push	r8
    6496:	9f 92       	push	r9
    6498:	af 92       	push	r10
    649a:	bf 92       	push	r11
    649c:	cf 92       	push	r12
    649e:	df 92       	push	r13
    64a0:	ef 92       	push	r14
    64a2:	ff 92       	push	r15
    64a4:	0f 93       	push	r16
    64a6:	1f 93       	push	r17
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	cd b7       	in	r28, 0x3d	; 61
    64ae:	de b7       	in	r29, 0x3e	; 62
    64b0:	ca 1b       	sub	r28, r26
    64b2:	db 0b       	sbc	r29, r27
    64b4:	0f b6       	in	r0, 0x3f	; 63
    64b6:	f8 94       	cli
    64b8:	de bf       	out	0x3e, r29	; 62
    64ba:	0f be       	out	0x3f, r0	; 63
    64bc:	cd bf       	out	0x3d, r28	; 61
    64be:	09 94       	ijmp

000064c0 <__epilogue_restores__>:
    64c0:	2a 88       	ldd	r2, Y+18	; 0x12
    64c2:	39 88       	ldd	r3, Y+17	; 0x11
    64c4:	48 88       	ldd	r4, Y+16	; 0x10
    64c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    64c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    64ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    64cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    64ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    64d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    64d2:	b9 84       	ldd	r11, Y+9	; 0x09
    64d4:	c8 84       	ldd	r12, Y+8	; 0x08
    64d6:	df 80       	ldd	r13, Y+7	; 0x07
    64d8:	ee 80       	ldd	r14, Y+6	; 0x06
    64da:	fd 80       	ldd	r15, Y+5	; 0x05
    64dc:	0c 81       	ldd	r16, Y+4	; 0x04
    64de:	1b 81       	ldd	r17, Y+3	; 0x03
    64e0:	aa 81       	ldd	r26, Y+2	; 0x02
    64e2:	b9 81       	ldd	r27, Y+1	; 0x01
    64e4:	ce 0f       	add	r28, r30
    64e6:	d1 1d       	adc	r29, r1
    64e8:	0f b6       	in	r0, 0x3f	; 63
    64ea:	f8 94       	cli
    64ec:	de bf       	out	0x3e, r29	; 62
    64ee:	0f be       	out	0x3f, r0	; 63
    64f0:	cd bf       	out	0x3d, r28	; 61
    64f2:	ed 01       	movw	r28, r26
    64f4:	08 95       	ret

000064f6 <__umulhisi3>:
    64f6:	a2 9f       	mul	r26, r18
    64f8:	b0 01       	movw	r22, r0
    64fa:	b3 9f       	mul	r27, r19
    64fc:	c0 01       	movw	r24, r0
    64fe:	a3 9f       	mul	r26, r19
    6500:	70 0d       	add	r23, r0
    6502:	81 1d       	adc	r24, r1
    6504:	11 24       	eor	r1, r1
    6506:	91 1d       	adc	r25, r1
    6508:	b2 9f       	mul	r27, r18
    650a:	70 0d       	add	r23, r0
    650c:	81 1d       	adc	r24, r1
    650e:	11 24       	eor	r1, r1
    6510:	91 1d       	adc	r25, r1
    6512:	08 95       	ret

00006514 <__do_global_dtors>:
    6514:	13 e0       	ldi	r17, 0x03	; 3
    6516:	c6 ef       	ldi	r28, 0xF6	; 246
    6518:	d3 e0       	ldi	r29, 0x03	; 3
    651a:	04 c0       	rjmp	.+8      	; 0x6524 <__do_global_dtors+0x10>
    651c:	fe 01       	movw	r30, r28
    651e:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__tablejump2__>
    6522:	21 96       	adiw	r28, 0x01	; 1
    6524:	c7 3f       	cpi	r28, 0xF7	; 247
    6526:	d1 07       	cpc	r29, r17
    6528:	c9 f7       	brne	.-14     	; 0x651c <__do_global_dtors+0x8>
    652a:	f8 94       	cli

0000652c <__stop_program>:
    652c:	ff cf       	rjmp	.-2      	; 0x652c <__stop_program>
