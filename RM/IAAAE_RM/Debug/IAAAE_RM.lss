
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  00004794  00004828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e1  0080029c  0080029c  000049c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000049f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c70  00000000  00000000  00004a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000200e9  00000000  00000000  000056a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004924  00000000  00000000  0002578d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000718d  00000000  00000000  0002a0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002df8  00000000  00000000  00031240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005941  00000000  00000000  00034038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010b01  00000000  00000000  00039979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c70  00000000  00000000  0004a47a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 04 	jmp	0x848	; 0x848 <__dtors_end>
       4:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
       8:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
       c:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__vector_3>
      10:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__vector_3>
      14:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__vector_3>
      18:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      1c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      20:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      24:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      28:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      2c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      30:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      34:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      38:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      3c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      40:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__vector_16>
      44:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      48:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__vector_18>
      4c:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__vector_19>
      50:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      54:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      58:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      5c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>
      60:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__vector_24>
      64:	0c 94 4c 04 	jmp	0x898	; 0x898 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN10GsmPayload11readPayloadEPhP10SensorDataE3__c_1>:
     224:	44 61 74 61 20 41 72 72 20 53 7a 20 77 61 73 20     Data Arr Sz was 
	...

00000235 <_ZZN10GsmPayload11readPayloadEPhP10SensorDataE3__c_0>:
     235:	42 6f 6f 74 20 23 20 77 61 73 20 00                 Boot # was .

00000241 <_ZZN10GsmPayload11readPayloadEPhP10SensorDataE3__c>:
     241:	4d 6f 64 75 6c 65 20 49 44 20 77 61 73 20 00        Module ID was .

00000250 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     250:	45 72 72 6f 72 3d 00                                Error=.

00000257 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     257:	20 7c 20 00                                          | .

0000025b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     25b:	54 65 6d 70 3d 00                                   Temp=.

00000261 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     261:	20 7c 20 00                                          | .

00000265 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     265:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000026e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     26e:	20 7c 20 00                                          | .

00000272 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     272:	50 56 2d 56 3d 00                                   PV-V=.

00000278 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     278:	20 7c 20 00                                          | .

0000027c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     27c:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000284 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     284:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000291 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     291:	20 7c 20 00                                          | .

00000295 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     295:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000029e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     29e:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

000002a8 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     2a8:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     2b8:	6f 64 65 3d 00                                      ode=.

000002bd <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     2bd:	20 7c 20 00                                          | .

000002c1 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     2c1:	42 45 52 3d 00                                      BER=.

000002c6 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     2c6:	20 7c 20 00                                          | .

000002ca <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     2ca:	52 53 53 49 3d 00                                   RSSI=.

000002d0 <_ZL12b64_alphabet>:
     2d0:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     2e0:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     2f0:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     300:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000311 <_ZZ4loopE3__c>:
     311:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000031b <_ZZ8sendDatavE3__c_0>:
     31b:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     32b:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     33b:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

0000034a <_ZZ8sendDatavE3__c>:
     34a:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     35a:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

0000036b <_ZZ12takeReadingsvE3__c>:
     36b:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     37b:	2e 2e 00                                            ...

0000037e <_ZZ21ensureFonaInitialisedbE3__c_2>:
     37e:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     38e:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

00000399 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     399:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     3a9:	73 2e 2e 2e 00                                      s....

000003ae <_ZZ21ensureFonaInitialisedbE3__c_0>:
     3ae:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     3be:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000003c9 <_ZZ21ensureFonaInitialisedbE3__c>:
     3c9:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     3d9:	61 2e 2e 2e 00                                      a....

000003de <_ZZ5setupE3__c>:
     3de:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003ea <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_42>:
     3ea:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3fa:	2d 2d 2d 2d 2d 2d 2d 2d 00                          --------.

00000403 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_41>:
     403:	2a 2a 2a 20 54 45 4d 50 20 46 41 49 4c 20 2a 2a     *** TEMP FAIL **
     413:	2a 00                                               *.

00000415 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_40>:
     415:	2a 2a 2a 20 50 56 20 46 41 49 4c 20 2a 2a 2a 00     *** PV FAIL ***.

00000425 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_39>:
     425:	2a 2a 2a 20 45 52 52 20 46 41 49 4c 20 2a 2a 2a     *** ERR FAIL ***
	...

00000436 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_38>:
     436:	2a 2a 2a 20 44 54 20 46 41 49 4c 20 2a 2a 2a 00     *** DT FAIL ***.

00000446 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_37>:
     446:	2a 2a 2a 20 43 55 52 52 20 46 41 49 4c 20 2a 2a     *** CURR FAIL **
     456:	2a 00                                               *.

00000458 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_36>:
     458:	2a 2a 2a 20 42 41 54 54 20 46 41 49 4c 20 2a 2a     *** BATT FAIL **
     468:	2a 00                                               *.

0000046a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_35>:
     46a:	46 69 72 73 74 20 50 61 72 73 65 64 20 52 65 61     First Parsed Rea
     47a:	64 69 6e 67 3a 00                                   ding:.

00000480 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_34>:
     480:	2a 2a 2a 20 52 45 41 44 20 4e 55 4d 20 46 41 49     *** READ NUM FAI
     490:	4c 20 2a 2a 2a 00                                   L ***.

00000496 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_33>:
     496:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     4a6:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

000004b1 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_32>:
     4b1:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     4c1:	4c 20 40 36 20 2a 2a 2a 00                          L @6 ***.

000004ca <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_31>:
     4ca:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     4da:	4c 20 40 35 20 2a 2a 2a 00                          L @5 ***.

000004e3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_30>:
     4e3:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     4f3:	4c 20 40 34 20 2a 2a 2a 00                          L @4 ***.

000004fc <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_29>:
     4fc:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     50c:	4c 20 40 33 20 2a 2a 2a 00                          L @3 ***.

00000515 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_28>:
     515:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     525:	4c 20 40 32 20 2a 2a 2a 00                          L @2 ***.

0000052e <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_27>:
     52e:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     53e:	4c 20 40 31 20 2a 2a 2a 00                          L @1 ***.

00000547 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_26>:
     547:	2a 2a 2a 20 44 45 43 20 4c 45 4e 20 46 41 49 4c     *** DEC LEN FAIL
     557:	20 40 32 20 2a 2a 2a 00                              @2 ***.

0000055f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_25>:
     55f:	2a 2a 2a 20 44 45 43 20 4c 45 4e 20 46 41 49 4c     *** DEC LEN FAIL
     56f:	20 40 31 20 2a 2a 2a 00                              @1 ***.

00000577 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_24>:
     577:	2a 2a 2a 20 45 4e 43 20 4c 45 4e 20 46 41 49 4c     *** ENC LEN FAIL
     587:	20 40 32 20 2a 2a 2a 00                              @2 ***.

0000058f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_23>:
     58f:	2a 2a 2a 20 45 4e 43 20 4c 45 4e 20 46 41 49 4c     *** ENC LEN FAIL
     59f:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000005a7 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_22>:
     5a7:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     5b7:	20 40 34 20 2a 2a 2a 00                              @4 ***.

000005bf <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_21>:
     5bf:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     5cf:	20 40 33 20 2a 2a 2a 00                              @3 ***.

000005d7 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_20>:
     5d7:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     5e7:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000005ef <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_19>:
     5ef:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     5ff:	20 40 31 20 2a 2a 2a 00                              @1 ***.

00000607 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_18>:
     607:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     617:	20 40 35 20 2a 2a 2a 00                              @5 ***.

0000061f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_17>:
     61f:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     62f:	20 40 34 20 2a 2a 2a 00                              @4 ***.

00000637 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_16>:
     637:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     647:	20 40 33 20 2a 2a 2a 00                              @3 ***.

0000064f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_15>:
     64f:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     65f:	20 40 32 20 2a 2a 2a 00                              @2 ***.

00000667 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_14>:
     667:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     677:	20 40 31 20 2a 2a 2a 00                              @1 ***.

0000067f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_13>:
     67f:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 45     *** TEST FAIL @E
     68f:	4e 43 4f 44 49 4e 47 20 2a 2a 2a 00                 NCODING ***.

0000069b <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_12>:
     69b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     6ab:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

000006b6 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_11>:
     6b6:	54 65 73 74 20 46 6f 72 20 50 72 69 6e 74 20 4f     Test For Print O
     6c6:	75 74 70 75 74 3a 00                                utput:.

000006cd <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_10>:
     6cd:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     6dd:	30 20 2a 2a 2a 00                                   0 ***.

000006e3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_9>:
     6e3:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 39     *** TEST FAIL @9
     6f3:	20 2a 2a 2a 00                                       ***.

000006f8 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_8>:
     6f8:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 38     *** TEST FAIL @8
     708:	20 2a 2a 2a 00                                       ***.

0000070d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_7>:
     70d:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 37     *** TEST FAIL @7
     71d:	20 2a 2a 2a 00                                       ***.

00000722 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_6>:
     722:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 36     *** TEST FAIL @6
     732:	20 2a 2a 2a 00                                       ***.

00000737 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_5>:
     737:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 35     *** TEST FAIL @5
     747:	20 2a 2a 2a 00                                       ***.

0000074c <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_4>:
     74c:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 34     *** TEST FAIL @4
     75c:	20 2a 2a 2a 00                                       ***.

00000761 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_3>:
     761:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 33     *** TEST FAIL @3
     771:	20 2a 2a 2a 00                                       ***.

00000776 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_2>:
     776:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 32     *** TEST FAIL @2
     786:	20 2a 2a 2a 00                                       ***.

0000078b <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_1>:
     78b:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     79b:	20 2a 2a 2a 00                                       ***.

000007a0 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_0>:
     7a0:	43 61 73 74 20 62 61 63 6b 20 61 66 74 65 72 20     Cast back after 
     7b0:	69 6e 74 20 73 74 6f 72 61 67 65 20 76 61 6c 3a     int storage val:
	...

000007c1 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c>:
     7c1:	4e 65 74 73 74 61 74 20 35 20 2b 20 52 65 73 75     Netstat 5 + Resu
     7d1:	6c 74 43 6f 64 65 20 31 20 2b 20 45 72 72 6f 72     ltCode 1 + Error
     7e1:	20 31 3d 00                                          1=.

000007e5 <digital_pin_to_timer_PGM>:
     7e5:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     7f5:	00 00 00 00                                         ....

000007f9 <digital_pin_to_bit_mask_PGM>:
     7f9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     809:	04 08 10 20                                         ... 

0000080d <digital_pin_to_port_PGM>:
     80d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     81d:	03 03 03 03                                         ....

00000821 <port_to_input_PGM>:
     821:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000082b <port_to_output_PGM>:
     82b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000835 <port_to_mode_PGM>:
     835:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000840 <__ctors_start>:
     840:	ca 0e       	add	r12, r26
     842:	58 13       	cpse	r21, r24
     844:	07 1a       	sub	r0, r23

00000846 <__ctors_end>:
     846:	da 0e       	add	r13, r26

00000848 <__dtors_end>:
     848:	11 24       	eor	r1, r1
     84a:	1f be       	out	0x3f, r1	; 63
     84c:	cf ef       	ldi	r28, 0xFF	; 255
     84e:	d8 e0       	ldi	r29, 0x08	; 8
     850:	de bf       	out	0x3e, r29	; 62
     852:	cd bf       	out	0x3d, r28	; 61

00000854 <__do_copy_data>:
     854:	12 e0       	ldi	r17, 0x02	; 2
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b1 e0       	ldi	r27, 0x01	; 1
     85a:	e4 e9       	ldi	r30, 0x94	; 148
     85c:	f7 e4       	ldi	r31, 0x47	; 71
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__do_copy_data+0x10>
     860:	05 90       	lpm	r0, Z+
     862:	0d 92       	st	X+, r0
     864:	ac 39       	cpi	r26, 0x9C	; 156
     866:	b1 07       	cpc	r27, r17
     868:	d9 f7       	brne	.-10     	; 0x860 <__do_copy_data+0xc>

0000086a <__do_clear_bss>:
     86a:	25 e0       	ldi	r18, 0x05	; 5
     86c:	ac e9       	ldi	r26, 0x9C	; 156
     86e:	b2 e0       	ldi	r27, 0x02	; 2
     870:	01 c0       	rjmp	.+2      	; 0x874 <.do_clear_bss_start>

00000872 <.do_clear_bss_loop>:
     872:	1d 92       	st	X+, r1

00000874 <.do_clear_bss_start>:
     874:	ad 37       	cpi	r26, 0x7D	; 125
     876:	b2 07       	cpc	r27, r18
     878:	e1 f7       	brne	.-8      	; 0x872 <.do_clear_bss_loop>

0000087a <__do_global_ctors>:
     87a:	14 e0       	ldi	r17, 0x04	; 4
     87c:	c3 e2       	ldi	r28, 0x23	; 35
     87e:	d4 e0       	ldi	r29, 0x04	; 4
     880:	04 c0       	rjmp	.+8      	; 0x88a <__do_global_ctors+0x10>
     882:	21 97       	sbiw	r28, 0x01	; 1
     884:	fe 01       	movw	r30, r28
     886:	0e 94 2c 21 	call	0x4258	; 0x4258 <__tablejump2__>
     88a:	c0 32       	cpi	r28, 0x20	; 32
     88c:	d1 07       	cpc	r29, r17
     88e:	c9 f7       	brne	.-14     	; 0x882 <__do_global_ctors+0x8>
     890:	0e 94 35 1a 	call	0x346a	; 0x346a <main>
     894:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__do_global_dtors>

00000898 <__bad_interrupt>:
     898:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000089c <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     89c:	83 5e       	subi	r24, 0xE3	; 227
     89e:	9e 4f       	sbci	r25, 0xFE	; 254
     8a0:	dc 01       	movw	r26, r24
     8a2:	8d 91       	ld	r24, X+
     8a4:	9c 91       	ld	r25, X
     8a6:	dc 01       	movw	r26, r24
     8a8:	ed 91       	ld	r30, X+
     8aa:	fc 91       	ld	r31, X
     8ac:	04 80       	ldd	r0, Z+4	; 0x04
     8ae:	f5 81       	ldd	r31, Z+5	; 0x05
     8b0:	e0 2d       	mov	r30, r0
     8b2:	09 94       	ijmp

000008b4 <_ZN13Adafruit_FONA5writeEh>:
     8b4:	83 5e       	subi	r24, 0xE3	; 227
     8b6:	9e 4f       	sbci	r25, 0xFE	; 254
     8b8:	dc 01       	movw	r26, r24
     8ba:	8d 91       	ld	r24, X+
     8bc:	9c 91       	ld	r25, X
     8be:	dc 01       	movw	r26, r24
     8c0:	ed 91       	ld	r30, X+
     8c2:	fc 91       	ld	r31, X
     8c4:	01 90       	ld	r0, Z+
     8c6:	f0 81       	ld	r31, Z
     8c8:	e0 2d       	mov	r30, r0
     8ca:	09 94       	ijmp

000008cc <_ZN13Adafruit_FONA4readEv>:
     8cc:	83 5e       	subi	r24, 0xE3	; 227
     8ce:	9e 4f       	sbci	r25, 0xFE	; 254
     8d0:	dc 01       	movw	r26, r24
     8d2:	8d 91       	ld	r24, X+
     8d4:	9c 91       	ld	r25, X
     8d6:	dc 01       	movw	r26, r24
     8d8:	ed 91       	ld	r30, X+
     8da:	fc 91       	ld	r31, X
     8dc:	06 80       	ldd	r0, Z+6	; 0x06
     8de:	f7 81       	ldd	r31, Z+7	; 0x07
     8e0:	e0 2d       	mov	r30, r0
     8e2:	09 94       	ijmp

000008e4 <_ZN13Adafruit_FONA4peekEv>:
     8e4:	83 5e       	subi	r24, 0xE3	; 227
     8e6:	9e 4f       	sbci	r25, 0xFE	; 254
     8e8:	dc 01       	movw	r26, r24
     8ea:	8d 91       	ld	r24, X+
     8ec:	9c 91       	ld	r25, X
     8ee:	dc 01       	movw	r26, r24
     8f0:	ed 91       	ld	r30, X+
     8f2:	fc 91       	ld	r31, X
     8f4:	00 84       	ldd	r0, Z+8	; 0x08
     8f6:	f1 85       	ldd	r31, Z+9	; 0x09
     8f8:	e0 2d       	mov	r30, r0
     8fa:	09 94       	ijmp

000008fc <_ZN13Adafruit_FONA5flushEv>:
     8fc:	83 5e       	subi	r24, 0xE3	; 227
     8fe:	9e 4f       	sbci	r25, 0xFE	; 254
     900:	dc 01       	movw	r26, r24
     902:	8d 91       	ld	r24, X+
     904:	9c 91       	ld	r25, X
     906:	dc 01       	movw	r26, r24
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	02 84       	ldd	r0, Z+10	; 0x0a
     90e:	f3 85       	ldd	r31, Z+11	; 0x0b
     910:	e0 2d       	mov	r30, r0
     912:	09 94       	ijmp

00000914 <_ZN13Adafruit_FONAC1Eab>:
     914:	cf 92       	push	r12
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	00 d0       	rcall	.+0      	; 0x926 <_ZN13Adafruit_FONAC1Eab+0x12>
     926:	00 d0       	rcall	.+0      	; 0x928 <_ZN13Adafruit_FONAC1Eab+0x14>
     928:	00 d0       	rcall	.+0      	; 0x92a <_ZN13Adafruit_FONAC1Eab+0x16>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	8c 01       	movw	r16, r24
     930:	c6 2e       	mov	r12, r22
     932:	d4 2e       	mov	r13, r20
     934:	fc 01       	movw	r30, r24
     936:	13 82       	std	Z+3, r1	; 0x03
     938:	12 82       	std	Z+2, r1	; 0x02
     93a:	88 ee       	ldi	r24, 0xE8	; 232
     93c:	93 e0       	ldi	r25, 0x03	; 3
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	95 83       	std	Z+5, r25	; 0x05
     946:	a6 83       	std	Z+6, r26	; 0x06
     948:	b7 83       	std	Z+7, r27	; 0x07
     94a:	8a e3       	ldi	r24, 0x3A	; 58
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	80 83       	st	Z, r24
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	86 87       	std	Z+14, r24	; 0x0e
     956:	78 01       	movw	r14, r16
     958:	fb ee       	ldi	r31, 0xEB	; 235
     95a:	ef 1a       	sub	r14, r31
     95c:	fe ef       	ldi	r31, 0xFE	; 254
     95e:	ff 0a       	sbc	r15, r31
     960:	6e e7       	ldi	r22, 0x7E	; 126
     962:	72 e0       	ldi	r23, 0x02	; 2
     964:	c7 01       	movw	r24, r14
     966:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN6StringC1EPKc>
     96a:	f8 01       	movw	r30, r16
     96c:	c4 86       	std	Z+12, r12	; 0x0c
     96e:	d5 86       	std	Z+13, r13	; 0x0d
     970:	e2 5f       	subi	r30, 0xF2	; 242
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	8c e1       	ldi	r24, 0x1C	; 28
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	91 83       	std	Z+1, r25	; 0x01
     97a:	80 83       	st	Z, r24
     97c:	32 96       	adiw	r30, 0x02	; 2
     97e:	11 82       	std	Z+1, r1	; 0x01
     980:	10 82       	st	Z, r1
     982:	32 96       	adiw	r30, 0x02	; 2
     984:	11 82       	std	Z+1, r1	; 0x01
     986:	10 82       	st	Z, r1
     988:	3b 96       	adiw	r30, 0x0b	; 11
     98a:	11 82       	std	Z+1, r1	; 0x01
     98c:	10 82       	st	Z, r1
     98e:	39 97       	sbiw	r30, 0x09	; 9
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 83       	st	Z, r24
     994:	67 e0       	ldi	r22, 0x07	; 7
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN6StringC1EPKc>
     9a0:	be 01       	movw	r22, r28
     9a2:	6f 5f       	subi	r22, 0xFF	; 255
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	c7 01       	movw	r24, r14
     9a8:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <_ZN6StringaSEOS_>
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN6StringD1Ev>
     9b4:	f8 01       	movw	r30, r16
     9b6:	e5 5e       	subi	r30, 0xE5	; 229
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	89 e1       	ldi	r24, 0x19	; 25
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
     9c2:	26 96       	adiw	r28, 0x06	; 6
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	08 95       	ret

000009e0 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     9e0:	8b 5e       	subi	r24, 0xEB	; 235
     9e2:	9e 4f       	sbci	r25, 0xFE	; 254
     9e4:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <_ZN6StringaSERKS_>

000009e8 <_ZN13Adafruit_FONA10flushInputEv>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	8c 01       	movw	r16, r24
     9f8:	0f 5f       	subi	r16, 0xFF	; 255
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
     9fc:	88 97       	sbiw	r24, 0x28	; 40
     9fe:	d8 f4       	brcc	.+54     	; 0xa36 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     a00:	e8 81       	ld	r30, Y
     a02:	f9 81       	ldd	r31, Y+1	; 0x01
     a04:	04 80       	ldd	r0, Z+4	; 0x04
     a06:	f5 81       	ldd	r31, Z+5	; 0x05
     a08:	e0 2d       	mov	r30, r0
     a0a:	ce 01       	movw	r24, r28
     a0c:	09 95       	icall
     a0e:	89 2b       	or	r24, r25
     a10:	51 f0       	breq	.+20     	; 0xa26 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     a12:	e8 81       	ld	r30, Y
     a14:	f9 81       	ldd	r31, Y+1	; 0x01
     a16:	06 80       	ldd	r0, Z+6	; 0x06
     a18:	f7 81       	ldd	r31, Z+7	; 0x07
     a1a:	e0 2d       	mov	r30, r0
     a1c:	ce 01       	movw	r24, r28
     a1e:	09 95       	icall
     a20:	00 e0       	ldi	r16, 0x00	; 0
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	ed cf       	rjmp	.-38     	; 0xa00 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     a32:	c8 01       	movw	r24, r16
     a34:	e0 cf       	rjmp	.-64     	; 0x9f6 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <_ZN13Adafruit_FONA8readlineEjb>:
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	7c 01       	movw	r14, r24
     a54:	b4 2e       	mov	r11, r20
     a56:	8b 01       	movw	r16, r22
     a58:	00 0f       	add	r16, r16
     a5a:	11 1f       	adc	r17, r17
     a5c:	00 0f       	add	r16, r16
     a5e:	11 1f       	adc	r17, r17
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	d0 e0       	ldi	r29, 0x00	; 0
     a64:	67 01       	movw	r12, r14
     a66:	83 ee       	ldi	r24, 0xE3	; 227
     a68:	c8 1a       	sub	r12, r24
     a6a:	8e ef       	ldi	r24, 0xFE	; 254
     a6c:	d8 0a       	sbc	r13, r24
     a6e:	01 15       	cp	r16, r1
     a70:	11 05       	cpc	r17, r1
     a72:	c9 f1       	breq	.+114    	; 0xae6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a74:	ce 3f       	cpi	r28, 0xFE	; 254
     a76:	d1 05       	cpc	r29, r1
     a78:	98 f0       	brcs	.+38     	; 0xaa0 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a7a:	64 e8       	ldi	r22, 0x84	; 132
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	8f e8       	ldi	r24, 0x8F	; 143
     a80:	94 e0       	ldi	r25, 0x04	; 4
     a82:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
     a86:	2f c0       	rjmp	.+94     	; 0xae6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a88:	f6 01       	movw	r30, r12
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	dc 01       	movw	r26, r24
     a90:	ed 91       	ld	r30, X+
     a92:	fc 91       	ld	r31, X
     a94:	06 80       	ldd	r0, Z+6	; 0x06
     a96:	f7 81       	ldd	r31, Z+7	; 0x07
     a98:	e0 2d       	mov	r30, r0
     a9a:	09 95       	icall
     a9c:	8d 30       	cpi	r24, 0x0D	; 13
     a9e:	69 f4       	brne	.+26     	; 0xaba <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     aa0:	d6 01       	movw	r26, r12
     aa2:	8d 91       	ld	r24, X+
     aa4:	9c 91       	ld	r25, X
     aa6:	dc 01       	movw	r26, r24
     aa8:	ed 91       	ld	r30, X+
     aaa:	fc 91       	ld	r31, X
     aac:	04 80       	ldd	r0, Z+4	; 0x04
     aae:	f5 81       	ldd	r31, Z+5	; 0x05
     ab0:	e0 2d       	mov	r30, r0
     ab2:	09 95       	icall
     ab4:	89 2b       	or	r24, r25
     ab6:	41 f7       	brne	.-48     	; 0xa88 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     ab8:	0c c0       	rjmp	.+24     	; 0xad2 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     aba:	8a 30       	cpi	r24, 0x0A	; 10
     abc:	21 f4       	brne	.+8      	; 0xac6 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     abe:	20 97       	sbiw	r28, 0x00	; 0
     ac0:	79 f3       	breq	.-34     	; 0xaa0 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     ac2:	bb 20       	and	r11, r11
     ac4:	81 f0       	breq	.+32     	; 0xae6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 0f       	add	r30, r28
     aca:	fd 1f       	adc	r31, r29
     acc:	87 87       	std	Z+15, r24	; 0x0f
     ace:	21 96       	adiw	r28, 0x01	; 1
     ad0:	e7 cf       	rjmp	.-50     	; 0xaa0 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     ad2:	01 50       	subi	r16, 0x01	; 1
     ad4:	11 09       	sbc	r17, r1
     ad6:	39 f0       	breq	.+14     	; 0xae6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     ae4:	c4 cf       	rjmp	.-120    	; 0xa6e <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     ae6:	f7 01       	movw	r30, r14
     ae8:	ec 0f       	add	r30, r28
     aea:	fd 1f       	adc	r31, r29
     aec:	17 86       	std	Z+15, r1	; 0x0f
     aee:	8c 2f       	mov	r24, r28
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	08 95       	ret

00000b04 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	ec 01       	movw	r28, r24
     b0e:	8b 01       	movw	r16, r22
     b10:	ba 01       	movw	r22, r20
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN13Adafruit_FONA8readlineEjb>
     b18:	6a e8       	ldi	r22, 0x8A	; 138
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8f e8       	ldi	r24, 0x8F	; 143
     b1e:	94 e0       	ldi	r25, 0x04	; 4
     b20:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     b24:	2f 96       	adiw	r28, 0x0f	; 15
     b26:	be 01       	movw	r22, r28
     b28:	8f e8       	ldi	r24, 0x8F	; 143
     b2a:	94 e0       	ldi	r25, 0x04	; 4
     b2c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
     b30:	b8 01       	movw	r22, r16
     b32:	ce 01       	movw	r24, r28
     b34:	0e 94 37 23 	call	0x466e	; 0x466e <strcmp_P>
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	89 2b       	or	r24, r25
     b3c:	09 f0       	breq	.+2      	; 0xb40 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	82 2f       	mov	r24, r18
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
     b5a:	8b 01       	movw	r16, r22
     b5c:	7a 01       	movw	r14, r20
     b5e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN13Adafruit_FONA10flushInputEv>
     b62:	6d e7       	ldi	r22, 0x7D	; 125
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	8f e8       	ldi	r24, 0x8F	; 143
     b68:	94 e0       	ldi	r25, 0x04	; 4
     b6a:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     b6e:	b8 01       	movw	r22, r16
     b70:	8f e8       	ldi	r24, 0x8F	; 143
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
     b78:	fe 01       	movw	r30, r28
     b7a:	e3 5e       	subi	r30, 0xE3	; 227
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	b8 01       	movw	r22, r16
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	b7 01       	movw	r22, r14
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN13Adafruit_FONA8readlineEjb>
     b92:	18 2f       	mov	r17, r24
     b94:	66 e7       	ldi	r22, 0x76	; 118
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	8f e8       	ldi	r24, 0x8F	; 143
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     ba0:	be 01       	movw	r22, r28
     ba2:	61 5f       	subi	r22, 0xF1	; 241
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	8f e8       	ldi	r24, 0x8F	; 143
     ba8:	94 e0       	ldi	r25, 0x04	; 4
     baa:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
     bae:	81 2f       	mov	r24, r17
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	08 95       	ret

00000bbe <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ec 01       	movw	r28, r24
     bd4:	6b 01       	movw	r12, r22
     bd6:	7a 01       	movw	r14, r20
     bd8:	59 01       	movw	r10, r18
     bda:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN13Adafruit_FONA10flushInputEv>
     bde:	6f e6       	ldi	r22, 0x6F	; 111
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	8f e8       	ldi	r24, 0x8F	; 143
     be4:	94 e0       	ldi	r25, 0x04	; 4
     be6:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     bea:	b6 01       	movw	r22, r12
     bec:	8f e8       	ldi	r24, 0x8F	; 143
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     bf4:	62 e2       	ldi	r22, 0x22	; 34
     bf6:	8f e8       	ldi	r24, 0x8F	; 143
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEc>
     bfe:	b7 01       	movw	r22, r14
     c00:	8f e8       	ldi	r24, 0x8F	; 143
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     c08:	62 e2       	ldi	r22, 0x22	; 34
     c0a:	8f e8       	ldi	r24, 0x8F	; 143
     c0c:	94 e0       	ldi	r25, 0x04	; 4
     c0e:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <_ZN5Print7printlnEc>
     c12:	8e 01       	movw	r16, r28
     c14:	03 5e       	subi	r16, 0xE3	; 227
     c16:	1e 4f       	sbci	r17, 0xFE	; 254
     c18:	b6 01       	movw	r22, r12
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     c24:	62 e2       	ldi	r22, 0x22	; 34
     c26:	f8 01       	movw	r30, r16
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEc>
     c30:	b7 01       	movw	r22, r14
     c32:	f8 01       	movw	r30, r16
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     c3c:	62 e2       	ldi	r22, 0x22	; 34
     c3e:	f8 01       	movw	r30, r16
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <_ZN5Print7printlnEc>
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	b5 01       	movw	r22, r10
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN13Adafruit_FONA8readlineEjb>
     c52:	18 2f       	mov	r17, r24
     c54:	68 e6       	ldi	r22, 0x68	; 104
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	8f e8       	ldi	r24, 0x8F	; 143
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     c60:	be 01       	movw	r22, r28
     c62:	61 5f       	subi	r22, 0xF1	; 241
     c64:	7f 4f       	sbci	r23, 0xFF	; 255
     c66:	8f e8       	ldi	r24, 0x8F	; 143
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
     c6e:	81 2f       	mov	r24, r17
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	08 95       	ret

00000c86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	8a 01       	movw	r16, r20
     c92:	a9 01       	movw	r20, r18
     c94:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     c98:	88 23       	and	r24, r24
     c9a:	41 f0       	breq	.+16     	; 0xcac <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     c9c:	b8 01       	movw	r22, r16
     c9e:	ce 01       	movw	r24, r28
     ca0:	0f 96       	adiw	r24, 0x0f	; 15
     ca2:	0e 94 37 23 	call	0x466e	; 0x466e <strcmp_P>
     ca6:	21 e0       	ldi	r18, 0x01	; 1
     ca8:	89 2b       	or	r24, r25
     caa:	09 f0       	breq	.+2      	; 0xcae <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	82 2f       	mov	r24, r18
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <_ZN13Adafruit_FONA5beginEhh>:
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	ec 01       	movw	r28, r24
     ccc:	f6 2e       	mov	r15, r22
     cce:	e4 2e       	mov	r14, r20
     cd0:	8f e1       	ldi	r24, 0x1F	; 31
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 44 1a 	call	0x3488	; 0x3488 <_Znwj>
     cd8:	8c 01       	movw	r16, r24
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	4e 2d       	mov	r20, r14
     cde:	6f 2d       	mov	r22, r15
     ce0:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <_ZN14SoftwareSerialC1Ehhb>
     ce4:	7e 01       	movw	r14, r28
     ce6:	83 ee       	ldi	r24, 0xE3	; 227
     ce8:	e8 1a       	sub	r14, r24
     cea:	8e ef       	ldi	r24, 0xFE	; 254
     cec:	f8 0a       	sbc	r15, r24
     cee:	d7 01       	movw	r26, r14
     cf0:	0d 93       	st	X+, r16
     cf2:	1c 93       	st	X, r17
     cf4:	40 ec       	ldi	r20, 0xC0	; 192
     cf6:	52 e1       	ldi	r21, 0x12	; 18
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	c8 01       	movw	r24, r16
     cfe:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN14SoftwareSerial5beginEl>
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	8c 85       	ldd	r24, Y+12	; 0x0c
     d06:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <pinMode>
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
     d12:	6a e0       	ldi	r22, 0x0A	; 10
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	8c 85       	ldd	r24, Y+12	; 0x0c
     d22:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
     d26:	64 e6       	ldi	r22, 0x64	; 100
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	8c 85       	ldd	r24, Y+12	; 0x0c
     d36:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
     d3a:	68 ef       	ldi	r22, 0xF8	; 248
     d3c:	71 e0       	ldi	r23, 0x01	; 1
     d3e:	8f e8       	ldi	r24, 0x8F	; 143
     d40:	94 e0       	ldi	r25, 0x04	; 4
     d42:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
     d46:	8e e0       	ldi	r24, 0x0E	; 14
     d48:	c8 2e       	mov	r12, r24
     d4a:	d1 2c       	mov	r13, r1
     d4c:	8e 01       	movw	r16, r28
     d4e:	05 5e       	subi	r16, 0xE5	; 229
     d50:	1e 4f       	sbci	r17, 0xFE	; 254
     d52:	f7 01       	movw	r30, r14
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	dc 01       	movw	r26, r24
     d5a:	ed 91       	ld	r30, X+
     d5c:	fc 91       	ld	r31, X
     d5e:	04 80       	ldd	r0, Z+4	; 0x04
     d60:	f5 81       	ldd	r31, Z+5	; 0x05
     d62:	e0 2d       	mov	r30, r0
     d64:	09 95       	icall
     d66:	89 2b       	or	r24, r25
     d68:	59 f0       	breq	.+22     	; 0xd80 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     d6a:	f7 01       	movw	r30, r14
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	dc 01       	movw	r26, r24
     d72:	ed 91       	ld	r30, X+
     d74:	fc 91       	ld	r31, X
     d76:	06 80       	ldd	r0, Z+6	; 0x06
     d78:	f7 81       	ldd	r31, Z+7	; 0x07
     d7a:	e0 2d       	mov	r30, r0
     d7c:	09 95       	icall
     d7e:	e9 cf       	rjmp	.-46     	; 0xd52 <_ZN13Adafruit_FONA5beginEhh+0x98>
     d80:	f8 01       	movw	r30, r16
     d82:	40 81       	ld	r20, Z
     d84:	51 81       	ldd	r21, Z+1	; 0x01
     d86:	24 ef       	ldi	r18, 0xF4	; 244
     d88:	31 e0       	ldi	r19, 0x01	; 1
     d8a:	65 ef       	ldi	r22, 0xF5	; 245
     d8c:	71 e0       	ldi	r23, 0x01	; 1
     d8e:	ce 01       	movw	r24, r28
     d90:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d94:	81 11       	cpse	r24, r1
     d96:	34 c0       	rjmp	.+104    	; 0xe00 <_ZN13Adafruit_FONA5beginEhh+0x146>
     d98:	d7 01       	movw	r26, r14
     d9a:	8d 91       	ld	r24, X+
     d9c:	9c 91       	ld	r25, X
     d9e:	dc 01       	movw	r26, r24
     da0:	ed 91       	ld	r30, X+
     da2:	fc 91       	ld	r31, X
     da4:	04 80       	ldd	r0, Z+4	; 0x04
     da6:	f5 81       	ldd	r31, Z+5	; 0x05
     da8:	e0 2d       	mov	r30, r0
     daa:	09 95       	icall
     dac:	89 2b       	or	r24, r25
     dae:	59 f0       	breq	.+22     	; 0xdc6 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     db0:	f7 01       	movw	r30, r14
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	dc 01       	movw	r26, r24
     db8:	ed 91       	ld	r30, X+
     dba:	fc 91       	ld	r31, X
     dbc:	06 80       	ldd	r0, Z+6	; 0x06
     dbe:	f7 81       	ldd	r31, Z+7	; 0x07
     dc0:	e0 2d       	mov	r30, r0
     dc2:	09 95       	icall
     dc4:	e9 cf       	rjmp	.-46     	; 0xd98 <_ZN13Adafruit_FONA5beginEhh+0xde>
     dc6:	24 ef       	ldi	r18, 0xF4	; 244
     dc8:	31 e0       	ldi	r19, 0x01	; 1
     dca:	42 ef       	ldi	r20, 0xF2	; 242
     dcc:	51 e0       	ldi	r21, 0x01	; 1
     dce:	6f ee       	ldi	r22, 0xEF	; 239
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	ce 01       	movw	r24, r28
     dd4:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dd8:	81 11       	cpse	r24, r1
     dda:	12 c0       	rjmp	.+36     	; 0xe00 <_ZN13Adafruit_FONA5beginEhh+0x146>
     ddc:	64 ef       	ldi	r22, 0xF4	; 244
     dde:	71 e0       	ldi	r23, 0x01	; 1
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     de8:	b1 e0       	ldi	r27, 0x01	; 1
     dea:	cb 1a       	sub	r12, r27
     dec:	d1 08       	sbc	r13, r1
     dee:	09 f0       	breq	.+2      	; 0xdf2 <_ZN13Adafruit_FONA5beginEhh+0x138>
     df0:	b0 cf       	rjmp	.-160    	; 0xd52 <_ZN13Adafruit_FONA5beginEhh+0x98>
     df2:	5e c0       	rjmp	.+188    	; 0xeb0 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     df4:	64 e6       	ldi	r22, 0x64	; 100
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     e00:	f8 01       	movw	r30, r16
     e02:	40 81       	ld	r20, Z
     e04:	51 81       	ldd	r21, Z+1	; 0x01
     e06:	24 ef       	ldi	r18, 0xF4	; 244
     e08:	31 e0       	ldi	r19, 0x01	; 1
     e0a:	62 ec       	ldi	r22, 0xC2	; 194
     e0c:	71 e0       	ldi	r23, 0x01	; 1
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e14:	64 e6       	ldi	r22, 0x64	; 100
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     e20:	d8 01       	movw	r26, r16
     e22:	4d 91       	ld	r20, X+
     e24:	5c 91       	ld	r21, X
     e26:	24 ef       	ldi	r18, 0xF4	; 244
     e28:	31 e0       	ldi	r19, 0x01	; 1
     e2a:	6d eb       	ldi	r22, 0xBD	; 189
     e2c:	71 e0       	ldi	r23, 0x01	; 1
     e2e:	ce 01       	movw	r24, r28
     e30:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e34:	81 11       	cpse	r24, r1
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <_ZN13Adafruit_FONA5beginEhh+0x182>
     e38:	12 e0       	ldi	r17, 0x02	; 2
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <_ZN13Adafruit_FONA5beginEhh+0x184>
     e3c:	11 e0       	ldi	r17, 0x01	; 1
     e3e:	64 e6       	ldi	r22, 0x64	; 100
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN13Adafruit_FONA10flushInputEv>
     e50:	66 eb       	ldi	r22, 0xB6	; 182
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	8f e8       	ldi	r24, 0x8F	; 143
     e56:	94 e0       	ldi	r25, 0x04	; 4
     e58:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     e5c:	66 e1       	ldi	r22, 0x16	; 22
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	8f e8       	ldi	r24, 0x8F	; 143
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
     e68:	66 e1       	ldi	r22, 0x16	; 22
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	f7 01       	movw	r30, r14
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	64 ef       	ldi	r22, 0xF4	; 244
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN13Adafruit_FONA8readlineEjb>
     e82:	6f ea       	ldi	r22, 0xAF	; 175
     e84:	71 e0       	ldi	r23, 0x01	; 1
     e86:	8f e8       	ldi	r24, 0x8F	; 143
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
     e8e:	2f 96       	adiw	r28, 0x0f	; 15
     e90:	be 01       	movw	r22, r28
     e92:	8f e8       	ldi	r24, 0x8F	; 143
     e94:	94 e0       	ldi	r25, 0x04	; 4
     e96:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
     e9a:	64 ea       	ldi	r22, 0xA4	; 164
     e9c:	71 e0       	ldi	r23, 0x01	; 1
     e9e:	ce 01       	movw	r24, r28
     ea0:	0e 94 49 23 	call	0x4692	; 0x4692 <strstr_P>
     ea4:	89 2b       	or	r24, r25
     ea6:	11 f0       	breq	.+4      	; 0xeac <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     ea8:	81 2f       	mov	r24, r17
     eaa:	35 c0       	rjmp	.+106    	; 0xf16 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	33 c0       	rjmp	.+102    	; 0xf16 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     eb0:	d8 01       	movw	r26, r16
     eb2:	4d 91       	ld	r20, X+
     eb4:	5c 91       	ld	r21, X
     eb6:	24 ef       	ldi	r18, 0xF4	; 244
     eb8:	31 e0       	ldi	r19, 0x01	; 1
     eba:	6c ee       	ldi	r22, 0xEC	; 236
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	ce 01       	movw	r24, r28
     ec0:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ec4:	64 e6       	ldi	r22, 0x64	; 100
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     ed0:	f8 01       	movw	r30, r16
     ed2:	40 81       	ld	r20, Z
     ed4:	51 81       	ldd	r21, Z+1	; 0x01
     ed6:	24 ef       	ldi	r18, 0xF4	; 244
     ed8:	31 e0       	ldi	r19, 0x01	; 1
     eda:	69 ee       	ldi	r22, 0xE9	; 233
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ee4:	64 e6       	ldi	r22, 0x64	; 100
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
     ef0:	d8 01       	movw	r26, r16
     ef2:	4d 91       	ld	r20, X+
     ef4:	5c 91       	ld	r21, X
     ef6:	24 ef       	ldi	r18, 0xF4	; 244
     ef8:	31 e0       	ldi	r19, 0x01	; 1
     efa:	66 ee       	ldi	r22, 0xE6	; 230
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	ce 01       	movw	r24, r28
     f00:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f04:	81 11       	cpse	r24, r1
     f06:	76 cf       	rjmp	.-276    	; 0xdf4 <_ZN13Adafruit_FONA5beginEhh+0x13a>
     f08:	67 ec       	ldi	r22, 0xC7	; 199
     f0a:	71 e0       	ldi	r23, 0x01	; 1
     f0c:	8f e8       	ldi	r24, 0x8F	; 143
     f0e:	94 e0       	ldi	r25, 0x04	; 4
     f10:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	df 90       	pop	r13
     f24:	cf 90       	pop	r12
     f26:	08 95       	ret

00000f28 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ec 01       	movw	r28, r24
     f36:	79 01       	movw	r14, r18
     f38:	98 01       	movw	r18, r16
     f3a:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     f3e:	b7 01       	movw	r22, r14
     f40:	ce 01       	movw	r24, r28
     f42:	0f 96       	adiw	r24, 0x0f	; 15
     f44:	0e 94 37 23 	call	0x466e	; 0x466e <strcmp_P>
     f48:	21 e0       	ldi	r18, 0x01	; 1
     f4a:	89 2b       	or	r24, r25
     f4c:	09 f0       	breq	.+2      	; 0xf50 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	82 2f       	mov	r24, r18
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	08 95       	ret

00000f60 <_ZN13Adafruit_FONA10enableGPRSEb>:
     f60:	7f 92       	push	r7
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	ec 01       	movw	r28, r24
     f7c:	28 ee       	ldi	r18, 0xE8	; 232
     f7e:	3d ef       	ldi	r19, 0xFD	; 253
     f80:	66 23       	and	r22, r22
     f82:	09 f4       	brne	.+2      	; 0xf86 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     f84:	1f c1       	rjmp	.+574    	; 0x11c4 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     f86:	4e e5       	ldi	r20, 0x5E	; 94
     f88:	51 e0       	ldi	r21, 0x01	; 1
     f8a:	63 e5       	ldi	r22, 0x53	; 83
     f8c:	71 e0       	ldi	r23, 0x01	; 1
     f8e:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f92:	81 11       	cpse	r24, r1
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	78 2e       	mov	r7, r24
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     f9c:	77 24       	eor	r7, r7
     f9e:	73 94       	inc	r7
     fa0:	7e 01       	movw	r14, r28
     fa2:	85 ee       	ldi	r24, 0xE5	; 229
     fa4:	e8 1a       	sub	r14, r24
     fa6:	8e ef       	ldi	r24, 0xFE	; 254
     fa8:	f8 0a       	sbc	r15, r24
     faa:	f7 01       	movw	r30, r14
     fac:	40 81       	ld	r20, Z
     fae:	51 81       	ldd	r21, Z+1	; 0x01
     fb0:	20 e1       	ldi	r18, 0x10	; 16
     fb2:	37 e2       	ldi	r19, 0x27	; 39
     fb4:	68 e4       	ldi	r22, 0x48	; 72
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	ce 01       	movw	r24, r28
     fba:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     fc2:	25 c1       	rjmp	.+586    	; 0x120e <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     fc4:	f7 01       	movw	r30, r14
     fc6:	40 81       	ld	r20, Z
     fc8:	51 81       	ldd	r21, Z+1	; 0x01
     fca:	20 e1       	ldi	r18, 0x10	; 16
     fcc:	37 e2       	ldi	r19, 0x27	; 39
     fce:	6a e2       	ldi	r22, 0x2A	; 42
     fd0:	71 e0       	ldi	r23, 0x01	; 1
     fd2:	ce 01       	movw	r24, r28
     fd4:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     fdc:	1a c1       	rjmp	.+564    	; 0x1212 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     fde:	4e 01       	movw	r8, r28
     fe0:	f2 ef       	ldi	r31, 0xF2	; 242
     fe2:	8f 1a       	sub	r8, r31
     fe4:	fe ef       	ldi	r31, 0xFE	; 254
     fe6:	9f 0a       	sbc	r9, r31
     fe8:	f4 01       	movw	r30, r8
     fea:	40 81       	ld	r20, Z
     fec:	51 81       	ldd	r21, Z+1	; 0x01
     fee:	41 15       	cp	r20, r1
     ff0:	51 05       	cpc	r21, r1
     ff2:	71 f4       	brne	.+28     	; 0x1010 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     ff4:	f7 01       	movw	r30, r14
     ff6:	40 81       	ld	r20, Z
     ff8:	51 81       	ldd	r21, Z+1	; 0x01
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	3f ef       	ldi	r19, 0xFF	; 255
     ffe:	65 ec       	ldi	r22, 0xC5	; 197
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1008:	81 11       	cpse	r24, r1
    100a:	ce c0       	rjmp	.+412    	; 0x11a8 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    100c:	89 e0       	ldi	r24, 0x09	; 9
    100e:	0e c1       	rjmp	.+540    	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1010:	f7 01       	movw	r30, r14
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	00 e1       	ldi	r16, 0x10	; 16
    1018:	17 e2       	ldi	r17, 0x27	; 39
    101a:	66 e1       	ldi	r22, 0x16	; 22
    101c:	71 e0       	ldi	r23, 0x01	; 1
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    1028:	f6 c0       	rjmp	.+492    	; 0x1216 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    102a:	ce 01       	movw	r24, r28
    102c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN13Adafruit_FONA10flushInputEv>
    1030:	8e 01       	movw	r16, r28
    1032:	03 5e       	subi	r16, 0xE3	; 227
    1034:	1e 4f       	sbci	r17, 0xFE	; 254
    1036:	6c e0       	ldi	r22, 0x0C	; 12
    1038:	71 e0       	ldi	r23, 0x01	; 1
    103a:	f8 01       	movw	r30, r16
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1044:	f4 01       	movw	r30, r8
    1046:	60 81       	ld	r22, Z
    1048:	71 81       	ldd	r23, Z+1	; 0x01
    104a:	f8 01       	movw	r30, r16
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1054:	5e 01       	movw	r10, r28
    1056:	f0 ef       	ldi	r31, 0xF0	; 240
    1058:	af 1a       	sub	r10, r31
    105a:	fe ef       	ldi	r31, 0xFE	; 254
    105c:	bf 0a       	sbc	r11, r31
    105e:	f5 01       	movw	r30, r10
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	89 2b       	or	r24, r25
    1066:	79 f0       	breq	.+30     	; 0x1086 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    1068:	62 e3       	ldi	r22, 0x32	; 50
    106a:	71 e0       	ldi	r23, 0x01	; 1
    106c:	f8 01       	movw	r30, r16
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    1076:	f5 01       	movw	r30, r10
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	f8 01       	movw	r30, r16
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1086:	6e 01       	movw	r12, r28
    1088:	fe ee       	ldi	r31, 0xEE	; 238
    108a:	cf 1a       	sub	r12, r31
    108c:	fe ef       	ldi	r31, 0xFE	; 254
    108e:	df 0a       	sbc	r13, r31
    1090:	f6 01       	movw	r30, r12
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	89 2b       	or	r24, r25
    1098:	79 f0       	breq	.+30     	; 0x10b8 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    109a:	62 e3       	ldi	r22, 0x32	; 50
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	f8 01       	movw	r30, r16
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    10a8:	f6 01       	movw	r30, r12
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	f8 01       	movw	r30, r16
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    10b8:	64 e3       	ldi	r22, 0x34	; 52
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	f8 01       	movw	r30, r16
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
    10c6:	65 e0       	ldi	r22, 0x05	; 5
    10c8:	71 e0       	ldi	r23, 0x01	; 1
    10ca:	8f e8       	ldi	r24, 0x8F	; 143
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    10d2:	6b ef       	ldi	r22, 0xFB	; 251
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	8f e8       	ldi	r24, 0x8F	; 143
    10d8:	94 e0       	ldi	r25, 0x04	; 4
    10da:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    10de:	f4 01       	movw	r30, r8
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	8f e8       	ldi	r24, 0x8F	; 143
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    10ec:	f5 01       	movw	r30, r10
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	89 2b       	or	r24, r25
    10f4:	69 f0       	breq	.+26     	; 0x1110 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    10f6:	62 e3       	ldi	r22, 0x32	; 50
    10f8:	71 e0       	ldi	r23, 0x01	; 1
    10fa:	8f e8       	ldi	r24, 0x8F	; 143
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    1102:	f5 01       	movw	r30, r10
    1104:	60 81       	ld	r22, Z
    1106:	71 81       	ldd	r23, Z+1	; 0x01
    1108:	8f e8       	ldi	r24, 0x8F	; 143
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1110:	f6 01       	movw	r30, r12
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	89 2b       	or	r24, r25
    1118:	69 f0       	breq	.+26     	; 0x1134 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    111a:	62 e3       	ldi	r22, 0x32	; 50
    111c:	71 e0       	ldi	r23, 0x01	; 1
    111e:	8f e8       	ldi	r24, 0x8F	; 143
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    1126:	f6 01       	movw	r30, r12
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	8f e8       	ldi	r24, 0x8F	; 143
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1134:	64 e3       	ldi	r22, 0x34	; 52
    1136:	71 e0       	ldi	r23, 0x01	; 1
    1138:	8f e8       	ldi	r24, 0x8F	; 143
    113a:	94 e0       	ldi	r25, 0x04	; 4
    113c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
    1140:	f7 01       	movw	r30, r14
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	40 e1       	ldi	r20, 0x10	; 16
    1148:	57 e2       	ldi	r21, 0x27	; 39
    114a:	ce 01       	movw	r24, r28
    114c:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    1154:	62 c0       	rjmp	.+196    	; 0x121a <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    1156:	f5 01       	movw	r30, r10
    1158:	40 81       	ld	r20, Z
    115a:	51 81       	ldd	r21, Z+1	; 0x01
    115c:	41 15       	cp	r20, r1
    115e:	51 05       	cpc	r21, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    1162:	f6 01       	movw	r30, r12
    1164:	40 81       	ld	r20, Z
    1166:	51 81       	ldd	r21, Z+1	; 0x01
    1168:	41 15       	cp	r20, r1
    116a:	51 05       	cpc	r21, r1
    116c:	79 f4       	brne	.+30     	; 0x118c <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    116e:	42 cf       	rjmp	.-380    	; 0xff4 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1170:	f7 01       	movw	r30, r14
    1172:	20 81       	ld	r18, Z
    1174:	31 81       	ldd	r19, Z+1	; 0x01
    1176:	00 e1       	ldi	r16, 0x10	; 16
    1178:	17 e2       	ldi	r17, 0x27	; 39
    117a:	66 ee       	ldi	r22, 0xE6	; 230
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1184:	81 11       	cpse	r24, r1
    1186:	ed cf       	rjmp	.-38     	; 0x1162 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1188:	87 e0       	ldi	r24, 0x07	; 7
    118a:	50 c0       	rjmp	.+160    	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    118c:	f7 01       	movw	r30, r14
    118e:	20 81       	ld	r18, Z
    1190:	31 81       	ldd	r19, Z+1	; 0x01
    1192:	00 e1       	ldi	r16, 0x10	; 16
    1194:	17 e2       	ldi	r17, 0x27	; 39
    1196:	62 ed       	ldi	r22, 0xD2	; 210
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    11a0:	81 11       	cpse	r24, r1
    11a2:	28 cf       	rjmp	.-432    	; 0xff4 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	42 c0       	rjmp	.+132    	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    11a8:	f7 01       	movw	r30, r14
    11aa:	40 81       	ld	r20, Z
    11ac:	51 81       	ldd	r21, Z+1	; 0x01
    11ae:	2f ef       	ldi	r18, 0xFF	; 255
    11b0:	3f ef       	ldi	r19, 0xFF	; 255
    11b2:	6c eb       	ldi	r22, 0xBC	; 188
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11bc:	88 23       	and	r24, r24
    11be:	79 f1       	breq	.+94     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    11c0:	87 2d       	mov	r24, r7
    11c2:	34 c0       	rjmp	.+104    	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    11c4:	44 eb       	ldi	r20, 0xB4	; 180
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	69 ea       	ldi	r22, 0xA9	; 169
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11d0:	88 23       	and	r24, r24
    11d2:	39 f1       	breq	.+78     	; 0x1222 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    11d4:	8e 01       	movw	r16, r28
    11d6:	05 5e       	subi	r16, 0xE5	; 229
    11d8:	1e 4f       	sbci	r17, 0xFE	; 254
    11da:	f8 01       	movw	r30, r16
    11dc:	40 81       	ld	r20, Z
    11de:	51 81       	ldd	r21, Z+1	; 0x01
    11e0:	20 e1       	ldi	r18, 0x10	; 16
    11e2:	37 e2       	ldi	r19, 0x27	; 39
    11e4:	6c e9       	ldi	r22, 0x9C	; 156
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11ee:	88 23       	and	r24, r24
    11f0:	d1 f0       	breq	.+52     	; 0x1226 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    11f2:	f8 01       	movw	r30, r16
    11f4:	40 81       	ld	r20, Z
    11f6:	51 81       	ldd	r21, Z+1	; 0x01
    11f8:	20 e1       	ldi	r18, 0x10	; 16
    11fa:	37 e2       	ldi	r19, 0x27	; 39
    11fc:	61 e9       	ldi	r22, 0x91	; 145
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	ce 01       	movw	r24, r28
    1202:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1206:	88 23       	and	r24, r24
    1208:	81 f0       	breq	.+32     	; 0x122a <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0f c0       	rjmp	.+30     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	0d c0       	rjmp	.+26     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	0b c0       	rjmp	.+22     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1216:	85 e0       	ldi	r24, 0x05	; 5
    1218:	09 c0       	rjmp	.+18     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    121a:	86 e0       	ldi	r24, 0x06	; 6
    121c:	07 c0       	rjmp	.+14     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    121e:	8a e0       	ldi	r24, 0x0A	; 10
    1220:	05 c0       	rjmp	.+10     	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1222:	8b e0       	ldi	r24, 0x0B	; 11
    1224:	03 c0       	rjmp	.+6      	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	01 c0       	rjmp	.+2      	; 0x122c <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    122a:	8d e0       	ldi	r24, 0x0D	; 13
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	bf 90       	pop	r11
    123e:	af 90       	pop	r10
    1240:	9f 90       	pop	r9
    1242:	8f 90       	pop	r8
    1244:	7f 90       	pop	r7
    1246:	08 95       	ret

00001248 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	5b 01       	movw	r10, r22
    125c:	6a 01       	movw	r12, r20
    125e:	e2 2e       	mov	r14, r18
    1260:	0f 96       	adiw	r24, 0x0f	; 15
    1262:	0e 94 49 23 	call	0x4692	; 0x4692 <strstr_P>
    1266:	ec 01       	movw	r28, r24
    1268:	89 2b       	or	r24, r25
    126a:	c1 f0       	breq	.+48     	; 0x129c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    126c:	c5 01       	movw	r24, r10
    126e:	0e 94 40 23 	call	0x4680	; 0x4680 <__strlen_P>
    1272:	8c 0f       	add	r24, r28
    1274:	9d 1f       	adc	r25, r29
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	f1 2c       	mov	r15, r1
    127a:	c0 17       	cp	r28, r16
    127c:	41 f0       	breq	.+16     	; 0x128e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    127e:	b7 01       	movw	r22, r14
    1280:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <strchr>
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	51 f0       	breq	.+20     	; 0x129c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	cf 5f       	subi	r28, 0xFF	; 255
    128c:	f6 cf       	rjmp	.-20     	; 0x127a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    128e:	0e 94 19 23 	call	0x4632	; 0x4632 <atoi>
    1292:	f6 01       	movw	r30, r12
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	01 c0       	rjmp	.+2      	; 0x129e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	08 95       	ret

000012b2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	ec 01       	movw	r28, r24
    12c6:	6a 01       	movw	r12, r20
    12c8:	59 01       	movw	r10, r18
    12ca:	10 2f       	mov	r17, r16
    12cc:	0e 2d       	mov	r16, r14
    12ce:	44 ef       	ldi	r20, 0xF4	; 244
    12d0:	51 e0       	ldi	r21, 0x01	; 1
    12d2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    12d6:	21 2f       	mov	r18, r17
    12d8:	a5 01       	movw	r20, r10
    12da:	b6 01       	movw	r22, r12
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 24 09 	call	0x1248	; 0x1248 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    12e2:	18 2f       	mov	r17, r24
    12e4:	88 23       	and	r24, r24
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	64 ef       	ldi	r22, 0xF4	; 244
    12ec:	71 e0       	ldi	r23, 0x01	; 1
    12ee:	ce 01       	movw	r24, r28
    12f0:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN13Adafruit_FONA8readlineEjb>
    12f4:	81 2f       	mov	r24, r17
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	bf 90       	pop	r11
    1306:	af 90       	pop	r10
    1308:	08 95       	ret

0000130a <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	28 97       	sbiw	r28, 0x08	; 8
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    132c:	18 86       	std	Y+8, r1	; 0x08
    132e:	1f 82       	std	Y+7, r1	; 0x07
    1330:	1e 82       	std	Y+6, r1	; 0x06
    1332:	1d 82       	std	Y+5, r1	; 0x05
    1334:	1c 82       	std	Y+4, r1	; 0x04
    1336:	1b 82       	std	Y+3, r1	; 0x03
    1338:	1a 82       	std	Y+2, r1	; 0x02
    133a:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    133c:	e1 2c       	mov	r14, r1
    133e:	0c e2       	ldi	r16, 0x2C	; 44
    1340:	9e 01       	movw	r18, r28
    1342:	29 5f       	subi	r18, 0xF9	; 249
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	4d e9       	ldi	r20, 0x9D	; 157
    1348:	51 e0       	ldi	r21, 0x01	; 1
    134a:	66 e9       	ldi	r22, 0x96	; 150
    134c:	71 e0       	ldi	r23, 0x01	; 1
    134e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1352:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1354:	ee 24       	eor	r14, r14
    1356:	e3 94       	inc	r14
    1358:	9e 01       	movw	r18, r28
    135a:	2b 5f       	subi	r18, 0xFB	; 251
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	4f e8       	ldi	r20, 0x8F	; 143
    1360:	51 e0       	ldi	r21, 0x01	; 1
    1362:	68 e8       	ldi	r22, 0x88	; 136
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	c6 01       	movw	r24, r12
    1368:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    136c:	88 23       	and	r24, r24
    136e:	19 f0       	breq	.+6      	; 0x1376 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	f8 26       	eor	r15, r24
    1374:	02 c0       	rjmp	.+4      	; 0x137a <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1376:	ff 24       	eor	r15, r15
    1378:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    137a:	e1 2c       	mov	r14, r1
    137c:	0c e2       	ldi	r16, 0x2C	; 44
    137e:	9e 01       	movw	r18, r28
    1380:	2d 5f       	subi	r18, 0xFD	; 253
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	51 e0       	ldi	r21, 0x01	; 1
    1388:	67 e7       	ldi	r22, 0x77	; 119
    138a:	71 e0       	ldi	r23, 0x01	; 1
    138c:	c6 01       	movw	r24, r12
    138e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1392:	88 23       	and	r24, r24
    1394:	11 f0       	breq	.+4      	; 0x139a <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1396:	1b 81       	ldd	r17, Y+3	; 0x03
    1398:	01 c0       	rjmp	.+2      	; 0x139c <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    139a:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    139c:	ee 24       	eor	r14, r14
    139e:	e3 94       	inc	r14
    13a0:	0c e2       	ldi	r16, 0x2C	; 44
    13a2:	9e 01       	movw	r18, r28
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	4f e6       	ldi	r20, 0x6F	; 111
    13aa:	51 e0       	ldi	r21, 0x01	; 1
    13ac:	66 e6       	ldi	r22, 0x66	; 102
    13ae:	71 e0       	ldi	r23, 0x01	; 1
    13b0:	c6 01       	movw	r24, r12
    13b2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    13b6:	81 11       	cpse	r24, r1
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    13ba:	91 2f       	mov	r25, r17
    13bc:	90 62       	ori	r25, 0x20	; 32
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    13c0:	99 81       	ldd	r25, Y+1	; 0x01
    13c2:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    13c4:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
}
    13c8:	8f 2d       	mov	r24, r15
    13ca:	28 96       	adiw	r28, 0x08	; 8
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret

000013e8 <_ZN10GsmPayloadC1Ev>:
//Internal format that gets encoded/decoded:
// TODO: Create special char at end if this was truncated and keep a track of truncation
//		 Try keep data[100] then charEncoding[100] on stack vs new data() then data->delete() then...
void GsmPayload::createEncodedPayload(char* output, uint16_t maxLength){
	
	createPayload((uint8_t*)output, maxLength);
    13e8:	fc 01       	movw	r30, r24
    13ea:	10 82       	st	Z, r1
    13ec:	12 82       	std	Z+2, r1	; 0x02
    13ee:	11 82       	std	Z+1, r1	; 0x01
    13f0:	13 82       	std	Z+3, r1	; 0x03
    13f2:	14 82       	std	Z+4, r1	; 0x04
    13f4:	15 82       	std	Z+5, r1	; 0x05
    13f6:	17 82       	std	Z+7, r1	; 0x07
    13f8:	11 86       	std	Z+9, r1	; 0x09
    13fa:	10 86       	std	Z+8, r1	; 0x08
    13fc:	13 86       	std	Z+11, r1	; 0x0b
    13fe:	12 86       	std	Z+10, r1	; 0x0a
    1400:	14 86       	std	Z+12, r1	; 0x0c
    1402:	08 95       	ret

00001404 <_ZN10GsmPayload13createPayloadEPhj>:
    1404:	fc 01       	movw	r30, r24
    1406:	db 01       	movw	r26, r22
    1408:	80 81       	ld	r24, Z
    140a:	8c 93       	st	X, r24
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	92 81       	ldd	r25, Z+2	; 0x02
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	9c 93       	st	X, r25
    1414:	8e 93       	st	-X, r24
    1416:	11 97       	sbiw	r26, 0x01	; 1
    1418:	84 85       	ldd	r24, Z+12	; 0x0c
    141a:	13 96       	adiw	r26, 0x03	; 3
    141c:	8c 93       	st	X, r24
    141e:	13 97       	sbiw	r26, 0x03	; 3
    1420:	44 85       	ldd	r20, Z+12	; 0x0c
    1422:	8a e0       	ldi	r24, 0x0A	; 10
    1424:	48 9f       	mul	r20, r24
    1426:	a0 01       	movw	r20, r0
    1428:	11 24       	eor	r1, r1
    142a:	62 85       	ldd	r22, Z+10	; 0x0a
    142c:	73 85       	ldd	r23, Z+11	; 0x0b
    142e:	cd 01       	movw	r24, r26
    1430:	04 96       	adiw	r24, 0x04	; 4
    1432:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <memcpy>

00001436 <_ZN10GsmPayload23readNumOfSensorReadingsEPc>:
		sizeof(moduleId) + 
		sizeof(thisBootNumber);
		
	uint8_t numReadings = *arrSzPos;
	return numReadings;
}
    1436:	fc 01       	movw	r30, r24
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	08 95       	ret

0000143c <_ZN10GsmPayload11readPayloadEPhP10SensorData>:

void GsmPayload::readPayload(uint8_t* input, SensorData* inputArr){
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
    144a:	8b 01       	movw	r16, r22
    144c:	7a 01       	movw	r14, r20
	
	memcpy(&moduleId, input, sizeof(moduleId));
    144e:	fb 01       	movw	r30, r22
    1450:	80 81       	ld	r24, Z
    1452:	88 83       	st	Y, r24
	input += sizeof(moduleId);
	RM_LOG2(F("Module ID was "), moduleId);
    1454:	61 e4       	ldi	r22, 0x41	; 65
    1456:	72 e0       	ldi	r23, 0x02	; 2
    1458:	8f e8       	ldi	r24, 0x8F	; 143
    145a:	94 e0       	ldi	r25, 0x04	; 4
    145c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1460:	66 e4       	ldi	r22, 0x46	; 70
    1462:	71 e0       	ldi	r23, 0x01	; 1
    1464:	8f e8       	ldi	r24, 0x8F	; 143
    1466:	94 e0       	ldi	r25, 0x04	; 4
    1468:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    146c:	4a e0       	ldi	r20, 0x0A	; 10
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	68 81       	ld	r22, Y
    1472:	8f e8       	ldi	r24, 0x8F	; 143
    1474:	94 e0       	ldi	r25, 0x04	; 4
    1476:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
	
	memcpy(&thisBootNumber, input, sizeof(thisBootNumber));
    147a:	f8 01       	movw	r30, r16
    147c:	81 81       	ldd	r24, Z+1	; 0x01
    147e:	92 81       	ldd	r25, Z+2	; 0x02
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	input += sizeof(thisBootNumber);
	RM_LOG2(F("Boot # was "), thisBootNumber);
    1484:	65 e3       	ldi	r22, 0x35	; 53
    1486:	72 e0       	ldi	r23, 0x02	; 2
    1488:	8f e8       	ldi	r24, 0x8F	; 143
    148a:	94 e0       	ldi	r25, 0x04	; 4
    148c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1490:	66 e4       	ldi	r22, 0x46	; 70
    1492:	71 e0       	ldi	r23, 0x01	; 1
    1494:	8f e8       	ldi	r24, 0x8F	; 143
    1496:	94 e0       	ldi	r25, 0x04	; 4
    1498:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    149c:	69 81       	ldd	r22, Y+1	; 0x01
    149e:	7a 81       	ldd	r23, Y+2	; 0x02
    14a0:	4a e0       	ldi	r20, 0x0A	; 10
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	8f e8       	ldi	r24, 0x8F	; 143
    14a6:	94 e0       	ldi	r25, 0x04	; 4
    14a8:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print7printlnEji>
	
	memcpy(&_dataArrSz, input, sizeof(_dataArrSz));
    14ac:	f8 01       	movw	r30, r16
    14ae:	83 81       	ldd	r24, Z+3	; 0x03
    14b0:	8c 87       	std	Y+12, r24	; 0x0c
	input += sizeof(_dataArrSz);
	RM_LOG2(F("Data Arr Sz was "), _dataArrSz);
    14b2:	64 e2       	ldi	r22, 0x24	; 36
    14b4:	72 e0       	ldi	r23, 0x02	; 2
    14b6:	8f e8       	ldi	r24, 0x8F	; 143
    14b8:	94 e0       	ldi	r25, 0x04	; 4
    14ba:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    14be:	66 e4       	ldi	r22, 0x46	; 70
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	8f e8       	ldi	r24, 0x8F	; 143
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    14ca:	4a e0       	ldi	r20, 0x0A	; 10
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    14d0:	8f e8       	ldi	r24, 0x8F	; 143
    14d2:	94 e0       	ldi	r25, 0x04	; 4
    14d4:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
	
	//SensorData tmp[_dataArrSz];
	_dataArr = inputArr;
    14d8:	fb 86       	std	Y+11, r15	; 0x0b
    14da:	ea 86       	std	Y+10, r14	; 0x0a
	memcpy(_dataArr, input, _dataArrSz * sizeof(SensorData));
    14dc:	4c 85       	ldd	r20, Y+12	; 0x0c
    14de:	fa e0       	ldi	r31, 0x0A	; 10
    14e0:	4f 9f       	mul	r20, r31
    14e2:	a0 01       	movw	r20, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	b8 01       	movw	r22, r16
    14e8:	6c 5f       	subi	r22, 0xFC	; 252
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	c7 01       	movw	r24, r14
	input += sizeof(_dataArrSz * sizeof(SensorData));
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
	input += sizeof(_dataArrSz);
	RM_LOG2(F("Data Arr Sz was "), _dataArrSz);
	
	//SensorData tmp[_dataArrSz];
	_dataArr = inputArr;
	memcpy(_dataArr, input, _dataArrSz * sizeof(SensorData));
    14fa:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <memcpy>

000014fe <_ZN10GsmPayload13addSensorDataEP10SensorDatah>:
	
}

void GsmPayload::addSensorData(SensorData* dataArr, uint8_t arraySz){

	_dataArr = dataArr;
    14fe:	fc 01       	movw	r30, r24
    1500:	73 87       	std	Z+11, r23	; 0x0b
    1502:	62 87       	std	Z+10, r22	; 0x0a
	_dataArrSz = arraySz;	
    1504:	44 87       	std	Z+12, r20	; 0x0c
    1506:	08 95       	ret

00001508 <_ZN10GsmPayload13getSensorDataEv>:
}

SensorData* GsmPayload::getSensorData() {
	
	return _dataArr;
}
    1508:	fc 01       	movw	r30, r24
    150a:	82 85       	ldd	r24, Z+10	; 0x0a
    150c:	93 85       	ldd	r25, Z+11	; 0x0b
    150e:	08 95       	ret

00001510 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
			RM_LOG(*(sd+t));
		
		RM_LOG(" ");
	}
	
	RM_LOGLN(" ");
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ec 01       	movw	r28, r24
    1516:	6a ec       	ldi	r22, 0xCA	; 202
    1518:	72 e0       	ldi	r23, 0x02	; 2
    151a:	8f e8       	ldi	r24, 0x8F	; 143
    151c:	94 e0       	ldi	r25, 0x04	; 4
    151e:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1522:	4a e0       	ldi	r20, 0x0A	; 10
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	68 81       	ld	r22, Y
    1528:	8f e8       	ldi	r24, 0x8F	; 143
    152a:	94 e0       	ldi	r25, 0x04	; 4
    152c:	0e 94 42 1b 	call	0x3684	; 0x3684 <_ZN5Print5printEhi>
    1530:	66 ec       	ldi	r22, 0xC6	; 198
    1532:	72 e0       	ldi	r23, 0x02	; 2
    1534:	8f e8       	ldi	r24, 0x8F	; 143
    1536:	94 e0       	ldi	r25, 0x04	; 4
    1538:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    153c:	61 ec       	ldi	r22, 0xC1	; 193
    153e:	72 e0       	ldi	r23, 0x02	; 2
    1540:	8f e8       	ldi	r24, 0x8F	; 143
    1542:	94 e0       	ldi	r25, 0x04	; 4
    1544:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1548:	4a e0       	ldi	r20, 0x0A	; 10
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	69 81       	ldd	r22, Y+1	; 0x01
    154e:	8f e8       	ldi	r24, 0x8F	; 143
    1550:	94 e0       	ldi	r25, 0x04	; 4
    1552:	0e 94 42 1b 	call	0x3684	; 0x3684 <_ZN5Print5printEhi>
    1556:	6d eb       	ldi	r22, 0xBD	; 189
    1558:	72 e0       	ldi	r23, 0x02	; 2
    155a:	8f e8       	ldi	r24, 0x8F	; 143
    155c:	94 e0       	ldi	r25, 0x04	; 4
    155e:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1562:	68 ea       	ldi	r22, 0xA8	; 168
    1564:	72 e0       	ldi	r23, 0x02	; 2
    1566:	8f e8       	ldi	r24, 0x8F	; 143
    1568:	94 e0       	ldi	r25, 0x04	; 4
    156a:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    156e:	6b 81       	ldd	r22, Y+3	; 0x03
    1570:	63 70       	andi	r22, 0x03	; 3
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	4a e0       	ldi	r20, 0x0A	; 10
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	8f e8       	ldi	r24, 0x8F	; 143
    157a:	94 e0       	ldi	r25, 0x04	; 4
    157c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <_ZN5Print5printEii>
    1580:	6e e9       	ldi	r22, 0x9E	; 158
    1582:	72 e0       	ldi	r23, 0x02	; 2
    1584:	8f e8       	ldi	r24, 0x8F	; 143
    1586:	94 e0       	ldi	r25, 0x04	; 4
    1588:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    158c:	6b 81       	ldd	r22, Y+3	; 0x03
    158e:	6c 71       	andi	r22, 0x1C	; 28
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	75 95       	asr	r23
    1594:	67 95       	ror	r22
    1596:	75 95       	asr	r23
    1598:	67 95       	ror	r22
    159a:	4a e0       	ldi	r20, 0x0A	; 10
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	8f e8       	ldi	r24, 0x8F	; 143
    15a0:	94 e0       	ldi	r25, 0x04	; 4
    15a2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <_ZN5Print5printEii>
    15a6:	65 e9       	ldi	r22, 0x95	; 149
    15a8:	72 e0       	ldi	r23, 0x02	; 2
    15aa:	8f e8       	ldi	r24, 0x8F	; 143
    15ac:	94 e0       	ldi	r25, 0x04	; 4
    15ae:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    15b2:	6b 81       	ldd	r22, Y+3	; 0x03
    15b4:	65 fb       	bst	r22, 5
    15b6:	66 27       	eor	r22, r22
    15b8:	60 f9       	bld	r22, 0
    15ba:	4a e0       	ldi	r20, 0x0A	; 10
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	8f e8       	ldi	r24, 0x8F	; 143
    15c2:	94 e0       	ldi	r25, 0x04	; 4
    15c4:	0e 94 bb 1b 	call	0x3776	; 0x3776 <_ZN5Print5printEii>
    15c8:	61 e9       	ldi	r22, 0x91	; 145
    15ca:	72 e0       	ldi	r23, 0x02	; 2
    15cc:	8f e8       	ldi	r24, 0x8F	; 143
    15ce:	94 e0       	ldi	r25, 0x04	; 4
    15d0:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    15d4:	64 e8       	ldi	r22, 0x84	; 132
    15d6:	72 e0       	ldi	r23, 0x02	; 2
    15d8:	8f e8       	ldi	r24, 0x8F	; 143
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    15e0:	4a e0       	ldi	r20, 0x0A	; 10
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	6a 81       	ldd	r22, Y+2	; 0x02
    15e6:	8f e8       	ldi	r24, 0x8F	; 143
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <_ZN5Print7printlnEhi>

000015f2 <_ZN7Helpers15printSensorDataEP10SensorData>:
}

void Helpers::printSensorData(SensorData* sd) {
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
    15f8:	6c e7       	ldi	r22, 0x7C	; 124
    15fa:	72 e0       	ldi	r23, 0x02	; 2
    15fc:	8f e8       	ldi	r24, 0x8F	; 143
    15fe:	94 e0       	ldi	r25, 0x04	; 4
    1600:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
    1604:	69 81       	ldd	r22, Y+1	; 0x01
    1606:	7a 81       	ldd	r23, Y+2	; 0x02
    1608:	4a e0       	ldi	r20, 0x0A	; 10
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	8f e8       	ldi	r24, 0x8F	; 143
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1614:	68 e7       	ldi	r22, 0x78	; 120
    1616:	72 e0       	ldi	r23, 0x02	; 2
    1618:	8f e8       	ldi	r24, 0x8F	; 143
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
    1620:	62 e7       	ldi	r22, 0x72	; 114
    1622:	72 e0       	ldi	r23, 0x02	; 2
    1624:	8f e8       	ldi	r24, 0x8F	; 143
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
    162c:	6d 81       	ldd	r22, Y+5	; 0x05
    162e:	7e 81       	ldd	r23, Y+6	; 0x06
    1630:	4a e0       	ldi	r20, 0x0A	; 10
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	8f e8       	ldi	r24, 0x8F	; 143
    1636:	94 e0       	ldi	r25, 0x04	; 4
    1638:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    163c:	6e e6       	ldi	r22, 0x6E	; 110
    163e:	72 e0       	ldi	r23, 0x02	; 2
    1640:	8f e8       	ldi	r24, 0x8F	; 143
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    1648:	65 e6       	ldi	r22, 0x65	; 101
    164a:	72 e0       	ldi	r23, 0x02	; 2
    164c:	8f e8       	ldi	r24, 0x8F	; 143
    164e:	94 e0       	ldi	r25, 0x04	; 4
    1650:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    1654:	6b 81       	ldd	r22, Y+3	; 0x03
    1656:	7c 81       	ldd	r23, Y+4	; 0x04
    1658:	4a e0       	ldi	r20, 0x0A	; 10
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	8f e8       	ldi	r24, 0x8F	; 143
    165e:	94 e0       	ldi	r25, 0x04	; 4
    1660:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1664:	61 e6       	ldi	r22, 0x61	; 97
    1666:	72 e0       	ldi	r23, 0x02	; 2
    1668:	8f e8       	ldi	r24, 0x8F	; 143
    166a:	94 e0       	ldi	r25, 0x04	; 4
    166c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    1670:	6b e5       	ldi	r22, 0x5B	; 91
    1672:	72 e0       	ldi	r23, 0x02	; 2
    1674:	8f e8       	ldi	r24, 0x8F	; 143
    1676:	94 e0       	ldi	r25, 0x04	; 4
    1678:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->temperature);
    167c:	6f 81       	ldd	r22, Y+7	; 0x07
    167e:	78 85       	ldd	r23, Y+8	; 0x08
    1680:	4a e0       	ldi	r20, 0x0A	; 10
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	8f e8       	ldi	r24, 0x8F	; 143
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    168c:	67 e5       	ldi	r22, 0x57	; 87
    168e:	72 e0       	ldi	r23, 0x02	; 2
    1690:	8f e8       	ldi	r24, 0x8F	; 143
    1692:	94 e0       	ldi	r25, 0x04	; 4
    1694:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Error="));
    1698:	60 e5       	ldi	r22, 0x50	; 80
    169a:	72 e0       	ldi	r23, 0x02	; 2
    169c:	8f e8       	ldi	r24, 0x8F	; 143
    169e:	94 e0       	ldi	r25, 0x04	; 4
    16a0:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->errorChar);
    16a4:	4a e0       	ldi	r20, 0x0A	; 10
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	69 85       	ldd	r22, Y+9	; 0x09
    16aa:	8f e8       	ldi	r24, 0x8F	; 143
    16ac:	94 e0       	ldi	r25, 0x04	; 4
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
	RM_LOG(F("Temp="));
	RM_LOG(sd->temperature);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Error="));
	RM_LOGLN(sd->errorChar);
    16b2:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <_ZN5Print7printlnEhi>

000016b6 <_ZN7Helpers9fillArrayEPhjh>:
}

void Helpers::fillArray(uint8_t* ptr, uint16_t sz, uint8_t val){
    16b6:	68 0f       	add	r22, r24
    16b8:	79 1f       	adc	r23, r25
	
	for(uint16_t i=0; i<sz; i++){
    16ba:	86 17       	cp	r24, r22
    16bc:	97 07       	cpc	r25, r23
    16be:	21 f0       	breq	.+8      	; 0x16c8 <_ZN7Helpers9fillArrayEPhjh+0x12>
		*(ptr+i) = val;
    16c0:	fc 01       	movw	r30, r24
    16c2:	41 93       	st	Z+, r20
    16c4:	cf 01       	movw	r24, r30
	RM_LOGLN(sd->errorChar);
}

void Helpers::fillArray(uint8_t* ptr, uint16_t sz, uint8_t val){
	
	for(uint16_t i=0; i<sz; i++){
    16c6:	f9 cf       	rjmp	.-14     	; 0x16ba <_ZN7Helpers9fillArrayEPhjh+0x4>
    16c8:	08 95       	ret

000016ca <_ZN7Helpers14base64_enc_lenEi>:
}

/* Return length DOES include trailing \0 */
int16_t Helpers::base64_enc_len(int16_t plainLen) {
	int16_t n = plainLen;
	return (n + 2 - ((n + 2) % 3)) / 3 * 4 + 1;
    16ca:	9c 01       	movw	r18, r24
    16cc:	2e 5f       	subi	r18, 0xFE	; 254
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	e3 e0       	ldi	r30, 0x03	; 3
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	c9 01       	movw	r24, r18
    16d6:	bf 01       	movw	r22, r30
    16d8:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__divmodhi4>
    16dc:	a9 01       	movw	r20, r18
    16de:	48 1b       	sub	r20, r24
    16e0:	59 0b       	sbc	r21, r25
    16e2:	ca 01       	movw	r24, r20
    16e4:	bf 01       	movw	r22, r30
    16e6:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__divmodhi4>
    16ea:	cb 01       	movw	r24, r22
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
}
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	08 95       	ret

000016f8 <_ZN7Helpers14base64_dec_lenEPci>:

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_dec_len(char* input, int16_t inputLen) {
    16f8:	fc 01       	movw	r30, r24
    16fa:	e6 0f       	add	r30, r22
    16fc:	f7 1f       	adc	r31, r23
	int16_t i = 0;
	int16_t numEq = 0;
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
	for(i = inputLen - 1; input[i] == '='; i--) {
    1702:	82 91       	ld	r24, -Z
    1704:	8d 33       	cpi	r24, 0x3D	; 61
    1706:	19 f4       	brne	.+6      	; 0x170e <_ZN7Helpers14base64_dec_lenEPci+0x16>
		numEq++;
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_dec_len(char* input, int16_t inputLen) {
	int16_t i = 0;
	int16_t numEq = 0;
	for(i = inputLen - 1; input[i] == '='; i--) {
    170c:	fa cf       	rjmp	.-12     	; 0x1702 <_ZN7Helpers14base64_dec_lenEPci+0xa>
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq - 1;
    170e:	46 e0       	ldi	r20, 0x06	; 6
    1710:	46 9f       	mul	r20, r22
    1712:	c0 01       	movw	r24, r0
    1714:	47 9f       	mul	r20, r23
    1716:	90 0d       	add	r25, r0
    1718:	11 24       	eor	r1, r1
    171a:	97 fd       	sbrc	r25, 7
    171c:	07 96       	adiw	r24, 0x07	; 7
    171e:	43 e0       	ldi	r20, 0x03	; 3
    1720:	95 95       	asr	r25
    1722:	87 95       	ror	r24
    1724:	4a 95       	dec	r20
    1726:	e1 f7       	brne	.-8      	; 0x1720 <_ZN7Helpers14base64_dec_lenEPci+0x28>
    1728:	82 1b       	sub	r24, r18
    172a:	93 0b       	sbc	r25, r19
}
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	08 95       	ret

00001730 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1730:	dc 01       	movw	r26, r24
    1732:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1734:	80 81       	ld	r24, Z
    1736:	86 95       	lsr	r24
    1738:	86 95       	lsr	r24
    173a:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    173c:	80 81       	ld	r24, Z
    173e:	83 70       	andi	r24, 0x03	; 3
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	92 95       	swap	r25
    1744:	9f 70       	andi	r25, 0x0F	; 15
    1746:	20 e1       	ldi	r18, 0x10	; 16
    1748:	82 9f       	mul	r24, r18
    174a:	90 0d       	add	r25, r0
    174c:	11 24       	eor	r1, r1
    174e:	11 96       	adiw	r26, 0x01	; 1
    1750:	9c 93       	st	X, r25
    1752:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	9f 70       	andi	r25, 0x0F	; 15
    1758:	99 0f       	add	r25, r25
    175a:	99 0f       	add	r25, r25
    175c:	22 81       	ldd	r18, Z+2	; 0x02
    175e:	22 95       	swap	r18
    1760:	26 95       	lsr	r18
    1762:	26 95       	lsr	r18
    1764:	23 70       	andi	r18, 0x03	; 3
    1766:	92 0f       	add	r25, r18
    1768:	12 96       	adiw	r26, 0x02	; 2
    176a:	9c 93       	st	X, r25
    176c:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	8f 73       	andi	r24, 0x3F	; 63
    1772:	13 96       	adiw	r26, 0x03	; 3
    1774:	8c 93       	st	X, r24
    1776:	08 95       	ret

00001778 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1778:	6f 92       	push	r6
    177a:	7f 92       	push	r7
    177c:	8f 92       	push	r8
    177e:	9f 92       	push	r9
    1780:	af 92       	push	r10
    1782:	bf 92       	push	r11
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	27 97       	sbiw	r28, 0x07	; 7
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	6c 01       	movw	r12, r24
    17a6:	5b 01       	movw	r10, r22
    17a8:	3b 01       	movw	r6, r22
    17aa:	64 0e       	add	r6, r20
    17ac:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    17ae:	e1 2c       	mov	r14, r1
    17b0:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    17b2:	00 e0       	ldi	r16, 0x00	; 0
    17b4:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    17b6:	4e 01       	movw	r8, r28
    17b8:	85 e0       	ldi	r24, 0x05	; 5
    17ba:	88 0e       	add	r8, r24
    17bc:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    17be:	6a 14       	cp	r6, r10
    17c0:	7b 04       	cpc	r7, r11
    17c2:	49 f1       	breq	.+82     	; 0x1816 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    17c4:	c8 01       	movw	r24, r16
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	f5 01       	movw	r30, r10
    17ca:	21 91       	ld	r18, Z+
    17cc:	5f 01       	movw	r10, r30
    17ce:	f4 01       	movw	r30, r8
    17d0:	e0 0f       	add	r30, r16
    17d2:	f1 1f       	adc	r31, r17
    17d4:	20 83       	st	Z, r18
		if(i == 3) {
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	11 f0       	breq	.+4      	; 0x17e0 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    17dc:	8c 01       	movw	r16, r24
    17de:	ef cf       	rjmp	.-34     	; 0x17be <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    17e0:	b4 01       	movw	r22, r8
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 98 0b 	call	0x1730	; 0x1730 <_Z8a3_to_a4PhS_>
    17ea:	de 01       	movw	r26, r28
    17ec:	11 96       	adiw	r26, 0x01	; 1
    17ee:	c6 01       	movw	r24, r12
    17f0:	8e 0d       	add	r24, r14
    17f2:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    17f4:	ed 91       	ld	r30, X+
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	e0 53       	subi	r30, 0x30	; 48
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	24 91       	lpm	r18, Z
    17fe:	fc 01       	movw	r30, r24
    1800:	21 93       	st	Z+, r18
    1802:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1804:	a8 15       	cp	r26, r8
    1806:	b9 05       	cpc	r27, r9
    1808:	a9 f7       	brne	.-22     	; 0x17f4 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    180a:	f4 e0       	ldi	r31, 0x04	; 4
    180c:	ef 0e       	add	r14, r31
    180e:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	e3 cf       	rjmp	.-58     	; 0x17dc <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1816:	01 15       	cp	r16, r1
    1818:	11 05       	cpc	r17, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    181c:	3c c0       	rjmp	.+120    	; 0x1896 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    181e:	be 01       	movw	r22, r28
    1820:	6b 5f       	subi	r22, 0xFB	; 251
    1822:	7f 4f       	sbci	r23, 0xFF	; 255
    1824:	fb 01       	movw	r30, r22
    1826:	e0 0f       	add	r30, r16
    1828:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    182a:	cf 01       	movw	r24, r30
    182c:	86 1b       	sub	r24, r22
    182e:	97 0b       	sbc	r25, r23
    1830:	03 97       	sbiw	r24, 0x03	; 3
    1832:	14 f4       	brge	.+4      	; 0x1838 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1834:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1836:	f9 cf       	rjmp	.-14     	; 0x182a <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1838:	ce 01       	movw	r24, r28
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	5c 01       	movw	r10, r24
    183e:	0e 94 98 0b 	call	0x1730	; 0x1730 <_Z8a3_to_a4PhS_>
    1842:	c6 01       	movw	r24, r12
    1844:	8e 0d       	add	r24, r14
    1846:	9f 1d       	adc	r25, r15
    1848:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    184a:	ed 91       	ld	r30, X+
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	e0 53       	subi	r30, 0x30	; 48
    1850:	fd 4f       	sbci	r31, 0xFD	; 253
    1852:	24 91       	lpm	r18, Z
    1854:	fc 01       	movw	r30, r24
    1856:	21 93       	st	Z+, r18
    1858:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    185a:	9d 01       	movw	r18, r26
    185c:	2a 19       	sub	r18, r10
    185e:	3b 09       	sbc	r19, r11
    1860:	02 17       	cp	r16, r18
    1862:	13 07       	cpc	r17, r19
    1864:	94 f7       	brge	.-28     	; 0x184a <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1866:	ff ef       	ldi	r31, 0xFF	; 255
    1868:	ef 1a       	sub	r14, r31
    186a:	ff 0a       	sbc	r15, r31
    186c:	e0 0e       	add	r14, r16
    186e:	f1 1e       	adc	r15, r17
    1870:	f6 01       	movw	r30, r12
    1872:	ee 0d       	add	r30, r14
    1874:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1876:	0c 19       	sub	r16, r12
    1878:	1d 09       	sbc	r17, r13
    187a:	0e 19       	sub	r16, r14
    187c:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	7f 01       	movw	r14, r30
    1882:	ec 18       	sub	r14, r12
    1884:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1886:	98 01       	movw	r18, r16
    1888:	2e 0f       	add	r18, r30
    188a:	3f 1f       	adc	r19, r31
    188c:	23 30       	cpi	r18, 0x03	; 3
    188e:	31 05       	cpc	r19, r1
    1890:	14 f4       	brge	.+4      	; 0x1896 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1892:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1894:	f5 cf       	rjmp	.-22     	; 0x1880 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1896:	f6 01       	movw	r30, r12
    1898:	ee 0d       	add	r30, r14
    189a:	ff 1d       	adc	r31, r15
    189c:	10 82       	st	Z, r1
	
	return encLen;
}
    189e:	c7 01       	movw	r24, r14
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	27 96       	adiw	r28, 0x07	; 7
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	9f 90       	pop	r9
    18c4:	8f 90       	pop	r8
    18c6:	7f 90       	pop	r7
    18c8:	6f 90       	pop	r6
    18ca:	08 95       	ret

000018cc <_Z8a4_to_a3PhS_>:
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(uint8_t * a3, uint8_t * a4) {
    18cc:	dc 01       	movw	r26, r24
    18ce:	fb 01       	movw	r30, r22
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	90 73       	andi	r25, 0x30	; 48
    18d4:	92 95       	swap	r25
    18d6:	9f 70       	andi	r25, 0x0F	; 15
    18d8:	20 81       	ld	r18, Z
    18da:	22 0f       	add	r18, r18
    18dc:	22 0f       	add	r18, r18
    18de:	92 0f       	add	r25, r18
    18e0:	9c 93       	st	X, r25
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
    18e2:	92 81       	ldd	r25, Z+2	; 0x02
    18e4:	9c 73       	andi	r25, 0x3C	; 60
    18e6:	96 95       	lsr	r25
    18e8:	96 95       	lsr	r25
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	20 e1       	ldi	r18, 0x10	; 16
    18ee:	82 9f       	mul	r24, r18
    18f0:	90 0d       	add	r25, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	9c 93       	st	X, r25
    18f8:	11 97       	sbiw	r26, 0x01	; 1
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
    18fa:	92 81       	ldd	r25, Z+2	; 0x02
    18fc:	83 81       	ldd	r24, Z+3	; 0x03
    18fe:	20 e4       	ldi	r18, 0x40	; 64
    1900:	92 9f       	mul	r25, r18
    1902:	80 0d       	add	r24, r0
    1904:	11 24       	eor	r1, r1
    1906:	12 96       	adiw	r26, 0x02	; 2
    1908:	8c 93       	st	X, r24
    190a:	08 95       	ret

0000190c <_Z10b64_lookupc>:
}

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
    190c:	9f eb       	ldi	r25, 0xBF	; 191
    190e:	98 0f       	add	r25, r24
    1910:	9a 31       	cpi	r25, 0x1A	; 26
    1912:	90 f0       	brcs	.+36     	; 0x1938 <_Z10b64_lookupc+0x2c>
	if(c >='a' && c <='z') return c - 71;
    1914:	9f e9       	ldi	r25, 0x9F	; 159
    1916:	98 0f       	add	r25, r24
    1918:	9a 31       	cpi	r25, 0x1A	; 26
    191a:	10 f4       	brcc	.+4      	; 0x1920 <_Z10b64_lookupc+0x14>
    191c:	87 54       	subi	r24, 0x47	; 71
    191e:	08 95       	ret
	if(c >='0' && c <='9') return c + 4;
    1920:	90 ed       	ldi	r25, 0xD0	; 208
    1922:	98 0f       	add	r25, r24
    1924:	9a 30       	cpi	r25, 0x0A	; 10
    1926:	10 f4       	brcc	.+4      	; 0x192c <_Z10b64_lookupc+0x20>
    1928:	8c 5f       	subi	r24, 0xFC	; 252
    192a:	08 95       	ret
	if(c == '+') return 62;
    192c:	8b 32       	cpi	r24, 0x2B	; 43
    192e:	31 f0       	breq	.+12     	; 0x193c <_Z10b64_lookupc+0x30>
	if(c == '/') return 63;
    1930:	8f 32       	cpi	r24, 0x2F	; 47
    1932:	31 f0       	breq	.+12     	; 0x1940 <_Z10b64_lookupc+0x34>
	return -1;
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	08 95       	ret
    1938:	89 2f       	mov	r24, r25
    193a:	08 95       	ret

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
    193c:	8e e3       	ldi	r24, 0x3E	; 62
    193e:	08 95       	ret
	if(c == '/') return 63;
    1940:	8f e3       	ldi	r24, 0x3F	; 63
	return -1;
}
    1942:	08 95       	ret

00001944 <_ZN7Helpers13base64_decodeEPhPci>:
	
	return encLen;
}

/* Assumes input ends with a \0 */
int16_t Helpers::base64_decode(uint8_t * output, char* input, int16_t inputLen) {
    1944:	4f 92       	push	r4
    1946:	5f 92       	push	r5
    1948:	6f 92       	push	r6
    194a:	7f 92       	push	r7
    194c:	8f 92       	push	r8
    194e:	9f 92       	push	r9
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	27 97       	sbiw	r28, 0x07	; 7
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	3c 01       	movw	r6, r24
    1976:	7b 01       	movw	r14, r22
    1978:	2b 01       	movw	r4, r22
    197a:	44 0e       	add	r4, r20
    197c:	55 1e       	adc	r5, r21
	
	int16_t i = 0, j = 0;
	int16_t decLen = 0;
    197e:	c1 2c       	mov	r12, r1
    1980:	d1 2c       	mov	r13, r1
}

/* Assumes input ends with a \0 */
int16_t Helpers::base64_decode(uint8_t * output, char* input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1982:	00 e0       	ldi	r16, 0x00	; 0
    1984:	10 e0       	ldi	r17, 0x00	; 0
    1986:	5e 01       	movw	r10, r28
    1988:	85 e0       	ldi	r24, 0x05	; 5
    198a:	a8 0e       	add	r10, r24
    198c:	b1 1c       	adc	r11, r1
    198e:	4e 01       	movw	r8, r28
    1990:	98 e0       	ldi	r25, 0x08	; 8
    1992:	89 0e       	add	r8, r25
    1994:	91 1c       	adc	r9, r1
	int16_t decLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];


	while (inputLen--) {
    1996:	e4 14       	cp	r14, r4
    1998:	f5 04       	cpc	r15, r5
    199a:	a9 f1       	breq	.+106    	; 0x1a06 <_ZN7Helpers13base64_decodeEPhPci+0xc2>
		if(*input == '=') {
    199c:	f7 01       	movw	r30, r14
    199e:	21 91       	ld	r18, Z+
    19a0:	7f 01       	movw	r14, r30
    19a2:	2d 33       	cpi	r18, 0x3D	; 61
    19a4:	81 f1       	breq	.+96     	; 0x1a06 <_ZN7Helpers13base64_decodeEPhPci+0xc2>
			break;
		}

		a4[i++] = *(input++);
    19a6:	c8 01       	movw	r24, r16
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	e1 e0       	ldi	r30, 0x01	; 1
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	ec 0f       	add	r30, r28
    19b0:	fd 1f       	adc	r31, r29
    19b2:	e0 0f       	add	r30, r16
    19b4:	f1 1f       	adc	r31, r17
    19b6:	20 83       	st	Z, r18
		if (i == 4) {
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	91 05       	cpc	r25, r1
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <_ZN7Helpers13base64_decodeEPhPci+0x7e>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
    19be:	8c 01       	movw	r16, r24
    19c0:	ea cf       	rjmp	.-44     	; 0x1996 <_ZN7Helpers13base64_decodeEPhPci+0x52>
    19c2:	8e 01       	movw	r16, r28
    19c4:	0f 5f       	subi	r16, 0xFF	; 255
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
    19c8:	f8 01       	movw	r30, r16
    19ca:	80 81       	ld	r24, Z
    19cc:	0e 94 86 0c 	call	0x190c	; 0x190c <_Z10b64_lookupc>
    19d0:	f8 01       	movw	r30, r16
    19d2:	81 93       	st	Z+, r24
    19d4:	8f 01       	movw	r16, r30
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
    19d6:	ea 15       	cp	r30, r10
    19d8:	fb 05       	cpc	r31, r11
    19da:	b1 f7       	brne	.-20     	; 0x19c8 <_ZN7Helpers13base64_decodeEPhPci+0x84>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
    19dc:	be 01       	movw	r22, r28
    19de:	6f 5f       	subi	r22, 0xFF	; 255
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	c5 01       	movw	r24, r10
    19e4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_Z8a4_to_a3PhS_>
    19e8:	f5 01       	movw	r30, r10
    19ea:	d3 01       	movw	r26, r6
    19ec:	ac 0d       	add	r26, r12
    19ee:	bd 1d       	adc	r27, r13

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
    19f0:	81 91       	ld	r24, Z+
    19f2:	8d 93       	st	X+, r24
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
    19f4:	e8 15       	cp	r30, r8
    19f6:	f9 05       	cpc	r31, r9
    19f8:	d9 f7       	brne	.-10     	; 0x19f0 <_ZN7Helpers13base64_decodeEPhPci+0xac>
    19fa:	f3 e0       	ldi	r31, 0x03	; 3
    19fc:	cf 0e       	add	r12, r31
    19fe:	d1 1c       	adc	r13, r1
				output[decLen++] = a3[i];
			}
			i = 0;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	dc cf       	rjmp	.-72     	; 0x19be <_ZN7Helpers13base64_decodeEPhPci+0x7a>
		}
	}

	if (i) {
    1a06:	01 15       	cp	r16, r1
    1a08:	11 05       	cpc	r17, r1
    1a0a:	99 f1       	breq	.+102    	; 0x1a72 <_ZN7Helpers13base64_decodeEPhPci+0x12e>
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	5c 01       	movw	r10, r24
    1a12:	fc 01       	movw	r30, r24
    1a14:	e0 0f       	add	r30, r16
    1a16:	f1 1f       	adc	r31, r17
    1a18:	75 01       	movw	r14, r10
		for (j = i; j < 4; j++) {
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	8a 19       	sub	r24, r10
    1a1e:	9b 09       	sbc	r25, r11
    1a20:	04 97       	sbiw	r24, 0x04	; 4
    1a22:	14 f4       	brge	.+4      	; 0x1a28 <_ZN7Helpers13base64_decodeEPhPci+0xe4>
			a4[j] = '\0';
    1a24:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
    1a26:	f8 cf       	rjmp	.-16     	; 0x1a18 <_ZN7Helpers13base64_decodeEPhPci+0xd4>
    1a28:	4e 01       	movw	r8, r28
    1a2a:	95 e0       	ldi	r25, 0x05	; 5
    1a2c:	89 0e       	add	r8, r25
    1a2e:	91 1c       	adc	r9, r1
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
    1a30:	f7 01       	movw	r30, r14
    1a32:	80 81       	ld	r24, Z
    1a34:	0e 94 86 0c 	call	0x190c	; 0x190c <_Z10b64_lookupc>
    1a38:	f7 01       	movw	r30, r14
    1a3a:	81 93       	st	Z+, r24
    1a3c:	7f 01       	movw	r14, r30
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
    1a3e:	e8 15       	cp	r30, r8
    1a40:	f9 05       	cpc	r31, r9
    1a42:	b1 f7       	brne	.-20     	; 0x1a30 <_ZN7Helpers13base64_decodeEPhPci+0xec>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
    1a44:	b5 01       	movw	r22, r10
    1a46:	cf 01       	movw	r24, r30
    1a48:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_Z8a4_to_a3PhS_>
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	96 01       	movw	r18, r12
    1a50:	d3 01       	movw	r26, r6
    1a52:	ac 0d       	add	r26, r12
    1a54:	bd 1d       	adc	r27, r13

		for (j = 0; j < i - 1; j++) {
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	01 50       	subi	r16, 0x01	; 1
    1a5c:	11 09       	sbc	r17, r1
    1a5e:	6c 01       	movw	r12, r24
    1a60:	c2 0e       	add	r12, r18
    1a62:	d3 1e       	adc	r13, r19
    1a64:	80 17       	cp	r24, r16
    1a66:	91 07       	cpc	r25, r17
    1a68:	24 f4       	brge	.+8      	; 0x1a72 <_ZN7Helpers13base64_decodeEPhPci+0x12e>
			output[decLen++] = a3[j];
    1a6a:	41 91       	ld	r20, Z+
    1a6c:	4d 93       	st	X+, r20
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	f6 cf       	rjmp	.-20     	; 0x1a5e <_ZN7Helpers13base64_decodeEPhPci+0x11a>
			output[decLen++] = a3[j];
		}
	}
	//output[decLen] = '\0';
	return decLen;
}
    1a72:	c6 01       	movw	r24, r12
    1a74:	27 96       	adiw	r28, 0x07	; 7
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	bf 90       	pop	r11
    1a92:	af 90       	pop	r10
    1a94:	9f 90       	pop	r9
    1a96:	8f 90       	pop	r8
    1a98:	7f 90       	pop	r7
    1a9a:	6f 90       	pop	r6
    1a9c:	5f 90       	pop	r5
    1a9e:	4f 90       	pop	r4
    1aa0:	08 95       	ret

00001aa2 <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	2c 97       	sbiw	r28, 0x0c	; 12
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	08 2f       	mov	r16, r24
    1abc:	69 ec       	ldi	r22, 0xC9	; 201
    1abe:	73 e0       	ldi	r23, 0x03	; 3
    1ac0:	8f e8       	ldi	r24, 0x8F	; 143
    1ac2:	94 e0       	ldi	r25, 0x04	; 4
    1ac4:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ac8:	42 e0       	ldi	r20, 0x02	; 2
    1aca:	63 e0       	ldi	r22, 0x03	; 3
    1acc:	8c ea       	ldi	r24, 0xAC	; 172
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN13Adafruit_FONA5beginEhh>
    1ad4:	18 2f       	mov	r17, r24
    1ad6:	8d ef       	ldi	r24, 0xFD	; 253
    1ad8:	81 0f       	add	r24, r17
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	b8 f4       	brcc	.+46     	; 0x1b0c <_Z21ensureFonaInitialisedb+0x6a>
    1ade:	6e ea       	ldi	r22, 0xAE	; 174
    1ae0:	73 e0       	ldi	r23, 0x03	; 3
    1ae2:	8f e8       	ldi	r24, 0x8F	; 143
    1ae4:	94 e0       	ldi	r25, 0x04	; 4
    1ae6:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1aea:	66 e4       	ldi	r22, 0x46	; 70
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	8f e8       	ldi	r24, 0x8F	; 143
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    1af6:	61 2f       	mov	r22, r17
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	4a e0       	ldi	r20, 0x0A	; 10
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	8f e8       	ldi	r24, 0x8F	; 143
    1b00:	94 e0       	ldi	r25, 0x04	; 4
    1b02:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>
    1b06:	00 e0       	ldi	r16, 0x00	; 0
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	4d c0       	rjmp	.+154    	; 0x1ba6 <_Z21ensureFonaInitialisedb+0x104>
    1b0c:	84 ea       	ldi	r24, 0xA4	; 164
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN12RmMemManager11getModuleIdEv>
    1b14:	68 2f       	mov	r22, r24
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	68 5b       	subi	r22, 0xB8	; 184
    1b1a:	7e 4f       	sbci	r23, 0xFE	; 254
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	07 96       	adiw	r24, 0x07	; 7
    1b20:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN6StringC1EPKc>
    1b24:	be 01       	movw	r22, r28
    1b26:	69 5f       	subi	r22, 0xF9	; 249
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN6StringC1ERKS_>
    1b32:	be 01       	movw	r22, r28
    1b34:	6f 5f       	subi	r22, 0xFF	; 255
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8c ea       	ldi	r24, 0xAC	; 172
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN6StringD1Ev>
    1b48:	01 11       	cpse	r16, r1
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <_Z21ensureFonaInitialisedb+0xb0>
    1b4c:	0c ea       	ldi	r16, 0xAC	; 172
    1b4e:	12 e0       	ldi	r17, 0x02	; 2
    1b50:	26 c0       	rjmp	.+76     	; 0x1b9e <_Z21ensureFonaInitialisedb+0xfc>
    1b52:	69 e9       	ldi	r22, 0x99	; 153
    1b54:	73 e0       	ldi	r23, 0x03	; 3
    1b56:	8f e8       	ldi	r24, 0x8F	; 143
    1b58:	94 e0       	ldi	r25, 0x04	; 4
    1b5a:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	8c ea       	ldi	r24, 0xAC	; 172
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN13Adafruit_FONA10enableGPRSEb>
    1b68:	18 2f       	mov	r17, r24
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	81 0f       	add	r24, r17
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	68 f3       	brcs	.-38     	; 0x1b4c <_Z21ensureFonaInitialisedb+0xaa>
    1b72:	6e e7       	ldi	r22, 0x7E	; 126
    1b74:	73 e0       	ldi	r23, 0x03	; 3
    1b76:	8f e8       	ldi	r24, 0x8F	; 143
    1b78:	94 e0       	ldi	r25, 0x04	; 4
    1b7a:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1b7e:	66 e4       	ldi	r22, 0x46	; 70
    1b80:	71 e0       	ldi	r23, 0x01	; 1
    1b82:	8f e8       	ldi	r24, 0x8F	; 143
    1b84:	94 e0       	ldi	r25, 0x04	; 4
    1b86:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    1b8a:	61 2f       	mov	r22, r17
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	4a e0       	ldi	r20, 0x0A	; 10
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	8f e8       	ldi	r24, 0x8F	; 143
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>
    1b9a:	00 e0       	ldi	r16, 0x00	; 0
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	07 96       	adiw	r24, 0x07	; 7
    1ba2:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN6StringD1Ev>
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	2c 96       	adiw	r28, 0x0c	; 12
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	08 95       	ret

00001bbe <_Z15switchOffSystemv>:
    1bbe:	66 e5       	ldi	r22, 0x56	; 86
    1bc0:	71 e0       	ldi	r23, 0x01	; 1
    1bc2:	8f e8       	ldi	r24, 0x8F	; 143
    1bc4:	94 e0       	ldi	r25, 0x04	; 4
    1bc6:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	85 e0       	ldi	r24, 0x05	; 5
    1bce:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
    1bd2:	68 eb       	ldi	r22, 0xB8	; 184
    1bd4:	7b e0       	ldi	r23, 0x0B	; 11
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <delay>

00001bde <setup>:
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	85 e0       	ldi	r24, 0x05	; 5
    1be2:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <pinMode>
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	85 e0       	ldi	r24, 0x05	; 5
    1bea:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
    1bee:	68 eb       	ldi	r22, 0xB8	; 184
    1bf0:	7b e0       	ldi	r23, 0x0B	; 11
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
    1bfa:	61 e0       	ldi	r22, 0x01	; 1
    1bfc:	8d e0       	ldi	r24, 0x0D	; 13
    1bfe:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <pinMode>
    1c02:	26 e0       	ldi	r18, 0x06	; 6
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	55 e2       	ldi	r21, 0x25	; 37
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	8f e8       	ldi	r24, 0x8F	; 143
    1c0e:	94 e0       	ldi	r25, 0x04	; 4
    1c10:	0e 94 40 19 	call	0x3280	; 0x3280 <_ZN14HardwareSerial5beginEmh>
    1c14:	6e ed       	ldi	r22, 0xDE	; 222
    1c16:	73 e0       	ldi	r23, 0x03	; 3
    1c18:	8f e8       	ldi	r24, 0x8F	; 143
    1c1a:	94 e0       	ldi	r25, 0x04	; 4
    1c1c:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c20:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN13ExtendedTests20runExtendedTypesTestEv>
    1c24:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_Z15switchOffSystemv>

00001c28 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	2a 97       	sbiw	r28, 0x0a	; 10
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    1c3c:	6b e6       	ldi	r22, 0x6B	; 107
    1c3e:	73 e0       	ldi	r23, 0x03	; 3
    1c40:	8f e8       	ldi	r24, 0x8F	; 143
    1c42:	94 e0       	ldi	r25, 0x04	; 4
    1c44:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	1b 82       	std	Y+3, r1	; 0x03
    1c4e:	1a 82       	std	Y+2, r1	; 0x02
    1c50:	1d 82       	std	Y+5, r1	; 0x05
    1c52:	1c 82       	std	Y+4, r1	; 0x04
    1c54:	1f 82       	std	Y+7, r1	; 0x07
    1c56:	1e 82       	std	Y+6, r1	; 0x06
    1c58:	19 86       	std	Y+9, r1	; 0x09
    1c5a:	18 86       	std	Y+8, r1	; 0x08
    1c5c:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    1c5e:	be 01       	movw	r22, r28
    1c60:	6f 5f       	subi	r22, 0xFF	; 255
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	82 ea       	ldi	r24, 0xA2	; 162
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	2a 96       	adiw	r28, 0x0a	; 10
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <_Z8sendDatav+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <_Z8sendDatav+0x8>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    1c8c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	98 0f       	add	r25, r24
    1c94:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <_sendDataLoopCount>
	
	if (doInit) {
    1c98:	81 11       	cpse	r24, r1
    1c9a:	15 c0       	rjmp	.+42     	; 0x1cc6 <_Z8sendDatav+0x46>
	
		RM_LOGLN(F("Initialising module to send data"));
    1c9c:	6a e4       	ldi	r22, 0x4A	; 74
    1c9e:	73 e0       	ldi	r23, 0x03	; 3
    1ca0:	8f e8       	ldi	r24, 0x8F	; 143
    1ca2:	94 e0       	ldi	r25, 0x04	; 4
    1ca4:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_Z21ensureFonaInitialisedb>
    1cae:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <_sendDataFona+0x1>
    1cb2:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_sendDataFona>
	
		if (_sendDataFona == NULL)
    1cb6:	89 2b       	or	r24, r25
    1cb8:	f9 f0       	breq	.+62     	; 0x1cf8 <_Z8sendDatav+0x78>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    1cba:	6b e1       	ldi	r22, 0x1B	; 27
    1cbc:	73 e0       	ldi	r23, 0x03	; 3
    1cbe:	8f e8       	ldi	r24, 0x8F	; 143
    1cc0:	94 e0       	ldi	r25, 0x04	; 4
    1cc2:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    1cc6:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_sendDataLoopCount>
    1cca:	8c 33       	cpi	r24, 0x3C	; 60
    1ccc:	b9 f4       	brne	.+46     	; 0x1cfc <_Z8sendDatav+0x7c>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1cce:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_sendDataFona>
    1cd2:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_sendDataFona+0x1>
    1cd6:	0e 94 85 09 	call	0x130a	; 0x130a <_ZN13Adafruit_FONA7getRSSIEv>
    1cda:	69 83       	std	Y+1, r22	; 0x01
    1cdc:	7a 83       	std	Y+2, r23	; 0x02
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1cea:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <_sendDataLoopCount>
		_sendDataFona = NULL;
    1cee:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_sendDataFona+0x1>
    1cf2:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_sendDataFona>
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <_Z8sendDatav+0x7c>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <_Z8sendDatav+0x7e>
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1d0c:	68 ee       	ldi	r22, 0xE8	; 232
    1d0e:	73 e0       	ldi	r23, 0x03	; 3
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 43 1c 	call	0x3886	; 0x3886 <delay>
	++_timerCounter;
    1d18:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
    1d1c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x1>
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
    1d26:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    1d2a:	61 e1       	ldi	r22, 0x11	; 17
    1d2c:	73 e0       	ldi	r23, 0x03	; 3
    1d2e:	8f e8       	ldi	r24, 0x8F	; 143
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    1d36:	66 e4       	ldi	r22, 0x46	; 70
    1d38:	71 e0       	ldi	r23, 0x01	; 1
    1d3a:	8f e8       	ldi	r24, 0x8F	; 143
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
    1d3e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    1d42:	4a e0       	ldi	r20, 0x0A	; 10
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <_behaviour>
    1d4a:	8f e8       	ldi	r24, 0x8F	; 143
    1d4c:	94 e0       	ldi	r25, 0x04	; 4
    1d4e:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1d52:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_behaviour>
    1d56:	80 ff       	sbrs	r24, 0
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <loop+0x60>
		
		if (takeReadings())
    1d5a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_Z12takeReadingsv>
    1d5e:	88 23       	and	r24, r24
    1d60:	29 f0       	breq	.+10     	; 0x1d6c <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    1d62:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_behaviour>
    1d66:	8e 7f       	andi	r24, 0xFE	; 254
    1d68:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1d6c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_behaviour>
    1d70:	81 ff       	sbrs	r24, 1
    1d72:	09 c0       	rjmp	.+18     	; 0x1d86 <loop+0x7a>
		
		if (sendData())
    1d74:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_Z8sendDatav>
    1d78:	88 23       	and	r24, r24
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    1d7c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_behaviour>
    1d80:	8d 7f       	andi	r24, 0xFD	; 253
    1d82:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1d86:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_behaviour>
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <loop+0x86>
		
		switchOffSystem();
    1d8e:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_Z15switchOffSystemv>
    1d92:	08 95       	ret

00001d94 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	64 e0       	ldi	r22, 0x04	; 4
    1d98:	8c ea       	ldi	r24, 0xAC	; 172
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	84 ea       	ldi	r24, 0xA4	; 164
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	82 ea       	ldi	r24, 0xA2	; 162
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <_ZN13SensorManagerC1Eb>

00001db4 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1db4:	8a e3       	ldi	r24, 0x3A	; 58
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <__fona+0x1>
    1dbc:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__fona>
    1dc0:	81 ec       	ldi	r24, 0xC1	; 193
    1dc2:	93 e0       	ldi	r25, 0x03	; 3
    1dc4:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <_ZN6StringD1Ev>

00001dc8 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1dc8:	dc 01       	movw	r26, r24
    1dca:	ed 91       	ld	r30, X+
    1dcc:	fc 91       	ld	r31, X
    1dce:	01 90       	ld	r0, Z+
    1dd0:	f0 81       	ld	r31, Z
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	09 94       	ijmp

00001dd6 <_ZN12RmMemManagerC1Eb>:
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	11 82       	std	Z+1, r1	; 0x01
    1dda:	12 82       	std	Z+2, r1	; 0x02
    1ddc:	13 82       	std	Z+3, r1	; 0x03
    1dde:	14 82       	std	Z+4, r1	; 0x04
    1de0:	80 e8       	ldi	r24, 0x80	; 128
    1de2:	85 83       	std	Z+5, r24	; 0x05
    1de4:	86 83       	std	Z+6, r24	; 0x06
    1de6:	17 82       	std	Z+7, r1	; 0x07
    1de8:	60 83       	st	Z, r22
    1dea:	61 11       	cpse	r22, r1
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <_ZN12RmMemManagerC1Eb+0x20>
    1dee:	89 e3       	ldi	r24, 0x39	; 57
    1df0:	94 e0       	ldi	r25, 0x04	; 4
    1df2:	0c 94 bd 12 	jmp	0x257a	; 0x257a <_ZN7TwoWire5beginEv>
    1df6:	08 95       	ret

00001df8 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	eb 01       	movw	r28, r22
    1e06:	7b 01       	movw	r14, r22
    1e08:	e4 0e       	add	r14, r20
    1e0a:	f1 1c       	adc	r15, r1
    1e0c:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1e0e:	ce 15       	cp	r28, r14
    1e10:	df 05       	cpc	r29, r15
    1e12:	71 f1       	breq	.+92     	; 0x1e70 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1e14:	60 e5       	ldi	r22, 0x50	; 80
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	89 e3       	ldi	r24, 0x39	; 57
    1e1a:	94 e0       	ldi	r25, 0x04	; 4
    1e1c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1e20:	61 2f       	mov	r22, r17
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	89 e3       	ldi	r24, 0x39	; 57
    1e26:	94 e0       	ldi	r25, 0x04	; 4
    1e28:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1e2c:	b8 01       	movw	r22, r16
    1e2e:	77 27       	eor	r23, r23
    1e30:	89 e3       	ldi	r24, 0x39	; 57
    1e32:	94 e0       	ldi	r25, 0x04	; 4
    1e34:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1e38:	89 e3       	ldi	r24, 0x39	; 57
    1e3a:	94 e0       	ldi	r25, 0x04	; 4
    1e3c:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	60 e5       	ldi	r22, 0x50	; 80
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	89 e3       	ldi	r24, 0x39	; 57
    1e4a:	94 e0       	ldi	r25, 0x04	; 4
    1e4c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1e50:	89 e3       	ldi	r24, 0x39	; 57
    1e52:	94 e0       	ldi	r25, 0x04	; 4
    1e54:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN7TwoWire9availableEv>
    1e58:	89 2b       	or	r24, r25
    1e5a:	29 f0       	breq	.+10     	; 0x1e66 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1e5c:	89 e3       	ldi	r24, 0x39	; 57
    1e5e:	94 e0       	ldi	r25, 0x04	; 4
    1e60:	0e 94 f7 11 	call	0x23ee	; 0x23ee <_ZN7TwoWire4readEv>
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1e68:	89 93       	st	Y+, r24
    1e6a:	0f 5f       	subi	r16, 0xFF	; 255
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1e6e:	cf cf       	rjmp	.-98     	; 0x1e0e <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	08 95       	ret

00001e7e <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	1f 92       	push	r1
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	be 01       	movw	r22, r28
    1e8e:	6f 5f       	subi	r22, 0xFF	; 255
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_Z12internalReadjPhh>
	return value;
}
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <_ZN12RmMemManager18getUCharFromMemoryEj>

00001ea8 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	60 83       	st	Z, r22
    1eac:	08 95       	ret

00001eae <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	81 11       	cpse	r24, r1
    1eb4:	03 c0       	rjmp	.+6      	; 0x1ebc <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1eb6:	86 2f       	mov	r24, r22
    1eb8:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1ebc:	85 e0       	ldi	r24, 0x05	; 5
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	08 95       	ret

00001ec2 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1ec6:	81 81       	ldd	r24, Z+1	; 0x01
    1ec8:	8f 5f       	subi	r24, 0xFF	; 255
    1eca:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	12 96       	adiw	r26, 0x02	; 2
    1ed0:	9c 93       	st	X, r25
    1ed2:	8e 93       	st	-X, r24
    1ed4:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	2a e0       	ldi	r18, 0x0A	; 10
    1eda:	82 9f       	mul	r24, r18
    1edc:	c0 01       	movw	r24, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	16 96       	adiw	r26, 0x06	; 6
    1ee2:	9c 93       	st	X, r25
    1ee4:	8e 93       	st	-X, r24
    1ee6:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1ee8:	81 81       	ldd	r24, Z+1	; 0x01
    1eea:	67 e0       	ldi	r22, 0x07	; 7
    1eec:	0e 94 b7 20 	call	0x416e	; 0x416e <__udivmodqi4>
    1ef0:	89 2f       	mov	r24, r25
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	14 96       	adiw	r26, 0x04	; 4
    1ef6:	9c 93       	st	X, r25
    1ef8:	8e 93       	st	-X, r24
    1efa:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1efc:	81 81       	ldd	r24, Z+1	; 0x01
    1efe:	24 e6       	ldi	r18, 0x64	; 100
    1f00:	82 9f       	mul	r24, r18
    1f02:	c0 01       	movw	r24, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	18 96       	adiw	r26, 0x08	; 8
    1f08:	9c 93       	st	X, r25
    1f0a:	8e 93       	st	-X, r24
    1f0c:	17 97       	sbiw	r26, 0x07	; 7
    1f0e:	08 95       	ret

00001f10 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1f10:	af 92       	push	r10
    1f12:	bf 92       	push	r11
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	8c 01       	movw	r16, r24
    1f26:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1f28:	fc 01       	movw	r30, r24
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 23       	and	r24, r24
    1f2e:	21 f0       	breq	.+8      	; 0x1f38 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1f30:	c8 01       	movw	r24, r16
    1f32:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_ZN13SensorManager11getMockDataEP10SensorData>
    1f36:	1b c0       	rjmp	.+54     	; 0x1f6e <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1f38:	6e e0       	ldi	r22, 0x0E	; 14
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN13SensorManager16takeSampleAnalogEh>
    1f40:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1f42:	6f e0       	ldi	r22, 0x0F	; 15
    1f44:	c8 01       	movw	r24, r16
    1f46:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN13SensorManager16takeSampleAnalogEh>
    1f4a:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1f4c:	61 e1       	ldi	r22, 0x11	; 17
    1f4e:	c8 01       	movw	r24, r16
    1f50:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN13SensorManager16takeSampleAnalogEh>
    1f54:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1f56:	60 e1       	ldi	r22, 0x10	; 16
    1f58:	c8 01       	movw	r24, r16
    1f5a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    1f5e:	ba 82       	std	Y+2, r11	; 0x02
    1f60:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    1f62:	de 82       	std	Y+6, r13	; 0x06
    1f64:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    1f66:	fc 82       	std	Y+4, r15	; 0x04
    1f68:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    1f6a:	98 87       	std	Y+8, r25	; 0x08
    1f6c:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1f6e:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    1f84:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <_ZN7Helpers15printSensorDataEP10SensorData>

00001f88 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f88:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <twi_state>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <twi_sendStop>
    1f92:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <twi_inRepStart>
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	82 e1       	ldi	r24, 0x12	; 18
    1f9a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	83 e1       	ldi	r24, 0x13	; 19
    1fa2:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
    1fa6:	e9 eb       	ldi	r30, 0xB9	; 185
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8e 7f       	andi	r24, 0xFE	; 254
    1fae:	80 83       	st	Z, r24
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8d 7f       	andi	r24, 0xFD	; 253
    1fb4:	80 83       	st	Z, r24
    1fb6:	88 e4       	ldi	r24, 0x48	; 72
    1fb8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1fbc:	85 e4       	ldi	r24, 0x45	; 69
    1fbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1fc2:	08 95       	ret

00001fc4 <twi_readFrom>:
    1fc4:	41 32       	cpi	r20, 0x21	; 33
    1fc6:	08 f0       	brcs	.+2      	; 0x1fca <twi_readFrom+0x6>
    1fc8:	43 c0       	rjmp	.+134    	; 0x2050 <twi_readFrom+0x8c>
    1fca:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <twi_state>
    1fce:	91 11       	cpse	r25, r1
    1fd0:	fc cf       	rjmp	.-8      	; 0x1fca <twi_readFrom+0x6>
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <twi_state>
    1fd8:	20 93 36 04 	sts	0x0436, r18	; 0x800436 <twi_sendStop>
    1fdc:	2f ef       	ldi	r18, 0xFF	; 255
    1fde:	20 93 cb 03 	sts	0x03CB, r18	; 0x8003cb <twi_error>
    1fe2:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <twi_masterBufferIndex>
    1fe6:	24 0f       	add	r18, r20
    1fe8:	20 93 0f 04 	sts	0x040F, r18	; 0x80040f <twi_masterBufferLength>
    1fec:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <twi_slarw>
    1ff0:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <twi_slarw>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	89 2b       	or	r24, r25
    1ff8:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <twi_slarw>
    1ffc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <twi_inRepStart>
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	61 f4       	brne	.+24     	; 0x201c <twi_readFrom+0x58>
    2004:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <twi_inRepStart>
    2008:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <twi_slarw>
    200c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2010:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2014:	83 fd       	sbrc	r24, 3
    2016:	f8 cf       	rjmp	.-16     	; 0x2008 <twi_readFrom+0x44>
    2018:	85 ec       	ldi	r24, 0xC5	; 197
    201a:	01 c0       	rjmp	.+2      	; 0x201e <twi_readFrom+0x5a>
    201c:	85 ee       	ldi	r24, 0xE5	; 229
    201e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2022:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <twi_state>
    2026:	81 30       	cpi	r24, 0x01	; 1
    2028:	e1 f3       	breq	.-8      	; 0x2022 <twi_readFrom+0x5e>
    202a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <twi_masterBufferIndex>
    202e:	84 17       	cp	r24, r20
    2030:	10 f4       	brcc	.+4      	; 0x2036 <twi_readFrom+0x72>
    2032:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <twi_masterBufferIndex>
    2036:	a1 e1       	ldi	r26, 0x11	; 17
    2038:	b4 e0       	ldi	r27, 0x04	; 4
    203a:	96 2f       	mov	r25, r22
    203c:	fb 01       	movw	r30, r22
    203e:	8e 2f       	mov	r24, r30
    2040:	89 1b       	sub	r24, r25
    2042:	84 17       	cp	r24, r20
    2044:	18 f4       	brcc	.+6      	; 0x204c <twi_readFrom+0x88>
    2046:	8d 91       	ld	r24, X+
    2048:	81 93       	st	Z+, r24
    204a:	f9 cf       	rjmp	.-14     	; 0x203e <twi_readFrom+0x7a>
    204c:	84 2f       	mov	r24, r20
    204e:	08 95       	ret
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	08 95       	ret

00002054 <twi_writeTo>:
    2054:	0f 93       	push	r16
    2056:	41 32       	cpi	r20, 0x21	; 33
    2058:	08 f0       	brcs	.+2      	; 0x205c <twi_writeTo+0x8>
    205a:	4a c0       	rjmp	.+148    	; 0x20f0 <twi_writeTo+0x9c>
    205c:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <twi_state>
    2060:	91 11       	cpse	r25, r1
    2062:	fc cf       	rjmp	.-8      	; 0x205c <twi_writeTo+0x8>
    2064:	32 e0       	ldi	r19, 0x02	; 2
    2066:	30 93 38 04 	sts	0x0438, r19	; 0x800438 <twi_state>
    206a:	00 93 36 04 	sts	0x0436, r16	; 0x800436 <twi_sendStop>
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	30 93 cb 03 	sts	0x03CB, r19	; 0x8003cb <twi_error>
    2074:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <twi_masterBufferIndex>
    2078:	40 93 0f 04 	sts	0x040F, r20	; 0x80040f <twi_masterBufferLength>
    207c:	56 2f       	mov	r21, r22
    207e:	a1 e1       	ldi	r26, 0x11	; 17
    2080:	b4 e0       	ldi	r27, 0x04	; 4
    2082:	fb 01       	movw	r30, r22
    2084:	3e 2f       	mov	r19, r30
    2086:	35 1b       	sub	r19, r21
    2088:	34 17       	cp	r19, r20
    208a:	18 f4       	brcc	.+6      	; 0x2092 <twi_writeTo+0x3e>
    208c:	31 91       	ld	r19, Z+
    208e:	3d 93       	st	X+, r19
    2090:	f9 cf       	rjmp	.-14     	; 0x2084 <twi_writeTo+0x30>
    2092:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <twi_slarw>
    2096:	30 91 37 04 	lds	r19, 0x0437	; 0x800437 <twi_slarw>
    209a:	88 0f       	add	r24, r24
    209c:	83 2b       	or	r24, r19
    209e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <twi_slarw>
    20a2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <twi_inRepStart>
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	61 f4       	brne	.+24     	; 0x20c2 <twi_writeTo+0x6e>
    20aa:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <twi_inRepStart>
    20ae:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <twi_slarw>
    20b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20ba:	83 fd       	sbrc	r24, 3
    20bc:	f8 cf       	rjmp	.-16     	; 0x20ae <twi_writeTo+0x5a>
    20be:	85 ec       	ldi	r24, 0xC5	; 197
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <twi_writeTo+0x70>
    20c2:	85 ee       	ldi	r24, 0xE5	; 229
    20c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20c8:	22 23       	and	r18, r18
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <twi_writeTo+0x80>
    20cc:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <twi_state>
    20d0:	82 30       	cpi	r24, 0x02	; 2
    20d2:	d1 f3       	breq	.-12     	; 0x20c8 <twi_writeTo+0x74>
    20d4:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_error>
    20d8:	8f 3f       	cpi	r24, 0xFF	; 255
    20da:	79 f0       	breq	.+30     	; 0x20fa <twi_writeTo+0xa6>
    20dc:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_error>
    20e0:	80 32       	cpi	r24, 0x20	; 32
    20e2:	41 f0       	breq	.+16     	; 0x20f4 <twi_writeTo+0xa0>
    20e4:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_error>
    20e8:	80 33       	cpi	r24, 0x30	; 48
    20ea:	31 f0       	breq	.+12     	; 0x20f8 <twi_writeTo+0xa4>
    20ec:	94 e0       	ldi	r25, 0x04	; 4
    20ee:	05 c0       	rjmp	.+10     	; 0x20fa <twi_writeTo+0xa6>
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <twi_writeTo+0xa6>
    20f4:	92 e0       	ldi	r25, 0x02	; 2
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <twi_writeTo+0xa6>
    20f8:	93 e0       	ldi	r25, 0x03	; 3
    20fa:	89 2f       	mov	r24, r25
    20fc:	0f 91       	pop	r16
    20fe:	08 95       	ret

00002100 <twi_transmit>:
    2100:	40 91 ed 03 	lds	r20, 0x03ED	; 0x8003ed <twi_txBufferLength>
    2104:	26 2f       	mov	r18, r22
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	24 0f       	add	r18, r20
    210a:	31 1d       	adc	r19, r1
    210c:	21 32       	cpi	r18, 0x21	; 33
    210e:	31 05       	cpc	r19, r1
    2110:	dc f4       	brge	.+54     	; 0x2148 <twi_transmit+0x48>
    2112:	20 91 38 04 	lds	r18, 0x0438	; 0x800438 <twi_state>
    2116:	24 30       	cpi	r18, 0x04	; 4
    2118:	c9 f4       	brne	.+50     	; 0x214c <twi_transmit+0x4c>
    211a:	fc 01       	movw	r30, r24
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	86 17       	cp	r24, r22
    2122:	58 f4       	brcc	.+22     	; 0x213a <twi_transmit+0x3a>
    2124:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <twi_txBufferLength>
    2128:	21 91       	ld	r18, Z+
    212a:	dc 01       	movw	r26, r24
    212c:	a1 51       	subi	r26, 0x11	; 17
    212e:	bc 4f       	sbci	r27, 0xFC	; 252
    2130:	a3 0f       	add	r26, r19
    2132:	b1 1d       	adc	r27, r1
    2134:	2c 93       	st	X, r18
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	f3 cf       	rjmp	.-26     	; 0x2120 <twi_transmit+0x20>
    213a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <twi_txBufferLength>
    213e:	68 0f       	add	r22, r24
    2140:	60 93 ed 03 	sts	0x03ED, r22	; 0x8003ed <twi_txBufferLength>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	08 95       	ret
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	08 95       	ret
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	08 95       	ret

00002150 <twi_attachSlaveRxEvent>:
    2150:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <twi_onSlaveReceive+0x1>
    2154:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <twi_onSlaveReceive>
    2158:	08 95       	ret

0000215a <twi_attachSlaveTxEvent>:
    215a:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <twi_onSlaveTransmit+0x1>
    215e:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <twi_onSlaveTransmit>
    2162:	08 95       	ret

00002164 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2164:	85 ed       	ldi	r24, 0xD5	; 213
    2166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    216a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    216e:	84 fd       	sbrc	r24, 4
    2170:	fc cf       	rjmp	.-8      	; 0x216a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2172:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <twi_state>
    2176:	08 95       	ret

00002178 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2178:	85 ec       	ldi	r24, 0xC5	; 197
    217a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    217e:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <twi_state>
    2182:	08 95       	ret

00002184 <__vector_24>:
}

ISR(TWI_vect)
{
    2184:	1f 92       	push	r1
    2186:	0f 92       	push	r0
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	0f 92       	push	r0
    218c:	11 24       	eor	r1, r1
    218e:	2f 93       	push	r18
    2190:	3f 93       	push	r19
    2192:	4f 93       	push	r20
    2194:	5f 93       	push	r21
    2196:	6f 93       	push	r22
    2198:	7f 93       	push	r23
    219a:	8f 93       	push	r24
    219c:	9f 93       	push	r25
    219e:	af 93       	push	r26
    21a0:	bf 93       	push	r27
    21a2:	ef 93       	push	r30
    21a4:	ff 93       	push	r31
  switch(TW_STATUS){
    21a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    21aa:	88 7f       	andi	r24, 0xF8	; 248
    21ac:	80 36       	cpi	r24, 0x60	; 96
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <__vector_24+0x2e>
    21b0:	9e c0       	rjmp	.+316    	; 0x22ee <__vector_24+0x16a>
    21b2:	78 f5       	brcc	.+94     	; 0x2212 <__vector_24+0x8e>
    21b4:	88 32       	cpi	r24, 0x28	; 40
    21b6:	09 f4       	brne	.+2      	; 0x21ba <__vector_24+0x36>
    21b8:	5d c0       	rjmp	.+186    	; 0x2274 <__vector_24+0xf0>
    21ba:	90 f4       	brcc	.+36     	; 0x21e0 <__vector_24+0x5c>
    21bc:	80 31       	cpi	r24, 0x10	; 16
    21be:	09 f4       	brne	.+2      	; 0x21c2 <__vector_24+0x3e>
    21c0:	56 c0       	rjmp	.+172    	; 0x226e <__vector_24+0xea>
    21c2:	38 f4       	brcc	.+14     	; 0x21d2 <__vector_24+0x4e>
    21c4:	88 23       	and	r24, r24
    21c6:	09 f4       	brne	.+2      	; 0x21ca <__vector_24+0x46>
    21c8:	f5 c0       	rjmp	.+490    	; 0x23b4 <__vector_24+0x230>
    21ca:	88 30       	cpi	r24, 0x08	; 8
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <__vector_24+0x4c>
    21ce:	4f c0       	rjmp	.+158    	; 0x226e <__vector_24+0xea>
    21d0:	f5 c0       	rjmp	.+490    	; 0x23bc <__vector_24+0x238>
    21d2:	88 31       	cpi	r24, 0x18	; 24
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <__vector_24+0x54>
    21d6:	4e c0       	rjmp	.+156    	; 0x2274 <__vector_24+0xf0>
    21d8:	80 32       	cpi	r24, 0x20	; 32
    21da:	09 f4       	brne	.+2      	; 0x21de <__vector_24+0x5a>
    21dc:	5f c0       	rjmp	.+190    	; 0x229c <__vector_24+0x118>
    21de:	ee c0       	rjmp	.+476    	; 0x23bc <__vector_24+0x238>
    21e0:	80 34       	cpi	r24, 0x40	; 64
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <__vector_24+0x62>
    21e4:	6a c0       	rjmp	.+212    	; 0x22ba <__vector_24+0x136>
    21e6:	58 f4       	brcc	.+22     	; 0x21fe <__vector_24+0x7a>
    21e8:	80 33       	cpi	r24, 0x30	; 48
    21ea:	09 f4       	brne	.+2      	; 0x21ee <__vector_24+0x6a>
    21ec:	57 c0       	rjmp	.+174    	; 0x229c <__vector_24+0x118>
    21ee:	88 33       	cpi	r24, 0x38	; 56
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <__vector_24+0x70>
    21f2:	e4 c0       	rjmp	.+456    	; 0x23bc <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21f4:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <twi_error>
      twi_releaseBus();
    21f8:	0e 94 bc 10 	call	0x2178	; 0x2178 <twi_releaseBus>
      break;
    21fc:	df c0       	rjmp	.+446    	; 0x23bc <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21fe:	80 35       	cpi	r24, 0x50	; 80
    2200:	09 f4       	brne	.+2      	; 0x2204 <__vector_24+0x80>
    2202:	4f c0       	rjmp	.+158    	; 0x22a2 <__vector_24+0x11e>
    2204:	88 35       	cpi	r24, 0x58	; 88
    2206:	09 f4       	brne	.+2      	; 0x220a <__vector_24+0x86>
    2208:	5d c0       	rjmp	.+186    	; 0x22c4 <__vector_24+0x140>
    220a:	88 34       	cpi	r24, 0x48	; 72
    220c:	09 f0       	breq	.+2      	; 0x2210 <__vector_24+0x8c>
    220e:	d6 c0       	rjmp	.+428    	; 0x23bc <__vector_24+0x238>
    2210:	d3 c0       	rjmp	.+422    	; 0x23b8 <__vector_24+0x234>
    2212:	88 39       	cpi	r24, 0x98	; 152
    2214:	09 f4       	brne	.+2      	; 0x2218 <__vector_24+0x94>
    2216:	c4 c0       	rjmp	.+392    	; 0x23a0 <__vector_24+0x21c>
    2218:	a8 f4       	brcc	.+42     	; 0x2244 <__vector_24+0xc0>
    221a:	88 37       	cpi	r24, 0x78	; 120
    221c:	09 f4       	brne	.+2      	; 0x2220 <__vector_24+0x9c>
    221e:	67 c0       	rjmp	.+206    	; 0x22ee <__vector_24+0x16a>
    2220:	38 f4       	brcc	.+14     	; 0x2230 <__vector_24+0xac>
    2222:	88 36       	cpi	r24, 0x68	; 104
    2224:	09 f4       	brne	.+2      	; 0x2228 <__vector_24+0xa4>
    2226:	63 c0       	rjmp	.+198    	; 0x22ee <__vector_24+0x16a>
    2228:	80 37       	cpi	r24, 0x70	; 112
    222a:	09 f4       	brne	.+2      	; 0x222e <__vector_24+0xaa>
    222c:	60 c0       	rjmp	.+192    	; 0x22ee <__vector_24+0x16a>
    222e:	c6 c0       	rjmp	.+396    	; 0x23bc <__vector_24+0x238>
    2230:	88 38       	cpi	r24, 0x88	; 136
    2232:	09 f4       	brne	.+2      	; 0x2236 <__vector_24+0xb2>
    2234:	b5 c0       	rjmp	.+362    	; 0x23a0 <__vector_24+0x21c>
    2236:	80 39       	cpi	r24, 0x90	; 144
    2238:	09 f4       	brne	.+2      	; 0x223c <__vector_24+0xb8>
    223a:	5f c0       	rjmp	.+190    	; 0x22fa <__vector_24+0x176>
    223c:	80 38       	cpi	r24, 0x80	; 128
    223e:	09 f0       	breq	.+2      	; 0x2242 <__vector_24+0xbe>
    2240:	bd c0       	rjmp	.+378    	; 0x23bc <__vector_24+0x238>
    2242:	5b c0       	rjmp	.+182    	; 0x22fa <__vector_24+0x176>
    2244:	80 3b       	cpi	r24, 0xB0	; 176
    2246:	09 f4       	brne	.+2      	; 0x224a <__vector_24+0xc6>
    2248:	83 c0       	rjmp	.+262    	; 0x2350 <__vector_24+0x1cc>
    224a:	38 f4       	brcc	.+14     	; 0x225a <__vector_24+0xd6>
    224c:	80 3a       	cpi	r24, 0xA0	; 160
    224e:	09 f4       	brne	.+2      	; 0x2252 <__vector_24+0xce>
    2250:	66 c0       	rjmp	.+204    	; 0x231e <__vector_24+0x19a>
    2252:	88 3a       	cpi	r24, 0xA8	; 168
    2254:	09 f4       	brne	.+2      	; 0x2258 <__vector_24+0xd4>
    2256:	7c c0       	rjmp	.+248    	; 0x2350 <__vector_24+0x1cc>
    2258:	b1 c0       	rjmp	.+354    	; 0x23bc <__vector_24+0x238>
    225a:	80 3c       	cpi	r24, 0xC0	; 192
    225c:	09 f4       	brne	.+2      	; 0x2260 <__vector_24+0xdc>
    225e:	a4 c0       	rjmp	.+328    	; 0x23a8 <__vector_24+0x224>
    2260:	88 3c       	cpi	r24, 0xC8	; 200
    2262:	09 f4       	brne	.+2      	; 0x2266 <__vector_24+0xe2>
    2264:	a1 c0       	rjmp	.+322    	; 0x23a8 <__vector_24+0x224>
    2266:	88 3b       	cpi	r24, 0xB8	; 184
    2268:	09 f4       	brne	.+2      	; 0x226c <__vector_24+0xe8>
    226a:	87 c0       	rjmp	.+270    	; 0x237a <__vector_24+0x1f6>
    226c:	a7 c0       	rjmp	.+334    	; 0x23bc <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    226e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <twi_slarw>
    2272:	10 c0       	rjmp	.+32     	; 0x2294 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2274:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <twi_masterBufferIndex>
    2278:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <twi_masterBufferLength>
    227c:	98 17       	cp	r25, r24
    227e:	70 f5       	brcc	.+92     	; 0x22dc <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2280:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <twi_masterBufferIndex>
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	8e 0f       	add	r24, r30
    2288:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <twi_masterBufferIndex>
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	ef 5e       	subi	r30, 0xEF	; 239
    2290:	fb 4f       	sbci	r31, 0xFB	; 251
    2292:	80 81       	ld	r24, Z
    2294:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2298:	85 ec       	ldi	r24, 0xC5	; 197
    229a:	83 c0       	rjmp	.+262    	; 0x23a2 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    229c:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <twi_error>
    22a0:	8b c0       	rjmp	.+278    	; 0x23b8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22a2:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <twi_masterBufferIndex>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	8e 0f       	add	r24, r30
    22aa:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <twi_masterBufferIndex>
    22ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	ef 5e       	subi	r30, 0xEF	; 239
    22b6:	fb 4f       	sbci	r31, 0xFB	; 251
    22b8:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22ba:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <twi_masterBufferIndex>
    22be:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <twi_masterBufferLength>
    22c2:	6b c0       	rjmp	.+214    	; 0x239a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22c4:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <twi_masterBufferIndex>
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	8e 0f       	add	r24, r30
    22cc:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <twi_masterBufferIndex>
    22d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	ef 5e       	subi	r30, 0xEF	; 239
    22d8:	fb 4f       	sbci	r31, 0xFB	; 251
    22da:	80 83       	st	Z, r24
	if (twi_sendStop)
    22dc:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <twi_sendStop>
    22e0:	81 11       	cpse	r24, r1
    22e2:	6a c0       	rjmp	.+212    	; 0x23b8 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22ea:	84 ea       	ldi	r24, 0xA4	; 164
    22ec:	5e c0       	rjmp	.+188    	; 0x23aa <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    22f4:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_rxBufferIndex>
    22f8:	cf cf       	rjmp	.-98     	; 0x2298 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22fa:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_rxBufferIndex>
    22fe:	80 32       	cpi	r24, 0x20	; 32
    2300:	08 f0       	brcs	.+2      	; 0x2304 <__vector_24+0x180>
    2302:	4e c0       	rjmp	.+156    	; 0x23a0 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2304:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <twi_rxBufferIndex>
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8e 0f       	add	r24, r30
    230c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_rxBufferIndex>
    2310:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	e3 53       	subi	r30, 0x33	; 51
    2318:	fc 4f       	sbci	r31, 0xFC	; 252
    231a:	80 83       	st	Z, r24
    231c:	bd cf       	rjmp	.-134    	; 0x2298 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    231e:	0e 94 bc 10 	call	0x2178	; 0x2178 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2322:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_rxBufferIndex>
    2326:	80 32       	cpi	r24, 0x20	; 32
    2328:	30 f4       	brcc	.+12     	; 0x2336 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    232a:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <twi_rxBufferIndex>
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	e3 53       	subi	r30, 0x33	; 51
    2332:	fc 4f       	sbci	r31, 0xFC	; 252
    2334:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2336:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <twi_rxBufferIndex>
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <twi_onSlaveReceive>
    2340:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <twi_onSlaveReceive+0x1>
    2344:	8d ec       	ldi	r24, 0xCD	; 205
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    234a:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_rxBufferIndex>
      break;
    234e:	36 c0       	rjmp	.+108    	; 0x23bc <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2350:	84 e0       	ldi	r24, 0x04	; 4
    2352:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2356:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    235a:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    235e:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <twi_onSlaveTransmit>
    2362:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <twi_onSlaveTransmit+0x1>
    2366:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2368:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <twi_txBufferLength>
    236c:	81 11       	cpse	r24, r1
    236e:	05 c0       	rjmp	.+10     	; 0x237a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2376:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    237a:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <twi_txBufferIndex>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	8e 0f       	add	r24, r30
    2382:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <twi_txBufferIndex>
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	e1 51       	subi	r30, 0x11	; 17
    238a:	fc 4f       	sbci	r31, 0xFC	; 252
    238c:	80 81       	ld	r24, Z
    238e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2392:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <twi_txBufferIndex>
    2396:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <twi_txBufferLength>
    239a:	98 17       	cp	r25, r24
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <__vector_24+0x21c>
    239e:	7c cf       	rjmp	.-264    	; 0x2298 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23a0:	85 e8       	ldi	r24, 0x85	; 133
    23a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    23a6:	0a c0       	rjmp	.+20     	; 0x23bc <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23a8:	85 ec       	ldi	r24, 0xC5	; 197
    23aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23ae:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <twi_state>
      break;
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23b4:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <twi_error>
      twi_stop();
    23b8:	0e 94 b2 10 	call	0x2164	; 0x2164 <twi_stop>
      break;
  }
}
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    23de:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    23e8:	82 1b       	sub	r24, r18
    23ea:	91 09       	sbc	r25, r1
    23ec:	08 95       	ret

000023ee <_ZN7TwoWire4readEv>:
    23ee:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    23f2:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    23f6:	98 17       	cp	r25, r24
    23f8:	50 f4       	brcc	.+20     	; 0x240e <_ZN7TwoWire4readEv+0x20>
    23fa:	e9 2f       	mov	r30, r25
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	e1 59       	subi	r30, 0x91	; 145
    2400:	fb 4f       	sbci	r31, 0xFB	; 251
    2402:	20 81       	ld	r18, Z
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	9f 5f       	subi	r25, 0xFF	; 255
    2408:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <_ZN7TwoWire4readEv+0x24>
    240e:	2f ef       	ldi	r18, 0xFF	; 255
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	c9 01       	movw	r24, r18
    2414:	08 95       	ret

00002416 <_ZN7TwoWire4peekEv>:
    2416:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    241a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    241e:	e8 17       	cp	r30, r24
    2420:	30 f4       	brcc	.+12     	; 0x242e <_ZN7TwoWire4peekEv+0x18>
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	e1 59       	subi	r30, 0x91	; 145
    2426:	fb 4f       	sbci	r31, 0xFB	; 251
    2428:	80 81       	ld	r24, Z
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	08 95       	ret
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	9f ef       	ldi	r25, 0xFF	; 255
    2432:	08 95       	ret

00002434 <_ZN7TwoWire5flushEv>:
    2434:	08 95       	ret

00002436 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
    243c:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <_ZN7TwoWire14user_onReceiveE>
    2440:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <_ZN7TwoWire14user_onReceiveE+0x1>
    2444:	30 97       	sbiw	r30, 0x00	; 0
    2446:	f1 f0       	breq	.+60     	; 0x2484 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2448:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    244c:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    2450:	98 17       	cp	r25, r24
    2452:	c0 f0       	brcs	.+48     	; 0x2484 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	29 2f       	mov	r18, r25
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	26 17       	cp	r18, r22
    245c:	37 07       	cpc	r19, r23
    245e:	54 f4       	brge	.+20     	; 0x2474 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2460:	de 01       	movw	r26, r28
    2462:	a2 0f       	add	r26, r18
    2464:	b3 1f       	adc	r27, r19
    2466:	4c 91       	ld	r20, X
    2468:	d9 01       	movw	r26, r18
    246a:	a1 59       	subi	r26, 0x91	; 145
    246c:	bb 4f       	sbci	r27, 0xFB	; 251
    246e:	4c 93       	st	X, r20
    2470:	9f 5f       	subi	r25, 0xFF	; 255
    2472:	f1 cf       	rjmp	.-30     	; 0x2456 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2474:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    2478:	60 93 6d 04 	sts	0x046D, r22	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    247c:	cb 01       	movw	r24, r22
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	09 94       	ijmp
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	08 95       	ret

0000248a <_ZN7TwoWire16onRequestServiceEv>:
    248a:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <_ZN7TwoWire14user_onRequestE>
    248e:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <_ZN7TwoWire14user_onRequestE+0x1>
    2492:	30 97       	sbiw	r30, 0x00	; 0
    2494:	29 f0       	breq	.+10     	; 0x24a0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2496:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZN7TwoWire13txBufferIndexE>
    249a:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    249e:	09 94       	ijmp
    24a0:	08 95       	ret

000024a2 <_ZN7TwoWire5writeEPKhj>:
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	7c 01       	movw	r14, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8a 01       	movw	r16, r20
    24b8:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <_ZN7TwoWire12transmittingE>
    24bc:	22 23       	and	r18, r18
    24be:	89 f0       	breq	.+34     	; 0x24e2 <_ZN7TwoWire5writeEPKhj+0x40>
    24c0:	eb 01       	movw	r28, r22
    24c2:	6b 01       	movw	r12, r22
    24c4:	c4 0e       	add	r12, r20
    24c6:	d5 1e       	adc	r13, r21
    24c8:	cc 15       	cp	r28, r12
    24ca:	dd 05       	cpc	r29, r13
    24cc:	69 f0       	breq	.+26     	; 0x24e8 <_ZN7TwoWire5writeEPKhj+0x46>
    24ce:	69 91       	ld	r22, Y+
    24d0:	d7 01       	movw	r26, r14
    24d2:	ed 91       	ld	r30, X+
    24d4:	fc 91       	ld	r31, X
    24d6:	01 90       	ld	r0, Z+
    24d8:	f0 81       	ld	r31, Z
    24da:	e0 2d       	mov	r30, r0
    24dc:	c7 01       	movw	r24, r14
    24de:	09 95       	icall
    24e0:	f3 cf       	rjmp	.-26     	; 0x24c8 <_ZN7TwoWire5writeEPKhj+0x26>
    24e2:	64 2f       	mov	r22, r20
    24e4:	0e 94 80 10 	call	0x2100	; 0x2100 <twi_transmit>
    24e8:	c8 01       	movw	r24, r16
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	08 95       	ret

000024fc <_ZN7TwoWire5writeEh>:
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	1f 92       	push	r1
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	69 83       	std	Y+1, r22	; 0x01
    2508:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <_ZN7TwoWire12transmittingE>
    250c:	22 23       	and	r18, r18
    250e:	d1 f0       	breq	.+52     	; 0x2544 <_ZN7TwoWire5writeEh+0x48>
    2510:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    2514:	20 32       	cpi	r18, 0x20	; 32
    2516:	40 f0       	brcs	.+16     	; 0x2528 <_ZN7TwoWire5writeEh+0x2c>
    2518:	21 e0       	ldi	r18, 0x01	; 1
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	fc 01       	movw	r30, r24
    251e:	33 83       	std	Z+3, r19	; 0x03
    2520:	22 83       	std	Z+2, r18	; 0x02
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	15 c0       	rjmp	.+42     	; 0x2552 <_ZN7TwoWire5writeEh+0x56>
    2528:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN7TwoWire13txBufferIndexE>
    252c:	e8 2f       	mov	r30, r24
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	e4 5b       	subi	r30, 0xB4	; 180
    2532:	fb 4f       	sbci	r31, 0xFB	; 251
    2534:	99 81       	ldd	r25, Y+1	; 0x01
    2536:	90 83       	st	Z, r25
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_ZN7TwoWire13txBufferIndexE>
    253e:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    2542:	05 c0       	rjmp	.+10     	; 0x254e <_ZN7TwoWire5writeEh+0x52>
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	0e 94 80 10 	call	0x2100	; 0x2100 <twi_transmit>
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0f 90       	pop	r0
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <_ZN7TwoWireC1Ev>:
    255a:	fc 01       	movw	r30, r24
    255c:	13 82       	std	Z+3, r1	; 0x03
    255e:	12 82       	std	Z+2, r1	; 0x02
    2560:	88 ee       	ldi	r24, 0xE8	; 232
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	84 83       	std	Z+4, r24	; 0x04
    256a:	95 83       	std	Z+5, r25	; 0x05
    256c:	a6 83       	std	Z+6, r26	; 0x06
    256e:	b7 83       	std	Z+7, r27	; 0x07
    2570:	8b e6       	ldi	r24, 0x6B	; 107
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	08 95       	ret

0000257a <_ZN7TwoWire5beginEv>:
    257a:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    257e:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    2582:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZN7TwoWire13txBufferIndexE>
    2586:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    258a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <twi_init>
    258e:	85 e4       	ldi	r24, 0x45	; 69
    2590:	92 e1       	ldi	r25, 0x12	; 18
    2592:	0e 94 ad 10 	call	0x215a	; 0x215a <twi_attachSlaveTxEvent>
    2596:	8b e1       	ldi	r24, 0x1B	; 27
    2598:	92 e1       	ldi	r25, 0x12	; 18
    259a:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <twi_attachSlaveRxEvent>

0000259e <_ZN7TwoWire17beginTransmissionEh>:
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZN7TwoWire12transmittingE>
    25a4:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <_ZN7TwoWire9txAddressE>
    25a8:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZN7TwoWire13txBufferIndexE>
    25ac:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    25b0:	08 95       	ret

000025b2 <_ZN7TwoWire17beginTransmissionEi>:
    25b2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <_ZN7TwoWire17beginTransmissionEh>

000025b6 <_ZN7TwoWire15endTransmissionEh>:
    25b6:	0f 93       	push	r16
    25b8:	06 2f       	mov	r16, r22
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	40 91 4a 04 	lds	r20, 0x044A	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    25c0:	6c e4       	ldi	r22, 0x4C	; 76
    25c2:	74 e0       	ldi	r23, 0x04	; 4
    25c4:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <_ZN7TwoWire9txAddressE>
    25c8:	0e 94 2a 10 	call	0x2054	; 0x2054 <twi_writeTo>
    25cc:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZN7TwoWire13txBufferIndexE>
    25d0:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire14txBufferLengthE>
    25d4:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZN7TwoWire12transmittingE>
    25d8:	0f 91       	pop	r16
    25da:	08 95       	ret

000025dc <_ZN7TwoWire11requestFromEhhmhh>:
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	af 92       	push	r10
    25e6:	bf 92       	push	r11
    25e8:	cf 92       	push	r12
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	5c 01       	movw	r10, r24
    25f8:	f6 2e       	mov	r15, r22
    25fa:	d4 2f       	mov	r29, r20
    25fc:	28 01       	movw	r4, r16
    25fe:	39 01       	movw	r6, r18
    2600:	ee 20       	and	r14, r14
    2602:	21 f1       	breq	.+72     	; 0x264c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2604:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN7TwoWire17beginTransmissionEh>
    2608:	ce 2d       	mov	r28, r14
    260a:	c4 30       	cpi	r28, 0x04	; 4
    260c:	08 f0       	brcs	.+2      	; 0x2610 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    260e:	c3 e0       	ldi	r28, 0x03	; 3
    2610:	c1 50       	subi	r28, 0x01	; 1
    2612:	c0 f0       	brcs	.+48     	; 0x2644 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2614:	28 e0       	ldi	r18, 0x08	; 8
    2616:	c2 9f       	mul	r28, r18
    2618:	c0 01       	movw	r24, r0
    261a:	11 24       	eor	r1, r1
    261c:	a3 01       	movw	r20, r6
    261e:	92 01       	movw	r18, r4
    2620:	04 c0       	rjmp	.+8      	; 0x262a <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2622:	56 95       	lsr	r21
    2624:	47 95       	ror	r20
    2626:	37 95       	ror	r19
    2628:	27 95       	ror	r18
    262a:	8a 95       	dec	r24
    262c:	d2 f7       	brpl	.-12     	; 0x2622 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    262e:	ca 01       	movw	r24, r20
    2630:	b9 01       	movw	r22, r18
    2632:	d5 01       	movw	r26, r10
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	01 90       	ld	r0, Z+
    263a:	f0 81       	ld	r31, Z
    263c:	e0 2d       	mov	r30, r0
    263e:	c5 01       	movw	r24, r10
    2640:	09 95       	icall
    2642:	e6 cf       	rjmp	.-52     	; 0x2610 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	c5 01       	movw	r24, r10
    2648:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN7TwoWire15endTransmissionEh>
    264c:	4d 2f       	mov	r20, r29
    264e:	d1 32       	cpi	r29, 0x21	; 33
    2650:	08 f0       	brcs	.+2      	; 0x2654 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	2c 2d       	mov	r18, r12
    2656:	6f e6       	ldi	r22, 0x6F	; 111
    2658:	74 e0       	ldi	r23, 0x04	; 4
    265a:	8f 2d       	mov	r24, r15
    265c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <twi_readFrom>
    2660:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13rxBufferIndexE>
    2664:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <_ZN7TwoWire14rxBufferLengthE>
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	7f 90       	pop	r7
    267c:	6f 90       	pop	r6
    267e:	5f 90       	pop	r5
    2680:	4f 90       	pop	r4
    2682:	08 95       	ret

00002684 <_ZN7TwoWire11requestFromEhhh>:
    2684:	cf 92       	push	r12
    2686:	ef 92       	push	r14
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	c2 2e       	mov	r12, r18
    268e:	e1 2c       	mov	r14, r1
    2690:	00 e0       	ldi	r16, 0x00	; 0
    2692:	10 e0       	ldi	r17, 0x00	; 0
    2694:	98 01       	movw	r18, r16
    2696:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN7TwoWire11requestFromEhhmhh>
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ef 90       	pop	r14
    26a0:	cf 90       	pop	r12
    26a2:	08 95       	ret

000026a4 <_ZN7TwoWire11requestFromEii>:
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	0c 94 42 13 	jmp	0x2684	; 0x2684 <_ZN7TwoWire11requestFromEhhh>

000026aa <_ZN7TwoWire15endTransmissionEv>:
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <_ZN7TwoWire15endTransmissionEh>

000026b0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    26b0:	89 e3       	ldi	r24, 0x39	; 57
    26b2:	94 e0       	ldi	r25, 0x04	; 4
    26b4:	0c 94 ad 12 	jmp	0x255a	; 0x255a <_ZN7TwoWireC1Ev>

000026b8 <_Z11writeMockSDP10SensorDatah>:


//RMonV3 types/flags test

#if IS_EXTENDED_TYPES_TEST == true
void writeMockSD(SensorData* iSd, uint8_t i){
    26b8:	fc 01       	movw	r30, r24
    26ba:	86 2f       	mov	r24, r22
	iSd->battVoltage = (i+1);
    26bc:	26 2f       	mov	r18, r22
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	a9 01       	movw	r20, r18
    26c2:	4f 5f       	subi	r20, 0xFF	; 255
    26c4:	5f 4f       	sbci	r21, 0xFF	; 255
    26c6:	52 83       	std	Z+2, r21	; 0x02
    26c8:	41 83       	std	Z+1, r20	; 0x01
	iSd->current = (i+1)*10;
    26ca:	9a e0       	ldi	r25, 0x0A	; 10
    26cc:	94 9f       	mul	r25, r20
    26ce:	b0 01       	movw	r22, r0
    26d0:	95 9f       	mul	r25, r21
    26d2:	70 0d       	add	r23, r0
    26d4:	11 24       	eor	r1, r1
    26d6:	74 83       	std	Z+4, r23	; 0x04
    26d8:	63 83       	std	Z+3, r22	; 0x03
	iSd->pVVoltage = (i+1)*100;
    26da:	94 e6       	ldi	r25, 0x64	; 100
    26dc:	94 9f       	mul	r25, r20
    26de:	b0 01       	movw	r22, r0
    26e0:	95 9f       	mul	r25, r21
    26e2:	70 0d       	add	r23, r0
    26e4:	11 24       	eor	r1, r1
    26e6:	76 83       	std	Z+6, r23	; 0x06
    26e8:	65 83       	std	Z+5, r22	; 0x05
	iSd->temperature = (i+1)+50;
    26ea:	2d 5c       	subi	r18, 0xCD	; 205
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	30 87       	std	Z+8, r19	; 0x08
    26f0:	27 83       	std	Z+7, r18	; 0x07
	iSd->errorChar = i%5==0?3:0;
    26f2:	65 e0       	ldi	r22, 0x05	; 5
    26f4:	0e 94 b7 20 	call	0x416e	; 0x416e <__udivmodqi4>
    26f8:	99 23       	and	r25, r25
    26fa:	11 f0       	breq	.+4      	; 0x2700 <_Z11writeMockSDP10SensorDatah+0x48>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <_Z11writeMockSDP10SensorDatah+0x4a>
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	81 87       	std	Z+9, r24	; 0x09
    2704:	08 95       	ret

00002706 <_Z21encodeBulkSignalsTesthPc>:
}

void encodeBulkSignalsTest(uint8_t COUNT, char* forWeb) {
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	2d 97       	sbiw	r28, 0x0d	; 13
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	08 2f       	mov	r16, r24
    2730:	5b 01       	movw	r10, r22
	gsm.addSensorData(&bulkSd[0], COUNT);
	
	//TODO: gsm.getPayloadLength() ? for char count?
	//char forWeb[100] {0};
	gsm.createPayload((uint8_t*)(&forWeb[0]), 100);//createEncodedPayload(&forWeb[0], 1000);
}
    2732:	cd b6       	in	r12, 0x3d	; 61
    2734:	de b6       	in	r13, 0x3e	; 62
	iSd->errorChar = i%5==0?3:0;
}

void encodeBulkSignalsTest(uint8_t COUNT, char* forWeb) {
	
	SensorData bulkSd[COUNT];
    2736:	2d b7       	in	r18, 0x3d	; 61
    2738:	3e b7       	in	r19, 0x3e	; 62
    273a:	8a e0       	ldi	r24, 0x0A	; 10
    273c:	08 9f       	mul	r16, r24
    273e:	20 19       	sub	r18, r0
    2740:	31 09       	sbc	r19, r1
    2742:	11 24       	eor	r1, r1
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	3e bf       	out	0x3e, r19	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	2d bf       	out	0x3d, r18	; 61
    274e:	2f 5f       	subi	r18, 0xFF	; 255
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	79 01       	movw	r14, r18
    2754:	80 2f       	mov	r24, r16
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    275a:	21 e0       	ldi	r18, 0x01	; 1
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	60 f0       	brcs	.+24     	; 0x2778 <_Z21encodeBulkSignalsTesthPc+0x72>
    2760:	20 83       	st	Z, r18
    2762:	12 82       	std	Z+2, r1	; 0x02
    2764:	11 82       	std	Z+1, r1	; 0x01
    2766:	14 82       	std	Z+4, r1	; 0x04
    2768:	13 82       	std	Z+3, r1	; 0x03
    276a:	16 82       	std	Z+6, r1	; 0x06
    276c:	15 82       	std	Z+5, r1	; 0x05
    276e:	10 86       	std	Z+8, r1	; 0x08
    2770:	17 82       	std	Z+7, r1	; 0x07
    2772:	11 86       	std	Z+9, r1	; 0x09
    2774:	3a 96       	adiw	r30, 0x0a	; 10
    2776:	f2 cf       	rjmp	.-28     	; 0x275c <_Z21encodeBulkSignalsTesthPc+0x56>
    2778:	47 01       	movw	r8, r14
    277a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<COUNT;i++){
    277c:	10 17       	cp	r17, r16
    277e:	49 f0       	breq	.+18     	; 0x2792 <_Z21encodeBulkSignalsTesthPc+0x8c>
		
		SensorData* iSd = &bulkSd[i];
		writeMockSD(iSd, i);
    2780:	61 2f       	mov	r22, r17
    2782:	c4 01       	movw	r24, r8
    2784:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z11writeMockSDP10SensorDatah>
}

void encodeBulkSignalsTest(uint8_t COUNT, char* forWeb) {
	
	SensorData bulkSd[COUNT];
	for(uint8_t i=0;i<COUNT;i++){
    2788:	1f 5f       	subi	r17, 0xFF	; 255
    278a:	8a e0       	ldi	r24, 0x0A	; 10
    278c:	88 0e       	add	r8, r24
    278e:	91 1c       	adc	r9, r1
    2790:	f5 cf       	rjmp	.-22     	; 0x277c <_Z21encodeBulkSignalsTesthPc+0x76>
	FONA_GET_RSSI rssi;
	rssi.rssi = 15;
	rssi.ber = 3;
	rssi.netReg = (FONA_GET_NETREG)(FONA_GET_NETREG::NETSTAT_4 | FONA_GET_NETREG::RESULT_CODE_1);
	
	GsmPayload gsm;
    2792:	ce 01       	movw	r24, r28
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN10GsmPayloadC1Ev>
	gsm.moduleId=33;
    279a:	81 e2       	ldi	r24, 0x21	; 33
    279c:	89 83       	std	Y+1, r24	; 0x01
	gsm.thisBootNumber = 1026;
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	94 e0       	ldi	r25, 0x04	; 4
    27a2:	9b 83       	std	Y+3, r25	; 0x03
    27a4:	8a 83       	std	Y+2, r24	; 0x02
	gsm.rssi = rssi;
    27a6:	8f e0       	ldi	r24, 0x0F	; 15
    27a8:	8c 83       	std	Y+4, r24	; 0x04
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	1e 82       	std	Y+6, r1	; 0x06
    27b0:	81 e1       	ldi	r24, 0x11	; 17
    27b2:	8f 83       	std	Y+7, r24	; 0x07
	gsm.addSensorData(&bulkSd[0], COUNT);
    27b4:	41 2f       	mov	r20, r17
    27b6:	b7 01       	movw	r22, r14
    27b8:	ce 01       	movw	r24, r28
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN10GsmPayload13addSensorDataEP10SensorDatah>
	
	//TODO: gsm.getPayloadLength() ? for char count?
	//char forWeb[100] {0};
	gsm.createPayload((uint8_t*)(&forWeb[0]), 100);//createEncodedPayload(&forWeb[0], 1000);
    27c0:	44 e6       	ldi	r20, 0x64	; 100
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	b5 01       	movw	r22, r10
    27c6:	ce 01       	movw	r24, r28
    27c8:	01 96       	adiw	r24, 0x01	; 1
    27ca:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN10GsmPayload13createPayloadEPhj>
}
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de be       	out	0x3e, r13	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd be       	out	0x3d, r12	; 61
    27d8:	2d 96       	adiw	r28, 0x0d	; 13
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	08 95       	ret

000027fe <_ZN13ExtendedTests20runExtendedTypesTestEv>:
#endif


void ExtendedTests::runExtendedTypesTest() {
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	cf 51       	subi	r28, 0x1F	; 31
    281c:	d1 40       	sbci	r29, 0x01	; 1
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2828:	cd b6       	in	r12, 0x3d	; 61
    282a:	de b6       	in	r13, 0x3e	; 62
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    282c:	c4 5e       	subi	r28, 0xE4	; 228
    282e:	de 4f       	sbci	r29, 0xFE	; 254
    2830:	18 82       	st	Y, r1
    2832:	cc 51       	subi	r28, 0x1C	; 28
    2834:	d1 40       	sbci	r29, 0x01	; 1
    2836:	c3 5e       	subi	r28, 0xE3	; 227
    2838:	de 4f       	sbci	r29, 0xFE	; 254
    283a:	18 82       	st	Y, r1
    283c:	cd 51       	subi	r28, 0x1D	; 29
    283e:	d1 40       	sbci	r29, 0x01	; 1
    2840:	c2 5e       	subi	r28, 0xE2	; 226
    2842:	de 4f       	sbci	r29, 0xFE	; 254
    2844:	18 82       	st	Y, r1
    2846:	ce 51       	subi	r28, 0x1E	; 30
    2848:	d1 40       	sbci	r29, 0x01	; 1
							(FONA_GET_NETREG::NETSTAT_5 |
							FONA_GET_NETREG::RESULT_CODE_1 |
							FONA_GET_NETREG::IS_ERROR);
	
	FONA_GET_RSSI result;
	result.netReg = regVal;
    284a:	85 e3       	ldi	r24, 0x35	; 53
    284c:	c1 5e       	subi	r28, 0xE1	; 225
    284e:	de 4f       	sbci	r29, 0xFE	; 254
    2850:	88 83       	st	Y, r24
    2852:	cf 51       	subi	r28, 0x1F	; 31
    2854:	d1 40       	sbci	r29, 0x01	; 1
					 
	RM_LOG(F("Netstat 5 + ResultCode 1 + Error 1="));
    2856:	61 ec       	ldi	r22, 0xC1	; 193
    2858:	77 e0       	ldi	r23, 0x07	; 7
    285a:	8f e8       	ldi	r24, 0x8F	; 143
    285c:	94 e0       	ldi	r25, 0x04	; 4
    285e:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(result.netReg, BIN);
    2862:	c1 5e       	subi	r28, 0xE1	; 225
    2864:	de 4f       	sbci	r29, 0xFE	; 254
    2866:	68 81       	ld	r22, Y
    2868:	cf 51       	subi	r28, 0x1F	; 31
    286a:	d1 40       	sbci	r29, 0x01	; 1
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	42 e0       	ldi	r20, 0x02	; 2
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	8f e8       	ldi	r24, 0x8F	; 143
    2874:	94 e0       	ldi	r25, 0x04	; 4
    2876:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>

	uint8_t memStoredVal = result.netReg;
    287a:	c1 5e       	subi	r28, 0xE1	; 225
    287c:	de 4f       	sbci	r29, 0xFE	; 254
    287e:	18 81       	ld	r17, Y
    2880:	cf 51       	subi	r28, 0x1F	; 31
    2882:	d1 40       	sbci	r29, 0x01	; 1
	FONA_GET_NETREG back = (FONA_GET_NETREG)memStoredVal;
	RM_LOG(F("Cast back after int storage val:"));
    2884:	60 ea       	ldi	r22, 0xA0	; 160
    2886:	77 e0       	ldi	r23, 0x07	; 7
    2888:	8f e8       	ldi	r24, 0x8F	; 143
    288a:	94 e0       	ldi	r25, 0x04	; 4
    288c:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(back, BIN);
    2890:	61 2f       	mov	r22, r17
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	42 e0       	ldi	r20, 0x02	; 2
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	8f e8       	ldi	r24, 0x8F	; 143
    289a:	94 e0       	ldi	r25, 0x04	; 4
    289c:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>
    28a0:	81 2f       	mov	r24, r17
    28a2:	8c 71       	andi	r24, 0x1C	; 28
	
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_0) RM_LOGLN(F("*** TEST FAIL @1 ***"));
    28a4:	19 f4       	brne	.+6      	; 0x28ac <_ZN13ExtendedTests20runExtendedTypesTestEv+0xae>
    28a6:	6b e8       	ldi	r22, 0x8B	; 139
    28a8:	77 e0       	ldi	r23, 0x07	; 7
    28aa:	13 c0       	rjmp	.+38     	; 0x28d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd4>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_1) RM_LOGLN(F("*** TEST FAIL @2 ***"));
    28ac:	84 30       	cpi	r24, 0x04	; 4
    28ae:	19 f4       	brne	.+6      	; 0x28b6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xb8>
    28b0:	66 e7       	ldi	r22, 0x76	; 118
    28b2:	77 e0       	ldi	r23, 0x07	; 7
    28b4:	0e c0       	rjmp	.+28     	; 0x28d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd4>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_2) RM_LOGLN(F("*** TEST FAIL @3 ***"));
    28b6:	88 30       	cpi	r24, 0x08	; 8
    28b8:	19 f4       	brne	.+6      	; 0x28c0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc2>
    28ba:	61 e6       	ldi	r22, 0x61	; 97
    28bc:	77 e0       	ldi	r23, 0x07	; 7
    28be:	09 c0       	rjmp	.+18     	; 0x28d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd4>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_3) RM_LOGLN(F("*** TEST FAIL @4 ***"));
    28c0:	8c 30       	cpi	r24, 0x0C	; 12
    28c2:	19 f4       	brne	.+6      	; 0x28ca <_ZN13ExtendedTests20runExtendedTypesTestEv+0xcc>
    28c4:	6c e4       	ldi	r22, 0x4C	; 76
    28c6:	77 e0       	ldi	r23, 0x07	; 7
    28c8:	04 c0       	rjmp	.+8      	; 0x28d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd4>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_4) RM_LOGLN(F("*** TEST FAIL @5 ***"));
    28ca:	80 31       	cpi	r24, 0x10	; 16
    28cc:	39 f4       	brne	.+14     	; 0x28dc <_ZN13ExtendedTests20runExtendedTypesTestEv+0xde>
    28ce:	67 e3       	ldi	r22, 0x37	; 55
    28d0:	77 e0       	ldi	r23, 0x07	; 7
    28d2:	8f e8       	ldi	r24, 0x8F	; 143
    28d4:	94 e0       	ldi	r25, 0x04	; 4
    28d6:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xe2>
	if (NETREG_ONLY_NETSTAT(back) != FONA_GET_NETREG::NETSTAT_5) RM_LOGLN(F("*** TEST FAIL @6 ***"));
    28dc:	84 31       	cpi	r24, 0x14	; 20
    28de:	31 f0       	breq	.+12     	; 0x28ec <_ZN13ExtendedTests20runExtendedTypesTestEv+0xee>
    28e0:	62 e2       	ldi	r22, 0x22	; 34
    28e2:	77 e0       	ldi	r23, 0x07	; 7
    28e4:	8f e8       	ldi	r24, 0x8F	; 143
    28e6:	94 e0       	ldi	r25, 0x04	; 4
    28e8:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
    28ec:	01 2f       	mov	r16, r17
    28ee:	03 70       	andi	r16, 0x03	; 3
	
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_0) RM_LOGLN(F("*** TEST FAIL @7 ***"));
    28f0:	39 f4       	brne	.+14     	; 0x2900 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x102>
    28f2:	6d e0       	ldi	r22, 0x0D	; 13
    28f4:	77 e0       	ldi	r23, 0x07	; 7
    28f6:	8f e8       	ldi	r24, 0x8F	; 143
    28f8:	94 e0       	ldi	r25, 0x04	; 4
    28fa:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x106>
	if (NETREG_ONLY_RESULT_CODE(back) != FONA_GET_NETREG::RESULT_CODE_1) RM_LOGLN(F("*** TEST FAIL @8 ***"));
    2900:	01 30       	cpi	r16, 0x01	; 1
    2902:	71 f0       	breq	.+28     	; 0x2920 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x122>
    2904:	68 ef       	ldi	r22, 0xF8	; 248
    2906:	76 e0       	ldi	r23, 0x06	; 6
    2908:	8f e8       	ldi	r24, 0x8F	; 143
    290a:	94 e0       	ldi	r25, 0x04	; 4
    290c:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_2) RM_LOGLN(F("*** TEST FAIL @9 ***"));
    2910:	02 30       	cpi	r16, 0x02	; 2
    2912:	31 f4       	brne	.+12     	; 0x2920 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x122>
    2914:	63 ee       	ldi	r22, 0xE3	; 227
    2916:	76 e0       	ldi	r23, 0x06	; 6
    2918:	8f e8       	ldi	r24, 0x8F	; 143
    291a:	94 e0       	ldi	r25, 0x04	; 4
    291c:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (NETREG_ONLY_ERROR(back) != FONA_GET_NETREG::IS_ERROR) RM_LOGLN(F("*** TEST FAIL @10 ***"));
    2920:	15 fd       	sbrc	r17, 5
    2922:	06 c0       	rjmp	.+12     	; 0x2930 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x132>
    2924:	6d ec       	ldi	r22, 0xCD	; 205
    2926:	76 e0       	ldi	r23, 0x06	; 6
    2928:	8f e8       	ldi	r24, 0x8F	; 143
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Print test
	RM_LOG(F("Test For Print Output:"));
    2930:	66 eb       	ldi	r22, 0xB6	; 182
    2932:	76 e0       	ldi	r23, 0x06	; 6
    2934:	8f e8       	ldi	r24, 0x8F	; 143
    2936:	94 e0       	ldi	r25, 0x04	; 4
    2938:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
	Helpers::printRSSI(&result);
    293c:	ce 01       	movw	r24, r28
    293e:	84 5e       	subi	r24, 0xE4	; 228
    2940:	9e 4f       	sbci	r25, 0xFE	; 254
    2942:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	RM_LOGLN(F("--------------------------"));
    2946:	6b e9       	ldi	r22, 0x9B	; 155
    2948:	76 e0       	ldi	r23, 0x06	; 6
    294a:	8f e8       	ldi	r24, 0x8F	; 143
    294c:	94 e0       	ldi	r25, 0x04	; 4
    294e:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	/******* ENCODING TESTS *********/
	
	//	** 1) Ensure this is avoided with lib:- **
	//	char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2952:	b1 2c       	mov	r11, r1
	
		uint8_t input[1];
		input[0] = i;
	
		char output2[10]{0};
    2954:	8e 01       	movw	r16, r28
    2956:	0b 59       	subi	r16, 0x9B	; 155
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	8a e0       	ldi	r24, 0x0A	; 10
    295c:	a8 2e       	mov	r10, r24
		Helpers::base64_encode(&output2[0], (uint8_t*)&input, 1);
	
		uint8_t output3[10]{0};
    295e:	9e 01       	movw	r18, r28
    2960:	2f 5f       	subi	r18, 0xFF	; 255
    2962:	3f 4f       	sbci	r19, 0xFF	; 255
    2964:	79 01       	movw	r14, r18
	//	** 1) Ensure this is avoided with lib:- **
	//	char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
	
		uint8_t input[1];
		input[0] = i;
    2966:	c7 53       	subi	r28, 0x37	; 55
    2968:	df 4f       	sbci	r29, 0xFF	; 255
    296a:	b8 82       	st	Y, r11
    296c:	c9 5c       	subi	r28, 0xC9	; 201
    296e:	d0 40       	sbci	r29, 0x00	; 0
	
		char output2[10]{0};
    2970:	f8 01       	movw	r30, r16
    2972:	2a 2d       	mov	r18, r10
    2974:	11 92       	st	Z+, r1
    2976:	2a 95       	dec	r18
    2978:	e9 f7       	brne	.-6      	; 0x2974 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x176>
		Helpers::base64_encode(&output2[0], (uint8_t*)&input, 1);
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	be 01       	movw	r22, r28
    2980:	67 53       	subi	r22, 0x37	; 55
    2982:	7f 4f       	sbci	r23, 0xFF	; 255
    2984:	c8 01       	movw	r24, r16
    2986:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN7Helpers13base64_encodeEPcPhi>
	
		uint8_t output3[10]{0};
    298a:	f7 01       	movw	r30, r14
    298c:	2a 2d       	mov	r18, r10
    298e:	11 92       	st	Z+, r1
    2990:	2a 95       	dec	r18
    2992:	e9 f7       	brne	.-6      	; 0x298e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x190>
		Helpers::base64_decode((uint8_t*)&output3, &output2[0], 10);
    2994:	4a e0       	ldi	r20, 0x0A	; 10
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	b8 01       	movw	r22, r16
    299a:	c7 01       	movw	r24, r14
    299c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7Helpers13base64_decodeEPhPci>
		
		if ((uint8_t)output3[0] != i) RM_LOGLN(F("*** TEST FAIL @ENCODING ***"));
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	b8 16       	cp	r11, r24
    29a4:	31 f0       	breq	.+12     	; 0x29b2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1b4>
    29a6:	6f e7       	ldi	r22, 0x7F	; 127
    29a8:	76 e0       	ldi	r23, 0x06	; 6
    29aa:	8f e8       	ldi	r24, 0x8F	; 143
    29ac:	94 e0       	ldi	r25, 0x04	; 4
    29ae:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		if (i==255) break; //max for unsigned byte
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	b3 16       	cp	r11, r19
    29b6:	11 f0       	breq	.+4      	; 0x29bc <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1be>
	
	/******* ENCODING TESTS *********/
	
	//	** 1) Ensure this is avoided with lib:- **
	//	char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    29b8:	b3 94       	inc	r11
    29ba:	d5 cf       	rjmp	.-86     	; 0x2966 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x168>
	}


	//	** 2) Check encoding/decoding for strings with their null terminating char \0 **
	int inputLen = strlen("hello");	//No@terminal char
	int encLen = Helpers::base64_enc_len(inputLen);
    29bc:	85 e0       	ldi	r24, 0x05	; 5
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN7Helpers14base64_enc_lenEi>
	if (encLen != strlen("aGVsbG8=")+1) RM_LOGLN(F("*** STR ENC FAIL @1 ***"));
    29c4:	09 97       	sbiw	r24, 0x09	; 9
    29c6:	31 f0       	breq	.+12     	; 0x29d4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1d6>
    29c8:	67 e6       	ldi	r22, 0x67	; 103
    29ca:	76 e0       	ldi	r23, 0x06	; 6
    29cc:	8f e8       	ldi	r24, 0x8F	; 143
    29ce:	94 e0       	ldi	r25, 0x04	; 4
    29d0:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	char strEncoded[20];
	Helpers::fillArray((uint8_t*)strEncoded, sizeof(strEncoded), 1); //Extra buffer of 1s to test no overspill
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	64 e1       	ldi	r22, 0x14	; 20
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	ce 01       	movw	r24, r28
    29dc:	83 52       	subi	r24, 0x23	; 35
    29de:	9f 4f       	sbci	r25, 0xFF	; 255
    29e0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN7Helpers9fillArrayEPhjh>
	
	int strEncodedLen = Helpers::base64_encode(strEncoded, (uint8_t*)"hello", inputLen);
    29e4:	45 e0       	ldi	r20, 0x05	; 5
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	67 e7       	ldi	r22, 0x77	; 119
    29ea:	71 e0       	ldi	r23, 0x01	; 1
    29ec:	ce 01       	movw	r24, r28
    29ee:	83 52       	subi	r24, 0x23	; 35
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN7Helpers13base64_encodeEPcPhi>
	if (strEncodedLen != strlen("aGVsbG8=")+1) RM_LOGLN(F("*** STR ENC FAIL @2 ***")); //Yes@terminal char
    29f6:	09 97       	sbiw	r24, 0x09	; 9
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x208>
    29fa:	6f e4       	ldi	r22, 0x4F	; 79
    29fc:	76 e0       	ldi	r23, 0x06	; 6
    29fe:	8f e8       	ldi	r24, 0x8F	; 143
    2a00:	94 e0       	ldi	r25, 0x04	; 4
    2a02:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ('=' != strEncoded[7]) RM_LOGLN(F("*** STR ENC FAIL @3 ***"));
    2a06:	cc 51       	subi	r28, 0x1C	; 28
    2a08:	df 4f       	sbci	r29, 0xFF	; 255
    2a0a:	88 81       	ld	r24, Y
    2a0c:	c4 5e       	subi	r28, 0xE4	; 228
    2a0e:	d0 40       	sbci	r29, 0x00	; 0
    2a10:	8d 33       	cpi	r24, 0x3D	; 61
    2a12:	31 f0       	breq	.+12     	; 0x2a20 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x222>
    2a14:	67 e3       	ldi	r22, 0x37	; 55
    2a16:	76 e0       	ldi	r23, 0x06	; 6
    2a18:	8f e8       	ldi	r24, 0x8F	; 143
    2a1a:	94 e0       	ldi	r25, 0x04	; 4
    2a1c:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (0 != strEncoded[8]) RM_LOGLN(F("*** STR ENC FAIL @4 ***"));
    2a20:	cb 51       	subi	r28, 0x1B	; 27
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	88 81       	ld	r24, Y
    2a26:	c5 5e       	subi	r28, 0xE5	; 229
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	88 23       	and	r24, r24
    2a2c:	31 f0       	breq	.+12     	; 0x2a3a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x23c>
    2a2e:	6f e1       	ldi	r22, 0x1F	; 31
    2a30:	76 e0       	ldi	r23, 0x06	; 6
    2a32:	8f e8       	ldi	r24, 0x8F	; 143
    2a34:	94 e0       	ldi	r25, 0x04	; 4
    2a36:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (1 != strEncoded[9]) RM_LOGLN(F("*** STR ENC FAIL @5 ***")); //May have overwritten
    2a3a:	ca 51       	subi	r28, 0x1A	; 26
    2a3c:	df 4f       	sbci	r29, 0xFF	; 255
    2a3e:	88 81       	ld	r24, Y
    2a40:	c6 5e       	subi	r28, 0xE6	; 230
    2a42:	d0 40       	sbci	r29, 0x00	; 0
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	31 f0       	breq	.+12     	; 0x2a54 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x256>
    2a48:	67 e0       	ldi	r22, 0x07	; 7
    2a4a:	76 e0       	ldi	r23, 0x06	; 6
    2a4c:	8f e8       	ldi	r24, 0x8F	; 143
    2a4e:	94 e0       	ldi	r25, 0x04	; 4
    2a50:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	int decodeStrInputLen = strlen("aGVsbG8=")+1;	//Yes@terminal char
	int expStrDecodingLen = Helpers::base64_dec_len("aGVsbG8=", decodeStrInputLen);
    2a54:	69 e0       	ldi	r22, 0x09	; 9
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	8d e7       	ldi	r24, 0x7D	; 125
    2a5a:	91 e0       	ldi	r25, 0x01	; 1
    2a5c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN7Helpers14base64_dec_lenEPci>
	if (expStrDecodingLen != strlen("hello")) RM_LOGLN(F("*** STR DEC FAIL @1 ***")); //No@terminal char
    2a60:	05 97       	sbiw	r24, 0x05	; 5
    2a62:	31 f0       	breq	.+12     	; 0x2a70 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x272>
    2a64:	6f ee       	ldi	r22, 0xEF	; 239
    2a66:	75 e0       	ldi	r23, 0x05	; 5
    2a68:	8f e8       	ldi	r24, 0x8F	; 143
    2a6a:	94 e0       	ldi	r25, 0x04	; 4
    2a6c:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	char strDecoded[20];
	Helpers::fillArray((uint8_t*)strDecoded, sizeof(strDecoded), 1); //Extra buffer of 1s to test no overspill
    2a70:	41 e0       	ldi	r20, 0x01	; 1
    2a72:	64 e1       	ldi	r22, 0x14	; 20
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	ce 01       	movw	r24, r28
    2a78:	87 53       	subi	r24, 0x37	; 55
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN7Helpers9fillArrayEPhjh>
	
	int strDecodedLen = Helpers::base64_decode((uint8_t*)strDecoded, "aGVsbG8=", decodeStrInputLen);
    2a80:	49 e0       	ldi	r20, 0x09	; 9
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	6d e7       	ldi	r22, 0x7D	; 125
    2a86:	71 e0       	ldi	r23, 0x01	; 1
    2a88:	ce 01       	movw	r24, r28
    2a8a:	87 53       	subi	r24, 0x37	; 55
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7Helpers13base64_decodeEPhPci>
	if (strDecodedLen != strlen("hello")) RM_LOGLN(F("*** STR DEC FAIL @2 ***")); //No@terminal char
    2a92:	05 97       	sbiw	r24, 0x05	; 5
    2a94:	31 f0       	breq	.+12     	; 0x2aa2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2a4>
    2a96:	67 ed       	ldi	r22, 0xD7	; 215
    2a98:	75 e0       	ldi	r23, 0x05	; 5
    2a9a:	8f e8       	ldi	r24, 0x8F	; 143
    2a9c:	94 e0       	ldi	r25, 0x04	; 4
    2a9e:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ('o' != strDecoded[4]) RM_LOGLN(F("*** STR DEC FAIL @3 ***"));
    2aa2:	c3 53       	subi	r28, 0x33	; 51
    2aa4:	df 4f       	sbci	r29, 0xFF	; 255
    2aa6:	88 81       	ld	r24, Y
    2aa8:	cd 5c       	subi	r28, 0xCD	; 205
    2aaa:	d0 40       	sbci	r29, 0x00	; 0
    2aac:	8f 36       	cpi	r24, 0x6F	; 111
    2aae:	31 f0       	breq	.+12     	; 0x2abc <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2be>
    2ab0:	6f eb       	ldi	r22, 0xBF	; 191
    2ab2:	75 e0       	ldi	r23, 0x05	; 5
    2ab4:	8f e8       	ldi	r24, 0x8F	; 143
    2ab6:	94 e0       	ldi	r25, 0x04	; 4
    2ab8:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (1 != strDecoded[5]) RM_LOGLN(F("*** STR DEC FAIL @4 ***")); //May have introduced \0, WRONG
    2abc:	c2 53       	subi	r28, 0x32	; 50
    2abe:	df 4f       	sbci	r29, 0xFF	; 255
    2ac0:	88 81       	ld	r24, Y
    2ac2:	ce 5c       	subi	r28, 0xCE	; 206
    2ac4:	d0 40       	sbci	r29, 0x00	; 0
    2ac6:	81 30       	cpi	r24, 0x01	; 1
    2ac8:	31 f0       	breq	.+12     	; 0x2ad6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2d8>
    2aca:	67 ea       	ldi	r22, 0xA7	; 167
    2acc:	75 e0       	ldi	r23, 0x05	; 5
    2ace:	8f e8       	ldi	r24, 0x8F	; 143
    2ad0:	94 e0       	ldi	r25, 0x04	; 4
    2ad2:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
	
	//	** 3) Single sensor-data round-trip numbers test **
	
	SensorData sd;			//size ~ 10 bytes
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	ce 5e       	subi	r28, 0xEE	; 238
    2ada:	de 4f       	sbci	r29, 0xFE	; 254
    2adc:	88 83       	st	Y, r24
    2ade:	c2 51       	subi	r28, 0x12	; 18
    2ae0:	d1 40       	sbci	r29, 0x01	; 1
    2ae2:	c7 5e       	subi	r28, 0xE7	; 231
    2ae4:	de 4f       	sbci	r29, 0xFE	; 254
    2ae6:	19 82       	std	Y+1, r1	; 0x01
    2ae8:	18 82       	st	Y, r1
    2aea:	c9 51       	subi	r28, 0x19	; 25
    2aec:	d1 40       	sbci	r29, 0x01	; 1
	sd.battVoltage = 20245; //Includes mV - e.g. 20.245V
    2aee:	85 e1       	ldi	r24, 0x15	; 21
    2af0:	9f e4       	ldi	r25, 0x4F	; 79
    2af2:	cd 5e       	subi	r28, 0xED	; 237
    2af4:	de 4f       	sbci	r29, 0xFE	; 254
    2af6:	99 83       	std	Y+1, r25	; 0x01
    2af8:	88 83       	st	Y, r24
    2afa:	c3 51       	subi	r28, 0x13	; 19
    2afc:	d1 40       	sbci	r29, 0x01	; 1
	sd.current = 65535;
    2afe:	8f ef       	ldi	r24, 0xFF	; 255
    2b00:	9f ef       	ldi	r25, 0xFF	; 255
    2b02:	cb 5e       	subi	r28, 0xEB	; 235
    2b04:	de 4f       	sbci	r29, 0xFE	; 254
    2b06:	99 83       	std	Y+1, r25	; 0x01
    2b08:	88 83       	st	Y, r24
    2b0a:	c5 51       	subi	r28, 0x15	; 21
    2b0c:	d1 40       	sbci	r29, 0x01	; 1
	sd.errorChar = 3;
    2b0e:	83 e0       	ldi	r24, 0x03	; 3
    2b10:	c5 5e       	subi	r28, 0xE5	; 229
    2b12:	de 4f       	sbci	r29, 0xFE	; 254
    2b14:	88 83       	st	Y, r24
    2b16:	cb 51       	subi	r28, 0x1B	; 27
    2b18:	d1 40       	sbci	r29, 0x01	; 1
	sd.pVVoltage = 64913;
    2b1a:	81 e9       	ldi	r24, 0x91	; 145
    2b1c:	9d ef       	ldi	r25, 0xFD	; 253
    2b1e:	c9 5e       	subi	r28, 0xE9	; 233
    2b20:	de 4f       	sbci	r29, 0xFE	; 254
    2b22:	99 83       	std	Y+1, r25	; 0x01
    2b24:	88 83       	st	Y, r24
    2b26:	c7 51       	subi	r28, 0x17	; 23
    2b28:	d1 40       	sbci	r29, 0x01	; 1
	sd.temperature = 0;
	Helpers::printSensorData(&sd);
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	8e 5e       	subi	r24, 0xEE	; 238
    2b2e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b30:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	uint8_t typicalMemUsage = sizeof("20245-65535-3-64913-0"); //23 bytes
	RM_LOG2("Basic int->str usage would be", typicalMemUsage);
    2b34:	66 e8       	ldi	r22, 0x86	; 134
    2b36:	71 e0       	ldi	r23, 0x01	; 1
    2b38:	8f e8       	ldi	r24, 0x8F	; 143
    2b3a:	94 e0       	ldi	r25, 0x04	; 4
    2b3c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2b40:	66 e4       	ldi	r22, 0x46	; 70
    2b42:	71 e0       	ldi	r23, 0x01	; 1
    2b44:	8f e8       	ldi	r24, 0x8F	; 143
    2b46:	94 e0       	ldi	r25, 0x04	; 4
    2b48:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2b4c:	4a e0       	ldi	r20, 0x0A	; 10
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	66 e1       	ldi	r22, 0x16	; 22
    2b52:	8f e8       	ldi	r24, 0x8F	; 143
    2b54:	94 e0       	ldi	r25, 0x04	; 4
    2b56:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
	
	// ENCODING
	char output[100]; //For testing, make a large buffer and check it doesn't overspill
	int len = Helpers::base64_encode(output, (uint8_t*)&sd, sizeof(SensorData));
    2b5a:	4a e0       	ldi	r20, 0x0A	; 10
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	be 01       	movw	r22, r28
    2b60:	6e 5e       	subi	r22, 0xEE	; 238
    2b62:	7e 4f       	sbci	r23, 0xFE	; 254
    2b64:	c8 01       	movw	r24, r16
    2b66:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN7Helpers13base64_encodeEPcPhi>
    2b6a:	5c 01       	movw	r10, r24
	int expectedLen = Helpers::base64_enc_len(sizeof(SensorData));
    2b6c:	8a e0       	ldi	r24, 0x0A	; 10
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN7Helpers14base64_enc_lenEi>
    2b74:	4c 01       	movw	r8, r24
	RM_LOG("Encoded result to be sent over Web is ");
    2b76:	64 ea       	ldi	r22, 0xA4	; 164
    2b78:	71 e0       	ldi	r23, 0x01	; 1
    2b7a:	8f e8       	ldi	r24, 0x8F	; 143
    2b7c:	94 e0       	ldi	r25, 0x04	; 4
    2b7e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
	RM_LOGLN(output);
    2b82:	b8 01       	movw	r22, r16
    2b84:	8f e8       	ldi	r24, 0x8F	; 143
    2b86:	94 e0       	ldi	r25, 0x04	; 4
    2b88:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
	RM_LOG("\t with size of ");
    2b8c:	6b ec       	ldi	r22, 0xCB	; 203
    2b8e:	71 e0       	ldi	r23, 0x01	; 1
    2b90:	8f e8       	ldi	r24, 0x8F	; 143
    2b92:	94 e0       	ldi	r25, 0x04	; 4
    2b94:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
	RM_LOG(strlen(output)+1);
    2b98:	f8 01       	movw	r30, r16
    2b9a:	01 90       	ld	r0, Z+
    2b9c:	00 20       	and	r0, r0
    2b9e:	e9 f7       	brne	.-6      	; 0x2b9a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x39c>
    2ba0:	bf 01       	movw	r22, r30
    2ba2:	60 1b       	sub	r22, r16
    2ba4:	71 0b       	sbc	r23, r17
    2ba6:	4a e0       	ldi	r20, 0x0A	; 10
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	8f e8       	ldi	r24, 0x8F	; 143
    2bac:	94 e0       	ldi	r25, 0x04	; 4
    2bae:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print5printEji>
	RM_LOGLN(" (including terminating '0')");
    2bb2:	6b ed       	ldi	r22, 0xDB	; 219
    2bb4:	71 e0       	ldi	r23, 0x01	; 1
    2bb6:	8f e8       	ldi	r24, 0x8F	; 143
    2bb8:	94 e0       	ldi	r25, 0x04	; 4
    2bba:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
	if ((strlen(output)+1) != len) RM_LOGLN(F("*** ENC LEN FAIL @1 ***"));
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	01 90       	ld	r0, Z+
    2bc2:	00 20       	and	r0, r0
    2bc4:	e9 f7       	brne	.-6      	; 0x2bc0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3c2>
    2bc6:	cf 01       	movw	r24, r30
    2bc8:	80 1b       	sub	r24, r16
    2bca:	91 0b       	sbc	r25, r17
    2bcc:	8a 15       	cp	r24, r10
    2bce:	9b 05       	cpc	r25, r11
    2bd0:	31 f0       	breq	.+12     	; 0x2bde <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3e0>
    2bd2:	6f e8       	ldi	r22, 0x8F	; 143
    2bd4:	75 e0       	ldi	r23, 0x05	; 5
    2bd6:	8f e8       	ldi	r24, 0x8F	; 143
    2bd8:	94 e0       	ldi	r25, 0x04	; 4
    2bda:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ((strlen(output)+1) != expectedLen) RM_LOGLN(F("*** ENC LEN FAIL @2 ***"));
    2bde:	f8 01       	movw	r30, r16
    2be0:	01 90       	ld	r0, Z+
    2be2:	00 20       	and	r0, r0
    2be4:	e9 f7       	brne	.-6      	; 0x2be0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3e2>
    2be6:	cf 01       	movw	r24, r30
    2be8:	80 1b       	sub	r24, r16
    2bea:	91 0b       	sbc	r25, r17
    2bec:	88 15       	cp	r24, r8
    2bee:	99 05       	cpc	r25, r9
    2bf0:	31 f0       	breq	.+12     	; 0x2bfe <_ZN13ExtendedTests20runExtendedTypesTestEv+0x400>
    2bf2:	67 e7       	ldi	r22, 0x77	; 119
    2bf4:	75 e0       	ldi	r23, 0x05	; 5
    2bf6:	8f e8       	ldi	r24, 0x8F	; 143
    2bf8:	94 e0       	ldi	r25, 0x04	; 4
    2bfa:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// DECODING
	int expDecodingLen = Helpers::base64_dec_len(output, len);
    2bfe:	b5 01       	movw	r22, r10
    2c00:	c8 01       	movw	r24, r16
    2c02:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN7Helpers14base64_dec_lenEPci>
    2c06:	4c 01       	movw	r8, r24
	RM_LOG2("Expected Decoding Len", expDecodingLen);
    2c08:	68 ef       	ldi	r22, 0xF8	; 248
    2c0a:	71 e0       	ldi	r23, 0x01	; 1
    2c0c:	8f e8       	ldi	r24, 0x8F	; 143
    2c0e:	94 e0       	ldi	r25, 0x04	; 4
    2c10:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c14:	66 e4       	ldi	r22, 0x46	; 70
    2c16:	71 e0       	ldi	r23, 0x01	; 1
    2c18:	8f e8       	ldi	r24, 0x8F	; 143
    2c1a:	94 e0       	ldi	r25, 0x04	; 4
    2c1c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c20:	4a e0       	ldi	r20, 0x0A	; 10
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	b4 01       	movw	r22, r8
    2c26:	8f e8       	ldi	r24, 0x8F	; 143
    2c28:	94 e0       	ldi	r25, 0x04	; 4
    2c2a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>
	RM_LOG2("For Output Of", output);
    2c2e:	6e e0       	ldi	r22, 0x0E	; 14
    2c30:	72 e0       	ldi	r23, 0x02	; 2
    2c32:	8f e8       	ldi	r24, 0x8F	; 143
    2c34:	94 e0       	ldi	r25, 0x04	; 4
    2c36:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c3a:	66 e4       	ldi	r22, 0x46	; 70
    2c3c:	71 e0       	ldi	r23, 0x01	; 1
    2c3e:	8f e8       	ldi	r24, 0x8F	; 143
    2c40:	94 e0       	ldi	r25, 0x04	; 4
    2c42:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c46:	b8 01       	movw	r22, r16
    2c48:	8f e8       	ldi	r24, 0x8F	; 143
    2c4a:	94 e0       	ldi	r25, 0x04	; 4
    2c4c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN5Print7printlnEPKc>
	RM_LOG2("With Length Of", len);
    2c50:	6c e1       	ldi	r22, 0x1C	; 28
    2c52:	72 e0       	ldi	r23, 0x02	; 2
    2c54:	8f e8       	ldi	r24, 0x8F	; 143
    2c56:	94 e0       	ldi	r25, 0x04	; 4
    2c58:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c5c:	66 e4       	ldi	r22, 0x46	; 70
    2c5e:	71 e0       	ldi	r23, 0x01	; 1
    2c60:	8f e8       	ldi	r24, 0x8F	; 143
    2c62:	94 e0       	ldi	r25, 0x04	; 4
    2c64:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c68:	4a e0       	ldi	r20, 0x0A	; 10
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	b5 01       	movw	r22, r10
    2c6e:	8f e8       	ldi	r24, 0x8F	; 143
    2c70:	94 e0       	ldi	r25, 0x04	; 4
    2c72:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>
	RM_LOG2("sizeof(SensorData)", sizeof(SensorData));
    2c76:	6b e2       	ldi	r22, 0x2B	; 43
    2c78:	72 e0       	ldi	r23, 0x02	; 2
    2c7a:	8f e8       	ldi	r24, 0x8F	; 143
    2c7c:	94 e0       	ldi	r25, 0x04	; 4
    2c7e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c82:	66 e4       	ldi	r22, 0x46	; 70
    2c84:	71 e0       	ldi	r23, 0x01	; 1
    2c86:	8f e8       	ldi	r24, 0x8F	; 143
    2c88:	94 e0       	ldi	r25, 0x04	; 4
    2c8a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2c8e:	4a e0       	ldi	r20, 0x0A	; 10
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	6a e0       	ldi	r22, 0x0A	; 10
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	8f e8       	ldi	r24, 0x8F	; 143
    2c98:	94 e0       	ldi	r25, 0x04	; 4
    2c9a:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print7printlnEji>
	
	SensorData sdAfter;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	c8 5f       	subi	r28, 0xF8	; 248
    2ca2:	de 4f       	sbci	r29, 0xFE	; 254
    2ca4:	88 83       	st	Y, r24
    2ca6:	c8 50       	subi	r28, 0x08	; 8
    2ca8:	d1 40       	sbci	r29, 0x01	; 1
    2caa:	c7 5f       	subi	r28, 0xF7	; 247
    2cac:	de 4f       	sbci	r29, 0xFE	; 254
    2cae:	19 82       	std	Y+1, r1	; 0x01
    2cb0:	18 82       	st	Y, r1
    2cb2:	c9 50       	subi	r28, 0x09	; 9
    2cb4:	d1 40       	sbci	r29, 0x01	; 1
    2cb6:	c5 5f       	subi	r28, 0xF5	; 245
    2cb8:	de 4f       	sbci	r29, 0xFE	; 254
    2cba:	19 82       	std	Y+1, r1	; 0x01
    2cbc:	18 82       	st	Y, r1
    2cbe:	cb 50       	subi	r28, 0x0B	; 11
    2cc0:	d1 40       	sbci	r29, 0x01	; 1
    2cc2:	c3 5f       	subi	r28, 0xF3	; 243
    2cc4:	de 4f       	sbci	r29, 0xFE	; 254
    2cc6:	19 82       	std	Y+1, r1	; 0x01
    2cc8:	18 82       	st	Y, r1
    2cca:	cd 50       	subi	r28, 0x0D	; 13
    2ccc:	d1 40       	sbci	r29, 0x01	; 1
    2cce:	c1 5f       	subi	r28, 0xF1	; 241
    2cd0:	de 4f       	sbci	r29, 0xFE	; 254
    2cd2:	19 82       	std	Y+1, r1	; 0x01
    2cd4:	18 82       	st	Y, r1
    2cd6:	cf 50       	subi	r28, 0x0F	; 15
    2cd8:	d1 40       	sbci	r29, 0x01	; 1
    2cda:	cf 5e       	subi	r28, 0xEF	; 239
    2cdc:	de 4f       	sbci	r29, 0xFE	; 254
    2cde:	18 82       	st	Y, r1
    2ce0:	c1 51       	subi	r28, 0x11	; 17
    2ce2:	d1 40       	sbci	r29, 0x01	; 1
	int lenAfter = Helpers::base64_decode((uint8_t*)&sdAfter, output, len);
    2ce4:	a5 01       	movw	r20, r10
    2ce6:	b8 01       	movw	r22, r16
    2ce8:	ce 01       	movw	r24, r28
    2cea:	88 5f       	subi	r24, 0xF8	; 248
    2cec:	9e 4f       	sbci	r25, 0xFE	; 254
    2cee:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7Helpers13base64_decodeEPhPci>
    2cf2:	8c 01       	movw	r16, r24
	RM_LOG2("Decoded result received over Web has size of ", lenAfter);
    2cf4:	6e e3       	ldi	r22, 0x3E	; 62
    2cf6:	72 e0       	ldi	r23, 0x02	; 2
    2cf8:	8f e8       	ldi	r24, 0x8F	; 143
    2cfa:	94 e0       	ldi	r25, 0x04	; 4
    2cfc:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2d00:	66 e4       	ldi	r22, 0x46	; 70
    2d02:	71 e0       	ldi	r23, 0x01	; 1
    2d04:	8f e8       	ldi	r24, 0x8F	; 143
    2d06:	94 e0       	ldi	r25, 0x04	; 4
    2d08:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2d0c:	4a e0       	ldi	r20, 0x0A	; 10
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	b8 01       	movw	r22, r16
    2d12:	8f e8       	ldi	r24, 0x8F	; 143
    2d14:	94 e0       	ldi	r25, 0x04	; 4
    2d16:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN5Print7printlnEii>
	Helpers::printSensorData(&sdAfter);
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	88 5f       	subi	r24, 0xF8	; 248
    2d1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d20:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	if (sizeof(SensorData) != lenAfter) RM_LOGLN(F("*** DEC LEN FAIL @1 ***"));
    2d24:	0a 30       	cpi	r16, 0x0A	; 10
    2d26:	11 05       	cpc	r17, r1
    2d28:	31 f0       	breq	.+12     	; 0x2d36 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x538>
    2d2a:	6f e5       	ldi	r22, 0x5F	; 95
    2d2c:	75 e0       	ldi	r23, 0x05	; 5
    2d2e:	8f e8       	ldi	r24, 0x8F	; 143
    2d30:	94 e0       	ldi	r25, 0x04	; 4
    2d32:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sizeof(SensorData) != expDecodingLen) RM_LOGLN(F("*** DEC LEN FAIL @2 ***"));
    2d36:	8a e0       	ldi	r24, 0x0A	; 10
    2d38:	88 16       	cp	r8, r24
    2d3a:	91 04       	cpc	r9, r1
    2d3c:	31 f0       	breq	.+12     	; 0x2d4a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x54c>
    2d3e:	67 e4       	ldi	r22, 0x47	; 71
    2d40:	75 e0       	ldi	r23, 0x05	; 5
    2d42:	8f e8       	ldi	r24, 0x8F	; 143
    2d44:	94 e0       	ldi	r25, 0x04	; 4
    2d46:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (sdAfter.battVoltage != sd.battVoltage) RM_LOGLN(F("*** CMP TEST FAIL @1 ***"));
    2d4a:	c7 5f       	subi	r28, 0xF7	; 247
    2d4c:	de 4f       	sbci	r29, 0xFE	; 254
    2d4e:	28 81       	ld	r18, Y
    2d50:	39 81       	ldd	r19, Y+1	; 0x01
    2d52:	c9 50       	subi	r28, 0x09	; 9
    2d54:	d1 40       	sbci	r29, 0x01	; 1
    2d56:	cd 5e       	subi	r28, 0xED	; 237
    2d58:	de 4f       	sbci	r29, 0xFE	; 254
    2d5a:	88 81       	ld	r24, Y
    2d5c:	99 81       	ldd	r25, Y+1	; 0x01
    2d5e:	c3 51       	subi	r28, 0x13	; 19
    2d60:	d1 40       	sbci	r29, 0x01	; 1
    2d62:	28 17       	cp	r18, r24
    2d64:	39 07       	cpc	r19, r25
    2d66:	31 f0       	breq	.+12     	; 0x2d74 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x576>
    2d68:	6e e2       	ldi	r22, 0x2E	; 46
    2d6a:	75 e0       	ldi	r23, 0x05	; 5
    2d6c:	8f e8       	ldi	r24, 0x8F	; 143
    2d6e:	94 e0       	ldi	r25, 0x04	; 4
    2d70:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.current != sd.current) RM_LOGLN(F("*** CMP TEST FAIL @2 ***"));
    2d74:	c5 5f       	subi	r28, 0xF5	; 245
    2d76:	de 4f       	sbci	r29, 0xFE	; 254
    2d78:	28 81       	ld	r18, Y
    2d7a:	39 81       	ldd	r19, Y+1	; 0x01
    2d7c:	cb 50       	subi	r28, 0x0B	; 11
    2d7e:	d1 40       	sbci	r29, 0x01	; 1
    2d80:	cb 5e       	subi	r28, 0xEB	; 235
    2d82:	de 4f       	sbci	r29, 0xFE	; 254
    2d84:	88 81       	ld	r24, Y
    2d86:	99 81       	ldd	r25, Y+1	; 0x01
    2d88:	c5 51       	subi	r28, 0x15	; 21
    2d8a:	d1 40       	sbci	r29, 0x01	; 1
    2d8c:	28 17       	cp	r18, r24
    2d8e:	39 07       	cpc	r19, r25
    2d90:	31 f0       	breq	.+12     	; 0x2d9e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x5a0>
    2d92:	65 e1       	ldi	r22, 0x15	; 21
    2d94:	75 e0       	ldi	r23, 0x05	; 5
    2d96:	8f e8       	ldi	r24, 0x8F	; 143
    2d98:	94 e0       	ldi	r25, 0x04	; 4
    2d9a:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.errorChar != sd.errorChar) RM_LOGLN(F("*** CMP TEST FAIL @3 ***"));
    2d9e:	cf 5e       	subi	r28, 0xEF	; 239
    2da0:	de 4f       	sbci	r29, 0xFE	; 254
    2da2:	98 81       	ld	r25, Y
    2da4:	c1 51       	subi	r28, 0x11	; 17
    2da6:	d1 40       	sbci	r29, 0x01	; 1
    2da8:	c5 5e       	subi	r28, 0xE5	; 229
    2daa:	de 4f       	sbci	r29, 0xFE	; 254
    2dac:	88 81       	ld	r24, Y
    2dae:	cb 51       	subi	r28, 0x1B	; 27
    2db0:	d1 40       	sbci	r29, 0x01	; 1
    2db2:	98 17       	cp	r25, r24
    2db4:	31 f0       	breq	.+12     	; 0x2dc2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x5c4>
    2db6:	6c ef       	ldi	r22, 0xFC	; 252
    2db8:	74 e0       	ldi	r23, 0x04	; 4
    2dba:	8f e8       	ldi	r24, 0x8F	; 143
    2dbc:	94 e0       	ldi	r25, 0x04	; 4
    2dbe:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.pVVoltage != sd.pVVoltage) RM_LOGLN(F("*** CMP TEST FAIL @4 ***"));
    2dc2:	c3 5f       	subi	r28, 0xF3	; 243
    2dc4:	de 4f       	sbci	r29, 0xFE	; 254
    2dc6:	28 81       	ld	r18, Y
    2dc8:	39 81       	ldd	r19, Y+1	; 0x01
    2dca:	cd 50       	subi	r28, 0x0D	; 13
    2dcc:	d1 40       	sbci	r29, 0x01	; 1
    2dce:	c9 5e       	subi	r28, 0xE9	; 233
    2dd0:	de 4f       	sbci	r29, 0xFE	; 254
    2dd2:	88 81       	ld	r24, Y
    2dd4:	99 81       	ldd	r25, Y+1	; 0x01
    2dd6:	c7 51       	subi	r28, 0x17	; 23
    2dd8:	d1 40       	sbci	r29, 0x01	; 1
    2dda:	28 17       	cp	r18, r24
    2ddc:	39 07       	cpc	r19, r25
    2dde:	31 f0       	breq	.+12     	; 0x2dec <_ZN13ExtendedTests20runExtendedTypesTestEv+0x5ee>
    2de0:	63 ee       	ldi	r22, 0xE3	; 227
    2de2:	74 e0       	ldi	r23, 0x04	; 4
    2de4:	8f e8       	ldi	r24, 0x8F	; 143
    2de6:	94 e0       	ldi	r25, 0x04	; 4
    2de8:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.temperature != sd.temperature) RM_LOGLN(F("*** CMP TEST FAIL @5 ***"));
    2dec:	c1 5f       	subi	r28, 0xF1	; 241
    2dee:	de 4f       	sbci	r29, 0xFE	; 254
    2df0:	28 81       	ld	r18, Y
    2df2:	39 81       	ldd	r19, Y+1	; 0x01
    2df4:	cf 50       	subi	r28, 0x0F	; 15
    2df6:	d1 40       	sbci	r29, 0x01	; 1
    2df8:	c7 5e       	subi	r28, 0xE7	; 231
    2dfa:	de 4f       	sbci	r29, 0xFE	; 254
    2dfc:	88 81       	ld	r24, Y
    2dfe:	99 81       	ldd	r25, Y+1	; 0x01
    2e00:	c9 51       	subi	r28, 0x19	; 25
    2e02:	d1 40       	sbci	r29, 0x01	; 1
    2e04:	28 17       	cp	r18, r24
    2e06:	39 07       	cpc	r19, r25
    2e08:	31 f0       	breq	.+12     	; 0x2e16 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x618>
    2e0a:	6a ec       	ldi	r22, 0xCA	; 202
    2e0c:	74 e0       	ldi	r23, 0x04	; 4
    2e0e:	8f e8       	ldi	r24, 0x8F	; 143
    2e10:	94 e0       	ldi	r25, 0x04	; 4
    2e12:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.dataType != sd.dataType) RM_LOGLN(F("*** CMP TEST FAIL @6 ***"));
    2e16:	c8 5f       	subi	r28, 0xF8	; 248
    2e18:	de 4f       	sbci	r29, 0xFE	; 254
    2e1a:	98 81       	ld	r25, Y
    2e1c:	c8 50       	subi	r28, 0x08	; 8
    2e1e:	d1 40       	sbci	r29, 0x01	; 1
    2e20:	ce 5e       	subi	r28, 0xEE	; 238
    2e22:	de 4f       	sbci	r29, 0xFE	; 254
    2e24:	88 81       	ld	r24, Y
    2e26:	c2 51       	subi	r28, 0x12	; 18
    2e28:	d1 40       	sbci	r29, 0x01	; 1
    2e2a:	98 17       	cp	r25, r24
    2e2c:	31 f0       	breq	.+12     	; 0x2e3a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x63c>
    2e2e:	61 eb       	ldi	r22, 0xB1	; 177
    2e30:	74 e0       	ldi	r23, 0x04	; 4
    2e32:	8f e8       	ldi	r24, 0x8F	; 143
    2e34:	94 e0       	ldi	r25, 0x04	; 4
    2e36:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	RM_LOGLN(F("--------------------------"));
    2e3a:	66 e9       	ldi	r22, 0x96	; 150
    2e3c:	74 e0       	ldi	r23, 0x04	; 4
    2e3e:	8f e8       	ldi	r24, 0x8F	; 143
    2e40:	94 e0       	ldi	r25, 0x04	; 4
    2e42:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//	** 4) Test a full gsm-payload incl. large sequence of them to ensure correctness **
	//TODO: MAX READINGS A CONSTANT?
	
	int COUNT=5;
	char forWeb[100] {0};
    2e46:	84 e6       	ldi	r24, 0x64	; 100
    2e48:	f7 01       	movw	r30, r14
    2e4a:	11 92       	st	Z+, r1
    2e4c:	8a 95       	dec	r24
    2e4e:	e9 f7       	brne	.-6      	; 0x2e4a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x64c>
	encodeBulkSignalsTest(COUNT, &forWeb[0]);
    2e50:	b7 01       	movw	r22, r14
    2e52:	85 e0       	ldi	r24, 0x05	; 5
    2e54:	0e 94 83 13 	call	0x2706	; 0x2706 <_Z21encodeBulkSignalsTesthPc>
	
	//	RM_LOGLN(F("GSM Payload To Be Sent Over Web:"));
	//	Helpers::printByteArray((uint8_t*)(&forWeb[0]), 20);
	
	uint8_t numReadings = GsmPayload::readNumOfSensorReadings(&forWeb[0]);
    2e58:	c7 01       	movw	r24, r14
    2e5a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN10GsmPayload23readNumOfSensorReadingsEPc>
    2e5e:	b8 2e       	mov	r11, r24
	
	if (numReadings != COUNT) RM_LOGLN(F("*** READ NUM FAIL ***"));
    2e60:	f5 e0       	ldi	r31, 0x05	; 5
    2e62:	8f 17       	cp	r24, r31
    2e64:	31 f0       	breq	.+12     	; 0x2e72 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x674>
    2e66:	60 e8       	ldi	r22, 0x80	; 128
    2e68:	74 e0       	ldi	r23, 0x04	; 4
    2e6a:	8f e8       	ldi	r24, 0x8F	; 143
    2e6c:	94 e0       	ldi	r25, 0x04	; 4
    2e6e:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>

	//Now parse it
	GsmPayload receivedPayload;
    2e72:	ce 01       	movw	r24, r28
    2e74:	8f 50       	subi	r24, 0x0F	; 15
    2e76:	9f 4f       	sbci	r25, 0xFF	; 255
    2e78:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN10GsmPayloadC1Ev>
	SensorData receivedSensorData[numReadings];
    2e7c:	2d b7       	in	r18, 0x3d	; 61
    2e7e:	3e b7       	in	r19, 0x3e	; 62
    2e80:	8a e0       	ldi	r24, 0x0A	; 10
    2e82:	b8 9e       	mul	r11, r24
    2e84:	20 19       	sub	r18, r0
    2e86:	31 09       	sbc	r19, r1
    2e88:	11 24       	eor	r1, r1
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	3e bf       	out	0x3e, r19	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	2d bf       	out	0x3d, r18	; 61
    2e94:	4d b7       	in	r20, 0x3d	; 61
    2e96:	5e b7       	in	r21, 0x3e	; 62
    2e98:	4f 5f       	subi	r20, 0xFF	; 255
    2e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9c:	8b 2d       	mov	r24, r11
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	fa 01       	movw	r30, r20
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	60 f0       	brcs	.+24     	; 0x2ec0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x6c2>
    2ea8:	20 83       	st	Z, r18
    2eaa:	12 82       	std	Z+2, r1	; 0x02
    2eac:	11 82       	std	Z+1, r1	; 0x01
    2eae:	14 82       	std	Z+4, r1	; 0x04
    2eb0:	13 82       	std	Z+3, r1	; 0x03
    2eb2:	16 82       	std	Z+6, r1	; 0x06
    2eb4:	15 82       	std	Z+5, r1	; 0x05
    2eb6:	10 86       	std	Z+8, r1	; 0x08
    2eb8:	17 82       	std	Z+7, r1	; 0x07
    2eba:	11 86       	std	Z+9, r1	; 0x09
    2ebc:	3a 96       	adiw	r30, 0x0a	; 10
    2ebe:	f2 cf       	rjmp	.-28     	; 0x2ea4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x6a6>
	receivedPayload.readPayload((uint8_t*)(&forWeb[0]), (SensorData*)&receivedSensorData);
    2ec0:	b7 01       	movw	r22, r14
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	8f 50       	subi	r24, 0x0F	; 15
    2ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec8:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN10GsmPayload11readPayloadEPhP10SensorData>
	
	RM_LOGLN(F("First Parsed Reading:"));
    2ecc:	6a e6       	ldi	r22, 0x6A	; 106
    2ece:	74 e0       	ldi	r23, 0x04	; 4
    2ed0:	8f e8       	ldi	r24, 0x8F	; 143
    2ed2:	94 e0       	ldi	r25, 0x04	; 4
    2ed4:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	SensorData* readOne = receivedPayload.getSensorData();
    2ed8:	ce 01       	movw	r24, r28
    2eda:	8f 50       	subi	r24, 0x0F	; 15
    2edc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ede:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10GsmPayload13getSensorDataEv>
    2ee2:	7c 01       	movw	r14, r24
	Helpers::printSensorData(readOne); //print the first
    2ee4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN7Helpers15printSensorDataEP10SensorData>
    2ee8:	87 01       	movw	r16, r14
	
	for(uint8_t i=0;i<numReadings;i++){
    2eea:	f1 2c       	mov	r15, r1
		
		SensorData expectedVal;
    2eec:	ee 24       	eor	r14, r14
    2eee:	e3 94       	inc	r14
	
	RM_LOGLN(F("First Parsed Reading:"));
	SensorData* readOne = receivedPayload.getSensorData();
	Helpers::printSensorData(readOne); //print the first
	
	for(uint8_t i=0;i<numReadings;i++){
    2ef0:	fb 14       	cp	r15, r11
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x6f8>
    2ef4:	e0 c0       	rjmp	.+448    	; 0x30b6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x8b8>
		
		SensorData expectedVal;
    2ef6:	c2 50       	subi	r28, 0x02	; 2
    2ef8:	df 4f       	sbci	r29, 0xFF	; 255
    2efa:	e8 82       	st	Y, r14
    2efc:	ce 5f       	subi	r28, 0xFE	; 254
    2efe:	d0 40       	sbci	r29, 0x00	; 0
    2f00:	c1 50       	subi	r28, 0x01	; 1
    2f02:	df 4f       	sbci	r29, 0xFF	; 255
    2f04:	19 82       	std	Y+1, r1	; 0x01
    2f06:	18 82       	st	Y, r1
    2f08:	cf 5f       	subi	r28, 0xFF	; 255
    2f0a:	d0 40       	sbci	r29, 0x00	; 0
    2f0c:	cf 5f       	subi	r28, 0xFF	; 255
    2f0e:	de 4f       	sbci	r29, 0xFE	; 254
    2f10:	19 82       	std	Y+1, r1	; 0x01
    2f12:	18 82       	st	Y, r1
    2f14:	c1 50       	subi	r28, 0x01	; 1
    2f16:	d1 40       	sbci	r29, 0x01	; 1
    2f18:	cd 5f       	subi	r28, 0xFD	; 253
    2f1a:	de 4f       	sbci	r29, 0xFE	; 254
    2f1c:	19 82       	std	Y+1, r1	; 0x01
    2f1e:	18 82       	st	Y, r1
    2f20:	c3 50       	subi	r28, 0x03	; 3
    2f22:	d1 40       	sbci	r29, 0x01	; 1
    2f24:	cb 5f       	subi	r28, 0xFB	; 251
    2f26:	de 4f       	sbci	r29, 0xFE	; 254
    2f28:	19 82       	std	Y+1, r1	; 0x01
    2f2a:	18 82       	st	Y, r1
    2f2c:	c5 50       	subi	r28, 0x05	; 5
    2f2e:	d1 40       	sbci	r29, 0x01	; 1
    2f30:	c9 5f       	subi	r28, 0xF9	; 249
    2f32:	de 4f       	sbci	r29, 0xFE	; 254
    2f34:	18 82       	st	Y, r1
    2f36:	c7 50       	subi	r28, 0x07	; 7
    2f38:	d1 40       	sbci	r29, 0x01	; 1
		SensorData* expectedValPtr=&expectedVal;
		writeMockSD(expectedValPtr, i);
    2f3a:	6f 2d       	mov	r22, r15
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	82 50       	subi	r24, 0x02	; 2
    2f40:	9f 4f       	sbci	r25, 0xFF	; 255
    2f42:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z11writeMockSDP10SensorDatah>
		
		SensorData* parsed = readOne + i;
		
		if (expectedValPtr->battVoltage != parsed->battVoltage) {RM_LOG2(F("*** BATT FAIL ***"), i);}
    2f46:	c1 50       	subi	r28, 0x01	; 1
    2f48:	df 4f       	sbci	r29, 0xFF	; 255
    2f4a:	28 81       	ld	r18, Y
    2f4c:	39 81       	ldd	r19, Y+1	; 0x01
    2f4e:	cf 5f       	subi	r28, 0xFF	; 255
    2f50:	d0 40       	sbci	r29, 0x00	; 0
    2f52:	f8 01       	movw	r30, r16
    2f54:	81 81       	ldd	r24, Z+1	; 0x01
    2f56:	92 81       	ldd	r25, Z+2	; 0x02
    2f58:	28 17       	cp	r18, r24
    2f5a:	39 07       	cpc	r19, r25
    2f5c:	99 f0       	breq	.+38     	; 0x2f84 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x786>
    2f5e:	68 e5       	ldi	r22, 0x58	; 88
    2f60:	74 e0       	ldi	r23, 0x04	; 4
    2f62:	8f e8       	ldi	r24, 0x8F	; 143
    2f64:	94 e0       	ldi	r25, 0x04	; 4
    2f66:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    2f6a:	66 e4       	ldi	r22, 0x46	; 70
    2f6c:	71 e0       	ldi	r23, 0x01	; 1
    2f6e:	8f e8       	ldi	r24, 0x8F	; 143
    2f70:	94 e0       	ldi	r25, 0x04	; 4
    2f72:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2f76:	4a e0       	ldi	r20, 0x0A	; 10
    2f78:	50 e0       	ldi	r21, 0x00	; 0
    2f7a:	6f 2d       	mov	r22, r15
    2f7c:	8f e8       	ldi	r24, 0x8F	; 143
    2f7e:	94 e0       	ldi	r25, 0x04	; 4
    2f80:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
		if (expectedValPtr->current != parsed->current) {RM_LOG2(F("*** CURR FAIL ***"), i);}
    2f84:	cf 5f       	subi	r28, 0xFF	; 255
    2f86:	de 4f       	sbci	r29, 0xFE	; 254
    2f88:	28 81       	ld	r18, Y
    2f8a:	39 81       	ldd	r19, Y+1	; 0x01
    2f8c:	c1 50       	subi	r28, 0x01	; 1
    2f8e:	d1 40       	sbci	r29, 0x01	; 1
    2f90:	f8 01       	movw	r30, r16
    2f92:	83 81       	ldd	r24, Z+3	; 0x03
    2f94:	94 81       	ldd	r25, Z+4	; 0x04
    2f96:	28 17       	cp	r18, r24
    2f98:	39 07       	cpc	r19, r25
    2f9a:	99 f0       	breq	.+38     	; 0x2fc2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x7c4>
    2f9c:	66 e4       	ldi	r22, 0x46	; 70
    2f9e:	74 e0       	ldi	r23, 0x04	; 4
    2fa0:	8f e8       	ldi	r24, 0x8F	; 143
    2fa2:	94 e0       	ldi	r25, 0x04	; 4
    2fa4:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    2fa8:	66 e4       	ldi	r22, 0x46	; 70
    2faa:	71 e0       	ldi	r23, 0x01	; 1
    2fac:	8f e8       	ldi	r24, 0x8F	; 143
    2fae:	94 e0       	ldi	r25, 0x04	; 4
    2fb0:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2fb4:	4a e0       	ldi	r20, 0x0A	; 10
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	6f 2d       	mov	r22, r15
    2fba:	8f e8       	ldi	r24, 0x8F	; 143
    2fbc:	94 e0       	ldi	r25, 0x04	; 4
    2fbe:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
		if (expectedValPtr->dataType != parsed->dataType) {RM_LOG2(F("*** DT FAIL ***"), i);}
    2fc2:	c2 50       	subi	r28, 0x02	; 2
    2fc4:	df 4f       	sbci	r29, 0xFF	; 255
    2fc6:	98 81       	ld	r25, Y
    2fc8:	ce 5f       	subi	r28, 0xFE	; 254
    2fca:	d0 40       	sbci	r29, 0x00	; 0
    2fcc:	f8 01       	movw	r30, r16
    2fce:	80 81       	ld	r24, Z
    2fd0:	98 17       	cp	r25, r24
    2fd2:	99 f0       	breq	.+38     	; 0x2ffa <_ZN13ExtendedTests20runExtendedTypesTestEv+0x7fc>
    2fd4:	66 e3       	ldi	r22, 0x36	; 54
    2fd6:	74 e0       	ldi	r23, 0x04	; 4
    2fd8:	8f e8       	ldi	r24, 0x8F	; 143
    2fda:	94 e0       	ldi	r25, 0x04	; 4
    2fdc:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    2fe0:	66 e4       	ldi	r22, 0x46	; 70
    2fe2:	71 e0       	ldi	r23, 0x01	; 1
    2fe4:	8f e8       	ldi	r24, 0x8F	; 143
    2fe6:	94 e0       	ldi	r25, 0x04	; 4
    2fe8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    2fec:	4a e0       	ldi	r20, 0x0A	; 10
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	6f 2d       	mov	r22, r15
    2ff2:	8f e8       	ldi	r24, 0x8F	; 143
    2ff4:	94 e0       	ldi	r25, 0x04	; 4
    2ff6:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
		if (expectedValPtr->errorChar != parsed->errorChar) {RM_LOG2(F("*** ERR FAIL ***"), i);}
    2ffa:	c9 5f       	subi	r28, 0xF9	; 249
    2ffc:	de 4f       	sbci	r29, 0xFE	; 254
    2ffe:	98 81       	ld	r25, Y
    3000:	c7 50       	subi	r28, 0x07	; 7
    3002:	d1 40       	sbci	r29, 0x01	; 1
    3004:	f8 01       	movw	r30, r16
    3006:	81 85       	ldd	r24, Z+9	; 0x09
    3008:	98 17       	cp	r25, r24
    300a:	99 f0       	breq	.+38     	; 0x3032 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x834>
    300c:	65 e2       	ldi	r22, 0x25	; 37
    300e:	74 e0       	ldi	r23, 0x04	; 4
    3010:	8f e8       	ldi	r24, 0x8F	; 143
    3012:	94 e0       	ldi	r25, 0x04	; 4
    3014:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    3018:	66 e4       	ldi	r22, 0x46	; 70
    301a:	71 e0       	ldi	r23, 0x01	; 1
    301c:	8f e8       	ldi	r24, 0x8F	; 143
    301e:	94 e0       	ldi	r25, 0x04	; 4
    3020:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    3024:	4a e0       	ldi	r20, 0x0A	; 10
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	6f 2d       	mov	r22, r15
    302a:	8f e8       	ldi	r24, 0x8F	; 143
    302c:	94 e0       	ldi	r25, 0x04	; 4
    302e:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
		if (expectedValPtr->pVVoltage != parsed->pVVoltage) {RM_LOG2(F("*** PV FAIL ***"), i);}
    3032:	cd 5f       	subi	r28, 0xFD	; 253
    3034:	de 4f       	sbci	r29, 0xFE	; 254
    3036:	28 81       	ld	r18, Y
    3038:	39 81       	ldd	r19, Y+1	; 0x01
    303a:	c3 50       	subi	r28, 0x03	; 3
    303c:	d1 40       	sbci	r29, 0x01	; 1
    303e:	f8 01       	movw	r30, r16
    3040:	85 81       	ldd	r24, Z+5	; 0x05
    3042:	96 81       	ldd	r25, Z+6	; 0x06
    3044:	28 17       	cp	r18, r24
    3046:	39 07       	cpc	r19, r25
    3048:	99 f0       	breq	.+38     	; 0x3070 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x872>
    304a:	65 e1       	ldi	r22, 0x15	; 21
    304c:	74 e0       	ldi	r23, 0x04	; 4
    304e:	8f e8       	ldi	r24, 0x8F	; 143
    3050:	94 e0       	ldi	r25, 0x04	; 4
    3052:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    3056:	66 e4       	ldi	r22, 0x46	; 70
    3058:	71 e0       	ldi	r23, 0x01	; 1
    305a:	8f e8       	ldi	r24, 0x8F	; 143
    305c:	94 e0       	ldi	r25, 0x04	; 4
    305e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    3062:	4a e0       	ldi	r20, 0x0A	; 10
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	6f 2d       	mov	r22, r15
    3068:	8f e8       	ldi	r24, 0x8F	; 143
    306a:	94 e0       	ldi	r25, 0x04	; 4
    306c:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
		if (expectedValPtr->temperature != parsed->temperature) {RM_LOG2(F("*** TEMP FAIL ***"), i);}
    3070:	cb 5f       	subi	r28, 0xFB	; 251
    3072:	de 4f       	sbci	r29, 0xFE	; 254
    3074:	28 81       	ld	r18, Y
    3076:	39 81       	ldd	r19, Y+1	; 0x01
    3078:	c5 50       	subi	r28, 0x05	; 5
    307a:	d1 40       	sbci	r29, 0x01	; 1
    307c:	f8 01       	movw	r30, r16
    307e:	87 81       	ldd	r24, Z+7	; 0x07
    3080:	90 85       	ldd	r25, Z+8	; 0x08
    3082:	28 17       	cp	r18, r24
    3084:	39 07       	cpc	r19, r25
    3086:	99 f0       	breq	.+38     	; 0x30ae <_ZN13ExtendedTests20runExtendedTypesTestEv+0x8b0>
    3088:	63 e0       	ldi	r22, 0x03	; 3
    308a:	74 e0       	ldi	r23, 0x04	; 4
    308c:	8f e8       	ldi	r24, 0x8F	; 143
    308e:	94 e0       	ldi	r25, 0x04	; 4
    3090:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    3094:	66 e4       	ldi	r22, 0x46	; 70
    3096:	71 e0       	ldi	r23, 0x01	; 1
    3098:	8f e8       	ldi	r24, 0x8F	; 143
    309a:	94 e0       	ldi	r25, 0x04	; 4
    309c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_ZN5Print5printEPKc>
    30a0:	4a e0       	ldi	r20, 0x0A	; 10
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	6f 2d       	mov	r22, r15
    30a6:	8f e8       	ldi	r24, 0x8F	; 143
    30a8:	94 e0       	ldi	r25, 0x04	; 4
    30aa:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEhi>
	
	RM_LOGLN(F("First Parsed Reading:"));
	SensorData* readOne = receivedPayload.getSensorData();
	Helpers::printSensorData(readOne); //print the first
	
	for(uint8_t i=0;i<numReadings;i++){
    30ae:	f3 94       	inc	r15
    30b0:	06 5f       	subi	r16, 0xF6	; 246
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	1d cf       	rjmp	.-454    	; 0x2ef0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x6f2>
	//GsmPayload readGsm;
	//uint8_t numSensorReadings = readGsm.readNumOfSensorReadings(dataPtr);
	//if (numSensorReadings != COUNT) RM_LOGLN(F("*** WRONG # SENSOR READINGS ***"));
	//readGsm.readPayload(dataPtr);
	
	RM_LOGLN(F("------------------------"));
    30b6:	6a ee       	ldi	r22, 0xEA	; 234
    30b8:	73 e0       	ldi	r23, 0x03	; 3
    30ba:	8f e8       	ldi	r24, 0x8F	; 143
    30bc:	94 e0       	ldi	r25, 0x04	; 4
    30be:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de be       	out	0x3e, r13	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd be       	out	0x3d, r12	; 61
    30cc:	c1 5e       	subi	r28, 0xE1	; 225
    30ce:	de 4f       	sbci	r29, 0xFE	; 254
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	df 90       	pop	r13
    30e8:	cf 90       	pop	r12
    30ea:	bf 90       	pop	r11
    30ec:	af 90       	pop	r10
    30ee:	9f 90       	pop	r9
    30f0:	8f 90       	pop	r8
    30f2:	08 95       	ret

000030f4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    30f4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    30f6:	91 8d       	ldd	r25, Z+25	; 0x19
    30f8:	22 8d       	ldd	r18, Z+26	; 0x1a
    30fa:	89 2f       	mov	r24, r25
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	80 5c       	subi	r24, 0xC0	; 192
    3100:	9f 4f       	sbci	r25, 0xFF	; 255
    3102:	82 1b       	sub	r24, r18
    3104:	91 09       	sbc	r25, r1
}
    3106:	8f 73       	andi	r24, 0x3F	; 63
    3108:	99 27       	eor	r25, r25
    310a:	08 95       	ret

0000310c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    310c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    310e:	91 8d       	ldd	r25, Z+25	; 0x19
    3110:	82 8d       	ldd	r24, Z+26	; 0x1a
    3112:	98 17       	cp	r25, r24
    3114:	31 f0       	breq	.+12     	; 0x3122 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3116:	82 8d       	ldd	r24, Z+26	; 0x1a
    3118:	e8 0f       	add	r30, r24
    311a:	f1 1d       	adc	r31, r1
    311c:	85 8d       	ldd	r24, Z+29	; 0x1d
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3122:	8f ef       	ldi	r24, 0xFF	; 255
    3124:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3126:	08 95       	ret

00003128 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3128:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    312a:	91 8d       	ldd	r25, Z+25	; 0x19
    312c:	82 8d       	ldd	r24, Z+26	; 0x1a
    312e:	98 17       	cp	r25, r24
    3130:	61 f0       	breq	.+24     	; 0x314a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3132:	82 8d       	ldd	r24, Z+26	; 0x1a
    3134:	df 01       	movw	r26, r30
    3136:	a8 0f       	add	r26, r24
    3138:	b1 1d       	adc	r27, r1
    313a:	5d 96       	adiw	r26, 0x1d	; 29
    313c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    313e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3140:	9f 5f       	subi	r25, 0xFF	; 255
    3142:	9f 73       	andi	r25, 0x3F	; 63
    3144:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    314e:	08 95       	ret

00003150 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3150:	8d ef       	ldi	r24, 0xFD	; 253
    3152:	99 e1       	ldi	r25, 0x19	; 25
    3154:	89 2b       	or	r24, r25
    3156:	49 f0       	breq	.+18     	; 0x316a <_Z14serialEventRunv+0x1a>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	89 2b       	or	r24, r25
    315e:	29 f0       	breq	.+10     	; 0x316a <_Z14serialEventRunv+0x1a>
    3160:	0e 94 fd 19 	call	0x33fa	; 0x33fa <_Z17Serial0_availablev>
    3164:	81 11       	cpse	r24, r1
    3166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    316a:	08 95       	ret

0000316c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    316c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    316e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3170:	df 01       	movw	r26, r30
    3172:	a8 0f       	add	r26, r24
    3174:	b1 1d       	adc	r27, r1
    3176:	a3 5a       	subi	r26, 0xA3	; 163
    3178:	bf 4f       	sbci	r27, 0xFF	; 255
    317a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    317c:	84 8d       	ldd	r24, Z+28	; 0x1c
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	01 96       	adiw	r24, 0x01	; 1
    3182:	8f 73       	andi	r24, 0x3F	; 63
    3184:	99 27       	eor	r25, r25
    3186:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3188:	a6 89       	ldd	r26, Z+22	; 0x16
    318a:	b7 89       	ldd	r27, Z+23	; 0x17
    318c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    318e:	a0 89       	ldd	r26, Z+16	; 0x10
    3190:	b1 89       	ldd	r27, Z+17	; 0x11
    3192:	8c 91       	ld	r24, X
    3194:	80 64       	ori	r24, 0x40	; 64
    3196:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3198:	93 8d       	ldd	r25, Z+27	; 0x1b
    319a:	84 8d       	ldd	r24, Z+28	; 0x1c
    319c:	98 13       	cpse	r25, r24
    319e:	06 c0       	rjmp	.+12     	; 0x31ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    31a0:	02 88       	ldd	r0, Z+18	; 0x12
    31a2:	f3 89       	ldd	r31, Z+19	; 0x13
    31a4:	e0 2d       	mov	r30, r0
    31a6:	80 81       	ld	r24, Z
    31a8:	8f 7d       	andi	r24, 0xDF	; 223
    31aa:	80 83       	st	Z, r24
    31ac:	08 95       	ret

000031ae <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	ec 01       	movw	r28, r24
  _written = true;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    31c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31c4:	98 13       	cpse	r25, r24
    31c6:	05 c0       	rjmp	.+10     	; 0x31d2 <_ZN14HardwareSerial5writeEh+0x24>
    31c8:	e8 89       	ldd	r30, Y+16	; 0x10
    31ca:	f9 89       	ldd	r31, Y+17	; 0x11
    31cc:	80 81       	ld	r24, Z
    31ce:	85 fd       	sbrc	r24, 5
    31d0:	24 c0       	rjmp	.+72     	; 0x321a <_ZN14HardwareSerial5writeEh+0x6c>
    31d2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    31d4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    31d6:	10 e0       	ldi	r17, 0x00	; 0
    31d8:	0f 5f       	subi	r16, 0xFF	; 255
    31da:	1f 4f       	sbci	r17, 0xFF	; 255
    31dc:	0f 73       	andi	r16, 0x3F	; 63
    31de:	11 27       	eor	r17, r17
    31e0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    31e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31e4:	e8 12       	cpse	r14, r24
    31e6:	0c c0       	rjmp	.+24     	; 0x3200 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	07 fc       	sbrc	r0, 7
    31ec:	fa cf       	rjmp	.-12     	; 0x31e2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    31ee:	e8 89       	ldd	r30, Y+16	; 0x10
    31f0:	f9 89       	ldd	r31, Y+17	; 0x11
    31f2:	80 81       	ld	r24, Z
    31f4:	85 ff       	sbrs	r24, 5
    31f6:	f5 cf       	rjmp	.-22     	; 0x31e2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    31f8:	ce 01       	movw	r24, r28
    31fa:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    31fe:	f1 cf       	rjmp	.-30     	; 0x31e2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3202:	fe 01       	movw	r30, r28
    3204:	e8 0f       	add	r30, r24
    3206:	f1 1d       	adc	r31, r1
    3208:	e3 5a       	subi	r30, 0xA3	; 163
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    320e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3210:	ea 89       	ldd	r30, Y+18	; 0x12
    3212:	fb 89       	ldd	r31, Y+19	; 0x13
    3214:	80 81       	ld	r24, Z
    3216:	80 62       	ori	r24, 0x20	; 32
    3218:	07 c0       	rjmp	.+14     	; 0x3228 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    321a:	ee 89       	ldd	r30, Y+22	; 0x16
    321c:	ff 89       	ldd	r31, Y+23	; 0x17
    321e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3220:	e8 89       	ldd	r30, Y+16	; 0x10
    3222:	f9 89       	ldd	r31, Y+17	; 0x11
    3224:	80 81       	ld	r24, Z
    3226:	80 64       	ori	r24, 0x40	; 64
    3228:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	08 95       	ret

0000323c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3242:	88 8d       	ldd	r24, Y+24	; 0x18
    3244:	88 23       	and	r24, r24
    3246:	c9 f0       	breq	.+50     	; 0x327a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3248:	ea 89       	ldd	r30, Y+18	; 0x12
    324a:	fb 89       	ldd	r31, Y+19	; 0x13
    324c:	80 81       	ld	r24, Z
    324e:	85 fd       	sbrc	r24, 5
    3250:	05 c0       	rjmp	.+10     	; 0x325c <_ZN14HardwareSerial5flushEv+0x20>
    3252:	a8 89       	ldd	r26, Y+16	; 0x10
    3254:	b9 89       	ldd	r27, Y+17	; 0x11
    3256:	8c 91       	ld	r24, X
    3258:	86 fd       	sbrc	r24, 6
    325a:	0f c0       	rjmp	.+30     	; 0x327a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	07 fc       	sbrc	r0, 7
    3260:	f5 cf       	rjmp	.-22     	; 0x324c <_ZN14HardwareSerial5flushEv+0x10>
    3262:	80 81       	ld	r24, Z
    3264:	85 ff       	sbrs	r24, 5
    3266:	f2 cf       	rjmp	.-28     	; 0x324c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3268:	a8 89       	ldd	r26, Y+16	; 0x10
    326a:	b9 89       	ldd	r27, Y+17	; 0x11
    326c:	8c 91       	ld	r24, X
    326e:	85 ff       	sbrs	r24, 5
    3270:	ed cf       	rjmp	.-38     	; 0x324c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3272:	ce 01       	movw	r24, r28
    3274:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3278:	e7 cf       	rjmp	.-50     	; 0x3248 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	08 95       	ret

00003280 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3280:	cf 92       	push	r12
    3282:	df 92       	push	r13
    3284:	ef 92       	push	r14
    3286:	ff 92       	push	r15
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	ec 01       	movw	r28, r24
    3290:	6a 01       	movw	r12, r20
    3292:	7b 01       	movw	r14, r22
    3294:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3296:	e8 89       	ldd	r30, Y+16	; 0x10
    3298:	f9 89       	ldd	r31, Y+17	; 0x11
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    329e:	41 15       	cp	r20, r1
    32a0:	51 4e       	sbci	r21, 0xE1	; 225
    32a2:	61 05       	cpc	r22, r1
    32a4:	71 05       	cpc	r23, r1
    32a6:	b1 f0       	breq	.+44     	; 0x32d4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	79 e0       	ldi	r23, 0x09	; 9
    32ac:	8d e3       	ldi	r24, 0x3D	; 61
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a7 01       	movw	r20, r14
    32b2:	96 01       	movw	r18, r12
    32b4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__udivmodsi4>
    32b8:	da 01       	movw	r26, r20
    32ba:	c9 01       	movw	r24, r18
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	a1 09       	sbc	r26, r1
    32c0:	b1 09       	sbc	r27, r1
    32c2:	b6 95       	lsr	r27
    32c4:	a7 95       	ror	r26
    32c6:	97 95       	ror	r25
    32c8:	87 95       	ror	r24
    32ca:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32cc:	21 15       	cp	r18, r1
    32ce:	80 e1       	ldi	r24, 0x10	; 16
    32d0:	38 07       	cpc	r19, r24
    32d2:	a8 f0       	brcs	.+42     	; 0x32fe <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    32d4:	e8 89       	ldd	r30, Y+16	; 0x10
    32d6:	f9 89       	ldd	r31, Y+17	; 0x11
    32d8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    32da:	60 e8       	ldi	r22, 0x80	; 128
    32dc:	74 e8       	ldi	r23, 0x84	; 132
    32de:	8e e1       	ldi	r24, 0x1E	; 30
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	a7 01       	movw	r20, r14
    32e4:	96 01       	movw	r18, r12
    32e6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__udivmodsi4>
    32ea:	da 01       	movw	r26, r20
    32ec:	c9 01       	movw	r24, r18
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	a1 09       	sbc	r26, r1
    32f2:	b1 09       	sbc	r27, r1
    32f4:	b6 95       	lsr	r27
    32f6:	a7 95       	ror	r26
    32f8:	97 95       	ror	r25
    32fa:	87 95       	ror	r24
    32fc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    32fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    3300:	fd 85       	ldd	r31, Y+13	; 0x0d
    3302:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3304:	ee 85       	ldd	r30, Y+14	; 0x0e
    3306:	ff 85       	ldd	r31, Y+15	; 0x0f
    3308:	20 83       	st	Z, r18

  _written = false;
    330a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    330c:	ec 89       	ldd	r30, Y+20	; 0x14
    330e:	fd 89       	ldd	r31, Y+21	; 0x15
    3310:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3312:	ea 89       	ldd	r30, Y+18	; 0x12
    3314:	fb 89       	ldd	r31, Y+19	; 0x13
    3316:	80 81       	ld	r24, Z
    3318:	80 61       	ori	r24, 0x10	; 16
    331a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    331c:	ea 89       	ldd	r30, Y+18	; 0x12
    331e:	fb 89       	ldd	r31, Y+19	; 0x13
    3320:	80 81       	ld	r24, Z
    3322:	88 60       	ori	r24, 0x08	; 8
    3324:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3326:	ea 89       	ldd	r30, Y+18	; 0x12
    3328:	fb 89       	ldd	r31, Y+19	; 0x13
    332a:	80 81       	ld	r24, Z
    332c:	80 68       	ori	r24, 0x80	; 128
    332e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3330:	ea 89       	ldd	r30, Y+18	; 0x12
    3332:	fb 89       	ldd	r31, Y+19	; 0x13
    3334:	80 81       	ld	r24, Z
    3336:	8f 7d       	andi	r24, 0xDF	; 223
    3338:	80 83       	st	Z, r24
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	ff 90       	pop	r15
    3342:	ef 90       	pop	r14
    3344:	df 90       	pop	r13
    3346:	cf 90       	pop	r12
    3348:	08 95       	ret

0000334a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    334a:	1f 92       	push	r1
    334c:	0f 92       	push	r0
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	0f 92       	push	r0
    3352:	11 24       	eor	r1, r1
    3354:	2f 93       	push	r18
    3356:	8f 93       	push	r24
    3358:	9f 93       	push	r25
    335a:	ef 93       	push	r30
    335c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    335e:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <Serial+0x10>
    3362:	f0 91 a0 04 	lds	r31, 0x04A0	; 0x8004a0 <Serial+0x11>
    3366:	80 81       	ld	r24, Z
    3368:	e0 91 a5 04 	lds	r30, 0x04A5	; 0x8004a5 <Serial+0x16>
    336c:	f0 91 a6 04 	lds	r31, 0x04A6	; 0x8004a6 <Serial+0x17>
    3370:	82 fd       	sbrc	r24, 2
    3372:	12 c0       	rjmp	.+36     	; 0x3398 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3374:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3376:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <Serial+0x19>
    337a:	8f 5f       	subi	r24, 0xFF	; 255
    337c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    337e:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <Serial+0x1a>
    3382:	82 17       	cp	r24, r18
    3384:	51 f0       	breq	.+20     	; 0x339a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3386:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <Serial+0x19>
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	e1 57       	subi	r30, 0x71	; 113
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3392:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <Serial+0x19>
    3396:	01 c0       	rjmp	.+2      	; 0x339a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3398:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    339a:	ff 91       	pop	r31
    339c:	ef 91       	pop	r30
    339e:	9f 91       	pop	r25
    33a0:	8f 91       	pop	r24
    33a2:	2f 91       	pop	r18
    33a4:	0f 90       	pop	r0
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	0f 90       	pop	r0
    33aa:	1f 90       	pop	r1
    33ac:	18 95       	reti

000033ae <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    33ae:	1f 92       	push	r1
    33b0:	0f 92       	push	r0
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	0f 92       	push	r0
    33b6:	11 24       	eor	r1, r1
    33b8:	2f 93       	push	r18
    33ba:	3f 93       	push	r19
    33bc:	4f 93       	push	r20
    33be:	5f 93       	push	r21
    33c0:	6f 93       	push	r22
    33c2:	7f 93       	push	r23
    33c4:	8f 93       	push	r24
    33c6:	9f 93       	push	r25
    33c8:	af 93       	push	r26
    33ca:	bf 93       	push	r27
    33cc:	ef 93       	push	r30
    33ce:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    33d0:	8f e8       	ldi	r24, 0x8F	; 143
    33d2:	94 e0       	ldi	r25, 0x04	; 4
    33d4:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	bf 91       	pop	r27
    33de:	af 91       	pop	r26
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	7f 91       	pop	r23
    33e6:	6f 91       	pop	r22
    33e8:	5f 91       	pop	r21
    33ea:	4f 91       	pop	r20
    33ec:	3f 91       	pop	r19
    33ee:	2f 91       	pop	r18
    33f0:	0f 90       	pop	r0
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	0f 90       	pop	r0
    33f6:	1f 90       	pop	r1
    33f8:	18 95       	reti

000033fa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    33fa:	8f e8       	ldi	r24, 0x8F	; 143
    33fc:	94 e0       	ldi	r25, 0x04	; 4
    33fe:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <_ZN14HardwareSerial9availableEv>
    3402:	21 e0       	ldi	r18, 0x01	; 1
    3404:	89 2b       	or	r24, r25
    3406:	09 f4       	brne	.+2      	; 0x340a <_Z17Serial0_availablev+0x10>
    3408:	20 e0       	ldi	r18, 0x00	; 0
}
    340a:	82 2f       	mov	r24, r18
    340c:	08 95       	ret

0000340e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    340e:	ef e8       	ldi	r30, 0x8F	; 143
    3410:	f4 e0       	ldi	r31, 0x04	; 4
    3412:	13 82       	std	Z+3, r1	; 0x03
    3414:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3416:	88 ee       	ldi	r24, 0xE8	; 232
    3418:	93 e0       	ldi	r25, 0x03	; 3
    341a:	a0 e0       	ldi	r26, 0x00	; 0
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	84 83       	std	Z+4, r24	; 0x04
    3420:	95 83       	std	Z+5, r25	; 0x05
    3422:	a6 83       	std	Z+6, r26	; 0x06
    3424:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3426:	80 e7       	ldi	r24, 0x70	; 112
    3428:	92 e0       	ldi	r25, 0x02	; 2
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	85 ec       	ldi	r24, 0xC5	; 197
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	95 87       	std	Z+13, r25	; 0x0d
    3434:	84 87       	std	Z+12, r24	; 0x0c
    3436:	84 ec       	ldi	r24, 0xC4	; 196
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	97 87       	std	Z+15, r25	; 0x0f
    343c:	86 87       	std	Z+14, r24	; 0x0e
    343e:	80 ec       	ldi	r24, 0xC0	; 192
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	91 8b       	std	Z+17, r25	; 0x11
    3444:	80 8b       	std	Z+16, r24	; 0x10
    3446:	81 ec       	ldi	r24, 0xC1	; 193
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	93 8b       	std	Z+19, r25	; 0x13
    344c:	82 8b       	std	Z+18, r24	; 0x12
    344e:	82 ec       	ldi	r24, 0xC2	; 194
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	95 8b       	std	Z+21, r25	; 0x15
    3454:	84 8b       	std	Z+20, r24	; 0x14
    3456:	86 ec       	ldi	r24, 0xC6	; 198
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	97 8b       	std	Z+23, r25	; 0x17
    345c:	86 8b       	std	Z+22, r24	; 0x16
    345e:	11 8e       	std	Z+25, r1	; 0x19
    3460:	12 8e       	std	Z+26, r1	; 0x1a
    3462:	13 8e       	std	Z+27, r1	; 0x1b
    3464:	14 8e       	std	Z+28, r1	; 0x1c
    3466:	08 95       	ret

00003468 <initVariant>:
    3468:	08 95       	ret

0000346a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    346a:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <init>

	initVariant();
    346e:	0e 94 34 1a 	call	0x3468	; 0x3468 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3472:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3476:	c8 ea       	ldi	r28, 0xA8	; 168
    3478:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    347a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <loop>
		if (serialEventRun) serialEventRun();
    347e:	20 97       	sbiw	r28, 0x00	; 0
    3480:	e1 f3       	breq	.-8      	; 0x347a <main+0x10>
    3482:	0e 94 a8 18 	call	0x3150	; 0x3150 <_Z14serialEventRunv>
    3486:	f9 cf       	rjmp	.-14     	; 0x347a <main+0x10>

00003488 <_Znwj>:
    3488:	0c 94 32 21 	jmp	0x4264	; 0x4264 <malloc>

0000348c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    348c:	cf 92       	push	r12
    348e:	df 92       	push	r13
    3490:	ef 92       	push	r14
    3492:	ff 92       	push	r15
    3494:	0f 93       	push	r16
    3496:	1f 93       	push	r17
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	6c 01       	movw	r12, r24
    349e:	7a 01       	movw	r14, r20
    34a0:	8b 01       	movw	r16, r22
    34a2:	c0 e0       	ldi	r28, 0x00	; 0
    34a4:	d0 e0       	ldi	r29, 0x00	; 0
    34a6:	ce 15       	cp	r28, r14
    34a8:	df 05       	cpc	r29, r15
    34aa:	81 f0       	breq	.+32     	; 0x34cc <_ZN5Print5writeEPKhj+0x40>
    34ac:	d8 01       	movw	r26, r16
    34ae:	6d 91       	ld	r22, X+
    34b0:	8d 01       	movw	r16, r26
    34b2:	d6 01       	movw	r26, r12
    34b4:	ed 91       	ld	r30, X+
    34b6:	fc 91       	ld	r31, X
    34b8:	01 90       	ld	r0, Z+
    34ba:	f0 81       	ld	r31, Z
    34bc:	e0 2d       	mov	r30, r0
    34be:	c6 01       	movw	r24, r12
    34c0:	09 95       	icall
    34c2:	89 2b       	or	r24, r25
    34c4:	11 f0       	breq	.+4      	; 0x34ca <_ZN5Print5writeEPKhj+0x3e>
    34c6:	21 96       	adiw	r28, 0x01	; 1
    34c8:	ee cf       	rjmp	.-36     	; 0x34a6 <_ZN5Print5writeEPKhj+0x1a>
    34ca:	7e 01       	movw	r14, r28
    34cc:	c7 01       	movw	r24, r14
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	df 90       	pop	r13
    34dc:	cf 90       	pop	r12
    34de:	08 95       	ret

000034e0 <_ZN5Print5writeEPKc>:
    34e0:	61 15       	cp	r22, r1
    34e2:	71 05       	cpc	r23, r1
    34e4:	79 f0       	breq	.+30     	; 0x3504 <_ZN5Print5writeEPKc+0x24>
    34e6:	fb 01       	movw	r30, r22
    34e8:	01 90       	ld	r0, Z+
    34ea:	00 20       	and	r0, r0
    34ec:	e9 f7       	brne	.-6      	; 0x34e8 <_ZN5Print5writeEPKc+0x8>
    34ee:	31 97       	sbiw	r30, 0x01	; 1
    34f0:	af 01       	movw	r20, r30
    34f2:	46 1b       	sub	r20, r22
    34f4:	57 0b       	sbc	r21, r23
    34f6:	dc 01       	movw	r26, r24
    34f8:	ed 91       	ld	r30, X+
    34fa:	fc 91       	ld	r31, X
    34fc:	02 80       	ldd	r0, Z+2	; 0x02
    34fe:	f3 81       	ldd	r31, Z+3	; 0x03
    3500:	e0 2d       	mov	r30, r0
    3502:	09 94       	ijmp
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	08 95       	ret

0000350a <_ZN5Print5printEPK19__FlashStringHelper>:
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	8c 01       	movw	r16, r24
    3518:	7b 01       	movw	r14, r22
    351a:	c0 e0       	ldi	r28, 0x00	; 0
    351c:	d0 e0       	ldi	r29, 0x00	; 0
    351e:	f7 01       	movw	r30, r14
    3520:	ec 0f       	add	r30, r28
    3522:	fd 1f       	adc	r31, r29
    3524:	64 91       	lpm	r22, Z
    3526:	66 23       	and	r22, r22
    3528:	61 f0       	breq	.+24     	; 0x3542 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    352a:	d8 01       	movw	r26, r16
    352c:	ed 91       	ld	r30, X+
    352e:	fc 91       	ld	r31, X
    3530:	01 90       	ld	r0, Z+
    3532:	f0 81       	ld	r31, Z
    3534:	e0 2d       	mov	r30, r0
    3536:	c8 01       	movw	r24, r16
    3538:	09 95       	icall
    353a:	89 2b       	or	r24, r25
    353c:	11 f0       	breq	.+4      	; 0x3542 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    353e:	21 96       	adiw	r28, 0x01	; 1
    3540:	ee cf       	rjmp	.-36     	; 0x351e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3542:	ce 01       	movw	r24, r28
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	ff 90       	pop	r15
    354e:	ef 90       	pop	r14
    3550:	08 95       	ret

00003552 <_ZN5Print5printEPKc>:
    3552:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <_ZN5Print5writeEPKc>

00003556 <_ZN5Print5printEc>:
    3556:	dc 01       	movw	r26, r24
    3558:	ed 91       	ld	r30, X+
    355a:	fc 91       	ld	r31, X
    355c:	01 90       	ld	r0, Z+
    355e:	f0 81       	ld	r31, Z
    3560:	e0 2d       	mov	r30, r0
    3562:	09 94       	ijmp

00003564 <_ZN5Print7printlnEv>:
    3564:	6c e7       	ldi	r22, 0x7C	; 124
    3566:	72 e0       	ldi	r23, 0x02	; 2
    3568:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <_ZN5Print5writeEPKc>

0000356c <_ZN5Print7printlnEPK19__FlashStringHelper>:
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	ec 01       	movw	r28, r24
    3576:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN5Print5printEPK19__FlashStringHelper>
    357a:	8c 01       	movw	r16, r24
    357c:	ce 01       	movw	r24, r28
    357e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEv>
    3582:	80 0f       	add	r24, r16
    3584:	91 1f       	adc	r25, r17
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	08 95       	ret

00003590 <_ZN5Print7printlnEPKc>:
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	ec 01       	movw	r28, r24
    359a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN5Print5writeEPKc>
    359e:	8c 01       	movw	r16, r24
    35a0:	ce 01       	movw	r24, r28
    35a2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEv>
    35a6:	80 0f       	add	r24, r16
    35a8:	91 1f       	adc	r25, r17
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	08 95       	ret

000035b4 <_ZN5Print7printlnEc>:
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	ec 01       	movw	r28, r24
    35be:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEc>
    35c2:	8c 01       	movw	r16, r24
    35c4:	ce 01       	movw	r24, r28
    35c6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEv>
    35ca:	80 0f       	add	r24, r16
    35cc:	91 1f       	adc	r25, r17
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	08 95       	ret

000035d8 <_ZN5Print11printNumberEmh>:
    35d8:	8f 92       	push	r8
    35da:	9f 92       	push	r9
    35dc:	af 92       	push	r10
    35de:	bf 92       	push	r11
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	a1 97       	sbiw	r28, 0x21	; 33
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	7c 01       	movw	r14, r24
    35fe:	fa 01       	movw	r30, r20
    3600:	cb 01       	movw	r24, r22
    3602:	19 a2       	std	Y+33, r1	; 0x21
    3604:	22 30       	cpi	r18, 0x02	; 2
    3606:	08 f4       	brcc	.+2      	; 0x360a <_ZN5Print11printNumberEmh+0x32>
    3608:	2a e0       	ldi	r18, 0x0A	; 10
    360a:	8e 01       	movw	r16, r28
    360c:	0f 5d       	subi	r16, 0xDF	; 223
    360e:	1f 4f       	sbci	r17, 0xFF	; 255
    3610:	82 2e       	mov	r8, r18
    3612:	91 2c       	mov	r9, r1
    3614:	a1 2c       	mov	r10, r1
    3616:	b1 2c       	mov	r11, r1
    3618:	bf 01       	movw	r22, r30
    361a:	a5 01       	movw	r20, r10
    361c:	94 01       	movw	r18, r8
    361e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__udivmodsi4>
    3622:	f9 01       	movw	r30, r18
    3624:	ca 01       	movw	r24, r20
    3626:	01 50       	subi	r16, 0x01	; 1
    3628:	11 09       	sbc	r17, r1
    362a:	6a 30       	cpi	r22, 0x0A	; 10
    362c:	10 f4       	brcc	.+4      	; 0x3632 <_ZN5Print11printNumberEmh+0x5a>
    362e:	60 5d       	subi	r22, 0xD0	; 208
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <_ZN5Print11printNumberEmh+0x5c>
    3632:	69 5c       	subi	r22, 0xC9	; 201
    3634:	d8 01       	movw	r26, r16
    3636:	6c 93       	st	X, r22
    3638:	23 2b       	or	r18, r19
    363a:	24 2b       	or	r18, r20
    363c:	25 2b       	or	r18, r21
    363e:	61 f7       	brne	.-40     	; 0x3618 <_ZN5Print11printNumberEmh+0x40>
    3640:	b8 01       	movw	r22, r16
    3642:	c7 01       	movw	r24, r14
    3644:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN5Print5writeEPKc>
    3648:	a1 96       	adiw	r28, 0x21	; 33
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	bf 90       	pop	r11
    3662:	af 90       	pop	r10
    3664:	9f 90       	pop	r9
    3666:	8f 90       	pop	r8
    3668:	08 95       	ret

0000366a <_ZN5Print5printEmi>:
    366a:	21 15       	cp	r18, r1
    366c:	31 05       	cpc	r19, r1
    366e:	41 f4       	brne	.+16     	; 0x3680 <_ZN5Print5printEmi+0x16>
    3670:	dc 01       	movw	r26, r24
    3672:	ed 91       	ld	r30, X+
    3674:	fc 91       	ld	r31, X
    3676:	01 90       	ld	r0, Z+
    3678:	f0 81       	ld	r31, Z
    367a:	e0 2d       	mov	r30, r0
    367c:	64 2f       	mov	r22, r20
    367e:	09 94       	ijmp
    3680:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <_ZN5Print11printNumberEmh>

00003684 <_ZN5Print5printEhi>:
    3684:	9a 01       	movw	r18, r20
    3686:	46 2f       	mov	r20, r22
    3688:	50 e0       	ldi	r21, 0x00	; 0
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	70 e0       	ldi	r23, 0x00	; 0
    368e:	0c 94 35 1b 	jmp	0x366a	; 0x366a <_ZN5Print5printEmi>

00003692 <_ZN5Print7printlnEhi>:
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	ec 01       	movw	r28, r24
    369c:	0e 94 42 1b 	call	0x3684	; 0x3684 <_ZN5Print5printEhi>
    36a0:	8c 01       	movw	r16, r24
    36a2:	ce 01       	movw	r24, r28
    36a4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEv>
    36a8:	80 0f       	add	r24, r16
    36aa:	91 1f       	adc	r25, r17
    36ac:	df 91       	pop	r29
    36ae:	cf 91       	pop	r28
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	08 95       	ret

000036b6 <_ZN5Print5printEji>:
    36b6:	9a 01       	movw	r18, r20
    36b8:	ab 01       	movw	r20, r22
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	0c 94 35 1b 	jmp	0x366a	; 0x366a <_ZN5Print5printEmi>

000036c2 <_ZN5Print7printlnEji>:
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
    36cc:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print5printEji>
    36d0:	8c 01       	movw	r16, r24
    36d2:	ce 01       	movw	r24, r28
    36d4:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEv>
    36d8:	80 0f       	add	r24, r16
    36da:	91 1f       	adc	r25, r17
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	08 95       	ret

000036e6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
  if (base == 0) {
    36f6:	21 15       	cp	r18, r1
    36f8:	31 05       	cpc	r19, r1
    36fa:	81 f4       	brne	.+32     	; 0x371c <_ZN5Print5printEli+0x36>
    return write(n);
    36fc:	dc 01       	movw	r26, r24
    36fe:	ed 91       	ld	r30, X+
    3700:	fc 91       	ld	r31, X
    3702:	01 90       	ld	r0, Z+
    3704:	f0 81       	ld	r31, Z
    3706:	e0 2d       	mov	r30, r0
    3708:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	ff 90       	pop	r15
    3714:	ef 90       	pop	r14
    3716:	df 90       	pop	r13
    3718:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    371a:	09 94       	ijmp
  } else if (base == 10) {
    371c:	2a 30       	cpi	r18, 0x0A	; 10
    371e:	31 05       	cpc	r19, r1
    3720:	01 f5       	brne	.+64     	; 0x3762 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3722:	77 ff       	sbrs	r23, 7
    3724:	1d c0       	rjmp	.+58     	; 0x3760 <_ZN5Print5printEli+0x7a>
    3726:	6a 01       	movw	r12, r20
    3728:	7b 01       	movw	r14, r22
    372a:	ec 01       	movw	r28, r24
      int t = print('-');
    372c:	6d e2       	ldi	r22, 0x2D	; 45
    372e:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN5Print5printEc>
    3732:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    3734:	44 27       	eor	r20, r20
    3736:	55 27       	eor	r21, r21
    3738:	ba 01       	movw	r22, r20
    373a:	4c 19       	sub	r20, r12
    373c:	5d 09       	sbc	r21, r13
    373e:	6e 09       	sbc	r22, r14
    3740:	7f 09       	sbc	r23, r15
    3742:	2a e0       	ldi	r18, 0x0A	; 10
    3744:	ce 01       	movw	r24, r28
    3746:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <_ZN5Print11printNumberEmh>
    374a:	80 0f       	add	r24, r16
    374c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	ff 90       	pop	r15
    3758:	ef 90       	pop	r14
    375a:	df 90       	pop	r13
    375c:	cf 90       	pop	r12
    375e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3760:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3762:	df 91       	pop	r29
    3764:	cf 91       	pop	r28
    3766:	1f 91       	pop	r17
    3768:	0f 91       	pop	r16
    376a:	ff 90       	pop	r15
    376c:	ef 90       	pop	r14
    376e:	df 90       	pop	r13
    3770:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3772:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <_ZN5Print11printNumberEmh>

00003776 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3776:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3778:	ab 01       	movw	r20, r22
    377a:	77 0f       	add	r23, r23
    377c:	66 0b       	sbc	r22, r22
    377e:	77 0b       	sbc	r23, r23
    3780:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <_ZN5Print5printEli>

00003784 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    378e:	0e 94 bb 1b 	call	0x3776	; 0x3776 <_ZN5Print5printEii>
    3792:	8c 01       	movw	r16, r24
  n += println();
    3794:	ce 01       	movw	r24, r28
    3796:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN5Print7printlnEv>
  return n;
}
    379a:	80 0f       	add	r24, r16
    379c:	91 1f       	adc	r25, r17
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	1f 91       	pop	r17
    37a4:	0f 91       	pop	r16
    37a6:	08 95       	ret

000037a8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    37a8:	1f 92       	push	r1
    37aa:	0f 92       	push	r0
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	0f 92       	push	r0
    37b0:	11 24       	eor	r1, r1
    37b2:	2f 93       	push	r18
    37b4:	3f 93       	push	r19
    37b6:	8f 93       	push	r24
    37b8:	9f 93       	push	r25
    37ba:	af 93       	push	r26
    37bc:	bf 93       	push	r27
    37be:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <timer0_millis>
    37c2:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <timer0_millis+0x1>
    37c6:	a0 91 2f 05 	lds	r26, 0x052F	; 0x80052f <timer0_millis+0x2>
    37ca:	b0 91 30 05 	lds	r27, 0x0530	; 0x800530 <timer0_millis+0x3>
    37ce:	30 91 2c 05 	lds	r19, 0x052C	; 0x80052c <timer0_fract>
    37d2:	23 e0       	ldi	r18, 0x03	; 3
    37d4:	23 0f       	add	r18, r19
    37d6:	2d 37       	cpi	r18, 0x7D	; 125
    37d8:	20 f4       	brcc	.+8      	; 0x37e2 <__vector_16+0x3a>
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	a1 1d       	adc	r26, r1
    37de:	b1 1d       	adc	r27, r1
    37e0:	05 c0       	rjmp	.+10     	; 0x37ec <__vector_16+0x44>
    37e2:	26 e8       	ldi	r18, 0x86	; 134
    37e4:	23 0f       	add	r18, r19
    37e6:	02 96       	adiw	r24, 0x02	; 2
    37e8:	a1 1d       	adc	r26, r1
    37ea:	b1 1d       	adc	r27, r1
    37ec:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <timer0_fract>
    37f0:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <timer0_millis>
    37f4:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <timer0_millis+0x1>
    37f8:	a0 93 2f 05 	sts	0x052F, r26	; 0x80052f <timer0_millis+0x2>
    37fc:	b0 93 30 05 	sts	0x0530, r27	; 0x800530 <timer0_millis+0x3>
    3800:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <timer0_overflow_count>
    3804:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <timer0_overflow_count+0x1>
    3808:	a0 91 33 05 	lds	r26, 0x0533	; 0x800533 <timer0_overflow_count+0x2>
    380c:	b0 91 34 05 	lds	r27, 0x0534	; 0x800534 <timer0_overflow_count+0x3>
    3810:	01 96       	adiw	r24, 0x01	; 1
    3812:	a1 1d       	adc	r26, r1
    3814:	b1 1d       	adc	r27, r1
    3816:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <timer0_overflow_count>
    381a:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <timer0_overflow_count+0x1>
    381e:	a0 93 33 05 	sts	0x0533, r26	; 0x800533 <timer0_overflow_count+0x2>
    3822:	b0 93 34 05 	sts	0x0534, r27	; 0x800534 <timer0_overflow_count+0x3>
    3826:	bf 91       	pop	r27
    3828:	af 91       	pop	r26
    382a:	9f 91       	pop	r25
    382c:	8f 91       	pop	r24
    382e:	3f 91       	pop	r19
    3830:	2f 91       	pop	r18
    3832:	0f 90       	pop	r0
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	0f 90       	pop	r0
    3838:	1f 90       	pop	r1
    383a:	18 95       	reti

0000383c <micros>:
    383c:	3f b7       	in	r19, 0x3f	; 63
    383e:	f8 94       	cli
    3840:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <timer0_overflow_count>
    3844:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <timer0_overflow_count+0x1>
    3848:	a0 91 33 05 	lds	r26, 0x0533	; 0x800533 <timer0_overflow_count+0x2>
    384c:	b0 91 34 05 	lds	r27, 0x0534	; 0x800534 <timer0_overflow_count+0x3>
    3850:	26 b5       	in	r18, 0x26	; 38
    3852:	a8 9b       	sbis	0x15, 0	; 21
    3854:	05 c0       	rjmp	.+10     	; 0x3860 <micros+0x24>
    3856:	2f 3f       	cpi	r18, 0xFF	; 255
    3858:	19 f0       	breq	.+6      	; 0x3860 <micros+0x24>
    385a:	01 96       	adiw	r24, 0x01	; 1
    385c:	a1 1d       	adc	r26, r1
    385e:	b1 1d       	adc	r27, r1
    3860:	3f bf       	out	0x3f, r19	; 63
    3862:	ba 2f       	mov	r27, r26
    3864:	a9 2f       	mov	r26, r25
    3866:	98 2f       	mov	r25, r24
    3868:	88 27       	eor	r24, r24
    386a:	82 0f       	add	r24, r18
    386c:	91 1d       	adc	r25, r1
    386e:	a1 1d       	adc	r26, r1
    3870:	b1 1d       	adc	r27, r1
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	42 e0       	ldi	r20, 0x02	; 2
    3878:	66 0f       	add	r22, r22
    387a:	77 1f       	adc	r23, r23
    387c:	88 1f       	adc	r24, r24
    387e:	99 1f       	adc	r25, r25
    3880:	4a 95       	dec	r20
    3882:	d1 f7       	brne	.-12     	; 0x3878 <micros+0x3c>
    3884:	08 95       	ret

00003886 <delay>:
    3886:	8f 92       	push	r8
    3888:	9f 92       	push	r9
    388a:	af 92       	push	r10
    388c:	bf 92       	push	r11
    388e:	cf 92       	push	r12
    3890:	df 92       	push	r13
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	6b 01       	movw	r12, r22
    3898:	7c 01       	movw	r14, r24
    389a:	0e 94 1e 1c 	call	0x383c	; 0x383c <micros>
    389e:	4b 01       	movw	r8, r22
    38a0:	5c 01       	movw	r10, r24
    38a2:	c1 14       	cp	r12, r1
    38a4:	d1 04       	cpc	r13, r1
    38a6:	e1 04       	cpc	r14, r1
    38a8:	f1 04       	cpc	r15, r1
    38aa:	01 f1       	breq	.+64     	; 0x38ec <delay+0x66>
    38ac:	0e 94 b6 20 	call	0x416c	; 0x416c <yield>
    38b0:	0e 94 1e 1c 	call	0x383c	; 0x383c <micros>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	88 19       	sub	r24, r8
    38ba:	99 09       	sbc	r25, r9
    38bc:	aa 09       	sbc	r26, r10
    38be:	bb 09       	sbc	r27, r11
    38c0:	88 3e       	cpi	r24, 0xE8	; 232
    38c2:	93 40       	sbci	r25, 0x03	; 3
    38c4:	a1 05       	cpc	r26, r1
    38c6:	b1 05       	cpc	r27, r1
    38c8:	60 f3       	brcs	.-40     	; 0x38a2 <delay+0x1c>
    38ca:	21 e0       	ldi	r18, 0x01	; 1
    38cc:	c2 1a       	sub	r12, r18
    38ce:	d1 08       	sbc	r13, r1
    38d0:	e1 08       	sbc	r14, r1
    38d2:	f1 08       	sbc	r15, r1
    38d4:	88 ee       	ldi	r24, 0xE8	; 232
    38d6:	88 0e       	add	r8, r24
    38d8:	83 e0       	ldi	r24, 0x03	; 3
    38da:	98 1e       	adc	r9, r24
    38dc:	a1 1c       	adc	r10, r1
    38de:	b1 1c       	adc	r11, r1
    38e0:	c1 14       	cp	r12, r1
    38e2:	d1 04       	cpc	r13, r1
    38e4:	e1 04       	cpc	r14, r1
    38e6:	f1 04       	cpc	r15, r1
    38e8:	19 f7       	brne	.-58     	; 0x38b0 <delay+0x2a>
    38ea:	db cf       	rjmp	.-74     	; 0x38a2 <delay+0x1c>
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	08 95       	ret

000038fe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    38fe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3900:	84 b5       	in	r24, 0x24	; 36
    3902:	82 60       	ori	r24, 0x02	; 2
    3904:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3906:	84 b5       	in	r24, 0x24	; 36
    3908:	81 60       	ori	r24, 0x01	; 1
    390a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    390c:	85 b5       	in	r24, 0x25	; 37
    390e:	82 60       	ori	r24, 0x02	; 2
    3910:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3912:	85 b5       	in	r24, 0x25	; 37
    3914:	81 60       	ori	r24, 0x01	; 1
    3916:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3918:	ee e6       	ldi	r30, 0x6E	; 110
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	81 60       	ori	r24, 0x01	; 1
    3920:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3922:	e1 e8       	ldi	r30, 0x81	; 129
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3928:	80 81       	ld	r24, Z
    392a:	82 60       	ori	r24, 0x02	; 2
    392c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    392e:	80 81       	ld	r24, Z
    3930:	81 60       	ori	r24, 0x01	; 1
    3932:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3934:	e0 e8       	ldi	r30, 0x80	; 128
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	81 60       	ori	r24, 0x01	; 1
    393c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    393e:	e1 eb       	ldi	r30, 0xB1	; 177
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	80 81       	ld	r24, Z
    3944:	84 60       	ori	r24, 0x04	; 4
    3946:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3948:	e0 eb       	ldi	r30, 0xB0	; 176
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	81 60       	ori	r24, 0x01	; 1
    3950:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3952:	ea e7       	ldi	r30, 0x7A	; 122
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	80 81       	ld	r24, Z
    3958:	84 60       	ori	r24, 0x04	; 4
    395a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    395c:	80 81       	ld	r24, Z
    395e:	82 60       	ori	r24, 0x02	; 2
    3960:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3962:	80 81       	ld	r24, Z
    3964:	81 60       	ori	r24, 0x01	; 1
    3966:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3968:	80 81       	ld	r24, Z
    396a:	80 68       	ori	r24, 0x80	; 128
    396c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    396e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3972:	08 95       	ret

00003974 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3974:	8e 30       	cpi	r24, 0x0E	; 14
    3976:	08 f0       	brcs	.+2      	; 0x397a <analogRead+0x6>
    3978:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    397a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    397e:	90 e4       	ldi	r25, 0x40	; 64
    3980:	29 9f       	mul	r18, r25
    3982:	90 01       	movw	r18, r0
    3984:	11 24       	eor	r1, r1
    3986:	87 70       	andi	r24, 0x07	; 7
    3988:	82 2b       	or	r24, r18
    398a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    398e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3992:	80 64       	ori	r24, 0x40	; 64
    3994:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3998:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    399c:	86 fd       	sbrc	r24, 6
    399e:	fc cf       	rjmp	.-8      	; 0x3998 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    39a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    39a4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    39a8:	90 e0       	ldi	r25, 0x00	; 0
}
    39aa:	92 2b       	or	r25, r18
    39ac:	08 95       	ret

000039ae <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    39ae:	83 30       	cpi	r24, 0x03	; 3
    39b0:	81 f0       	breq	.+32     	; 0x39d2 <turnOffPWM+0x24>
    39b2:	28 f4       	brcc	.+10     	; 0x39be <turnOffPWM+0x10>
    39b4:	81 30       	cpi	r24, 0x01	; 1
    39b6:	99 f0       	breq	.+38     	; 0x39de <turnOffPWM+0x30>
    39b8:	82 30       	cpi	r24, 0x02	; 2
    39ba:	a1 f0       	breq	.+40     	; 0x39e4 <turnOffPWM+0x36>
    39bc:	08 95       	ret
    39be:	87 30       	cpi	r24, 0x07	; 7
    39c0:	a9 f0       	breq	.+42     	; 0x39ec <turnOffPWM+0x3e>
    39c2:	88 30       	cpi	r24, 0x08	; 8
    39c4:	b9 f0       	breq	.+46     	; 0x39f4 <turnOffPWM+0x46>
    39c6:	84 30       	cpi	r24, 0x04	; 4
    39c8:	d1 f4       	brne	.+52     	; 0x39fe <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    39ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    39ce:	8f 7d       	andi	r24, 0xDF	; 223
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    39d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    39d6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    39d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    39dc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    39de:	84 b5       	in	r24, 0x24	; 36
    39e0:	8f 77       	andi	r24, 0x7F	; 127
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    39e4:	84 b5       	in	r24, 0x24	; 36
    39e6:	8f 7d       	andi	r24, 0xDF	; 223
    39e8:	84 bd       	out	0x24, r24	; 36
    39ea:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    39ec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    39f0:	8f 77       	andi	r24, 0x7F	; 127
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    39f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    39f8:	8f 7d       	andi	r24, 0xDF	; 223
    39fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    39fe:	08 95       	ret

00003a00 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	fc 01       	movw	r30, r24
    3a08:	e7 50       	subi	r30, 0x07	; 7
    3a0a:	f8 4f       	sbci	r31, 0xF8	; 248
    3a0c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3a0e:	fc 01       	movw	r30, r24
    3a10:	e3 5f       	subi	r30, 0xF3	; 243
    3a12:	f7 4f       	sbci	r31, 0xF7	; 247
    3a14:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3a16:	88 23       	and	r24, r24
    3a18:	61 f1       	breq	.+88     	; 0x3a72 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	fc 01       	movw	r30, r24
    3a22:	eb 5c       	subi	r30, 0xCB	; 203
    3a24:	f7 4f       	sbci	r31, 0xF7	; 247
    3a26:	c5 91       	lpm	r28, Z+
    3a28:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	e5 5d       	subi	r30, 0xD5	; 213
    3a2e:	f7 4f       	sbci	r31, 0xF7	; 247
    3a30:	a5 91       	lpm	r26, Z+
    3a32:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3a34:	61 11       	cpse	r22, r1
    3a36:	09 c0       	rjmp	.+18     	; 0x3a4a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3a38:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a3a:	f8 94       	cli
		*reg &= ~bit;
    3a3c:	88 81       	ld	r24, Y
    3a3e:	20 95       	com	r18
    3a40:	82 23       	and	r24, r18
    3a42:	88 83       	st	Y, r24
		*out &= ~bit;
    3a44:	ec 91       	ld	r30, X
    3a46:	2e 23       	and	r18, r30
    3a48:	0b c0       	rjmp	.+22     	; 0x3a60 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3a4a:	62 30       	cpi	r22, 0x02	; 2
    3a4c:	61 f4       	brne	.+24     	; 0x3a66 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3a4e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a50:	f8 94       	cli
		*reg &= ~bit;
    3a52:	88 81       	ld	r24, Y
    3a54:	32 2f       	mov	r19, r18
    3a56:	30 95       	com	r19
    3a58:	83 23       	and	r24, r19
    3a5a:	88 83       	st	Y, r24
		*out |= bit;
    3a5c:	ec 91       	ld	r30, X
    3a5e:	2e 2b       	or	r18, r30
    3a60:	2c 93       	st	X, r18
		SREG = oldSREG;
    3a62:	9f bf       	out	0x3f, r25	; 63
    3a64:	06 c0       	rjmp	.+12     	; 0x3a72 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3a66:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3a68:	f8 94       	cli
		*reg |= bit;
    3a6a:	e8 81       	ld	r30, Y
    3a6c:	2e 2b       	or	r18, r30
    3a6e:	28 83       	st	Y, r18
		SREG = oldSREG;
    3a70:	8f bf       	out	0x3f, r24	; 63
	}
}
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	08 95       	ret

00003a78 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3a78:	1f 93       	push	r17
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3a7e:	28 2f       	mov	r18, r24
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	f9 01       	movw	r30, r18
    3a84:	eb 51       	subi	r30, 0x1B	; 27
    3a86:	f8 4f       	sbci	r31, 0xF8	; 248
    3a88:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3a8a:	f9 01       	movw	r30, r18
    3a8c:	e7 50       	subi	r30, 0x07	; 7
    3a8e:	f8 4f       	sbci	r31, 0xF8	; 248
    3a90:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3a92:	f9 01       	movw	r30, r18
    3a94:	e3 5f       	subi	r30, 0xF3	; 243
    3a96:	f7 4f       	sbci	r31, 0xF7	; 247
    3a98:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3a9a:	cc 23       	and	r28, r28
    3a9c:	c1 f0       	breq	.+48     	; 0x3ace <digitalWrite+0x56>
    3a9e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3aa0:	81 11       	cpse	r24, r1
    3aa2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <turnOffPWM>

	out = portOutputRegister(port);
    3aa6:	ec 2f       	mov	r30, r28
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	ee 0f       	add	r30, r30
    3aac:	ff 1f       	adc	r31, r31
    3aae:	e5 5d       	subi	r30, 0xD5	; 213
    3ab0:	f7 4f       	sbci	r31, 0xF7	; 247
    3ab2:	a5 91       	lpm	r26, Z+
    3ab4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3ab6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3ab8:	f8 94       	cli

	if (val == LOW) {
    3aba:	11 11       	cpse	r17, r1
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <digitalWrite+0x4e>
		*out &= ~bit;
    3abe:	8c 91       	ld	r24, X
    3ac0:	d0 95       	com	r29
    3ac2:	d8 23       	and	r29, r24
    3ac4:	02 c0       	rjmp	.+4      	; 0x3aca <digitalWrite+0x52>
	} else {
		*out |= bit;
    3ac6:	ec 91       	ld	r30, X
    3ac8:	de 2b       	or	r29, r30
    3aca:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3acc:	9f bf       	out	0x3f, r25	; 63
}
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	1f 91       	pop	r17
    3ad4:	08 95       	ret

00003ad6 <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	80 81       	ld	r24, Z
    3ada:	91 81       	ldd	r25, Z+1	; 0x01
    3adc:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <free>

00003ae0 <_ZN6String10invalidateEv>:
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	ec 01       	movw	r28, r24
    3ae6:	88 81       	ld	r24, Y
    3ae8:	99 81       	ldd	r25, Y+1	; 0x01
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	11 f0       	breq	.+4      	; 0x3af2 <_ZN6String10invalidateEv+0x12>
    3aee:	0e 94 ca 21 	call	0x4394	; 0x4394 <free>
    3af2:	19 82       	std	Y+1, r1	; 0x01
    3af4:	18 82       	st	Y, r1
    3af6:	1d 82       	std	Y+5, r1	; 0x05
    3af8:	1c 82       	std	Y+4, r1	; 0x04
    3afa:	1b 82       	std	Y+3, r1	; 0x03
    3afc:	1a 82       	std	Y+2, r1	; 0x02
    3afe:	df 91       	pop	r29
    3b00:	cf 91       	pop	r28
    3b02:	08 95       	ret

00003b04 <_ZN6String12changeBufferEj>:
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	ec 01       	movw	r28, r24
    3b0e:	8b 01       	movw	r16, r22
    3b10:	6f 5f       	subi	r22, 0xFF	; 255
    3b12:	7f 4f       	sbci	r23, 0xFF	; 255
    3b14:	88 81       	ld	r24, Y
    3b16:	99 81       	ldd	r25, Y+1	; 0x01
    3b18:	0e 94 53 22 	call	0x44a6	; 0x44a6 <realloc>
    3b1c:	00 97       	sbiw	r24, 0x00	; 0
    3b1e:	31 f0       	breq	.+12     	; 0x3b2c <_ZN6String12changeBufferEj+0x28>
    3b20:	99 83       	std	Y+1, r25	; 0x01
    3b22:	88 83       	st	Y, r24
    3b24:	1b 83       	std	Y+3, r17	; 0x03
    3b26:	0a 83       	std	Y+2, r16	; 0x02
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	01 c0       	rjmp	.+2      	; 0x3b2e <_ZN6String12changeBufferEj+0x2a>
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <_ZN6String7reserveEj>:
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	ec 01       	movw	r28, r24
    3b3e:	88 81       	ld	r24, Y
    3b40:	99 81       	ldd	r25, Y+1	; 0x01
    3b42:	89 2b       	or	r24, r25
    3b44:	29 f0       	breq	.+10     	; 0x3b50 <_ZN6String7reserveEj+0x18>
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	86 17       	cp	r24, r22
    3b4c:	97 07       	cpc	r25, r23
    3b4e:	60 f4       	brcc	.+24     	; 0x3b68 <_ZN6String7reserveEj+0x30>
    3b50:	ce 01       	movw	r24, r28
    3b52:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN6String12changeBufferEj>
    3b56:	88 23       	and	r24, r24
    3b58:	41 f0       	breq	.+16     	; 0x3b6a <_ZN6String7reserveEj+0x32>
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b5e:	89 2b       	or	r24, r25
    3b60:	19 f4       	brne	.+6      	; 0x3b68 <_ZN6String7reserveEj+0x30>
    3b62:	e8 81       	ld	r30, Y
    3b64:	f9 81       	ldd	r31, Y+1	; 0x01
    3b66:	10 82       	st	Z, r1
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	08 95       	ret

00003b70 <_ZN6String4copyEPKcj>:
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	ec 01       	movw	r28, r24
    3b7e:	7b 01       	movw	r14, r22
    3b80:	8a 01       	movw	r16, r20
    3b82:	ba 01       	movw	r22, r20
    3b84:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZN6String7reserveEj>
    3b88:	81 11       	cpse	r24, r1
    3b8a:	04 c0       	rjmp	.+8      	; 0x3b94 <_ZN6String4copyEPKcj+0x24>
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN6String10invalidateEv>
    3b92:	07 c0       	rjmp	.+14     	; 0x3ba2 <_ZN6String4copyEPKcj+0x32>
    3b94:	1d 83       	std	Y+5, r17	; 0x05
    3b96:	0c 83       	std	Y+4, r16	; 0x04
    3b98:	b7 01       	movw	r22, r14
    3b9a:	88 81       	ld	r24, Y
    3b9c:	99 81       	ldd	r25, Y+1	; 0x01
    3b9e:	0e 94 77 23 	call	0x46ee	; 0x46ee <strcpy>
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	1f 91       	pop	r17
    3baa:	0f 91       	pop	r16
    3bac:	ff 90       	pop	r15
    3bae:	ef 90       	pop	r14
    3bb0:	08 95       	ret

00003bb2 <_ZN6StringC1EPKc>:
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	11 82       	std	Z+1, r1	; 0x01
    3bb6:	10 82       	st	Z, r1
    3bb8:	13 82       	std	Z+3, r1	; 0x03
    3bba:	12 82       	std	Z+2, r1	; 0x02
    3bbc:	15 82       	std	Z+5, r1	; 0x05
    3bbe:	14 82       	std	Z+4, r1	; 0x04
    3bc0:	61 15       	cp	r22, r1
    3bc2:	71 05       	cpc	r23, r1
    3bc4:	51 f0       	breq	.+20     	; 0x3bda <_ZN6StringC1EPKc+0x28>
    3bc6:	fb 01       	movw	r30, r22
    3bc8:	01 90       	ld	r0, Z+
    3bca:	00 20       	and	r0, r0
    3bcc:	e9 f7       	brne	.-6      	; 0x3bc8 <_ZN6StringC1EPKc+0x16>
    3bce:	31 97       	sbiw	r30, 0x01	; 1
    3bd0:	af 01       	movw	r20, r30
    3bd2:	46 1b       	sub	r20, r22
    3bd4:	57 0b       	sbc	r21, r23
    3bd6:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <_ZN6String4copyEPKcj>
    3bda:	08 95       	ret

00003bdc <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	8c 01       	movw	r16, r24
    3be6:	eb 01       	movw	r28, r22
	if (buffer) {
    3be8:	fc 01       	movw	r30, r24
    3bea:	80 81       	ld	r24, Z
    3bec:	91 81       	ldd	r25, Z+1	; 0x01
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	99 f0       	breq	.+38     	; 0x3c18 <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    3bf2:	42 81       	ldd	r20, Z+2	; 0x02
    3bf4:	53 81       	ldd	r21, Z+3	; 0x03
    3bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    3bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    3bfa:	42 17       	cp	r20, r18
    3bfc:	53 07       	cpc	r21, r19
    3bfe:	50 f0       	brcs	.+20     	; 0x3c14 <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    3c00:	68 81       	ld	r22, Y
    3c02:	79 81       	ldd	r23, Y+1	; 0x01
    3c04:	0e 94 77 23 	call	0x46ee	; 0x46ee <strcpy>
			len = rhs.len;
    3c08:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	95 83       	std	Z+5, r25	; 0x05
    3c10:	84 83       	std	Z+4, r24	; 0x04
    3c12:	13 c0       	rjmp	.+38     	; 0x3c3a <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    3c14:	0e 94 ca 21 	call	0x4394	; 0x4394 <free>
		}
	}
	buffer = rhs.buffer;
    3c18:	88 81       	ld	r24, Y
    3c1a:	99 81       	ldd	r25, Y+1	; 0x01
    3c1c:	f8 01       	movw	r30, r16
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	93 83       	std	Z+3, r25	; 0x03
    3c28:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    3c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c2e:	95 83       	std	Z+5, r25	; 0x05
    3c30:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    3c32:	19 82       	std	Y+1, r1	; 0x01
    3c34:	18 82       	st	Y, r1
	rhs.capacity = 0;
    3c36:	1b 82       	std	Y+3, r1	; 0x03
    3c38:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    3c3a:	1d 82       	std	Y+5, r1	; 0x05
    3c3c:	1c 82       	std	Y+4, r1	; 0x04
}
    3c3e:	df 91       	pop	r29
    3c40:	cf 91       	pop	r28
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	08 95       	ret

00003c48 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    3c48:	cf 93       	push	r28
    3c4a:	df 93       	push	r29
    3c4c:	ec 01       	movw	r28, r24
    3c4e:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3c50:	86 17       	cp	r24, r22
    3c52:	97 07       	cpc	r25, r23
    3c54:	61 f0       	breq	.+24     	; 0x3c6e <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	61 15       	cp	r22, r1
    3c5c:	71 05       	cpc	r23, r1
    3c5e:	29 f0       	breq	.+10     	; 0x3c6a <_ZN6StringaSERKS_+0x22>
    3c60:	44 81       	ldd	r20, Z+4	; 0x04
    3c62:	55 81       	ldd	r21, Z+5	; 0x05
    3c64:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <_ZN6String4copyEPKcj>
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <_ZN6StringaSERKS_+0x26>
	else invalidate();
    3c6a:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN6String10invalidateEv>
	
	return *this;
}
    3c6e:	ce 01       	movw	r24, r28
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	08 95       	ret

00003c76 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3c76:	fc 01       	movw	r30, r24
    3c78:	11 82       	std	Z+1, r1	; 0x01
    3c7a:	10 82       	st	Z, r1
	capacity = 0;
    3c7c:	13 82       	std	Z+3, r1	; 0x03
    3c7e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3c80:	15 82       	std	Z+5, r1	; 0x05
    3c82:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    3c84:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <_ZN6StringaSERKS_>

00003c88 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    3c88:	cf 93       	push	r28
    3c8a:	df 93       	push	r29
    3c8c:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    3c8e:	86 17       	cp	r24, r22
    3c90:	97 07       	cpc	r25, r23
    3c92:	11 f0       	breq	.+4      	; 0x3c98 <_ZN6StringaSEOS_+0x10>
    3c94:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN6String4moveERS_>
	return *this;
}
    3c98:	ce 01       	movw	r24, r28
    3c9a:	df 91       	pop	r29
    3c9c:	cf 91       	pop	r28
    3c9e:	08 95       	ret

00003ca0 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3ca0:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3ca4:	30 91 78 05 	lds	r19, 0x0578	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ca8:	28 17       	cp	r18, r24
    3caa:	39 07       	cpc	r19, r25
    3cac:	b9 f4       	brne	.+46     	; 0x3cdc <_ZN14SoftwareSerial4readEv+0x3c>
    3cae:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cb2:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3cb6:	98 17       	cp	r25, r24
    3cb8:	89 f0       	breq	.+34     	; 0x3cdc <_ZN14SoftwareSerial4readEv+0x3c>
    3cba:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	e9 5c       	subi	r30, 0xC9	; 201
    3cc2:	fa 4f       	sbci	r31, 0xFA	; 250
    3cc4:	80 81       	ld	r24, Z
    3cc6:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	2f 5f       	subi	r18, 0xFF	; 255
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	2f 73       	andi	r18, 0x3F	; 63
    3cd2:	33 27       	eor	r19, r19
    3cd4:	20 93 35 05 	sts	0x0535, r18	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	08 95       	ret
    3cdc:	8f ef       	ldi	r24, 0xFF	; 255
    3cde:	9f ef       	ldi	r25, 0xFF	; 255
    3ce0:	08 95       	ret

00003ce2 <_ZN14SoftwareSerial5writeEh>:
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	dc 01       	movw	r26, r24
    3cea:	5c 96       	adiw	r26, 0x1c	; 28
    3cec:	8d 91       	ld	r24, X+
    3cee:	9c 91       	ld	r25, X
    3cf0:	5d 97       	sbiw	r26, 0x1d	; 29
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	39 f4       	brne	.+14     	; 0x3d04 <_ZN14SoftwareSerial5writeEh+0x22>
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	13 96       	adiw	r26, 0x03	; 3
    3cfc:	3c 93       	st	X, r19
    3cfe:	2e 93       	st	-X, r18
    3d00:	12 97       	sbiw	r26, 0x02	; 2
    3d02:	3b c0       	rjmp	.+118    	; 0x3d7a <_ZN14SoftwareSerial5writeEh+0x98>
    3d04:	51 96       	adiw	r26, 0x11	; 17
    3d06:	ed 91       	ld	r30, X+
    3d08:	fc 91       	ld	r31, X
    3d0a:	52 97       	sbiw	r26, 0x12	; 18
    3d0c:	50 96       	adiw	r26, 0x10	; 16
    3d0e:	2c 91       	ld	r18, X
    3d10:	50 97       	sbiw	r26, 0x10	; 16
    3d12:	32 2f       	mov	r19, r18
    3d14:	30 95       	com	r19
    3d16:	1f b7       	in	r17, 0x3f	; 63
    3d18:	5e 96       	adiw	r26, 0x1e	; 30
    3d1a:	4c 91       	ld	r20, X
    3d1c:	5e 97       	sbiw	r26, 0x1e	; 30
    3d1e:	74 2f       	mov	r23, r20
    3d20:	72 70       	andi	r23, 0x02	; 2
    3d22:	41 fd       	sbrc	r20, 1
    3d24:	60 95       	com	r22
    3d26:	f8 94       	cli
    3d28:	40 81       	ld	r20, Z
    3d2a:	77 23       	and	r23, r23
    3d2c:	11 f0       	breq	.+4      	; 0x3d32 <_ZN14SoftwareSerial5writeEh+0x50>
    3d2e:	42 2b       	or	r20, r18
    3d30:	01 c0       	rjmp	.+2      	; 0x3d34 <_ZN14SoftwareSerial5writeEh+0x52>
    3d32:	43 23       	and	r20, r19
    3d34:	40 83       	st	Z, r20
    3d36:	ec 01       	movw	r28, r24
    3d38:	21 97       	sbiw	r28, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <_ZN14SoftwareSerial5writeEh+0x56>
    3d3c:	48 e0       	ldi	r20, 0x08	; 8
    3d3e:	50 81       	ld	r21, Z
    3d40:	60 ff       	sbrs	r22, 0
    3d42:	02 c0       	rjmp	.+4      	; 0x3d48 <_ZN14SoftwareSerial5writeEh+0x66>
    3d44:	52 2b       	or	r21, r18
    3d46:	01 c0       	rjmp	.+2      	; 0x3d4a <_ZN14SoftwareSerial5writeEh+0x68>
    3d48:	53 23       	and	r21, r19
    3d4a:	50 83       	st	Z, r21
    3d4c:	ec 01       	movw	r28, r24
    3d4e:	21 97       	sbiw	r28, 0x01	; 1
    3d50:	f1 f7       	brne	.-4      	; 0x3d4e <_ZN14SoftwareSerial5writeEh+0x6c>
    3d52:	66 95       	lsr	r22
    3d54:	41 50       	subi	r20, 0x01	; 1
    3d56:	99 f7       	brne	.-26     	; 0x3d3e <_ZN14SoftwareSerial5writeEh+0x5c>
    3d58:	80 81       	ld	r24, Z
    3d5a:	77 23       	and	r23, r23
    3d5c:	19 f0       	breq	.+6      	; 0x3d64 <_ZN14SoftwareSerial5writeEh+0x82>
    3d5e:	83 23       	and	r24, r19
    3d60:	80 83       	st	Z, r24
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <_ZN14SoftwareSerial5writeEh+0x86>
    3d64:	28 2b       	or	r18, r24
    3d66:	20 83       	st	Z, r18
    3d68:	1f bf       	out	0x3f, r17	; 63
    3d6a:	5c 96       	adiw	r26, 0x1c	; 28
    3d6c:	8d 91       	ld	r24, X+
    3d6e:	9c 91       	ld	r25, X
    3d70:	5d 97       	sbiw	r26, 0x1d	; 29
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <_ZN14SoftwareSerial5writeEh+0x90>
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	08 95       	ret

00003d82 <_ZN14SoftwareSerial5flushEv>:
    3d82:	08 95       	ret

00003d84 <_ZN14SoftwareSerial4peekEv>:
    3d84:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3d88:	30 91 78 05 	lds	r19, 0x0578	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d8c:	28 17       	cp	r18, r24
    3d8e:	39 07       	cpc	r19, r25
    3d90:	71 f4       	brne	.+28     	; 0x3dae <_ZN14SoftwareSerial4peekEv+0x2a>
    3d92:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d96:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d9a:	98 17       	cp	r25, r24
    3d9c:	41 f0       	breq	.+16     	; 0x3dae <_ZN14SoftwareSerial4peekEv+0x2a>
    3d9e:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	e9 5c       	subi	r30, 0xC9	; 201
    3da6:	fa 4f       	sbci	r31, 0xFA	; 250
    3da8:	80 81       	ld	r24, Z
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	08 95       	ret
    3dae:	8f ef       	ldi	r24, 0xFF	; 255
    3db0:	9f ef       	ldi	r25, 0xFF	; 255
    3db2:	08 95       	ret

00003db4 <_ZN14SoftwareSerial9availableEv>:
    3db4:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3db8:	30 91 78 05 	lds	r19, 0x0578	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3dbc:	28 17       	cp	r18, r24
    3dbe:	39 07       	cpc	r19, r25
    3dc0:	71 f4       	brne	.+28     	; 0x3dde <_ZN14SoftwareSerial9availableEv+0x2a>
    3dc2:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3dc6:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	80 5c       	subi	r24, 0xC0	; 192
    3dce:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd0:	82 1b       	sub	r24, r18
    3dd2:	91 09       	sbc	r25, r1
    3dd4:	60 e4       	ldi	r22, 0x40	; 64
    3dd6:	70 e0       	ldi	r23, 0x00	; 0
    3dd8:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__divmodhi4>
    3ddc:	08 95       	ret
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	08 95       	ret

00003de4 <_ZN14SoftwareSerial13stopListeningEv>:
    3de4:	e0 91 77 05 	lds	r30, 0x0577	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3de8:	f0 91 78 05 	lds	r31, 0x0578	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3dec:	e8 17       	cp	r30, r24
    3dee:	f9 07       	cpc	r31, r25
    3df0:	69 f4       	brne	.+26     	; 0x3e0c <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3df2:	a3 89       	ldd	r26, Z+19	; 0x13
    3df4:	b4 89       	ldd	r27, Z+20	; 0x14
    3df6:	9c 91       	ld	r25, X
    3df8:	85 89       	ldd	r24, Z+21	; 0x15
    3dfa:	80 95       	com	r24
    3dfc:	89 23       	and	r24, r25
    3dfe:	8c 93       	st	X, r24
    3e00:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e04:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	08 95       	ret
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	08 95       	ret

00003e10 <_ZN14SoftwareSerial6listenEv>:
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	ec 01       	movw	r28, r24
    3e16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e1a:	89 2b       	or	r24, r25
    3e1c:	f1 f0       	breq	.+60     	; 0x3e5a <_ZN14SoftwareSerial6listenEv+0x4a>
    3e1e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3e22:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e26:	c8 17       	cp	r28, r24
    3e28:	d9 07       	cpc	r29, r25
    3e2a:	b9 f0       	breq	.+46     	; 0x3e5a <_ZN14SoftwareSerial6listenEv+0x4a>
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	11 f0       	breq	.+4      	; 0x3e34 <_ZN14SoftwareSerial6listenEv+0x24>
    3e30:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <_ZN14SoftwareSerial13stopListeningEv>
    3e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e36:	8e 7f       	andi	r24, 0xFE	; 254
    3e38:	8e 8f       	std	Y+30, r24	; 0x1e
    3e3a:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e3e:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e42:	d0 93 78 05 	sts	0x0578, r29	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e46:	c0 93 77 05 	sts	0x0577, r28	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3e4a:	eb 89       	ldd	r30, Y+19	; 0x13
    3e4c:	fc 89       	ldd	r31, Y+20	; 0x14
    3e4e:	90 81       	ld	r25, Z
    3e50:	8d 89       	ldd	r24, Y+21	; 0x15
    3e52:	89 2b       	or	r24, r25
    3e54:	80 83       	st	Z, r24
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	01 c0       	rjmp	.+2      	; 0x3e5c <_ZN14SoftwareSerial6listenEv+0x4c>
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	08 95       	ret

00003e62 <__vector_3>:
    3e62:	1f 92       	push	r1
    3e64:	0f 92       	push	r0
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	0f 92       	push	r0
    3e6a:	11 24       	eor	r1, r1
    3e6c:	2f 93       	push	r18
    3e6e:	3f 93       	push	r19
    3e70:	4f 93       	push	r20
    3e72:	5f 93       	push	r21
    3e74:	6f 93       	push	r22
    3e76:	7f 93       	push	r23
    3e78:	8f 93       	push	r24
    3e7a:	9f 93       	push	r25
    3e7c:	af 93       	push	r26
    3e7e:	bf 93       	push	r27
    3e80:	ef 93       	push	r30
    3e82:	ff 93       	push	r31
    3e84:	e0 91 77 05 	lds	r30, 0x0577	; 0x800577 <_ZN14SoftwareSerial13active_objectE>
    3e88:	f0 91 78 05 	lds	r31, 0x0578	; 0x800578 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e8c:	30 97       	sbiw	r30, 0x00	; 0
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <__vector_3+0x30>
    3e90:	51 c0       	rjmp	.+162    	; 0x3f34 <__vector_3+0xd2>
    3e92:	96 8d       	ldd	r25, Z+30	; 0x1e
    3e94:	a6 85       	ldd	r26, Z+14	; 0x0e
    3e96:	b7 85       	ldd	r27, Z+15	; 0x0f
    3e98:	85 85       	ldd	r24, Z+13	; 0x0d
    3e9a:	91 ff       	sbrs	r25, 1
    3e9c:	04 c0       	rjmp	.+8      	; 0x3ea6 <__vector_3+0x44>
    3e9e:	9c 91       	ld	r25, X
    3ea0:	89 23       	and	r24, r25
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <__vector_3+0x4c>
    3ea4:	47 c0       	rjmp	.+142    	; 0x3f34 <__vector_3+0xd2>
    3ea6:	9c 91       	ld	r25, X
    3ea8:	89 23       	and	r24, r25
    3eaa:	09 f0       	breq	.+2      	; 0x3eae <__vector_3+0x4c>
    3eac:	43 c0       	rjmp	.+134    	; 0x3f34 <__vector_3+0xd2>
    3eae:	a3 89       	ldd	r26, Z+19	; 0x13
    3eb0:	b4 89       	ldd	r27, Z+20	; 0x14
    3eb2:	9c 91       	ld	r25, X
    3eb4:	85 89       	ldd	r24, Z+21	; 0x15
    3eb6:	80 95       	com	r24
    3eb8:	89 23       	and	r24, r25
    3eba:	8c 93       	st	X, r24
    3ebc:	86 89       	ldd	r24, Z+22	; 0x16
    3ebe:	97 89       	ldd	r25, Z+23	; 0x17
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <__vector_3+0x5e>
    3ec4:	60 8d       	ldd	r22, Z+24	; 0x18
    3ec6:	71 8d       	ldd	r23, Z+25	; 0x19
    3ec8:	a6 85       	ldd	r26, Z+14	; 0x0e
    3eca:	b7 85       	ldd	r27, Z+15	; 0x0f
    3ecc:	55 85       	ldd	r21, Z+13	; 0x0d
    3ece:	38 e0       	ldi	r19, 0x08	; 8
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <__vector_3+0x72>
    3ed8:	82 2f       	mov	r24, r18
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	95 95       	asr	r25
    3ede:	87 95       	ror	r24
    3ee0:	28 2f       	mov	r18, r24
    3ee2:	4c 91       	ld	r20, X
    3ee4:	45 23       	and	r20, r21
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <__vector_3+0x88>
    3ee8:	20 68       	ori	r18, 0x80	; 128
    3eea:	31 50       	subi	r19, 0x01	; 1
    3eec:	91 f7       	brne	.-28     	; 0x3ed2 <__vector_3+0x70>
    3eee:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ef0:	81 fd       	sbrc	r24, 1
    3ef2:	20 95       	com	r18
    3ef4:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	01 96       	adiw	r24, 0x01	; 1
    3efc:	8f 73       	andi	r24, 0x3F	; 63
    3efe:	99 27       	eor	r25, r25
    3f00:	30 91 35 05 	lds	r19, 0x0535	; 0x800535 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f04:	38 17       	cp	r19, r24
    3f06:	49 f0       	breq	.+18     	; 0x3f1a <__vector_3+0xb8>
    3f08:	a0 91 36 05 	lds	r26, 0x0536	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	a9 5c       	subi	r26, 0xC9	; 201
    3f10:	ba 4f       	sbci	r27, 0xFA	; 250
    3f12:	2c 93       	st	X, r18
    3f14:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f18:	03 c0       	rjmp	.+6      	; 0x3f20 <__vector_3+0xbe>
    3f1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f1c:	81 60       	ori	r24, 0x01	; 1
    3f1e:	86 8f       	std	Z+30, r24	; 0x1e
    3f20:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f22:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <__vector_3+0xc2>
    3f28:	a3 89       	ldd	r26, Z+19	; 0x13
    3f2a:	b4 89       	ldd	r27, Z+20	; 0x14
    3f2c:	9c 91       	ld	r25, X
    3f2e:	85 89       	ldd	r24, Z+21	; 0x15
    3f30:	89 2b       	or	r24, r25
    3f32:	8c 93       	st	X, r24
    3f34:	ff 91       	pop	r31
    3f36:	ef 91       	pop	r30
    3f38:	bf 91       	pop	r27
    3f3a:	af 91       	pop	r26
    3f3c:	9f 91       	pop	r25
    3f3e:	8f 91       	pop	r24
    3f40:	7f 91       	pop	r23
    3f42:	6f 91       	pop	r22
    3f44:	5f 91       	pop	r21
    3f46:	4f 91       	pop	r20
    3f48:	3f 91       	pop	r19
    3f4a:	2f 91       	pop	r18
    3f4c:	0f 90       	pop	r0
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	0f 90       	pop	r0
    3f52:	1f 90       	pop	r1
    3f54:	18 95       	reti

00003f56 <_ZN14SoftwareSerial5setTXEh>:
    3f56:	1f 93       	push	r17
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	ec 01       	movw	r28, r24
    3f5e:	16 2f       	mov	r17, r22
    3f60:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3f62:	66 95       	lsr	r22
    3f64:	61 70       	andi	r22, 0x01	; 1
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	68 27       	eor	r22, r24
    3f6a:	81 2f       	mov	r24, r17
    3f6c:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
    3f70:	61 e0       	ldi	r22, 0x01	; 1
    3f72:	81 2f       	mov	r24, r17
    3f74:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <pinMode>
    3f78:	81 2f       	mov	r24, r17
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	e7 50       	subi	r30, 0x07	; 7
    3f80:	f8 4f       	sbci	r31, 0xF8	; 248
    3f82:	e4 91       	lpm	r30, Z
    3f84:	e8 8b       	std	Y+16, r30	; 0x10
    3f86:	fc 01       	movw	r30, r24
    3f88:	e3 5f       	subi	r30, 0xF3	; 243
    3f8a:	f7 4f       	sbci	r31, 0xF7	; 247
    3f8c:	e4 91       	lpm	r30, Z
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	ee 0f       	add	r30, r30
    3f92:	ff 1f       	adc	r31, r31
    3f94:	e5 5d       	subi	r30, 0xD5	; 213
    3f96:	f7 4f       	sbci	r31, 0xF7	; 247
    3f98:	85 91       	lpm	r24, Z+
    3f9a:	94 91       	lpm	r25, Z
    3f9c:	9a 8b       	std	Y+18, r25	; 0x12
    3f9e:	89 8b       	std	Y+17, r24	; 0x11
    3fa0:	df 91       	pop	r29
    3fa2:	cf 91       	pop	r28
    3fa4:	1f 91       	pop	r17
    3fa6:	08 95       	ret

00003fa8 <_ZN14SoftwareSerial5setRXEh>:
    3fa8:	1f 93       	push	r17
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	ec 01       	movw	r28, r24
    3fb0:	16 2f       	mov	r17, r22
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	81 2f       	mov	r24, r17
    3fb6:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <pinMode>
    3fba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fbc:	81 fd       	sbrc	r24, 1
    3fbe:	04 c0       	rjmp	.+8      	; 0x3fc8 <_ZN14SoftwareSerial5setRXEh+0x20>
    3fc0:	61 e0       	ldi	r22, 0x01	; 1
    3fc2:	81 2f       	mov	r24, r17
    3fc4:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <digitalWrite>
    3fc8:	1c 87       	std	Y+12, r17	; 0x0c
    3fca:	81 2f       	mov	r24, r17
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	fc 01       	movw	r30, r24
    3fd0:	e7 50       	subi	r30, 0x07	; 7
    3fd2:	f8 4f       	sbci	r31, 0xF8	; 248
    3fd4:	e4 91       	lpm	r30, Z
    3fd6:	ed 87       	std	Y+13, r30	; 0x0d
    3fd8:	fc 01       	movw	r30, r24
    3fda:	e3 5f       	subi	r30, 0xF3	; 243
    3fdc:	f7 4f       	sbci	r31, 0xF7	; 247
    3fde:	e4 91       	lpm	r30, Z
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	ef 5d       	subi	r30, 0xDF	; 223
    3fe8:	f7 4f       	sbci	r31, 0xF7	; 247
    3fea:	85 91       	lpm	r24, Z+
    3fec:	94 91       	lpm	r25, Z
    3fee:	9f 87       	std	Y+15, r25	; 0x0f
    3ff0:	8e 87       	std	Y+14, r24	; 0x0e
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	1f 91       	pop	r17
    3ff8:	08 95       	ret

00003ffa <_ZN14SoftwareSerialC1Ehhb>:
    3ffa:	1f 93       	push	r17
    3ffc:	cf 93       	push	r28
    3ffe:	df 93       	push	r29
    4000:	ec 01       	movw	r28, r24
    4002:	16 2f       	mov	r17, r22
    4004:	1b 82       	std	Y+3, r1	; 0x03
    4006:	1a 82       	std	Y+2, r1	; 0x02
    4008:	88 ee       	ldi	r24, 0xE8	; 232
    400a:	93 e0       	ldi	r25, 0x03	; 3
    400c:	a0 e0       	ldi	r26, 0x00	; 0
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	8c 83       	std	Y+4, r24	; 0x04
    4012:	9d 83       	std	Y+5, r25	; 0x05
    4014:	ae 83       	std	Y+6, r26	; 0x06
    4016:	bf 83       	std	Y+7, r27	; 0x07
    4018:	8f e8       	ldi	r24, 0x8F	; 143
    401a:	92 e0       	ldi	r25, 0x02	; 2
    401c:	99 83       	std	Y+1, r25	; 0x01
    401e:	88 83       	st	Y, r24
    4020:	1f 8a       	std	Y+23, r1	; 0x17
    4022:	1e 8a       	std	Y+22, r1	; 0x16
    4024:	19 8e       	std	Y+25, r1	; 0x19
    4026:	18 8e       	std	Y+24, r1	; 0x18
    4028:	1b 8e       	std	Y+27, r1	; 0x1b
    402a:	1a 8e       	std	Y+26, r1	; 0x1a
    402c:	1d 8e       	std	Y+29, r1	; 0x1d
    402e:	1c 8e       	std	Y+28, r1	; 0x1c
    4030:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4032:	8e 7f       	andi	r24, 0xFE	; 254
    4034:	20 fb       	bst	r18, 0
    4036:	81 f9       	bld	r24, 1
    4038:	8e 8f       	std	Y+30, r24	; 0x1e
    403a:	64 2f       	mov	r22, r20
    403c:	ce 01       	movw	r24, r28
    403e:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN14SoftwareSerial5setTXEh>
    4042:	61 2f       	mov	r22, r17
    4044:	ce 01       	movw	r24, r28
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <_ZN14SoftwareSerial5setRXEh>

00004050 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	ec 01       	movw	r28, r24
    4056:	9a 01       	movw	r18, r20
    4058:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    405a:	1b 8e       	std	Y+27, r1	; 0x1b
    405c:	1a 8e       	std	Y+26, r1	; 0x1a
    405e:	19 8e       	std	Y+25, r1	; 0x19
    4060:	18 8e       	std	Y+24, r1	; 0x18
    4062:	1f 8a       	std	Y+23, r1	; 0x17
    4064:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	79 e0       	ldi	r23, 0x09	; 9
    406a:	8d e3       	ldi	r24, 0x3D	; 61
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 0d 21 	call	0x421a	; 0x421a <__divmodsi4>
    4072:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4074:	24 30       	cpi	r18, 0x04	; 4
    4076:	31 05       	cpc	r19, r1
    4078:	18 f0       	brcs	.+6      	; 0x4080 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    407a:	c9 01       	movw	r24, r18
    407c:	03 97       	sbiw	r24, 0x03	; 3
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4084:	9d 8f       	std	Y+29, r25	; 0x1d
    4086:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4088:	6c 85       	ldd	r22, Y+12	; 0x0c
    408a:	66 31       	cpi	r22, 0x16	; 22
    408c:	08 f0       	brcs	.+2      	; 0x4090 <_ZN14SoftwareSerial5beginEl+0x40>
    408e:	69 c0       	rjmp	.+210    	; 0x4162 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4090:	c9 01       	movw	r24, r18
    4092:	96 95       	lsr	r25
    4094:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4096:	84 31       	cpi	r24, 0x14	; 20
    4098:	91 05       	cpc	r25, r1
    409a:	10 f0       	brcs	.+4      	; 0x40a0 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    409c:	43 97       	sbiw	r24, 0x13	; 19
    409e:	02 c0       	rjmp	.+4      	; 0x40a4 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    40a4:	9f 8b       	std	Y+23, r25	; 0x17
    40a6:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    40a8:	36 97       	sbiw	r30, 0x06	; 6
    40aa:	18 f0       	brcs	.+6      	; 0x40b2 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    40ac:	c9 01       	movw	r24, r18
    40ae:	05 97       	sbiw	r24, 0x05	; 5
    40b0:	02 c0       	rjmp	.+4      	; 0x40b6 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    40b6:	99 8f       	std	Y+25, r25	; 0x19
    40b8:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    40ba:	c9 01       	movw	r24, r18
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	28 0f       	add	r18, r24
    40c2:	39 1f       	adc	r19, r25
    40c4:	36 95       	lsr	r19
    40c6:	27 95       	ror	r18
    40c8:	36 95       	lsr	r19
    40ca:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    40cc:	2d 30       	cpi	r18, 0x0D	; 13
    40ce:	31 05       	cpc	r19, r1
    40d0:	18 f0       	brcs	.+6      	; 0x40d8 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    40d2:	2c 50       	subi	r18, 0x0C	; 12
    40d4:	31 09       	sbc	r19, r1
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    40d8:	21 e0       	ldi	r18, 0x01	; 1
    40da:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    40dc:	3b 8f       	std	Y+27, r19	; 0x1b
    40de:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    40e0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    40e4:	68 30       	cpi	r22, 0x08	; 8
    40e6:	50 f0       	brcs	.+20     	; 0x40fc <_ZN14SoftwareSerial5beginEl+0xac>
    40e8:	21 e0       	ldi	r18, 0x01	; 1
    40ea:	6e 30       	cpi	r22, 0x0E	; 14
    40ec:	08 f4       	brcc	.+2      	; 0x40f0 <_ZN14SoftwareSerial5beginEl+0xa0>
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	01 c0       	rjmp	.+2      	; 0x40f6 <_ZN14SoftwareSerial5beginEl+0xa6>
    40f4:	88 0f       	add	r24, r24
    40f6:	2a 95       	dec	r18
    40f8:	ea f7       	brpl	.-6      	; 0x40f4 <_ZN14SoftwareSerial5beginEl+0xa4>
    40fa:	01 c0       	rjmp	.+2      	; 0x40fe <_ZN14SoftwareSerial5beginEl+0xae>
    40fc:	84 e0       	ldi	r24, 0x04	; 4
    40fe:	89 2b       	or	r24, r25
    4100:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4104:	9c 85       	ldd	r25, Y+12	; 0x0c
    4106:	98 30       	cpi	r25, 0x08	; 8
    4108:	38 f0       	brcs	.+14     	; 0x4118 <_ZN14SoftwareSerial5beginEl+0xc8>
    410a:	9e 30       	cpi	r25, 0x0E	; 14
    410c:	40 f0       	brcs	.+16     	; 0x411e <_ZN14SoftwareSerial5beginEl+0xce>
    410e:	96 31       	cpi	r25, 0x16	; 22
    4110:	48 f0       	brcs	.+18     	; 0x4124 <_ZN14SoftwareSerial5beginEl+0xd4>
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	08 c0       	rjmp	.+16     	; 0x4128 <_ZN14SoftwareSerial5beginEl+0xd8>
    4118:	2d e6       	ldi	r18, 0x6D	; 109
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	05 c0       	rjmp	.+10     	; 0x4128 <_ZN14SoftwareSerial5beginEl+0xd8>
    411e:	2b e6       	ldi	r18, 0x6B	; 107
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <_ZN14SoftwareSerial5beginEl+0xd8>
    4124:	2c e6       	ldi	r18, 0x6C	; 108
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	3c 8b       	std	Y+20, r19	; 0x14
    412a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    412c:	98 30       	cpi	r25, 0x08	; 8
    412e:	30 f4       	brcc	.+12     	; 0x413c <_ZN14SoftwareSerial5beginEl+0xec>
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	01 c0       	rjmp	.+2      	; 0x4136 <_ZN14SoftwareSerial5beginEl+0xe6>
    4134:	88 0f       	add	r24, r24
    4136:	9a 95       	dec	r25
    4138:	ea f7       	brpl	.-6      	; 0x4134 <_ZN14SoftwareSerial5beginEl+0xe4>
    413a:	0e c0       	rjmp	.+28     	; 0x4158 <_ZN14SoftwareSerial5beginEl+0x108>
    413c:	29 2f       	mov	r18, r25
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	9e 30       	cpi	r25, 0x0E	; 14
    4142:	18 f4       	brcc	.+6      	; 0x414a <_ZN14SoftwareSerial5beginEl+0xfa>
    4144:	28 50       	subi	r18, 0x08	; 8
    4146:	31 09       	sbc	r19, r1
    4148:	02 c0       	rjmp	.+4      	; 0x414e <_ZN14SoftwareSerial5beginEl+0xfe>
    414a:	2e 50       	subi	r18, 0x0E	; 14
    414c:	31 09       	sbc	r19, r1
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <_ZN14SoftwareSerial5beginEl+0x104>
    4152:	88 0f       	add	r24, r24
    4154:	2a 95       	dec	r18
    4156:	ea f7       	brpl	.-6      	; 0x4152 <_ZN14SoftwareSerial5beginEl+0x102>
    4158:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    415a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    415c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	f1 f7       	brne	.-4      	; 0x415e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4162:	ce 01       	movw	r24, r28
}
    4164:	df 91       	pop	r29
    4166:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4168:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <_ZN14SoftwareSerial6listenEv>

0000416c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    416c:	08 95       	ret

0000416e <__udivmodqi4>:
    416e:	99 1b       	sub	r25, r25
    4170:	79 e0       	ldi	r23, 0x09	; 9
    4172:	04 c0       	rjmp	.+8      	; 0x417c <__udivmodqi4_ep>

00004174 <__udivmodqi4_loop>:
    4174:	99 1f       	adc	r25, r25
    4176:	96 17       	cp	r25, r22
    4178:	08 f0       	brcs	.+2      	; 0x417c <__udivmodqi4_ep>
    417a:	96 1b       	sub	r25, r22

0000417c <__udivmodqi4_ep>:
    417c:	88 1f       	adc	r24, r24
    417e:	7a 95       	dec	r23
    4180:	c9 f7       	brne	.-14     	; 0x4174 <__udivmodqi4_loop>
    4182:	80 95       	com	r24
    4184:	08 95       	ret

00004186 <__udivmodhi4>:
    4186:	aa 1b       	sub	r26, r26
    4188:	bb 1b       	sub	r27, r27
    418a:	51 e1       	ldi	r21, 0x11	; 17
    418c:	07 c0       	rjmp	.+14     	; 0x419c <__udivmodhi4_ep>

0000418e <__udivmodhi4_loop>:
    418e:	aa 1f       	adc	r26, r26
    4190:	bb 1f       	adc	r27, r27
    4192:	a6 17       	cp	r26, r22
    4194:	b7 07       	cpc	r27, r23
    4196:	10 f0       	brcs	.+4      	; 0x419c <__udivmodhi4_ep>
    4198:	a6 1b       	sub	r26, r22
    419a:	b7 0b       	sbc	r27, r23

0000419c <__udivmodhi4_ep>:
    419c:	88 1f       	adc	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	5a 95       	dec	r21
    41a2:	a9 f7       	brne	.-22     	; 0x418e <__udivmodhi4_loop>
    41a4:	80 95       	com	r24
    41a6:	90 95       	com	r25
    41a8:	bc 01       	movw	r22, r24
    41aa:	cd 01       	movw	r24, r26
    41ac:	08 95       	ret

000041ae <__divmodhi4>:
    41ae:	97 fb       	bst	r25, 7
    41b0:	07 2e       	mov	r0, r23
    41b2:	16 f4       	brtc	.+4      	; 0x41b8 <__divmodhi4+0xa>
    41b4:	00 94       	com	r0
    41b6:	07 d0       	rcall	.+14     	; 0x41c6 <__divmodhi4_neg1>
    41b8:	77 fd       	sbrc	r23, 7
    41ba:	09 d0       	rcall	.+18     	; 0x41ce <__divmodhi4_neg2>
    41bc:	0e 94 c3 20 	call	0x4186	; 0x4186 <__udivmodhi4>
    41c0:	07 fc       	sbrc	r0, 7
    41c2:	05 d0       	rcall	.+10     	; 0x41ce <__divmodhi4_neg2>
    41c4:	3e f4       	brtc	.+14     	; 0x41d4 <__divmodhi4_exit>

000041c6 <__divmodhi4_neg1>:
    41c6:	90 95       	com	r25
    41c8:	81 95       	neg	r24
    41ca:	9f 4f       	sbci	r25, 0xFF	; 255
    41cc:	08 95       	ret

000041ce <__divmodhi4_neg2>:
    41ce:	70 95       	com	r23
    41d0:	61 95       	neg	r22
    41d2:	7f 4f       	sbci	r23, 0xFF	; 255

000041d4 <__divmodhi4_exit>:
    41d4:	08 95       	ret

000041d6 <__udivmodsi4>:
    41d6:	a1 e2       	ldi	r26, 0x21	; 33
    41d8:	1a 2e       	mov	r1, r26
    41da:	aa 1b       	sub	r26, r26
    41dc:	bb 1b       	sub	r27, r27
    41de:	fd 01       	movw	r30, r26
    41e0:	0d c0       	rjmp	.+26     	; 0x41fc <__udivmodsi4_ep>

000041e2 <__udivmodsi4_loop>:
    41e2:	aa 1f       	adc	r26, r26
    41e4:	bb 1f       	adc	r27, r27
    41e6:	ee 1f       	adc	r30, r30
    41e8:	ff 1f       	adc	r31, r31
    41ea:	a2 17       	cp	r26, r18
    41ec:	b3 07       	cpc	r27, r19
    41ee:	e4 07       	cpc	r30, r20
    41f0:	f5 07       	cpc	r31, r21
    41f2:	20 f0       	brcs	.+8      	; 0x41fc <__udivmodsi4_ep>
    41f4:	a2 1b       	sub	r26, r18
    41f6:	b3 0b       	sbc	r27, r19
    41f8:	e4 0b       	sbc	r30, r20
    41fa:	f5 0b       	sbc	r31, r21

000041fc <__udivmodsi4_ep>:
    41fc:	66 1f       	adc	r22, r22
    41fe:	77 1f       	adc	r23, r23
    4200:	88 1f       	adc	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	1a 94       	dec	r1
    4206:	69 f7       	brne	.-38     	; 0x41e2 <__udivmodsi4_loop>
    4208:	60 95       	com	r22
    420a:	70 95       	com	r23
    420c:	80 95       	com	r24
    420e:	90 95       	com	r25
    4210:	9b 01       	movw	r18, r22
    4212:	ac 01       	movw	r20, r24
    4214:	bd 01       	movw	r22, r26
    4216:	cf 01       	movw	r24, r30
    4218:	08 95       	ret

0000421a <__divmodsi4>:
    421a:	05 2e       	mov	r0, r21
    421c:	97 fb       	bst	r25, 7
    421e:	1e f4       	brtc	.+6      	; 0x4226 <__divmodsi4+0xc>
    4220:	00 94       	com	r0
    4222:	0e 94 24 21 	call	0x4248	; 0x4248 <__negsi2>
    4226:	57 fd       	sbrc	r21, 7
    4228:	07 d0       	rcall	.+14     	; 0x4238 <__divmodsi4_neg2>
    422a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__udivmodsi4>
    422e:	07 fc       	sbrc	r0, 7
    4230:	03 d0       	rcall	.+6      	; 0x4238 <__divmodsi4_neg2>
    4232:	4e f4       	brtc	.+18     	; 0x4246 <__divmodsi4_exit>
    4234:	0c 94 24 21 	jmp	0x4248	; 0x4248 <__negsi2>

00004238 <__divmodsi4_neg2>:
    4238:	50 95       	com	r21
    423a:	40 95       	com	r20
    423c:	30 95       	com	r19
    423e:	21 95       	neg	r18
    4240:	3f 4f       	sbci	r19, 0xFF	; 255
    4242:	4f 4f       	sbci	r20, 0xFF	; 255
    4244:	5f 4f       	sbci	r21, 0xFF	; 255

00004246 <__divmodsi4_exit>:
    4246:	08 95       	ret

00004248 <__negsi2>:
    4248:	90 95       	com	r25
    424a:	80 95       	com	r24
    424c:	70 95       	com	r23
    424e:	61 95       	neg	r22
    4250:	7f 4f       	sbci	r23, 0xFF	; 255
    4252:	8f 4f       	sbci	r24, 0xFF	; 255
    4254:	9f 4f       	sbci	r25, 0xFF	; 255
    4256:	08 95       	ret

00004258 <__tablejump2__>:
    4258:	ee 0f       	add	r30, r30
    425a:	ff 1f       	adc	r31, r31
    425c:	05 90       	lpm	r0, Z+
    425e:	f4 91       	lpm	r31, Z
    4260:	e0 2d       	mov	r30, r0
    4262:	09 94       	ijmp

00004264 <malloc>:
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	82 30       	cpi	r24, 0x02	; 2
    426e:	91 05       	cpc	r25, r1
    4270:	10 f4       	brcc	.+4      	; 0x4276 <malloc+0x12>
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <__flp>
    427a:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <__flp+0x1>
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	a0 e0       	ldi	r26, 0x00	; 0
    4284:	b0 e0       	ldi	r27, 0x00	; 0
    4286:	30 97       	sbiw	r30, 0x00	; 0
    4288:	19 f1       	breq	.+70     	; 0x42d0 <malloc+0x6c>
    428a:	40 81       	ld	r20, Z
    428c:	51 81       	ldd	r21, Z+1	; 0x01
    428e:	02 81       	ldd	r16, Z+2	; 0x02
    4290:	13 81       	ldd	r17, Z+3	; 0x03
    4292:	48 17       	cp	r20, r24
    4294:	59 07       	cpc	r21, r25
    4296:	c8 f0       	brcs	.+50     	; 0x42ca <malloc+0x66>
    4298:	84 17       	cp	r24, r20
    429a:	95 07       	cpc	r25, r21
    429c:	69 f4       	brne	.+26     	; 0x42b8 <malloc+0x54>
    429e:	10 97       	sbiw	r26, 0x00	; 0
    42a0:	31 f0       	breq	.+12     	; 0x42ae <malloc+0x4a>
    42a2:	12 96       	adiw	r26, 0x02	; 2
    42a4:	0c 93       	st	X, r16
    42a6:	12 97       	sbiw	r26, 0x02	; 2
    42a8:	13 96       	adiw	r26, 0x03	; 3
    42aa:	1c 93       	st	X, r17
    42ac:	27 c0       	rjmp	.+78     	; 0x42fc <malloc+0x98>
    42ae:	00 93 7b 05 	sts	0x057B, r16	; 0x80057b <__flp>
    42b2:	10 93 7c 05 	sts	0x057C, r17	; 0x80057c <__flp+0x1>
    42b6:	22 c0       	rjmp	.+68     	; 0x42fc <malloc+0x98>
    42b8:	21 15       	cp	r18, r1
    42ba:	31 05       	cpc	r19, r1
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <malloc+0x60>
    42be:	42 17       	cp	r20, r18
    42c0:	53 07       	cpc	r21, r19
    42c2:	18 f4       	brcc	.+6      	; 0x42ca <malloc+0x66>
    42c4:	9a 01       	movw	r18, r20
    42c6:	bd 01       	movw	r22, r26
    42c8:	ef 01       	movw	r28, r30
    42ca:	df 01       	movw	r26, r30
    42cc:	f8 01       	movw	r30, r16
    42ce:	db cf       	rjmp	.-74     	; 0x4286 <malloc+0x22>
    42d0:	21 15       	cp	r18, r1
    42d2:	31 05       	cpc	r19, r1
    42d4:	f9 f0       	breq	.+62     	; 0x4314 <malloc+0xb0>
    42d6:	28 1b       	sub	r18, r24
    42d8:	39 0b       	sbc	r19, r25
    42da:	24 30       	cpi	r18, 0x04	; 4
    42dc:	31 05       	cpc	r19, r1
    42de:	80 f4       	brcc	.+32     	; 0x4300 <malloc+0x9c>
    42e0:	8a 81       	ldd	r24, Y+2	; 0x02
    42e2:	9b 81       	ldd	r25, Y+3	; 0x03
    42e4:	61 15       	cp	r22, r1
    42e6:	71 05       	cpc	r23, r1
    42e8:	21 f0       	breq	.+8      	; 0x42f2 <malloc+0x8e>
    42ea:	fb 01       	movw	r30, r22
    42ec:	93 83       	std	Z+3, r25	; 0x03
    42ee:	82 83       	std	Z+2, r24	; 0x02
    42f0:	04 c0       	rjmp	.+8      	; 0x42fa <malloc+0x96>
    42f2:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <__flp+0x1>
    42f6:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <__flp>
    42fa:	fe 01       	movw	r30, r28
    42fc:	32 96       	adiw	r30, 0x02	; 2
    42fe:	44 c0       	rjmp	.+136    	; 0x4388 <malloc+0x124>
    4300:	fe 01       	movw	r30, r28
    4302:	e2 0f       	add	r30, r18
    4304:	f3 1f       	adc	r31, r19
    4306:	81 93       	st	Z+, r24
    4308:	91 93       	st	Z+, r25
    430a:	22 50       	subi	r18, 0x02	; 2
    430c:	31 09       	sbc	r19, r1
    430e:	39 83       	std	Y+1, r19	; 0x01
    4310:	28 83       	st	Y, r18
    4312:	3a c0       	rjmp	.+116    	; 0x4388 <malloc+0x124>
    4314:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    4318:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    431c:	23 2b       	or	r18, r19
    431e:	41 f4       	brne	.+16     	; 0x4330 <malloc+0xcc>
    4320:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4324:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4328:	30 93 7a 05 	sts	0x057A, r19	; 0x80057a <__brkval+0x1>
    432c:	20 93 79 05 	sts	0x0579, r18	; 0x800579 <__brkval>
    4330:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4334:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4338:	21 15       	cp	r18, r1
    433a:	31 05       	cpc	r19, r1
    433c:	41 f4       	brne	.+16     	; 0x434e <malloc+0xea>
    433e:	2d b7       	in	r18, 0x3d	; 61
    4340:	3e b7       	in	r19, 0x3e	; 62
    4342:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4346:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    434a:	24 1b       	sub	r18, r20
    434c:	35 0b       	sbc	r19, r21
    434e:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <__brkval>
    4352:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <__brkval+0x1>
    4356:	e2 17       	cp	r30, r18
    4358:	f3 07       	cpc	r31, r19
    435a:	a0 f4       	brcc	.+40     	; 0x4384 <malloc+0x120>
    435c:	2e 1b       	sub	r18, r30
    435e:	3f 0b       	sbc	r19, r31
    4360:	28 17       	cp	r18, r24
    4362:	39 07       	cpc	r19, r25
    4364:	78 f0       	brcs	.+30     	; 0x4384 <malloc+0x120>
    4366:	ac 01       	movw	r20, r24
    4368:	4e 5f       	subi	r20, 0xFE	; 254
    436a:	5f 4f       	sbci	r21, 0xFF	; 255
    436c:	24 17       	cp	r18, r20
    436e:	35 07       	cpc	r19, r21
    4370:	48 f0       	brcs	.+18     	; 0x4384 <malloc+0x120>
    4372:	4e 0f       	add	r20, r30
    4374:	5f 1f       	adc	r21, r31
    4376:	50 93 7a 05 	sts	0x057A, r21	; 0x80057a <__brkval+0x1>
    437a:	40 93 79 05 	sts	0x0579, r20	; 0x800579 <__brkval>
    437e:	81 93       	st	Z+, r24
    4380:	91 93       	st	Z+, r25
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <malloc+0x124>
    4384:	e0 e0       	ldi	r30, 0x00	; 0
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	cf 01       	movw	r24, r30
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	1f 91       	pop	r17
    4390:	0f 91       	pop	r16
    4392:	08 95       	ret

00004394 <free>:
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	09 f4       	brne	.+2      	; 0x439e <free+0xa>
    439c:	81 c0       	rjmp	.+258    	; 0x44a0 <free+0x10c>
    439e:	fc 01       	movw	r30, r24
    43a0:	32 97       	sbiw	r30, 0x02	; 2
    43a2:	13 82       	std	Z+3, r1	; 0x03
    43a4:	12 82       	std	Z+2, r1	; 0x02
    43a6:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <__flp>
    43aa:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <__flp+0x1>
    43ae:	10 97       	sbiw	r26, 0x00	; 0
    43b0:	81 f4       	brne	.+32     	; 0x43d2 <free+0x3e>
    43b2:	20 81       	ld	r18, Z
    43b4:	31 81       	ldd	r19, Z+1	; 0x01
    43b6:	82 0f       	add	r24, r18
    43b8:	93 1f       	adc	r25, r19
    43ba:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    43be:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    43c2:	28 17       	cp	r18, r24
    43c4:	39 07       	cpc	r19, r25
    43c6:	51 f5       	brne	.+84     	; 0x441c <free+0x88>
    43c8:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <__brkval+0x1>
    43cc:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <__brkval>
    43d0:	67 c0       	rjmp	.+206    	; 0x44a0 <free+0x10c>
    43d2:	ed 01       	movw	r28, r26
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	ce 17       	cp	r28, r30
    43da:	df 07       	cpc	r29, r31
    43dc:	40 f4       	brcc	.+16     	; 0x43ee <free+0x5a>
    43de:	4a 81       	ldd	r20, Y+2	; 0x02
    43e0:	5b 81       	ldd	r21, Y+3	; 0x03
    43e2:	9e 01       	movw	r18, r28
    43e4:	41 15       	cp	r20, r1
    43e6:	51 05       	cpc	r21, r1
    43e8:	f1 f0       	breq	.+60     	; 0x4426 <free+0x92>
    43ea:	ea 01       	movw	r28, r20
    43ec:	f5 cf       	rjmp	.-22     	; 0x43d8 <free+0x44>
    43ee:	d3 83       	std	Z+3, r29	; 0x03
    43f0:	c2 83       	std	Z+2, r28	; 0x02
    43f2:	40 81       	ld	r20, Z
    43f4:	51 81       	ldd	r21, Z+1	; 0x01
    43f6:	84 0f       	add	r24, r20
    43f8:	95 1f       	adc	r25, r21
    43fa:	c8 17       	cp	r28, r24
    43fc:	d9 07       	cpc	r29, r25
    43fe:	59 f4       	brne	.+22     	; 0x4416 <free+0x82>
    4400:	88 81       	ld	r24, Y
    4402:	99 81       	ldd	r25, Y+1	; 0x01
    4404:	84 0f       	add	r24, r20
    4406:	95 1f       	adc	r25, r21
    4408:	02 96       	adiw	r24, 0x02	; 2
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	80 83       	st	Z, r24
    440e:	8a 81       	ldd	r24, Y+2	; 0x02
    4410:	9b 81       	ldd	r25, Y+3	; 0x03
    4412:	93 83       	std	Z+3, r25	; 0x03
    4414:	82 83       	std	Z+2, r24	; 0x02
    4416:	21 15       	cp	r18, r1
    4418:	31 05       	cpc	r19, r1
    441a:	29 f4       	brne	.+10     	; 0x4426 <free+0x92>
    441c:	f0 93 7c 05 	sts	0x057C, r31	; 0x80057c <__flp+0x1>
    4420:	e0 93 7b 05 	sts	0x057B, r30	; 0x80057b <__flp>
    4424:	3d c0       	rjmp	.+122    	; 0x44a0 <free+0x10c>
    4426:	e9 01       	movw	r28, r18
    4428:	fb 83       	std	Y+3, r31	; 0x03
    442a:	ea 83       	std	Y+2, r30	; 0x02
    442c:	49 91       	ld	r20, Y+
    442e:	59 91       	ld	r21, Y+
    4430:	c4 0f       	add	r28, r20
    4432:	d5 1f       	adc	r29, r21
    4434:	ec 17       	cp	r30, r28
    4436:	fd 07       	cpc	r31, r29
    4438:	61 f4       	brne	.+24     	; 0x4452 <free+0xbe>
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	84 0f       	add	r24, r20
    4440:	95 1f       	adc	r25, r21
    4442:	02 96       	adiw	r24, 0x02	; 2
    4444:	e9 01       	movw	r28, r18
    4446:	99 83       	std	Y+1, r25	; 0x01
    4448:	88 83       	st	Y, r24
    444a:	82 81       	ldd	r24, Z+2	; 0x02
    444c:	93 81       	ldd	r25, Z+3	; 0x03
    444e:	9b 83       	std	Y+3, r25	; 0x03
    4450:	8a 83       	std	Y+2, r24	; 0x02
    4452:	e0 e0       	ldi	r30, 0x00	; 0
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	12 96       	adiw	r26, 0x02	; 2
    4458:	8d 91       	ld	r24, X+
    445a:	9c 91       	ld	r25, X
    445c:	13 97       	sbiw	r26, 0x03	; 3
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	19 f0       	breq	.+6      	; 0x4468 <free+0xd4>
    4462:	fd 01       	movw	r30, r26
    4464:	dc 01       	movw	r26, r24
    4466:	f7 cf       	rjmp	.-18     	; 0x4456 <free+0xc2>
    4468:	8d 91       	ld	r24, X+
    446a:	9c 91       	ld	r25, X
    446c:	11 97       	sbiw	r26, 0x01	; 1
    446e:	9d 01       	movw	r18, r26
    4470:	2e 5f       	subi	r18, 0xFE	; 254
    4472:	3f 4f       	sbci	r19, 0xFF	; 255
    4474:	82 0f       	add	r24, r18
    4476:	93 1f       	adc	r25, r19
    4478:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    447c:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    4480:	28 17       	cp	r18, r24
    4482:	39 07       	cpc	r19, r25
    4484:	69 f4       	brne	.+26     	; 0x44a0 <free+0x10c>
    4486:	30 97       	sbiw	r30, 0x00	; 0
    4488:	29 f4       	brne	.+10     	; 0x4494 <free+0x100>
    448a:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <__flp+0x1>
    448e:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <__flp>
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <free+0x104>
    4494:	13 82       	std	Z+3, r1	; 0x03
    4496:	12 82       	std	Z+2, r1	; 0x02
    4498:	b0 93 7a 05 	sts	0x057A, r27	; 0x80057a <__brkval+0x1>
    449c:	a0 93 79 05 	sts	0x0579, r26	; 0x800579 <__brkval>
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	08 95       	ret

000044a6 <realloc>:
    44a6:	a0 e0       	ldi	r26, 0x00	; 0
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	e9 e5       	ldi	r30, 0x59	; 89
    44ac:	f2 e2       	ldi	r31, 0x22	; 34
    44ae:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__prologue_saves__+0x8>
    44b2:	ec 01       	movw	r28, r24
    44b4:	00 97       	sbiw	r24, 0x00	; 0
    44b6:	21 f4       	brne	.+8      	; 0x44c0 <realloc+0x1a>
    44b8:	cb 01       	movw	r24, r22
    44ba:	0e 94 32 21 	call	0x4264	; 0x4264 <malloc>
    44be:	b4 c0       	rjmp	.+360    	; 0x4628 <realloc+0x182>
    44c0:	fc 01       	movw	r30, r24
    44c2:	e6 0f       	add	r30, r22
    44c4:	f7 1f       	adc	r31, r23
    44c6:	9c 01       	movw	r18, r24
    44c8:	22 50       	subi	r18, 0x02	; 2
    44ca:	31 09       	sbc	r19, r1
    44cc:	e2 17       	cp	r30, r18
    44ce:	f3 07       	cpc	r31, r19
    44d0:	08 f4       	brcc	.+2      	; 0x44d4 <realloc+0x2e>
    44d2:	a8 c0       	rjmp	.+336    	; 0x4624 <realloc+0x17e>
    44d4:	d9 01       	movw	r26, r18
    44d6:	0d 91       	ld	r16, X+
    44d8:	1c 91       	ld	r17, X
    44da:	11 97       	sbiw	r26, 0x01	; 1
    44dc:	06 17       	cp	r16, r22
    44de:	17 07       	cpc	r17, r23
    44e0:	b0 f0       	brcs	.+44     	; 0x450e <realloc+0x68>
    44e2:	05 30       	cpi	r16, 0x05	; 5
    44e4:	11 05       	cpc	r17, r1
    44e6:	08 f4       	brcc	.+2      	; 0x44ea <realloc+0x44>
    44e8:	9b c0       	rjmp	.+310    	; 0x4620 <realloc+0x17a>
    44ea:	c8 01       	movw	r24, r16
    44ec:	04 97       	sbiw	r24, 0x04	; 4
    44ee:	86 17       	cp	r24, r22
    44f0:	97 07       	cpc	r25, r23
    44f2:	08 f4       	brcc	.+2      	; 0x44f6 <realloc+0x50>
    44f4:	95 c0       	rjmp	.+298    	; 0x4620 <realloc+0x17a>
    44f6:	02 50       	subi	r16, 0x02	; 2
    44f8:	11 09       	sbc	r17, r1
    44fa:	06 1b       	sub	r16, r22
    44fc:	17 0b       	sbc	r17, r23
    44fe:	01 93       	st	Z+, r16
    4500:	11 93       	st	Z+, r17
    4502:	6d 93       	st	X+, r22
    4504:	7c 93       	st	X, r23
    4506:	cf 01       	movw	r24, r30
    4508:	0e 94 ca 21 	call	0x4394	; 0x4394 <free>
    450c:	89 c0       	rjmp	.+274    	; 0x4620 <realloc+0x17a>
    450e:	5b 01       	movw	r10, r22
    4510:	a0 1a       	sub	r10, r16
    4512:	b1 0a       	sbc	r11, r17
    4514:	4c 01       	movw	r8, r24
    4516:	80 0e       	add	r8, r16
    4518:	91 1e       	adc	r9, r17
    451a:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <__flp>
    451e:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <__flp+0x1>
    4522:	61 2c       	mov	r6, r1
    4524:	71 2c       	mov	r7, r1
    4526:	e1 2c       	mov	r14, r1
    4528:	f1 2c       	mov	r15, r1
    452a:	10 97       	sbiw	r26, 0x00	; 0
    452c:	09 f4       	brne	.+2      	; 0x4530 <realloc+0x8a>
    452e:	46 c0       	rjmp	.+140    	; 0x45bc <realloc+0x116>
    4530:	8d 91       	ld	r24, X+
    4532:	9c 91       	ld	r25, X
    4534:	11 97       	sbiw	r26, 0x01	; 1
    4536:	a8 15       	cp	r26, r8
    4538:	b9 05       	cpc	r27, r9
    453a:	b1 f5       	brne	.+108    	; 0x45a8 <realloc+0x102>
    453c:	6c 01       	movw	r12, r24
    453e:	42 e0       	ldi	r20, 0x02	; 2
    4540:	c4 0e       	add	r12, r20
    4542:	d1 1c       	adc	r13, r1
    4544:	ca 14       	cp	r12, r10
    4546:	db 04       	cpc	r13, r11
    4548:	78 f1       	brcs	.+94     	; 0x45a8 <realloc+0x102>
    454a:	4c 01       	movw	r8, r24
    454c:	8a 18       	sub	r8, r10
    454e:	9b 08       	sbc	r9, r11
    4550:	64 01       	movw	r12, r8
    4552:	42 e0       	ldi	r20, 0x02	; 2
    4554:	c4 0e       	add	r12, r20
    4556:	d1 1c       	adc	r13, r1
    4558:	12 96       	adiw	r26, 0x02	; 2
    455a:	bc 90       	ld	r11, X
    455c:	12 97       	sbiw	r26, 0x02	; 2
    455e:	13 96       	adiw	r26, 0x03	; 3
    4560:	ac 91       	ld	r26, X
    4562:	b5 e0       	ldi	r27, 0x05	; 5
    4564:	cb 16       	cp	r12, r27
    4566:	d1 04       	cpc	r13, r1
    4568:	40 f0       	brcs	.+16     	; 0x457a <realloc+0xd4>
    456a:	b2 82       	std	Z+2, r11	; 0x02
    456c:	a3 83       	std	Z+3, r26	; 0x03
    456e:	91 82       	std	Z+1, r9	; 0x01
    4570:	80 82       	st	Z, r8
    4572:	d9 01       	movw	r26, r18
    4574:	6d 93       	st	X+, r22
    4576:	7c 93       	st	X, r23
    4578:	09 c0       	rjmp	.+18     	; 0x458c <realloc+0xe6>
    457a:	0e 5f       	subi	r16, 0xFE	; 254
    457c:	1f 4f       	sbci	r17, 0xFF	; 255
    457e:	80 0f       	add	r24, r16
    4580:	91 1f       	adc	r25, r17
    4582:	f9 01       	movw	r30, r18
    4584:	91 83       	std	Z+1, r25	; 0x01
    4586:	80 83       	st	Z, r24
    4588:	eb 2d       	mov	r30, r11
    458a:	fa 2f       	mov	r31, r26
    458c:	e1 14       	cp	r14, r1
    458e:	f1 04       	cpc	r15, r1
    4590:	31 f0       	breq	.+12     	; 0x459e <realloc+0xf8>
    4592:	d7 01       	movw	r26, r14
    4594:	13 96       	adiw	r26, 0x03	; 3
    4596:	fc 93       	st	X, r31
    4598:	ee 93       	st	-X, r30
    459a:	12 97       	sbiw	r26, 0x02	; 2
    459c:	41 c0       	rjmp	.+130    	; 0x4620 <realloc+0x17a>
    459e:	f0 93 7c 05 	sts	0x057C, r31	; 0x80057c <__flp+0x1>
    45a2:	e0 93 7b 05 	sts	0x057B, r30	; 0x80057b <__flp>
    45a6:	3c c0       	rjmp	.+120    	; 0x4620 <realloc+0x17a>
    45a8:	68 16       	cp	r6, r24
    45aa:	79 06       	cpc	r7, r25
    45ac:	08 f4       	brcc	.+2      	; 0x45b0 <realloc+0x10a>
    45ae:	3c 01       	movw	r6, r24
    45b0:	7d 01       	movw	r14, r26
    45b2:	12 96       	adiw	r26, 0x02	; 2
    45b4:	0d 90       	ld	r0, X+
    45b6:	bc 91       	ld	r27, X
    45b8:	a0 2d       	mov	r26, r0
    45ba:	b7 cf       	rjmp	.-146    	; 0x452a <realloc+0x84>
    45bc:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <__brkval>
    45c0:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <__brkval+0x1>
    45c4:	88 16       	cp	r8, r24
    45c6:	99 06       	cpc	r9, r25
    45c8:	e1 f4       	brne	.+56     	; 0x4602 <realloc+0x15c>
    45ca:	66 16       	cp	r6, r22
    45cc:	77 06       	cpc	r7, r23
    45ce:	c8 f4       	brcc	.+50     	; 0x4602 <realloc+0x15c>
    45d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    45d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    45d8:	00 97       	sbiw	r24, 0x00	; 0
    45da:	41 f4       	brne	.+16     	; 0x45ec <realloc+0x146>
    45dc:	8d b7       	in	r24, 0x3d	; 61
    45de:	9e b7       	in	r25, 0x3e	; 62
    45e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    45e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    45e8:	84 1b       	sub	r24, r20
    45ea:	95 0b       	sbc	r25, r21
    45ec:	e8 17       	cp	r30, r24
    45ee:	f9 07       	cpc	r31, r25
    45f0:	c8 f4       	brcc	.+50     	; 0x4624 <realloc+0x17e>
    45f2:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <__brkval+0x1>
    45f6:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <__brkval>
    45fa:	f9 01       	movw	r30, r18
    45fc:	71 83       	std	Z+1, r23	; 0x01
    45fe:	60 83       	st	Z, r22
    4600:	0f c0       	rjmp	.+30     	; 0x4620 <realloc+0x17a>
    4602:	cb 01       	movw	r24, r22
    4604:	0e 94 32 21 	call	0x4264	; 0x4264 <malloc>
    4608:	7c 01       	movw	r14, r24
    460a:	00 97       	sbiw	r24, 0x00	; 0
    460c:	59 f0       	breq	.+22     	; 0x4624 <realloc+0x17e>
    460e:	a8 01       	movw	r20, r16
    4610:	be 01       	movw	r22, r28
    4612:	0e 94 63 23 	call	0x46c6	; 0x46c6 <memcpy>
    4616:	ce 01       	movw	r24, r28
    4618:	0e 94 ca 21 	call	0x4394	; 0x4394 <free>
    461c:	c7 01       	movw	r24, r14
    461e:	04 c0       	rjmp	.+8      	; 0x4628 <realloc+0x182>
    4620:	ce 01       	movw	r24, r28
    4622:	02 c0       	rjmp	.+4      	; 0x4628 <realloc+0x182>
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	cd b7       	in	r28, 0x3d	; 61
    462a:	de b7       	in	r29, 0x3e	; 62
    462c:	ee e0       	ldi	r30, 0x0E	; 14
    462e:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__epilogue_restores__+0x8>

00004632 <atoi>:
    4632:	fc 01       	movw	r30, r24
    4634:	88 27       	eor	r24, r24
    4636:	99 27       	eor	r25, r25
    4638:	e8 94       	clt
    463a:	21 91       	ld	r18, Z+
    463c:	20 32       	cpi	r18, 0x20	; 32
    463e:	e9 f3       	breq	.-6      	; 0x463a <atoi+0x8>
    4640:	29 30       	cpi	r18, 0x09	; 9
    4642:	10 f0       	brcs	.+4      	; 0x4648 <atoi+0x16>
    4644:	2e 30       	cpi	r18, 0x0E	; 14
    4646:	c8 f3       	brcs	.-14     	; 0x463a <atoi+0x8>
    4648:	2b 32       	cpi	r18, 0x2B	; 43
    464a:	41 f0       	breq	.+16     	; 0x465c <atoi+0x2a>
    464c:	2d 32       	cpi	r18, 0x2D	; 45
    464e:	39 f4       	brne	.+14     	; 0x465e <atoi+0x2c>
    4650:	68 94       	set
    4652:	04 c0       	rjmp	.+8      	; 0x465c <atoi+0x2a>
    4654:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__mulhi_const_10>
    4658:	82 0f       	add	r24, r18
    465a:	91 1d       	adc	r25, r1
    465c:	21 91       	ld	r18, Z+
    465e:	20 53       	subi	r18, 0x30	; 48
    4660:	2a 30       	cpi	r18, 0x0A	; 10
    4662:	c0 f3       	brcs	.-16     	; 0x4654 <atoi+0x22>
    4664:	1e f4       	brtc	.+6      	; 0x466c <atoi+0x3a>
    4666:	90 95       	com	r25
    4668:	81 95       	neg	r24
    466a:	9f 4f       	sbci	r25, 0xFF	; 255
    466c:	08 95       	ret

0000466e <strcmp_P>:
    466e:	fb 01       	movw	r30, r22
    4670:	dc 01       	movw	r26, r24
    4672:	8d 91       	ld	r24, X+
    4674:	05 90       	lpm	r0, Z+
    4676:	80 19       	sub	r24, r0
    4678:	01 10       	cpse	r0, r1
    467a:	d9 f3       	breq	.-10     	; 0x4672 <strcmp_P+0x4>
    467c:	99 0b       	sbc	r25, r25
    467e:	08 95       	ret

00004680 <__strlen_P>:
    4680:	fc 01       	movw	r30, r24
    4682:	05 90       	lpm	r0, Z+
    4684:	00 20       	and	r0, r0
    4686:	e9 f7       	brne	.-6      	; 0x4682 <__strlen_P+0x2>
    4688:	80 95       	com	r24
    468a:	90 95       	com	r25
    468c:	8e 0f       	add	r24, r30
    468e:	9f 1f       	adc	r25, r31
    4690:	08 95       	ret

00004692 <strstr_P>:
    4692:	fb 01       	movw	r30, r22
    4694:	55 91       	lpm	r21, Z+
    4696:	55 23       	and	r21, r21
    4698:	a9 f0       	breq	.+42     	; 0x46c4 <strstr_P+0x32>
    469a:	bf 01       	movw	r22, r30
    469c:	dc 01       	movw	r26, r24
    469e:	4d 91       	ld	r20, X+
    46a0:	45 17       	cp	r20, r21
    46a2:	41 11       	cpse	r20, r1
    46a4:	e1 f7       	brne	.-8      	; 0x469e <strstr_P+0xc>
    46a6:	59 f4       	brne	.+22     	; 0x46be <strstr_P+0x2c>
    46a8:	cd 01       	movw	r24, r26
    46aa:	05 90       	lpm	r0, Z+
    46ac:	00 20       	and	r0, r0
    46ae:	49 f0       	breq	.+18     	; 0x46c2 <strstr_P+0x30>
    46b0:	4d 91       	ld	r20, X+
    46b2:	40 15       	cp	r20, r0
    46b4:	41 11       	cpse	r20, r1
    46b6:	c9 f3       	breq	.-14     	; 0x46aa <strstr_P+0x18>
    46b8:	fb 01       	movw	r30, r22
    46ba:	41 11       	cpse	r20, r1
    46bc:	ef cf       	rjmp	.-34     	; 0x469c <strstr_P+0xa>
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	08 95       	ret

000046c6 <memcpy>:
    46c6:	fb 01       	movw	r30, r22
    46c8:	dc 01       	movw	r26, r24
    46ca:	02 c0       	rjmp	.+4      	; 0x46d0 <memcpy+0xa>
    46cc:	01 90       	ld	r0, Z+
    46ce:	0d 92       	st	X+, r0
    46d0:	41 50       	subi	r20, 0x01	; 1
    46d2:	50 40       	sbci	r21, 0x00	; 0
    46d4:	d8 f7       	brcc	.-10     	; 0x46cc <memcpy+0x6>
    46d6:	08 95       	ret

000046d8 <strchr>:
    46d8:	fc 01       	movw	r30, r24
    46da:	81 91       	ld	r24, Z+
    46dc:	86 17       	cp	r24, r22
    46de:	21 f0       	breq	.+8      	; 0x46e8 <strchr+0x10>
    46e0:	88 23       	and	r24, r24
    46e2:	d9 f7       	brne	.-10     	; 0x46da <strchr+0x2>
    46e4:	99 27       	eor	r25, r25
    46e6:	08 95       	ret
    46e8:	31 97       	sbiw	r30, 0x01	; 1
    46ea:	cf 01       	movw	r24, r30
    46ec:	08 95       	ret

000046ee <strcpy>:
    46ee:	fb 01       	movw	r30, r22
    46f0:	dc 01       	movw	r26, r24
    46f2:	01 90       	ld	r0, Z+
    46f4:	0d 92       	st	X+, r0
    46f6:	00 20       	and	r0, r0
    46f8:	e1 f7       	brne	.-8      	; 0x46f2 <strcpy+0x4>
    46fa:	08 95       	ret

000046fc <__mulhi_const_10>:
    46fc:	7a e0       	ldi	r23, 0x0A	; 10
    46fe:	97 9f       	mul	r25, r23
    4700:	90 2d       	mov	r25, r0
    4702:	87 9f       	mul	r24, r23
    4704:	80 2d       	mov	r24, r0
    4706:	91 0d       	add	r25, r1
    4708:	11 24       	eor	r1, r1
    470a:	08 95       	ret

0000470c <__prologue_saves__>:
    470c:	2f 92       	push	r2
    470e:	3f 92       	push	r3
    4710:	4f 92       	push	r4
    4712:	5f 92       	push	r5
    4714:	6f 92       	push	r6
    4716:	7f 92       	push	r7
    4718:	8f 92       	push	r8
    471a:	9f 92       	push	r9
    471c:	af 92       	push	r10
    471e:	bf 92       	push	r11
    4720:	cf 92       	push	r12
    4722:	df 92       	push	r13
    4724:	ef 92       	push	r14
    4726:	ff 92       	push	r15
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	ca 1b       	sub	r28, r26
    4736:	db 0b       	sbc	r29, r27
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	09 94       	ijmp

00004744 <__epilogue_restores__>:
    4744:	2a 88       	ldd	r2, Y+18	; 0x12
    4746:	39 88       	ldd	r3, Y+17	; 0x11
    4748:	48 88       	ldd	r4, Y+16	; 0x10
    474a:	5f 84       	ldd	r5, Y+15	; 0x0f
    474c:	6e 84       	ldd	r6, Y+14	; 0x0e
    474e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4750:	8c 84       	ldd	r8, Y+12	; 0x0c
    4752:	9b 84       	ldd	r9, Y+11	; 0x0b
    4754:	aa 84       	ldd	r10, Y+10	; 0x0a
    4756:	b9 84       	ldd	r11, Y+9	; 0x09
    4758:	c8 84       	ldd	r12, Y+8	; 0x08
    475a:	df 80       	ldd	r13, Y+7	; 0x07
    475c:	ee 80       	ldd	r14, Y+6	; 0x06
    475e:	fd 80       	ldd	r15, Y+5	; 0x05
    4760:	0c 81       	ldd	r16, Y+4	; 0x04
    4762:	1b 81       	ldd	r17, Y+3	; 0x03
    4764:	aa 81       	ldd	r26, Y+2	; 0x02
    4766:	b9 81       	ldd	r27, Y+1	; 0x01
    4768:	ce 0f       	add	r28, r30
    476a:	d1 1d       	adc	r29, r1
    476c:	0f b6       	in	r0, 0x3f	; 63
    476e:	f8 94       	cli
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	cd bf       	out	0x3d, r28	; 61
    4776:	ed 01       	movw	r28, r26
    4778:	08 95       	ret

0000477a <__do_global_dtors>:
    477a:	14 e0       	ldi	r17, 0x04	; 4
    477c:	c3 e2       	ldi	r28, 0x23	; 35
    477e:	d4 e0       	ldi	r29, 0x04	; 4
    4780:	04 c0       	rjmp	.+8      	; 0x478a <__do_global_dtors+0x10>
    4782:	fe 01       	movw	r30, r28
    4784:	0e 94 2c 21 	call	0x4258	; 0x4258 <__tablejump2__>
    4788:	21 96       	adiw	r28, 0x01	; 1
    478a:	c4 32       	cpi	r28, 0x24	; 36
    478c:	d1 07       	cpc	r29, r17
    478e:	c9 f7       	brne	.-14     	; 0x4782 <__do_global_dtors+0x8>
    4790:	f8 94       	cli

00004792 <__stop_program>:
    4792:	ff cf       	rjmp	.-2      	; 0x4792 <__stop_program>
