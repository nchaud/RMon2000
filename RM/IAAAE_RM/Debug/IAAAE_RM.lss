
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00002530  000025c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d3  008001a0  008001a0  00002664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e8  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017972  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039df  00000000  00000000  0001a92e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005121  00000000  00000000  0001e30d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020d4  00000000  00000000  00023430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004c69  00000000  00000000  00025504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b7a5  00000000  00000000  0002a16d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a0  00000000  00000000  00035912  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__ctors_end>
       4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
       8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
       c:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_3>
      10:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_3>
      14:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_3>
      18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      40:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_16>
      44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      48:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_18>
      4c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_19>
      50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      58:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      5c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      60:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_24>
      64:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
      76:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

0000007e <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      7e:	53 50 41 43 45 00                                   SPACE.

00000084 <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
      84:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000008f <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
      8f:	41 54 45 30 00                                      ATE0.

00000094 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
      94:	41 54 45 30 00                                      ATE0.

00000099 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
      99:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
      a9:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000000b8 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
      b8:	41 54 00                                            AT.

000000bb <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
      bb:	41 54 00                                            AT.

000000be <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
      be:	41 54 00                                            AT.

000000c1 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
      c1:	41 54 00                                            AT.

000000c4 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
      c4:	41 54 00                                            AT.

000000c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
      c7:	41 54 00                                            AT.

000000ca <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
      ca:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
      da:	61 62 6c 65 00                                      able.

000000df <_ZZN13Adafruit_FONA5beginEhhE3__c>:
      df:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
      ef:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000100 <_ZZN13Adafruit_FONAC4EabE3__c_1>:
     100:	4f 4b 00                                            OK.

00000103 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     103:	46 4f 4e 41 00                                      FONA.

00000108 <_ZZN13Adafruit_FONAC4EabE3__c>:
     108:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000110 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     110:	54 65 6d 70 3d 00                                   Temp=.

00000116 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     116:	20 7c 20 00                                          | .

0000011a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     11a:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000123 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     123:	20 7c 20 00                                          | .

00000127 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     127:	50 56 2d 56 3d 00                                   PV-V=.

0000012d <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     12d:	20 7c 20 00                                          | .

00000131 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     131:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000139 <_ZZ4loopE3__c>:
     139:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

00000143 <_ZZ8sendDatavE3__c>:
     143:	53 65 6e 64 69 6e 67 20 64 61 74 61 2e 2e 2e 00     Sending data....

00000153 <_ZZ5setupE3__c_0>:
     153:	42 6f 6f 74 20 43 6f 75 6e 74 00                    Boot Count.

0000015e <_ZZ5setupE3__c>:
     15e:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

0000016a <_ZZN13SensorManager8readDataEP10SensorDataE3__c>:
     16a:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     17a:	2e 2e 00                                            ...

0000017d <digital_pin_to_timer_PGM>:
     17d:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     18d:	00 00 00 00                                         ....

00000191 <digital_pin_to_bit_mask_PGM>:
     191:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1a1:	04 08 10 20                                         ... 

000001a5 <digital_pin_to_port_PGM>:
     1a5:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1b5:	03 03 03 03                                         ....

000001b9 <port_to_input_PGM>:
     1b9:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001c3 <port_to_output_PGM>:
     1c3:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001cd <port_to_mode_PGM>:
     1cd:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000001d8 <__ctors_start>:
     1d8:	bb 04       	cpc	r11, r11
     1da:	8d 09       	sbc	r24, r13
     1dc:	1e 0b       	sbc	r17, r30

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d8 e0       	ldi	r29, 0x08	; 8
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61

000001ea <__do_copy_data>:
     1ea:	11 e0       	ldi	r17, 0x01	; 1
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	e0 e3       	ldi	r30, 0x30	; 48
     1f2:	f5 e2       	ldi	r31, 0x25	; 37
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <__do_copy_data+0x10>
     1f6:	05 90       	lpm	r0, Z+
     1f8:	0d 92       	st	X+, r0
     1fa:	a0 3a       	cpi	r26, 0xA0	; 160
     1fc:	b1 07       	cpc	r27, r17
     1fe:	d9 f7       	brne	.-10     	; 0x1f6 <__do_copy_data+0xc>

00000200 <__do_clear_bss>:
     200:	24 e0       	ldi	r18, 0x04	; 4
     202:	a0 ea       	ldi	r26, 0xA0	; 160
     204:	b1 e0       	ldi	r27, 0x01	; 1
     206:	01 c0       	rjmp	.+2      	; 0x20a <.do_clear_bss_start>

00000208 <.do_clear_bss_loop>:
     208:	1d 92       	st	X+, r1

0000020a <.do_clear_bss_start>:
     20a:	a3 37       	cpi	r26, 0x73	; 115
     20c:	b2 07       	cpc	r27, r18
     20e:	e1 f7       	brne	.-8      	; 0x208 <.do_clear_bss_loop>

00000210 <__do_global_ctors>:
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	cf ee       	ldi	r28, 0xEF	; 239
     214:	d0 e0       	ldi	r29, 0x00	; 0
     216:	04 c0       	rjmp	.+8      	; 0x220 <__do_global_ctors+0x10>
     218:	21 97       	sbiw	r28, 0x01	; 1
     21a:	fe 01       	movw	r30, r28
     21c:	0e 94 4c 11 	call	0x2298	; 0x2298 <__tablejump2__>
     220:	cc 3e       	cpi	r28, 0xEC	; 236
     222:	d1 07       	cpc	r29, r17
     224:	c9 f7       	brne	.-14     	; 0x218 <__do_global_ctors+0x8>
     226:	0e 94 4c 0b 	call	0x1698	; 0x1698 <main>
     22a:	0c 94 96 12 	jmp	0x252c	; 0x252c <_exit>

0000022e <__bad_interrupt>:
     22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000232 <_ZN13Adafruit_FONA9availableEv>:
    DEBUG_PRINT(reply[i], HEX); DEBUG_PRINT(" ");
  }
  DEBUG_PRINTLN();
  */
  return (strcmp(replybuffer, reply) == 0);
}
     232:	87 5e       	subi	r24, 0xE7	; 231
     234:	9e 4f       	sbci	r25, 0xFE	; 254
     236:	dc 01       	movw	r26, r24
     238:	8d 91       	ld	r24, X+
     23a:	9c 91       	ld	r25, X
     23c:	dc 01       	movw	r26, r24
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	04 80       	ldd	r0, Z+4	; 0x04
     244:	f5 81       	ldd	r31, Z+5	; 0x05
     246:	e0 2d       	mov	r30, r0
     248:	09 94       	ijmp

0000024a <_ZN13Adafruit_FONA5writeEh>:
     24a:	87 5e       	subi	r24, 0xE7	; 231
     24c:	9e 4f       	sbci	r25, 0xFE	; 254
     24e:	dc 01       	movw	r26, r24
     250:	8d 91       	ld	r24, X+
     252:	9c 91       	ld	r25, X
     254:	dc 01       	movw	r26, r24
     256:	ed 91       	ld	r30, X+
     258:	fc 91       	ld	r31, X
     25a:	01 90       	ld	r0, Z+
     25c:	f0 81       	ld	r31, Z
     25e:	e0 2d       	mov	r30, r0
     260:	09 94       	ijmp

00000262 <_ZN13Adafruit_FONA4readEv>:
     262:	87 5e       	subi	r24, 0xE7	; 231
     264:	9e 4f       	sbci	r25, 0xFE	; 254
     266:	dc 01       	movw	r26, r24
     268:	8d 91       	ld	r24, X+
     26a:	9c 91       	ld	r25, X
     26c:	dc 01       	movw	r26, r24
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	06 80       	ldd	r0, Z+6	; 0x06
     274:	f7 81       	ldd	r31, Z+7	; 0x07
     276:	e0 2d       	mov	r30, r0
     278:	09 94       	ijmp

0000027a <_ZN13Adafruit_FONA4peekEv>:
     27a:	87 5e       	subi	r24, 0xE7	; 231
     27c:	9e 4f       	sbci	r25, 0xFE	; 254
     27e:	dc 01       	movw	r26, r24
     280:	8d 91       	ld	r24, X+
     282:	9c 91       	ld	r25, X
     284:	dc 01       	movw	r26, r24
     286:	ed 91       	ld	r30, X+
     288:	fc 91       	ld	r31, X
     28a:	00 84       	ldd	r0, Z+8	; 0x08
     28c:	f1 85       	ldd	r31, Z+9	; 0x09
     28e:	e0 2d       	mov	r30, r0
     290:	09 94       	ijmp

00000292 <_ZN13Adafruit_FONA5flushEv>:
     292:	87 5e       	subi	r24, 0xE7	; 231
     294:	9e 4f       	sbci	r25, 0xFE	; 254
     296:	dc 01       	movw	r26, r24
     298:	8d 91       	ld	r24, X+
     29a:	9c 91       	ld	r25, X
     29c:	dc 01       	movw	r26, r24
     29e:	ed 91       	ld	r30, X+
     2a0:	fc 91       	ld	r31, X
     2a2:	02 84       	ldd	r0, Z+10	; 0x0a
     2a4:	f3 85       	ldd	r31, Z+11	; 0x0b
     2a6:	e0 2d       	mov	r30, r0
     2a8:	09 94       	ijmp

000002aa <_ZN13Adafruit_FONAC1Eab>:
     2aa:	fc 01       	movw	r30, r24
     2ac:	13 82       	std	Z+3, r1	; 0x03
     2ae:	12 82       	std	Z+2, r1	; 0x02
     2b0:	88 ee       	ldi	r24, 0xE8	; 232
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	a0 e0       	ldi	r26, 0x00	; 0
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	84 83       	std	Z+4, r24	; 0x04
     2ba:	95 83       	std	Z+5, r25	; 0x05
     2bc:	a6 83       	std	Z+6, r26	; 0x06
     2be:	b7 83       	std	Z+7, r27	; 0x07
     2c0:	82 e4       	ldi	r24, 0x42	; 66
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	91 83       	std	Z+1, r25	; 0x01
     2c6:	80 83       	st	Z, r24
     2c8:	83 e0       	ldi	r24, 0x03	; 3
     2ca:	86 87       	std	Z+14, r24	; 0x0e
     2cc:	64 87       	std	Z+12, r22	; 0x0c
     2ce:	45 87       	std	Z+13, r20	; 0x0d
     2d0:	df 01       	movw	r26, r30
     2d2:	a2 5f       	subi	r26, 0xF2	; 242
     2d4:	be 4f       	sbci	r27, 0xFE	; 254
     2d6:	88 e0       	ldi	r24, 0x08	; 8
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	11 96       	adiw	r26, 0x01	; 1
     2dc:	9c 93       	st	X, r25
     2de:	8e 93       	st	-X, r24
     2e0:	12 96       	adiw	r26, 0x02	; 2
     2e2:	11 96       	adiw	r26, 0x01	; 1
     2e4:	1c 92       	st	X, r1
     2e6:	1e 92       	st	-X, r1
     2e8:	12 96       	adiw	r26, 0x02	; 2
     2ea:	11 96       	adiw	r26, 0x01	; 1
     2ec:	1c 92       	st	X, r1
     2ee:	1e 92       	st	-X, r1
     2f0:	17 96       	adiw	r26, 0x07	; 7
     2f2:	11 96       	adiw	r26, 0x01	; 1
     2f4:	1c 92       	st	X, r1
     2f6:	1e 92       	st	-X, r1
     2f8:	15 97       	sbiw	r26, 0x05	; 5
     2fa:	1c 92       	st	X, r1
     2fc:	11 96       	adiw	r26, 0x01	; 1
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	8d 93       	st	X+, r24
     304:	9c 93       	st	X, r25
     306:	e9 5e       	subi	r30, 0xE9	; 233
     308:	fe 4f       	sbci	r31, 0xFE	; 254
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	91 83       	std	Z+1, r25	; 0x01
     310:	80 83       	st	Z, r24
     312:	08 95       	ret

00000314 <_ZN13Adafruit_FONA10flushInputEv>:
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	ec 01       	movw	r28, r24
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	8c 01       	movw	r16, r24
     324:	0f 5f       	subi	r16, 0xFF	; 255
     326:	1f 4f       	sbci	r17, 0xFF	; 255
     328:	88 97       	sbiw	r24, 0x28	; 40
     32a:	d8 f4       	brcc	.+54     	; 0x362 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     32c:	e8 81       	ld	r30, Y
     32e:	f9 81       	ldd	r31, Y+1	; 0x01
     330:	04 80       	ldd	r0, Z+4	; 0x04
     332:	f5 81       	ldd	r31, Z+5	; 0x05
     334:	e0 2d       	mov	r30, r0
     336:	ce 01       	movw	r24, r28
     338:	09 95       	icall
     33a:	89 2b       	or	r24, r25
     33c:	51 f0       	breq	.+20     	; 0x352 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     33e:	e8 81       	ld	r30, Y
     340:	f9 81       	ldd	r31, Y+1	; 0x01
     342:	06 80       	ldd	r0, Z+6	; 0x06
     344:	f7 81       	ldd	r31, Z+7	; 0x07
     346:	e0 2d       	mov	r30, r0
     348:	ce 01       	movw	r24, r28
     34a:	09 95       	icall
     34c:	00 e0       	ldi	r16, 0x00	; 0
     34e:	10 e0       	ldi	r17, 0x00	; 0
     350:	ed cf       	rjmp	.-38     	; 0x32c <_ZN13Adafruit_FONA10flushInputEv+0x18>
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
     35e:	c8 01       	movw	r24, r16
     360:	e0 cf       	rjmp	.-64     	; 0x322 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <_ZN13Adafruit_FONA8readlineEjb>:
     36c:	9f 92       	push	r9
     36e:	af 92       	push	r10
     370:	bf 92       	push	r11
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	7c 01       	movw	r14, r24
     384:	94 2e       	mov	r9, r20
     386:	8b 01       	movw	r16, r22
     388:	00 0f       	add	r16, r16
     38a:	11 1f       	adc	r17, r17
     38c:	00 0f       	add	r16, r16
     38e:	11 1f       	adc	r17, r17
     390:	c0 e0       	ldi	r28, 0x00	; 0
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	57 01       	movw	r10, r14
     396:	87 ee       	ldi	r24, 0xE7	; 231
     398:	a8 1a       	sub	r10, r24
     39a:	8e ef       	ldi	r24, 0xFE	; 254
     39c:	b8 0a       	sbc	r11, r24
     39e:	01 15       	cp	r16, r1
     3a0:	11 05       	cpc	r17, r1
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
     3a4:	50 c0       	rjmp	.+160    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3a6:	ce 3f       	cpi	r28, 0xFE	; 254
     3a8:	d1 05       	cpc	r29, r1
     3aa:	80 f0       	brcs	.+32     	; 0x3cc <_ZN13Adafruit_FONA8readlineEjb+0x60>
     3ac:	6e e7       	ldi	r22, 0x7E	; 126
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	22 c0       	rjmp	.+68     	; 0x3f6 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
     3b2:	f5 01       	movw	r30, r10
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	dc 01       	movw	r26, r24
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	06 80       	ldd	r0, Z+6	; 0x06
     3c0:	f7 81       	ldd	r31, Z+7	; 0x07
     3c2:	e0 2d       	mov	r30, r0
     3c4:	09 95       	icall
     3c6:	6c 01       	movw	r12, r24
     3c8:	8d 30       	cpi	r24, 0x0D	; 13
     3ca:	69 f4       	brne	.+26     	; 0x3e6 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     3cc:	d5 01       	movw	r26, r10
     3ce:	8d 91       	ld	r24, X+
     3d0:	9c 91       	ld	r25, X
     3d2:	dc 01       	movw	r26, r24
     3d4:	ed 91       	ld	r30, X+
     3d6:	fc 91       	ld	r31, X
     3d8:	04 80       	ldd	r0, Z+4	; 0x04
     3da:	f5 81       	ldd	r31, Z+5	; 0x05
     3dc:	e0 2d       	mov	r30, r0
     3de:	09 95       	icall
     3e0:	89 2b       	or	r24, r25
     3e2:	39 f7       	brne	.-50     	; 0x3b2 <_ZN13Adafruit_FONA8readlineEjb+0x46>
     3e4:	26 c0       	rjmp	.+76     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     3e6:	8a 30       	cpi	r24, 0x0A	; 10
     3e8:	59 f4       	brne	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ea:	20 97       	sbiw	r28, 0x00	; 0
     3ec:	79 f3       	breq	.-34     	; 0x3cc <_ZN13Adafruit_FONA8readlineEjb+0x60>
     3ee:	91 10       	cpse	r9, r1
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f2:	66 e7       	ldi	r22, 0x76	; 118
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	85 e8       	ldi	r24, 0x85	; 133
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
     3fe:	23 c0       	rjmp	.+70     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     400:	f7 01       	movw	r30, r14
     402:	ec 0f       	add	r30, r28
     404:	fd 1f       	adc	r31, r29
     406:	c7 86       	std	Z+15, r12	; 0x0f
     408:	b6 01       	movw	r22, r12
     40a:	77 27       	eor	r23, r23
     40c:	40 e1       	ldi	r20, 0x10	; 16
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	85 e8       	ldi	r24, 0x85	; 133
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN5Print5printEii>
     418:	67 e0       	ldi	r22, 0x07	; 7
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	85 e8       	ldi	r24, 0x85	; 133
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN5Print5printEPKc>
     424:	6c 2d       	mov	r22, r12
     426:	85 e8       	ldi	r24, 0x85	; 133
     428:	93 e0       	ldi	r25, 0x03	; 3
     42a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN5Print7printlnEc>
     42e:	21 96       	adiw	r28, 0x01	; 1
     430:	cd cf       	rjmp	.-102    	; 0x3cc <_ZN13Adafruit_FONA8readlineEjb+0x60>
     432:	01 50       	subi	r16, 0x01	; 1
     434:	11 09       	sbc	r17, r1
     436:	e9 f2       	breq	.-70     	; 0x3f2 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
     444:	ac cf       	rjmp	.-168    	; 0x39e <_ZN13Adafruit_FONA8readlineEjb+0x32>
     446:	f7 01       	movw	r30, r14
     448:	ec 0f       	add	r30, r28
     44a:	fd 1f       	adc	r31, r29
     44c:	17 86       	std	Z+15, r1	; 0x0f
     44e:	8c 2f       	mov	r24, r28
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	bf 90       	pop	r11
     462:	af 90       	pop	r10
     464:	9f 90       	pop	r9
     466:	08 95       	ret

00000468 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	8b 01       	movw	r16, r22
     478:	7a 01       	movw	r14, r20
     47a:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN13Adafruit_FONA10flushInputEv>
     47e:	6f e6       	ldi	r22, 0x6F	; 111
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	85 e8       	ldi	r24, 0x85	; 133
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
     48a:	b8 01       	movw	r22, r16
     48c:	85 e8       	ldi	r24, 0x85	; 133
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
     494:	fe 01       	movw	r30, r28
     496:	e7 5e       	subi	r30, 0xE7	; 231
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	b8 01       	movw	r22, r16
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	b7 01       	movw	r22, r14
     4a8:	ce 01       	movw	r24, r28
     4aa:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN13Adafruit_FONA8readlineEjb>
     4ae:	18 2f       	mov	r17, r24
     4b0:	68 e6       	ldi	r22, 0x68	; 104
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	85 e8       	ldi	r24, 0x85	; 133
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
     4bc:	be 01       	movw	r22, r28
     4be:	61 5f       	subi	r22, 0xF1	; 241
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	85 e8       	ldi	r24, 0x85	; 133
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN5Print7printlnEPKc>
     4ca:	81 2f       	mov	r24, r17
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	ec 01       	movw	r28, r24
     4e4:	8a 01       	movw	r16, r20
	if (! getReply(send, timeout) )
     4e6:	a9 01       	movw	r20, r18
     4e8:	0e 94 34 02 	call	0x468	; 0x468 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     4ec:	88 23       	and	r24, r24
     4ee:	41 f0       	breq	.+16     	; 0x500 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
}

boolean Adafruit_FONA::sendCheckReply(char* send, FONAFlashStringPtr reply, uint16_t timeout) {
  if (! getReply(send, timeout) )
	  return false;
  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
     4f0:	b8 01       	movw	r22, r16
     4f2:	ce 01       	movw	r24, r28
     4f4:	0f 96       	adiw	r24, 0x0f	; 15
     4f6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <strcmp_P>
     4fa:	21 e0       	ldi	r18, 0x01	; 1
     4fc:	89 2b       	or	r24, r25
     4fe:	09 f0       	breq	.+2      	; 0x502 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
  return (strcmp(replybuffer, reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
	if (! getReply(send, timeout) )
		return false;
     500:	20 e0       	ldi	r18, 0x00	; 0

  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}
     502:	82 2f       	mov	r24, r18
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <_ZN13Adafruit_FONA5beginEhh>:

uint8_t Adafruit_FONA::type(void) {
  return _type;
}

FONA_STATUS_INIT Adafruit_FONA::begin(uint8_t tx, uint8_t rx) { //Stream &port) {
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
     520:	f6 2e       	mov	r15, r22
     522:	e4 2e       	mov	r14, r20

  FONA_STATUS_INIT ret = FONA_STATUS_INIT::SUCCESS;
  
  SoftwareSerial *fonaSerial = new SoftwareSerial(tx, rx);
     524:	8f e1       	ldi	r24, 0x1F	; 31
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_Znwj>
     52c:	8c 01       	movw	r16, r24
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	4e 2d       	mov	r20, r14
     532:	6f 2d       	mov	r22, r15
     534:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN14SoftwareSerialC1Ehhb>
  fonaSerial->begin(4800);
     538:	40 ec       	ldi	r20, 0xC0	; 192
     53a:	52 e1       	ldi	r21, 0x12	; 18
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	c8 01       	movw	r24, r16
     542:	0e 94 48 10 	call	0x2090	; 0x2090 <_ZN14SoftwareSerial5beginEl>
  mySerial = fonaSerial;
     546:	7e 01       	movw	r14, r28
     548:	87 ee       	ldi	r24, 0xE7	; 231
     54a:	e8 1a       	sub	r14, r24
     54c:	8e ef       	ldi	r24, 0xFE	; 254
     54e:	f8 0a       	sbc	r15, r24
     550:	d7 01       	movw	r26, r14
     552:	0d 93       	st	X+, r16
     554:	1c 93       	st	X, r17

  pinMode(_rstpin, OUTPUT);
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	8c 85       	ldd	r24, Y+12	; 0x0c
     55a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <pinMode>
  digitalWrite(_rstpin, HIGH);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	8c 85       	ldd	r24, Y+12	; 0x0c
     562:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
  delay(10);
     566:	6a e0       	ldi	r22, 0x0A	; 10
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
  digitalWrite(_rstpin, LOW);
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	8c 85       	ldd	r24, Y+12	; 0x0c
     576:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
  delay(100);
     57a:	64 e6       	ldi	r22, 0x64	; 100
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
  digitalWrite(_rstpin, HIGH);
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	8c 85       	ldd	r24, Y+12	; 0x0c
     58a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>

  DEBUG_PRINTLN(F("Attempting to open comm with ATs"));
     58e:	6f ed       	ldi	r22, 0xDF	; 223
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	85 e8       	ldi	r24, 0x85	; 133
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
     59a:	8e e0       	ldi	r24, 0x0E	; 14
     59c:	c8 2e       	mov	r12, r24
     59e:	d1 2c       	mov	r13, r1
		mySerial->read();
	}
	
	//TODO: I believe this is to synchronise the baud rate - https://arduino.stackexchange.com/a/36042
	
    if (sendCheckReply(F("AT"), ok_reply))
     5a0:	8e 01       	movw	r16, r28
     5a2:	09 5e       	subi	r16, 0xE9	; 233
     5a4:	1e 4f       	sbci	r17, 0xFE	; 254
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
	  
    while (mySerial->available()) {
     5a6:	f7 01       	movw	r30, r14
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	dc 01       	movw	r26, r24
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	04 80       	ldd	r0, Z+4	; 0x04
     5b4:	f5 81       	ldd	r31, Z+5	; 0x05
     5b6:	e0 2d       	mov	r30, r0
     5b8:	09 95       	icall
     5ba:	89 2b       	or	r24, r25
     5bc:	89 f0       	breq	.+34     	; 0x5e0 <_ZN13Adafruit_FONA5beginEhh+0xd2>
		DEBUG_PRINTLN(F("Serial was available"));
     5be:	6a ec       	ldi	r22, 0xCA	; 202
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	85 e8       	ldi	r24, 0x85	; 133
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
		mySerial->read();
     5ca:	f7 01       	movw	r30, r14
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	dc 01       	movw	r26, r24
     5d2:	ed 91       	ld	r30, X+
     5d4:	fc 91       	ld	r31, X
     5d6:	06 80       	ldd	r0, Z+6	; 0x06
     5d8:	f7 81       	ldd	r31, Z+7	; 0x07
     5da:	e0 2d       	mov	r30, r0
     5dc:	09 95       	icall
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
	  
    while (mySerial->available()) {
     5de:	e3 cf       	rjmp	.-58     	; 0x5a6 <_ZN13Adafruit_FONA5beginEhh+0x98>
		mySerial->read();
	}
	
	//TODO: I believe this is to synchronise the baud rate - https://arduino.stackexchange.com/a/36042
	
    if (sendCheckReply(F("AT"), ok_reply))
     5e0:	f8 01       	movw	r30, r16
     5e2:	40 81       	ld	r20, Z
     5e4:	51 81       	ldd	r21, Z+1	; 0x01
     5e6:	24 ef       	ldi	r18, 0xF4	; 244
     5e8:	31 e0       	ldi	r19, 0x01	; 1
     5ea:	67 ec       	ldi	r22, 0xC7	; 199
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	ce 01       	movw	r24, r28
     5f0:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     5f4:	81 11       	cpse	r24, r1
     5f6:	34 c0       	rjmp	.+104    	; 0x660 <_ZN13Adafruit_FONA5beginEhh+0x152>
      break;
	  
    while (mySerial->available())
     5f8:	d7 01       	movw	r26, r14
     5fa:	8d 91       	ld	r24, X+
     5fc:	9c 91       	ld	r25, X
     5fe:	dc 01       	movw	r26, r24
     600:	ed 91       	ld	r30, X+
     602:	fc 91       	ld	r31, X
     604:	04 80       	ldd	r0, Z+4	; 0x04
     606:	f5 81       	ldd	r31, Z+5	; 0x05
     608:	e0 2d       	mov	r30, r0
     60a:	09 95       	icall
     60c:	89 2b       	or	r24, r25
     60e:	59 f0       	breq	.+22     	; 0x626 <_ZN13Adafruit_FONA5beginEhh+0x118>
		mySerial->read();
     610:	f7 01       	movw	r30, r14
     612:	80 81       	ld	r24, Z
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	dc 01       	movw	r26, r24
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	06 80       	ldd	r0, Z+6	; 0x06
     61e:	f7 81       	ldd	r31, Z+7	; 0x07
     620:	e0 2d       	mov	r30, r0
     622:	09 95       	icall
	//TODO: I believe this is to synchronise the baud rate - https://arduino.stackexchange.com/a/36042
	
    if (sendCheckReply(F("AT"), ok_reply))
      break;
	  
    while (mySerial->available())
     624:	e9 cf       	rjmp	.-46     	; 0x5f8 <_ZN13Adafruit_FONA5beginEhh+0xea>
		mySerial->read();
		
    if (sendCheckReply(F("AT"), F("AT"))) 
     626:	24 ef       	ldi	r18, 0xF4	; 244
     628:	31 e0       	ldi	r19, 0x01	; 1
     62a:	44 ec       	ldi	r20, 0xC4	; 196
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	61 ec       	ldi	r22, 0xC1	; 193
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	ce 01       	movw	r24, r28
     634:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     638:	81 11       	cpse	r24, r1
     63a:	12 c0       	rjmp	.+36     	; 0x660 <_ZN13Adafruit_FONA5beginEhh+0x152>
      break;
	  
    delay(500);
     63c:	64 ef       	ldi	r22, 0xF4	; 244
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
     648:	b1 e0       	ldi	r27, 0x01	; 1
     64a:	cb 1a       	sub	r12, r27
     64c:	d1 08       	sbc	r13, r1

  DEBUG_PRINTLN(F("Attempting to open comm with ATs"));
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
     64e:	09 f0       	breq	.+2      	; 0x652 <_ZN13Adafruit_FONA5beginEhh+0x144>
     650:	aa cf       	rjmp	.-172    	; 0x5a6 <_ZN13Adafruit_FONA5beginEhh+0x98>
     652:	3a c0       	rjmp	.+116    	; 0x6c8 <_ZN13Adafruit_FONA5beginEhh+0x1ba>
	if (!sendCheckReply(F("AT"), ok_reply)){
		
		DEBUG_PRINTLN(F("AT Fail... last ditch attempt."));
		return FONA_STATUS_INIT::ERR_SERIAL_FAIL;
	}
    delay(100);
     654:	64 e6       	ldi	r22, 0x64	; 100
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
  }

  // turn off Echo!
  sendCheckReply(F("ATE0"), ok_reply);
     660:	f8 01       	movw	r30, r16
     662:	40 81       	ld	r20, Z
     664:	51 81       	ldd	r21, Z+1	; 0x01
     666:	24 ef       	ldi	r18, 0xF4	; 244
     668:	31 e0       	ldi	r19, 0x01	; 1
     66a:	64 e9       	ldi	r22, 0x94	; 148
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
  delay(100);
     674:	64 e6       	ldi	r22, 0x64	; 100
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>

  if (!sendCheckReply(F("ATE0"), ok_reply)){
     680:	d8 01       	movw	r26, r16
     682:	4d 91       	ld	r20, X+
     684:	5c 91       	ld	r21, X
     686:	24 ef       	ldi	r18, 0xF4	; 244
     688:	31 e0       	ldi	r19, 0x01	; 1
     68a:	6f e8       	ldi	r22, 0x8F	; 143
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     694:	81 11       	cpse	r24, r1
     696:	02 c0       	rjmp	.+4      	; 0x69c <_ZN13Adafruit_FONA5beginEhh+0x18e>
	  
	  ret = FONA_STATUS_INIT::WARN_ATEO_FAIL;
     698:	13 e0       	ldi	r17, 0x03	; 3
     69a:	01 c0       	rjmp	.+2      	; 0x69e <_ZN13Adafruit_FONA5beginEhh+0x190>
  return _type;
}

FONA_STATUS_INIT Adafruit_FONA::begin(uint8_t tx, uint8_t rx) { //Stream &port) {

  FONA_STATUS_INIT ret = FONA_STATUS_INIT::SUCCESS;
     69c:	11 e0       	ldi	r17, 0x01	; 1

  if (!sendCheckReply(F("ATE0"), ok_reply)){
	  
	  ret = FONA_STATUS_INIT::WARN_ATEO_FAIL;
  }
  delay(100);
     69e:	64 e6       	ldi	r22, 0x64	; 100
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
  
  flushInput();
     6aa:	ce 01       	movw	r24, r28
     6ac:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN13Adafruit_FONA10flushInputEv>

  //Make sure right version of FONA module is connected
  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) == 0) {
     6b0:	64 e8       	ldi	r22, 0x84	; 132
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	ce 01       	movw	r24, r28
     6b6:	0f 96       	adiw	r24, 0x0f	; 15
     6b8:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <strstr_P>
     6bc:	89 2b       	or	r24, r25
     6be:	11 f0       	breq	.+4      	; 0x6c4 <_ZN13Adafruit_FONA5beginEhh+0x1b6>
    
    return FONA_STATUS_INIT::ERR_FONA_SIM_MODULE;
  }

  return ret;
     6c0:	81 2f       	mov	r24, r17
     6c2:	35 c0       	rjmp	.+106    	; 0x72e <_ZN13Adafruit_FONA5beginEhh+0x220>
  flushInput();

  //Make sure right version of FONA module is connected
  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) == 0) {
    
    return FONA_STATUS_INIT::ERR_FONA_SIM_MODULE;
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	33 c0       	rjmp	.+102    	; 0x72e <_ZN13Adafruit_FONA5beginEhh+0x220>
    timeout-=500;
  }

  if (timeout <= 0) {
	  
    sendCheckReply(F("AT"), ok_reply);
     6c8:	f8 01       	movw	r30, r16
     6ca:	40 81       	ld	r20, Z
     6cc:	51 81       	ldd	r21, Z+1	; 0x01
     6ce:	24 ef       	ldi	r18, 0xF4	; 244
     6d0:	31 e0       	ldi	r19, 0x01	; 1
     6d2:	6e eb       	ldi	r22, 0xBE	; 190
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    delay(100);
     6dc:	64 e6       	ldi	r22, 0x64	; 100
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
    sendCheckReply(F("AT"), ok_reply);
     6e8:	d8 01       	movw	r26, r16
     6ea:	4d 91       	ld	r20, X+
     6ec:	5c 91       	ld	r21, X
     6ee:	24 ef       	ldi	r18, 0xF4	; 244
     6f0:	31 e0       	ldi	r19, 0x01	; 1
     6f2:	6b eb       	ldi	r22, 0xBB	; 187
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    delay(100);
     6fc:	64 e6       	ldi	r22, 0x64	; 100
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
    
	if (!sendCheckReply(F("AT"), ok_reply)){
     708:	f8 01       	movw	r30, r16
     70a:	40 81       	ld	r20, Z
     70c:	51 81       	ldd	r21, Z+1	; 0x01
     70e:	24 ef       	ldi	r18, 0xF4	; 244
     710:	31 e0       	ldi	r19, 0x01	; 1
     712:	68 eb       	ldi	r22, 0xB8	; 184
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	ce 01       	movw	r24, r28
     718:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     71c:	81 11       	cpse	r24, r1
     71e:	9a cf       	rjmp	.-204    	; 0x654 <_ZN13Adafruit_FONA5beginEhh+0x146>
		
		DEBUG_PRINTLN(F("AT Fail... last ditch attempt."));
     720:	69 e9       	ldi	r22, 0x99	; 153
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	85 e8       	ldi	r24, 0x85	; 133
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
		return FONA_STATUS_INIT::ERR_SERIAL_FAIL;
     72c:	82 e0       	ldi	r24, 0x02	; 2
    
    return FONA_STATUS_INIT::ERR_FONA_SIM_MODULE;
  }

  return ret;
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	08 95       	ret

00000740 <_ZN7Helpers15printSensorDataEP10SensorData>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"

void Helpers::printSensorData(SensorData* sd) {
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
     746:	61 e3       	ldi	r22, 0x31	; 49
     748:	71 e0       	ldi	r23, 0x01	; 1
     74a:	85 e8       	ldi	r24, 0x85	; 133
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
     752:	69 81       	ldd	r22, Y+1	; 0x01
     754:	7a 81       	ldd	r23, Y+2	; 0x02
     756:	4a e0       	ldi	r20, 0x0A	; 10
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	85 e8       	ldi	r24, 0x85	; 133
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     762:	6d e2       	ldi	r22, 0x2D	; 45
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	85 e8       	ldi	r24, 0x85	; 133
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
     76e:	67 e2       	ldi	r22, 0x27	; 39
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	85 e8       	ldi	r24, 0x85	; 133
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
     77a:	6d 81       	ldd	r22, Y+5	; 0x05
     77c:	7e 81       	ldd	r23, Y+6	; 0x06
     77e:	4a e0       	ldi	r20, 0x0A	; 10
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	85 e8       	ldi	r24, 0x85	; 133
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     78a:	63 e2       	ldi	r22, 0x23	; 35
     78c:	71 e0       	ldi	r23, 0x01	; 1
     78e:	85 e8       	ldi	r24, 0x85	; 133
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
     796:	6a e1       	ldi	r22, 0x1A	; 26
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	85 e8       	ldi	r24, 0x85	; 133
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
     7a2:	6b 81       	ldd	r22, Y+3	; 0x03
     7a4:	7c 81       	ldd	r23, Y+4	; 0x04
     7a6:	4a e0       	ldi	r20, 0x0A	; 10
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	85 e8       	ldi	r24, 0x85	; 133
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     7b2:	66 e1       	ldi	r22, 0x16	; 22
     7b4:	71 e0       	ldi	r23, 0x01	; 1
     7b6:	85 e8       	ldi	r24, 0x85	; 133
     7b8:	93 e0       	ldi	r25, 0x03	; 3
     7ba:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
     7be:	60 e1       	ldi	r22, 0x10	; 16
     7c0:	71 e0       	ldi	r23, 0x01	; 1
     7c2:	85 e8       	ldi	r24, 0x85	; 133
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->temperature);
     7ca:	6f 81       	ldd	r22, Y+7	; 0x07
     7cc:	78 85       	ldd	r23, Y+8	; 0x08
     7ce:	4a e0       	ldi	r20, 0x0A	; 10
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	85 e8       	ldi	r24, 0x85	; 133
     7d4:	93 e0       	ldi	r25, 0x03	; 3
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
	RM_LOG(F("Current="));
	RM_LOG(sd->current);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Temp="));
	RM_LOGLN(sd->temperature);
     7da:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <_ZN5Print7printlnEji>

000007de <_Z14initSubsystemsv>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
     7de:	42 e0       	ldi	r20, 0x02	; 2
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	85 ea       	ldi	r24, 0xA5	; 165
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0c 94 87 02 	jmp	0x50e	; 0x50e <_ZN13Adafruit_FONA5beginEhh>

000007ea <setup>:
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	85 e0       	ldi	r24, 0x05	; 5
     7f2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <pinMode>
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
     7fe:	68 eb       	ldi	r22, 0xB8	; 184
     800:	7b e0       	ldi	r23, 0x0B	; 11
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	8d e0       	ldi	r24, 0x0D	; 13
     80e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <pinMode>
     812:	26 e0       	ldi	r18, 0x06	; 6
     814:	40 e8       	ldi	r20, 0x80	; 128
     816:	55 e2       	ldi	r21, 0x25	; 37
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	85 e8       	ldi	r24, 0x85	; 133
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN14HardwareSerial5beginEmh>
     824:	6e e5       	ldi	r22, 0x5E	; 94
     826:	71 e0       	ldi	r23, 0x01	; 1
     828:	85 e8       	ldi	r24, 0x85	; 133
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
     830:	0e 94 ef 03 	call	0x7de	; 0x7de <_Z14initSubsystemsv>
     834:	84 ea       	ldi	r24, 0xA4	; 164
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN12RmMemManager18incrementBootCountEv>
     83c:	ec 01       	movw	r28, r24
     83e:	63 e5       	ldi	r22, 0x53	; 83
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	85 e8       	ldi	r24, 0x85	; 133
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
     84a:	6e e4       	ldi	r22, 0x4E	; 78
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	85 e8       	ldi	r24, 0x85	; 133
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN5Print5printEPKc>
     856:	4a e0       	ldi	r20, 0x0A	; 10
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	be 01       	movw	r22, r28
     85c:	85 e8       	ldi	r24, 0x85	; 133
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEji>
     864:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <_behaviour>
     868:	20 97       	sbiw	r28, 0x00	; 0
     86a:	11 f4       	brne	.+4      	; 0x870 <setup+0x86>
     86c:	91 60       	ori	r25, 0x01	; 1
     86e:	05 c0       	rjmp	.+10     	; 0x87a <setup+0x90>
     870:	c3 70       	andi	r28, 0x03	; 3
     872:	dd 27       	eor	r29, r29
     874:	cd 2b       	or	r28, r29
     876:	d1 f7       	brne	.-12     	; 0x86c <setup+0x82>
     878:	93 60       	ori	r25, 0x03	; 3
     87a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <_behaviour>
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <_Z15switchOffSystemv>:
     884:	60 e5       	ldi	r22, 0x50	; 80
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	85 e8       	ldi	r24, 0x85	; 133
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN5Print7printlnEPKc>
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
     898:	68 eb       	ldi	r22, 0xB8	; 184
     89a:	7b e0       	ldi	r23, 0x0B	; 11
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <delay>

000008a4 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	2a 97       	sbiw	r28, 0x0a	; 10
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
};


//TODO: All these to be uint16_t ?

struct SensorData {
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	89 83       	std	Y+1, r24	; 0x01
	
	SensorData sd;
	sensorMgr.readData(&sd);
     8bc:	be 01       	movw	r22, r28
     8be:	6f 5f       	subi	r22, 0xFF	; 255
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	83 ea       	ldi	r24, 0xA3	; 163
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	2a 96       	adiw	r28, 0x0a	; 10
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <_Z8sendDatav>:

boolean sendData() {
	
	RM_LOGLN(F("Sending data..."));
     8de:	63 e4       	ldi	r22, 0x43	; 67
     8e0:	71 e0       	ldi	r23, 0x01	; 1
     8e2:	85 e8       	ldi	r24, 0x85	; 133
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	return false;
}
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	08 95       	ret

000008ee <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
     8ee:	68 ee       	ldi	r22, 0xE8	; 232
     8f0:	73 e0       	ldi	r23, 0x03	; 3
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
	++_timerCounter;
     8fa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     8fe:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
     908:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
     90c:	69 e3       	ldi	r22, 0x39	; 57
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	85 e8       	ldi	r24, 0x85	; 133
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
     918:	6e e4       	ldi	r22, 0x4E	; 78
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	85 e8       	ldi	r24, 0x85	; 133
     91e:	93 e0       	ldi	r25, 0x03	; 3
     920:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN5Print5printEPKc>
     924:	4a e0       	ldi	r20, 0x0A	; 10
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <_behaviour>
     92c:	85 e8       	ldi	r24, 0x85	; 133
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
     934:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_behaviour>
     938:	80 ff       	sbrs	r24, 0
     93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0x4f>
		
		if (takeReadings())
     93c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12takeReadingsv>
     940:	88 23       	and	r24, r24
     942:	29 f0       	breq	.+10     	; 0x94e <__stack+0x4f>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
     944:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_behaviour>
     948:	8e 7f       	andi	r24, 0xFE	; 254
     94a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
     94e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_behaviour>
     952:	81 ff       	sbrs	r24, 1
     954:	09 c0       	rjmp	.+18     	; 0x968 <__stack+0x69>
		
		if (sendData())
     956:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z8sendDatav>
     95a:	88 23       	and	r24, r24
     95c:	29 f0       	breq	.+10     	; 0x968 <__stack+0x69>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
     95e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_behaviour>
     962:	8d 7f       	andi	r24, 0xFD	; 253
     964:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
     968:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_behaviour>
     96c:	81 11       	cpse	r24, r1
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
		
		switchOffSystem();
     970:	0c 94 42 04 	jmp	0x884	; 0x884 <_Z15switchOffSystemv>
     974:	08 95       	ret

00000976 <_GLOBAL__sub_I_fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	85 ea       	ldi	r24, 0xA5	; 165
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	84 ea       	ldi	r24, 0xA4	; 164
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	83 ea       	ldi	r24, 0xA3	; 163
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_ZN13SensorManagerC1Eb>

00000996 <_ZN7TwoWire5writeEi>:
uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
	return value;
}
     996:	dc 01       	movw	r26, r24
     998:	ed 91       	ld	r30, X+
     99a:	fc 91       	ld	r31, X
     99c:	01 90       	ld	r0, Z+
     99e:	f0 81       	ld	r31, Z
     9a0:	e0 2d       	mov	r30, r0
     9a2:	09 94       	ijmp

000009a4 <_ZN12RmMemManagerC1Eb>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	60 83       	st	Z, r22
     9a8:	61 11       	cpse	r22, r1
     9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <_ZN12RmMemManagerC1Eb+0x10>
     9ac:	8f e2       	ldi	r24, 0x2F	; 47
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <_ZN7TwoWire5beginEv>
     9b4:	08 95       	ret

000009b6 <_Z13internalWritejPhh>:
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	eb 01       	movw	r28, r22
     9c4:	7b 01       	movw	r14, r22
     9c6:	e4 0e       	add	r14, r20
     9c8:	f1 1c       	adc	r15, r1
     9ca:	8c 01       	movw	r16, r24
     9cc:	ce 15       	cp	r28, r14
     9ce:	df 05       	cpc	r29, r15
     9d0:	21 f1       	breq	.+72     	; 0xa1a <_Z13internalWritejPhh+0x64>
     9d2:	60 e5       	ldi	r22, 0x50	; 80
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	8f e2       	ldi	r24, 0x2F	; 47
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN7TwoWire17beginTransmissionEi>
     9de:	61 2f       	mov	r22, r17
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	8f e2       	ldi	r24, 0x2F	; 47
     9e4:	93 e0       	ldi	r25, 0x03	; 3
     9e6:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN7TwoWire5writeEi>
     9ea:	b8 01       	movw	r22, r16
     9ec:	77 27       	eor	r23, r23
     9ee:	8f e2       	ldi	r24, 0x2F	; 47
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN7TwoWire5writeEi>
     9f6:	69 91       	ld	r22, Y+
     9f8:	8f e2       	ldi	r24, 0x2F	; 47
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN7TwoWire5writeEh>
     a00:	8f e2       	ldi	r24, 0x2F	; 47
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN7TwoWire15endTransmissionEv>
     a08:	6f e0       	ldi	r22, 0x0F	; 15
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <delay>
     a14:	0f 5f       	subi	r16, 0xFF	; 255
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	d9 cf       	rjmp	.-78     	; 0x9cc <_Z13internalWritejPhh+0x16>
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	08 95       	ret

00000a28 <_Z12internalReadjPhh>:
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	eb 01       	movw	r28, r22
     a36:	7b 01       	movw	r14, r22
     a38:	e4 0e       	add	r14, r20
     a3a:	f1 1c       	adc	r15, r1
     a3c:	8c 01       	movw	r16, r24
     a3e:	ce 15       	cp	r28, r14
     a40:	df 05       	cpc	r29, r15
     a42:	71 f1       	breq	.+92     	; 0xaa0 <_Z12internalReadjPhh+0x78>
     a44:	60 e5       	ldi	r22, 0x50	; 80
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	8f e2       	ldi	r24, 0x2F	; 47
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN7TwoWire17beginTransmissionEi>
     a50:	61 2f       	mov	r22, r17
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	8f e2       	ldi	r24, 0x2F	; 47
     a56:	93 e0       	ldi	r25, 0x03	; 3
     a58:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN7TwoWire5writeEi>
     a5c:	b8 01       	movw	r22, r16
     a5e:	77 27       	eor	r23, r23
     a60:	8f e2       	ldi	r24, 0x2F	; 47
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN7TwoWire5writeEi>
     a68:	8f e2       	ldi	r24, 0x2F	; 47
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN7TwoWire15endTransmissionEv>
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e5       	ldi	r22, 0x50	; 80
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	8f e2       	ldi	r24, 0x2F	; 47
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	0e 94 87 09 	call	0x130e	; 0x130e <_ZN7TwoWire11requestFromEii>
     a80:	8f e2       	ldi	r24, 0x2F	; 47
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN7TwoWire9availableEv>
     a88:	89 2b       	or	r24, r25
     a8a:	29 f0       	breq	.+10     	; 0xa96 <_Z12internalReadjPhh+0x6e>
     a8c:	8f e2       	ldi	r24, 0x2F	; 47
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZN7TwoWire4readEv>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <_Z12internalReadjPhh+0x70>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	89 93       	st	Y+, r24
     a9a:	0f 5f       	subi	r16, 0xFF	; 255
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	cf cf       	rjmp	.-98     	; 0xa3e <_Z12internalReadjPhh+0x16>
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	08 95       	ret

00000aae <_ZN12RmMemManager19getUShortFromMemoryEj>:

uint16_t RmMemManager::getUShortFromMemory(uint16_t address) {
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	cb 01       	movw	r24, r22
	
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
     aba:	42 e0       	ldi	r20, 0x02	; 2
     abc:	be 01       	movw	r22, r28
     abe:	6f 5f       	subi	r22, 0xFF	; 255
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	0e 94 14 05 	call	0xa28	; 0xa28 <_Z12internalReadjPhh>
	return value;
}
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <_ZN12RmMemManager18incrementBootCountEv>:
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}

uint16_t RmMemManager::incrementBootCount() {
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	00 d0       	rcall	.+0      	; 0xade <_ZN12RmMemManager18incrementBootCountEv+0xa>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
	
	//TODO: Somehow verify Wire is working?
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
	uint16_t currVal = getUShortFromMemory(addr);
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN12RmMemManager19getUShortFromMemoryEj>
	++currVal;
     aea:	8c 01       	movw	r16, r24
     aec:	0f 5f       	subi	r16, 0xFF	; 255
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
     af0:	1a 83       	std	Y+2, r17	; 0x02
     af2:	09 83       	std	Y+1, r16	; 0x01
	internalWrite(address, (uint8_t*)&value, sizeof(value));
}

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value) {
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
     af4:	42 e0       	ldi	r20, 0x02	; 2
     af6:	be 01       	movw	r22, r28
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z13internalWritejPhh>
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
	uint16_t currVal = getUShortFromMemory(addr);
	++currVal;
	setUShortToMemory(addr, currVal);
	return currVal;
}
     b04:	c8 01       	movw	r24, r16
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
     b14:	fc 01       	movw	r30, r24
     b16:	60 83       	st	Z, r22
     b18:	08 95       	ret

00000b1a <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	81 11       	cpse	r24, r1
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
     b22:	86 2f       	mov	r24, r22
     b24:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	08 95       	ret

00000b2e <_Z11getMockDataP10SensorData>:

uint8_t __mockDataCounter;
void getMockData(SensorData* ret) {
     b2e:	fc 01       	movw	r30, r24
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
     b30:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__mockDataCounter>
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	28 0f       	add	r18, r24
     b38:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <__mockDataCounter>
	
	ret->battVoltage = __mockDataCounter;
     b3c:	82 2f       	mov	r24, r18
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	92 83       	std	Z+2, r25	; 0x02
     b42:	81 83       	std	Z+1, r24	; 0x01
	ret->pVVoltage = __mockDataCounter*10;
     b44:	3a e0       	ldi	r19, 0x0A	; 10
     b46:	23 9f       	mul	r18, r19
     b48:	c0 01       	movw	r24, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	96 83       	std	Z+6, r25	; 0x06
     b4e:	85 83       	std	Z+5, r24	; 0x05
	ret->current = __mockDataCounter%7;
     b50:	82 2f       	mov	r24, r18
     b52:	67 e0       	ldi	r22, 0x07	; 7
     b54:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__udivmodqi4>
     b58:	89 2f       	mov	r24, r25
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	94 83       	std	Z+4, r25	; 0x04
     b5e:	83 83       	std	Z+3, r24	; 0x03
	ret->temperature = __mockDataCounter*100;
     b60:	34 e6       	ldi	r19, 0x64	; 100
     b62:	23 9f       	mul	r18, r19
     b64:	c0 01       	movw	r24, r0
     b66:	11 24       	eor	r1, r1
     b68:	90 87       	std	Z+8, r25	; 0x08
     b6a:	87 83       	std	Z+7, r24	; 0x07
     b6c:	08 95       	ret

00000b6e <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
     b6e:	af 92       	push	r10
     b70:	bf 92       	push	r11
     b72:	cf 92       	push	r12
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	8c 01       	movw	r16, r24
     b84:	eb 01       	movw	r28, r22
	
	RM_LOGLN(F("Reading sensors..."));
     b86:	6a e6       	ldi	r22, 0x6A	; 106
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	85 e8       	ldi	r24, 0x85	; 133
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (_isMock) {
     b92:	f8 01       	movw	r30, r16
     b94:	80 81       	ld	r24, Z
     b96:	88 23       	and	r24, r24
     b98:	21 f0       	breq	.+8      	; 0xba2 <_ZN13SensorManager8readDataEP10SensorData+0x34>
		getMockData(ret);
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z11getMockDataP10SensorData>
     ba0:	1b c0       	rjmp	.+54     	; 0xbd8 <_ZN13SensorManager8readDataEP10SensorData+0x6a>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
     ba2:	6e e0       	ldi	r22, 0x0E	; 14
     ba4:	c8 01       	movw	r24, r16
     ba6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN13SensorManager16takeSampleAnalogEh>
     baa:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
     bac:	6f e0       	ldi	r22, 0x0F	; 15
     bae:	c8 01       	movw	r24, r16
     bb0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN13SensorManager16takeSampleAnalogEh>
     bb4:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
     bb6:	61 e1       	ldi	r22, 0x11	; 17
     bb8:	c8 01       	movw	r24, r16
     bba:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN13SensorManager16takeSampleAnalogEh>
     bbe:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
     bc0:	60 e1       	ldi	r22, 0x10	; 16
     bc2:	c8 01       	movw	r24, r16
     bc4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
     bc8:	ba 82       	std	Y+2, r11	; 0x02
     bca:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
     bcc:	de 82       	std	Y+6, r13	; 0x06
     bce:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
     bd0:	fc 82       	std	Y+4, r15	; 0x04
     bd2:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
     bd4:	98 87       	std	Y+8, r25	; 0x08
     bd6:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
     bd8:	ce 01       	movw	r24, r28
	
	//return ret;
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	bf 90       	pop	r11
     bec:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
     bee:	0c 94 a0 03 	jmp	0x740	; 0x740 <_ZN7Helpers15printSensorDataEP10SensorData>

00000bf2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     bf2:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_state>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_sendStop>
     bfc:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <twi_inRepStart>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	82 e1       	ldi	r24, 0x12	; 18
     c04:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	83 e1       	ldi	r24, 0x13	; 19
     c0c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
     c10:	e9 eb       	ldi	r30, 0xB9	; 185
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	80 83       	st	Z, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	8d 7f       	andi	r24, 0xFD	; 253
     c1e:	80 83       	st	Z, r24
     c20:	88 e4       	ldi	r24, 0x48	; 72
     c22:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     c26:	85 e4       	ldi	r24, 0x45	; 69
     c28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c2c:	08 95       	ret

00000c2e <twi_readFrom>:
     c2e:	41 32       	cpi	r20, 0x21	; 33
     c30:	08 f0       	brcs	.+2      	; 0xc34 <twi_readFrom+0x6>
     c32:	43 c0       	rjmp	.+134    	; 0xcba <twi_readFrom+0x8c>
     c34:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <twi_state>
     c38:	91 11       	cpse	r25, r1
     c3a:	fc cf       	rjmp	.-8      	; 0xc34 <twi_readFrom+0x6>
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <twi_state>
     c42:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <twi_sendStop>
     c46:	2f ef       	ldi	r18, 0xFF	; 255
     c48:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <twi_error>
     c4c:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <twi_masterBufferIndex>
     c50:	24 0f       	add	r18, r20
     c52:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <twi_masterBufferLength>
     c56:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <twi_slarw>
     c5a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <twi_slarw>
     c5e:	88 0f       	add	r24, r24
     c60:	89 2b       	or	r24, r25
     c62:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <twi_slarw>
     c66:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_inRepStart>
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	61 f4       	brne	.+24     	; 0xc86 <twi_readFrom+0x58>
     c6e:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <twi_inRepStart>
     c72:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_slarw>
     c76:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     c7a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c7e:	83 fd       	sbrc	r24, 3
     c80:	f8 cf       	rjmp	.-16     	; 0xc72 <twi_readFrom+0x44>
     c82:	85 ec       	ldi	r24, 0xC5	; 197
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <twi_readFrom+0x5a>
     c86:	85 ee       	ldi	r24, 0xE5	; 229
     c88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c8c:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_state>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	e1 f3       	breq	.-8      	; 0xc8c <twi_readFrom+0x5e>
     c94:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_masterBufferIndex>
     c98:	84 17       	cp	r24, r20
     c9a:	10 f4       	brcc	.+4      	; 0xca0 <twi_readFrom+0x72>
     c9c:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <twi_masterBufferIndex>
     ca0:	a7 e0       	ldi	r26, 0x07	; 7
     ca2:	b3 e0       	ldi	r27, 0x03	; 3
     ca4:	96 2f       	mov	r25, r22
     ca6:	fb 01       	movw	r30, r22
     ca8:	8e 2f       	mov	r24, r30
     caa:	89 1b       	sub	r24, r25
     cac:	84 17       	cp	r24, r20
     cae:	18 f4       	brcc	.+6      	; 0xcb6 <twi_readFrom+0x88>
     cb0:	8d 91       	ld	r24, X+
     cb2:	81 93       	st	Z+, r24
     cb4:	f9 cf       	rjmp	.-14     	; 0xca8 <twi_readFrom+0x7a>
     cb6:	84 2f       	mov	r24, r20
     cb8:	08 95       	ret
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret

00000cbe <twi_writeTo>:
     cbe:	0f 93       	push	r16
     cc0:	41 32       	cpi	r20, 0x21	; 33
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <twi_writeTo+0x8>
     cc4:	4a c0       	rjmp	.+148    	; 0xd5a <twi_writeTo+0x9c>
     cc6:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <twi_state>
     cca:	91 11       	cpse	r25, r1
     ccc:	fc cf       	rjmp	.-8      	; 0xcc6 <twi_writeTo+0x8>
     cce:	32 e0       	ldi	r19, 0x02	; 2
     cd0:	30 93 2e 03 	sts	0x032E, r19	; 0x80032e <twi_state>
     cd4:	00 93 2c 03 	sts	0x032C, r16	; 0x80032c <twi_sendStop>
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	30 93 c1 02 	sts	0x02C1, r19	; 0x8002c1 <twi_error>
     cde:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <twi_masterBufferIndex>
     ce2:	40 93 05 03 	sts	0x0305, r20	; 0x800305 <twi_masterBufferLength>
     ce6:	56 2f       	mov	r21, r22
     ce8:	a7 e0       	ldi	r26, 0x07	; 7
     cea:	b3 e0       	ldi	r27, 0x03	; 3
     cec:	fb 01       	movw	r30, r22
     cee:	3e 2f       	mov	r19, r30
     cf0:	35 1b       	sub	r19, r21
     cf2:	34 17       	cp	r19, r20
     cf4:	18 f4       	brcc	.+6      	; 0xcfc <twi_writeTo+0x3e>
     cf6:	31 91       	ld	r19, Z+
     cf8:	3d 93       	st	X+, r19
     cfa:	f9 cf       	rjmp	.-14     	; 0xcee <twi_writeTo+0x30>
     cfc:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <twi_slarw>
     d00:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <twi_slarw>
     d04:	88 0f       	add	r24, r24
     d06:	83 2b       	or	r24, r19
     d08:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <twi_slarw>
     d0c:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_inRepStart>
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	61 f4       	brne	.+24     	; 0xd2c <twi_writeTo+0x6e>
     d14:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <twi_inRepStart>
     d18:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_slarw>
     d1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     d20:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     d24:	83 fd       	sbrc	r24, 3
     d26:	f8 cf       	rjmp	.-16     	; 0xd18 <twi_writeTo+0x5a>
     d28:	85 ec       	ldi	r24, 0xC5	; 197
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <twi_writeTo+0x70>
     d2c:	85 ee       	ldi	r24, 0xE5	; 229
     d2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     d32:	22 23       	and	r18, r18
     d34:	21 f0       	breq	.+8      	; 0xd3e <twi_writeTo+0x80>
     d36:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_state>
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	d1 f3       	breq	.-12     	; 0xd32 <twi_writeTo+0x74>
     d3e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <twi_error>
     d42:	8f 3f       	cpi	r24, 0xFF	; 255
     d44:	79 f0       	breq	.+30     	; 0xd64 <twi_writeTo+0xa6>
     d46:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <twi_error>
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	41 f0       	breq	.+16     	; 0xd5e <twi_writeTo+0xa0>
     d4e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <twi_error>
     d52:	80 33       	cpi	r24, 0x30	; 48
     d54:	31 f0       	breq	.+12     	; 0xd62 <twi_writeTo+0xa4>
     d56:	94 e0       	ldi	r25, 0x04	; 4
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <twi_writeTo+0xa6>
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <twi_writeTo+0xa6>
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <twi_writeTo+0xa6>
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	89 2f       	mov	r24, r25
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <twi_transmit>:
     d6a:	40 91 e3 02 	lds	r20, 0x02E3	; 0x8002e3 <twi_txBufferLength>
     d6e:	26 2f       	mov	r18, r22
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	24 0f       	add	r18, r20
     d74:	31 1d       	adc	r19, r1
     d76:	21 32       	cpi	r18, 0x21	; 33
     d78:	31 05       	cpc	r19, r1
     d7a:	dc f4       	brge	.+54     	; 0xdb2 <twi_transmit+0x48>
     d7c:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <twi_state>
     d80:	24 30       	cpi	r18, 0x04	; 4
     d82:	c9 f4       	brne	.+50     	; 0xdb6 <twi_transmit+0x4c>
     d84:	fc 01       	movw	r30, r24
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	86 17       	cp	r24, r22
     d8c:	58 f4       	brcc	.+22     	; 0xda4 <twi_transmit+0x3a>
     d8e:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <twi_txBufferLength>
     d92:	21 91       	ld	r18, Z+
     d94:	dc 01       	movw	r26, r24
     d96:	ab 51       	subi	r26, 0x1B	; 27
     d98:	bd 4f       	sbci	r27, 0xFD	; 253
     d9a:	a3 0f       	add	r26, r19
     d9c:	b1 1d       	adc	r27, r1
     d9e:	2c 93       	st	X, r18
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	f3 cf       	rjmp	.-26     	; 0xd8a <twi_transmit+0x20>
     da4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_txBufferLength>
     da8:	68 0f       	add	r22, r24
     daa:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <twi_txBufferLength>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	08 95       	ret
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	08 95       	ret
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	08 95       	ret

00000dba <twi_attachSlaveRxEvent>:
     dba:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <twi_onSlaveReceive+0x1>
     dbe:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <twi_onSlaveReceive>
     dc2:	08 95       	ret

00000dc4 <twi_attachSlaveTxEvent>:
     dc4:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <twi_onSlaveTransmit+0x1>
     dc8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_onSlaveTransmit>
     dcc:	08 95       	ret

00000dce <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     dce:	85 ed       	ldi	r24, 0xD5	; 213
     dd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dd4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     dd8:	84 fd       	sbrc	r24, 4
     dda:	fc cf       	rjmp	.-8      	; 0xdd4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     ddc:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_state>
     de0:	08 95       	ret

00000de2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     de2:	85 ec       	ldi	r24, 0xC5	; 197
     de4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
     de8:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_state>
     dec:	08 95       	ret

00000dee <__vector_24>:
}

ISR(TWI_vect)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
  switch(TW_STATUS){
     e10:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     e14:	88 7f       	andi	r24, 0xF8	; 248
     e16:	80 36       	cpi	r24, 0x60	; 96
     e18:	09 f4       	brne	.+2      	; 0xe1c <__vector_24+0x2e>
     e1a:	9e c0       	rjmp	.+316    	; 0xf58 <__vector_24+0x16a>
     e1c:	78 f5       	brcc	.+94     	; 0xe7c <__vector_24+0x8e>
     e1e:	88 32       	cpi	r24, 0x28	; 40
     e20:	09 f4       	brne	.+2      	; 0xe24 <__vector_24+0x36>
     e22:	5d c0       	rjmp	.+186    	; 0xede <__vector_24+0xf0>
     e24:	90 f4       	brcc	.+36     	; 0xe4a <__vector_24+0x5c>
     e26:	80 31       	cpi	r24, 0x10	; 16
     e28:	09 f4       	brne	.+2      	; 0xe2c <__vector_24+0x3e>
     e2a:	56 c0       	rjmp	.+172    	; 0xed8 <__vector_24+0xea>
     e2c:	38 f4       	brcc	.+14     	; 0xe3c <__vector_24+0x4e>
     e2e:	88 23       	and	r24, r24
     e30:	09 f4       	brne	.+2      	; 0xe34 <__vector_24+0x46>
     e32:	f5 c0       	rjmp	.+490    	; 0x101e <__vector_24+0x230>
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	09 f4       	brne	.+2      	; 0xe3a <__vector_24+0x4c>
     e38:	4f c0       	rjmp	.+158    	; 0xed8 <__vector_24+0xea>
     e3a:	f5 c0       	rjmp	.+490    	; 0x1026 <__vector_24+0x238>
     e3c:	88 31       	cpi	r24, 0x18	; 24
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__vector_24+0x54>
     e40:	4e c0       	rjmp	.+156    	; 0xede <__vector_24+0xf0>
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	09 f4       	brne	.+2      	; 0xe48 <__vector_24+0x5a>
     e46:	5f c0       	rjmp	.+190    	; 0xf06 <__vector_24+0x118>
     e48:	ee c0       	rjmp	.+476    	; 0x1026 <__vector_24+0x238>
     e4a:	80 34       	cpi	r24, 0x40	; 64
     e4c:	09 f4       	brne	.+2      	; 0xe50 <__vector_24+0x62>
     e4e:	6a c0       	rjmp	.+212    	; 0xf24 <__vector_24+0x136>
     e50:	58 f4       	brcc	.+22     	; 0xe68 <__vector_24+0x7a>
     e52:	80 33       	cpi	r24, 0x30	; 48
     e54:	09 f4       	brne	.+2      	; 0xe58 <__vector_24+0x6a>
     e56:	57 c0       	rjmp	.+174    	; 0xf06 <__vector_24+0x118>
     e58:	88 33       	cpi	r24, 0x38	; 56
     e5a:	09 f0       	breq	.+2      	; 0xe5e <__vector_24+0x70>
     e5c:	e4 c0       	rjmp	.+456    	; 0x1026 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     e5e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <twi_error>
      twi_releaseBus();
     e62:	0e 94 f1 06 	call	0xde2	; 0xde2 <twi_releaseBus>
      break;
     e66:	df c0       	rjmp	.+446    	; 0x1026 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     e68:	80 35       	cpi	r24, 0x50	; 80
     e6a:	09 f4       	brne	.+2      	; 0xe6e <__vector_24+0x80>
     e6c:	4f c0       	rjmp	.+158    	; 0xf0c <__vector_24+0x11e>
     e6e:	88 35       	cpi	r24, 0x58	; 88
     e70:	09 f4       	brne	.+2      	; 0xe74 <__vector_24+0x86>
     e72:	5d c0       	rjmp	.+186    	; 0xf2e <__vector_24+0x140>
     e74:	88 34       	cpi	r24, 0x48	; 72
     e76:	09 f0       	breq	.+2      	; 0xe7a <__vector_24+0x8c>
     e78:	d6 c0       	rjmp	.+428    	; 0x1026 <__vector_24+0x238>
     e7a:	d3 c0       	rjmp	.+422    	; 0x1022 <__vector_24+0x234>
     e7c:	88 39       	cpi	r24, 0x98	; 152
     e7e:	09 f4       	brne	.+2      	; 0xe82 <__vector_24+0x94>
     e80:	c4 c0       	rjmp	.+392    	; 0x100a <__vector_24+0x21c>
     e82:	a8 f4       	brcc	.+42     	; 0xeae <__vector_24+0xc0>
     e84:	88 37       	cpi	r24, 0x78	; 120
     e86:	09 f4       	brne	.+2      	; 0xe8a <__vector_24+0x9c>
     e88:	67 c0       	rjmp	.+206    	; 0xf58 <__vector_24+0x16a>
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <__vector_24+0xac>
     e8c:	88 36       	cpi	r24, 0x68	; 104
     e8e:	09 f4       	brne	.+2      	; 0xe92 <__vector_24+0xa4>
     e90:	63 c0       	rjmp	.+198    	; 0xf58 <__vector_24+0x16a>
     e92:	80 37       	cpi	r24, 0x70	; 112
     e94:	09 f4       	brne	.+2      	; 0xe98 <__vector_24+0xaa>
     e96:	60 c0       	rjmp	.+192    	; 0xf58 <__vector_24+0x16a>
     e98:	c6 c0       	rjmp	.+396    	; 0x1026 <__vector_24+0x238>
     e9a:	88 38       	cpi	r24, 0x88	; 136
     e9c:	09 f4       	brne	.+2      	; 0xea0 <__vector_24+0xb2>
     e9e:	b5 c0       	rjmp	.+362    	; 0x100a <__vector_24+0x21c>
     ea0:	80 39       	cpi	r24, 0x90	; 144
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__vector_24+0xb8>
     ea4:	5f c0       	rjmp	.+190    	; 0xf64 <__vector_24+0x176>
     ea6:	80 38       	cpi	r24, 0x80	; 128
     ea8:	09 f0       	breq	.+2      	; 0xeac <__vector_24+0xbe>
     eaa:	bd c0       	rjmp	.+378    	; 0x1026 <__vector_24+0x238>
     eac:	5b c0       	rjmp	.+182    	; 0xf64 <__vector_24+0x176>
     eae:	80 3b       	cpi	r24, 0xB0	; 176
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <__vector_24+0xc6>
     eb2:	83 c0       	rjmp	.+262    	; 0xfba <__vector_24+0x1cc>
     eb4:	38 f4       	brcc	.+14     	; 0xec4 <__vector_24+0xd6>
     eb6:	80 3a       	cpi	r24, 0xA0	; 160
     eb8:	09 f4       	brne	.+2      	; 0xebc <__vector_24+0xce>
     eba:	66 c0       	rjmp	.+204    	; 0xf88 <__vector_24+0x19a>
     ebc:	88 3a       	cpi	r24, 0xA8	; 168
     ebe:	09 f4       	brne	.+2      	; 0xec2 <__vector_24+0xd4>
     ec0:	7c c0       	rjmp	.+248    	; 0xfba <__vector_24+0x1cc>
     ec2:	b1 c0       	rjmp	.+354    	; 0x1026 <__vector_24+0x238>
     ec4:	80 3c       	cpi	r24, 0xC0	; 192
     ec6:	09 f4       	brne	.+2      	; 0xeca <__vector_24+0xdc>
     ec8:	a4 c0       	rjmp	.+328    	; 0x1012 <__vector_24+0x224>
     eca:	88 3c       	cpi	r24, 0xC8	; 200
     ecc:	09 f4       	brne	.+2      	; 0xed0 <__vector_24+0xe2>
     ece:	a1 c0       	rjmp	.+322    	; 0x1012 <__vector_24+0x224>
     ed0:	88 3b       	cpi	r24, 0xB8	; 184
     ed2:	09 f4       	brne	.+2      	; 0xed6 <__vector_24+0xe8>
     ed4:	87 c0       	rjmp	.+270    	; 0xfe4 <__vector_24+0x1f6>
     ed6:	a7 c0       	rjmp	.+334    	; 0x1026 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     ed8:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_slarw>
     edc:	10 c0       	rjmp	.+32     	; 0xefe <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     ede:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <twi_masterBufferIndex>
     ee2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <twi_masterBufferLength>
     ee6:	98 17       	cp	r25, r24
     ee8:	70 f5       	brcc	.+92     	; 0xf46 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     eea:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_masterBufferIndex>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8e 0f       	add	r24, r30
     ef2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_masterBufferIndex>
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	e9 5f       	subi	r30, 0xF9	; 249
     efa:	fc 4f       	sbci	r31, 0xFC	; 252
     efc:	80 81       	ld	r24, Z
     efe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     f02:	85 ec       	ldi	r24, 0xC5	; 197
     f04:	83 c0       	rjmp	.+262    	; 0x100c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     f06:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <twi_error>
     f0a:	8b c0       	rjmp	.+278    	; 0x1022 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     f0c:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_masterBufferIndex>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	8e 0f       	add	r24, r30
     f14:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_masterBufferIndex>
     f18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	e9 5f       	subi	r30, 0xF9	; 249
     f20:	fc 4f       	sbci	r31, 0xFC	; 252
     f22:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     f24:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <twi_masterBufferIndex>
     f28:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <twi_masterBufferLength>
     f2c:	6b c0       	rjmp	.+214    	; 0x1004 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     f2e:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_masterBufferIndex>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	8e 0f       	add	r24, r30
     f36:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_masterBufferIndex>
     f3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	e9 5f       	subi	r30, 0xF9	; 249
     f42:	fc 4f       	sbci	r31, 0xFC	; 252
     f44:	80 83       	st	Z, r24
	if (twi_sendStop)
     f46:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_sendStop>
     f4a:	81 11       	cpse	r24, r1
     f4c:	6a c0       	rjmp	.+212    	; 0x1022 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     f54:	84 ea       	ldi	r24, 0xA4	; 164
     f56:	5e c0       	rjmp	.+188    	; 0x1014 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     f5e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_rxBufferIndex>
     f62:	cf cf       	rjmp	.-98     	; 0xf02 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     f64:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_rxBufferIndex>
     f68:	80 32       	cpi	r24, 0x20	; 32
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <__vector_24+0x180>
     f6c:	4e c0       	rjmp	.+156    	; 0x100a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     f6e:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <twi_rxBufferIndex>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	8e 0f       	add	r24, r30
     f76:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_rxBufferIndex>
     f7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	ed 53       	subi	r30, 0x3D	; 61
     f82:	fd 4f       	sbci	r31, 0xFD	; 253
     f84:	80 83       	st	Z, r24
     f86:	bd cf       	rjmp	.-134    	; 0xf02 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     f88:	0e 94 f1 06 	call	0xde2	; 0xde2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     f8c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_rxBufferIndex>
     f90:	80 32       	cpi	r24, 0x20	; 32
     f92:	30 f4       	brcc	.+12     	; 0xfa0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     f94:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <twi_rxBufferIndex>
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ed 53       	subi	r30, 0x3D	; 61
     f9c:	fd 4f       	sbci	r31, 0xFD	; 253
     f9e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     fa0:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <twi_rxBufferIndex>
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	e0 91 27 03 	lds	r30, 0x0327	; 0x800327 <twi_onSlaveReceive>
     faa:	f0 91 28 03 	lds	r31, 0x0328	; 0x800328 <twi_onSlaveReceive+0x1>
     fae:	83 ec       	ldi	r24, 0xC3	; 195
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     fb4:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_rxBufferIndex>
      break;
     fb8:	36 c0       	rjmp	.+108    	; 0x1026 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     fc0:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     fc4:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     fc8:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <twi_onSlaveTransmit>
     fcc:	f0 91 2a 03 	lds	r31, 0x032A	; 0x80032a <twi_onSlaveTransmit+0x1>
     fd0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     fd2:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_txBufferLength>
     fd6:	81 11       	cpse	r24, r1
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     fe0:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     fe4:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <twi_txBufferIndex>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	8e 0f       	add	r24, r30
     fec:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_txBufferIndex>
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	eb 51       	subi	r30, 0x1B	; 27
     ff4:	fd 4f       	sbci	r31, 0xFD	; 253
     ff6:	80 81       	ld	r24, Z
     ff8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     ffc:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <twi_txBufferIndex>
    1000:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_txBufferLength>
    1004:	98 17       	cp	r25, r24
    1006:	08 f4       	brcc	.+2      	; 0x100a <__vector_24+0x21c>
    1008:	7c cf       	rjmp	.-264    	; 0xf02 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    100a:	85 e8       	ldi	r24, 0x85	; 133
    100c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1010:	0a c0       	rjmp	.+20     	; 0x1026 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1012:	85 ec       	ldi	r24, 0xC5	; 197
    1014:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1018:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_state>
      break;
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    101e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <twi_error>
      twi_stop();
    1022:	0e 94 e7 06 	call	0xdce	; 0xdce <twi_stop>
      break;
  }
}
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1048:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    1052:	82 1b       	sub	r24, r18
    1054:	91 09       	sbc	r25, r1
    1056:	08 95       	ret

00001058 <_ZN7TwoWire4readEv>:
    1058:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    105c:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    1060:	98 17       	cp	r25, r24
    1062:	50 f4       	brcc	.+20     	; 0x1078 <_ZN7TwoWire4readEv+0x20>
    1064:	e9 2f       	mov	r30, r25
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	eb 59       	subi	r30, 0x9B	; 155
    106a:	fc 4f       	sbci	r31, 0xFC	; 252
    106c:	20 81       	ld	r18, Z
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    1076:	02 c0       	rjmp	.+4      	; 0x107c <_ZN7TwoWire4readEv+0x24>
    1078:	2f ef       	ldi	r18, 0xFF	; 255
    107a:	3f ef       	ldi	r19, 0xFF	; 255
    107c:	c9 01       	movw	r24, r18
    107e:	08 95       	ret

00001080 <_ZN7TwoWire4peekEv>:
    1080:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    1084:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    1088:	e8 17       	cp	r30, r24
    108a:	30 f4       	brcc	.+12     	; 0x1098 <_ZN7TwoWire4peekEv+0x18>
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	eb 59       	subi	r30, 0x9B	; 155
    1090:	fc 4f       	sbci	r31, 0xFC	; 252
    1092:	80 81       	ld	r24, Z
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	08 95       	ret
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	08 95       	ret

0000109e <_ZN7TwoWire5flushEv>:
    109e:	08 95       	ret

000010a0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    10a6:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <_ZN7TwoWire14user_onReceiveE>
    10aa:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <_ZN7TwoWire14user_onReceiveE+0x1>
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	f1 f0       	breq	.+60     	; 0x10ee <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    10b2:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    10b6:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    10ba:	98 17       	cp	r25, r24
    10bc:	c0 f0       	brcs	.+48     	; 0x10ee <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	29 2f       	mov	r18, r25
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	26 17       	cp	r18, r22
    10c6:	37 07       	cpc	r19, r23
    10c8:	54 f4       	brge	.+20     	; 0x10de <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    10ca:	de 01       	movw	r26, r28
    10cc:	a2 0f       	add	r26, r18
    10ce:	b3 1f       	adc	r27, r19
    10d0:	4c 91       	ld	r20, X
    10d2:	d9 01       	movw	r26, r18
    10d4:	ab 59       	subi	r26, 0x9B	; 155
    10d6:	bc 4f       	sbci	r27, 0xFC	; 252
    10d8:	4c 93       	st	X, r20
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	f1 cf       	rjmp	.-30     	; 0x10c0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    10de:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    10e2:	60 93 63 03 	sts	0x0363, r22	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    10e6:	cb 01       	movw	r24, r22
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	09 94       	ijmp
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <_ZN7TwoWire16onRequestServiceEv>:
    10f4:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <_ZN7TwoWire14user_onRequestE>
    10f8:	f0 91 3e 03 	lds	r31, 0x033E	; 0x80033e <_ZN7TwoWire14user_onRequestE+0x1>
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	29 f0       	breq	.+10     	; 0x110a <_ZN7TwoWire16onRequestServiceEv+0x16>
    1100:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    1104:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    1108:	09 94       	ijmp
    110a:	08 95       	ret

0000110c <_ZN7TwoWire5writeEPKhj>:
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	7c 01       	movw	r14, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8a 01       	movw	r16, r20
    1122:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <_ZN7TwoWire12transmittingE>
    1126:	22 23       	and	r18, r18
    1128:	89 f0       	breq	.+34     	; 0x114c <_ZN7TwoWire5writeEPKhj+0x40>
    112a:	eb 01       	movw	r28, r22
    112c:	6b 01       	movw	r12, r22
    112e:	c4 0e       	add	r12, r20
    1130:	d5 1e       	adc	r13, r21
    1132:	cc 15       	cp	r28, r12
    1134:	dd 05       	cpc	r29, r13
    1136:	69 f0       	breq	.+26     	; 0x1152 <_ZN7TwoWire5writeEPKhj+0x46>
    1138:	69 91       	ld	r22, Y+
    113a:	d7 01       	movw	r26, r14
    113c:	ed 91       	ld	r30, X+
    113e:	fc 91       	ld	r31, X
    1140:	01 90       	ld	r0, Z+
    1142:	f0 81       	ld	r31, Z
    1144:	e0 2d       	mov	r30, r0
    1146:	c7 01       	movw	r24, r14
    1148:	09 95       	icall
    114a:	f3 cf       	rjmp	.-26     	; 0x1132 <_ZN7TwoWire5writeEPKhj+0x26>
    114c:	64 2f       	mov	r22, r20
    114e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <twi_transmit>
    1152:	c8 01       	movw	r24, r16
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	08 95       	ret

00001166 <_ZN7TwoWire5writeEh>:
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	1f 92       	push	r1
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	69 83       	std	Y+1, r22	; 0x01
    1172:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <_ZN7TwoWire12transmittingE>
    1176:	22 23       	and	r18, r18
    1178:	d1 f0       	breq	.+52     	; 0x11ae <_ZN7TwoWire5writeEh+0x48>
    117a:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    117e:	20 32       	cpi	r18, 0x20	; 32
    1180:	40 f0       	brcs	.+16     	; 0x1192 <_ZN7TwoWire5writeEh+0x2c>
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	33 83       	std	Z+3, r19	; 0x03
    118a:	22 83       	std	Z+2, r18	; 0x02
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <_ZN7TwoWire5writeEh+0x56>
    1192:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    1196:	e8 2f       	mov	r30, r24
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	ee 5b       	subi	r30, 0xBE	; 190
    119c:	fc 4f       	sbci	r31, 0xFC	; 252
    119e:	99 81       	ldd	r25, Y+1	; 0x01
    11a0:	90 83       	st	Z, r25
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    11a8:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <_ZN7TwoWire5writeEh+0x52>
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 b5 06 	call	0xd6a	; 0xd6a <twi_transmit>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0f 90       	pop	r0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <_ZN7TwoWireC1Ev>:
    11c4:	fc 01       	movw	r30, r24
    11c6:	13 82       	std	Z+3, r1	; 0x03
    11c8:	12 82       	std	Z+2, r1	; 0x02
    11ca:	88 ee       	ldi	r24, 0xE8	; 232
    11cc:	93 e0       	ldi	r25, 0x03	; 3
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	84 83       	std	Z+4, r24	; 0x04
    11d4:	95 83       	std	Z+5, r25	; 0x05
    11d6:	a6 83       	std	Z+6, r26	; 0x06
    11d8:	b7 83       	std	Z+7, r27	; 0x07
    11da:	85 e6       	ldi	r24, 0x65	; 101
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
    11e2:	08 95       	ret

000011e4 <_ZN7TwoWire5beginEv>:
    11e4:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    11e8:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    11ec:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    11f0:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    11f4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <twi_init>
    11f8:	8a e7       	ldi	r24, 0x7A	; 122
    11fa:	98 e0       	ldi	r25, 0x08	; 8
    11fc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <twi_attachSlaveTxEvent>
    1200:	80 e5       	ldi	r24, 0x50	; 80
    1202:	98 e0       	ldi	r25, 0x08	; 8
    1204:	0c 94 dd 06 	jmp	0xdba	; 0xdba <twi_attachSlaveRxEvent>

00001208 <_ZN7TwoWire17beginTransmissionEh>:
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <_ZN7TwoWire12transmittingE>
    120e:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <_ZN7TwoWire9txAddressE>
    1212:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    1216:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    121a:	08 95       	ret

0000121c <_ZN7TwoWire17beginTransmissionEi>:
    121c:	0c 94 04 09 	jmp	0x1208	; 0x1208 <_ZN7TwoWire17beginTransmissionEh>

00001220 <_ZN7TwoWire15endTransmissionEh>:
    1220:	0f 93       	push	r16
    1222:	06 2f       	mov	r16, r22
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	40 91 40 03 	lds	r20, 0x0340	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    122a:	62 e4       	ldi	r22, 0x42	; 66
    122c:	73 e0       	ldi	r23, 0x03	; 3
    122e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_ZN7TwoWire9txAddressE>
    1232:	0e 94 5f 06 	call	0xcbe	; 0xcbe <twi_writeTo>
    1236:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    123a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    123e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <_ZN7TwoWire12transmittingE>
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <_ZN7TwoWire11requestFromEhhmhh>:
    1246:	4f 92       	push	r4
    1248:	5f 92       	push	r5
    124a:	6f 92       	push	r6
    124c:	7f 92       	push	r7
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	5c 01       	movw	r10, r24
    1262:	f6 2e       	mov	r15, r22
    1264:	d4 2f       	mov	r29, r20
    1266:	28 01       	movw	r4, r16
    1268:	39 01       	movw	r6, r18
    126a:	ee 20       	and	r14, r14
    126c:	21 f1       	breq	.+72     	; 0x12b6 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    126e:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN7TwoWire17beginTransmissionEh>
    1272:	ce 2d       	mov	r28, r14
    1274:	c4 30       	cpi	r28, 0x04	; 4
    1276:	08 f0       	brcs	.+2      	; 0x127a <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1278:	c3 e0       	ldi	r28, 0x03	; 3
    127a:	c1 50       	subi	r28, 0x01	; 1
    127c:	c0 f0       	brcs	.+48     	; 0x12ae <_ZN7TwoWire11requestFromEhhmhh+0x68>
    127e:	28 e0       	ldi	r18, 0x08	; 8
    1280:	c2 9f       	mul	r28, r18
    1282:	c0 01       	movw	r24, r0
    1284:	11 24       	eor	r1, r1
    1286:	a3 01       	movw	r20, r6
    1288:	92 01       	movw	r18, r4
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    128c:	56 95       	lsr	r21
    128e:	47 95       	ror	r20
    1290:	37 95       	ror	r19
    1292:	27 95       	ror	r18
    1294:	8a 95       	dec	r24
    1296:	d2 f7       	brpl	.-12     	; 0x128c <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1298:	ca 01       	movw	r24, r20
    129a:	b9 01       	movw	r22, r18
    129c:	d5 01       	movw	r26, r10
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	01 90       	ld	r0, Z+
    12a4:	f0 81       	ld	r31, Z
    12a6:	e0 2d       	mov	r30, r0
    12a8:	c5 01       	movw	r24, r10
    12aa:	09 95       	icall
    12ac:	e6 cf       	rjmp	.-52     	; 0x127a <_ZN7TwoWire11requestFromEhhmhh+0x34>
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	c5 01       	movw	r24, r10
    12b2:	0e 94 10 09 	call	0x1220	; 0x1220 <_ZN7TwoWire15endTransmissionEh>
    12b6:	4d 2f       	mov	r20, r29
    12b8:	d1 32       	cpi	r29, 0x21	; 33
    12ba:	08 f0       	brcs	.+2      	; 0x12be <_ZN7TwoWire11requestFromEhhmhh+0x78>
    12bc:	40 e2       	ldi	r20, 0x20	; 32
    12be:	2c 2d       	mov	r18, r12
    12c0:	65 e6       	ldi	r22, 0x65	; 101
    12c2:	73 e0       	ldi	r23, 0x03	; 3
    12c4:	8f 2d       	mov	r24, r15
    12c6:	0e 94 17 06 	call	0xc2e	; 0xc2e <twi_readFrom>
    12ca:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    12ce:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	af 90       	pop	r10
    12e4:	7f 90       	pop	r7
    12e6:	6f 90       	pop	r6
    12e8:	5f 90       	pop	r5
    12ea:	4f 90       	pop	r4
    12ec:	08 95       	ret

000012ee <_ZN7TwoWire11requestFromEhhh>:
    12ee:	cf 92       	push	r12
    12f0:	ef 92       	push	r14
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	c2 2e       	mov	r12, r18
    12f8:	e1 2c       	mov	r14, r1
    12fa:	00 e0       	ldi	r16, 0x00	; 0
    12fc:	10 e0       	ldi	r17, 0x00	; 0
    12fe:	98 01       	movw	r18, r16
    1300:	0e 94 23 09 	call	0x1246	; 0x1246 <_ZN7TwoWire11requestFromEhhmhh>
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ef 90       	pop	r14
    130a:	cf 90       	pop	r12
    130c:	08 95       	ret

0000130e <_ZN7TwoWire11requestFromEii>:
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <_ZN7TwoWire11requestFromEhhh>

00001314 <_ZN7TwoWire15endTransmissionEv>:
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	0c 94 10 09 	jmp	0x1220	; 0x1220 <_ZN7TwoWire15endTransmissionEh>

0000131a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    131a:	8f e2       	ldi	r24, 0x2F	; 47
    131c:	93 e0       	ldi	r25, 0x03	; 3
    131e:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <_ZN7TwoWireC1Ev>

00001322 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1322:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1324:	91 8d       	ldd	r25, Z+25	; 0x19
    1326:	22 8d       	ldd	r18, Z+26	; 0x1a
    1328:	89 2f       	mov	r24, r25
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	80 5c       	subi	r24, 0xC0	; 192
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	82 1b       	sub	r24, r18
    1332:	91 09       	sbc	r25, r1
}
    1334:	8f 73       	andi	r24, 0x3F	; 63
    1336:	99 27       	eor	r25, r25
    1338:	08 95       	ret

0000133a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    133a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    133c:	91 8d       	ldd	r25, Z+25	; 0x19
    133e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1340:	98 17       	cp	r25, r24
    1342:	31 f0       	breq	.+12     	; 0x1350 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1344:	82 8d       	ldd	r24, Z+26	; 0x1a
    1346:	e8 0f       	add	r30, r24
    1348:	f1 1d       	adc	r31, r1
    134a:	85 8d       	ldd	r24, Z+29	; 0x1d
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1354:	08 95       	ret

00001356 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1356:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1358:	91 8d       	ldd	r25, Z+25	; 0x19
    135a:	82 8d       	ldd	r24, Z+26	; 0x1a
    135c:	98 17       	cp	r25, r24
    135e:	61 f0       	breq	.+24     	; 0x1378 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1360:	82 8d       	ldd	r24, Z+26	; 0x1a
    1362:	df 01       	movw	r26, r30
    1364:	a8 0f       	add	r26, r24
    1366:	b1 1d       	adc	r27, r1
    1368:	5d 96       	adiw	r26, 0x1d	; 29
    136a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    136c:	92 8d       	ldd	r25, Z+26	; 0x1a
    136e:	9f 5f       	subi	r25, 0xFF	; 255
    1370:	9f 73       	andi	r25, 0x3F	; 63
    1372:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    137c:	08 95       	ret

0000137e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    137e:	84 e1       	ldi	r24, 0x14	; 20
    1380:	9b e0       	ldi	r25, 0x0B	; 11
    1382:	89 2b       	or	r24, r25
    1384:	49 f0       	breq	.+18     	; 0x1398 <_Z14serialEventRunv+0x1a>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	89 2b       	or	r24, r25
    138c:	29 f0       	breq	.+10     	; 0x1398 <_Z14serialEventRunv+0x1a>
    138e:	0e 94 14 0b 	call	0x1628	; 0x1628 <_Z17Serial0_availablev>
    1392:	81 11       	cpse	r24, r1
    1394:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1398:	08 95       	ret

0000139a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    139a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    139c:	84 8d       	ldd	r24, Z+28	; 0x1c
    139e:	df 01       	movw	r26, r30
    13a0:	a8 0f       	add	r26, r24
    13a2:	b1 1d       	adc	r27, r1
    13a4:	a3 5a       	subi	r26, 0xA3	; 163
    13a6:	bf 4f       	sbci	r27, 0xFF	; 255
    13a8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    13aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	8f 73       	andi	r24, 0x3F	; 63
    13b2:	99 27       	eor	r25, r25
    13b4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    13b6:	a6 89       	ldd	r26, Z+22	; 0x16
    13b8:	b7 89       	ldd	r27, Z+23	; 0x17
    13ba:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    13bc:	a0 89       	ldd	r26, Z+16	; 0x10
    13be:	b1 89       	ldd	r27, Z+17	; 0x11
    13c0:	8c 91       	ld	r24, X
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    13c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    13c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    13ca:	98 13       	cpse	r25, r24
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    13ce:	02 88       	ldd	r0, Z+18	; 0x12
    13d0:	f3 89       	ldd	r31, Z+19	; 0x13
    13d2:	e0 2d       	mov	r30, r0
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 7d       	andi	r24, 0xDF	; 223
    13d8:	80 83       	st	Z, r24
    13da:	08 95       	ret

000013dc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
  _written = true;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    13ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13f2:	98 13       	cpse	r25, r24
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <_ZN14HardwareSerial5writeEh+0x24>
    13f6:	e8 89       	ldd	r30, Y+16	; 0x10
    13f8:	f9 89       	ldd	r31, Y+17	; 0x11
    13fa:	80 81       	ld	r24, Z
    13fc:	85 fd       	sbrc	r24, 5
    13fe:	24 c0       	rjmp	.+72     	; 0x1448 <_ZN14HardwareSerial5writeEh+0x6c>
    1400:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1402:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1404:	10 e0       	ldi	r17, 0x00	; 0
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	0f 73       	andi	r16, 0x3F	; 63
    140c:	11 27       	eor	r17, r17
    140e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1410:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1412:	e8 12       	cpse	r14, r24
    1414:	0c c0       	rjmp	.+24     	; 0x142e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	07 fc       	sbrc	r0, 7
    141a:	fa cf       	rjmp	.-12     	; 0x1410 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    141c:	e8 89       	ldd	r30, Y+16	; 0x10
    141e:	f9 89       	ldd	r31, Y+17	; 0x11
    1420:	80 81       	ld	r24, Z
    1422:	85 ff       	sbrs	r24, 5
    1424:	f5 cf       	rjmp	.-22     	; 0x1410 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1426:	ce 01       	movw	r24, r28
    1428:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    142c:	f1 cf       	rjmp	.-30     	; 0x1410 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    142e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1430:	fe 01       	movw	r30, r28
    1432:	e8 0f       	add	r30, r24
    1434:	f1 1d       	adc	r31, r1
    1436:	e3 5a       	subi	r30, 0xA3	; 163
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    143c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    143e:	ea 89       	ldd	r30, Y+18	; 0x12
    1440:	fb 89       	ldd	r31, Y+19	; 0x13
    1442:	80 81       	ld	r24, Z
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1448:	ee 89       	ldd	r30, Y+22	; 0x16
    144a:	ff 89       	ldd	r31, Y+23	; 0x17
    144c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    144e:	e8 89       	ldd	r30, Y+16	; 0x10
    1450:	f9 89       	ldd	r31, Y+17	; 0x11
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	08 95       	ret

0000146a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1470:	88 8d       	ldd	r24, Y+24	; 0x18
    1472:	88 23       	and	r24, r24
    1474:	c9 f0       	breq	.+50     	; 0x14a8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1476:	ea 89       	ldd	r30, Y+18	; 0x12
    1478:	fb 89       	ldd	r31, Y+19	; 0x13
    147a:	80 81       	ld	r24, Z
    147c:	85 fd       	sbrc	r24, 5
    147e:	05 c0       	rjmp	.+10     	; 0x148a <_ZN14HardwareSerial5flushEv+0x20>
    1480:	a8 89       	ldd	r26, Y+16	; 0x10
    1482:	b9 89       	ldd	r27, Y+17	; 0x11
    1484:	8c 91       	ld	r24, X
    1486:	86 fd       	sbrc	r24, 6
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	07 fc       	sbrc	r0, 7
    148e:	f5 cf       	rjmp	.-22     	; 0x147a <_ZN14HardwareSerial5flushEv+0x10>
    1490:	80 81       	ld	r24, Z
    1492:	85 ff       	sbrs	r24, 5
    1494:	f2 cf       	rjmp	.-28     	; 0x147a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1496:	a8 89       	ldd	r26, Y+16	; 0x10
    1498:	b9 89       	ldd	r27, Y+17	; 0x11
    149a:	8c 91       	ld	r24, X
    149c:	85 ff       	sbrs	r24, 5
    149e:	ed cf       	rjmp	.-38     	; 0x147a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    14a6:	e7 cf       	rjmp	.-50     	; 0x1476 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    14ae:	cf 92       	push	r12
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24
    14be:	6a 01       	movw	r12, r20
    14c0:	7b 01       	movw	r14, r22
    14c2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    14c4:	e8 89       	ldd	r30, Y+16	; 0x10
    14c6:	f9 89       	ldd	r31, Y+17	; 0x11
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14cc:	41 15       	cp	r20, r1
    14ce:	51 4e       	sbci	r21, 0xE1	; 225
    14d0:	61 05       	cpc	r22, r1
    14d2:	71 05       	cpc	r23, r1
    14d4:	b1 f0       	breq	.+44     	; 0x1502 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	79 e0       	ldi	r23, 0x09	; 9
    14da:	8d e3       	ldi	r24, 0x3D	; 61
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a7 01       	movw	r20, r14
    14e0:	96 01       	movw	r18, r12
    14e2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    14e6:	da 01       	movw	r26, r20
    14e8:	c9 01       	movw	r24, r18
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	a1 09       	sbc	r26, r1
    14ee:	b1 09       	sbc	r27, r1
    14f0:	b6 95       	lsr	r27
    14f2:	a7 95       	ror	r26
    14f4:	97 95       	ror	r25
    14f6:	87 95       	ror	r24
    14f8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14fa:	21 15       	cp	r18, r1
    14fc:	80 e1       	ldi	r24, 0x10	; 16
    14fe:	38 07       	cpc	r19, r24
    1500:	a8 f0       	brcs	.+42     	; 0x152c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1502:	e8 89       	ldd	r30, Y+16	; 0x10
    1504:	f9 89       	ldd	r31, Y+17	; 0x11
    1506:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1508:	60 e8       	ldi	r22, 0x80	; 128
    150a:	74 e8       	ldi	r23, 0x84	; 132
    150c:	8e e1       	ldi	r24, 0x1E	; 30
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a7 01       	movw	r20, r14
    1512:	96 01       	movw	r18, r12
    1514:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1518:	da 01       	movw	r26, r20
    151a:	c9 01       	movw	r24, r18
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	a1 09       	sbc	r26, r1
    1520:	b1 09       	sbc	r27, r1
    1522:	b6 95       	lsr	r27
    1524:	a7 95       	ror	r26
    1526:	97 95       	ror	r25
    1528:	87 95       	ror	r24
    152a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    152c:	ec 85       	ldd	r30, Y+12	; 0x0c
    152e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1530:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1532:	ee 85       	ldd	r30, Y+14	; 0x0e
    1534:	ff 85       	ldd	r31, Y+15	; 0x0f
    1536:	20 83       	st	Z, r18

  _written = false;
    1538:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    153a:	ec 89       	ldd	r30, Y+20	; 0x14
    153c:	fd 89       	ldd	r31, Y+21	; 0x15
    153e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1540:	ea 89       	ldd	r30, Y+18	; 0x12
    1542:	fb 89       	ldd	r31, Y+19	; 0x13
    1544:	80 81       	ld	r24, Z
    1546:	80 61       	ori	r24, 0x10	; 16
    1548:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    154a:	ea 89       	ldd	r30, Y+18	; 0x12
    154c:	fb 89       	ldd	r31, Y+19	; 0x13
    154e:	80 81       	ld	r24, Z
    1550:	88 60       	ori	r24, 0x08	; 8
    1552:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1554:	ea 89       	ldd	r30, Y+18	; 0x12
    1556:	fb 89       	ldd	r31, Y+19	; 0x13
    1558:	80 81       	ld	r24, Z
    155a:	80 68       	ori	r24, 0x80	; 128
    155c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    155e:	ea 89       	ldd	r30, Y+18	; 0x12
    1560:	fb 89       	ldd	r31, Y+19	; 0x13
    1562:	80 81       	ld	r24, Z
    1564:	8f 7d       	andi	r24, 0xDF	; 223
    1566:	80 83       	st	Z, r24
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	08 95       	ret

00001578 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	2f 93       	push	r18
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	ef 93       	push	r30
    158a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    158c:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <Serial+0x10>
    1590:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <Serial+0x11>
    1594:	80 81       	ld	r24, Z
    1596:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <Serial+0x16>
    159a:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <Serial+0x17>
    159e:	82 fd       	sbrc	r24, 2
    15a0:	12 c0       	rjmp	.+36     	; 0x15c6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    15a2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15a4:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <Serial+0x19>
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    15ac:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <Serial+0x1a>
    15b0:	82 17       	cp	r24, r18
    15b2:	51 f0       	breq	.+20     	; 0x15c8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    15b4:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <Serial+0x19>
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	eb 57       	subi	r30, 0x7B	; 123
    15bc:	fc 4f       	sbci	r31, 0xFC	; 252
    15be:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    15c0:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <Serial+0x19>
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    15c6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15fe:	85 e8       	ldi	r24, 0x85	; 133
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1628:	85 e8       	ldi	r24, 0x85	; 133
    162a:	93 e0       	ldi	r25, 0x03	; 3
    162c:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN14HardwareSerial9availableEv>
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	89 2b       	or	r24, r25
    1634:	09 f4       	brne	.+2      	; 0x1638 <_Z17Serial0_availablev+0x10>
    1636:	20 e0       	ldi	r18, 0x00	; 0
}
    1638:	82 2f       	mov	r24, r18
    163a:	08 95       	ret

0000163c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    163c:	e5 e8       	ldi	r30, 0x85	; 133
    163e:	f3 e0       	ldi	r31, 0x03	; 3
    1640:	13 82       	std	Z+3, r1	; 0x03
    1642:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1644:	88 ee       	ldi	r24, 0xE8	; 232
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	84 83       	std	Z+4, r24	; 0x04
    164e:	95 83       	std	Z+5, r25	; 0x05
    1650:	a6 83       	std	Z+6, r26	; 0x06
    1652:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1654:	85 e7       	ldi	r24, 0x75	; 117
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
    165c:	85 ec       	ldi	r24, 0xC5	; 197
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	95 87       	std	Z+13, r25	; 0x0d
    1662:	84 87       	std	Z+12, r24	; 0x0c
    1664:	84 ec       	ldi	r24, 0xC4	; 196
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	97 87       	std	Z+15, r25	; 0x0f
    166a:	86 87       	std	Z+14, r24	; 0x0e
    166c:	80 ec       	ldi	r24, 0xC0	; 192
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	91 8b       	std	Z+17, r25	; 0x11
    1672:	80 8b       	std	Z+16, r24	; 0x10
    1674:	81 ec       	ldi	r24, 0xC1	; 193
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	93 8b       	std	Z+19, r25	; 0x13
    167a:	82 8b       	std	Z+18, r24	; 0x12
    167c:	82 ec       	ldi	r24, 0xC2	; 194
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	95 8b       	std	Z+21, r25	; 0x15
    1682:	84 8b       	std	Z+20, r24	; 0x14
    1684:	86 ec       	ldi	r24, 0xC6	; 198
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	97 8b       	std	Z+23, r25	; 0x17
    168a:	86 8b       	std	Z+22, r24	; 0x16
    168c:	11 8e       	std	Z+25, r1	; 0x19
    168e:	12 8e       	std	Z+26, r1	; 0x1a
    1690:	13 8e       	std	Z+27, r1	; 0x1b
    1692:	14 8e       	std	Z+28, r1	; 0x1c
    1694:	08 95       	ret

00001696 <initVariant>:
    1696:	08 95       	ret

00001698 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1698:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <init>

	initVariant();
    169c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    16a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    16a4:	cf eb       	ldi	r28, 0xBF	; 191
    16a6:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    16a8:	0e 94 77 04 	call	0x8ee	; 0x8ee <loop>
		if (serialEventRun) serialEventRun();
    16ac:	20 97       	sbiw	r28, 0x00	; 0
    16ae:	e1 f3       	breq	.-8      	; 0x16a8 <main+0x10>
    16b0:	0e 94 bf 09 	call	0x137e	; 0x137e <_Z14serialEventRunv>
    16b4:	f9 cf       	rjmp	.-14     	; 0x16a8 <main+0x10>

000016b6 <_Znwj>:
    16b6:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <malloc>

000016ba <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	6c 01       	movw	r12, r24
    16cc:	7a 01       	movw	r14, r20
    16ce:	8b 01       	movw	r16, r22
    16d0:	c0 e0       	ldi	r28, 0x00	; 0
    16d2:	d0 e0       	ldi	r29, 0x00	; 0
    16d4:	ce 15       	cp	r28, r14
    16d6:	df 05       	cpc	r29, r15
    16d8:	81 f0       	breq	.+32     	; 0x16fa <_ZN5Print5writeEPKhj+0x40>
    16da:	d8 01       	movw	r26, r16
    16dc:	6d 91       	ld	r22, X+
    16de:	8d 01       	movw	r16, r26
    16e0:	d6 01       	movw	r26, r12
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	01 90       	ld	r0, Z+
    16e8:	f0 81       	ld	r31, Z
    16ea:	e0 2d       	mov	r30, r0
    16ec:	c6 01       	movw	r24, r12
    16ee:	09 95       	icall
    16f0:	89 2b       	or	r24, r25
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <_ZN5Print5writeEPKhj+0x3e>
    16f4:	21 96       	adiw	r28, 0x01	; 1
    16f6:	ee cf       	rjmp	.-36     	; 0x16d4 <_ZN5Print5writeEPKhj+0x1a>
    16f8:	7e 01       	movw	r14, r28
    16fa:	c7 01       	movw	r24, r14
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	08 95       	ret

0000170e <_ZN5Print5writeEPKc>:
    170e:	61 15       	cp	r22, r1
    1710:	71 05       	cpc	r23, r1
    1712:	79 f0       	breq	.+30     	; 0x1732 <_ZN5Print5writeEPKc+0x24>
    1714:	fb 01       	movw	r30, r22
    1716:	01 90       	ld	r0, Z+
    1718:	00 20       	and	r0, r0
    171a:	e9 f7       	brne	.-6      	; 0x1716 <_ZN5Print5writeEPKc+0x8>
    171c:	31 97       	sbiw	r30, 0x01	; 1
    171e:	af 01       	movw	r20, r30
    1720:	46 1b       	sub	r20, r22
    1722:	57 0b       	sbc	r21, r23
    1724:	dc 01       	movw	r26, r24
    1726:	ed 91       	ld	r30, X+
    1728:	fc 91       	ld	r31, X
    172a:	02 80       	ldd	r0, Z+2	; 0x02
    172c:	f3 81       	ldd	r31, Z+3	; 0x03
    172e:	e0 2d       	mov	r30, r0
    1730:	09 94       	ijmp
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	08 95       	ret

00001738 <_ZN5Print5printEPK19__FlashStringHelper>:
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	8c 01       	movw	r16, r24
    1746:	7b 01       	movw	r14, r22
    1748:	c0 e0       	ldi	r28, 0x00	; 0
    174a:	d0 e0       	ldi	r29, 0x00	; 0
    174c:	f7 01       	movw	r30, r14
    174e:	ec 0f       	add	r30, r28
    1750:	fd 1f       	adc	r31, r29
    1752:	64 91       	lpm	r22, Z
    1754:	66 23       	and	r22, r22
    1756:	61 f0       	breq	.+24     	; 0x1770 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1758:	d8 01       	movw	r26, r16
    175a:	ed 91       	ld	r30, X+
    175c:	fc 91       	ld	r31, X
    175e:	01 90       	ld	r0, Z+
    1760:	f0 81       	ld	r31, Z
    1762:	e0 2d       	mov	r30, r0
    1764:	c8 01       	movw	r24, r16
    1766:	09 95       	icall
    1768:	89 2b       	or	r24, r25
    176a:	11 f0       	breq	.+4      	; 0x1770 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    176c:	21 96       	adiw	r28, 0x01	; 1
    176e:	ee cf       	rjmp	.-36     	; 0x174c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1770:	ce 01       	movw	r24, r28
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	08 95       	ret

00001780 <_ZN5Print5printEPKc>:
    1780:	0c 94 87 0b 	jmp	0x170e	; 0x170e <_ZN5Print5writeEPKc>

00001784 <_ZN5Print5printEc>:
    1784:	dc 01       	movw	r26, r24
    1786:	ed 91       	ld	r30, X+
    1788:	fc 91       	ld	r31, X
    178a:	01 90       	ld	r0, Z+
    178c:	f0 81       	ld	r31, Z
    178e:	e0 2d       	mov	r30, r0
    1790:	09 94       	ijmp

00001792 <_ZN5Print7printlnEv>:
    1792:	61 e8       	ldi	r22, 0x81	; 129
    1794:	71 e0       	ldi	r23, 0x01	; 1
    1796:	0c 94 87 0b 	jmp	0x170e	; 0x170e <_ZN5Print5writeEPKc>

0000179a <_ZN5Print7printlnEPK19__FlashStringHelper>:
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
    17a4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEPK19__FlashStringHelper>
    17a8:	8c 01       	movw	r16, r24
    17aa:	ce 01       	movw	r24, r28
    17ac:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5Print7printlnEv>
    17b0:	80 0f       	add	r24, r16
    17b2:	91 1f       	adc	r25, r17
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <_ZN5Print7printlnEPKc>:
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN5Print5writeEPKc>
    17cc:	8c 01       	movw	r16, r24
    17ce:	ce 01       	movw	r24, r28
    17d0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5Print7printlnEv>
    17d4:	80 0f       	add	r24, r16
    17d6:	91 1f       	adc	r25, r17
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <_ZN5Print7printlnEc>:
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
    17ec:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_ZN5Print5printEc>
    17f0:	8c 01       	movw	r16, r24
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5Print7printlnEv>
    17f8:	80 0f       	add	r24, r16
    17fa:	91 1f       	adc	r25, r17
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <_ZN5Print11printNumberEmh>:
    1806:	8f 92       	push	r8
    1808:	9f 92       	push	r9
    180a:	af 92       	push	r10
    180c:	bf 92       	push	r11
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	a1 97       	sbiw	r28, 0x21	; 33
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	7c 01       	movw	r14, r24
    182c:	fa 01       	movw	r30, r20
    182e:	cb 01       	movw	r24, r22
    1830:	19 a2       	std	Y+33, r1	; 0x21
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	08 f4       	brcc	.+2      	; 0x1838 <_ZN5Print11printNumberEmh+0x32>
    1836:	2a e0       	ldi	r18, 0x0A	; 10
    1838:	8e 01       	movw	r16, r28
    183a:	0f 5d       	subi	r16, 0xDF	; 223
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	82 2e       	mov	r8, r18
    1840:	91 2c       	mov	r9, r1
    1842:	a1 2c       	mov	r10, r1
    1844:	b1 2c       	mov	r11, r1
    1846:	bf 01       	movw	r22, r30
    1848:	a5 01       	movw	r20, r10
    184a:	94 01       	movw	r18, r8
    184c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1850:	f9 01       	movw	r30, r18
    1852:	ca 01       	movw	r24, r20
    1854:	01 50       	subi	r16, 0x01	; 1
    1856:	11 09       	sbc	r17, r1
    1858:	6a 30       	cpi	r22, 0x0A	; 10
    185a:	10 f4       	brcc	.+4      	; 0x1860 <_ZN5Print11printNumberEmh+0x5a>
    185c:	60 5d       	subi	r22, 0xD0	; 208
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <_ZN5Print11printNumberEmh+0x5c>
    1860:	69 5c       	subi	r22, 0xC9	; 201
    1862:	d8 01       	movw	r26, r16
    1864:	6c 93       	st	X, r22
    1866:	23 2b       	or	r18, r19
    1868:	24 2b       	or	r18, r20
    186a:	25 2b       	or	r18, r21
    186c:	61 f7       	brne	.-40     	; 0x1846 <_ZN5Print11printNumberEmh+0x40>
    186e:	b8 01       	movw	r22, r16
    1870:	c7 01       	movw	r24, r14
    1872:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN5Print5writeEPKc>
    1876:	a1 96       	adiw	r28, 0x21	; 33
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	bf 90       	pop	r11
    1890:	af 90       	pop	r10
    1892:	9f 90       	pop	r9
    1894:	8f 90       	pop	r8
    1896:	08 95       	ret

00001898 <_ZN5Print5printEmi>:
    1898:	21 15       	cp	r18, r1
    189a:	31 05       	cpc	r19, r1
    189c:	41 f4       	brne	.+16     	; 0x18ae <_ZN5Print5printEmi+0x16>
    189e:	dc 01       	movw	r26, r24
    18a0:	ed 91       	ld	r30, X+
    18a2:	fc 91       	ld	r31, X
    18a4:	01 90       	ld	r0, Z+
    18a6:	f0 81       	ld	r31, Z
    18a8:	e0 2d       	mov	r30, r0
    18aa:	64 2f       	mov	r22, r20
    18ac:	09 94       	ijmp
    18ae:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_ZN5Print11printNumberEmh>

000018b2 <_ZN5Print5printEhi>:
    18b2:	9a 01       	movw	r18, r20
    18b4:	46 2f       	mov	r20, r22
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <_ZN5Print5printEmi>

000018c0 <_ZN5Print7printlnEhi>:
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	ec 01       	movw	r28, r24
    18ca:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN5Print5printEhi>
    18ce:	8c 01       	movw	r16, r24
    18d0:	ce 01       	movw	r24, r28
    18d2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5Print7printlnEv>
    18d6:	80 0f       	add	r24, r16
    18d8:	91 1f       	adc	r25, r17
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <_ZN5Print5printEji>:
    18e4:	9a 01       	movw	r18, r20
    18e6:	ab 01       	movw	r20, r22
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <_ZN5Print5printEmi>

000018f0 <_ZN5Print7printlnEji>:
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
    18fa:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5Print5printEji>
    18fe:	8c 01       	movw	r16, r24
    1900:	ce 01       	movw	r24, r28
    1902:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5Print7printlnEv>
    1906:	80 0f       	add	r24, r16
    1908:	91 1f       	adc	r25, r17
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
  if (base == 0) {
    1924:	21 15       	cp	r18, r1
    1926:	31 05       	cpc	r19, r1
    1928:	81 f4       	brne	.+32     	; 0x194a <_ZN5Print5printEli+0x36>
    return write(n);
    192a:	dc 01       	movw	r26, r24
    192c:	ed 91       	ld	r30, X+
    192e:	fc 91       	ld	r31, X
    1930:	01 90       	ld	r0, Z+
    1932:	f0 81       	ld	r31, Z
    1934:	e0 2d       	mov	r30, r0
    1936:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1948:	09 94       	ijmp
  } else if (base == 10) {
    194a:	2a 30       	cpi	r18, 0x0A	; 10
    194c:	31 05       	cpc	r19, r1
    194e:	01 f5       	brne	.+64     	; 0x1990 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1950:	77 ff       	sbrs	r23, 7
    1952:	1d c0       	rjmp	.+58     	; 0x198e <_ZN5Print5printEli+0x7a>
    1954:	6a 01       	movw	r12, r20
    1956:	7b 01       	movw	r14, r22
    1958:	ec 01       	movw	r28, r24
      int t = print('-');
    195a:	6d e2       	ldi	r22, 0x2D	; 45
    195c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_ZN5Print5printEc>
    1960:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1962:	44 27       	eor	r20, r20
    1964:	55 27       	eor	r21, r21
    1966:	ba 01       	movw	r22, r20
    1968:	4c 19       	sub	r20, r12
    196a:	5d 09       	sbc	r21, r13
    196c:	6e 09       	sbc	r22, r14
    196e:	7f 09       	sbc	r23, r15
    1970:	2a e0       	ldi	r18, 0x0A	; 10
    1972:	ce 01       	movw	r24, r28
    1974:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN5Print11printNumberEmh>
    1978:	80 0f       	add	r24, r16
    197a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    198e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    19a0:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_ZN5Print11printNumberEmh>

000019a4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    19a4:	9a 01       	movw	r18, r20
  return print((long) n, base);
    19a6:	ab 01       	movw	r20, r22
    19a8:	77 0f       	add	r23, r23
    19aa:	66 0b       	sbc	r22, r22
    19ac:	77 0b       	sbc	r23, r23
    19ae:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <_ZN5Print5printEli>

000019b2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	2f 93       	push	r18
    19be:	3f 93       	push	r19
    19c0:	8f 93       	push	r24
    19c2:	9f 93       	push	r25
    19c4:	af 93       	push	r26
    19c6:	bf 93       	push	r27
    19c8:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <timer0_millis>
    19cc:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <timer0_millis+0x1>
    19d0:	a0 91 25 04 	lds	r26, 0x0425	; 0x800425 <timer0_millis+0x2>
    19d4:	b0 91 26 04 	lds	r27, 0x0426	; 0x800426 <timer0_millis+0x3>
    19d8:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <timer0_fract>
    19dc:	23 e0       	ldi	r18, 0x03	; 3
    19de:	23 0f       	add	r18, r19
    19e0:	2d 37       	cpi	r18, 0x7D	; 125
    19e2:	20 f4       	brcc	.+8      	; 0x19ec <__vector_16+0x3a>
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	a1 1d       	adc	r26, r1
    19e8:	b1 1d       	adc	r27, r1
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <__vector_16+0x44>
    19ec:	26 e8       	ldi	r18, 0x86	; 134
    19ee:	23 0f       	add	r18, r19
    19f0:	02 96       	adiw	r24, 0x02	; 2
    19f2:	a1 1d       	adc	r26, r1
    19f4:	b1 1d       	adc	r27, r1
    19f6:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <timer0_fract>
    19fa:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <timer0_millis>
    19fe:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <timer0_millis+0x1>
    1a02:	a0 93 25 04 	sts	0x0425, r26	; 0x800425 <timer0_millis+0x2>
    1a06:	b0 93 26 04 	sts	0x0426, r27	; 0x800426 <timer0_millis+0x3>
    1a0a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    1a0e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    1a12:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    1a16:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	b1 1d       	adc	r27, r1
    1a20:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <timer0_overflow_count>
    1a24:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <timer0_overflow_count+0x1>
    1a28:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <timer0_overflow_count+0x2>
    1a2c:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <timer0_overflow_count+0x3>
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	3f 91       	pop	r19
    1a3a:	2f 91       	pop	r18
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <micros>:
    1a46:	3f b7       	in	r19, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    1a4e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    1a52:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    1a56:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    1a5a:	26 b5       	in	r18, 0x26	; 38
    1a5c:	a8 9b       	sbis	0x15, 0	; 21
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <micros+0x24>
    1a60:	2f 3f       	cpi	r18, 0xFF	; 255
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <micros+0x24>
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	a1 1d       	adc	r26, r1
    1a68:	b1 1d       	adc	r27, r1
    1a6a:	3f bf       	out	0x3f, r19	; 63
    1a6c:	ba 2f       	mov	r27, r26
    1a6e:	a9 2f       	mov	r26, r25
    1a70:	98 2f       	mov	r25, r24
    1a72:	88 27       	eor	r24, r24
    1a74:	82 0f       	add	r24, r18
    1a76:	91 1d       	adc	r25, r1
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	b1 1d       	adc	r27, r1
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	66 0f       	add	r22, r22
    1a84:	77 1f       	adc	r23, r23
    1a86:	88 1f       	adc	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	4a 95       	dec	r20
    1a8c:	d1 f7       	brne	.-12     	; 0x1a82 <micros+0x3c>
    1a8e:	08 95       	ret

00001a90 <delay>:
    1a90:	8f 92       	push	r8
    1a92:	9f 92       	push	r9
    1a94:	af 92       	push	r10
    1a96:	bf 92       	push	r11
    1a98:	cf 92       	push	r12
    1a9a:	df 92       	push	r13
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	6b 01       	movw	r12, r22
    1aa2:	7c 01       	movw	r14, r24
    1aa4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <micros>
    1aa8:	4b 01       	movw	r8, r22
    1aaa:	5c 01       	movw	r10, r24
    1aac:	c1 14       	cp	r12, r1
    1aae:	d1 04       	cpc	r13, r1
    1ab0:	e1 04       	cpc	r14, r1
    1ab2:	f1 04       	cpc	r15, r1
    1ab4:	01 f1       	breq	.+64     	; 0x1af6 <delay+0x66>
    1ab6:	0e 94 d6 10 	call	0x21ac	; 0x21ac <yield>
    1aba:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <micros>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	88 19       	sub	r24, r8
    1ac4:	99 09       	sbc	r25, r9
    1ac6:	aa 09       	sbc	r26, r10
    1ac8:	bb 09       	sbc	r27, r11
    1aca:	88 3e       	cpi	r24, 0xE8	; 232
    1acc:	93 40       	sbci	r25, 0x03	; 3
    1ace:	a1 05       	cpc	r26, r1
    1ad0:	b1 05       	cpc	r27, r1
    1ad2:	60 f3       	brcs	.-40     	; 0x1aac <delay+0x1c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	c2 1a       	sub	r12, r18
    1ad8:	d1 08       	sbc	r13, r1
    1ada:	e1 08       	sbc	r14, r1
    1adc:	f1 08       	sbc	r15, r1
    1ade:	88 ee       	ldi	r24, 0xE8	; 232
    1ae0:	88 0e       	add	r8, r24
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	98 1e       	adc	r9, r24
    1ae6:	a1 1c       	adc	r10, r1
    1ae8:	b1 1c       	adc	r11, r1
    1aea:	c1 14       	cp	r12, r1
    1aec:	d1 04       	cpc	r13, r1
    1aee:	e1 04       	cpc	r14, r1
    1af0:	f1 04       	cpc	r15, r1
    1af2:	19 f7       	brne	.-58     	; 0x1aba <delay+0x2a>
    1af4:	db cf       	rjmp	.-74     	; 0x1aac <delay+0x1c>
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	9f 90       	pop	r9
    1b04:	8f 90       	pop	r8
    1b06:	08 95       	ret

00001b08 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1b08:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1b0a:	84 b5       	in	r24, 0x24	; 36
    1b0c:	82 60       	ori	r24, 0x02	; 2
    1b0e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1b10:	84 b5       	in	r24, 0x24	; 36
    1b12:	81 60       	ori	r24, 0x01	; 1
    1b14:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1b16:	85 b5       	in	r24, 0x25	; 37
    1b18:	82 60       	ori	r24, 0x02	; 2
    1b1a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1b1c:	85 b5       	in	r24, 0x25	; 37
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1b22:	ee e6       	ldi	r30, 0x6E	; 110
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1b2c:	e1 e8       	ldi	r30, 0x81	; 129
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1b32:	80 81       	ld	r24, Z
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 60       	ori	r24, 0x01	; 1
    1b3c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1b3e:	e0 e8       	ldi	r30, 0x80	; 128
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	81 60       	ori	r24, 0x01	; 1
    1b46:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1b48:	e1 eb       	ldi	r30, 0xB1	; 177
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	84 60       	ori	r24, 0x04	; 4
    1b50:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1b52:	e0 eb       	ldi	r30, 0xB0	; 176
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1b5c:	ea e7       	ldi	r30, 0x7A	; 122
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	84 60       	ori	r24, 0x04	; 4
    1b64:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1b66:	80 81       	ld	r24, Z
    1b68:	82 60       	ori	r24, 0x02	; 2
    1b6a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1b72:	80 81       	ld	r24, Z
    1b74:	80 68       	ori	r24, 0x80	; 128
    1b76:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1b78:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1b7c:	08 95       	ret

00001b7e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1b7e:	8e 30       	cpi	r24, 0x0E	; 14
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <analogRead+0x6>
    1b82:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1b84:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    1b88:	90 e4       	ldi	r25, 0x40	; 64
    1b8a:	29 9f       	mul	r18, r25
    1b8c:	90 01       	movw	r18, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	87 70       	andi	r24, 0x07	; 7
    1b92:	82 2b       	or	r24, r18
    1b94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1b98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1b9c:	80 64       	ori	r24, 0x40	; 64
    1b9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1ba2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1ba6:	86 fd       	sbrc	r24, 6
    1ba8:	fc cf       	rjmp	.-8      	; 0x1ba2 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1baa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    1bae:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
}
    1bb4:	92 2b       	or	r25, r18
    1bb6:	08 95       	ret

00001bb8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	81 f0       	breq	.+32     	; 0x1bdc <turnOffPWM+0x24>
    1bbc:	28 f4       	brcc	.+10     	; 0x1bc8 <turnOffPWM+0x10>
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	99 f0       	breq	.+38     	; 0x1be8 <turnOffPWM+0x30>
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	a1 f0       	breq	.+40     	; 0x1bee <turnOffPWM+0x36>
    1bc6:	08 95       	ret
    1bc8:	87 30       	cpi	r24, 0x07	; 7
    1bca:	a9 f0       	breq	.+42     	; 0x1bf6 <turnOffPWM+0x3e>
    1bcc:	88 30       	cpi	r24, 0x08	; 8
    1bce:	b9 f0       	breq	.+46     	; 0x1bfe <turnOffPWM+0x46>
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	d1 f4       	brne	.+52     	; 0x1c08 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1bd4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1bd8:	8f 7d       	andi	r24, 0xDF	; 223
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1bdc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1be0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1be2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1be6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1be8:	84 b5       	in	r24, 0x24	; 36
    1bea:	8f 77       	andi	r24, 0x7F	; 127
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1bee:	84 b5       	in	r24, 0x24	; 36
    1bf0:	8f 7d       	andi	r24, 0xDF	; 223
    1bf2:	84 bd       	out	0x24, r24	; 36
    1bf4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1bf6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1bfa:	8f 77       	andi	r24, 0x7F	; 127
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1bfe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1c02:	8f 7d       	andi	r24, 0xDF	; 223
    1c04:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1c08:	08 95       	ret

00001c0a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	fc 01       	movw	r30, r24
    1c12:	ef 56       	subi	r30, 0x6F	; 111
    1c14:	fe 4f       	sbci	r31, 0xFE	; 254
    1c16:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1c18:	fc 01       	movw	r30, r24
    1c1a:	eb 55       	subi	r30, 0x5B	; 91
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1c20:	88 23       	and	r24, r24
    1c22:	61 f1       	breq	.+88     	; 0x1c7c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e3 53       	subi	r30, 0x33	; 51
    1c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c30:	c5 91       	lpm	r28, Z+
    1c32:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1c34:	fc 01       	movw	r30, r24
    1c36:	ed 53       	subi	r30, 0x3D	; 61
    1c38:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3a:	a5 91       	lpm	r26, Z+
    1c3c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1c3e:	61 11       	cpse	r22, r1
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1c42:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c44:	f8 94       	cli
		*reg &= ~bit;
    1c46:	88 81       	ld	r24, Y
    1c48:	20 95       	com	r18
    1c4a:	82 23       	and	r24, r18
    1c4c:	88 83       	st	Y, r24
		*out &= ~bit;
    1c4e:	ec 91       	ld	r30, X
    1c50:	2e 23       	and	r18, r30
    1c52:	0b c0       	rjmp	.+22     	; 0x1c6a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1c54:	62 30       	cpi	r22, 0x02	; 2
    1c56:	61 f4       	brne	.+24     	; 0x1c70 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1c58:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c5a:	f8 94       	cli
		*reg &= ~bit;
    1c5c:	88 81       	ld	r24, Y
    1c5e:	32 2f       	mov	r19, r18
    1c60:	30 95       	com	r19
    1c62:	83 23       	and	r24, r19
    1c64:	88 83       	st	Y, r24
		*out |= bit;
    1c66:	ec 91       	ld	r30, X
    1c68:	2e 2b       	or	r18, r30
    1c6a:	2c 93       	st	X, r18
		SREG = oldSREG;
    1c6c:	9f bf       	out	0x3f, r25	; 63
    1c6e:	06 c0       	rjmp	.+12     	; 0x1c7c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1c70:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1c72:	f8 94       	cli
		*reg |= bit;
    1c74:	e8 81       	ld	r30, Y
    1c76:	2e 2b       	or	r18, r30
    1c78:	28 83       	st	Y, r18
		SREG = oldSREG;
    1c7a:	8f bf       	out	0x3f, r24	; 63
	}
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	e3 58       	subi	r30, 0x83	; 131
    1c90:	fe 4f       	sbci	r31, 0xFE	; 254
    1c92:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c94:	f9 01       	movw	r30, r18
    1c96:	ef 56       	subi	r30, 0x6F	; 111
    1c98:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c9c:	f9 01       	movw	r30, r18
    1c9e:	eb 55       	subi	r30, 0x5B	; 91
    1ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1ca4:	cc 23       	and	r28, r28
    1ca6:	c1 f0       	breq	.+48     	; 0x1cd8 <digitalWrite+0x56>
    1ca8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1caa:	81 11       	cpse	r24, r1
    1cac:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <turnOffPWM>

	out = portOutputRegister(port);
    1cb0:	ec 2f       	mov	r30, r28
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	ed 53       	subi	r30, 0x3D	; 61
    1cba:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbc:	a5 91       	lpm	r26, Z+
    1cbe:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1cc0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1cc2:	f8 94       	cli

	if (val == LOW) {
    1cc4:	11 11       	cpse	r17, r1
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <digitalWrite+0x4e>
		*out &= ~bit;
    1cc8:	8c 91       	ld	r24, X
    1cca:	d0 95       	com	r29
    1ccc:	d8 23       	and	r29, r24
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1cd0:	ec 91       	ld	r30, X
    1cd2:	de 2b       	or	r29, r30
    1cd4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1cd6:	9f bf       	out	0x3f, r25	; 63
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	08 95       	ret

00001ce0 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1ce0:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1ce4:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	b9 f4       	brne	.+46     	; 0x1d1c <_ZN14SoftwareSerial4readEv+0x3c>
    1cee:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cf2:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1cf6:	98 17       	cp	r25, r24
    1cf8:	89 f0       	breq	.+34     	; 0x1d1c <_ZN14SoftwareSerial4readEv+0x3c>
    1cfa:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	e3 5d       	subi	r30, 0xD3	; 211
    1d02:	fb 4f       	sbci	r31, 0xFB	; 251
    1d04:	80 81       	ld	r24, Z
    1d06:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	2f 73       	andi	r18, 0x3F	; 63
    1d12:	33 27       	eor	r19, r19
    1d14:	20 93 2b 04 	sts	0x042B, r18	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	08 95       	ret
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	9f ef       	ldi	r25, 0xFF	; 255
    1d20:	08 95       	ret

00001d22 <_ZN14SoftwareSerial5writeEh>:
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	dc 01       	movw	r26, r24
    1d2a:	5c 96       	adiw	r26, 0x1c	; 28
    1d2c:	8d 91       	ld	r24, X+
    1d2e:	9c 91       	ld	r25, X
    1d30:	5d 97       	sbiw	r26, 0x1d	; 29
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	39 f4       	brne	.+14     	; 0x1d44 <_ZN14SoftwareSerial5writeEh+0x22>
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	13 96       	adiw	r26, 0x03	; 3
    1d3c:	3c 93       	st	X, r19
    1d3e:	2e 93       	st	-X, r18
    1d40:	12 97       	sbiw	r26, 0x02	; 2
    1d42:	3b c0       	rjmp	.+118    	; 0x1dba <_ZN14SoftwareSerial5writeEh+0x98>
    1d44:	51 96       	adiw	r26, 0x11	; 17
    1d46:	ed 91       	ld	r30, X+
    1d48:	fc 91       	ld	r31, X
    1d4a:	52 97       	sbiw	r26, 0x12	; 18
    1d4c:	50 96       	adiw	r26, 0x10	; 16
    1d4e:	2c 91       	ld	r18, X
    1d50:	50 97       	sbiw	r26, 0x10	; 16
    1d52:	32 2f       	mov	r19, r18
    1d54:	30 95       	com	r19
    1d56:	1f b7       	in	r17, 0x3f	; 63
    1d58:	5e 96       	adiw	r26, 0x1e	; 30
    1d5a:	4c 91       	ld	r20, X
    1d5c:	5e 97       	sbiw	r26, 0x1e	; 30
    1d5e:	74 2f       	mov	r23, r20
    1d60:	72 70       	andi	r23, 0x02	; 2
    1d62:	41 fd       	sbrc	r20, 1
    1d64:	60 95       	com	r22
    1d66:	f8 94       	cli
    1d68:	40 81       	ld	r20, Z
    1d6a:	77 23       	and	r23, r23
    1d6c:	11 f0       	breq	.+4      	; 0x1d72 <_ZN14SoftwareSerial5writeEh+0x50>
    1d6e:	42 2b       	or	r20, r18
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <_ZN14SoftwareSerial5writeEh+0x52>
    1d72:	43 23       	and	r20, r19
    1d74:	40 83       	st	Z, r20
    1d76:	ec 01       	movw	r28, r24
    1d78:	21 97       	sbiw	r28, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <_ZN14SoftwareSerial5writeEh+0x56>
    1d7c:	48 e0       	ldi	r20, 0x08	; 8
    1d7e:	50 81       	ld	r21, Z
    1d80:	60 ff       	sbrs	r22, 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <_ZN14SoftwareSerial5writeEh+0x66>
    1d84:	52 2b       	or	r21, r18
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <_ZN14SoftwareSerial5writeEh+0x68>
    1d88:	53 23       	and	r21, r19
    1d8a:	50 83       	st	Z, r21
    1d8c:	ec 01       	movw	r28, r24
    1d8e:	21 97       	sbiw	r28, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <_ZN14SoftwareSerial5writeEh+0x6c>
    1d92:	66 95       	lsr	r22
    1d94:	41 50       	subi	r20, 0x01	; 1
    1d96:	99 f7       	brne	.-26     	; 0x1d7e <_ZN14SoftwareSerial5writeEh+0x5c>
    1d98:	80 81       	ld	r24, Z
    1d9a:	77 23       	and	r23, r23
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <_ZN14SoftwareSerial5writeEh+0x82>
    1d9e:	83 23       	and	r24, r19
    1da0:	80 83       	st	Z, r24
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <_ZN14SoftwareSerial5writeEh+0x86>
    1da4:	28 2b       	or	r18, r24
    1da6:	20 83       	st	Z, r18
    1da8:	1f bf       	out	0x3f, r17	; 63
    1daa:	5c 96       	adiw	r26, 0x1c	; 28
    1dac:	8d 91       	ld	r24, X+
    1dae:	9c 91       	ld	r25, X
    1db0:	5d 97       	sbiw	r26, 0x1d	; 29
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <_ZN14SoftwareSerial5writeEh+0x90>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	08 95       	ret

00001dc2 <_ZN14SoftwareSerial5flushEv>:
    1dc2:	08 95       	ret

00001dc4 <_ZN14SoftwareSerial4peekEv>:
    1dc4:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1dc8:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1dcc:	28 17       	cp	r18, r24
    1dce:	39 07       	cpc	r19, r25
    1dd0:	71 f4       	brne	.+28     	; 0x1dee <_ZN14SoftwareSerial4peekEv+0x2a>
    1dd2:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1dd6:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1dda:	98 17       	cp	r25, r24
    1ddc:	41 f0       	breq	.+16     	; 0x1dee <_ZN14SoftwareSerial4peekEv+0x2a>
    1dde:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	e3 5d       	subi	r30, 0xD3	; 211
    1de6:	fb 4f       	sbci	r31, 0xFB	; 251
    1de8:	80 81       	ld	r24, Z
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	08 95       	ret
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	9f ef       	ldi	r25, 0xFF	; 255
    1df2:	08 95       	ret

00001df4 <_ZN14SoftwareSerial9availableEv>:
    1df4:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1df8:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1dfc:	28 17       	cp	r18, r24
    1dfe:	39 07       	cpc	r19, r25
    1e00:	71 f4       	brne	.+28     	; 0x1e1e <_ZN14SoftwareSerial9availableEv+0x2a>
    1e02:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1e06:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	80 5c       	subi	r24, 0xC0	; 192
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	82 1b       	sub	r24, r18
    1e12:	91 09       	sbc	r25, r1
    1e14:	60 e4       	ldi	r22, 0x40	; 64
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__divmodhi4>
    1e1c:	08 95       	ret
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	08 95       	ret

00001e24 <_ZN14SoftwareSerial13stopListeningEv>:
    1e24:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1e28:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1e2c:	e8 17       	cp	r30, r24
    1e2e:	f9 07       	cpc	r31, r25
    1e30:	69 f4       	brne	.+26     	; 0x1e4c <_ZN14SoftwareSerial13stopListeningEv+0x28>
    1e32:	a3 89       	ldd	r26, Z+19	; 0x13
    1e34:	b4 89       	ldd	r27, Z+20	; 0x14
    1e36:	9c 91       	ld	r25, X
    1e38:	85 89       	ldd	r24, Z+21	; 0x15
    1e3a:	80 95       	com	r24
    1e3c:	89 23       	and	r24, r25
    1e3e:	8c 93       	st	X, r24
    1e40:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1e44:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	08 95       	ret
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	08 95       	ret

00001e50 <_ZN14SoftwareSerial6listenEv>:
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	ec 01       	movw	r28, r24
    1e56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e5a:	89 2b       	or	r24, r25
    1e5c:	f1 f0       	breq	.+60     	; 0x1e9a <_ZN14SoftwareSerial6listenEv+0x4a>
    1e5e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1e62:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1e66:	c8 17       	cp	r28, r24
    1e68:	d9 07       	cpc	r29, r25
    1e6a:	b9 f0       	breq	.+46     	; 0x1e9a <_ZN14SoftwareSerial6listenEv+0x4a>
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <_ZN14SoftwareSerial6listenEv+0x24>
    1e70:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN14SoftwareSerial13stopListeningEv>
    1e74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e76:	8e 7f       	andi	r24, 0xFE	; 254
    1e78:	8e 8f       	std	Y+30, r24	; 0x1e
    1e7a:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1e7e:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1e82:	d0 93 6e 04 	sts	0x046E, r29	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1e86:	c0 93 6d 04 	sts	0x046D, r28	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1e8a:	eb 89       	ldd	r30, Y+19	; 0x13
    1e8c:	fc 89       	ldd	r31, Y+20	; 0x14
    1e8e:	90 81       	ld	r25, Z
    1e90:	8d 89       	ldd	r24, Y+21	; 0x15
    1e92:	89 2b       	or	r24, r25
    1e94:	80 83       	st	Z, r24
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <_ZN14SoftwareSerial6listenEv+0x4c>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <__vector_3>:
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	2f 93       	push	r18
    1eae:	3f 93       	push	r19
    1eb0:	4f 93       	push	r20
    1eb2:	5f 93       	push	r21
    1eb4:	6f 93       	push	r22
    1eb6:	7f 93       	push	r23
    1eb8:	8f 93       	push	r24
    1eba:	9f 93       	push	r25
    1ebc:	af 93       	push	r26
    1ebe:	bf 93       	push	r27
    1ec0:	ef 93       	push	r30
    1ec2:	ff 93       	push	r31
    1ec4:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <_ZN14SoftwareSerial13active_objectE>
    1ec8:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <_ZN14SoftwareSerial13active_objectE+0x1>
    1ecc:	30 97       	sbiw	r30, 0x00	; 0
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__vector_3+0x30>
    1ed0:	51 c0       	rjmp	.+162    	; 0x1f74 <__vector_3+0xd2>
    1ed2:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ed4:	a6 85       	ldd	r26, Z+14	; 0x0e
    1ed6:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ed8:	85 85       	ldd	r24, Z+13	; 0x0d
    1eda:	91 ff       	sbrs	r25, 1
    1edc:	04 c0       	rjmp	.+8      	; 0x1ee6 <__vector_3+0x44>
    1ede:	9c 91       	ld	r25, X
    1ee0:	89 23       	and	r24, r25
    1ee2:	29 f4       	brne	.+10     	; 0x1eee <__vector_3+0x4c>
    1ee4:	47 c0       	rjmp	.+142    	; 0x1f74 <__vector_3+0xd2>
    1ee6:	9c 91       	ld	r25, X
    1ee8:	89 23       	and	r24, r25
    1eea:	09 f0       	breq	.+2      	; 0x1eee <__vector_3+0x4c>
    1eec:	43 c0       	rjmp	.+134    	; 0x1f74 <__vector_3+0xd2>
    1eee:	a3 89       	ldd	r26, Z+19	; 0x13
    1ef0:	b4 89       	ldd	r27, Z+20	; 0x14
    1ef2:	9c 91       	ld	r25, X
    1ef4:	85 89       	ldd	r24, Z+21	; 0x15
    1ef6:	80 95       	com	r24
    1ef8:	89 23       	and	r24, r25
    1efa:	8c 93       	st	X, r24
    1efc:	86 89       	ldd	r24, Z+22	; 0x16
    1efe:	97 89       	ldd	r25, Z+23	; 0x17
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <__vector_3+0x5e>
    1f04:	60 8d       	ldd	r22, Z+24	; 0x18
    1f06:	71 8d       	ldd	r23, Z+25	; 0x19
    1f08:	a6 85       	ldd	r26, Z+14	; 0x0e
    1f0a:	b7 85       	ldd	r27, Z+15	; 0x0f
    1f0c:	55 85       	ldd	r21, Z+13	; 0x0d
    1f0e:	38 e0       	ldi	r19, 0x08	; 8
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	cb 01       	movw	r24, r22
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <__vector_3+0x72>
    1f18:	82 2f       	mov	r24, r18
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	95 95       	asr	r25
    1f1e:	87 95       	ror	r24
    1f20:	28 2f       	mov	r18, r24
    1f22:	4c 91       	ld	r20, X
    1f24:	45 23       	and	r20, r21
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <__vector_3+0x88>
    1f28:	20 68       	ori	r18, 0x80	; 128
    1f2a:	31 50       	subi	r19, 0x01	; 1
    1f2c:	91 f7       	brne	.-28     	; 0x1f12 <__vector_3+0x70>
    1f2e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f30:	81 fd       	sbrc	r24, 1
    1f32:	20 95       	com	r18
    1f34:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	8f 73       	andi	r24, 0x3F	; 63
    1f3e:	99 27       	eor	r25, r25
    1f40:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <_ZN14SoftwareSerial20_receive_buffer_headE>
    1f44:	38 17       	cp	r19, r24
    1f46:	49 f0       	breq	.+18     	; 0x1f5a <__vector_3+0xb8>
    1f48:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	a3 5d       	subi	r26, 0xD3	; 211
    1f50:	bb 4f       	sbci	r27, 0xFB	; 251
    1f52:	2c 93       	st	X, r18
    1f54:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1f58:	03 c0       	rjmp	.+6      	; 0x1f60 <__vector_3+0xbe>
    1f5a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f5c:	81 60       	ori	r24, 0x01	; 1
    1f5e:	86 8f       	std	Z+30, r24	; 0x1e
    1f60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f62:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <__vector_3+0xc2>
    1f68:	a3 89       	ldd	r26, Z+19	; 0x13
    1f6a:	b4 89       	ldd	r27, Z+20	; 0x14
    1f6c:	9c 91       	ld	r25, X
    1f6e:	85 89       	ldd	r24, Z+21	; 0x15
    1f70:	89 2b       	or	r24, r25
    1f72:	8c 93       	st	X, r24
    1f74:	ff 91       	pop	r31
    1f76:	ef 91       	pop	r30
    1f78:	bf 91       	pop	r27
    1f7a:	af 91       	pop	r26
    1f7c:	9f 91       	pop	r25
    1f7e:	8f 91       	pop	r24
    1f80:	7f 91       	pop	r23
    1f82:	6f 91       	pop	r22
    1f84:	5f 91       	pop	r21
    1f86:	4f 91       	pop	r20
    1f88:	3f 91       	pop	r19
    1f8a:	2f 91       	pop	r18
    1f8c:	0f 90       	pop	r0
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	0f 90       	pop	r0
    1f92:	1f 90       	pop	r1
    1f94:	18 95       	reti

00001f96 <_ZN14SoftwareSerial5setTXEh>:
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	ec 01       	movw	r28, r24
    1f9e:	16 2f       	mov	r17, r22
    1fa0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1fa2:	66 95       	lsr	r22
    1fa4:	61 70       	andi	r22, 0x01	; 1
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	68 27       	eor	r22, r24
    1faa:	81 2f       	mov	r24, r17
    1fac:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	81 2f       	mov	r24, r17
    1fb4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <pinMode>
    1fb8:	81 2f       	mov	r24, r17
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	ef 56       	subi	r30, 0x6F	; 111
    1fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc2:	e4 91       	lpm	r30, Z
    1fc4:	e8 8b       	std	Y+16, r30	; 0x10
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	eb 55       	subi	r30, 0x5B	; 91
    1fca:	fe 4f       	sbci	r31, 0xFE	; 254
    1fcc:	e4 91       	lpm	r30, Z
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	ed 53       	subi	r30, 0x3D	; 61
    1fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd8:	85 91       	lpm	r24, Z+
    1fda:	94 91       	lpm	r25, Z
    1fdc:	9a 8b       	std	Y+18, r25	; 0x12
    1fde:	89 8b       	std	Y+17, r24	; 0x11
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	08 95       	ret

00001fe8 <_ZN14SoftwareSerial5setRXEh>:
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	ec 01       	movw	r28, r24
    1ff0:	16 2f       	mov	r17, r22
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	81 2f       	mov	r24, r17
    1ff6:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <pinMode>
    1ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ffc:	81 fd       	sbrc	r24, 1
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <_ZN14SoftwareSerial5setRXEh+0x20>
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	81 2f       	mov	r24, r17
    2004:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <digitalWrite>
    2008:	1c 87       	std	Y+12, r17	; 0x0c
    200a:	81 2f       	mov	r24, r17
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	ef 56       	subi	r30, 0x6F	; 111
    2012:	fe 4f       	sbci	r31, 0xFE	; 254
    2014:	e4 91       	lpm	r30, Z
    2016:	ed 87       	std	Y+13, r30	; 0x0d
    2018:	fc 01       	movw	r30, r24
    201a:	eb 55       	subi	r30, 0x5B	; 91
    201c:	fe 4f       	sbci	r31, 0xFE	; 254
    201e:	e4 91       	lpm	r30, Z
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	e7 54       	subi	r30, 0x47	; 71
    2028:	fe 4f       	sbci	r31, 0xFE	; 254
    202a:	85 91       	lpm	r24, Z+
    202c:	94 91       	lpm	r25, Z
    202e:	9f 87       	std	Y+15, r25	; 0x0f
    2030:	8e 87       	std	Y+14, r24	; 0x0e
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	08 95       	ret

0000203a <_ZN14SoftwareSerialC1Ehhb>:
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
    2042:	16 2f       	mov	r17, r22
    2044:	1b 82       	std	Y+3, r1	; 0x03
    2046:	1a 82       	std	Y+2, r1	; 0x02
    2048:	88 ee       	ldi	r24, 0xE8	; 232
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	8c 83       	std	Y+4, r24	; 0x04
    2052:	9d 83       	std	Y+5, r25	; 0x05
    2054:	ae 83       	std	Y+6, r26	; 0x06
    2056:	bf 83       	std	Y+7, r27	; 0x07
    2058:	84 e9       	ldi	r24, 0x94	; 148
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	99 83       	std	Y+1, r25	; 0x01
    205e:	88 83       	st	Y, r24
    2060:	1f 8a       	std	Y+23, r1	; 0x17
    2062:	1e 8a       	std	Y+22, r1	; 0x16
    2064:	19 8e       	std	Y+25, r1	; 0x19
    2066:	18 8e       	std	Y+24, r1	; 0x18
    2068:	1b 8e       	std	Y+27, r1	; 0x1b
    206a:	1a 8e       	std	Y+26, r1	; 0x1a
    206c:	1d 8e       	std	Y+29, r1	; 0x1d
    206e:	1c 8e       	std	Y+28, r1	; 0x1c
    2070:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2072:	8e 7f       	andi	r24, 0xFE	; 254
    2074:	20 fb       	bst	r18, 0
    2076:	81 f9       	bld	r24, 1
    2078:	8e 8f       	std	Y+30, r24	; 0x1e
    207a:	64 2f       	mov	r22, r20
    207c:	ce 01       	movw	r24, r28
    207e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN14SoftwareSerial5setTXEh>
    2082:	61 2f       	mov	r22, r17
    2084:	ce 01       	movw	r24, r28
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <_ZN14SoftwareSerial5setRXEh>

00002090 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	ec 01       	movw	r28, r24
    2096:	9a 01       	movw	r18, r20
    2098:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    209a:	1b 8e       	std	Y+27, r1	; 0x1b
    209c:	1a 8e       	std	Y+26, r1	; 0x1a
    209e:	19 8e       	std	Y+25, r1	; 0x19
    20a0:	18 8e       	std	Y+24, r1	; 0x18
    20a2:	1f 8a       	std	Y+23, r1	; 0x17
    20a4:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	79 e0       	ldi	r23, 0x09	; 9
    20aa:	8d e3       	ldi	r24, 0x3D	; 61
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodsi4>
    20b2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    20b4:	24 30       	cpi	r18, 0x04	; 4
    20b6:	31 05       	cpc	r19, r1
    20b8:	18 f0       	brcs	.+6      	; 0x20c0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    20ba:	c9 01       	movw	r24, r18
    20bc:	03 97       	sbiw	r24, 0x03	; 3
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    20c4:	9d 8f       	std	Y+29, r25	; 0x1d
    20c6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    20c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ca:	66 31       	cpi	r22, 0x16	; 22
    20cc:	08 f0       	brcs	.+2      	; 0x20d0 <_ZN14SoftwareSerial5beginEl+0x40>
    20ce:	69 c0       	rjmp	.+210    	; 0x21a2 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    20d0:	c9 01       	movw	r24, r18
    20d2:	96 95       	lsr	r25
    20d4:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    20d6:	84 31       	cpi	r24, 0x14	; 20
    20d8:	91 05       	cpc	r25, r1
    20da:	10 f0       	brcs	.+4      	; 0x20e0 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    20dc:	43 97       	sbiw	r24, 0x13	; 19
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    20e4:	9f 8b       	std	Y+23, r25	; 0x17
    20e6:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    20e8:	36 97       	sbiw	r30, 0x06	; 6
    20ea:	18 f0       	brcs	.+6      	; 0x20f2 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    20ec:	c9 01       	movw	r24, r18
    20ee:	05 97       	sbiw	r24, 0x05	; 5
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    20f6:	99 8f       	std	Y+25, r25	; 0x19
    20f8:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    20fa:	c9 01       	movw	r24, r18
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	28 0f       	add	r18, r24
    2102:	39 1f       	adc	r19, r25
    2104:	36 95       	lsr	r19
    2106:	27 95       	ror	r18
    2108:	36 95       	lsr	r19
    210a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    210c:	2d 30       	cpi	r18, 0x0D	; 13
    210e:	31 05       	cpc	r19, r1
    2110:	18 f0       	brcs	.+6      	; 0x2118 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2112:	2c 50       	subi	r18, 0x0C	; 12
    2114:	31 09       	sbc	r19, r1
    2116:	02 c0       	rjmp	.+4      	; 0x211c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    211c:	3b 8f       	std	Y+27, r19	; 0x1b
    211e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2120:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    2124:	68 30       	cpi	r22, 0x08	; 8
    2126:	50 f0       	brcs	.+20     	; 0x213c <_ZN14SoftwareSerial5beginEl+0xac>
    2128:	21 e0       	ldi	r18, 0x01	; 1
    212a:	6e 30       	cpi	r22, 0x0E	; 14
    212c:	08 f4       	brcc	.+2      	; 0x2130 <_ZN14SoftwareSerial5beginEl+0xa0>
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <_ZN14SoftwareSerial5beginEl+0xa6>
    2134:	88 0f       	add	r24, r24
    2136:	2a 95       	dec	r18
    2138:	ea f7       	brpl	.-6      	; 0x2134 <_ZN14SoftwareSerial5beginEl+0xa4>
    213a:	01 c0       	rjmp	.+2      	; 0x213e <_ZN14SoftwareSerial5beginEl+0xae>
    213c:	84 e0       	ldi	r24, 0x04	; 4
    213e:	89 2b       	or	r24, r25
    2140:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2144:	9c 85       	ldd	r25, Y+12	; 0x0c
    2146:	98 30       	cpi	r25, 0x08	; 8
    2148:	38 f0       	brcs	.+14     	; 0x2158 <_ZN14SoftwareSerial5beginEl+0xc8>
    214a:	9e 30       	cpi	r25, 0x0E	; 14
    214c:	40 f0       	brcs	.+16     	; 0x215e <_ZN14SoftwareSerial5beginEl+0xce>
    214e:	96 31       	cpi	r25, 0x16	; 22
    2150:	48 f0       	brcs	.+18     	; 0x2164 <_ZN14SoftwareSerial5beginEl+0xd4>
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	08 c0       	rjmp	.+16     	; 0x2168 <_ZN14SoftwareSerial5beginEl+0xd8>
    2158:	2d e6       	ldi	r18, 0x6D	; 109
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <_ZN14SoftwareSerial5beginEl+0xd8>
    215e:	2b e6       	ldi	r18, 0x6B	; 107
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <_ZN14SoftwareSerial5beginEl+0xd8>
    2164:	2c e6       	ldi	r18, 0x6C	; 108
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	3c 8b       	std	Y+20, r19	; 0x14
    216a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    216c:	98 30       	cpi	r25, 0x08	; 8
    216e:	30 f4       	brcc	.+12     	; 0x217c <_ZN14SoftwareSerial5beginEl+0xec>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <_ZN14SoftwareSerial5beginEl+0xe6>
    2174:	88 0f       	add	r24, r24
    2176:	9a 95       	dec	r25
    2178:	ea f7       	brpl	.-6      	; 0x2174 <_ZN14SoftwareSerial5beginEl+0xe4>
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <_ZN14SoftwareSerial5beginEl+0x108>
    217c:	29 2f       	mov	r18, r25
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	9e 30       	cpi	r25, 0x0E	; 14
    2182:	18 f4       	brcc	.+6      	; 0x218a <_ZN14SoftwareSerial5beginEl+0xfa>
    2184:	28 50       	subi	r18, 0x08	; 8
    2186:	31 09       	sbc	r19, r1
    2188:	02 c0       	rjmp	.+4      	; 0x218e <_ZN14SoftwareSerial5beginEl+0xfe>
    218a:	2e 50       	subi	r18, 0x0E	; 14
    218c:	31 09       	sbc	r19, r1
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <_ZN14SoftwareSerial5beginEl+0x104>
    2192:	88 0f       	add	r24, r24
    2194:	2a 95       	dec	r18
    2196:	ea f7       	brpl	.-6      	; 0x2192 <_ZN14SoftwareSerial5beginEl+0x102>
    2198:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    219a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    219c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    21a2:	ce 01       	movw	r24, r28
}
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    21a8:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <_ZN14SoftwareSerial6listenEv>

000021ac <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21ac:	08 95       	ret

000021ae <__udivmodqi4>:
    21ae:	99 1b       	sub	r25, r25
    21b0:	79 e0       	ldi	r23, 0x09	; 9
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <__udivmodqi4_ep>

000021b4 <__udivmodqi4_loop>:
    21b4:	99 1f       	adc	r25, r25
    21b6:	96 17       	cp	r25, r22
    21b8:	08 f0       	brcs	.+2      	; 0x21bc <__udivmodqi4_ep>
    21ba:	96 1b       	sub	r25, r22

000021bc <__udivmodqi4_ep>:
    21bc:	88 1f       	adc	r24, r24
    21be:	7a 95       	dec	r23
    21c0:	c9 f7       	brne	.-14     	; 0x21b4 <__udivmodqi4_loop>
    21c2:	80 95       	com	r24
    21c4:	08 95       	ret

000021c6 <__divmodhi4>:
    21c6:	97 fb       	bst	r25, 7
    21c8:	07 2e       	mov	r0, r23
    21ca:	16 f4       	brtc	.+4      	; 0x21d0 <__divmodhi4+0xa>
    21cc:	00 94       	com	r0
    21ce:	07 d0       	rcall	.+14     	; 0x21de <__divmodhi4_neg1>
    21d0:	77 fd       	sbrc	r23, 7
    21d2:	09 d0       	rcall	.+18     	; 0x21e6 <__divmodhi4_neg2>
    21d4:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivmodhi4>
    21d8:	07 fc       	sbrc	r0, 7
    21da:	05 d0       	rcall	.+10     	; 0x21e6 <__divmodhi4_neg2>
    21dc:	3e f4       	brtc	.+14     	; 0x21ec <__divmodhi4_exit>

000021de <__divmodhi4_neg1>:
    21de:	90 95       	com	r25
    21e0:	81 95       	neg	r24
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	08 95       	ret

000021e6 <__divmodhi4_neg2>:
    21e6:	70 95       	com	r23
    21e8:	61 95       	neg	r22
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255

000021ec <__divmodhi4_exit>:
    21ec:	08 95       	ret

000021ee <__udivmodsi4>:
    21ee:	a1 e2       	ldi	r26, 0x21	; 33
    21f0:	1a 2e       	mov	r1, r26
    21f2:	aa 1b       	sub	r26, r26
    21f4:	bb 1b       	sub	r27, r27
    21f6:	fd 01       	movw	r30, r26
    21f8:	0d c0       	rjmp	.+26     	; 0x2214 <__udivmodsi4_ep>

000021fa <__udivmodsi4_loop>:
    21fa:	aa 1f       	adc	r26, r26
    21fc:	bb 1f       	adc	r27, r27
    21fe:	ee 1f       	adc	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	a2 17       	cp	r26, r18
    2204:	b3 07       	cpc	r27, r19
    2206:	e4 07       	cpc	r30, r20
    2208:	f5 07       	cpc	r31, r21
    220a:	20 f0       	brcs	.+8      	; 0x2214 <__udivmodsi4_ep>
    220c:	a2 1b       	sub	r26, r18
    220e:	b3 0b       	sbc	r27, r19
    2210:	e4 0b       	sbc	r30, r20
    2212:	f5 0b       	sbc	r31, r21

00002214 <__udivmodsi4_ep>:
    2214:	66 1f       	adc	r22, r22
    2216:	77 1f       	adc	r23, r23
    2218:	88 1f       	adc	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	1a 94       	dec	r1
    221e:	69 f7       	brne	.-38     	; 0x21fa <__udivmodsi4_loop>
    2220:	60 95       	com	r22
    2222:	70 95       	com	r23
    2224:	80 95       	com	r24
    2226:	90 95       	com	r25
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	bd 01       	movw	r22, r26
    222e:	cf 01       	movw	r24, r30
    2230:	08 95       	ret

00002232 <__divmodsi4>:
    2232:	05 2e       	mov	r0, r21
    2234:	97 fb       	bst	r25, 7
    2236:	1e f4       	brtc	.+6      	; 0x223e <__divmodsi4+0xc>
    2238:	00 94       	com	r0
    223a:	0e 94 30 11 	call	0x2260	; 0x2260 <__negsi2>
    223e:	57 fd       	sbrc	r21, 7
    2240:	07 d0       	rcall	.+14     	; 0x2250 <__divmodsi4_neg2>
    2242:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    2246:	07 fc       	sbrc	r0, 7
    2248:	03 d0       	rcall	.+6      	; 0x2250 <__divmodsi4_neg2>
    224a:	4e f4       	brtc	.+18     	; 0x225e <__divmodsi4_exit>
    224c:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__negsi2>

00002250 <__divmodsi4_neg2>:
    2250:	50 95       	com	r21
    2252:	40 95       	com	r20
    2254:	30 95       	com	r19
    2256:	21 95       	neg	r18
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	4f 4f       	sbci	r20, 0xFF	; 255
    225c:	5f 4f       	sbci	r21, 0xFF	; 255

0000225e <__divmodsi4_exit>:
    225e:	08 95       	ret

00002260 <__negsi2>:
    2260:	90 95       	com	r25
    2262:	80 95       	com	r24
    2264:	70 95       	com	r23
    2266:	61 95       	neg	r22
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	8f 4f       	sbci	r24, 0xFF	; 255
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	08 95       	ret

00002270 <__udivmodhi4>:
    2270:	aa 1b       	sub	r26, r26
    2272:	bb 1b       	sub	r27, r27
    2274:	51 e1       	ldi	r21, 0x11	; 17
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <__udivmodhi4_ep>

00002278 <__udivmodhi4_loop>:
    2278:	aa 1f       	adc	r26, r26
    227a:	bb 1f       	adc	r27, r27
    227c:	a6 17       	cp	r26, r22
    227e:	b7 07       	cpc	r27, r23
    2280:	10 f0       	brcs	.+4      	; 0x2286 <__udivmodhi4_ep>
    2282:	a6 1b       	sub	r26, r22
    2284:	b7 0b       	sbc	r27, r23

00002286 <__udivmodhi4_ep>:
    2286:	88 1f       	adc	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	5a 95       	dec	r21
    228c:	a9 f7       	brne	.-22     	; 0x2278 <__udivmodhi4_loop>
    228e:	80 95       	com	r24
    2290:	90 95       	com	r25
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	08 95       	ret

00002298 <__tablejump2__>:
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	05 90       	lpm	r0, Z+
    229e:	f4 91       	lpm	r31, Z
    22a0:	e0 2d       	mov	r30, r0
    22a2:	09 94       	ijmp

000022a4 <malloc>:
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	91 05       	cpc	r25, r1
    22b0:	10 f4       	brcc	.+4      	; 0x22b6 <malloc+0x12>
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <__flp>
    22ba:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <__flp+0x1>
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	a0 e0       	ldi	r26, 0x00	; 0
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	30 97       	sbiw	r30, 0x00	; 0
    22c8:	19 f1       	breq	.+70     	; 0x2310 <malloc+0x6c>
    22ca:	40 81       	ld	r20, Z
    22cc:	51 81       	ldd	r21, Z+1	; 0x01
    22ce:	02 81       	ldd	r16, Z+2	; 0x02
    22d0:	13 81       	ldd	r17, Z+3	; 0x03
    22d2:	48 17       	cp	r20, r24
    22d4:	59 07       	cpc	r21, r25
    22d6:	c8 f0       	brcs	.+50     	; 0x230a <malloc+0x66>
    22d8:	84 17       	cp	r24, r20
    22da:	95 07       	cpc	r25, r21
    22dc:	69 f4       	brne	.+26     	; 0x22f8 <malloc+0x54>
    22de:	10 97       	sbiw	r26, 0x00	; 0
    22e0:	31 f0       	breq	.+12     	; 0x22ee <malloc+0x4a>
    22e2:	12 96       	adiw	r26, 0x02	; 2
    22e4:	0c 93       	st	X, r16
    22e6:	12 97       	sbiw	r26, 0x02	; 2
    22e8:	13 96       	adiw	r26, 0x03	; 3
    22ea:	1c 93       	st	X, r17
    22ec:	27 c0       	rjmp	.+78     	; 0x233c <malloc+0x98>
    22ee:	00 93 71 04 	sts	0x0471, r16	; 0x800471 <__flp>
    22f2:	10 93 72 04 	sts	0x0472, r17	; 0x800472 <__flp+0x1>
    22f6:	22 c0       	rjmp	.+68     	; 0x233c <malloc+0x98>
    22f8:	21 15       	cp	r18, r1
    22fa:	31 05       	cpc	r19, r1
    22fc:	19 f0       	breq	.+6      	; 0x2304 <malloc+0x60>
    22fe:	42 17       	cp	r20, r18
    2300:	53 07       	cpc	r21, r19
    2302:	18 f4       	brcc	.+6      	; 0x230a <malloc+0x66>
    2304:	9a 01       	movw	r18, r20
    2306:	bd 01       	movw	r22, r26
    2308:	ef 01       	movw	r28, r30
    230a:	df 01       	movw	r26, r30
    230c:	f8 01       	movw	r30, r16
    230e:	db cf       	rjmp	.-74     	; 0x22c6 <malloc+0x22>
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	f9 f0       	breq	.+62     	; 0x2354 <malloc+0xb0>
    2316:	28 1b       	sub	r18, r24
    2318:	39 0b       	sbc	r19, r25
    231a:	24 30       	cpi	r18, 0x04	; 4
    231c:	31 05       	cpc	r19, r1
    231e:	80 f4       	brcc	.+32     	; 0x2340 <malloc+0x9c>
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	61 15       	cp	r22, r1
    2326:	71 05       	cpc	r23, r1
    2328:	21 f0       	breq	.+8      	; 0x2332 <malloc+0x8e>
    232a:	fb 01       	movw	r30, r22
    232c:	93 83       	std	Z+3, r25	; 0x03
    232e:	82 83       	std	Z+2, r24	; 0x02
    2330:	04 c0       	rjmp	.+8      	; 0x233a <malloc+0x96>
    2332:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <__flp+0x1>
    2336:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <__flp>
    233a:	fe 01       	movw	r30, r28
    233c:	32 96       	adiw	r30, 0x02	; 2
    233e:	44 c0       	rjmp	.+136    	; 0x23c8 <malloc+0x124>
    2340:	fe 01       	movw	r30, r28
    2342:	e2 0f       	add	r30, r18
    2344:	f3 1f       	adc	r31, r19
    2346:	81 93       	st	Z+, r24
    2348:	91 93       	st	Z+, r25
    234a:	22 50       	subi	r18, 0x02	; 2
    234c:	31 09       	sbc	r19, r1
    234e:	39 83       	std	Y+1, r19	; 0x01
    2350:	28 83       	st	Y, r18
    2352:	3a c0       	rjmp	.+116    	; 0x23c8 <malloc+0x124>
    2354:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <__brkval>
    2358:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <__brkval+0x1>
    235c:	23 2b       	or	r18, r19
    235e:	41 f4       	brne	.+16     	; 0x2370 <malloc+0xcc>
    2360:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2364:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2368:	30 93 70 04 	sts	0x0470, r19	; 0x800470 <__brkval+0x1>
    236c:	20 93 6f 04 	sts	0x046F, r18	; 0x80046f <__brkval>
    2370:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2374:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2378:	21 15       	cp	r18, r1
    237a:	31 05       	cpc	r19, r1
    237c:	41 f4       	brne	.+16     	; 0x238e <malloc+0xea>
    237e:	2d b7       	in	r18, 0x3d	; 61
    2380:	3e b7       	in	r19, 0x3e	; 62
    2382:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2386:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    238a:	24 1b       	sub	r18, r20
    238c:	35 0b       	sbc	r19, r21
    238e:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <__brkval>
    2392:	f0 91 70 04 	lds	r31, 0x0470	; 0x800470 <__brkval+0x1>
    2396:	e2 17       	cp	r30, r18
    2398:	f3 07       	cpc	r31, r19
    239a:	a0 f4       	brcc	.+40     	; 0x23c4 <malloc+0x120>
    239c:	2e 1b       	sub	r18, r30
    239e:	3f 0b       	sbc	r19, r31
    23a0:	28 17       	cp	r18, r24
    23a2:	39 07       	cpc	r19, r25
    23a4:	78 f0       	brcs	.+30     	; 0x23c4 <malloc+0x120>
    23a6:	ac 01       	movw	r20, r24
    23a8:	4e 5f       	subi	r20, 0xFE	; 254
    23aa:	5f 4f       	sbci	r21, 0xFF	; 255
    23ac:	24 17       	cp	r18, r20
    23ae:	35 07       	cpc	r19, r21
    23b0:	48 f0       	brcs	.+18     	; 0x23c4 <malloc+0x120>
    23b2:	4e 0f       	add	r20, r30
    23b4:	5f 1f       	adc	r21, r31
    23b6:	50 93 70 04 	sts	0x0470, r21	; 0x800470 <__brkval+0x1>
    23ba:	40 93 6f 04 	sts	0x046F, r20	; 0x80046f <__brkval>
    23be:	81 93       	st	Z+, r24
    23c0:	91 93       	st	Z+, r25
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <malloc+0x124>
    23c4:	e0 e0       	ldi	r30, 0x00	; 0
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	cf 01       	movw	r24, r30
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	0f 91       	pop	r16
    23d2:	08 95       	ret

000023d4 <free>:
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	09 f4       	brne	.+2      	; 0x23de <free+0xa>
    23dc:	81 c0       	rjmp	.+258    	; 0x24e0 <free+0x10c>
    23de:	fc 01       	movw	r30, r24
    23e0:	32 97       	sbiw	r30, 0x02	; 2
    23e2:	13 82       	std	Z+3, r1	; 0x03
    23e4:	12 82       	std	Z+2, r1	; 0x02
    23e6:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <__flp>
    23ea:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <__flp+0x1>
    23ee:	10 97       	sbiw	r26, 0x00	; 0
    23f0:	81 f4       	brne	.+32     	; 0x2412 <free+0x3e>
    23f2:	20 81       	ld	r18, Z
    23f4:	31 81       	ldd	r19, Z+1	; 0x01
    23f6:	82 0f       	add	r24, r18
    23f8:	93 1f       	adc	r25, r19
    23fa:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <__brkval>
    23fe:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <__brkval+0x1>
    2402:	28 17       	cp	r18, r24
    2404:	39 07       	cpc	r19, r25
    2406:	51 f5       	brne	.+84     	; 0x245c <free+0x88>
    2408:	f0 93 70 04 	sts	0x0470, r31	; 0x800470 <__brkval+0x1>
    240c:	e0 93 6f 04 	sts	0x046F, r30	; 0x80046f <__brkval>
    2410:	67 c0       	rjmp	.+206    	; 0x24e0 <free+0x10c>
    2412:	ed 01       	movw	r28, r26
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	ce 17       	cp	r28, r30
    241a:	df 07       	cpc	r29, r31
    241c:	40 f4       	brcc	.+16     	; 0x242e <free+0x5a>
    241e:	4a 81       	ldd	r20, Y+2	; 0x02
    2420:	5b 81       	ldd	r21, Y+3	; 0x03
    2422:	9e 01       	movw	r18, r28
    2424:	41 15       	cp	r20, r1
    2426:	51 05       	cpc	r21, r1
    2428:	f1 f0       	breq	.+60     	; 0x2466 <free+0x92>
    242a:	ea 01       	movw	r28, r20
    242c:	f5 cf       	rjmp	.-22     	; 0x2418 <free+0x44>
    242e:	d3 83       	std	Z+3, r29	; 0x03
    2430:	c2 83       	std	Z+2, r28	; 0x02
    2432:	40 81       	ld	r20, Z
    2434:	51 81       	ldd	r21, Z+1	; 0x01
    2436:	84 0f       	add	r24, r20
    2438:	95 1f       	adc	r25, r21
    243a:	c8 17       	cp	r28, r24
    243c:	d9 07       	cpc	r29, r25
    243e:	59 f4       	brne	.+22     	; 0x2456 <free+0x82>
    2440:	88 81       	ld	r24, Y
    2442:	99 81       	ldd	r25, Y+1	; 0x01
    2444:	84 0f       	add	r24, r20
    2446:	95 1f       	adc	r25, r21
    2448:	02 96       	adiw	r24, 0x02	; 2
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	93 83       	std	Z+3, r25	; 0x03
    2454:	82 83       	std	Z+2, r24	; 0x02
    2456:	21 15       	cp	r18, r1
    2458:	31 05       	cpc	r19, r1
    245a:	29 f4       	brne	.+10     	; 0x2466 <free+0x92>
    245c:	f0 93 72 04 	sts	0x0472, r31	; 0x800472 <__flp+0x1>
    2460:	e0 93 71 04 	sts	0x0471, r30	; 0x800471 <__flp>
    2464:	3d c0       	rjmp	.+122    	; 0x24e0 <free+0x10c>
    2466:	e9 01       	movw	r28, r18
    2468:	fb 83       	std	Y+3, r31	; 0x03
    246a:	ea 83       	std	Y+2, r30	; 0x02
    246c:	49 91       	ld	r20, Y+
    246e:	59 91       	ld	r21, Y+
    2470:	c4 0f       	add	r28, r20
    2472:	d5 1f       	adc	r29, r21
    2474:	ec 17       	cp	r30, r28
    2476:	fd 07       	cpc	r31, r29
    2478:	61 f4       	brne	.+24     	; 0x2492 <free+0xbe>
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	84 0f       	add	r24, r20
    2480:	95 1f       	adc	r25, r21
    2482:	02 96       	adiw	r24, 0x02	; 2
    2484:	e9 01       	movw	r28, r18
    2486:	99 83       	std	Y+1, r25	; 0x01
    2488:	88 83       	st	Y, r24
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	9b 83       	std	Y+3, r25	; 0x03
    2490:	8a 83       	std	Y+2, r24	; 0x02
    2492:	e0 e0       	ldi	r30, 0x00	; 0
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	12 96       	adiw	r26, 0x02	; 2
    2498:	8d 91       	ld	r24, X+
    249a:	9c 91       	ld	r25, X
    249c:	13 97       	sbiw	r26, 0x03	; 3
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	19 f0       	breq	.+6      	; 0x24a8 <free+0xd4>
    24a2:	fd 01       	movw	r30, r26
    24a4:	dc 01       	movw	r26, r24
    24a6:	f7 cf       	rjmp	.-18     	; 0x2496 <free+0xc2>
    24a8:	8d 91       	ld	r24, X+
    24aa:	9c 91       	ld	r25, X
    24ac:	11 97       	sbiw	r26, 0x01	; 1
    24ae:	9d 01       	movw	r18, r26
    24b0:	2e 5f       	subi	r18, 0xFE	; 254
    24b2:	3f 4f       	sbci	r19, 0xFF	; 255
    24b4:	82 0f       	add	r24, r18
    24b6:	93 1f       	adc	r25, r19
    24b8:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <__brkval>
    24bc:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <__brkval+0x1>
    24c0:	28 17       	cp	r18, r24
    24c2:	39 07       	cpc	r19, r25
    24c4:	69 f4       	brne	.+26     	; 0x24e0 <free+0x10c>
    24c6:	30 97       	sbiw	r30, 0x00	; 0
    24c8:	29 f4       	brne	.+10     	; 0x24d4 <free+0x100>
    24ca:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <__flp+0x1>
    24ce:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <__flp>
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <free+0x104>
    24d4:	13 82       	std	Z+3, r1	; 0x03
    24d6:	12 82       	std	Z+2, r1	; 0x02
    24d8:	b0 93 70 04 	sts	0x0470, r27	; 0x800470 <__brkval+0x1>
    24dc:	a0 93 6f 04 	sts	0x046F, r26	; 0x80046f <__brkval>
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	08 95       	ret

000024e6 <strcmp_P>:
    24e6:	fb 01       	movw	r30, r22
    24e8:	dc 01       	movw	r26, r24
    24ea:	8d 91       	ld	r24, X+
    24ec:	05 90       	lpm	r0, Z+
    24ee:	80 19       	sub	r24, r0
    24f0:	01 10       	cpse	r0, r1
    24f2:	d9 f3       	breq	.-10     	; 0x24ea <strcmp_P+0x4>
    24f4:	99 0b       	sbc	r25, r25
    24f6:	08 95       	ret

000024f8 <strstr_P>:
    24f8:	fb 01       	movw	r30, r22
    24fa:	55 91       	lpm	r21, Z+
    24fc:	55 23       	and	r21, r21
    24fe:	a9 f0       	breq	.+42     	; 0x252a <strstr_P+0x32>
    2500:	bf 01       	movw	r22, r30
    2502:	dc 01       	movw	r26, r24
    2504:	4d 91       	ld	r20, X+
    2506:	45 17       	cp	r20, r21
    2508:	41 11       	cpse	r20, r1
    250a:	e1 f7       	brne	.-8      	; 0x2504 <strstr_P+0xc>
    250c:	59 f4       	brne	.+22     	; 0x2524 <strstr_P+0x2c>
    250e:	cd 01       	movw	r24, r26
    2510:	05 90       	lpm	r0, Z+
    2512:	00 20       	and	r0, r0
    2514:	49 f0       	breq	.+18     	; 0x2528 <strstr_P+0x30>
    2516:	4d 91       	ld	r20, X+
    2518:	40 15       	cp	r20, r0
    251a:	41 11       	cpse	r20, r1
    251c:	c9 f3       	breq	.-14     	; 0x2510 <strstr_P+0x18>
    251e:	fb 01       	movw	r30, r22
    2520:	41 11       	cpse	r20, r1
    2522:	ef cf       	rjmp	.-34     	; 0x2502 <strstr_P+0xa>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	08 95       	ret

0000252c <_exit>:
    252c:	f8 94       	cli

0000252e <__stop_program>:
    252e:	ff cf       	rjmp	.-2      	; 0x252e <__stop_program>
