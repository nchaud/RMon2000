
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00003efa  00003f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e1  00800294  00800294  00004122  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c30  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f1ae  00000000  00000000  00004dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047d1  00000000  00000000  00023f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cfd  00000000  00000000  00028743  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002cf8  00000000  00000000  0002f440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056e8  00000000  00000000  00032138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010315  00000000  00000000  00037820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be8  00000000  00000000  00047b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 03 	jmp	0x64e	; 0x64e <__dtors_end>
       4:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
       8:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
       c:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__vector_3>
      10:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__vector_3>
      14:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__vector_3>
      18:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      1c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      20:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      24:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      28:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      2c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      30:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      34:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      38:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      3c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      40:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__vector_16>
      44:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      48:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__vector_18>
      4c:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__vector_19>
      50:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      54:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      58:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      5c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
      60:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_24>
      64:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     224:	54 65 6d 70 3d 00                                   Temp=.

0000022a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     22a:	20 7c 20 00                                          | .

0000022e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     22e:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000237 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     237:	20 7c 20 00                                          | .

0000023b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     23b:	50 56 2d 56 3d 00                                   PV-V=.

00000241 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     241:	20 7c 20 00                                          | .

00000245 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     245:	42 61 74 74 2d 56 3d 00                             Batt-V=.

0000024d <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     24d:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

0000025a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     25a:	20 7c 20 00                                          | .

0000025e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     25e:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

00000267 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     267:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000271 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     271:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     281:	6f 64 65 3d 00                                      ode=.

00000286 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     286:	20 7c 20 00                                          | .

0000028a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     28a:	42 45 52 3d 00                                      BER=.

0000028f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     28f:	20 7c 20 00                                          | .

00000293 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     293:	52 53 53 49 3d 00                                   RSSI=.

00000299 <_ZL12b64_alphabet>:
     299:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     2a9:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     2b9:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     2c9:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000002da <_ZZ4loopE3__c>:
     2da:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000002e4 <_ZZ8sendDatavE3__c_0>:
     2e4:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     2f4:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     304:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

00000313 <_ZZ8sendDatavE3__c>:
     313:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     323:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

00000334 <_ZZ12takeReadingsvE3__c>:
     334:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     344:	2e 2e 00                                            ...

00000347 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     347:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     357:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

00000362 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     362:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     372:	73 2e 2e 2e 00                                      s....

00000377 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     377:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     387:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000392 <_ZZ21ensureFonaInitialisedbE3__c>:
     392:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     3a2:	61 2e 2e 2e 00                                      a....

000003a7 <_ZZ5setupE3__c>:
     3a7:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003b3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_21>:
     3b3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3c3:	2d 2d 2d 2d 2d 2d 2d 2d 00                          --------.

000003cc <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_20>:
     3cc:	47 53 4d 20 50 61 79 6c 6f 61 64 20 54 6f 20 42     GSM Payload To B
     3dc:	65 20 53 65 6e 74 20 4f 76 65 72 20 57 65 62 3a     e Sent Over Web:
	...

000003ed <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_19>:
     3ed:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3fd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

00000408 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_18>:
     408:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     418:	4c 20 40 35 20 2a 2a 2a 00                          L @5 ***.

00000421 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_17>:
     421:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     431:	4c 20 40 34 20 2a 2a 2a 00                          L @4 ***.

0000043a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_16>:
     43a:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     44a:	4c 20 40 33 20 2a 2a 2a 00                          L @3 ***.

00000453 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_15>:
     453:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     463:	4c 20 40 32 20 2a 2a 2a 00                          L @2 ***.

0000046c <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_14>:
     46c:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     47c:	4c 20 40 31 20 2a 2a 2a 00                          L @1 ***.

00000485 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_13>:
     485:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 45     *** TEST FAIL @E
     495:	4e 43 4f 44 49 4e 47 20 2a 2a 2a 00                 NCODING ***.

000004a1 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_12>:
     4a1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     4b1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

000004bc <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_11>:
     4bc:	54 65 73 74 20 46 6f 72 20 50 72 69 6e 74 20 4f     Test For Print O
     4cc:	75 74 70 75 74 3a 00                                utput:.

000004d3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_10>:
     4d3:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     4e3:	30 20 2a 2a 2a 00                                   0 ***.

000004e9 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_9>:
     4e9:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 39     *** TEST FAIL @9
     4f9:	20 2a 2a 2a 00                                       ***.

000004fe <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_8>:
     4fe:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 38     *** TEST FAIL @8
     50e:	20 2a 2a 2a 00                                       ***.

00000513 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_7>:
     513:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 37     *** TEST FAIL @7
     523:	20 2a 2a 2a 00                                       ***.

00000528 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_6>:
     528:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 36     *** TEST FAIL @6
     538:	20 2a 2a 2a 00                                       ***.

0000053d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_5>:
     53d:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 35     *** TEST FAIL @5
     54d:	20 2a 2a 2a 00                                       ***.

00000552 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_4>:
     552:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 34     *** TEST FAIL @4
     562:	20 2a 2a 2a 00                                       ***.

00000567 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_3>:
     567:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 33     *** TEST FAIL @3
     577:	20 2a 2a 2a 00                                       ***.

0000057c <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_2>:
     57c:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 32     *** TEST FAIL @2
     58c:	20 2a 2a 2a 00                                       ***.

00000591 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_1>:
     591:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     5a1:	20 2a 2a 2a 00                                       ***.

000005a6 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_0>:
     5a6:	43 61 73 74 20 62 61 63 6b 20 61 66 74 65 72 20     Cast back after 
     5b6:	69 6e 74 20 73 74 6f 72 61 67 65 20 76 61 6c 3a     int storage val:
	...

000005c7 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c>:
     5c7:	4e 65 74 73 74 61 74 20 35 20 2b 20 52 65 73 75     Netstat 5 + Resu
     5d7:	6c 74 43 6f 64 65 20 31 20 2b 20 45 72 72 6f 72     ltCode 1 + Error
     5e7:	20 31 3d 00                                          1=.

000005eb <digital_pin_to_timer_PGM>:
     5eb:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     5fb:	00 00 00 00                                         ....

000005ff <digital_pin_to_bit_mask_PGM>:
     5ff:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     60f:	04 08 10 20                                         ... 

00000613 <digital_pin_to_port_PGM>:
     613:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     623:	03 03 03 03                                         ....

00000627 <port_to_input_PGM>:
     627:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000631 <port_to_output_PGM>:
     631:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000063b <port_to_mode_PGM>:
     63b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000646 <__ctors_start>:
     646:	1e 0d       	add	r17, r14
     648:	ac 11       	cpse	r26, r12
     64a:	ba 15       	cp	r27, r10

0000064c <__ctors_end>:
     64c:	2e 0d       	add	r18, r14

0000064e <__dtors_end>:
     64e:	11 24       	eor	r1, r1
     650:	1f be       	out	0x3f, r1	; 63
     652:	cf ef       	ldi	r28, 0xFF	; 255
     654:	d8 e0       	ldi	r29, 0x08	; 8
     656:	de bf       	out	0x3e, r29	; 62
     658:	cd bf       	out	0x3d, r28	; 61

0000065a <__do_copy_data>:
     65a:	12 e0       	ldi	r17, 0x02	; 2
     65c:	a0 e0       	ldi	r26, 0x00	; 0
     65e:	b1 e0       	ldi	r27, 0x01	; 1
     660:	ea ef       	ldi	r30, 0xFA	; 250
     662:	fe e3       	ldi	r31, 0x3E	; 62
     664:	02 c0       	rjmp	.+4      	; 0x66a <__do_copy_data+0x10>
     666:	05 90       	lpm	r0, Z+
     668:	0d 92       	st	X+, r0
     66a:	a4 39       	cpi	r26, 0x94	; 148
     66c:	b1 07       	cpc	r27, r17
     66e:	d9 f7       	brne	.-10     	; 0x666 <__do_copy_data+0xc>

00000670 <__do_clear_bss>:
     670:	25 e0       	ldi	r18, 0x05	; 5
     672:	a4 e9       	ldi	r26, 0x94	; 148
     674:	b2 e0       	ldi	r27, 0x02	; 2
     676:	01 c0       	rjmp	.+2      	; 0x67a <.do_clear_bss_start>

00000678 <.do_clear_bss_loop>:
     678:	1d 92       	st	X+, r1

0000067a <.do_clear_bss_start>:
     67a:	a5 37       	cpi	r26, 0x75	; 117
     67c:	b2 07       	cpc	r27, r18
     67e:	e1 f7       	brne	.-8      	; 0x678 <.do_clear_bss_loop>

00000680 <__do_global_ctors>:
     680:	13 e0       	ldi	r17, 0x03	; 3
     682:	c6 e2       	ldi	r28, 0x26	; 38
     684:	d3 e0       	ldi	r29, 0x03	; 3
     686:	04 c0       	rjmp	.+8      	; 0x690 <__do_global_ctors+0x10>
     688:	21 97       	sbiw	r28, 0x01	; 1
     68a:	fe 01       	movw	r30, r28
     68c:	0e 94 df 1c 	call	0x39be	; 0x39be <__tablejump2__>
     690:	c3 32       	cpi	r28, 0x23	; 35
     692:	d1 07       	cpc	r29, r17
     694:	c9 f7       	brne	.-14     	; 0x688 <__do_global_ctors+0x8>
     696:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <main>
     69a:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <__do_global_dtors>

0000069e <__bad_interrupt>:
     69e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a2 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     6a2:	83 5e       	subi	r24, 0xE3	; 227
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	dc 01       	movw	r26, r24
     6a8:	8d 91       	ld	r24, X+
     6aa:	9c 91       	ld	r25, X
     6ac:	dc 01       	movw	r26, r24
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	04 80       	ldd	r0, Z+4	; 0x04
     6b4:	f5 81       	ldd	r31, Z+5	; 0x05
     6b6:	e0 2d       	mov	r30, r0
     6b8:	09 94       	ijmp

000006ba <_ZN13Adafruit_FONA5writeEh>:
     6ba:	83 5e       	subi	r24, 0xE3	; 227
     6bc:	9e 4f       	sbci	r25, 0xFE	; 254
     6be:	dc 01       	movw	r26, r24
     6c0:	8d 91       	ld	r24, X+
     6c2:	9c 91       	ld	r25, X
     6c4:	dc 01       	movw	r26, r24
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	01 90       	ld	r0, Z+
     6cc:	f0 81       	ld	r31, Z
     6ce:	e0 2d       	mov	r30, r0
     6d0:	09 94       	ijmp

000006d2 <_ZN13Adafruit_FONA4readEv>:
     6d2:	83 5e       	subi	r24, 0xE3	; 227
     6d4:	9e 4f       	sbci	r25, 0xFE	; 254
     6d6:	dc 01       	movw	r26, r24
     6d8:	8d 91       	ld	r24, X+
     6da:	9c 91       	ld	r25, X
     6dc:	dc 01       	movw	r26, r24
     6de:	ed 91       	ld	r30, X+
     6e0:	fc 91       	ld	r31, X
     6e2:	06 80       	ldd	r0, Z+6	; 0x06
     6e4:	f7 81       	ldd	r31, Z+7	; 0x07
     6e6:	e0 2d       	mov	r30, r0
     6e8:	09 94       	ijmp

000006ea <_ZN13Adafruit_FONA4peekEv>:
     6ea:	83 5e       	subi	r24, 0xE3	; 227
     6ec:	9e 4f       	sbci	r25, 0xFE	; 254
     6ee:	dc 01       	movw	r26, r24
     6f0:	8d 91       	ld	r24, X+
     6f2:	9c 91       	ld	r25, X
     6f4:	dc 01       	movw	r26, r24
     6f6:	ed 91       	ld	r30, X+
     6f8:	fc 91       	ld	r31, X
     6fa:	00 84       	ldd	r0, Z+8	; 0x08
     6fc:	f1 85       	ldd	r31, Z+9	; 0x09
     6fe:	e0 2d       	mov	r30, r0
     700:	09 94       	ijmp

00000702 <_ZN13Adafruit_FONA5flushEv>:
     702:	83 5e       	subi	r24, 0xE3	; 227
     704:	9e 4f       	sbci	r25, 0xFE	; 254
     706:	dc 01       	movw	r26, r24
     708:	8d 91       	ld	r24, X+
     70a:	9c 91       	ld	r25, X
     70c:	dc 01       	movw	r26, r24
     70e:	ed 91       	ld	r30, X+
     710:	fc 91       	ld	r31, X
     712:	02 84       	ldd	r0, Z+10	; 0x0a
     714:	f3 85       	ldd	r31, Z+11	; 0x0b
     716:	e0 2d       	mov	r30, r0
     718:	09 94       	ijmp

0000071a <_ZN13Adafruit_FONAC1Eab>:
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <_ZN13Adafruit_FONAC1Eab+0x12>
     72c:	00 d0       	rcall	.+0      	; 0x72e <_ZN13Adafruit_FONAC1Eab+0x14>
     72e:	00 d0       	rcall	.+0      	; 0x730 <_ZN13Adafruit_FONAC1Eab+0x16>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	8c 01       	movw	r16, r24
     736:	c6 2e       	mov	r12, r22
     738:	d4 2e       	mov	r13, r20
     73a:	fc 01       	movw	r30, r24
     73c:	13 82       	std	Z+3, r1	; 0x03
     73e:	12 82       	std	Z+2, r1	; 0x02
     740:	88 ee       	ldi	r24, 0xE8	; 232
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	84 83       	std	Z+4, r24	; 0x04
     74a:	95 83       	std	Z+5, r25	; 0x05
     74c:	a6 83       	std	Z+6, r26	; 0x06
     74e:	b7 83       	std	Z+7, r27	; 0x07
     750:	8a e3       	ldi	r24, 0x3A	; 58
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	91 83       	std	Z+1, r25	; 0x01
     756:	80 83       	st	Z, r24
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	86 87       	std	Z+14, r24	; 0x0e
     75c:	78 01       	movw	r14, r16
     75e:	fb ee       	ldi	r31, 0xEB	; 235
     760:	ef 1a       	sub	r14, r31
     762:	fe ef       	ldi	r31, 0xFE	; 254
     764:	ff 0a       	sbc	r15, r31
     766:	66 e7       	ldi	r22, 0x76	; 118
     768:	72 e0       	ldi	r23, 0x02	; 2
     76a:	c7 01       	movw	r24, r14
     76c:	0e 94 8c 19 	call	0x3318	; 0x3318 <_ZN6StringC1EPKc>
     770:	f8 01       	movw	r30, r16
     772:	c4 86       	std	Z+12, r12	; 0x0c
     774:	d5 86       	std	Z+13, r13	; 0x0d
     776:	e2 5f       	subi	r30, 0xF2	; 242
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	8c e1       	ldi	r24, 0x1C	; 28
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24
     782:	32 96       	adiw	r30, 0x02	; 2
     784:	11 82       	std	Z+1, r1	; 0x01
     786:	10 82       	st	Z, r1
     788:	32 96       	adiw	r30, 0x02	; 2
     78a:	11 82       	std	Z+1, r1	; 0x01
     78c:	10 82       	st	Z, r1
     78e:	3b 96       	adiw	r30, 0x0b	; 11
     790:	11 82       	std	Z+1, r1	; 0x01
     792:	10 82       	st	Z, r1
     794:	39 97       	sbiw	r30, 0x09	; 9
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 83       	st	Z, r24
     79a:	67 e0       	ldi	r22, 0x07	; 7
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 8c 19 	call	0x3318	; 0x3318 <_ZN6StringC1EPKc>
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 5f       	subi	r22, 0xFF	; 255
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	c7 01       	movw	r24, r14
     7ae:	0e 94 f7 19 	call	0x33ee	; 0x33ee <_ZN6StringaSEOS_>
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringD1Ev>
     7ba:	f8 01       	movw	r30, r16
     7bc:	e5 5e       	subi	r30, 0xE5	; 229
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	89 e1       	ldi	r24, 0x19	; 25
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
     7c8:	26 96       	adiw	r28, 0x06	; 6
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	08 95       	ret

000007e6 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     7e6:	8b 5e       	subi	r24, 0xEB	; 235
     7e8:	9e 4f       	sbci	r25, 0xFE	; 254
     7ea:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <_ZN6StringaSERKS_>

000007ee <_ZN13Adafruit_FONA10flushInputEv>:
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	ec 01       	movw	r28, r24
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	8c 01       	movw	r16, r24
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	88 97       	sbiw	r24, 0x28	; 40
     804:	d8 f4       	brcc	.+54     	; 0x83c <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     806:	e8 81       	ld	r30, Y
     808:	f9 81       	ldd	r31, Y+1	; 0x01
     80a:	04 80       	ldd	r0, Z+4	; 0x04
     80c:	f5 81       	ldd	r31, Z+5	; 0x05
     80e:	e0 2d       	mov	r30, r0
     810:	ce 01       	movw	r24, r28
     812:	09 95       	icall
     814:	89 2b       	or	r24, r25
     816:	51 f0       	breq	.+20     	; 0x82c <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     818:	e8 81       	ld	r30, Y
     81a:	f9 81       	ldd	r31, Y+1	; 0x01
     81c:	06 80       	ldd	r0, Z+6	; 0x06
     81e:	f7 81       	ldd	r31, Z+7	; 0x07
     820:	e0 2d       	mov	r30, r0
     822:	ce 01       	movw	r24, r28
     824:	09 95       	icall
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	ed cf       	rjmp	.-38     	; 0x806 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     838:	c8 01       	movw	r24, r16
     83a:	e0 cf       	rjmp	.-64     	; 0x7fc <_ZN13Adafruit_FONA10flushInputEv+0xe>
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <_ZN13Adafruit_FONA8readlineEjb>:
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	7c 01       	movw	r14, r24
     85a:	b4 2e       	mov	r11, r20
     85c:	8b 01       	movw	r16, r22
     85e:	00 0f       	add	r16, r16
     860:	11 1f       	adc	r17, r17
     862:	00 0f       	add	r16, r16
     864:	11 1f       	adc	r17, r17
     866:	c0 e0       	ldi	r28, 0x00	; 0
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	67 01       	movw	r12, r14
     86c:	83 ee       	ldi	r24, 0xE3	; 227
     86e:	c8 1a       	sub	r12, r24
     870:	8e ef       	ldi	r24, 0xFE	; 254
     872:	d8 0a       	sbc	r13, r24
     874:	01 15       	cp	r16, r1
     876:	11 05       	cpc	r17, r1
     878:	c9 f1       	breq	.+114    	; 0x8ec <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     87a:	ce 3f       	cpi	r28, 0xFE	; 254
     87c:	d1 05       	cpc	r29, r1
     87e:	98 f0       	brcs	.+38     	; 0x8a6 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     880:	64 e8       	ldi	r22, 0x84	; 132
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	87 e8       	ldi	r24, 0x87	; 135
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     88c:	2f c0       	rjmp	.+94     	; 0x8ec <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     88e:	f6 01       	movw	r30, r12
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	dc 01       	movw	r26, r24
     896:	ed 91       	ld	r30, X+
     898:	fc 91       	ld	r31, X
     89a:	06 80       	ldd	r0, Z+6	; 0x06
     89c:	f7 81       	ldd	r31, Z+7	; 0x07
     89e:	e0 2d       	mov	r30, r0
     8a0:	09 95       	icall
     8a2:	8d 30       	cpi	r24, 0x0D	; 13
     8a4:	69 f4       	brne	.+26     	; 0x8c0 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     8a6:	d6 01       	movw	r26, r12
     8a8:	8d 91       	ld	r24, X+
     8aa:	9c 91       	ld	r25, X
     8ac:	dc 01       	movw	r26, r24
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	04 80       	ldd	r0, Z+4	; 0x04
     8b4:	f5 81       	ldd	r31, Z+5	; 0x05
     8b6:	e0 2d       	mov	r30, r0
     8b8:	09 95       	icall
     8ba:	89 2b       	or	r24, r25
     8bc:	41 f7       	brne	.-48     	; 0x88e <_ZN13Adafruit_FONA8readlineEjb+0x48>
     8be:	0c c0       	rjmp	.+24     	; 0x8d8 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     8c0:	8a 30       	cpi	r24, 0x0A	; 10
     8c2:	21 f4       	brne	.+8      	; 0x8cc <_ZN13Adafruit_FONA8readlineEjb+0x86>
     8c4:	20 97       	sbiw	r28, 0x00	; 0
     8c6:	79 f3       	breq	.-34     	; 0x8a6 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     8c8:	bb 20       	and	r11, r11
     8ca:	81 f0       	breq	.+32     	; 0x8ec <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     8cc:	f7 01       	movw	r30, r14
     8ce:	ec 0f       	add	r30, r28
     8d0:	fd 1f       	adc	r31, r29
     8d2:	87 87       	std	Z+15, r24	; 0x0f
     8d4:	21 96       	adiw	r28, 0x01	; 1
     8d6:	e7 cf       	rjmp	.-50     	; 0x8a6 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     8d8:	01 50       	subi	r16, 0x01	; 1
     8da:	11 09       	sbc	r17, r1
     8dc:	39 f0       	breq	.+14     	; 0x8ec <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     8ea:	c4 cf       	rjmp	.-120    	; 0x874 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     8ec:	f7 01       	movw	r30, r14
     8ee:	ec 0f       	add	r30, r28
     8f0:	fd 1f       	adc	r31, r29
     8f2:	17 86       	std	Z+15, r1	; 0x0f
     8f4:	8c 2f       	mov	r24, r28
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	08 95       	ret

0000090a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	8b 01       	movw	r16, r22
     916:	ba 01       	movw	r22, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	0e 94 23 04 	call	0x846	; 0x846 <_ZN13Adafruit_FONA8readlineEjb>
     91e:	6a e8       	ldi	r22, 0x8A	; 138
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	87 e8       	ldi	r24, 0x87	; 135
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     92a:	2f 96       	adiw	r28, 0x0f	; 15
     92c:	be 01       	movw	r22, r28
     92e:	87 e8       	ldi	r24, 0x87	; 135
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     936:	b8 01       	movw	r22, r16
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <strcmp_P>
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	89 2b       	or	r24, r25
     942:	09 f0       	breq	.+2      	; 0x946 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	82 2f       	mov	r24, r18
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	8b 01       	movw	r16, r22
     962:	7a 01       	movw	r14, r20
     964:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN13Adafruit_FONA10flushInputEv>
     968:	6d e7       	ldi	r22, 0x7D	; 125
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	87 e8       	ldi	r24, 0x87	; 135
     96e:	94 e0       	ldi	r25, 0x04	; 4
     970:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     974:	b8 01       	movw	r22, r16
     976:	87 e8       	ldi	r24, 0x87	; 135
     978:	94 e0       	ldi	r25, 0x04	; 4
     97a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     97e:	fe 01       	movw	r30, r28
     980:	e3 5e       	subi	r30, 0xE3	; 227
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	b8 01       	movw	r22, r16
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	b7 01       	movw	r22, r14
     992:	ce 01       	movw	r24, r28
     994:	0e 94 23 04 	call	0x846	; 0x846 <_ZN13Adafruit_FONA8readlineEjb>
     998:	18 2f       	mov	r17, r24
     99a:	66 e7       	ldi	r22, 0x76	; 118
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	87 e8       	ldi	r24, 0x87	; 135
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     9a6:	be 01       	movw	r22, r28
     9a8:	61 5f       	subi	r22, 0xF1	; 241
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	87 e8       	ldi	r24, 0x87	; 135
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     9b4:	81 2f       	mov	r24, r17
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	08 95       	ret

000009c4 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
     9da:	6b 01       	movw	r12, r22
     9dc:	7a 01       	movw	r14, r20
     9de:	59 01       	movw	r10, r18
     9e0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN13Adafruit_FONA10flushInputEv>
     9e4:	6f e6       	ldi	r22, 0x6F	; 111
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	87 e8       	ldi	r24, 0x87	; 135
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     9f0:	b6 01       	movw	r22, r12
     9f2:	87 e8       	ldi	r24, 0x87	; 135
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     9fa:	62 e2       	ldi	r22, 0x22	; 34
     9fc:	87 e8       	ldi	r24, 0x87	; 135
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN5Print5printEc>
     a04:	b7 01       	movw	r22, r14
     a06:	87 e8       	ldi	r24, 0x87	; 135
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     a0e:	62 e2       	ldi	r22, 0x22	; 34
     a10:	87 e8       	ldi	r24, 0x87	; 135
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN5Print7printlnEc>
     a18:	8e 01       	movw	r16, r28
     a1a:	03 5e       	subi	r16, 0xE3	; 227
     a1c:	1e 4f       	sbci	r17, 0xFE	; 254
     a1e:	b6 01       	movw	r22, r12
     a20:	f8 01       	movw	r30, r16
     a22:	80 81       	ld	r24, Z
     a24:	91 81       	ldd	r25, Z+1	; 0x01
     a26:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     a2a:	62 e2       	ldi	r22, 0x22	; 34
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 81       	ld	r24, Z
     a30:	91 81       	ldd	r25, Z+1	; 0x01
     a32:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN5Print5printEc>
     a36:	b7 01       	movw	r22, r14
     a38:	f8 01       	movw	r30, r16
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     a42:	62 e2       	ldi	r22, 0x22	; 34
     a44:	f8 01       	movw	r30, r16
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN5Print7printlnEc>
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	b5 01       	movw	r22, r10
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 23 04 	call	0x846	; 0x846 <_ZN13Adafruit_FONA8readlineEjb>
     a58:	18 2f       	mov	r17, r24
     a5a:	68 e6       	ldi	r22, 0x68	; 104
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	87 e8       	ldi	r24, 0x87	; 135
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     a66:	be 01       	movw	r22, r28
     a68:	61 5f       	subi	r22, 0xF1	; 241
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	87 e8       	ldi	r24, 0x87	; 135
     a6e:	94 e0       	ldi	r25, 0x04	; 4
     a70:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     a74:	81 2f       	mov	r24, r17
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	08 95       	ret

00000a8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
     a96:	8a 01       	movw	r16, r20
     a98:	a9 01       	movw	r20, r18
     a9a:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     a9e:	88 23       	and	r24, r24
     aa0:	41 f0       	breq	.+16     	; 0xab2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     aa2:	b8 01       	movw	r22, r16
     aa4:	ce 01       	movw	r24, r28
     aa6:	0f 96       	adiw	r24, 0x0f	; 15
     aa8:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <strcmp_P>
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	89 2b       	or	r24, r25
     ab0:	09 f0       	breq	.+2      	; 0xab4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	82 2f       	mov	r24, r18
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <_ZN13Adafruit_FONA5beginEhh>:
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
     ad2:	f6 2e       	mov	r15, r22
     ad4:	e4 2e       	mov	r14, r20
     ad6:	8f e1       	ldi	r24, 0x1F	; 31
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_Znwj>
     ade:	8c 01       	movw	r16, r24
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	4e 2d       	mov	r20, r14
     ae4:	6f 2d       	mov	r22, r15
     ae6:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN14SoftwareSerialC1Ehhb>
     aea:	7e 01       	movw	r14, r28
     aec:	83 ee       	ldi	r24, 0xE3	; 227
     aee:	e8 1a       	sub	r14, r24
     af0:	8e ef       	ldi	r24, 0xFE	; 254
     af2:	f8 0a       	sbc	r15, r24
     af4:	d7 01       	movw	r26, r14
     af6:	0d 93       	st	X+, r16
     af8:	1c 93       	st	X, r17
     afa:	40 ec       	ldi	r20, 0xC0	; 192
     afc:	52 e1       	ldi	r21, 0x12	; 18
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	c8 01       	movw	r24, r16
     b04:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN14SoftwareSerial5beginEl>
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b0c:	0e 94 b3 18 	call	0x3166	; 0x3166 <pinMode>
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	8c 85       	ldd	r24, Y+12	; 0x0c
     b14:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
     b18:	6a e0       	ldi	r22, 0x0A	; 10
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	8c 85       	ldd	r24, Y+12	; 0x0c
     b28:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
     b2c:	64 e6       	ldi	r22, 0x64	; 100
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b3c:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
     b40:	68 ef       	ldi	r22, 0xF8	; 248
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	87 e8       	ldi	r24, 0x87	; 135
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     b4c:	8e e0       	ldi	r24, 0x0E	; 14
     b4e:	c8 2e       	mov	r12, r24
     b50:	d1 2c       	mov	r13, r1
     b52:	8e 01       	movw	r16, r28
     b54:	05 5e       	subi	r16, 0xE5	; 229
     b56:	1e 4f       	sbci	r17, 0xFE	; 254
     b58:	f7 01       	movw	r30, r14
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	dc 01       	movw	r26, r24
     b60:	ed 91       	ld	r30, X+
     b62:	fc 91       	ld	r31, X
     b64:	04 80       	ldd	r0, Z+4	; 0x04
     b66:	f5 81       	ldd	r31, Z+5	; 0x05
     b68:	e0 2d       	mov	r30, r0
     b6a:	09 95       	icall
     b6c:	89 2b       	or	r24, r25
     b6e:	59 f0       	breq	.+22     	; 0xb86 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     b70:	f7 01       	movw	r30, r14
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	dc 01       	movw	r26, r24
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	06 80       	ldd	r0, Z+6	; 0x06
     b7e:	f7 81       	ldd	r31, Z+7	; 0x07
     b80:	e0 2d       	mov	r30, r0
     b82:	09 95       	icall
     b84:	e9 cf       	rjmp	.-46     	; 0xb58 <_ZN13Adafruit_FONA5beginEhh+0x98>
     b86:	f8 01       	movw	r30, r16
     b88:	40 81       	ld	r20, Z
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
     b8c:	24 ef       	ldi	r18, 0xF4	; 244
     b8e:	31 e0       	ldi	r19, 0x01	; 1
     b90:	65 ef       	ldi	r22, 0xF5	; 245
     b92:	71 e0       	ldi	r23, 0x01	; 1
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b9a:	81 11       	cpse	r24, r1
     b9c:	34 c0       	rjmp	.+104    	; 0xc06 <_ZN13Adafruit_FONA5beginEhh+0x146>
     b9e:	d7 01       	movw	r26, r14
     ba0:	8d 91       	ld	r24, X+
     ba2:	9c 91       	ld	r25, X
     ba4:	dc 01       	movw	r26, r24
     ba6:	ed 91       	ld	r30, X+
     ba8:	fc 91       	ld	r31, X
     baa:	04 80       	ldd	r0, Z+4	; 0x04
     bac:	f5 81       	ldd	r31, Z+5	; 0x05
     bae:	e0 2d       	mov	r30, r0
     bb0:	09 95       	icall
     bb2:	89 2b       	or	r24, r25
     bb4:	59 f0       	breq	.+22     	; 0xbcc <_ZN13Adafruit_FONA5beginEhh+0x10c>
     bb6:	f7 01       	movw	r30, r14
     bb8:	80 81       	ld	r24, Z
     bba:	91 81       	ldd	r25, Z+1	; 0x01
     bbc:	dc 01       	movw	r26, r24
     bbe:	ed 91       	ld	r30, X+
     bc0:	fc 91       	ld	r31, X
     bc2:	06 80       	ldd	r0, Z+6	; 0x06
     bc4:	f7 81       	ldd	r31, Z+7	; 0x07
     bc6:	e0 2d       	mov	r30, r0
     bc8:	09 95       	icall
     bca:	e9 cf       	rjmp	.-46     	; 0xb9e <_ZN13Adafruit_FONA5beginEhh+0xde>
     bcc:	24 ef       	ldi	r18, 0xF4	; 244
     bce:	31 e0       	ldi	r19, 0x01	; 1
     bd0:	42 ef       	ldi	r20, 0xF2	; 242
     bd2:	51 e0       	ldi	r21, 0x01	; 1
     bd4:	6f ee       	ldi	r22, 0xEF	; 239
     bd6:	71 e0       	ldi	r23, 0x01	; 1
     bd8:	ce 01       	movw	r24, r28
     bda:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     bde:	81 11       	cpse	r24, r1
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <_ZN13Adafruit_FONA5beginEhh+0x146>
     be2:	64 ef       	ldi	r22, 0xF4	; 244
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     bee:	b1 e0       	ldi	r27, 0x01	; 1
     bf0:	cb 1a       	sub	r12, r27
     bf2:	d1 08       	sbc	r13, r1
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <_ZN13Adafruit_FONA5beginEhh+0x138>
     bf6:	b0 cf       	rjmp	.-160    	; 0xb58 <_ZN13Adafruit_FONA5beginEhh+0x98>
     bf8:	5e c0       	rjmp	.+188    	; 0xcb6 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     bfa:	64 e6       	ldi	r22, 0x64	; 100
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     c06:	f8 01       	movw	r30, r16
     c08:	40 81       	ld	r20, Z
     c0a:	51 81       	ldd	r21, Z+1	; 0x01
     c0c:	24 ef       	ldi	r18, 0xF4	; 244
     c0e:	31 e0       	ldi	r19, 0x01	; 1
     c10:	62 ec       	ldi	r22, 0xC2	; 194
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	ce 01       	movw	r24, r28
     c16:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c1a:	64 e6       	ldi	r22, 0x64	; 100
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     c26:	d8 01       	movw	r26, r16
     c28:	4d 91       	ld	r20, X+
     c2a:	5c 91       	ld	r21, X
     c2c:	24 ef       	ldi	r18, 0xF4	; 244
     c2e:	31 e0       	ldi	r19, 0x01	; 1
     c30:	6d eb       	ldi	r22, 0xBD	; 189
     c32:	71 e0       	ldi	r23, 0x01	; 1
     c34:	ce 01       	movw	r24, r28
     c36:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c3a:	81 11       	cpse	r24, r1
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <_ZN13Adafruit_FONA5beginEhh+0x182>
     c3e:	12 e0       	ldi	r17, 0x02	; 2
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <_ZN13Adafruit_FONA5beginEhh+0x184>
     c42:	11 e0       	ldi	r17, 0x01	; 1
     c44:	64 e6       	ldi	r22, 0x64	; 100
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN13Adafruit_FONA10flushInputEv>
     c56:	66 eb       	ldi	r22, 0xB6	; 182
     c58:	71 e0       	ldi	r23, 0x01	; 1
     c5a:	87 e8       	ldi	r24, 0x87	; 135
     c5c:	94 e0       	ldi	r25, 0x04	; 4
     c5e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     c62:	66 e1       	ldi	r22, 0x16	; 22
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	87 e8       	ldi	r24, 0x87	; 135
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     c6e:	66 e1       	ldi	r22, 0x16	; 22
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	f7 01       	movw	r30, r14
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	64 ef       	ldi	r22, 0xF4	; 244
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 23 04 	call	0x846	; 0x846 <_ZN13Adafruit_FONA8readlineEjb>
     c88:	6f ea       	ldi	r22, 0xAF	; 175
     c8a:	71 e0       	ldi	r23, 0x01	; 1
     c8c:	87 e8       	ldi	r24, 0x87	; 135
     c8e:	94 e0       	ldi	r25, 0x04	; 4
     c90:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     c94:	2f 96       	adiw	r28, 0x0f	; 15
     c96:	be 01       	movw	r22, r28
     c98:	87 e8       	ldi	r24, 0x87	; 135
     c9a:	94 e0       	ldi	r25, 0x04	; 4
     c9c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     ca0:	64 ea       	ldi	r22, 0xA4	; 164
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strstr_P>
     caa:	89 2b       	or	r24, r25
     cac:	11 f0       	breq	.+4      	; 0xcb2 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     cae:	81 2f       	mov	r24, r17
     cb0:	35 c0       	rjmp	.+106    	; 0xd1c <_ZN13Adafruit_FONA5beginEhh+0x25c>
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	33 c0       	rjmp	.+102    	; 0xd1c <_ZN13Adafruit_FONA5beginEhh+0x25c>
     cb6:	d8 01       	movw	r26, r16
     cb8:	4d 91       	ld	r20, X+
     cba:	5c 91       	ld	r21, X
     cbc:	24 ef       	ldi	r18, 0xF4	; 244
     cbe:	31 e0       	ldi	r19, 0x01	; 1
     cc0:	6c ee       	ldi	r22, 0xEC	; 236
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	ce 01       	movw	r24, r28
     cc6:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cca:	64 e6       	ldi	r22, 0x64	; 100
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     cd6:	f8 01       	movw	r30, r16
     cd8:	40 81       	ld	r20, Z
     cda:	51 81       	ldd	r21, Z+1	; 0x01
     cdc:	24 ef       	ldi	r18, 0xF4	; 244
     cde:	31 e0       	ldi	r19, 0x01	; 1
     ce0:	69 ee       	ldi	r22, 0xE9	; 233
     ce2:	71 e0       	ldi	r23, 0x01	; 1
     ce4:	ce 01       	movw	r24, r28
     ce6:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cea:	64 e6       	ldi	r22, 0x64	; 100
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
     cf6:	d8 01       	movw	r26, r16
     cf8:	4d 91       	ld	r20, X+
     cfa:	5c 91       	ld	r21, X
     cfc:	24 ef       	ldi	r18, 0xF4	; 244
     cfe:	31 e0       	ldi	r19, 0x01	; 1
     d00:	66 ee       	ldi	r22, 0xE6	; 230
     d02:	71 e0       	ldi	r23, 0x01	; 1
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d0a:	81 11       	cpse	r24, r1
     d0c:	76 cf       	rjmp	.-276    	; 0xbfa <_ZN13Adafruit_FONA5beginEhh+0x13a>
     d0e:	67 ec       	ldi	r22, 0xC7	; 199
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	87 e8       	ldi	r24, 0x87	; 135
     d14:	94 e0       	ldi	r25, 0x04	; 4
     d16:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	08 95       	ret

00000d2e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	ec 01       	movw	r28, r24
     d3c:	79 01       	movw	r14, r18
     d3e:	98 01       	movw	r18, r16
     d40:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     d44:	b7 01       	movw	r22, r14
     d46:	ce 01       	movw	r24, r28
     d48:	0f 96       	adiw	r24, 0x0f	; 15
     d4a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <strcmp_P>
     d4e:	21 e0       	ldi	r18, 0x01	; 1
     d50:	89 2b       	or	r24, r25
     d52:	09 f0       	breq	.+2      	; 0xd56 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	82 2f       	mov	r24, r18
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	08 95       	ret

00000d66 <_ZN13Adafruit_FONA10enableGPRSEb>:
     d66:	7f 92       	push	r7
     d68:	8f 92       	push	r8
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	ec 01       	movw	r28, r24
     d82:	28 ee       	ldi	r18, 0xE8	; 232
     d84:	3d ef       	ldi	r19, 0xFD	; 253
     d86:	66 23       	and	r22, r22
     d88:	09 f4       	brne	.+2      	; 0xd8c <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     d8a:	1f c1       	rjmp	.+574    	; 0xfca <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     d8c:	4e e5       	ldi	r20, 0x5E	; 94
     d8e:	51 e0       	ldi	r21, 0x01	; 1
     d90:	63 e5       	ldi	r22, 0x53	; 83
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d98:	81 11       	cpse	r24, r1
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	78 2e       	mov	r7, r24
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     da2:	77 24       	eor	r7, r7
     da4:	73 94       	inc	r7
     da6:	7e 01       	movw	r14, r28
     da8:	85 ee       	ldi	r24, 0xE5	; 229
     daa:	e8 1a       	sub	r14, r24
     dac:	8e ef       	ldi	r24, 0xFE	; 254
     dae:	f8 0a       	sbc	r15, r24
     db0:	f7 01       	movw	r30, r14
     db2:	40 81       	ld	r20, Z
     db4:	51 81       	ldd	r21, Z+1	; 0x01
     db6:	20 e1       	ldi	r18, 0x10	; 16
     db8:	37 e2       	ldi	r19, 0x27	; 39
     dba:	68 e4       	ldi	r22, 0x48	; 72
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dc4:	88 23       	and	r24, r24
     dc6:	09 f4       	brne	.+2      	; 0xdca <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     dc8:	25 c1       	rjmp	.+586    	; 0x1014 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     dca:	f7 01       	movw	r30, r14
     dcc:	40 81       	ld	r20, Z
     dce:	51 81       	ldd	r21, Z+1	; 0x01
     dd0:	20 e1       	ldi	r18, 0x10	; 16
     dd2:	37 e2       	ldi	r19, 0x27	; 39
     dd4:	6a e2       	ldi	r22, 0x2A	; 42
     dd6:	71 e0       	ldi	r23, 0x01	; 1
     dd8:	ce 01       	movw	r24, r28
     dda:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     de2:	1a c1       	rjmp	.+564    	; 0x1018 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     de4:	4e 01       	movw	r8, r28
     de6:	f2 ef       	ldi	r31, 0xF2	; 242
     de8:	8f 1a       	sub	r8, r31
     dea:	fe ef       	ldi	r31, 0xFE	; 254
     dec:	9f 0a       	sbc	r9, r31
     dee:	f4 01       	movw	r30, r8
     df0:	40 81       	ld	r20, Z
     df2:	51 81       	ldd	r21, Z+1	; 0x01
     df4:	41 15       	cp	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	71 f4       	brne	.+28     	; 0xe16 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     dfa:	f7 01       	movw	r30, r14
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	65 ec       	ldi	r22, 0xC5	; 197
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e0e:	81 11       	cpse	r24, r1
     e10:	ce c0       	rjmp	.+412    	; 0xfae <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     e12:	89 e0       	ldi	r24, 0x09	; 9
     e14:	0e c1       	rjmp	.+540    	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e16:	f7 01       	movw	r30, r14
     e18:	20 81       	ld	r18, Z
     e1a:	31 81       	ldd	r19, Z+1	; 0x01
     e1c:	00 e1       	ldi	r16, 0x10	; 16
     e1e:	17 e2       	ldi	r17, 0x27	; 39
     e20:	66 e1       	ldi	r22, 0x16	; 22
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     e2a:	88 23       	and	r24, r24
     e2c:	09 f4       	brne	.+2      	; 0xe30 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
     e2e:	f6 c0       	rjmp	.+492    	; 0x101c <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN13Adafruit_FONA10flushInputEv>
     e36:	8e 01       	movw	r16, r28
     e38:	03 5e       	subi	r16, 0xE3	; 227
     e3a:	1e 4f       	sbci	r17, 0xFE	; 254
     e3c:	6c e0       	ldi	r22, 0x0C	; 12
     e3e:	71 e0       	ldi	r23, 0x01	; 1
     e40:	f8 01       	movw	r30, r16
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     e4a:	f4 01       	movw	r30, r8
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	f8 01       	movw	r30, r16
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     e5a:	5e 01       	movw	r10, r28
     e5c:	f0 ef       	ldi	r31, 0xF0	; 240
     e5e:	af 1a       	sub	r10, r31
     e60:	fe ef       	ldi	r31, 0xFE	; 254
     e62:	bf 0a       	sbc	r11, r31
     e64:	f5 01       	movw	r30, r10
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	89 2b       	or	r24, r25
     e6c:	79 f0       	breq	.+30     	; 0xe8c <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
     e6e:	62 e3       	ldi	r22, 0x32	; 50
     e70:	71 e0       	ldi	r23, 0x01	; 1
     e72:	f8 01       	movw	r30, r16
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
     e7c:	f5 01       	movw	r30, r10
     e7e:	60 81       	ld	r22, Z
     e80:	71 81       	ldd	r23, Z+1	; 0x01
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     e8c:	6e 01       	movw	r12, r28
     e8e:	fe ee       	ldi	r31, 0xEE	; 238
     e90:	cf 1a       	sub	r12, r31
     e92:	fe ef       	ldi	r31, 0xFE	; 254
     e94:	df 0a       	sbc	r13, r31
     e96:	f6 01       	movw	r30, r12
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	89 2b       	or	r24, r25
     e9e:	79 f0       	breq	.+30     	; 0xebe <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
     ea0:	62 e3       	ldi	r22, 0x32	; 50
     ea2:	71 e0       	ldi	r23, 0x01	; 1
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
     eae:	f6 01       	movw	r30, r12
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     ebe:	64 e3       	ldi	r22, 0x34	; 52
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     ecc:	65 e0       	ldi	r22, 0x05	; 5
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	87 e8       	ldi	r24, 0x87	; 135
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     ed8:	6b ef       	ldi	r22, 0xFB	; 251
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	87 e8       	ldi	r24, 0x87	; 135
     ede:	94 e0       	ldi	r25, 0x04	; 4
     ee0:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     ee4:	f4 01       	movw	r30, r8
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	87 e8       	ldi	r24, 0x87	; 135
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     ef2:	f5 01       	movw	r30, r10
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	89 2b       	or	r24, r25
     efa:	69 f0       	breq	.+26     	; 0xf16 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
     efc:	62 e3       	ldi	r22, 0x32	; 50
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	87 e8       	ldi	r24, 0x87	; 135
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
     f08:	f5 01       	movw	r30, r10
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	87 e8       	ldi	r24, 0x87	; 135
     f10:	94 e0       	ldi	r25, 0x04	; 4
     f12:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     f16:	f6 01       	movw	r30, r12
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	89 2b       	or	r24, r25
     f1e:	69 f0       	breq	.+26     	; 0xf3a <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
     f20:	62 e3       	ldi	r22, 0x32	; 50
     f22:	71 e0       	ldi	r23, 0x01	; 1
     f24:	87 e8       	ldi	r24, 0x87	; 135
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
     f2c:	f6 01       	movw	r30, r12
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	87 e8       	ldi	r24, 0x87	; 135
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
     f3a:	64 e3       	ldi	r22, 0x34	; 52
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	87 e8       	ldi	r24, 0x87	; 135
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
     f46:	f7 01       	movw	r30, r14
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	40 e1       	ldi	r20, 0x10	; 16
     f4e:	57 e2       	ldi	r21, 0x27	; 39
     f50:	ce 01       	movw	r24, r28
     f52:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     f56:	88 23       	and	r24, r24
     f58:	09 f4       	brne	.+2      	; 0xf5c <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
     f5a:	62 c0       	rjmp	.+196    	; 0x1020 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
     f5c:	f5 01       	movw	r30, r10
     f5e:	40 81       	ld	r20, Z
     f60:	51 81       	ldd	r21, Z+1	; 0x01
     f62:	41 15       	cp	r20, r1
     f64:	51 05       	cpc	r21, r1
     f66:	39 f4       	brne	.+14     	; 0xf76 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
     f68:	f6 01       	movw	r30, r12
     f6a:	40 81       	ld	r20, Z
     f6c:	51 81       	ldd	r21, Z+1	; 0x01
     f6e:	41 15       	cp	r20, r1
     f70:	51 05       	cpc	r21, r1
     f72:	79 f4       	brne	.+30     	; 0xf92 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
     f74:	42 cf       	rjmp	.-380    	; 0xdfa <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     f76:	f7 01       	movw	r30, r14
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	00 e1       	ldi	r16, 0x10	; 16
     f7e:	17 e2       	ldi	r17, 0x27	; 39
     f80:	66 ee       	ldi	r22, 0xE6	; 230
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     f8a:	81 11       	cpse	r24, r1
     f8c:	ed cf       	rjmp	.-38     	; 0xf68 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
     f8e:	87 e0       	ldi	r24, 0x07	; 7
     f90:	50 c0       	rjmp	.+160    	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     f92:	f7 01       	movw	r30, r14
     f94:	20 81       	ld	r18, Z
     f96:	31 81       	ldd	r19, Z+1	; 0x01
     f98:	00 e1       	ldi	r16, 0x10	; 16
     f9a:	17 e2       	ldi	r17, 0x27	; 39
     f9c:	62 ed       	ldi	r22, 0xD2	; 210
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	ce 01       	movw	r24, r28
     fa2:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     fa6:	81 11       	cpse	r24, r1
     fa8:	28 cf       	rjmp	.-432    	; 0xdfa <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     faa:	88 e0       	ldi	r24, 0x08	; 8
     fac:	42 c0       	rjmp	.+132    	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     fae:	f7 01       	movw	r30, r14
     fb0:	40 81       	ld	r20, Z
     fb2:	51 81       	ldd	r21, Z+1	; 0x01
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	6c eb       	ldi	r22, 0xBC	; 188
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	ce 01       	movw	r24, r28
     fbe:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fc2:	88 23       	and	r24, r24
     fc4:	79 f1       	breq	.+94     	; 0x1024 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
     fc6:	87 2d       	mov	r24, r7
     fc8:	34 c0       	rjmp	.+104    	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     fca:	44 eb       	ldi	r20, 0xB4	; 180
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	69 ea       	ldi	r22, 0xA9	; 169
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fd6:	88 23       	and	r24, r24
     fd8:	39 f1       	breq	.+78     	; 0x1028 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
     fda:	8e 01       	movw	r16, r28
     fdc:	05 5e       	subi	r16, 0xE5	; 229
     fde:	1e 4f       	sbci	r17, 0xFE	; 254
     fe0:	f8 01       	movw	r30, r16
     fe2:	40 81       	ld	r20, Z
     fe4:	51 81       	ldd	r21, Z+1	; 0x01
     fe6:	20 e1       	ldi	r18, 0x10	; 16
     fe8:	37 e2       	ldi	r19, 0x27	; 39
     fea:	6c e9       	ldi	r22, 0x9C	; 156
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ff4:	88 23       	and	r24, r24
     ff6:	d1 f0       	breq	.+52     	; 0x102c <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
     ff8:	f8 01       	movw	r30, r16
     ffa:	40 81       	ld	r20, Z
     ffc:	51 81       	ldd	r21, Z+1	; 0x01
     ffe:	20 e1       	ldi	r18, 0x10	; 16
    1000:	37 e2       	ldi	r19, 0x27	; 39
    1002:	61 e9       	ldi	r22, 0x91	; 145
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    100c:	88 23       	and	r24, r24
    100e:	81 f0       	breq	.+32     	; 0x1030 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1018:	84 e0       	ldi	r24, 0x04	; 4
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    101c:	85 e0       	ldi	r24, 0x05	; 5
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1024:	8a e0       	ldi	r24, 0x0A	; 10
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1028:	8b e0       	ldi	r24, 0x0B	; 11
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    102c:	8c e0       	ldi	r24, 0x0C	; 12
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1030:	8d e0       	ldi	r24, 0x0D	; 13
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	9f 90       	pop	r9
    1048:	8f 90       	pop	r8
    104a:	7f 90       	pop	r7
    104c:	08 95       	ret

0000104e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	5b 01       	movw	r10, r22
    1062:	6a 01       	movw	r12, r20
    1064:	e2 2e       	mov	r14, r18
    1066:	0f 96       	adiw	r24, 0x0f	; 15
    1068:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strstr_P>
    106c:	ec 01       	movw	r28, r24
    106e:	89 2b       	or	r24, r25
    1070:	c1 f0       	breq	.+48     	; 0x10a2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1072:	c5 01       	movw	r24, r10
    1074:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__strlen_P>
    1078:	8c 0f       	add	r24, r28
    107a:	9d 1f       	adc	r25, r29
    107c:	c0 e0       	ldi	r28, 0x00	; 0
    107e:	f1 2c       	mov	r15, r1
    1080:	c0 17       	cp	r28, r16
    1082:	41 f0       	breq	.+16     	; 0x1094 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1084:	b7 01       	movw	r22, r14
    1086:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <strchr>
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	51 f0       	breq	.+20     	; 0x10a2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	cf 5f       	subi	r28, 0xFF	; 255
    1092:	f6 cf       	rjmp	.-20     	; 0x1080 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1094:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <atoi>
    1098:	f6 01       	movw	r30, r12
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	08 95       	ret

000010b8 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
    10cc:	6a 01       	movw	r12, r20
    10ce:	59 01       	movw	r10, r18
    10d0:	10 2f       	mov	r17, r16
    10d2:	0e 2d       	mov	r16, r14
    10d4:	44 ef       	ldi	r20, 0xF4	; 244
    10d6:	51 e0       	ldi	r21, 0x01	; 1
    10d8:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    10dc:	21 2f       	mov	r18, r17
    10de:	a5 01       	movw	r20, r10
    10e0:	b6 01       	movw	r22, r12
    10e2:	ce 01       	movw	r24, r28
    10e4:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    10e8:	18 2f       	mov	r17, r24
    10ea:	88 23       	and	r24, r24
    10ec:	31 f0       	breq	.+12     	; 0x10fa <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	64 ef       	ldi	r22, 0xF4	; 244
    10f2:	71 e0       	ldi	r23, 0x01	; 1
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 23 04 	call	0x846	; 0x846 <_ZN13Adafruit_FONA8readlineEjb>
    10fa:	81 2f       	mov	r24, r17
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	08 95       	ret

00001110 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	28 97       	sbiw	r28, 0x08	; 8
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1132:	18 86       	std	Y+8, r1	; 0x08
    1134:	1f 82       	std	Y+7, r1	; 0x07
    1136:	1e 82       	std	Y+6, r1	; 0x06
    1138:	1d 82       	std	Y+5, r1	; 0x05
    113a:	1c 82       	std	Y+4, r1	; 0x04
    113c:	1b 82       	std	Y+3, r1	; 0x03
    113e:	1a 82       	std	Y+2, r1	; 0x02
    1140:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1142:	e1 2c       	mov	r14, r1
    1144:	0c e2       	ldi	r16, 0x2C	; 44
    1146:	9e 01       	movw	r18, r28
    1148:	29 5f       	subi	r18, 0xF9	; 249
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	4d e9       	ldi	r20, 0x9D	; 157
    114e:	51 e0       	ldi	r21, 0x01	; 1
    1150:	66 e9       	ldi	r22, 0x96	; 150
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1158:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    115a:	ee 24       	eor	r14, r14
    115c:	e3 94       	inc	r14
    115e:	9e 01       	movw	r18, r28
    1160:	2b 5f       	subi	r18, 0xFB	; 251
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	4f e8       	ldi	r20, 0x8F	; 143
    1166:	51 e0       	ldi	r21, 0x01	; 1
    1168:	68 e8       	ldi	r22, 0x88	; 136
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	c6 01       	movw	r24, r12
    116e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1172:	88 23       	and	r24, r24
    1174:	19 f0       	breq	.+6      	; 0x117c <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	f8 26       	eor	r15, r24
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    117c:	ff 24       	eor	r15, r15
    117e:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1180:	e1 2c       	mov	r14, r1
    1182:	0c e2       	ldi	r16, 0x2C	; 44
    1184:	9e 01       	movw	r18, r28
    1186:	2d 5f       	subi	r18, 0xFD	; 253
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	51 e0       	ldi	r21, 0x01	; 1
    118e:	67 e7       	ldi	r22, 0x77	; 119
    1190:	71 e0       	ldi	r23, 0x01	; 1
    1192:	c6 01       	movw	r24, r12
    1194:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1198:	88 23       	and	r24, r24
    119a:	11 f0       	breq	.+4      	; 0x11a0 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    119c:	1b 81       	ldd	r17, Y+3	; 0x03
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    11a0:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    11a2:	ee 24       	eor	r14, r14
    11a4:	e3 94       	inc	r14
    11a6:	0c e2       	ldi	r16, 0x2C	; 44
    11a8:	9e 01       	movw	r18, r28
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	4f e6       	ldi	r20, 0x6F	; 111
    11b0:	51 e0       	ldi	r21, 0x01	; 1
    11b2:	66 e6       	ldi	r22, 0x66	; 102
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	c6 01       	movw	r24, r12
    11b8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    11bc:	81 11       	cpse	r24, r1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    11c0:	91 2f       	mov	r25, r17
    11c2:	90 62       	ori	r25, 0x20	; 32
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    11c6:	99 81       	ldd	r25, Y+1	; 0x01
    11c8:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    11ca:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    11cc:	6f 81       	ldd	r22, Y+7	; 0x07
}
    11ce:	8f 2d       	mov	r24, r15
    11d0:	28 96       	adiw	r28, 0x08	; 8
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	08 95       	ret

000011ee <_ZN10GsmPayloadC1Ev>:
#include "GsmPayload.h"

// default constructor
GsmPayload::GsmPayload()
    11ee:	fc 01       	movw	r30, r24
    11f0:	10 82       	st	Z, r1
    11f2:	12 82       	std	Z+2, r1	; 0x02
    11f4:	11 82       	std	Z+1, r1	; 0x01
    11f6:	13 82       	std	Z+3, r1	; 0x03
    11f8:	14 82       	std	Z+4, r1	; 0x04
    11fa:	15 82       	std	Z+5, r1	; 0x05
    11fc:	17 82       	std	Z+7, r1	; 0x07
    11fe:	11 86       	std	Z+9, r1	; 0x09
    1200:	10 86       	std	Z+8, r1	; 0x08
    1202:	13 86       	std	Z+11, r1	; 0x0b
    1204:	12 86       	std	Z+10, r1	; 0x0a
    1206:	14 86       	std	Z+12, r1	; 0x0c
    1208:	08 95       	ret

0000120a <_ZN10GsmPayload10getPayloadEPcj>:

//TODO: Verify this all works with uint8_t* - even if it's a single byte of 255

void GsmPayload::getPayload(char* output, uint16_t maxLength){
	
	output[0] = moduleId;
    120a:	fc 01       	movw	r30, r24
    120c:	20 81       	ld	r18, Z
    120e:	fb 01       	movw	r30, r22
    1210:	20 83       	st	Z, r18
	output[1] = thisBootNumber;
    1212:	fc 01       	movw	r30, r24
    1214:	81 81       	ldd	r24, Z+1	; 0x01
    1216:	fb 01       	movw	r30, r22
    1218:	81 83       	std	Z+1, r24	; 0x01
    121a:	08 95       	ret

0000121c <_ZN10GsmPayload13addSensorDataEP10SensorDatah>:
	
}

void GsmPayload::addSensorData(SensorData* dataArr, uint8_t arraySz){

	_dataArr = dataArr;
    121c:	fc 01       	movw	r30, r24
    121e:	73 87       	std	Z+11, r23	; 0x0b
    1220:	62 87       	std	Z+10, r22	; 0x0a
	_dataArrSz = arraySz;	
    1222:	44 87       	std	Z+12, r20	; 0x0c
    1224:	08 95       	ret

00001226 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24
    122c:	63 e9       	ldi	r22, 0x93	; 147
    122e:	72 e0       	ldi	r23, 0x02	; 2
    1230:	87 e8       	ldi	r24, 0x87	; 135
    1232:	94 e0       	ldi	r25, 0x04	; 4
    1234:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1238:	4a e0       	ldi	r20, 0x0A	; 10
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	68 81       	ld	r22, Y
    123e:	87 e8       	ldi	r24, 0x87	; 135
    1240:	94 e0       	ldi	r25, 0x04	; 4
    1242:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_ZN5Print5printEhi>
    1246:	6f e8       	ldi	r22, 0x8F	; 143
    1248:	72 e0       	ldi	r23, 0x02	; 2
    124a:	87 e8       	ldi	r24, 0x87	; 135
    124c:	94 e0       	ldi	r25, 0x04	; 4
    124e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1252:	6a e8       	ldi	r22, 0x8A	; 138
    1254:	72 e0       	ldi	r23, 0x02	; 2
    1256:	87 e8       	ldi	r24, 0x87	; 135
    1258:	94 e0       	ldi	r25, 0x04	; 4
    125a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    125e:	4a e0       	ldi	r20, 0x0A	; 10
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	87 e8       	ldi	r24, 0x87	; 135
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_ZN5Print5printEhi>
    126c:	66 e8       	ldi	r22, 0x86	; 134
    126e:	72 e0       	ldi	r23, 0x02	; 2
    1270:	87 e8       	ldi	r24, 0x87	; 135
    1272:	94 e0       	ldi	r25, 0x04	; 4
    1274:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1278:	61 e7       	ldi	r22, 0x71	; 113
    127a:	72 e0       	ldi	r23, 0x02	; 2
    127c:	87 e8       	ldi	r24, 0x87	; 135
    127e:	94 e0       	ldi	r25, 0x04	; 4
    1280:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1284:	6b 81       	ldd	r22, Y+3	; 0x03
    1286:	63 70       	andi	r22, 0x03	; 3
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	4a e0       	ldi	r20, 0x0A	; 10
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	87 e8       	ldi	r24, 0x87	; 135
    1290:	94 e0       	ldi	r25, 0x04	; 4
    1292:	0e 94 6e 17 	call	0x2edc	; 0x2edc <_ZN5Print5printEii>
    1296:	67 e6       	ldi	r22, 0x67	; 103
    1298:	72 e0       	ldi	r23, 0x02	; 2
    129a:	87 e8       	ldi	r24, 0x87	; 135
    129c:	94 e0       	ldi	r25, 0x04	; 4
    129e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    12a2:	6b 81       	ldd	r22, Y+3	; 0x03
    12a4:	6c 71       	andi	r22, 0x1C	; 28
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	75 95       	asr	r23
    12aa:	67 95       	ror	r22
    12ac:	75 95       	asr	r23
    12ae:	67 95       	ror	r22
    12b0:	4a e0       	ldi	r20, 0x0A	; 10
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	87 e8       	ldi	r24, 0x87	; 135
    12b6:	94 e0       	ldi	r25, 0x04	; 4
    12b8:	0e 94 6e 17 	call	0x2edc	; 0x2edc <_ZN5Print5printEii>
    12bc:	6e e5       	ldi	r22, 0x5E	; 94
    12be:	72 e0       	ldi	r23, 0x02	; 2
    12c0:	87 e8       	ldi	r24, 0x87	; 135
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    12c4:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    12c8:	6b 81       	ldd	r22, Y+3	; 0x03
    12ca:	65 fb       	bst	r22, 5
    12cc:	66 27       	eor	r22, r22
    12ce:	60 f9       	bld	r22, 0
    12d0:	4a e0       	ldi	r20, 0x0A	; 10
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	87 e8       	ldi	r24, 0x87	; 135
    12d8:	94 e0       	ldi	r25, 0x04	; 4
    12da:	0e 94 6e 17 	call	0x2edc	; 0x2edc <_ZN5Print5printEii>
    12de:	6a e5       	ldi	r22, 0x5A	; 90
    12e0:	72 e0       	ldi	r23, 0x02	; 2
    12e2:	87 e8       	ldi	r24, 0x87	; 135
    12e4:	94 e0       	ldi	r25, 0x04	; 4
    12e6:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    12ea:	6d e4       	ldi	r22, 0x4D	; 77
    12ec:	72 e0       	ldi	r23, 0x02	; 2
    12ee:	87 e8       	ldi	r24, 0x87	; 135
    12f0:	94 e0       	ldi	r25, 0x04	; 4
    12f2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    12f6:	4a e0       	ldi	r20, 0x0A	; 10
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	6a 81       	ldd	r22, Y+2	; 0x02
    12fc:	87 e8       	ldi	r24, 0x87	; 135
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <_ZN5Print7printlnEhi>

00001308 <_ZN7Helpers15printSensorDataEP10SensorData>:
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
    130e:	65 e4       	ldi	r22, 0x45	; 69
    1310:	72 e0       	ldi	r23, 0x02	; 2
    1312:	87 e8       	ldi	r24, 0x87	; 135
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    131a:	69 81       	ldd	r22, Y+1	; 0x01
    131c:	7a 81       	ldd	r23, Y+2	; 0x02
    131e:	4a e0       	ldi	r20, 0x0A	; 10
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	87 e8       	ldi	r24, 0x87	; 135
    1324:	94 e0       	ldi	r25, 0x04	; 4
    1326:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEji>
    132a:	61 e4       	ldi	r22, 0x41	; 65
    132c:	72 e0       	ldi	r23, 0x02	; 2
    132e:	87 e8       	ldi	r24, 0x87	; 135
    1330:	94 e0       	ldi	r25, 0x04	; 4
    1332:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1336:	6b e3       	ldi	r22, 0x3B	; 59
    1338:	72 e0       	ldi	r23, 0x02	; 2
    133a:	87 e8       	ldi	r24, 0x87	; 135
    133c:	94 e0       	ldi	r25, 0x04	; 4
    133e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1342:	6d 81       	ldd	r22, Y+5	; 0x05
    1344:	7e 81       	ldd	r23, Y+6	; 0x06
    1346:	4a e0       	ldi	r20, 0x0A	; 10
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	87 e8       	ldi	r24, 0x87	; 135
    134c:	94 e0       	ldi	r25, 0x04	; 4
    134e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEji>
    1352:	67 e3       	ldi	r22, 0x37	; 55
    1354:	72 e0       	ldi	r23, 0x02	; 2
    1356:	87 e8       	ldi	r24, 0x87	; 135
    1358:	94 e0       	ldi	r25, 0x04	; 4
    135a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    135e:	6e e2       	ldi	r22, 0x2E	; 46
    1360:	72 e0       	ldi	r23, 0x02	; 2
    1362:	87 e8       	ldi	r24, 0x87	; 135
    1364:	94 e0       	ldi	r25, 0x04	; 4
    1366:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    136a:	6b 81       	ldd	r22, Y+3	; 0x03
    136c:	7c 81       	ldd	r23, Y+4	; 0x04
    136e:	4a e0       	ldi	r20, 0x0A	; 10
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	87 e8       	ldi	r24, 0x87	; 135
    1374:	94 e0       	ldi	r25, 0x04	; 4
    1376:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEji>
    137a:	6a e2       	ldi	r22, 0x2A	; 42
    137c:	72 e0       	ldi	r23, 0x02	; 2
    137e:	87 e8       	ldi	r24, 0x87	; 135
    1380:	94 e0       	ldi	r25, 0x04	; 4
    1382:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1386:	64 e2       	ldi	r22, 0x24	; 36
    1388:	72 e0       	ldi	r23, 0x02	; 2
    138a:	87 e8       	ldi	r24, 0x87	; 135
    138c:	94 e0       	ldi	r25, 0x04	; 4
    138e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1392:	6f 81       	ldd	r22, Y+7	; 0x07
    1394:	78 85       	ldd	r23, Y+8	; 0x08
    1396:	4a e0       	ldi	r20, 0x0A	; 10
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	87 e8       	ldi	r24, 0x87	; 135
    139c:	94 e0       	ldi	r25, 0x04	; 4
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <_ZN5Print7printlnEji>

000013a6 <_ZN7Helpers14base64_enc_lenEi>:
    13a6:	9c 01       	movw	r18, r24
    13a8:	2e 5f       	subi	r18, 0xFE	; 254
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	e3 e0       	ldi	r30, 0x03	; 3
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	c9 01       	movw	r24, r18
    13b2:	bf 01       	movw	r22, r30
    13b4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__divmodhi4>
    13b8:	a9 01       	movw	r20, r18
    13ba:	48 1b       	sub	r20, r24
    13bc:	59 0b       	sbc	r21, r25
    13be:	ca 01       	movw	r24, r20
    13c0:	bf 01       	movw	r22, r30
    13c2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__divmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	08 95       	ret

000013d2 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(unsigned char * a4, unsigned char * a3) {
    13d2:	dc 01       	movw	r26, r24
    13d4:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    13d6:	80 81       	ld	r24, Z
    13d8:	86 95       	lsr	r24
    13da:	86 95       	lsr	r24
    13dc:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    13de:	80 81       	ld	r24, Z
    13e0:	83 70       	andi	r24, 0x03	; 3
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	92 95       	swap	r25
    13e6:	9f 70       	andi	r25, 0x0F	; 15
    13e8:	20 e1       	ldi	r18, 0x10	; 16
    13ea:	82 9f       	mul	r24, r18
    13ec:	90 0d       	add	r25, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	11 96       	adiw	r26, 0x01	; 1
    13f2:	9c 93       	st	X, r25
    13f4:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	9f 70       	andi	r25, 0x0F	; 15
    13fa:	99 0f       	add	r25, r25
    13fc:	99 0f       	add	r25, r25
    13fe:	22 81       	ldd	r18, Z+2	; 0x02
    1400:	22 95       	swap	r18
    1402:	26 95       	lsr	r18
    1404:	26 95       	lsr	r18
    1406:	23 70       	andi	r18, 0x03	; 3
    1408:	92 0f       	add	r25, r18
    140a:	12 96       	adiw	r26, 0x02	; 2
    140c:	9c 93       	st	X, r25
    140e:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	8f 73       	andi	r24, 0x3F	; 63
    1414:	13 96       	adiw	r26, 0x03	; 3
    1416:	8c 93       	st	X, r24
    1418:	08 95       	ret

0000141a <_ZN7Helpers13base64_encodeEPcS0_i>:
inline void a3_to_a4(unsigned char * a4, unsigned char * a3);
inline void a4_to_a3(unsigned char * a3, unsigned char * a4);
inline unsigned char b64_lookup(char c);

/* Note: Trailing 0s for strings shouldn't be included in the length */
int Helpers::base64_encode(char *output, char *input, int inputLen) {
    141a:	6f 92       	push	r6
    141c:	7f 92       	push	r7
    141e:	8f 92       	push	r8
    1420:	9f 92       	push	r9
    1422:	af 92       	push	r10
    1424:	bf 92       	push	r11
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	27 97       	sbiw	r28, 0x07	; 7
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	6c 01       	movw	r12, r24
    1448:	5b 01       	movw	r10, r22
    144a:	3b 01       	movw	r6, r22
    144c:	64 0e       	add	r6, r20
    144e:	75 1e       	adc	r7, r21
	int i = 0, j = 0;
	int encLen = 0;
    1450:	e1 2c       	mov	r14, r1
    1452:	f1 2c       	mov	r15, r1
inline void a4_to_a3(unsigned char * a3, unsigned char * a4);
inline unsigned char b64_lookup(char c);

/* Note: Trailing 0s for strings shouldn't be included in the length */
int Helpers::base64_encode(char *output, char *input, int inputLen) {
	int i = 0, j = 0;
    1454:	00 e0       	ldi	r16, 0x00	; 0
    1456:	10 e0       	ldi	r17, 0x00	; 0
	int encLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1458:	4e 01       	movw	r8, r28
    145a:	85 e0       	ldi	r24, 0x05	; 5
    145c:	88 0e       	add	r8, r24
    145e:	91 1c       	adc	r9, r1
	int i = 0, j = 0;
	int encLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];

	while(inputLen--) {
    1460:	6a 14       	cp	r6, r10
    1462:	7b 04       	cpc	r7, r11
    1464:	49 f1       	breq	.+82     	; 0x14b8 <_ZN7Helpers13base64_encodeEPcS0_i+0x9e>
		a3[i++] = *(input++);
    1466:	c8 01       	movw	r24, r16
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	f5 01       	movw	r30, r10
    146c:	21 91       	ld	r18, Z+
    146e:	5f 01       	movw	r10, r30
    1470:	f4 01       	movw	r30, r8
    1472:	e0 0f       	add	r30, r16
    1474:	f1 1f       	adc	r31, r17
    1476:	20 83       	st	Z, r18
		if(i == 3) {
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	11 f0       	breq	.+4      	; 0x1482 <_ZN7Helpers13base64_encodeEPcS0_i+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    147e:	8c 01       	movw	r16, r24
    1480:	ef cf       	rjmp	.-34     	; 0x1460 <_ZN7Helpers13base64_encodeEPcS0_i+0x46>
	unsigned char a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1482:	b4 01       	movw	r22, r8
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_Z8a3_to_a4PhS_>
    148c:	de 01       	movw	r26, r28
    148e:	11 96       	adiw	r26, 0x01	; 1
    1490:	c6 01       	movw	r24, r12
    1492:	8e 0d       	add	r24, r14
    1494:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1496:	ed 91       	ld	r30, X+
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	e7 56       	subi	r30, 0x67	; 103
    149c:	fd 4f       	sbci	r31, 0xFD	; 253
    149e:	24 91       	lpm	r18, Z
    14a0:	fc 01       	movw	r30, r24
    14a2:	21 93       	st	Z+, r18
    14a4:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    14a6:	a8 15       	cp	r26, r8
    14a8:	b9 05       	cpc	r27, r9
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <_ZN7Helpers13base64_encodeEPcS0_i+0x7c>
    14ac:	f4 e0       	ldi	r31, 0x04	; 4
    14ae:	ef 0e       	add	r14, r31
    14b0:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	e3 cf       	rjmp	.-58     	; 0x147e <_ZN7Helpers13base64_encodeEPcS0_i+0x64>
		}
	}

	if(i) {
    14b8:	01 15       	cp	r16, r1
    14ba:	11 05       	cpc	r17, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <_ZN7Helpers13base64_encodeEPcS0_i+0xa6>
    14be:	3c c0       	rjmp	.+120    	; 0x1538 <_ZN7Helpers13base64_encodeEPcS0_i+0x11e>
    14c0:	be 01       	movw	r22, r28
    14c2:	6b 5f       	subi	r22, 0xFB	; 251
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	fb 01       	movw	r30, r22
    14c8:	e0 0f       	add	r30, r16
    14ca:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    14cc:	cf 01       	movw	r24, r30
    14ce:	86 1b       	sub	r24, r22
    14d0:	97 0b       	sbc	r25, r23
    14d2:	03 97       	sbiw	r24, 0x03	; 3
    14d4:	14 f4       	brge	.+4      	; 0x14da <_ZN7Helpers13base64_encodeEPcS0_i+0xc0>
			a3[j] = '\0';
    14d6:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    14d8:	f9 cf       	rjmp	.-14     	; 0x14cc <_ZN7Helpers13base64_encodeEPcS0_i+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    14da:	ce 01       	movw	r24, r28
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	5c 01       	movw	r10, r24
    14e0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_Z8a3_to_a4PhS_>
    14e4:	c6 01       	movw	r24, r12
    14e6:	8e 0d       	add	r24, r14
    14e8:	9f 1d       	adc	r25, r15
    14ea:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    14ec:	ed 91       	ld	r30, X+
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	e7 56       	subi	r30, 0x67	; 103
    14f2:	fd 4f       	sbci	r31, 0xFD	; 253
    14f4:	24 91       	lpm	r18, Z
    14f6:	fc 01       	movw	r30, r24
    14f8:	21 93       	st	Z+, r18
    14fa:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    14fc:	9d 01       	movw	r18, r26
    14fe:	2a 19       	sub	r18, r10
    1500:	3b 09       	sbc	r19, r11
    1502:	02 17       	cp	r16, r18
    1504:	13 07       	cpc	r17, r19
    1506:	94 f7       	brge	.-28     	; 0x14ec <_ZN7Helpers13base64_encodeEPcS0_i+0xd2>
    1508:	ff ef       	ldi	r31, 0xFF	; 255
    150a:	ef 1a       	sub	r14, r31
    150c:	ff 0a       	sbc	r15, r31
    150e:	e0 0e       	add	r14, r16
    1510:	f1 1e       	adc	r15, r17
    1512:	f6 01       	movw	r30, r12
    1514:	ee 0d       	add	r30, r14
    1516:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1518:	0c 19       	sub	r16, r12
    151a:	1d 09       	sbc	r17, r13
    151c:	0e 19       	sub	r16, r14
    151e:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1520:	8d e3       	ldi	r24, 0x3D	; 61
    1522:	7f 01       	movw	r14, r30
    1524:	ec 18       	sub	r14, r12
    1526:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1528:	98 01       	movw	r18, r16
    152a:	2e 0f       	add	r18, r30
    152c:	3f 1f       	adc	r19, r31
    152e:	23 30       	cpi	r18, 0x03	; 3
    1530:	31 05       	cpc	r19, r1
    1532:	14 f4       	brge	.+4      	; 0x1538 <_ZN7Helpers13base64_encodeEPcS0_i+0x11e>
			output[encLen++] = '=';
    1534:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1536:	f5 cf       	rjmp	.-22     	; 0x1522 <_ZN7Helpers13base64_encodeEPcS0_i+0x108>
			output[encLen++] = '=';
		}
	}
	output[encLen] = '\0';
    1538:	f6 01       	movw	r30, r12
    153a:	ee 0d       	add	r30, r14
    153c:	ff 1d       	adc	r31, r15
    153e:	10 82       	st	Z, r1
	return encLen;
}
    1540:	c7 01       	movw	r24, r14
    1542:	27 96       	adiw	r28, 0x07	; 7
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	df 90       	pop	r13
    155c:	cf 90       	pop	r12
    155e:	bf 90       	pop	r11
    1560:	af 90       	pop	r10
    1562:	9f 90       	pop	r9
    1564:	8f 90       	pop	r8
    1566:	7f 90       	pop	r7
    1568:	6f 90       	pop	r6
    156a:	08 95       	ret

0000156c <_Z8a4_to_a3PhS_>:
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(unsigned char * a3, unsigned char * a4) {
    156c:	dc 01       	movw	r26, r24
    156e:	fb 01       	movw	r30, r22
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	90 73       	andi	r25, 0x30	; 48
    1574:	92 95       	swap	r25
    1576:	9f 70       	andi	r25, 0x0F	; 15
    1578:	20 81       	ld	r18, Z
    157a:	22 0f       	add	r18, r18
    157c:	22 0f       	add	r18, r18
    157e:	92 0f       	add	r25, r18
    1580:	9c 93       	st	X, r25
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
    1582:	92 81       	ldd	r25, Z+2	; 0x02
    1584:	9c 73       	andi	r25, 0x3C	; 60
    1586:	96 95       	lsr	r25
    1588:	96 95       	lsr	r25
    158a:	81 81       	ldd	r24, Z+1	; 0x01
    158c:	20 e1       	ldi	r18, 0x10	; 16
    158e:	82 9f       	mul	r24, r18
    1590:	90 0d       	add	r25, r0
    1592:	11 24       	eor	r1, r1
    1594:	11 96       	adiw	r26, 0x01	; 1
    1596:	9c 93       	st	X, r25
    1598:	11 97       	sbiw	r26, 0x01	; 1
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
    159a:	92 81       	ldd	r25, Z+2	; 0x02
    159c:	83 81       	ldd	r24, Z+3	; 0x03
    159e:	20 e4       	ldi	r18, 0x40	; 64
    15a0:	92 9f       	mul	r25, r18
    15a2:	80 0d       	add	r24, r0
    15a4:	11 24       	eor	r1, r1
    15a6:	12 96       	adiw	r26, 0x02	; 2
    15a8:	8c 93       	st	X, r24
    15aa:	08 95       	ret

000015ac <_Z10b64_lookupc>:
}

inline unsigned char b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
    15ac:	9f eb       	ldi	r25, 0xBF	; 191
    15ae:	98 0f       	add	r25, r24
    15b0:	9a 31       	cpi	r25, 0x1A	; 26
    15b2:	90 f0       	brcs	.+36     	; 0x15d8 <_Z10b64_lookupc+0x2c>
	if(c >='a' && c <='z') return c - 71;
    15b4:	9f e9       	ldi	r25, 0x9F	; 159
    15b6:	98 0f       	add	r25, r24
    15b8:	9a 31       	cpi	r25, 0x1A	; 26
    15ba:	10 f4       	brcc	.+4      	; 0x15c0 <_Z10b64_lookupc+0x14>
    15bc:	87 54       	subi	r24, 0x47	; 71
    15be:	08 95       	ret
	if(c >='0' && c <='9') return c + 4;
    15c0:	90 ed       	ldi	r25, 0xD0	; 208
    15c2:	98 0f       	add	r25, r24
    15c4:	9a 30       	cpi	r25, 0x0A	; 10
    15c6:	10 f4       	brcc	.+4      	; 0x15cc <_Z10b64_lookupc+0x20>
    15c8:	8c 5f       	subi	r24, 0xFC	; 252
    15ca:	08 95       	ret
	if(c == '+') return 62;
    15cc:	8b 32       	cpi	r24, 0x2B	; 43
    15ce:	31 f0       	breq	.+12     	; 0x15dc <_Z10b64_lookupc+0x30>
	if(c == '/') return 63;
    15d0:	8f 32       	cpi	r24, 0x2F	; 47
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <_Z10b64_lookupc+0x34>
	return -1;
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	08 95       	ret
    15d8:	89 2f       	mov	r24, r25
    15da:	08 95       	ret

inline unsigned char b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
    15dc:	8e e3       	ldi	r24, 0x3E	; 62
    15de:	08 95       	ret
	if(c == '/') return 63;
    15e0:	8f e3       	ldi	r24, 0x3F	; 63
	return -1;
}
    15e2:	08 95       	ret

000015e4 <_ZN7Helpers13base64_decodeEPcS0_i>:
	output[encLen] = '\0';
	return encLen;
}

/* Note: Trailing 0s for strings shouldn't be included in the length */
int Helpers::base64_decode(char * output, char * input, int inputLen) {
    15e4:	4f 92       	push	r4
    15e6:	5f 92       	push	r5
    15e8:	6f 92       	push	r6
    15ea:	7f 92       	push	r7
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	27 97       	sbiw	r28, 0x07	; 7
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	3c 01       	movw	r6, r24
    1616:	7b 01       	movw	r14, r22
    1618:	2b 01       	movw	r4, r22
    161a:	44 0e       	add	r4, r20
    161c:	55 1e       	adc	r5, r21
	int i = 0, j = 0;
	int decLen = 0;
    161e:	c1 2c       	mov	r12, r1
    1620:	d1 2c       	mov	r13, r1
	return encLen;
}

/* Note: Trailing 0s for strings shouldn't be included in the length */
int Helpers::base64_decode(char * output, char * input, int inputLen) {
	int i = 0, j = 0;
    1622:	00 e0       	ldi	r16, 0x00	; 0
    1624:	10 e0       	ldi	r17, 0x00	; 0
    1626:	5e 01       	movw	r10, r28
    1628:	85 e0       	ldi	r24, 0x05	; 5
    162a:	a8 0e       	add	r10, r24
    162c:	b1 1c       	adc	r11, r1
    162e:	4e 01       	movw	r8, r28
    1630:	98 e0       	ldi	r25, 0x08	; 8
    1632:	89 0e       	add	r8, r25
    1634:	91 1c       	adc	r9, r1
	int decLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];


	while (inputLen--) {
    1636:	e4 14       	cp	r14, r4
    1638:	f5 04       	cpc	r15, r5
    163a:	a9 f1       	breq	.+106    	; 0x16a6 <_ZN7Helpers13base64_decodeEPcS0_i+0xc2>
		if(*input == '=') {
    163c:	f7 01       	movw	r30, r14
    163e:	21 91       	ld	r18, Z+
    1640:	7f 01       	movw	r14, r30
    1642:	2d 33       	cpi	r18, 0x3D	; 61
    1644:	81 f1       	breq	.+96     	; 0x16a6 <_ZN7Helpers13base64_decodeEPcS0_i+0xc2>
			break;
		}

		a4[i++] = *(input++);
    1646:	c8 01       	movw	r24, r16
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	e1 e0       	ldi	r30, 0x01	; 1
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	ec 0f       	add	r30, r28
    1650:	fd 1f       	adc	r31, r29
    1652:	e0 0f       	add	r30, r16
    1654:	f1 1f       	adc	r31, r17
    1656:	20 83       	st	Z, r18
		if (i == 4) {
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	91 05       	cpc	r25, r1
    165c:	11 f0       	breq	.+4      	; 0x1662 <_ZN7Helpers13base64_decodeEPcS0_i+0x7e>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
    165e:	8c 01       	movw	r16, r24
    1660:	ea cf       	rjmp	.-44     	; 0x1636 <_ZN7Helpers13base64_decodeEPcS0_i+0x52>
    1662:	8e 01       	movw	r16, r28
    1664:	0f 5f       	subi	r16, 0xFF	; 255
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
    1668:	f8 01       	movw	r30, r16
    166a:	80 81       	ld	r24, Z
    166c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_Z10b64_lookupc>
    1670:	f8 01       	movw	r30, r16
    1672:	81 93       	st	Z+, r24
    1674:	8f 01       	movw	r16, r30
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
    1676:	ae 16       	cp	r10, r30
    1678:	bf 06       	cpc	r11, r31
    167a:	b1 f7       	brne	.-20     	; 0x1668 <_ZN7Helpers13base64_decodeEPcS0_i+0x84>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
    167c:	be 01       	movw	r22, r28
    167e:	6f 5f       	subi	r22, 0xFF	; 255
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	c5 01       	movw	r24, r10
    1684:	0e 94 b6 0a 	call	0x156c	; 0x156c <_Z8a4_to_a3PhS_>
    1688:	f5 01       	movw	r30, r10
    168a:	d3 01       	movw	r26, r6
    168c:	ac 0d       	add	r26, r12
    168e:	bd 1d       	adc	r27, r13

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
    1690:	81 91       	ld	r24, Z+
    1692:	8d 93       	st	X+, r24
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
    1694:	e8 15       	cp	r30, r8
    1696:	f9 05       	cpc	r31, r9
    1698:	d9 f7       	brne	.-10     	; 0x1690 <_ZN7Helpers13base64_decodeEPcS0_i+0xac>
    169a:	f3 e0       	ldi	r31, 0x03	; 3
    169c:	cf 0e       	add	r12, r31
    169e:	d1 1c       	adc	r13, r1
				output[decLen++] = a3[i];
			}
			i = 0;
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	dc cf       	rjmp	.-72     	; 0x165e <_ZN7Helpers13base64_decodeEPcS0_i+0x7a>
		}
	}

	if (i) {
    16a6:	01 15       	cp	r16, r1
    16a8:	11 05       	cpc	r17, r1
    16aa:	99 f1       	breq	.+102    	; 0x1712 <_ZN7Helpers13base64_decodeEPcS0_i+0x12e>
    16ac:	ce 01       	movw	r24, r28
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	5c 01       	movw	r10, r24
    16b2:	fc 01       	movw	r30, r24
    16b4:	e0 0f       	add	r30, r16
    16b6:	f1 1f       	adc	r31, r17
    16b8:	75 01       	movw	r14, r10
		for (j = i; j < 4; j++) {
    16ba:	cf 01       	movw	r24, r30
    16bc:	8a 19       	sub	r24, r10
    16be:	9b 09       	sbc	r25, r11
    16c0:	04 97       	sbiw	r24, 0x04	; 4
    16c2:	14 f4       	brge	.+4      	; 0x16c8 <_ZN7Helpers13base64_decodeEPcS0_i+0xe4>
			a4[j] = '\0';
    16c4:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
    16c6:	f8 cf       	rjmp	.-16     	; 0x16b8 <_ZN7Helpers13base64_decodeEPcS0_i+0xd4>
    16c8:	4e 01       	movw	r8, r28
    16ca:	95 e0       	ldi	r25, 0x05	; 5
    16cc:	89 0e       	add	r8, r25
    16ce:	91 1c       	adc	r9, r1
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
    16d0:	f7 01       	movw	r30, r14
    16d2:	80 81       	ld	r24, Z
    16d4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_Z10b64_lookupc>
    16d8:	f7 01       	movw	r30, r14
    16da:	81 93       	st	Z+, r24
    16dc:	7f 01       	movw	r14, r30
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
    16de:	e8 15       	cp	r30, r8
    16e0:	f9 05       	cpc	r31, r9
    16e2:	b1 f7       	brne	.-20     	; 0x16d0 <_ZN7Helpers13base64_decodeEPcS0_i+0xec>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
    16e4:	b5 01       	movw	r22, r10
    16e6:	cf 01       	movw	r24, r30
    16e8:	0e 94 b6 0a 	call	0x156c	; 0x156c <_Z8a4_to_a3PhS_>
    16ec:	f7 01       	movw	r30, r14
    16ee:	96 01       	movw	r18, r12
    16f0:	d3 01       	movw	r26, r6
    16f2:	ac 0d       	add	r26, r12
    16f4:	bd 1d       	adc	r27, r13

		for (j = 0; j < i - 1; j++) {
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	01 50       	subi	r16, 0x01	; 1
    16fc:	11 09       	sbc	r17, r1
    16fe:	6c 01       	movw	r12, r24
    1700:	c2 0e       	add	r12, r18
    1702:	d3 1e       	adc	r13, r19
    1704:	80 17       	cp	r24, r16
    1706:	91 07       	cpc	r25, r17
    1708:	24 f4       	brge	.+8      	; 0x1712 <_ZN7Helpers13base64_decodeEPcS0_i+0x12e>
			output[decLen++] = a3[j];
    170a:	41 91       	ld	r20, Z+
    170c:	4d 93       	st	X+, r20
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	f6 cf       	rjmp	.-20     	; 0x16fe <_ZN7Helpers13base64_decodeEPcS0_i+0x11a>
			output[decLen++] = a3[j];
		}
	}
	output[decLen] = '\0';
    1712:	f3 01       	movw	r30, r6
    1714:	ec 0d       	add	r30, r12
    1716:	fd 1d       	adc	r31, r13
    1718:	10 82       	st	Z, r1
	return decLen;
}
    171a:	c6 01       	movw	r24, r12
    171c:	27 96       	adiw	r28, 0x07	; 7
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	bf 90       	pop	r11
    173a:	af 90       	pop	r10
    173c:	9f 90       	pop	r9
    173e:	8f 90       	pop	r8
    1740:	7f 90       	pop	r7
    1742:	6f 90       	pop	r6
    1744:	5f 90       	pop	r5
    1746:	4f 90       	pop	r4
    1748:	08 95       	ret

0000174a <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	2c 97       	sbiw	r28, 0x0c	; 12
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	08 2f       	mov	r16, r24
    1764:	62 e9       	ldi	r22, 0x92	; 146
    1766:	73 e0       	ldi	r23, 0x03	; 3
    1768:	87 e8       	ldi	r24, 0x87	; 135
    176a:	94 e0       	ldi	r25, 0x04	; 4
    176c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1770:	42 e0       	ldi	r20, 0x02	; 2
    1772:	63 e0       	ldi	r22, 0x03	; 3
    1774:	84 ea       	ldi	r24, 0xA4	; 164
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	0e 94 60 05 	call	0xac0	; 0xac0 <_ZN13Adafruit_FONA5beginEhh>
    177c:	18 2f       	mov	r17, r24
    177e:	8d ef       	ldi	r24, 0xFD	; 253
    1780:	81 0f       	add	r24, r17
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	b8 f4       	brcc	.+46     	; 0x17b4 <_Z21ensureFonaInitialisedb+0x6a>
    1786:	67 e7       	ldi	r22, 0x77	; 119
    1788:	73 e0       	ldi	r23, 0x03	; 3
    178a:	87 e8       	ldi	r24, 0x87	; 135
    178c:	94 e0       	ldi	r25, 0x04	; 4
    178e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1792:	66 e4       	ldi	r22, 0x46	; 70
    1794:	71 e0       	ldi	r23, 0x01	; 1
    1796:	87 e8       	ldi	r24, 0x87	; 135
    1798:	94 e0       	ldi	r25, 0x04	; 4
    179a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    179e:	61 2f       	mov	r22, r17
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	4a e0       	ldi	r20, 0x0A	; 10
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	87 e8       	ldi	r24, 0x87	; 135
    17a8:	94 e0       	ldi	r25, 0x04	; 4
    17aa:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>
    17ae:	00 e0       	ldi	r16, 0x00	; 0
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	4d c0       	rjmp	.+154    	; 0x184e <_Z21ensureFonaInitialisedb+0x104>
    17b4:	8c e9       	ldi	r24, 0x9C	; 156
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN12RmMemManager11getModuleIdEv>
    17bc:	68 2f       	mov	r22, r24
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	68 5b       	subi	r22, 0xB8	; 184
    17c2:	7e 4f       	sbci	r23, 0xFE	; 254
    17c4:	ce 01       	movw	r24, r28
    17c6:	07 96       	adiw	r24, 0x07	; 7
    17c8:	0e 94 8c 19 	call	0x3318	; 0x3318 <_ZN6StringC1EPKc>
    17cc:	be 01       	movw	r22, r28
    17ce:	69 5f       	subi	r22, 0xF9	; 249
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	ce 01       	movw	r24, r28
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN6StringC1ERKS_>
    17da:	be 01       	movw	r22, r28
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	84 ea       	ldi	r24, 0xA4	; 164
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN13Adafruit_FONA12setUserAgentE6String>
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringD1Ev>
    17f0:	01 11       	cpse	r16, r1
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <_Z21ensureFonaInitialisedb+0xb0>
    17f4:	04 ea       	ldi	r16, 0xA4	; 164
    17f6:	12 e0       	ldi	r17, 0x02	; 2
    17f8:	26 c0       	rjmp	.+76     	; 0x1846 <_Z21ensureFonaInitialisedb+0xfc>
    17fa:	62 e6       	ldi	r22, 0x62	; 98
    17fc:	73 e0       	ldi	r23, 0x03	; 3
    17fe:	87 e8       	ldi	r24, 0x87	; 135
    1800:	94 e0       	ldi	r25, 0x04	; 4
    1802:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	84 ea       	ldi	r24, 0xA4	; 164
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN13Adafruit_FONA10enableGPRSEb>
    1810:	18 2f       	mov	r17, r24
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	81 0f       	add	r24, r17
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	68 f3       	brcs	.-38     	; 0x17f4 <_Z21ensureFonaInitialisedb+0xaa>
    181a:	67 e4       	ldi	r22, 0x47	; 71
    181c:	73 e0       	ldi	r23, 0x03	; 3
    181e:	87 e8       	ldi	r24, 0x87	; 135
    1820:	94 e0       	ldi	r25, 0x04	; 4
    1822:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    1826:	66 e4       	ldi	r22, 0x46	; 70
    1828:	71 e0       	ldi	r23, 0x01	; 1
    182a:	87 e8       	ldi	r24, 0x87	; 135
    182c:	94 e0       	ldi	r25, 0x04	; 4
    182e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    1832:	61 2f       	mov	r22, r17
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	4a e0       	ldi	r20, 0x0A	; 10
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	87 e8       	ldi	r24, 0x87	; 135
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>
    1842:	00 e0       	ldi	r16, 0x00	; 0
    1844:	10 e0       	ldi	r17, 0x00	; 0
    1846:	ce 01       	movw	r24, r28
    1848:	07 96       	adiw	r24, 0x07	; 7
    184a:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringD1Ev>
    184e:	c8 01       	movw	r24, r16
    1850:	2c 96       	adiw	r28, 0x0c	; 12
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <_Z15switchOffSystemv>:
    1866:	66 e5       	ldi	r22, 0x56	; 86
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	87 e8       	ldi	r24, 0x87	; 135
    186c:	94 e0       	ldi	r25, 0x04	; 4
    186e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
    187a:	68 eb       	ldi	r22, 0xB8	; 184
    187c:	7b e0       	ldi	r23, 0x0B	; 11
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <delay>

00001886 <setup>:
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	85 e0       	ldi	r24, 0x05	; 5
    188a:	0e 94 b3 18 	call	0x3166	; 0x3166 <pinMode>
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	85 e0       	ldi	r24, 0x05	; 5
    1892:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
    1896:	68 eb       	ldi	r22, 0xB8	; 184
    1898:	7b e0       	ldi	r23, 0x0B	; 11
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	8d e0       	ldi	r24, 0x0D	; 13
    18a6:	0e 94 b3 18 	call	0x3166	; 0x3166 <pinMode>
    18aa:	26 e0       	ldi	r18, 0x06	; 6
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	55 e2       	ldi	r21, 0x25	; 37
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	87 e8       	ldi	r24, 0x87	; 135
    18b6:	94 e0       	ldi	r25, 0x04	; 4
    18b8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN14HardwareSerial5beginEmh>
    18bc:	67 ea       	ldi	r22, 0xA7	; 167
    18be:	73 e0       	ldi	r23, 0x03	; 3
    18c0:	87 e8       	ldi	r24, 0x87	; 135
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18c8:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN13ExtendedTests20runExtendedTypesTestEv>
    18cc:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <_Z15switchOffSystemv>

000018d0 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	2a 97       	sbiw	r28, 0x0a	; 10
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    18e4:	64 e3       	ldi	r22, 0x34	; 52
    18e6:	73 e0       	ldi	r23, 0x03	; 3
    18e8:	87 e8       	ldi	r24, 0x87	; 135
    18ea:	94 e0       	ldi	r25, 0x04	; 4
    18ec:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	1b 82       	std	Y+3, r1	; 0x03
    18f6:	1a 82       	std	Y+2, r1	; 0x02
    18f8:	1d 82       	std	Y+5, r1	; 0x05
    18fa:	1c 82       	std	Y+4, r1	; 0x04
    18fc:	1f 82       	std	Y+7, r1	; 0x07
    18fe:	1e 82       	std	Y+6, r1	; 0x06
    1900:	19 86       	std	Y+9, r1	; 0x09
    1902:	18 86       	std	Y+8, r1	; 0x08
    1904:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    1906:	be 01       	movw	r22, r28
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8a e9       	ldi	r24, 0x9A	; 154
    190e:	92 e0       	ldi	r25, 0x02	; 2
    1910:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	2a 96       	adiw	r28, 0x0a	; 10
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 d0       	rcall	.+0      	; 0x192e <_Z8sendDatav+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <_Z8sendDatav+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    1934:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	98 0f       	add	r25, r24
    193c:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <_sendDataLoopCount>
	
	if (doInit) {
    1940:	81 11       	cpse	r24, r1
    1942:	15 c0       	rjmp	.+42     	; 0x196e <_Z8sendDatav+0x46>
	
		RM_LOGLN(F("Initialising module to send data"));
    1944:	63 e1       	ldi	r22, 0x13	; 19
    1946:	73 e0       	ldi	r23, 0x03	; 3
    1948:	87 e8       	ldi	r24, 0x87	; 135
    194a:	94 e0       	ldi	r25, 0x04	; 4
    194c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	0e 94 a5 0b 	call	0x174a	; 0x174a <_Z21ensureFonaInitialisedb>
    1956:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <_sendDataFona+0x1>
    195a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_sendDataFona>
	
		if (_sendDataFona == NULL)
    195e:	89 2b       	or	r24, r25
    1960:	f9 f0       	breq	.+62     	; 0x19a0 <_Z8sendDatav+0x78>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    1962:	64 ee       	ldi	r22, 0xE4	; 228
    1964:	72 e0       	ldi	r23, 0x02	; 2
    1966:	87 e8       	ldi	r24, 0x87	; 135
    1968:	94 e0       	ldi	r25, 0x04	; 4
    196a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    196e:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_sendDataLoopCount>
    1972:	8c 33       	cpi	r24, 0x3C	; 60
    1974:	b9 f4       	brne	.+46     	; 0x19a4 <_Z8sendDatav+0x7c>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1976:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_sendDataFona>
    197a:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <_sendDataFona+0x1>
    197e:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN13Adafruit_FONA7getRSSIEv>
    1982:	69 83       	std	Y+1, r22	; 0x01
    1984:	7a 83       	std	Y+2, r23	; 0x02
    1986:	8b 83       	std	Y+3, r24	; 0x03
    1988:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1992:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1996:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <_sendDataFona+0x1>
    199a:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_sendDataFona>
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <_Z8sendDatav+0x7c>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <_Z8sendDatav+0x7e>
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    19a4:	80 e0       	ldi	r24, 0x00	; 0
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    19b4:	68 ee       	ldi	r22, 0xE8	; 232
    19b6:	73 e0       	ldi	r23, 0x03	; 3
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <delay>
	++_timerCounter;
    19c0:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
    19c4:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__data_end+0x1>
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <__data_end+0x1>
    19ce:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    19d2:	6a ed       	ldi	r22, 0xDA	; 218
    19d4:	72 e0       	ldi	r23, 0x02	; 2
    19d6:	87 e8       	ldi	r24, 0x87	; 135
    19d8:	94 e0       	ldi	r25, 0x04	; 4
    19da:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    19de:	66 e4       	ldi	r22, 0x46	; 70
    19e0:	71 e0       	ldi	r23, 0x01	; 1
    19e2:	87 e8       	ldi	r24, 0x87	; 135
    19e4:	94 e0       	ldi	r25, 0x04	; 4
    19e6:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    19ea:	4a e0       	ldi	r20, 0x0A	; 10
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <_behaviour>
    19f2:	87 e8       	ldi	r24, 0x87	; 135
    19f4:	94 e0       	ldi	r25, 0x04	; 4
    19f6:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    19fa:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    19fe:	80 ff       	sbrs	r24, 0
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <loop+0x60>
		
		if (takeReadings())
    1a02:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z12takeReadingsv>
    1a06:	88 23       	and	r24, r24
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    1a0a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1a0e:	8e 7f       	andi	r24, 0xFE	; 254
    1a10:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1a14:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1a18:	81 ff       	sbrs	r24, 1
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <loop+0x7a>
		
		if (sendData())
    1a1c:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z8sendDatav>
    1a20:	88 23       	and	r24, r24
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    1a24:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1a28:	8d 7f       	andi	r24, 0xFD	; 253
    1a2a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1a2e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1a32:	81 11       	cpse	r24, r1
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <loop+0x86>
		
		switchOffSystem();
    1a36:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <_Z15switchOffSystemv>
    1a3a:	08 95       	ret

00001a3c <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	64 e0       	ldi	r22, 0x04	; 4
    1a40:	84 ea       	ldi	r24, 0xA4	; 164
    1a42:	92 e0       	ldi	r25, 0x02	; 2
    1a44:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	8c e9       	ldi	r24, 0x9C	; 156
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	8a e9       	ldi	r24, 0x9A	; 154
    1a56:	92 e0       	ldi	r25, 0x02	; 2
    1a58:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <_ZN13SensorManagerC1Eb>

00001a5c <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1a5c:	8a e3       	ldi	r24, 0x3A	; 58
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__fona+0x1>
    1a64:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__fona>
    1a68:	89 eb       	ldi	r24, 0xB9	; 185
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	0c 94 1e 19 	jmp	0x323c	; 0x323c <_ZN6StringD1Ev>

00001a70 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1a70:	dc 01       	movw	r26, r24
    1a72:	ed 91       	ld	r30, X+
    1a74:	fc 91       	ld	r31, X
    1a76:	01 90       	ld	r0, Z+
    1a78:	f0 81       	ld	r31, Z
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	09 94       	ijmp

00001a7e <_ZN12RmMemManagerC1Eb>:
    1a7e:	fc 01       	movw	r30, r24
    1a80:	11 82       	std	Z+1, r1	; 0x01
    1a82:	12 82       	std	Z+2, r1	; 0x02
    1a84:	13 82       	std	Z+3, r1	; 0x03
    1a86:	14 82       	std	Z+4, r1	; 0x04
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	85 83       	std	Z+5, r24	; 0x05
    1a8c:	86 83       	std	Z+6, r24	; 0x06
    1a8e:	17 82       	std	Z+7, r1	; 0x07
    1a90:	60 83       	st	Z, r22
    1a92:	61 11       	cpse	r22, r1
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <_ZN12RmMemManagerC1Eb+0x20>
    1a96:	81 e3       	ldi	r24, 0x31	; 49
    1a98:	94 e0       	ldi	r25, 0x04	; 4
    1a9a:	0c 94 11 11 	jmp	0x2222	; 0x2222 <_ZN7TwoWire5beginEv>
    1a9e:	08 95       	ret

00001aa0 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	eb 01       	movw	r28, r22
    1aae:	7b 01       	movw	r14, r22
    1ab0:	e4 0e       	add	r14, r20
    1ab2:	f1 1c       	adc	r15, r1
    1ab4:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1ab6:	ce 15       	cp	r28, r14
    1ab8:	df 05       	cpc	r29, r15
    1aba:	71 f1       	breq	.+92     	; 0x1b18 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1abc:	60 e5       	ldi	r22, 0x50	; 80
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	81 e3       	ldi	r24, 0x31	; 49
    1ac2:	94 e0       	ldi	r25, 0x04	; 4
    1ac4:	0e 94 2d 11 	call	0x225a	; 0x225a <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1ac8:	61 2f       	mov	r22, r17
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	81 e3       	ldi	r24, 0x31	; 49
    1ace:	94 e0       	ldi	r25, 0x04	; 4
    1ad0:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1ad4:	b8 01       	movw	r22, r16
    1ad6:	77 27       	eor	r23, r23
    1ad8:	81 e3       	ldi	r24, 0x31	; 49
    1ada:	94 e0       	ldi	r25, 0x04	; 4
    1adc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1ae0:	81 e3       	ldi	r24, 0x31	; 49
    1ae2:	94 e0       	ldi	r25, 0x04	; 4
    1ae4:	0e 94 a9 11 	call	0x2352	; 0x2352 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	60 e5       	ldi	r22, 0x50	; 80
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	81 e3       	ldi	r24, 0x31	; 49
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	0e 94 a6 11 	call	0x234c	; 0x234c <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1af8:	81 e3       	ldi	r24, 0x31	; 49
    1afa:	94 e0       	ldi	r25, 0x04	; 4
    1afc:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN7TwoWire9availableEv>
    1b00:	89 2b       	or	r24, r25
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1b04:	81 e3       	ldi	r24, 0x31	; 49
    1b06:	94 e0       	ldi	r25, 0x04	; 4
    1b08:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN7TwoWire4readEv>
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1b10:	89 93       	st	Y+, r24
    1b12:	0f 5f       	subi	r16, 0xFF	; 255
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1b16:	cf cf       	rjmp	.-98     	; 0x1ab6 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	1f 92       	push	r1
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	be 01       	movw	r22, r28
    1b36:	6f 5f       	subi	r22, 0xFF	; 255
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_Z12internalReadjPhh>
	return value;
}
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	0f 90       	pop	r0
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <_ZN12RmMemManager18getUCharFromMemoryEj>

00001b50 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1b50:	fc 01       	movw	r30, r24
    1b52:	60 83       	st	Z, r22
    1b54:	08 95       	ret

00001b56 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1b56:	fc 01       	movw	r30, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1b5e:	86 2f       	mov	r24, r22
    1b60:	0c 94 6d 18 	jmp	0x30da	; 0x30da <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1b64:	85 e0       	ldi	r24, 0x05	; 5
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	08 95       	ret

00001b6a <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1b6e:	81 81       	ldd	r24, Z+1	; 0x01
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	12 96       	adiw	r26, 0x02	; 2
    1b78:	9c 93       	st	X, r25
    1b7a:	8e 93       	st	-X, r24
    1b7c:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1b7e:	81 81       	ldd	r24, Z+1	; 0x01
    1b80:	2a e0       	ldi	r18, 0x0A	; 10
    1b82:	82 9f       	mul	r24, r18
    1b84:	c0 01       	movw	r24, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	16 96       	adiw	r26, 0x06	; 6
    1b8a:	9c 93       	st	X, r25
    1b8c:	8e 93       	st	-X, r24
    1b8e:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1b90:	81 81       	ldd	r24, Z+1	; 0x01
    1b92:	67 e0       	ldi	r22, 0x07	; 7
    1b94:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodqi4>
    1b98:	89 2f       	mov	r24, r25
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	14 96       	adiw	r26, 0x04	; 4
    1b9e:	9c 93       	st	X, r25
    1ba0:	8e 93       	st	-X, r24
    1ba2:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1ba4:	81 81       	ldd	r24, Z+1	; 0x01
    1ba6:	24 e6       	ldi	r18, 0x64	; 100
    1ba8:	82 9f       	mul	r24, r18
    1baa:	c0 01       	movw	r24, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	18 96       	adiw	r26, 0x08	; 8
    1bb0:	9c 93       	st	X, r25
    1bb2:	8e 93       	st	-X, r24
    1bb4:	17 97       	sbiw	r26, 0x07	; 7
    1bb6:	08 95       	ret

00001bb8 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	8c 01       	movw	r16, r24
    1bce:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 23       	and	r24, r24
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN13SensorManager11getMockDataEP10SensorData>
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1be0:	6e e0       	ldi	r22, 0x0E	; 14
    1be2:	c8 01       	movw	r24, r16
    1be4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN13SensorManager16takeSampleAnalogEh>
    1be8:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1bea:	6f e0       	ldi	r22, 0x0F	; 15
    1bec:	c8 01       	movw	r24, r16
    1bee:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN13SensorManager16takeSampleAnalogEh>
    1bf2:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1bf4:	61 e1       	ldi	r22, 0x11	; 17
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN13SensorManager16takeSampleAnalogEh>
    1bfc:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1bfe:	60 e1       	ldi	r22, 0x10	; 16
    1c00:	c8 01       	movw	r24, r16
    1c02:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    1c06:	ba 82       	std	Y+2, r11	; 0x02
    1c08:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    1c0a:	de 82       	std	Y+6, r13	; 0x06
    1c0c:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    1c0e:	fc 82       	std	Y+4, r15	; 0x04
    1c10:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    1c12:	98 87       	std	Y+8, r25	; 0x08
    1c14:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1c16:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	bf 90       	pop	r11
    1c2a:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    1c2c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <_ZN7Helpers15printSensorDataEP10SensorData>

00001c30 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c30:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_sendStop>
    1c3a:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <twi_inRepStart>
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	82 e1       	ldi	r24, 0x12	; 18
    1c42:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	83 e1       	ldi	r24, 0x13	; 19
    1c4a:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
    1c4e:	e9 eb       	ldi	r30, 0xB9	; 185
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8e 7f       	andi	r24, 0xFE	; 254
    1c56:	80 83       	st	Z, r24
    1c58:	80 81       	ld	r24, Z
    1c5a:	8d 7f       	andi	r24, 0xFD	; 253
    1c5c:	80 83       	st	Z, r24
    1c5e:	88 e4       	ldi	r24, 0x48	; 72
    1c60:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1c64:	85 e4       	ldi	r24, 0x45	; 69
    1c66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1c6a:	08 95       	ret

00001c6c <twi_readFrom>:
    1c6c:	41 32       	cpi	r20, 0x21	; 33
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <twi_readFrom+0x6>
    1c70:	43 c0       	rjmp	.+134    	; 0x1cf8 <twi_readFrom+0x8c>
    1c72:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <twi_state>
    1c76:	91 11       	cpse	r25, r1
    1c78:	fc cf       	rjmp	.-8      	; 0x1c72 <twi_readFrom+0x6>
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <twi_state>
    1c80:	20 93 2e 04 	sts	0x042E, r18	; 0x80042e <twi_sendStop>
    1c84:	2f ef       	ldi	r18, 0xFF	; 255
    1c86:	20 93 c3 03 	sts	0x03C3, r18	; 0x8003c3 <twi_error>
    1c8a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_masterBufferIndex>
    1c8e:	24 0f       	add	r18, r20
    1c90:	20 93 07 04 	sts	0x0407, r18	; 0x800407 <twi_masterBufferLength>
    1c94:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <twi_slarw>
    1c98:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <twi_slarw>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	89 2b       	or	r24, r25
    1ca0:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_slarw>
    1ca4:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <twi_inRepStart>
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	61 f4       	brne	.+24     	; 0x1cc4 <twi_readFrom+0x58>
    1cac:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <twi_inRepStart>
    1cb0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_slarw>
    1cb4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1cb8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1cbc:	83 fd       	sbrc	r24, 3
    1cbe:	f8 cf       	rjmp	.-16     	; 0x1cb0 <twi_readFrom+0x44>
    1cc0:	85 ec       	ldi	r24, 0xC5	; 197
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <twi_readFrom+0x5a>
    1cc4:	85 ee       	ldi	r24, 0xE5	; 229
    1cc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1cca:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_state>
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	e1 f3       	breq	.-8      	; 0x1cca <twi_readFrom+0x5e>
    1cd2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1cd6:	84 17       	cp	r24, r20
    1cd8:	10 f4       	brcc	.+4      	; 0x1cde <twi_readFrom+0x72>
    1cda:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1cde:	a9 e0       	ldi	r26, 0x09	; 9
    1ce0:	b4 e0       	ldi	r27, 0x04	; 4
    1ce2:	96 2f       	mov	r25, r22
    1ce4:	fb 01       	movw	r30, r22
    1ce6:	8e 2f       	mov	r24, r30
    1ce8:	89 1b       	sub	r24, r25
    1cea:	84 17       	cp	r24, r20
    1cec:	18 f4       	brcc	.+6      	; 0x1cf4 <twi_readFrom+0x88>
    1cee:	8d 91       	ld	r24, X+
    1cf0:	81 93       	st	Z+, r24
    1cf2:	f9 cf       	rjmp	.-14     	; 0x1ce6 <twi_readFrom+0x7a>
    1cf4:	84 2f       	mov	r24, r20
    1cf6:	08 95       	ret
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	08 95       	ret

00001cfc <twi_writeTo>:
    1cfc:	0f 93       	push	r16
    1cfe:	41 32       	cpi	r20, 0x21	; 33
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <twi_writeTo+0x8>
    1d02:	4a c0       	rjmp	.+148    	; 0x1d98 <twi_writeTo+0x9c>
    1d04:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <twi_state>
    1d08:	91 11       	cpse	r25, r1
    1d0a:	fc cf       	rjmp	.-8      	; 0x1d04 <twi_writeTo+0x8>
    1d0c:	32 e0       	ldi	r19, 0x02	; 2
    1d0e:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <twi_state>
    1d12:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <twi_sendStop>
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <twi_error>
    1d1c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_masterBufferIndex>
    1d20:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <twi_masterBufferLength>
    1d24:	56 2f       	mov	r21, r22
    1d26:	a9 e0       	ldi	r26, 0x09	; 9
    1d28:	b4 e0       	ldi	r27, 0x04	; 4
    1d2a:	fb 01       	movw	r30, r22
    1d2c:	3e 2f       	mov	r19, r30
    1d2e:	35 1b       	sub	r19, r21
    1d30:	34 17       	cp	r19, r20
    1d32:	18 f4       	brcc	.+6      	; 0x1d3a <twi_writeTo+0x3e>
    1d34:	31 91       	ld	r19, Z+
    1d36:	3d 93       	st	X+, r19
    1d38:	f9 cf       	rjmp	.-14     	; 0x1d2c <twi_writeTo+0x30>
    1d3a:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_slarw>
    1d3e:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <twi_slarw>
    1d42:	88 0f       	add	r24, r24
    1d44:	83 2b       	or	r24, r19
    1d46:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_slarw>
    1d4a:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <twi_inRepStart>
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	61 f4       	brne	.+24     	; 0x1d6a <twi_writeTo+0x6e>
    1d52:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <twi_inRepStart>
    1d56:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_slarw>
    1d5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1d5e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d62:	83 fd       	sbrc	r24, 3
    1d64:	f8 cf       	rjmp	.-16     	; 0x1d56 <twi_writeTo+0x5a>
    1d66:	85 ec       	ldi	r24, 0xC5	; 197
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <twi_writeTo+0x70>
    1d6a:	85 ee       	ldi	r24, 0xE5	; 229
    1d6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d70:	22 23       	and	r18, r18
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <twi_writeTo+0x80>
    1d74:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_state>
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	d1 f3       	breq	.-12     	; 0x1d70 <twi_writeTo+0x74>
    1d7c:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_error>
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <twi_writeTo+0xa6>
    1d84:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_error>
    1d88:	80 32       	cpi	r24, 0x20	; 32
    1d8a:	41 f0       	breq	.+16     	; 0x1d9c <twi_writeTo+0xa0>
    1d8c:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_error>
    1d90:	80 33       	cpi	r24, 0x30	; 48
    1d92:	31 f0       	breq	.+12     	; 0x1da0 <twi_writeTo+0xa4>
    1d94:	94 e0       	ldi	r25, 0x04	; 4
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <twi_writeTo+0xa6>
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <twi_writeTo+0xa6>
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <twi_writeTo+0xa6>
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	89 2f       	mov	r24, r25
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <twi_transmit>:
    1da8:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    1dac:	26 2f       	mov	r18, r22
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	24 0f       	add	r18, r20
    1db2:	31 1d       	adc	r19, r1
    1db4:	21 32       	cpi	r18, 0x21	; 33
    1db6:	31 05       	cpc	r19, r1
    1db8:	dc f4       	brge	.+54     	; 0x1df0 <twi_transmit+0x48>
    1dba:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <twi_state>
    1dbe:	24 30       	cpi	r18, 0x04	; 4
    1dc0:	c9 f4       	brne	.+50     	; 0x1df4 <twi_transmit+0x4c>
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	86 17       	cp	r24, r22
    1dca:	58 f4       	brcc	.+22     	; 0x1de2 <twi_transmit+0x3a>
    1dcc:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    1dd0:	21 91       	ld	r18, Z+
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	a9 51       	subi	r26, 0x19	; 25
    1dd6:	bc 4f       	sbci	r27, 0xFC	; 252
    1dd8:	a3 0f       	add	r26, r19
    1dda:	b1 1d       	adc	r27, r1
    1ddc:	2c 93       	st	X, r18
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	f3 cf       	rjmp	.-26     	; 0x1dc8 <twi_transmit+0x20>
    1de2:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    1de6:	68 0f       	add	r22, r24
    1de8:	60 93 e5 03 	sts	0x03E5, r22	; 0x8003e5 <twi_txBufferLength>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	08 95       	ret
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	08 95       	ret
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	08 95       	ret

00001df8 <twi_attachSlaveRxEvent>:
    1df8:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <twi_onSlaveReceive+0x1>
    1dfc:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_onSlaveReceive>
    1e00:	08 95       	ret

00001e02 <twi_attachSlaveTxEvent>:
    1e02:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <twi_onSlaveTransmit+0x1>
    1e06:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <twi_onSlaveTransmit>
    1e0a:	08 95       	ret

00001e0c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1e0c:	85 ed       	ldi	r24, 0xD5	; 213
    1e0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1e12:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1e16:	84 fd       	sbrc	r24, 4
    1e18:	fc cf       	rjmp	.-8      	; 0x1e12 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1e1a:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
    1e1e:	08 95       	ret

00001e20 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1e20:	85 ec       	ldi	r24, 0xC5	; 197
    1e22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    1e26:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
    1e2a:	08 95       	ret

00001e2c <__vector_24>:
}

ISR(TWI_vect)
{
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	2f 93       	push	r18
    1e38:	3f 93       	push	r19
    1e3a:	4f 93       	push	r20
    1e3c:	5f 93       	push	r21
    1e3e:	6f 93       	push	r22
    1e40:	7f 93       	push	r23
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
  switch(TW_STATUS){
    1e4e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1e52:	88 7f       	andi	r24, 0xF8	; 248
    1e54:	80 36       	cpi	r24, 0x60	; 96
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <__vector_24+0x2e>
    1e58:	9e c0       	rjmp	.+316    	; 0x1f96 <__vector_24+0x16a>
    1e5a:	78 f5       	brcc	.+94     	; 0x1eba <__vector_24+0x8e>
    1e5c:	88 32       	cpi	r24, 0x28	; 40
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <__vector_24+0x36>
    1e60:	5d c0       	rjmp	.+186    	; 0x1f1c <__vector_24+0xf0>
    1e62:	90 f4       	brcc	.+36     	; 0x1e88 <__vector_24+0x5c>
    1e64:	80 31       	cpi	r24, 0x10	; 16
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__vector_24+0x3e>
    1e68:	56 c0       	rjmp	.+172    	; 0x1f16 <__vector_24+0xea>
    1e6a:	38 f4       	brcc	.+14     	; 0x1e7a <__vector_24+0x4e>
    1e6c:	88 23       	and	r24, r24
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__vector_24+0x46>
    1e70:	f5 c0       	rjmp	.+490    	; 0x205c <__vector_24+0x230>
    1e72:	88 30       	cpi	r24, 0x08	; 8
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <__vector_24+0x4c>
    1e76:	4f c0       	rjmp	.+158    	; 0x1f16 <__vector_24+0xea>
    1e78:	f5 c0       	rjmp	.+490    	; 0x2064 <__vector_24+0x238>
    1e7a:	88 31       	cpi	r24, 0x18	; 24
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <__vector_24+0x54>
    1e7e:	4e c0       	rjmp	.+156    	; 0x1f1c <__vector_24+0xf0>
    1e80:	80 32       	cpi	r24, 0x20	; 32
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__vector_24+0x5a>
    1e84:	5f c0       	rjmp	.+190    	; 0x1f44 <__vector_24+0x118>
    1e86:	ee c0       	rjmp	.+476    	; 0x2064 <__vector_24+0x238>
    1e88:	80 34       	cpi	r24, 0x40	; 64
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <__vector_24+0x62>
    1e8c:	6a c0       	rjmp	.+212    	; 0x1f62 <__vector_24+0x136>
    1e8e:	58 f4       	brcc	.+22     	; 0x1ea6 <__vector_24+0x7a>
    1e90:	80 33       	cpi	r24, 0x30	; 48
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <__vector_24+0x6a>
    1e94:	57 c0       	rjmp	.+174    	; 0x1f44 <__vector_24+0x118>
    1e96:	88 33       	cpi	r24, 0x38	; 56
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <__vector_24+0x70>
    1e9a:	e4 c0       	rjmp	.+456    	; 0x2064 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e9c:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <twi_error>
      twi_releaseBus();
    1ea0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <twi_releaseBus>
      break;
    1ea4:	df c0       	rjmp	.+446    	; 0x2064 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ea6:	80 35       	cpi	r24, 0x50	; 80
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <__vector_24+0x80>
    1eaa:	4f c0       	rjmp	.+158    	; 0x1f4a <__vector_24+0x11e>
    1eac:	88 35       	cpi	r24, 0x58	; 88
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <__vector_24+0x86>
    1eb0:	5d c0       	rjmp	.+186    	; 0x1f6c <__vector_24+0x140>
    1eb2:	88 34       	cpi	r24, 0x48	; 72
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <__vector_24+0x8c>
    1eb6:	d6 c0       	rjmp	.+428    	; 0x2064 <__vector_24+0x238>
    1eb8:	d3 c0       	rjmp	.+422    	; 0x2060 <__vector_24+0x234>
    1eba:	88 39       	cpi	r24, 0x98	; 152
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <__vector_24+0x94>
    1ebe:	c4 c0       	rjmp	.+392    	; 0x2048 <__vector_24+0x21c>
    1ec0:	a8 f4       	brcc	.+42     	; 0x1eec <__vector_24+0xc0>
    1ec2:	88 37       	cpi	r24, 0x78	; 120
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <__vector_24+0x9c>
    1ec6:	67 c0       	rjmp	.+206    	; 0x1f96 <__vector_24+0x16a>
    1ec8:	38 f4       	brcc	.+14     	; 0x1ed8 <__vector_24+0xac>
    1eca:	88 36       	cpi	r24, 0x68	; 104
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <__vector_24+0xa4>
    1ece:	63 c0       	rjmp	.+198    	; 0x1f96 <__vector_24+0x16a>
    1ed0:	80 37       	cpi	r24, 0x70	; 112
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <__vector_24+0xaa>
    1ed4:	60 c0       	rjmp	.+192    	; 0x1f96 <__vector_24+0x16a>
    1ed6:	c6 c0       	rjmp	.+396    	; 0x2064 <__vector_24+0x238>
    1ed8:	88 38       	cpi	r24, 0x88	; 136
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__vector_24+0xb2>
    1edc:	b5 c0       	rjmp	.+362    	; 0x2048 <__vector_24+0x21c>
    1ede:	80 39       	cpi	r24, 0x90	; 144
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <__vector_24+0xb8>
    1ee2:	5f c0       	rjmp	.+190    	; 0x1fa2 <__vector_24+0x176>
    1ee4:	80 38       	cpi	r24, 0x80	; 128
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <__vector_24+0xbe>
    1ee8:	bd c0       	rjmp	.+378    	; 0x2064 <__vector_24+0x238>
    1eea:	5b c0       	rjmp	.+182    	; 0x1fa2 <__vector_24+0x176>
    1eec:	80 3b       	cpi	r24, 0xB0	; 176
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <__vector_24+0xc6>
    1ef0:	83 c0       	rjmp	.+262    	; 0x1ff8 <__vector_24+0x1cc>
    1ef2:	38 f4       	brcc	.+14     	; 0x1f02 <__vector_24+0xd6>
    1ef4:	80 3a       	cpi	r24, 0xA0	; 160
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <__vector_24+0xce>
    1ef8:	66 c0       	rjmp	.+204    	; 0x1fc6 <__vector_24+0x19a>
    1efa:	88 3a       	cpi	r24, 0xA8	; 168
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <__vector_24+0xd4>
    1efe:	7c c0       	rjmp	.+248    	; 0x1ff8 <__vector_24+0x1cc>
    1f00:	b1 c0       	rjmp	.+354    	; 0x2064 <__vector_24+0x238>
    1f02:	80 3c       	cpi	r24, 0xC0	; 192
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__vector_24+0xdc>
    1f06:	a4 c0       	rjmp	.+328    	; 0x2050 <__vector_24+0x224>
    1f08:	88 3c       	cpi	r24, 0xC8	; 200
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <__vector_24+0xe2>
    1f0c:	a1 c0       	rjmp	.+322    	; 0x2050 <__vector_24+0x224>
    1f0e:	88 3b       	cpi	r24, 0xB8	; 184
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <__vector_24+0xe8>
    1f12:	87 c0       	rjmp	.+270    	; 0x2022 <__vector_24+0x1f6>
    1f14:	a7 c0       	rjmp	.+334    	; 0x2064 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f16:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_slarw>
    1f1a:	10 c0       	rjmp	.+32     	; 0x1f3c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f1c:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f20:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_masterBufferLength>
    1f24:	98 17       	cp	r25, r24
    1f26:	70 f5       	brcc	.+92     	; 0x1f84 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f28:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	8e 0f       	add	r24, r30
    1f30:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_masterBufferIndex>
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	e7 5f       	subi	r30, 0xF7	; 247
    1f38:	fb 4f       	sbci	r31, 0xFB	; 251
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f40:	85 ec       	ldi	r24, 0xC5	; 197
    1f42:	83 c0       	rjmp	.+262    	; 0x204a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f44:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <twi_error>
    1f48:	8b c0       	rjmp	.+278    	; 0x2060 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f4a:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	8e 0f       	add	r24, r30
    1f52:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_masterBufferIndex>
    1f56:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	e7 5f       	subi	r30, 0xF7	; 247
    1f5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f60:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f62:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f66:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_masterBufferLength>
    1f6a:	6b c0       	rjmp	.+214    	; 0x2042 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f6c:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	8e 0f       	add	r24, r30
    1f74:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_masterBufferIndex>
    1f78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	e7 5f       	subi	r30, 0xF7	; 247
    1f80:	fb 4f       	sbci	r31, 0xFB	; 251
    1f82:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f84:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_sendStop>
    1f88:	81 11       	cpse	r24, r1
    1f8a:	6a c0       	rjmp	.+212    	; 0x2060 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f92:	84 ea       	ldi	r24, 0xA4	; 164
    1f94:	5e c0       	rjmp	.+188    	; 0x2052 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f9c:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <twi_rxBufferIndex>
    1fa0:	cf cf       	rjmp	.-98     	; 0x1f40 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1fa2:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    1fa6:	80 32       	cpi	r24, 0x20	; 32
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <__vector_24+0x180>
    1faa:	4e c0       	rjmp	.+156    	; 0x2048 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1fac:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	8e 0f       	add	r24, r30
    1fb4:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <twi_rxBufferIndex>
    1fb8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	eb 53       	subi	r30, 0x3B	; 59
    1fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc2:	80 83       	st	Z, r24
    1fc4:	bd cf       	rjmp	.-134    	; 0x1f40 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1fc6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1fca:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    1fce:	80 32       	cpi	r24, 0x20	; 32
    1fd0:	30 f4       	brcc	.+12     	; 0x1fde <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1fd2:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	eb 53       	subi	r30, 0x3B	; 59
    1fda:	fc 4f       	sbci	r31, 0xFC	; 252
    1fdc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1fde:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <twi_onSlaveReceive>
    1fe8:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <twi_onSlaveReceive+0x1>
    1fec:	85 ec       	ldi	r24, 0xC5	; 197
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1ff2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <twi_rxBufferIndex>
      break;
    1ff6:	36 c0       	rjmp	.+108    	; 0x2064 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1ff8:	84 e0       	ldi	r24, 0x04	; 4
    1ffa:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ffe:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2002:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2006:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_onSlaveTransmit>
    200a:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <twi_onSlaveTransmit+0x1>
    200e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2010:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    2014:	81 11       	cpse	r24, r1
    2016:	05 c0       	rjmp	.+10     	; 0x2022 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    201e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2022:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <twi_txBufferIndex>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	8e 0f       	add	r24, r30
    202a:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_txBufferIndex>
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	e9 51       	subi	r30, 0x19	; 25
    2032:	fc 4f       	sbci	r31, 0xFC	; 252
    2034:	80 81       	ld	r24, Z
    2036:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    203a:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <twi_txBufferIndex>
    203e:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    2042:	98 17       	cp	r25, r24
    2044:	08 f4       	brcc	.+2      	; 0x2048 <__vector_24+0x21c>
    2046:	7c cf       	rjmp	.-264    	; 0x1f40 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2048:	85 e8       	ldi	r24, 0x85	; 133
    204a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    204e:	0a c0       	rjmp	.+20     	; 0x2064 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2050:	85 ec       	ldi	r24, 0xC5	; 197
    2052:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2056:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
      break;
    205a:	04 c0       	rjmp	.+8      	; 0x2064 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    205c:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <twi_error>
      twi_stop();
    2060:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <twi_stop>
      break;
  }
}
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	0f 90       	pop	r0
    2082:	1f 90       	pop	r1
    2084:	18 95       	reti

00002086 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2086:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    2090:	82 1b       	sub	r24, r18
    2092:	91 09       	sbc	r25, r1
    2094:	08 95       	ret

00002096 <_ZN7TwoWire4readEv>:
    2096:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    209a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    209e:	98 17       	cp	r25, r24
    20a0:	50 f4       	brcc	.+20     	; 0x20b6 <_ZN7TwoWire4readEv+0x20>
    20a2:	e9 2f       	mov	r30, r25
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	e9 59       	subi	r30, 0x99	; 153
    20a8:	fb 4f       	sbci	r31, 0xFB	; 251
    20aa:	20 81       	ld	r18, Z
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
    20b0:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <_ZN7TwoWire4readEv+0x24>
    20b6:	2f ef       	ldi	r18, 0xFF	; 255
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	c9 01       	movw	r24, r18
    20bc:	08 95       	ret

000020be <_ZN7TwoWire4peekEv>:
    20be:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    20c2:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    20c6:	e8 17       	cp	r30, r24
    20c8:	30 f4       	brcc	.+12     	; 0x20d6 <_ZN7TwoWire4peekEv+0x18>
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	e9 59       	subi	r30, 0x99	; 153
    20ce:	fb 4f       	sbci	r31, 0xFB	; 251
    20d0:	80 81       	ld	r24, Z
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	08 95       	ret
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	9f ef       	ldi	r25, 0xFF	; 255
    20da:	08 95       	ret

000020dc <_ZN7TwoWire5flushEv>:
    20dc:	08 95       	ret

000020de <_ZN7TwoWire16onReceiveServiceEPhi>:
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	ec 01       	movw	r28, r24
    20e4:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <_ZN7TwoWire14user_onReceiveE>
    20e8:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <_ZN7TwoWire14user_onReceiveE+0x1>
    20ec:	30 97       	sbiw	r30, 0x00	; 0
    20ee:	f1 f0       	breq	.+60     	; 0x212c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20f0:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    20f4:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    20f8:	98 17       	cp	r25, r24
    20fa:	c0 f0       	brcs	.+48     	; 0x212c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	29 2f       	mov	r18, r25
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	26 17       	cp	r18, r22
    2104:	37 07       	cpc	r19, r23
    2106:	54 f4       	brge	.+20     	; 0x211c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2108:	de 01       	movw	r26, r28
    210a:	a2 0f       	add	r26, r18
    210c:	b3 1f       	adc	r27, r19
    210e:	4c 91       	ld	r20, X
    2110:	d9 01       	movw	r26, r18
    2112:	a9 59       	subi	r26, 0x99	; 153
    2114:	bb 4f       	sbci	r27, 0xFB	; 251
    2116:	4c 93       	st	X, r20
    2118:	9f 5f       	subi	r25, 0xFF	; 255
    211a:	f1 cf       	rjmp	.-30     	; 0x20fe <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    211c:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    2120:	60 93 65 04 	sts	0x0465, r22	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    2124:	cb 01       	movw	r24, r22
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	09 94       	ijmp
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <_ZN7TwoWire16onRequestServiceEv>:
    2132:	e0 91 3f 04 	lds	r30, 0x043F	; 0x80043f <_ZN7TwoWire14user_onRequestE>
    2136:	f0 91 40 04 	lds	r31, 0x0440	; 0x800440 <_ZN7TwoWire14user_onRequestE+0x1>
    213a:	30 97       	sbiw	r30, 0x00	; 0
    213c:	29 f0       	breq	.+10     	; 0x2148 <_ZN7TwoWire16onRequestServiceEv+0x16>
    213e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    2142:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2146:	09 94       	ijmp
    2148:	08 95       	ret

0000214a <_ZN7TwoWire5writeEPKhj>:
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	7c 01       	movw	r14, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8a 01       	movw	r16, r20
    2160:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <_ZN7TwoWire12transmittingE>
    2164:	22 23       	and	r18, r18
    2166:	89 f0       	breq	.+34     	; 0x218a <_ZN7TwoWire5writeEPKhj+0x40>
    2168:	eb 01       	movw	r28, r22
    216a:	6b 01       	movw	r12, r22
    216c:	c4 0e       	add	r12, r20
    216e:	d5 1e       	adc	r13, r21
    2170:	cc 15       	cp	r28, r12
    2172:	dd 05       	cpc	r29, r13
    2174:	69 f0       	breq	.+26     	; 0x2190 <_ZN7TwoWire5writeEPKhj+0x46>
    2176:	69 91       	ld	r22, Y+
    2178:	d7 01       	movw	r26, r14
    217a:	ed 91       	ld	r30, X+
    217c:	fc 91       	ld	r31, X
    217e:	01 90       	ld	r0, Z+
    2180:	f0 81       	ld	r31, Z
    2182:	e0 2d       	mov	r30, r0
    2184:	c7 01       	movw	r24, r14
    2186:	09 95       	icall
    2188:	f3 cf       	rjmp	.-26     	; 0x2170 <_ZN7TwoWire5writeEPKhj+0x26>
    218a:	64 2f       	mov	r22, r20
    218c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <twi_transmit>
    2190:	c8 01       	movw	r24, r16
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	df 90       	pop	r13
    21a0:	cf 90       	pop	r12
    21a2:	08 95       	ret

000021a4 <_ZN7TwoWire5writeEh>:
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	1f 92       	push	r1
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	69 83       	std	Y+1, r22	; 0x01
    21b0:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <_ZN7TwoWire12transmittingE>
    21b4:	22 23       	and	r18, r18
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <_ZN7TwoWire5writeEh+0x48>
    21b8:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    21bc:	20 32       	cpi	r18, 0x20	; 32
    21be:	40 f0       	brcs	.+16     	; 0x21d0 <_ZN7TwoWire5writeEh+0x2c>
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	fc 01       	movw	r30, r24
    21c6:	33 83       	std	Z+3, r19	; 0x03
    21c8:	22 83       	std	Z+2, r18	; 0x02
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	15 c0       	rjmp	.+42     	; 0x21fa <_ZN7TwoWire5writeEh+0x56>
    21d0:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    21d4:	e8 2f       	mov	r30, r24
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	ec 5b       	subi	r30, 0xBC	; 188
    21da:	fb 4f       	sbci	r31, 0xFB	; 251
    21dc:	99 81       	ldd	r25, Y+1	; 0x01
    21de:	90 83       	st	Z, r25
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    21e6:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <_ZN7TwoWire5writeEh+0x52>
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <twi_transmit>
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	0f 90       	pop	r0
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

00002202 <_ZN7TwoWireC1Ev>:
    2202:	fc 01       	movw	r30, r24
    2204:	13 82       	std	Z+3, r1	; 0x03
    2206:	12 82       	std	Z+2, r1	; 0x02
    2208:	88 ee       	ldi	r24, 0xE8	; 232
    220a:	93 e0       	ldi	r25, 0x03	; 3
    220c:	a0 e0       	ldi	r26, 0x00	; 0
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	84 83       	std	Z+4, r24	; 0x04
    2212:	95 83       	std	Z+5, r25	; 0x05
    2214:	a6 83       	std	Z+6, r26	; 0x06
    2216:	b7 83       	std	Z+7, r27	; 0x07
    2218:	8b e6       	ldi	r24, 0x6B	; 107
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	08 95       	ret

00002222 <_ZN7TwoWire5beginEv>:
    2222:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    2226:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    222a:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    222e:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2232:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <twi_init>
    2236:	89 e9       	ldi	r24, 0x99	; 153
    2238:	90 e1       	ldi	r25, 0x10	; 16
    223a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <twi_attachSlaveTxEvent>
    223e:	8f e6       	ldi	r24, 0x6F	; 111
    2240:	90 e1       	ldi	r25, 0x10	; 16
    2242:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <twi_attachSlaveRxEvent>

00002246 <_ZN7TwoWire17beginTransmissionEh>:
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZN7TwoWire12transmittingE>
    224c:	60 93 64 04 	sts	0x0464, r22	; 0x800464 <_ZN7TwoWire9txAddressE>
    2250:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    2254:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2258:	08 95       	ret

0000225a <_ZN7TwoWire17beginTransmissionEi>:
    225a:	0c 94 23 11 	jmp	0x2246	; 0x2246 <_ZN7TwoWire17beginTransmissionEh>

0000225e <_ZN7TwoWire15endTransmissionEh>:
    225e:	0f 93       	push	r16
    2260:	06 2f       	mov	r16, r22
    2262:	21 e0       	ldi	r18, 0x01	; 1
    2264:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2268:	64 e4       	ldi	r22, 0x44	; 68
    226a:	74 e0       	ldi	r23, 0x04	; 4
    226c:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <_ZN7TwoWire9txAddressE>
    2270:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <twi_writeTo>
    2274:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    2278:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    227c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZN7TwoWire12transmittingE>
    2280:	0f 91       	pop	r16
    2282:	08 95       	ret

00002284 <_ZN7TwoWire11requestFromEhhmhh>:
    2284:	4f 92       	push	r4
    2286:	5f 92       	push	r5
    2288:	6f 92       	push	r6
    228a:	7f 92       	push	r7
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	5c 01       	movw	r10, r24
    22a0:	f6 2e       	mov	r15, r22
    22a2:	d4 2f       	mov	r29, r20
    22a4:	28 01       	movw	r4, r16
    22a6:	39 01       	movw	r6, r18
    22a8:	ee 20       	and	r14, r14
    22aa:	21 f1       	breq	.+72     	; 0x22f4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    22ac:	0e 94 23 11 	call	0x2246	; 0x2246 <_ZN7TwoWire17beginTransmissionEh>
    22b0:	ce 2d       	mov	r28, r14
    22b2:	c4 30       	cpi	r28, 0x04	; 4
    22b4:	08 f0       	brcs	.+2      	; 0x22b8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22b6:	c3 e0       	ldi	r28, 0x03	; 3
    22b8:	c1 50       	subi	r28, 0x01	; 1
    22ba:	c0 f0       	brcs	.+48     	; 0x22ec <_ZN7TwoWire11requestFromEhhmhh+0x68>
    22bc:	28 e0       	ldi	r18, 0x08	; 8
    22be:	c2 9f       	mul	r28, r18
    22c0:	c0 01       	movw	r24, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	a3 01       	movw	r20, r6
    22c6:	92 01       	movw	r18, r4
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    22ca:	56 95       	lsr	r21
    22cc:	47 95       	ror	r20
    22ce:	37 95       	ror	r19
    22d0:	27 95       	ror	r18
    22d2:	8a 95       	dec	r24
    22d4:	d2 f7       	brpl	.-12     	; 0x22ca <_ZN7TwoWire11requestFromEhhmhh+0x46>
    22d6:	ca 01       	movw	r24, r20
    22d8:	b9 01       	movw	r22, r18
    22da:	d5 01       	movw	r26, r10
    22dc:	ed 91       	ld	r30, X+
    22de:	fc 91       	ld	r31, X
    22e0:	01 90       	ld	r0, Z+
    22e2:	f0 81       	ld	r31, Z
    22e4:	e0 2d       	mov	r30, r0
    22e6:	c5 01       	movw	r24, r10
    22e8:	09 95       	icall
    22ea:	e6 cf       	rjmp	.-52     	; 0x22b8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	c5 01       	movw	r24, r10
    22f0:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN7TwoWire15endTransmissionEh>
    22f4:	4d 2f       	mov	r20, r29
    22f6:	d1 32       	cpi	r29, 0x21	; 33
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <_ZN7TwoWire11requestFromEhhmhh+0x78>
    22fa:	40 e2       	ldi	r20, 0x20	; 32
    22fc:	2c 2d       	mov	r18, r12
    22fe:	67 e6       	ldi	r22, 0x67	; 103
    2300:	74 e0       	ldi	r23, 0x04	; 4
    2302:	8f 2d       	mov	r24, r15
    2304:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <twi_readFrom>
    2308:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    230c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	cf 90       	pop	r12
    231e:	bf 90       	pop	r11
    2320:	af 90       	pop	r10
    2322:	7f 90       	pop	r7
    2324:	6f 90       	pop	r6
    2326:	5f 90       	pop	r5
    2328:	4f 90       	pop	r4
    232a:	08 95       	ret

0000232c <_ZN7TwoWire11requestFromEhhh>:
    232c:	cf 92       	push	r12
    232e:	ef 92       	push	r14
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	c2 2e       	mov	r12, r18
    2336:	e1 2c       	mov	r14, r1
    2338:	00 e0       	ldi	r16, 0x00	; 0
    233a:	10 e0       	ldi	r17, 0x00	; 0
    233c:	98 01       	movw	r18, r16
    233e:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire11requestFromEhhmhh>
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ef 90       	pop	r14
    2348:	cf 90       	pop	r12
    234a:	08 95       	ret

0000234c <_ZN7TwoWire11requestFromEii>:
    234c:	21 e0       	ldi	r18, 0x01	; 1
    234e:	0c 94 96 11 	jmp	0x232c	; 0x232c <_ZN7TwoWire11requestFromEhhh>

00002352 <_ZN7TwoWire15endTransmissionEv>:
    2352:	61 e0       	ldi	r22, 0x01	; 1
    2354:	0c 94 2f 11 	jmp	0x225e	; 0x225e <_ZN7TwoWire15endTransmissionEh>

00002358 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2358:	81 e3       	ldi	r24, 0x31	; 49
    235a:	94 e0       	ldi	r25, 0x04	; 4
    235c:	0c 94 01 11 	jmp	0x2202	; 0x2202 <_ZN7TwoWireC1Ev>

00002360 <_ZN13ExtendedTests20runExtendedTypesTestEv>:
#endif
}


//RMonV3 types/flags test
void ExtendedTests::runExtendedTypesTest() {
    2360:	9f 92       	push	r9
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ef 92       	push	r14
    236c:	ff 92       	push	r15
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	c9 53       	subi	r28, 0x39	; 57
    237c:	d5 40       	sbci	r29, 0x05	; 5
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	ca 5c       	subi	r28, 0xCA	; 202
    238a:	da 4f       	sbci	r29, 0xFA	; 250
    238c:	18 82       	st	Y, r1
    238e:	c6 53       	subi	r28, 0x36	; 54
    2390:	d5 40       	sbci	r29, 0x05	; 5
    2392:	c9 5c       	subi	r28, 0xC9	; 201
    2394:	da 4f       	sbci	r29, 0xFA	; 250
    2396:	18 82       	st	Y, r1
    2398:	c7 53       	subi	r28, 0x37	; 55
    239a:	d5 40       	sbci	r29, 0x05	; 5
    239c:	c8 5c       	subi	r28, 0xC8	; 200
    239e:	da 4f       	sbci	r29, 0xFA	; 250
    23a0:	18 82       	st	Y, r1
    23a2:	c8 53       	subi	r28, 0x38	; 56
    23a4:	d5 40       	sbci	r29, 0x05	; 5
							(FONA_GET_NETREG::NETSTAT_5 |
							FONA_GET_NETREG::RESULT_CODE_1 |
							FONA_GET_NETREG::IS_ERROR);
	
	FONA_GET_RSSI result;
	result.netReg = regVal;
    23a6:	85 e3       	ldi	r24, 0x35	; 53
    23a8:	c7 5c       	subi	r28, 0xC7	; 199
    23aa:	da 4f       	sbci	r29, 0xFA	; 250
    23ac:	88 83       	st	Y, r24
    23ae:	c9 53       	subi	r28, 0x39	; 57
    23b0:	d5 40       	sbci	r29, 0x05	; 5
					 
	RM_LOG(F("Netstat 5 + ResultCode 1 + Error 1="));
    23b2:	67 ec       	ldi	r22, 0xC7	; 199
    23b4:	75 e0       	ldi	r23, 0x05	; 5
    23b6:	87 e8       	ldi	r24, 0x87	; 135
    23b8:	94 e0       	ldi	r25, 0x04	; 4
    23ba:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(result.netReg, BIN);
    23be:	c7 5c       	subi	r28, 0xC7	; 199
    23c0:	da 4f       	sbci	r29, 0xFA	; 250
    23c2:	68 81       	ld	r22, Y
    23c4:	c9 53       	subi	r28, 0x39	; 57
    23c6:	d5 40       	sbci	r29, 0x05	; 5
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	42 e0       	ldi	r20, 0x02	; 2
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	87 e8       	ldi	r24, 0x87	; 135
    23d0:	94 e0       	ldi	r25, 0x04	; 4
    23d2:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>

	uint8_t memStoredVal = result.netReg;
    23d6:	c7 5c       	subi	r28, 0xC7	; 199
    23d8:	da 4f       	sbci	r29, 0xFA	; 250
    23da:	18 81       	ld	r17, Y
    23dc:	c9 53       	subi	r28, 0x39	; 57
    23de:	d5 40       	sbci	r29, 0x05	; 5
	FONA_GET_NETREG back = (FONA_GET_NETREG)memStoredVal;
	RM_LOG(F("Cast back after int storage val:"));
    23e0:	66 ea       	ldi	r22, 0xA6	; 166
    23e2:	75 e0       	ldi	r23, 0x05	; 5
    23e4:	87 e8       	ldi	r24, 0x87	; 135
    23e6:	94 e0       	ldi	r25, 0x04	; 4
    23e8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(back, BIN);
    23ec:	61 2f       	mov	r22, r17
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	42 e0       	ldi	r20, 0x02	; 2
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	87 e8       	ldi	r24, 0x87	; 135
    23f6:	94 e0       	ldi	r25, 0x04	; 4
    23f8:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>
    23fc:	81 2f       	mov	r24, r17
    23fe:	8c 71       	andi	r24, 0x1C	; 28
	
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_0) RM_LOGLN(F("*** TEST FAIL @1 ***"));
    2400:	19 f4       	brne	.+6      	; 0x2408 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xa8>
    2402:	61 e9       	ldi	r22, 0x91	; 145
    2404:	75 e0       	ldi	r23, 0x05	; 5
    2406:	13 c0       	rjmp	.+38     	; 0x242e <_ZN13ExtendedTests20runExtendedTypesTestEv+0xce>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_1) RM_LOGLN(F("*** TEST FAIL @2 ***"));
    2408:	84 30       	cpi	r24, 0x04	; 4
    240a:	19 f4       	brne	.+6      	; 0x2412 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xb2>
    240c:	6c e7       	ldi	r22, 0x7C	; 124
    240e:	75 e0       	ldi	r23, 0x05	; 5
    2410:	0e c0       	rjmp	.+28     	; 0x242e <_ZN13ExtendedTests20runExtendedTypesTestEv+0xce>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_2) RM_LOGLN(F("*** TEST FAIL @3 ***"));
    2412:	88 30       	cpi	r24, 0x08	; 8
    2414:	19 f4       	brne	.+6      	; 0x241c <_ZN13ExtendedTests20runExtendedTypesTestEv+0xbc>
    2416:	67 e6       	ldi	r22, 0x67	; 103
    2418:	75 e0       	ldi	r23, 0x05	; 5
    241a:	09 c0       	rjmp	.+18     	; 0x242e <_ZN13ExtendedTests20runExtendedTypesTestEv+0xce>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_3) RM_LOGLN(F("*** TEST FAIL @4 ***"));
    241c:	8c 30       	cpi	r24, 0x0C	; 12
    241e:	19 f4       	brne	.+6      	; 0x2426 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc6>
    2420:	62 e5       	ldi	r22, 0x52	; 82
    2422:	75 e0       	ldi	r23, 0x05	; 5
    2424:	04 c0       	rjmp	.+8      	; 0x242e <_ZN13ExtendedTests20runExtendedTypesTestEv+0xce>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_4) RM_LOGLN(F("*** TEST FAIL @5 ***"));
    2426:	80 31       	cpi	r24, 0x10	; 16
    2428:	39 f4       	brne	.+14     	; 0x2438 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd8>
    242a:	6d e3       	ldi	r22, 0x3D	; 61
    242c:	75 e0       	ldi	r23, 0x05	; 5
    242e:	87 e8       	ldi	r24, 0x87	; 135
    2430:	94 e0       	ldi	r25, 0x04	; 4
    2432:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2436:	02 c0       	rjmp	.+4      	; 0x243c <_ZN13ExtendedTests20runExtendedTypesTestEv+0xdc>
	if (NETREG_ONLY_NETSTAT(back) != FONA_GET_NETREG::NETSTAT_5) RM_LOGLN(F("*** TEST FAIL @6 ***"));
    2438:	84 31       	cpi	r24, 0x14	; 20
    243a:	31 f0       	breq	.+12     	; 0x2448 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xe8>
    243c:	68 e2       	ldi	r22, 0x28	; 40
    243e:	75 e0       	ldi	r23, 0x05	; 5
    2440:	87 e8       	ldi	r24, 0x87	; 135
    2442:	94 e0       	ldi	r25, 0x04	; 4
    2444:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2448:	01 2f       	mov	r16, r17
    244a:	03 70       	andi	r16, 0x03	; 3
	
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_0) RM_LOGLN(F("*** TEST FAIL @7 ***"));
    244c:	39 f4       	brne	.+14     	; 0x245c <_ZN13ExtendedTests20runExtendedTypesTestEv+0xfc>
    244e:	63 e1       	ldi	r22, 0x13	; 19
    2450:	75 e0       	ldi	r23, 0x05	; 5
    2452:	87 e8       	ldi	r24, 0x87	; 135
    2454:	94 e0       	ldi	r25, 0x04	; 4
    2456:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x100>
	if (NETREG_ONLY_RESULT_CODE(back) != FONA_GET_NETREG::RESULT_CODE_1) RM_LOGLN(F("*** TEST FAIL @8 ***"));
    245c:	01 30       	cpi	r16, 0x01	; 1
    245e:	71 f0       	breq	.+28     	; 0x247c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x11c>
    2460:	6e ef       	ldi	r22, 0xFE	; 254
    2462:	74 e0       	ldi	r23, 0x04	; 4
    2464:	87 e8       	ldi	r24, 0x87	; 135
    2466:	94 e0       	ldi	r25, 0x04	; 4
    2468:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_2) RM_LOGLN(F("*** TEST FAIL @9 ***"));
    246c:	02 30       	cpi	r16, 0x02	; 2
    246e:	31 f4       	brne	.+12     	; 0x247c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x11c>
    2470:	69 ee       	ldi	r22, 0xE9	; 233
    2472:	74 e0       	ldi	r23, 0x04	; 4
    2474:	87 e8       	ldi	r24, 0x87	; 135
    2476:	94 e0       	ldi	r25, 0x04	; 4
    2478:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (NETREG_ONLY_ERROR(back) != FONA_GET_NETREG::IS_ERROR) RM_LOGLN(F("*** TEST FAIL @10 ***"));
    247c:	15 fd       	sbrc	r17, 5
    247e:	06 c0       	rjmp	.+12     	; 0x248c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x12c>
    2480:	63 ed       	ldi	r22, 0xD3	; 211
    2482:	74 e0       	ldi	r23, 0x04	; 4
    2484:	87 e8       	ldi	r24, 0x87	; 135
    2486:	94 e0       	ldi	r25, 0x04	; 4
    2488:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Print test
	RM_LOG(F("Test For Print Output:"));
    248c:	6c eb       	ldi	r22, 0xBC	; 188
    248e:	74 e0       	ldi	r23, 0x04	; 4
    2490:	87 e8       	ldi	r24, 0x87	; 135
    2492:	94 e0       	ldi	r25, 0x04	; 4
    2494:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
	Helpers::printRSSI(&result);
    2498:	ce 01       	movw	r24, r28
    249a:	8a 5c       	subi	r24, 0xCA	; 202
    249c:	9a 4f       	sbci	r25, 0xFA	; 250
    249e:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	RM_LOGLN(F("--------------------------"));
    24a2:	61 ea       	ldi	r22, 0xA1	; 161
    24a4:	74 e0       	ldi	r23, 0x04	; 4
    24a6:	87 e8       	ldi	r24, 0x87	; 135
    24a8:	94 e0       	ldi	r25, 0x04	; 4
    24aa:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Avoid this with lib:-
	//char r = -127;
	//char q = 129;
	//Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    24ae:	d1 2c       	mov	r13, r1
	
		char input[1];
		input[0] = i;
    24b0:	8e 01       	movw	r16, r28
    24b2:	0f 54       	subi	r16, 0x4F	; 79
    24b4:	1b 4f       	sbci	r17, 0xFB	; 251
	
		char output2[10]{0};
    24b6:	7e 01       	movw	r14, r28
    24b8:	87 e1       	ldi	r24, 0x17	; 23
    24ba:	e8 1a       	sub	r14, r24
    24bc:	8c ef       	ldi	r24, 0xFC	; 252
    24be:	f8 0a       	sbc	r15, r24
    24c0:	8a e0       	ldi	r24, 0x0A	; 10
    24c2:	c8 2e       	mov	r12, r24
		Helpers::base64_encode((char*)&output2, (char*)&input, 1);
	
		//RM_LOG2(F("INPUT WAS"), i);
		//RM_LOG2(F("INPUT ENCODING WAS"), output2);
	
		char output3[10]{0};
    24c4:	fe 01       	movw	r30, r28
    24c6:	31 96       	adiw	r30, 0x01	; 1
    24c8:	5f 01       	movw	r10, r30
	//char q = 129;
	//Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
	
		char input[1];
		input[0] = i;
    24ca:	f8 01       	movw	r30, r16
    24cc:	d0 82       	st	Z, r13
	
		char output2[10]{0};
    24ce:	f7 01       	movw	r30, r14
    24d0:	8c 2d       	mov	r24, r12
    24d2:	11 92       	st	Z+, r1
    24d4:	8a 95       	dec	r24
    24d6:	e9 f7       	brne	.-6      	; 0x24d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x172>
		Helpers::base64_encode((char*)&output2, (char*)&input, 1);
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	b8 01       	movw	r22, r16
    24de:	c7 01       	movw	r24, r14
    24e0:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN7Helpers13base64_encodeEPcS0_i>
	
		//RM_LOG2(F("INPUT WAS"), i);
		//RM_LOG2(F("INPUT ENCODING WAS"), output2);
	
		char output3[10]{0};
    24e4:	f5 01       	movw	r30, r10
    24e6:	8c 2d       	mov	r24, r12
    24e8:	11 92       	st	Z+, r1
    24ea:	8a 95       	dec	r24
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x188>
		Helpers::base64_decode((char*)&output3, (char*)&output2, 10);
    24ee:	4a e0       	ldi	r20, 0x0A	; 10
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	b7 01       	movw	r22, r14
    24f4:	c5 01       	movw	r24, r10
    24f6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN7Helpers13base64_decodeEPcS0_i>
	
		//RM_LOG2(F("DECODED BACK WAS"), (uint8_t)output3[0]);
		
		if ((uint8_t)output3[0] != i) RM_LOGLN(F("*** TEST FAIL @ENCODING ***"));
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	d8 16       	cp	r13, r24
    24fe:	31 f0       	breq	.+12     	; 0x250c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1ac>
    2500:	65 e8       	ldi	r22, 0x85	; 133
    2502:	74 e0       	ldi	r23, 0x04	; 4
    2504:	87 e8       	ldi	r24, 0x87	; 135
    2506:	94 e0       	ldi	r25, 0x04	; 4
    2508:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		if (i==255) break;
    250c:	9f ef       	ldi	r25, 0xFF	; 255
    250e:	d9 16       	cp	r13, r25
    2510:	11 f0       	breq	.+4      	; 0x2516 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1b6>
	
	//Avoid this with lib:-
	//char r = -127;
	//char q = 129;
	//Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2512:	d3 94       	inc	r13
    2514:	da cf       	rjmp	.-76     	; 0x24ca <_ZN13ExtendedTests20runExtendedTypesTestEv+0x16a>
	
	
	
	//1) Single round-trip test
	
	SensorData sd;			//size ~ 10 bytes
    2516:	99 24       	eor	r9, r9
    2518:	93 94       	inc	r9
    251a:	c4 5d       	subi	r28, 0xD4	; 212
    251c:	da 4f       	sbci	r29, 0xFA	; 250
    251e:	98 82       	st	Y, r9
    2520:	cc 52       	subi	r28, 0x2C	; 44
    2522:	d5 40       	sbci	r29, 0x05	; 5
    2524:	cd 5c       	subi	r28, 0xCD	; 205
    2526:	da 4f       	sbci	r29, 0xFA	; 250
    2528:	19 82       	std	Y+1, r1	; 0x01
    252a:	18 82       	st	Y, r1
    252c:	c3 53       	subi	r28, 0x33	; 51
    252e:	d5 40       	sbci	r29, 0x05	; 5
	sd.battVoltage = 20245; //Includes mV - e.g. 20.245V
    2530:	85 e1       	ldi	r24, 0x15	; 21
    2532:	9f e4       	ldi	r25, 0x4F	; 79
    2534:	c3 5d       	subi	r28, 0xD3	; 211
    2536:	da 4f       	sbci	r29, 0xFA	; 250
    2538:	99 83       	std	Y+1, r25	; 0x01
    253a:	88 83       	st	Y, r24
    253c:	cd 52       	subi	r28, 0x2D	; 45
    253e:	d5 40       	sbci	r29, 0x05	; 5
	sd.current = 65535;
    2540:	8f ef       	ldi	r24, 0xFF	; 255
    2542:	9f ef       	ldi	r25, 0xFF	; 255
    2544:	c1 5d       	subi	r28, 0xD1	; 209
    2546:	da 4f       	sbci	r29, 0xFA	; 250
    2548:	99 83       	std	Y+1, r25	; 0x01
    254a:	88 83       	st	Y, r24
    254c:	cf 52       	subi	r28, 0x2F	; 47
    254e:	d5 40       	sbci	r29, 0x05	; 5
	sd.errorChar = 3;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	cb 5c       	subi	r28, 0xCB	; 203
    2554:	da 4f       	sbci	r29, 0xFA	; 250
    2556:	88 83       	st	Y, r24
    2558:	c5 53       	subi	r28, 0x35	; 53
    255a:	d5 40       	sbci	r29, 0x05	; 5
	sd.pVVoltage = 64913;
    255c:	81 e9       	ldi	r24, 0x91	; 145
    255e:	9d ef       	ldi	r25, 0xFD	; 253
    2560:	cf 5c       	subi	r28, 0xCF	; 207
    2562:	da 4f       	sbci	r29, 0xFA	; 250
    2564:	99 83       	std	Y+1, r25	; 0x01
    2566:	88 83       	st	Y, r24
    2568:	c1 53       	subi	r28, 0x31	; 49
    256a:	d5 40       	sbci	r29, 0x05	; 5
	sd.temperature = 0;
	Helpers::printSensorData(&sd);
    256c:	ce 01       	movw	r24, r28
    256e:	84 5d       	subi	r24, 0xD4	; 212
    2570:	9a 4f       	sbci	r25, 0xFA	; 250
    2572:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	uint8_t typicalMemUsage = sizeof("20245-65535-3-64913-0"); //23 bytes
	RM_LOG2("Basic int->str usage would be", typicalMemUsage);
    2576:	67 e7       	ldi	r22, 0x77	; 119
    2578:	71 e0       	ldi	r23, 0x01	; 1
    257a:	87 e8       	ldi	r24, 0x87	; 135
    257c:	94 e0       	ldi	r25, 0x04	; 4
    257e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    2582:	66 e4       	ldi	r22, 0x46	; 70
    2584:	71 e0       	ldi	r23, 0x01	; 1
    2586:	87 e8       	ldi	r24, 0x87	; 135
    2588:	94 e0       	ldi	r25, 0x04	; 4
    258a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    258e:	4a e0       	ldi	r20, 0x0A	; 10
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	66 e1       	ldi	r22, 0x16	; 22
    2594:	87 e8       	ldi	r24, 0x87	; 135
    2596:	94 e0       	ldi	r25, 0x04	; 4
    2598:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <_ZN5Print7printlnEhi>
	
	char output[100];
	int len = Helpers::base64_encode(output, (char*)&sd, sizeof(SensorData));
    259c:	4a e0       	ldi	r20, 0x0A	; 10
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	be 01       	movw	r22, r28
    25a2:	64 5d       	subi	r22, 0xD4	; 212
    25a4:	7a 4f       	sbci	r23, 0xFA	; 250
    25a6:	c8 01       	movw	r24, r16
    25a8:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN7Helpers13base64_encodeEPcS0_i>
    25ac:	6c 01       	movw	r12, r24
	RM_LOG("Encoded result to be sent over Web is ");
    25ae:	65 e9       	ldi	r22, 0x95	; 149
    25b0:	71 e0       	ldi	r23, 0x01	; 1
    25b2:	87 e8       	ldi	r24, 0x87	; 135
    25b4:	94 e0       	ldi	r25, 0x04	; 4
    25b6:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
	RM_LOGLN(output);
    25ba:	b8 01       	movw	r22, r16
    25bc:	87 e8       	ldi	r24, 0x87	; 135
    25be:	94 e0       	ldi	r25, 0x04	; 4
    25c0:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
	RM_LOG2("-Expected size given of ", Helpers::base64_enc_len(sizeof(SensorData)));
    25c4:	6c eb       	ldi	r22, 0xBC	; 188
    25c6:	71 e0       	ldi	r23, 0x01	; 1
    25c8:	87 e8       	ldi	r24, 0x87	; 135
    25ca:	94 e0       	ldi	r25, 0x04	; 4
    25cc:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    25d0:	66 e4       	ldi	r22, 0x46	; 70
    25d2:	71 e0       	ldi	r23, 0x01	; 1
    25d4:	87 e8       	ldi	r24, 0x87	; 135
    25d6:	94 e0       	ldi	r25, 0x04	; 4
    25d8:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    25dc:	8a e0       	ldi	r24, 0x0A	; 10
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN7Helpers14base64_enc_lenEi>
    25e4:	4a e0       	ldi	r20, 0x0A	; 10
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	bc 01       	movw	r22, r24
    25ea:	87 e8       	ldi	r24, 0x87	; 135
    25ec:	94 e0       	ldi	r25, 0x04	; 4
    25ee:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>
	RM_LOG2("-Actual actual resulting size of ", len);
    25f2:	65 ed       	ldi	r22, 0xD5	; 213
    25f4:	71 e0       	ldi	r23, 0x01	; 1
    25f6:	87 e8       	ldi	r24, 0x87	; 135
    25f8:	94 e0       	ldi	r25, 0x04	; 4
    25fa:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    25fe:	66 e4       	ldi	r22, 0x46	; 70
    2600:	71 e0       	ldi	r23, 0x01	; 1
    2602:	87 e8       	ldi	r24, 0x87	; 135
    2604:	94 e0       	ldi	r25, 0x04	; 4
    2606:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    260a:	4a e0       	ldi	r20, 0x0A	; 10
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	b6 01       	movw	r22, r12
    2610:	87 e8       	ldi	r24, 0x87	; 135
    2612:	94 e0       	ldi	r25, 0x04	; 4
    2614:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>
	RM_LOGLN("\t(excluding the '0' at the end incase to be treated as string)");
    2618:	67 ef       	ldi	r22, 0xF7	; 247
    261a:	71 e0       	ldi	r23, 0x01	; 1
    261c:	87 e8       	ldi	r24, 0x87	; 135
    261e:	94 e0       	ldi	r25, 0x04	; 4
    2620:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
	
	
	SensorData sdAfter;
    2624:	ce 5d       	subi	r28, 0xDE	; 222
    2626:	da 4f       	sbci	r29, 0xFA	; 250
    2628:	98 82       	st	Y, r9
    262a:	c2 52       	subi	r28, 0x22	; 34
    262c:	d5 40       	sbci	r29, 0x05	; 5
    262e:	cd 5d       	subi	r28, 0xDD	; 221
    2630:	da 4f       	sbci	r29, 0xFA	; 250
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	18 82       	st	Y, r1
    2636:	c3 52       	subi	r28, 0x23	; 35
    2638:	d5 40       	sbci	r29, 0x05	; 5
    263a:	cb 5d       	subi	r28, 0xDB	; 219
    263c:	da 4f       	sbci	r29, 0xFA	; 250
    263e:	19 82       	std	Y+1, r1	; 0x01
    2640:	18 82       	st	Y, r1
    2642:	c5 52       	subi	r28, 0x25	; 37
    2644:	d5 40       	sbci	r29, 0x05	; 5
    2646:	c9 5d       	subi	r28, 0xD9	; 217
    2648:	da 4f       	sbci	r29, 0xFA	; 250
    264a:	19 82       	std	Y+1, r1	; 0x01
    264c:	18 82       	st	Y, r1
    264e:	c7 52       	subi	r28, 0x27	; 39
    2650:	d5 40       	sbci	r29, 0x05	; 5
    2652:	c7 5d       	subi	r28, 0xD7	; 215
    2654:	da 4f       	sbci	r29, 0xFA	; 250
    2656:	19 82       	std	Y+1, r1	; 0x01
    2658:	18 82       	st	Y, r1
    265a:	c9 52       	subi	r28, 0x29	; 41
    265c:	d5 40       	sbci	r29, 0x05	; 5
    265e:	c5 5d       	subi	r28, 0xD5	; 213
    2660:	da 4f       	sbci	r29, 0xFA	; 250
    2662:	18 82       	st	Y, r1
    2664:	cb 52       	subi	r28, 0x2B	; 43
    2666:	d5 40       	sbci	r29, 0x05	; 5
	int lenAfter = Helpers::base64_decode((char*)&sdAfter, output, len);
    2668:	a6 01       	movw	r20, r12
    266a:	b8 01       	movw	r22, r16
    266c:	ce 01       	movw	r24, r28
    266e:	8e 5d       	subi	r24, 0xDE	; 222
    2670:	9a 4f       	sbci	r25, 0xFA	; 250
    2672:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN7Helpers13base64_decodeEPcS0_i>
    2676:	6c 01       	movw	r12, r24
	RM_LOG2("Decoded result received over Web has size of ", lenAfter);
    2678:	66 e3       	ldi	r22, 0x36	; 54
    267a:	72 e0       	ldi	r23, 0x02	; 2
    267c:	87 e8       	ldi	r24, 0x87	; 135
    267e:	94 e0       	ldi	r25, 0x04	; 4
    2680:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    2684:	66 e4       	ldi	r22, 0x46	; 70
    2686:	71 e0       	ldi	r23, 0x01	; 1
    2688:	87 e8       	ldi	r24, 0x87	; 135
    268a:	94 e0       	ldi	r25, 0x04	; 4
    268c:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEPKc>
    2690:	4a e0       	ldi	r20, 0x0A	; 10
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	b6 01       	movw	r22, r12
    2696:	87 e8       	ldi	r24, 0x87	; 135
    2698:	94 e0       	ldi	r25, 0x04	; 4
    269a:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN5Print7printlnEii>
	Helpers::printSensorData(&sdAfter);
    269e:	ce 01       	movw	r24, r28
    26a0:	8e 5d       	subi	r24, 0xDE	; 222
    26a2:	9a 4f       	sbci	r25, 0xFA	; 250
    26a4:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	if (sdAfter.battVoltage != sd.battVoltage) RM_LOGLN(F("*** ENC TEST FAIL @1 ***"));
    26a8:	cd 5d       	subi	r28, 0xDD	; 221
    26aa:	da 4f       	sbci	r29, 0xFA	; 250
    26ac:	28 81       	ld	r18, Y
    26ae:	39 81       	ldd	r19, Y+1	; 0x01
    26b0:	c3 52       	subi	r28, 0x23	; 35
    26b2:	d5 40       	sbci	r29, 0x05	; 5
    26b4:	c3 5d       	subi	r28, 0xD3	; 211
    26b6:	da 4f       	sbci	r29, 0xFA	; 250
    26b8:	88 81       	ld	r24, Y
    26ba:	99 81       	ldd	r25, Y+1	; 0x01
    26bc:	cd 52       	subi	r28, 0x2D	; 45
    26be:	d5 40       	sbci	r29, 0x05	; 5
    26c0:	28 17       	cp	r18, r24
    26c2:	39 07       	cpc	r19, r25
    26c4:	31 f0       	breq	.+12     	; 0x26d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x372>
    26c6:	6c e6       	ldi	r22, 0x6C	; 108
    26c8:	74 e0       	ldi	r23, 0x04	; 4
    26ca:	87 e8       	ldi	r24, 0x87	; 135
    26cc:	94 e0       	ldi	r25, 0x04	; 4
    26ce:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.current != sd.current) RM_LOGLN(F("*** ENC TEST FAIL @2 ***"));
    26d2:	cb 5d       	subi	r28, 0xDB	; 219
    26d4:	da 4f       	sbci	r29, 0xFA	; 250
    26d6:	28 81       	ld	r18, Y
    26d8:	39 81       	ldd	r19, Y+1	; 0x01
    26da:	c5 52       	subi	r28, 0x25	; 37
    26dc:	d5 40       	sbci	r29, 0x05	; 5
    26de:	c1 5d       	subi	r28, 0xD1	; 209
    26e0:	da 4f       	sbci	r29, 0xFA	; 250
    26e2:	88 81       	ld	r24, Y
    26e4:	99 81       	ldd	r25, Y+1	; 0x01
    26e6:	cf 52       	subi	r28, 0x2F	; 47
    26e8:	d5 40       	sbci	r29, 0x05	; 5
    26ea:	28 17       	cp	r18, r24
    26ec:	39 07       	cpc	r19, r25
    26ee:	31 f0       	breq	.+12     	; 0x26fc <_ZN13ExtendedTests20runExtendedTypesTestEv+0x39c>
    26f0:	63 e5       	ldi	r22, 0x53	; 83
    26f2:	74 e0       	ldi	r23, 0x04	; 4
    26f4:	87 e8       	ldi	r24, 0x87	; 135
    26f6:	94 e0       	ldi	r25, 0x04	; 4
    26f8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.errorChar != sd.errorChar) RM_LOGLN(F("*** ENC TEST FAIL @3 ***"));
    26fc:	c5 5d       	subi	r28, 0xD5	; 213
    26fe:	da 4f       	sbci	r29, 0xFA	; 250
    2700:	98 81       	ld	r25, Y
    2702:	cb 52       	subi	r28, 0x2B	; 43
    2704:	d5 40       	sbci	r29, 0x05	; 5
    2706:	cb 5c       	subi	r28, 0xCB	; 203
    2708:	da 4f       	sbci	r29, 0xFA	; 250
    270a:	88 81       	ld	r24, Y
    270c:	c5 53       	subi	r28, 0x35	; 53
    270e:	d5 40       	sbci	r29, 0x05	; 5
    2710:	98 17       	cp	r25, r24
    2712:	31 f0       	breq	.+12     	; 0x2720 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3c0>
    2714:	6a e3       	ldi	r22, 0x3A	; 58
    2716:	74 e0       	ldi	r23, 0x04	; 4
    2718:	87 e8       	ldi	r24, 0x87	; 135
    271a:	94 e0       	ldi	r25, 0x04	; 4
    271c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.pVVoltage != sd.pVVoltage) RM_LOGLN(F("*** ENC TEST FAIL @4 ***"));
    2720:	c9 5d       	subi	r28, 0xD9	; 217
    2722:	da 4f       	sbci	r29, 0xFA	; 250
    2724:	28 81       	ld	r18, Y
    2726:	39 81       	ldd	r19, Y+1	; 0x01
    2728:	c7 52       	subi	r28, 0x27	; 39
    272a:	d5 40       	sbci	r29, 0x05	; 5
    272c:	cf 5c       	subi	r28, 0xCF	; 207
    272e:	da 4f       	sbci	r29, 0xFA	; 250
    2730:	88 81       	ld	r24, Y
    2732:	99 81       	ldd	r25, Y+1	; 0x01
    2734:	c1 53       	subi	r28, 0x31	; 49
    2736:	d5 40       	sbci	r29, 0x05	; 5
    2738:	28 17       	cp	r18, r24
    273a:	39 07       	cpc	r19, r25
    273c:	31 f0       	breq	.+12     	; 0x274a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3ea>
    273e:	61 e2       	ldi	r22, 0x21	; 33
    2740:	74 e0       	ldi	r23, 0x04	; 4
    2742:	87 e8       	ldi	r24, 0x87	; 135
    2744:	94 e0       	ldi	r25, 0x04	; 4
    2746:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.temperature != sd.temperature) RM_LOGLN(F("*** ENC TEST FAIL @5 ***"));
    274a:	c7 5d       	subi	r28, 0xD7	; 215
    274c:	da 4f       	sbci	r29, 0xFA	; 250
    274e:	28 81       	ld	r18, Y
    2750:	39 81       	ldd	r19, Y+1	; 0x01
    2752:	c9 52       	subi	r28, 0x29	; 41
    2754:	d5 40       	sbci	r29, 0x05	; 5
    2756:	cd 5c       	subi	r28, 0xCD	; 205
    2758:	da 4f       	sbci	r29, 0xFA	; 250
    275a:	88 81       	ld	r24, Y
    275c:	99 81       	ldd	r25, Y+1	; 0x01
    275e:	c3 53       	subi	r28, 0x33	; 51
    2760:	d5 40       	sbci	r29, 0x05	; 5
    2762:	28 17       	cp	r18, r24
    2764:	39 07       	cpc	r19, r25
    2766:	31 f0       	breq	.+12     	; 0x2774 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x414>
    2768:	68 e0       	ldi	r22, 0x08	; 8
    276a:	74 e0       	ldi	r23, 0x04	; 4
    276c:	87 e8       	ldi	r24, 0x87	; 135
    276e:	94 e0       	ldi	r25, 0x04	; 4
    2770:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	RM_LOGLN(F("--------------------------"));
    2774:	6d ee       	ldi	r22, 0xED	; 237
    2776:	73 e0       	ldi	r23, 0x03	; 3
    2778:	87 e8       	ldi	r24, 0x87	; 135
    277a:	94 e0       	ldi	r25, 0x04	; 4
    277c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2780:	f7 01       	movw	r30, r14
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 83       	st	Z, r24
    2786:	12 82       	std	Z+2, r1	; 0x02
    2788:	11 82       	std	Z+1, r1	; 0x01
    278a:	14 82       	std	Z+4, r1	; 0x04
    278c:	13 82       	std	Z+3, r1	; 0x03
    278e:	16 82       	std	Z+6, r1	; 0x06
    2790:	15 82       	std	Z+5, r1	; 0x05
    2792:	10 86       	std	Z+8, r1	; 0x08
    2794:	17 82       	std	Z+7, r1	; 0x07
    2796:	11 86       	std	Z+9, r1	; 0x09
    2798:	3a 96       	adiw	r30, 0x0a	; 10
	
	//2) Test a large sequence of them to ensure correctness- MAX_READINGS constant?
	
	uint8_t COUNT = 20;
	SensorData bulkSd[COUNT];
    279a:	0e 17       	cp	r16, r30
    279c:	1f 07       	cpc	r17, r31
    279e:	91 f7       	brne	.-28     	; 0x2784 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x424>
	FONA_GET_RSSI rssi;
	rssi.rssi = 15;
	rssi.ber = 3;
	rssi.netReg = (FONA_GET_NETREG)(FONA_GET_NETREG::NETSTAT_4 | FONA_GET_NETREG::RESULT_CODE_1);
	
	GsmPayload gsm;
    27a0:	ce 01       	movw	r24, r28
    27a2:	8b 5e       	subi	r24, 0xEB	; 235
    27a4:	9a 4f       	sbci	r25, 0xFA	; 250
    27a6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN10GsmPayloadC1Ev>
	gsm.moduleId=33;
    27aa:	81 e2       	ldi	r24, 0x21	; 33
    27ac:	cb 5e       	subi	r28, 0xEB	; 235
    27ae:	da 4f       	sbci	r29, 0xFA	; 250
    27b0:	88 83       	st	Y, r24
    27b2:	c5 51       	subi	r28, 0x15	; 21
    27b4:	d5 40       	sbci	r29, 0x05	; 5
	gsm.thisBootNumber = 1055;
    27b6:	8f e1       	ldi	r24, 0x1F	; 31
    27b8:	94 e0       	ldi	r25, 0x04	; 4
    27ba:	ca 5e       	subi	r28, 0xEA	; 234
    27bc:	da 4f       	sbci	r29, 0xFA	; 250
    27be:	99 83       	std	Y+1, r25	; 0x01
    27c0:	88 83       	st	Y, r24
    27c2:	c6 51       	subi	r28, 0x16	; 22
    27c4:	d5 40       	sbci	r29, 0x05	; 5
	gsm.rssi = rssi;
    27c6:	8f e0       	ldi	r24, 0x0F	; 15
    27c8:	c8 5e       	subi	r28, 0xE8	; 232
    27ca:	da 4f       	sbci	r29, 0xFA	; 250
    27cc:	88 83       	st	Y, r24
    27ce:	c8 51       	subi	r28, 0x18	; 24
    27d0:	d5 40       	sbci	r29, 0x05	; 5
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	c7 5e       	subi	r28, 0xE7	; 231
    27d6:	da 4f       	sbci	r29, 0xFA	; 250
    27d8:	88 83       	st	Y, r24
    27da:	c9 51       	subi	r28, 0x19	; 25
    27dc:	d5 40       	sbci	r29, 0x05	; 5
    27de:	c6 5e       	subi	r28, 0xE6	; 230
    27e0:	da 4f       	sbci	r29, 0xFA	; 250
    27e2:	18 82       	st	Y, r1
    27e4:	ca 51       	subi	r28, 0x1A	; 26
    27e6:	d5 40       	sbci	r29, 0x05	; 5
    27e8:	81 e1       	ldi	r24, 0x11	; 17
    27ea:	c5 5e       	subi	r28, 0xE5	; 229
    27ec:	da 4f       	sbci	r29, 0xFA	; 250
    27ee:	88 83       	st	Y, r24
    27f0:	cb 51       	subi	r28, 0x1B	; 27
    27f2:	d5 40       	sbci	r29, 0x05	; 5
	gsm.addSensorData(&bulkSd[0], COUNT);
    27f4:	44 e1       	ldi	r20, 0x14	; 20
    27f6:	b7 01       	movw	r22, r14
    27f8:	ce 01       	movw	r24, r28
    27fa:	8b 5e       	subi	r24, 0xEB	; 235
    27fc:	9a 4f       	sbci	r25, 0xFA	; 250
    27fe:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN10GsmPayload13addSensorDataEP10SensorDatah>
	
	char forWeb[1000];
	gsm.getPayload(&forWeb[0], 1000);
    2802:	48 ee       	ldi	r20, 0xE8	; 232
    2804:	53 e0       	ldi	r21, 0x03	; 3
    2806:	b5 01       	movw	r22, r10
    2808:	ce 01       	movw	r24, r28
    280a:	8b 5e       	subi	r24, 0xEB	; 235
    280c:	9a 4f       	sbci	r25, 0xFA	; 250
    280e:	0e 94 05 09 	call	0x120a	; 0x120a <_ZN10GsmPayload10getPayloadEPcj>
	
	RM_LOG(F("GSM Payload To Be Sent Over Web:"));
    2812:	6c ec       	ldi	r22, 0xCC	; 204
    2814:	73 e0       	ldi	r23, 0x03	; 3
    2816:	87 e8       	ldi	r24, 0x87	; 135
    2818:	94 e0       	ldi	r25, 0x04	; 4
    281a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(forWeb);
    281e:	b5 01       	movw	r22, r10
    2820:	87 e8       	ldi	r24, 0x87	; 135
    2822:	94 e0       	ldi	r25, 0x04	; 4
    2824:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN5Print7printlnEPKc>
	
	RM_LOGLN(F("------------------------"));
    2828:	63 eb       	ldi	r22, 0xB3	; 179
    282a:	73 e0       	ldi	r23, 0x03	; 3
    282c:	87 e8       	ldi	r24, 0x87	; 135
    282e:	94 e0       	ldi	r25, 0x04	; 4
    2830:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2834:	c7 5c       	subi	r28, 0xC7	; 199
    2836:	da 4f       	sbci	r29, 0xFA	; 250
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	08 95       	ret

0000285a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    285a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    285c:	91 8d       	ldd	r25, Z+25	; 0x19
    285e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2860:	89 2f       	mov	r24, r25
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	80 5c       	subi	r24, 0xC0	; 192
    2866:	9f 4f       	sbci	r25, 0xFF	; 255
    2868:	82 1b       	sub	r24, r18
    286a:	91 09       	sbc	r25, r1
}
    286c:	8f 73       	andi	r24, 0x3F	; 63
    286e:	99 27       	eor	r25, r25
    2870:	08 95       	ret

00002872 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2872:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2874:	91 8d       	ldd	r25, Z+25	; 0x19
    2876:	82 8d       	ldd	r24, Z+26	; 0x1a
    2878:	98 17       	cp	r25, r24
    287a:	31 f0       	breq	.+12     	; 0x2888 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    287c:	82 8d       	ldd	r24, Z+26	; 0x1a
    287e:	e8 0f       	add	r30, r24
    2880:	f1 1d       	adc	r31, r1
    2882:	85 8d       	ldd	r24, Z+29	; 0x1d
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2888:	8f ef       	ldi	r24, 0xFF	; 255
    288a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    288c:	08 95       	ret

0000288e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    288e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2890:	91 8d       	ldd	r25, Z+25	; 0x19
    2892:	82 8d       	ldd	r24, Z+26	; 0x1a
    2894:	98 17       	cp	r25, r24
    2896:	61 f0       	breq	.+24     	; 0x28b0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2898:	82 8d       	ldd	r24, Z+26	; 0x1a
    289a:	df 01       	movw	r26, r30
    289c:	a8 0f       	add	r26, r24
    289e:	b1 1d       	adc	r27, r1
    28a0:	5d 96       	adiw	r26, 0x1d	; 29
    28a2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    28a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    28a6:	9f 5f       	subi	r25, 0xFF	; 255
    28a8:	9f 73       	andi	r25, 0x3F	; 63
    28aa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    28b4:	08 95       	ret

000028b6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    28b6:	80 eb       	ldi	r24, 0xB0	; 176
    28b8:	95 e1       	ldi	r25, 0x15	; 21
    28ba:	89 2b       	or	r24, r25
    28bc:	49 f0       	breq	.+18     	; 0x28d0 <_Z14serialEventRunv+0x1a>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	89 2b       	or	r24, r25
    28c4:	29 f0       	breq	.+10     	; 0x28d0 <_Z14serialEventRunv+0x1a>
    28c6:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_Z17Serial0_availablev>
    28ca:	81 11       	cpse	r24, r1
    28cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    28d0:	08 95       	ret

000028d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    28d2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    28d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    28d6:	df 01       	movw	r26, r30
    28d8:	a8 0f       	add	r26, r24
    28da:	b1 1d       	adc	r27, r1
    28dc:	a3 5a       	subi	r26, 0xA3	; 163
    28de:	bf 4f       	sbci	r27, 0xFF	; 255
    28e0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    28e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	8f 73       	andi	r24, 0x3F	; 63
    28ea:	99 27       	eor	r25, r25
    28ec:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    28ee:	a6 89       	ldd	r26, Z+22	; 0x16
    28f0:	b7 89       	ldd	r27, Z+23	; 0x17
    28f2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    28f4:	a0 89       	ldd	r26, Z+16	; 0x10
    28f6:	b1 89       	ldd	r27, Z+17	; 0x11
    28f8:	8c 91       	ld	r24, X
    28fa:	80 64       	ori	r24, 0x40	; 64
    28fc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    28fe:	93 8d       	ldd	r25, Z+27	; 0x1b
    2900:	84 8d       	ldd	r24, Z+28	; 0x1c
    2902:	98 13       	cpse	r25, r24
    2904:	06 c0       	rjmp	.+12     	; 0x2912 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2906:	02 88       	ldd	r0, Z+18	; 0x12
    2908:	f3 89       	ldd	r31, Z+19	; 0x13
    290a:	e0 2d       	mov	r30, r0
    290c:	80 81       	ld	r24, Z
    290e:	8f 7d       	andi	r24, 0xDF	; 223
    2910:	80 83       	st	Z, r24
    2912:	08 95       	ret

00002914 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2914:	ef 92       	push	r14
    2916:	ff 92       	push	r15
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	ec 01       	movw	r28, r24
  _written = true;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2926:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2928:	8c 8d       	ldd	r24, Y+28	; 0x1c
    292a:	98 13       	cpse	r25, r24
    292c:	05 c0       	rjmp	.+10     	; 0x2938 <_ZN14HardwareSerial5writeEh+0x24>
    292e:	e8 89       	ldd	r30, Y+16	; 0x10
    2930:	f9 89       	ldd	r31, Y+17	; 0x11
    2932:	80 81       	ld	r24, Z
    2934:	85 fd       	sbrc	r24, 5
    2936:	24 c0       	rjmp	.+72     	; 0x2980 <_ZN14HardwareSerial5writeEh+0x6c>
    2938:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    293a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    293c:	10 e0       	ldi	r17, 0x00	; 0
    293e:	0f 5f       	subi	r16, 0xFF	; 255
    2940:	1f 4f       	sbci	r17, 0xFF	; 255
    2942:	0f 73       	andi	r16, 0x3F	; 63
    2944:	11 27       	eor	r17, r17
    2946:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2948:	8c 8d       	ldd	r24, Y+28	; 0x1c
    294a:	e8 12       	cpse	r14, r24
    294c:	0c c0       	rjmp	.+24     	; 0x2966 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	07 fc       	sbrc	r0, 7
    2952:	fa cf       	rjmp	.-12     	; 0x2948 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2954:	e8 89       	ldd	r30, Y+16	; 0x10
    2956:	f9 89       	ldd	r31, Y+17	; 0x11
    2958:	80 81       	ld	r24, Z
    295a:	85 ff       	sbrs	r24, 5
    295c:	f5 cf       	rjmp	.-22     	; 0x2948 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    295e:	ce 01       	movw	r24, r28
    2960:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2964:	f1 cf       	rjmp	.-30     	; 0x2948 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2968:	fe 01       	movw	r30, r28
    296a:	e8 0f       	add	r30, r24
    296c:	f1 1d       	adc	r31, r1
    296e:	e3 5a       	subi	r30, 0xA3	; 163
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2974:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2976:	ea 89       	ldd	r30, Y+18	; 0x12
    2978:	fb 89       	ldd	r31, Y+19	; 0x13
    297a:	80 81       	ld	r24, Z
    297c:	80 62       	ori	r24, 0x20	; 32
    297e:	07 c0       	rjmp	.+14     	; 0x298e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2980:	ee 89       	ldd	r30, Y+22	; 0x16
    2982:	ff 89       	ldd	r31, Y+23	; 0x17
    2984:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2986:	e8 89       	ldd	r30, Y+16	; 0x10
    2988:	f9 89       	ldd	r31, Y+17	; 0x11
    298a:	80 81       	ld	r24, Z
    298c:	80 64       	ori	r24, 0x40	; 64
    298e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	08 95       	ret

000029a2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    29a8:	88 8d       	ldd	r24, Y+24	; 0x18
    29aa:	88 23       	and	r24, r24
    29ac:	c9 f0       	breq	.+50     	; 0x29e0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    29ae:	ea 89       	ldd	r30, Y+18	; 0x12
    29b0:	fb 89       	ldd	r31, Y+19	; 0x13
    29b2:	80 81       	ld	r24, Z
    29b4:	85 fd       	sbrc	r24, 5
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <_ZN14HardwareSerial5flushEv+0x20>
    29b8:	a8 89       	ldd	r26, Y+16	; 0x10
    29ba:	b9 89       	ldd	r27, Y+17	; 0x11
    29bc:	8c 91       	ld	r24, X
    29be:	86 fd       	sbrc	r24, 6
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	07 fc       	sbrc	r0, 7
    29c6:	f5 cf       	rjmp	.-22     	; 0x29b2 <_ZN14HardwareSerial5flushEv+0x10>
    29c8:	80 81       	ld	r24, Z
    29ca:	85 ff       	sbrs	r24, 5
    29cc:	f2 cf       	rjmp	.-28     	; 0x29b2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    29ce:	a8 89       	ldd	r26, Y+16	; 0x10
    29d0:	b9 89       	ldd	r27, Y+17	; 0x11
    29d2:	8c 91       	ld	r24, X
    29d4:	85 ff       	sbrs	r24, 5
    29d6:	ed cf       	rjmp	.-38     	; 0x29b2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    29d8:	ce 01       	movw	r24, r28
    29da:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    29de:	e7 cf       	rjmp	.-50     	; 0x29ae <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	08 95       	ret

000029e6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    29e6:	cf 92       	push	r12
    29e8:	df 92       	push	r13
    29ea:	ef 92       	push	r14
    29ec:	ff 92       	push	r15
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	ec 01       	movw	r28, r24
    29f6:	6a 01       	movw	r12, r20
    29f8:	7b 01       	movw	r14, r22
    29fa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    29fc:	e8 89       	ldd	r30, Y+16	; 0x10
    29fe:	f9 89       	ldd	r31, Y+17	; 0x11
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2a04:	41 15       	cp	r20, r1
    2a06:	51 4e       	sbci	r21, 0xE1	; 225
    2a08:	61 05       	cpc	r22, r1
    2a0a:	71 05       	cpc	r23, r1
    2a0c:	b1 f0       	breq	.+44     	; 0x2a3a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	79 e0       	ldi	r23, 0x09	; 9
    2a12:	8d e3       	ldi	r24, 0x3D	; 61
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a7 01       	movw	r20, r14
    2a18:	96 01       	movw	r18, r12
    2a1a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__udivmodsi4>
    2a1e:	da 01       	movw	r26, r20
    2a20:	c9 01       	movw	r24, r18
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	a1 09       	sbc	r26, r1
    2a26:	b1 09       	sbc	r27, r1
    2a28:	b6 95       	lsr	r27
    2a2a:	a7 95       	ror	r26
    2a2c:	97 95       	ror	r25
    2a2e:	87 95       	ror	r24
    2a30:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2a32:	21 15       	cp	r18, r1
    2a34:	80 e1       	ldi	r24, 0x10	; 16
    2a36:	38 07       	cpc	r19, r24
    2a38:	a8 f0       	brcs	.+42     	; 0x2a64 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2a3a:	e8 89       	ldd	r30, Y+16	; 0x10
    2a3c:	f9 89       	ldd	r31, Y+17	; 0x11
    2a3e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2a40:	60 e8       	ldi	r22, 0x80	; 128
    2a42:	74 e8       	ldi	r23, 0x84	; 132
    2a44:	8e e1       	ldi	r24, 0x1E	; 30
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a7 01       	movw	r20, r14
    2a4a:	96 01       	movw	r18, r12
    2a4c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__udivmodsi4>
    2a50:	da 01       	movw	r26, r20
    2a52:	c9 01       	movw	r24, r18
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	a1 09       	sbc	r26, r1
    2a58:	b1 09       	sbc	r27, r1
    2a5a:	b6 95       	lsr	r27
    2a5c:	a7 95       	ror	r26
    2a5e:	97 95       	ror	r25
    2a60:	87 95       	ror	r24
    2a62:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2a64:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a66:	fd 85       	ldd	r31, Y+13	; 0x0d
    2a68:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2a6a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a6c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a6e:	20 83       	st	Z, r18

  _written = false;
    2a70:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2a72:	ec 89       	ldd	r30, Y+20	; 0x14
    2a74:	fd 89       	ldd	r31, Y+21	; 0x15
    2a76:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2a78:	ea 89       	ldd	r30, Y+18	; 0x12
    2a7a:	fb 89       	ldd	r31, Y+19	; 0x13
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 61       	ori	r24, 0x10	; 16
    2a80:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2a82:	ea 89       	ldd	r30, Y+18	; 0x12
    2a84:	fb 89       	ldd	r31, Y+19	; 0x13
    2a86:	80 81       	ld	r24, Z
    2a88:	88 60       	ori	r24, 0x08	; 8
    2a8a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2a8c:	ea 89       	ldd	r30, Y+18	; 0x12
    2a8e:	fb 89       	ldd	r31, Y+19	; 0x13
    2a90:	80 81       	ld	r24, Z
    2a92:	80 68       	ori	r24, 0x80	; 128
    2a94:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2a96:	ea 89       	ldd	r30, Y+18	; 0x12
    2a98:	fb 89       	ldd	r31, Y+19	; 0x13
    2a9a:	80 81       	ld	r24, Z
    2a9c:	8f 7d       	andi	r24, 0xDF	; 223
    2a9e:	80 83       	st	Z, r24
}
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	ff 90       	pop	r15
    2aa8:	ef 90       	pop	r14
    2aaa:	df 90       	pop	r13
    2aac:	cf 90       	pop	r12
    2aae:	08 95       	ret

00002ab0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2ab0:	1f 92       	push	r1
    2ab2:	0f 92       	push	r0
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	2f 93       	push	r18
    2abc:	8f 93       	push	r24
    2abe:	9f 93       	push	r25
    2ac0:	ef 93       	push	r30
    2ac2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2ac4:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <Serial+0x10>
    2ac8:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <Serial+0x11>
    2acc:	80 81       	ld	r24, Z
    2ace:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <Serial+0x16>
    2ad2:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <Serial+0x17>
    2ad6:	82 fd       	sbrc	r24, 2
    2ad8:	12 c0       	rjmp	.+36     	; 0x2afe <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2ada:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2adc:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Serial+0x19>
    2ae0:	8f 5f       	subi	r24, 0xFF	; 255
    2ae2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2ae4:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <Serial+0x1a>
    2ae8:	82 17       	cp	r24, r18
    2aea:	51 f0       	breq	.+20     	; 0x2b00 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2aec:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Serial+0x19>
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	e9 57       	subi	r30, 0x79	; 121
    2af4:	fb 4f       	sbci	r31, 0xFB	; 251
    2af6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2af8:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Serial+0x19>
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2afe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2b00:	ff 91       	pop	r31
    2b02:	ef 91       	pop	r30
    2b04:	9f 91       	pop	r25
    2b06:	8f 91       	pop	r24
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2b14:	1f 92       	push	r1
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	0f 92       	push	r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	2f 93       	push	r18
    2b20:	3f 93       	push	r19
    2b22:	4f 93       	push	r20
    2b24:	5f 93       	push	r21
    2b26:	6f 93       	push	r22
    2b28:	7f 93       	push	r23
    2b2a:	8f 93       	push	r24
    2b2c:	9f 93       	push	r25
    2b2e:	af 93       	push	r26
    2b30:	bf 93       	push	r27
    2b32:	ef 93       	push	r30
    2b34:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2b36:	87 e8       	ldi	r24, 0x87	; 135
    2b38:	94 e0       	ldi	r25, 0x04	; 4
    2b3a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	bf 91       	pop	r27
    2b44:	af 91       	pop	r26
    2b46:	9f 91       	pop	r25
    2b48:	8f 91       	pop	r24
    2b4a:	7f 91       	pop	r23
    2b4c:	6f 91       	pop	r22
    2b4e:	5f 91       	pop	r21
    2b50:	4f 91       	pop	r20
    2b52:	3f 91       	pop	r19
    2b54:	2f 91       	pop	r18
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2b60:	87 e8       	ldi	r24, 0x87	; 135
    2b62:	94 e0       	ldi	r25, 0x04	; 4
    2b64:	0e 94 2d 14 	call	0x285a	; 0x285a <_ZN14HardwareSerial9availableEv>
    2b68:	21 e0       	ldi	r18, 0x01	; 1
    2b6a:	89 2b       	or	r24, r25
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <_Z17Serial0_availablev+0x10>
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
}
    2b70:	82 2f       	mov	r24, r18
    2b72:	08 95       	ret

00002b74 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b74:	e7 e8       	ldi	r30, 0x87	; 135
    2b76:	f4 e0       	ldi	r31, 0x04	; 4
    2b78:	13 82       	std	Z+3, r1	; 0x03
    2b7a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2b7c:	88 ee       	ldi	r24, 0xE8	; 232
    2b7e:	93 e0       	ldi	r25, 0x03	; 3
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	84 83       	std	Z+4, r24	; 0x04
    2b86:	95 83       	std	Z+5, r25	; 0x05
    2b88:	a6 83       	std	Z+6, r26	; 0x06
    2b8a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2b8c:	88 e6       	ldi	r24, 0x68	; 104
    2b8e:	92 e0       	ldi	r25, 0x02	; 2
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	85 ec       	ldi	r24, 0xC5	; 197
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	95 87       	std	Z+13, r25	; 0x0d
    2b9a:	84 87       	std	Z+12, r24	; 0x0c
    2b9c:	84 ec       	ldi	r24, 0xC4	; 196
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	97 87       	std	Z+15, r25	; 0x0f
    2ba2:	86 87       	std	Z+14, r24	; 0x0e
    2ba4:	80 ec       	ldi	r24, 0xC0	; 192
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	91 8b       	std	Z+17, r25	; 0x11
    2baa:	80 8b       	std	Z+16, r24	; 0x10
    2bac:	81 ec       	ldi	r24, 0xC1	; 193
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	93 8b       	std	Z+19, r25	; 0x13
    2bb2:	82 8b       	std	Z+18, r24	; 0x12
    2bb4:	82 ec       	ldi	r24, 0xC2	; 194
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	95 8b       	std	Z+21, r25	; 0x15
    2bba:	84 8b       	std	Z+20, r24	; 0x14
    2bbc:	86 ec       	ldi	r24, 0xC6	; 198
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	97 8b       	std	Z+23, r25	; 0x17
    2bc2:	86 8b       	std	Z+22, r24	; 0x16
    2bc4:	11 8e       	std	Z+25, r1	; 0x19
    2bc6:	12 8e       	std	Z+26, r1	; 0x1a
    2bc8:	13 8e       	std	Z+27, r1	; 0x1b
    2bca:	14 8e       	std	Z+28, r1	; 0x1c
    2bcc:	08 95       	ret

00002bce <initVariant>:
    2bce:	08 95       	ret

00002bd0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2bd0:	0e 94 32 18 	call	0x3064	; 0x3064 <init>

	initVariant();
    2bd4:	0e 94 e7 15 	call	0x2bce	; 0x2bce <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2bd8:	0e 94 43 0c 	call	0x1886	; 0x1886 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2bdc:	cb e5       	ldi	r28, 0x5B	; 91
    2bde:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2be0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <loop>
		if (serialEventRun) serialEventRun();
    2be4:	20 97       	sbiw	r28, 0x00	; 0
    2be6:	e1 f3       	breq	.-8      	; 0x2be0 <main+0x10>
    2be8:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_Z14serialEventRunv>
    2bec:	f9 cf       	rjmp	.-14     	; 0x2be0 <main+0x10>

00002bee <_Znwj>:
    2bee:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <malloc>

00002bf2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	6c 01       	movw	r12, r24
    2c04:	7a 01       	movw	r14, r20
    2c06:	8b 01       	movw	r16, r22
    2c08:	c0 e0       	ldi	r28, 0x00	; 0
    2c0a:	d0 e0       	ldi	r29, 0x00	; 0
    2c0c:	ce 15       	cp	r28, r14
    2c0e:	df 05       	cpc	r29, r15
    2c10:	81 f0       	breq	.+32     	; 0x2c32 <_ZN5Print5writeEPKhj+0x40>
    2c12:	d8 01       	movw	r26, r16
    2c14:	6d 91       	ld	r22, X+
    2c16:	8d 01       	movw	r16, r26
    2c18:	d6 01       	movw	r26, r12
    2c1a:	ed 91       	ld	r30, X+
    2c1c:	fc 91       	ld	r31, X
    2c1e:	01 90       	ld	r0, Z+
    2c20:	f0 81       	ld	r31, Z
    2c22:	e0 2d       	mov	r30, r0
    2c24:	c6 01       	movw	r24, r12
    2c26:	09 95       	icall
    2c28:	89 2b       	or	r24, r25
    2c2a:	11 f0       	breq	.+4      	; 0x2c30 <_ZN5Print5writeEPKhj+0x3e>
    2c2c:	21 96       	adiw	r28, 0x01	; 1
    2c2e:	ee cf       	rjmp	.-36     	; 0x2c0c <_ZN5Print5writeEPKhj+0x1a>
    2c30:	7e 01       	movw	r14, r28
    2c32:	c7 01       	movw	r24, r14
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	08 95       	ret

00002c46 <_ZN5Print5writeEPKc>:
    2c46:	61 15       	cp	r22, r1
    2c48:	71 05       	cpc	r23, r1
    2c4a:	79 f0       	breq	.+30     	; 0x2c6a <_ZN5Print5writeEPKc+0x24>
    2c4c:	fb 01       	movw	r30, r22
    2c4e:	01 90       	ld	r0, Z+
    2c50:	00 20       	and	r0, r0
    2c52:	e9 f7       	brne	.-6      	; 0x2c4e <_ZN5Print5writeEPKc+0x8>
    2c54:	31 97       	sbiw	r30, 0x01	; 1
    2c56:	af 01       	movw	r20, r30
    2c58:	46 1b       	sub	r20, r22
    2c5a:	57 0b       	sbc	r21, r23
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	ed 91       	ld	r30, X+
    2c60:	fc 91       	ld	r31, X
    2c62:	02 80       	ldd	r0, Z+2	; 0x02
    2c64:	f3 81       	ldd	r31, Z+3	; 0x03
    2c66:	e0 2d       	mov	r30, r0
    2c68:	09 94       	ijmp
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	08 95       	ret

00002c70 <_ZN5Print5printEPK19__FlashStringHelper>:
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	8c 01       	movw	r16, r24
    2c7e:	7b 01       	movw	r14, r22
    2c80:	c0 e0       	ldi	r28, 0x00	; 0
    2c82:	d0 e0       	ldi	r29, 0x00	; 0
    2c84:	f7 01       	movw	r30, r14
    2c86:	ec 0f       	add	r30, r28
    2c88:	fd 1f       	adc	r31, r29
    2c8a:	64 91       	lpm	r22, Z
    2c8c:	66 23       	and	r22, r22
    2c8e:	61 f0       	breq	.+24     	; 0x2ca8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c90:	d8 01       	movw	r26, r16
    2c92:	ed 91       	ld	r30, X+
    2c94:	fc 91       	ld	r31, X
    2c96:	01 90       	ld	r0, Z+
    2c98:	f0 81       	ld	r31, Z
    2c9a:	e0 2d       	mov	r30, r0
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	09 95       	icall
    2ca0:	89 2b       	or	r24, r25
    2ca2:	11 f0       	breq	.+4      	; 0x2ca8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2ca4:	21 96       	adiw	r28, 0x01	; 1
    2ca6:	ee cf       	rjmp	.-36     	; 0x2c84 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2ca8:	ce 01       	movw	r24, r28
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	ff 90       	pop	r15
    2cb4:	ef 90       	pop	r14
    2cb6:	08 95       	ret

00002cb8 <_ZN5Print5printEPKc>:
    2cb8:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_ZN5Print5writeEPKc>

00002cbc <_ZN5Print5printEc>:
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	ed 91       	ld	r30, X+
    2cc0:	fc 91       	ld	r31, X
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	f0 81       	ld	r31, Z
    2cc6:	e0 2d       	mov	r30, r0
    2cc8:	09 94       	ijmp

00002cca <_ZN5Print7printlnEv>:
    2cca:	64 e7       	ldi	r22, 0x74	; 116
    2ccc:	72 e0       	ldi	r23, 0x02	; 2
    2cce:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_ZN5Print5writeEPKc>

00002cd2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	ec 01       	movw	r28, r24
    2cdc:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN5Print5printEPK19__FlashStringHelper>
    2ce0:	8c 01       	movw	r16, r24
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN5Print7printlnEv>
    2ce8:	80 0f       	add	r24, r16
    2cea:	91 1f       	adc	r25, r17
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <_ZN5Print7printlnEPKc>:
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	ec 01       	movw	r28, r24
    2d00:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5Print5writeEPKc>
    2d04:	8c 01       	movw	r16, r24
    2d06:	ce 01       	movw	r24, r28
    2d08:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN5Print7printlnEv>
    2d0c:	80 0f       	add	r24, r16
    2d0e:	91 1f       	adc	r25, r17
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	08 95       	ret

00002d1a <_ZN5Print7printlnEc>:
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	ec 01       	movw	r28, r24
    2d24:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN5Print5printEc>
    2d28:	8c 01       	movw	r16, r24
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN5Print7printlnEv>
    2d30:	80 0f       	add	r24, r16
    2d32:	91 1f       	adc	r25, r17
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <_ZN5Print11printNumberEmh>:
    2d3e:	8f 92       	push	r8
    2d40:	9f 92       	push	r9
    2d42:	af 92       	push	r10
    2d44:	bf 92       	push	r11
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	a1 97       	sbiw	r28, 0x21	; 33
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	7c 01       	movw	r14, r24
    2d64:	fa 01       	movw	r30, r20
    2d66:	cb 01       	movw	r24, r22
    2d68:	19 a2       	std	Y+33, r1	; 0x21
    2d6a:	22 30       	cpi	r18, 0x02	; 2
    2d6c:	08 f4       	brcc	.+2      	; 0x2d70 <_ZN5Print11printNumberEmh+0x32>
    2d6e:	2a e0       	ldi	r18, 0x0A	; 10
    2d70:	8e 01       	movw	r16, r28
    2d72:	0f 5d       	subi	r16, 0xDF	; 223
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	82 2e       	mov	r8, r18
    2d78:	91 2c       	mov	r9, r1
    2d7a:	a1 2c       	mov	r10, r1
    2d7c:	b1 2c       	mov	r11, r1
    2d7e:	bf 01       	movw	r22, r30
    2d80:	a5 01       	movw	r20, r10
    2d82:	94 01       	movw	r18, r8
    2d84:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__udivmodsi4>
    2d88:	f9 01       	movw	r30, r18
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	01 50       	subi	r16, 0x01	; 1
    2d8e:	11 09       	sbc	r17, r1
    2d90:	6a 30       	cpi	r22, 0x0A	; 10
    2d92:	10 f4       	brcc	.+4      	; 0x2d98 <_ZN5Print11printNumberEmh+0x5a>
    2d94:	60 5d       	subi	r22, 0xD0	; 208
    2d96:	01 c0       	rjmp	.+2      	; 0x2d9a <_ZN5Print11printNumberEmh+0x5c>
    2d98:	69 5c       	subi	r22, 0xC9	; 201
    2d9a:	d8 01       	movw	r26, r16
    2d9c:	6c 93       	st	X, r22
    2d9e:	23 2b       	or	r18, r19
    2da0:	24 2b       	or	r18, r20
    2da2:	25 2b       	or	r18, r21
    2da4:	61 f7       	brne	.-40     	; 0x2d7e <_ZN5Print11printNumberEmh+0x40>
    2da6:	b8 01       	movw	r22, r16
    2da8:	c7 01       	movw	r24, r14
    2daa:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5Print5writeEPKc>
    2dae:	a1 96       	adiw	r28, 0x21	; 33
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	ff 90       	pop	r15
    2dc4:	ef 90       	pop	r14
    2dc6:	bf 90       	pop	r11
    2dc8:	af 90       	pop	r10
    2dca:	9f 90       	pop	r9
    2dcc:	8f 90       	pop	r8
    2dce:	08 95       	ret

00002dd0 <_ZN5Print5printEmi>:
    2dd0:	21 15       	cp	r18, r1
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	41 f4       	brne	.+16     	; 0x2de6 <_ZN5Print5printEmi+0x16>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	01 90       	ld	r0, Z+
    2dde:	f0 81       	ld	r31, Z
    2de0:	e0 2d       	mov	r30, r0
    2de2:	64 2f       	mov	r22, r20
    2de4:	09 94       	ijmp
    2de6:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <_ZN5Print11printNumberEmh>

00002dea <_ZN5Print5printEhi>:
    2dea:	9a 01       	movw	r18, r20
    2dec:	46 2f       	mov	r20, r22
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <_ZN5Print5printEmi>

00002df8 <_ZN5Print7printlnEhi>:
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	ec 01       	movw	r28, r24
    2e02:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_ZN5Print5printEhi>
    2e06:	8c 01       	movw	r16, r24
    2e08:	ce 01       	movw	r24, r28
    2e0a:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN5Print7printlnEv>
    2e0e:	80 0f       	add	r24, r16
    2e10:	91 1f       	adc	r25, r17
    2e12:	df 91       	pop	r29
    2e14:	cf 91       	pop	r28
    2e16:	1f 91       	pop	r17
    2e18:	0f 91       	pop	r16
    2e1a:	08 95       	ret

00002e1c <_ZN5Print5printEji>:
    2e1c:	9a 01       	movw	r18, r20
    2e1e:	ab 01       	movw	r20, r22
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <_ZN5Print5printEmi>

00002e28 <_ZN5Print7printlnEji>:
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	ec 01       	movw	r28, r24
    2e32:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEji>
    2e36:	8c 01       	movw	r16, r24
    2e38:	ce 01       	movw	r24, r28
    2e3a:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN5Print7printlnEv>
    2e3e:	80 0f       	add	r24, r16
    2e40:	91 1f       	adc	r25, r17
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	08 95       	ret

00002e4c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
  if (base == 0) {
    2e5c:	21 15       	cp	r18, r1
    2e5e:	31 05       	cpc	r19, r1
    2e60:	81 f4       	brne	.+32     	; 0x2e82 <_ZN5Print5printEli+0x36>
    return write(n);
    2e62:	dc 01       	movw	r26, r24
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	01 90       	ld	r0, Z+
    2e6a:	f0 81       	ld	r31, Z
    2e6c:	e0 2d       	mov	r30, r0
    2e6e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2e80:	09 94       	ijmp
  } else if (base == 10) {
    2e82:	2a 30       	cpi	r18, 0x0A	; 10
    2e84:	31 05       	cpc	r19, r1
    2e86:	01 f5       	brne	.+64     	; 0x2ec8 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    2e88:	77 ff       	sbrs	r23, 7
    2e8a:	1d c0       	rjmp	.+58     	; 0x2ec6 <_ZN5Print5printEli+0x7a>
    2e8c:	6a 01       	movw	r12, r20
    2e8e:	7b 01       	movw	r14, r22
    2e90:	ec 01       	movw	r28, r24
      int t = print('-');
    2e92:	6d e2       	ldi	r22, 0x2D	; 45
    2e94:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN5Print5printEc>
    2e98:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2e9a:	44 27       	eor	r20, r20
    2e9c:	55 27       	eor	r21, r21
    2e9e:	ba 01       	movw	r22, r20
    2ea0:	4c 19       	sub	r20, r12
    2ea2:	5d 09       	sbc	r21, r13
    2ea4:	6e 09       	sbc	r22, r14
    2ea6:	7f 09       	sbc	r23, r15
    2ea8:	2a e0       	ldi	r18, 0x0A	; 10
    2eaa:	ce 01       	movw	r24, r28
    2eac:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN5Print11printNumberEmh>
    2eb0:	80 0f       	add	r24, r16
    2eb2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	df 90       	pop	r13
    2ec2:	cf 90       	pop	r12
    2ec4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2ec6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	df 90       	pop	r13
    2ed6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2ed8:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <_ZN5Print11printNumberEmh>

00002edc <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2edc:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2ede:	ab 01       	movw	r20, r22
    2ee0:	77 0f       	add	r23, r23
    2ee2:	66 0b       	sbc	r22, r22
    2ee4:	77 0b       	sbc	r23, r23
    2ee6:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <_ZN5Print5printEli>

00002eea <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2ef4:	0e 94 6e 17 	call	0x2edc	; 0x2edc <_ZN5Print5printEii>
    2ef8:	8c 01       	movw	r16, r24
  n += println();
    2efa:	ce 01       	movw	r24, r28
    2efc:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN5Print7printlnEv>
  return n;
}
    2f00:	80 0f       	add	r24, r16
    2f02:	91 1f       	adc	r25, r17
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	08 95       	ret

00002f0e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2f0e:	1f 92       	push	r1
    2f10:	0f 92       	push	r0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	0f 92       	push	r0
    2f16:	11 24       	eor	r1, r1
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	8f 93       	push	r24
    2f1e:	9f 93       	push	r25
    2f20:	af 93       	push	r26
    2f22:	bf 93       	push	r27
    2f24:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <timer0_millis>
    2f28:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <timer0_millis+0x1>
    2f2c:	a0 91 27 05 	lds	r26, 0x0527	; 0x800527 <timer0_millis+0x2>
    2f30:	b0 91 28 05 	lds	r27, 0x0528	; 0x800528 <timer0_millis+0x3>
    2f34:	30 91 24 05 	lds	r19, 0x0524	; 0x800524 <timer0_fract>
    2f38:	23 e0       	ldi	r18, 0x03	; 3
    2f3a:	23 0f       	add	r18, r19
    2f3c:	2d 37       	cpi	r18, 0x7D	; 125
    2f3e:	20 f4       	brcc	.+8      	; 0x2f48 <__vector_16+0x3a>
    2f40:	01 96       	adiw	r24, 0x01	; 1
    2f42:	a1 1d       	adc	r26, r1
    2f44:	b1 1d       	adc	r27, r1
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <__vector_16+0x44>
    2f48:	26 e8       	ldi	r18, 0x86	; 134
    2f4a:	23 0f       	add	r18, r19
    2f4c:	02 96       	adiw	r24, 0x02	; 2
    2f4e:	a1 1d       	adc	r26, r1
    2f50:	b1 1d       	adc	r27, r1
    2f52:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <timer0_fract>
    2f56:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <timer0_millis>
    2f5a:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <timer0_millis+0x1>
    2f5e:	a0 93 27 05 	sts	0x0527, r26	; 0x800527 <timer0_millis+0x2>
    2f62:	b0 93 28 05 	sts	0x0528, r27	; 0x800528 <timer0_millis+0x3>
    2f66:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <timer0_overflow_count>
    2f6a:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <timer0_overflow_count+0x1>
    2f6e:	a0 91 2b 05 	lds	r26, 0x052B	; 0x80052b <timer0_overflow_count+0x2>
    2f72:	b0 91 2c 05 	lds	r27, 0x052C	; 0x80052c <timer0_overflow_count+0x3>
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	a1 1d       	adc	r26, r1
    2f7a:	b1 1d       	adc	r27, r1
    2f7c:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <timer0_overflow_count>
    2f80:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <timer0_overflow_count+0x1>
    2f84:	a0 93 2b 05 	sts	0x052B, r26	; 0x80052b <timer0_overflow_count+0x2>
    2f88:	b0 93 2c 05 	sts	0x052C, r27	; 0x80052c <timer0_overflow_count+0x3>
    2f8c:	bf 91       	pop	r27
    2f8e:	af 91       	pop	r26
    2f90:	9f 91       	pop	r25
    2f92:	8f 91       	pop	r24
    2f94:	3f 91       	pop	r19
    2f96:	2f 91       	pop	r18
    2f98:	0f 90       	pop	r0
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	0f 90       	pop	r0
    2f9e:	1f 90       	pop	r1
    2fa0:	18 95       	reti

00002fa2 <micros>:
    2fa2:	3f b7       	in	r19, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <timer0_overflow_count>
    2faa:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <timer0_overflow_count+0x1>
    2fae:	a0 91 2b 05 	lds	r26, 0x052B	; 0x80052b <timer0_overflow_count+0x2>
    2fb2:	b0 91 2c 05 	lds	r27, 0x052C	; 0x80052c <timer0_overflow_count+0x3>
    2fb6:	26 b5       	in	r18, 0x26	; 38
    2fb8:	a8 9b       	sbis	0x15, 0	; 21
    2fba:	05 c0       	rjmp	.+10     	; 0x2fc6 <micros+0x24>
    2fbc:	2f 3f       	cpi	r18, 0xFF	; 255
    2fbe:	19 f0       	breq	.+6      	; 0x2fc6 <micros+0x24>
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	a1 1d       	adc	r26, r1
    2fc4:	b1 1d       	adc	r27, r1
    2fc6:	3f bf       	out	0x3f, r19	; 63
    2fc8:	ba 2f       	mov	r27, r26
    2fca:	a9 2f       	mov	r26, r25
    2fcc:	98 2f       	mov	r25, r24
    2fce:	88 27       	eor	r24, r24
    2fd0:	82 0f       	add	r24, r18
    2fd2:	91 1d       	adc	r25, r1
    2fd4:	a1 1d       	adc	r26, r1
    2fd6:	b1 1d       	adc	r27, r1
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	42 e0       	ldi	r20, 0x02	; 2
    2fde:	66 0f       	add	r22, r22
    2fe0:	77 1f       	adc	r23, r23
    2fe2:	88 1f       	adc	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	4a 95       	dec	r20
    2fe8:	d1 f7       	brne	.-12     	; 0x2fde <micros+0x3c>
    2fea:	08 95       	ret

00002fec <delay>:
    2fec:	8f 92       	push	r8
    2fee:	9f 92       	push	r9
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	6b 01       	movw	r12, r22
    2ffe:	7c 01       	movw	r14, r24
    3000:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <micros>
    3004:	4b 01       	movw	r8, r22
    3006:	5c 01       	movw	r10, r24
    3008:	c1 14       	cp	r12, r1
    300a:	d1 04       	cpc	r13, r1
    300c:	e1 04       	cpc	r14, r1
    300e:	f1 04       	cpc	r15, r1
    3010:	01 f1       	breq	.+64     	; 0x3052 <delay+0x66>
    3012:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <yield>
    3016:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <micros>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	88 19       	sub	r24, r8
    3020:	99 09       	sbc	r25, r9
    3022:	aa 09       	sbc	r26, r10
    3024:	bb 09       	sbc	r27, r11
    3026:	88 3e       	cpi	r24, 0xE8	; 232
    3028:	93 40       	sbci	r25, 0x03	; 3
    302a:	a1 05       	cpc	r26, r1
    302c:	b1 05       	cpc	r27, r1
    302e:	60 f3       	brcs	.-40     	; 0x3008 <delay+0x1c>
    3030:	21 e0       	ldi	r18, 0x01	; 1
    3032:	c2 1a       	sub	r12, r18
    3034:	d1 08       	sbc	r13, r1
    3036:	e1 08       	sbc	r14, r1
    3038:	f1 08       	sbc	r15, r1
    303a:	88 ee       	ldi	r24, 0xE8	; 232
    303c:	88 0e       	add	r8, r24
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	98 1e       	adc	r9, r24
    3042:	a1 1c       	adc	r10, r1
    3044:	b1 1c       	adc	r11, r1
    3046:	c1 14       	cp	r12, r1
    3048:	d1 04       	cpc	r13, r1
    304a:	e1 04       	cpc	r14, r1
    304c:	f1 04       	cpc	r15, r1
    304e:	19 f7       	brne	.-58     	; 0x3016 <delay+0x2a>
    3050:	db cf       	rjmp	.-74     	; 0x3008 <delay+0x1c>
    3052:	ff 90       	pop	r15
    3054:	ef 90       	pop	r14
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	bf 90       	pop	r11
    305c:	af 90       	pop	r10
    305e:	9f 90       	pop	r9
    3060:	8f 90       	pop	r8
    3062:	08 95       	ret

00003064 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3064:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3066:	84 b5       	in	r24, 0x24	; 36
    3068:	82 60       	ori	r24, 0x02	; 2
    306a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    306c:	84 b5       	in	r24, 0x24	; 36
    306e:	81 60       	ori	r24, 0x01	; 1
    3070:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3072:	85 b5       	in	r24, 0x25	; 37
    3074:	82 60       	ori	r24, 0x02	; 2
    3076:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3078:	85 b5       	in	r24, 0x25	; 37
    307a:	81 60       	ori	r24, 0x01	; 1
    307c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    307e:	ee e6       	ldi	r30, 0x6E	; 110
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	81 60       	ori	r24, 0x01	; 1
    3086:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3088:	e1 e8       	ldi	r30, 0x81	; 129
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    308e:	80 81       	ld	r24, Z
    3090:	82 60       	ori	r24, 0x02	; 2
    3092:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3094:	80 81       	ld	r24, Z
    3096:	81 60       	ori	r24, 0x01	; 1
    3098:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    309a:	e0 e8       	ldi	r30, 0x80	; 128
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	81 60       	ori	r24, 0x01	; 1
    30a2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    30a4:	e1 eb       	ldi	r30, 0xB1	; 177
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	84 60       	ori	r24, 0x04	; 4
    30ac:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    30ae:	e0 eb       	ldi	r30, 0xB0	; 176
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	81 60       	ori	r24, 0x01	; 1
    30b6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    30b8:	ea e7       	ldi	r30, 0x7A	; 122
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	84 60       	ori	r24, 0x04	; 4
    30c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    30c2:	80 81       	ld	r24, Z
    30c4:	82 60       	ori	r24, 0x02	; 2
    30c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    30c8:	80 81       	ld	r24, Z
    30ca:	81 60       	ori	r24, 0x01	; 1
    30cc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    30ce:	80 81       	ld	r24, Z
    30d0:	80 68       	ori	r24, 0x80	; 128
    30d2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    30d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    30d8:	08 95       	ret

000030da <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    30da:	8e 30       	cpi	r24, 0x0E	; 14
    30dc:	08 f0       	brcs	.+2      	; 0x30e0 <analogRead+0x6>
    30de:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    30e0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    30e4:	90 e4       	ldi	r25, 0x40	; 64
    30e6:	29 9f       	mul	r18, r25
    30e8:	90 01       	movw	r18, r0
    30ea:	11 24       	eor	r1, r1
    30ec:	87 70       	andi	r24, 0x07	; 7
    30ee:	82 2b       	or	r24, r18
    30f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    30f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    30f8:	80 64       	ori	r24, 0x40	; 64
    30fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    30fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3102:	86 fd       	sbrc	r24, 6
    3104:	fc cf       	rjmp	.-8      	; 0x30fe <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    310a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    310e:	90 e0       	ldi	r25, 0x00	; 0
}
    3110:	92 2b       	or	r25, r18
    3112:	08 95       	ret

00003114 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3114:	83 30       	cpi	r24, 0x03	; 3
    3116:	81 f0       	breq	.+32     	; 0x3138 <turnOffPWM+0x24>
    3118:	28 f4       	brcc	.+10     	; 0x3124 <turnOffPWM+0x10>
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	99 f0       	breq	.+38     	; 0x3144 <turnOffPWM+0x30>
    311e:	82 30       	cpi	r24, 0x02	; 2
    3120:	a1 f0       	breq	.+40     	; 0x314a <turnOffPWM+0x36>
    3122:	08 95       	ret
    3124:	87 30       	cpi	r24, 0x07	; 7
    3126:	a9 f0       	breq	.+42     	; 0x3152 <turnOffPWM+0x3e>
    3128:	88 30       	cpi	r24, 0x08	; 8
    312a:	b9 f0       	breq	.+46     	; 0x315a <turnOffPWM+0x46>
    312c:	84 30       	cpi	r24, 0x04	; 4
    312e:	d1 f4       	brne	.+52     	; 0x3164 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3130:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3134:	8f 7d       	andi	r24, 0xDF	; 223
    3136:	03 c0       	rjmp	.+6      	; 0x313e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3138:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    313c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    313e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3142:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3144:	84 b5       	in	r24, 0x24	; 36
    3146:	8f 77       	andi	r24, 0x7F	; 127
    3148:	02 c0       	rjmp	.+4      	; 0x314e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    314a:	84 b5       	in	r24, 0x24	; 36
    314c:	8f 7d       	andi	r24, 0xDF	; 223
    314e:	84 bd       	out	0x24, r24	; 36
    3150:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3152:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3156:	8f 77       	andi	r24, 0x7F	; 127
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    315a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    315e:	8f 7d       	andi	r24, 0xDF	; 223
    3160:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3164:	08 95       	ret

00003166 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	fc 01       	movw	r30, r24
    316e:	e1 50       	subi	r30, 0x01	; 1
    3170:	fa 4f       	sbci	r31, 0xFA	; 250
    3172:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3174:	fc 01       	movw	r30, r24
    3176:	ed 5e       	subi	r30, 0xED	; 237
    3178:	f9 4f       	sbci	r31, 0xF9	; 249
    317a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    317c:	88 23       	and	r24, r24
    317e:	61 f1       	breq	.+88     	; 0x31d8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	fc 01       	movw	r30, r24
    3188:	e5 5c       	subi	r30, 0xC5	; 197
    318a:	f9 4f       	sbci	r31, 0xF9	; 249
    318c:	c5 91       	lpm	r28, Z+
    318e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3190:	fc 01       	movw	r30, r24
    3192:	ef 5c       	subi	r30, 0xCF	; 207
    3194:	f9 4f       	sbci	r31, 0xF9	; 249
    3196:	a5 91       	lpm	r26, Z+
    3198:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    319a:	61 11       	cpse	r22, r1
    319c:	09 c0       	rjmp	.+18     	; 0x31b0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    319e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    31a0:	f8 94       	cli
		*reg &= ~bit;
    31a2:	88 81       	ld	r24, Y
    31a4:	20 95       	com	r18
    31a6:	82 23       	and	r24, r18
    31a8:	88 83       	st	Y, r24
		*out &= ~bit;
    31aa:	ec 91       	ld	r30, X
    31ac:	2e 23       	and	r18, r30
    31ae:	0b c0       	rjmp	.+22     	; 0x31c6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    31b0:	62 30       	cpi	r22, 0x02	; 2
    31b2:	61 f4       	brne	.+24     	; 0x31cc <pinMode+0x66>
		uint8_t oldSREG = SREG;
    31b4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    31b6:	f8 94       	cli
		*reg &= ~bit;
    31b8:	88 81       	ld	r24, Y
    31ba:	32 2f       	mov	r19, r18
    31bc:	30 95       	com	r19
    31be:	83 23       	and	r24, r19
    31c0:	88 83       	st	Y, r24
		*out |= bit;
    31c2:	ec 91       	ld	r30, X
    31c4:	2e 2b       	or	r18, r30
    31c6:	2c 93       	st	X, r18
		SREG = oldSREG;
    31c8:	9f bf       	out	0x3f, r25	; 63
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    31cc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    31ce:	f8 94       	cli
		*reg |= bit;
    31d0:	e8 81       	ld	r30, Y
    31d2:	2e 2b       	or	r18, r30
    31d4:	28 83       	st	Y, r18
		SREG = oldSREG;
    31d6:	8f bf       	out	0x3f, r24	; 63
	}
}
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	08 95       	ret

000031de <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	f9 01       	movw	r30, r18
    31ea:	e5 51       	subi	r30, 0x15	; 21
    31ec:	fa 4f       	sbci	r31, 0xFA	; 250
    31ee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    31f0:	f9 01       	movw	r30, r18
    31f2:	e1 50       	subi	r30, 0x01	; 1
    31f4:	fa 4f       	sbci	r31, 0xFA	; 250
    31f6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    31f8:	f9 01       	movw	r30, r18
    31fa:	ed 5e       	subi	r30, 0xED	; 237
    31fc:	f9 4f       	sbci	r31, 0xF9	; 249
    31fe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3200:	cc 23       	and	r28, r28
    3202:	c1 f0       	breq	.+48     	; 0x3234 <digitalWrite+0x56>
    3204:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3206:	81 11       	cpse	r24, r1
    3208:	0e 94 8a 18 	call	0x3114	; 0x3114 <turnOffPWM>

	out = portOutputRegister(port);
    320c:	ec 2f       	mov	r30, r28
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	ee 0f       	add	r30, r30
    3212:	ff 1f       	adc	r31, r31
    3214:	ef 5c       	subi	r30, 0xCF	; 207
    3216:	f9 4f       	sbci	r31, 0xF9	; 249
    3218:	a5 91       	lpm	r26, Z+
    321a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    321c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    321e:	f8 94       	cli

	if (val == LOW) {
    3220:	11 11       	cpse	r17, r1
    3222:	04 c0       	rjmp	.+8      	; 0x322c <digitalWrite+0x4e>
		*out &= ~bit;
    3224:	8c 91       	ld	r24, X
    3226:	d0 95       	com	r29
    3228:	d8 23       	and	r29, r24
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <digitalWrite+0x52>
	} else {
		*out |= bit;
    322c:	ec 91       	ld	r30, X
    322e:	de 2b       	or	r29, r30
    3230:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3232:	9f bf       	out	0x3f, r25	; 63
}
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	08 95       	ret

0000323c <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    323c:	fc 01       	movw	r30, r24
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <free>

00003246 <_ZN6String10invalidateEv>:
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	ec 01       	movw	r28, r24
    324c:	88 81       	ld	r24, Y
    324e:	99 81       	ldd	r25, Y+1	; 0x01
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	11 f0       	breq	.+4      	; 0x3258 <_ZN6String10invalidateEv+0x12>
    3254:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <free>
    3258:	19 82       	std	Y+1, r1	; 0x01
    325a:	18 82       	st	Y, r1
    325c:	1d 82       	std	Y+5, r1	; 0x05
    325e:	1c 82       	std	Y+4, r1	; 0x04
    3260:	1b 82       	std	Y+3, r1	; 0x03
    3262:	1a 82       	std	Y+2, r1	; 0x02
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	08 95       	ret

0000326a <_ZN6String12changeBufferEj>:
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	ec 01       	movw	r28, r24
    3274:	8b 01       	movw	r16, r22
    3276:	6f 5f       	subi	r22, 0xFF	; 255
    3278:	7f 4f       	sbci	r23, 0xFF	; 255
    327a:	88 81       	ld	r24, Y
    327c:	99 81       	ldd	r25, Y+1	; 0x01
    327e:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <realloc>
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	31 f0       	breq	.+12     	; 0x3292 <_ZN6String12changeBufferEj+0x28>
    3286:	99 83       	std	Y+1, r25	; 0x01
    3288:	88 83       	st	Y, r24
    328a:	1b 83       	std	Y+3, r17	; 0x03
    328c:	0a 83       	std	Y+2, r16	; 0x02
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <_ZN6String12changeBufferEj+0x2a>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	08 95       	ret

0000329e <_ZN6String7reserveEj>:
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	ec 01       	movw	r28, r24
    32a4:	88 81       	ld	r24, Y
    32a6:	99 81       	ldd	r25, Y+1	; 0x01
    32a8:	89 2b       	or	r24, r25
    32aa:	29 f0       	breq	.+10     	; 0x32b6 <_ZN6String7reserveEj+0x18>
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	9b 81       	ldd	r25, Y+3	; 0x03
    32b0:	86 17       	cp	r24, r22
    32b2:	97 07       	cpc	r25, r23
    32b4:	60 f4       	brcc	.+24     	; 0x32ce <_ZN6String7reserveEj+0x30>
    32b6:	ce 01       	movw	r24, r28
    32b8:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN6String12changeBufferEj>
    32bc:	88 23       	and	r24, r24
    32be:	41 f0       	breq	.+16     	; 0x32d0 <_ZN6String7reserveEj+0x32>
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	89 2b       	or	r24, r25
    32c6:	19 f4       	brne	.+6      	; 0x32ce <_ZN6String7reserveEj+0x30>
    32c8:	e8 81       	ld	r30, Y
    32ca:	f9 81       	ldd	r31, Y+1	; 0x01
    32cc:	10 82       	st	Z, r1
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	08 95       	ret

000032d6 <_ZN6String4copyEPKcj>:
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	ec 01       	movw	r28, r24
    32e4:	7b 01       	movw	r14, r22
    32e6:	8a 01       	movw	r16, r20
    32e8:	ba 01       	movw	r22, r20
    32ea:	0e 94 4f 19 	call	0x329e	; 0x329e <_ZN6String7reserveEj>
    32ee:	81 11       	cpse	r24, r1
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <_ZN6String4copyEPKcj+0x24>
    32f2:	ce 01       	movw	r24, r28
    32f4:	0e 94 23 19 	call	0x3246	; 0x3246 <_ZN6String10invalidateEv>
    32f8:	07 c0       	rjmp	.+14     	; 0x3308 <_ZN6String4copyEPKcj+0x32>
    32fa:	1d 83       	std	Y+5, r17	; 0x05
    32fc:	0c 83       	std	Y+4, r16	; 0x04
    32fe:	b7 01       	movw	r22, r14
    3300:	88 81       	ld	r24, Y
    3302:	99 81       	ldd	r25, Y+1	; 0x01
    3304:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <strcpy>
    3308:	ce 01       	movw	r24, r28
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	08 95       	ret

00003318 <_ZN6StringC1EPKc>:
    3318:	fc 01       	movw	r30, r24
    331a:	11 82       	std	Z+1, r1	; 0x01
    331c:	10 82       	st	Z, r1
    331e:	13 82       	std	Z+3, r1	; 0x03
    3320:	12 82       	std	Z+2, r1	; 0x02
    3322:	15 82       	std	Z+5, r1	; 0x05
    3324:	14 82       	std	Z+4, r1	; 0x04
    3326:	61 15       	cp	r22, r1
    3328:	71 05       	cpc	r23, r1
    332a:	51 f0       	breq	.+20     	; 0x3340 <_ZN6StringC1EPKc+0x28>
    332c:	fb 01       	movw	r30, r22
    332e:	01 90       	ld	r0, Z+
    3330:	00 20       	and	r0, r0
    3332:	e9 f7       	brne	.-6      	; 0x332e <_ZN6StringC1EPKc+0x16>
    3334:	31 97       	sbiw	r30, 0x01	; 1
    3336:	af 01       	movw	r20, r30
    3338:	46 1b       	sub	r20, r22
    333a:	57 0b       	sbc	r21, r23
    333c:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <_ZN6String4copyEPKcj>
    3340:	08 95       	ret

00003342 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    3342:	0f 93       	push	r16
    3344:	1f 93       	push	r17
    3346:	cf 93       	push	r28
    3348:	df 93       	push	r29
    334a:	8c 01       	movw	r16, r24
    334c:	eb 01       	movw	r28, r22
	if (buffer) {
    334e:	fc 01       	movw	r30, r24
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	99 f0       	breq	.+38     	; 0x337e <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    3358:	42 81       	ldd	r20, Z+2	; 0x02
    335a:	53 81       	ldd	r21, Z+3	; 0x03
    335c:	2c 81       	ldd	r18, Y+4	; 0x04
    335e:	3d 81       	ldd	r19, Y+5	; 0x05
    3360:	42 17       	cp	r20, r18
    3362:	53 07       	cpc	r21, r19
    3364:	50 f0       	brcs	.+20     	; 0x337a <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    3366:	68 81       	ld	r22, Y
    3368:	79 81       	ldd	r23, Y+1	; 0x01
    336a:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <strcpy>
			len = rhs.len;
    336e:	8c 81       	ldd	r24, Y+4	; 0x04
    3370:	9d 81       	ldd	r25, Y+5	; 0x05
    3372:	f8 01       	movw	r30, r16
    3374:	95 83       	std	Z+5, r25	; 0x05
    3376:	84 83       	std	Z+4, r24	; 0x04
    3378:	13 c0       	rjmp	.+38     	; 0x33a0 <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    337a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <free>
		}
	}
	buffer = rhs.buffer;
    337e:	88 81       	ld	r24, Y
    3380:	99 81       	ldd	r25, Y+1	; 0x01
    3382:	f8 01       	movw	r30, r16
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	9b 81       	ldd	r25, Y+3	; 0x03
    338c:	93 83       	std	Z+3, r25	; 0x03
    338e:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    3390:	8c 81       	ldd	r24, Y+4	; 0x04
    3392:	9d 81       	ldd	r25, Y+5	; 0x05
    3394:	95 83       	std	Z+5, r25	; 0x05
    3396:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    3398:	19 82       	std	Y+1, r1	; 0x01
    339a:	18 82       	st	Y, r1
	rhs.capacity = 0;
    339c:	1b 82       	std	Y+3, r1	; 0x03
    339e:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    33a0:	1d 82       	std	Y+5, r1	; 0x05
    33a2:	1c 82       	std	Y+4, r1	; 0x04
}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	08 95       	ret

000033ae <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	ec 01       	movw	r28, r24
    33b4:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    33b6:	86 17       	cp	r24, r22
    33b8:	97 07       	cpc	r25, r23
    33ba:	61 f0       	breq	.+24     	; 0x33d4 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	61 15       	cp	r22, r1
    33c2:	71 05       	cpc	r23, r1
    33c4:	29 f0       	breq	.+10     	; 0x33d0 <_ZN6StringaSERKS_+0x22>
    33c6:	44 81       	ldd	r20, Z+4	; 0x04
    33c8:	55 81       	ldd	r21, Z+5	; 0x05
    33ca:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_ZN6String4copyEPKcj>
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    33d0:	0e 94 23 19 	call	0x3246	; 0x3246 <_ZN6String10invalidateEv>
	
	return *this;
}
    33d4:	ce 01       	movw	r24, r28
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	08 95       	ret

000033dc <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    33dc:	fc 01       	movw	r30, r24
    33de:	11 82       	std	Z+1, r1	; 0x01
    33e0:	10 82       	st	Z, r1
	capacity = 0;
    33e2:	13 82       	std	Z+3, r1	; 0x03
    33e4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    33e6:	15 82       	std	Z+5, r1	; 0x05
    33e8:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    33ea:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <_ZN6StringaSERKS_>

000033ee <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    33f4:	86 17       	cp	r24, r22
    33f6:	97 07       	cpc	r25, r23
    33f8:	11 f0       	breq	.+4      	; 0x33fe <_ZN6StringaSEOS_+0x10>
    33fa:	0e 94 a1 19 	call	0x3342	; 0x3342 <_ZN6String4moveERS_>
	return *this;
}
    33fe:	ce 01       	movw	r24, r28
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	08 95       	ret

00003406 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3406:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    340a:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    340e:	28 17       	cp	r18, r24
    3410:	39 07       	cpc	r19, r25
    3412:	b9 f4       	brne	.+46     	; 0x3442 <_ZN14SoftwareSerial4readEv+0x3c>
    3414:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3418:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    341c:	98 17       	cp	r25, r24
    341e:	89 f0       	breq	.+34     	; 0x3442 <_ZN14SoftwareSerial4readEv+0x3c>
    3420:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	e1 5d       	subi	r30, 0xD1	; 209
    3428:	fa 4f       	sbci	r31, 0xFA	; 250
    342a:	80 81       	ld	r24, Z
    342c:	20 91 2d 05 	lds	r18, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	2f 5f       	subi	r18, 0xFF	; 255
    3434:	3f 4f       	sbci	r19, 0xFF	; 255
    3436:	2f 73       	andi	r18, 0x3F	; 63
    3438:	33 27       	eor	r19, r19
    343a:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	08 95       	ret
    3442:	8f ef       	ldi	r24, 0xFF	; 255
    3444:	9f ef       	ldi	r25, 0xFF	; 255
    3446:	08 95       	ret

00003448 <_ZN14SoftwareSerial5writeEh>:
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	dc 01       	movw	r26, r24
    3450:	5c 96       	adiw	r26, 0x1c	; 28
    3452:	8d 91       	ld	r24, X+
    3454:	9c 91       	ld	r25, X
    3456:	5d 97       	sbiw	r26, 0x1d	; 29
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	39 f4       	brne	.+14     	; 0x346a <_ZN14SoftwareSerial5writeEh+0x22>
    345c:	21 e0       	ldi	r18, 0x01	; 1
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	13 96       	adiw	r26, 0x03	; 3
    3462:	3c 93       	st	X, r19
    3464:	2e 93       	st	-X, r18
    3466:	12 97       	sbiw	r26, 0x02	; 2
    3468:	3b c0       	rjmp	.+118    	; 0x34e0 <_ZN14SoftwareSerial5writeEh+0x98>
    346a:	51 96       	adiw	r26, 0x11	; 17
    346c:	ed 91       	ld	r30, X+
    346e:	fc 91       	ld	r31, X
    3470:	52 97       	sbiw	r26, 0x12	; 18
    3472:	50 96       	adiw	r26, 0x10	; 16
    3474:	2c 91       	ld	r18, X
    3476:	50 97       	sbiw	r26, 0x10	; 16
    3478:	32 2f       	mov	r19, r18
    347a:	30 95       	com	r19
    347c:	1f b7       	in	r17, 0x3f	; 63
    347e:	5e 96       	adiw	r26, 0x1e	; 30
    3480:	4c 91       	ld	r20, X
    3482:	5e 97       	sbiw	r26, 0x1e	; 30
    3484:	74 2f       	mov	r23, r20
    3486:	72 70       	andi	r23, 0x02	; 2
    3488:	41 fd       	sbrc	r20, 1
    348a:	60 95       	com	r22
    348c:	f8 94       	cli
    348e:	40 81       	ld	r20, Z
    3490:	77 23       	and	r23, r23
    3492:	11 f0       	breq	.+4      	; 0x3498 <_ZN14SoftwareSerial5writeEh+0x50>
    3494:	42 2b       	or	r20, r18
    3496:	01 c0       	rjmp	.+2      	; 0x349a <_ZN14SoftwareSerial5writeEh+0x52>
    3498:	43 23       	and	r20, r19
    349a:	40 83       	st	Z, r20
    349c:	ec 01       	movw	r28, r24
    349e:	21 97       	sbiw	r28, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <_ZN14SoftwareSerial5writeEh+0x56>
    34a2:	48 e0       	ldi	r20, 0x08	; 8
    34a4:	50 81       	ld	r21, Z
    34a6:	60 ff       	sbrs	r22, 0
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <_ZN14SoftwareSerial5writeEh+0x66>
    34aa:	52 2b       	or	r21, r18
    34ac:	01 c0       	rjmp	.+2      	; 0x34b0 <_ZN14SoftwareSerial5writeEh+0x68>
    34ae:	53 23       	and	r21, r19
    34b0:	50 83       	st	Z, r21
    34b2:	ec 01       	movw	r28, r24
    34b4:	21 97       	sbiw	r28, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <_ZN14SoftwareSerial5writeEh+0x6c>
    34b8:	66 95       	lsr	r22
    34ba:	41 50       	subi	r20, 0x01	; 1
    34bc:	99 f7       	brne	.-26     	; 0x34a4 <_ZN14SoftwareSerial5writeEh+0x5c>
    34be:	80 81       	ld	r24, Z
    34c0:	77 23       	and	r23, r23
    34c2:	19 f0       	breq	.+6      	; 0x34ca <_ZN14SoftwareSerial5writeEh+0x82>
    34c4:	83 23       	and	r24, r19
    34c6:	80 83       	st	Z, r24
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <_ZN14SoftwareSerial5writeEh+0x86>
    34ca:	28 2b       	or	r18, r24
    34cc:	20 83       	st	Z, r18
    34ce:	1f bf       	out	0x3f, r17	; 63
    34d0:	5c 96       	adiw	r26, 0x1c	; 28
    34d2:	8d 91       	ld	r24, X+
    34d4:	9c 91       	ld	r25, X
    34d6:	5d 97       	sbiw	r26, 0x1d	; 29
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <_ZN14SoftwareSerial5writeEh+0x90>
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	08 95       	ret

000034e8 <_ZN14SoftwareSerial5flushEv>:
    34e8:	08 95       	ret

000034ea <_ZN14SoftwareSerial4peekEv>:
    34ea:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    34ee:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    34f2:	28 17       	cp	r18, r24
    34f4:	39 07       	cpc	r19, r25
    34f6:	71 f4       	brne	.+28     	; 0x3514 <_ZN14SoftwareSerial4peekEv+0x2a>
    34f8:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    34fc:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3500:	98 17       	cp	r25, r24
    3502:	41 f0       	breq	.+16     	; 0x3514 <_ZN14SoftwareSerial4peekEv+0x2a>
    3504:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	e1 5d       	subi	r30, 0xD1	; 209
    350c:	fa 4f       	sbci	r31, 0xFA	; 250
    350e:	80 81       	ld	r24, Z
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	08 95       	ret
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	9f ef       	ldi	r25, 0xFF	; 255
    3518:	08 95       	ret

0000351a <_ZN14SoftwareSerial9availableEv>:
    351a:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    351e:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    3522:	28 17       	cp	r18, r24
    3524:	39 07       	cpc	r19, r25
    3526:	71 f4       	brne	.+28     	; 0x3544 <_ZN14SoftwareSerial9availableEv+0x2a>
    3528:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    352c:	20 91 2d 05 	lds	r18, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	80 5c       	subi	r24, 0xC0	; 192
    3534:	9f 4f       	sbci	r25, 0xFF	; 255
    3536:	82 1b       	sub	r24, r18
    3538:	91 09       	sbc	r25, r1
    353a:	60 e4       	ldi	r22, 0x40	; 64
    353c:	70 e0       	ldi	r23, 0x00	; 0
    353e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__divmodhi4>
    3542:	08 95       	ret
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	08 95       	ret

0000354a <_ZN14SoftwareSerial13stopListeningEv>:
    354a:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    354e:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    3552:	e8 17       	cp	r30, r24
    3554:	f9 07       	cpc	r31, r25
    3556:	69 f4       	brne	.+26     	; 0x3572 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3558:	a3 89       	ldd	r26, Z+19	; 0x13
    355a:	b4 89       	ldd	r27, Z+20	; 0x14
    355c:	9c 91       	ld	r25, X
    355e:	85 89       	ldd	r24, Z+21	; 0x15
    3560:	80 95       	com	r24
    3562:	89 23       	and	r24, r25
    3564:	8c 93       	st	X, r24
    3566:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    356a:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	08 95       	ret
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	08 95       	ret

00003576 <_ZN14SoftwareSerial6listenEv>:
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	ec 01       	movw	r28, r24
    357c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    357e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3580:	89 2b       	or	r24, r25
    3582:	f1 f0       	breq	.+60     	; 0x35c0 <_ZN14SoftwareSerial6listenEv+0x4a>
    3584:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    3588:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    358c:	c8 17       	cp	r28, r24
    358e:	d9 07       	cpc	r29, r25
    3590:	b9 f0       	breq	.+46     	; 0x35c0 <_ZN14SoftwareSerial6listenEv+0x4a>
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	11 f0       	breq	.+4      	; 0x359a <_ZN14SoftwareSerial6listenEv+0x24>
    3596:	0e 94 a5 1a 	call	0x354a	; 0x354a <_ZN14SoftwareSerial13stopListeningEv>
    359a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    359c:	8e 7f       	andi	r24, 0xFE	; 254
    359e:	8e 8f       	std	Y+30, r24	; 0x1e
    35a0:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    35a4:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    35a8:	d0 93 70 05 	sts	0x0570, r29	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    35ac:	c0 93 6f 05 	sts	0x056F, r28	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    35b0:	eb 89       	ldd	r30, Y+19	; 0x13
    35b2:	fc 89       	ldd	r31, Y+20	; 0x14
    35b4:	90 81       	ld	r25, Z
    35b6:	8d 89       	ldd	r24, Y+21	; 0x15
    35b8:	89 2b       	or	r24, r25
    35ba:	80 83       	st	Z, r24
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	01 c0       	rjmp	.+2      	; 0x35c2 <_ZN14SoftwareSerial6listenEv+0x4c>
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	08 95       	ret

000035c8 <__vector_3>:
    35c8:	1f 92       	push	r1
    35ca:	0f 92       	push	r0
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	0f 92       	push	r0
    35d0:	11 24       	eor	r1, r1
    35d2:	2f 93       	push	r18
    35d4:	3f 93       	push	r19
    35d6:	4f 93       	push	r20
    35d8:	5f 93       	push	r21
    35da:	6f 93       	push	r22
    35dc:	7f 93       	push	r23
    35de:	8f 93       	push	r24
    35e0:	9f 93       	push	r25
    35e2:	af 93       	push	r26
    35e4:	bf 93       	push	r27
    35e6:	ef 93       	push	r30
    35e8:	ff 93       	push	r31
    35ea:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    35ee:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    35f2:	30 97       	sbiw	r30, 0x00	; 0
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <__vector_3+0x30>
    35f6:	51 c0       	rjmp	.+162    	; 0x369a <__vector_3+0xd2>
    35f8:	96 8d       	ldd	r25, Z+30	; 0x1e
    35fa:	a6 85       	ldd	r26, Z+14	; 0x0e
    35fc:	b7 85       	ldd	r27, Z+15	; 0x0f
    35fe:	85 85       	ldd	r24, Z+13	; 0x0d
    3600:	91 ff       	sbrs	r25, 1
    3602:	04 c0       	rjmp	.+8      	; 0x360c <__vector_3+0x44>
    3604:	9c 91       	ld	r25, X
    3606:	89 23       	and	r24, r25
    3608:	29 f4       	brne	.+10     	; 0x3614 <__vector_3+0x4c>
    360a:	47 c0       	rjmp	.+142    	; 0x369a <__vector_3+0xd2>
    360c:	9c 91       	ld	r25, X
    360e:	89 23       	and	r24, r25
    3610:	09 f0       	breq	.+2      	; 0x3614 <__vector_3+0x4c>
    3612:	43 c0       	rjmp	.+134    	; 0x369a <__vector_3+0xd2>
    3614:	a3 89       	ldd	r26, Z+19	; 0x13
    3616:	b4 89       	ldd	r27, Z+20	; 0x14
    3618:	9c 91       	ld	r25, X
    361a:	85 89       	ldd	r24, Z+21	; 0x15
    361c:	80 95       	com	r24
    361e:	89 23       	and	r24, r25
    3620:	8c 93       	st	X, r24
    3622:	86 89       	ldd	r24, Z+22	; 0x16
    3624:	97 89       	ldd	r25, Z+23	; 0x17
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <__vector_3+0x5e>
    362a:	60 8d       	ldd	r22, Z+24	; 0x18
    362c:	71 8d       	ldd	r23, Z+25	; 0x19
    362e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3630:	b7 85       	ldd	r27, Z+15	; 0x0f
    3632:	55 85       	ldd	r21, Z+13	; 0x0d
    3634:	38 e0       	ldi	r19, 0x08	; 8
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	cb 01       	movw	r24, r22
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <__vector_3+0x72>
    363e:	82 2f       	mov	r24, r18
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	95 95       	asr	r25
    3644:	87 95       	ror	r24
    3646:	28 2f       	mov	r18, r24
    3648:	4c 91       	ld	r20, X
    364a:	45 23       	and	r20, r21
    364c:	09 f0       	breq	.+2      	; 0x3650 <__vector_3+0x88>
    364e:	20 68       	ori	r18, 0x80	; 128
    3650:	31 50       	subi	r19, 0x01	; 1
    3652:	91 f7       	brne	.-28     	; 0x3638 <__vector_3+0x70>
    3654:	86 8d       	ldd	r24, Z+30	; 0x1e
    3656:	81 fd       	sbrc	r24, 1
    3658:	20 95       	com	r18
    365a:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	01 96       	adiw	r24, 0x01	; 1
    3662:	8f 73       	andi	r24, 0x3F	; 63
    3664:	99 27       	eor	r25, r25
    3666:	30 91 2d 05 	lds	r19, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    366a:	38 17       	cp	r19, r24
    366c:	49 f0       	breq	.+18     	; 0x3680 <__vector_3+0xb8>
    366e:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	a1 5d       	subi	r26, 0xD1	; 209
    3676:	ba 4f       	sbci	r27, 0xFA	; 250
    3678:	2c 93       	st	X, r18
    367a:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <__vector_3+0xbe>
    3680:	86 8d       	ldd	r24, Z+30	; 0x1e
    3682:	81 60       	ori	r24, 0x01	; 1
    3684:	86 8f       	std	Z+30, r24	; 0x1e
    3686:	82 8d       	ldd	r24, Z+26	; 0x1a
    3688:	93 8d       	ldd	r25, Z+27	; 0x1b
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <__vector_3+0xc2>
    368e:	a3 89       	ldd	r26, Z+19	; 0x13
    3690:	b4 89       	ldd	r27, Z+20	; 0x14
    3692:	9c 91       	ld	r25, X
    3694:	85 89       	ldd	r24, Z+21	; 0x15
    3696:	89 2b       	or	r24, r25
    3698:	8c 93       	st	X, r24
    369a:	ff 91       	pop	r31
    369c:	ef 91       	pop	r30
    369e:	bf 91       	pop	r27
    36a0:	af 91       	pop	r26
    36a2:	9f 91       	pop	r25
    36a4:	8f 91       	pop	r24
    36a6:	7f 91       	pop	r23
    36a8:	6f 91       	pop	r22
    36aa:	5f 91       	pop	r21
    36ac:	4f 91       	pop	r20
    36ae:	3f 91       	pop	r19
    36b0:	2f 91       	pop	r18
    36b2:	0f 90       	pop	r0
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	0f 90       	pop	r0
    36b8:	1f 90       	pop	r1
    36ba:	18 95       	reti

000036bc <_ZN14SoftwareSerial5setTXEh>:
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	ec 01       	movw	r28, r24
    36c4:	16 2f       	mov	r17, r22
    36c6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    36c8:	66 95       	lsr	r22
    36ca:	61 70       	andi	r22, 0x01	; 1
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	68 27       	eor	r22, r24
    36d0:	81 2f       	mov	r24, r17
    36d2:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	81 2f       	mov	r24, r17
    36da:	0e 94 b3 18 	call	0x3166	; 0x3166 <pinMode>
    36de:	81 2f       	mov	r24, r17
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	fc 01       	movw	r30, r24
    36e4:	e1 50       	subi	r30, 0x01	; 1
    36e6:	fa 4f       	sbci	r31, 0xFA	; 250
    36e8:	e4 91       	lpm	r30, Z
    36ea:	e8 8b       	std	Y+16, r30	; 0x10
    36ec:	fc 01       	movw	r30, r24
    36ee:	ed 5e       	subi	r30, 0xED	; 237
    36f0:	f9 4f       	sbci	r31, 0xF9	; 249
    36f2:	e4 91       	lpm	r30, Z
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	ee 0f       	add	r30, r30
    36f8:	ff 1f       	adc	r31, r31
    36fa:	ef 5c       	subi	r30, 0xCF	; 207
    36fc:	f9 4f       	sbci	r31, 0xF9	; 249
    36fe:	85 91       	lpm	r24, Z+
    3700:	94 91       	lpm	r25, Z
    3702:	9a 8b       	std	Y+18, r25	; 0x12
    3704:	89 8b       	std	Y+17, r24	; 0x11
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	08 95       	ret

0000370e <_ZN14SoftwareSerial5setRXEh>:
    370e:	1f 93       	push	r17
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	ec 01       	movw	r28, r24
    3716:	16 2f       	mov	r17, r22
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	81 2f       	mov	r24, r17
    371c:	0e 94 b3 18 	call	0x3166	; 0x3166 <pinMode>
    3720:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3722:	81 fd       	sbrc	r24, 1
    3724:	04 c0       	rjmp	.+8      	; 0x372e <_ZN14SoftwareSerial5setRXEh+0x20>
    3726:	61 e0       	ldi	r22, 0x01	; 1
    3728:	81 2f       	mov	r24, r17
    372a:	0e 94 ef 18 	call	0x31de	; 0x31de <digitalWrite>
    372e:	1c 87       	std	Y+12, r17	; 0x0c
    3730:	81 2f       	mov	r24, r17
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	fc 01       	movw	r30, r24
    3736:	e1 50       	subi	r30, 0x01	; 1
    3738:	fa 4f       	sbci	r31, 0xFA	; 250
    373a:	e4 91       	lpm	r30, Z
    373c:	ed 87       	std	Y+13, r30	; 0x0d
    373e:	fc 01       	movw	r30, r24
    3740:	ed 5e       	subi	r30, 0xED	; 237
    3742:	f9 4f       	sbci	r31, 0xF9	; 249
    3744:	e4 91       	lpm	r30, Z
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	ee 0f       	add	r30, r30
    374a:	ff 1f       	adc	r31, r31
    374c:	e9 5d       	subi	r30, 0xD9	; 217
    374e:	f9 4f       	sbci	r31, 0xF9	; 249
    3750:	85 91       	lpm	r24, Z+
    3752:	94 91       	lpm	r25, Z
    3754:	9f 87       	std	Y+15, r25	; 0x0f
    3756:	8e 87       	std	Y+14, r24	; 0x0e
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	1f 91       	pop	r17
    375e:	08 95       	ret

00003760 <_ZN14SoftwareSerialC1Ehhb>:
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	ec 01       	movw	r28, r24
    3768:	16 2f       	mov	r17, r22
    376a:	1b 82       	std	Y+3, r1	; 0x03
    376c:	1a 82       	std	Y+2, r1	; 0x02
    376e:	88 ee       	ldi	r24, 0xE8	; 232
    3770:	93 e0       	ldi	r25, 0x03	; 3
    3772:	a0 e0       	ldi	r26, 0x00	; 0
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	8c 83       	std	Y+4, r24	; 0x04
    3778:	9d 83       	std	Y+5, r25	; 0x05
    377a:	ae 83       	std	Y+6, r26	; 0x06
    377c:	bf 83       	std	Y+7, r27	; 0x07
    377e:	87 e8       	ldi	r24, 0x87	; 135
    3780:	92 e0       	ldi	r25, 0x02	; 2
    3782:	99 83       	std	Y+1, r25	; 0x01
    3784:	88 83       	st	Y, r24
    3786:	1f 8a       	std	Y+23, r1	; 0x17
    3788:	1e 8a       	std	Y+22, r1	; 0x16
    378a:	19 8e       	std	Y+25, r1	; 0x19
    378c:	18 8e       	std	Y+24, r1	; 0x18
    378e:	1b 8e       	std	Y+27, r1	; 0x1b
    3790:	1a 8e       	std	Y+26, r1	; 0x1a
    3792:	1d 8e       	std	Y+29, r1	; 0x1d
    3794:	1c 8e       	std	Y+28, r1	; 0x1c
    3796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3798:	8e 7f       	andi	r24, 0xFE	; 254
    379a:	20 fb       	bst	r18, 0
    379c:	81 f9       	bld	r24, 1
    379e:	8e 8f       	std	Y+30, r24	; 0x1e
    37a0:	64 2f       	mov	r22, r20
    37a2:	ce 01       	movw	r24, r28
    37a4:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN14SoftwareSerial5setTXEh>
    37a8:	61 2f       	mov	r22, r17
    37aa:	ce 01       	movw	r24, r28
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0c 94 87 1b 	jmp	0x370e	; 0x370e <_ZN14SoftwareSerial5setRXEh>

000037b6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	ec 01       	movw	r28, r24
    37bc:	9a 01       	movw	r18, r20
    37be:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    37c0:	1b 8e       	std	Y+27, r1	; 0x1b
    37c2:	1a 8e       	std	Y+26, r1	; 0x1a
    37c4:	19 8e       	std	Y+25, r1	; 0x19
    37c6:	18 8e       	std	Y+24, r1	; 0x18
    37c8:	1f 8a       	std	Y+23, r1	; 0x17
    37ca:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	79 e0       	ldi	r23, 0x09	; 9
    37d0:	8d e3       	ldi	r24, 0x3D	; 61
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__divmodsi4>
    37d8:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    37da:	24 30       	cpi	r18, 0x04	; 4
    37dc:	31 05       	cpc	r19, r1
    37de:	18 f0       	brcs	.+6      	; 0x37e6 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    37e0:	c9 01       	movw	r24, r18
    37e2:	03 97       	sbiw	r24, 0x03	; 3
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    37ea:	9d 8f       	std	Y+29, r25	; 0x1d
    37ec:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    37ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    37f0:	66 31       	cpi	r22, 0x16	; 22
    37f2:	08 f0       	brcs	.+2      	; 0x37f6 <_ZN14SoftwareSerial5beginEl+0x40>
    37f4:	69 c0       	rjmp	.+210    	; 0x38c8 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    37f6:	c9 01       	movw	r24, r18
    37f8:	96 95       	lsr	r25
    37fa:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    37fc:	84 31       	cpi	r24, 0x14	; 20
    37fe:	91 05       	cpc	r25, r1
    3800:	10 f0       	brcs	.+4      	; 0x3806 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3802:	43 97       	sbiw	r24, 0x13	; 19
    3804:	02 c0       	rjmp	.+4      	; 0x380a <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    380a:	9f 8b       	std	Y+23, r25	; 0x17
    380c:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    380e:	36 97       	sbiw	r30, 0x06	; 6
    3810:	18 f0       	brcs	.+6      	; 0x3818 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3812:	c9 01       	movw	r24, r18
    3814:	05 97       	sbiw	r24, 0x05	; 5
    3816:	02 c0       	rjmp	.+4      	; 0x381c <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    381c:	99 8f       	std	Y+25, r25	; 0x19
    381e:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3820:	c9 01       	movw	r24, r18
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	28 0f       	add	r18, r24
    3828:	39 1f       	adc	r19, r25
    382a:	36 95       	lsr	r19
    382c:	27 95       	ror	r18
    382e:	36 95       	lsr	r19
    3830:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3832:	2d 30       	cpi	r18, 0x0D	; 13
    3834:	31 05       	cpc	r19, r1
    3836:	18 f0       	brcs	.+6      	; 0x383e <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3838:	2c 50       	subi	r18, 0x0C	; 12
    383a:	31 09       	sbc	r19, r1
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    383e:	21 e0       	ldi	r18, 0x01	; 1
    3840:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3842:	3b 8f       	std	Y+27, r19	; 0x1b
    3844:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3846:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    384a:	68 30       	cpi	r22, 0x08	; 8
    384c:	50 f0       	brcs	.+20     	; 0x3862 <_ZN14SoftwareSerial5beginEl+0xac>
    384e:	21 e0       	ldi	r18, 0x01	; 1
    3850:	6e 30       	cpi	r22, 0x0E	; 14
    3852:	08 f4       	brcc	.+2      	; 0x3856 <_ZN14SoftwareSerial5beginEl+0xa0>
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	01 c0       	rjmp	.+2      	; 0x385c <_ZN14SoftwareSerial5beginEl+0xa6>
    385a:	88 0f       	add	r24, r24
    385c:	2a 95       	dec	r18
    385e:	ea f7       	brpl	.-6      	; 0x385a <_ZN14SoftwareSerial5beginEl+0xa4>
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <_ZN14SoftwareSerial5beginEl+0xae>
    3862:	84 e0       	ldi	r24, 0x04	; 4
    3864:	89 2b       	or	r24, r25
    3866:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    386a:	9c 85       	ldd	r25, Y+12	; 0x0c
    386c:	98 30       	cpi	r25, 0x08	; 8
    386e:	38 f0       	brcs	.+14     	; 0x387e <_ZN14SoftwareSerial5beginEl+0xc8>
    3870:	9e 30       	cpi	r25, 0x0E	; 14
    3872:	40 f0       	brcs	.+16     	; 0x3884 <_ZN14SoftwareSerial5beginEl+0xce>
    3874:	96 31       	cpi	r25, 0x16	; 22
    3876:	48 f0       	brcs	.+18     	; 0x388a <_ZN14SoftwareSerial5beginEl+0xd4>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	08 c0       	rjmp	.+16     	; 0x388e <_ZN14SoftwareSerial5beginEl+0xd8>
    387e:	2d e6       	ldi	r18, 0x6D	; 109
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	05 c0       	rjmp	.+10     	; 0x388e <_ZN14SoftwareSerial5beginEl+0xd8>
    3884:	2b e6       	ldi	r18, 0x6B	; 107
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	02 c0       	rjmp	.+4      	; 0x388e <_ZN14SoftwareSerial5beginEl+0xd8>
    388a:	2c e6       	ldi	r18, 0x6C	; 108
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	3c 8b       	std	Y+20, r19	; 0x14
    3890:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3892:	98 30       	cpi	r25, 0x08	; 8
    3894:	30 f4       	brcc	.+12     	; 0x38a2 <_ZN14SoftwareSerial5beginEl+0xec>
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	01 c0       	rjmp	.+2      	; 0x389c <_ZN14SoftwareSerial5beginEl+0xe6>
    389a:	88 0f       	add	r24, r24
    389c:	9a 95       	dec	r25
    389e:	ea f7       	brpl	.-6      	; 0x389a <_ZN14SoftwareSerial5beginEl+0xe4>
    38a0:	0e c0       	rjmp	.+28     	; 0x38be <_ZN14SoftwareSerial5beginEl+0x108>
    38a2:	29 2f       	mov	r18, r25
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	9e 30       	cpi	r25, 0x0E	; 14
    38a8:	18 f4       	brcc	.+6      	; 0x38b0 <_ZN14SoftwareSerial5beginEl+0xfa>
    38aa:	28 50       	subi	r18, 0x08	; 8
    38ac:	31 09       	sbc	r19, r1
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <_ZN14SoftwareSerial5beginEl+0xfe>
    38b0:	2e 50       	subi	r18, 0x0E	; 14
    38b2:	31 09       	sbc	r19, r1
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <_ZN14SoftwareSerial5beginEl+0x104>
    38b8:	88 0f       	add	r24, r24
    38ba:	2a 95       	dec	r18
    38bc:	ea f7       	brpl	.-6      	; 0x38b8 <_ZN14SoftwareSerial5beginEl+0x102>
    38be:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    38c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38c4:	01 97       	sbiw	r24, 0x01	; 1
    38c6:	f1 f7       	brne	.-4      	; 0x38c4 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    38c8:	ce 01       	movw	r24, r28
}
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    38ce:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <_ZN14SoftwareSerial6listenEv>

000038d2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    38d2:	08 95       	ret

000038d4 <__udivmodqi4>:
    38d4:	99 1b       	sub	r25, r25
    38d6:	79 e0       	ldi	r23, 0x09	; 9
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <__udivmodqi4_ep>

000038da <__udivmodqi4_loop>:
    38da:	99 1f       	adc	r25, r25
    38dc:	96 17       	cp	r25, r22
    38de:	08 f0       	brcs	.+2      	; 0x38e2 <__udivmodqi4_ep>
    38e0:	96 1b       	sub	r25, r22

000038e2 <__udivmodqi4_ep>:
    38e2:	88 1f       	adc	r24, r24
    38e4:	7a 95       	dec	r23
    38e6:	c9 f7       	brne	.-14     	; 0x38da <__udivmodqi4_loop>
    38e8:	80 95       	com	r24
    38ea:	08 95       	ret

000038ec <__divmodhi4>:
    38ec:	97 fb       	bst	r25, 7
    38ee:	07 2e       	mov	r0, r23
    38f0:	16 f4       	brtc	.+4      	; 0x38f6 <__divmodhi4+0xa>
    38f2:	00 94       	com	r0
    38f4:	07 d0       	rcall	.+14     	; 0x3904 <__divmodhi4_neg1>
    38f6:	77 fd       	sbrc	r23, 7
    38f8:	09 d0       	rcall	.+18     	; 0x390c <__divmodhi4_neg2>
    38fa:	0e 94 cb 1c 	call	0x3996	; 0x3996 <__udivmodhi4>
    38fe:	07 fc       	sbrc	r0, 7
    3900:	05 d0       	rcall	.+10     	; 0x390c <__divmodhi4_neg2>
    3902:	3e f4       	brtc	.+14     	; 0x3912 <__divmodhi4_exit>

00003904 <__divmodhi4_neg1>:
    3904:	90 95       	com	r25
    3906:	81 95       	neg	r24
    3908:	9f 4f       	sbci	r25, 0xFF	; 255
    390a:	08 95       	ret

0000390c <__divmodhi4_neg2>:
    390c:	70 95       	com	r23
    390e:	61 95       	neg	r22
    3910:	7f 4f       	sbci	r23, 0xFF	; 255

00003912 <__divmodhi4_exit>:
    3912:	08 95       	ret

00003914 <__udivmodsi4>:
    3914:	a1 e2       	ldi	r26, 0x21	; 33
    3916:	1a 2e       	mov	r1, r26
    3918:	aa 1b       	sub	r26, r26
    391a:	bb 1b       	sub	r27, r27
    391c:	fd 01       	movw	r30, r26
    391e:	0d c0       	rjmp	.+26     	; 0x393a <__udivmodsi4_ep>

00003920 <__udivmodsi4_loop>:
    3920:	aa 1f       	adc	r26, r26
    3922:	bb 1f       	adc	r27, r27
    3924:	ee 1f       	adc	r30, r30
    3926:	ff 1f       	adc	r31, r31
    3928:	a2 17       	cp	r26, r18
    392a:	b3 07       	cpc	r27, r19
    392c:	e4 07       	cpc	r30, r20
    392e:	f5 07       	cpc	r31, r21
    3930:	20 f0       	brcs	.+8      	; 0x393a <__udivmodsi4_ep>
    3932:	a2 1b       	sub	r26, r18
    3934:	b3 0b       	sbc	r27, r19
    3936:	e4 0b       	sbc	r30, r20
    3938:	f5 0b       	sbc	r31, r21

0000393a <__udivmodsi4_ep>:
    393a:	66 1f       	adc	r22, r22
    393c:	77 1f       	adc	r23, r23
    393e:	88 1f       	adc	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	1a 94       	dec	r1
    3944:	69 f7       	brne	.-38     	; 0x3920 <__udivmodsi4_loop>
    3946:	60 95       	com	r22
    3948:	70 95       	com	r23
    394a:	80 95       	com	r24
    394c:	90 95       	com	r25
    394e:	9b 01       	movw	r18, r22
    3950:	ac 01       	movw	r20, r24
    3952:	bd 01       	movw	r22, r26
    3954:	cf 01       	movw	r24, r30
    3956:	08 95       	ret

00003958 <__divmodsi4>:
    3958:	05 2e       	mov	r0, r21
    395a:	97 fb       	bst	r25, 7
    395c:	1e f4       	brtc	.+6      	; 0x3964 <__divmodsi4+0xc>
    395e:	00 94       	com	r0
    3960:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__negsi2>
    3964:	57 fd       	sbrc	r21, 7
    3966:	07 d0       	rcall	.+14     	; 0x3976 <__divmodsi4_neg2>
    3968:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__udivmodsi4>
    396c:	07 fc       	sbrc	r0, 7
    396e:	03 d0       	rcall	.+6      	; 0x3976 <__divmodsi4_neg2>
    3970:	4e f4       	brtc	.+18     	; 0x3984 <__divmodsi4_exit>
    3972:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__negsi2>

00003976 <__divmodsi4_neg2>:
    3976:	50 95       	com	r21
    3978:	40 95       	com	r20
    397a:	30 95       	com	r19
    397c:	21 95       	neg	r18
    397e:	3f 4f       	sbci	r19, 0xFF	; 255
    3980:	4f 4f       	sbci	r20, 0xFF	; 255
    3982:	5f 4f       	sbci	r21, 0xFF	; 255

00003984 <__divmodsi4_exit>:
    3984:	08 95       	ret

00003986 <__negsi2>:
    3986:	90 95       	com	r25
    3988:	80 95       	com	r24
    398a:	70 95       	com	r23
    398c:	61 95       	neg	r22
    398e:	7f 4f       	sbci	r23, 0xFF	; 255
    3990:	8f 4f       	sbci	r24, 0xFF	; 255
    3992:	9f 4f       	sbci	r25, 0xFF	; 255
    3994:	08 95       	ret

00003996 <__udivmodhi4>:
    3996:	aa 1b       	sub	r26, r26
    3998:	bb 1b       	sub	r27, r27
    399a:	51 e1       	ldi	r21, 0x11	; 17
    399c:	07 c0       	rjmp	.+14     	; 0x39ac <__udivmodhi4_ep>

0000399e <__udivmodhi4_loop>:
    399e:	aa 1f       	adc	r26, r26
    39a0:	bb 1f       	adc	r27, r27
    39a2:	a6 17       	cp	r26, r22
    39a4:	b7 07       	cpc	r27, r23
    39a6:	10 f0       	brcs	.+4      	; 0x39ac <__udivmodhi4_ep>
    39a8:	a6 1b       	sub	r26, r22
    39aa:	b7 0b       	sbc	r27, r23

000039ac <__udivmodhi4_ep>:
    39ac:	88 1f       	adc	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	5a 95       	dec	r21
    39b2:	a9 f7       	brne	.-22     	; 0x399e <__udivmodhi4_loop>
    39b4:	80 95       	com	r24
    39b6:	90 95       	com	r25
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	08 95       	ret

000039be <__tablejump2__>:
    39be:	ee 0f       	add	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	05 90       	lpm	r0, Z+
    39c4:	f4 91       	lpm	r31, Z
    39c6:	e0 2d       	mov	r30, r0
    39c8:	09 94       	ijmp

000039ca <malloc>:
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	82 30       	cpi	r24, 0x02	; 2
    39d4:	91 05       	cpc	r25, r1
    39d6:	10 f4       	brcc	.+4      	; 0x39dc <malloc+0x12>
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	e0 91 73 05 	lds	r30, 0x0573	; 0x800573 <__flp>
    39e0:	f0 91 74 05 	lds	r31, 0x0574	; 0x800574 <__flp+0x1>
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	a0 e0       	ldi	r26, 0x00	; 0
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	30 97       	sbiw	r30, 0x00	; 0
    39ee:	19 f1       	breq	.+70     	; 0x3a36 <malloc+0x6c>
    39f0:	40 81       	ld	r20, Z
    39f2:	51 81       	ldd	r21, Z+1	; 0x01
    39f4:	02 81       	ldd	r16, Z+2	; 0x02
    39f6:	13 81       	ldd	r17, Z+3	; 0x03
    39f8:	48 17       	cp	r20, r24
    39fa:	59 07       	cpc	r21, r25
    39fc:	c8 f0       	brcs	.+50     	; 0x3a30 <malloc+0x66>
    39fe:	84 17       	cp	r24, r20
    3a00:	95 07       	cpc	r25, r21
    3a02:	69 f4       	brne	.+26     	; 0x3a1e <malloc+0x54>
    3a04:	10 97       	sbiw	r26, 0x00	; 0
    3a06:	31 f0       	breq	.+12     	; 0x3a14 <malloc+0x4a>
    3a08:	12 96       	adiw	r26, 0x02	; 2
    3a0a:	0c 93       	st	X, r16
    3a0c:	12 97       	sbiw	r26, 0x02	; 2
    3a0e:	13 96       	adiw	r26, 0x03	; 3
    3a10:	1c 93       	st	X, r17
    3a12:	27 c0       	rjmp	.+78     	; 0x3a62 <malloc+0x98>
    3a14:	00 93 73 05 	sts	0x0573, r16	; 0x800573 <__flp>
    3a18:	10 93 74 05 	sts	0x0574, r17	; 0x800574 <__flp+0x1>
    3a1c:	22 c0       	rjmp	.+68     	; 0x3a62 <malloc+0x98>
    3a1e:	21 15       	cp	r18, r1
    3a20:	31 05       	cpc	r19, r1
    3a22:	19 f0       	breq	.+6      	; 0x3a2a <malloc+0x60>
    3a24:	42 17       	cp	r20, r18
    3a26:	53 07       	cpc	r21, r19
    3a28:	18 f4       	brcc	.+6      	; 0x3a30 <malloc+0x66>
    3a2a:	9a 01       	movw	r18, r20
    3a2c:	bd 01       	movw	r22, r26
    3a2e:	ef 01       	movw	r28, r30
    3a30:	df 01       	movw	r26, r30
    3a32:	f8 01       	movw	r30, r16
    3a34:	db cf       	rjmp	.-74     	; 0x39ec <malloc+0x22>
    3a36:	21 15       	cp	r18, r1
    3a38:	31 05       	cpc	r19, r1
    3a3a:	f9 f0       	breq	.+62     	; 0x3a7a <malloc+0xb0>
    3a3c:	28 1b       	sub	r18, r24
    3a3e:	39 0b       	sbc	r19, r25
    3a40:	24 30       	cpi	r18, 0x04	; 4
    3a42:	31 05       	cpc	r19, r1
    3a44:	80 f4       	brcc	.+32     	; 0x3a66 <malloc+0x9c>
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4a:	61 15       	cp	r22, r1
    3a4c:	71 05       	cpc	r23, r1
    3a4e:	21 f0       	breq	.+8      	; 0x3a58 <malloc+0x8e>
    3a50:	fb 01       	movw	r30, r22
    3a52:	93 83       	std	Z+3, r25	; 0x03
    3a54:	82 83       	std	Z+2, r24	; 0x02
    3a56:	04 c0       	rjmp	.+8      	; 0x3a60 <malloc+0x96>
    3a58:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <__flp+0x1>
    3a5c:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <__flp>
    3a60:	fe 01       	movw	r30, r28
    3a62:	32 96       	adiw	r30, 0x02	; 2
    3a64:	44 c0       	rjmp	.+136    	; 0x3aee <malloc+0x124>
    3a66:	fe 01       	movw	r30, r28
    3a68:	e2 0f       	add	r30, r18
    3a6a:	f3 1f       	adc	r31, r19
    3a6c:	81 93       	st	Z+, r24
    3a6e:	91 93       	st	Z+, r25
    3a70:	22 50       	subi	r18, 0x02	; 2
    3a72:	31 09       	sbc	r19, r1
    3a74:	39 83       	std	Y+1, r19	; 0x01
    3a76:	28 83       	st	Y, r18
    3a78:	3a c0       	rjmp	.+116    	; 0x3aee <malloc+0x124>
    3a7a:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    3a7e:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    3a82:	23 2b       	or	r18, r19
    3a84:	41 f4       	brne	.+16     	; 0x3a96 <malloc+0xcc>
    3a86:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a8a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a8e:	30 93 72 05 	sts	0x0572, r19	; 0x800572 <__brkval+0x1>
    3a92:	20 93 71 05 	sts	0x0571, r18	; 0x800571 <__brkval>
    3a96:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3a9a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a9e:	21 15       	cp	r18, r1
    3aa0:	31 05       	cpc	r19, r1
    3aa2:	41 f4       	brne	.+16     	; 0x3ab4 <malloc+0xea>
    3aa4:	2d b7       	in	r18, 0x3d	; 61
    3aa6:	3e b7       	in	r19, 0x3e	; 62
    3aa8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3aac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3ab0:	24 1b       	sub	r18, r20
    3ab2:	35 0b       	sbc	r19, r21
    3ab4:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <__brkval>
    3ab8:	f0 91 72 05 	lds	r31, 0x0572	; 0x800572 <__brkval+0x1>
    3abc:	e2 17       	cp	r30, r18
    3abe:	f3 07       	cpc	r31, r19
    3ac0:	a0 f4       	brcc	.+40     	; 0x3aea <malloc+0x120>
    3ac2:	2e 1b       	sub	r18, r30
    3ac4:	3f 0b       	sbc	r19, r31
    3ac6:	28 17       	cp	r18, r24
    3ac8:	39 07       	cpc	r19, r25
    3aca:	78 f0       	brcs	.+30     	; 0x3aea <malloc+0x120>
    3acc:	ac 01       	movw	r20, r24
    3ace:	4e 5f       	subi	r20, 0xFE	; 254
    3ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad2:	24 17       	cp	r18, r20
    3ad4:	35 07       	cpc	r19, r21
    3ad6:	48 f0       	brcs	.+18     	; 0x3aea <malloc+0x120>
    3ad8:	4e 0f       	add	r20, r30
    3ada:	5f 1f       	adc	r21, r31
    3adc:	50 93 72 05 	sts	0x0572, r21	; 0x800572 <__brkval+0x1>
    3ae0:	40 93 71 05 	sts	0x0571, r20	; 0x800571 <__brkval>
    3ae4:	81 93       	st	Z+, r24
    3ae6:	91 93       	st	Z+, r25
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <malloc+0x124>
    3aea:	e0 e0       	ldi	r30, 0x00	; 0
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	cf 01       	movw	r24, r30
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	08 95       	ret

00003afa <free>:
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <free+0xa>
    3b02:	81 c0       	rjmp	.+258    	; 0x3c06 <free+0x10c>
    3b04:	fc 01       	movw	r30, r24
    3b06:	32 97       	sbiw	r30, 0x02	; 2
    3b08:	13 82       	std	Z+3, r1	; 0x03
    3b0a:	12 82       	std	Z+2, r1	; 0x02
    3b0c:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <__flp>
    3b10:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <__flp+0x1>
    3b14:	10 97       	sbiw	r26, 0x00	; 0
    3b16:	81 f4       	brne	.+32     	; 0x3b38 <free+0x3e>
    3b18:	20 81       	ld	r18, Z
    3b1a:	31 81       	ldd	r19, Z+1	; 0x01
    3b1c:	82 0f       	add	r24, r18
    3b1e:	93 1f       	adc	r25, r19
    3b20:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    3b24:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    3b28:	28 17       	cp	r18, r24
    3b2a:	39 07       	cpc	r19, r25
    3b2c:	51 f5       	brne	.+84     	; 0x3b82 <free+0x88>
    3b2e:	f0 93 72 05 	sts	0x0572, r31	; 0x800572 <__brkval+0x1>
    3b32:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <__brkval>
    3b36:	67 c0       	rjmp	.+206    	; 0x3c06 <free+0x10c>
    3b38:	ed 01       	movw	r28, r26
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	ce 17       	cp	r28, r30
    3b40:	df 07       	cpc	r29, r31
    3b42:	40 f4       	brcc	.+16     	; 0x3b54 <free+0x5a>
    3b44:	4a 81       	ldd	r20, Y+2	; 0x02
    3b46:	5b 81       	ldd	r21, Y+3	; 0x03
    3b48:	9e 01       	movw	r18, r28
    3b4a:	41 15       	cp	r20, r1
    3b4c:	51 05       	cpc	r21, r1
    3b4e:	f1 f0       	breq	.+60     	; 0x3b8c <free+0x92>
    3b50:	ea 01       	movw	r28, r20
    3b52:	f5 cf       	rjmp	.-22     	; 0x3b3e <free+0x44>
    3b54:	d3 83       	std	Z+3, r29	; 0x03
    3b56:	c2 83       	std	Z+2, r28	; 0x02
    3b58:	40 81       	ld	r20, Z
    3b5a:	51 81       	ldd	r21, Z+1	; 0x01
    3b5c:	84 0f       	add	r24, r20
    3b5e:	95 1f       	adc	r25, r21
    3b60:	c8 17       	cp	r28, r24
    3b62:	d9 07       	cpc	r29, r25
    3b64:	59 f4       	brne	.+22     	; 0x3b7c <free+0x82>
    3b66:	88 81       	ld	r24, Y
    3b68:	99 81       	ldd	r25, Y+1	; 0x01
    3b6a:	84 0f       	add	r24, r20
    3b6c:	95 1f       	adc	r25, r21
    3b6e:	02 96       	adiw	r24, 0x02	; 2
    3b70:	91 83       	std	Z+1, r25	; 0x01
    3b72:	80 83       	st	Z, r24
    3b74:	8a 81       	ldd	r24, Y+2	; 0x02
    3b76:	9b 81       	ldd	r25, Y+3	; 0x03
    3b78:	93 83       	std	Z+3, r25	; 0x03
    3b7a:	82 83       	std	Z+2, r24	; 0x02
    3b7c:	21 15       	cp	r18, r1
    3b7e:	31 05       	cpc	r19, r1
    3b80:	29 f4       	brne	.+10     	; 0x3b8c <free+0x92>
    3b82:	f0 93 74 05 	sts	0x0574, r31	; 0x800574 <__flp+0x1>
    3b86:	e0 93 73 05 	sts	0x0573, r30	; 0x800573 <__flp>
    3b8a:	3d c0       	rjmp	.+122    	; 0x3c06 <free+0x10c>
    3b8c:	e9 01       	movw	r28, r18
    3b8e:	fb 83       	std	Y+3, r31	; 0x03
    3b90:	ea 83       	std	Y+2, r30	; 0x02
    3b92:	49 91       	ld	r20, Y+
    3b94:	59 91       	ld	r21, Y+
    3b96:	c4 0f       	add	r28, r20
    3b98:	d5 1f       	adc	r29, r21
    3b9a:	ec 17       	cp	r30, r28
    3b9c:	fd 07       	cpc	r31, r29
    3b9e:	61 f4       	brne	.+24     	; 0x3bb8 <free+0xbe>
    3ba0:	80 81       	ld	r24, Z
    3ba2:	91 81       	ldd	r25, Z+1	; 0x01
    3ba4:	84 0f       	add	r24, r20
    3ba6:	95 1f       	adc	r25, r21
    3ba8:	02 96       	adiw	r24, 0x02	; 2
    3baa:	e9 01       	movw	r28, r18
    3bac:	99 83       	std	Y+1, r25	; 0x01
    3bae:	88 83       	st	Y, r24
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	9b 83       	std	Y+3, r25	; 0x03
    3bb6:	8a 83       	std	Y+2, r24	; 0x02
    3bb8:	e0 e0       	ldi	r30, 0x00	; 0
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	12 96       	adiw	r26, 0x02	; 2
    3bbe:	8d 91       	ld	r24, X+
    3bc0:	9c 91       	ld	r25, X
    3bc2:	13 97       	sbiw	r26, 0x03	; 3
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	19 f0       	breq	.+6      	; 0x3bce <free+0xd4>
    3bc8:	fd 01       	movw	r30, r26
    3bca:	dc 01       	movw	r26, r24
    3bcc:	f7 cf       	rjmp	.-18     	; 0x3bbc <free+0xc2>
    3bce:	8d 91       	ld	r24, X+
    3bd0:	9c 91       	ld	r25, X
    3bd2:	11 97       	sbiw	r26, 0x01	; 1
    3bd4:	9d 01       	movw	r18, r26
    3bd6:	2e 5f       	subi	r18, 0xFE	; 254
    3bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bda:	82 0f       	add	r24, r18
    3bdc:	93 1f       	adc	r25, r19
    3bde:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    3be2:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    3be6:	28 17       	cp	r18, r24
    3be8:	39 07       	cpc	r19, r25
    3bea:	69 f4       	brne	.+26     	; 0x3c06 <free+0x10c>
    3bec:	30 97       	sbiw	r30, 0x00	; 0
    3bee:	29 f4       	brne	.+10     	; 0x3bfa <free+0x100>
    3bf0:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <__flp+0x1>
    3bf4:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <__flp>
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <free+0x104>
    3bfa:	13 82       	std	Z+3, r1	; 0x03
    3bfc:	12 82       	std	Z+2, r1	; 0x02
    3bfe:	b0 93 72 05 	sts	0x0572, r27	; 0x800572 <__brkval+0x1>
    3c02:	a0 93 71 05 	sts	0x0571, r26	; 0x800571 <__brkval>
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	08 95       	ret

00003c0c <realloc>:
    3c0c:	a0 e0       	ldi	r26, 0x00	; 0
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	ec e0       	ldi	r30, 0x0C	; 12
    3c12:	fe e1       	ldi	r31, 0x1E	; 30
    3c14:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x8>
    3c18:	ec 01       	movw	r28, r24
    3c1a:	00 97       	sbiw	r24, 0x00	; 0
    3c1c:	21 f4       	brne	.+8      	; 0x3c26 <realloc+0x1a>
    3c1e:	cb 01       	movw	r24, r22
    3c20:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <malloc>
    3c24:	b4 c0       	rjmp	.+360    	; 0x3d8e <realloc+0x182>
    3c26:	fc 01       	movw	r30, r24
    3c28:	e6 0f       	add	r30, r22
    3c2a:	f7 1f       	adc	r31, r23
    3c2c:	9c 01       	movw	r18, r24
    3c2e:	22 50       	subi	r18, 0x02	; 2
    3c30:	31 09       	sbc	r19, r1
    3c32:	e2 17       	cp	r30, r18
    3c34:	f3 07       	cpc	r31, r19
    3c36:	08 f4       	brcc	.+2      	; 0x3c3a <realloc+0x2e>
    3c38:	a8 c0       	rjmp	.+336    	; 0x3d8a <realloc+0x17e>
    3c3a:	d9 01       	movw	r26, r18
    3c3c:	0d 91       	ld	r16, X+
    3c3e:	1c 91       	ld	r17, X
    3c40:	11 97       	sbiw	r26, 0x01	; 1
    3c42:	06 17       	cp	r16, r22
    3c44:	17 07       	cpc	r17, r23
    3c46:	b0 f0       	brcs	.+44     	; 0x3c74 <realloc+0x68>
    3c48:	05 30       	cpi	r16, 0x05	; 5
    3c4a:	11 05       	cpc	r17, r1
    3c4c:	08 f4       	brcc	.+2      	; 0x3c50 <realloc+0x44>
    3c4e:	9b c0       	rjmp	.+310    	; 0x3d86 <realloc+0x17a>
    3c50:	c8 01       	movw	r24, r16
    3c52:	04 97       	sbiw	r24, 0x04	; 4
    3c54:	86 17       	cp	r24, r22
    3c56:	97 07       	cpc	r25, r23
    3c58:	08 f4       	brcc	.+2      	; 0x3c5c <realloc+0x50>
    3c5a:	95 c0       	rjmp	.+298    	; 0x3d86 <realloc+0x17a>
    3c5c:	02 50       	subi	r16, 0x02	; 2
    3c5e:	11 09       	sbc	r17, r1
    3c60:	06 1b       	sub	r16, r22
    3c62:	17 0b       	sbc	r17, r23
    3c64:	01 93       	st	Z+, r16
    3c66:	11 93       	st	Z+, r17
    3c68:	6d 93       	st	X+, r22
    3c6a:	7c 93       	st	X, r23
    3c6c:	cf 01       	movw	r24, r30
    3c6e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <free>
    3c72:	89 c0       	rjmp	.+274    	; 0x3d86 <realloc+0x17a>
    3c74:	5b 01       	movw	r10, r22
    3c76:	a0 1a       	sub	r10, r16
    3c78:	b1 0a       	sbc	r11, r17
    3c7a:	4c 01       	movw	r8, r24
    3c7c:	80 0e       	add	r8, r16
    3c7e:	91 1e       	adc	r9, r17
    3c80:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <__flp>
    3c84:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <__flp+0x1>
    3c88:	61 2c       	mov	r6, r1
    3c8a:	71 2c       	mov	r7, r1
    3c8c:	e1 2c       	mov	r14, r1
    3c8e:	f1 2c       	mov	r15, r1
    3c90:	10 97       	sbiw	r26, 0x00	; 0
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <realloc+0x8a>
    3c94:	46 c0       	rjmp	.+140    	; 0x3d22 <realloc+0x116>
    3c96:	8d 91       	ld	r24, X+
    3c98:	9c 91       	ld	r25, X
    3c9a:	11 97       	sbiw	r26, 0x01	; 1
    3c9c:	a8 15       	cp	r26, r8
    3c9e:	b9 05       	cpc	r27, r9
    3ca0:	b1 f5       	brne	.+108    	; 0x3d0e <realloc+0x102>
    3ca2:	6c 01       	movw	r12, r24
    3ca4:	42 e0       	ldi	r20, 0x02	; 2
    3ca6:	c4 0e       	add	r12, r20
    3ca8:	d1 1c       	adc	r13, r1
    3caa:	ca 14       	cp	r12, r10
    3cac:	db 04       	cpc	r13, r11
    3cae:	78 f1       	brcs	.+94     	; 0x3d0e <realloc+0x102>
    3cb0:	4c 01       	movw	r8, r24
    3cb2:	8a 18       	sub	r8, r10
    3cb4:	9b 08       	sbc	r9, r11
    3cb6:	64 01       	movw	r12, r8
    3cb8:	42 e0       	ldi	r20, 0x02	; 2
    3cba:	c4 0e       	add	r12, r20
    3cbc:	d1 1c       	adc	r13, r1
    3cbe:	12 96       	adiw	r26, 0x02	; 2
    3cc0:	bc 90       	ld	r11, X
    3cc2:	12 97       	sbiw	r26, 0x02	; 2
    3cc4:	13 96       	adiw	r26, 0x03	; 3
    3cc6:	ac 91       	ld	r26, X
    3cc8:	b5 e0       	ldi	r27, 0x05	; 5
    3cca:	cb 16       	cp	r12, r27
    3ccc:	d1 04       	cpc	r13, r1
    3cce:	40 f0       	brcs	.+16     	; 0x3ce0 <realloc+0xd4>
    3cd0:	b2 82       	std	Z+2, r11	; 0x02
    3cd2:	a3 83       	std	Z+3, r26	; 0x03
    3cd4:	91 82       	std	Z+1, r9	; 0x01
    3cd6:	80 82       	st	Z, r8
    3cd8:	d9 01       	movw	r26, r18
    3cda:	6d 93       	st	X+, r22
    3cdc:	7c 93       	st	X, r23
    3cde:	09 c0       	rjmp	.+18     	; 0x3cf2 <realloc+0xe6>
    3ce0:	0e 5f       	subi	r16, 0xFE	; 254
    3ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce4:	80 0f       	add	r24, r16
    3ce6:	91 1f       	adc	r25, r17
    3ce8:	f9 01       	movw	r30, r18
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
    3cee:	eb 2d       	mov	r30, r11
    3cf0:	fa 2f       	mov	r31, r26
    3cf2:	e1 14       	cp	r14, r1
    3cf4:	f1 04       	cpc	r15, r1
    3cf6:	31 f0       	breq	.+12     	; 0x3d04 <realloc+0xf8>
    3cf8:	d7 01       	movw	r26, r14
    3cfa:	13 96       	adiw	r26, 0x03	; 3
    3cfc:	fc 93       	st	X, r31
    3cfe:	ee 93       	st	-X, r30
    3d00:	12 97       	sbiw	r26, 0x02	; 2
    3d02:	41 c0       	rjmp	.+130    	; 0x3d86 <realloc+0x17a>
    3d04:	f0 93 74 05 	sts	0x0574, r31	; 0x800574 <__flp+0x1>
    3d08:	e0 93 73 05 	sts	0x0573, r30	; 0x800573 <__flp>
    3d0c:	3c c0       	rjmp	.+120    	; 0x3d86 <realloc+0x17a>
    3d0e:	68 16       	cp	r6, r24
    3d10:	79 06       	cpc	r7, r25
    3d12:	08 f4       	brcc	.+2      	; 0x3d16 <realloc+0x10a>
    3d14:	3c 01       	movw	r6, r24
    3d16:	7d 01       	movw	r14, r26
    3d18:	12 96       	adiw	r26, 0x02	; 2
    3d1a:	0d 90       	ld	r0, X+
    3d1c:	bc 91       	ld	r27, X
    3d1e:	a0 2d       	mov	r26, r0
    3d20:	b7 cf       	rjmp	.-146    	; 0x3c90 <realloc+0x84>
    3d22:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <__brkval>
    3d26:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <__brkval+0x1>
    3d2a:	88 16       	cp	r8, r24
    3d2c:	99 06       	cpc	r9, r25
    3d2e:	e1 f4       	brne	.+56     	; 0x3d68 <realloc+0x15c>
    3d30:	66 16       	cp	r6, r22
    3d32:	77 06       	cpc	r7, r23
    3d34:	c8 f4       	brcc	.+50     	; 0x3d68 <realloc+0x15c>
    3d36:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3d3a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	41 f4       	brne	.+16     	; 0x3d52 <realloc+0x146>
    3d42:	8d b7       	in	r24, 0x3d	; 61
    3d44:	9e b7       	in	r25, 0x3e	; 62
    3d46:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3d4a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3d4e:	84 1b       	sub	r24, r20
    3d50:	95 0b       	sbc	r25, r21
    3d52:	e8 17       	cp	r30, r24
    3d54:	f9 07       	cpc	r31, r25
    3d56:	c8 f4       	brcc	.+50     	; 0x3d8a <realloc+0x17e>
    3d58:	f0 93 72 05 	sts	0x0572, r31	; 0x800572 <__brkval+0x1>
    3d5c:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <__brkval>
    3d60:	f9 01       	movw	r30, r18
    3d62:	71 83       	std	Z+1, r23	; 0x01
    3d64:	60 83       	st	Z, r22
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <realloc+0x17a>
    3d68:	cb 01       	movw	r24, r22
    3d6a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <malloc>
    3d6e:	7c 01       	movw	r14, r24
    3d70:	00 97       	sbiw	r24, 0x00	; 0
    3d72:	59 f0       	breq	.+22     	; 0x3d8a <realloc+0x17e>
    3d74:	a8 01       	movw	r20, r16
    3d76:	be 01       	movw	r22, r28
    3d78:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <memcpy>
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <free>
    3d82:	c7 01       	movw	r24, r14
    3d84:	04 c0       	rjmp	.+8      	; 0x3d8e <realloc+0x182>
    3d86:	ce 01       	movw	r24, r28
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <realloc+0x182>
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	ee e0       	ldi	r30, 0x0E	; 14
    3d94:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x8>

00003d98 <atoi>:
    3d98:	fc 01       	movw	r30, r24
    3d9a:	88 27       	eor	r24, r24
    3d9c:	99 27       	eor	r25, r25
    3d9e:	e8 94       	clt
    3da0:	21 91       	ld	r18, Z+
    3da2:	20 32       	cpi	r18, 0x20	; 32
    3da4:	e9 f3       	breq	.-6      	; 0x3da0 <atoi+0x8>
    3da6:	29 30       	cpi	r18, 0x09	; 9
    3da8:	10 f0       	brcs	.+4      	; 0x3dae <atoi+0x16>
    3daa:	2e 30       	cpi	r18, 0x0E	; 14
    3dac:	c8 f3       	brcs	.-14     	; 0x3da0 <atoi+0x8>
    3dae:	2b 32       	cpi	r18, 0x2B	; 43
    3db0:	41 f0       	breq	.+16     	; 0x3dc2 <atoi+0x2a>
    3db2:	2d 32       	cpi	r18, 0x2D	; 45
    3db4:	39 f4       	brne	.+14     	; 0x3dc4 <atoi+0x2c>
    3db6:	68 94       	set
    3db8:	04 c0       	rjmp	.+8      	; 0x3dc2 <atoi+0x2a>
    3dba:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__mulhi_const_10>
    3dbe:	82 0f       	add	r24, r18
    3dc0:	91 1d       	adc	r25, r1
    3dc2:	21 91       	ld	r18, Z+
    3dc4:	20 53       	subi	r18, 0x30	; 48
    3dc6:	2a 30       	cpi	r18, 0x0A	; 10
    3dc8:	c0 f3       	brcs	.-16     	; 0x3dba <atoi+0x22>
    3dca:	1e f4       	brtc	.+6      	; 0x3dd2 <atoi+0x3a>
    3dcc:	90 95       	com	r25
    3dce:	81 95       	neg	r24
    3dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd2:	08 95       	ret

00003dd4 <strcmp_P>:
    3dd4:	fb 01       	movw	r30, r22
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	8d 91       	ld	r24, X+
    3dda:	05 90       	lpm	r0, Z+
    3ddc:	80 19       	sub	r24, r0
    3dde:	01 10       	cpse	r0, r1
    3de0:	d9 f3       	breq	.-10     	; 0x3dd8 <strcmp_P+0x4>
    3de2:	99 0b       	sbc	r25, r25
    3de4:	08 95       	ret

00003de6 <__strlen_P>:
    3de6:	fc 01       	movw	r30, r24
    3de8:	05 90       	lpm	r0, Z+
    3dea:	00 20       	and	r0, r0
    3dec:	e9 f7       	brne	.-6      	; 0x3de8 <__strlen_P+0x2>
    3dee:	80 95       	com	r24
    3df0:	90 95       	com	r25
    3df2:	8e 0f       	add	r24, r30
    3df4:	9f 1f       	adc	r25, r31
    3df6:	08 95       	ret

00003df8 <strstr_P>:
    3df8:	fb 01       	movw	r30, r22
    3dfa:	55 91       	lpm	r21, Z+
    3dfc:	55 23       	and	r21, r21
    3dfe:	a9 f0       	breq	.+42     	; 0x3e2a <strstr_P+0x32>
    3e00:	bf 01       	movw	r22, r30
    3e02:	dc 01       	movw	r26, r24
    3e04:	4d 91       	ld	r20, X+
    3e06:	45 17       	cp	r20, r21
    3e08:	41 11       	cpse	r20, r1
    3e0a:	e1 f7       	brne	.-8      	; 0x3e04 <strstr_P+0xc>
    3e0c:	59 f4       	brne	.+22     	; 0x3e24 <strstr_P+0x2c>
    3e0e:	cd 01       	movw	r24, r26
    3e10:	05 90       	lpm	r0, Z+
    3e12:	00 20       	and	r0, r0
    3e14:	49 f0       	breq	.+18     	; 0x3e28 <strstr_P+0x30>
    3e16:	4d 91       	ld	r20, X+
    3e18:	40 15       	cp	r20, r0
    3e1a:	41 11       	cpse	r20, r1
    3e1c:	c9 f3       	breq	.-14     	; 0x3e10 <strstr_P+0x18>
    3e1e:	fb 01       	movw	r30, r22
    3e20:	41 11       	cpse	r20, r1
    3e22:	ef cf       	rjmp	.-34     	; 0x3e02 <strstr_P+0xa>
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	01 97       	sbiw	r24, 0x01	; 1
    3e2a:	08 95       	ret

00003e2c <memcpy>:
    3e2c:	fb 01       	movw	r30, r22
    3e2e:	dc 01       	movw	r26, r24
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <memcpy+0xa>
    3e32:	01 90       	ld	r0, Z+
    3e34:	0d 92       	st	X+, r0
    3e36:	41 50       	subi	r20, 0x01	; 1
    3e38:	50 40       	sbci	r21, 0x00	; 0
    3e3a:	d8 f7       	brcc	.-10     	; 0x3e32 <memcpy+0x6>
    3e3c:	08 95       	ret

00003e3e <strchr>:
    3e3e:	fc 01       	movw	r30, r24
    3e40:	81 91       	ld	r24, Z+
    3e42:	86 17       	cp	r24, r22
    3e44:	21 f0       	breq	.+8      	; 0x3e4e <strchr+0x10>
    3e46:	88 23       	and	r24, r24
    3e48:	d9 f7       	brne	.-10     	; 0x3e40 <strchr+0x2>
    3e4a:	99 27       	eor	r25, r25
    3e4c:	08 95       	ret
    3e4e:	31 97       	sbiw	r30, 0x01	; 1
    3e50:	cf 01       	movw	r24, r30
    3e52:	08 95       	ret

00003e54 <strcpy>:
    3e54:	fb 01       	movw	r30, r22
    3e56:	dc 01       	movw	r26, r24
    3e58:	01 90       	ld	r0, Z+
    3e5a:	0d 92       	st	X+, r0
    3e5c:	00 20       	and	r0, r0
    3e5e:	e1 f7       	brne	.-8      	; 0x3e58 <strcpy+0x4>
    3e60:	08 95       	ret

00003e62 <__mulhi_const_10>:
    3e62:	7a e0       	ldi	r23, 0x0A	; 10
    3e64:	97 9f       	mul	r25, r23
    3e66:	90 2d       	mov	r25, r0
    3e68:	87 9f       	mul	r24, r23
    3e6a:	80 2d       	mov	r24, r0
    3e6c:	91 0d       	add	r25, r1
    3e6e:	11 24       	eor	r1, r1
    3e70:	08 95       	ret

00003e72 <__prologue_saves__>:
    3e72:	2f 92       	push	r2
    3e74:	3f 92       	push	r3
    3e76:	4f 92       	push	r4
    3e78:	5f 92       	push	r5
    3e7a:	6f 92       	push	r6
    3e7c:	7f 92       	push	r7
    3e7e:	8f 92       	push	r8
    3e80:	9f 92       	push	r9
    3e82:	af 92       	push	r10
    3e84:	bf 92       	push	r11
    3e86:	cf 92       	push	r12
    3e88:	df 92       	push	r13
    3e8a:	ef 92       	push	r14
    3e8c:	ff 92       	push	r15
    3e8e:	0f 93       	push	r16
    3e90:	1f 93       	push	r17
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	ca 1b       	sub	r28, r26
    3e9c:	db 0b       	sbc	r29, r27
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	09 94       	ijmp

00003eaa <__epilogue_restores__>:
    3eaa:	2a 88       	ldd	r2, Y+18	; 0x12
    3eac:	39 88       	ldd	r3, Y+17	; 0x11
    3eae:	48 88       	ldd	r4, Y+16	; 0x10
    3eb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eba:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ebc:	b9 84       	ldd	r11, Y+9	; 0x09
    3ebe:	c8 84       	ldd	r12, Y+8	; 0x08
    3ec0:	df 80       	ldd	r13, Y+7	; 0x07
    3ec2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ec4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ec6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ec8:	1b 81       	ldd	r17, Y+3	; 0x03
    3eca:	aa 81       	ldd	r26, Y+2	; 0x02
    3ecc:	b9 81       	ldd	r27, Y+1	; 0x01
    3ece:	ce 0f       	add	r28, r30
    3ed0:	d1 1d       	adc	r29, r1
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	ed 01       	movw	r28, r26
    3ede:	08 95       	ret

00003ee0 <__do_global_dtors>:
    3ee0:	13 e0       	ldi	r17, 0x03	; 3
    3ee2:	c6 e2       	ldi	r28, 0x26	; 38
    3ee4:	d3 e0       	ldi	r29, 0x03	; 3
    3ee6:	04 c0       	rjmp	.+8      	; 0x3ef0 <__do_global_dtors+0x10>
    3ee8:	fe 01       	movw	r30, r28
    3eea:	0e 94 df 1c 	call	0x39be	; 0x39be <__tablejump2__>
    3eee:	21 96       	adiw	r28, 0x01	; 1
    3ef0:	c7 32       	cpi	r28, 0x27	; 39
    3ef2:	d1 07       	cpc	r29, r17
    3ef4:	c9 f7       	brne	.-14     	; 0x3ee8 <__do_global_dtors+0x8>
    3ef6:	f8 94       	cli

00003ef8 <__stop_program>:
    3ef8:	ff cf       	rjmp	.-2      	; 0x3ef8 <__stop_program>
