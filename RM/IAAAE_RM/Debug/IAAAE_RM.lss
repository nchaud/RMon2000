
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800100  000047da  0000486e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e1  0080028e  0080028e  000049fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000049fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c88  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002017b  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004976  00000000  00000000  0002586f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071e9  00000000  00000000  0002a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ea4  00000000  00000000  000313d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000059ef  00000000  00000000  00034274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010dc6  00000000  00000000  00039c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c88  00000000  00000000  0004aa29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__dtors_end>
       4:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
       8:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
       c:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__vector_3>
      10:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__vector_3>
      14:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__vector_3>
      18:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      1c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      20:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      24:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      28:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      2c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      30:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      34:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      38:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      3c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      40:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__vector_16>
      44:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      48:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__vector_18>
      4c:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__vector_19>
      50:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      54:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      58:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      5c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>
      60:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_24>
      64:	0c 94 45 04 	jmp	0x88a	; 0x88a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN10GsmPayload11readPayloadEPhP10SensorDataE3__c_1>:
     224:	44 61 74 61 20 41 72 72 20 53 7a 20 77 61 73 20     Data Arr Sz was 
	...

00000235 <_ZZN10GsmPayload11readPayloadEPhP10SensorDataE3__c_0>:
     235:	42 6f 6f 74 20 23 20 77 61 73 20 00                 Boot # was .

00000241 <_ZZN10GsmPayload11readPayloadEPhP10SensorDataE3__c>:
     241:	4d 6f 64 75 6c 65 20 49 44 20 77 61 73 20 00        Module ID was .

00000250 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     250:	45 72 72 6f 72 3d 00                                Error=.

00000257 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     257:	20 7c 20 00                                          | .

0000025b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     25b:	54 65 6d 70 3d 00                                   Temp=.

00000261 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     261:	20 7c 20 00                                          | .

00000265 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     265:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000026e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     26e:	20 7c 20 00                                          | .

00000272 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     272:	50 56 2d 56 3d 00                                   PV-V=.

00000278 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     278:	20 7c 20 00                                          | .

0000027c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     27c:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000284 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     284:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000291 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     291:	20 7c 20 00                                          | .

00000295 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     295:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000029e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     29e:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

000002a8 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     2a8:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     2b8:	6f 64 65 3d 00                                      ode=.

000002bd <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     2bd:	20 7c 20 00                                          | .

000002c1 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     2c1:	42 45 52 3d 00                                      BER=.

000002c6 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     2c6:	20 7c 20 00                                          | .

000002ca <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     2ca:	52 53 53 49 3d 00                                   RSSI=.

000002d0 <_ZL12b64_alphabet>:
     2d0:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     2e0:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     2f0:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     300:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000311 <_ZZ4loopE3__c>:
     311:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000031b <_ZZ8sendDatavE3__c_0>:
     31b:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     32b:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     33b:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

0000034a <_ZZ8sendDatavE3__c>:
     34a:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     35a:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

0000036b <_ZZ12takeReadingsvE3__c>:
     36b:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     37b:	2e 2e 00                                            ...

0000037e <_ZZ21ensureFonaInitialisedbE3__c_2>:
     37e:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     38e:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

00000399 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     399:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     3a9:	73 2e 2e 2e 00                                      s....

000003ae <_ZZ21ensureFonaInitialisedbE3__c_0>:
     3ae:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     3be:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000003c9 <_ZZ21ensureFonaInitialisedbE3__c>:
     3c9:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     3d9:	61 2e 2e 2e 00                                      a....

000003de <_ZZ5setupE3__c>:
     3de:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003ea <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_20>:
     3ea:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3fa:	2d 2d 2d 2d 2d 2d 2d 2d 00                          --------.

00000403 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_19>:
     403:	2a 2a 2a 20 54 45 4d 50 20 46 41 49 4c 20 2a 2a     *** TEMP FAIL **
     413:	2a 00                                               *.

00000415 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_18>:
     415:	2a 2a 2a 20 50 56 20 46 41 49 4c 20 2a 2a 2a 00     *** PV FAIL ***.

00000425 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_17>:
     425:	2a 2a 2a 20 45 52 52 20 46 41 49 4c 20 2a 2a 2a     *** ERR FAIL ***
	...

00000436 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_16>:
     436:	2a 2a 2a 20 44 54 20 46 41 49 4c 20 2a 2a 2a 00     *** DT FAIL ***.

00000446 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_15>:
     446:	2a 2a 2a 20 43 55 52 52 20 46 41 49 4c 20 2a 2a     *** CURR FAIL **
     456:	2a 00                                               *.

00000458 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_14>:
     458:	2a 2a 2a 20 42 41 54 54 20 46 41 49 4c 20 2a 2a     *** BATT FAIL **
     468:	2a 00                                               *.

0000046a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_13>:
     46a:	46 69 72 73 74 20 50 61 72 73 65 64 20 52 65 61     First Parsed Rea
     47a:	64 69 6e 67 3a 00                                   ding:.

00000480 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_12>:
     480:	2a 2a 2a 20 52 45 41 44 20 4e 55 4d 20 46 41 49     *** READ NUM FAI
     490:	4c 20 2a 2a 2a 00                                   L ***.

00000496 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_11>:
     496:	54 65 73 74 20 46 6f 72 20 50 72 69 6e 74 20 4f     Test For Print O
     4a6:	75 74 70 75 74 3a 00                                utput:.

000004ad <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_10>:
     4ad:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     4bd:	40 31 30 20 2a 2a 2a 00                             @10 ***.

000004c5 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_9>:
     4c5:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     4d5:	40 39 20 2a 2a 2a 00                                @9 ***.

000004dc <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_8>:
     4dc:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     4ec:	40 38 20 2a 2a 2a 00                                @8 ***.

000004f3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_7>:
     4f3:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     503:	40 37 20 2a 2a 2a 00                                @7 ***.

0000050a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_6>:
     50a:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     51a:	40 36 20 2a 2a 2a 00                                @6 ***.

00000521 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_5>:
     521:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     531:	40 35 20 2a 2a 2a 00                                @5 ***.

00000538 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_4>:
     538:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     548:	40 34 20 2a 2a 2a 00                                @4 ***.

0000054f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_3>:
     54f:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     55f:	40 33 20 2a 2a 2a 00                                @3 ***.

00000566 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_2>:
     566:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     576:	40 32 20 2a 2a 2a 00                                @2 ***.

0000057d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_1>:
     57d:	2a 2a 2a 20 4e 45 54 52 45 47 20 46 41 49 4c 20     *** NETREG FAIL 
     58d:	40 31 20 2a 2a 2a 00                                @1 ***.

00000594 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_0>:
     594:	43 61 73 74 20 62 61 63 6b 20 61 66 74 65 72 20     Cast back after 
     5a4:	69 6e 74 20 73 74 6f 72 61 67 65 20 76 61 6c 3a     int storage val:
	...

000005b5 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c>:
     5b5:	4e 65 74 73 74 61 74 20 35 20 2b 20 52 65 73 75     Netstat 5 + Resu
     5c5:	6c 74 43 6f 64 65 20 31 20 2b 20 45 72 72 6f 72     ltCode 1 + Error
     5d5:	20 31 3d 00                                          1=.

000005d9 <_ZZ22encodeSingleSensorTestvE3__c_8>:
     5d9:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     5e9:	4c 20 40 36 20 2a 2a 2a 00                          L @6 ***.

000005f2 <_ZZ22encodeSingleSensorTestvE3__c_7>:
     5f2:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     602:	4c 20 40 35 20 2a 2a 2a 00                          L @5 ***.

0000060b <_ZZ22encodeSingleSensorTestvE3__c_6>:
     60b:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     61b:	4c 20 40 34 20 2a 2a 2a 00                          L @4 ***.

00000624 <_ZZ22encodeSingleSensorTestvE3__c_5>:
     624:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     634:	4c 20 40 33 20 2a 2a 2a 00                          L @3 ***.

0000063d <_ZZ22encodeSingleSensorTestvE3__c_4>:
     63d:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     64d:	4c 20 40 32 20 2a 2a 2a 00                          L @2 ***.

00000656 <_ZZ22encodeSingleSensorTestvE3__c_3>:
     656:	2a 2a 2a 20 43 4d 50 20 54 45 53 54 20 46 41 49     *** CMP TEST FAI
     666:	4c 20 40 31 20 2a 2a 2a 00                          L @1 ***.

0000066f <_ZZ22encodeSingleSensorTestvE3__c_2>:
     66f:	2a 2a 2a 20 44 45 43 20 4c 45 4e 20 46 41 49 4c     *** DEC LEN FAIL
     67f:	20 40 32 20 2a 2a 2a 00                              @2 ***.

00000687 <_ZZ22encodeSingleSensorTestvE3__c_1>:
     687:	2a 2a 2a 20 44 45 43 20 4c 45 4e 20 46 41 49 4c     *** DEC LEN FAIL
     697:	20 40 31 20 2a 2a 2a 00                              @1 ***.

0000069f <_ZZ22encodeSingleSensorTestvE3__c_0>:
     69f:	2a 2a 2a 20 45 4e 43 20 4c 45 4e 20 46 41 49 4c     *** ENC LEN FAIL
     6af:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000006b7 <_ZZ22encodeSingleSensorTestvE3__c>:
     6b7:	2a 2a 2a 20 45 4e 43 20 4c 45 4e 20 46 41 49 4c     *** ENC LEN FAIL
     6c7:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000006cf <_ZZ13encodeStrTestPcS_E3__c_7>:
     6cf:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     6df:	20 40 34 20 2a 2a 2a 00                              @4 ***.

000006e7 <_ZZ13encodeStrTestPcS_E3__c_6>:
     6e7:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     6f7:	20 40 33 20 2a 2a 2a 00                              @3 ***.

000006ff <_ZZ13encodeStrTestPcS_E3__c_5>:
     6ff:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     70f:	20 40 32 20 2a 2a 2a 00                              @2 ***.

00000717 <_ZZ13encodeStrTestPcS_E3__c_4>:
     717:	2a 2a 2a 20 53 54 52 20 44 45 43 20 46 41 49 4c     *** STR DEC FAIL
     727:	20 40 31 20 2a 2a 2a 00                              @1 ***.

0000072f <_ZZ13encodeStrTestPcS_E3__c_3>:
     72f:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     73f:	20 40 35 20 2a 2a 2a 00                              @5 ***.

00000747 <_ZZ13encodeStrTestPcS_E3__c_2>:
     747:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     757:	20 40 34 20 2a 2a 2a 00                              @4 ***.

0000075f <_ZZ13encodeStrTestPcS_E3__c_1>:
     75f:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     76f:	20 40 33 20 2a 2a 2a 00                              @3 ***.

00000777 <_ZZ13encodeStrTestPcS_E3__c_0>:
     777:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     787:	20 40 32 20 2a 2a 2a 00                              @2 ***.

0000078f <_ZZ13encodeStrTestPcS_E3__c>:
     78f:	2a 2a 2a 20 53 54 52 20 45 4e 43 20 46 41 49 4c     *** STR ENC FAIL
     79f:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000007a7 <_ZZ13encodeIntTesthE3__c_0>:
     7a7:	2a 2a 2a 20 49 4e 54 20 45 4e 43 20 46 41 49 4c     *** INT ENC FAIL
     7b7:	20 40 32 20 2a 2a 2a 00                              @2 ***.

000007bf <_ZZ13encodeIntTesthE3__c>:
     7bf:	2a 2a 2a 20 49 4e 54 20 45 4e 43 20 46 41 49 4c     *** INT ENC FAIL
     7cf:	20 40 31 20 2a 2a 2a 00                              @1 ***.

000007d7 <digital_pin_to_timer_PGM>:
     7d7:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     7e7:	00 00 00 00                                         ....

000007eb <digital_pin_to_bit_mask_PGM>:
     7eb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     7fb:	04 08 10 20                                         ... 

000007ff <digital_pin_to_port_PGM>:
     7ff:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     80f:	03 03 03 03                                         ....

00000813 <port_to_input_PGM>:
     813:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000081d <port_to_output_PGM>:
     81d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000827 <port_to_mode_PGM>:
     827:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000832 <__ctors_start>:
     832:	c4 0e       	add	r12, r20
     834:	52 13       	cpse	r21, r18
     836:	2a 1a       	sub	r2, r26

00000838 <__ctors_end>:
     838:	d4 0e       	add	r13, r20

0000083a <__dtors_end>:
     83a:	11 24       	eor	r1, r1
     83c:	1f be       	out	0x3f, r1	; 63
     83e:	cf ef       	ldi	r28, 0xFF	; 255
     840:	d8 e0       	ldi	r29, 0x08	; 8
     842:	de bf       	out	0x3e, r29	; 62
     844:	cd bf       	out	0x3d, r28	; 61

00000846 <__do_copy_data>:
     846:	12 e0       	ldi	r17, 0x02	; 2
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b1 e0       	ldi	r27, 0x01	; 1
     84c:	ea ed       	ldi	r30, 0xDA	; 218
     84e:	f7 e4       	ldi	r31, 0x47	; 71
     850:	02 c0       	rjmp	.+4      	; 0x856 <__do_copy_data+0x10>
     852:	05 90       	lpm	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	ae 38       	cpi	r26, 0x8E	; 142
     858:	b1 07       	cpc	r27, r17
     85a:	d9 f7       	brne	.-10     	; 0x852 <__do_copy_data+0xc>

0000085c <__do_clear_bss>:
     85c:	25 e0       	ldi	r18, 0x05	; 5
     85e:	ae e8       	ldi	r26, 0x8E	; 142
     860:	b2 e0       	ldi	r27, 0x02	; 2
     862:	01 c0       	rjmp	.+2      	; 0x866 <.do_clear_bss_start>

00000864 <.do_clear_bss_loop>:
     864:	1d 92       	st	X+, r1

00000866 <.do_clear_bss_start>:
     866:	af 36       	cpi	r26, 0x6F	; 111
     868:	b2 07       	cpc	r27, r18
     86a:	e1 f7       	brne	.-8      	; 0x864 <.do_clear_bss_loop>

0000086c <__do_global_ctors>:
     86c:	14 e0       	ldi	r17, 0x04	; 4
     86e:	cc e1       	ldi	r28, 0x1C	; 28
     870:	d4 e0       	ldi	r29, 0x04	; 4
     872:	04 c0       	rjmp	.+8      	; 0x87c <__do_global_ctors+0x10>
     874:	21 97       	sbiw	r28, 0x01	; 1
     876:	fe 01       	movw	r30, r28
     878:	0e 94 4f 21 	call	0x429e	; 0x429e <__tablejump2__>
     87c:	c9 31       	cpi	r28, 0x19	; 25
     87e:	d1 07       	cpc	r29, r17
     880:	c9 f7       	brne	.-14     	; 0x874 <__do_global_ctors+0x8>
     882:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <main>
     886:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <__do_global_dtors>

0000088a <__bad_interrupt>:
     88a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000088e <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     88e:	83 5e       	subi	r24, 0xE3	; 227
     890:	9e 4f       	sbci	r25, 0xFE	; 254
     892:	dc 01       	movw	r26, r24
     894:	8d 91       	ld	r24, X+
     896:	9c 91       	ld	r25, X
     898:	dc 01       	movw	r26, r24
     89a:	ed 91       	ld	r30, X+
     89c:	fc 91       	ld	r31, X
     89e:	04 80       	ldd	r0, Z+4	; 0x04
     8a0:	f5 81       	ldd	r31, Z+5	; 0x05
     8a2:	e0 2d       	mov	r30, r0
     8a4:	09 94       	ijmp

000008a6 <_ZN13Adafruit_FONA5writeEh>:
     8a6:	83 5e       	subi	r24, 0xE3	; 227
     8a8:	9e 4f       	sbci	r25, 0xFE	; 254
     8aa:	dc 01       	movw	r26, r24
     8ac:	8d 91       	ld	r24, X+
     8ae:	9c 91       	ld	r25, X
     8b0:	dc 01       	movw	r26, r24
     8b2:	ed 91       	ld	r30, X+
     8b4:	fc 91       	ld	r31, X
     8b6:	01 90       	ld	r0, Z+
     8b8:	f0 81       	ld	r31, Z
     8ba:	e0 2d       	mov	r30, r0
     8bc:	09 94       	ijmp

000008be <_ZN13Adafruit_FONA4readEv>:
     8be:	83 5e       	subi	r24, 0xE3	; 227
     8c0:	9e 4f       	sbci	r25, 0xFE	; 254
     8c2:	dc 01       	movw	r26, r24
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	dc 01       	movw	r26, r24
     8ca:	ed 91       	ld	r30, X+
     8cc:	fc 91       	ld	r31, X
     8ce:	06 80       	ldd	r0, Z+6	; 0x06
     8d0:	f7 81       	ldd	r31, Z+7	; 0x07
     8d2:	e0 2d       	mov	r30, r0
     8d4:	09 94       	ijmp

000008d6 <_ZN13Adafruit_FONA4peekEv>:
     8d6:	83 5e       	subi	r24, 0xE3	; 227
     8d8:	9e 4f       	sbci	r25, 0xFE	; 254
     8da:	dc 01       	movw	r26, r24
     8dc:	8d 91       	ld	r24, X+
     8de:	9c 91       	ld	r25, X
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	00 84       	ldd	r0, Z+8	; 0x08
     8e8:	f1 85       	ldd	r31, Z+9	; 0x09
     8ea:	e0 2d       	mov	r30, r0
     8ec:	09 94       	ijmp

000008ee <_ZN13Adafruit_FONA5flushEv>:
     8ee:	83 5e       	subi	r24, 0xE3	; 227
     8f0:	9e 4f       	sbci	r25, 0xFE	; 254
     8f2:	dc 01       	movw	r26, r24
     8f4:	8d 91       	ld	r24, X+
     8f6:	9c 91       	ld	r25, X
     8f8:	dc 01       	movw	r26, r24
     8fa:	ed 91       	ld	r30, X+
     8fc:	fc 91       	ld	r31, X
     8fe:	02 84       	ldd	r0, Z+10	; 0x0a
     900:	f3 85       	ldd	r31, Z+11	; 0x0b
     902:	e0 2d       	mov	r30, r0
     904:	09 94       	ijmp

00000906 <_ZN13Adafruit_FONAC1Eab>:
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	00 d0       	rcall	.+0      	; 0x918 <_ZN13Adafruit_FONAC1Eab+0x12>
     918:	00 d0       	rcall	.+0      	; 0x91a <_ZN13Adafruit_FONAC1Eab+0x14>
     91a:	00 d0       	rcall	.+0      	; 0x91c <_ZN13Adafruit_FONAC1Eab+0x16>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	8c 01       	movw	r16, r24
     922:	c6 2e       	mov	r12, r22
     924:	d4 2e       	mov	r13, r20
     926:	fc 01       	movw	r30, r24
     928:	13 82       	std	Z+3, r1	; 0x03
     92a:	12 82       	std	Z+2, r1	; 0x02
     92c:	88 ee       	ldi	r24, 0xE8	; 232
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	84 83       	std	Z+4, r24	; 0x04
     936:	95 83       	std	Z+5, r25	; 0x05
     938:	a6 83       	std	Z+6, r26	; 0x06
     93a:	b7 83       	std	Z+7, r27	; 0x07
     93c:	8a e3       	ldi	r24, 0x3A	; 58
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	80 83       	st	Z, r24
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	86 87       	std	Z+14, r24	; 0x0e
     948:	78 01       	movw	r14, r16
     94a:	fb ee       	ldi	r31, 0xEB	; 235
     94c:	ef 1a       	sub	r14, r31
     94e:	fe ef       	ldi	r31, 0xFE	; 254
     950:	ff 0a       	sbc	r15, r31
     952:	60 e7       	ldi	r22, 0x70	; 112
     954:	72 e0       	ldi	r23, 0x02	; 2
     956:	c7 01       	movw	r24, r14
     958:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN6StringC1EPKc>
     95c:	f8 01       	movw	r30, r16
     95e:	c4 86       	std	Z+12, r12	; 0x0c
     960:	d5 86       	std	Z+13, r13	; 0x0d
     962:	e2 5f       	subi	r30, 0xF2	; 242
     964:	fe 4f       	sbci	r31, 0xFE	; 254
     966:	8c e1       	ldi	r24, 0x1C	; 28
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	80 83       	st	Z, r24
     96e:	32 96       	adiw	r30, 0x02	; 2
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
     974:	32 96       	adiw	r30, 0x02	; 2
     976:	11 82       	std	Z+1, r1	; 0x01
     978:	10 82       	st	Z, r1
     97a:	3b 96       	adiw	r30, 0x0b	; 11
     97c:	11 82       	std	Z+1, r1	; 0x01
     97e:	10 82       	st	Z, r1
     980:	39 97       	sbiw	r30, 0x09	; 9
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
     986:	67 e0       	ldi	r22, 0x07	; 7
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	ce 01       	movw	r24, r28
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN6StringC1EPKc>
     992:	be 01       	movw	r22, r28
     994:	6f 5f       	subi	r22, 0xFF	; 255
     996:	7f 4f       	sbci	r23, 0xFF	; 255
     998:	c7 01       	movw	r24, r14
     99a:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN6StringaSEOS_>
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <_ZN6StringD1Ev>
     9a6:	f8 01       	movw	r30, r16
     9a8:	e5 5e       	subi	r30, 0xE5	; 229
     9aa:	fe 4f       	sbci	r31, 0xFE	; 254
     9ac:	89 e1       	ldi	r24, 0x19	; 25
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
     9b4:	26 96       	adiw	r28, 0x06	; 6
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	08 95       	ret

000009d2 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     9d2:	8b 5e       	subi	r24, 0xEB	; 235
     9d4:	9e 4f       	sbci	r25, 0xFE	; 254
     9d6:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <_ZN6StringaSERKS_>

000009da <_ZN13Adafruit_FONA10flushInputEv>:
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	8c 01       	movw	r16, r24
     9ea:	0f 5f       	subi	r16, 0xFF	; 255
     9ec:	1f 4f       	sbci	r17, 0xFF	; 255
     9ee:	88 97       	sbiw	r24, 0x28	; 40
     9f0:	d8 f4       	brcc	.+54     	; 0xa28 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     9f2:	e8 81       	ld	r30, Y
     9f4:	f9 81       	ldd	r31, Y+1	; 0x01
     9f6:	04 80       	ldd	r0, Z+4	; 0x04
     9f8:	f5 81       	ldd	r31, Z+5	; 0x05
     9fa:	e0 2d       	mov	r30, r0
     9fc:	ce 01       	movw	r24, r28
     9fe:	09 95       	icall
     a00:	89 2b       	or	r24, r25
     a02:	51 f0       	breq	.+20     	; 0xa18 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     a04:	e8 81       	ld	r30, Y
     a06:	f9 81       	ldd	r31, Y+1	; 0x01
     a08:	06 80       	ldd	r0, Z+6	; 0x06
     a0a:	f7 81       	ldd	r31, Z+7	; 0x07
     a0c:	e0 2d       	mov	r30, r0
     a0e:	ce 01       	movw	r24, r28
     a10:	09 95       	icall
     a12:	00 e0       	ldi	r16, 0x00	; 0
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	ed cf       	rjmp	.-38     	; 0x9f2 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     a24:	c8 01       	movw	r24, r16
     a26:	e0 cf       	rjmp	.-64     	; 0x9e8 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <_ZN13Adafruit_FONA8readlineEjb>:
     a32:	bf 92       	push	r11
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	7c 01       	movw	r14, r24
     a46:	b4 2e       	mov	r11, r20
     a48:	8b 01       	movw	r16, r22
     a4a:	00 0f       	add	r16, r16
     a4c:	11 1f       	adc	r17, r17
     a4e:	00 0f       	add	r16, r16
     a50:	11 1f       	adc	r17, r17
     a52:	c0 e0       	ldi	r28, 0x00	; 0
     a54:	d0 e0       	ldi	r29, 0x00	; 0
     a56:	67 01       	movw	r12, r14
     a58:	83 ee       	ldi	r24, 0xE3	; 227
     a5a:	c8 1a       	sub	r12, r24
     a5c:	8e ef       	ldi	r24, 0xFE	; 254
     a5e:	d8 0a       	sbc	r13, r24
     a60:	01 15       	cp	r16, r1
     a62:	11 05       	cpc	r17, r1
     a64:	c9 f1       	breq	.+114    	; 0xad8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a66:	ce 3f       	cpi	r28, 0xFE	; 254
     a68:	d1 05       	cpc	r29, r1
     a6a:	98 f0       	brcs	.+38     	; 0xa92 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a6c:	64 e8       	ldi	r22, 0x84	; 132
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	81 e8       	ldi	r24, 0x81	; 129
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a78:	2f c0       	rjmp	.+94     	; 0xad8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a7a:	f6 01       	movw	r30, r12
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	dc 01       	movw	r26, r24
     a82:	ed 91       	ld	r30, X+
     a84:	fc 91       	ld	r31, X
     a86:	06 80       	ldd	r0, Z+6	; 0x06
     a88:	f7 81       	ldd	r31, Z+7	; 0x07
     a8a:	e0 2d       	mov	r30, r0
     a8c:	09 95       	icall
     a8e:	8d 30       	cpi	r24, 0x0D	; 13
     a90:	69 f4       	brne	.+26     	; 0xaac <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     a92:	d6 01       	movw	r26, r12
     a94:	8d 91       	ld	r24, X+
     a96:	9c 91       	ld	r25, X
     a98:	dc 01       	movw	r26, r24
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	04 80       	ldd	r0, Z+4	; 0x04
     aa0:	f5 81       	ldd	r31, Z+5	; 0x05
     aa2:	e0 2d       	mov	r30, r0
     aa4:	09 95       	icall
     aa6:	89 2b       	or	r24, r25
     aa8:	41 f7       	brne	.-48     	; 0xa7a <_ZN13Adafruit_FONA8readlineEjb+0x48>
     aaa:	0c c0       	rjmp	.+24     	; 0xac4 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     aac:	8a 30       	cpi	r24, 0x0A	; 10
     aae:	21 f4       	brne	.+8      	; 0xab8 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     ab0:	20 97       	sbiw	r28, 0x00	; 0
     ab2:	79 f3       	breq	.-34     	; 0xa92 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     ab4:	bb 20       	and	r11, r11
     ab6:	81 f0       	breq	.+32     	; 0xad8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ab8:	f7 01       	movw	r30, r14
     aba:	ec 0f       	add	r30, r28
     abc:	fd 1f       	adc	r31, r29
     abe:	87 87       	std	Z+15, r24	; 0x0f
     ac0:	21 96       	adiw	r28, 0x01	; 1
     ac2:	e7 cf       	rjmp	.-50     	; 0xa92 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     ac4:	01 50       	subi	r16, 0x01	; 1
     ac6:	11 09       	sbc	r17, r1
     ac8:	39 f0       	breq	.+14     	; 0xad8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     ad6:	c4 cf       	rjmp	.-120    	; 0xa60 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     ad8:	f7 01       	movw	r30, r14
     ada:	ec 0f       	add	r30, r28
     adc:	fd 1f       	adc	r31, r29
     ade:	17 86       	std	Z+15, r1	; 0x0f
     ae0:	8c 2f       	mov	r24, r28
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	08 95       	ret

00000af6 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
     b00:	8b 01       	movw	r16, r22
     b02:	ba 01       	movw	r22, r20
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb>
     b0a:	6a e8       	ldi	r22, 0x8A	; 138
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	81 e8       	ldi	r24, 0x81	; 129
     b10:	94 e0       	ldi	r25, 0x04	; 4
     b12:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     b16:	2f 96       	adiw	r28, 0x0f	; 15
     b18:	be 01       	movw	r22, r28
     b1a:	81 e8       	ldi	r24, 0x81	; 129
     b1c:	94 e0       	ldi	r25, 0x04	; 4
     b1e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
     b22:	b8 01       	movw	r22, r16
     b24:	ce 01       	movw	r24, r28
     b26:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <strcmp_P>
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	89 2b       	or	r24, r25
     b2e:	09 f0       	breq	.+2      	; 0xb32 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	82 2f       	mov	r24, r18
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	08 95       	ret

00000b3e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
     b4c:	8b 01       	movw	r16, r22
     b4e:	7a 01       	movw	r14, r20
     b50:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN13Adafruit_FONA10flushInputEv>
     b54:	6d e7       	ldi	r22, 0x7D	; 125
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	81 e8       	ldi	r24, 0x81	; 129
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     b60:	b8 01       	movw	r22, r16
     b62:	81 e8       	ldi	r24, 0x81	; 129
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     b6a:	fe 01       	movw	r30, r28
     b6c:	e3 5e       	subi	r30, 0xE3	; 227
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	b8 01       	movw	r22, r16
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	b7 01       	movw	r22, r14
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb>
     b84:	18 2f       	mov	r17, r24
     b86:	66 e7       	ldi	r22, 0x76	; 118
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	81 e8       	ldi	r24, 0x81	; 129
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     b92:	be 01       	movw	r22, r28
     b94:	61 5f       	subi	r22, 0xF1	; 241
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	81 e8       	ldi	r24, 0x81	; 129
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
     ba0:	81 2f       	mov	r24, r17
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	08 95       	ret

00000bb0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	ec 01       	movw	r28, r24
     bc6:	6b 01       	movw	r12, r22
     bc8:	7a 01       	movw	r14, r20
     bca:	59 01       	movw	r10, r18
     bcc:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN13Adafruit_FONA10flushInputEv>
     bd0:	6f e6       	ldi	r22, 0x6F	; 111
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	81 e8       	ldi	r24, 0x81	; 129
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     bdc:	b6 01       	movw	r22, r12
     bde:	81 e8       	ldi	r24, 0x81	; 129
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     be6:	62 e2       	ldi	r22, 0x22	; 34
     be8:	81 e8       	ldi	r24, 0x81	; 129
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print5printEc>
     bf0:	b7 01       	movw	r22, r14
     bf2:	81 e8       	ldi	r24, 0x81	; 129
     bf4:	94 e0       	ldi	r25, 0x04	; 4
     bf6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     bfa:	62 e2       	ldi	r22, 0x22	; 34
     bfc:	81 e8       	ldi	r24, 0x81	; 129
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEc>
     c04:	8e 01       	movw	r16, r28
     c06:	03 5e       	subi	r16, 0xE3	; 227
     c08:	1e 4f       	sbci	r17, 0xFE	; 254
     c0a:	b6 01       	movw	r22, r12
     c0c:	f8 01       	movw	r30, r16
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     c16:	62 e2       	ldi	r22, 0x22	; 34
     c18:	f8 01       	movw	r30, r16
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print5printEc>
     c22:	b7 01       	movw	r22, r14
     c24:	f8 01       	movw	r30, r16
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     c2e:	62 e2       	ldi	r22, 0x22	; 34
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEc>
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	b5 01       	movw	r22, r10
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb>
     c44:	18 2f       	mov	r17, r24
     c46:	68 e6       	ldi	r22, 0x68	; 104
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	81 e8       	ldi	r24, 0x81	; 129
     c4c:	94 e0       	ldi	r25, 0x04	; 4
     c4e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     c52:	be 01       	movw	r22, r28
     c54:	61 5f       	subi	r22, 0xF1	; 241
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	81 e8       	ldi	r24, 0x81	; 129
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
     c60:	81 2f       	mov	r24, r17
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	08 95       	ret

00000c78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	8a 01       	movw	r16, r20
     c84:	a9 01       	movw	r20, r18
     c86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     c8a:	88 23       	and	r24, r24
     c8c:	41 f0       	breq	.+16     	; 0xc9e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     c8e:	b8 01       	movw	r22, r16
     c90:	ce 01       	movw	r24, r28
     c92:	0f 96       	adiw	r24, 0x0f	; 15
     c94:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <strcmp_P>
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	89 2b       	or	r24, r25
     c9c:	09 f0       	breq	.+2      	; 0xca0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	82 2f       	mov	r24, r18
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <_ZN13Adafruit_FONA5beginEhh>:
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	ec 01       	movw	r28, r24
     cbe:	f6 2e       	mov	r15, r22
     cc0:	e4 2e       	mov	r14, r20
     cc2:	8f e1       	ldi	r24, 0x1F	; 31
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_Znwj>
     cca:	8c 01       	movw	r16, r24
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	4e 2d       	mov	r20, r14
     cd0:	6f 2d       	mov	r22, r15
     cd2:	0e 94 20 20 	call	0x4040	; 0x4040 <_ZN14SoftwareSerialC1Ehhb>
     cd6:	7e 01       	movw	r14, r28
     cd8:	83 ee       	ldi	r24, 0xE3	; 227
     cda:	e8 1a       	sub	r14, r24
     cdc:	8e ef       	ldi	r24, 0xFE	; 254
     cde:	f8 0a       	sbc	r15, r24
     ce0:	d7 01       	movw	r26, r14
     ce2:	0d 93       	st	X+, r16
     ce4:	1c 93       	st	X, r17
     ce6:	40 ec       	ldi	r20, 0xC0	; 192
     ce8:	52 e1       	ldi	r21, 0x12	; 18
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	c8 01       	movw	r24, r16
     cf0:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN14SoftwareSerial5beginEl>
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf8:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <pinMode>
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     d00:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
     d04:	6a e0       	ldi	r22, 0x0A	; 10
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	8c 85       	ldd	r24, Y+12	; 0x0c
     d14:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
     d18:	64 e6       	ldi	r22, 0x64	; 100
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	8c 85       	ldd	r24, Y+12	; 0x0c
     d28:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
     d2c:	68 ef       	ldi	r22, 0xF8	; 248
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	81 e8       	ldi	r24, 0x81	; 129
     d32:	94 e0       	ldi	r25, 0x04	; 4
     d34:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d38:	8e e0       	ldi	r24, 0x0E	; 14
     d3a:	c8 2e       	mov	r12, r24
     d3c:	d1 2c       	mov	r13, r1
     d3e:	8e 01       	movw	r16, r28
     d40:	05 5e       	subi	r16, 0xE5	; 229
     d42:	1e 4f       	sbci	r17, 0xFE	; 254
     d44:	f7 01       	movw	r30, r14
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	dc 01       	movw	r26, r24
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	04 80       	ldd	r0, Z+4	; 0x04
     d52:	f5 81       	ldd	r31, Z+5	; 0x05
     d54:	e0 2d       	mov	r30, r0
     d56:	09 95       	icall
     d58:	89 2b       	or	r24, r25
     d5a:	59 f0       	breq	.+22     	; 0xd72 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	dc 01       	movw	r26, r24
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	06 80       	ldd	r0, Z+6	; 0x06
     d6a:	f7 81       	ldd	r31, Z+7	; 0x07
     d6c:	e0 2d       	mov	r30, r0
     d6e:	09 95       	icall
     d70:	e9 cf       	rjmp	.-46     	; 0xd44 <_ZN13Adafruit_FONA5beginEhh+0x98>
     d72:	f8 01       	movw	r30, r16
     d74:	40 81       	ld	r20, Z
     d76:	51 81       	ldd	r21, Z+1	; 0x01
     d78:	24 ef       	ldi	r18, 0xF4	; 244
     d7a:	31 e0       	ldi	r19, 0x01	; 1
     d7c:	65 ef       	ldi	r22, 0xF5	; 245
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d86:	81 11       	cpse	r24, r1
     d88:	34 c0       	rjmp	.+104    	; 0xdf2 <_ZN13Adafruit_FONA5beginEhh+0x146>
     d8a:	d7 01       	movw	r26, r14
     d8c:	8d 91       	ld	r24, X+
     d8e:	9c 91       	ld	r25, X
     d90:	dc 01       	movw	r26, r24
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	04 80       	ldd	r0, Z+4	; 0x04
     d98:	f5 81       	ldd	r31, Z+5	; 0x05
     d9a:	e0 2d       	mov	r30, r0
     d9c:	09 95       	icall
     d9e:	89 2b       	or	r24, r25
     da0:	59 f0       	breq	.+22     	; 0xdb8 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     da2:	f7 01       	movw	r30, r14
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	dc 01       	movw	r26, r24
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	06 80       	ldd	r0, Z+6	; 0x06
     db0:	f7 81       	ldd	r31, Z+7	; 0x07
     db2:	e0 2d       	mov	r30, r0
     db4:	09 95       	icall
     db6:	e9 cf       	rjmp	.-46     	; 0xd8a <_ZN13Adafruit_FONA5beginEhh+0xde>
     db8:	24 ef       	ldi	r18, 0xF4	; 244
     dba:	31 e0       	ldi	r19, 0x01	; 1
     dbc:	42 ef       	ldi	r20, 0xF2	; 242
     dbe:	51 e0       	ldi	r21, 0x01	; 1
     dc0:	6f ee       	ldi	r22, 0xEF	; 239
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dca:	81 11       	cpse	r24, r1
     dcc:	12 c0       	rjmp	.+36     	; 0xdf2 <_ZN13Adafruit_FONA5beginEhh+0x146>
     dce:	64 ef       	ldi	r22, 0xF4	; 244
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     dda:	b1 e0       	ldi	r27, 0x01	; 1
     ddc:	cb 1a       	sub	r12, r27
     dde:	d1 08       	sbc	r13, r1
     de0:	09 f0       	breq	.+2      	; 0xde4 <_ZN13Adafruit_FONA5beginEhh+0x138>
     de2:	b0 cf       	rjmp	.-160    	; 0xd44 <_ZN13Adafruit_FONA5beginEhh+0x98>
     de4:	5e c0       	rjmp	.+188    	; 0xea2 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     de6:	64 e6       	ldi	r22, 0x64	; 100
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     df2:	f8 01       	movw	r30, r16
     df4:	40 81       	ld	r20, Z
     df6:	51 81       	ldd	r21, Z+1	; 0x01
     df8:	24 ef       	ldi	r18, 0xF4	; 244
     dfa:	31 e0       	ldi	r19, 0x01	; 1
     dfc:	62 ec       	ldi	r22, 0xC2	; 194
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	ce 01       	movw	r24, r28
     e02:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e06:	64 e6       	ldi	r22, 0x64	; 100
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     e12:	d8 01       	movw	r26, r16
     e14:	4d 91       	ld	r20, X+
     e16:	5c 91       	ld	r21, X
     e18:	24 ef       	ldi	r18, 0xF4	; 244
     e1a:	31 e0       	ldi	r19, 0x01	; 1
     e1c:	6d eb       	ldi	r22, 0xBD	; 189
     e1e:	71 e0       	ldi	r23, 0x01	; 1
     e20:	ce 01       	movw	r24, r28
     e22:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e26:	81 11       	cpse	r24, r1
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <_ZN13Adafruit_FONA5beginEhh+0x182>
     e2a:	12 e0       	ldi	r17, 0x02	; 2
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <_ZN13Adafruit_FONA5beginEhh+0x184>
     e2e:	11 e0       	ldi	r17, 0x01	; 1
     e30:	64 e6       	ldi	r22, 0x64	; 100
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     e3c:	ce 01       	movw	r24, r28
     e3e:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN13Adafruit_FONA10flushInputEv>
     e42:	66 eb       	ldi	r22, 0xB6	; 182
     e44:	71 e0       	ldi	r23, 0x01	; 1
     e46:	81 e8       	ldi	r24, 0x81	; 129
     e48:	94 e0       	ldi	r25, 0x04	; 4
     e4a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     e4e:	66 e1       	ldi	r22, 0x16	; 22
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	81 e8       	ldi	r24, 0x81	; 129
     e54:	94 e0       	ldi	r25, 0x04	; 4
     e56:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
     e5a:	66 e1       	ldi	r22, 0x16	; 22
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	f7 01       	movw	r30, r14
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	64 ef       	ldi	r22, 0xF4	; 244
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb>
     e74:	6f ea       	ldi	r22, 0xAF	; 175
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	81 e8       	ldi	r24, 0x81	; 129
     e7a:	94 e0       	ldi	r25, 0x04	; 4
     e7c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
     e80:	2f 96       	adiw	r28, 0x0f	; 15
     e82:	be 01       	movw	r22, r28
     e84:	81 e8       	ldi	r24, 0x81	; 129
     e86:	94 e0       	ldi	r25, 0x04	; 4
     e88:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
     e8c:	64 ea       	ldi	r22, 0xA4	; 164
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	ce 01       	movw	r24, r28
     e92:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <strstr_P>
     e96:	89 2b       	or	r24, r25
     e98:	11 f0       	breq	.+4      	; 0xe9e <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     e9a:	81 2f       	mov	r24, r17
     e9c:	35 c0       	rjmp	.+106    	; 0xf08 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	33 c0       	rjmp	.+102    	; 0xf08 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     ea2:	d8 01       	movw	r26, r16
     ea4:	4d 91       	ld	r20, X+
     ea6:	5c 91       	ld	r21, X
     ea8:	24 ef       	ldi	r18, 0xF4	; 244
     eaa:	31 e0       	ldi	r19, 0x01	; 1
     eac:	6c ee       	ldi	r22, 0xEC	; 236
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	ce 01       	movw	r24, r28
     eb2:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     eb6:	64 e6       	ldi	r22, 0x64	; 100
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     ec2:	f8 01       	movw	r30, r16
     ec4:	40 81       	ld	r20, Z
     ec6:	51 81       	ldd	r21, Z+1	; 0x01
     ec8:	24 ef       	ldi	r18, 0xF4	; 244
     eca:	31 e0       	ldi	r19, 0x01	; 1
     ecc:	69 ee       	ldi	r22, 0xE9	; 233
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	ce 01       	movw	r24, r28
     ed2:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ed6:	64 e6       	ldi	r22, 0x64	; 100
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
     ee2:	d8 01       	movw	r26, r16
     ee4:	4d 91       	ld	r20, X+
     ee6:	5c 91       	ld	r21, X
     ee8:	24 ef       	ldi	r18, 0xF4	; 244
     eea:	31 e0       	ldi	r19, 0x01	; 1
     eec:	66 ee       	ldi	r22, 0xE6	; 230
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	ce 01       	movw	r24, r28
     ef2:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ef6:	81 11       	cpse	r24, r1
     ef8:	76 cf       	rjmp	.-276    	; 0xde6 <_ZN13Adafruit_FONA5beginEhh+0x13a>
     efa:	67 ec       	ldi	r22, 0xC7	; 199
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	81 e8       	ldi	r24, 0x81	; 129
     f00:	94 e0       	ldi	r25, 0x04	; 4
     f02:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	08 95       	ret

00000f1a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	ec 01       	movw	r28, r24
     f28:	79 01       	movw	r14, r18
     f2a:	98 01       	movw	r18, r16
     f2c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     f30:	b7 01       	movw	r22, r14
     f32:	ce 01       	movw	r24, r28
     f34:	0f 96       	adiw	r24, 0x0f	; 15
     f36:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <strcmp_P>
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	89 2b       	or	r24, r25
     f3e:	09 f0       	breq	.+2      	; 0xf42 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	82 2f       	mov	r24, r18
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	08 95       	ret

00000f52 <_ZN13Adafruit_FONA10enableGPRSEb>:
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
     f6e:	28 ee       	ldi	r18, 0xE8	; 232
     f70:	3d ef       	ldi	r19, 0xFD	; 253
     f72:	66 23       	and	r22, r22
     f74:	09 f4       	brne	.+2      	; 0xf78 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     f76:	1f c1       	rjmp	.+574    	; 0x11b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     f78:	4e e5       	ldi	r20, 0x5E	; 94
     f7a:	51 e0       	ldi	r21, 0x01	; 1
     f7c:	63 e5       	ldi	r22, 0x53	; 83
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f84:	81 11       	cpse	r24, r1
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	78 2e       	mov	r7, r24
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     f8e:	77 24       	eor	r7, r7
     f90:	73 94       	inc	r7
     f92:	7e 01       	movw	r14, r28
     f94:	85 ee       	ldi	r24, 0xE5	; 229
     f96:	e8 1a       	sub	r14, r24
     f98:	8e ef       	ldi	r24, 0xFE	; 254
     f9a:	f8 0a       	sbc	r15, r24
     f9c:	f7 01       	movw	r30, r14
     f9e:	40 81       	ld	r20, Z
     fa0:	51 81       	ldd	r21, Z+1	; 0x01
     fa2:	20 e1       	ldi	r18, 0x10	; 16
     fa4:	37 e2       	ldi	r19, 0x27	; 39
     fa6:	68 e4       	ldi	r22, 0x48	; 72
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     fb4:	25 c1       	rjmp	.+586    	; 0x1200 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     fb6:	f7 01       	movw	r30, r14
     fb8:	40 81       	ld	r20, Z
     fba:	51 81       	ldd	r21, Z+1	; 0x01
     fbc:	20 e1       	ldi	r18, 0x10	; 16
     fbe:	37 e2       	ldi	r19, 0x27	; 39
     fc0:	6a e2       	ldi	r22, 0x2A	; 42
     fc2:	71 e0       	ldi	r23, 0x01	; 1
     fc4:	ce 01       	movw	r24, r28
     fc6:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fca:	88 23       	and	r24, r24
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     fce:	1a c1       	rjmp	.+564    	; 0x1204 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     fd0:	4e 01       	movw	r8, r28
     fd2:	f2 ef       	ldi	r31, 0xF2	; 242
     fd4:	8f 1a       	sub	r8, r31
     fd6:	fe ef       	ldi	r31, 0xFE	; 254
     fd8:	9f 0a       	sbc	r9, r31
     fda:	f4 01       	movw	r30, r8
     fdc:	40 81       	ld	r20, Z
     fde:	51 81       	ldd	r21, Z+1	; 0x01
     fe0:	41 15       	cp	r20, r1
     fe2:	51 05       	cpc	r21, r1
     fe4:	71 f4       	brne	.+28     	; 0x1002 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     fe6:	f7 01       	movw	r30, r14
     fe8:	40 81       	ld	r20, Z
     fea:	51 81       	ldd	r21, Z+1	; 0x01
     fec:	2f ef       	ldi	r18, 0xFF	; 255
     fee:	3f ef       	ldi	r19, 0xFF	; 255
     ff0:	65 ec       	ldi	r22, 0xC5	; 197
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	ce 01       	movw	r24, r28
     ff6:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ffa:	81 11       	cpse	r24, r1
     ffc:	ce c0       	rjmp	.+412    	; 0x119a <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     ffe:	89 e0       	ldi	r24, 0x09	; 9
    1000:	0e c1       	rjmp	.+540    	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1002:	f7 01       	movw	r30, r14
    1004:	20 81       	ld	r18, Z
    1006:	31 81       	ldd	r19, Z+1	; 0x01
    1008:	00 e1       	ldi	r16, 0x10	; 16
    100a:	17 e2       	ldi	r17, 0x27	; 39
    100c:	66 e1       	ldi	r22, 0x16	; 22
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	ce 01       	movw	r24, r28
    1012:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1016:	88 23       	and	r24, r24
    1018:	09 f4       	brne	.+2      	; 0x101c <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    101a:	f6 c0       	rjmp	.+492    	; 0x1208 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    101c:	ce 01       	movw	r24, r28
    101e:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN13Adafruit_FONA10flushInputEv>
    1022:	8e 01       	movw	r16, r28
    1024:	03 5e       	subi	r16, 0xE3	; 227
    1026:	1e 4f       	sbci	r17, 0xFE	; 254
    1028:	6c e0       	ldi	r22, 0x0C	; 12
    102a:	71 e0       	ldi	r23, 0x01	; 1
    102c:	f8 01       	movw	r30, r16
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1036:	f4 01       	movw	r30, r8
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	f8 01       	movw	r30, r16
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1046:	5e 01       	movw	r10, r28
    1048:	f0 ef       	ldi	r31, 0xF0	; 240
    104a:	af 1a       	sub	r10, r31
    104c:	fe ef       	ldi	r31, 0xFE	; 254
    104e:	bf 0a       	sbc	r11, r31
    1050:	f5 01       	movw	r30, r10
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	89 2b       	or	r24, r25
    1058:	79 f0       	breq	.+30     	; 0x1078 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    105a:	62 e3       	ldi	r22, 0x32	; 50
    105c:	71 e0       	ldi	r23, 0x01	; 1
    105e:	f8 01       	movw	r30, r16
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    1068:	f5 01       	movw	r30, r10
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	f8 01       	movw	r30, r16
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1078:	6e 01       	movw	r12, r28
    107a:	fe ee       	ldi	r31, 0xEE	; 238
    107c:	cf 1a       	sub	r12, r31
    107e:	fe ef       	ldi	r31, 0xFE	; 254
    1080:	df 0a       	sbc	r13, r31
    1082:	f6 01       	movw	r30, r12
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	89 2b       	or	r24, r25
    108a:	79 f0       	breq	.+30     	; 0x10aa <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    108c:	62 e3       	ldi	r22, 0x32	; 50
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	f8 01       	movw	r30, r16
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    109a:	f6 01       	movw	r30, r12
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	f8 01       	movw	r30, r16
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    10aa:	64 e3       	ldi	r22, 0x34	; 52
    10ac:	71 e0       	ldi	r23, 0x01	; 1
    10ae:	f8 01       	movw	r30, r16
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
    10b8:	65 e0       	ldi	r22, 0x05	; 5
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	81 e8       	ldi	r24, 0x81	; 129
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    10c4:	6b ef       	ldi	r22, 0xFB	; 251
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	81 e8       	ldi	r24, 0x81	; 129
    10ca:	94 e0       	ldi	r25, 0x04	; 4
    10cc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    10d0:	f4 01       	movw	r30, r8
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	81 e8       	ldi	r24, 0x81	; 129
    10d8:	94 e0       	ldi	r25, 0x04	; 4
    10da:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    10de:	f5 01       	movw	r30, r10
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	89 2b       	or	r24, r25
    10e6:	69 f0       	breq	.+26     	; 0x1102 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    10e8:	62 e3       	ldi	r22, 0x32	; 50
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	81 e8       	ldi	r24, 0x81	; 129
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    10f4:	f5 01       	movw	r30, r10
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	81 e8       	ldi	r24, 0x81	; 129
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1102:	f6 01       	movw	r30, r12
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	89 2b       	or	r24, r25
    110a:	69 f0       	breq	.+26     	; 0x1126 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    110c:	62 e3       	ldi	r22, 0x32	; 50
    110e:	71 e0       	ldi	r23, 0x01	; 1
    1110:	81 e8       	ldi	r24, 0x81	; 129
    1112:	94 e0       	ldi	r25, 0x04	; 4
    1114:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    1118:	f6 01       	movw	r30, r12
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	81 e8       	ldi	r24, 0x81	; 129
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1126:	64 e3       	ldi	r22, 0x34	; 52
    1128:	71 e0       	ldi	r23, 0x01	; 1
    112a:	81 e8       	ldi	r24, 0x81	; 129
    112c:	94 e0       	ldi	r25, 0x04	; 4
    112e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
    1132:	f7 01       	movw	r30, r14
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	40 e1       	ldi	r20, 0x10	; 16
    113a:	57 e2       	ldi	r21, 0x27	; 39
    113c:	ce 01       	movw	r24, r28
    113e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    1146:	62 c0       	rjmp	.+196    	; 0x120c <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    1148:	f5 01       	movw	r30, r10
    114a:	40 81       	ld	r20, Z
    114c:	51 81       	ldd	r21, Z+1	; 0x01
    114e:	41 15       	cp	r20, r1
    1150:	51 05       	cpc	r21, r1
    1152:	39 f4       	brne	.+14     	; 0x1162 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    1154:	f6 01       	movw	r30, r12
    1156:	40 81       	ld	r20, Z
    1158:	51 81       	ldd	r21, Z+1	; 0x01
    115a:	41 15       	cp	r20, r1
    115c:	51 05       	cpc	r21, r1
    115e:	79 f4       	brne	.+30     	; 0x117e <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    1160:	42 cf       	rjmp	.-380    	; 0xfe6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1162:	f7 01       	movw	r30, r14
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	00 e1       	ldi	r16, 0x10	; 16
    116a:	17 e2       	ldi	r17, 0x27	; 39
    116c:	66 ee       	ldi	r22, 0xE6	; 230
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1176:	81 11       	cpse	r24, r1
    1178:	ed cf       	rjmp	.-38     	; 0x1154 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    117a:	87 e0       	ldi	r24, 0x07	; 7
    117c:	50 c0       	rjmp	.+160    	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    117e:	f7 01       	movw	r30, r14
    1180:	20 81       	ld	r18, Z
    1182:	31 81       	ldd	r19, Z+1	; 0x01
    1184:	00 e1       	ldi	r16, 0x10	; 16
    1186:	17 e2       	ldi	r17, 0x27	; 39
    1188:	62 ed       	ldi	r22, 0xD2	; 210
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	ce 01       	movw	r24, r28
    118e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1192:	81 11       	cpse	r24, r1
    1194:	28 cf       	rjmp	.-432    	; 0xfe6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1196:	88 e0       	ldi	r24, 0x08	; 8
    1198:	42 c0       	rjmp	.+132    	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    119a:	f7 01       	movw	r30, r14
    119c:	40 81       	ld	r20, Z
    119e:	51 81       	ldd	r21, Z+1	; 0x01
    11a0:	2f ef       	ldi	r18, 0xFF	; 255
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	6c eb       	ldi	r22, 0xBC	; 188
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	ce 01       	movw	r24, r28
    11aa:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11ae:	88 23       	and	r24, r24
    11b0:	79 f1       	breq	.+94     	; 0x1210 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    11b2:	87 2d       	mov	r24, r7
    11b4:	34 c0       	rjmp	.+104    	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    11b6:	44 eb       	ldi	r20, 0xB4	; 180
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	69 ea       	ldi	r22, 0xA9	; 169
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11c2:	88 23       	and	r24, r24
    11c4:	39 f1       	breq	.+78     	; 0x1214 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    11c6:	8e 01       	movw	r16, r28
    11c8:	05 5e       	subi	r16, 0xE5	; 229
    11ca:	1e 4f       	sbci	r17, 0xFE	; 254
    11cc:	f8 01       	movw	r30, r16
    11ce:	40 81       	ld	r20, Z
    11d0:	51 81       	ldd	r21, Z+1	; 0x01
    11d2:	20 e1       	ldi	r18, 0x10	; 16
    11d4:	37 e2       	ldi	r19, 0x27	; 39
    11d6:	6c e9       	ldi	r22, 0x9C	; 156
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11e0:	88 23       	and	r24, r24
    11e2:	d1 f0       	breq	.+52     	; 0x1218 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    11e4:	f8 01       	movw	r30, r16
    11e6:	40 81       	ld	r20, Z
    11e8:	51 81       	ldd	r21, Z+1	; 0x01
    11ea:	20 e1       	ldi	r18, 0x10	; 16
    11ec:	37 e2       	ldi	r19, 0x27	; 39
    11ee:	61 e9       	ldi	r22, 0x91	; 145
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    11f8:	88 23       	and	r24, r24
    11fa:	81 f0       	breq	.+32     	; 0x121c <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	0d c0       	rjmp	.+26     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	0b c0       	rjmp	.+22     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	09 c0       	rjmp	.+18     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    120c:	86 e0       	ldi	r24, 0x06	; 6
    120e:	07 c0       	rjmp	.+14     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1210:	8a e0       	ldi	r24, 0x0A	; 10
    1212:	05 c0       	rjmp	.+10     	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1214:	8b e0       	ldi	r24, 0x0B	; 11
    1216:	03 c0       	rjmp	.+6      	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1218:	8c e0       	ldi	r24, 0x0C	; 12
    121a:	01 c0       	rjmp	.+2      	; 0x121e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    121c:	8d e0       	ldi	r24, 0x0D	; 13
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	8f 90       	pop	r8
    1236:	7f 90       	pop	r7
    1238:	08 95       	ret

0000123a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	5b 01       	movw	r10, r22
    124e:	6a 01       	movw	r12, r20
    1250:	e2 2e       	mov	r14, r18
    1252:	0f 96       	adiw	r24, 0x0f	; 15
    1254:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <strstr_P>
    1258:	ec 01       	movw	r28, r24
    125a:	89 2b       	or	r24, r25
    125c:	c1 f0       	breq	.+48     	; 0x128e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    125e:	c5 01       	movw	r24, r10
    1260:	0e 94 63 23 	call	0x46c6	; 0x46c6 <__strlen_P>
    1264:	8c 0f       	add	r24, r28
    1266:	9d 1f       	adc	r25, r29
    1268:	c0 e0       	ldi	r28, 0x00	; 0
    126a:	f1 2c       	mov	r15, r1
    126c:	c0 17       	cp	r28, r16
    126e:	41 f0       	breq	.+16     	; 0x1280 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1270:	b7 01       	movw	r22, r14
    1272:	0e 94 8f 23 	call	0x471e	; 0x471e <strchr>
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	51 f0       	breq	.+20     	; 0x128e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	cf 5f       	subi	r28, 0xFF	; 255
    127e:	f6 cf       	rjmp	.-20     	; 0x126c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1280:	0e 94 3c 23 	call	0x4678	; 0x4678 <atoi>
    1284:	f6 01       	movw	r30, r12
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	08 95       	ret

000012a4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
    12b8:	6a 01       	movw	r12, r20
    12ba:	59 01       	movw	r10, r18
    12bc:	10 2f       	mov	r17, r16
    12be:	0e 2d       	mov	r16, r14
    12c0:	44 ef       	ldi	r20, 0xF4	; 244
    12c2:	51 e0       	ldi	r21, 0x01	; 1
    12c4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    12c8:	21 2f       	mov	r18, r17
    12ca:	a5 01       	movw	r20, r10
    12cc:	b6 01       	movw	r22, r12
    12ce:	ce 01       	movw	r24, r28
    12d0:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    12d4:	18 2f       	mov	r17, r24
    12d6:	88 23       	and	r24, r24
    12d8:	31 f0       	breq	.+12     	; 0x12e6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	64 ef       	ldi	r22, 0xF4	; 244
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	ce 01       	movw	r24, r28
    12e2:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN13Adafruit_FONA8readlineEjb>
    12e6:	81 2f       	mov	r24, r17
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	08 95       	ret

000012fc <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	28 97       	sbiw	r28, 0x08	; 8
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    131e:	18 86       	std	Y+8, r1	; 0x08
    1320:	1f 82       	std	Y+7, r1	; 0x07
    1322:	1e 82       	std	Y+6, r1	; 0x06
    1324:	1d 82       	std	Y+5, r1	; 0x05
    1326:	1c 82       	std	Y+4, r1	; 0x04
    1328:	1b 82       	std	Y+3, r1	; 0x03
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    132e:	e1 2c       	mov	r14, r1
    1330:	0c e2       	ldi	r16, 0x2C	; 44
    1332:	9e 01       	movw	r18, r28
    1334:	29 5f       	subi	r18, 0xF9	; 249
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	4d e9       	ldi	r20, 0x9D	; 157
    133a:	51 e0       	ldi	r21, 0x01	; 1
    133c:	66 e9       	ldi	r22, 0x96	; 150
    133e:	71 e0       	ldi	r23, 0x01	; 1
    1340:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1344:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1346:	ee 24       	eor	r14, r14
    1348:	e3 94       	inc	r14
    134a:	9e 01       	movw	r18, r28
    134c:	2b 5f       	subi	r18, 0xFB	; 251
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	4f e8       	ldi	r20, 0x8F	; 143
    1352:	51 e0       	ldi	r21, 0x01	; 1
    1354:	68 e8       	ldi	r22, 0x88	; 136
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	c6 01       	movw	r24, r12
    135a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    135e:	88 23       	and	r24, r24
    1360:	19 f0       	breq	.+6      	; 0x1368 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	f8 26       	eor	r15, r24
    1366:	02 c0       	rjmp	.+4      	; 0x136c <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1368:	ff 24       	eor	r15, r15
    136a:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    136c:	e1 2c       	mov	r14, r1
    136e:	0c e2       	ldi	r16, 0x2C	; 44
    1370:	9e 01       	movw	r18, r28
    1372:	2d 5f       	subi	r18, 0xFD	; 253
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	51 e0       	ldi	r21, 0x01	; 1
    137a:	67 e7       	ldi	r22, 0x77	; 119
    137c:	71 e0       	ldi	r23, 0x01	; 1
    137e:	c6 01       	movw	r24, r12
    1380:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1384:	88 23       	and	r24, r24
    1386:	11 f0       	breq	.+4      	; 0x138c <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1388:	1b 81       	ldd	r17, Y+3	; 0x03
    138a:	01 c0       	rjmp	.+2      	; 0x138e <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    138c:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    138e:	ee 24       	eor	r14, r14
    1390:	e3 94       	inc	r14
    1392:	0c e2       	ldi	r16, 0x2C	; 44
    1394:	9e 01       	movw	r18, r28
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	4f e6       	ldi	r20, 0x6F	; 111
    139c:	51 e0       	ldi	r21, 0x01	; 1
    139e:	66 e6       	ldi	r22, 0x66	; 102
    13a0:	71 e0       	ldi	r23, 0x01	; 1
    13a2:	c6 01       	movw	r24, r12
    13a4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    13a8:	81 11       	cpse	r24, r1
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    13ac:	91 2f       	mov	r25, r17
    13ae:	90 62       	ori	r25, 0x20	; 32
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    13b2:	99 81       	ldd	r25, Y+1	; 0x01
    13b4:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    13b6:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    13b8:	6f 81       	ldd	r22, Y+7	; 0x07
}
    13ba:	8f 2d       	mov	r24, r15
    13bc:	28 96       	adiw	r28, 0x08	; 8
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	08 95       	ret

000013da <_ZN10GsmPayloadC1Ev>:
//Internal format that gets encoded/decoded:
// TODO: Create special char at end if this was truncated and keep a track of truncation
//		 Try keep data[100] then charEncoding[100] on stack vs new data() then data->delete() then...
void GsmPayload::createEncodedPayload(char* output, uint16_t maxLength){
	
	createPayload((uint8_t*)output, maxLength);
    13da:	fc 01       	movw	r30, r24
    13dc:	10 82       	st	Z, r1
    13de:	12 82       	std	Z+2, r1	; 0x02
    13e0:	11 82       	std	Z+1, r1	; 0x01
    13e2:	13 82       	std	Z+3, r1	; 0x03
    13e4:	14 82       	std	Z+4, r1	; 0x04
    13e6:	15 82       	std	Z+5, r1	; 0x05
    13e8:	17 82       	std	Z+7, r1	; 0x07
    13ea:	11 86       	std	Z+9, r1	; 0x09
    13ec:	10 86       	std	Z+8, r1	; 0x08
    13ee:	13 86       	std	Z+11, r1	; 0x0b
    13f0:	12 86       	std	Z+10, r1	; 0x0a
    13f2:	14 86       	std	Z+12, r1	; 0x0c
    13f4:	08 95       	ret

000013f6 <_ZN10GsmPayload13createPayloadEPhj>:
    13f6:	fc 01       	movw	r30, r24
    13f8:	db 01       	movw	r26, r22
    13fa:	80 81       	ld	r24, Z
    13fc:	8c 93       	st	X, r24
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	92 81       	ldd	r25, Z+2	; 0x02
    1402:	12 96       	adiw	r26, 0x02	; 2
    1404:	9c 93       	st	X, r25
    1406:	8e 93       	st	-X, r24
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	84 85       	ldd	r24, Z+12	; 0x0c
    140c:	13 96       	adiw	r26, 0x03	; 3
    140e:	8c 93       	st	X, r24
    1410:	13 97       	sbiw	r26, 0x03	; 3
    1412:	44 85       	ldd	r20, Z+12	; 0x0c
    1414:	8a e0       	ldi	r24, 0x0A	; 10
    1416:	48 9f       	mul	r20, r24
    1418:	a0 01       	movw	r20, r0
    141a:	11 24       	eor	r1, r1
    141c:	62 85       	ldd	r22, Z+10	; 0x0a
    141e:	73 85       	ldd	r23, Z+11	; 0x0b
    1420:	cd 01       	movw	r24, r26
    1422:	04 96       	adiw	r24, 0x04	; 4
    1424:	0c 94 86 23 	jmp	0x470c	; 0x470c <memcpy>

00001428 <_ZN10GsmPayload23readNumOfSensorReadingsEPc>:
		sizeof(moduleId) + 
		sizeof(thisBootNumber);
		
	uint8_t numReadings = *arrSzPos;
	return numReadings;
}
    1428:	fc 01       	movw	r30, r24
    142a:	83 81       	ldd	r24, Z+3	; 0x03
    142c:	08 95       	ret

0000142e <_ZN10GsmPayload11readPayloadEPhP10SensorData>:

void GsmPayload::readPayload(uint8_t* input, SensorData* inputArr){
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
    143c:	8b 01       	movw	r16, r22
    143e:	7a 01       	movw	r14, r20
	
	memcpy(&moduleId, input, sizeof(moduleId));
    1440:	fb 01       	movw	r30, r22
    1442:	80 81       	ld	r24, Z
    1444:	88 83       	st	Y, r24
	input += sizeof(moduleId);
	RM_LOG2(F("Module ID was "), moduleId);
    1446:	61 e4       	ldi	r22, 0x41	; 65
    1448:	72 e0       	ldi	r23, 0x02	; 2
    144a:	81 e8       	ldi	r24, 0x81	; 129
    144c:	94 e0       	ldi	r25, 0x04	; 4
    144e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1452:	66 e4       	ldi	r22, 0x46	; 70
    1454:	71 e0       	ldi	r23, 0x01	; 1
    1456:	81 e8       	ldi	r24, 0x81	; 129
    1458:	94 e0       	ldi	r25, 0x04	; 4
    145a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    145e:	4a e0       	ldi	r20, 0x0A	; 10
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	68 81       	ld	r22, Y
    1464:	81 e8       	ldi	r24, 0x81	; 129
    1466:	94 e0       	ldi	r25, 0x04	; 4
    1468:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
	
	memcpy(&thisBootNumber, input, sizeof(thisBootNumber));
    146c:	f8 01       	movw	r30, r16
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	92 81       	ldd	r25, Z+2	; 0x02
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
	input += sizeof(thisBootNumber);
	RM_LOG2(F("Boot # was "), thisBootNumber);
    1476:	65 e3       	ldi	r22, 0x35	; 53
    1478:	72 e0       	ldi	r23, 0x02	; 2
    147a:	81 e8       	ldi	r24, 0x81	; 129
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1482:	66 e4       	ldi	r22, 0x46	; 70
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	81 e8       	ldi	r24, 0x81	; 129
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    148e:	69 81       	ldd	r22, Y+1	; 0x01
    1490:	7a 81       	ldd	r23, Y+2	; 0x02
    1492:	4a e0       	ldi	r20, 0x0A	; 10
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	81 e8       	ldi	r24, 0x81	; 129
    1498:	94 e0       	ldi	r25, 0x04	; 4
    149a:	0e 94 84 1b 	call	0x3708	; 0x3708 <_ZN5Print7printlnEji>
	
	memcpy(&_dataArrSz, input, sizeof(_dataArrSz));
    149e:	f8 01       	movw	r30, r16
    14a0:	83 81       	ldd	r24, Z+3	; 0x03
    14a2:	8c 87       	std	Y+12, r24	; 0x0c
	input += sizeof(_dataArrSz);
	RM_LOG2(F("Data Arr Sz was "), _dataArrSz);
    14a4:	64 e2       	ldi	r22, 0x24	; 36
    14a6:	72 e0       	ldi	r23, 0x02	; 2
    14a8:	81 e8       	ldi	r24, 0x81	; 129
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    14b0:	66 e4       	ldi	r22, 0x46	; 70
    14b2:	71 e0       	ldi	r23, 0x01	; 1
    14b4:	81 e8       	ldi	r24, 0x81	; 129
    14b6:	94 e0       	ldi	r25, 0x04	; 4
    14b8:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    14bc:	4a e0       	ldi	r20, 0x0A	; 10
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    14c2:	81 e8       	ldi	r24, 0x81	; 129
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
	
	//SensorData tmp[_dataArrSz];
	_dataArr = inputArr;
    14ca:	fb 86       	std	Y+11, r15	; 0x0b
    14cc:	ea 86       	std	Y+10, r14	; 0x0a
	memcpy(_dataArr, input, _dataArrSz * sizeof(SensorData));
    14ce:	4c 85       	ldd	r20, Y+12	; 0x0c
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	4f 9f       	mul	r20, r31
    14d4:	a0 01       	movw	r20, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	b8 01       	movw	r22, r16
    14da:	6c 5f       	subi	r22, 0xFC	; 252
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	c7 01       	movw	r24, r14
	input += sizeof(_dataArrSz * sizeof(SensorData));
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
	input += sizeof(_dataArrSz);
	RM_LOG2(F("Data Arr Sz was "), _dataArrSz);
	
	//SensorData tmp[_dataArrSz];
	_dataArr = inputArr;
	memcpy(_dataArr, input, _dataArrSz * sizeof(SensorData));
    14ec:	0c 94 86 23 	jmp	0x470c	; 0x470c <memcpy>

000014f0 <_ZN10GsmPayload13addSensorDataEP10SensorDatah>:
	
}

void GsmPayload::addSensorData(SensorData* dataArr, uint8_t arraySz){

	_dataArr = dataArr;
    14f0:	fc 01       	movw	r30, r24
    14f2:	73 87       	std	Z+11, r23	; 0x0b
    14f4:	62 87       	std	Z+10, r22	; 0x0a
	_dataArrSz = arraySz;	
    14f6:	44 87       	std	Z+12, r20	; 0x0c
    14f8:	08 95       	ret

000014fa <_ZN10GsmPayload13getSensorDataEv>:
}

SensorData* GsmPayload::getSensorData() {
	
	return _dataArr;
}
    14fa:	fc 01       	movw	r30, r24
    14fc:	82 85       	ldd	r24, Z+10	; 0x0a
    14fe:	93 85       	ldd	r25, Z+11	; 0x0b
    1500:	08 95       	ret

00001502 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
			RM_LOG(*(sd+t));
		
		RM_LOG(" ");
	}
	
	RM_LOGLN(" ");
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	ec 01       	movw	r28, r24
    1508:	6a ec       	ldi	r22, 0xCA	; 202
    150a:	72 e0       	ldi	r23, 0x02	; 2
    150c:	81 e8       	ldi	r24, 0x81	; 129
    150e:	94 e0       	ldi	r25, 0x04	; 4
    1510:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1514:	4a e0       	ldi	r20, 0x0A	; 10
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	68 81       	ld	r22, Y
    151a:	81 e8       	ldi	r24, 0x81	; 129
    151c:	94 e0       	ldi	r25, 0x04	; 4
    151e:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN5Print5printEhi>
    1522:	66 ec       	ldi	r22, 0xC6	; 198
    1524:	72 e0       	ldi	r23, 0x02	; 2
    1526:	81 e8       	ldi	r24, 0x81	; 129
    1528:	94 e0       	ldi	r25, 0x04	; 4
    152a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    152e:	61 ec       	ldi	r22, 0xC1	; 193
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	81 e8       	ldi	r24, 0x81	; 129
    1534:	94 e0       	ldi	r25, 0x04	; 4
    1536:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    153a:	4a e0       	ldi	r20, 0x0A	; 10
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	69 81       	ldd	r22, Y+1	; 0x01
    1540:	81 e8       	ldi	r24, 0x81	; 129
    1542:	94 e0       	ldi	r25, 0x04	; 4
    1544:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN5Print5printEhi>
    1548:	6d eb       	ldi	r22, 0xBD	; 189
    154a:	72 e0       	ldi	r23, 0x02	; 2
    154c:	81 e8       	ldi	r24, 0x81	; 129
    154e:	94 e0       	ldi	r25, 0x04	; 4
    1550:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1554:	68 ea       	ldi	r22, 0xA8	; 168
    1556:	72 e0       	ldi	r23, 0x02	; 2
    1558:	81 e8       	ldi	r24, 0x81	; 129
    155a:	94 e0       	ldi	r25, 0x04	; 4
    155c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1560:	6b 81       	ldd	r22, Y+3	; 0x03
    1562:	63 70       	andi	r22, 0x03	; 3
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	4a e0       	ldi	r20, 0x0A	; 10
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	81 e8       	ldi	r24, 0x81	; 129
    156c:	94 e0       	ldi	r25, 0x04	; 4
    156e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN5Print5printEii>
    1572:	6e e9       	ldi	r22, 0x9E	; 158
    1574:	72 e0       	ldi	r23, 0x02	; 2
    1576:	81 e8       	ldi	r24, 0x81	; 129
    1578:	94 e0       	ldi	r25, 0x04	; 4
    157a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    157e:	6b 81       	ldd	r22, Y+3	; 0x03
    1580:	6c 71       	andi	r22, 0x1C	; 28
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	75 95       	asr	r23
    1586:	67 95       	ror	r22
    1588:	75 95       	asr	r23
    158a:	67 95       	ror	r22
    158c:	4a e0       	ldi	r20, 0x0A	; 10
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	81 e8       	ldi	r24, 0x81	; 129
    1592:	94 e0       	ldi	r25, 0x04	; 4
    1594:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN5Print5printEii>
    1598:	65 e9       	ldi	r22, 0x95	; 149
    159a:	72 e0       	ldi	r23, 0x02	; 2
    159c:	81 e8       	ldi	r24, 0x81	; 129
    159e:	94 e0       	ldi	r25, 0x04	; 4
    15a0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    15a4:	6b 81       	ldd	r22, Y+3	; 0x03
    15a6:	65 fb       	bst	r22, 5
    15a8:	66 27       	eor	r22, r22
    15aa:	60 f9       	bld	r22, 0
    15ac:	4a e0       	ldi	r20, 0x0A	; 10
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	81 e8       	ldi	r24, 0x81	; 129
    15b4:	94 e0       	ldi	r25, 0x04	; 4
    15b6:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN5Print5printEii>
    15ba:	61 e9       	ldi	r22, 0x91	; 145
    15bc:	72 e0       	ldi	r23, 0x02	; 2
    15be:	81 e8       	ldi	r24, 0x81	; 129
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    15c6:	64 e8       	ldi	r22, 0x84	; 132
    15c8:	72 e0       	ldi	r23, 0x02	; 2
    15ca:	81 e8       	ldi	r24, 0x81	; 129
    15cc:	94 e0       	ldi	r25, 0x04	; 4
    15ce:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    15d2:	4a e0       	ldi	r20, 0x0A	; 10
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	6a 81       	ldd	r22, Y+2	; 0x02
    15d8:	81 e8       	ldi	r24, 0x81	; 129
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>

000015e4 <_ZN7Helpers15printSensorDataEP10SensorData>:
}

void Helpers::printSensorData(SensorData* sd) {
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
    15ea:	6c e7       	ldi	r22, 0x7C	; 124
    15ec:	72 e0       	ldi	r23, 0x02	; 2
    15ee:	81 e8       	ldi	r24, 0x81	; 129
    15f0:	94 e0       	ldi	r25, 0x04	; 4
    15f2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
    15f6:	69 81       	ldd	r22, Y+1	; 0x01
    15f8:	7a 81       	ldd	r23, Y+2	; 0x02
    15fa:	4a e0       	ldi	r20, 0x0A	; 10
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	81 e8       	ldi	r24, 0x81	; 129
    1600:	94 e0       	ldi	r25, 0x04	; 4
    1602:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1606:	68 e7       	ldi	r22, 0x78	; 120
    1608:	72 e0       	ldi	r23, 0x02	; 2
    160a:	81 e8       	ldi	r24, 0x81	; 129
    160c:	94 e0       	ldi	r25, 0x04	; 4
    160e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
    1612:	62 e7       	ldi	r22, 0x72	; 114
    1614:	72 e0       	ldi	r23, 0x02	; 2
    1616:	81 e8       	ldi	r24, 0x81	; 129
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
    161e:	6d 81       	ldd	r22, Y+5	; 0x05
    1620:	7e 81       	ldd	r23, Y+6	; 0x06
    1622:	4a e0       	ldi	r20, 0x0A	; 10
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	81 e8       	ldi	r24, 0x81	; 129
    1628:	94 e0       	ldi	r25, 0x04	; 4
    162a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    162e:	6e e6       	ldi	r22, 0x6E	; 110
    1630:	72 e0       	ldi	r23, 0x02	; 2
    1632:	81 e8       	ldi	r24, 0x81	; 129
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    163a:	65 e6       	ldi	r22, 0x65	; 101
    163c:	72 e0       	ldi	r23, 0x02	; 2
    163e:	81 e8       	ldi	r24, 0x81	; 129
    1640:	94 e0       	ldi	r25, 0x04	; 4
    1642:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    1646:	6b 81       	ldd	r22, Y+3	; 0x03
    1648:	7c 81       	ldd	r23, Y+4	; 0x04
    164a:	4a e0       	ldi	r20, 0x0A	; 10
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	81 e8       	ldi	r24, 0x81	; 129
    1650:	94 e0       	ldi	r25, 0x04	; 4
    1652:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1656:	61 e6       	ldi	r22, 0x61	; 97
    1658:	72 e0       	ldi	r23, 0x02	; 2
    165a:	81 e8       	ldi	r24, 0x81	; 129
    165c:	94 e0       	ldi	r25, 0x04	; 4
    165e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    1662:	6b e5       	ldi	r22, 0x5B	; 91
    1664:	72 e0       	ldi	r23, 0x02	; 2
    1666:	81 e8       	ldi	r24, 0x81	; 129
    1668:	94 e0       	ldi	r25, 0x04	; 4
    166a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->temperature);
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	4a e0       	ldi	r20, 0x0A	; 10
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	81 e8       	ldi	r24, 0x81	; 129
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    167e:	67 e5       	ldi	r22, 0x57	; 87
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	81 e8       	ldi	r24, 0x81	; 129
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Error="));
    168a:	60 e5       	ldi	r22, 0x50	; 80
    168c:	72 e0       	ldi	r23, 0x02	; 2
    168e:	81 e8       	ldi	r24, 0x81	; 129
    1690:	94 e0       	ldi	r25, 0x04	; 4
    1692:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->errorChar);
    1696:	4a e0       	ldi	r20, 0x0A	; 10
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	69 85       	ldd	r22, Y+9	; 0x09
    169c:	81 e8       	ldi	r24, 0x81	; 129
    169e:	94 e0       	ldi	r25, 0x04	; 4
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
	RM_LOG(F("Temp="));
	RM_LOG(sd->temperature);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Error="));
	RM_LOGLN(sd->errorChar);
    16a4:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>

000016a8 <_ZN7Helpers9fillArrayEPhjh>:
}

void Helpers::fillArray(uint8_t* ptr, uint16_t sz, uint8_t val){
    16a8:	68 0f       	add	r22, r24
    16aa:	79 1f       	adc	r23, r25
	
	for(uint16_t i=0; i<sz; i++){
    16ac:	86 17       	cp	r24, r22
    16ae:	97 07       	cpc	r25, r23
    16b0:	21 f0       	breq	.+8      	; 0x16ba <_ZN7Helpers9fillArrayEPhjh+0x12>
		*(ptr+i) = val;
    16b2:	fc 01       	movw	r30, r24
    16b4:	41 93       	st	Z+, r20
    16b6:	cf 01       	movw	r24, r30
	RM_LOGLN(sd->errorChar);
}

void Helpers::fillArray(uint8_t* ptr, uint16_t sz, uint8_t val){
	
	for(uint16_t i=0; i<sz; i++){
    16b8:	f9 cf       	rjmp	.-14     	; 0x16ac <_ZN7Helpers9fillArrayEPhjh+0x4>
    16ba:	08 95       	ret

000016bc <_ZN7Helpers14base64_enc_lenEi>:
/* Return length DOES include trailing \0 */
int16_t Helpers::base64_enc_len(int16_t plainLen) {
	
	int16_t n = plainLen;
	
	return (n + 2 - ((n + 2) % 3)) / 3 * 4 + 1;
    16bc:	9c 01       	movw	r18, r24
    16be:	2e 5f       	subi	r18, 0xFE	; 254
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	e3 e0       	ldi	r30, 0x03	; 3
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	c9 01       	movw	r24, r18
    16c8:	bf 01       	movw	r22, r30
    16ca:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <__divmodhi4>
    16ce:	a9 01       	movw	r20, r18
    16d0:	48 1b       	sub	r20, r24
    16d2:	59 0b       	sbc	r21, r25
    16d4:	ca 01       	movw	r24, r20
    16d6:	bf 01       	movw	r22, r30
    16d8:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <__divmodhi4>
    16dc:	cb 01       	movw	r24, r22
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
}
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	08 95       	ret

000016ea <_ZN7Helpers14base64_dec_lenEPci>:
int16_t Helpers::base64_dec_len(char* input, int16_t inputLen) {
	
	int16_t i = 0;
	int16_t numEq = 0;
	
	inputLen -=1; //Remove terminating char
    16ea:	61 50       	subi	r22, 0x01	; 1
    16ec:	71 09       	sbc	r23, r1
    16ee:	fc 01       	movw	r30, r24
    16f0:	e6 0f       	add	r30, r22
    16f2:	f7 1f       	adc	r31, r23

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_dec_len(char* input, int16_t inputLen) {
	
	int16_t i = 0;
	int16_t numEq = 0;
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
	
	inputLen -=1; //Remove terminating char
	
	for(i = inputLen - 1; input[i] == '='; i--) {
    16f8:	82 91       	ld	r24, -Z
    16fa:	8d 33       	cpi	r24, 0x3D	; 61
    16fc:	19 f4       	brne	.+6      	; 0x1704 <_ZN7Helpers14base64_dec_lenEPci+0x1a>
		numEq++;
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t i = 0;
	int16_t numEq = 0;
	
	inputLen -=1; //Remove terminating char
	
	for(i = inputLen - 1; input[i] == '='; i--) {
    1702:	fa cf       	rjmp	.-12     	; 0x16f8 <_ZN7Helpers14base64_dec_lenEPci+0xe>
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
    1704:	46 e0       	ldi	r20, 0x06	; 6
    1706:	46 9f       	mul	r20, r22
    1708:	c0 01       	movw	r24, r0
    170a:	47 9f       	mul	r20, r23
    170c:	90 0d       	add	r25, r0
    170e:	11 24       	eor	r1, r1
    1710:	97 fd       	sbrc	r25, 7
    1712:	07 96       	adiw	r24, 0x07	; 7
    1714:	43 e0       	ldi	r20, 0x03	; 3
    1716:	95 95       	asr	r25
    1718:	87 95       	ror	r24
    171a:	4a 95       	dec	r20
    171c:	e1 f7       	brne	.-8      	; 0x1716 <_ZN7Helpers14base64_dec_lenEPci+0x2c>
}
    171e:	82 1b       	sub	r24, r18
    1720:	93 0b       	sbc	r25, r19
    1722:	08 95       	ret

00001724 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1724:	dc 01       	movw	r26, r24
    1726:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1728:	80 81       	ld	r24, Z
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1730:	80 81       	ld	r24, Z
    1732:	83 70       	andi	r24, 0x03	; 3
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	92 95       	swap	r25
    1738:	9f 70       	andi	r25, 0x0F	; 15
    173a:	20 e1       	ldi	r18, 0x10	; 16
    173c:	82 9f       	mul	r24, r18
    173e:	90 0d       	add	r25, r0
    1740:	11 24       	eor	r1, r1
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	9c 93       	st	X, r25
    1746:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	9f 70       	andi	r25, 0x0F	; 15
    174c:	99 0f       	add	r25, r25
    174e:	99 0f       	add	r25, r25
    1750:	22 81       	ldd	r18, Z+2	; 0x02
    1752:	22 95       	swap	r18
    1754:	26 95       	lsr	r18
    1756:	26 95       	lsr	r18
    1758:	23 70       	andi	r18, 0x03	; 3
    175a:	92 0f       	add	r25, r18
    175c:	12 96       	adiw	r26, 0x02	; 2
    175e:	9c 93       	st	X, r25
    1760:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	8f 73       	andi	r24, 0x3F	; 63
    1766:	13 96       	adiw	r26, 0x03	; 3
    1768:	8c 93       	st	X, r24
    176a:	08 95       	ret

0000176c <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    176c:	6f 92       	push	r6
    176e:	7f 92       	push	r7
    1770:	8f 92       	push	r8
    1772:	9f 92       	push	r9
    1774:	af 92       	push	r10
    1776:	bf 92       	push	r11
    1778:	cf 92       	push	r12
    177a:	df 92       	push	r13
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	27 97       	sbiw	r28, 0x07	; 7
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	6c 01       	movw	r12, r24
    179a:	5b 01       	movw	r10, r22
    179c:	3b 01       	movw	r6, r22
    179e:	64 0e       	add	r6, r20
    17a0:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    17a2:	e1 2c       	mov	r14, r1
    17a4:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    17aa:	4e 01       	movw	r8, r28
    17ac:	85 e0       	ldi	r24, 0x05	; 5
    17ae:	88 0e       	add	r8, r24
    17b0:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    17b2:	6a 14       	cp	r6, r10
    17b4:	7b 04       	cpc	r7, r11
    17b6:	49 f1       	breq	.+82     	; 0x180a <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    17b8:	c8 01       	movw	r24, r16
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	f5 01       	movw	r30, r10
    17be:	21 91       	ld	r18, Z+
    17c0:	5f 01       	movw	r10, r30
    17c2:	f4 01       	movw	r30, r8
    17c4:	e0 0f       	add	r30, r16
    17c6:	f1 1f       	adc	r31, r17
    17c8:	20 83       	st	Z, r18
		if(i == 3) {
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	91 05       	cpc	r25, r1
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    17d0:	8c 01       	movw	r16, r24
    17d2:	ef cf       	rjmp	.-34     	; 0x17b2 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    17d4:	b4 01       	movw	r22, r8
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 92 0b 	call	0x1724	; 0x1724 <_Z8a3_to_a4PhS_>
    17de:	de 01       	movw	r26, r28
    17e0:	11 96       	adiw	r26, 0x01	; 1
    17e2:	c6 01       	movw	r24, r12
    17e4:	8e 0d       	add	r24, r14
    17e6:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    17e8:	ed 91       	ld	r30, X+
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	e0 53       	subi	r30, 0x30	; 48
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	24 91       	lpm	r18, Z
    17f2:	fc 01       	movw	r30, r24
    17f4:	21 93       	st	Z+, r18
    17f6:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    17f8:	a8 15       	cp	r26, r8
    17fa:	b9 05       	cpc	r27, r9
    17fc:	a9 f7       	brne	.-22     	; 0x17e8 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    17fe:	f4 e0       	ldi	r31, 0x04	; 4
    1800:	ef 0e       	add	r14, r31
    1802:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	e3 cf       	rjmp	.-58     	; 0x17d0 <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    180a:	01 15       	cp	r16, r1
    180c:	11 05       	cpc	r17, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1810:	3c c0       	rjmp	.+120    	; 0x188a <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1812:	be 01       	movw	r22, r28
    1814:	6b 5f       	subi	r22, 0xFB	; 251
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	fb 01       	movw	r30, r22
    181a:	e0 0f       	add	r30, r16
    181c:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    181e:	cf 01       	movw	r24, r30
    1820:	86 1b       	sub	r24, r22
    1822:	97 0b       	sbc	r25, r23
    1824:	03 97       	sbiw	r24, 0x03	; 3
    1826:	14 f4       	brge	.+4      	; 0x182c <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1828:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    182a:	f9 cf       	rjmp	.-14     	; 0x181e <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    182c:	ce 01       	movw	r24, r28
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	5c 01       	movw	r10, r24
    1832:	0e 94 92 0b 	call	0x1724	; 0x1724 <_Z8a3_to_a4PhS_>
    1836:	c6 01       	movw	r24, r12
    1838:	8e 0d       	add	r24, r14
    183a:	9f 1d       	adc	r25, r15
    183c:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    183e:	ed 91       	ld	r30, X+
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	e0 53       	subi	r30, 0x30	; 48
    1844:	fd 4f       	sbci	r31, 0xFD	; 253
    1846:	24 91       	lpm	r18, Z
    1848:	fc 01       	movw	r30, r24
    184a:	21 93       	st	Z+, r18
    184c:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    184e:	9d 01       	movw	r18, r26
    1850:	2a 19       	sub	r18, r10
    1852:	3b 09       	sbc	r19, r11
    1854:	02 17       	cp	r16, r18
    1856:	13 07       	cpc	r17, r19
    1858:	94 f7       	brge	.-28     	; 0x183e <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    185a:	ff ef       	ldi	r31, 0xFF	; 255
    185c:	ef 1a       	sub	r14, r31
    185e:	ff 0a       	sbc	r15, r31
    1860:	e0 0e       	add	r14, r16
    1862:	f1 1e       	adc	r15, r17
    1864:	f6 01       	movw	r30, r12
    1866:	ee 0d       	add	r30, r14
    1868:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    186a:	0c 19       	sub	r16, r12
    186c:	1d 09       	sbc	r17, r13
    186e:	0e 19       	sub	r16, r14
    1870:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1872:	8d e3       	ldi	r24, 0x3D	; 61
    1874:	7f 01       	movw	r14, r30
    1876:	ec 18       	sub	r14, r12
    1878:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    187a:	98 01       	movw	r18, r16
    187c:	2e 0f       	add	r18, r30
    187e:	3f 1f       	adc	r19, r31
    1880:	23 30       	cpi	r18, 0x03	; 3
    1882:	31 05       	cpc	r19, r1
    1884:	14 f4       	brge	.+4      	; 0x188a <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1886:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1888:	f5 cf       	rjmp	.-22     	; 0x1874 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    188a:	f6 01       	movw	r30, r12
    188c:	ee 0d       	add	r30, r14
    188e:	ff 1d       	adc	r31, r15
    1890:	10 82       	st	Z, r1
	
	return encLen;
}
    1892:	c7 01       	movw	r24, r14
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	27 96       	adiw	r28, 0x07	; 7
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	bf 90       	pop	r11
    18b4:	af 90       	pop	r10
    18b6:	9f 90       	pop	r9
    18b8:	8f 90       	pop	r8
    18ba:	7f 90       	pop	r7
    18bc:	6f 90       	pop	r6
    18be:	08 95       	ret

000018c0 <_Z8a4_to_a3PhS_>:
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(uint8_t * a3, uint8_t * a4) {
    18c0:	dc 01       	movw	r26, r24
    18c2:	fb 01       	movw	r30, r22
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	90 73       	andi	r25, 0x30	; 48
    18c8:	92 95       	swap	r25
    18ca:	9f 70       	andi	r25, 0x0F	; 15
    18cc:	20 81       	ld	r18, Z
    18ce:	22 0f       	add	r18, r18
    18d0:	22 0f       	add	r18, r18
    18d2:	92 0f       	add	r25, r18
    18d4:	9c 93       	st	X, r25
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
    18d6:	92 81       	ldd	r25, Z+2	; 0x02
    18d8:	9c 73       	andi	r25, 0x3C	; 60
    18da:	96 95       	lsr	r25
    18dc:	96 95       	lsr	r25
    18de:	81 81       	ldd	r24, Z+1	; 0x01
    18e0:	20 e1       	ldi	r18, 0x10	; 16
    18e2:	82 9f       	mul	r24, r18
    18e4:	90 0d       	add	r25, r0
    18e6:	11 24       	eor	r1, r1
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	9c 93       	st	X, r25
    18ec:	11 97       	sbiw	r26, 0x01	; 1
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
    18ee:	92 81       	ldd	r25, Z+2	; 0x02
    18f0:	83 81       	ldd	r24, Z+3	; 0x03
    18f2:	20 e4       	ldi	r18, 0x40	; 64
    18f4:	92 9f       	mul	r25, r18
    18f6:	80 0d       	add	r24, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	12 96       	adiw	r26, 0x02	; 2
    18fc:	8c 93       	st	X, r24
    18fe:	08 95       	ret

00001900 <_Z10b64_lookupc>:
}

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
    1900:	9f eb       	ldi	r25, 0xBF	; 191
    1902:	98 0f       	add	r25, r24
    1904:	9a 31       	cpi	r25, 0x1A	; 26
    1906:	90 f0       	brcs	.+36     	; 0x192c <_Z10b64_lookupc+0x2c>
	if(c >='a' && c <='z') return c - 71;
    1908:	9f e9       	ldi	r25, 0x9F	; 159
    190a:	98 0f       	add	r25, r24
    190c:	9a 31       	cpi	r25, 0x1A	; 26
    190e:	10 f4       	brcc	.+4      	; 0x1914 <_Z10b64_lookupc+0x14>
    1910:	87 54       	subi	r24, 0x47	; 71
    1912:	08 95       	ret
	if(c >='0' && c <='9') return c + 4;
    1914:	90 ed       	ldi	r25, 0xD0	; 208
    1916:	98 0f       	add	r25, r24
    1918:	9a 30       	cpi	r25, 0x0A	; 10
    191a:	10 f4       	brcc	.+4      	; 0x1920 <_Z10b64_lookupc+0x20>
    191c:	8c 5f       	subi	r24, 0xFC	; 252
    191e:	08 95       	ret
	if(c == '+') return 62;
    1920:	8b 32       	cpi	r24, 0x2B	; 43
    1922:	31 f0       	breq	.+12     	; 0x1930 <_Z10b64_lookupc+0x30>
	if(c == '/') return 63;
    1924:	8f 32       	cpi	r24, 0x2F	; 47
    1926:	31 f0       	breq	.+12     	; 0x1934 <_Z10b64_lookupc+0x34>
	return -1;
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	08 95       	ret
    192c:	89 2f       	mov	r24, r25
    192e:	08 95       	ret

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
    1930:	8e e3       	ldi	r24, 0x3E	; 62
    1932:	08 95       	ret
	if(c == '/') return 63;
    1934:	8f e3       	ldi	r24, 0x3F	; 63
	return -1;
}
    1936:	08 95       	ret

00001938 <_ZN7Helpers13base64_decodeEPhPci>:
	
	return encLen;
}

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_decode(uint8_t * output, char* input, int16_t inputLen) {
    1938:	4f 92       	push	r4
    193a:	5f 92       	push	r5
    193c:	6f 92       	push	r6
    193e:	7f 92       	push	r7
    1940:	8f 92       	push	r8
    1942:	9f 92       	push	r9
    1944:	af 92       	push	r10
    1946:	bf 92       	push	r11
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	27 97       	sbiw	r28, 0x07	; 7
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	3c 01       	movw	r6, r24
    196a:	7b 01       	movw	r14, r22
    196c:	2b 01       	movw	r4, r22
    196e:	44 0e       	add	r4, r20
    1970:	55 1e       	adc	r5, r21
	
	int16_t i = 0, j = 0;
	int16_t decLen = 0;
    1972:	c1 2c       	mov	r12, r1
    1974:	d1 2c       	mov	r13, r1
}

/* Assumes input ends with a \0 and inputLen includes this terminating character*/
int16_t Helpers::base64_decode(uint8_t * output, char* input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1976:	00 e0       	ldi	r16, 0x00	; 0
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	5e 01       	movw	r10, r28
    197c:	85 e0       	ldi	r24, 0x05	; 5
    197e:	a8 0e       	add	r10, r24
    1980:	b1 1c       	adc	r11, r1
    1982:	4e 01       	movw	r8, r28
    1984:	98 e0       	ldi	r25, 0x08	; 8
    1986:	89 0e       	add	r8, r25
    1988:	91 1c       	adc	r9, r1
	int16_t decLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];


	while (inputLen--) {
    198a:	e4 14       	cp	r14, r4
    198c:	f5 04       	cpc	r15, r5
    198e:	a9 f1       	breq	.+106    	; 0x19fa <_ZN7Helpers13base64_decodeEPhPci+0xc2>
		if(*input == '=') {
    1990:	f7 01       	movw	r30, r14
    1992:	21 91       	ld	r18, Z+
    1994:	7f 01       	movw	r14, r30
    1996:	2d 33       	cpi	r18, 0x3D	; 61
    1998:	81 f1       	breq	.+96     	; 0x19fa <_ZN7Helpers13base64_decodeEPhPci+0xc2>
			break;
		}

		a4[i++] = *(input++);
    199a:	c8 01       	movw	r24, r16
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	e1 e0       	ldi	r30, 0x01	; 1
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	ec 0f       	add	r30, r28
    19a4:	fd 1f       	adc	r31, r29
    19a6:	e0 0f       	add	r30, r16
    19a8:	f1 1f       	adc	r31, r17
    19aa:	20 83       	st	Z, r18
		if (i == 4) {
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	91 05       	cpc	r25, r1
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <_ZN7Helpers13base64_decodeEPhPci+0x7e>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
    19b2:	8c 01       	movw	r16, r24
    19b4:	ea cf       	rjmp	.-44     	; 0x198a <_ZN7Helpers13base64_decodeEPhPci+0x52>
    19b6:	8e 01       	movw	r16, r28
    19b8:	0f 5f       	subi	r16, 0xFF	; 255
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
    19bc:	f8 01       	movw	r30, r16
    19be:	80 81       	ld	r24, Z
    19c0:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z10b64_lookupc>
    19c4:	f8 01       	movw	r30, r16
    19c6:	81 93       	st	Z+, r24
    19c8:	8f 01       	movw	r16, r30
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
    19ca:	ea 15       	cp	r30, r10
    19cc:	fb 05       	cpc	r31, r11
    19ce:	b1 f7       	brne	.-20     	; 0x19bc <_ZN7Helpers13base64_decodeEPhPci+0x84>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
    19d0:	be 01       	movw	r22, r28
    19d2:	6f 5f       	subi	r22, 0xFF	; 255
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	c5 01       	movw	r24, r10
    19d8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_Z8a4_to_a3PhS_>
    19dc:	f5 01       	movw	r30, r10
    19de:	d3 01       	movw	r26, r6
    19e0:	ac 0d       	add	r26, r12
    19e2:	bd 1d       	adc	r27, r13

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
    19e4:	81 91       	ld	r24, Z+
    19e6:	8d 93       	st	X+, r24
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
    19e8:	e8 15       	cp	r30, r8
    19ea:	f9 05       	cpc	r31, r9
    19ec:	d9 f7       	brne	.-10     	; 0x19e4 <_ZN7Helpers13base64_decodeEPhPci+0xac>
    19ee:	f3 e0       	ldi	r31, 0x03	; 3
    19f0:	cf 0e       	add	r12, r31
    19f2:	d1 1c       	adc	r13, r1
				output[decLen++] = a3[i];
			}
			i = 0;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	dc cf       	rjmp	.-72     	; 0x19b2 <_ZN7Helpers13base64_decodeEPhPci+0x7a>
		}
	}

	if (i) {
    19fa:	01 15       	cp	r16, r1
    19fc:	11 05       	cpc	r17, r1
    19fe:	99 f1       	breq	.+102    	; 0x1a66 <_ZN7Helpers13base64_decodeEPhPci+0x12e>
    1a00:	ce 01       	movw	r24, r28
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	5c 01       	movw	r10, r24
    1a06:	fc 01       	movw	r30, r24
    1a08:	e0 0f       	add	r30, r16
    1a0a:	f1 1f       	adc	r31, r17
    1a0c:	75 01       	movw	r14, r10
		for (j = i; j < 4; j++) {
    1a0e:	cf 01       	movw	r24, r30
    1a10:	8a 19       	sub	r24, r10
    1a12:	9b 09       	sbc	r25, r11
    1a14:	04 97       	sbiw	r24, 0x04	; 4
    1a16:	14 f4       	brge	.+4      	; 0x1a1c <_ZN7Helpers13base64_decodeEPhPci+0xe4>
			a4[j] = '\0';
    1a18:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
    1a1a:	f8 cf       	rjmp	.-16     	; 0x1a0c <_ZN7Helpers13base64_decodeEPhPci+0xd4>
    1a1c:	4e 01       	movw	r8, r28
    1a1e:	95 e0       	ldi	r25, 0x05	; 5
    1a20:	89 0e       	add	r8, r25
    1a22:	91 1c       	adc	r9, r1
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
    1a24:	f7 01       	movw	r30, r14
    1a26:	80 81       	ld	r24, Z
    1a28:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z10b64_lookupc>
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	81 93       	st	Z+, r24
    1a30:	7f 01       	movw	r14, r30
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
    1a32:	e8 15       	cp	r30, r8
    1a34:	f9 05       	cpc	r31, r9
    1a36:	b1 f7       	brne	.-20     	; 0x1a24 <_ZN7Helpers13base64_decodeEPhPci+0xec>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
    1a38:	b5 01       	movw	r22, r10
    1a3a:	cf 01       	movw	r24, r30
    1a3c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_Z8a4_to_a3PhS_>
    1a40:	f7 01       	movw	r30, r14
    1a42:	96 01       	movw	r18, r12
    1a44:	d3 01       	movw	r26, r6
    1a46:	ac 0d       	add	r26, r12
    1a48:	bd 1d       	adc	r27, r13

		for (j = 0; j < i - 1; j++) {
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	01 50       	subi	r16, 0x01	; 1
    1a50:	11 09       	sbc	r17, r1
    1a52:	6c 01       	movw	r12, r24
    1a54:	c2 0e       	add	r12, r18
    1a56:	d3 1e       	adc	r13, r19
    1a58:	80 17       	cp	r24, r16
    1a5a:	91 07       	cpc	r25, r17
    1a5c:	24 f4       	brge	.+8      	; 0x1a66 <_ZN7Helpers13base64_decodeEPhPci+0x12e>
			output[decLen++] = a3[j];
    1a5e:	41 91       	ld	r20, Z+
    1a60:	4d 93       	st	X+, r20
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	f6 cf       	rjmp	.-20     	; 0x1a52 <_ZN7Helpers13base64_decodeEPhPci+0x11a>
			output[decLen++] = a3[j];
		}
	}
	//output[decLen] = '\0';
	return decLen;
}
    1a66:	c6 01       	movw	r24, r12
    1a68:	27 96       	adiw	r28, 0x07	; 7
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	bf 90       	pop	r11
    1a86:	af 90       	pop	r10
    1a88:	9f 90       	pop	r9
    1a8a:	8f 90       	pop	r8
    1a8c:	7f 90       	pop	r7
    1a8e:	6f 90       	pop	r6
    1a90:	5f 90       	pop	r5
    1a92:	4f 90       	pop	r4
    1a94:	08 95       	ret

00001a96 <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	2c 97       	sbiw	r28, 0x0c	; 12
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	08 2f       	mov	r16, r24
    1ab0:	69 ec       	ldi	r22, 0xC9	; 201
    1ab2:	73 e0       	ldi	r23, 0x03	; 3
    1ab4:	81 e8       	ldi	r24, 0x81	; 129
    1ab6:	94 e0       	ldi	r25, 0x04	; 4
    1ab8:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1abc:	42 e0       	ldi	r20, 0x02	; 2
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	8e e9       	ldi	r24, 0x9E	; 158
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN13Adafruit_FONA5beginEhh>
    1ac8:	18 2f       	mov	r17, r24
    1aca:	8d ef       	ldi	r24, 0xFD	; 253
    1acc:	81 0f       	add	r24, r17
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	b8 f4       	brcc	.+46     	; 0x1b00 <_Z21ensureFonaInitialisedb+0x6a>
    1ad2:	6e ea       	ldi	r22, 0xAE	; 174
    1ad4:	73 e0       	ldi	r23, 0x03	; 3
    1ad6:	81 e8       	ldi	r24, 0x81	; 129
    1ad8:	94 e0       	ldi	r25, 0x04	; 4
    1ada:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1ade:	66 e4       	ldi	r22, 0x46	; 70
    1ae0:	71 e0       	ldi	r23, 0x01	; 1
    1ae2:	81 e8       	ldi	r24, 0x81	; 129
    1ae4:	94 e0       	ldi	r25, 0x04	; 4
    1ae6:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    1aea:	61 2f       	mov	r22, r17
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	4a e0       	ldi	r20, 0x0A	; 10
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	81 e8       	ldi	r24, 0x81	; 129
    1af4:	94 e0       	ldi	r25, 0x04	; 4
    1af6:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN5Print7printlnEii>
    1afa:	00 e0       	ldi	r16, 0x00	; 0
    1afc:	10 e0       	ldi	r17, 0x00	; 0
    1afe:	4d c0       	rjmp	.+154    	; 0x1b9a <_Z21ensureFonaInitialisedb+0x104>
    1b00:	86 e9       	ldi	r24, 0x96	; 150
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZN12RmMemManager11getModuleIdEv>
    1b08:	68 2f       	mov	r22, r24
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	68 5b       	subi	r22, 0xB8	; 184
    1b0e:	7e 4f       	sbci	r23, 0xFE	; 254
    1b10:	ce 01       	movw	r24, r28
    1b12:	07 96       	adiw	r24, 0x07	; 7
    1b14:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN6StringC1EPKc>
    1b18:	be 01       	movw	r22, r28
    1b1a:	69 5f       	subi	r22, 0xF9	; 249
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <_ZN6StringC1ERKS_>
    1b26:	be 01       	movw	r22, r28
    1b28:	6f 5f       	subi	r22, 0xFF	; 255
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	8e e9       	ldi	r24, 0x9E	; 158
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <_ZN6StringD1Ev>
    1b3c:	01 11       	cpse	r16, r1
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <_Z21ensureFonaInitialisedb+0xb0>
    1b40:	0e e9       	ldi	r16, 0x9E	; 158
    1b42:	12 e0       	ldi	r17, 0x02	; 2
    1b44:	26 c0       	rjmp	.+76     	; 0x1b92 <_Z21ensureFonaInitialisedb+0xfc>
    1b46:	69 e9       	ldi	r22, 0x99	; 153
    1b48:	73 e0       	ldi	r23, 0x03	; 3
    1b4a:	81 e8       	ldi	r24, 0x81	; 129
    1b4c:	94 e0       	ldi	r25, 0x04	; 4
    1b4e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	8e e9       	ldi	r24, 0x9E	; 158
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 a9 07 	call	0xf52	; 0xf52 <_ZN13Adafruit_FONA10enableGPRSEb>
    1b5c:	18 2f       	mov	r17, r24
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	81 0f       	add	r24, r17
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	68 f3       	brcs	.-38     	; 0x1b40 <_Z21ensureFonaInitialisedb+0xaa>
    1b66:	6e e7       	ldi	r22, 0x7E	; 126
    1b68:	73 e0       	ldi	r23, 0x03	; 3
    1b6a:	81 e8       	ldi	r24, 0x81	; 129
    1b6c:	94 e0       	ldi	r25, 0x04	; 4
    1b6e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1b72:	66 e4       	ldi	r22, 0x46	; 70
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	81 e8       	ldi	r24, 0x81	; 129
    1b78:	94 e0       	ldi	r25, 0x04	; 4
    1b7a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    1b7e:	61 2f       	mov	r22, r17
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	4a e0       	ldi	r20, 0x0A	; 10
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	81 e8       	ldi	r24, 0x81	; 129
    1b88:	94 e0       	ldi	r25, 0x04	; 4
    1b8a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN5Print7printlnEii>
    1b8e:	00 e0       	ldi	r16, 0x00	; 0
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	ce 01       	movw	r24, r28
    1b94:	07 96       	adiw	r24, 0x07	; 7
    1b96:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <_ZN6StringD1Ev>
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	2c 96       	adiw	r28, 0x0c	; 12
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <_Z15switchOffSystemv>:
    1bb2:	66 e5       	ldi	r22, 0x56	; 86
    1bb4:	71 e0       	ldi	r23, 0x01	; 1
    1bb6:	81 e8       	ldi	r24, 0x81	; 129
    1bb8:	94 e0       	ldi	r25, 0x04	; 4
    1bba:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	85 e0       	ldi	r24, 0x05	; 5
    1bc2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
    1bc6:	68 eb       	ldi	r22, 0xB8	; 184
    1bc8:	7b e0       	ldi	r23, 0x0B	; 11
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <delay>

00001bd2 <setup>:
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	85 e0       	ldi	r24, 0x05	; 5
    1bd6:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <pinMode>
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	85 e0       	ldi	r24, 0x05	; 5
    1bde:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
    1be2:	68 eb       	ldi	r22, 0xB8	; 184
    1be4:	7b e0       	ldi	r23, 0x0B	; 11
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	8d e0       	ldi	r24, 0x0D	; 13
    1bf2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <pinMode>
    1bf6:	26 e0       	ldi	r18, 0x06	; 6
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	55 e2       	ldi	r21, 0x25	; 37
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	81 e8       	ldi	r24, 0x81	; 129
    1c02:	94 e0       	ldi	r25, 0x04	; 4
    1c04:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZN14HardwareSerial5beginEmh>
    1c08:	6e ed       	ldi	r22, 0xDE	; 222
    1c0a:	73 e0       	ldi	r23, 0x03	; 3
    1c0c:	81 e8       	ldi	r24, 0x81	; 129
    1c0e:	94 e0       	ldi	r25, 0x04	; 4
    1c10:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c14:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_ZN13ExtendedTests20runExtendedTypesTestEv>
    1c18:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <_Z15switchOffSystemv>

00001c1c <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	2a 97       	sbiw	r28, 0x0a	; 10
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    1c30:	6b e6       	ldi	r22, 0x6B	; 107
    1c32:	73 e0       	ldi	r23, 0x03	; 3
    1c34:	81 e8       	ldi	r24, 0x81	; 129
    1c36:	94 e0       	ldi	r25, 0x04	; 4
    1c38:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	1b 82       	std	Y+3, r1	; 0x03
    1c42:	1a 82       	std	Y+2, r1	; 0x02
    1c44:	1d 82       	std	Y+5, r1	; 0x05
    1c46:	1c 82       	std	Y+4, r1	; 0x04
    1c48:	1f 82       	std	Y+7, r1	; 0x07
    1c4a:	1e 82       	std	Y+6, r1	; 0x06
    1c4c:	19 86       	std	Y+9, r1	; 0x09
    1c4e:	18 86       	std	Y+8, r1	; 0x08
    1c50:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    1c52:	be 01       	movw	r22, r28
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	84 e9       	ldi	r24, 0x94	; 148
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	2a 96       	adiw	r28, 0x0a	; 10
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <_Z8sendDatav+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <_Z8sendDatav+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    1c80:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	98 0f       	add	r25, r24
    1c88:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <_sendDataLoopCount>
	
	if (doInit) {
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	15 c0       	rjmp	.+42     	; 0x1cba <_Z8sendDatav+0x46>
	
		RM_LOGLN(F("Initialising module to send data"));
    1c90:	6a e4       	ldi	r22, 0x4A	; 74
    1c92:	73 e0       	ldi	r23, 0x03	; 3
    1c94:	81 e8       	ldi	r24, 0x81	; 129
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z21ensureFonaInitialisedb>
    1ca2:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <_sendDataFona+0x1>
    1ca6:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_sendDataFona>
	
		if (_sendDataFona == NULL)
    1caa:	89 2b       	or	r24, r25
    1cac:	f9 f0       	breq	.+62     	; 0x1cec <_Z8sendDatav+0x78>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    1cae:	6b e1       	ldi	r22, 0x1B	; 27
    1cb0:	73 e0       	ldi	r23, 0x03	; 3
    1cb2:	81 e8       	ldi	r24, 0x81	; 129
    1cb4:	94 e0       	ldi	r25, 0x04	; 4
    1cb6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    1cba:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_sendDataLoopCount>
    1cbe:	8c 33       	cpi	r24, 0x3C	; 60
    1cc0:	b9 f4       	brne	.+46     	; 0x1cf0 <_Z8sendDatav+0x7c>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1cc2:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_sendDataFona>
    1cc6:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <_sendDataFona+0x1>
    1cca:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN13Adafruit_FONA7getRSSIEv>
    1cce:	69 83       	std	Y+1, r22	; 0x01
    1cd0:	7a 83       	std	Y+2, r23	; 0x02
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1cde:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1ce2:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_sendDataFona+0x1>
    1ce6:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_sendDataFona>
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <_Z8sendDatav+0x7c>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <_Z8sendDatav+0x7e>
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1d00:	68 ee       	ldi	r22, 0xE8	; 232
    1d02:	73 e0       	ldi	r23, 0x03	; 3
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 66 1c 	call	0x38cc	; 0x38cc <delay>
	++_timerCounter;
    1d0c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end>
    1d10:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x1>
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x1>
    1d1a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    1d1e:	61 e1       	ldi	r22, 0x11	; 17
    1d20:	73 e0       	ldi	r23, 0x03	; 3
    1d22:	81 e8       	ldi	r24, 0x81	; 129
    1d24:	94 e0       	ldi	r25, 0x04	; 4
    1d26:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    1d2a:	66 e4       	ldi	r22, 0x46	; 70
    1d2c:	71 e0       	ldi	r23, 0x01	; 1
    1d2e:	81 e8       	ldi	r24, 0x81	; 129
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    1d36:	4a e0       	ldi	r20, 0x0A	; 10
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <_behaviour>
    1d3e:	81 e8       	ldi	r24, 0x81	; 129
    1d40:	94 e0       	ldi	r25, 0x04	; 4
    1d42:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1d46:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1d4a:	80 ff       	sbrs	r24, 0
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <loop+0x60>
		
		if (takeReadings())
    1d4e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_Z12takeReadingsv>
    1d52:	88 23       	and	r24, r24
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    1d56:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1d5a:	8e 7f       	andi	r24, 0xFE	; 254
    1d5c:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1d60:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1d64:	81 ff       	sbrs	r24, 1
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <loop+0x7a>
		
		if (sendData())
    1d68:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <_Z8sendDatav>
    1d6c:	88 23       	and	r24, r24
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    1d70:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1d74:	8d 7f       	andi	r24, 0xFD	; 253
    1d76:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1d7a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_behaviour>
    1d7e:	81 11       	cpse	r24, r1
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <loop+0x86>
		
		switchOffSystem();
    1d82:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <_Z15switchOffSystemv>
    1d86:	08 95       	ret

00001d88 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	64 e0       	ldi	r22, 0x04	; 4
    1d8c:	8e e9       	ldi	r24, 0x9E	; 158
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 83 04 	call	0x906	; 0x906 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	86 e9       	ldi	r24, 0x96	; 150
    1d98:	92 e0       	ldi	r25, 0x02	; 2
    1d9a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	84 e9       	ldi	r24, 0x94	; 148
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <_ZN13SensorManagerC1Eb>

00001da8 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1da8:	8a e3       	ldi	r24, 0x3A	; 58
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__fona+0x1>
    1db0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__fona>
    1db4:	83 eb       	ldi	r24, 0xB3	; 179
    1db6:	93 e0       	ldi	r25, 0x03	; 3
    1db8:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <_ZN6StringD1Ev>

00001dbc <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	01 90       	ld	r0, Z+
    1dc4:	f0 81       	ld	r31, Z
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	09 94       	ijmp

00001dca <_ZN12RmMemManagerC1Eb>:
    1dca:	fc 01       	movw	r30, r24
    1dcc:	11 82       	std	Z+1, r1	; 0x01
    1dce:	12 82       	std	Z+2, r1	; 0x02
    1dd0:	13 82       	std	Z+3, r1	; 0x03
    1dd2:	14 82       	std	Z+4, r1	; 0x04
    1dd4:	80 e8       	ldi	r24, 0x80	; 128
    1dd6:	85 83       	std	Z+5, r24	; 0x05
    1dd8:	86 83       	std	Z+6, r24	; 0x06
    1dda:	17 82       	std	Z+7, r1	; 0x07
    1ddc:	60 83       	st	Z, r22
    1dde:	61 11       	cpse	r22, r1
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <_ZN12RmMemManagerC1Eb+0x20>
    1de2:	8b e2       	ldi	r24, 0x2B	; 43
    1de4:	94 e0       	ldi	r25, 0x04	; 4
    1de6:	0c 94 b7 12 	jmp	0x256e	; 0x256e <_ZN7TwoWire5beginEv>
    1dea:	08 95       	ret

00001dec <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	eb 01       	movw	r28, r22
    1dfa:	7b 01       	movw	r14, r22
    1dfc:	e4 0e       	add	r14, r20
    1dfe:	f1 1c       	adc	r15, r1
    1e00:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1e02:	ce 15       	cp	r28, r14
    1e04:	df 05       	cpc	r29, r15
    1e06:	71 f1       	breq	.+92     	; 0x1e64 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1e08:	60 e5       	ldi	r22, 0x50	; 80
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	8b e2       	ldi	r24, 0x2B	; 43
    1e0e:	94 e0       	ldi	r25, 0x04	; 4
    1e10:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1e14:	61 2f       	mov	r22, r17
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	8b e2       	ldi	r24, 0x2B	; 43
    1e1a:	94 e0       	ldi	r25, 0x04	; 4
    1e1c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1e20:	b8 01       	movw	r22, r16
    1e22:	77 27       	eor	r23, r23
    1e24:	8b e2       	ldi	r24, 0x2B	; 43
    1e26:	94 e0       	ldi	r25, 0x04	; 4
    1e28:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1e2c:	8b e2       	ldi	r24, 0x2B	; 43
    1e2e:	94 e0       	ldi	r25, 0x04	; 4
    1e30:	0e 94 4f 13 	call	0x269e	; 0x269e <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	60 e5       	ldi	r22, 0x50	; 80
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	8b e2       	ldi	r24, 0x2B	; 43
    1e3e:	94 e0       	ldi	r25, 0x04	; 4
    1e40:	0e 94 4c 13 	call	0x2698	; 0x2698 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1e44:	8b e2       	ldi	r24, 0x2B	; 43
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire9availableEv>
    1e4c:	89 2b       	or	r24, r25
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1e50:	8b e2       	ldi	r24, 0x2B	; 43
    1e52:	94 e0       	ldi	r25, 0x04	; 4
    1e54:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN7TwoWire4readEv>
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1e5c:	89 93       	st	Y+, r24
    1e5e:	0f 5f       	subi	r16, 0xFF	; 255
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1e62:	cf cf       	rjmp	.-98     	; 0x1e02 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	08 95       	ret

00001e72 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	1f 92       	push	r1
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	be 01       	movw	r22, r28
    1e82:	6f 5f       	subi	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_Z12internalReadjPhh>
	return value;
}
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	0f 90       	pop	r0
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	08 95       	ret

00001e94 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <_ZN12RmMemManager18getUCharFromMemoryEj>

00001e9c <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	60 83       	st	Z, r22
    1ea0:	08 95       	ret

00001ea2 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	80 81       	ld	r24, Z
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1eaa:	86 2f       	mov	r24, r22
    1eac:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1eb0:	85 e0       	ldi	r24, 0x05	; 5
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	08 95       	ret

00001eb6 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1eba:	81 81       	ldd	r24, Z+1	; 0x01
    1ebc:	8f 5f       	subi	r24, 0xFF	; 255
    1ebe:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	12 96       	adiw	r26, 0x02	; 2
    1ec4:	9c 93       	st	X, r25
    1ec6:	8e 93       	st	-X, r24
    1ec8:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1eca:	81 81       	ldd	r24, Z+1	; 0x01
    1ecc:	2a e0       	ldi	r18, 0x0A	; 10
    1ece:	82 9f       	mul	r24, r18
    1ed0:	c0 01       	movw	r24, r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	16 96       	adiw	r26, 0x06	; 6
    1ed6:	9c 93       	st	X, r25
    1ed8:	8e 93       	st	-X, r24
    1eda:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1edc:	81 81       	ldd	r24, Z+1	; 0x01
    1ede:	67 e0       	ldi	r22, 0x07	; 7
    1ee0:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__udivmodqi4>
    1ee4:	89 2f       	mov	r24, r25
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	9c 93       	st	X, r25
    1eec:	8e 93       	st	-X, r24
    1eee:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1ef0:	81 81       	ldd	r24, Z+1	; 0x01
    1ef2:	24 e6       	ldi	r18, 0x64	; 100
    1ef4:	82 9f       	mul	r24, r18
    1ef6:	c0 01       	movw	r24, r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	18 96       	adiw	r26, 0x08	; 8
    1efc:	9c 93       	st	X, r25
    1efe:	8e 93       	st	-X, r24
    1f00:	17 97       	sbiw	r26, 0x07	; 7
    1f02:	08 95       	ret

00001f04 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1f04:	af 92       	push	r10
    1f06:	bf 92       	push	r11
    1f08:	cf 92       	push	r12
    1f0a:	df 92       	push	r13
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	8c 01       	movw	r16, r24
    1f1a:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 23       	and	r24, r24
    1f22:	21 f0       	breq	.+8      	; 0x1f2c <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1f24:	c8 01       	movw	r24, r16
    1f26:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_ZN13SensorManager11getMockDataEP10SensorData>
    1f2a:	1b c0       	rjmp	.+54     	; 0x1f62 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1f2c:	6e e0       	ldi	r22, 0x0E	; 14
    1f2e:	c8 01       	movw	r24, r16
    1f30:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN13SensorManager16takeSampleAnalogEh>
    1f34:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1f36:	6f e0       	ldi	r22, 0x0F	; 15
    1f38:	c8 01       	movw	r24, r16
    1f3a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN13SensorManager16takeSampleAnalogEh>
    1f3e:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1f40:	61 e1       	ldi	r22, 0x11	; 17
    1f42:	c8 01       	movw	r24, r16
    1f44:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN13SensorManager16takeSampleAnalogEh>
    1f48:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1f4a:	60 e1       	ldi	r22, 0x10	; 16
    1f4c:	c8 01       	movw	r24, r16
    1f4e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    1f52:	ba 82       	std	Y+2, r11	; 0x02
    1f54:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    1f56:	de 82       	std	Y+6, r13	; 0x06
    1f58:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    1f5a:	fc 82       	std	Y+4, r15	; 0x04
    1f5c:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    1f5e:	98 87       	std	Y+8, r25	; 0x08
    1f60:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1f62:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    1f78:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <_ZN7Helpers15printSensorDataEP10SensorData>

00001f7c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f7c:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_sendStop>
    1f86:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_inRepStart>
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	82 e1       	ldi	r24, 0x12	; 18
    1f8e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	83 e1       	ldi	r24, 0x13	; 19
    1f96:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
    1f9a:	e9 eb       	ldi	r30, 0xB9	; 185
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8e 7f       	andi	r24, 0xFE	; 254
    1fa2:	80 83       	st	Z, r24
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8d 7f       	andi	r24, 0xFD	; 253
    1fa8:	80 83       	st	Z, r24
    1faa:	88 e4       	ldi	r24, 0x48	; 72
    1fac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1fb0:	85 e4       	ldi	r24, 0x45	; 69
    1fb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1fb6:	08 95       	ret

00001fb8 <twi_readFrom>:
    1fb8:	41 32       	cpi	r20, 0x21	; 33
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <twi_readFrom+0x6>
    1fbc:	43 c0       	rjmp	.+134    	; 0x2044 <twi_readFrom+0x8c>
    1fbe:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <twi_state>
    1fc2:	91 11       	cpse	r25, r1
    1fc4:	fc cf       	rjmp	.-8      	; 0x1fbe <twi_readFrom+0x6>
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <twi_state>
    1fcc:	20 93 28 04 	sts	0x0428, r18	; 0x800428 <twi_sendStop>
    1fd0:	2f ef       	ldi	r18, 0xFF	; 255
    1fd2:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <twi_error>
    1fd6:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_masterBufferIndex>
    1fda:	24 0f       	add	r18, r20
    1fdc:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <twi_masterBufferLength>
    1fe0:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <twi_slarw>
    1fe4:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <twi_slarw>
    1fe8:	88 0f       	add	r24, r24
    1fea:	89 2b       	or	r24, r25
    1fec:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_slarw>
    1ff0:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_inRepStart>
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	61 f4       	brne	.+24     	; 0x2010 <twi_readFrom+0x58>
    1ff8:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_inRepStart>
    1ffc:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_slarw>
    2000:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2004:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2008:	83 fd       	sbrc	r24, 3
    200a:	f8 cf       	rjmp	.-16     	; 0x1ffc <twi_readFrom+0x44>
    200c:	85 ec       	ldi	r24, 0xC5	; 197
    200e:	01 c0       	rjmp	.+2      	; 0x2012 <twi_readFrom+0x5a>
    2010:	85 ee       	ldi	r24, 0xE5	; 229
    2012:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2016:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_state>
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	e1 f3       	breq	.-8      	; 0x2016 <twi_readFrom+0x5e>
    201e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <twi_masterBufferIndex>
    2022:	84 17       	cp	r24, r20
    2024:	10 f4       	brcc	.+4      	; 0x202a <twi_readFrom+0x72>
    2026:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <twi_masterBufferIndex>
    202a:	a3 e0       	ldi	r26, 0x03	; 3
    202c:	b4 e0       	ldi	r27, 0x04	; 4
    202e:	96 2f       	mov	r25, r22
    2030:	fb 01       	movw	r30, r22
    2032:	8e 2f       	mov	r24, r30
    2034:	89 1b       	sub	r24, r25
    2036:	84 17       	cp	r24, r20
    2038:	18 f4       	brcc	.+6      	; 0x2040 <twi_readFrom+0x88>
    203a:	8d 91       	ld	r24, X+
    203c:	81 93       	st	Z+, r24
    203e:	f9 cf       	rjmp	.-14     	; 0x2032 <twi_readFrom+0x7a>
    2040:	84 2f       	mov	r24, r20
    2042:	08 95       	ret
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	08 95       	ret

00002048 <twi_writeTo>:
    2048:	0f 93       	push	r16
    204a:	41 32       	cpi	r20, 0x21	; 33
    204c:	08 f0       	brcs	.+2      	; 0x2050 <twi_writeTo+0x8>
    204e:	4a c0       	rjmp	.+148    	; 0x20e4 <twi_writeTo+0x9c>
    2050:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <twi_state>
    2054:	91 11       	cpse	r25, r1
    2056:	fc cf       	rjmp	.-8      	; 0x2050 <twi_writeTo+0x8>
    2058:	32 e0       	ldi	r19, 0x02	; 2
    205a:	30 93 2a 04 	sts	0x042A, r19	; 0x80042a <twi_state>
    205e:	00 93 28 04 	sts	0x0428, r16	; 0x800428 <twi_sendStop>
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <twi_error>
    2068:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_masterBufferIndex>
    206c:	40 93 01 04 	sts	0x0401, r20	; 0x800401 <twi_masterBufferLength>
    2070:	56 2f       	mov	r21, r22
    2072:	a3 e0       	ldi	r26, 0x03	; 3
    2074:	b4 e0       	ldi	r27, 0x04	; 4
    2076:	fb 01       	movw	r30, r22
    2078:	3e 2f       	mov	r19, r30
    207a:	35 1b       	sub	r19, r21
    207c:	34 17       	cp	r19, r20
    207e:	18 f4       	brcc	.+6      	; 0x2086 <twi_writeTo+0x3e>
    2080:	31 91       	ld	r19, Z+
    2082:	3d 93       	st	X+, r19
    2084:	f9 cf       	rjmp	.-14     	; 0x2078 <twi_writeTo+0x30>
    2086:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <twi_slarw>
    208a:	30 91 29 04 	lds	r19, 0x0429	; 0x800429 <twi_slarw>
    208e:	88 0f       	add	r24, r24
    2090:	83 2b       	or	r24, r19
    2092:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_slarw>
    2096:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <twi_inRepStart>
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	61 f4       	brne	.+24     	; 0x20b6 <twi_writeTo+0x6e>
    209e:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <twi_inRepStart>
    20a2:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_slarw>
    20a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20ae:	83 fd       	sbrc	r24, 3
    20b0:	f8 cf       	rjmp	.-16     	; 0x20a2 <twi_writeTo+0x5a>
    20b2:	85 ec       	ldi	r24, 0xC5	; 197
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <twi_writeTo+0x70>
    20b6:	85 ee       	ldi	r24, 0xE5	; 229
    20b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20bc:	22 23       	and	r18, r18
    20be:	21 f0       	breq	.+8      	; 0x20c8 <twi_writeTo+0x80>
    20c0:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_state>
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	d1 f3       	breq	.-12     	; 0x20bc <twi_writeTo+0x74>
    20c8:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_error>
    20cc:	8f 3f       	cpi	r24, 0xFF	; 255
    20ce:	79 f0       	breq	.+30     	; 0x20ee <twi_writeTo+0xa6>
    20d0:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_error>
    20d4:	80 32       	cpi	r24, 0x20	; 32
    20d6:	41 f0       	breq	.+16     	; 0x20e8 <twi_writeTo+0xa0>
    20d8:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_error>
    20dc:	80 33       	cpi	r24, 0x30	; 48
    20de:	31 f0       	breq	.+12     	; 0x20ec <twi_writeTo+0xa4>
    20e0:	94 e0       	ldi	r25, 0x04	; 4
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <twi_writeTo+0xa6>
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <twi_writeTo+0xa6>
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <twi_writeTo+0xa6>
    20ec:	93 e0       	ldi	r25, 0x03	; 3
    20ee:	89 2f       	mov	r24, r25
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret

000020f4 <twi_transmit>:
    20f4:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <twi_txBufferLength>
    20f8:	26 2f       	mov	r18, r22
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	24 0f       	add	r18, r20
    20fe:	31 1d       	adc	r19, r1
    2100:	21 32       	cpi	r18, 0x21	; 33
    2102:	31 05       	cpc	r19, r1
    2104:	dc f4       	brge	.+54     	; 0x213c <twi_transmit+0x48>
    2106:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <twi_state>
    210a:	24 30       	cpi	r18, 0x04	; 4
    210c:	c9 f4       	brne	.+50     	; 0x2140 <twi_transmit+0x4c>
    210e:	fc 01       	movw	r30, r24
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	86 17       	cp	r24, r22
    2116:	58 f4       	brcc	.+22     	; 0x212e <twi_transmit+0x3a>
    2118:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <twi_txBufferLength>
    211c:	21 91       	ld	r18, Z+
    211e:	dc 01       	movw	r26, r24
    2120:	af 51       	subi	r26, 0x1F	; 31
    2122:	bc 4f       	sbci	r27, 0xFC	; 252
    2124:	a3 0f       	add	r26, r19
    2126:	b1 1d       	adc	r27, r1
    2128:	2c 93       	st	X, r18
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	f3 cf       	rjmp	.-26     	; 0x2114 <twi_transmit+0x20>
    212e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_txBufferLength>
    2132:	68 0f       	add	r22, r24
    2134:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <twi_txBufferLength>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	08 95       	ret
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	08 95       	ret
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	08 95       	ret

00002144 <twi_attachSlaveRxEvent>:
    2144:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <twi_onSlaveReceive+0x1>
    2148:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_onSlaveReceive>
    214c:	08 95       	ret

0000214e <twi_attachSlaveTxEvent>:
    214e:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <twi_onSlaveTransmit+0x1>
    2152:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <twi_onSlaveTransmit>
    2156:	08 95       	ret

00002158 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2158:	85 ed       	ldi	r24, 0xD5	; 213
    215a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    215e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2162:	84 fd       	sbrc	r24, 4
    2164:	fc cf       	rjmp	.-8      	; 0x215e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2166:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
    216a:	08 95       	ret

0000216c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    216c:	85 ec       	ldi	r24, 0xC5	; 197
    216e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2172:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
    2176:	08 95       	ret

00002178 <__vector_24>:
}

ISR(TWI_vect)
{
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
  switch(TW_STATUS){
    219a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    219e:	88 7f       	andi	r24, 0xF8	; 248
    21a0:	80 36       	cpi	r24, 0x60	; 96
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <__vector_24+0x2e>
    21a4:	9e c0       	rjmp	.+316    	; 0x22e2 <__vector_24+0x16a>
    21a6:	78 f5       	brcc	.+94     	; 0x2206 <__vector_24+0x8e>
    21a8:	88 32       	cpi	r24, 0x28	; 40
    21aa:	09 f4       	brne	.+2      	; 0x21ae <__vector_24+0x36>
    21ac:	5d c0       	rjmp	.+186    	; 0x2268 <__vector_24+0xf0>
    21ae:	90 f4       	brcc	.+36     	; 0x21d4 <__vector_24+0x5c>
    21b0:	80 31       	cpi	r24, 0x10	; 16
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <__vector_24+0x3e>
    21b4:	56 c0       	rjmp	.+172    	; 0x2262 <__vector_24+0xea>
    21b6:	38 f4       	brcc	.+14     	; 0x21c6 <__vector_24+0x4e>
    21b8:	88 23       	and	r24, r24
    21ba:	09 f4       	brne	.+2      	; 0x21be <__vector_24+0x46>
    21bc:	f5 c0       	rjmp	.+490    	; 0x23a8 <__vector_24+0x230>
    21be:	88 30       	cpi	r24, 0x08	; 8
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_24+0x4c>
    21c2:	4f c0       	rjmp	.+158    	; 0x2262 <__vector_24+0xea>
    21c4:	f5 c0       	rjmp	.+490    	; 0x23b0 <__vector_24+0x238>
    21c6:	88 31       	cpi	r24, 0x18	; 24
    21c8:	09 f4       	brne	.+2      	; 0x21cc <__vector_24+0x54>
    21ca:	4e c0       	rjmp	.+156    	; 0x2268 <__vector_24+0xf0>
    21cc:	80 32       	cpi	r24, 0x20	; 32
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__vector_24+0x5a>
    21d0:	5f c0       	rjmp	.+190    	; 0x2290 <__vector_24+0x118>
    21d2:	ee c0       	rjmp	.+476    	; 0x23b0 <__vector_24+0x238>
    21d4:	80 34       	cpi	r24, 0x40	; 64
    21d6:	09 f4       	brne	.+2      	; 0x21da <__vector_24+0x62>
    21d8:	6a c0       	rjmp	.+212    	; 0x22ae <__vector_24+0x136>
    21da:	58 f4       	brcc	.+22     	; 0x21f2 <__vector_24+0x7a>
    21dc:	80 33       	cpi	r24, 0x30	; 48
    21de:	09 f4       	brne	.+2      	; 0x21e2 <__vector_24+0x6a>
    21e0:	57 c0       	rjmp	.+174    	; 0x2290 <__vector_24+0x118>
    21e2:	88 33       	cpi	r24, 0x38	; 56
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <__vector_24+0x70>
    21e6:	e4 c0       	rjmp	.+456    	; 0x23b0 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21e8:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <twi_error>
      twi_releaseBus();
    21ec:	0e 94 b6 10 	call	0x216c	; 0x216c <twi_releaseBus>
      break;
    21f0:	df c0       	rjmp	.+446    	; 0x23b0 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21f2:	80 35       	cpi	r24, 0x50	; 80
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_24+0x80>
    21f6:	4f c0       	rjmp	.+158    	; 0x2296 <__vector_24+0x11e>
    21f8:	88 35       	cpi	r24, 0x58	; 88
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_24+0x86>
    21fc:	5d c0       	rjmp	.+186    	; 0x22b8 <__vector_24+0x140>
    21fe:	88 34       	cpi	r24, 0x48	; 72
    2200:	09 f0       	breq	.+2      	; 0x2204 <__vector_24+0x8c>
    2202:	d6 c0       	rjmp	.+428    	; 0x23b0 <__vector_24+0x238>
    2204:	d3 c0       	rjmp	.+422    	; 0x23ac <__vector_24+0x234>
    2206:	88 39       	cpi	r24, 0x98	; 152
    2208:	09 f4       	brne	.+2      	; 0x220c <__vector_24+0x94>
    220a:	c4 c0       	rjmp	.+392    	; 0x2394 <__vector_24+0x21c>
    220c:	a8 f4       	brcc	.+42     	; 0x2238 <__vector_24+0xc0>
    220e:	88 37       	cpi	r24, 0x78	; 120
    2210:	09 f4       	brne	.+2      	; 0x2214 <__vector_24+0x9c>
    2212:	67 c0       	rjmp	.+206    	; 0x22e2 <__vector_24+0x16a>
    2214:	38 f4       	brcc	.+14     	; 0x2224 <__vector_24+0xac>
    2216:	88 36       	cpi	r24, 0x68	; 104
    2218:	09 f4       	brne	.+2      	; 0x221c <__vector_24+0xa4>
    221a:	63 c0       	rjmp	.+198    	; 0x22e2 <__vector_24+0x16a>
    221c:	80 37       	cpi	r24, 0x70	; 112
    221e:	09 f4       	brne	.+2      	; 0x2222 <__vector_24+0xaa>
    2220:	60 c0       	rjmp	.+192    	; 0x22e2 <__vector_24+0x16a>
    2222:	c6 c0       	rjmp	.+396    	; 0x23b0 <__vector_24+0x238>
    2224:	88 38       	cpi	r24, 0x88	; 136
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_24+0xb2>
    2228:	b5 c0       	rjmp	.+362    	; 0x2394 <__vector_24+0x21c>
    222a:	80 39       	cpi	r24, 0x90	; 144
    222c:	09 f4       	brne	.+2      	; 0x2230 <__vector_24+0xb8>
    222e:	5f c0       	rjmp	.+190    	; 0x22ee <__vector_24+0x176>
    2230:	80 38       	cpi	r24, 0x80	; 128
    2232:	09 f0       	breq	.+2      	; 0x2236 <__vector_24+0xbe>
    2234:	bd c0       	rjmp	.+378    	; 0x23b0 <__vector_24+0x238>
    2236:	5b c0       	rjmp	.+182    	; 0x22ee <__vector_24+0x176>
    2238:	80 3b       	cpi	r24, 0xB0	; 176
    223a:	09 f4       	brne	.+2      	; 0x223e <__vector_24+0xc6>
    223c:	83 c0       	rjmp	.+262    	; 0x2344 <__vector_24+0x1cc>
    223e:	38 f4       	brcc	.+14     	; 0x224e <__vector_24+0xd6>
    2240:	80 3a       	cpi	r24, 0xA0	; 160
    2242:	09 f4       	brne	.+2      	; 0x2246 <__vector_24+0xce>
    2244:	66 c0       	rjmp	.+204    	; 0x2312 <__vector_24+0x19a>
    2246:	88 3a       	cpi	r24, 0xA8	; 168
    2248:	09 f4       	brne	.+2      	; 0x224c <__vector_24+0xd4>
    224a:	7c c0       	rjmp	.+248    	; 0x2344 <__vector_24+0x1cc>
    224c:	b1 c0       	rjmp	.+354    	; 0x23b0 <__vector_24+0x238>
    224e:	80 3c       	cpi	r24, 0xC0	; 192
    2250:	09 f4       	brne	.+2      	; 0x2254 <__vector_24+0xdc>
    2252:	a4 c0       	rjmp	.+328    	; 0x239c <__vector_24+0x224>
    2254:	88 3c       	cpi	r24, 0xC8	; 200
    2256:	09 f4       	brne	.+2      	; 0x225a <__vector_24+0xe2>
    2258:	a1 c0       	rjmp	.+322    	; 0x239c <__vector_24+0x224>
    225a:	88 3b       	cpi	r24, 0xB8	; 184
    225c:	09 f4       	brne	.+2      	; 0x2260 <__vector_24+0xe8>
    225e:	87 c0       	rjmp	.+270    	; 0x236e <__vector_24+0x1f6>
    2260:	a7 c0       	rjmp	.+334    	; 0x23b0 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2262:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_slarw>
    2266:	10 c0       	rjmp	.+32     	; 0x2288 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2268:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <twi_masterBufferIndex>
    226c:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_masterBufferLength>
    2270:	98 17       	cp	r25, r24
    2272:	70 f5       	brcc	.+92     	; 0x22d0 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2274:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_masterBufferIndex>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	8e 0f       	add	r24, r30
    227c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_masterBufferIndex>
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	ed 5f       	subi	r30, 0xFD	; 253
    2284:	fb 4f       	sbci	r31, 0xFB	; 251
    2286:	80 81       	ld	r24, Z
    2288:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    228c:	85 ec       	ldi	r24, 0xC5	; 197
    228e:	83 c0       	rjmp	.+262    	; 0x2396 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2290:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <twi_error>
    2294:	8b c0       	rjmp	.+278    	; 0x23ac <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2296:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_masterBufferIndex>
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	8e 0f       	add	r24, r30
    229e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_masterBufferIndex>
    22a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	ed 5f       	subi	r30, 0xFD	; 253
    22aa:	fb 4f       	sbci	r31, 0xFB	; 251
    22ac:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22ae:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <twi_masterBufferIndex>
    22b2:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_masterBufferLength>
    22b6:	6b c0       	rjmp	.+214    	; 0x238e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22b8:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_masterBufferIndex>
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	8e 0f       	add	r24, r30
    22c0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_masterBufferIndex>
    22c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	ed 5f       	subi	r30, 0xFD	; 253
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	80 83       	st	Z, r24
	if (twi_sendStop)
    22d0:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_sendStop>
    22d4:	81 11       	cpse	r24, r1
    22d6:	6a c0       	rjmp	.+212    	; 0x23ac <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22de:	84 ea       	ldi	r24, 0xA4	; 164
    22e0:	5e c0       	rjmp	.+188    	; 0x239e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    22e8:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <twi_rxBufferIndex>
    22ec:	cf cf       	rjmp	.-98     	; 0x228c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22ee:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    22f2:	80 32       	cpi	r24, 0x20	; 32
    22f4:	08 f0       	brcs	.+2      	; 0x22f8 <__vector_24+0x180>
    22f6:	4e c0       	rjmp	.+156    	; 0x2394 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    22f8:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	8e 0f       	add	r24, r30
    2300:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <twi_rxBufferIndex>
    2304:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	e1 54       	subi	r30, 0x41	; 65
    230c:	fc 4f       	sbci	r31, 0xFC	; 252
    230e:	80 83       	st	Z, r24
    2310:	bd cf       	rjmp	.-134    	; 0x228c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2312:	0e 94 b6 10 	call	0x216c	; 0x216c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2316:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    231a:	80 32       	cpi	r24, 0x20	; 32
    231c:	30 f4       	brcc	.+12     	; 0x232a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    231e:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	e1 54       	subi	r30, 0x41	; 65
    2326:	fc 4f       	sbci	r31, 0xFC	; 252
    2328:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    232a:	60 91 be 03 	lds	r22, 0x03BE	; 0x8003be <twi_rxBufferIndex>
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_onSlaveReceive>
    2334:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <twi_onSlaveReceive+0x1>
    2338:	8f eb       	ldi	r24, 0xBF	; 191
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    233e:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <twi_rxBufferIndex>
      break;
    2342:	36 c0       	rjmp	.+108    	; 0x23b0 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2344:	84 e0       	ldi	r24, 0x04	; 4
    2346:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    234a:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    234e:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2352:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <twi_onSlaveTransmit>
    2356:	f0 91 26 04 	lds	r31, 0x0426	; 0x800426 <twi_onSlaveTransmit+0x1>
    235a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    235c:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_txBufferLength>
    2360:	81 11       	cpse	r24, r1
    2362:	05 c0       	rjmp	.+10     	; 0x236e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    236a:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    236e:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <twi_txBufferIndex>
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	8e 0f       	add	r24, r30
    2376:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <twi_txBufferIndex>
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	ef 51       	subi	r30, 0x1F	; 31
    237e:	fc 4f       	sbci	r31, 0xFC	; 252
    2380:	80 81       	ld	r24, Z
    2382:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2386:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <twi_txBufferIndex>
    238a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_txBufferLength>
    238e:	98 17       	cp	r25, r24
    2390:	08 f4       	brcc	.+2      	; 0x2394 <__vector_24+0x21c>
    2392:	7c cf       	rjmp	.-264    	; 0x228c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2394:	85 e8       	ldi	r24, 0x85	; 133
    2396:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    239a:	0a c0       	rjmp	.+20     	; 0x23b0 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    239c:	85 ec       	ldi	r24, 0xC5	; 197
    239e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23a2:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_state>
      break;
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23a8:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_error>
      twi_stop();
    23ac:	0e 94 ac 10 	call	0x2158	; 0x2158 <twi_stop>
      break;
  }
}
    23b0:	ff 91       	pop	r31
    23b2:	ef 91       	pop	r30
    23b4:	bf 91       	pop	r27
    23b6:	af 91       	pop	r26
    23b8:	9f 91       	pop	r25
    23ba:	8f 91       	pop	r24
    23bc:	7f 91       	pop	r23
    23be:	6f 91       	pop	r22
    23c0:	5f 91       	pop	r21
    23c2:	4f 91       	pop	r20
    23c4:	3f 91       	pop	r19
    23c6:	2f 91       	pop	r18
    23c8:	0f 90       	pop	r0
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	0f 90       	pop	r0
    23ce:	1f 90       	pop	r1
    23d0:	18 95       	reti

000023d2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    23d2:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    23dc:	82 1b       	sub	r24, r18
    23de:	91 09       	sbc	r25, r1
    23e0:	08 95       	ret

000023e2 <_ZN7TwoWire4readEv>:
    23e2:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    23e6:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    23ea:	98 17       	cp	r25, r24
    23ec:	50 f4       	brcc	.+20     	; 0x2402 <_ZN7TwoWire4readEv+0x20>
    23ee:	e9 2f       	mov	r30, r25
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	ef 59       	subi	r30, 0x9F	; 159
    23f4:	fb 4f       	sbci	r31, 0xFB	; 251
    23f6:	20 81       	ld	r18, Z
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	9f 5f       	subi	r25, 0xFF	; 255
    23fc:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <_ZN7TwoWire4readEv+0x24>
    2402:	2f ef       	ldi	r18, 0xFF	; 255
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	c9 01       	movw	r24, r18
    2408:	08 95       	ret

0000240a <_ZN7TwoWire4peekEv>:
    240a:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    240e:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2412:	e8 17       	cp	r30, r24
    2414:	30 f4       	brcc	.+12     	; 0x2422 <_ZN7TwoWire4peekEv+0x18>
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	ef 59       	subi	r30, 0x9F	; 159
    241a:	fb 4f       	sbci	r31, 0xFB	; 251
    241c:	80 81       	ld	r24, Z
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	08 95       	ret
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	9f ef       	ldi	r25, 0xFF	; 255
    2426:	08 95       	ret

00002428 <_ZN7TwoWire5flushEv>:
    2428:	08 95       	ret

0000242a <_ZN7TwoWire16onReceiveServiceEPhi>:
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	ec 01       	movw	r28, r24
    2430:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <_ZN7TwoWire14user_onReceiveE>
    2434:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <_ZN7TwoWire14user_onReceiveE+0x1>
    2438:	30 97       	sbiw	r30, 0x00	; 0
    243a:	f1 f0       	breq	.+60     	; 0x2478 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    243c:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2440:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2444:	98 17       	cp	r25, r24
    2446:	c0 f0       	brcs	.+48     	; 0x2478 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	29 2f       	mov	r18, r25
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	26 17       	cp	r18, r22
    2450:	37 07       	cpc	r19, r23
    2452:	54 f4       	brge	.+20     	; 0x2468 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2454:	de 01       	movw	r26, r28
    2456:	a2 0f       	add	r26, r18
    2458:	b3 1f       	adc	r27, r19
    245a:	4c 91       	ld	r20, X
    245c:	d9 01       	movw	r26, r18
    245e:	af 59       	subi	r26, 0x9F	; 159
    2460:	bb 4f       	sbci	r27, 0xFB	; 251
    2462:	4c 93       	st	X, r20
    2464:	9f 5f       	subi	r25, 0xFF	; 255
    2466:	f1 cf       	rjmp	.-30     	; 0x244a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2468:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    246c:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2470:	cb 01       	movw	r24, r22
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	09 94       	ijmp
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	08 95       	ret

0000247e <_ZN7TwoWire16onRequestServiceEv>:
    247e:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <_ZN7TwoWire14user_onRequestE>
    2482:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <_ZN7TwoWire14user_onRequestE+0x1>
    2486:	30 97       	sbiw	r30, 0x00	; 0
    2488:	29 f0       	breq	.+10     	; 0x2494 <_ZN7TwoWire16onRequestServiceEv+0x16>
    248a:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    248e:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2492:	09 94       	ijmp
    2494:	08 95       	ret

00002496 <_ZN7TwoWire5writeEPKhj>:
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	7c 01       	movw	r14, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8a 01       	movw	r16, r20
    24ac:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN7TwoWire12transmittingE>
    24b0:	22 23       	and	r18, r18
    24b2:	89 f0       	breq	.+34     	; 0x24d6 <_ZN7TwoWire5writeEPKhj+0x40>
    24b4:	eb 01       	movw	r28, r22
    24b6:	6b 01       	movw	r12, r22
    24b8:	c4 0e       	add	r12, r20
    24ba:	d5 1e       	adc	r13, r21
    24bc:	cc 15       	cp	r28, r12
    24be:	dd 05       	cpc	r29, r13
    24c0:	69 f0       	breq	.+26     	; 0x24dc <_ZN7TwoWire5writeEPKhj+0x46>
    24c2:	69 91       	ld	r22, Y+
    24c4:	d7 01       	movw	r26, r14
    24c6:	ed 91       	ld	r30, X+
    24c8:	fc 91       	ld	r31, X
    24ca:	01 90       	ld	r0, Z+
    24cc:	f0 81       	ld	r31, Z
    24ce:	e0 2d       	mov	r30, r0
    24d0:	c7 01       	movw	r24, r14
    24d2:	09 95       	icall
    24d4:	f3 cf       	rjmp	.-26     	; 0x24bc <_ZN7TwoWire5writeEPKhj+0x26>
    24d6:	64 2f       	mov	r22, r20
    24d8:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <twi_transmit>
    24dc:	c8 01       	movw	r24, r16
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	df 90       	pop	r13
    24ec:	cf 90       	pop	r12
    24ee:	08 95       	ret

000024f0 <_ZN7TwoWire5writeEh>:
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	1f 92       	push	r1
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	69 83       	std	Y+1, r22	; 0x01
    24fc:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN7TwoWire12transmittingE>
    2500:	22 23       	and	r18, r18
    2502:	d1 f0       	breq	.+52     	; 0x2538 <_ZN7TwoWire5writeEh+0x48>
    2504:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2508:	20 32       	cpi	r18, 0x20	; 32
    250a:	40 f0       	brcs	.+16     	; 0x251c <_ZN7TwoWire5writeEh+0x2c>
    250c:	21 e0       	ldi	r18, 0x01	; 1
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	fc 01       	movw	r30, r24
    2512:	33 83       	std	Z+3, r19	; 0x03
    2514:	22 83       	std	Z+2, r18	; 0x02
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	15 c0       	rjmp	.+42     	; 0x2546 <_ZN7TwoWire5writeEh+0x56>
    251c:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    2520:	e8 2f       	mov	r30, r24
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	e2 5c       	subi	r30, 0xC2	; 194
    2526:	fb 4f       	sbci	r31, 0xFB	; 251
    2528:	99 81       	ldd	r25, Y+1	; 0x01
    252a:	90 83       	st	Z, r25
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    2532:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    2536:	05 c0       	rjmp	.+10     	; 0x2542 <_ZN7TwoWire5writeEh+0x52>
    2538:	61 e0       	ldi	r22, 0x01	; 1
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <twi_transmit>
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0f 90       	pop	r0
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	08 95       	ret

0000254e <_ZN7TwoWireC1Ev>:
    254e:	fc 01       	movw	r30, r24
    2550:	13 82       	std	Z+3, r1	; 0x03
    2552:	12 82       	std	Z+2, r1	; 0x02
    2554:	88 ee       	ldi	r24, 0xE8	; 232
    2556:	93 e0       	ldi	r25, 0x03	; 3
    2558:	a0 e0       	ldi	r26, 0x00	; 0
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	84 83       	std	Z+4, r24	; 0x04
    255e:	95 83       	std	Z+5, r25	; 0x05
    2560:	a6 83       	std	Z+6, r26	; 0x06
    2562:	b7 83       	std	Z+7, r27	; 0x07
    2564:	8b e6       	ldi	r24, 0x6B	; 107
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	08 95       	ret

0000256e <_ZN7TwoWire5beginEv>:
    256e:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2572:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    2576:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    257a:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    257e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <twi_init>
    2582:	8f e3       	ldi	r24, 0x3F	; 63
    2584:	92 e1       	ldi	r25, 0x12	; 18
    2586:	0e 94 a7 10 	call	0x214e	; 0x214e <twi_attachSlaveTxEvent>
    258a:	85 e1       	ldi	r24, 0x15	; 21
    258c:	92 e1       	ldi	r25, 0x12	; 18
    258e:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <twi_attachSlaveRxEvent>

00002592 <_ZN7TwoWire17beginTransmissionEh>:
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN7TwoWire12transmittingE>
    2598:	60 93 5e 04 	sts	0x045E, r22	; 0x80045e <_ZN7TwoWire9txAddressE>
    259c:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    25a0:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    25a4:	08 95       	ret

000025a6 <_ZN7TwoWire17beginTransmissionEi>:
    25a6:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <_ZN7TwoWire17beginTransmissionEh>

000025aa <_ZN7TwoWire15endTransmissionEh>:
    25aa:	0f 93       	push	r16
    25ac:	06 2f       	mov	r16, r22
    25ae:	21 e0       	ldi	r18, 0x01	; 1
    25b0:	40 91 3c 04 	lds	r20, 0x043C	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    25b4:	6e e3       	ldi	r22, 0x3E	; 62
    25b6:	74 e0       	ldi	r23, 0x04	; 4
    25b8:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZN7TwoWire9txAddressE>
    25bc:	0e 94 24 10 	call	0x2048	; 0x2048 <twi_writeTo>
    25c0:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13txBufferIndexE>
    25c4:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14txBufferLengthE>
    25c8:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZN7TwoWire12transmittingE>
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <_ZN7TwoWire11requestFromEhhmhh>:
    25d0:	4f 92       	push	r4
    25d2:	5f 92       	push	r5
    25d4:	6f 92       	push	r6
    25d6:	7f 92       	push	r7
    25d8:	af 92       	push	r10
    25da:	bf 92       	push	r11
    25dc:	cf 92       	push	r12
    25de:	ef 92       	push	r14
    25e0:	ff 92       	push	r15
    25e2:	0f 93       	push	r16
    25e4:	1f 93       	push	r17
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	5c 01       	movw	r10, r24
    25ec:	f6 2e       	mov	r15, r22
    25ee:	d4 2f       	mov	r29, r20
    25f0:	28 01       	movw	r4, r16
    25f2:	39 01       	movw	r6, r18
    25f4:	ee 20       	and	r14, r14
    25f6:	21 f1       	breq	.+72     	; 0x2640 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    25f8:	0e 94 c9 12 	call	0x2592	; 0x2592 <_ZN7TwoWire17beginTransmissionEh>
    25fc:	ce 2d       	mov	r28, r14
    25fe:	c4 30       	cpi	r28, 0x04	; 4
    2600:	08 f0       	brcs	.+2      	; 0x2604 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2602:	c3 e0       	ldi	r28, 0x03	; 3
    2604:	c1 50       	subi	r28, 0x01	; 1
    2606:	c0 f0       	brcs	.+48     	; 0x2638 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2608:	28 e0       	ldi	r18, 0x08	; 8
    260a:	c2 9f       	mul	r28, r18
    260c:	c0 01       	movw	r24, r0
    260e:	11 24       	eor	r1, r1
    2610:	a3 01       	movw	r20, r6
    2612:	92 01       	movw	r18, r4
    2614:	04 c0       	rjmp	.+8      	; 0x261e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2616:	56 95       	lsr	r21
    2618:	47 95       	ror	r20
    261a:	37 95       	ror	r19
    261c:	27 95       	ror	r18
    261e:	8a 95       	dec	r24
    2620:	d2 f7       	brpl	.-12     	; 0x2616 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2622:	ca 01       	movw	r24, r20
    2624:	b9 01       	movw	r22, r18
    2626:	d5 01       	movw	r26, r10
    2628:	ed 91       	ld	r30, X+
    262a:	fc 91       	ld	r31, X
    262c:	01 90       	ld	r0, Z+
    262e:	f0 81       	ld	r31, Z
    2630:	e0 2d       	mov	r30, r0
    2632:	c5 01       	movw	r24, r10
    2634:	09 95       	icall
    2636:	e6 cf       	rjmp	.-52     	; 0x2604 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	c5 01       	movw	r24, r10
    263c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <_ZN7TwoWire15endTransmissionEh>
    2640:	4d 2f       	mov	r20, r29
    2642:	d1 32       	cpi	r29, 0x21	; 33
    2644:	08 f0       	brcs	.+2      	; 0x2648 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	2c 2d       	mov	r18, r12
    264a:	61 e6       	ldi	r22, 0x61	; 97
    264c:	74 e0       	ldi	r23, 0x04	; 4
    264e:	8f 2d       	mov	r24, r15
    2650:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <twi_readFrom>
    2654:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    2658:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <_ZN7TwoWire14rxBufferLengthE>
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	ff 90       	pop	r15
    2666:	ef 90       	pop	r14
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	7f 90       	pop	r7
    2670:	6f 90       	pop	r6
    2672:	5f 90       	pop	r5
    2674:	4f 90       	pop	r4
    2676:	08 95       	ret

00002678 <_ZN7TwoWire11requestFromEhhh>:
    2678:	cf 92       	push	r12
    267a:	ef 92       	push	r14
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	c2 2e       	mov	r12, r18
    2682:	e1 2c       	mov	r14, r1
    2684:	00 e0       	ldi	r16, 0x00	; 0
    2686:	10 e0       	ldi	r17, 0x00	; 0
    2688:	98 01       	movw	r18, r16
    268a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZN7TwoWire11requestFromEhhmhh>
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ef 90       	pop	r14
    2694:	cf 90       	pop	r12
    2696:	08 95       	ret

00002698 <_ZN7TwoWire11requestFromEii>:
    2698:	21 e0       	ldi	r18, 0x01	; 1
    269a:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <_ZN7TwoWire11requestFromEhhh>

0000269e <_ZN7TwoWire15endTransmissionEv>:
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <_ZN7TwoWire15endTransmissionEh>

000026a4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    26a4:	8b e2       	ldi	r24, 0x2B	; 43
    26a6:	94 e0       	ldi	r25, 0x04	; 4
    26a8:	0c 94 a7 12 	jmp	0x254e	; 0x254e <_ZN7TwoWireC1Ev>

000026ac <_Z13encodeIntTesth>:

//RMonV3 types/flags test

#if IS_EXTENDED_TYPES_TEST == true

void encodeIntTest(uint8_t i) {
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	65 97       	sbiw	r28, 0x15	; 21
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	f8 2e       	mov	r15, r24
	
	uint8_t input[1];
	input[0] = i;
    26ca:	8d 8b       	std	Y+21, r24	; 0x15
		
	char output2[10]{0};
    26cc:	8a e0       	ldi	r24, 0x0A	; 10
    26ce:	e8 2e       	mov	r14, r24
    26d0:	8e 01       	movw	r16, r28
    26d2:	05 5f       	subi	r16, 0xF5	; 245
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	f8 01       	movw	r30, r16
    26d8:	8e 2d       	mov	r24, r14
    26da:	11 92       	st	Z+, r1
    26dc:	8a 95       	dec	r24
    26de:	e9 f7       	brne	.-6      	; 0x26da <_Z13encodeIntTesth+0x2e>
	Helpers::base64_encode(&output2[0], (uint8_t*)&input, 1);
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	be 01       	movw	r22, r28
    26e6:	6b 5e       	subi	r22, 0xEB	; 235
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	c8 01       	movw	r24, r16
    26ec:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN7Helpers13base64_encodeEPcPhi>
		
	uint8_t output3[10]{0};
    26f0:	ce 01       	movw	r24, r28
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	fc 01       	movw	r30, r24
    26f6:	11 92       	st	Z+, r1
    26f8:	ea 94       	dec	r14
    26fa:	e9 f7       	brne	.-6      	; 0x26f6 <_Z13encodeIntTesth+0x4a>
	Helpers::base64_decode((uint8_t*)&output3, &output2[0], 10);
    26fc:	4a e0       	ldi	r20, 0x0A	; 10
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	b8 01       	movw	r22, r16
    2702:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_ZN7Helpers13base64_decodeEPhPci>
		
	if ((uint8_t)output3[0] != i) RM_LOGLN(F("*** INT ENC FAIL @1 ***"));
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	f8 16       	cp	r15, r24
    270a:	31 f0       	breq	.+12     	; 0x2718 <_Z13encodeIntTesth+0x6c>
    270c:	6f eb       	ldi	r22, 0xBF	; 191
    270e:	77 e0       	ldi	r23, 0x07	; 7
    2710:	81 e8       	ldi	r24, 0x81	; 129
    2712:	94 e0       	ldi	r25, 0x04	; 4
    2714:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ((uint8_t)output3[1] != 0) RM_LOGLN(F("*** INT ENC FAIL @2 ***")); //Overflow
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	88 23       	and	r24, r24
    271c:	31 f0       	breq	.+12     	; 0x272a <_Z13encodeIntTesth+0x7e>
    271e:	67 ea       	ldi	r22, 0xA7	; 167
    2720:	77 e0       	ldi	r23, 0x07	; 7
    2722:	81 e8       	ldi	r24, 0x81	; 129
    2724:	94 e0       	ldi	r25, 0x04	; 4
    2726:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    272a:	65 96       	adiw	r28, 0x15	; 21
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	08 95       	ret

00002744 <_Z13encodeStrTestPcS_>:

void encodeStrTest(char* encVal, char* decVal) {
    2744:	af 92       	push	r10
    2746:	bf 92       	push	r11
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	a8 97       	sbiw	r28, 0x28	; 40
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	8c 01       	movw	r16, r24
    276a:	5b 01       	movw	r10, r22
	
	int inputLen = strlen(encVal);
    276c:	fc 01       	movw	r30, r24
    276e:	01 90       	ld	r0, Z+
    2770:	00 20       	and	r0, r0
    2772:	e9 f7       	brne	.-6      	; 0x276e <_Z13encodeStrTestPcS_+0x2a>
    2774:	31 97       	sbiw	r30, 0x01	; 1
    2776:	6f 01       	movw	r12, r30
    2778:	c8 1a       	sub	r12, r24
    277a:	d9 0a       	sbc	r13, r25
	int decodeLen = strlen(decVal);
    277c:	fb 01       	movw	r30, r22
    277e:	01 90       	ld	r0, Z+
    2780:	00 20       	and	r0, r0
    2782:	e9 f7       	brne	.-6      	; 0x277e <_Z13encodeStrTestPcS_+0x3a>
    2784:	31 97       	sbiw	r30, 0x01	; 1
    2786:	7f 01       	movw	r14, r30
    2788:	e6 1a       	sub	r14, r22
    278a:	f7 0a       	sbc	r15, r23
	
	RM_LOG2("Running Test For ", encVal);
    278c:	67 e7       	ldi	r22, 0x77	; 119
    278e:	71 e0       	ldi	r23, 0x01	; 1
    2790:	81 e8       	ldi	r24, 0x81	; 129
    2792:	94 e0       	ldi	r25, 0x04	; 4
    2794:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    2798:	66 e4       	ldi	r22, 0x46	; 70
    279a:	71 e0       	ldi	r23, 0x01	; 1
    279c:	81 e8       	ldi	r24, 0x81	; 129
    279e:	94 e0       	ldi	r25, 0x04	; 4
    27a0:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    27a4:	b8 01       	movw	r22, r16
    27a6:	81 e8       	ldi	r24, 0x81	; 129
    27a8:	94 e0       	ldi	r25, 0x04	; 4
    27aa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
	int encLen = Helpers::base64_enc_len(inputLen); //No@terminal char
    27ae:	c6 01       	movw	r24, r12
    27b0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN7Helpers14base64_enc_lenEi>
	if (encLen != strlen(decVal)+1) RM_LOGLN(F("*** STR ENC FAIL @1 ***"));
    27b4:	f5 01       	movw	r30, r10
    27b6:	01 90       	ld	r0, Z+
    27b8:	00 20       	and	r0, r0
    27ba:	e9 f7       	brne	.-6      	; 0x27b6 <_Z13encodeStrTestPcS_+0x72>
    27bc:	9f 01       	movw	r18, r30
    27be:	2a 19       	sub	r18, r10
    27c0:	3b 09       	sbc	r19, r11
    27c2:	28 17       	cp	r18, r24
    27c4:	39 07       	cpc	r19, r25
    27c6:	31 f0       	breq	.+12     	; 0x27d4 <_Z13encodeStrTestPcS_+0x90>
    27c8:	6f e8       	ldi	r22, 0x8F	; 143
    27ca:	77 e0       	ldi	r23, 0x07	; 7
    27cc:	81 e8       	ldi	r24, 0x81	; 129
    27ce:	94 e0       	ldi	r25, 0x04	; 4
    27d0:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
	char strEncoded[20];
	Helpers::fillArray((uint8_t*)strEncoded, sizeof(strEncoded), 1); //Extra buffer of 1s to test no overspill
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	64 e1       	ldi	r22, 0x14	; 20
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	ce 01       	movw	r24, r28
    27dc:	45 96       	adiw	r24, 0x15	; 21
    27de:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN7Helpers9fillArrayEPhjh>

	int strEncodedLen = Helpers::base64_encode(strEncoded, (uint8_t*)encVal, inputLen);
    27e2:	a6 01       	movw	r20, r12
    27e4:	b8 01       	movw	r22, r16
    27e6:	ce 01       	movw	r24, r28
    27e8:	45 96       	adiw	r24, 0x15	; 21
    27ea:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN7Helpers13base64_encodeEPcPhi>
	
	if (strEncodedLen != strlen(decVal)+1) RM_LOGLN(F("*** STR ENC FAIL @2 ***")); //Yes@terminal char
    27ee:	f5 01       	movw	r30, r10
    27f0:	01 90       	ld	r0, Z+
    27f2:	00 20       	and	r0, r0
    27f4:	e9 f7       	brne	.-6      	; 0x27f0 <_Z13encodeStrTestPcS_+0xac>
    27f6:	9f 01       	movw	r18, r30
    27f8:	2a 19       	sub	r18, r10
    27fa:	3b 09       	sbc	r19, r11
    27fc:	28 17       	cp	r18, r24
    27fe:	39 07       	cpc	r19, r25
    2800:	31 f0       	breq	.+12     	; 0x280e <_Z13encodeStrTestPcS_+0xca>
    2802:	67 e7       	ldi	r22, 0x77	; 119
    2804:	77 e0       	ldi	r23, 0x07	; 7
    2806:	81 e8       	ldi	r24, 0x81	; 129
    2808:	94 e0       	ldi	r25, 0x04	; 4
    280a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (decVal[decodeLen-1] != strEncoded[decodeLen-1]) RM_LOGLN(F("*** STR ENC FAIL @3 ***"));
    280e:	f5 01       	movw	r30, r10
    2810:	ee 0d       	add	r30, r14
    2812:	ff 1d       	adc	r31, r15
    2814:	31 97       	sbiw	r30, 0x01	; 1
    2816:	90 81       	ld	r25, Z
    2818:	fe 01       	movw	r30, r28
    281a:	ee 0d       	add	r30, r14
    281c:	ff 1d       	adc	r31, r15
    281e:	84 89       	ldd	r24, Z+20	; 0x14
    2820:	98 17       	cp	r25, r24
    2822:	31 f0       	breq	.+12     	; 0x2830 <_Z13encodeStrTestPcS_+0xec>
    2824:	6f e5       	ldi	r22, 0x5F	; 95
    2826:	77 e0       	ldi	r23, 0x07	; 7
    2828:	81 e8       	ldi	r24, 0x81	; 129
    282a:	94 e0       	ldi	r25, 0x04	; 4
    282c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (0 != strEncoded[decodeLen]) RM_LOGLN(F("*** STR ENC FAIL @4 ***"));
    2830:	e5 e1       	ldi	r30, 0x15	; 21
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	ec 0f       	add	r30, r28
    2836:	fd 1f       	adc	r31, r29
    2838:	ee 0d       	add	r30, r14
    283a:	ff 1d       	adc	r31, r15
    283c:	80 81       	ld	r24, Z
    283e:	88 23       	and	r24, r24
    2840:	31 f0       	breq	.+12     	; 0x284e <_Z13encodeStrTestPcS_+0x10a>
    2842:	67 e4       	ldi	r22, 0x47	; 71
    2844:	77 e0       	ldi	r23, 0x07	; 7
    2846:	81 e8       	ldi	r24, 0x81	; 129
    2848:	94 e0       	ldi	r25, 0x04	; 4
    284a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (1 != strEncoded[decodeLen+1]) RM_LOGLN(F("*** STR ENC FAIL @5 ***")); //May have overwritten
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	e8 1a       	sub	r14, r24
    2852:	f8 0a       	sbc	r15, r24
    2854:	e5 e1       	ldi	r30, 0x15	; 21
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	ec 0f       	add	r30, r28
    285a:	fd 1f       	adc	r31, r29
    285c:	ee 0d       	add	r30, r14
    285e:	ff 1d       	adc	r31, r15
    2860:	80 81       	ld	r24, Z
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	31 f0       	breq	.+12     	; 0x2872 <_Z13encodeStrTestPcS_+0x12e>
    2866:	6f e2       	ldi	r22, 0x2F	; 47
    2868:	77 e0       	ldi	r23, 0x07	; 7
    286a:	81 e8       	ldi	r24, 0x81	; 129
    286c:	94 e0       	ldi	r25, 0x04	; 4
    286e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
	int expStrDecodingLen = Helpers::base64_dec_len(decVal, decodeLen+1);
    2872:	b7 01       	movw	r22, r14
    2874:	c5 01       	movw	r24, r10
    2876:	0e 94 75 0b 	call	0x16ea	; 0x16ea <_ZN7Helpers14base64_dec_lenEPci>
	if (expStrDecodingLen != strlen(encVal)) RM_LOGLN(F("*** STR DEC FAIL @1 ***")); //No@terminal char
    287a:	f8 01       	movw	r30, r16
    287c:	01 90       	ld	r0, Z+
    287e:	00 20       	and	r0, r0
    2880:	e9 f7       	brne	.-6      	; 0x287c <_Z13encodeStrTestPcS_+0x138>
    2882:	31 97       	sbiw	r30, 0x01	; 1
    2884:	e0 1b       	sub	r30, r16
    2886:	f1 0b       	sbc	r31, r17
    2888:	e8 17       	cp	r30, r24
    288a:	f9 07       	cpc	r31, r25
    288c:	31 f0       	breq	.+12     	; 0x289a <_Z13encodeStrTestPcS_+0x156>
    288e:	67 e1       	ldi	r22, 0x17	; 23
    2890:	77 e0       	ldi	r23, 0x07	; 7
    2892:	81 e8       	ldi	r24, 0x81	; 129
    2894:	94 e0       	ldi	r25, 0x04	; 4
    2896:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
	char strDecoded[20];
	Helpers::fillArray((uint8_t*)strDecoded, sizeof(strDecoded), 1); //Extra buffer of 1s to test no overspill
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	64 e1       	ldi	r22, 0x14	; 20
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	ce 01       	movw	r24, r28
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN7Helpers9fillArrayEPhjh>
		
	int strDecodedLen = Helpers::base64_decode((uint8_t*)strDecoded, decVal, decodeLen+1);
    28a8:	a7 01       	movw	r20, r14
    28aa:	b5 01       	movw	r22, r10
    28ac:	ce 01       	movw	r24, r28
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_ZN7Helpers13base64_decodeEPhPci>
	if (strDecodedLen != strlen(encVal)) RM_LOGLN(F("*** STR DEC FAIL @2 ***")); //No@terminal char
    28b4:	f8 01       	movw	r30, r16
    28b6:	01 90       	ld	r0, Z+
    28b8:	00 20       	and	r0, r0
    28ba:	e9 f7       	brne	.-6      	; 0x28b6 <_Z13encodeStrTestPcS_+0x172>
    28bc:	31 97       	sbiw	r30, 0x01	; 1
    28be:	e0 1b       	sub	r30, r16
    28c0:	f1 0b       	sbc	r31, r17
    28c2:	e8 17       	cp	r30, r24
    28c4:	f9 07       	cpc	r31, r25
    28c6:	31 f0       	breq	.+12     	; 0x28d4 <_Z13encodeStrTestPcS_+0x190>
    28c8:	6f ef       	ldi	r22, 0xFF	; 255
    28ca:	76 e0       	ldi	r23, 0x06	; 6
    28cc:	81 e8       	ldi	r24, 0x81	; 129
    28ce:	94 e0       	ldi	r25, 0x04	; 4
    28d0:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (encVal[inputLen-1] != strDecoded[inputLen-1]) RM_LOGLN(F("*** STR DEC FAIL @3 ***"));
    28d4:	0c 0d       	add	r16, r12
    28d6:	1d 1d       	adc	r17, r13
    28d8:	f8 01       	movw	r30, r16
    28da:	31 97       	sbiw	r30, 0x01	; 1
    28dc:	de 01       	movw	r26, r28
    28de:	ac 0d       	add	r26, r12
    28e0:	bd 1d       	adc	r27, r13
    28e2:	90 81       	ld	r25, Z
    28e4:	8c 91       	ld	r24, X
    28e6:	98 17       	cp	r25, r24
    28e8:	31 f0       	breq	.+12     	; 0x28f6 <_Z13encodeStrTestPcS_+0x1b2>
    28ea:	67 ee       	ldi	r22, 0xE7	; 231
    28ec:	76 e0       	ldi	r23, 0x06	; 6
    28ee:	81 e8       	ldi	r24, 0x81	; 129
    28f0:	94 e0       	ldi	r25, 0x04	; 4
    28f2:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (1 != strDecoded[inputLen]) RM_LOGLN(F("*** STR DEC FAIL @4 ***")); //May have introduced \0, WRONG
    28f6:	e1 e0       	ldi	r30, 0x01	; 1
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	ec 0f       	add	r30, r28
    28fc:	fd 1f       	adc	r31, r29
    28fe:	ec 0d       	add	r30, r12
    2900:	fd 1d       	adc	r31, r13
    2902:	80 81       	ld	r24, Z
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	31 f0       	breq	.+12     	; 0x2914 <_Z13encodeStrTestPcS_+0x1d0>
    2908:	6f ec       	ldi	r22, 0xCF	; 207
    290a:	76 e0       	ldi	r23, 0x06	; 6
    290c:	81 e8       	ldi	r24, 0x81	; 129
    290e:	94 e0       	ldi	r25, 0x04	; 4
    2910:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    2914:	a8 96       	adiw	r28, 0x28	; 40
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	08 95       	ret

00002936 <_Z22encodeSingleSensorTestv>:

void encodeSingleSensorTest(){
    2936:	cf 92       	push	r12
    2938:	df 92       	push	r13
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	c8 57       	subi	r28, 0x78	; 120
    294c:	d1 09       	sbc	r29, r1
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
	
	SensorData sd;			//size ~ 10 bytes
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	e0 96       	adiw	r28, 0x30	; 48
    295c:	8f af       	std	Y+63, r24	; 0x3f
    295e:	e0 97       	sbiw	r28, 0x30	; 48
    2960:	e8 96       	adiw	r28, 0x38	; 56
    2962:	1f ae       	std	Y+63, r1	; 0x3f
    2964:	1e ae       	std	Y+62, r1	; 0x3e
    2966:	e8 97       	sbiw	r28, 0x38	; 56
	sd.battVoltage = 20245; //Includes mV - e.g. 20.245V
    2968:	85 e1       	ldi	r24, 0x15	; 21
    296a:	9f e4       	ldi	r25, 0x4F	; 79
    296c:	e2 96       	adiw	r28, 0x32	; 50
    296e:	9f af       	std	Y+63, r25	; 0x3f
    2970:	8e af       	std	Y+62, r24	; 0x3e
    2972:	e2 97       	sbiw	r28, 0x32	; 50
	sd.current = 65535;
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	9f ef       	ldi	r25, 0xFF	; 255
    2978:	e4 96       	adiw	r28, 0x34	; 52
    297a:	9f af       	std	Y+63, r25	; 0x3f
    297c:	8e af       	std	Y+62, r24	; 0x3e
    297e:	e4 97       	sbiw	r28, 0x34	; 52
	sd.errorChar = 3;
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	e9 96       	adiw	r28, 0x39	; 57
    2984:	8f af       	std	Y+63, r24	; 0x3f
    2986:	e9 97       	sbiw	r28, 0x39	; 57
	sd.pVVoltage = 64913;
    2988:	81 e9       	ldi	r24, 0x91	; 145
    298a:	9d ef       	ldi	r25, 0xFD	; 253
    298c:	e6 96       	adiw	r28, 0x36	; 54
    298e:	9f af       	std	Y+63, r25	; 0x3f
    2990:	8e af       	std	Y+62, r24	; 0x3e
    2992:	e6 97       	sbiw	r28, 0x36	; 54
	sd.temperature = 0;
	Helpers::printSensorData(&sd);
    2994:	ce 01       	movw	r24, r28
    2996:	81 59       	subi	r24, 0x91	; 145
    2998:	9f 4f       	sbci	r25, 0xFF	; 255
    299a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	uint8_t typicalMemUsage = sizeof("20245-65535-3-64913-0"); //23 bytes
	RM_LOG2("Basic int->str usage would be", typicalMemUsage);
    299e:	69 e8       	ldi	r22, 0x89	; 137
    29a0:	71 e0       	ldi	r23, 0x01	; 1
    29a2:	81 e8       	ldi	r24, 0x81	; 129
    29a4:	94 e0       	ldi	r25, 0x04	; 4
    29a6:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    29aa:	66 e4       	ldi	r22, 0x46	; 70
    29ac:	71 e0       	ldi	r23, 0x01	; 1
    29ae:	81 e8       	ldi	r24, 0x81	; 129
    29b0:	94 e0       	ldi	r25, 0x04	; 4
    29b2:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    29b6:	4a e0       	ldi	r20, 0x0A	; 10
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	66 e1       	ldi	r22, 0x16	; 22
    29bc:	81 e8       	ldi	r24, 0x81	; 129
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
	
	// ENCODING
	char output[100]; //For testing, make a large buffer and check it doesn't overspill
	int len = Helpers::base64_encode(output, (uint8_t*)&sd, sizeof(SensorData));
    29c4:	4a e0       	ldi	r20, 0x0A	; 10
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	be 01       	movw	r22, r28
    29ca:	61 59       	subi	r22, 0x91	; 145
    29cc:	7f 4f       	sbci	r23, 0xFF	; 255
    29ce:	8e 01       	movw	r16, r28
    29d0:	0f 5f       	subi	r16, 0xFF	; 255
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	c8 01       	movw	r24, r16
    29d6:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN7Helpers13base64_encodeEPcPhi>
    29da:	7c 01       	movw	r14, r24
	int expectedLen = Helpers::base64_enc_len(sizeof(SensorData));
    29dc:	8a e0       	ldi	r24, 0x0A	; 10
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN7Helpers14base64_enc_lenEi>
    29e4:	6c 01       	movw	r12, r24
	RM_LOG("Encoded result to be sent over Web is ");
    29e6:	67 ea       	ldi	r22, 0xA7	; 167
    29e8:	71 e0       	ldi	r23, 0x01	; 1
    29ea:	81 e8       	ldi	r24, 0x81	; 129
    29ec:	94 e0       	ldi	r25, 0x04	; 4
    29ee:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
	RM_LOGLN(output);
    29f2:	b8 01       	movw	r22, r16
    29f4:	81 e8       	ldi	r24, 0x81	; 129
    29f6:	94 e0       	ldi	r25, 0x04	; 4
    29f8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
	RM_LOG("\t with size of ");
    29fc:	6e ec       	ldi	r22, 0xCE	; 206
    29fe:	71 e0       	ldi	r23, 0x01	; 1
    2a00:	81 e8       	ldi	r24, 0x81	; 129
    2a02:	94 e0       	ldi	r25, 0x04	; 4
    2a04:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
	RM_LOG(strlen(output)+1);
    2a08:	f8 01       	movw	r30, r16
    2a0a:	01 90       	ld	r0, Z+
    2a0c:	00 20       	and	r0, r0
    2a0e:	e9 f7       	brne	.-6      	; 0x2a0a <_Z22encodeSingleSensorTestv+0xd4>
    2a10:	bf 01       	movw	r22, r30
    2a12:	60 1b       	sub	r22, r16
    2a14:	71 0b       	sbc	r23, r17
    2a16:	4a e0       	ldi	r20, 0x0A	; 10
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	81 e8       	ldi	r24, 0x81	; 129
    2a1c:	94 e0       	ldi	r25, 0x04	; 4
    2a1e:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print5printEji>
	RM_LOGLN(" (including terminating '0')");
    2a22:	6e ed       	ldi	r22, 0xDE	; 222
    2a24:	71 e0       	ldi	r23, 0x01	; 1
    2a26:	81 e8       	ldi	r24, 0x81	; 129
    2a28:	94 e0       	ldi	r25, 0x04	; 4
    2a2a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPKc>
	if ((strlen(output)+1) != len) RM_LOGLN(F("*** ENC LEN FAIL @1 ***"));
    2a2e:	f8 01       	movw	r30, r16
    2a30:	01 90       	ld	r0, Z+
    2a32:	00 20       	and	r0, r0
    2a34:	e9 f7       	brne	.-6      	; 0x2a30 <_Z22encodeSingleSensorTestv+0xfa>
    2a36:	cf 01       	movw	r24, r30
    2a38:	80 1b       	sub	r24, r16
    2a3a:	91 0b       	sbc	r25, r17
    2a3c:	8e 15       	cp	r24, r14
    2a3e:	9f 05       	cpc	r25, r15
    2a40:	31 f0       	breq	.+12     	; 0x2a4e <_Z22encodeSingleSensorTestv+0x118>
    2a42:	67 eb       	ldi	r22, 0xB7	; 183
    2a44:	76 e0       	ldi	r23, 0x06	; 6
    2a46:	81 e8       	ldi	r24, 0x81	; 129
    2a48:	94 e0       	ldi	r25, 0x04	; 4
    2a4a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ((strlen(output)+1) != expectedLen) RM_LOGLN(F("*** ENC LEN FAIL @2 ***"));
    2a4e:	f8 01       	movw	r30, r16
    2a50:	01 90       	ld	r0, Z+
    2a52:	00 20       	and	r0, r0
    2a54:	e9 f7       	brne	.-6      	; 0x2a50 <_Z22encodeSingleSensorTestv+0x11a>
    2a56:	cf 01       	movw	r24, r30
    2a58:	80 1b       	sub	r24, r16
    2a5a:	91 0b       	sbc	r25, r17
    2a5c:	8c 15       	cp	r24, r12
    2a5e:	9d 05       	cpc	r25, r13
    2a60:	31 f0       	breq	.+12     	; 0x2a6e <_Z22encodeSingleSensorTestv+0x138>
    2a62:	6f e9       	ldi	r22, 0x9F	; 159
    2a64:	76 e0       	ldi	r23, 0x06	; 6
    2a66:	81 e8       	ldi	r24, 0x81	; 129
    2a68:	94 e0       	ldi	r25, 0x04	; 4
    2a6a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// DECODING
	SensorData sdAfter;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	a6 96       	adiw	r28, 0x26	; 38
    2a72:	8f af       	std	Y+63, r24	; 0x3f
    2a74:	a6 97       	sbiw	r28, 0x26	; 38
    2a76:	a8 96       	adiw	r28, 0x28	; 40
    2a78:	1f ae       	std	Y+63, r1	; 0x3f
    2a7a:	1e ae       	std	Y+62, r1	; 0x3e
    2a7c:	a8 97       	sbiw	r28, 0x28	; 40
    2a7e:	aa 96       	adiw	r28, 0x2a	; 42
    2a80:	1f ae       	std	Y+63, r1	; 0x3f
    2a82:	1e ae       	std	Y+62, r1	; 0x3e
    2a84:	aa 97       	sbiw	r28, 0x2a	; 42
    2a86:	ac 96       	adiw	r28, 0x2c	; 44
    2a88:	1f ae       	std	Y+63, r1	; 0x3f
    2a8a:	1e ae       	std	Y+62, r1	; 0x3e
    2a8c:	ac 97       	sbiw	r28, 0x2c	; 44
    2a8e:	ae 96       	adiw	r28, 0x2e	; 46
    2a90:	1f ae       	std	Y+63, r1	; 0x3f
    2a92:	1e ae       	std	Y+62, r1	; 0x3e
    2a94:	ae 97       	sbiw	r28, 0x2e	; 46
    2a96:	af 96       	adiw	r28, 0x2f	; 47
    2a98:	1f ae       	std	Y+63, r1	; 0x3f
    2a9a:	af 97       	sbiw	r28, 0x2f	; 47
	int expDecodingLen = Helpers::base64_dec_len(output, len);
    2a9c:	b7 01       	movw	r22, r14
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <_ZN7Helpers14base64_dec_lenEPci>
    2aa4:	6c 01       	movw	r12, r24
	int lenAfter = Helpers::base64_decode((uint8_t*)&sdAfter, output, len);
    2aa6:	a7 01       	movw	r20, r14
    2aa8:	b8 01       	movw	r22, r16
    2aaa:	ce 01       	movw	r24, r28
    2aac:	8b 59       	subi	r24, 0x9B	; 155
    2aae:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_ZN7Helpers13base64_decodeEPhPci>
    2ab4:	8c 01       	movw	r16, r24
	RM_LOG2("Decoded result received over Web has size of ", lenAfter);
    2ab6:	6b ef       	ldi	r22, 0xFB	; 251
    2ab8:	71 e0       	ldi	r23, 0x01	; 1
    2aba:	81 e8       	ldi	r24, 0x81	; 129
    2abc:	94 e0       	ldi	r25, 0x04	; 4
    2abe:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    2ac2:	66 e4       	ldi	r22, 0x46	; 70
    2ac4:	71 e0       	ldi	r23, 0x01	; 1
    2ac6:	81 e8       	ldi	r24, 0x81	; 129
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    2ace:	4a e0       	ldi	r20, 0x0A	; 10
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	b8 01       	movw	r22, r16
    2ad4:	81 e8       	ldi	r24, 0x81	; 129
    2ad6:	94 e0       	ldi	r25, 0x04	; 4
    2ad8:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN5Print7printlnEii>
	Helpers::printSensorData(&sdAfter);
    2adc:	ce 01       	movw	r24, r28
    2ade:	8b 59       	subi	r24, 0x9B	; 155
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	if (sizeof(SensorData) != lenAfter) RM_LOGLN(F("*** DEC LEN FAIL @1 ***"));
    2ae6:	0a 30       	cpi	r16, 0x0A	; 10
    2ae8:	11 05       	cpc	r17, r1
    2aea:	31 f0       	breq	.+12     	; 0x2af8 <_Z22encodeSingleSensorTestv+0x1c2>
    2aec:	67 e8       	ldi	r22, 0x87	; 135
    2aee:	76 e0       	ldi	r23, 0x06	; 6
    2af0:	81 e8       	ldi	r24, 0x81	; 129
    2af2:	94 e0       	ldi	r25, 0x04	; 4
    2af4:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sizeof(SensorData) != expDecodingLen) RM_LOGLN(F("*** DEC LEN FAIL @2 ***"));
    2af8:	8a e0       	ldi	r24, 0x0A	; 10
    2afa:	c8 16       	cp	r12, r24
    2afc:	d1 04       	cpc	r13, r1
    2afe:	31 f0       	breq	.+12     	; 0x2b0c <_Z22encodeSingleSensorTestv+0x1d6>
    2b00:	6f e6       	ldi	r22, 0x6F	; 111
    2b02:	76 e0       	ldi	r23, 0x06	; 6
    2b04:	81 e8       	ldi	r24, 0x81	; 129
    2b06:	94 e0       	ldi	r25, 0x04	; 4
    2b08:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (sdAfter.battVoltage != sd.battVoltage) RM_LOGLN(F("*** CMP TEST FAIL @1 ***"));
    2b0c:	a8 96       	adiw	r28, 0x28	; 40
    2b0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b10:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b12:	a8 97       	sbiw	r28, 0x28	; 40
    2b14:	e2 96       	adiw	r28, 0x32	; 50
    2b16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b1a:	e2 97       	sbiw	r28, 0x32	; 50
    2b1c:	28 17       	cp	r18, r24
    2b1e:	39 07       	cpc	r19, r25
    2b20:	31 f0       	breq	.+12     	; 0x2b2e <_Z22encodeSingleSensorTestv+0x1f8>
    2b22:	66 e5       	ldi	r22, 0x56	; 86
    2b24:	76 e0       	ldi	r23, 0x06	; 6
    2b26:	81 e8       	ldi	r24, 0x81	; 129
    2b28:	94 e0       	ldi	r25, 0x04	; 4
    2b2a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.current != sd.current) RM_LOGLN(F("*** CMP TEST FAIL @2 ***"));
    2b2e:	aa 96       	adiw	r28, 0x2a	; 42
    2b30:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b32:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b34:	aa 97       	sbiw	r28, 0x2a	; 42
    2b36:	e4 96       	adiw	r28, 0x34	; 52
    2b38:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b3c:	e4 97       	sbiw	r28, 0x34	; 52
    2b3e:	28 17       	cp	r18, r24
    2b40:	39 07       	cpc	r19, r25
    2b42:	31 f0       	breq	.+12     	; 0x2b50 <_Z22encodeSingleSensorTestv+0x21a>
    2b44:	6d e3       	ldi	r22, 0x3D	; 61
    2b46:	76 e0       	ldi	r23, 0x06	; 6
    2b48:	81 e8       	ldi	r24, 0x81	; 129
    2b4a:	94 e0       	ldi	r25, 0x04	; 4
    2b4c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.errorChar != sd.errorChar) RM_LOGLN(F("*** CMP TEST FAIL @3 ***"));
    2b50:	af 96       	adiw	r28, 0x2f	; 47
    2b52:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b54:	af 97       	sbiw	r28, 0x2f	; 47
    2b56:	e9 96       	adiw	r28, 0x39	; 57
    2b58:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b5a:	e9 97       	sbiw	r28, 0x39	; 57
    2b5c:	98 17       	cp	r25, r24
    2b5e:	31 f0       	breq	.+12     	; 0x2b6c <_Z22encodeSingleSensorTestv+0x236>
    2b60:	64 e2       	ldi	r22, 0x24	; 36
    2b62:	76 e0       	ldi	r23, 0x06	; 6
    2b64:	81 e8       	ldi	r24, 0x81	; 129
    2b66:	94 e0       	ldi	r25, 0x04	; 4
    2b68:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.pVVoltage != sd.pVVoltage) RM_LOGLN(F("*** CMP TEST FAIL @4 ***"));
    2b6c:	ac 96       	adiw	r28, 0x2c	; 44
    2b6e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b70:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b72:	ac 97       	sbiw	r28, 0x2c	; 44
    2b74:	e6 96       	adiw	r28, 0x36	; 54
    2b76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b78:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b7a:	e6 97       	sbiw	r28, 0x36	; 54
    2b7c:	28 17       	cp	r18, r24
    2b7e:	39 07       	cpc	r19, r25
    2b80:	31 f0       	breq	.+12     	; 0x2b8e <_Z22encodeSingleSensorTestv+0x258>
    2b82:	6b e0       	ldi	r22, 0x0B	; 11
    2b84:	76 e0       	ldi	r23, 0x06	; 6
    2b86:	81 e8       	ldi	r24, 0x81	; 129
    2b88:	94 e0       	ldi	r25, 0x04	; 4
    2b8a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.temperature != sd.temperature) RM_LOGLN(F("*** CMP TEST FAIL @5 ***"));
    2b8e:	ae 96       	adiw	r28, 0x2e	; 46
    2b90:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b92:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b94:	ae 97       	sbiw	r28, 0x2e	; 46
    2b96:	e8 96       	adiw	r28, 0x38	; 56
    2b98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b9c:	e8 97       	sbiw	r28, 0x38	; 56
    2b9e:	28 17       	cp	r18, r24
    2ba0:	39 07       	cpc	r19, r25
    2ba2:	31 f0       	breq	.+12     	; 0x2bb0 <_Z22encodeSingleSensorTestv+0x27a>
    2ba4:	62 ef       	ldi	r22, 0xF2	; 242
    2ba6:	75 e0       	ldi	r23, 0x05	; 5
    2ba8:	81 e8       	ldi	r24, 0x81	; 129
    2baa:	94 e0       	ldi	r25, 0x04	; 4
    2bac:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.dataType != sd.dataType) RM_LOGLN(F("*** CMP TEST FAIL @6 ***"));
    2bb0:	a6 96       	adiw	r28, 0x26	; 38
    2bb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bb4:	a6 97       	sbiw	r28, 0x26	; 38
    2bb6:	e0 96       	adiw	r28, 0x30	; 48
    2bb8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bba:	e0 97       	sbiw	r28, 0x30	; 48
    2bbc:	98 17       	cp	r25, r24
    2bbe:	31 f0       	breq	.+12     	; 0x2bcc <_Z22encodeSingleSensorTestv+0x296>
    2bc0:	69 ed       	ldi	r22, 0xD9	; 217
    2bc2:	75 e0       	ldi	r23, 0x05	; 5
    2bc4:	81 e8       	ldi	r24, 0x81	; 129
    2bc6:	94 e0       	ldi	r25, 0x04	; 4
    2bc8:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    2bcc:	c8 58       	subi	r28, 0x88	; 136
    2bce:	df 4f       	sbci	r29, 0xFF	; 255
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	08 95       	ret

00002bec <_Z11writeMockSDP10SensorDatah>:

void writeMockSD(SensorData* iSd, uint8_t i){
    2bec:	fc 01       	movw	r30, r24
    2bee:	86 2f       	mov	r24, r22
	iSd->battVoltage = (i+1);
    2bf0:	26 2f       	mov	r18, r22
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	a9 01       	movw	r20, r18
    2bf6:	4f 5f       	subi	r20, 0xFF	; 255
    2bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfa:	52 83       	std	Z+2, r21	; 0x02
    2bfc:	41 83       	std	Z+1, r20	; 0x01
	iSd->current = (i+1)*10;
    2bfe:	9a e0       	ldi	r25, 0x0A	; 10
    2c00:	94 9f       	mul	r25, r20
    2c02:	b0 01       	movw	r22, r0
    2c04:	95 9f       	mul	r25, r21
    2c06:	70 0d       	add	r23, r0
    2c08:	11 24       	eor	r1, r1
    2c0a:	74 83       	std	Z+4, r23	; 0x04
    2c0c:	63 83       	std	Z+3, r22	; 0x03
	iSd->pVVoltage = (i+1)*100;
    2c0e:	94 e6       	ldi	r25, 0x64	; 100
    2c10:	94 9f       	mul	r25, r20
    2c12:	b0 01       	movw	r22, r0
    2c14:	95 9f       	mul	r25, r21
    2c16:	70 0d       	add	r23, r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	76 83       	std	Z+6, r23	; 0x06
    2c1c:	65 83       	std	Z+5, r22	; 0x05
	iSd->temperature = (i+1)+50;
    2c1e:	2d 5c       	subi	r18, 0xCD	; 205
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	30 87       	std	Z+8, r19	; 0x08
    2c24:	27 83       	std	Z+7, r18	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2c26:	65 e0       	ldi	r22, 0x05	; 5
    2c28:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__udivmodqi4>
    2c2c:	99 23       	and	r25, r25
    2c2e:	11 f0       	breq	.+4      	; 0x2c34 <_Z11writeMockSDP10SensorDatah+0x48>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <_Z11writeMockSDP10SensorDatah+0x4a>
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	81 87       	std	Z+9, r24	; 0x09
    2c38:	08 95       	ret

00002c3a <_Z21encodeBulkSignalsTesthPc>:
}

void encodeBulkSignalsTest(uint8_t COUNT, char* forWeb) {
    2c3a:	8f 92       	push	r8
    2c3c:	9f 92       	push	r9
    2c3e:	af 92       	push	r10
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	2d 97       	sbiw	r28, 0x0d	; 13
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	08 2f       	mov	r16, r24
    2c64:	5b 01       	movw	r10, r22
	gsm.thisBootNumber = 1026;
	gsm.rssi = rssi;
	gsm.addSensorData(&bulkSd[0], COUNT);
	
	gsm.createPayload((uint8_t*)(&forWeb[0]), 100);//createEncodedPayload(&forWeb[0], 1000);
}
    2c66:	cd b6       	in	r12, 0x3d	; 61
    2c68:	de b6       	in	r13, 0x3e	; 62
	iSd->errorChar = i%5==0?3:0;
}

void encodeBulkSignalsTest(uint8_t COUNT, char* forWeb) {
	
	SensorData bulkSd[COUNT];
    2c6a:	2d b7       	in	r18, 0x3d	; 61
    2c6c:	3e b7       	in	r19, 0x3e	; 62
    2c6e:	8a e0       	ldi	r24, 0x0A	; 10
    2c70:	08 9f       	mul	r16, r24
    2c72:	20 19       	sub	r18, r0
    2c74:	31 09       	sbc	r19, r1
    2c76:	11 24       	eor	r1, r1
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	3e bf       	out	0x3e, r19	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	2d bf       	out	0x3d, r18	; 61
    2c82:	2f 5f       	subi	r18, 0xFF	; 255
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	79 01       	movw	r14, r18
    2c88:	80 2f       	mov	r24, r16
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2c8e:	21 e0       	ldi	r18, 0x01	; 1
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	60 f0       	brcs	.+24     	; 0x2cac <_Z21encodeBulkSignalsTesthPc+0x72>
    2c94:	20 83       	st	Z, r18
    2c96:	12 82       	std	Z+2, r1	; 0x02
    2c98:	11 82       	std	Z+1, r1	; 0x01
    2c9a:	14 82       	std	Z+4, r1	; 0x04
    2c9c:	13 82       	std	Z+3, r1	; 0x03
    2c9e:	16 82       	std	Z+6, r1	; 0x06
    2ca0:	15 82       	std	Z+5, r1	; 0x05
    2ca2:	10 86       	std	Z+8, r1	; 0x08
    2ca4:	17 82       	std	Z+7, r1	; 0x07
    2ca6:	11 86       	std	Z+9, r1	; 0x09
    2ca8:	3a 96       	adiw	r30, 0x0a	; 10
    2caa:	f2 cf       	rjmp	.-28     	; 0x2c90 <_Z21encodeBulkSignalsTesthPc+0x56>
    2cac:	47 01       	movw	r8, r14
    2cae:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<COUNT;i++){
    2cb0:	10 17       	cp	r17, r16
    2cb2:	49 f0       	breq	.+18     	; 0x2cc6 <_Z21encodeBulkSignalsTesthPc+0x8c>
		
		SensorData* iSd = &bulkSd[i];
		writeMockSD(iSd, i);
    2cb4:	61 2f       	mov	r22, r17
    2cb6:	c4 01       	movw	r24, r8
    2cb8:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_Z11writeMockSDP10SensorDatah>
}

void encodeBulkSignalsTest(uint8_t COUNT, char* forWeb) {
	
	SensorData bulkSd[COUNT];
	for(uint8_t i=0;i<COUNT;i++){
    2cbc:	1f 5f       	subi	r17, 0xFF	; 255
    2cbe:	8a e0       	ldi	r24, 0x0A	; 10
    2cc0:	88 0e       	add	r8, r24
    2cc2:	91 1c       	adc	r9, r1
    2cc4:	f5 cf       	rjmp	.-22     	; 0x2cb0 <_Z21encodeBulkSignalsTesthPc+0x76>
	FONA_GET_RSSI rssi;
	rssi.rssi = 15;
	rssi.ber = 3;
	rssi.netReg = (FONA_GET_NETREG)(FONA_GET_NETREG::NETSTAT_4 | FONA_GET_NETREG::RESULT_CODE_1);
	
	GsmPayload gsm;
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	01 96       	adiw	r24, 0x01	; 1
    2cca:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN10GsmPayloadC1Ev>
	gsm.moduleId=33;
    2cce:	81 e2       	ldi	r24, 0x21	; 33
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	gsm.thisBootNumber = 1026;
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	94 e0       	ldi	r25, 0x04	; 4
    2cd6:	9b 83       	std	Y+3, r25	; 0x03
    2cd8:	8a 83       	std	Y+2, r24	; 0x02
	gsm.rssi = rssi;
    2cda:	8f e0       	ldi	r24, 0x0F	; 15
    2cdc:	8c 83       	std	Y+4, r24	; 0x04
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	1e 82       	std	Y+6, r1	; 0x06
    2ce4:	81 e1       	ldi	r24, 0x11	; 17
    2ce6:	8f 83       	std	Y+7, r24	; 0x07
	gsm.addSensorData(&bulkSd[0], COUNT);
    2ce8:	41 2f       	mov	r20, r17
    2cea:	b7 01       	movw	r22, r14
    2cec:	ce 01       	movw	r24, r28
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN10GsmPayload13addSensorDataEP10SensorDatah>
	
	gsm.createPayload((uint8_t*)(&forWeb[0]), 100);//createEncodedPayload(&forWeb[0], 1000);
    2cf4:	44 e6       	ldi	r20, 0x64	; 100
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	b5 01       	movw	r22, r10
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN10GsmPayload13createPayloadEPhj>
}
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de be       	out	0x3e, r13	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd be       	out	0x3d, r12	; 61
    2d0c:	2d 96       	adiw	r28, 0x0d	; 13
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	df 90       	pop	r13
    2d26:	cf 90       	pop	r12
    2d28:	bf 90       	pop	r11
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	08 95       	ret

00002d32 <_ZN13ExtendedTests20runExtendedTypesTestEv>:
#endif


void ExtendedTests::runExtendedTypesTest() {
    2d32:	bf 92       	push	r11
    2d34:	cf 92       	push	r12
    2d36:	df 92       	push	r13
    2d38:	ef 92       	push	r14
    2d3a:	ff 92       	push	r15
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	cf 57       	subi	r28, 0x7F	; 127
    2d4a:	d1 09       	sbc	r29, r1
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2d56:	cd b6       	in	r12, 0x3d	; 61
    2d58:	de b6       	in	r13, 0x3e	; 62
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    2d5a:	ed 96       	adiw	r28, 0x3d	; 61
    2d5c:	1f ae       	std	Y+63, r1	; 0x3f
    2d5e:	ed 97       	sbiw	r28, 0x3d	; 61
    2d60:	ee 96       	adiw	r28, 0x3e	; 62
    2d62:	1f ae       	std	Y+63, r1	; 0x3f
    2d64:	ee 97       	sbiw	r28, 0x3e	; 62
    2d66:	ef 96       	adiw	r28, 0x3f	; 63
    2d68:	1f ae       	std	Y+63, r1	; 0x3f
    2d6a:	ef 97       	sbiw	r28, 0x3f	; 63
							(FONA_GET_NETREG::NETSTAT_5 |
							FONA_GET_NETREG::RESULT_CODE_1 |
							FONA_GET_NETREG::IS_ERROR);
	
	FONA_GET_RSSI result;
	result.netReg = regVal;
    2d6c:	85 e3       	ldi	r24, 0x35	; 53
    2d6e:	c1 58       	subi	r28, 0x81	; 129
    2d70:	df 4f       	sbci	r29, 0xFF	; 255
    2d72:	88 83       	st	Y, r24
    2d74:	cf 57       	subi	r28, 0x7F	; 127
    2d76:	d0 40       	sbci	r29, 0x00	; 0
					 
	RM_LOG(F("Netstat 5 + ResultCode 1 + Error 1="));
    2d78:	65 eb       	ldi	r22, 0xB5	; 181
    2d7a:	75 e0       	ldi	r23, 0x05	; 5
    2d7c:	81 e8       	ldi	r24, 0x81	; 129
    2d7e:	94 e0       	ldi	r25, 0x04	; 4
    2d80:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(result.netReg, BIN);
    2d84:	c1 58       	subi	r28, 0x81	; 129
    2d86:	df 4f       	sbci	r29, 0xFF	; 255
    2d88:	68 81       	ld	r22, Y
    2d8a:	cf 57       	subi	r28, 0x7F	; 127
    2d8c:	d0 40       	sbci	r29, 0x00	; 0
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	42 e0       	ldi	r20, 0x02	; 2
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	81 e8       	ldi	r24, 0x81	; 129
    2d96:	94 e0       	ldi	r25, 0x04	; 4
    2d98:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN5Print7printlnEii>

	uint8_t memStoredVal = result.netReg;
    2d9c:	c1 58       	subi	r28, 0x81	; 129
    2d9e:	df 4f       	sbci	r29, 0xFF	; 255
    2da0:	18 81       	ld	r17, Y
    2da2:	cf 57       	subi	r28, 0x7F	; 127
    2da4:	d0 40       	sbci	r29, 0x00	; 0
	FONA_GET_NETREG back = (FONA_GET_NETREG)memStoredVal;
	RM_LOG(F("Cast back after int storage val:"));
    2da6:	64 e9       	ldi	r22, 0x94	; 148
    2da8:	75 e0       	ldi	r23, 0x05	; 5
    2daa:	81 e8       	ldi	r24, 0x81	; 129
    2dac:	94 e0       	ldi	r25, 0x04	; 4
    2dae:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(back, BIN);
    2db2:	61 2f       	mov	r22, r17
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	42 e0       	ldi	r20, 0x02	; 2
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	81 e8       	ldi	r24, 0x81	; 129
    2dbc:	94 e0       	ldi	r25, 0x04	; 4
    2dbe:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN5Print7printlnEii>
    2dc2:	81 2f       	mov	r24, r17
    2dc4:	8c 71       	andi	r24, 0x1C	; 28
	
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_0) RM_LOGLN(F("*** NETREG FAIL @1 ***"));
    2dc6:	19 f4       	brne	.+6      	; 0x2dce <_ZN13ExtendedTests20runExtendedTypesTestEv+0x9c>
    2dc8:	6d e7       	ldi	r22, 0x7D	; 125
    2dca:	75 e0       	ldi	r23, 0x05	; 5
    2dcc:	13 c0       	rjmp	.+38     	; 0x2df4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc2>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_1) RM_LOGLN(F("*** NETREG FAIL @2 ***"));
    2dce:	84 30       	cpi	r24, 0x04	; 4
    2dd0:	19 f4       	brne	.+6      	; 0x2dd8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xa6>
    2dd2:	66 e6       	ldi	r22, 0x66	; 102
    2dd4:	75 e0       	ldi	r23, 0x05	; 5
    2dd6:	0e c0       	rjmp	.+28     	; 0x2df4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc2>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_2) RM_LOGLN(F("*** NETREG FAIL @3 ***"));
    2dd8:	88 30       	cpi	r24, 0x08	; 8
    2dda:	19 f4       	brne	.+6      	; 0x2de2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xb0>
    2ddc:	6f e4       	ldi	r22, 0x4F	; 79
    2dde:	75 e0       	ldi	r23, 0x05	; 5
    2de0:	09 c0       	rjmp	.+18     	; 0x2df4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc2>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_3) RM_LOGLN(F("*** NETREG FAIL @4 ***"));
    2de2:	8c 30       	cpi	r24, 0x0C	; 12
    2de4:	19 f4       	brne	.+6      	; 0x2dec <_ZN13ExtendedTests20runExtendedTypesTestEv+0xba>
    2de6:	68 e3       	ldi	r22, 0x38	; 56
    2de8:	75 e0       	ldi	r23, 0x05	; 5
    2dea:	04 c0       	rjmp	.+8      	; 0x2df4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc2>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_4) RM_LOGLN(F("*** NETREG FAIL @5 ***"));
    2dec:	80 31       	cpi	r24, 0x10	; 16
    2dee:	39 f4       	brne	.+14     	; 0x2dfe <_ZN13ExtendedTests20runExtendedTypesTestEv+0xcc>
    2df0:	61 e2       	ldi	r22, 0x21	; 33
    2df2:	75 e0       	ldi	r23, 0x05	; 5
    2df4:	81 e8       	ldi	r24, 0x81	; 129
    2df6:	94 e0       	ldi	r25, 0x04	; 4
    2df8:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd0>
	if (NETREG_ONLY_NETSTAT(back) != FONA_GET_NETREG::NETSTAT_5) RM_LOGLN(F("*** NETREG FAIL @6 ***"));
    2dfe:	84 31       	cpi	r24, 0x14	; 20
    2e00:	31 f0       	breq	.+12     	; 0x2e0e <_ZN13ExtendedTests20runExtendedTypesTestEv+0xdc>
    2e02:	6a e0       	ldi	r22, 0x0A	; 10
    2e04:	75 e0       	ldi	r23, 0x05	; 5
    2e06:	81 e8       	ldi	r24, 0x81	; 129
    2e08:	94 e0       	ldi	r25, 0x04	; 4
    2e0a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2e0e:	01 2f       	mov	r16, r17
    2e10:	03 70       	andi	r16, 0x03	; 3
	
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_0) RM_LOGLN(F("*** NETREG FAIL @7 ***"));
    2e12:	39 f4       	brne	.+14     	; 0x2e22 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xf0>
    2e14:	63 ef       	ldi	r22, 0xF3	; 243
    2e16:	74 e0       	ldi	r23, 0x04	; 4
    2e18:	81 e8       	ldi	r24, 0x81	; 129
    2e1a:	94 e0       	ldi	r25, 0x04	; 4
    2e1c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xf4>
	if (NETREG_ONLY_RESULT_CODE(back) != FONA_GET_NETREG::RESULT_CODE_1) RM_LOGLN(F("*** NETREG FAIL @8 ***"));
    2e22:	01 30       	cpi	r16, 0x01	; 1
    2e24:	71 f0       	breq	.+28     	; 0x2e42 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x110>
    2e26:	6c ed       	ldi	r22, 0xDC	; 220
    2e28:	74 e0       	ldi	r23, 0x04	; 4
    2e2a:	81 e8       	ldi	r24, 0x81	; 129
    2e2c:	94 e0       	ldi	r25, 0x04	; 4
    2e2e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_2) RM_LOGLN(F("*** NETREG FAIL @9 ***"));
    2e32:	02 30       	cpi	r16, 0x02	; 2
    2e34:	31 f4       	brne	.+12     	; 0x2e42 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x110>
    2e36:	65 ec       	ldi	r22, 0xC5	; 197
    2e38:	74 e0       	ldi	r23, 0x04	; 4
    2e3a:	81 e8       	ldi	r24, 0x81	; 129
    2e3c:	94 e0       	ldi	r25, 0x04	; 4
    2e3e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (NETREG_ONLY_ERROR(back) != FONA_GET_NETREG::IS_ERROR) RM_LOGLN(F("*** NETREG FAIL @10 ***"));
    2e42:	15 fd       	sbrc	r17, 5
    2e44:	06 c0       	rjmp	.+12     	; 0x2e52 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x120>
    2e46:	6d ea       	ldi	r22, 0xAD	; 173
    2e48:	74 e0       	ldi	r23, 0x04	; 4
    2e4a:	81 e8       	ldi	r24, 0x81	; 129
    2e4c:	94 e0       	ldi	r25, 0x04	; 4
    2e4e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Print test
	RM_LOG(F("Test For Print Output:"));
    2e52:	66 e9       	ldi	r22, 0x96	; 150
    2e54:	74 e0       	ldi	r23, 0x04	; 4
    2e56:	81 e8       	ldi	r24, 0x81	; 129
    2e58:	94 e0       	ldi	r25, 0x04	; 4
    2e5a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
	Helpers::printRSSI(&result);
    2e5e:	ce 01       	movw	r24, r28
    2e60:	84 58       	subi	r24, 0x84	; 132
    2e62:	9f 4f       	sbci	r25, 0xFF	; 255
    2e64:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	
	/******* ENCODING TESTS *********/
	
	//	** 1) Ensure this is avoided with lib:- **
	//		char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2e68:	10 e0       	ldi	r17, 0x00	; 0
	
		encodeIntTest(i);
    2e6a:	81 2f       	mov	r24, r17
    2e6c:	0e 94 56 13 	call	0x26ac	; 0x26ac <_Z13encodeIntTesth>
		if (i==255)
    2e70:	1f 3f       	cpi	r17, 0xFF	; 255
    2e72:	11 f0       	breq	.+4      	; 0x2e78 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x146>
	
	/******* ENCODING TESTS *********/
	
	//	** 1) Ensure this is avoided with lib:- **
	//		char r = -127; char q = 129; Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2e74:	1f 5f       	subi	r17, 0xFF	; 255
    2e76:	f9 cf       	rjmp	.-14     	; 0x2e6a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x138>
			break; //max for unsigned byte
	}

	//	** 2) Check encoding/decoding for strings with their null terminating char \0 **
	//		Verify encoding/decoding %3 behaviour works
	encodeStrTest("h", "aA==");
    2e78:	69 e2       	ldi	r22, 0x29	; 41
    2e7a:	72 e0       	ldi	r23, 0x02	; 2
    2e7c:	8e e2       	ldi	r24, 0x2E	; 46
    2e7e:	92 e0       	ldi	r25, 0x02	; 2
    2e80:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13encodeStrTestPcS_>
	encodeStrTest("he", "aGU=");
    2e84:	60 e3       	ldi	r22, 0x30	; 48
    2e86:	72 e0       	ldi	r23, 0x02	; 2
    2e88:	85 e3       	ldi	r24, 0x35	; 53
    2e8a:	92 e0       	ldi	r25, 0x02	; 2
    2e8c:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13encodeStrTestPcS_>
	encodeStrTest("hel", "aGVs");
    2e90:	68 e3       	ldi	r22, 0x38	; 56
    2e92:	72 e0       	ldi	r23, 0x02	; 2
    2e94:	8d e3       	ldi	r24, 0x3D	; 61
    2e96:	92 e0       	ldi	r25, 0x02	; 2
    2e98:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13encodeStrTestPcS_>
	encodeStrTest("hell", "aGVsbA==");
    2e9c:	61 e4       	ldi	r22, 0x41	; 65
    2e9e:	72 e0       	ldi	r23, 0x02	; 2
    2ea0:	8a e4       	ldi	r24, 0x4A	; 74
    2ea2:	92 e0       	ldi	r25, 0x02	; 2
    2ea4:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13encodeStrTestPcS_>
	encodeStrTest("hello", "aGVsbG8=");
    2ea8:	6f e4       	ldi	r22, 0x4F	; 79
    2eaa:	72 e0       	ldi	r23, 0x02	; 2
    2eac:	88 e5       	ldi	r24, 0x58	; 88
    2eae:	92 e0       	ldi	r25, 0x02	; 2
    2eb0:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13encodeStrTestPcS_>
	
	
	//	** 3) Single sensor-data round-trip numbers test **
	encodeSingleSensorTest();
    2eb4:	0e 94 9b 14 	call	0x2936	; 0x2936 <_Z22encodeSingleSensorTestv>
	
	//	** 4) Test a full gsm-payload incl. large sequence of them to ensure correctness **
	//TODO: MAX READINGS A CONSTANT?
	
	int COUNT=5;
	char forWeb[100] {0};
    2eb8:	8e 01       	movw	r16, r28
    2eba:	0f 5f       	subi	r16, 0xFF	; 255
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	84 e6       	ldi	r24, 0x64	; 100
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	11 92       	st	Z+, r1
    2ec4:	8a 95       	dec	r24
    2ec6:	e9 f7       	brne	.-6      	; 0x2ec2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x190>
	encodeBulkSignalsTest(COUNT, &forWeb[0]);
    2ec8:	b8 01       	movw	r22, r16
    2eca:	85 e0       	ldi	r24, 0x05	; 5
    2ecc:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <_Z21encodeBulkSignalsTesthPc>
	
	//	RM_LOGLN(F("GSM Payload To Be Sent Over Web:"));
	//	Helpers::printByteArray((uint8_t*)(&forWeb[0]), 20);
	
	uint8_t numReadings = GsmPayload::readNumOfSensorReadings(&forWeb[0]);
    2ed0:	c8 01       	movw	r24, r16
    2ed2:	0e 94 14 0a 	call	0x1428	; 0x1428 <_ZN10GsmPayload23readNumOfSensorReadingsEPc>
    2ed6:	e8 2e       	mov	r14, r24
	
	if (numReadings != COUNT) RM_LOGLN(F("*** READ NUM FAIL ***"));
    2ed8:	f5 e0       	ldi	r31, 0x05	; 5
    2eda:	8f 17       	cp	r24, r31
    2edc:	31 f0       	breq	.+12     	; 0x2eea <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1b8>
    2ede:	60 e8       	ldi	r22, 0x80	; 128
    2ee0:	74 e0       	ldi	r23, 0x04	; 4
    2ee2:	81 e8       	ldi	r24, 0x81	; 129
    2ee4:	94 e0       	ldi	r25, 0x04	; 4
    2ee6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>

	//Now parse it
	GsmPayload receivedPayload;
    2eea:	ce 01       	movw	r24, r28
    2eec:	8b 59       	subi	r24, 0x9B	; 155
    2eee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef0:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN10GsmPayloadC1Ev>
	SensorData receivedSensorData[numReadings];
    2ef4:	2d b7       	in	r18, 0x3d	; 61
    2ef6:	3e b7       	in	r19, 0x3e	; 62
    2ef8:	8a e0       	ldi	r24, 0x0A	; 10
    2efa:	e8 9e       	mul	r14, r24
    2efc:	20 19       	sub	r18, r0
    2efe:	31 09       	sbc	r19, r1
    2f00:	11 24       	eor	r1, r1
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	3e bf       	out	0x3e, r19	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	2d bf       	out	0x3d, r18	; 61
    2f0c:	4d b7       	in	r20, 0x3d	; 61
    2f0e:	5e b7       	in	r21, 0x3e	; 62
    2f10:	4f 5f       	subi	r20, 0xFF	; 255
    2f12:	5f 4f       	sbci	r21, 0xFF	; 255
    2f14:	8e 2d       	mov	r24, r14
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	fa 01       	movw	r30, r20
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2f1a:	21 e0       	ldi	r18, 0x01	; 1
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	60 f0       	brcs	.+24     	; 0x2f38 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x206>
    2f20:	20 83       	st	Z, r18
    2f22:	12 82       	std	Z+2, r1	; 0x02
    2f24:	11 82       	std	Z+1, r1	; 0x01
    2f26:	14 82       	std	Z+4, r1	; 0x04
    2f28:	13 82       	std	Z+3, r1	; 0x03
    2f2a:	16 82       	std	Z+6, r1	; 0x06
    2f2c:	15 82       	std	Z+5, r1	; 0x05
    2f2e:	10 86       	std	Z+8, r1	; 0x08
    2f30:	17 82       	std	Z+7, r1	; 0x07
    2f32:	11 86       	std	Z+9, r1	; 0x09
    2f34:	3a 96       	adiw	r30, 0x0a	; 10
    2f36:	f2 cf       	rjmp	.-28     	; 0x2f1c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1ea>
	receivedPayload.readPayload((uint8_t*)(&forWeb[0]), (SensorData*)&receivedSensorData);
    2f38:	b8 01       	movw	r22, r16
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	8b 59       	subi	r24, 0x9B	; 155
    2f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f40:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN10GsmPayload11readPayloadEPhP10SensorData>
	
	RM_LOGLN(F("First Parsed Reading:"));
    2f44:	6a e6       	ldi	r22, 0x6A	; 106
    2f46:	74 e0       	ldi	r23, 0x04	; 4
    2f48:	81 e8       	ldi	r24, 0x81	; 129
    2f4a:	94 e0       	ldi	r25, 0x04	; 4
    2f4c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	SensorData* readOne = receivedPayload.getSensorData();
    2f50:	ce 01       	movw	r24, r28
    2f52:	8b 59       	subi	r24, 0x9B	; 155
    2f54:	9f 4f       	sbci	r25, 0xFF	; 255
    2f56:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN10GsmPayload13getSensorDataEv>
    2f5a:	b8 2e       	mov	r11, r24
    2f5c:	f9 2e       	mov	r15, r25
	Helpers::printSensorData(readOne); //print the first
    2f5e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN7Helpers15printSensorDataEP10SensorData>
    2f62:	0b 2d       	mov	r16, r11
    2f64:	1f 2d       	mov	r17, r15
	
	for(uint8_t i=0;i<numReadings;i++){
    2f66:	f1 2c       	mov	r15, r1
		
		SensorData expectedVal;
    2f68:	bb 24       	eor	r11, r11
    2f6a:	b3 94       	inc	r11
	
	RM_LOGLN(F("First Parsed Reading:"));
	SensorData* readOne = receivedPayload.getSensorData();
	Helpers::printSensorData(readOne); //print the first
	
	for(uint8_t i=0;i<numReadings;i++){
    2f6c:	fe 14       	cp	r15, r14
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x240>
    2f70:	c8 c0       	rjmp	.+400    	; 0x3102 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3d0>
		
		SensorData expectedVal;
    2f72:	e3 96       	adiw	r28, 0x33	; 51
    2f74:	bf ae       	std	Y+63, r11	; 0x3f
    2f76:	e3 97       	sbiw	r28, 0x33	; 51
    2f78:	e5 96       	adiw	r28, 0x35	; 53
    2f7a:	1f ae       	std	Y+63, r1	; 0x3f
    2f7c:	1e ae       	std	Y+62, r1	; 0x3e
    2f7e:	e5 97       	sbiw	r28, 0x35	; 53
    2f80:	e7 96       	adiw	r28, 0x37	; 55
    2f82:	1f ae       	std	Y+63, r1	; 0x3f
    2f84:	1e ae       	std	Y+62, r1	; 0x3e
    2f86:	e7 97       	sbiw	r28, 0x37	; 55
    2f88:	e9 96       	adiw	r28, 0x39	; 57
    2f8a:	1f ae       	std	Y+63, r1	; 0x3f
    2f8c:	1e ae       	std	Y+62, r1	; 0x3e
    2f8e:	e9 97       	sbiw	r28, 0x39	; 57
    2f90:	eb 96       	adiw	r28, 0x3b	; 59
    2f92:	1f ae       	std	Y+63, r1	; 0x3f
    2f94:	1e ae       	std	Y+62, r1	; 0x3e
    2f96:	eb 97       	sbiw	r28, 0x3b	; 59
    2f98:	ec 96       	adiw	r28, 0x3c	; 60
    2f9a:	1f ae       	std	Y+63, r1	; 0x3f
    2f9c:	ec 97       	sbiw	r28, 0x3c	; 60
		SensorData* expectedValPtr=&expectedVal;
		writeMockSD(expectedValPtr, i);
    2f9e:	6f 2d       	mov	r22, r15
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	8e 58       	subi	r24, 0x8E	; 142
    2fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <_Z11writeMockSDP10SensorDatah>
		
		SensorData* parsed = readOne + i;
		
		if (expectedValPtr->battVoltage != parsed->battVoltage) {RM_LOG2(F("*** BATT FAIL ***"), i);}
    2faa:	e5 96       	adiw	r28, 0x35	; 53
    2fac:	2e ad       	ldd	r18, Y+62	; 0x3e
    2fae:	3f ad       	ldd	r19, Y+63	; 0x3f
    2fb0:	e5 97       	sbiw	r28, 0x35	; 53
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	81 81       	ldd	r24, Z+1	; 0x01
    2fb6:	92 81       	ldd	r25, Z+2	; 0x02
    2fb8:	28 17       	cp	r18, r24
    2fba:	39 07       	cpc	r19, r25
    2fbc:	99 f0       	breq	.+38     	; 0x2fe4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2b2>
    2fbe:	68 e5       	ldi	r22, 0x58	; 88
    2fc0:	74 e0       	ldi	r23, 0x04	; 4
    2fc2:	81 e8       	ldi	r24, 0x81	; 129
    2fc4:	94 e0       	ldi	r25, 0x04	; 4
    2fc6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    2fca:	66 e4       	ldi	r22, 0x46	; 70
    2fcc:	71 e0       	ldi	r23, 0x01	; 1
    2fce:	81 e8       	ldi	r24, 0x81	; 129
    2fd0:	94 e0       	ldi	r25, 0x04	; 4
    2fd2:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    2fd6:	4a e0       	ldi	r20, 0x0A	; 10
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	6f 2d       	mov	r22, r15
    2fdc:	81 e8       	ldi	r24, 0x81	; 129
    2fde:	94 e0       	ldi	r25, 0x04	; 4
    2fe0:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
		if (expectedValPtr->current != parsed->current) {RM_LOG2(F("*** CURR FAIL ***"), i);}
    2fe4:	e7 96       	adiw	r28, 0x37	; 55
    2fe6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2fe8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2fea:	e7 97       	sbiw	r28, 0x37	; 55
    2fec:	f8 01       	movw	r30, r16
    2fee:	83 81       	ldd	r24, Z+3	; 0x03
    2ff0:	94 81       	ldd	r25, Z+4	; 0x04
    2ff2:	28 17       	cp	r18, r24
    2ff4:	39 07       	cpc	r19, r25
    2ff6:	99 f0       	breq	.+38     	; 0x301e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x2ec>
    2ff8:	66 e4       	ldi	r22, 0x46	; 70
    2ffa:	74 e0       	ldi	r23, 0x04	; 4
    2ffc:	81 e8       	ldi	r24, 0x81	; 129
    2ffe:	94 e0       	ldi	r25, 0x04	; 4
    3000:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    3004:	66 e4       	ldi	r22, 0x46	; 70
    3006:	71 e0       	ldi	r23, 0x01	; 1
    3008:	81 e8       	ldi	r24, 0x81	; 129
    300a:	94 e0       	ldi	r25, 0x04	; 4
    300c:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    3010:	4a e0       	ldi	r20, 0x0A	; 10
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	6f 2d       	mov	r22, r15
    3016:	81 e8       	ldi	r24, 0x81	; 129
    3018:	94 e0       	ldi	r25, 0x04	; 4
    301a:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
		if (expectedValPtr->dataType != parsed->dataType) {RM_LOG2(F("*** DT FAIL ***"), i);}
    301e:	e3 96       	adiw	r28, 0x33	; 51
    3020:	9f ad       	ldd	r25, Y+63	; 0x3f
    3022:	e3 97       	sbiw	r28, 0x33	; 51
    3024:	f8 01       	movw	r30, r16
    3026:	80 81       	ld	r24, Z
    3028:	98 17       	cp	r25, r24
    302a:	99 f0       	breq	.+38     	; 0x3052 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x320>
    302c:	66 e3       	ldi	r22, 0x36	; 54
    302e:	74 e0       	ldi	r23, 0x04	; 4
    3030:	81 e8       	ldi	r24, 0x81	; 129
    3032:	94 e0       	ldi	r25, 0x04	; 4
    3034:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    3038:	66 e4       	ldi	r22, 0x46	; 70
    303a:	71 e0       	ldi	r23, 0x01	; 1
    303c:	81 e8       	ldi	r24, 0x81	; 129
    303e:	94 e0       	ldi	r25, 0x04	; 4
    3040:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    3044:	4a e0       	ldi	r20, 0x0A	; 10
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	6f 2d       	mov	r22, r15
    304a:	81 e8       	ldi	r24, 0x81	; 129
    304c:	94 e0       	ldi	r25, 0x04	; 4
    304e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
		if (expectedValPtr->errorChar != parsed->errorChar) {RM_LOG2(F("*** ERR FAIL ***"), i);}
    3052:	ec 96       	adiw	r28, 0x3c	; 60
    3054:	9f ad       	ldd	r25, Y+63	; 0x3f
    3056:	ec 97       	sbiw	r28, 0x3c	; 60
    3058:	f8 01       	movw	r30, r16
    305a:	81 85       	ldd	r24, Z+9	; 0x09
    305c:	98 17       	cp	r25, r24
    305e:	99 f0       	breq	.+38     	; 0x3086 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x354>
    3060:	65 e2       	ldi	r22, 0x25	; 37
    3062:	74 e0       	ldi	r23, 0x04	; 4
    3064:	81 e8       	ldi	r24, 0x81	; 129
    3066:	94 e0       	ldi	r25, 0x04	; 4
    3068:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    306c:	66 e4       	ldi	r22, 0x46	; 70
    306e:	71 e0       	ldi	r23, 0x01	; 1
    3070:	81 e8       	ldi	r24, 0x81	; 129
    3072:	94 e0       	ldi	r25, 0x04	; 4
    3074:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    3078:	4a e0       	ldi	r20, 0x0A	; 10
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	6f 2d       	mov	r22, r15
    307e:	81 e8       	ldi	r24, 0x81	; 129
    3080:	94 e0       	ldi	r25, 0x04	; 4
    3082:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
		if (expectedValPtr->pVVoltage != parsed->pVVoltage) {RM_LOG2(F("*** PV FAIL ***"), i);}
    3086:	e9 96       	adiw	r28, 0x39	; 57
    3088:	2e ad       	ldd	r18, Y+62	; 0x3e
    308a:	3f ad       	ldd	r19, Y+63	; 0x3f
    308c:	e9 97       	sbiw	r28, 0x39	; 57
    308e:	f8 01       	movw	r30, r16
    3090:	85 81       	ldd	r24, Z+5	; 0x05
    3092:	96 81       	ldd	r25, Z+6	; 0x06
    3094:	28 17       	cp	r18, r24
    3096:	39 07       	cpc	r19, r25
    3098:	99 f0       	breq	.+38     	; 0x30c0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x38e>
    309a:	65 e1       	ldi	r22, 0x15	; 21
    309c:	74 e0       	ldi	r23, 0x04	; 4
    309e:	81 e8       	ldi	r24, 0x81	; 129
    30a0:	94 e0       	ldi	r25, 0x04	; 4
    30a2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    30a6:	66 e4       	ldi	r22, 0x46	; 70
    30a8:	71 e0       	ldi	r23, 0x01	; 1
    30aa:	81 e8       	ldi	r24, 0x81	; 129
    30ac:	94 e0       	ldi	r25, 0x04	; 4
    30ae:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    30b2:	4a e0       	ldi	r20, 0x0A	; 10
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	6f 2d       	mov	r22, r15
    30b8:	81 e8       	ldi	r24, 0x81	; 129
    30ba:	94 e0       	ldi	r25, 0x04	; 4
    30bc:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
		if (expectedValPtr->temperature != parsed->temperature) {RM_LOG2(F("*** TEMP FAIL ***"), i);}
    30c0:	eb 96       	adiw	r28, 0x3b	; 59
    30c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    30c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    30c6:	eb 97       	sbiw	r28, 0x3b	; 59
    30c8:	f8 01       	movw	r30, r16
    30ca:	87 81       	ldd	r24, Z+7	; 0x07
    30cc:	90 85       	ldd	r25, Z+8	; 0x08
    30ce:	28 17       	cp	r18, r24
    30d0:	39 07       	cpc	r19, r25
    30d2:	99 f0       	breq	.+38     	; 0x30fa <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3c8>
    30d4:	63 e0       	ldi	r22, 0x03	; 3
    30d6:	74 e0       	ldi	r23, 0x04	; 4
    30d8:	81 e8       	ldi	r24, 0x81	; 129
    30da:	94 e0       	ldi	r25, 0x04	; 4
    30dc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    30e0:	66 e4       	ldi	r22, 0x46	; 70
    30e2:	71 e0       	ldi	r23, 0x01	; 1
    30e4:	81 e8       	ldi	r24, 0x81	; 129
    30e6:	94 e0       	ldi	r25, 0x04	; 4
    30e8:	0e 94 cc 1a 	call	0x3598	; 0x3598 <_ZN5Print5printEPKc>
    30ec:	4a e0       	ldi	r20, 0x0A	; 10
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	6f 2d       	mov	r22, r15
    30f2:	81 e8       	ldi	r24, 0x81	; 129
    30f4:	94 e0       	ldi	r25, 0x04	; 4
    30f6:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN5Print7printlnEhi>
	
	RM_LOGLN(F("First Parsed Reading:"));
	SensorData* readOne = receivedPayload.getSensorData();
	Helpers::printSensorData(readOne); //print the first
	
	for(uint8_t i=0;i<numReadings;i++){
    30fa:	f3 94       	inc	r15
    30fc:	06 5f       	subi	r16, 0xF6	; 246
    30fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3100:	35 cf       	rjmp	.-406    	; 0x2f6c <_ZN13ExtendedTests20runExtendedTypesTestEv+0x23a>
	//GsmPayload readGsm;
	//uint8_t numSensorReadings = readGsm.readNumOfSensorReadings(dataPtr);
	//if (numSensorReadings != COUNT) RM_LOGLN(F("*** WRONG # SENSOR READINGS ***"));
	//readGsm.readPayload(dataPtr);
	
	RM_LOGLN(F("------------------------"));
    3102:	6a ee       	ldi	r22, 0xEA	; 234
    3104:	73 e0       	ldi	r23, 0x03	; 3
    3106:	81 e8       	ldi	r24, 0x81	; 129
    3108:	94 e0       	ldi	r25, 0x04	; 4
    310a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de be       	out	0x3e, r13	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd be       	out	0x3d, r12	; 61
    3118:	c1 58       	subi	r28, 0x81	; 129
    311a:	df 4f       	sbci	r29, 0xFF	; 255
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	df 90       	pop	r13
    3134:	cf 90       	pop	r12
    3136:	bf 90       	pop	r11
    3138:	08 95       	ret

0000313a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    313a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    313c:	91 8d       	ldd	r25, Z+25	; 0x19
    313e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3140:	89 2f       	mov	r24, r25
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	80 5c       	subi	r24, 0xC0	; 192
    3146:	9f 4f       	sbci	r25, 0xFF	; 255
    3148:	82 1b       	sub	r24, r18
    314a:	91 09       	sbc	r25, r1
}
    314c:	8f 73       	andi	r24, 0x3F	; 63
    314e:	99 27       	eor	r25, r25
    3150:	08 95       	ret

00003152 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3152:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3154:	91 8d       	ldd	r25, Z+25	; 0x19
    3156:	82 8d       	ldd	r24, Z+26	; 0x1a
    3158:	98 17       	cp	r25, r24
    315a:	31 f0       	breq	.+12     	; 0x3168 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    315c:	82 8d       	ldd	r24, Z+26	; 0x1a
    315e:	e8 0f       	add	r30, r24
    3160:	f1 1d       	adc	r31, r1
    3162:	85 8d       	ldd	r24, Z+29	; 0x1d
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3168:	8f ef       	ldi	r24, 0xFF	; 255
    316a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    316c:	08 95       	ret

0000316e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    316e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3170:	91 8d       	ldd	r25, Z+25	; 0x19
    3172:	82 8d       	ldd	r24, Z+26	; 0x1a
    3174:	98 17       	cp	r25, r24
    3176:	61 f0       	breq	.+24     	; 0x3190 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3178:	82 8d       	ldd	r24, Z+26	; 0x1a
    317a:	df 01       	movw	r26, r30
    317c:	a8 0f       	add	r26, r24
    317e:	b1 1d       	adc	r27, r1
    3180:	5d 96       	adiw	r26, 0x1d	; 29
    3182:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3184:	92 8d       	ldd	r25, Z+26	; 0x1a
    3186:	9f 5f       	subi	r25, 0xFF	; 255
    3188:	9f 73       	andi	r25, 0x3F	; 63
    318a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3190:	8f ef       	ldi	r24, 0xFF	; 255
    3192:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3194:	08 95       	ret

00003196 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3196:	80 e2       	ldi	r24, 0x20	; 32
    3198:	9a e1       	ldi	r25, 0x1A	; 26
    319a:	89 2b       	or	r24, r25
    319c:	49 f0       	breq	.+18     	; 0x31b0 <_Z14serialEventRunv+0x1a>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	89 2b       	or	r24, r25
    31a4:	29 f0       	breq	.+10     	; 0x31b0 <_Z14serialEventRunv+0x1a>
    31a6:	0e 94 20 1a 	call	0x3440	; 0x3440 <_Z17Serial0_availablev>
    31aa:	81 11       	cpse	r24, r1
    31ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    31b0:	08 95       	ret

000031b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    31b2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    31b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    31b6:	df 01       	movw	r26, r30
    31b8:	a8 0f       	add	r26, r24
    31ba:	b1 1d       	adc	r27, r1
    31bc:	a3 5a       	subi	r26, 0xA3	; 163
    31be:	bf 4f       	sbci	r27, 0xFF	; 255
    31c0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    31c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	01 96       	adiw	r24, 0x01	; 1
    31c8:	8f 73       	andi	r24, 0x3F	; 63
    31ca:	99 27       	eor	r25, r25
    31cc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    31ce:	a6 89       	ldd	r26, Z+22	; 0x16
    31d0:	b7 89       	ldd	r27, Z+23	; 0x17
    31d2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    31d4:	a0 89       	ldd	r26, Z+16	; 0x10
    31d6:	b1 89       	ldd	r27, Z+17	; 0x11
    31d8:	8c 91       	ld	r24, X
    31da:	80 64       	ori	r24, 0x40	; 64
    31dc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    31de:	93 8d       	ldd	r25, Z+27	; 0x1b
    31e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    31e2:	98 13       	cpse	r25, r24
    31e4:	06 c0       	rjmp	.+12     	; 0x31f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    31e6:	02 88       	ldd	r0, Z+18	; 0x12
    31e8:	f3 89       	ldd	r31, Z+19	; 0x13
    31ea:	e0 2d       	mov	r30, r0
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 7d       	andi	r24, 0xDF	; 223
    31f0:	80 83       	st	Z, r24
    31f2:	08 95       	ret

000031f4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	ec 01       	movw	r28, r24
  _written = true;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3206:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3208:	8c 8d       	ldd	r24, Y+28	; 0x1c
    320a:	98 13       	cpse	r25, r24
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <_ZN14HardwareSerial5writeEh+0x24>
    320e:	e8 89       	ldd	r30, Y+16	; 0x10
    3210:	f9 89       	ldd	r31, Y+17	; 0x11
    3212:	80 81       	ld	r24, Z
    3214:	85 fd       	sbrc	r24, 5
    3216:	24 c0       	rjmp	.+72     	; 0x3260 <_ZN14HardwareSerial5writeEh+0x6c>
    3218:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    321a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    321c:	10 e0       	ldi	r17, 0x00	; 0
    321e:	0f 5f       	subi	r16, 0xFF	; 255
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	0f 73       	andi	r16, 0x3F	; 63
    3224:	11 27       	eor	r17, r17
    3226:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3228:	8c 8d       	ldd	r24, Y+28	; 0x1c
    322a:	e8 12       	cpse	r14, r24
    322c:	0c c0       	rjmp	.+24     	; 0x3246 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	07 fc       	sbrc	r0, 7
    3232:	fa cf       	rjmp	.-12     	; 0x3228 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3234:	e8 89       	ldd	r30, Y+16	; 0x10
    3236:	f9 89       	ldd	r31, Y+17	; 0x11
    3238:	80 81       	ld	r24, Z
    323a:	85 ff       	sbrs	r24, 5
    323c:	f5 cf       	rjmp	.-22     	; 0x3228 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    323e:	ce 01       	movw	r24, r28
    3240:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3244:	f1 cf       	rjmp	.-30     	; 0x3228 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3248:	fe 01       	movw	r30, r28
    324a:	e8 0f       	add	r30, r24
    324c:	f1 1d       	adc	r31, r1
    324e:	e3 5a       	subi	r30, 0xA3	; 163
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3254:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3256:	ea 89       	ldd	r30, Y+18	; 0x12
    3258:	fb 89       	ldd	r31, Y+19	; 0x13
    325a:	80 81       	ld	r24, Z
    325c:	80 62       	ori	r24, 0x20	; 32
    325e:	07 c0       	rjmp	.+14     	; 0x326e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3260:	ee 89       	ldd	r30, Y+22	; 0x16
    3262:	ff 89       	ldd	r31, Y+23	; 0x17
    3264:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3266:	e8 89       	ldd	r30, Y+16	; 0x10
    3268:	f9 89       	ldd	r31, Y+17	; 0x11
    326a:	80 81       	ld	r24, Z
    326c:	80 64       	ori	r24, 0x40	; 64
    326e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	08 95       	ret

00003282 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3288:	88 8d       	ldd	r24, Y+24	; 0x18
    328a:	88 23       	and	r24, r24
    328c:	c9 f0       	breq	.+50     	; 0x32c0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    328e:	ea 89       	ldd	r30, Y+18	; 0x12
    3290:	fb 89       	ldd	r31, Y+19	; 0x13
    3292:	80 81       	ld	r24, Z
    3294:	85 fd       	sbrc	r24, 5
    3296:	05 c0       	rjmp	.+10     	; 0x32a2 <_ZN14HardwareSerial5flushEv+0x20>
    3298:	a8 89       	ldd	r26, Y+16	; 0x10
    329a:	b9 89       	ldd	r27, Y+17	; 0x11
    329c:	8c 91       	ld	r24, X
    329e:	86 fd       	sbrc	r24, 6
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	07 fc       	sbrc	r0, 7
    32a6:	f5 cf       	rjmp	.-22     	; 0x3292 <_ZN14HardwareSerial5flushEv+0x10>
    32a8:	80 81       	ld	r24, Z
    32aa:	85 ff       	sbrs	r24, 5
    32ac:	f2 cf       	rjmp	.-28     	; 0x3292 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    32ae:	a8 89       	ldd	r26, Y+16	; 0x10
    32b0:	b9 89       	ldd	r27, Y+17	; 0x11
    32b2:	8c 91       	ld	r24, X
    32b4:	85 ff       	sbrs	r24, 5
    32b6:	ed cf       	rjmp	.-38     	; 0x3292 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    32b8:	ce 01       	movw	r24, r28
    32ba:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32be:	e7 cf       	rjmp	.-50     	; 0x328e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	08 95       	ret

000032c6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    32c6:	cf 92       	push	r12
    32c8:	df 92       	push	r13
    32ca:	ef 92       	push	r14
    32cc:	ff 92       	push	r15
    32ce:	1f 93       	push	r17
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	ec 01       	movw	r28, r24
    32d6:	6a 01       	movw	r12, r20
    32d8:	7b 01       	movw	r14, r22
    32da:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    32dc:	e8 89       	ldd	r30, Y+16	; 0x10
    32de:	f9 89       	ldd	r31, Y+17	; 0x11
    32e0:	82 e0       	ldi	r24, 0x02	; 2
    32e2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32e4:	41 15       	cp	r20, r1
    32e6:	51 4e       	sbci	r21, 0xE1	; 225
    32e8:	61 05       	cpc	r22, r1
    32ea:	71 05       	cpc	r23, r1
    32ec:	b1 f0       	breq	.+44     	; 0x331a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	79 e0       	ldi	r23, 0x09	; 9
    32f2:	8d e3       	ldi	r24, 0x3D	; 61
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	a7 01       	movw	r20, r14
    32f8:	96 01       	movw	r18, r12
    32fa:	0e 94 0e 21 	call	0x421c	; 0x421c <__udivmodsi4>
    32fe:	da 01       	movw	r26, r20
    3300:	c9 01       	movw	r24, r18
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	a1 09       	sbc	r26, r1
    3306:	b1 09       	sbc	r27, r1
    3308:	b6 95       	lsr	r27
    330a:	a7 95       	ror	r26
    330c:	97 95       	ror	r25
    330e:	87 95       	ror	r24
    3310:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3312:	21 15       	cp	r18, r1
    3314:	80 e1       	ldi	r24, 0x10	; 16
    3316:	38 07       	cpc	r19, r24
    3318:	a8 f0       	brcs	.+42     	; 0x3344 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    331a:	e8 89       	ldd	r30, Y+16	; 0x10
    331c:	f9 89       	ldd	r31, Y+17	; 0x11
    331e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3320:	60 e8       	ldi	r22, 0x80	; 128
    3322:	74 e8       	ldi	r23, 0x84	; 132
    3324:	8e e1       	ldi	r24, 0x1E	; 30
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a7 01       	movw	r20, r14
    332a:	96 01       	movw	r18, r12
    332c:	0e 94 0e 21 	call	0x421c	; 0x421c <__udivmodsi4>
    3330:	da 01       	movw	r26, r20
    3332:	c9 01       	movw	r24, r18
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	a1 09       	sbc	r26, r1
    3338:	b1 09       	sbc	r27, r1
    333a:	b6 95       	lsr	r27
    333c:	a7 95       	ror	r26
    333e:	97 95       	ror	r25
    3340:	87 95       	ror	r24
    3342:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3344:	ec 85       	ldd	r30, Y+12	; 0x0c
    3346:	fd 85       	ldd	r31, Y+13	; 0x0d
    3348:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    334a:	ee 85       	ldd	r30, Y+14	; 0x0e
    334c:	ff 85       	ldd	r31, Y+15	; 0x0f
    334e:	20 83       	st	Z, r18

  _written = false;
    3350:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3352:	ec 89       	ldd	r30, Y+20	; 0x14
    3354:	fd 89       	ldd	r31, Y+21	; 0x15
    3356:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3358:	ea 89       	ldd	r30, Y+18	; 0x12
    335a:	fb 89       	ldd	r31, Y+19	; 0x13
    335c:	80 81       	ld	r24, Z
    335e:	80 61       	ori	r24, 0x10	; 16
    3360:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3362:	ea 89       	ldd	r30, Y+18	; 0x12
    3364:	fb 89       	ldd	r31, Y+19	; 0x13
    3366:	80 81       	ld	r24, Z
    3368:	88 60       	ori	r24, 0x08	; 8
    336a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    336c:	ea 89       	ldd	r30, Y+18	; 0x12
    336e:	fb 89       	ldd	r31, Y+19	; 0x13
    3370:	80 81       	ld	r24, Z
    3372:	80 68       	ori	r24, 0x80	; 128
    3374:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3376:	ea 89       	ldd	r30, Y+18	; 0x12
    3378:	fb 89       	ldd	r31, Y+19	; 0x13
    337a:	80 81       	ld	r24, Z
    337c:	8f 7d       	andi	r24, 0xDF	; 223
    337e:	80 83       	st	Z, r24
}
    3380:	df 91       	pop	r29
    3382:	cf 91       	pop	r28
    3384:	1f 91       	pop	r17
    3386:	ff 90       	pop	r15
    3388:	ef 90       	pop	r14
    338a:	df 90       	pop	r13
    338c:	cf 90       	pop	r12
    338e:	08 95       	ret

00003390 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3390:	1f 92       	push	r1
    3392:	0f 92       	push	r0
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	0f 92       	push	r0
    3398:	11 24       	eor	r1, r1
    339a:	2f 93       	push	r18
    339c:	8f 93       	push	r24
    339e:	9f 93       	push	r25
    33a0:	ef 93       	push	r30
    33a2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    33a4:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <Serial+0x10>
    33a8:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <Serial+0x11>
    33ac:	80 81       	ld	r24, Z
    33ae:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <Serial+0x16>
    33b2:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <Serial+0x17>
    33b6:	82 fd       	sbrc	r24, 2
    33b8:	12 c0       	rjmp	.+36     	; 0x33de <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    33ba:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    33bc:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Serial+0x19>
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    33c4:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <Serial+0x1a>
    33c8:	82 17       	cp	r24, r18
    33ca:	51 f0       	breq	.+20     	; 0x33e0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    33cc:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <Serial+0x19>
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	ef 57       	subi	r30, 0x7F	; 127
    33d4:	fb 4f       	sbci	r31, 0xFB	; 251
    33d6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    33d8:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Serial+0x19>
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    33de:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    33e0:	ff 91       	pop	r31
    33e2:	ef 91       	pop	r30
    33e4:	9f 91       	pop	r25
    33e6:	8f 91       	pop	r24
    33e8:	2f 91       	pop	r18
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	0f 90       	pop	r0
    33f0:	1f 90       	pop	r1
    33f2:	18 95       	reti

000033f4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    33f4:	1f 92       	push	r1
    33f6:	0f 92       	push	r0
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	0f 92       	push	r0
    33fc:	11 24       	eor	r1, r1
    33fe:	2f 93       	push	r18
    3400:	3f 93       	push	r19
    3402:	4f 93       	push	r20
    3404:	5f 93       	push	r21
    3406:	6f 93       	push	r22
    3408:	7f 93       	push	r23
    340a:	8f 93       	push	r24
    340c:	9f 93       	push	r25
    340e:	af 93       	push	r26
    3410:	bf 93       	push	r27
    3412:	ef 93       	push	r30
    3414:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3416:	81 e8       	ldi	r24, 0x81	; 129
    3418:	94 e0       	ldi	r25, 0x04	; 4
    341a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    341e:	ff 91       	pop	r31
    3420:	ef 91       	pop	r30
    3422:	bf 91       	pop	r27
    3424:	af 91       	pop	r26
    3426:	9f 91       	pop	r25
    3428:	8f 91       	pop	r24
    342a:	7f 91       	pop	r23
    342c:	6f 91       	pop	r22
    342e:	5f 91       	pop	r21
    3430:	4f 91       	pop	r20
    3432:	3f 91       	pop	r19
    3434:	2f 91       	pop	r18
    3436:	0f 90       	pop	r0
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	0f 90       	pop	r0
    343c:	1f 90       	pop	r1
    343e:	18 95       	reti

00003440 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3440:	81 e8       	ldi	r24, 0x81	; 129
    3442:	94 e0       	ldi	r25, 0x04	; 4
    3444:	0e 94 9d 18 	call	0x313a	; 0x313a <_ZN14HardwareSerial9availableEv>
    3448:	21 e0       	ldi	r18, 0x01	; 1
    344a:	89 2b       	or	r24, r25
    344c:	09 f4       	brne	.+2      	; 0x3450 <_Z17Serial0_availablev+0x10>
    344e:	20 e0       	ldi	r18, 0x00	; 0
}
    3450:	82 2f       	mov	r24, r18
    3452:	08 95       	ret

00003454 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3454:	e1 e8       	ldi	r30, 0x81	; 129
    3456:	f4 e0       	ldi	r31, 0x04	; 4
    3458:	13 82       	std	Z+3, r1	; 0x03
    345a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    345c:	88 ee       	ldi	r24, 0xE8	; 232
    345e:	93 e0       	ldi	r25, 0x03	; 3
    3460:	a0 e0       	ldi	r26, 0x00	; 0
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	84 83       	std	Z+4, r24	; 0x04
    3466:	95 83       	std	Z+5, r25	; 0x05
    3468:	a6 83       	std	Z+6, r26	; 0x06
    346a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    346c:	82 e6       	ldi	r24, 0x62	; 98
    346e:	92 e0       	ldi	r25, 0x02	; 2
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	80 83       	st	Z, r24
    3474:	85 ec       	ldi	r24, 0xC5	; 197
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	95 87       	std	Z+13, r25	; 0x0d
    347a:	84 87       	std	Z+12, r24	; 0x0c
    347c:	84 ec       	ldi	r24, 0xC4	; 196
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	97 87       	std	Z+15, r25	; 0x0f
    3482:	86 87       	std	Z+14, r24	; 0x0e
    3484:	80 ec       	ldi	r24, 0xC0	; 192
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	91 8b       	std	Z+17, r25	; 0x11
    348a:	80 8b       	std	Z+16, r24	; 0x10
    348c:	81 ec       	ldi	r24, 0xC1	; 193
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	93 8b       	std	Z+19, r25	; 0x13
    3492:	82 8b       	std	Z+18, r24	; 0x12
    3494:	82 ec       	ldi	r24, 0xC2	; 194
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	95 8b       	std	Z+21, r25	; 0x15
    349a:	84 8b       	std	Z+20, r24	; 0x14
    349c:	86 ec       	ldi	r24, 0xC6	; 198
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	97 8b       	std	Z+23, r25	; 0x17
    34a2:	86 8b       	std	Z+22, r24	; 0x16
    34a4:	11 8e       	std	Z+25, r1	; 0x19
    34a6:	12 8e       	std	Z+26, r1	; 0x1a
    34a8:	13 8e       	std	Z+27, r1	; 0x1b
    34aa:	14 8e       	std	Z+28, r1	; 0x1c
    34ac:	08 95       	ret

000034ae <initVariant>:
    34ae:	08 95       	ret

000034b0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    34b0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <init>

	initVariant();
    34b4:	0e 94 57 1a 	call	0x34ae	; 0x34ae <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    34b8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    34bc:	cb ec       	ldi	r28, 0xCB	; 203
    34be:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    34c0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <loop>
		if (serialEventRun) serialEventRun();
    34c4:	20 97       	sbiw	r28, 0x00	; 0
    34c6:	e1 f3       	breq	.-8      	; 0x34c0 <main+0x10>
    34c8:	0e 94 cb 18 	call	0x3196	; 0x3196 <_Z14serialEventRunv>
    34cc:	f9 cf       	rjmp	.-14     	; 0x34c0 <main+0x10>

000034ce <_Znwj>:
    34ce:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <malloc>

000034d2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    34d2:	cf 92       	push	r12
    34d4:	df 92       	push	r13
    34d6:	ef 92       	push	r14
    34d8:	ff 92       	push	r15
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	6c 01       	movw	r12, r24
    34e4:	7a 01       	movw	r14, r20
    34e6:	8b 01       	movw	r16, r22
    34e8:	c0 e0       	ldi	r28, 0x00	; 0
    34ea:	d0 e0       	ldi	r29, 0x00	; 0
    34ec:	ce 15       	cp	r28, r14
    34ee:	df 05       	cpc	r29, r15
    34f0:	81 f0       	breq	.+32     	; 0x3512 <_ZN5Print5writeEPKhj+0x40>
    34f2:	d8 01       	movw	r26, r16
    34f4:	6d 91       	ld	r22, X+
    34f6:	8d 01       	movw	r16, r26
    34f8:	d6 01       	movw	r26, r12
    34fa:	ed 91       	ld	r30, X+
    34fc:	fc 91       	ld	r31, X
    34fe:	01 90       	ld	r0, Z+
    3500:	f0 81       	ld	r31, Z
    3502:	e0 2d       	mov	r30, r0
    3504:	c6 01       	movw	r24, r12
    3506:	09 95       	icall
    3508:	89 2b       	or	r24, r25
    350a:	11 f0       	breq	.+4      	; 0x3510 <_ZN5Print5writeEPKhj+0x3e>
    350c:	21 96       	adiw	r28, 0x01	; 1
    350e:	ee cf       	rjmp	.-36     	; 0x34ec <_ZN5Print5writeEPKhj+0x1a>
    3510:	7e 01       	movw	r14, r28
    3512:	c7 01       	movw	r24, r14
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
    3524:	08 95       	ret

00003526 <_ZN5Print5writeEPKc>:
    3526:	61 15       	cp	r22, r1
    3528:	71 05       	cpc	r23, r1
    352a:	79 f0       	breq	.+30     	; 0x354a <_ZN5Print5writeEPKc+0x24>
    352c:	fb 01       	movw	r30, r22
    352e:	01 90       	ld	r0, Z+
    3530:	00 20       	and	r0, r0
    3532:	e9 f7       	brne	.-6      	; 0x352e <_ZN5Print5writeEPKc+0x8>
    3534:	31 97       	sbiw	r30, 0x01	; 1
    3536:	af 01       	movw	r20, r30
    3538:	46 1b       	sub	r20, r22
    353a:	57 0b       	sbc	r21, r23
    353c:	dc 01       	movw	r26, r24
    353e:	ed 91       	ld	r30, X+
    3540:	fc 91       	ld	r31, X
    3542:	02 80       	ldd	r0, Z+2	; 0x02
    3544:	f3 81       	ldd	r31, Z+3	; 0x03
    3546:	e0 2d       	mov	r30, r0
    3548:	09 94       	ijmp
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	08 95       	ret

00003550 <_ZN5Print5printEPK19__FlashStringHelper>:
    3550:	ef 92       	push	r14
    3552:	ff 92       	push	r15
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	8c 01       	movw	r16, r24
    355e:	7b 01       	movw	r14, r22
    3560:	c0 e0       	ldi	r28, 0x00	; 0
    3562:	d0 e0       	ldi	r29, 0x00	; 0
    3564:	f7 01       	movw	r30, r14
    3566:	ec 0f       	add	r30, r28
    3568:	fd 1f       	adc	r31, r29
    356a:	64 91       	lpm	r22, Z
    356c:	66 23       	and	r22, r22
    356e:	61 f0       	breq	.+24     	; 0x3588 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3570:	d8 01       	movw	r26, r16
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	01 90       	ld	r0, Z+
    3578:	f0 81       	ld	r31, Z
    357a:	e0 2d       	mov	r30, r0
    357c:	c8 01       	movw	r24, r16
    357e:	09 95       	icall
    3580:	89 2b       	or	r24, r25
    3582:	11 f0       	breq	.+4      	; 0x3588 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3584:	21 96       	adiw	r28, 0x01	; 1
    3586:	ee cf       	rjmp	.-36     	; 0x3564 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3588:	ce 01       	movw	r24, r28
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	08 95       	ret

00003598 <_ZN5Print5printEPKc>:
    3598:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <_ZN5Print5writeEPKc>

0000359c <_ZN5Print5printEc>:
    359c:	dc 01       	movw	r26, r24
    359e:	ed 91       	ld	r30, X+
    35a0:	fc 91       	ld	r31, X
    35a2:	01 90       	ld	r0, Z+
    35a4:	f0 81       	ld	r31, Z
    35a6:	e0 2d       	mov	r30, r0
    35a8:	09 94       	ijmp

000035aa <_ZN5Print7printlnEv>:
    35aa:	6e e6       	ldi	r22, 0x6E	; 110
    35ac:	72 e0       	ldi	r23, 0x02	; 2
    35ae:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <_ZN5Print5writeEPKc>

000035b2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	ec 01       	movw	r28, r24
    35bc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print5printEPK19__FlashStringHelper>
    35c0:	8c 01       	movw	r16, r24
    35c2:	ce 01       	movw	r24, r28
    35c4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN5Print7printlnEv>
    35c8:	80 0f       	add	r24, r16
    35ca:	91 1f       	adc	r25, r17
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	08 95       	ret

000035d6 <_ZN5Print7printlnEPKc>:
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	ec 01       	movw	r28, r24
    35e0:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN5Print5writeEPKc>
    35e4:	8c 01       	movw	r16, r24
    35e6:	ce 01       	movw	r24, r28
    35e8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN5Print7printlnEv>
    35ec:	80 0f       	add	r24, r16
    35ee:	91 1f       	adc	r25, r17
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	08 95       	ret

000035fa <_ZN5Print7printlnEc>:
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
    3604:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print5printEc>
    3608:	8c 01       	movw	r16, r24
    360a:	ce 01       	movw	r24, r28
    360c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN5Print7printlnEv>
    3610:	80 0f       	add	r24, r16
    3612:	91 1f       	adc	r25, r17
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	08 95       	ret

0000361e <_ZN5Print11printNumberEmh>:
    361e:	8f 92       	push	r8
    3620:	9f 92       	push	r9
    3622:	af 92       	push	r10
    3624:	bf 92       	push	r11
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	a1 97       	sbiw	r28, 0x21	; 33
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	7c 01       	movw	r14, r24
    3644:	fa 01       	movw	r30, r20
    3646:	cb 01       	movw	r24, r22
    3648:	19 a2       	std	Y+33, r1	; 0x21
    364a:	22 30       	cpi	r18, 0x02	; 2
    364c:	08 f4       	brcc	.+2      	; 0x3650 <_ZN5Print11printNumberEmh+0x32>
    364e:	2a e0       	ldi	r18, 0x0A	; 10
    3650:	8e 01       	movw	r16, r28
    3652:	0f 5d       	subi	r16, 0xDF	; 223
    3654:	1f 4f       	sbci	r17, 0xFF	; 255
    3656:	82 2e       	mov	r8, r18
    3658:	91 2c       	mov	r9, r1
    365a:	a1 2c       	mov	r10, r1
    365c:	b1 2c       	mov	r11, r1
    365e:	bf 01       	movw	r22, r30
    3660:	a5 01       	movw	r20, r10
    3662:	94 01       	movw	r18, r8
    3664:	0e 94 0e 21 	call	0x421c	; 0x421c <__udivmodsi4>
    3668:	f9 01       	movw	r30, r18
    366a:	ca 01       	movw	r24, r20
    366c:	01 50       	subi	r16, 0x01	; 1
    366e:	11 09       	sbc	r17, r1
    3670:	6a 30       	cpi	r22, 0x0A	; 10
    3672:	10 f4       	brcc	.+4      	; 0x3678 <_ZN5Print11printNumberEmh+0x5a>
    3674:	60 5d       	subi	r22, 0xD0	; 208
    3676:	01 c0       	rjmp	.+2      	; 0x367a <_ZN5Print11printNumberEmh+0x5c>
    3678:	69 5c       	subi	r22, 0xC9	; 201
    367a:	d8 01       	movw	r26, r16
    367c:	6c 93       	st	X, r22
    367e:	23 2b       	or	r18, r19
    3680:	24 2b       	or	r18, r20
    3682:	25 2b       	or	r18, r21
    3684:	61 f7       	brne	.-40     	; 0x365e <_ZN5Print11printNumberEmh+0x40>
    3686:	b8 01       	movw	r22, r16
    3688:	c7 01       	movw	r24, r14
    368a:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN5Print5writeEPKc>
    368e:	a1 96       	adiw	r28, 0x21	; 33
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	ff 90       	pop	r15
    36a4:	ef 90       	pop	r14
    36a6:	bf 90       	pop	r11
    36a8:	af 90       	pop	r10
    36aa:	9f 90       	pop	r9
    36ac:	8f 90       	pop	r8
    36ae:	08 95       	ret

000036b0 <_ZN5Print5printEmi>:
    36b0:	21 15       	cp	r18, r1
    36b2:	31 05       	cpc	r19, r1
    36b4:	41 f4       	brne	.+16     	; 0x36c6 <_ZN5Print5printEmi+0x16>
    36b6:	dc 01       	movw	r26, r24
    36b8:	ed 91       	ld	r30, X+
    36ba:	fc 91       	ld	r31, X
    36bc:	01 90       	ld	r0, Z+
    36be:	f0 81       	ld	r31, Z
    36c0:	e0 2d       	mov	r30, r0
    36c2:	64 2f       	mov	r22, r20
    36c4:	09 94       	ijmp
    36c6:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <_ZN5Print11printNumberEmh>

000036ca <_ZN5Print5printEhi>:
    36ca:	9a 01       	movw	r18, r20
    36cc:	46 2f       	mov	r20, r22
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <_ZN5Print5printEmi>

000036d8 <_ZN5Print7printlnEhi>:
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	ec 01       	movw	r28, r24
    36e2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN5Print5printEhi>
    36e6:	8c 01       	movw	r16, r24
    36e8:	ce 01       	movw	r24, r28
    36ea:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN5Print7printlnEv>
    36ee:	80 0f       	add	r24, r16
    36f0:	91 1f       	adc	r25, r17
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	08 95       	ret

000036fc <_ZN5Print5printEji>:
    36fc:	9a 01       	movw	r18, r20
    36fe:	ab 01       	movw	r20, r22
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	70 e0       	ldi	r23, 0x00	; 0
    3704:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <_ZN5Print5printEmi>

00003708 <_ZN5Print7printlnEji>:
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	ec 01       	movw	r28, r24
    3712:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print5printEji>
    3716:	8c 01       	movw	r16, r24
    3718:	ce 01       	movw	r24, r28
    371a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN5Print7printlnEv>
    371e:	80 0f       	add	r24, r16
    3720:	91 1f       	adc	r25, r17
    3722:	df 91       	pop	r29
    3724:	cf 91       	pop	r28
    3726:	1f 91       	pop	r17
    3728:	0f 91       	pop	r16
    372a:	08 95       	ret

0000372c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    372c:	cf 92       	push	r12
    372e:	df 92       	push	r13
    3730:	ef 92       	push	r14
    3732:	ff 92       	push	r15
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	cf 93       	push	r28
    373a:	df 93       	push	r29
  if (base == 0) {
    373c:	21 15       	cp	r18, r1
    373e:	31 05       	cpc	r19, r1
    3740:	81 f4       	brne	.+32     	; 0x3762 <_ZN5Print5printEli+0x36>
    return write(n);
    3742:	dc 01       	movw	r26, r24
    3744:	ed 91       	ld	r30, X+
    3746:	fc 91       	ld	r31, X
    3748:	01 90       	ld	r0, Z+
    374a:	f0 81       	ld	r31, Z
    374c:	e0 2d       	mov	r30, r0
    374e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3760:	09 94       	ijmp
  } else if (base == 10) {
    3762:	2a 30       	cpi	r18, 0x0A	; 10
    3764:	31 05       	cpc	r19, r1
    3766:	01 f5       	brne	.+64     	; 0x37a8 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3768:	77 ff       	sbrs	r23, 7
    376a:	1d c0       	rjmp	.+58     	; 0x37a6 <_ZN5Print5printEli+0x7a>
    376c:	6a 01       	movw	r12, r20
    376e:	7b 01       	movw	r14, r22
    3770:	ec 01       	movw	r28, r24
      int t = print('-');
    3772:	6d e2       	ldi	r22, 0x2D	; 45
    3774:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print5printEc>
    3778:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    377a:	44 27       	eor	r20, r20
    377c:	55 27       	eor	r21, r21
    377e:	ba 01       	movw	r22, r20
    3780:	4c 19       	sub	r20, r12
    3782:	5d 09       	sbc	r21, r13
    3784:	6e 09       	sbc	r22, r14
    3786:	7f 09       	sbc	r23, r15
    3788:	2a e0       	ldi	r18, 0x0A	; 10
    378a:	ce 01       	movw	r24, r28
    378c:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print11printNumberEmh>
    3790:	80 0f       	add	r24, r16
    3792:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	ff 90       	pop	r15
    379e:	ef 90       	pop	r14
    37a0:	df 90       	pop	r13
    37a2:	cf 90       	pop	r12
    37a4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    37a6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    37a8:	df 91       	pop	r29
    37aa:	cf 91       	pop	r28
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	df 90       	pop	r13
    37b6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    37b8:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <_ZN5Print11printNumberEmh>

000037bc <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    37bc:	9a 01       	movw	r18, r20
  return print((long) n, base);
    37be:	ab 01       	movw	r20, r22
    37c0:	77 0f       	add	r23, r23
    37c2:	66 0b       	sbc	r22, r22
    37c4:	77 0b       	sbc	r23, r23
    37c6:	0c 94 96 1b 	jmp	0x372c	; 0x372c <_ZN5Print5printEli>

000037ca <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    37d4:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN5Print5printEii>
    37d8:	8c 01       	movw	r16, r24
  n += println();
    37da:	ce 01       	movw	r24, r28
    37dc:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN5Print7printlnEv>
  return n;
}
    37e0:	80 0f       	add	r24, r16
    37e2:	91 1f       	adc	r25, r17
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	08 95       	ret

000037ee <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    37ee:	1f 92       	push	r1
    37f0:	0f 92       	push	r0
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	0f 92       	push	r0
    37f6:	11 24       	eor	r1, r1
    37f8:	2f 93       	push	r18
    37fa:	3f 93       	push	r19
    37fc:	8f 93       	push	r24
    37fe:	9f 93       	push	r25
    3800:	af 93       	push	r26
    3802:	bf 93       	push	r27
    3804:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <timer0_millis>
    3808:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <timer0_millis+0x1>
    380c:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <timer0_millis+0x2>
    3810:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <timer0_millis+0x3>
    3814:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <timer0_fract>
    3818:	23 e0       	ldi	r18, 0x03	; 3
    381a:	23 0f       	add	r18, r19
    381c:	2d 37       	cpi	r18, 0x7D	; 125
    381e:	20 f4       	brcc	.+8      	; 0x3828 <__vector_16+0x3a>
    3820:	01 96       	adiw	r24, 0x01	; 1
    3822:	a1 1d       	adc	r26, r1
    3824:	b1 1d       	adc	r27, r1
    3826:	05 c0       	rjmp	.+10     	; 0x3832 <__vector_16+0x44>
    3828:	26 e8       	ldi	r18, 0x86	; 134
    382a:	23 0f       	add	r18, r19
    382c:	02 96       	adiw	r24, 0x02	; 2
    382e:	a1 1d       	adc	r26, r1
    3830:	b1 1d       	adc	r27, r1
    3832:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <timer0_fract>
    3836:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <timer0_millis>
    383a:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <timer0_millis+0x1>
    383e:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <timer0_millis+0x2>
    3842:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <timer0_millis+0x3>
    3846:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <timer0_overflow_count>
    384a:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <timer0_overflow_count+0x1>
    384e:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <timer0_overflow_count+0x2>
    3852:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <timer0_overflow_count+0x3>
    3856:	01 96       	adiw	r24, 0x01	; 1
    3858:	a1 1d       	adc	r26, r1
    385a:	b1 1d       	adc	r27, r1
    385c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <timer0_overflow_count>
    3860:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <timer0_overflow_count+0x1>
    3864:	a0 93 25 05 	sts	0x0525, r26	; 0x800525 <timer0_overflow_count+0x2>
    3868:	b0 93 26 05 	sts	0x0526, r27	; 0x800526 <timer0_overflow_count+0x3>
    386c:	bf 91       	pop	r27
    386e:	af 91       	pop	r26
    3870:	9f 91       	pop	r25
    3872:	8f 91       	pop	r24
    3874:	3f 91       	pop	r19
    3876:	2f 91       	pop	r18
    3878:	0f 90       	pop	r0
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	0f 90       	pop	r0
    387e:	1f 90       	pop	r1
    3880:	18 95       	reti

00003882 <micros>:
    3882:	3f b7       	in	r19, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <timer0_overflow_count>
    388a:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <timer0_overflow_count+0x1>
    388e:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <timer0_overflow_count+0x2>
    3892:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <timer0_overflow_count+0x3>
    3896:	26 b5       	in	r18, 0x26	; 38
    3898:	a8 9b       	sbis	0x15, 0	; 21
    389a:	05 c0       	rjmp	.+10     	; 0x38a6 <micros+0x24>
    389c:	2f 3f       	cpi	r18, 0xFF	; 255
    389e:	19 f0       	breq	.+6      	; 0x38a6 <micros+0x24>
    38a0:	01 96       	adiw	r24, 0x01	; 1
    38a2:	a1 1d       	adc	r26, r1
    38a4:	b1 1d       	adc	r27, r1
    38a6:	3f bf       	out	0x3f, r19	; 63
    38a8:	ba 2f       	mov	r27, r26
    38aa:	a9 2f       	mov	r26, r25
    38ac:	98 2f       	mov	r25, r24
    38ae:	88 27       	eor	r24, r24
    38b0:	82 0f       	add	r24, r18
    38b2:	91 1d       	adc	r25, r1
    38b4:	a1 1d       	adc	r26, r1
    38b6:	b1 1d       	adc	r27, r1
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	42 e0       	ldi	r20, 0x02	; 2
    38be:	66 0f       	add	r22, r22
    38c0:	77 1f       	adc	r23, r23
    38c2:	88 1f       	adc	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	4a 95       	dec	r20
    38c8:	d1 f7       	brne	.-12     	; 0x38be <micros+0x3c>
    38ca:	08 95       	ret

000038cc <delay>:
    38cc:	8f 92       	push	r8
    38ce:	9f 92       	push	r9
    38d0:	af 92       	push	r10
    38d2:	bf 92       	push	r11
    38d4:	cf 92       	push	r12
    38d6:	df 92       	push	r13
    38d8:	ef 92       	push	r14
    38da:	ff 92       	push	r15
    38dc:	6b 01       	movw	r12, r22
    38de:	7c 01       	movw	r14, r24
    38e0:	0e 94 41 1c 	call	0x3882	; 0x3882 <micros>
    38e4:	4b 01       	movw	r8, r22
    38e6:	5c 01       	movw	r10, r24
    38e8:	c1 14       	cp	r12, r1
    38ea:	d1 04       	cpc	r13, r1
    38ec:	e1 04       	cpc	r14, r1
    38ee:	f1 04       	cpc	r15, r1
    38f0:	01 f1       	breq	.+64     	; 0x3932 <delay+0x66>
    38f2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <yield>
    38f6:	0e 94 41 1c 	call	0x3882	; 0x3882 <micros>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	88 19       	sub	r24, r8
    3900:	99 09       	sbc	r25, r9
    3902:	aa 09       	sbc	r26, r10
    3904:	bb 09       	sbc	r27, r11
    3906:	88 3e       	cpi	r24, 0xE8	; 232
    3908:	93 40       	sbci	r25, 0x03	; 3
    390a:	a1 05       	cpc	r26, r1
    390c:	b1 05       	cpc	r27, r1
    390e:	60 f3       	brcs	.-40     	; 0x38e8 <delay+0x1c>
    3910:	21 e0       	ldi	r18, 0x01	; 1
    3912:	c2 1a       	sub	r12, r18
    3914:	d1 08       	sbc	r13, r1
    3916:	e1 08       	sbc	r14, r1
    3918:	f1 08       	sbc	r15, r1
    391a:	88 ee       	ldi	r24, 0xE8	; 232
    391c:	88 0e       	add	r8, r24
    391e:	83 e0       	ldi	r24, 0x03	; 3
    3920:	98 1e       	adc	r9, r24
    3922:	a1 1c       	adc	r10, r1
    3924:	b1 1c       	adc	r11, r1
    3926:	c1 14       	cp	r12, r1
    3928:	d1 04       	cpc	r13, r1
    392a:	e1 04       	cpc	r14, r1
    392c:	f1 04       	cpc	r15, r1
    392e:	19 f7       	brne	.-58     	; 0x38f6 <delay+0x2a>
    3930:	db cf       	rjmp	.-74     	; 0x38e8 <delay+0x1c>
    3932:	ff 90       	pop	r15
    3934:	ef 90       	pop	r14
    3936:	df 90       	pop	r13
    3938:	cf 90       	pop	r12
    393a:	bf 90       	pop	r11
    393c:	af 90       	pop	r10
    393e:	9f 90       	pop	r9
    3940:	8f 90       	pop	r8
    3942:	08 95       	ret

00003944 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3944:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3946:	84 b5       	in	r24, 0x24	; 36
    3948:	82 60       	ori	r24, 0x02	; 2
    394a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    394c:	84 b5       	in	r24, 0x24	; 36
    394e:	81 60       	ori	r24, 0x01	; 1
    3950:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3952:	85 b5       	in	r24, 0x25	; 37
    3954:	82 60       	ori	r24, 0x02	; 2
    3956:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3958:	85 b5       	in	r24, 0x25	; 37
    395a:	81 60       	ori	r24, 0x01	; 1
    395c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    395e:	ee e6       	ldi	r30, 0x6E	; 110
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	81 60       	ori	r24, 0x01	; 1
    3966:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3968:	e1 e8       	ldi	r30, 0x81	; 129
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    396e:	80 81       	ld	r24, Z
    3970:	82 60       	ori	r24, 0x02	; 2
    3972:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3974:	80 81       	ld	r24, Z
    3976:	81 60       	ori	r24, 0x01	; 1
    3978:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    397a:	e0 e8       	ldi	r30, 0x80	; 128
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	80 81       	ld	r24, Z
    3980:	81 60       	ori	r24, 0x01	; 1
    3982:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3984:	e1 eb       	ldi	r30, 0xB1	; 177
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	84 60       	ori	r24, 0x04	; 4
    398c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    398e:	e0 eb       	ldi	r30, 0xB0	; 176
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	81 60       	ori	r24, 0x01	; 1
    3996:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3998:	ea e7       	ldi	r30, 0x7A	; 122
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	84 60       	ori	r24, 0x04	; 4
    39a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    39a2:	80 81       	ld	r24, Z
    39a4:	82 60       	ori	r24, 0x02	; 2
    39a6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    39a8:	80 81       	ld	r24, Z
    39aa:	81 60       	ori	r24, 0x01	; 1
    39ac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    39ae:	80 81       	ld	r24, Z
    39b0:	80 68       	ori	r24, 0x80	; 128
    39b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    39b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    39b8:	08 95       	ret

000039ba <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    39ba:	8e 30       	cpi	r24, 0x0E	; 14
    39bc:	08 f0       	brcs	.+2      	; 0x39c0 <analogRead+0x6>
    39be:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    39c0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    39c4:	90 e4       	ldi	r25, 0x40	; 64
    39c6:	29 9f       	mul	r18, r25
    39c8:	90 01       	movw	r18, r0
    39ca:	11 24       	eor	r1, r1
    39cc:	87 70       	andi	r24, 0x07	; 7
    39ce:	82 2b       	or	r24, r18
    39d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    39d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    39d8:	80 64       	ori	r24, 0x40	; 64
    39da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    39de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    39e2:	86 fd       	sbrc	r24, 6
    39e4:	fc cf       	rjmp	.-8      	; 0x39de <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    39e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    39ea:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    39ee:	90 e0       	ldi	r25, 0x00	; 0
}
    39f0:	92 2b       	or	r25, r18
    39f2:	08 95       	ret

000039f4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    39f4:	83 30       	cpi	r24, 0x03	; 3
    39f6:	81 f0       	breq	.+32     	; 0x3a18 <turnOffPWM+0x24>
    39f8:	28 f4       	brcc	.+10     	; 0x3a04 <turnOffPWM+0x10>
    39fa:	81 30       	cpi	r24, 0x01	; 1
    39fc:	99 f0       	breq	.+38     	; 0x3a24 <turnOffPWM+0x30>
    39fe:	82 30       	cpi	r24, 0x02	; 2
    3a00:	a1 f0       	breq	.+40     	; 0x3a2a <turnOffPWM+0x36>
    3a02:	08 95       	ret
    3a04:	87 30       	cpi	r24, 0x07	; 7
    3a06:	a9 f0       	breq	.+42     	; 0x3a32 <turnOffPWM+0x3e>
    3a08:	88 30       	cpi	r24, 0x08	; 8
    3a0a:	b9 f0       	breq	.+46     	; 0x3a3a <turnOffPWM+0x46>
    3a0c:	84 30       	cpi	r24, 0x04	; 4
    3a0e:	d1 f4       	brne	.+52     	; 0x3a44 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a10:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a14:	8f 7d       	andi	r24, 0xDF	; 223
    3a16:	03 c0       	rjmp	.+6      	; 0x3a1e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3a18:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a1c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a1e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a22:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3a24:	84 b5       	in	r24, 0x24	; 36
    3a26:	8f 77       	andi	r24, 0x7F	; 127
    3a28:	02 c0       	rjmp	.+4      	; 0x3a2e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3a2a:	84 b5       	in	r24, 0x24	; 36
    3a2c:	8f 7d       	andi	r24, 0xDF	; 223
    3a2e:	84 bd       	out	0x24, r24	; 36
    3a30:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3a32:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a36:	8f 77       	andi	r24, 0x7F	; 127
    3a38:	03 c0       	rjmp	.+6      	; 0x3a40 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3a3a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a3e:	8f 7d       	andi	r24, 0xDF	; 223
    3a40:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3a44:	08 95       	ret

00003a46 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	e5 51       	subi	r30, 0x15	; 21
    3a50:	f8 4f       	sbci	r31, 0xF8	; 248
    3a52:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3a54:	fc 01       	movw	r30, r24
    3a56:	e1 50       	subi	r30, 0x01	; 1
    3a58:	f8 4f       	sbci	r31, 0xF8	; 248
    3a5a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3a5c:	88 23       	and	r24, r24
    3a5e:	61 f1       	breq	.+88     	; 0x3ab8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	fc 01       	movw	r30, r24
    3a68:	e9 5d       	subi	r30, 0xD9	; 217
    3a6a:	f7 4f       	sbci	r31, 0xF7	; 247
    3a6c:	c5 91       	lpm	r28, Z+
    3a6e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3a70:	fc 01       	movw	r30, r24
    3a72:	e3 5e       	subi	r30, 0xE3	; 227
    3a74:	f7 4f       	sbci	r31, 0xF7	; 247
    3a76:	a5 91       	lpm	r26, Z+
    3a78:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3a7a:	61 11       	cpse	r22, r1
    3a7c:	09 c0       	rjmp	.+18     	; 0x3a90 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3a7e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a80:	f8 94       	cli
		*reg &= ~bit;
    3a82:	88 81       	ld	r24, Y
    3a84:	20 95       	com	r18
    3a86:	82 23       	and	r24, r18
    3a88:	88 83       	st	Y, r24
		*out &= ~bit;
    3a8a:	ec 91       	ld	r30, X
    3a8c:	2e 23       	and	r18, r30
    3a8e:	0b c0       	rjmp	.+22     	; 0x3aa6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3a90:	62 30       	cpi	r22, 0x02	; 2
    3a92:	61 f4       	brne	.+24     	; 0x3aac <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3a94:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a96:	f8 94       	cli
		*reg &= ~bit;
    3a98:	88 81       	ld	r24, Y
    3a9a:	32 2f       	mov	r19, r18
    3a9c:	30 95       	com	r19
    3a9e:	83 23       	and	r24, r19
    3aa0:	88 83       	st	Y, r24
		*out |= bit;
    3aa2:	ec 91       	ld	r30, X
    3aa4:	2e 2b       	or	r18, r30
    3aa6:	2c 93       	st	X, r18
		SREG = oldSREG;
    3aa8:	9f bf       	out	0x3f, r25	; 63
    3aaa:	06 c0       	rjmp	.+12     	; 0x3ab8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3aac:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3aae:	f8 94       	cli
		*reg |= bit;
    3ab0:	e8 81       	ld	r30, Y
    3ab2:	2e 2b       	or	r18, r30
    3ab4:	28 83       	st	Y, r18
		SREG = oldSREG;
    3ab6:	8f bf       	out	0x3f, r24	; 63
	}
}
    3ab8:	df 91       	pop	r29
    3aba:	cf 91       	pop	r28
    3abc:	08 95       	ret

00003abe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3abe:	1f 93       	push	r17
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3ac4:	28 2f       	mov	r18, r24
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	f9 01       	movw	r30, r18
    3aca:	e9 52       	subi	r30, 0x29	; 41
    3acc:	f8 4f       	sbci	r31, 0xF8	; 248
    3ace:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3ad0:	f9 01       	movw	r30, r18
    3ad2:	e5 51       	subi	r30, 0x15	; 21
    3ad4:	f8 4f       	sbci	r31, 0xF8	; 248
    3ad6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3ad8:	f9 01       	movw	r30, r18
    3ada:	e1 50       	subi	r30, 0x01	; 1
    3adc:	f8 4f       	sbci	r31, 0xF8	; 248
    3ade:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3ae0:	cc 23       	and	r28, r28
    3ae2:	c1 f0       	breq	.+48     	; 0x3b14 <digitalWrite+0x56>
    3ae4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3ae6:	81 11       	cpse	r24, r1
    3ae8:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <turnOffPWM>

	out = portOutputRegister(port);
    3aec:	ec 2f       	mov	r30, r28
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	ee 0f       	add	r30, r30
    3af2:	ff 1f       	adc	r31, r31
    3af4:	e3 5e       	subi	r30, 0xE3	; 227
    3af6:	f7 4f       	sbci	r31, 0xF7	; 247
    3af8:	a5 91       	lpm	r26, Z+
    3afa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3afc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3afe:	f8 94       	cli

	if (val == LOW) {
    3b00:	11 11       	cpse	r17, r1
    3b02:	04 c0       	rjmp	.+8      	; 0x3b0c <digitalWrite+0x4e>
		*out &= ~bit;
    3b04:	8c 91       	ld	r24, X
    3b06:	d0 95       	com	r29
    3b08:	d8 23       	and	r29, r24
    3b0a:	02 c0       	rjmp	.+4      	; 0x3b10 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3b0c:	ec 91       	ld	r30, X
    3b0e:	de 2b       	or	r29, r30
    3b10:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3b12:	9f bf       	out	0x3f, r25	; 63
}
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	1f 91       	pop	r17
    3b1a:	08 95       	ret

00003b1c <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	80 81       	ld	r24, Z
    3b20:	91 81       	ldd	r25, Z+1	; 0x01
    3b22:	0c 94 ed 21 	jmp	0x43da	; 0x43da <free>

00003b26 <_ZN6String10invalidateEv>:
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
    3b2a:	ec 01       	movw	r28, r24
    3b2c:	88 81       	ld	r24, Y
    3b2e:	99 81       	ldd	r25, Y+1	; 0x01
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	11 f0       	breq	.+4      	; 0x3b38 <_ZN6String10invalidateEv+0x12>
    3b34:	0e 94 ed 21 	call	0x43da	; 0x43da <free>
    3b38:	19 82       	std	Y+1, r1	; 0x01
    3b3a:	18 82       	st	Y, r1
    3b3c:	1d 82       	std	Y+5, r1	; 0x05
    3b3e:	1c 82       	std	Y+4, r1	; 0x04
    3b40:	1b 82       	std	Y+3, r1	; 0x03
    3b42:	1a 82       	std	Y+2, r1	; 0x02
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <_ZN6String12changeBufferEj>:
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	ec 01       	movw	r28, r24
    3b54:	8b 01       	movw	r16, r22
    3b56:	6f 5f       	subi	r22, 0xFF	; 255
    3b58:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5a:	88 81       	ld	r24, Y
    3b5c:	99 81       	ldd	r25, Y+1	; 0x01
    3b5e:	0e 94 76 22 	call	0x44ec	; 0x44ec <realloc>
    3b62:	00 97       	sbiw	r24, 0x00	; 0
    3b64:	31 f0       	breq	.+12     	; 0x3b72 <_ZN6String12changeBufferEj+0x28>
    3b66:	99 83       	std	Y+1, r25	; 0x01
    3b68:	88 83       	st	Y, r24
    3b6a:	1b 83       	std	Y+3, r17	; 0x03
    3b6c:	0a 83       	std	Y+2, r16	; 0x02
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	01 c0       	rjmp	.+2      	; 0x3b74 <_ZN6String12changeBufferEj+0x2a>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	df 91       	pop	r29
    3b76:	cf 91       	pop	r28
    3b78:	1f 91       	pop	r17
    3b7a:	0f 91       	pop	r16
    3b7c:	08 95       	ret

00003b7e <_ZN6String7reserveEj>:
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	ec 01       	movw	r28, r24
    3b84:	88 81       	ld	r24, Y
    3b86:	99 81       	ldd	r25, Y+1	; 0x01
    3b88:	89 2b       	or	r24, r25
    3b8a:	29 f0       	breq	.+10     	; 0x3b96 <_ZN6String7reserveEj+0x18>
    3b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b90:	86 17       	cp	r24, r22
    3b92:	97 07       	cpc	r25, r23
    3b94:	60 f4       	brcc	.+24     	; 0x3bae <_ZN6String7reserveEj+0x30>
    3b96:	ce 01       	movw	r24, r28
    3b98:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <_ZN6String12changeBufferEj>
    3b9c:	88 23       	and	r24, r24
    3b9e:	41 f0       	breq	.+16     	; 0x3bb0 <_ZN6String7reserveEj+0x32>
    3ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba4:	89 2b       	or	r24, r25
    3ba6:	19 f4       	brne	.+6      	; 0x3bae <_ZN6String7reserveEj+0x30>
    3ba8:	e8 81       	ld	r30, Y
    3baa:	f9 81       	ldd	r31, Y+1	; 0x01
    3bac:	10 82       	st	Z, r1
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <_ZN6String4copyEPKcj>:
    3bb6:	ef 92       	push	r14
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	ec 01       	movw	r28, r24
    3bc4:	7b 01       	movw	r14, r22
    3bc6:	8a 01       	movw	r16, r20
    3bc8:	ba 01       	movw	r22, r20
    3bca:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <_ZN6String7reserveEj>
    3bce:	81 11       	cpse	r24, r1
    3bd0:	04 c0       	rjmp	.+8      	; 0x3bda <_ZN6String4copyEPKcj+0x24>
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_ZN6String10invalidateEv>
    3bd8:	07 c0       	rjmp	.+14     	; 0x3be8 <_ZN6String4copyEPKcj+0x32>
    3bda:	1d 83       	std	Y+5, r17	; 0x05
    3bdc:	0c 83       	std	Y+4, r16	; 0x04
    3bde:	b7 01       	movw	r22, r14
    3be0:	88 81       	ld	r24, Y
    3be2:	99 81       	ldd	r25, Y+1	; 0x01
    3be4:	0e 94 9a 23 	call	0x4734	; 0x4734 <strcpy>
    3be8:	ce 01       	movw	r24, r28
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	08 95       	ret

00003bf8 <_ZN6StringC1EPKc>:
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	11 82       	std	Z+1, r1	; 0x01
    3bfc:	10 82       	st	Z, r1
    3bfe:	13 82       	std	Z+3, r1	; 0x03
    3c00:	12 82       	std	Z+2, r1	; 0x02
    3c02:	15 82       	std	Z+5, r1	; 0x05
    3c04:	14 82       	std	Z+4, r1	; 0x04
    3c06:	61 15       	cp	r22, r1
    3c08:	71 05       	cpc	r23, r1
    3c0a:	51 f0       	breq	.+20     	; 0x3c20 <_ZN6StringC1EPKc+0x28>
    3c0c:	fb 01       	movw	r30, r22
    3c0e:	01 90       	ld	r0, Z+
    3c10:	00 20       	and	r0, r0
    3c12:	e9 f7       	brne	.-6      	; 0x3c0e <_ZN6StringC1EPKc+0x16>
    3c14:	31 97       	sbiw	r30, 0x01	; 1
    3c16:	af 01       	movw	r20, r30
    3c18:	46 1b       	sub	r20, r22
    3c1a:	57 0b       	sbc	r21, r23
    3c1c:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <_ZN6String4copyEPKcj>
    3c20:	08 95       	ret

00003c22 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    3c22:	0f 93       	push	r16
    3c24:	1f 93       	push	r17
    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	eb 01       	movw	r28, r22
	if (buffer) {
    3c2e:	fc 01       	movw	r30, r24
    3c30:	80 81       	ld	r24, Z
    3c32:	91 81       	ldd	r25, Z+1	; 0x01
    3c34:	00 97       	sbiw	r24, 0x00	; 0
    3c36:	99 f0       	breq	.+38     	; 0x3c5e <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    3c38:	42 81       	ldd	r20, Z+2	; 0x02
    3c3a:	53 81       	ldd	r21, Z+3	; 0x03
    3c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c40:	42 17       	cp	r20, r18
    3c42:	53 07       	cpc	r21, r19
    3c44:	50 f0       	brcs	.+20     	; 0x3c5a <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    3c46:	68 81       	ld	r22, Y
    3c48:	79 81       	ldd	r23, Y+1	; 0x01
    3c4a:	0e 94 9a 23 	call	0x4734	; 0x4734 <strcpy>
			len = rhs.len;
    3c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c50:	9d 81       	ldd	r25, Y+5	; 0x05
    3c52:	f8 01       	movw	r30, r16
    3c54:	95 83       	std	Z+5, r25	; 0x05
    3c56:	84 83       	std	Z+4, r24	; 0x04
    3c58:	13 c0       	rjmp	.+38     	; 0x3c80 <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    3c5a:	0e 94 ed 21 	call	0x43da	; 0x43da <free>
		}
	}
	buffer = rhs.buffer;
    3c5e:	88 81       	ld	r24, Y
    3c60:	99 81       	ldd	r25, Y+1	; 0x01
    3c62:	f8 01       	movw	r30, r16
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6c:	93 83       	std	Z+3, r25	; 0x03
    3c6e:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    3c70:	8c 81       	ldd	r24, Y+4	; 0x04
    3c72:	9d 81       	ldd	r25, Y+5	; 0x05
    3c74:	95 83       	std	Z+5, r25	; 0x05
    3c76:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    3c78:	19 82       	std	Y+1, r1	; 0x01
    3c7a:	18 82       	st	Y, r1
	rhs.capacity = 0;
    3c7c:	1b 82       	std	Y+3, r1	; 0x03
    3c7e:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    3c80:	1d 82       	std	Y+5, r1	; 0x05
    3c82:	1c 82       	std	Y+4, r1	; 0x04
}
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	08 95       	ret

00003c8e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	ec 01       	movw	r28, r24
    3c94:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3c96:	86 17       	cp	r24, r22
    3c98:	97 07       	cpc	r25, r23
    3c9a:	61 f0       	breq	.+24     	; 0x3cb4 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	61 15       	cp	r22, r1
    3ca2:	71 05       	cpc	r23, r1
    3ca4:	29 f0       	breq	.+10     	; 0x3cb0 <_ZN6StringaSERKS_+0x22>
    3ca6:	44 81       	ldd	r20, Z+4	; 0x04
    3ca8:	55 81       	ldd	r21, Z+5	; 0x05
    3caa:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <_ZN6String4copyEPKcj>
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    3cb0:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_ZN6String10invalidateEv>
	
	return *this;
}
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	11 82       	std	Z+1, r1	; 0x01
    3cc0:	10 82       	st	Z, r1
	capacity = 0;
    3cc2:	13 82       	std	Z+3, r1	; 0x03
    3cc4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3cc6:	15 82       	std	Z+5, r1	; 0x05
    3cc8:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    3cca:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <_ZN6StringaSERKS_>

00003cce <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    3cd4:	86 17       	cp	r24, r22
    3cd6:	97 07       	cpc	r25, r23
    3cd8:	11 f0       	breq	.+4      	; 0x3cde <_ZN6StringaSEOS_+0x10>
    3cda:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN6String4moveERS_>
	return *this;
}
    3cde:	ce 01       	movw	r24, r28
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	08 95       	ret

00003ce6 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3ce6:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3cea:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3cee:	28 17       	cp	r18, r24
    3cf0:	39 07       	cpc	r19, r25
    3cf2:	b9 f4       	brne	.+46     	; 0x3d22 <_ZN14SoftwareSerial4readEv+0x3c>
    3cf4:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cf8:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3cfc:	98 17       	cp	r25, r24
    3cfe:	89 f0       	breq	.+34     	; 0x3d22 <_ZN14SoftwareSerial4readEv+0x3c>
    3d00:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	e7 5d       	subi	r30, 0xD7	; 215
    3d08:	fa 4f       	sbci	r31, 0xFA	; 250
    3d0a:	80 81       	ld	r24, Z
    3d0c:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	2f 5f       	subi	r18, 0xFF	; 255
    3d14:	3f 4f       	sbci	r19, 0xFF	; 255
    3d16:	2f 73       	andi	r18, 0x3F	; 63
    3d18:	33 27       	eor	r19, r19
    3d1a:	20 93 27 05 	sts	0x0527, r18	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	08 95       	ret
    3d22:	8f ef       	ldi	r24, 0xFF	; 255
    3d24:	9f ef       	ldi	r25, 0xFF	; 255
    3d26:	08 95       	ret

00003d28 <_ZN14SoftwareSerial5writeEh>:
    3d28:	1f 93       	push	r17
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	dc 01       	movw	r26, r24
    3d30:	5c 96       	adiw	r26, 0x1c	; 28
    3d32:	8d 91       	ld	r24, X+
    3d34:	9c 91       	ld	r25, X
    3d36:	5d 97       	sbiw	r26, 0x1d	; 29
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	39 f4       	brne	.+14     	; 0x3d4a <_ZN14SoftwareSerial5writeEh+0x22>
    3d3c:	21 e0       	ldi	r18, 0x01	; 1
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	13 96       	adiw	r26, 0x03	; 3
    3d42:	3c 93       	st	X, r19
    3d44:	2e 93       	st	-X, r18
    3d46:	12 97       	sbiw	r26, 0x02	; 2
    3d48:	3b c0       	rjmp	.+118    	; 0x3dc0 <_ZN14SoftwareSerial5writeEh+0x98>
    3d4a:	51 96       	adiw	r26, 0x11	; 17
    3d4c:	ed 91       	ld	r30, X+
    3d4e:	fc 91       	ld	r31, X
    3d50:	52 97       	sbiw	r26, 0x12	; 18
    3d52:	50 96       	adiw	r26, 0x10	; 16
    3d54:	2c 91       	ld	r18, X
    3d56:	50 97       	sbiw	r26, 0x10	; 16
    3d58:	32 2f       	mov	r19, r18
    3d5a:	30 95       	com	r19
    3d5c:	1f b7       	in	r17, 0x3f	; 63
    3d5e:	5e 96       	adiw	r26, 0x1e	; 30
    3d60:	4c 91       	ld	r20, X
    3d62:	5e 97       	sbiw	r26, 0x1e	; 30
    3d64:	74 2f       	mov	r23, r20
    3d66:	72 70       	andi	r23, 0x02	; 2
    3d68:	41 fd       	sbrc	r20, 1
    3d6a:	60 95       	com	r22
    3d6c:	f8 94       	cli
    3d6e:	40 81       	ld	r20, Z
    3d70:	77 23       	and	r23, r23
    3d72:	11 f0       	breq	.+4      	; 0x3d78 <_ZN14SoftwareSerial5writeEh+0x50>
    3d74:	42 2b       	or	r20, r18
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <_ZN14SoftwareSerial5writeEh+0x52>
    3d78:	43 23       	and	r20, r19
    3d7a:	40 83       	st	Z, r20
    3d7c:	ec 01       	movw	r28, r24
    3d7e:	21 97       	sbiw	r28, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <_ZN14SoftwareSerial5writeEh+0x56>
    3d82:	48 e0       	ldi	r20, 0x08	; 8
    3d84:	50 81       	ld	r21, Z
    3d86:	60 ff       	sbrs	r22, 0
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <_ZN14SoftwareSerial5writeEh+0x66>
    3d8a:	52 2b       	or	r21, r18
    3d8c:	01 c0       	rjmp	.+2      	; 0x3d90 <_ZN14SoftwareSerial5writeEh+0x68>
    3d8e:	53 23       	and	r21, r19
    3d90:	50 83       	st	Z, r21
    3d92:	ec 01       	movw	r28, r24
    3d94:	21 97       	sbiw	r28, 0x01	; 1
    3d96:	f1 f7       	brne	.-4      	; 0x3d94 <_ZN14SoftwareSerial5writeEh+0x6c>
    3d98:	66 95       	lsr	r22
    3d9a:	41 50       	subi	r20, 0x01	; 1
    3d9c:	99 f7       	brne	.-26     	; 0x3d84 <_ZN14SoftwareSerial5writeEh+0x5c>
    3d9e:	80 81       	ld	r24, Z
    3da0:	77 23       	and	r23, r23
    3da2:	19 f0       	breq	.+6      	; 0x3daa <_ZN14SoftwareSerial5writeEh+0x82>
    3da4:	83 23       	and	r24, r19
    3da6:	80 83       	st	Z, r24
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <_ZN14SoftwareSerial5writeEh+0x86>
    3daa:	28 2b       	or	r18, r24
    3dac:	20 83       	st	Z, r18
    3dae:	1f bf       	out	0x3f, r17	; 63
    3db0:	5c 96       	adiw	r26, 0x1c	; 28
    3db2:	8d 91       	ld	r24, X+
    3db4:	9c 91       	ld	r25, X
    3db6:	5d 97       	sbiw	r26, 0x1d	; 29
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	f1 f7       	brne	.-4      	; 0x3db8 <_ZN14SoftwareSerial5writeEh+0x90>
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	1f 91       	pop	r17
    3dc6:	08 95       	ret

00003dc8 <_ZN14SoftwareSerial5flushEv>:
    3dc8:	08 95       	ret

00003dca <_ZN14SoftwareSerial4peekEv>:
    3dca:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3dce:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3dd2:	28 17       	cp	r18, r24
    3dd4:	39 07       	cpc	r19, r25
    3dd6:	71 f4       	brne	.+28     	; 0x3df4 <_ZN14SoftwareSerial4peekEv+0x2a>
    3dd8:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ddc:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3de0:	98 17       	cp	r25, r24
    3de2:	41 f0       	breq	.+16     	; 0x3df4 <_ZN14SoftwareSerial4peekEv+0x2a>
    3de4:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	e7 5d       	subi	r30, 0xD7	; 215
    3dec:	fa 4f       	sbci	r31, 0xFA	; 250
    3dee:	80 81       	ld	r24, Z
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	08 95       	ret
    3df4:	8f ef       	ldi	r24, 0xFF	; 255
    3df6:	9f ef       	ldi	r25, 0xFF	; 255
    3df8:	08 95       	ret

00003dfa <_ZN14SoftwareSerial9availableEv>:
    3dfa:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3dfe:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e02:	28 17       	cp	r18, r24
    3e04:	39 07       	cpc	r19, r25
    3e06:	71 f4       	brne	.+28     	; 0x3e24 <_ZN14SoftwareSerial9availableEv+0x2a>
    3e08:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e0c:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	80 5c       	subi	r24, 0xC0	; 192
    3e14:	9f 4f       	sbci	r25, 0xFF	; 255
    3e16:	82 1b       	sub	r24, r18
    3e18:	91 09       	sbc	r25, r1
    3e1a:	60 e4       	ldi	r22, 0x40	; 64
    3e1c:	70 e0       	ldi	r23, 0x00	; 0
    3e1e:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <__divmodhi4>
    3e22:	08 95       	ret
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	08 95       	ret

00003e2a <_ZN14SoftwareSerial13stopListeningEv>:
    3e2a:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3e2e:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e32:	e8 17       	cp	r30, r24
    3e34:	f9 07       	cpc	r31, r25
    3e36:	69 f4       	brne	.+26     	; 0x3e52 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3e38:	a3 89       	ldd	r26, Z+19	; 0x13
    3e3a:	b4 89       	ldd	r27, Z+20	; 0x14
    3e3c:	9c 91       	ld	r25, X
    3e3e:	85 89       	ldd	r24, Z+21	; 0x15
    3e40:	80 95       	com	r24
    3e42:	89 23       	and	r24, r25
    3e44:	8c 93       	st	X, r24
    3e46:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e4a:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	08 95       	ret
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	08 95       	ret

00003e56 <_ZN14SoftwareSerial6listenEv>:
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	ec 01       	movw	r28, r24
    3e5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e60:	89 2b       	or	r24, r25
    3e62:	f1 f0       	breq	.+60     	; 0x3ea0 <_ZN14SoftwareSerial6listenEv+0x4a>
    3e64:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3e68:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e6c:	c8 17       	cp	r28, r24
    3e6e:	d9 07       	cpc	r29, r25
    3e70:	b9 f0       	breq	.+46     	; 0x3ea0 <_ZN14SoftwareSerial6listenEv+0x4a>
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	11 f0       	breq	.+4      	; 0x3e7a <_ZN14SoftwareSerial6listenEv+0x24>
    3e76:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN14SoftwareSerial13stopListeningEv>
    3e7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e7c:	8e 7f       	andi	r24, 0xFE	; 254
    3e7e:	8e 8f       	std	Y+30, r24	; 0x1e
    3e80:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e84:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e88:	d0 93 6a 05 	sts	0x056A, r29	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3e8c:	c0 93 69 05 	sts	0x0569, r28	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3e90:	eb 89       	ldd	r30, Y+19	; 0x13
    3e92:	fc 89       	ldd	r31, Y+20	; 0x14
    3e94:	90 81       	ld	r25, Z
    3e96:	8d 89       	ldd	r24, Y+21	; 0x15
    3e98:	89 2b       	or	r24, r25
    3e9a:	80 83       	st	Z, r24
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	01 c0       	rjmp	.+2      	; 0x3ea2 <_ZN14SoftwareSerial6listenEv+0x4c>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	08 95       	ret

00003ea8 <__vector_3>:
    3ea8:	1f 92       	push	r1
    3eaa:	0f 92       	push	r0
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	0f 92       	push	r0
    3eb0:	11 24       	eor	r1, r1
    3eb2:	2f 93       	push	r18
    3eb4:	3f 93       	push	r19
    3eb6:	4f 93       	push	r20
    3eb8:	5f 93       	push	r21
    3eba:	6f 93       	push	r22
    3ebc:	7f 93       	push	r23
    3ebe:	8f 93       	push	r24
    3ec0:	9f 93       	push	r25
    3ec2:	af 93       	push	r26
    3ec4:	bf 93       	push	r27
    3ec6:	ef 93       	push	r30
    3ec8:	ff 93       	push	r31
    3eca:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
    3ece:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
    3ed2:	30 97       	sbiw	r30, 0x00	; 0
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <__vector_3+0x30>
    3ed6:	51 c0       	rjmp	.+162    	; 0x3f7a <__vector_3+0xd2>
    3ed8:	96 8d       	ldd	r25, Z+30	; 0x1e
    3eda:	a6 85       	ldd	r26, Z+14	; 0x0e
    3edc:	b7 85       	ldd	r27, Z+15	; 0x0f
    3ede:	85 85       	ldd	r24, Z+13	; 0x0d
    3ee0:	91 ff       	sbrs	r25, 1
    3ee2:	04 c0       	rjmp	.+8      	; 0x3eec <__vector_3+0x44>
    3ee4:	9c 91       	ld	r25, X
    3ee6:	89 23       	and	r24, r25
    3ee8:	29 f4       	brne	.+10     	; 0x3ef4 <__vector_3+0x4c>
    3eea:	47 c0       	rjmp	.+142    	; 0x3f7a <__vector_3+0xd2>
    3eec:	9c 91       	ld	r25, X
    3eee:	89 23       	and	r24, r25
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <__vector_3+0x4c>
    3ef2:	43 c0       	rjmp	.+134    	; 0x3f7a <__vector_3+0xd2>
    3ef4:	a3 89       	ldd	r26, Z+19	; 0x13
    3ef6:	b4 89       	ldd	r27, Z+20	; 0x14
    3ef8:	9c 91       	ld	r25, X
    3efa:	85 89       	ldd	r24, Z+21	; 0x15
    3efc:	80 95       	com	r24
    3efe:	89 23       	and	r24, r25
    3f00:	8c 93       	st	X, r24
    3f02:	86 89       	ldd	r24, Z+22	; 0x16
    3f04:	97 89       	ldd	r25, Z+23	; 0x17
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <__vector_3+0x5e>
    3f0a:	60 8d       	ldd	r22, Z+24	; 0x18
    3f0c:	71 8d       	ldd	r23, Z+25	; 0x19
    3f0e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f10:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f12:	55 85       	ldd	r21, Z+13	; 0x0d
    3f14:	38 e0       	ldi	r19, 0x08	; 8
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	cb 01       	movw	r24, r22
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <__vector_3+0x72>
    3f1e:	82 2f       	mov	r24, r18
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	95 95       	asr	r25
    3f24:	87 95       	ror	r24
    3f26:	28 2f       	mov	r18, r24
    3f28:	4c 91       	ld	r20, X
    3f2a:	45 23       	and	r20, r21
    3f2c:	09 f0       	breq	.+2      	; 0x3f30 <__vector_3+0x88>
    3f2e:	20 68       	ori	r18, 0x80	; 128
    3f30:	31 50       	subi	r19, 0x01	; 1
    3f32:	91 f7       	brne	.-28     	; 0x3f18 <__vector_3+0x70>
    3f34:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f36:	81 fd       	sbrc	r24, 1
    3f38:	20 95       	com	r18
    3f3a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	01 96       	adiw	r24, 0x01	; 1
    3f42:	8f 73       	andi	r24, 0x3F	; 63
    3f44:	99 27       	eor	r25, r25
    3f46:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f4a:	38 17       	cp	r19, r24
    3f4c:	49 f0       	breq	.+18     	; 0x3f60 <__vector_3+0xb8>
    3f4e:	a0 91 28 05 	lds	r26, 0x0528	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	a7 5d       	subi	r26, 0xD7	; 215
    3f56:	ba 4f       	sbci	r27, 0xFA	; 250
    3f58:	2c 93       	st	X, r18
    3f5a:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f5e:	03 c0       	rjmp	.+6      	; 0x3f66 <__vector_3+0xbe>
    3f60:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f62:	81 60       	ori	r24, 0x01	; 1
    3f64:	86 8f       	std	Z+30, r24	; 0x1e
    3f66:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f68:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <__vector_3+0xc2>
    3f6e:	a3 89       	ldd	r26, Z+19	; 0x13
    3f70:	b4 89       	ldd	r27, Z+20	; 0x14
    3f72:	9c 91       	ld	r25, X
    3f74:	85 89       	ldd	r24, Z+21	; 0x15
    3f76:	89 2b       	or	r24, r25
    3f78:	8c 93       	st	X, r24
    3f7a:	ff 91       	pop	r31
    3f7c:	ef 91       	pop	r30
    3f7e:	bf 91       	pop	r27
    3f80:	af 91       	pop	r26
    3f82:	9f 91       	pop	r25
    3f84:	8f 91       	pop	r24
    3f86:	7f 91       	pop	r23
    3f88:	6f 91       	pop	r22
    3f8a:	5f 91       	pop	r21
    3f8c:	4f 91       	pop	r20
    3f8e:	3f 91       	pop	r19
    3f90:	2f 91       	pop	r18
    3f92:	0f 90       	pop	r0
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	0f 90       	pop	r0
    3f98:	1f 90       	pop	r1
    3f9a:	18 95       	reti

00003f9c <_ZN14SoftwareSerial5setTXEh>:
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	ec 01       	movw	r28, r24
    3fa4:	16 2f       	mov	r17, r22
    3fa6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3fa8:	66 95       	lsr	r22
    3faa:	61 70       	andi	r22, 0x01	; 1
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	68 27       	eor	r22, r24
    3fb0:	81 2f       	mov	r24, r17
    3fb2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
    3fb6:	61 e0       	ldi	r22, 0x01	; 1
    3fb8:	81 2f       	mov	r24, r17
    3fba:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <pinMode>
    3fbe:	81 2f       	mov	r24, r17
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	e5 51       	subi	r30, 0x15	; 21
    3fc6:	f8 4f       	sbci	r31, 0xF8	; 248
    3fc8:	e4 91       	lpm	r30, Z
    3fca:	e8 8b       	std	Y+16, r30	; 0x10
    3fcc:	fc 01       	movw	r30, r24
    3fce:	e1 50       	subi	r30, 0x01	; 1
    3fd0:	f8 4f       	sbci	r31, 0xF8	; 248
    3fd2:	e4 91       	lpm	r30, Z
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ff 1f       	adc	r31, r31
    3fda:	e3 5e       	subi	r30, 0xE3	; 227
    3fdc:	f7 4f       	sbci	r31, 0xF7	; 247
    3fde:	85 91       	lpm	r24, Z+
    3fe0:	94 91       	lpm	r25, Z
    3fe2:	9a 8b       	std	Y+18, r25	; 0x12
    3fe4:	89 8b       	std	Y+17, r24	; 0x11
    3fe6:	df 91       	pop	r29
    3fe8:	cf 91       	pop	r28
    3fea:	1f 91       	pop	r17
    3fec:	08 95       	ret

00003fee <_ZN14SoftwareSerial5setRXEh>:
    3fee:	1f 93       	push	r17
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	ec 01       	movw	r28, r24
    3ff6:	16 2f       	mov	r17, r22
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	81 2f       	mov	r24, r17
    3ffc:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <pinMode>
    4000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4002:	81 fd       	sbrc	r24, 1
    4004:	04 c0       	rjmp	.+8      	; 0x400e <_ZN14SoftwareSerial5setRXEh+0x20>
    4006:	61 e0       	ldi	r22, 0x01	; 1
    4008:	81 2f       	mov	r24, r17
    400a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <digitalWrite>
    400e:	1c 87       	std	Y+12, r17	; 0x0c
    4010:	81 2f       	mov	r24, r17
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	fc 01       	movw	r30, r24
    4016:	e5 51       	subi	r30, 0x15	; 21
    4018:	f8 4f       	sbci	r31, 0xF8	; 248
    401a:	e4 91       	lpm	r30, Z
    401c:	ed 87       	std	Y+13, r30	; 0x0d
    401e:	fc 01       	movw	r30, r24
    4020:	e1 50       	subi	r30, 0x01	; 1
    4022:	f8 4f       	sbci	r31, 0xF8	; 248
    4024:	e4 91       	lpm	r30, Z
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	ee 0f       	add	r30, r30
    402a:	ff 1f       	adc	r31, r31
    402c:	ed 5e       	subi	r30, 0xED	; 237
    402e:	f7 4f       	sbci	r31, 0xF7	; 247
    4030:	85 91       	lpm	r24, Z+
    4032:	94 91       	lpm	r25, Z
    4034:	9f 87       	std	Y+15, r25	; 0x0f
    4036:	8e 87       	std	Y+14, r24	; 0x0e
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	1f 91       	pop	r17
    403e:	08 95       	ret

00004040 <_ZN14SoftwareSerialC1Ehhb>:
    4040:	1f 93       	push	r17
    4042:	cf 93       	push	r28
    4044:	df 93       	push	r29
    4046:	ec 01       	movw	r28, r24
    4048:	16 2f       	mov	r17, r22
    404a:	1b 82       	std	Y+3, r1	; 0x03
    404c:	1a 82       	std	Y+2, r1	; 0x02
    404e:	88 ee       	ldi	r24, 0xE8	; 232
    4050:	93 e0       	ldi	r25, 0x03	; 3
    4052:	a0 e0       	ldi	r26, 0x00	; 0
    4054:	b0 e0       	ldi	r27, 0x00	; 0
    4056:	8c 83       	std	Y+4, r24	; 0x04
    4058:	9d 83       	std	Y+5, r25	; 0x05
    405a:	ae 83       	std	Y+6, r26	; 0x06
    405c:	bf 83       	std	Y+7, r27	; 0x07
    405e:	81 e8       	ldi	r24, 0x81	; 129
    4060:	92 e0       	ldi	r25, 0x02	; 2
    4062:	99 83       	std	Y+1, r25	; 0x01
    4064:	88 83       	st	Y, r24
    4066:	1f 8a       	std	Y+23, r1	; 0x17
    4068:	1e 8a       	std	Y+22, r1	; 0x16
    406a:	19 8e       	std	Y+25, r1	; 0x19
    406c:	18 8e       	std	Y+24, r1	; 0x18
    406e:	1b 8e       	std	Y+27, r1	; 0x1b
    4070:	1a 8e       	std	Y+26, r1	; 0x1a
    4072:	1d 8e       	std	Y+29, r1	; 0x1d
    4074:	1c 8e       	std	Y+28, r1	; 0x1c
    4076:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4078:	8e 7f       	andi	r24, 0xFE	; 254
    407a:	20 fb       	bst	r18, 0
    407c:	81 f9       	bld	r24, 1
    407e:	8e 8f       	std	Y+30, r24	; 0x1e
    4080:	64 2f       	mov	r22, r20
    4082:	ce 01       	movw	r24, r28
    4084:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_ZN14SoftwareSerial5setTXEh>
    4088:	61 2f       	mov	r22, r17
    408a:	ce 01       	movw	r24, r28
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	0c 94 f7 1f 	jmp	0x3fee	; 0x3fee <_ZN14SoftwareSerial5setRXEh>

00004096 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4096:	cf 93       	push	r28
    4098:	df 93       	push	r29
    409a:	ec 01       	movw	r28, r24
    409c:	9a 01       	movw	r18, r20
    409e:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    40a0:	1b 8e       	std	Y+27, r1	; 0x1b
    40a2:	1a 8e       	std	Y+26, r1	; 0x1a
    40a4:	19 8e       	std	Y+25, r1	; 0x19
    40a6:	18 8e       	std	Y+24, r1	; 0x18
    40a8:	1f 8a       	std	Y+23, r1	; 0x17
    40aa:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	79 e0       	ldi	r23, 0x09	; 9
    40b0:	8d e3       	ldi	r24, 0x3D	; 61
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 30 21 	call	0x4260	; 0x4260 <__divmodsi4>
    40b8:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    40ba:	24 30       	cpi	r18, 0x04	; 4
    40bc:	31 05       	cpc	r19, r1
    40be:	18 f0       	brcs	.+6      	; 0x40c6 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    40c0:	c9 01       	movw	r24, r18
    40c2:	03 97       	sbiw	r24, 0x03	; 3
    40c4:	02 c0       	rjmp	.+4      	; 0x40ca <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    40ca:	9d 8f       	std	Y+29, r25	; 0x1d
    40cc:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    40ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    40d0:	66 31       	cpi	r22, 0x16	; 22
    40d2:	08 f0       	brcs	.+2      	; 0x40d6 <_ZN14SoftwareSerial5beginEl+0x40>
    40d4:	69 c0       	rjmp	.+210    	; 0x41a8 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    40d6:	c9 01       	movw	r24, r18
    40d8:	96 95       	lsr	r25
    40da:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    40dc:	84 31       	cpi	r24, 0x14	; 20
    40de:	91 05       	cpc	r25, r1
    40e0:	10 f0       	brcs	.+4      	; 0x40e6 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    40e2:	43 97       	sbiw	r24, 0x13	; 19
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    40ea:	9f 8b       	std	Y+23, r25	; 0x17
    40ec:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    40ee:	36 97       	sbiw	r30, 0x06	; 6
    40f0:	18 f0       	brcs	.+6      	; 0x40f8 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    40f2:	c9 01       	movw	r24, r18
    40f4:	05 97       	sbiw	r24, 0x05	; 5
    40f6:	02 c0       	rjmp	.+4      	; 0x40fc <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    40fc:	99 8f       	std	Y+25, r25	; 0x19
    40fe:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4100:	c9 01       	movw	r24, r18
    4102:	88 0f       	add	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	28 0f       	add	r18, r24
    4108:	39 1f       	adc	r19, r25
    410a:	36 95       	lsr	r19
    410c:	27 95       	ror	r18
    410e:	36 95       	lsr	r19
    4110:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4112:	2d 30       	cpi	r18, 0x0D	; 13
    4114:	31 05       	cpc	r19, r1
    4116:	18 f0       	brcs	.+6      	; 0x411e <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    4118:	2c 50       	subi	r18, 0x0C	; 12
    411a:	31 09       	sbc	r19, r1
    411c:	02 c0       	rjmp	.+4      	; 0x4122 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    411e:	21 e0       	ldi	r18, 0x01	; 1
    4120:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4122:	3b 8f       	std	Y+27, r19	; 0x1b
    4124:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    4126:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    412a:	68 30       	cpi	r22, 0x08	; 8
    412c:	50 f0       	brcs	.+20     	; 0x4142 <_ZN14SoftwareSerial5beginEl+0xac>
    412e:	21 e0       	ldi	r18, 0x01	; 1
    4130:	6e 30       	cpi	r22, 0x0E	; 14
    4132:	08 f4       	brcc	.+2      	; 0x4136 <_ZN14SoftwareSerial5beginEl+0xa0>
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	01 c0       	rjmp	.+2      	; 0x413c <_ZN14SoftwareSerial5beginEl+0xa6>
    413a:	88 0f       	add	r24, r24
    413c:	2a 95       	dec	r18
    413e:	ea f7       	brpl	.-6      	; 0x413a <_ZN14SoftwareSerial5beginEl+0xa4>
    4140:	01 c0       	rjmp	.+2      	; 0x4144 <_ZN14SoftwareSerial5beginEl+0xae>
    4142:	84 e0       	ldi	r24, 0x04	; 4
    4144:	89 2b       	or	r24, r25
    4146:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    414a:	9c 85       	ldd	r25, Y+12	; 0x0c
    414c:	98 30       	cpi	r25, 0x08	; 8
    414e:	38 f0       	brcs	.+14     	; 0x415e <_ZN14SoftwareSerial5beginEl+0xc8>
    4150:	9e 30       	cpi	r25, 0x0E	; 14
    4152:	40 f0       	brcs	.+16     	; 0x4164 <_ZN14SoftwareSerial5beginEl+0xce>
    4154:	96 31       	cpi	r25, 0x16	; 22
    4156:	48 f0       	brcs	.+18     	; 0x416a <_ZN14SoftwareSerial5beginEl+0xd4>
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	08 c0       	rjmp	.+16     	; 0x416e <_ZN14SoftwareSerial5beginEl+0xd8>
    415e:	2d e6       	ldi	r18, 0x6D	; 109
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	05 c0       	rjmp	.+10     	; 0x416e <_ZN14SoftwareSerial5beginEl+0xd8>
    4164:	2b e6       	ldi	r18, 0x6B	; 107
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	02 c0       	rjmp	.+4      	; 0x416e <_ZN14SoftwareSerial5beginEl+0xd8>
    416a:	2c e6       	ldi	r18, 0x6C	; 108
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	3c 8b       	std	Y+20, r19	; 0x14
    4170:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4172:	98 30       	cpi	r25, 0x08	; 8
    4174:	30 f4       	brcc	.+12     	; 0x4182 <_ZN14SoftwareSerial5beginEl+0xec>
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	01 c0       	rjmp	.+2      	; 0x417c <_ZN14SoftwareSerial5beginEl+0xe6>
    417a:	88 0f       	add	r24, r24
    417c:	9a 95       	dec	r25
    417e:	ea f7       	brpl	.-6      	; 0x417a <_ZN14SoftwareSerial5beginEl+0xe4>
    4180:	0e c0       	rjmp	.+28     	; 0x419e <_ZN14SoftwareSerial5beginEl+0x108>
    4182:	29 2f       	mov	r18, r25
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	9e 30       	cpi	r25, 0x0E	; 14
    4188:	18 f4       	brcc	.+6      	; 0x4190 <_ZN14SoftwareSerial5beginEl+0xfa>
    418a:	28 50       	subi	r18, 0x08	; 8
    418c:	31 09       	sbc	r19, r1
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <_ZN14SoftwareSerial5beginEl+0xfe>
    4190:	2e 50       	subi	r18, 0x0E	; 14
    4192:	31 09       	sbc	r19, r1
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	01 c0       	rjmp	.+2      	; 0x419a <_ZN14SoftwareSerial5beginEl+0x104>
    4198:	88 0f       	add	r24, r24
    419a:	2a 95       	dec	r18
    419c:	ea f7       	brpl	.-6      	; 0x4198 <_ZN14SoftwareSerial5beginEl+0x102>
    419e:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    41a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    41a8:	ce 01       	movw	r24, r28
}
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    41ae:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <_ZN14SoftwareSerial6listenEv>

000041b2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    41b2:	08 95       	ret

000041b4 <__udivmodqi4>:
    41b4:	99 1b       	sub	r25, r25
    41b6:	79 e0       	ldi	r23, 0x09	; 9
    41b8:	04 c0       	rjmp	.+8      	; 0x41c2 <__udivmodqi4_ep>

000041ba <__udivmodqi4_loop>:
    41ba:	99 1f       	adc	r25, r25
    41bc:	96 17       	cp	r25, r22
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <__udivmodqi4_ep>
    41c0:	96 1b       	sub	r25, r22

000041c2 <__udivmodqi4_ep>:
    41c2:	88 1f       	adc	r24, r24
    41c4:	7a 95       	dec	r23
    41c6:	c9 f7       	brne	.-14     	; 0x41ba <__udivmodqi4_loop>
    41c8:	80 95       	com	r24
    41ca:	08 95       	ret

000041cc <__udivmodhi4>:
    41cc:	aa 1b       	sub	r26, r26
    41ce:	bb 1b       	sub	r27, r27
    41d0:	51 e1       	ldi	r21, 0x11	; 17
    41d2:	07 c0       	rjmp	.+14     	; 0x41e2 <__udivmodhi4_ep>

000041d4 <__udivmodhi4_loop>:
    41d4:	aa 1f       	adc	r26, r26
    41d6:	bb 1f       	adc	r27, r27
    41d8:	a6 17       	cp	r26, r22
    41da:	b7 07       	cpc	r27, r23
    41dc:	10 f0       	brcs	.+4      	; 0x41e2 <__udivmodhi4_ep>
    41de:	a6 1b       	sub	r26, r22
    41e0:	b7 0b       	sbc	r27, r23

000041e2 <__udivmodhi4_ep>:
    41e2:	88 1f       	adc	r24, r24
    41e4:	99 1f       	adc	r25, r25
    41e6:	5a 95       	dec	r21
    41e8:	a9 f7       	brne	.-22     	; 0x41d4 <__udivmodhi4_loop>
    41ea:	80 95       	com	r24
    41ec:	90 95       	com	r25
    41ee:	bc 01       	movw	r22, r24
    41f0:	cd 01       	movw	r24, r26
    41f2:	08 95       	ret

000041f4 <__divmodhi4>:
    41f4:	97 fb       	bst	r25, 7
    41f6:	07 2e       	mov	r0, r23
    41f8:	16 f4       	brtc	.+4      	; 0x41fe <__divmodhi4+0xa>
    41fa:	00 94       	com	r0
    41fc:	07 d0       	rcall	.+14     	; 0x420c <__divmodhi4_neg1>
    41fe:	77 fd       	sbrc	r23, 7
    4200:	09 d0       	rcall	.+18     	; 0x4214 <__divmodhi4_neg2>
    4202:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__udivmodhi4>
    4206:	07 fc       	sbrc	r0, 7
    4208:	05 d0       	rcall	.+10     	; 0x4214 <__divmodhi4_neg2>
    420a:	3e f4       	brtc	.+14     	; 0x421a <__divmodhi4_exit>

0000420c <__divmodhi4_neg1>:
    420c:	90 95       	com	r25
    420e:	81 95       	neg	r24
    4210:	9f 4f       	sbci	r25, 0xFF	; 255
    4212:	08 95       	ret

00004214 <__divmodhi4_neg2>:
    4214:	70 95       	com	r23
    4216:	61 95       	neg	r22
    4218:	7f 4f       	sbci	r23, 0xFF	; 255

0000421a <__divmodhi4_exit>:
    421a:	08 95       	ret

0000421c <__udivmodsi4>:
    421c:	a1 e2       	ldi	r26, 0x21	; 33
    421e:	1a 2e       	mov	r1, r26
    4220:	aa 1b       	sub	r26, r26
    4222:	bb 1b       	sub	r27, r27
    4224:	fd 01       	movw	r30, r26
    4226:	0d c0       	rjmp	.+26     	; 0x4242 <__udivmodsi4_ep>

00004228 <__udivmodsi4_loop>:
    4228:	aa 1f       	adc	r26, r26
    422a:	bb 1f       	adc	r27, r27
    422c:	ee 1f       	adc	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	a2 17       	cp	r26, r18
    4232:	b3 07       	cpc	r27, r19
    4234:	e4 07       	cpc	r30, r20
    4236:	f5 07       	cpc	r31, r21
    4238:	20 f0       	brcs	.+8      	; 0x4242 <__udivmodsi4_ep>
    423a:	a2 1b       	sub	r26, r18
    423c:	b3 0b       	sbc	r27, r19
    423e:	e4 0b       	sbc	r30, r20
    4240:	f5 0b       	sbc	r31, r21

00004242 <__udivmodsi4_ep>:
    4242:	66 1f       	adc	r22, r22
    4244:	77 1f       	adc	r23, r23
    4246:	88 1f       	adc	r24, r24
    4248:	99 1f       	adc	r25, r25
    424a:	1a 94       	dec	r1
    424c:	69 f7       	brne	.-38     	; 0x4228 <__udivmodsi4_loop>
    424e:	60 95       	com	r22
    4250:	70 95       	com	r23
    4252:	80 95       	com	r24
    4254:	90 95       	com	r25
    4256:	9b 01       	movw	r18, r22
    4258:	ac 01       	movw	r20, r24
    425a:	bd 01       	movw	r22, r26
    425c:	cf 01       	movw	r24, r30
    425e:	08 95       	ret

00004260 <__divmodsi4>:
    4260:	05 2e       	mov	r0, r21
    4262:	97 fb       	bst	r25, 7
    4264:	1e f4       	brtc	.+6      	; 0x426c <__divmodsi4+0xc>
    4266:	00 94       	com	r0
    4268:	0e 94 47 21 	call	0x428e	; 0x428e <__negsi2>
    426c:	57 fd       	sbrc	r21, 7
    426e:	07 d0       	rcall	.+14     	; 0x427e <__divmodsi4_neg2>
    4270:	0e 94 0e 21 	call	0x421c	; 0x421c <__udivmodsi4>
    4274:	07 fc       	sbrc	r0, 7
    4276:	03 d0       	rcall	.+6      	; 0x427e <__divmodsi4_neg2>
    4278:	4e f4       	brtc	.+18     	; 0x428c <__divmodsi4_exit>
    427a:	0c 94 47 21 	jmp	0x428e	; 0x428e <__negsi2>

0000427e <__divmodsi4_neg2>:
    427e:	50 95       	com	r21
    4280:	40 95       	com	r20
    4282:	30 95       	com	r19
    4284:	21 95       	neg	r18
    4286:	3f 4f       	sbci	r19, 0xFF	; 255
    4288:	4f 4f       	sbci	r20, 0xFF	; 255
    428a:	5f 4f       	sbci	r21, 0xFF	; 255

0000428c <__divmodsi4_exit>:
    428c:	08 95       	ret

0000428e <__negsi2>:
    428e:	90 95       	com	r25
    4290:	80 95       	com	r24
    4292:	70 95       	com	r23
    4294:	61 95       	neg	r22
    4296:	7f 4f       	sbci	r23, 0xFF	; 255
    4298:	8f 4f       	sbci	r24, 0xFF	; 255
    429a:	9f 4f       	sbci	r25, 0xFF	; 255
    429c:	08 95       	ret

0000429e <__tablejump2__>:
    429e:	ee 0f       	add	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	05 90       	lpm	r0, Z+
    42a4:	f4 91       	lpm	r31, Z
    42a6:	e0 2d       	mov	r30, r0
    42a8:	09 94       	ijmp

000042aa <malloc>:
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	82 30       	cpi	r24, 0x02	; 2
    42b4:	91 05       	cpc	r25, r1
    42b6:	10 f4       	brcc	.+4      	; 0x42bc <malloc+0x12>
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <__flp>
    42c0:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <__flp+0x1>
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	a0 e0       	ldi	r26, 0x00	; 0
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	30 97       	sbiw	r30, 0x00	; 0
    42ce:	19 f1       	breq	.+70     	; 0x4316 <malloc+0x6c>
    42d0:	40 81       	ld	r20, Z
    42d2:	51 81       	ldd	r21, Z+1	; 0x01
    42d4:	02 81       	ldd	r16, Z+2	; 0x02
    42d6:	13 81       	ldd	r17, Z+3	; 0x03
    42d8:	48 17       	cp	r20, r24
    42da:	59 07       	cpc	r21, r25
    42dc:	c8 f0       	brcs	.+50     	; 0x4310 <malloc+0x66>
    42de:	84 17       	cp	r24, r20
    42e0:	95 07       	cpc	r25, r21
    42e2:	69 f4       	brne	.+26     	; 0x42fe <malloc+0x54>
    42e4:	10 97       	sbiw	r26, 0x00	; 0
    42e6:	31 f0       	breq	.+12     	; 0x42f4 <malloc+0x4a>
    42e8:	12 96       	adiw	r26, 0x02	; 2
    42ea:	0c 93       	st	X, r16
    42ec:	12 97       	sbiw	r26, 0x02	; 2
    42ee:	13 96       	adiw	r26, 0x03	; 3
    42f0:	1c 93       	st	X, r17
    42f2:	27 c0       	rjmp	.+78     	; 0x4342 <malloc+0x98>
    42f4:	00 93 6d 05 	sts	0x056D, r16	; 0x80056d <__flp>
    42f8:	10 93 6e 05 	sts	0x056E, r17	; 0x80056e <__flp+0x1>
    42fc:	22 c0       	rjmp	.+68     	; 0x4342 <malloc+0x98>
    42fe:	21 15       	cp	r18, r1
    4300:	31 05       	cpc	r19, r1
    4302:	19 f0       	breq	.+6      	; 0x430a <malloc+0x60>
    4304:	42 17       	cp	r20, r18
    4306:	53 07       	cpc	r21, r19
    4308:	18 f4       	brcc	.+6      	; 0x4310 <malloc+0x66>
    430a:	9a 01       	movw	r18, r20
    430c:	bd 01       	movw	r22, r26
    430e:	ef 01       	movw	r28, r30
    4310:	df 01       	movw	r26, r30
    4312:	f8 01       	movw	r30, r16
    4314:	db cf       	rjmp	.-74     	; 0x42cc <malloc+0x22>
    4316:	21 15       	cp	r18, r1
    4318:	31 05       	cpc	r19, r1
    431a:	f9 f0       	breq	.+62     	; 0x435a <malloc+0xb0>
    431c:	28 1b       	sub	r18, r24
    431e:	39 0b       	sbc	r19, r25
    4320:	24 30       	cpi	r18, 0x04	; 4
    4322:	31 05       	cpc	r19, r1
    4324:	80 f4       	brcc	.+32     	; 0x4346 <malloc+0x9c>
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	9b 81       	ldd	r25, Y+3	; 0x03
    432a:	61 15       	cp	r22, r1
    432c:	71 05       	cpc	r23, r1
    432e:	21 f0       	breq	.+8      	; 0x4338 <malloc+0x8e>
    4330:	fb 01       	movw	r30, r22
    4332:	93 83       	std	Z+3, r25	; 0x03
    4334:	82 83       	std	Z+2, r24	; 0x02
    4336:	04 c0       	rjmp	.+8      	; 0x4340 <malloc+0x96>
    4338:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <__flp+0x1>
    433c:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <__flp>
    4340:	fe 01       	movw	r30, r28
    4342:	32 96       	adiw	r30, 0x02	; 2
    4344:	44 c0       	rjmp	.+136    	; 0x43ce <malloc+0x124>
    4346:	fe 01       	movw	r30, r28
    4348:	e2 0f       	add	r30, r18
    434a:	f3 1f       	adc	r31, r19
    434c:	81 93       	st	Z+, r24
    434e:	91 93       	st	Z+, r25
    4350:	22 50       	subi	r18, 0x02	; 2
    4352:	31 09       	sbc	r19, r1
    4354:	39 83       	std	Y+1, r19	; 0x01
    4356:	28 83       	st	Y, r18
    4358:	3a c0       	rjmp	.+116    	; 0x43ce <malloc+0x124>
    435a:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    435e:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    4362:	23 2b       	or	r18, r19
    4364:	41 f4       	brne	.+16     	; 0x4376 <malloc+0xcc>
    4366:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    436a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    436e:	30 93 6c 05 	sts	0x056C, r19	; 0x80056c <__brkval+0x1>
    4372:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <__brkval>
    4376:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    437a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    437e:	21 15       	cp	r18, r1
    4380:	31 05       	cpc	r19, r1
    4382:	41 f4       	brne	.+16     	; 0x4394 <malloc+0xea>
    4384:	2d b7       	in	r18, 0x3d	; 61
    4386:	3e b7       	in	r19, 0x3e	; 62
    4388:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    438c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4390:	24 1b       	sub	r18, r20
    4392:	35 0b       	sbc	r19, r21
    4394:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <__brkval>
    4398:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <__brkval+0x1>
    439c:	e2 17       	cp	r30, r18
    439e:	f3 07       	cpc	r31, r19
    43a0:	a0 f4       	brcc	.+40     	; 0x43ca <malloc+0x120>
    43a2:	2e 1b       	sub	r18, r30
    43a4:	3f 0b       	sbc	r19, r31
    43a6:	28 17       	cp	r18, r24
    43a8:	39 07       	cpc	r19, r25
    43aa:	78 f0       	brcs	.+30     	; 0x43ca <malloc+0x120>
    43ac:	ac 01       	movw	r20, r24
    43ae:	4e 5f       	subi	r20, 0xFE	; 254
    43b0:	5f 4f       	sbci	r21, 0xFF	; 255
    43b2:	24 17       	cp	r18, r20
    43b4:	35 07       	cpc	r19, r21
    43b6:	48 f0       	brcs	.+18     	; 0x43ca <malloc+0x120>
    43b8:	4e 0f       	add	r20, r30
    43ba:	5f 1f       	adc	r21, r31
    43bc:	50 93 6c 05 	sts	0x056C, r21	; 0x80056c <__brkval+0x1>
    43c0:	40 93 6b 05 	sts	0x056B, r20	; 0x80056b <__brkval>
    43c4:	81 93       	st	Z+, r24
    43c6:	91 93       	st	Z+, r25
    43c8:	02 c0       	rjmp	.+4      	; 0x43ce <malloc+0x124>
    43ca:	e0 e0       	ldi	r30, 0x00	; 0
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	cf 01       	movw	r24, r30
    43d0:	df 91       	pop	r29
    43d2:	cf 91       	pop	r28
    43d4:	1f 91       	pop	r17
    43d6:	0f 91       	pop	r16
    43d8:	08 95       	ret

000043da <free>:
    43da:	cf 93       	push	r28
    43dc:	df 93       	push	r29
    43de:	00 97       	sbiw	r24, 0x00	; 0
    43e0:	09 f4       	brne	.+2      	; 0x43e4 <free+0xa>
    43e2:	81 c0       	rjmp	.+258    	; 0x44e6 <free+0x10c>
    43e4:	fc 01       	movw	r30, r24
    43e6:	32 97       	sbiw	r30, 0x02	; 2
    43e8:	13 82       	std	Z+3, r1	; 0x03
    43ea:	12 82       	std	Z+2, r1	; 0x02
    43ec:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <__flp>
    43f0:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <__flp+0x1>
    43f4:	10 97       	sbiw	r26, 0x00	; 0
    43f6:	81 f4       	brne	.+32     	; 0x4418 <free+0x3e>
    43f8:	20 81       	ld	r18, Z
    43fa:	31 81       	ldd	r19, Z+1	; 0x01
    43fc:	82 0f       	add	r24, r18
    43fe:	93 1f       	adc	r25, r19
    4400:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    4404:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    4408:	28 17       	cp	r18, r24
    440a:	39 07       	cpc	r19, r25
    440c:	51 f5       	brne	.+84     	; 0x4462 <free+0x88>
    440e:	f0 93 6c 05 	sts	0x056C, r31	; 0x80056c <__brkval+0x1>
    4412:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <__brkval>
    4416:	67 c0       	rjmp	.+206    	; 0x44e6 <free+0x10c>
    4418:	ed 01       	movw	r28, r26
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	ce 17       	cp	r28, r30
    4420:	df 07       	cpc	r29, r31
    4422:	40 f4       	brcc	.+16     	; 0x4434 <free+0x5a>
    4424:	4a 81       	ldd	r20, Y+2	; 0x02
    4426:	5b 81       	ldd	r21, Y+3	; 0x03
    4428:	9e 01       	movw	r18, r28
    442a:	41 15       	cp	r20, r1
    442c:	51 05       	cpc	r21, r1
    442e:	f1 f0       	breq	.+60     	; 0x446c <free+0x92>
    4430:	ea 01       	movw	r28, r20
    4432:	f5 cf       	rjmp	.-22     	; 0x441e <free+0x44>
    4434:	d3 83       	std	Z+3, r29	; 0x03
    4436:	c2 83       	std	Z+2, r28	; 0x02
    4438:	40 81       	ld	r20, Z
    443a:	51 81       	ldd	r21, Z+1	; 0x01
    443c:	84 0f       	add	r24, r20
    443e:	95 1f       	adc	r25, r21
    4440:	c8 17       	cp	r28, r24
    4442:	d9 07       	cpc	r29, r25
    4444:	59 f4       	brne	.+22     	; 0x445c <free+0x82>
    4446:	88 81       	ld	r24, Y
    4448:	99 81       	ldd	r25, Y+1	; 0x01
    444a:	84 0f       	add	r24, r20
    444c:	95 1f       	adc	r25, r21
    444e:	02 96       	adiw	r24, 0x02	; 2
    4450:	91 83       	std	Z+1, r25	; 0x01
    4452:	80 83       	st	Z, r24
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	9b 81       	ldd	r25, Y+3	; 0x03
    4458:	93 83       	std	Z+3, r25	; 0x03
    445a:	82 83       	std	Z+2, r24	; 0x02
    445c:	21 15       	cp	r18, r1
    445e:	31 05       	cpc	r19, r1
    4460:	29 f4       	brne	.+10     	; 0x446c <free+0x92>
    4462:	f0 93 6e 05 	sts	0x056E, r31	; 0x80056e <__flp+0x1>
    4466:	e0 93 6d 05 	sts	0x056D, r30	; 0x80056d <__flp>
    446a:	3d c0       	rjmp	.+122    	; 0x44e6 <free+0x10c>
    446c:	e9 01       	movw	r28, r18
    446e:	fb 83       	std	Y+3, r31	; 0x03
    4470:	ea 83       	std	Y+2, r30	; 0x02
    4472:	49 91       	ld	r20, Y+
    4474:	59 91       	ld	r21, Y+
    4476:	c4 0f       	add	r28, r20
    4478:	d5 1f       	adc	r29, r21
    447a:	ec 17       	cp	r30, r28
    447c:	fd 07       	cpc	r31, r29
    447e:	61 f4       	brne	.+24     	; 0x4498 <free+0xbe>
    4480:	80 81       	ld	r24, Z
    4482:	91 81       	ldd	r25, Z+1	; 0x01
    4484:	84 0f       	add	r24, r20
    4486:	95 1f       	adc	r25, r21
    4488:	02 96       	adiw	r24, 0x02	; 2
    448a:	e9 01       	movw	r28, r18
    448c:	99 83       	std	Y+1, r25	; 0x01
    448e:	88 83       	st	Y, r24
    4490:	82 81       	ldd	r24, Z+2	; 0x02
    4492:	93 81       	ldd	r25, Z+3	; 0x03
    4494:	9b 83       	std	Y+3, r25	; 0x03
    4496:	8a 83       	std	Y+2, r24	; 0x02
    4498:	e0 e0       	ldi	r30, 0x00	; 0
    449a:	f0 e0       	ldi	r31, 0x00	; 0
    449c:	12 96       	adiw	r26, 0x02	; 2
    449e:	8d 91       	ld	r24, X+
    44a0:	9c 91       	ld	r25, X
    44a2:	13 97       	sbiw	r26, 0x03	; 3
    44a4:	00 97       	sbiw	r24, 0x00	; 0
    44a6:	19 f0       	breq	.+6      	; 0x44ae <free+0xd4>
    44a8:	fd 01       	movw	r30, r26
    44aa:	dc 01       	movw	r26, r24
    44ac:	f7 cf       	rjmp	.-18     	; 0x449c <free+0xc2>
    44ae:	8d 91       	ld	r24, X+
    44b0:	9c 91       	ld	r25, X
    44b2:	11 97       	sbiw	r26, 0x01	; 1
    44b4:	9d 01       	movw	r18, r26
    44b6:	2e 5f       	subi	r18, 0xFE	; 254
    44b8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ba:	82 0f       	add	r24, r18
    44bc:	93 1f       	adc	r25, r19
    44be:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    44c2:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    44c6:	28 17       	cp	r18, r24
    44c8:	39 07       	cpc	r19, r25
    44ca:	69 f4       	brne	.+26     	; 0x44e6 <free+0x10c>
    44cc:	30 97       	sbiw	r30, 0x00	; 0
    44ce:	29 f4       	brne	.+10     	; 0x44da <free+0x100>
    44d0:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__flp+0x1>
    44d4:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <__flp>
    44d8:	02 c0       	rjmp	.+4      	; 0x44de <free+0x104>
    44da:	13 82       	std	Z+3, r1	; 0x03
    44dc:	12 82       	std	Z+2, r1	; 0x02
    44de:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <__brkval+0x1>
    44e2:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <__brkval>
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	08 95       	ret

000044ec <realloc>:
    44ec:	a0 e0       	ldi	r26, 0x00	; 0
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	ec e7       	ldi	r30, 0x7C	; 124
    44f2:	f2 e2       	ldi	r31, 0x22	; 34
    44f4:	0c 94 ad 23 	jmp	0x475a	; 0x475a <__prologue_saves__+0x8>
    44f8:	ec 01       	movw	r28, r24
    44fa:	00 97       	sbiw	r24, 0x00	; 0
    44fc:	21 f4       	brne	.+8      	; 0x4506 <realloc+0x1a>
    44fe:	cb 01       	movw	r24, r22
    4500:	0e 94 55 21 	call	0x42aa	; 0x42aa <malloc>
    4504:	b4 c0       	rjmp	.+360    	; 0x466e <realloc+0x182>
    4506:	fc 01       	movw	r30, r24
    4508:	e6 0f       	add	r30, r22
    450a:	f7 1f       	adc	r31, r23
    450c:	9c 01       	movw	r18, r24
    450e:	22 50       	subi	r18, 0x02	; 2
    4510:	31 09       	sbc	r19, r1
    4512:	e2 17       	cp	r30, r18
    4514:	f3 07       	cpc	r31, r19
    4516:	08 f4       	brcc	.+2      	; 0x451a <realloc+0x2e>
    4518:	a8 c0       	rjmp	.+336    	; 0x466a <realloc+0x17e>
    451a:	d9 01       	movw	r26, r18
    451c:	0d 91       	ld	r16, X+
    451e:	1c 91       	ld	r17, X
    4520:	11 97       	sbiw	r26, 0x01	; 1
    4522:	06 17       	cp	r16, r22
    4524:	17 07       	cpc	r17, r23
    4526:	b0 f0       	brcs	.+44     	; 0x4554 <realloc+0x68>
    4528:	05 30       	cpi	r16, 0x05	; 5
    452a:	11 05       	cpc	r17, r1
    452c:	08 f4       	brcc	.+2      	; 0x4530 <realloc+0x44>
    452e:	9b c0       	rjmp	.+310    	; 0x4666 <realloc+0x17a>
    4530:	c8 01       	movw	r24, r16
    4532:	04 97       	sbiw	r24, 0x04	; 4
    4534:	86 17       	cp	r24, r22
    4536:	97 07       	cpc	r25, r23
    4538:	08 f4       	brcc	.+2      	; 0x453c <realloc+0x50>
    453a:	95 c0       	rjmp	.+298    	; 0x4666 <realloc+0x17a>
    453c:	02 50       	subi	r16, 0x02	; 2
    453e:	11 09       	sbc	r17, r1
    4540:	06 1b       	sub	r16, r22
    4542:	17 0b       	sbc	r17, r23
    4544:	01 93       	st	Z+, r16
    4546:	11 93       	st	Z+, r17
    4548:	6d 93       	st	X+, r22
    454a:	7c 93       	st	X, r23
    454c:	cf 01       	movw	r24, r30
    454e:	0e 94 ed 21 	call	0x43da	; 0x43da <free>
    4552:	89 c0       	rjmp	.+274    	; 0x4666 <realloc+0x17a>
    4554:	5b 01       	movw	r10, r22
    4556:	a0 1a       	sub	r10, r16
    4558:	b1 0a       	sbc	r11, r17
    455a:	4c 01       	movw	r8, r24
    455c:	80 0e       	add	r8, r16
    455e:	91 1e       	adc	r9, r17
    4560:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <__flp>
    4564:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <__flp+0x1>
    4568:	61 2c       	mov	r6, r1
    456a:	71 2c       	mov	r7, r1
    456c:	e1 2c       	mov	r14, r1
    456e:	f1 2c       	mov	r15, r1
    4570:	10 97       	sbiw	r26, 0x00	; 0
    4572:	09 f4       	brne	.+2      	; 0x4576 <realloc+0x8a>
    4574:	46 c0       	rjmp	.+140    	; 0x4602 <realloc+0x116>
    4576:	8d 91       	ld	r24, X+
    4578:	9c 91       	ld	r25, X
    457a:	11 97       	sbiw	r26, 0x01	; 1
    457c:	a8 15       	cp	r26, r8
    457e:	b9 05       	cpc	r27, r9
    4580:	b1 f5       	brne	.+108    	; 0x45ee <realloc+0x102>
    4582:	6c 01       	movw	r12, r24
    4584:	42 e0       	ldi	r20, 0x02	; 2
    4586:	c4 0e       	add	r12, r20
    4588:	d1 1c       	adc	r13, r1
    458a:	ca 14       	cp	r12, r10
    458c:	db 04       	cpc	r13, r11
    458e:	78 f1       	brcs	.+94     	; 0x45ee <realloc+0x102>
    4590:	4c 01       	movw	r8, r24
    4592:	8a 18       	sub	r8, r10
    4594:	9b 08       	sbc	r9, r11
    4596:	64 01       	movw	r12, r8
    4598:	42 e0       	ldi	r20, 0x02	; 2
    459a:	c4 0e       	add	r12, r20
    459c:	d1 1c       	adc	r13, r1
    459e:	12 96       	adiw	r26, 0x02	; 2
    45a0:	bc 90       	ld	r11, X
    45a2:	12 97       	sbiw	r26, 0x02	; 2
    45a4:	13 96       	adiw	r26, 0x03	; 3
    45a6:	ac 91       	ld	r26, X
    45a8:	b5 e0       	ldi	r27, 0x05	; 5
    45aa:	cb 16       	cp	r12, r27
    45ac:	d1 04       	cpc	r13, r1
    45ae:	40 f0       	brcs	.+16     	; 0x45c0 <realloc+0xd4>
    45b0:	b2 82       	std	Z+2, r11	; 0x02
    45b2:	a3 83       	std	Z+3, r26	; 0x03
    45b4:	91 82       	std	Z+1, r9	; 0x01
    45b6:	80 82       	st	Z, r8
    45b8:	d9 01       	movw	r26, r18
    45ba:	6d 93       	st	X+, r22
    45bc:	7c 93       	st	X, r23
    45be:	09 c0       	rjmp	.+18     	; 0x45d2 <realloc+0xe6>
    45c0:	0e 5f       	subi	r16, 0xFE	; 254
    45c2:	1f 4f       	sbci	r17, 0xFF	; 255
    45c4:	80 0f       	add	r24, r16
    45c6:	91 1f       	adc	r25, r17
    45c8:	f9 01       	movw	r30, r18
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	80 83       	st	Z, r24
    45ce:	eb 2d       	mov	r30, r11
    45d0:	fa 2f       	mov	r31, r26
    45d2:	e1 14       	cp	r14, r1
    45d4:	f1 04       	cpc	r15, r1
    45d6:	31 f0       	breq	.+12     	; 0x45e4 <realloc+0xf8>
    45d8:	d7 01       	movw	r26, r14
    45da:	13 96       	adiw	r26, 0x03	; 3
    45dc:	fc 93       	st	X, r31
    45de:	ee 93       	st	-X, r30
    45e0:	12 97       	sbiw	r26, 0x02	; 2
    45e2:	41 c0       	rjmp	.+130    	; 0x4666 <realloc+0x17a>
    45e4:	f0 93 6e 05 	sts	0x056E, r31	; 0x80056e <__flp+0x1>
    45e8:	e0 93 6d 05 	sts	0x056D, r30	; 0x80056d <__flp>
    45ec:	3c c0       	rjmp	.+120    	; 0x4666 <realloc+0x17a>
    45ee:	68 16       	cp	r6, r24
    45f0:	79 06       	cpc	r7, r25
    45f2:	08 f4       	brcc	.+2      	; 0x45f6 <realloc+0x10a>
    45f4:	3c 01       	movw	r6, r24
    45f6:	7d 01       	movw	r14, r26
    45f8:	12 96       	adiw	r26, 0x02	; 2
    45fa:	0d 90       	ld	r0, X+
    45fc:	bc 91       	ld	r27, X
    45fe:	a0 2d       	mov	r26, r0
    4600:	b7 cf       	rjmp	.-146    	; 0x4570 <realloc+0x84>
    4602:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <__brkval>
    4606:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <__brkval+0x1>
    460a:	88 16       	cp	r8, r24
    460c:	99 06       	cpc	r9, r25
    460e:	e1 f4       	brne	.+56     	; 0x4648 <realloc+0x15c>
    4610:	66 16       	cp	r6, r22
    4612:	77 06       	cpc	r7, r23
    4614:	c8 f4       	brcc	.+50     	; 0x4648 <realloc+0x15c>
    4616:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    461a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	41 f4       	brne	.+16     	; 0x4632 <realloc+0x146>
    4622:	8d b7       	in	r24, 0x3d	; 61
    4624:	9e b7       	in	r25, 0x3e	; 62
    4626:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    462a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    462e:	84 1b       	sub	r24, r20
    4630:	95 0b       	sbc	r25, r21
    4632:	e8 17       	cp	r30, r24
    4634:	f9 07       	cpc	r31, r25
    4636:	c8 f4       	brcc	.+50     	; 0x466a <realloc+0x17e>
    4638:	f0 93 6c 05 	sts	0x056C, r31	; 0x80056c <__brkval+0x1>
    463c:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <__brkval>
    4640:	f9 01       	movw	r30, r18
    4642:	71 83       	std	Z+1, r23	; 0x01
    4644:	60 83       	st	Z, r22
    4646:	0f c0       	rjmp	.+30     	; 0x4666 <realloc+0x17a>
    4648:	cb 01       	movw	r24, r22
    464a:	0e 94 55 21 	call	0x42aa	; 0x42aa <malloc>
    464e:	7c 01       	movw	r14, r24
    4650:	00 97       	sbiw	r24, 0x00	; 0
    4652:	59 f0       	breq	.+22     	; 0x466a <realloc+0x17e>
    4654:	a8 01       	movw	r20, r16
    4656:	be 01       	movw	r22, r28
    4658:	0e 94 86 23 	call	0x470c	; 0x470c <memcpy>
    465c:	ce 01       	movw	r24, r28
    465e:	0e 94 ed 21 	call	0x43da	; 0x43da <free>
    4662:	c7 01       	movw	r24, r14
    4664:	04 c0       	rjmp	.+8      	; 0x466e <realloc+0x182>
    4666:	ce 01       	movw	r24, r28
    4668:	02 c0       	rjmp	.+4      	; 0x466e <realloc+0x182>
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
    4672:	ee e0       	ldi	r30, 0x0E	; 14
    4674:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <__epilogue_restores__+0x8>

00004678 <atoi>:
    4678:	fc 01       	movw	r30, r24
    467a:	88 27       	eor	r24, r24
    467c:	99 27       	eor	r25, r25
    467e:	e8 94       	clt
    4680:	21 91       	ld	r18, Z+
    4682:	20 32       	cpi	r18, 0x20	; 32
    4684:	e9 f3       	breq	.-6      	; 0x4680 <atoi+0x8>
    4686:	29 30       	cpi	r18, 0x09	; 9
    4688:	10 f0       	brcs	.+4      	; 0x468e <atoi+0x16>
    468a:	2e 30       	cpi	r18, 0x0E	; 14
    468c:	c8 f3       	brcs	.-14     	; 0x4680 <atoi+0x8>
    468e:	2b 32       	cpi	r18, 0x2B	; 43
    4690:	41 f0       	breq	.+16     	; 0x46a2 <atoi+0x2a>
    4692:	2d 32       	cpi	r18, 0x2D	; 45
    4694:	39 f4       	brne	.+14     	; 0x46a4 <atoi+0x2c>
    4696:	68 94       	set
    4698:	04 c0       	rjmp	.+8      	; 0x46a2 <atoi+0x2a>
    469a:	0e 94 a1 23 	call	0x4742	; 0x4742 <__mulhi_const_10>
    469e:	82 0f       	add	r24, r18
    46a0:	91 1d       	adc	r25, r1
    46a2:	21 91       	ld	r18, Z+
    46a4:	20 53       	subi	r18, 0x30	; 48
    46a6:	2a 30       	cpi	r18, 0x0A	; 10
    46a8:	c0 f3       	brcs	.-16     	; 0x469a <atoi+0x22>
    46aa:	1e f4       	brtc	.+6      	; 0x46b2 <atoi+0x3a>
    46ac:	90 95       	com	r25
    46ae:	81 95       	neg	r24
    46b0:	9f 4f       	sbci	r25, 0xFF	; 255
    46b2:	08 95       	ret

000046b4 <strcmp_P>:
    46b4:	fb 01       	movw	r30, r22
    46b6:	dc 01       	movw	r26, r24
    46b8:	8d 91       	ld	r24, X+
    46ba:	05 90       	lpm	r0, Z+
    46bc:	80 19       	sub	r24, r0
    46be:	01 10       	cpse	r0, r1
    46c0:	d9 f3       	breq	.-10     	; 0x46b8 <strcmp_P+0x4>
    46c2:	99 0b       	sbc	r25, r25
    46c4:	08 95       	ret

000046c6 <__strlen_P>:
    46c6:	fc 01       	movw	r30, r24
    46c8:	05 90       	lpm	r0, Z+
    46ca:	00 20       	and	r0, r0
    46cc:	e9 f7       	brne	.-6      	; 0x46c8 <__strlen_P+0x2>
    46ce:	80 95       	com	r24
    46d0:	90 95       	com	r25
    46d2:	8e 0f       	add	r24, r30
    46d4:	9f 1f       	adc	r25, r31
    46d6:	08 95       	ret

000046d8 <strstr_P>:
    46d8:	fb 01       	movw	r30, r22
    46da:	55 91       	lpm	r21, Z+
    46dc:	55 23       	and	r21, r21
    46de:	a9 f0       	breq	.+42     	; 0x470a <strstr_P+0x32>
    46e0:	bf 01       	movw	r22, r30
    46e2:	dc 01       	movw	r26, r24
    46e4:	4d 91       	ld	r20, X+
    46e6:	45 17       	cp	r20, r21
    46e8:	41 11       	cpse	r20, r1
    46ea:	e1 f7       	brne	.-8      	; 0x46e4 <strstr_P+0xc>
    46ec:	59 f4       	brne	.+22     	; 0x4704 <strstr_P+0x2c>
    46ee:	cd 01       	movw	r24, r26
    46f0:	05 90       	lpm	r0, Z+
    46f2:	00 20       	and	r0, r0
    46f4:	49 f0       	breq	.+18     	; 0x4708 <strstr_P+0x30>
    46f6:	4d 91       	ld	r20, X+
    46f8:	40 15       	cp	r20, r0
    46fa:	41 11       	cpse	r20, r1
    46fc:	c9 f3       	breq	.-14     	; 0x46f0 <strstr_P+0x18>
    46fe:	fb 01       	movw	r30, r22
    4700:	41 11       	cpse	r20, r1
    4702:	ef cf       	rjmp	.-34     	; 0x46e2 <strstr_P+0xa>
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	08 95       	ret

0000470c <memcpy>:
    470c:	fb 01       	movw	r30, r22
    470e:	dc 01       	movw	r26, r24
    4710:	02 c0       	rjmp	.+4      	; 0x4716 <memcpy+0xa>
    4712:	01 90       	ld	r0, Z+
    4714:	0d 92       	st	X+, r0
    4716:	41 50       	subi	r20, 0x01	; 1
    4718:	50 40       	sbci	r21, 0x00	; 0
    471a:	d8 f7       	brcc	.-10     	; 0x4712 <memcpy+0x6>
    471c:	08 95       	ret

0000471e <strchr>:
    471e:	fc 01       	movw	r30, r24
    4720:	81 91       	ld	r24, Z+
    4722:	86 17       	cp	r24, r22
    4724:	21 f0       	breq	.+8      	; 0x472e <strchr+0x10>
    4726:	88 23       	and	r24, r24
    4728:	d9 f7       	brne	.-10     	; 0x4720 <strchr+0x2>
    472a:	99 27       	eor	r25, r25
    472c:	08 95       	ret
    472e:	31 97       	sbiw	r30, 0x01	; 1
    4730:	cf 01       	movw	r24, r30
    4732:	08 95       	ret

00004734 <strcpy>:
    4734:	fb 01       	movw	r30, r22
    4736:	dc 01       	movw	r26, r24
    4738:	01 90       	ld	r0, Z+
    473a:	0d 92       	st	X+, r0
    473c:	00 20       	and	r0, r0
    473e:	e1 f7       	brne	.-8      	; 0x4738 <strcpy+0x4>
    4740:	08 95       	ret

00004742 <__mulhi_const_10>:
    4742:	7a e0       	ldi	r23, 0x0A	; 10
    4744:	97 9f       	mul	r25, r23
    4746:	90 2d       	mov	r25, r0
    4748:	87 9f       	mul	r24, r23
    474a:	80 2d       	mov	r24, r0
    474c:	91 0d       	add	r25, r1
    474e:	11 24       	eor	r1, r1
    4750:	08 95       	ret

00004752 <__prologue_saves__>:
    4752:	2f 92       	push	r2
    4754:	3f 92       	push	r3
    4756:	4f 92       	push	r4
    4758:	5f 92       	push	r5
    475a:	6f 92       	push	r6
    475c:	7f 92       	push	r7
    475e:	8f 92       	push	r8
    4760:	9f 92       	push	r9
    4762:	af 92       	push	r10
    4764:	bf 92       	push	r11
    4766:	cf 92       	push	r12
    4768:	df 92       	push	r13
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	0f 93       	push	r16
    4770:	1f 93       	push	r17
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
    477a:	ca 1b       	sub	r28, r26
    477c:	db 0b       	sbc	r29, r27
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	f8 94       	cli
    4782:	de bf       	out	0x3e, r29	; 62
    4784:	0f be       	out	0x3f, r0	; 63
    4786:	cd bf       	out	0x3d, r28	; 61
    4788:	09 94       	ijmp

0000478a <__epilogue_restores__>:
    478a:	2a 88       	ldd	r2, Y+18	; 0x12
    478c:	39 88       	ldd	r3, Y+17	; 0x11
    478e:	48 88       	ldd	r4, Y+16	; 0x10
    4790:	5f 84       	ldd	r5, Y+15	; 0x0f
    4792:	6e 84       	ldd	r6, Y+14	; 0x0e
    4794:	7d 84       	ldd	r7, Y+13	; 0x0d
    4796:	8c 84       	ldd	r8, Y+12	; 0x0c
    4798:	9b 84       	ldd	r9, Y+11	; 0x0b
    479a:	aa 84       	ldd	r10, Y+10	; 0x0a
    479c:	b9 84       	ldd	r11, Y+9	; 0x09
    479e:	c8 84       	ldd	r12, Y+8	; 0x08
    47a0:	df 80       	ldd	r13, Y+7	; 0x07
    47a2:	ee 80       	ldd	r14, Y+6	; 0x06
    47a4:	fd 80       	ldd	r15, Y+5	; 0x05
    47a6:	0c 81       	ldd	r16, Y+4	; 0x04
    47a8:	1b 81       	ldd	r17, Y+3	; 0x03
    47aa:	aa 81       	ldd	r26, Y+2	; 0x02
    47ac:	b9 81       	ldd	r27, Y+1	; 0x01
    47ae:	ce 0f       	add	r28, r30
    47b0:	d1 1d       	adc	r29, r1
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	f8 94       	cli
    47b6:	de bf       	out	0x3e, r29	; 62
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	cd bf       	out	0x3d, r28	; 61
    47bc:	ed 01       	movw	r28, r26
    47be:	08 95       	ret

000047c0 <__do_global_dtors>:
    47c0:	14 e0       	ldi	r17, 0x04	; 4
    47c2:	cc e1       	ldi	r28, 0x1C	; 28
    47c4:	d4 e0       	ldi	r29, 0x04	; 4
    47c6:	04 c0       	rjmp	.+8      	; 0x47d0 <__do_global_dtors+0x10>
    47c8:	fe 01       	movw	r30, r28
    47ca:	0e 94 4f 21 	call	0x429e	; 0x429e <__tablejump2__>
    47ce:	21 96       	adiw	r28, 0x01	; 1
    47d0:	cd 31       	cpi	r28, 0x1D	; 29
    47d2:	d1 07       	cpc	r29, r17
    47d4:	c9 f7       	brne	.-14     	; 0x47c8 <__do_global_dtors+0x8>
    47d6:	f8 94       	cli

000047d8 <__stop_program>:
    47d8:	ff cf       	rjmp	.-2      	; 0x47d8 <__stop_program>
