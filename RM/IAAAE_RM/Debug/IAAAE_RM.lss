
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  000057ee  00005882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050b  00800342  00800342  00005ac4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ac8  00000000  00000000  00005b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001fc8f  00000000  00000000  000065fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b30  00000000  00000000  0002628b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007c17  00000000  00000000  00029dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000034f0  00000000  00000000  000319d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011352  00000000  00000000  00034ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010bdc  00000000  00000000  00046216  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab0  00000000  00000000  00056df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005953  00000000  00000000  000578a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 03 	jmp	0x724	; 0x724 <__dtors_end>
       4:	0c 94 50 27 	jmp	0x4ea0	; 0x4ea0 <__vector_1>
       8:	0c 94 77 27 	jmp	0x4eee	; 0x4eee <__vector_2>
       c:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__vector_3>
      10:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__vector_3>
      14:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__vector_3>
      18:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      1c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      20:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      24:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      28:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      2c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      30:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      34:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      38:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      3c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      40:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__vector_16>
      44:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      48:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__vector_18>
      4c:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_19>
      50:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      54:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      58:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      5c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      60:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_24>
      64:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      68:	22 0e       	add	r2, r18
      6a:	28 0e       	add	r2, r24
      6c:	28 0e       	add	r2, r24
      6e:	28 0e       	add	r2, r24
      70:	28 0e       	add	r2, r24
      72:	28 0e       	add	r2, r24
      74:	28 0e       	add	r2, r24
      76:	28 0e       	add	r2, r24
      78:	16 0d       	add	r17, r6
      7a:	28 0e       	add	r2, r24
      7c:	28 0e       	add	r2, r24
      7e:	28 0e       	add	r2, r24
      80:	28 0e       	add	r2, r24
      82:	28 0e       	add	r2, r24
      84:	28 0e       	add	r2, r24
      86:	28 0e       	add	r2, r24
      88:	16 0d       	add	r17, r6
      8a:	28 0e       	add	r2, r24
      8c:	28 0e       	add	r2, r24
      8e:	28 0e       	add	r2, r24
      90:	28 0e       	add	r2, r24
      92:	28 0e       	add	r2, r24
      94:	28 0e       	add	r2, r24
      96:	28 0e       	add	r2, r24
      98:	20 0d       	add	r18, r0
      9a:	28 0e       	add	r2, r24
      9c:	28 0e       	add	r2, r24
      9e:	28 0e       	add	r2, r24
      a0:	28 0e       	add	r2, r24
      a2:	28 0e       	add	r2, r24
      a4:	28 0e       	add	r2, r24
      a6:	28 0e       	add	r2, r24
      a8:	4c 0d       	add	r20, r12
      aa:	28 0e       	add	r2, r24
      ac:	28 0e       	add	r2, r24
      ae:	28 0e       	add	r2, r24
      b0:	28 0e       	add	r2, r24
      b2:	28 0e       	add	r2, r24
      b4:	28 0e       	add	r2, r24
      b6:	28 0e       	add	r2, r24
      b8:	20 0d       	add	r18, r0
      ba:	28 0e       	add	r2, r24
      bc:	28 0e       	add	r2, r24
      be:	28 0e       	add	r2, r24
      c0:	28 0e       	add	r2, r24
      c2:	28 0e       	add	r2, r24
      c4:	28 0e       	add	r2, r24
      c6:	28 0e       	add	r2, r24
      c8:	52 0d       	add	r21, r2
      ca:	28 0e       	add	r2, r24
      cc:	28 0e       	add	r2, r24
      ce:	28 0e       	add	r2, r24
      d0:	28 0e       	add	r2, r24
      d2:	28 0e       	add	r2, r24
      d4:	28 0e       	add	r2, r24
      d6:	28 0e       	add	r2, r24
      d8:	58 0d       	add	r21, r8
      da:	28 0e       	add	r2, r24
      dc:	28 0e       	add	r2, r24
      de:	28 0e       	add	r2, r24
      e0:	28 0e       	add	r2, r24
      e2:	28 0e       	add	r2, r24
      e4:	28 0e       	add	r2, r24
      e6:	28 0e       	add	r2, r24
      e8:	6e 0d       	add	r22, r14
      ea:	28 0e       	add	r2, r24
      ec:	28 0e       	add	r2, r24
      ee:	28 0e       	add	r2, r24
      f0:	28 0e       	add	r2, r24
      f2:	28 0e       	add	r2, r24
      f4:	28 0e       	add	r2, r24
      f6:	28 0e       	add	r2, r24
      f8:	9e 0d       	add	r25, r14
      fa:	28 0e       	add	r2, r24
      fc:	28 0e       	add	r2, r24
      fe:	28 0e       	add	r2, r24
     100:	28 0e       	add	r2, r24
     102:	28 0e       	add	r2, r24
     104:	28 0e       	add	r2, r24
     106:	28 0e       	add	r2, r24
     108:	5e 0d       	add	r21, r14
     10a:	28 0e       	add	r2, r24
     10c:	28 0e       	add	r2, r24
     10e:	28 0e       	add	r2, r24
     110:	28 0e       	add	r2, r24
     112:	28 0e       	add	r2, r24
     114:	28 0e       	add	r2, r24
     116:	28 0e       	add	r2, r24
     118:	7c 0d       	add	r23, r12
     11a:	28 0e       	add	r2, r24
     11c:	28 0e       	add	r2, r24
     11e:	28 0e       	add	r2, r24
     120:	28 0e       	add	r2, r24
     122:	28 0e       	add	r2, r24
     124:	28 0e       	add	r2, r24
     126:	28 0e       	add	r2, r24
     128:	a1 0d       	add	r26, r1
     12a:	28 0e       	add	r2, r24
     12c:	28 0e       	add	r2, r24
     12e:	28 0e       	add	r2, r24
     130:	28 0e       	add	r2, r24
     132:	28 0e       	add	r2, r24
     134:	28 0e       	add	r2, r24
     136:	28 0e       	add	r2, r24
     138:	a1 0d       	add	r26, r1
     13a:	28 0e       	add	r2, r24
     13c:	28 0e       	add	r2, r24
     13e:	28 0e       	add	r2, r24
     140:	28 0e       	add	r2, r24
     142:	28 0e       	add	r2, r24
     144:	28 0e       	add	r2, r24
     146:	28 0e       	add	r2, r24
     148:	a1 0d       	add	r26, r1
     14a:	28 0e       	add	r2, r24
     14c:	28 0e       	add	r2, r24
     14e:	28 0e       	add	r2, r24
     150:	28 0e       	add	r2, r24
     152:	28 0e       	add	r2, r24
     154:	28 0e       	add	r2, r24
     156:	28 0e       	add	r2, r24
     158:	a1 0d       	add	r26, r1
     15a:	28 0e       	add	r2, r24
     15c:	28 0e       	add	r2, r24
     15e:	28 0e       	add	r2, r24
     160:	28 0e       	add	r2, r24
     162:	28 0e       	add	r2, r24
     164:	28 0e       	add	r2, r24
     166:	28 0e       	add	r2, r24
     168:	aa 0d       	add	r26, r10
     16a:	28 0e       	add	r2, r24
     16c:	28 0e       	add	r2, r24
     16e:	28 0e       	add	r2, r24
     170:	28 0e       	add	r2, r24
     172:	28 0e       	add	r2, r24
     174:	28 0e       	add	r2, r24
     176:	28 0e       	add	r2, r24
     178:	e4 0d       	add	r30, r4
     17a:	28 0e       	add	r2, r24
     17c:	28 0e       	add	r2, r24
     17e:	28 0e       	add	r2, r24
     180:	28 0e       	add	r2, r24
     182:	28 0e       	add	r2, r24
     184:	28 0e       	add	r2, r24
     186:	28 0e       	add	r2, r24
     188:	aa 0d       	add	r26, r10
     18a:	28 0e       	add	r2, r24
     18c:	28 0e       	add	r2, r24
     18e:	28 0e       	add	r2, r24
     190:	28 0e       	add	r2, r24
     192:	28 0e       	add	r2, r24
     194:	28 0e       	add	r2, r24
     196:	28 0e       	add	r2, r24
     198:	e4 0d       	add	r30, r4
     19a:	28 0e       	add	r2, r24
     19c:	28 0e       	add	r2, r24
     19e:	28 0e       	add	r2, r24
     1a0:	28 0e       	add	r2, r24
     1a2:	28 0e       	add	r2, r24
     1a4:	28 0e       	add	r2, r24
     1a6:	28 0e       	add	r2, r24
     1a8:	c6 0d       	add	r28, r6
     1aa:	28 0e       	add	r2, r24
     1ac:	28 0e       	add	r2, r24
     1ae:	28 0e       	add	r2, r24
     1b0:	28 0e       	add	r2, r24
     1b2:	28 0e       	add	r2, r24
     1b4:	28 0e       	add	r2, r24
     1b6:	28 0e       	add	r2, r24
     1b8:	e8 0d       	add	r30, r8
     1ba:	28 0e       	add	r2, r24
     1bc:	28 0e       	add	r2, r24
     1be:	28 0e       	add	r2, r24
     1c0:	28 0e       	add	r2, r24
     1c2:	28 0e       	add	r2, r24
     1c4:	28 0e       	add	r2, r24
     1c6:	28 0e       	add	r2, r24
     1c8:	e8 0d       	add	r30, r8
     1ca:	28 0e       	add	r2, r24
     1cc:	28 0e       	add	r2, r24
     1ce:	28 0e       	add	r2, r24
     1d0:	28 0e       	add	r2, r24
     1d2:	28 0e       	add	r2, r24
     1d4:	28 0e       	add	r2, r24
     1d6:	28 0e       	add	r2, r24
     1d8:	fe 0d       	add	r31, r14
     1da:	28 0e       	add	r2, r24
     1dc:	28 0e       	add	r2, r24
     1de:	28 0e       	add	r2, r24
     1e0:	28 0e       	add	r2, r24
     1e2:	28 0e       	add	r2, r24
     1e4:	28 0e       	add	r2, r24
     1e6:	28 0e       	add	r2, r24
     1e8:	1c 0e       	add	r1, r28
     1ea:	28 0e       	add	r2, r24
     1ec:	28 0e       	add	r2, r24
     1ee:	28 0e       	add	r2, r24
     1f0:	28 0e       	add	r2, r24
     1f2:	28 0e       	add	r2, r24
     1f4:	28 0e       	add	r2, r24
     1f6:	28 0e       	add	r2, r24
     1f8:	1c 0e       	add	r1, r28
     1fa:	28 0e       	add	r2, r24
     1fc:	28 0e       	add	r2, r24
     1fe:	28 0e       	add	r2, r24
     200:	28 0e       	add	r2, r24
     202:	28 0e       	add	r2, r24
     204:	28 0e       	add	r2, r24
     206:	28 0e       	add	r2, r24
     208:	28 0e       	add	r2, r24
     20a:	28 0e       	add	r2, r24
     20c:	28 0e       	add	r2, r24
     20e:	28 0e       	add	r2, r24
     210:	28 0e       	add	r2, r24
     212:	28 0e       	add	r2, r24
     214:	28 0e       	add	r2, r24
     216:	28 0e       	add	r2, r24
     218:	28 0e       	add	r2, r24
     21a:	28 0e       	add	r2, r24
     21c:	28 0e       	add	r2, r24
     21e:	28 0e       	add	r2, r24
     220:	28 0e       	add	r2, r24
     222:	28 0e       	add	r2, r24
     224:	28 0e       	add	r2, r24
     226:	28 0e       	add	r2, r24
     228:	28 0e       	add	r2, r24
     22a:	28 0e       	add	r2, r24
     22c:	28 0e       	add	r2, r24
     22e:	28 0e       	add	r2, r24
     230:	28 0e       	add	r2, r24
     232:	28 0e       	add	r2, r24
     234:	28 0e       	add	r2, r24
     236:	28 0e       	add	r2, r24
     238:	28 0e       	add	r2, r24
     23a:	28 0e       	add	r2, r24
     23c:	28 0e       	add	r2, r24
     23e:	28 0e       	add	r2, r24
     240:	28 0e       	add	r2, r24
     242:	28 0e       	add	r2, r24
     244:	28 0e       	add	r2, r24
     246:	28 0e       	add	r2, r24
     248:	28 0e       	add	r2, r24
     24a:	28 0e       	add	r2, r24
     24c:	28 0e       	add	r2, r24
     24e:	28 0e       	add	r2, r24
     250:	28 0e       	add	r2, r24
     252:	28 0e       	add	r2, r24
     254:	28 0e       	add	r2, r24
     256:	28 0e       	add	r2, r24
     258:	27 0e       	add	r2, r23

0000025a <__trampolines_end>:
     25a:	74 65       	ori	r23, 0x54	; 84
     25c:	78 74       	andi	r23, 0x48	; 72
     25e:	2f 70       	andi	r18, 0x0F	; 15
     260:	6c 61       	ori	r22, 0x1C	; 28
     262:	69 6e       	ori	r22, 0xE9	; 233
	...

00000265 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
	...

00000266 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
	...

00000267 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     267:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000272 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
     272:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000027d <_ZZ5setupE3__c>:
     27d:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000289 <_ZZ9printDatavE3__c>:
     289:	4d 6f 64 75 6c 65 20 23 00                          Module #.

00000292 <_ZZ9printDatavE3__c_0>:
     292:	2c 20 54 6f 74 61 6c 20 23 52 65 61 64 69 6e 67     , Total #Reading
     2a2:	73 3a 20 00                                         s: .

000002a6 <_ZZ9printDatavE3__c_1>:
     2a6:	52 65 61 64 69 6e 67 20 23 00                       Reading #.

000002b0 <_ZZ9printDatavE3__c_2>:
     2b0:	47 73 6d 2d 53 74 61 74 75 73 3a 20 00              Gsm-Status: .

000002bd <_ZZ9printDatavE3__c_3>:
     2bd:	2c 20 47 73 6d 2d 52 53 53 49 3a 20 00              , Gsm-RSSI: .

000002ca <_ZZ9printDatavE3__c_4>:
     2ca:	2c 20 47 73 6d 2d 45 72 72 6f 72 20 43 6f 64 65     , Gsm-Error Code
     2da:	3a 20 00                                            : .

000002dd <_ZZ9printDatavE3__c_5>:
     2dd:	2c 20 47 70 73 2d 53 74 61 74 75 73 3a 20 00        , Gps-Status: .

000002ec <_ZZ9printDatavE3__c_6>:
     2ec:	2c 20 47 70 73 2d 45 72 72 6f 72 20 43 6f 64 65     , Gps-Error Code
     2fc:	3a 20 00                                            : .

000002ff <_ZZ9printDatavE3__c_7>:
     2ff:	2c 20 47 70 73 2d 4c 61 74 3a 20 00                 , Gps-Lat: .

0000030b <_ZZ9printDatavE3__c_8>:
     30b:	2c 20 47 70 73 2d 4c 6f 6e 3a 20 00                 , Gps-Lon: .

00000317 <_ZZ9printDatavE3__c_9>:
     317:	2c 20 47 70 73 2d 44 61 74 65 3a 20 00              , Gps-Date: .

00000324 <_ZZ9printDatavE3__c_10>:
     324:	2c 20 47 70 73 2d 48 65 61 64 69 6e 67 3a 20 00     , Gps-Heading: .

00000334 <_ZZ9printDatavE3__c_11>:
     334:	2c 20 47 70 73 2d 53 70 65 65 64 3a 20 00           , Gps-Speed: .

00000342 <_ZZ17on3MinutesElapsedbE3__c>:
     342:	33 20 6d 69 6e 75 74 65 73 20 65 6c 61 70 73 65     3 minutes elapse
     352:	64 20 2d 20 6c 6f 67 67 69 6e 67 2e 2e 2e 00        d - logging....

00000361 <_ZZ17on3MinutesElapsedbE3__c_0>:
     361:	4d 6f 64 75 6c 65 20 23 00                          Module #.

0000036a <_ZZ17on3MinutesElapsedbE3__c_1>:
     36a:	2c 20 43 75 72 72 65 6e 74 20 23 52 65 61 64 69     , Current #Readi
     37a:	6e 67 73 3a 20 00                                   ngs: .

00000380 <digital_pin_to_timer_PGM>:
     380:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     390:	00 00 00 00                                         ....

00000394 <digital_pin_to_bit_mask_PGM>:
     394:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3a4:	04 08 10 20                                         ... 

000003a8 <digital_pin_to_port_PGM>:
     3a8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3b8:	03 03 03 03                                         ....

000003bc <port_to_input_PGM>:
     3bc:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003c6 <port_to_output_PGM>:
     3c6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003d0 <port_to_mode_PGM>:
     3d0:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003da <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     3da:	09 3c 2d 2d 2d 20 00                                .<--- .

000003e1 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     3e1:	09 2d 2d 2d 3e 20 00                                .---> .

000003e8 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     3e8:	09 3c 2d 2d 2d 20 00                                .<--- .

000003ef <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     3ef:	09 2d 2d 2d 3e 20 00                                .---> .

000003f6 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     3f6:	09 3c 2d 2d 2d 20 00                                .<--- .

000003fd <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     3fd:	09 2d 2d 2d 3e 20 00                                .---> .

00000404 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     404:	09 3c 2d 2d 2d 20 00                                .<--- .

0000040b <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     40b:	09 2d 2d 2d 3e 20 00                                .---> .

00000412 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     412:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

0000041a <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     41a:	53 50 41 43 45 00                                   SPACE.

00000420 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     420:	09 3c 2d 2d 2d 20 00                                .<--- .

00000427 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     427:	52 45 44 49 52 00                                   REDIR.

0000042d <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     42d:	55 52 4c 00                                         URL.

00000431 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     431:	55 41 00                                            UA.

00000434 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     434:	43 49 44 00                                         CID.

00000438 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     438:	4c 65 6e 3a 20 00                                   Len: .

0000043e <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     43e:	53 74 61 74 75 73 3a 20 00                          Status: .

00000447 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     447:	43 4f 4e 54 45 4e 54 00                             CONTENT.

0000044f <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     44f:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

0000045b <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     45b:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

00000466 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     466:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000472 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     472:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

0000047f <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     47f:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

0000048c <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     48c:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

0000049b <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     49b:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000004a4 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     4a4:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004b1 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     4b1:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004be <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     4be:	09 2d 2d 2d 3e 20 00                                .---> .

000004c5 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     4c5:	22 2c 00                                            ",.

000004c8 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     4c8:	22 2c 22 00                                         ",".

000004cc <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     4cc:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004da <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     4da:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004e8 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     4e8:	09 2d 2d 2d 3e 20 00                                .---> .

000004ef <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     4ef:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

000004fb <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     4fb:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000507 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     507:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000512 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     512:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

0000051f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     51f:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000052a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     52a:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000532 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     532:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000053b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     53b:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000548 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     548:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     558:	44 22 2c 00                                         D",.

0000055c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     55c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     56c:	45 52 22 2c 00                                      ER",.

00000571 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     571:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000057b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     57b:	09 2d 2d 2d 3e 20 00                                .---> .

00000582 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     582:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000058c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     58c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     59c:	4e 22 2c 00                                         N",.

000005a0 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     5a0:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     5b0:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000005be <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     5be:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000005c9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     5c9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000005d4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     5d4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005dc <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     5dc:	3e 20 00                                            > .

000005df <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     5df:	3e 20 00                                            > .

000005e2 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     5e2:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000005ec <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     5ec:	41 54 2b 43 53 51 00                                AT+CSQ.

000005f3 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     5f3:	2b 43 53 51 3a 20 00                                +CSQ: .

000005fa <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     5fa:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000603 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     603:	2b 43 52 45 47 3a 20 00                             +CREG: .

0000060b <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     60b:	41 54 2b 43 42 43 00                                AT+CBC.

00000612 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     612:	2b 43 42 43 3a 20 00                                +CBC: .

00000619 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     619:	53 49 4d 38 30 30 48 00                             SIM800H.

00000621 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     621:	09 3c 2d 2d 2d 20 00                                .<--- .

00000628 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     628:	09 2d 2d 2d 3e 20 00                                .---> .

0000062f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     62f:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

0000063f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     63f:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

0000064f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     64f:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

0000065a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     65a:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000665 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     665:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000670 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     670:	09 3c 2d 2d 2d 20 00                                .<--- .

00000677 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     677:	09 2d 2d 2d 3e 20 00                                .---> .

0000067e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     67e:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

00000688 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     688:	41 54 45 30 00                                      ATE0.

0000068d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     68d:	41 54 45 30 00                                      ATE0.

00000692 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     692:	41 54 00                                            AT.

00000695 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     695:	41 54 00                                            AT.

00000698 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     698:	41 54 00                                            AT.

0000069b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     69b:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     6ab:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     6bb:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     6cb:	2e 00                                               ..

000006cd <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     6cd:	41 54 00                                            AT.

000006d0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     6d0:	41 54 00                                            AT.

000006d3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     6d3:	41 54 00                                            AT.

000006d6 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     6d6:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     6e6:	61 62 6c 65 00                                      able.

000006eb <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     6eb:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     6fb:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

0000070c <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     70c:	4f 4b 00                                            OK.

0000070f <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     70f:	46 4f 4e 41 00                                      FONA.

00000714 <_ZZN13Adafruit_FONAC4EaE3__c>:
     714:	46 4f 4e 41 6e 65 74 00                             FONAnet.

0000071c <__ctors_start>:
     71c:	72 0a       	sbc	r7, r18
     71e:	e0 11       	cpse	r30, r0
     720:	4b 16       	cp	r4, r27

00000722 <__ctors_end>:
     722:	7f 0a       	sbc	r7, r31

00000724 <__dtors_end>:
     724:	11 24       	eor	r1, r1
     726:	1f be       	out	0x3f, r1	; 63
     728:	cf ef       	ldi	r28, 0xFF	; 255
     72a:	d8 e0       	ldi	r29, 0x08	; 8
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	cd bf       	out	0x3d, r28	; 61

00000730 <__do_copy_data>:
     730:	13 e0       	ldi	r17, 0x03	; 3
     732:	a0 e0       	ldi	r26, 0x00	; 0
     734:	b1 e0       	ldi	r27, 0x01	; 1
     736:	ee ee       	ldi	r30, 0xEE	; 238
     738:	f7 e5       	ldi	r31, 0x57	; 87
     73a:	02 c0       	rjmp	.+4      	; 0x740 <__do_copy_data+0x10>
     73c:	05 90       	lpm	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	a2 34       	cpi	r26, 0x42	; 66
     742:	b1 07       	cpc	r27, r17
     744:	d9 f7       	brne	.-10     	; 0x73c <__do_copy_data+0xc>

00000746 <__do_clear_bss>:
     746:	28 e0       	ldi	r18, 0x08	; 8
     748:	a2 e4       	ldi	r26, 0x42	; 66
     74a:	b3 e0       	ldi	r27, 0x03	; 3
     74c:	01 c0       	rjmp	.+2      	; 0x750 <.do_clear_bss_start>

0000074e <.do_clear_bss_loop>:
     74e:	1d 92       	st	X+, r1

00000750 <.do_clear_bss_start>:
     750:	ad 34       	cpi	r26, 0x4D	; 77
     752:	b2 07       	cpc	r27, r18
     754:	e1 f7       	brne	.-8      	; 0x74e <.do_clear_bss_loop>

00000756 <__do_global_ctors>:
     756:	13 e0       	ldi	r17, 0x03	; 3
     758:	c1 e9       	ldi	r28, 0x91	; 145
     75a:	d3 e0       	ldi	r29, 0x03	; 3
     75c:	04 c0       	rjmp	.+8      	; 0x766 <__do_global_ctors+0x10>
     75e:	21 97       	sbiw	r28, 0x01	; 1
     760:	fe 01       	movw	r30, r28
     762:	0e 94 05 29 	call	0x520a	; 0x520a <__tablejump2__>
     766:	ce 38       	cpi	r28, 0x8E	; 142
     768:	d1 07       	cpc	r29, r17
     76a:	c9 f7       	brne	.-14     	; 0x75e <__do_global_ctors+0x8>
     76c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <main>
     770:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__do_global_dtors>

00000774 <__bad_interrupt>:
     774:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000778 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	00 d0       	rcall	.+0      	; 0x77e <_ZN10GpsManagerC1Eh+0x6>
     77e:	1f 92       	push	r1
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN13Adafruit_FONAC1Ea>
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	86 5e       	subi	r24, 0xE6	; 230
     79a:	9e 4f       	sbci	r25, 0xFE	; 254
     79c:	2b 81       	ldd	r18, Y+3	; 0x03
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
{
}
     7a2:	00 00       	nop
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <_ZN10GpsManagerD1Ev+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	00 00       	nop
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	7c 83       	std	Y+4, r23	; 0x04
     7dc:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	2b 81       	ldd	r18, Y+3	; 0x03
     7e4:	3c 81       	ldd	r19, Y+4	; 0x04
     7e6:	b9 01       	movw	r22, r18
     7e8:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN13Adafruit_FONAaSERKS_>
}
     7ec:	00 00       	nop
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	00 d0       	rcall	.+0      	; 0x802 <_ZN10GpsManager9toggleGpsEb+0x6>
     802:	00 d0       	rcall	.+0      	; 0x804 <_ZN10GpsManager9toggleGpsEb+0x8>
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	9c 83       	std	Y+4, r25	; 0x04
     80c:	8b 83       	std	Y+3, r24	; 0x03
     80e:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	86 5e       	subi	r24, 0xE6	; 230
     816:	9e 4f       	sbci	r25, 0xFE	; 254
     818:	fc 01       	movw	r30, r24
     81a:	80 81       	ld	r24, Z
     81c:	88 23       	and	r24, r24
     81e:	11 f0       	breq	.+4      	; 0x824 <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	04 c0       	rjmp	.+8      	; 0x82c <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     824:	8f e9       	ldi	r24, 0x9F	; 159
     826:	96 e8       	ldi	r25, 0x86	; 134
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	00 d0       	rcall	.+0      	; 0x842 <_ZN10GpsManager9gpsStatusEv+0x6>
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     84a:	00 00       	nop
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	00 d0       	rcall	.+0      	; 0x85c <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x6>
     85c:	00 d0       	rcall	.+0      	; 0x85e <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x8>
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	9a 83       	std	Y+2, r25	; 0x02
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	7c 83       	std	Y+4, r23	; 0x04
     868:	6b 83       	std	Y+3, r22	; 0x03

	if (_isMock)
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	86 5e       	subi	r24, 0xE6	; 230
     870:	9e 4f       	sbci	r25, 0xFE	; 254
     872:	fc 01       	movw	r30, r24
     874:	80 81       	ld	r24, Z
     876:	88 23       	and	r24, r24
     878:	09 f4       	brne	.+2      	; 0x87c <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x26>
     87a:	48 c0       	rjmp	.+144    	; 0x90c <__stack+0xd>
	{
		info.altitude = 10;
     87c:	2b 81       	ldd	r18, Y+3	; 0x03
     87e:	3c 81       	ldd	r19, Y+4	; 0x04
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a0 e2       	ldi	r26, 0x20	; 32
     886:	b1 e4       	ldi	r27, 0x41	; 65
     888:	f9 01       	movw	r30, r18
     88a:	82 8b       	std	Z+18, r24	; 0x12
     88c:	93 8b       	std	Z+19, r25	; 0x13
     88e:	a4 8b       	std	Z+20, r26	; 0x14
     890:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	9c 81       	ldd	r25, Y+4	; 0x04
     896:	46 96       	adiw	r24, 0x16	; 22
     898:	2f e0       	ldi	r18, 0x0F	; 15
     89a:	e2 e2       	ldi	r30, 0x22	; 34
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	dc 01       	movw	r26, r24
     8a0:	01 90       	ld	r0, Z+
     8a2:	0d 92       	st	X+, r0
     8a4:	2a 95       	dec	r18
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x4a>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	2e e1       	ldi	r18, 0x1E	; 30
     8ae:	fc 01       	movw	r30, r24
     8b0:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     8b2:	2b 81       	ldd	r18, Y+3	; 0x03
     8b4:	3c 81       	ldd	r19, Y+4	; 0x04
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	a0 e2       	ldi	r26, 0x20	; 32
     8bc:	b2 e4       	ldi	r27, 0x42	; 66
     8be:	f9 01       	movw	r30, r18
     8c0:	86 87       	std	Z+14, r24	; 0x0e
     8c2:	97 87       	std	Z+15, r25	; 0x0f
     8c4:	a0 8b       	std	Z+16, r26	; 0x10
     8c6:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     8c8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ca:	3c 81       	ldd	r19, Y+4	; 0x04
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	a8 e4       	ldi	r26, 0x48	; 72
     8d2:	b2 e4       	ldi	r27, 0x42	; 66
     8d4:	f9 01       	movw	r30, r18
     8d6:	82 83       	std	Z+2, r24	; 0x02
     8d8:	93 83       	std	Z+3, r25	; 0x03
     8da:	a4 83       	std	Z+4, r26	; 0x04
     8dc:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     8de:	2b 81       	ldd	r18, Y+3	; 0x03
     8e0:	3c 81       	ldd	r19, Y+4	; 0x04
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e7       	ldi	r26, 0x70	; 112
     8e8:	b2 e4       	ldi	r27, 0x42	; 66
     8ea:	f9 01       	movw	r30, r18
     8ec:	86 83       	std	Z+6, r24	; 0x06
     8ee:	97 83       	std	Z+7, r25	; 0x07
     8f0:	a0 87       	std	Z+8, r26	; 0x08
     8f2:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     8f4:	2b 81       	ldd	r18, Y+3	; 0x03
     8f6:	3c 81       	ldd	r19, Y+4	; 0x04
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	ac e8       	ldi	r26, 0x8C	; 140
     8fe:	b2 e4       	ldi	r27, 0x42	; 66
     900:	f9 01       	movw	r30, r18
     902:	82 87       	std	Z+10, r24	; 0x0a
     904:	93 87       	std	Z+11, r25	; 0x0b
     906:	a4 87       	std	Z+12, r26	; 0x0c
     908:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     90a:	00 00       	nop
	//// make sure we have a response
	//if (!success){
		//info.errorCode = ERR_GPS_BAD_FIELD;
		//return;
	//}
}
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	00 d0       	rcall	.+0      	; 0x920 <_ZN10GsmManagerC1Eh+0x6>
     920:	1f 92       	push	r1
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	9a 83       	std	Y+2, r25	; 0x02
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	2b 81       	ldd	r18, Y+3	; 0x03
     932:	fc 01       	movw	r30, r24
     934:	24 83       	std	Z+4, r18	; 0x04
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	05 96       	adiw	r24, 0x05	; 5
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN13Adafruit_FONAC1Ea>
{
}
     942:	00 00       	nop
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	00 d0       	rcall	.+0      	; 0x956 <_ZN10GsmManagerD1Ev+0x6>
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	00 00       	nop
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	00 d0       	rcall	.+0      	; 0x970 <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     970:	00 d0       	rcall	.+0      	; 0x972 <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	7c 83       	std	Y+4, r23	; 0x04
     97c:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	05 96       	adiw	r24, 0x05	; 5
     984:	2b 81       	ldd	r18, Y+3	; 0x03
     986:	3c 81       	ldd	r19, Y+4	; 0x04
     988:	b9 01       	movw	r22, r18
     98a:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN13Adafruit_FONAaSERKS_>
}
     98e:	00 00       	nop
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <_ZN10GsmManager5resetEv+0x6>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	fc 01       	movw	r30, r24
     9b2:	11 82       	std	Z+1, r1	; 0x01
     9b4:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	fc 01       	movw	r30, r24
     9bc:	13 82       	std	Z+3, r1	; 0x03
     9be:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     9c0:	00 00       	nop
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <_ZN10GsmManager5beginEv+0xa>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	9a 83       	std	Y+2, r25	; 0x02
     9dc:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	9a 81       	ldd	r25, Y+2	; 0x02
     9e2:	fc 01       	movw	r30, r24
     9e4:	94 81       	ldd	r25, Z+4	; 0x04
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	99 23       	and	r25, r25
     9ea:	09 f4       	brne	.+2      	; 0x9ee <_ZN10GsmManager5beginEv+0x22>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	88 23       	and	r24, r24
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	2d c0       	rjmp	.+90     	; 0xa50 <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     9f6:	8f e1       	ldi	r24, 0x1F	; 31
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_Znwj>
     9fe:	8c 01       	movw	r16, r24
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	63 e0       	ldi	r22, 0x03	; 3
     a06:	c8 01       	movw	r24, r16
     a08:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <_ZN14SoftwareSerialC1Ehhb>
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	81 5e       	subi	r24, 0xE1	; 225
     a12:	9e 4f       	sbci	r25, 0xFE	; 254
     a14:	fc 01       	movw	r30, r24
     a16:	11 83       	std	Z+1, r17	; 0x01
     a18:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	81 5e       	subi	r24, 0xE1	; 225
     a20:	9e 4f       	sbci	r25, 0xFE	; 254
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	91 81       	ldd	r25, Z+1	; 0x01
     a28:	40 ec       	ldi	r20, 0xC0	; 192
     a2a:	52 e1       	ldi	r21, 0x12	; 18
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	81 5e       	subi	r24, 0xE1	; 225
     a3a:	9e 4f       	sbci	r25, 0xFE	; 254
     a3c:	fc 01       	movw	r30, r24
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	9c 01       	movw	r18, r24
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	05 96       	adiw	r24, 0x05	; 5
     a4a:	b9 01       	movw	r22, r18
     a4c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <_ZN13Adafruit_FONA5beginER6Stream>
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	08 95       	ret

00000a5e <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	00 d0       	rcall	.+0      	; 0xa64 <_ZN10GsmManager14getBattPercentEPj+0x6>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <_ZN10GsmManager14getBattPercentEPj+0x8>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	7c 83       	std	Y+4, r23	; 0x04
     a70:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
     a76:	fc 01       	movw	r30, r24
     a78:	94 81       	ldd	r25, Z+4	; 0x04
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	99 23       	and	r25, r25
     a7e:	09 f4       	brne	.+2      	; 0xa82 <_ZN10GsmManager14getBattPercentEPj+0x24>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	88 23       	and	r24, r24
     a84:	49 f0       	breq	.+18     	; 0xa98 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	23 e6       	ldi	r18, 0x63	; 99
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	fc 01       	movw	r30, r24
     a90:	31 83       	std	Z+1, r19	; 0x01
     a92:	20 83       	st	Z, r18
		return true;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	08 c0       	rjmp	.+16     	; 0xaa8 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	05 96       	adiw	r24, 0x05	; 5
     a9e:	2b 81       	ldd	r18, Y+3	; 0x03
     aa0:	3c 81       	ldd	r19, Y+4	; 0x04
     aa2:	b9 01       	movw	r22, r18
     aa4:	0e 94 9c 24 	call	0x4938	; 0x4938 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	69 97       	sbiw	r28, 0x19	; 25
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	9f 8b       	std	Y+23, r25	; 0x17
     acc:	8e 8b       	std	Y+22, r24	; 0x16
     ace:	79 8f       	std	Y+25, r23	; 0x19
     ad0:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     ad2:	8e 89       	ldd	r24, Y+22	; 0x16
     ad4:	9f 89       	ldd	r25, Y+23	; 0x17
     ad6:	fc 01       	movw	r30, r24
     ad8:	94 81       	ldd	r25, Z+4	; 0x04
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	99 23       	and	r25, r25
     ade:	09 f4       	brne	.+2      	; 0xae2 <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	88 23       	and	r24, r24
     ae4:	11 f0       	breq	.+4      	; 0xaea <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	26 c0       	rjmp	.+76     	; 0xb36 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     aea:	2e e0       	ldi	r18, 0x0E	; 14
     aec:	e2 e4       	ldi	r30, 0x42	; 66
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	dc 01       	movw	r26, r24
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	2a 95       	dec	r18
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     afe:	27 e0       	ldi	r18, 0x07	; 7
     b00:	ce 01       	movw	r24, r28
     b02:	0f 96       	adiw	r24, 0x0f	; 15
     b04:	fc 01       	movw	r30, r24
     b06:	32 2f       	mov	r19, r18
     b08:	11 92       	st	Z+, r1
     b0a:	3a 95       	dec	r19
     b0c:	e9 f7       	brne	.-6      	; 0xb08 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     b0e:	8e 89       	ldd	r24, Y+22	; 0x16
     b10:	9f 89       	ldd	r25, Y+23	; 0x17
     b12:	05 96       	adiw	r24, 0x05	; 5
     b14:	28 8d       	ldd	r18, Y+24	; 0x18
     b16:	39 8d       	ldd	r19, Y+25	; 0x19
     b18:	a9 01       	movw	r20, r18
     b1a:	9e 01       	movw	r18, r28
     b1c:	2f 5f       	subi	r18, 0xFF	; 255
     b1e:	3f 4f       	sbci	r19, 0xFF	; 255
     b20:	b9 01       	movw	r22, r18
     b22:	0e 94 78 20 	call	0x40f0	; 0x40f0 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     b26:	98 2f       	mov	r25, r24
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	89 27       	eor	r24, r25
     b2c:	88 23       	and	r24, r24
     b2e:	11 f0       	breq	.+4      	; 0xb34 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     b34:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     b36:	69 96       	adiw	r28, 0x19	; 25
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	7c 83       	std	Y+4, r23	; 0x04
     b5a:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus(); //?TODO: ERRORS?
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN10GsmManager16getNetworkStatusEv>
     b64:	28 2f       	mov	r18, r24
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	fc 01       	movw	r30, r24
     b6c:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN10GsmManager7getRSSIEv>
     b76:	28 2f       	mov	r18, r24
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	fc 01       	movw	r30, r24
     b7e:	21 83       	std	Z+1, r18	; 0x01
}
     b80:	00 00       	nop
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	00 d0       	rcall	.+0      	; 0xb96 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	fc 01       	movw	r30, r24
     ba4:	94 81       	ldd	r25, Z+4	; 0x04
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	99 23       	and	r25, r25
     baa:	09 f4       	brne	.+2      	; 0xbae <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	88 23       	and	r24, r24
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	05 96       	adiw	r24, 0x05	; 5
     bbc:	0e 94 ab 24 	call	0x4956	; 0x4956 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <_ZN10GsmManager7getRSSIEv+0x6>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	fc 01       	movw	r30, r24
     bde:	94 81       	ldd	r25, Z+4	; 0x04
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	99 23       	and	r25, r25
     be4:	09 f4       	brne	.+2      	; 0xbe8 <_ZN10GsmManager7getRSSIEv+0x1e>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	88 23       	and	r24, r24
     bea:	11 f0       	breq	.+4      	; 0xbf0 <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     bec:	85 e1       	ldi	r24, 0x15	; 21
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	05 96       	adiw	r24, 0x05	; 5
     bf6:	0e 94 ca 24 	call	0x4994	; 0x4994 <_ZN13Adafruit_FONA7getRSSIEv>
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	00 d0       	rcall	.+0      	; 0xc0a <_ZN10GsmManager10enableGPRSEb+0x6>
     c0a:	1f 92       	push	r1
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	05 96       	adiw	r24, 0x05	; 5
     c1c:	6b 81       	ldd	r22, Y+3	; 0x03
     c1e:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	2e 97       	sbiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	9c 87       	std	Y+12, r25	; 0x0c
     c50:	8b 87       	std	Y+11, r24	; 0x0b
     c52:	7e 87       	std	Y+14, r23	; 0x0e
     c54:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     c56:	8b 85       	ldd	r24, Y+11	; 0x0b
     c58:	9c 85       	ldd	r25, Y+12	; 0x0c
     c5a:	fc 01       	movw	r30, r24
     c5c:	94 81       	ldd	r25, Z+4	; 0x04
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	99 23       	and	r25, r25
     c62:	09 f4       	brne	.+2      	; 0xc66 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	88 23       	and	r24, r24
     c68:	19 f0       	breq	.+6      	; 0xc70 <_ZN10GsmManager11sendViaGprsEPKc+0x42>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	99 c0       	rjmp	.+306    	; 0xda2 <_ZN10GsmManager11sendViaGprsEPKc+0x174>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);

	uint16_t ret = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/do.php"; //TODO: check should not require https!
     c78:	87 e5       	ldi	r24, 0x57	; 87
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	9d 83       	std	Y+5, r25	; 0x05
     c7e:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     c80:	8d 85       	ldd	r24, Y+13	; 0x0d
     c82:	9e 85       	ldd	r25, Y+14	; 0x0e
     c84:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <strlen>
     c88:	8c 01       	movw	r16, r24
     c8a:	4a e5       	ldi	r20, 0x5A	; 90
     c8c:	52 e0       	ldi	r21, 0x02	; 2
     c8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c90:	9c 85       	ldd	r25, Y+12	; 0x0c
     c92:	05 96       	adiw	r24, 0x05	; 5
     c94:	de 01       	movw	r26, r28
     c96:	19 96       	adiw	r26, 0x09	; 9
     c98:	fe 01       	movw	r30, r28
     c9a:	37 96       	adiw	r30, 0x07	; 7
     c9c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c9e:	3e 85       	ldd	r19, Y+14	; 0x0e
     ca0:	6c 81       	ldd	r22, Y+4	; 0x04
     ca2:	7d 81       	ldd	r23, Y+5	; 0x05
     ca4:	6d 01       	movw	r12, r26
     ca6:	7f 01       	movw	r14, r30
     ca8:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     cac:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     cae:	9b 81       	ldd	r25, Y+3	; 0x03
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 27       	eor	r24, r25
     cb4:	88 23       	and	r24, r24
     cb6:	11 f1       	breq	.+68     	; 0xcfc <_ZN10GsmManager11sendViaGprsEPKc+0xce>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     cb8:	25 e6       	ldi	r18, 0x65	; 101
     cba:	32 e0       	ldi	r19, 0x02	; 2
     cbc:	46 e6       	ldi	r20, 0x66	; 102
     cbe:	52 e0       	ldi	r21, 0x02	; 2
     cc0:	67 e6       	ldi	r22, 0x67	; 103
     cc2:	72 e0       	ldi	r23, 0x02	; 2
     cc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc8:	05 96       	adiw	r24, 0x05	; 5
     cca:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     cce:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd2:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <strlen>
     cd6:	8c 01       	movw	r16, r24
     cd8:	42 e7       	ldi	r20, 0x72	; 114
     cda:	52 e0       	ldi	r21, 0x02	; 2
     cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cde:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce0:	05 96       	adiw	r24, 0x05	; 5
     ce2:	de 01       	movw	r26, r28
     ce4:	19 96       	adiw	r26, 0x09	; 9
     ce6:	fe 01       	movw	r30, r28
     ce8:	37 96       	adiw	r30, 0x07	; 7
     cea:	2d 85       	ldd	r18, Y+13	; 0x0d
     cec:	3e 85       	ldd	r19, Y+14	; 0x0e
     cee:	6c 81       	ldd	r22, Y+4	; 0x04
     cf0:	7d 81       	ldd	r23, Y+5	; 0x05
     cf2:	6d 01       	movw	r12, r26
     cf4:	7f 01       	movw	r14, r30
     cf6:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     cfa:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	89 27       	eor	r24, r25
     d02:	88 23       	and	r24, r24
     d04:	29 f0       	breq	.+10     	; 0xd10 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
	{
		ret = 999;
     d06:	87 ee       	ldi	r24, 0xE7	; 231
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	47 c0       	rjmp	.+142    	; 0xd9e <_ZN10GsmManager11sendViaGprsEPKc+0x170>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     d10:	89 85       	ldd	r24, Y+9	; 0x09
     d12:	9a 85       	ldd	r25, Y+10	; 0x0a
     d14:	18 16       	cp	r1, r24
     d16:	19 06       	cpc	r1, r25
     d18:	8c f5       	brge	.+98     	; 0xd7c <_ZN10GsmManager11sendViaGprsEPKc+0x14e>
			while (fona.available()) {
     d1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1e:	05 96       	adiw	r24, 0x05	; 5
     d20:	0e 94 18 1b 	call	0x3630	; 0x3630 <_ZN13Adafruit_FONA9availableEv>
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	89 2b       	or	r24, r25
     d28:	09 f4       	brne	.+2      	; 0xd2c <_ZN10GsmManager11sendViaGprsEPKc+0xfe>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	22 23       	and	r18, r18
     d2e:	81 f3       	breq	.-32     	; 0xd10 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
				char c = fona.read();
     d30:	8b 85       	ldd	r24, Y+11	; 0x0b
     d32:	9c 85       	ldd	r25, Y+12	; 0x0c
     d34:	05 96       	adiw	r24, 0x05	; 5
     d36:	0e 94 30 1b 	call	0x3660	; 0x3660 <_ZN13Adafruit_FONA4readEv>
     d3a:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     d3c:	80 ec       	ldi	r24, 0xC0	; 192
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	80 72       	andi	r24, 0x20	; 32
     d4a:	99 27       	eor	r25, r25
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	89 2b       	or	r24, r25
     d50:	09 f0       	breq	.+2      	; 0xd54 <_ZN10GsmManager11sendViaGprsEPKc+0x126>
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	22 23       	and	r18, r18
     d56:	09 f0       	breq	.+2      	; 0xd5a <_ZN10GsmManager11sendViaGprsEPKc+0x12c>
     d58:	f1 cf       	rjmp	.-30     	; 0xd3c <_ZN10GsmManager11sendViaGprsEPKc+0x10e>
				UDR0 = c;
     d5a:	86 ec       	ldi	r24, 0xC6	; 198
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	2e 81       	ldd	r18, Y+6	; 0x06
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
					                                                      
				length--;
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	9a 87       	std	Y+10, r25	; 0x0a
     d6c:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	89 2b       	or	r24, r25
     d74:	09 f0       	breq	.+2      	; 0xd78 <_ZN10GsmManager11sendViaGprsEPKc+0x14a>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     d76:	d1 cf       	rjmp	.-94     	; 0xd1a <_ZN10GsmManager11sendViaGprsEPKc+0xec>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     d78:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     d7a:	ca cf       	rjmp	.-108    	; 0xd10 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d80:	05 96       	adiw	r24, 0x05	; 5
     d82:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     d86:	8f 81       	ldd	r24, Y+7	; 0x07
     d88:	98 85       	ldd	r25, Y+8	; 0x08
     d8a:	88 3c       	cpi	r24, 0xC8	; 200
     d8c:	91 05       	cpc	r25, r1
     d8e:	19 f0       	breq	.+6      	; 0xd96 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
     d90:	8f 81       	ldd	r24, Y+7	; 0x07
     d92:	98 85       	ldd	r25, Y+8	; 0x08
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <_ZN10GsmManager11sendViaGprsEPKc+0x16c>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     da2:	2e 96       	adiw	r28, 0x0e	; 14
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	08 95       	ret

00000dc0 <setup>:
void initModule(uint8_t moduleId);
void on3MinutesElapsed(bool doWrite);
void printData();
void initSubsystems();

void setup() {
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	// Optionally configure HTTP gets to follow redirects over SSL.
	// Default is not to follow SSL redirects, however if you uncomment
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);

	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
     dc8:	68 eb       	ldi	r22, 0xB8	; 184
     dca:	7b e0       	ldi	r23, 0x0B	; 11
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
	
	Wire.begin();
     dd4:	83 e5       	ldi	r24, 0x53	; 83
     dd6:	97 e0       	ldi	r25, 0x07	; 7
     dd8:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN7TwoWire5beginEv>
	
	#ifdef DEBUG
		Serial.begin(9600); //Writes to Serial output
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	55 e2       	ldi	r21, 0x25	; 37
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	8f e5       	ldi	r24, 0x5F	; 95
     de6:	97 e0       	ldi	r25, 0x07	; 7
     de8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <_ZN14HardwareSerial5beginEm>
		Serial.println(F("Starting..."));
     dec:	8d e7       	ldi	r24, 0x7D	; 125
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	bc 01       	movw	r22, r24
     df2:	8f e5       	ldi	r24, 0x5F	; 95
     df4:	97 e0       	ldi	r25, 0x07	; 7
     df6:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	#endif

	gps.setFona(fona);
     dfa:	63 e4       	ldi	r22, 0x43	; 67
     dfc:	73 e0       	ldi	r23, 0x03	; 3
     dfe:	8d e5       	ldi	r24, 0x5D	; 93
     e00:	94 e0       	ldi	r25, 0x04	; 4
     e02:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
     e06:	63 e4       	ldi	r22, 0x43	; 67
     e08:	73 e0       	ldi	r23, 0x03	; 3
     e0a:	88 e7       	ldi	r24, 0x78	; 120
     e0c:	95 e0       	ldi	r25, 0x05	; 5
     e0e:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (INITIALISE_MODULE) {
     e12:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     e16:	88 23       	and	r24, r24
     e18:	21 f0       	breq	.+8      	; 0xe22 <setup+0x62>
		initModule(INIT_MODULE_ID);
     e1a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <INIT_MODULE_ID>
     e1e:	0e 94 1f 08 	call	0x103e	; 0x103e <_Z10initModuleh>
	}

	initSubsystems();
     e22:	0e 94 17 07 	call	0xe2e	; 0xe2e <_Z14initSubsystemsv>
}
     e26:	00 00       	nop
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <_Z14initSubsystemsv>:

void initSubsystems(){
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	if (!gsm.begin()) {
     e36:	88 e7       	ldi	r24, 0x78	; 120
     e38:	95 e0       	ldi	r25, 0x05	; 5
     e3a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN10GsmManager5beginEv>
     e3e:	98 2f       	mov	r25, r24
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 27       	eor	r24, r25
     e44:	88 23       	and	r24, r24
     e46:	31 f4       	brne	.+12     	; 0xe54 <_Z14initSubsystemsv+0x26>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)){
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	8d e5       	ldi	r24, 0x5D	; 93
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN10GpsManager9toggleGpsEb>
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <_Z14initSubsystemsv+0x28>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
     e54:	00 00       	nop
	if (!gps.toggleGps(true)){
	
		//TODO: store in ROM
		return;
	}
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <_Z17getReadingAddressh>:

uint16_t getReadingAddress(uint8_t readingNum){
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	00 d0       	rcall	.+0      	; 0xe62 <_Z17getReadingAddressh+0x6>
     e62:	1f 92       	push	r1
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	8b 83       	std	Y+3, r24	; 0x03
	
	uint16_t writeAddress =
		MEM_START +
     e6a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <MEM_START>
     e6e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <MEM_START+0x1>
     e72:	9c 01       	movw	r18, r24
     e74:	2e 5f       	subi	r18, 0xFE	; 254
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
		sizeof(ModuleMeta) + //Skip metadata area
		readingNum*sizeof(SingleSession);
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	48 2f       	mov	r20, r24
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	68 e2       	ldi	r22, 0x28	; 40
     e80:	64 9f       	mul	r22, r20
     e82:	c0 01       	movw	r24, r0
     e84:	65 9f       	mul	r22, r21
     e86:	90 0d       	add	r25, r0
     e88:	11 24       	eor	r1, r1
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
		
	return writeAddress;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <_Z7readMemiPhh>:

void readMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	29 97       	sbiw	r28, 0x09	; 9
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	78 87       	std	Y+8, r23	; 0x08
     ebc:	6f 83       	std	Y+7, r22	; 0x07
     ebe:	49 87       	std	Y+9, r20	; 0x09
	//Serial.print(F(" to address "));
	////Serial.print((uint8_t)data);//TODO
	//Serial.print(F(" of size "));
	//Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
     ec0:	19 82       	std	Y+1, r1	; 0x01
     ec2:	99 85       	ldd	r25, Y+9	; 0x09
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	29 81       	ldd	r18, Y+1	; 0x01
     ec8:	29 17       	cp	r18, r25
     eca:	08 f0       	brcs	.+2      	; 0xece <_Z7readMemiPhh+0x2c>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	88 23       	and	r24, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <_Z7readMemiPhh+0x32>
     ed2:	4c c0       	rjmp	.+152    	; 0xf6c <_Z7readMemiPhh+0xca>
		
		uint16_t thisByteAddr = address+i;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	9c 83       	std	Y+4, r25	; 0x04
     ee4:	8b 83       	std	Y+3, r24	; 0x03
		//Serial.print((int) (thisByteAddr>>8) );
		//Serial.print(F(" and LSB "));
		//Serial.print((int) (thisByteAddr&0xFF) );
		//Serial.print(F(" : "));
		//
		Wire.beginTransmission(0x50);
     ee6:	60 e5       	ldi	r22, 0x50	; 80
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	83 e5       	ldi	r24, 0x53	; 83
     eec:	97 e0       	ldi	r25, 0x07	; 7
     eee:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int)thisByteAddr>>8); // msb
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	89 2f       	mov	r24, r25
     ef8:	99 0f       	add	r25, r25
     efa:	99 0b       	sbc	r25, r25
     efc:	bc 01       	movw	r22, r24
     efe:	83 e5       	ldi	r24, 0x53	; 83
     f00:	97 e0       	ldi	r25, 0x07	; 7
     f02:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN7TwoWire5writeEi>
		Wire.write((int)thisByteAddr&0xFF); // lsb
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	99 27       	eor	r25, r25
     f0c:	bc 01       	movw	r22, r24
     f0e:	83 e5       	ldi	r24, 0x53	; 83
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
     f16:	83 e5       	ldi	r24, 0x53	; 83
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN7TwoWire15endTransmissionEv>
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	60 e5       	ldi	r22, 0x50	; 80
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	83 e5       	ldi	r24, 0x53	; 83
     f28:	97 e0       	ldi	r25, 0x07	; 7
     f2a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
     f32:	83 e5       	ldi	r24, 0x53	; 83
     f34:	97 e0       	ldi	r25, 0x07	; 7
     f36:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN7TwoWire9availableEv>
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	89 2b       	or	r24, r25
     f3e:	09 f4       	brne	.+2      	; 0xf42 <_Z7readMemiPhh+0xa0>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	22 23       	and	r18, r18
     f44:	29 f0       	breq	.+10     	; 0xf50 <_Z7readMemiPhh+0xae>
			readByte = Wire.read();
     f46:	83 e5       	ldi	r24, 0x53	; 83
     f48:	97 e0       	ldi	r25, 0x07	; 7
     f4a:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN7TwoWire4readEv>
     f4e:	8a 83       	std	Y+2, r24	; 0x02
		
		//Serial.print(F("Raw byte read:"));
		//Serial.println(readByte);
		
		*(data+i) = readByte;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	2f 81       	ldd	r18, Y+7	; 0x07
     f58:	38 85       	ldd	r19, Y+8	; 0x08
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	2a 81       	ldd	r18, Y+2	; 0x02
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18
	//Serial.print(F(" to address "));
	////Serial.print((uint8_t)data);//TODO
	//Serial.print(F(" of size "));
	//Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	ab cf       	rjmp	.-170    	; 0xec2 <_Z7readMemiPhh+0x20>
		//Serial.print(F("Raw byte read:"));
		//Serial.println(readByte);
		
		*(data+i) = readByte;
	}
}
     f6c:	00 00       	nop
     f6e:	29 96       	adiw	r28, 0x09	; 9
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <_Z8writeMemiPhh>:

void writeMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	28 97       	sbiw	r28, 0x08	; 8
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	9d 83       	std	Y+5, r25	; 0x05
     f96:	8c 83       	std	Y+4, r24	; 0x04
     f98:	7f 83       	std	Y+7, r23	; 0x07
     f9a:	6e 83       	std	Y+6, r22	; 0x06
     f9c:	48 87       	std	Y+8, r20	; 0x08
	//Serial.print(F(" from address "));
	////Serial.print((uint8_t)data); //TODO
	//Serial.print(F(" of size "));
	//Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	98 85       	ldd	r25, Y+8	; 0x08
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	29 81       	ldd	r18, Y+1	; 0x01
     fa6:	29 17       	cp	r18, r25
     fa8:	08 f0       	brcs	.+2      	; 0xfac <_Z8writeMemiPhh+0x2c>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	88 23       	and	r24, r24
     fae:	e9 f1       	breq	.+122    	; 0x102a <_Z8writeMemiPhh+0xaa>

		uint16_t thisByteAddr = address+i;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	9b 83       	std	Y+3, r25	; 0x03
     fc0:	8a 83       	std	Y+2, r24	; 0x02
		//Serial.print(F(" and LSB "));
		//Serial.print((int) (thisByteAddr&0xFF) );
		//Serial.print(F(" : "));
		//Serial.println(*(data+i));
		
		Wire.beginTransmission(0x50);
     fc2:	60 e5       	ldi	r22, 0x50	; 80
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	83 e5       	ldi	r24, 0x53	; 83
     fc8:	97 e0       	ldi	r25, 0x07	; 7
     fca:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int)thisByteAddr>>8); // msb
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	89 2f       	mov	r24, r25
     fd4:	99 0f       	add	r25, r25
     fd6:	99 0b       	sbc	r25, r25
     fd8:	bc 01       	movw	r22, r24
     fda:	83 e5       	ldi	r24, 0x53	; 83
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN7TwoWire5writeEi>
		Wire.write((int)thisByteAddr&0xFF); // lsb
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	99 27       	eor	r25, r25
     fe8:	bc 01       	movw	r22, r24
     fea:	83 e5       	ldi	r24, 0x53	; 83
     fec:	97 e0       	ldi	r25, 0x07	; 7
     fee:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	2e 81       	ldd	r18, Y+6	; 0x06
     ffa:	3f 81       	ldd	r19, Y+7	; 0x07
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	fc 01       	movw	r30, r24
    1002:	80 81       	ld	r24, Z
    1004:	68 2f       	mov	r22, r24
    1006:	83 e5       	ldi	r24, 0x53	; 83
    1008:	97 e0       	ldi	r25, 0x07	; 7
    100a:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    100e:	83 e5       	ldi	r24, 0x53	; 83
    1010:	97 e0       	ldi	r25, 0x07	; 7
    1012:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN7TwoWire15endTransmissionEv>
	
		delay(20); //Spec says 5 but that causes intermittent random reads at higher temperatures
    1016:	64 e1       	ldi	r22, 0x14	; 20
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
	//Serial.print(F(" from address "));
	////Serial.print((uint8_t)data); //TODO
	//Serial.print(F(" of size "));
	//Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	bb cf       	rjmp	.-138    	; 0xfa0 <_Z8writeMemiPhh+0x20>
		Wire.write(*(data+i)); //go byte by byte
		Wire.endTransmission();
	
		delay(20); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    102a:	00 00       	nop
    102c:	28 96       	adiw	r28, 0x08	; 8
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_Z10initModuleh>:

void initModule(uint8_t moduleId){
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	00 d0       	rcall	.+0      	; 0x1044 <_Z10initModuleh+0x6>
    1044:	1f 92       	push	r1
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	8b 83       	std	Y+3, r24	; 0x03
	
	//Get last reading
	ModuleMeta meta;
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 25 13 	call	0x264a	; 0x264a <_ZN10ModuleMetaC1Ev>
	meta.moduleId = moduleId;
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	89 83       	std	Y+1, r24	; 0x01
	meta.numReadings = 0;
    1058:	1a 82       	std	Y+2, r1	; 0x02
	writeMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    105a:	42 e0       	ldi	r20, 0x02	; 2
    105c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <MEM_START>
    1060:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <MEM_START+0x1>
    1064:	9c 01       	movw	r18, r24
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	bc 01       	movw	r22, r24
    106c:	c9 01       	movw	r24, r18
    106e:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z8writeMemiPhh>

	#ifdef DEBUG
		Serial.print("Module initialised with id ");
    1072:	6a e8       	ldi	r22, 0x8A	; 138
    1074:	71 e0       	ldi	r23, 0x01	; 1
    1076:	8f e5       	ldi	r24, 0x5F	; 95
    1078:	97 e0       	ldi	r25, 0x07	; 7
    107a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
		Serial.println(moduleId);
    107e:	4a e0       	ldi	r20, 0x0A	; 10
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	6b 81       	ldd	r22, Y+3	; 0x03
    1084:	8f e5       	ldi	r24, 0x5F	; 95
    1086:	97 e0       	ldi	r25, 0x07	; 7
    1088:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN5Print7printlnEhi>
	#endif
}
    108c:	00 00       	nop
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <_Z9printDatav>:

void printData(){
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	ad 97       	sbiw	r28, 0x2d	; 45
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61

	//Get last reading
	ModuleMeta meta;
    10ae:	ce 01       	movw	r24, r28
    10b0:	04 96       	adiw	r24, 0x04	; 4
    10b2:	0e 94 25 13 	call	0x264a	; 0x264a <_ZN10ModuleMetaC1Ev>
	readMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    10b6:	42 e0       	ldi	r20, 0x02	; 2
    10b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <MEM_START>
    10bc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <MEM_START+0x1>
    10c0:	9c 01       	movw	r18, r24
    10c2:	ce 01       	movw	r24, r28
    10c4:	04 96       	adiw	r24, 0x04	; 4
    10c6:	bc 01       	movw	r22, r24
    10c8:	c9 01       	movw	r24, r18
    10ca:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z7readMemiPhh>

	Serial.print(F("Module #"));
    10ce:	89 e8       	ldi	r24, 0x89	; 137
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	bc 01       	movw	r22, r24
    10d4:	8f e5       	ldi	r24, 0x5F	; 95
    10d6:	97 e0       	ldi	r25, 0x07	; 7
    10d8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(meta.moduleId);
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	4a e0       	ldi	r20, 0x0A	; 10
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	68 2f       	mov	r22, r24
    10e4:	8f e5       	ldi	r24, 0x5F	; 95
    10e6:	97 e0       	ldi	r25, 0x07	; 7
    10e8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
	Serial.print(F(", Total #Readings: "));
    10ec:	82 e9       	ldi	r24, 0x92	; 146
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	bc 01       	movw	r22, r24
    10f2:	8f e5       	ldi	r24, 0x5F	; 95
    10f4:	97 e0       	ldi	r25, 0x07	; 7
    10f6:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(meta.numReadings);
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	4a e0       	ldi	r20, 0x0A	; 10
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	68 2f       	mov	r22, r24
    1102:	8f e5       	ldi	r24, 0x5F	; 95
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN5Print7printlnEhi>
		
	for(uint8_t i=0;i<meta.numReadings;i++){
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	89 17       	cp	r24, r25
    1112:	08 f0       	brcs	.+2      	; 0x1116 <_Z9printDatav+0x7c>
    1114:	c9 c0       	rjmp	.+402    	; 0x12a8 <_Z9printDatav+0x20e>
		
		Serial.print(F("Reading #"));
    1116:	86 ea       	ldi	r24, 0xA6	; 166
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	bc 01       	movw	r22, r24
    111c:	8f e5       	ldi	r24, 0x5F	; 95
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(i);
    1124:	4a e0       	ldi	r20, 0x0A	; 10
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	69 81       	ldd	r22, Y+1	; 0x01
    112a:	8f e5       	ldi	r24, 0x5F	; 95
    112c:	97 e0       	ldi	r25, 0x07	; 7
    112e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN5Print7printlnEhi>
		
		uint16_t readingAddr = getReadingAddress(i);
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z17getReadingAddressh>
    1138:	9b 83       	std	Y+3, r25	; 0x03
    113a:	8a 83       	std	Y+2, r24	; 0x02
		SingleSession session;
		readMem(readingAddr, (uint8_t*)&session, sizeof(SingleSession));
    113c:	48 e2       	ldi	r20, 0x28	; 40
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03
    1142:	9e 01       	movw	r18, r28
    1144:	2a 5f       	subi	r18, 0xFA	; 250
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	b9 01       	movw	r22, r18
    114a:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z7readMemiPhh>
		
		Serial.print(F("Gsm-Status: "));
    114e:	80 eb       	ldi	r24, 0xB0	; 176
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	bc 01       	movw	r22, r24
    1154:	8f e5       	ldi	r24, 0x5F	; 95
    1156:	97 e0       	ldi	r25, 0x07	; 7
    1158:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gsmInfo.networkStatus);
    115c:	88 85       	ldd	r24, Y+8	; 0x08
    115e:	4a e0       	ldi	r20, 0x0A	; 10
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	68 2f       	mov	r22, r24
    1164:	8f e5       	ldi	r24, 0x5F	; 95
    1166:	97 e0       	ldi	r25, 0x07	; 7
    1168:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
		Serial.print(F(", Gsm-RSSI: "));
    116c:	8d eb       	ldi	r24, 0xBD	; 189
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	bc 01       	movw	r22, r24
    1172:	8f e5       	ldi	r24, 0x5F	; 95
    1174:	97 e0       	ldi	r25, 0x07	; 7
    1176:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gsmInfo.rssi);
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	4a e0       	ldi	r20, 0x0A	; 10
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	68 2f       	mov	r22, r24
    1182:	8f e5       	ldi	r24, 0x5F	; 95
    1184:	97 e0       	ldi	r25, 0x07	; 7
    1186:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
		Serial.print(F(", Gsm-Error Code: "));
    118a:	8a ec       	ldi	r24, 0xCA	; 202
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	bc 01       	movw	r22, r24
    1190:	8f e5       	ldi	r24, 0x5F	; 95
    1192:	97 e0       	ldi	r25, 0x07	; 7
    1194:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gsmInfo.errorCode);
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	4a e0       	ldi	r20, 0x0A	; 10
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	68 2f       	mov	r22, r24
    11a0:	8f e5       	ldi	r24, 0x5F	; 95
    11a2:	97 e0       	ldi	r25, 0x07	; 7
    11a4:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
		
		Serial.print(F(", Gps-Status: "));
    11a8:	8d ed       	ldi	r24, 0xDD	; 221
    11aa:	92 e0       	ldi	r25, 0x02	; 2
    11ac:	bc 01       	movw	r22, r24
    11ae:	8f e5       	ldi	r24, 0x5F	; 95
    11b0:	97 e0       	ldi	r25, 0x07	; 7
    11b2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.gpsStatus);
    11b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b8:	08 2e       	mov	r0, r24
    11ba:	00 0c       	add	r0, r0
    11bc:	99 0b       	sbc	r25, r25
    11be:	4a e0       	ldi	r20, 0x0A	; 10
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	bc 01       	movw	r22, r24
    11c4:	8f e5       	ldi	r24, 0x5F	; 95
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEii>
		Serial.print(F(", Gps-Error Code: "));
    11cc:	8c ee       	ldi	r24, 0xEC	; 236
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	bc 01       	movw	r22, r24
    11d2:	8f e5       	ldi	r24, 0x5F	; 95
    11d4:	97 e0       	ldi	r25, 0x07	; 7
    11d6:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.errorCode);
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	4a e0       	ldi	r20, 0x0A	; 10
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	68 2f       	mov	r22, r24
    11e2:	8f e5       	ldi	r24, 0x5F	; 95
    11e4:	97 e0       	ldi	r25, 0x07	; 7
    11e6:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
		Serial.print(F(", Gps-Lat: "));
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	bc 01       	movw	r22, r24
    11f0:	8f e5       	ldi	r24, 0x5F	; 95
    11f2:	97 e0       	ldi	r25, 0x07	; 7
    11f4:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.lat);
    11f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    11fe:	be 85       	ldd	r27, Y+14	; 0x0e
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	ac 01       	movw	r20, r24
    1206:	bd 01       	movw	r22, r26
    1208:	8f e5       	ldi	r24, 0x5F	; 95
    120a:	97 e0       	ldi	r25, 0x07	; 7
    120c:	0e 94 07 19 	call	0x320e	; 0x320e <_ZN5Print5printEdi>
		Serial.print(F(", Gps-Lon: "));
    1210:	8b e0       	ldi	r24, 0x0B	; 11
    1212:	93 e0       	ldi	r25, 0x03	; 3
    1214:	bc 01       	movw	r22, r24
    1216:	8f e5       	ldi	r24, 0x5F	; 95
    1218:	97 e0       	ldi	r25, 0x07	; 7
    121a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.lon);
    121e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1220:	98 89       	ldd	r25, Y+16	; 0x10
    1222:	a9 89       	ldd	r26, Y+17	; 0x11
    1224:	ba 89       	ldd	r27, Y+18	; 0x12
    1226:	22 e0       	ldi	r18, 0x02	; 2
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	ac 01       	movw	r20, r24
    122c:	bd 01       	movw	r22, r26
    122e:	8f e5       	ldi	r24, 0x5F	; 95
    1230:	97 e0       	ldi	r25, 0x07	; 7
    1232:	0e 94 07 19 	call	0x320e	; 0x320e <_ZN5Print5printEdi>
		Serial.print(F(", Gps-Date: "));
    1236:	87 e1       	ldi	r24, 0x17	; 23
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	bc 01       	movw	r22, r24
    123c:	8f e5       	ldi	r24, 0x5F	; 95
    123e:	97 e0       	ldi	r25, 0x07	; 7
    1240:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.date);
    1244:	ce 01       	movw	r24, r28
    1246:	06 96       	adiw	r24, 0x06	; 6
    1248:	49 96       	adiw	r24, 0x19	; 25
    124a:	bc 01       	movw	r22, r24
    124c:	8f e5       	ldi	r24, 0x5F	; 95
    124e:	97 e0       	ldi	r25, 0x07	; 7
    1250:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
		Serial.print(F(", Gps-Heading: "));
    1254:	84 e2       	ldi	r24, 0x24	; 36
    1256:	93 e0       	ldi	r25, 0x03	; 3
    1258:	bc 01       	movw	r22, r24
    125a:	8f e5       	ldi	r24, 0x5F	; 95
    125c:	97 e0       	ldi	r25, 0x07	; 7
    125e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(session.gpsInfo.heading);
    1262:	8f 89       	ldd	r24, Y+23	; 0x17
    1264:	98 8d       	ldd	r25, Y+24	; 0x18
    1266:	a9 8d       	ldd	r26, Y+25	; 0x19
    1268:	ba 8d       	ldd	r27, Y+26	; 0x1a
    126a:	22 e0       	ldi	r18, 0x02	; 2
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	ac 01       	movw	r20, r24
    1270:	bd 01       	movw	r22, r26
    1272:	8f e5       	ldi	r24, 0x5F	; 95
    1274:	97 e0       	ldi	r25, 0x07	; 7
    1276:	0e 94 07 19 	call	0x320e	; 0x320e <_ZN5Print5printEdi>
		Serial.print(F(", Gps-Speed: "));
    127a:	84 e3       	ldi	r24, 0x34	; 52
    127c:	93 e0       	ldi	r25, 0x03	; 3
    127e:	bc 01       	movw	r22, r24
    1280:	8f e5       	ldi	r24, 0x5F	; 95
    1282:	97 e0       	ldi	r25, 0x07	; 7
    1284:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.speed_kph);
    1288:	8b 89       	ldd	r24, Y+19	; 0x13
    128a:	9c 89       	ldd	r25, Y+20	; 0x14
    128c:	ad 89       	ldd	r26, Y+21	; 0x15
    128e:	be 89       	ldd	r27, Y+22	; 0x16
    1290:	22 e0       	ldi	r18, 0x02	; 2
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	ac 01       	movw	r20, r24
    1296:	bd 01       	movw	r22, r26
    1298:	8f e5       	ldi	r24, 0x5F	; 95
    129a:	97 e0       	ldi	r25, 0x07	; 7
    129c:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN5Print7printlnEdi>
	Serial.print(F("Module #"));
	Serial.print(meta.moduleId);
	Serial.print(F(", Total #Readings: "));
	Serial.println(meta.numReadings);
		
	for(uint8_t i=0;i<meta.numReadings;i++){
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	32 cf       	rjmp	.-412    	; 0x110c <_Z9printDatav+0x72>
		Serial.print(F(", Gps-Heading: "));
		Serial.print(session.gpsInfo.heading);
		Serial.print(F(", Gps-Speed: "));
		Serial.println(session.gpsInfo.speed_kph);
	}
}
    12a8:	00 00       	nop
    12aa:	ad 96       	adiw	r28, 0x2d	; 45
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite){
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	e5 97       	sbiw	r28, 0x35	; 53
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8d ab       	std	Y+53, r24	; 0x35

	#ifdef DEBUG
		Serial.println(F("3 minutes elapsed - logging..."));
    12d2:	82 e4       	ldi	r24, 0x42	; 66
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	bc 01       	movw	r22, r24
    12d8:	8f e5       	ldi	r24, 0x5F	; 95
    12da:	97 e0       	ldi	r25, 0x07	; 7
    12dc:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	#endif	
	
	byte META_SZ = sizeof(ModuleMeta);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	89 83       	std	Y+1, r24	; 0x01
	byte SESSION_SZ = sizeof(SingleSession);
    12e4:	88 e2       	ldi	r24, 0x28	; 40
    12e6:	8a 83       	std	Y+2, r24	; 0x02
	
	//Get last reading
	ModuleMeta meta;
    12e8:	ce 01       	movw	r24, r28
    12ea:	05 96       	adiw	r24, 0x05	; 5
    12ec:	0e 94 25 13 	call	0x264a	; 0x264a <_ZN10ModuleMetaC1Ev>
	readMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    12f0:	42 e0       	ldi	r20, 0x02	; 2
    12f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <MEM_START>
    12f6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <MEM_START+0x1>
    12fa:	9c 01       	movw	r18, r24
    12fc:	ce 01       	movw	r24, r28
    12fe:	05 96       	adiw	r24, 0x05	; 5
    1300:	bc 01       	movw	r22, r24
    1302:	c9 01       	movw	r24, r18
    1304:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z7readMemiPhh>
	
	#ifdef DEBUG
		Serial.print(F("Module #"));
    1308:	81 e6       	ldi	r24, 0x61	; 97
    130a:	93 e0       	ldi	r25, 0x03	; 3
    130c:	bc 01       	movw	r22, r24
    130e:	8f e5       	ldi	r24, 0x5F	; 95
    1310:	97 e0       	ldi	r25, 0x07	; 7
    1312:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(meta.moduleId);
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	4a e0       	ldi	r20, 0x0A	; 10
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	68 2f       	mov	r22, r24
    131e:	8f e5       	ldi	r24, 0x5F	; 95
    1320:	97 e0       	ldi	r25, 0x07	; 7
    1322:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
		Serial.print(F(", Current #Readings: "));
    1326:	8a e6       	ldi	r24, 0x6A	; 106
    1328:	93 e0       	ldi	r25, 0x03	; 3
    132a:	bc 01       	movw	r22, r24
    132c:	8f e5       	ldi	r24, 0x5F	; 95
    132e:	97 e0       	ldi	r25, 0x07	; 7
    1330:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(meta.numReadings);
    1334:	8e 81       	ldd	r24, Y+6	; 0x06
    1336:	4a e0       	ldi	r20, 0x0A	; 10
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	68 2f       	mov	r22, r24
    133c:	8f e5       	ldi	r24, 0x5F	; 95
    133e:	97 e0       	ldi	r25, 0x07	; 7
    1340:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN5Print7printlnEhi>
	#endif

	if (!doWrite)
    1344:	9d a9       	ldd	r25, Y+53	; 0x35
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 27       	eor	r24, r25
    134a:	88 23       	and	r24, r24
    134c:	b9 f5       	brne	.+110    	; 0x13bc <_Z17on3MinutesElapsedb+0x100>
		return;

	//Update the number of readings in metadata first so no matter what happens, existing data isnt overwritten
	meta.numReadings++;
    134e:	8e 81       	ldd	r24, Y+6	; 0x06
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	8e 83       	std	Y+6, r24	; 0x06
	writeMem(MEM_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    1354:	42 e0       	ldi	r20, 0x02	; 2
    1356:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <MEM_START>
    135a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <MEM_START+0x1>
    135e:	9c 01       	movw	r18, r24
    1360:	ce 01       	movw	r24, r28
    1362:	05 96       	adiw	r24, 0x05	; 5
    1364:	bc 01       	movw	r22, r24
    1366:	c9 01       	movw	r24, r18
    1368:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z8writeMemiPhh>
	
	SingleSession session;
	gps.getGpsInfo(session.gpsInfo);
    136c:	ce 01       	movw	r24, r28
    136e:	07 96       	adiw	r24, 0x07	; 7
    1370:	03 96       	adiw	r24, 0x03	; 3
    1372:	bc 01       	movw	r22, r24
    1374:	8d e5       	ldi	r24, 0x5D	; 93
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN10GpsManager10getGpsInfoER7GpsInfo>
	gsm.getGsmInfo(session.gsmInfo);
    137c:	ce 01       	movw	r24, r28
    137e:	07 96       	adiw	r24, 0x07	; 7
    1380:	bc 01       	movw	r22, r24
    1382:	88 e7       	ldi	r24, 0x78	; 120
    1384:	95 e0       	ldi	r25, 0x05	; 5
    1386:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN10GsmManager10getGsmInfoER7GsmInfo>
	//Serial.print(F(" errCode="));
	//Serial.println(session.gpsInfo.errorCode);
	

	
	uint16_t writeAddress = getReadingAddress(meta.numReadings);
    138a:	8e 81       	ldd	r24, Y+6	; 0x06
    138c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z17getReadingAddressh>
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
//	Serial.print(F("Calculated next address for data to be written to: "));
//	Serial.println(writeAddress);
	
	//Run 2 tests
	//gsm.setGPRSNetworkSettings
	String sm = "";//"Module ID:"+ModuleMeta.moduleId+" transmitting.";
    1394:	ce 01       	movw	r24, r28
    1396:	8f 96       	adiw	r24, 0x2f	; 47
    1398:	66 ea       	ldi	r22, 0xA6	; 166
    139a:	71 e0       	ldi	r23, 0x01	; 1
    139c:	0e 94 03 1b 	call	0x3606	; 0x3606 <_ZN6StringC1EPKc>
	
	//gsm.sendViaSms(sm.c_str()); //TO: local number !
	//gsm.sendViaGprs(sm.c_str());
	
	writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	9e 01       	movw	r18, r28
    13a6:	29 5f       	subi	r18, 0xF9	; 249
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	4a 81       	ldd	r20, Y+2	; 0x02
    13ac:	b9 01       	movw	r22, r18
    13ae:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z8writeMemiPhh>
//	Serial.print(F("Calculated next address for data to be written to: "));
//	Serial.println(writeAddress);
	
	//Run 2 tests
	//gsm.setGPRSNetworkSettings
	String sm = "";//"Module ID:"+ModuleMeta.moduleId+" transmitting.";
    13b2:	ce 01       	movw	r24, r28
    13b4:	8f 96       	adiw	r24, 0x2f	; 47
    13b6:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN6StringD1Ev>
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <_Z17on3MinutesElapsedb+0x102>
		Serial.print(F(", Current #Readings: "));
		Serial.println(meta.numReadings);
	#endif

	if (!doWrite)
		return;
    13bc:	00 00       	nop
	
	//gsm.sendViaSms(sm.c_str()); //TO: local number !
	//gsm.sendViaGprs(sm.c_str());
	
	writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
    13be:	e5 96       	adiw	r28, 0x35	; 53
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <loop>:


volatile int _timerCounter = 0;
void loop() {
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62

	++_timerCounter;
    13d8:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <_timerCounter>
    13dc:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <_timerCounter+0x1>
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <_timerCounter+0x1>
    13e6:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <_timerCounter>
		
	delay(1000);
    13ea:	68 ee       	ldi	r22, 0xE8	; 232
    13ec:	73 e0       	ldi	r23, 0x03	; 3
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
	
	if (ONLY_PRINT_DATA) {
    13f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ONLY_PRINT_DATA>
    13fa:	88 23       	and	r24, r24
    13fc:	69 f0       	breq	.+26     	; 0x1418 <loop+0x48>
		
		if (_timerCounter==1)
    13fe:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <_timerCounter>
    1402:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <_timerCounter+0x1>
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	09 f0       	breq	.+2      	; 0x140e <loop+0x3e>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	22 23       	and	r18, r18
    1410:	31 f1       	breq	.+76     	; 0x145e <loop+0x8e>
			printData();
    1412:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z9printDatav>
		return; //No writes, informational only
    1416:	23 c0       	rjmp	.+70     	; 0x145e <loop+0x8e>
	}
	
	if (INITIALISE_MODULE){
    1418:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    141c:	88 23       	and	r24, r24
    141e:	09 f5       	brne	.+66     	; 0x1462 <loop+0x92>
		
		return; //Should be initialising the module once and writing to it with amended firmware
	}
	
	#ifdef DEBUG
		Serial.println("Looping");
    1420:	67 ea       	ldi	r22, 0xA7	; 167
    1422:	71 e0       	ldi	r23, 0x01	; 1
    1424:	8f e5       	ldi	r24, 0x5F	; 95
    1426:	97 e0       	ldi	r25, 0x07	; 7
    1428:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
	#endif
	
	if (DIAGNOSTIC_TEST) {
    142c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <DIAGNOSTIC_TEST>
    1430:	88 23       	and	r24, r24
    1432:	31 f0       	breq	.+12     	; 0x1440 <loop+0x70>
	
		//Write and print every second
		on3MinutesElapsed(true);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z17on3MinutesElapsedb>
		printData();
    143a:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z9printDatav>
		return;
    143e:	12 c0       	rjmp	.+36     	; 0x1464 <loop+0x94>
	}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins
    1440:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <_timerCounter>
    1444:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <_timerCounter+0x1>
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	84 3b       	cpi	r24, 0xB4	; 180
    144c:	91 05       	cpc	r25, r1
    144e:	09 f0       	breq	.+2      	; 0x1452 <loop+0x82>
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	22 23       	and	r18, r18
    1454:	39 f0       	breq	.+14     	; 0x1464 <loop+0x94>
		on3MinutesElapsed(true);
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z17on3MinutesElapsedb>
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <loop+0x94>
	
	if (ONLY_PRINT_DATA) {
		
		if (_timerCounter==1)
			printData();
		return; //No writes, informational only
    145e:	00 00       	nop
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <loop+0x94>
	}
	
	if (INITIALISE_MODULE){
		
		return; //Should be initialising the module once and writing to it with amended firmware
    1462:	00 00       	nop
		return;
	}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins
		on3MinutesElapsed(true);
}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <_Z41__static_initialization_and_destruction_0ii>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	7c 83       	std	Y+4, r23	; 0x04
    147c:	6b 83       	std	Y+3, r22	; 0x03
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	b9 f4       	brne	.+46     	; 0x14b4 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	99 f4       	brne	.+38     	; 0x14b4 <_Z41__static_initialization_and_destruction_0ii+0x4a>
//Have seen address 0 is typically worn out from testing in EEPROM and gives bogus reads at times 
//so start higher up on another cell, which is more reliable
uint16_t MEM_START = 170;

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    148e:	64 e0       	ldi	r22, 0x04	; 4
    1490:	83 e4       	ldi	r24, 0x43	; 67
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN13Adafruit_FONAC1Ea>
//RmMemManager mem(IS_SENSOR_MOCK);
GpsManager gps(IS_GPS_MOCK);
    1498:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <IS_GPS_MOCK>
    149c:	68 2f       	mov	r22, r24
    149e:	8d e5       	ldi	r24, 0x5D	; 93
    14a0:	94 e0       	ldi	r25, 0x04	; 4
    14a2:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN10GpsManagerC1Eh>
GsmManager gsm(IS_GSM_MOCK);
    14a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <IS_GSM_MOCK>
    14aa:	68 2f       	mov	r22, r24
    14ac:	88 e7       	ldi	r24, 0x78	; 120
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN10GsmManagerC1Eh>
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	89 2b       	or	r24, r25
    14ba:	61 f4       	brne	.+24     	; 0x14d4 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	41 f4       	brne	.+16     	; 0x14d4 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    14c4:	88 e7       	ldi	r24, 0x78	; 120
    14c6:	95 e0       	ldi	r25, 0x05	; 5
    14c8:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN10GsmManagerD1Ev>
uint16_t MEM_START = 170;

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
//RmMemManager mem(IS_SENSOR_MOCK);
GpsManager gps(IS_GPS_MOCK);
    14cc:	8d e5       	ldi	r24, 0x5D	; 93
    14ce:	94 e0       	ldi	r25, 0x04	; 4
    14d0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN10GpsManagerD1Ev>
		return;
	}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins
		on3MinutesElapsed(true);
}
    14d4:	00 00       	nop
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <_GLOBAL__sub_I_DIAGNOSTIC_TEST>:
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	7f ef       	ldi	r23, 0xFF	; 255
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 35 0a 	call	0x146a	; 0x146a <_Z41__static_initialization_and_destruction_0ii>
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <_GLOBAL__sub_D_DIAGNOSTIC_TEST>:
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	6f ef       	ldi	r22, 0xFF	; 255
    1508:	7f ef       	ldi	r23, 0xFF	; 255
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 35 0a 	call	0x146a	; 0x146a <_Z41__static_initialization_and_destruction_0ii>
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    1520:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <twi_state>
  twi_sendStop = true;		// default value
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <twi_sendStop>
  twi_inRepStart = false;
    152a:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    152e:	82 e1       	ldi	r24, 0x12	; 18
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
  digitalWrite(SCL, 1);
    1536:	83 e1       	ldi	r24, 0x13	; 19
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    153e:	89 eb       	ldi	r24, 0xB9	; 185
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	29 eb       	ldi	r18, 0xB9	; 185
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	f9 01       	movw	r30, r18
    1548:	20 81       	ld	r18, Z
    154a:	2e 7f       	andi	r18, 0xFE	; 254
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    1550:	89 eb       	ldi	r24, 0xB9	; 185
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	29 eb       	ldi	r18, 0xB9	; 185
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	f9 01       	movw	r30, r18
    155a:	20 81       	ld	r18, Z
    155c:	2d 7f       	andi	r18, 0xFD	; 253
    155e:	fc 01       	movw	r30, r24
    1560:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    1562:	88 eb       	ldi	r24, 0xB8	; 184
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	28 e4       	ldi	r18, 0x48	; 72
    1568:	fc 01       	movw	r30, r24
    156a:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    156c:	8c eb       	ldi	r24, 0xBC	; 188
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	25 e4       	ldi	r18, 0x45	; 69
    1572:	fc 01       	movw	r30, r24
    1574:	20 83       	st	Z, r18
}
    1576:	00 00       	nop
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    1586:	8c eb       	ldi	r24, 0xBC	; 188
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	2c eb       	ldi	r18, 0xBC	; 188
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	f9 01       	movw	r30, r18
    1590:	20 81       	ld	r18, Z
    1592:	2a 7b       	andi	r18, 0xBA	; 186
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    1598:	82 e1       	ldi	r24, 0x12	; 18
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
  digitalWrite(SCL, 0);
    15a0:	83 e1       	ldi	r24, 0x13	; 19
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
}
    15a8:	00 00       	nop
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	1f 92       	push	r1
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    15bc:	8a eb       	ldi	r24, 0xBA	; 186
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	29 81       	ldd	r18, Y+1	; 0x01
    15c2:	22 0f       	add	r18, r18
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
}
    15c8:	00 00       	nop
    15ca:	0f 90       	pop	r0
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	00 d0       	rcall	.+0      	; 0x15dc <twi_setFrequency+0xa>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <twi_setFrequency+0xc>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	69 83       	std	Y+1, r22	; 0x01
    15e4:	7a 83       	std	Y+2, r23	; 0x02
    15e6:	8b 83       	std	Y+3, r24	; 0x03
    15e8:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    15ea:	08 eb       	ldi	r16, 0xB8	; 184
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	94 e2       	ldi	r25, 0x24	; 36
    15f2:	a4 ef       	ldi	r26, 0xF4	; 244
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	29 81       	ldd	r18, Y+1	; 0x01
    15f8:	3a 81       	ldd	r19, Y+2	; 0x02
    15fa:	4b 81       	ldd	r20, Y+3	; 0x03
    15fc:	5c 81       	ldd	r21, Y+4	; 0x04
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 c4 28 	call	0x5188	; 0x5188 <__udivmodsi4>
    1606:	da 01       	movw	r26, r20
    1608:	c9 01       	movw	r24, r18
    160a:	40 97       	sbiw	r24, 0x10	; 16
    160c:	a1 09       	sbc	r26, r1
    160e:	b1 09       	sbc	r27, r1
    1610:	b6 95       	lsr	r27
    1612:	a7 95       	ror	r26
    1614:	97 95       	ror	r25
    1616:	87 95       	ror	r24
    1618:	f8 01       	movw	r30, r16
    161a:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    161c:	00 00       	nop
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	00 d0       	rcall	.+0      	; 0x1636 <twi_readFrom+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <twi_readFrom+0x8>
    1638:	00 d0       	rcall	.+0      	; 0x163a <twi_readFrom+0xa>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	7c 83       	std	Y+4, r23	; 0x04
    1642:	6b 83       	std	Y+3, r22	; 0x03
    1644:	4d 83       	std	Y+5, r20	; 0x05
    1646:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	81 32       	cpi	r24, 0x21	; 33
    164c:	18 f0       	brcs	.+6      	; 0x1654 <twi_readFrom+0x24>
    return 0;
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	6b c0       	rjmp	.+214    	; 0x1728 <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    1652:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1654:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <twi_state>
    1658:	88 23       	and	r24, r24
    165a:	d9 f7       	brne	.-10     	; 0x1652 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <twi_state>
  twi_sendStop = sendStop;
    1662:	8e 81       	ldd	r24, Y+6	; 0x06
    1664:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    166e:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	81 50       	subi	r24, 0x01	; 1
    1676:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_slarw>
  twi_slarw |= address << 1;
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	98 2f       	mov	r25, r24
    168c:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_slarw>
    1690:	89 2b       	or	r24, r25
    1692:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_slarw>

  if (true == twi_inRepStart) {
    1696:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <twi_inRepStart>
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	c1 f4       	brne	.+48     	; 0x16ce <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    169e:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    16a2:	8b eb       	ldi	r24, 0xBB	; 187
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <twi_slarw>
    16aa:	fc 01       	movw	r30, r24
    16ac:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    16ae:	8c eb       	ldi	r24, 0xBC	; 188
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	80 81       	ld	r24, Z
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	88 70       	andi	r24, 0x08	; 8
    16bc:	99 27       	eor	r25, r25
    16be:	89 2b       	or	r24, r25
    16c0:	81 f7       	brne	.-32     	; 0x16a2 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    16c2:	8c eb       	ldi	r24, 0xBC	; 188
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	25 ec       	ldi	r18, 0xC5	; 197
    16c8:	fc 01       	movw	r30, r24
    16ca:	20 83       	st	Z, r18
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    16ce:	8c eb       	ldi	r24, 0xBC	; 188
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	25 ee       	ldi	r18, 0xE5	; 229
    16d4:	fc 01       	movw	r30, r24
    16d6:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <twi_readFrom+0xac>
    continue;
    16da:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    16dc:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <twi_state>
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	d9 f3       	breq	.-10     	; 0x16da <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    16e4:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	98 17       	cp	r25, r24
    16ec:	18 f4       	brcc	.+6      	; 0x16f4 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    16ee:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    16f2:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    16f4:	19 82       	std	Y+1, r1	; 0x01
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1700:	3c 81       	ldd	r19, Y+4	; 0x04
    1702:	82 0f       	add	r24, r18
    1704:	93 1f       	adc	r25, r19
    1706:	29 81       	ldd	r18, Y+1	; 0x01
    1708:	22 2f       	mov	r18, r18
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	2d 55       	subi	r18, 0x5D	; 93
    170e:	39 4f       	sbci	r19, 0xF9	; 249
    1710:	f9 01       	movw	r30, r18
    1712:	20 81       	ld	r18, Z
    1714:	fc 01       	movw	r30, r24
    1716:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	99 81       	ldd	r25, Y+1	; 0x01
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	98 17       	cp	r25, r24
    1724:	48 f3       	brcs	.-46     	; 0x16f8 <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1728:	26 96       	adiw	r28, 0x06	; 6
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    173a:	0f 93       	push	r16
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	27 97       	sbiw	r28, 0x07	; 7
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	7c 83       	std	Y+4, r23	; 0x04
    1754:	6b 83       	std	Y+3, r22	; 0x03
    1756:	4d 83       	std	Y+5, r20	; 0x05
    1758:	2e 83       	std	Y+6, r18	; 0x06
    175a:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	81 32       	cpi	r24, 0x21	; 33
    1760:	18 f0       	brcs	.+6      	; 0x1768 <twi_writeTo+0x2e>
    return 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	76 c0       	rjmp	.+236    	; 0x1852 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    1766:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    1768:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <twi_state>
    176c:	88 23       	and	r24, r24
    176e:	d9 f7       	brne	.-10     	; 0x1766 <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <twi_state>
  twi_sendStop = sendStop;
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1782:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    1786:	8d 81       	ldd	r24, Y+5	; 0x05
    1788:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	13 c0       	rjmp	.+38     	; 0x17b6 <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	29 81       	ldd	r18, Y+1	; 0x01
    1798:	22 2f       	mov	r18, r18
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4b 81       	ldd	r20, Y+3	; 0x03
    179e:	5c 81       	ldd	r21, Y+4	; 0x04
    17a0:	24 0f       	add	r18, r20
    17a2:	35 1f       	adc	r19, r21
    17a4:	f9 01       	movw	r30, r18
    17a6:	20 81       	ld	r18, Z
    17a8:	8d 55       	subi	r24, 0x5D	; 93
    17aa:	99 4f       	sbci	r25, 0xF9	; 249
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	98 17       	cp	r25, r24
    17bc:	48 f3       	brcs	.-46     	; 0x1790 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    17be:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <twi_slarw>
  twi_slarw |= address << 1;
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	98 2f       	mov	r25, r24
    17ce:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <twi_slarw>
    17d2:	89 2b       	or	r24, r25
    17d4:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    17d8:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <twi_inRepStart>
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	c1 f4       	brne	.+48     	; 0x1810 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    17e0:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    17e4:	8b eb       	ldi	r24, 0xBB	; 187
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <twi_slarw>
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    17f0:	8c eb       	ldi	r24, 0xBC	; 188
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	88 70       	andi	r24, 0x08	; 8
    17fe:	99 27       	eor	r25, r25
    1800:	89 2b       	or	r24, r25
    1802:	81 f7       	brne	.-32     	; 0x17e4 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1804:	8c eb       	ldi	r24, 0xBC	; 188
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	25 ec       	ldi	r18, 0xC5	; 197
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18
    180e:	07 c0       	rjmp	.+14     	; 0x181e <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    1810:	8c eb       	ldi	r24, 0xBC	; 188
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	25 ee       	ldi	r18, 0xE5	; 229
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    181a:	01 c0       	rjmp	.+2      	; 0x181e <twi_writeTo+0xe4>
    continue;
    181c:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	88 23       	and	r24, r24
    1822:	21 f0       	breq	.+8      	; 0x182c <twi_writeTo+0xf2>
    1824:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <twi_state>
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	c1 f3       	breq	.-16     	; 0x181c <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    182c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_error>
    1830:	8f 3f       	cpi	r24, 0xFF	; 255
    1832:	11 f4       	brne	.+4      	; 0x1838 <twi_writeTo+0xfe>
    return 0;	// success
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    1838:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_error>
    183c:	80 32       	cpi	r24, 0x20	; 32
    183e:	11 f4       	brne	.+4      	; 0x1844 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    1844:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <twi_error>
    1848:	80 33       	cpi	r24, 0x30	; 48
    184a:	11 f4       	brne	.+4      	; 0x1850 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    1850:	84 e0       	ldi	r24, 0x04	; 4
}
    1852:	27 96       	adiw	r28, 0x07	; 7
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	00 d0       	rcall	.+0      	; 0x186c <twi_transmit+0x6>
    186c:	00 d0       	rcall	.+0      	; 0x186e <twi_transmit+0x8>
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    1878:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <twi_txBufferLength>
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	81 97       	sbiw	r24, 0x21	; 33
    188c:	14 f0       	brlt	.+4      	; 0x1892 <twi_transmit+0x2c>
    return 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	2c c0       	rjmp	.+88     	; 0x18ea <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1892:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <twi_state>
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	11 f0       	breq	.+4      	; 0x189e <twi_transmit+0x38>
    return 2;
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	26 c0       	rjmp	.+76     	; 0x18ea <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	19 c0       	rjmp	.+50     	; 0x18d4 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    18a2:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <twi_txBufferLength>
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	29 81       	ldd	r18, Y+1	; 0x01
    18b6:	22 2f       	mov	r18, r18
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a 81       	ldd	r20, Y+2	; 0x02
    18bc:	5b 81       	ldd	r21, Y+3	; 0x03
    18be:	24 0f       	add	r18, r20
    18c0:	35 1f       	adc	r19, r21
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	8b 53       	subi	r24, 0x3B	; 59
    18c8:	99 4f       	sbci	r25, 0xF9	; 249
    18ca:	fc 01       	movw	r30, r24
    18cc:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	8f 5f       	subi	r24, 0xFF	; 255
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	99 81       	ldd	r25, Y+1	; 0x01
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	98 17       	cp	r25, r24
    18da:	18 f3       	brcs	.-58     	; 0x18a2 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    18dc:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <twi_txBufferLength>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	89 0f       	add	r24, r25
    18e4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <twi_txBufferLength>
  
  return 0;
    18e8:	80 e0       	ldi	r24, 0x00	; 0
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <twi_attachSlaveRxEvent+0x6>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <twi_onSlaveReceive+0x1>
    190e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_onSlaveReceive>
}
    1912:	00 00       	nop
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 d0       	rcall	.+0      	; 0x1924 <twi_attachSlaveTxEvent+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <twi_onSlaveTransmit+0x1>
    1934:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <twi_onSlaveTransmit>
}
    1938:	00 00       	nop
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	1f 92       	push	r1
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	88 23       	and	r24, r24
    1954:	31 f0       	breq	.+12     	; 0x1962 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1956:	8c eb       	ldi	r24, 0xBC	; 188
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	25 ec       	ldi	r18, 0xC5	; 197
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    1960:	05 c0       	rjmp	.+10     	; 0x196c <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1962:	8c eb       	ldi	r24, 0xBC	; 188
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	25 e8       	ldi	r18, 0x85	; 133
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
  }
}
    196c:	00 00       	nop
    196e:	0f 90       	pop	r0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    197e:	8c eb       	ldi	r24, 0xBC	; 188
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	25 ed       	ldi	r18, 0xD5	; 213
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1988:	01 c0       	rjmp	.+2      	; 0x198c <twi_stop+0x16>
    continue;
    198a:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    198c:	8c eb       	ldi	r24, 0xBC	; 188
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	fc 01       	movw	r30, r24
    1992:	80 81       	ld	r24, Z
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	80 71       	andi	r24, 0x10	; 16
    199a:	99 27       	eor	r25, r25
    199c:	89 2b       	or	r24, r25
    199e:	a9 f7       	brne	.-22     	; 0x198a <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    19a0:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <twi_state>
}
    19a4:	00 00       	nop
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    19b4:	8c eb       	ldi	r24, 0xBC	; 188
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	25 ec       	ldi	r18, 0xC5	; 197
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    19be:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <twi_state>
}
    19c2:	00 00       	nop
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <__vector_24>:

ISR(TWI_vect)
{
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19d2:	0f 92       	push	r0
    19d4:	11 24       	eor	r1, r1
    19d6:	2f 93       	push	r18
    19d8:	3f 93       	push	r19
    19da:	4f 93       	push	r20
    19dc:	5f 93       	push	r21
    19de:	6f 93       	push	r22
    19e0:	7f 93       	push	r23
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
    19ea:	ef 93       	push	r30
    19ec:	ff 93       	push	r31
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    19f6:	89 eb       	ldi	r24, 0xB9	; 185
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	88 7f       	andi	r24, 0xF8	; 248
    1a04:	99 27       	eor	r25, r25
    1a06:	09 2e       	mov	r0, r25
    1a08:	00 0c       	add	r0, r0
    1a0a:	aa 0b       	sbc	r26, r26
    1a0c:	bb 0b       	sbc	r27, r27
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	28 ef       	ldi	r18, 0xF8	; 248
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	84 1b       	sub	r24, r20
    1a18:	95 0b       	sbc	r25, r21
    1a1a:	28 17       	cp	r18, r24
    1a1c:	39 07       	cpc	r19, r25
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <__vector_24+0x58>
    1a20:	17 c1       	rjmp	.+558    	; 0x1c50 <__vector_24+0x286>
    1a22:	8c 5c       	subi	r24, 0xCC	; 204
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	fc 01       	movw	r30, r24
    1a28:	0c 94 05 29 	jmp	0x520a	; 0x520a <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1a2c:	8b eb       	ldi	r24, 0xBB	; 187
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <twi_slarw>
    1a34:	fc 01       	movw	r30, r24
    1a36:	20 83       	st	Z, r18
      twi_reply(1);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      break;
    1a3e:	08 c1       	rjmp	.+528    	; 0x1c50 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a40:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    1a44:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferLength>
    1a48:	98 17       	cp	r25, r24
    1a4a:	a0 f4       	brcc	.+40     	; 0x1a74 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1a4c:	8b eb       	ldi	r24, 0xBB	; 187
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	20 91 c3 06 	lds	r18, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    1a54:	31 e0       	ldi	r19, 0x01	; 1
    1a56:	32 0f       	add	r19, r18
    1a58:	30 93 c3 06 	sts	0x06C3, r19	; 0x8006c3 <twi_masterBufferIndex>
    1a5c:	22 2f       	mov	r18, r18
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	2d 55       	subi	r18, 0x5D	; 93
    1a62:	39 4f       	sbci	r19, 0xF9	; 249
    1a64:	f9 01       	movw	r30, r18
    1a66:	20 81       	ld	r18, Z
    1a68:	fc 01       	movw	r30, r24
    1a6a:	20 83       	st	Z, r18
        twi_reply(1);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    1a72:	ee c0       	rjmp	.+476    	; 0x1c50 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1a74:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <twi_sendStop>
    1a78:	88 23       	and	r24, r24
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <__vector_24+0xb8>
          twi_stop();
    1a7c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    1a80:	e7 c0       	rjmp	.+462    	; 0x1c50 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1a88:	8c eb       	ldi	r24, 0xBC	; 188
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	24 ea       	ldi	r18, 0xA4	; 164
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    1a92:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <twi_state>
	}
      }
      break;
    1a96:	dc c0       	rjmp	.+440    	; 0x1c50 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <twi_error>
      twi_stop();
    1a9e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <twi_stop>
      break;
    1aa2:	d6 c0       	rjmp	.+428    	; 0x1c50 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1aa4:	80 e3       	ldi	r24, 0x30	; 48
    1aa6:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <twi_error>
      twi_stop();
    1aaa:	0e 94 bb 0c 	call	0x1976	; 0x1976 <twi_stop>
      break;
    1aae:	d0 c0       	rjmp	.+416    	; 0x1c50 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1ab0:	88 e3       	ldi	r24, 0x38	; 56
    1ab2:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <twi_error>
      twi_releaseBus();
    1ab6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <twi_releaseBus>
      break;
    1aba:	ca c0       	rjmp	.+404    	; 0x1c50 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1abc:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	98 0f       	add	r25, r24
    1ac4:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <twi_masterBufferIndex>
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	2b eb       	ldi	r18, 0xBB	; 187
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	20 81       	ld	r18, Z
    1ad4:	8d 55       	subi	r24, 0x5D	; 93
    1ad6:	99 4f       	sbci	r25, 0xF9	; 249
    1ad8:	fc 01       	movw	r30, r24
    1ada:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1adc:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    1ae0:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferLength>
    1ae4:	98 17       	cp	r25, r24
    1ae6:	20 f4       	brcc	.+8      	; 0x1af0 <__vector_24+0x126>
        twi_reply(1);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    1aee:	b0 c0       	rjmp	.+352    	; 0x1c50 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      }
      break;
    1af6:	ac c0       	rjmp	.+344    	; 0x1c50 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1af8:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <twi_masterBufferIndex>
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	98 0f       	add	r25, r24
    1b00:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <twi_masterBufferIndex>
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	2b eb       	ldi	r18, 0xBB	; 187
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	20 81       	ld	r18, Z
    1b10:	8d 55       	subi	r24, 0x5D	; 93
    1b12:	99 4f       	sbci	r25, 0xF9	; 249
    1b14:	fc 01       	movw	r30, r24
    1b16:	20 83       	st	Z, r18
	if (twi_sendStop)
    1b18:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <twi_sendStop>
    1b1c:	88 23       	and	r24, r24
    1b1e:	19 f0       	breq	.+6      	; 0x1b26 <__vector_24+0x15c>
          twi_stop();
    1b20:	0e 94 bb 0c 	call	0x1976	; 0x1976 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    1b24:	95 c0       	rjmp	.+298    	; 0x1c50 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b2c:	8c eb       	ldi	r24, 0xBC	; 188
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	24 ea       	ldi	r18, 0xA4	; 164
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    1b36:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <twi_state>
	}    
	break;
    1b3a:	8a c0       	rjmp	.+276    	; 0x1c50 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    1b3c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <twi_stop>
      break;
    1b40:	87 c0       	rjmp	.+270    	; 0x1c50 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1b48:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <twi_rxBufferIndex>
      twi_reply(1);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      break;
    1b52:	7e c0       	rjmp	.+252    	; 0x1c50 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b54:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    1b58:	80 32       	cpi	r24, 0x20	; 32
    1b5a:	a0 f4       	brcc	.+40     	; 0x1b84 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1b5c:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	98 0f       	add	r25, r24
    1b64:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <twi_rxBufferIndex>
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	2b eb       	ldi	r18, 0xBB	; 187
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	f9 01       	movw	r30, r18
    1b72:	20 81       	ld	r18, Z
    1b74:	89 51       	subi	r24, 0x19	; 25
    1b76:	99 4f       	sbci	r25, 0xF9	; 249
    1b78:	fc 01       	movw	r30, r24
    1b7a:	20 83       	st	Z, r18
        twi_reply(1);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    1b82:	66 c0       	rjmp	.+204    	; 0x1c50 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      }
      break;
    1b8a:	62 c0       	rjmp	.+196    	; 0x1c50 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1b8c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b90:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    1b94:	80 32       	cpi	r24, 0x20	; 32
    1b96:	40 f4       	brcc	.+16     	; 0x1ba8 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1b98:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	89 51       	subi	r24, 0x19	; 25
    1ba2:	99 4f       	sbci	r25, 0xF9	; 249
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ba8:	20 91 a1 06 	lds	r18, 0x06A1	; 0x8006a1 <twi_onSlaveReceive>
    1bac:	30 91 a2 06 	lds	r19, 0x06A2	; 0x8006a2 <twi_onSlaveReceive+0x1>
    1bb0:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	bc 01       	movw	r22, r24
    1bba:	87 ee       	ldi	r24, 0xE7	; 231
    1bbc:	96 e0       	ldi	r25, 0x06	; 6
    1bbe:	f9 01       	movw	r30, r18
    1bc0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1bc2:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <twi_rxBufferIndex>
      break;
    1bc6:	44 c0       	rjmp	.+136    	; 0x1c50 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      break;
    1bce:	40 c0       	rjmp	.+128    	; 0x1c50 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1bd0:	84 e0       	ldi	r24, 0x04	; 4
    1bd2:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1bd6:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1bda:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1bde:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <twi_onSlaveTransmit>
    1be2:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <twi_onSlaveTransmit+0x1>
    1be6:	fc 01       	movw	r30, r24
    1be8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1bea:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <twi_txBufferLength>
    1bee:	88 23       	and	r24, r24
    1bf0:	29 f4       	brne	.+10     	; 0x1bfc <__vector_24+0x232>
        twi_txBufferLength = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1bf8:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1bfc:	8b eb       	ldi	r24, 0xBB	; 187
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	20 91 e5 06 	lds	r18, 0x06E5	; 0x8006e5 <twi_txBufferIndex>
    1c04:	31 e0       	ldi	r19, 0x01	; 1
    1c06:	32 0f       	add	r19, r18
    1c08:	30 93 e5 06 	sts	0x06E5, r19	; 0x8006e5 <twi_txBufferIndex>
    1c0c:	22 2f       	mov	r18, r18
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	2b 53       	subi	r18, 0x3B	; 59
    1c12:	39 4f       	sbci	r19, 0xF9	; 249
    1c14:	f9 01       	movw	r30, r18
    1c16:	20 81       	ld	r18, Z
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1c1c:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <twi_txBufferIndex>
    1c20:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <twi_txBufferLength>
    1c24:	98 17       	cp	r25, r24
    1c26:	20 f4       	brcc	.+8      	; 0x1c30 <__vector_24+0x266>
        twi_reply(1);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    1c2e:	10 c0       	rjmp	.+32     	; 0x1c50 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      }
      break;
    1c36:	0c c0       	rjmp	.+24     	; 0x1c50 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    1c3e:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <twi_state>
      break;
    1c42:	06 c0       	rjmp	.+12     	; 0x1c50 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1c44:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <twi_error>
      twi_stop();
    1c48:	0e 94 bb 0c 	call	0x1976	; 0x1976 <twi_stop>
      break;
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    1c4e:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1c50:	00 00       	nop
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	ff 91       	pop	r31
    1c58:	ef 91       	pop	r30
    1c5a:	bf 91       	pop	r27
    1c5c:	af 91       	pop	r26
    1c5e:	9f 91       	pop	r25
    1c60:	8f 91       	pop	r24
    1c62:	7f 91       	pop	r23
    1c64:	6f 91       	pop	r22
    1c66:	5f 91       	pop	r21
    1c68:	4f 91       	pop	r20
    1c6a:	3f 91       	pop	r19
    1c6c:	2f 91       	pop	r18
    1c6e:	0f 90       	pop	r0
    1c70:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c74:	0f 90       	pop	r0
    1c76:	1f 90       	pop	r1
    1c78:	18 95       	reti

00001c7a <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <_ZN7TwoWireC1Ev+0x6>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <_ZN6StreamC1Ev>
    1c90:	24 e8       	ldi	r18, 0x84	; 132
    1c92:	32 e0       	ldi	r19, 0x02	; 2
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	fc 01       	movw	r30, r24
    1c9a:	31 83       	std	Z+1, r19	; 0x01
    1c9c:	20 83       	st	Z, r18
{
}
    1c9e:	00 00       	nop
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <_ZN7TwoWire5beginEv+0x6>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    1cb8:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    1cbc:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    1cc0:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    1cc4:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    1cc8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <twi_init>
}
    1ccc:	00 00       	nop
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <_ZN7TwoWire5beginEh+0x6>
    1cde:	1f 92       	push	r1
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	6b 83       	std	Y+3, r22	; 0x03
  twi_setAddress(address);
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    1cf0:	89 e7       	ldi	r24, 0x79	; 121
    1cf2:	91 e1       	ldi	r25, 0x11	; 17
    1cf4:	0e 94 8f 0c 	call	0x191e	; 0x191e <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    1cf8:	8c e2       	ldi	r24, 0x2C	; 44
    1cfa:	91 e1       	ldi	r25, 0x11	; 17
    1cfc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <twi_attachSlaveRxEvent>
  begin();
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN7TwoWire5beginEv>
}
    1d08:	00 00       	nop
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	08 95       	ret

00001d16 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <_ZN7TwoWire5beginEi+0x6>
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <_ZN7TwoWire5beginEi+0x8>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	7c 83       	std	Y+4, r23	; 0x04
    1d28:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    1d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	62 2f       	mov	r22, r18
    1d32:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN7TwoWire5beginEh>
}
    1d36:	00 00       	nop
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	08 95       	ret

00001d46 <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <_ZN7TwoWire3endEv+0x6>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    1d54:	0e 94 bf 0a 	call	0x157e	; 0x157e <twi_disable>
}
    1d58:	00 00       	nop
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <_ZN7TwoWire8setClockEm+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <_ZN7TwoWire8setClockEm+0x8>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <_ZN7TwoWire8setClockEm+0xa>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	4b 83       	std	Y+3, r20	; 0x03
    1d78:	5c 83       	std	Y+4, r21	; 0x04
    1d7a:	6d 83       	std	Y+5, r22	; 0x05
    1d7c:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	ad 81       	ldd	r26, Y+5	; 0x05
    1d84:	be 81       	ldd	r27, Y+6	; 0x06
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <twi_setFrequency>
}
    1d8e:	00 00       	nop
    1d90:	26 96       	adiw	r28, 0x06	; 6
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	08 95       	ret

00001da2 <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    1da2:	cf 92       	push	r12
    1da4:	ef 92       	push	r14
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	2b 97       	sbiw	r28, 0x0b	; 11
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	9b 83       	std	Y+3, r25	; 0x03
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
    1dc2:	6c 83       	std	Y+4, r22	; 0x04
    1dc4:	4d 83       	std	Y+5, r20	; 0x05
    1dc6:	0e 83       	std	Y+6, r16	; 0x06
    1dc8:	1f 83       	std	Y+7, r17	; 0x07
    1dca:	28 87       	std	Y+8, r18	; 0x08
    1dcc:	39 87       	std	Y+9, r19	; 0x09
    1dce:	ea 86       	std	Y+10, r14	; 0x0a
    1dd0:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    1dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd4:	88 23       	and	r24, r24
    1dd6:	e9 f1       	breq	.+122    	; 0x1e52 <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	6c 81       	ldd	r22, Y+4	; 0x04
    1dde:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    1de2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	10 f0       	brcs	.+4      	; 0x1dec <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    1dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dee:	9f ef       	ldi	r25, 0xFF	; 255
    1df0:	98 0f       	add	r25, r24
    1df2:	9a 87       	std	Y+10, r25	; 0x0a
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	88 23       	and	r24, r24
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	99 23       	and	r25, r25
    1dfe:	21 f1       	breq	.+72     	; 0x1e48 <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 81       	ld	r18, Z
    1e0e:	31 81       	ldd	r19, Z+1	; 0x01
    1e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	ac 01       	movw	r20, r24
    1e18:	44 0f       	add	r20, r20
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	44 0f       	add	r20, r20
    1e1e:	55 1f       	adc	r21, r21
    1e20:	44 0f       	add	r20, r20
    1e22:	55 1f       	adc	r21, r21
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	a8 85       	ldd	r26, Y+8	; 0x08
    1e2a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <_ZN7TwoWire11requestFromEhhmhh+0x94>
    1e2e:	b6 95       	lsr	r27
    1e30:	a7 95       	ror	r26
    1e32:	97 95       	ror	r25
    1e34:	87 95       	ror	r24
    1e36:	4a 95       	dec	r20
    1e38:	d2 f7       	brpl	.-12     	; 0x1e2e <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	64 2f       	mov	r22, r20
    1e42:	f9 01       	movw	r30, r18
    1e44:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    1e46:	d2 cf       	rjmp	.-92     	; 0x1dec <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	81 32       	cpi	r24, 0x21	; 33
    1e56:	10 f0       	brcs	.+4      	; 0x1e5c <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    1e58:	80 e2       	ldi	r24, 0x20	; 32
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e5e:	4d 81       	ldd	r20, Y+5	; 0x05
    1e60:	69 e0       	ldi	r22, 0x09	; 9
    1e62:	77 e0       	ldi	r23, 0x07	; 7
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	0e 94 18 0b 	call	0x1630	; 0x1630 <twi_readFrom>
    1e6a:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1e6c:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>

  return read;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e78:	2b 96       	adiw	r28, 0x0b	; 11
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	ef 90       	pop	r14
    1e8e:	cf 90       	pop	r12
    1e90:	08 95       	ret

00001e92 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    1e92:	cf 92       	push	r12
    1e94:	ef 92       	push	r14
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <_ZN7TwoWire11requestFromEhhh+0xe>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <_ZN7TwoWire11requestFromEhhh+0x10>
    1ea2:	1f 92       	push	r1
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	6b 83       	std	Y+3, r22	; 0x03
    1eae:	4c 83       	std	Y+4, r20	; 0x04
    1eb0:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	cd 80       	ldd	r12, Y+5	; 0x05
    1eb8:	e1 2c       	mov	r14, r1
    1eba:	00 e0       	ldi	r16, 0x00	; 0
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
    1ebe:	98 01       	movw	r18, r16
    1ec0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ec2:	6b 81       	ldd	r22, Y+3	; 0x03
    1ec4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire11requestFromEhhmhh>
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ef 90       	pop	r14
    1edc:	cf 90       	pop	r12
    1ede:	08 95       	ret

00001ee0 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <_ZN7TwoWire11requestFromEhh+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <_ZN7TwoWire11requestFromEhh+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	6b 83       	std	Y+3, r22	; 0x03
    1ef2:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	21 e0       	ldi	r18, 0x01	; 1
    1efa:	4c 81       	ldd	r20, Y+4	; 0x04
    1efc:	6b 81       	ldd	r22, Y+3	; 0x03
    1efe:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire11requestFromEhhh>
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <_ZN7TwoWire11requestFromEii+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <_ZN7TwoWire11requestFromEii+0x8>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <_ZN7TwoWire11requestFromEii+0xa>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	7c 83       	std	Y+4, r23	; 0x04
    1f24:	6b 83       	std	Y+3, r22	; 0x03
    1f26:	5e 83       	std	Y+6, r21	; 0x06
    1f28:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1f2a:	4d 81       	ldd	r20, Y+5	; 0x05
    1f2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	21 e0       	ldi	r18, 0x01	; 1
    1f34:	63 2f       	mov	r22, r19
    1f36:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire11requestFromEhhh>
}
    1f3a:	26 96       	adiw	r28, 0x06	; 6
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	08 95       	ret

00001f4c <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	28 97       	sbiw	r28, 0x08	; 8
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	7c 83       	std	Y+4, r23	; 0x04
    1f66:	6b 83       	std	Y+3, r22	; 0x03
    1f68:	5e 83       	std	Y+6, r21	; 0x06
    1f6a:	4d 83       	std	Y+5, r20	; 0x05
    1f6c:	38 87       	std	Y+8, r19	; 0x08
    1f6e:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    1f70:	2f 81       	ldd	r18, Y+7	; 0x07
    1f72:	4d 81       	ldd	r20, Y+5	; 0x05
    1f74:	3b 81       	ldd	r19, Y+3	; 0x03
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	63 2f       	mov	r22, r19
    1f7c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7TwoWire11requestFromEhhh>
}
    1f80:	28 96       	adiw	r28, 0x08	; 8
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <_ZN7TwoWire17beginTransmissionEh+0x6>
    1f98:	1f 92       	push	r1
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1fb0:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    1fb4:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire14txBufferLengthE>
}
    1fb8:	00 00       	nop
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <_ZN7TwoWire17beginTransmissionEi+0x6>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <_ZN7TwoWire17beginTransmissionEi+0x8>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	7c 83       	std	Y+4, r23	; 0x04
    1fd8:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    1fda:	2b 81       	ldd	r18, Y+3	; 0x03
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	62 2f       	mov	r22, r18
    1fe2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7TwoWire17beginTransmissionEh>
}
    1fe6:	00 00       	nop
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	08 95       	ret

00001ff6 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1ff6:	0f 93       	push	r16
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <_ZN7TwoWire15endTransmissionEh+0x8>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <_ZN7TwoWire15endTransmissionEh+0xa>
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	9b 83       	std	Y+3, r25	; 0x03
    2006:	8a 83       	std	Y+2, r24	; 0x02
    2008:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    200a:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <_ZN7TwoWire14txBufferLengthE>
    200e:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_ZN7TwoWire9txAddressE>
    2012:	0c 81       	ldd	r16, Y+4	; 0x04
    2014:	21 e0       	ldi	r18, 0x01	; 1
    2016:	49 2f       	mov	r20, r25
    2018:	6c e2       	ldi	r22, 0x2C	; 44
    201a:	77 e0       	ldi	r23, 0x07	; 7
    201c:	0e 94 9d 0b 	call	0x173a	; 0x173a <twi_writeTo>
    2020:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2022:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2026:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    202a:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <_ZN7TwoWire12transmittingE>
  return ret;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	00 d0       	rcall	.+0      	; 0x2046 <_ZN7TwoWire15endTransmissionEv+0x6>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire15endTransmissionEh>
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	00 d0       	rcall	.+0      	; 0x2068 <_ZN7TwoWire5writeEh+0x6>
    2068:	1f 92       	push	r1
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2074:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <_ZN7TwoWire12transmittingE>
    2078:	88 23       	and	r24, r24
    207a:	01 f1       	breq	.+64     	; 0x20bc <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    207c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZN7TwoWire14txBufferLengthE>
    2080:	80 32       	cpi	r24, 0x20	; 32
    2082:	48 f0       	brcs	.+18     	; 0x2096 <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN5Print13setWriteErrorEi>
      return 0;
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	1a c0       	rjmp	.+52     	; 0x20ca <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2096:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	2b 81       	ldd	r18, Y+3	; 0x03
    20a0:	84 5d       	subi	r24, 0xD4	; 212
    20a2:	98 4f       	sbci	r25, 0xF8	; 248
    20a4:	fc 01       	movw	r30, r24
    20a6:	20 83       	st	Z, r18
    ++txBufferIndex;
    20a8:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    20b2:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
    20b6:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <_ZN7TwoWire14txBufferLengthE>
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    20bc:	ce 01       	movw	r24, r28
    20be:	03 96       	adiw	r24, 0x03	; 3
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	0e 94 33 0c 	call	0x1866	; 0x1866 <twi_transmit>
  }
  return 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	08 95       	ret

000020d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	28 97       	sbiw	r28, 0x08	; 8
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	7e 83       	std	Y+6, r23	; 0x06
    20f0:	6d 83       	std	Y+5, r22	; 0x05
    20f2:	58 87       	std	Y+8, r21	; 0x08
    20f4:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    20f6:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <_ZN7TwoWire12transmittingE>
    20fa:	88 23       	and	r24, r24
    20fc:	21 f1       	breq	.+72     	; 0x2146 <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    20fe:	1a 82       	std	Y+2, r1	; 0x02
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	29 81       	ldd	r18, Y+1	; 0x01
    2104:	3a 81       	ldd	r19, Y+2	; 0x02
    2106:	8f 81       	ldd	r24, Y+7	; 0x07
    2108:	98 85       	ldd	r25, Y+8	; 0x08
    210a:	28 17       	cp	r18, r24
    210c:	39 07       	cpc	r19, r25
    210e:	08 f5       	brcc	.+66     	; 0x2152 <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	fc 01       	movw	r30, r24
    2116:	80 81       	ld	r24, Z
    2118:	91 81       	ldd	r25, Z+1	; 0x01
    211a:	fc 01       	movw	r30, r24
    211c:	20 81       	ld	r18, Z
    211e:	31 81       	ldd	r19, Z+1	; 0x01
    2120:	4d 81       	ldd	r20, Y+5	; 0x05
    2122:	5e 81       	ldd	r21, Y+6	; 0x06
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	84 0f       	add	r24, r20
    212a:	95 1f       	adc	r25, r21
    212c:	fc 01       	movw	r30, r24
    212e:	40 81       	ld	r20, Z
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	64 2f       	mov	r22, r20
    2136:	f9 01       	movw	r30, r18
    2138:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	de cf       	rjmp	.-68     	; 0x2102 <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2146:	2f 81       	ldd	r18, Y+7	; 0x07
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	62 2f       	mov	r22, r18
    214e:	0e 94 33 0c 	call	0x1866	; 0x1866 <twi_transmit>
  }
  return quantity;
    2152:	8f 81       	ldd	r24, Y+7	; 0x07
    2154:	98 85       	ldd	r25, Y+8	; 0x08
}
    2156:	28 96       	adiw	r28, 0x08	; 8
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	00 d0       	rcall	.+0      	; 0x216e <_ZN7TwoWire9availableEv+0x6>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2176:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a9 01       	movw	r20, r18
    2188:	48 1b       	sub	r20, r24
    218a:	59 0b       	sbc	r21, r25
    218c:	ca 01       	movw	r24, r20
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	08 95       	ret

00002198 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	00 d0       	rcall	.+0      	; 0x219e <_ZN7TwoWire4readEv+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <_ZN7TwoWire4readEv+0x8>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	9c 83       	std	Y+4, r25	; 0x04
    21a6:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    21a8:	8f ef       	ldi	r24, 0xFF	; 255
    21aa:	9f ef       	ldi	r25, 0xFF	; 255
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    21b0:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    21b4:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    21b8:	98 17       	cp	r25, r24
    21ba:	88 f4       	brcc	.+34     	; 0x21de <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    21bc:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    21c0:	88 2f       	mov	r24, r24
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	87 5f       	subi	r24, 0xF7	; 247
    21c6:	98 4f       	sbci	r25, 0xF8	; 248
    21c8:	fc 01       	movw	r30, r24
    21ca:	80 81       	ld	r24, Z
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    21d4:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <_ZN7TwoWire4peekEv+0x6>
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <_ZN7TwoWire4peekEv+0x8>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	9f ef       	ldi	r25, 0xFF	; 255
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    2208:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    220c:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    2210:	98 17       	cp	r25, r24
    2212:	60 f4       	brcc	.+24     	; 0x222c <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    2214:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	87 5f       	subi	r24, 0xF7	; 247
    221e:	98 4f       	sbci	r25, 0xF8	; 248
    2220:	fc 01       	movw	r30, r24
    2222:	80 81       	ld	r24, Z
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	00 d0       	rcall	.+0      	; 0x2244 <_ZN7TwoWire5flushEv+0x6>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    224c:	00 00       	nop
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	00 d0       	rcall	.+0      	; 0x225e <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2260:	1f 92       	push	r1
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	7d 83       	std	Y+5, r23	; 0x05
    226c:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    226e:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <_ZN7TwoWire14user_onReceiveE>
    2272:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <_ZN7TwoWire14user_onReceiveE+0x1>
    2276:	89 2b       	or	r24, r25
    2278:	89 f1       	breq	.+98     	; 0x22dc <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    227a:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
    227e:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
    2282:	98 17       	cp	r25, r24
    2284:	68 f1       	brcs	.+90     	; 0x22e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	9d 81       	ldd	r25, Y+5	; 0x05
    2292:	28 17       	cp	r18, r24
    2294:	39 07       	cpc	r19, r25
    2296:	a4 f4       	brge	.+40     	; 0x22c0 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	29 81       	ldd	r18, Y+1	; 0x01
    22a0:	22 2f       	mov	r18, r18
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a 81       	ldd	r20, Y+2	; 0x02
    22a6:	5b 81       	ldd	r21, Y+3	; 0x03
    22a8:	24 0f       	add	r18, r20
    22aa:	35 1f       	adc	r19, r21
    22ac:	f9 01       	movw	r30, r18
    22ae:	20 81       	ld	r18, Z
    22b0:	87 5f       	subi	r24, 0xF7	; 247
    22b2:	98 4f       	sbci	r25, 0xF8	; 248
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	e4 cf       	rjmp	.-56     	; 0x2288 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    22c0:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    22ca:	20 91 51 07 	lds	r18, 0x0751	; 0x800751 <_ZN7TwoWire14user_onReceiveE>
    22ce:	30 91 52 07 	lds	r19, 0x0752	; 0x800752 <_ZN7TwoWire14user_onReceiveE+0x1>
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	f9 01       	movw	r30, r18
    22d8:	09 95       	icall
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    22dc:	00 00       	nop
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    22e0:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	08 95       	ret

000022f2 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    22fa:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN7TwoWire14user_onRequestE>
    22fe:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ZN7TwoWire14user_onRequestE+0x1>
    2302:	89 2b       	or	r24, r25
    2304:	59 f0       	breq	.+22     	; 0x231c <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2306:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    230a:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    230e:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN7TwoWire14user_onRequestE>
    2312:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ZN7TwoWire14user_onRequestE+0x1>
    2316:	fc 01       	movw	r30, r24
    2318:	09 95       	icall
    231a:	01 c0       	rjmp	.+2      	; 0x231e <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    231c:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	08 95       	ret

00002324 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	00 d0       	rcall	.+0      	; 0x232a <_ZN7TwoWire9onReceiveEPFviE+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <_ZN7TwoWire9onReceiveEPFviE+0x8>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	7c 83       	std	Y+4, r23	; 0x04
    2336:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <_ZN7TwoWire14user_onReceiveE+0x1>
    2340:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <_ZN7TwoWire14user_onReceiveE>
}
    2344:	00 00       	nop
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	08 95       	ret

00002354 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	00 d0       	rcall	.+0      	; 0x235a <_ZN7TwoWire9onRequestEPFvvE+0x6>
    235a:	00 d0       	rcall	.+0      	; 0x235c <_ZN7TwoWire9onRequestEPFvvE+0x8>
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	7c 83       	std	Y+4, r23	; 0x04
    2366:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <_ZN7TwoWire14user_onRequestE+0x1>
    2370:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <_ZN7TwoWire14user_onRequestE>
}
    2374:	00 00       	nop
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	08 95       	ret

00002384 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	00 d0       	rcall	.+0      	; 0x238a <_Z41__static_initialization_and_destruction_0ii+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <_Z41__static_initialization_and_destruction_0ii+0x8>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	7c 83       	std	Y+4, r23	; 0x04
    2396:	6b 83       	std	Y+3, r22	; 0x03
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	41 f4       	brne	.+16     	; 0x23b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	01 96       	adiw	r24, 0x01	; 1
    23a6:	21 f4       	brne	.+8      	; 0x23b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    23a8:	83 e5       	ldi	r24, 0x53	; 83
    23aa:	97 e0       	ldi	r25, 0x07	; 7
    23ac:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN7TwoWireC1Ev>
    23b0:	00 00       	nop
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	6f ef       	ldi	r22, 0xFF	; 255
    23ca:	7f ef       	ldi	r23, 0xFF	; 255
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 c2 11 	call	0x2384	; 0x2384 <_Z41__static_initialization_and_destruction_0ii>
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <_ZN5PrintaSERKS_+0x6>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <_ZN5PrintaSERKS_+0x8>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	7c 83       	std	Y+4, r23	; 0x04
    23ec:	6b 83       	std	Y+3, r22	; 0x03
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	fc 01       	movw	r30, r24
    23f4:	22 81       	ldd	r18, Z+2	; 0x02
    23f6:	33 81       	ldd	r19, Z+3	; 0x03
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	fc 01       	movw	r30, r24
    23fe:	33 83       	std	Z+3, r19	; 0x03
    2400:	22 83       	std	Z+2, r18	; 0x02
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	00 d0       	rcall	.+0      	; 0x241a <_ZN6StreamaSERKS_+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <_ZN6StreamaSERKS_+0x8>
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	7c 83       	std	Y+4, r23	; 0x04
    2426:	6b 83       	std	Y+3, r22	; 0x03
    2428:	2b 81       	ldd	r18, Y+3	; 0x03
    242a:	3c 81       	ldd	r19, Y+4	; 0x04
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	b9 01       	movw	r22, r18
    2432:	0e 94 ed 11 	call	0x23da	; 0x23da <_ZN5PrintaSERKS_>
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	fc 01       	movw	r30, r24
    243c:	84 81       	ldd	r24, Z+4	; 0x04
    243e:	95 81       	ldd	r25, Z+5	; 0x05
    2440:	a6 81       	ldd	r26, Z+6	; 0x06
    2442:	b7 81       	ldd	r27, Z+7	; 0x07
    2444:	29 81       	ldd	r18, Y+1	; 0x01
    2446:	3a 81       	ldd	r19, Y+2	; 0x02
    2448:	f9 01       	movw	r30, r18
    244a:	84 83       	std	Z+4, r24	; 0x04
    244c:	95 83       	std	Z+5, r25	; 0x05
    244e:	a6 83       	std	Z+6, r26	; 0x06
    2450:	b7 83       	std	Z+7, r27	; 0x07
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	fc 01       	movw	r30, r24
    2458:	80 85       	ldd	r24, Z+8	; 0x08
    245a:	91 85       	ldd	r25, Z+9	; 0x09
    245c:	a2 85       	ldd	r26, Z+10	; 0x0a
    245e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2460:	29 81       	ldd	r18, Y+1	; 0x01
    2462:	3a 81       	ldd	r19, Y+2	; 0x02
    2464:	f9 01       	movw	r30, r18
    2466:	80 87       	std	Z+8, r24	; 0x08
    2468:	91 87       	std	Z+9, r25	; 0x09
    246a:	a2 87       	std	Z+10, r26	; 0x0a
    246c:	b3 87       	std	Z+11, r27	; 0x0b
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	00 d0       	rcall	.+0      	; 0x2486 <_ZN13Adafruit_FONAaSERKS_+0x6>
    2486:	00 d0       	rcall	.+0      	; 0x2488 <_ZN13Adafruit_FONAaSERKS_+0x8>
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	7c 83       	std	Y+4, r23	; 0x04
    2492:	6b 83       	std	Y+3, r22	; 0x03
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	b9 01       	movw	r22, r18
    249e:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN6StreamaSERKS_>
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	fc 01       	movw	r30, r24
    24a8:	24 85       	ldd	r18, Z+12	; 0x0c
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	fc 01       	movw	r30, r24
    24b0:	24 87       	std	Z+12, r18	; 0x0c
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	fc 01       	movw	r30, r24
    24b8:	25 85       	ldd	r18, Z+13	; 0x0d
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	fc 01       	movw	r30, r24
    24c0:	25 87       	std	Z+13, r18	; 0x0d
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	ac 01       	movw	r20, r24
    24c8:	42 5f       	subi	r20, 0xF2	; 242
    24ca:	5f 4f       	sbci	r21, 0xFF	; 255
    24cc:	8e ef       	ldi	r24, 0xFE	; 254
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	2b 81       	ldd	r18, Y+3	; 0x03
    24d2:	3c 81       	ldd	r19, Y+4	; 0x04
    24d4:	22 5f       	subi	r18, 0xF2	; 242
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	8f 3f       	cpi	r24, 0xFF	; 255
    24da:	ff ef       	ldi	r31, 0xFF	; 255
    24dc:	9f 07       	cpc	r25, r31
    24de:	51 f0       	breq	.+20     	; 0x24f4 <_ZN13Adafruit_FONAaSERKS_+0x74>
    24e0:	f9 01       	movw	r30, r18
    24e2:	60 81       	ld	r22, Z
    24e4:	fa 01       	movw	r30, r20
    24e6:	60 83       	st	Z, r22
    24e8:	4f 5f       	subi	r20, 0xFF	; 255
    24ea:	5f 4f       	sbci	r21, 0xFF	; 255
    24ec:	2f 5f       	subi	r18, 0xFF	; 255
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f2 cf       	rjmp	.-28     	; 0x24d8 <_ZN13Adafruit_FONAaSERKS_+0x58>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	83 5f       	subi	r24, 0xF3	; 243
    24fa:	9e 4f       	sbci	r25, 0xFE	; 254
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	83 5f       	subi	r24, 0xF3	; 243
    2508:	9e 4f       	sbci	r25, 0xFE	; 254
    250a:	fc 01       	movw	r30, r24
    250c:	31 83       	std	Z+1, r19	; 0x01
    250e:	20 83       	st	Z, r18
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	81 5f       	subi	r24, 0xF1	; 241
    2516:	9e 4f       	sbci	r25, 0xFE	; 254
    2518:	fc 01       	movw	r30, r24
    251a:	20 81       	ld	r18, Z
    251c:	31 81       	ldd	r19, Z+1	; 0x01
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	9a 81       	ldd	r25, Y+2	; 0x02
    2522:	81 5f       	subi	r24, 0xF1	; 241
    2524:	9e 4f       	sbci	r25, 0xFE	; 254
    2526:	fc 01       	movw	r30, r24
    2528:	31 83       	std	Z+1, r19	; 0x01
    252a:	20 83       	st	Z, r18
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	8f 5e       	subi	r24, 0xEF	; 239
    2532:	9e 4f       	sbci	r25, 0xFE	; 254
    2534:	fc 01       	movw	r30, r24
    2536:	20 81       	ld	r18, Z
    2538:	31 81       	ldd	r19, Z+1	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	8f 5e       	subi	r24, 0xEF	; 239
    2540:	9e 4f       	sbci	r25, 0xFE	; 254
    2542:	fc 01       	movw	r30, r24
    2544:	31 83       	std	Z+1, r19	; 0x01
    2546:	20 83       	st	Z, r18
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	8d 5e       	subi	r24, 0xED	; 237
    254e:	9e 4f       	sbci	r25, 0xFE	; 254
    2550:	fc 01       	movw	r30, r24
    2552:	20 81       	ld	r18, Z
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	8d 5e       	subi	r24, 0xED	; 237
    255a:	9e 4f       	sbci	r25, 0xFE	; 254
    255c:	fc 01       	movw	r30, r24
    255e:	20 83       	st	Z, r18
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	8c 5e       	subi	r24, 0xEC	; 236
    2566:	9e 4f       	sbci	r25, 0xFE	; 254
    2568:	fc 01       	movw	r30, r24
    256a:	20 81       	ld	r18, Z
    256c:	31 81       	ldd	r19, Z+1	; 0x01
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	8c 5e       	subi	r24, 0xEC	; 236
    2574:	9e 4f       	sbci	r25, 0xFE	; 254
    2576:	fc 01       	movw	r30, r24
    2578:	31 83       	std	Z+1, r19	; 0x01
    257a:	20 83       	st	Z, r18
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	8a 5e       	subi	r24, 0xEA	; 234
    2582:	9e 4f       	sbci	r25, 0xFE	; 254
    2584:	fc 01       	movw	r30, r24
    2586:	20 81       	ld	r18, Z
    2588:	31 81       	ldd	r19, Z+1	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	8a 5e       	subi	r24, 0xEA	; 234
    2590:	9e 4f       	sbci	r25, 0xFE	; 254
    2592:	fc 01       	movw	r30, r24
    2594:	31 83       	std	Z+1, r19	; 0x01
    2596:	20 83       	st	Z, r18
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	88 5e       	subi	r24, 0xE8	; 232
    259e:	9e 4f       	sbci	r25, 0xFE	; 254
    25a0:	fc 01       	movw	r30, r24
    25a2:	20 81       	ld	r18, Z
    25a4:	31 81       	ldd	r19, Z+1	; 0x01
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	88 5e       	subi	r24, 0xE8	; 232
    25ac:	9e 4f       	sbci	r25, 0xFE	; 254
    25ae:	fc 01       	movw	r30, r24
    25b0:	31 83       	std	Z+1, r19	; 0x01
    25b2:	20 83       	st	Z, r18
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <_ZN14HardwareSerial5beginEm+0x6>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <_ZN14HardwareSerial5beginEm+0x8>
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <_ZN14HardwareSerial5beginEm+0xa>
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	4b 83       	std	Y+3, r20	; 0x03
    25da:	5c 83       	std	Y+4, r21	; 0x04
    25dc:	6d 83       	std	Y+5, r22	; 0x05
    25de:	7e 83       	std	Y+6, r23	; 0x06
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	ad 81       	ldd	r26, Y+5	; 0x05
    25e6:	be 81       	ldd	r27, Y+6	; 0x06
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	26 e0       	ldi	r18, 0x06	; 6
    25ee:	ac 01       	movw	r20, r24
    25f0:	bd 01       	movw	r22, r26
    25f2:	cf 01       	movw	r24, r30
    25f4:	0e 94 84 15 	call	0x2b08	; 0x2b08 <_ZN14HardwareSerial5beginEmh>
    25f8:	00 00       	nop
    25fa:	26 96       	adiw	r28, 0x06	; 6
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	00 d0       	rcall	.+0      	; 0x2612 <_ZN7TwoWire5writeEi+0x6>
    2612:	00 d0       	rcall	.+0      	; 0x2614 <_ZN7TwoWire5writeEi+0x8>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	7c 83       	std	Y+4, r23	; 0x04
    261e:	6b 83       	std	Y+3, r22	; 0x03
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	fc 01       	movw	r30, r24
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	fc 01       	movw	r30, r24
    262c:	20 81       	ld	r18, Z
    262e:	31 81       	ldd	r19, Z+1	; 0x01
    2630:	4b 81       	ldd	r20, Y+3	; 0x03
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	64 2f       	mov	r22, r20
    2638:	f9 01       	movw	r30, r18
    263a:	09 95       	icall
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <_ZN10ModuleMetaC1Ev>:
	//boolean HasDataToSend=false;
	//uint16_t GsmResultCode=0;
	//uint16_t SmsResultCode=0;
//}

struct ModuleMeta{
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	00 d0       	rcall	.+0      	; 0x2650 <_ZN10ModuleMetaC1Ev+0x6>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	fc 01       	movw	r30, r24
    265e:	11 82       	std	Z+1, r1	; 0x01
    2660:	00 00       	nop
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	00 d0       	rcall	.+0      	; 0x2672 <_ZN5Print13setWriteErrorEi+0x6>
    2672:	00 d0       	rcall	.+0      	; 0x2674 <_ZN5Print13setWriteErrorEi+0x8>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	7c 83       	std	Y+4, r23	; 0x04
    267e:	6b 83       	std	Y+3, r22	; 0x03
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	3c 81       	ldd	r19, Y+4	; 0x04
    2688:	fc 01       	movw	r30, r24
    268a:	33 83       	std	Z+3, r19	; 0x03
    268c:	22 83       	std	Z+2, r18	; 0x02
    268e:	00 00       	nop
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <_ZN5PrintC1Ev+0x6>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	25 ec       	ldi	r18, 0xC5	; 197
    26ae:	32 e0       	ldi	r19, 0x02	; 2
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	fc 01       	movw	r30, r24
    26b6:	31 83       	std	Z+1, r19	; 0x01
    26b8:	20 83       	st	Z, r18
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	fc 01       	movw	r30, r24
    26c0:	13 82       	std	Z+3, r1	; 0x03
    26c2:	12 82       	std	Z+2, r1	; 0x02
    26c4:	00 00       	nop
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <_ZN6StreamC1Ev+0x6>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	0e 94 4f 13 	call	0x269e	; 0x269e <_ZN5PrintC1Ev>
    26e6:	24 e9       	ldi	r18, 0x94	; 148
    26e8:	32 e0       	ldi	r19, 0x02	; 2
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	fc 01       	movw	r30, r24
    26f0:	31 83       	std	Z+1, r19	; 0x01
    26f2:	20 83       	st	Z, r18
    26f4:	29 81       	ldd	r18, Y+1	; 0x01
    26f6:	3a 81       	ldd	r19, Y+2	; 0x02
    26f8:	88 ee       	ldi	r24, 0xE8	; 232
    26fa:	93 e0       	ldi	r25, 0x03	; 3
    26fc:	a0 e0       	ldi	r26, 0x00	; 0
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	f9 01       	movw	r30, r18
    2702:	84 83       	std	Z+4, r24	; 0x04
    2704:	95 83       	std	Z+5, r25	; 0x05
    2706:	a6 83       	std	Z+6, r26	; 0x06
    2708:	b7 83       	std	Z+7, r27	; 0x07
    270a:	00 00       	nop
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	08 95       	ret

00002716 <__fixsfsi>:
    2716:	0e 94 92 13 	call	0x2724	; 0x2724 <__fixunssfsi>
    271a:	68 94       	set
    271c:	b1 11       	cpse	r27, r1
    271e:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_szero>
    2722:	08 95       	ret

00002724 <__fixunssfsi>:
    2724:	0e 94 06 14 	call	0x280c	; 0x280c <__fp_splitA>
    2728:	88 f0       	brcs	.+34     	; 0x274c <__fixunssfsi+0x28>
    272a:	9f 57       	subi	r25, 0x7F	; 127
    272c:	98 f0       	brcs	.+38     	; 0x2754 <__fixunssfsi+0x30>
    272e:	b9 2f       	mov	r27, r25
    2730:	99 27       	eor	r25, r25
    2732:	b7 51       	subi	r27, 0x17	; 23
    2734:	b0 f0       	brcs	.+44     	; 0x2762 <__fixunssfsi+0x3e>
    2736:	e1 f0       	breq	.+56     	; 0x2770 <__fixunssfsi+0x4c>
    2738:	66 0f       	add	r22, r22
    273a:	77 1f       	adc	r23, r23
    273c:	88 1f       	adc	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	1a f0       	brmi	.+6      	; 0x2748 <__fixunssfsi+0x24>
    2742:	ba 95       	dec	r27
    2744:	c9 f7       	brne	.-14     	; 0x2738 <__fixunssfsi+0x14>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <__fixunssfsi+0x4c>
    2748:	b1 30       	cpi	r27, 0x01	; 1
    274a:	91 f0       	breq	.+36     	; 0x2770 <__fixunssfsi+0x4c>
    274c:	0e 94 20 14 	call	0x2840	; 0x2840 <__fp_zero>
    2750:	b1 e0       	ldi	r27, 0x01	; 1
    2752:	08 95       	ret
    2754:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_zero>
    2758:	67 2f       	mov	r22, r23
    275a:	78 2f       	mov	r23, r24
    275c:	88 27       	eor	r24, r24
    275e:	b8 5f       	subi	r27, 0xF8	; 248
    2760:	39 f0       	breq	.+14     	; 0x2770 <__fixunssfsi+0x4c>
    2762:	b9 3f       	cpi	r27, 0xF9	; 249
    2764:	cc f3       	brlt	.-14     	; 0x2758 <__fixunssfsi+0x34>
    2766:	86 95       	lsr	r24
    2768:	77 95       	ror	r23
    276a:	67 95       	ror	r22
    276c:	b3 95       	inc	r27
    276e:	d9 f7       	brne	.-10     	; 0x2766 <__fixunssfsi+0x42>
    2770:	3e f4       	brtc	.+14     	; 0x2780 <__fixunssfsi+0x5c>
    2772:	90 95       	com	r25
    2774:	80 95       	com	r24
    2776:	70 95       	com	r23
    2778:	61 95       	neg	r22
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	8f 4f       	sbci	r24, 0xFF	; 255
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	08 95       	ret

00002782 <__floatunsisf>:
    2782:	e8 94       	clt
    2784:	09 c0       	rjmp	.+18     	; 0x2798 <__floatsisf+0x12>

00002786 <__floatsisf>:
    2786:	97 fb       	bst	r25, 7
    2788:	3e f4       	brtc	.+14     	; 0x2798 <__floatsisf+0x12>
    278a:	90 95       	com	r25
    278c:	80 95       	com	r24
    278e:	70 95       	com	r23
    2790:	61 95       	neg	r22
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	8f 4f       	sbci	r24, 0xFF	; 255
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	99 23       	and	r25, r25
    279a:	a9 f0       	breq	.+42     	; 0x27c6 <__floatsisf+0x40>
    279c:	f9 2f       	mov	r31, r25
    279e:	96 e9       	ldi	r25, 0x96	; 150
    27a0:	bb 27       	eor	r27, r27
    27a2:	93 95       	inc	r25
    27a4:	f6 95       	lsr	r31
    27a6:	87 95       	ror	r24
    27a8:	77 95       	ror	r23
    27aa:	67 95       	ror	r22
    27ac:	b7 95       	ror	r27
    27ae:	f1 11       	cpse	r31, r1
    27b0:	f8 cf       	rjmp	.-16     	; 0x27a2 <__floatsisf+0x1c>
    27b2:	fa f4       	brpl	.+62     	; 0x27f2 <__floatsisf+0x6c>
    27b4:	bb 0f       	add	r27, r27
    27b6:	11 f4       	brne	.+4      	; 0x27bc <__floatsisf+0x36>
    27b8:	60 ff       	sbrs	r22, 0
    27ba:	1b c0       	rjmp	.+54     	; 0x27f2 <__floatsisf+0x6c>
    27bc:	6f 5f       	subi	r22, 0xFF	; 255
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	8f 4f       	sbci	r24, 0xFF	; 255
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	16 c0       	rjmp	.+44     	; 0x27f2 <__floatsisf+0x6c>
    27c6:	88 23       	and	r24, r24
    27c8:	11 f0       	breq	.+4      	; 0x27ce <__floatsisf+0x48>
    27ca:	96 e9       	ldi	r25, 0x96	; 150
    27cc:	11 c0       	rjmp	.+34     	; 0x27f0 <__floatsisf+0x6a>
    27ce:	77 23       	and	r23, r23
    27d0:	21 f0       	breq	.+8      	; 0x27da <__floatsisf+0x54>
    27d2:	9e e8       	ldi	r25, 0x8E	; 142
    27d4:	87 2f       	mov	r24, r23
    27d6:	76 2f       	mov	r23, r22
    27d8:	05 c0       	rjmp	.+10     	; 0x27e4 <__floatsisf+0x5e>
    27da:	66 23       	and	r22, r22
    27dc:	71 f0       	breq	.+28     	; 0x27fa <__floatsisf+0x74>
    27de:	96 e8       	ldi	r25, 0x86	; 134
    27e0:	86 2f       	mov	r24, r22
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	2a f0       	brmi	.+10     	; 0x27f2 <__floatsisf+0x6c>
    27e8:	9a 95       	dec	r25
    27ea:	66 0f       	add	r22, r22
    27ec:	77 1f       	adc	r23, r23
    27ee:	88 1f       	adc	r24, r24
    27f0:	da f7       	brpl	.-10     	; 0x27e8 <__floatsisf+0x62>
    27f2:	88 0f       	add	r24, r24
    27f4:	96 95       	lsr	r25
    27f6:	87 95       	ror	r24
    27f8:	97 f9       	bld	r25, 7
    27fa:	08 95       	ret

000027fc <__fp_split3>:
    27fc:	57 fd       	sbrc	r21, 7
    27fe:	90 58       	subi	r25, 0x80	; 128
    2800:	44 0f       	add	r20, r20
    2802:	55 1f       	adc	r21, r21
    2804:	59 f0       	breq	.+22     	; 0x281c <__fp_splitA+0x10>
    2806:	5f 3f       	cpi	r21, 0xFF	; 255
    2808:	71 f0       	breq	.+28     	; 0x2826 <__fp_splitA+0x1a>
    280a:	47 95       	ror	r20

0000280c <__fp_splitA>:
    280c:	88 0f       	add	r24, r24
    280e:	97 fb       	bst	r25, 7
    2810:	99 1f       	adc	r25, r25
    2812:	61 f0       	breq	.+24     	; 0x282c <__fp_splitA+0x20>
    2814:	9f 3f       	cpi	r25, 0xFF	; 255
    2816:	79 f0       	breq	.+30     	; 0x2836 <__fp_splitA+0x2a>
    2818:	87 95       	ror	r24
    281a:	08 95       	ret
    281c:	12 16       	cp	r1, r18
    281e:	13 06       	cpc	r1, r19
    2820:	14 06       	cpc	r1, r20
    2822:	55 1f       	adc	r21, r21
    2824:	f2 cf       	rjmp	.-28     	; 0x280a <__fp_split3+0xe>
    2826:	46 95       	lsr	r20
    2828:	f1 df       	rcall	.-30     	; 0x280c <__fp_splitA>
    282a:	08 c0       	rjmp	.+16     	; 0x283c <__fp_splitA+0x30>
    282c:	16 16       	cp	r1, r22
    282e:	17 06       	cpc	r1, r23
    2830:	18 06       	cpc	r1, r24
    2832:	99 1f       	adc	r25, r25
    2834:	f1 cf       	rjmp	.-30     	; 0x2818 <__fp_splitA+0xc>
    2836:	86 95       	lsr	r24
    2838:	71 05       	cpc	r23, r1
    283a:	61 05       	cpc	r22, r1
    283c:	08 94       	sec
    283e:	08 95       	ret

00002840 <__fp_zero>:
    2840:	e8 94       	clt

00002842 <__fp_szero>:
    2842:	bb 27       	eor	r27, r27
    2844:	66 27       	eor	r22, r22
    2846:	77 27       	eor	r23, r23
    2848:	cb 01       	movw	r24, r22
    284a:	97 f9       	bld	r25, 7
    284c:	08 95       	ret

0000284e <__mulsf3>:
    284e:	0e 94 3a 14 	call	0x2874	; 0x2874 <__mulsf3x>
    2852:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__fp_round>
    2856:	0e 94 9d 14 	call	0x293a	; 0x293a <__fp_pscA>
    285a:	38 f0       	brcs	.+14     	; 0x286a <__mulsf3+0x1c>
    285c:	0e 94 a4 14 	call	0x2948	; 0x2948 <__fp_pscB>
    2860:	20 f0       	brcs	.+8      	; 0x286a <__mulsf3+0x1c>
    2862:	95 23       	and	r25, r21
    2864:	11 f0       	breq	.+4      	; 0x286a <__mulsf3+0x1c>
    2866:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_inf>
    286a:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__fp_nan>
    286e:	11 24       	eor	r1, r1
    2870:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_szero>

00002874 <__mulsf3x>:
    2874:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fp_split3>
    2878:	70 f3       	brcs	.-36     	; 0x2856 <__mulsf3+0x8>

0000287a <__mulsf3_pse>:
    287a:	95 9f       	mul	r25, r21
    287c:	c1 f3       	breq	.-16     	; 0x286e <__mulsf3+0x20>
    287e:	95 0f       	add	r25, r21
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	55 1f       	adc	r21, r21
    2884:	62 9f       	mul	r22, r18
    2886:	f0 01       	movw	r30, r0
    2888:	72 9f       	mul	r23, r18
    288a:	bb 27       	eor	r27, r27
    288c:	f0 0d       	add	r31, r0
    288e:	b1 1d       	adc	r27, r1
    2890:	63 9f       	mul	r22, r19
    2892:	aa 27       	eor	r26, r26
    2894:	f0 0d       	add	r31, r0
    2896:	b1 1d       	adc	r27, r1
    2898:	aa 1f       	adc	r26, r26
    289a:	64 9f       	mul	r22, r20
    289c:	66 27       	eor	r22, r22
    289e:	b0 0d       	add	r27, r0
    28a0:	a1 1d       	adc	r26, r1
    28a2:	66 1f       	adc	r22, r22
    28a4:	82 9f       	mul	r24, r18
    28a6:	22 27       	eor	r18, r18
    28a8:	b0 0d       	add	r27, r0
    28aa:	a1 1d       	adc	r26, r1
    28ac:	62 1f       	adc	r22, r18
    28ae:	73 9f       	mul	r23, r19
    28b0:	b0 0d       	add	r27, r0
    28b2:	a1 1d       	adc	r26, r1
    28b4:	62 1f       	adc	r22, r18
    28b6:	83 9f       	mul	r24, r19
    28b8:	a0 0d       	add	r26, r0
    28ba:	61 1d       	adc	r22, r1
    28bc:	22 1f       	adc	r18, r18
    28be:	74 9f       	mul	r23, r20
    28c0:	33 27       	eor	r19, r19
    28c2:	a0 0d       	add	r26, r0
    28c4:	61 1d       	adc	r22, r1
    28c6:	23 1f       	adc	r18, r19
    28c8:	84 9f       	mul	r24, r20
    28ca:	60 0d       	add	r22, r0
    28cc:	21 1d       	adc	r18, r1
    28ce:	82 2f       	mov	r24, r18
    28d0:	76 2f       	mov	r23, r22
    28d2:	6a 2f       	mov	r22, r26
    28d4:	11 24       	eor	r1, r1
    28d6:	9f 57       	subi	r25, 0x7F	; 127
    28d8:	50 40       	sbci	r21, 0x00	; 0
    28da:	9a f0       	brmi	.+38     	; 0x2902 <__mulsf3_pse+0x88>
    28dc:	f1 f0       	breq	.+60     	; 0x291a <__mulsf3_pse+0xa0>
    28de:	88 23       	and	r24, r24
    28e0:	4a f0       	brmi	.+18     	; 0x28f4 <__mulsf3_pse+0x7a>
    28e2:	ee 0f       	add	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	bb 1f       	adc	r27, r27
    28e8:	66 1f       	adc	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	88 1f       	adc	r24, r24
    28ee:	91 50       	subi	r25, 0x01	; 1
    28f0:	50 40       	sbci	r21, 0x00	; 0
    28f2:	a9 f7       	brne	.-22     	; 0x28de <__mulsf3_pse+0x64>
    28f4:	9e 3f       	cpi	r25, 0xFE	; 254
    28f6:	51 05       	cpc	r21, r1
    28f8:	80 f0       	brcs	.+32     	; 0x291a <__mulsf3_pse+0xa0>
    28fa:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_inf>
    28fe:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_szero>
    2902:	5f 3f       	cpi	r21, 0xFF	; 255
    2904:	e4 f3       	brlt	.-8      	; 0x28fe <__mulsf3_pse+0x84>
    2906:	98 3e       	cpi	r25, 0xE8	; 232
    2908:	d4 f3       	brlt	.-12     	; 0x28fe <__mulsf3_pse+0x84>
    290a:	86 95       	lsr	r24
    290c:	77 95       	ror	r23
    290e:	67 95       	ror	r22
    2910:	b7 95       	ror	r27
    2912:	f7 95       	ror	r31
    2914:	e7 95       	ror	r30
    2916:	9f 5f       	subi	r25, 0xFF	; 255
    2918:	c1 f7       	brne	.-16     	; 0x290a <__mulsf3_pse+0x90>
    291a:	fe 2b       	or	r31, r30
    291c:	88 0f       	add	r24, r24
    291e:	91 1d       	adc	r25, r1
    2920:	96 95       	lsr	r25
    2922:	87 95       	ror	r24
    2924:	97 f9       	bld	r25, 7
    2926:	08 95       	ret

00002928 <__fp_inf>:
    2928:	97 f9       	bld	r25, 7
    292a:	9f 67       	ori	r25, 0x7F	; 127
    292c:	80 e8       	ldi	r24, 0x80	; 128
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	08 95       	ret

00002934 <__fp_nan>:
    2934:	9f ef       	ldi	r25, 0xFF	; 255
    2936:	80 ec       	ldi	r24, 0xC0	; 192
    2938:	08 95       	ret

0000293a <__fp_pscA>:
    293a:	00 24       	eor	r0, r0
    293c:	0a 94       	dec	r0
    293e:	16 16       	cp	r1, r22
    2940:	17 06       	cpc	r1, r23
    2942:	18 06       	cpc	r1, r24
    2944:	09 06       	cpc	r0, r25
    2946:	08 95       	ret

00002948 <__fp_pscB>:
    2948:	00 24       	eor	r0, r0
    294a:	0a 94       	dec	r0
    294c:	12 16       	cp	r1, r18
    294e:	13 06       	cpc	r1, r19
    2950:	14 06       	cpc	r1, r20
    2952:	05 06       	cpc	r0, r21
    2954:	08 95       	ret

00002956 <__fp_round>:
    2956:	09 2e       	mov	r0, r25
    2958:	03 94       	inc	r0
    295a:	00 0c       	add	r0, r0
    295c:	11 f4       	brne	.+4      	; 0x2962 <__fp_round+0xc>
    295e:	88 23       	and	r24, r24
    2960:	52 f0       	brmi	.+20     	; 0x2976 <__fp_round+0x20>
    2962:	bb 0f       	add	r27, r27
    2964:	40 f4       	brcc	.+16     	; 0x2976 <__fp_round+0x20>
    2966:	bf 2b       	or	r27, r31
    2968:	11 f4       	brne	.+4      	; 0x296e <__fp_round+0x18>
    296a:	60 ff       	sbrs	r22, 0
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <__fp_round+0x20>
    296e:	6f 5f       	subi	r22, 0xFF	; 255
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	8f 4f       	sbci	r24, 0xFF	; 255
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	08 95       	ret

00002978 <__cxa_pure_virtual>:
    2978:	0e 94 06 2b 	call	0x560c	; 0x560c <abort>

0000297c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    297c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    297e:	91 8d       	ldd	r25, Z+25	; 0x19
    2980:	22 8d       	ldd	r18, Z+26	; 0x1a
    2982:	89 2f       	mov	r24, r25
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	80 5c       	subi	r24, 0xC0	; 192
    2988:	9f 4f       	sbci	r25, 0xFF	; 255
    298a:	82 1b       	sub	r24, r18
    298c:	91 09       	sbc	r25, r1
}
    298e:	8f 73       	andi	r24, 0x3F	; 63
    2990:	99 27       	eor	r25, r25
    2992:	08 95       	ret

00002994 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2994:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2996:	91 8d       	ldd	r25, Z+25	; 0x19
    2998:	82 8d       	ldd	r24, Z+26	; 0x1a
    299a:	98 17       	cp	r25, r24
    299c:	31 f0       	breq	.+12     	; 0x29aa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    299e:	82 8d       	ldd	r24, Z+26	; 0x1a
    29a0:	e8 0f       	add	r30, r24
    29a2:	f1 1d       	adc	r31, r1
    29a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    29ae:	08 95       	ret

000029b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    29b0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    29b2:	91 8d       	ldd	r25, Z+25	; 0x19
    29b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    29b6:	98 17       	cp	r25, r24
    29b8:	61 f0       	breq	.+24     	; 0x29d2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    29ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    29bc:	df 01       	movw	r26, r30
    29be:	a8 0f       	add	r26, r24
    29c0:	b1 1d       	adc	r27, r1
    29c2:	5d 96       	adiw	r26, 0x1d	; 29
    29c4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    29c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    29c8:	9f 5f       	subi	r25, 0xFF	; 255
    29ca:	9f 73       	andi	r25, 0x3F	; 63
    29cc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    29d2:	8f ef       	ldi	r24, 0xFF	; 255
    29d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    29d6:	08 95       	ret

000029d8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    29d8:	81 e4       	ldi	r24, 0x41	; 65
    29da:	96 e1       	ldi	r25, 0x16	; 22
    29dc:	89 2b       	or	r24, r25
    29de:	49 f0       	breq	.+18     	; 0x29f2 <_Z14serialEventRunv+0x1a>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	89 2b       	or	r24, r25
    29e6:	29 f0       	breq	.+10     	; 0x29f2 <_Z14serialEventRunv+0x1a>
    29e8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_Z17Serial0_availablev>
    29ec:	81 11       	cpse	r24, r1
    29ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    29f2:	08 95       	ret

000029f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    29f4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    29f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    29f8:	df 01       	movw	r26, r30
    29fa:	a8 0f       	add	r26, r24
    29fc:	b1 1d       	adc	r27, r1
    29fe:	a3 5a       	subi	r26, 0xA3	; 163
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2a04:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	8f 73       	andi	r24, 0x3F	; 63
    2a0c:	99 27       	eor	r25, r25
    2a0e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2a10:	a6 89       	ldd	r26, Z+22	; 0x16
    2a12:	b7 89       	ldd	r27, Z+23	; 0x17
    2a14:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2a16:	a0 89       	ldd	r26, Z+16	; 0x10
    2a18:	b1 89       	ldd	r27, Z+17	; 0x11
    2a1a:	8c 91       	ld	r24, X
    2a1c:	80 64       	ori	r24, 0x40	; 64
    2a1e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2a20:	93 8d       	ldd	r25, Z+27	; 0x1b
    2a22:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a24:	98 13       	cpse	r25, r24
    2a26:	06 c0       	rjmp	.+12     	; 0x2a34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2a28:	02 88       	ldd	r0, Z+18	; 0x12
    2a2a:	f3 89       	ldd	r31, Z+19	; 0x13
    2a2c:	e0 2d       	mov	r30, r0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8f 7d       	andi	r24, 0xDF	; 223
    2a32:	80 83       	st	Z, r24
    2a34:	08 95       	ret

00002a36 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	ec 01       	movw	r28, r24
  _written = true;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2a48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a4c:	98 13       	cpse	r25, r24
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <_ZN14HardwareSerial5writeEh+0x24>
    2a50:	e8 89       	ldd	r30, Y+16	; 0x10
    2a52:	f9 89       	ldd	r31, Y+17	; 0x11
    2a54:	80 81       	ld	r24, Z
    2a56:	85 fd       	sbrc	r24, 5
    2a58:	24 c0       	rjmp	.+72     	; 0x2aa2 <_ZN14HardwareSerial5writeEh+0x6c>
    2a5a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2a5c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2a5e:	10 e0       	ldi	r17, 0x00	; 0
    2a60:	0f 5f       	subi	r16, 0xFF	; 255
    2a62:	1f 4f       	sbci	r17, 0xFF	; 255
    2a64:	0f 73       	andi	r16, 0x3F	; 63
    2a66:	11 27       	eor	r17, r17
    2a68:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2a6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a6c:	e8 12       	cpse	r14, r24
    2a6e:	0c c0       	rjmp	.+24     	; 0x2a88 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	07 fc       	sbrc	r0, 7
    2a74:	fa cf       	rjmp	.-12     	; 0x2a6a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2a76:	e8 89       	ldd	r30, Y+16	; 0x10
    2a78:	f9 89       	ldd	r31, Y+17	; 0x11
    2a7a:	80 81       	ld	r24, Z
    2a7c:	85 ff       	sbrs	r24, 5
    2a7e:	f5 cf       	rjmp	.-22     	; 0x2a6a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2a80:	ce 01       	movw	r24, r28
    2a82:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2a86:	f1 cf       	rjmp	.-30     	; 0x2a6a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e8 0f       	add	r30, r24
    2a8e:	f1 1d       	adc	r31, r1
    2a90:	e3 5a       	subi	r30, 0xA3	; 163
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2a96:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2a98:	ea 89       	ldd	r30, Y+18	; 0x12
    2a9a:	fb 89       	ldd	r31, Y+19	; 0x13
    2a9c:	80 81       	ld	r24, Z
    2a9e:	80 62       	ori	r24, 0x20	; 32
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2aa2:	ee 89       	ldd	r30, Y+22	; 0x16
    2aa4:	ff 89       	ldd	r31, Y+23	; 0x17
    2aa6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2aa8:	e8 89       	ldd	r30, Y+16	; 0x10
    2aaa:	f9 89       	ldd	r31, Y+17	; 0x11
    2aac:	80 81       	ld	r24, Z
    2aae:	80 64       	ori	r24, 0x40	; 64
    2ab0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	08 95       	ret

00002ac4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2aca:	88 8d       	ldd	r24, Y+24	; 0x18
    2acc:	88 23       	and	r24, r24
    2ace:	c9 f0       	breq	.+50     	; 0x2b02 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2ad0:	ea 89       	ldd	r30, Y+18	; 0x12
    2ad2:	fb 89       	ldd	r31, Y+19	; 0x13
    2ad4:	80 81       	ld	r24, Z
    2ad6:	85 fd       	sbrc	r24, 5
    2ad8:	05 c0       	rjmp	.+10     	; 0x2ae4 <_ZN14HardwareSerial5flushEv+0x20>
    2ada:	a8 89       	ldd	r26, Y+16	; 0x10
    2adc:	b9 89       	ldd	r27, Y+17	; 0x11
    2ade:	8c 91       	ld	r24, X
    2ae0:	86 fd       	sbrc	r24, 6
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	07 fc       	sbrc	r0, 7
    2ae8:	f5 cf       	rjmp	.-22     	; 0x2ad4 <_ZN14HardwareSerial5flushEv+0x10>
    2aea:	80 81       	ld	r24, Z
    2aec:	85 ff       	sbrs	r24, 5
    2aee:	f2 cf       	rjmp	.-28     	; 0x2ad4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2af0:	a8 89       	ldd	r26, Y+16	; 0x10
    2af2:	b9 89       	ldd	r27, Y+17	; 0x11
    2af4:	8c 91       	ld	r24, X
    2af6:	85 ff       	sbrs	r24, 5
    2af8:	ed cf       	rjmp	.-38     	; 0x2ad4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2afa:	ce 01       	movw	r24, r28
    2afc:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2b00:	e7 cf       	rjmp	.-50     	; 0x2ad0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	08 95       	ret

00002b08 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	1f 93       	push	r17
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	ec 01       	movw	r28, r24
    2b18:	6a 01       	movw	r12, r20
    2b1a:	7b 01       	movw	r14, r22
    2b1c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2b1e:	e8 89       	ldd	r30, Y+16	; 0x10
    2b20:	f9 89       	ldd	r31, Y+17	; 0x11
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2b26:	41 15       	cp	r20, r1
    2b28:	51 4e       	sbci	r21, 0xE1	; 225
    2b2a:	61 05       	cpc	r22, r1
    2b2c:	71 05       	cpc	r23, r1
    2b2e:	b1 f0       	breq	.+44     	; 0x2b5c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	79 e0       	ldi	r23, 0x09	; 9
    2b34:	8d e3       	ldi	r24, 0x3D	; 61
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a7 01       	movw	r20, r14
    2b3a:	96 01       	movw	r18, r12
    2b3c:	0e 94 c4 28 	call	0x5188	; 0x5188 <__udivmodsi4>
    2b40:	da 01       	movw	r26, r20
    2b42:	c9 01       	movw	r24, r18
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	a1 09       	sbc	r26, r1
    2b48:	b1 09       	sbc	r27, r1
    2b4a:	b6 95       	lsr	r27
    2b4c:	a7 95       	ror	r26
    2b4e:	97 95       	ror	r25
    2b50:	87 95       	ror	r24
    2b52:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2b54:	21 15       	cp	r18, r1
    2b56:	80 e1       	ldi	r24, 0x10	; 16
    2b58:	38 07       	cpc	r19, r24
    2b5a:	a8 f0       	brcs	.+42     	; 0x2b86 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2b5c:	e8 89       	ldd	r30, Y+16	; 0x10
    2b5e:	f9 89       	ldd	r31, Y+17	; 0x11
    2b60:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2b62:	60 e8       	ldi	r22, 0x80	; 128
    2b64:	74 e8       	ldi	r23, 0x84	; 132
    2b66:	8e e1       	ldi	r24, 0x1E	; 30
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a7 01       	movw	r20, r14
    2b6c:	96 01       	movw	r18, r12
    2b6e:	0e 94 c4 28 	call	0x5188	; 0x5188 <__udivmodsi4>
    2b72:	da 01       	movw	r26, r20
    2b74:	c9 01       	movw	r24, r18
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	a1 09       	sbc	r26, r1
    2b7a:	b1 09       	sbc	r27, r1
    2b7c:	b6 95       	lsr	r27
    2b7e:	a7 95       	ror	r26
    2b80:	97 95       	ror	r25
    2b82:	87 95       	ror	r24
    2b84:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2b86:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b88:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b8a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2b8c:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b8e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b90:	20 83       	st	Z, r18

  _written = false;
    2b92:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2b94:	ec 89       	ldd	r30, Y+20	; 0x14
    2b96:	fd 89       	ldd	r31, Y+21	; 0x15
    2b98:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2b9a:	ea 89       	ldd	r30, Y+18	; 0x12
    2b9c:	fb 89       	ldd	r31, Y+19	; 0x13
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 61       	ori	r24, 0x10	; 16
    2ba2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2ba4:	ea 89       	ldd	r30, Y+18	; 0x12
    2ba6:	fb 89       	ldd	r31, Y+19	; 0x13
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 60       	ori	r24, 0x08	; 8
    2bac:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2bae:	ea 89       	ldd	r30, Y+18	; 0x12
    2bb0:	fb 89       	ldd	r31, Y+19	; 0x13
    2bb2:	80 81       	ld	r24, Z
    2bb4:	80 68       	ori	r24, 0x80	; 128
    2bb6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2bb8:	ea 89       	ldd	r30, Y+18	; 0x12
    2bba:	fb 89       	ldd	r31, Y+19	; 0x13
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8f 7d       	andi	r24, 0xDF	; 223
    2bc0:	80 83       	st	Z, r24
}
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	08 95       	ret

00002bd2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2bd2:	1f 92       	push	r1
    2bd4:	0f 92       	push	r0
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	0f 92       	push	r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	2f 93       	push	r18
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	ef 93       	push	r30
    2be4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2be6:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <Serial+0x10>
    2bea:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <Serial+0x11>
    2bee:	80 81       	ld	r24, Z
    2bf0:	e0 91 75 07 	lds	r30, 0x0775	; 0x800775 <Serial+0x16>
    2bf4:	f0 91 76 07 	lds	r31, 0x0776	; 0x800776 <Serial+0x17>
    2bf8:	82 fd       	sbrc	r24, 2
    2bfa:	12 c0       	rjmp	.+36     	; 0x2c20 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2bfc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2bfe:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <Serial+0x19>
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2c06:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <Serial+0x1a>
    2c0a:	82 17       	cp	r24, r18
    2c0c:	51 f0       	breq	.+20     	; 0x2c22 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2c0e:	e0 91 78 07 	lds	r30, 0x0778	; 0x800778 <Serial+0x19>
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	e1 5a       	subi	r30, 0xA1	; 161
    2c16:	f8 4f       	sbci	r31, 0xF8	; 248
    2c18:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2c1a:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <Serial+0x19>
    2c1e:	01 c0       	rjmp	.+2      	; 0x2c22 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2c20:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2c22:	ff 91       	pop	r31
    2c24:	ef 91       	pop	r30
    2c26:	9f 91       	pop	r25
    2c28:	8f 91       	pop	r24
    2c2a:	2f 91       	pop	r18
    2c2c:	0f 90       	pop	r0
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2c58:	8f e5       	ldi	r24, 0x5F	; 95
    2c5a:	97 e0       	ldi	r25, 0x07	; 7
    2c5c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2c60:	ff 91       	pop	r31
    2c62:	ef 91       	pop	r30
    2c64:	bf 91       	pop	r27
    2c66:	af 91       	pop	r26
    2c68:	9f 91       	pop	r25
    2c6a:	8f 91       	pop	r24
    2c6c:	7f 91       	pop	r23
    2c6e:	6f 91       	pop	r22
    2c70:	5f 91       	pop	r21
    2c72:	4f 91       	pop	r20
    2c74:	3f 91       	pop	r19
    2c76:	2f 91       	pop	r18
    2c78:	0f 90       	pop	r0
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	0f 90       	pop	r0
    2c7e:	1f 90       	pop	r1
    2c80:	18 95       	reti

00002c82 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2c82:	8f e5       	ldi	r24, 0x5F	; 95
    2c84:	97 e0       	ldi	r25, 0x07	; 7
    2c86:	0e 94 be 14 	call	0x297c	; 0x297c <_ZN14HardwareSerial9availableEv>
    2c8a:	21 e0       	ldi	r18, 0x01	; 1
    2c8c:	89 2b       	or	r24, r25
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <_Z17Serial0_availablev+0x10>
    2c90:	20 e0       	ldi	r18, 0x00	; 0
}
    2c92:	82 2f       	mov	r24, r18
    2c94:	08 95       	ret

00002c96 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2c96:	ef e5       	ldi	r30, 0x5F	; 95
    2c98:	f7 e0       	ldi	r31, 0x07	; 7
    2c9a:	13 82       	std	Z+3, r1	; 0x03
    2c9c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2c9e:	88 ee       	ldi	r24, 0xE8	; 232
    2ca0:	93 e0       	ldi	r25, 0x03	; 3
    2ca2:	a0 e0       	ldi	r26, 0x00	; 0
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	84 83       	std	Z+4, r24	; 0x04
    2ca8:	95 83       	std	Z+5, r25	; 0x05
    2caa:	a6 83       	std	Z+6, r26	; 0x06
    2cac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2cae:	84 ea       	ldi	r24, 0xA4	; 164
    2cb0:	92 e0       	ldi	r25, 0x02	; 2
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
    2cb6:	85 ec       	ldi	r24, 0xC5	; 197
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	95 87       	std	Z+13, r25	; 0x0d
    2cbc:	84 87       	std	Z+12, r24	; 0x0c
    2cbe:	84 ec       	ldi	r24, 0xC4	; 196
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	97 87       	std	Z+15, r25	; 0x0f
    2cc4:	86 87       	std	Z+14, r24	; 0x0e
    2cc6:	80 ec       	ldi	r24, 0xC0	; 192
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	91 8b       	std	Z+17, r25	; 0x11
    2ccc:	80 8b       	std	Z+16, r24	; 0x10
    2cce:	81 ec       	ldi	r24, 0xC1	; 193
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	93 8b       	std	Z+19, r25	; 0x13
    2cd4:	82 8b       	std	Z+18, r24	; 0x12
    2cd6:	82 ec       	ldi	r24, 0xC2	; 194
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	95 8b       	std	Z+21, r25	; 0x15
    2cdc:	84 8b       	std	Z+20, r24	; 0x14
    2cde:	86 ec       	ldi	r24, 0xC6	; 198
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	97 8b       	std	Z+23, r25	; 0x17
    2ce4:	86 8b       	std	Z+22, r24	; 0x16
    2ce6:	11 8e       	std	Z+25, r1	; 0x19
    2ce8:	12 8e       	std	Z+26, r1	; 0x1a
    2cea:	13 8e       	std	Z+27, r1	; 0x1b
    2cec:	14 8e       	std	Z+28, r1	; 0x1c
    2cee:	08 95       	ret

00002cf0 <initVariant>:
    2cf0:	08 95       	ret

00002cf2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2cf2:	0e 94 c6 19 	call	0x338c	; 0x338c <init>

	initVariant();
    2cf6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2cfa:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2cfe:	cc ee       	ldi	r28, 0xEC	; 236
    2d00:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2d02:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <loop>
		if (serialEventRun) serialEventRun();
    2d06:	20 97       	sbiw	r28, 0x00	; 0
    2d08:	e1 f3       	breq	.-8      	; 0x2d02 <main+0x10>
    2d0a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z14serialEventRunv>
    2d0e:	f9 cf       	rjmp	.-14     	; 0x2d02 <main+0x10>

00002d10 <_Znwj>:
    2d10:	0c 94 1f 29 	jmp	0x523e	; 0x523e <malloc>

00002d14 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	6c 01       	movw	r12, r24
    2d26:	7a 01       	movw	r14, r20
    2d28:	8b 01       	movw	r16, r22
    2d2a:	c0 e0       	ldi	r28, 0x00	; 0
    2d2c:	d0 e0       	ldi	r29, 0x00	; 0
    2d2e:	ce 15       	cp	r28, r14
    2d30:	df 05       	cpc	r29, r15
    2d32:	81 f0       	breq	.+32     	; 0x2d54 <_ZN5Print5writeEPKhj+0x40>
    2d34:	d8 01       	movw	r26, r16
    2d36:	6d 91       	ld	r22, X+
    2d38:	8d 01       	movw	r16, r26
    2d3a:	d6 01       	movw	r26, r12
    2d3c:	ed 91       	ld	r30, X+
    2d3e:	fc 91       	ld	r31, X
    2d40:	01 90       	ld	r0, Z+
    2d42:	f0 81       	ld	r31, Z
    2d44:	e0 2d       	mov	r30, r0
    2d46:	c6 01       	movw	r24, r12
    2d48:	09 95       	icall
    2d4a:	89 2b       	or	r24, r25
    2d4c:	11 f0       	breq	.+4      	; 0x2d52 <_ZN5Print5writeEPKhj+0x3e>
    2d4e:	21 96       	adiw	r28, 0x01	; 1
    2d50:	ee cf       	rjmp	.-36     	; 0x2d2e <_ZN5Print5writeEPKhj+0x1a>
    2d52:	7e 01       	movw	r14, r28
    2d54:	c7 01       	movw	r24, r14
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	df 90       	pop	r13
    2d64:	cf 90       	pop	r12
    2d66:	08 95       	ret

00002d68 <_ZN5Print5writeEPKc>:
    2d68:	61 15       	cp	r22, r1
    2d6a:	71 05       	cpc	r23, r1
    2d6c:	79 f0       	breq	.+30     	; 0x2d8c <_ZN5Print5writeEPKc+0x24>
    2d6e:	fb 01       	movw	r30, r22
    2d70:	01 90       	ld	r0, Z+
    2d72:	00 20       	and	r0, r0
    2d74:	e9 f7       	brne	.-6      	; 0x2d70 <_ZN5Print5writeEPKc+0x8>
    2d76:	31 97       	sbiw	r30, 0x01	; 1
    2d78:	af 01       	movw	r20, r30
    2d7a:	46 1b       	sub	r20, r22
    2d7c:	57 0b       	sbc	r21, r23
    2d7e:	dc 01       	movw	r26, r24
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	02 80       	ldd	r0, Z+2	; 0x02
    2d86:	f3 81       	ldd	r31, Z+3	; 0x03
    2d88:	e0 2d       	mov	r30, r0
    2d8a:	09 94       	ijmp
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	08 95       	ret

00002d92 <_ZN5Print5printEPK19__FlashStringHelper>:
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	8c 01       	movw	r16, r24
    2da0:	7b 01       	movw	r14, r22
    2da2:	c0 e0       	ldi	r28, 0x00	; 0
    2da4:	d0 e0       	ldi	r29, 0x00	; 0
    2da6:	f7 01       	movw	r30, r14
    2da8:	ec 0f       	add	r30, r28
    2daa:	fd 1f       	adc	r31, r29
    2dac:	64 91       	lpm	r22, Z
    2dae:	66 23       	and	r22, r22
    2db0:	61 f0       	breq	.+24     	; 0x2dca <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2db2:	d8 01       	movw	r26, r16
    2db4:	ed 91       	ld	r30, X+
    2db6:	fc 91       	ld	r31, X
    2db8:	01 90       	ld	r0, Z+
    2dba:	f0 81       	ld	r31, Z
    2dbc:	e0 2d       	mov	r30, r0
    2dbe:	c8 01       	movw	r24, r16
    2dc0:	09 95       	icall
    2dc2:	89 2b       	or	r24, r25
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2dc6:	21 96       	adiw	r28, 0x01	; 1
    2dc8:	ee cf       	rjmp	.-36     	; 0x2da6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2dca:	ce 01       	movw	r24, r28
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16
    2dd4:	ff 90       	pop	r15
    2dd6:	ef 90       	pop	r14
    2dd8:	08 95       	ret

00002dda <_ZN5Print5printEPKc>:
    2dda:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN5Print5writeEPKc>

00002dde <_ZN5Print5printEc>:
    2dde:	dc 01       	movw	r26, r24
    2de0:	ed 91       	ld	r30, X+
    2de2:	fc 91       	ld	r31, X
    2de4:	01 90       	ld	r0, Z+
    2de6:	f0 81       	ld	r31, Z
    2de8:	e0 2d       	mov	r30, r0
    2dea:	09 94       	ijmp

00002dec <_ZN5Print7printlnEv>:
    2dec:	60 eb       	ldi	r22, 0xB0	; 176
    2dee:	72 e0       	ldi	r23, 0x02	; 2
    2df0:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN5Print5writeEPKc>

00002df4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	ec 01       	movw	r28, r24
    2dfe:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    2e02:	8c 01       	movw	r16, r24
    2e04:	ce 01       	movw	r24, r28
    2e06:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    2e0a:	80 0f       	add	r24, r16
    2e0c:	91 1f       	adc	r25, r17
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <_ZN5Print7printlnEPKc>:
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	ec 01       	movw	r28, r24
    2e22:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN5Print5writeEPKc>
    2e26:	8c 01       	movw	r16, r24
    2e28:	ce 01       	movw	r24, r28
    2e2a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    2e2e:	80 0f       	add	r24, r16
    2e30:	91 1f       	adc	r25, r17
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	1f 91       	pop	r17
    2e38:	0f 91       	pop	r16
    2e3a:	08 95       	ret

00002e3c <_ZN5Print7printlnEc>:
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	ec 01       	movw	r28, r24
    2e46:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN5Print5printEc>
    2e4a:	8c 01       	movw	r16, r24
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    2e52:	80 0f       	add	r24, r16
    2e54:	91 1f       	adc	r25, r17
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	08 95       	ret

00002e60 <_ZN5Print11printNumberEmh>:
    2e60:	8f 92       	push	r8
    2e62:	9f 92       	push	r9
    2e64:	af 92       	push	r10
    2e66:	bf 92       	push	r11
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
    2e6e:	1f 93       	push	r17
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	a1 97       	sbiw	r28, 0x21	; 33
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	7c 01       	movw	r14, r24
    2e86:	fa 01       	movw	r30, r20
    2e88:	cb 01       	movw	r24, r22
    2e8a:	19 a2       	std	Y+33, r1	; 0x21
    2e8c:	22 30       	cpi	r18, 0x02	; 2
    2e8e:	08 f4       	brcc	.+2      	; 0x2e92 <_ZN5Print11printNumberEmh+0x32>
    2e90:	2a e0       	ldi	r18, 0x0A	; 10
    2e92:	8e 01       	movw	r16, r28
    2e94:	0f 5d       	subi	r16, 0xDF	; 223
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	82 2e       	mov	r8, r18
    2e9a:	91 2c       	mov	r9, r1
    2e9c:	a1 2c       	mov	r10, r1
    2e9e:	b1 2c       	mov	r11, r1
    2ea0:	bf 01       	movw	r22, r30
    2ea2:	a5 01       	movw	r20, r10
    2ea4:	94 01       	movw	r18, r8
    2ea6:	0e 94 c4 28 	call	0x5188	; 0x5188 <__udivmodsi4>
    2eaa:	f9 01       	movw	r30, r18
    2eac:	ca 01       	movw	r24, r20
    2eae:	01 50       	subi	r16, 0x01	; 1
    2eb0:	11 09       	sbc	r17, r1
    2eb2:	6a 30       	cpi	r22, 0x0A	; 10
    2eb4:	10 f4       	brcc	.+4      	; 0x2eba <_ZN5Print11printNumberEmh+0x5a>
    2eb6:	60 5d       	subi	r22, 0xD0	; 208
    2eb8:	01 c0       	rjmp	.+2      	; 0x2ebc <_ZN5Print11printNumberEmh+0x5c>
    2eba:	69 5c       	subi	r22, 0xC9	; 201
    2ebc:	d8 01       	movw	r26, r16
    2ebe:	6c 93       	st	X, r22
    2ec0:	23 2b       	or	r18, r19
    2ec2:	24 2b       	or	r18, r20
    2ec4:	25 2b       	or	r18, r21
    2ec6:	61 f7       	brne	.-40     	; 0x2ea0 <_ZN5Print11printNumberEmh+0x40>
    2ec8:	b8 01       	movw	r22, r16
    2eca:	c7 01       	movw	r24, r14
    2ecc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN5Print5writeEPKc>
    2ed0:	a1 96       	adiw	r28, 0x21	; 33
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	ff 90       	pop	r15
    2ee6:	ef 90       	pop	r14
    2ee8:	bf 90       	pop	r11
    2eea:	af 90       	pop	r10
    2eec:	9f 90       	pop	r9
    2eee:	8f 90       	pop	r8
    2ef0:	08 95       	ret

00002ef2 <_ZN5Print5printEmi>:
    2ef2:	21 15       	cp	r18, r1
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	41 f4       	brne	.+16     	; 0x2f08 <_ZN5Print5printEmi+0x16>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	ed 91       	ld	r30, X+
    2efc:	fc 91       	ld	r31, X
    2efe:	01 90       	ld	r0, Z+
    2f00:	f0 81       	ld	r31, Z
    2f02:	e0 2d       	mov	r30, r0
    2f04:	64 2f       	mov	r22, r20
    2f06:	09 94       	ijmp
    2f08:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <_ZN5Print11printNumberEmh>

00002f0c <_ZN5Print5printEhi>:
    2f0c:	9a 01       	movw	r18, r20
    2f0e:	46 2f       	mov	r20, r22
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <_ZN5Print5printEmi>

00002f1a <_ZN5Print7printlnEhi>:
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	ec 01       	movw	r28, r24
    2f24:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print5printEhi>
    2f28:	8c 01       	movw	r16, r24
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    2f30:	80 0f       	add	r24, r16
    2f32:	91 1f       	adc	r25, r17
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	08 95       	ret

00002f3e <_ZN5Print5printEji>:
    2f3e:	9a 01       	movw	r18, r20
    2f40:	ab 01       	movw	r20, r22
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <_ZN5Print5printEmi>

00002f4a <_ZN5Print7printlnEji>:
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	ec 01       	movw	r28, r24
    2f54:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <_ZN5Print5printEji>
    2f58:	8c 01       	movw	r16, r24
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    2f60:	80 0f       	add	r24, r16
    2f62:	91 1f       	adc	r25, r17
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	08 95       	ret

00002f6e <_ZN5Print7printlnEmi>:
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	ec 01       	movw	r28, r24
    2f78:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <_ZN5Print5printEmi>
    2f7c:	8c 01       	movw	r16, r24
    2f7e:	ce 01       	movw	r24, r28
    2f80:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    2f84:	80 0f       	add	r24, r16
    2f86:	91 1f       	adc	r25, r17
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	08 95       	ret

00002f92 <_ZN5Print5printEli>:
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	21 15       	cp	r18, r1
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	81 f4       	brne	.+32     	; 0x2fc8 <_ZN5Print5printEli+0x36>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	ed 91       	ld	r30, X+
    2fac:	fc 91       	ld	r31, X
    2fae:	01 90       	ld	r0, Z+
    2fb0:	f0 81       	ld	r31, Z
    2fb2:	e0 2d       	mov	r30, r0
    2fb4:	64 2f       	mov	r22, r20
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	1f 91       	pop	r17
    2fbc:	0f 91       	pop	r16
    2fbe:	ff 90       	pop	r15
    2fc0:	ef 90       	pop	r14
    2fc2:	df 90       	pop	r13
    2fc4:	cf 90       	pop	r12
    2fc6:	09 94       	ijmp
    2fc8:	2a 30       	cpi	r18, 0x0A	; 10
    2fca:	31 05       	cpc	r19, r1
    2fcc:	01 f5       	brne	.+64     	; 0x300e <_ZN5Print5printEli+0x7c>
    2fce:	77 ff       	sbrs	r23, 7
    2fd0:	1d c0       	rjmp	.+58     	; 0x300c <_ZN5Print5printEli+0x7a>
    2fd2:	6a 01       	movw	r12, r20
    2fd4:	7b 01       	movw	r14, r22
    2fd6:	ec 01       	movw	r28, r24
    2fd8:	6d e2       	ldi	r22, 0x2D	; 45
    2fda:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN5Print5printEc>
    2fde:	8c 01       	movw	r16, r24
    2fe0:	44 27       	eor	r20, r20
    2fe2:	55 27       	eor	r21, r21
    2fe4:	ba 01       	movw	r22, r20
    2fe6:	4c 19       	sub	r20, r12
    2fe8:	5d 09       	sbc	r21, r13
    2fea:	6e 09       	sbc	r22, r14
    2fec:	7f 09       	sbc	r23, r15
    2fee:	2a e0       	ldi	r18, 0x0A	; 10
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_ZN5Print11printNumberEmh>
    2ff6:	80 0f       	add	r24, r16
    2ff8:	91 1f       	adc	r25, r17
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	ff 90       	pop	r15
    3004:	ef 90       	pop	r14
    3006:	df 90       	pop	r13
    3008:	cf 90       	pop	r12
    300a:	08 95       	ret
    300c:	2a e0       	ldi	r18, 0x0A	; 10
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <_ZN5Print11printNumberEmh>

00003022 <_ZN5Print5printEii>:
    3022:	9a 01       	movw	r18, r20
    3024:	ab 01       	movw	r20, r22
    3026:	77 0f       	add	r23, r23
    3028:	66 0b       	sbc	r22, r22
    302a:	77 0b       	sbc	r23, r23
    302c:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <_ZN5Print5printEli>

00003030 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    303a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEli>
    303e:	8c 01       	movw	r16, r24
  n += println();
    3040:	ce 01       	movw	r24, r28
    3042:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
  return n;
}
    3046:	80 0f       	add	r24, r16
    3048:	91 1f       	adc	r25, r17
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	08 95       	ret

00003054 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3054:	7f 92       	push	r7
    3056:	8f 92       	push	r8
    3058:	9f 92       	push	r9
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	8c 01       	movw	r16, r24
    3070:	6a 01       	movw	r12, r20
    3072:	7b 01       	movw	r14, r22
    3074:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3076:	9a 01       	movw	r18, r20
    3078:	ab 01       	movw	r20, r22
    307a:	c7 01       	movw	r24, r14
    307c:	b6 01       	movw	r22, r12
    307e:	0e 94 ab 28 	call	0x5156	; 0x5156 <__unordsf2>
    3082:	88 23       	and	r24, r24
    3084:	19 f0       	breq	.+6      	; 0x308c <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3086:	63 eb       	ldi	r22, 0xB3	; 179
    3088:	72 e0       	ldi	r23, 0x02	; 2
    308a:	27 c0       	rjmp	.+78     	; 0x30da <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    308c:	46 01       	movw	r8, r12
    308e:	57 01       	movw	r10, r14
    3090:	e8 94       	clt
    3092:	b7 f8       	bld	r11, 7
    3094:	2f ef       	ldi	r18, 0xFF	; 255
    3096:	3f ef       	ldi	r19, 0xFF	; 255
    3098:	4f e7       	ldi	r20, 0x7F	; 127
    309a:	5f e7       	ldi	r21, 0x7F	; 127
    309c:	c5 01       	movw	r24, r10
    309e:	b4 01       	movw	r22, r8
    30a0:	0e 94 ab 28 	call	0x5156	; 0x5156 <__unordsf2>
    30a4:	81 11       	cpse	r24, r1
    30a6:	0d c0       	rjmp	.+26     	; 0x30c2 <_ZN5Print10printFloatEdh+0x6e>
    30a8:	2f ef       	ldi	r18, 0xFF	; 255
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	5f e7       	ldi	r21, 0x7F	; 127
    30b0:	c5 01       	movw	r24, r10
    30b2:	b4 01       	movw	r22, r8
    30b4:	0e 94 0b 28 	call	0x5016	; 0x5016 <__cmpsf2>
    30b8:	18 16       	cp	r1, r24
    30ba:	1c f4       	brge	.+6      	; 0x30c2 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    30bc:	67 eb       	ldi	r22, 0xB7	; 183
    30be:	72 e0       	ldi	r23, 0x02	; 2
    30c0:	0c c0       	rjmp	.+24     	; 0x30da <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    30c2:	2f ef       	ldi	r18, 0xFF	; 255
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	5f e4       	ldi	r21, 0x4F	; 79
    30ca:	c7 01       	movw	r24, r14
    30cc:	b6 01       	movw	r22, r12
    30ce:	0e 94 a6 28 	call	0x514c	; 0x514c <__gesf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	94 f4       	brge	.+36     	; 0x30fa <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    30d6:	6b eb       	ldi	r22, 0xBB	; 187
    30d8:	72 e0       	ldi	r23, 0x02	; 2
    30da:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
    30ec:	bf 90       	pop	r11
    30ee:	af 90       	pop	r10
    30f0:	9f 90       	pop	r9
    30f2:	8f 90       	pop	r8
    30f4:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    30f6:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    30fa:	2f ef       	ldi	r18, 0xFF	; 255
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	5f ec       	ldi	r21, 0xCF	; 207
    3102:	c7 01       	movw	r24, r14
    3104:	b6 01       	movw	r22, r12
    3106:	0e 94 0b 28 	call	0x5016	; 0x5016 <__cmpsf2>
    310a:	87 fd       	sbrc	r24, 7
    310c:	e4 cf       	rjmp	.-56     	; 0x30d6 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	a9 01       	movw	r20, r18
    3114:	c7 01       	movw	r24, r14
    3116:	b6 01       	movw	r22, r12
    3118:	0e 94 0b 28 	call	0x5016	; 0x5016 <__cmpsf2>
    311c:	87 ff       	sbrs	r24, 7
    311e:	0a c0       	rjmp	.+20     	; 0x3134 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3120:	6d e2       	ldi	r22, 0x2D	; 45
    3122:	c8 01       	movw	r24, r16
    3124:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN5Print5printEc>
    3128:	ec 01       	movw	r28, r24
     number = -number;
    312a:	f7 fa       	bst	r15, 7
    312c:	f0 94       	com	r15
    312e:	f7 f8       	bld	r15, 7
    3130:	f0 94       	com	r15
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3134:	c0 e0       	ldi	r28, 0x00	; 0
    3136:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3138:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3142:	7b 14       	cp	r7, r11
    3144:	41 f0       	breq	.+16     	; 0x3156 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 10 28 	call	0x5020	; 0x5020 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3152:	b3 94       	inc	r11
    3154:	f6 cf       	rjmp	.-20     	; 0x3142 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    3156:	a7 01       	movw	r20, r14
    3158:	96 01       	movw	r18, r12
    315a:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__addsf3>
    315e:	6b 01       	movw	r12, r22
    3160:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3162:	0e 94 92 13 	call	0x2724	; 0x2724 <__fixunssfsi>
    3166:	4b 01       	movw	r8, r22
    3168:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    316a:	2a e0       	ldi	r18, 0x0A	; 10
    316c:	ab 01       	movw	r20, r22
    316e:	bc 01       	movw	r22, r24
    3170:	c8 01       	movw	r24, r16
    3172:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3176:	c8 0f       	add	r28, r24
    3178:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    317a:	77 20       	and	r7, r7
    317c:	c9 f1       	breq	.+114    	; 0x31f0 <_ZN5Print10printFloatEdh+0x19c>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    317e:	c5 01       	movw	r24, r10
    3180:	b4 01       	movw	r22, r8
    3182:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatunsisf>
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	c7 01       	movw	r24, r14
    318c:	b6 01       	movw	r22, r12
    318e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__subsf3>
    3192:	6b 01       	movw	r12, r22
    3194:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3196:	6f eb       	ldi	r22, 0xBF	; 191
    3198:	72 e0       	ldi	r23, 0x02	; 2
    319a:	c8 01       	movw	r24, r16
    319c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    31a0:	c8 0f       	add	r28, r24
    31a2:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	c7 01       	movw	r24, r14
    31ae:	b6 01       	movw	r22, r12
    31b0:	0e 94 27 14 	call	0x284e	; 0x284e <__mulsf3>
    31b4:	4b 01       	movw	r8, r22
    31b6:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    31b8:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fixsfsi>
    31bc:	6b 01       	movw	r12, r22
    31be:	7c 01       	movw	r14, r24
    n += print(toPrint);
    31c0:	4a e0       	ldi	r20, 0x0A	; 10
    31c2:	50 e0       	ldi	r21, 0x00	; 0
    31c4:	c8 01       	movw	r24, r16
    31c6:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEii>
    31ca:	c8 0f       	add	r28, r24
    31cc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    31ce:	b6 01       	movw	r22, r12
    31d0:	dd 0c       	add	r13, r13
    31d2:	88 0b       	sbc	r24, r24
    31d4:	99 0b       	sbc	r25, r25
    31d6:	0e 94 c3 13 	call	0x2786	; 0x2786 <__floatsisf>
    31da:	9b 01       	movw	r18, r22
    31dc:	ac 01       	movw	r20, r24
    31de:	c5 01       	movw	r24, r10
    31e0:	b4 01       	movw	r22, r8
    31e2:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__subsf3>
    31e6:	6b 01       	movw	r12, r22
    31e8:	7c 01       	movw	r14, r24
    31ea:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    31ec:	71 10       	cpse	r7, r1
    31ee:	da cf       	rjmp	.-76     	; 0x31a4 <_ZN5Print10printFloatEdh+0x150>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    31f0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	bf 90       	pop	r11
    3204:	af 90       	pop	r10
    3206:	9f 90       	pop	r9
    3208:	8f 90       	pop	r8
    320a:	7f 90       	pop	r7
    320c:	08 95       	ret

0000320e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    320e:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <_ZN5Print10printFloatEdh>

00003212 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	cf 93       	push	r28
    3218:	df 93       	push	r29
    321a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    321c:	0e 94 2a 18 	call	0x3054	; 0x3054 <_ZN5Print10printFloatEdh>
    3220:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3222:	ce 01       	movw	r24, r28
    3224:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
  return n;
}
    3228:	80 0f       	add	r24, r16
    322a:	91 1f       	adc	r25, r17
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	08 95       	ret

00003236 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3236:	1f 92       	push	r1
    3238:	0f 92       	push	r0
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	0f 92       	push	r0
    323e:	11 24       	eor	r1, r1
    3240:	2f 93       	push	r18
    3242:	3f 93       	push	r19
    3244:	8f 93       	push	r24
    3246:	9f 93       	push	r25
    3248:	af 93       	push	r26
    324a:	bf 93       	push	r27
    324c:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <timer0_millis>
    3250:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <timer0_millis+0x1>
    3254:	a0 91 ff 07 	lds	r26, 0x07FF	; 0x8007ff <timer0_millis+0x2>
    3258:	b0 91 00 08 	lds	r27, 0x0800	; 0x800800 <timer0_millis+0x3>
    325c:	30 91 fc 07 	lds	r19, 0x07FC	; 0x8007fc <timer0_fract>
    3260:	23 e0       	ldi	r18, 0x03	; 3
    3262:	23 0f       	add	r18, r19
    3264:	2d 37       	cpi	r18, 0x7D	; 125
    3266:	20 f4       	brcc	.+8      	; 0x3270 <__vector_16+0x3a>
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	a1 1d       	adc	r26, r1
    326c:	b1 1d       	adc	r27, r1
    326e:	05 c0       	rjmp	.+10     	; 0x327a <__vector_16+0x44>
    3270:	26 e8       	ldi	r18, 0x86	; 134
    3272:	23 0f       	add	r18, r19
    3274:	02 96       	adiw	r24, 0x02	; 2
    3276:	a1 1d       	adc	r26, r1
    3278:	b1 1d       	adc	r27, r1
    327a:	20 93 fc 07 	sts	0x07FC, r18	; 0x8007fc <timer0_fract>
    327e:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <timer0_millis>
    3282:	90 93 fe 07 	sts	0x07FE, r25	; 0x8007fe <timer0_millis+0x1>
    3286:	a0 93 ff 07 	sts	0x07FF, r26	; 0x8007ff <timer0_millis+0x2>
    328a:	b0 93 00 08 	sts	0x0800, r27	; 0x800800 <timer0_millis+0x3>
    328e:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <timer0_overflow_count>
    3292:	90 91 02 08 	lds	r25, 0x0802	; 0x800802 <timer0_overflow_count+0x1>
    3296:	a0 91 03 08 	lds	r26, 0x0803	; 0x800803 <timer0_overflow_count+0x2>
    329a:	b0 91 04 08 	lds	r27, 0x0804	; 0x800804 <timer0_overflow_count+0x3>
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	a1 1d       	adc	r26, r1
    32a2:	b1 1d       	adc	r27, r1
    32a4:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <timer0_overflow_count>
    32a8:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <timer0_overflow_count+0x1>
    32ac:	a0 93 03 08 	sts	0x0803, r26	; 0x800803 <timer0_overflow_count+0x2>
    32b0:	b0 93 04 08 	sts	0x0804, r27	; 0x800804 <timer0_overflow_count+0x3>
    32b4:	bf 91       	pop	r27
    32b6:	af 91       	pop	r26
    32b8:	9f 91       	pop	r25
    32ba:	8f 91       	pop	r24
    32bc:	3f 91       	pop	r19
    32be:	2f 91       	pop	r18
    32c0:	0f 90       	pop	r0
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	0f 90       	pop	r0
    32c6:	1f 90       	pop	r1
    32c8:	18 95       	reti

000032ca <micros>:
    32ca:	3f b7       	in	r19, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <timer0_overflow_count>
    32d2:	90 91 02 08 	lds	r25, 0x0802	; 0x800802 <timer0_overflow_count+0x1>
    32d6:	a0 91 03 08 	lds	r26, 0x0803	; 0x800803 <timer0_overflow_count+0x2>
    32da:	b0 91 04 08 	lds	r27, 0x0804	; 0x800804 <timer0_overflow_count+0x3>
    32de:	26 b5       	in	r18, 0x26	; 38
    32e0:	a8 9b       	sbis	0x15, 0	; 21
    32e2:	05 c0       	rjmp	.+10     	; 0x32ee <micros+0x24>
    32e4:	2f 3f       	cpi	r18, 0xFF	; 255
    32e6:	19 f0       	breq	.+6      	; 0x32ee <micros+0x24>
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	a1 1d       	adc	r26, r1
    32ec:	b1 1d       	adc	r27, r1
    32ee:	3f bf       	out	0x3f, r19	; 63
    32f0:	ba 2f       	mov	r27, r26
    32f2:	a9 2f       	mov	r26, r25
    32f4:	98 2f       	mov	r25, r24
    32f6:	88 27       	eor	r24, r24
    32f8:	82 0f       	add	r24, r18
    32fa:	91 1d       	adc	r25, r1
    32fc:	a1 1d       	adc	r26, r1
    32fe:	b1 1d       	adc	r27, r1
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	42 e0       	ldi	r20, 0x02	; 2
    3306:	66 0f       	add	r22, r22
    3308:	77 1f       	adc	r23, r23
    330a:	88 1f       	adc	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	4a 95       	dec	r20
    3310:	d1 f7       	brne	.-12     	; 0x3306 <micros+0x3c>
    3312:	08 95       	ret

00003314 <delay>:
    3314:	8f 92       	push	r8
    3316:	9f 92       	push	r9
    3318:	af 92       	push	r10
    331a:	bf 92       	push	r11
    331c:	cf 92       	push	r12
    331e:	df 92       	push	r13
    3320:	ef 92       	push	r14
    3322:	ff 92       	push	r15
    3324:	6b 01       	movw	r12, r22
    3326:	7c 01       	movw	r14, r24
    3328:	0e 94 65 19 	call	0x32ca	; 0x32ca <micros>
    332c:	4b 01       	movw	r8, r22
    332e:	5c 01       	movw	r10, r24
    3330:	c1 14       	cp	r12, r1
    3332:	d1 04       	cpc	r13, r1
    3334:	e1 04       	cpc	r14, r1
    3336:	f1 04       	cpc	r15, r1
    3338:	01 f1       	breq	.+64     	; 0x337a <delay+0x66>
    333a:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <yield>
    333e:	0e 94 65 19 	call	0x32ca	; 0x32ca <micros>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	88 19       	sub	r24, r8
    3348:	99 09       	sbc	r25, r9
    334a:	aa 09       	sbc	r26, r10
    334c:	bb 09       	sbc	r27, r11
    334e:	88 3e       	cpi	r24, 0xE8	; 232
    3350:	93 40       	sbci	r25, 0x03	; 3
    3352:	a1 05       	cpc	r26, r1
    3354:	b1 05       	cpc	r27, r1
    3356:	60 f3       	brcs	.-40     	; 0x3330 <delay+0x1c>
    3358:	21 e0       	ldi	r18, 0x01	; 1
    335a:	c2 1a       	sub	r12, r18
    335c:	d1 08       	sbc	r13, r1
    335e:	e1 08       	sbc	r14, r1
    3360:	f1 08       	sbc	r15, r1
    3362:	88 ee       	ldi	r24, 0xE8	; 232
    3364:	88 0e       	add	r8, r24
    3366:	83 e0       	ldi	r24, 0x03	; 3
    3368:	98 1e       	adc	r9, r24
    336a:	a1 1c       	adc	r10, r1
    336c:	b1 1c       	adc	r11, r1
    336e:	c1 14       	cp	r12, r1
    3370:	d1 04       	cpc	r13, r1
    3372:	e1 04       	cpc	r14, r1
    3374:	f1 04       	cpc	r15, r1
    3376:	19 f7       	brne	.-58     	; 0x333e <delay+0x2a>
    3378:	db cf       	rjmp	.-74     	; 0x3330 <delay+0x1c>
    337a:	ff 90       	pop	r15
    337c:	ef 90       	pop	r14
    337e:	df 90       	pop	r13
    3380:	cf 90       	pop	r12
    3382:	bf 90       	pop	r11
    3384:	af 90       	pop	r10
    3386:	9f 90       	pop	r9
    3388:	8f 90       	pop	r8
    338a:	08 95       	ret

0000338c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    338c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    338e:	84 b5       	in	r24, 0x24	; 36
    3390:	82 60       	ori	r24, 0x02	; 2
    3392:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3394:	84 b5       	in	r24, 0x24	; 36
    3396:	81 60       	ori	r24, 0x01	; 1
    3398:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    339a:	85 b5       	in	r24, 0x25	; 37
    339c:	82 60       	ori	r24, 0x02	; 2
    339e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    33a0:	85 b5       	in	r24, 0x25	; 37
    33a2:	81 60       	ori	r24, 0x01	; 1
    33a4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    33a6:	ee e6       	ldi	r30, 0x6E	; 110
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	81 60       	ori	r24, 0x01	; 1
    33ae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    33b0:	e1 e8       	ldi	r30, 0x81	; 129
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    33b6:	80 81       	ld	r24, Z
    33b8:	82 60       	ori	r24, 0x02	; 2
    33ba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    33bc:	80 81       	ld	r24, Z
    33be:	81 60       	ori	r24, 0x01	; 1
    33c0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    33c2:	e0 e8       	ldi	r30, 0x80	; 128
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	81 60       	ori	r24, 0x01	; 1
    33ca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    33cc:	e1 eb       	ldi	r30, 0xB1	; 177
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	84 60       	ori	r24, 0x04	; 4
    33d4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    33d6:	e0 eb       	ldi	r30, 0xB0	; 176
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	81 60       	ori	r24, 0x01	; 1
    33de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    33e0:	ea e7       	ldi	r30, 0x7A	; 122
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	84 60       	ori	r24, 0x04	; 4
    33e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    33ea:	80 81       	ld	r24, Z
    33ec:	82 60       	ori	r24, 0x02	; 2
    33ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    33f0:	80 81       	ld	r24, Z
    33f2:	81 60       	ori	r24, 0x01	; 1
    33f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    33f6:	80 81       	ld	r24, Z
    33f8:	80 68       	ori	r24, 0x80	; 128
    33fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    33fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3400:	08 95       	ret

00003402 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3402:	83 30       	cpi	r24, 0x03	; 3
    3404:	81 f0       	breq	.+32     	; 0x3426 <turnOffPWM+0x24>
    3406:	28 f4       	brcc	.+10     	; 0x3412 <turnOffPWM+0x10>
    3408:	81 30       	cpi	r24, 0x01	; 1
    340a:	99 f0       	breq	.+38     	; 0x3432 <turnOffPWM+0x30>
    340c:	82 30       	cpi	r24, 0x02	; 2
    340e:	a1 f0       	breq	.+40     	; 0x3438 <turnOffPWM+0x36>
    3410:	08 95       	ret
    3412:	87 30       	cpi	r24, 0x07	; 7
    3414:	a9 f0       	breq	.+42     	; 0x3440 <turnOffPWM+0x3e>
    3416:	88 30       	cpi	r24, 0x08	; 8
    3418:	b9 f0       	breq	.+46     	; 0x3448 <turnOffPWM+0x46>
    341a:	84 30       	cpi	r24, 0x04	; 4
    341c:	d1 f4       	brne	.+52     	; 0x3452 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    341e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3422:	8f 7d       	andi	r24, 0xDF	; 223
    3424:	03 c0       	rjmp	.+6      	; 0x342c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    342a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    342c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3430:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3432:	84 b5       	in	r24, 0x24	; 36
    3434:	8f 77       	andi	r24, 0x7F	; 127
    3436:	02 c0       	rjmp	.+4      	; 0x343c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3438:	84 b5       	in	r24, 0x24	; 36
    343a:	8f 7d       	andi	r24, 0xDF	; 223
    343c:	84 bd       	out	0x24, r24	; 36
    343e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3440:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3444:	8f 77       	andi	r24, 0x7F	; 127
    3446:	03 c0       	rjmp	.+6      	; 0x344e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3448:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    344c:	8f 7d       	andi	r24, 0xDF	; 223
    344e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3452:	08 95       	ret

00003454 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	fc 01       	movw	r30, r24
    345c:	ec 56       	subi	r30, 0x6C	; 108
    345e:	fc 4f       	sbci	r31, 0xFC	; 252
    3460:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3462:	fc 01       	movw	r30, r24
    3464:	e8 55       	subi	r30, 0x58	; 88
    3466:	fc 4f       	sbci	r31, 0xFC	; 252
    3468:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    346a:	88 23       	and	r24, r24
    346c:	61 f1       	breq	.+88     	; 0x34c6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	fc 01       	movw	r30, r24
    3476:	e0 53       	subi	r30, 0x30	; 48
    3478:	fc 4f       	sbci	r31, 0xFC	; 252
    347a:	c5 91       	lpm	r28, Z+
    347c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    347e:	fc 01       	movw	r30, r24
    3480:	ea 53       	subi	r30, 0x3A	; 58
    3482:	fc 4f       	sbci	r31, 0xFC	; 252
    3484:	a5 91       	lpm	r26, Z+
    3486:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3488:	61 11       	cpse	r22, r1
    348a:	09 c0       	rjmp	.+18     	; 0x349e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    348c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    348e:	f8 94       	cli
		*reg &= ~bit;
    3490:	88 81       	ld	r24, Y
    3492:	20 95       	com	r18
    3494:	82 23       	and	r24, r18
    3496:	88 83       	st	Y, r24
		*out &= ~bit;
    3498:	ec 91       	ld	r30, X
    349a:	2e 23       	and	r18, r30
    349c:	0b c0       	rjmp	.+22     	; 0x34b4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    349e:	62 30       	cpi	r22, 0x02	; 2
    34a0:	61 f4       	brne	.+24     	; 0x34ba <pinMode+0x66>
		uint8_t oldSREG = SREG;
    34a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    34a4:	f8 94       	cli
		*reg &= ~bit;
    34a6:	88 81       	ld	r24, Y
    34a8:	32 2f       	mov	r19, r18
    34aa:	30 95       	com	r19
    34ac:	83 23       	and	r24, r19
    34ae:	88 83       	st	Y, r24
		*out |= bit;
    34b0:	ec 91       	ld	r30, X
    34b2:	2e 2b       	or	r18, r30
    34b4:	2c 93       	st	X, r18
		SREG = oldSREG;
    34b6:	9f bf       	out	0x3f, r25	; 63
    34b8:	06 c0       	rjmp	.+12     	; 0x34c6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    34ba:	8f b7       	in	r24, 0x3f	; 63
                cli();
    34bc:	f8 94       	cli
		*reg |= bit;
    34be:	e8 81       	ld	r30, Y
    34c0:	2e 2b       	or	r18, r30
    34c2:	28 83       	st	Y, r18
		SREG = oldSREG;
    34c4:	8f bf       	out	0x3f, r24	; 63
	}
}
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	f9 01       	movw	r30, r18
    34d8:	e0 58       	subi	r30, 0x80	; 128
    34da:	fc 4f       	sbci	r31, 0xFC	; 252
    34dc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    34de:	f9 01       	movw	r30, r18
    34e0:	ec 56       	subi	r30, 0x6C	; 108
    34e2:	fc 4f       	sbci	r31, 0xFC	; 252
    34e4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    34e6:	f9 01       	movw	r30, r18
    34e8:	e8 55       	subi	r30, 0x58	; 88
    34ea:	fc 4f       	sbci	r31, 0xFC	; 252
    34ec:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    34ee:	cc 23       	and	r28, r28
    34f0:	c1 f0       	breq	.+48     	; 0x3522 <digitalWrite+0x56>
    34f2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    34f4:	81 11       	cpse	r24, r1
    34f6:	0e 94 01 1a 	call	0x3402	; 0x3402 <turnOffPWM>

	out = portOutputRegister(port);
    34fa:	ec 2f       	mov	r30, r28
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	ea 53       	subi	r30, 0x3A	; 58
    3504:	fc 4f       	sbci	r31, 0xFC	; 252
    3506:	a5 91       	lpm	r26, Z+
    3508:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    350a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    350c:	f8 94       	cli

	if (val == LOW) {
    350e:	11 11       	cpse	r17, r1
    3510:	04 c0       	rjmp	.+8      	; 0x351a <digitalWrite+0x4e>
		*out &= ~bit;
    3512:	8c 91       	ld	r24, X
    3514:	d0 95       	com	r29
    3516:	d8 23       	and	r29, r24
    3518:	02 c0       	rjmp	.+4      	; 0x351e <digitalWrite+0x52>
	} else {
		*out |= bit;
    351a:	ec 91       	ld	r30, X
    351c:	de 2b       	or	r29, r30
    351e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3520:	9f bf       	out	0x3f, r25	; 63
}
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	1f 91       	pop	r17
    3528:	08 95       	ret

0000352a <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    352a:	fc 01       	movw	r30, r24
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	0c 94 b7 29 	jmp	0x536e	; 0x536e <free>

00003534 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    353a:	88 81       	ld	r24, Y
    353c:	99 81       	ldd	r25, Y+1	; 0x01
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	11 f0       	breq	.+4      	; 0x3546 <_ZN6String10invalidateEv+0x12>
    3542:	0e 94 b7 29 	call	0x536e	; 0x536e <free>
	buffer = NULL;
    3546:	19 82       	std	Y+1, r1	; 0x01
    3548:	18 82       	st	Y, r1
	capacity = len = 0;
    354a:	1d 82       	std	Y+5, r1	; 0x05
    354c:	1c 82       	std	Y+4, r1	; 0x04
    354e:	1b 82       	std	Y+3, r1	; 0x03
    3550:	1a 82       	std	Y+2, r1	; 0x02
}
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	08 95       	ret

00003558 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ec 01       	movw	r28, r24
    3562:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3564:	6f 5f       	subi	r22, 0xFF	; 255
    3566:	7f 4f       	sbci	r23, 0xFF	; 255
    3568:	88 81       	ld	r24, Y
    356a:	99 81       	ldd	r25, Y+1	; 0x01
    356c:	0e 94 40 2a 	call	0x5480	; 0x5480 <realloc>
	if (newbuffer) {
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	31 f0       	breq	.+12     	; 0x3580 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3574:	99 83       	std	Y+1, r25	; 0x01
    3576:	88 83       	st	Y, r24
		capacity = maxStrLen;
    3578:	1b 83       	std	Y+3, r17	; 0x03
    357a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	01 c0       	rjmp	.+2      	; 0x3582 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3580:	80 e0       	ldi	r24, 0x00	; 0
}
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	08 95       	ret

0000358c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3592:	88 81       	ld	r24, Y
    3594:	99 81       	ldd	r25, Y+1	; 0x01
    3596:	89 2b       	or	r24, r25
    3598:	29 f0       	breq	.+10     	; 0x35a4 <_ZN6String7reserveEj+0x18>
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	86 17       	cp	r24, r22
    35a0:	97 07       	cpc	r25, r23
    35a2:	60 f4       	brcc	.+24     	; 0x35bc <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    35a4:	ce 01       	movw	r24, r28
    35a6:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN6String12changeBufferEj>
    35aa:	88 23       	and	r24, r24
    35ac:	41 f0       	breq	.+16     	; 0x35be <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    35ae:	8c 81       	ldd	r24, Y+4	; 0x04
    35b0:	9d 81       	ldd	r25, Y+5	; 0x05
    35b2:	89 2b       	or	r24, r25
    35b4:	19 f4       	brne	.+6      	; 0x35bc <_ZN6String7reserveEj+0x30>
    35b6:	e8 81       	ld	r30, Y
    35b8:	f9 81       	ldd	r31, Y+1	; 0x01
    35ba:	10 82       	st	Z, r1
    35bc:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	08 95       	ret

000035c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	ec 01       	movw	r28, r24
    35d2:	7b 01       	movw	r14, r22
    35d4:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    35d6:	ba 01       	movw	r22, r20
    35d8:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN6String7reserveEj>
    35dc:	81 11       	cpse	r24, r1
    35de:	04 c0       	rjmp	.+8      	; 0x35e8 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    35e0:	ce 01       	movw	r24, r28
    35e2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN6String10invalidateEv>
		return *this;
    35e6:	07 c0       	rjmp	.+14     	; 0x35f6 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    35e8:	1d 83       	std	Y+5, r17	; 0x05
    35ea:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    35ec:	b7 01       	movw	r22, r14
    35ee:	88 81       	ld	r24, Y
    35f0:	99 81       	ldd	r25, Y+1	; 0x01
    35f2:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <strcpy>
	return *this;
}
    35f6:	ce 01       	movw	r24, r28
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	1f 91       	pop	r17
    35fe:	0f 91       	pop	r16
    3600:	ff 90       	pop	r15
    3602:	ef 90       	pop	r14
    3604:	08 95       	ret

00003606 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3606:	fc 01       	movw	r30, r24
    3608:	11 82       	std	Z+1, r1	; 0x01
    360a:	10 82       	st	Z, r1
	capacity = 0;
    360c:	13 82       	std	Z+3, r1	; 0x03
    360e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3610:	15 82       	std	Z+5, r1	; 0x05
    3612:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3614:	61 15       	cp	r22, r1
    3616:	71 05       	cpc	r23, r1
    3618:	51 f0       	breq	.+20     	; 0x362e <_ZN6StringC1EPKc+0x28>
    361a:	fb 01       	movw	r30, r22
    361c:	01 90       	ld	r0, Z+
    361e:	00 20       	and	r0, r0
    3620:	e9 f7       	brne	.-6      	; 0x361c <_ZN6StringC1EPKc+0x16>
    3622:	31 97       	sbiw	r30, 0x01	; 1
    3624:	af 01       	movw	r20, r30
    3626:	46 1b       	sub	r20, r22
    3628:	57 0b       	sbc	r21, r23
    362a:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <_ZN6String4copyEPKcj>
    362e:	08 95       	ret

00003630 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3630:	88 5e       	subi	r24, 0xE8	; 232
    3632:	9e 4f       	sbci	r25, 0xFE	; 254
    3634:	dc 01       	movw	r26, r24
    3636:	8d 91       	ld	r24, X+
    3638:	9c 91       	ld	r25, X
    363a:	dc 01       	movw	r26, r24
    363c:	ed 91       	ld	r30, X+
    363e:	fc 91       	ld	r31, X
    3640:	04 80       	ldd	r0, Z+4	; 0x04
    3642:	f5 81       	ldd	r31, Z+5	; 0x05
    3644:	e0 2d       	mov	r30, r0
    3646:	09 94       	ijmp

00003648 <_ZN13Adafruit_FONA5writeEh>:
    3648:	88 5e       	subi	r24, 0xE8	; 232
    364a:	9e 4f       	sbci	r25, 0xFE	; 254
    364c:	dc 01       	movw	r26, r24
    364e:	8d 91       	ld	r24, X+
    3650:	9c 91       	ld	r25, X
    3652:	dc 01       	movw	r26, r24
    3654:	ed 91       	ld	r30, X+
    3656:	fc 91       	ld	r31, X
    3658:	01 90       	ld	r0, Z+
    365a:	f0 81       	ld	r31, Z
    365c:	e0 2d       	mov	r30, r0
    365e:	09 94       	ijmp

00003660 <_ZN13Adafruit_FONA4readEv>:
    3660:	88 5e       	subi	r24, 0xE8	; 232
    3662:	9e 4f       	sbci	r25, 0xFE	; 254
    3664:	dc 01       	movw	r26, r24
    3666:	8d 91       	ld	r24, X+
    3668:	9c 91       	ld	r25, X
    366a:	dc 01       	movw	r26, r24
    366c:	ed 91       	ld	r30, X+
    366e:	fc 91       	ld	r31, X
    3670:	06 80       	ldd	r0, Z+6	; 0x06
    3672:	f7 81       	ldd	r31, Z+7	; 0x07
    3674:	e0 2d       	mov	r30, r0
    3676:	09 94       	ijmp

00003678 <_ZN13Adafruit_FONA4peekEv>:
    3678:	88 5e       	subi	r24, 0xE8	; 232
    367a:	9e 4f       	sbci	r25, 0xFE	; 254
    367c:	dc 01       	movw	r26, r24
    367e:	8d 91       	ld	r24, X+
    3680:	9c 91       	ld	r25, X
    3682:	dc 01       	movw	r26, r24
    3684:	ed 91       	ld	r30, X+
    3686:	fc 91       	ld	r31, X
    3688:	00 84       	ldd	r0, Z+8	; 0x08
    368a:	f1 85       	ldd	r31, Z+9	; 0x09
    368c:	e0 2d       	mov	r30, r0
    368e:	09 94       	ijmp

00003690 <_ZN13Adafruit_FONA5flushEv>:
    3690:	88 5e       	subi	r24, 0xE8	; 232
    3692:	9e 4f       	sbci	r25, 0xFE	; 254
    3694:	dc 01       	movw	r26, r24
    3696:	8d 91       	ld	r24, X+
    3698:	9c 91       	ld	r25, X
    369a:	dc 01       	movw	r26, r24
    369c:	ed 91       	ld	r30, X+
    369e:	fc 91       	ld	r31, X
    36a0:	02 84       	ldd	r0, Z+10	; 0x0a
    36a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    36a4:	e0 2d       	mov	r30, r0
    36a6:	09 94       	ijmp

000036a8 <_ZN13Adafruit_FONAC1Ea>:
    36a8:	fc 01       	movw	r30, r24
    36aa:	13 82       	std	Z+3, r1	; 0x03
    36ac:	12 82       	std	Z+2, r1	; 0x02
    36ae:	88 ee       	ldi	r24, 0xE8	; 232
    36b0:	93 e0       	ldi	r25, 0x03	; 3
    36b2:	a0 e0       	ldi	r26, 0x00	; 0
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	84 83       	std	Z+4, r24	; 0x04
    36b8:	95 83       	std	Z+5, r25	; 0x05
    36ba:	a6 83       	std	Z+6, r26	; 0x06
    36bc:	b7 83       	std	Z+7, r27	; 0x07
    36be:	86 e2       	ldi	r24, 0x26	; 38
    36c0:	93 e0       	ldi	r25, 0x03	; 3
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
    36c6:	64 87       	std	Z+12, r22	; 0x0c
    36c8:	df 01       	movw	r26, r30
    36ca:	a3 5f       	subi	r26, 0xF3	; 243
    36cc:	be 4f       	sbci	r27, 0xFE	; 254
    36ce:	84 e1       	ldi	r24, 0x14	; 20
    36d0:	97 e0       	ldi	r25, 0x07	; 7
    36d2:	11 96       	adiw	r26, 0x01	; 1
    36d4:	9c 93       	st	X, r25
    36d6:	8e 93       	st	-X, r24
    36d8:	12 96       	adiw	r26, 0x02	; 2
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	1c 92       	st	X, r1
    36de:	1e 92       	st	-X, r1
    36e0:	12 96       	adiw	r26, 0x02	; 2
    36e2:	11 96       	adiw	r26, 0x01	; 1
    36e4:	1c 92       	st	X, r1
    36e6:	1e 92       	st	-X, r1
    36e8:	17 96       	adiw	r26, 0x07	; 7
    36ea:	11 96       	adiw	r26, 0x01	; 1
    36ec:	1c 92       	st	X, r1
    36ee:	1e 92       	st	-X, r1
    36f0:	15 97       	sbiw	r26, 0x05	; 5
    36f2:	1c 92       	st	X, r1
    36f4:	11 96       	adiw	r26, 0x01	; 1
    36f6:	8f e0       	ldi	r24, 0x0F	; 15
    36f8:	97 e0       	ldi	r25, 0x07	; 7
    36fa:	8d 93       	st	X+, r24
    36fc:	9c 93       	st	X, r25
    36fe:	ea 5e       	subi	r30, 0xEA	; 234
    3700:	fe 4f       	sbci	r31, 0xFE	; 254
    3702:	8c e0       	ldi	r24, 0x0C	; 12
    3704:	97 e0       	ldi	r25, 0x07	; 7
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	80 83       	st	Z, r24
    370a:	08 95       	ret

0000370c <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    370c:	fc 01       	movw	r30, r24
    370e:	e3 5f       	subi	r30, 0xF3	; 243
    3710:	fe 4f       	sbci	r31, 0xFE	; 254
    3712:	71 83       	std	Z+1, r23	; 0x01
    3714:	60 83       	st	Z, r22
    3716:	32 96       	adiw	r30, 0x02	; 2
    3718:	51 83       	std	Z+1, r21	; 0x01
    371a:	40 83       	st	Z, r20
    371c:	32 96       	adiw	r30, 0x02	; 2
    371e:	31 83       	std	Z+1, r19	; 0x01
    3720:	20 83       	st	Z, r18
    3722:	08 95       	ret

00003724 <_ZN13Adafruit_FONA10flushInputEv>:
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	ec 01       	movw	r28, r24
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	8c 01       	movw	r16, r24
    3734:	0f 5f       	subi	r16, 0xFF	; 255
    3736:	1f 4f       	sbci	r17, 0xFF	; 255
    3738:	88 97       	sbiw	r24, 0x28	; 40
    373a:	d8 f4       	brcc	.+54     	; 0x3772 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    373c:	e8 81       	ld	r30, Y
    373e:	f9 81       	ldd	r31, Y+1	; 0x01
    3740:	04 80       	ldd	r0, Z+4	; 0x04
    3742:	f5 81       	ldd	r31, Z+5	; 0x05
    3744:	e0 2d       	mov	r30, r0
    3746:	ce 01       	movw	r24, r28
    3748:	09 95       	icall
    374a:	89 2b       	or	r24, r25
    374c:	51 f0       	breq	.+20     	; 0x3762 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    374e:	e8 81       	ld	r30, Y
    3750:	f9 81       	ldd	r31, Y+1	; 0x01
    3752:	06 80       	ldd	r0, Z+6	; 0x06
    3754:	f7 81       	ldd	r31, Z+7	; 0x07
    3756:	e0 2d       	mov	r30, r0
    3758:	ce 01       	movw	r24, r28
    375a:	09 95       	icall
    375c:	00 e0       	ldi	r16, 0x00	; 0
    375e:	10 e0       	ldi	r17, 0x00	; 0
    3760:	ed cf       	rjmp	.-38     	; 0x373c <_ZN13Adafruit_FONA10flushInputEv+0x18>
    3762:	61 e0       	ldi	r22, 0x01	; 1
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    376e:	c8 01       	movw	r24, r16
    3770:	e0 cf       	rjmp	.-64     	; 0x3732 <_ZN13Adafruit_FONA10flushInputEv+0xe>
    3772:	df 91       	pop	r29
    3774:	cf 91       	pop	r28
    3776:	1f 91       	pop	r17
    3778:	0f 91       	pop	r16
    377a:	08 95       	ret

0000377c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    377c:	ff 92       	push	r15
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	ec 01       	movw	r28, r24
    3788:	8b 01       	movw	r16, r22
    378a:	f4 2e       	mov	r15, r20
    378c:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3790:	68 ee       	ldi	r22, 0xE8	; 232
    3792:	74 e0       	ldi	r23, 0x04	; 4
    3794:	8f e5       	ldi	r24, 0x5F	; 95
    3796:	97 e0       	ldi	r25, 0x07	; 7
    3798:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    379c:	6a ed       	ldi	r22, 0xDA	; 218
    379e:	74 e0       	ldi	r23, 0x04	; 4
    37a0:	8f e5       	ldi	r24, 0x5F	; 95
    37a2:	97 e0       	ldi	r25, 0x07	; 7
    37a4:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    37a8:	b8 01       	movw	r22, r16
    37aa:	8f e5       	ldi	r24, 0x5F	; 95
    37ac:	97 e0       	ldi	r25, 0x07	; 7
    37ae:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    37b2:	62 e2       	ldi	r22, 0x22	; 34
    37b4:	8f e5       	ldi	r24, 0x5F	; 95
    37b6:	97 e0       	ldi	r25, 0x07	; 7
    37b8:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN5Print7printlnEc>
    37bc:	c8 5e       	subi	r28, 0xE8	; 232
    37be:	de 4f       	sbci	r29, 0xFE	; 254
    37c0:	6c ec       	ldi	r22, 0xCC	; 204
    37c2:	74 e0       	ldi	r23, 0x04	; 4
    37c4:	88 81       	ld	r24, Y
    37c6:	99 81       	ldd	r25, Y+1	; 0x01
    37c8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    37cc:	b8 01       	movw	r22, r16
    37ce:	88 81       	ld	r24, Y
    37d0:	99 81       	ldd	r25, Y+1	; 0x01
    37d2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    37d6:	88 81       	ld	r24, Y
    37d8:	99 81       	ldd	r25, Y+1	; 0x01
    37da:	ff 20       	and	r15, r15
    37dc:	19 f0       	breq	.+6      	; 0x37e4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    37de:	68 ec       	ldi	r22, 0xC8	; 200
    37e0:	74 e0       	ldi	r23, 0x04	; 4
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    37e4:	65 ec       	ldi	r22, 0xC5	; 197
    37e6:	74 e0       	ldi	r23, 0x04	; 4
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>

000037f6 <_ZN13Adafruit_FONA8readlineEjb>:
    37f6:	9f 92       	push	r9
    37f8:	af 92       	push	r10
    37fa:	bf 92       	push	r11
    37fc:	cf 92       	push	r12
    37fe:	df 92       	push	r13
    3800:	ef 92       	push	r14
    3802:	ff 92       	push	r15
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	7c 01       	movw	r14, r24
    380e:	94 2e       	mov	r9, r20
    3810:	8b 01       	movw	r16, r22
    3812:	00 0f       	add	r16, r16
    3814:	11 1f       	adc	r17, r17
    3816:	00 0f       	add	r16, r16
    3818:	11 1f       	adc	r17, r17
    381a:	c0 e0       	ldi	r28, 0x00	; 0
    381c:	d0 e0       	ldi	r29, 0x00	; 0
    381e:	57 01       	movw	r10, r14
    3820:	88 ee       	ldi	r24, 0xE8	; 232
    3822:	a8 1a       	sub	r10, r24
    3824:	8e ef       	ldi	r24, 0xFE	; 254
    3826:	b8 0a       	sbc	r11, r24
    3828:	01 15       	cp	r16, r1
    382a:	11 05       	cpc	r17, r1
    382c:	09 f4       	brne	.+2      	; 0x3830 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    382e:	50 c0       	rjmp	.+160    	; 0x38d0 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3830:	ce 3f       	cpi	r28, 0xFE	; 254
    3832:	d1 05       	cpc	r29, r1
    3834:	80 f0       	brcs	.+32     	; 0x3856 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3836:	6a e1       	ldi	r22, 0x1A	; 26
    3838:	74 e0       	ldi	r23, 0x04	; 4
    383a:	22 c0       	rjmp	.+68     	; 0x3880 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    383c:	f5 01       	movw	r30, r10
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	dc 01       	movw	r26, r24
    3844:	ed 91       	ld	r30, X+
    3846:	fc 91       	ld	r31, X
    3848:	06 80       	ldd	r0, Z+6	; 0x06
    384a:	f7 81       	ldd	r31, Z+7	; 0x07
    384c:	e0 2d       	mov	r30, r0
    384e:	09 95       	icall
    3850:	6c 01       	movw	r12, r24
    3852:	8d 30       	cpi	r24, 0x0D	; 13
    3854:	69 f4       	brne	.+26     	; 0x3870 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    3856:	d5 01       	movw	r26, r10
    3858:	8d 91       	ld	r24, X+
    385a:	9c 91       	ld	r25, X
    385c:	dc 01       	movw	r26, r24
    385e:	ed 91       	ld	r30, X+
    3860:	fc 91       	ld	r31, X
    3862:	04 80       	ldd	r0, Z+4	; 0x04
    3864:	f5 81       	ldd	r31, Z+5	; 0x05
    3866:	e0 2d       	mov	r30, r0
    3868:	09 95       	icall
    386a:	89 2b       	or	r24, r25
    386c:	39 f7       	brne	.-50     	; 0x383c <_ZN13Adafruit_FONA8readlineEjb+0x46>
    386e:	26 c0       	rjmp	.+76     	; 0x38bc <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    3870:	8a 30       	cpi	r24, 0x0A	; 10
    3872:	59 f4       	brne	.+22     	; 0x388a <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3874:	20 97       	sbiw	r28, 0x00	; 0
    3876:	79 f3       	breq	.-34     	; 0x3856 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3878:	91 10       	cpse	r9, r1
    387a:	07 c0       	rjmp	.+14     	; 0x388a <_ZN13Adafruit_FONA8readlineEjb+0x94>
    387c:	62 e1       	ldi	r22, 0x12	; 18
    387e:	74 e0       	ldi	r23, 0x04	; 4
    3880:	8f e5       	ldi	r24, 0x5F	; 95
    3882:	97 e0       	ldi	r25, 0x07	; 7
    3884:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3888:	23 c0       	rjmp	.+70     	; 0x38d0 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    388a:	f7 01       	movw	r30, r14
    388c:	ec 0f       	add	r30, r28
    388e:	fd 1f       	adc	r31, r29
    3890:	c6 86       	std	Z+14, r12	; 0x0e
    3892:	b6 01       	movw	r22, r12
    3894:	77 27       	eor	r23, r23
    3896:	40 e1       	ldi	r20, 0x10	; 16
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	8f e5       	ldi	r24, 0x5F	; 95
    389c:	97 e0       	ldi	r25, 0x07	; 7
    389e:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEii>
    38a2:	69 ec       	ldi	r22, 0xC9	; 201
    38a4:	72 e0       	ldi	r23, 0x02	; 2
    38a6:	8f e5       	ldi	r24, 0x5F	; 95
    38a8:	97 e0       	ldi	r25, 0x07	; 7
    38aa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    38ae:	6c 2d       	mov	r22, r12
    38b0:	8f e5       	ldi	r24, 0x5F	; 95
    38b2:	97 e0       	ldi	r25, 0x07	; 7
    38b4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN5Print7printlnEc>
    38b8:	21 96       	adiw	r28, 0x01	; 1
    38ba:	cd cf       	rjmp	.-102    	; 0x3856 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    38bc:	01 50       	subi	r16, 0x01	; 1
    38be:	11 09       	sbc	r17, r1
    38c0:	e9 f2       	breq	.-70     	; 0x387c <_ZN13Adafruit_FONA8readlineEjb+0x86>
    38c2:	61 e0       	ldi	r22, 0x01	; 1
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    38ce:	ac cf       	rjmp	.-168    	; 0x3828 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    38d0:	f7 01       	movw	r30, r14
    38d2:	ec 0f       	add	r30, r28
    38d4:	fd 1f       	adc	r31, r29
    38d6:	16 86       	std	Z+14, r1	; 0x0e
    38d8:	8c 2f       	mov	r24, r28
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	1f 91       	pop	r17
    38e0:	0f 91       	pop	r16
    38e2:	ff 90       	pop	r15
    38e4:	ef 90       	pop	r14
    38e6:	df 90       	pop	r13
    38e8:	cf 90       	pop	r12
    38ea:	bf 90       	pop	r11
    38ec:	af 90       	pop	r10
    38ee:	9f 90       	pop	r9
    38f0:	08 95       	ret

000038f2 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    38f2:	0f 93       	push	r16
    38f4:	1f 93       	push	r17
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	ec 01       	movw	r28, r24
    38fc:	8b 01       	movw	r16, r22
    38fe:	ba 01       	movw	r22, r20
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    3906:	60 e2       	ldi	r22, 0x20	; 32
    3908:	74 e0       	ldi	r23, 0x04	; 4
    390a:	8f e5       	ldi	r24, 0x5F	; 95
    390c:	97 e0       	ldi	r25, 0x07	; 7
    390e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3912:	2e 96       	adiw	r28, 0x0e	; 14
    3914:	be 01       	movw	r22, r28
    3916:	8f e5       	ldi	r24, 0x5F	; 95
    3918:	97 e0       	ldi	r25, 0x07	; 7
    391a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    391e:	b8 01       	movw	r22, r16
    3920:	ce 01       	movw	r24, r28
    3922:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcmp_P>
    3926:	21 e0       	ldi	r18, 0x01	; 1
    3928:	89 2b       	or	r24, r25
    392a:	09 f0       	breq	.+2      	; 0x392e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	82 2f       	mov	r24, r18
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	08 95       	ret

0000393a <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	ec 01       	movw	r28, r24
    3940:	fc 01       	movw	r30, r24
    3942:	e8 5e       	subi	r30, 0xE8	; 232
    3944:	fe 4f       	sbci	r31, 0xFE	; 254
    3946:	66 23       	and	r22, r22
    3948:	31 f0       	breq	.+12     	; 0x3956 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    394a:	62 e2       	ldi	r22, 0x22	; 34
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN5Print7printlnEc>
    3954:	04 c0       	rjmp	.+8      	; 0x395e <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    3956:	80 81       	ld	r24, Z
    3958:	91 81       	ldd	r25, Z+1	; 0x01
    395a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    395e:	fe 01       	movw	r30, r28
    3960:	ea 5e       	subi	r30, 0xEA	; 234
    3962:	fe 4f       	sbci	r31, 0xFE	; 254
    3964:	60 81       	ld	r22, Z
    3966:	71 81       	ldd	r23, Z+1	; 0x01
    3968:	40 e1       	ldi	r20, 0x10	; 16
    396a:	57 e2       	ldi	r21, 0x27	; 39
    396c:	ce 01       	movw	r24, r28
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00003976 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	ec 01       	movw	r28, r24
    3980:	8a 01       	movw	r16, r20
    3982:	41 e0       	ldi	r20, 0x01	; 1
    3984:	0e 94 be 1b 	call	0x377c	; 0x377c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3988:	fe 01       	movw	r30, r28
    398a:	e8 5e       	subi	r30, 0xE8	; 232
    398c:	fe 4f       	sbci	r31, 0xFE	; 254
    398e:	b8 01       	movw	r22, r16
    3990:	80 81       	ld	r24, Z
    3992:	91 81       	ldd	r25, Z+1	; 0x01
    3994:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    3998:	61 e0       	ldi	r22, 0x01	; 1
    399a:	ce 01       	movw	r24, r28
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	1f 91       	pop	r17
    39a2:	0f 91       	pop	r16
    39a4:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <_ZN13Adafruit_FONA13HTTP_para_endEb>

000039a8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	ec 01       	movw	r28, r24
    39b2:	8a 01       	movw	r16, r20
    39b4:	41 e0       	ldi	r20, 0x01	; 1
    39b6:	0e 94 be 1b 	call	0x377c	; 0x377c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    39ba:	fe 01       	movw	r30, r28
    39bc:	e8 5e       	subi	r30, 0xE8	; 232
    39be:	fe 4f       	sbci	r31, 0xFE	; 254
    39c0:	b8 01       	movw	r22, r16
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    39ca:	61 e0       	ldi	r22, 0x01	; 1
    39cc:	ce 01       	movw	r24, r28
    39ce:	df 91       	pop	r29
    39d0:	cf 91       	pop	r28
    39d2:	1f 91       	pop	r17
    39d4:	0f 91       	pop	r16
    39d6:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <_ZN13Adafruit_FONA13HTTP_para_endEb>

000039da <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	ec 01       	movw	r28, r24
    39e8:	69 01       	movw	r12, r18
    39ea:	7a 01       	movw	r14, r20
    39ec:	40 e0       	ldi	r20, 0x00	; 0
    39ee:	0e 94 be 1b 	call	0x377c	; 0x377c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    39f2:	fe 01       	movw	r30, r28
    39f4:	e8 5e       	subi	r30, 0xE8	; 232
    39f6:	fe 4f       	sbci	r31, 0xFE	; 254
    39f8:	2a e0       	ldi	r18, 0x0A	; 10
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	b7 01       	movw	r22, r14
    39fe:	a6 01       	movw	r20, r12
    3a00:	80 81       	ld	r24, Z
    3a02:	91 81       	ldd	r25, Z+1	; 0x01
    3a04:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEli>
    3a08:	60 e0       	ldi	r22, 0x00	; 0
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	ff 90       	pop	r15
    3a12:	ef 90       	pop	r14
    3a14:	df 90       	pop	r13
    3a16:	cf 90       	pop	r12
    3a18:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003a1c <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    3a1c:	4f 92       	push	r4
    3a1e:	5f 92       	push	r5
    3a20:	6f 92       	push	r6
    3a22:	7f 92       	push	r7
    3a24:	8f 92       	push	r8
    3a26:	9f 92       	push	r9
    3a28:	af 92       	push	r10
    3a2a:	bf 92       	push	r11
    3a2c:	ef 92       	push	r14
    3a2e:	ff 92       	push	r15
    3a30:	0f 93       	push	r16
    3a32:	1f 93       	push	r17
    3a34:	cf 93       	push	r28
    3a36:	df 93       	push	r29
    3a38:	7c 01       	movw	r14, r24
    3a3a:	2a 01       	movw	r4, r20
    3a3c:	3b 01       	movw	r6, r22
    3a3e:	48 01       	movw	r8, r16
    3a40:	59 01       	movw	r10, r18
    3a42:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3a46:	6e eb       	ldi	r22, 0xBE	; 190
    3a48:	74 e0       	ldi	r23, 0x04	; 4
    3a4a:	8f e5       	ldi	r24, 0x5F	; 95
    3a4c:	97 e0       	ldi	r25, 0x07	; 7
    3a4e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3a52:	61 eb       	ldi	r22, 0xB1	; 177
    3a54:	74 e0       	ldi	r23, 0x04	; 4
    3a56:	8f e5       	ldi	r24, 0x5F	; 95
    3a58:	97 e0       	ldi	r25, 0x07	; 7
    3a5a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3a5e:	2a e0       	ldi	r18, 0x0A	; 10
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	b3 01       	movw	r22, r6
    3a64:	a2 01       	movw	r20, r4
    3a66:	8f e5       	ldi	r24, 0x5F	; 95
    3a68:	97 e0       	ldi	r25, 0x07	; 7
    3a6a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <_ZN5Print5printEmi>
    3a6e:	6c e2       	ldi	r22, 0x2C	; 44
    3a70:	8f e5       	ldi	r24, 0x5F	; 95
    3a72:	97 e0       	ldi	r25, 0x07	; 7
    3a74:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN5Print5printEc>
    3a78:	2a e0       	ldi	r18, 0x0A	; 10
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	b5 01       	movw	r22, r10
    3a7e:	a4 01       	movw	r20, r8
    3a80:	8f e5       	ldi	r24, 0x5F	; 95
    3a82:	97 e0       	ldi	r25, 0x07	; 7
    3a84:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN5Print7printlnEmi>
    3a88:	e7 01       	movw	r28, r14
    3a8a:	c8 5e       	subi	r28, 0xE8	; 232
    3a8c:	de 4f       	sbci	r29, 0xFE	; 254
    3a8e:	64 ea       	ldi	r22, 0xA4	; 164
    3a90:	74 e0       	ldi	r23, 0x04	; 4
    3a92:	88 81       	ld	r24, Y
    3a94:	99 81       	ldd	r25, Y+1	; 0x01
    3a96:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3a9a:	2a e0       	ldi	r18, 0x0A	; 10
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	b3 01       	movw	r22, r6
    3aa0:	a2 01       	movw	r20, r4
    3aa2:	88 81       	ld	r24, Y
    3aa4:	99 81       	ldd	r25, Y+1	; 0x01
    3aa6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <_ZN5Print5printEmi>
    3aaa:	63 ed       	ldi	r22, 0xD3	; 211
    3aac:	72 e0       	ldi	r23, 0x02	; 2
    3aae:	88 81       	ld	r24, Y
    3ab0:	99 81       	ldd	r25, Y+1	; 0x01
    3ab2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    3ab6:	2a e0       	ldi	r18, 0x0A	; 10
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	b5 01       	movw	r22, r10
    3abc:	a4 01       	movw	r20, r8
    3abe:	88 81       	ld	r24, Y
    3ac0:	99 81       	ldd	r25, Y+1	; 0x01
    3ac2:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN5Print7printlnEmi>
    3ac6:	40 e1       	ldi	r20, 0x10	; 16
    3ac8:	57 e2       	ldi	r21, 0x27	; 39
    3aca:	6b e9       	ldi	r22, 0x9B	; 155
    3acc:	74 e0       	ldi	r23, 0x04	; 4
    3ace:	c7 01       	movw	r24, r14
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	0f 91       	pop	r16
    3ad8:	ff 90       	pop	r15
    3ada:	ef 90       	pop	r14
    3adc:	bf 90       	pop	r11
    3ade:	af 90       	pop	r10
    3ae0:	9f 90       	pop	r9
    3ae2:	8f 90       	pop	r8
    3ae4:	7f 90       	pop	r7
    3ae6:	6f 90       	pop	r6
    3ae8:	5f 90       	pop	r5
    3aea:	4f 90       	pop	r4
    3aec:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00003af0 <_ZN13Adafruit_FONA8getReplyEPcj>:
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	ec 01       	movw	r28, r24
    3afe:	8b 01       	movw	r16, r22
    3b00:	7a 01       	movw	r14, r20
    3b02:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3b06:	6b e0       	ldi	r22, 0x0B	; 11
    3b08:	74 e0       	ldi	r23, 0x04	; 4
    3b0a:	8f e5       	ldi	r24, 0x5F	; 95
    3b0c:	97 e0       	ldi	r25, 0x07	; 7
    3b0e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3b12:	b8 01       	movw	r22, r16
    3b14:	8f e5       	ldi	r24, 0x5F	; 95
    3b16:	97 e0       	ldi	r25, 0x07	; 7
    3b18:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e8 5e       	subi	r30, 0xE8	; 232
    3b20:	fe 4f       	sbci	r31, 0xFE	; 254
    3b22:	b8 01       	movw	r22, r16
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	b7 01       	movw	r22, r14
    3b30:	ce 01       	movw	r24, r28
    3b32:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    3b36:	18 2f       	mov	r17, r24
    3b38:	64 e0       	ldi	r22, 0x04	; 4
    3b3a:	74 e0       	ldi	r23, 0x04	; 4
    3b3c:	8f e5       	ldi	r24, 0x5F	; 95
    3b3e:	97 e0       	ldi	r25, 0x07	; 7
    3b40:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3b44:	be 01       	movw	r22, r28
    3b46:	62 5f       	subi	r22, 0xF2	; 242
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	8f e5       	ldi	r24, 0x5F	; 95
    3b4c:	97 e0       	ldi	r25, 0x07	; 7
    3b4e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3b52:	81 2f       	mov	r24, r17
    3b54:	df 91       	pop	r29
    3b56:	cf 91       	pop	r28
    3b58:	1f 91       	pop	r17
    3b5a:	0f 91       	pop	r16
    3b5c:	ff 90       	pop	r15
    3b5e:	ef 90       	pop	r14
    3b60:	08 95       	ret

00003b62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    3b62:	ef 92       	push	r14
    3b64:	ff 92       	push	r15
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	ec 01       	movw	r28, r24
    3b70:	8b 01       	movw	r16, r22
    3b72:	7a 01       	movw	r14, r20
    3b74:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3b78:	6d ef       	ldi	r22, 0xFD	; 253
    3b7a:	73 e0       	ldi	r23, 0x03	; 3
    3b7c:	8f e5       	ldi	r24, 0x5F	; 95
    3b7e:	97 e0       	ldi	r25, 0x07	; 7
    3b80:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3b84:	b8 01       	movw	r22, r16
    3b86:	8f e5       	ldi	r24, 0x5F	; 95
    3b88:	97 e0       	ldi	r25, 0x07	; 7
    3b8a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e8 5e       	subi	r30, 0xE8	; 232
    3b92:	fe 4f       	sbci	r31, 0xFE	; 254
    3b94:	b8 01       	movw	r22, r16
    3b96:	80 81       	ld	r24, Z
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    3ba8:	18 2f       	mov	r17, r24
    3baa:	66 ef       	ldi	r22, 0xF6	; 246
    3bac:	73 e0       	ldi	r23, 0x03	; 3
    3bae:	8f e5       	ldi	r24, 0x5F	; 95
    3bb0:	97 e0       	ldi	r25, 0x07	; 7
    3bb2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3bb6:	be 01       	movw	r22, r28
    3bb8:	62 5f       	subi	r22, 0xF2	; 242
    3bba:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbc:	8f e5       	ldi	r24, 0x5F	; 95
    3bbe:	97 e0       	ldi	r25, 0x07	; 7
    3bc0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3bc4:	81 2f       	mov	r24, r17
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	08 95       	ret

00003bd4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    3bd4:	8f 92       	push	r8
    3bd6:	9f 92       	push	r9
    3bd8:	af 92       	push	r10
    3bda:	bf 92       	push	r11
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	ec 01       	movw	r28, r24
    3bee:	6b 01       	movw	r12, r22
    3bf0:	49 01       	movw	r8, r18
    3bf2:	5a 01       	movw	r10, r20
    3bf4:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3bf8:	6f ee       	ldi	r22, 0xEF	; 239
    3bfa:	73 e0       	ldi	r23, 0x03	; 3
    3bfc:	8f e5       	ldi	r24, 0x5F	; 95
    3bfe:	97 e0       	ldi	r25, 0x07	; 7
    3c00:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3c04:	b6 01       	movw	r22, r12
    3c06:	8f e5       	ldi	r24, 0x5F	; 95
    3c08:	97 e0       	ldi	r25, 0x07	; 7
    3c0a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3c0e:	2a e0       	ldi	r18, 0x0A	; 10
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	b5 01       	movw	r22, r10
    3c14:	a4 01       	movw	r20, r8
    3c16:	8f e5       	ldi	r24, 0x5F	; 95
    3c18:	97 e0       	ldi	r25, 0x07	; 7
    3c1a:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN5Print7printlnEli>
    3c1e:	7e 01       	movw	r14, r28
    3c20:	88 ee       	ldi	r24, 0xE8	; 232
    3c22:	e8 1a       	sub	r14, r24
    3c24:	8e ef       	ldi	r24, 0xFE	; 254
    3c26:	f8 0a       	sbc	r15, r24
    3c28:	b6 01       	movw	r22, r12
    3c2a:	f7 01       	movw	r30, r14
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3c34:	2a e0       	ldi	r18, 0x0A	; 10
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	b5 01       	movw	r22, r10
    3c3a:	a4 01       	movw	r20, r8
    3c3c:	f7 01       	movw	r30, r14
    3c3e:	80 81       	ld	r24, Z
    3c40:	91 81       	ldd	r25, Z+1	; 0x01
    3c42:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN5Print7printlnEli>
    3c46:	40 e0       	ldi	r20, 0x00	; 0
    3c48:	b8 01       	movw	r22, r16
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    3c50:	18 2f       	mov	r17, r24
    3c52:	68 ee       	ldi	r22, 0xE8	; 232
    3c54:	73 e0       	ldi	r23, 0x03	; 3
    3c56:	8f e5       	ldi	r24, 0x5F	; 95
    3c58:	97 e0       	ldi	r25, 0x07	; 7
    3c5a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3c5e:	be 01       	movw	r22, r28
    3c60:	62 5f       	subi	r22, 0xF2	; 242
    3c62:	7f 4f       	sbci	r23, 0xFF	; 255
    3c64:	8f e5       	ldi	r24, 0x5F	; 95
    3c66:	97 e0       	ldi	r25, 0x07	; 7
    3c68:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3c6c:	81 2f       	mov	r24, r17
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	df 90       	pop	r13
    3c7c:	cf 90       	pop	r12
    3c7e:	bf 90       	pop	r11
    3c80:	af 90       	pop	r10
    3c82:	9f 90       	pop	r9
    3c84:	8f 90       	pop	r8
    3c86:	08 95       	ret

00003c88 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	ec 01       	movw	r28, r24
    3c9e:	6b 01       	movw	r12, r22
    3ca0:	7a 01       	movw	r14, r20
    3ca2:	59 01       	movw	r10, r18
    3ca4:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3ca8:	61 ee       	ldi	r22, 0xE1	; 225
    3caa:	73 e0       	ldi	r23, 0x03	; 3
    3cac:	8f e5       	ldi	r24, 0x5F	; 95
    3cae:	97 e0       	ldi	r25, 0x07	; 7
    3cb0:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3cb4:	b6 01       	movw	r22, r12
    3cb6:	8f e5       	ldi	r24, 0x5F	; 95
    3cb8:	97 e0       	ldi	r25, 0x07	; 7
    3cba:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3cbe:	62 e2       	ldi	r22, 0x22	; 34
    3cc0:	8f e5       	ldi	r24, 0x5F	; 95
    3cc2:	97 e0       	ldi	r25, 0x07	; 7
    3cc4:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN5Print5printEc>
    3cc8:	b7 01       	movw	r22, r14
    3cca:	8f e5       	ldi	r24, 0x5F	; 95
    3ccc:	97 e0       	ldi	r25, 0x07	; 7
    3cce:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3cd2:	62 e2       	ldi	r22, 0x22	; 34
    3cd4:	8f e5       	ldi	r24, 0x5F	; 95
    3cd6:	97 e0       	ldi	r25, 0x07	; 7
    3cd8:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN5Print7printlnEc>
    3cdc:	8e 01       	movw	r16, r28
    3cde:	08 5e       	subi	r16, 0xE8	; 232
    3ce0:	1e 4f       	sbci	r17, 0xFE	; 254
    3ce2:	b6 01       	movw	r22, r12
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	80 81       	ld	r24, Z
    3ce8:	91 81       	ldd	r25, Z+1	; 0x01
    3cea:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3cee:	62 e2       	ldi	r22, 0x22	; 34
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN5Print5printEc>
    3cfa:	b7 01       	movw	r22, r14
    3cfc:	f8 01       	movw	r30, r16
    3cfe:	80 81       	ld	r24, Z
    3d00:	91 81       	ldd	r25, Z+1	; 0x01
    3d02:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3d06:	62 e2       	ldi	r22, 0x22	; 34
    3d08:	f8 01       	movw	r30, r16
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN5Print7printlnEc>
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	b5 01       	movw	r22, r10
    3d16:	ce 01       	movw	r24, r28
    3d18:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    3d1c:	18 2f       	mov	r17, r24
    3d1e:	6a ed       	ldi	r22, 0xDA	; 218
    3d20:	73 e0       	ldi	r23, 0x03	; 3
    3d22:	8f e5       	ldi	r24, 0x5F	; 95
    3d24:	97 e0       	ldi	r25, 0x07	; 7
    3d26:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3d2a:	be 01       	movw	r22, r28
    3d2c:	62 5f       	subi	r22, 0xF2	; 242
    3d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d30:	8f e5       	ldi	r24, 0x5F	; 95
    3d32:	97 e0       	ldi	r25, 0x07	; 7
    3d34:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3d38:	81 2f       	mov	r24, r17
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	ff 90       	pop	r15
    3d44:	ef 90       	pop	r14
    3d46:	df 90       	pop	r13
    3d48:	cf 90       	pop	r12
    3d4a:	bf 90       	pop	r11
    3d4c:	af 90       	pop	r10
    3d4e:	08 95       	ret

00003d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ec 01       	movw	r28, r24
    3d5a:	8a 01       	movw	r16, r20
    3d5c:	a9 01       	movw	r20, r18
    3d5e:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    3d62:	88 23       	and	r24, r24
    3d64:	41 f0       	breq	.+16     	; 0x3d76 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    3d66:	b8 01       	movw	r22, r16
    3d68:	ce 01       	movw	r24, r28
    3d6a:	0e 96       	adiw	r24, 0x0e	; 14
    3d6c:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcmp_P>
    3d70:	21 e0       	ldi	r18, 0x01	; 1
    3d72:	89 2b       	or	r24, r25
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	82 2f       	mov	r24, r18
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	08 95       	ret

00003d84 <_ZN13Adafruit_FONA5beginER6Stream>:
    3d84:	cf 92       	push	r12
    3d86:	df 92       	push	r13
    3d88:	ef 92       	push	r14
    3d8a:	ff 92       	push	r15
    3d8c:	0f 93       	push	r16
    3d8e:	1f 93       	push	r17
    3d90:	cf 93       	push	r28
    3d92:	df 93       	push	r29
    3d94:	ec 01       	movw	r28, r24
    3d96:	7c 01       	movw	r14, r24
    3d98:	88 ee       	ldi	r24, 0xE8	; 232
    3d9a:	e8 1a       	sub	r14, r24
    3d9c:	8e ef       	ldi	r24, 0xFE	; 254
    3d9e:	f8 0a       	sbc	r15, r24
    3da0:	d7 01       	movw	r26, r14
    3da2:	6d 93       	st	X+, r22
    3da4:	7c 93       	st	X, r23
    3da6:	61 e0       	ldi	r22, 0x01	; 1
    3da8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3daa:	0e 94 2a 1a 	call	0x3454	; 0x3454 <pinMode>
    3dae:	61 e0       	ldi	r22, 0x01	; 1
    3db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3db2:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
    3db6:	6a e0       	ldi	r22, 0x0A	; 10
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dc6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
    3dca:	64 e6       	ldi	r22, 0x64	; 100
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3dd6:	61 e0       	ldi	r22, 0x01	; 1
    3dd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dda:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
    3dde:	6b ee       	ldi	r22, 0xEB	; 235
    3de0:	76 e0       	ldi	r23, 0x06	; 6
    3de2:	8f e5       	ldi	r24, 0x5F	; 95
    3de4:	97 e0       	ldi	r25, 0x07	; 7
    3de6:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3dea:	8e e0       	ldi	r24, 0x0E	; 14
    3dec:	c8 2e       	mov	r12, r24
    3dee:	d1 2c       	mov	r13, r1
    3df0:	8e 01       	movw	r16, r28
    3df2:	0a 5e       	subi	r16, 0xEA	; 234
    3df4:	1e 4f       	sbci	r17, 0xFE	; 254
    3df6:	f7 01       	movw	r30, r14
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	ed 91       	ld	r30, X+
    3e00:	fc 91       	ld	r31, X
    3e02:	04 80       	ldd	r0, Z+4	; 0x04
    3e04:	f5 81       	ldd	r31, Z+5	; 0x05
    3e06:	e0 2d       	mov	r30, r0
    3e08:	09 95       	icall
    3e0a:	89 2b       	or	r24, r25
    3e0c:	89 f0       	breq	.+34     	; 0x3e30 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    3e0e:	66 ed       	ldi	r22, 0xD6	; 214
    3e10:	76 e0       	ldi	r23, 0x06	; 6
    3e12:	8f e5       	ldi	r24, 0x5F	; 95
    3e14:	97 e0       	ldi	r25, 0x07	; 7
    3e16:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3e1a:	f7 01       	movw	r30, r14
    3e1c:	80 81       	ld	r24, Z
    3e1e:	91 81       	ldd	r25, Z+1	; 0x01
    3e20:	dc 01       	movw	r26, r24
    3e22:	ed 91       	ld	r30, X+
    3e24:	fc 91       	ld	r31, X
    3e26:	06 80       	ldd	r0, Z+6	; 0x06
    3e28:	f7 81       	ldd	r31, Z+7	; 0x07
    3e2a:	e0 2d       	mov	r30, r0
    3e2c:	09 95       	icall
    3e2e:	e3 cf       	rjmp	.-58     	; 0x3df6 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    3e30:	f8 01       	movw	r30, r16
    3e32:	40 81       	ld	r20, Z
    3e34:	51 81       	ldd	r21, Z+1	; 0x01
    3e36:	24 ef       	ldi	r18, 0xF4	; 244
    3e38:	31 e0       	ldi	r19, 0x01	; 1
    3e3a:	63 ed       	ldi	r22, 0xD3	; 211
    3e3c:	76 e0       	ldi	r23, 0x06	; 6
    3e3e:	ce 01       	movw	r24, r28
    3e40:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3e44:	81 11       	cpse	r24, r1
    3e46:	63 c0       	rjmp	.+198    	; 0x3f0e <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    3e48:	d7 01       	movw	r26, r14
    3e4a:	8d 91       	ld	r24, X+
    3e4c:	9c 91       	ld	r25, X
    3e4e:	dc 01       	movw	r26, r24
    3e50:	ed 91       	ld	r30, X+
    3e52:	fc 91       	ld	r31, X
    3e54:	04 80       	ldd	r0, Z+4	; 0x04
    3e56:	f5 81       	ldd	r31, Z+5	; 0x05
    3e58:	e0 2d       	mov	r30, r0
    3e5a:	09 95       	icall
    3e5c:	89 2b       	or	r24, r25
    3e5e:	59 f0       	breq	.+22     	; 0x3e76 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    3e60:	f7 01       	movw	r30, r14
    3e62:	80 81       	ld	r24, Z
    3e64:	91 81       	ldd	r25, Z+1	; 0x01
    3e66:	dc 01       	movw	r26, r24
    3e68:	ed 91       	ld	r30, X+
    3e6a:	fc 91       	ld	r31, X
    3e6c:	06 80       	ldd	r0, Z+6	; 0x06
    3e6e:	f7 81       	ldd	r31, Z+7	; 0x07
    3e70:	e0 2d       	mov	r30, r0
    3e72:	09 95       	icall
    3e74:	e9 cf       	rjmp	.-46     	; 0x3e48 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    3e76:	24 ef       	ldi	r18, 0xF4	; 244
    3e78:	31 e0       	ldi	r19, 0x01	; 1
    3e7a:	40 ed       	ldi	r20, 0xD0	; 208
    3e7c:	56 e0       	ldi	r21, 0x06	; 6
    3e7e:	6d ec       	ldi	r22, 0xCD	; 205
    3e80:	76 e0       	ldi	r23, 0x06	; 6
    3e82:	ce 01       	movw	r24, r28
    3e84:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3e88:	81 11       	cpse	r24, r1
    3e8a:	41 c0       	rjmp	.+130    	; 0x3f0e <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    3e8c:	64 ef       	ldi	r22, 0xF4	; 244
    3e8e:	71 e0       	ldi	r23, 0x01	; 1
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3e98:	b1 e0       	ldi	r27, 0x01	; 1
    3e9a:	cb 1a       	sub	r12, r27
    3e9c:	d1 08       	sbc	r13, r1
    3e9e:	09 f0       	breq	.+2      	; 0x3ea2 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    3ea0:	aa cf       	rjmp	.-172    	; 0x3df6 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    3ea2:	6b e9       	ldi	r22, 0x9B	; 155
    3ea4:	76 e0       	ldi	r23, 0x06	; 6
    3ea6:	8f e5       	ldi	r24, 0x5F	; 95
    3ea8:	97 e0       	ldi	r25, 0x07	; 7
    3eaa:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3eae:	d8 01       	movw	r26, r16
    3eb0:	4d 91       	ld	r20, X+
    3eb2:	5c 91       	ld	r21, X
    3eb4:	24 ef       	ldi	r18, 0xF4	; 244
    3eb6:	31 e0       	ldi	r19, 0x01	; 1
    3eb8:	68 e9       	ldi	r22, 0x98	; 152
    3eba:	76 e0       	ldi	r23, 0x06	; 6
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3ec2:	64 e6       	ldi	r22, 0x64	; 100
    3ec4:	70 e0       	ldi	r23, 0x00	; 0
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3ece:	f8 01       	movw	r30, r16
    3ed0:	40 81       	ld	r20, Z
    3ed2:	51 81       	ldd	r21, Z+1	; 0x01
    3ed4:	24 ef       	ldi	r18, 0xF4	; 244
    3ed6:	31 e0       	ldi	r19, 0x01	; 1
    3ed8:	65 e9       	ldi	r22, 0x95	; 149
    3eda:	76 e0       	ldi	r23, 0x06	; 6
    3edc:	ce 01       	movw	r24, r28
    3ede:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3ee2:	64 e6       	ldi	r22, 0x64	; 100
    3ee4:	70 e0       	ldi	r23, 0x00	; 0
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3eee:	d8 01       	movw	r26, r16
    3ef0:	4d 91       	ld	r20, X+
    3ef2:	5c 91       	ld	r21, X
    3ef4:	24 ef       	ldi	r18, 0xF4	; 244
    3ef6:	31 e0       	ldi	r19, 0x01	; 1
    3ef8:	62 e9       	ldi	r22, 0x92	; 146
    3efa:	76 e0       	ldi	r23, 0x06	; 6
    3efc:	ce 01       	movw	r24, r28
    3efe:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3f02:	64 e6       	ldi	r22, 0x64	; 100
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3f0e:	f8 01       	movw	r30, r16
    3f10:	40 81       	ld	r20, Z
    3f12:	51 81       	ldd	r21, Z+1	; 0x01
    3f14:	24 ef       	ldi	r18, 0xF4	; 244
    3f16:	31 e0       	ldi	r19, 0x01	; 1
    3f18:	6d e8       	ldi	r22, 0x8D	; 141
    3f1a:	76 e0       	ldi	r23, 0x06	; 6
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3f22:	64 e6       	ldi	r22, 0x64	; 100
    3f24:	70 e0       	ldi	r23, 0x00	; 0
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3f2e:	d8 01       	movw	r26, r16
    3f30:	4d 91       	ld	r20, X+
    3f32:	5c 91       	ld	r21, X
    3f34:	24 ef       	ldi	r18, 0xF4	; 244
    3f36:	31 e0       	ldi	r19, 0x01	; 1
    3f38:	68 e8       	ldi	r22, 0x88	; 136
    3f3a:	76 e0       	ldi	r23, 0x06	; 6
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3f42:	d8 2e       	mov	r13, r24
    3f44:	88 23       	and	r24, r24
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    3f48:	97 c0       	rjmp	.+302    	; 0x4078 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    3f4a:	f8 01       	movw	r30, r16
    3f4c:	40 81       	ld	r20, Z
    3f4e:	51 81       	ldd	r21, Z+1	; 0x01
    3f50:	24 ef       	ldi	r18, 0xF4	; 244
    3f52:	31 e0       	ldi	r19, 0x01	; 1
    3f54:	6e e7       	ldi	r22, 0x7E	; 126
    3f56:	76 e0       	ldi	r23, 0x06	; 6
    3f58:	ce 01       	movw	r24, r28
    3f5a:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3f5e:	64 e6       	ldi	r22, 0x64	; 100
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 8a 19 	call	0x3314	; 0x3314 <delay>
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    3f70:	67 e7       	ldi	r22, 0x77	; 119
    3f72:	76 e0       	ldi	r23, 0x06	; 6
    3f74:	8f e5       	ldi	r24, 0x5F	; 95
    3f76:	97 e0       	ldi	r25, 0x07	; 7
    3f78:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3f7c:	6d ed       	ldi	r22, 0xDD	; 221
    3f7e:	72 e0       	ldi	r23, 0x02	; 2
    3f80:	8f e5       	ldi	r24, 0x5F	; 95
    3f82:	97 e0       	ldi	r25, 0x07	; 7
    3f84:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3f88:	6d ed       	ldi	r22, 0xDD	; 221
    3f8a:	72 e0       	ldi	r23, 0x02	; 2
    3f8c:	d7 01       	movw	r26, r14
    3f8e:	8d 91       	ld	r24, X+
    3f90:	9c 91       	ld	r25, X
    3f92:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3f96:	41 e0       	ldi	r20, 0x01	; 1
    3f98:	64 ef       	ldi	r22, 0xF4	; 244
    3f9a:	71 e0       	ldi	r23, 0x01	; 1
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    3fa2:	60 e7       	ldi	r22, 0x70	; 112
    3fa4:	76 e0       	ldi	r23, 0x06	; 6
    3fa6:	8f e5       	ldi	r24, 0x5F	; 95
    3fa8:	97 e0       	ldi	r25, 0x07	; 7
    3faa:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    3fae:	8e 01       	movw	r16, r28
    3fb0:	02 5f       	subi	r16, 0xF2	; 242
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	b8 01       	movw	r22, r16
    3fb6:	8f e5       	ldi	r24, 0x5F	; 95
    3fb8:	97 e0       	ldi	r25, 0x07	; 7
    3fba:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    3fbe:	65 e6       	ldi	r22, 0x65	; 101
    3fc0:	76 e0       	ldi	r23, 0x06	; 6
    3fc2:	c8 01       	movw	r24, r16
    3fc4:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    3fc8:	89 2b       	or	r24, r25
    3fca:	11 f0       	breq	.+4      	; 0x3fd0 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    3fcc:	83 e0       	ldi	r24, 0x03	; 3
    3fce:	23 c0       	rjmp	.+70     	; 0x4016 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3fd0:	6a e5       	ldi	r22, 0x5A	; 90
    3fd2:	76 e0       	ldi	r23, 0x06	; 6
    3fd4:	c8 01       	movw	r24, r16
    3fd6:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    3fda:	89 2b       	or	r24, r25
    3fdc:	11 f0       	breq	.+4      	; 0x3fe2 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	1a c0       	rjmp	.+52     	; 0x4016 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3fe2:	6f e4       	ldi	r22, 0x4F	; 79
    3fe4:	76 e0       	ldi	r23, 0x06	; 6
    3fe6:	c8 01       	movw	r24, r16
    3fe8:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    3fec:	89 2b       	or	r24, r25
    3fee:	11 f0       	breq	.+4      	; 0x3ff4 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	11 c0       	rjmp	.+34     	; 0x4016 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3ff4:	6f e3       	ldi	r22, 0x3F	; 63
    3ff6:	76 e0       	ldi	r23, 0x06	; 6
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    3ffe:	89 2b       	or	r24, r25
    4000:	11 f0       	breq	.+4      	; 0x4006 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    4002:	84 e0       	ldi	r24, 0x04	; 4
    4004:	08 c0       	rjmp	.+16     	; 0x4016 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4006:	6f e2       	ldi	r22, 0x2F	; 47
    4008:	76 e0       	ldi	r23, 0x06	; 6
    400a:	c8 01       	movw	r24, r16
    400c:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    4010:	89 2b       	or	r24, r25
    4012:	11 f0       	breq	.+4      	; 0x4018 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    4014:	85 e0       	ldi	r24, 0x05	; 5
    4016:	8d 87       	std	Y+13, r24	; 0x0d
    4018:	8d 85       	ldd	r24, Y+13	; 0x0d
    401a:	81 30       	cpi	r24, 0x01	; 1
    401c:	69 f5       	brne	.+90     	; 0x4078 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    401e:	68 e2       	ldi	r22, 0x28	; 40
    4020:	76 e0       	ldi	r23, 0x06	; 6
    4022:	8f e5       	ldi	r24, 0x5F	; 95
    4024:	97 e0       	ldi	r25, 0x07	; 7
    4026:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    402a:	61 ee       	ldi	r22, 0xE1	; 225
    402c:	72 e0       	ldi	r23, 0x02	; 2
    402e:	8f e5       	ldi	r24, 0x5F	; 95
    4030:	97 e0       	ldi	r25, 0x07	; 7
    4032:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    4036:	61 ee       	ldi	r22, 0xE1	; 225
    4038:	72 e0       	ldi	r23, 0x02	; 2
    403a:	f7 01       	movw	r30, r14
    403c:	80 81       	ld	r24, Z
    403e:	91 81       	ldd	r25, Z+1	; 0x01
    4040:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    4044:	41 e0       	ldi	r20, 0x01	; 1
    4046:	64 ef       	ldi	r22, 0xF4	; 244
    4048:	71 e0       	ldi	r23, 0x01	; 1
    404a:	ce 01       	movw	r24, r28
    404c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    4050:	61 e2       	ldi	r22, 0x21	; 33
    4052:	76 e0       	ldi	r23, 0x06	; 6
    4054:	8f e5       	ldi	r24, 0x5F	; 95
    4056:	97 e0       	ldi	r25, 0x07	; 7
    4058:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    405c:	b8 01       	movw	r22, r16
    405e:	8f e5       	ldi	r24, 0x5F	; 95
    4060:	97 e0       	ldi	r25, 0x07	; 7
    4062:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    4066:	69 e1       	ldi	r22, 0x19	; 25
    4068:	76 e0       	ldi	r23, 0x06	; 6
    406a:	c8 01       	movw	r24, r16
    406c:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    4070:	89 2b       	or	r24, r25
    4072:	11 f0       	breq	.+4      	; 0x4078 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4074:	86 e0       	ldi	r24, 0x06	; 6
    4076:	8d 87       	std	Y+13, r24	; 0x0d
    4078:	8d 2d       	mov	r24, r13
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	ff 90       	pop	r15
    4084:	ef 90       	pop	r14
    4086:	df 90       	pop	r13
    4088:	cf 90       	pop	r12
    408a:	08 95       	ret

0000408c <_ZN13Adafruit_FONA9HTTP_initEv>:
    408c:	fc 01       	movw	r30, r24
    408e:	ea 5e       	subi	r30, 0xEA	; 234
    4090:	fe 4f       	sbci	r31, 0xFE	; 254
    4092:	40 81       	ld	r20, Z
    4094:	51 81       	ldd	r21, Z+1	; 0x01
    4096:	24 ef       	ldi	r18, 0xF4	; 244
    4098:	31 e0       	ldi	r19, 0x01	; 1
    409a:	6b ef       	ldi	r22, 0xFB	; 251
    409c:	74 e0       	ldi	r23, 0x04	; 4
    409e:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000040a2 <_ZN13Adafruit_FONA9HTTP_termEv>:
    40a2:	fc 01       	movw	r30, r24
    40a4:	ea 5e       	subi	r30, 0xEA	; 234
    40a6:	fe 4f       	sbci	r31, 0xFE	; 254
    40a8:	40 81       	ld	r20, Z
    40aa:	51 81       	ldd	r21, Z+1	; 0x01
    40ac:	24 ef       	ldi	r18, 0xF4	; 244
    40ae:	31 e0       	ldi	r19, 0x01	; 1
    40b0:	6f ee       	ldi	r22, 0xEF	; 239
    40b2:	74 e0       	ldi	r23, 0x04	; 4
    40b4:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000040b8 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    40b8:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <_ZN13Adafruit_FONA9HTTP_termEv>

000040bc <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    40bc:	0f 93       	push	r16
    40be:	1f 93       	push	r17
    40c0:	cf 93       	push	r28
    40c2:	df 93       	push	r29
    40c4:	ec 01       	movw	r28, r24
    40c6:	8a 01       	movw	r16, r20
    40c8:	a9 01       	movw	r20, r18
    40ca:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_ZN13Adafruit_FONA8getReplyEPcj>
    40ce:	88 23       	and	r24, r24
    40d0:	41 f0       	breq	.+16     	; 0x40e2 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    40d2:	b8 01       	movw	r22, r16
    40d4:	ce 01       	movw	r24, r28
    40d6:	0e 96       	adiw	r24, 0x0e	; 14
    40d8:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcmp_P>
    40dc:	21 e0       	ldi	r18, 0x01	; 1
    40de:	89 2b       	or	r24, r25
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	82 2f       	mov	r24, r18
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	08 95       	ret

000040f0 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    40f0:	af 92       	push	r10
    40f2:	bf 92       	push	r11
    40f4:	cf 92       	push	r12
    40f6:	df 92       	push	r13
    40f8:	ef 92       	push	r14
    40fa:	ff 92       	push	r15
    40fc:	0f 93       	push	r16
    40fe:	1f 93       	push	r17
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    4108:	6e 97       	sbiw	r28, 0x1e	; 30
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	8c 01       	movw	r16, r24
    4116:	5b 01       	movw	r10, r22
    4118:	6a 01       	movw	r12, r20
    411a:	fc 01       	movw	r30, r24
    411c:	ea 5e       	subi	r30, 0xEA	; 234
    411e:	fe 4f       	sbci	r31, 0xFE	; 254
    4120:	40 81       	ld	r20, Z
    4122:	51 81       	ldd	r21, Z+1	; 0x01
    4124:	24 ef       	ldi	r18, 0xF4	; 244
    4126:	31 e0       	ldi	r19, 0x01	; 1
    4128:	62 ee       	ldi	r22, 0xE2	; 226
    412a:	75 e0       	ldi	r23, 0x05	; 5
    412c:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4130:	88 23       	and	r24, r24
    4132:	09 f4       	brne	.+2      	; 0x4136 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4134:	88 c0       	rjmp	.+272    	; 0x4246 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4136:	8a e0       	ldi	r24, 0x0A	; 10
    4138:	e0 ee       	ldi	r30, 0xE0	; 224
    413a:	f1 e0       	ldi	r31, 0x01	; 1
    413c:	9e 01       	movw	r18, r28
    413e:	2f 5f       	subi	r18, 0xFF	; 255
    4140:	3f 4f       	sbci	r19, 0xFF	; 255
    4142:	79 01       	movw	r14, r18
    4144:	d9 01       	movw	r26, r18
    4146:	01 90       	ld	r0, Z+
    4148:	0d 92       	st	X+, r0
    414a:	8a 95       	dec	r24
    414c:	e1 f7       	brne	.-8      	; 0x4146 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    414e:	fe 01       	movw	r30, r28
    4150:	3b 96       	adiw	r30, 0x0b	; 11
    4152:	84 e1       	ldi	r24, 0x14	; 20
    4154:	df 01       	movw	r26, r30
    4156:	1d 92       	st	X+, r1
    4158:	8a 95       	dec	r24
    415a:	e9 f7       	brne	.-6      	; 0x4156 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    415c:	43 e1       	ldi	r20, 0x13	; 19
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	b5 01       	movw	r22, r10
    4162:	ce 01       	movw	r24, r28
    4164:	0a 96       	adiw	r24, 0x0a	; 10
    4166:	0e 94 82 2b 	call	0x5704	; 0x5704 <strncpy>
    416a:	f7 01       	movw	r30, r14
    416c:	01 90       	ld	r0, Z+
    416e:	00 20       	and	r0, r0
    4170:	e9 f7       	brne	.-6      	; 0x416c <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    4172:	31 97       	sbiw	r30, 0x01	; 1
    4174:	82 e2       	ldi	r24, 0x22	; 34
    4176:	80 83       	st	Z, r24
    4178:	24 ef       	ldi	r18, 0xF4	; 244
    417a:	31 e0       	ldi	r19, 0x01	; 1
    417c:	4f ed       	ldi	r20, 0xDF	; 223
    417e:	55 e0       	ldi	r21, 0x05	; 5
    4180:	b7 01       	movw	r22, r14
    4182:	c8 01       	movw	r24, r16
    4184:	0e 94 5e 20 	call	0x40bc	; 0x40bc <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    4188:	88 23       	and	r24, r24
    418a:	09 f4       	brne	.+2      	; 0x418e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    418c:	5c c0       	rjmp	.+184    	; 0x4246 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    418e:	6c ed       	ldi	r22, 0xDC	; 220
    4190:	75 e0       	ldi	r23, 0x05	; 5
    4192:	8f e5       	ldi	r24, 0x5F	; 95
    4194:	97 e0       	ldi	r25, 0x07	; 7
    4196:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    419a:	b6 01       	movw	r22, r12
    419c:	8f e5       	ldi	r24, 0x5F	; 95
    419e:	97 e0       	ldi	r25, 0x07	; 7
    41a0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    41a4:	b6 01       	movw	r22, r12
    41a6:	78 01       	movw	r14, r16
    41a8:	b8 ee       	ldi	r27, 0xE8	; 232
    41aa:	eb 1a       	sub	r14, r27
    41ac:	be ef       	ldi	r27, 0xFE	; 254
    41ae:	fb 0a       	sbc	r15, r27
    41b0:	f7 01       	movw	r30, r14
    41b2:	80 81       	ld	r24, Z
    41b4:	91 81       	ldd	r25, Z+1	; 0x01
    41b6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    41ba:	d7 01       	movw	r26, r14
    41bc:	8d 91       	ld	r24, X+
    41be:	9c 91       	ld	r25, X
    41c0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEv>
    41c4:	f7 01       	movw	r30, r14
    41c6:	80 81       	ld	r24, Z
    41c8:	91 81       	ldd	r25, Z+1	; 0x01
    41ca:	dc 01       	movw	r26, r24
    41cc:	ed 91       	ld	r30, X+
    41ce:	fc 91       	ld	r31, X
    41d0:	01 90       	ld	r0, Z+
    41d2:	f0 81       	ld	r31, Z
    41d4:	e0 2d       	mov	r30, r0
    41d6:	6a e1       	ldi	r22, 0x1A	; 26
    41d8:	09 95       	icall
    41da:	6a ef       	ldi	r22, 0xFA	; 250
    41dc:	72 e0       	ldi	r23, 0x02	; 2
    41de:	8f e5       	ldi	r24, 0x5F	; 95
    41e0:	97 e0       	ldi	r25, 0x07	; 7
    41e2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    41e6:	f8 01       	movw	r30, r16
    41e8:	85 85       	ldd	r24, Z+13	; 0x0d
    41ea:	84 50       	subi	r24, 0x04	; 4
    41ec:	82 30       	cpi	r24, 0x02	; 2
    41ee:	60 f4       	brcc	.+24     	; 0x4208 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    41f0:	40 e0       	ldi	r20, 0x00	; 0
    41f2:	68 ec       	ldi	r22, 0xC8	; 200
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	c8 01       	movw	r24, r16
    41f8:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	68 ec       	ldi	r22, 0xC8	; 200
    4200:	70 e0       	ldi	r23, 0x00	; 0
    4202:	c8 01       	movw	r24, r16
    4204:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	60 e1       	ldi	r22, 0x10	; 16
    420c:	77 e2       	ldi	r23, 0x27	; 39
    420e:	c8 01       	movw	r24, r16
    4210:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    4214:	78 01       	movw	r14, r16
    4216:	fe e0       	ldi	r31, 0x0E	; 14
    4218:	ef 0e       	add	r14, r31
    421a:	f1 1c       	adc	r15, r1
    421c:	6d ef       	ldi	r22, 0xFD	; 253
    421e:	72 e0       	ldi	r23, 0x02	; 2
    4220:	c7 01       	movw	r24, r14
    4222:	0e 94 91 2b 	call	0x5722	; 0x5722 <strstr>
    4226:	89 2b       	or	r24, r25
    4228:	71 f0       	breq	.+28     	; 0x4246 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    422a:	40 e0       	ldi	r20, 0x00	; 0
    422c:	68 ee       	ldi	r22, 0xE8	; 232
    422e:	73 e0       	ldi	r23, 0x03	; 3
    4230:	c8 01       	movw	r24, r16
    4232:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    4236:	60 ed       	ldi	r22, 0xD0	; 208
    4238:	72 e0       	ldi	r23, 0x02	; 2
    423a:	c7 01       	movw	r24, r14
    423c:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <strcmp>
    4240:	21 e0       	ldi	r18, 0x01	; 1
    4242:	89 2b       	or	r24, r25
    4244:	09 f0       	breq	.+2      	; 0x4248 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	82 2f       	mov	r24, r18
    424a:	6e 96       	adiw	r28, 0x1e	; 30
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	f8 94       	cli
    4250:	de bf       	out	0x3e, r29	; 62
    4252:	0f be       	out	0x3f, r0	; 63
    4254:	cd bf       	out	0x3d, r28	; 61
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	1f 91       	pop	r17
    425c:	0f 91       	pop	r16
    425e:	ff 90       	pop	r15
    4260:	ef 90       	pop	r14
    4262:	df 90       	pop	r13
    4264:	cf 90       	pop	r12
    4266:	bf 90       	pop	r11
    4268:	af 90       	pop	r10
    426a:	08 95       	ret

0000426c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    426c:	cf 92       	push	r12
    426e:	df 92       	push	r13
    4270:	ef 92       	push	r14
    4272:	ff 92       	push	r15
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	ec 01       	movw	r28, r24
    427e:	68 01       	movw	r12, r16
    4280:	87 01       	movw	r16, r14
    4282:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4286:	b6 01       	movw	r22, r12
    4288:	ce 01       	movw	r24, r28
    428a:	0e 96       	adiw	r24, 0x0e	; 14
    428c:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcmp_P>
    4290:	21 e0       	ldi	r18, 0x01	; 1
    4292:	89 2b       	or	r24, r25
    4294:	09 f0       	breq	.+2      	; 0x4298 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	82 2f       	mov	r24, r18
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	df 90       	pop	r13
    42a8:	cf 90       	pop	r12
    42aa:	08 95       	ret

000042ac <_ZN13Adafruit_FONA8HTTP_sslEb>:
    42ac:	ef 92       	push	r14
    42ae:	ff 92       	push	r15
    42b0:	0f 93       	push	r16
    42b2:	1f 93       	push	r17
    42b4:	fc 01       	movw	r30, r24
    42b6:	ea 5e       	subi	r30, 0xEA	; 234
    42b8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ba:	00 81       	ld	r16, Z
    42bc:	11 81       	ldd	r17, Z+1	; 0x01
    42be:	26 2f       	mov	r18, r22
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	64 ef       	ldi	r22, 0xF4	; 244
    42c8:	e6 2e       	mov	r14, r22
    42ca:	ff 24       	eor	r15, r15
    42cc:	f3 94       	inc	r15
    42ce:	6f e4       	ldi	r22, 0x4F	; 79
    42d0:	74 e0       	ldi	r23, 0x04	; 4
    42d2:	0e 94 36 21 	call	0x426c	; 0x426c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    42d6:	1f 91       	pop	r17
    42d8:	0f 91       	pop	r16
    42da:	ff 90       	pop	r15
    42dc:	ef 90       	pop	r14
    42de:	08 95       	ret

000042e0 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	ec 01       	movw	r28, r24
    42ea:	8b 01       	movw	r16, r22
    42ec:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN13Adafruit_FONA9HTTP_termEv>
    42f0:	ce 01       	movw	r24, r28
    42f2:	0e 94 46 20 	call	0x408c	; 0x408c <_ZN13Adafruit_FONA9HTTP_initEv>
    42f6:	81 11       	cpse	r24, r1
    42f8:	02 c0       	rjmp	.+4      	; 0x42fe <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	38 c0       	rjmp	.+112    	; 0x436e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    42fe:	21 e0       	ldi	r18, 0x01	; 1
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e0       	ldi	r20, 0x00	; 0
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	64 e3       	ldi	r22, 0x34	; 52
    4308:	74 e0       	ldi	r23, 0x04	; 4
    430a:	ce 01       	movw	r24, r28
    430c:	0e 94 ed 1c 	call	0x39da	; 0x39da <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4310:	88 23       	and	r24, r24
    4312:	99 f3       	breq	.-26     	; 0x42fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4314:	fe 01       	movw	r30, r28
    4316:	ec 5e       	subi	r30, 0xEC	; 236
    4318:	fe 4f       	sbci	r31, 0xFE	; 254
    431a:	40 81       	ld	r20, Z
    431c:	51 81       	ldd	r21, Z+1	; 0x01
    431e:	61 e3       	ldi	r22, 0x31	; 49
    4320:	74 e0       	ldi	r23, 0x04	; 4
    4322:	ce 01       	movw	r24, r28
    4324:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4328:	88 23       	and	r24, r24
    432a:	39 f3       	breq	.-50     	; 0x42fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    432c:	a8 01       	movw	r20, r16
    432e:	6d e2       	ldi	r22, 0x2D	; 45
    4330:	74 e0       	ldi	r23, 0x04	; 4
    4332:	ce 01       	movw	r24, r28
    4334:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    4338:	88 23       	and	r24, r24
    433a:	f9 f2       	breq	.-66     	; 0x42fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    433c:	fe 01       	movw	r30, r28
    433e:	ed 5e       	subi	r30, 0xED	; 237
    4340:	fe 4f       	sbci	r31, 0xFE	; 254
    4342:	90 81       	ld	r25, Z
    4344:	99 23       	and	r25, r25
    4346:	99 f0       	breq	.+38     	; 0x436e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4348:	21 e0       	ldi	r18, 0x01	; 1
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	40 e0       	ldi	r20, 0x00	; 0
    434e:	50 e0       	ldi	r21, 0x00	; 0
    4350:	67 e2       	ldi	r22, 0x27	; 39
    4352:	74 e0       	ldi	r23, 0x04	; 4
    4354:	ce 01       	movw	r24, r28
    4356:	0e 94 ed 1c 	call	0x39da	; 0x39da <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    435a:	88 23       	and	r24, r24
    435c:	71 f2       	breq	.-100    	; 0x42fa <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    435e:	61 e0       	ldi	r22, 0x01	; 1
    4360:	ce 01       	movw	r24, r28
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <_ZN13Adafruit_FONA8HTTP_sslEb>
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	08 95       	ret

00004378 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4378:	ef 92       	push	r14
    437a:	ff 92       	push	r15
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	ec 01       	movw	r28, r24
    4386:	79 01       	movw	r14, r18
    4388:	98 01       	movw	r18, r16
    438a:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    438e:	b7 01       	movw	r22, r14
    4390:	ce 01       	movw	r24, r28
    4392:	0e 96       	adiw	r24, 0x0e	; 14
    4394:	0e 94 29 2b 	call	0x5652	; 0x5652 <strcmp_P>
    4398:	21 e0       	ldi	r18, 0x01	; 1
    439a:	89 2b       	or	r24, r25
    439c:	09 f0       	breq	.+2      	; 0x43a0 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	82 2f       	mov	r24, r18
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	ff 90       	pop	r15
    43ac:	ef 90       	pop	r14
    43ae:	08 95       	ret

000043b0 <_ZN13Adafruit_FONA10enableGPRSEb>:
    43b0:	8f 92       	push	r8
    43b2:	9f 92       	push	r9
    43b4:	af 92       	push	r10
    43b6:	bf 92       	push	r11
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	ec 01       	movw	r28, r24
    43ca:	20 e2       	ldi	r18, 0x20	; 32
    43cc:	3e e4       	ldi	r19, 0x4E	; 78
    43ce:	66 23       	and	r22, r22
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    43d2:	0f c1       	rjmp	.+542    	; 0x45f2 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    43d4:	44 ed       	ldi	r20, 0xD4	; 212
    43d6:	55 e0       	ldi	r21, 0x05	; 5
    43d8:	69 ec       	ldi	r22, 0xC9	; 201
    43da:	75 e0       	ldi	r23, 0x05	; 5
    43dc:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    43e0:	7e 01       	movw	r14, r28
    43e2:	8a ee       	ldi	r24, 0xEA	; 234
    43e4:	e8 1a       	sub	r14, r24
    43e6:	8e ef       	ldi	r24, 0xFE	; 254
    43e8:	f8 0a       	sbc	r15, r24
    43ea:	f7 01       	movw	r30, r14
    43ec:	40 81       	ld	r20, Z
    43ee:	51 81       	ldd	r21, Z+1	; 0x01
    43f0:	20 e1       	ldi	r18, 0x10	; 16
    43f2:	37 e2       	ldi	r19, 0x27	; 39
    43f4:	6e eb       	ldi	r22, 0xBE	; 190
    43f6:	75 e0       	ldi	r23, 0x05	; 5
    43f8:	ce 01       	movw	r24, r28
    43fa:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    43fe:	88 23       	and	r24, r24
    4400:	09 f4       	brne	.+2      	; 0x4404 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    4402:	24 c1       	rjmp	.+584    	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4404:	f7 01       	movw	r30, r14
    4406:	40 81       	ld	r20, Z
    4408:	51 81       	ldd	r21, Z+1	; 0x01
    440a:	20 e1       	ldi	r18, 0x10	; 16
    440c:	37 e2       	ldi	r19, 0x27	; 39
    440e:	60 ea       	ldi	r22, 0xA0	; 160
    4410:	75 e0       	ldi	r23, 0x05	; 5
    4412:	ce 01       	movw	r24, r28
    4414:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4418:	88 23       	and	r24, r24
    441a:	09 f4       	brne	.+2      	; 0x441e <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    441c:	17 c1       	rjmp	.+558    	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    441e:	4e 01       	movw	r8, r28
    4420:	f3 ef       	ldi	r31, 0xF3	; 243
    4422:	8f 1a       	sub	r8, r31
    4424:	fe ef       	ldi	r31, 0xFE	; 254
    4426:	9f 0a       	sbc	r9, r31
    4428:	f4 01       	movw	r30, r8
    442a:	40 81       	ld	r20, Z
    442c:	51 81       	ldd	r21, Z+1	; 0x01
    442e:	41 15       	cp	r20, r1
    4430:	51 05       	cpc	r21, r1
    4432:	a9 f4       	brne	.+42     	; 0x445e <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4434:	f7 01       	movw	r30, r14
    4436:	40 81       	ld	r20, Z
    4438:	51 81       	ldd	r21, Z+1	; 0x01
    443a:	20 e3       	ldi	r18, 0x30	; 48
    443c:	35 e7       	ldi	r19, 0x75	; 117
    443e:	6b e3       	ldi	r22, 0x3B	; 59
    4440:	75 e0       	ldi	r23, 0x05	; 5
    4442:	ce 01       	movw	r24, r28
    4444:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4448:	88 23       	and	r24, r24
    444a:	09 f4       	brne	.+2      	; 0x444e <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    444c:	ff c0       	rjmp	.+510    	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    444e:	f7 01       	movw	r30, r14
    4450:	40 81       	ld	r20, Z
    4452:	51 81       	ldd	r21, Z+1	; 0x01
    4454:	20 e1       	ldi	r18, 0x10	; 16
    4456:	37 e2       	ldi	r19, 0x27	; 39
    4458:	62 e3       	ldi	r22, 0x32	; 50
    445a:	75 e0       	ldi	r23, 0x05	; 5
    445c:	e8 c0       	rjmp	.+464    	; 0x462e <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    445e:	f7 01       	movw	r30, r14
    4460:	20 81       	ld	r18, Z
    4462:	31 81       	ldd	r19, Z+1	; 0x01
    4464:	00 e1       	ldi	r16, 0x10	; 16
    4466:	17 e2       	ldi	r17, 0x27	; 39
    4468:	6c e8       	ldi	r22, 0x8C	; 140
    446a:	75 e0       	ldi	r23, 0x05	; 5
    446c:	ce 01       	movw	r24, r28
    446e:	0e 94 bc 21 	call	0x4378	; 0x4378 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4472:	88 23       	and	r24, r24
    4474:	09 f4       	brne	.+2      	; 0x4478 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4476:	ea c0       	rjmp	.+468    	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4478:	ce 01       	movw	r24, r28
    447a:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN13Adafruit_FONA10flushInputEv>
    447e:	8e 01       	movw	r16, r28
    4480:	08 5e       	subi	r16, 0xE8	; 232
    4482:	1e 4f       	sbci	r17, 0xFE	; 254
    4484:	62 e8       	ldi	r22, 0x82	; 130
    4486:	75 e0       	ldi	r23, 0x05	; 5
    4488:	f8 01       	movw	r30, r16
    448a:	80 81       	ld	r24, Z
    448c:	91 81       	ldd	r25, Z+1	; 0x01
    448e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    4492:	f4 01       	movw	r30, r8
    4494:	60 81       	ld	r22, Z
    4496:	71 81       	ldd	r23, Z+1	; 0x01
    4498:	f8 01       	movw	r30, r16
    449a:	80 81       	ld	r24, Z
    449c:	91 81       	ldd	r25, Z+1	; 0x01
    449e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    44a2:	5e 01       	movw	r10, r28
    44a4:	f1 ef       	ldi	r31, 0xF1	; 241
    44a6:	af 1a       	sub	r10, r31
    44a8:	fe ef       	ldi	r31, 0xFE	; 254
    44aa:	bf 0a       	sbc	r11, r31
    44ac:	f5 01       	movw	r30, r10
    44ae:	80 81       	ld	r24, Z
    44b0:	91 81       	ldd	r25, Z+1	; 0x01
    44b2:	89 2b       	or	r24, r25
    44b4:	79 f0       	breq	.+30     	; 0x44d4 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    44b6:	6e e1       	ldi	r22, 0x1E	; 30
    44b8:	73 e0       	ldi	r23, 0x03	; 3
    44ba:	f8 01       	movw	r30, r16
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    44c4:	f5 01       	movw	r30, r10
    44c6:	60 81       	ld	r22, Z
    44c8:	71 81       	ldd	r23, Z+1	; 0x01
    44ca:	f8 01       	movw	r30, r16
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    44d4:	6e 01       	movw	r12, r28
    44d6:	ff ee       	ldi	r31, 0xEF	; 239
    44d8:	cf 1a       	sub	r12, r31
    44da:	fe ef       	ldi	r31, 0xFE	; 254
    44dc:	df 0a       	sbc	r13, r31
    44de:	f6 01       	movw	r30, r12
    44e0:	80 81       	ld	r24, Z
    44e2:	91 81       	ldd	r25, Z+1	; 0x01
    44e4:	89 2b       	or	r24, r25
    44e6:	79 f0       	breq	.+30     	; 0x4506 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    44e8:	6e e1       	ldi	r22, 0x1E	; 30
    44ea:	73 e0       	ldi	r23, 0x03	; 3
    44ec:	f8 01       	movw	r30, r16
    44ee:	80 81       	ld	r24, Z
    44f0:	91 81       	ldd	r25, Z+1	; 0x01
    44f2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    44f6:	f6 01       	movw	r30, r12
    44f8:	60 81       	ld	r22, Z
    44fa:	71 81       	ldd	r23, Z+1	; 0x01
    44fc:	f8 01       	movw	r30, r16
    44fe:	80 81       	ld	r24, Z
    4500:	91 81       	ldd	r25, Z+1	; 0x01
    4502:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    4506:	60 e2       	ldi	r22, 0x20	; 32
    4508:	73 e0       	ldi	r23, 0x03	; 3
    450a:	f8 01       	movw	r30, r16
    450c:	80 81       	ld	r24, Z
    450e:	91 81       	ldd	r25, Z+1	; 0x01
    4510:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    4514:	6b e7       	ldi	r22, 0x7B	; 123
    4516:	75 e0       	ldi	r23, 0x05	; 5
    4518:	8f e5       	ldi	r24, 0x5F	; 95
    451a:	97 e0       	ldi	r25, 0x07	; 7
    451c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    4520:	61 e7       	ldi	r22, 0x71	; 113
    4522:	75 e0       	ldi	r23, 0x05	; 5
    4524:	8f e5       	ldi	r24, 0x5F	; 95
    4526:	97 e0       	ldi	r25, 0x07	; 7
    4528:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    452c:	f4 01       	movw	r30, r8
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	8f e5       	ldi	r24, 0x5F	; 95
    4534:	97 e0       	ldi	r25, 0x07	; 7
    4536:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    453a:	f5 01       	movw	r30, r10
    453c:	80 81       	ld	r24, Z
    453e:	91 81       	ldd	r25, Z+1	; 0x01
    4540:	89 2b       	or	r24, r25
    4542:	69 f0       	breq	.+26     	; 0x455e <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    4544:	6e e1       	ldi	r22, 0x1E	; 30
    4546:	73 e0       	ldi	r23, 0x03	; 3
    4548:	8f e5       	ldi	r24, 0x5F	; 95
    454a:	97 e0       	ldi	r25, 0x07	; 7
    454c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    4550:	f5 01       	movw	r30, r10
    4552:	60 81       	ld	r22, Z
    4554:	71 81       	ldd	r23, Z+1	; 0x01
    4556:	8f e5       	ldi	r24, 0x5F	; 95
    4558:	97 e0       	ldi	r25, 0x07	; 7
    455a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    455e:	f6 01       	movw	r30, r12
    4560:	80 81       	ld	r24, Z
    4562:	91 81       	ldd	r25, Z+1	; 0x01
    4564:	89 2b       	or	r24, r25
    4566:	69 f0       	breq	.+26     	; 0x4582 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    4568:	6e e1       	ldi	r22, 0x1E	; 30
    456a:	73 e0       	ldi	r23, 0x03	; 3
    456c:	8f e5       	ldi	r24, 0x5F	; 95
    456e:	97 e0       	ldi	r25, 0x07	; 7
    4570:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN5Print5printEPKc>
    4574:	f6 01       	movw	r30, r12
    4576:	60 81       	ld	r22, Z
    4578:	71 81       	ldd	r23, Z+1	; 0x01
    457a:	8f e5       	ldi	r24, 0x5F	; 95
    457c:	97 e0       	ldi	r25, 0x07	; 7
    457e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    4582:	60 e2       	ldi	r22, 0x20	; 32
    4584:	73 e0       	ldi	r23, 0x03	; 3
    4586:	8f e5       	ldi	r24, 0x5F	; 95
    4588:	97 e0       	ldi	r25, 0x07	; 7
    458a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print7printlnEPKc>
    458e:	f7 01       	movw	r30, r14
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	40 e1       	ldi	r20, 0x10	; 16
    4596:	57 e2       	ldi	r21, 0x27	; 39
    4598:	ce 01       	movw	r24, r28
    459a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    459e:	88 23       	and	r24, r24
    45a0:	09 f4       	brne	.+2      	; 0x45a4 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    45a2:	54 c0       	rjmp	.+168    	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    45a4:	f5 01       	movw	r30, r10
    45a6:	40 81       	ld	r20, Z
    45a8:	51 81       	ldd	r21, Z+1	; 0x01
    45aa:	41 15       	cp	r20, r1
    45ac:	51 05       	cpc	r21, r1
    45ae:	39 f4       	brne	.+14     	; 0x45be <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    45b0:	f6 01       	movw	r30, r12
    45b2:	40 81       	ld	r20, Z
    45b4:	51 81       	ldd	r21, Z+1	; 0x01
    45b6:	41 15       	cp	r20, r1
    45b8:	51 05       	cpc	r21, r1
    45ba:	71 f4       	brne	.+28     	; 0x45d8 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    45bc:	3b cf       	rjmp	.-394    	; 0x4434 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    45be:	f7 01       	movw	r30, r14
    45c0:	20 81       	ld	r18, Z
    45c2:	31 81       	ldd	r19, Z+1	; 0x01
    45c4:	00 e1       	ldi	r16, 0x10	; 16
    45c6:	17 e2       	ldi	r17, 0x27	; 39
    45c8:	6c e5       	ldi	r22, 0x5C	; 92
    45ca:	75 e0       	ldi	r23, 0x05	; 5
    45cc:	ce 01       	movw	r24, r28
    45ce:	0e 94 bc 21 	call	0x4378	; 0x4378 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    45d2:	81 11       	cpse	r24, r1
    45d4:	ed cf       	rjmp	.-38     	; 0x45b0 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    45d6:	3a c0       	rjmp	.+116    	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    45d8:	f7 01       	movw	r30, r14
    45da:	20 81       	ld	r18, Z
    45dc:	31 81       	ldd	r19, Z+1	; 0x01
    45de:	00 e1       	ldi	r16, 0x10	; 16
    45e0:	17 e2       	ldi	r17, 0x27	; 39
    45e2:	68 e4       	ldi	r22, 0x48	; 72
    45e4:	75 e0       	ldi	r23, 0x05	; 5
    45e6:	ce 01       	movw	r24, r28
    45e8:	0e 94 bc 21 	call	0x4378	; 0x4378 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    45ec:	81 11       	cpse	r24, r1
    45ee:	22 cf       	rjmp	.-444    	; 0x4434 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    45f0:	2d c0       	rjmp	.+90     	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    45f2:	4a e2       	ldi	r20, 0x2A	; 42
    45f4:	55 e0       	ldi	r21, 0x05	; 5
    45f6:	6f e1       	ldi	r22, 0x1F	; 31
    45f8:	75 e0       	ldi	r23, 0x05	; 5
    45fa:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    45fe:	88 23       	and	r24, r24
    4600:	29 f1       	breq	.+74     	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4602:	8e 01       	movw	r16, r28
    4604:	0a 5e       	subi	r16, 0xEA	; 234
    4606:	1e 4f       	sbci	r17, 0xFE	; 254
    4608:	f8 01       	movw	r30, r16
    460a:	40 81       	ld	r20, Z
    460c:	51 81       	ldd	r21, Z+1	; 0x01
    460e:	20 e1       	ldi	r18, 0x10	; 16
    4610:	37 e2       	ldi	r19, 0x27	; 39
    4612:	62 e1       	ldi	r22, 0x12	; 18
    4614:	75 e0       	ldi	r23, 0x05	; 5
    4616:	ce 01       	movw	r24, r28
    4618:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    461c:	88 23       	and	r24, r24
    461e:	b1 f0       	breq	.+44     	; 0x464c <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4620:	f8 01       	movw	r30, r16
    4622:	40 81       	ld	r20, Z
    4624:	51 81       	ldd	r21, Z+1	; 0x01
    4626:	20 e1       	ldi	r18, 0x10	; 16
    4628:	37 e2       	ldi	r19, 0x27	; 39
    462a:	67 e0       	ldi	r22, 0x07	; 7
    462c:	75 e0       	ldi	r23, 0x05	; 5
    462e:	ce 01       	movw	r24, r28
    4630:	df 91       	pop	r29
    4632:	cf 91       	pop	r28
    4634:	1f 91       	pop	r17
    4636:	0f 91       	pop	r16
    4638:	ff 90       	pop	r15
    463a:	ef 90       	pop	r14
    463c:	df 90       	pop	r13
    463e:	cf 90       	pop	r12
    4640:	bf 90       	pop	r11
    4642:	af 90       	pop	r10
    4644:	9f 90       	pop	r9
    4646:	8f 90       	pop	r8
    4648:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	df 91       	pop	r29
    4650:	cf 91       	pop	r28
    4652:	1f 91       	pop	r17
    4654:	0f 91       	pop	r16
    4656:	ff 90       	pop	r15
    4658:	ef 90       	pop	r14
    465a:	df 90       	pop	r13
    465c:	cf 90       	pop	r12
    465e:	bf 90       	pop	r11
    4660:	af 90       	pop	r10
    4662:	9f 90       	pop	r9
    4664:	8f 90       	pop	r8
    4666:	08 95       	ret

00004668 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    4668:	af 92       	push	r10
    466a:	bf 92       	push	r11
    466c:	cf 92       	push	r12
    466e:	df 92       	push	r13
    4670:	ef 92       	push	r14
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	5b 01       	movw	r10, r22
    467c:	6a 01       	movw	r12, r20
    467e:	e2 2e       	mov	r14, r18
    4680:	0e 96       	adiw	r24, 0x0e	; 14
    4682:	0e 94 3b 2b 	call	0x5676	; 0x5676 <strstr_P>
    4686:	ec 01       	movw	r28, r24
    4688:	89 2b       	or	r24, r25
    468a:	c1 f0       	breq	.+48     	; 0x46bc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    468c:	c5 01       	movw	r24, r10
    468e:	0e 94 32 2b 	call	0x5664	; 0x5664 <__strlen_P>
    4692:	8c 0f       	add	r24, r28
    4694:	9d 1f       	adc	r25, r29
    4696:	c0 e0       	ldi	r28, 0x00	; 0
    4698:	f1 2c       	mov	r15, r1
    469a:	c0 17       	cp	r28, r16
    469c:	41 f0       	breq	.+16     	; 0x46ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    469e:	b7 01       	movw	r22, r14
    46a0:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <strchr>
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	51 f0       	breq	.+20     	; 0x46bc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    46a8:	01 96       	adiw	r24, 0x01	; 1
    46aa:	cf 5f       	subi	r28, 0xFF	; 255
    46ac:	f6 cf       	rjmp	.-20     	; 0x469a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    46ae:	0e 94 0b 2b 	call	0x5616	; 0x5616 <atoi>
    46b2:	f6 01       	movw	r30, r12
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	01 c0       	rjmp	.+2      	; 0x46be <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	df 91       	pop	r29
    46c0:	cf 91       	pop	r28
    46c2:	0f 91       	pop	r16
    46c4:	ff 90       	pop	r15
    46c6:	ef 90       	pop	r14
    46c8:	df 90       	pop	r13
    46ca:	cf 90       	pop	r12
    46cc:	bf 90       	pop	r11
    46ce:	af 90       	pop	r10
    46d0:	08 95       	ret

000046d2 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    46d2:	ef 92       	push	r14
    46d4:	ff 92       	push	r15
    46d6:	0f 93       	push	r16
    46d8:	cf 93       	push	r28
    46da:	df 93       	push	r29
    46dc:	ec 01       	movw	r28, r24
    46de:	7b 01       	movw	r14, r22
    46e0:	44 ef       	ldi	r20, 0xF4	; 244
    46e2:	51 e0       	ldi	r21, 0x01	; 1
    46e4:	66 e6       	ldi	r22, 0x66	; 102
    46e6:	74 e0       	ldi	r23, 0x04	; 4
    46e8:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    46ec:	00 e0       	ldi	r16, 0x00	; 0
    46ee:	2c e2       	ldi	r18, 0x2C	; 44
    46f0:	a7 01       	movw	r20, r14
    46f2:	6b e5       	ldi	r22, 0x5B	; 91
    46f4:	74 e0       	ldi	r23, 0x04	; 4
    46f6:	ce 01       	movw	r24, r28
    46f8:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	0f 91       	pop	r16
    4702:	ff 90       	pop	r15
    4704:	ef 90       	pop	r14
    4706:	08 95       	ret

00004708 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    4708:	4f 92       	push	r4
    470a:	5f 92       	push	r5
    470c:	6f 92       	push	r6
    470e:	7f 92       	push	r7
    4710:	af 92       	push	r10
    4712:	bf 92       	push	r11
    4714:	cf 92       	push	r12
    4716:	df 92       	push	r13
    4718:	ef 92       	push	r14
    471a:	ff 92       	push	r15
    471c:	0f 93       	push	r16
    471e:	1f 93       	push	r17
    4720:	cf 93       	push	r28
    4722:	df 93       	push	r29
    4724:	ec 01       	movw	r28, r24
    4726:	5a 01       	movw	r10, r20
    4728:	69 01       	movw	r12, r18
    472a:	27 01       	movw	r4, r14
    472c:	38 01       	movw	r6, r16
    472e:	fc 01       	movw	r30, r24
    4730:	ea 5e       	subi	r30, 0xEA	; 234
    4732:	fe 4f       	sbci	r31, 0xFE	; 254
    4734:	00 81       	ld	r16, Z
    4736:	11 81       	ldd	r17, Z+1	; 0x01
    4738:	26 2f       	mov	r18, r22
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	40 e0       	ldi	r20, 0x00	; 0
    473e:	50 e0       	ldi	r21, 0x00	; 0
    4740:	84 ef       	ldi	r24, 0xF4	; 244
    4742:	e8 2e       	mov	r14, r24
    4744:	ff 24       	eor	r15, r15
    4746:	f3 94       	inc	r15
    4748:	6c e8       	ldi	r22, 0x8C	; 140
    474a:	74 e0       	ldi	r23, 0x04	; 4
    474c:	ce 01       	movw	r24, r28
    474e:	0e 94 36 21 	call	0x426c	; 0x426c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4752:	81 11       	cpse	r24, r1
    4754:	02 c0       	rjmp	.+4      	; 0x475a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	17 c0       	rjmp	.+46     	; 0x4788 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    475a:	40 e0       	ldi	r20, 0x00	; 0
    475c:	b2 01       	movw	r22, r4
    475e:	ce 01       	movw	r24, r28
    4760:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    4764:	01 e0       	ldi	r16, 0x01	; 1
    4766:	2c e2       	ldi	r18, 0x2C	; 44
    4768:	a5 01       	movw	r20, r10
    476a:	6f e7       	ldi	r22, 0x7F	; 127
    476c:	74 e0       	ldi	r23, 0x04	; 4
    476e:	ce 01       	movw	r24, r28
    4770:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4774:	88 23       	and	r24, r24
    4776:	79 f3       	breq	.-34     	; 0x4756 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    4778:	02 e0       	ldi	r16, 0x02	; 2
    477a:	2c e2       	ldi	r18, 0x2C	; 44
    477c:	a6 01       	movw	r20, r12
    477e:	62 e7       	ldi	r22, 0x72	; 114
    4780:	74 e0       	ldi	r23, 0x04	; 4
    4782:	ce 01       	movw	r24, r28
    4784:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4788:	df 91       	pop	r29
    478a:	cf 91       	pop	r28
    478c:	1f 91       	pop	r17
    478e:	0f 91       	pop	r16
    4790:	ff 90       	pop	r15
    4792:	ef 90       	pop	r14
    4794:	df 90       	pop	r13
    4796:	cf 90       	pop	r12
    4798:	bf 90       	pop	r11
    479a:	af 90       	pop	r10
    479c:	7f 90       	pop	r7
    479e:	6f 90       	pop	r6
    47a0:	5f 90       	pop	r5
    47a2:	4f 90       	pop	r4
    47a4:	08 95       	ret

000047a6 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    47a6:	4f 92       	push	r4
    47a8:	5f 92       	push	r5
    47aa:	6f 92       	push	r6
    47ac:	7f 92       	push	r7
    47ae:	8f 92       	push	r8
    47b0:	9f 92       	push	r9
    47b2:	af 92       	push	r10
    47b4:	bf 92       	push	r11
    47b6:	cf 92       	push	r12
    47b8:	df 92       	push	r13
    47ba:	ef 92       	push	r14
    47bc:	ff 92       	push	r15
    47be:	0f 93       	push	r16
    47c0:	1f 93       	push	r17
    47c2:	cf 93       	push	r28
    47c4:	df 93       	push	r29
    47c6:	ec 01       	movw	r28, r24
    47c8:	2a 01       	movw	r4, r20
    47ca:	39 01       	movw	r6, r18
    47cc:	48 01       	movw	r8, r16
    47ce:	57 01       	movw	r10, r14
    47d0:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    47d4:	88 23       	and	r24, r24
    47d6:	09 f4       	brne	.+2      	; 0x47da <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    47d8:	71 c0       	rjmp	.+226    	; 0x48bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    47da:	a2 01       	movw	r20, r4
    47dc:	67 e4       	ldi	r22, 0x47	; 71
    47de:	74 e0       	ldi	r23, 0x04	; 4
    47e0:	ce 01       	movw	r24, r28
    47e2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    47e6:	88 23       	and	r24, r24
    47e8:	09 f4       	brne	.+2      	; 0x47ec <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    47ea:	68 c0       	rjmp	.+208    	; 0x48bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    47ec:	a8 01       	movw	r20, r16
    47ee:	60 e0       	ldi	r22, 0x00	; 0
    47f0:	70 e0       	ldi	r23, 0x00	; 0
    47f2:	00 e1       	ldi	r16, 0x10	; 16
    47f4:	17 e2       	ldi	r17, 0x27	; 39
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	ce 01       	movw	r24, r28
    47fc:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZN13Adafruit_FONA9HTTP_dataEmm>
    4800:	88 23       	and	r24, r24
    4802:	09 f4       	brne	.+2      	; 0x4806 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    4804:	5b c0       	rjmp	.+182    	; 0x48bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4806:	fe 01       	movw	r30, r28
    4808:	e8 5e       	subi	r30, 0xE8	; 232
    480a:	fe 4f       	sbci	r31, 0xFE	; 254
    480c:	80 81       	ld	r24, Z
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	dc 01       	movw	r26, r24
    4812:	ed 91       	ld	r30, X+
    4814:	fc 91       	ld	r31, X
    4816:	02 80       	ldd	r0, Z+2	; 0x02
    4818:	f3 81       	ldd	r31, Z+3	; 0x03
    481a:	e0 2d       	mov	r30, r0
    481c:	a4 01       	movw	r20, r8
    481e:	b3 01       	movw	r22, r6
    4820:	09 95       	icall
    4822:	fe 01       	movw	r30, r28
    4824:	ea 5e       	subi	r30, 0xEA	; 234
    4826:	fe 4f       	sbci	r31, 0xFE	; 254
    4828:	60 81       	ld	r22, Z
    482a:	71 81       	ldd	r23, Z+1	; 0x01
    482c:	40 e1       	ldi	r20, 0x10	; 16
    482e:	57 e2       	ldi	r21, 0x27	; 39
    4830:	ce 01       	movw	r24, r28
    4832:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    4836:	88 23       	and	r24, r24
    4838:	09 f4       	brne	.+2      	; 0x483c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    483a:	40 c0       	rjmp	.+128    	; 0x48bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    483c:	10 e1       	ldi	r17, 0x10	; 16
    483e:	e1 2e       	mov	r14, r17
    4840:	17 e2       	ldi	r17, 0x27	; 39
    4842:	f1 2e       	mov	r15, r17
    4844:	00 e0       	ldi	r16, 0x00	; 0
    4846:	10 e0       	ldi	r17, 0x00	; 0
    4848:	96 01       	movw	r18, r12
    484a:	a5 01       	movw	r20, r10
    484c:	61 e0       	ldi	r22, 0x01	; 1
    484e:	ce 01       	movw	r24, r28
    4850:	0e 94 84 23 	call	0x4708	; 0x4708 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    4854:	88 23       	and	r24, r24
    4856:	91 f1       	breq	.+100    	; 0x48bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4858:	6e e3       	ldi	r22, 0x3E	; 62
    485a:	74 e0       	ldi	r23, 0x04	; 4
    485c:	8f e5       	ldi	r24, 0x5F	; 95
    485e:	97 e0       	ldi	r25, 0x07	; 7
    4860:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    4864:	f5 01       	movw	r30, r10
    4866:	60 81       	ld	r22, Z
    4868:	71 81       	ldd	r23, Z+1	; 0x01
    486a:	4a e0       	ldi	r20, 0x0A	; 10
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	8f e5       	ldi	r24, 0x5F	; 95
    4870:	97 e0       	ldi	r25, 0x07	; 7
    4872:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZN5Print7printlnEji>
    4876:	68 e3       	ldi	r22, 0x38	; 56
    4878:	74 e0       	ldi	r23, 0x04	; 4
    487a:	8f e5       	ldi	r24, 0x5F	; 95
    487c:	97 e0       	ldi	r25, 0x07	; 7
    487e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN5Print5printEPK19__FlashStringHelper>
    4882:	d6 01       	movw	r26, r12
    4884:	6d 91       	ld	r22, X+
    4886:	7c 91       	ld	r23, X
    4888:	4a e0       	ldi	r20, 0x0A	; 10
    488a:	50 e0       	ldi	r21, 0x00	; 0
    488c:	8f e5       	ldi	r24, 0x5F	; 95
    488e:	97 e0       	ldi	r25, 0x07	; 7
    4890:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZN5Print7printlnEji>
    4894:	b6 01       	movw	r22, r12
    4896:	ce 01       	movw	r24, r28
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	ff 90       	pop	r15
    48a2:	ef 90       	pop	r14
    48a4:	df 90       	pop	r13
    48a6:	cf 90       	pop	r12
    48a8:	bf 90       	pop	r11
    48aa:	af 90       	pop	r10
    48ac:	9f 90       	pop	r9
    48ae:	8f 90       	pop	r8
    48b0:	7f 90       	pop	r7
    48b2:	6f 90       	pop	r6
    48b4:	5f 90       	pop	r5
    48b6:	4f 90       	pop	r4
    48b8:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	df 91       	pop	r29
    48c0:	cf 91       	pop	r28
    48c2:	1f 91       	pop	r17
    48c4:	0f 91       	pop	r16
    48c6:	ff 90       	pop	r15
    48c8:	ef 90       	pop	r14
    48ca:	df 90       	pop	r13
    48cc:	cf 90       	pop	r12
    48ce:	bf 90       	pop	r11
    48d0:	af 90       	pop	r10
    48d2:	9f 90       	pop	r9
    48d4:	8f 90       	pop	r8
    48d6:	7f 90       	pop	r7
    48d8:	6f 90       	pop	r6
    48da:	5f 90       	pop	r5
    48dc:	4f 90       	pop	r4
    48de:	08 95       	ret

000048e0 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    48e0:	af 92       	push	r10
    48e2:	bf 92       	push	r11
    48e4:	cf 92       	push	r12
    48e6:	df 92       	push	r13
    48e8:	ef 92       	push	r14
    48ea:	0f 93       	push	r16
    48ec:	1f 93       	push	r17
    48ee:	cf 93       	push	r28
    48f0:	df 93       	push	r29
    48f2:	ec 01       	movw	r28, r24
    48f4:	6a 01       	movw	r12, r20
    48f6:	59 01       	movw	r10, r18
    48f8:	10 2f       	mov	r17, r16
    48fa:	0e 2d       	mov	r16, r14
    48fc:	44 ef       	ldi	r20, 0xF4	; 244
    48fe:	51 e0       	ldi	r21, 0x01	; 1
    4900:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4904:	21 2f       	mov	r18, r17
    4906:	a5 01       	movw	r20, r10
    4908:	b6 01       	movw	r22, r12
    490a:	ce 01       	movw	r24, r28
    490c:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4910:	18 2f       	mov	r17, r24
    4912:	88 23       	and	r24, r24
    4914:	31 f0       	breq	.+12     	; 0x4922 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    4916:	40 e0       	ldi	r20, 0x00	; 0
    4918:	64 ef       	ldi	r22, 0xF4	; 244
    491a:	71 e0       	ldi	r23, 0x01	; 1
    491c:	ce 01       	movw	r24, r28
    491e:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_ZN13Adafruit_FONA8readlineEjb>
    4922:	81 2f       	mov	r24, r17
    4924:	df 91       	pop	r29
    4926:	cf 91       	pop	r28
    4928:	1f 91       	pop	r17
    492a:	0f 91       	pop	r16
    492c:	ef 90       	pop	r14
    492e:	df 90       	pop	r13
    4930:	cf 90       	pop	r12
    4932:	bf 90       	pop	r11
    4934:	af 90       	pop	r10
    4936:	08 95       	ret

00004938 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    4938:	ef 92       	push	r14
    493a:	0f 93       	push	r16
    493c:	9b 01       	movw	r18, r22
    493e:	ee 24       	eor	r14, r14
    4940:	e3 94       	inc	r14
    4942:	0c e2       	ldi	r16, 0x2C	; 44
    4944:	42 e1       	ldi	r20, 0x12	; 18
    4946:	56 e0       	ldi	r21, 0x06	; 6
    4948:	6b e0       	ldi	r22, 0x0B	; 11
    494a:	76 e0       	ldi	r23, 0x06	; 6
    494c:	0e 94 70 24 	call	0x48e0	; 0x48e0 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    4950:	0f 91       	pop	r16
    4952:	ef 90       	pop	r14
    4954:	08 95       	ret

00004956 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    4956:	ef 92       	push	r14
    4958:	0f 93       	push	r16
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	00 d0       	rcall	.+0      	; 0x4960 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    4960:	cd b7       	in	r28, 0x3d	; 61
    4962:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    4964:	ee 24       	eor	r14, r14
    4966:	e3 94       	inc	r14
    4968:	0c e2       	ldi	r16, 0x2C	; 44
    496a:	9e 01       	movw	r18, r28
    496c:	2f 5f       	subi	r18, 0xFF	; 255
    496e:	3f 4f       	sbci	r19, 0xFF	; 255
    4970:	43 e0       	ldi	r20, 0x03	; 3
    4972:	56 e0       	ldi	r21, 0x06	; 6
    4974:	6a ef       	ldi	r22, 0xFA	; 250
    4976:	75 e0       	ldi	r23, 0x05	; 5
    4978:	0e 94 70 24 	call	0x48e0	; 0x48e0 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    497c:	88 23       	and	r24, r24
    497e:	11 f0       	breq	.+4      	; 0x4984 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    4980:	89 81       	ldd	r24, Y+1	; 0x01
    4982:	01 c0       	rjmp	.+2      	; 0x4986 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    4984:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	0f 91       	pop	r16
    4990:	ef 90       	pop	r14
    4992:	08 95       	ret

00004994 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    4994:	ef 92       	push	r14
    4996:	0f 93       	push	r16
    4998:	cf 93       	push	r28
    499a:	df 93       	push	r29
    499c:	00 d0       	rcall	.+0      	; 0x499e <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    499e:	cd b7       	in	r28, 0x3d	; 61
    49a0:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    49a2:	e1 2c       	mov	r14, r1
    49a4:	0c e2       	ldi	r16, 0x2C	; 44
    49a6:	9e 01       	movw	r18, r28
    49a8:	2f 5f       	subi	r18, 0xFF	; 255
    49aa:	3f 4f       	sbci	r19, 0xFF	; 255
    49ac:	43 ef       	ldi	r20, 0xF3	; 243
    49ae:	55 e0       	ldi	r21, 0x05	; 5
    49b0:	6c ee       	ldi	r22, 0xEC	; 236
    49b2:	75 e0       	ldi	r23, 0x05	; 5
    49b4:	0e 94 70 24 	call	0x48e0	; 0x48e0 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    49b8:	88 23       	and	r24, r24
    49ba:	11 f0       	breq	.+4      	; 0x49c0 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	01 c0       	rjmp	.+2      	; 0x49c2 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    49c0:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	df 91       	pop	r29
    49c8:	cf 91       	pop	r28
    49ca:	0f 91       	pop	r16
    49cc:	ef 90       	pop	r14
    49ce:	08 95       	ret

000049d0 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    49d0:	20 91 47 08 	lds	r18, 0x0847	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    49d4:	30 91 48 08 	lds	r19, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    49d8:	28 17       	cp	r18, r24
    49da:	39 07       	cpc	r19, r25
    49dc:	b9 f4       	brne	.+46     	; 0x4a0c <_ZN14SoftwareSerial4readEv+0x3c>
    49de:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    49e2:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    49e6:	98 17       	cp	r25, r24
    49e8:	89 f0       	breq	.+34     	; 0x4a0c <_ZN14SoftwareSerial4readEv+0x3c>
    49ea:	e0 91 05 08 	lds	r30, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	e9 5f       	subi	r30, 0xF9	; 249
    49f2:	f7 4f       	sbci	r31, 0xF7	; 247
    49f4:	80 81       	ld	r24, Z
    49f6:	20 91 05 08 	lds	r18, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	2f 5f       	subi	r18, 0xFF	; 255
    49fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4a00:	2f 73       	andi	r18, 0x3F	; 63
    4a02:	33 27       	eor	r19, r19
    4a04:	20 93 05 08 	sts	0x0805, r18	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	08 95       	ret
    4a0c:	8f ef       	ldi	r24, 0xFF	; 255
    4a0e:	9f ef       	ldi	r25, 0xFF	; 255
    4a10:	08 95       	ret

00004a12 <_ZN14SoftwareSerial5writeEh>:
    4a12:	1f 93       	push	r17
    4a14:	cf 93       	push	r28
    4a16:	df 93       	push	r29
    4a18:	dc 01       	movw	r26, r24
    4a1a:	5c 96       	adiw	r26, 0x1c	; 28
    4a1c:	8d 91       	ld	r24, X+
    4a1e:	9c 91       	ld	r25, X
    4a20:	5d 97       	sbiw	r26, 0x1d	; 29
    4a22:	00 97       	sbiw	r24, 0x00	; 0
    4a24:	39 f4       	brne	.+14     	; 0x4a34 <_ZN14SoftwareSerial5writeEh+0x22>
    4a26:	21 e0       	ldi	r18, 0x01	; 1
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	13 96       	adiw	r26, 0x03	; 3
    4a2c:	3c 93       	st	X, r19
    4a2e:	2e 93       	st	-X, r18
    4a30:	12 97       	sbiw	r26, 0x02	; 2
    4a32:	3b c0       	rjmp	.+118    	; 0x4aaa <_ZN14SoftwareSerial5writeEh+0x98>
    4a34:	51 96       	adiw	r26, 0x11	; 17
    4a36:	ed 91       	ld	r30, X+
    4a38:	fc 91       	ld	r31, X
    4a3a:	52 97       	sbiw	r26, 0x12	; 18
    4a3c:	50 96       	adiw	r26, 0x10	; 16
    4a3e:	2c 91       	ld	r18, X
    4a40:	50 97       	sbiw	r26, 0x10	; 16
    4a42:	32 2f       	mov	r19, r18
    4a44:	30 95       	com	r19
    4a46:	1f b7       	in	r17, 0x3f	; 63
    4a48:	5e 96       	adiw	r26, 0x1e	; 30
    4a4a:	4c 91       	ld	r20, X
    4a4c:	5e 97       	sbiw	r26, 0x1e	; 30
    4a4e:	74 2f       	mov	r23, r20
    4a50:	72 70       	andi	r23, 0x02	; 2
    4a52:	41 fd       	sbrc	r20, 1
    4a54:	60 95       	com	r22
    4a56:	f8 94       	cli
    4a58:	40 81       	ld	r20, Z
    4a5a:	77 23       	and	r23, r23
    4a5c:	11 f0       	breq	.+4      	; 0x4a62 <_ZN14SoftwareSerial5writeEh+0x50>
    4a5e:	42 2b       	or	r20, r18
    4a60:	01 c0       	rjmp	.+2      	; 0x4a64 <_ZN14SoftwareSerial5writeEh+0x52>
    4a62:	43 23       	and	r20, r19
    4a64:	40 83       	st	Z, r20
    4a66:	ec 01       	movw	r28, r24
    4a68:	21 97       	sbiw	r28, 0x01	; 1
    4a6a:	f1 f7       	brne	.-4      	; 0x4a68 <_ZN14SoftwareSerial5writeEh+0x56>
    4a6c:	48 e0       	ldi	r20, 0x08	; 8
    4a6e:	50 81       	ld	r21, Z
    4a70:	60 ff       	sbrs	r22, 0
    4a72:	02 c0       	rjmp	.+4      	; 0x4a78 <_ZN14SoftwareSerial5writeEh+0x66>
    4a74:	52 2b       	or	r21, r18
    4a76:	01 c0       	rjmp	.+2      	; 0x4a7a <_ZN14SoftwareSerial5writeEh+0x68>
    4a78:	53 23       	and	r21, r19
    4a7a:	50 83       	st	Z, r21
    4a7c:	ec 01       	movw	r28, r24
    4a7e:	21 97       	sbiw	r28, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <_ZN14SoftwareSerial5writeEh+0x6c>
    4a82:	66 95       	lsr	r22
    4a84:	41 50       	subi	r20, 0x01	; 1
    4a86:	99 f7       	brne	.-26     	; 0x4a6e <_ZN14SoftwareSerial5writeEh+0x5c>
    4a88:	80 81       	ld	r24, Z
    4a8a:	77 23       	and	r23, r23
    4a8c:	19 f0       	breq	.+6      	; 0x4a94 <_ZN14SoftwareSerial5writeEh+0x82>
    4a8e:	83 23       	and	r24, r19
    4a90:	80 83       	st	Z, r24
    4a92:	02 c0       	rjmp	.+4      	; 0x4a98 <_ZN14SoftwareSerial5writeEh+0x86>
    4a94:	28 2b       	or	r18, r24
    4a96:	20 83       	st	Z, r18
    4a98:	1f bf       	out	0x3f, r17	; 63
    4a9a:	5c 96       	adiw	r26, 0x1c	; 28
    4a9c:	8d 91       	ld	r24, X+
    4a9e:	9c 91       	ld	r25, X
    4aa0:	5d 97       	sbiw	r26, 0x1d	; 29
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	f1 f7       	brne	.-4      	; 0x4aa2 <_ZN14SoftwareSerial5writeEh+0x90>
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	df 91       	pop	r29
    4aac:	cf 91       	pop	r28
    4aae:	1f 91       	pop	r17
    4ab0:	08 95       	ret

00004ab2 <_ZN14SoftwareSerial5flushEv>:
    4ab2:	08 95       	ret

00004ab4 <_ZN14SoftwareSerial4peekEv>:
    4ab4:	20 91 47 08 	lds	r18, 0x0847	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4ab8:	30 91 48 08 	lds	r19, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4abc:	28 17       	cp	r18, r24
    4abe:	39 07       	cpc	r19, r25
    4ac0:	71 f4       	brne	.+28     	; 0x4ade <_ZN14SoftwareSerial4peekEv+0x2a>
    4ac2:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4ac6:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4aca:	98 17       	cp	r25, r24
    4acc:	41 f0       	breq	.+16     	; 0x4ade <_ZN14SoftwareSerial4peekEv+0x2a>
    4ace:	e0 91 05 08 	lds	r30, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4ad2:	f0 e0       	ldi	r31, 0x00	; 0
    4ad4:	e9 5f       	subi	r30, 0xF9	; 249
    4ad6:	f7 4f       	sbci	r31, 0xF7	; 247
    4ad8:	80 81       	ld	r24, Z
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	08 95       	ret
    4ade:	8f ef       	ldi	r24, 0xFF	; 255
    4ae0:	9f ef       	ldi	r25, 0xFF	; 255
    4ae2:	08 95       	ret

00004ae4 <_ZN14SoftwareSerial9availableEv>:
    4ae4:	20 91 47 08 	lds	r18, 0x0847	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4ae8:	30 91 48 08 	lds	r19, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4aec:	28 17       	cp	r18, r24
    4aee:	39 07       	cpc	r19, r25
    4af0:	71 f4       	brne	.+28     	; 0x4b0e <_ZN14SoftwareSerial9availableEv+0x2a>
    4af2:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4af6:	20 91 05 08 	lds	r18, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	80 5c       	subi	r24, 0xC0	; 192
    4afe:	9f 4f       	sbci	r25, 0xFF	; 255
    4b00:	82 1b       	sub	r24, r18
    4b02:	91 09       	sbc	r25, r1
    4b04:	60 e4       	ldi	r22, 0x40	; 64
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	0e 94 b0 28 	call	0x5160	; 0x5160 <__divmodhi4>
    4b0c:	08 95       	ret
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	08 95       	ret

00004b14 <_ZN14SoftwareSerial13stopListeningEv>:
    4b14:	e0 91 47 08 	lds	r30, 0x0847	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4b18:	f0 91 48 08 	lds	r31, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4b1c:	e8 17       	cp	r30, r24
    4b1e:	f9 07       	cpc	r31, r25
    4b20:	69 f4       	brne	.+26     	; 0x4b3c <_ZN14SoftwareSerial13stopListeningEv+0x28>
    4b22:	a3 89       	ldd	r26, Z+19	; 0x13
    4b24:	b4 89       	ldd	r27, Z+20	; 0x14
    4b26:	9c 91       	ld	r25, X
    4b28:	85 89       	ldd	r24, Z+21	; 0x15
    4b2a:	80 95       	com	r24
    4b2c:	89 23       	and	r24, r25
    4b2e:	8c 93       	st	X, r24
    4b30:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4b34:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	08 95       	ret
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
    4b3e:	08 95       	ret

00004b40 <_ZN14SoftwareSerial6listenEv>:
    4b40:	cf 93       	push	r28
    4b42:	df 93       	push	r29
    4b44:	ec 01       	movw	r28, r24
    4b46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b4a:	89 2b       	or	r24, r25
    4b4c:	f1 f0       	breq	.+60     	; 0x4b8a <_ZN14SoftwareSerial6listenEv+0x4a>
    4b4e:	80 91 47 08 	lds	r24, 0x0847	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4b52:	90 91 48 08 	lds	r25, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4b56:	c8 17       	cp	r28, r24
    4b58:	d9 07       	cpc	r29, r25
    4b5a:	b9 f0       	breq	.+46     	; 0x4b8a <_ZN14SoftwareSerial6listenEv+0x4a>
    4b5c:	00 97       	sbiw	r24, 0x00	; 0
    4b5e:	11 f0       	breq	.+4      	; 0x4b64 <_ZN14SoftwareSerial6listenEv+0x24>
    4b60:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_ZN14SoftwareSerial13stopListeningEv>
    4b64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b66:	8e 7f       	andi	r24, 0xFE	; 254
    4b68:	8e 8f       	std	Y+30, r24	; 0x1e
    4b6a:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4b6e:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4b72:	d0 93 48 08 	sts	0x0848, r29	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4b76:	c0 93 47 08 	sts	0x0847, r28	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4b7a:	eb 89       	ldd	r30, Y+19	; 0x13
    4b7c:	fc 89       	ldd	r31, Y+20	; 0x14
    4b7e:	90 81       	ld	r25, Z
    4b80:	8d 89       	ldd	r24, Y+21	; 0x15
    4b82:	89 2b       	or	r24, r25
    4b84:	80 83       	st	Z, r24
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <_ZN14SoftwareSerial6listenEv+0x4c>
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	df 91       	pop	r29
    4b8e:	cf 91       	pop	r28
    4b90:	08 95       	ret

00004b92 <__vector_3>:
    4b92:	1f 92       	push	r1
    4b94:	0f 92       	push	r0
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	0f 92       	push	r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	2f 93       	push	r18
    4b9e:	3f 93       	push	r19
    4ba0:	4f 93       	push	r20
    4ba2:	5f 93       	push	r21
    4ba4:	6f 93       	push	r22
    4ba6:	7f 93       	push	r23
    4ba8:	8f 93       	push	r24
    4baa:	9f 93       	push	r25
    4bac:	af 93       	push	r26
    4bae:	bf 93       	push	r27
    4bb0:	ef 93       	push	r30
    4bb2:	ff 93       	push	r31
    4bb4:	e0 91 47 08 	lds	r30, 0x0847	; 0x800847 <_ZN14SoftwareSerial13active_objectE>
    4bb8:	f0 91 48 08 	lds	r31, 0x0848	; 0x800848 <_ZN14SoftwareSerial13active_objectE+0x1>
    4bbc:	30 97       	sbiw	r30, 0x00	; 0
    4bbe:	09 f4       	brne	.+2      	; 0x4bc2 <__vector_3+0x30>
    4bc0:	51 c0       	rjmp	.+162    	; 0x4c64 <__vector_3+0xd2>
    4bc2:	96 8d       	ldd	r25, Z+30	; 0x1e
    4bc4:	a6 85       	ldd	r26, Z+14	; 0x0e
    4bc6:	b7 85       	ldd	r27, Z+15	; 0x0f
    4bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    4bca:	91 ff       	sbrs	r25, 1
    4bcc:	04 c0       	rjmp	.+8      	; 0x4bd6 <__vector_3+0x44>
    4bce:	9c 91       	ld	r25, X
    4bd0:	89 23       	and	r24, r25
    4bd2:	29 f4       	brne	.+10     	; 0x4bde <__vector_3+0x4c>
    4bd4:	47 c0       	rjmp	.+142    	; 0x4c64 <__vector_3+0xd2>
    4bd6:	9c 91       	ld	r25, X
    4bd8:	89 23       	and	r24, r25
    4bda:	09 f0       	breq	.+2      	; 0x4bde <__vector_3+0x4c>
    4bdc:	43 c0       	rjmp	.+134    	; 0x4c64 <__vector_3+0xd2>
    4bde:	a3 89       	ldd	r26, Z+19	; 0x13
    4be0:	b4 89       	ldd	r27, Z+20	; 0x14
    4be2:	9c 91       	ld	r25, X
    4be4:	85 89       	ldd	r24, Z+21	; 0x15
    4be6:	80 95       	com	r24
    4be8:	89 23       	and	r24, r25
    4bea:	8c 93       	st	X, r24
    4bec:	86 89       	ldd	r24, Z+22	; 0x16
    4bee:	97 89       	ldd	r25, Z+23	; 0x17
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <__vector_3+0x5e>
    4bf4:	60 8d       	ldd	r22, Z+24	; 0x18
    4bf6:	71 8d       	ldd	r23, Z+25	; 0x19
    4bf8:	a6 85       	ldd	r26, Z+14	; 0x0e
    4bfa:	b7 85       	ldd	r27, Z+15	; 0x0f
    4bfc:	55 85       	ldd	r21, Z+13	; 0x0d
    4bfe:	38 e0       	ldi	r19, 0x08	; 8
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	cb 01       	movw	r24, r22
    4c04:	01 97       	sbiw	r24, 0x01	; 1
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <__vector_3+0x72>
    4c08:	82 2f       	mov	r24, r18
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	95 95       	asr	r25
    4c0e:	87 95       	ror	r24
    4c10:	28 2f       	mov	r18, r24
    4c12:	4c 91       	ld	r20, X
    4c14:	45 23       	and	r20, r21
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <__vector_3+0x88>
    4c18:	20 68       	ori	r18, 0x80	; 128
    4c1a:	31 50       	subi	r19, 0x01	; 1
    4c1c:	91 f7       	brne	.-28     	; 0x4c02 <__vector_3+0x70>
    4c1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4c20:	81 fd       	sbrc	r24, 1
    4c22:	20 95       	com	r18
    4c24:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	01 96       	adiw	r24, 0x01	; 1
    4c2c:	8f 73       	andi	r24, 0x3F	; 63
    4c2e:	99 27       	eor	r25, r25
    4c30:	30 91 05 08 	lds	r19, 0x0805	; 0x800805 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4c34:	38 17       	cp	r19, r24
    4c36:	49 f0       	breq	.+18     	; 0x4c4a <__vector_3+0xb8>
    4c38:	a0 91 06 08 	lds	r26, 0x0806	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4c3c:	b0 e0       	ldi	r27, 0x00	; 0
    4c3e:	a9 5f       	subi	r26, 0xF9	; 249
    4c40:	b7 4f       	sbci	r27, 0xF7	; 247
    4c42:	2c 93       	st	X, r18
    4c44:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4c48:	03 c0       	rjmp	.+6      	; 0x4c50 <__vector_3+0xbe>
    4c4a:	86 8d       	ldd	r24, Z+30	; 0x1e
    4c4c:	81 60       	ori	r24, 0x01	; 1
    4c4e:	86 8f       	std	Z+30, r24	; 0x1e
    4c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c52:	93 8d       	ldd	r25, Z+27	; 0x1b
    4c54:	01 97       	sbiw	r24, 0x01	; 1
    4c56:	f1 f7       	brne	.-4      	; 0x4c54 <__vector_3+0xc2>
    4c58:	a3 89       	ldd	r26, Z+19	; 0x13
    4c5a:	b4 89       	ldd	r27, Z+20	; 0x14
    4c5c:	9c 91       	ld	r25, X
    4c5e:	85 89       	ldd	r24, Z+21	; 0x15
    4c60:	89 2b       	or	r24, r25
    4c62:	8c 93       	st	X, r24
    4c64:	ff 91       	pop	r31
    4c66:	ef 91       	pop	r30
    4c68:	bf 91       	pop	r27
    4c6a:	af 91       	pop	r26
    4c6c:	9f 91       	pop	r25
    4c6e:	8f 91       	pop	r24
    4c70:	7f 91       	pop	r23
    4c72:	6f 91       	pop	r22
    4c74:	5f 91       	pop	r21
    4c76:	4f 91       	pop	r20
    4c78:	3f 91       	pop	r19
    4c7a:	2f 91       	pop	r18
    4c7c:	0f 90       	pop	r0
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	0f 90       	pop	r0
    4c82:	1f 90       	pop	r1
    4c84:	18 95       	reti

00004c86 <_ZN14SoftwareSerial5setTXEh>:
    4c86:	1f 93       	push	r17
    4c88:	cf 93       	push	r28
    4c8a:	df 93       	push	r29
    4c8c:	ec 01       	movw	r28, r24
    4c8e:	16 2f       	mov	r17, r22
    4c90:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4c92:	66 95       	lsr	r22
    4c94:	61 70       	andi	r22, 0x01	; 1
    4c96:	81 e0       	ldi	r24, 0x01	; 1
    4c98:	68 27       	eor	r22, r24
    4c9a:	81 2f       	mov	r24, r17
    4c9c:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
    4ca0:	61 e0       	ldi	r22, 0x01	; 1
    4ca2:	81 2f       	mov	r24, r17
    4ca4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <pinMode>
    4ca8:	81 2f       	mov	r24, r17
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	fc 01       	movw	r30, r24
    4cae:	ec 56       	subi	r30, 0x6C	; 108
    4cb0:	fc 4f       	sbci	r31, 0xFC	; 252
    4cb2:	e4 91       	lpm	r30, Z
    4cb4:	e8 8b       	std	Y+16, r30	; 0x10
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	e8 55       	subi	r30, 0x58	; 88
    4cba:	fc 4f       	sbci	r31, 0xFC	; 252
    4cbc:	e4 91       	lpm	r30, Z
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	ee 0f       	add	r30, r30
    4cc2:	ff 1f       	adc	r31, r31
    4cc4:	ea 53       	subi	r30, 0x3A	; 58
    4cc6:	fc 4f       	sbci	r31, 0xFC	; 252
    4cc8:	85 91       	lpm	r24, Z+
    4cca:	94 91       	lpm	r25, Z
    4ccc:	9a 8b       	std	Y+18, r25	; 0x12
    4cce:	89 8b       	std	Y+17, r24	; 0x11
    4cd0:	df 91       	pop	r29
    4cd2:	cf 91       	pop	r28
    4cd4:	1f 91       	pop	r17
    4cd6:	08 95       	ret

00004cd8 <_ZN14SoftwareSerial5setRXEh>:
    4cd8:	1f 93       	push	r17
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	ec 01       	movw	r28, r24
    4ce0:	16 2f       	mov	r17, r22
    4ce2:	60 e0       	ldi	r22, 0x00	; 0
    4ce4:	81 2f       	mov	r24, r17
    4ce6:	0e 94 2a 1a 	call	0x3454	; 0x3454 <pinMode>
    4cea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cec:	81 fd       	sbrc	r24, 1
    4cee:	04 c0       	rjmp	.+8      	; 0x4cf8 <_ZN14SoftwareSerial5setRXEh+0x20>
    4cf0:	61 e0       	ldi	r22, 0x01	; 1
    4cf2:	81 2f       	mov	r24, r17
    4cf4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <digitalWrite>
    4cf8:	1c 87       	std	Y+12, r17	; 0x0c
    4cfa:	81 2f       	mov	r24, r17
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	fc 01       	movw	r30, r24
    4d00:	ec 56       	subi	r30, 0x6C	; 108
    4d02:	fc 4f       	sbci	r31, 0xFC	; 252
    4d04:	e4 91       	lpm	r30, Z
    4d06:	ed 87       	std	Y+13, r30	; 0x0d
    4d08:	fc 01       	movw	r30, r24
    4d0a:	e8 55       	subi	r30, 0x58	; 88
    4d0c:	fc 4f       	sbci	r31, 0xFC	; 252
    4d0e:	e4 91       	lpm	r30, Z
    4d10:	f0 e0       	ldi	r31, 0x00	; 0
    4d12:	ee 0f       	add	r30, r30
    4d14:	ff 1f       	adc	r31, r31
    4d16:	e4 54       	subi	r30, 0x44	; 68
    4d18:	fc 4f       	sbci	r31, 0xFC	; 252
    4d1a:	85 91       	lpm	r24, Z+
    4d1c:	94 91       	lpm	r25, Z
    4d1e:	9f 87       	std	Y+15, r25	; 0x0f
    4d20:	8e 87       	std	Y+14, r24	; 0x0e
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	1f 91       	pop	r17
    4d28:	08 95       	ret

00004d2a <_ZN14SoftwareSerialC1Ehhb>:
    4d2a:	1f 93       	push	r17
    4d2c:	cf 93       	push	r28
    4d2e:	df 93       	push	r29
    4d30:	ec 01       	movw	r28, r24
    4d32:	16 2f       	mov	r17, r22
    4d34:	1b 82       	std	Y+3, r1	; 0x03
    4d36:	1a 82       	std	Y+2, r1	; 0x02
    4d38:	88 ee       	ldi	r24, 0xE8	; 232
    4d3a:	93 e0       	ldi	r25, 0x03	; 3
    4d3c:	a0 e0       	ldi	r26, 0x00	; 0
    4d3e:	b0 e0       	ldi	r27, 0x00	; 0
    4d40:	8c 83       	std	Y+4, r24	; 0x04
    4d42:	9d 83       	std	Y+5, r25	; 0x05
    4d44:	ae 83       	std	Y+6, r26	; 0x06
    4d46:	bf 83       	std	Y+7, r27	; 0x07
    4d48:	86 e3       	ldi	r24, 0x36	; 54
    4d4a:	93 e0       	ldi	r25, 0x03	; 3
    4d4c:	99 83       	std	Y+1, r25	; 0x01
    4d4e:	88 83       	st	Y, r24
    4d50:	1f 8a       	std	Y+23, r1	; 0x17
    4d52:	1e 8a       	std	Y+22, r1	; 0x16
    4d54:	19 8e       	std	Y+25, r1	; 0x19
    4d56:	18 8e       	std	Y+24, r1	; 0x18
    4d58:	1b 8e       	std	Y+27, r1	; 0x1b
    4d5a:	1a 8e       	std	Y+26, r1	; 0x1a
    4d5c:	1d 8e       	std	Y+29, r1	; 0x1d
    4d5e:	1c 8e       	std	Y+28, r1	; 0x1c
    4d60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d62:	8e 7f       	andi	r24, 0xFE	; 254
    4d64:	20 fb       	bst	r18, 0
    4d66:	81 f9       	bld	r24, 1
    4d68:	8e 8f       	std	Y+30, r24	; 0x1e
    4d6a:	64 2f       	mov	r22, r20
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	0e 94 43 26 	call	0x4c86	; 0x4c86 <_ZN14SoftwareSerial5setTXEh>
    4d72:	61 2f       	mov	r22, r17
    4d74:	ce 01       	movw	r24, r28
    4d76:	df 91       	pop	r29
    4d78:	cf 91       	pop	r28
    4d7a:	1f 91       	pop	r17
    4d7c:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <_ZN14SoftwareSerial5setRXEh>

00004d80 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	ec 01       	movw	r28, r24
    4d86:	9a 01       	movw	r18, r20
    4d88:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4d8a:	1b 8e       	std	Y+27, r1	; 0x1b
    4d8c:	1a 8e       	std	Y+26, r1	; 0x1a
    4d8e:	19 8e       	std	Y+25, r1	; 0x19
    4d90:	18 8e       	std	Y+24, r1	; 0x18
    4d92:	1f 8a       	std	Y+23, r1	; 0x17
    4d94:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	79 e0       	ldi	r23, 0x09	; 9
    4d9a:	8d e3       	ldi	r24, 0x3D	; 61
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__divmodsi4>
    4da2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4da4:	24 30       	cpi	r18, 0x04	; 4
    4da6:	31 05       	cpc	r19, r1
    4da8:	18 f0       	brcs	.+6      	; 0x4db0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    4daa:	c9 01       	movw	r24, r18
    4dac:	03 97       	sbiw	r24, 0x03	; 3
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4db4:	9d 8f       	std	Y+29, r25	; 0x1d
    4db6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4db8:	6c 85       	ldd	r22, Y+12	; 0x0c
    4dba:	66 31       	cpi	r22, 0x16	; 22
    4dbc:	08 f0       	brcs	.+2      	; 0x4dc0 <_ZN14SoftwareSerial5beginEl+0x40>
    4dbe:	69 c0       	rjmp	.+210    	; 0x4e92 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4dc0:	c9 01       	movw	r24, r18
    4dc2:	96 95       	lsr	r25
    4dc4:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4dc6:	84 31       	cpi	r24, 0x14	; 20
    4dc8:	91 05       	cpc	r25, r1
    4dca:	10 f0       	brcs	.+4      	; 0x4dd0 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    4dcc:	43 97       	sbiw	r24, 0x13	; 19
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4dd4:	9f 8b       	std	Y+23, r25	; 0x17
    4dd6:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4dd8:	36 97       	sbiw	r30, 0x06	; 6
    4dda:	18 f0       	brcs	.+6      	; 0x4de2 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    4ddc:	c9 01       	movw	r24, r18
    4dde:	05 97       	sbiw	r24, 0x05	; 5
    4de0:	02 c0       	rjmp	.+4      	; 0x4de6 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4de6:	99 8f       	std	Y+25, r25	; 0x19
    4de8:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4dea:	c9 01       	movw	r24, r18
    4dec:	88 0f       	add	r24, r24
    4dee:	99 1f       	adc	r25, r25
    4df0:	28 0f       	add	r18, r24
    4df2:	39 1f       	adc	r19, r25
    4df4:	36 95       	lsr	r19
    4df6:	27 95       	ror	r18
    4df8:	36 95       	lsr	r19
    4dfa:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4dfc:	2d 30       	cpi	r18, 0x0D	; 13
    4dfe:	31 05       	cpc	r19, r1
    4e00:	18 f0       	brcs	.+6      	; 0x4e08 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    4e02:	2c 50       	subi	r18, 0x0C	; 12
    4e04:	31 09       	sbc	r19, r1
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    4e08:	21 e0       	ldi	r18, 0x01	; 1
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4e0c:	3b 8f       	std	Y+27, r19	; 0x1b
    4e0e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    4e10:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    4e14:	68 30       	cpi	r22, 0x08	; 8
    4e16:	50 f0       	brcs	.+20     	; 0x4e2c <_ZN14SoftwareSerial5beginEl+0xac>
    4e18:	21 e0       	ldi	r18, 0x01	; 1
    4e1a:	6e 30       	cpi	r22, 0x0E	; 14
    4e1c:	08 f4       	brcc	.+2      	; 0x4e20 <_ZN14SoftwareSerial5beginEl+0xa0>
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	81 e0       	ldi	r24, 0x01	; 1
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <_ZN14SoftwareSerial5beginEl+0xa6>
    4e24:	88 0f       	add	r24, r24
    4e26:	2a 95       	dec	r18
    4e28:	ea f7       	brpl	.-6      	; 0x4e24 <_ZN14SoftwareSerial5beginEl+0xa4>
    4e2a:	01 c0       	rjmp	.+2      	; 0x4e2e <_ZN14SoftwareSerial5beginEl+0xae>
    4e2c:	84 e0       	ldi	r24, 0x04	; 4
    4e2e:	89 2b       	or	r24, r25
    4e30:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4e34:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e36:	98 30       	cpi	r25, 0x08	; 8
    4e38:	38 f0       	brcs	.+14     	; 0x4e48 <_ZN14SoftwareSerial5beginEl+0xc8>
    4e3a:	9e 30       	cpi	r25, 0x0E	; 14
    4e3c:	40 f0       	brcs	.+16     	; 0x4e4e <_ZN14SoftwareSerial5beginEl+0xce>
    4e3e:	96 31       	cpi	r25, 0x16	; 22
    4e40:	48 f0       	brcs	.+18     	; 0x4e54 <_ZN14SoftwareSerial5beginEl+0xd4>
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	08 c0       	rjmp	.+16     	; 0x4e58 <_ZN14SoftwareSerial5beginEl+0xd8>
    4e48:	2d e6       	ldi	r18, 0x6D	; 109
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	05 c0       	rjmp	.+10     	; 0x4e58 <_ZN14SoftwareSerial5beginEl+0xd8>
    4e4e:	2b e6       	ldi	r18, 0x6B	; 107
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	02 c0       	rjmp	.+4      	; 0x4e58 <_ZN14SoftwareSerial5beginEl+0xd8>
    4e54:	2c e6       	ldi	r18, 0x6C	; 108
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	3c 8b       	std	Y+20, r19	; 0x14
    4e5a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4e5c:	98 30       	cpi	r25, 0x08	; 8
    4e5e:	30 f4       	brcc	.+12     	; 0x4e6c <_ZN14SoftwareSerial5beginEl+0xec>
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	01 c0       	rjmp	.+2      	; 0x4e66 <_ZN14SoftwareSerial5beginEl+0xe6>
    4e64:	88 0f       	add	r24, r24
    4e66:	9a 95       	dec	r25
    4e68:	ea f7       	brpl	.-6      	; 0x4e64 <_ZN14SoftwareSerial5beginEl+0xe4>
    4e6a:	0e c0       	rjmp	.+28     	; 0x4e88 <_ZN14SoftwareSerial5beginEl+0x108>
    4e6c:	29 2f       	mov	r18, r25
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	9e 30       	cpi	r25, 0x0E	; 14
    4e72:	18 f4       	brcc	.+6      	; 0x4e7a <_ZN14SoftwareSerial5beginEl+0xfa>
    4e74:	28 50       	subi	r18, 0x08	; 8
    4e76:	31 09       	sbc	r19, r1
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <_ZN14SoftwareSerial5beginEl+0xfe>
    4e7a:	2e 50       	subi	r18, 0x0E	; 14
    4e7c:	31 09       	sbc	r19, r1
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	01 c0       	rjmp	.+2      	; 0x4e84 <_ZN14SoftwareSerial5beginEl+0x104>
    4e82:	88 0f       	add	r24, r24
    4e84:	2a 95       	dec	r18
    4e86:	ea f7       	brpl	.-6      	; 0x4e82 <_ZN14SoftwareSerial5beginEl+0x102>
    4e88:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4e8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	f1 f7       	brne	.-4      	; 0x4e8e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4e92:	ce 01       	movw	r24, r28
}
    4e94:	df 91       	pop	r29
    4e96:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4e98:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <_ZN14SoftwareSerial6listenEv>

00004e9c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4e9c:	08 95       	ret

00004e9e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4e9e:	08 95       	ret

00004ea0 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    4ea0:	1f 92       	push	r1
    4ea2:	0f 92       	push	r0
    4ea4:	0f b6       	in	r0, 0x3f	; 63
    4ea6:	0f 92       	push	r0
    4ea8:	11 24       	eor	r1, r1
    4eaa:	2f 93       	push	r18
    4eac:	3f 93       	push	r19
    4eae:	4f 93       	push	r20
    4eb0:	5f 93       	push	r21
    4eb2:	6f 93       	push	r22
    4eb4:	7f 93       	push	r23
    4eb6:	8f 93       	push	r24
    4eb8:	9f 93       	push	r25
    4eba:	af 93       	push	r26
    4ebc:	bf 93       	push	r27
    4ebe:	ef 93       	push	r30
    4ec0:	ff 93       	push	r31
    4ec2:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <intFunc>
    4ec6:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <intFunc+0x1>
    4eca:	09 95       	icall
    4ecc:	ff 91       	pop	r31
    4ece:	ef 91       	pop	r30
    4ed0:	bf 91       	pop	r27
    4ed2:	af 91       	pop	r26
    4ed4:	9f 91       	pop	r25
    4ed6:	8f 91       	pop	r24
    4ed8:	7f 91       	pop	r23
    4eda:	6f 91       	pop	r22
    4edc:	5f 91       	pop	r21
    4ede:	4f 91       	pop	r20
    4ee0:	3f 91       	pop	r19
    4ee2:	2f 91       	pop	r18
    4ee4:	0f 90       	pop	r0
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	0f 90       	pop	r0
    4eea:	1f 90       	pop	r1
    4eec:	18 95       	reti

00004eee <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4eee:	1f 92       	push	r1
    4ef0:	0f 92       	push	r0
    4ef2:	0f b6       	in	r0, 0x3f	; 63
    4ef4:	0f 92       	push	r0
    4ef6:	11 24       	eor	r1, r1
    4ef8:	2f 93       	push	r18
    4efa:	3f 93       	push	r19
    4efc:	4f 93       	push	r20
    4efe:	5f 93       	push	r21
    4f00:	6f 93       	push	r22
    4f02:	7f 93       	push	r23
    4f04:	8f 93       	push	r24
    4f06:	9f 93       	push	r25
    4f08:	af 93       	push	r26
    4f0a:	bf 93       	push	r27
    4f0c:	ef 93       	push	r30
    4f0e:	ff 93       	push	r31
    4f10:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <intFunc+0x2>
    4f14:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <intFunc+0x3>
    4f18:	09 95       	icall
    4f1a:	ff 91       	pop	r31
    4f1c:	ef 91       	pop	r30
    4f1e:	bf 91       	pop	r27
    4f20:	af 91       	pop	r26
    4f22:	9f 91       	pop	r25
    4f24:	8f 91       	pop	r24
    4f26:	7f 91       	pop	r23
    4f28:	6f 91       	pop	r22
    4f2a:	5f 91       	pop	r21
    4f2c:	4f 91       	pop	r20
    4f2e:	3f 91       	pop	r19
    4f30:	2f 91       	pop	r18
    4f32:	0f 90       	pop	r0
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	0f 90       	pop	r0
    4f38:	1f 90       	pop	r1
    4f3a:	18 95       	reti

00004f3c <__subsf3>:
    4f3c:	50 58       	subi	r21, 0x80	; 128

00004f3e <__addsf3>:
    4f3e:	bb 27       	eor	r27, r27
    4f40:	aa 27       	eor	r26, r26
    4f42:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__addsf3x>
    4f46:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__fp_round>
    4f4a:	0e 94 9d 14 	call	0x293a	; 0x293a <__fp_pscA>
    4f4e:	38 f0       	brcs	.+14     	; 0x4f5e <__addsf3+0x20>
    4f50:	0e 94 a4 14 	call	0x2948	; 0x2948 <__fp_pscB>
    4f54:	20 f0       	brcs	.+8      	; 0x4f5e <__addsf3+0x20>
    4f56:	39 f4       	brne	.+14     	; 0x4f66 <__addsf3+0x28>
    4f58:	9f 3f       	cpi	r25, 0xFF	; 255
    4f5a:	19 f4       	brne	.+6      	; 0x4f62 <__addsf3+0x24>
    4f5c:	26 f4       	brtc	.+8      	; 0x4f66 <__addsf3+0x28>
    4f5e:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__fp_nan>
    4f62:	0e f4       	brtc	.+2      	; 0x4f66 <__addsf3+0x28>
    4f64:	e0 95       	com	r30
    4f66:	e7 fb       	bst	r30, 7
    4f68:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_inf>

00004f6c <__addsf3x>:
    4f6c:	e9 2f       	mov	r30, r25
    4f6e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fp_split3>
    4f72:	58 f3       	brcs	.-42     	; 0x4f4a <__addsf3+0xc>
    4f74:	ba 17       	cp	r27, r26
    4f76:	62 07       	cpc	r22, r18
    4f78:	73 07       	cpc	r23, r19
    4f7a:	84 07       	cpc	r24, r20
    4f7c:	95 07       	cpc	r25, r21
    4f7e:	20 f0       	brcs	.+8      	; 0x4f88 <__addsf3x+0x1c>
    4f80:	79 f4       	brne	.+30     	; 0x4fa0 <__addsf3x+0x34>
    4f82:	a6 f5       	brtc	.+104    	; 0x4fec <__addsf3x+0x80>
    4f84:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_zero>
    4f88:	0e f4       	brtc	.+2      	; 0x4f8c <__addsf3x+0x20>
    4f8a:	e0 95       	com	r30
    4f8c:	0b 2e       	mov	r0, r27
    4f8e:	ba 2f       	mov	r27, r26
    4f90:	a0 2d       	mov	r26, r0
    4f92:	0b 01       	movw	r0, r22
    4f94:	b9 01       	movw	r22, r18
    4f96:	90 01       	movw	r18, r0
    4f98:	0c 01       	movw	r0, r24
    4f9a:	ca 01       	movw	r24, r20
    4f9c:	a0 01       	movw	r20, r0
    4f9e:	11 24       	eor	r1, r1
    4fa0:	ff 27       	eor	r31, r31
    4fa2:	59 1b       	sub	r21, r25
    4fa4:	99 f0       	breq	.+38     	; 0x4fcc <__addsf3x+0x60>
    4fa6:	59 3f       	cpi	r21, 0xF9	; 249
    4fa8:	50 f4       	brcc	.+20     	; 0x4fbe <__addsf3x+0x52>
    4faa:	50 3e       	cpi	r21, 0xE0	; 224
    4fac:	68 f1       	brcs	.+90     	; 0x5008 <__addsf3x+0x9c>
    4fae:	1a 16       	cp	r1, r26
    4fb0:	f0 40       	sbci	r31, 0x00	; 0
    4fb2:	a2 2f       	mov	r26, r18
    4fb4:	23 2f       	mov	r18, r19
    4fb6:	34 2f       	mov	r19, r20
    4fb8:	44 27       	eor	r20, r20
    4fba:	58 5f       	subi	r21, 0xF8	; 248
    4fbc:	f3 cf       	rjmp	.-26     	; 0x4fa4 <__addsf3x+0x38>
    4fbe:	46 95       	lsr	r20
    4fc0:	37 95       	ror	r19
    4fc2:	27 95       	ror	r18
    4fc4:	a7 95       	ror	r26
    4fc6:	f0 40       	sbci	r31, 0x00	; 0
    4fc8:	53 95       	inc	r21
    4fca:	c9 f7       	brne	.-14     	; 0x4fbe <__addsf3x+0x52>
    4fcc:	7e f4       	brtc	.+30     	; 0x4fec <__addsf3x+0x80>
    4fce:	1f 16       	cp	r1, r31
    4fd0:	ba 0b       	sbc	r27, r26
    4fd2:	62 0b       	sbc	r22, r18
    4fd4:	73 0b       	sbc	r23, r19
    4fd6:	84 0b       	sbc	r24, r20
    4fd8:	ba f0       	brmi	.+46     	; 0x5008 <__addsf3x+0x9c>
    4fda:	91 50       	subi	r25, 0x01	; 1
    4fdc:	a1 f0       	breq	.+40     	; 0x5006 <__addsf3x+0x9a>
    4fde:	ff 0f       	add	r31, r31
    4fe0:	bb 1f       	adc	r27, r27
    4fe2:	66 1f       	adc	r22, r22
    4fe4:	77 1f       	adc	r23, r23
    4fe6:	88 1f       	adc	r24, r24
    4fe8:	c2 f7       	brpl	.-16     	; 0x4fda <__addsf3x+0x6e>
    4fea:	0e c0       	rjmp	.+28     	; 0x5008 <__addsf3x+0x9c>
    4fec:	ba 0f       	add	r27, r26
    4fee:	62 1f       	adc	r22, r18
    4ff0:	73 1f       	adc	r23, r19
    4ff2:	84 1f       	adc	r24, r20
    4ff4:	48 f4       	brcc	.+18     	; 0x5008 <__addsf3x+0x9c>
    4ff6:	87 95       	ror	r24
    4ff8:	77 95       	ror	r23
    4ffa:	67 95       	ror	r22
    4ffc:	b7 95       	ror	r27
    4ffe:	f7 95       	ror	r31
    5000:	9e 3f       	cpi	r25, 0xFE	; 254
    5002:	08 f0       	brcs	.+2      	; 0x5006 <__addsf3x+0x9a>
    5004:	b0 cf       	rjmp	.-160    	; 0x4f66 <__addsf3+0x28>
    5006:	93 95       	inc	r25
    5008:	88 0f       	add	r24, r24
    500a:	08 f0       	brcs	.+2      	; 0x500e <__addsf3x+0xa2>
    500c:	99 27       	eor	r25, r25
    500e:	ee 0f       	add	r30, r30
    5010:	97 95       	ror	r25
    5012:	87 95       	ror	r24
    5014:	08 95       	ret

00005016 <__cmpsf2>:
    5016:	0e 94 82 28 	call	0x5104	; 0x5104 <__fp_cmp>
    501a:	08 f4       	brcc	.+2      	; 0x501e <__cmpsf2+0x8>
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	08 95       	ret

00005020 <__divsf3>:
    5020:	0e 94 24 28 	call	0x5048	; 0x5048 <__divsf3x>
    5024:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__fp_round>
    5028:	0e 94 a4 14 	call	0x2948	; 0x2948 <__fp_pscB>
    502c:	58 f0       	brcs	.+22     	; 0x5044 <__divsf3+0x24>
    502e:	0e 94 9d 14 	call	0x293a	; 0x293a <__fp_pscA>
    5032:	40 f0       	brcs	.+16     	; 0x5044 <__divsf3+0x24>
    5034:	29 f4       	brne	.+10     	; 0x5040 <__divsf3+0x20>
    5036:	5f 3f       	cpi	r21, 0xFF	; 255
    5038:	29 f0       	breq	.+10     	; 0x5044 <__divsf3+0x24>
    503a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_inf>
    503e:	51 11       	cpse	r21, r1
    5040:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_szero>
    5044:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__fp_nan>

00005048 <__divsf3x>:
    5048:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fp_split3>
    504c:	68 f3       	brcs	.-38     	; 0x5028 <__divsf3+0x8>

0000504e <__divsf3_pse>:
    504e:	99 23       	and	r25, r25
    5050:	b1 f3       	breq	.-20     	; 0x503e <__divsf3+0x1e>
    5052:	55 23       	and	r21, r21
    5054:	91 f3       	breq	.-28     	; 0x503a <__divsf3+0x1a>
    5056:	95 1b       	sub	r25, r21
    5058:	55 0b       	sbc	r21, r21
    505a:	bb 27       	eor	r27, r27
    505c:	aa 27       	eor	r26, r26
    505e:	62 17       	cp	r22, r18
    5060:	73 07       	cpc	r23, r19
    5062:	84 07       	cpc	r24, r20
    5064:	38 f0       	brcs	.+14     	; 0x5074 <__divsf3_pse+0x26>
    5066:	9f 5f       	subi	r25, 0xFF	; 255
    5068:	5f 4f       	sbci	r21, 0xFF	; 255
    506a:	22 0f       	add	r18, r18
    506c:	33 1f       	adc	r19, r19
    506e:	44 1f       	adc	r20, r20
    5070:	aa 1f       	adc	r26, r26
    5072:	a9 f3       	breq	.-22     	; 0x505e <__divsf3_pse+0x10>
    5074:	35 d0       	rcall	.+106    	; 0x50e0 <__divsf3_pse+0x92>
    5076:	0e 2e       	mov	r0, r30
    5078:	3a f0       	brmi	.+14     	; 0x5088 <__divsf3_pse+0x3a>
    507a:	e0 e8       	ldi	r30, 0x80	; 128
    507c:	32 d0       	rcall	.+100    	; 0x50e2 <__divsf3_pse+0x94>
    507e:	91 50       	subi	r25, 0x01	; 1
    5080:	50 40       	sbci	r21, 0x00	; 0
    5082:	e6 95       	lsr	r30
    5084:	00 1c       	adc	r0, r0
    5086:	ca f7       	brpl	.-14     	; 0x507a <__divsf3_pse+0x2c>
    5088:	2b d0       	rcall	.+86     	; 0x50e0 <__divsf3_pse+0x92>
    508a:	fe 2f       	mov	r31, r30
    508c:	29 d0       	rcall	.+82     	; 0x50e0 <__divsf3_pse+0x92>
    508e:	66 0f       	add	r22, r22
    5090:	77 1f       	adc	r23, r23
    5092:	88 1f       	adc	r24, r24
    5094:	bb 1f       	adc	r27, r27
    5096:	26 17       	cp	r18, r22
    5098:	37 07       	cpc	r19, r23
    509a:	48 07       	cpc	r20, r24
    509c:	ab 07       	cpc	r26, r27
    509e:	b0 e8       	ldi	r27, 0x80	; 128
    50a0:	09 f0       	breq	.+2      	; 0x50a4 <__divsf3_pse+0x56>
    50a2:	bb 0b       	sbc	r27, r27
    50a4:	80 2d       	mov	r24, r0
    50a6:	bf 01       	movw	r22, r30
    50a8:	ff 27       	eor	r31, r31
    50aa:	93 58       	subi	r25, 0x83	; 131
    50ac:	5f 4f       	sbci	r21, 0xFF	; 255
    50ae:	3a f0       	brmi	.+14     	; 0x50be <__divsf3_pse+0x70>
    50b0:	9e 3f       	cpi	r25, 0xFE	; 254
    50b2:	51 05       	cpc	r21, r1
    50b4:	78 f0       	brcs	.+30     	; 0x50d4 <__divsf3_pse+0x86>
    50b6:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_inf>
    50ba:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_szero>
    50be:	5f 3f       	cpi	r21, 0xFF	; 255
    50c0:	e4 f3       	brlt	.-8      	; 0x50ba <__divsf3_pse+0x6c>
    50c2:	98 3e       	cpi	r25, 0xE8	; 232
    50c4:	d4 f3       	brlt	.-12     	; 0x50ba <__divsf3_pse+0x6c>
    50c6:	86 95       	lsr	r24
    50c8:	77 95       	ror	r23
    50ca:	67 95       	ror	r22
    50cc:	b7 95       	ror	r27
    50ce:	f7 95       	ror	r31
    50d0:	9f 5f       	subi	r25, 0xFF	; 255
    50d2:	c9 f7       	brne	.-14     	; 0x50c6 <__divsf3_pse+0x78>
    50d4:	88 0f       	add	r24, r24
    50d6:	91 1d       	adc	r25, r1
    50d8:	96 95       	lsr	r25
    50da:	87 95       	ror	r24
    50dc:	97 f9       	bld	r25, 7
    50de:	08 95       	ret
    50e0:	e1 e0       	ldi	r30, 0x01	; 1
    50e2:	66 0f       	add	r22, r22
    50e4:	77 1f       	adc	r23, r23
    50e6:	88 1f       	adc	r24, r24
    50e8:	bb 1f       	adc	r27, r27
    50ea:	62 17       	cp	r22, r18
    50ec:	73 07       	cpc	r23, r19
    50ee:	84 07       	cpc	r24, r20
    50f0:	ba 07       	cpc	r27, r26
    50f2:	20 f0       	brcs	.+8      	; 0x50fc <__divsf3_pse+0xae>
    50f4:	62 1b       	sub	r22, r18
    50f6:	73 0b       	sbc	r23, r19
    50f8:	84 0b       	sbc	r24, r20
    50fa:	ba 0b       	sbc	r27, r26
    50fc:	ee 1f       	adc	r30, r30
    50fe:	88 f7       	brcc	.-30     	; 0x50e2 <__divsf3_pse+0x94>
    5100:	e0 95       	com	r30
    5102:	08 95       	ret

00005104 <__fp_cmp>:
    5104:	99 0f       	add	r25, r25
    5106:	00 08       	sbc	r0, r0
    5108:	55 0f       	add	r21, r21
    510a:	aa 0b       	sbc	r26, r26
    510c:	e0 e8       	ldi	r30, 0x80	; 128
    510e:	fe ef       	ldi	r31, 0xFE	; 254
    5110:	16 16       	cp	r1, r22
    5112:	17 06       	cpc	r1, r23
    5114:	e8 07       	cpc	r30, r24
    5116:	f9 07       	cpc	r31, r25
    5118:	c0 f0       	brcs	.+48     	; 0x514a <__fp_cmp+0x46>
    511a:	12 16       	cp	r1, r18
    511c:	13 06       	cpc	r1, r19
    511e:	e4 07       	cpc	r30, r20
    5120:	f5 07       	cpc	r31, r21
    5122:	98 f0       	brcs	.+38     	; 0x514a <__fp_cmp+0x46>
    5124:	62 1b       	sub	r22, r18
    5126:	73 0b       	sbc	r23, r19
    5128:	84 0b       	sbc	r24, r20
    512a:	95 0b       	sbc	r25, r21
    512c:	39 f4       	brne	.+14     	; 0x513c <__fp_cmp+0x38>
    512e:	0a 26       	eor	r0, r26
    5130:	61 f0       	breq	.+24     	; 0x514a <__fp_cmp+0x46>
    5132:	23 2b       	or	r18, r19
    5134:	24 2b       	or	r18, r20
    5136:	25 2b       	or	r18, r21
    5138:	21 f4       	brne	.+8      	; 0x5142 <__fp_cmp+0x3e>
    513a:	08 95       	ret
    513c:	0a 26       	eor	r0, r26
    513e:	09 f4       	brne	.+2      	; 0x5142 <__fp_cmp+0x3e>
    5140:	a1 40       	sbci	r26, 0x01	; 1
    5142:	a6 95       	lsr	r26
    5144:	8f ef       	ldi	r24, 0xFF	; 255
    5146:	81 1d       	adc	r24, r1
    5148:	81 1d       	adc	r24, r1
    514a:	08 95       	ret

0000514c <__gesf2>:
    514c:	0e 94 82 28 	call	0x5104	; 0x5104 <__fp_cmp>
    5150:	08 f4       	brcc	.+2      	; 0x5154 <__gesf2+0x8>
    5152:	8f ef       	ldi	r24, 0xFF	; 255
    5154:	08 95       	ret

00005156 <__unordsf2>:
    5156:	0e 94 82 28 	call	0x5104	; 0x5104 <__fp_cmp>
    515a:	88 0b       	sbc	r24, r24
    515c:	99 0b       	sbc	r25, r25
    515e:	08 95       	ret

00005160 <__divmodhi4>:
    5160:	97 fb       	bst	r25, 7
    5162:	07 2e       	mov	r0, r23
    5164:	16 f4       	brtc	.+4      	; 0x516a <__divmodhi4+0xa>
    5166:	00 94       	com	r0
    5168:	07 d0       	rcall	.+14     	; 0x5178 <__divmodhi4_neg1>
    516a:	77 fd       	sbrc	r23, 7
    516c:	09 d0       	rcall	.+18     	; 0x5180 <__divmodhi4_neg2>
    516e:	0e 94 0b 29 	call	0x5216	; 0x5216 <__udivmodhi4>
    5172:	07 fc       	sbrc	r0, 7
    5174:	05 d0       	rcall	.+10     	; 0x5180 <__divmodhi4_neg2>
    5176:	3e f4       	brtc	.+14     	; 0x5186 <__divmodhi4_exit>

00005178 <__divmodhi4_neg1>:
    5178:	90 95       	com	r25
    517a:	81 95       	neg	r24
    517c:	9f 4f       	sbci	r25, 0xFF	; 255
    517e:	08 95       	ret

00005180 <__divmodhi4_neg2>:
    5180:	70 95       	com	r23
    5182:	61 95       	neg	r22
    5184:	7f 4f       	sbci	r23, 0xFF	; 255

00005186 <__divmodhi4_exit>:
    5186:	08 95       	ret

00005188 <__udivmodsi4>:
    5188:	a1 e2       	ldi	r26, 0x21	; 33
    518a:	1a 2e       	mov	r1, r26
    518c:	aa 1b       	sub	r26, r26
    518e:	bb 1b       	sub	r27, r27
    5190:	fd 01       	movw	r30, r26
    5192:	0d c0       	rjmp	.+26     	; 0x51ae <__udivmodsi4_ep>

00005194 <__udivmodsi4_loop>:
    5194:	aa 1f       	adc	r26, r26
    5196:	bb 1f       	adc	r27, r27
    5198:	ee 1f       	adc	r30, r30
    519a:	ff 1f       	adc	r31, r31
    519c:	a2 17       	cp	r26, r18
    519e:	b3 07       	cpc	r27, r19
    51a0:	e4 07       	cpc	r30, r20
    51a2:	f5 07       	cpc	r31, r21
    51a4:	20 f0       	brcs	.+8      	; 0x51ae <__udivmodsi4_ep>
    51a6:	a2 1b       	sub	r26, r18
    51a8:	b3 0b       	sbc	r27, r19
    51aa:	e4 0b       	sbc	r30, r20
    51ac:	f5 0b       	sbc	r31, r21

000051ae <__udivmodsi4_ep>:
    51ae:	66 1f       	adc	r22, r22
    51b0:	77 1f       	adc	r23, r23
    51b2:	88 1f       	adc	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	1a 94       	dec	r1
    51b8:	69 f7       	brne	.-38     	; 0x5194 <__udivmodsi4_loop>
    51ba:	60 95       	com	r22
    51bc:	70 95       	com	r23
    51be:	80 95       	com	r24
    51c0:	90 95       	com	r25
    51c2:	9b 01       	movw	r18, r22
    51c4:	ac 01       	movw	r20, r24
    51c6:	bd 01       	movw	r22, r26
    51c8:	cf 01       	movw	r24, r30
    51ca:	08 95       	ret

000051cc <__divmodsi4>:
    51cc:	05 2e       	mov	r0, r21
    51ce:	97 fb       	bst	r25, 7
    51d0:	1e f4       	brtc	.+6      	; 0x51d8 <__divmodsi4+0xc>
    51d2:	00 94       	com	r0
    51d4:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__negsi2>
    51d8:	57 fd       	sbrc	r21, 7
    51da:	07 d0       	rcall	.+14     	; 0x51ea <__divmodsi4_neg2>
    51dc:	0e 94 c4 28 	call	0x5188	; 0x5188 <__udivmodsi4>
    51e0:	07 fc       	sbrc	r0, 7
    51e2:	03 d0       	rcall	.+6      	; 0x51ea <__divmodsi4_neg2>
    51e4:	4e f4       	brtc	.+18     	; 0x51f8 <__divmodsi4_exit>
    51e6:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__negsi2>

000051ea <__divmodsi4_neg2>:
    51ea:	50 95       	com	r21
    51ec:	40 95       	com	r20
    51ee:	30 95       	com	r19
    51f0:	21 95       	neg	r18
    51f2:	3f 4f       	sbci	r19, 0xFF	; 255
    51f4:	4f 4f       	sbci	r20, 0xFF	; 255
    51f6:	5f 4f       	sbci	r21, 0xFF	; 255

000051f8 <__divmodsi4_exit>:
    51f8:	08 95       	ret

000051fa <__negsi2>:
    51fa:	90 95       	com	r25
    51fc:	80 95       	com	r24
    51fe:	70 95       	com	r23
    5200:	61 95       	neg	r22
    5202:	7f 4f       	sbci	r23, 0xFF	; 255
    5204:	8f 4f       	sbci	r24, 0xFF	; 255
    5206:	9f 4f       	sbci	r25, 0xFF	; 255
    5208:	08 95       	ret

0000520a <__tablejump2__>:
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	05 90       	lpm	r0, Z+
    5210:	f4 91       	lpm	r31, Z
    5212:	e0 2d       	mov	r30, r0
    5214:	09 94       	ijmp

00005216 <__udivmodhi4>:
    5216:	aa 1b       	sub	r26, r26
    5218:	bb 1b       	sub	r27, r27
    521a:	51 e1       	ldi	r21, 0x11	; 17
    521c:	07 c0       	rjmp	.+14     	; 0x522c <__udivmodhi4_ep>

0000521e <__udivmodhi4_loop>:
    521e:	aa 1f       	adc	r26, r26
    5220:	bb 1f       	adc	r27, r27
    5222:	a6 17       	cp	r26, r22
    5224:	b7 07       	cpc	r27, r23
    5226:	10 f0       	brcs	.+4      	; 0x522c <__udivmodhi4_ep>
    5228:	a6 1b       	sub	r26, r22
    522a:	b7 0b       	sbc	r27, r23

0000522c <__udivmodhi4_ep>:
    522c:	88 1f       	adc	r24, r24
    522e:	99 1f       	adc	r25, r25
    5230:	5a 95       	dec	r21
    5232:	a9 f7       	brne	.-22     	; 0x521e <__udivmodhi4_loop>
    5234:	80 95       	com	r24
    5236:	90 95       	com	r25
    5238:	bc 01       	movw	r22, r24
    523a:	cd 01       	movw	r24, r26
    523c:	08 95       	ret

0000523e <malloc>:
    523e:	0f 93       	push	r16
    5240:	1f 93       	push	r17
    5242:	cf 93       	push	r28
    5244:	df 93       	push	r29
    5246:	82 30       	cpi	r24, 0x02	; 2
    5248:	91 05       	cpc	r25, r1
    524a:	10 f4       	brcc	.+4      	; 0x5250 <malloc+0x12>
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	e0 91 4b 08 	lds	r30, 0x084B	; 0x80084b <__flp>
    5254:	f0 91 4c 08 	lds	r31, 0x084C	; 0x80084c <__flp+0x1>
    5258:	20 e0       	ldi	r18, 0x00	; 0
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	a0 e0       	ldi	r26, 0x00	; 0
    525e:	b0 e0       	ldi	r27, 0x00	; 0
    5260:	30 97       	sbiw	r30, 0x00	; 0
    5262:	19 f1       	breq	.+70     	; 0x52aa <malloc+0x6c>
    5264:	40 81       	ld	r20, Z
    5266:	51 81       	ldd	r21, Z+1	; 0x01
    5268:	02 81       	ldd	r16, Z+2	; 0x02
    526a:	13 81       	ldd	r17, Z+3	; 0x03
    526c:	48 17       	cp	r20, r24
    526e:	59 07       	cpc	r21, r25
    5270:	c8 f0       	brcs	.+50     	; 0x52a4 <malloc+0x66>
    5272:	84 17       	cp	r24, r20
    5274:	95 07       	cpc	r25, r21
    5276:	69 f4       	brne	.+26     	; 0x5292 <malloc+0x54>
    5278:	10 97       	sbiw	r26, 0x00	; 0
    527a:	31 f0       	breq	.+12     	; 0x5288 <malloc+0x4a>
    527c:	12 96       	adiw	r26, 0x02	; 2
    527e:	0c 93       	st	X, r16
    5280:	12 97       	sbiw	r26, 0x02	; 2
    5282:	13 96       	adiw	r26, 0x03	; 3
    5284:	1c 93       	st	X, r17
    5286:	27 c0       	rjmp	.+78     	; 0x52d6 <malloc+0x98>
    5288:	00 93 4b 08 	sts	0x084B, r16	; 0x80084b <__flp>
    528c:	10 93 4c 08 	sts	0x084C, r17	; 0x80084c <__flp+0x1>
    5290:	22 c0       	rjmp	.+68     	; 0x52d6 <malloc+0x98>
    5292:	21 15       	cp	r18, r1
    5294:	31 05       	cpc	r19, r1
    5296:	19 f0       	breq	.+6      	; 0x529e <malloc+0x60>
    5298:	42 17       	cp	r20, r18
    529a:	53 07       	cpc	r21, r19
    529c:	18 f4       	brcc	.+6      	; 0x52a4 <malloc+0x66>
    529e:	9a 01       	movw	r18, r20
    52a0:	bd 01       	movw	r22, r26
    52a2:	ef 01       	movw	r28, r30
    52a4:	df 01       	movw	r26, r30
    52a6:	f8 01       	movw	r30, r16
    52a8:	db cf       	rjmp	.-74     	; 0x5260 <malloc+0x22>
    52aa:	21 15       	cp	r18, r1
    52ac:	31 05       	cpc	r19, r1
    52ae:	f9 f0       	breq	.+62     	; 0x52ee <malloc+0xb0>
    52b0:	28 1b       	sub	r18, r24
    52b2:	39 0b       	sbc	r19, r25
    52b4:	24 30       	cpi	r18, 0x04	; 4
    52b6:	31 05       	cpc	r19, r1
    52b8:	80 f4       	brcc	.+32     	; 0x52da <malloc+0x9c>
    52ba:	8a 81       	ldd	r24, Y+2	; 0x02
    52bc:	9b 81       	ldd	r25, Y+3	; 0x03
    52be:	61 15       	cp	r22, r1
    52c0:	71 05       	cpc	r23, r1
    52c2:	21 f0       	breq	.+8      	; 0x52cc <malloc+0x8e>
    52c4:	fb 01       	movw	r30, r22
    52c6:	93 83       	std	Z+3, r25	; 0x03
    52c8:	82 83       	std	Z+2, r24	; 0x02
    52ca:	04 c0       	rjmp	.+8      	; 0x52d4 <malloc+0x96>
    52cc:	90 93 4c 08 	sts	0x084C, r25	; 0x80084c <__flp+0x1>
    52d0:	80 93 4b 08 	sts	0x084B, r24	; 0x80084b <__flp>
    52d4:	fe 01       	movw	r30, r28
    52d6:	32 96       	adiw	r30, 0x02	; 2
    52d8:	44 c0       	rjmp	.+136    	; 0x5362 <malloc+0x124>
    52da:	fe 01       	movw	r30, r28
    52dc:	e2 0f       	add	r30, r18
    52de:	f3 1f       	adc	r31, r19
    52e0:	81 93       	st	Z+, r24
    52e2:	91 93       	st	Z+, r25
    52e4:	22 50       	subi	r18, 0x02	; 2
    52e6:	31 09       	sbc	r19, r1
    52e8:	39 83       	std	Y+1, r19	; 0x01
    52ea:	28 83       	st	Y, r18
    52ec:	3a c0       	rjmp	.+116    	; 0x5362 <malloc+0x124>
    52ee:	20 91 49 08 	lds	r18, 0x0849	; 0x800849 <__brkval>
    52f2:	30 91 4a 08 	lds	r19, 0x084A	; 0x80084a <__brkval+0x1>
    52f6:	23 2b       	or	r18, r19
    52f8:	41 f4       	brne	.+16     	; 0x530a <malloc+0xcc>
    52fa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_start>
    52fe:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_start+0x1>
    5302:	30 93 4a 08 	sts	0x084A, r19	; 0x80084a <__brkval+0x1>
    5306:	20 93 49 08 	sts	0x0849, r18	; 0x800849 <__brkval>
    530a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_end>
    530e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_end+0x1>
    5312:	21 15       	cp	r18, r1
    5314:	31 05       	cpc	r19, r1
    5316:	41 f4       	brne	.+16     	; 0x5328 <malloc+0xea>
    5318:	2d b7       	in	r18, 0x3d	; 61
    531a:	3e b7       	in	r19, 0x3e	; 62
    531c:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <__malloc_margin>
    5320:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <__malloc_margin+0x1>
    5324:	24 1b       	sub	r18, r20
    5326:	35 0b       	sbc	r19, r21
    5328:	e0 91 49 08 	lds	r30, 0x0849	; 0x800849 <__brkval>
    532c:	f0 91 4a 08 	lds	r31, 0x084A	; 0x80084a <__brkval+0x1>
    5330:	e2 17       	cp	r30, r18
    5332:	f3 07       	cpc	r31, r19
    5334:	a0 f4       	brcc	.+40     	; 0x535e <malloc+0x120>
    5336:	2e 1b       	sub	r18, r30
    5338:	3f 0b       	sbc	r19, r31
    533a:	28 17       	cp	r18, r24
    533c:	39 07       	cpc	r19, r25
    533e:	78 f0       	brcs	.+30     	; 0x535e <malloc+0x120>
    5340:	ac 01       	movw	r20, r24
    5342:	4e 5f       	subi	r20, 0xFE	; 254
    5344:	5f 4f       	sbci	r21, 0xFF	; 255
    5346:	24 17       	cp	r18, r20
    5348:	35 07       	cpc	r19, r21
    534a:	48 f0       	brcs	.+18     	; 0x535e <malloc+0x120>
    534c:	4e 0f       	add	r20, r30
    534e:	5f 1f       	adc	r21, r31
    5350:	50 93 4a 08 	sts	0x084A, r21	; 0x80084a <__brkval+0x1>
    5354:	40 93 49 08 	sts	0x0849, r20	; 0x800849 <__brkval>
    5358:	81 93       	st	Z+, r24
    535a:	91 93       	st	Z+, r25
    535c:	02 c0       	rjmp	.+4      	; 0x5362 <malloc+0x124>
    535e:	e0 e0       	ldi	r30, 0x00	; 0
    5360:	f0 e0       	ldi	r31, 0x00	; 0
    5362:	cf 01       	movw	r24, r30
    5364:	df 91       	pop	r29
    5366:	cf 91       	pop	r28
    5368:	1f 91       	pop	r17
    536a:	0f 91       	pop	r16
    536c:	08 95       	ret

0000536e <free>:
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	00 97       	sbiw	r24, 0x00	; 0
    5374:	09 f4       	brne	.+2      	; 0x5378 <free+0xa>
    5376:	81 c0       	rjmp	.+258    	; 0x547a <free+0x10c>
    5378:	fc 01       	movw	r30, r24
    537a:	32 97       	sbiw	r30, 0x02	; 2
    537c:	13 82       	std	Z+3, r1	; 0x03
    537e:	12 82       	std	Z+2, r1	; 0x02
    5380:	a0 91 4b 08 	lds	r26, 0x084B	; 0x80084b <__flp>
    5384:	b0 91 4c 08 	lds	r27, 0x084C	; 0x80084c <__flp+0x1>
    5388:	10 97       	sbiw	r26, 0x00	; 0
    538a:	81 f4       	brne	.+32     	; 0x53ac <free+0x3e>
    538c:	20 81       	ld	r18, Z
    538e:	31 81       	ldd	r19, Z+1	; 0x01
    5390:	82 0f       	add	r24, r18
    5392:	93 1f       	adc	r25, r19
    5394:	20 91 49 08 	lds	r18, 0x0849	; 0x800849 <__brkval>
    5398:	30 91 4a 08 	lds	r19, 0x084A	; 0x80084a <__brkval+0x1>
    539c:	28 17       	cp	r18, r24
    539e:	39 07       	cpc	r19, r25
    53a0:	51 f5       	brne	.+84     	; 0x53f6 <free+0x88>
    53a2:	f0 93 4a 08 	sts	0x084A, r31	; 0x80084a <__brkval+0x1>
    53a6:	e0 93 49 08 	sts	0x0849, r30	; 0x800849 <__brkval>
    53aa:	67 c0       	rjmp	.+206    	; 0x547a <free+0x10c>
    53ac:	ed 01       	movw	r28, r26
    53ae:	20 e0       	ldi	r18, 0x00	; 0
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	ce 17       	cp	r28, r30
    53b4:	df 07       	cpc	r29, r31
    53b6:	40 f4       	brcc	.+16     	; 0x53c8 <free+0x5a>
    53b8:	4a 81       	ldd	r20, Y+2	; 0x02
    53ba:	5b 81       	ldd	r21, Y+3	; 0x03
    53bc:	9e 01       	movw	r18, r28
    53be:	41 15       	cp	r20, r1
    53c0:	51 05       	cpc	r21, r1
    53c2:	f1 f0       	breq	.+60     	; 0x5400 <free+0x92>
    53c4:	ea 01       	movw	r28, r20
    53c6:	f5 cf       	rjmp	.-22     	; 0x53b2 <free+0x44>
    53c8:	d3 83       	std	Z+3, r29	; 0x03
    53ca:	c2 83       	std	Z+2, r28	; 0x02
    53cc:	40 81       	ld	r20, Z
    53ce:	51 81       	ldd	r21, Z+1	; 0x01
    53d0:	84 0f       	add	r24, r20
    53d2:	95 1f       	adc	r25, r21
    53d4:	c8 17       	cp	r28, r24
    53d6:	d9 07       	cpc	r29, r25
    53d8:	59 f4       	brne	.+22     	; 0x53f0 <free+0x82>
    53da:	88 81       	ld	r24, Y
    53dc:	99 81       	ldd	r25, Y+1	; 0x01
    53de:	84 0f       	add	r24, r20
    53e0:	95 1f       	adc	r25, r21
    53e2:	02 96       	adiw	r24, 0x02	; 2
    53e4:	91 83       	std	Z+1, r25	; 0x01
    53e6:	80 83       	st	Z, r24
    53e8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ea:	9b 81       	ldd	r25, Y+3	; 0x03
    53ec:	93 83       	std	Z+3, r25	; 0x03
    53ee:	82 83       	std	Z+2, r24	; 0x02
    53f0:	21 15       	cp	r18, r1
    53f2:	31 05       	cpc	r19, r1
    53f4:	29 f4       	brne	.+10     	; 0x5400 <free+0x92>
    53f6:	f0 93 4c 08 	sts	0x084C, r31	; 0x80084c <__flp+0x1>
    53fa:	e0 93 4b 08 	sts	0x084B, r30	; 0x80084b <__flp>
    53fe:	3d c0       	rjmp	.+122    	; 0x547a <free+0x10c>
    5400:	e9 01       	movw	r28, r18
    5402:	fb 83       	std	Y+3, r31	; 0x03
    5404:	ea 83       	std	Y+2, r30	; 0x02
    5406:	49 91       	ld	r20, Y+
    5408:	59 91       	ld	r21, Y+
    540a:	c4 0f       	add	r28, r20
    540c:	d5 1f       	adc	r29, r21
    540e:	ec 17       	cp	r30, r28
    5410:	fd 07       	cpc	r31, r29
    5412:	61 f4       	brne	.+24     	; 0x542c <free+0xbe>
    5414:	80 81       	ld	r24, Z
    5416:	91 81       	ldd	r25, Z+1	; 0x01
    5418:	84 0f       	add	r24, r20
    541a:	95 1f       	adc	r25, r21
    541c:	02 96       	adiw	r24, 0x02	; 2
    541e:	e9 01       	movw	r28, r18
    5420:	99 83       	std	Y+1, r25	; 0x01
    5422:	88 83       	st	Y, r24
    5424:	82 81       	ldd	r24, Z+2	; 0x02
    5426:	93 81       	ldd	r25, Z+3	; 0x03
    5428:	9b 83       	std	Y+3, r25	; 0x03
    542a:	8a 83       	std	Y+2, r24	; 0x02
    542c:	e0 e0       	ldi	r30, 0x00	; 0
    542e:	f0 e0       	ldi	r31, 0x00	; 0
    5430:	12 96       	adiw	r26, 0x02	; 2
    5432:	8d 91       	ld	r24, X+
    5434:	9c 91       	ld	r25, X
    5436:	13 97       	sbiw	r26, 0x03	; 3
    5438:	00 97       	sbiw	r24, 0x00	; 0
    543a:	19 f0       	breq	.+6      	; 0x5442 <free+0xd4>
    543c:	fd 01       	movw	r30, r26
    543e:	dc 01       	movw	r26, r24
    5440:	f7 cf       	rjmp	.-18     	; 0x5430 <free+0xc2>
    5442:	8d 91       	ld	r24, X+
    5444:	9c 91       	ld	r25, X
    5446:	11 97       	sbiw	r26, 0x01	; 1
    5448:	9d 01       	movw	r18, r26
    544a:	2e 5f       	subi	r18, 0xFE	; 254
    544c:	3f 4f       	sbci	r19, 0xFF	; 255
    544e:	82 0f       	add	r24, r18
    5450:	93 1f       	adc	r25, r19
    5452:	20 91 49 08 	lds	r18, 0x0849	; 0x800849 <__brkval>
    5456:	30 91 4a 08 	lds	r19, 0x084A	; 0x80084a <__brkval+0x1>
    545a:	28 17       	cp	r18, r24
    545c:	39 07       	cpc	r19, r25
    545e:	69 f4       	brne	.+26     	; 0x547a <free+0x10c>
    5460:	30 97       	sbiw	r30, 0x00	; 0
    5462:	29 f4       	brne	.+10     	; 0x546e <free+0x100>
    5464:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <__flp+0x1>
    5468:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <__flp>
    546c:	02 c0       	rjmp	.+4      	; 0x5472 <free+0x104>
    546e:	13 82       	std	Z+3, r1	; 0x03
    5470:	12 82       	std	Z+2, r1	; 0x02
    5472:	b0 93 4a 08 	sts	0x084A, r27	; 0x80084a <__brkval+0x1>
    5476:	a0 93 49 08 	sts	0x0849, r26	; 0x800849 <__brkval>
    547a:	df 91       	pop	r29
    547c:	cf 91       	pop	r28
    547e:	08 95       	ret

00005480 <realloc>:
    5480:	a0 e0       	ldi	r26, 0x00	; 0
    5482:	b0 e0       	ldi	r27, 0x00	; 0
    5484:	e6 e4       	ldi	r30, 0x46	; 70
    5486:	fa e2       	ldi	r31, 0x2A	; 42
    5488:	0c 94 b7 2b 	jmp	0x576e	; 0x576e <__prologue_saves__+0x8>
    548c:	ec 01       	movw	r28, r24
    548e:	00 97       	sbiw	r24, 0x00	; 0
    5490:	21 f4       	brne	.+8      	; 0x549a <realloc+0x1a>
    5492:	cb 01       	movw	r24, r22
    5494:	0e 94 1f 29 	call	0x523e	; 0x523e <malloc>
    5498:	b4 c0       	rjmp	.+360    	; 0x5602 <realloc+0x182>
    549a:	fc 01       	movw	r30, r24
    549c:	e6 0f       	add	r30, r22
    549e:	f7 1f       	adc	r31, r23
    54a0:	9c 01       	movw	r18, r24
    54a2:	22 50       	subi	r18, 0x02	; 2
    54a4:	31 09       	sbc	r19, r1
    54a6:	e2 17       	cp	r30, r18
    54a8:	f3 07       	cpc	r31, r19
    54aa:	08 f4       	brcc	.+2      	; 0x54ae <realloc+0x2e>
    54ac:	a8 c0       	rjmp	.+336    	; 0x55fe <realloc+0x17e>
    54ae:	d9 01       	movw	r26, r18
    54b0:	0d 91       	ld	r16, X+
    54b2:	1c 91       	ld	r17, X
    54b4:	11 97       	sbiw	r26, 0x01	; 1
    54b6:	06 17       	cp	r16, r22
    54b8:	17 07       	cpc	r17, r23
    54ba:	b0 f0       	brcs	.+44     	; 0x54e8 <realloc+0x68>
    54bc:	05 30       	cpi	r16, 0x05	; 5
    54be:	11 05       	cpc	r17, r1
    54c0:	08 f4       	brcc	.+2      	; 0x54c4 <realloc+0x44>
    54c2:	9b c0       	rjmp	.+310    	; 0x55fa <realloc+0x17a>
    54c4:	c8 01       	movw	r24, r16
    54c6:	04 97       	sbiw	r24, 0x04	; 4
    54c8:	86 17       	cp	r24, r22
    54ca:	97 07       	cpc	r25, r23
    54cc:	08 f4       	brcc	.+2      	; 0x54d0 <realloc+0x50>
    54ce:	95 c0       	rjmp	.+298    	; 0x55fa <realloc+0x17a>
    54d0:	02 50       	subi	r16, 0x02	; 2
    54d2:	11 09       	sbc	r17, r1
    54d4:	06 1b       	sub	r16, r22
    54d6:	17 0b       	sbc	r17, r23
    54d8:	01 93       	st	Z+, r16
    54da:	11 93       	st	Z+, r17
    54dc:	6d 93       	st	X+, r22
    54de:	7c 93       	st	X, r23
    54e0:	cf 01       	movw	r24, r30
    54e2:	0e 94 b7 29 	call	0x536e	; 0x536e <free>
    54e6:	89 c0       	rjmp	.+274    	; 0x55fa <realloc+0x17a>
    54e8:	5b 01       	movw	r10, r22
    54ea:	a0 1a       	sub	r10, r16
    54ec:	b1 0a       	sbc	r11, r17
    54ee:	4c 01       	movw	r8, r24
    54f0:	80 0e       	add	r8, r16
    54f2:	91 1e       	adc	r9, r17
    54f4:	a0 91 4b 08 	lds	r26, 0x084B	; 0x80084b <__flp>
    54f8:	b0 91 4c 08 	lds	r27, 0x084C	; 0x80084c <__flp+0x1>
    54fc:	61 2c       	mov	r6, r1
    54fe:	71 2c       	mov	r7, r1
    5500:	e1 2c       	mov	r14, r1
    5502:	f1 2c       	mov	r15, r1
    5504:	10 97       	sbiw	r26, 0x00	; 0
    5506:	09 f4       	brne	.+2      	; 0x550a <realloc+0x8a>
    5508:	46 c0       	rjmp	.+140    	; 0x5596 <realloc+0x116>
    550a:	8d 91       	ld	r24, X+
    550c:	9c 91       	ld	r25, X
    550e:	11 97       	sbiw	r26, 0x01	; 1
    5510:	a8 15       	cp	r26, r8
    5512:	b9 05       	cpc	r27, r9
    5514:	b1 f5       	brne	.+108    	; 0x5582 <realloc+0x102>
    5516:	6c 01       	movw	r12, r24
    5518:	42 e0       	ldi	r20, 0x02	; 2
    551a:	c4 0e       	add	r12, r20
    551c:	d1 1c       	adc	r13, r1
    551e:	ca 14       	cp	r12, r10
    5520:	db 04       	cpc	r13, r11
    5522:	78 f1       	brcs	.+94     	; 0x5582 <realloc+0x102>
    5524:	4c 01       	movw	r8, r24
    5526:	8a 18       	sub	r8, r10
    5528:	9b 08       	sbc	r9, r11
    552a:	64 01       	movw	r12, r8
    552c:	42 e0       	ldi	r20, 0x02	; 2
    552e:	c4 0e       	add	r12, r20
    5530:	d1 1c       	adc	r13, r1
    5532:	12 96       	adiw	r26, 0x02	; 2
    5534:	bc 90       	ld	r11, X
    5536:	12 97       	sbiw	r26, 0x02	; 2
    5538:	13 96       	adiw	r26, 0x03	; 3
    553a:	ac 91       	ld	r26, X
    553c:	b5 e0       	ldi	r27, 0x05	; 5
    553e:	cb 16       	cp	r12, r27
    5540:	d1 04       	cpc	r13, r1
    5542:	40 f0       	brcs	.+16     	; 0x5554 <realloc+0xd4>
    5544:	b2 82       	std	Z+2, r11	; 0x02
    5546:	a3 83       	std	Z+3, r26	; 0x03
    5548:	91 82       	std	Z+1, r9	; 0x01
    554a:	80 82       	st	Z, r8
    554c:	d9 01       	movw	r26, r18
    554e:	6d 93       	st	X+, r22
    5550:	7c 93       	st	X, r23
    5552:	09 c0       	rjmp	.+18     	; 0x5566 <realloc+0xe6>
    5554:	0e 5f       	subi	r16, 0xFE	; 254
    5556:	1f 4f       	sbci	r17, 0xFF	; 255
    5558:	80 0f       	add	r24, r16
    555a:	91 1f       	adc	r25, r17
    555c:	f9 01       	movw	r30, r18
    555e:	91 83       	std	Z+1, r25	; 0x01
    5560:	80 83       	st	Z, r24
    5562:	eb 2d       	mov	r30, r11
    5564:	fa 2f       	mov	r31, r26
    5566:	e1 14       	cp	r14, r1
    5568:	f1 04       	cpc	r15, r1
    556a:	31 f0       	breq	.+12     	; 0x5578 <realloc+0xf8>
    556c:	d7 01       	movw	r26, r14
    556e:	13 96       	adiw	r26, 0x03	; 3
    5570:	fc 93       	st	X, r31
    5572:	ee 93       	st	-X, r30
    5574:	12 97       	sbiw	r26, 0x02	; 2
    5576:	41 c0       	rjmp	.+130    	; 0x55fa <realloc+0x17a>
    5578:	f0 93 4c 08 	sts	0x084C, r31	; 0x80084c <__flp+0x1>
    557c:	e0 93 4b 08 	sts	0x084B, r30	; 0x80084b <__flp>
    5580:	3c c0       	rjmp	.+120    	; 0x55fa <realloc+0x17a>
    5582:	68 16       	cp	r6, r24
    5584:	79 06       	cpc	r7, r25
    5586:	08 f4       	brcc	.+2      	; 0x558a <realloc+0x10a>
    5588:	3c 01       	movw	r6, r24
    558a:	7d 01       	movw	r14, r26
    558c:	12 96       	adiw	r26, 0x02	; 2
    558e:	0d 90       	ld	r0, X+
    5590:	bc 91       	ld	r27, X
    5592:	a0 2d       	mov	r26, r0
    5594:	b7 cf       	rjmp	.-146    	; 0x5504 <realloc+0x84>
    5596:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <__brkval>
    559a:	90 91 4a 08 	lds	r25, 0x084A	; 0x80084a <__brkval+0x1>
    559e:	88 16       	cp	r8, r24
    55a0:	99 06       	cpc	r9, r25
    55a2:	e1 f4       	brne	.+56     	; 0x55dc <realloc+0x15c>
    55a4:	66 16       	cp	r6, r22
    55a6:	77 06       	cpc	r7, r23
    55a8:	c8 f4       	brcc	.+50     	; 0x55dc <realloc+0x15c>
    55aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__malloc_heap_end>
    55ae:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__malloc_heap_end+0x1>
    55b2:	00 97       	sbiw	r24, 0x00	; 0
    55b4:	41 f4       	brne	.+16     	; 0x55c6 <realloc+0x146>
    55b6:	8d b7       	in	r24, 0x3d	; 61
    55b8:	9e b7       	in	r25, 0x3e	; 62
    55ba:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <__malloc_margin>
    55be:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <__malloc_margin+0x1>
    55c2:	84 1b       	sub	r24, r20
    55c4:	95 0b       	sbc	r25, r21
    55c6:	e8 17       	cp	r30, r24
    55c8:	f9 07       	cpc	r31, r25
    55ca:	c8 f4       	brcc	.+50     	; 0x55fe <realloc+0x17e>
    55cc:	f0 93 4a 08 	sts	0x084A, r31	; 0x80084a <__brkval+0x1>
    55d0:	e0 93 49 08 	sts	0x0849, r30	; 0x800849 <__brkval>
    55d4:	f9 01       	movw	r30, r18
    55d6:	71 83       	std	Z+1, r23	; 0x01
    55d8:	60 83       	st	Z, r22
    55da:	0f c0       	rjmp	.+30     	; 0x55fa <realloc+0x17a>
    55dc:	cb 01       	movw	r24, r22
    55de:	0e 94 1f 29 	call	0x523e	; 0x523e <malloc>
    55e2:	7c 01       	movw	r14, r24
    55e4:	00 97       	sbiw	r24, 0x00	; 0
    55e6:	59 f0       	breq	.+22     	; 0x55fe <realloc+0x17e>
    55e8:	a8 01       	movw	r20, r16
    55ea:	be 01       	movw	r22, r28
    55ec:	0e 94 55 2b 	call	0x56aa	; 0x56aa <memcpy>
    55f0:	ce 01       	movw	r24, r28
    55f2:	0e 94 b7 29 	call	0x536e	; 0x536e <free>
    55f6:	c7 01       	movw	r24, r14
    55f8:	04 c0       	rjmp	.+8      	; 0x5602 <realloc+0x182>
    55fa:	ce 01       	movw	r24, r28
    55fc:	02 c0       	rjmp	.+4      	; 0x5602 <realloc+0x182>
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	cd b7       	in	r28, 0x3d	; 61
    5604:	de b7       	in	r29, 0x3e	; 62
    5606:	ee e0       	ldi	r30, 0x0E	; 14
    5608:	0c 94 d3 2b 	jmp	0x57a6	; 0x57a6 <__epilogue_restores__+0x8>

0000560c <abort>:
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	f8 94       	cli
    5612:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__do_global_dtors>

00005616 <atoi>:
    5616:	fc 01       	movw	r30, r24
    5618:	88 27       	eor	r24, r24
    561a:	99 27       	eor	r25, r25
    561c:	e8 94       	clt
    561e:	21 91       	ld	r18, Z+
    5620:	20 32       	cpi	r18, 0x20	; 32
    5622:	e9 f3       	breq	.-6      	; 0x561e <atoi+0x8>
    5624:	29 30       	cpi	r18, 0x09	; 9
    5626:	10 f0       	brcs	.+4      	; 0x562c <atoi+0x16>
    5628:	2e 30       	cpi	r18, 0x0E	; 14
    562a:	c8 f3       	brcs	.-14     	; 0x561e <atoi+0x8>
    562c:	2b 32       	cpi	r18, 0x2B	; 43
    562e:	41 f0       	breq	.+16     	; 0x5640 <atoi+0x2a>
    5630:	2d 32       	cpi	r18, 0x2D	; 45
    5632:	39 f4       	brne	.+14     	; 0x5642 <atoi+0x2c>
    5634:	68 94       	set
    5636:	04 c0       	rjmp	.+8      	; 0x5640 <atoi+0x2a>
    5638:	0e 94 ab 2b 	call	0x5756	; 0x5756 <__mulhi_const_10>
    563c:	82 0f       	add	r24, r18
    563e:	91 1d       	adc	r25, r1
    5640:	21 91       	ld	r18, Z+
    5642:	20 53       	subi	r18, 0x30	; 48
    5644:	2a 30       	cpi	r18, 0x0A	; 10
    5646:	c0 f3       	brcs	.-16     	; 0x5638 <atoi+0x22>
    5648:	1e f4       	brtc	.+6      	; 0x5650 <atoi+0x3a>
    564a:	90 95       	com	r25
    564c:	81 95       	neg	r24
    564e:	9f 4f       	sbci	r25, 0xFF	; 255
    5650:	08 95       	ret

00005652 <strcmp_P>:
    5652:	fb 01       	movw	r30, r22
    5654:	dc 01       	movw	r26, r24
    5656:	8d 91       	ld	r24, X+
    5658:	05 90       	lpm	r0, Z+
    565a:	80 19       	sub	r24, r0
    565c:	01 10       	cpse	r0, r1
    565e:	d9 f3       	breq	.-10     	; 0x5656 <strcmp_P+0x4>
    5660:	99 0b       	sbc	r25, r25
    5662:	08 95       	ret

00005664 <__strlen_P>:
    5664:	fc 01       	movw	r30, r24
    5666:	05 90       	lpm	r0, Z+
    5668:	00 20       	and	r0, r0
    566a:	e9 f7       	brne	.-6      	; 0x5666 <__strlen_P+0x2>
    566c:	80 95       	com	r24
    566e:	90 95       	com	r25
    5670:	8e 0f       	add	r24, r30
    5672:	9f 1f       	adc	r25, r31
    5674:	08 95       	ret

00005676 <strstr_P>:
    5676:	fb 01       	movw	r30, r22
    5678:	55 91       	lpm	r21, Z+
    567a:	55 23       	and	r21, r21
    567c:	a9 f0       	breq	.+42     	; 0x56a8 <strstr_P+0x32>
    567e:	bf 01       	movw	r22, r30
    5680:	dc 01       	movw	r26, r24
    5682:	4d 91       	ld	r20, X+
    5684:	45 17       	cp	r20, r21
    5686:	41 11       	cpse	r20, r1
    5688:	e1 f7       	brne	.-8      	; 0x5682 <strstr_P+0xc>
    568a:	59 f4       	brne	.+22     	; 0x56a2 <strstr_P+0x2c>
    568c:	cd 01       	movw	r24, r26
    568e:	05 90       	lpm	r0, Z+
    5690:	00 20       	and	r0, r0
    5692:	49 f0       	breq	.+18     	; 0x56a6 <strstr_P+0x30>
    5694:	4d 91       	ld	r20, X+
    5696:	40 15       	cp	r20, r0
    5698:	41 11       	cpse	r20, r1
    569a:	c9 f3       	breq	.-14     	; 0x568e <strstr_P+0x18>
    569c:	fb 01       	movw	r30, r22
    569e:	41 11       	cpse	r20, r1
    56a0:	ef cf       	rjmp	.-34     	; 0x5680 <strstr_P+0xa>
    56a2:	81 e0       	ldi	r24, 0x01	; 1
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	01 97       	sbiw	r24, 0x01	; 1
    56a8:	08 95       	ret

000056aa <memcpy>:
    56aa:	fb 01       	movw	r30, r22
    56ac:	dc 01       	movw	r26, r24
    56ae:	02 c0       	rjmp	.+4      	; 0x56b4 <memcpy+0xa>
    56b0:	01 90       	ld	r0, Z+
    56b2:	0d 92       	st	X+, r0
    56b4:	41 50       	subi	r20, 0x01	; 1
    56b6:	50 40       	sbci	r21, 0x00	; 0
    56b8:	d8 f7       	brcc	.-10     	; 0x56b0 <memcpy+0x6>
    56ba:	08 95       	ret

000056bc <strchr>:
    56bc:	fc 01       	movw	r30, r24
    56be:	81 91       	ld	r24, Z+
    56c0:	86 17       	cp	r24, r22
    56c2:	21 f0       	breq	.+8      	; 0x56cc <strchr+0x10>
    56c4:	88 23       	and	r24, r24
    56c6:	d9 f7       	brne	.-10     	; 0x56be <strchr+0x2>
    56c8:	99 27       	eor	r25, r25
    56ca:	08 95       	ret
    56cc:	31 97       	sbiw	r30, 0x01	; 1
    56ce:	cf 01       	movw	r24, r30
    56d0:	08 95       	ret

000056d2 <strcmp>:
    56d2:	fb 01       	movw	r30, r22
    56d4:	dc 01       	movw	r26, r24
    56d6:	8d 91       	ld	r24, X+
    56d8:	01 90       	ld	r0, Z+
    56da:	80 19       	sub	r24, r0
    56dc:	01 10       	cpse	r0, r1
    56de:	d9 f3       	breq	.-10     	; 0x56d6 <strcmp+0x4>
    56e0:	99 0b       	sbc	r25, r25
    56e2:	08 95       	ret

000056e4 <strcpy>:
    56e4:	fb 01       	movw	r30, r22
    56e6:	dc 01       	movw	r26, r24
    56e8:	01 90       	ld	r0, Z+
    56ea:	0d 92       	st	X+, r0
    56ec:	00 20       	and	r0, r0
    56ee:	e1 f7       	brne	.-8      	; 0x56e8 <strcpy+0x4>
    56f0:	08 95       	ret

000056f2 <strlen>:
    56f2:	fc 01       	movw	r30, r24
    56f4:	01 90       	ld	r0, Z+
    56f6:	00 20       	and	r0, r0
    56f8:	e9 f7       	brne	.-6      	; 0x56f4 <strlen+0x2>
    56fa:	80 95       	com	r24
    56fc:	90 95       	com	r25
    56fe:	8e 0f       	add	r24, r30
    5700:	9f 1f       	adc	r25, r31
    5702:	08 95       	ret

00005704 <strncpy>:
    5704:	fb 01       	movw	r30, r22
    5706:	dc 01       	movw	r26, r24
    5708:	41 50       	subi	r20, 0x01	; 1
    570a:	50 40       	sbci	r21, 0x00	; 0
    570c:	48 f0       	brcs	.+18     	; 0x5720 <strncpy+0x1c>
    570e:	01 90       	ld	r0, Z+
    5710:	0d 92       	st	X+, r0
    5712:	00 20       	and	r0, r0
    5714:	c9 f7       	brne	.-14     	; 0x5708 <strncpy+0x4>
    5716:	01 c0       	rjmp	.+2      	; 0x571a <strncpy+0x16>
    5718:	1d 92       	st	X+, r1
    571a:	41 50       	subi	r20, 0x01	; 1
    571c:	50 40       	sbci	r21, 0x00	; 0
    571e:	e0 f7       	brcc	.-8      	; 0x5718 <strncpy+0x14>
    5720:	08 95       	ret

00005722 <strstr>:
    5722:	fb 01       	movw	r30, r22
    5724:	51 91       	ld	r21, Z+
    5726:	55 23       	and	r21, r21
    5728:	a9 f0       	breq	.+42     	; 0x5754 <strstr+0x32>
    572a:	bf 01       	movw	r22, r30
    572c:	dc 01       	movw	r26, r24
    572e:	4d 91       	ld	r20, X+
    5730:	45 17       	cp	r20, r21
    5732:	41 11       	cpse	r20, r1
    5734:	e1 f7       	brne	.-8      	; 0x572e <strstr+0xc>
    5736:	59 f4       	brne	.+22     	; 0x574e <strstr+0x2c>
    5738:	cd 01       	movw	r24, r26
    573a:	01 90       	ld	r0, Z+
    573c:	00 20       	and	r0, r0
    573e:	49 f0       	breq	.+18     	; 0x5752 <strstr+0x30>
    5740:	4d 91       	ld	r20, X+
    5742:	40 15       	cp	r20, r0
    5744:	41 11       	cpse	r20, r1
    5746:	c9 f3       	breq	.-14     	; 0x573a <strstr+0x18>
    5748:	fb 01       	movw	r30, r22
    574a:	41 11       	cpse	r20, r1
    574c:	ef cf       	rjmp	.-34     	; 0x572c <strstr+0xa>
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	01 97       	sbiw	r24, 0x01	; 1
    5754:	08 95       	ret

00005756 <__mulhi_const_10>:
    5756:	7a e0       	ldi	r23, 0x0A	; 10
    5758:	97 9f       	mul	r25, r23
    575a:	90 2d       	mov	r25, r0
    575c:	87 9f       	mul	r24, r23
    575e:	80 2d       	mov	r24, r0
    5760:	91 0d       	add	r25, r1
    5762:	11 24       	eor	r1, r1
    5764:	08 95       	ret

00005766 <__prologue_saves__>:
    5766:	2f 92       	push	r2
    5768:	3f 92       	push	r3
    576a:	4f 92       	push	r4
    576c:	5f 92       	push	r5
    576e:	6f 92       	push	r6
    5770:	7f 92       	push	r7
    5772:	8f 92       	push	r8
    5774:	9f 92       	push	r9
    5776:	af 92       	push	r10
    5778:	bf 92       	push	r11
    577a:	cf 92       	push	r12
    577c:	df 92       	push	r13
    577e:	ef 92       	push	r14
    5780:	ff 92       	push	r15
    5782:	0f 93       	push	r16
    5784:	1f 93       	push	r17
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	cd b7       	in	r28, 0x3d	; 61
    578c:	de b7       	in	r29, 0x3e	; 62
    578e:	ca 1b       	sub	r28, r26
    5790:	db 0b       	sbc	r29, r27
    5792:	0f b6       	in	r0, 0x3f	; 63
    5794:	f8 94       	cli
    5796:	de bf       	out	0x3e, r29	; 62
    5798:	0f be       	out	0x3f, r0	; 63
    579a:	cd bf       	out	0x3d, r28	; 61
    579c:	09 94       	ijmp

0000579e <__epilogue_restores__>:
    579e:	2a 88       	ldd	r2, Y+18	; 0x12
    57a0:	39 88       	ldd	r3, Y+17	; 0x11
    57a2:	48 88       	ldd	r4, Y+16	; 0x10
    57a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    57a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    57a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    57aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    57ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    57ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    57b0:	b9 84       	ldd	r11, Y+9	; 0x09
    57b2:	c8 84       	ldd	r12, Y+8	; 0x08
    57b4:	df 80       	ldd	r13, Y+7	; 0x07
    57b6:	ee 80       	ldd	r14, Y+6	; 0x06
    57b8:	fd 80       	ldd	r15, Y+5	; 0x05
    57ba:	0c 81       	ldd	r16, Y+4	; 0x04
    57bc:	1b 81       	ldd	r17, Y+3	; 0x03
    57be:	aa 81       	ldd	r26, Y+2	; 0x02
    57c0:	b9 81       	ldd	r27, Y+1	; 0x01
    57c2:	ce 0f       	add	r28, r30
    57c4:	d1 1d       	adc	r29, r1
    57c6:	0f b6       	in	r0, 0x3f	; 63
    57c8:	f8 94       	cli
    57ca:	de bf       	out	0x3e, r29	; 62
    57cc:	0f be       	out	0x3f, r0	; 63
    57ce:	cd bf       	out	0x3d, r28	; 61
    57d0:	ed 01       	movw	r28, r26
    57d2:	08 95       	ret

000057d4 <__do_global_dtors>:
    57d4:	13 e0       	ldi	r17, 0x03	; 3
    57d6:	c1 e9       	ldi	r28, 0x91	; 145
    57d8:	d3 e0       	ldi	r29, 0x03	; 3
    57da:	04 c0       	rjmp	.+8      	; 0x57e4 <__do_global_dtors+0x10>
    57dc:	fe 01       	movw	r30, r28
    57de:	0e 94 05 29 	call	0x520a	; 0x520a <__tablejump2__>
    57e2:	21 96       	adiw	r28, 0x01	; 1
    57e4:	c2 39       	cpi	r28, 0x92	; 146
    57e6:	d1 07       	cpc	r29, r17
    57e8:	c9 f7       	brne	.-14     	; 0x57dc <__do_global_dtors+0x8>
    57ea:	f8 94       	cli

000057ec <__stop_program>:
    57ec:	ff cf       	rjmp	.-2      	; 0x57ec <__stop_program>
