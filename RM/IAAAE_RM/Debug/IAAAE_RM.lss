
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  0000491a  000049ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000491a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  0080019a  0080019a  00004a48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cf0  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020742  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049ba  00000000  00000000  00025eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071c0  00000000  00000000  0002a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003010  00000000  00000000  00031a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d7a  00000000  00000000  00034a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000115f0  00000000  00000000  0003a7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf0  00000000  00000000  0004bdde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 03 	jmp	0x786	; 0x786 <__dtors_end>
       4:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
       8:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
       c:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__vector_3>
      10:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__vector_3>
      14:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__vector_3>
      18:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      1c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      20:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      24:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      28:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      2c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      30:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      34:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      38:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      3c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      40:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__vector_16>
      44:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      48:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__vector_18>
      4c:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__vector_19>
      50:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      54:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      58:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      5c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>
      60:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__vector_24>
      64:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_PcE3__c>:
      aa:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000b2 <_ZZN13Adafruit_FONA12HTTP_readallEjPcE3__c_0>:
      b2:	2b 48 54 54 50 52 45 41 44 3a 20 00                 +HTTPREAD: .

000000be <_ZZN13Adafruit_FONA12HTTP_readallEjPcE3__c>:
      be:	41 54 2b 48 54 54 50 52 45 41 44 3d 30 2c 00        AT+HTTPREAD=0,.

000000cd <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      cd:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000da <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      da:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000e7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
      e7:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000000f6 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
      f6:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000000ff <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
      ff:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000010c <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     10c:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000119 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     119:	09 2d 2d 2d 3e 20 00                                .---> .

00000120 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     120:	22 2c 00                                            ",.

00000123 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     123:	22 2c 22 00                                         ",".

00000127 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     127:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000135 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     135:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000143 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     143:	09 2d 2d 2d 3e 20 00                                .---> .

0000014a <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     14a:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000156 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     156:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000162 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_4>:
     162:	2c 20 77 65 27 76 65 20 72 65 61 64 20 00           , we've read .

00000170 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_3>:
     170:	2c 20 77 69 74 68 20 6f 75 72 20 6d 61 78 20 6f     , with our max o
     180:	66 20 00                                            f .

00000183 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_2>:
     183:	52 65 63 65 69 76 65 64 20 72 65 73 70 6f 6e 73     Received respons
     193:	65 20 6f 66 20 6c 65 6e 67 74 68 20 00              e of length .

000001a0 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_1>:
     1a0:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     1b0:	61 74 61 2c 20 73 74 61 74 75 73 20 63 6f 64 65     ata, status code
     1c0:	3a 20 00                                            : .

000001c3 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c_0>:
     1c3:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000001ce <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_E3__c>:
     1ce:	68 74 74 70 3a 2f 2f 72 6d 6f 6e 2e 6b 68 75 64     http://rmon.khud
     1de:	64 61 6d 2e 6f 72 67 2e 75 6b 2f 3f 61 3d 61 64     dam.org.uk/?a=ad
     1ee:	64 00                                               d.

000001f0 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     1f0:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     1fb:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000208 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     208:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000213 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     213:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000021b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     21b:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000224 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     224:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000231 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     231:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     241:	44 22 2c 00                                         D",.

00000245 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     245:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     255:	45 52 22 2c 00                                      ER",.

0000025a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     25a:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000264 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     264:	09 2d 2d 2d 3e 20 00                                .---> .

0000026b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     26b:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000275 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     275:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     285:	4e 22 2c 00                                         N",.

00000289 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     289:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     299:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000002a7 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     2a7:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000002b2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     2b2:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000002bd <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     2bd:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000002c5 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     2c5:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002ce <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     2ce:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002d6 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     2d6:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002df <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     2df:	2b 43 52 45 47 3a 20 00                             +CREG: .

000002e7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     2e7:	41 54 2b 43 53 51 00                                AT+CSQ.

000002ee <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     2ee:	2b 43 53 51 3a 20 00                                +CSQ: .

000002f5 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     2f5:	41 54 2b 43 53 51 00                                AT+CSQ.

000002fc <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     2fc:	2b 43 53 51 3a 20 00                                +CSQ: .

00000303 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     303:	41 54 2b 43 42 43 00                                AT+CBC.

0000030a <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     30a:	2b 43 42 43 3a 20 00                                +CBC: .

00000311 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     311:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000031c <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     31c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000323 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     323:	09 2d 2d 2d 3e 20 00                                .---> .

0000032a <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     32a:	41 54 45 30 00                                      ATE0.

0000032f <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     32f:	41 54 45 30 00                                      ATE0.

00000334 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     334:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     344:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

00000353 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     353:	41 54 00                                            AT.

00000356 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     356:	41 54 00                                            AT.

00000359 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     359:	41 54 00                                            AT.

0000035c <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     35c:	41 54 00                                            AT.

0000035f <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     35f:	41 54 00                                            AT.

00000362 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     362:	41 54 00                                            AT.

00000365 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     365:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     375:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000386 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     386:	4f 4b 00                                            OK.

00000389 <_ZZN13Adafruit_FONAC4EabE3__c>:
     389:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000391 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     391:	45 72 72 6f 72 3d 00                                Error=.

00000398 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     398:	20 7c 20 00                                          | .

0000039c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     39c:	54 65 6d 70 3d 00                                   Temp=.

000003a2 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     3a2:	20 7c 20 00                                          | .

000003a6 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     3a6:	43 75 72 72 65 6e 74 3d 00                          Current=.

000003af <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     3af:	20 7c 20 00                                          | .

000003b3 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     3b3:	50 56 2d 56 3d 00                                   PV-V=.

000003b9 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     3b9:	20 7c 20 00                                          | .

000003bd <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     3bd:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000003c5 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     3c5:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

000003d2 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     3d2:	20 7c 20 00                                          | .

000003d6 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     3d6:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

000003df <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     3df:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

000003e9 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     3e9:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     3f9:	6f 64 65 3d 00                                      ode=.

000003fe <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     3fe:	20 7c 20 00                                          | .

00000402 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     402:	42 45 52 3d 00                                      BER=.

00000407 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     407:	20 7c 20 00                                          | .

0000040b <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     40b:	52 53 53 49 3d 00                                   RSSI=.

00000411 <_ZL12b64_alphabet>:
     411:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     421:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     431:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     441:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000452 <_ZZ4loopE3__c>:
     452:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000045c <_ZZ8sendDatavE3__c_5>:
     45c:	09 4e 75 6d 62 65 72 3a 20 00                       .Number: .

00000466 <_ZZ8sendDatavE3__c_4>:
     466:	77 69 74 68 20 6c 65 6e 67 74 68 00                 with length.

00000472 <_ZZ8sendDatavE3__c_3>:
     472:	52 65 73 70 6f 6e 73 65 20 66 72 6f 6d 20 73 65     Response from se
     482:	6e 64 00                                            nd.

00000485 <_ZZ8sendDatavE3__c_2>:
     485:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     495:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     4a5:	6f 72 20 73 65 6e 64 3a 00                          or send:.

000004ae <_ZZ8sendDatavE3__c_1>:
     4ae:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     4be:	52 29 00                                            R).

000004c1 <_ZZ8sendDatavE3__c_0>:
     4c1:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     4d1:	69 6e 67 2e 2e 2e 29 00                             ing...).

000004d9 <_ZZ8sendDatavE3__c>:
     4d9:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     4e9:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

000004f8 <_ZZ17createEncodedDataPcPhhP14DailyCycleDataE3__c>:
     4f8:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     508:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     518:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

00000528 <_ZZ12takeReadingsvE3__c>:
     528:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     538:	2e 2e 00                                            ...

0000053b <_ZZ21ensureFonaInitialisedbE3__c_9>:
     53b:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     54b:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     55b:	64 6f 6e 65 29 00                                   done).

00000561 <_ZZ21ensureFonaInitialisedbE3__c_8>:
     561:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     571:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     581:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     591:	75 65 20 6e 6f 77 29 00                             ue now).

00000599 <_ZZ21ensureFonaInitialisedbE3__c_7>:
     599:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     5a9:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     5b9:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

000005c8 <_ZZ21ensureFonaInitialisedbE3__c_6>:
     5c8:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     5d8:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

000005e3 <_ZZ21ensureFonaInitialisedbE3__c_5>:
     5e3:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     5f3:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000603 <_ZZ21ensureFonaInitialisedbE3__c_4>:
     603:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     613:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     623:	65 64 00                                            ed.

00000626 <_ZZ21ensureFonaInitialisedbE3__c_3>:
     626:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     636:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     646:	6f 72 74 6c 79 00                                   ortly.

0000064c <_ZZ21ensureFonaInitialisedbE3__c_2>:
     64c:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     65c:	6e 67 20 47 50 52 53 00                             ng GPRS.

00000664 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     664:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     674:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

00000681 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     681:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     691:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

0000069c <_ZZ21ensureFonaInitialisedbE3__c>:
     69c:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     6ac:	61 2e 2e 2e 00                                      a....

000006b1 <_ZZ5setupE3__c>:
     6b1:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000006bd <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     6bd:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     6cd:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     6dd:	73 73 69 6f 6e 3a 00                                ssion:.

000006e4 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     6e4:	2a 2a 2a 2a 00                                      ****.

000006e9 <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     6e9:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     6f9:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     709:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     719:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

00000724 <digital_pin_to_timer_PGM>:
     724:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     734:	00 00 00 00                                         ....

00000738 <digital_pin_to_bit_mask_PGM>:
     738:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     748:	04 08 10 20                                         ... 

0000074c <digital_pin_to_port_PGM>:
     74c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     75c:	03 03 03 03                                         ....

00000760 <port_to_input_PGM>:
     760:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000076a <port_to_output_PGM>:
     76a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000774 <port_to_mode_PGM>:
     774:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000077e <__ctors_start>:
     77e:	b2 13       	cpse	r27, r18
     780:	5c 18       	sub	r5, r12
     782:	4c 1a       	sub	r4, r28

00000784 <__ctors_end>:
     784:	cd 13       	cpse	r28, r29

00000786 <__dtors_end>:
     786:	11 24       	eor	r1, r1
     788:	1f be       	out	0x3f, r1	; 63
     78a:	cf ef       	ldi	r28, 0xFF	; 255
     78c:	d8 e0       	ldi	r29, 0x08	; 8
     78e:	de bf       	out	0x3e, r29	; 62
     790:	cd bf       	out	0x3d, r28	; 61

00000792 <__do_copy_data>:
     792:	11 e0       	ldi	r17, 0x01	; 1
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b1 e0       	ldi	r27, 0x01	; 1
     798:	ea e1       	ldi	r30, 0x1A	; 26
     79a:	f9 e4       	ldi	r31, 0x49	; 73
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <__do_copy_data+0x10>
     79e:	05 90       	lpm	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	aa 39       	cpi	r26, 0x9A	; 154
     7a4:	b1 07       	cpc	r27, r17
     7a6:	d9 f7       	brne	.-10     	; 0x79e <__do_copy_data+0xc>

000007a8 <__do_clear_bss>:
     7a8:	24 e0       	ldi	r18, 0x04	; 4
     7aa:	aa e9       	ldi	r26, 0x9A	; 154
     7ac:	b1 e0       	ldi	r27, 0x01	; 1
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <.do_clear_bss_start>

000007b0 <.do_clear_bss_loop>:
     7b0:	1d 92       	st	X+, r1

000007b2 <.do_clear_bss_start>:
     7b2:	ac 38       	cpi	r26, 0x8C	; 140
     7b4:	b2 07       	cpc	r27, r18
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <.do_clear_bss_loop>

000007b8 <__do_global_ctors>:
     7b8:	13 e0       	ldi	r17, 0x03	; 3
     7ba:	c2 ec       	ldi	r28, 0xC2	; 194
     7bc:	d3 e0       	ldi	r29, 0x03	; 3
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <__do_global_ctors+0x10>
     7c0:	21 97       	sbiw	r28, 0x01	; 1
     7c2:	fe 01       	movw	r30, r28
     7c4:	0e 94 ba 21 	call	0x4374	; 0x4374 <__tablejump2__>
     7c8:	cf 3b       	cpi	r28, 0xBF	; 191
     7ca:	d1 07       	cpc	r29, r17
     7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__do_global_ctors+0x8>
     7ce:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <main>
     7d2:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__do_global_dtors>

000007d6 <__bad_interrupt>:
     7d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007da <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     7da:	83 5e       	subi	r24, 0xE3	; 227
     7dc:	9e 4f       	sbci	r25, 0xFE	; 254
     7de:	dc 01       	movw	r26, r24
     7e0:	8d 91       	ld	r24, X+
     7e2:	9c 91       	ld	r25, X
     7e4:	dc 01       	movw	r26, r24
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	04 80       	ldd	r0, Z+4	; 0x04
     7ec:	f5 81       	ldd	r31, Z+5	; 0x05
     7ee:	e0 2d       	mov	r30, r0
     7f0:	09 94       	ijmp

000007f2 <_ZN13Adafruit_FONA5writeEh>:
     7f2:	83 5e       	subi	r24, 0xE3	; 227
     7f4:	9e 4f       	sbci	r25, 0xFE	; 254
     7f6:	dc 01       	movw	r26, r24
     7f8:	8d 91       	ld	r24, X+
     7fa:	9c 91       	ld	r25, X
     7fc:	dc 01       	movw	r26, r24
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	01 90       	ld	r0, Z+
     804:	f0 81       	ld	r31, Z
     806:	e0 2d       	mov	r30, r0
     808:	09 94       	ijmp

0000080a <_ZN13Adafruit_FONA4readEv>:
     80a:	83 5e       	subi	r24, 0xE3	; 227
     80c:	9e 4f       	sbci	r25, 0xFE	; 254
     80e:	dc 01       	movw	r26, r24
     810:	8d 91       	ld	r24, X+
     812:	9c 91       	ld	r25, X
     814:	dc 01       	movw	r26, r24
     816:	ed 91       	ld	r30, X+
     818:	fc 91       	ld	r31, X
     81a:	06 80       	ldd	r0, Z+6	; 0x06
     81c:	f7 81       	ldd	r31, Z+7	; 0x07
     81e:	e0 2d       	mov	r30, r0
     820:	09 94       	ijmp

00000822 <_ZN13Adafruit_FONA4peekEv>:
     822:	83 5e       	subi	r24, 0xE3	; 227
     824:	9e 4f       	sbci	r25, 0xFE	; 254
     826:	dc 01       	movw	r26, r24
     828:	8d 91       	ld	r24, X+
     82a:	9c 91       	ld	r25, X
     82c:	dc 01       	movw	r26, r24
     82e:	ed 91       	ld	r30, X+
     830:	fc 91       	ld	r31, X
     832:	00 84       	ldd	r0, Z+8	; 0x08
     834:	f1 85       	ldd	r31, Z+9	; 0x09
     836:	e0 2d       	mov	r30, r0
     838:	09 94       	ijmp

0000083a <_ZN13Adafruit_FONA5flushEv>:
     83a:	83 5e       	subi	r24, 0xE3	; 227
     83c:	9e 4f       	sbci	r25, 0xFE	; 254
     83e:	dc 01       	movw	r26, r24
     840:	8d 91       	ld	r24, X+
     842:	9c 91       	ld	r25, X
     844:	dc 01       	movw	r26, r24
     846:	ed 91       	ld	r30, X+
     848:	fc 91       	ld	r31, X
     84a:	02 84       	ldd	r0, Z+10	; 0x0a
     84c:	f3 85       	ldd	r31, Z+11	; 0x0b
     84e:	e0 2d       	mov	r30, r0
     850:	09 94       	ijmp

00000852 <_ZN13Adafruit_FONAC1Eab>:
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	06 2f       	mov	r16, r22
     85e:	14 2f       	mov	r17, r20
     860:	1b 82       	std	Y+3, r1	; 0x03
     862:	1a 82       	std	Y+2, r1	; 0x02
     864:	88 ee       	ldi	r24, 0xE8	; 232
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	8c 83       	std	Y+4, r24	; 0x04
     86e:	9d 83       	std	Y+5, r25	; 0x05
     870:	ae 83       	std	Y+6, r26	; 0x06
     872:	bf 83       	std	Y+7, r27	; 0x07
     874:	8d e2       	ldi	r24, 0x2D	; 45
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	99 83       	std	Y+1, r25	; 0x01
     87a:	88 83       	st	Y, r24
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	8e 87       	std	Y+14, r24	; 0x0e
     880:	6c e7       	ldi	r22, 0x7C	; 124
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	ce 01       	movw	r24, r28
     886:	8b 5e       	subi	r24, 0xEB	; 235
     888:	9e 4f       	sbci	r25, 0xFE	; 254
     88a:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <_ZN6StringC1EPKc>
     88e:	0c 87       	std	Y+12, r16	; 0x0c
     890:	1d 87       	std	Y+13, r17	; 0x0d
     892:	fe 01       	movw	r30, r28
     894:	e2 5f       	subi	r30, 0xF2	; 242
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	89 e8       	ldi	r24, 0x89	; 137
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	91 83       	std	Z+1, r25	; 0x01
     89e:	80 83       	st	Z, r24
     8a0:	32 96       	adiw	r30, 0x02	; 2
     8a2:	11 82       	std	Z+1, r1	; 0x01
     8a4:	10 82       	st	Z, r1
     8a6:	32 96       	adiw	r30, 0x02	; 2
     8a8:	11 82       	std	Z+1, r1	; 0x01
     8aa:	10 82       	st	Z, r1
     8ac:	3b 96       	adiw	r30, 0x0b	; 11
     8ae:	11 82       	std	Z+1, r1	; 0x01
     8b0:	10 82       	st	Z, r1
     8b2:	39 97       	sbiw	r30, 0x09	; 9
     8b4:	10 82       	st	Z, r1
     8b6:	c5 5e       	subi	r28, 0xE5	; 229
     8b8:	de 4f       	sbci	r29, 0xFE	; 254
     8ba:	86 e8       	ldi	r24, 0x86	; 134
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	99 83       	std	Y+1, r25	; 0x01
     8c0:	88 83       	st	Y, r24
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <_ZN13Adafruit_FONA19internalReadRawDataEPcj>:
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	8c 01       	movw	r16, r24
     8e2:	5b 01       	movw	r10, r22
     8e4:	7a 01       	movw	r14, r20
     8e6:	c1 2c       	mov	r12, r1
     8e8:	d1 2c       	mov	r13, r1
     8ea:	e5 01       	movw	r28, r10
     8ec:	cc 0d       	add	r28, r12
     8ee:	dd 1d       	adc	r29, r13
     8f0:	e1 14       	cp	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	09 f1       	breq	.+66     	; 0x938 <__stack+0x39>
     8f6:	d8 01       	movw	r26, r16
     8f8:	ed 91       	ld	r30, X+
     8fa:	fc 91       	ld	r31, X
     8fc:	04 80       	ldd	r0, Z+4	; 0x04
     8fe:	f5 81       	ldd	r31, Z+5	; 0x05
     900:	e0 2d       	mov	r30, r0
     902:	c8 01       	movw	r24, r16
     904:	09 95       	icall
     906:	89 2b       	or	r24, r25
     908:	81 f3       	breq	.-32     	; 0x8ea <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x1e>
     90a:	d8 01       	movw	r26, r16
     90c:	ed 91       	ld	r30, X+
     90e:	fc 91       	ld	r31, X
     910:	06 80       	ldd	r0, Z+6	; 0x06
     912:	f7 81       	ldd	r31, Z+7	; 0x07
     914:	e0 2d       	mov	r30, r0
     916:	c8 01       	movw	r24, r16
     918:	09 95       	icall
     91a:	89 93       	st	Y+, r24
     91c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     920:	95 ff       	sbrs	r25, 5
     922:	fc cf       	rjmp	.-8      	; 0x91c <__stack+0x1d>
     924:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     928:	bf ef       	ldi	r27, 0xFF	; 255
     92a:	cb 1a       	sub	r12, r27
     92c:	db 0a       	sbc	r13, r27
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	e8 1a       	sub	r14, r24
     932:	f1 08       	sbc	r15, r1
     934:	01 f7       	brne	.-64     	; 0x8f6 <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x2a>
     936:	d9 cf       	rjmp	.-78     	; 0x8ea <_ZN13Adafruit_FONA19internalReadRawDataEPcj+0x1e>
     938:	18 82       	st	Y, r1
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	df 90       	pop	r13
     948:	cf 90       	pop	r12
     94a:	bf 90       	pop	r11
     94c:	af 90       	pop	r10
     94e:	08 95       	ret

00000950 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     950:	8b 5e       	subi	r24, 0xEB	; 235
     952:	9e 4f       	sbci	r25, 0xFE	; 254
     954:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <_ZN6StringaSERKS_>

00000958 <_ZN13Adafruit_FONA10flushInputEv>:
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	8c 01       	movw	r16, r24
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	88 97       	sbiw	r24, 0x28	; 40
     96e:	d8 f4       	brcc	.+54     	; 0x9a6 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     970:	e8 81       	ld	r30, Y
     972:	f9 81       	ldd	r31, Y+1	; 0x01
     974:	04 80       	ldd	r0, Z+4	; 0x04
     976:	f5 81       	ldd	r31, Z+5	; 0x05
     978:	e0 2d       	mov	r30, r0
     97a:	ce 01       	movw	r24, r28
     97c:	09 95       	icall
     97e:	89 2b       	or	r24, r25
     980:	51 f0       	breq	.+20     	; 0x996 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     982:	e8 81       	ld	r30, Y
     984:	f9 81       	ldd	r31, Y+1	; 0x01
     986:	06 80       	ldd	r0, Z+6	; 0x06
     988:	f7 81       	ldd	r31, Z+7	; 0x07
     98a:	e0 2d       	mov	r30, r0
     98c:	ce 01       	movw	r24, r28
     98e:	09 95       	icall
     990:	00 e0       	ldi	r16, 0x00	; 0
     992:	10 e0       	ldi	r17, 0x00	; 0
     994:	ed cf       	rjmp	.-38     	; 0x970 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
     9a2:	c8 01       	movw	r24, r16
     9a4:	e0 cf       	rjmp	.-64     	; 0x966 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	08 95       	ret

000009b0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
     9bc:	8b 01       	movw	r16, r22
     9be:	f4 2e       	mov	r15, r20
     9c0:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
     9c4:	63 e4       	ldi	r22, 0x43	; 67
     9c6:	71 e0       	ldi	r23, 0x01	; 1
     9c8:	8e e9       	ldi	r24, 0x9E	; 158
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     9d0:	65 e3       	ldi	r22, 0x35	; 53
     9d2:	71 e0       	ldi	r23, 0x01	; 1
     9d4:	8e e9       	ldi	r24, 0x9E	; 158
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     9dc:	b8 01       	movw	r22, r16
     9de:	8e e9       	ldi	r24, 0x9E	; 158
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     9e6:	62 e2       	ldi	r22, 0x22	; 34
     9e8:	8e e9       	ldi	r24, 0x9E	; 158
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	0e 94 2d 1b 	call	0x365a	; 0x365a <_ZN5Print7printlnEc>
     9f0:	c3 5e       	subi	r28, 0xE3	; 227
     9f2:	de 4f       	sbci	r29, 0xFE	; 254
     9f4:	67 e2       	ldi	r22, 0x27	; 39
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     a00:	b8 01       	movw	r22, r16
     a02:	88 81       	ld	r24, Y
     a04:	99 81       	ldd	r25, Y+1	; 0x01
     a06:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     a0a:	88 81       	ld	r24, Y
     a0c:	99 81       	ldd	r25, Y+1	; 0x01
     a0e:	ff 20       	and	r15, r15
     a10:	19 f0       	breq	.+6      	; 0xa18 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     a12:	63 e2       	ldi	r22, 0x23	; 35
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     a18:	60 e2       	ldi	r22, 0x20	; 32
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>

00000a2a <_ZN13Adafruit_FONA8readlineEjb>:
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	7c 01       	movw	r14, r24
     a3e:	b4 2e       	mov	r11, r20
     a40:	8b 01       	movw	r16, r22
     a42:	00 0f       	add	r16, r16
     a44:	11 1f       	adc	r17, r17
     a46:	00 0f       	add	r16, r16
     a48:	11 1f       	adc	r17, r17
     a4a:	c0 e0       	ldi	r28, 0x00	; 0
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
     a4e:	67 01       	movw	r12, r14
     a50:	83 ee       	ldi	r24, 0xE3	; 227
     a52:	c8 1a       	sub	r12, r24
     a54:	8e ef       	ldi	r24, 0xFE	; 254
     a56:	d8 0a       	sbc	r13, r24
     a58:	01 15       	cp	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	c9 f1       	breq	.+114    	; 0xad0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a5e:	ce 3f       	cpi	r28, 0xFE	; 254
     a60:	d1 05       	cpc	r29, r1
     a62:	98 f0       	brcs	.+38     	; 0xa8a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a64:	62 e9       	ldi	r22, 0x92	; 146
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	8e e9       	ldi	r24, 0x9E	; 158
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a70:	2f c0       	rjmp	.+94     	; 0xad0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a72:	f6 01       	movw	r30, r12
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	dc 01       	movw	r26, r24
     a7a:	ed 91       	ld	r30, X+
     a7c:	fc 91       	ld	r31, X
     a7e:	06 80       	ldd	r0, Z+6	; 0x06
     a80:	f7 81       	ldd	r31, Z+7	; 0x07
     a82:	e0 2d       	mov	r30, r0
     a84:	09 95       	icall
     a86:	8d 30       	cpi	r24, 0x0D	; 13
     a88:	69 f4       	brne	.+26     	; 0xaa4 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     a8a:	d6 01       	movw	r26, r12
     a8c:	8d 91       	ld	r24, X+
     a8e:	9c 91       	ld	r25, X
     a90:	dc 01       	movw	r26, r24
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	04 80       	ldd	r0, Z+4	; 0x04
     a98:	f5 81       	ldd	r31, Z+5	; 0x05
     a9a:	e0 2d       	mov	r30, r0
     a9c:	09 95       	icall
     a9e:	89 2b       	or	r24, r25
     aa0:	41 f7       	brne	.-48     	; 0xa72 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     aa2:	0c c0       	rjmp	.+24     	; 0xabc <_ZN13Adafruit_FONA8readlineEjb+0x92>
     aa4:	8a 30       	cpi	r24, 0x0A	; 10
     aa6:	21 f4       	brne	.+8      	; 0xab0 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     aa8:	20 97       	sbiw	r28, 0x00	; 0
     aaa:	79 f3       	breq	.-34     	; 0xa8a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     aac:	bb 20       	and	r11, r11
     aae:	81 f0       	breq	.+32     	; 0xad0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ab0:	f7 01       	movw	r30, r14
     ab2:	ec 0f       	add	r30, r28
     ab4:	fd 1f       	adc	r31, r29
     ab6:	87 87       	std	Z+15, r24	; 0x0f
     ab8:	21 96       	adiw	r28, 0x01	; 1
     aba:	e7 cf       	rjmp	.-50     	; 0xa8a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     abc:	01 50       	subi	r16, 0x01	; 1
     abe:	11 09       	sbc	r17, r1
     ac0:	39 f0       	breq	.+14     	; 0xad0 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
     ace:	c4 cf       	rjmp	.-120    	; 0xa58 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     ad0:	f7 01       	movw	r30, r14
     ad2:	ec 0f       	add	r30, r28
     ad4:	fd 1f       	adc	r31, r29
     ad6:	17 86       	std	Z+15, r1	; 0x0f
     ad8:	8c 2f       	mov	r24, r28
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	08 95       	ret

00000aee <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
     af8:	8b 01       	movw	r16, r22
     afa:	ba 01       	movw	r22, r20
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
     b02:	68 e9       	ldi	r22, 0x98	; 152
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	8e e9       	ldi	r24, 0x9E	; 158
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     b0e:	2f 96       	adiw	r28, 0x0f	; 15
     b10:	be 01       	movw	r22, r28
     b12:	8e e9       	ldi	r24, 0x9E	; 158
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
     b1a:	b8 01       	movw	r22, r16
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 c5 23 	call	0x478a	; 0x478a <strcmp_P>
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	89 2b       	or	r24, r25
     b26:	09 f0       	breq	.+2      	; 0xb2a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	82 2f       	mov	r24, r18
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
     b3c:	fc 01       	movw	r30, r24
     b3e:	e3 5e       	subi	r30, 0xE3	; 227
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	66 23       	and	r22, r22
     b44:	31 f0       	breq	.+12     	; 0xb52 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     b46:	62 e2       	ldi	r22, 0x22	; 34
     b48:	80 81       	ld	r24, Z
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	0e 94 2d 1b 	call	0x365a	; 0x365a <_ZN5Print7printlnEc>
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     b52:	80 81       	ld	r24, Z
     b54:	91 81       	ldd	r25, Z+1	; 0x01
     b56:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
     b5a:	fe 01       	movw	r30, r28
     b5c:	e5 5e       	subi	r30, 0xE5	; 229
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	40 e1       	ldi	r20, 0x10	; 16
     b66:	57 e2       	ldi	r21, 0x27	; 39
     b68:	ce 01       	movw	r24, r28
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	0c 94 77 05 	jmp	0xaee	; 0xaee <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000b72 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	ec 01       	movw	r28, r24
     b7c:	8a 01       	movw	r16, r20
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b84:	fe 01       	movw	r30, r28
     b86:	e3 5e       	subi	r30, 0xE3	; 227
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	b8 01       	movw	r22, r16
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN5Print5printERK6String>
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	ce 01       	movw	r24, r28
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000ba4 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
     bae:	8a 01       	movw	r16, r20
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     bb6:	fe 01       	movw	r30, r28
     bb8:	e3 5e       	subi	r30, 0xE3	; 227
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	b8 01       	movw	r22, r16
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	ce 01       	movw	r24, r28
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000bd6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ec 01       	movw	r28, r24
     be4:	69 01       	movw	r12, r18
     be6:	7a 01       	movw	r14, r20
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     bee:	fe 01       	movw	r30, r28
     bf0:	e3 5e       	subi	r30, 0xE3	; 227
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	2a e0       	ldi	r18, 0x0A	; 10
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	b7 01       	movw	r22, r14
     bfa:	a6 01       	movw	r20, r12
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <_ZN5Print5printEli>
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000c18 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	7c 01       	movw	r14, r24
     c36:	2a 01       	movw	r4, r20
     c38:	3b 01       	movw	r6, r22
     c3a:	48 01       	movw	r8, r16
     c3c:	59 01       	movw	r10, r18
     c3e:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
     c42:	69 e1       	ldi	r22, 0x19	; 25
     c44:	71 e0       	ldi	r23, 0x01	; 1
     c46:	8e e9       	ldi	r24, 0x9E	; 158
     c48:	93 e0       	ldi	r25, 0x03	; 3
     c4a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     c4e:	6c e0       	ldi	r22, 0x0C	; 12
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	8e e9       	ldi	r24, 0x9E	; 158
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     c5a:	2a e0       	ldi	r18, 0x0A	; 10
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	b3 01       	movw	r22, r6
     c60:	a2 01       	movw	r20, r4
     c62:	8e e9       	ldi	r24, 0x9E	; 158
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEmi>
     c6a:	6c e2       	ldi	r22, 0x2C	; 44
     c6c:	8e e9       	ldi	r24, 0x9E	; 158
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN5Print5printEc>
     c74:	2a e0       	ldi	r18, 0x0A	; 10
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	b5 01       	movw	r22, r10
     c7a:	a4 01       	movw	r20, r8
     c7c:	8e e9       	ldi	r24, 0x9E	; 158
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN5Print7printlnEmi>
     c84:	e7 01       	movw	r28, r14
     c86:	c3 5e       	subi	r28, 0xE3	; 227
     c88:	de 4f       	sbci	r29, 0xFE	; 254
     c8a:	6f ef       	ldi	r22, 0xFF	; 255
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	88 81       	ld	r24, Y
     c90:	99 81       	ldd	r25, Y+1	; 0x01
     c92:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     c96:	2a e0       	ldi	r18, 0x0A	; 10
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	b3 01       	movw	r22, r6
     c9c:	a2 01       	movw	r20, r4
     c9e:	88 81       	ld	r24, Y
     ca0:	99 81       	ldd	r25, Y+1	; 0x01
     ca2:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEmi>
     ca6:	67 e0       	ldi	r22, 0x07	; 7
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	88 81       	ld	r24, Y
     cac:	99 81       	ldd	r25, Y+1	; 0x01
     cae:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
     cb2:	2a e0       	ldi	r18, 0x0A	; 10
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	b5 01       	movw	r22, r10
     cb8:	a4 01       	movw	r20, r8
     cba:	88 81       	ld	r24, Y
     cbc:	99 81       	ldd	r25, Y+1	; 0x01
     cbe:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN5Print7printlnEmi>
     cc2:	40 e1       	ldi	r20, 0x10	; 16
     cc4:	57 e2       	ldi	r21, 0x27	; 39
     cc6:	66 ef       	ldi	r22, 0xF6	; 246
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	c7 01       	movw	r24, r14
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	5f 90       	pop	r5
     ce6:	4f 90       	pop	r4
     ce8:	0c 94 77 05 	jmp	0xaee	; 0xaee <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000cec <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	8b 01       	movw	r16, r22
     cfc:	7a 01       	movw	r14, r20
     cfe:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
     d02:	6b e8       	ldi	r22, 0x8B	; 139
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	8e e9       	ldi	r24, 0x9E	; 158
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     d0e:	b8 01       	movw	r22, r16
     d10:	8e e9       	ldi	r24, 0x9E	; 158
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d18:	fe 01       	movw	r30, r28
     d1a:	e3 5e       	subi	r30, 0xE3	; 227
     d1c:	fe 4f       	sbci	r31, 0xFE	; 254
     d1e:	b8 01       	movw	r22, r16
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	b7 01       	movw	r22, r14
     d2c:	ce 01       	movw	r24, r28
     d2e:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
     d32:	18 2f       	mov	r17, r24
     d34:	64 e8       	ldi	r22, 0x84	; 132
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	8e e9       	ldi	r24, 0x9E	; 158
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     d40:	be 01       	movw	r22, r28
     d42:	61 5f       	subi	r22, 0xF1	; 241
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	8e e9       	ldi	r24, 0x9E	; 158
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
     d4e:	81 2f       	mov	r24, r17
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	08 95       	ret

00000d5e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     d5e:	8f 92       	push	r8
     d60:	9f 92       	push	r9
     d62:	af 92       	push	r10
     d64:	bf 92       	push	r11
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
     d78:	6b 01       	movw	r12, r22
     d7a:	49 01       	movw	r8, r18
     d7c:	5a 01       	movw	r10, r20
     d7e:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
     d82:	6d e7       	ldi	r22, 0x7D	; 125
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	8e e9       	ldi	r24, 0x9E	; 158
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     d8e:	b6 01       	movw	r22, r12
     d90:	8e e9       	ldi	r24, 0x9E	; 158
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     d98:	2a e0       	ldi	r18, 0x0A	; 10
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	b5 01       	movw	r22, r10
     d9e:	a4 01       	movw	r20, r8
     da0:	8e e9       	ldi	r24, 0x9E	; 158
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN5Print7printlnEli>
     da8:	7e 01       	movw	r14, r28
     daa:	83 ee       	ldi	r24, 0xE3	; 227
     dac:	e8 1a       	sub	r14, r24
     dae:	8e ef       	ldi	r24, 0xFE	; 254
     db0:	f8 0a       	sbc	r15, r24
     db2:	b6 01       	movw	r22, r12
     db4:	f7 01       	movw	r30, r14
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     dbe:	2a e0       	ldi	r18, 0x0A	; 10
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	b5 01       	movw	r22, r10
     dc4:	a4 01       	movw	r20, r8
     dc6:	f7 01       	movw	r30, r14
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN5Print7printlnEli>
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	b8 01       	movw	r22, r16
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
     dda:	18 2f       	mov	r17, r24
     ddc:	66 e7       	ldi	r22, 0x76	; 118
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	8e e9       	ldi	r24, 0x9E	; 158
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     de8:	be 01       	movw	r22, r28
     dea:	61 5f       	subi	r22, 0xF1	; 241
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8e e9       	ldi	r24, 0x9E	; 158
     df0:	93 e0       	ldi	r25, 0x03	; 3
     df2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
     df6:	81 2f       	mov	r24, r17
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	8f 90       	pop	r8
     e10:	08 95       	ret

00000e12 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	6b 01       	movw	r12, r22
     e2a:	7a 01       	movw	r14, r20
     e2c:	59 01       	movw	r10, r18
     e2e:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
     e32:	6f e6       	ldi	r22, 0x6F	; 111
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	8e e9       	ldi	r24, 0x9E	; 158
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     e3e:	b6 01       	movw	r22, r12
     e40:	8e e9       	ldi	r24, 0x9E	; 158
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     e48:	62 e2       	ldi	r22, 0x22	; 34
     e4a:	8e e9       	ldi	r24, 0x9E	; 158
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN5Print5printEc>
     e52:	b7 01       	movw	r22, r14
     e54:	8e e9       	ldi	r24, 0x9E	; 158
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     e5c:	62 e2       	ldi	r22, 0x22	; 34
     e5e:	8e e9       	ldi	r24, 0x9E	; 158
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 2d 1b 	call	0x365a	; 0x365a <_ZN5Print7printlnEc>
     e66:	8e 01       	movw	r16, r28
     e68:	03 5e       	subi	r16, 0xE3	; 227
     e6a:	1e 4f       	sbci	r17, 0xFE	; 254
     e6c:	b6 01       	movw	r22, r12
     e6e:	f8 01       	movw	r30, r16
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     e78:	62 e2       	ldi	r22, 0x22	; 34
     e7a:	f8 01       	movw	r30, r16
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN5Print5printEc>
     e84:	b7 01       	movw	r22, r14
     e86:	f8 01       	movw	r30, r16
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     e90:	62 e2       	ldi	r22, 0x22	; 34
     e92:	f8 01       	movw	r30, r16
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	0e 94 2d 1b 	call	0x365a	; 0x365a <_ZN5Print7printlnEc>
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	b5 01       	movw	r22, r10
     ea0:	ce 01       	movw	r24, r28
     ea2:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
     ea6:	18 2f       	mov	r17, r24
     ea8:	68 e6       	ldi	r22, 0x68	; 104
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	8e e9       	ldi	r24, 0x9E	; 158
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
     eb4:	be 01       	movw	r22, r28
     eb6:	61 5f       	subi	r22, 0xF1	; 241
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	8e e9       	ldi	r24, 0x9E	; 158
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
     ec2:	81 2f       	mov	r24, r17
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	bf 90       	pop	r11
     ed6:	af 90       	pop	r10
     ed8:	08 95       	ret

00000eda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
     ee4:	8a 01       	movw	r16, r20
     ee6:	a9 01       	movw	r20, r18
     ee8:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     eec:	88 23       	and	r24, r24
     eee:	41 f0       	breq	.+16     	; 0xf00 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     ef0:	b8 01       	movw	r22, r16
     ef2:	ce 01       	movw	r24, r28
     ef4:	0f 96       	adiw	r24, 0x0f	; 15
     ef6:	0e 94 c5 23 	call	0x478a	; 0x478a <strcmp_P>
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	89 2b       	or	r24, r25
     efe:	09 f0       	breq	.+2      	; 0xf02 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	82 2f       	mov	r24, r18
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <_ZN13Adafruit_FONA5beginEhh>:
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	f6 2e       	mov	r15, r22
     f22:	e4 2e       	mov	r14, r20
     f24:	8f e1       	ldi	r24, 0x1F	; 31
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 89 1a 	call	0x3512	; 0x3512 <_Znwj>
     f2c:	8c 01       	movw	r16, r24
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	4e 2d       	mov	r20, r14
     f32:	6f 2d       	mov	r22, r15
     f34:	0e 94 8b 20 	call	0x4116	; 0x4116 <_ZN14SoftwareSerialC1Ehhb>
     f38:	7e 01       	movw	r14, r28
     f3a:	83 ee       	ldi	r24, 0xE3	; 227
     f3c:	e8 1a       	sub	r14, r24
     f3e:	8e ef       	ldi	r24, 0xFE	; 254
     f40:	f8 0a       	sbc	r15, r24
     f42:	d7 01       	movw	r26, r14
     f44:	0d 93       	st	X+, r16
     f46:	1c 93       	st	X, r17
     f48:	40 ec       	ldi	r20, 0xC0	; 192
     f4a:	52 e1       	ldi	r21, 0x12	; 18
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN14SoftwareSerial5beginEl>
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	8c 85       	ldd	r24, Y+12	; 0x0c
     f5a:	0e 94 77 1d 	call	0x3aee	; 0x3aee <pinMode>
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	8c 85       	ldd	r24, Y+12	; 0x0c
     f62:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
     f66:	6a e0       	ldi	r22, 0x0A	; 10
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	8c 85       	ldd	r24, Y+12	; 0x0c
     f76:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
     f7a:	64 e6       	ldi	r22, 0x64	; 100
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
     f8e:	65 e6       	ldi	r22, 0x65	; 101
     f90:	73 e0       	ldi	r23, 0x03	; 3
     f92:	8e e9       	ldi	r24, 0x9E	; 158
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
     f9a:	8e e0       	ldi	r24, 0x0E	; 14
     f9c:	c8 2e       	mov	r12, r24
     f9e:	d1 2c       	mov	r13, r1
     fa0:	8e 01       	movw	r16, r28
     fa2:	05 5e       	subi	r16, 0xE5	; 229
     fa4:	1e 4f       	sbci	r17, 0xFE	; 254
     fa6:	f7 01       	movw	r30, r14
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	dc 01       	movw	r26, r24
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	04 80       	ldd	r0, Z+4	; 0x04
     fb4:	f5 81       	ldd	r31, Z+5	; 0x05
     fb6:	e0 2d       	mov	r30, r0
     fb8:	09 95       	icall
     fba:	89 2b       	or	r24, r25
     fbc:	59 f0       	breq	.+22     	; 0xfd4 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     fbe:	f7 01       	movw	r30, r14
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	dc 01       	movw	r26, r24
     fc6:	ed 91       	ld	r30, X+
     fc8:	fc 91       	ld	r31, X
     fca:	06 80       	ldd	r0, Z+6	; 0x06
     fcc:	f7 81       	ldd	r31, Z+7	; 0x07
     fce:	e0 2d       	mov	r30, r0
     fd0:	09 95       	icall
     fd2:	e9 cf       	rjmp	.-46     	; 0xfa6 <_ZN13Adafruit_FONA5beginEhh+0x98>
     fd4:	f8 01       	movw	r30, r16
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
     fda:	24 ef       	ldi	r18, 0xF4	; 244
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	62 e6       	ldi	r22, 0x62	; 98
     fe0:	73 e0       	ldi	r23, 0x03	; 3
     fe2:	ce 01       	movw	r24, r28
     fe4:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fe8:	81 11       	cpse	r24, r1
     fea:	34 c0       	rjmp	.+104    	; 0x1054 <_ZN13Adafruit_FONA5beginEhh+0x146>
     fec:	d7 01       	movw	r26, r14
     fee:	8d 91       	ld	r24, X+
     ff0:	9c 91       	ld	r25, X
     ff2:	dc 01       	movw	r26, r24
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	04 80       	ldd	r0, Z+4	; 0x04
     ffa:	f5 81       	ldd	r31, Z+5	; 0x05
     ffc:	e0 2d       	mov	r30, r0
     ffe:	09 95       	icall
    1000:	89 2b       	or	r24, r25
    1002:	59 f0       	breq	.+22     	; 0x101a <_ZN13Adafruit_FONA5beginEhh+0x10c>
    1004:	f7 01       	movw	r30, r14
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	dc 01       	movw	r26, r24
    100c:	ed 91       	ld	r30, X+
    100e:	fc 91       	ld	r31, X
    1010:	06 80       	ldd	r0, Z+6	; 0x06
    1012:	f7 81       	ldd	r31, Z+7	; 0x07
    1014:	e0 2d       	mov	r30, r0
    1016:	09 95       	icall
    1018:	e9 cf       	rjmp	.-46     	; 0xfec <_ZN13Adafruit_FONA5beginEhh+0xde>
    101a:	24 ef       	ldi	r18, 0xF4	; 244
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	4f e5       	ldi	r20, 0x5F	; 95
    1020:	53 e0       	ldi	r21, 0x03	; 3
    1022:	6c e5       	ldi	r22, 0x5C	; 92
    1024:	73 e0       	ldi	r23, 0x03	; 3
    1026:	ce 01       	movw	r24, r28
    1028:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    102c:	81 11       	cpse	r24, r1
    102e:	12 c0       	rjmp	.+36     	; 0x1054 <_ZN13Adafruit_FONA5beginEhh+0x146>
    1030:	64 ef       	ldi	r22, 0xF4	; 244
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    103c:	b1 e0       	ldi	r27, 0x01	; 1
    103e:	cb 1a       	sub	r12, r27
    1040:	d1 08       	sbc	r13, r1
    1042:	09 f0       	breq	.+2      	; 0x1046 <_ZN13Adafruit_FONA5beginEhh+0x138>
    1044:	b0 cf       	rjmp	.-160    	; 0xfa6 <_ZN13Adafruit_FONA5beginEhh+0x98>
    1046:	5e c0       	rjmp	.+188    	; 0x1104 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
    1048:	64 e6       	ldi	r22, 0x64	; 100
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    1054:	f8 01       	movw	r30, r16
    1056:	40 81       	ld	r20, Z
    1058:	51 81       	ldd	r21, Z+1	; 0x01
    105a:	24 ef       	ldi	r18, 0xF4	; 244
    105c:	31 e0       	ldi	r19, 0x01	; 1
    105e:	6f e2       	ldi	r22, 0x2F	; 47
    1060:	73 e0       	ldi	r23, 0x03	; 3
    1062:	ce 01       	movw	r24, r28
    1064:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1068:	64 e6       	ldi	r22, 0x64	; 100
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    1074:	d8 01       	movw	r26, r16
    1076:	4d 91       	ld	r20, X+
    1078:	5c 91       	ld	r21, X
    107a:	24 ef       	ldi	r18, 0xF4	; 244
    107c:	31 e0       	ldi	r19, 0x01	; 1
    107e:	6a e2       	ldi	r22, 0x2A	; 42
    1080:	73 e0       	ldi	r23, 0x03	; 3
    1082:	ce 01       	movw	r24, r28
    1084:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1088:	81 11       	cpse	r24, r1
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <_ZN13Adafruit_FONA5beginEhh+0x182>
    108c:	12 e0       	ldi	r17, 0x02	; 2
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <_ZN13Adafruit_FONA5beginEhh+0x184>
    1090:	11 e0       	ldi	r17, 0x01	; 1
    1092:	64 e6       	ldi	r22, 0x64	; 100
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    109e:	ce 01       	movw	r24, r28
    10a0:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
    10a4:	63 e2       	ldi	r22, 0x23	; 35
    10a6:	73 e0       	ldi	r23, 0x03	; 3
    10a8:	8e e9       	ldi	r24, 0x9E	; 158
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    10b0:	69 e0       	ldi	r22, 0x09	; 9
    10b2:	71 e0       	ldi	r23, 0x01	; 1
    10b4:	8e e9       	ldi	r24, 0x9E	; 158
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
    10bc:	69 e0       	ldi	r22, 0x09	; 9
    10be:	71 e0       	ldi	r23, 0x01	; 1
    10c0:	f7 01       	movw	r30, r14
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
    10ca:	41 e0       	ldi	r20, 0x01	; 1
    10cc:	64 ef       	ldi	r22, 0xF4	; 244
    10ce:	71 e0       	ldi	r23, 0x01	; 1
    10d0:	ce 01       	movw	r24, r28
    10d2:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
    10d6:	6c e1       	ldi	r22, 0x1C	; 28
    10d8:	73 e0       	ldi	r23, 0x03	; 3
    10da:	8e e9       	ldi	r24, 0x9E	; 158
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    10e2:	2f 96       	adiw	r28, 0x0f	; 15
    10e4:	be 01       	movw	r22, r28
    10e6:	8e e9       	ldi	r24, 0x9E	; 158
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
    10ee:	61 e1       	ldi	r22, 0x11	; 17
    10f0:	73 e0       	ldi	r23, 0x03	; 3
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 d7 23 	call	0x47ae	; 0x47ae <strstr_P>
    10f8:	89 2b       	or	r24, r25
    10fa:	11 f4       	brne	.+4      	; 0x1100 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    10fc:	84 e0       	ldi	r24, 0x04	; 4
    10fe:	35 c0       	rjmp	.+106    	; 0x116a <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1100:	81 2f       	mov	r24, r17
    1102:	33 c0       	rjmp	.+102    	; 0x116a <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1104:	d8 01       	movw	r26, r16
    1106:	4d 91       	ld	r20, X+
    1108:	5c 91       	ld	r21, X
    110a:	24 ef       	ldi	r18, 0xF4	; 244
    110c:	31 e0       	ldi	r19, 0x01	; 1
    110e:	69 e5       	ldi	r22, 0x59	; 89
    1110:	73 e0       	ldi	r23, 0x03	; 3
    1112:	ce 01       	movw	r24, r28
    1114:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1118:	64 e6       	ldi	r22, 0x64	; 100
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    1124:	f8 01       	movw	r30, r16
    1126:	40 81       	ld	r20, Z
    1128:	51 81       	ldd	r21, Z+1	; 0x01
    112a:	24 ef       	ldi	r18, 0xF4	; 244
    112c:	31 e0       	ldi	r19, 0x01	; 1
    112e:	66 e5       	ldi	r22, 0x56	; 86
    1130:	73 e0       	ldi	r23, 0x03	; 3
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1138:	64 e6       	ldi	r22, 0x64	; 100
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    1144:	d8 01       	movw	r26, r16
    1146:	4d 91       	ld	r20, X+
    1148:	5c 91       	ld	r21, X
    114a:	24 ef       	ldi	r18, 0xF4	; 244
    114c:	31 e0       	ldi	r19, 0x01	; 1
    114e:	63 e5       	ldi	r22, 0x53	; 83
    1150:	73 e0       	ldi	r23, 0x03	; 3
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1158:	81 11       	cpse	r24, r1
    115a:	76 cf       	rjmp	.-276    	; 0x1048 <_ZN13Adafruit_FONA5beginEhh+0x13a>
    115c:	64 e3       	ldi	r22, 0x34	; 52
    115e:	73 e0       	ldi	r23, 0x03	; 3
    1160:	8e e9       	ldi	r24, 0x9E	; 158
    1162:	93 e0       	ldi	r25, 0x03	; 3
    1164:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	08 95       	ret

0000117c <_ZN13Adafruit_FONA9HTTP_initEv>:
    117c:	fc 01       	movw	r30, r24
    117e:	e5 5e       	subi	r30, 0xE5	; 229
    1180:	fe 4f       	sbci	r31, 0xFE	; 254
    1182:	40 81       	ld	r20, Z
    1184:	51 81       	ldd	r21, Z+1	; 0x01
    1186:	24 ef       	ldi	r18, 0xF4	; 244
    1188:	31 e0       	ldi	r19, 0x01	; 1
    118a:	66 e5       	ldi	r22, 0x56	; 86
    118c:	71 e0       	ldi	r23, 0x01	; 1
    118e:	0c 94 6d 07 	jmp	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001192 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1192:	fc 01       	movw	r30, r24
    1194:	e5 5e       	subi	r30, 0xE5	; 229
    1196:	fe 4f       	sbci	r31, 0xFE	; 254
    1198:	40 81       	ld	r20, Z
    119a:	51 81       	ldd	r21, Z+1	; 0x01
    119c:	24 ef       	ldi	r18, 0xF4	; 244
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	6a e4       	ldi	r22, 0x4A	; 74
    11a2:	71 e0       	ldi	r23, 0x01	; 1
    11a4:	0c 94 6d 07 	jmp	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000011a8 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>:
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0xe>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x10>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x12>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	8c 01       	movw	r16, r24
    11c0:	7b 01       	movw	r14, r22
    11c2:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN13Adafruit_FONA9HTTP_termEv>
    11c6:	c8 01       	movw	r24, r16
    11c8:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN13Adafruit_FONA9HTTP_initEv>
    11cc:	88 23       	and	r24, r24
    11ce:	59 f1       	breq	.+86     	; 0x1226 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x7e>
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	66 ea       	ldi	r22, 0xA6	; 166
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	c8 01       	movw	r24, r16
    11de:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    11e2:	88 23       	and	r24, r24
    11e4:	11 f1       	breq	.+68     	; 0x122a <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x82>
    11e6:	a7 01       	movw	r20, r14
    11e8:	62 ea       	ldi	r22, 0xA2	; 162
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    11f2:	88 23       	and	r24, r24
    11f4:	e1 f0       	breq	.+56     	; 0x122e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x86>
    11f6:	b8 01       	movw	r22, r16
    11f8:	6b 5e       	subi	r22, 0xEB	; 235
    11fa:	7e 4f       	sbci	r23, 0xFE	; 254
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZN6StringC1ERKS_>
    1204:	ae 01       	movw	r20, r28
    1206:	4f 5f       	subi	r20, 0xFF	; 255
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	6f e9       	ldi	r22, 0x9F	; 159
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1214:	18 2f       	mov	r17, r24
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN6StringD1Ev>
    121e:	11 23       	and	r17, r17
    1220:	41 f0       	breq	.+16     	; 0x1232 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8a>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    1232:	80 e4       	ldi	r24, 0x40	; 64
    1234:	26 96       	adiw	r28, 0x06	; 6
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	08 95       	ret

0000124e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	ec 01       	movw	r28, r24
    1260:	68 01       	movw	r12, r16
    1262:	87 01       	movw	r16, r14
    1264:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    1268:	b6 01       	movw	r22, r12
    126a:	ce 01       	movw	r24, r28
    126c:	0f 96       	adiw	r24, 0x0f	; 15
    126e:	0e 94 c5 23 	call	0x478a	; 0x478a <strcmp_P>
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	89 2b       	or	r24, r25
    1276:	09 f0       	breq	.+2      	; 0x127a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	82 2f       	mov	r24, r18
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	ec 01       	movw	r28, r24
    129c:	79 01       	movw	r14, r18
    129e:	98 01       	movw	r18, r16
    12a0:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    12a4:	b7 01       	movw	r22, r14
    12a6:	ce 01       	movw	r24, r28
    12a8:	0f 96       	adiw	r24, 0x0f	; 15
    12aa:	0e 94 c5 23 	call	0x478a	; 0x478a <strcmp_P>
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	89 2b       	or	r24, r25
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	82 2f       	mov	r24, r18
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	08 95       	ret

000012c6 <_ZN13Adafruit_FONA10enableGPRSEb>:
    12c6:	7f 92       	push	r7
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	28 ee       	ldi	r18, 0xE8	; 232
    12e4:	3d ef       	ldi	r19, 0xFD	; 253
    12e6:	66 23       	and	r22, r22
    12e8:	09 f4       	brne	.+2      	; 0x12ec <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    12ea:	1f c1       	rjmp	.+574    	; 0x152a <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    12ec:	4d eb       	ldi	r20, 0xBD	; 189
    12ee:	52 e0       	ldi	r21, 0x02	; 2
    12f0:	62 eb       	ldi	r22, 0xB2	; 178
    12f2:	72 e0       	ldi	r23, 0x02	; 2
    12f4:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12f8:	81 11       	cpse	r24, r1
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	78 2e       	mov	r7, r24
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1302:	77 24       	eor	r7, r7
    1304:	73 94       	inc	r7
    1306:	7e 01       	movw	r14, r28
    1308:	85 ee       	ldi	r24, 0xE5	; 229
    130a:	e8 1a       	sub	r14, r24
    130c:	8e ef       	ldi	r24, 0xFE	; 254
    130e:	f8 0a       	sbc	r15, r24
    1310:	f7 01       	movw	r30, r14
    1312:	40 81       	ld	r20, Z
    1314:	51 81       	ldd	r21, Z+1	; 0x01
    1316:	20 e1       	ldi	r18, 0x10	; 16
    1318:	37 e2       	ldi	r19, 0x27	; 39
    131a:	67 ea       	ldi	r22, 0xA7	; 167
    131c:	72 e0       	ldi	r23, 0x02	; 2
    131e:	ce 01       	movw	r24, r28
    1320:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1324:	88 23       	and	r24, r24
    1326:	09 f4       	brne	.+2      	; 0x132a <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    1328:	25 c1       	rjmp	.+586    	; 0x1574 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    132a:	f7 01       	movw	r30, r14
    132c:	40 81       	ld	r20, Z
    132e:	51 81       	ldd	r21, Z+1	; 0x01
    1330:	20 e1       	ldi	r18, 0x10	; 16
    1332:	37 e2       	ldi	r19, 0x27	; 39
    1334:	69 e8       	ldi	r22, 0x89	; 137
    1336:	72 e0       	ldi	r23, 0x02	; 2
    1338:	ce 01       	movw	r24, r28
    133a:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    133e:	88 23       	and	r24, r24
    1340:	09 f4       	brne	.+2      	; 0x1344 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    1342:	1a c1       	rjmp	.+564    	; 0x1578 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    1344:	4e 01       	movw	r8, r28
    1346:	f2 ef       	ldi	r31, 0xF2	; 242
    1348:	8f 1a       	sub	r8, r31
    134a:	fe ef       	ldi	r31, 0xFE	; 254
    134c:	9f 0a       	sbc	r9, r31
    134e:	f4 01       	movw	r30, r8
    1350:	40 81       	ld	r20, Z
    1352:	51 81       	ldd	r21, Z+1	; 0x01
    1354:	41 15       	cp	r20, r1
    1356:	51 05       	cpc	r21, r1
    1358:	71 f4       	brne	.+28     	; 0x1376 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    135a:	f7 01       	movw	r30, r14
    135c:	40 81       	ld	r20, Z
    135e:	51 81       	ldd	r21, Z+1	; 0x01
    1360:	2f ef       	ldi	r18, 0xFF	; 255
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	64 e2       	ldi	r22, 0x24	; 36
    1366:	72 e0       	ldi	r23, 0x02	; 2
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    136e:	81 11       	cpse	r24, r1
    1370:	ce c0       	rjmp	.+412    	; 0x150e <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    1372:	89 e0       	ldi	r24, 0x09	; 9
    1374:	0e c1       	rjmp	.+540    	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1376:	f7 01       	movw	r30, r14
    1378:	20 81       	ld	r18, Z
    137a:	31 81       	ldd	r19, Z+1	; 0x01
    137c:	00 e1       	ldi	r16, 0x10	; 16
    137e:	17 e2       	ldi	r17, 0x27	; 39
    1380:	65 e7       	ldi	r22, 0x75	; 117
    1382:	72 e0       	ldi	r23, 0x02	; 2
    1384:	ce 01       	movw	r24, r28
    1386:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    138a:	88 23       	and	r24, r24
    138c:	09 f4       	brne	.+2      	; 0x1390 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    138e:	f6 c0       	rjmp	.+492    	; 0x157c <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN13Adafruit_FONA10flushInputEv>
    1396:	8e 01       	movw	r16, r28
    1398:	03 5e       	subi	r16, 0xE3	; 227
    139a:	1e 4f       	sbci	r17, 0xFE	; 254
    139c:	6b e6       	ldi	r22, 0x6B	; 107
    139e:	72 e0       	ldi	r23, 0x02	; 2
    13a0:	f8 01       	movw	r30, r16
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    13aa:	f4 01       	movw	r30, r8
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	f8 01       	movw	r30, r16
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    13ba:	5e 01       	movw	r10, r28
    13bc:	f0 ef       	ldi	r31, 0xF0	; 240
    13be:	af 1a       	sub	r10, r31
    13c0:	fe ef       	ldi	r31, 0xFE	; 254
    13c2:	bf 0a       	sbc	r11, r31
    13c4:	f5 01       	movw	r30, r10
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	89 2b       	or	r24, r25
    13cc:	79 f0       	breq	.+30     	; 0x13ec <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    13ce:	65 e2       	ldi	r22, 0x25	; 37
    13d0:	71 e0       	ldi	r23, 0x01	; 1
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    13dc:	f5 01       	movw	r30, r10
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	f8 01       	movw	r30, r16
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    13ec:	6e 01       	movw	r12, r28
    13ee:	fe ee       	ldi	r31, 0xEE	; 238
    13f0:	cf 1a       	sub	r12, r31
    13f2:	fe ef       	ldi	r31, 0xFE	; 254
    13f4:	df 0a       	sbc	r13, r31
    13f6:	f6 01       	movw	r30, r12
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	89 2b       	or	r24, r25
    13fe:	79 f0       	breq	.+30     	; 0x141e <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1400:	65 e2       	ldi	r22, 0x25	; 37
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	f8 01       	movw	r30, r16
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    140e:	f6 01       	movw	r30, r12
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	f8 01       	movw	r30, r16
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    141e:	67 e2       	ldi	r22, 0x27	; 39
    1420:	71 e0       	ldi	r23, 0x01	; 1
    1422:	f8 01       	movw	r30, r16
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
    142c:	64 e6       	ldi	r22, 0x64	; 100
    142e:	72 e0       	ldi	r23, 0x02	; 2
    1430:	8e e9       	ldi	r24, 0x9E	; 158
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1438:	6a e5       	ldi	r22, 0x5A	; 90
    143a:	72 e0       	ldi	r23, 0x02	; 2
    143c:	8e e9       	ldi	r24, 0x9E	; 158
    143e:	93 e0       	ldi	r25, 0x03	; 3
    1440:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1444:	f4 01       	movw	r30, r8
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	8e e9       	ldi	r24, 0x9E	; 158
    144c:	93 e0       	ldi	r25, 0x03	; 3
    144e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1452:	f5 01       	movw	r30, r10
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	89 2b       	or	r24, r25
    145a:	69 f0       	breq	.+26     	; 0x1476 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    145c:	65 e2       	ldi	r22, 0x25	; 37
    145e:	71 e0       	ldi	r23, 0x01	; 1
    1460:	8e e9       	ldi	r24, 0x9E	; 158
    1462:	93 e0       	ldi	r25, 0x03	; 3
    1464:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    1468:	f5 01       	movw	r30, r10
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	8e e9       	ldi	r24, 0x9E	; 158
    1470:	93 e0       	ldi	r25, 0x03	; 3
    1472:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1476:	f6 01       	movw	r30, r12
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	89 2b       	or	r24, r25
    147e:	69 f0       	breq	.+26     	; 0x149a <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    1480:	65 e2       	ldi	r22, 0x25	; 37
    1482:	71 e0       	ldi	r23, 0x01	; 1
    1484:	8e e9       	ldi	r24, 0x9E	; 158
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    148c:	f6 01       	movw	r30, r12
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	8e e9       	ldi	r24, 0x9E	; 158
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    149a:	67 e2       	ldi	r22, 0x27	; 39
    149c:	71 e0       	ldi	r23, 0x01	; 1
    149e:	8e e9       	ldi	r24, 0x9E	; 158
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
    14a6:	f7 01       	movw	r30, r14
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	40 e1       	ldi	r20, 0x10	; 16
    14ae:	57 e2       	ldi	r21, 0x27	; 39
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 94 77 05 	call	0xaee	; 0xaee <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    14ba:	62 c0       	rjmp	.+196    	; 0x1580 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    14bc:	f5 01       	movw	r30, r10
    14be:	40 81       	ld	r20, Z
    14c0:	51 81       	ldd	r21, Z+1	; 0x01
    14c2:	41 15       	cp	r20, r1
    14c4:	51 05       	cpc	r21, r1
    14c6:	39 f4       	brne	.+14     	; 0x14d6 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    14c8:	f6 01       	movw	r30, r12
    14ca:	40 81       	ld	r20, Z
    14cc:	51 81       	ldd	r21, Z+1	; 0x01
    14ce:	41 15       	cp	r20, r1
    14d0:	51 05       	cpc	r21, r1
    14d2:	79 f4       	brne	.+30     	; 0x14f2 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    14d4:	42 cf       	rjmp	.-380    	; 0x135a <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    14d6:	f7 01       	movw	r30, r14
    14d8:	20 81       	ld	r18, Z
    14da:	31 81       	ldd	r19, Z+1	; 0x01
    14dc:	00 e1       	ldi	r16, 0x10	; 16
    14de:	17 e2       	ldi	r17, 0x27	; 39
    14e0:	65 e4       	ldi	r22, 0x45	; 69
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	ce 01       	movw	r24, r28
    14e6:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    14ea:	81 11       	cpse	r24, r1
    14ec:	ed cf       	rjmp	.-38     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    14ee:	87 e0       	ldi	r24, 0x07	; 7
    14f0:	50 c0       	rjmp	.+160    	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14f2:	f7 01       	movw	r30, r14
    14f4:	20 81       	ld	r18, Z
    14f6:	31 81       	ldd	r19, Z+1	; 0x01
    14f8:	00 e1       	ldi	r16, 0x10	; 16
    14fa:	17 e2       	ldi	r17, 0x27	; 39
    14fc:	61 e3       	ldi	r22, 0x31	; 49
    14fe:	72 e0       	ldi	r23, 0x02	; 2
    1500:	ce 01       	movw	r24, r28
    1502:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1506:	81 11       	cpse	r24, r1
    1508:	28 cf       	rjmp	.-432    	; 0x135a <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    150a:	88 e0       	ldi	r24, 0x08	; 8
    150c:	42 c0       	rjmp	.+132    	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    150e:	f7 01       	movw	r30, r14
    1510:	40 81       	ld	r20, Z
    1512:	51 81       	ldd	r21, Z+1	; 0x01
    1514:	2f ef       	ldi	r18, 0xFF	; 255
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	6b e1       	ldi	r22, 0x1B	; 27
    151a:	72 e0       	ldi	r23, 0x02	; 2
    151c:	ce 01       	movw	r24, r28
    151e:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1522:	88 23       	and	r24, r24
    1524:	79 f1       	breq	.+94     	; 0x1584 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    1526:	87 2d       	mov	r24, r7
    1528:	34 c0       	rjmp	.+104    	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    152a:	43 e1       	ldi	r20, 0x13	; 19
    152c:	52 e0       	ldi	r21, 0x02	; 2
    152e:	68 e0       	ldi	r22, 0x08	; 8
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1536:	88 23       	and	r24, r24
    1538:	39 f1       	breq	.+78     	; 0x1588 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    153a:	8e 01       	movw	r16, r28
    153c:	05 5e       	subi	r16, 0xE5	; 229
    153e:	1e 4f       	sbci	r17, 0xFE	; 254
    1540:	f8 01       	movw	r30, r16
    1542:	40 81       	ld	r20, Z
    1544:	51 81       	ldd	r21, Z+1	; 0x01
    1546:	20 e1       	ldi	r18, 0x10	; 16
    1548:	37 e2       	ldi	r19, 0x27	; 39
    154a:	6b ef       	ldi	r22, 0xFB	; 251
    154c:	71 e0       	ldi	r23, 0x01	; 1
    154e:	ce 01       	movw	r24, r28
    1550:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1554:	88 23       	and	r24, r24
    1556:	d1 f0       	breq	.+52     	; 0x158c <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    1558:	f8 01       	movw	r30, r16
    155a:	40 81       	ld	r20, Z
    155c:	51 81       	ldd	r21, Z+1	; 0x01
    155e:	20 e1       	ldi	r18, 0x10	; 16
    1560:	37 e2       	ldi	r19, 0x27	; 39
    1562:	60 ef       	ldi	r22, 0xF0	; 240
    1564:	71 e0       	ldi	r23, 0x01	; 1
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    156c:	88 23       	and	r24, r24
    156e:	81 f0       	breq	.+32     	; 0x1590 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1578:	84 e0       	ldi	r24, 0x04	; 4
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    157c:	85 e0       	ldi	r24, 0x05	; 5
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1580:	86 e0       	ldi	r24, 0x06	; 6
    1582:	07 c0       	rjmp	.+14     	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1584:	8a e0       	ldi	r24, 0x0A	; 10
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1588:	8b e0       	ldi	r24, 0x0B	; 11
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    158c:	8c e0       	ldi	r24, 0x0C	; 12
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1590:	8d e0       	ldi	r24, 0x0D	; 13
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	df 90       	pop	r13
    15a0:	cf 90       	pop	r12
    15a2:	bf 90       	pop	r11
    15a4:	af 90       	pop	r10
    15a6:	9f 90       	pop	r9
    15a8:	8f 90       	pop	r8
    15aa:	7f 90       	pop	r7
    15ac:	08 95       	ret

000015ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	5b 01       	movw	r10, r22
    15c2:	6a 01       	movw	r12, r20
    15c4:	e2 2e       	mov	r14, r18
    15c6:	0f 96       	adiw	r24, 0x0f	; 15
    15c8:	0e 94 d7 23 	call	0x47ae	; 0x47ae <strstr_P>
    15cc:	ec 01       	movw	r28, r24
    15ce:	89 2b       	or	r24, r25
    15d0:	c1 f0       	breq	.+48     	; 0x1602 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    15d2:	c5 01       	movw	r24, r10
    15d4:	0e 94 ce 23 	call	0x479c	; 0x479c <__strlen_P>
    15d8:	8c 0f       	add	r24, r28
    15da:	9d 1f       	adc	r25, r29
    15dc:	c0 e0       	ldi	r28, 0x00	; 0
    15de:	f1 2c       	mov	r15, r1
    15e0:	c0 17       	cp	r28, r16
    15e2:	41 f0       	breq	.+16     	; 0x15f4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    15e4:	b7 01       	movw	r22, r14
    15e6:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <strchr>
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	51 f0       	breq	.+20     	; 0x1602 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	cf 5f       	subi	r28, 0xFF	; 255
    15f2:	f6 cf       	rjmp	.-20     	; 0x15e0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    15f4:	0e 94 a7 23 	call	0x474e	; 0x474e <atoi>
    15f8:	f6 01       	movw	r30, r12
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	bf 90       	pop	r11
    1614:	af 90       	pop	r10
    1616:	08 95       	ret

00001618 <_ZN13Adafruit_FONA12HTTP_readallEjPc>:
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	00 d0       	rcall	.+0      	; 0x162a <_ZN13Adafruit_FONA12HTTP_readallEjPc+0x12>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	7c 01       	movw	r14, r24
    1630:	6a 01       	movw	r12, r20
    1632:	9b 01       	movw	r18, r22
    1634:	21 50       	subi	r18, 0x01	; 1
    1636:	31 09       	sbc	r19, r1
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	04 ef       	ldi	r16, 0xF4	; 244
    163e:	11 e0       	ldi	r17, 0x01	; 1
    1640:	6e eb       	ldi	r22, 0xBE	; 190
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	2c e2       	ldi	r18, 0x2C	; 44
    164c:	ae 01       	movw	r20, r28
    164e:	4f 5f       	subi	r20, 0xFF	; 255
    1650:	5f 4f       	sbci	r21, 0xFF	; 255
    1652:	62 eb       	ldi	r22, 0xB2	; 178
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	c7 01       	movw	r24, r14
    1658:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    165c:	88 23       	and	r24, r24
    165e:	61 f0       	breq	.+24     	; 0x1678 <_ZN13Adafruit_FONA12HTTP_readallEjPc+0x60>
    1660:	49 81       	ldd	r20, Y+1	; 0x01
    1662:	5a 81       	ldd	r21, Y+2	; 0x02
    1664:	b6 01       	movw	r22, r12
    1666:	c7 01       	movw	r24, r14
    1668:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN13Adafruit_FONA19internalReadRawDataEPcj>
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	64 ef       	ldi	r22, 0xF4	; 244
    1670:	71 e0       	ldi	r23, 0x01	; 1
    1672:	c7 01       	movw	r24, r14
    1674:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	08 95       	ret

0000168e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    168e:	4f 92       	push	r4
    1690:	5f 92       	push	r5
    1692:	6f 92       	push	r6
    1694:	7f 92       	push	r7
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24
    16ac:	6a 01       	movw	r12, r20
    16ae:	59 01       	movw	r10, r18
    16b0:	27 01       	movw	r4, r14
    16b2:	38 01       	movw	r6, r16
    16b4:	fc 01       	movw	r30, r24
    16b6:	e5 5e       	subi	r30, 0xE5	; 229
    16b8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ba:	00 81       	ld	r16, Z
    16bc:	11 81       	ldd	r17, Z+1	; 0x01
    16be:	26 2f       	mov	r18, r22
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	84 ef       	ldi	r24, 0xF4	; 244
    16c8:	e8 2e       	mov	r14, r24
    16ca:	ff 24       	eor	r15, r15
    16cc:	f3 94       	inc	r15
    16ce:	67 ee       	ldi	r22, 0xE7	; 231
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	ce 01       	movw	r24, r28
    16d4:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    16d8:	88 23       	and	r24, r24
    16da:	09 f1       	breq	.+66     	; 0x171e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x90>
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	b2 01       	movw	r22, r4
    16e0:	ce 01       	movw	r24, r28
    16e2:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
    16e6:	01 e0       	ldi	r16, 0x01	; 1
    16e8:	2c e2       	ldi	r18, 0x2C	; 44
    16ea:	a6 01       	movw	r20, r12
    16ec:	6a ed       	ldi	r22, 0xDA	; 218
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	ce 01       	movw	r24, r28
    16f2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    16f6:	88 23       	and	r24, r24
    16f8:	a1 f0       	breq	.+40     	; 0x1722 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x94>
    16fa:	02 e0       	ldi	r16, 0x02	; 2
    16fc:	2c e2       	ldi	r18, 0x2C	; 44
    16fe:	a5 01       	movw	r20, r10
    1700:	6d ec       	ldi	r22, 0xCD	; 205
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	ce 01       	movw	r24, r28
    1706:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    170a:	88 23       	and	r24, r24
    170c:	61 f0       	breq	.+24     	; 0x1726 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x98>
    170e:	f6 01       	movw	r30, r12
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	88 3c       	cpi	r24, 0xC8	; 200
    1716:	91 05       	cpc	r25, r1
    1718:	41 f4       	brne	.+16     	; 0x172a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9c>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	07 c0       	rjmp	.+14     	; 0x172c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    171e:	87 e0       	ldi	r24, 0x07	; 7
    1720:	05 c0       	rjmp	.+10     	; 0x172c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1722:	88 e0       	ldi	r24, 0x08	; 8
    1724:	03 c0       	rjmp	.+6      	; 0x172c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    1726:	89 e0       	ldi	r24, 0x09	; 9
    1728:	01 c0       	rjmp	.+2      	; 0x172c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	7f 90       	pop	r7
    1742:	6f 90       	pop	r6
    1744:	5f 90       	pop	r5
    1746:	4f 90       	pop	r4
    1748:	08 95       	ret

0000174a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc>:
    174a:	2f 92       	push	r2
    174c:	3f 92       	push	r3
    174e:	4f 92       	push	r4
    1750:	5f 92       	push	r5
    1752:	6f 92       	push	r6
    1754:	7f 92       	push	r7
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	00 d0       	rcall	.+0      	; 0x1770 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x26>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x28>
    1772:	1f 92       	push	r1
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	3c 01       	movw	r6, r24
    177a:	5b 83       	std	Y+3, r21	; 0x03
    177c:	4a 83       	std	Y+2, r20	; 0x02
    177e:	19 01       	movw	r2, r18
    1780:	28 01       	movw	r4, r16
    1782:	fd 82       	std	Y+5, r15	; 0x05
    1784:	ec 82       	std	Y+4, r14	; 0x04
    1786:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	8f 70       	andi	r24, 0x0F	; 15
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	08 f0       	brcs	.+2      	; 0x1794 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x4a>
    1792:	59 c0       	rjmp	.+178    	; 0x1846 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfc>
    1794:	4a 81       	ldd	r20, Y+2	; 0x02
    1796:	5b 81       	ldd	r21, Y+3	; 0x03
    1798:	6a ea       	ldi	r22, 0xAA	; 170
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	c3 01       	movw	r24, r6
    179e:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    17a2:	81 11       	cpse	r24, r1
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x62>
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	80 61       	ori	r24, 0x10	; 16
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	a2 01       	movw	r20, r4
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	00 ec       	ldi	r16, 0xC0	; 192
    17b4:	14 ed       	ldi	r17, 0xD4	; 212
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	c3 01       	movw	r24, r6
    17bc:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    17c0:	81 11       	cpse	r24, r1
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0x80>
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	85 60       	ori	r24, 0x05	; 5
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    17ca:	f3 01       	movw	r30, r6
    17cc:	e3 5e       	subi	r30, 0xE3	; 227
    17ce:	fe 4f       	sbci	r31, 0xFE	; 254
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	dc 01       	movw	r26, r24
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	02 80       	ldd	r0, Z+2	; 0x02
    17dc:	f3 81       	ldd	r31, Z+3	; 0x03
    17de:	e0 2d       	mov	r30, r0
    17e0:	a2 01       	movw	r20, r4
    17e2:	b1 01       	movw	r22, r2
    17e4:	09 95       	icall
    17e6:	f3 01       	movw	r30, r6
    17e8:	e5 5e       	subi	r30, 0xE5	; 229
    17ea:	fe 4f       	sbci	r31, 0xFE	; 254
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	40 e1       	ldi	r20, 0x10	; 16
    17f2:	57 e2       	ldi	r21, 0x27	; 39
    17f4:	c3 01       	movw	r24, r6
    17f6:	0e 94 77 05 	call	0xaee	; 0xaee <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    17fa:	81 11       	cpse	r24, r1
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xba>
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	86 60       	ori	r24, 0x06	; 6
    1802:	22 c0       	rjmp	.+68     	; 0x1848 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    1804:	10 e1       	ldi	r17, 0x10	; 16
    1806:	e1 2e       	mov	r14, r17
    1808:	17 e2       	ldi	r17, 0x27	; 39
    180a:	f1 2e       	mov	r15, r17
    180c:	00 e0       	ldi	r16, 0x00	; 0
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	95 01       	movw	r18, r10
    1812:	4c 81       	ldd	r20, Y+4	; 0x04
    1814:	5d 81       	ldd	r21, Y+5	; 0x05
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	c3 01       	movw	r24, r6
    181a:	0e 94 47 0b 	call	0x168e	; 0x168e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    181e:	98 2f       	mov	r25, r24
    1820:	9f 70       	andi	r25, 0x0F	; 15
    1822:	92 30       	cpi	r25, 0x02	; 2
    1824:	18 f0       	brcs	.+6      	; 0x182c <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xe2>
    1826:	b9 81       	ldd	r27, Y+1	; 0x01
    1828:	8b 2b       	or	r24, r27
    182a:	0e c0       	rjmp	.+28     	; 0x1848 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    182c:	a4 01       	movw	r20, r8
    182e:	b6 01       	movw	r22, r12
    1830:	c3 01       	movw	r24, r6
    1832:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN13Adafruit_FONA12HTTP_readallEjPc>
    1836:	81 11       	cpse	r24, r1
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xf6>
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	80 62       	ori	r24, 0x20	; 32
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc+0xfe>
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	8f 90       	pop	r8
    186a:	7f 90       	pop	r7
    186c:	6f 90       	pop	r6
    186e:	5f 90       	pop	r5
    1870:	4f 90       	pop	r4
    1872:	3f 90       	pop	r3
    1874:	2f 90       	pop	r2
    1876:	08 95       	ret

00001878 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_>:
    1878:	2f 92       	push	r2
    187a:	3f 92       	push	r3
    187c:	4f 92       	push	r4
    187e:	5f 92       	push	r5
    1880:	6f 92       	push	r6
    1882:	7f 92       	push	r7
    1884:	8f 92       	push	r8
    1886:	9f 92       	push	r9
    1888:	af 92       	push	r10
    188a:	bf 92       	push	r11
    188c:	cf 92       	push	r12
    188e:	df 92       	push	r13
    1890:	ef 92       	push	r14
    1892:	ff 92       	push	r15
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	3c 01       	movw	r6, r24
    189e:	e9 01       	movw	r28, r18
    18a0:	28 01       	movw	r4, r16
    18a2:	17 01       	movw	r2, r14
    18a4:	76 01       	movw	r14, r12
    18a6:	49 01       	movw	r8, r18
    18a8:	51 01       	movw	r10, r2
    18aa:	68 01       	movw	r12, r16
    18ac:	8a 01       	movw	r16, r20
    18ae:	9b 01       	movw	r18, r22
    18b0:	43 ec       	ldi	r20, 0xC3	; 195
    18b2:	51 e0       	ldi	r21, 0x01	; 1
    18b4:	6e ec       	ldi	r22, 0xCE	; 206
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_Pc>
    18bc:	18 2f       	mov	r17, r24
    18be:	8f 70       	andi	r24, 0x0F	; 15
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	78 f0       	brcs	.+30     	; 0x18e2 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0x6a>
    18c4:	60 ea       	ldi	r22, 0xA0	; 160
    18c6:	71 e0       	ldi	r23, 0x01	; 1
    18c8:	8e e9       	ldi	r24, 0x9E	; 158
    18ca:	93 e0       	ldi	r25, 0x03	; 3
    18cc:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    18d0:	61 2f       	mov	r22, r17
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	4a e0       	ldi	r20, 0x0A	; 10
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	8e e9       	ldi	r24, 0x9E	; 158
    18da:	93 e0       	ldi	r25, 0x03	; 3
    18dc:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEii>
    18e0:	33 c0       	rjmp	.+102    	; 0x1948 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xd0>
    18e2:	63 e8       	ldi	r22, 0x83	; 131
    18e4:	71 e0       	ldi	r23, 0x01	; 1
    18e6:	8e e9       	ldi	r24, 0x9E	; 158
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    18ee:	f1 01       	movw	r30, r2
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	4a e0       	ldi	r20, 0x0A	; 10
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	8e e9       	ldi	r24, 0x9E	; 158
    18fa:	93 e0       	ldi	r25, 0x03	; 3
    18fc:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    1900:	60 e7       	ldi	r22, 0x70	; 112
    1902:	71 e0       	ldi	r23, 0x01	; 1
    1904:	8e e9       	ldi	r24, 0x9E	; 158
    1906:	93 e0       	ldi	r25, 0x03	; 3
    1908:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    190c:	4a e0       	ldi	r20, 0x0A	; 10
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	b2 01       	movw	r22, r4
    1912:	8e e9       	ldi	r24, 0x9E	; 158
    1914:	93 e0       	ldi	r25, 0x03	; 3
    1916:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    191a:	62 e6       	ldi	r22, 0x62	; 98
    191c:	71 e0       	ldi	r23, 0x01	; 1
    191e:	8e e9       	ldi	r24, 0x9E	; 158
    1920:	93 e0       	ldi	r25, 0x03	; 3
    1922:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1926:	fe 01       	movw	r30, r28
    1928:	01 90       	ld	r0, Z+
    192a:	00 20       	and	r0, r0
    192c:	e9 f7       	brne	.-6      	; 0x1928 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_+0xb0>
    192e:	31 97       	sbiw	r30, 0x01	; 1
    1930:	bf 01       	movw	r22, r30
    1932:	6c 1b       	sub	r22, r28
    1934:	7d 0b       	sbc	r23, r29
    1936:	4a e0       	ldi	r20, 0x0A	; 10
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	8e e9       	ldi	r24, 0x9E	; 158
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	0e 94 b4 1b 	call	0x3768	; 0x3768 <_ZN5Print7printlnEji>
    1942:	c3 01       	movw	r24, r6
    1944:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN13Adafruit_FONA9HTTP_termEv>
    1948:	81 2f       	mov	r24, r17
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	4f 90       	pop	r4
    196a:	3f 90       	pop	r3
    196c:	2f 90       	pop	r2
    196e:	08 95       	ret

00001970 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	ec 01       	movw	r28, r24
    1984:	6a 01       	movw	r12, r20
    1986:	59 01       	movw	r10, r18
    1988:	10 2f       	mov	r17, r16
    198a:	0e 2d       	mov	r16, r14
    198c:	44 ef       	ldi	r20, 0xF4	; 244
    198e:	51 e0       	ldi	r21, 0x01	; 1
    1990:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1994:	21 2f       	mov	r18, r17
    1996:	a5 01       	movw	r20, r10
    1998:	b6 01       	movw	r22, r12
    199a:	ce 01       	movw	r24, r28
    199c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    19a0:	18 2f       	mov	r17, r24
    19a2:	88 23       	and	r24, r24
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	64 ef       	ldi	r22, 0xF4	; 244
    19aa:	71 e0       	ldi	r23, 0x01	; 1
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA8readlineEjb>
    19b2:	81 2f       	mov	r24, r17
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	cf 90       	pop	r12
    19c2:	bf 90       	pop	r11
    19c4:	af 90       	pop	r10
    19c6:	08 95       	ret

000019c8 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    19c8:	ef 92       	push	r14
    19ca:	0f 93       	push	r16
    19cc:	9b 01       	movw	r18, r22
    19ce:	ee 24       	eor	r14, r14
    19d0:	e3 94       	inc	r14
    19d2:	0c e2       	ldi	r16, 0x2C	; 44
    19d4:	4a e0       	ldi	r20, 0x0A	; 10
    19d6:	53 e0       	ldi	r21, 0x03	; 3
    19d8:	63 e0       	ldi	r22, 0x03	; 3
    19da:	73 e0       	ldi	r23, 0x03	; 3
    19dc:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    19e0:	0f 91       	pop	r16
    19e2:	ef 90       	pop	r14
    19e4:	08 95       	ret

000019e6 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    19e6:	cf 92       	push	r12
    19e8:	df 92       	push	r13
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	28 97       	sbiw	r28, 0x08	; 8
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1a08:	18 86       	std	Y+8, r1	; 0x08
    1a0a:	1f 82       	std	Y+7, r1	; 0x07
    1a0c:	1e 82       	std	Y+6, r1	; 0x06
    1a0e:	1d 82       	std	Y+5, r1	; 0x05
    1a10:	1c 82       	std	Y+4, r1	; 0x04
    1a12:	1b 82       	std	Y+3, r1	; 0x03
    1a14:	1a 82       	std	Y+2, r1	; 0x02
    1a16:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1a18:	e1 2c       	mov	r14, r1
    1a1a:	0c e2       	ldi	r16, 0x2C	; 44
    1a1c:	9e 01       	movw	r18, r28
    1a1e:	29 5f       	subi	r18, 0xF9	; 249
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	4c ef       	ldi	r20, 0xFC	; 252
    1a24:	52 e0       	ldi	r21, 0x02	; 2
    1a26:	65 ef       	ldi	r22, 0xF5	; 245
    1a28:	72 e0       	ldi	r23, 0x02	; 2
    1a2a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a2e:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1a30:	ee 24       	eor	r14, r14
    1a32:	e3 94       	inc	r14
    1a34:	9e 01       	movw	r18, r28
    1a36:	2b 5f       	subi	r18, 0xFB	; 251
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	4e ee       	ldi	r20, 0xEE	; 238
    1a3c:	52 e0       	ldi	r21, 0x02	; 2
    1a3e:	67 ee       	ldi	r22, 0xE7	; 231
    1a40:	72 e0       	ldi	r23, 0x02	; 2
    1a42:	c6 01       	movw	r24, r12
    1a44:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	f8 26       	eor	r15, r24
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1a52:	ff 24       	eor	r15, r15
    1a54:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1a56:	e1 2c       	mov	r14, r1
    1a58:	0c e2       	ldi	r16, 0x2C	; 44
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2d 5f       	subi	r18, 0xFD	; 253
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	4f ed       	ldi	r20, 0xDF	; 223
    1a62:	52 e0       	ldi	r21, 0x02	; 2
    1a64:	66 ed       	ldi	r22, 0xD6	; 214
    1a66:	72 e0       	ldi	r23, 0x02	; 2
    1a68:	c6 01       	movw	r24, r12
    1a6a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a6e:	88 23       	and	r24, r24
    1a70:	11 f0       	breq	.+4      	; 0x1a76 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1a72:	1b 81       	ldd	r17, Y+3	; 0x03
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a76:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1a78:	ee 24       	eor	r14, r14
    1a7a:	e3 94       	inc	r14
    1a7c:	0c e2       	ldi	r16, 0x2C	; 44
    1a7e:	9e 01       	movw	r18, r28
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	4e ec       	ldi	r20, 0xCE	; 206
    1a86:	52 e0       	ldi	r21, 0x02	; 2
    1a88:	65 ec       	ldi	r22, 0xC5	; 197
    1a8a:	72 e0       	ldi	r23, 0x02	; 2
    1a8c:	c6 01       	movw	r24, r12
    1a8e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a92:	81 11       	cpse	r24, r1
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1a96:	91 2f       	mov	r25, r17
    1a98:	90 62       	ori	r25, 0x20	; 32
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1a9c:	99 81       	ldd	r25, Y+1	; 0x01
    1a9e:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1aa0:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1aa4:	8f 2d       	mov	r24, r15
    1aa6:	28 96       	adiw	r28, 0x08	; 8
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	08 95       	ret

00001ac4 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	10 82       	st	Z, r1
    1ac8:	12 82       	std	Z+2, r1	; 0x02
    1aca:	11 82       	std	Z+1, r1	; 0x01
    1acc:	13 82       	std	Z+3, r1	; 0x03
    1ace:	14 82       	std	Z+4, r1	; 0x04
    1ad0:	15 82       	std	Z+5, r1	; 0x05
    1ad2:	16 82       	std	Z+6, r1	; 0x06
    1ad4:	17 82       	std	Z+7, r1	; 0x07
    1ad6:	12 86       	std	Z+10, r1	; 0x0a
    1ad8:	11 86       	std	Z+9, r1	; 0x09
    1ada:	14 86       	std	Z+12, r1	; 0x0c
    1adc:	13 86       	std	Z+11, r1	; 0x0b
    1ade:	08 95       	ret

00001ae0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1ae0:	2a e0       	ldi	r18, 0x0A	; 10
    1ae2:	82 9f       	mul	r24, r18
    1ae4:	c0 01       	movw	r24, r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	09 96       	adiw	r24, 0x09	; 9
    1aea:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <_ZN7Helpers14base64_enc_lenEi>

00001aee <_ZN10GsmPayload16createRawPayloadEPh>:
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	29 e0       	ldi	r18, 0x09	; 9
    1af8:	fe 01       	movw	r30, r28
    1afa:	db 01       	movw	r26, r22
    1afc:	01 90       	ld	r0, Z+
    1afe:	0d 92       	st	X+, r0
    1b00:	2a 95       	dec	r18
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1b04:	4b 81       	ldd	r20, Y+3	; 0x03
    1b06:	2a e0       	ldi	r18, 0x0A	; 10
    1b08:	42 9f       	mul	r20, r18
    1b0a:	a0 01       	movw	r20, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	09 96       	adiw	r24, 0x09	; 9
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	0c 94 f1 23 	jmp	0x47e2	; 0x47e2 <memcpy>

00001b1c <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	6b 01       	movw	r12, r22
    1b36:	ed b6       	in	r14, 0x3d	; 61
    1b38:	fe b6       	in	r15, 0x3e	; 62
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	03 81       	ldd	r16, Z+3	; 0x03
    1b3e:	fa e0       	ldi	r31, 0x0A	; 10
    1b40:	0f 9f       	mul	r16, r31
    1b42:	80 01       	movw	r16, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	07 5f       	subi	r16, 0xF7	; 247
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	2d b7       	in	r18, 0x3d	; 61
    1b4c:	3e b7       	in	r19, 0x3e	; 62
    1b4e:	20 1b       	sub	r18, r16
    1b50:	31 0b       	sbc	r19, r17
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	3e bf       	out	0x3e, r19	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	2d bf       	out	0x3d, r18	; 61
    1b5c:	ed b7       	in	r30, 0x3d	; 61
    1b5e:	fe b7       	in	r31, 0x3e	; 62
    1b60:	31 96       	adiw	r30, 0x01	; 1
    1b62:	5f 01       	movw	r10, r30
    1b64:	bf 01       	movw	r22, r30
    1b66:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN10GsmPayload16createRawPayloadEPh>
    1b6a:	a8 01       	movw	r20, r16
    1b6c:	b5 01       	movw	r22, r10
    1b6e:	c6 01       	movw	r24, r12
    1b70:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN7Helpers13base64_encodeEPcPhi>
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	fe be       	out	0x3e, r15	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	ed be       	out	0x3d, r14	; 61
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	bf 90       	pop	r11
    1b90:	af 90       	pop	r10
    1b92:	08 95       	ret

00001b94 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1b94:	fc 01       	movw	r30, r24
    1b96:	74 87       	std	Z+12, r23	; 0x0c
    1b98:	63 87       	std	Z+11, r22	; 0x0b
    1b9a:	43 83       	std	Z+3, r20	; 0x03
    1b9c:	08 95       	ret

00001b9e <_ZN10GsmPayload11setModuleIdEh>:
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	60 83       	st	Z, r22
    1ba2:	08 95       	ret

00001ba4 <_ZN10GsmPayload13getBootNumberEv>:
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	81 81       	ldd	r24, Z+1	; 0x01
    1ba8:	92 81       	ldd	r25, Z+2	; 0x02
    1baa:	08 95       	ret

00001bac <_ZN10GsmPayload13setBootNumberEj>:
    1bac:	fc 01       	movw	r30, r24
    1bae:	72 83       	std	Z+2, r23	; 0x02
    1bb0:	61 83       	std	Z+1, r22	; 0x01
    1bb2:	08 95       	ret

00001bb4 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	45 83       	std	Z+5, r20	; 0x05
    1bb8:	56 83       	std	Z+6, r21	; 0x06
    1bba:	67 83       	std	Z+7, r22	; 0x07
    1bbc:	70 87       	std	Z+8, r23	; 0x08
    1bbe:	08 95       	ret

00001bc0 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	ec 01       	movw	r28, r24
    1bc6:	6b e0       	ldi	r22, 0x0B	; 11
    1bc8:	74 e0       	ldi	r23, 0x04	; 4
    1bca:	8e e9       	ldi	r24, 0x9E	; 158
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1bd2:	4a e0       	ldi	r20, 0x0A	; 10
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	68 81       	ld	r22, Y
    1bd8:	8e e9       	ldi	r24, 0x9E	; 158
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN5Print5printEhi>
    1be0:	67 e0       	ldi	r22, 0x07	; 7
    1be2:	74 e0       	ldi	r23, 0x04	; 4
    1be4:	8e e9       	ldi	r24, 0x9E	; 158
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	74 e0       	ldi	r23, 0x04	; 4
    1bf0:	8e e9       	ldi	r24, 0x9E	; 158
    1bf2:	93 e0       	ldi	r25, 0x03	; 3
    1bf4:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1bf8:	4a e0       	ldi	r20, 0x0A	; 10
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	69 81       	ldd	r22, Y+1	; 0x01
    1bfe:	8e e9       	ldi	r24, 0x9E	; 158
    1c00:	93 e0       	ldi	r25, 0x03	; 3
    1c02:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN5Print5printEhi>
    1c06:	6e ef       	ldi	r22, 0xFE	; 254
    1c08:	73 e0       	ldi	r23, 0x03	; 3
    1c0a:	8e e9       	ldi	r24, 0x9E	; 158
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1c12:	69 ee       	ldi	r22, 0xE9	; 233
    1c14:	73 e0       	ldi	r23, 0x03	; 3
    1c16:	8e e9       	ldi	r24, 0x9E	; 158
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1c1e:	6b 81       	ldd	r22, Y+3	; 0x03
    1c20:	63 70       	andi	r22, 0x03	; 3
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	4a e0       	ldi	r20, 0x0A	; 10
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	8e e9       	ldi	r24, 0x9E	; 158
    1c2a:	93 e0       	ldi	r25, 0x03	; 3
    1c2c:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print5printEii>
    1c30:	6f ed       	ldi	r22, 0xDF	; 223
    1c32:	73 e0       	ldi	r23, 0x03	; 3
    1c34:	8e e9       	ldi	r24, 0x9E	; 158
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1c3c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c3e:	6c 71       	andi	r22, 0x1C	; 28
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	75 95       	asr	r23
    1c44:	67 95       	ror	r22
    1c46:	75 95       	asr	r23
    1c48:	67 95       	ror	r22
    1c4a:	4a e0       	ldi	r20, 0x0A	; 10
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	8e e9       	ldi	r24, 0x9E	; 158
    1c50:	93 e0       	ldi	r25, 0x03	; 3
    1c52:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print5printEii>
    1c56:	66 ed       	ldi	r22, 0xD6	; 214
    1c58:	73 e0       	ldi	r23, 0x03	; 3
    1c5a:	8e e9       	ldi	r24, 0x9E	; 158
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1c62:	6b 81       	ldd	r22, Y+3	; 0x03
    1c64:	65 fb       	bst	r22, 5
    1c66:	66 27       	eor	r22, r22
    1c68:	60 f9       	bld	r22, 0
    1c6a:	4a e0       	ldi	r20, 0x0A	; 10
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	8e e9       	ldi	r24, 0x9E	; 158
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print5printEii>
    1c78:	62 ed       	ldi	r22, 0xD2	; 210
    1c7a:	73 e0       	ldi	r23, 0x03	; 3
    1c7c:	8e e9       	ldi	r24, 0x9E	; 158
    1c7e:	93 e0       	ldi	r25, 0x03	; 3
    1c80:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1c84:	65 ec       	ldi	r22, 0xC5	; 197
    1c86:	73 e0       	ldi	r23, 0x03	; 3
    1c88:	8e e9       	ldi	r24, 0x9E	; 158
    1c8a:	93 e0       	ldi	r25, 0x03	; 3
    1c8c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1c90:	4a e0       	ldi	r20, 0x0A	; 10
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	6a 81       	ldd	r22, Y+2	; 0x02
    1c96:	8e e9       	ldi	r24, 0x9E	; 158
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <_ZN5Print7printlnEhi>

00001ca2 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	22 81       	ldd	r18, Z+2	; 0x02
    1ca6:	21 11       	cpse	r18, r1
    1ca8:	06 c0       	rjmp	.+12     	; 0x1cb6 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1caa:	90 81       	ld	r25, Z
    1cac:	93 36       	cpi	r25, 0x63	; 99
    1cae:	19 f0       	breq	.+6      	; 0x1cb6 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	97 30       	cpi	r25, 0x07	; 7
    1cb4:	08 f4       	brcc	.+2      	; 0x1cb8 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	08 95       	ret

00001cba <_ZN7Helpers15printSensorDataEP10SensorData>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	6d eb       	ldi	r22, 0xBD	; 189
    1cc2:	73 e0       	ldi	r23, 0x03	; 3
    1cc4:	8e e9       	ldi	r24, 0x9E	; 158
    1cc6:	93 e0       	ldi	r25, 0x03	; 3
    1cc8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1ccc:	69 81       	ldd	r22, Y+1	; 0x01
    1cce:	7a 81       	ldd	r23, Y+2	; 0x02
    1cd0:	4a e0       	ldi	r20, 0x0A	; 10
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	8e e9       	ldi	r24, 0x9E	; 158
    1cd6:	93 e0       	ldi	r25, 0x03	; 3
    1cd8:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    1cdc:	69 eb       	ldi	r22, 0xB9	; 185
    1cde:	73 e0       	ldi	r23, 0x03	; 3
    1ce0:	8e e9       	ldi	r24, 0x9E	; 158
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1ce8:	63 eb       	ldi	r22, 0xB3	; 179
    1cea:	73 e0       	ldi	r23, 0x03	; 3
    1cec:	8e e9       	ldi	r24, 0x9E	; 158
    1cee:	93 e0       	ldi	r25, 0x03	; 3
    1cf0:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1cf4:	6b 81       	ldd	r22, Y+3	; 0x03
    1cf6:	7c 81       	ldd	r23, Y+4	; 0x04
    1cf8:	4a e0       	ldi	r20, 0x0A	; 10
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	8e e9       	ldi	r24, 0x9E	; 158
    1cfe:	93 e0       	ldi	r25, 0x03	; 3
    1d00:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    1d04:	6f ea       	ldi	r22, 0xAF	; 175
    1d06:	73 e0       	ldi	r23, 0x03	; 3
    1d08:	8e e9       	ldi	r24, 0x9E	; 158
    1d0a:	93 e0       	ldi	r25, 0x03	; 3
    1d0c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1d10:	66 ea       	ldi	r22, 0xA6	; 166
    1d12:	73 e0       	ldi	r23, 0x03	; 3
    1d14:	8e e9       	ldi	r24, 0x9E	; 158
    1d16:	93 e0       	ldi	r25, 0x03	; 3
    1d18:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1d1c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d1e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d20:	4a e0       	ldi	r20, 0x0A	; 10
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	8e e9       	ldi	r24, 0x9E	; 158
    1d26:	93 e0       	ldi	r25, 0x03	; 3
    1d28:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    1d2c:	62 ea       	ldi	r22, 0xA2	; 162
    1d2e:	73 e0       	ldi	r23, 0x03	; 3
    1d30:	8e e9       	ldi	r24, 0x9E	; 158
    1d32:	93 e0       	ldi	r25, 0x03	; 3
    1d34:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1d38:	6c e9       	ldi	r22, 0x9C	; 156
    1d3a:	73 e0       	ldi	r23, 0x03	; 3
    1d3c:	8e e9       	ldi	r24, 0x9E	; 158
    1d3e:	93 e0       	ldi	r25, 0x03	; 3
    1d40:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	4a e0       	ldi	r20, 0x0A	; 10
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	8e e9       	ldi	r24, 0x9E	; 158
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    1d54:	68 e9       	ldi	r22, 0x98	; 152
    1d56:	73 e0       	ldi	r23, 0x03	; 3
    1d58:	8e e9       	ldi	r24, 0x9E	; 158
    1d5a:	93 e0       	ldi	r25, 0x03	; 3
    1d5c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1d60:	61 e9       	ldi	r22, 0x91	; 145
    1d62:	73 e0       	ldi	r23, 0x03	; 3
    1d64:	8e e9       	ldi	r24, 0x9E	; 158
    1d66:	93 e0       	ldi	r25, 0x03	; 3
    1d68:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    1d6c:	4a e0       	ldi	r20, 0x0A	; 10
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	69 85       	ldd	r22, Y+9	; 0x09
    1d72:	8e e9       	ldi	r24, 0x9E	; 158
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <_ZN5Print7printlnEhi>

00001d7e <_ZN7Helpers12freeListSizeEv>:
    1d7e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    1d82:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	30 97       	sbiw	r30, 0x00	; 0
    1d8c:	49 f0       	breq	.+18     	; 0x1da0 <_ZN7Helpers12freeListSizeEv+0x22>
    1d8e:	02 96       	adiw	r24, 0x02	; 2
    1d90:	20 81       	ld	r18, Z
    1d92:	31 81       	ldd	r19, Z+1	; 0x01
    1d94:	82 0f       	add	r24, r18
    1d96:	93 1f       	adc	r25, r19
    1d98:	02 80       	ldd	r0, Z+2	; 0x02
    1d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d9c:	e0 2d       	mov	r30, r0
    1d9e:	f5 cf       	rjmp	.-22     	; 0x1d8a <_ZN7Helpers12freeListSizeEv+0xc>
    1da0:	08 95       	ret

00001da2 <_ZN7Helpers10freeMemoryEv>:
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <_ZN7Helpers10freeMemoryEv+0xa>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    1db4:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    1db8:	8e 01       	movw	r16, r28
    1dba:	0f 5f       	subi	r16, 0xFF	; 255
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <_ZN7Helpers10freeMemoryEv+0x2a>
    1dc2:	0c 58       	subi	r16, 0x8C	; 140
    1dc4:	14 40       	sbci	r17, 0x04	; 4
    1dc6:	1a 83       	std	Y+2, r17	; 0x02
    1dc8:	09 83       	std	Y+1, r16	; 0x01
    1dca:	0a c0       	rjmp	.+20     	; 0x1de0 <_ZN7Helpers10freeMemoryEv+0x3e>
    1dcc:	08 1b       	sub	r16, r24
    1dce:	19 0b       	sbc	r17, r25
    1dd0:	1a 83       	std	Y+2, r17	; 0x02
    1dd2:	09 83       	std	Y+1, r16	; 0x01
    1dd4:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN7Helpers12freeListSizeEv>
    1dd8:	80 0f       	add	r24, r16
    1dda:	91 1f       	adc	r25, r17
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	08 95       	ret

00001df2 <_ZN7Helpers14base64_enc_lenEi>:
    1df2:	9c 01       	movw	r18, r24
    1df4:	2e 5f       	subi	r18, 0xFE	; 254
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	e3 e0       	ldi	r30, 0x03	; 3
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	bf 01       	movw	r22, r30
    1e00:	0e 94 65 21 	call	0x42ca	; 0x42ca <__divmodhi4>
    1e04:	a9 01       	movw	r20, r18
    1e06:	48 1b       	sub	r20, r24
    1e08:	59 0b       	sbc	r21, r25
    1e0a:	ca 01       	movw	r24, r20
    1e0c:	bf 01       	movw	r22, r30
    1e0e:	0e 94 65 21 	call	0x42ca	; 0x42ca <__divmodhi4>
    1e12:	cb 01       	movw	r24, r22
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	08 95       	ret

00001e20 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1e20:	dc 01       	movw	r26, r24
    1e22:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1e24:	80 81       	ld	r24, Z
    1e26:	86 95       	lsr	r24
    1e28:	86 95       	lsr	r24
    1e2a:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1e2c:	80 81       	ld	r24, Z
    1e2e:	83 70       	andi	r24, 0x03	; 3
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	92 95       	swap	r25
    1e34:	9f 70       	andi	r25, 0x0F	; 15
    1e36:	20 e1       	ldi	r18, 0x10	; 16
    1e38:	82 9f       	mul	r24, r18
    1e3a:	90 0d       	add	r25, r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	11 96       	adiw	r26, 0x01	; 1
    1e40:	9c 93       	st	X, r25
    1e42:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	9f 70       	andi	r25, 0x0F	; 15
    1e48:	99 0f       	add	r25, r25
    1e4a:	99 0f       	add	r25, r25
    1e4c:	22 81       	ldd	r18, Z+2	; 0x02
    1e4e:	22 95       	swap	r18
    1e50:	26 95       	lsr	r18
    1e52:	26 95       	lsr	r18
    1e54:	23 70       	andi	r18, 0x03	; 3
    1e56:	92 0f       	add	r25, r18
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	9c 93       	st	X, r25
    1e5c:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	8f 73       	andi	r24, 0x3F	; 63
    1e62:	13 96       	adiw	r26, 0x03	; 3
    1e64:	8c 93       	st	X, r24
    1e66:	08 95       	ret

00001e68 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1e68:	6f 92       	push	r6
    1e6a:	7f 92       	push	r7
    1e6c:	8f 92       	push	r8
    1e6e:	9f 92       	push	r9
    1e70:	af 92       	push	r10
    1e72:	bf 92       	push	r11
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	27 97       	sbiw	r28, 0x07	; 7
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	6c 01       	movw	r12, r24
    1e96:	5b 01       	movw	r10, r22
    1e98:	3b 01       	movw	r6, r22
    1e9a:	64 0e       	add	r6, r20
    1e9c:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1e9e:	e1 2c       	mov	r14, r1
    1ea0:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1ea2:	00 e0       	ldi	r16, 0x00	; 0
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1ea6:	4e 01       	movw	r8, r28
    1ea8:	85 e0       	ldi	r24, 0x05	; 5
    1eaa:	88 0e       	add	r8, r24
    1eac:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1eae:	6a 14       	cp	r6, r10
    1eb0:	7b 04       	cpc	r7, r11
    1eb2:	49 f1       	breq	.+82     	; 0x1f06 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	f5 01       	movw	r30, r10
    1eba:	21 91       	ld	r18, Z+
    1ebc:	5f 01       	movw	r10, r30
    1ebe:	f4 01       	movw	r30, r8
    1ec0:	e0 0f       	add	r30, r16
    1ec2:	f1 1f       	adc	r31, r17
    1ec4:	20 83       	st	Z, r18
		if(i == 3) {
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	11 f0       	breq	.+4      	; 0x1ed0 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1ecc:	8c 01       	movw	r16, r24
    1ece:	ef cf       	rjmp	.-34     	; 0x1eae <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1ed0:	b4 01       	movw	r22, r8
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z8a3_to_a4PhS_>
    1eda:	de 01       	movw	r26, r28
    1edc:	11 96       	adiw	r26, 0x01	; 1
    1ede:	c6 01       	movw	r24, r12
    1ee0:	8e 0d       	add	r24, r14
    1ee2:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1ee4:	ed 91       	ld	r30, X+
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	ef 5e       	subi	r30, 0xEF	; 239
    1eea:	fb 4f       	sbci	r31, 0xFB	; 251
    1eec:	24 91       	lpm	r18, Z
    1eee:	fc 01       	movw	r30, r24
    1ef0:	21 93       	st	Z+, r18
    1ef2:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1ef4:	a8 15       	cp	r26, r8
    1ef6:	b9 05       	cpc	r27, r9
    1ef8:	a9 f7       	brne	.-22     	; 0x1ee4 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1efa:	f4 e0       	ldi	r31, 0x04	; 4
    1efc:	ef 0e       	add	r14, r31
    1efe:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	e3 cf       	rjmp	.-58     	; 0x1ecc <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1f06:	01 15       	cp	r16, r1
    1f08:	11 05       	cpc	r17, r1
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1f0c:	3c c0       	rjmp	.+120    	; 0x1f86 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1f0e:	be 01       	movw	r22, r28
    1f10:	6b 5f       	subi	r22, 0xFB	; 251
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	fb 01       	movw	r30, r22
    1f16:	e0 0f       	add	r30, r16
    1f18:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1f1a:	cf 01       	movw	r24, r30
    1f1c:	86 1b       	sub	r24, r22
    1f1e:	97 0b       	sbc	r25, r23
    1f20:	03 97       	sbiw	r24, 0x03	; 3
    1f22:	14 f4       	brge	.+4      	; 0x1f28 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1f24:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1f26:	f9 cf       	rjmp	.-14     	; 0x1f1a <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1f28:	ce 01       	movw	r24, r28
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	5c 01       	movw	r10, r24
    1f2e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z8a3_to_a4PhS_>
    1f32:	c6 01       	movw	r24, r12
    1f34:	8e 0d       	add	r24, r14
    1f36:	9f 1d       	adc	r25, r15
    1f38:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1f3a:	ed 91       	ld	r30, X+
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	ef 5e       	subi	r30, 0xEF	; 239
    1f40:	fb 4f       	sbci	r31, 0xFB	; 251
    1f42:	24 91       	lpm	r18, Z
    1f44:	fc 01       	movw	r30, r24
    1f46:	21 93       	st	Z+, r18
    1f48:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1f4a:	9d 01       	movw	r18, r26
    1f4c:	2a 19       	sub	r18, r10
    1f4e:	3b 09       	sbc	r19, r11
    1f50:	02 17       	cp	r16, r18
    1f52:	13 07       	cpc	r17, r19
    1f54:	94 f7       	brge	.-28     	; 0x1f3a <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1f56:	ff ef       	ldi	r31, 0xFF	; 255
    1f58:	ef 1a       	sub	r14, r31
    1f5a:	ff 0a       	sbc	r15, r31
    1f5c:	e0 0e       	add	r14, r16
    1f5e:	f1 1e       	adc	r15, r17
    1f60:	f6 01       	movw	r30, r12
    1f62:	ee 0d       	add	r30, r14
    1f64:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f66:	0c 19       	sub	r16, r12
    1f68:	1d 09       	sbc	r17, r13
    1f6a:	0e 19       	sub	r16, r14
    1f6c:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1f6e:	8d e3       	ldi	r24, 0x3D	; 61
    1f70:	7f 01       	movw	r14, r30
    1f72:	ec 18       	sub	r14, r12
    1f74:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f76:	98 01       	movw	r18, r16
    1f78:	2e 0f       	add	r18, r30
    1f7a:	3f 1f       	adc	r19, r31
    1f7c:	23 30       	cpi	r18, 0x03	; 3
    1f7e:	31 05       	cpc	r19, r1
    1f80:	14 f4       	brge	.+4      	; 0x1f86 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1f82:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1f84:	f5 cf       	rjmp	.-22     	; 0x1f70 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1f86:	f6 01       	movw	r30, r12
    1f88:	ee 0d       	add	r30, r14
    1f8a:	ff 1d       	adc	r31, r15
    1f8c:	10 82       	st	Z, r1
	
	return encLen;
}
    1f8e:	c7 01       	movw	r24, r14
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	27 96       	adiw	r28, 0x07	; 7
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	df 90       	pop	r13
    1fac:	cf 90       	pop	r12
    1fae:	bf 90       	pop	r11
    1fb0:	af 90       	pop	r10
    1fb2:	9f 90       	pop	r9
    1fb4:	8f 90       	pop	r8
    1fb6:	7f 90       	pop	r7
    1fb8:	6f 90       	pop	r6
    1fba:	08 95       	ret

00001fbc <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	0e 94 77 1d 	call	0x3aee	; 0x3aee <pinMode>
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	85 e0       	ldi	r24, 0x05	; 5
    1fc8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
    1fcc:	68 eb       	ldi	r22, 0xB8	; 184
    1fce:	7b e0       	ldi	r23, 0x0B	; 11
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	8d e0       	ldi	r24, 0x0D	; 13
    1fdc:	0e 94 77 1d 	call	0x3aee	; 0x3aee <pinMode>
    1fe0:	26 e0       	ldi	r18, 0x06	; 6
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	55 e2       	ldi	r21, 0x25	; 37
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	8e e9       	ldi	r24, 0x9E	; 158
    1fec:	93 e0       	ldi	r25, 0x03	; 3
    1fee:	0e 94 85 19 	call	0x330a	; 0x330a <_ZN14HardwareSerial5beginEmh>
    1ff2:	61 eb       	ldi	r22, 0xB1	; 177
    1ff4:	76 e0       	ldi	r23, 0x06	; 6
    1ff6:	8e e9       	ldi	r24, 0x9E	; 158
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ffe:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2002:	84 60       	ori	r24, 0x04	; 4
    2004:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
    2008:	08 95       	ret

0000200a <_Z21ensureFonaInitialisedb>:
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	2c 97       	sbiw	r28, 0x0c	; 12
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	18 2f       	mov	r17, r24
    2024:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2028:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__initState+0xa>
    2032:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__initState+0x9>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__initState+0x2>
    203c:	89 eb       	ldi	r24, 0xB9	; 185
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__initState+0x1>
    2044:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__initState>
    2048:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    204c:	81 11       	cpse	r24, r1
    204e:	34 c0       	rjmp	.+104    	; 0x20b8 <_Z21ensureFonaInitialisedb+0xae>
    2050:	6c e9       	ldi	r22, 0x9C	; 156
    2052:	76 e0       	ldi	r23, 0x06	; 6
    2054:	8e e9       	ldi	r24, 0x9E	; 158
    2056:	93 e0       	ldi	r25, 0x03	; 3
    2058:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    205c:	42 e0       	ldi	r20, 0x02	; 2
    205e:	63 e0       	ldi	r22, 0x03	; 3
    2060:	89 eb       	ldi	r24, 0xB9	; 185
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	0e 94 87 07 	call	0xf0e	; 0xf0e <_ZN13Adafruit_FONA5beginEhh>
    2068:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__initState+0x3>
    206c:	8e ea       	ldi	r24, 0xAE	; 174
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_ZN12RmMemManager11getModuleIdEv>
    2074:	08 2f       	mov	r16, r24
    2076:	69 e3       	ldi	r22, 0x39	; 57
    2078:	71 e0       	ldi	r23, 0x01	; 1
    207a:	ce 01       	movw	r24, r28
    207c:	07 96       	adiw	r24, 0x07	; 7
    207e:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <_ZN6StringC1EPKc>
    2082:	60 2f       	mov	r22, r16
    2084:	ce 01       	movw	r24, r28
    2086:	07 96       	adiw	r24, 0x07	; 7
    2088:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <_ZN6String6concatEh>
    208c:	be 01       	movw	r22, r28
    208e:	69 5f       	subi	r22, 0xF9	; 249
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	ce 01       	movw	r24, r28
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZN6StringC1ERKS_>
    209a:	be 01       	movw	r22, r28
    209c:	6f 5f       	subi	r22, 0xFF	; 255
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	89 eb       	ldi	r24, 0xB9	; 185
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN13Adafruit_FONA12setUserAgentE6String>
    20a8:	ce 01       	movw	r24, r28
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN6StringD1Ev>
    20b0:	ce 01       	movw	r24, r28
    20b2:	07 96       	adiw	r24, 0x07	; 7
    20b4:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN6StringD1Ev>
    20b8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    20bc:	83 50       	subi	r24, 0x03	; 3
    20be:	82 30       	cpi	r24, 0x02	; 2
    20c0:	b0 f4       	brcc	.+44     	; 0x20ee <_Z21ensureFonaInitialisedb+0xe4>
    20c2:	61 e8       	ldi	r22, 0x81	; 129
    20c4:	76 e0       	ldi	r23, 0x06	; 6
    20c6:	8e e9       	ldi	r24, 0x9E	; 158
    20c8:	93 e0       	ldi	r25, 0x03	; 3
    20ca:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    20ce:	67 e4       	ldi	r22, 0x47	; 71
    20d0:	71 e0       	ldi	r23, 0x01	; 1
    20d2:	8e e9       	ldi	r24, 0x9E	; 158
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    20da:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <__initState+0x3>
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	4a e0       	ldi	r20, 0x0A	; 10
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	8e e9       	ldi	r24, 0x9E	; 158
    20e6:	93 e0       	ldi	r25, 0x03	; 3
    20e8:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEii>
    20ec:	65 c0       	rjmp	.+202    	; 0x21b8 <_Z21ensureFonaInitialisedb+0x1ae>
    20ee:	11 23       	and	r17, r17
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <_Z21ensureFonaInitialisedb+0xea>
    20f2:	b1 c0       	rjmp	.+354    	; 0x2256 <_Z21ensureFonaInitialisedb+0x24c>
    20f4:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    20f8:	81 11       	cpse	r24, r1
    20fa:	49 c0       	rjmp	.+146    	; 0x218e <_Z21ensureFonaInitialisedb+0x184>
    20fc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2100:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    2104:	6a e0       	ldi	r22, 0x0A	; 10
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__udivmodhi4>
    210c:	89 2b       	or	r24, r25
    210e:	19 f0       	breq	.+6      	; 0x2116 <_Z21ensureFonaInitialisedb+0x10c>
    2110:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2114:	3c c0       	rjmp	.+120    	; 0x218e <_Z21ensureFonaInitialisedb+0x184>
    2116:	64 e6       	ldi	r22, 0x64	; 100
    2118:	76 e0       	ldi	r23, 0x06	; 6
    211a:	8e e9       	ldi	r24, 0x9E	; 158
    211c:	93 e0       	ldi	r25, 0x03	; 3
    211e:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	89 eb       	ldi	r24, 0xB9	; 185
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN13Adafruit_FONA10enableGPRSEb>
    212c:	18 2f       	mov	r17, r24
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	81 0f       	add	r24, r17
    2132:	82 30       	cpi	r24, 0x02	; 2
    2134:	20 f1       	brcs	.+72     	; 0x217e <_Z21ensureFonaInitialisedb+0x174>
    2136:	6c e4       	ldi	r22, 0x4C	; 76
    2138:	76 e0       	ldi	r23, 0x06	; 6
    213a:	8e e9       	ldi	r24, 0x9E	; 158
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    2142:	67 e4       	ldi	r22, 0x47	; 71
    2144:	71 e0       	ldi	r23, 0x01	; 1
    2146:	8e e9       	ldi	r24, 0x9E	; 158
    2148:	93 e0       	ldi	r25, 0x03	; 3
    214a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    214e:	61 2f       	mov	r22, r17
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	4a e0       	ldi	r20, 0x0A	; 10
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	8e e9       	ldi	r24, 0x9E	; 158
    2158:	93 e0       	ldi	r25, 0x03	; 3
    215a:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEii>
    215e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2162:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    2166:	cc 97       	sbiw	r24, 0x3c	; 60
    2168:	28 f4       	brcc	.+10     	; 0x2174 <_Z21ensureFonaInitialisedb+0x16a>
    216a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    216e:	66 e2       	ldi	r22, 0x26	; 38
    2170:	76 e0       	ldi	r23, 0x06	; 6
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <_Z21ensureFonaInitialisedb+0x17c>
    2174:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    2178:	63 e0       	ldi	r22, 0x03	; 3
    217a:	76 e0       	ldi	r23, 0x06	; 6
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <_Z21ensureFonaInitialisedb+0x17c>
    217e:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    2182:	63 ee       	ldi	r22, 0xE3	; 227
    2184:	75 e0       	ldi	r23, 0x05	; 5
    2186:	8e e9       	ldi	r24, 0x9E	; 158
    2188:	93 e0       	ldi	r25, 0x03	; 3
    218a:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    218e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    2192:	81 50       	subi	r24, 0x01	; 1
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	80 f4       	brcc	.+32     	; 0x21b8 <_Z21ensureFonaInitialisedb+0x1ae>
    2198:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    219c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__initState+0xc>
    21a6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__initState+0xb>
    21aa:	83 ea       	ldi	r24, 0xA3	; 163
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    21b2:	88 23       	and	r24, r24
    21b4:	31 f0       	breq	.+12     	; 0x21c2 <_Z21ensureFonaInitialisedb+0x1b8>
    21b6:	4f c0       	rjmp	.+158    	; 0x2256 <_Z21ensureFonaInitialisedb+0x24c>
    21b8:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__initState+0x1>
    21bc:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__initState>
    21c0:	4a c0       	rjmp	.+148    	; 0x2256 <_Z21ensureFonaInitialisedb+0x24c>
    21c2:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    21c6:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    21ca:	6a e0       	ldi	r22, 0x0A	; 10
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__udivmodhi4>
    21d2:	89 2b       	or	r24, r25
    21d4:	19 f0       	breq	.+6      	; 0x21dc <_Z21ensureFonaInitialisedb+0x1d2>
    21d6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    21da:	3d c0       	rjmp	.+122    	; 0x2256 <_Z21ensureFonaInitialisedb+0x24c>
    21dc:	68 ec       	ldi	r22, 0xC8	; 200
    21de:	75 e0       	ldi	r23, 0x05	; 5
    21e0:	8e e9       	ldi	r24, 0x9E	; 158
    21e2:	93 e0       	ldi	r25, 0x03	; 3
    21e4:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    21e8:	89 eb       	ldi	r24, 0xB9	; 185
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN13Adafruit_FONA7getRSSIEv>
    21f0:	69 83       	std	Y+1, r22	; 0x01
    21f2:	7a 83       	std	Y+2, r23	; 0x02
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	ce 01       	movw	r24, r28
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    2200:	ce 01       	movw	r24, r28
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    2208:	81 11       	cpse	r24, r1
    220a:	13 c0       	rjmp	.+38     	; 0x2232 <_Z21ensureFonaInitialisedb+0x228>
    220c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    2210:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    2214:	8c 32       	cpi	r24, 0x2C	; 44
    2216:	91 40       	sbci	r25, 0x01	; 1
    2218:	48 f4       	brcc	.+18     	; 0x222c <_Z21ensureFonaInitialisedb+0x222>
    221a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    221e:	69 e9       	ldi	r22, 0x99	; 153
    2220:	75 e0       	ldi	r23, 0x05	; 5
    2222:	8e e9       	ldi	r24, 0x9E	; 158
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    222a:	15 c0       	rjmp	.+42     	; 0x2256 <_Z21ensureFonaInitialisedb+0x24c>
    222c:	61 e6       	ldi	r22, 0x61	; 97
    222e:	75 e0       	ldi	r23, 0x05	; 5
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <_Z21ensureFonaInitialisedb+0x22c>
    2232:	6b e3       	ldi	r22, 0x3B	; 59
    2234:	75 e0       	ldi	r23, 0x05	; 5
    2236:	8e e9       	ldi	r24, 0x9E	; 158
    2238:	93 e0       	ldi	r25, 0x03	; 3
    223a:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	ab 81       	ldd	r26, Y+3	; 0x03
    2244:	bc 81       	ldd	r27, Y+4	; 0x04
    2246:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__initState+0x5>
    224a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__initState+0x6>
    224e:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__initState+0x7>
    2252:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__initState+0x8>
    2256:	8e e9       	ldi	r24, 0x9E	; 158
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	2c 96       	adiw	r28, 0x0c	; 12
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	08 95       	ret

00002270 <_Z15switchOffSystemv>:
    2270:	69 e4       	ldi	r22, 0x49	; 73
    2272:	71 e0       	ldi	r23, 0x01	; 1
    2274:	8e e9       	ldi	r24, 0x9E	; 158
    2276:	93 e0       	ldi	r25, 0x03	; 3
    2278:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	85 e0       	ldi	r24, 0x05	; 5
    2280:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
    2284:	68 eb       	ldi	r22, 0xB8	; 184
    2286:	7b e0       	ldi	r23, 0x0B	; 11
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <delay>

00002290 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	2a 97       	sbiw	r28, 0x0a	; 10
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    22a4:	68 e2       	ldi	r22, 0x28	; 40
    22a6:	75 e0       	ldi	r23, 0x05	; 5
    22a8:	8e e9       	ldi	r24, 0x9E	; 158
    22aa:	93 e0       	ldi	r25, 0x03	; 3
    22ac:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	1b 82       	std	Y+3, r1	; 0x03
    22b6:	1a 82       	std	Y+2, r1	; 0x02
    22b8:	1d 82       	std	Y+5, r1	; 0x05
    22ba:	1c 82       	std	Y+4, r1	; 0x04
    22bc:	1f 82       	std	Y+7, r1	; 0x07
    22be:	1e 82       	std	Y+6, r1	; 0x06
    22c0:	19 86       	std	Y+9, r1	; 0x09
    22c2:	18 86       	std	Y+8, r1	; 0x08
    22c4:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    22c6:	be 01       	movw	r22, r28
    22c8:	6f 5f       	subi	r22, 0xFF	; 255
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	8c ea       	ldi	r24, 0xAC	; 172
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	2a 96       	adiw	r28, 0x0a	; 10
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <_Z17createEncodedDataPcPhhP14DailyCycleData>:

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
    22e8:	5f 92       	push	r5
    22ea:	6f 92       	push	r6
    22ec:	7f 92       	push	r7
    22ee:	8f 92       	push	r8
    22f0:	9f 92       	push	r9
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	2d 97       	sbiw	r28, 0x0d	; 13
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	4c 01       	movw	r8, r24
    2318:	5b 01       	movw	r10, r22
    231a:	54 2e       	mov	r5, r20
    231c:	69 01       	movw	r12, r18
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
	payload.setRSSI(cycleData->RSSI);
	payload.createEncodedPayload(encodedOutput);
	
	cycleData->BootNo = payload.getBootNumber();
}
    231e:	6d b6       	in	r6, 0x3d	; 61
    2320:	7e b6       	in	r7, 0x3e	; 62
}

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int16_t freeRAM = Helpers::freeMemory();
    2322:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7Helpers10freeMemoryEv>
    2326:	7c 01       	movw	r14, r24
	int16_t minRAM = (sizeof(SensorData)*maxReadings)
    2328:	05 2d       	mov	r16, r5
    232a:	10 e0       	ldi	r17, 0x00	; 0
					+sizeof(GsmPayload)
					+100; //Buffer

	if (freeRAM < minRAM)
    232c:	2a e0       	ldi	r18, 0x0A	; 10
    232e:	52 9e       	mul	r5, r18
    2330:	c0 01       	movw	r24, r0
    2332:	11 24       	eor	r1, r1
    2334:	8f 58       	subi	r24, 0x8F	; 143
    2336:	9f 4f       	sbci	r25, 0xFF	; 255
    2338:	e8 16       	cp	r14, r24
    233a:	f9 06       	cpc	r15, r25
    233c:	34 f4       	brge	.+12     	; 0x234a <_Z17createEncodedDataPcPhhP14DailyCycleData+0x62>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    233e:	68 ef       	ldi	r22, 0xF8	; 248
    2340:	74 e0       	ldi	r23, 0x04	; 4
    2342:	8e e9       	ldi	r24, 0x9E	; 158
    2344:	93 e0       	ldi	r25, 0x03	; 3
    2346:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    234a:	67 e4       	ldi	r22, 0x47	; 71
    234c:	71 e0       	ldi	r23, 0x01	; 1
    234e:	8e e9       	ldi	r24, 0x9E	; 158
    2350:	93 e0       	ldi	r25, 0x03	; 3
    2352:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    2356:	4a e0       	ldi	r20, 0x0A	; 10
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	b7 01       	movw	r22, r14
    235c:	8e e9       	ldi	r24, 0x9E	; 158
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN5Print7printlnEii>
	
	SensorData sData[maxReadings];
    2364:	2a e0       	ldi	r18, 0x0A	; 10
    2366:	20 9f       	mul	r18, r16
    2368:	c0 01       	movw	r24, r0
    236a:	21 9f       	mul	r18, r17
    236c:	90 0d       	add	r25, r0
    236e:	11 24       	eor	r1, r1
    2370:	ed b7       	in	r30, 0x3d	; 61
    2372:	fe b7       	in	r31, 0x3e	; 62
    2374:	e8 1b       	sub	r30, r24
    2376:	f9 0b       	sbc	r31, r25
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	fe bf       	out	0x3e, r31	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	ed bf       	out	0x3d, r30	; 61
    2382:	2d b7       	in	r18, 0x3d	; 61
    2384:	3e b7       	in	r19, 0x3e	; 62
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	79 01       	movw	r14, r18
    238c:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	01 50       	subi	r16, 0x01	; 1
    2392:	11 09       	sbc	r17, r1
    2394:	60 f0       	brcs	.+24     	; 0x23ae <_Z17createEncodedDataPcPhhP14DailyCycleData+0xc6>
    2396:	80 83       	st	Z, r24
    2398:	12 82       	std	Z+2, r1	; 0x02
    239a:	11 82       	std	Z+1, r1	; 0x01
    239c:	14 82       	std	Z+4, r1	; 0x04
    239e:	13 82       	std	Z+3, r1	; 0x03
    23a0:	16 82       	std	Z+6, r1	; 0x06
    23a2:	15 82       	std	Z+5, r1	; 0x05
    23a4:	10 86       	std	Z+8, r1	; 0x08
    23a6:	17 82       	std	Z+7, r1	; 0x07
    23a8:	11 86       	std	Z+9, r1	; 0x09
    23aa:	3a 96       	adiw	r30, 0x0a	; 10
    23ac:	f1 cf       	rjmp	.-30     	; 0x2390 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xa8>
	*outputNumLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    23ae:	45 2d       	mov	r20, r5
    23b0:	b7 01       	movw	r22, r14
    23b2:	8e ea       	ldi	r24, 0xAE	; 174
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    23ba:	f5 01       	movw	r30, r10
    23bc:	80 83       	st	Z, r24
	
	GsmPayload payload;
    23be:	ce 01       	movw	r24, r28
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    23c6:	67 ee       	ldi	r22, 0xE7	; 231
    23c8:	ce 01       	movw	r24, r28
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    23d0:	61 e2       	ldi	r22, 0x21	; 33
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	ce 01       	movw	r24, r28
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
    23dc:	f5 01       	movw	r30, r10
    23de:	40 81       	ld	r20, Z
    23e0:	b7 01       	movw	r22, r14
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(cycleData->RSSI);
    23ea:	f6 01       	movw	r30, r12
    23ec:	45 81       	ldd	r20, Z+5	; 0x05
    23ee:	56 81       	ldd	r21, Z+6	; 0x06
    23f0:	67 81       	ldd	r22, Z+7	; 0x07
    23f2:	70 85       	ldd	r23, Z+8	; 0x08
    23f4:	ce 01       	movw	r24, r28
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    23fc:	b4 01       	movw	r22, r8
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN10GsmPayload20createEncodedPayloadEPc>
	
	cycleData->BootNo = payload.getBootNumber();
    2406:	ce 01       	movw	r24, r28
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_ZN10GsmPayload13getBootNumberEv>
    240e:	f6 01       	movw	r30, r12
    2410:	93 83       	std	Z+3, r25	; 0x03
    2412:	82 83       	std	Z+2, r24	; 0x02
}
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	7e be       	out	0x3e, r7	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	6d be       	out	0x3d, r6	; 61
    241e:	2d 96       	adiw	r28, 0x0d	; 13
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	df 90       	pop	r13
    2438:	cf 90       	pop	r12
    243a:	bf 90       	pop	r11
    243c:	af 90       	pop	r10
    243e:	9f 90       	pop	r9
    2440:	8f 90       	pop	r8
    2442:	7f 90       	pop	r7
    2444:	6f 90       	pop	r6
    2446:	5f 90       	pop	r5
    2448:	08 95       	ret

0000244a <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    244a:	2f 92       	push	r2
    244c:	3f 92       	push	r3
    244e:	4f 92       	push	r4
    2450:	5f 92       	push	r5
    2452:	6f 92       	push	r6
    2454:	7f 92       	push	r7
    2456:	8f 92       	push	r8
    2458:	9f 92       	push	r9
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	a4 97       	sbiw	r28, 0x24	; 36
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
	sendData.ResponseId = responseId;
		
	mem.appendDailyEntry(&sendData);
		
	return true;
}
    247e:	2d b6       	in	r2, 0x3d	; 61
    2480:	3e b6       	in	r3, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2482:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_sendDataLoopCount>
    2486:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_sendDataLoopCount+0x1>
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_sendDataLoopCount+0x1>
    2490:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	31 f4       	brne	.+12     	; 0x24a4 <_Z8sendDatav+0x5a>
		RM_LOGLN(F("Initialising Fona to send data"));
    2498:	69 ed       	ldi	r22, 0xD9	; 217
    249a:	74 e0       	ldi	r23, 0x04	; 4
    249c:	8e e9       	ldi	r24, 0x9E	; 158
    249e:	93 e0       	ldi	r25, 0x03	; 3
    24a0:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	INITIALISING_STATE* sendDataFona = ensureFonaInitialised(true);
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	0e 94 05 10 	call	0x200a	; 0x200a <_Z21ensureFonaInitialisedb>
    24aa:	fc 01       	movw	r30, r24
	
	if (!sendDataFona->isComplete) {
    24ac:	22 81       	ldd	r18, Z+2	; 0x02
    24ae:	2c a3       	std	Y+36, r18	; 0x24
    24b0:	21 11       	cpse	r18, r1
    24b2:	07 c0       	rjmp	.+14     	; 0x24c2 <_Z8sendDatav+0x78>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    24b4:	61 ec       	ldi	r22, 0xC1	; 193
    24b6:	74 e0       	ldi	r23, 0x04	; 4
    24b8:	8e e9       	ldi	r24, 0x9E	; 158
    24ba:	93 e0       	ldi	r25, 0x03	; 3
    24bc:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return false; //Still waiting to initialise
    24c0:	d3 c0       	rjmp	.+422    	; 0x2668 <_Z8sendDatav+0x21e>
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	1a 82       	std	Y+2, r1	; 0x02
    24c8:	1c 82       	std	Y+4, r1	; 0x04
    24ca:	1b 82       	std	Y+3, r1	; 0x03
    24cc:	1d 82       	std	Y+5, r1	; 0x05
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    24ce:	1e 82       	std	Y+6, r1	; 0x06
    24d0:	1f 82       	std	Y+7, r1	; 0x07
    24d2:	18 86       	std	Y+8, r1	; 0x08
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    24d4:	1c 86       	std	Y+12, r1	; 0x0c
    24d6:	1e 86       	std	Y+14, r1	; 0x0e
    24d8:	1d 86       	std	Y+13, r1	; 0x0d
    24da:	18 8a       	std	Y+16, r1	; 0x10
    24dc:	1f 86       	std	Y+15, r1	; 0x0f
    24de:	1a 8a       	std	Y+18, r1	; 0x12
    24e0:	19 8a       	std	Y+17, r1	; 0x11
	}
		
	DailyCycleData sendData;
	sendData.InitStatus = sendDataFona->_fonaStatusInit;
    24e2:	83 81       	ldd	r24, Z+3	; 0x03
    24e4:	8a 87       	std	Y+10, r24	; 0x0a
	sendData.GPRSInitStatus = sendDataFona->_gprsStatusInit;
    24e6:	84 81       	ldd	r24, Z+4	; 0x04
    24e8:	8b 87       	std	Y+11, r24	; 0x0b
	sendData.RSSI = sendDataFona->_rssiStatusInit;
    24ea:	85 81       	ldd	r24, Z+5	; 0x05
    24ec:	96 81       	ldd	r25, Z+6	; 0x06
    24ee:	a7 81       	ldd	r26, Z+7	; 0x07
    24f0:	b0 85       	ldd	r27, Z+8	; 0x08
    24f2:	8e 83       	std	Y+6, r24	; 0x06
    24f4:	9f 83       	std	Y+7, r25	; 0x07
    24f6:	a8 87       	std	Y+8, r26	; 0x08
    24f8:	b9 87       	std	Y+9, r27	; 0x09
		
	if (sendDataFona->fona == NULL) {
    24fa:	80 80       	ld	r8, Z
    24fc:	91 80       	ldd	r9, Z+1	; 0x01
    24fe:	81 14       	cp	r8, r1
    2500:	91 04       	cpc	r9, r1
    2502:	39 f4       	brne	.+14     	; 0x2512 <_Z8sendDatav+0xc8>
		
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    2504:	6e ea       	ldi	r22, 0xAE	; 174
    2506:	74 e0       	ldi	r23, 0x04	; 4
    2508:	8e e9       	ldi	r24, 0x9E	; 158
    250a:	93 e0       	ldi	r25, 0x03	; 3
    250c:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2510:	a4 c0       	rjmp	.+328    	; 0x265a <_Z8sendDatav+0x210>
	
	Adafruit_FONA* fona = (Adafruit_FONA*)sendDataFona->fona;
	
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t fullEncodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    2512:	84 e1       	ldi	r24, 0x14	; 20
    2514:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
	char encodedData[fullEncodedSz];
    2518:	2d b7       	in	r18, 0x3d	; 61
    251a:	3e b7       	in	r19, 0x3e	; 62
    251c:	28 1b       	sub	r18, r24
    251e:	39 0b       	sbc	r19, r25
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	3e bf       	out	0x3e, r19	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	2d bf       	out	0x3d, r18	; 61
    252a:	8d b7       	in	r24, 0x3d	; 61
    252c:	9e b7       	in	r25, 0x3e	; 62
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	3c 01       	movw	r6, r24
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	uint8_t numReadingsLoaded;
	createEncodedData(encodedData, &numReadingsLoaded, GPRS_MAX_READINGS_FOR_SEND, &sendData);
    2532:	9e 01       	movw	r18, r28
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	44 e1       	ldi	r20, 0x14	; 20
    253a:	be 01       	movw	r22, r28
    253c:	6d 5d       	subi	r22, 0xDD	; 221
    253e:	7f 4f       	sbci	r23, 0xFF	; 255
    2540:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z17createEncodedDataPcPhhP14DailyCycleData>
	sendData.NoOfReadings = numReadingsLoaded;
    2544:	8b a1       	ldd	r24, Y+35	; 0x23
    2546:	8d 83       	std	Y+5, r24	; 0x05
	
	uint16_t actualEncodedSz = GsmPayload::getEncodedPayloadSize_S(numReadingsLoaded);
    2548:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    254c:	2c 01       	movw	r4, r24

	RM_LOGLN(F("Encoded data created and ready for send:"));
    254e:	65 e8       	ldi	r22, 0x85	; 133
    2550:	74 e0       	ldi	r23, 0x04	; 4
    2552:	8e e9       	ldi	r24, 0x9E	; 158
    2554:	93 e0       	ldi	r25, 0x03	; 3
    2556:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    255a:	b3 01       	movw	r22, r6
    255c:	8e e9       	ldi	r24, 0x9E	; 158
    255e:	93 e0       	ldi	r25, 0x03	; 3
    2560:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
	
	uint8_t maxResponseSz = 10;
	char response[maxResponseSz] = {0};
    2564:	1b 8a       	std	Y+19, r1	; 0x13
    2566:	1c 8a       	std	Y+20, r1	; 0x14
    2568:	1d 8a       	std	Y+21, r1	; 0x15
    256a:	1e 8a       	std	Y+22, r1	; 0x16
    256c:	1f 8a       	std	Y+23, r1	; 0x17
    256e:	18 8e       	std	Y+24, r1	; 0x18
    2570:	19 8e       	std	Y+25, r1	; 0x19
    2572:	1a 8e       	std	Y+26, r1	; 0x1a
    2574:	1b 8e       	std	Y+27, r1	; 0x1b
    2576:	1c 8e       	std	Y+28, r1	; 0x1c
	uint16_t statuscode=0;
    2578:	1a a2       	std	Y+34, r1	; 0x22
    257a:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t actualResponseLen=0;
    257c:	18 a2       	std	Y+32, r1	; 0x20
    257e:	1f 8e       	std	Y+31, r1	; 0x1f
	FONA_STATUS_GPRS_SEND status =  fona->sendDataOverGprs(
		(uint8_t*)encodedData, actualEncodedSz, 
		response, maxResponseSz, &actualResponseLen, &statuscode);
    2580:	5e 01       	movw	r10, r28
    2582:	93 e1       	ldi	r25, 0x13	; 19
    2584:	a9 0e       	add	r10, r25
    2586:	b1 1c       	adc	r11, r1
    2588:	9e 01       	movw	r18, r28
    258a:	2f 5d       	subi	r18, 0xDF	; 223
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	69 01       	movw	r12, r18
    2590:	ce 01       	movw	r24, r28
    2592:	4f 96       	adiw	r24, 0x1f	; 31
    2594:	7c 01       	movw	r14, r24
    2596:	0a e0       	ldi	r16, 0x0A	; 10
    2598:	10 e0       	ldi	r17, 0x00	; 0
    259a:	95 01       	movw	r18, r10
    259c:	a2 01       	movw	r20, r4
    259e:	b3 01       	movw	r22, r6
    25a0:	c4 01       	movw	r24, r8
    25a2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_>
    25a6:	78 2e       	mov	r7, r24

	RM_LOG2(F("Response from send"), response);
    25a8:	62 e7       	ldi	r22, 0x72	; 114
    25aa:	74 e0       	ldi	r23, 0x04	; 4
    25ac:	8e e9       	ldi	r24, 0x9E	; 158
    25ae:	93 e0       	ldi	r25, 0x03	; 3
    25b0:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    25b4:	67 e4       	ldi	r22, 0x47	; 71
    25b6:	71 e0       	ldi	r23, 0x01	; 1
    25b8:	8e e9       	ldi	r24, 0x9E	; 158
    25ba:	93 e0       	ldi	r25, 0x03	; 3
    25bc:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    25c0:	b5 01       	movw	r22, r10
    25c2:	8e e9       	ldi	r24, 0x9E	; 158
    25c4:	93 e0       	ldi	r25, 0x03	; 3
    25c6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_ZN5Print7printlnEPKc>
	RM_LOG2(F("with length"), strlen(response));
    25ca:	66 e6       	ldi	r22, 0x66	; 102
    25cc:	74 e0       	ldi	r23, 0x04	; 4
    25ce:	8e e9       	ldi	r24, 0x9E	; 158
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    25d6:	67 e4       	ldi	r22, 0x47	; 71
    25d8:	71 e0       	ldi	r23, 0x01	; 1
    25da:	8e e9       	ldi	r24, 0x9E	; 158
    25dc:	93 e0       	ldi	r25, 0x03	; 3
    25de:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    25e2:	f5 01       	movw	r30, r10
    25e4:	01 90       	ld	r0, Z+
    25e6:	00 20       	and	r0, r0
    25e8:	e9 f7       	brne	.-6      	; 0x25e4 <_Z8sendDatav+0x19a>
    25ea:	31 97       	sbiw	r30, 0x01	; 1
    25ec:	bf 01       	movw	r22, r30
    25ee:	6a 19       	sub	r22, r10
    25f0:	7b 09       	sbc	r23, r11
    25f2:	4a e0       	ldi	r20, 0x0A	; 10
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	8e e9       	ldi	r24, 0x9E	; 158
    25f8:	93 e0       	ldi	r25, 0x03	; 3
    25fa:	0e 94 b4 1b 	call	0x3768	; 0x3768 <_ZN5Print7printlnEji>
	
	uint16_t responseId = atoi(response);
    25fe:	c5 01       	movw	r24, r10
    2600:	0e 94 a7 23 	call	0x474e	; 0x474e <atoi>
    2604:	5c 01       	movw	r10, r24
	RM_LOG2(F("\tNumber: "), responseId);
    2606:	6c e5       	ldi	r22, 0x5C	; 92
    2608:	74 e0       	ldi	r23, 0x04	; 4
    260a:	8e e9       	ldi	r24, 0x9E	; 158
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    2612:	67 e4       	ldi	r22, 0x47	; 71
    2614:	71 e0       	ldi	r23, 0x01	; 1
    2616:	8e e9       	ldi	r24, 0x9E	; 158
    2618:	93 e0       	ldi	r25, 0x03	; 3
    261a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    261e:	4a e0       	ldi	r20, 0x0A	; 10
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	b5 01       	movw	r22, r10
    2624:	8e e9       	ldi	r24, 0x9E	; 158
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	0e 94 b4 1b 	call	0x3768	; 0x3768 <_ZN5Print7printlnEji>

	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    262c:	be 01       	movw	r22, r28
    262e:	63 5e       	subi	r22, 0xE3	; 227
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	c4 01       	movw	r24, r8
    2634:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN13Adafruit_FONA14getBattPercentEPj>
    2638:	81 11       	cpse	r24, r1
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <_Z8sendDatav+0x1f6>
		sendData.BattPct = -1;
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <_Z8sendDatav+0x1f8>
	else
		sendData.BattPct = battPct;
    2640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2642:	8a 83       	std	Y+2, r24	; 0x02
	
	sendData.SendStatus = status;
    2644:	7c 86       	std	Y+12, r7	; 0x0c
	sendData.ResponseHTMLCode = statuscode;
    2646:	89 a1       	ldd	r24, Y+33	; 0x21
    2648:	9a a1       	ldd	r25, Y+34	; 0x22
    264a:	9e 87       	std	Y+14, r25	; 0x0e
    264c:	8d 87       	std	Y+13, r24	; 0x0d
	sendData.ResponseLength = actualResponseLen;
    264e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2650:	98 a1       	ldd	r25, Y+32	; 0x20
    2652:	98 8b       	std	Y+16, r25	; 0x10
    2654:	8f 87       	std	Y+15, r24	; 0x0f
	sendData.ResponseId = responseId;
    2656:	ba 8a       	std	Y+18, r11	; 0x12
    2658:	a9 8a       	std	Y+17, r10	; 0x11
		
	mem.appendDailyEntry(&sendData);
    265a:	be 01       	movw	r22, r28
    265c:	6f 5f       	subi	r22, 0xFF	; 255
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	8e ea       	ldi	r24, 0xAE	; 174
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
	return true;
}
    2668:	8c a1       	ldd	r24, Y+36	; 0x24
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	3e be       	out	0x3e, r3	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	2d be       	out	0x3d, r2	; 61
    2674:	a4 96       	adiw	r28, 0x24	; 36
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	9f 90       	pop	r9
    2696:	8f 90       	pop	r8
    2698:	7f 90       	pop	r7
    269a:	6f 90       	pop	r6
    269c:	5f 90       	pop	r5
    269e:	4f 90       	pop	r4
    26a0:	3f 90       	pop	r3
    26a2:	2f 90       	pop	r2
    26a4:	08 95       	ret

000026a6 <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    26a6:	68 ee       	ldi	r22, 0xE8	; 232
    26a8:	73 e0       	ldi	r23, 0x03	; 3
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 ba 1c 	call	0x3974	; 0x3974 <delay>
	++_timerCounter;
    26b2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    26b6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    26c0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    26c4:	62 e5       	ldi	r22, 0x52	; 82
    26c6:	74 e0       	ldi	r23, 0x04	; 4
    26c8:	8e e9       	ldi	r24, 0x9E	; 158
    26ca:	93 e0       	ldi	r25, 0x03	; 3
    26cc:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    26d0:	67 e4       	ldi	r22, 0x47	; 71
    26d2:	71 e0       	ldi	r23, 0x01	; 1
    26d4:	8e e9       	ldi	r24, 0x9E	; 158
    26d6:	93 e0       	ldi	r25, 0x03	; 3
    26d8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_ZN5Print5printEPKc>
    26dc:	4a e0       	ldi	r20, 0x0A	; 10
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <_behaviour>
    26e4:	8e e9       	ldi	r24, 0x9E	; 158
    26e6:	93 e0       	ldi	r25, 0x03	; 3
    26e8:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    26ec:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26f0:	80 ff       	sbrs	r24, 0
    26f2:	09 c0       	rjmp	.+18     	; 0x2706 <loop+0x60>
		
		if (takeReadings())
    26f4:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z12takeReadingsv>
    26f8:	88 23       	and	r24, r24
    26fa:	29 f0       	breq	.+10     	; 0x2706 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    26fc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2700:	8e 7f       	andi	r24, 0xFE	; 254
    2702:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    2706:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    270a:	81 ff       	sbrs	r24, 1
    270c:	09 c0       	rjmp	.+18     	; 0x2720 <loop+0x7a>
		
		if (sendData())
    270e:	0e 94 25 12 	call	0x244a	; 0x244a <_Z8sendDatav>
    2712:	88 23       	and	r24, r24
    2714:	29 f0       	breq	.+10     	; 0x2720 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    2716:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    271a:	8d 7f       	andi	r24, 0xFD	; 253
    271c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    2720:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2724:	82 ff       	sbrs	r24, 2
    2726:	17 c0       	rjmp	.+46     	; 0x2756 <loop+0xb0>
	
		if (_timerCounter == 1)
    2728:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    272c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	31 f4       	brne	.+12     	; 0x2740 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    2734:	6e ea       	ldi	r22, 0xAE	; 174
    2736:	71 e0       	ldi	r23, 0x01	; 1
    2738:	89 eb       	ldi	r24, 0xB9	; 185
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    2740:	0e 94 25 12 	call	0x244a	; 0x244a <_Z8sendDatav>
    2744:	88 23       	and	r24, r24
    2746:	39 f0       	breq	.+14     	; 0x2756 <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    2748:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    274c:	8b 7f       	andi	r24, 0xFB	; 251
    274e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    2752:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    2756:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    275a:	81 11       	cpse	r24, r1
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <loop+0xbc>
		
		switchOffSystem();
    275e:	0c 94 38 11 	jmp	0x2270	; 0x2270 <_Z15switchOffSystemv>
    2762:	08 95       	ret

00002764 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	64 e0       	ldi	r22, 0x04	; 4
    2768:	89 eb       	ldi	r24, 0xB9	; 185
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	8e ea       	ldi	r24, 0xAE	; 174
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	0e 94 de 13 	call	0x27bc	; 0x27bc <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	8c ea       	ldi	r24, 0xAC	; 172
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN13SensorManagerC1Eb>
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2784:	ee e9       	ldi	r30, 0x9E	; 158
    2786:	f1 e0       	ldi	r31, 0x01	; 1
    2788:	12 82       	std	Z+2, r1	; 0x02
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    278a:	15 82       	std	Z+5, r1	; 0x05
    278c:	16 82       	std	Z+6, r1	; 0x06
    278e:	17 82       	std	Z+7, r1	; 0x07
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2790:	12 86       	std	Z+10, r1	; 0x0a
    2792:	11 86       	std	Z+9, r1	; 0x09
    2794:	14 86       	std	Z+12, r1	; 0x0c
    2796:	13 86       	std	Z+11, r1	; 0x0b
    2798:	08 95       	ret

0000279a <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    279a:	8d e2       	ldi	r24, 0x2D	; 45
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <__fona+0x1>
    27a2:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <__fona>
    27a6:	8e ec       	ldi	r24, 0xCE	; 206
    27a8:	92 e0       	ldi	r25, 0x02	; 2
    27aa:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <_ZN6StringD1Ev>

000027ae <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    27ae:	dc 01       	movw	r26, r24
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	01 90       	ld	r0, Z+
    27b6:	f0 81       	ld	r31, Z
    27b8:	e0 2d       	mov	r30, r0
    27ba:	09 94       	ijmp

000027bc <_ZN12RmMemManagerC1Eb>:
    27bc:	fc 01       	movw	r30, r24
    27be:	14 82       	std	Z+4, r1	; 0x04
    27c0:	15 82       	std	Z+5, r1	; 0x05
    27c2:	16 82       	std	Z+6, r1	; 0x06
    27c4:	17 82       	std	Z+7, r1	; 0x07
    27c6:	80 e8       	ldi	r24, 0x80	; 128
    27c8:	80 87       	std	Z+8, r24	; 0x08
    27ca:	81 87       	std	Z+9, r24	; 0x09
    27cc:	12 86       	std	Z+10, r1	; 0x0a
    27ce:	63 83       	std	Z+3, r22	; 0x03
    27d0:	61 11       	cpse	r22, r1
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <_ZN12RmMemManagerC1Eb+0x20>
    27d4:	86 e4       	ldi	r24, 0x46	; 70
    27d6:	93 e0       	ldi	r25, 0x03	; 3
    27d8:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <_ZN7TwoWire5beginEv>
    27dc:	08 95       	ret

000027de <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    27de:	fc 01       	movw	r30, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	61 15       	cp	r22, r1
    27e8:	71 05       	cpc	r23, r1
    27ea:	39 f0       	breq	.+14     	; 0x27fa <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    27ec:	42 81       	ldd	r20, Z+2	; 0x02
    27ee:	2a e0       	ldi	r18, 0x0A	; 10
    27f0:	42 9f       	mul	r20, r18
    27f2:	a0 01       	movw	r20, r0
    27f4:	11 24       	eor	r1, r1
    27f6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <memcpy>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	08 95       	ret

000027fe <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
    27fe:	08 95       	ret

00002800 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	eb 01       	movw	r28, r22
    280e:	7b 01       	movw	r14, r22
    2810:	e4 0e       	add	r14, r20
    2812:	f1 1c       	adc	r15, r1
    2814:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2816:	ce 15       	cp	r28, r14
    2818:	df 05       	cpc	r29, r15
    281a:	71 f1       	breq	.+92     	; 0x2878 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    281c:	60 e5       	ldi	r22, 0x50	; 80
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	86 e4       	ldi	r24, 0x46	; 70
    2822:	93 e0       	ldi	r25, 0x03	; 3
    2824:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    2828:	61 2f       	mov	r22, r17
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	86 e4       	ldi	r24, 0x46	; 70
    282e:	93 e0       	ldi	r25, 0x03	; 3
    2830:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    2834:	b8 01       	movw	r22, r16
    2836:	77 27       	eor	r23, r23
    2838:	86 e4       	ldi	r24, 0x46	; 70
    283a:	93 e0       	ldi	r25, 0x03	; 3
    283c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    2840:	86 e4       	ldi	r24, 0x46	; 70
    2842:	93 e0       	ldi	r25, 0x03	; 3
    2844:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	60 e5       	ldi	r22, 0x50	; 80
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	86 e4       	ldi	r24, 0x46	; 70
    2852:	93 e0       	ldi	r25, 0x03	; 3
    2854:	0e 94 56 18 	call	0x30ac	; 0x30ac <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    2858:	86 e4       	ldi	r24, 0x46	; 70
    285a:	93 e0       	ldi	r25, 0x03	; 3
    285c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_ZN7TwoWire9availableEv>
    2860:	89 2b       	or	r24, r25
    2862:	29 f0       	breq	.+10     	; 0x286e <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    2864:	86 e4       	ldi	r24, 0x46	; 70
    2866:	93 e0       	ldi	r25, 0x03	; 3
    2868:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <_ZN7TwoWire4readEv>
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    286e:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    2870:	89 93       	st	Y+, r24
    2872:	0f 5f       	subi	r16, 0xFF	; 255
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2876:	cf cf       	rjmp	.-98     	; 0x2816 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	08 95       	ret

00002886 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	1f 92       	push	r1
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	be 01       	movw	r22, r28
    2896:	6f 5f       	subi	r22, 0xFF	; 255
    2898:	7f 4f       	sbci	r23, 0xFF	; 255
    289a:	0e 94 00 14 	call	0x2800	; 0x2800 <_Z12internalReadjPhh>
	return value;
}
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	0f 90       	pop	r0
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	0c 94 43 14 	jmp	0x2886	; 0x2886 <_ZN12RmMemManager18getUCharFromMemoryEj>

000028b0 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    28b0:	fc 01       	movw	r30, r24
    28b2:	60 83       	st	Z, r22
    28b4:	08 95       	ret

000028b6 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    28b6:	fc 01       	movw	r30, r24
    28b8:	80 81       	ld	r24, Z
    28ba:	81 11       	cpse	r24, r1
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    28be:	86 2f       	mov	r24, r22
    28c0:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    28c4:	85 e0       	ldi	r24, 0x05	; 5
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	08 95       	ret

000028ca <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    28ca:	fc 01       	movw	r30, r24
    28cc:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    28ce:	81 81       	ldd	r24, Z+1	; 0x01
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	12 96       	adiw	r26, 0x02	; 2
    28d8:	9c 93       	st	X, r25
    28da:	8e 93       	st	-X, r24
    28dc:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    28de:	81 81       	ldd	r24, Z+1	; 0x01
    28e0:	2a e0       	ldi	r18, 0x0A	; 10
    28e2:	82 9f       	mul	r24, r18
    28e4:	c0 01       	movw	r24, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	14 96       	adiw	r26, 0x04	; 4
    28ea:	9c 93       	st	X, r25
    28ec:	8e 93       	st	-X, r24
    28ee:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    28f0:	81 81       	ldd	r24, Z+1	; 0x01
    28f2:	67 e0       	ldi	r22, 0x07	; 7
    28f4:	0e 94 45 21 	call	0x428a	; 0x428a <__udivmodqi4>
    28f8:	89 2f       	mov	r24, r25
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	16 96       	adiw	r26, 0x06	; 6
    28fe:	9c 93       	st	X, r25
    2900:	8e 93       	st	-X, r24
    2902:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    2904:	81 81       	ldd	r24, Z+1	; 0x01
    2906:	24 e6       	ldi	r18, 0x64	; 100
    2908:	82 9f       	mul	r24, r18
    290a:	c0 01       	movw	r24, r0
    290c:	11 24       	eor	r1, r1
    290e:	18 96       	adiw	r26, 0x08	; 8
    2910:	9c 93       	st	X, r25
    2912:	8e 93       	st	-X, r24
    2914:	17 97       	sbiw	r26, 0x07	; 7
    2916:	08 95       	ret

00002918 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    2918:	af 92       	push	r10
    291a:	bf 92       	push	r11
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	8c 01       	movw	r16, r24
    292e:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    2930:	fc 01       	movw	r30, r24
    2932:	80 81       	ld	r24, Z
    2934:	88 23       	and	r24, r24
    2936:	21 f0       	breq	.+8      	; 0x2940 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    2938:	c8 01       	movw	r24, r16
    293a:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN13SensorManager11getMockDataEP10SensorData>
    293e:	1b c0       	rjmp	.+54     	; 0x2976 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2940:	6e e0       	ldi	r22, 0x0E	; 14
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN13SensorManager16takeSampleAnalogEh>
    2948:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    294a:	6f e0       	ldi	r22, 0x0F	; 15
    294c:	c8 01       	movw	r24, r16
    294e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN13SensorManager16takeSampleAnalogEh>
    2952:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2954:	61 e1       	ldi	r22, 0x11	; 17
    2956:	c8 01       	movw	r24, r16
    2958:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN13SensorManager16takeSampleAnalogEh>
    295c:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    295e:	60 e1       	ldi	r22, 0x10	; 16
    2960:	c8 01       	movw	r24, r16
    2962:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    2966:	ba 82       	std	Y+2, r11	; 0x02
    2968:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    296a:	dc 82       	std	Y+4, r13	; 0x04
    296c:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    296e:	fe 82       	std	Y+6, r15	; 0x06
    2970:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    2972:	98 87       	std	Y+8, r25	; 0x08
    2974:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2976:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	1f 91       	pop	r17
    297e:	0f 91       	pop	r16
    2980:	ff 90       	pop	r15
    2982:	ef 90       	pop	r14
    2984:	df 90       	pop	r13
    2986:	cf 90       	pop	r12
    2988:	bf 90       	pop	r11
    298a:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    298c:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <_ZN7Helpers15printSensorDataEP10SensorData>

00002990 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2990:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <twi_sendStop>
    299a:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	82 e1       	ldi	r24, 0x12	; 18
    29a2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	83 e1       	ldi	r24, 0x13	; 19
    29aa:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
    29ae:	e9 eb       	ldi	r30, 0xB9	; 185
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	8e 7f       	andi	r24, 0xFE	; 254
    29b6:	80 83       	st	Z, r24
    29b8:	80 81       	ld	r24, Z
    29ba:	8d 7f       	andi	r24, 0xFD	; 253
    29bc:	80 83       	st	Z, r24
    29be:	88 e4       	ldi	r24, 0x48	; 72
    29c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    29c4:	85 e4       	ldi	r24, 0x45	; 69
    29c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    29ca:	08 95       	ret

000029cc <twi_readFrom>:
    29cc:	41 32       	cpi	r20, 0x21	; 33
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <twi_readFrom+0x6>
    29d0:	43 c0       	rjmp	.+134    	; 0x2a58 <twi_readFrom+0x8c>
    29d2:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    29d6:	91 11       	cpse	r25, r1
    29d8:	fc cf       	rjmp	.-8      	; 0x29d2 <twi_readFrom+0x6>
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <twi_state>
    29e0:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <twi_sendStop>
    29e4:	2f ef       	ldi	r18, 0xFF	; 255
    29e6:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_error>
    29ea:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    29ee:	24 0f       	add	r18, r20
    29f0:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <twi_masterBufferLength>
    29f4:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <twi_slarw>
    29f8:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <twi_slarw>
    29fc:	88 0f       	add	r24, r24
    29fe:	89 2b       	or	r24, r25
    2a00:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    2a04:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	61 f4       	brne	.+24     	; 0x2a24 <twi_readFrom+0x58>
    2a0c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2a10:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2a14:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a1c:	83 fd       	sbrc	r24, 3
    2a1e:	f8 cf       	rjmp	.-16     	; 0x2a10 <twi_readFrom+0x44>
    2a20:	85 ec       	ldi	r24, 0xC5	; 197
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <twi_readFrom+0x5a>
    2a24:	85 ee       	ldi	r24, 0xE5	; 229
    2a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a2a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	e1 f3       	breq	.-8      	; 0x2a2a <twi_readFrom+0x5e>
    2a32:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2a36:	84 17       	cp	r24, r20
    2a38:	10 f4       	brcc	.+4      	; 0x2a3e <twi_readFrom+0x72>
    2a3a:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2a3e:	ae e1       	ldi	r26, 0x1E	; 30
    2a40:	b3 e0       	ldi	r27, 0x03	; 3
    2a42:	96 2f       	mov	r25, r22
    2a44:	fb 01       	movw	r30, r22
    2a46:	8e 2f       	mov	r24, r30
    2a48:	89 1b       	sub	r24, r25
    2a4a:	84 17       	cp	r24, r20
    2a4c:	18 f4       	brcc	.+6      	; 0x2a54 <twi_readFrom+0x88>
    2a4e:	8d 91       	ld	r24, X+
    2a50:	81 93       	st	Z+, r24
    2a52:	f9 cf       	rjmp	.-14     	; 0x2a46 <twi_readFrom+0x7a>
    2a54:	84 2f       	mov	r24, r20
    2a56:	08 95       	ret
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	08 95       	ret

00002a5c <twi_writeTo>:
    2a5c:	0f 93       	push	r16
    2a5e:	41 32       	cpi	r20, 0x21	; 33
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <twi_writeTo+0x8>
    2a62:	4a c0       	rjmp	.+148    	; 0x2af8 <twi_writeTo+0x9c>
    2a64:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    2a68:	91 11       	cpse	r25, r1
    2a6a:	fc cf       	rjmp	.-8      	; 0x2a64 <twi_writeTo+0x8>
    2a6c:	32 e0       	ldi	r19, 0x02	; 2
    2a6e:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <twi_state>
    2a72:	00 93 43 03 	sts	0x0343, r16	; 0x800343 <twi_sendStop>
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <twi_error>
    2a7c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    2a80:	40 93 1c 03 	sts	0x031C, r20	; 0x80031c <twi_masterBufferLength>
    2a84:	56 2f       	mov	r21, r22
    2a86:	ae e1       	ldi	r26, 0x1E	; 30
    2a88:	b3 e0       	ldi	r27, 0x03	; 3
    2a8a:	fb 01       	movw	r30, r22
    2a8c:	3e 2f       	mov	r19, r30
    2a8e:	35 1b       	sub	r19, r21
    2a90:	34 17       	cp	r19, r20
    2a92:	18 f4       	brcc	.+6      	; 0x2a9a <twi_writeTo+0x3e>
    2a94:	31 91       	ld	r19, Z+
    2a96:	3d 93       	st	X+, r19
    2a98:	f9 cf       	rjmp	.-14     	; 0x2a8c <twi_writeTo+0x30>
    2a9a:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_slarw>
    2a9e:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <twi_slarw>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	83 2b       	or	r24, r19
    2aa6:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    2aaa:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	61 f4       	brne	.+24     	; 0x2aca <twi_writeTo+0x6e>
    2ab2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2ab6:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2aba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2abe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2ac2:	83 fd       	sbrc	r24, 3
    2ac4:	f8 cf       	rjmp	.-16     	; 0x2ab6 <twi_writeTo+0x5a>
    2ac6:	85 ec       	ldi	r24, 0xC5	; 197
    2ac8:	01 c0       	rjmp	.+2      	; 0x2acc <twi_writeTo+0x70>
    2aca:	85 ee       	ldi	r24, 0xE5	; 229
    2acc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2ad0:	22 23       	and	r18, r18
    2ad2:	21 f0       	breq	.+8      	; 0x2adc <twi_writeTo+0x80>
    2ad4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2ad8:	82 30       	cpi	r24, 0x02	; 2
    2ada:	d1 f3       	breq	.-12     	; 0x2ad0 <twi_writeTo+0x74>
    2adc:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2ae0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae2:	79 f0       	breq	.+30     	; 0x2b02 <twi_writeTo+0xa6>
    2ae4:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2ae8:	80 32       	cpi	r24, 0x20	; 32
    2aea:	41 f0       	breq	.+16     	; 0x2afc <twi_writeTo+0xa0>
    2aec:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2af0:	80 33       	cpi	r24, 0x30	; 48
    2af2:	31 f0       	breq	.+12     	; 0x2b00 <twi_writeTo+0xa4>
    2af4:	94 e0       	ldi	r25, 0x04	; 4
    2af6:	05 c0       	rjmp	.+10     	; 0x2b02 <twi_writeTo+0xa6>
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	03 c0       	rjmp	.+6      	; 0x2b02 <twi_writeTo+0xa6>
    2afc:	92 e0       	ldi	r25, 0x02	; 2
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <twi_writeTo+0xa6>
    2b00:	93 e0       	ldi	r25, 0x03	; 3
    2b02:	89 2f       	mov	r24, r25
    2b04:	0f 91       	pop	r16
    2b06:	08 95       	ret

00002b08 <twi_transmit>:
    2b08:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2b0c:	26 2f       	mov	r18, r22
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	24 0f       	add	r18, r20
    2b12:	31 1d       	adc	r19, r1
    2b14:	21 32       	cpi	r18, 0x21	; 33
    2b16:	31 05       	cpc	r19, r1
    2b18:	dc f4       	brge	.+54     	; 0x2b50 <twi_transmit+0x48>
    2b1a:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <twi_state>
    2b1e:	24 30       	cpi	r18, 0x04	; 4
    2b20:	c9 f4       	brne	.+50     	; 0x2b54 <twi_transmit+0x4c>
    2b22:	fc 01       	movw	r30, r24
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	86 17       	cp	r24, r22
    2b2a:	58 f4       	brcc	.+22     	; 0x2b42 <twi_transmit+0x3a>
    2b2c:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2b30:	21 91       	ld	r18, Z+
    2b32:	dc 01       	movw	r26, r24
    2b34:	a4 50       	subi	r26, 0x04	; 4
    2b36:	bd 4f       	sbci	r27, 0xFD	; 253
    2b38:	a3 0f       	add	r26, r19
    2b3a:	b1 1d       	adc	r27, r1
    2b3c:	2c 93       	st	X, r18
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	f3 cf       	rjmp	.-26     	; 0x2b28 <twi_transmit+0x20>
    2b42:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2b46:	68 0f       	add	r22, r24
    2b48:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <twi_txBufferLength>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	08 95       	ret
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	08 95       	ret
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	08 95       	ret

00002b58 <twi_attachSlaveRxEvent>:
    2b58:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <twi_onSlaveReceive+0x1>
    2b5c:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_onSlaveReceive>
    2b60:	08 95       	ret

00002b62 <twi_attachSlaveTxEvent>:
    2b62:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_onSlaveTransmit+0x1>
    2b66:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_onSlaveTransmit>
    2b6a:	08 95       	ret

00002b6c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b6c:	85 ed       	ldi	r24, 0xD5	; 213
    2b6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2b76:	84 fd       	sbrc	r24, 4
    2b78:	fc cf       	rjmp	.-8      	; 0x2b72 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b7a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2b7e:	08 95       	ret

00002b80 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b80:	85 ec       	ldi	r24, 0xC5	; 197
    2b82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2b86:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2b8a:	08 95       	ret

00002b8c <__vector_24>:
}

ISR(TWI_vect)
{
    2b8c:	1f 92       	push	r1
    2b8e:	0f 92       	push	r0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	0f 92       	push	r0
    2b94:	11 24       	eor	r1, r1
    2b96:	2f 93       	push	r18
    2b98:	3f 93       	push	r19
    2b9a:	4f 93       	push	r20
    2b9c:	5f 93       	push	r21
    2b9e:	6f 93       	push	r22
    2ba0:	7f 93       	push	r23
    2ba2:	8f 93       	push	r24
    2ba4:	9f 93       	push	r25
    2ba6:	af 93       	push	r26
    2ba8:	bf 93       	push	r27
    2baa:	ef 93       	push	r30
    2bac:	ff 93       	push	r31
  switch(TW_STATUS){
    2bae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2bb2:	88 7f       	andi	r24, 0xF8	; 248
    2bb4:	80 36       	cpi	r24, 0x60	; 96
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <__vector_24+0x2e>
    2bb8:	9e c0       	rjmp	.+316    	; 0x2cf6 <__vector_24+0x16a>
    2bba:	78 f5       	brcc	.+94     	; 0x2c1a <__vector_24+0x8e>
    2bbc:	88 32       	cpi	r24, 0x28	; 40
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <__vector_24+0x36>
    2bc0:	5d c0       	rjmp	.+186    	; 0x2c7c <__vector_24+0xf0>
    2bc2:	90 f4       	brcc	.+36     	; 0x2be8 <__vector_24+0x5c>
    2bc4:	80 31       	cpi	r24, 0x10	; 16
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <__vector_24+0x3e>
    2bc8:	56 c0       	rjmp	.+172    	; 0x2c76 <__vector_24+0xea>
    2bca:	38 f4       	brcc	.+14     	; 0x2bda <__vector_24+0x4e>
    2bcc:	88 23       	and	r24, r24
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <__vector_24+0x46>
    2bd0:	f5 c0       	rjmp	.+490    	; 0x2dbc <__vector_24+0x230>
    2bd2:	88 30       	cpi	r24, 0x08	; 8
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <__vector_24+0x4c>
    2bd6:	4f c0       	rjmp	.+158    	; 0x2c76 <__vector_24+0xea>
    2bd8:	f5 c0       	rjmp	.+490    	; 0x2dc4 <__vector_24+0x238>
    2bda:	88 31       	cpi	r24, 0x18	; 24
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <__vector_24+0x54>
    2bde:	4e c0       	rjmp	.+156    	; 0x2c7c <__vector_24+0xf0>
    2be0:	80 32       	cpi	r24, 0x20	; 32
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <__vector_24+0x5a>
    2be4:	5f c0       	rjmp	.+190    	; 0x2ca4 <__vector_24+0x118>
    2be6:	ee c0       	rjmp	.+476    	; 0x2dc4 <__vector_24+0x238>
    2be8:	80 34       	cpi	r24, 0x40	; 64
    2bea:	09 f4       	brne	.+2      	; 0x2bee <__vector_24+0x62>
    2bec:	6a c0       	rjmp	.+212    	; 0x2cc2 <__vector_24+0x136>
    2bee:	58 f4       	brcc	.+22     	; 0x2c06 <__vector_24+0x7a>
    2bf0:	80 33       	cpi	r24, 0x30	; 48
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <__vector_24+0x6a>
    2bf4:	57 c0       	rjmp	.+174    	; 0x2ca4 <__vector_24+0x118>
    2bf6:	88 33       	cpi	r24, 0x38	; 56
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <__vector_24+0x70>
    2bfa:	e4 c0       	rjmp	.+456    	; 0x2dc4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bfc:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
      twi_releaseBus();
    2c00:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <twi_releaseBus>
      break;
    2c04:	df c0       	rjmp	.+446    	; 0x2dc4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c06:	80 35       	cpi	r24, 0x50	; 80
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <__vector_24+0x80>
    2c0a:	4f c0       	rjmp	.+158    	; 0x2caa <__vector_24+0x11e>
    2c0c:	88 35       	cpi	r24, 0x58	; 88
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <__vector_24+0x86>
    2c10:	5d c0       	rjmp	.+186    	; 0x2ccc <__vector_24+0x140>
    2c12:	88 34       	cpi	r24, 0x48	; 72
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <__vector_24+0x8c>
    2c16:	d6 c0       	rjmp	.+428    	; 0x2dc4 <__vector_24+0x238>
    2c18:	d3 c0       	rjmp	.+422    	; 0x2dc0 <__vector_24+0x234>
    2c1a:	88 39       	cpi	r24, 0x98	; 152
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <__vector_24+0x94>
    2c1e:	c4 c0       	rjmp	.+392    	; 0x2da8 <__vector_24+0x21c>
    2c20:	a8 f4       	brcc	.+42     	; 0x2c4c <__vector_24+0xc0>
    2c22:	88 37       	cpi	r24, 0x78	; 120
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <__vector_24+0x9c>
    2c26:	67 c0       	rjmp	.+206    	; 0x2cf6 <__vector_24+0x16a>
    2c28:	38 f4       	brcc	.+14     	; 0x2c38 <__vector_24+0xac>
    2c2a:	88 36       	cpi	r24, 0x68	; 104
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <__vector_24+0xa4>
    2c2e:	63 c0       	rjmp	.+198    	; 0x2cf6 <__vector_24+0x16a>
    2c30:	80 37       	cpi	r24, 0x70	; 112
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <__vector_24+0xaa>
    2c34:	60 c0       	rjmp	.+192    	; 0x2cf6 <__vector_24+0x16a>
    2c36:	c6 c0       	rjmp	.+396    	; 0x2dc4 <__vector_24+0x238>
    2c38:	88 38       	cpi	r24, 0x88	; 136
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <__vector_24+0xb2>
    2c3c:	b5 c0       	rjmp	.+362    	; 0x2da8 <__vector_24+0x21c>
    2c3e:	80 39       	cpi	r24, 0x90	; 144
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <__vector_24+0xb8>
    2c42:	5f c0       	rjmp	.+190    	; 0x2d02 <__vector_24+0x176>
    2c44:	80 38       	cpi	r24, 0x80	; 128
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <__vector_24+0xbe>
    2c48:	bd c0       	rjmp	.+378    	; 0x2dc4 <__vector_24+0x238>
    2c4a:	5b c0       	rjmp	.+182    	; 0x2d02 <__vector_24+0x176>
    2c4c:	80 3b       	cpi	r24, 0xB0	; 176
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <__vector_24+0xc6>
    2c50:	83 c0       	rjmp	.+262    	; 0x2d58 <__vector_24+0x1cc>
    2c52:	38 f4       	brcc	.+14     	; 0x2c62 <__vector_24+0xd6>
    2c54:	80 3a       	cpi	r24, 0xA0	; 160
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <__vector_24+0xce>
    2c58:	66 c0       	rjmp	.+204    	; 0x2d26 <__vector_24+0x19a>
    2c5a:	88 3a       	cpi	r24, 0xA8	; 168
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <__vector_24+0xd4>
    2c5e:	7c c0       	rjmp	.+248    	; 0x2d58 <__vector_24+0x1cc>
    2c60:	b1 c0       	rjmp	.+354    	; 0x2dc4 <__vector_24+0x238>
    2c62:	80 3c       	cpi	r24, 0xC0	; 192
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <__vector_24+0xdc>
    2c66:	a4 c0       	rjmp	.+328    	; 0x2db0 <__vector_24+0x224>
    2c68:	88 3c       	cpi	r24, 0xC8	; 200
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <__vector_24+0xe2>
    2c6c:	a1 c0       	rjmp	.+322    	; 0x2db0 <__vector_24+0x224>
    2c6e:	88 3b       	cpi	r24, 0xB8	; 184
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <__vector_24+0xe8>
    2c72:	87 c0       	rjmp	.+270    	; 0x2d82 <__vector_24+0x1f6>
    2c74:	a7 c0       	rjmp	.+334    	; 0x2dc4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2c76:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2c7a:	10 c0       	rjmp	.+32     	; 0x2c9c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c7c:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c80:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2c84:	98 17       	cp	r25, r24
    2c86:	70 f5       	brcc	.+92     	; 0x2ce4 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c88:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	8e 0f       	add	r24, r30
    2c90:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	e2 5e       	subi	r30, 0xE2	; 226
    2c98:	fc 4f       	sbci	r31, 0xFC	; 252
    2c9a:	80 81       	ld	r24, Z
    2c9c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ca0:	85 ec       	ldi	r24, 0xC5	; 197
    2ca2:	83 c0       	rjmp	.+262    	; 0x2daa <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2ca4:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
    2ca8:	8b c0       	rjmp	.+278    	; 0x2dc0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2caa:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	8e 0f       	add	r24, r30
    2cb2:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2cb6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	e2 5e       	subi	r30, 0xE2	; 226
    2cbe:	fc 4f       	sbci	r31, 0xFC	; 252
    2cc0:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2cc2:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2cc6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2cca:	6b c0       	rjmp	.+214    	; 0x2da2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ccc:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	8e 0f       	add	r24, r30
    2cd4:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2cd8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	e2 5e       	subi	r30, 0xE2	; 226
    2ce0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ce2:	80 83       	st	Z, r24
	if (twi_sendStop)
    2ce4:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <twi_sendStop>
    2ce8:	81 11       	cpse	r24, r1
    2cea:	6a c0       	rjmp	.+212    	; 0x2dc0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2cf2:	84 ea       	ldi	r24, 0xA4	; 164
    2cf4:	5e c0       	rjmp	.+188    	; 0x2db2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2cf6:	83 e0       	ldi	r24, 0x03	; 3
    2cf8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2cfc:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
    2d00:	cf cf       	rjmp	.-98     	; 0x2ca0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d02:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2d06:	80 32       	cpi	r24, 0x20	; 32
    2d08:	08 f0       	brcs	.+2      	; 0x2d0c <__vector_24+0x180>
    2d0a:	4e c0       	rjmp	.+156    	; 0x2da8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2d0c:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	8e 0f       	add	r24, r30
    2d14:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_rxBufferIndex>
    2d18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	e6 52       	subi	r30, 0x26	; 38
    2d20:	fd 4f       	sbci	r31, 0xFD	; 253
    2d22:	80 83       	st	Z, r24
    2d24:	bd cf       	rjmp	.-134    	; 0x2ca0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2d26:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d2a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2d2e:	80 32       	cpi	r24, 0x20	; 32
    2d30:	30 f4       	brcc	.+12     	; 0x2d3e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2d32:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	e6 52       	subi	r30, 0x26	; 38
    2d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2d3e:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_onSlaveReceive>
    2d48:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <twi_onSlaveReceive+0x1>
    2d4c:	8a ed       	ldi	r24, 0xDA	; 218
    2d4e:	92 e0       	ldi	r25, 0x02	; 2
    2d50:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2d52:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
      break;
    2d56:	36 c0       	rjmp	.+108    	; 0x2dc4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2d58:	84 e0       	ldi	r24, 0x04	; 4
    2d5a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2d5e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2d62:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2d66:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <twi_onSlaveTransmit>
    2d6a:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <twi_onSlaveTransmit+0x1>
    2d6e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2d70:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2d74:	81 11       	cpse	r24, r1
    2d76:	05 c0       	rjmp	.+10     	; 0x2d82 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2d7e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d82:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	8e 0f       	add	r24, r30
    2d8a:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_txBufferIndex>
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	e4 50       	subi	r30, 0x04	; 4
    2d92:	fd 4f       	sbci	r31, 0xFD	; 253
    2d94:	80 81       	ld	r24, Z
    2d96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d9a:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2d9e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2da2:	98 17       	cp	r25, r24
    2da4:	08 f4       	brcc	.+2      	; 0x2da8 <__vector_24+0x21c>
    2da6:	7c cf       	rjmp	.-264    	; 0x2ca0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2da8:	85 e8       	ldi	r24, 0x85	; 133
    2daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2dae:	0a c0       	rjmp	.+20     	; 0x2dc4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2db0:	85 ec       	ldi	r24, 0xC5	; 197
    2db2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2db6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
      break;
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2dbc:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_error>
      twi_stop();
    2dc0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <twi_stop>
      break;
  }
}
    2dc4:	ff 91       	pop	r31
    2dc6:	ef 91       	pop	r30
    2dc8:	bf 91       	pop	r27
    2dca:	af 91       	pop	r26
    2dcc:	9f 91       	pop	r25
    2dce:	8f 91       	pop	r24
    2dd0:	7f 91       	pop	r23
    2dd2:	6f 91       	pop	r22
    2dd4:	5f 91       	pop	r21
    2dd6:	4f 91       	pop	r20
    2dd8:	3f 91       	pop	r19
    2dda:	2f 91       	pop	r18
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
    2de2:	1f 90       	pop	r1
    2de4:	18 95       	reti

00002de6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2de6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2df0:	82 1b       	sub	r24, r18
    2df2:	91 09       	sbc	r25, r1
    2df4:	08 95       	ret

00002df6 <_ZN7TwoWire4readEv>:
    2df6:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2dfa:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dfe:	98 17       	cp	r25, r24
    2e00:	50 f4       	brcc	.+20     	; 0x2e16 <_ZN7TwoWire4readEv+0x20>
    2e02:	e9 2f       	mov	r30, r25
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	e4 58       	subi	r30, 0x84	; 132
    2e08:	fc 4f       	sbci	r31, 0xFC	; 252
    2e0a:	20 81       	ld	r18, Z
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	9f 5f       	subi	r25, 0xFF	; 255
    2e10:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <_ZN7TwoWire4readEv+0x24>
    2e16:	2f ef       	ldi	r18, 0xFF	; 255
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	08 95       	ret

00002e1e <_ZN7TwoWire4peekEv>:
    2e1e:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2e22:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2e26:	e8 17       	cp	r30, r24
    2e28:	30 f4       	brcc	.+12     	; 0x2e36 <_ZN7TwoWire4peekEv+0x18>
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	e4 58       	subi	r30, 0x84	; 132
    2e2e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e30:	80 81       	ld	r24, Z
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	08 95       	ret
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	9f ef       	ldi	r25, 0xFF	; 255
    2e3a:	08 95       	ret

00002e3c <_ZN7TwoWire5flushEv>:
    2e3c:	08 95       	ret

00002e3e <_ZN7TwoWire16onReceiveServiceEPhi>:
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	ec 01       	movw	r28, r24
    2e44:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <_ZN7TwoWire14user_onReceiveE>
    2e48:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <_ZN7TwoWire14user_onReceiveE+0x1>
    2e4c:	30 97       	sbiw	r30, 0x00	; 0
    2e4e:	f1 f0       	breq	.+60     	; 0x2e8c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e50:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2e54:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2e58:	98 17       	cp	r25, r24
    2e5a:	c0 f0       	brcs	.+48     	; 0x2e8c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	29 2f       	mov	r18, r25
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	26 17       	cp	r18, r22
    2e64:	37 07       	cpc	r19, r23
    2e66:	54 f4       	brge	.+20     	; 0x2e7c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2e68:	de 01       	movw	r26, r28
    2e6a:	a2 0f       	add	r26, r18
    2e6c:	b3 1f       	adc	r27, r19
    2e6e:	4c 91       	ld	r20, X
    2e70:	d9 01       	movw	r26, r18
    2e72:	a4 58       	subi	r26, 0x84	; 132
    2e74:	bc 4f       	sbci	r27, 0xFC	; 252
    2e76:	4c 93       	st	X, r20
    2e78:	9f 5f       	subi	r25, 0xFF	; 255
    2e7a:	f1 cf       	rjmp	.-30     	; 0x2e5e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2e7c:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2e80:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2e84:	cb 01       	movw	r24, r22
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	09 94       	ijmp
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	08 95       	ret

00002e92 <_ZN7TwoWire16onRequestServiceEv>:
    2e92:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZN7TwoWire14user_onRequestE>
    2e96:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZN7TwoWire14user_onRequestE+0x1>
    2e9a:	30 97       	sbiw	r30, 0x00	; 0
    2e9c:	29 f0       	breq	.+10     	; 0x2ea8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2e9e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2ea2:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2ea6:	09 94       	ijmp
    2ea8:	08 95       	ret

00002eaa <_ZN7TwoWire5writeEPKhj>:
    2eaa:	cf 92       	push	r12
    2eac:	df 92       	push	r13
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	7c 01       	movw	r14, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8a 01       	movw	r16, r20
    2ec0:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    2ec4:	22 23       	and	r18, r18
    2ec6:	89 f0       	breq	.+34     	; 0x2eea <_ZN7TwoWire5writeEPKhj+0x40>
    2ec8:	eb 01       	movw	r28, r22
    2eca:	6b 01       	movw	r12, r22
    2ecc:	c4 0e       	add	r12, r20
    2ece:	d5 1e       	adc	r13, r21
    2ed0:	cc 15       	cp	r28, r12
    2ed2:	dd 05       	cpc	r29, r13
    2ed4:	69 f0       	breq	.+26     	; 0x2ef0 <_ZN7TwoWire5writeEPKhj+0x46>
    2ed6:	69 91       	ld	r22, Y+
    2ed8:	d7 01       	movw	r26, r14
    2eda:	ed 91       	ld	r30, X+
    2edc:	fc 91       	ld	r31, X
    2ede:	01 90       	ld	r0, Z+
    2ee0:	f0 81       	ld	r31, Z
    2ee2:	e0 2d       	mov	r30, r0
    2ee4:	c7 01       	movw	r24, r14
    2ee6:	09 95       	icall
    2ee8:	f3 cf       	rjmp	.-26     	; 0x2ed0 <_ZN7TwoWire5writeEPKhj+0x26>
    2eea:	64 2f       	mov	r22, r20
    2eec:	0e 94 84 15 	call	0x2b08	; 0x2b08 <twi_transmit>
    2ef0:	c8 01       	movw	r24, r16
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	08 95       	ret

00002f04 <_ZN7TwoWire5writeEh>:
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	1f 92       	push	r1
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	69 83       	std	Y+1, r22	; 0x01
    2f10:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    2f14:	22 23       	and	r18, r18
    2f16:	d1 f0       	breq	.+52     	; 0x2f4c <_ZN7TwoWire5writeEh+0x48>
    2f18:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f1c:	20 32       	cpi	r18, 0x20	; 32
    2f1e:	40 f0       	brcs	.+16     	; 0x2f30 <_ZN7TwoWire5writeEh+0x2c>
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	fc 01       	movw	r30, r24
    2f26:	33 83       	std	Z+3, r19	; 0x03
    2f28:	22 83       	std	Z+2, r18	; 0x02
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	15 c0       	rjmp	.+42     	; 0x2f5a <_ZN7TwoWire5writeEh+0x56>
    2f30:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f34:	e8 2f       	mov	r30, r24
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	e7 5a       	subi	r30, 0xA7	; 167
    2f3a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f3c:	99 81       	ldd	r25, Y+1	; 0x01
    2f3e:	90 83       	st	Z, r25
    2f40:	8f 5f       	subi	r24, 0xFF	; 255
    2f42:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f46:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f4a:	05 c0       	rjmp	.+10     	; 0x2f56 <_ZN7TwoWire5writeEh+0x52>
    2f4c:	61 e0       	ldi	r22, 0x01	; 1
    2f4e:	ce 01       	movw	r24, r28
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	0e 94 84 15 	call	0x2b08	; 0x2b08 <twi_transmit>
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0f 90       	pop	r0
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret

00002f62 <_ZN7TwoWireC1Ev>:
    2f62:	fc 01       	movw	r30, r24
    2f64:	13 82       	std	Z+3, r1	; 0x03
    2f66:	12 82       	std	Z+2, r1	; 0x02
    2f68:	88 ee       	ldi	r24, 0xE8	; 232
    2f6a:	93 e0       	ldi	r25, 0x03	; 3
    2f6c:	a0 e0       	ldi	r26, 0x00	; 0
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	84 83       	std	Z+4, r24	; 0x04
    2f72:	95 83       	std	Z+5, r25	; 0x05
    2f74:	a6 83       	std	Z+6, r26	; 0x06
    2f76:	b7 83       	std	Z+7, r27	; 0x07
    2f78:	8e e5       	ldi	r24, 0x5E	; 94
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	08 95       	ret

00002f82 <_ZN7TwoWire5beginEv>:
    2f82:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2f86:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2f8a:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f8e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f92:	0e 94 c8 14 	call	0x2990	; 0x2990 <twi_init>
    2f96:	89 e4       	ldi	r24, 0x49	; 73
    2f98:	97 e1       	ldi	r25, 0x17	; 23
    2f9a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <twi_attachSlaveTxEvent>
    2f9e:	8f e1       	ldi	r24, 0x1F	; 31
    2fa0:	97 e1       	ldi	r25, 0x17	; 23
    2fa2:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <twi_attachSlaveRxEvent>

00002fa6 <_ZN7TwoWire17beginTransmissionEh>:
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZN7TwoWire12transmittingE>
    2fac:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <_ZN7TwoWire9txAddressE>
    2fb0:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2fb4:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2fb8:	08 95       	ret

00002fba <_ZN7TwoWire17beginTransmissionEi>:
    2fba:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <_ZN7TwoWire17beginTransmissionEh>

00002fbe <_ZN7TwoWire15endTransmissionEh>:
    2fbe:	0f 93       	push	r16
    2fc0:	06 2f       	mov	r16, r22
    2fc2:	21 e0       	ldi	r18, 0x01	; 1
    2fc4:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2fc8:	69 e5       	ldi	r22, 0x59	; 89
    2fca:	73 e0       	ldi	r23, 0x03	; 3
    2fcc:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <_ZN7TwoWire9txAddressE>
    2fd0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <twi_writeTo>
    2fd4:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2fd8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2fdc:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN7TwoWire12transmittingE>
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <_ZN7TwoWire11requestFromEhhmhh>:
    2fe4:	4f 92       	push	r4
    2fe6:	5f 92       	push	r5
    2fe8:	6f 92       	push	r6
    2fea:	7f 92       	push	r7
    2fec:	af 92       	push	r10
    2fee:	bf 92       	push	r11
    2ff0:	cf 92       	push	r12
    2ff2:	ef 92       	push	r14
    2ff4:	ff 92       	push	r15
    2ff6:	0f 93       	push	r16
    2ff8:	1f 93       	push	r17
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	5c 01       	movw	r10, r24
    3000:	f6 2e       	mov	r15, r22
    3002:	d4 2f       	mov	r29, r20
    3004:	28 01       	movw	r4, r16
    3006:	39 01       	movw	r6, r18
    3008:	ee 20       	and	r14, r14
    300a:	21 f1       	breq	.+72     	; 0x3054 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    300c:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZN7TwoWire17beginTransmissionEh>
    3010:	ce 2d       	mov	r28, r14
    3012:	c4 30       	cpi	r28, 0x04	; 4
    3014:	08 f0       	brcs	.+2      	; 0x3018 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3016:	c3 e0       	ldi	r28, 0x03	; 3
    3018:	c1 50       	subi	r28, 0x01	; 1
    301a:	c0 f0       	brcs	.+48     	; 0x304c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    301c:	28 e0       	ldi	r18, 0x08	; 8
    301e:	c2 9f       	mul	r28, r18
    3020:	c0 01       	movw	r24, r0
    3022:	11 24       	eor	r1, r1
    3024:	a3 01       	movw	r20, r6
    3026:	92 01       	movw	r18, r4
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    302a:	56 95       	lsr	r21
    302c:	47 95       	ror	r20
    302e:	37 95       	ror	r19
    3030:	27 95       	ror	r18
    3032:	8a 95       	dec	r24
    3034:	d2 f7       	brpl	.-12     	; 0x302a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3036:	ca 01       	movw	r24, r20
    3038:	b9 01       	movw	r22, r18
    303a:	d5 01       	movw	r26, r10
    303c:	ed 91       	ld	r30, X+
    303e:	fc 91       	ld	r31, X
    3040:	01 90       	ld	r0, Z+
    3042:	f0 81       	ld	r31, Z
    3044:	e0 2d       	mov	r30, r0
    3046:	c5 01       	movw	r24, r10
    3048:	09 95       	icall
    304a:	e6 cf       	rjmp	.-52     	; 0x3018 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	c5 01       	movw	r24, r10
    3050:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_ZN7TwoWire15endTransmissionEh>
    3054:	4d 2f       	mov	r20, r29
    3056:	d1 32       	cpi	r29, 0x21	; 33
    3058:	08 f0       	brcs	.+2      	; 0x305c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	2c 2d       	mov	r18, r12
    305e:	6c e7       	ldi	r22, 0x7C	; 124
    3060:	73 e0       	ldi	r23, 0x03	; 3
    3062:	8f 2d       	mov	r24, r15
    3064:	0e 94 e6 14 	call	0x29cc	; 0x29cc <twi_readFrom>
    3068:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    306c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    3070:	df 91       	pop	r29
    3072:	cf 91       	pop	r28
    3074:	1f 91       	pop	r17
    3076:	0f 91       	pop	r16
    3078:	ff 90       	pop	r15
    307a:	ef 90       	pop	r14
    307c:	cf 90       	pop	r12
    307e:	bf 90       	pop	r11
    3080:	af 90       	pop	r10
    3082:	7f 90       	pop	r7
    3084:	6f 90       	pop	r6
    3086:	5f 90       	pop	r5
    3088:	4f 90       	pop	r4
    308a:	08 95       	ret

0000308c <_ZN7TwoWire11requestFromEhhh>:
    308c:	cf 92       	push	r12
    308e:	ef 92       	push	r14
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	c2 2e       	mov	r12, r18
    3096:	e1 2c       	mov	r14, r1
    3098:	00 e0       	ldi	r16, 0x00	; 0
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	98 01       	movw	r18, r16
    309e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <_ZN7TwoWire11requestFromEhhmhh>
    30a2:	1f 91       	pop	r17
    30a4:	0f 91       	pop	r16
    30a6:	ef 90       	pop	r14
    30a8:	cf 90       	pop	r12
    30aa:	08 95       	ret

000030ac <_ZN7TwoWire11requestFromEii>:
    30ac:	21 e0       	ldi	r18, 0x01	; 1
    30ae:	0c 94 46 18 	jmp	0x308c	; 0x308c <_ZN7TwoWire11requestFromEhhh>

000030b2 <_ZN7TwoWire15endTransmissionEv>:
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <_ZN7TwoWire15endTransmissionEh>

000030b8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    30b8:	86 e4       	ldi	r24, 0x46	; 70
    30ba:	93 e0       	ldi	r25, 0x03	; 3
    30bc:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <_ZN7TwoWireC1Ev>

000030c0 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    30c0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    30c4:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    30c8:	0e 94 58 22 	call	0x44b0	; 0x44b0 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    30cc:	69 ee       	ldi	r22, 0xE9	; 233
    30ce:	76 e0       	ldi	r23, 0x06	; 6
    30d0:	8e e9       	ldi	r24, 0x9E	; 158
    30d2:	93 e0       	ldi	r25, 0x03	; 3
    30d4:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>

000030d8 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    30de:	64 ee       	ldi	r22, 0xE4	; 228
    30e0:	76 e0       	ldi	r23, 0x06	; 6
    30e2:	8e e9       	ldi	r24, 0x9E	; 158
    30e4:	93 e0       	ldi	r25, 0x03	; 3
    30e6:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    30ea:	84 e1       	ldi	r24, 0x14	; 20
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 c0 21 	call	0x4380	; 0x4380 <malloc>
    30f2:	fc 01       	movw	r30, r24
    30f4:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <_mockData+0x1>
    30f8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	92 83       	std	Z+2, r25	; 0x02
    3102:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    3104:	8a e0       	ldi	r24, 0x0A	; 10
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	96 83       	std	Z+6, r25	; 0x06
    310a:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    310c:	84 e6       	ldi	r24, 0x64	; 100
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	94 83       	std	Z+4, r25	; 0x04
    3112:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    3114:	83 e3       	ldi	r24, 0x33	; 51
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	90 87       	std	Z+8, r25	; 0x08
    311a:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    311c:	83 e0       	ldi	r24, 0x03	; 3
    311e:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	94 87       	std	Z+12, r25	; 0x0c
    3126:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    3128:	84 e1       	ldi	r24, 0x14	; 20
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	90 8b       	std	Z+16, r25	; 0x10
    312e:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    3130:	88 ec       	ldi	r24, 0xC8	; 200
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	96 87       	std	Z+14, r25	; 0x0e
    3136:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    3138:	84 e3       	ldi	r24, 0x34	; 52
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	92 8b       	std	Z+18, r25	; 0x12
    313e:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    3140:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    3142:	6d eb       	ldi	r22, 0xBD	; 189
    3144:	76 e0       	ldi	r23, 0x06	; 6
    3146:	8e e9       	ldi	r24, 0x9E	; 158
    3148:	93 e0       	ldi	r25, 0x03	; 3
    314a:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    314e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    3152:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3156:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    315a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    315e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3162:	0a 96       	adiw	r24, 0x0a	; 10
    3164:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    3168:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    316c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3170:	99 83       	std	Y+1, r25	; 0x01
    3172:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    317e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3180:	91 8d       	ldd	r25, Z+25	; 0x19
    3182:	22 8d       	ldd	r18, Z+26	; 0x1a
    3184:	89 2f       	mov	r24, r25
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	80 5c       	subi	r24, 0xC0	; 192
    318a:	9f 4f       	sbci	r25, 0xFF	; 255
    318c:	82 1b       	sub	r24, r18
    318e:	91 09       	sbc	r25, r1
}
    3190:	8f 73       	andi	r24, 0x3F	; 63
    3192:	99 27       	eor	r25, r25
    3194:	08 95       	ret

00003196 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3196:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3198:	91 8d       	ldd	r25, Z+25	; 0x19
    319a:	82 8d       	ldd	r24, Z+26	; 0x1a
    319c:	98 17       	cp	r25, r24
    319e:	31 f0       	breq	.+12     	; 0x31ac <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    31a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31a2:	e8 0f       	add	r30, r24
    31a4:	f1 1d       	adc	r31, r1
    31a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    31ac:	8f ef       	ldi	r24, 0xFF	; 255
    31ae:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    31b0:	08 95       	ret

000031b2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    31b2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    31b4:	91 8d       	ldd	r25, Z+25	; 0x19
    31b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    31b8:	98 17       	cp	r25, r24
    31ba:	61 f0       	breq	.+24     	; 0x31d4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    31bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    31be:	df 01       	movw	r26, r30
    31c0:	a8 0f       	add	r26, r24
    31c2:	b1 1d       	adc	r27, r1
    31c4:	5d 96       	adiw	r26, 0x1d	; 29
    31c6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    31c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    31ca:	9f 5f       	subi	r25, 0xFF	; 255
    31cc:	9f 73       	andi	r25, 0x3F	; 63
    31ce:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    31d4:	8f ef       	ldi	r24, 0xFF	; 255
    31d6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    31d8:	08 95       	ret

000031da <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    31da:	82 e4       	ldi	r24, 0x42	; 66
    31dc:	9a e1       	ldi	r25, 0x1A	; 26
    31de:	89 2b       	or	r24, r25
    31e0:	49 f0       	breq	.+18     	; 0x31f4 <_Z14serialEventRunv+0x1a>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	89 2b       	or	r24, r25
    31e8:	29 f0       	breq	.+10     	; 0x31f4 <_Z14serialEventRunv+0x1a>
    31ea:	0e 94 42 1a 	call	0x3484	; 0x3484 <_Z17Serial0_availablev>
    31ee:	81 11       	cpse	r24, r1
    31f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    31f4:	08 95       	ret

000031f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    31f6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    31f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    31fa:	df 01       	movw	r26, r30
    31fc:	a8 0f       	add	r26, r24
    31fe:	b1 1d       	adc	r27, r1
    3200:	a3 5a       	subi	r26, 0xA3	; 163
    3202:	bf 4f       	sbci	r27, 0xFF	; 255
    3204:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3206:	84 8d       	ldd	r24, Z+28	; 0x1c
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	8f 73       	andi	r24, 0x3F	; 63
    320e:	99 27       	eor	r25, r25
    3210:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3212:	a6 89       	ldd	r26, Z+22	; 0x16
    3214:	b7 89       	ldd	r27, Z+23	; 0x17
    3216:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3218:	a0 89       	ldd	r26, Z+16	; 0x10
    321a:	b1 89       	ldd	r27, Z+17	; 0x11
    321c:	8c 91       	ld	r24, X
    321e:	80 64       	ori	r24, 0x40	; 64
    3220:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3222:	93 8d       	ldd	r25, Z+27	; 0x1b
    3224:	84 8d       	ldd	r24, Z+28	; 0x1c
    3226:	98 13       	cpse	r25, r24
    3228:	06 c0       	rjmp	.+12     	; 0x3236 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    322a:	02 88       	ldd	r0, Z+18	; 0x12
    322c:	f3 89       	ldd	r31, Z+19	; 0x13
    322e:	e0 2d       	mov	r30, r0
    3230:	80 81       	ld	r24, Z
    3232:	8f 7d       	andi	r24, 0xDF	; 223
    3234:	80 83       	st	Z, r24
    3236:	08 95       	ret

00003238 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3238:	ef 92       	push	r14
    323a:	ff 92       	push	r15
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
    3244:	ec 01       	movw	r28, r24
  _written = true;
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    324a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    324c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    324e:	98 13       	cpse	r25, r24
    3250:	05 c0       	rjmp	.+10     	; 0x325c <_ZN14HardwareSerial5writeEh+0x24>
    3252:	e8 89       	ldd	r30, Y+16	; 0x10
    3254:	f9 89       	ldd	r31, Y+17	; 0x11
    3256:	80 81       	ld	r24, Z
    3258:	85 fd       	sbrc	r24, 5
    325a:	24 c0       	rjmp	.+72     	; 0x32a4 <_ZN14HardwareSerial5writeEh+0x6c>
    325c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    325e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3260:	10 e0       	ldi	r17, 0x00	; 0
    3262:	0f 5f       	subi	r16, 0xFF	; 255
    3264:	1f 4f       	sbci	r17, 0xFF	; 255
    3266:	0f 73       	andi	r16, 0x3F	; 63
    3268:	11 27       	eor	r17, r17
    326a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    326c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    326e:	e8 12       	cpse	r14, r24
    3270:	0c c0       	rjmp	.+24     	; 0x328a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	07 fc       	sbrc	r0, 7
    3276:	fa cf       	rjmp	.-12     	; 0x326c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3278:	e8 89       	ldd	r30, Y+16	; 0x10
    327a:	f9 89       	ldd	r31, Y+17	; 0x11
    327c:	80 81       	ld	r24, Z
    327e:	85 ff       	sbrs	r24, 5
    3280:	f5 cf       	rjmp	.-22     	; 0x326c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3282:	ce 01       	movw	r24, r28
    3284:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3288:	f1 cf       	rjmp	.-30     	; 0x326c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    328a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    328c:	fe 01       	movw	r30, r28
    328e:	e8 0f       	add	r30, r24
    3290:	f1 1d       	adc	r31, r1
    3292:	e3 5a       	subi	r30, 0xA3	; 163
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3298:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    329a:	ea 89       	ldd	r30, Y+18	; 0x12
    329c:	fb 89       	ldd	r31, Y+19	; 0x13
    329e:	80 81       	ld	r24, Z
    32a0:	80 62       	ori	r24, 0x20	; 32
    32a2:	07 c0       	rjmp	.+14     	; 0x32b2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    32a4:	ee 89       	ldd	r30, Y+22	; 0x16
    32a6:	ff 89       	ldd	r31, Y+23	; 0x17
    32a8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    32aa:	e8 89       	ldd	r30, Y+16	; 0x10
    32ac:	f9 89       	ldd	r31, Y+17	; 0x11
    32ae:	80 81       	ld	r24, Z
    32b0:	80 64       	ori	r24, 0x40	; 64
    32b2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	08 95       	ret

000032c6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    32cc:	88 8d       	ldd	r24, Y+24	; 0x18
    32ce:	88 23       	and	r24, r24
    32d0:	c9 f0       	breq	.+50     	; 0x3304 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    32d2:	ea 89       	ldd	r30, Y+18	; 0x12
    32d4:	fb 89       	ldd	r31, Y+19	; 0x13
    32d6:	80 81       	ld	r24, Z
    32d8:	85 fd       	sbrc	r24, 5
    32da:	05 c0       	rjmp	.+10     	; 0x32e6 <_ZN14HardwareSerial5flushEv+0x20>
    32dc:	a8 89       	ldd	r26, Y+16	; 0x10
    32de:	b9 89       	ldd	r27, Y+17	; 0x11
    32e0:	8c 91       	ld	r24, X
    32e2:	86 fd       	sbrc	r24, 6
    32e4:	0f c0       	rjmp	.+30     	; 0x3304 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	07 fc       	sbrc	r0, 7
    32ea:	f5 cf       	rjmp	.-22     	; 0x32d6 <_ZN14HardwareSerial5flushEv+0x10>
    32ec:	80 81       	ld	r24, Z
    32ee:	85 ff       	sbrs	r24, 5
    32f0:	f2 cf       	rjmp	.-28     	; 0x32d6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    32f2:	a8 89       	ldd	r26, Y+16	; 0x10
    32f4:	b9 89       	ldd	r27, Y+17	; 0x11
    32f6:	8c 91       	ld	r24, X
    32f8:	85 ff       	sbrs	r24, 5
    32fa:	ed cf       	rjmp	.-38     	; 0x32d6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    32fc:	ce 01       	movw	r24, r28
    32fe:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3302:	e7 cf       	rjmp	.-50     	; 0x32d2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	08 95       	ret

0000330a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	ec 01       	movw	r28, r24
    331a:	6a 01       	movw	r12, r20
    331c:	7b 01       	movw	r14, r22
    331e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3320:	e8 89       	ldd	r30, Y+16	; 0x10
    3322:	f9 89       	ldd	r31, Y+17	; 0x11
    3324:	82 e0       	ldi	r24, 0x02	; 2
    3326:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3328:	41 15       	cp	r20, r1
    332a:	51 4e       	sbci	r21, 0xE1	; 225
    332c:	61 05       	cpc	r22, r1
    332e:	71 05       	cpc	r23, r1
    3330:	b1 f0       	breq	.+44     	; 0x335e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	79 e0       	ldi	r23, 0x09	; 9
    3336:	8d e3       	ldi	r24, 0x3D	; 61
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a7 01       	movw	r20, r14
    333c:	96 01       	movw	r18, r12
    333e:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__udivmodsi4>
    3342:	da 01       	movw	r26, r20
    3344:	c9 01       	movw	r24, r18
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	a1 09       	sbc	r26, r1
    334a:	b1 09       	sbc	r27, r1
    334c:	b6 95       	lsr	r27
    334e:	a7 95       	ror	r26
    3350:	97 95       	ror	r25
    3352:	87 95       	ror	r24
    3354:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3356:	21 15       	cp	r18, r1
    3358:	80 e1       	ldi	r24, 0x10	; 16
    335a:	38 07       	cpc	r19, r24
    335c:	a8 f0       	brcs	.+42     	; 0x3388 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    335e:	e8 89       	ldd	r30, Y+16	; 0x10
    3360:	f9 89       	ldd	r31, Y+17	; 0x11
    3362:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3364:	60 e8       	ldi	r22, 0x80	; 128
    3366:	74 e8       	ldi	r23, 0x84	; 132
    3368:	8e e1       	ldi	r24, 0x1E	; 30
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	a7 01       	movw	r20, r14
    336e:	96 01       	movw	r18, r12
    3370:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__udivmodsi4>
    3374:	da 01       	movw	r26, r20
    3376:	c9 01       	movw	r24, r18
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	a1 09       	sbc	r26, r1
    337c:	b1 09       	sbc	r27, r1
    337e:	b6 95       	lsr	r27
    3380:	a7 95       	ror	r26
    3382:	97 95       	ror	r25
    3384:	87 95       	ror	r24
    3386:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3388:	ec 85       	ldd	r30, Y+12	; 0x0c
    338a:	fd 85       	ldd	r31, Y+13	; 0x0d
    338c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    338e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3390:	ff 85       	ldd	r31, Y+15	; 0x0f
    3392:	20 83       	st	Z, r18

  _written = false;
    3394:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3396:	ec 89       	ldd	r30, Y+20	; 0x14
    3398:	fd 89       	ldd	r31, Y+21	; 0x15
    339a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    339c:	ea 89       	ldd	r30, Y+18	; 0x12
    339e:	fb 89       	ldd	r31, Y+19	; 0x13
    33a0:	80 81       	ld	r24, Z
    33a2:	80 61       	ori	r24, 0x10	; 16
    33a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    33a6:	ea 89       	ldd	r30, Y+18	; 0x12
    33a8:	fb 89       	ldd	r31, Y+19	; 0x13
    33aa:	80 81       	ld	r24, Z
    33ac:	88 60       	ori	r24, 0x08	; 8
    33ae:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    33b0:	ea 89       	ldd	r30, Y+18	; 0x12
    33b2:	fb 89       	ldd	r31, Y+19	; 0x13
    33b4:	80 81       	ld	r24, Z
    33b6:	80 68       	ori	r24, 0x80	; 128
    33b8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    33ba:	ea 89       	ldd	r30, Y+18	; 0x12
    33bc:	fb 89       	ldd	r31, Y+19	; 0x13
    33be:	80 81       	ld	r24, Z
    33c0:	8f 7d       	andi	r24, 0xDF	; 223
    33c2:	80 83       	st	Z, r24
}
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	df 90       	pop	r13
    33d0:	cf 90       	pop	r12
    33d2:	08 95       	ret

000033d4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    33d4:	1f 92       	push	r1
    33d6:	0f 92       	push	r0
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	0f 92       	push	r0
    33dc:	11 24       	eor	r1, r1
    33de:	2f 93       	push	r18
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	ef 93       	push	r30
    33e6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    33e8:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <Serial+0x10>
    33ec:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <Serial+0x11>
    33f0:	80 81       	ld	r24, Z
    33f2:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <Serial+0x16>
    33f6:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <Serial+0x17>
    33fa:	82 fd       	sbrc	r24, 2
    33fc:	12 c0       	rjmp	.+36     	; 0x3422 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    33fe:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3400:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <Serial+0x19>
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3408:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <Serial+0x1a>
    340c:	82 17       	cp	r24, r18
    340e:	51 f0       	breq	.+20     	; 0x3424 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3410:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <Serial+0x19>
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	e2 56       	subi	r30, 0x62	; 98
    3418:	fc 4f       	sbci	r31, 0xFC	; 252
    341a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    341c:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <Serial+0x19>
    3420:	01 c0       	rjmp	.+2      	; 0x3424 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3422:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3424:	ff 91       	pop	r31
    3426:	ef 91       	pop	r30
    3428:	9f 91       	pop	r25
    342a:	8f 91       	pop	r24
    342c:	2f 91       	pop	r18
    342e:	0f 90       	pop	r0
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	0f 90       	pop	r0
    3434:	1f 90       	pop	r1
    3436:	18 95       	reti

00003438 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3438:	1f 92       	push	r1
    343a:	0f 92       	push	r0
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	0f 92       	push	r0
    3440:	11 24       	eor	r1, r1
    3442:	2f 93       	push	r18
    3444:	3f 93       	push	r19
    3446:	4f 93       	push	r20
    3448:	5f 93       	push	r21
    344a:	6f 93       	push	r22
    344c:	7f 93       	push	r23
    344e:	8f 93       	push	r24
    3450:	9f 93       	push	r25
    3452:	af 93       	push	r26
    3454:	bf 93       	push	r27
    3456:	ef 93       	push	r30
    3458:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    345a:	8e e9       	ldi	r24, 0x9E	; 158
    345c:	93 e0       	ldi	r25, 0x03	; 3
    345e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3462:	ff 91       	pop	r31
    3464:	ef 91       	pop	r30
    3466:	bf 91       	pop	r27
    3468:	af 91       	pop	r26
    346a:	9f 91       	pop	r25
    346c:	8f 91       	pop	r24
    346e:	7f 91       	pop	r23
    3470:	6f 91       	pop	r22
    3472:	5f 91       	pop	r21
    3474:	4f 91       	pop	r20
    3476:	3f 91       	pop	r19
    3478:	2f 91       	pop	r18
    347a:	0f 90       	pop	r0
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	0f 90       	pop	r0
    3480:	1f 90       	pop	r1
    3482:	18 95       	reti

00003484 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3484:	8e e9       	ldi	r24, 0x9E	; 158
    3486:	93 e0       	ldi	r25, 0x03	; 3
    3488:	0e 94 bf 18 	call	0x317e	; 0x317e <_ZN14HardwareSerial9availableEv>
    348c:	21 e0       	ldi	r18, 0x01	; 1
    348e:	89 2b       	or	r24, r25
    3490:	09 f4       	brne	.+2      	; 0x3494 <_Z17Serial0_availablev+0x10>
    3492:	20 e0       	ldi	r18, 0x00	; 0
}
    3494:	82 2f       	mov	r24, r18
    3496:	08 95       	ret

00003498 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3498:	ee e9       	ldi	r30, 0x9E	; 158
    349a:	f3 e0       	ldi	r31, 0x03	; 3
    349c:	13 82       	std	Z+3, r1	; 0x03
    349e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    34a0:	88 ee       	ldi	r24, 0xE8	; 232
    34a2:	93 e0       	ldi	r25, 0x03	; 3
    34a4:	a0 e0       	ldi	r26, 0x00	; 0
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	84 83       	std	Z+4, r24	; 0x04
    34aa:	95 83       	std	Z+5, r25	; 0x05
    34ac:	a6 83       	std	Z+6, r26	; 0x06
    34ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    34b0:	8e e6       	ldi	r24, 0x6E	; 110
    34b2:	91 e0       	ldi	r25, 0x01	; 1
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	80 83       	st	Z, r24
    34b8:	85 ec       	ldi	r24, 0xC5	; 197
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	95 87       	std	Z+13, r25	; 0x0d
    34be:	84 87       	std	Z+12, r24	; 0x0c
    34c0:	84 ec       	ldi	r24, 0xC4	; 196
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	97 87       	std	Z+15, r25	; 0x0f
    34c6:	86 87       	std	Z+14, r24	; 0x0e
    34c8:	80 ec       	ldi	r24, 0xC0	; 192
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	91 8b       	std	Z+17, r25	; 0x11
    34ce:	80 8b       	std	Z+16, r24	; 0x10
    34d0:	81 ec       	ldi	r24, 0xC1	; 193
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	93 8b       	std	Z+19, r25	; 0x13
    34d6:	82 8b       	std	Z+18, r24	; 0x12
    34d8:	82 ec       	ldi	r24, 0xC2	; 194
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	95 8b       	std	Z+21, r25	; 0x15
    34de:	84 8b       	std	Z+20, r24	; 0x14
    34e0:	86 ec       	ldi	r24, 0xC6	; 198
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	97 8b       	std	Z+23, r25	; 0x17
    34e6:	86 8b       	std	Z+22, r24	; 0x16
    34e8:	11 8e       	std	Z+25, r1	; 0x19
    34ea:	12 8e       	std	Z+26, r1	; 0x1a
    34ec:	13 8e       	std	Z+27, r1	; 0x1b
    34ee:	14 8e       	std	Z+28, r1	; 0x1c
    34f0:	08 95       	ret

000034f2 <initVariant>:
    34f2:	08 95       	ret

000034f4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    34f4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <init>

	initVariant();
    34f8:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    34fc:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3500:	cd ee       	ldi	r28, 0xED	; 237
    3502:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    3504:	0e 94 53 13 	call	0x26a6	; 0x26a6 <loop>
		if (serialEventRun) serialEventRun();
    3508:	20 97       	sbiw	r28, 0x00	; 0
    350a:	e1 f3       	breq	.-8      	; 0x3504 <main+0x10>
    350c:	0e 94 ed 18 	call	0x31da	; 0x31da <_Z14serialEventRunv>
    3510:	f9 cf       	rjmp	.-14     	; 0x3504 <main+0x10>

00003512 <_Znwj>:
    3512:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <malloc>

00003516 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    3516:	cf 92       	push	r12
    3518:	df 92       	push	r13
    351a:	ef 92       	push	r14
    351c:	ff 92       	push	r15
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	6c 01       	movw	r12, r24
    3528:	7a 01       	movw	r14, r20
    352a:	8b 01       	movw	r16, r22
    352c:	c0 e0       	ldi	r28, 0x00	; 0
    352e:	d0 e0       	ldi	r29, 0x00	; 0
    3530:	ce 15       	cp	r28, r14
    3532:	df 05       	cpc	r29, r15
    3534:	81 f0       	breq	.+32     	; 0x3556 <_ZN5Print5writeEPKhj+0x40>
    3536:	d8 01       	movw	r26, r16
    3538:	6d 91       	ld	r22, X+
    353a:	8d 01       	movw	r16, r26
    353c:	d6 01       	movw	r26, r12
    353e:	ed 91       	ld	r30, X+
    3540:	fc 91       	ld	r31, X
    3542:	01 90       	ld	r0, Z+
    3544:	f0 81       	ld	r31, Z
    3546:	e0 2d       	mov	r30, r0
    3548:	c6 01       	movw	r24, r12
    354a:	09 95       	icall
    354c:	89 2b       	or	r24, r25
    354e:	11 f0       	breq	.+4      	; 0x3554 <_ZN5Print5writeEPKhj+0x3e>
    3550:	21 96       	adiw	r28, 0x01	; 1
    3552:	ee cf       	rjmp	.-36     	; 0x3530 <_ZN5Print5writeEPKhj+0x1a>
    3554:	7e 01       	movw	r14, r28
    3556:	c7 01       	movw	r24, r14
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	1f 91       	pop	r17
    355e:	0f 91       	pop	r16
    3560:	ff 90       	pop	r15
    3562:	ef 90       	pop	r14
    3564:	df 90       	pop	r13
    3566:	cf 90       	pop	r12
    3568:	08 95       	ret

0000356a <_ZN5Print5writeEPKc>:
    356a:	61 15       	cp	r22, r1
    356c:	71 05       	cpc	r23, r1
    356e:	79 f0       	breq	.+30     	; 0x358e <_ZN5Print5writeEPKc+0x24>
    3570:	fb 01       	movw	r30, r22
    3572:	01 90       	ld	r0, Z+
    3574:	00 20       	and	r0, r0
    3576:	e9 f7       	brne	.-6      	; 0x3572 <_ZN5Print5writeEPKc+0x8>
    3578:	31 97       	sbiw	r30, 0x01	; 1
    357a:	af 01       	movw	r20, r30
    357c:	46 1b       	sub	r20, r22
    357e:	57 0b       	sbc	r21, r23
    3580:	dc 01       	movw	r26, r24
    3582:	ed 91       	ld	r30, X+
    3584:	fc 91       	ld	r31, X
    3586:	02 80       	ldd	r0, Z+2	; 0x02
    3588:	f3 81       	ldd	r31, Z+3	; 0x03
    358a:	e0 2d       	mov	r30, r0
    358c:	09 94       	ijmp
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	08 95       	ret

00003594 <_ZN5Print5printEPK19__FlashStringHelper>:
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	8c 01       	movw	r16, r24
    35a2:	7b 01       	movw	r14, r22
    35a4:	c0 e0       	ldi	r28, 0x00	; 0
    35a6:	d0 e0       	ldi	r29, 0x00	; 0
    35a8:	f7 01       	movw	r30, r14
    35aa:	ec 0f       	add	r30, r28
    35ac:	fd 1f       	adc	r31, r29
    35ae:	64 91       	lpm	r22, Z
    35b0:	66 23       	and	r22, r22
    35b2:	61 f0       	breq	.+24     	; 0x35cc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    35b4:	d8 01       	movw	r26, r16
    35b6:	ed 91       	ld	r30, X+
    35b8:	fc 91       	ld	r31, X
    35ba:	01 90       	ld	r0, Z+
    35bc:	f0 81       	ld	r31, Z
    35be:	e0 2d       	mov	r30, r0
    35c0:	c8 01       	movw	r24, r16
    35c2:	09 95       	icall
    35c4:	89 2b       	or	r24, r25
    35c6:	11 f0       	breq	.+4      	; 0x35cc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    35c8:	21 96       	adiw	r28, 0x01	; 1
    35ca:	ee cf       	rjmp	.-36     	; 0x35a8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    35cc:	ce 01       	movw	r24, r28
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	ff 90       	pop	r15
    35d8:	ef 90       	pop	r14
    35da:	08 95       	ret

000035dc <_ZN5Print5printERK6String>:
    35dc:	db 01       	movw	r26, r22
    35de:	14 96       	adiw	r26, 0x04	; 4
    35e0:	4d 91       	ld	r20, X+
    35e2:	5c 91       	ld	r21, X
    35e4:	15 97       	sbiw	r26, 0x05	; 5
    35e6:	6d 91       	ld	r22, X+
    35e8:	7c 91       	ld	r23, X
    35ea:	dc 01       	movw	r26, r24
    35ec:	ed 91       	ld	r30, X+
    35ee:	fc 91       	ld	r31, X
    35f0:	02 80       	ldd	r0, Z+2	; 0x02
    35f2:	f3 81       	ldd	r31, Z+3	; 0x03
    35f4:	e0 2d       	mov	r30, r0
    35f6:	09 94       	ijmp

000035f8 <_ZN5Print5printEPKc>:
    35f8:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <_ZN5Print5writeEPKc>

000035fc <_ZN5Print5printEc>:
    35fc:	dc 01       	movw	r26, r24
    35fe:	ed 91       	ld	r30, X+
    3600:	fc 91       	ld	r31, X
    3602:	01 90       	ld	r0, Z+
    3604:	f0 81       	ld	r31, Z
    3606:	e0 2d       	mov	r30, r0
    3608:	09 94       	ijmp

0000360a <_ZN5Print7printlnEv>:
    360a:	6a e7       	ldi	r22, 0x7A	; 122
    360c:	71 e0       	ldi	r23, 0x01	; 1
    360e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <_ZN5Print5writeEPKc>

00003612 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	ec 01       	movw	r28, r24
    361c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN5Print5printEPK19__FlashStringHelper>
    3620:	8c 01       	movw	r16, r24
    3622:	ce 01       	movw	r24, r28
    3624:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
    3628:	80 0f       	add	r24, r16
    362a:	91 1f       	adc	r25, r17
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	08 95       	ret

00003636 <_ZN5Print7printlnEPKc>:
    3636:	0f 93       	push	r16
    3638:	1f 93       	push	r17
    363a:	cf 93       	push	r28
    363c:	df 93       	push	r29
    363e:	ec 01       	movw	r28, r24
    3640:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN5Print5writeEPKc>
    3644:	8c 01       	movw	r16, r24
    3646:	ce 01       	movw	r24, r28
    3648:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
    364c:	80 0f       	add	r24, r16
    364e:	91 1f       	adc	r25, r17
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	08 95       	ret

0000365a <_ZN5Print7printlnEc>:
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	ec 01       	movw	r28, r24
    3664:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN5Print5printEc>
    3668:	8c 01       	movw	r16, r24
    366a:	ce 01       	movw	r24, r28
    366c:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
    3670:	80 0f       	add	r24, r16
    3672:	91 1f       	adc	r25, r17
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	08 95       	ret

0000367e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	a1 97       	sbiw	r28, 0x21	; 33
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	7c 01       	movw	r14, r24
    36a4:	fa 01       	movw	r30, r20
    36a6:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    36a8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    36aa:	22 30       	cpi	r18, 0x02	; 2
    36ac:	08 f4       	brcc	.+2      	; 0x36b0 <_ZN5Print11printNumberEmh+0x32>
    36ae:	2a e0       	ldi	r18, 0x0A	; 10
    36b0:	8e 01       	movw	r16, r28
    36b2:	0f 5d       	subi	r16, 0xDF	; 223
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    36b6:	82 2e       	mov	r8, r18
    36b8:	91 2c       	mov	r9, r1
    36ba:	a1 2c       	mov	r10, r1
    36bc:	b1 2c       	mov	r11, r1
    36be:	bf 01       	movw	r22, r30
    36c0:	a5 01       	movw	r20, r10
    36c2:	94 01       	movw	r18, r8
    36c4:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__udivmodsi4>
    n /= base;
    36c8:	f9 01       	movw	r30, r18
    36ca:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    36cc:	01 50       	subi	r16, 0x01	; 1
    36ce:	11 09       	sbc	r17, r1
    36d0:	6a 30       	cpi	r22, 0x0A	; 10
    36d2:	10 f4       	brcc	.+4      	; 0x36d8 <_ZN5Print11printNumberEmh+0x5a>
    36d4:	60 5d       	subi	r22, 0xD0	; 208
    36d6:	01 c0       	rjmp	.+2      	; 0x36da <_ZN5Print11printNumberEmh+0x5c>
    36d8:	69 5c       	subi	r22, 0xC9	; 201
    36da:	d8 01       	movw	r26, r16
    36dc:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    36de:	23 2b       	or	r18, r19
    36e0:	24 2b       	or	r18, r20
    36e2:	25 2b       	or	r18, r21
    36e4:	61 f7       	brne	.-40     	; 0x36be <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    36e6:	b8 01       	movw	r22, r16
    36e8:	c7 01       	movw	r24, r14
    36ea:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN5Print5writeEPKc>
}
    36ee:	a1 96       	adiw	r28, 0x21	; 33
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	df 91       	pop	r29
    36fc:	cf 91       	pop	r28
    36fe:	1f 91       	pop	r17
    3700:	0f 91       	pop	r16
    3702:	ff 90       	pop	r15
    3704:	ef 90       	pop	r14
    3706:	bf 90       	pop	r11
    3708:	af 90       	pop	r10
    370a:	9f 90       	pop	r9
    370c:	8f 90       	pop	r8
    370e:	08 95       	ret

00003710 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    3710:	21 15       	cp	r18, r1
    3712:	31 05       	cpc	r19, r1
    3714:	41 f4       	brne	.+16     	; 0x3726 <_ZN5Print5printEmi+0x16>
    3716:	dc 01       	movw	r26, r24
    3718:	ed 91       	ld	r30, X+
    371a:	fc 91       	ld	r31, X
    371c:	01 90       	ld	r0, Z+
    371e:	f0 81       	ld	r31, Z
    3720:	e0 2d       	mov	r30, r0
    3722:	64 2f       	mov	r22, r20
    3724:	09 94       	ijmp
  else return printNumber(n, base);
    3726:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <_ZN5Print11printNumberEmh>

0000372a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    372a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    372c:	46 2f       	mov	r20, r22
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <_ZN5Print5printEmi>

00003738 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3738:	0f 93       	push	r16
    373a:	1f 93       	push	r17
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3742:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN5Print5printEhi>
    3746:	8c 01       	movw	r16, r24
  n += println();
    3748:	ce 01       	movw	r24, r28
    374a:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
  return n;
}
    374e:	80 0f       	add	r24, r16
    3750:	91 1f       	adc	r25, r17
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	08 95       	ret

0000375c <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    375c:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    375e:	ab 01       	movw	r20, r22
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	70 e0       	ldi	r23, 0x00	; 0
    3764:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <_ZN5Print5printEmi>

00003768 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    3768:	0f 93       	push	r16
    376a:	1f 93       	push	r17
    376c:	cf 93       	push	r28
    376e:	df 93       	push	r29
    3770:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3772:	0e 94 ae 1b 	call	0x375c	; 0x375c <_ZN5Print5printEji>
    3776:	8c 01       	movw	r16, r24
  n += println();
    3778:	ce 01       	movw	r24, r28
    377a:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
  return n;
}
    377e:	80 0f       	add	r24, r16
    3780:	91 1f       	adc	r25, r17
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	08 95       	ret

0000378c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3796:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN5Print5printEmi>
    379a:	8c 01       	movw	r16, r24
  n += println();
    379c:	ce 01       	movw	r24, r28
    379e:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
  return n;
}
    37a2:	80 0f       	add	r24, r16
    37a4:	91 1f       	adc	r25, r17
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	08 95       	ret

000037b0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    37b0:	cf 92       	push	r12
    37b2:	df 92       	push	r13
    37b4:	ef 92       	push	r14
    37b6:	ff 92       	push	r15
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
  if (base == 0) {
    37c0:	21 15       	cp	r18, r1
    37c2:	31 05       	cpc	r19, r1
    37c4:	81 f4       	brne	.+32     	; 0x37e6 <_ZN5Print5printEli+0x36>
    return write(n);
    37c6:	dc 01       	movw	r26, r24
    37c8:	ed 91       	ld	r30, X+
    37ca:	fc 91       	ld	r31, X
    37cc:	01 90       	ld	r0, Z+
    37ce:	f0 81       	ld	r31, Z
    37d0:	e0 2d       	mov	r30, r0
    37d2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    37e4:	09 94       	ijmp
  } else if (base == 10) {
    37e6:	2a 30       	cpi	r18, 0x0A	; 10
    37e8:	31 05       	cpc	r19, r1
    37ea:	01 f5       	brne	.+64     	; 0x382c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    37ec:	77 ff       	sbrs	r23, 7
    37ee:	1d c0       	rjmp	.+58     	; 0x382a <_ZN5Print5printEli+0x7a>
    37f0:	6a 01       	movw	r12, r20
    37f2:	7b 01       	movw	r14, r22
    37f4:	ec 01       	movw	r28, r24
      int t = print('-');
    37f6:	6d e2       	ldi	r22, 0x2D	; 45
    37f8:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN5Print5printEc>
    37fc:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    37fe:	44 27       	eor	r20, r20
    3800:	55 27       	eor	r21, r21
    3802:	ba 01       	movw	r22, r20
    3804:	4c 19       	sub	r20, r12
    3806:	5d 09       	sbc	r21, r13
    3808:	6e 09       	sbc	r22, r14
    380a:	7f 09       	sbc	r23, r15
    380c:	2a e0       	ldi	r18, 0x0A	; 10
    380e:	ce 01       	movw	r24, r28
    3810:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN5Print11printNumberEmh>
    3814:	80 0f       	add	r24, r16
    3816:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	1f 91       	pop	r17
    381e:	0f 91       	pop	r16
    3820:	ff 90       	pop	r15
    3822:	ef 90       	pop	r14
    3824:	df 90       	pop	r13
    3826:	cf 90       	pop	r12
    3828:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    382a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    383c:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <_ZN5Print11printNumberEmh>

00003840 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3840:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3842:	ab 01       	movw	r20, r22
    3844:	77 0f       	add	r23, r23
    3846:	66 0b       	sbc	r22, r22
    3848:	77 0b       	sbc	r23, r23
    384a:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <_ZN5Print5printEli>

0000384e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3858:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN5Print5printEii>
    385c:	8c 01       	movw	r16, r24
  n += println();
    385e:	ce 01       	movw	r24, r28
    3860:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
  return n;
}
    3864:	80 0f       	add	r24, r16
    3866:	91 1f       	adc	r25, r17
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	08 95       	ret

00003872 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3872:	0f 93       	push	r16
    3874:	1f 93       	push	r17
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
    387a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    387c:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <_ZN5Print5printEli>
    3880:	8c 01       	movw	r16, r24
  n += println();
    3882:	ce 01       	movw	r24, r28
    3884:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN5Print7printlnEv>
  return n;
}
    3888:	80 0f       	add	r24, r16
    388a:	91 1f       	adc	r25, r17
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	08 95       	ret

00003896 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3896:	1f 92       	push	r1
    3898:	0f 92       	push	r0
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	0f 92       	push	r0
    389e:	11 24       	eor	r1, r1
    38a0:	2f 93       	push	r18
    38a2:	3f 93       	push	r19
    38a4:	8f 93       	push	r24
    38a6:	9f 93       	push	r25
    38a8:	af 93       	push	r26
    38aa:	bf 93       	push	r27
    38ac:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <timer0_millis>
    38b0:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <timer0_millis+0x1>
    38b4:	a0 91 3e 04 	lds	r26, 0x043E	; 0x80043e <timer0_millis+0x2>
    38b8:	b0 91 3f 04 	lds	r27, 0x043F	; 0x80043f <timer0_millis+0x3>
    38bc:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <timer0_fract>
    38c0:	23 e0       	ldi	r18, 0x03	; 3
    38c2:	23 0f       	add	r18, r19
    38c4:	2d 37       	cpi	r18, 0x7D	; 125
    38c6:	20 f4       	brcc	.+8      	; 0x38d0 <__vector_16+0x3a>
    38c8:	01 96       	adiw	r24, 0x01	; 1
    38ca:	a1 1d       	adc	r26, r1
    38cc:	b1 1d       	adc	r27, r1
    38ce:	05 c0       	rjmp	.+10     	; 0x38da <__vector_16+0x44>
    38d0:	26 e8       	ldi	r18, 0x86	; 134
    38d2:	23 0f       	add	r18, r19
    38d4:	02 96       	adiw	r24, 0x02	; 2
    38d6:	a1 1d       	adc	r26, r1
    38d8:	b1 1d       	adc	r27, r1
    38da:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <timer0_fract>
    38de:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <timer0_millis>
    38e2:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <timer0_millis+0x1>
    38e6:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <timer0_millis+0x2>
    38ea:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <timer0_millis+0x3>
    38ee:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    38f2:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    38f6:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    38fa:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    38fe:	01 96       	adiw	r24, 0x01	; 1
    3900:	a1 1d       	adc	r26, r1
    3902:	b1 1d       	adc	r27, r1
    3904:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <timer0_overflow_count>
    3908:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <timer0_overflow_count+0x1>
    390c:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <timer0_overflow_count+0x2>
    3910:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <timer0_overflow_count+0x3>
    3914:	bf 91       	pop	r27
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	3f 91       	pop	r19
    391e:	2f 91       	pop	r18
    3920:	0f 90       	pop	r0
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	0f 90       	pop	r0
    3926:	1f 90       	pop	r1
    3928:	18 95       	reti

0000392a <micros>:
    392a:	3f b7       	in	r19, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    3932:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    3936:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    393a:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    393e:	26 b5       	in	r18, 0x26	; 38
    3940:	a8 9b       	sbis	0x15, 0	; 21
    3942:	05 c0       	rjmp	.+10     	; 0x394e <micros+0x24>
    3944:	2f 3f       	cpi	r18, 0xFF	; 255
    3946:	19 f0       	breq	.+6      	; 0x394e <micros+0x24>
    3948:	01 96       	adiw	r24, 0x01	; 1
    394a:	a1 1d       	adc	r26, r1
    394c:	b1 1d       	adc	r27, r1
    394e:	3f bf       	out	0x3f, r19	; 63
    3950:	ba 2f       	mov	r27, r26
    3952:	a9 2f       	mov	r26, r25
    3954:	98 2f       	mov	r25, r24
    3956:	88 27       	eor	r24, r24
    3958:	82 0f       	add	r24, r18
    395a:	91 1d       	adc	r25, r1
    395c:	a1 1d       	adc	r26, r1
    395e:	b1 1d       	adc	r27, r1
    3960:	bc 01       	movw	r22, r24
    3962:	cd 01       	movw	r24, r26
    3964:	42 e0       	ldi	r20, 0x02	; 2
    3966:	66 0f       	add	r22, r22
    3968:	77 1f       	adc	r23, r23
    396a:	88 1f       	adc	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	4a 95       	dec	r20
    3970:	d1 f7       	brne	.-12     	; 0x3966 <micros+0x3c>
    3972:	08 95       	ret

00003974 <delay>:
    3974:	8f 92       	push	r8
    3976:	9f 92       	push	r9
    3978:	af 92       	push	r10
    397a:	bf 92       	push	r11
    397c:	cf 92       	push	r12
    397e:	df 92       	push	r13
    3980:	ef 92       	push	r14
    3982:	ff 92       	push	r15
    3984:	6b 01       	movw	r12, r22
    3986:	7c 01       	movw	r14, r24
    3988:	0e 94 95 1c 	call	0x392a	; 0x392a <micros>
    398c:	4b 01       	movw	r8, r22
    398e:	5c 01       	movw	r10, r24
    3990:	c1 14       	cp	r12, r1
    3992:	d1 04       	cpc	r13, r1
    3994:	e1 04       	cpc	r14, r1
    3996:	f1 04       	cpc	r15, r1
    3998:	01 f1       	breq	.+64     	; 0x39da <delay+0x66>
    399a:	0e 94 44 21 	call	0x4288	; 0x4288 <yield>
    399e:	0e 94 95 1c 	call	0x392a	; 0x392a <micros>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	88 19       	sub	r24, r8
    39a8:	99 09       	sbc	r25, r9
    39aa:	aa 09       	sbc	r26, r10
    39ac:	bb 09       	sbc	r27, r11
    39ae:	88 3e       	cpi	r24, 0xE8	; 232
    39b0:	93 40       	sbci	r25, 0x03	; 3
    39b2:	a1 05       	cpc	r26, r1
    39b4:	b1 05       	cpc	r27, r1
    39b6:	60 f3       	brcs	.-40     	; 0x3990 <delay+0x1c>
    39b8:	21 e0       	ldi	r18, 0x01	; 1
    39ba:	c2 1a       	sub	r12, r18
    39bc:	d1 08       	sbc	r13, r1
    39be:	e1 08       	sbc	r14, r1
    39c0:	f1 08       	sbc	r15, r1
    39c2:	88 ee       	ldi	r24, 0xE8	; 232
    39c4:	88 0e       	add	r8, r24
    39c6:	83 e0       	ldi	r24, 0x03	; 3
    39c8:	98 1e       	adc	r9, r24
    39ca:	a1 1c       	adc	r10, r1
    39cc:	b1 1c       	adc	r11, r1
    39ce:	c1 14       	cp	r12, r1
    39d0:	d1 04       	cpc	r13, r1
    39d2:	e1 04       	cpc	r14, r1
    39d4:	f1 04       	cpc	r15, r1
    39d6:	19 f7       	brne	.-58     	; 0x399e <delay+0x2a>
    39d8:	db cf       	rjmp	.-74     	; 0x3990 <delay+0x1c>
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	df 90       	pop	r13
    39e0:	cf 90       	pop	r12
    39e2:	bf 90       	pop	r11
    39e4:	af 90       	pop	r10
    39e6:	9f 90       	pop	r9
    39e8:	8f 90       	pop	r8
    39ea:	08 95       	ret

000039ec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    39ec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    39ee:	84 b5       	in	r24, 0x24	; 36
    39f0:	82 60       	ori	r24, 0x02	; 2
    39f2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    39f4:	84 b5       	in	r24, 0x24	; 36
    39f6:	81 60       	ori	r24, 0x01	; 1
    39f8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    39fa:	85 b5       	in	r24, 0x25	; 37
    39fc:	82 60       	ori	r24, 0x02	; 2
    39fe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3a00:	85 b5       	in	r24, 0x25	; 37
    3a02:	81 60       	ori	r24, 0x01	; 1
    3a04:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3a06:	ee e6       	ldi	r30, 0x6E	; 110
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	81 60       	ori	r24, 0x01	; 1
    3a0e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3a10:	e1 e8       	ldi	r30, 0x81	; 129
    3a12:	f0 e0       	ldi	r31, 0x00	; 0
    3a14:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3a16:	80 81       	ld	r24, Z
    3a18:	82 60       	ori	r24, 0x02	; 2
    3a1a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3a1c:	80 81       	ld	r24, Z
    3a1e:	81 60       	ori	r24, 0x01	; 1
    3a20:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3a22:	e0 e8       	ldi	r30, 0x80	; 128
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	81 60       	ori	r24, 0x01	; 1
    3a2a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3a2c:	e1 eb       	ldi	r30, 0xB1	; 177
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	84 60       	ori	r24, 0x04	; 4
    3a34:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3a36:	e0 eb       	ldi	r30, 0xB0	; 176
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	81 60       	ori	r24, 0x01	; 1
    3a3e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3a40:	ea e7       	ldi	r30, 0x7A	; 122
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	84 60       	ori	r24, 0x04	; 4
    3a48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3a4a:	80 81       	ld	r24, Z
    3a4c:	82 60       	ori	r24, 0x02	; 2
    3a4e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3a50:	80 81       	ld	r24, Z
    3a52:	81 60       	ori	r24, 0x01	; 1
    3a54:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a56:	80 81       	ld	r24, Z
    3a58:	80 68       	ori	r24, 0x80	; 128
    3a5a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a5c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3a60:	08 95       	ret

00003a62 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3a62:	8e 30       	cpi	r24, 0x0E	; 14
    3a64:	08 f0       	brcs	.+2      	; 0x3a68 <analogRead+0x6>
    3a66:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3a68:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3a6c:	90 e4       	ldi	r25, 0x40	; 64
    3a6e:	29 9f       	mul	r18, r25
    3a70:	90 01       	movw	r18, r0
    3a72:	11 24       	eor	r1, r1
    3a74:	87 70       	andi	r24, 0x07	; 7
    3a76:	82 2b       	or	r24, r18
    3a78:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3a7c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a80:	80 64       	ori	r24, 0x40	; 64
    3a82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3a86:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a8a:	86 fd       	sbrc	r24, 6
    3a8c:	fc cf       	rjmp	.-8      	; 0x3a86 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3a8e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3a92:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3a96:	90 e0       	ldi	r25, 0x00	; 0
}
    3a98:	92 2b       	or	r25, r18
    3a9a:	08 95       	ret

00003a9c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3a9c:	83 30       	cpi	r24, 0x03	; 3
    3a9e:	81 f0       	breq	.+32     	; 0x3ac0 <turnOffPWM+0x24>
    3aa0:	28 f4       	brcc	.+10     	; 0x3aac <turnOffPWM+0x10>
    3aa2:	81 30       	cpi	r24, 0x01	; 1
    3aa4:	99 f0       	breq	.+38     	; 0x3acc <turnOffPWM+0x30>
    3aa6:	82 30       	cpi	r24, 0x02	; 2
    3aa8:	a1 f0       	breq	.+40     	; 0x3ad2 <turnOffPWM+0x36>
    3aaa:	08 95       	ret
    3aac:	87 30       	cpi	r24, 0x07	; 7
    3aae:	a9 f0       	breq	.+42     	; 0x3ada <turnOffPWM+0x3e>
    3ab0:	88 30       	cpi	r24, 0x08	; 8
    3ab2:	b9 f0       	breq	.+46     	; 0x3ae2 <turnOffPWM+0x46>
    3ab4:	84 30       	cpi	r24, 0x04	; 4
    3ab6:	d1 f4       	brne	.+52     	; 0x3aec <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3ab8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3abc:	8f 7d       	andi	r24, 0xDF	; 223
    3abe:	03 c0       	rjmp	.+6      	; 0x3ac6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3ac0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3ac4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3ac6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3aca:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3acc:	84 b5       	in	r24, 0x24	; 36
    3ace:	8f 77       	andi	r24, 0x7F	; 127
    3ad0:	02 c0       	rjmp	.+4      	; 0x3ad6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3ad2:	84 b5       	in	r24, 0x24	; 36
    3ad4:	8f 7d       	andi	r24, 0xDF	; 223
    3ad6:	84 bd       	out	0x24, r24	; 36
    3ad8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3ada:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3ade:	8f 77       	andi	r24, 0x7F	; 127
    3ae0:	03 c0       	rjmp	.+6      	; 0x3ae8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3ae2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3ae6:	8f 7d       	andi	r24, 0xDF	; 223
    3ae8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3aec:	08 95       	ret

00003aee <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	fc 01       	movw	r30, r24
    3af6:	e8 5c       	subi	r30, 0xC8	; 200
    3af8:	f8 4f       	sbci	r31, 0xF8	; 248
    3afa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3afc:	fc 01       	movw	r30, r24
    3afe:	e4 5b       	subi	r30, 0xB4	; 180
    3b00:	f8 4f       	sbci	r31, 0xF8	; 248
    3b02:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3b04:	88 23       	and	r24, r24
    3b06:	61 f1       	breq	.+88     	; 0x3b60 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	88 0f       	add	r24, r24
    3b0c:	99 1f       	adc	r25, r25
    3b0e:	fc 01       	movw	r30, r24
    3b10:	ec 58       	subi	r30, 0x8C	; 140
    3b12:	f8 4f       	sbci	r31, 0xF8	; 248
    3b14:	c5 91       	lpm	r28, Z+
    3b16:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3b18:	fc 01       	movw	r30, r24
    3b1a:	e6 59       	subi	r30, 0x96	; 150
    3b1c:	f8 4f       	sbci	r31, 0xF8	; 248
    3b1e:	a5 91       	lpm	r26, Z+
    3b20:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3b22:	61 11       	cpse	r22, r1
    3b24:	09 c0       	rjmp	.+18     	; 0x3b38 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3b26:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b28:	f8 94       	cli
		*reg &= ~bit;
    3b2a:	88 81       	ld	r24, Y
    3b2c:	20 95       	com	r18
    3b2e:	82 23       	and	r24, r18
    3b30:	88 83       	st	Y, r24
		*out &= ~bit;
    3b32:	ec 91       	ld	r30, X
    3b34:	2e 23       	and	r18, r30
    3b36:	0b c0       	rjmp	.+22     	; 0x3b4e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3b38:	62 30       	cpi	r22, 0x02	; 2
    3b3a:	61 f4       	brne	.+24     	; 0x3b54 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3b3c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b3e:	f8 94       	cli
		*reg &= ~bit;
    3b40:	88 81       	ld	r24, Y
    3b42:	32 2f       	mov	r19, r18
    3b44:	30 95       	com	r19
    3b46:	83 23       	and	r24, r19
    3b48:	88 83       	st	Y, r24
		*out |= bit;
    3b4a:	ec 91       	ld	r30, X
    3b4c:	2e 2b       	or	r18, r30
    3b4e:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b50:	9f bf       	out	0x3f, r25	; 63
    3b52:	06 c0       	rjmp	.+12     	; 0x3b60 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b54:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b56:	f8 94       	cli
		*reg |= bit;
    3b58:	e8 81       	ld	r30, Y
    3b5a:	2e 2b       	or	r18, r30
    3b5c:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b5e:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3b6c:	28 2f       	mov	r18, r24
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	f9 01       	movw	r30, r18
    3b72:	ec 5d       	subi	r30, 0xDC	; 220
    3b74:	f8 4f       	sbci	r31, 0xF8	; 248
    3b76:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3b78:	f9 01       	movw	r30, r18
    3b7a:	e8 5c       	subi	r30, 0xC8	; 200
    3b7c:	f8 4f       	sbci	r31, 0xF8	; 248
    3b7e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3b80:	f9 01       	movw	r30, r18
    3b82:	e4 5b       	subi	r30, 0xB4	; 180
    3b84:	f8 4f       	sbci	r31, 0xF8	; 248
    3b86:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3b88:	cc 23       	and	r28, r28
    3b8a:	c1 f0       	breq	.+48     	; 0x3bbc <digitalWrite+0x56>
    3b8c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3b8e:	81 11       	cpse	r24, r1
    3b90:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <turnOffPWM>

	out = portOutputRegister(port);
    3b94:	ec 2f       	mov	r30, r28
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	ee 0f       	add	r30, r30
    3b9a:	ff 1f       	adc	r31, r31
    3b9c:	e6 59       	subi	r30, 0x96	; 150
    3b9e:	f8 4f       	sbci	r31, 0xF8	; 248
    3ba0:	a5 91       	lpm	r26, Z+
    3ba2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3ba4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3ba6:	f8 94       	cli

	if (val == LOW) {
    3ba8:	11 11       	cpse	r17, r1
    3baa:	04 c0       	rjmp	.+8      	; 0x3bb4 <digitalWrite+0x4e>
		*out &= ~bit;
    3bac:	8c 91       	ld	r24, X
    3bae:	d0 95       	com	r29
    3bb0:	d8 23       	and	r29, r24
    3bb2:	02 c0       	rjmp	.+4      	; 0x3bb8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3bb4:	ec 91       	ld	r30, X
    3bb6:	de 2b       	or	r29, r30
    3bb8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3bba:	9f bf       	out	0x3f, r25	; 63
}
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	08 95       	ret

00003bc4 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <free>

00003bce <_ZN6String10invalidateEv>:
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	ec 01       	movw	r28, r24
    3bd4:	88 81       	ld	r24, Y
    3bd6:	99 81       	ldd	r25, Y+1	; 0x01
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	11 f0       	breq	.+4      	; 0x3be0 <_ZN6String10invalidateEv+0x12>
    3bdc:	0e 94 58 22 	call	0x44b0	; 0x44b0 <free>
    3be0:	19 82       	std	Y+1, r1	; 0x01
    3be2:	18 82       	st	Y, r1
    3be4:	1d 82       	std	Y+5, r1	; 0x05
    3be6:	1c 82       	std	Y+4, r1	; 0x04
    3be8:	1b 82       	std	Y+3, r1	; 0x03
    3bea:	1a 82       	std	Y+2, r1	; 0x02
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	08 95       	ret

00003bf2 <_ZN6String12changeBufferEj>:
    3bf2:	0f 93       	push	r16
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	ec 01       	movw	r28, r24
    3bfc:	8b 01       	movw	r16, r22
    3bfe:	6f 5f       	subi	r22, 0xFF	; 255
    3c00:	7f 4f       	sbci	r23, 0xFF	; 255
    3c02:	88 81       	ld	r24, Y
    3c04:	99 81       	ldd	r25, Y+1	; 0x01
    3c06:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <realloc>
    3c0a:	00 97       	sbiw	r24, 0x00	; 0
    3c0c:	31 f0       	breq	.+12     	; 0x3c1a <_ZN6String12changeBufferEj+0x28>
    3c0e:	99 83       	std	Y+1, r25	; 0x01
    3c10:	88 83       	st	Y, r24
    3c12:	1b 83       	std	Y+3, r17	; 0x03
    3c14:	0a 83       	std	Y+2, r16	; 0x02
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	01 c0       	rjmp	.+2      	; 0x3c1c <_ZN6String12changeBufferEj+0x2a>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	08 95       	ret

00003c26 <_ZN6String7reserveEj>:
    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	ec 01       	movw	r28, r24
    3c2c:	88 81       	ld	r24, Y
    3c2e:	99 81       	ldd	r25, Y+1	; 0x01
    3c30:	89 2b       	or	r24, r25
    3c32:	29 f0       	breq	.+10     	; 0x3c3e <_ZN6String7reserveEj+0x18>
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	86 17       	cp	r24, r22
    3c3a:	97 07       	cpc	r25, r23
    3c3c:	60 f4       	brcc	.+24     	; 0x3c56 <_ZN6String7reserveEj+0x30>
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <_ZN6String12changeBufferEj>
    3c44:	88 23       	and	r24, r24
    3c46:	41 f0       	breq	.+16     	; 0x3c58 <_ZN6String7reserveEj+0x32>
    3c48:	8c 81       	ldd	r24, Y+4	; 0x04
    3c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c4c:	89 2b       	or	r24, r25
    3c4e:	19 f4       	brne	.+6      	; 0x3c56 <_ZN6String7reserveEj+0x30>
    3c50:	e8 81       	ld	r30, Y
    3c52:	f9 81       	ldd	r31, Y+1	; 0x01
    3c54:	10 82       	st	Z, r1
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	08 95       	ret

00003c5e <_ZN6String4copyEPKcj>:
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	ec 01       	movw	r28, r24
    3c6c:	7b 01       	movw	r14, r22
    3c6e:	8a 01       	movw	r16, r20
    3c70:	ba 01       	movw	r22, r20
    3c72:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <_ZN6String7reserveEj>
    3c76:	81 11       	cpse	r24, r1
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <_ZN6String4copyEPKcj+0x24>
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN6String10invalidateEv>
    3c80:	07 c0       	rjmp	.+14     	; 0x3c90 <_ZN6String4copyEPKcj+0x32>
    3c82:	1d 83       	std	Y+5, r17	; 0x05
    3c84:	0c 83       	std	Y+4, r16	; 0x04
    3c86:	b7 01       	movw	r22, r14
    3c88:	88 81       	ld	r24, Y
    3c8a:	99 81       	ldd	r25, Y+1	; 0x01
    3c8c:	0e 94 05 24 	call	0x480a	; 0x480a <strcpy>
    3c90:	ce 01       	movw	r24, r28
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	ff 90       	pop	r15
    3c9c:	ef 90       	pop	r14
    3c9e:	08 95       	ret

00003ca0 <_ZN6StringC1EPKc>:
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	11 82       	std	Z+1, r1	; 0x01
    3ca4:	10 82       	st	Z, r1
    3ca6:	13 82       	std	Z+3, r1	; 0x03
    3ca8:	12 82       	std	Z+2, r1	; 0x02
    3caa:	15 82       	std	Z+5, r1	; 0x05
    3cac:	14 82       	std	Z+4, r1	; 0x04
    3cae:	61 15       	cp	r22, r1
    3cb0:	71 05       	cpc	r23, r1
    3cb2:	51 f0       	breq	.+20     	; 0x3cc8 <_ZN6StringC1EPKc+0x28>
    3cb4:	fb 01       	movw	r30, r22
    3cb6:	01 90       	ld	r0, Z+
    3cb8:	00 20       	and	r0, r0
    3cba:	e9 f7       	brne	.-6      	; 0x3cb6 <_ZN6StringC1EPKc+0x16>
    3cbc:	31 97       	sbiw	r30, 0x01	; 1
    3cbe:	af 01       	movw	r20, r30
    3cc0:	46 1b       	sub	r20, r22
    3cc2:	57 0b       	sbc	r21, r23
    3cc4:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <_ZN6String4copyEPKcj>
    3cc8:	08 95       	ret

00003cca <_ZN6StringaSERKS_>:
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	ec 01       	movw	r28, r24
    3cd0:	fb 01       	movw	r30, r22
    3cd2:	86 17       	cp	r24, r22
    3cd4:	97 07       	cpc	r25, r23
    3cd6:	61 f0       	breq	.+24     	; 0x3cf0 <_ZN6StringaSERKS_+0x26>
    3cd8:	60 81       	ld	r22, Z
    3cda:	71 81       	ldd	r23, Z+1	; 0x01
    3cdc:	61 15       	cp	r22, r1
    3cde:	71 05       	cpc	r23, r1
    3ce0:	29 f0       	breq	.+10     	; 0x3cec <_ZN6StringaSERKS_+0x22>
    3ce2:	44 81       	ldd	r20, Z+4	; 0x04
    3ce4:	55 81       	ldd	r21, Z+5	; 0x05
    3ce6:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN6String4copyEPKcj>
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <_ZN6StringaSERKS_+0x26>
    3cec:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN6String10invalidateEv>
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	08 95       	ret

00003cf8 <_ZN6StringC1ERKS_>:
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	11 82       	std	Z+1, r1	; 0x01
    3cfc:	10 82       	st	Z, r1
    3cfe:	13 82       	std	Z+3, r1	; 0x03
    3d00:	12 82       	std	Z+2, r1	; 0x02
    3d02:	15 82       	std	Z+5, r1	; 0x05
    3d04:	14 82       	std	Z+4, r1	; 0x04
    3d06:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <_ZN6StringaSERKS_>

00003d0a <_ZN6String6concatEPKcj>:
    3d0a:	ef 92       	push	r14
    3d0c:	ff 92       	push	r15
    3d0e:	0f 93       	push	r16
    3d10:	1f 93       	push	r17
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	61 15       	cp	r22, r1
    3d18:	71 05       	cpc	r23, r1
    3d1a:	11 f4       	brne	.+4      	; 0x3d20 <_ZN6String6concatEPKcj+0x16>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	1c c0       	rjmp	.+56     	; 0x3d58 <_ZN6String6concatEPKcj+0x4e>
    3d20:	41 15       	cp	r20, r1
    3d22:	51 05       	cpc	r21, r1
    3d24:	c1 f0       	breq	.+48     	; 0x3d56 <_ZN6String6concatEPKcj+0x4c>
    3d26:	7b 01       	movw	r14, r22
    3d28:	ec 01       	movw	r28, r24
    3d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d2e:	8a 01       	movw	r16, r20
    3d30:	08 0f       	add	r16, r24
    3d32:	19 1f       	adc	r17, r25
    3d34:	b8 01       	movw	r22, r16
    3d36:	ce 01       	movw	r24, r28
    3d38:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <_ZN6String7reserveEj>
    3d3c:	88 23       	and	r24, r24
    3d3e:	71 f3       	breq	.-36     	; 0x3d1c <_ZN6String6concatEPKcj+0x12>
    3d40:	28 81       	ld	r18, Y
    3d42:	39 81       	ldd	r19, Y+1	; 0x01
    3d44:	8c 81       	ldd	r24, Y+4	; 0x04
    3d46:	9d 81       	ldd	r25, Y+5	; 0x05
    3d48:	b7 01       	movw	r22, r14
    3d4a:	82 0f       	add	r24, r18
    3d4c:	93 1f       	adc	r25, r19
    3d4e:	0e 94 05 24 	call	0x480a	; 0x480a <strcpy>
    3d52:	1d 83       	std	Y+5, r17	; 0x05
    3d54:	0c 83       	std	Y+4, r16	; 0x04
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	08 95       	ret

00003d66 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3d66:	ef 92       	push	r14
    3d68:	ff 92       	push	r15
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <_ZN6String6concatEh+0xe>
    3d74:	00 d0       	rcall	.+0      	; 0x3d76 <_ZN6String6concatEh+0x10>
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    3d7a:	7c 01       	movw	r14, r24
    3d7c:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3d7e:	4a e0       	ldi	r20, 0x0A	; 10
    3d80:	8e 01       	movw	r16, r28
    3d82:	0f 5f       	subi	r16, 0xFF	; 255
    3d84:	1f 4f       	sbci	r17, 0xFF	; 255
    3d86:	b8 01       	movw	r22, r16
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0e 94 0c 24 	call	0x4818	; 0x4818 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3d8e:	f8 01       	movw	r30, r16
    3d90:	01 90       	ld	r0, Z+
    3d92:	00 20       	and	r0, r0
    3d94:	e9 f7       	brne	.-6      	; 0x3d90 <_ZN6String6concatEh+0x2a>
    3d96:	31 97       	sbiw	r30, 0x01	; 1
    3d98:	af 01       	movw	r20, r30
    3d9a:	40 1b       	sub	r20, r16
    3d9c:	51 0b       	sbc	r21, r17
    3d9e:	b8 01       	movw	r22, r16
    3da0:	c7 01       	movw	r24, r14
    3da2:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <_ZN6String6concatEPKcj>
}
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	1f 91       	pop	r17
    3db4:	0f 91       	pop	r16
    3db6:	ff 90       	pop	r15
    3db8:	ef 90       	pop	r14
    3dba:	08 95       	ret

00003dbc <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3dbc:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3dc0:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3dc4:	28 17       	cp	r18, r24
    3dc6:	39 07       	cpc	r19, r25
    3dc8:	b9 f4       	brne	.+46     	; 0x3df8 <_ZN14SoftwareSerial4readEv+0x3c>
    3dca:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3dce:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3dd2:	98 17       	cp	r25, r24
    3dd4:	89 f0       	breq	.+34     	; 0x3df8 <_ZN14SoftwareSerial4readEv+0x3c>
    3dd6:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	ea 5b       	subi	r30, 0xBA	; 186
    3dde:	fb 4f       	sbci	r31, 0xFB	; 251
    3de0:	80 81       	ld	r24, Z
    3de2:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	2f 5f       	subi	r18, 0xFF	; 255
    3dea:	3f 4f       	sbci	r19, 0xFF	; 255
    3dec:	2f 73       	andi	r18, 0x3F	; 63
    3dee:	33 27       	eor	r19, r19
    3df0:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	08 95       	ret
    3df8:	8f ef       	ldi	r24, 0xFF	; 255
    3dfa:	9f ef       	ldi	r25, 0xFF	; 255
    3dfc:	08 95       	ret

00003dfe <_ZN14SoftwareSerial5writeEh>:
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	dc 01       	movw	r26, r24
    3e06:	5c 96       	adiw	r26, 0x1c	; 28
    3e08:	8d 91       	ld	r24, X+
    3e0a:	9c 91       	ld	r25, X
    3e0c:	5d 97       	sbiw	r26, 0x1d	; 29
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	39 f4       	brne	.+14     	; 0x3e20 <_ZN14SoftwareSerial5writeEh+0x22>
    3e12:	21 e0       	ldi	r18, 0x01	; 1
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	13 96       	adiw	r26, 0x03	; 3
    3e18:	3c 93       	st	X, r19
    3e1a:	2e 93       	st	-X, r18
    3e1c:	12 97       	sbiw	r26, 0x02	; 2
    3e1e:	3b c0       	rjmp	.+118    	; 0x3e96 <_ZN14SoftwareSerial5writeEh+0x98>
    3e20:	51 96       	adiw	r26, 0x11	; 17
    3e22:	ed 91       	ld	r30, X+
    3e24:	fc 91       	ld	r31, X
    3e26:	52 97       	sbiw	r26, 0x12	; 18
    3e28:	50 96       	adiw	r26, 0x10	; 16
    3e2a:	2c 91       	ld	r18, X
    3e2c:	50 97       	sbiw	r26, 0x10	; 16
    3e2e:	32 2f       	mov	r19, r18
    3e30:	30 95       	com	r19
    3e32:	1f b7       	in	r17, 0x3f	; 63
    3e34:	5e 96       	adiw	r26, 0x1e	; 30
    3e36:	4c 91       	ld	r20, X
    3e38:	5e 97       	sbiw	r26, 0x1e	; 30
    3e3a:	74 2f       	mov	r23, r20
    3e3c:	72 70       	andi	r23, 0x02	; 2
    3e3e:	41 fd       	sbrc	r20, 1
    3e40:	60 95       	com	r22
    3e42:	f8 94       	cli
    3e44:	40 81       	ld	r20, Z
    3e46:	77 23       	and	r23, r23
    3e48:	11 f0       	breq	.+4      	; 0x3e4e <_ZN14SoftwareSerial5writeEh+0x50>
    3e4a:	42 2b       	or	r20, r18
    3e4c:	01 c0       	rjmp	.+2      	; 0x3e50 <_ZN14SoftwareSerial5writeEh+0x52>
    3e4e:	43 23       	and	r20, r19
    3e50:	40 83       	st	Z, r20
    3e52:	ec 01       	movw	r28, r24
    3e54:	21 97       	sbiw	r28, 0x01	; 1
    3e56:	f1 f7       	brne	.-4      	; 0x3e54 <_ZN14SoftwareSerial5writeEh+0x56>
    3e58:	48 e0       	ldi	r20, 0x08	; 8
    3e5a:	50 81       	ld	r21, Z
    3e5c:	60 ff       	sbrs	r22, 0
    3e5e:	02 c0       	rjmp	.+4      	; 0x3e64 <_ZN14SoftwareSerial5writeEh+0x66>
    3e60:	52 2b       	or	r21, r18
    3e62:	01 c0       	rjmp	.+2      	; 0x3e66 <_ZN14SoftwareSerial5writeEh+0x68>
    3e64:	53 23       	and	r21, r19
    3e66:	50 83       	st	Z, r21
    3e68:	ec 01       	movw	r28, r24
    3e6a:	21 97       	sbiw	r28, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <_ZN14SoftwareSerial5writeEh+0x6c>
    3e6e:	66 95       	lsr	r22
    3e70:	41 50       	subi	r20, 0x01	; 1
    3e72:	99 f7       	brne	.-26     	; 0x3e5a <_ZN14SoftwareSerial5writeEh+0x5c>
    3e74:	80 81       	ld	r24, Z
    3e76:	77 23       	and	r23, r23
    3e78:	19 f0       	breq	.+6      	; 0x3e80 <_ZN14SoftwareSerial5writeEh+0x82>
    3e7a:	83 23       	and	r24, r19
    3e7c:	80 83       	st	Z, r24
    3e7e:	02 c0       	rjmp	.+4      	; 0x3e84 <_ZN14SoftwareSerial5writeEh+0x86>
    3e80:	28 2b       	or	r18, r24
    3e82:	20 83       	st	Z, r18
    3e84:	1f bf       	out	0x3f, r17	; 63
    3e86:	5c 96       	adiw	r26, 0x1c	; 28
    3e88:	8d 91       	ld	r24, X+
    3e8a:	9c 91       	ld	r25, X
    3e8c:	5d 97       	sbiw	r26, 0x1d	; 29
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <_ZN14SoftwareSerial5writeEh+0x90>
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	08 95       	ret

00003e9e <_ZN14SoftwareSerial5flushEv>:
    3e9e:	08 95       	ret

00003ea0 <_ZN14SoftwareSerial4peekEv>:
    3ea0:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3ea4:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ea8:	28 17       	cp	r18, r24
    3eaa:	39 07       	cpc	r19, r25
    3eac:	71 f4       	brne	.+28     	; 0x3eca <_ZN14SoftwareSerial4peekEv+0x2a>
    3eae:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3eb2:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3eb6:	98 17       	cp	r25, r24
    3eb8:	41 f0       	breq	.+16     	; 0x3eca <_ZN14SoftwareSerial4peekEv+0x2a>
    3eba:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	ea 5b       	subi	r30, 0xBA	; 186
    3ec2:	fb 4f       	sbci	r31, 0xFB	; 251
    3ec4:	80 81       	ld	r24, Z
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	08 95       	ret
    3eca:	8f ef       	ldi	r24, 0xFF	; 255
    3ecc:	9f ef       	ldi	r25, 0xFF	; 255
    3ece:	08 95       	ret

00003ed0 <_ZN14SoftwareSerial9availableEv>:
    3ed0:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3ed4:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ed8:	28 17       	cp	r18, r24
    3eda:	39 07       	cpc	r19, r25
    3edc:	71 f4       	brne	.+28     	; 0x3efa <_ZN14SoftwareSerial9availableEv+0x2a>
    3ede:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3ee2:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	80 5c       	subi	r24, 0xC0	; 192
    3eea:	9f 4f       	sbci	r25, 0xFF	; 255
    3eec:	82 1b       	sub	r24, r18
    3eee:	91 09       	sbc	r25, r1
    3ef0:	60 e4       	ldi	r22, 0x40	; 64
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	0e 94 65 21 	call	0x42ca	; 0x42ca <__divmodhi4>
    3ef8:	08 95       	ret
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	08 95       	ret

00003f00 <_ZN14SoftwareSerial13stopListeningEv>:
    3f00:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f04:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f08:	e8 17       	cp	r30, r24
    3f0a:	f9 07       	cpc	r31, r25
    3f0c:	69 f4       	brne	.+26     	; 0x3f28 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3f0e:	a3 89       	ldd	r26, Z+19	; 0x13
    3f10:	b4 89       	ldd	r27, Z+20	; 0x14
    3f12:	9c 91       	ld	r25, X
    3f14:	85 89       	ldd	r24, Z+21	; 0x15
    3f16:	80 95       	com	r24
    3f18:	89 23       	and	r24, r25
    3f1a:	8c 93       	st	X, r24
    3f1c:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f20:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	08 95       	ret
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	08 95       	ret

00003f2c <_ZN14SoftwareSerial6listenEv>:
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	ec 01       	movw	r28, r24
    3f32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f34:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f36:	89 2b       	or	r24, r25
    3f38:	f1 f0       	breq	.+60     	; 0x3f76 <_ZN14SoftwareSerial6listenEv+0x4a>
    3f3a:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f3e:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f42:	c8 17       	cp	r28, r24
    3f44:	d9 07       	cpc	r29, r25
    3f46:	b9 f0       	breq	.+46     	; 0x3f76 <_ZN14SoftwareSerial6listenEv+0x4a>
    3f48:	00 97       	sbiw	r24, 0x00	; 0
    3f4a:	11 f0       	breq	.+4      	; 0x3f50 <_ZN14SoftwareSerial6listenEv+0x24>
    3f4c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <_ZN14SoftwareSerial13stopListeningEv>
    3f50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f52:	8e 7f       	andi	r24, 0xFE	; 254
    3f54:	8e 8f       	std	Y+30, r24	; 0x1e
    3f56:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f5a:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f5e:	d0 93 87 04 	sts	0x0487, r29	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f62:	c0 93 86 04 	sts	0x0486, r28	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f66:	eb 89       	ldd	r30, Y+19	; 0x13
    3f68:	fc 89       	ldd	r31, Y+20	; 0x14
    3f6a:	90 81       	ld	r25, Z
    3f6c:	8d 89       	ldd	r24, Y+21	; 0x15
    3f6e:	89 2b       	or	r24, r25
    3f70:	80 83       	st	Z, r24
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <_ZN14SoftwareSerial6listenEv+0x4c>
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	df 91       	pop	r29
    3f7a:	cf 91       	pop	r28
    3f7c:	08 95       	ret

00003f7e <__vector_3>:
    3f7e:	1f 92       	push	r1
    3f80:	0f 92       	push	r0
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	0f 92       	push	r0
    3f86:	11 24       	eor	r1, r1
    3f88:	2f 93       	push	r18
    3f8a:	3f 93       	push	r19
    3f8c:	4f 93       	push	r20
    3f8e:	5f 93       	push	r21
    3f90:	6f 93       	push	r22
    3f92:	7f 93       	push	r23
    3f94:	8f 93       	push	r24
    3f96:	9f 93       	push	r25
    3f98:	af 93       	push	r26
    3f9a:	bf 93       	push	r27
    3f9c:	ef 93       	push	r30
    3f9e:	ff 93       	push	r31
    3fa0:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3fa4:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3fa8:	30 97       	sbiw	r30, 0x00	; 0
    3faa:	09 f4       	brne	.+2      	; 0x3fae <__vector_3+0x30>
    3fac:	51 c0       	rjmp	.+162    	; 0x4050 <__vector_3+0xd2>
    3fae:	96 8d       	ldd	r25, Z+30	; 0x1e
    3fb0:	a6 85       	ldd	r26, Z+14	; 0x0e
    3fb2:	b7 85       	ldd	r27, Z+15	; 0x0f
    3fb4:	85 85       	ldd	r24, Z+13	; 0x0d
    3fb6:	91 ff       	sbrs	r25, 1
    3fb8:	04 c0       	rjmp	.+8      	; 0x3fc2 <__vector_3+0x44>
    3fba:	9c 91       	ld	r25, X
    3fbc:	89 23       	and	r24, r25
    3fbe:	29 f4       	brne	.+10     	; 0x3fca <__vector_3+0x4c>
    3fc0:	47 c0       	rjmp	.+142    	; 0x4050 <__vector_3+0xd2>
    3fc2:	9c 91       	ld	r25, X
    3fc4:	89 23       	and	r24, r25
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <__vector_3+0x4c>
    3fc8:	43 c0       	rjmp	.+134    	; 0x4050 <__vector_3+0xd2>
    3fca:	a3 89       	ldd	r26, Z+19	; 0x13
    3fcc:	b4 89       	ldd	r27, Z+20	; 0x14
    3fce:	9c 91       	ld	r25, X
    3fd0:	85 89       	ldd	r24, Z+21	; 0x15
    3fd2:	80 95       	com	r24
    3fd4:	89 23       	and	r24, r25
    3fd6:	8c 93       	st	X, r24
    3fd8:	86 89       	ldd	r24, Z+22	; 0x16
    3fda:	97 89       	ldd	r25, Z+23	; 0x17
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <__vector_3+0x5e>
    3fe0:	60 8d       	ldd	r22, Z+24	; 0x18
    3fe2:	71 8d       	ldd	r23, Z+25	; 0x19
    3fe4:	a6 85       	ldd	r26, Z+14	; 0x0e
    3fe6:	b7 85       	ldd	r27, Z+15	; 0x0f
    3fe8:	55 85       	ldd	r21, Z+13	; 0x0d
    3fea:	38 e0       	ldi	r19, 0x08	; 8
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	cb 01       	movw	r24, r22
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	f1 f7       	brne	.-4      	; 0x3ff0 <__vector_3+0x72>
    3ff4:	82 2f       	mov	r24, r18
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	95 95       	asr	r25
    3ffa:	87 95       	ror	r24
    3ffc:	28 2f       	mov	r18, r24
    3ffe:	4c 91       	ld	r20, X
    4000:	45 23       	and	r20, r21
    4002:	09 f0       	breq	.+2      	; 0x4006 <__vector_3+0x88>
    4004:	20 68       	ori	r18, 0x80	; 128
    4006:	31 50       	subi	r19, 0x01	; 1
    4008:	91 f7       	brne	.-28     	; 0x3fee <__vector_3+0x70>
    400a:	86 8d       	ldd	r24, Z+30	; 0x1e
    400c:	81 fd       	sbrc	r24, 1
    400e:	20 95       	com	r18
    4010:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	01 96       	adiw	r24, 0x01	; 1
    4018:	8f 73       	andi	r24, 0x3F	; 63
    401a:	99 27       	eor	r25, r25
    401c:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4020:	38 17       	cp	r19, r24
    4022:	49 f0       	breq	.+18     	; 0x4036 <__vector_3+0xb8>
    4024:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	aa 5b       	subi	r26, 0xBA	; 186
    402c:	bb 4f       	sbci	r27, 0xFB	; 251
    402e:	2c 93       	st	X, r18
    4030:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4034:	03 c0       	rjmp	.+6      	; 0x403c <__vector_3+0xbe>
    4036:	86 8d       	ldd	r24, Z+30	; 0x1e
    4038:	81 60       	ori	r24, 0x01	; 1
    403a:	86 8f       	std	Z+30, r24	; 0x1e
    403c:	82 8d       	ldd	r24, Z+26	; 0x1a
    403e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <__vector_3+0xc2>
    4044:	a3 89       	ldd	r26, Z+19	; 0x13
    4046:	b4 89       	ldd	r27, Z+20	; 0x14
    4048:	9c 91       	ld	r25, X
    404a:	85 89       	ldd	r24, Z+21	; 0x15
    404c:	89 2b       	or	r24, r25
    404e:	8c 93       	st	X, r24
    4050:	ff 91       	pop	r31
    4052:	ef 91       	pop	r30
    4054:	bf 91       	pop	r27
    4056:	af 91       	pop	r26
    4058:	9f 91       	pop	r25
    405a:	8f 91       	pop	r24
    405c:	7f 91       	pop	r23
    405e:	6f 91       	pop	r22
    4060:	5f 91       	pop	r21
    4062:	4f 91       	pop	r20
    4064:	3f 91       	pop	r19
    4066:	2f 91       	pop	r18
    4068:	0f 90       	pop	r0
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	0f 90       	pop	r0
    406e:	1f 90       	pop	r1
    4070:	18 95       	reti

00004072 <_ZN14SoftwareSerial5setTXEh>:
    4072:	1f 93       	push	r17
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	ec 01       	movw	r28, r24
    407a:	16 2f       	mov	r17, r22
    407c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    407e:	66 95       	lsr	r22
    4080:	61 70       	andi	r22, 0x01	; 1
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	68 27       	eor	r22, r24
    4086:	81 2f       	mov	r24, r17
    4088:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
    408c:	61 e0       	ldi	r22, 0x01	; 1
    408e:	81 2f       	mov	r24, r17
    4090:	0e 94 77 1d 	call	0x3aee	; 0x3aee <pinMode>
    4094:	81 2f       	mov	r24, r17
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	fc 01       	movw	r30, r24
    409a:	e8 5c       	subi	r30, 0xC8	; 200
    409c:	f8 4f       	sbci	r31, 0xF8	; 248
    409e:	e4 91       	lpm	r30, Z
    40a0:	e8 8b       	std	Y+16, r30	; 0x10
    40a2:	fc 01       	movw	r30, r24
    40a4:	e4 5b       	subi	r30, 0xB4	; 180
    40a6:	f8 4f       	sbci	r31, 0xF8	; 248
    40a8:	e4 91       	lpm	r30, Z
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	ee 0f       	add	r30, r30
    40ae:	ff 1f       	adc	r31, r31
    40b0:	e6 59       	subi	r30, 0x96	; 150
    40b2:	f8 4f       	sbci	r31, 0xF8	; 248
    40b4:	85 91       	lpm	r24, Z+
    40b6:	94 91       	lpm	r25, Z
    40b8:	9a 8b       	std	Y+18, r25	; 0x12
    40ba:	89 8b       	std	Y+17, r24	; 0x11
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	08 95       	ret

000040c4 <_ZN14SoftwareSerial5setRXEh>:
    40c4:	1f 93       	push	r17
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	ec 01       	movw	r28, r24
    40cc:	16 2f       	mov	r17, r22
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	81 2f       	mov	r24, r17
    40d2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <pinMode>
    40d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40d8:	81 fd       	sbrc	r24, 1
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <_ZN14SoftwareSerial5setRXEh+0x20>
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	81 2f       	mov	r24, r17
    40e0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <digitalWrite>
    40e4:	1c 87       	std	Y+12, r17	; 0x0c
    40e6:	81 2f       	mov	r24, r17
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	fc 01       	movw	r30, r24
    40ec:	e8 5c       	subi	r30, 0xC8	; 200
    40ee:	f8 4f       	sbci	r31, 0xF8	; 248
    40f0:	e4 91       	lpm	r30, Z
    40f2:	ed 87       	std	Y+13, r30	; 0x0d
    40f4:	fc 01       	movw	r30, r24
    40f6:	e4 5b       	subi	r30, 0xB4	; 180
    40f8:	f8 4f       	sbci	r31, 0xF8	; 248
    40fa:	e4 91       	lpm	r30, Z
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	ee 0f       	add	r30, r30
    4100:	ff 1f       	adc	r31, r31
    4102:	e0 5a       	subi	r30, 0xA0	; 160
    4104:	f8 4f       	sbci	r31, 0xF8	; 248
    4106:	85 91       	lpm	r24, Z+
    4108:	94 91       	lpm	r25, Z
    410a:	9f 87       	std	Y+15, r25	; 0x0f
    410c:	8e 87       	std	Y+14, r24	; 0x0e
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	1f 91       	pop	r17
    4114:	08 95       	ret

00004116 <_ZN14SoftwareSerialC1Ehhb>:
    4116:	1f 93       	push	r17
    4118:	cf 93       	push	r28
    411a:	df 93       	push	r29
    411c:	ec 01       	movw	r28, r24
    411e:	16 2f       	mov	r17, r22
    4120:	1b 82       	std	Y+3, r1	; 0x03
    4122:	1a 82       	std	Y+2, r1	; 0x02
    4124:	88 ee       	ldi	r24, 0xE8	; 232
    4126:	93 e0       	ldi	r25, 0x03	; 3
    4128:	a0 e0       	ldi	r26, 0x00	; 0
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	8c 83       	std	Y+4, r24	; 0x04
    412e:	9d 83       	std	Y+5, r25	; 0x05
    4130:	ae 83       	std	Y+6, r26	; 0x06
    4132:	bf 83       	std	Y+7, r27	; 0x07
    4134:	8d e8       	ldi	r24, 0x8D	; 141
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	99 83       	std	Y+1, r25	; 0x01
    413a:	88 83       	st	Y, r24
    413c:	1f 8a       	std	Y+23, r1	; 0x17
    413e:	1e 8a       	std	Y+22, r1	; 0x16
    4140:	19 8e       	std	Y+25, r1	; 0x19
    4142:	18 8e       	std	Y+24, r1	; 0x18
    4144:	1b 8e       	std	Y+27, r1	; 0x1b
    4146:	1a 8e       	std	Y+26, r1	; 0x1a
    4148:	1d 8e       	std	Y+29, r1	; 0x1d
    414a:	1c 8e       	std	Y+28, r1	; 0x1c
    414c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    414e:	8e 7f       	andi	r24, 0xFE	; 254
    4150:	20 fb       	bst	r18, 0
    4152:	81 f9       	bld	r24, 1
    4154:	8e 8f       	std	Y+30, r24	; 0x1e
    4156:	64 2f       	mov	r22, r20
    4158:	ce 01       	movw	r24, r28
    415a:	0e 94 39 20 	call	0x4072	; 0x4072 <_ZN14SoftwareSerial5setTXEh>
    415e:	61 2f       	mov	r22, r17
    4160:	ce 01       	movw	r24, r28
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	1f 91       	pop	r17
    4168:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <_ZN14SoftwareSerial5setRXEh>

0000416c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    416c:	cf 93       	push	r28
    416e:	df 93       	push	r29
    4170:	ec 01       	movw	r28, r24
    4172:	9a 01       	movw	r18, r20
    4174:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4176:	1b 8e       	std	Y+27, r1	; 0x1b
    4178:	1a 8e       	std	Y+26, r1	; 0x1a
    417a:	19 8e       	std	Y+25, r1	; 0x19
    417c:	18 8e       	std	Y+24, r1	; 0x18
    417e:	1f 8a       	std	Y+23, r1	; 0x17
    4180:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	79 e0       	ldi	r23, 0x09	; 9
    4186:	8d e3       	ldi	r24, 0x3D	; 61
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 9b 21 	call	0x4336	; 0x4336 <__divmodsi4>
    418e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4190:	24 30       	cpi	r18, 0x04	; 4
    4192:	31 05       	cpc	r19, r1
    4194:	18 f0       	brcs	.+6      	; 0x419c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    4196:	c9 01       	movw	r24, r18
    4198:	03 97       	sbiw	r24, 0x03	; 3
    419a:	02 c0       	rjmp	.+4      	; 0x41a0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    41a0:	9d 8f       	std	Y+29, r25	; 0x1d
    41a2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    41a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    41a6:	66 31       	cpi	r22, 0x16	; 22
    41a8:	08 f0       	brcs	.+2      	; 0x41ac <_ZN14SoftwareSerial5beginEl+0x40>
    41aa:	69 c0       	rjmp	.+210    	; 0x427e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    41ac:	c9 01       	movw	r24, r18
    41ae:	96 95       	lsr	r25
    41b0:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    41b2:	84 31       	cpi	r24, 0x14	; 20
    41b4:	91 05       	cpc	r25, r1
    41b6:	10 f0       	brcs	.+4      	; 0x41bc <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    41b8:	43 97       	sbiw	r24, 0x13	; 19
    41ba:	02 c0       	rjmp	.+4      	; 0x41c0 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    41c0:	9f 8b       	std	Y+23, r25	; 0x17
    41c2:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    41c4:	36 97       	sbiw	r30, 0x06	; 6
    41c6:	18 f0       	brcs	.+6      	; 0x41ce <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    41c8:	c9 01       	movw	r24, r18
    41ca:	05 97       	sbiw	r24, 0x05	; 5
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    41d2:	99 8f       	std	Y+25, r25	; 0x19
    41d4:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    41d6:	c9 01       	movw	r24, r18
    41d8:	88 0f       	add	r24, r24
    41da:	99 1f       	adc	r25, r25
    41dc:	28 0f       	add	r18, r24
    41de:	39 1f       	adc	r19, r25
    41e0:	36 95       	lsr	r19
    41e2:	27 95       	ror	r18
    41e4:	36 95       	lsr	r19
    41e6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    41e8:	2d 30       	cpi	r18, 0x0D	; 13
    41ea:	31 05       	cpc	r19, r1
    41ec:	18 f0       	brcs	.+6      	; 0x41f4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    41ee:	2c 50       	subi	r18, 0x0C	; 12
    41f0:	31 09       	sbc	r19, r1
    41f2:	02 c0       	rjmp	.+4      	; 0x41f8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    41f4:	21 e0       	ldi	r18, 0x01	; 1
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    41f8:	3b 8f       	std	Y+27, r19	; 0x1b
    41fa:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    41fc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    4200:	68 30       	cpi	r22, 0x08	; 8
    4202:	50 f0       	brcs	.+20     	; 0x4218 <_ZN14SoftwareSerial5beginEl+0xac>
    4204:	21 e0       	ldi	r18, 0x01	; 1
    4206:	6e 30       	cpi	r22, 0x0E	; 14
    4208:	08 f4       	brcc	.+2      	; 0x420c <_ZN14SoftwareSerial5beginEl+0xa0>
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	01 c0       	rjmp	.+2      	; 0x4212 <_ZN14SoftwareSerial5beginEl+0xa6>
    4210:	88 0f       	add	r24, r24
    4212:	2a 95       	dec	r18
    4214:	ea f7       	brpl	.-6      	; 0x4210 <_ZN14SoftwareSerial5beginEl+0xa4>
    4216:	01 c0       	rjmp	.+2      	; 0x421a <_ZN14SoftwareSerial5beginEl+0xae>
    4218:	84 e0       	ldi	r24, 0x04	; 4
    421a:	89 2b       	or	r24, r25
    421c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4220:	9c 85       	ldd	r25, Y+12	; 0x0c
    4222:	98 30       	cpi	r25, 0x08	; 8
    4224:	38 f0       	brcs	.+14     	; 0x4234 <_ZN14SoftwareSerial5beginEl+0xc8>
    4226:	9e 30       	cpi	r25, 0x0E	; 14
    4228:	40 f0       	brcs	.+16     	; 0x423a <_ZN14SoftwareSerial5beginEl+0xce>
    422a:	96 31       	cpi	r25, 0x16	; 22
    422c:	48 f0       	brcs	.+18     	; 0x4240 <_ZN14SoftwareSerial5beginEl+0xd4>
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	08 c0       	rjmp	.+16     	; 0x4244 <_ZN14SoftwareSerial5beginEl+0xd8>
    4234:	2d e6       	ldi	r18, 0x6D	; 109
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	05 c0       	rjmp	.+10     	; 0x4244 <_ZN14SoftwareSerial5beginEl+0xd8>
    423a:	2b e6       	ldi	r18, 0x6B	; 107
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	02 c0       	rjmp	.+4      	; 0x4244 <_ZN14SoftwareSerial5beginEl+0xd8>
    4240:	2c e6       	ldi	r18, 0x6C	; 108
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	3c 8b       	std	Y+20, r19	; 0x14
    4246:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4248:	98 30       	cpi	r25, 0x08	; 8
    424a:	30 f4       	brcc	.+12     	; 0x4258 <_ZN14SoftwareSerial5beginEl+0xec>
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	01 c0       	rjmp	.+2      	; 0x4252 <_ZN14SoftwareSerial5beginEl+0xe6>
    4250:	88 0f       	add	r24, r24
    4252:	9a 95       	dec	r25
    4254:	ea f7       	brpl	.-6      	; 0x4250 <_ZN14SoftwareSerial5beginEl+0xe4>
    4256:	0e c0       	rjmp	.+28     	; 0x4274 <_ZN14SoftwareSerial5beginEl+0x108>
    4258:	29 2f       	mov	r18, r25
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	9e 30       	cpi	r25, 0x0E	; 14
    425e:	18 f4       	brcc	.+6      	; 0x4266 <_ZN14SoftwareSerial5beginEl+0xfa>
    4260:	28 50       	subi	r18, 0x08	; 8
    4262:	31 09       	sbc	r19, r1
    4264:	02 c0       	rjmp	.+4      	; 0x426a <_ZN14SoftwareSerial5beginEl+0xfe>
    4266:	2e 50       	subi	r18, 0x0E	; 14
    4268:	31 09       	sbc	r19, r1
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	01 c0       	rjmp	.+2      	; 0x4270 <_ZN14SoftwareSerial5beginEl+0x104>
    426e:	88 0f       	add	r24, r24
    4270:	2a 95       	dec	r18
    4272:	ea f7       	brpl	.-6      	; 0x426e <_ZN14SoftwareSerial5beginEl+0x102>
    4274:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4276:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4278:	9d 8d       	ldd	r25, Y+29	; 0x1d
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	f1 f7       	brne	.-4      	; 0x427a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    427e:	ce 01       	movw	r24, r28
}
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4284:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <_ZN14SoftwareSerial6listenEv>

00004288 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4288:	08 95       	ret

0000428a <__udivmodqi4>:
    428a:	99 1b       	sub	r25, r25
    428c:	79 e0       	ldi	r23, 0x09	; 9
    428e:	04 c0       	rjmp	.+8      	; 0x4298 <__udivmodqi4_ep>

00004290 <__udivmodqi4_loop>:
    4290:	99 1f       	adc	r25, r25
    4292:	96 17       	cp	r25, r22
    4294:	08 f0       	brcs	.+2      	; 0x4298 <__udivmodqi4_ep>
    4296:	96 1b       	sub	r25, r22

00004298 <__udivmodqi4_ep>:
    4298:	88 1f       	adc	r24, r24
    429a:	7a 95       	dec	r23
    429c:	c9 f7       	brne	.-14     	; 0x4290 <__udivmodqi4_loop>
    429e:	80 95       	com	r24
    42a0:	08 95       	ret

000042a2 <__udivmodhi4>:
    42a2:	aa 1b       	sub	r26, r26
    42a4:	bb 1b       	sub	r27, r27
    42a6:	51 e1       	ldi	r21, 0x11	; 17
    42a8:	07 c0       	rjmp	.+14     	; 0x42b8 <__udivmodhi4_ep>

000042aa <__udivmodhi4_loop>:
    42aa:	aa 1f       	adc	r26, r26
    42ac:	bb 1f       	adc	r27, r27
    42ae:	a6 17       	cp	r26, r22
    42b0:	b7 07       	cpc	r27, r23
    42b2:	10 f0       	brcs	.+4      	; 0x42b8 <__udivmodhi4_ep>
    42b4:	a6 1b       	sub	r26, r22
    42b6:	b7 0b       	sbc	r27, r23

000042b8 <__udivmodhi4_ep>:
    42b8:	88 1f       	adc	r24, r24
    42ba:	99 1f       	adc	r25, r25
    42bc:	5a 95       	dec	r21
    42be:	a9 f7       	brne	.-22     	; 0x42aa <__udivmodhi4_loop>
    42c0:	80 95       	com	r24
    42c2:	90 95       	com	r25
    42c4:	bc 01       	movw	r22, r24
    42c6:	cd 01       	movw	r24, r26
    42c8:	08 95       	ret

000042ca <__divmodhi4>:
    42ca:	97 fb       	bst	r25, 7
    42cc:	07 2e       	mov	r0, r23
    42ce:	16 f4       	brtc	.+4      	; 0x42d4 <__divmodhi4+0xa>
    42d0:	00 94       	com	r0
    42d2:	07 d0       	rcall	.+14     	; 0x42e2 <__divmodhi4_neg1>
    42d4:	77 fd       	sbrc	r23, 7
    42d6:	09 d0       	rcall	.+18     	; 0x42ea <__divmodhi4_neg2>
    42d8:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__udivmodhi4>
    42dc:	07 fc       	sbrc	r0, 7
    42de:	05 d0       	rcall	.+10     	; 0x42ea <__divmodhi4_neg2>
    42e0:	3e f4       	brtc	.+14     	; 0x42f0 <__divmodhi4_exit>

000042e2 <__divmodhi4_neg1>:
    42e2:	90 95       	com	r25
    42e4:	81 95       	neg	r24
    42e6:	9f 4f       	sbci	r25, 0xFF	; 255
    42e8:	08 95       	ret

000042ea <__divmodhi4_neg2>:
    42ea:	70 95       	com	r23
    42ec:	61 95       	neg	r22
    42ee:	7f 4f       	sbci	r23, 0xFF	; 255

000042f0 <__divmodhi4_exit>:
    42f0:	08 95       	ret

000042f2 <__udivmodsi4>:
    42f2:	a1 e2       	ldi	r26, 0x21	; 33
    42f4:	1a 2e       	mov	r1, r26
    42f6:	aa 1b       	sub	r26, r26
    42f8:	bb 1b       	sub	r27, r27
    42fa:	fd 01       	movw	r30, r26
    42fc:	0d c0       	rjmp	.+26     	; 0x4318 <__udivmodsi4_ep>

000042fe <__udivmodsi4_loop>:
    42fe:	aa 1f       	adc	r26, r26
    4300:	bb 1f       	adc	r27, r27
    4302:	ee 1f       	adc	r30, r30
    4304:	ff 1f       	adc	r31, r31
    4306:	a2 17       	cp	r26, r18
    4308:	b3 07       	cpc	r27, r19
    430a:	e4 07       	cpc	r30, r20
    430c:	f5 07       	cpc	r31, r21
    430e:	20 f0       	brcs	.+8      	; 0x4318 <__udivmodsi4_ep>
    4310:	a2 1b       	sub	r26, r18
    4312:	b3 0b       	sbc	r27, r19
    4314:	e4 0b       	sbc	r30, r20
    4316:	f5 0b       	sbc	r31, r21

00004318 <__udivmodsi4_ep>:
    4318:	66 1f       	adc	r22, r22
    431a:	77 1f       	adc	r23, r23
    431c:	88 1f       	adc	r24, r24
    431e:	99 1f       	adc	r25, r25
    4320:	1a 94       	dec	r1
    4322:	69 f7       	brne	.-38     	; 0x42fe <__udivmodsi4_loop>
    4324:	60 95       	com	r22
    4326:	70 95       	com	r23
    4328:	80 95       	com	r24
    432a:	90 95       	com	r25
    432c:	9b 01       	movw	r18, r22
    432e:	ac 01       	movw	r20, r24
    4330:	bd 01       	movw	r22, r26
    4332:	cf 01       	movw	r24, r30
    4334:	08 95       	ret

00004336 <__divmodsi4>:
    4336:	05 2e       	mov	r0, r21
    4338:	97 fb       	bst	r25, 7
    433a:	1e f4       	brtc	.+6      	; 0x4342 <__divmodsi4+0xc>
    433c:	00 94       	com	r0
    433e:	0e 94 b2 21 	call	0x4364	; 0x4364 <__negsi2>
    4342:	57 fd       	sbrc	r21, 7
    4344:	07 d0       	rcall	.+14     	; 0x4354 <__divmodsi4_neg2>
    4346:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__udivmodsi4>
    434a:	07 fc       	sbrc	r0, 7
    434c:	03 d0       	rcall	.+6      	; 0x4354 <__divmodsi4_neg2>
    434e:	4e f4       	brtc	.+18     	; 0x4362 <__divmodsi4_exit>
    4350:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__negsi2>

00004354 <__divmodsi4_neg2>:
    4354:	50 95       	com	r21
    4356:	40 95       	com	r20
    4358:	30 95       	com	r19
    435a:	21 95       	neg	r18
    435c:	3f 4f       	sbci	r19, 0xFF	; 255
    435e:	4f 4f       	sbci	r20, 0xFF	; 255
    4360:	5f 4f       	sbci	r21, 0xFF	; 255

00004362 <__divmodsi4_exit>:
    4362:	08 95       	ret

00004364 <__negsi2>:
    4364:	90 95       	com	r25
    4366:	80 95       	com	r24
    4368:	70 95       	com	r23
    436a:	61 95       	neg	r22
    436c:	7f 4f       	sbci	r23, 0xFF	; 255
    436e:	8f 4f       	sbci	r24, 0xFF	; 255
    4370:	9f 4f       	sbci	r25, 0xFF	; 255
    4372:	08 95       	ret

00004374 <__tablejump2__>:
    4374:	ee 0f       	add	r30, r30
    4376:	ff 1f       	adc	r31, r31
    4378:	05 90       	lpm	r0, Z+
    437a:	f4 91       	lpm	r31, Z
    437c:	e0 2d       	mov	r30, r0
    437e:	09 94       	ijmp

00004380 <malloc>:
    4380:	0f 93       	push	r16
    4382:	1f 93       	push	r17
    4384:	cf 93       	push	r28
    4386:	df 93       	push	r29
    4388:	82 30       	cpi	r24, 0x02	; 2
    438a:	91 05       	cpc	r25, r1
    438c:	10 f4       	brcc	.+4      	; 0x4392 <malloc+0x12>
    438e:	82 e0       	ldi	r24, 0x02	; 2
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    4396:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	a0 e0       	ldi	r26, 0x00	; 0
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	30 97       	sbiw	r30, 0x00	; 0
    43a4:	19 f1       	breq	.+70     	; 0x43ec <malloc+0x6c>
    43a6:	40 81       	ld	r20, Z
    43a8:	51 81       	ldd	r21, Z+1	; 0x01
    43aa:	02 81       	ldd	r16, Z+2	; 0x02
    43ac:	13 81       	ldd	r17, Z+3	; 0x03
    43ae:	48 17       	cp	r20, r24
    43b0:	59 07       	cpc	r21, r25
    43b2:	c8 f0       	brcs	.+50     	; 0x43e6 <malloc+0x66>
    43b4:	84 17       	cp	r24, r20
    43b6:	95 07       	cpc	r25, r21
    43b8:	69 f4       	brne	.+26     	; 0x43d4 <malloc+0x54>
    43ba:	10 97       	sbiw	r26, 0x00	; 0
    43bc:	31 f0       	breq	.+12     	; 0x43ca <malloc+0x4a>
    43be:	12 96       	adiw	r26, 0x02	; 2
    43c0:	0c 93       	st	X, r16
    43c2:	12 97       	sbiw	r26, 0x02	; 2
    43c4:	13 96       	adiw	r26, 0x03	; 3
    43c6:	1c 93       	st	X, r17
    43c8:	27 c0       	rjmp	.+78     	; 0x4418 <malloc+0x98>
    43ca:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <__flp>
    43ce:	10 93 8b 04 	sts	0x048B, r17	; 0x80048b <__flp+0x1>
    43d2:	22 c0       	rjmp	.+68     	; 0x4418 <malloc+0x98>
    43d4:	21 15       	cp	r18, r1
    43d6:	31 05       	cpc	r19, r1
    43d8:	19 f0       	breq	.+6      	; 0x43e0 <malloc+0x60>
    43da:	42 17       	cp	r20, r18
    43dc:	53 07       	cpc	r21, r19
    43de:	18 f4       	brcc	.+6      	; 0x43e6 <malloc+0x66>
    43e0:	9a 01       	movw	r18, r20
    43e2:	bd 01       	movw	r22, r26
    43e4:	ef 01       	movw	r28, r30
    43e6:	df 01       	movw	r26, r30
    43e8:	f8 01       	movw	r30, r16
    43ea:	db cf       	rjmp	.-74     	; 0x43a2 <malloc+0x22>
    43ec:	21 15       	cp	r18, r1
    43ee:	31 05       	cpc	r19, r1
    43f0:	f9 f0       	breq	.+62     	; 0x4430 <malloc+0xb0>
    43f2:	28 1b       	sub	r18, r24
    43f4:	39 0b       	sbc	r19, r25
    43f6:	24 30       	cpi	r18, 0x04	; 4
    43f8:	31 05       	cpc	r19, r1
    43fa:	80 f4       	brcc	.+32     	; 0x441c <malloc+0x9c>
    43fc:	8a 81       	ldd	r24, Y+2	; 0x02
    43fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4400:	61 15       	cp	r22, r1
    4402:	71 05       	cpc	r23, r1
    4404:	21 f0       	breq	.+8      	; 0x440e <malloc+0x8e>
    4406:	fb 01       	movw	r30, r22
    4408:	93 83       	std	Z+3, r25	; 0x03
    440a:	82 83       	std	Z+2, r24	; 0x02
    440c:	04 c0       	rjmp	.+8      	; 0x4416 <malloc+0x96>
    440e:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <__flp+0x1>
    4412:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <__flp>
    4416:	fe 01       	movw	r30, r28
    4418:	32 96       	adiw	r30, 0x02	; 2
    441a:	44 c0       	rjmp	.+136    	; 0x44a4 <malloc+0x124>
    441c:	fe 01       	movw	r30, r28
    441e:	e2 0f       	add	r30, r18
    4420:	f3 1f       	adc	r31, r19
    4422:	81 93       	st	Z+, r24
    4424:	91 93       	st	Z+, r25
    4426:	22 50       	subi	r18, 0x02	; 2
    4428:	31 09       	sbc	r19, r1
    442a:	39 83       	std	Y+1, r19	; 0x01
    442c:	28 83       	st	Y, r18
    442e:	3a c0       	rjmp	.+116    	; 0x44a4 <malloc+0x124>
    4430:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    4434:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    4438:	23 2b       	or	r18, r19
    443a:	41 f4       	brne	.+16     	; 0x444c <malloc+0xcc>
    443c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4440:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4444:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <__brkval+0x1>
    4448:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <__brkval>
    444c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4450:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4454:	21 15       	cp	r18, r1
    4456:	31 05       	cpc	r19, r1
    4458:	41 f4       	brne	.+16     	; 0x446a <malloc+0xea>
    445a:	2d b7       	in	r18, 0x3d	; 61
    445c:	3e b7       	in	r19, 0x3e	; 62
    445e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4462:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4466:	24 1b       	sub	r18, r20
    4468:	35 0b       	sbc	r19, r21
    446a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <__brkval>
    446e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <__brkval+0x1>
    4472:	e2 17       	cp	r30, r18
    4474:	f3 07       	cpc	r31, r19
    4476:	a0 f4       	brcc	.+40     	; 0x44a0 <malloc+0x120>
    4478:	2e 1b       	sub	r18, r30
    447a:	3f 0b       	sbc	r19, r31
    447c:	28 17       	cp	r18, r24
    447e:	39 07       	cpc	r19, r25
    4480:	78 f0       	brcs	.+30     	; 0x44a0 <malloc+0x120>
    4482:	ac 01       	movw	r20, r24
    4484:	4e 5f       	subi	r20, 0xFE	; 254
    4486:	5f 4f       	sbci	r21, 0xFF	; 255
    4488:	24 17       	cp	r18, r20
    448a:	35 07       	cpc	r19, r21
    448c:	48 f0       	brcs	.+18     	; 0x44a0 <malloc+0x120>
    448e:	4e 0f       	add	r20, r30
    4490:	5f 1f       	adc	r21, r31
    4492:	50 93 89 04 	sts	0x0489, r21	; 0x800489 <__brkval+0x1>
    4496:	40 93 88 04 	sts	0x0488, r20	; 0x800488 <__brkval>
    449a:	81 93       	st	Z+, r24
    449c:	91 93       	st	Z+, r25
    449e:	02 c0       	rjmp	.+4      	; 0x44a4 <malloc+0x124>
    44a0:	e0 e0       	ldi	r30, 0x00	; 0
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	cf 01       	movw	r24, r30
    44a6:	df 91       	pop	r29
    44a8:	cf 91       	pop	r28
    44aa:	1f 91       	pop	r17
    44ac:	0f 91       	pop	r16
    44ae:	08 95       	ret

000044b0 <free>:
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	00 97       	sbiw	r24, 0x00	; 0
    44b6:	09 f4       	brne	.+2      	; 0x44ba <free+0xa>
    44b8:	81 c0       	rjmp	.+258    	; 0x45bc <free+0x10c>
    44ba:	fc 01       	movw	r30, r24
    44bc:	32 97       	sbiw	r30, 0x02	; 2
    44be:	13 82       	std	Z+3, r1	; 0x03
    44c0:	12 82       	std	Z+2, r1	; 0x02
    44c2:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    44c6:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    44ca:	10 97       	sbiw	r26, 0x00	; 0
    44cc:	81 f4       	brne	.+32     	; 0x44ee <free+0x3e>
    44ce:	20 81       	ld	r18, Z
    44d0:	31 81       	ldd	r19, Z+1	; 0x01
    44d2:	82 0f       	add	r24, r18
    44d4:	93 1f       	adc	r25, r19
    44d6:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    44da:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    44de:	28 17       	cp	r18, r24
    44e0:	39 07       	cpc	r19, r25
    44e2:	51 f5       	brne	.+84     	; 0x4538 <free+0x88>
    44e4:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    44e8:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    44ec:	67 c0       	rjmp	.+206    	; 0x45bc <free+0x10c>
    44ee:	ed 01       	movw	r28, r26
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	ce 17       	cp	r28, r30
    44f6:	df 07       	cpc	r29, r31
    44f8:	40 f4       	brcc	.+16     	; 0x450a <free+0x5a>
    44fa:	4a 81       	ldd	r20, Y+2	; 0x02
    44fc:	5b 81       	ldd	r21, Y+3	; 0x03
    44fe:	9e 01       	movw	r18, r28
    4500:	41 15       	cp	r20, r1
    4502:	51 05       	cpc	r21, r1
    4504:	f1 f0       	breq	.+60     	; 0x4542 <free+0x92>
    4506:	ea 01       	movw	r28, r20
    4508:	f5 cf       	rjmp	.-22     	; 0x44f4 <free+0x44>
    450a:	d3 83       	std	Z+3, r29	; 0x03
    450c:	c2 83       	std	Z+2, r28	; 0x02
    450e:	40 81       	ld	r20, Z
    4510:	51 81       	ldd	r21, Z+1	; 0x01
    4512:	84 0f       	add	r24, r20
    4514:	95 1f       	adc	r25, r21
    4516:	c8 17       	cp	r28, r24
    4518:	d9 07       	cpc	r29, r25
    451a:	59 f4       	brne	.+22     	; 0x4532 <free+0x82>
    451c:	88 81       	ld	r24, Y
    451e:	99 81       	ldd	r25, Y+1	; 0x01
    4520:	84 0f       	add	r24, r20
    4522:	95 1f       	adc	r25, r21
    4524:	02 96       	adiw	r24, 0x02	; 2
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	80 83       	st	Z, r24
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	9b 81       	ldd	r25, Y+3	; 0x03
    452e:	93 83       	std	Z+3, r25	; 0x03
    4530:	82 83       	std	Z+2, r24	; 0x02
    4532:	21 15       	cp	r18, r1
    4534:	31 05       	cpc	r19, r1
    4536:	29 f4       	brne	.+10     	; 0x4542 <free+0x92>
    4538:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    453c:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    4540:	3d c0       	rjmp	.+122    	; 0x45bc <free+0x10c>
    4542:	e9 01       	movw	r28, r18
    4544:	fb 83       	std	Y+3, r31	; 0x03
    4546:	ea 83       	std	Y+2, r30	; 0x02
    4548:	49 91       	ld	r20, Y+
    454a:	59 91       	ld	r21, Y+
    454c:	c4 0f       	add	r28, r20
    454e:	d5 1f       	adc	r29, r21
    4550:	ec 17       	cp	r30, r28
    4552:	fd 07       	cpc	r31, r29
    4554:	61 f4       	brne	.+24     	; 0x456e <free+0xbe>
    4556:	80 81       	ld	r24, Z
    4558:	91 81       	ldd	r25, Z+1	; 0x01
    455a:	84 0f       	add	r24, r20
    455c:	95 1f       	adc	r25, r21
    455e:	02 96       	adiw	r24, 0x02	; 2
    4560:	e9 01       	movw	r28, r18
    4562:	99 83       	std	Y+1, r25	; 0x01
    4564:	88 83       	st	Y, r24
    4566:	82 81       	ldd	r24, Z+2	; 0x02
    4568:	93 81       	ldd	r25, Z+3	; 0x03
    456a:	9b 83       	std	Y+3, r25	; 0x03
    456c:	8a 83       	std	Y+2, r24	; 0x02
    456e:	e0 e0       	ldi	r30, 0x00	; 0
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	12 96       	adiw	r26, 0x02	; 2
    4574:	8d 91       	ld	r24, X+
    4576:	9c 91       	ld	r25, X
    4578:	13 97       	sbiw	r26, 0x03	; 3
    457a:	00 97       	sbiw	r24, 0x00	; 0
    457c:	19 f0       	breq	.+6      	; 0x4584 <free+0xd4>
    457e:	fd 01       	movw	r30, r26
    4580:	dc 01       	movw	r26, r24
    4582:	f7 cf       	rjmp	.-18     	; 0x4572 <free+0xc2>
    4584:	8d 91       	ld	r24, X+
    4586:	9c 91       	ld	r25, X
    4588:	11 97       	sbiw	r26, 0x01	; 1
    458a:	9d 01       	movw	r18, r26
    458c:	2e 5f       	subi	r18, 0xFE	; 254
    458e:	3f 4f       	sbci	r19, 0xFF	; 255
    4590:	82 0f       	add	r24, r18
    4592:	93 1f       	adc	r25, r19
    4594:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    4598:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    459c:	28 17       	cp	r18, r24
    459e:	39 07       	cpc	r19, r25
    45a0:	69 f4       	brne	.+26     	; 0x45bc <free+0x10c>
    45a2:	30 97       	sbiw	r30, 0x00	; 0
    45a4:	29 f4       	brne	.+10     	; 0x45b0 <free+0x100>
    45a6:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <__flp+0x1>
    45aa:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <__flp>
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <free+0x104>
    45b0:	13 82       	std	Z+3, r1	; 0x03
    45b2:	12 82       	std	Z+2, r1	; 0x02
    45b4:	b0 93 89 04 	sts	0x0489, r27	; 0x800489 <__brkval+0x1>
    45b8:	a0 93 88 04 	sts	0x0488, r26	; 0x800488 <__brkval>
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	08 95       	ret

000045c2 <realloc>:
    45c2:	a0 e0       	ldi	r26, 0x00	; 0
    45c4:	b0 e0       	ldi	r27, 0x00	; 0
    45c6:	e7 ee       	ldi	r30, 0xE7	; 231
    45c8:	f2 e2       	ldi	r31, 0x22	; 34
    45ca:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__prologue_saves__+0x8>
    45ce:	ec 01       	movw	r28, r24
    45d0:	00 97       	sbiw	r24, 0x00	; 0
    45d2:	21 f4       	brne	.+8      	; 0x45dc <realloc+0x1a>
    45d4:	cb 01       	movw	r24, r22
    45d6:	0e 94 c0 21 	call	0x4380	; 0x4380 <malloc>
    45da:	b4 c0       	rjmp	.+360    	; 0x4744 <realloc+0x182>
    45dc:	fc 01       	movw	r30, r24
    45de:	e6 0f       	add	r30, r22
    45e0:	f7 1f       	adc	r31, r23
    45e2:	9c 01       	movw	r18, r24
    45e4:	22 50       	subi	r18, 0x02	; 2
    45e6:	31 09       	sbc	r19, r1
    45e8:	e2 17       	cp	r30, r18
    45ea:	f3 07       	cpc	r31, r19
    45ec:	08 f4       	brcc	.+2      	; 0x45f0 <realloc+0x2e>
    45ee:	a8 c0       	rjmp	.+336    	; 0x4740 <realloc+0x17e>
    45f0:	d9 01       	movw	r26, r18
    45f2:	0d 91       	ld	r16, X+
    45f4:	1c 91       	ld	r17, X
    45f6:	11 97       	sbiw	r26, 0x01	; 1
    45f8:	06 17       	cp	r16, r22
    45fa:	17 07       	cpc	r17, r23
    45fc:	b0 f0       	brcs	.+44     	; 0x462a <realloc+0x68>
    45fe:	05 30       	cpi	r16, 0x05	; 5
    4600:	11 05       	cpc	r17, r1
    4602:	08 f4       	brcc	.+2      	; 0x4606 <realloc+0x44>
    4604:	9b c0       	rjmp	.+310    	; 0x473c <realloc+0x17a>
    4606:	c8 01       	movw	r24, r16
    4608:	04 97       	sbiw	r24, 0x04	; 4
    460a:	86 17       	cp	r24, r22
    460c:	97 07       	cpc	r25, r23
    460e:	08 f4       	brcc	.+2      	; 0x4612 <realloc+0x50>
    4610:	95 c0       	rjmp	.+298    	; 0x473c <realloc+0x17a>
    4612:	02 50       	subi	r16, 0x02	; 2
    4614:	11 09       	sbc	r17, r1
    4616:	06 1b       	sub	r16, r22
    4618:	17 0b       	sbc	r17, r23
    461a:	01 93       	st	Z+, r16
    461c:	11 93       	st	Z+, r17
    461e:	6d 93       	st	X+, r22
    4620:	7c 93       	st	X, r23
    4622:	cf 01       	movw	r24, r30
    4624:	0e 94 58 22 	call	0x44b0	; 0x44b0 <free>
    4628:	89 c0       	rjmp	.+274    	; 0x473c <realloc+0x17a>
    462a:	5b 01       	movw	r10, r22
    462c:	a0 1a       	sub	r10, r16
    462e:	b1 0a       	sbc	r11, r17
    4630:	4c 01       	movw	r8, r24
    4632:	80 0e       	add	r8, r16
    4634:	91 1e       	adc	r9, r17
    4636:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    463a:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    463e:	61 2c       	mov	r6, r1
    4640:	71 2c       	mov	r7, r1
    4642:	e1 2c       	mov	r14, r1
    4644:	f1 2c       	mov	r15, r1
    4646:	10 97       	sbiw	r26, 0x00	; 0
    4648:	09 f4       	brne	.+2      	; 0x464c <realloc+0x8a>
    464a:	46 c0       	rjmp	.+140    	; 0x46d8 <realloc+0x116>
    464c:	8d 91       	ld	r24, X+
    464e:	9c 91       	ld	r25, X
    4650:	11 97       	sbiw	r26, 0x01	; 1
    4652:	a8 15       	cp	r26, r8
    4654:	b9 05       	cpc	r27, r9
    4656:	b1 f5       	brne	.+108    	; 0x46c4 <realloc+0x102>
    4658:	6c 01       	movw	r12, r24
    465a:	42 e0       	ldi	r20, 0x02	; 2
    465c:	c4 0e       	add	r12, r20
    465e:	d1 1c       	adc	r13, r1
    4660:	ca 14       	cp	r12, r10
    4662:	db 04       	cpc	r13, r11
    4664:	78 f1       	brcs	.+94     	; 0x46c4 <realloc+0x102>
    4666:	4c 01       	movw	r8, r24
    4668:	8a 18       	sub	r8, r10
    466a:	9b 08       	sbc	r9, r11
    466c:	64 01       	movw	r12, r8
    466e:	42 e0       	ldi	r20, 0x02	; 2
    4670:	c4 0e       	add	r12, r20
    4672:	d1 1c       	adc	r13, r1
    4674:	12 96       	adiw	r26, 0x02	; 2
    4676:	bc 90       	ld	r11, X
    4678:	12 97       	sbiw	r26, 0x02	; 2
    467a:	13 96       	adiw	r26, 0x03	; 3
    467c:	ac 91       	ld	r26, X
    467e:	b5 e0       	ldi	r27, 0x05	; 5
    4680:	cb 16       	cp	r12, r27
    4682:	d1 04       	cpc	r13, r1
    4684:	40 f0       	brcs	.+16     	; 0x4696 <realloc+0xd4>
    4686:	b2 82       	std	Z+2, r11	; 0x02
    4688:	a3 83       	std	Z+3, r26	; 0x03
    468a:	91 82       	std	Z+1, r9	; 0x01
    468c:	80 82       	st	Z, r8
    468e:	d9 01       	movw	r26, r18
    4690:	6d 93       	st	X+, r22
    4692:	7c 93       	st	X, r23
    4694:	09 c0       	rjmp	.+18     	; 0x46a8 <realloc+0xe6>
    4696:	0e 5f       	subi	r16, 0xFE	; 254
    4698:	1f 4f       	sbci	r17, 0xFF	; 255
    469a:	80 0f       	add	r24, r16
    469c:	91 1f       	adc	r25, r17
    469e:	f9 01       	movw	r30, r18
    46a0:	91 83       	std	Z+1, r25	; 0x01
    46a2:	80 83       	st	Z, r24
    46a4:	eb 2d       	mov	r30, r11
    46a6:	fa 2f       	mov	r31, r26
    46a8:	e1 14       	cp	r14, r1
    46aa:	f1 04       	cpc	r15, r1
    46ac:	31 f0       	breq	.+12     	; 0x46ba <realloc+0xf8>
    46ae:	d7 01       	movw	r26, r14
    46b0:	13 96       	adiw	r26, 0x03	; 3
    46b2:	fc 93       	st	X, r31
    46b4:	ee 93       	st	-X, r30
    46b6:	12 97       	sbiw	r26, 0x02	; 2
    46b8:	41 c0       	rjmp	.+130    	; 0x473c <realloc+0x17a>
    46ba:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    46be:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    46c2:	3c c0       	rjmp	.+120    	; 0x473c <realloc+0x17a>
    46c4:	68 16       	cp	r6, r24
    46c6:	79 06       	cpc	r7, r25
    46c8:	08 f4       	brcc	.+2      	; 0x46cc <realloc+0x10a>
    46ca:	3c 01       	movw	r6, r24
    46cc:	7d 01       	movw	r14, r26
    46ce:	12 96       	adiw	r26, 0x02	; 2
    46d0:	0d 90       	ld	r0, X+
    46d2:	bc 91       	ld	r27, X
    46d4:	a0 2d       	mov	r26, r0
    46d6:	b7 cf       	rjmp	.-146    	; 0x4646 <realloc+0x84>
    46d8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    46dc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    46e0:	88 16       	cp	r8, r24
    46e2:	99 06       	cpc	r9, r25
    46e4:	e1 f4       	brne	.+56     	; 0x471e <realloc+0x15c>
    46e6:	66 16       	cp	r6, r22
    46e8:	77 06       	cpc	r7, r23
    46ea:	c8 f4       	brcc	.+50     	; 0x471e <realloc+0x15c>
    46ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    46f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    46f4:	00 97       	sbiw	r24, 0x00	; 0
    46f6:	41 f4       	brne	.+16     	; 0x4708 <realloc+0x146>
    46f8:	8d b7       	in	r24, 0x3d	; 61
    46fa:	9e b7       	in	r25, 0x3e	; 62
    46fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4700:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4704:	84 1b       	sub	r24, r20
    4706:	95 0b       	sbc	r25, r21
    4708:	e8 17       	cp	r30, r24
    470a:	f9 07       	cpc	r31, r25
    470c:	c8 f4       	brcc	.+50     	; 0x4740 <realloc+0x17e>
    470e:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    4712:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    4716:	f9 01       	movw	r30, r18
    4718:	71 83       	std	Z+1, r23	; 0x01
    471a:	60 83       	st	Z, r22
    471c:	0f c0       	rjmp	.+30     	; 0x473c <realloc+0x17a>
    471e:	cb 01       	movw	r24, r22
    4720:	0e 94 c0 21 	call	0x4380	; 0x4380 <malloc>
    4724:	7c 01       	movw	r14, r24
    4726:	00 97       	sbiw	r24, 0x00	; 0
    4728:	59 f0       	breq	.+22     	; 0x4740 <realloc+0x17e>
    472a:	a8 01       	movw	r20, r16
    472c:	be 01       	movw	r22, r28
    472e:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <memcpy>
    4732:	ce 01       	movw	r24, r28
    4734:	0e 94 58 22 	call	0x44b0	; 0x44b0 <free>
    4738:	c7 01       	movw	r24, r14
    473a:	04 c0       	rjmp	.+8      	; 0x4744 <realloc+0x182>
    473c:	ce 01       	movw	r24, r28
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <realloc+0x182>
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	ee e0       	ldi	r30, 0x0E	; 14
    474a:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <__epilogue_restores__+0x8>

0000474e <atoi>:
    474e:	fc 01       	movw	r30, r24
    4750:	88 27       	eor	r24, r24
    4752:	99 27       	eor	r25, r25
    4754:	e8 94       	clt
    4756:	21 91       	ld	r18, Z+
    4758:	20 32       	cpi	r18, 0x20	; 32
    475a:	e9 f3       	breq	.-6      	; 0x4756 <atoi+0x8>
    475c:	29 30       	cpi	r18, 0x09	; 9
    475e:	10 f0       	brcs	.+4      	; 0x4764 <atoi+0x16>
    4760:	2e 30       	cpi	r18, 0x0E	; 14
    4762:	c8 f3       	brcs	.-14     	; 0x4756 <atoi+0x8>
    4764:	2b 32       	cpi	r18, 0x2B	; 43
    4766:	41 f0       	breq	.+16     	; 0x4778 <atoi+0x2a>
    4768:	2d 32       	cpi	r18, 0x2D	; 45
    476a:	39 f4       	brne	.+14     	; 0x477a <atoi+0x2c>
    476c:	68 94       	set
    476e:	04 c0       	rjmp	.+8      	; 0x4778 <atoi+0x2a>
    4770:	0e 94 17 24 	call	0x482e	; 0x482e <__mulhi_const_10>
    4774:	82 0f       	add	r24, r18
    4776:	91 1d       	adc	r25, r1
    4778:	21 91       	ld	r18, Z+
    477a:	20 53       	subi	r18, 0x30	; 48
    477c:	2a 30       	cpi	r18, 0x0A	; 10
    477e:	c0 f3       	brcs	.-16     	; 0x4770 <atoi+0x22>
    4780:	1e f4       	brtc	.+6      	; 0x4788 <atoi+0x3a>
    4782:	90 95       	com	r25
    4784:	81 95       	neg	r24
    4786:	9f 4f       	sbci	r25, 0xFF	; 255
    4788:	08 95       	ret

0000478a <strcmp_P>:
    478a:	fb 01       	movw	r30, r22
    478c:	dc 01       	movw	r26, r24
    478e:	8d 91       	ld	r24, X+
    4790:	05 90       	lpm	r0, Z+
    4792:	80 19       	sub	r24, r0
    4794:	01 10       	cpse	r0, r1
    4796:	d9 f3       	breq	.-10     	; 0x478e <strcmp_P+0x4>
    4798:	99 0b       	sbc	r25, r25
    479a:	08 95       	ret

0000479c <__strlen_P>:
    479c:	fc 01       	movw	r30, r24
    479e:	05 90       	lpm	r0, Z+
    47a0:	00 20       	and	r0, r0
    47a2:	e9 f7       	brne	.-6      	; 0x479e <__strlen_P+0x2>
    47a4:	80 95       	com	r24
    47a6:	90 95       	com	r25
    47a8:	8e 0f       	add	r24, r30
    47aa:	9f 1f       	adc	r25, r31
    47ac:	08 95       	ret

000047ae <strstr_P>:
    47ae:	fb 01       	movw	r30, r22
    47b0:	55 91       	lpm	r21, Z+
    47b2:	55 23       	and	r21, r21
    47b4:	a9 f0       	breq	.+42     	; 0x47e0 <strstr_P+0x32>
    47b6:	bf 01       	movw	r22, r30
    47b8:	dc 01       	movw	r26, r24
    47ba:	4d 91       	ld	r20, X+
    47bc:	45 17       	cp	r20, r21
    47be:	41 11       	cpse	r20, r1
    47c0:	e1 f7       	brne	.-8      	; 0x47ba <strstr_P+0xc>
    47c2:	59 f4       	brne	.+22     	; 0x47da <strstr_P+0x2c>
    47c4:	cd 01       	movw	r24, r26
    47c6:	05 90       	lpm	r0, Z+
    47c8:	00 20       	and	r0, r0
    47ca:	49 f0       	breq	.+18     	; 0x47de <strstr_P+0x30>
    47cc:	4d 91       	ld	r20, X+
    47ce:	40 15       	cp	r20, r0
    47d0:	41 11       	cpse	r20, r1
    47d2:	c9 f3       	breq	.-14     	; 0x47c6 <strstr_P+0x18>
    47d4:	fb 01       	movw	r30, r22
    47d6:	41 11       	cpse	r20, r1
    47d8:	ef cf       	rjmp	.-34     	; 0x47b8 <strstr_P+0xa>
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	08 95       	ret

000047e2 <memcpy>:
    47e2:	fb 01       	movw	r30, r22
    47e4:	dc 01       	movw	r26, r24
    47e6:	02 c0       	rjmp	.+4      	; 0x47ec <memcpy+0xa>
    47e8:	01 90       	ld	r0, Z+
    47ea:	0d 92       	st	X+, r0
    47ec:	41 50       	subi	r20, 0x01	; 1
    47ee:	50 40       	sbci	r21, 0x00	; 0
    47f0:	d8 f7       	brcc	.-10     	; 0x47e8 <memcpy+0x6>
    47f2:	08 95       	ret

000047f4 <strchr>:
    47f4:	fc 01       	movw	r30, r24
    47f6:	81 91       	ld	r24, Z+
    47f8:	86 17       	cp	r24, r22
    47fa:	21 f0       	breq	.+8      	; 0x4804 <strchr+0x10>
    47fc:	88 23       	and	r24, r24
    47fe:	d9 f7       	brne	.-10     	; 0x47f6 <strchr+0x2>
    4800:	99 27       	eor	r25, r25
    4802:	08 95       	ret
    4804:	31 97       	sbiw	r30, 0x01	; 1
    4806:	cf 01       	movw	r24, r30
    4808:	08 95       	ret

0000480a <strcpy>:
    480a:	fb 01       	movw	r30, r22
    480c:	dc 01       	movw	r26, r24
    480e:	01 90       	ld	r0, Z+
    4810:	0d 92       	st	X+, r0
    4812:	00 20       	and	r0, r0
    4814:	e1 f7       	brne	.-8      	; 0x480e <strcpy+0x4>
    4816:	08 95       	ret

00004818 <__itoa_ncheck>:
    4818:	bb 27       	eor	r27, r27
    481a:	4a 30       	cpi	r20, 0x0A	; 10
    481c:	31 f4       	brne	.+12     	; 0x482a <__itoa_ncheck+0x12>
    481e:	99 23       	and	r25, r25
    4820:	22 f4       	brpl	.+8      	; 0x482a <__itoa_ncheck+0x12>
    4822:	bd e2       	ldi	r27, 0x2D	; 45
    4824:	90 95       	com	r25
    4826:	81 95       	neg	r24
    4828:	9f 4f       	sbci	r25, 0xFF	; 255
    482a:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__utoa_common>

0000482e <__mulhi_const_10>:
    482e:	7a e0       	ldi	r23, 0x0A	; 10
    4830:	97 9f       	mul	r25, r23
    4832:	90 2d       	mov	r25, r0
    4834:	87 9f       	mul	r24, r23
    4836:	80 2d       	mov	r24, r0
    4838:	91 0d       	add	r25, r1
    483a:	11 24       	eor	r1, r1
    483c:	08 95       	ret

0000483e <__utoa_ncheck>:
    483e:	bb 27       	eor	r27, r27

00004840 <__utoa_common>:
    4840:	fb 01       	movw	r30, r22
    4842:	55 27       	eor	r21, r21
    4844:	aa 27       	eor	r26, r26
    4846:	88 0f       	add	r24, r24
    4848:	99 1f       	adc	r25, r25
    484a:	aa 1f       	adc	r26, r26
    484c:	a4 17       	cp	r26, r20
    484e:	10 f0       	brcs	.+4      	; 0x4854 <__utoa_common+0x14>
    4850:	a4 1b       	sub	r26, r20
    4852:	83 95       	inc	r24
    4854:	50 51       	subi	r21, 0x10	; 16
    4856:	b9 f7       	brne	.-18     	; 0x4846 <__utoa_common+0x6>
    4858:	a0 5d       	subi	r26, 0xD0	; 208
    485a:	aa 33       	cpi	r26, 0x3A	; 58
    485c:	08 f0       	brcs	.+2      	; 0x4860 <__utoa_common+0x20>
    485e:	a9 5d       	subi	r26, 0xD9	; 217
    4860:	a1 93       	st	Z+, r26
    4862:	00 97       	sbiw	r24, 0x00	; 0
    4864:	79 f7       	brne	.-34     	; 0x4844 <__utoa_common+0x4>
    4866:	b1 11       	cpse	r27, r1
    4868:	b1 93       	st	Z+, r27
    486a:	11 92       	st	Z+, r1
    486c:	cb 01       	movw	r24, r22
    486e:	0c 94 39 24 	jmp	0x4872	; 0x4872 <strrev>

00004872 <strrev>:
    4872:	dc 01       	movw	r26, r24
    4874:	fc 01       	movw	r30, r24
    4876:	67 2f       	mov	r22, r23
    4878:	71 91       	ld	r23, Z+
    487a:	77 23       	and	r23, r23
    487c:	e1 f7       	brne	.-8      	; 0x4876 <strrev+0x4>
    487e:	32 97       	sbiw	r30, 0x02	; 2
    4880:	04 c0       	rjmp	.+8      	; 0x488a <strrev+0x18>
    4882:	7c 91       	ld	r23, X
    4884:	6d 93       	st	X+, r22
    4886:	70 83       	st	Z, r23
    4888:	62 91       	ld	r22, -Z
    488a:	ae 17       	cp	r26, r30
    488c:	bf 07       	cpc	r27, r31
    488e:	c8 f3       	brcs	.-14     	; 0x4882 <strrev+0x10>
    4890:	08 95       	ret

00004892 <__prologue_saves__>:
    4892:	2f 92       	push	r2
    4894:	3f 92       	push	r3
    4896:	4f 92       	push	r4
    4898:	5f 92       	push	r5
    489a:	6f 92       	push	r6
    489c:	7f 92       	push	r7
    489e:	8f 92       	push	r8
    48a0:	9f 92       	push	r9
    48a2:	af 92       	push	r10
    48a4:	bf 92       	push	r11
    48a6:	cf 92       	push	r12
    48a8:	df 92       	push	r13
    48aa:	ef 92       	push	r14
    48ac:	ff 92       	push	r15
    48ae:	0f 93       	push	r16
    48b0:	1f 93       	push	r17
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
    48ba:	ca 1b       	sub	r28, r26
    48bc:	db 0b       	sbc	r29, r27
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	09 94       	ijmp

000048ca <__epilogue_restores__>:
    48ca:	2a 88       	ldd	r2, Y+18	; 0x12
    48cc:	39 88       	ldd	r3, Y+17	; 0x11
    48ce:	48 88       	ldd	r4, Y+16	; 0x10
    48d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    48d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    48d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    48d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    48d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    48da:	aa 84       	ldd	r10, Y+10	; 0x0a
    48dc:	b9 84       	ldd	r11, Y+9	; 0x09
    48de:	c8 84       	ldd	r12, Y+8	; 0x08
    48e0:	df 80       	ldd	r13, Y+7	; 0x07
    48e2:	ee 80       	ldd	r14, Y+6	; 0x06
    48e4:	fd 80       	ldd	r15, Y+5	; 0x05
    48e6:	0c 81       	ldd	r16, Y+4	; 0x04
    48e8:	1b 81       	ldd	r17, Y+3	; 0x03
    48ea:	aa 81       	ldd	r26, Y+2	; 0x02
    48ec:	b9 81       	ldd	r27, Y+1	; 0x01
    48ee:	ce 0f       	add	r28, r30
    48f0:	d1 1d       	adc	r29, r1
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	de bf       	out	0x3e, r29	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	ed 01       	movw	r28, r26
    48fe:	08 95       	ret

00004900 <__do_global_dtors>:
    4900:	13 e0       	ldi	r17, 0x03	; 3
    4902:	c2 ec       	ldi	r28, 0xC2	; 194
    4904:	d3 e0       	ldi	r29, 0x03	; 3
    4906:	04 c0       	rjmp	.+8      	; 0x4910 <__do_global_dtors+0x10>
    4908:	fe 01       	movw	r30, r28
    490a:	0e 94 ba 21 	call	0x4374	; 0x4374 <__tablejump2__>
    490e:	21 96       	adiw	r28, 0x01	; 1
    4910:	c3 3c       	cpi	r28, 0xC3	; 195
    4912:	d1 07       	cpc	r29, r17
    4914:	c9 f7       	brne	.-14     	; 0x4908 <__do_global_dtors+0x8>
    4916:	f8 94       	cli

00004918 <__stop_program>:
    4918:	ff cf       	rjmp	.-2      	; 0x4918 <__stop_program>
