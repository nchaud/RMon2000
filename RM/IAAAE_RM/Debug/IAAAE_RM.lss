
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00002a04  00002a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050e  008001b6  008001b6  00002b4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b0  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001b3e4  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000423a  00000000  00000000  0001e954  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005851  00000000  00000000  00022b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022f0  00000000  00000000  000283e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000500c  00000000  00000000  0002a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c006  00000000  00000000  0002f6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  0003b6e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 01 	jmp	0x218	; 0x218 <__dtors_end>
       4:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
       8:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
       c:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__vector_3>
      10:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__vector_3>
      14:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__vector_3>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      1c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      20:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      24:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      28:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      2c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      30:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      34:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      38:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      3c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      40:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_16>
      44:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      48:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__vector_18>
      4c:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_19>
      50:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      54:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      58:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      5c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      60:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_24>
      64:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	54 65       	ori	r21, 0x54	; 84
      6a:	6d 70       	andi	r22, 0x0D	; 13
      6c:	3d 00       	.word	0x003d	; ????

0000006e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
      6e:	20 7c 20 00                                          | .

00000072 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
      72:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000007b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
      7b:	20 7c 20 00                                          | .

0000007f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
      7f:	50 56 2d 56 3d 00                                   PV-V=.

00000085 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
      85:	20 7c 20 00                                          | .

00000089 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
      89:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000091 <_ZZ4loopE3__c>:
      91:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000009b <_ZZ8sendDatavE3__c>:
      9b:	53 65 6e 64 69 6e 67 20 64 61 74 61 2e 2e 2e 00     Sending data....

000000ab <_ZZ5setupE3__c>:
      ab:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000000b7 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_7>:
      b7:	2c 20 43 68 61 72 3d 00                             , Char=.

000000bf <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_6>:
      bf:	2c 20 53 68 6f 72 74 3d 00                          , Short=.

000000c8 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_5>:
      c8:	2c 20 49 6e 74 3d 00                                , Int=.

000000cf <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_4>:
      cf:	45 45 50 52 4f 4d 20 54 65 73 74 3a 20 4c 6f 6e     EEPROM Test: Lon
      df:	67 3d 00                                            g=.

000000e2 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_3>:
      e2:	46 41 49 4c 45 44 20 43 48 41 52 00                 FAILED CHAR.

000000ee <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_2>:
      ee:	46 41 49 4c 45 44 20 53 48 4f 52 54 00              FAILED SHORT.

000000fb <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_1>:
      fb:	46 41 49 4c 45 44 20 49 4e 54 00                    FAILED INT.

00000106 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c_0>:
     106:	46 41 49 4c 45 44 20 4c 4f 4e 47 00                 FAILED LONG.

00000112 <_ZZN12RmMemManager17verifyBasicEepRomEvE3__c>:
     112:	42 61 73 69 63 20 45 45 50 52 4f 4d 20 54 65 73     Basic EEPROM Tes
     122:	74 00                                               t.

00000124 <_ZZN13SensorManager8readDataEP10SensorDataE3__c>:
     124:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     134:	2e 2e 00                                            ...

00000137 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     137:	53 49 4d 38 30 30 48 00                             SIM800H.

0000013f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     13f:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

0000014f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     14f:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

0000015f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     15f:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

0000016a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     16a:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000175 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     175:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000180 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     180:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

0000018a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     18a:	41 54 45 30 00                                      ATE0.

0000018f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     18f:	41 54 45 30 00                                      ATE0.

00000194 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     194:	41 54 00                                            AT.

00000197 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     197:	41 54 00                                            AT.

0000019a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     19a:	41 54 00                                            AT.

0000019d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     19d:	41 54 00                                            AT.

000001a0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     1a0:	41 54 00                                            AT.

000001a3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     1a3:	41 54 00                                            AT.

000001a6 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     1a6:	4f 4b 00                                            OK.

000001a9 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     1a9:	46 4f 4e 41 00                                      FONA.

000001ae <_ZZN13Adafruit_FONAC4EaE3__c>:
     1ae:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000001b6 <digital_pin_to_timer_PGM>:
     1b6:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     1c6:	00 00 00 00                                         ....

000001ca <digital_pin_to_bit_mask_PGM>:
     1ca:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1da:	04 08 10 20                                         ... 

000001de <digital_pin_to_port_PGM>:
     1de:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1ee:	03 03 03 03                                         ....

000001f2 <port_to_input_PGM>:
     1f2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001fc <port_to_output_PGM>:
     1fc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000206 <port_to_mode_PGM>:
     206:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000210 <__ctors_start>:
     210:	8e 03       	fmulsu	r16, r22
     212:	36 0c       	add	r3, r6
     214:	c7 0d       	add	r28, r7

00000216 <__ctors_end>:
     216:	a7 03       	fmuls	r18, r23

00000218 <__dtors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	d8 e0       	ldi	r29, 0x08	; 8
     220:	de bf       	out	0x3e, r29	; 62
     222:	cd bf       	out	0x3d, r28	; 61

00000224 <__do_copy_data>:
     224:	11 e0       	ldi	r17, 0x01	; 1
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	e4 e0       	ldi	r30, 0x04	; 4
     22c:	fa e2       	ldi	r31, 0x2A	; 42
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x10>
     230:	05 90       	lpm	r0, Z+
     232:	0d 92       	st	X+, r0
     234:	a6 3b       	cpi	r26, 0xB6	; 182
     236:	b1 07       	cpc	r27, r17
     238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0xc>

0000023a <__do_clear_bss>:
     23a:	26 e0       	ldi	r18, 0x06	; 6
     23c:	a6 eb       	ldi	r26, 0xB6	; 182
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
     242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
     244:	a4 3c       	cpi	r26, 0xC4	; 196
     246:	b2 07       	cpc	r27, r18
     248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
     24a:	11 e0       	ldi	r17, 0x01	; 1
     24c:	cb e0       	ldi	r28, 0x0B	; 11
     24e:	d1 e0       	ldi	r29, 0x01	; 1
     250:	04 c0       	rjmp	.+8      	; 0x25a <__do_global_ctors+0x10>
     252:	21 97       	sbiw	r28, 0x01	; 1
     254:	fe 01       	movw	r30, r28
     256:	0e 94 ab 13 	call	0x2756	; 0x2756 <__tablejump2__>
     25a:	c8 30       	cpi	r28, 0x08	; 8
     25c:	d1 07       	cpc	r29, r17
     25e:	c9 f7       	brne	.-14     	; 0x252 <__do_global_ctors+0x8>
     260:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <main>
     264:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__do_global_dtors>

00000268 <__bad_interrupt>:
     268:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026c <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
//#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	16 2f       	mov	r17, r22
					  :_isMock(isMock)
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN13Adafruit_FONAC1Ea>
     27c:	c6 5e       	subi	r28, 0xE6	; 230
     27e:	de 4f       	sbci	r29, 0xFE	; 254
     280:	18 83       	st	Y, r17
{
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	08 95       	ret

0000028a <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     28a:	08 95       	ret

0000028c <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	fc 01       	movw	r30, r24
     292:	db 01       	movw	r26, r22
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	8d 91       	ld	r24, X+
     298:	9c 91       	ld	r25, X
     29a:	13 97       	sbiw	r26, 0x03	; 3
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     2a0:	14 96       	adiw	r26, 0x04	; 4
     2a2:	4d 91       	ld	r20, X+
     2a4:	5d 91       	ld	r21, X+
     2a6:	6d 91       	ld	r22, X+
     2a8:	7c 91       	ld	r23, X
     2aa:	17 97       	sbiw	r26, 0x07	; 7
     2ac:	44 83       	std	Z+4, r20	; 0x04
     2ae:	55 83       	std	Z+5, r21	; 0x05
     2b0:	66 83       	std	Z+6, r22	; 0x06
     2b2:	77 83       	std	Z+7, r23	; 0x07
     2b4:	18 96       	adiw	r26, 0x08	; 8
     2b6:	4d 91       	ld	r20, X+
     2b8:	5d 91       	ld	r21, X+
     2ba:	6d 91       	ld	r22, X+
     2bc:	7c 91       	ld	r23, X
     2be:	1b 97       	sbiw	r26, 0x0b	; 11
     2c0:	40 87       	std	Z+8, r20	; 0x08
     2c2:	51 87       	std	Z+9, r21	; 0x09
     2c4:	62 87       	std	Z+10, r22	; 0x0a
     2c6:	73 87       	std	Z+11, r23	; 0x0b
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
     2c8:	1c 96       	adiw	r26, 0x0c	; 12
     2ca:	8c 91       	ld	r24, X
     2cc:	1c 97       	sbiw	r26, 0x0c	; 12
     2ce:	84 87       	std	Z+12, r24	; 0x0c
     2d0:	1d 96       	adiw	r26, 0x0d	; 13
     2d2:	8c 91       	ld	r24, X
     2d4:	1d 97       	sbiw	r26, 0x0d	; 13
     2d6:	85 87       	std	Z+13, r24	; 0x0d
     2d8:	bf 01       	movw	r22, r30
     2da:	62 5f       	subi	r22, 0xF2	; 242
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 96       	adiw	r24, 0x0e	; 14
     2e2:	9f 01       	movw	r18, r30
     2e4:	23 5f       	subi	r18, 0xF3	; 243
     2e6:	3e 4f       	sbci	r19, 0xFE	; 254
     2e8:	ec 01       	movw	r28, r24
     2ea:	49 91       	ld	r20, Y+
     2ec:	ce 01       	movw	r24, r28
     2ee:	eb 01       	movw	r28, r22
     2f0:	49 93       	st	Y+, r20
     2f2:	be 01       	movw	r22, r28
     2f4:	c2 17       	cp	r28, r18
     2f6:	d3 07       	cpc	r29, r19
     2f8:	b9 f7       	brne	.-18     	; 0x2e8 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x5c>
     2fa:	cd 01       	movw	r24, r26
     2fc:	83 5f       	subi	r24, 0xF3	; 243
     2fe:	9e 4f       	sbci	r25, 0xFE	; 254
     300:	ec 01       	movw	r28, r24
     302:	88 81       	ld	r24, Y
     304:	99 81       	ldd	r25, Y+1	; 0x01
     306:	eb 01       	movw	r28, r22
     308:	99 83       	std	Y+1, r25	; 0x01
     30a:	88 83       	st	Y, r24
     30c:	ed 01       	movw	r28, r26
     30e:	c1 5f       	subi	r28, 0xF1	; 241
     310:	de 4f       	sbci	r29, 0xFE	; 254
     312:	88 81       	ld	r24, Y
     314:	99 81       	ldd	r25, Y+1	; 0x01
     316:	ef 01       	movw	r28, r30
     318:	c1 5f       	subi	r28, 0xF1	; 241
     31a:	de 4f       	sbci	r29, 0xFE	; 254
     31c:	99 83       	std	Y+1, r25	; 0x01
     31e:	88 83       	st	Y, r24
     320:	ed 01       	movw	r28, r26
     322:	cf 5e       	subi	r28, 0xEF	; 239
     324:	de 4f       	sbci	r29, 0xFE	; 254
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	ef 01       	movw	r28, r30
     32c:	cf 5e       	subi	r28, 0xEF	; 239
     32e:	de 4f       	sbci	r29, 0xFE	; 254
     330:	99 83       	std	Y+1, r25	; 0x01
     332:	88 83       	st	Y, r24
     334:	ed 01       	movw	r28, r26
     336:	cd 5e       	subi	r28, 0xED	; 237
     338:	de 4f       	sbci	r29, 0xFE	; 254
     33a:	88 81       	ld	r24, Y
     33c:	ef 01       	movw	r28, r30
     33e:	cd 5e       	subi	r28, 0xED	; 237
     340:	de 4f       	sbci	r29, 0xFE	; 254
     342:	88 83       	st	Y, r24
     344:	ed 01       	movw	r28, r26
     346:	cc 5e       	subi	r28, 0xEC	; 236
     348:	de 4f       	sbci	r29, 0xFE	; 254
     34a:	88 81       	ld	r24, Y
     34c:	99 81       	ldd	r25, Y+1	; 0x01
     34e:	ef 01       	movw	r28, r30
     350:	cc 5e       	subi	r28, 0xEC	; 236
     352:	de 4f       	sbci	r29, 0xFE	; 254
     354:	99 83       	std	Y+1, r25	; 0x01
     356:	88 83       	st	Y, r24
     358:	ed 01       	movw	r28, r26
     35a:	ca 5e       	subi	r28, 0xEA	; 234
     35c:	de 4f       	sbci	r29, 0xFE	; 254
     35e:	88 81       	ld	r24, Y
     360:	99 81       	ldd	r25, Y+1	; 0x01
     362:	ef 01       	movw	r28, r30
     364:	ca 5e       	subi	r28, 0xEA	; 234
     366:	de 4f       	sbci	r29, 0xFE	; 254
     368:	99 83       	std	Y+1, r25	; 0x01
     36a:	88 83       	st	Y, r24
     36c:	a8 5e       	subi	r26, 0xE8	; 232
     36e:	be 4f       	sbci	r27, 0xFE	; 254
     370:	8d 91       	ld	r24, X+
     372:	9c 91       	ld	r25, X
     374:	e8 5e       	subi	r30, 0xE8	; 232
     376:	fe 4f       	sbci	r31, 0xFE	; 254
     378:	91 83       	std	Z+1, r25	; 0x01
     37a:	80 83       	st	Z, r24
	fona = fonaInstance;
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
	
	if (_isMock)
     382:	86 5e       	subi	r24, 0xE6	; 230
     384:	9e 4f       	sbci	r25, 0xFE	; 254
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	88 23       	and	r24, r24
     38c:	11 f0       	breq	.+4      	; 0x392 <_ZN10GpsManager9toggleGpsEb+0x10>
		return true;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	08 95       	ret
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     392:	08 95       	ret

00000394 <_ZN10GsmManagerC1Eh>:

void GsmManager::reset(){
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
	MOCK_DATA_SENT_SMS  = NULL;
     394:	fc 01       	movw	r30, r24
     396:	64 83       	std	Z+4, r22	; 0x04
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	05 96       	adiw	r24, 0x05	; 5
     39c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <_ZN13Adafruit_FONAC1Ea>

000003a0 <_ZN10GsmManagerD1Ev>:
     3a0:	08 95       	ret

000003a2 <_ZN10GsmManager7setFonaER13Adafruit_FONA>:
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	fc 01       	movw	r30, r24
     3a8:	db 01       	movw	r26, r22
     3aa:	12 96       	adiw	r26, 0x02	; 2
     3ac:	8d 91       	ld	r24, X+
     3ae:	9c 91       	ld	r25, X
     3b0:	13 97       	sbiw	r26, 0x03	; 3
     3b2:	90 87       	std	Z+8, r25	; 0x08
     3b4:	87 83       	std	Z+7, r24	; 0x07
     3b6:	14 96       	adiw	r26, 0x04	; 4
     3b8:	4d 91       	ld	r20, X+
     3ba:	5d 91       	ld	r21, X+
     3bc:	6d 91       	ld	r22, X+
     3be:	7c 91       	ld	r23, X
     3c0:	17 97       	sbiw	r26, 0x07	; 7
     3c2:	41 87       	std	Z+9, r20	; 0x09
     3c4:	52 87       	std	Z+10, r21	; 0x0a
     3c6:	63 87       	std	Z+11, r22	; 0x0b
     3c8:	74 87       	std	Z+12, r23	; 0x0c
     3ca:	18 96       	adiw	r26, 0x08	; 8
     3cc:	4d 91       	ld	r20, X+
     3ce:	5d 91       	ld	r21, X+
     3d0:	6d 91       	ld	r22, X+
     3d2:	7c 91       	ld	r23, X
     3d4:	1b 97       	sbiw	r26, 0x0b	; 11
     3d6:	45 87       	std	Z+13, r20	; 0x0d
     3d8:	56 87       	std	Z+14, r21	; 0x0e
     3da:	67 87       	std	Z+15, r22	; 0x0f
     3dc:	70 8b       	std	Z+16, r23	; 0x10
     3de:	1c 96       	adiw	r26, 0x0c	; 12
     3e0:	8c 91       	ld	r24, X
     3e2:	1c 97       	sbiw	r26, 0x0c	; 12
     3e4:	81 8b       	std	Z+17, r24	; 0x11
     3e6:	1d 96       	adiw	r26, 0x0d	; 13
     3e8:	8c 91       	ld	r24, X
     3ea:	1d 97       	sbiw	r26, 0x0d	; 13
     3ec:	82 8b       	std	Z+18, r24	; 0x12
     3ee:	bf 01       	movw	r22, r30
     3f0:	6d 5e       	subi	r22, 0xED	; 237
     3f2:	7f 4f       	sbci	r23, 0xFF	; 255
     3f4:	cd 01       	movw	r24, r26
     3f6:	0e 96       	adiw	r24, 0x0e	; 14
     3f8:	9f 01       	movw	r18, r30
     3fa:	2e 5e       	subi	r18, 0xEE	; 238
     3fc:	3e 4f       	sbci	r19, 0xFE	; 254
     3fe:	ec 01       	movw	r28, r24
     400:	49 91       	ld	r20, Y+
     402:	ce 01       	movw	r24, r28
     404:	eb 01       	movw	r28, r22
     406:	49 93       	st	Y+, r20
     408:	be 01       	movw	r22, r28
     40a:	c2 17       	cp	r28, r18
     40c:	d3 07       	cpc	r29, r19
     40e:	b9 f7       	brne	.-18     	; 0x3fe <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x5c>
     410:	cd 01       	movw	r24, r26
     412:	83 5f       	subi	r24, 0xF3	; 243
     414:	9e 4f       	sbci	r25, 0xFE	; 254
     416:	ec 01       	movw	r28, r24
     418:	88 81       	ld	r24, Y
     41a:	99 81       	ldd	r25, Y+1	; 0x01
     41c:	eb 01       	movw	r28, r22
     41e:	99 83       	std	Y+1, r25	; 0x01
     420:	88 83       	st	Y, r24
     422:	ed 01       	movw	r28, r26
     424:	c1 5f       	subi	r28, 0xF1	; 241
     426:	de 4f       	sbci	r29, 0xFE	; 254
     428:	88 81       	ld	r24, Y
     42a:	99 81       	ldd	r25, Y+1	; 0x01
     42c:	ef 01       	movw	r28, r30
     42e:	cc 5e       	subi	r28, 0xEC	; 236
     430:	de 4f       	sbci	r29, 0xFE	; 254
     432:	99 83       	std	Y+1, r25	; 0x01
     434:	88 83       	st	Y, r24
     436:	ed 01       	movw	r28, r26
     438:	cf 5e       	subi	r28, 0xEF	; 239
     43a:	de 4f       	sbci	r29, 0xFE	; 254
     43c:	88 81       	ld	r24, Y
     43e:	99 81       	ldd	r25, Y+1	; 0x01
     440:	ef 01       	movw	r28, r30
     442:	ca 5e       	subi	r28, 0xEA	; 234
     444:	de 4f       	sbci	r29, 0xFE	; 254
     446:	99 83       	std	Y+1, r25	; 0x01
     448:	88 83       	st	Y, r24
     44a:	ed 01       	movw	r28, r26
     44c:	cd 5e       	subi	r28, 0xED	; 237
     44e:	de 4f       	sbci	r29, 0xFE	; 254
     450:	88 81       	ld	r24, Y
     452:	ef 01       	movw	r28, r30
     454:	c8 5e       	subi	r28, 0xE8	; 232
     456:	de 4f       	sbci	r29, 0xFE	; 254
     458:	88 83       	st	Y, r24
     45a:	ed 01       	movw	r28, r26
     45c:	cc 5e       	subi	r28, 0xEC	; 236
     45e:	de 4f       	sbci	r29, 0xFE	; 254
     460:	88 81       	ld	r24, Y
     462:	99 81       	ldd	r25, Y+1	; 0x01
     464:	ef 01       	movw	r28, r30
     466:	c7 5e       	subi	r28, 0xE7	; 231
     468:	de 4f       	sbci	r29, 0xFE	; 254
     46a:	99 83       	std	Y+1, r25	; 0x01
     46c:	88 83       	st	Y, r24
     46e:	ed 01       	movw	r28, r26
     470:	ca 5e       	subi	r28, 0xEA	; 234
     472:	de 4f       	sbci	r29, 0xFE	; 254
     474:	88 81       	ld	r24, Y
     476:	99 81       	ldd	r25, Y+1	; 0x01
     478:	ef 01       	movw	r28, r30
     47a:	c5 5e       	subi	r28, 0xE5	; 229
     47c:	de 4f       	sbci	r29, 0xFE	; 254
     47e:	99 83       	std	Y+1, r25	; 0x01
     480:	88 83       	st	Y, r24
     482:	a8 5e       	subi	r26, 0xE8	; 232
     484:	be 4f       	sbci	r27, 0xFE	; 254
     486:	8d 91       	ld	r24, X+
     488:	9c 91       	ld	r25, X
     48a:	e3 5e       	subi	r30, 0xE3	; 227
     48c:	fe 4f       	sbci	r31, 0xFE	; 254
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <_ZN10GsmManager5beginEv>:
	#endif
}

bool GsmManager::begin(){
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29

	if (_isMock)
     4a4:	fc 01       	movw	r30, r24
     4a6:	24 81       	ldd	r18, Z+4	; 0x04
     4a8:	21 11       	cpse	r18, r1
     4aa:	27 c0       	rjmp	.+78     	; 0x4fa <_ZN10GsmManager5beginEv+0x62>
     4ac:	ec 01       	movw	r28, r24
		return true;

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     4ae:	8f e1       	ldi	r24, 0x1F	; 31
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_Znwj>
     4b6:	8c 01       	movw	r16, r24
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	42 e0       	ldi	r20, 0x02	; 2
     4bc:	63 e0       	ldi	r22, 0x03	; 3
     4be:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN14SoftwareSerialC1Ehhb>
     4c2:	7e 01       	movw	r14, r28
     4c4:	f1 ee       	ldi	r31, 0xE1	; 225
     4c6:	ef 1a       	sub	r14, r31
     4c8:	fe ef       	ldi	r31, 0xFE	; 254
     4ca:	ff 0a       	sbc	r15, r31
     4cc:	f7 01       	movw	r30, r14
     4ce:	11 83       	std	Z+1, r17	; 0x01
     4d0:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     4d2:	40 ec       	ldi	r20, 0xC0	; 192
     4d4:	52 e1       	ldi	r21, 0x12	; 18
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	c8 01       	movw	r24, r16
     4dc:	0e 94 89 12 	call	0x2512	; 0x2512 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     4e0:	f7 01       	movw	r30, r14
     4e2:	60 81       	ld	r22, Z
     4e4:	71 81       	ldd	r23, Z+1	; 0x01
     4e6:	ce 01       	movw	r24, r28
     4e8:	05 96       	adiw	r24, 0x05	; 5
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
	if (_isMock)
		return true;

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
	fonaSerial->begin(4800);
	return fona.begin(*fonaSerial);
     4f6:	0c 94 5e 07 	jmp	0xebc	; 0xebc <_ZN13Adafruit_FONA5beginER6Stream>
}
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <_ZN7Helpers15printSensorDataEP10SensorData>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"

void Helpers::printSensorData(SensorData* sd) {
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
     510:	69 e8       	ldi	r22, 0x89	; 137
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	86 ed       	ldi	r24, 0xD6	; 214
     516:	95 e0       	ldi	r25, 0x05	; 5
     518:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
     51c:	69 81       	ldd	r22, Y+1	; 0x01
     51e:	7a 81       	ldd	r23, Y+2	; 0x02
     520:	4a e0       	ldi	r20, 0x0A	; 10
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	86 ed       	ldi	r24, 0xD6	; 214
     526:	95 e0       	ldi	r25, 0x05	; 5
     528:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     52c:	65 e8       	ldi	r22, 0x85	; 133
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	86 ed       	ldi	r24, 0xD6	; 214
     532:	95 e0       	ldi	r25, 0x05	; 5
     534:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
     538:	6f e7       	ldi	r22, 0x7F	; 127
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	86 ed       	ldi	r24, 0xD6	; 214
     53e:	95 e0       	ldi	r25, 0x05	; 5
     540:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
     544:	6d 81       	ldd	r22, Y+5	; 0x05
     546:	7e 81       	ldd	r23, Y+6	; 0x06
     548:	4a e0       	ldi	r20, 0x0A	; 10
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	86 ed       	ldi	r24, 0xD6	; 214
     54e:	95 e0       	ldi	r25, 0x05	; 5
     550:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     554:	6b e7       	ldi	r22, 0x7B	; 123
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	86 ed       	ldi	r24, 0xD6	; 214
     55a:	95 e0       	ldi	r25, 0x05	; 5
     55c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
     560:	62 e7       	ldi	r22, 0x72	; 114
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	86 ed       	ldi	r24, 0xD6	; 214
     566:	95 e0       	ldi	r25, 0x05	; 5
     568:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
     56c:	6b 81       	ldd	r22, Y+3	; 0x03
     56e:	7c 81       	ldd	r23, Y+4	; 0x04
     570:	4a e0       	ldi	r20, 0x0A	; 10
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	86 ed       	ldi	r24, 0xD6	; 214
     576:	95 e0       	ldi	r25, 0x05	; 5
     578:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     57c:	6e e6       	ldi	r22, 0x6E	; 110
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	86 ed       	ldi	r24, 0xD6	; 214
     582:	95 e0       	ldi	r25, 0x05	; 5
     584:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
     588:	68 e6       	ldi	r22, 0x68	; 104
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	86 ed       	ldi	r24, 0xD6	; 214
     58e:	95 e0       	ldi	r25, 0x05	; 5
     590:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->temperature);
     594:	6f 81       	ldd	r22, Y+7	; 0x07
     596:	78 85       	ldd	r23, Y+8	; 0x08
     598:	4a e0       	ldi	r20, 0x0A	; 10
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	86 ed       	ldi	r24, 0xD6	; 214
     59e:	95 e0       	ldi	r25, 0x05	; 5
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
	RM_LOG(F("Current="));
	RM_LOG(sd->current);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Temp="));
	RM_LOGLN(sd->temperature);
     5a4:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <_ZN5Print7printlnEji>

000005a8 <_Z14initSubsystemsv>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
     5a8:	67 ef       	ldi	r22, 0xF7	; 247
     5aa:	73 e0       	ldi	r23, 0x03	; 3
     5ac:	8b ed       	ldi	r24, 0xDB	; 219
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN10GpsManager7setFonaER13Adafruit_FONA>
     5b4:	67 ef       	ldi	r22, 0xF7	; 247
     5b6:	73 e0       	ldi	r23, 0x03	; 3
     5b8:	8a eb       	ldi	r24, 0xBA	; 186
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN10GsmManager7setFonaER13Adafruit_FONA>
     5c0:	8a eb       	ldi	r24, 0xBA	; 186
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN10GsmManager5beginEv>
     5c8:	88 23       	and	r24, r24
     5ca:	29 f0       	breq	.+10     	; 0x5d6 <_Z14initSubsystemsv+0x2e>
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	8b ed       	ldi	r24, 0xDB	; 219
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0c 94 c1 01 	jmp	0x382	; 0x382 <_ZN10GpsManager9toggleGpsEb>
     5d6:	08 95       	ret

000005d8 <_Z15switchOffSystemv>:
     5d8:	67 e0       	ldi	r22, 0x07	; 7
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	86 ed       	ldi	r24, 0xD6	; 214
     5de:	95 e0       	ldi	r25, 0x05	; 5
     5e0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZN5Print7printlnEPKc>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	85 e0       	ldi	r24, 0x05	; 5
     5e8:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
     5ec:	68 eb       	ldi	r22, 0xB8	; 184
     5ee:	7b e0       	ldi	r23, 0x0B	; 11
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <delay>

000005f8 <setup>:
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	85 e0       	ldi	r24, 0x05	; 5
     5fc:	0e 94 46 10 	call	0x208c	; 0x208c <pinMode>
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
     608:	68 eb       	ldi	r22, 0xB8	; 184
     60a:	7b e0       	ldi	r23, 0x0B	; 11
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	0e 94 46 10 	call	0x208c	; 0x208c <pinMode>
     61c:	26 e0       	ldi	r18, 0x06	; 6
     61e:	40 e8       	ldi	r20, 0x80	; 128
     620:	55 e2       	ldi	r21, 0x25	; 37
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	86 ed       	ldi	r24, 0xD6	; 214
     628:	95 e0       	ldi	r25, 0x05	; 5
     62a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_ZN14HardwareSerial5beginEmh>
     62e:	6b ea       	ldi	r22, 0xAB	; 171
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	86 ed       	ldi	r24, 0xD6	; 214
     634:	95 e0       	ldi	r25, 0x05	; 5
     636:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
     63a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z14initSubsystemsv>
     63e:	86 ef       	ldi	r24, 0xF6	; 246
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	0e 94 99 04 	call	0x932	; 0x932 <_ZN12RmMemManager17verifyBasicEepRomEv>
     646:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_Z15switchOffSystemv>

0000064a <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	2a 97       	sbiw	r28, 0x0a	; 10
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
//};


//TODO: All these to be uint16_t ?

struct SensorData {
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	89 83       	std	Y+1, r24	; 0x01
	
	SensorData sd;
	sensorMgr.readData(&sd);
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	89 eb       	ldi	r24, 0xB9	; 185
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	2a 96       	adiw	r28, 0x0a	; 10
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <_Z8sendDatav>:

boolean sendData() {
	
	RM_LOGLN(F("Sending data..."));
     684:	6b e9       	ldi	r22, 0x9B	; 155
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	86 ed       	ldi	r24, 0xD6	; 214
     68a:	95 e0       	ldi	r25, 0x05	; 5
     68c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	return false;
}
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret

00000694 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
     694:	68 ee       	ldi	r22, 0xE8	; 232
     696:	73 e0       	ldi	r23, 0x03	; 3
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
	++_timerCounter;
     6a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     6a4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x1>
     6ae:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
     6b2:	61 e9       	ldi	r22, 0x91	; 145
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	86 ed       	ldi	r24, 0xD6	; 214
     6b8:	95 e0       	ldi	r25, 0x05	; 5
     6ba:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
     6be:	68 e1       	ldi	r22, 0x18	; 24
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	86 ed       	ldi	r24, 0xD6	; 214
     6c4:	95 e0       	ldi	r25, 0x05	; 5
     6c6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN5Print5printEPKc>
     6ca:	4a e0       	ldi	r20, 0x0A	; 10
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <_behaviour>
     6d2:	86 ed       	ldi	r24, 0xD6	; 214
     6d4:	95 e0       	ldi	r25, 0x05	; 5
     6d6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
     6da:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_behaviour>
     6de:	80 ff       	sbrs	r24, 0
     6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <loop+0x60>
		
		if (takeReadings())
     6e2:	0e 94 25 03 	call	0x64a	; 0x64a <_Z12takeReadingsv>
     6e6:	88 23       	and	r24, r24
     6e8:	29 f0       	breq	.+10     	; 0x6f4 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
     6ea:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_behaviour>
     6ee:	8e 7f       	andi	r24, 0xFE	; 254
     6f0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
     6f4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_behaviour>
     6f8:	81 ff       	sbrs	r24, 1
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <loop+0x7a>
		
		if (sendData())
     6fc:	0e 94 42 03 	call	0x684	; 0x684 <_Z8sendDatav>
     700:	88 23       	and	r24, r24
     702:	29 f0       	breq	.+10     	; 0x70e <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
     704:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_behaviour>
     708:	8d 7f       	andi	r24, 0xFD	; 253
     70a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
     70e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_behaviour>
     712:	81 11       	cpse	r24, r1
     714:	02 c0       	rjmp	.+4      	; 0x71a <loop+0x86>
		
		switchOffSystem();
     716:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_Z15switchOffSystemv>
     71a:	08 95       	ret

0000071c <_GLOBAL__sub_I_fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
     71c:	64 e0       	ldi	r22, 0x04	; 4
     71e:	87 ef       	ldi	r24, 0xF7	; 247
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN13Adafruit_FONAC1Ea>
RmMemManager mem = RmMemManager(false);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	86 ef       	ldi	r24, 0xF6	; 246
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN12RmMemManagerC1Eb>
GpsManager gps = GpsManager(IS_GPS_MOCK);
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	8b ed       	ldi	r24, 0xDB	; 219
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN10GpsManagerC1Eh>
GsmManager gsm = GsmManager(IS_GSM_MOCK);
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	8a eb       	ldi	r24, 0xBA	; 186
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 ca 01 	call	0x394	; 0x394 <_ZN10GsmManagerC1Eh>
SensorManager sensorMgr = SensorManager(true);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	89 eb       	ldi	r24, 0xB9	; 185
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_ZN13SensorManagerC1Eb>

0000074e <_GLOBAL__sub_D_fona>:

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem = RmMemManager(false);
GpsManager gps = GpsManager(IS_GPS_MOCK);
GsmManager gsm = GsmManager(IS_GSM_MOCK);
     74e:	8a eb       	ldi	r24, 0xBA	; 186
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10GsmManagerD1Ev>


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem = RmMemManager(false);
GpsManager gps = GpsManager(IS_GPS_MOCK);
     756:	8b ed       	ldi	r24, 0xDB	; 219
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_ZN10GpsManagerD1Ev>

0000075e <_ZN7TwoWire5writeEi>:
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
     75e:	dc 01       	movw	r26, r24
     760:	ed 91       	ld	r30, X+
     762:	fc 91       	ld	r31, X
     764:	01 90       	ld	r0, Z+
     766:	f0 81       	ld	r31, Z
     768:	e0 2d       	mov	r30, r0
     76a:	09 94       	ijmp

0000076c <_ZN12RmMemManagerC1Eb>:
     76c:	fc 01       	movw	r30, r24
     76e:	60 83       	st	Z, r22
     770:	61 11       	cpse	r22, r1
     772:	04 c0       	rjmp	.+8      	; 0x77c <_ZN12RmMemManagerC1Eb+0x10>
     774:	80 e8       	ldi	r24, 0x80	; 128
     776:	95 e0       	ldi	r25, 0x05	; 5
     778:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_ZN7TwoWire5beginEv>
     77c:	08 95       	ret

0000077e <_Z13internalWritejPhh>:
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
     78c:	7b 01       	movw	r14, r22
     78e:	e4 0e       	add	r14, r20
     790:	f1 1c       	adc	r15, r1
     792:	8c 01       	movw	r16, r24
     794:	ce 15       	cp	r28, r14
     796:	df 05       	cpc	r29, r15
     798:	21 f1       	breq	.+72     	; 0x7e2 <_Z13internalWritejPhh+0x64>
     79a:	60 e5       	ldi	r22, 0x50	; 80
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e8       	ldi	r24, 0x80	; 128
     7a0:	95 e0       	ldi	r25, 0x05	; 5
     7a2:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7TwoWire17beginTransmissionEi>
     7a6:	61 2f       	mov	r22, r17
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	95 e0       	ldi	r25, 0x05	; 5
     7ae:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN7TwoWire5writeEi>
     7b2:	b8 01       	movw	r22, r16
     7b4:	77 27       	eor	r23, r23
     7b6:	80 e8       	ldi	r24, 0x80	; 128
     7b8:	95 e0       	ldi	r25, 0x05	; 5
     7ba:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN7TwoWire5writeEi>
     7be:	69 91       	ld	r22, Y+
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	95 e0       	ldi	r25, 0x05	; 5
     7c4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN7TwoWire5writeEh>
     7c8:	80 e8       	ldi	r24, 0x80	; 128
     7ca:	95 e0       	ldi	r25, 0x05	; 5
     7cc:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN7TwoWire15endTransmissionEv>
     7d0:	6f e0       	ldi	r22, 0x0F	; 15
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
     7dc:	0f 5f       	subi	r16, 0xFF	; 255
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
     7e0:	d9 cf       	rjmp	.-78     	; 0x794 <_Z13internalWritejPhh+0x16>
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	08 95       	ret

000007f0 <_Z12internalReadjPhh>:
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	eb 01       	movw	r28, r22
     7fe:	7b 01       	movw	r14, r22
     800:	e4 0e       	add	r14, r20
     802:	f1 1c       	adc	r15, r1
     804:	8c 01       	movw	r16, r24
     806:	ce 15       	cp	r28, r14
     808:	df 05       	cpc	r29, r15
     80a:	71 f1       	breq	.+92     	; 0x868 <_Z12internalReadjPhh+0x78>
     80c:	60 e5       	ldi	r22, 0x50	; 80
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e8       	ldi	r24, 0x80	; 128
     812:	95 e0       	ldi	r25, 0x05	; 5
     814:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7TwoWire17beginTransmissionEi>
     818:	61 2f       	mov	r22, r17
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e8       	ldi	r24, 0x80	; 128
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN7TwoWire5writeEi>
     824:	b8 01       	movw	r22, r16
     826:	77 27       	eor	r23, r23
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	95 e0       	ldi	r25, 0x05	; 5
     82c:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN7TwoWire5writeEi>
     830:	80 e8       	ldi	r24, 0x80	; 128
     832:	95 e0       	ldi	r25, 0x05	; 5
     834:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN7TwoWire15endTransmissionEv>
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	60 e5       	ldi	r22, 0x50	; 80
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e8       	ldi	r24, 0x80	; 128
     842:	95 e0       	ldi	r25, 0x05	; 5
     844:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN7TwoWire11requestFromEii>
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	95 e0       	ldi	r25, 0x05	; 5
     84c:	0e 94 cd 0a 	call	0x159a	; 0x159a <_ZN7TwoWire9availableEv>
     850:	89 2b       	or	r24, r25
     852:	29 f0       	breq	.+10     	; 0x85e <_Z12internalReadjPhh+0x6e>
     854:	80 e8       	ldi	r24, 0x80	; 128
     856:	95 e0       	ldi	r25, 0x05	; 5
     858:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN7TwoWire4readEv>
     85c:	01 c0       	rjmp	.+2      	; 0x860 <_Z12internalReadjPhh+0x70>
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	89 93       	st	Y+, r24
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	cf cf       	rjmp	.-98     	; 0x806 <_Z12internalReadjPhh+0x16>
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret

00000876 <_ZN12RmMemManager18getUCharFromMemoryEj>:
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	cb 01       	movw	r24, r22
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	be 01       	movw	r22, r28
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z12internalReadjPhh>
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <_ZN12RmMemManager19getUShortFromMemoryEj>:
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	00 d0       	rcall	.+0      	; 0x89e <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	cb 01       	movw	r24, r22
     8a4:	42 e0       	ldi	r20, 0x02	; 2
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z12internalReadjPhh>
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <_ZN12RmMemManager17getUIntFromMemoryEj>:
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
	return value;
}

uint32_t RmMemManager::getUIntFromMemory(uint16_t address) {
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <_ZN12RmMemManager17getUIntFromMemoryEj+0x6>
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <_ZN12RmMemManager17getUIntFromMemoryEj+0x8>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	cb 01       	movw	r24, r22
	
	uint32_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
     8cc:	44 e0       	ldi	r20, 0x04	; 4
     8ce:	be 01       	movw	r22, r28
     8d0:	6f 5f       	subi	r22, 0xFF	; 255
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z12internalReadjPhh>
	return value;
     8d8:	69 81       	ldd	r22, Y+1	; 0x01
     8da:	7a 81       	ldd	r23, Y+2	; 0x02
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	9c 81       	ldd	r25, Y+4	; 0x04
}
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <_ZN12RmMemManager18getULongFromMemoryEj>:

uint64_t RmMemManager::getULongFromMemory(uint16_t address) {
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	28 97       	sbiw	r28, 0x08	; 8
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	cb 01       	movw	r24, r22
	
	uint64_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
     904:	48 e0       	ldi	r20, 0x08	; 8
     906:	be 01       	movw	r22, r28
     908:	6f 5f       	subi	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z12internalReadjPhh>
	return value;
     910:	29 81       	ldd	r18, Y+1	; 0x01
     912:	3a 81       	ldd	r19, Y+2	; 0x02
     914:	4b 81       	ldd	r20, Y+3	; 0x03
     916:	5c 81       	ldd	r21, Y+4	; 0x04
     918:	6d 81       	ldd	r22, Y+5	; 0x05
     91a:	7e 81       	ldd	r23, Y+6	; 0x06
}
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	98 85       	ldd	r25, Y+8	; 0x08
     920:	28 96       	adiw	r28, 0x08	; 8
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <_ZN12RmMemManager17verifyBasicEepRomEv>:
	++currVal;
	setUShortToMemory(addr, currVal);
	return currVal;
}

uint16_t RmMemManager::verifyBasicEepRom() {
     932:	2f 92       	push	r2
     934:	3f 92       	push	r3
     936:	4f 92       	push	r4
     938:	5f 92       	push	r5
     93a:	6f 92       	push	r6
     93c:	7f 92       	push	r7
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	63 97       	sbiw	r28, 0x13	; 19
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	5c 01       	movw	r10, r24
	
	//TODO: Verify of spill over 64-bit boundary what to do
	//TODO: Roll-over verification
	//TODO: Don't have strings of messages, return code which translate in a #if NOT_ENCODED_ON_DEVICE block
	
	RM_LOG(F("Basic EEPROM Test"));
     968:	62 e1       	ldi	r22, 0x12	; 18
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	86 ed       	ldi	r24, 0xD6	; 214
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
     974:	8e e1       	ldi	r24, 0x1E	; 30
     976:	28 2e       	mov	r2, r24
     978:	28 ea       	ldi	r18, 0xA8	; 168
     97a:	29 83       	std	Y+1, r18	; 0x01
     97c:	89 ef       	ldi	r24, 0xF9	; 249
     97e:	8a 83       	std	Y+2, r24	; 0x02
     980:	91 e4       	ldi	r25, 0x41	; 65
     982:	9b 83       	std	Y+3, r25	; 0x03
     984:	a9 ec       	ldi	r26, 0xC9	; 201
     986:	ac 83       	std	Y+4, r26	; 0x04
     988:	b8 ed       	ldi	r27, 0xD8	; 216
     98a:	bd 83       	std	Y+5, r27	; 0x05
     98c:	e7 ef       	ldi	r30, 0xF7	; 247
     98e:	ee 83       	std	Y+6, r30	; 0x06
     990:	26 e4       	ldi	r18, 0x46	; 70
     992:	2f 83       	std	Y+7, r18	; 0x07
     994:	89 ea       	ldi	r24, 0xA9	; 169
     996:	88 87       	std	Y+8, r24	; 0x08
	internalWrite(address, (uint8_t*)&value, sizeof(value));
}

void RmMemManager::setULongToMemory(uint16_t address, uint64_t value) {
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
     998:	48 e0       	ldi	r20, 0x08	; 8
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	85 e0       	ldi	r24, 0x05	; 5
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 bf 03 	call	0x77e	; 0x77e <_Z13internalWritejPhh>
	
	for(uint8_t i=0;i<30;i++) {
		
		//No intersection of values so we'll know straight away if wrong bits picked
		this->setULongToMemory(MEM_TEST_LOC, 0xA946F7D8C941F9A8);
		uint64_t val8 = this->getULongFromMemory(MEM_TEST_LOC);
     9a8:	65 e0       	ldi	r22, 0x05	; 5
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	c5 01       	movw	r24, r10
     9ae:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN12RmMemManager18getULongFromMemoryEj>
     9b2:	28 8b       	std	Y+16, r18	; 0x10
     9b4:	c3 2e       	mov	r12, r19
     9b6:	d4 2e       	mov	r13, r20
     9b8:	15 2f       	mov	r17, r21
     9ba:	36 2e       	mov	r3, r22
     9bc:	87 2e       	mov	r8, r23
     9be:	98 2e       	mov	r9, r24
     9c0:	09 2f       	mov	r16, r25
		if (val8 != 0xA946F7D8C941F9A8) {
     9c2:	28 3a       	cpi	r18, 0xA8	; 168
     9c4:	39 4f       	sbci	r19, 0xF9	; 249
     9c6:	41 44       	sbci	r20, 0x41	; 65
     9c8:	59 4c       	sbci	r21, 0xC9	; 201
     9ca:	68 4d       	sbci	r22, 0xD8	; 216
     9cc:	77 4f       	sbci	r23, 0xF7	; 247
     9ce:	86 44       	sbci	r24, 0x46	; 70
     9d0:	99 4a       	sbci	r25, 0xA9	; 169
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <_ZN12RmMemManager17verifyBasicEepRomEv+0xb4>
			RM_LOGLN(F("FAILED LONG"));
     9d4:	66 e0       	ldi	r22, 0x06	; 6
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	86 ed       	ldi	r24, 0xD6	; 214
     9da:	95 e0       	ldi	r25, 0x05	; 5
     9dc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
     9e0:	bf ef       	ldi	r27, 0xFF	; 255
     9e2:	eb 1a       	sub	r14, r27
     9e4:	fb 0a       	sbc	r15, r27
     9e6:	88 e4       	ldi	r24, 0x48	; 72
     9e8:	99 ef       	ldi	r25, 0xF9	; 249
     9ea:	a1 e1       	ldi	r26, 0x11	; 17
     9ec:	b9 ec       	ldi	r27, 0xC9	; 201
     9ee:	89 87       	std	Y+9, r24	; 0x09
     9f0:	9a 87       	std	Y+10, r25	; 0x0a
     9f2:	ab 87       	std	Y+11, r26	; 0x0b
     9f4:	bc 87       	std	Y+12, r27	; 0x0c
	internalWrite(address, (uint8_t*)&value, sizeof(value));
}

void RmMemManager::setUIntToMemory(uint16_t address, uint32_t value) {
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
     9f6:	44 e0       	ldi	r20, 0x04	; 4
     9f8:	be 01       	movw	r22, r28
     9fa:	67 5f       	subi	r22, 0xF7	; 247
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 bf 03 	call	0x77e	; 0x77e <_Z13internalWritejPhh>
			RM_LOGLN(F("FAILED LONG"));
			++numFailures;
		}
		
		this->setUIntToMemory(MEM_TEST_LOC, 0xC911F948);
		uint32_t val4 = this->getUIntFromMemory(MEM_TEST_LOC);
     a06:	65 e0       	ldi	r22, 0x05	; 5
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	c5 01       	movw	r24, r10
     a0c:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN12RmMemManager17getUIntFromMemoryEj>
     a10:	2b 01       	movw	r4, r22
     a12:	3c 01       	movw	r6, r24
		if (val4 != 0xC911F948) {
     a14:	98 e4       	ldi	r25, 0x48	; 72
     a16:	49 16       	cp	r4, r25
     a18:	99 ef       	ldi	r25, 0xF9	; 249
     a1a:	59 06       	cpc	r5, r25
     a1c:	91 e1       	ldi	r25, 0x11	; 17
     a1e:	69 06       	cpc	r6, r25
     a20:	99 ec       	ldi	r25, 0xC9	; 201
     a22:	79 06       	cpc	r7, r25
     a24:	49 f0       	breq	.+18     	; 0xa38 <_ZN12RmMemManager17verifyBasicEepRomEv+0x106>
			RM_LOGLN(F("FAILED INT"));
     a26:	6b ef       	ldi	r22, 0xFB	; 251
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	86 ed       	ldi	r24, 0xD6	; 214
     a2c:	95 e0       	ldi	r25, 0x05	; 5
     a2e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
     a32:	af ef       	ldi	r26, 0xFF	; 255
     a34:	ea 1a       	sub	r14, r26
     a36:	fa 0a       	sbc	r15, r26
     a38:	8a e3       	ldi	r24, 0x3A	; 58
     a3a:	9c e5       	ldi	r25, 0x5C	; 92
     a3c:	9e 87       	std	Y+14, r25	; 0x0e
     a3e:	8d 87       	std	Y+13, r24	; 0x0d
	internalWrite(address, (uint8_t*)&value, sizeof(value));
}

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value) {
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
     a40:	42 e0       	ldi	r20, 0x02	; 2
     a42:	be 01       	movw	r22, r28
     a44:	63 5f       	subi	r22, 0xF3	; 243
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	85 e0       	ldi	r24, 0x05	; 5
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 bf 03 	call	0x77e	; 0x77e <_Z13internalWritejPhh>
			RM_LOGLN(F("FAILED INT"));
			++numFailures;
		}
		
		this->setUShortToMemory(MEM_TEST_LOC, 0x5C3A);
		uint16_t val2 = this->getUShortFromMemory(MEM_TEST_LOC);
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	c5 01       	movw	r24, r10
     a56:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN12RmMemManager19getUShortFromMemoryEj>
     a5a:	9a 8b       	std	Y+18, r25	; 0x12
     a5c:	89 8b       	std	Y+17, r24	; 0x11
		if (val2 != 0x5C3A) {
     a5e:	8a 33       	cpi	r24, 0x3A	; 58
     a60:	9c 45       	sbci	r25, 0x5C	; 92
     a62:	49 f0       	breq	.+18     	; 0xa76 <_ZN12RmMemManager17verifyBasicEepRomEv+0x144>
			RM_LOGLN(F("FAILED SHORT"));
     a64:	6e ee       	ldi	r22, 0xEE	; 238
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	86 ed       	ldi	r24, 0xD6	; 214
     a6a:	95 e0       	ldi	r25, 0x05	; 5
     a6c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
     a70:	bf ef       	ldi	r27, 0xFF	; 255
     a72:	eb 1a       	sub	r14, r27
     a74:	fb 0a       	sbc	r15, r27
     a76:	81 ee       	ldi	r24, 0xE1	; 225
     a78:	8f 87       	std	Y+15, r24	; 0x0f
	return value;
}

void RmMemManager::setUCharToMemory(uint16_t address, uint8_t value) {
	
	internalWrite(address, (uint8_t*)&value, sizeof(value));
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	be 01       	movw	r22, r28
     a7e:	61 5f       	subi	r22, 0xF1	; 241
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	85 e0       	ldi	r24, 0x05	; 5
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 bf 03 	call	0x77e	; 0x77e <_Z13internalWritejPhh>
			RM_LOGLN(F("FAILED SHORT"));
			++numFailures;
		}
		
		this->setUCharToMemory(MEM_TEST_LOC, 0xE1);
		uint8_t val1 = this->getUCharFromMemory(MEM_TEST_LOC);
     a8a:	65 e0       	ldi	r22, 0x05	; 5
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	c5 01       	movw	r24, r10
     a90:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN12RmMemManager18getUCharFromMemoryEj>
     a94:	8b 8b       	std	Y+19, r24	; 0x13
		if (val1 != 0xE1) {
     a96:	81 3e       	cpi	r24, 0xE1	; 225
     a98:	49 f0       	breq	.+18     	; 0xaac <_ZN12RmMemManager17verifyBasicEepRomEv+0x17a>
			RM_LOGLN(F("FAILED CHAR"));
     a9a:	62 ee       	ldi	r22, 0xE2	; 226
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	86 ed       	ldi	r24, 0xD6	; 214
     aa0:	95 e0       	ldi	r25, 0x05	; 5
     aa2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
			++numFailures;
     aa6:	ef ef       	ldi	r30, 0xFF	; 255
     aa8:	ee 1a       	sub	r14, r30
     aaa:	fe 0a       	sbc	r15, r30
		}
		
		RM_LOG(F("EEPROM Test: Long="));
     aac:	6f ec       	ldi	r22, 0xCF	; 207
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	86 ed       	ldi	r24, 0xD6	; 214
     ab2:	95 e0       	ldi	r25, 0x05	; 5
     ab4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLONG(val8, HEX);
     ab8:	28 89       	ldd	r18, Y+16	; 0x10
     aba:	3c 2d       	mov	r19, r12
     abc:	4d 2d       	mov	r20, r13
     abe:	51 2f       	mov	r21, r17
     ac0:	63 2d       	mov	r22, r3
     ac2:	78 2d       	mov	r23, r8
     ac4:	89 2d       	mov	r24, r9
     ac6:	90 2f       	mov	r25, r16
     ac8:	00 e2       	ldi	r16, 0x20	; 32
     aca:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__lshrdi3>
     ace:	f2 2f       	mov	r31, r18
     ad0:	e3 2f       	mov	r30, r19
     ad2:	20 e1       	ldi	r18, 0x10	; 16
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	cf 01       	movw	r24, r30
     ad8:	ba 01       	movw	r22, r20
     ada:	49 2f       	mov	r20, r25
     adc:	58 2f       	mov	r21, r24
     ade:	86 ed       	ldi	r24, 0xD6	; 214
     ae0:	95 e0       	ldi	r25, 0x05	; 5
     ae2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN5Print5printEmi>
     ae6:	20 e1       	ldi	r18, 0x10	; 16
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	48 89       	ldd	r20, Y+16	; 0x10
     aec:	5c 2d       	mov	r21, r12
     aee:	6d 2d       	mov	r22, r13
     af0:	71 2f       	mov	r23, r17
     af2:	86 ed       	ldi	r24, 0xD6	; 214
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN5Print5printEmi>
		RM_LOG(F(", Int="));
     afa:	68 ec       	ldi	r22, 0xC8	; 200
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	86 ed       	ldi	r24, 0xD6	; 214
     b00:	95 e0       	ldi	r25, 0x05	; 5
     b02:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val4, HEX);
     b06:	20 e1       	ldi	r18, 0x10	; 16
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	b3 01       	movw	r22, r6
     b0c:	a2 01       	movw	r20, r4
     b0e:	86 ed       	ldi	r24, 0xD6	; 214
     b10:	95 e0       	ldi	r25, 0x05	; 5
     b12:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN5Print5printEmi>
		RM_LOG(F(", Short="));
     b16:	6f eb       	ldi	r22, 0xBF	; 191
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	86 ed       	ldi	r24, 0xD6	; 214
     b1c:	95 e0       	ldi	r25, 0x05	; 5
     b1e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val2, HEX);
     b22:	40 e1       	ldi	r20, 0x10	; 16
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	69 89       	ldd	r22, Y+17	; 0x11
     b28:	7a 89       	ldd	r23, Y+18	; 0x12
     b2a:	86 ed       	ldi	r24, 0xD6	; 214
     b2c:	95 e0       	ldi	r25, 0x05	; 5
     b2e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN5Print5printEji>
		RM_LOG(F(", Char="));
     b32:	67 eb       	ldi	r22, 0xB7	; 183
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	86 ed       	ldi	r24, 0xD6	; 214
     b38:	95 e0       	ldi	r25, 0x05	; 5
     b3a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLNFMT(val1, HEX);
     b3e:	40 e1       	ldi	r20, 0x10	; 16
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	6b 89       	ldd	r22, Y+19	; 0x13
     b44:	86 ed       	ldi	r24, 0xD6	; 214
     b46:	95 e0       	ldi	r25, 0x05	; 5
     b48:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print7printlnEhi>
     b4c:	2a 94       	dec	r2
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++) {
     b4e:	21 10       	cpse	r2, r1
     b50:	13 cf       	rjmp	.-474    	; 0x978 <_ZN12RmMemManager17verifyBasicEepRomEv+0x46>
		RM_LOG(F(", Char="));
		RM_LOGLNFMT(val1, HEX);
	}
	
	return numFailures;
}
     b52:	c7 01       	movw	r24, r14
     b54:	63 96       	adiw	r28, 0x13	; 19
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	6f 90       	pop	r6
     b7c:	5f 90       	pop	r5
     b7e:	4f 90       	pop	r4
     b80:	3f 90       	pop	r3
     b82:	2f 90       	pop	r2
     b84:	08 95       	ret

00000b86 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
     b86:	fc 01       	movw	r30, r24
     b88:	60 83       	st	Z, r22
     b8a:	08 95       	ret

00000b8c <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	81 11       	cpse	r24, r1
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
     b94:	86 2f       	mov	r24, r22
     b96:	0c 94 00 10 	jmp	0x2000	; 0x2000 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
     b9a:	85 e0       	ldi	r24, 0x05	; 5
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <_Z11getMockDataP10SensorData>:

uint8_t __mockDataCounter;
void getMockData(SensorData* ret) {
     ba0:	fc 01       	movw	r30, r24
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
     ba2:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <__mockDataCounter>
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	28 0f       	add	r18, r24
     baa:	20 93 11 05 	sts	0x0511, r18	; 0x800511 <__mockDataCounter>
	
	ret->battVoltage = __mockDataCounter;
     bae:	82 2f       	mov	r24, r18
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	92 83       	std	Z+2, r25	; 0x02
     bb4:	81 83       	std	Z+1, r24	; 0x01
	ret->pVVoltage = __mockDataCounter*10;
     bb6:	3a e0       	ldi	r19, 0x0A	; 10
     bb8:	23 9f       	mul	r18, r19
     bba:	c0 01       	movw	r24, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	96 83       	std	Z+6, r25	; 0x06
     bc0:	85 83       	std	Z+5, r24	; 0x05
	ret->current = __mockDataCounter%7;
     bc2:	82 2f       	mov	r24, r18
     bc4:	67 e0       	ldi	r22, 0x07	; 7
     bc6:	0e 94 18 13 	call	0x2630	; 0x2630 <__udivmodqi4>
     bca:	89 2f       	mov	r24, r25
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	94 83       	std	Z+4, r25	; 0x04
     bd0:	83 83       	std	Z+3, r24	; 0x03
	ret->temperature = __mockDataCounter*100;
     bd2:	34 e6       	ldi	r19, 0x64	; 100
     bd4:	23 9f       	mul	r18, r19
     bd6:	c0 01       	movw	r24, r0
     bd8:	11 24       	eor	r1, r1
     bda:	90 87       	std	Z+8, r25	; 0x08
     bdc:	87 83       	std	Z+7, r24	; 0x07
     bde:	08 95       	ret

00000be0 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	8c 01       	movw	r16, r24
     bf6:	eb 01       	movw	r28, r22
	
	RM_LOGLN(F("Reading sensors..."));
     bf8:	64 e2       	ldi	r22, 0x24	; 36
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	86 ed       	ldi	r24, 0xD6	; 214
     bfe:	95 e0       	ldi	r25, 0x05	; 5
     c00:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (_isMock) {
     c04:	f8 01       	movw	r30, r16
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	21 f0       	breq	.+8      	; 0xc14 <_ZN13SensorManager8readDataEP10SensorData+0x34>
		getMockData(ret);
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z11getMockDataP10SensorData>
     c12:	1b c0       	rjmp	.+54     	; 0xc4a <_ZN13SensorManager8readDataEP10SensorData+0x6a>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
     c14:	6e e0       	ldi	r22, 0x0E	; 14
     c16:	c8 01       	movw	r24, r16
     c18:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN13SensorManager16takeSampleAnalogEh>
     c1c:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
     c1e:	6f e0       	ldi	r22, 0x0F	; 15
     c20:	c8 01       	movw	r24, r16
     c22:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN13SensorManager16takeSampleAnalogEh>
     c26:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
     c28:	61 e1       	ldi	r22, 0x11	; 17
     c2a:	c8 01       	movw	r24, r16
     c2c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN13SensorManager16takeSampleAnalogEh>
     c30:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
     c32:	60 e1       	ldi	r22, 0x10	; 16
     c34:	c8 01       	movw	r24, r16
     c36:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
     c3a:	ba 82       	std	Y+2, r11	; 0x02
     c3c:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
     c3e:	de 82       	std	Y+6, r13	; 0x06
     c40:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
     c42:	fc 82       	std	Y+4, r15	; 0x04
     c44:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
     c46:	98 87       	std	Y+8, r25	; 0x08
     c48:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
     c4a:	ce 01       	movw	r24, r28
	
	//return ret;
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
     c60:	0c 94 85 02 	jmp	0x50a	; 0x50a <_ZN7Helpers15printSensorDataEP10SensorData>

00000c64 <_ZN13Adafruit_FONA9availableEv>:
    DEBUG_PRINT(reply[i], HEX); DEBUG_PRINT(" ");
  }
  DEBUG_PRINTLN();
  */
  return (strcmp(replybuffer, reply) == 0);
}
     c64:	88 5e       	subi	r24, 0xE8	; 232
     c66:	9e 4f       	sbci	r25, 0xFE	; 254
     c68:	dc 01       	movw	r26, r24
     c6a:	8d 91       	ld	r24, X+
     c6c:	9c 91       	ld	r25, X
     c6e:	dc 01       	movw	r26, r24
     c70:	ed 91       	ld	r30, X+
     c72:	fc 91       	ld	r31, X
     c74:	04 80       	ldd	r0, Z+4	; 0x04
     c76:	f5 81       	ldd	r31, Z+5	; 0x05
     c78:	e0 2d       	mov	r30, r0
     c7a:	09 94       	ijmp

00000c7c <_ZN13Adafruit_FONA5writeEh>:
     c7c:	88 5e       	subi	r24, 0xE8	; 232
     c7e:	9e 4f       	sbci	r25, 0xFE	; 254
     c80:	dc 01       	movw	r26, r24
     c82:	8d 91       	ld	r24, X+
     c84:	9c 91       	ld	r25, X
     c86:	dc 01       	movw	r26, r24
     c88:	ed 91       	ld	r30, X+
     c8a:	fc 91       	ld	r31, X
     c8c:	01 90       	ld	r0, Z+
     c8e:	f0 81       	ld	r31, Z
     c90:	e0 2d       	mov	r30, r0
     c92:	09 94       	ijmp

00000c94 <_ZN13Adafruit_FONA4readEv>:
     c94:	88 5e       	subi	r24, 0xE8	; 232
     c96:	9e 4f       	sbci	r25, 0xFE	; 254
     c98:	dc 01       	movw	r26, r24
     c9a:	8d 91       	ld	r24, X+
     c9c:	9c 91       	ld	r25, X
     c9e:	dc 01       	movw	r26, r24
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	06 80       	ldd	r0, Z+6	; 0x06
     ca6:	f7 81       	ldd	r31, Z+7	; 0x07
     ca8:	e0 2d       	mov	r30, r0
     caa:	09 94       	ijmp

00000cac <_ZN13Adafruit_FONA4peekEv>:
     cac:	88 5e       	subi	r24, 0xE8	; 232
     cae:	9e 4f       	sbci	r25, 0xFE	; 254
     cb0:	dc 01       	movw	r26, r24
     cb2:	8d 91       	ld	r24, X+
     cb4:	9c 91       	ld	r25, X
     cb6:	dc 01       	movw	r26, r24
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	00 84       	ldd	r0, Z+8	; 0x08
     cbe:	f1 85       	ldd	r31, Z+9	; 0x09
     cc0:	e0 2d       	mov	r30, r0
     cc2:	09 94       	ijmp

00000cc4 <_ZN13Adafruit_FONA5flushEv>:
     cc4:	88 5e       	subi	r24, 0xE8	; 232
     cc6:	9e 4f       	sbci	r25, 0xFE	; 254
     cc8:	dc 01       	movw	r26, r24
     cca:	8d 91       	ld	r24, X+
     ccc:	9c 91       	ld	r25, X
     cce:	dc 01       	movw	r26, r24
     cd0:	ed 91       	ld	r30, X+
     cd2:	fc 91       	ld	r31, X
     cd4:	02 84       	ldd	r0, Z+10	; 0x0a
     cd6:	f3 85       	ldd	r31, Z+11	; 0x0b
     cd8:	e0 2d       	mov	r30, r0
     cda:	09 94       	ijmp

00000cdc <_ZN13Adafruit_FONAC1Ea>:
     cdc:	fc 01       	movw	r30, r24
     cde:	13 82       	std	Z+3, r1	; 0x03
     ce0:	12 82       	std	Z+2, r1	; 0x02
     ce2:	88 ee       	ldi	r24, 0xE8	; 232
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	84 83       	std	Z+4, r24	; 0x04
     cec:	95 83       	std	Z+5, r25	; 0x05
     cee:	a6 83       	std	Z+6, r26	; 0x06
     cf0:	b7 83       	std	Z+7, r27	; 0x07
     cf2:	8a e6       	ldi	r24, 0x6A	; 106
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
     cfa:	64 87       	std	Z+12, r22	; 0x0c
     cfc:	df 01       	movw	r26, r30
     cfe:	a3 5f       	subi	r26, 0xF3	; 243
     d00:	be 4f       	sbci	r27, 0xFE	; 254
     d02:	8e ea       	ldi	r24, 0xAE	; 174
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	9c 93       	st	X, r25
     d0a:	8e 93       	st	-X, r24
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	1c 92       	st	X, r1
     d12:	1e 92       	st	-X, r1
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	1c 92       	st	X, r1
     d1a:	1e 92       	st	-X, r1
     d1c:	17 96       	adiw	r26, 0x07	; 7
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	1c 92       	st	X, r1
     d22:	1e 92       	st	-X, r1
     d24:	15 97       	sbiw	r26, 0x05	; 5
     d26:	1c 92       	st	X, r1
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	89 ea       	ldi	r24, 0xA9	; 169
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	8d 93       	st	X+, r24
     d30:	9c 93       	st	X, r25
     d32:	ea 5e       	subi	r30, 0xEA	; 234
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	86 ea       	ldi	r24, 0xA6	; 166
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
     d3e:	08 95       	ret

00000d40 <_ZN13Adafruit_FONA10flushInputEv>:
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	ec 01       	movw	r28, r24
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	8c 01       	movw	r16, r24
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	88 97       	sbiw	r24, 0x28	; 40
     d56:	d8 f4       	brcc	.+54     	; 0xd8e <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     d58:	e8 81       	ld	r30, Y
     d5a:	f9 81       	ldd	r31, Y+1	; 0x01
     d5c:	04 80       	ldd	r0, Z+4	; 0x04
     d5e:	f5 81       	ldd	r31, Z+5	; 0x05
     d60:	e0 2d       	mov	r30, r0
     d62:	ce 01       	movw	r24, r28
     d64:	09 95       	icall
     d66:	89 2b       	or	r24, r25
     d68:	51 f0       	breq	.+20     	; 0xd7e <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     d6a:	e8 81       	ld	r30, Y
     d6c:	f9 81       	ldd	r31, Y+1	; 0x01
     d6e:	06 80       	ldd	r0, Z+6	; 0x06
     d70:	f7 81       	ldd	r31, Z+7	; 0x07
     d72:	e0 2d       	mov	r30, r0
     d74:	ce 01       	movw	r24, r28
     d76:	09 95       	icall
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     d7c:	ed cf       	rjmp	.-38     	; 0xd58 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
     d8a:	c8 01       	movw	r24, r16
     d8c:	e0 cf       	rjmp	.-64     	; 0xd4e <_ZN13Adafruit_FONA10flushInputEv+0xe>
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <_ZN13Adafruit_FONA8readlineEjb>:
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	7c 01       	movw	r14, r24
     dac:	b4 2e       	mov	r11, r20
     dae:	8b 01       	movw	r16, r22
     db0:	00 0f       	add	r16, r16
     db2:	11 1f       	adc	r17, r17
     db4:	00 0f       	add	r16, r16
     db6:	11 1f       	adc	r17, r17
     db8:	c0 e0       	ldi	r28, 0x00	; 0
     dba:	d0 e0       	ldi	r29, 0x00	; 0
     dbc:	67 01       	movw	r12, r14
     dbe:	88 ee       	ldi	r24, 0xE8	; 232
     dc0:	c8 1a       	sub	r12, r24
     dc2:	8e ef       	ldi	r24, 0xFE	; 254
     dc4:	d8 0a       	sbc	r13, r24
     dc6:	01 15       	cp	r16, r1
     dc8:	11 05       	cpc	r17, r1
     dca:	89 f1       	breq	.+98     	; 0xe2e <_ZN13Adafruit_FONA8readlineEjb+0x96>
     dcc:	ce 3f       	cpi	r28, 0xFE	; 254
     dce:	d1 05       	cpc	r29, r1
     dd0:	70 f5       	brcc	.+92     	; 0xe2e <_ZN13Adafruit_FONA8readlineEjb+0x96>
     dd2:	d6 01       	movw	r26, r12
     dd4:	8d 91       	ld	r24, X+
     dd6:	9c 91       	ld	r25, X
     dd8:	dc 01       	movw	r26, r24
     dda:	ed 91       	ld	r30, X+
     ddc:	fc 91       	ld	r31, X
     dde:	04 80       	ldd	r0, Z+4	; 0x04
     de0:	f5 81       	ldd	r31, Z+5	; 0x05
     de2:	e0 2d       	mov	r30, r0
     de4:	09 95       	icall
     de6:	89 2b       	or	r24, r25
     de8:	c1 f0       	breq	.+48     	; 0xe1a <_ZN13Adafruit_FONA8readlineEjb+0x82>
     dea:	f6 01       	movw	r30, r12
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	dc 01       	movw	r26, r24
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	06 80       	ldd	r0, Z+6	; 0x06
     df8:	f7 81       	ldd	r31, Z+7	; 0x07
     dfa:	e0 2d       	mov	r30, r0
     dfc:	09 95       	icall
     dfe:	8d 30       	cpi	r24, 0x0D	; 13
     e00:	41 f3       	breq	.-48     	; 0xdd2 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
     e02:	8a 30       	cpi	r24, 0x0A	; 10
     e04:	21 f4       	brne	.+8      	; 0xe0e <_ZN13Adafruit_FONA8readlineEjb+0x76>
     e06:	20 97       	sbiw	r28, 0x00	; 0
     e08:	21 f3       	breq	.-56     	; 0xdd2 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
     e0a:	bb 20       	and	r11, r11
     e0c:	81 f0       	breq	.+32     	; 0xe2e <_ZN13Adafruit_FONA8readlineEjb+0x96>
     e0e:	f7 01       	movw	r30, r14
     e10:	ec 0f       	add	r30, r28
     e12:	fd 1f       	adc	r31, r29
     e14:	86 87       	std	Z+14, r24	; 0x0e
     e16:	21 96       	adiw	r28, 0x01	; 1
     e18:	dc cf       	rjmp	.-72     	; 0xdd2 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
     e1a:	01 50       	subi	r16, 0x01	; 1
     e1c:	11 09       	sbc	r17, r1
     e1e:	39 f0       	breq	.+14     	; 0xe2e <_ZN13Adafruit_FONA8readlineEjb+0x96>
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
     e2c:	cc cf       	rjmp	.-104    	; 0xdc6 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     e2e:	f7 01       	movw	r30, r14
     e30:	ec 0f       	add	r30, r28
     e32:	fd 1f       	adc	r31, r29
     e34:	16 86       	std	Z+14, r1	; 0x0e
     e36:	8c 2f       	mov	r24, r28
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	bf 90       	pop	r11
     e4a:	08 95       	ret

00000e4c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
     e5a:	7b 01       	movw	r14, r22
     e5c:	8a 01       	movw	r16, r20
     e5e:	0e 94 a0 06 	call	0xd40	; 0xd40 <_ZN13Adafruit_FONA10flushInputEv>
     e62:	fe 01       	movw	r30, r28
     e64:	e8 5e       	subi	r30, 0xE8	; 232
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	b7 01       	movw	r22, r14
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN5Print7printlnEPK19__FlashStringHelper>
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	b8 01       	movw	r22, r16
     e76:	ce 01       	movw	r24, r28
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <_ZN13Adafruit_FONA8readlineEjb>

00000e88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
     e92:	8a 01       	movw	r16, r20
	if (! getReply(send, timeout) )
     e94:	a9 01       	movw	r20, r18
     e96:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e9a:	88 23       	and	r24, r24
     e9c:	41 f0       	breq	.+16     	; 0xeae <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
}

boolean Adafruit_FONA::sendCheckReply(char* send, FONAFlashStringPtr reply, uint16_t timeout) {
  if (! getReply(send, timeout) )
	  return false;
  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
     e9e:	b8 01       	movw	r22, r16
     ea0:	ce 01       	movw	r24, r28
     ea2:	0e 96       	adiw	r24, 0x0e	; 14
     ea4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <strcmp_P>
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	89 2b       	or	r24, r25
     eac:	09 f0       	breq	.+2      	; 0xeb0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
  return (strcmp(replybuffer, reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
	if (! getReply(send, timeout) )
		return false;
     eae:	20 e0       	ldi	r18, 0x00	; 0

  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}
     eb0:	82 2f       	mov	r24, r18
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <_ZN13Adafruit_FONA5beginER6Stream>:

uint8_t Adafruit_FONA::type(void) {
  return _type;
}

boolean Adafruit_FONA::begin(Stream &port) {
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24

  mySerial = &port;
     ece:	7c 01       	movw	r14, r24
     ed0:	88 ee       	ldi	r24, 0xE8	; 232
     ed2:	e8 1a       	sub	r14, r24
     ed4:	8e ef       	ldi	r24, 0xFE	; 254
     ed6:	f8 0a       	sbc	r15, r24
     ed8:	d7 01       	movw	r26, r14
     eda:	6d 93       	st	X+, r22
     edc:	7c 93       	st	X, r23

  pinMode(_rstpin, OUTPUT);
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee2:	0e 94 46 10 	call	0x208c	; 0x208c <pinMode>
  digitalWrite(_rstpin, HIGH);
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eea:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
  delay(10);
     eee:	6a e0       	ldi	r22, 0x0A	; 10
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
  digitalWrite(_rstpin, LOW);
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	8c 85       	ldd	r24, Y+12	; 0x0c
     efe:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
  delay(100);
     f02:	64 e6       	ldi	r22, 0x64	; 100
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
  digitalWrite(_rstpin, HIGH);
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	8c 85       	ldd	r24, Y+12	; 0x0c
     f12:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
     f16:	8e e0       	ldi	r24, 0x0E	; 14
     f18:	c8 2e       	mov	r12, r24
     f1a:	d1 2c       	mov	r13, r1
		mySerial->read();
	}
	
	//TODO: I believe this is to synchronise the baud rate - https://arduino.stackexchange.com/a/36042
	
    if (sendCheckReply(F("AT"), ok_reply))
     f1c:	8e 01       	movw	r16, r28
     f1e:	0a 5e       	subi	r16, 0xEA	; 234
     f20:	1e 4f       	sbci	r17, 0xFE	; 254
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
	  
    while (mySerial->available()) {
     f22:	f7 01       	movw	r30, r14
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	dc 01       	movw	r26, r24
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	04 80       	ldd	r0, Z+4	; 0x04
     f30:	f5 81       	ldd	r31, Z+5	; 0x05
     f32:	e0 2d       	mov	r30, r0
     f34:	09 95       	icall
     f36:	89 2b       	or	r24, r25
     f38:	59 f0       	breq	.+22     	; 0xf50 <_ZN13Adafruit_FONA5beginER6Stream+0x94>
		DEBUG_PRINTLN(F("Serial was available"));
		mySerial->read();
     f3a:	f7 01       	movw	r30, r14
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	dc 01       	movw	r26, r24
     f42:	ed 91       	ld	r30, X+
     f44:	fc 91       	ld	r31, X
     f46:	06 80       	ldd	r0, Z+6	; 0x06
     f48:	f7 81       	ldd	r31, Z+7	; 0x07
     f4a:	e0 2d       	mov	r30, r0
     f4c:	09 95       	icall
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
	  
    while (mySerial->available()) {
     f4e:	e9 cf       	rjmp	.-46     	; 0xf22 <_ZN13Adafruit_FONA5beginER6Stream+0x66>
		mySerial->read();
	}
	
	//TODO: I believe this is to synchronise the baud rate - https://arduino.stackexchange.com/a/36042
	
    if (sendCheckReply(F("AT"), ok_reply))
     f50:	f8 01       	movw	r30, r16
     f52:	40 81       	ld	r20, Z
     f54:	51 81       	ldd	r21, Z+1	; 0x01
     f56:	24 ef       	ldi	r18, 0xF4	; 244
     f58:	31 e0       	ldi	r19, 0x01	; 1
     f5a:	63 ea       	ldi	r22, 0xA3	; 163
     f5c:	71 e0       	ldi	r23, 0x01	; 1
     f5e:	ce 01       	movw	r24, r28
     f60:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f64:	81 11       	cpse	r24, r1
     f66:	5d c0       	rjmp	.+186    	; 0x1022 <_ZN13Adafruit_FONA5beginER6Stream+0x166>
      break;
    while (mySerial->available()) mySerial->read();
     f68:	d7 01       	movw	r26, r14
     f6a:	8d 91       	ld	r24, X+
     f6c:	9c 91       	ld	r25, X
     f6e:	dc 01       	movw	r26, r24
     f70:	ed 91       	ld	r30, X+
     f72:	fc 91       	ld	r31, X
     f74:	04 80       	ldd	r0, Z+4	; 0x04
     f76:	f5 81       	ldd	r31, Z+5	; 0x05
     f78:	e0 2d       	mov	r30, r0
     f7a:	09 95       	icall
     f7c:	89 2b       	or	r24, r25
     f7e:	59 f0       	breq	.+22     	; 0xf96 <_ZN13Adafruit_FONA5beginER6Stream+0xda>
     f80:	f7 01       	movw	r30, r14
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	dc 01       	movw	r26, r24
     f88:	ed 91       	ld	r30, X+
     f8a:	fc 91       	ld	r31, X
     f8c:	06 80       	ldd	r0, Z+6	; 0x06
     f8e:	f7 81       	ldd	r31, Z+7	; 0x07
     f90:	e0 2d       	mov	r30, r0
     f92:	09 95       	icall
     f94:	e9 cf       	rjmp	.-46     	; 0xf68 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    if (sendCheckReply(F("AT"), F("AT"))) 
     f96:	24 ef       	ldi	r18, 0xF4	; 244
     f98:	31 e0       	ldi	r19, 0x01	; 1
     f9a:	40 ea       	ldi	r20, 0xA0	; 160
     f9c:	51 e0       	ldi	r21, 0x01	; 1
     f9e:	6d e9       	ldi	r22, 0x9D	; 157
     fa0:	71 e0       	ldi	r23, 0x01	; 1
     fa2:	ce 01       	movw	r24, r28
     fa4:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fa8:	81 11       	cpse	r24, r1
     faa:	3b c0       	rjmp	.+118    	; 0x1022 <_ZN13Adafruit_FONA5beginER6Stream+0x166>
      break;
    delay(500);
     fac:	64 ef       	ldi	r22, 0xF4	; 244
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	cb 1a       	sub	r12, r27
     fbc:	d1 08       	sbc	r13, r1

  DEBUG_PRINTLN(F("Attempting to open comm with ATs"));
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <_ZN13Adafruit_FONA5beginER6Stream+0x106>
     fc0:	b0 cf       	rjmp	.-160    	; 0xf22 <_ZN13Adafruit_FONA5beginER6Stream+0x66>

  if (timeout <= 0) {
#ifdef ADAFRUIT_FONA_DEBUG
    DEBUG_PRINTLN(F("Timeout: No response to AT... last ditch attempt."));
#endif
    sendCheckReply(F("AT"), ok_reply);
     fc2:	d8 01       	movw	r26, r16
     fc4:	4d 91       	ld	r20, X+
     fc6:	5c 91       	ld	r21, X
     fc8:	24 ef       	ldi	r18, 0xF4	; 244
     fca:	31 e0       	ldi	r19, 0x01	; 1
     fcc:	6a e9       	ldi	r22, 0x9A	; 154
     fce:	71 e0       	ldi	r23, 0x01	; 1
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    delay(100);
     fd6:	64 e6       	ldi	r22, 0x64	; 100
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
    sendCheckReply(F("AT"), ok_reply);
     fe2:	f8 01       	movw	r30, r16
     fe4:	40 81       	ld	r20, Z
     fe6:	51 81       	ldd	r21, Z+1	; 0x01
     fe8:	24 ef       	ldi	r18, 0xF4	; 244
     fea:	31 e0       	ldi	r19, 0x01	; 1
     fec:	67 e9       	ldi	r22, 0x97	; 151
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	ce 01       	movw	r24, r28
     ff2:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    delay(100);
     ff6:	64 e6       	ldi	r22, 0x64	; 100
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
    sendCheckReply(F("AT"), ok_reply);
    1002:	d8 01       	movw	r26, r16
    1004:	4d 91       	ld	r20, X+
    1006:	5c 91       	ld	r21, X
    1008:	24 ef       	ldi	r18, 0xF4	; 244
    100a:	31 e0       	ldi	r19, 0x01	; 1
    100c:	64 e9       	ldi	r22, 0x94	; 148
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	ce 01       	movw	r24, r28
    1012:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    delay(100);
    1016:	64 e6       	ldi	r22, 0x64	; 100
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
  }

  // turn off Echo!
  sendCheckReply(F("ATE0"), ok_reply);
    1022:	f8 01       	movw	r30, r16
    1024:	40 81       	ld	r20, Z
    1026:	51 81       	ldd	r21, Z+1	; 0x01
    1028:	24 ef       	ldi	r18, 0xF4	; 244
    102a:	31 e0       	ldi	r19, 0x01	; 1
    102c:	6f e8       	ldi	r22, 0x8F	; 143
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	ce 01       	movw	r24, r28
    1032:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
  delay(100);
    1036:	64 e6       	ldi	r22, 0x64	; 100
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>

  if (! sendCheckReply(F("ATE0"), ok_reply)) {
    1042:	d8 01       	movw	r26, r16
    1044:	4d 91       	ld	r20, X+
    1046:	5c 91       	ld	r21, X
    1048:	24 ef       	ldi	r18, 0xF4	; 244
    104a:	31 e0       	ldi	r19, 0x01	; 1
    104c:	6a e8       	ldi	r22, 0x8A	; 138
    104e:	71 e0       	ldi	r23, 0x01	; 1
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1056:	d8 2e       	mov	r13, r24
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <_ZN13Adafruit_FONA5beginER6Stream+0x1a2>
    105c:	69 c0       	rjmp	.+210    	; 0x1130 <_ZN13Adafruit_FONA5beginER6Stream+0x274>
    return false;
  }

  // turn on hangupitude
  sendCheckReply(F("AT+CVHU=0"), ok_reply);
    105e:	f8 01       	movw	r30, r16
    1060:	40 81       	ld	r20, Z
    1062:	51 81       	ldd	r21, Z+1	; 0x01
    1064:	24 ef       	ldi	r18, 0xF4	; 244
    1066:	31 e0       	ldi	r19, 0x01	; 1
    1068:	60 e8       	ldi	r22, 0x80	; 128
    106a:	71 e0       	ldi	r23, 0x01	; 1
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

  delay(100);
    1072:	64 e6       	ldi	r22, 0x64	; 100
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <delay>
  flushInput();
    107e:	ce 01       	movw	r24, r28
    1080:	0e 94 a0 06 	call	0xd40	; 0xd40 <_ZN13Adafruit_FONA10flushInputEv>


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN("ATI");

  mySerial->println("ATI");
    1084:	64 e2       	ldi	r22, 0x24	; 36
    1086:	71 e0       	ldi	r23, 0x01	; 1
    1088:	d7 01       	movw	r26, r14
    108a:	8d 91       	ld	r24, X+
    108c:	9c 91       	ld	r25, X
    108e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZN5Print7printlnEPKc>
  readline(500, true);
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	64 ef       	ldi	r22, 0xF4	; 244
    1096:	71 e0       	ldi	r23, 0x01	; 1
    1098:	ce 01       	movw	r24, r28
    109a:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN13Adafruit_FONA8readlineEjb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);



  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
    109e:	8e 01       	movw	r16, r28
    10a0:	02 5f       	subi	r16, 0xF2	; 242
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	65 e7       	ldi	r22, 0x75	; 117
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	c8 01       	movw	r24, r16
    10aa:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strstr_P>
    10ae:	89 2b       	or	r24, r25
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <_ZN13Adafruit_FONA5beginER6Stream+0x1fa>
    _type = FONA808_V2;
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	23 c0       	rjmp	.+70     	; 0x10fc <_ZN13Adafruit_FONA5beginER6Stream+0x240>
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R13")) != 0) {
    10b6:	6a e6       	ldi	r22, 0x6A	; 106
    10b8:	71 e0       	ldi	r23, 0x01	; 1
    10ba:	c8 01       	movw	r24, r16
    10bc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strstr_P>
    10c0:	89 2b       	or	r24, r25
    10c2:	11 f0       	breq	.+4      	; 0x10c8 <_ZN13Adafruit_FONA5beginER6Stream+0x20c>
    _type = FONA808_V1;
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	1a c0       	rjmp	.+52     	; 0x10fc <_ZN13Adafruit_FONA5beginER6Stream+0x240>
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM800 R13")) != 0) {
    10c8:	6f e5       	ldi	r22, 0x5F	; 95
    10ca:	71 e0       	ldi	r23, 0x01	; 1
    10cc:	c8 01       	movw	r24, r16
    10ce:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strstr_P>
    10d2:	89 2b       	or	r24, r25
    10d4:	11 f0       	breq	.+4      	; 0x10da <_ZN13Adafruit_FONA5beginER6Stream+0x21e>
    _type = FONA800L;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <_ZN13Adafruit_FONA5beginER6Stream+0x240>
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIMCOM_SIM5320A")) != 0) {
    10da:	6f e4       	ldi	r22, 0x4F	; 79
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strstr_P>
    10e4:	89 2b       	or	r24, r25
    10e6:	11 f0       	breq	.+4      	; 0x10ec <_ZN13Adafruit_FONA5beginER6Stream+0x230>
    _type = FONA3G_A;
    10e8:	84 e0       	ldi	r24, 0x04	; 4
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <_ZN13Adafruit_FONA5beginER6Stream+0x240>
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIMCOM_SIM5320E")) != 0) {
    10ec:	6f e3       	ldi	r22, 0x3F	; 63
    10ee:	71 e0       	ldi	r23, 0x01	; 1
    10f0:	c8 01       	movw	r24, r16
    10f2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strstr_P>
    10f6:	89 2b       	or	r24, r25
    10f8:	11 f0       	breq	.+4      	; 0x10fe <_ZN13Adafruit_FONA5beginER6Stream+0x242>
    _type = FONA3G_E;
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	8d 87       	std	Y+13, r24	; 0x0d
  }

  if (_type == FONA800L) {
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	b1 f4       	brne	.+44     	; 0x1130 <_ZN13Adafruit_FONA5beginER6Stream+0x274>
    // determine if L or H

  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN("AT+GMM");

    mySerial->println("AT+GMM");
    1104:	68 e2       	ldi	r22, 0x28	; 40
    1106:	71 e0       	ldi	r23, 0x01	; 1
    1108:	f7 01       	movw	r30, r14
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZN5Print7printlnEPKc>
    readline(500, true);
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	64 ef       	ldi	r22, 0xF4	; 244
    1116:	71 e0       	ldi	r23, 0x01	; 1
    1118:	ce 01       	movw	r24, r28
    111a:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN13Adafruit_FONA8readlineEjb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);


    if (prog_char_strstr(replybuffer, (prog_char *)F("SIM800H")) != 0) {
    111e:	67 e3       	ldi	r22, 0x37	; 55
    1120:	71 e0       	ldi	r23, 0x01	; 1
    1122:	c8 01       	movw	r24, r16
    1124:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strstr_P>
    1128:	89 2b       	or	r24, r25
    112a:	11 f0       	breq	.+4      	; 0x1130 <_ZN13Adafruit_FONA5beginER6Stream+0x274>
      _type = FONA800H;
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	8d 87       	std	Y+13, r24	; 0x0d
#if defined(FONA_PREF_SMS_STORAGE)
  sendCheckReply(F("AT+CPMS=\"" FONA_PREF_SMS_STORAGE "\""), ok_reply);
#endif

  return true;
}
    1130:	8d 2d       	mov	r24, r13
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	08 95       	ret

00001144 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1144:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <twi_state>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <twi_sendStop>
    114e:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_inRepStart>
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	82 e1       	ldi	r24, 0x12	; 18
    1156:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	83 e1       	ldi	r24, 0x13	; 19
    115e:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
    1162:	e9 eb       	ldi	r30, 0xB9	; 185
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8e 7f       	andi	r24, 0xFE	; 254
    116a:	80 83       	st	Z, r24
    116c:	80 81       	ld	r24, Z
    116e:	8d 7f       	andi	r24, 0xFD	; 253
    1170:	80 83       	st	Z, r24
    1172:	88 e4       	ldi	r24, 0x48	; 72
    1174:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1178:	85 e4       	ldi	r24, 0x45	; 69
    117a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    117e:	08 95       	ret

00001180 <twi_readFrom>:
    1180:	41 32       	cpi	r20, 0x21	; 33
    1182:	08 f0       	brcs	.+2      	; 0x1186 <twi_readFrom+0x6>
    1184:	43 c0       	rjmp	.+134    	; 0x120c <twi_readFrom+0x8c>
    1186:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <twi_state>
    118a:	91 11       	cpse	r25, r1
    118c:	fc cf       	rjmp	.-8      	; 0x1186 <twi_readFrom+0x6>
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <twi_state>
    1194:	20 93 7d 05 	sts	0x057D, r18	; 0x80057d <twi_sendStop>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <twi_error>
    119e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_masterBufferIndex>
    11a2:	24 0f       	add	r18, r20
    11a4:	20 93 56 05 	sts	0x0556, r18	; 0x800556 <twi_masterBufferLength>
    11a8:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <twi_slarw>
    11ac:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <twi_slarw>
    11b0:	88 0f       	add	r24, r24
    11b2:	89 2b       	or	r24, r25
    11b4:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <twi_slarw>
    11b8:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <twi_inRepStart>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	61 f4       	brne	.+24     	; 0x11d8 <twi_readFrom+0x58>
    11c0:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_inRepStart>
    11c4:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_slarw>
    11c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    11cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    11d0:	83 fd       	sbrc	r24, 3
    11d2:	f8 cf       	rjmp	.-16     	; 0x11c4 <twi_readFrom+0x44>
    11d4:	85 ec       	ldi	r24, 0xC5	; 197
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <twi_readFrom+0x5a>
    11d8:	85 ee       	ldi	r24, 0xE5	; 229
    11da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    11de:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <twi_state>
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	e1 f3       	breq	.-8      	; 0x11de <twi_readFrom+0x5e>
    11e6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <twi_masterBufferIndex>
    11ea:	84 17       	cp	r24, r20
    11ec:	10 f4       	brcc	.+4      	; 0x11f2 <twi_readFrom+0x72>
    11ee:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <twi_masterBufferIndex>
    11f2:	a8 e5       	ldi	r26, 0x58	; 88
    11f4:	b5 e0       	ldi	r27, 0x05	; 5
    11f6:	96 2f       	mov	r25, r22
    11f8:	fb 01       	movw	r30, r22
    11fa:	8e 2f       	mov	r24, r30
    11fc:	89 1b       	sub	r24, r25
    11fe:	84 17       	cp	r24, r20
    1200:	18 f4       	brcc	.+6      	; 0x1208 <twi_readFrom+0x88>
    1202:	8d 91       	ld	r24, X+
    1204:	81 93       	st	Z+, r24
    1206:	f9 cf       	rjmp	.-14     	; 0x11fa <twi_readFrom+0x7a>
    1208:	84 2f       	mov	r24, r20
    120a:	08 95       	ret
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	08 95       	ret

00001210 <twi_writeTo>:
    1210:	0f 93       	push	r16
    1212:	41 32       	cpi	r20, 0x21	; 33
    1214:	08 f0       	brcs	.+2      	; 0x1218 <twi_writeTo+0x8>
    1216:	4a c0       	rjmp	.+148    	; 0x12ac <twi_writeTo+0x9c>
    1218:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <twi_state>
    121c:	91 11       	cpse	r25, r1
    121e:	fc cf       	rjmp	.-8      	; 0x1218 <twi_writeTo+0x8>
    1220:	32 e0       	ldi	r19, 0x02	; 2
    1222:	30 93 7f 05 	sts	0x057F, r19	; 0x80057f <twi_state>
    1226:	00 93 7d 05 	sts	0x057D, r16	; 0x80057d <twi_sendStop>
    122a:	3f ef       	ldi	r19, 0xFF	; 255
    122c:	30 93 12 05 	sts	0x0512, r19	; 0x800512 <twi_error>
    1230:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_masterBufferIndex>
    1234:	40 93 56 05 	sts	0x0556, r20	; 0x800556 <twi_masterBufferLength>
    1238:	56 2f       	mov	r21, r22
    123a:	a8 e5       	ldi	r26, 0x58	; 88
    123c:	b5 e0       	ldi	r27, 0x05	; 5
    123e:	fb 01       	movw	r30, r22
    1240:	3e 2f       	mov	r19, r30
    1242:	35 1b       	sub	r19, r21
    1244:	34 17       	cp	r19, r20
    1246:	18 f4       	brcc	.+6      	; 0x124e <twi_writeTo+0x3e>
    1248:	31 91       	ld	r19, Z+
    124a:	3d 93       	st	X+, r19
    124c:	f9 cf       	rjmp	.-14     	; 0x1240 <twi_writeTo+0x30>
    124e:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <twi_slarw>
    1252:	30 91 7e 05 	lds	r19, 0x057E	; 0x80057e <twi_slarw>
    1256:	88 0f       	add	r24, r24
    1258:	83 2b       	or	r24, r19
    125a:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <twi_slarw>
    125e:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <twi_inRepStart>
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	61 f4       	brne	.+24     	; 0x127e <twi_writeTo+0x6e>
    1266:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_inRepStart>
    126a:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_slarw>
    126e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1272:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1276:	83 fd       	sbrc	r24, 3
    1278:	f8 cf       	rjmp	.-16     	; 0x126a <twi_writeTo+0x5a>
    127a:	85 ec       	ldi	r24, 0xC5	; 197
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <twi_writeTo+0x70>
    127e:	85 ee       	ldi	r24, 0xE5	; 229
    1280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1284:	22 23       	and	r18, r18
    1286:	21 f0       	breq	.+8      	; 0x1290 <twi_writeTo+0x80>
    1288:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <twi_state>
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	d1 f3       	breq	.-12     	; 0x1284 <twi_writeTo+0x74>
    1290:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_error>
    1294:	8f 3f       	cpi	r24, 0xFF	; 255
    1296:	79 f0       	breq	.+30     	; 0x12b6 <twi_writeTo+0xa6>
    1298:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_error>
    129c:	80 32       	cpi	r24, 0x20	; 32
    129e:	41 f0       	breq	.+16     	; 0x12b0 <twi_writeTo+0xa0>
    12a0:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_error>
    12a4:	80 33       	cpi	r24, 0x30	; 48
    12a6:	31 f0       	breq	.+12     	; 0x12b4 <twi_writeTo+0xa4>
    12a8:	94 e0       	ldi	r25, 0x04	; 4
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <twi_writeTo+0xa6>
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <twi_writeTo+0xa6>
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <twi_writeTo+0xa6>
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	89 2f       	mov	r24, r25
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <twi_transmit>:
    12bc:	40 91 34 05 	lds	r20, 0x0534	; 0x800534 <twi_txBufferLength>
    12c0:	26 2f       	mov	r18, r22
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	24 0f       	add	r18, r20
    12c6:	31 1d       	adc	r19, r1
    12c8:	21 32       	cpi	r18, 0x21	; 33
    12ca:	31 05       	cpc	r19, r1
    12cc:	dc f4       	brge	.+54     	; 0x1304 <twi_transmit+0x48>
    12ce:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <twi_state>
    12d2:	24 30       	cpi	r18, 0x04	; 4
    12d4:	c9 f4       	brne	.+50     	; 0x1308 <twi_transmit+0x4c>
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	86 17       	cp	r24, r22
    12de:	58 f4       	brcc	.+22     	; 0x12f6 <twi_transmit+0x3a>
    12e0:	30 91 34 05 	lds	r19, 0x0534	; 0x800534 <twi_txBufferLength>
    12e4:	21 91       	ld	r18, Z+
    12e6:	dc 01       	movw	r26, r24
    12e8:	aa 5c       	subi	r26, 0xCA	; 202
    12ea:	ba 4f       	sbci	r27, 0xFA	; 250
    12ec:	a3 0f       	add	r26, r19
    12ee:	b1 1d       	adc	r27, r1
    12f0:	2c 93       	st	X, r18
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	f3 cf       	rjmp	.-26     	; 0x12dc <twi_transmit+0x20>
    12f6:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_txBufferLength>
    12fa:	68 0f       	add	r22, r24
    12fc:	60 93 34 05 	sts	0x0534, r22	; 0x800534 <twi_txBufferLength>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	08 95       	ret
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	08 95       	ret

0000130c <twi_attachSlaveRxEvent>:
    130c:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <twi_onSlaveReceive+0x1>
    1310:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_onSlaveReceive>
    1314:	08 95       	ret

00001316 <twi_attachSlaveTxEvent>:
    1316:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <twi_onSlaveTransmit+0x1>
    131a:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_onSlaveTransmit>
    131e:	08 95       	ret

00001320 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1320:	85 ed       	ldi	r24, 0xD5	; 213
    1322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1326:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    132a:	84 fd       	sbrc	r24, 4
    132c:	fc cf       	rjmp	.-8      	; 0x1326 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    132e:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <twi_state>
    1332:	08 95       	ret

00001334 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1334:	85 ec       	ldi	r24, 0xC5	; 197
    1336:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    133a:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <twi_state>
    133e:	08 95       	ret

00001340 <__vector_24>:
}

ISR(TWI_vect)
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
  switch(TW_STATUS){
    1362:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1366:	88 7f       	andi	r24, 0xF8	; 248
    1368:	80 36       	cpi	r24, 0x60	; 96
    136a:	09 f4       	brne	.+2      	; 0x136e <__vector_24+0x2e>
    136c:	9e c0       	rjmp	.+316    	; 0x14aa <__vector_24+0x16a>
    136e:	78 f5       	brcc	.+94     	; 0x13ce <__vector_24+0x8e>
    1370:	88 32       	cpi	r24, 0x28	; 40
    1372:	09 f4       	brne	.+2      	; 0x1376 <__vector_24+0x36>
    1374:	5d c0       	rjmp	.+186    	; 0x1430 <__vector_24+0xf0>
    1376:	90 f4       	brcc	.+36     	; 0x139c <__vector_24+0x5c>
    1378:	80 31       	cpi	r24, 0x10	; 16
    137a:	09 f4       	brne	.+2      	; 0x137e <__vector_24+0x3e>
    137c:	56 c0       	rjmp	.+172    	; 0x142a <__vector_24+0xea>
    137e:	38 f4       	brcc	.+14     	; 0x138e <__vector_24+0x4e>
    1380:	88 23       	and	r24, r24
    1382:	09 f4       	brne	.+2      	; 0x1386 <__vector_24+0x46>
    1384:	f5 c0       	rjmp	.+490    	; 0x1570 <__vector_24+0x230>
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	09 f4       	brne	.+2      	; 0x138c <__vector_24+0x4c>
    138a:	4f c0       	rjmp	.+158    	; 0x142a <__vector_24+0xea>
    138c:	f5 c0       	rjmp	.+490    	; 0x1578 <__vector_24+0x238>
    138e:	88 31       	cpi	r24, 0x18	; 24
    1390:	09 f4       	brne	.+2      	; 0x1394 <__vector_24+0x54>
    1392:	4e c0       	rjmp	.+156    	; 0x1430 <__vector_24+0xf0>
    1394:	80 32       	cpi	r24, 0x20	; 32
    1396:	09 f4       	brne	.+2      	; 0x139a <__vector_24+0x5a>
    1398:	5f c0       	rjmp	.+190    	; 0x1458 <__vector_24+0x118>
    139a:	ee c0       	rjmp	.+476    	; 0x1578 <__vector_24+0x238>
    139c:	80 34       	cpi	r24, 0x40	; 64
    139e:	09 f4       	brne	.+2      	; 0x13a2 <__vector_24+0x62>
    13a0:	6a c0       	rjmp	.+212    	; 0x1476 <__vector_24+0x136>
    13a2:	58 f4       	brcc	.+22     	; 0x13ba <__vector_24+0x7a>
    13a4:	80 33       	cpi	r24, 0x30	; 48
    13a6:	09 f4       	brne	.+2      	; 0x13aa <__vector_24+0x6a>
    13a8:	57 c0       	rjmp	.+174    	; 0x1458 <__vector_24+0x118>
    13aa:	88 33       	cpi	r24, 0x38	; 56
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <__vector_24+0x70>
    13ae:	e4 c0       	rjmp	.+456    	; 0x1578 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    13b0:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <twi_error>
      twi_releaseBus();
    13b4:	0e 94 9a 09 	call	0x1334	; 0x1334 <twi_releaseBus>
      break;
    13b8:	df c0       	rjmp	.+446    	; 0x1578 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    13ba:	80 35       	cpi	r24, 0x50	; 80
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <__vector_24+0x80>
    13be:	4f c0       	rjmp	.+158    	; 0x145e <__vector_24+0x11e>
    13c0:	88 35       	cpi	r24, 0x58	; 88
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <__vector_24+0x86>
    13c4:	5d c0       	rjmp	.+186    	; 0x1480 <__vector_24+0x140>
    13c6:	88 34       	cpi	r24, 0x48	; 72
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_24+0x8c>
    13ca:	d6 c0       	rjmp	.+428    	; 0x1578 <__vector_24+0x238>
    13cc:	d3 c0       	rjmp	.+422    	; 0x1574 <__vector_24+0x234>
    13ce:	88 39       	cpi	r24, 0x98	; 152
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <__vector_24+0x94>
    13d2:	c4 c0       	rjmp	.+392    	; 0x155c <__vector_24+0x21c>
    13d4:	a8 f4       	brcc	.+42     	; 0x1400 <__vector_24+0xc0>
    13d6:	88 37       	cpi	r24, 0x78	; 120
    13d8:	09 f4       	brne	.+2      	; 0x13dc <__vector_24+0x9c>
    13da:	67 c0       	rjmp	.+206    	; 0x14aa <__vector_24+0x16a>
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <__vector_24+0xac>
    13de:	88 36       	cpi	r24, 0x68	; 104
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <__vector_24+0xa4>
    13e2:	63 c0       	rjmp	.+198    	; 0x14aa <__vector_24+0x16a>
    13e4:	80 37       	cpi	r24, 0x70	; 112
    13e6:	09 f4       	brne	.+2      	; 0x13ea <__vector_24+0xaa>
    13e8:	60 c0       	rjmp	.+192    	; 0x14aa <__vector_24+0x16a>
    13ea:	c6 c0       	rjmp	.+396    	; 0x1578 <__vector_24+0x238>
    13ec:	88 38       	cpi	r24, 0x88	; 136
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <__vector_24+0xb2>
    13f0:	b5 c0       	rjmp	.+362    	; 0x155c <__vector_24+0x21c>
    13f2:	80 39       	cpi	r24, 0x90	; 144
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <__vector_24+0xb8>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <__vector_24+0x176>
    13f8:	80 38       	cpi	r24, 0x80	; 128
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__vector_24+0xbe>
    13fc:	bd c0       	rjmp	.+378    	; 0x1578 <__vector_24+0x238>
    13fe:	5b c0       	rjmp	.+182    	; 0x14b6 <__vector_24+0x176>
    1400:	80 3b       	cpi	r24, 0xB0	; 176
    1402:	09 f4       	brne	.+2      	; 0x1406 <__vector_24+0xc6>
    1404:	83 c0       	rjmp	.+262    	; 0x150c <__vector_24+0x1cc>
    1406:	38 f4       	brcc	.+14     	; 0x1416 <__vector_24+0xd6>
    1408:	80 3a       	cpi	r24, 0xA0	; 160
    140a:	09 f4       	brne	.+2      	; 0x140e <__vector_24+0xce>
    140c:	66 c0       	rjmp	.+204    	; 0x14da <__vector_24+0x19a>
    140e:	88 3a       	cpi	r24, 0xA8	; 168
    1410:	09 f4       	brne	.+2      	; 0x1414 <__vector_24+0xd4>
    1412:	7c c0       	rjmp	.+248    	; 0x150c <__vector_24+0x1cc>
    1414:	b1 c0       	rjmp	.+354    	; 0x1578 <__vector_24+0x238>
    1416:	80 3c       	cpi	r24, 0xC0	; 192
    1418:	09 f4       	brne	.+2      	; 0x141c <__vector_24+0xdc>
    141a:	a4 c0       	rjmp	.+328    	; 0x1564 <__vector_24+0x224>
    141c:	88 3c       	cpi	r24, 0xC8	; 200
    141e:	09 f4       	brne	.+2      	; 0x1422 <__vector_24+0xe2>
    1420:	a1 c0       	rjmp	.+322    	; 0x1564 <__vector_24+0x224>
    1422:	88 3b       	cpi	r24, 0xB8	; 184
    1424:	09 f4       	brne	.+2      	; 0x1428 <__vector_24+0xe8>
    1426:	87 c0       	rjmp	.+270    	; 0x1536 <__vector_24+0x1f6>
    1428:	a7 c0       	rjmp	.+334    	; 0x1578 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    142a:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_slarw>
    142e:	10 c0       	rjmp	.+32     	; 0x1450 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1430:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <twi_masterBufferIndex>
    1434:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <twi_masterBufferLength>
    1438:	98 17       	cp	r25, r24
    143a:	70 f5       	brcc	.+92     	; 0x1498 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    143c:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <twi_masterBufferIndex>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	8e 0f       	add	r24, r30
    1444:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <twi_masterBufferIndex>
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e8 5a       	subi	r30, 0xA8	; 168
    144c:	fa 4f       	sbci	r31, 0xFA	; 250
    144e:	80 81       	ld	r24, Z
    1450:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1454:	85 ec       	ldi	r24, 0xC5	; 197
    1456:	83 c0       	rjmp	.+262    	; 0x155e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1458:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <twi_error>
    145c:	8b c0       	rjmp	.+278    	; 0x1574 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    145e:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <twi_masterBufferIndex>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	8e 0f       	add	r24, r30
    1466:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <twi_masterBufferIndex>
    146a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	e8 5a       	subi	r30, 0xA8	; 168
    1472:	fa 4f       	sbci	r31, 0xFA	; 250
    1474:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1476:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <twi_masterBufferIndex>
    147a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <twi_masterBufferLength>
    147e:	6b c0       	rjmp	.+214    	; 0x1556 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1480:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <twi_masterBufferIndex>
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	8e 0f       	add	r24, r30
    1488:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <twi_masterBufferIndex>
    148c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	e8 5a       	subi	r30, 0xA8	; 168
    1494:	fa 4f       	sbci	r31, 0xFA	; 250
    1496:	80 83       	st	Z, r24
	if (twi_sendStop)
    1498:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <twi_sendStop>
    149c:	81 11       	cpse	r24, r1
    149e:	6a c0       	rjmp	.+212    	; 0x1574 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    14a6:	84 ea       	ldi	r24, 0xA4	; 164
    14a8:	5e c0       	rjmp	.+188    	; 0x1566 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    14b0:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <twi_rxBufferIndex>
    14b4:	cf cf       	rjmp	.-98     	; 0x1454 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    14b6:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_rxBufferIndex>
    14ba:	80 32       	cpi	r24, 0x20	; 32
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <__vector_24+0x180>
    14be:	4e c0       	rjmp	.+156    	; 0x155c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    14c0:	e0 91 13 05 	lds	r30, 0x0513	; 0x800513 <twi_rxBufferIndex>
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	8e 0f       	add	r24, r30
    14c8:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <twi_rxBufferIndex>
    14cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	ec 5e       	subi	r30, 0xEC	; 236
    14d4:	fa 4f       	sbci	r31, 0xFA	; 250
    14d6:	80 83       	st	Z, r24
    14d8:	bd cf       	rjmp	.-134    	; 0x1454 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    14da:	0e 94 9a 09 	call	0x1334	; 0x1334 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    14de:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_rxBufferIndex>
    14e2:	80 32       	cpi	r24, 0x20	; 32
    14e4:	30 f4       	brcc	.+12     	; 0x14f2 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    14e6:	e0 91 13 05 	lds	r30, 0x0513	; 0x800513 <twi_rxBufferIndex>
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	ec 5e       	subi	r30, 0xEC	; 236
    14ee:	fa 4f       	sbci	r31, 0xFA	; 250
    14f0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    14f2:	60 91 13 05 	lds	r22, 0x0513	; 0x800513 <twi_rxBufferIndex>
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_onSlaveReceive>
    14fc:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <twi_onSlaveReceive+0x1>
    1500:	84 e1       	ldi	r24, 0x14	; 20
    1502:	95 e0       	ldi	r25, 0x05	; 5
    1504:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1506:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <twi_rxBufferIndex>
      break;
    150a:	36 c0       	rjmp	.+108    	; 0x1578 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1512:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1516:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    151a:	e0 91 7a 05 	lds	r30, 0x057A	; 0x80057a <twi_onSlaveTransmit>
    151e:	f0 91 7b 05 	lds	r31, 0x057B	; 0x80057b <twi_onSlaveTransmit+0x1>
    1522:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1524:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_txBufferLength>
    1528:	81 11       	cpse	r24, r1
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1532:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1536:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <twi_txBufferIndex>
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	8e 0f       	add	r24, r30
    153e:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <twi_txBufferIndex>
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	ea 5c       	subi	r30, 0xCA	; 202
    1546:	fa 4f       	sbci	r31, 0xFA	; 250
    1548:	80 81       	ld	r24, Z
    154a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    154e:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <twi_txBufferIndex>
    1552:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_txBufferLength>
    1556:	98 17       	cp	r25, r24
    1558:	08 f4       	brcc	.+2      	; 0x155c <__vector_24+0x21c>
    155a:	7c cf       	rjmp	.-264    	; 0x1454 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    155c:	85 e8       	ldi	r24, 0x85	; 133
    155e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1562:	0a c0       	rjmp	.+20     	; 0x1578 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1564:	85 ec       	ldi	r24, 0xC5	; 197
    1566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    156a:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <twi_state>
      break;
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1570:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <twi_error>
      twi_stop();
    1574:	0e 94 90 09 	call	0x1320	; 0x1320 <twi_stop>
      break;
  }
}
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    159a:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	20 91 b5 05 	lds	r18, 0x05B5	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    15a4:	82 1b       	sub	r24, r18
    15a6:	91 09       	sbc	r25, r1
    15a8:	08 95       	ret

000015aa <_ZN7TwoWire4readEv>:
    15aa:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    15ae:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    15b2:	98 17       	cp	r25, r24
    15b4:	50 f4       	brcc	.+20     	; 0x15ca <_ZN7TwoWire4readEv+0x20>
    15b6:	e9 2f       	mov	r30, r25
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	ea 54       	subi	r30, 0x4A	; 74
    15bc:	fa 4f       	sbci	r31, 0xFA	; 250
    15be:	20 81       	ld	r18, Z
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	9f 5f       	subi	r25, 0xFF	; 255
    15c4:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <_ZN7TwoWire4readEv+0x24>
    15ca:	2f ef       	ldi	r18, 0xFF	; 255
    15cc:	3f ef       	ldi	r19, 0xFF	; 255
    15ce:	c9 01       	movw	r24, r18
    15d0:	08 95       	ret

000015d2 <_ZN7TwoWire4peekEv>:
    15d2:	e0 91 b5 05 	lds	r30, 0x05B5	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    15d6:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    15da:	e8 17       	cp	r30, r24
    15dc:	30 f4       	brcc	.+12     	; 0x15ea <_ZN7TwoWire4peekEv+0x18>
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	ea 54       	subi	r30, 0x4A	; 74
    15e2:	fa 4f       	sbci	r31, 0xFA	; 250
    15e4:	80 81       	ld	r24, Z
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	08 95       	ret
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	9f ef       	ldi	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <_ZN7TwoWire5flushEv>:
    15f0:	08 95       	ret

000015f2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	ec 01       	movw	r28, r24
    15f8:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <_ZN7TwoWire14user_onReceiveE>
    15fc:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <_ZN7TwoWire14user_onReceiveE+0x1>
    1600:	30 97       	sbiw	r30, 0x00	; 0
    1602:	f1 f0       	breq	.+60     	; 0x1640 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1604:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    1608:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    160c:	98 17       	cp	r25, r24
    160e:	c0 f0       	brcs	.+48     	; 0x1640 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	29 2f       	mov	r18, r25
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	26 17       	cp	r18, r22
    1618:	37 07       	cpc	r19, r23
    161a:	54 f4       	brge	.+20     	; 0x1630 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    161c:	de 01       	movw	r26, r28
    161e:	a2 0f       	add	r26, r18
    1620:	b3 1f       	adc	r27, r19
    1622:	4c 91       	ld	r20, X
    1624:	d9 01       	movw	r26, r18
    1626:	aa 54       	subi	r26, 0x4A	; 74
    1628:	ba 4f       	sbci	r27, 0xFA	; 250
    162a:	4c 93       	st	X, r20
    162c:	9f 5f       	subi	r25, 0xFF	; 255
    162e:	f1 cf       	rjmp	.-30     	; 0x1612 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1630:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    1634:	60 93 b4 05 	sts	0x05B4, r22	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    1638:	cb 01       	movw	r24, r22
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	09 94       	ijmp
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <_ZN7TwoWire16onRequestServiceEv>:
    1646:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <_ZN7TwoWire14user_onRequestE>
    164a:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <_ZN7TwoWire14user_onRequestE+0x1>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	29 f0       	breq	.+10     	; 0x165c <_ZN7TwoWire16onRequestServiceEv+0x16>
    1652:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZN7TwoWire13txBufferIndexE>
    1656:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    165a:	09 94       	ijmp
    165c:	08 95       	ret

0000165e <_ZN7TwoWire5writeEPKhj>:
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	7c 01       	movw	r14, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8a 01       	movw	r16, r20
    1674:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <_ZN7TwoWire12transmittingE>
    1678:	22 23       	and	r18, r18
    167a:	89 f0       	breq	.+34     	; 0x169e <_ZN7TwoWire5writeEPKhj+0x40>
    167c:	eb 01       	movw	r28, r22
    167e:	6b 01       	movw	r12, r22
    1680:	c4 0e       	add	r12, r20
    1682:	d5 1e       	adc	r13, r21
    1684:	cc 15       	cp	r28, r12
    1686:	dd 05       	cpc	r29, r13
    1688:	69 f0       	breq	.+26     	; 0x16a4 <_ZN7TwoWire5writeEPKhj+0x46>
    168a:	69 91       	ld	r22, Y+
    168c:	d7 01       	movw	r26, r14
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	01 90       	ld	r0, Z+
    1694:	f0 81       	ld	r31, Z
    1696:	e0 2d       	mov	r30, r0
    1698:	c7 01       	movw	r24, r14
    169a:	09 95       	icall
    169c:	f3 cf       	rjmp	.-26     	; 0x1684 <_ZN7TwoWire5writeEPKhj+0x26>
    169e:	64 2f       	mov	r22, r20
    16a0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <twi_transmit>
    16a4:	c8 01       	movw	r24, r16
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	08 95       	ret

000016b8 <_ZN7TwoWire5writeEh>:
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	1f 92       	push	r1
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	69 83       	std	Y+1, r22	; 0x01
    16c4:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <_ZN7TwoWire12transmittingE>
    16c8:	22 23       	and	r18, r18
    16ca:	d1 f0       	breq	.+52     	; 0x1700 <_ZN7TwoWire5writeEh+0x48>
    16cc:	20 91 91 05 	lds	r18, 0x0591	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    16d0:	20 32       	cpi	r18, 0x20	; 32
    16d2:	40 f0       	brcs	.+16     	; 0x16e4 <_ZN7TwoWire5writeEh+0x2c>
    16d4:	21 e0       	ldi	r18, 0x01	; 1
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	fc 01       	movw	r30, r24
    16da:	33 83       	std	Z+3, r19	; 0x03
    16dc:	22 83       	std	Z+2, r18	; 0x02
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	15 c0       	rjmp	.+42     	; 0x170e <_ZN7TwoWire5writeEh+0x56>
    16e4:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <_ZN7TwoWire13txBufferIndexE>
    16e8:	e8 2f       	mov	r30, r24
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	ed 56       	subi	r30, 0x6D	; 109
    16ee:	fa 4f       	sbci	r31, 0xFA	; 250
    16f0:	99 81       	ldd	r25, Y+1	; 0x01
    16f2:	90 83       	st	Z, r25
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <_ZN7TwoWire13txBufferIndexE>
    16fa:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <_ZN7TwoWire5writeEh+0x52>
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	0e 94 5e 09 	call	0x12bc	; 0x12bc <twi_transmit>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0f 90       	pop	r0
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <_ZN7TwoWireC1Ev>:
    1716:	fc 01       	movw	r30, r24
    1718:	13 82       	std	Z+3, r1	; 0x03
    171a:	12 82       	std	Z+2, r1	; 0x02
    171c:	88 ee       	ldi	r24, 0xE8	; 232
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	84 83       	std	Z+4, r24	; 0x04
    1726:	95 83       	std	Z+5, r25	; 0x05
    1728:	a6 83       	std	Z+6, r26	; 0x06
    172a:	b7 83       	std	Z+7, r27	; 0x07
    172c:	8a e7       	ldi	r24, 0x7A	; 122
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
    1734:	08 95       	ret

00001736 <_ZN7TwoWire5beginEv>:
    1736:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    173a:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    173e:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZN7TwoWire13txBufferIndexE>
    1742:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    1746:	0e 94 a2 08 	call	0x1144	; 0x1144 <twi_init>
    174a:	83 e2       	ldi	r24, 0x23	; 35
    174c:	9b e0       	ldi	r25, 0x0B	; 11
    174e:	0e 94 8b 09 	call	0x1316	; 0x1316 <twi_attachSlaveTxEvent>
    1752:	89 ef       	ldi	r24, 0xF9	; 249
    1754:	9a e0       	ldi	r25, 0x0A	; 10
    1756:	0c 94 86 09 	jmp	0x130c	; 0x130c <twi_attachSlaveRxEvent>

0000175a <_ZN7TwoWire17beginTransmissionEh>:
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <_ZN7TwoWire12transmittingE>
    1760:	60 93 b3 05 	sts	0x05B3, r22	; 0x8005b3 <_ZN7TwoWire9txAddressE>
    1764:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZN7TwoWire13txBufferIndexE>
    1768:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    176c:	08 95       	ret

0000176e <_ZN7TwoWire17beginTransmissionEi>:
    176e:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <_ZN7TwoWire17beginTransmissionEh>

00001772 <_ZN7TwoWire15endTransmissionEh>:
    1772:	0f 93       	push	r16
    1774:	06 2f       	mov	r16, r22
    1776:	21 e0       	ldi	r18, 0x01	; 1
    1778:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    177c:	63 e9       	ldi	r22, 0x93	; 147
    177e:	75 e0       	ldi	r23, 0x05	; 5
    1780:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <_ZN7TwoWire9txAddressE>
    1784:	0e 94 08 09 	call	0x1210	; 0x1210 <twi_writeTo>
    1788:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZN7TwoWire13txBufferIndexE>
    178c:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZN7TwoWire14txBufferLengthE>
    1790:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire12transmittingE>
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <_ZN7TwoWire11requestFromEhhmhh>:
    1798:	4f 92       	push	r4
    179a:	5f 92       	push	r5
    179c:	6f 92       	push	r6
    179e:	7f 92       	push	r7
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	ef 92       	push	r14
    17a8:	ff 92       	push	r15
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	5c 01       	movw	r10, r24
    17b4:	f6 2e       	mov	r15, r22
    17b6:	d4 2f       	mov	r29, r20
    17b8:	28 01       	movw	r4, r16
    17ba:	39 01       	movw	r6, r18
    17bc:	ee 20       	and	r14, r14
    17be:	21 f1       	breq	.+72     	; 0x1808 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    17c0:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN7TwoWire17beginTransmissionEh>
    17c4:	ce 2d       	mov	r28, r14
    17c6:	c4 30       	cpi	r28, 0x04	; 4
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    17ca:	c3 e0       	ldi	r28, 0x03	; 3
    17cc:	c1 50       	subi	r28, 0x01	; 1
    17ce:	c0 f0       	brcs	.+48     	; 0x1800 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    17d0:	28 e0       	ldi	r18, 0x08	; 8
    17d2:	c2 9f       	mul	r28, r18
    17d4:	c0 01       	movw	r24, r0
    17d6:	11 24       	eor	r1, r1
    17d8:	a3 01       	movw	r20, r6
    17da:	92 01       	movw	r18, r4
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    17de:	56 95       	lsr	r21
    17e0:	47 95       	ror	r20
    17e2:	37 95       	ror	r19
    17e4:	27 95       	ror	r18
    17e6:	8a 95       	dec	r24
    17e8:	d2 f7       	brpl	.-12     	; 0x17de <_ZN7TwoWire11requestFromEhhmhh+0x46>
    17ea:	ca 01       	movw	r24, r20
    17ec:	b9 01       	movw	r22, r18
    17ee:	d5 01       	movw	r26, r10
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	01 90       	ld	r0, Z+
    17f6:	f0 81       	ld	r31, Z
    17f8:	e0 2d       	mov	r30, r0
    17fa:	c5 01       	movw	r24, r10
    17fc:	09 95       	icall
    17fe:	e6 cf       	rjmp	.-52     	; 0x17cc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	c5 01       	movw	r24, r10
    1804:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN7TwoWire15endTransmissionEh>
    1808:	4d 2f       	mov	r20, r29
    180a:	d1 32       	cpi	r29, 0x21	; 33
    180c:	08 f0       	brcs	.+2      	; 0x1810 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	2c 2d       	mov	r18, r12
    1812:	66 eb       	ldi	r22, 0xB6	; 182
    1814:	75 e0       	ldi	r23, 0x05	; 5
    1816:	8f 2d       	mov	r24, r15
    1818:	0e 94 c0 08 	call	0x1180	; 0x1180 <twi_readFrom>
    181c:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <_ZN7TwoWire13rxBufferIndexE>
    1820:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <_ZN7TwoWire14rxBufferLengthE>
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	7f 90       	pop	r7
    1838:	6f 90       	pop	r6
    183a:	5f 90       	pop	r5
    183c:	4f 90       	pop	r4
    183e:	08 95       	ret

00001840 <_ZN7TwoWire11requestFromEhhh>:
    1840:	cf 92       	push	r12
    1842:	ef 92       	push	r14
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	c2 2e       	mov	r12, r18
    184a:	e1 2c       	mov	r14, r1
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	10 e0       	ldi	r17, 0x00	; 0
    1850:	98 01       	movw	r18, r16
    1852:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN7TwoWire11requestFromEhhmhh>
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ef 90       	pop	r14
    185c:	cf 90       	pop	r12
    185e:	08 95       	ret

00001860 <_ZN7TwoWire11requestFromEii>:
    1860:	21 e0       	ldi	r18, 0x01	; 1
    1862:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <_ZN7TwoWire11requestFromEhhh>

00001866 <_ZN7TwoWire15endTransmissionEv>:
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <_ZN7TwoWire15endTransmissionEh>

0000186c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    186c:	80 e8       	ldi	r24, 0x80	; 128
    186e:	95 e0       	ldi	r25, 0x05	; 5
    1870:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <_ZN7TwoWireC1Ev>

00001874 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1874:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1876:	91 8d       	ldd	r25, Z+25	; 0x19
    1878:	22 8d       	ldd	r18, Z+26	; 0x1a
    187a:	89 2f       	mov	r24, r25
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	80 5c       	subi	r24, 0xC0	; 192
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	82 1b       	sub	r24, r18
    1884:	91 09       	sbc	r25, r1
}
    1886:	8f 73       	andi	r24, 0x3F	; 63
    1888:	99 27       	eor	r25, r25
    188a:	08 95       	ret

0000188c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    188c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    188e:	91 8d       	ldd	r25, Z+25	; 0x19
    1890:	82 8d       	ldd	r24, Z+26	; 0x1a
    1892:	98 17       	cp	r25, r24
    1894:	31 f0       	breq	.+12     	; 0x18a2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1896:	82 8d       	ldd	r24, Z+26	; 0x1a
    1898:	e8 0f       	add	r30, r24
    189a:	f1 1d       	adc	r31, r1
    189c:	85 8d       	ldd	r24, Z+29	; 0x1d
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18a6:	08 95       	ret

000018a8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    18a8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18aa:	91 8d       	ldd	r25, Z+25	; 0x19
    18ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ae:	98 17       	cp	r25, r24
    18b0:	61 f0       	breq	.+24     	; 0x18ca <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b4:	df 01       	movw	r26, r30
    18b6:	a8 0f       	add	r26, r24
    18b8:	b1 1d       	adc	r27, r1
    18ba:	5d 96       	adiw	r26, 0x1d	; 29
    18bc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    18be:	92 8d       	ldd	r25, Z+26	; 0x1a
    18c0:	9f 5f       	subi	r25, 0xFF	; 255
    18c2:	9f 73       	andi	r25, 0x3F	; 63
    18c4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    18ce:	08 95       	ret

000018d0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    18d0:	8d eb       	ldi	r24, 0xBD	; 189
    18d2:	9d e0       	ldi	r25, 0x0D	; 13
    18d4:	89 2b       	or	r24, r25
    18d6:	49 f0       	breq	.+18     	; 0x18ea <_Z14serialEventRunv+0x1a>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	89 2b       	or	r24, r25
    18de:	29 f0       	breq	.+10     	; 0x18ea <_Z14serialEventRunv+0x1a>
    18e0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z17Serial0_availablev>
    18e4:	81 11       	cpse	r24, r1
    18e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    18ea:	08 95       	ret

000018ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    18ec:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    18ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    18f0:	df 01       	movw	r26, r30
    18f2:	a8 0f       	add	r26, r24
    18f4:	b1 1d       	adc	r27, r1
    18f6:	a3 5a       	subi	r26, 0xA3	; 163
    18f8:	bf 4f       	sbci	r27, 0xFF	; 255
    18fa:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    18fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	8f 73       	andi	r24, 0x3F	; 63
    1904:	99 27       	eor	r25, r25
    1906:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1908:	a6 89       	ldd	r26, Z+22	; 0x16
    190a:	b7 89       	ldd	r27, Z+23	; 0x17
    190c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    190e:	a0 89       	ldd	r26, Z+16	; 0x10
    1910:	b1 89       	ldd	r27, Z+17	; 0x11
    1912:	8c 91       	ld	r24, X
    1914:	80 64       	ori	r24, 0x40	; 64
    1916:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1918:	93 8d       	ldd	r25, Z+27	; 0x1b
    191a:	84 8d       	ldd	r24, Z+28	; 0x1c
    191c:	98 13       	cpse	r25, r24
    191e:	06 c0       	rjmp	.+12     	; 0x192c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1920:	02 88       	ldd	r0, Z+18	; 0x12
    1922:	f3 89       	ldd	r31, Z+19	; 0x13
    1924:	e0 2d       	mov	r30, r0
    1926:	80 81       	ld	r24, Z
    1928:	8f 7d       	andi	r24, 0xDF	; 223
    192a:	80 83       	st	Z, r24
    192c:	08 95       	ret

0000192e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
  _written = true;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1940:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1942:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1944:	98 13       	cpse	r25, r24
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <_ZN14HardwareSerial5writeEh+0x24>
    1948:	e8 89       	ldd	r30, Y+16	; 0x10
    194a:	f9 89       	ldd	r31, Y+17	; 0x11
    194c:	80 81       	ld	r24, Z
    194e:	85 fd       	sbrc	r24, 5
    1950:	24 c0       	rjmp	.+72     	; 0x199a <_ZN14HardwareSerial5writeEh+0x6c>
    1952:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1954:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	0f 5f       	subi	r16, 0xFF	; 255
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	0f 73       	andi	r16, 0x3F	; 63
    195e:	11 27       	eor	r17, r17
    1960:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1962:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1964:	e8 12       	cpse	r14, r24
    1966:	0c c0       	rjmp	.+24     	; 0x1980 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	07 fc       	sbrc	r0, 7
    196c:	fa cf       	rjmp	.-12     	; 0x1962 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    196e:	e8 89       	ldd	r30, Y+16	; 0x10
    1970:	f9 89       	ldd	r31, Y+17	; 0x11
    1972:	80 81       	ld	r24, Z
    1974:	85 ff       	sbrs	r24, 5
    1976:	f5 cf       	rjmp	.-22     	; 0x1962 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    197e:	f1 cf       	rjmp	.-30     	; 0x1962 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1982:	fe 01       	movw	r30, r28
    1984:	e8 0f       	add	r30, r24
    1986:	f1 1d       	adc	r31, r1
    1988:	e3 5a       	subi	r30, 0xA3	; 163
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    198e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1990:	ea 89       	ldd	r30, Y+18	; 0x12
    1992:	fb 89       	ldd	r31, Y+19	; 0x13
    1994:	80 81       	ld	r24, Z
    1996:	80 62       	ori	r24, 0x20	; 32
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    199a:	ee 89       	ldd	r30, Y+22	; 0x16
    199c:	ff 89       	ldd	r31, Y+23	; 0x17
    199e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    19a0:	e8 89       	ldd	r30, Y+16	; 0x10
    19a2:	f9 89       	ldd	r31, Y+17	; 0x11
    19a4:	80 81       	ld	r24, Z
    19a6:	80 64       	ori	r24, 0x40	; 64
    19a8:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	08 95       	ret

000019bc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    19c2:	88 8d       	ldd	r24, Y+24	; 0x18
    19c4:	88 23       	and	r24, r24
    19c6:	c9 f0       	breq	.+50     	; 0x19fa <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    19c8:	ea 89       	ldd	r30, Y+18	; 0x12
    19ca:	fb 89       	ldd	r31, Y+19	; 0x13
    19cc:	80 81       	ld	r24, Z
    19ce:	85 fd       	sbrc	r24, 5
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <_ZN14HardwareSerial5flushEv+0x20>
    19d2:	a8 89       	ldd	r26, Y+16	; 0x10
    19d4:	b9 89       	ldd	r27, Y+17	; 0x11
    19d6:	8c 91       	ld	r24, X
    19d8:	86 fd       	sbrc	r24, 6
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	07 fc       	sbrc	r0, 7
    19e0:	f5 cf       	rjmp	.-22     	; 0x19cc <_ZN14HardwareSerial5flushEv+0x10>
    19e2:	80 81       	ld	r24, Z
    19e4:	85 ff       	sbrs	r24, 5
    19e6:	f2 cf       	rjmp	.-28     	; 0x19cc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    19e8:	a8 89       	ldd	r26, Y+16	; 0x10
    19ea:	b9 89       	ldd	r27, Y+17	; 0x11
    19ec:	8c 91       	ld	r24, X
    19ee:	85 ff       	sbrs	r24, 5
    19f0:	ed cf       	rjmp	.-38     	; 0x19cc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    19f2:	ce 01       	movw	r24, r28
    19f4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19f8:	e7 cf       	rjmp	.-50     	; 0x19c8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
    1a10:	6a 01       	movw	r12, r20
    1a12:	7b 01       	movw	r14, r22
    1a14:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1a16:	e8 89       	ldd	r30, Y+16	; 0x10
    1a18:	f9 89       	ldd	r31, Y+17	; 0x11
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a1e:	41 15       	cp	r20, r1
    1a20:	51 4e       	sbci	r21, 0xE1	; 225
    1a22:	61 05       	cpc	r22, r1
    1a24:	71 05       	cpc	r23, r1
    1a26:	b1 f0       	breq	.+44     	; 0x1a54 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	79 e0       	ldi	r23, 0x09	; 9
    1a2c:	8d e3       	ldi	r24, 0x3D	; 61
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a7 01       	movw	r20, r14
    1a32:	96 01       	movw	r18, r12
    1a34:	0e 94 38 13 	call	0x2670	; 0x2670 <__udivmodsi4>
    1a38:	da 01       	movw	r26, r20
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	a1 09       	sbc	r26, r1
    1a40:	b1 09       	sbc	r27, r1
    1a42:	b6 95       	lsr	r27
    1a44:	a7 95       	ror	r26
    1a46:	97 95       	ror	r25
    1a48:	87 95       	ror	r24
    1a4a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a4c:	21 15       	cp	r18, r1
    1a4e:	80 e1       	ldi	r24, 0x10	; 16
    1a50:	38 07       	cpc	r19, r24
    1a52:	a8 f0       	brcs	.+42     	; 0x1a7e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1a54:	e8 89       	ldd	r30, Y+16	; 0x10
    1a56:	f9 89       	ldd	r31, Y+17	; 0x11
    1a58:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1a5a:	60 e8       	ldi	r22, 0x80	; 128
    1a5c:	74 e8       	ldi	r23, 0x84	; 132
    1a5e:	8e e1       	ldi	r24, 0x1E	; 30
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a7 01       	movw	r20, r14
    1a64:	96 01       	movw	r18, r12
    1a66:	0e 94 38 13 	call	0x2670	; 0x2670 <__udivmodsi4>
    1a6a:	da 01       	movw	r26, r20
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	a1 09       	sbc	r26, r1
    1a72:	b1 09       	sbc	r27, r1
    1a74:	b6 95       	lsr	r27
    1a76:	a7 95       	ror	r26
    1a78:	97 95       	ror	r25
    1a7a:	87 95       	ror	r24
    1a7c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1a7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a80:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a82:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1a84:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a86:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a88:	20 83       	st	Z, r18

  _written = false;
    1a8a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1a8c:	ec 89       	ldd	r30, Y+20	; 0x14
    1a8e:	fd 89       	ldd	r31, Y+21	; 0x15
    1a90:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1a92:	ea 89       	ldd	r30, Y+18	; 0x12
    1a94:	fb 89       	ldd	r31, Y+19	; 0x13
    1a96:	80 81       	ld	r24, Z
    1a98:	80 61       	ori	r24, 0x10	; 16
    1a9a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a9c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a9e:	fb 89       	ldd	r31, Y+19	; 0x13
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 60       	ori	r24, 0x08	; 8
    1aa4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1aa6:	ea 89       	ldd	r30, Y+18	; 0x12
    1aa8:	fb 89       	ldd	r31, Y+19	; 0x13
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1ab0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ab2:	fb 89       	ldd	r31, Y+19	; 0x13
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8f 7d       	andi	r24, 0xDF	; 223
    1ab8:	80 83       	st	Z, r24
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	08 95       	ret

00001aca <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	2f 93       	push	r18
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1ade:	e0 91 e6 05 	lds	r30, 0x05E6	; 0x8005e6 <Serial+0x10>
    1ae2:	f0 91 e7 05 	lds	r31, 0x05E7	; 0x8005e7 <Serial+0x11>
    1ae6:	80 81       	ld	r24, Z
    1ae8:	e0 91 ec 05 	lds	r30, 0x05EC	; 0x8005ec <Serial+0x16>
    1aec:	f0 91 ed 05 	lds	r31, 0x05ED	; 0x8005ed <Serial+0x17>
    1af0:	82 fd       	sbrc	r24, 2
    1af2:	12 c0       	rjmp	.+36     	; 0x1b18 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1af4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1af6:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <Serial+0x19>
    1afa:	8f 5f       	subi	r24, 0xFF	; 255
    1afc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1afe:	20 91 f0 05 	lds	r18, 0x05F0	; 0x8005f0 <Serial+0x1a>
    1b02:	82 17       	cp	r24, r18
    1b04:	51 f0       	breq	.+20     	; 0x1b1a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1b06:	e0 91 ef 05 	lds	r30, 0x05EF	; 0x8005ef <Serial+0x19>
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	ea 52       	subi	r30, 0x2A	; 42
    1b0e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b10:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1b12:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <Serial+0x19>
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b18:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1b1a:	ff 91       	pop	r31
    1b1c:	ef 91       	pop	r30
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1b50:	86 ed       	ldi	r24, 0xD6	; 214
    1b52:	95 e0       	ldi	r25, 0x05	; 5
    1b54:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1b7a:	86 ed       	ldi	r24, 0xD6	; 214
    1b7c:	95 e0       	ldi	r25, 0x05	; 5
    1b7e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN14HardwareSerial9availableEv>
    1b82:	21 e0       	ldi	r18, 0x01	; 1
    1b84:	89 2b       	or	r24, r25
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <_Z17Serial0_availablev+0x10>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
}
    1b8a:	82 2f       	mov	r24, r18
    1b8c:	08 95       	ret

00001b8e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b8e:	e6 ed       	ldi	r30, 0xD6	; 214
    1b90:	f5 e0       	ldi	r31, 0x05	; 5
    1b92:	13 82       	std	Z+3, r1	; 0x03
    1b94:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b96:	88 ee       	ldi	r24, 0xE8	; 232
    1b98:	93 e0       	ldi	r25, 0x03	; 3
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	84 83       	std	Z+4, r24	; 0x04
    1ba0:	95 83       	std	Z+5, r25	; 0x05
    1ba2:	a6 83       	std	Z+6, r26	; 0x06
    1ba4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ba6:	8a e8       	ldi	r24, 0x8A	; 138
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
    1bae:	85 ec       	ldi	r24, 0xC5	; 197
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	95 87       	std	Z+13, r25	; 0x0d
    1bb4:	84 87       	std	Z+12, r24	; 0x0c
    1bb6:	84 ec       	ldi	r24, 0xC4	; 196
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	97 87       	std	Z+15, r25	; 0x0f
    1bbc:	86 87       	std	Z+14, r24	; 0x0e
    1bbe:	80 ec       	ldi	r24, 0xC0	; 192
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	91 8b       	std	Z+17, r25	; 0x11
    1bc4:	80 8b       	std	Z+16, r24	; 0x10
    1bc6:	81 ec       	ldi	r24, 0xC1	; 193
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	93 8b       	std	Z+19, r25	; 0x13
    1bcc:	82 8b       	std	Z+18, r24	; 0x12
    1bce:	82 ec       	ldi	r24, 0xC2	; 194
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	95 8b       	std	Z+21, r25	; 0x15
    1bd4:	84 8b       	std	Z+20, r24	; 0x14
    1bd6:	86 ec       	ldi	r24, 0xC6	; 198
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	97 8b       	std	Z+23, r25	; 0x17
    1bdc:	86 8b       	std	Z+22, r24	; 0x16
    1bde:	11 8e       	std	Z+25, r1	; 0x19
    1be0:	12 8e       	std	Z+26, r1	; 0x1a
    1be2:	13 8e       	std	Z+27, r1	; 0x1b
    1be4:	14 8e       	std	Z+28, r1	; 0x1c
    1be6:	08 95       	ret

00001be8 <initVariant>:
    1be8:	08 95       	ret

00001bea <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1bea:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <init>

	initVariant();
    1bee:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1bf2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1bf6:	c8 e6       	ldi	r28, 0x68	; 104
    1bf8:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1bfa:	0e 94 4a 03 	call	0x694	; 0x694 <loop>
		if (serialEventRun) serialEventRun();
    1bfe:	20 97       	sbiw	r28, 0x00	; 0
    1c00:	e1 f3       	breq	.-8      	; 0x1bfa <main+0x10>
    1c02:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_Z14serialEventRunv>
    1c06:	f9 cf       	rjmp	.-14     	; 0x1bfa <main+0x10>

00001c08 <_Znwj>:
    1c08:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <malloc>

00001c0c <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1c0c:	cf 92       	push	r12
    1c0e:	df 92       	push	r13
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	6c 01       	movw	r12, r24
    1c1e:	7a 01       	movw	r14, r20
    1c20:	8b 01       	movw	r16, r22
    1c22:	c0 e0       	ldi	r28, 0x00	; 0
    1c24:	d0 e0       	ldi	r29, 0x00	; 0
    1c26:	ce 15       	cp	r28, r14
    1c28:	df 05       	cpc	r29, r15
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <_ZN5Print5writeEPKhj+0x40>
    1c2c:	d8 01       	movw	r26, r16
    1c2e:	6d 91       	ld	r22, X+
    1c30:	8d 01       	movw	r16, r26
    1c32:	d6 01       	movw	r26, r12
    1c34:	ed 91       	ld	r30, X+
    1c36:	fc 91       	ld	r31, X
    1c38:	01 90       	ld	r0, Z+
    1c3a:	f0 81       	ld	r31, Z
    1c3c:	e0 2d       	mov	r30, r0
    1c3e:	c6 01       	movw	r24, r12
    1c40:	09 95       	icall
    1c42:	89 2b       	or	r24, r25
    1c44:	11 f0       	breq	.+4      	; 0x1c4a <_ZN5Print5writeEPKhj+0x3e>
    1c46:	21 96       	adiw	r28, 0x01	; 1
    1c48:	ee cf       	rjmp	.-36     	; 0x1c26 <_ZN5Print5writeEPKhj+0x1a>
    1c4a:	7e 01       	movw	r14, r28
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	08 95       	ret

00001c60 <_ZN5Print5writeEPKc>:
    1c60:	61 15       	cp	r22, r1
    1c62:	71 05       	cpc	r23, r1
    1c64:	79 f0       	breq	.+30     	; 0x1c84 <_ZN5Print5writeEPKc+0x24>
    1c66:	fb 01       	movw	r30, r22
    1c68:	01 90       	ld	r0, Z+
    1c6a:	00 20       	and	r0, r0
    1c6c:	e9 f7       	brne	.-6      	; 0x1c68 <_ZN5Print5writeEPKc+0x8>
    1c6e:	31 97       	sbiw	r30, 0x01	; 1
    1c70:	af 01       	movw	r20, r30
    1c72:	46 1b       	sub	r20, r22
    1c74:	57 0b       	sbc	r21, r23
    1c76:	dc 01       	movw	r26, r24
    1c78:	ed 91       	ld	r30, X+
    1c7a:	fc 91       	ld	r31, X
    1c7c:	02 80       	ldd	r0, Z+2	; 0x02
    1c7e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c80:	e0 2d       	mov	r30, r0
    1c82:	09 94       	ijmp
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	08 95       	ret

00001c8a <_ZN5Print5printEPK19__FlashStringHelper>:
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	8c 01       	movw	r16, r24
    1c98:	7b 01       	movw	r14, r22
    1c9a:	c0 e0       	ldi	r28, 0x00	; 0
    1c9c:	d0 e0       	ldi	r29, 0x00	; 0
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	ec 0f       	add	r30, r28
    1ca2:	fd 1f       	adc	r31, r29
    1ca4:	64 91       	lpm	r22, Z
    1ca6:	66 23       	and	r22, r22
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1caa:	d8 01       	movw	r26, r16
    1cac:	ed 91       	ld	r30, X+
    1cae:	fc 91       	ld	r31, X
    1cb0:	01 90       	ld	r0, Z+
    1cb2:	f0 81       	ld	r31, Z
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	09 95       	icall
    1cba:	89 2b       	or	r24, r25
    1cbc:	11 f0       	breq	.+4      	; 0x1cc2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1cbe:	21 96       	adiw	r28, 0x01	; 1
    1cc0:	ee cf       	rjmp	.-36     	; 0x1c9e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	ff 90       	pop	r15
    1cce:	ef 90       	pop	r14
    1cd0:	08 95       	ret

00001cd2 <_ZN5Print5printEPKc>:
    1cd2:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <_ZN5Print5writeEPKc>

00001cd6 <_ZN5Print7printlnEv>:
    1cd6:	66 e9       	ldi	r22, 0x96	; 150
    1cd8:	71 e0       	ldi	r23, 0x01	; 1
    1cda:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <_ZN5Print5writeEPKc>

00001cde <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN5Print5printEPK19__FlashStringHelper>
    1cec:	8c 01       	movw	r16, r24
    1cee:	ce 01       	movw	r24, r28
    1cf0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN5Print7printlnEv>
    1cf4:	80 0f       	add	r24, r16
    1cf6:	91 1f       	adc	r25, r17
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <_ZN5Print7printlnEPKc>:
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN5Print5writeEPKc>
    1d10:	8c 01       	movw	r16, r24
    1d12:	ce 01       	movw	r24, r28
    1d14:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN5Print7printlnEv>
    1d18:	80 0f       	add	r24, r16
    1d1a:	91 1f       	adc	r25, r17
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	08 95       	ret

00001d26 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	a1 97       	sbiw	r28, 0x21	; 33
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	7c 01       	movw	r14, r24
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1d50:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <_ZN5Print11printNumberEmh+0x32>
    1d56:	2a e0       	ldi	r18, 0x0A	; 10
    1d58:	8e 01       	movw	r16, r28
    1d5a:	0f 5d       	subi	r16, 0xDF	; 223
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    1d5e:	82 2e       	mov	r8, r18
    1d60:	91 2c       	mov	r9, r1
    1d62:	a1 2c       	mov	r10, r1
    1d64:	b1 2c       	mov	r11, r1
    1d66:	bf 01       	movw	r22, r30
    1d68:	a5 01       	movw	r20, r10
    1d6a:	94 01       	movw	r18, r8
    1d6c:	0e 94 38 13 	call	0x2670	; 0x2670 <__udivmodsi4>
    n /= base;
    1d70:	f9 01       	movw	r30, r18
    1d72:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1d74:	01 50       	subi	r16, 0x01	; 1
    1d76:	11 09       	sbc	r17, r1
    1d78:	6a 30       	cpi	r22, 0x0A	; 10
    1d7a:	10 f4       	brcc	.+4      	; 0x1d80 <_ZN5Print11printNumberEmh+0x5a>
    1d7c:	60 5d       	subi	r22, 0xD0	; 208
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <_ZN5Print11printNumberEmh+0x5c>
    1d80:	69 5c       	subi	r22, 0xC9	; 201
    1d82:	d8 01       	movw	r26, r16
    1d84:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1d86:	23 2b       	or	r18, r19
    1d88:	24 2b       	or	r18, r20
    1d8a:	25 2b       	or	r18, r21
    1d8c:	61 f7       	brne	.-40     	; 0x1d66 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1d8e:	b8 01       	movw	r22, r16
    1d90:	c7 01       	movw	r24, r14
    1d92:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN5Print5writeEPKc>
}
    1d96:	a1 96       	adiw	r28, 0x21	; 33
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	08 95       	ret

00001db8 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1db8:	21 15       	cp	r18, r1
    1dba:	31 05       	cpc	r19, r1
    1dbc:	41 f4       	brne	.+16     	; 0x1dce <_ZN5Print5printEmi+0x16>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	ed 91       	ld	r30, X+
    1dc2:	fc 91       	ld	r31, X
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	f0 81       	ld	r31, Z
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	64 2f       	mov	r22, r20
    1dcc:	09 94       	ijmp
  else return printNumber(n, base);
    1dce:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <_ZN5Print11printNumberEmh>

00001dd2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1dd2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1dd4:	46 2f       	mov	r20, r22
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <_ZN5Print5printEmi>

00001de0 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    1dea:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_ZN5Print5printEhi>
    1dee:	8c 01       	movw	r16, r24
  n += println();
    1df0:	ce 01       	movw	r24, r28
    1df2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN5Print7printlnEv>
  return n;
}
    1df6:	80 0f       	add	r24, r16
    1df8:	91 1f       	adc	r25, r17
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	08 95       	ret

00001e04 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1e04:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1e06:	ab 01       	movw	r20, r22
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <_ZN5Print5printEmi>

00001e10 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1e1a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN5Print5printEji>
    1e1e:	8c 01       	movw	r16, r24
  n += println();
    1e20:	ce 01       	movw	r24, r28
    1e22:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN5Print7printlnEv>
  return n;
}
    1e26:	80 0f       	add	r24, r16
    1e28:	91 1f       	adc	r25, r17
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	08 95       	ret

00001e34 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
    1e4a:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <timer0_millis>
    1e4e:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <timer0_millis+0x1>
    1e52:	a0 91 76 06 	lds	r26, 0x0676	; 0x800676 <timer0_millis+0x2>
    1e56:	b0 91 77 06 	lds	r27, 0x0677	; 0x800677 <timer0_millis+0x3>
    1e5a:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <timer0_fract>
    1e5e:	23 e0       	ldi	r18, 0x03	; 3
    1e60:	23 0f       	add	r18, r19
    1e62:	2d 37       	cpi	r18, 0x7D	; 125
    1e64:	20 f4       	brcc	.+8      	; 0x1e6e <__vector_16+0x3a>
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	b1 1d       	adc	r27, r1
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <__vector_16+0x44>
    1e6e:	26 e8       	ldi	r18, 0x86	; 134
    1e70:	23 0f       	add	r18, r19
    1e72:	02 96       	adiw	r24, 0x02	; 2
    1e74:	a1 1d       	adc	r26, r1
    1e76:	b1 1d       	adc	r27, r1
    1e78:	20 93 73 06 	sts	0x0673, r18	; 0x800673 <timer0_fract>
    1e7c:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <timer0_millis>
    1e80:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <timer0_millis+0x1>
    1e84:	a0 93 76 06 	sts	0x0676, r26	; 0x800676 <timer0_millis+0x2>
    1e88:	b0 93 77 06 	sts	0x0677, r27	; 0x800677 <timer0_millis+0x3>
    1e8c:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <timer0_overflow_count>
    1e90:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <timer0_overflow_count+0x1>
    1e94:	a0 91 7a 06 	lds	r26, 0x067A	; 0x80067a <timer0_overflow_count+0x2>
    1e98:	b0 91 7b 06 	lds	r27, 0x067B	; 0x80067b <timer0_overflow_count+0x3>
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	a1 1d       	adc	r26, r1
    1ea0:	b1 1d       	adc	r27, r1
    1ea2:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <timer0_overflow_count>
    1ea6:	90 93 79 06 	sts	0x0679, r25	; 0x800679 <timer0_overflow_count+0x1>
    1eaa:	a0 93 7a 06 	sts	0x067A, r26	; 0x80067a <timer0_overflow_count+0x2>
    1eae:	b0 93 7b 06 	sts	0x067B, r27	; 0x80067b <timer0_overflow_count+0x3>
    1eb2:	bf 91       	pop	r27
    1eb4:	af 91       	pop	r26
    1eb6:	9f 91       	pop	r25
    1eb8:	8f 91       	pop	r24
    1eba:	3f 91       	pop	r19
    1ebc:	2f 91       	pop	r18
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <micros>:
    1ec8:	3f b7       	in	r19, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <timer0_overflow_count>
    1ed0:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <timer0_overflow_count+0x1>
    1ed4:	a0 91 7a 06 	lds	r26, 0x067A	; 0x80067a <timer0_overflow_count+0x2>
    1ed8:	b0 91 7b 06 	lds	r27, 0x067B	; 0x80067b <timer0_overflow_count+0x3>
    1edc:	26 b5       	in	r18, 0x26	; 38
    1ede:	a8 9b       	sbis	0x15, 0	; 21
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <micros+0x24>
    1ee2:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <micros+0x24>
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	b1 1d       	adc	r27, r1
    1eec:	3f bf       	out	0x3f, r19	; 63
    1eee:	ba 2f       	mov	r27, r26
    1ef0:	a9 2f       	mov	r26, r25
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	88 27       	eor	r24, r24
    1ef6:	82 0f       	add	r24, r18
    1ef8:	91 1d       	adc	r25, r1
    1efa:	a1 1d       	adc	r26, r1
    1efc:	b1 1d       	adc	r27, r1
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	42 e0       	ldi	r20, 0x02	; 2
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	88 1f       	adc	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	4a 95       	dec	r20
    1f0e:	d1 f7       	brne	.-12     	; 0x1f04 <micros+0x3c>
    1f10:	08 95       	ret

00001f12 <delay>:
    1f12:	8f 92       	push	r8
    1f14:	9f 92       	push	r9
    1f16:	af 92       	push	r10
    1f18:	bf 92       	push	r11
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	6b 01       	movw	r12, r22
    1f24:	7c 01       	movw	r14, r24
    1f26:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <micros>
    1f2a:	4b 01       	movw	r8, r22
    1f2c:	5c 01       	movw	r10, r24
    1f2e:	c1 14       	cp	r12, r1
    1f30:	d1 04       	cpc	r13, r1
    1f32:	e1 04       	cpc	r14, r1
    1f34:	f1 04       	cpc	r15, r1
    1f36:	01 f1       	breq	.+64     	; 0x1f78 <delay+0x66>
    1f38:	0e 94 17 13 	call	0x262e	; 0x262e <yield>
    1f3c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <micros>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	88 19       	sub	r24, r8
    1f46:	99 09       	sbc	r25, r9
    1f48:	aa 09       	sbc	r26, r10
    1f4a:	bb 09       	sbc	r27, r11
    1f4c:	88 3e       	cpi	r24, 0xE8	; 232
    1f4e:	93 40       	sbci	r25, 0x03	; 3
    1f50:	a1 05       	cpc	r26, r1
    1f52:	b1 05       	cpc	r27, r1
    1f54:	60 f3       	brcs	.-40     	; 0x1f2e <delay+0x1c>
    1f56:	21 e0       	ldi	r18, 0x01	; 1
    1f58:	c2 1a       	sub	r12, r18
    1f5a:	d1 08       	sbc	r13, r1
    1f5c:	e1 08       	sbc	r14, r1
    1f5e:	f1 08       	sbc	r15, r1
    1f60:	88 ee       	ldi	r24, 0xE8	; 232
    1f62:	88 0e       	add	r8, r24
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	98 1e       	adc	r9, r24
    1f68:	a1 1c       	adc	r10, r1
    1f6a:	b1 1c       	adc	r11, r1
    1f6c:	c1 14       	cp	r12, r1
    1f6e:	d1 04       	cpc	r13, r1
    1f70:	e1 04       	cpc	r14, r1
    1f72:	f1 04       	cpc	r15, r1
    1f74:	19 f7       	brne	.-58     	; 0x1f3c <delay+0x2a>
    1f76:	db cf       	rjmp	.-74     	; 0x1f2e <delay+0x1c>
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	08 95       	ret

00001f8a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1f8a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1f8c:	84 b5       	in	r24, 0x24	; 36
    1f8e:	82 60       	ori	r24, 0x02	; 2
    1f90:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1f92:	84 b5       	in	r24, 0x24	; 36
    1f94:	81 60       	ori	r24, 0x01	; 1
    1f96:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1f98:	85 b5       	in	r24, 0x25	; 37
    1f9a:	82 60       	ori	r24, 0x02	; 2
    1f9c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1f9e:	85 b5       	in	r24, 0x25	; 37
    1fa0:	81 60       	ori	r24, 0x01	; 1
    1fa2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1fa4:	ee e6       	ldi	r30, 0x6E	; 110
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	81 60       	ori	r24, 0x01	; 1
    1fac:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1fae:	e1 e8       	ldi	r30, 0x81	; 129
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1fb4:	80 81       	ld	r24, Z
    1fb6:	82 60       	ori	r24, 0x02	; 2
    1fb8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1fba:	80 81       	ld	r24, Z
    1fbc:	81 60       	ori	r24, 0x01	; 1
    1fbe:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1fc0:	e0 e8       	ldi	r30, 0x80	; 128
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	81 60       	ori	r24, 0x01	; 1
    1fc8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1fca:	e1 eb       	ldi	r30, 0xB1	; 177
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	84 60       	ori	r24, 0x04	; 4
    1fd2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1fd4:	e0 eb       	ldi	r30, 0xB0	; 176
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	81 60       	ori	r24, 0x01	; 1
    1fdc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1fde:	ea e7       	ldi	r30, 0x7A	; 122
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	84 60       	ori	r24, 0x04	; 4
    1fe6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 60       	ori	r24, 0x02	; 2
    1fec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1fee:	80 81       	ld	r24, Z
    1ff0:	81 60       	ori	r24, 0x01	; 1
    1ff2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 68       	ori	r24, 0x80	; 128
    1ff8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ffa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1ffe:	08 95       	ret

00002000 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2000:	8e 30       	cpi	r24, 0x0E	; 14
    2002:	08 f0       	brcs	.+2      	; 0x2006 <analogRead+0x6>
    2004:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2006:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    200a:	90 e4       	ldi	r25, 0x40	; 64
    200c:	29 9f       	mul	r18, r25
    200e:	90 01       	movw	r18, r0
    2010:	11 24       	eor	r1, r1
    2012:	87 70       	andi	r24, 0x07	; 7
    2014:	82 2b       	or	r24, r18
    2016:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    201a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    201e:	80 64       	ori	r24, 0x40	; 64
    2020:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2024:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2028:	86 fd       	sbrc	r24, 6
    202a:	fc cf       	rjmp	.-8      	; 0x2024 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    202c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    2030:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2034:	90 e0       	ldi	r25, 0x00	; 0
}
    2036:	92 2b       	or	r25, r18
    2038:	08 95       	ret

0000203a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    203a:	83 30       	cpi	r24, 0x03	; 3
    203c:	81 f0       	breq	.+32     	; 0x205e <turnOffPWM+0x24>
    203e:	28 f4       	brcc	.+10     	; 0x204a <turnOffPWM+0x10>
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	99 f0       	breq	.+38     	; 0x206a <turnOffPWM+0x30>
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	a1 f0       	breq	.+40     	; 0x2070 <turnOffPWM+0x36>
    2048:	08 95       	ret
    204a:	87 30       	cpi	r24, 0x07	; 7
    204c:	a9 f0       	breq	.+42     	; 0x2078 <turnOffPWM+0x3e>
    204e:	88 30       	cpi	r24, 0x08	; 8
    2050:	b9 f0       	breq	.+46     	; 0x2080 <turnOffPWM+0x46>
    2052:	84 30       	cpi	r24, 0x04	; 4
    2054:	d1 f4       	brne	.+52     	; 0x208a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2056:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    205a:	8f 7d       	andi	r24, 0xDF	; 223
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    205e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2062:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2064:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2068:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    206a:	84 b5       	in	r24, 0x24	; 36
    206c:	8f 77       	andi	r24, 0x7F	; 127
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2070:	84 b5       	in	r24, 0x24	; 36
    2072:	8f 7d       	andi	r24, 0xDF	; 223
    2074:	84 bd       	out	0x24, r24	; 36
    2076:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2078:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    207c:	8f 77       	andi	r24, 0x7F	; 127
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2080:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2084:	8f 7d       	andi	r24, 0xDF	; 223
    2086:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    208a:	08 95       	ret

0000208c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	fc 01       	movw	r30, r24
    2094:	e6 53       	subi	r30, 0x36	; 54
    2096:	fe 4f       	sbci	r31, 0xFE	; 254
    2098:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    209a:	fc 01       	movw	r30, r24
    209c:	e2 52       	subi	r30, 0x22	; 34
    209e:	fe 4f       	sbci	r31, 0xFE	; 254
    20a0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    20a2:	88 23       	and	r24, r24
    20a4:	61 f1       	breq	.+88     	; 0x20fe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	fc 01       	movw	r30, r24
    20ae:	ea 5f       	subi	r30, 0xFA	; 250
    20b0:	fd 4f       	sbci	r31, 0xFD	; 253
    20b2:	c5 91       	lpm	r28, Z+
    20b4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    20b6:	fc 01       	movw	r30, r24
    20b8:	e4 50       	subi	r30, 0x04	; 4
    20ba:	fe 4f       	sbci	r31, 0xFE	; 254
    20bc:	a5 91       	lpm	r26, Z+
    20be:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    20c0:	61 11       	cpse	r22, r1
    20c2:	09 c0       	rjmp	.+18     	; 0x20d6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    20c4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    20c6:	f8 94       	cli
		*reg &= ~bit;
    20c8:	88 81       	ld	r24, Y
    20ca:	20 95       	com	r18
    20cc:	82 23       	and	r24, r18
    20ce:	88 83       	st	Y, r24
		*out &= ~bit;
    20d0:	ec 91       	ld	r30, X
    20d2:	2e 23       	and	r18, r30
    20d4:	0b c0       	rjmp	.+22     	; 0x20ec <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    20d6:	62 30       	cpi	r22, 0x02	; 2
    20d8:	61 f4       	brne	.+24     	; 0x20f2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    20da:	9f b7       	in	r25, 0x3f	; 63
                cli();
    20dc:	f8 94       	cli
		*reg &= ~bit;
    20de:	88 81       	ld	r24, Y
    20e0:	32 2f       	mov	r19, r18
    20e2:	30 95       	com	r19
    20e4:	83 23       	and	r24, r19
    20e6:	88 83       	st	Y, r24
		*out |= bit;
    20e8:	ec 91       	ld	r30, X
    20ea:	2e 2b       	or	r18, r30
    20ec:	2c 93       	st	X, r18
		SREG = oldSREG;
    20ee:	9f bf       	out	0x3f, r25	; 63
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    20f2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    20f4:	f8 94       	cli
		*reg |= bit;
    20f6:	e8 81       	ld	r30, Y
    20f8:	2e 2b       	or	r18, r30
    20fa:	28 83       	st	Y, r18
		SREG = oldSREG;
    20fc:	8f bf       	out	0x3f, r24	; 63
	}
}
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	f9 01       	movw	r30, r18
    2110:	ea 54       	subi	r30, 0x4A	; 74
    2112:	fe 4f       	sbci	r31, 0xFE	; 254
    2114:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2116:	f9 01       	movw	r30, r18
    2118:	e6 53       	subi	r30, 0x36	; 54
    211a:	fe 4f       	sbci	r31, 0xFE	; 254
    211c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    211e:	f9 01       	movw	r30, r18
    2120:	e2 52       	subi	r30, 0x22	; 34
    2122:	fe 4f       	sbci	r31, 0xFE	; 254
    2124:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2126:	cc 23       	and	r28, r28
    2128:	c1 f0       	breq	.+48     	; 0x215a <digitalWrite+0x56>
    212a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    212c:	81 11       	cpse	r24, r1
    212e:	0e 94 1d 10 	call	0x203a	; 0x203a <turnOffPWM>

	out = portOutputRegister(port);
    2132:	ec 2f       	mov	r30, r28
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	e4 50       	subi	r30, 0x04	; 4
    213c:	fe 4f       	sbci	r31, 0xFE	; 254
    213e:	a5 91       	lpm	r26, Z+
    2140:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2142:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2144:	f8 94       	cli

	if (val == LOW) {
    2146:	11 11       	cpse	r17, r1
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <digitalWrite+0x4e>
		*out &= ~bit;
    214a:	8c 91       	ld	r24, X
    214c:	d0 95       	com	r29
    214e:	d8 23       	and	r29, r24
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2152:	ec 91       	ld	r30, X
    2154:	de 2b       	or	r29, r30
    2156:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2158:	9f bf       	out	0x3f, r25	; 63
}
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	08 95       	ret

00002162 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    2162:	20 91 be 06 	lds	r18, 0x06BE	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    2166:	30 91 bf 06 	lds	r19, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	b9 f4       	brne	.+46     	; 0x219e <_ZN14SoftwareSerial4readEv+0x3c>
    2170:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    2174:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2178:	98 17       	cp	r25, r24
    217a:	89 f0       	breq	.+34     	; 0x219e <_ZN14SoftwareSerial4readEv+0x3c>
    217c:	e0 91 7c 06 	lds	r30, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	e2 58       	subi	r30, 0x82	; 130
    2184:	f9 4f       	sbci	r31, 0xF9	; 249
    2186:	80 81       	ld	r24, Z
    2188:	20 91 7c 06 	lds	r18, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	2f 5f       	subi	r18, 0xFF	; 255
    2190:	3f 4f       	sbci	r19, 0xFF	; 255
    2192:	2f 73       	andi	r18, 0x3F	; 63
    2194:	33 27       	eor	r19, r19
    2196:	20 93 7c 06 	sts	0x067C, r18	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	08 95       	ret
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	9f ef       	ldi	r25, 0xFF	; 255
    21a2:	08 95       	ret

000021a4 <_ZN14SoftwareSerial5writeEh>:
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	dc 01       	movw	r26, r24
    21ac:	5c 96       	adiw	r26, 0x1c	; 28
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	5d 97       	sbiw	r26, 0x1d	; 29
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	39 f4       	brne	.+14     	; 0x21c6 <_ZN14SoftwareSerial5writeEh+0x22>
    21b8:	21 e0       	ldi	r18, 0x01	; 1
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	13 96       	adiw	r26, 0x03	; 3
    21be:	3c 93       	st	X, r19
    21c0:	2e 93       	st	-X, r18
    21c2:	12 97       	sbiw	r26, 0x02	; 2
    21c4:	3b c0       	rjmp	.+118    	; 0x223c <_ZN14SoftwareSerial5writeEh+0x98>
    21c6:	51 96       	adiw	r26, 0x11	; 17
    21c8:	ed 91       	ld	r30, X+
    21ca:	fc 91       	ld	r31, X
    21cc:	52 97       	sbiw	r26, 0x12	; 18
    21ce:	50 96       	adiw	r26, 0x10	; 16
    21d0:	2c 91       	ld	r18, X
    21d2:	50 97       	sbiw	r26, 0x10	; 16
    21d4:	32 2f       	mov	r19, r18
    21d6:	30 95       	com	r19
    21d8:	1f b7       	in	r17, 0x3f	; 63
    21da:	5e 96       	adiw	r26, 0x1e	; 30
    21dc:	4c 91       	ld	r20, X
    21de:	5e 97       	sbiw	r26, 0x1e	; 30
    21e0:	74 2f       	mov	r23, r20
    21e2:	72 70       	andi	r23, 0x02	; 2
    21e4:	41 fd       	sbrc	r20, 1
    21e6:	60 95       	com	r22
    21e8:	f8 94       	cli
    21ea:	40 81       	ld	r20, Z
    21ec:	77 23       	and	r23, r23
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <_ZN14SoftwareSerial5writeEh+0x50>
    21f0:	42 2b       	or	r20, r18
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <_ZN14SoftwareSerial5writeEh+0x52>
    21f4:	43 23       	and	r20, r19
    21f6:	40 83       	st	Z, r20
    21f8:	ec 01       	movw	r28, r24
    21fa:	21 97       	sbiw	r28, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <_ZN14SoftwareSerial5writeEh+0x56>
    21fe:	48 e0       	ldi	r20, 0x08	; 8
    2200:	50 81       	ld	r21, Z
    2202:	60 ff       	sbrs	r22, 0
    2204:	02 c0       	rjmp	.+4      	; 0x220a <_ZN14SoftwareSerial5writeEh+0x66>
    2206:	52 2b       	or	r21, r18
    2208:	01 c0       	rjmp	.+2      	; 0x220c <_ZN14SoftwareSerial5writeEh+0x68>
    220a:	53 23       	and	r21, r19
    220c:	50 83       	st	Z, r21
    220e:	ec 01       	movw	r28, r24
    2210:	21 97       	sbiw	r28, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <_ZN14SoftwareSerial5writeEh+0x6c>
    2214:	66 95       	lsr	r22
    2216:	41 50       	subi	r20, 0x01	; 1
    2218:	99 f7       	brne	.-26     	; 0x2200 <_ZN14SoftwareSerial5writeEh+0x5c>
    221a:	80 81       	ld	r24, Z
    221c:	77 23       	and	r23, r23
    221e:	19 f0       	breq	.+6      	; 0x2226 <_ZN14SoftwareSerial5writeEh+0x82>
    2220:	83 23       	and	r24, r19
    2222:	80 83       	st	Z, r24
    2224:	02 c0       	rjmp	.+4      	; 0x222a <_ZN14SoftwareSerial5writeEh+0x86>
    2226:	28 2b       	or	r18, r24
    2228:	20 83       	st	Z, r18
    222a:	1f bf       	out	0x3f, r17	; 63
    222c:	5c 96       	adiw	r26, 0x1c	; 28
    222e:	8d 91       	ld	r24, X+
    2230:	9c 91       	ld	r25, X
    2232:	5d 97       	sbiw	r26, 0x1d	; 29
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <_ZN14SoftwareSerial5writeEh+0x90>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	08 95       	ret

00002244 <_ZN14SoftwareSerial5flushEv>:
    2244:	08 95       	ret

00002246 <_ZN14SoftwareSerial4peekEv>:
    2246:	20 91 be 06 	lds	r18, 0x06BE	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    224a:	30 91 bf 06 	lds	r19, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    224e:	28 17       	cp	r18, r24
    2250:	39 07       	cpc	r19, r25
    2252:	71 f4       	brne	.+28     	; 0x2270 <_ZN14SoftwareSerial4peekEv+0x2a>
    2254:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    2258:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    225c:	98 17       	cp	r25, r24
    225e:	41 f0       	breq	.+16     	; 0x2270 <_ZN14SoftwareSerial4peekEv+0x2a>
    2260:	e0 91 7c 06 	lds	r30, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	e2 58       	subi	r30, 0x82	; 130
    2268:	f9 4f       	sbci	r31, 0xF9	; 249
    226a:	80 81       	ld	r24, Z
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	08 95       	ret
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	9f ef       	ldi	r25, 0xFF	; 255
    2274:	08 95       	ret

00002276 <_ZN14SoftwareSerial9availableEv>:
    2276:	20 91 be 06 	lds	r18, 0x06BE	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    227a:	30 91 bf 06 	lds	r19, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    227e:	28 17       	cp	r18, r24
    2280:	39 07       	cpc	r19, r25
    2282:	71 f4       	brne	.+28     	; 0x22a0 <_ZN14SoftwareSerial9availableEv+0x2a>
    2284:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2288:	20 91 7c 06 	lds	r18, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	80 5c       	subi	r24, 0xC0	; 192
    2290:	9f 4f       	sbci	r25, 0xFF	; 255
    2292:	82 1b       	sub	r24, r18
    2294:	91 09       	sbc	r25, r1
    2296:	60 e4       	ldi	r22, 0x40	; 64
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	0e 94 24 13 	call	0x2648	; 0x2648 <__divmodhi4>
    229e:	08 95       	ret
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	08 95       	ret

000022a6 <_ZN14SoftwareSerial13stopListeningEv>:
    22a6:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    22aa:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    22ae:	e8 17       	cp	r30, r24
    22b0:	f9 07       	cpc	r31, r25
    22b2:	69 f4       	brne	.+26     	; 0x22ce <_ZN14SoftwareSerial13stopListeningEv+0x28>
    22b4:	a3 89       	ldd	r26, Z+19	; 0x13
    22b6:	b4 89       	ldd	r27, Z+20	; 0x14
    22b8:	9c 91       	ld	r25, X
    22ba:	85 89       	ldd	r24, Z+21	; 0x15
    22bc:	80 95       	com	r24
    22be:	89 23       	and	r24, r25
    22c0:	8c 93       	st	X, r24
    22c2:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    22c6:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	08 95       	ret
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	08 95       	ret

000022d2 <_ZN14SoftwareSerial6listenEv>:
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	ec 01       	movw	r28, r24
    22d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22dc:	89 2b       	or	r24, r25
    22de:	f1 f0       	breq	.+60     	; 0x231c <_ZN14SoftwareSerial6listenEv+0x4a>
    22e0:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    22e4:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    22e8:	c8 17       	cp	r28, r24
    22ea:	d9 07       	cpc	r29, r25
    22ec:	b9 f0       	breq	.+46     	; 0x231c <_ZN14SoftwareSerial6listenEv+0x4a>
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	11 f0       	breq	.+4      	; 0x22f6 <_ZN14SoftwareSerial6listenEv+0x24>
    22f2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN14SoftwareSerial13stopListeningEv>
    22f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22f8:	8e 7f       	andi	r24, 0xFE	; 254
    22fa:	8e 8f       	std	Y+30, r24	; 0x1e
    22fc:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2300:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    2304:	d0 93 bf 06 	sts	0x06BF, r29	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    2308:	c0 93 be 06 	sts	0x06BE, r28	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    230c:	eb 89       	ldd	r30, Y+19	; 0x13
    230e:	fc 89       	ldd	r31, Y+20	; 0x14
    2310:	90 81       	ld	r25, Z
    2312:	8d 89       	ldd	r24, Y+21	; 0x15
    2314:	89 2b       	or	r24, r25
    2316:	80 83       	st	Z, r24
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	01 c0       	rjmp	.+2      	; 0x231e <_ZN14SoftwareSerial6listenEv+0x4c>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	08 95       	ret

00002324 <__vector_3>:
    2324:	1f 92       	push	r1
    2326:	0f 92       	push	r0
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	0f 92       	push	r0
    232c:	11 24       	eor	r1, r1
    232e:	2f 93       	push	r18
    2330:	3f 93       	push	r19
    2332:	4f 93       	push	r20
    2334:	5f 93       	push	r21
    2336:	6f 93       	push	r22
    2338:	7f 93       	push	r23
    233a:	8f 93       	push	r24
    233c:	9f 93       	push	r25
    233e:	af 93       	push	r26
    2340:	bf 93       	push	r27
    2342:	ef 93       	push	r30
    2344:	ff 93       	push	r31
    2346:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <_ZN14SoftwareSerial13active_objectE>
    234a:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial13active_objectE+0x1>
    234e:	30 97       	sbiw	r30, 0x00	; 0
    2350:	09 f4       	brne	.+2      	; 0x2354 <__vector_3+0x30>
    2352:	51 c0       	rjmp	.+162    	; 0x23f6 <__vector_3+0xd2>
    2354:	96 8d       	ldd	r25, Z+30	; 0x1e
    2356:	a6 85       	ldd	r26, Z+14	; 0x0e
    2358:	b7 85       	ldd	r27, Z+15	; 0x0f
    235a:	85 85       	ldd	r24, Z+13	; 0x0d
    235c:	91 ff       	sbrs	r25, 1
    235e:	04 c0       	rjmp	.+8      	; 0x2368 <__vector_3+0x44>
    2360:	9c 91       	ld	r25, X
    2362:	89 23       	and	r24, r25
    2364:	29 f4       	brne	.+10     	; 0x2370 <__vector_3+0x4c>
    2366:	47 c0       	rjmp	.+142    	; 0x23f6 <__vector_3+0xd2>
    2368:	9c 91       	ld	r25, X
    236a:	89 23       	and	r24, r25
    236c:	09 f0       	breq	.+2      	; 0x2370 <__vector_3+0x4c>
    236e:	43 c0       	rjmp	.+134    	; 0x23f6 <__vector_3+0xd2>
    2370:	a3 89       	ldd	r26, Z+19	; 0x13
    2372:	b4 89       	ldd	r27, Z+20	; 0x14
    2374:	9c 91       	ld	r25, X
    2376:	85 89       	ldd	r24, Z+21	; 0x15
    2378:	80 95       	com	r24
    237a:	89 23       	and	r24, r25
    237c:	8c 93       	st	X, r24
    237e:	86 89       	ldd	r24, Z+22	; 0x16
    2380:	97 89       	ldd	r25, Z+23	; 0x17
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <__vector_3+0x5e>
    2386:	60 8d       	ldd	r22, Z+24	; 0x18
    2388:	71 8d       	ldd	r23, Z+25	; 0x19
    238a:	a6 85       	ldd	r26, Z+14	; 0x0e
    238c:	b7 85       	ldd	r27, Z+15	; 0x0f
    238e:	55 85       	ldd	r21, Z+13	; 0x0d
    2390:	38 e0       	ldi	r19, 0x08	; 8
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	cb 01       	movw	r24, r22
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <__vector_3+0x72>
    239a:	82 2f       	mov	r24, r18
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	95 95       	asr	r25
    23a0:	87 95       	ror	r24
    23a2:	28 2f       	mov	r18, r24
    23a4:	4c 91       	ld	r20, X
    23a6:	45 23       	and	r20, r21
    23a8:	09 f0       	breq	.+2      	; 0x23ac <__vector_3+0x88>
    23aa:	20 68       	ori	r18, 0x80	; 128
    23ac:	31 50       	subi	r19, 0x01	; 1
    23ae:	91 f7       	brne	.-28     	; 0x2394 <__vector_3+0x70>
    23b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    23b2:	81 fd       	sbrc	r24, 1
    23b4:	20 95       	com	r18
    23b6:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	8f 73       	andi	r24, 0x3F	; 63
    23c0:	99 27       	eor	r25, r25
    23c2:	30 91 7c 06 	lds	r19, 0x067C	; 0x80067c <_ZN14SoftwareSerial20_receive_buffer_headE>
    23c6:	38 17       	cp	r19, r24
    23c8:	49 f0       	breq	.+18     	; 0x23dc <__vector_3+0xb8>
    23ca:	a0 91 7d 06 	lds	r26, 0x067D	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	a2 58       	subi	r26, 0x82	; 130
    23d2:	b9 4f       	sbci	r27, 0xF9	; 249
    23d4:	2c 93       	st	X, r18
    23d6:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <_ZN14SoftwareSerial20_receive_buffer_tailE>
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <__vector_3+0xbe>
    23dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    23de:	81 60       	ori	r24, 0x01	; 1
    23e0:	86 8f       	std	Z+30, r24	; 0x1e
    23e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e4:	93 8d       	ldd	r25, Z+27	; 0x1b
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <__vector_3+0xc2>
    23ea:	a3 89       	ldd	r26, Z+19	; 0x13
    23ec:	b4 89       	ldd	r27, Z+20	; 0x14
    23ee:	9c 91       	ld	r25, X
    23f0:	85 89       	ldd	r24, Z+21	; 0x15
    23f2:	89 2b       	or	r24, r25
    23f4:	8c 93       	st	X, r24
    23f6:	ff 91       	pop	r31
    23f8:	ef 91       	pop	r30
    23fa:	bf 91       	pop	r27
    23fc:	af 91       	pop	r26
    23fe:	9f 91       	pop	r25
    2400:	8f 91       	pop	r24
    2402:	7f 91       	pop	r23
    2404:	6f 91       	pop	r22
    2406:	5f 91       	pop	r21
    2408:	4f 91       	pop	r20
    240a:	3f 91       	pop	r19
    240c:	2f 91       	pop	r18
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	0f 90       	pop	r0
    2414:	1f 90       	pop	r1
    2416:	18 95       	reti

00002418 <_ZN14SoftwareSerial5setTXEh>:
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ec 01       	movw	r28, r24
    2420:	16 2f       	mov	r17, r22
    2422:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2424:	66 95       	lsr	r22
    2426:	61 70       	andi	r22, 0x01	; 1
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	68 27       	eor	r22, r24
    242c:	81 2f       	mov	r24, r17
    242e:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	81 2f       	mov	r24, r17
    2436:	0e 94 46 10 	call	0x208c	; 0x208c <pinMode>
    243a:	81 2f       	mov	r24, r17
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	fc 01       	movw	r30, r24
    2440:	e6 53       	subi	r30, 0x36	; 54
    2442:	fe 4f       	sbci	r31, 0xFE	; 254
    2444:	e4 91       	lpm	r30, Z
    2446:	e8 8b       	std	Y+16, r30	; 0x10
    2448:	fc 01       	movw	r30, r24
    244a:	e2 52       	subi	r30, 0x22	; 34
    244c:	fe 4f       	sbci	r31, 0xFE	; 254
    244e:	e4 91       	lpm	r30, Z
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	e4 50       	subi	r30, 0x04	; 4
    2458:	fe 4f       	sbci	r31, 0xFE	; 254
    245a:	85 91       	lpm	r24, Z+
    245c:	94 91       	lpm	r25, Z
    245e:	9a 8b       	std	Y+18, r25	; 0x12
    2460:	89 8b       	std	Y+17, r24	; 0x11
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	08 95       	ret

0000246a <_ZN14SoftwareSerial5setRXEh>:
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ec 01       	movw	r28, r24
    2472:	16 2f       	mov	r17, r22
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	81 2f       	mov	r24, r17
    2478:	0e 94 46 10 	call	0x208c	; 0x208c <pinMode>
    247c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    247e:	81 fd       	sbrc	r24, 1
    2480:	04 c0       	rjmp	.+8      	; 0x248a <_ZN14SoftwareSerial5setRXEh+0x20>
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	81 2f       	mov	r24, r17
    2486:	0e 94 82 10 	call	0x2104	; 0x2104 <digitalWrite>
    248a:	1c 87       	std	Y+12, r17	; 0x0c
    248c:	81 2f       	mov	r24, r17
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	fc 01       	movw	r30, r24
    2492:	e6 53       	subi	r30, 0x36	; 54
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	e4 91       	lpm	r30, Z
    2498:	ed 87       	std	Y+13, r30	; 0x0d
    249a:	fc 01       	movw	r30, r24
    249c:	e2 52       	subi	r30, 0x22	; 34
    249e:	fe 4f       	sbci	r31, 0xFE	; 254
    24a0:	e4 91       	lpm	r30, Z
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	ee 50       	subi	r30, 0x0E	; 14
    24aa:	fe 4f       	sbci	r31, 0xFE	; 254
    24ac:	85 91       	lpm	r24, Z+
    24ae:	94 91       	lpm	r25, Z
    24b0:	9f 87       	std	Y+15, r25	; 0x0f
    24b2:	8e 87       	std	Y+14, r24	; 0x0e
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	08 95       	ret

000024bc <_ZN14SoftwareSerialC1Ehhb>:
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	ec 01       	movw	r28, r24
    24c4:	16 2f       	mov	r17, r22
    24c6:	1b 82       	std	Y+3, r1	; 0x03
    24c8:	1a 82       	std	Y+2, r1	; 0x02
    24ca:	88 ee       	ldi	r24, 0xE8	; 232
    24cc:	93 e0       	ldi	r25, 0x03	; 3
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	8c 83       	std	Y+4, r24	; 0x04
    24d4:	9d 83       	std	Y+5, r25	; 0x05
    24d6:	ae 83       	std	Y+6, r26	; 0x06
    24d8:	bf 83       	std	Y+7, r27	; 0x07
    24da:	89 ea       	ldi	r24, 0xA9	; 169
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	99 83       	std	Y+1, r25	; 0x01
    24e0:	88 83       	st	Y, r24
    24e2:	1f 8a       	std	Y+23, r1	; 0x17
    24e4:	1e 8a       	std	Y+22, r1	; 0x16
    24e6:	19 8e       	std	Y+25, r1	; 0x19
    24e8:	18 8e       	std	Y+24, r1	; 0x18
    24ea:	1b 8e       	std	Y+27, r1	; 0x1b
    24ec:	1a 8e       	std	Y+26, r1	; 0x1a
    24ee:	1d 8e       	std	Y+29, r1	; 0x1d
    24f0:	1c 8e       	std	Y+28, r1	; 0x1c
    24f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24f4:	8e 7f       	andi	r24, 0xFE	; 254
    24f6:	20 fb       	bst	r18, 0
    24f8:	81 f9       	bld	r24, 1
    24fa:	8e 8f       	std	Y+30, r24	; 0x1e
    24fc:	64 2f       	mov	r22, r20
    24fe:	ce 01       	movw	r24, r28
    2500:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN14SoftwareSerial5setTXEh>
    2504:	61 2f       	mov	r22, r17
    2506:	ce 01       	movw	r24, r28
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0c 94 35 12 	jmp	0x246a	; 0x246a <_ZN14SoftwareSerial5setRXEh>

00002512 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	ec 01       	movw	r28, r24
    2518:	9a 01       	movw	r18, r20
    251a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    251c:	1b 8e       	std	Y+27, r1	; 0x1b
    251e:	1a 8e       	std	Y+26, r1	; 0x1a
    2520:	19 8e       	std	Y+25, r1	; 0x19
    2522:	18 8e       	std	Y+24, r1	; 0x18
    2524:	1f 8a       	std	Y+23, r1	; 0x17
    2526:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	79 e0       	ldi	r23, 0x09	; 9
    252c:	8d e3       	ldi	r24, 0x3D	; 61
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__divmodsi4>
    2534:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2536:	24 30       	cpi	r18, 0x04	; 4
    2538:	31 05       	cpc	r19, r1
    253a:	18 f0       	brcs	.+6      	; 0x2542 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    253c:	c9 01       	movw	r24, r18
    253e:	03 97       	sbiw	r24, 0x03	; 3
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2546:	9d 8f       	std	Y+29, r25	; 0x1d
    2548:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    254a:	6c 85       	ldd	r22, Y+12	; 0x0c
    254c:	66 31       	cpi	r22, 0x16	; 22
    254e:	08 f0       	brcs	.+2      	; 0x2552 <_ZN14SoftwareSerial5beginEl+0x40>
    2550:	69 c0       	rjmp	.+210    	; 0x2624 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2552:	c9 01       	movw	r24, r18
    2554:	96 95       	lsr	r25
    2556:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2558:	84 31       	cpi	r24, 0x14	; 20
    255a:	91 05       	cpc	r25, r1
    255c:	10 f0       	brcs	.+4      	; 0x2562 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    255e:	43 97       	sbiw	r24, 0x13	; 19
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2566:	9f 8b       	std	Y+23, r25	; 0x17
    2568:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    256a:	36 97       	sbiw	r30, 0x06	; 6
    256c:	18 f0       	brcs	.+6      	; 0x2574 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    256e:	c9 01       	movw	r24, r18
    2570:	05 97       	sbiw	r24, 0x05	; 5
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2578:	99 8f       	std	Y+25, r25	; 0x19
    257a:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    257c:	c9 01       	movw	r24, r18
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	28 0f       	add	r18, r24
    2584:	39 1f       	adc	r19, r25
    2586:	36 95       	lsr	r19
    2588:	27 95       	ror	r18
    258a:	36 95       	lsr	r19
    258c:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    258e:	2d 30       	cpi	r18, 0x0D	; 13
    2590:	31 05       	cpc	r19, r1
    2592:	18 f0       	brcs	.+6      	; 0x259a <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2594:	2c 50       	subi	r18, 0x0C	; 12
    2596:	31 09       	sbc	r19, r1
    2598:	02 c0       	rjmp	.+4      	; 0x259e <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    259a:	21 e0       	ldi	r18, 0x01	; 1
    259c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    259e:	3b 8f       	std	Y+27, r19	; 0x1b
    25a0:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    25a2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    25a6:	68 30       	cpi	r22, 0x08	; 8
    25a8:	50 f0       	brcs	.+20     	; 0x25be <_ZN14SoftwareSerial5beginEl+0xac>
    25aa:	21 e0       	ldi	r18, 0x01	; 1
    25ac:	6e 30       	cpi	r22, 0x0E	; 14
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <_ZN14SoftwareSerial5beginEl+0xa0>
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	01 c0       	rjmp	.+2      	; 0x25b8 <_ZN14SoftwareSerial5beginEl+0xa6>
    25b6:	88 0f       	add	r24, r24
    25b8:	2a 95       	dec	r18
    25ba:	ea f7       	brpl	.-6      	; 0x25b6 <_ZN14SoftwareSerial5beginEl+0xa4>
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <_ZN14SoftwareSerial5beginEl+0xae>
    25be:	84 e0       	ldi	r24, 0x04	; 4
    25c0:	89 2b       	or	r24, r25
    25c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    25c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    25c8:	98 30       	cpi	r25, 0x08	; 8
    25ca:	38 f0       	brcs	.+14     	; 0x25da <_ZN14SoftwareSerial5beginEl+0xc8>
    25cc:	9e 30       	cpi	r25, 0x0E	; 14
    25ce:	40 f0       	brcs	.+16     	; 0x25e0 <_ZN14SoftwareSerial5beginEl+0xce>
    25d0:	96 31       	cpi	r25, 0x16	; 22
    25d2:	48 f0       	brcs	.+18     	; 0x25e6 <_ZN14SoftwareSerial5beginEl+0xd4>
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	08 c0       	rjmp	.+16     	; 0x25ea <_ZN14SoftwareSerial5beginEl+0xd8>
    25da:	2d e6       	ldi	r18, 0x6D	; 109
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	05 c0       	rjmp	.+10     	; 0x25ea <_ZN14SoftwareSerial5beginEl+0xd8>
    25e0:	2b e6       	ldi	r18, 0x6B	; 107
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <_ZN14SoftwareSerial5beginEl+0xd8>
    25e6:	2c e6       	ldi	r18, 0x6C	; 108
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	3c 8b       	std	Y+20, r19	; 0x14
    25ec:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    25ee:	98 30       	cpi	r25, 0x08	; 8
    25f0:	30 f4       	brcc	.+12     	; 0x25fe <_ZN14SoftwareSerial5beginEl+0xec>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <_ZN14SoftwareSerial5beginEl+0xe6>
    25f6:	88 0f       	add	r24, r24
    25f8:	9a 95       	dec	r25
    25fa:	ea f7       	brpl	.-6      	; 0x25f6 <_ZN14SoftwareSerial5beginEl+0xe4>
    25fc:	0e c0       	rjmp	.+28     	; 0x261a <_ZN14SoftwareSerial5beginEl+0x108>
    25fe:	29 2f       	mov	r18, r25
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	9e 30       	cpi	r25, 0x0E	; 14
    2604:	18 f4       	brcc	.+6      	; 0x260c <_ZN14SoftwareSerial5beginEl+0xfa>
    2606:	28 50       	subi	r18, 0x08	; 8
    2608:	31 09       	sbc	r19, r1
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <_ZN14SoftwareSerial5beginEl+0xfe>
    260c:	2e 50       	subi	r18, 0x0E	; 14
    260e:	31 09       	sbc	r19, r1
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <_ZN14SoftwareSerial5beginEl+0x104>
    2614:	88 0f       	add	r24, r24
    2616:	2a 95       	dec	r18
    2618:	ea f7       	brpl	.-6      	; 0x2614 <_ZN14SoftwareSerial5beginEl+0x102>
    261a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    261c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    261e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2624:	ce 01       	movw	r24, r28
}
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    262a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <_ZN14SoftwareSerial6listenEv>

0000262e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    262e:	08 95       	ret

00002630 <__udivmodqi4>:
    2630:	99 1b       	sub	r25, r25
    2632:	79 e0       	ldi	r23, 0x09	; 9
    2634:	04 c0       	rjmp	.+8      	; 0x263e <__udivmodqi4_ep>

00002636 <__udivmodqi4_loop>:
    2636:	99 1f       	adc	r25, r25
    2638:	96 17       	cp	r25, r22
    263a:	08 f0       	brcs	.+2      	; 0x263e <__udivmodqi4_ep>
    263c:	96 1b       	sub	r25, r22

0000263e <__udivmodqi4_ep>:
    263e:	88 1f       	adc	r24, r24
    2640:	7a 95       	dec	r23
    2642:	c9 f7       	brne	.-14     	; 0x2636 <__udivmodqi4_loop>
    2644:	80 95       	com	r24
    2646:	08 95       	ret

00002648 <__divmodhi4>:
    2648:	97 fb       	bst	r25, 7
    264a:	07 2e       	mov	r0, r23
    264c:	16 f4       	brtc	.+4      	; 0x2652 <__divmodhi4+0xa>
    264e:	00 94       	com	r0
    2650:	07 d0       	rcall	.+14     	; 0x2660 <__divmodhi4_neg1>
    2652:	77 fd       	sbrc	r23, 7
    2654:	09 d0       	rcall	.+18     	; 0x2668 <__divmodhi4_neg2>
    2656:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodhi4>
    265a:	07 fc       	sbrc	r0, 7
    265c:	05 d0       	rcall	.+10     	; 0x2668 <__divmodhi4_neg2>
    265e:	3e f4       	brtc	.+14     	; 0x266e <__divmodhi4_exit>

00002660 <__divmodhi4_neg1>:
    2660:	90 95       	com	r25
    2662:	81 95       	neg	r24
    2664:	9f 4f       	sbci	r25, 0xFF	; 255
    2666:	08 95       	ret

00002668 <__divmodhi4_neg2>:
    2668:	70 95       	com	r23
    266a:	61 95       	neg	r22
    266c:	7f 4f       	sbci	r23, 0xFF	; 255

0000266e <__divmodhi4_exit>:
    266e:	08 95       	ret

00002670 <__udivmodsi4>:
    2670:	a1 e2       	ldi	r26, 0x21	; 33
    2672:	1a 2e       	mov	r1, r26
    2674:	aa 1b       	sub	r26, r26
    2676:	bb 1b       	sub	r27, r27
    2678:	fd 01       	movw	r30, r26
    267a:	0d c0       	rjmp	.+26     	; 0x2696 <__udivmodsi4_ep>

0000267c <__udivmodsi4_loop>:
    267c:	aa 1f       	adc	r26, r26
    267e:	bb 1f       	adc	r27, r27
    2680:	ee 1f       	adc	r30, r30
    2682:	ff 1f       	adc	r31, r31
    2684:	a2 17       	cp	r26, r18
    2686:	b3 07       	cpc	r27, r19
    2688:	e4 07       	cpc	r30, r20
    268a:	f5 07       	cpc	r31, r21
    268c:	20 f0       	brcs	.+8      	; 0x2696 <__udivmodsi4_ep>
    268e:	a2 1b       	sub	r26, r18
    2690:	b3 0b       	sbc	r27, r19
    2692:	e4 0b       	sbc	r30, r20
    2694:	f5 0b       	sbc	r31, r21

00002696 <__udivmodsi4_ep>:
    2696:	66 1f       	adc	r22, r22
    2698:	77 1f       	adc	r23, r23
    269a:	88 1f       	adc	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	1a 94       	dec	r1
    26a0:	69 f7       	brne	.-38     	; 0x267c <__udivmodsi4_loop>
    26a2:	60 95       	com	r22
    26a4:	70 95       	com	r23
    26a6:	80 95       	com	r24
    26a8:	90 95       	com	r25
    26aa:	9b 01       	movw	r18, r22
    26ac:	ac 01       	movw	r20, r24
    26ae:	bd 01       	movw	r22, r26
    26b0:	cf 01       	movw	r24, r30
    26b2:	08 95       	ret

000026b4 <__divmodsi4>:
    26b4:	05 2e       	mov	r0, r21
    26b6:	97 fb       	bst	r25, 7
    26b8:	1e f4       	brtc	.+6      	; 0x26c0 <__divmodsi4+0xc>
    26ba:	00 94       	com	r0
    26bc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__negsi2>
    26c0:	57 fd       	sbrc	r21, 7
    26c2:	07 d0       	rcall	.+14     	; 0x26d2 <__divmodsi4_neg2>
    26c4:	0e 94 38 13 	call	0x2670	; 0x2670 <__udivmodsi4>
    26c8:	07 fc       	sbrc	r0, 7
    26ca:	03 d0       	rcall	.+6      	; 0x26d2 <__divmodsi4_neg2>
    26cc:	4e f4       	brtc	.+18     	; 0x26e0 <__divmodsi4_exit>
    26ce:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__negsi2>

000026d2 <__divmodsi4_neg2>:
    26d2:	50 95       	com	r21
    26d4:	40 95       	com	r20
    26d6:	30 95       	com	r19
    26d8:	21 95       	neg	r18
    26da:	3f 4f       	sbci	r19, 0xFF	; 255
    26dc:	4f 4f       	sbci	r20, 0xFF	; 255
    26de:	5f 4f       	sbci	r21, 0xFF	; 255

000026e0 <__divmodsi4_exit>:
    26e0:	08 95       	ret

000026e2 <__negsi2>:
    26e2:	90 95       	com	r25
    26e4:	80 95       	com	r24
    26e6:	70 95       	com	r23
    26e8:	61 95       	neg	r22
    26ea:	7f 4f       	sbci	r23, 0xFF	; 255
    26ec:	8f 4f       	sbci	r24, 0xFF	; 255
    26ee:	9f 4f       	sbci	r25, 0xFF	; 255
    26f0:	08 95       	ret

000026f2 <__ashrdi3>:
    26f2:	97 fb       	bst	r25, 7
    26f4:	10 f8       	bld	r1, 0

000026f6 <__lshrdi3>:
    26f6:	16 94       	lsr	r1
    26f8:	00 08       	sbc	r0, r0
    26fa:	0f 93       	push	r16
    26fc:	08 30       	cpi	r16, 0x08	; 8
    26fe:	98 f0       	brcs	.+38     	; 0x2726 <__lshrdi3+0x30>
    2700:	08 50       	subi	r16, 0x08	; 8
    2702:	23 2f       	mov	r18, r19
    2704:	34 2f       	mov	r19, r20
    2706:	45 2f       	mov	r20, r21
    2708:	56 2f       	mov	r21, r22
    270a:	67 2f       	mov	r22, r23
    270c:	78 2f       	mov	r23, r24
    270e:	89 2f       	mov	r24, r25
    2710:	90 2d       	mov	r25, r0
    2712:	f4 cf       	rjmp	.-24     	; 0x26fc <__lshrdi3+0x6>
    2714:	05 94       	asr	r0
    2716:	97 95       	ror	r25
    2718:	87 95       	ror	r24
    271a:	77 95       	ror	r23
    271c:	67 95       	ror	r22
    271e:	57 95       	ror	r21
    2720:	47 95       	ror	r20
    2722:	37 95       	ror	r19
    2724:	27 95       	ror	r18
    2726:	0a 95       	dec	r16
    2728:	aa f7       	brpl	.-22     	; 0x2714 <__lshrdi3+0x1e>
    272a:	0f 91       	pop	r16
    272c:	08 95       	ret

0000272e <__udivmodhi4>:
    272e:	aa 1b       	sub	r26, r26
    2730:	bb 1b       	sub	r27, r27
    2732:	51 e1       	ldi	r21, 0x11	; 17
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <__udivmodhi4_ep>

00002736 <__udivmodhi4_loop>:
    2736:	aa 1f       	adc	r26, r26
    2738:	bb 1f       	adc	r27, r27
    273a:	a6 17       	cp	r26, r22
    273c:	b7 07       	cpc	r27, r23
    273e:	10 f0       	brcs	.+4      	; 0x2744 <__udivmodhi4_ep>
    2740:	a6 1b       	sub	r26, r22
    2742:	b7 0b       	sbc	r27, r23

00002744 <__udivmodhi4_ep>:
    2744:	88 1f       	adc	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	5a 95       	dec	r21
    274a:	a9 f7       	brne	.-22     	; 0x2736 <__udivmodhi4_loop>
    274c:	80 95       	com	r24
    274e:	90 95       	com	r25
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	08 95       	ret

00002756 <__tablejump2__>:
    2756:	ee 0f       	add	r30, r30
    2758:	ff 1f       	adc	r31, r31
    275a:	05 90       	lpm	r0, Z+
    275c:	f4 91       	lpm	r31, Z
    275e:	e0 2d       	mov	r30, r0
    2760:	09 94       	ijmp

00002762 <malloc>:
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	91 05       	cpc	r25, r1
    276e:	10 f4       	brcc	.+4      	; 0x2774 <malloc+0x12>
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <__flp>
    2778:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <__flp+0x1>
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	a0 e0       	ldi	r26, 0x00	; 0
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	30 97       	sbiw	r30, 0x00	; 0
    2786:	19 f1       	breq	.+70     	; 0x27ce <malloc+0x6c>
    2788:	40 81       	ld	r20, Z
    278a:	51 81       	ldd	r21, Z+1	; 0x01
    278c:	02 81       	ldd	r16, Z+2	; 0x02
    278e:	13 81       	ldd	r17, Z+3	; 0x03
    2790:	48 17       	cp	r20, r24
    2792:	59 07       	cpc	r21, r25
    2794:	c8 f0       	brcs	.+50     	; 0x27c8 <malloc+0x66>
    2796:	84 17       	cp	r24, r20
    2798:	95 07       	cpc	r25, r21
    279a:	69 f4       	brne	.+26     	; 0x27b6 <malloc+0x54>
    279c:	10 97       	sbiw	r26, 0x00	; 0
    279e:	31 f0       	breq	.+12     	; 0x27ac <malloc+0x4a>
    27a0:	12 96       	adiw	r26, 0x02	; 2
    27a2:	0c 93       	st	X, r16
    27a4:	12 97       	sbiw	r26, 0x02	; 2
    27a6:	13 96       	adiw	r26, 0x03	; 3
    27a8:	1c 93       	st	X, r17
    27aa:	27 c0       	rjmp	.+78     	; 0x27fa <malloc+0x98>
    27ac:	00 93 c2 06 	sts	0x06C2, r16	; 0x8006c2 <__flp>
    27b0:	10 93 c3 06 	sts	0x06C3, r17	; 0x8006c3 <__flp+0x1>
    27b4:	22 c0       	rjmp	.+68     	; 0x27fa <malloc+0x98>
    27b6:	21 15       	cp	r18, r1
    27b8:	31 05       	cpc	r19, r1
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <malloc+0x60>
    27bc:	42 17       	cp	r20, r18
    27be:	53 07       	cpc	r21, r19
    27c0:	18 f4       	brcc	.+6      	; 0x27c8 <malloc+0x66>
    27c2:	9a 01       	movw	r18, r20
    27c4:	bd 01       	movw	r22, r26
    27c6:	ef 01       	movw	r28, r30
    27c8:	df 01       	movw	r26, r30
    27ca:	f8 01       	movw	r30, r16
    27cc:	db cf       	rjmp	.-74     	; 0x2784 <malloc+0x22>
    27ce:	21 15       	cp	r18, r1
    27d0:	31 05       	cpc	r19, r1
    27d2:	f9 f0       	breq	.+62     	; 0x2812 <malloc+0xb0>
    27d4:	28 1b       	sub	r18, r24
    27d6:	39 0b       	sbc	r19, r25
    27d8:	24 30       	cpi	r18, 0x04	; 4
    27da:	31 05       	cpc	r19, r1
    27dc:	80 f4       	brcc	.+32     	; 0x27fe <malloc+0x9c>
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	9b 81       	ldd	r25, Y+3	; 0x03
    27e2:	61 15       	cp	r22, r1
    27e4:	71 05       	cpc	r23, r1
    27e6:	21 f0       	breq	.+8      	; 0x27f0 <malloc+0x8e>
    27e8:	fb 01       	movw	r30, r22
    27ea:	93 83       	std	Z+3, r25	; 0x03
    27ec:	82 83       	std	Z+2, r24	; 0x02
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <malloc+0x96>
    27f0:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <__flp+0x1>
    27f4:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <__flp>
    27f8:	fe 01       	movw	r30, r28
    27fa:	32 96       	adiw	r30, 0x02	; 2
    27fc:	44 c0       	rjmp	.+136    	; 0x2886 <malloc+0x124>
    27fe:	fe 01       	movw	r30, r28
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	81 93       	st	Z+, r24
    2806:	91 93       	st	Z+, r25
    2808:	22 50       	subi	r18, 0x02	; 2
    280a:	31 09       	sbc	r19, r1
    280c:	39 83       	std	Y+1, r19	; 0x01
    280e:	28 83       	st	Y, r18
    2810:	3a c0       	rjmp	.+116    	; 0x2886 <malloc+0x124>
    2812:	20 91 c0 06 	lds	r18, 0x06C0	; 0x8006c0 <__brkval>
    2816:	30 91 c1 06 	lds	r19, 0x06C1	; 0x8006c1 <__brkval+0x1>
    281a:	23 2b       	or	r18, r19
    281c:	41 f4       	brne	.+16     	; 0x282e <malloc+0xcc>
    281e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2822:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2826:	30 93 c1 06 	sts	0x06C1, r19	; 0x8006c1 <__brkval+0x1>
    282a:	20 93 c0 06 	sts	0x06C0, r18	; 0x8006c0 <__brkval>
    282e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2832:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2836:	21 15       	cp	r18, r1
    2838:	31 05       	cpc	r19, r1
    283a:	41 f4       	brne	.+16     	; 0x284c <malloc+0xea>
    283c:	2d b7       	in	r18, 0x3d	; 61
    283e:	3e b7       	in	r19, 0x3e	; 62
    2840:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2844:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2848:	24 1b       	sub	r18, r20
    284a:	35 0b       	sbc	r19, r21
    284c:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <__brkval>
    2850:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <__brkval+0x1>
    2854:	e2 17       	cp	r30, r18
    2856:	f3 07       	cpc	r31, r19
    2858:	a0 f4       	brcc	.+40     	; 0x2882 <malloc+0x120>
    285a:	2e 1b       	sub	r18, r30
    285c:	3f 0b       	sbc	r19, r31
    285e:	28 17       	cp	r18, r24
    2860:	39 07       	cpc	r19, r25
    2862:	78 f0       	brcs	.+30     	; 0x2882 <malloc+0x120>
    2864:	ac 01       	movw	r20, r24
    2866:	4e 5f       	subi	r20, 0xFE	; 254
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	24 17       	cp	r18, r20
    286c:	35 07       	cpc	r19, r21
    286e:	48 f0       	brcs	.+18     	; 0x2882 <malloc+0x120>
    2870:	4e 0f       	add	r20, r30
    2872:	5f 1f       	adc	r21, r31
    2874:	50 93 c1 06 	sts	0x06C1, r21	; 0x8006c1 <__brkval+0x1>
    2878:	40 93 c0 06 	sts	0x06C0, r20	; 0x8006c0 <__brkval>
    287c:	81 93       	st	Z+, r24
    287e:	91 93       	st	Z+, r25
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <malloc+0x124>
    2882:	e0 e0       	ldi	r30, 0x00	; 0
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	cf 01       	movw	r24, r30
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <free>:
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	09 f4       	brne	.+2      	; 0x289c <free+0xa>
    289a:	81 c0       	rjmp	.+258    	; 0x299e <free+0x10c>
    289c:	fc 01       	movw	r30, r24
    289e:	32 97       	sbiw	r30, 0x02	; 2
    28a0:	13 82       	std	Z+3, r1	; 0x03
    28a2:	12 82       	std	Z+2, r1	; 0x02
    28a4:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <__flp>
    28a8:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <__flp+0x1>
    28ac:	10 97       	sbiw	r26, 0x00	; 0
    28ae:	81 f4       	brne	.+32     	; 0x28d0 <free+0x3e>
    28b0:	20 81       	ld	r18, Z
    28b2:	31 81       	ldd	r19, Z+1	; 0x01
    28b4:	82 0f       	add	r24, r18
    28b6:	93 1f       	adc	r25, r19
    28b8:	20 91 c0 06 	lds	r18, 0x06C0	; 0x8006c0 <__brkval>
    28bc:	30 91 c1 06 	lds	r19, 0x06C1	; 0x8006c1 <__brkval+0x1>
    28c0:	28 17       	cp	r18, r24
    28c2:	39 07       	cpc	r19, r25
    28c4:	51 f5       	brne	.+84     	; 0x291a <free+0x88>
    28c6:	f0 93 c1 06 	sts	0x06C1, r31	; 0x8006c1 <__brkval+0x1>
    28ca:	e0 93 c0 06 	sts	0x06C0, r30	; 0x8006c0 <__brkval>
    28ce:	67 c0       	rjmp	.+206    	; 0x299e <free+0x10c>
    28d0:	ed 01       	movw	r28, r26
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	ce 17       	cp	r28, r30
    28d8:	df 07       	cpc	r29, r31
    28da:	40 f4       	brcc	.+16     	; 0x28ec <free+0x5a>
    28dc:	4a 81       	ldd	r20, Y+2	; 0x02
    28de:	5b 81       	ldd	r21, Y+3	; 0x03
    28e0:	9e 01       	movw	r18, r28
    28e2:	41 15       	cp	r20, r1
    28e4:	51 05       	cpc	r21, r1
    28e6:	f1 f0       	breq	.+60     	; 0x2924 <free+0x92>
    28e8:	ea 01       	movw	r28, r20
    28ea:	f5 cf       	rjmp	.-22     	; 0x28d6 <free+0x44>
    28ec:	d3 83       	std	Z+3, r29	; 0x03
    28ee:	c2 83       	std	Z+2, r28	; 0x02
    28f0:	40 81       	ld	r20, Z
    28f2:	51 81       	ldd	r21, Z+1	; 0x01
    28f4:	84 0f       	add	r24, r20
    28f6:	95 1f       	adc	r25, r21
    28f8:	c8 17       	cp	r28, r24
    28fa:	d9 07       	cpc	r29, r25
    28fc:	59 f4       	brne	.+22     	; 0x2914 <free+0x82>
    28fe:	88 81       	ld	r24, Y
    2900:	99 81       	ldd	r25, Y+1	; 0x01
    2902:	84 0f       	add	r24, r20
    2904:	95 1f       	adc	r25, r21
    2906:	02 96       	adiw	r24, 0x02	; 2
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	93 83       	std	Z+3, r25	; 0x03
    2912:	82 83       	std	Z+2, r24	; 0x02
    2914:	21 15       	cp	r18, r1
    2916:	31 05       	cpc	r19, r1
    2918:	29 f4       	brne	.+10     	; 0x2924 <free+0x92>
    291a:	f0 93 c3 06 	sts	0x06C3, r31	; 0x8006c3 <__flp+0x1>
    291e:	e0 93 c2 06 	sts	0x06C2, r30	; 0x8006c2 <__flp>
    2922:	3d c0       	rjmp	.+122    	; 0x299e <free+0x10c>
    2924:	e9 01       	movw	r28, r18
    2926:	fb 83       	std	Y+3, r31	; 0x03
    2928:	ea 83       	std	Y+2, r30	; 0x02
    292a:	49 91       	ld	r20, Y+
    292c:	59 91       	ld	r21, Y+
    292e:	c4 0f       	add	r28, r20
    2930:	d5 1f       	adc	r29, r21
    2932:	ec 17       	cp	r30, r28
    2934:	fd 07       	cpc	r31, r29
    2936:	61 f4       	brne	.+24     	; 0x2950 <free+0xbe>
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	84 0f       	add	r24, r20
    293e:	95 1f       	adc	r25, r21
    2940:	02 96       	adiw	r24, 0x02	; 2
    2942:	e9 01       	movw	r28, r18
    2944:	99 83       	std	Y+1, r25	; 0x01
    2946:	88 83       	st	Y, r24
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	9b 83       	std	Y+3, r25	; 0x03
    294e:	8a 83       	std	Y+2, r24	; 0x02
    2950:	e0 e0       	ldi	r30, 0x00	; 0
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	12 96       	adiw	r26, 0x02	; 2
    2956:	8d 91       	ld	r24, X+
    2958:	9c 91       	ld	r25, X
    295a:	13 97       	sbiw	r26, 0x03	; 3
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	19 f0       	breq	.+6      	; 0x2966 <free+0xd4>
    2960:	fd 01       	movw	r30, r26
    2962:	dc 01       	movw	r26, r24
    2964:	f7 cf       	rjmp	.-18     	; 0x2954 <free+0xc2>
    2966:	8d 91       	ld	r24, X+
    2968:	9c 91       	ld	r25, X
    296a:	11 97       	sbiw	r26, 0x01	; 1
    296c:	9d 01       	movw	r18, r26
    296e:	2e 5f       	subi	r18, 0xFE	; 254
    2970:	3f 4f       	sbci	r19, 0xFF	; 255
    2972:	82 0f       	add	r24, r18
    2974:	93 1f       	adc	r25, r19
    2976:	20 91 c0 06 	lds	r18, 0x06C0	; 0x8006c0 <__brkval>
    297a:	30 91 c1 06 	lds	r19, 0x06C1	; 0x8006c1 <__brkval+0x1>
    297e:	28 17       	cp	r18, r24
    2980:	39 07       	cpc	r19, r25
    2982:	69 f4       	brne	.+26     	; 0x299e <free+0x10c>
    2984:	30 97       	sbiw	r30, 0x00	; 0
    2986:	29 f4       	brne	.+10     	; 0x2992 <free+0x100>
    2988:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <__flp+0x1>
    298c:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <__flp>
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <free+0x104>
    2992:	13 82       	std	Z+3, r1	; 0x03
    2994:	12 82       	std	Z+2, r1	; 0x02
    2996:	b0 93 c1 06 	sts	0x06C1, r27	; 0x8006c1 <__brkval+0x1>
    299a:	a0 93 c0 06 	sts	0x06C0, r26	; 0x8006c0 <__brkval>
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <strcmp_P>:
    29a4:	fb 01       	movw	r30, r22
    29a6:	dc 01       	movw	r26, r24
    29a8:	8d 91       	ld	r24, X+
    29aa:	05 90       	lpm	r0, Z+
    29ac:	80 19       	sub	r24, r0
    29ae:	01 10       	cpse	r0, r1
    29b0:	d9 f3       	breq	.-10     	; 0x29a8 <strcmp_P+0x4>
    29b2:	99 0b       	sbc	r25, r25
    29b4:	08 95       	ret

000029b6 <strstr_P>:
    29b6:	fb 01       	movw	r30, r22
    29b8:	55 91       	lpm	r21, Z+
    29ba:	55 23       	and	r21, r21
    29bc:	a9 f0       	breq	.+42     	; 0x29e8 <strstr_P+0x32>
    29be:	bf 01       	movw	r22, r30
    29c0:	dc 01       	movw	r26, r24
    29c2:	4d 91       	ld	r20, X+
    29c4:	45 17       	cp	r20, r21
    29c6:	41 11       	cpse	r20, r1
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <strstr_P+0xc>
    29ca:	59 f4       	brne	.+22     	; 0x29e2 <strstr_P+0x2c>
    29cc:	cd 01       	movw	r24, r26
    29ce:	05 90       	lpm	r0, Z+
    29d0:	00 20       	and	r0, r0
    29d2:	49 f0       	breq	.+18     	; 0x29e6 <strstr_P+0x30>
    29d4:	4d 91       	ld	r20, X+
    29d6:	40 15       	cp	r20, r0
    29d8:	41 11       	cpse	r20, r1
    29da:	c9 f3       	breq	.-14     	; 0x29ce <strstr_P+0x18>
    29dc:	fb 01       	movw	r30, r22
    29de:	41 11       	cpse	r20, r1
    29e0:	ef cf       	rjmp	.-34     	; 0x29c0 <strstr_P+0xa>
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	08 95       	ret

000029ea <__do_global_dtors>:
    29ea:	11 e0       	ldi	r17, 0x01	; 1
    29ec:	cb e0       	ldi	r28, 0x0B	; 11
    29ee:	d1 e0       	ldi	r29, 0x01	; 1
    29f0:	04 c0       	rjmp	.+8      	; 0x29fa <__do_global_dtors+0x10>
    29f2:	fe 01       	movw	r30, r28
    29f4:	0e 94 ab 13 	call	0x2756	; 0x2756 <__tablejump2__>
    29f8:	21 96       	adiw	r28, 0x01	; 1
    29fa:	cc 30       	cpi	r28, 0x0C	; 12
    29fc:	d1 07       	cpc	r29, r17
    29fe:	c9 f7       	brne	.-14     	; 0x29f2 <__do_global_dtors+0x8>
    2a00:	f8 94       	cli

00002a02 <__stop_program>:
    2a02:	ff cf       	rjmp	.-2      	; 0x2a02 <__stop_program>
